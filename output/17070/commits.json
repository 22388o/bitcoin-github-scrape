[
  {
    "sha": "facec1c643105d0ae74b5d32cf33d593f9e82a36",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWNlYzFjNjQzMTA1ZDBhZTc0YjVkMzJjZjMzZDU5M2Y5ZTgyYTM2",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-10-06T21:52:05Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-10-08T17:02:14Z"
      },
      "message": "wallet: Avoid showing GUI popups on RPC errors",
      "tree": {
        "sha": "70ddbd9cd41bb94a5667ec8ccc24c45b7ffe203f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/70ddbd9cd41bb94a5667ec8ccc24c45b7ffe203f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/facec1c643105d0ae74b5d32cf33d593f9e82a36",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjlcAv9Ht6uaulDRvaSxslC/n92p7ConVI3HJq5FpSr5pqMSMb3Ey6huYC1xS4p\nT/IYb3CDqh+ThwgLi7oYzdMeCoAs/i/l2V3Rxbcg6RRJrFLc53UqgPYxRcn7w0XI\numltdq/B7kkwkCUwE1m+bSabfdIUx9kvIlNMXsKxfwRNPbTZMgoctpbdxOL1dq3k\nviM+V5YB0b1bVBUi/Y/iBw3JHUrmuyt4cjP5wjOUcwZ+5d04t3XaBQ4zw8IKgUEx\nj6IsMYI89OowiKMwy3YXfZ4hwvZOj8AXGcyQ62E3iZg2hyhdb9IK4hnh+LUi50O3\n5EosThpR6t4PvLVG+kEM+AGXwZ5jZPPXsTbrlW4jHiEJkkUBXd1j7X3VmlEqQjN4\nm1qZ5UjqeNTCGrAVybNzJa+Ieh/hMIAyMzhi27qFZKqFHNKqzNXBaz/nwTddKUd8\nQnRnXVH5FZ+8vDcUtCs5UK1KvBQAq1E2+Hl1wPifoIjREHpLezEnqhTVQ1Cxw5n2\ni+hKiU5v\n=FFWu\n-----END PGP SIGNATURE-----",
        "payload": "tree 70ddbd9cd41bb94a5667ec8ccc24c45b7ffe203f\nparent 94e6e9f38deeba61655fee432afe42e66ff72ea3\nauthor MarcoFalke <falke.marco@gmail.com> 1570398725 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1570554134 -0400\n\nwallet: Avoid showing GUI popups on RPC errors\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/facec1c643105d0ae74b5d32cf33d593f9e82a36",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/facec1c643105d0ae74b5d32cf33d593f9e82a36",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/facec1c643105d0ae74b5d32cf33d593f9e82a36/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "94e6e9f38deeba61655fee432afe42e66ff72ea3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94e6e9f38deeba61655fee432afe42e66ff72ea3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/94e6e9f38deeba61655fee432afe42e66ff72ea3"
      }
    ],
    "stats": {
      "total": 189,
      "additions": 91,
      "deletions": 98
    },
    "files": [
      {
        "sha": "0edcb0286dca847af8261e736ddd824d52421c98",
        "filename": "src/dummywallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/facec1c643105d0ae74b5d32cf33d593f9e82a36/src/dummywallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/facec1c643105d0ae74b5d32cf33d593f9e82a36/src/dummywallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dummywallet.cpp?ref=facec1c643105d0ae74b5d32cf33d593f9e82a36",
        "patch": "@@ -2,7 +2,6 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <stdio.h>\n #include <util/system.h>\n #include <walletinitinterface.h>\n #include <support/allocators/secure.h>\n@@ -71,12 +70,12 @@ std::vector<std::shared_ptr<CWallet>> GetWallets()\n     throw std::logic_error(\"Wallet function called in non-wallet build.\");\n }\n \n-std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const std::string& name, std::string& error, std::string& warning)\n+std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const std::string& name, std::string& error, std::vector<std::string>& warnings)\n {\n     throw std::logic_error(\"Wallet function called in non-wallet build.\");\n }\n \n-WalletCreationStatus CreateWallet(interfaces::Chain& chain, const SecureString& passphrase, uint64_t wallet_creation_flags, const std::string& name, std::string& error, std::string& warning, std::shared_ptr<CWallet>& result)\n+WalletCreationStatus CreateWallet(interfaces::Chain& chain, const SecureString& passphrase, uint64_t wallet_creation_flags, const std::string& name, std::string& error, std::vector<std::string>& warnings, std::shared_ptr<CWallet>& result)\n {\n     throw std::logic_error(\"Wallet function called in non-wallet build.\");\n }"
      },
      {
        "sha": "a703888d72e030d2f9702ce9dd67a63c88105fe7",
        "filename": "src/interfaces/node.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/facec1c643105d0ae74b5d32cf33d593f9e82a36/src/interfaces/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/facec1c643105d0ae74b5d32cf33d593f9e82a36/src/interfaces/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.cpp?ref=facec1c643105d0ae74b5d32cf33d593f9e82a36",
        "patch": "@@ -43,8 +43,8 @@ class CWallet;\n fs::path GetWalletDir();\n std::vector<fs::path> ListWalletDir();\n std::vector<std::shared_ptr<CWallet>> GetWallets();\n-std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const std::string& name, std::string& error, std::string& warning);\n-WalletCreationStatus CreateWallet(interfaces::Chain& chain, const SecureString& passphrase, uint64_t wallet_creation_flags, const std::string& name, std::string& error, std::string& warning, std::shared_ptr<CWallet>& result);\n+std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const std::string& name, std::string& error, std::vector<std::string>& warnings);\n+WalletCreationStatus CreateWallet(interfaces::Chain& chain, const SecureString& passphrase, uint64_t wallet_creation_flags, const std::string& name, std::string& error, std::vector<std::string>& warnings, std::shared_ptr<CWallet>& result);\n \n namespace interfaces {\n \n@@ -256,14 +256,14 @@ class NodeImpl : public Node\n         }\n         return wallets;\n     }\n-    std::unique_ptr<Wallet> loadWallet(const std::string& name, std::string& error, std::string& warning) override\n+    std::unique_ptr<Wallet> loadWallet(const std::string& name, std::string& error, std::vector<std::string>& warnings) override\n     {\n-        return MakeWallet(LoadWallet(*m_interfaces.chain, name, error, warning));\n+        return MakeWallet(LoadWallet(*m_interfaces.chain, name, error, warnings));\n     }\n-    WalletCreationStatus createWallet(const SecureString& passphrase, uint64_t wallet_creation_flags, const std::string& name, std::string& error, std::string& warning, std::unique_ptr<Wallet>& result) override\n+    WalletCreationStatus createWallet(const SecureString& passphrase, uint64_t wallet_creation_flags, const std::string& name, std::string& error, std::vector<std::string>& warnings, std::unique_ptr<Wallet>& result) override\n     {\n         std::shared_ptr<CWallet> wallet;\n-        WalletCreationStatus status = CreateWallet(*m_interfaces.chain, passphrase, wallet_creation_flags, name, error, warning, wallet);\n+        WalletCreationStatus status = CreateWallet(*m_interfaces.chain, passphrase, wallet_creation_flags, name, error, warnings, wallet);\n         result = MakeWallet(wallet);\n         return status;\n     }"
      },
      {
        "sha": "4ee467014ca90c16c70b72189fea6691c3b3be37",
        "filename": "src/interfaces/node.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/facec1c643105d0ae74b5d32cf33d593f9e82a36/src/interfaces/node.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/facec1c643105d0ae74b5d32cf33d593f9e82a36/src/interfaces/node.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.h?ref=facec1c643105d0ae74b5d32cf33d593f9e82a36",
        "patch": "@@ -200,10 +200,10 @@ class Node\n     //! Attempts to load a wallet from file or directory.\n     //! The loaded wallet is also notified to handlers previously registered\n     //! with handleLoadWallet.\n-    virtual std::unique_ptr<Wallet> loadWallet(const std::string& name, std::string& error, std::string& warning) = 0;\n+    virtual std::unique_ptr<Wallet> loadWallet(const std::string& name, std::string& error, std::vector<std::string>& warnings) = 0;\n \n     //! Create a wallet from file\n-    virtual WalletCreationStatus createWallet(const SecureString& passphrase, uint64_t wallet_creation_flags, const std::string& name, std::string& error, std::string& warning, std::unique_ptr<Wallet>& result) = 0;\n+    virtual WalletCreationStatus createWallet(const SecureString& passphrase, uint64_t wallet_creation_flags, const std::string& name, std::string& error, std::vector<std::string>& warnings, std::unique_ptr<Wallet>& result) = 0;\n \n     //! Register handler for init messages.\n     using InitMessageFn = std::function<void(const std::string& message)>;"
      },
      {
        "sha": "a7edf442e587610c72c0d13fec8501689995430b",
        "filename": "src/qt/walletcontroller.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/facec1c643105d0ae74b5d32cf33d593f9e82a36/src/qt/walletcontroller.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/facec1c643105d0ae74b5d32cf33d593f9e82a36/src/qt/walletcontroller.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletcontroller.cpp?ref=facec1c643105d0ae74b5d32cf33d593f9e82a36",
        "patch": "@@ -12,6 +12,7 @@\n \n #include <interfaces/handler.h>\n #include <interfaces/node.h>\n+#include <util/string.h>\n \n #include <algorithm>\n \n@@ -226,7 +227,7 @@ void CreateWalletActivity::finish()\n     if (!m_error_message.empty()) {\n         QMessageBox::critical(m_parent_widget, tr(\"Create wallet failed\"), QString::fromStdString(m_error_message));\n     } else if (!m_warning_message.empty()) {\n-        QMessageBox::warning(m_parent_widget, tr(\"Create wallet warning\"), QString::fromStdString(m_warning_message));\n+        QMessageBox::warning(m_parent_widget, tr(\"Create wallet warning\"), QString::fromStdString(Join(m_warning_message, \"\\n\")));\n     }\n \n     if (m_wallet_model) Q_EMIT created(m_wallet_model);\n@@ -267,7 +268,7 @@ void OpenWalletActivity::finish()\n     if (!m_error_message.empty()) {\n         QMessageBox::critical(m_parent_widget, tr(\"Open wallet failed\"), QString::fromStdString(m_error_message));\n     } else if (!m_warning_message.empty()) {\n-        QMessageBox::warning(m_parent_widget, tr(\"Open wallet warning\"), QString::fromStdString(m_warning_message));\n+        QMessageBox::warning(m_parent_widget, tr(\"Open wallet warning\"), QString::fromStdString(Join(m_warning_message, \"\\n\")));\n     }\n \n     if (m_wallet_model) Q_EMIT opened(m_wallet_model);"
      },
      {
        "sha": "e50dd5c7ebc389d8e3a179570d3fd244091a7ca5",
        "filename": "src/qt/walletcontroller.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/facec1c643105d0ae74b5d32cf33d593f9e82a36/src/qt/walletcontroller.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/facec1c643105d0ae74b5d32cf33d593f9e82a36/src/qt/walletcontroller.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletcontroller.h?ref=facec1c643105d0ae74b5d32cf33d593f9e82a36",
        "patch": "@@ -100,7 +100,7 @@ class WalletControllerActivity : public QObject\n     QProgressDialog* m_progress_dialog{nullptr};\n     WalletModel* m_wallet_model{nullptr};\n     std::string m_error_message;\n-    std::string m_warning_message;\n+    std::vector<std::string> m_warning_message;\n };\n \n "
      },
      {
        "sha": "e48eee6c2c5e2c1cd6079481b49d5fd45c31431f",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/facec1c643105d0ae74b5d32cf33d593f9e82a36/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/facec1c643105d0ae74b5d32cf33d593f9e82a36/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=facec1c643105d0ae74b5d32cf33d593f9e82a36",
        "patch": "@@ -412,7 +412,7 @@ bool BerkeleyBatch::VerifyEnvironment(const fs::path& file_path, std::string& er\n     return true;\n }\n \n-bool BerkeleyBatch::VerifyDatabaseFile(const fs::path& file_path, std::string& warningStr, std::string& errorStr, BerkeleyEnvironment::recoverFunc_type recoverFunc)\n+bool BerkeleyBatch::VerifyDatabaseFile(const fs::path& file_path, std::vector<std::string>& warnings, std::string& errorStr, BerkeleyEnvironment::recoverFunc_type recoverFunc)\n {\n     std::string walletFile;\n     std::shared_ptr<BerkeleyEnvironment> env = GetWalletEnv(file_path, walletFile);\n@@ -424,11 +424,11 @@ bool BerkeleyBatch::VerifyDatabaseFile(const fs::path& file_path, std::string& w\n         BerkeleyEnvironment::VerifyResult r = env->Verify(walletFile, recoverFunc, backup_filename);\n         if (r == BerkeleyEnvironment::VerifyResult::RECOVER_OK)\n         {\n-            warningStr = strprintf(_(\"Warning: Wallet file corrupt, data salvaged!\"\n+            warnings.push_back(strprintf(_(\"Warning: Wallet file corrupt, data salvaged!\"\n                                      \" Original %s saved as %s in %s; if\"\n                                      \" your balance or transactions are incorrect you should\"\n                                      \" restore from a backup.\").translated,\n-                                   walletFile, backup_filename, walletDir);\n+                walletFile, backup_filename, walletDir));\n         }\n         if (r == BerkeleyEnvironment::VerifyResult::RECOVER_FAIL)\n         {"
      },
      {
        "sha": "2204a97fed74b6b144a8335ce7d91d0f906a6e51",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/facec1c643105d0ae74b5d32cf33d593f9e82a36/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/facec1c643105d0ae74b5d32cf33d593f9e82a36/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=facec1c643105d0ae74b5d32cf33d593f9e82a36",
        "patch": "@@ -246,7 +246,7 @@ class BerkeleyBatch\n     /* verifies the database environment */\n     static bool VerifyEnvironment(const fs::path& file_path, std::string& errorStr);\n     /* verifies the database file */\n-    static bool VerifyDatabaseFile(const fs::path& file_path, std::string& warningStr, std::string& errorStr, BerkeleyEnvironment::recoverFunc_type recoverFunc);\n+    static bool VerifyDatabaseFile(const fs::path& file_path, std::vector<std::string>& warnings, std::string& errorStr, BerkeleyEnvironment::recoverFunc_type recoverFunc);\n \n     template <typename K, typename T>\n     bool Read(const K& key, T& value)"
      },
      {
        "sha": "071befaebfde3df792bd89b3900767cc8aa8729b",
        "filename": "src/wallet/load.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 4,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/facec1c643105d0ae74b5d32cf33d593f9e82a36/src/wallet/load.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/facec1c643105d0ae74b5d32cf33d593f9e82a36/src/wallet/load.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/load.cpp?ref=facec1c643105d0ae74b5d32cf33d593f9e82a36",
        "patch": "@@ -7,6 +7,7 @@\n \n #include <interfaces/chain.h>\n #include <scheduler.h>\n+#include <util/string.h>\n #include <util/system.h>\n #include <util/translation.h>\n #include <wallet/wallet.h>\n@@ -53,10 +54,10 @@ bool VerifyWallets(interfaces::Chain& chain, const std::vector<std::string>& wal\n         }\n \n         std::string error_string;\n-        std::string warning_string;\n-        bool verify_success = CWallet::Verify(chain, location, salvage_wallet, error_string, warning_string);\n+        std::vector<std::string> warnings;\n+        bool verify_success = CWallet::Verify(chain, location, salvage_wallet, error_string, warnings);\n         if (!error_string.empty()) chain.initError(error_string);\n-        if (!warning_string.empty()) chain.initWarning(warning_string);\n+        if (!warnings.empty()) chain.initWarning(Join(warnings, \"\\n\"));\n         if (!verify_success) return false;\n     }\n \n@@ -66,8 +67,12 @@ bool VerifyWallets(interfaces::Chain& chain, const std::vector<std::string>& wal\n bool LoadWallets(interfaces::Chain& chain, const std::vector<std::string>& wallet_files)\n {\n     for (const std::string& walletFile : wallet_files) {\n-        std::shared_ptr<CWallet> pwallet = CWallet::CreateWalletFromFile(chain, WalletLocation(walletFile));\n+        std::string error;\n+        std::vector<std::string> warnings;\n+        std::shared_ptr<CWallet> pwallet = CWallet::CreateWalletFromFile(chain, WalletLocation(walletFile), error, warnings);\n+        if (!warnings.empty()) chain.initWarning(Join(warnings, \"\\n\"));\n         if (!pwallet) {\n+            chain.initError(error);\n             return false;\n         }\n         AddWallet(pwallet);"
      },
      {
        "sha": "b2a7f9845bcade22523533c41cd6e4483954ad36",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 13,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/facec1c643105d0ae74b5d32cf33d593f9e82a36/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/facec1c643105d0ae74b5d32cf33d593f9e82a36/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=facec1c643105d0ae74b5d32cf33d593f9e82a36",
        "patch": "@@ -22,6 +22,7 @@\n #include <util/bip32.h>\n #include <util/fees.h>\n #include <util/moneystr.h>\n+#include <util/string.h>\n #include <util/system.h>\n #include <util/url.h>\n #include <util/validation.h>\n@@ -2587,13 +2588,14 @@ static UniValue loadwallet(const JSONRPCRequest& request)\n         }\n     }\n \n-    std::string error, warning;\n+    std::string error;\n+    std::vector<std::string> warning;\n     std::shared_ptr<CWallet> const wallet = LoadWallet(*g_rpc_interfaces->chain, location, error, warning);\n     if (!wallet) throw JSONRPCError(RPC_WALLET_ERROR, error);\n \n     UniValue obj(UniValue::VOBJ);\n     obj.pushKV(\"name\", wallet->GetName());\n-    obj.pushKV(\"warning\", warning);\n+    obj.pushKV(\"warning\", Join(warning, \"\\n\"));\n \n     return obj;\n }\n@@ -2699,12 +2701,12 @@ static UniValue createwallet(const JSONRPCRequest& request)\n     }\n     SecureString passphrase;\n     passphrase.reserve(100);\n-    std::string warning;\n+    std::vector<std::string> warnings;\n     if (!request.params[3].isNull()) {\n         passphrase = request.params[3].get_str().c_str();\n         if (passphrase.empty()) {\n             // Empty string means unencrypted\n-            warning = \"Empty string given as passphrase, wallet will not be encrypted.\";\n+            warnings.emplace_back(\"Empty string given as passphrase, wallet will not be encrypted.\");\n         }\n     }\n \n@@ -2713,9 +2715,8 @@ static UniValue createwallet(const JSONRPCRequest& request)\n     }\n \n     std::string error;\n-    std::string create_warning;\n     std::shared_ptr<CWallet> wallet;\n-    WalletCreationStatus status = CreateWallet(*g_rpc_interfaces->chain, passphrase, flags, request.params[0].get_str(), error, create_warning, wallet);\n+    WalletCreationStatus status = CreateWallet(*g_rpc_interfaces->chain, passphrase, flags, request.params[0].get_str(), error, warnings, wallet);\n     switch (status) {\n         case WalletCreationStatus::CREATION_FAILED:\n             throw JSONRPCError(RPC_WALLET_ERROR, error);\n@@ -2726,15 +2727,9 @@ static UniValue createwallet(const JSONRPCRequest& request)\n         // no default case, so the compiler can warn about missing cases\n     }\n \n-    if (warning.empty()) {\n-        warning = create_warning;\n-    } else if (!warning.empty() && !create_warning.empty()){\n-        warning += \"; \" + create_warning;\n-    }\n-\n     UniValue obj(UniValue::VOBJ);\n     obj.pushKV(\"name\", wallet->GetName());\n-    obj.pushKV(\"warning\", warning);\n+    obj.pushKV(\"warning\", Join(warnings, \"\\n\"));\n \n     return obj;\n }"
      },
      {
        "sha": "d38c261f1471883f1b569e2ed3e603a080a73c78",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 47,
        "deletions": 50,
        "changes": 97,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/facec1c643105d0ae74b5d32cf33d593f9e82a36/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/facec1c643105d0ae74b5d32cf33d593f9e82a36/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=facec1c643105d0ae74b5d32cf33d593f9e82a36",
        "patch": "@@ -140,29 +140,29 @@ void UnloadWallet(std::shared_ptr<CWallet>&& wallet)\n     }\n }\n \n-std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const WalletLocation& location, std::string& error, std::string& warning)\n+std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const WalletLocation& location, std::string& error, std::vector<std::string>& warnings)\n {\n-    if (!CWallet::Verify(chain, location, false, error, warning)) {\n+    if (!CWallet::Verify(chain, location, false, error, warnings)) {\n         error = \"Wallet file verification failed: \" + error;\n         return nullptr;\n     }\n \n-    std::shared_ptr<CWallet> wallet = CWallet::CreateWalletFromFile(chain, location);\n+    std::shared_ptr<CWallet> wallet = CWallet::CreateWalletFromFile(chain, location, error, warnings);\n     if (!wallet) {\n-        error = \"Wallet loading failed.\";\n+        error = \"Wallet loading failed: \" + error;\n         return nullptr;\n     }\n     AddWallet(wallet);\n     wallet->postInitProcess();\n     return wallet;\n }\n \n-std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const std::string& name, std::string& error, std::string& warning)\n+std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const std::string& name, std::string& error, std::vector<std::string>& warnings)\n {\n-    return LoadWallet(chain, WalletLocation(name), error, warning);\n+    return LoadWallet(chain, WalletLocation(name), error, warnings);\n }\n \n-WalletCreationStatus CreateWallet(interfaces::Chain& chain, const SecureString& passphrase, uint64_t wallet_creation_flags, const std::string& name, std::string& error, std::string& warning, std::shared_ptr<CWallet>& result)\n+WalletCreationStatus CreateWallet(interfaces::Chain& chain, const SecureString& passphrase, uint64_t wallet_creation_flags, const std::string& name, std::string& error, std::vector<std::string>& warnings, std::shared_ptr<CWallet>& result)\n {\n     // Indicate that the wallet is actually supposed to be blank and not just blank to make it encrypted\n     bool create_blank = (wallet_creation_flags & WALLET_FLAG_BLANK_WALLET);\n@@ -180,9 +180,8 @@ WalletCreationStatus CreateWallet(interfaces::Chain& chain, const SecureString&\n     }\n \n     // Wallet::Verify will check if we're trying to create a wallet with a duplicate name.\n-    std::string wallet_error;\n-    if (!CWallet::Verify(chain, location, false, wallet_error, warning)) {\n-        error = \"Wallet file verification failed: \" + wallet_error;\n+    if (!CWallet::Verify(chain, location, false, error, warnings)) {\n+        error = \"Wallet file verification failed: \" + error;\n         return WalletCreationStatus::CREATION_FAILED;\n     }\n \n@@ -193,9 +192,9 @@ WalletCreationStatus CreateWallet(interfaces::Chain& chain, const SecureString&\n     }\n \n     // Make the wallet\n-    std::shared_ptr<CWallet> wallet = CWallet::CreateWalletFromFile(chain, location, wallet_creation_flags);\n+    std::shared_ptr<CWallet> wallet = CWallet::CreateWalletFromFile(chain, location, error, warnings, wallet_creation_flags);\n     if (!wallet) {\n-        error = \"Wallet creation failed\";\n+        error = \"Wallet creation failed: \" + error;\n         return WalletCreationStatus::CREATION_FAILED;\n     }\n \n@@ -4196,7 +4195,7 @@ void CWallet::MarkPreSplitKeys()\n     }\n }\n \n-bool CWallet::Verify(interfaces::Chain& chain, const WalletLocation& location, bool salvage_wallet, std::string& error_string, std::string& warning_string)\n+bool CWallet::Verify(interfaces::Chain& chain, const WalletLocation& location, bool salvage_wallet, std::string& error_string, std::vector<std::string>& warnings)\n {\n     // Do some checking on wallet path. It should be either a:\n     //\n@@ -4250,10 +4249,10 @@ bool CWallet::Verify(interfaces::Chain& chain, const WalletLocation& location, b\n         }\n     }\n \n-    return WalletBatch::VerifyDatabaseFile(wallet_path, warning_string, error_string);\n+    return WalletBatch::VerifyDatabaseFile(wallet_path, warnings, error_string);\n }\n \n-std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain, const WalletLocation& location, uint64_t wallet_creation_flags)\n+std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain, const WalletLocation& location, std::string& error, std::vector<std::string>& warnings, uint64_t wallet_creation_flags)\n {\n     const std::string walletFile = WalletDataFilePath(location.GetPath()).string();\n \n@@ -4266,7 +4265,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n         std::unique_ptr<CWallet> tempWallet = MakeUnique<CWallet>(&chain, location, WalletDatabase::Create(location.GetPath()));\n         DBErrors nZapWalletRet = tempWallet->ZapWalletTx(vWtx);\n         if (nZapWalletRet != DBErrors::LOAD_OK) {\n-            chain.initError(strprintf(_(\"Error loading %s: Wallet corrupted\").translated, walletFile));\n+            error = strprintf(_(\"Error loading %s: Wallet corrupted\").translated, walletFile);\n             return nullptr;\n         }\n     }\n@@ -4279,29 +4278,28 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n     // should be possible to use std::allocate_shared.\n     std::shared_ptr<CWallet> walletInstance(new CWallet(&chain, location, WalletDatabase::Create(location.GetPath())), ReleaseWallet);\n     DBErrors nLoadWalletRet = walletInstance->LoadWallet(fFirstRun);\n-    if (nLoadWalletRet != DBErrors::LOAD_OK)\n-    {\n+    if (nLoadWalletRet != DBErrors::LOAD_OK) {\n         if (nLoadWalletRet == DBErrors::CORRUPT) {\n-            chain.initError(strprintf(_(\"Error loading %s: Wallet corrupted\").translated, walletFile));\n+            error = strprintf(_(\"Error loading %s: Wallet corrupted\").translated, walletFile);\n             return nullptr;\n         }\n         else if (nLoadWalletRet == DBErrors::NONCRITICAL_ERROR)\n         {\n-            chain.initWarning(strprintf(_(\"Error reading %s! All keys read correctly, but transaction data\"\n+            warnings.push_back(strprintf(_(\"Error reading %s! All keys read correctly, but transaction data\"\n                                           \" or address book entries might be missing or incorrect.\").translated,\n                 walletFile));\n         }\n         else if (nLoadWalletRet == DBErrors::TOO_NEW) {\n-            chain.initError(strprintf(_(\"Error loading %s: Wallet requires newer version of %s\").translated, walletFile, PACKAGE_NAME));\n+            error = strprintf(_(\"Error loading %s: Wallet requires newer version of %s\").translated, walletFile, PACKAGE_NAME);\n             return nullptr;\n         }\n         else if (nLoadWalletRet == DBErrors::NEED_REWRITE)\n         {\n-            chain.initError(strprintf(_(\"Wallet needed to be rewritten: restart %s to complete\").translated, PACKAGE_NAME));\n+            error = strprintf(_(\"Wallet needed to be rewritten: restart %s to complete\").translated, PACKAGE_NAME);\n             return nullptr;\n         }\n         else {\n-            chain.initError(strprintf(_(\"Error loading %s\").translated, walletFile));\n+            error = strprintf(_(\"Error loading %s\").translated, walletFile);\n             return nullptr;\n         }\n     }\n@@ -4320,7 +4318,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n             walletInstance->WalletLogPrintf(\"Allowing wallet upgrade up to %i\\n\", nMaxVersion);\n         if (nMaxVersion < walletInstance->GetVersion())\n         {\n-            chain.initError(_(\"Cannot downgrade wallet\").translated);\n+            error = _(\"Cannot downgrade wallet\").translated;\n             return nullptr;\n         }\n         walletInstance->SetMaxVersion(nMaxVersion);\n@@ -4333,7 +4331,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n         // Do not upgrade versions to any version between HD_SPLIT and FEATURE_PRE_SPLIT_KEYPOOL unless already supporting HD_SPLIT\n         int max_version = walletInstance->GetVersion();\n         if (!walletInstance->CanSupportFeature(FEATURE_HD_SPLIT) && max_version >= FEATURE_HD_SPLIT && max_version < FEATURE_PRE_SPLIT_KEYPOOL) {\n-            chain.initError(_(\"Cannot upgrade a non HD split wallet without upgrading to support pre split keypool. Please use -upgradewallet=169900 or -upgradewallet with no version specified.\").translated);\n+            error = _(\"Cannot upgrade a non HD split wallet without upgrading to support pre split keypool. Please use -upgradewallet=169900 or -upgradewallet with no version specified.\").translated;\n             return nullptr;\n         }\n \n@@ -4361,7 +4359,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n         // Regenerate the keypool if upgraded to HD\n         if (hd_upgrade) {\n             if (!walletInstance->TopUpKeyPool()) {\n-                chain.initError(_(\"Unable to generate keys\").translated);\n+                error = _(\"Unable to generate keys\").translated;\n                 return nullptr;\n             }\n         }\n@@ -4381,41 +4379,41 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n \n         // Top up the keypool\n         if (walletInstance->CanGenerateKeys() && !walletInstance->TopUpKeyPool()) {\n-            chain.initError(_(\"Unable to generate initial keys\").translated);\n+            error = _(\"Unable to generate initial keys\").translated;\n             return nullptr;\n         }\n \n         auto locked_chain = chain.lock();\n         walletInstance->ChainStateFlushed(locked_chain->getTipLocator());\n     } else if (wallet_creation_flags & WALLET_FLAG_DISABLE_PRIVATE_KEYS) {\n         // Make it impossible to disable private keys after creation\n-        chain.initError(strprintf(_(\"Error loading %s: Private keys can only be disabled during creation\").translated, walletFile));\n+        error = strprintf(_(\"Error loading %s: Private keys can only be disabled during creation\").translated, walletFile);\n         return NULL;\n     } else if (walletInstance->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n         LOCK(walletInstance->cs_KeyStore);\n         if (!walletInstance->mapKeys.empty() || !walletInstance->mapCryptedKeys.empty()) {\n-            chain.initWarning(strprintf(_(\"Warning: Private keys detected in wallet {%s} with disabled private keys\").translated, walletFile));\n+            warnings.push_back(strprintf(_(\"Warning: Private keys detected in wallet {%s} with disabled private keys\").translated, walletFile));\n         }\n     }\n \n     if (!gArgs.GetArg(\"-addresstype\", \"\").empty() && !ParseOutputType(gArgs.GetArg(\"-addresstype\", \"\"), walletInstance->m_default_address_type)) {\n-        chain.initError(strprintf(_(\"Unknown address type '%s'\").translated, gArgs.GetArg(\"-addresstype\", \"\")));\n+        error = strprintf(_(\"Unknown address type '%s'\").translated, gArgs.GetArg(\"-addresstype\", \"\"));\n         return nullptr;\n     }\n \n     if (!gArgs.GetArg(\"-changetype\", \"\").empty() && !ParseOutputType(gArgs.GetArg(\"-changetype\", \"\"), walletInstance->m_default_change_type)) {\n-        chain.initError(strprintf(_(\"Unknown change type '%s'\").translated, gArgs.GetArg(\"-changetype\", \"\")));\n+        error = strprintf(_(\"Unknown change type '%s'\").translated, gArgs.GetArg(\"-changetype\", \"\"));\n         return nullptr;\n     }\n \n     if (gArgs.IsArgSet(\"-mintxfee\")) {\n         CAmount n = 0;\n         if (!ParseMoney(gArgs.GetArg(\"-mintxfee\", \"\"), n) || 0 == n) {\n-            chain.initError(AmountErrMsg(\"mintxfee\", gArgs.GetArg(\"-mintxfee\", \"\")).translated);\n+            error = AmountErrMsg(\"mintxfee\", gArgs.GetArg(\"-mintxfee\", \"\")).translated;\n             return nullptr;\n         }\n         if (n > HIGH_TX_FEE_PER_KB) {\n-            chain.initWarning(AmountHighWarn(\"-mintxfee\").translated + \" \" +\n+            warnings.push_back(AmountHighWarn(\"-mintxfee\").translated + \" \" +\n                               _(\"This is the minimum transaction fee you pay on every transaction.\").translated);\n         }\n         walletInstance->m_min_fee = CFeeRate(n);\n@@ -4424,11 +4422,11 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n     if (gArgs.IsArgSet(\"-fallbackfee\")) {\n         CAmount nFeePerK = 0;\n         if (!ParseMoney(gArgs.GetArg(\"-fallbackfee\", \"\"), nFeePerK)) {\n-            chain.initError(strprintf(_(\"Invalid amount for -fallbackfee=<amount>: '%s'\").translated, gArgs.GetArg(\"-fallbackfee\", \"\")));\n+            error = strprintf(_(\"Invalid amount for -fallbackfee=<amount>: '%s'\").translated, gArgs.GetArg(\"-fallbackfee\", \"\"));\n             return nullptr;\n         }\n         if (nFeePerK > HIGH_TX_FEE_PER_KB) {\n-            chain.initWarning(AmountHighWarn(\"-fallbackfee\").translated + \" \" +\n+            warnings.push_back(AmountHighWarn(\"-fallbackfee\").translated + \" \" +\n                               _(\"This is the transaction fee you may pay when fee estimates are not available.\").translated);\n         }\n         walletInstance->m_fallback_fee = CFeeRate(nFeePerK);\n@@ -4439,53 +4437,52 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n     if (gArgs.IsArgSet(\"-discardfee\")) {\n         CAmount nFeePerK = 0;\n         if (!ParseMoney(gArgs.GetArg(\"-discardfee\", \"\"), nFeePerK)) {\n-            chain.initError(strprintf(_(\"Invalid amount for -discardfee=<amount>: '%s'\").translated, gArgs.GetArg(\"-discardfee\", \"\")));\n+            error = strprintf(_(\"Invalid amount for -discardfee=<amount>: '%s'\").translated, gArgs.GetArg(\"-discardfee\", \"\"));\n             return nullptr;\n         }\n         if (nFeePerK > HIGH_TX_FEE_PER_KB) {\n-            chain.initWarning(AmountHighWarn(\"-discardfee\").translated + \" \" +\n+            warnings.push_back(AmountHighWarn(\"-discardfee\").translated + \" \" +\n                               _(\"This is the transaction fee you may discard if change is smaller than dust at this level\").translated);\n         }\n         walletInstance->m_discard_rate = CFeeRate(nFeePerK);\n     }\n     if (gArgs.IsArgSet(\"-paytxfee\")) {\n         CAmount nFeePerK = 0;\n         if (!ParseMoney(gArgs.GetArg(\"-paytxfee\", \"\"), nFeePerK)) {\n-            chain.initError(AmountErrMsg(\"paytxfee\", gArgs.GetArg(\"-paytxfee\", \"\")).translated);\n+            error = AmountErrMsg(\"paytxfee\", gArgs.GetArg(\"-paytxfee\", \"\")).translated;\n             return nullptr;\n         }\n         if (nFeePerK > HIGH_TX_FEE_PER_KB) {\n-            chain.initWarning(AmountHighWarn(\"-paytxfee\").translated + \" \" +\n+            warnings.push_back(AmountHighWarn(\"-paytxfee\").translated + \" \" +\n                               _(\"This is the transaction fee you will pay if you send a transaction.\").translated);\n         }\n         walletInstance->m_pay_tx_fee = CFeeRate(nFeePerK, 1000);\n         if (walletInstance->m_pay_tx_fee < chain.relayMinFee()) {\n-            chain.initError(strprintf(_(\"Invalid amount for -paytxfee=<amount>: '%s' (must be at least %s)\").translated,\n-                gArgs.GetArg(\"-paytxfee\", \"\"), chain.relayMinFee().ToString()));\n+            error = strprintf(_(\"Invalid amount for -paytxfee=<amount>: '%s' (must be at least %s)\").translated,\n+                gArgs.GetArg(\"-paytxfee\", \"\"), chain.relayMinFee().ToString());\n             return nullptr;\n         }\n     }\n \n-    if (gArgs.IsArgSet(\"-maxtxfee\"))\n-    {\n+    if (gArgs.IsArgSet(\"-maxtxfee\")) {\n         CAmount nMaxFee = 0;\n         if (!ParseMoney(gArgs.GetArg(\"-maxtxfee\", \"\"), nMaxFee)) {\n-            chain.initError(AmountErrMsg(\"maxtxfee\", gArgs.GetArg(\"-maxtxfee\", \"\")).translated);\n+            error = AmountErrMsg(\"maxtxfee\", gArgs.GetArg(\"-maxtxfee\", \"\")).translated;\n             return nullptr;\n         }\n         if (nMaxFee > HIGH_MAX_TX_FEE) {\n-            chain.initWarning(_(\"-maxtxfee is set very high! Fees this large could be paid on a single transaction.\").translated);\n+            warnings.push_back(_(\"-maxtxfee is set very high! Fees this large could be paid on a single transaction.\").translated);\n         }\n         if (CFeeRate(nMaxFee, 1000) < chain.relayMinFee()) {\n-            chain.initError(strprintf(_(\"Invalid amount for -maxtxfee=<amount>: '%s' (must be at least the minrelay fee of %s to prevent stuck transactions)\").translated,\n-                                       gArgs.GetArg(\"-maxtxfee\", \"\"), chain.relayMinFee().ToString()));\n+            error = strprintf(_(\"Invalid amount for -maxtxfee=<amount>: '%s' (must be at least the minrelay fee of %s to prevent stuck transactions)\").translated,\n+                                       gArgs.GetArg(\"-maxtxfee\", \"\"), chain.relayMinFee().ToString());\n             return nullptr;\n         }\n         walletInstance->m_default_max_tx_fee = nMaxFee;\n     }\n \n     if (chain.relayMinFee().GetFeePerK() > HIGH_TX_FEE_PER_KB) {\n-        chain.initWarning(AmountHighWarn(\"-minrelaytxfee\").translated + \" \" +\n+        warnings.push_back(AmountHighWarn(\"-minrelaytxfee\").translated + \" \" +\n                     _(\"The wallet will avoid paying less than the minimum relay fee.\").translated);\n     }\n \n@@ -4535,7 +4532,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n             }\n \n             if (rescan_height != block_height) {\n-                chain.initError(_(\"Prune: last wallet synchronisation goes beyond pruned data. You need to -reindex (download the whole blockchain again in case of pruned node)\").translated);\n+                error = _(\"Prune: last wallet synchronisation goes beyond pruned data. You need to -reindex (download the whole blockchain again in case of pruned node)\").translated;\n                 return nullptr;\n             }\n         }\n@@ -4554,7 +4551,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n         {\n             WalletRescanReserver reserver(walletInstance.get());\n             if (!reserver.reserve() || (ScanResult::SUCCESS != walletInstance->ScanForWalletTransactions(locked_chain->getBlockHash(rescan_height), {} /* stop block */, reserver, true /* update */).status)) {\n-                chain.initError(_(\"Failed to rescan the wallet during initialization\").translated);\n+                error = _(\"Failed to rescan the wallet during initialization\").translated;\n                 return nullptr;\n             }\n         }"
      },
      {
        "sha": "a301338b606137668626861f3ab9881eb5cda2f7",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/facec1c643105d0ae74b5d32cf33d593f9e82a36/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/facec1c643105d0ae74b5d32cf33d593f9e82a36/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=facec1c643105d0ae74b5d32cf33d593f9e82a36",
        "patch": "@@ -48,15 +48,15 @@ bool RemoveWallet(const std::shared_ptr<CWallet>& wallet);\n bool HasWallets();\n std::vector<std::shared_ptr<CWallet>> GetWallets();\n std::shared_ptr<CWallet> GetWallet(const std::string& name);\n-std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const WalletLocation& location, std::string& error, std::string& warning);\n+std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const WalletLocation& location, std::string& error, std::vector<std::string>& warnings);\n \n enum class WalletCreationStatus {\n     SUCCESS,\n     CREATION_FAILED,\n     ENCRYPTION_FAILED\n };\n \n-WalletCreationStatus CreateWallet(interfaces::Chain& chain, const SecureString& passphrase, uint64_t wallet_creation_flags, const std::string& name, std::string& error, std::string& warning, std::shared_ptr<CWallet>& result);\n+WalletCreationStatus CreateWallet(interfaces::Chain& chain, const SecureString& passphrase, uint64_t wallet_creation_flags, const std::string& name, std::string& error, std::vector<std::string>& warnings, std::shared_ptr<CWallet>& result);\n \n //! Default for -keypool\n static const unsigned int DEFAULT_KEYPOOL_SIZE = 1000;\n@@ -1321,10 +1321,10 @@ class CWallet final : public FillableSigningProvider, private interfaces::Chain:\n     bool MarkReplaced(const uint256& originalHash, const uint256& newHash);\n \n     //! Verify wallet naming and perform salvage on the wallet if required\n-    static bool Verify(interfaces::Chain& chain, const WalletLocation& location, bool salvage_wallet, std::string& error_string, std::string& warning_string);\n+    static bool Verify(interfaces::Chain& chain, const WalletLocation& location, bool salvage_wallet, std::string& error_string, std::vector<std::string>& warnings);\n \n     /* Initializes the wallet, returns a new CWallet instance or a null pointer in case of an error */\n-    static std::shared_ptr<CWallet> CreateWalletFromFile(interfaces::Chain& chain, const WalletLocation& location, uint64_t wallet_creation_flags = 0);\n+    static std::shared_ptr<CWallet> CreateWalletFromFile(interfaces::Chain& chain, const WalletLocation& location, std::string& error, std::vector<std::string>& warnings, uint64_t wallet_creation_flags = 0);\n \n     /**\n      * Wallet post-init setup"
      },
      {
        "sha": "d7f7635a83c6c28290f3bcfaed4a77fb88289779",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/facec1c643105d0ae74b5d32cf33d593f9e82a36/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/facec1c643105d0ae74b5d32cf33d593f9e82a36/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=facec1c643105d0ae74b5d32cf33d593f9e82a36",
        "patch": "@@ -729,9 +729,9 @@ bool WalletBatch::VerifyEnvironment(const fs::path& wallet_path, std::string& er\n     return BerkeleyBatch::VerifyEnvironment(wallet_path, errorStr);\n }\n \n-bool WalletBatch::VerifyDatabaseFile(const fs::path& wallet_path, std::string& warningStr, std::string& errorStr)\n+bool WalletBatch::VerifyDatabaseFile(const fs::path& wallet_path, std::vector<std::string>& warnings, std::string& errorStr)\n {\n-    return BerkeleyBatch::VerifyDatabaseFile(wallet_path, warningStr, errorStr, WalletBatch::Recover);\n+    return BerkeleyBatch::VerifyDatabaseFile(wallet_path, warnings, errorStr, WalletBatch::Recover);\n }\n \n bool WalletBatch::WriteDestData(const std::string &address, const std::string &key, const std::string &value)"
      },
      {
        "sha": "32475e4d2d9a3add76c11ae055c99927a092de69",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/facec1c643105d0ae74b5d32cf33d593f9e82a36/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/facec1c643105d0ae74b5d32cf33d593f9e82a36/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=facec1c643105d0ae74b5d32cf33d593f9e82a36",
        "patch": "@@ -263,7 +263,7 @@ class WalletBatch\n     /* verifies the database environment */\n     static bool VerifyEnvironment(const fs::path& wallet_path, std::string& errorStr);\n     /* verifies the database file */\n-    static bool VerifyDatabaseFile(const fs::path& wallet_path, std::string& warningStr, std::string& errorStr);\n+    static bool VerifyDatabaseFile(const fs::path& wallet_path, std::vector<std::string>& warnings, std::string& errorStr);\n \n     //! write the hdchain model (external chain child index counter)\n     bool WriteHDChain(const CHDChain& chain);"
      },
      {
        "sha": "ce0b7e878276ff2828e09226a96995ff6f0cbf38",
        "filename": "test/functional/wallet_multiwallet.py",
        "status": "modified",
        "additions": 2,
        "deletions": 6,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/facec1c643105d0ae74b5d32cf33d593f9e82a36/test/functional/wallet_multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/facec1c643105d0ae74b5d32cf33d593f9e82a36/test/functional/wallet_multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_multiwallet.py?ref=facec1c643105d0ae74b5d32cf33d593f9e82a36",
        "patch": "@@ -339,14 +339,10 @@ def wallet_file(name):\n         self.log.info(\"Fail -upgradewallet that results in downgrade\")\n         assert_raises_rpc_error(\n             -4,\n-            \"Wallet loading failed.\",\n+            'Wallet loading failed: Error loading {}: Wallet requires newer version of {}'.format(\n+                wallet_dir('high_minversion', 'wallet.dat'), self.config['environment']['PACKAGE_NAME']),\n             lambda: self.nodes[0].loadwallet(filename='high_minversion'),\n         )\n-        self.stop_node(\n-            i=0,\n-            expected_stderr='Error: Error loading {}: Wallet requires newer version of Bitcoin Core'.format(\n-                wallet_dir('high_minversion', 'wallet.dat')),\n-        )\n \n \n if __name__ == '__main__':"
      }
    ]
  }
]