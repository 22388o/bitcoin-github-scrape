laanwj,2020-02-12 15:36:11,"I'm not sure whether it's better to crash than start with a ""wrong"" locale. We're already avoiding using locale-dependent functions in pretty much all important places.\n\nEdit: also, why are our assumptions different for bitcoin-qt and bitcoind?",https://github.com/bitcoin/bitcoin/pull/18124#issuecomment-585264292,585264292,
practicalswift,2020-02-12 15:45:51,"@laanwj I think you misunderstand the patch. Note that currently there is no way for a user to make `bitcoind` or `bitcoin-qt` start with the ""wrong"" locale (""wrong"" as in that the assertions in this PR does not hold).\n\nThis is just a sanity check that makes sure that the assumption we know to be true today remain true also in the future. Like `ECC_InitSanityCheck`, `Random_SanityCheck`, etc i",https://github.com/bitcoin/bitcoin/pull/18124#issuecomment-585268983,585268983,
laanwj,2020-02-12 15:53:28,"This is just my personal opinion but I think this adds some quite ugly code into our already convoluted initialization process, using weird functions such as `setlocale`. I'd prefer to avoid it and focus on getting rid of locale dependent functions where it's a problem.\n\nIf we decide to do this, I'd prefer to add the common checks to the other sanity checks and not distinguish between  `bitcoi",https://github.com/bitcoin/bitcoin/pull/18124#issuecomment-585272928,585272928,
practicalswift,2020-02-12 15:58:24,"@laanwj How would you suggest checking for the assumed locales in a less ugly way?\n\nHow do you suggest reading the C locale without using `setlocale`? (Please note that the C locale is *not* the same thing as the C++ locale.)",https://github.com/bitcoin/bitcoin/pull/18124#issuecomment-585275389,585275389,
practicalswift,2020-02-12 16:04:00,"> If we decide to do this, I'd prefer to add the common checks to the other sanity checks and not distinguish between `bitcoind.cpp`/`qt/bitcoin.cpp`.\n\nBut we're making different assumptions for `bitcoind` and `bitcoin-qt`, no?\n\n| Program        | C locale (`setlocale`) | Global C++ locale (`std::locale`) |\n| ------------- | ------------- | ----- |\n| `bitcoind`      | `C` (classic) | `",https://github.com/bitcoin/bitcoin/pull/18124#issuecomment-585278347,585278347,
practicalswift,2020-02-12 16:14:24,"Perhaps I should have included a few examples in the PR title. The gotcha list could be made very long, but this is a C locale gotcha example :)\n\n```\n$ cling\n[cling]$ #include <clocale>\n[cling]$ #include <string>\n[cling]$ std::string current_locale = {setlocale(LC_ALL, nullptr)}\n(std::string &) ""C""\n[cling]$ std::to_string(1.23)\n(std::string) ""1.230000""\n[cling]$ setlocale(LC_ALL",https://github.com/bitcoin/bitcoin/pull/18124#issuecomment-585283654,585283654,
practicalswift,2020-02-12 16:22:43,"And a C++ locale gotcha:\n\n```\n$ cling\n[cling]$ #include <locale>\n[cling]$ #include <sstream>\n[cling]$ std::locale{}.name()\n(std::string) ""C""\n[cling]$ std::ostringstream oss1;\n[cling]$ oss1 << 1000000;\n[cling]$ std::string s1 = oss1.str()\n(std::string &) ""1000000""\n[cling]$ std::locale::global(std::locale(""de_DE""));\n[cling]$ std::ostringstream oss2;\n[cling]$ oss2 << 10000",https://github.com/bitcoin/bitcoin/pull/18124#issuecomment-585287999,585287999,
practicalswift,2020-02-12 20:04:15,"More C locale WTF:\n\n```\n$ uname -s\nDarwin\n$ cat poc.cpp\n#include <iostream>\n#include <locale>\n\nint main(void) {\n    setlocale(LC_ALL, """");\n    std::cout << std::isspace(133) << ' ' << std::isspace(154) << ' ' << std::isspace(160);\n    std::cout << '\n';\n}\n$ clang++ -o poc poc.cpp\n$ ./poc\n1 0 1\n$ LC_ALL=en_US ./poc\n1 0 1\n$ LC_ALL=C ./poc\n0 0 0\n$ LC_ALL=ru_R",https://github.com/bitcoin/bitcoin/pull/18124#issuecomment-585392775,585392775,
sipa,2020-02-12 20:11:20,"@practicalswift You're making the case that locales are annoying, but we already knew that.\n\nI think what @laanwj means is that he'd rather just avoid any locale-dependent functionality in the code (to make the locale settings irrelevant) as opposed to forcing the locale to a known value (correct me if I'm wrong of course).\n\n",https://github.com/bitcoin/bitcoin/pull/18124#issuecomment-585395551,585395551,
Empact,2020-02-12 20:11:22,-0 I agree with @laanwj let's remove locale dependence rather than reduce the set of configurations we can run against.,https://github.com/bitcoin/bitcoin/pull/18124#issuecomment-585395564,585395564,
practicalswift,2020-02-12 21:09:00,"@Empact \n\n> -0 I agree with @laanwj let's remove locale dependence rather than reduce the set of configurations we can run against.\n\nI don't follow. What user configuration was possible before this PR that is not possible after this PR? Can you give a specific example?",https://github.com/bitcoin/bitcoin/pull/18124#issuecomment-585418510,585418510,
practicalswift,2020-02-12 21:42:58,"@sipa \n\n> I think what @laanwj means is that he'd rather just avoid any locale-dependent functionality in the code (to make the locale settings irrelevant) as opposed to forcing the locale to a known value (correct me if I'm wrong of course).\n\nNote that this PR simply documents and asserts restrictions we already have in place. More specifically it does *not* disallow any configuration tha",https://github.com/bitcoin/bitcoin/pull/18124#issuecomment-585432406,585432406,
practicalswift,2020-02-12 22:14:32,"Recommended reading to better understand the motivation behind this PR: [""Differences between the C Locale and the C++ Locales""](https://stdcxx.apache.org/doc/stdlibug/24-3.html)",https://github.com/bitcoin/bitcoin/pull/18124#issuecomment-585444819,585444819,
sipa,2020-02-12 22:18:17,"No, what I'm trying to say is simply that if we don't have locale-dependent functions, this should be unnecessary complexity.",https://github.com/bitcoin/bitcoin/pull/18124#issuecomment-585446260,585446260,
practicalswift,2020-02-12 22:23:03,"@sipa \n\nIt is my understanding the following are the only possible effective locale combinations before _and_ after this PR:\n\n| Program        | C locale (`setlocale`) | Global C++ locale (`std::locale`) |\n| ------------- | ------------- | ----- |\n| `bitcoind`      | `C` (classic) | `C` (classic) |\n| `bitcoin-qt`      | User configured (no assumed locale) | `C` (classic) |\n\nIs th",https://github.com/bitcoin/bitcoin/pull/18124#issuecomment-585448156,585448156,
sipa,2020-02-12 22:28:02,"I don't understand what you mean by ""effective locale"". The locale shouldn't matter, so for all we care they're both always effectively equal to ""foobar"".",https://github.com/bitcoin/bitcoin/pull/18124#issuecomment-585450140,585450140,
practicalswift,2020-02-12 22:50:02,"@sipa Sorry for my sloppy wording: with ""effective locale"" I simply meant the current locale in use (the C locale and the global C++ locale).\n\nMore specifically the following:\n\n```\nconst std::locale current_cpp_locale;\nconst std::string current_c_locale{setlocale(LC_ALL, nullptr)};\n```\n\nI claim the following is guaranteed to hold true no matter user configuration:\n\n| Program ",https://github.com/bitcoin/bitcoin/pull/18124#issuecomment-585457998,585457998,
sipa,2020-02-12 23:03:24,"Before this PR, those assertions obviously don't hold? I'm very confused.",https://github.com/bitcoin/bitcoin/pull/18124#issuecomment-585462560,585462560,
DrahtBot,2020-02-12 23:03:31,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18539 (Avoid using locale-dependent boost trim functions in RPCAuthorized(â€¦) and bitcoin-tx by practicalswift)\n* #18130 ",https://github.com/bitcoin/bitcoin/pull/18124#issuecomment-585462590,585462590,
practicalswift,2020-02-12 23:21:13,"> Before this PR, those assertions obviously don't hold? I'm very confused.\n\nThen **I'm** confused by your confusion :)\n\nWhat assertion are you claiming not to hold before this PR? The `bitcoind` or the `bitcoin-qt` assertions or all of them? A single counter-example would settle this. What user configuration should I run to make the assertions fail?\n\nVery interesting: it seems like on",https://github.com/bitcoin/bitcoin/pull/18124#issuecomment-585467979,585467979,
sipa,2020-02-12 23:32:20,"`std::to_string(1.23)` won't always be `""1.230000""` with the current code, if LC_ALL isn't set to C?",https://github.com/bitcoin/bitcoin/pull/18124#issuecomment-585471561,585471561,
practicalswift,2020-02-12 23:45:51,"@sipa \n\nAs you probably know the equivalent of `std::setlocale(LC_ALL, ""C"");` is always executed before `main` is run.\n\nI think you're incorrectly assuming that we are doing `std::setlocale(LC_ALL, """");` in the `bitcoind` code (which would set the locale to whatever the user has set the environment variable `LC_ALL` to) .\n\nCould that be the case?",https://github.com/bitcoin/bitcoin/pull/18124#issuecomment-585475591,585475591,
sipa,2020-02-12 23:52:30,"No, I'm not assuming any `setlocale` call. I'm saying that _before_ this PR, there is no such call, and thus `std::to_string(1.23)` _right now_ won't be guaranteed to be ""1.230000"".",https://github.com/bitcoin/bitcoin/pull/18124#issuecomment-585477459,585477459,
practicalswift,2020-02-13 00:03:30,"@sipa \n\nSounds like you're incorrectly assuming that `setlocale(LC_ALL, nullptr);` _sets_ the locale. Could that be the case? Note that `setlocale(LC_ALL, nullptr);` is _not_ equivalent to `setlocale(LC_ALL, """");`.\n\nI claim that `std::to_string(1.23)` _right now_ (prior to this PR) is guaranteed to be `""1.230000""` during the entire lifetime of the `bitcoind` process regardless of the user'",https://github.com/bitcoin/bitcoin/pull/18124#issuecomment-585480540,585480540,
sipa,2020-02-13 00:52:13,"Aha, I was indeed making the assumption that `setlocale(?, nullptr)` was changing the locale.\n\nIn that case, I have another concern: doesn't this break running `bitcoind` with locale env variables set to anything but LC_ALL?",https://github.com/bitcoin/bitcoin/pull/18124#issuecomment-585493739,585493739,
practicalswift,2020-02-13 16:56:57,"@sipa \n\n> In that case, I have another concern: doesn't this break running bitcoind with locale env variables set to anything but LC_ALL?\n\nIt sounds like you're incorrectly assuming that any of the `LC_*` environment variables will somehow control the C and C++ locales used without any explicit call to `setlocale(LC_*, """")` being made in the user code. Could that be the case?\n\nAs you p",https://github.com/bitcoin/bitcoin/pull/18124#issuecomment-585859719,585859719,
sipa,2020-02-13 18:11:26,"Oh, I'm indeed learning. I assumed that the LC_ environment variables automatically affect all programs.\n\nSo what is this testing? It seems to verify things that are guaranteed by the language?\n",https://github.com/bitcoin/bitcoin/pull/18124#issuecomment-585896017,585896017,
practicalswift,2020-02-14 15:29:04,"@sipa The only thing guaranteed by the language is that a C++ program has the C and C++ locales set to the classic locale when entering `main`. After that the user code is free to mess with the locale as it seen fit: hence the need to verify that the assumption we make hold true :)\n\nThere are quite a few gotchas that are worth guarding against in my opinion:\n\nA common gotcha is that `setlo",https://github.com/bitcoin/bitcoin/pull/18124#issuecomment-586336779,586336779,
practicalswift,2020-02-14 15:55:42,To make things even more unpredictable some versions of Qt messes with all locale categories whereas other versions only messes with a subset of locale categories. I believe a major locale handling change was made in Qt 4.4 for example.,https://github.com/bitcoin/bitcoin/pull/18124#issuecomment-586348312,586348312,
luke-jr,2020-02-14 17:15:00,"Some of our stuff, like `bitcoin-qt` and `bitcoin-wallet` *should* use locales...",https://github.com/bitcoin/bitcoin/pull/18124#issuecomment-586382342,586382342,
practicalswift,2020-02-15 16:48:34,"@luke-jr \n\nWe produce the following five binaries:\n\n* `bitcoin-cli`\n* `bitcoin-qt`\n* `bitcoin-tx`\n* `bitcoin-wallet`\n* `bitcoind`\n\nWhich of them should be localized and which should not be localized?\n",https://github.com/bitcoin/bitcoin/pull/18124#issuecomment-586618780,586618780,
practicalswift,2020-02-23 10:27:54,@luke-jr Could you clarify your comment by answering the last question? :),https://github.com/bitcoin/bitcoin/pull/18124#issuecomment-590053781,590053781,
MarcoFalke,2020-02-24 18:25:47,@practicalswift Purely user-facing graphical displays should be localized ,https://github.com/bitcoin/bitcoin/pull/18124#issuecomment-590478407,590478407,
practicalswift,2020-02-24 21:07:26,"@MarcoFalke `bitcoin-qt` is the only of the five binaries producing purely user-facing graphical displays AFAICT, so `bitcoin-qt` is thus the only application that should be localized. Correct? :)",https://github.com/bitcoin/bitcoin/pull/18124#issuecomment-590548775,590548775,
sipa,2020-02-24 21:15:12,"> bitcoin-qt is the only of the five binaries producing purely user-facing graphical displays AFAICT, so bitcoin-qt is thus the only application that should be localized. Correct? :)\n\nI think it's wrong to think about binaries being localized or not.\n\nThe user-interfacing code in `bitcoin-qt` should/may be localized, but other code in `bitcoin-qt` (e.g. the RPC code in it) still shouldn't.",https://github.com/bitcoin/bitcoin/pull/18124#issuecomment-590551903,590551903,
practicalswift,2020-03-06 15:46:25,"> > bitcoin-qt is the only of the five binaries producing purely user-facing graphical displays AFAICT, so bitcoin-qt is thus the only application that should be localized. Correct? :)\n> \n> I think it's wrong to think about binaries being localized or not.\n> \n> The user-interfacing code in `bitcoin-qt` should/may be localized, but other code in `bitcoin-qt` (e.g. the RPC code in it) still ",https://github.com/bitcoin/bitcoin/pull/18124#issuecomment-595827802,595827802,
sipa,2020-03-13 03:10:30,@practicalswift That sounds right; I don't think any of that is related to the changes in this PR.,https://github.com/bitcoin/bitcoin/pull/18124#issuecomment-598527283,598527283,
practicalswift,2020-04-29 14:42:36,Closing this PR: consensus opinion seems to be that the locale assumptions we're are making implicitly are not worth asserting explicitly :),https://github.com/bitcoin/bitcoin/pull/18124#issuecomment-621256541,621256541,
