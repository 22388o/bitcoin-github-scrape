[
  {
    "sha": "fa804beeceb955791192b67d496187a7ad4a3bf4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTgwNGJlZWNlYjk1NTc5MTE5MmI2N2Q0OTYxODdhN2FkNGEzYmY0",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-04-22T17:34:09Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-04-22T18:06:42Z"
      },
      "message": "rpc: Add have_pruned to getblockchaininfo",
      "tree": {
        "sha": "cfeed740436ba008f4e7e61e116ffdd6d1985cd9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cfeed740436ba008f4e7e61e116ffdd6d1985cd9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa804beeceb955791192b67d496187a7ad4a3bf4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhkoAwAqI6LeH9PLv1F1HPezdzCcYrDXY8SA+quN2lJz+S4a5jJz67VSrpVjNJV\nxzVsB9rvXu9hMCujTMLTxQ6c7XUHgctM+10hfNMHq7Vbj+VhGD75dermJ/Q6LrsA\nV2hn8ELXPSgXpQNqqSceYYZxEFIe8b8AH/waRpIG5wSXU2Rn4dVLRD6uhVfXF6TB\nizDwPJc6nuDykaTSXQHl2XLAeJ81QWCEBGqtngQ3V3pEF6iwUrAXWdQKSYB58o8s\nQM8YUDfU3ddk7UlNUAgqyCkma4Q3O8fh/2D8A+rdrCLHI/rLLCNSeE1Y90CnWgRA\nnJWSvhK/WuYLKYUyGIKWQwezfYt3s+IXy3KRo1rey3hijCf13E+WCLita/c+G6mE\nXPaIdQf3dzVGENfc1FhxqcNrb0Sl+zKsS6DGzxNA9mxuAzeZ1qKPmmhpeb25ItuG\n5AFfL6XgwL32N2BQnXFmI+/YHH/aU08ej9MPyXefGKxWAA1J33wJLTkheCQxzybI\nTVUIejiG\n=RDSp\n-----END PGP SIGNATURE-----",
        "payload": "tree cfeed740436ba008f4e7e61e116ffdd6d1985cd9\nparent 56376f336548b53cf31e98a58dfb4db22cede6e5\nauthor MarcoFalke <falke.marco@gmail.com> 1555954449 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1555956402 -0400\n\nrpc: Add have_pruned to getblockchaininfo\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa804beeceb955791192b67d496187a7ad4a3bf4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa804beeceb955791192b67d496187a7ad4a3bf4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa804beeceb955791192b67d496187a7ad4a3bf4/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "56376f336548b53cf31e98a58dfb4db22cede6e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/56376f336548b53cf31e98a58dfb4db22cede6e5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/56376f336548b53cf31e98a58dfb4db22cede6e5"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 15,
      "deletions": 5
    },
    "files": [
      {
        "sha": "1cbfcce0138e860fbefc1683d158e740d3433f40",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa804beeceb955791192b67d496187a7ad4a3bf4/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa804beeceb955791192b67d496187a7ad4a3bf4/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=fa804beeceb955791192b67d496187a7ad4a3bf4",
        "patch": "@@ -805,6 +805,7 @@ static UniValue getblockheader(const JSONRPCRequest& request)\n \n static CBlock GetBlockChecked(const CBlockIndex* pblockindex)\n {\n+    LOCK(cs_main); // Protect against race, where block might be pruned from under us\n     CBlock block;\n     if (IsBlockPruned(pblockindex)) {\n         throw JSONRPCError(RPC_MISC_ERROR, \"Block not available (pruned data)\");\n@@ -1280,6 +1281,7 @@ UniValue getblockchaininfo(const JSONRPCRequest& request)\n             \"  \\\"chainwork\\\": \\\"xxxx\\\"           (string) total amount of work in active chain, in hexadecimal\\n\"\n             \"  \\\"size_on_disk\\\": xxxxxx,       (numeric) the estimated size of the block and undo files on disk\\n\"\n             \"  \\\"pruned\\\": xx,                 (boolean) if the blocks are subject to pruning\\n\"\n+            \"  \\\"have_pruned\\\": xx,            (boolean) if a block has been pruned (only present if pruning is enabled)\\n\"\n             \"  \\\"pruneheight\\\": xxxxxx,        (numeric) lowest-height complete block stored (only present if pruning is enabled)\\n\"\n             \"  \\\"automatic_pruning\\\": xx,      (boolean) whether automatic pruning is enabled (only present if pruning is enabled)\\n\"\n             \"  \\\"prune_target_size\\\": xxxxxx,  (numeric) the target size used by pruning (only present if automatic pruning is enabled)\\n\"\n@@ -1333,12 +1335,13 @@ UniValue getblockchaininfo(const JSONRPCRequest& request)\n     obj.pushKV(\"size_on_disk\",          CalculateCurrentUsage());\n     obj.pushKV(\"pruned\",                fPruneMode);\n     if (fPruneMode) {\n+        obj.pushKV(\"have_pruned\", fHavePruned);\n+\n         const CBlockIndex* block = tip;\n         assert(block);\n         while (block->pprev && (block->pprev->nStatus & BLOCK_HAVE_DATA)) {\n             block = block->pprev;\n         }\n-\n         obj.pushKV(\"pruneheight\",        block->nHeight);\n \n         // if 0, execution bypasses the whole if block."
      },
      {
        "sha": "12c3027325d2580acbe6b4ed5a3b8d5874a821a5",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa804beeceb955791192b67d496187a7ad4a3bf4/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa804beeceb955791192b67d496187a7ad4a3bf4/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=fa804beeceb955791192b67d496187a7ad4a3bf4",
        "patch": "@@ -180,7 +180,7 @@ extern CBlockIndex *pindexBestHeader;\n \n /** Pruning-related variables and constants */\n /** True if any block files have ever been pruned. */\n-extern bool fHavePruned;\n+extern bool fHavePruned GUARDED_BY(cs_main);\n /** True if we're running in -prune mode. */\n extern bool fPruneMode;\n /** Number of MiB of block files that we're trying to stay below. */\n@@ -488,7 +488,7 @@ bool DumpMempool();\n bool LoadMempool();\n \n //! Check whether the block associated with this index entry is pruned or not.\n-inline bool IsBlockPruned(const CBlockIndex* pblockindex)\n+inline bool IsBlockPruned(const CBlockIndex* pblockindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     return (fHavePruned && !(pblockindex->nStatus & BLOCK_HAVE_DATA) && pblockindex->nTx > 0);\n }"
      },
      {
        "sha": "bf035df952472fa47d0611b875a28f838e02a428",
        "filename": "test/functional/feature_pruning.py",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa804beeceb955791192b67d496187a7ad4a3bf4/test/functional/feature_pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa804beeceb955791192b67d496187a7ad4a3bf4/test/functional/feature_pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_pruning.py?ref=fa804beeceb955791192b67d496187a7ad4a3bf4",
        "patch": "@@ -128,6 +128,10 @@ def create_big_chain(self):\n \n     def test_height_min(self):\n         assert os.path.isfile(os.path.join(self.prunedir, \"blk00000.dat\")), \"blk00000.dat is missing, pruning too early\"\n+        info = self.nodes[2].getblockchaininfo()\n+        assert_equal(info[\"pruned\"], True)\n+        assert_equal(info[\"have_pruned\"], False)\n+\n         self.log.info(\"Success\")\n         self.log.info(\"Though we're already using more than 550MiB, current usage: %d\" % calc_usage(self.prunedir))\n         self.log.info(\"Mining 25 more blocks should cause the first block file to be pruned\")\n@@ -136,6 +140,9 @@ def test_height_min(self):\n \n         # Wait for blk00000.dat to be pruned\n         wait_until(lambda: not os.path.isfile(os.path.join(self.prunedir, \"blk00000.dat\")), timeout=30)\n+        info = self.nodes[2].getblockchaininfo()\n+        assert_equal(info[\"pruned\"], True)\n+        assert_equal(info[\"have_pruned\"], True)\n \n         self.log.info(\"Success\")\n         usage = calc_usage(self.prunedir)"
      },
      {
        "sha": "7d655594a56731a57c31c981c78c7ef5480ce249",
        "filename": "test/functional/rpc_blockchain.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa804beeceb955791192b67d496187a7ad4a3bf4/test/functional/rpc_blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa804beeceb955791192b67d496187a7ad4a3bf4/test/functional/rpc_blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_blockchain.py?ref=fa804beeceb955791192b67d496187a7ad4a3bf4",
        "patch": "@@ -95,7 +95,7 @@ def _test_getblockchaininfo(self):\n         res = self.nodes[0].getblockchaininfo()\n \n         # result should have these additional pruning keys if manual pruning is enabled\n-        assert_equal(sorted(res.keys()), sorted(['pruneheight', 'automatic_pruning'] + keys))\n+        assert_equal(sorted(res.keys()), sorted(['have_pruned', 'pruneheight', 'automatic_pruning'] + keys))\n \n         # size_on_disk should be > 0\n         assert_greater_than(res['size_on_disk'], 0)\n@@ -115,7 +115,7 @@ def _test_getblockchaininfo(self):\n         self.restart_node(0, ['-stopatheight=207', '-prune=550'])\n         res = self.nodes[0].getblockchaininfo()\n         # result should have these additional pruning keys if prune=550\n-        assert_equal(sorted(res.keys()), sorted(['pruneheight', 'automatic_pruning', 'prune_target_size'] + keys))\n+        assert_equal(sorted(res.keys()), sorted(['have_pruned', 'pruneheight', 'automatic_pruning', 'prune_target_size'] + keys))\n \n         # check related fields\n         assert res['pruned']"
      }
    ]
  }
]