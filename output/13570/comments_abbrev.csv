domob1812,2018-06-29T14:17:51Z,"I've created two commits, because the first is a trivial and ""unrelated"" refactor - I think it makes sense for the review and version history to have it separate.  But I'm happy to squash them if you think that's better.",https://github.com/bitcoin/bitcoin/pull/13570#issuecomment-401368135,401368135,
DrahtBot,2018-06-30T11:35:59Z,"<!--e57a25ab6845829454e8d69fc972939a-->Note to reviewers: This pull request conflicts with the following ones:\n\n* #13008 (rpc: Rename size to vsize in mempool related calls by IPGlider)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",https://github.com/bitcoin/bitcoin/pull/13570#issuecomment-401535505,401535505,
domob1812,2018-06-30T14:07:24Z,"The latest update also changed the format as suggested to an array.  We now also return just the literal type without removing the `""pub""` prefix - so there's no more `assert`.",https://github.com/bitcoin/bitcoin/pull/13570#issuecomment-401543483,401543483,
laanwj,2018-07-05T15:41:49Z,"I vaguely remember I also started work on something like this a few years ago, with a zmq refactor that was never eventually merged, but I still think it's a good idea.\n\nWhat I needed at the time was a way to ask a bitcoind instance whether it was listening on zmq, and if so, on that endpoints. This prevents having to pass in `zmq` configuration to the client application separately as well.\n",https://github.com/bitcoin/bitcoin/pull/13570#issuecomment-402765421,402765421,
Empact,2018-06-29T16:42:36Z,Whitespace - maybe run clang-format.,https://github.com/bitcoin/bitcoin/pull/13570#discussion_r199217746,199217746,src/zmq/zmqnotificationinterface.cpp
promag,2018-06-29T23:36:55Z,IMO should not use UniValue here. Return a list instead?,https://github.com/bitcoin/bitcoin/pull/13570#discussion_r199302344,199302344,src/zmq/zmqnotificationinterface.cpp
promag,2018-06-29T23:37:44Z,Why assert?,https://github.com/bitcoin/bitcoin/pull/13570#discussion_r199302402,199302402,src/zmq/zmqnotificationinterface.cpp
domob1812,2018-06-30T07:33:12Z,"Good catch, fixed.",https://github.com/bitcoin/bitcoin/pull/13570#discussion_r199315997,199315997,src/zmq/zmqnotificationinterface.cpp
domob1812,2018-06-30T07:33:18Z,"I thought about this - returning a list means (because I think we should not return a list of non-const notifiers) that we have to create a new `std::list<const CZMQAbstractNotifier*>` and cannot return the existing `notifiers`.  But on second thought, that seems not too bad - and decoupling from `UniValue` makes sense.  I've changed that accordingly.",https://github.com/bitcoin/bitcoin/pull/13570#discussion_r199315999,199315999,src/zmq/zmqnotificationinterface.cpp
domob1812,2018-06-30T07:33:21Z,"Because the current code is meant to only add types that start with `""pub""` - if that is not the case, it is a bug with the code (or at least means the code here has to be updated as well).\n\nBut if you prefer, we could just ignore those that don't start with `""pub""` and print a warning to `debug.log` instead.   Or we could just keep the `""pub""` prefix in the output - whatever you think is best",https://github.com/bitcoin/bitcoin/pull/13570#discussion_r199316001,199316001,src/zmq/zmqnotificationinterface.cpp
promag,2018-06-30T09:26:19Z,Use 1 node and below `restart_node` with the options options you want to test.,https://github.com/bitcoin/bitcoin/pull/13570#discussion_r199318312,199318312,test/functional/rpc_zmq.py
domob1812,2018-06-30T14:06:46Z,"Done - besides reducing the number of nodes, this also puts the args right next to the corresponding test; so indeed a good suggestion!",https://github.com/bitcoin/bitcoin/pull/13570#discussion_r199323436,199323436,test/functional/rpc_zmq.py
promag,2018-07-01T15:05:57Z,Could just `return notifiers`?,https://github.com/bitcoin/bitcoin/pull/13570#discussion_r199352333,199352333,src/zmq/zmqnotificationinterface.cpp
promag,2018-07-01T15:11:50Z,"An alternative is to make these RPC available (registered) if `g_zmq_notification_interface != nullptr` so this check could be removed.\n\nNot sure what others think.\n\n",https://github.com/bitcoin/bitcoin/pull/13570#discussion_r199352471,199352471,src/zmq/zmqrpc.cpp
domob1812,2018-07-02T05:46:21Z,"I was thinking about this, and my opinion is that we should have them always available (if ZMQ is compiled in at least) - as in the current code.  The reason is that if a wallet frontend or such uses this RPC, then checking whether *any* notification is registered at all (which is equivalent to checking for non-nullness of `g_zmq_notification_interface`) is part of the reason for having this RPC i",https://github.com/bitcoin/bitcoin/pull/13570#discussion_r199389442,199389442,src/zmq/zmqrpc.cpp
domob1812,2018-07-02T05:48:26Z,"No because `notifiers` is a list of *non-`const`* `CZMQAbstractNotifier`, and I'd rather not return the mutable objects.  That's the reason why I originally had this ""add to JSON"" method - but I think that the additional copy done here is probably not relevant in practice.",https://github.com/bitcoin/bitcoin/pull/13570#discussion_r199389657,199389657,src/zmq/zmqnotificationinterface.cpp
promag,2018-07-02T06:28:13Z,"Consider an hypothetical `zmqaddnotification`, shouldn't it raise an error if `g_zmq_notification_interface == nullptr`?\n\n> this makes things more complicated\n\nWhy? Also, if your ""frontend"" is calling these RPC then it would be bad configuration if these are not present.",https://github.com/bitcoin/bitcoin/pull/13570#discussion_r199394188,199394188,src/zmq/zmqrpc.cpp
domob1812,2018-07-02T06:55:24Z,"But `g_zmq_notification_interface` being null just means that we have no notifications enabled through the command-line.  So with `zmqaddnotification`, I would imagine that it actually is able to add a notification also in that case (in fact, that could be the primary usage - do not configure any notifications through the CLI and instead add them later by RPC).  I. e., `zmqaddnotification` would e",https://github.com/bitcoin/bitcoin/pull/13570#discussion_r199399060,199399060,src/zmq/zmqrpc.cpp
promag,2018-07-02T17:49:24Z,"> But `g_zmq_notification_interface` being null just means that we have no notifications enabled through the command-line.\n\nIndeed, forgot about that.",https://github.com/bitcoin/bitcoin/pull/13570#discussion_r199573589,199573589,src/zmq/zmqrpc.cpp
promag,2018-07-04T20:51:11Z,Missing `{}`.,https://github.com/bitcoin/bitcoin/pull/13570#discussion_r200199876,200199876,src/zmq/zmqnotificationinterface.cpp
promag,2018-07-04T20:51:31Z,Missing `{}`.,https://github.com/bitcoin/bitcoin/pull/13570#discussion_r200199902,200199902,src/zmq/zmqrpc.cpp
promag,2018-07-04T20:53:42Z,"Now that each notification has the `type`, could just return the array:\n```\n[\n    { ""type"": ""..."", ""address"": ""..."" },\n    ...\n]\n```\n   ",https://github.com/bitcoin/bitcoin/pull/13570#discussion_r200200088,200200088,src/zmq/zmqrpc.cpp
promag,2018-07-04T20:55:49Z,"Could avoid above line:\n```cpp\nfor (auto n : g_zmq_notification_interface->GetActiveNotifiers()) {\n```",https://github.com/bitcoin/bitcoin/pull/13570#discussion_r200200256,200200256,src/zmq/zmqrpc.cpp
promag,2018-07-04T20:56:36Z,Could specify import symbols.,https://github.com/bitcoin/bitcoin/pull/13570#discussion_r200200330,200200330,test/functional/rpc_zmq.py
promag,2018-07-04T20:58:03Z,"nit, inline this (only 2 times)?",https://github.com/bitcoin/bitcoin/pull/13570#discussion_r200200456,200200456,test/functional/rpc_zmq.py
domob1812,2018-07-05T06:02:45Z,"Done.  I've seen single-line blocks without it (even in this file), but the style guide is indeed pretty clear that this should be avoided *going forward*.",https://github.com/bitcoin/bitcoin/pull/13570#discussion_r200240339,200240339,src/zmq/zmqnotificationinterface.cpp
domob1812,2018-07-05T06:02:48Z,"Done.  I've also added `{}` for the `if` body that throws the help message - while it seems none of these use them, they are required by the style guide there as well.",https://github.com/bitcoin/bitcoin/pull/13570#discussion_r200240346,200240346,src/zmq/zmqrpc.cpp
domob1812,2018-07-05T06:02:53Z,"Makes sense, changed.",https://github.com/bitcoin/bitcoin/pull/13570#discussion_r200240358,200240358,src/zmq/zmqrpc.cpp
domob1812,2018-07-05T06:03:00Z,Done.,https://github.com/bitcoin/bitcoin/pull/13570#discussion_r200240368,200240368,src/zmq/zmqrpc.cpp
domob1812,2018-07-05T06:03:16Z,"Done (only `assert_equal`, so this certainly makes sense).",https://github.com/bitcoin/bitcoin/pull/13570#discussion_r200240402,200240402,test/functional/rpc_zmq.py
domob1812,2018-07-05T06:04:29Z,"I actually like it better like this, even if it is only used in two places for now.  And if we add a `addzmqnotification` later, it will be used in more.\n\nBut if you strongly prefer this to be inlined, I can of course do it.",https://github.com/bitcoin/bitcoin/pull/13570#discussion_r200240556,200240556,test/functional/rpc_zmq.py
promag,2018-07-05T06:11:19Z,No strong opinion.,https://github.com/bitcoin/bitcoin/pull/13570#discussion_r200241361,200241361,test/functional/rpc_zmq.py
MarcoFalke,2018-07-11T14:39:47Z,The test should be skipped similar to `interface_zmq.py`. Otherwise it will fail.,https://github.com/bitcoin/bitcoin/pull/13570#discussion_r201715904,201715904,test/functional/rpc_zmq.py
domob1812,2018-07-11T16:19:31Z,"That is indeed a good point!  Since this was already merged, should I create a new PR with this fix?",https://github.com/bitcoin/bitcoin/pull/13570#discussion_r201756177,201756177,test/functional/rpc_zmq.py
domob1812,2018-07-12T15:01:25Z,I'll work on a fix and send in a PR with it as soon as I'm ready.  Thanks again for spotting this!,https://github.com/bitcoin/bitcoin/pull/13570#discussion_r202068225,202068225,test/functional/rpc_zmq.py
domob1812,2018-07-12T15:55:23Z,Created #13646.,https://github.com/bitcoin/bitcoin/pull/13570#discussion_r202088487,202088487,test/functional/rpc_zmq.py
