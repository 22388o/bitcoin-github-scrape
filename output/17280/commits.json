[
  {
    "sha": "f3b51eb9352d7a7c5dfa15615efc8bc0a52ffecf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmM2I1MWViOTM1MmQ3YTdjNWRmYTE1NjE1ZWZjOGJjMGE1MmZmZWNm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2019-10-28T12:41:45Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2019-10-28T12:41:45Z"
      },
      "message": "Fix occurences of c_str() used with size() to data()\n\nUsing `data()` better communicates the intent here.\n\nAlso, depending on how `c_str()` is implemented, this fixes undefined\nbehavior: The part of the string after the first NULL character might\nhave undefined contents.",
      "tree": {
        "sha": "b580be6a30428150b6ec40ca5da5bb96ee746fb1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b580be6a30428150b6ec40ca5da5bb96ee746fb1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f3b51eb9352d7a7c5dfa15615efc8bc0a52ffecf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3b51eb9352d7a7c5dfa15615efc8bc0a52ffecf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f3b51eb9352d7a7c5dfa15615efc8bc0a52ffecf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3b51eb9352d7a7c5dfa15615efc8bc0a52ffecf/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a25945318fdc2890a141a28843c2c5af251c9605",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a25945318fdc2890a141a28843c2c5af251c9605",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a25945318fdc2890a141a28843c2c5af251c9605"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 8,
      "deletions": 8
    },
    "files": [
      {
        "sha": "a18f7bae91f0dcd7f8f0fe427d7c4eec9788e5e1",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3b51eb9352d7a7c5dfa15615efc8bc0a52ffecf/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3b51eb9352d7a7c5dfa15615efc8bc0a52ffecf/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=f3b51eb9352d7a7c5dfa15615efc8bc0a52ffecf",
        "patch": "@@ -366,7 +366,7 @@ static UniValue CallRPC(BaseRequestHandler *rh, const std::string& strMethod, co\n     std::string endpoint = \"/\";\n     if (!gArgs.GetArgs(\"-rpcwallet\").empty()) {\n         std::string walletName = gArgs.GetArg(\"-rpcwallet\", \"\");\n-        char *encodedURI = evhttp_uriencode(walletName.c_str(), walletName.size(), false);\n+        char *encodedURI = evhttp_uriencode(walletName.data(), walletName.size(), false);\n         if (encodedURI) {\n             endpoint = \"/wallet/\"+ std::string(encodedURI);\n             free(encodedURI);"
      },
      {
        "sha": "e684eced375a4941b2a87b276aba0c03dce28571",
        "filename": "src/crypto/hkdf_sha256_32.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3b51eb9352d7a7c5dfa15615efc8bc0a52ffecf/src/crypto/hkdf_sha256_32.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3b51eb9352d7a7c5dfa15615efc8bc0a52ffecf/src/crypto/hkdf_sha256_32.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/hkdf_sha256_32.cpp?ref=f3b51eb9352d7a7c5dfa15615efc8bc0a52ffecf",
        "patch": "@@ -9,7 +9,7 @@\n \n CHKDF_HMAC_SHA256_L32::CHKDF_HMAC_SHA256_L32(const unsigned char* ikm, size_t ikmlen, const std::string& salt)\n {\n-    CHMAC_SHA256((const unsigned char*)salt.c_str(), salt.size()).Write(ikm, ikmlen).Finalize(m_prk);\n+    CHMAC_SHA256((const unsigned char*)salt.data(), salt.size()).Write(ikm, ikmlen).Finalize(m_prk);\n }\n \n void CHKDF_HMAC_SHA256_L32::Expand32(const std::string& info, unsigned char hash[OUTPUT_SIZE])"
      },
      {
        "sha": "73fb3b606ec4ac160a9fe378b05469a6d5f5b3ab",
        "filename": "src/fs.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3b51eb9352d7a7c5dfa15615efc8bc0a52ffecf/src/fs.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3b51eb9352d7a7c5dfa15615efc8bc0a52ffecf/src/fs.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/fs.cpp?ref=f3b51eb9352d7a7c5dfa15615efc8bc0a52ffecf",
        "patch": "@@ -107,10 +107,10 @@ std::string get_filesystem_error_message(const fs::filesystem_error& e)\n #else\n     // Convert from Multi Byte to utf-16\n     std::string mb_string(e.what());\n-    int size = MultiByteToWideChar(CP_ACP, 0, mb_string.c_str(), mb_string.size(), nullptr, 0);\n+    int size = MultiByteToWideChar(CP_ACP, 0, mb_string.data(), mb_string.size(), nullptr, 0);\n \n     std::wstring utf16_string(size, L'\\0');\n-    MultiByteToWideChar(CP_ACP, 0, mb_string.c_str(), mb_string.size(), &*utf16_string.begin(), size);\n+    MultiByteToWideChar(CP_ACP, 0, mb_string.data(), mb_string.size(), &*utf16_string.begin(), size);\n     // Convert from utf-16 to utf-8\n     return std::wstring_convert<std::codecvt_utf8_utf16<wchar_t>, wchar_t>().to_bytes(utf16_string);\n #endif"
      },
      {
        "sha": "0437f0c7de86537d6da47359eaa9c86613cfb241",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3b51eb9352d7a7c5dfa15615efc8bc0a52ffecf/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3b51eb9352d7a7c5dfa15615efc8bc0a52ffecf/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=f3b51eb9352d7a7c5dfa15615efc8bc0a52ffecf",
        "patch": "@@ -112,7 +112,7 @@ static bool multiUserAuthorized(std::string strUserPass)\n         static const unsigned int KEY_SIZE = 32;\n         unsigned char out[KEY_SIZE];\n \n-        CHMAC_SHA256(reinterpret_cast<const unsigned char*>(strSalt.c_str()), strSalt.size()).Write(reinterpret_cast<const unsigned char*>(strPass.c_str()), strPass.size()).Finalize(out);\n+        CHMAC_SHA256(reinterpret_cast<const unsigned char*>(strSalt.data()), strSalt.size()).Write(reinterpret_cast<const unsigned char*>(strPass.data()), strPass.size()).Finalize(out);\n         std::vector<unsigned char> hexvec(out, out+KEY_SIZE);\n         std::string strHashFromPass = HexStr(hexvec);\n "
      },
      {
        "sha": "46042f5634bf3ec808c9839210acc2c899e1bd56",
        "filename": "src/util/strencodings.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3b51eb9352d7a7c5dfa15615efc8bc0a52ffecf/src/util/strencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3b51eb9352d7a7c5dfa15615efc8bc0a52ffecf/src/util/strencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/strencodings.cpp?ref=f3b51eb9352d7a7c5dfa15615efc8bc0a52ffecf",
        "patch": "@@ -138,7 +138,7 @@ std::string EncodeBase64(const unsigned char* pch, size_t len)\n \n std::string EncodeBase64(const std::string& str)\n {\n-    return EncodeBase64((const unsigned char*)str.c_str(), str.size());\n+    return EncodeBase64((const unsigned char*)str.data(), str.size());\n }\n \n std::vector<unsigned char> DecodeBase64(const char* p, bool* pf_invalid)\n@@ -207,7 +207,7 @@ std::string EncodeBase32(const unsigned char* pch, size_t len)\n \n std::string EncodeBase32(const std::string& str)\n {\n-    return EncodeBase32((const unsigned char*)str.c_str(), str.size());\n+    return EncodeBase32((const unsigned char*)str.data(), str.size());\n }\n \n std::vector<unsigned char> DecodeBase32(const char* p, bool* pf_invalid)"
      },
      {
        "sha": "b50f00e7d15aa5d76dff3f8eb030b1edf49f1abe",
        "filename": "src/wallet/crypter.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3b51eb9352d7a7c5dfa15615efc8bc0a52ffecf/src/wallet/crypter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3b51eb9352d7a7c5dfa15615efc8bc0a52ffecf/src/wallet/crypter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.cpp?ref=f3b51eb9352d7a7c5dfa15615efc8bc0a52ffecf",
        "patch": "@@ -23,7 +23,7 @@ int CCrypter::BytesToKeySHA512AES(const std::vector<unsigned char>& chSalt, cons\n     unsigned char buf[CSHA512::OUTPUT_SIZE];\n     CSHA512 di;\n \n-    di.Write((const unsigned char*)strKeyData.c_str(), strKeyData.size());\n+    di.Write((const unsigned char*)strKeyData.data(), strKeyData.size());\n     di.Write(chSalt.data(), chSalt.size());\n     di.Finalize(buf);\n "
      }
    ]
  }
]