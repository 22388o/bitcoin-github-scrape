practicalswift,2018-01-29T15:21:47Z,"This should probably be reviewed by @jnewbery, @MarcoFalke and @MeshCollider :-)",https://github.com/bitcoin/bitcoin/pull/12295#issuecomment-361278889,361278889,
jnewbery,2018-01-29T15:55:03Z,"This is an improvement in style, but it doesn't change behaviour (`tx` is not used after this line)\n\nI'm not sure if it makes sense to open PRs to fix individual flake8 violations. By my count, there are currently >5000:\n\n```\n→ flake8 test/functional/*py | wc -l\n5101\n```\n\nFixing them in PRs like this will generate a huge amount of review work.",https://github.com/bitcoin/bitcoin/pull/12295#issuecomment-361290305,361290305,
practicalswift,2018-01-29T16:09:59Z,"@jnewbery Agreed – fixing all `flake8` violations would clearly be a waste of time.\n\nAnd yes, we were lucky this time that `tx` was never used again after the redefinition. But why count on luck? .-)\n\nRedefinition via list comprehension is a real and recurring gotcha. Enabling the check for it in `python-lint.sh` and thus getting a guarantee that we'll never be bitten by this again seems l",https://github.com/bitcoin/bitcoin/pull/12295#issuecomment-361295455,361295455,
jnewbery,2018-01-29T16:31:14Z,"> Agreed – fixing all flake8 violations would clearly be a waste of time.\n\n> Redefinitions via list comprehensions is a real and recurring gotcha\n\nAgreed that some flake8 warnings are more useful than others. Rather than have a PR for just one of the dangerous ones, perhaps it makes sense to have a single PR that adds all of the important checks?\n\nThe changes here seem fine, but I don'",https://github.com/bitcoin/bitcoin/pull/12295#issuecomment-361302832,361302832,
practicalswift,2018-01-29T17:08:21Z,"@jnewbery For the `flake8` violations we currently have in the code base I'd say that fixing and enabling Travis checking for `F841` (PR #12284: `local variable 'foo' is assigned to but never used`) and `F812` (this PR #12295: `list comprehension redefines 'foo' from line N `) would be enough.\n\nIf we want to go beyond that I'd suggest that we consider enabling the checks that we currently **do",https://github.com/bitcoin/bitcoin/pull/12295#issuecomment-361314944,361314944,
MarcoFalke,2018-01-29T18:12:27Z,">  Rather than have a PR for just one of the dangerous ones, perhaps it makes sense to have a single PR that adds all of the important checks?\n\nMakes sense.\n\nI will take a look at the list above at some point...",https://github.com/bitcoin/bitcoin/pull/12295#issuecomment-361335039,361335039,
practicalswift,2018-01-29T19:28:09Z,@MarcoFalke I've now renamed `tx` to `dec_tx` as requested. Would you mind re-reviewing? :-),https://github.com/bitcoin/bitcoin/pull/12295#issuecomment-361358224,361358224,
MarcoFalke,2018-01-29T21:44:32Z,"I read through the list of suggested lint warnings and I couldn't find an obvious wrong one. Also, since you claim that none of these are currently hit on master, I think it is fine to enable all of them in one go. Mind to repurpose this pull request for that?",https://github.com/bitcoin/bitcoin/pull/12295#issuecomment-361396991,361396991,
practicalswift,2018-01-29T22:08:11Z,@MarcoFalke Great idea! Now updated. Please review :-),https://github.com/bitcoin/bitcoin/pull/12295#issuecomment-361403648,361403648,
MarcoFalke,2018-02-07T21:11:48Z,"Cool. Thx.\n\nutACK a9d0ebc26207b4771b7c240ca0c516debd330985",https://github.com/bitcoin/bitcoin/pull/12295#issuecomment-363912093,363912093,
meshcollider,2018-02-07T21:40:12Z,"Concept ACK / light review utACK, I think if we can add them without much churn then its sane, agree with above about fixing all 5000+ warnings though :) ",https://github.com/bitcoin/bitcoin/pull/12295#issuecomment-363919869,363919869,
jnewbery,2018-02-08T14:23:36Z,utACK a9d0ebc26207b4771b7c240ca0c516debd330985,https://github.com/bitcoin/bitcoin/pull/12295#issuecomment-364126376,364126376,
MarcoFalke,2018-01-29T18:08:41Z,"This should probably be renamed to dec_tx, like in all other sections.",https://github.com/bitcoin/bitcoin/pull/12295#discussion_r164514728,164514728,test/functional/rpc_fundrawtransaction.py
