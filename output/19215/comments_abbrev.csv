DrahtBot,2020-06-08 23:58:08,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #17034 (Bip174 extensions by achow101)\n\nIf you consider this pull request important, please also help to review the conf",https://github.com/bitcoin/bitcoin/pull/19215#issuecomment-640948474,640948474,
Rspigler,2020-06-09 05:27:47,Could you explain further what you mean by including `non_witness_utxo` but not requiring it for signing?,https://github.com/bitcoin/bitcoin/pull/19215#issuecomment-641037445,641037445,
achow101,2020-06-09 06:03:47,"> Could you explain further what you mean by including `non_witness_utxo` but not requiring it for signing?\n\n`non_witness_utxo` will be added to segwit inputs during updating. However Core's signer will not enforce that it exists for segwit inputs during signing - `witness_utxo` can be provided instead. I.e. signing will not fail if a segwit input only has a `segwit_utxo`.",https://github.com/bitcoin/bitcoin/pull/19215#issuecomment-641050304,641050304,
Sjors,2020-06-17 18:45:06,"I tested 836d6fc with a Trezor, Ledger Nano X and Nano S that this doesn't break old firmware and seems to work nicely with new firmware, see https://github.com/bitcoin-core/HWI/pull/340",https://github.com/bitcoin/bitcoin/pull/19215#issuecomment-645553794,645553794,
sipa,2020-06-29 15:52:47,utACK. I think we'll want this for 0.20.1,https://github.com/bitcoin/bitcoin/pull/19215#issuecomment-651207765,651207765,
MarcoFalke,2020-06-29 17:25:23,@luke-jr @Sjors mind to re-ACK?,https://github.com/bitcoin/bitcoin/pull/19215#issuecomment-651256364,651256364,
sipa,2020-06-30 18:27:42,"@ryanofsky Context: https://blog.trezor.io/details-of-firmware-updates-for-trezor-one-version-1-9-1-and-trezor-model-t-version-2-3-1-1eba8f60f2dd\n\nBIP341 (taproot, which will hopefully become witness v1) proposes signing all prevout amounts/scriptpubkeys in every (sighash_all) input, making this attack impossible.",https://github.com/bitcoin/bitcoin/pull/19215#issuecomment-651966508,651966508,
Sjors,2020-07-02 19:11:54,"utACK 84d295e51341a126a6c3cbeea7a8caa04c7b5bc3 (didn't retest compared to 836d6fc, but fortunately HWI's CI tracks our master branch, with a bunch of hardware wallet simulators) ",https://github.com/bitcoin/bitcoin/pull/19215#issuecomment-653177128,653177128,
fanquake,2020-07-03 01:38:41,Added to #19224 for backport.,https://github.com/bitcoin/bitcoin/pull/19215#issuecomment-653286848,653286848,
bitcoinhodler,2020-07-14 15:42:00,"Is there any way to get `walletprocesspsbt` not to add the `non_witness_utxo` now?\n\nMy use case is offline signing of PSBTs via printed QR codes, and this makes that much more difficult since the PSBTs can be so much bigger now.\n\nI understand why Trezor requires this, but I'm not concerned about that attack vector.",https://github.com/bitcoin/bitcoin/pull/19215#issuecomment-658254214,658254214,
Sjors,2020-07-14 15:46:18,"@bitcoinhodler that could be achieved by adding an argument to that RPC call. For the GUI that would cause additional clutter, but perhaps an ""advanced"" section in the Send or PSBT dialog is useful anyway. ",https://github.com/bitcoin/bitcoin/pull/19215#issuecomment-658256578,658256578,
ryanofsky,2020-06-30 17:57:33,"In commit ""rpc: show both UTXOs in decodepsbt"" (72f6bec1da198764d4648a10a61c485e7ab65e9e)\n\nNote: Commit description mentions allowing both ""witness_utxo"" and ""non_witness_utxo"" fields, but it doesn't mention the slight change in behavior here.\n\nAfter this change `have_all_utxos` is true unless there's an input with no utxo information or an input with either ""witness_utxo"" or ""non_witness_",https://github.com/bitcoin/bitcoin/pull/19215#discussion_r447876012,447876012,src/rpc/rawtransaction.cpp
ryanofsky,2020-06-30 18:20:24,"In commit ""psbt: always put a non_witness_utxo and don't remove it"" (46004790588c24174a0bec49b540d158ce163ffd)\n\nCan this comment be elaborated a little? I haven't been following this closely and don't know what in segwit v1 makes it safe to clear the non_witness_utxo transaction when signing offline.",https://github.com/bitcoin/bitcoin/pull/19215#discussion_r447889473,447889473,src/psbt.cpp
achow101,2020-06-30 18:43:14,"Before this PR, it wouldn't have been possible to have an input with both witness and non-witness utxo information. Such a PSBT wouldn't even make it to this step.",https://github.com/bitcoin/bitcoin/pull/19215#discussion_r447902445,447902445,src/rpc/rawtransaction.cpp
ryanofsky,2020-07-02 20:02:24,"In commit ""psbt: Allow both non_witness_utxo and witness_utxo"" (5279d8bc07d601fe6a67ad665fbc7591fe73c7de):\n\nPreviously we didn't allow both witness and non-witness utxos. Now we do allow them but we aren't checking if they are consistent. It seems like instead of removing the IsSane checks, it'd be better to keep them and verify \n`non_witness_utxo->vout[prevout_index] == witness_utxo` if bot",https://github.com/bitcoin/bitcoin/pull/19215#discussion_r449239668,449239668,src/psbt.cpp
achow101,2020-07-02 20:35:19,"I think we can add checks in a followup.\n\nI'm also uncertain about adding application logic checks that would disallow deserialization. The PSBT could be correctly formatted but contain the wrong UTXOs or scripts. We might still want to allow `decodepsbt` to show the PSBT, but not allow updating or signing it.",https://github.com/bitcoin/bitcoin/pull/19215#discussion_r449253576,449253576,src/psbt.cpp
meshcollider,2020-07-02 20:52:00,"Agree, the check would be nice but its not necessary for merge",https://github.com/bitcoin/bitcoin/pull/19215#discussion_r449260304,449260304,src/psbt.cpp
ryanofsky,2020-07-14 21:53:41,"In commit ""rpc: show both UTXOs in decodepsbt"" (72f6bec1da198764d4648a10a61c485e7ab65e9e)\n\nNote: Bug here is fixed in #19517 (changing `else if` to `if` can allow `total_in` to be incremented twice with the same amount)",https://github.com/bitcoin/bitcoin/pull/19215#discussion_r454667718,454667718,src/rpc/rawtransaction.cpp
