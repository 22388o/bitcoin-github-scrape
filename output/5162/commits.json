[
  {
    "sha": "900078aeb4088b63ee271e774a00ccd126628528",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MDAwNzhhZWI0MDg4YjYzZWUyNzFlNzc0YTAwY2NkMTI2NjI4NTI4",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-10-21T20:05:51Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-10-31T05:13:07Z"
      },
      "message": "boost: moveonly: create eccryptoverify.h|cpp and move helper functions there\n\nEventually (after 0.10) these files will hold the logic for crypto\nverification routines, and CKey/CPubKey will call into them.",
      "tree": {
        "sha": "7388397ef14302c47b2fbc1cb982daa58169b6ee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7388397ef14302c47b2fbc1cb982daa58169b6ee"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/900078aeb4088b63ee271e774a00ccd126628528",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/900078aeb4088b63ee271e774a00ccd126628528",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/900078aeb4088b63ee271e774a00ccd126628528",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/900078aeb4088b63ee271e774a00ccd126628528/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8d2396c9c41cbd5b8746f48f41180697f58b0681",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d2396c9c41cbd5b8746f48f41180697f58b0681",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8d2396c9c41cbd5b8746f48f41180697f58b0681"
      }
    ],
    "stats": {
      "total": 140,
      "additions": 88,
      "deletions": 52
    },
    "files": [
      {
        "sha": "c9adf859f43d8504ee881be0bbfe5e2d9b42e1c2",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/900078aeb4088b63ee271e774a00ccd126628528/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/900078aeb4088b63ee271e774a00ccd126628528/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=900078aeb4088b63ee271e774a00ccd126628528",
        "patch": "@@ -86,6 +86,7 @@ BITCOIN_CORE_H = \\\n   core_io.h \\\n   crypter.h \\\n   db.h \\\n+  eccryptoverify.h \\\n   ecwrapper.h \\\n   hash.h \\\n   init.h \\\n@@ -220,6 +221,7 @@ libbitcoin_common_a_SOURCES = \\\n   core/transaction.cpp \\\n   core_read.cpp \\\n   core_write.cpp \\\n+  eccryptoverify.cpp \\\n   ecwrapper.cpp \\\n   hash.cpp \\\n   key.cpp \\"
      },
      {
        "sha": "0a904f44bad45f6bef32e98d4c0bb00c0533045a",
        "filename": "src/eccryptoverify.cpp",
        "status": "added",
        "additions": 63,
        "deletions": 0,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/900078aeb4088b63ee271e774a00ccd126628528/src/eccryptoverify.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/900078aeb4088b63ee271e774a00ccd126628528/src/eccryptoverify.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/eccryptoverify.cpp?ref=900078aeb4088b63ee271e774a00ccd126628528",
        "patch": "@@ -0,0 +1,63 @@\n+#include \"eccryptoverify.h\"\n+\n+namespace {\n+\n+int CompareBigEndian(const unsigned char *c1, size_t c1len, const unsigned char *c2, size_t c2len) {\n+    while (c1len > c2len) {\n+        if (*c1)\n+            return 1;\n+        c1++;\n+        c1len--;\n+    }\n+    while (c2len > c1len) {\n+        if (*c2)\n+            return -1;\n+        c2++;\n+        c2len--;\n+    }\n+    while (c1len > 0) {\n+        if (*c1 > *c2)\n+            return 1;\n+        if (*c2 > *c1)\n+            return -1;\n+        c1++;\n+        c2++;\n+        c1len--;\n+    }\n+    return 0;\n+}\n+\n+/** Order of secp256k1's generator minus 1. */\n+const unsigned char vchMaxModOrder[32] = {\n+    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,\n+    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,\n+    0xBA,0xAE,0xDC,0xE6,0xAF,0x48,0xA0,0x3B,\n+    0xBF,0xD2,0x5E,0x8C,0xD0,0x36,0x41,0x40\n+};\n+\n+/** Half of the order of secp256k1's generator minus 1. */\n+const unsigned char vchMaxModHalfOrder[32] = {\n+    0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,\n+    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,\n+    0x5D,0x57,0x6E,0x73,0x57,0xA4,0x50,0x1D,\n+    0xDF,0xE9,0x2F,0x46,0x68,0x1B,0x20,0xA0\n+};\n+\n+const unsigned char vchZero[1] = {0};\n+} // anon namespace\n+\n+namespace eccrypto {\n+\n+bool Check(const unsigned char *vch) {\n+    return vch &&\n+           CompareBigEndian(vch, 32, vchZero, 0) > 0 &&\n+           CompareBigEndian(vch, 32, vchMaxModOrder, 32) <= 0;\n+}\n+\n+bool CheckSignatureElement(const unsigned char *vch, int len, bool half) {\n+    return vch &&\n+           CompareBigEndian(vch, len, vchZero, 0) > 0 &&\n+           CompareBigEndian(vch, len, half ? vchMaxModHalfOrder : vchMaxModOrder, 32) <= 0;\n+}\n+\n+} // namespace eccrypto"
      },
      {
        "sha": "7740e31db10f3b9e0ca530e334487e7c16b4d9d7",
        "filename": "src/eccryptoverify.h",
        "status": "added",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/900078aeb4088b63ee271e774a00ccd126628528/src/eccryptoverify.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/900078aeb4088b63ee271e774a00ccd126628528/src/eccryptoverify.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/eccryptoverify.h?ref=900078aeb4088b63ee271e774a00ccd126628528",
        "patch": "@@ -0,0 +1,19 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2013 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_EC_CRYPTO_VERIFY_H\n+#define BITCOIN_EC_CRYPTO_VERIFY_H\n+\n+#include <vector>\n+#include <cstdlib>\n+class uint256;\n+\n+namespace eccrypto {\n+\n+bool Check(const unsigned char *vch);\n+bool CheckSignatureElement(const unsigned char *vch, int len, bool half);\n+\n+} // eccrypto namespace\n+#endif"
      },
      {
        "sha": "925b80ba0fcce8d97cc992d0506bdba17d9cfdd4",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 51,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/900078aeb4088b63ee271e774a00ccd126628528/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/900078aeb4088b63ee271e774a00ccd126628528/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=900078aeb4088b63ee271e774a00ccd126628528",
        "patch": "@@ -5,6 +5,7 @@\n #include \"key.h\"\n \n #include \"crypto/sha2.h\"\n+#include \"eccryptoverify.h\"\n #include \"random.h\"\n \n #ifdef USE_SECP256K1\n@@ -30,60 +31,10 @@ class CSecp256k1Init {\n static CSecp256k1Init instance_of_csecp256k1;\n \n #endif\n-\n-int CompareBigEndian(const unsigned char *c1, size_t c1len, const unsigned char *c2, size_t c2len) {\n-    while (c1len > c2len) {\n-        if (*c1)\n-            return 1;\n-        c1++;\n-        c1len--;\n-    }\n-    while (c2len > c1len) {\n-        if (*c2)\n-            return -1;\n-        c2++;\n-        c2len--;\n-    }\n-    while (c1len > 0) {\n-        if (*c1 > *c2)\n-            return 1;\n-        if (*c2 > *c1)\n-            return -1;\n-        c1++;\n-        c2++;\n-        c1len--;\n-    }\n-    return 0;\n-}\n-\n-/** Order of secp256k1's generator minus 1. */\n-const unsigned char vchMaxModOrder[32] = {\n-    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,\n-    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,\n-    0xBA,0xAE,0xDC,0xE6,0xAF,0x48,0xA0,0x3B,\n-    0xBF,0xD2,0x5E,0x8C,0xD0,0x36,0x41,0x40\n-};\n-\n-/** Half of the order of secp256k1's generator minus 1. */\n-const unsigned char vchMaxModHalfOrder[32] = {\n-    0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,\n-    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,\n-    0x5D,0x57,0x6E,0x73,0x57,0xA4,0x50,0x1D,\n-    0xDF,0xE9,0x2F,0x46,0x68,0x1B,0x20,0xA0\n-};\n-\n-const unsigned char vchZero[1] = {0};\n-\n } // anon namespace\n \n bool CKey::Check(const unsigned char *vch) {\n-    return CompareBigEndian(vch, 32, vchZero, 0) > 0 &&\n-           CompareBigEndian(vch, 32, vchMaxModOrder, 32) <= 0;\n-}\n-\n-bool CKey::CheckSignatureElement(const unsigned char *vch, int len, bool half) {\n-    return CompareBigEndian(vch, len, vchZero, 0) > 0 &&\n-           CompareBigEndian(vch, len, half ? vchMaxModHalfOrder : vchMaxModOrder, 32) <= 0;\n+    return eccrypto::Check(vch);\n }\n \n void CKey::MakeNewKey(bool fCompressedIn) {"
      },
      {
        "sha": "e1e242882fb804bd78250c91ab2cf73f2336296e",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/900078aeb4088b63ee271e774a00ccd126628528/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/900078aeb4088b63ee271e774a00ccd126628528/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=900078aeb4088b63ee271e774a00ccd126628528",
        "patch": "@@ -9,6 +9,7 @@\n #include \"crypto/ripemd160.h\"\n #include \"crypto/sha1.h\"\n #include \"crypto/sha2.h\"\n+#include \"eccryptoverify.h\"\n #include \"key.h\"\n #include \"script/script.h\"\n #include \"uint256.h\"\n@@ -122,7 +123,7 @@ bool static IsLowDERSignature(const valtype &vchSig) {\n     // If the S value is above the order of the curve divided by two, its\n     // complement modulo the order could have been used instead, which is\n     // one byte shorter when encoded correctly.\n-    if (!CKey::CheckSignatureElement(S, nLenS, true))\n+    if (!eccrypto::CheckSignatureElement(S, nLenS, true))\n         return error(\"Non-canonical signature: S value is unnecessarily high\");\n \n     return true;"
      }
    ]
  },
  {
    "sha": "78c228c6e5f35b6f2e1917d8677694779f837618",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3OGMyMjhjNmU1ZjM1YjZmMmUxOTE3ZDg2Nzc2OTQ3NzlmODM3NjE4",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-10-28T21:35:24Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-10-31T05:13:07Z"
      },
      "message": "boost: moveonly: move BIP32Hash to hash.h",
      "tree": {
        "sha": "d97155c6a1d16d5083dfd4fa70dd565679e99600",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d97155c6a1d16d5083dfd4fa70dd565679e99600"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/78c228c6e5f35b6f2e1917d8677694779f837618",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78c228c6e5f35b6f2e1917d8677694779f837618",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/78c228c6e5f35b6f2e1917d8677694779f837618",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78c228c6e5f35b6f2e1917d8677694779f837618/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "900078aeb4088b63ee271e774a00ccd126628528",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/900078aeb4088b63ee271e774a00ccd126628528",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/900078aeb4088b63ee271e774a00ccd126628528"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 14,
      "deletions": 12
    },
    "files": [
      {
        "sha": "29376b45aa71e7a2bd0bd2fa50a5da70643f14af",
        "filename": "src/hash.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/78c228c6e5f35b6f2e1917d8677694779f837618/src/hash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/78c228c6e5f35b6f2e1917d8677694779f837618/src/hash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.cpp?ref=78c228c6e5f35b6f2e1917d8677694779f837618",
        "patch": "@@ -63,3 +63,16 @@ unsigned int MurmurHash3(unsigned int nHashSeed, const std::vector<unsigned char\n \n     return h1;\n }\n+\n+void BIP32Hash(const unsigned char chainCode[32], unsigned int nChild, unsigned char header, const unsigned char data[32], unsigned char output[64])\n+{\n+    unsigned char num[4];\n+    num[0] = (nChild >> 24) & 0xFF;\n+    num[1] = (nChild >> 16) & 0xFF;\n+    num[2] = (nChild >>  8) & 0xFF;\n+    num[3] = (nChild >>  0) & 0xFF;\n+    CHMAC_SHA512(chainCode, 32).Write(&header, 1)\n+                               .Write(data, 32)\n+                               .Write(num, 4)\n+                               .Finalize(output);\n+}"
      },
      {
        "sha": "53a7672a8f079c77c52ba92fe4ac922587b47b1b",
        "filename": "src/hash.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/78c228c6e5f35b6f2e1917d8677694779f837618/src/hash.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/78c228c6e5f35b6f2e1917d8677694779f837618/src/hash.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.h?ref=78c228c6e5f35b6f2e1917d8677694779f837618",
        "patch": "@@ -159,4 +159,5 @@ uint256 SerializeHash(const T& obj, int nType=SER_GETHASH, int nVersion=PROTOCOL\n \n unsigned int MurmurHash3(unsigned int nHashSeed, const std::vector<unsigned char>& vDataToHash);\n \n+void BIP32Hash(const unsigned char chainCode[32], unsigned int nChild, unsigned char header, const unsigned char data[32], unsigned char output[64]);\n #endif // BITCOIN_HASH_H"
      },
      {
        "sha": "2369aa252121cf821b10e4b6cbd50c1a651e838b",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 12,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/78c228c6e5f35b6f2e1917d8677694779f837618/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/78c228c6e5f35b6f2e1917d8677694779f837618/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=78c228c6e5f35b6f2e1917d8677694779f837618",
        "patch": "@@ -237,18 +237,6 @@ bool CPubKey::Decompress() {\n     return true;\n }\n \n-void static BIP32Hash(const unsigned char chainCode[32], unsigned int nChild, unsigned char header, const unsigned char data[32], unsigned char output[64]) {\n-    unsigned char num[4];\n-    num[0] = (nChild >> 24) & 0xFF;\n-    num[1] = (nChild >> 16) & 0xFF;\n-    num[2] = (nChild >>  8) & 0xFF;\n-    num[3] = (nChild >>  0) & 0xFF;\n-    CHMAC_SHA512(chainCode, 32).Write(&header, 1)\n-                               .Write(data, 32)\n-                               .Write(num, 4)\n-                               .Finalize(output);\n-}\n-\n bool CKey::Derive(CKey& keyChild, unsigned char ccChild[32], unsigned int nChild, const unsigned char cc[32]) const {\n     assert(IsValid());\n     assert(IsCompressed());"
      }
    ]
  },
  {
    "sha": "d2e74c55bdd8cee6a0cca49aca0e2ab1a182c9b5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMmU3NGM1NWJkZDhjZWU2YTBjY2E0OWFjYTBlMmFiMWExODJjOWI1",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-10-28T21:47:18Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-10-31T05:19:37Z"
      },
      "message": "boost: moveonly: split CPubKey and friends to new files",
      "tree": {
        "sha": "e7b9bb9ee8b0aa0302389cc9d9c6b6e9a78d6836",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e7b9bb9ee8b0aa0302389cc9d9c6b6e9a78d6836"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d2e74c55bdd8cee6a0cca49aca0e2ab1a182c9b5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2e74c55bdd8cee6a0cca49aca0e2ab1a182c9b5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d2e74c55bdd8cee6a0cca49aca0e2ab1a182c9b5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2e74c55bdd8cee6a0cca49aca0e2ab1a182c9b5/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "78c228c6e5f35b6f2e1917d8677694779f837618",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78c228c6e5f35b6f2e1917d8677694779f837618",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/78c228c6e5f35b6f2e1917d8677694779f837618"
      }
    ],
    "stats": {
      "total": 661,
      "additions": 356,
      "deletions": 305
    },
    "files": [
      {
        "sha": "3089b2ff4017e9884f667034394794efd64ac301",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2e74c55bdd8cee6a0cca49aca0e2ab1a182c9b5/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2e74c55bdd8cee6a0cca49aca0e2ab1a182c9b5/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=d2e74c55bdd8cee6a0cca49aca0e2ab1a182c9b5",
        "patch": "@@ -102,6 +102,7 @@ BITCOIN_CORE_H = \\\n   noui.h \\\n   pow.h \\\n   protocol.h \\\n+  pubkey.h \\\n   random.h \\\n   rpcclient.h \\\n   rpcprotocol.h \\\n@@ -228,6 +229,7 @@ libbitcoin_common_a_SOURCES = \\\n   keystore.cpp \\\n   netbase.cpp \\\n   protocol.cpp \\\n+  pubkey.cpp \\\n   script/interpreter.cpp \\\n   script/script.cpp \\\n   script/sigcache.cpp \\"
      },
      {
        "sha": "ee8c4966919f93f1659e6eb771d5e3ce9e2177c4",
        "filename": "src/alert.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2e74c55bdd8cee6a0cca49aca0e2ab1a182c9b5/src/alert.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2e74c55bdd8cee6a0cca49aca0e2ab1a182c9b5/src/alert.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/alert.cpp?ref=d2e74c55bdd8cee6a0cca49aca0e2ab1a182c9b5",
        "patch": "@@ -7,7 +7,7 @@\n \n #include \"chainparams.h\"\n #include \"clientversion.h\"\n-#include \"key.h\"\n+#include \"pubkey.h\"\n #include \"net.h\"\n #include \"timedata.h\"\n #include \"ui_interface.h\""
      },
      {
        "sha": "7cd2d651a18a4489b93d536f744414a404244520",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2e74c55bdd8cee6a0cca49aca0e2ab1a182c9b5/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2e74c55bdd8cee6a0cca49aca0e2ab1a182c9b5/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=d2e74c55bdd8cee6a0cca49aca0e2ab1a182c9b5",
        "patch": "@@ -16,6 +16,7 @@\n \n #include \"chainparams.h\"\n #include \"key.h\"\n+#include \"pubkey.h\"\n #include \"script/script.h\"\n #include \"script/standard.h\"\n "
      },
      {
        "sha": "df8cedaf6afe7e04040a8505f495255dc1e01036",
        "filename": "src/bloom.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2e74c55bdd8cee6a0cca49aca0e2ab1a182c9b5/src/bloom.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2e74c55bdd8cee6a0cca49aca0e2ab1a182c9b5/src/bloom.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.cpp?ref=d2e74c55bdd8cee6a0cca49aca0e2ab1a182c9b5",
        "patch": "@@ -5,6 +5,7 @@\n #include \"bloom.h\"\n \n #include \"core/transaction.h\"\n+#include \"hash.h\"\n #include \"script/script.h\"\n #include \"script/standard.h\"\n #include \"streams.h\""
      },
      {
        "sha": "c47a0f6f8c5bf6ad5e8410cdceefa19dfeff2c8e",
        "filename": "src/compressor.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2e74c55bdd8cee6a0cca49aca0e2ab1a182c9b5/src/compressor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2e74c55bdd8cee6a0cca49aca0e2ab1a182c9b5/src/compressor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compressor.cpp?ref=d2e74c55bdd8cee6a0cca49aca0e2ab1a182c9b5",
        "patch": "@@ -6,7 +6,7 @@\n #include \"compressor.h\"\n \n #include \"hash.h\"\n-#include \"key.h\"\n+#include \"pubkey.h\"\n #include \"script/standard.h\"\n \n bool CScriptCompressor::IsToKeyID(CKeyID &hash) const"
      },
      {
        "sha": "1b539d073a3c521975a226bd328a9302c6830502",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 117,
        "changes": 118,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2e74c55bdd8cee6a0cca49aca0e2ab1a182c9b5/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2e74c55bdd8cee6a0cca49aca0e2ab1a182c9b5/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=d2e74c55bdd8cee6a0cca49aca0e2ab1a182c9b5",
        "patch": "@@ -6,6 +6,7 @@\n \n #include \"crypto/sha2.h\"\n #include \"eccryptoverify.h\"\n+#include \"pubkey.h\"\n #include \"random.h\"\n \n #ifdef USE_SECP256K1\n@@ -167,76 +168,6 @@ bool CKey::Load(CPrivKey &privkey, CPubKey &vchPubKey, bool fSkipCheck=false) {\n     return true;\n }\n \n-bool CPubKey::Verify(const uint256 &hash, const std::vector<unsigned char>& vchSig) const {\n-    if (!IsValid())\n-        return false;\n-#ifdef USE_SECP256K1\n-    if (secp256k1_ecdsa_verify((const unsigned char*)&hash, 32, &vchSig[0], vchSig.size(), begin(), size()) != 1)\n-        return false;\n-#else\n-    CECKey key;\n-    if (!key.SetPubKey(begin(), size()))\n-        return false;\n-    if (!key.Verify(hash, vchSig))\n-        return false;\n-#endif\n-    return true;\n-}\n-\n-bool CPubKey::RecoverCompact(const uint256 &hash, const std::vector<unsigned char>& vchSig) {\n-    if (vchSig.size() != 65)\n-        return false;\n-    int recid = (vchSig[0] - 27) & 3;\n-    bool fComp = ((vchSig[0] - 27) & 4) != 0;\n-#ifdef USE_SECP256K1\n-    int pubkeylen = 65;\n-    if (!secp256k1_ecdsa_recover_compact((const unsigned char*)&hash, 32, &vchSig[1], (unsigned char*)begin(), &pubkeylen, fComp, recid))\n-        return false;\n-    assert((int)size() == pubkeylen);\n-#else\n-    CECKey key;\n-    if (!key.Recover(hash, &vchSig[1], recid))\n-        return false;\n-    std::vector<unsigned char> pubkey;\n-    key.GetPubKey(pubkey, fComp);\n-    Set(pubkey.begin(), pubkey.end());\n-#endif\n-    return true;\n-}\n-\n-bool CPubKey::IsFullyValid() const {\n-    if (!IsValid())\n-        return false;\n-#ifdef USE_SECP256K1\n-    if (!secp256k1_ecdsa_pubkey_verify(begin(), size()))\n-        return false;\n-#else\n-    CECKey key;\n-    if (!key.SetPubKey(begin(), size()))\n-        return false;\n-#endif\n-    return true;\n-}\n-\n-bool CPubKey::Decompress() {\n-    if (!IsValid())\n-        return false;\n-#ifdef USE_SECP256K1\n-    int clen = size();\n-    int ret = secp256k1_ecdsa_pubkey_decompress((unsigned char*)begin(), &clen);\n-    assert(ret);\n-    assert(clen == (int)size());\n-#else\n-    CECKey key;\n-    if (!key.SetPubKey(begin(), size()))\n-        return false;\n-    std::vector<unsigned char> pubkey;\n-    key.GetPubKey(pubkey, false);\n-    Set(pubkey.begin(), pubkey.end());\n-#endif\n-    return true;\n-}\n-\n bool CKey::Derive(CKey& keyChild, unsigned char ccChild[32], unsigned int nChild, const unsigned char cc[32]) const {\n     assert(IsValid());\n     assert(IsCompressed());\n@@ -263,27 +194,6 @@ bool CKey::Derive(CKey& keyChild, unsigned char ccChild[32], unsigned int nChild\n     return ret;\n }\n \n-bool CPubKey::Derive(CPubKey& pubkeyChild, unsigned char ccChild[32], unsigned int nChild, const unsigned char cc[32]) const {\n-    assert(IsValid());\n-    assert((nChild >> 31) == 0);\n-    assert(begin() + 33 == end());\n-    unsigned char out[64];\n-    BIP32Hash(cc, nChild, *begin(), begin()+1, out);\n-    memcpy(ccChild, out+32, 32);\n-#ifdef USE_SECP256K1\n-    pubkeyChild = *this;\n-    bool ret = secp256k1_ecdsa_pubkey_tweak_add((unsigned char*)pubkeyChild.begin(), pubkeyChild.size(), out);\n-#else\n-    CECKey key;\n-    bool ret = key.SetPubKey(begin(), size());\n-    ret &= key.TweakPublic(out);\n-    std::vector<unsigned char> pubkey;\n-    key.GetPubKey(pubkey, true);\n-    pubkeyChild.Set(pubkey.begin(), pubkey.end());\n-#endif\n-    return ret;\n-}\n-\n bool CExtKey::Derive(CExtKey &out, unsigned int nChild) const {\n     out.nDepth = nDepth + 1;\n     CKeyID id = key.GetPubKey().GetID();\n@@ -334,32 +244,6 @@ void CExtKey::Decode(const unsigned char code[74]) {\n     key.Set(code+42, code+74, true);\n }\n \n-void CExtPubKey::Encode(unsigned char code[74]) const {\n-    code[0] = nDepth;\n-    memcpy(code+1, vchFingerprint, 4);\n-    code[5] = (nChild >> 24) & 0xFF; code[6] = (nChild >> 16) & 0xFF;\n-    code[7] = (nChild >>  8) & 0xFF; code[8] = (nChild >>  0) & 0xFF;\n-    memcpy(code+9, vchChainCode, 32);\n-    assert(pubkey.size() == 33);\n-    memcpy(code+41, pubkey.begin(), 33);\n-}\n-\n-void CExtPubKey::Decode(const unsigned char code[74]) {\n-    nDepth = code[0];\n-    memcpy(vchFingerprint, code+1, 4);\n-    nChild = (code[5] << 24) | (code[6] << 16) | (code[7] << 8) | code[8];\n-    memcpy(vchChainCode, code+9, 32);\n-    pubkey.Set(code+41, code+74);\n-}\n-\n-bool CExtPubKey::Derive(CExtPubKey &out, unsigned int nChild) const {\n-    out.nDepth = nDepth + 1;\n-    CKeyID id = pubkey.GetID();\n-    memcpy(&out.vchFingerprint[0], &id, 4);\n-    out.nChild = nChild;\n-    return pubkey.Derive(out.pubkey, out.vchChainCode, nChild, vchChainCode);\n-}\n-\n bool ECC_InitSanityCheck() {\n #ifdef USE_SECP256K1\n     return true;"
      },
      {
        "sha": "b35cf0cad5556ff8159711b46f984c963ccc4414",
        "filename": "src/key.h",
        "status": "modified",
        "additions": 3,
        "deletions": 182,
        "changes": 185,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2e74c55bdd8cee6a0cca49aca0e2ab1a182c9b5/src/key.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2e74c55bdd8cee6a0cca49aca0e2ab1a182c9b5/src/key.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.h?ref=d2e74c55bdd8cee6a0cca49aca0e2ab1a182c9b5",
        "patch": "@@ -7,13 +7,15 @@\n #define BITCOIN_KEY_H\n \n #include \"allocators.h\"\n-#include \"hash.h\"\n #include \"serialize.h\"\n #include \"uint256.h\"\n \n #include <stdexcept>\n #include <vector>\n \n+class CPubKey;\n+class CExtPubKey;\n+\n /** \n  * secp256k1:\n  * const unsigned int PRIVATE_KEY_SIZE = 279;\n@@ -24,169 +26,6 @@\n  * script supports up to 75 for single byte push\n  */\n \n-/** A reference to a CKey: the Hash160 of its serialized public key */\n-class CKeyID : public uint160\n-{\n-public:\n-    CKeyID() : uint160(0) {}\n-    CKeyID(const uint160& in) : uint160(in) {}\n-};\n-\n-/** An encapsulated public key. */\n-class CPubKey\n-{\n-private:\n-\n-    /**\n-     * Just store the serialized data.\n-     * Its length can very cheaply be computed from the first byte.\n-     */\n-    unsigned char vch[65];\n-\n-    //! Compute the length of a pubkey with a given first byte.\n-    unsigned int static GetLen(unsigned char chHeader)\n-    {\n-        if (chHeader == 2 || chHeader == 3)\n-            return 33;\n-        if (chHeader == 4 || chHeader == 6 || chHeader == 7)\n-            return 65;\n-        return 0;\n-    }\n-\n-    //! Set this key data to be invalid\n-    void Invalidate()\n-    {\n-        vch[0] = 0xFF;\n-    }\n-\n-public:\n-    //! Construct an invalid public key.\n-    CPubKey()\n-    {\n-        Invalidate();\n-    }\n-\n-    //! Initialize a public key using begin/end iterators to byte data.\n-    template <typename T>\n-    void Set(const T pbegin, const T pend)\n-    {\n-        int len = pend == pbegin ? 0 : GetLen(pbegin[0]);\n-        if (len && len == (pend - pbegin))\n-            memcpy(vch, (unsigned char*)&pbegin[0], len);\n-        else\n-            Invalidate();\n-    }\n-\n-    //! Construct a public key using begin/end iterators to byte data.\n-    template <typename T>\n-    CPubKey(const T pbegin, const T pend)\n-    {\n-        Set(pbegin, pend);\n-    }\n-\n-    //! Construct a public key from a byte vector.\n-    CPubKey(const std::vector<unsigned char>& vch)\n-    {\n-        Set(vch.begin(), vch.end());\n-    }\n-\n-    //! Simple read-only vector-like interface to the pubkey data.\n-    unsigned int size() const { return GetLen(vch[0]); }\n-    const unsigned char* begin() const { return vch; }\n-    const unsigned char* end() const { return vch + size(); }\n-    const unsigned char& operator[](unsigned int pos) const { return vch[pos]; }\n-\n-    //! Comparator implementation.\n-    friend bool operator==(const CPubKey& a, const CPubKey& b)\n-    {\n-        return a.vch[0] == b.vch[0] &&\n-               memcmp(a.vch, b.vch, a.size()) == 0;\n-    }\n-    friend bool operator!=(const CPubKey& a, const CPubKey& b)\n-    {\n-        return !(a == b);\n-    }\n-    friend bool operator<(const CPubKey& a, const CPubKey& b)\n-    {\n-        return a.vch[0] < b.vch[0] ||\n-               (a.vch[0] == b.vch[0] && memcmp(a.vch, b.vch, a.size()) < 0);\n-    }\n-\n-    //! Implement serialization, as if this was a byte vector.\n-    unsigned int GetSerializeSize(int nType, int nVersion) const\n-    {\n-        return size() + 1;\n-    }\n-    template <typename Stream>\n-    void Serialize(Stream& s, int nType, int nVersion) const\n-    {\n-        unsigned int len = size();\n-        ::WriteCompactSize(s, len);\n-        s.write((char*)vch, len);\n-    }\n-    template <typename Stream>\n-    void Unserialize(Stream& s, int nType, int nVersion)\n-    {\n-        unsigned int len = ::ReadCompactSize(s);\n-        if (len <= 65) {\n-            s.read((char*)vch, len);\n-        } else {\n-            // invalid pubkey, skip available data\n-            char dummy;\n-            while (len--)\n-                s.read(&dummy, 1);\n-            Invalidate();\n-        }\n-    }\n-\n-    //! Get the KeyID of this public key (hash of its serialization)\n-    CKeyID GetID() const\n-    {\n-        return CKeyID(Hash160(vch, vch + size()));\n-    }\n-\n-    //! Get the 256-bit hash of this public key.\n-    uint256 GetHash() const\n-    {\n-        return Hash(vch, vch + size());\n-    }\n-\n-    /*\n-     * Check syntactic correctness.\n-     * \n-     * Note that this is consensus critical as CheckSig() calls it!\n-     */\n-    bool IsValid() const\n-    {\n-        return size() > 0;\n-    }\n-\n-    //! fully validate whether this is a valid public key (more expensive than IsValid())\n-    bool IsFullyValid() const;\n-\n-    //! Check whether this is a compressed public key.\n-    bool IsCompressed() const\n-    {\n-        return size() == 33;\n-    }\n-\n-    /**\n-     * Verify a DER signature (~72 bytes).\n-     * If this public key is not fully valid, the return value will be false.\n-     */\n-    bool Verify(const uint256& hash, const std::vector<unsigned char>& vchSig) const;\n-\n-    //! Recover a public key from a compact signature.\n-    bool RecoverCompact(const uint256& hash, const std::vector<unsigned char>& vchSig);\n-\n-    //! Turn this public key into an uncompressed public key.\n-    bool Decompress();\n-\n-    //! Derive BIP32 child pubkey.\n-    bool Derive(CPubKey& pubkeyChild, unsigned char ccChild[32], unsigned int nChild, const unsigned char cc[32]) const;\n-};\n-\n-\n /**\n  * secure_allocator is defined in allocators.h\n  * CPrivKey is a serialized private key, with all parameters included (279 bytes)\n@@ -304,24 +143,6 @@ class CKey\n     static bool CheckSignatureElement(const unsigned char* vch, int len, bool half);\n };\n \n-struct CExtPubKey {\n-    unsigned char nDepth;\n-    unsigned char vchFingerprint[4];\n-    unsigned int nChild;\n-    unsigned char vchChainCode[32];\n-    CPubKey pubkey;\n-\n-    friend bool operator==(const CExtPubKey& a, const CExtPubKey& b)\n-    {\n-        return a.nDepth == b.nDepth && memcmp(&a.vchFingerprint[0], &b.vchFingerprint[0], 4) == 0 && a.nChild == b.nChild &&\n-               memcmp(&a.vchChainCode[0], &b.vchChainCode[0], 32) == 0 && a.pubkey == b.pubkey;\n-    }\n-\n-    void Encode(unsigned char code[74]) const;\n-    void Decode(const unsigned char code[74]);\n-    bool Derive(CExtPubKey& out, unsigned int nChild) const;\n-};\n-\n struct CExtKey {\n     unsigned char nDepth;\n     unsigned char vchFingerprint[4];"
      },
      {
        "sha": "60502e9a29c9449c94892062134dfab3009bf6c7",
        "filename": "src/keystore.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2e74c55bdd8cee6a0cca49aca0e2ab1a182c9b5/src/keystore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2e74c55bdd8cee6a0cca49aca0e2ab1a182c9b5/src/keystore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.h?ref=d2e74c55bdd8cee6a0cca49aca0e2ab1a182c9b5",
        "patch": "@@ -7,6 +7,7 @@\n #define BITCOIN_KEYSTORE_H\n \n #include \"key.h\"\n+#include \"pubkey.h\"\n #include \"sync.h\"\n \n #include <boost/signals2/signal.hpp>"
      },
      {
        "sha": "3f16a4b4be4cda639c6a1109dede70cb2a999ce9",
        "filename": "src/pubkey.cpp",
        "status": "added",
        "additions": 131,
        "deletions": 0,
        "changes": 131,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2e74c55bdd8cee6a0cca49aca0e2ab1a182c9b5/src/pubkey.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2e74c55bdd8cee6a0cca49aca0e2ab1a182c9b5/src/pubkey.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.cpp?ref=d2e74c55bdd8cee6a0cca49aca0e2ab1a182c9b5",
        "patch": "@@ -0,0 +1,131 @@\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"pubkey.h\"\n+\n+#include \"crypto/sha2.h\"\n+#include \"eccryptoverify.h\"\n+\n+#ifdef USE_SECP256K1\n+#include <secp256k1.h>\n+#else\n+#include \"ecwrapper.h\"\n+#endif\n+\n+bool CPubKey::Verify(const uint256 &hash, const std::vector<unsigned char>& vchSig) const {\n+    if (!IsValid())\n+        return false;\n+#ifdef USE_SECP256K1\n+    if (secp256k1_ecdsa_verify((const unsigned char*)&hash, 32, &vchSig[0], vchSig.size(), begin(), size()) != 1)\n+        return false;\n+#else\n+    CECKey key;\n+    if (!key.SetPubKey(begin(), size()))\n+        return false;\n+    if (!key.Verify(hash, vchSig))\n+        return false;\n+#endif\n+    return true;\n+}\n+\n+bool CPubKey::RecoverCompact(const uint256 &hash, const std::vector<unsigned char>& vchSig) {\n+    if (vchSig.size() != 65)\n+        return false;\n+    int recid = (vchSig[0] - 27) & 3;\n+    bool fComp = ((vchSig[0] - 27) & 4) != 0;\n+#ifdef USE_SECP256K1\n+    int pubkeylen = 65;\n+    if (!secp256k1_ecdsa_recover_compact((const unsigned char*)&hash, 32, &vchSig[1], (unsigned char*)begin(), &pubkeylen, fComp, recid))\n+        return false;\n+    assert((int)size() == pubkeylen);\n+#else\n+    CECKey key;\n+    if (!key.Recover(hash, &vchSig[1], recid))\n+        return false;\n+    std::vector<unsigned char> pubkey;\n+    key.GetPubKey(pubkey, fComp);\n+    Set(pubkey.begin(), pubkey.end());\n+#endif\n+    return true;\n+}\n+\n+bool CPubKey::IsFullyValid() const {\n+    if (!IsValid())\n+        return false;\n+#ifdef USE_SECP256K1\n+    if (!secp256k1_ecdsa_pubkey_verify(begin(), size()))\n+        return false;\n+#else\n+    CECKey key;\n+    if (!key.SetPubKey(begin(), size()))\n+        return false;\n+#endif\n+    return true;\n+}\n+\n+bool CPubKey::Decompress() {\n+    if (!IsValid())\n+        return false;\n+#ifdef USE_SECP256K1\n+    int clen = size();\n+    int ret = secp256k1_ecdsa_pubkey_decompress((unsigned char*)begin(), &clen);\n+    assert(ret);\n+    assert(clen == (int)size());\n+#else\n+    CECKey key;\n+    if (!key.SetPubKey(begin(), size()))\n+        return false;\n+    std::vector<unsigned char> pubkey;\n+    key.GetPubKey(pubkey, false);\n+    Set(pubkey.begin(), pubkey.end());\n+#endif\n+    return true;\n+}\n+\n+bool CPubKey::Derive(CPubKey& pubkeyChild, unsigned char ccChild[32], unsigned int nChild, const unsigned char cc[32]) const {\n+    assert(IsValid());\n+    assert((nChild >> 31) == 0);\n+    assert(begin() + 33 == end());\n+    unsigned char out[64];\n+    BIP32Hash(cc, nChild, *begin(), begin()+1, out);\n+    memcpy(ccChild, out+32, 32);\n+#ifdef USE_SECP256K1\n+    pubkeyChild = *this;\n+    bool ret = secp256k1_ecdsa_pubkey_tweak_add((unsigned char*)pubkeyChild.begin(), pubkeyChild.size(), out);\n+#else\n+    CECKey key;\n+    bool ret = key.SetPubKey(begin(), size());\n+    ret &= key.TweakPublic(out);\n+    std::vector<unsigned char> pubkey;\n+    key.GetPubKey(pubkey, true);\n+    pubkeyChild.Set(pubkey.begin(), pubkey.end());\n+#endif\n+    return ret;\n+}\n+\n+void CExtPubKey::Encode(unsigned char code[74]) const {\n+    code[0] = nDepth;\n+    memcpy(code+1, vchFingerprint, 4);\n+    code[5] = (nChild >> 24) & 0xFF; code[6] = (nChild >> 16) & 0xFF;\n+    code[7] = (nChild >>  8) & 0xFF; code[8] = (nChild >>  0) & 0xFF;\n+    memcpy(code+9, vchChainCode, 32);\n+    assert(pubkey.size() == 33);\n+    memcpy(code+41, pubkey.begin(), 33);\n+}\n+\n+void CExtPubKey::Decode(const unsigned char code[74]) {\n+    nDepth = code[0];\n+    memcpy(vchFingerprint, code+1, 4);\n+    nChild = (code[5] << 24) | (code[6] << 16) | (code[7] << 8) | code[8];\n+    memcpy(vchChainCode, code+9, 32);\n+    pubkey.Set(code+41, code+74);\n+}\n+\n+bool CExtPubKey::Derive(CExtPubKey &out, unsigned int nChild) const {\n+    out.nDepth = nDepth + 1;\n+    CKeyID id = pubkey.GetID();\n+    memcpy(&out.vchFingerprint[0], &id, 4);\n+    out.nChild = nChild;\n+    return pubkey.Derive(out.pubkey, out.vchChainCode, nChild, vchChainCode);\n+}"
      },
      {
        "sha": "ccf96734536778b900d2e860d8241b606ce769f4",
        "filename": "src/pubkey.h",
        "status": "added",
        "additions": 206,
        "deletions": 0,
        "changes": 206,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2e74c55bdd8cee6a0cca49aca0e2ab1a182c9b5/src/pubkey.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2e74c55bdd8cee6a0cca49aca0e2ab1a182c9b5/src/pubkey.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.h?ref=d2e74c55bdd8cee6a0cca49aca0e2ab1a182c9b5",
        "patch": "@@ -0,0 +1,206 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2013 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_PUBKEY_H\n+#define BITCOIN_PUBKEY_H\n+\n+#include \"hash.h\"\n+#include \"serialize.h\"\n+#include \"uint256.h\"\n+\n+#include <stdexcept>\n+#include <vector>\n+\n+/** \n+ * secp256k1:\n+ * const unsigned int PRIVATE_KEY_SIZE = 279;\n+ * const unsigned int PUBLIC_KEY_SIZE  = 65;\n+ * const unsigned int SIGNATURE_SIZE   = 72;\n+ *\n+ * see www.keylength.com\n+ * script supports up to 75 for single byte push\n+ */\n+\n+/** A reference to a CKey: the Hash160 of its serialized public key */\n+class CKeyID : public uint160\n+{\n+public:\n+    CKeyID() : uint160(0) {}\n+    CKeyID(const uint160& in) : uint160(in) {}\n+};\n+\n+/** An encapsulated public key. */\n+class CPubKey\n+{\n+private:\n+\n+    /**\n+     * Just store the serialized data.\n+     * Its length can very cheaply be computed from the first byte.\n+     */\n+    unsigned char vch[65];\n+\n+    //! Compute the length of a pubkey with a given first byte.\n+    unsigned int static GetLen(unsigned char chHeader)\n+    {\n+        if (chHeader == 2 || chHeader == 3)\n+            return 33;\n+        if (chHeader == 4 || chHeader == 6 || chHeader == 7)\n+            return 65;\n+        return 0;\n+    }\n+\n+    //! Set this key data to be invalid\n+    void Invalidate()\n+    {\n+        vch[0] = 0xFF;\n+    }\n+\n+public:\n+    //! Construct an invalid public key.\n+    CPubKey()\n+    {\n+        Invalidate();\n+    }\n+\n+    //! Initialize a public key using begin/end iterators to byte data.\n+    template <typename T>\n+    void Set(const T pbegin, const T pend)\n+    {\n+        int len = pend == pbegin ? 0 : GetLen(pbegin[0]);\n+        if (len && len == (pend - pbegin))\n+            memcpy(vch, (unsigned char*)&pbegin[0], len);\n+        else\n+            Invalidate();\n+    }\n+\n+    //! Construct a public key using begin/end iterators to byte data.\n+    template <typename T>\n+    CPubKey(const T pbegin, const T pend)\n+    {\n+        Set(pbegin, pend);\n+    }\n+\n+    //! Construct a public key from a byte vector.\n+    CPubKey(const std::vector<unsigned char>& vch)\n+    {\n+        Set(vch.begin(), vch.end());\n+    }\n+\n+    //! Simple read-only vector-like interface to the pubkey data.\n+    unsigned int size() const { return GetLen(vch[0]); }\n+    const unsigned char* begin() const { return vch; }\n+    const unsigned char* end() const { return vch + size(); }\n+    const unsigned char& operator[](unsigned int pos) const { return vch[pos]; }\n+\n+    //! Comparator implementation.\n+    friend bool operator==(const CPubKey& a, const CPubKey& b)\n+    {\n+        return a.vch[0] == b.vch[0] &&\n+               memcmp(a.vch, b.vch, a.size()) == 0;\n+    }\n+    friend bool operator!=(const CPubKey& a, const CPubKey& b)\n+    {\n+        return !(a == b);\n+    }\n+    friend bool operator<(const CPubKey& a, const CPubKey& b)\n+    {\n+        return a.vch[0] < b.vch[0] ||\n+               (a.vch[0] == b.vch[0] && memcmp(a.vch, b.vch, a.size()) < 0);\n+    }\n+\n+    //! Implement serialization, as if this was a byte vector.\n+    unsigned int GetSerializeSize(int nType, int nVersion) const\n+    {\n+        return size() + 1;\n+    }\n+    template <typename Stream>\n+    void Serialize(Stream& s, int nType, int nVersion) const\n+    {\n+        unsigned int len = size();\n+        ::WriteCompactSize(s, len);\n+        s.write((char*)vch, len);\n+    }\n+    template <typename Stream>\n+    void Unserialize(Stream& s, int nType, int nVersion)\n+    {\n+        unsigned int len = ::ReadCompactSize(s);\n+        if (len <= 65) {\n+            s.read((char*)vch, len);\n+        } else {\n+            // invalid pubkey, skip available data\n+            char dummy;\n+            while (len--)\n+                s.read(&dummy, 1);\n+            Invalidate();\n+        }\n+    }\n+\n+    //! Get the KeyID of this public key (hash of its serialization)\n+    CKeyID GetID() const\n+    {\n+        return CKeyID(Hash160(vch, vch + size()));\n+    }\n+\n+    //! Get the 256-bit hash of this public key.\n+    uint256 GetHash() const\n+    {\n+        return Hash(vch, vch + size());\n+    }\n+\n+    /*\n+     * Check syntactic correctness.\n+     * \n+     * Note that this is consensus critical as CheckSig() calls it!\n+     */\n+    bool IsValid() const\n+    {\n+        return size() > 0;\n+    }\n+\n+    //! fully validate whether this is a valid public key (more expensive than IsValid())\n+    bool IsFullyValid() const;\n+\n+    //! Check whether this is a compressed public key.\n+    bool IsCompressed() const\n+    {\n+        return size() == 33;\n+    }\n+\n+    /**\n+     * Verify a DER signature (~72 bytes).\n+     * If this public key is not fully valid, the return value will be false.\n+     */\n+    bool Verify(const uint256& hash, const std::vector<unsigned char>& vchSig) const;\n+\n+    //! Recover a public key from a compact signature.\n+    bool RecoverCompact(const uint256& hash, const std::vector<unsigned char>& vchSig);\n+\n+    //! Turn this public key into an uncompressed public key.\n+    bool Decompress();\n+\n+    //! Derive BIP32 child pubkey.\n+    bool Derive(CPubKey& pubkeyChild, unsigned char ccChild[32], unsigned int nChild, const unsigned char cc[32]) const;\n+};\n+\n+struct CExtPubKey {\n+    unsigned char nDepth;\n+    unsigned char vchFingerprint[4];\n+    unsigned int nChild;\n+    unsigned char vchChainCode[32];\n+    CPubKey pubkey;\n+\n+    friend bool operator==(const CExtPubKey& a, const CExtPubKey& b)\n+    {\n+        return a.nDepth == b.nDepth && memcmp(&a.vchFingerprint[0], &b.vchFingerprint[0], 4) == 0 && a.nChild == b.nChild &&\n+               memcmp(&a.vchChainCode[0], &b.vchChainCode[0], 32) == 0 && a.pubkey == b.pubkey;\n+    }\n+\n+    void Encode(unsigned char code[74]) const;\n+    void Decode(const unsigned char code[74]);\n+    bool Derive(CExtPubKey& out, unsigned int nChild) const;\n+};\n+\n+#endif // BITCOIN_PUBKEY_H"
      },
      {
        "sha": "54c2847f79acbb4941b19c8d61a610d3198025e4",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2e74c55bdd8cee6a0cca49aca0e2ab1a182c9b5/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2e74c55bdd8cee6a0cca49aca0e2ab1a182c9b5/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=d2e74c55bdd8cee6a0cca49aca0e2ab1a182c9b5",
        "patch": "@@ -10,7 +10,7 @@\n #include \"crypto/sha1.h\"\n #include \"crypto/sha2.h\"\n #include \"eccryptoverify.h\"\n-#include \"key.h\"\n+#include \"pubkey.h\"\n #include \"script/script.h\"\n #include \"uint256.h\"\n #include \"util.h\""
      },
      {
        "sha": "d76a5acd6366725c5382545ea139f152ded86735",
        "filename": "src/script/sigcache.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2e74c55bdd8cee6a0cca49aca0e2ab1a182c9b5/src/script/sigcache.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2e74c55bdd8cee6a0cca49aca0e2ab1a182c9b5/src/script/sigcache.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sigcache.cpp?ref=d2e74c55bdd8cee6a0cca49aca0e2ab1a182c9b5",
        "patch": "@@ -5,7 +5,7 @@\n \n #include \"sigcache.h\"\n \n-#include \"key.h\"\n+#include \"pubkey.h\"\n #include \"random.h\"\n #include \"uint256.h\"\n #include \"util.h\""
      },
      {
        "sha": "9cae0508e146e53ff1b452ad18a5bbf55620cbce",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2e74c55bdd8cee6a0cca49aca0e2ab1a182c9b5/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2e74c55bdd8cee6a0cca49aca0e2ab1a182c9b5/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=d2e74c55bdd8cee6a0cca49aca0e2ab1a182c9b5",
        "patch": "@@ -5,6 +5,7 @@\n \n #include \"script/standard.h\"\n \n+#include \"pubkey.h\"\n #include \"script/script.h\"\n #include \"util.h\"\n #include \"utilstrencodings.h\""
      },
      {
        "sha": "171178ce3d74a07b97175afbbf98fbf45d7fe8c1",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2e74c55bdd8cee6a0cca49aca0e2ab1a182c9b5/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2e74c55bdd8cee6a0cca49aca0e2ab1a182c9b5/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=d2e74c55bdd8cee6a0cca49aca0e2ab1a182c9b5",
        "patch": "@@ -6,15 +6,15 @@\n #ifndef H_BITCOIN_SCRIPT_STANDARD\n #define H_BITCOIN_SCRIPT_STANDARD\n \n-#include \"key.h\"\n-#include \"script/script.h\"\n+#include \"uint256.h\"\n #include \"script/interpreter.h\"\n \n #include <boost/variant.hpp>\n \n #include <stdint.h>\n \n class CScript;\n+class CKeyID;\n \n /** A reference to a CScript: the Hash160 of its serialization (see script.h) */\n class CScriptID : public uint160"
      },
      {
        "sha": "fa10ca1298b30629d5cb671bbcbbb3d3c68bb379",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2e74c55bdd8cee6a0cca49aca0e2ab1a182c9b5/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2e74c55bdd8cee6a0cca49aca0e2ab1a182c9b5/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=d2e74c55bdd8cee6a0cca49aca0e2ab1a182c9b5",
        "patch": "@@ -4,6 +4,7 @@\n \n #include \"main.h\"\n #include \"miner.h\"\n+#include \"pubkey.h\"\n #include \"uint256.h\"\n #include \"util.h\"\n "
      },
      {
        "sha": "5bf0862c714ab66e87966d8ac15209ff5594e309",
        "filename": "src/test/sigopcount_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2e74c55bdd8cee6a0cca49aca0e2ab1a182c9b5/src/test/sigopcount_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2e74c55bdd8cee6a0cca49aca0e2ab1a182c9b5/src/test/sigopcount_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sigopcount_tests.cpp?ref=d2e74c55bdd8cee6a0cca49aca0e2ab1a182c9b5",
        "patch": "@@ -2,6 +2,7 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"pubkey.h\"\n #include \"key.h\"\n #include \"script/script.h\"\n #include \"script/standard.h\""
      },
      {
        "sha": "05dc40aaee579e1dbe34b90c9e6391d51414e636",
        "filename": "src/wallet_ismine.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2e74c55bdd8cee6a0cca49aca0e2ab1a182c9b5/src/wallet_ismine.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2e74c55bdd8cee6a0cca49aca0e2ab1a182c9b5/src/wallet_ismine.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet_ismine.cpp?ref=d2e74c55bdd8cee6a0cca49aca0e2ab1a182c9b5",
        "patch": "@@ -7,6 +7,7 @@\n \n #include \"key.h\"\n #include \"keystore.h\"\n+#include \"script/script.h\"\n #include \"script/standard.h\"\n \n #include <boost/foreach.hpp>"
      }
    ]
  }
]