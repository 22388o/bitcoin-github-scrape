luke-jr,2012-01-03T08:00:48Z,would be much nicer if you just typedef std::vector<char> vector_type; :P\n,https://github.com/bitcoin/bitcoin/pull/740#issuecomment-3337214,3337214,
TheBlueMatt,2012-01-03T08:04:26Z,"I prefer it the other way, but meh I dont care; changed.\n",https://github.com/bitcoin/bitcoin/pull/740#issuecomment-3337231,3337231,
gmaxwell,2012-01-03T08:07:16Z,"well, ... 1000x is perhaps an exaggeration. More like 40-50x or so.   A _complete chain_ syncup here took 29 minutes on code with all the mlock removed. On the same system syncing to about height 37k took three and a half hours earlier today.  I'm not patient enough to benchmark a complete chain syncup without the fix, though perhaps someone else will.\n\nThis problem was really tricky to find— op",https://github.com/bitcoin/bitcoin/pull/740#issuecomment-3337245,3337245,
gavinandresen,2012-01-03T15:42:55Z,"Error compiling, compiler version problem?\n\ni686-apple-darwin10-llvm-g++-4.2 (GCC) 4.2.1 (Based on Apple Inc. build 5658) (LLVM build 2335.6)\n\nserialize.h:872: error: ‘CDataStream::CDataStream(const std::vector<char, std::allocator<char> >&, int, int)’ cannot be overloaded\nserialize.h:867: error: with ‘CDataStream::CDataStream(const std::vector<char, std::allocator<char> >&, int, int)’\n\nAls",https://github.com/bitcoin/bitcoin/pull/740#issuecomment-3341417,3341417,
sipa,2012-01-03T15:54:11Z,"Same error here, on Ubuntu. I'm also in favor of keeping the zeroing functionality, even for non-mlocked allocations.\n",https://github.com/bitcoin/bitcoin/pull/740#issuecomment-3341582,3341582,
gmaxwell,2012-01-03T16:01:25Z,"Boost apparently does have an allocator, which you can override how it gets memory:  http://www.boost.org/doc/libs/1_47_0/libs/pool/doc/interfaces/user_allocator.html\nIf we want to be properly security paranoid, and we're using a specialized allocator, we could potentially add canary functionality just like the stack protection in addition to the zeroize. I'd have to dump the allocator usage data",https://github.com/bitcoin/bitcoin/pull/740#issuecomment-3341703,3341703,
TheBlueMatt,2012-01-03T18:43:44Z,"Fixed (I need to stop coding so late, probably also why I didnt catch this bug before I included it in my encryption pull...)\nMy 2 cents (well, ok more like 1): use-after-free exploits are so rare its almost not worth doing the freeing.  When you combine that with the fact that the item in question is a std::vector, not a class, I would argue its even less of an issue.  If someone wants to use th",https://github.com/bitcoin/bitcoin/pull/740#issuecomment-3344150,3344150,
TheBlueMatt,2012-01-03T19:07:31Z,"Oops more to fix( I had to board and didn't have time to test it) I'll fix it when I'm in the air and have wifi\n\ngmaxwell reply@reply.github.com wrote:\n\n> Boost apparently does have an allocator, which you can override how it\n> gets memory: \n> http://www.boost.org/doc/libs/1_47_0/libs/pool/doc/interfaces/user_allocator.html\n> If we want to be properly security paranoid, and we're using a\n>",https://github.com/bitcoin/bitcoin/pull/740#issuecomment-3344492,3344492,
TheBlueMatt,2012-01-04T07:50:42Z,Actually fixed in that commit.\n,https://github.com/bitcoin/bitcoin/pull/740#issuecomment-3351576,3351576,
laanwj,2012-01-04T10:53:18Z,"ACK, this is great :)\n",https://github.com/bitcoin/bitcoin/pull/740#issuecomment-3353097,3353097,
gavinandresen,2012-01-04T15:49:34Z,"I love the performance improvement, but I still don't like the elimination of zero-after-free. Security in depth is important.\n\nHere's the danger:\n\nAttacker finds a remotely-exploitable buffer overrun somewhere in the networking code that crashes the process.\nThey turn the crash into a full remote exploit by sending carefully constructed packets before the crash packet, to initialize used-but",https://github.com/bitcoin/bitcoin/pull/740#issuecomment-3356239,3356239,
gmaxwell,2012-01-04T16:09:40Z,"The performance difference from avoiding the zeroization doesn't appear to be huge: It saves about 30 seconds out of a 30 minute full sync (compared to not zeroizing).\n\nChart showing all mlocks gone, vs bluematt's patch: http://people.xiph.org/~greg/bitcoin-sync.png  The bluematt patch gets a late start due to the time spent filling the keypool, but because its a bit faster it eventually catches",https://github.com/bitcoin/bitcoin/pull/740#issuecomment-3356541,3356541,
TheBlueMatt,2012-01-04T19:04:49Z,"I was thinking it would make more of a performance difference, but as long as its very minor, I just made it zero_after_free.\n",https://github.com/bitcoin/bitcoin/pull/740#issuecomment-3359285,3359285,
gmaxwell,2012-01-04T19:10:56Z,BlueMatt: I don't think you should have to provide a allocate(). Though maybe it's fine to leave it in case we convert it into a canary allocator. \n,https://github.com/bitcoin/bitcoin/pull/740#issuecomment-3359368,3359368,
sipa,2012-01-04T22:49:11Z,ACK\n,https://github.com/bitcoin/bitcoin/pull/740#issuecomment-3362592,3362592,
TheBlueMatt,2012-01-05T00:46:47Z,"@gmaxwell heh, of course...maybe I just need to give up programming at this point...\n",https://github.com/bitcoin/bitcoin/pull/740#issuecomment-3363921,3363921,
gmaxwell,2012-01-05T04:01:21Z,ACK\n,https://github.com/bitcoin/bitcoin/pull/740#issuecomment-3365334,3365334,
