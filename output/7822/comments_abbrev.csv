MarcoFalke,2016-04-06T16:01:42Z,"Thanks, Concept ACK.\n",https://github.com/bitcoin/bitcoin/pull/7822#issuecomment-206441885,206441885,
laanwj,2016-04-14T14:24:54Z,"I'm a bit divided whether I should propose to add this into the wallet test, which already uses `listunspent`. This currently adds some startup/teardown overhead (test takes ~9 seconds) just to test one call.\nI don't feel strongly about that though.\nWhat do you think @MarcoFalke?\n",https://github.com/bitcoin/bitcoin/pull/7822#issuecomment-209968490,209968490,
MarcoFalke,2016-04-15T08:34:30Z,> startup/teardown overhead\n\nI think such overhead is rather small. (Note that disablewallet.py runs in less than a second)\n\nThe overhead probably is caused by setting up the bidirectional connections and sync_all() calls.\n\nI have not yet looked closely at the test (I try to avoid large diffs right now in the /qa subfolder as each patch may or may not silently conflict with the python3 refac,https://github.com/bitcoin/bitcoin/pull/7822#issuecomment-210360129,210360129,
joaopaulofonseca,2016-04-15T08:48:28Z,@MarcoFalke and @laanwj yes that makes sense. I will try to squash this verifications into `wallet.py`.\n,https://github.com/bitcoin/bitcoin/pull/7822#issuecomment-210368015,210368015,
joaopaulofonseca,2016-04-18T14:18:43Z,"@MarcoFalke, after checking that `wallet.py` already covers some of the tests for listuspent(), I discarded the separate test file and merged the tests regarding the import of bitcoin addresses and private keys into `wallet.py`. The test execution time should remain the same.\n",https://github.com/bitcoin/bitcoin/pull/7822#issuecomment-211400679,211400679,
MarcoFalke,2016-04-18T19:03:28Z,Thanks. Looks better now.\n\nutACK 3b2eedc\n,https://github.com/bitcoin/bitcoin/pull/7822#issuecomment-211531744,211531744,
joaopaulofonseca,2016-04-19T11:37:02Z,"Moved `assert_array_result()` to `test_framework/util.py`.\n\nI noticed that the previous method on `receivedby.py` had a bug when using the flag `should_not_find`. \nIf the flag is set to True, the validation wouldn't work correctly when the values passed as `to_match` are indeed found inside `object_array`, and no assertion is raised.\n",https://github.com/bitcoin/bitcoin/pull/7822#issuecomment-211870340,211870340,
laanwj,2016-04-19T12:57:55Z,utACK 5d217de\n,https://github.com/bitcoin/bitcoin/pull/7822#issuecomment-211913746,211913746,
MarcoFalke,2016-04-06T15:57:26Z,Nit: typo\n,https://github.com/bitcoin/bitcoin/pull/7822#discussion_r58731933,58731933,qa/rpc-tests/listunspent.py
MarcoFalke,2016-04-06T15:59:14Z,You may want to try `assert_raises` instead.\n,https://github.com/bitcoin/bitcoin/pull/7822#discussion_r58732261,58732261,qa/rpc-tests/listunspent.py
MarcoFalke,2016-04-06T16:00:04Z,Please use py3 syntax here: `as e:`\n,https://github.com/bitcoin/bitcoin/pull/7822#discussion_r58732375,58732375,qa/rpc-tests/listunspent.py
MarcoFalke,2016-04-06T16:01:29Z,Nit: No need to shadow the original exception. You can just remove the try-except block altogether and only leave the sendtoaddress\n,https://github.com/bitcoin/bitcoin/pull/7822#discussion_r58732622,58732622,qa/rpc-tests/listunspent.py
joaopaulofonseca,2016-04-06T17:31:21Z,Thanks for the tips. Fixed and rebased.\n,https://github.com/bitcoin/bitcoin/pull/7822#discussion_r58747552,58747552,qa/rpc-tests/listunspent.py
MarcoFalke,2016-04-18T19:04:49Z,"If you copied this function from elsewhere, wouldn't it make sense to _move_ it instead to `test_framework/util.py`, so the utility function can be used in other tests as well?\n",https://github.com/bitcoin/bitcoin/pull/7822#discussion_r60115815,60115815,qa/rpc-tests/wallet.py
joaopaulofonseca,2016-04-18T21:26:44Z,Indeed.. It is used by multiple tests. I think it comes in handy for current and future test cases. If you guys agree I guess this could be moved to `test_framework/util.py` to be reused whenever needed..\n,https://github.com/bitcoin/bitcoin/pull/7822#discussion_r60137297,60137297,qa/rpc-tests/wallet.py
MarcoFalke,2016-04-18T22:21:48Z,"Sure, go ahead.\n",https://github.com/bitcoin/bitcoin/pull/7822#discussion_r60144781,60144781,qa/rpc-tests/wallet.py
laanwj,2016-04-19T09:21:34Z,Do you intend to do so in this pull? If so I'll wait with merging.\n,https://github.com/bitcoin/bitcoin/pull/7822#discussion_r60198058,60198058,qa/rpc-tests/wallet.py
joaopaulofonseca,2016-04-19T10:14:25Z,"Yes, since we are on this topic.\n",https://github.com/bitcoin/bitcoin/pull/7822#discussion_r60205634,60205634,qa/rpc-tests/wallet.py
