[
  {
    "sha": "fa942c755ab513829dcab27487ba1e7ab5a806ee",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTk0MmM3NTVhYjUxMzgyOWRjYWIyNzQ4N2JhMWU3YWI1YTgwNmVl",
    "commit": {
      "author": {
        "name": "Joao Fonseca",
        "email": "jpdf.fonseca@gmail.com",
        "date": "2016-04-19T11:22:11Z"
      },
      "committer": {
        "name": "Joao Fonseca",
        "email": "jpdf.fonseca@gmail.com",
        "date": "2016-04-19T11:29:19Z"
      },
      "message": "Move method to check matches within arrays on util.py",
      "tree": {
        "sha": "0cc57391104a3c1c1e0aea1a937a8565160a0548",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0cc57391104a3c1c1e0aea1a937a8565160a0548"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa942c755ab513829dcab27487ba1e7ab5a806ee",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa942c755ab513829dcab27487ba1e7ab5a806ee",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa942c755ab513829dcab27487ba1e7ab5a806ee",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa942c755ab513829dcab27487ba1e7ab5a806ee/comments",
    "author": {
      "login": "joaopaulofonseca",
      "id": 16206754,
      "node_id": "MDQ6VXNlcjE2MjA2NzU0",
      "avatar_url": "https://avatars.githubusercontent.com/u/16206754?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/joaopaulofonseca",
      "html_url": "https://github.com/joaopaulofonseca",
      "followers_url": "https://api.github.com/users/joaopaulofonseca/followers",
      "following_url": "https://api.github.com/users/joaopaulofonseca/following{/other_user}",
      "gists_url": "https://api.github.com/users/joaopaulofonseca/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/joaopaulofonseca/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/joaopaulofonseca/subscriptions",
      "organizations_url": "https://api.github.com/users/joaopaulofonseca/orgs",
      "repos_url": "https://api.github.com/users/joaopaulofonseca/repos",
      "events_url": "https://api.github.com/users/joaopaulofonseca/events{/privacy}",
      "received_events_url": "https://api.github.com/users/joaopaulofonseca/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "joaopaulofonseca",
      "id": 16206754,
      "node_id": "MDQ6VXNlcjE2MjA2NzU0",
      "avatar_url": "https://avatars.githubusercontent.com/u/16206754?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/joaopaulofonseca",
      "html_url": "https://github.com/joaopaulofonseca",
      "followers_url": "https://api.github.com/users/joaopaulofonseca/followers",
      "following_url": "https://api.github.com/users/joaopaulofonseca/following{/other_user}",
      "gists_url": "https://api.github.com/users/joaopaulofonseca/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/joaopaulofonseca/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/joaopaulofonseca/subscriptions",
      "organizations_url": "https://api.github.com/users/joaopaulofonseca/orgs",
      "repos_url": "https://api.github.com/users/joaopaulofonseca/repos",
      "events_url": "https://api.github.com/users/joaopaulofonseca/events{/privacy}",
      "received_events_url": "https://api.github.com/users/joaopaulofonseca/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "187186b0fe039010ea4b81edb671b9bdfc63d29a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/187186b0fe039010ea4b81edb671b9bdfc63d29a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/187186b0fe039010ea4b81edb671b9bdfc63d29a"
      }
    ],
    "stats": {
      "total": 206,
      "additions": 61,
      "deletions": 145
    },
    "files": [
      {
        "sha": "e2a839f71892474ceb07f90b380db2bf0d761dab",
        "filename": "qa/rpc-tests/getblocktemplate_longpoll.py",
        "status": "modified",
        "additions": 0,
        "deletions": 22,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa942c755ab513829dcab27487ba1e7ab5a806ee/qa/rpc-tests/getblocktemplate_longpoll.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa942c755ab513829dcab27487ba1e7ab5a806ee/qa/rpc-tests/getblocktemplate_longpoll.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/getblocktemplate_longpoll.py?ref=fa942c755ab513829dcab27487ba1e7ab5a806ee",
        "patch": "@@ -6,28 +6,6 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n \n-\n-def check_array_result(object_array, to_match, expected):\n-    \"\"\"\n-    Pass in array of JSON objects, a dictionary with key/value pairs\n-    to match against, and another dictionary with expected key/value\n-    pairs.\n-    \"\"\"\n-    num_matched = 0\n-    for item in object_array:\n-        all_match = True\n-        for key,value in to_match.items():\n-            if item[key] != value:\n-                all_match = False\n-        if not all_match:\n-            continue\n-        for key,value in expected.items():\n-            if item[key] != value:\n-                raise AssertionError(\"%s : expected %s=%s\"%(str(item), str(key), str(value)))\n-            num_matched = num_matched+1\n-    if num_matched == 0:\n-        raise AssertionError(\"No objects matched %s\"%(str(to_match)))\n-\n import threading\n \n class LongpollThread(threading.Thread):"
      },
      {
        "sha": "be119031baf0b46086d0b4cf4fc4f9e54b96528e",
        "filename": "qa/rpc-tests/getblocktemplate_proposals.py",
        "status": "modified",
        "additions": 0,
        "deletions": 22,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa942c755ab513829dcab27487ba1e7ab5a806ee/qa/rpc-tests/getblocktemplate_proposals.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa942c755ab513829dcab27487ba1e7ab5a806ee/qa/rpc-tests/getblocktemplate_proposals.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/getblocktemplate_proposals.py?ref=fa942c755ab513829dcab27487ba1e7ab5a806ee",
        "patch": "@@ -10,28 +10,6 @@\n from hashlib import sha256\n from struct import pack\n \n-\n-def check_array_result(object_array, to_match, expected):\n-    \"\"\"\n-    Pass in array of JSON objects, a dictionary with key/value pairs\n-    to match against, and another dictionary with expected key/value\n-    pairs.\n-    \"\"\"\n-    num_matched = 0\n-    for item in object_array:\n-        all_match = True\n-        for key,value in to_match.items():\n-            if item[key] != value:\n-                all_match = False\n-        if not all_match:\n-            continue\n-        for key,value in expected.items():\n-            if item[key] != value:\n-                raise AssertionError(\"%s : expected %s=%s\"%(str(item), str(key), str(value)))\n-            num_matched = num_matched+1\n-    if num_matched == 0:\n-        raise AssertionError(\"No objects matched %s\"%(str(to_match)))\n-\n def b2x(b):\n     return b2a_hex(b).decode('ascii')\n "
      },
      {
        "sha": "b86c085e0009e2a2c401dbbca5d5393a2ff3817d",
        "filename": "qa/rpc-tests/keypool.py",
        "status": "modified",
        "additions": 0,
        "deletions": 22,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa942c755ab513829dcab27487ba1e7ab5a806ee/qa/rpc-tests/keypool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa942c755ab513829dcab27487ba1e7ab5a806ee/qa/rpc-tests/keypool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/keypool.py?ref=fa942c755ab513829dcab27487ba1e7ab5a806ee",
        "patch": "@@ -10,28 +10,6 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n \n-\n-def check_array_result(object_array, to_match, expected):\n-    \"\"\"\n-    Pass in array of JSON objects, a dictionary with key/value pairs\n-    to match against, and another dictionary with expected key/value\n-    pairs.\n-    \"\"\"\n-    num_matched = 0\n-    for item in object_array:\n-        all_match = True\n-        for key,value in to_match.items():\n-            if item[key] != value:\n-                all_match = False\n-        if not all_match:\n-            continue\n-        for key,value in expected.items():\n-            if item[key] != value:\n-                raise AssertionError(\"%s : expected %s=%s\"%(str(item), str(key), str(value)))\n-            num_matched = num_matched+1\n-    if num_matched == 0:\n-        raise AssertionError(\"No objects matched %s\"%(str(to_match)))\n-\n class KeyPoolTest(BitcoinTestFramework):\n \n     def run_test(self):"
      },
      {
        "sha": "4e5809f4a77d86abf41a8b6470c5d932af6e52b2",
        "filename": "qa/rpc-tests/listtransactions.py",
        "status": "modified",
        "additions": 25,
        "deletions": 46,
        "changes": 71,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa942c755ab513829dcab27487ba1e7ab5a806ee/qa/rpc-tests/listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa942c755ab513829dcab27487ba1e7ab5a806ee/qa/rpc-tests/listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/listtransactions.py?ref=fa942c755ab513829dcab27487ba1e7ab5a806ee",
        "patch": "@@ -16,27 +16,6 @@ def txFromHex(hexstring):\n     tx.deserialize(f)\n     return tx\n \n-def check_array_result(object_array, to_match, expected):\n-    \"\"\"\n-    Pass in array of JSON objects, a dictionary with key/value pairs\n-    to match against, and another dictionary with expected key/value\n-    pairs.\n-    \"\"\"\n-    num_matched = 0\n-    for item in object_array:\n-        all_match = True\n-        for key,value in to_match.items():\n-            if item[key] != value:\n-                all_match = False\n-        if not all_match:\n-            continue\n-        for key,value in expected.items():\n-            if item[key] != value:\n-                raise AssertionError(\"%s : expected %s=%s\"%(str(item), str(key), str(value)))\n-            num_matched = num_matched+1\n-    if num_matched == 0:\n-        raise AssertionError(\"No objects matched %s\"%(str(to_match)))\n-\n class ListTransactionsTest(BitcoinTestFramework):\n \n     def setup_nodes(self):\n@@ -48,28 +27,28 @@ def run_test(self):\n         # Simple send, 0 to 1:\n         txid = self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 0.1)\n         self.sync_all()\n-        check_array_result(self.nodes[0].listtransactions(),\n+        assert_array_result(self.nodes[0].listtransactions(),\n                            {\"txid\":txid},\n                            {\"category\":\"send\",\"account\":\"\",\"amount\":Decimal(\"-0.1\"),\"confirmations\":0})\n-        check_array_result(self.nodes[1].listtransactions(),\n+        assert_array_result(self.nodes[1].listtransactions(),\n                            {\"txid\":txid},\n                            {\"category\":\"receive\",\"account\":\"\",\"amount\":Decimal(\"0.1\"),\"confirmations\":0})\n         # mine a block, confirmations should change:\n         self.nodes[0].generate(1)\n         self.sync_all()\n-        check_array_result(self.nodes[0].listtransactions(),\n+        assert_array_result(self.nodes[0].listtransactions(),\n                            {\"txid\":txid},\n                            {\"category\":\"send\",\"account\":\"\",\"amount\":Decimal(\"-0.1\"),\"confirmations\":1})\n-        check_array_result(self.nodes[1].listtransactions(),\n+        assert_array_result(self.nodes[1].listtransactions(),\n                            {\"txid\":txid},\n                            {\"category\":\"receive\",\"account\":\"\",\"amount\":Decimal(\"0.1\"),\"confirmations\":1})\n \n         # send-to-self:\n         txid = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 0.2)\n-        check_array_result(self.nodes[0].listtransactions(),\n+        assert_array_result(self.nodes[0].listtransactions(),\n                            {\"txid\":txid, \"category\":\"send\"},\n                            {\"amount\":Decimal(\"-0.2\")})\n-        check_array_result(self.nodes[0].listtransactions(),\n+        assert_array_result(self.nodes[0].listtransactions(),\n                            {\"txid\":txid, \"category\":\"receive\"},\n                            {\"amount\":Decimal(\"0.2\")})\n \n@@ -80,28 +59,28 @@ def run_test(self):\n                     self.nodes[1].getaccountaddress(\"toself\") : 0.44 }\n         txid = self.nodes[1].sendmany(\"\", send_to)\n         self.sync_all()\n-        check_array_result(self.nodes[1].listtransactions(),\n+        assert_array_result(self.nodes[1].listtransactions(),\n                            {\"category\":\"send\",\"amount\":Decimal(\"-0.11\")},\n                            {\"txid\":txid} )\n-        check_array_result(self.nodes[0].listtransactions(),\n+        assert_array_result(self.nodes[0].listtransactions(),\n                            {\"category\":\"receive\",\"amount\":Decimal(\"0.11\")},\n                            {\"txid\":txid} )\n-        check_array_result(self.nodes[1].listtransactions(),\n+        assert_array_result(self.nodes[1].listtransactions(),\n                            {\"category\":\"send\",\"amount\":Decimal(\"-0.22\")},\n                            {\"txid\":txid} )\n-        check_array_result(self.nodes[1].listtransactions(),\n+        assert_array_result(self.nodes[1].listtransactions(),\n                            {\"category\":\"receive\",\"amount\":Decimal(\"0.22\")},\n                            {\"txid\":txid} )\n-        check_array_result(self.nodes[1].listtransactions(),\n+        assert_array_result(self.nodes[1].listtransactions(),\n                            {\"category\":\"send\",\"amount\":Decimal(\"-0.33\")},\n                            {\"txid\":txid} )\n-        check_array_result(self.nodes[0].listtransactions(),\n+        assert_array_result(self.nodes[0].listtransactions(),\n                            {\"category\":\"receive\",\"amount\":Decimal(\"0.33\")},\n                            {\"txid\":txid, \"account\" : \"from1\"} )\n-        check_array_result(self.nodes[1].listtransactions(),\n+        assert_array_result(self.nodes[1].listtransactions(),\n                            {\"category\":\"send\",\"amount\":Decimal(\"-0.44\")},\n                            {\"txid\":txid, \"account\" : \"\"} )\n-        check_array_result(self.nodes[1].listtransactions(),\n+        assert_array_result(self.nodes[1].listtransactions(),\n                            {\"category\":\"receive\",\"amount\":Decimal(\"0.44\")},\n                            {\"txid\":txid, \"account\" : \"toself\"} )\n \n@@ -111,7 +90,7 @@ def run_test(self):\n         self.nodes[1].generate(1)\n         self.sync_all()\n         assert(len(self.nodes[0].listtransactions(\"watchonly\", 100, 0, False)) == 0)\n-        check_array_result(self.nodes[0].listtransactions(\"watchonly\", 100, 0, True),\n+        assert_array_result(self.nodes[0].listtransactions(\"watchonly\", 100, 0, True),\n                            {\"category\":\"receive\",\"amount\":Decimal(\"0.1\")},\n                            {\"txid\":txid, \"account\" : \"watchonly\"} )\n \n@@ -139,9 +118,9 @@ def get_unconfirmed_utxo_entry(node, txid_to_match):\n         # 1. Chain a few transactions that don't opt-in.\n         txid_1 = self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n         assert(not is_opt_in(self.nodes[0], txid_1))\n-        check_array_result(self.nodes[0].listtransactions(), {\"txid\": txid_1}, {\"bip125-replaceable\":\"no\"})\n+        assert_array_result(self.nodes[0].listtransactions(), {\"txid\": txid_1}, {\"bip125-replaceable\":\"no\"})\n         sync_mempools(self.nodes)\n-        check_array_result(self.nodes[1].listtransactions(), {\"txid\": txid_1}, {\"bip125-replaceable\":\"no\"})\n+        assert_array_result(self.nodes[1].listtransactions(), {\"txid\": txid_1}, {\"bip125-replaceable\":\"no\"})\n \n         # Tx2 will build off txid_1, still not opting in to RBF.\n         utxo_to_use = get_unconfirmed_utxo_entry(self.nodes[1], txid_1)\n@@ -155,9 +134,9 @@ def get_unconfirmed_utxo_entry(node, txid_to_match):\n \n         # ...and check the result\n         assert(not is_opt_in(self.nodes[1], txid_2))\n-        check_array_result(self.nodes[1].listtransactions(), {\"txid\": txid_2}, {\"bip125-replaceable\":\"no\"})\n+        assert_array_result(self.nodes[1].listtransactions(), {\"txid\": txid_2}, {\"bip125-replaceable\":\"no\"})\n         sync_mempools(self.nodes)\n-        check_array_result(self.nodes[0].listtransactions(), {\"txid\": txid_2}, {\"bip125-replaceable\":\"no\"})\n+        assert_array_result(self.nodes[0].listtransactions(), {\"txid\": txid_2}, {\"bip125-replaceable\":\"no\"})\n \n         # Tx3 will opt-in to RBF\n         utxo_to_use = get_unconfirmed_utxo_entry(self.nodes[0], txid_2)\n@@ -171,9 +150,9 @@ def get_unconfirmed_utxo_entry(node, txid_to_match):\n         txid_3 = self.nodes[0].sendrawtransaction(tx3_signed)\n \n         assert(is_opt_in(self.nodes[0], txid_3))\n-        check_array_result(self.nodes[0].listtransactions(), {\"txid\": txid_3}, {\"bip125-replaceable\":\"yes\"})\n+        assert_array_result(self.nodes[0].listtransactions(), {\"txid\": txid_3}, {\"bip125-replaceable\":\"yes\"})\n         sync_mempools(self.nodes)\n-        check_array_result(self.nodes[1].listtransactions(), {\"txid\": txid_3}, {\"bip125-replaceable\":\"yes\"})\n+        assert_array_result(self.nodes[1].listtransactions(), {\"txid\": txid_3}, {\"bip125-replaceable\":\"yes\"})\n \n         # Tx4 will chain off tx3.  Doesn't signal itself, but depends on one\n         # that does.\n@@ -185,9 +164,9 @@ def get_unconfirmed_utxo_entry(node, txid_to_match):\n         txid_4 = self.nodes[1].sendrawtransaction(tx4_signed)\n \n         assert(not is_opt_in(self.nodes[1], txid_4))\n-        check_array_result(self.nodes[1].listtransactions(), {\"txid\": txid_4}, {\"bip125-replaceable\":\"yes\"})\n+        assert_array_result(self.nodes[1].listtransactions(), {\"txid\": txid_4}, {\"bip125-replaceable\":\"yes\"})\n         sync_mempools(self.nodes)\n-        check_array_result(self.nodes[0].listtransactions(), {\"txid\": txid_4}, {\"bip125-replaceable\":\"yes\"})\n+        assert_array_result(self.nodes[0].listtransactions(), {\"txid\": txid_4}, {\"bip125-replaceable\":\"yes\"})\n \n         # Replace tx3, and check that tx4 becomes unknown\n         tx3_b = tx3_modified\n@@ -197,9 +176,9 @@ def get_unconfirmed_utxo_entry(node, txid_to_match):\n         txid_3b = self.nodes[0].sendrawtransaction(tx3_b_signed, True)\n         assert(is_opt_in(self.nodes[0], txid_3b))\n \n-        check_array_result(self.nodes[0].listtransactions(), {\"txid\": txid_4}, {\"bip125-replaceable\":\"unknown\"})\n+        assert_array_result(self.nodes[0].listtransactions(), {\"txid\": txid_4}, {\"bip125-replaceable\":\"unknown\"})\n         sync_mempools(self.nodes)\n-        check_array_result(self.nodes[1].listtransactions(), {\"txid\": txid_4}, {\"bip125-replaceable\":\"unknown\"})\n+        assert_array_result(self.nodes[1].listtransactions(), {\"txid\": txid_4}, {\"bip125-replaceable\":\"unknown\"})\n \n         # Check gettransaction as well:\n         for n in self.nodes[0:2]:"
      },
      {
        "sha": "7d8231f5e47cffaea4f73055e44afd0111a1f74a",
        "filename": "qa/rpc-tests/receivedby.py",
        "status": "modified",
        "additions": 7,
        "deletions": 33,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa942c755ab513829dcab27487ba1e7ab5a806ee/qa/rpc-tests/receivedby.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa942c755ab513829dcab27487ba1e7ab5a806ee/qa/rpc-tests/receivedby.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/receivedby.py?ref=fa942c755ab513829dcab27487ba1e7ab5a806ee",
        "patch": "@@ -25,32 +25,6 @@ def get_sub_array_from_array(object_array, to_match):\n         return item\n     return []\n \n-def check_array_result(object_array, to_match, expected, should_not_find = False):\n-    \"\"\"\n-        Pass in array of JSON objects, a dictionary with key/value pairs\n-        to match against, and another dictionary with expected key/value\n-        pairs.\n-        If the should_not_find flag is true, to_match should not be found in object_array\n-        \"\"\"\n-    if should_not_find == True:\n-        expected = { }\n-    num_matched = 0\n-    for item in object_array:\n-        all_match = True\n-        for key,value in to_match.items():\n-            if item[key] != value:\n-                all_match = False\n-        if not all_match:\n-            continue\n-        for key,value in expected.items():\n-            if item[key] != value:\n-                raise AssertionError(\"%s : expected %s=%s\"%(str(item), str(key), str(value)))\n-            num_matched = num_matched+1\n-    if num_matched == 0 and should_not_find != True:\n-        raise AssertionError(\"No objects matched %s\"%(str(to_match)))\n-    if num_matched > 0 and should_not_find == True:\n-        raise AssertionError(\"Objects was matched %s\"%(str(to_match)))\n-\n class ReceivedByTest(BitcoinTestFramework):\n \n     def setup_nodes(self):\n@@ -68,26 +42,26 @@ def run_test(self):\n         self.sync_all()\n \n         #Check not listed in listreceivedbyaddress because has 0 confirmations\n-        check_array_result(self.nodes[1].listreceivedbyaddress(),\n+        assert_array_result(self.nodes[1].listreceivedbyaddress(),\n                            {\"address\":addr},\n                            { },\n                            True)\n         #Bury Tx under 10 block so it will be returned by listreceivedbyaddress\n         self.nodes[1].generate(10)\n         self.sync_all()\n-        check_array_result(self.nodes[1].listreceivedbyaddress(),\n+        assert_array_result(self.nodes[1].listreceivedbyaddress(),\n                            {\"address\":addr},\n                            {\"address\":addr, \"account\":\"\", \"amount\":Decimal(\"0.1\"), \"confirmations\":10, \"txids\":[txid,]})\n         #With min confidence < 10\n-        check_array_result(self.nodes[1].listreceivedbyaddress(5),\n+        assert_array_result(self.nodes[1].listreceivedbyaddress(5),\n                            {\"address\":addr},\n                            {\"address\":addr, \"account\":\"\", \"amount\":Decimal(\"0.1\"), \"confirmations\":10, \"txids\":[txid,]})\n         #With min confidence > 10, should not find Tx\n-        check_array_result(self.nodes[1].listreceivedbyaddress(11),{\"address\":addr},{ },True)\n+        assert_array_result(self.nodes[1].listreceivedbyaddress(11),{\"address\":addr},{ },True)\n \n         #Empty Tx\n         addr = self.nodes[1].getnewaddress()\n-        check_array_result(self.nodes[1].listreceivedbyaddress(0,True),\n+        assert_array_result(self.nodes[1].listreceivedbyaddress(0,True),\n                            {\"address\":addr},\n                            {\"address\":addr, \"account\":\"\", \"amount\":0, \"confirmations\":0, \"txids\":[]})\n \n@@ -131,7 +105,7 @@ def run_test(self):\n         self.sync_all()\n \n         # listreceivedbyaccount should return received_by_account_json because of 0 confirmations\n-        check_array_result(self.nodes[1].listreceivedbyaccount(),\n+        assert_array_result(self.nodes[1].listreceivedbyaccount(),\n                            {\"account\":account},\n                            received_by_account_json)\n \n@@ -143,7 +117,7 @@ def run_test(self):\n         self.nodes[1].generate(10)\n         self.sync_all()\n         # listreceivedbyaccount should return updated account balance\n-        check_array_result(self.nodes[1].listreceivedbyaccount(),\n+        assert_array_result(self.nodes[1].listreceivedbyaccount(),\n                            {\"account\":account},\n                            {\"account\":received_by_account_json[\"account\"], \"amount\":(received_by_account_json[\"amount\"] + Decimal(\"0.1\"))})\n "
      },
      {
        "sha": "27891f7f4c3836120152afd52cf21ed0b83f2961",
        "filename": "qa/rpc-tests/test_framework/util.py",
        "status": "modified",
        "additions": 29,
        "deletions": 0,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa942c755ab513829dcab27487ba1e7ab5a806ee/qa/rpc-tests/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa942c755ab513829dcab27487ba1e7ab5a806ee/qa/rpc-tests/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/util.py?ref=fa942c755ab513829dcab27487ba1e7ab5a806ee",
        "patch": "@@ -478,6 +478,35 @@ def assert_is_hash_string(string, length=64):\n         raise AssertionError(\n             \"String %r contains invalid characters for a hash.\" % string)\n \n+def assert_array_result(object_array, to_match, expected, should_not_find = False):\n+    \"\"\"\n+        Pass in array of JSON objects, a dictionary with key/value pairs\n+        to match against, and another dictionary with expected key/value\n+        pairs.\n+        If the should_not_find flag is true, to_match should not be found\n+        in object_array\n+        \"\"\"\n+    if should_not_find == True:\n+        expected = { }\n+    num_matched = 0\n+    for item in object_array:\n+        all_match = True\n+        for key,value in to_match.items():\n+            if item[key] != value:\n+                all_match = False\n+        if not all_match:\n+            continue\n+        elif should_not_find == True:\n+            num_matched = num_matched+1\n+        for key,value in expected.items():\n+            if item[key] != value:\n+                raise AssertionError(\"%s : expected %s=%s\"%(str(item), str(key), str(value)))\n+            num_matched = num_matched+1\n+    if num_matched == 0 and should_not_find != True:\n+        raise AssertionError(\"No objects matched %s\"%(str(to_match)))\n+    if num_matched > 0 and should_not_find == True:\n+        raise AssertionError(\"Objects were found %s\"%(str(to_match)))\n+\n def satoshi_round(amount):\n     return Decimal(amount).quantize(Decimal('0.00000001'), rounding=ROUND_DOWN)\n "
      }
    ]
  },
  {
    "sha": "5d217decc1145823a3c126658c82c60cf7dbfec8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZDIxN2RlY2MxMTQ1ODIzYTNjMTI2NjU4YzgyYzYwY2Y3ZGJmZWM4",
    "commit": {
      "author": {
        "name": "Joao Fonseca",
        "email": "jpdf.fonseca@gmail.com",
        "date": "2016-04-19T11:28:37Z"
      },
      "committer": {
        "name": "Joao Fonseca",
        "email": "jpdf.fonseca@gmail.com",
        "date": "2016-04-19T11:29:27Z"
      },
      "message": "Add test to check spendable and unspendable UTXO on RPC listunspent",
      "tree": {
        "sha": "4e1e6ff06cb3678e4376f6ba65704eb245beaabb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4e1e6ff06cb3678e4376f6ba65704eb245beaabb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5d217decc1145823a3c126658c82c60cf7dbfec8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d217decc1145823a3c126658c82c60cf7dbfec8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5d217decc1145823a3c126658c82c60cf7dbfec8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d217decc1145823a3c126658c82c60cf7dbfec8/comments",
    "author": {
      "login": "joaopaulofonseca",
      "id": 16206754,
      "node_id": "MDQ6VXNlcjE2MjA2NzU0",
      "avatar_url": "https://avatars.githubusercontent.com/u/16206754?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/joaopaulofonseca",
      "html_url": "https://github.com/joaopaulofonseca",
      "followers_url": "https://api.github.com/users/joaopaulofonseca/followers",
      "following_url": "https://api.github.com/users/joaopaulofonseca/following{/other_user}",
      "gists_url": "https://api.github.com/users/joaopaulofonseca/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/joaopaulofonseca/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/joaopaulofonseca/subscriptions",
      "organizations_url": "https://api.github.com/users/joaopaulofonseca/orgs",
      "repos_url": "https://api.github.com/users/joaopaulofonseca/repos",
      "events_url": "https://api.github.com/users/joaopaulofonseca/events{/privacy}",
      "received_events_url": "https://api.github.com/users/joaopaulofonseca/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "joaopaulofonseca",
      "id": 16206754,
      "node_id": "MDQ6VXNlcjE2MjA2NzU0",
      "avatar_url": "https://avatars.githubusercontent.com/u/16206754?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/joaopaulofonseca",
      "html_url": "https://github.com/joaopaulofonseca",
      "followers_url": "https://api.github.com/users/joaopaulofonseca/followers",
      "following_url": "https://api.github.com/users/joaopaulofonseca/following{/other_user}",
      "gists_url": "https://api.github.com/users/joaopaulofonseca/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/joaopaulofonseca/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/joaopaulofonseca/subscriptions",
      "organizations_url": "https://api.github.com/users/joaopaulofonseca/orgs",
      "repos_url": "https://api.github.com/users/joaopaulofonseca/repos",
      "events_url": "https://api.github.com/users/joaopaulofonseca/events{/privacy}",
      "received_events_url": "https://api.github.com/users/joaopaulofonseca/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa942c755ab513829dcab27487ba1e7ab5a806ee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa942c755ab513829dcab27487ba1e7ab5a806ee",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa942c755ab513829dcab27487ba1e7ab5a806ee"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 37,
      "deletions": 0
    },
    "files": [
      {
        "sha": "555f836482d20d74676456ec275f84e75458be88",
        "filename": "qa/rpc-tests/wallet.py",
        "status": "modified",
        "additions": 37,
        "deletions": 0,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d217decc1145823a3c126658c82c60cf7dbfec8/qa/rpc-tests/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d217decc1145823a3c126658c82c60cf7dbfec8/qa/rpc-tests/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet.py?ref=5d217decc1145823a3c126658c82c60cf7dbfec8",
        "patch": "@@ -32,6 +32,12 @@ def setup_network(self, split=False):\n         self.sync_all()\n \n     def run_test (self):\n+\n+        # Check that there's no UTXO on none of the nodes\n+        assert_equal(len(self.nodes[0].listunspent()), 0)\n+        assert_equal(len(self.nodes[1].listunspent()), 0)\n+        assert_equal(len(self.nodes[2].listunspent()), 0)\n+\n         print \"Mining blocks...\"\n \n         self.nodes[0].generate(1)\n@@ -48,6 +54,11 @@ def run_test (self):\n         assert_equal(self.nodes[1].getbalance(), 50)\n         assert_equal(self.nodes[2].getbalance(), 0)\n \n+        # Check that only first and second nodes have UTXOs\n+        assert_equal(len(self.nodes[0].listunspent()), 1)\n+        assert_equal(len(self.nodes[1].listunspent()), 1)\n+        assert_equal(len(self.nodes[2].listunspent()), 0)\n+\n         # Send 21 BTC from 0 to 2 using sendtoaddress call.\n         self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 11)\n         self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 10)\n@@ -259,6 +270,32 @@ def run_test (self):\n         except JSONRPCException as e:\n             assert(\"not an integer\" in e.error['message'])\n \n+        # Import address and private key to check correct behavior of spendable unspents\n+        # 1. Send some coins to generate new UTXO\n+        address_to_import = self.nodes[2].getnewaddress()\n+        txid = self.nodes[0].sendtoaddress(address_to_import, 1)\n+        self.nodes[0].generate(1)\n+        self.sync_all()\n+\n+        # 2. Import address from node2 to node1\n+        self.nodes[1].importaddress(address_to_import)\n+\n+        # 3. Validate that the imported address is watch-only on node1\n+        assert(self.nodes[1].validateaddress(address_to_import)[\"iswatchonly\"])\n+\n+        # 4. Check that the unspents after import are not spendable\n+        assert_array_result(self.nodes[1].listunspent(),\n+                           {\"address\": address_to_import},\n+                           {\"spendable\": False})\n+\n+        # 5. Import private key of the previously imported address on node1\n+        priv_key = self.nodes[2].dumpprivkey(address_to_import)\n+        self.nodes[1].importprivkey(priv_key)\n+\n+        # 6. Check that the unspents are now spendable on node1\n+        assert_array_result(self.nodes[1].listunspent(),\n+                           {\"address\": address_to_import},\n+                           {\"spendable\": True})\n \n         # Mine a block from node0 to an address from node1\n         cbAddr = self.nodes[1].getnewaddress()"
      }
    ]
  }
]