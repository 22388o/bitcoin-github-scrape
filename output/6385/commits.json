[
  {
    "sha": "8342b306194b851a46b338ad21cdd2744009494c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MzQyYjMwNjE5NGI4NTFhNDZiMzM4YWQyMWNkZDI3NDQwMDk0OTRj",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-07-07T06:00:10Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-07-07T06:01:25Z"
      },
      "message": "Refactor user-agent handling to be more extensible\n\nA global vector keeps track of involved codebases.\nNew items can be added by patches, by repeating a 3-line comment.",
      "tree": {
        "sha": "033ec9ef40e002eda8802d48961401315624a05b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/033ec9ef40e002eda8802d48961401315624a05b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8342b306194b851a46b338ad21cdd2744009494c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8342b306194b851a46b338ad21cdd2744009494c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8342b306194b851a46b338ad21cdd2744009494c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8342b306194b851a46b338ad21cdd2744009494c/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "04e988c6ce1e7255a9575ff2fd130219f03c64f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/04e988c6ce1e7255a9575ff2fd130219f03c64f2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/04e988c6ce1e7255a9575ff2fd130219f03c64f2"
      }
    ],
    "stats": {
      "total": 91,
      "additions": 65,
      "deletions": 26
    },
    "files": [
      {
        "sha": "bd988c6a43a5a2e30f8e376a81d949fd8463ae7a",
        "filename": "src/alert.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8342b306194b851a46b338ad21cdd2744009494c/src/alert.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8342b306194b851a46b338ad21cdd2744009494c/src/alert.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/alert.cpp?ref=8342b306194b851a46b338ad21cdd2744009494c",
        "patch": "@@ -121,7 +121,7 @@ bool CAlert::AppliesTo(int nVersion, std::string strSubVerIn) const\n \n bool CAlert::AppliesToMe() const\n {\n-    return AppliesTo(PROTOCOL_VERSION, FormatSubVersion(CLIENT_NAME, CLIENT_VERSION, std::vector<std::string>()));\n+    return AppliesTo(PROTOCOL_VERSION, FormatUserAgent(vUserAgentCodebases));\n }\n \n bool CAlert::RelayTo(CNode* pnode) const"
      },
      {
        "sha": "2021d868f9e89006bfd1cec35639d64bae6c329e",
        "filename": "src/clientversion.cpp",
        "status": "modified",
        "additions": 39,
        "deletions": 13,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8342b306194b851a46b338ad21cdd2744009494c/src/clientversion.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8342b306194b851a46b338ad21cdd2744009494c/src/clientversion.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/clientversion.cpp?ref=8342b306194b851a46b338ad21cdd2744009494c",
        "patch": "@@ -8,6 +8,8 @@\n \n #include <string>\n \n+#include <boost/foreach.hpp>\n+\n /**\n  * Name of client reported in the 'version' message. Report the same name\n  * for both bitcoind and bitcoin-core, to make it harder for attackers to\n@@ -78,7 +80,7 @@ const std::string CLIENT_NAME(\"Satoshi\");\n const std::string CLIENT_BUILD(BUILD_DESC CLIENT_VERSION_SUFFIX);\n const std::string CLIENT_DATE(BUILD_DATE);\n \n-static std::string FormatVersion(int nVersion)\n+std::string FormatVersion(int nVersion)\n {\n     if (nVersion % 100 == 0)\n         return strprintf(\"%d.%d.%d\", nVersion / 1000000, (nVersion / 10000) % 100, (nVersion / 100) % 100);\n@@ -91,22 +93,46 @@ std::string FormatFullVersion()\n     return CLIENT_BUILD;\n }\n \n+BitcoinUserAgentCodebase::BitcoinUserAgentCodebase(const std::string strName, const std::string strVersion, const std::string strComment)\n+: name(strName), version(strVersion) {\n+    comments.push_back(strComment);\n+}\n+\n+BitcoinUserAgentCodebase::BitcoinUserAgentCodebase(const std::string strName, const std::string strVersion, const std::vector<std::string> vstrComments)\n+: name(strName), version(strVersion), comments(vstrComments) {\n+}\n+\n+std::vector<BitcoinUserAgentCodebase> vUserAgentCodebases;\n+\n+static class UAInitialiser {\n+public:\n+    UAInitialiser() {\n+        vUserAgentCodebases.push_back(BitcoinUserAgentCodebase(CLIENT_NAME, FormatVersion(CLIENT_VERSION)));\n+        BitcoinUserAgentCodebase& core_codebase = vUserAgentCodebases[0];\n+        core_codebase.comments.clear();\n+        /*\n+         * These lines should appear between arbitrary-ordered codebases to make patch application simpler.\n+         */\n+    }\n+} UAInitialiser_instance;\n+\n /** \n- * Format the subversion field according to BIP 14 spec (https://github.com/bitcoin/bips/blob/master/bip-0014.mediawiki) \n+ * Format the user-agent field according to BIP 14 spec (https://github.com/bitcoin/bips/blob/master/bip-0014.mediawiki)\n  */\n-std::string FormatSubVersion(const std::string& name, int nClientVersion, const std::vector<std::string>& comments)\n-{\n+std::string FormatUserAgent(const std::vector<BitcoinUserAgentCodebase> codebases) {\n     std::ostringstream ss;\n     ss << \"/\";\n-    ss << name << \":\" << FormatVersion(nClientVersion);\n-    if (!comments.empty())\n-    {\n-        std::vector<std::string>::const_iterator it(comments.begin());\n-        ss << \"(\" << *it;\n-        for(++it; it != comments.end(); ++it)\n-            ss << \"; \" << *it;\n-        ss << \")\";\n+    BOOST_FOREACH(const BitcoinUserAgentCodebase& codebase, codebases) {\n+        ss << codebase.name << \":\" << codebase.version;\n+        if (!codebase.comments.empty())\n+        {\n+            std::vector<std::string>::const_iterator it(codebase.comments.begin());\n+            ss << \"(\" << *it;\n+            for(++it; it != codebase.comments.end(); ++it)\n+                ss << \"; \" << *it;\n+            ss << \")\";\n+        }\n+        ss << \"/\";\n     }\n-    ss << \"/\";\n     return ss.str();\n }"
      },
      {
        "sha": "6f7ec31c04dc52098128f83258c19c9ff2312d33",
        "filename": "src/clientversion.h",
        "status": "modified",
        "additions": 14,
        "deletions": 1,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8342b306194b851a46b338ad21cdd2744009494c/src/clientversion.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8342b306194b851a46b338ad21cdd2744009494c/src/clientversion.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/clientversion.h?ref=8342b306194b851a46b338ad21cdd2744009494c",
        "patch": "@@ -62,8 +62,21 @@ extern const std::string CLIENT_BUILD;\n extern const std::string CLIENT_DATE;\n \n \n+class BitcoinUserAgentCodebase {\n+public:\n+    std::string name;\n+    std::string version;\n+    std::vector<std::string> comments;\n+\n+    BitcoinUserAgentCodebase(const std::string strName, const std::string strVersion, const std::vector<std::string> vstrComments = std::vector<std::string>());\n+    BitcoinUserAgentCodebase(const std::string strName, const std::string strVersion, const std::string strComment);\n+};\n+\n+extern std::vector<BitcoinUserAgentCodebase> vUserAgentCodebases;\n+\n+std::string FormatVersion(int nVersion);\n std::string FormatFullVersion();\n-std::string FormatSubVersion(const std::string& name, int nClientVersion, const std::vector<std::string>& comments);\n+std::string FormatUserAgent(const std::vector<BitcoinUserAgentCodebase>);\n \n #endif // WINDRES_PREPROC\n "
      },
      {
        "sha": "3cd0b7d8cb9c25dcb3baf6b072a646b2db0d7809",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8342b306194b851a46b338ad21cdd2744009494c/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8342b306194b851a46b338ad21cdd2744009494c/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=8342b306194b851a46b338ad21cdd2744009494c",
        "patch": "@@ -535,7 +535,7 @@ void CNode::PushVersion()\n     else\n         LogPrint(\"net\", \"send version message: version %d, blocks=%d, us=%s, peer=%d\\n\", PROTOCOL_VERSION, nBestHeight, addrMe.ToString(), id);\n     PushMessage(\"version\", PROTOCOL_VERSION, nLocalServices, nTime, addrYou, addrMe,\n-                nLocalHostNonce, FormatSubVersion(CLIENT_NAME, CLIENT_VERSION, std::vector<string>()), nBestHeight, true);\n+                nLocalHostNonce, FormatUserAgent(vUserAgentCodebases), nBestHeight, true);\n }\n \n "
      },
      {
        "sha": "f9004fba8c47bf7d365c1a0fc7565830afca6b55",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8342b306194b851a46b338ad21cdd2744009494c/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8342b306194b851a46b338ad21cdd2744009494c/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=8342b306194b851a46b338ad21cdd2744009494c",
        "patch": "@@ -412,7 +412,7 @@ Value getnetworkinfo(const Array& params, bool fHelp)\n     Object obj;\n     obj.push_back(Pair(\"version\",       CLIENT_VERSION));\n     obj.push_back(Pair(\"subversion\",\n-        FormatSubVersion(CLIENT_NAME, CLIENT_VERSION, std::vector<string>())));\n+        FormatUserAgent(vUserAgentCodebases)));\n     obj.push_back(Pair(\"protocolversion\",PROTOCOL_VERSION));\n     obj.push_back(Pair(\"localservices\",       strprintf(\"%016x\", nLocalServices)));\n     obj.push_back(Pair(\"timeoffset\",    GetTimeOffset()));"
      },
      {
        "sha": "e7055fc957d7006f740d069318769208888e7db2",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8342b306194b851a46b338ad21cdd2744009494c/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8342b306194b851a46b338ad21cdd2744009494c/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=8342b306194b851a46b338ad21cdd2744009494c",
        "patch": "@@ -342,15 +342,15 @@ BOOST_AUTO_TEST_CASE(test_FormatParagraph)\n     BOOST_CHECK_EQUAL(FormatParagraph(\"test test\", 4, 4), \"test\\n    test\");\n }\n \n-BOOST_AUTO_TEST_CASE(test_FormatSubVersion)\n+BOOST_AUTO_TEST_CASE(test_FormatUserAgent)\n {\n-    std::vector<std::string> comments;\n-    comments.push_back(std::string(\"comment1\"));\n-    std::vector<std::string> comments2;\n-    comments2.push_back(std::string(\"comment1\"));\n-    comments2.push_back(std::string(\"comment2\"));\n-    BOOST_CHECK_EQUAL(FormatSubVersion(\"Test\", 99900, std::vector<std::string>()),std::string(\"/Test:0.9.99/\"));\n-    BOOST_CHECK_EQUAL(FormatSubVersion(\"Test\", 99900, comments),std::string(\"/Test:0.9.99(comment1)/\"));\n-    BOOST_CHECK_EQUAL(FormatSubVersion(\"Test\", 99900, comments2),std::string(\"/Test:0.9.99(comment1; comment2)/\"));\n+    std::vector<BitcoinUserAgentCodebase> vUA;\n+    vUA.push_back(BitcoinUserAgentCodebase(\"Test\", FormatVersion(99900)));\n+    BitcoinUserAgentCodebase& codebase = vUA[0];\n+    BOOST_CHECK_EQUAL(FormatUserAgent(vUA), std::string(\"/Test:0.9.99/\"));\n+    codebase.comments.push_back(std::string(\"comment1\"));\n+    BOOST_CHECK_EQUAL(FormatUserAgent(vUA), std::string(\"/Test:0.9.99(comment1)/\"));\n+    codebase.comments.push_back(std::string(\"comment2\"));\n+    BOOST_CHECK_EQUAL(FormatUserAgent(vUA), std::string(\"/Test:0.9.99(comment1; comment2)/\"));\n }\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  }
]