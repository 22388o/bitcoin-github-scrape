[
  {
    "sha": "6b8de05d0a6696dff4b7dccec5b74889f3cdc486",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YjhkZTA1ZDBhNjY5NmRmZjRiN2RjY2VjNWI3NDg4OWYzY2RjNDg2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-03-26T14:48:23Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-03-26T14:48:23Z"
      },
      "message": "Begin doxygen-compatible comments",
      "tree": {
        "sha": "123b892a842e3a99342cc4806b4a833b2a635b52",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/123b892a842e3a99342cc4806b4a833b2a635b52"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6b8de05d0a6696dff4b7dccec5b74889f3cdc486",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b8de05d0a6696dff4b7dccec5b74889f3cdc486",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6b8de05d0a6696dff4b7dccec5b74889f3cdc486",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b8de05d0a6696dff4b7dccec5b74889f3cdc486/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "01a196e08db49d83cf6c5abd8a799c56dcfef503",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01a196e08db49d83cf6c5abd8a799c56dcfef503",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/01a196e08db49d83cf6c5abd8a799c56dcfef503"
      }
    ],
    "stats": {
      "total": 270,
      "additions": 136,
      "deletions": 134
    },
    "files": [
      {
        "sha": "91e1f87f0529ea1e1d90fee64be078f5eecec6d6",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b8de05d0a6696dff4b7dccec5b74889f3cdc486/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b8de05d0a6696dff4b7dccec5b74889f3cdc486/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=6b8de05d0a6696dff4b7dccec5b74889f3cdc486",
        "patch": "@@ -15,7 +15,7 @@\n #include <openssl/rand.h>\n \n \n-// Extended statistics about a CAddress\n+/** Extended statistics about a CAddress */\n class CAddrInfo : public CAddress\n {\n private:\n@@ -160,6 +160,7 @@ class CAddrInfo : public CAddress\n // the maximum number of nodes to return in a getaddr call\n #define ADDRMAN_GETADDR_MAX 2500\n \n+/** Stochastical (IP) address manager */\n class CAddrMan\n {\n private:"
      },
      {
        "sha": "755e34c418a5c5471ba93ebda5f4330ba3e50630",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 8,
        "deletions": 6,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b8de05d0a6696dff4b7dccec5b74889f3cdc486/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b8de05d0a6696dff4b7dccec5b74889f3cdc486/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=6b8de05d0a6696dff4b7dccec5b74889f3cdc486",
        "patch": "@@ -169,7 +169,7 @@ inline bool DecodeBase58Check(const std::string& str, std::vector<unsigned char>\n \n \n \n-// Base class for all base58-encoded data\n+/** Base class for all base58-encoded data */\n class CBase58Data\n {\n protected:\n@@ -252,11 +252,12 @@ class CBase58Data\n     bool operator> (const CBase58Data& b58) const { return CompareTo(b58) >  0; }\n };\n \n-// base58-encoded bitcoin addresses\n-// Public-key-hash-addresses have version 0 (or 192 testnet)\n-// The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key\n-// Script-hash-addresses have version 5 (or 196 testnet)\n-// The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script\n+/** base58-encoded bitcoin addresses.\n+ * Public-key-hash-addresses have version 0 (or 111 testnet).\n+ * The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n+ * Script-hash-addresses have version 5 (or 196 testnet).\n+ * The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n+ */\n class CBitcoinAddress : public CBase58Data\n {\n public:\n@@ -356,6 +357,7 @@ class CBitcoinAddress : public CBase58Data\n     }\n };\n \n+/** A base58-encoded secret key */\n class CBitcoinSecret : public CBase58Data\n {\n public:"
      },
      {
        "sha": "c7c2ff173046d4b2ce06a4165cd8d0b80de9b866",
        "filename": "src/bignum.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b8de05d0a6696dff4b7dccec5b74889f3cdc486/src/bignum.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b8de05d0a6696dff4b7dccec5b74889f3cdc486/src/bignum.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bignum.h?ref=6b8de05d0a6696dff4b7dccec5b74889f3cdc486",
        "patch": "@@ -11,14 +11,15 @@\n \n #include \"util.h\"\n \n+/** Errors thrown by the bignum class */\n class bignum_error : public std::runtime_error\n {\n public:\n     explicit bignum_error(const std::string& str) : std::runtime_error(str) {}\n };\n \n \n-\n+/** RAII encapsulated BN_CTX (OpenSSL bignum context) */\n class CAutoBN_CTX\n {\n protected:\n@@ -46,7 +47,7 @@ class CAutoBN_CTX\n };\n \n \n-\n+/** C++ wrapper for BIGNUM (OpenSSl bignum) */\n class CBigNum : public BIGNUM\n {\n public:"
      },
      {
        "sha": "38902ac0a152ceef1a076d05aa49188c3180ef83",
        "filename": "src/checkpoints.h",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b8de05d0a6696dff4b7dccec5b74889f3cdc486/src/checkpoints.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b8de05d0a6696dff4b7dccec5b74889f3cdc486/src/checkpoints.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.h?ref=6b8de05d0a6696dff4b7dccec5b74889f3cdc486",
        "patch": "@@ -10,10 +10,9 @@\n class uint256;\n class CBlockIndex;\n \n-//\n-// Block-chain checkpoints are compiled-in sanity checks.\n-// They are updated every release or three.\n-//\n+/** Block-chain checkpoints are compiled-in sanity checks.\n+ * They are updated every release or three.\n+ */\n namespace Checkpoints\n {\n     // Returns true if block passes checkpoint checks"
      },
      {
        "sha": "0f9ea02175ac3c5a7528a2648964fe2065bf85a1",
        "filename": "src/crypter.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b8de05d0a6696dff4b7dccec5b74889f3cdc486/src/crypter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b8de05d0a6696dff4b7dccec5b74889f3cdc486/src/crypter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypter.h?ref=6b8de05d0a6696dff4b7dccec5b74889f3cdc486",
        "patch": "@@ -25,6 +25,7 @@ with the double-sha256 of the public key as the IV, and the\n master key's key as the encryption key (see keystore.[ch]).\n */\n \n+/** Master key for wallet encryption */\n class CMasterKey\n {\n public:\n@@ -58,6 +59,7 @@ class CMasterKey\n \n typedef std::vector<unsigned char, secure_allocator<unsigned char> > CKeyingMaterial;\n \n+/** Encryption/decryption context with key information */\n class CCrypter\n {\n private:"
      },
      {
        "sha": "430880e988895ee8bbe90ecc0a5c43c1242afeb6",
        "filename": "src/db.h",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b8de05d0a6696dff4b7dccec5b74889f3cdc486/src/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b8de05d0a6696dff4b7dccec5b74889f3cdc486/src/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.h?ref=6b8de05d0a6696dff4b7dccec5b74889f3cdc486",
        "patch": "@@ -34,7 +34,7 @@ void ThreadFlushWalletDB(void* parg);\n bool BackupWallet(const CWallet& wallet, const std::string& strDest);\n \n \n-\n+/** RAII class that provides access to a Berkeley database */\n class CDB\n {\n protected:\n@@ -266,7 +266,7 @@ class CDB\n \n \n \n-\n+/** Access to the transaction database (blkindex.dat) */\n class CTxDB : public CDB\n {\n public:\n@@ -297,7 +297,7 @@ class CTxDB : public CDB\n \n \n \n-\n+/** Access to the (IP) address database (addr.dat) */\n class CAddrDB : public CDB\n {\n public:\n@@ -315,7 +315,7 @@ class CAddrDB : public CDB\n bool LoadAddresses();\n \n \n-\n+/** A key pool entry */\n class CKeyPool\n {\n public:\n@@ -344,7 +344,7 @@ class CKeyPool\n \n \n \n-\n+/** Error statuses for the wallet database */\n enum DBErrors\n {\n     DB_LOAD_OK,\n@@ -354,6 +354,7 @@ enum DBErrors\n     DB_NEED_REWRITE\n };\n \n+/** Access to the wallet database (wallet.dat) */\n class CWalletDB : public CDB\n {\n public:"
      },
      {
        "sha": "b8fc0cd772a78391d22371ce795cc0060ab95728",
        "filename": "src/key.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b8de05d0a6696dff4b7dccec5b74889f3cdc486/src/key.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b8de05d0a6696dff4b7dccec5b74889f3cdc486/src/key.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.h?ref=6b8de05d0a6696dff4b7dccec5b74889f3cdc486",
        "patch": "@@ -54,6 +54,7 @@ typedef std::vector<unsigned char, secure_allocator<unsigned char> > CPrivKey;\n // CSecret is a serialization of just the secret parameter (32 bytes)\n typedef std::vector<unsigned char, secure_allocator<unsigned char> > CSecret;\n \n+/** An encapsulated OpenSSL Elliptic Curve key (public and/or private) */\n class CKey\n {\n protected:"
      },
      {
        "sha": "c32db2620a8a041781855889919fe48cf4244ff9",
        "filename": "src/keystore.h",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b8de05d0a6696dff4b7dccec5b74889f3cdc486/src/keystore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b8de05d0a6696dff4b7dccec5b74889f3cdc486/src/keystore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.h?ref=6b8de05d0a6696dff4b7dccec5b74889f3cdc486",
        "patch": "@@ -8,7 +8,7 @@\n #include \"crypter.h\"\n #include \"script.h\"\n \n-// A virtual base class for key stores\n+/** A virtual base class for key stores */\n class CKeyStore\n {\n protected:\n@@ -42,7 +42,7 @@ class CKeyStore\n typedef std::map<CBitcoinAddress, std::pair<CSecret, bool> > KeyMap;\n typedef std::map<uint160, CScript > ScriptMap;\n \n-// Basic key store, that keeps keys in an address->secret map\n+/** Basic key store, that keeps keys in an address->secret map */\n class CBasicKeyStore : public CKeyStore\n {\n protected:\n@@ -92,8 +92,9 @@ class CBasicKeyStore : public CKeyStore\n \n typedef std::map<CBitcoinAddress, std::pair<std::vector<unsigned char>, std::vector<unsigned char> > > CryptedKeyMap;\n \n-// Keystore which keeps the private keys encrypted\n-// It derives from the basic key store, which is used if no encryption is active.\n+/** Keystore which keeps the private keys encrypted.\n+ * It derives from the basic key store, which is used if no encryption is active.\n+ */\n class CCryptoKeyStore : public CBasicKeyStore\n {\n private:"
      },
      {
        "sha": "10bc29fc9f75d2f4094b64cfe6da88a245f97d52",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 47,
        "deletions": 58,
        "changes": 105,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b8de05d0a6696dff4b7dccec5b74889f3cdc486/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b8de05d0a6696dff4b7dccec5b74889f3cdc486/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=6b8de05d0a6696dff4b7dccec5b74889f3cdc486",
        "patch": "@@ -122,7 +122,7 @@ std::string GetWarnings(std::string strFor);\n \n bool GetWalletFile(CWallet* pwallet, std::string &strWalletFileOut);\n \n-\n+/** Position on disk for a particular transaction. */\n class CDiskTxPos\n {\n public:\n@@ -174,7 +174,7 @@ class CDiskTxPos\n \n \n \n-\n+/** An inpoint - a combination of a transaction and an index n into its vin */\n class CInPoint\n {\n public:\n@@ -189,7 +189,7 @@ class CInPoint\n \n \n \n-\n+/** An outpoint - a combination of a transaction hash and an index n into its vout */\n class COutPoint\n {\n public:\n@@ -231,11 +231,10 @@ class COutPoint\n \n \n \n-//\n-// An input of a transaction.  It contains the location of the previous\n-// transaction's output that it claims and a signature that matches the\n-// output's public key.\n-//\n+/** An input of a transaction.  It contains the location of the previous\n+ * transaction's output that it claims and a signature that matches the\n+ * output's public key.\n+ */\n class CTxIn\n {\n public:\n@@ -310,10 +309,9 @@ class CTxIn\n \n \n \n-//\n-// An output of a transaction.  It contains the public key that the next input\n-// must be able to sign with to claim it.\n-//\n+/** An output of a transaction.  It contains the public key that the next input\n+ * must be able to sign with to claim it.\n+ */\n class CTxOut\n {\n public:\n@@ -389,10 +387,9 @@ enum GetMinFee_mode\n \n typedef std::map<uint256, std::pair<CTxIndex, CTransaction> > MapPrevTx;\n \n-//\n-// The basic transaction that is broadcasted on the network and contained in\n-// blocks.  A transaction can contain multiple inputs and outputs.\n-//\n+/** The basic transaction that is broadcasted on the network and contained in\n+ * blocks.  A transaction can contain multiple inputs and outputs.\n+ */\n class CTransaction\n {\n public:\n@@ -699,9 +696,7 @@ class CTransaction\n \n \n \n-//\n-// A transaction with a merkle branch linking it to the block chain\n-//\n+/** A transaction with a merkle branch linking it to the block chain. */\n class CMerkleTx : public CTransaction\n {\n public:\n@@ -753,11 +748,10 @@ class CMerkleTx : public CTransaction\n \n \n \n-//\n-// A txdb record that contains the disk location of a transaction and the\n-// locations of transactions that spend its outputs.  vSpent is really only\n-// used as a flag, but having the location is very helpful for debugging.\n-//\n+/**  A txdb record that contains the disk location of a transaction and the\n+ * locations of transactions that spend its outputs.  vSpent is really only\n+ * used as a flag, but having the location is very helpful for debugging.\n+ */\n class CTxIndex\n {\n public:\n@@ -812,17 +806,16 @@ class CTxIndex\n \n \n \n-//\n-// Nodes collect new transactions into a block, hash them into a hash tree,\n-// and scan through nonce values to make the block's hash satisfy proof-of-work\n-// requirements.  When they solve the proof-of-work, they broadcast the block\n-// to everyone and the block is added to the block chain.  The first transaction\n-// in the block is a special one that creates a new coin owned by the creator\n-// of the block.\n-//\n-// Blocks are appended to blk0001.dat files on disk.  Their location on disk\n-// is indexed by CBlockIndex objects in memory.\n-//\n+/** Nodes collect new transactions into a block, hash them into a hash tree,\n+ * and scan through nonce values to make the block's hash satisfy proof-of-work\n+ * requirements.  When they solve the proof-of-work, they broadcast the block\n+ * to everyone and the block is added to the block chain.  The first transaction\n+ * in the block is a special one that creates a new coin owned by the creator\n+ * of the block.\n+ *\n+ * Blocks are appended to blk0001.dat files on disk.  Their location on disk\n+ * is indexed by CBlockIndex objects in memory.\n+ */\n class CBlock\n {\n public:\n@@ -1040,14 +1033,13 @@ class CBlock\n \n \n \n-//\n-// The block chain is a tree shaped structure starting with the\n-// genesis block at the root, with each block potentially having multiple\n-// candidates to be the next block.  pprev and pnext link a path through the\n-// main/longest chain.  A blockindex may have multiple pprev pointing back\n-// to it, but pnext will only point forward to the longest branch, or will\n-// be null if the block is not part of the longest chain.\n-//\n+/** The block chain is a tree shaped structure starting with the\n+ * genesis block at the root, with each block potentially having multiple\n+ * candidates to be the next block.  pprev and pnext link a path through the\n+ * main/longest chain.  A blockindex may have multiple pprev pointing back\n+ * to it, but pnext will only point forward to the longest branch, or will\n+ * be null if the block is not part of the longest chain.\n+ */\n class CBlockIndex\n {\n public:\n@@ -1204,9 +1196,7 @@ class CBlockIndex\n \n \n \n-//\n-// Used to marshal pointers into hashes for db storage.\n-//\n+/** Used to marshal pointers into hashes for db storage. */\n class CDiskBlockIndex : public CBlockIndex\n {\n public:\n@@ -1281,11 +1271,10 @@ class CDiskBlockIndex : public CBlockIndex\n \n \n \n-//\n-// Describes a place in the block chain to another node such that if the\n-// other node doesn't have the same branch, it can find a recent common trunk.\n-// The further back it is, the further before the fork it may be.\n-//\n+/** Describes a place in the block chain to another node such that if the\n+ * other node doesn't have the same branch, it can find a recent common trunk.\n+ * The further back it is, the further before the fork it may be.\n+ */\n class CBlockLocator\n {\n protected:\n@@ -1417,13 +1406,12 @@ class CBlockLocator\n \n \n \n-//\n-// Alerts are for notifying old versions if they become too obsolete and\n-// need to upgrade.  The message is displayed in the status bar.\n-// Alert messages are broadcast as a vector of signed data.  Unserializing may\n-// not read the entire buffer if the alert is for a newer version, but older\n-// versions can still relay the original data.\n-//\n+/** Alerts are for notifying old versions if they become too obsolete and\n+ * need to upgrade.  The message is displayed in the status bar.\n+ * Alert messages are broadcast as a vector of signed data.  Unserializing may\n+ * not read the entire buffer if the alert is for a newer version, but older\n+ * versions can still relay the original data.\n+ */\n class CUnsignedAlert\n {\n public:\n@@ -1523,6 +1511,7 @@ class CUnsignedAlert\n     }\n };\n \n+/** An alert is a combination of a serialized CUnsignedAlert and a signature. */\n class CAlert : public CUnsignedAlert\n {\n public:"
      },
      {
        "sha": "b21f18563c94c0ee9dd50e279de441f6a5d33f21",
        "filename": "src/mruset.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b8de05d0a6696dff4b7dccec5b74889f3cdc486/src/mruset.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b8de05d0a6696dff4b7dccec5b74889f3cdc486/src/mruset.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/mruset.h?ref=6b8de05d0a6696dff4b7dccec5b74889f3cdc486",
        "patch": "@@ -7,6 +7,7 @@\n #include <set>\n #include <deque>\n \n+/** STL-like set container that only keeps the most recent N elements. */\n template <typename T> class mruset\n {\n public:"
      },
      {
        "sha": "ed9954bd7d48f199d3893ac2ed9be0b1516bb206",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b8de05d0a6696dff4b7dccec5b74889f3cdc486/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b8de05d0a6696dff4b7dccec5b74889f3cdc486/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=6b8de05d0a6696dff4b7dccec5b74889f3cdc486",
        "patch": "@@ -69,7 +69,7 @@ class CRequestTracker\n };\n \n \n-\n+/** Thread types */\n enum threadId\n {\n     THREAD_SOCKETHANDLER,\n@@ -105,7 +105,7 @@ extern std::map<CInv, int64> mapAlreadyAskedFor;\n \n \n \n-\n+/** Information about a peer */\n class CNode\n {\n public:"
      },
      {
        "sha": "b5f9d5fad98bdd93e84e1ac86ac4cdf993b8e53f",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b8de05d0a6696dff4b7dccec5b74889f3cdc486/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b8de05d0a6696dff4b7dccec5b74889f3cdc486/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=6b8de05d0a6696dff4b7dccec5b74889f3cdc486",
        "patch": "@@ -30,7 +30,7 @@\n extern int nConnectTimeout;\n \n \n-// IP address (IPv6, or IPv4 using mapped IPv6 range (::FFFF:0:0/96))\n+/** IP address (IPv6, or IPv4 using mapped IPv6 range (::FFFF:0:0/96)) */\n class CNetAddr\n {\n     protected:\n@@ -81,6 +81,7 @@ class CNetAddr\n             )\n };\n \n+/** A combnation of a network address (CNetAddr) and a (TCP) port */\n class CService : public CNetAddr\n {\n     protected:"
      },
      {
        "sha": "e639127355a246f1039ecd16e78d6c448c88a6a6",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 9,
        "deletions": 6,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b8de05d0a6696dff4b7dccec5b74889f3cdc486/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b8de05d0a6696dff4b7dccec5b74889f3cdc486/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=6b8de05d0a6696dff4b7dccec5b74889f3cdc486",
        "patch": "@@ -22,15 +22,15 @@ static inline unsigned short GetDefaultPort(const bool testnet = fTestNet)\n     return testnet ? 18333 : 8333;\n }\n \n-//\n-// Message header\n-//  (4) message start\n-//  (12) command\n-//  (4) size\n-//  (4) checksum\n \n extern unsigned char pchMessageStart[4];\n \n+/** Message header.\n+ * (4) message start.\n+ * (12) command.\n+ * (4) size.\n+ * (4) checksum.\n+ */\n class CMessageHeader\n {\n     public:\n@@ -57,11 +57,13 @@ class CMessageHeader\n         unsigned int nChecksum;\n };\n \n+/** nServices flags */\n enum\n {\n     NODE_NETWORK = (1 << 0),\n };\n \n+/** A CService with information about it as peer */\n class CAddress : public CService\n {\n     public:\n@@ -97,6 +99,7 @@ class CAddress : public CService\n         int64 nLastTry;\n };\n \n+/** inv message data */\n class CInv\n {\n     public:"
      },
      {
        "sha": "524d08b3ec668bf3cb41307fbceb50e9213bbd11",
        "filename": "src/script.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b8de05d0a6696dff4b7dccec5b74889f3cdc486/src/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b8de05d0a6696dff4b7dccec5b74889f3cdc486/src/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.h?ref=6b8de05d0a6696dff4b7dccec5b74889f3cdc486",
        "patch": "@@ -15,6 +15,7 @@\n class CTransaction;\n class CKeyStore;\n \n+/** Signature hash types/flags */\n enum\n {\n     SIGHASH_ALL = 1,\n@@ -36,6 +37,7 @@ enum txnouttype\n \n const char* GetTxnOutputType(txnouttype t);\n \n+/** Script opcodes */\n enum opcodetype\n {\n     // push value\n@@ -212,7 +214,7 @@ inline std::string StackString(const std::vector<std::vector<unsigned char> >& v\n \n \n \n-\n+/** Serialized script, used inside transaction inputs and outputs */\n class CScript : public std::vector<unsigned char>\n {\n protected:"
      },
      {
        "sha": "25777fe3c5ab4f8753fb91d66f574e25eb44926b",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 16,
        "deletions": 18,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b8de05d0a6696dff4b7dccec5b74889f3cdc486/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b8de05d0a6696dff4b7dccec5b74889f3cdc486/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=6b8de05d0a6696dff4b7dccec5b74889f3cdc486",
        "patch": "@@ -265,11 +265,11 @@ uint64 ReadCompactSize(Stream& is)\n \n \n \n-//\n-// Wrapper for serializing arrays and POD\n-// There's a clever template way to make arrays serialize normally, but MSVC6 doesn't support it\n-//\n #define FLATDATA(obj)   REF(CFlatData((char*)&(obj), (char*)&(obj) + sizeof(obj)))\n+\n+/** Wrapper for serializing arrays and POD.\n+ * There's a clever template way to make arrays serialize normally, but MSVC6 doesn't support it.\n+ */\n class CFlatData\n {\n protected:\n@@ -302,9 +302,7 @@ class CFlatData\n \n \n \n-//\n-// string stored as a fixed length field\n-//\n+/** string stored as a fixed length field */\n template<std::size_t LEN>\n class CFixedFieldString\n {\n@@ -856,11 +854,11 @@ struct zero_after_free_allocator : public std::allocator<T>\n \n \n \n-//\n-// Double ended buffer combining vector and stream-like interfaces.\n-// >> and << read and write unformatted data using the above serialization templates.\n-// Fills with data in linear time; some stringstream implementations take N^2 time.\n-//\n+/** Double ended buffer combining vector and stream-like interfaces.\n+ *\n+ * >> and << read and write unformatted data using the above serialization templates.\n+ * Fills with data in linear time; some stringstream implementations take N^2 time.\n+ */\n class CDataStream\n {\n protected:\n@@ -1220,12 +1218,12 @@ int main(int argc, char *argv[])\n \n \n \n-//\n-// Automatic closing wrapper for FILE*\n-//  - Will automatically close the file when it goes out of scope if not null.\n-//  - If you're returning the file pointer, return file.release().\n-//  - If you need to close the file early, use file.fclose() instead of fclose(file).\n-//\n+/** RAII wrapper for FILE*.\n+ *\n+ * Will automatically close the file when it goes out of scope if not null.\n+ * If you're returning the file pointer, return file.release().\n+ * If you need to close the file early, use file.fclose() instead of fclose(file).\n+ */\n class CAutoFile\n {\n protected:"
      },
      {
        "sha": "cfc2eb128eba49aaf5cdba3c3fb5b5be0f3d3ca2",
        "filename": "src/uint256.h",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b8de05d0a6696dff4b7dccec5b74889f3cdc486/src/uint256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b8de05d0a6696dff4b7dccec5b74889f3cdc486/src/uint256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/uint256.h?ref=6b8de05d0a6696dff4b7dccec5b74889f3cdc486",
        "patch": "@@ -19,8 +19,9 @@ inline int Testuint256AdHoc(std::vector<std::string> vArg);\n \n \n \n-// We have to keep a separate base class without constructors\n-// so the compiler will let us use it in a union\n+/** Base class without constructors for uint256 and uint160.\n+ * This makes the compiler let u use it in a union.\n+ */\n template<unsigned int BITS>\n class base_uint\n {\n@@ -393,6 +394,7 @@ typedef base_uint<256> base_uint256;\n // uint160\n //\n \n+/** 160-bit unsigned integer */\n class uint160 : public base_uint160\n {\n public:\n@@ -507,6 +509,7 @@ inline const uint160 operator-(const uint160& a, const uint160& b)      { return\n // uint256\n //\n \n+/** 256-bit unsigned integer */\n class uint256 : public base_uint256\n {\n public:"
      },
      {
        "sha": "4fa5a08982b3e624df20d39080b9726887b060f2",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b8de05d0a6696dff4b7dccec5b74889f3cdc486/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b8de05d0a6696dff4b7dccec5b74889f3cdc486/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=6b8de05d0a6696dff4b7dccec5b74889f3cdc486",
        "patch": "@@ -179,7 +179,7 @@ void AddTimeData(const CNetAddr& ip, int64 nTime);\n \n \n \n-// Wrapper to automatically initialize mutex\n+/** Wrapper to automatically initialize mutex. */\n class CCriticalSection\n {\n protected:\n@@ -192,7 +192,7 @@ class CCriticalSection\n     bool TryEnter(const char* pszName, const char* pszFile, int nLine);\n };\n \n-// Automatically leave critical section when leaving block, needed for exception safety\n+/** RAII object that acquires mutex. Needed for exception safety. */\n class CCriticalBlock\n {\n protected:\n@@ -225,6 +225,7 @@ class CCriticalBlock\n #define LEAVE_CRITICAL_SECTION(cs) \\\n     (cs).Leave()\n \n+/** RAII object that tries to acquire mutex. Needed for exception safety. */\n class CTryCriticalBlock\n {\n protected:\n@@ -523,8 +524,9 @@ inline uint160 Hash160(const std::vector<unsigned char>& vch)\n }\n \n \n-// Median filter over a stream of values\n-// Returns the median of the last N numbers\n+/** Median filter over a stream of values. \n+ * Returns the median of the last N numbers\n+ */\n template <typename T> class CMedianFilter\n {\n private:"
      },
      {
        "sha": "e1065cff38104c54bef138c2d14a6174b0a1272f",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 15,
        "deletions": 20,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b8de05d0a6696dff4b7dccec5b74889f3cdc486/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b8de05d0a6696dff4b7dccec5b74889f3cdc486/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=6b8de05d0a6696dff4b7dccec5b74889f3cdc486",
        "patch": "@@ -14,6 +14,7 @@ class CWalletTx;\n class CReserveKey;\n class CWalletDB;\n \n+/** (client) version numbers for particular wallet features */\n enum WalletFeature\n {\n     FEATURE_BASE = 10500, // the earliest version new wallets supports (only useful for getinfo's clientversion output)\n@@ -24,9 +25,9 @@ enum WalletFeature\n     FEATURE_LATEST = 60000\n };\n \n-// A CWallet is an extension of a keystore, which also maintains a set of\n-// transactions and balances, and provides the ability to create new\n-// transactions\n+/** A CWallet is an extension of a keystore, which also maintains a set of transactions and balances,\n+ * and provides the ability to create new transactions.\n+ */\n class CWallet : public CCryptoKeyStore\n {\n private:\n@@ -245,7 +246,7 @@ class CWallet : public CCryptoKeyStore\n     int GetVersion() { return nWalletVersion; }\n };\n \n-\n+/** A key allocated from the key pool. */\n class CReserveKey\n {\n protected:\n@@ -271,11 +272,9 @@ class CReserveKey\n };\n \n \n-//\n-// A transaction with a bunch of additional info that only the owner cares\n-// about.  It includes any unrecorded transactions needed to link it back\n-// to the block chain.\n-//\n+/** A transaction with a bunch of additional info that only the owner cares about. \n+ * It includes any unrecorded transactions needed to link it back to the block chain.\n+ */\n class CWalletTx : public CMerkleTx\n {\n private:\n@@ -580,9 +579,7 @@ class CWalletTx : public CMerkleTx\n };\n \n \n-//\n-// Private key that includes an expiration date in case it never gets used.\n-//\n+/** Private key that includes an expiration date in case it never gets used. */\n class CWalletKey\n {\n public:\n@@ -615,10 +612,9 @@ class CWalletKey\n \n \n \n-//\n-// Account information.\n-// Stored in wallet with key \"acc\"+string account name\n-//\n+/** Account information.\n+ * Stored in wallet with key \"acc\"+string account name.\n+ */\n class CAccount\n {\n public:\n@@ -644,10 +640,9 @@ class CAccount\n \n \n \n-//\n-// Internal transfers.\n-// Database key is acentry<account><counter>\n-//\n+/** Internal transfers.\n+ * Database key is acentry<account><counter>.\n+ */\n class CAccountingEntry\n {\n public:"
      }
    ]
  }
]