[
  {
    "sha": "eedc4618820ea4acc5a34a7761a3511ede95dc9e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZWRjNDYxODgyMGVhNGFjYzVhMzRhNzc2MWEzNTExZWRlOTVkYzll",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-11-02T17:16:32Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-11-02T17:19:43Z"
      },
      "message": "Merge `doc/unit-tests.md` into `src/test/README.md`\n\nRefer to the right file in the top-level README.md.\n\nHaving only one file with test documentation saves some confusion about\nwhere things are documented.",
      "tree": {
        "sha": "c495cc72e85986ce769d13e6e4da139172a12f29",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c495cc72e85986ce769d13e6e4da139172a12f29"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eedc4618820ea4acc5a34a7761a3511ede95dc9e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eedc4618820ea4acc5a34a7761a3511ede95dc9e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eedc4618820ea4acc5a34a7761a3511ede95dc9e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eedc4618820ea4acc5a34a7761a3511ede95dc9e/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a4fd8dff68369de497354574624b740f42175b1b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4fd8dff68369de497354574624b740f42175b1b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a4fd8dff68369de497354574624b740f42175b1b"
      }
    ],
    "stats": {
      "total": 71,
      "additions": 37,
      "deletions": 34
    },
    "files": [
      {
        "sha": "38a90dde4969f6a00ce1ceb17df7c2d8dd532605",
        "filename": "README.md",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eedc4618820ea4acc5a34a7761a3511ede95dc9e/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eedc4618820ea4acc5a34a7761a3511ede95dc9e/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/README.md?ref=eedc4618820ea4acc5a34a7761a3511ede95dc9e",
        "patch": "@@ -49,9 +49,10 @@ lots of money.\n \n ### Automated Testing\n \n-Developers are strongly encouraged to write [unit tests](/doc/unit-tests.md) for new code, and to\n+Developers are strongly encouraged to write [unit tests](src/test/README.md) for new code, and to\n submit new unit tests for old code. Unit tests can be compiled and run\n-(assuming they weren't disabled in configure) with: `make check`\n+(assuming they weren't disabled in configure) with: `make check`. Further details on running\n+and extending unit tests can be found in [/src/test/README.md](/src/test/README.md).\n \n There are also [regression and integration tests](/qa) of the RPC interface, written\n in Python, that are run automatically on the build server."
      },
      {
        "sha": "8b9c0ea2625f0a94a4c0812813c3d6517c3328f4",
        "filename": "doc/README.md",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eedc4618820ea4acc5a34a7761a3511ede95dc9e/doc/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eedc4618820ea4acc5a34a7761a3511ede95dc9e/doc/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README.md?ref=eedc4618820ea4acc5a34a7761a3511ede95dc9e",
        "patch": "@@ -53,7 +53,6 @@ The Bitcoin repo's [root README](/README.md) contains relevant information on th\n - [Source Code Documentation (External Link)](https://dev.visucore.com/bitcoin/doxygen/)\n - [Translation Process](translation_process.md)\n - [Translation Strings Policy](translation_strings_policy.md)\n-- [Unit Tests](unit-tests.md)\n - [Travis CI](travis-ci.md)\n - [Unauthenticated REST Interface](REST-interface.md)\n - [Shared Libraries](shared-libraries.md)"
      },
      {
        "sha": "afaece829c77d4832364231db459f25c23450e49",
        "filename": "doc/unit-tests.md",
        "status": "removed",
        "additions": 0,
        "deletions": 18,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a4fd8dff68369de497354574624b740f42175b1b/doc/unit-tests.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a4fd8dff68369de497354574624b740f42175b1b/doc/unit-tests.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/unit-tests.md?ref=a4fd8dff68369de497354574624b740f42175b1b",
        "patch": "@@ -1,18 +0,0 @@\n-Compiling/running unit tests\n-------------------------------------\n-\n-Unit tests will be automatically compiled if dependencies were met in `./configure`\n-and tests weren't explicitly disabled.\n-\n-After configuring, they can be run with `make check`.\n-\n-To run the bitcoind tests manually, launch `src/test/test_bitcoin`.\n-\n-To add more bitcoind tests, add `BOOST_AUTO_TEST_CASE` functions to the existing\n-.cpp files in the `test/` directory or add new .cpp files that\n-implement new BOOST_AUTO_TEST_SUITE sections.\n-\n-To run the bitcoin-qt tests manually, launch `src/qt/test/test_bitcoin-qt`\n-\n-To add more bitcoin-qt tests, add them to the `src/qt/test/` directory and\n-the `src/qt/test/test_main.cpp` file."
      },
      {
        "sha": "8f99804e100ddf4049dc11efae2ccdca5b8c1599",
        "filename": "src/test/README.md",
        "status": "modified",
        "additions": 34,
        "deletions": 13,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eedc4618820ea4acc5a34a7761a3511ede95dc9e/src/test/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eedc4618820ea4acc5a34a7761a3511ede95dc9e/src/test/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/README.md?ref=eedc4618820ea4acc5a34a7761a3511ede95dc9e",
        "patch": "@@ -1,4 +1,36 @@\n-# Notes\n+### Compiling/running unit tests\n+\n+Unit tests will be automatically compiled if dependencies were met in `./configure`\n+and tests weren't explicitly disabled.\n+\n+After configuring, they can be run with `make check`.\n+\n+To run the bitcoind tests manually, launch `src/test/test_bitcoin`.\n+\n+To add more bitcoind tests, add `BOOST_AUTO_TEST_CASE` functions to the existing\n+.cpp files in the `test/` directory or add new .cpp files that\n+implement new BOOST_AUTO_TEST_SUITE sections.\n+\n+To run the bitcoin-qt tests manually, launch `src/qt/test/test_bitcoin-qt`\n+\n+To add more bitcoin-qt tests, add them to the `src/qt/test/` directory and\n+the `src/qt/test/test_main.cpp` file.\n+\n+### Running individual tests\n+\n+test_bitcoin has some built-in command-line arguments; for\n+example, to run just the getarg_tests verbosely:\n+\n+    test_bitcoin --log_level=all --run_test=getarg_tests\n+\n+... or to run just the doubledash test:\n+\n+    test_bitcoin --run_test=getarg_tests/doubledash\n+\n+Run `test_bitcoin --help` for the full list.\n+\n+### Note on adding test cases\n+\n The sources in this directory are unit test cases.  Boost includes a\n unit testing framework, and since bitcoin already uses boost, it makes\n sense to simply use this framework rather than require developers to\n@@ -19,22 +51,11 @@ For further reading, I found the following website to be helpful in\n explaining how the boost unit test framework works:\n [http://www.alittlemadness.com/2009/03/31/c-unit-testing-with-boosttest/](http://www.alittlemadness.com/2009/03/31/c-unit-testing-with-boosttest/).\n \n-test_bitcoin has some built-in command-line arguments; for\n-example, to run just the getarg_tests verbosely:\n-\n-    test_bitcoin --log_level=all --run_test=getarg_tests\n-\n-... or to run just the doubledash test:\n-\n-    test_bitcoin --run_test=getarg_tests/doubledash\n-\n-Run `test_bitcoin --help` for the full list.\n-\n ### bitcoin-util-test.py\n \n The test directory also contains the bitcoin-util-test.py tool, which tests bitcoin utils (currently just bitcoin-tx). This test gets run automatically during the `make check` build process. It is also possible to run the test manually from the src directory:\n \n ```\n test/bitcoin-util-test.py --srcdir=[current directory]\n \n-```\n\\ No newline at end of file\n+```"
      }
    ]
  }
]