[
  {
    "sha": "fa4fc8856b239059421a8e507b3e3e7f4b379a72",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTRmYzg4NTZiMjM5MDU5NDIxYThlNTA3YjNlM2U3ZjRiMzc5YTcy",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-12-03T23:14:08Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-12-04T15:51:56Z"
      },
      "message": "validation: Add and use HaveTxsDownloaded where appropriate",
      "tree": {
        "sha": "72b43baae4aafdcb9714f76ecb822a9b0fe63723",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/72b43baae4aafdcb9714f76ecb822a9b0fe63723"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa4fc8856b239059421a8e507b3e3e7f4b379a72",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJcBqKcAAoJEM4rdWl+aaVIr+gMALbGec6G53CXptiYbbICVW2Q\nny7pX98xSnBWzlAUzA1ipsWMmc6g+CaMasNwdaSj1xv1GFyKb9pPwP2zH721ejsF\n/M8l7nOfPA1XGUj8VMci5g6FlQ8AvgsliD8Z6KpoHMGSJ1Ev8yjD9HoFzqmgHwfQ\neZoJEk5yhHlDqOFOi70cc8RzV1H5Nr6ulDfaAvRA5qOq+reJnYi4CxCnWCTPDLWI\nkgqS8Q8Rna2z1jPwp/xAIxsEOljPrAaYG0WmJ4bmYDCv5tAAYMyli8P31KMsdyC4\nFhIBhzsJjmL50Y+mgPamOVDoCJBqCAnb+Y9+EqGh0tTiyigEvscwIuVzlzke22Ni\n+qRWsPEKOP8m0aOe6gq2qziavYMJWb1fNTyfwrZlqetOOmhTICwk8tW6Q5P4OtHf\nUdg3BwtRhaYkJcpoYAoMxPqO32eRp073ISLw2/76GxXKbijuegaOUo7h+QZsxUHL\nHQDm0ifloiPLWymf6kB9XqP7VXRVG7wQucHGmA67Ng==\n=0diP\n-----END PGP SIGNATURE-----",
        "payload": "tree 72b43baae4aafdcb9714f76ecb822a9b0fe63723\nparent ed12fd83ca7999a896350197533de5e9202bc2fe\nauthor MarcoFalke <falke.marco@gmail.com> 1543878848 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1543938716 -0500\n\nvalidation: Add and use HaveTxsDownloaded where appropriate\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa4fc8856b239059421a8e507b3e3e7f4b379a72",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa4fc8856b239059421a8e507b3e3e7f4b379a72",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa4fc8856b239059421a8e507b3e3e7f4b379a72/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ed12fd83ca7999a896350197533de5e9202bc2fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed12fd83ca7999a896350197533de5e9202bc2fe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ed12fd83ca7999a896350197533de5e9202bc2fe"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 24,
      "deletions": 15
    },
    "files": [
      {
        "sha": "3b786664af222a7ba02d671ad356475884d7e246",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa4fc8856b239059421a8e507b3e3e7f4b379a72/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa4fc8856b239059421a8e507b3e3e7f4b379a72/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=fa4fc8856b239059421a8e507b3e3e7f4b379a72",
        "patch": "@@ -294,6 +294,15 @@ class CBlockIndex\n         return *phashBlock;\n     }\n \n+    /**\n+     * Check whether this block's and all previous blocks' transactions have been\n+     * downloaded (and stored to disk) at some point.\n+     *\n+     * Does not imply the transactions are consensus-valid (ConnectTip might fail)\n+     * Does not imply the transactions are still stored on disk. (IsBlockPruned might return true)\n+     */\n+    bool HaveTxsDownloaded() const { return nChainTx != 0; }\n+\n     int64_t GetBlockTime() const\n     {\n         return (int64_t)nTime;"
      },
      {
        "sha": "40c511257812c27fb8fb528750965e362dbdc0c2",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa4fc8856b239059421a8e507b3e3e7f4b379a72/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa4fc8856b239059421a8e507b3e3e7f4b379a72/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=fa4fc8856b239059421a8e507b3e3e7f4b379a72",
        "patch": "@@ -566,7 +566,7 @@ static void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vec\n                 return;\n             }\n             if (pindex->nStatus & BLOCK_HAVE_DATA || chainActive.Contains(pindex)) {\n-                if (pindex->nChainTx)\n+                if (pindex->HaveTxsDownloaded())\n                     state->pindexLastCommonBlock = pindex;\n             } else if (mapBlocksInFlight.count(pindex->GetBlockHash()) == 0) {\n                 // The block is not already downloaded, and not yet in flight.\n@@ -1124,7 +1124,7 @@ void static ProcessGetBlockData(CNode* pfrom, const CChainParams& chainparams, c\n         LOCK(cs_main);\n         const CBlockIndex* pindex = LookupBlockIndex(inv.hash);\n         if (pindex) {\n-            if (pindex->nChainTx && !pindex->IsValid(BLOCK_VALID_SCRIPTS) &&\n+            if (pindex->HaveTxsDownloaded() && !pindex->IsValid(BLOCK_VALID_SCRIPTS) &&\n                     pindex->IsValid(BLOCK_VALID_TREE)) {\n                 // If we have the block and all of its parents, but have not yet validated it,\n                 // we might be in the middle of connecting it (ie in the unlock of cs_main"
      },
      {
        "sha": "1d62027baf231807305530e74e040b2a3542f43b",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa4fc8856b239059421a8e507b3e3e7f4b379a72/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa4fc8856b239059421a8e507b3e3e7f4b379a72/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=fa4fc8856b239059421a8e507b3e3e7f4b379a72",
        "patch": "@@ -1458,7 +1458,7 @@ static UniValue getchaintips(const JSONRPCRequest& request)\n         } else if (block->nStatus & BLOCK_FAILED_MASK) {\n             // This block or one of its ancestors is invalid.\n             status = \"invalid\";\n-        } else if (block->nChainTx == 0) {\n+        } else if (!block->HaveTxsDownloaded()) {\n             // This block cannot be connected because full block data for it or one of its parents is missing.\n             status = \"headers-only\";\n         } else if (block->IsValid(BLOCK_VALID_SCRIPTS)) {"
      },
      {
        "sha": "0543804e34d088a2d1e0bdc96b959f9c592851ea",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa4fc8856b239059421a8e507b3e3e7f4b379a72/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa4fc8856b239059421a8e507b3e3e7f4b379a72/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=fa4fc8856b239059421a8e507b3e3e7f4b379a72",
        "patch": "@@ -2487,7 +2487,7 @@ CBlockIndex* CChainState::FindMostWorkChain() {\n         CBlockIndex *pindexTest = pindexNew;\n         bool fInvalidAncestor = false;\n         while (pindexTest && !chainActive.Contains(pindexTest)) {\n-            assert(pindexTest->nChainTx || pindexTest->nHeight == 0);\n+            assert(pindexTest->HaveTxsDownloaded() || pindexTest->nHeight == 0);\n \n             // Pruned nodes may have entries in setBlockIndexCandidates for\n             // which block files have been deleted.  Remove those as candidates\n@@ -2777,7 +2777,7 @@ bool CChainState::PreciousBlock(CValidationState& state, const CChainParams& par\n             // call preciousblock 2**31-1 times on the same set of tips...\n             nBlockReverseSequenceId--;\n         }\n-        if (pindex->IsValid(BLOCK_VALID_TRANSACTIONS) && pindex->nChainTx) {\n+        if (pindex->IsValid(BLOCK_VALID_TRANSACTIONS) && pindex->HaveTxsDownloaded()) {\n             setBlockIndexCandidates.insert(pindex);\n             PruneBlockIndexCandidates();\n         }\n@@ -2838,7 +2838,7 @@ bool CChainState::InvalidateBlock(CValidationState& state, const CChainParams& c\n     // add it again.\n     BlockMap::iterator it = mapBlockIndex.begin();\n     while (it != mapBlockIndex.end()) {\n-        if (it->second->IsValid(BLOCK_VALID_TRANSACTIONS) && it->second->nChainTx && !setBlockIndexCandidates.value_comp()(it->second, chainActive.Tip())) {\n+        if (it->second->IsValid(BLOCK_VALID_TRANSACTIONS) && it->second->HaveTxsDownloaded() && !setBlockIndexCandidates.value_comp()(it->second, chainActive.Tip())) {\n             setBlockIndexCandidates.insert(it->second);\n         }\n         it++;\n@@ -2868,7 +2868,7 @@ void CChainState::ResetBlockFailureFlags(CBlockIndex *pindex) {\n         if (!it->second->IsValid() && it->second->GetAncestor(nHeight) == pindex) {\n             it->second->nStatus &= ~BLOCK_FAILED_MASK;\n             setDirtyBlockIndex.insert(it->second);\n-            if (it->second->IsValid(BLOCK_VALID_TRANSACTIONS) && it->second->nChainTx && setBlockIndexCandidates.value_comp()(chainActive.Tip(), it->second)) {\n+            if (it->second->IsValid(BLOCK_VALID_TRANSACTIONS) && it->second->HaveTxsDownloaded() && setBlockIndexCandidates.value_comp()(chainActive.Tip(), it->second)) {\n                 setBlockIndexCandidates.insert(it->second);\n             }\n             if (it->second == pindexBestInvalid) {\n@@ -2946,7 +2946,7 @@ void CChainState::ReceivedBlockTransactions(const CBlock& block, CBlockIndex* pi\n     pindexNew->RaiseValidity(BLOCK_VALID_TRANSACTIONS);\n     setDirtyBlockIndex.insert(pindexNew);\n \n-    if (pindexNew->pprev == nullptr || pindexNew->pprev->nChainTx) {\n+    if (pindexNew->pprev == nullptr || pindexNew->pprev->HaveTxsDownloaded()) {\n         // If pindexNew is the genesis block or all parents are BLOCK_VALID_TRANSACTIONS.\n         std::deque<CBlockIndex*> queue;\n         queue.push_back(pindexNew);\n@@ -3839,7 +3839,7 @@ bool CChainState::LoadBlockIndex(const Consensus::Params& consensus_params, CBlo\n         // Pruned nodes may have deleted the block.\n         if (pindex->nTx > 0) {\n             if (pindex->pprev) {\n-                if (pindex->pprev->nChainTx) {\n+                if (pindex->pprev->HaveTxsDownloaded()) {\n                     pindex->nChainTx = pindex->pprev->nChainTx + pindex->nTx;\n                 } else {\n                     pindex->nChainTx = 0;\n@@ -3853,7 +3853,7 @@ bool CChainState::LoadBlockIndex(const Consensus::Params& consensus_params, CBlo\n             pindex->nStatus |= BLOCK_FAILED_CHILD;\n             setDirtyBlockIndex.insert(pindex);\n         }\n-        if (pindex->IsValid(BLOCK_VALID_TRANSACTIONS) && (pindex->nChainTx || pindex->pprev == nullptr))\n+        if (pindex->IsValid(BLOCK_VALID_TRANSACTIONS) && (pindex->HaveTxsDownloaded() || pindex->pprev == nullptr))\n             setBlockIndexCandidates.insert(pindex);\n         if (pindex->nStatus & BLOCK_FAILED_MASK && (!pindexBestInvalid || pindex->nChainWork > pindexBestInvalid->nChainWork))\n             pindexBestInvalid = pindex;\n@@ -4222,7 +4222,7 @@ bool CChainState::RewindBlockIndex(const CChainParams& params)\n                     ++ret.first;\n                 }\n             }\n-        } else if (pindexIter->IsValid(BLOCK_VALID_TRANSACTIONS) && pindexIter->nChainTx) {\n+        } else if (pindexIter->IsValid(BLOCK_VALID_TRANSACTIONS) && pindexIter->HaveTxsDownloaded()) {\n             setBlockIndexCandidates.insert(pindexIter);\n         }\n     }\n@@ -4523,7 +4523,7 @@ void CChainState::CheckBlockIndex(const Consensus::Params& consensusParams)\n             assert(pindex->GetBlockHash() == consensusParams.hashGenesisBlock); // Genesis block's hash must match.\n             assert(pindex == chainActive.Genesis()); // The current active chain's genesis block must be this block.\n         }\n-        if (pindex->nChainTx == 0) assert(pindex->nSequenceId <= 0);  // nSequenceId can't be set positive for blocks that aren't linked (negative is used for preciousblock)\n+        if (!pindex->HaveTxsDownloaded()) assert(pindex->nSequenceId <= 0); // nSequenceId can't be set positive for blocks that aren't linked (negative is used for preciousblock)\n         // VALID_TRANSACTIONS is equivalent to nTx > 0 for all nodes (whether or not pruning has occurred).\n         // HAVE_DATA is only equivalent to nTx > 0 (or VALID_TRANSACTIONS) if no pruning has occurred.\n         if (!fHavePruned) {\n@@ -4536,9 +4536,9 @@ void CChainState::CheckBlockIndex(const Consensus::Params& consensusParams)\n         }\n         if (pindex->nStatus & BLOCK_HAVE_UNDO) assert(pindex->nStatus & BLOCK_HAVE_DATA);\n         assert(((pindex->nStatus & BLOCK_VALID_MASK) >= BLOCK_VALID_TRANSACTIONS) == (pindex->nTx > 0)); // This is pruning-independent.\n-        // All parents having had data (at some point) is equivalent to all parents being VALID_TRANSACTIONS, which is equivalent to nChainTx being set.\n-        assert((pindexFirstNeverProcessed != nullptr) == (pindex->nChainTx == 0)); // nChainTx != 0 is used to signal that all parent blocks have been processed (but may have been pruned).\n-        assert((pindexFirstNotTransactionsValid != nullptr) == (pindex->nChainTx == 0));\n+        // All parents having had data (at some point) is equivalent to all parents being VALID_TRANSACTIONS, which is equivalent to HaveTxsDownloaded().\n+        assert((pindexFirstNeverProcessed == nullptr) == pindex->HaveTxsDownloaded());\n+        assert((pindexFirstNotTransactionsValid == nullptr) == pindex->HaveTxsDownloaded());\n         assert(pindex->nHeight == nHeight); // nHeight must be consistent.\n         assert(pindex->pprev == nullptr || pindex->nChainWork >= pindex->pprev->nChainWork); // For every block except the genesis block, the chainwork must be larger than the parent's.\n         assert(nHeight < 2 || (pindex->pskip && (pindex->pskip->nHeight < nHeight))); // The pskip pointer must point back for all but the first 2 blocks."
      }
    ]
  }
]