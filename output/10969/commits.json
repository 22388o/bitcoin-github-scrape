[
  {
    "sha": "64fb0ac016c7fd01c60c39af60f6431bac57f9ee",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NGZiMGFjMDE2YzdmZDAxYzYwYzM5YWY2MGY2NDMxYmFjNTdmOWVl",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-08-01T10:22:41Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-08-16T14:33:25Z"
      },
      "message": "Declare single-argument (non-converting) constructors \"explicit\"\n\nIn order to avoid unintended implicit conversions.",
      "tree": {
        "sha": "8d8523dd68167f9a6299dd92cc9dd5e0fd162b23",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8d8523dd68167f9a6299dd92cc9dd5e0fd162b23"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/64fb0ac016c7fd01c60c39af60f6431bac57f9ee",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64fb0ac016c7fd01c60c39af60f6431bac57f9ee",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/64fb0ac016c7fd01c60c39af60f6431bac57f9ee",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "22e301a3d56dc9e6878380ee92c7d19ca43119d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22e301a3d56dc9e6878380ee92c7d19ca43119d2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/22e301a3d56dc9e6878380ee92c7d19ca43119d2"
      }
    ],
    "stats": {
      "total": 210,
      "additions": 105,
      "deletions": 105
    },
    "files": [
      {
        "sha": "d930de204d799d7859da97d47b146d0fb2ee675d",
        "filename": "src/addrdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/addrdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/addrdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrdb.h?ref=64fb0ac016c7fd01c60c39af60f6431bac57f9ee",
        "patch": "@@ -37,7 +37,7 @@ class CBanEntry\n         SetNull();\n     }\n \n-    CBanEntry(int64_t nCreateTimeIn)\n+    explicit CBanEntry(int64_t nCreateTimeIn)\n     {\n         SetNull();\n         nCreateTime = nCreateTimeIn;"
      },
      {
        "sha": "3802f953f9e08756724cc958754ea8324d703da5",
        "filename": "src/base58.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.cpp?ref=64fb0ac016c7fd01c60c39af60f6431bac57f9ee",
        "patch": "@@ -218,7 +218,7 @@ class CBitcoinAddressVisitor : public boost::static_visitor<bool>\n     CBitcoinAddress* addr;\n \n public:\n-    CBitcoinAddressVisitor(CBitcoinAddress* addrIn) : addr(addrIn) {}\n+    explicit CBitcoinAddressVisitor(CBitcoinAddress* addrIn) : addr(addrIn) {}\n \n     bool operator()(const CKeyID& id) const { return addr->Set(id); }\n     bool operator()(const CScriptID& id) const { return addr->Set(id); }"
      },
      {
        "sha": "b7ae5c2d572d45bc865a322b0d8d938deb57e499",
        "filename": "src/bench/checkqueue.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/bench/checkqueue.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/bench/checkqueue.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/checkqueue.cpp?ref=64fb0ac016c7fd01c60c39af60f6431bac57f9ee",
        "patch": "@@ -67,7 +67,7 @@ static void CCheckQueueSpeedPrevectorJob(benchmark::State& state)\n         prevector<PREVECTOR_SIZE, uint8_t> p;\n         PrevectorJob(){\n         }\n-        PrevectorJob(FastRandomContext& insecure_rand){\n+        explicit PrevectorJob(FastRandomContext& insecure_rand){\n             p.resize(insecure_rand.randrange(PREVECTOR_SIZE*2));\n         }\n         bool operator()()"
      },
      {
        "sha": "50478f9f321e4bc3e02a193c6fc47581fad8d202",
        "filename": "src/blockencodings.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/blockencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/blockencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockencodings.h?ref=64fb0ac016c7fd01c60c39af60f6431bac57f9ee",
        "patch": "@@ -16,7 +16,7 @@ struct TransactionCompressor {\n private:\n     CTransactionRef& tx;\n public:\n-    TransactionCompressor(CTransactionRef& txIn) : tx(txIn) {}\n+    explicit TransactionCompressor(CTransactionRef& txIn) : tx(txIn) {}\n \n     ADD_SERIALIZE_METHODS;\n \n@@ -75,7 +75,7 @@ class BlockTransactions {\n     std::vector<CTransactionRef> txn;\n \n     BlockTransactions() {}\n-    BlockTransactions(const BlockTransactionsRequest& req) :\n+    explicit BlockTransactions(const BlockTransactionsRequest& req) :\n         blockhash(req.blockhash), txn(req.indexes.size()) {}\n \n     ADD_SERIALIZE_METHODS;\n@@ -198,7 +198,7 @@ class PartiallyDownloadedBlock {\n     CTxMemPool* pool;\n public:\n     CBlockHeader header;\n-    PartiallyDownloadedBlock(CTxMemPool* poolIn) : pool(poolIn) {}\n+    explicit PartiallyDownloadedBlock(CTxMemPool* poolIn) : pool(poolIn) {}\n \n     // extra_txn is a list of extra transactions to look at, in <witness hash, reference> form\n     ReadStatus InitData(const CBlockHeaderAndShortTxIDs& cmpctblock, const std::vector<std::pair<uint256, CTransactionRef>>& extra_txn);"
      },
      {
        "sha": "ef7e6f955483ffb946255ad77bec1016e1a205dd",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=64fb0ac016c7fd01c60c39af60f6431bac57f9ee",
        "patch": "@@ -247,7 +247,7 @@ class CBlockIndex\n         SetNull();\n     }\n \n-    CBlockIndex(const CBlockHeader& block)\n+    explicit CBlockIndex(const CBlockHeader& block)\n     {\n         SetNull();\n "
      },
      {
        "sha": "6377fbe942ecb34bf471ded61edcca1ccced622b",
        "filename": "src/checkqueue.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/checkqueue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/checkqueue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkqueue.h?ref=64fb0ac016c7fd01c60c39af60f6431bac57f9ee",
        "patch": "@@ -131,7 +131,7 @@ class CCheckQueue\n     boost::mutex ControlMutex;\n \n     //! Create a new check queue\n-    CCheckQueue(unsigned int nBatchSizeIn) : nIdle(0), nTotal(0), fAllOk(true), nTodo(0), fQuit(false), nBatchSize(nBatchSizeIn) {}\n+    explicit CCheckQueue(unsigned int nBatchSizeIn) : nIdle(0), nTotal(0), fAllOk(true), nTodo(0), fQuit(false), nBatchSize(nBatchSizeIn) {}\n \n     //! Worker thread\n     void Thread()"
      },
      {
        "sha": "094c1bcfe17ce6149aa78b93bd55bc0d76f06426",
        "filename": "src/compressor.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/compressor.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/compressor.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compressor.h?ref=64fb0ac016c7fd01c60c39af60f6431bac57f9ee",
        "patch": "@@ -53,7 +53,7 @@ class CScriptCompressor\n     unsigned int GetSpecialSize(unsigned int nSize) const;\n     bool Decompress(unsigned int nSize, const std::vector<unsigned char> &out);\n public:\n-    CScriptCompressor(CScript &scriptIn) : script(scriptIn) { }\n+    explicit CScriptCompressor(CScript &scriptIn) : script(scriptIn) { }\n \n     template<typename Stream>\n     void Serialize(Stream &s) const {\n@@ -99,7 +99,7 @@ class CTxOutCompressor\n     static uint64_t CompressAmount(uint64_t nAmount);\n     static uint64_t DecompressAmount(uint64_t nAmount);\n \n-    CTxOutCompressor(CTxOut &txoutIn) : txout(txoutIn) { }\n+    explicit CTxOutCompressor(CTxOut &txoutIn) : txout(txoutIn) { }\n \n     ADD_SERIALIZE_METHODS;\n "
      },
      {
        "sha": "a7b63b19dfbc6318684d85d2aa514bfe99d1961c",
        "filename": "src/crypto/aes.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/crypto/aes.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/crypto/aes.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/aes.h?ref=64fb0ac016c7fd01c60c39af60f6431bac57f9ee",
        "patch": "@@ -22,7 +22,7 @@ class AES128Encrypt\n     AES128_ctx ctx;\n \n public:\n-    AES128Encrypt(const unsigned char key[16]);\n+    explicit AES128Encrypt(const unsigned char key[16]);\n     ~AES128Encrypt();\n     void Encrypt(unsigned char ciphertext[16], const unsigned char plaintext[16]) const;\n };\n@@ -34,7 +34,7 @@ class AES128Decrypt\n     AES128_ctx ctx;\n \n public:\n-    AES128Decrypt(const unsigned char key[16]);\n+    explicit AES128Decrypt(const unsigned char key[16]);\n     ~AES128Decrypt();\n     void Decrypt(unsigned char plaintext[16], const unsigned char ciphertext[16]) const;\n };\n@@ -46,7 +46,7 @@ class AES256Encrypt\n     AES256_ctx ctx;\n \n public:\n-    AES256Encrypt(const unsigned char key[32]);\n+    explicit AES256Encrypt(const unsigned char key[32]);\n     ~AES256Encrypt();\n     void Encrypt(unsigned char ciphertext[16], const unsigned char plaintext[16]) const;\n };\n@@ -58,7 +58,7 @@ class AES256Decrypt\n     AES256_ctx ctx;\n \n public:\n-    AES256Decrypt(const unsigned char key[32]);\n+    explicit AES256Decrypt(const unsigned char key[32]);\n     ~AES256Decrypt();\n     void Decrypt(unsigned char plaintext[16], const unsigned char ciphertext[16]) const;\n };"
      },
      {
        "sha": "9246a3924e265b76749cd5ea5d17de31d1d811c1",
        "filename": "src/cuckoocache.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/cuckoocache.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/cuckoocache.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/cuckoocache.h?ref=64fb0ac016c7fd01c60c39af60f6431bac57f9ee",
        "patch": "@@ -58,7 +58,7 @@ class bit_packed_atomic_flags\n      * @post All calls to bit_is_set (without subsequent bit_unset) will return\n      * true.\n      */\n-    bit_packed_atomic_flags(uint32_t size)\n+    explicit bit_packed_atomic_flags(uint32_t size)\n     {\n         // pad out the size if needed\n         size = (size + 7) / 8;"
      },
      {
        "sha": "e19fde51c1dc5dabbebd2a1727026f9e08f830d2",
        "filename": "src/dbwrapper.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/dbwrapper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/dbwrapper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dbwrapper.h?ref=64fb0ac016c7fd01c60c39af60f6431bac57f9ee",
        "patch": "@@ -22,7 +22,7 @@ static const size_t DBWRAPPER_PREALLOC_VALUE_SIZE = 1024;\n class dbwrapper_error : public std::runtime_error\n {\n public:\n-    dbwrapper_error(const std::string& msg) : std::runtime_error(msg) {}\n+    explicit dbwrapper_error(const std::string& msg) : std::runtime_error(msg) {}\n };\n \n class CDBWrapper;\n@@ -61,7 +61,7 @@ class CDBBatch\n     /**\n      * @param[in] _parent   CDBWrapper that this batch is to be submitted to\n      */\n-    CDBBatch(const CDBWrapper &_parent) : parent(_parent), ssKey(SER_DISK, CLIENT_VERSION), ssValue(SER_DISK, CLIENT_VERSION), size_estimate(0) { };\n+    explicit CDBBatch(const CDBWrapper &_parent) : parent(_parent), ssKey(SER_DISK, CLIENT_VERSION), ssValue(SER_DISK, CLIENT_VERSION), size_estimate(0) { };\n \n     void Clear()\n     {"
      },
      {
        "sha": "ad59bb18178a696539647e591ed6317cb46baf00",
        "filename": "src/hash.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/hash.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/hash.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.h?ref=64fb0ac016c7fd01c60c39af60f6431bac57f9ee",
        "patch": "@@ -168,7 +168,7 @@ class CHashVerifier : public CHashWriter\n     Source* source;\n \n public:\n-    CHashVerifier(Source* source_) : CHashWriter(source_->GetType(), source_->GetVersion()), source(source_) {}\n+    explicit CHashVerifier(Source* source_) : CHashWriter(source_->GetType(), source_->GetVersion()), source(source_) {}\n \n     void read(char* pch, size_t nSize)\n     {"
      },
      {
        "sha": "91f96ef207234b7d854534853e02219c0c97749f",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=64fb0ac016c7fd01c60c39af60f6431bac57f9ee",
        "patch": "@@ -43,7 +43,7 @@ class HTTPRPCTimer : public RPCTimerBase\n class HTTPRPCTimerInterface : public RPCTimerInterface\n {\n public:\n-    HTTPRPCTimerInterface(struct event_base* _base) : base(_base)\n+    explicit HTTPRPCTimerInterface(struct event_base* _base) : base(_base)\n     {\n     }\n     const char* Name() override"
      },
      {
        "sha": "ed1ee5390411b373ade9c5d47c732fa0257b30ba",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=64fb0ac016c7fd01c60c39af60f6431bac57f9ee",
        "patch": "@@ -79,7 +79,7 @@ class WorkQueue\n     {\n     public:\n         WorkQueue &wq;\n-        ThreadCounter(WorkQueue &w): wq(w)\n+        explicit ThreadCounter(WorkQueue &w): wq(w)\n         {\n             std::lock_guard<std::mutex> lock(wq.cs);\n             wq.numThreads += 1;\n@@ -93,7 +93,7 @@ class WorkQueue\n     };\n \n public:\n-    WorkQueue(size_t _maxDepth) : running(true),\n+    explicit WorkQueue(size_t _maxDepth) : running(true),\n                                  maxDepth(_maxDepth),\n                                  numThreads(0)\n     {"
      },
      {
        "sha": "91ce5b4e00c7c3ba899913cabe4c9188d345576a",
        "filename": "src/httpserver.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/httpserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/httpserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.h?ref=64fb0ac016c7fd01c60c39af60f6431bac57f9ee",
        "patch": "@@ -61,7 +61,7 @@ class HTTPRequest\n     bool replySent;\n \n public:\n-    HTTPRequest(struct evhttp_request* req);\n+    explicit HTTPRequest(struct evhttp_request* req);\n     ~HTTPRequest();\n \n     enum RequestMethod {"
      },
      {
        "sha": "fbce7186262c2e483434e91d7d8d35f810bf1f22",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=64fb0ac016c7fd01c60c39af60f6431bac57f9ee",
        "patch": "@@ -136,7 +136,7 @@ bool ShutdownRequested()\n class CCoinsViewErrorCatcher : public CCoinsViewBacked\n {\n public:\n-    CCoinsViewErrorCatcher(CCoinsView* view) : CCoinsViewBacked(view) {}\n+    explicit CCoinsViewErrorCatcher(CCoinsView* view) : CCoinsViewBacked(view) {}\n     bool GetCoin(const COutPoint &outpoint, Coin &coin) const override {\n         try {\n             return CCoinsViewBacked::GetCoin(outpoint, coin);"
      },
      {
        "sha": "7afc8b458d329f3987483668ecc3e73fad64c56b",
        "filename": "src/limitedmap.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/limitedmap.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/limitedmap.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/limitedmap.h?ref=64fb0ac016c7fd01c60c39af60f6431bac57f9ee",
        "patch": "@@ -27,7 +27,7 @@ class limitedmap\n     size_type nMaxSize;\n \n public:\n-    limitedmap(size_type nMaxSizeIn)\n+    explicit limitedmap(size_type nMaxSizeIn)\n     {\n         assert(nMaxSizeIn > 0);\n         nMaxSize = nMaxSizeIn;"
      },
      {
        "sha": "6e5fe761db2e05c94215acfab10c3464ed2b0941",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=64fb0ac016c7fd01c60c39af60f6431bac57f9ee",
        "patch": "@@ -33,7 +33,7 @@ struct CBlockTemplate\n // Container for tracking updates to ancestor feerate as we include (parent)\n // transactions in a block\n struct CTxMemPoolModifiedEntry {\n-    CTxMemPoolModifiedEntry(CTxMemPool::txiter entry)\n+    explicit CTxMemPoolModifiedEntry(CTxMemPool::txiter entry)\n     {\n         iter = entry;\n         nSizeWithAncestors = entry->GetSizeWithAncestors();\n@@ -116,7 +116,7 @@ typedef indexed_modified_transaction_set::index<ancestor_score>::type::iterator\n \n struct update_for_parent_inclusion\n {\n-    update_for_parent_inclusion(CTxMemPool::txiter it) : iter(it) {}\n+    explicit update_for_parent_inclusion(CTxMemPool::txiter it) : iter(it) {}\n \n     void operator() (CTxMemPoolModifiedEntry &e)\n     {\n@@ -164,7 +164,7 @@ class BlockAssembler\n         CFeeRate blockMinFeeRate;\n     };\n \n-    BlockAssembler(const CChainParams& params);\n+    explicit BlockAssembler(const CChainParams& params);\n     BlockAssembler(const CChainParams& params, const Options& options);\n \n     /** Construct a new block template with coinbase to scriptPubKeyIn */"
      },
      {
        "sha": "596ae1139b3a200f0f222e9ec728d3c6b053f890",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=64fb0ac016c7fd01c60c39af60f6431bac57f9ee",
        "patch": "@@ -2783,7 +2783,7 @@ class CompareInvMempoolOrder\n {\n     CTxMemPool *mp;\n public:\n-    CompareInvMempoolOrder(CTxMemPool *_mempool)\n+    explicit CompareInvMempoolOrder(CTxMemPool *_mempool)\n     {\n         mp = _mempool;\n     }"
      },
      {
        "sha": "f4a43980a5cc97a5c94dcba164d58cc16ea325ca",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=64fb0ac016c7fd01c60c39af60f6431bac57f9ee",
        "patch": "@@ -32,7 +32,7 @@ class PeerLogicValidation : public CValidationInterface {\n     CConnman* connman;\n \n public:\n-    PeerLogicValidation(CConnman* connmanIn);\n+    explicit PeerLogicValidation(CConnman* connmanIn);\n \n     void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected, const std::vector<CTransactionRef>& vtxConflicted) override;\n     void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) override;"
      },
      {
        "sha": "6ca99b36b58793807f45b7edfeccdf9cd01010bc",
        "filename": "src/netaddress.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/netaddress.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/netaddress.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.h?ref=64fb0ac016c7fd01c60c39af60f6431bac57f9ee",
        "patch": "@@ -36,7 +36,7 @@ class CNetAddr\n \n     public:\n         CNetAddr();\n-        CNetAddr(const struct in_addr& ipv4Addr);\n+        explicit CNetAddr(const struct in_addr& ipv4Addr);\n         void Init();\n         void SetIP(const CNetAddr& ip);\n \n@@ -82,7 +82,7 @@ class CNetAddr\n         std::vector<unsigned char> GetGroup() const;\n         int GetReachabilityFrom(const CNetAddr *paddrPartner = nullptr) const;\n \n-        CNetAddr(const struct in6_addr& pipv6Addr, const uint32_t scope = 0);\n+        explicit CNetAddr(const struct in6_addr& pipv6Addr, const uint32_t scope = 0);\n         bool GetIn6Addr(struct in6_addr* pipv6Addr) const;\n \n         friend bool operator==(const CNetAddr& a, const CNetAddr& b);\n@@ -146,7 +146,7 @@ class CService : public CNetAddr\n         CService();\n         CService(const CNetAddr& ip, unsigned short port);\n         CService(const struct in_addr& ipv4Addr, unsigned short port);\n-        CService(const struct sockaddr_in& addr);\n+        explicit CService(const struct sockaddr_in& addr);\n         void Init();\n         unsigned short GetPort() const;\n         bool GetSockAddr(struct sockaddr* paddr, socklen_t *addrlen) const;\n@@ -160,7 +160,7 @@ class CService : public CNetAddr\n         std::string ToStringIPPort() const;\n \n         CService(const struct in6_addr& ipv6Addr, unsigned short port);\n-        CService(const struct sockaddr_in6& addr);\n+        explicit CService(const struct sockaddr_in6& addr);\n \n         ADD_SERIALIZE_METHODS;\n "
      },
      {
        "sha": "6572f0a12eb41c7e04262f4a56222c3c5fe6873e",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=64fb0ac016c7fd01c60c39af60f6431bac57f9ee",
        "patch": "@@ -29,7 +29,7 @@ class proxyType\n {\n public:\n     proxyType(): randomize_credentials(false) {}\n-    proxyType(const CService &_proxy, bool _randomize_credentials=false): proxy(_proxy), randomize_credentials(_randomize_credentials) {}\n+    explicit proxyType(const CService &_proxy, bool _randomize_credentials=false): proxy(_proxy), randomize_credentials(_randomize_credentials) {}\n \n     bool IsValid() const { return proxy.IsValid(); }\n "
      },
      {
        "sha": "79b2501c5d5821323f8ae58d888299fc1181928c",
        "filename": "src/netmessagemaker.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/netmessagemaker.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/netmessagemaker.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netmessagemaker.h?ref=64fb0ac016c7fd01c60c39af60f6431bac57f9ee",
        "patch": "@@ -12,7 +12,7 @@\n class CNetMsgMaker\n {\n public:\n-    CNetMsgMaker(int nVersionIn) : nVersion(nVersionIn){}\n+    explicit CNetMsgMaker(int nVersionIn) : nVersion(nVersionIn){}\n \n     template <typename... Args>\n     CSerializedNetMsg Make(int nFlags, std::string sCommand, Args&&... args) const"
      },
      {
        "sha": "6edaf28714e047fa78621bc3f2e0a819916cdeba",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=64fb0ac016c7fd01c60c39af60f6431bac57f9ee",
        "patch": "@@ -284,7 +284,7 @@ class FeeFilterRounder\n \n public:\n     /** Create new FeeFilterRounder */\n-    FeeFilterRounder(const CFeeRate& minIncrementalFee);\n+    explicit FeeFilterRounder(const CFeeRate& minIncrementalFee);\n \n     /** Quantize a minimum fee for privacy purpose before broadcast **/\n     CAmount round(CAmount currentMinFee);"
      },
      {
        "sha": "292df40896793f1728334c36ebee3700cc3a9426",
        "filename": "src/primitives/block.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/primitives/block.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/primitives/block.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.h?ref=64fb0ac016c7fd01c60c39af60f6431bac57f9ee",
        "patch": "@@ -129,7 +129,7 @@ struct CBlockLocator\n \n     CBlockLocator() {}\n \n-    CBlockLocator(const std::vector<uint256>& vHaveIn) : vHave(vHaveIn) {}\n+    explicit CBlockLocator(const std::vector<uint256>& vHaveIn) : vHave(vHaveIn) {}\n \n     ADD_SERIALIZE_METHODS;\n "
      },
      {
        "sha": "67e01d960666e1423c654c824cf37b7ea72f164a",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=64fb0ac016c7fd01c60c39af60f6431bac57f9ee",
        "patch": "@@ -39,7 +39,7 @@ class CMessageHeader\n     };\n     typedef unsigned char MessageStartChars[MESSAGE_START_SIZE];\n \n-    CMessageHeader(const MessageStartChars& pchMessageStartIn);\n+    explicit CMessageHeader(const MessageStartChars& pchMessageStartIn);\n     CMessageHeader(const MessageStartChars& pchMessageStartIn, const char* pszCommand, unsigned int nMessageSizeIn);\n \n     std::string GetCommand() const;"
      },
      {
        "sha": "65738d8fe225a3cb71574dfc7722638e80ae3941",
        "filename": "src/pubkey.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/pubkey.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/pubkey.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.h?ref=64fb0ac016c7fd01c60c39af60f6431bac57f9ee",
        "patch": "@@ -30,7 +30,7 @@ class CKeyID : public uint160\n {\n public:\n     CKeyID() : uint160() {}\n-    CKeyID(const uint160& in) : uint160(in) {}\n+    explicit CKeyID(const uint160& in) : uint160(in) {}\n };\n \n typedef uint256 ChainCode;\n@@ -88,7 +88,7 @@ class CPubKey\n     }\n \n     //! Construct a public key from a byte vector.\n-    CPubKey(const std::vector<unsigned char>& _vch)\n+    explicit CPubKey(const std::vector<unsigned char>& _vch)\n     {\n         Set(_vch.begin(), _vch.end());\n     }"
      },
      {
        "sha": "da6b0c4c2e3c5363f120e279b7292082a25be983",
        "filename": "src/qt/callback.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/qt/callback.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/qt/callback.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/callback.h?ref=64fb0ac016c7fd01c60c39af60f6431bac57f9ee",
        "patch": "@@ -16,7 +16,7 @@ class FunctionCallback : public Callback\n     F f;\n \n public:\n-    FunctionCallback(F f_) : f(std::move(f_)) {}\n+    explicit FunctionCallback(F f_) : f(std::move(f_)) {}\n     ~FunctionCallback() override {}\n     void call() override { f(this); }\n };"
      },
      {
        "sha": "4949c91771de1af8d9f9999bc2e0a6cb55852e93",
        "filename": "src/qt/coincontroldialog.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/qt/coincontroldialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/qt/coincontroldialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.h?ref=64fb0ac016c7fd01c60c39af60f6431bac57f9ee",
        "patch": "@@ -30,9 +30,9 @@ namespace Ui {\n class CCoinControlWidgetItem : public QTreeWidgetItem\n {\n public:\n-    CCoinControlWidgetItem(QTreeWidget *parent, int type = Type) : QTreeWidgetItem(parent, type) {}\n-    CCoinControlWidgetItem(int type = Type) : QTreeWidgetItem(type) {}\n-    CCoinControlWidgetItem(QTreeWidgetItem *parent, int type = Type) : QTreeWidgetItem(parent, type) {}\n+    explicit CCoinControlWidgetItem(QTreeWidget *parent, int type = Type) : QTreeWidgetItem(parent, type) {}\n+    explicit CCoinControlWidgetItem(int type = Type) : QTreeWidgetItem(type) {}\n+    explicit CCoinControlWidgetItem(QTreeWidgetItem *parent, int type = Type) : QTreeWidgetItem(parent, type) {}\n \n     bool operator<(const QTreeWidgetItem &other) const;\n };"
      },
      {
        "sha": "0ff95d850275c3b78cd30750142a3bca3b59e883",
        "filename": "src/qt/intro.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/qt/intro.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/qt/intro.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.cpp?ref=64fb0ac016c7fd01c60c39af60f6431bac57f9ee",
        "patch": "@@ -43,7 +43,7 @@ class FreespaceChecker : public QObject\n     Q_OBJECT\n \n public:\n-    FreespaceChecker(Intro *intro);\n+    explicit FreespaceChecker(Intro *intro);\n \n     enum Status {\n         ST_OK,"
      },
      {
        "sha": "a7a7a4ce1167c7fbb32ee8b62ba9dccf9e354ce7",
        "filename": "src/qt/notificator.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/qt/notificator.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/qt/notificator.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/notificator.cpp?ref=64fb0ac016c7fd01c60c39af60f6431bac57f9ee",
        "patch": "@@ -93,7 +93,7 @@ class FreedesktopImage\n {\n public:\n     FreedesktopImage() {}\n-    FreedesktopImage(const QImage &img);\n+    explicit FreedesktopImage(const QImage &img);\n \n     static int metaType();\n "
      },
      {
        "sha": "ba1839e7b4f554d98dc947d70bebbff57231ac30",
        "filename": "src/qt/overviewpage.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/qt/overviewpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/qt/overviewpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/overviewpage.cpp?ref=64fb0ac016c7fd01c60c39af60f6431bac57f9ee",
        "patch": "@@ -25,7 +25,7 @@ class TxViewDelegate : public QAbstractItemDelegate\n {\n     Q_OBJECT\n public:\n-    TxViewDelegate(const PlatformStyle *_platformStyle, QObject *parent=nullptr):\n+    explicit TxViewDelegate(const PlatformStyle *_platformStyle, QObject *parent=nullptr):\n         QAbstractItemDelegate(parent), unit(BitcoinUnits::BTC),\n         platformStyle(_platformStyle)\n     {"
      },
      {
        "sha": "d3799f59ab4ba277986c621cf67ab471e277cd23",
        "filename": "src/qt/paymentrequestplus.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/qt/paymentrequestplus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/qt/paymentrequestplus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentrequestplus.cpp?ref=64fb0ac016c7fd01c60c39af60f6431bac57f9ee",
        "patch": "@@ -22,7 +22,7 @@\n class SSLVerifyError : public std::runtime_error\n {\n public:\n-    SSLVerifyError(std::string err) : std::runtime_error(err) { }\n+    explicit SSLVerifyError(std::string err) : std::runtime_error(err) { }\n };\n \n bool PaymentRequestPlus::parse(const QByteArray& data)"
      },
      {
        "sha": "98b2364b9236cef8b6e5756a4c48d255140c3375",
        "filename": "src/qt/paymentserver.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/qt/paymentserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/qt/paymentserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.h?ref=64fb0ac016c7fd01c60c39af60f6431bac57f9ee",
        "patch": "@@ -72,7 +72,7 @@ class PaymentServer : public QObject\n     static bool ipcSendCommandLine();\n \n     // parent should be QApplication object\n-    PaymentServer(QObject* parent, bool startLocalServer = true);\n+    explicit PaymentServer(QObject* parent, bool startLocalServer = true);\n     ~PaymentServer();\n \n     // Load root certificate authorities. Pass nullptr (default)"
      },
      {
        "sha": "738eeed136a655eb625a21fb4fcf031aec4904a0",
        "filename": "src/qt/utilitydialog.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/qt/utilitydialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/qt/utilitydialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/utilitydialog.h?ref=64fb0ac016c7fd01c60c39af60f6431bac57f9ee",
        "patch": "@@ -41,7 +41,7 @@ class ShutdownWindow : public QWidget\n     Q_OBJECT\n \n public:\n-    ShutdownWindow(QWidget *parent=0, Qt::WindowFlags f=0);\n+    explicit ShutdownWindow(QWidget *parent=0, Qt::WindowFlags f=0);\n     static QWidget *showShutdownWindow(BitcoinGUI *window);\n \n protected:"
      },
      {
        "sha": "154ee04eed22971d374dd08e35640a1619d6e8bf",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=64fb0ac016c7fd01c60c39af60f6431bac57f9ee",
        "patch": "@@ -48,7 +48,7 @@ struct CCoin {\n     ADD_SERIALIZE_METHODS;\n \n     CCoin() : nHeight(0) {}\n-    CCoin(Coin&& in) : nHeight(in.nHeight), out(std::move(in.out)) {}\n+    explicit CCoin(Coin&& in) : nHeight(in.nHeight), out(std::move(in.out)) {}\n \n     template <typename Stream, typename Operation>\n     inline void SerializationOp(Stream& s, Operation ser_action)"
      },
      {
        "sha": "ab467f07c98dedb02d5859b6ac55a8c68894eee1",
        "filename": "src/reverse_iterator.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/reverse_iterator.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/reverse_iterator.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/reverse_iterator.h?ref=64fb0ac016c7fd01c60c39af60f6431bac57f9ee",
        "patch": "@@ -17,7 +17,7 @@ class reverse_range\n     T &m_x;\n     \n public:\n-    reverse_range(T &x) : m_x(x) {}\n+    explicit reverse_range(T &x) : m_x(x) {}\n     \n     auto begin() const -> decltype(this->m_x.rbegin())\n     {"
      },
      {
        "sha": "652d886c7e783794631b41bcd7691881e9dbc649",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=64fb0ac016c7fd01c60c39af60f6431bac57f9ee",
        "patch": "@@ -686,7 +686,7 @@ class submitblock_StateCatcher : public CValidationInterface\n     bool found;\n     CValidationState state;\n \n-    submitblock_StateCatcher(const uint256 &hashIn) : hash(hashIn), found(false), state() {}\n+    explicit submitblock_StateCatcher(const uint256 &hashIn) : hash(hashIn), found(false), state() {}\n \n protected:\n     void BlockChecked(const CBlock& block, const CValidationState& stateIn) override {"
      },
      {
        "sha": "1dd660eb8f6d57b88932fb06b70f778ff5c58082",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=64fb0ac016c7fd01c60c39af60f6431bac57f9ee",
        "patch": "@@ -125,7 +125,7 @@ class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n public:\n     CWallet * const pwallet;\n \n-    DescribeAddressVisitor(CWallet *_pwallet) : pwallet(_pwallet) {}\n+    explicit DescribeAddressVisitor(CWallet *_pwallet) : pwallet(_pwallet) {}\n \n     UniValue operator()(const CNoDestination &dest) const { return UniValue(UniValue::VOBJ); }\n "
      },
      {
        "sha": "89b1d169d530762d5408b944928f1edd204e0a6f",
        "filename": "src/rpc/server.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/rpc/server.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/rpc/server.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.h?ref=64fb0ac016c7fd01c60c39af60f6431bac57f9ee",
        "patch": "@@ -31,7 +31,7 @@ namespace RPCServer\n /** Wrapper for UniValue::VType, which includes typeAny:\n  * Used to denote don't care type. Only used by RPCTypeCheckObj */\n struct UniValueType {\n-    UniValueType(UniValue::VType _type) : typeAny(false), type(_type) {}\n+    explicit UniValueType(UniValue::VType _type) : typeAny(false), type(_type) {}\n     UniValueType() : typeAny(true) {}\n     bool typeAny;\n     UniValue::VType type;"
      },
      {
        "sha": "4edb2c6d9bbccc7d0b49dd1a4ef29d5fcf7899b2",
        "filename": "src/scheduler.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/scheduler.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/scheduler.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scheduler.cpp?ref=64fb0ac016c7fd01c60c39af60f6431bac57f9ee",
        "patch": "@@ -174,7 +174,7 @@ void SingleThreadedSchedulerClient::ProcessQueue() {\n     // to ensure both happen safely even if callback() throws.\n     struct RAIICallbacksRunning {\n         SingleThreadedSchedulerClient* instance;\n-        RAIICallbacksRunning(SingleThreadedSchedulerClient* _instance) : instance(_instance) {}\n+        explicit RAIICallbacksRunning(SingleThreadedSchedulerClient* _instance) : instance(_instance) {}\n         ~RAIICallbacksRunning() {\n             {\n                 LOCK(instance->m_cs_callbacks_pending);"
      },
      {
        "sha": "db93bcb21e2c5b921d1d5d1afae0f7fb8bf2718a",
        "filename": "src/scheduler.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/scheduler.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/scheduler.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scheduler.h?ref=64fb0ac016c7fd01c60c39af60f6431bac57f9ee",
        "patch": "@@ -102,7 +102,7 @@ class SingleThreadedSchedulerClient {\n     void ProcessQueue();\n \n public:\n-    SingleThreadedSchedulerClient(CScheduler *pschedulerIn) : m_pscheduler(pschedulerIn) {}\n+    explicit SingleThreadedSchedulerClient(CScheduler *pschedulerIn) : m_pscheduler(pschedulerIn) {}\n     void AddToProcessQueue(std::function<void (void)> func);\n \n     // Processes all remaining queue members on the calling thread, blocking until queue is empty"
      },
      {
        "sha": "f845e1943bf05ac0a94b625c792f2dfd5c0eb53f",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=64fb0ac016c7fd01c60c39af60f6431bac57f9ee",
        "patch": "@@ -114,7 +114,7 @@ struct PrecomputedTransactionData\n {\n     uint256 hashPrevouts, hashSequence, hashOutputs;\n \n-    PrecomputedTransactionData(const CTransaction& tx);\n+    explicit PrecomputedTransactionData(const CTransaction& tx);\n };\n \n enum SigVersion"
      },
      {
        "sha": "a0d8ee4ff9f0538b48f2a357f82aac0224f02229",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=64fb0ac016c7fd01c60c39af60f6431bac57f9ee",
        "patch": "@@ -21,7 +21,7 @@ class BaseSignatureCreator {\n     const CKeyStore* keystore;\n \n public:\n-    BaseSignatureCreator(const CKeyStore* keystoreIn) : keystore(keystoreIn) {}\n+    explicit BaseSignatureCreator(const CKeyStore* keystoreIn) : keystore(keystoreIn) {}\n     const CKeyStore& KeyStore() const { return *keystore; };\n     virtual ~BaseSignatureCreator() {}\n     virtual const BaseSignatureChecker& Checker() const =0;\n@@ -54,7 +54,7 @@ class MutableTransactionSignatureCreator : public TransactionSignatureCreator {\n /** A signature creator that just produces 72-byte empty signatures. */\n class DummySignatureCreator : public BaseSignatureCreator {\n public:\n-    DummySignatureCreator(const CKeyStore* keystoreIn) : BaseSignatureCreator(keystoreIn) {}\n+    explicit DummySignatureCreator(const CKeyStore* keystoreIn) : BaseSignatureCreator(keystoreIn) {}\n     const BaseSignatureChecker& Checker() const override;\n     bool CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, SigVersion sigversion) const override;\n };"
      },
      {
        "sha": "0f720d9e76f3046ed40fead732f424ea4acee297",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=64fb0ac016c7fd01c60c39af60f6431bac57f9ee",
        "patch": "@@ -253,7 +253,7 @@ class CScriptVisitor : public boost::static_visitor<bool>\n private:\n     CScript *script;\n public:\n-    CScriptVisitor(CScript *scriptin) { script = scriptin; }\n+    explicit CScriptVisitor(CScript *scriptin) { script = scriptin; }\n \n     bool operator()(const CNoDestination &dest) const {\n         script->clear();"
      },
      {
        "sha": "eeb05fa76c8a064fd514e98ca5a49d98bcb26c4d",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=64fb0ac016c7fd01c60c39af60f6431bac57f9ee",
        "patch": "@@ -402,7 +402,7 @@ class CVarInt\n protected:\n     I &n;\n public:\n-    CVarInt(I& nIn) : n(nIn) { }\n+    explicit CVarInt(I& nIn) : n(nIn) { }\n \n     template<typename Stream>\n     void Serialize(Stream &s) const {\n@@ -420,7 +420,7 @@ class CCompactSize\n protected:\n     uint64_t &n;\n public:\n-    CCompactSize(uint64_t& nIn) : n(nIn) { }\n+    explicit CCompactSize(uint64_t& nIn) : n(nIn) { }\n \n     template<typename Stream>\n     void Serialize(Stream &s) const {\n@@ -439,7 +439,7 @@ class LimitedString\n protected:\n     std::string& string;\n public:\n-    LimitedString(std::string& _string) : string(_string) {}\n+    explicit LimitedString(std::string& _string) : string(_string) {}\n \n     template<typename Stream>\n     void Unserialize(Stream& s)"
      },
      {
        "sha": "cecbdec1aa660b8678cef97cab7d745faefced03",
        "filename": "src/support/lockedpool.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/support/lockedpool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/support/lockedpool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/support/lockedpool.h?ref=64fb0ac016c7fd01c60c39af60f6431bac57f9ee",
        "patch": "@@ -150,7 +150,7 @@ class LockedPool\n      * If this callback is provided and returns false, the allocation fails (hard fail), if\n      * it returns true the allocation proceeds, but it could warn.\n      */\n-    LockedPool(std::unique_ptr<LockedPageAllocator> allocator, LockingFailed_Callback lf_cb_in = nullptr);\n+    explicit LockedPool(std::unique_ptr<LockedPageAllocator> allocator, LockingFailed_Callback lf_cb_in = nullptr);\n     ~LockedPool();\n \n     /** Allocate size bytes from this arena.\n@@ -217,7 +217,7 @@ class LockedPoolManager : public LockedPool\n     }\n \n private:\n-    LockedPoolManager(std::unique_ptr<LockedPageAllocator> allocator);\n+    explicit LockedPoolManager(std::unique_ptr<LockedPageAllocator> allocator);\n \n     /** Create a new LockedPoolManager specialized to the OS */\n     static void CreateInstance();"
      },
      {
        "sha": "0871c5fb4d8518a9d174fee4e3d57c9f81812574",
        "filename": "src/sync.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/sync.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/sync.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.h?ref=64fb0ac016c7fd01c60c39af60f6431bac57f9ee",
        "patch": "@@ -196,7 +196,7 @@ class CSemaphore\n     int value;\n \n public:\n-    CSemaphore(int init) : value(init) {}\n+    explicit CSemaphore(int init) : value(init) {}\n \n     void wait()\n     {\n@@ -267,7 +267,7 @@ class CSemaphoreGrant\n \n     CSemaphoreGrant() : sem(nullptr), fHaveGrant(false) {}\n \n-    CSemaphoreGrant(CSemaphore& sema, bool fTry = false) : sem(&sema), fHaveGrant(false)\n+    explicit CSemaphoreGrant(CSemaphore& sema, bool fTry = false) : sem(&sema), fHaveGrant(false)\n     {\n         if (fTry)\n             TryAcquire();"
      },
      {
        "sha": "ee633249e9aa7a518301b954b4facfaede6362f2",
        "filename": "src/test/base58_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/test/base58_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/test/base58_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base58_tests.cpp?ref=64fb0ac016c7fd01c60c39af60f6431bac57f9ee",
        "patch": "@@ -78,7 +78,7 @@ class TestAddrTypeVisitor : public boost::static_visitor<bool>\n private:\n     std::string exp_addrType;\n public:\n-    TestAddrTypeVisitor(const std::string &_exp_addrType) : exp_addrType(_exp_addrType) { }\n+    explicit TestAddrTypeVisitor(const std::string &_exp_addrType) : exp_addrType(_exp_addrType) { }\n     bool operator()(const CKeyID &id) const\n     {\n         return (exp_addrType == \"pubkey\");\n@@ -99,7 +99,7 @@ class TestPayloadVisitor : public boost::static_visitor<bool>\n private:\n     std::vector<unsigned char> exp_payload;\n public:\n-    TestPayloadVisitor(std::vector<unsigned char> &_exp_payload) : exp_payload(_exp_payload) { }\n+    explicit TestPayloadVisitor(std::vector<unsigned char> &_exp_payload) : exp_payload(_exp_payload) { }\n     bool operator()(const CKeyID &id) const\n     {\n         uint160 exp_key(exp_payload);"
      },
      {
        "sha": "c851ab2849077240a9cf2d00e9b999cc82f3aafb",
        "filename": "src/test/bip32_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/test/bip32_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/test/bip32_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bip32_tests.cpp?ref=64fb0ac016c7fd01c60c39af60f6431bac57f9ee",
        "patch": "@@ -24,7 +24,7 @@ struct TestVector {\n     std::string strHexMaster;\n     std::vector<TestDerivation> vDerive;\n \n-    TestVector(std::string strHexMasterIn) : strHexMaster(strHexMasterIn) {}\n+    explicit TestVector(std::string strHexMasterIn) : strHexMaster(strHexMasterIn) {}\n \n     TestVector& operator()(std::string pub, std::string prv, unsigned int nChild) {\n         vDerive.push_back(TestDerivation());"
      },
      {
        "sha": "f2d5b385d078fdd451eee44167d5b80d3f5c9527",
        "filename": "src/test/blockencodings_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/test/blockencodings_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/test/blockencodings_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockencodings_tests.cpp?ref=64fb0ac016c7fd01c60c39af60f6431bac57f9ee",
        "patch": "@@ -118,12 +118,12 @@ class TestHeaderAndShortIDs {\n     std::vector<uint64_t> shorttxids;\n     std::vector<PrefilledTransaction> prefilledtxn;\n \n-    TestHeaderAndShortIDs(const CBlockHeaderAndShortTxIDs& orig) {\n+    explicit TestHeaderAndShortIDs(const CBlockHeaderAndShortTxIDs& orig) {\n         CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n         stream << orig;\n         stream >> *this;\n     }\n-    TestHeaderAndShortIDs(const CBlock& block) :\n+    explicit TestHeaderAndShortIDs(const CBlock& block) :\n         TestHeaderAndShortIDs(CBlockHeaderAndShortTxIDs(block, true)) {}\n \n     uint64_t GetShortID(const uint256& txhash) const {"
      },
      {
        "sha": "dc358bff95cbea3fccaaa579de1242cdb8355e69",
        "filename": "src/test/coins_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/test/coins_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/test/coins_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coins_tests.cpp?ref=64fb0ac016c7fd01c60c39af60f6431bac57f9ee",
        "patch": "@@ -74,7 +74,7 @@ class CCoinsViewTest : public CCoinsView\n class CCoinsViewCacheTest : public CCoinsViewCache\n {\n public:\n-    CCoinsViewCacheTest(CCoinsView* _base) : CCoinsViewCache(_base) {}\n+    explicit CCoinsViewCacheTest(CCoinsView* _base) : CCoinsViewCache(_base) {}\n \n     void SelfTest() const\n     {"
      },
      {
        "sha": "251d5a7142e3cea698da9ab8e6384007b59b9e16",
        "filename": "src/test/dbwrapper_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/test/dbwrapper_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/test/dbwrapper_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/dbwrapper_tests.cpp?ref=64fb0ac016c7fd01c60c39af60f6431bac57f9ee",
        "patch": "@@ -231,7 +231,7 @@ struct StringContentsSerializer {\n     // This is a terrible idea\n     std::string str;\n     StringContentsSerializer() {}\n-    StringContentsSerializer(const std::string& inp) : str(inp) {}\n+    explicit StringContentsSerializer(const std::string& inp) : str(inp) {}\n \n     StringContentsSerializer& operator+=(const std::string& s) {\n         str += s;"
      },
      {
        "sha": "2ddac2f0761e28232d9d7b8317c792920c95d9ca",
        "filename": "src/test/test_bitcoin.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/test/test_bitcoin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/test/test_bitcoin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.h?ref=64fb0ac016c7fd01c60c39af60f6431bac57f9ee",
        "patch": "@@ -41,7 +41,7 @@ static inline bool InsecureRandBool() { return insecure_rand_ctx.randbool(); }\n struct BasicTestingSetup {\n     ECCVerifyHandle globalVerifyHandle;\n \n-    BasicTestingSetup(const std::string& chainName = CBaseChainParams::MAIN);\n+    explicit BasicTestingSetup(const std::string& chainName = CBaseChainParams::MAIN);\n     ~BasicTestingSetup();\n };\n \n@@ -56,7 +56,7 @@ struct TestingSetup: public BasicTestingSetup {\n     CConnman* connman;\n     CScheduler scheduler;\n \n-    TestingSetup(const std::string& chainName = CBaseChainParams::MAIN);\n+    explicit TestingSetup(const std::string& chainName = CBaseChainParams::MAIN);\n     ~TestingSetup();\n };\n "
      },
      {
        "sha": "2e453e56bbf92fca58e0fcfe3bf720e614c6d8f9",
        "filename": "src/tinyformat.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/tinyformat.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/tinyformat.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/tinyformat.h?ref=64fb0ac016c7fd01c60c39af60f6431bac57f9ee",
        "patch": "@@ -167,7 +167,7 @@ namespace tinyformat {\n class format_error: public std::runtime_error\n {\n public:\n-    format_error(const std::string &what): std::runtime_error(what) {\n+    explicit format_error(const std::string &what): std::runtime_error(what) {\n     }\n };\n \n@@ -498,7 +498,7 @@ class FormatArg\n         FormatArg() {}\n \n         template<typename T>\n-        FormatArg(const T& value)\n+        explicit FormatArg(const T& value)\n             : m_value(static_cast<const void*>(&value)),\n             m_formatImpl(&formatImpl<T>),\n             m_toIntImpl(&toIntImpl<T>)\n@@ -867,7 +867,7 @@ class FormatListN : public FormatList\n     public:\n #ifdef TINYFORMAT_USE_VARIADIC_TEMPLATES\n         template<typename... Args>\n-        FormatListN(const Args&... args)\n+        explicit FormatListN(const Args&... args)\n             : FormatList(&m_formatterStore[0], N),\n             m_formatterStore { FormatArg(args)... }\n         { static_assert(sizeof...(args) == N, \"Number of args must be N\"); }\n@@ -876,7 +876,7 @@ class FormatListN : public FormatList\n #       define TINYFORMAT_MAKE_FORMATLIST_CONSTRUCTOR(n)       \\\n                                                                \\\n         template<TINYFORMAT_ARGTYPES(n)>                       \\\n-        FormatListN(TINYFORMAT_VARARGS(n))                     \\\n+        explicit FormatListN(TINYFORMAT_VARARGS(n))            \\\n             : FormatList(&m_formatterStore[0], n)              \\\n         { assert(n == N); init(0, TINYFORMAT_PASSARGS(n)); }   \\\n                                                                \\"
      },
      {
        "sha": "1cea197666f99f4179b6f569c3f751d5e4201cb9",
        "filename": "src/torcontrol.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/torcontrol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/torcontrol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/torcontrol.cpp?ref=64fb0ac016c7fd01c60c39af60f6431bac57f9ee",
        "patch": "@@ -76,7 +76,7 @@ class TorControlConnection\n \n     /** Create a new TorControlConnection.\n      */\n-    TorControlConnection(struct event_base *base);\n+    explicit TorControlConnection(struct event_base *base);\n     ~TorControlConnection();\n \n     /**"
      },
      {
        "sha": "797ae5713f576a327c0622da298b8798feb7c483",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=64fb0ac016c7fd01c60c39af60f6431bac57f9ee",
        "patch": "@@ -35,7 +35,7 @@ namespace {\n struct CoinEntry {\n     COutPoint* outpoint;\n     char key;\n-    CoinEntry(const COutPoint* ptr) : outpoint(const_cast<COutPoint*>(ptr)), key(DB_COIN)  {}\n+    explicit CoinEntry(const COutPoint* ptr) : outpoint(const_cast<COutPoint*>(ptr)), key(DB_COIN)  {}\n \n     template<typename Stream>\n     void Serialize(Stream &s) const {"
      },
      {
        "sha": "603eb08a7a96f0c93c80487ca09c3ac2116ea3a4",
        "filename": "src/txdb.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/txdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/txdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.h?ref=64fb0ac016c7fd01c60c39af60f6431bac57f9ee",
        "patch": "@@ -69,7 +69,7 @@ class CCoinsViewDB : public CCoinsView\n protected:\n     CDBWrapper db;\n public:\n-    CCoinsViewDB(size_t nCacheSize, bool fMemory = false, bool fWipe = false);\n+    explicit CCoinsViewDB(size_t nCacheSize, bool fMemory = false, bool fWipe = false);\n \n     bool GetCoin(const COutPoint &outpoint, Coin &coin) const override;\n     bool HaveCoin(const COutPoint &outpoint) const override;\n@@ -109,7 +109,7 @@ class CCoinsViewDBCursor: public CCoinsViewCursor\n class CBlockTreeDB : public CDBWrapper\n {\n public:\n-    CBlockTreeDB(size_t nCacheSize, bool fMemory = false, bool fWipe = false);\n+    explicit CBlockTreeDB(size_t nCacheSize, bool fMemory = false, bool fWipe = false);\n private:\n     CBlockTreeDB(const CBlockTreeDB&);\n     void operator=(const CBlockTreeDB&);"
      },
      {
        "sha": "5b0db5266ed0d93f8d42bb9251f58fb78433a3ff",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=64fb0ac016c7fd01c60c39af60f6431bac57f9ee",
        "patch": "@@ -167,7 +167,7 @@ struct update_ancestor_state\n \n struct update_fee_delta\n {\n-    update_fee_delta(int64_t _feeDelta) : feeDelta(_feeDelta) { }\n+    explicit update_fee_delta(int64_t _feeDelta) : feeDelta(_feeDelta) { }\n \n     void operator() (CTxMemPoolEntry &e) { e.UpdateFeeDelta(feeDelta); }\n \n@@ -177,7 +177,7 @@ struct update_fee_delta\n \n struct update_lock_points\n {\n-    update_lock_points(const LockPoints& _lp) : lp(_lp) { }\n+    explicit update_lock_points(const LockPoints& _lp) : lp(_lp) { }\n \n     void operator() (CTxMemPoolEntry &e) { e.UpdateLockPoints(lp); }\n \n@@ -501,7 +501,7 @@ class CTxMemPool\n \n     /** Create a new CTxMemPool.\n      */\n-    CTxMemPool(CBlockPolicyEstimator* estimator = nullptr);\n+    explicit CTxMemPool(CBlockPolicyEstimator* estimator = nullptr);\n \n     /**\n      * If sanity-checking is turned on, check makes sure the pool is"
      },
      {
        "sha": "3ed694d723a02d07ab10d35195e4d71241d2feee",
        "filename": "src/uint256.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/uint256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/uint256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/uint256.h?ref=64fb0ac016c7fd01c60c39af60f6431bac57f9ee",
        "patch": "@@ -111,7 +111,7 @@ class base_blob\n class uint160 : public base_blob<160> {\n public:\n     uint160() {}\n-    uint160(const base_blob<160>& b) : base_blob<160>(b) {}\n+    explicit uint160(const base_blob<160>& b) : base_blob<160>(b) {}\n     explicit uint160(const std::vector<unsigned char>& vch) : base_blob<160>(vch) {}\n };\n \n@@ -123,7 +123,7 @@ class uint160 : public base_blob<160> {\n class uint256 : public base_blob<256> {\n public:\n     uint256() {}\n-    uint256(const base_blob<256>& b) : base_blob<256>(b) {}\n+    explicit uint256(const base_blob<256>& b) : base_blob<256>(b) {}\n     explicit uint256(const std::vector<unsigned char>& vch) : base_blob<256>(vch) {}\n \n     /** A cheap hash function that just returns 64 bits from the result, it can be"
      },
      {
        "sha": "a720de4ac5aa23587d9cf7dcbc28f113abe53cb2",
        "filename": "src/undo.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/undo.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/undo.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/undo.h?ref=64fb0ac016c7fd01c60c39af60f6431bac57f9ee",
        "patch": "@@ -33,7 +33,7 @@ class TxInUndoSerializer\n         ::Serialize(s, CTxOutCompressor(REF(txout->out)));\n     }\n \n-    TxInUndoSerializer(const Coin* coin) : txout(coin) {}\n+    explicit TxInUndoSerializer(const Coin* coin) : txout(coin) {}\n };\n \n class TxInUndoDeserializer\n@@ -57,7 +57,7 @@ class TxInUndoDeserializer\n         ::Unserialize(s, REF(CTxOutCompressor(REF(txout->out))));\n     }\n \n-    TxInUndoDeserializer(Coin* coin) : txout(coin) {}\n+    explicit TxInUndoDeserializer(Coin* coin) : txout(coin) {}\n };\n \n static const size_t MIN_TRANSACTION_INPUT_WEIGHT = WITNESS_SCALE_FACTOR * ::GetSerializeSize(CTxIn(), SER_NETWORK, PROTOCOL_VERSION);"
      },
      {
        "sha": "2fb6a492d12f31d7b9d097aeea3d481f715aafa5",
        "filename": "src/univalue/lib/univalue_utffilter.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/univalue/lib/univalue_utffilter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/univalue/lib/univalue_utffilter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/lib/univalue_utffilter.h?ref=64fb0ac016c7fd01c60c39af60f6431bac57f9ee",
        "patch": "@@ -13,7 +13,7 @@\n class JSONUTF8StringFilter\n {\n public:\n-    JSONUTF8StringFilter(std::string &s):\n+    explicit JSONUTF8StringFilter(std::string &s):\n         str(s), is_valid(true), codepoint(0), state(0), surpair(0)\n     {\n     }"
      },
      {
        "sha": "d1a8b8460a6bcb63eac0289c5bf8a0e8515d07ed",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=64fb0ac016c7fd01c60c39af60f6431bac57f9ee",
        "patch": "@@ -1563,7 +1563,7 @@ class WarningBitsConditionChecker : public AbstractThresholdConditionChecker\n     int bit;\n \n public:\n-    WarningBitsConditionChecker(int bitIn) : bit(bitIn) {}\n+    explicit WarningBitsConditionChecker(int bitIn) : bit(bitIn) {}\n \n     int64_t BeginTime(const Consensus::Params& params) const override { return 0; }\n     int64_t EndTime(const Consensus::Params& params) const override { return std::numeric_limits<int64_t>::max(); }\n@@ -2135,7 +2135,7 @@ class ConnectTrace {\n     CTxMemPool &pool;\n \n public:\n-    ConnectTrace(CTxMemPool &_pool) : blocksConnected(1), pool(_pool) {\n+    explicit ConnectTrace(CTxMemPool &_pool) : blocksConnected(1), pool(_pool) {\n         pool.NotifyEntryRemoved.connect(boost::bind(&ConnectTrace::NotifyEntryRemoved, this, _1, _2));\n     }\n "
      },
      {
        "sha": "be5029dec3ffdb922aa9946e16a713c624d5db2c",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=64fb0ac016c7fd01c60c39af60f6431bac57f9ee",
        "patch": "@@ -30,7 +30,7 @@ struct MainSignalsInstance {\n     // our own queue here :(\n     SingleThreadedSchedulerClient m_schedulerClient;\n \n-    MainSignalsInstance(CScheduler *pscheduler) : m_schedulerClient(pscheduler) {}\n+    explicit MainSignalsInstance(CScheduler *pscheduler) : m_schedulerClient(pscheduler) {}\n };\n \n static CMainSignals g_signals;"
      },
      {
        "sha": "64ae9396724adab42188ec6cabb9b30882a9101f",
        "filename": "src/versionbits.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/versionbits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/versionbits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.cpp?ref=64fb0ac016c7fd01c60c39af60f6431bac57f9ee",
        "patch": "@@ -185,7 +185,7 @@ class VersionBitsConditionChecker : public AbstractThresholdConditionChecker {\n     }\n \n public:\n-    VersionBitsConditionChecker(Consensus::DeploymentPos id_) : id(id_) {}\n+    explicit VersionBitsConditionChecker(Consensus::DeploymentPos id_) : id(id_) {}\n     uint32_t Mask(const Consensus::Params& params) const { return ((uint32_t)1) << params.vDeployments[id].bit; }\n };\n "
      },
      {
        "sha": "9a534918389a0d99d468d0e000b92a6da6a7bcf8",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=64fb0ac016c7fd01c60c39af60f6431bac57f9ee",
        "patch": "@@ -1123,7 +1123,7 @@ class Witnessifier : public boost::static_visitor<bool>\n     CWallet * const pwallet;\n     CScriptID result;\n \n-    Witnessifier(CWallet *_pwallet) : pwallet(_pwallet) {}\n+    explicit Witnessifier(CWallet *_pwallet) : pwallet(_pwallet) {}\n \n     bool operator()(const CNoDestination &dest) const { return false; }\n "
      },
      {
        "sha": "9373b7907c0531da085507d0ebc1a3fabf572681",
        "filename": "src/wallet/test/wallet_test_fixture.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/wallet/test/wallet_test_fixture.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/wallet/test/wallet_test_fixture.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_test_fixture.h?ref=64fb0ac016c7fd01c60c39af60f6431bac57f9ee",
        "patch": "@@ -10,7 +10,7 @@\n /** Testing setup and teardown for wallet.\n  */\n struct WalletTestingSetup: public TestingSetup {\n-    WalletTestingSetup(const std::string& chainName = CBaseChainParams::MAIN);\n+    explicit WalletTestingSetup(const std::string& chainName = CBaseChainParams::MAIN);\n     ~WalletTestingSetup();\n };\n "
      },
      {
        "sha": "19e1638d35b0722f8ad832afd14342d00a4f1be8",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=64fb0ac016c7fd01c60c39af60f6431bac57f9ee",
        "patch": "@@ -208,7 +208,7 @@ class CMerkleTx\n         Init();\n     }\n \n-    CMerkleTx(CTransactionRef arg)\n+    explicit CMerkleTx(CTransactionRef arg)\n     {\n         SetTx(std::move(arg));\n         Init();\n@@ -548,7 +548,7 @@ class CWalletKey\n     //! todo: add something to note what created it (user, getnewaddress, change)\n     //!   maybe should have a map<string, string> property map\n \n-    CWalletKey(int64_t nExpires=0);\n+    explicit CWalletKey(int64_t nExpires=0);\n \n     ADD_SERIALIZE_METHODS;\n \n@@ -765,7 +765,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     }\n \n     // Create wallet with passed-in database handle\n-    CWallet(std::unique_ptr<CWalletDBWrapper> dbw_in) : dbw(std::move(dbw_in))\n+    explicit CWallet(std::unique_ptr<CWalletDBWrapper> dbw_in) : dbw(std::move(dbw_in))\n     {\n         SetNull();\n     }\n@@ -1145,7 +1145,7 @@ class CReserveKey : public CReserveScript\n     CPubKey vchPubKey;\n     bool fInternal;\n public:\n-    CReserveKey(CWallet* pwalletIn)\n+    explicit CReserveKey(CWallet* pwalletIn)\n     {\n         nIndex = -1;\n         pwallet = pwalletIn;"
      },
      {
        "sha": "e4857f6cab615281fc6b9932e20bc404387983ce",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64fb0ac016c7fd01c60c39af60f6431bac57f9ee/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=64fb0ac016c7fd01c60c39af60f6431bac57f9ee",
        "patch": "@@ -105,7 +105,7 @@ class CKeyMetadata\n     {\n         SetNull();\n     }\n-    CKeyMetadata(int64_t nCreateTime_)\n+    explicit CKeyMetadata(int64_t nCreateTime_)\n     {\n         SetNull();\n         nCreateTime = nCreateTime_;\n@@ -162,7 +162,7 @@ class CWalletDB\n     }\n \n public:\n-    CWalletDB(CWalletDBWrapper& dbw, const char* pszMode = \"r+\", bool _fFlushOnClose = true) :\n+    explicit CWalletDB(CWalletDBWrapper& dbw, const char* pszMode = \"r+\", bool _fFlushOnClose = true) :\n         batch(dbw, pszMode, _fFlushOnClose),\n         m_dbw(dbw)\n     {"
      }
    ]
  }
]