[
  {
    "sha": "26a50ab322614bceb5bc62e2c282f83e5987bad8",
    "node_id": "C_kwDOABII59oAKDI2YTUwYWIzMjI2MTRiY2ViNWJjNjJlMmMyODJmODNlNTk4N2JhZDg",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-08-21T18:06:49Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-10-25T14:44:17Z"
      },
      "message": "refactor: Split InterpretOption into Interpret{Key,Value} functions\n\nCo-authored-by: Anthony Towns <aj@erisian.com.au>",
      "tree": {
        "sha": "0603b6771afaa2d9c5d7e7da5a0be66a7ad6ec0f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0603b6771afaa2d9c5d7e7da5a0be66a7ad6ec0f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/26a50ab322614bceb5bc62e2c282f83e5987bad8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26a50ab322614bceb5bc62e2c282f83e5987bad8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/26a50ab322614bceb5bc62e2c282f83e5987bad8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26a50ab322614bceb5bc62e2c282f83e5987bad8/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "22a90186496aea8025316bc5616905ffcf1aeb29",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22a90186496aea8025316bc5616905ffcf1aeb29",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/22a90186496aea8025316bc5616905ffcf1aeb29"
      }
    ],
    "stats": {
      "total": 101,
      "additions": 52,
      "deletions": 49
    },
    "files": [
      {
        "sha": "2bc6b3bdf854b8ffa0df727d8befedf4daaf51b1",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 52,
        "deletions": 49,
        "changes": 101,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26a50ab322614bceb5bc62e2c282f83e5987bad8/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26a50ab322614bceb5bc62e2c282f83e5987bad8/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=26a50ab322614bceb5bc62e2c282f83e5987bad8",
        "patch": "@@ -71,6 +71,7 @@\n #endif\n \n #include <boost/algorithm/string/replace.hpp>\n+#include <optional>\n #include <thread>\n #include <typeinfo>\n #include <univalue.h>\n@@ -182,60 +183,65 @@ static std::string SettingName(const std::string& arg)\n     return arg.size() > 0 && arg[0] == '-' ? arg.substr(1) : arg;\n }\n \n+struct KeyInfo {\n+    std::string name;\n+    std::string section;\n+    bool negated{false};\n+};\n+\n /**\n- * Interpret -nofoo as if the user supplied -foo=0.\n- *\n- * This method also tracks when the -no form was supplied, and if so,\n- * checks whether there was a double-negative (-nofoo=0 -> -foo=1).\n- *\n- * If there was not a double negative, it removes the \"no\" from the key\n- * and returns false.\n+ * Parse \"name\", \"section.name\", \"noname\", \"section.noname\" settings keys.\n  *\n- * If there was a double negative, it removes \"no\" from the key, and\n- * returns true.\n- *\n- * If there was no \"no\", it returns the string value untouched.\n- *\n- * Where an option was negated can be later checked using the\n+ * @note Where an option was negated can be later checked using the\n  * IsArgNegated() method. One use case for this is to have a way to disable\n  * options that are not normally boolean (e.g. using -nodebuglogfile to request\n  * that debug log output is not sent to any file at all).\n  */\n-\n-static util::SettingsValue InterpretOption(std::string& section, std::string& key, const std::string& value)\n+KeyInfo InterpretKey(std::string key)\n {\n+    KeyInfo result;\n     // Split section name from key name for keys like \"testnet.foo\" or \"regtest.bar\"\n     size_t option_index = key.find('.');\n     if (option_index != std::string::npos) {\n-        section = key.substr(0, option_index);\n+        result.section = key.substr(0, option_index);\n         key.erase(0, option_index + 1);\n     }\n     if (key.substr(0, 2) == \"no\") {\n         key.erase(0, 2);\n-        // Double negatives like -nofoo=0 are supported (but discouraged)\n-        if (!InterpretBool(value)) {\n-            LogPrintf(\"Warning: parsed potentially confusing double-negative -%s=%s\\n\", key, value);\n-            return true;\n-        }\n-        return false;\n+        result.negated = true;\n     }\n-    return value;\n+    result.name = key;\n+    return result;\n }\n \n /**\n- * Check settings value validity according to flags.\n+ * Interpret settings value based on registered flags.\n+ *\n+ * @param[in]   key      key information to know if key was negated\n+ * @param[in]   value    string value of setting to be parsed\n+ * @param[in]   flags    ArgsManager registered argument flags\n+ * @param[out]  error    Error description if settings value is not valid\n  *\n- * TODO: Add more meaningful error checks here in the future\n- * See \"here's how the flags are meant to behave\" in\n- * https://github.com/bitcoin/bitcoin/pull/16097#issuecomment-514627823\n+ * @return parsed settings value if it is valid, otherwise nullopt accompanied\n+ * by a descriptive error string\n  */\n-static bool CheckValid(const std::string& key, const util::SettingsValue& val, unsigned int flags, std::string& error)\n-{\n-    if (val.isBool() && !(flags & ArgsManager::ALLOW_BOOL)) {\n-        error = strprintf(\"Negating of -%s is meaningless and therefore forbidden\", key);\n+static std::optional<util::SettingsValue> InterpretValue(const KeyInfo& key, const std::string& value,\n+                                                         unsigned int flags, std::string& error)\n+{\n+    // Return negated settings as false values.\n+    if (key.negated) {\n+        if (!(flags & ArgsManager::ALLOW_BOOL)) {\n+            error = strprintf(\"Negating of -%s is meaningless and therefore forbidden\", key.name);\n+            return std::nullopt;\n+        }\n+        // Double negatives like -nofoo=0 are supported (but discouraged)\n+        if (!InterpretBool(value)) {\n+            LogPrintf(\"Warning: parsed potentially confusing double-negative -%s=%s\\n\", key.name, value);\n+            return true;\n+        }\n         return false;\n     }\n-    return true;\n+    return value;\n }\n \n namespace {\n@@ -351,21 +357,21 @@ bool ArgsManager::ParseParameters(int argc, const char* const argv[], std::strin\n \n         // Transform -foo to foo\n         key.erase(0, 1);\n-        std::string section;\n-        util::SettingsValue value = InterpretOption(section, key, val);\n-        std::optional<unsigned int> flags = GetArgFlags('-' + key);\n+        KeyInfo keyinfo = InterpretKey(key);\n+        std::optional<unsigned int> flags = GetArgFlags('-' + keyinfo.name);\n \n         // Unknown command line options and command line options with dot\n-        // characters (which are returned from InterpretOption with nonempty\n+        // characters (which are returned from InterpretKey with nonempty\n         // section strings) are not valid.\n-        if (!flags || !section.empty()) {\n+        if (!flags || !keyinfo.section.empty()) {\n             error = strprintf(\"Invalid parameter %s\", argv[i]);\n             return false;\n         }\n \n-        if (!CheckValid(key, value, *flags, error)) return false;\n+        std::optional<util::SettingsValue> value = InterpretValue(keyinfo, val, *flags, error);\n+        if (!value) return false;\n \n-        m_settings.command_line_options[key].push_back(value);\n+        m_settings.command_line_options[keyinfo.name].push_back(*value);\n     }\n \n     // we do not allow -includeconf from command line, only -noincludeconf\n@@ -548,10 +554,8 @@ bool ArgsManager::ReadSettingsFile(std::vector<std::string>* errors)\n         return false;\n     }\n     for (const auto& setting : m_settings.rw_settings) {\n-        std::string section;\n-        std::string key = setting.first;\n-        (void)InterpretOption(section, key, /* value */ {}); // Split setting key into section and argname\n-        if (!GetArgFlags('-' + key)) {\n+        KeyInfo key = InterpretKey(setting.first); // Split setting key into section and argname\n+        if (!GetArgFlags('-' + key.name)) {\n             LogPrintf(\"Ignoring unknown rw_settings value %s\\n\", setting.first);\n         }\n     }\n@@ -870,15 +874,14 @@ bool ArgsManager::ReadConfigStream(std::istream& stream, const std::string& file\n         return false;\n     }\n     for (const std::pair<std::string, std::string>& option : options) {\n-        std::string section;\n-        std::string key = option.first;\n-        util::SettingsValue value = InterpretOption(section, key, option.second);\n-        std::optional<unsigned int> flags = GetArgFlags('-' + key);\n+        KeyInfo key = InterpretKey(option.first);\n+        std::optional<unsigned int> flags = GetArgFlags('-' + key.name);\n         if (flags) {\n-            if (!CheckValid(key, value, *flags, error)) {\n+            std::optional<util::SettingsValue> value = InterpretValue(key, option.second, *flags, error);\n+            if (!value) {\n                 return false;\n             }\n-            m_settings.ro_config[section][key].push_back(value);\n+            m_settings.ro_config[key.section][key.name].push_back(*value);\n         } else {\n             if (ignore_invalid_keys) {\n                 LogPrintf(\"Ignoring unknown configuration value %s\\n\", option.first);"
      }
    ]
  },
  {
    "sha": "b8c069b7a952e326d2d974cc671889d1a3b38aa4",
    "node_id": "C_kwDOABII59oAKGI4YzA2OWI3YTk1MmUzMjZkMmQ5NzRjYzY3MTg4OWQxYTNiMzhhYTQ",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-08-21T18:06:49Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-10-25T14:44:17Z"
      },
      "message": "refactor: Add explicit DISALLOW_NEGATION ArgsManager flag to clarify flag usage\n\nCurrently, ALLOW_{INT|BOOL|STRING} flags don't do any real validation,\nso current uses of these flags are misleading and will also break\nbackwards compatibility whenever these flags are implemented in a future\nPR (draft PR is #16545).\n\nAn additional complication is that while these flags don't do any real\nsettings validation, they do affect whether setting negation syntax is\nallowed.\n\nFix this mess by disabling ALLOW_{INT|BOOL|STRING} flags until they are\nimplemented, and adding an unambiguous DISALLOW_NEGATION flag. This is\ndone in two commits, with this commit adding the DISALLOW_NEGATION flag,\nand the next commit disabling the ALLOW_{INT|BOOL|STRING} flags.",
      "tree": {
        "sha": "130fa8cc58539646cb34685f97ff485f8a738083",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/130fa8cc58539646cb34685f97ff485f8a738083"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b8c069b7a952e326d2d974cc671889d1a3b38aa4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b8c069b7a952e326d2d974cc671889d1a3b38aa4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b8c069b7a952e326d2d974cc671889d1a3b38aa4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b8c069b7a952e326d2d974cc671889d1a3b38aa4/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "26a50ab322614bceb5bc62e2c282f83e5987bad8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26a50ab322614bceb5bc62e2c282f83e5987bad8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/26a50ab322614bceb5bc62e2c282f83e5987bad8"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 13,
      "deletions": 6
    },
    "files": [
      {
        "sha": "47c2cc5af8210904790e8199b8770dd59a399d97",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b8c069b7a952e326d2d974cc671889d1a3b38aa4/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b8c069b7a952e326d2d974cc671889d1a3b38aa4/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=b8c069b7a952e326d2d974cc671889d1a3b38aa4",
        "patch": "@@ -230,7 +230,7 @@ static std::optional<util::SettingsValue> InterpretValue(const KeyInfo& key, con\n {\n     // Return negated settings as false values.\n     if (key.negated) {\n-        if (!(flags & ArgsManager::ALLOW_BOOL)) {\n+        if (flags & ArgsManager::DISALLOW_NEGATION) {\n             error = strprintf(\"Negating of -%s is meaningless and therefore forbidden\", key.name);\n             return std::nullopt;\n         }\n@@ -652,6 +652,7 @@ void ArgsManager::AddArg(const std::string& name, const std::string& help, unsig\n \n     LOCK(cs_args);\n     std::map<std::string, Arg>& arg_map = m_available_args[cat];\n+    if ((flags & (ALLOW_ANY | ALLOW_BOOL)) == 0) flags |= DISALLOW_NEGATION; // Temporary, removed in next scripted-diff\n     auto ret = arg_map.emplace(arg_name, Arg{name.substr(eq_index, name.size() - eq_index), help, flags});\n     assert(ret.second); // Make sure an insertion actually happened\n "
      },
      {
        "sha": "a4323e0f9ecadce3288d513702acedbedeb29d1b",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 11,
        "deletions": 5,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b8c069b7a952e326d2d974cc671889d1a3b38aa4/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b8c069b7a952e326d2d974cc671889d1a3b38aa4/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=b8c069b7a952e326d2d974cc671889d1a3b38aa4",
        "patch": "@@ -158,12 +158,18 @@ struct SectionInfo\n class ArgsManager\n {\n public:\n+    /**\n+     * Flags controlling how config and command line arguments are validated and\n+     * interpreted.\n+     */\n     enum Flags : uint32_t {\n-        // Boolean options can accept negation syntax -noOPTION or -noOPTION=1\n-        ALLOW_BOOL = 0x01,\n-        ALLOW_INT = 0x02,\n-        ALLOW_STRING = 0x04,\n-        ALLOW_ANY = ALLOW_BOOL | ALLOW_INT | ALLOW_STRING,\n+        ALLOW_ANY = 0x01,         //!< disable validation\n+        ALLOW_BOOL = 0x02,        //!< unimplemented, draft implementation in #16545\n+        ALLOW_INT = 0x04,         //!< unimplemented, draft implementation in #16545\n+        ALLOW_STRING = 0x08,      //!< unimplemented, draft implementation in #16545\n+        ALLOW_LIST = 0x10,        //!< unimplemented, draft implementation in #16545\n+        DISALLOW_NEGATION = 0x20, //!< disallow -nofoo syntax\n+\n         DEBUG_ONLY = 0x100,\n         /* Some options would cause cross-contamination if values for\n          * mainnet were used while running on regtest/testnet (or vice-versa)."
      }
    ]
  },
  {
    "sha": "c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab",
    "node_id": "C_kwDOABII59oAKGM1ZDdlMzRiZDlhNGFkNzUyYzVlYzg4MDMyNDIwZTJlOTBhYjE3YWI",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-08-19T01:08:08Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-10-25T14:44:17Z"
      },
      "message": "scripted-diff: disable unimplemented ArgsManager BOOL/INT/STRING flags\n\nThis commit does not change behavior in any way. See previous commit for\ncomplete rationale, but these flags are being disabled because they\naren't implemented and will otherwise break backwards compatibility when\nthey are implemented.\n\n-BEGIN VERIFY SCRIPT-\nsed -i 's:\\(ALLOW_.*\\)   \\(//!< unimplemented\\):// \\1\\2:' src/util/system.h\nsed -i '/DISALLOW_NEGATION.*scripted-diff/d' src/util/system.cpp\ngit grep -l 'ArgsManager::ALLOW_\\(INT\\|STRING\\)'  | xargs sed -i 's/ArgsManager::ALLOW_\\(INT\\|STRING\\)/ArgsManager::ALLOW_ANY | ArgsManager::DISALLOW_NEGATION/g'\ngit grep -l 'ALLOW_BOOL' -- ':!src/util/system.h' | xargs sed -i 's/ALLOW_BOOL/ALLOW_ANY/g'\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "15ef772af6bf9ce313970f1506d31c8a90fa80c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/15ef772af6bf9ce313970f1506d31c8a90fa80c7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b8c069b7a952e326d2d974cc671889d1a3b38aa4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b8c069b7a952e326d2d974cc671889d1a3b38aa4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b8c069b7a952e326d2d974cc671889d1a3b38aa4"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 26,
      "deletions": 27
    },
    "files": [
      {
        "sha": "83609d27871ba0a4cfa1b16abdb2c8758d57ff80",
        "filename": "src/bench/bench_bitcoin.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab/src/bench/bench_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab/src/bench/bench_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench_bitcoin.cpp?ref=c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab",
        "patch": "@@ -24,8 +24,8 @@ static void SetupBenchArgs(ArgsManager& argsman)\n \n     argsman.AddArg(\"-asymptote=<n1,n2,n3,...>\", \"Test asymptotic growth of the runtime of an algorithm, if supported by the benchmark\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-filter=<regex>\", strprintf(\"Regular expression filter to select benchmark by name (default: %s)\", DEFAULT_BENCH_FILTER), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    argsman.AddArg(\"-list\", \"List benchmarks without executing them\", ArgsManager::ALLOW_BOOL, OptionsCategory::OPTIONS);\n-    argsman.AddArg(\"-min_time=<milliseconds>\", strprintf(\"Minimum runtime per benchmark, in milliseconds (default: %d)\", DEFAULT_MIN_TIME_MS), ArgsManager::ALLOW_INT, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-list\", \"List benchmarks without executing them\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-min_time=<milliseconds>\", strprintf(\"Minimum runtime per benchmark, in milliseconds (default: %d)\", DEFAULT_MIN_TIME_MS), ArgsManager::ALLOW_ANY | ArgsManager::DISALLOW_NEGATION, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-output_csv=<output.csv>\", \"Generate CSV file with the most important benchmark results\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-output_json=<output.json>\", \"Generate JSON file with all benchmark results\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n }"
      },
      {
        "sha": "338d32ef6b76695667aff201992a1b90a4a2ae69",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab",
        "patch": "@@ -74,7 +74,7 @@ static void SetupCliArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-netinfo\", \"Get network peer connection information from the remote server. An optional integer argument from 0 to 4 can be passed for different peers listings (default: 0). Pass \\\"help\\\" for detailed help documentation.\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n \n     SetupChainParamsBaseOptions(argsman);\n-    argsman.AddArg(\"-color=<when>\", strprintf(\"Color setting for CLI output (default: %s). Valid values: always, auto (add color codes when standard output is connected to a terminal and OS is not WIN32), never.\", DEFAULT_COLOR_SETTING), ArgsManager::ALLOW_STRING, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-color=<when>\", strprintf(\"Color setting for CLI output (default: %s). Valid values: always, auto (add color codes when standard output is connected to a terminal and OS is not WIN32), never.\", DEFAULT_COLOR_SETTING), ArgsManager::ALLOW_ANY | ArgsManager::DISALLOW_NEGATION, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-named\", strprintf(\"Pass named instead of positional arguments (default: %s)\", DEFAULT_NAMED), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-rpcclienttimeout=<n>\", strprintf(\"Timeout in seconds during HTTP requests, or 0 for no timeout. (default: %d)\", DEFAULT_HTTP_CLIENT_TIMEOUT), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-rpcconnect=<ip>\", strprintf(\"Send commands to node running on <ip> (default: %s)\", DEFAULT_RPCCONNECT), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n@@ -83,7 +83,7 @@ static void SetupCliArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-rpcport=<port>\", strprintf(\"Connect to JSON-RPC on <port> (default: %u, testnet: %u, signet: %u, regtest: %u)\", defaultBaseParams->RPCPort(), testnetBaseParams->RPCPort(), signetBaseParams->RPCPort(), regtestBaseParams->RPCPort()), ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-rpcuser=<user>\", \"Username for JSON-RPC connections\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-rpcwait\", \"Wait for RPC server to start\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    argsman.AddArg(\"-rpcwaittimeout=<n>\", strprintf(\"Timeout in seconds to wait for the RPC server to start, or 0 for no timeout. (default: %d)\", DEFAULT_WAIT_CLIENT_TIMEOUT), ArgsManager::ALLOW_INT, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-rpcwaittimeout=<n>\", strprintf(\"Timeout in seconds to wait for the RPC server to start, or 0 for no timeout. (default: %d)\", DEFAULT_WAIT_CLIENT_TIMEOUT), ArgsManager::ALLOW_ANY | ArgsManager::DISALLOW_NEGATION, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-rpcwallet=<walletname>\", \"Send RPC for non-default wallet on RPC server (needs to exactly match corresponding -wallet option passed to bitcoind). This changes the RPC endpoint used, e.g. http://127.0.0.1:8332/wallet/<walletname>\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-stdin\", \"Read extra arguments from standard input, one per line until EOF/Ctrl-D (recommended for sensitive information such as passphrases). When combined with -stdinrpcpass, the first line from standard input is used for the RPC password.\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-stdinrpcpass\", \"Read RPC password from standard input as a single line. When combined with -stdin, the first line from standard input is used for the RPC password. When combined with -stdinwalletpassphrase, -stdinrpcpass consumes the first line, and -stdinwalletpassphrase consumes the second.\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);"
      },
      {
        "sha": "64f1581406a04619e74dffc231669929aafa2721",
        "filename": "src/bitcoin-wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab/src/bitcoin-wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab/src/bitcoin-wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-wallet.cpp?ref=c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab",
        "patch": "@@ -27,10 +27,10 @@ static void SetupWalletToolArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-version\", \"Print version and exit\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-datadir=<dir>\", \"Specify data directory\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-wallet=<wallet-name>\", \"Specify wallet name\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::OPTIONS);\n-    argsman.AddArg(\"-dumpfile=<file name>\", \"When used with 'dump', writes out the records to this file. When used with 'createfromdump', loads the records into a new wallet.\", ArgsManager::ALLOW_STRING, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-dumpfile=<file name>\", \"When used with 'dump', writes out the records to this file. When used with 'createfromdump', loads the records into a new wallet.\", ArgsManager::ALLOW_ANY | ArgsManager::DISALLOW_NEGATION, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-debug=<category>\", \"Output debugging information (default: 0).\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n-    argsman.AddArg(\"-descriptors\", \"Create descriptors wallet. Only for 'create'\", ArgsManager::ALLOW_BOOL, OptionsCategory::OPTIONS);\n-    argsman.AddArg(\"-legacy\", \"Create legacy wallet. Only for 'create'\", ArgsManager::ALLOW_BOOL, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-descriptors\", \"Create descriptors wallet. Only for 'create'\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-legacy\", \"Create legacy wallet. Only for 'create'\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-format=<format>\", \"The format of the wallet file to create. Either \\\"bdb\\\" or \\\"sqlite\\\". Only used with 'createfromdump'\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-printtoconsole\", \"Send trace/debug info to console (default: 1 when no -debug is true, 0 otherwise).\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n "
      },
      {
        "sha": "f24863f419bca94fc8f5636cad4be27edc091c1f",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab",
        "patch": "@@ -24,8 +24,8 @@ void SetupChainParamsBaseOptions(ArgsManager& argsman)\n     argsman.AddArg(\"-testnet\", \"Use the test chain. Equivalent to -chain=test.\", ArgsManager::ALLOW_ANY, OptionsCategory::CHAINPARAMS);\n     argsman.AddArg(\"-vbparams=deployment:start:end[:min_activation_height]\", \"Use given start/end times and min_activation_height for specified version bits deployment (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n     argsman.AddArg(\"-signet\", \"Use the signet chain. Equivalent to -chain=signet. Note that the network is defined by the -signetchallenge parameter\", ArgsManager::ALLOW_ANY, OptionsCategory::CHAINPARAMS);\n-    argsman.AddArg(\"-signetchallenge\", \"Blocks must satisfy the given script to be considered valid (only for signet networks; defaults to the global default signet test network challenge)\", ArgsManager::ALLOW_STRING, OptionsCategory::CHAINPARAMS);\n-    argsman.AddArg(\"-signetseednode\", \"Specify a seed node for the signet network, in the hostname[:port] format, e.g. sig.net:1234 (may be used multiple times to specify multiple seed nodes; defaults to the global default signet test network seed node(s))\", ArgsManager::ALLOW_STRING, OptionsCategory::CHAINPARAMS);\n+    argsman.AddArg(\"-signetchallenge\", \"Blocks must satisfy the given script to be considered valid (only for signet networks; defaults to the global default signet test network challenge)\", ArgsManager::ALLOW_ANY | ArgsManager::DISALLOW_NEGATION, OptionsCategory::CHAINPARAMS);\n+    argsman.AddArg(\"-signetseednode\", \"Specify a seed node for the signet network, in the hostname[:port] format, e.g. sig.net:1234 (may be used multiple times to specify multiple seed nodes; defaults to the global default signet test network seed node(s))\", ArgsManager::ALLOW_ANY | ArgsManager::DISALLOW_NEGATION, OptionsCategory::CHAINPARAMS);\n }\n \n static std::unique_ptr<CBaseChainParams> globalChainBaseParams;"
      },
      {
        "sha": "e554a18fbf510ed1a1c042fd2a7f5309d12597fc",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab",
        "patch": "@@ -425,10 +425,10 @@ void SetupServerArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-connect=<ip>\", \"Connect only to the specified node; -noconnect disables automatic connections (the rules for this peer are the same as for -addnode). This option can be specified multiple times to connect to multiple nodes.\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-discover\", \"Discover own IP addresses (default: 1 when listening and no -externalip or -proxy)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-dns\", strprintf(\"Allow DNS lookups for -addnode, -seednode and -connect (default: %u)\", DEFAULT_NAME_LOOKUP), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n-    argsman.AddArg(\"-dnsseed\", strprintf(\"Query for peer addresses via DNS lookup, if low on addresses (default: %u unless -connect used)\", DEFAULT_DNSSEED), ArgsManager::ALLOW_BOOL, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-dnsseed\", strprintf(\"Query for peer addresses via DNS lookup, if low on addresses (default: %u unless -connect used)\", DEFAULT_DNSSEED), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-externalip=<ip>\", \"Specify your own public address\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n-    argsman.AddArg(\"-fixedseeds\", strprintf(\"Allow fixed seeds if DNS seeds don't provide peers (default: %u)\", DEFAULT_FIXEDSEEDS), ArgsManager::ALLOW_BOOL, OptionsCategory::CONNECTION);\n-    argsman.AddArg(\"-forcednsseed\", strprintf(\"Always query for peer addresses via DNS lookup (default: %u)\", DEFAULT_FORCEDNSSEED), ArgsManager::ALLOW_BOOL, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-fixedseeds\", strprintf(\"Allow fixed seeds if DNS seeds don't provide peers (default: %u)\", DEFAULT_FIXEDSEEDS), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-forcednsseed\", strprintf(\"Always query for peer addresses via DNS lookup (default: %u)\", DEFAULT_FORCEDNSSEED), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-listen\", \"Accept connections from outside (default: 1 if no -proxy or -connect)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-listenonion\", strprintf(\"Automatically create Tor onion service (default: %d)\", DEFAULT_LISTEN_ONION), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-maxconnections=<n>\", strprintf(\"Maintain at most <n> connections to peers (default: %u). This limit does not apply to connections manually added via -addnode or the addnode RPC, which have a separate limit of %u.\", DEFAULT_MAX_PEER_CONNECTIONS, MAX_ADDNODE_CONNECTIONS), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n@@ -438,7 +438,7 @@ void SetupServerArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-maxuploadtarget=<n>\", strprintf(\"Tries to keep outbound traffic under the given target (in MiB per 24h). Limit does not apply to peers with 'download' permission. 0 = no limit (default: %d)\", DEFAULT_MAX_UPLOAD_TARGET), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-onion=<ip:port>\", \"Use separate SOCKS5 proxy to reach peers via Tor onion services, set -noonion to disable (default: -proxy)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-i2psam=<ip:port>\", \"I2P SAM proxy to reach I2P peers and accept I2P connections (default: none)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n-    argsman.AddArg(\"-i2pacceptincoming\", \"If set and -i2psam is also set then incoming I2P connections are accepted via the SAM proxy. If this is not set but -i2psam is set then only outgoing connections will be made to the I2P network. Ignored if -i2psam is not set. Listening for incoming I2P connections is done through the SAM proxy, not by binding to a local address and port (default: 1)\", ArgsManager::ALLOW_BOOL, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-i2pacceptincoming\", \"If set and -i2psam is also set then incoming I2P connections are accepted via the SAM proxy. If this is not set but -i2psam is set then only outgoing connections will be made to the I2P network. Ignored if -i2psam is not set. Listening for incoming I2P connections is done through the SAM proxy, not by binding to a local address and port (default: 1)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-onlynet=<net>\", \"Make outgoing connections only through network <net> (\" + Join(GetNetworkNames(), \", \") + \"). Incoming connections are not affected by this option. This option can be specified multiple times to allow multiple networks. Warning: if it is used with non-onion networks and the -onion or -proxy option is set, then outbound onion connections will still be made; use -noonion or -onion=0 to disable outbound onion connections in this case.\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-peerbloomfilters\", strprintf(\"Support filtering of blocks and transaction with bloom filters (default: %u)\", DEFAULT_PEERBLOOMFILTERS), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-peerblockfilters\", strprintf(\"Serve compact block filters to peers per BIP 157 (default: %u)\", DEFAULT_PEERBLOCKFILTERS), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n@@ -447,7 +447,7 @@ void SetupServerArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-proxy=<ip:port>\", \"Connect through SOCKS5 proxy, set -noproxy to disable (default: disabled)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-proxyrandomize\", strprintf(\"Randomize credentials for every proxy connection. This enables Tor stream isolation (default: %u)\", DEFAULT_PROXYRANDOMIZE), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-seednode=<ip>\", \"Connect to a node to retrieve peer addresses, and disconnect. This option can be specified multiple times to connect to multiple nodes.\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n-    argsman.AddArg(\"-networkactive\", \"Enable all P2P network activity (default: 1). Can be changed by the setnetworkactive RPC command\", ArgsManager::ALLOW_BOOL, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-networkactive\", \"Enable all P2P network activity (default: 1). Can be changed by the setnetworkactive RPC command\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-timeout=<n>\", strprintf(\"Specify socket connection timeout in milliseconds. If an initial attempt to connect is unsuccessful after this amount of time, drop it (minimum: 1, default: %d)\", DEFAULT_CONNECT_TIMEOUT), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-peertimeout=<n>\", strprintf(\"Specify a p2p connection timeout delay in seconds. After connecting to a peer, wait this amount of time before considering disconnection based on inactivity (minimum: 1, default: %d)\", DEFAULT_PEER_CONNECT_TIMEOUT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-torcontrol=<ip>:<port>\", strprintf(\"Tor control port to use if onion listening enabled (default: %s)\", DEFAULT_TOR_CONTROL), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n@@ -462,7 +462,7 @@ void SetupServerArgs(ArgsManager& argsman)\n     hidden_args.emplace_back(\"-upnp\");\n #endif\n #ifdef USE_NATPMP\n-    argsman.AddArg(\"-natpmp\", strprintf(\"Use NAT-PMP to map the listening port (default: %s)\", DEFAULT_NATPMP ? \"1 when listening and no -proxy\" : \"0\"), ArgsManager::ALLOW_BOOL, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-natpmp\", strprintf(\"Use NAT-PMP to map the listening port (default: %s)\", DEFAULT_NATPMP ? \"1 when listening and no -proxy\" : \"0\"), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n #else\n     hidden_args.emplace_back(\"-natpmp\");\n #endif // USE_NATPMP\n@@ -514,7 +514,7 @@ void SetupServerArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-limitdescendantcount=<n>\", strprintf(\"Do not accept transactions if any ancestor would have <n> or more in-mempool descendants (default: %u)\", DEFAULT_DESCENDANT_LIMIT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-limitdescendantsize=<n>\", strprintf(\"Do not accept transactions if any ancestor would have more than <n> kilobytes of in-mempool descendants (default: %u).\", DEFAULT_DESCENDANT_SIZE_LIMIT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-addrmantest\", \"Allows to test address relay on localhost\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n-    argsman.AddArg(\"-capturemessages\", \"Capture all P2P messages to disk\", ArgsManager::ALLOW_BOOL | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-capturemessages\", \"Capture all P2P messages to disk\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-mocktime=<n>\", \"Replace actual time with \" + UNIX_EPOCH_TIME + \" (default: 0)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-maxsigcachesize=<n>\", strprintf(\"Limit sum of signature cache and script execution cache sizes to <n> MiB (default: %u)\", DEFAULT_MAX_SIG_CACHE_SIZE), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-maxtipage=<n>\", strprintf(\"Maximum tip age in seconds to consider node in initial block download (default: %u)\", DEFAULT_MAX_TIP_AGE), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n@@ -551,13 +551,13 @@ void SetupServerArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-rpcthreads=<n>\", strprintf(\"Set the number of threads to service RPC calls (default: %d)\", DEFAULT_HTTP_THREADS), ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n     argsman.AddArg(\"-rpcuser=<user>\", \"Username for JSON-RPC connections\", ArgsManager::ALLOW_ANY | ArgsManager::SENSITIVE, OptionsCategory::RPC);\n     argsman.AddArg(\"-rpcwhitelist=<whitelist>\", \"Set a whitelist to filter incoming RPC calls for a specific user. The field <whitelist> comes in the format: <USERNAME>:<rpc 1>,<rpc 2>,...,<rpc n>. If multiple whitelists are set for a given user, they are set-intersected. See -rpcwhitelistdefault documentation for information on default whitelist behavior.\", ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n-    argsman.AddArg(\"-rpcwhitelistdefault\", \"Sets default behavior for rpc whitelisting. Unless rpcwhitelistdefault is set to 0, if any -rpcwhitelist is set, the rpc server acts as if all rpc users are subject to empty-unless-otherwise-specified whitelists. If rpcwhitelistdefault is set to 1 and no -rpcwhitelist is set, rpc server acts as if all rpc users are subject to empty whitelists.\", ArgsManager::ALLOW_BOOL, OptionsCategory::RPC);\n+    argsman.AddArg(\"-rpcwhitelistdefault\", \"Sets default behavior for rpc whitelisting. Unless rpcwhitelistdefault is set to 0, if any -rpcwhitelist is set, the rpc server acts as if all rpc users are subject to empty-unless-otherwise-specified whitelists. If rpcwhitelistdefault is set to 1 and no -rpcwhitelist is set, rpc server acts as if all rpc users are subject to empty whitelists.\", ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n     argsman.AddArg(\"-rpcworkqueue=<n>\", strprintf(\"Set the depth of the work queue to service RPC calls (default: %d)\", DEFAULT_HTTP_WORKQUEUE), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::RPC);\n     argsman.AddArg(\"-server\", \"Accept command line and JSON-RPC commands\", ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n \n #if HAVE_DECL_FORK\n-    argsman.AddArg(\"-daemon\", strprintf(\"Run in the background as a daemon and accept commands (default: %d)\", DEFAULT_DAEMON), ArgsManager::ALLOW_BOOL, OptionsCategory::OPTIONS);\n-    argsman.AddArg(\"-daemonwait\", strprintf(\"Wait for initialization to be finished before exiting. This implies -daemon (default: %d)\", DEFAULT_DAEMONWAIT), ArgsManager::ALLOW_BOOL, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-daemon\", strprintf(\"Run in the background as a daemon and accept commands (default: %d)\", DEFAULT_DAEMON), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-daemonwait\", strprintf(\"Wait for initialization to be finished before exiting. This implies -daemon (default: %d)\", DEFAULT_DAEMONWAIT), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n #else\n     hidden_args.emplace_back(\"-daemon\");\n     hidden_args.emplace_back(\"-daemonwait\");"
      },
      {
        "sha": "b0c8068ab93d729c75828252299c4eb708b7f87a",
        "filename": "src/test/getarg_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab/src/test/getarg_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab/src/test/getarg_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/getarg_tests.cpp?ref=c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab",
        "patch": "@@ -194,8 +194,8 @@ BOOST_AUTO_TEST_CASE(boolargno)\n \n BOOST_AUTO_TEST_CASE(logargs)\n {\n-    const auto okaylog_bool = std::make_pair(\"-okaylog-bool\", ArgsManager::ALLOW_BOOL);\n-    const auto okaylog_negbool = std::make_pair(\"-okaylog-negbool\", ArgsManager::ALLOW_BOOL);\n+    const auto okaylog_bool = std::make_pair(\"-okaylog-bool\", ArgsManager::ALLOW_ANY);\n+    const auto okaylog_negbool = std::make_pair(\"-okaylog-negbool\", ArgsManager::ALLOW_ANY);\n     const auto okaylog = std::make_pair(\"-okaylog\", ArgsManager::ALLOW_ANY);\n     const auto dontlog = std::make_pair(\"-dontlog\", ArgsManager::ALLOW_ANY | ArgsManager::SENSITIVE);\n     SetupArgs({okaylog_bool, okaylog_negbool, okaylog, dontlog});"
      },
      {
        "sha": "99d111b066be2c331aff7c33dbfd6f01a5533d03",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab",
        "patch": "@@ -652,7 +652,6 @@ void ArgsManager::AddArg(const std::string& name, const std::string& help, unsig\n \n     LOCK(cs_args);\n     std::map<std::string, Arg>& arg_map = m_available_args[cat];\n-    if ((flags & (ALLOW_ANY | ALLOW_BOOL)) == 0) flags |= DISALLOW_NEGATION; // Temporary, removed in next scripted-diff\n     auto ret = arg_map.emplace(arg_name, Arg{name.substr(eq_index, name.size() - eq_index), help, flags});\n     assert(ret.second); // Make sure an insertion actually happened\n "
      },
      {
        "sha": "37d976221b4858defe6a74feecd291d629047f97",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab",
        "patch": "@@ -164,10 +164,10 @@ class ArgsManager\n      */\n     enum Flags : uint32_t {\n         ALLOW_ANY = 0x01,         //!< disable validation\n-        ALLOW_BOOL = 0x02,        //!< unimplemented, draft implementation in #16545\n-        ALLOW_INT = 0x04,         //!< unimplemented, draft implementation in #16545\n-        ALLOW_STRING = 0x08,      //!< unimplemented, draft implementation in #16545\n-        ALLOW_LIST = 0x10,        //!< unimplemented, draft implementation in #16545\n+        // ALLOW_BOOL = 0x02,     //!< unimplemented, draft implementation in #16545\n+        // ALLOW_INT = 0x04,      //!< unimplemented, draft implementation in #16545\n+        // ALLOW_STRING = 0x08,   //!< unimplemented, draft implementation in #16545\n+        // ALLOW_LIST = 0x10,     //!< unimplemented, draft implementation in #16545\n         DISALLOW_NEGATION = 0x20, //!< disallow -nofoo syntax\n \n         DEBUG_ONLY = 0x100,"
      },
      {
        "sha": "7a5526a4cb7c2df21608cb9cb9a8678cd866924e",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab",
        "patch": "@@ -84,7 +84,7 @@ void WalletInit::AddWalletOptions(ArgsManager& argsman) const\n #endif\n \n #ifdef USE_SQLITE\n-    argsman.AddArg(\"-unsafesqlitesync\", \"Set SQLite synchronous=OFF to disable waiting for the database to sync to disk. This is unsafe and can cause data loss and corruption. This option is only used by tests to improve their performance (default: false)\", ArgsManager::ALLOW_BOOL | ArgsManager::DEBUG_ONLY, OptionsCategory::WALLET_DEBUG_TEST);\n+    argsman.AddArg(\"-unsafesqlitesync\", \"Set SQLite synchronous=OFF to disable waiting for the database to sync to disk. This is unsafe and can cause data loss and corruption. This option is only used by tests to improve their performance (default: false)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::WALLET_DEBUG_TEST);\n #else\n     argsman.AddHiddenArgs({\"-unsafesqlitesync\"});\n #endif"
      }
    ]
  }
]