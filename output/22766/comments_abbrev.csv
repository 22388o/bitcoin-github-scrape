DrahtBot,2021-08-21 21:51:32,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#22834](https://github.com/bitcoin/bitcoin/pull/22834) (net: respect -onlynet= when making outbound connections by vasild",https://github.com/bitcoin/bitcoin/pull/22766#issuecomment-903180545,903180545,
ryanofsky,2021-08-24 10:19:48,"Rebased 75e3ddb981f856612e1ef3ac765e2903d32781f4 -> daf070bdee9a1b4eaf3a4976537111f257bc1be6 ([`pr/argscripts.1`](https://github.com/ryanofsky/bitcoin/commits/pr/argscripts.1) -> [`pr/argscripts.2`](https://github.com/ryanofsky/bitcoin/commits/pr/argscripts.2), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/argscripts.1-rebase..pr/argscripts.2)) due to conflict with #22220",https://github.com/bitcoin/bitcoin/pull/22766#issuecomment-904514721,904514721,
amitiuttarwar,2021-08-25 19:23:32,"concept ACK, init can definitely use some cleaning up, thanks for working on this.\n\nDo I understand the idea & context correctly? - enforcing type validation is the end goal & this is an intermediary step to have the code reflect the level of validation that's actually currently occurring (aka, not much)? ",https://github.com/bitcoin/bitcoin/pull/22766#issuecomment-905809991,905809991,
kiminuo,2021-08-25 19:25:54,Concept ACK,https://github.com/bitcoin/bitcoin/pull/22766#issuecomment-905811443,905811443,
ryanofsky,2021-08-25 23:49:25,"> Do I understand the idea & context correctly? - enforcing type validation is the end goal & this is an intermediary step to have the code reflect the level of validation that's actually currently occurring (aka, not much)?\n\nYep, that's all correct but just to be clear this PR has two goals:\n\n1. Get rid of misleading ArgsManager flags\n2. Simplify future PRs implementing more validation ",https://github.com/bitcoin/bitcoin/pull/22766#issuecomment-905949898,905949898,
ryanofsky,2021-08-26 10:34:31,"Rebased 7ca417e3223de2d8bf81de24e5605c8e87fcb7fe -> 31a8356714821f818ef476a9581e7830dd5ed940 ([`pr/argscripts.3`](https://github.com/ryanofsky/bitcoin/commits/pr/argscripts.3) -> [`pr/argscripts.4`](https://github.com/ryanofsky/bitcoin/commits/pr/argscripts.4), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/argscripts.3-rebase..pr/argscripts.4)) due to conflict with #22183",https://github.com/bitcoin/bitcoin/pull/22766#issuecomment-906288069,906288069,
MarcoFalke,2021-09-01 07:19:51,"Maybe the last commit can be split up, because it is the most uncontroversial one but causes the most (silent) conflicts?",https://github.com/bitcoin/bitcoin/pull/22766#issuecomment-910001542,910001542,
hebasto,2021-09-03 06:10:53,"Concept ACK.\n\nWondering what are benefits of the `DISALLOW_NEGATION` flag in comparison to the `ALLOW_NEGATED` one (not an issue at all, just trying to understand motivation)?",https://github.com/bitcoin/bitcoin/pull/22766#issuecomment-912284343,912284343,
ryanofsky,2021-09-27 13:39:33,"Rebased 0768cdc3e77f9670f0115cdf197a282c355bc287 -> 5c04ca81fd2c44fed6487123500b49434280d514 ([`pr/argscripts.5`](https://github.com/ryanofsky/bitcoin/commits/pr/argscripts.5) -> [`pr/argscripts.6`](https://github.com/ryanofsky/bitcoin/commits/pr/argscripts.6), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/argscripts.5-rebase..pr/argscripts.6)) due to silent conflict with #23025 in scr",https://github.com/bitcoin/bitcoin/pull/22766#issuecomment-927885301,927885301,
ryanofsky,2021-10-16 14:37:42,"Thanks for review! Just wanted to quickly say you do not need to care anything about #16545 for this PR to make sense. This PR is disabling flags `ALLOW_INT/STRING/BOOL` which are broken, by commenting them out. #16545 is reenabling these flags by uncommenting them again and implementing them.\n\nEven if #16545 is rejected, these flags are misleading now and should be disabled. The only effect t",https://github.com/bitcoin/bitcoin/pull/22766#issuecomment-944924866,944924866,
ryanofsky,2021-10-25 15:48:48,"Rebased b8fd5d54fafe94cb40a43e3e1366a6855a512e4e -> c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab ([`pr/argscripts.7`](https://github.com/ryanofsky/bitcoin/commits/pr/argscripts.7) -> [`pr/argscripts.8`](https://github.com/ryanofsky/bitcoin/commits/pr/argscripts.8), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/argscripts.7-rebase..pr/argscripts.8)) due to conflict with #23002",https://github.com/bitcoin/bitcoin/pull/22766#issuecomment-951062306,951062306,
ajtowns,2021-10-26 09:55:55,utACK c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab,https://github.com/bitcoin/bitcoin/pull/22766#issuecomment-951775197,951775197,
ryanofsky,2021-10-29 17:08:18,"@promag do you think you could reack? Only change since your previous review was rebasing to avoid a minor wallet-tool conflict, https://github.com/bitcoin/bitcoin/pull/22766#issuecomment-951062306",https://github.com/bitcoin/bitcoin/pull/22766#issuecomment-954905563,954905563,
kiminuo,2021-08-23 20:46:13,"I wonder whether maybe the name should be `GetInt64Arg`. The name is not as nice as you have but it's easy to think that the return type is simply `int`. Again, I'm not sure whether it is an issue. So this is rather a question for my information.",https://github.com/bitcoin/bitcoin/pull/22766#discussion_r694296807,694296807,src/util/system.h
kiminuo,2021-08-24 10:25:10,I can see that once the casting is used ([here](https://github.com/bitcoin/bitcoin/pull/22766/files#diff-cafbe1353eff6084b73fd3b6c3dee603e0827348fdd2fe12dfad1e01003a84edR87)) and here it is not. Maybe it should be consistent.,https://github.com/bitcoin/bitcoin/pull/22766#discussion_r694721588,694721588,src/net_processing.cpp
kiminuo,2021-08-24 10:26:05,Should there be a cast here as `int64_t` is converted to `int`? Mainly to allow the reader to know that the types are different.,https://github.com/bitcoin/bitcoin/pull/22766#discussion_r694722251,694722251,src/bitcoin-cli.cpp
kiminuo,2021-08-24 10:40:52,Should Doxygen `@return` be used here?,https://github.com/bitcoin/bitcoin/pull/22766#discussion_r694731933,694731933,src/util/system.cpp
kiminuo,2021-08-24 10:46:05,I wonder whether `enum class Flags : uint32_t` may be used here as Jon did in https://github.com/bitcoin/bitcoin/pull/21506/ ([guideline](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Renum-class)). Would it make sense to you in this or a follow-up PR?,https://github.com/bitcoin/bitcoin/pull/22766#discussion_r694735104,694735104,src/util/system.h
ryanofsky,2021-08-24 15:34:33,"re: https://github.com/bitcoin/bitcoin/pull/22766#discussion_r694731933\n\n> Should Doxygen `@return` be used here?\n\nThanks! Updated",https://github.com/bitcoin/bitcoin/pull/22766#discussion_r694968514,694968514,src/util/system.cpp
ryanofsky,2021-08-24 15:34:48,"re: https://github.com/bitcoin/bitcoin/pull/22766#discussion_r694735104\n\n> I wonder whether `enum class Flags : uint32_t` may be used here as Jon did in #21506 ([guideline](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Renum-class)). Would it make sense to you in this or a follow-up PR?\n\nThis could be fine, but I'm not sure what the specific advantage of doing it would be in",https://github.com/bitcoin/bitcoin/pull/22766#discussion_r694968709,694968709,src/util/system.h
ryanofsky,2021-08-24 15:35:27,"re: https://github.com/bitcoin/bitcoin/pull/22766#discussion_r694722251\n\n> Should there be a cast here as `int64_t` is converted to `int`? Mainly to allow the reader to know that the types are different.\n\nThis scripted diff is just trying to rename the function, not change the way the function is called, but this could be reasonable to do separately.",https://github.com/bitcoin/bitcoin/pull/22766#discussion_r694969267,694969267,src/bitcoin-cli.cpp
ryanofsky,2021-08-24 15:35:39,"re: https://github.com/bitcoin/bitcoin/pull/22766#discussion_r694721588\n\n> I can see that once the casting is used ([here](https://github.com/bitcoin/bitcoin/pull/22766/files#diff-cafbe1353eff6084b73fd3b6c3dee603e0827348fdd2fe12dfad1e01003a84edR87)) and here it is not. Maybe it should be consistent.\n\nThis scripted diff is just trying to rename the function, not change the way the function ",https://github.com/bitcoin/bitcoin/pull/22766#discussion_r694969453,694969453,src/net_processing.cpp
ryanofsky,2021-08-24 15:35:48,"re: https://github.com/bitcoin/bitcoin/pull/22766#discussion_r694296807\n\n> I wonder whether maybe the name should be `GetInt64Arg`. The name is not as nice as you have but it's easy to think that the return type is simply `int`. Again, I'm not sure whether it is an issue. So this is rather a question for my information.\n\nSure. I wouldn't mind that name, though I do prefer current name beca",https://github.com/bitcoin/bitcoin/pull/22766#discussion_r694969613,694969613,src/util/system.h
kiminuo,2021-08-25 07:50:45,"I think the rationale in the guideline makes sense and that's why I suggested it. There was no specific advatange I had in mind. Anyway, it may (not) be a good follow up PR.",https://github.com/bitcoin/bitcoin/pull/22766#discussion_r695495304,695495304,src/util/system.h
kiminuo,2021-08-25 07:51:01,It looks great.,https://github.com/bitcoin/bitcoin/pull/22766#discussion_r695495506,695495506,src/util/system.cpp
ajtowns,2021-09-01 05:20:57,"I found this a little confusing (when reimplementing it, I had it swapped around and wrote `bool negated = IntepretKey()` without the `!`). Maybe would be clearer to return `struct { std::string section; bool negated; }` and write `auto keyinfo = InterpretKey(key);`instead?",https://github.com/bitcoin/bitcoin/pull/22766#discussion_r699851892,699851892,src/util/system.cpp
ajtowns,2021-09-01 06:16:25,See `NetPermissionsFlags` in net_permissions.h for comparison; it gives you lots of namespacing (so you'd be writing `ArgsManager::Flags::ALLOW_BOOL` everywhere) and means you can't just treat them as ints (so bitwise or'ing things together means you have to declare your own operator),https://github.com/bitcoin/bitcoin/pull/22766#discussion_r699874087,699874087,src/util/system.h
jonatack,2021-09-01 06:43:37,"Yes, two sides of a coin, I suppose.\n\nNamespacing can allow shortening the enumerator names, since they no longer need to be unique in global namespace (and can therefore no longer need to be shouty ""there can only be one""), e.g. ArgsManager::ALLOW_STRING could be ArgsManager::Flags::string. Whether that naming is better may be personal taste, but getting them out of global space seems good.\",https://github.com/bitcoin/bitcoin/pull/22766#discussion_r699895416,699895416,src/util/system.h
ajtowns,2021-09-02 21:56:52,"I think I finally figured out how you can go a little bit further than the above, ending up with something like:\n\n```c++\nstruct NetSettings\n{\n    int64_t blockreconstructionextratxn;\n    int64_t maxorphantx;\n    bool capturemessages;\n\n    template<typename C, typename... Args>\n    static inline void F(Args&... args) {\n        return C::Do(args...,\n            C::Defn( &NetS",https://github.com/bitcoin/bitcoin/pull/22766#discussion_r701448785,701448785,src/util/system.h
hebasto,2021-09-03 06:44:38,"1) s/`ALLOW_ANY`/`DISABLE_VALIDATION`/, and drop the `//!< disable validation` comment?\n2) as `ALLOW_ANY` is not a combination of other flags now, would it simplify the code if `ALLOW_ANY = 0`? (going to check this suggestion later)\n\nnits:\n1) ~could we switch values to ""shifted ones"" `(1 << N)` for better readability?~ nm, out of scope\n2) ~assuming that another type could be added in the",https://github.com/bitcoin/bitcoin/pull/22766#discussion_r701624718,701624718,src/util/system.h
hebasto,2021-09-03 07:00:06,"nit: to make `clang-format` happy:\n```suggestion\nstatic std::optional<util::SettingsValue> InterpretValue(\n    const std::string& key,\n    const std::string& value,\n    bool negated,\n    unsigned int flags,\n    std::string& error)\n```",https://github.com/bitcoin/bitcoin/pull/22766#discussion_r701632462,701632462,src/util/system.cpp
ryanofsky,2021-09-15 00:26:09,"re: https://github.com/bitcoin/bitcoin/pull/22766#discussion_r699851892\n\n> I found this a little confusing (when reimplementing it, I had it swapped around and wrote `bool negated = IntepretKey()` without the `!`). Maybe would be clearer to return `struct { std::string section; bool negated; }` and write `auto keyinfo = InterpretKey(key);`instead?\n\nGood idea, implemented this.\n",https://github.com/bitcoin/bitcoin/pull/22766#discussion_r708748619,708748619,src/util/system.cpp
ryanofsky,2021-09-15 00:26:20,"re: https://github.com/bitcoin/bitcoin/pull/22766#discussion_r701632462\n\n> nit: to make `clang-format` happy:\n\nI ran clang-format and it changed it a different way, but rest assured some clang somewhere is happy!",https://github.com/bitcoin/bitcoin/pull/22766#discussion_r708748671,708748671,src/util/system.cpp
ryanofsky,2021-09-15 00:26:35,"re: https://github.com/bitcoin/bitcoin/pull/22766#discussion_r694735104\n\n> I wonder whether `enum class Flags : uint32_t` may be used here as Jon did in #21506 ([guideline](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Renum-class)). Would it make sense to you in this or a follow-up PR?\n\nFiled #22977 to track this, since it's not really about this PR",https://github.com/bitcoin/bitcoin/pull/22766#discussion_r708748758,708748758,src/util/system.h
ryanofsky,2021-09-15 00:26:45,"re: https://github.com/bitcoin/bitcoin/pull/22766#discussion_r701624718\n\n>     1. s/`ALLOW_ANY`/`DISABLE_VALIDATION`/, and drop the `//!< disable validation` comment?\n\nThis would make the PR bigger and conflict with more PRs. Also, it seems like bikeshedding, and like it might relationships between flags less clear. But please do post a separate RFC issue or a separate PR if the name of th",https://github.com/bitcoin/bitcoin/pull/22766#discussion_r708748834,708748834,src/util/system.h
ryanofsky,2021-09-15 00:27:39,"re: https://github.com/bitcoin/bitcoin/pull/22766#discussion_r701448785\n\n> I think I finally figured out how you can go a little bit further than the above, ending up with something like:\n\nFiled #22978 to track this, since it's not really about this PR",https://github.com/bitcoin/bitcoin/pull/22766#discussion_r708749096,708749096,src/util/system.h
promag,2021-10-16 11:33:06,"4be2e10cc250350ad6c81bb75589793dfa27990d\n\nnit, rename `value` to `parsed`, here change to `!parsed.has_value()`, and below `parsed.value()`.",https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730251148,730251148,src/util/system.cpp
promag,2021-10-16 11:39:04,"4be2e10cc250350ad6c81bb75589793dfa27990d\n\nCould keep comment that says `key` is changed.",https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730251794,730251794,src/util/system.cpp
promag,2021-10-16 11:40:02,"4be2e10cc250350ad6c81bb75589793dfa27990d\n\nInstead of changing the argument, could add `key` member to `KeyInfo` and make argument `const`.",https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730251850,730251850,src/util/system.cpp
promag,2021-10-16 11:42:02,"4be2e10cc250350ad6c81bb75589793dfa27990d\n\nnit, if you pick the suggestion to add `key` to `KeyInfo` then this could be `InterpretValue(const KeyInfo& key_info, ...)`.",https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730252053,730252053,src/util/system.cpp
ryanofsky,2021-10-16 15:08:47,"re: https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730251794\n\n> Could keep comment that says `key` is changed.\n\nLet me know if there's a comment that's being removed that you want to keep. Implementation is changed again now, but the new comment said it strips prefixes, so I'm not sure what old comment you wanted to keep.",https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730274909,730274909,src/util/system.cpp
ryanofsky,2021-10-16 15:09:50,"re: https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730251850\n\n> Instead of changing the argument, could add `key` member to `KeyInfo` and make argument `const`.\n\nDone. This does work nicely with InterpretValue as you suggested.",https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730275036,730275036,src/util/system.cpp
ryanofsky,2021-10-16 15:10:11,"re: https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730252053\n\n> nit, if you pick the suggestion to add `key` to `KeyInfo` then this could be `InterpretValue(const KeyInfo& key_info, ...)`.\n\nDone",https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730275080,730275080,src/util/system.cpp
ryanofsky,2021-10-16 15:11:31,"re: https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730251148\n\n> nit, rename `value` to `parsed`, here change to `!parsed.has_value()`, and below `parsed.value()`.\n\nWhy these requests? Usage of `has_value` seems less idiomatic and the name `parsed` seems less descriptive. It's always helpful when you make suggestions to say what thinking is behind them so different preferences ca",https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730275232,730275232,src/util/system.cpp
kiminuo,2021-10-16 15:13:00,"nit: As there are many ""keys"" in Bitcoin codebase and the word meaning is heavily overloaded, maybe it would make sense to have `SettingKeyInfo` / `SettingKey` / `ArgKeyInfo` or something.",https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730275392,730275392,src/util/system.cpp
promag,2021-10-16 15:15:05,"5c04ca81fd2c44fed6487123500b49434280d514\n\nFor the record, I don't mind these commented out instead of removed.",https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730275650,730275650,src/util/system.h
kiminuo,2021-10-16 15:21:49,"not for this PR but: [key.compare(..)](https://en.cppreference.com/w/cpp/string/basic_string/compare) seems more efficient than `key.substr(..)` here. In C++20, there will be [starts_with](https://en.cppreference.com/w/cpp/string/basic_string/starts_with) function.",https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730276363,730276363,src/util/system.cpp
kiminuo,2021-10-16 15:35:48,"I agree. \n\nI would say that a comment like `@param[in|out] key ...` (not sure how to write it properly) would be great here.",https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730278012,730278012,src/util/system.cpp
kiminuo,2021-10-16 15:40:45,"6e613a0a3058e65237907bcf7915864dcef8cc99: Not sure if this commit should add the flag as it does not implement it anyway. \n\nAlso at this point, it's not entirely clear if `ALLOW_LIST` allows only `[type, type, type,...]` lists or even `[type1, type2, type3, ...]` lists.",https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730278521,730278521,src/util/system.h
kiminuo,2021-10-16 15:42:51,"6e613a0a3058e65237907bcf7915864dcef8cc99\n\nnit: It seems to me that this message may simply say that negation is disallowed/forbidden as I'm not sure that it's guarranteed that negation is ""meaningless"".",https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730278801,730278801,src/util/system.cpp
kiminuo,2021-10-16 15:46:37,6e613a0a3058e65237907bcf7915864dcef8cc99: Would it be possible to add a comment for `DEBUG_ONLY` too? Or is it out of scope here?,https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730279143,730279143,src/util/system.h
ryanofsky,2021-10-16 16:02:05,"re: https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730278012\n\n> I would say that a comment like `@param[in|out] key ...` (not sure how to write it properly) would be great here.\n\nShould be resolved since it's input only now.",https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730280814,730280814,src/util/system.cpp
ryanofsky,2021-10-16 16:02:32,"re: https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730276363\n\n> not for this PR but: [key.compare(..)](https://en.cppreference.com/w/cpp/string/basic_string/compare) seems more efficient than `key.substr(..)` here. In C++20, there will be [starts_with](https://en.cppreference.com/w/cpp/string/basic_string/starts_with) function.\n\nAgree it would be a good change in a different PR",https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730280885,730280885,src/util/system.cpp
ryanofsky,2021-10-16 16:06:48,"re: https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730279143\n\n> [6e613a0](https://github.com/bitcoin/bitcoin/commit/6e613a0a3058e65237907bcf7915864dcef8cc99): Would it be possible to add a comment for `DEBUG_ONLY` too? Or is it out of scope here?\n\nI'd have to research what the comment should say and I'd rather see it done separately. This is a flag, but not a flag related to the",https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730281278,730281278,src/util/system.h
ryanofsky,2021-10-16 16:14:47,"re: https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730275392\n\n> nit: As there are many ""keys"" in Bitcoin codebase and the word meaning is heavily overloaded, maybe it would make sense to have `SettingKeyInfo` / `SettingKey` / `ArgKeyInfo` or something.\n\nI'm happy to use a different name, but this was the name suggested by another reviewer so I kept it. If reviewers want to decid",https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730282231,730282231,src/util/system.cpp
ryanofsky,2021-10-16 16:20:12,"re: https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730278801\n\n> nit: It seems to me that this message may simply say that negation is disallowed/forbidden as I'm not sure that it's guarranteed that negation is ""meaningless"".\n\nI agree this error message is not clear, and this is only kept to keep current behavior.\n\nIn the future, I think it would be good to remove the disallo",https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730282853,730282853,src/util/system.cpp
ryanofsky,2021-10-16 16:23:37,"re: https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730278521\n\n> [6e613a0](https://github.com/bitcoin/bitcoin/commit/6e613a0a3058e65237907bcf7915864dcef8cc99): Not sure if this commit should add the flag as it does not implement it anyway.\n\nRight, no point describing a future unimplemented flag.\n\n> Also at this point, it's not entirely clear if `ALLOW_LIST` allows only `[type",https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730283315,730283315,src/util/system.h
ryanofsky,2021-10-16 16:42:02,"re: https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730275650\n\n> For the record, I don't mind these commented out instead of removed.\n\nThe reason these are commented out instead of removed is that flag name ALLOW_ANY doesn't make sense without seeing other ALLOW_ flags. I could remove or rename ALLOW_ANY, but I don't want to, because it would blow up the size of this PR and make ",https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730285366,730285366,src/util/system.h
promag,2021-10-16 16:52:55,Ya original comment is not relevant now.,https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730286519,730286519,src/util/system.cpp
promag,2021-10-17 09:43:37,"Just a nit, feel free to ignore. Personally prefer `has_value()`, especially if above was `auto value = InterpretValue(...)`.\n\nEdit:`has_value()` is used in some places. Maybe there should be some guidelines in developer notes or something?",https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730386083,730386083,src/util/system.cpp
