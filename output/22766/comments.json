[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/903180545",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22766#issuecomment-903180545",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22766",
    "id": 903180545,
    "node_id": "IC_kwDOABII58411XEB",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-21T21:51:32Z",
    "updated_at": "2021-10-25T21:39:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#22834](https://github.com/bitcoin/bitcoin/pull/22834) (net: respect -onlynet= when making outbound connections by vasild)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/903180545/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/904514721",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22766#issuecomment-904514721",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22766",
    "id": 904514721,
    "node_id": "IC_kwDOABII58416cyh",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-24T10:19:48Z",
    "updated_at": "2021-08-24T10:19:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "Rebased 75e3ddb981f856612e1ef3ac765e2903d32781f4 -> daf070bdee9a1b4eaf3a4976537111f257bc1be6 ([`pr/argscripts.1`](https://github.com/ryanofsky/bitcoin/commits/pr/argscripts.1) -> [`pr/argscripts.2`](https://github.com/ryanofsky/bitcoin/commits/pr/argscripts.2), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/argscripts.1-rebase..pr/argscripts.2)) due to conflict with #22220",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/904514721/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/905809991",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22766#issuecomment-905809991",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22766",
    "id": 905809991,
    "node_id": "IC_kwDOABII5841_ZBH",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?u=f0ef8142342bcda68fe46c952d3c653456811ed4&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-25T19:23:32Z",
    "updated_at": "2021-08-25T19:23:32Z",
    "author_association": "MEMBER",
    "body": "concept ACK, init can definitely use some cleaning up, thanks for working on this.\r\n\r\nDo I understand the idea & context correctly? - enforcing type validation is the end goal & this is an intermediary step to have the code reflect the level of validation that's actually currently occurring (aka, not much)? ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/905809991/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/905811443",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22766#issuecomment-905811443",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22766",
    "id": 905811443,
    "node_id": "IC_kwDOABII5841_ZXz",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?u=b48a1208deda9bd1756f21a35341ce98265355c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-25T19:25:54Z",
    "updated_at": "2021-08-25T19:25:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "Concept ACK",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/905811443/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/905949898",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22766#issuecomment-905949898",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22766",
    "id": 905949898,
    "node_id": "IC_kwDOABII5841_7LK",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-25T23:49:25Z",
    "updated_at": "2021-08-25T23:49:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Do I understand the idea & context correctly? - enforcing type validation is the end goal & this is an intermediary step to have the code reflect the level of validation that's actually currently occurring (aka, not much)?\r\n\r\nYep, that's all correct but just to be clear this PR has two goals:\r\n\r\n1. Get rid of misleading ArgsManager flags\r\n2. Simplify future PRs implementing more validation by cleaning up existing validation\r\n\r\nThe PR should make sense by itself just for the first goal even if you don't care about the second goal.\r\n\r\nMaybe another helpful note about the PR is that only the first commit adds any new code. The other two commits are scripted diff cleanups that don't add any code.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/905949898/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/906288069",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22766#issuecomment-906288069",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22766",
    "id": 906288069,
    "node_id": "IC_kwDOABII5842BNvF",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-26T10:34:31Z",
    "updated_at": "2021-08-26T10:34:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "Rebased 7ca417e3223de2d8bf81de24e5605c8e87fcb7fe -> 31a8356714821f818ef476a9581e7830dd5ed940 ([`pr/argscripts.3`](https://github.com/ryanofsky/bitcoin/commits/pr/argscripts.3) -> [`pr/argscripts.4`](https://github.com/ryanofsky/bitcoin/commits/pr/argscripts.4), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/argscripts.3-rebase..pr/argscripts.4)) due to conflict with #22183",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/906288069/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/910001542",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22766#issuecomment-910001542",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22766",
    "id": 910001542,
    "node_id": "IC_kwDOABII5842PYWG",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-01T07:19:51Z",
    "updated_at": "2021-09-01T07:19:51Z",
    "author_association": "MEMBER",
    "body": "Maybe the last commit can be split up, because it is the most uncontroversial one but causes the most (silent) conflicts?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/910001542/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/912284343",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22766#issuecomment-912284343",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22766",
    "id": 912284343,
    "node_id": "IC_kwDOABII5842YFq3",
    "user": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?u=7297e8aaf9188c0cb98bc549a8a02a1dc8d59e4c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-03T06:10:53Z",
    "updated_at": "2021-09-03T06:10:53Z",
    "author_association": "MEMBER",
    "body": "Concept ACK.\r\n\r\nWondering what are benefits of the `DISALLOW_NEGATION` flag in comparison to the `ALLOW_NEGATED` one (not an issue at all, just trying to understand motivation)?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/912284343/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/927885301",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22766#issuecomment-927885301",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22766",
    "id": 927885301,
    "node_id": "IC_kwDOABII5843Tmf1",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-27T13:39:33Z",
    "updated_at": "2021-09-27T13:39:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "Rebased 0768cdc3e77f9670f0115cdf197a282c355bc287 -> 5c04ca81fd2c44fed6487123500b49434280d514 ([`pr/argscripts.5`](https://github.com/ryanofsky/bitcoin/commits/pr/argscripts.5) -> [`pr/argscripts.6`](https://github.com/ryanofsky/bitcoin/commits/pr/argscripts.6), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/argscripts.5-rebase..pr/argscripts.6)) due to silent conflict with #23025 in scripted diff commit\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/927885301/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/944924866",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22766#issuecomment-944924866",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22766",
    "id": 944924866,
    "node_id": "IC_kwDOABII5844UmjC",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-16T14:37:42Z",
    "updated_at": "2021-10-16T14:44:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for review! Just wanted to quickly say you do not need to care anything about #16545 for this PR to make sense. This PR is disabling flags `ALLOW_INT/STRING/BOOL` which are broken, by commenting them out. #16545 is reenabling these flags by uncommenting them again and implementing them.\r\n\r\nEven if #16545 is rejected, these flags are misleading now and should be disabled. The only effect these flags have now is to disallow negation, so this PR is replacing them with a clearer `DISALLOW_NEGATION` flag. I expect this flag to be rarely used in the future, and probably to be removed later. Defining it here is just useful to make current code clear and avoid changing behavior in any way with this PR.\r\n\r\n---\r\n\r\n(EDIT: The reason I think DISALLOW_NEGATION will be removed in the future is described https://github.com/bitcoin/bitcoin/pull/22766#pullrequestreview-754561115. But basically I think the error message DISALLOW_NEGATION shows is vague and a little confusing, and in general you will produce better error messages by checking for allowed values than checking for disallowed values.)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/944924866/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/951062306",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22766#issuecomment-951062306",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22766",
    "id": 951062306,
    "node_id": "IC_kwDOABII5844sA8i",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-25T15:48:48Z",
    "updated_at": "2021-10-25T15:48:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "Rebased b8fd5d54fafe94cb40a43e3e1366a6855a512e4e -> c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab ([`pr/argscripts.7`](https://github.com/ryanofsky/bitcoin/commits/pr/argscripts.7) -> [`pr/argscripts.8`](https://github.com/ryanofsky/bitcoin/commits/pr/argscripts.8), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/argscripts.7-rebase..pr/argscripts.8)) due to conflict with #23002",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/951062306/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/951775197",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22766#issuecomment-951775197",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22766",
    "id": 951775197,
    "node_id": "IC_kwDOABII5844uu_d",
    "user": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-26T09:55:55Z",
    "updated_at": "2021-10-26T09:55:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "utACK c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/951775197/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/954905563",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22766#issuecomment-954905563",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22766",
    "id": 954905563,
    "node_id": "IC_kwDOABII58446rPb",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-29T17:08:18Z",
    "updated_at": "2021-10-29T17:08:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "@promag do you think you could reack? Only change since your previous review was rebasing to avoid a minor wallet-tool conflict, https://github.com/bitcoin/bitcoin/pull/22766#issuecomment-951062306",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/954905563/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694296807",
    "pull_request_review_id": 736551501,
    "id": 694296807,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NDI5NjgwNw==",
    "diff_hunk": "@@ -327,7 +333,7 @@ class ArgsManager\n      * @param nDefault (e.g. 1)\n      * @return command-line argument (0 if invalid number) or default value\n      */\n-    int64_t GetArg(const std::string& strArg, int64_t nDefault) const;\n+    int64_t GetIntArg(const std::string& strArg, int64_t nDefault) const;",
    "path": "src/util/system.h",
    "position": null,
    "original_position": 29,
    "commit_id": "c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab",
    "original_commit_id": "75e3ddb981f856612e1ef3ac765e2903d32781f4",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I wonder whether maybe the name should be `GetInt64Arg`. The name is not as nice as you have but it's easy to think that the return type is simply `int`. Again, I'm not sure whether it is an issue. So this is rather a question for my information.",
    "created_at": "2021-08-23T20:46:13Z",
    "updated_at": "2021-08-24T10:22:59Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r694296807",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694296807"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r694296807"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694296807/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 336,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694721588",
    "pull_request_review_id": 737059920,
    "id": 694721588,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NDcyMTU4OA==",
    "diff_hunk": "@@ -1300,7 +1300,7 @@ bool PeerManagerImpl::GetNodeStateStats(NodeId nodeid, CNodeStateStats& stats) c\n \n void PeerManagerImpl::AddToCompactExtraTransactions(const CTransactionRef& tx)\n {\n-    size_t max_extra_txn = gArgs.GetArg(\"-blockreconstructionextratxn\", DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN);\n+    size_t max_extra_txn = gArgs.GetIntArg(\"-blockreconstructionextratxn\", DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN);",
    "path": "src/net_processing.cpp",
    "position": null,
    "original_position": 5,
    "commit_id": "c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab",
    "original_commit_id": "daf070bdee9a1b4eaf3a4976537111f257bc1be6",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I can see that once the casting is used ([here](https://github.com/bitcoin/bitcoin/pull/22766/files#diff-cafbe1353eff6084b73fd3b6c3dee603e0827348fdd2fe12dfad1e01003a84edR87)) and here it is not. Maybe it should be consistent.",
    "created_at": "2021-08-24T10:25:10Z",
    "updated_at": "2021-08-24T10:25:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r694721588",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694721588"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r694721588"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694721588/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1310,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694722251",
    "pull_request_review_id": 737060726,
    "id": 694722251,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NDcyMjI1MQ==",
    "diff_hunk": "@@ -807,7 +807,7 @@ static UniValue ConnectAndCallRPC(BaseRequestHandler* rh, const std::string& str\n     UniValue response(UniValue::VOBJ);\n     // Execute and handle connection failures with -rpcwait.\n     const bool fWait = gArgs.GetBoolArg(\"-rpcwait\", false);\n-    const int timeout = gArgs.GetArg(\"-rpcwaittimeout\", DEFAULT_WAIT_CLIENT_TIMEOUT);\n+    const int timeout = gArgs.GetIntArg(\"-rpcwaittimeout\", DEFAULT_WAIT_CLIENT_TIMEOUT);",
    "path": "src/bitcoin-cli.cpp",
    "position": null,
    "original_position": 41,
    "commit_id": "c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab",
    "original_commit_id": "daf070bdee9a1b4eaf3a4976537111f257bc1be6",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Should there be a cast here as `int64_t` is converted to `int`? Mainly to allow the reader to know that the types are different.",
    "created_at": "2021-08-24T10:26:05Z",
    "updated_at": "2021-08-24T10:26:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r694722251",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694722251"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r694722251"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694722251/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 836,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694731933",
    "pull_request_review_id": 737073375,
    "id": 694731933,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NDczMTkzMw==",
    "diff_hunk": "@@ -214,30 +206,37 @@ static util::SettingsValue InterpretOption(std::string& section, std::string& ke\n     }\n     if (key.substr(0, 2) == \"no\") {\n         key.erase(0, 2);\n-        // Double negatives like -nofoo=0 are supported (but discouraged)\n-        if (!InterpretBool(value)) {\n-            LogPrintf(\"Warning: parsed potentially confusing double-negative -%s=%s\\n\", key, value);\n-            return true;\n-        }\n         return false;\n     }\n-    return value;\n+    return true;\n }\n \n /**\n- * Check settings value validity according to flags.\n+ * Interpret settings value and apply ALLOW checking flags.\n  *\n- * TODO: Add more meaningful error checks here in the future\n- * See \"here's how the flags are meant to behave\" in\n- * https://github.com/bitcoin/bitcoin/pull/16097#issuecomment-514627823\n+ * Return an error string and nullopt if an invalid value was provided that",
    "path": "src/util/system.cpp",
    "position": null,
    "original_position": 62,
    "commit_id": "c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab",
    "original_commit_id": "daf070bdee9a1b4eaf3a4976537111f257bc1be6",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Should Doxygen `@return` be used here?",
    "created_at": "2021-08-24T10:40:52Z",
    "updated_at": "2021-08-24T10:48:46Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r694731933",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694731933"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r694731933"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694731933/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 217,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694735104",
    "pull_request_review_id": 737073375,
    "id": 694735104,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NDczNTEwNA==",
    "diff_hunk": "@@ -158,12 +158,18 @@ struct SectionInfo\n class ArgsManager\n {\n public:\n+    /**\n+     * Flags controlling how config and command line arguments are validated and\n+     * interpreted.\n+     */\n     enum Flags : uint32_t {\n-        // Boolean options can accept negation syntax -noOPTION or -noOPTION=1\n-        ALLOW_BOOL = 0x01,\n-        ALLOW_INT = 0x02,\n-        ALLOW_STRING = 0x04,\n-        ALLOW_ANY = ALLOW_BOOL | ALLOW_INT | ALLOW_STRING,\n+        ALLOW_ANY = 0x01,    //!< disable validation",
    "path": "src/util/system.h",
    "position": null,
    "original_position": 14,
    "commit_id": "c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab",
    "original_commit_id": "daf070bdee9a1b4eaf3a4976537111f257bc1be6",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I wonder whether `enum class Flags : uint32_t` may be used here as Jon did in https://github.com/bitcoin/bitcoin/pull/21506/ ([guideline](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Renum-class)). Would it make sense to you in this or a follow-up PR?",
    "created_at": "2021-08-24T10:46:05Z",
    "updated_at": "2021-08-24T10:48:46Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r694735104",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694735104"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r694735104"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694735104/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 166,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694968514",
    "pull_request_review_id": 737384842,
    "id": 694968514,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NDk2ODUxNA==",
    "diff_hunk": "@@ -214,30 +206,37 @@ static util::SettingsValue InterpretOption(std::string& section, std::string& ke\n     }\n     if (key.substr(0, 2) == \"no\") {\n         key.erase(0, 2);\n-        // Double negatives like -nofoo=0 are supported (but discouraged)\n-        if (!InterpretBool(value)) {\n-            LogPrintf(\"Warning: parsed potentially confusing double-negative -%s=%s\\n\", key, value);\n-            return true;\n-        }\n         return false;\n     }\n-    return value;\n+    return true;\n }\n \n /**\n- * Check settings value validity according to flags.\n+ * Interpret settings value and apply ALLOW checking flags.\n  *\n- * TODO: Add more meaningful error checks here in the future\n- * See \"here's how the flags are meant to behave\" in\n- * https://github.com/bitcoin/bitcoin/pull/16097#issuecomment-514627823\n+ * Return an error string and nullopt if an invalid value was provided that",
    "path": "src/util/system.cpp",
    "position": null,
    "original_position": 62,
    "commit_id": "c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab",
    "original_commit_id": "daf070bdee9a1b4eaf3a4976537111f257bc1be6",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "re: https://github.com/bitcoin/bitcoin/pull/22766#discussion_r694731933\r\n\r\n> Should Doxygen `@return` be used here?\r\n\r\nThanks! Updated",
    "created_at": "2021-08-24T15:34:33Z",
    "updated_at": "2021-08-24T19:58:57Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r694968514",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694968514"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r694968514"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694968514/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 217,
    "side": "RIGHT",
    "in_reply_to_id": 694731933
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694968709",
    "pull_request_review_id": 737384842,
    "id": 694968709,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NDk2ODcwOQ==",
    "diff_hunk": "@@ -158,12 +158,18 @@ struct SectionInfo\n class ArgsManager\n {\n public:\n+    /**\n+     * Flags controlling how config and command line arguments are validated and\n+     * interpreted.\n+     */\n     enum Flags : uint32_t {\n-        // Boolean options can accept negation syntax -noOPTION or -noOPTION=1\n-        ALLOW_BOOL = 0x01,\n-        ALLOW_INT = 0x02,\n-        ALLOW_STRING = 0x04,\n-        ALLOW_ANY = ALLOW_BOOL | ALLOW_INT | ALLOW_STRING,\n+        ALLOW_ANY = 0x01,    //!< disable validation",
    "path": "src/util/system.h",
    "position": null,
    "original_position": 14,
    "commit_id": "c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab",
    "original_commit_id": "daf070bdee9a1b4eaf3a4976537111f257bc1be6",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "re: https://github.com/bitcoin/bitcoin/pull/22766#discussion_r694735104\r\n\r\n> I wonder whether `enum class Flags : uint32_t` may be used here as Jon did in #21506 ([guideline](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Renum-class)). Would it make sense to you in this or a follow-up PR?\r\n\r\nThis could be fine, but I'm not sure what the specific advantage of doing it would be in this case (not sure what ways it may be safer). I do think it's basically tangential in any case, and could be better addressed in a standalone PR.",
    "created_at": "2021-08-24T15:34:48Z",
    "updated_at": "2021-08-24T19:58:57Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r694968709",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694968709"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r694968709"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694968709/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 166,
    "side": "RIGHT",
    "in_reply_to_id": 694735104
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694969267",
    "pull_request_review_id": 737384842,
    "id": 694969267,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NDk2OTI2Nw==",
    "diff_hunk": "@@ -807,7 +807,7 @@ static UniValue ConnectAndCallRPC(BaseRequestHandler* rh, const std::string& str\n     UniValue response(UniValue::VOBJ);\n     // Execute and handle connection failures with -rpcwait.\n     const bool fWait = gArgs.GetBoolArg(\"-rpcwait\", false);\n-    const int timeout = gArgs.GetArg(\"-rpcwaittimeout\", DEFAULT_WAIT_CLIENT_TIMEOUT);\n+    const int timeout = gArgs.GetIntArg(\"-rpcwaittimeout\", DEFAULT_WAIT_CLIENT_TIMEOUT);",
    "path": "src/bitcoin-cli.cpp",
    "position": null,
    "original_position": 41,
    "commit_id": "c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab",
    "original_commit_id": "daf070bdee9a1b4eaf3a4976537111f257bc1be6",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "re: https://github.com/bitcoin/bitcoin/pull/22766#discussion_r694722251\r\n\r\n> Should there be a cast here as `int64_t` is converted to `int`? Mainly to allow the reader to know that the types are different.\r\n\r\nThis scripted diff is just trying to rename the function, not change the way the function is called, but this could be reasonable to do separately.",
    "created_at": "2021-08-24T15:35:27Z",
    "updated_at": "2021-08-24T19:58:57Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r694969267",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694969267"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r694969267"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694969267/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 836,
    "side": "RIGHT",
    "in_reply_to_id": 694722251
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694969453",
    "pull_request_review_id": 737384842,
    "id": 694969453,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NDk2OTQ1Mw==",
    "diff_hunk": "@@ -1300,7 +1300,7 @@ bool PeerManagerImpl::GetNodeStateStats(NodeId nodeid, CNodeStateStats& stats) c\n \n void PeerManagerImpl::AddToCompactExtraTransactions(const CTransactionRef& tx)\n {\n-    size_t max_extra_txn = gArgs.GetArg(\"-blockreconstructionextratxn\", DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN);\n+    size_t max_extra_txn = gArgs.GetIntArg(\"-blockreconstructionextratxn\", DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN);",
    "path": "src/net_processing.cpp",
    "position": null,
    "original_position": 5,
    "commit_id": "c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab",
    "original_commit_id": "daf070bdee9a1b4eaf3a4976537111f257bc1be6",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "re: https://github.com/bitcoin/bitcoin/pull/22766#discussion_r694721588\r\n\r\n> I can see that once the casting is used ([here](https://github.com/bitcoin/bitcoin/pull/22766/files#diff-cafbe1353eff6084b73fd3b6c3dee603e0827348fdd2fe12dfad1e01003a84edR87)) and here it is not. Maybe it should be consistent.\r\n\r\nThis scripted diff is just trying to rename the function, not change the way the function is called, but this could be reasonable to do separately.",
    "created_at": "2021-08-24T15:35:39Z",
    "updated_at": "2021-08-24T19:58:57Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r694969453",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694969453"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r694969453"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694969453/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1310,
    "side": "RIGHT",
    "in_reply_to_id": 694721588
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694969613",
    "pull_request_review_id": 737384842,
    "id": 694969613,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NDk2OTYxMw==",
    "diff_hunk": "@@ -327,7 +333,7 @@ class ArgsManager\n      * @param nDefault (e.g. 1)\n      * @return command-line argument (0 if invalid number) or default value\n      */\n-    int64_t GetArg(const std::string& strArg, int64_t nDefault) const;\n+    int64_t GetIntArg(const std::string& strArg, int64_t nDefault) const;",
    "path": "src/util/system.h",
    "position": null,
    "original_position": 29,
    "commit_id": "c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab",
    "original_commit_id": "75e3ddb981f856612e1ef3ac765e2903d32781f4",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "re: https://github.com/bitcoin/bitcoin/pull/22766#discussion_r694296807\r\n\r\n> I wonder whether maybe the name should be `GetInt64Arg`. The name is not as nice as you have but it's easy to think that the return type is simply `int`. Again, I'm not sure whether it is an issue. So this is rather a question for my information.\r\n\r\nSure. I wouldn't mind that name, though I do prefer current name because it's emphasizing what's important about the function and how it's intended to be used.\r\n\r\nThe way I would like range checking to work in the future would be to rely more on C++ types and `std::numeric_limits`. The idea is arguments would be registered using explicit C++ types:\r\n\r\n```c++\r\nconst Setting<int> SETTING_myint(\"-myint\", \"description\");\r\nconst Setting<std::string> SETTING_mystring(\"-mystring\", \"description\");\r\nconst Setting<std::vector<std::string>> SETTING_mylist(\"-mylist\", \"description\");\r\nconst Setting<std::optional<std::uint16_t>> SETTING_myopt(\"-myopt\", \"description\");\r\nconst Setting<SettingsValue> SETTING_mylegacy(\"-mylegacy\", \"description\");\r\n\r\nvoid RegisterArgs(ArgsManager& args)\r\n{\r\n    args.Register({SETTING_myint, SETTING_mystring, SETTING_mylist, SETTING_myopt, SETTING_mylegacy});\r\n}\r\n```\r\n\r\nand then they could be retrieved in a type safe way:\r\n\r\n```\r\nargs.Get(SETTING_myint);    // returns int\r\nargs.Get(SETTING_mystring); // returns std::string\r\nargs.Get(SETTING_mylist);   // returns std::vector<std::string>\r\nargs.Get(SETTING_myopt);    // returns std::optional<uint16_t>\r\nargs.GetArg/GetArgs/GetIntArg/GetBoolArg(SETTING_mylegacy); // returns requested type\r\n```\r\n\r\nTo get to this point, this PR cleans up existing misused flags and misnamed functions. PR #16545 adds type validation and runtime semantics without changing the ArgsManager API, and a followup PR can improve the API and update call sites without changing the semantics. (There is a direct correspondence between the `ALLOW_` flags from #16545 and the useful C++ settings types `bool`/`int`/`std::string`/`std::optional`/`std::variant`/`std::vector`)",
    "created_at": "2021-08-24T15:35:48Z",
    "updated_at": "2021-08-24T19:58:57Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r694969613",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694969613"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r694969613"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694969613/reactions",
      "total_count": 2,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 1,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 336,
    "side": "RIGHT",
    "in_reply_to_id": 694296807
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/695495304",
    "pull_request_review_id": 738017627,
    "id": 695495304,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NTQ5NTMwNA==",
    "diff_hunk": "@@ -158,12 +158,18 @@ struct SectionInfo\n class ArgsManager\n {\n public:\n+    /**\n+     * Flags controlling how config and command line arguments are validated and\n+     * interpreted.\n+     */\n     enum Flags : uint32_t {\n-        // Boolean options can accept negation syntax -noOPTION or -noOPTION=1\n-        ALLOW_BOOL = 0x01,\n-        ALLOW_INT = 0x02,\n-        ALLOW_STRING = 0x04,\n-        ALLOW_ANY = ALLOW_BOOL | ALLOW_INT | ALLOW_STRING,\n+        ALLOW_ANY = 0x01,    //!< disable validation",
    "path": "src/util/system.h",
    "position": null,
    "original_position": 14,
    "commit_id": "c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab",
    "original_commit_id": "daf070bdee9a1b4eaf3a4976537111f257bc1be6",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think the rationale in the guideline makes sense and that's why I suggested it. There was no specific advatange I had in mind. Anyway, it may (not) be a good follow up PR.",
    "created_at": "2021-08-25T07:50:45Z",
    "updated_at": "2021-08-25T07:50:45Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r695495304",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/695495304"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r695495304"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/695495304/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 166,
    "side": "RIGHT",
    "in_reply_to_id": 694735104
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/695495506",
    "pull_request_review_id": 738017885,
    "id": 695495506,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NTQ5NTUwNg==",
    "diff_hunk": "@@ -214,30 +206,37 @@ static util::SettingsValue InterpretOption(std::string& section, std::string& ke\n     }\n     if (key.substr(0, 2) == \"no\") {\n         key.erase(0, 2);\n-        // Double negatives like -nofoo=0 are supported (but discouraged)\n-        if (!InterpretBool(value)) {\n-            LogPrintf(\"Warning: parsed potentially confusing double-negative -%s=%s\\n\", key, value);\n-            return true;\n-        }\n         return false;\n     }\n-    return value;\n+    return true;\n }\n \n /**\n- * Check settings value validity according to flags.\n+ * Interpret settings value and apply ALLOW checking flags.\n  *\n- * TODO: Add more meaningful error checks here in the future\n- * See \"here's how the flags are meant to behave\" in\n- * https://github.com/bitcoin/bitcoin/pull/16097#issuecomment-514627823\n+ * Return an error string and nullopt if an invalid value was provided that",
    "path": "src/util/system.cpp",
    "position": null,
    "original_position": 62,
    "commit_id": "c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab",
    "original_commit_id": "daf070bdee9a1b4eaf3a4976537111f257bc1be6",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "It looks great.",
    "created_at": "2021-08-25T07:51:01Z",
    "updated_at": "2021-08-25T07:51:01Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r695495506",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/695495506"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r695495506"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/695495506/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 217,
    "side": "RIGHT",
    "in_reply_to_id": 694731933
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/699851892",
    "pull_request_review_id": 743341262,
    "id": 699851892,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5OTg1MTg5Mg==",
    "diff_hunk": "@@ -185,26 +186,21 @@ static std::string SettingName(const std::string& arg)\n }\n \n /**\n- * Interpret -nofoo as if the user supplied -foo=0.\n+ * Split up setting key string, removing \"section.\" and \"no\" prefixes.\n  *\n- * This method also tracks when the -no form was supplied, and if so,\n- * checks whether there was a double-negative (-nofoo=0 -> -foo=1).\n+ * @param[out]     section  output argument set to section name if key contains \".\"\n  *\n- * If there was not a double negative, it removes the \"no\" from the key\n- * and returns false.\n+ * @param[in,out]  key      input/output key argument with \"section.\" and \"no\"\n+ *                          prefixes stripped\n  *\n- * If there was a double negative, it removes \"no\" from the key, and\n- * returns true.\n+ * @return false if key was negated, true otherwise",
    "path": "src/util/system.cpp",
    "position": null,
    "original_position": 26,
    "commit_id": "c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab",
    "original_commit_id": "3ffbb3b828d6c72618d8acf07f6eeb49eb15ed8f",
    "user": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I found this a little confusing (when reimplementing it, I had it swapped around and wrote `bool negated = IntepretKey()` without the `!`). Maybe would be clearer to return `struct { std::string section; bool negated; }` and write `auto keyinfo = InterpretKey(key);`instead?",
    "created_at": "2021-09-01T05:20:57Z",
    "updated_at": "2021-09-01T06:19:59Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r699851892",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/699851892"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r699851892"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/699851892/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 196,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/699874087",
    "pull_request_review_id": 743341262,
    "id": 699874087,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5OTg3NDA4Nw==",
    "diff_hunk": "@@ -158,12 +158,18 @@ struct SectionInfo\n class ArgsManager\n {\n public:\n+    /**\n+     * Flags controlling how config and command line arguments are validated and\n+     * interpreted.\n+     */\n     enum Flags : uint32_t {\n-        // Boolean options can accept negation syntax -noOPTION or -noOPTION=1\n-        ALLOW_BOOL = 0x01,\n-        ALLOW_INT = 0x02,\n-        ALLOW_STRING = 0x04,\n-        ALLOW_ANY = ALLOW_BOOL | ALLOW_INT | ALLOW_STRING,\n+        ALLOW_ANY = 0x01,    //!< disable validation",
    "path": "src/util/system.h",
    "position": null,
    "original_position": 14,
    "commit_id": "c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab",
    "original_commit_id": "daf070bdee9a1b4eaf3a4976537111f257bc1be6",
    "user": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "See `NetPermissionsFlags` in net_permissions.h for comparison; it gives you lots of namespacing (so you'd be writing `ArgsManager::Flags::ALLOW_BOOL` everywhere) and means you can't just treat them as ints (so bitwise or'ing things together means you have to declare your own operator)",
    "created_at": "2021-09-01T06:16:25Z",
    "updated_at": "2021-09-01T06:19:59Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r699874087",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/699874087"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r699874087"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/699874087/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 166,
    "side": "RIGHT",
    "in_reply_to_id": 694735104
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/699895416",
    "pull_request_review_id": 743535043,
    "id": 699895416,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5OTg5NTQxNg==",
    "diff_hunk": "@@ -158,12 +158,18 @@ struct SectionInfo\n class ArgsManager\n {\n public:\n+    /**\n+     * Flags controlling how config and command line arguments are validated and\n+     * interpreted.\n+     */\n     enum Flags : uint32_t {\n-        // Boolean options can accept negation syntax -noOPTION or -noOPTION=1\n-        ALLOW_BOOL = 0x01,\n-        ALLOW_INT = 0x02,\n-        ALLOW_STRING = 0x04,\n-        ALLOW_ANY = ALLOW_BOOL | ALLOW_INT | ALLOW_STRING,\n+        ALLOW_ANY = 0x01,    //!< disable validation",
    "path": "src/util/system.h",
    "position": null,
    "original_position": 14,
    "commit_id": "c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab",
    "original_commit_id": "daf070bdee9a1b4eaf3a4976537111f257bc1be6",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yes, two sides of a coin, I suppose.\r\n\r\nNamespacing can allow shortening the enumerator names, since they no longer need to be unique in global namespace (and can therefore no longer need to be shouty \"there can only be one\"), e.g. ArgsManager::ALLOW_STRING could be ArgsManager::Flags::string. Whether that naming is better may be personal taste, but getting them out of global space seems good.\r\n\r\nUsing an enum class permits defining allowed operations: https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Renum-oper and https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Renum-class (\"minimize surprises: traditional enums convert to int too readily\"). Changing NetPermissionFlags to an enum class found a bug related to this reason.",
    "created_at": "2021-09-01T06:43:37Z",
    "updated_at": "2021-09-01T06:57:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r699895416",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/699895416"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r699895416"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/699895416/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 166,
    "side": "RIGHT",
    "in_reply_to_id": 694735104
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/701448785",
    "pull_request_review_id": 745552712,
    "id": 701448785,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMTQ0ODc4NQ==",
    "diff_hunk": "@@ -327,7 +333,7 @@ class ArgsManager\n      * @param nDefault (e.g. 1)\n      * @return command-line argument (0 if invalid number) or default value\n      */\n-    int64_t GetArg(const std::string& strArg, int64_t nDefault) const;\n+    int64_t GetIntArg(const std::string& strArg, int64_t nDefault) const;",
    "path": "src/util/system.h",
    "position": null,
    "original_position": 29,
    "commit_id": "c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab",
    "original_commit_id": "75e3ddb981f856612e1ef3ac765e2903d32781f4",
    "user": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think I finally figured out how you can go a little bit further than the above, ending up with something like:\r\n\r\n```c++\r\nstruct NetSettings\r\n{\r\n    int64_t blockreconstructionextratxn;\r\n    int64_t maxorphantx;\r\n    bool capturemessages;\r\n\r\n    template<typename C, typename... Args>\r\n    static inline void F(Args&... args) {\r\n        return C::Do(args...,\r\n            C::Defn( &NetSettings::blockreconstructionextratxn, \"-blockreconstructionextratxn=<n>\", strprintf(\"Extra transactions to keep in memory for compact block reconstructions (default: %u)\", DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS, DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN ),\r\n            C::Defn( &NetSettings::maxorphantx, \"-maxorphantx=<n>\", strprintf(\"Keep at most <n> unconnectable transactions in memory (default: %u)\", DEFAULT_MAX_ORPHAN_TRANSACTIONS), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS, DEFAULT_MAX_ORPHAN_TRANSACTIONS ),\r\n            C::Defn( &NetSettings::capturemessages, \"-capturemessages\", \"Capture all P2P messages to disk\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST, false )\r\n        );\r\n    }\r\n};\r\n\r\nvoid RegisterNetProcessingArgs(ArgsManager& args)\r\n{\r\n    SettingsRegister<NetSettings>::Register(args);\r\n}\r\n\r\nNetSettings GetNetSettings(const ArgsManager& args)\r\n{\r\n    return SettingsRegister<NetSettings>::Get(args);\r\n}\r\n\r\nclass PeerManagerImpl\r\n{\r\nprivate:\r\n    const NetSettings m_settings;\r\n    PeerManagerImpl(..., const ArgsManager& args) : m_settings{GetNetSettings(args)), ... { ... }\r\n    ...\r\n};\r\n```\r\n\r\nThe idea being that this way:\r\n * it can infer the argument type directly from the type of the struct member so that you can't accidentally specify different types between `args.AddArg<int>` and `Get<bool>`\r\n  * that the settings are const at runtime so can be accessed without any additional locks\r\n  * you only have to access the ArgsManager (and do string parsing) at setup time\r\n  * you don't have to make up lots of new names for everything or add too much boilerplate\r\n\r\nBranch built on top of this PR that has the above working at https://github.com/ajtowns/bitcoin/tree/202109-settings_struct",
    "created_at": "2021-09-02T21:56:52Z",
    "updated_at": "2021-09-02T21:56:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r701448785",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/701448785"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r701448785"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/701448785/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 336,
    "side": "RIGHT",
    "in_reply_to_id": 694296807
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/701624718",
    "pull_request_review_id": 745755741,
    "id": 701624718,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMTYyNDcxOA==",
    "diff_hunk": "@@ -158,12 +158,18 @@ struct SectionInfo\n class ArgsManager\n {\n public:\n+    /**\n+     * Flags controlling how config and command line arguments are validated and\n+     * interpreted.\n+     */\n     enum Flags : uint32_t {\n-        // Boolean options can accept negation syntax -noOPTION or -noOPTION=1\n-        ALLOW_BOOL = 0x01,\n-        ALLOW_INT = 0x02,\n-        ALLOW_STRING = 0x04,\n-        ALLOW_ANY = ALLOW_BOOL | ALLOW_INT | ALLOW_STRING,\n+        ALLOW_ANY = 0x01,    //!< disable validation\n+        ALLOW_BOOL = 0x02,   //!< unimplemented, draft implementation in #16545\n+        ALLOW_INT = 0x04,    //!< unimplemented, draft implementation in #16545\n+        ALLOW_STRING = 0x08, //!< unimplemented, draft implementation in #16545\n+        ALLOW_LIST = 0x10,   //!< unimplemented, draft implementation in #16545\n+        DISALLOW_NEGATION = 0x20, //! disallow -nofoo syntax\n+\n         DEBUG_ONLY = 0x100,",
    "path": "src/util/system.h",
    "position": null,
    "original_position": 21,
    "commit_id": "c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab",
    "original_commit_id": "3ffbb3b828d6c72618d8acf07f6eeb49eb15ed8f",
    "user": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "1) s/`ALLOW_ANY`/`DISABLE_VALIDATION`/, and drop the `//!< disable validation` comment?\r\n2) as `ALLOW_ANY` is not a combination of other flags now, would it simplify the code if `ALLOW_ANY = 0`? (going to check this suggestion later)\r\n\r\nnits:\r\n1) ~could we switch values to \"shifted ones\" `(1 << N)` for better readability?~ nm, out of scope\r\n2) ~assuming that another type could be added in the future, e.g., `ALLOW_PAIR`, maybe `DISALLOW_NEGATION = 0x80`?~ nm, is not worth\r\n3) `clang-format` complains about not justified comments",
    "created_at": "2021-09-03T06:44:38Z",
    "updated_at": "2021-09-03T08:36:13Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r701624718",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/701624718"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r701624718"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/701624718/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 166,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 173,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/701632462",
    "pull_request_review_id": 745765754,
    "id": 701632462,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMTYzMjQ2Mg==",
    "diff_hunk": "@@ -214,30 +210,43 @@ static util::SettingsValue InterpretOption(std::string& section, std::string& ke\n     }\n     if (key.substr(0, 2) == \"no\") {\n         key.erase(0, 2);\n-        // Double negatives like -nofoo=0 are supported (but discouraged)\n-        if (!InterpretBool(value)) {\n-            LogPrintf(\"Warning: parsed potentially confusing double-negative -%s=%s\\n\", key, value);\n-            return true;\n-        }\n         return false;\n     }\n-    return value;\n+    return true;\n }\n \n /**\n- * Check settings value validity according to flags.\n+ * Interpret settings value based on registered flags.\n  *\n- * TODO: Add more meaningful error checks here in the future\n- * See \"here's how the flags are meant to behave\" in\n- * https://github.com/bitcoin/bitcoin/pull/16097#issuecomment-514627823\n+ * @param[in]   key      name of settings key, only used for error messages\n+ * @param[in]   value    string value of setting to be parsed\n+ * @param[in]   negated  whether to treat setting as negated\n+ * @param[in]   flags    ArgsManager registered argument flags\n+ * @param[out]  error    Error description if settings value is not valid\n+ *\n+ * @return parsed settings value if it is valid, otherwise nullopt accompanied\n+ * by a descriptive error string\n  */\n-static bool CheckValid(const std::string& key, const util::SettingsValue& val, unsigned int flags, std::string& error)\n-{\n-    if (val.isBool() && !(flags & ArgsManager::ALLOW_BOOL)) {\n-        error = strprintf(\"Negating of -%s is meaningless and therefore forbidden\", key);\n+static std::optional<util::SettingsValue> InterpretValue(const std::string& key,\n+    const std::string& value,\n+    bool negated,\n+    unsigned int flags,\n+    std::string& error)",
    "path": "src/util/system.cpp",
    "position": null,
    "original_position": 81,
    "commit_id": "c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab",
    "original_commit_id": "31a8356714821f818ef476a9581e7830dd5ed940",
    "user": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: to make `clang-format` happy:\r\n```suggestion\r\nstatic std::optional<util::SettingsValue> InterpretValue(\r\n    const std::string& key,\r\n    const std::string& value,\r\n    bool negated,\r\n    unsigned int flags,\r\n    std::string& error)\r\n```",
    "created_at": "2021-09-03T07:00:06Z",
    "updated_at": "2021-09-03T07:00:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r701632462",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/701632462"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r701632462"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/701632462/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 230,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 234,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/708748619",
    "pull_request_review_id": 754561115,
    "id": 708748619,
    "node_id": "PRRC_kwDOABII584qPqVL",
    "diff_hunk": "@@ -185,26 +186,21 @@ static std::string SettingName(const std::string& arg)\n }\n \n /**\n- * Interpret -nofoo as if the user supplied -foo=0.\n+ * Split up setting key string, removing \"section.\" and \"no\" prefixes.\n  *\n- * This method also tracks when the -no form was supplied, and if so,\n- * checks whether there was a double-negative (-nofoo=0 -> -foo=1).\n+ * @param[out]     section  output argument set to section name if key contains \".\"\n  *\n- * If there was not a double negative, it removes the \"no\" from the key\n- * and returns false.\n+ * @param[in,out]  key      input/output key argument with \"section.\" and \"no\"\n+ *                          prefixes stripped\n  *\n- * If there was a double negative, it removes \"no\" from the key, and\n- * returns true.\n+ * @return false if key was negated, true otherwise",
    "path": "src/util/system.cpp",
    "position": null,
    "original_position": 26,
    "commit_id": "c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab",
    "original_commit_id": "3ffbb3b828d6c72618d8acf07f6eeb49eb15ed8f",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "re: https://github.com/bitcoin/bitcoin/pull/22766#discussion_r699851892\r\n\r\n> I found this a little confusing (when reimplementing it, I had it swapped around and wrote `bool negated = IntepretKey()` without the `!`). Maybe would be clearer to return `struct { std::string section; bool negated; }` and write `auto keyinfo = InterpretKey(key);`instead?\r\n\r\nGood idea, implemented this.\r\n",
    "created_at": "2021-09-15T00:26:09Z",
    "updated_at": "2021-09-15T01:53:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r708748619",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/708748619"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r708748619"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/708748619/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 196,
    "side": "RIGHT",
    "in_reply_to_id": 699851892
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/708748671",
    "pull_request_review_id": 754561115,
    "id": 708748671,
    "node_id": "PRRC_kwDOABII584qPqV_",
    "diff_hunk": "@@ -214,30 +210,43 @@ static util::SettingsValue InterpretOption(std::string& section, std::string& ke\n     }\n     if (key.substr(0, 2) == \"no\") {\n         key.erase(0, 2);\n-        // Double negatives like -nofoo=0 are supported (but discouraged)\n-        if (!InterpretBool(value)) {\n-            LogPrintf(\"Warning: parsed potentially confusing double-negative -%s=%s\\n\", key, value);\n-            return true;\n-        }\n         return false;\n     }\n-    return value;\n+    return true;\n }\n \n /**\n- * Check settings value validity according to flags.\n+ * Interpret settings value based on registered flags.\n  *\n- * TODO: Add more meaningful error checks here in the future\n- * See \"here's how the flags are meant to behave\" in\n- * https://github.com/bitcoin/bitcoin/pull/16097#issuecomment-514627823\n+ * @param[in]   key      name of settings key, only used for error messages\n+ * @param[in]   value    string value of setting to be parsed\n+ * @param[in]   negated  whether to treat setting as negated\n+ * @param[in]   flags    ArgsManager registered argument flags\n+ * @param[out]  error    Error description if settings value is not valid\n+ *\n+ * @return parsed settings value if it is valid, otherwise nullopt accompanied\n+ * by a descriptive error string\n  */\n-static bool CheckValid(const std::string& key, const util::SettingsValue& val, unsigned int flags, std::string& error)\n-{\n-    if (val.isBool() && !(flags & ArgsManager::ALLOW_BOOL)) {\n-        error = strprintf(\"Negating of -%s is meaningless and therefore forbidden\", key);\n+static std::optional<util::SettingsValue> InterpretValue(const std::string& key,\n+    const std::string& value,\n+    bool negated,\n+    unsigned int flags,\n+    std::string& error)",
    "path": "src/util/system.cpp",
    "position": null,
    "original_position": 81,
    "commit_id": "c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab",
    "original_commit_id": "31a8356714821f818ef476a9581e7830dd5ed940",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "re: https://github.com/bitcoin/bitcoin/pull/22766#discussion_r701632462\r\n\r\n> nit: to make `clang-format` happy:\r\n\r\nI ran clang-format and it changed it a different way, but rest assured some clang somewhere is happy!",
    "created_at": "2021-09-15T00:26:20Z",
    "updated_at": "2021-09-15T01:53:11Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r708748671",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/708748671"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r708748671"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/708748671/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 230,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 234,
    "side": "RIGHT",
    "in_reply_to_id": 701632462
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/708748758",
    "pull_request_review_id": 754561115,
    "id": 708748758,
    "node_id": "PRRC_kwDOABII584qPqXW",
    "diff_hunk": "@@ -158,12 +158,18 @@ struct SectionInfo\n class ArgsManager\n {\n public:\n+    /**\n+     * Flags controlling how config and command line arguments are validated and\n+     * interpreted.\n+     */\n     enum Flags : uint32_t {\n-        // Boolean options can accept negation syntax -noOPTION or -noOPTION=1\n-        ALLOW_BOOL = 0x01,\n-        ALLOW_INT = 0x02,\n-        ALLOW_STRING = 0x04,\n-        ALLOW_ANY = ALLOW_BOOL | ALLOW_INT | ALLOW_STRING,\n+        ALLOW_ANY = 0x01,    //!< disable validation",
    "path": "src/util/system.h",
    "position": null,
    "original_position": 14,
    "commit_id": "c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab",
    "original_commit_id": "daf070bdee9a1b4eaf3a4976537111f257bc1be6",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "re: https://github.com/bitcoin/bitcoin/pull/22766#discussion_r694735104\r\n\r\n> I wonder whether `enum class Flags : uint32_t` may be used here as Jon did in #21506 ([guideline](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Renum-class)). Would it make sense to you in this or a follow-up PR?\r\n\r\nFiled #22977 to track this, since it's not really about this PR",
    "created_at": "2021-09-15T00:26:35Z",
    "updated_at": "2021-09-15T01:53:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r708748758",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/708748758"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r708748758"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/708748758/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 166,
    "side": "RIGHT",
    "in_reply_to_id": 694735104
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/708748834",
    "pull_request_review_id": 754561115,
    "id": 708748834,
    "node_id": "PRRC_kwDOABII584qPqYi",
    "diff_hunk": "@@ -158,12 +158,18 @@ struct SectionInfo\n class ArgsManager\n {\n public:\n+    /**\n+     * Flags controlling how config and command line arguments are validated and\n+     * interpreted.\n+     */\n     enum Flags : uint32_t {\n-        // Boolean options can accept negation syntax -noOPTION or -noOPTION=1\n-        ALLOW_BOOL = 0x01,\n-        ALLOW_INT = 0x02,\n-        ALLOW_STRING = 0x04,\n-        ALLOW_ANY = ALLOW_BOOL | ALLOW_INT | ALLOW_STRING,\n+        ALLOW_ANY = 0x01,    //!< disable validation\n+        ALLOW_BOOL = 0x02,   //!< unimplemented, draft implementation in #16545\n+        ALLOW_INT = 0x04,    //!< unimplemented, draft implementation in #16545\n+        ALLOW_STRING = 0x08, //!< unimplemented, draft implementation in #16545\n+        ALLOW_LIST = 0x10,   //!< unimplemented, draft implementation in #16545\n+        DISALLOW_NEGATION = 0x20, //! disallow -nofoo syntax\n+\n         DEBUG_ONLY = 0x100,",
    "path": "src/util/system.h",
    "position": null,
    "original_position": 21,
    "commit_id": "c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab",
    "original_commit_id": "3ffbb3b828d6c72618d8acf07f6eeb49eb15ed8f",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "re: https://github.com/bitcoin/bitcoin/pull/22766#discussion_r701624718\r\n\r\n>     1. s/`ALLOW_ANY`/`DISABLE_VALIDATION`/, and drop the `//!< disable validation` comment?\r\n\r\nThis would make the PR bigger and conflict with more PRs. Also, it seems like bikeshedding, and like it might relationships between flags less clear. But please do post a separate RFC issue or a separate PR if the name of this flag should be changed or improved. This PR is just trying to add a comment on this line, not change the meaning or semantics of the flag.\r\n\r\n>     2. as `ALLOW_ANY` is not a combination of other flags now, would it simplify the code if `ALLOW_ANY = 0`? (going to check this suggestion later)\r\n\r\nThis would not work with #16545, but in any case seems like it would be bikeshedding to discuss it here before validation is implemented and this matters. Would encourage moving discussion about this to relevant PRs implementing validation.\r\n\r\n>     3. `clang-format` complains about not justified comments\r\n\r\nThanks, should be resolved now\r\n",
    "created_at": "2021-09-15T00:26:45Z",
    "updated_at": "2021-09-15T01:53:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r708748834",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/708748834"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r708748834"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/708748834/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 166,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 173,
    "side": "RIGHT",
    "in_reply_to_id": 701624718
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/708749096",
    "pull_request_review_id": 754561115,
    "id": 708749096,
    "node_id": "PRRC_kwDOABII584qPqco",
    "diff_hunk": "@@ -327,7 +333,7 @@ class ArgsManager\n      * @param nDefault (e.g. 1)\n      * @return command-line argument (0 if invalid number) or default value\n      */\n-    int64_t GetArg(const std::string& strArg, int64_t nDefault) const;\n+    int64_t GetIntArg(const std::string& strArg, int64_t nDefault) const;",
    "path": "src/util/system.h",
    "position": null,
    "original_position": 29,
    "commit_id": "c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab",
    "original_commit_id": "75e3ddb981f856612e1ef3ac765e2903d32781f4",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "re: https://github.com/bitcoin/bitcoin/pull/22766#discussion_r701448785\r\n\r\n> I think I finally figured out how you can go a little bit further than the above, ending up with something like:\r\n\r\nFiled #22978 to track this, since it's not really about this PR",
    "created_at": "2021-09-15T00:27:39Z",
    "updated_at": "2021-09-15T01:53:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r708749096",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/708749096"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r708749096"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/708749096/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 336,
    "side": "RIGHT",
    "in_reply_to_id": 694296807
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730251148",
    "pull_request_review_id": 781352331,
    "id": 730251148,
    "node_id": "PRRC_kwDOABII584rhr-M",
    "diff_hunk": "@@ -872,15 +872,14 @@ bool ArgsManager::ReadConfigStream(std::istream& stream, const std::string& file\n         return false;\n     }\n     for (const std::pair<std::string, std::string>& option : options) {\n-        std::string section;\n         std::string key = option.first;\n-        util::SettingsValue value = InterpretOption(section, key, option.second);\n+        KeyInfo keyinfo = InterpretKey(key);\n         std::optional<unsigned int> flags = GetArgFlags('-' + key);\n         if (flags) {\n-            if (!CheckValid(key, value, *flags, error)) {\n-                return false;\n-            }\n-            m_settings.ro_config[section][key].push_back(value);\n+            std::optional<util::SettingsValue> value =\n+                InterpretValue(key, option.second, keyinfo.negated, *flags, error);\n+            if (!value) return false;",
    "path": "src/util/system.cpp",
    "position": null,
    "original_position": 155,
    "commit_id": "c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab",
    "original_commit_id": "4be2e10cc250350ad6c81bb75589793dfa27990d",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "4be2e10cc250350ad6c81bb75589793dfa27990d\r\n\r\nnit, rename `value` to `parsed`, here change to `!parsed.has_value()`, and below `parsed.value()`.",
    "created_at": "2021-10-16T11:33:06Z",
    "updated_at": "2021-10-16T11:47:01Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730251148",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730251148"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730251148"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730251148/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 881,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730251794",
    "pull_request_review_id": 781352331,
    "id": 730251794,
    "node_id": "PRRC_kwDOABII584rhsIS",
    "diff_hunk": "@@ -185,59 +186,59 @@ static std::string SettingName(const std::string& arg)\n }\n \n /**\n- * Interpret -nofoo as if the user supplied -foo=0.\n+ * Split up setting key string, removing \"section.\" and \"no\" prefixes.\n  *\n- * This method also tracks when the -no form was supplied, and if so,\n- * checks whether there was a double-negative (-nofoo=0 -> -foo=1).\n- *\n- * If there was not a double negative, it removes the \"no\" from the key\n- * and returns false.\n- *\n- * If there was a double negative, it removes \"no\" from the key, and\n- * returns true.\n- *\n- * If there was no \"no\", it returns the string value untouched.\n- *\n- * Where an option was negated can be later checked using the\n+ * @note Where an option was negated can be later checked using the",
    "path": "src/util/system.cpp",
    "position": 34,
    "original_position": 27,
    "commit_id": "c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab",
    "original_commit_id": "4be2e10cc250350ad6c81bb75589793dfa27990d",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "4be2e10cc250350ad6c81bb75589793dfa27990d\r\n\r\nCould keep comment that says `key` is changed.",
    "created_at": "2021-10-16T11:39:04Z",
    "updated_at": "2021-10-16T11:47:01Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730251794",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730251794"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730251794"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730251794/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 195,
    "original_line": 195,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730251850",
    "pull_request_review_id": 781352331,
    "id": 730251850,
    "node_id": "PRRC_kwDOABII584rhsJK",
    "diff_hunk": "@@ -185,59 +186,59 @@ static std::string SettingName(const std::string& arg)\n }\n \n /**\n- * Interpret -nofoo as if the user supplied -foo=0.\n+ * Split up setting key string, removing \"section.\" and \"no\" prefixes.\n  *\n- * This method also tracks when the -no form was supplied, and if so,\n- * checks whether there was a double-negative (-nofoo=0 -> -foo=1).\n- *\n- * If there was not a double negative, it removes the \"no\" from the key\n- * and returns false.\n- *\n- * If there was a double negative, it removes \"no\" from the key, and\n- * returns true.\n- *\n- * If there was no \"no\", it returns the string value untouched.\n- *\n- * Where an option was negated can be later checked using the\n+ * @note Where an option was negated can be later checked using the\n  * IsArgNegated() method. One use case for this is to have a way to disable\n  * options that are not normally boolean (e.g. using -nodebuglogfile to request\n  * that debug log output is not sent to any file at all).\n  */\n-\n-static util::SettingsValue InterpretOption(std::string& section, std::string& key, const std::string& value)\n+struct KeyInfo { std::string section; bool negated{false}; };\n+KeyInfo InterpretKey(std::string& key)",
    "path": "src/util/system.cpp",
    "position": null,
    "original_position": 35,
    "commit_id": "c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab",
    "original_commit_id": "4be2e10cc250350ad6c81bb75589793dfa27990d",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "4be2e10cc250350ad6c81bb75589793dfa27990d\r\n\r\nInstead of changing the argument, could add `key` member to `KeyInfo` and make argument `const`.",
    "created_at": "2021-10-16T11:40:02Z",
    "updated_at": "2021-10-16T11:47:01Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730251850",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730251850"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730251850"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730251850/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 197,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730252053",
    "pull_request_review_id": 781352331,
    "id": 730252053,
    "node_id": "PRRC_kwDOABII584rhsMV",
    "diff_hunk": "@@ -185,59 +186,59 @@ static std::string SettingName(const std::string& arg)\n }\n \n /**\n- * Interpret -nofoo as if the user supplied -foo=0.\n+ * Split up setting key string, removing \"section.\" and \"no\" prefixes.\n  *\n- * This method also tracks when the -no form was supplied, and if so,\n- * checks whether there was a double-negative (-nofoo=0 -> -foo=1).\n- *\n- * If there was not a double negative, it removes the \"no\" from the key\n- * and returns false.\n- *\n- * If there was a double negative, it removes \"no\" from the key, and\n- * returns true.\n- *\n- * If there was no \"no\", it returns the string value untouched.\n- *\n- * Where an option was negated can be later checked using the\n+ * @note Where an option was negated can be later checked using the\n  * IsArgNegated() method. One use case for this is to have a way to disable\n  * options that are not normally boolean (e.g. using -nodebuglogfile to request\n  * that debug log output is not sent to any file at all).\n  */\n-\n-static util::SettingsValue InterpretOption(std::string& section, std::string& key, const std::string& value)\n+struct KeyInfo { std::string section; bool negated{false}; };\n+KeyInfo InterpretKey(std::string& key)\n {\n+    KeyInfo result;\n     // Split section name from key name for keys like \"testnet.foo\" or \"regtest.bar\"\n     size_t option_index = key.find('.');\n     if (option_index != std::string::npos) {\n-        section = key.substr(0, option_index);\n+        result.section = key.substr(0, option_index);\n         key.erase(0, option_index + 1);\n     }\n     if (key.substr(0, 2) == \"no\") {\n         key.erase(0, 2);\n-        // Double negatives like -nofoo=0 are supported (but discouraged)\n-        if (!InterpretBool(value)) {\n-            LogPrintf(\"Warning: parsed potentially confusing double-negative -%s=%s\\n\", key, value);\n-            return true;\n-        }\n-        return false;\n+        result.negated = true;\n     }\n-    return value;\n+    return result;\n }\n \n /**\n- * Check settings value validity according to flags.\n+ * Interpret settings value based on registered flags.\n  *\n- * TODO: Add more meaningful error checks here in the future\n- * See \"here's how the flags are meant to behave\" in\n- * https://github.com/bitcoin/bitcoin/pull/16097#issuecomment-514627823\n+ * @param[in]   key      name of settings key, only used for error messages\n+ * @param[in]   value    string value of setting to be parsed\n+ * @param[in]   negated  whether to treat setting as negated\n+ * @param[in]   flags    ArgsManager registered argument flags\n+ * @param[out]  error    Error description if settings value is not valid\n+ *\n+ * @return parsed settings value if it is valid, otherwise nullopt accompanied\n+ * by a descriptive error string\n  */\n-static bool CheckValid(const std::string& key, const util::SettingsValue& val, unsigned int flags, std::string& error)\n-{\n-    if (val.isBool() && !(flags & ArgsManager::ALLOW_BOOL)) {\n-        error = strprintf(\"Negating of -%s is meaningless and therefore forbidden\", key);\n+static std::optional<util::SettingsValue> InterpretValue(const std::string& key, const std::string& value,",
    "path": "src/util/system.cpp",
    "position": null,
    "original_position": 79,
    "commit_id": "c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab",
    "original_commit_id": "4be2e10cc250350ad6c81bb75589793dfa27990d",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "4be2e10cc250350ad6c81bb75589793dfa27990d\r\n\r\nnit, if you pick the suggestion to add `key` to `KeyInfo` then this could be `InterpretValue(const KeyInfo& key_info, ...)`.",
    "created_at": "2021-10-16T11:42:02Z",
    "updated_at": "2021-10-16T11:47:01Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730252053",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730252053"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730252053"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730252053/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 225,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730274909",
    "pull_request_review_id": 781366903,
    "id": 730274909,
    "node_id": "PRRC_kwDOABII584rhxxd",
    "diff_hunk": "@@ -185,59 +186,59 @@ static std::string SettingName(const std::string& arg)\n }\n \n /**\n- * Interpret -nofoo as if the user supplied -foo=0.\n+ * Split up setting key string, removing \"section.\" and \"no\" prefixes.\n  *\n- * This method also tracks when the -no form was supplied, and if so,\n- * checks whether there was a double-negative (-nofoo=0 -> -foo=1).\n- *\n- * If there was not a double negative, it removes the \"no\" from the key\n- * and returns false.\n- *\n- * If there was a double negative, it removes \"no\" from the key, and\n- * returns true.\n- *\n- * If there was no \"no\", it returns the string value untouched.\n- *\n- * Where an option was negated can be later checked using the\n+ * @note Where an option was negated can be later checked using the",
    "path": "src/util/system.cpp",
    "position": 34,
    "original_position": 27,
    "commit_id": "c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab",
    "original_commit_id": "4be2e10cc250350ad6c81bb75589793dfa27990d",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "re: https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730251794\r\n\r\n> Could keep comment that says `key` is changed.\r\n\r\nLet me know if there's a comment that's being removed that you want to keep. Implementation is changed again now, but the new comment said it strips prefixes, so I'm not sure what old comment you wanted to keep.",
    "created_at": "2021-10-16T15:08:47Z",
    "updated_at": "2021-10-16T15:59:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730274909",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730274909"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730274909"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730274909/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 195,
    "original_line": 195,
    "side": "RIGHT",
    "in_reply_to_id": 730251794
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730275036",
    "pull_request_review_id": 781366903,
    "id": 730275036,
    "node_id": "PRRC_kwDOABII584rhxzc",
    "diff_hunk": "@@ -185,59 +186,59 @@ static std::string SettingName(const std::string& arg)\n }\n \n /**\n- * Interpret -nofoo as if the user supplied -foo=0.\n+ * Split up setting key string, removing \"section.\" and \"no\" prefixes.\n  *\n- * This method also tracks when the -no form was supplied, and if so,\n- * checks whether there was a double-negative (-nofoo=0 -> -foo=1).\n- *\n- * If there was not a double negative, it removes the \"no\" from the key\n- * and returns false.\n- *\n- * If there was a double negative, it removes \"no\" from the key, and\n- * returns true.\n- *\n- * If there was no \"no\", it returns the string value untouched.\n- *\n- * Where an option was negated can be later checked using the\n+ * @note Where an option was negated can be later checked using the\n  * IsArgNegated() method. One use case for this is to have a way to disable\n  * options that are not normally boolean (e.g. using -nodebuglogfile to request\n  * that debug log output is not sent to any file at all).\n  */\n-\n-static util::SettingsValue InterpretOption(std::string& section, std::string& key, const std::string& value)\n+struct KeyInfo { std::string section; bool negated{false}; };\n+KeyInfo InterpretKey(std::string& key)",
    "path": "src/util/system.cpp",
    "position": null,
    "original_position": 35,
    "commit_id": "c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab",
    "original_commit_id": "4be2e10cc250350ad6c81bb75589793dfa27990d",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "re: https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730251850\r\n\r\n> Instead of changing the argument, could add `key` member to `KeyInfo` and make argument `const`.\r\n\r\nDone. This does work nicely with InterpretValue as you suggested.",
    "created_at": "2021-10-16T15:09:50Z",
    "updated_at": "2021-10-16T15:59:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730275036",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730275036"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730275036"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730275036/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 197,
    "side": "RIGHT",
    "in_reply_to_id": 730251850
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730275080",
    "pull_request_review_id": 781366903,
    "id": 730275080,
    "node_id": "PRRC_kwDOABII584rhx0I",
    "diff_hunk": "@@ -185,59 +186,59 @@ static std::string SettingName(const std::string& arg)\n }\n \n /**\n- * Interpret -nofoo as if the user supplied -foo=0.\n+ * Split up setting key string, removing \"section.\" and \"no\" prefixes.\n  *\n- * This method also tracks when the -no form was supplied, and if so,\n- * checks whether there was a double-negative (-nofoo=0 -> -foo=1).\n- *\n- * If there was not a double negative, it removes the \"no\" from the key\n- * and returns false.\n- *\n- * If there was a double negative, it removes \"no\" from the key, and\n- * returns true.\n- *\n- * If there was no \"no\", it returns the string value untouched.\n- *\n- * Where an option was negated can be later checked using the\n+ * @note Where an option was negated can be later checked using the\n  * IsArgNegated() method. One use case for this is to have a way to disable\n  * options that are not normally boolean (e.g. using -nodebuglogfile to request\n  * that debug log output is not sent to any file at all).\n  */\n-\n-static util::SettingsValue InterpretOption(std::string& section, std::string& key, const std::string& value)\n+struct KeyInfo { std::string section; bool negated{false}; };\n+KeyInfo InterpretKey(std::string& key)\n {\n+    KeyInfo result;\n     // Split section name from key name for keys like \"testnet.foo\" or \"regtest.bar\"\n     size_t option_index = key.find('.');\n     if (option_index != std::string::npos) {\n-        section = key.substr(0, option_index);\n+        result.section = key.substr(0, option_index);\n         key.erase(0, option_index + 1);\n     }\n     if (key.substr(0, 2) == \"no\") {\n         key.erase(0, 2);\n-        // Double negatives like -nofoo=0 are supported (but discouraged)\n-        if (!InterpretBool(value)) {\n-            LogPrintf(\"Warning: parsed potentially confusing double-negative -%s=%s\\n\", key, value);\n-            return true;\n-        }\n-        return false;\n+        result.negated = true;\n     }\n-    return value;\n+    return result;\n }\n \n /**\n- * Check settings value validity according to flags.\n+ * Interpret settings value based on registered flags.\n  *\n- * TODO: Add more meaningful error checks here in the future\n- * See \"here's how the flags are meant to behave\" in\n- * https://github.com/bitcoin/bitcoin/pull/16097#issuecomment-514627823\n+ * @param[in]   key      name of settings key, only used for error messages\n+ * @param[in]   value    string value of setting to be parsed\n+ * @param[in]   negated  whether to treat setting as negated\n+ * @param[in]   flags    ArgsManager registered argument flags\n+ * @param[out]  error    Error description if settings value is not valid\n+ *\n+ * @return parsed settings value if it is valid, otherwise nullopt accompanied\n+ * by a descriptive error string\n  */\n-static bool CheckValid(const std::string& key, const util::SettingsValue& val, unsigned int flags, std::string& error)\n-{\n-    if (val.isBool() && !(flags & ArgsManager::ALLOW_BOOL)) {\n-        error = strprintf(\"Negating of -%s is meaningless and therefore forbidden\", key);\n+static std::optional<util::SettingsValue> InterpretValue(const std::string& key, const std::string& value,",
    "path": "src/util/system.cpp",
    "position": null,
    "original_position": 79,
    "commit_id": "c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab",
    "original_commit_id": "4be2e10cc250350ad6c81bb75589793dfa27990d",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "re: https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730252053\r\n\r\n> nit, if you pick the suggestion to add `key` to `KeyInfo` then this could be `InterpretValue(const KeyInfo& key_info, ...)`.\r\n\r\nDone",
    "created_at": "2021-10-16T15:10:11Z",
    "updated_at": "2021-10-16T15:59:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730275080",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730275080"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730275080"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730275080/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 225,
    "side": "RIGHT",
    "in_reply_to_id": 730252053
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730275232",
    "pull_request_review_id": 781366903,
    "id": 730275232,
    "node_id": "PRRC_kwDOABII584rhx2g",
    "diff_hunk": "@@ -872,15 +872,14 @@ bool ArgsManager::ReadConfigStream(std::istream& stream, const std::string& file\n         return false;\n     }\n     for (const std::pair<std::string, std::string>& option : options) {\n-        std::string section;\n         std::string key = option.first;\n-        util::SettingsValue value = InterpretOption(section, key, option.second);\n+        KeyInfo keyinfo = InterpretKey(key);\n         std::optional<unsigned int> flags = GetArgFlags('-' + key);\n         if (flags) {\n-            if (!CheckValid(key, value, *flags, error)) {\n-                return false;\n-            }\n-            m_settings.ro_config[section][key].push_back(value);\n+            std::optional<util::SettingsValue> value =\n+                InterpretValue(key, option.second, keyinfo.negated, *flags, error);\n+            if (!value) return false;",
    "path": "src/util/system.cpp",
    "position": null,
    "original_position": 155,
    "commit_id": "c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab",
    "original_commit_id": "4be2e10cc250350ad6c81bb75589793dfa27990d",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "re: https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730251148\r\n\r\n> nit, rename `value` to `parsed`, here change to `!parsed.has_value()`, and below `parsed.value()`.\r\n\r\nWhy these requests? Usage of `has_value` seems less idiomatic and the name `parsed` seems less descriptive. It's always helpful when you make suggestions to say what thinking is behind them so different preferences can be reconciled.",
    "created_at": "2021-10-16T15:11:31Z",
    "updated_at": "2021-10-16T15:59:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730275232",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730275232"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730275232"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730275232/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 881,
    "side": "RIGHT",
    "in_reply_to_id": 730251148
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730275392",
    "pull_request_review_id": 781367194,
    "id": 730275392,
    "node_id": "PRRC_kwDOABII584rhx5A",
    "diff_hunk": "@@ -185,59 +186,59 @@ static std::string SettingName(const std::string& arg)\n }\n \n /**\n- * Interpret -nofoo as if the user supplied -foo=0.\n+ * Split up setting key string, removing \"section.\" and \"no\" prefixes.\n  *\n- * This method also tracks when the -no form was supplied, and if so,\n- * checks whether there was a double-negative (-nofoo=0 -> -foo=1).\n- *\n- * If there was not a double negative, it removes the \"no\" from the key\n- * and returns false.\n- *\n- * If there was a double negative, it removes \"no\" from the key, and\n- * returns true.\n- *\n- * If there was no \"no\", it returns the string value untouched.\n- *\n- * Where an option was negated can be later checked using the\n+ * @note Where an option was negated can be later checked using the\n  * IsArgNegated() method. One use case for this is to have a way to disable\n  * options that are not normally boolean (e.g. using -nodebuglogfile to request\n  * that debug log output is not sent to any file at all).\n  */\n-\n-static util::SettingsValue InterpretOption(std::string& section, std::string& key, const std::string& value)\n+struct KeyInfo { std::string section; bool negated{false}; };",
    "path": "src/util/system.cpp",
    "position": null,
    "original_position": 34,
    "commit_id": "c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab",
    "original_commit_id": "4be2e10cc250350ad6c81bb75589793dfa27990d",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: As there are many \"keys\" in Bitcoin codebase and the word meaning is heavily overloaded, maybe it would make sense to have `SettingKeyInfo` / `SettingKey` / `ArgKeyInfo` or something.",
    "created_at": "2021-10-16T15:13:00Z",
    "updated_at": "2021-10-16T15:48:13Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730275392",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730275392"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730275392"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730275392/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 196,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730275650",
    "pull_request_review_id": 781367326,
    "id": 730275650,
    "node_id": "PRRC_kwDOABII584rhx9C",
    "diff_hunk": "@@ -164,10 +164,10 @@ class ArgsManager\n      */\n     enum Flags : uint32_t {\n         ALLOW_ANY = 0x01,         //!< disable validation\n-        ALLOW_BOOL = 0x02,        //!< unimplemented, draft implementation in #16545\n-        ALLOW_INT = 0x04,         //!< unimplemented, draft implementation in #16545\n-        ALLOW_STRING = 0x08,      //!< unimplemented, draft implementation in #16545\n-        ALLOW_LIST = 0x10,        //!< unimplemented, draft implementation in #16545\n+        // ALLOW_BOOL = 0x02,     //!< unimplemented, draft implementation in #16545",
    "path": "src/util/system.h",
    "position": 15,
    "original_position": 8,
    "commit_id": "c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab",
    "original_commit_id": "5c04ca81fd2c44fed6487123500b49434280d514",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "5c04ca81fd2c44fed6487123500b49434280d514\r\n\r\nFor the record, I don't mind these commented out instead of removed.",
    "created_at": "2021-10-16T15:15:05Z",
    "updated_at": "2021-10-16T15:23:31Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730275650",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730275650"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730275650"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730275650/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 167,
    "original_line": 167,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730276363",
    "pull_request_review_id": 781367194,
    "id": 730276363,
    "node_id": "PRRC_kwDOABII584rhyIL",
    "diff_hunk": "@@ -185,59 +186,59 @@ static std::string SettingName(const std::string& arg)\n }\n \n /**\n- * Interpret -nofoo as if the user supplied -foo=0.\n+ * Split up setting key string, removing \"section.\" and \"no\" prefixes.\n  *\n- * This method also tracks when the -no form was supplied, and if so,\n- * checks whether there was a double-negative (-nofoo=0 -> -foo=1).\n- *\n- * If there was not a double negative, it removes the \"no\" from the key\n- * and returns false.\n- *\n- * If there was a double negative, it removes \"no\" from the key, and\n- * returns true.\n- *\n- * If there was no \"no\", it returns the string value untouched.\n- *\n- * Where an option was negated can be later checked using the\n+ * @note Where an option was negated can be later checked using the\n  * IsArgNegated() method. One use case for this is to have a way to disable\n  * options that are not normally boolean (e.g. using -nodebuglogfile to request\n  * that debug log output is not sent to any file at all).\n  */\n-\n-static util::SettingsValue InterpretOption(std::string& section, std::string& key, const std::string& value)\n+struct KeyInfo { std::string section; bool negated{false}; };\n+KeyInfo InterpretKey(std::string& key)\n {\n+    KeyInfo result;\n     // Split section name from key name for keys like \"testnet.foo\" or \"regtest.bar\"\n     size_t option_index = key.find('.');\n     if (option_index != std::string::npos) {\n-        section = key.substr(0, option_index);\n+        result.section = key.substr(0, option_index);\n         key.erase(0, option_index + 1);\n     }\n     if (key.substr(0, 2) == \"no\") {\n         key.erase(0, 2);",
    "path": "src/util/system.cpp",
    "position": 52,
    "original_position": 46,
    "commit_id": "c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab",
    "original_commit_id": "4be2e10cc250350ad6c81bb75589793dfa27990d",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "not for this PR but: [key.compare(..)](https://en.cppreference.com/w/cpp/string/basic_string/compare) seems more efficient than `key.substr(..)` here. In C++20, there will be [starts_with](https://en.cppreference.com/w/cpp/string/basic_string/starts_with) function.",
    "created_at": "2021-10-16T15:21:49Z",
    "updated_at": "2021-10-16T15:48:13Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730276363",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730276363"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730276363"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730276363/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": 209,
    "original_start_line": 206,
    "start_side": "RIGHT",
    "line": 210,
    "original_line": 210,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730278012",
    "pull_request_review_id": 781367194,
    "id": 730278012,
    "node_id": "PRRC_kwDOABII584rhyh8",
    "diff_hunk": "@@ -185,59 +186,59 @@ static std::string SettingName(const std::string& arg)\n }\n \n /**\n- * Interpret -nofoo as if the user supplied -foo=0.\n+ * Split up setting key string, removing \"section.\" and \"no\" prefixes.\n  *\n- * This method also tracks when the -no form was supplied, and if so,\n- * checks whether there was a double-negative (-nofoo=0 -> -foo=1).\n- *\n- * If there was not a double negative, it removes the \"no\" from the key\n- * and returns false.\n- *\n- * If there was a double negative, it removes \"no\" from the key, and\n- * returns true.\n- *\n- * If there was no \"no\", it returns the string value untouched.\n- *\n- * Where an option was negated can be later checked using the\n+ * @note Where an option was negated can be later checked using the",
    "path": "src/util/system.cpp",
    "position": 34,
    "original_position": 27,
    "commit_id": "c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab",
    "original_commit_id": "4be2e10cc250350ad6c81bb75589793dfa27990d",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I agree. \r\n\r\nI would say that a comment like `@param[in|out] key ...` (not sure how to write it properly) would be great here.",
    "created_at": "2021-10-16T15:35:48Z",
    "updated_at": "2021-10-16T15:48:13Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730278012",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730278012"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730278012"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730278012/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 195,
    "original_line": 195,
    "side": "RIGHT",
    "in_reply_to_id": 730251794
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730278521",
    "pull_request_review_id": 781367194,
    "id": 730278521,
    "node_id": "PRRC_kwDOABII584rhyp5",
    "diff_hunk": "@@ -158,12 +158,18 @@ struct SectionInfo\n class ArgsManager\n {\n public:\n+    /**\n+     * Flags controlling how config and command line arguments are validated and\n+     * interpreted.\n+     */\n     enum Flags : uint32_t {\n-        // Boolean options can accept negation syntax -noOPTION or -noOPTION=1\n-        ALLOW_BOOL = 0x01,\n-        ALLOW_INT = 0x02,\n-        ALLOW_STRING = 0x04,\n-        ALLOW_ANY = ALLOW_BOOL | ALLOW_INT | ALLOW_STRING,\n+        ALLOW_ANY = 0x01,         //!< disable validation\n+        ALLOW_BOOL = 0x02,        //!< unimplemented, draft implementation in #16545\n+        ALLOW_INT = 0x04,         //!< unimplemented, draft implementation in #16545\n+        ALLOW_STRING = 0x08,      //!< unimplemented, draft implementation in #16545\n+        ALLOW_LIST = 0x10,        //!< unimplemented, draft implementation in #16545",
    "path": "src/util/system.h",
    "position": null,
    "original_position": 18,
    "commit_id": "c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab",
    "original_commit_id": "6e613a0a3058e65237907bcf7915864dcef8cc99",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "6e613a0a3058e65237907bcf7915864dcef8cc99: Not sure if this commit should add the flag as it does not implement it anyway. \r\n\r\nAlso at this point, it's not entirely clear if `ALLOW_LIST` allows only `[type, type, type,...]` lists or even `[type1, type2, type3, ...]` lists.",
    "created_at": "2021-10-16T15:40:45Z",
    "updated_at": "2021-10-16T15:48:13Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730278521",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730278521"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730278521"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730278521/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 170,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730278801",
    "pull_request_review_id": 781367194,
    "id": 730278801,
    "node_id": "PRRC_kwDOABII584rhyuR",
    "diff_hunk": "@@ -227,7 +227,7 @@ static std::optional<util::SettingsValue> InterpretValue(const std::string& key,\n {\n     // Return negated settings as false values.\n     if (negated) {\n-        if (!(flags & ArgsManager::ALLOW_BOOL)) {\n+        if (flags & ArgsManager::DISALLOW_NEGATION) {\n             error = strprintf(\"Negating of -%s is meaningless and therefore forbidden\", key);",
    "path": "src/util/system.cpp",
    "position": null,
    "original_position": 6,
    "commit_id": "c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab",
    "original_commit_id": "6e613a0a3058e65237907bcf7915864dcef8cc99",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "6e613a0a3058e65237907bcf7915864dcef8cc99\r\n\r\nnit: It seems to me that this message may simply say that negation is disallowed/forbidden as I'm not sure that it's guarranteed that negation is \"meaningless\".",
    "created_at": "2021-10-16T15:42:51Z",
    "updated_at": "2021-10-16T15:48:13Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730278801",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730278801"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730278801"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730278801/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 231,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730279143",
    "pull_request_review_id": 781367194,
    "id": 730279143,
    "node_id": "PRRC_kwDOABII584rhyzn",
    "diff_hunk": "@@ -158,12 +158,18 @@ struct SectionInfo\n class ArgsManager\n {\n public:\n+    /**\n+     * Flags controlling how config and command line arguments are validated and\n+     * interpreted.\n+     */\n     enum Flags : uint32_t {\n-        // Boolean options can accept negation syntax -noOPTION or -noOPTION=1\n-        ALLOW_BOOL = 0x01,\n-        ALLOW_INT = 0x02,\n-        ALLOW_STRING = 0x04,\n-        ALLOW_ANY = ALLOW_BOOL | ALLOW_INT | ALLOW_STRING,\n+        ALLOW_ANY = 0x01,         //!< disable validation\n+        ALLOW_BOOL = 0x02,        //!< unimplemented, draft implementation in #16545\n+        ALLOW_INT = 0x04,         //!< unimplemented, draft implementation in #16545\n+        ALLOW_STRING = 0x08,      //!< unimplemented, draft implementation in #16545\n+        ALLOW_LIST = 0x10,        //!< unimplemented, draft implementation in #16545\n+        DISALLOW_NEGATION = 0x20, //!< disallow -nofoo syntax\n+\n         DEBUG_ONLY = 0x100,",
    "path": "src/util/system.h",
    "position": 21,
    "original_position": 21,
    "commit_id": "c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab",
    "original_commit_id": "6e613a0a3058e65237907bcf7915864dcef8cc99",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "6e613a0a3058e65237907bcf7915864dcef8cc99: Would it be possible to add a comment for `DEBUG_ONLY` too? Or is it out of scope here?",
    "created_at": "2021-10-16T15:46:37Z",
    "updated_at": "2021-10-16T15:48:13Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730279143",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730279143"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730279143"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730279143/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 173,
    "original_line": 173,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730280814",
    "pull_request_review_id": 781370532,
    "id": 730280814,
    "node_id": "PRRC_kwDOABII584rhzNu",
    "diff_hunk": "@@ -185,59 +186,59 @@ static std::string SettingName(const std::string& arg)\n }\n \n /**\n- * Interpret -nofoo as if the user supplied -foo=0.\n+ * Split up setting key string, removing \"section.\" and \"no\" prefixes.\n  *\n- * This method also tracks when the -no form was supplied, and if so,\n- * checks whether there was a double-negative (-nofoo=0 -> -foo=1).\n- *\n- * If there was not a double negative, it removes the \"no\" from the key\n- * and returns false.\n- *\n- * If there was a double negative, it removes \"no\" from the key, and\n- * returns true.\n- *\n- * If there was no \"no\", it returns the string value untouched.\n- *\n- * Where an option was negated can be later checked using the\n+ * @note Where an option was negated can be later checked using the",
    "path": "src/util/system.cpp",
    "position": 34,
    "original_position": 27,
    "commit_id": "c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab",
    "original_commit_id": "4be2e10cc250350ad6c81bb75589793dfa27990d",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "re: https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730278012\r\n\r\n> I would say that a comment like `@param[in|out] key ...` (not sure how to write it properly) would be great here.\r\n\r\nShould be resolved since it's input only now.",
    "created_at": "2021-10-16T16:02:05Z",
    "updated_at": "2021-10-16T16:10:53Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730280814",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730280814"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730280814"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730280814/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 195,
    "original_line": 195,
    "side": "RIGHT",
    "in_reply_to_id": 730251794
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730280885",
    "pull_request_review_id": 781370532,
    "id": 730280885,
    "node_id": "PRRC_kwDOABII584rhzO1",
    "diff_hunk": "@@ -185,59 +186,59 @@ static std::string SettingName(const std::string& arg)\n }\n \n /**\n- * Interpret -nofoo as if the user supplied -foo=0.\n+ * Split up setting key string, removing \"section.\" and \"no\" prefixes.\n  *\n- * This method also tracks when the -no form was supplied, and if so,\n- * checks whether there was a double-negative (-nofoo=0 -> -foo=1).\n- *\n- * If there was not a double negative, it removes the \"no\" from the key\n- * and returns false.\n- *\n- * If there was a double negative, it removes \"no\" from the key, and\n- * returns true.\n- *\n- * If there was no \"no\", it returns the string value untouched.\n- *\n- * Where an option was negated can be later checked using the\n+ * @note Where an option was negated can be later checked using the\n  * IsArgNegated() method. One use case for this is to have a way to disable\n  * options that are not normally boolean (e.g. using -nodebuglogfile to request\n  * that debug log output is not sent to any file at all).\n  */\n-\n-static util::SettingsValue InterpretOption(std::string& section, std::string& key, const std::string& value)\n+struct KeyInfo { std::string section; bool negated{false}; };\n+KeyInfo InterpretKey(std::string& key)\n {\n+    KeyInfo result;\n     // Split section name from key name for keys like \"testnet.foo\" or \"regtest.bar\"\n     size_t option_index = key.find('.');\n     if (option_index != std::string::npos) {\n-        section = key.substr(0, option_index);\n+        result.section = key.substr(0, option_index);\n         key.erase(0, option_index + 1);\n     }\n     if (key.substr(0, 2) == \"no\") {\n         key.erase(0, 2);",
    "path": "src/util/system.cpp",
    "position": 52,
    "original_position": 46,
    "commit_id": "c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab",
    "original_commit_id": "4be2e10cc250350ad6c81bb75589793dfa27990d",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "re: https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730276363\r\n\r\n> not for this PR but: [key.compare(..)](https://en.cppreference.com/w/cpp/string/basic_string/compare) seems more efficient than `key.substr(..)` here. In C++20, there will be [starts_with](https://en.cppreference.com/w/cpp/string/basic_string/starts_with) function.\r\n\r\nAgree it would be a good change in a different PR",
    "created_at": "2021-10-16T16:02:32Z",
    "updated_at": "2021-10-16T16:10:53Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730280885",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730280885"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730280885"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730280885/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": 209,
    "original_start_line": 206,
    "start_side": "RIGHT",
    "line": 210,
    "original_line": 210,
    "side": "RIGHT",
    "in_reply_to_id": 730276363
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730281278",
    "pull_request_review_id": 781370532,
    "id": 730281278,
    "node_id": "PRRC_kwDOABII584rhzU-",
    "diff_hunk": "@@ -158,12 +158,18 @@ struct SectionInfo\n class ArgsManager\n {\n public:\n+    /**\n+     * Flags controlling how config and command line arguments are validated and\n+     * interpreted.\n+     */\n     enum Flags : uint32_t {\n-        // Boolean options can accept negation syntax -noOPTION or -noOPTION=1\n-        ALLOW_BOOL = 0x01,\n-        ALLOW_INT = 0x02,\n-        ALLOW_STRING = 0x04,\n-        ALLOW_ANY = ALLOW_BOOL | ALLOW_INT | ALLOW_STRING,\n+        ALLOW_ANY = 0x01,         //!< disable validation\n+        ALLOW_BOOL = 0x02,        //!< unimplemented, draft implementation in #16545\n+        ALLOW_INT = 0x04,         //!< unimplemented, draft implementation in #16545\n+        ALLOW_STRING = 0x08,      //!< unimplemented, draft implementation in #16545\n+        ALLOW_LIST = 0x10,        //!< unimplemented, draft implementation in #16545\n+        DISALLOW_NEGATION = 0x20, //!< disallow -nofoo syntax\n+\n         DEBUG_ONLY = 0x100,",
    "path": "src/util/system.h",
    "position": 21,
    "original_position": 21,
    "commit_id": "c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab",
    "original_commit_id": "6e613a0a3058e65237907bcf7915864dcef8cc99",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "re: https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730279143\r\n\r\n> [6e613a0](https://github.com/bitcoin/bitcoin/commit/6e613a0a3058e65237907bcf7915864dcef8cc99): Would it be possible to add a comment for `DEBUG_ONLY` too? Or is it out of scope here?\r\n\r\nI'd have to research what the comment should say and I'd rather see it done separately. This is a flag, but not a flag related to the flags in this PR.",
    "created_at": "2021-10-16T16:06:48Z",
    "updated_at": "2021-10-16T16:10:53Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730281278",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730281278"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730281278"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730281278/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 173,
    "original_line": 173,
    "side": "RIGHT",
    "in_reply_to_id": 730279143
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730282231",
    "pull_request_review_id": 781371442,
    "id": 730282231,
    "node_id": "PRRC_kwDOABII584rhzj3",
    "diff_hunk": "@@ -185,59 +186,59 @@ static std::string SettingName(const std::string& arg)\n }\n \n /**\n- * Interpret -nofoo as if the user supplied -foo=0.\n+ * Split up setting key string, removing \"section.\" and \"no\" prefixes.\n  *\n- * This method also tracks when the -no form was supplied, and if so,\n- * checks whether there was a double-negative (-nofoo=0 -> -foo=1).\n- *\n- * If there was not a double negative, it removes the \"no\" from the key\n- * and returns false.\n- *\n- * If there was a double negative, it removes \"no\" from the key, and\n- * returns true.\n- *\n- * If there was no \"no\", it returns the string value untouched.\n- *\n- * Where an option was negated can be later checked using the\n+ * @note Where an option was negated can be later checked using the\n  * IsArgNegated() method. One use case for this is to have a way to disable\n  * options that are not normally boolean (e.g. using -nodebuglogfile to request\n  * that debug log output is not sent to any file at all).\n  */\n-\n-static util::SettingsValue InterpretOption(std::string& section, std::string& key, const std::string& value)\n+struct KeyInfo { std::string section; bool negated{false}; };",
    "path": "src/util/system.cpp",
    "position": null,
    "original_position": 34,
    "commit_id": "c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab",
    "original_commit_id": "4be2e10cc250350ad6c81bb75589793dfa27990d",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "re: https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730275392\r\n\r\n> nit: As there are many \"keys\" in Bitcoin codebase and the word meaning is heavily overloaded, maybe it would make sense to have `SettingKeyInfo` / `SettingKey` / `ArgKeyInfo` or something.\r\n\r\nI'm happy to use a different name, but this was the name suggested by another reviewer so I kept it. If reviewers want to decide on something different, I'm happy with any of these, since this is just a private struct local to `system.cpp`",
    "created_at": "2021-10-16T16:14:47Z",
    "updated_at": "2021-10-16T16:15:49Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730282231",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730282231"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730282231"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730282231/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 196,
    "side": "RIGHT",
    "in_reply_to_id": 730275392
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730282853",
    "pull_request_review_id": 781371833,
    "id": 730282853,
    "node_id": "PRRC_kwDOABII584rhztl",
    "diff_hunk": "@@ -227,7 +227,7 @@ static std::optional<util::SettingsValue> InterpretValue(const std::string& key,\n {\n     // Return negated settings as false values.\n     if (negated) {\n-        if (!(flags & ArgsManager::ALLOW_BOOL)) {\n+        if (flags & ArgsManager::DISALLOW_NEGATION) {\n             error = strprintf(\"Negating of -%s is meaningless and therefore forbidden\", key);",
    "path": "src/util/system.cpp",
    "position": null,
    "original_position": 6,
    "commit_id": "c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab",
    "original_commit_id": "6e613a0a3058e65237907bcf7915864dcef8cc99",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "re: https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730278801\r\n\r\n> nit: It seems to me that this message may simply say that negation is disallowed/forbidden as I'm not sure that it's guarranteed that negation is \"meaningless\".\r\n\r\nI agree this error message is not clear, and this is only kept to keep current behavior.\r\n\r\nIn the future, I think it would be good to remove the disallow negation flag entirely and use allowed value checks instead of disallowed values checks as described https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730278801.",
    "created_at": "2021-10-16T16:20:12Z",
    "updated_at": "2021-10-16T16:24:30Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730282853",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730282853"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730282853"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730282853/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 231,
    "side": "RIGHT",
    "in_reply_to_id": 730278801
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730283315",
    "pull_request_review_id": 781372063,
    "id": 730283315,
    "node_id": "PRRC_kwDOABII584rhz0z",
    "diff_hunk": "@@ -158,12 +158,18 @@ struct SectionInfo\n class ArgsManager\n {\n public:\n+    /**\n+     * Flags controlling how config and command line arguments are validated and\n+     * interpreted.\n+     */\n     enum Flags : uint32_t {\n-        // Boolean options can accept negation syntax -noOPTION or -noOPTION=1\n-        ALLOW_BOOL = 0x01,\n-        ALLOW_INT = 0x02,\n-        ALLOW_STRING = 0x04,\n-        ALLOW_ANY = ALLOW_BOOL | ALLOW_INT | ALLOW_STRING,\n+        ALLOW_ANY = 0x01,         //!< disable validation\n+        ALLOW_BOOL = 0x02,        //!< unimplemented, draft implementation in #16545\n+        ALLOW_INT = 0x04,         //!< unimplemented, draft implementation in #16545\n+        ALLOW_STRING = 0x08,      //!< unimplemented, draft implementation in #16545\n+        ALLOW_LIST = 0x10,        //!< unimplemented, draft implementation in #16545",
    "path": "src/util/system.h",
    "position": null,
    "original_position": 18,
    "commit_id": "c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab",
    "original_commit_id": "6e613a0a3058e65237907bcf7915864dcef8cc99",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "re: https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730278521\r\n\r\n> [6e613a0](https://github.com/bitcoin/bitcoin/commit/6e613a0a3058e65237907bcf7915864dcef8cc99): Not sure if this commit should add the flag as it does not implement it anyway.\r\n\r\nRight, no point describing a future unimplemented flag.\r\n\r\n> Also at this point, it's not entirely clear if `ALLOW_LIST` allows only `[type, type, type,...]` lists or even `[type1, type2, type3, ...]` lists.\r\n\r\nIt's orthogonal. If you combined ALLOW_LIST with ALLOW_BOOL/INT/STRING it would allow lists of bools, ints, or strings, if you combined ALLOW_LIST with ALLOW_ANY it would allow lists of any type (and values would be parsed as strings).\r\n\r\nEDIT: It might be clearer to change `ALLOW_LIST` to `ALLOW_MULTIPLE` since the main effect of the flag is to let settings be specified multiple times in the config file or command line and use all the values instead of just a single value. But it doesn't really matter for now, since this is commented out and intent is just to show intended scope of ALLOW flags and reserve an enum value.",
    "created_at": "2021-10-16T16:23:37Z",
    "updated_at": "2021-10-16T17:33:13Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730283315",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730283315"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730283315"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730283315/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 170,
    "side": "RIGHT",
    "in_reply_to_id": 730278521
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730285366",
    "pull_request_review_id": 781373335,
    "id": 730285366,
    "node_id": "PRRC_kwDOABII584rh0U2",
    "diff_hunk": "@@ -164,10 +164,10 @@ class ArgsManager\n      */\n     enum Flags : uint32_t {\n         ALLOW_ANY = 0x01,         //!< disable validation\n-        ALLOW_BOOL = 0x02,        //!< unimplemented, draft implementation in #16545\n-        ALLOW_INT = 0x04,         //!< unimplemented, draft implementation in #16545\n-        ALLOW_STRING = 0x08,      //!< unimplemented, draft implementation in #16545\n-        ALLOW_LIST = 0x10,        //!< unimplemented, draft implementation in #16545\n+        // ALLOW_BOOL = 0x02,     //!< unimplemented, draft implementation in #16545",
    "path": "src/util/system.h",
    "position": 15,
    "original_position": 8,
    "commit_id": "c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab",
    "original_commit_id": "5c04ca81fd2c44fed6487123500b49434280d514",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "re: https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730275650\r\n\r\n> For the record, I don't mind these commented out instead of removed.\r\n\r\nThe reason these are commented out instead of removed is that flag name ALLOW_ANY doesn't make sense without seeing other ALLOW_ flags. I could remove or rename ALLOW_ANY, but I don't want to, because it would blow up the size of this PR and make it conflict with everything, and because as long as some validation is added later, the name  ALLOW_ANY should be fine later.",
    "created_at": "2021-10-16T16:42:02Z",
    "updated_at": "2021-10-16T16:42:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730285366",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730285366"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730285366"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730285366/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 167,
    "original_line": 167,
    "side": "RIGHT",
    "in_reply_to_id": 730275650
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730286519",
    "pull_request_review_id": 781374122,
    "id": 730286519,
    "node_id": "PRRC_kwDOABII584rh0m3",
    "diff_hunk": "@@ -185,59 +186,59 @@ static std::string SettingName(const std::string& arg)\n }\n \n /**\n- * Interpret -nofoo as if the user supplied -foo=0.\n+ * Split up setting key string, removing \"section.\" and \"no\" prefixes.\n  *\n- * This method also tracks when the -no form was supplied, and if so,\n- * checks whether there was a double-negative (-nofoo=0 -> -foo=1).\n- *\n- * If there was not a double negative, it removes the \"no\" from the key\n- * and returns false.\n- *\n- * If there was a double negative, it removes \"no\" from the key, and\n- * returns true.\n- *\n- * If there was no \"no\", it returns the string value untouched.\n- *\n- * Where an option was negated can be later checked using the\n+ * @note Where an option was negated can be later checked using the",
    "path": "src/util/system.cpp",
    "position": 34,
    "original_position": 27,
    "commit_id": "c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab",
    "original_commit_id": "4be2e10cc250350ad6c81bb75589793dfa27990d",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Ya original comment is not relevant now.",
    "created_at": "2021-10-16T16:52:55Z",
    "updated_at": "2021-10-16T16:52:56Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730286519",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730286519"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730286519"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730286519/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 195,
    "original_line": 195,
    "side": "RIGHT",
    "in_reply_to_id": 730251794
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730386083",
    "pull_request_review_id": 781428910,
    "id": 730386083,
    "node_id": "PRRC_kwDOABII584riM6j",
    "diff_hunk": "@@ -872,15 +872,14 @@ bool ArgsManager::ReadConfigStream(std::istream& stream, const std::string& file\n         return false;\n     }\n     for (const std::pair<std::string, std::string>& option : options) {\n-        std::string section;\n         std::string key = option.first;\n-        util::SettingsValue value = InterpretOption(section, key, option.second);\n+        KeyInfo keyinfo = InterpretKey(key);\n         std::optional<unsigned int> flags = GetArgFlags('-' + key);\n         if (flags) {\n-            if (!CheckValid(key, value, *flags, error)) {\n-                return false;\n-            }\n-            m_settings.ro_config[section][key].push_back(value);\n+            std::optional<util::SettingsValue> value =\n+                InterpretValue(key, option.second, keyinfo.negated, *flags, error);\n+            if (!value) return false;",
    "path": "src/util/system.cpp",
    "position": null,
    "original_position": 155,
    "commit_id": "c5d7e34bd9a4ad752c5ec88032420e2e90ab17ab",
    "original_commit_id": "4be2e10cc250350ad6c81bb75589793dfa27990d",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Just a nit, feel free to ignore. Personally prefer `has_value()`, especially if above was `auto value = InterpretValue(...)`.\r\n\r\nEdit:`has_value()` is used in some places. Maybe there should be some guidelines in developer notes or something?",
    "created_at": "2021-10-17T09:43:37Z",
    "updated_at": "2021-10-17T09:48:26Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730386083",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730386083"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22766#discussion_r730386083"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22766"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730386083/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 881,
    "side": "RIGHT",
    "in_reply_to_id": 730251148
  }
]