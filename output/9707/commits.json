[
  {
    "sha": "9db8eecac1c713c760c0217b6acb7455c657fa8b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZGI4ZWVjYWMxYzcxM2M3NjBjMDIxN2I2YWNiNzQ1NWM2NTdmYThi",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-02-07T14:56:53Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-02-08T15:24:02Z"
      },
      "message": "Fix RPC failure testing\n\nMake sure that RPC tests are actually checking failures correctly by:\n\n- Catching JSON RPC exceptions and verifying the error codes and messages.\n- Failing the test case if the JSON RPC exception isn't raised.",
      "tree": {
        "sha": "02faa45b0da7cd2271cf4a3b089e78dd0e308f4d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/02faa45b0da7cd2271cf4a3b089e78dd0e308f4d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9db8eecac1c713c760c0217b6acb7455c657fa8b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9db8eecac1c713c760c0217b6acb7455c657fa8b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9db8eecac1c713c760c0217b6acb7455c657fa8b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9db8eecac1c713c760c0217b6acb7455c657fa8b/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "729de15b6365face6ae9e12a03624da33a6302f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/729de15b6365face6ae9e12a03624da33a6302f0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/729de15b6365face6ae9e12a03624da33a6302f0"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 21,
      "deletions": 4
    },
    "files": [
      {
        "sha": "da2d8f040f0a2c51121ac688b9dbfaf9067dbcef",
        "filename": "qa/rpc-tests/rpcnamedargs.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9db8eecac1c713c760c0217b6acb7455c657fa8b/qa/rpc-tests/rpcnamedargs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9db8eecac1c713c760c0217b6acb7455c657fa8b/qa/rpc-tests/rpcnamedargs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rpcnamedargs.py?ref=9db8eecac1c713c760c0217b6acb7455c657fa8b",
        "patch": "@@ -37,7 +37,7 @@ def run_test(self):\n         h = node.help(command='getinfo')\n         assert(h.startswith('getinfo\\n'))\n \n-        assert_raises_jsonrpc(-8, node.help, random='getinfo')\n+        assert_raises_jsonrpc(-8, 'Unknown named parameter', node.help, random='getinfo')\n \n         h = node.getblockhash(height=0)\n         node.getblock(blockhash=h)"
      },
      {
        "sha": "dc8555c44c08cb0a15fbaa9cdd579c7fa25f1521",
        "filename": "qa/rpc-tests/test_framework/util.py",
        "status": "modified",
        "additions": 20,
        "deletions": 3,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9db8eecac1c713c760c0217b6acb7455c657fa8b/qa/rpc-tests/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9db8eecac1c713c760c0217b6acb7455c657fa8b/qa/rpc-tests/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/util.py?ref=9db8eecac1c713c760c0217b6acb7455c657fa8b",
        "patch": "@@ -550,13 +550,30 @@ def assert_raises_message(exc, message, fun, *args, **kwds):\n     else:\n         raise AssertionError(\"No exception raised\")\n \n-def assert_raises_jsonrpc(code, fun, *args, **kwds):\n-    '''Check for specific JSONRPC exception code'''\n+def assert_raises_jsonrpc(code, message, fun, *args, **kwds):\n+    \"\"\"Run an RPC and verify that a specific JSONRPC exception code and message is raised.\n+\n+    Calls function `fun` with arguments `args` and `kwds`. Catches a JSONRPCException\n+    and verifies that the error code and message are as expected. Throws AssertionError if\n+    no JSONRPCException was returned or if the error code/message are not as expected.\n+\n+    Args:\n+        code (int), optional: the error code returned by the RPC call (defined\n+            in src/rpc/protocol.h). Set to None if checking the error code is not required.\n+        message (string), optional: [a substring of] the error string returned by the\n+            RPC call. Set to None if checking the error string is not required\n+        fun (function): the function to call. This should be the name of an RPC.\n+        args*: positional arguments for the function.\n+        kwds**: named arguments for the function.\n+    \"\"\"\n     try:\n         fun(*args, **kwds)\n     except JSONRPCException as e:\n-        if e.error[\"code\"] != code:\n+        # JSONRPCException was thrown as expected. Check the code and message values are correct.\n+        if (code is not None) and (code != e.error[\"code\"]):\n             raise AssertionError(\"Unexpected JSONRPC error code %i\" % e.error[\"code\"])\n+        if (message is not None) and (message not in e.error['message']):\n+            raise AssertionError(\"Expected substring not found:\"+e.error['message'])\n     except Exception as e:\n         raise AssertionError(\"Unexpected exception raised: \"+type(e).__name__)\n     else:"
      }
    ]
  }
]