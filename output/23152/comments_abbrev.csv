laanwj,2021-10-01 07:54:11,"Concept ACK, conditional on that we are going to try make this be default for the release binaries (I don't mean in this PR). I'm generally not a fan of configure options that simply add cflags/linkerflags, but I think that's something for which to make an exception.\n\n> I had previously had a PR open to perform link time garbage collection (-ffunction-sections -fdata-sections -Wl,--gc-sections",https://github.com/bitcoin/bitcoin/pull/23152#issuecomment-931999086,931999086,
fanquake,2021-10-01 08:20:10,"> Concept ACK, conditional on that we are going to try make this be default for the release binaries\n\nI've added `--enable-lto` to the configure for the Guix build, so it's easier for anyone to test/run those now as well.\n\nEDIT: Looks like this will need some changes to the Guix toolchains.",https://github.com/bitcoin/bitcoin/pull/23152#issuecomment-932024116,932024116,
sipa,2021-10-01 13:34:48,"Is there a possibility to use -flto=jobserver? That makes GCC use make's parallel scheduler (so the argument to -j is available for multiple parallel compilations). It requires the linker's command in Makefile to be prepended with +.\n\nAlternatively, some way of setting N for -flto=N. Doing the entire LTO stage single-threadedly (the default, I think) would be very slow, especially on machines wi",https://github.com/bitcoin/bitcoin/pull/23152#issuecomment-932234276,932234276,
laanwj,2021-10-01 14:07:35,"> EDIT: Looks like this will need some changes to the Guix toolchains.\n\nWhich reminds meâ€”should we enable lto for the depends build as well? I guess it's another separate decision, but it would allow for the most optimization opportunities.",https://github.com/bitcoin/bitcoin/pull/23152#issuecomment-932261757,932261757,
practicalswift,2021-10-01 14:30:10,"Concept ACK\n\nSome LTO results from measurements made back in 2018 can be found in #14277 :)",https://github.com/bitcoin/bitcoin/pull/23152#issuecomment-932281490,932281490,
jamesob,2021-10-01 14:51:22,Concept ACK,https://github.com/bitcoin/bitcoin/pull/23152#issuecomment-932298638,932298638,
sipa,2021-10-01 15:03:05,"There seems to be a patch for automake to support -flto=jobserver, but it's not yet accepted: https://www.mail-archive.com/automake-patches@gnu.org/msg07973.html",https://github.com/bitcoin/bitcoin/pull/23152#issuecomment-932308376,932308376,
martinus,2021-10-01 22:23:10,"I ran all of the benchmarks with clang++ 12.0.1, g++ 11.1.0 with and without `--enable-lto` on my Intel i7-8700. Some benchmarks results change quite a lot, and I also didn't expect that clang++ and g++ can behave so differently. But microbenchmark results should always be taken with a grain of salt.\n\n|               clang++ ns/op |               clang++ lto ns/op |               g++ ns/op |  ",https://github.com/bitcoin/bitcoin/pull/23152#issuecomment-932611057,932611057,
sipa,2021-10-01 23:16:51,"@martinus Man, that's a wildly inconsistent set of differences... I don't see anything really dramatic, though.",https://github.com/bitcoin/bitcoin/pull/23152#issuecomment-932628920,932628920,
martinus,2021-10-02 10:43:32,"I've now calculated the geometric mean of all the benchmark results:\n\ngeomean of runtime (lower is better) | compiler\n---:|---\n500.60 | clang++ \n470.27 | clang++ lto\n501.78 | g++\n498.56 | g++ lto\n\nSo on average clang++ seems to benefit in the benchmarks, but for g++ the change is not significant. I'd say one needs to do more real world benchmarks to see if it's a benefit.\n\nOn",https://github.com/bitcoin/bitcoin/pull/23152#issuecomment-932730690,932730690,
practicalswift,2021-10-03 08:24:07,"> One other interesting observeration: When compiling with `--enable-lto` g++ seems to be able to detect more problems. E.g. it found this:\n> \n> ```\n> In member function 'operator=',\n>     inlined from 'Seed' at test/util/setup_common.cpp:66:33,\n>     inlined from 'SeedInsecureRand' at ./test/util/setup_common.h:61:13,\n>     inlined from '__ct_base ' at test/util/setup_common.cpp:105:2",https://github.com/bitcoin/bitcoin/pull/23152#issuecomment-932887861,932887861,
martinus,2021-10-04 04:48:40,"I ran a few `-reindex-chainstate` benchmarks overnight on my Intel i7 CPU:\n\nRunning `-assumevalid=00000000000000000002a23d6df20eecec15b21d32c75833cce28f113de888b7 -reindex-chainstate -stopatheight=400000 -dbcache=4000`\n\nuser [sec] | system [sec] | total [sec] | total relativ | compiler\n---:|---:|---:|---:|---\n1863.15 | 69.09 | 1932.24 | 100.00% | g++\n1852.46 | 68.42 | 1920.88 | 99.41",https://github.com/bitcoin/bitcoin/pull/23152#issuecomment-933140344,933140344,
fanquake,2021-10-04 06:23:10,"@martinus thanks for the testing so far.\n\nFor more benchmarking / testing, I've added an additional commit which adds a `--enable-thin-lto` flag. Note that this is Clang only, and will run with much more parallelism than fat LTO.\n\nI've also added a commit that will partially fix using LTO in the Guix builds. After discussing with @dongcarl , we've realized that using the `gcc-*` wrappers f",https://github.com/bitcoin/bitcoin/pull/23152#issuecomment-933179113,933179113,
sipa,2021-10-05 17:29:48,"For GCC 8 it may be useful to try enabling `-flto-odr-type-merging`; that may detect certain calling mismatches (if `-Wodr` is enabled as well, but it is by default). In later GCCs the option disappeared; not sure why.",https://github.com/bitcoin/bitcoin/pull/23152#issuecomment-934615687,934615687,
DrahtBot,2021-10-06 12:44:57,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/23152#issuecomment-936167209,936167209,
jamesob,2021-10-06 14:13:01,"ACK https://github.com/bitcoin/bitcoin/pull/23152/commits/7a4758883ede8853c0e74ae66a2df68da0ce405c\n\nI tested/benched both `--enable-lto` and `--enable-thin-lto` with clang-12 and lld. Though gcc-9 supports LTO, apparently `lld` doesn't know how to work with gcc, so I didn't test that.\n\nThe differences I saw for a mid-chain 40,000 block IBD weren't as dramatic as I expected based on the res",https://github.com/bitcoin/bitcoin/pull/23152#issuecomment-936312757,936312757,
martinus,2021-10-06 15:48:05,"I think the numbers are actually not too different from mine. lto-clang-12 uses the least amount of CPU, and gcc-9 the most. I think that's the important metrics here, the actual runtime difference could be due to random chance (e.g. waiting for leveldb writes).",https://github.com/bitcoin/bitcoin/pull/23152#issuecomment-936538958,936538958,
MarcoFalke,2021-10-06 17:41:14,"@jamesob @martinus I couldn't tell from your results, but both of you compiled without depends, right?",https://github.com/bitcoin/bitcoin/pull/23152#issuecomment-936768933,936768933,
jamesob,2021-10-06 17:55:32,@MarcoFalke yeah I'm not running `make depends`: https://github.com/chaincodelabs/bitcoinperf/blob/master/runner/bitcoind.py#L441-L488,https://github.com/bitcoin/bitcoin/pull/23152#issuecomment-936795063,936795063,
martinus,2021-10-07 04:57:26,"@MarcoFalke no, I just configured, ran `make -j14 check` and then `bitcoind`",https://github.com/bitcoin/bitcoin/pull/23152#issuecomment-937445631,937445631,
jamesob,2021-10-07 18:47:10,"Benches with large DB cache (9000) are in. Interesting results in the relative table are bolded below.\n\n---\n\n|          bench name           |                                                                                                     command                                                                                                     |\n|-------------------------------|----",https://github.com/bitcoin/bitcoin/pull/23152#issuecomment-938061371,938061371,
MarcoFalke,2021-10-08 07:56:59,"```\n/bin/sh ../libtool  --tag=CXX --preserve-dup-deps  --mode=link x86_64-w64-mingw32-g++ -std=c++17  -fstack-reuse=none -Wstack-protector -fstack-protector-all -fcf-protection=full      -flto -fPIE -pipe -O2 -O2 -g -fno-ident -fno-extended-identifiers -fvisibility=hidden -Wl,--exclude-libs,ALL  -Wl,--enable-reloc-section -Wl,--dynamicbase -Wl,--nxcompat -Wl,--high-entropy-va -pie   -flto -all-s",https://github.com/bitcoin/bitcoin/pull/23152#issuecomment-938428024,938428024,
fanquake,2021-10-08 08:16:50,"> For GCC 8 it may be useful to try enabling -flto-odr-type-merging; that may detect certain calling mismatches (if -Wodr is enabled as well, but it is by default). In later GCCs the option disappeared; not sure why.\n\nI've added this. In newer GCC, in regards to this option I see:\n>   -flto-odr-type-merging      Does nothing.  Preserved for backward compatibility.\n\nLooks like it was remo",https://github.com/bitcoin/bitcoin/pull/23152#issuecomment-938441337,938441337,
DrahtBot,2021-10-12 09:58:38,<!--9cd9c72976c961c55c7acef8f6ba82cd-->\n### Guix builds\n\n| File | commit 5b7210c8745d9572fe94620f848d4ee1304c91a7<br>(master) | commit dfe4547134ea52fd0a6585129f8b11ac49904b95<br>(master and this pull) |\n|--|--|--|\n| SHA256SUMS.part | [`c79a21dc3da6e71b...`](https://drahtbot.space/guix/bitcoin/bitcoin/5b7210c8745d9572fe94620f848d4ee1304c91a7/SHA256SUMS.part) |  |\n| *-aarch64-linux-gnu-debug.,https://github.com/bitcoin/bitcoin/pull/23152#issuecomment-940856285,940856285,
fanquake,2021-11-16 01:47:08,"I've rebased this, and reduced the changes back to just adding the `--enable-lto` configure option (`-flto`). I think merging this as is, is still useful for now, so that developers can experiment/benchmark. LTO is still opt in, and there are no changes to release builds.\n\nI plan on adding proper LTO support to depends as a follow up. ",https://github.com/bitcoin/bitcoin/pull/23152#issuecomment-969651695,969651695,
DrahtBot,2021-11-18 10:04:58,<!--9cd9c72976c961c55c7acef8f6ba82cd-->\n### Guix builds\n\n| File | commit b869a784ef2b259f14545bf6bd314fb58c36514b<br>(master) | commit da6e6382113ef97b8ee85c7454bea8addf765731<br>(master and this pull) |\n|--|--|--|\n| SHA256SUMS.part | [`954f517d6d32db0e...`](https://drahtbot.space/guix/bitcoin/bitcoin/b869a784ef2b259f14545bf6bd314fb58c36514b/SHA256SUMS.part) | [`6cc1eec935c0042e...`](https://,https://github.com/bitcoin/bitcoin/pull/23152#issuecomment-972716880,972716880,
laanwj,2021-11-18 13:30:09,"Code review ACK 68e5aafde3e87c16da95410a0474f38f589afb36\n(but see below)",https://github.com/bitcoin/bitcoin/pull/23152#issuecomment-972867329,972867329,
laanwj,2021-11-18 14:22:58,"I tried running a build with `--enable-lto` on Ubuntu 20.04, with clang 13 and get the following errors during link:\n```\n/usr/bin/ld: minisketch/libminisketch.a: error adding symbols: archive has no index; run ranlib to add one\nclang-13: error: linker command failed with exit code 1 (use -v to see invocation)\n```\n\nWith gcc 9.3.0 I get the following error:\n```\n/usr/bin/ld: /tmp/bitc",https://github.com/bitcoin/bitcoin/pull/23152#issuecomment-972911259,972911259,
fanquake,2021-11-19 04:19:41,"> with clang 13 and get the following errors during link:\n\nBuilds with Apple Clang are working ok, but I see the same issue with LLVM Clang 13. Will take a look.\n\n> With gcc 9.3.0 I get the following error:\n\nInteresting. Anything non-standard about your build? I've completed builds using this branch with GCC 10.3.0 and 9.3.0.",https://github.com/bitcoin/bitcoin/pull/23152#issuecomment-973722074,973722074,
fanquake,2021-11-19 06:56:51,"> but I see the same issue with LLVM Clang 13. Will take a look.\n\nThe issue is using `ranlib` rather than `llvm-ranlib`. When I use `llvm-ranlib-13` (with `clang-13`) building with LTO works fine.\n\nWe should be able to override the `ranlib` used during configure, using `RANLIB=llvm-ranlib-*`, but that doesn't currently work because of our use of `AC_PATH_TOOL`. Going to fix this up.",https://github.com/bitcoin/bitcoin/pull/23152#issuecomment-973802013,973802013,
laanwj,2021-11-19 18:32:15,"> Interesting. Anything non-standard about your build? I've completed builds using this branch with GCC 10.3.0 and 9.3.0.\n\nI've retried on Ubuntu 20.04 with just\n```\n../configure --with-incompatible-bdb --enable-lto\nmake -j4\n```\nNo flag overrides. The only thing special isthat it's an out-of-tree build. It still fails in the linking step.\n```\n  CXXLD    bitcoin-wallet\n/usr/bin/",https://github.com/bitcoin/bitcoin/pull/23152#issuecomment-974310041,974310041,
fanquake,2021-11-25 12:14:42,"This currently works for GCC 9.x+, no change to release builds, still completely opt in. I'm planning on following up with improved support for Clang, and depends support shortly, but am going to merge this now.",https://github.com/bitcoin/bitcoin/pull/23152#issuecomment-979158618,979158618,
MarcoFalke,2021-10-05 14:40:39,"If no runtime benefit can be observed with recent gcc, it would be surprising to see a benefit of lto with gcc-8. Lto might not be worth it for the release binaries unless they are also switched to use clang?",https://github.com/bitcoin/bitcoin/pull/23152#discussion_r722312368,722312368,contrib/guix/libexec/build.sh
laanwj,2021-10-05 16:45:46,"If it's not slower, something could still be said for smaller binaries. ",https://github.com/bitcoin/bitcoin/pull/23152#discussion_r722425908,722425908,contrib/guix/libexec/build.sh
laanwj,2021-10-05 16:48:51,"And I think what would still be interesting is to build the depends with `-lto` too, so that calls into dependencies can be optimized, and this might be able to shave off big parts of Qt.",https://github.com/bitcoin/bitcoin/pull/23152#discussion_r722428381,722428381,contrib/guix/libexec/build.sh
