gmaxwell,2019-04-05T19:40:59Z,"I agree with the concept.  I wish we could announce our own addresses to these peers, but I think doing so results in a topology leak. :(   The reason I'd like this is that if an attacker eclipses a node except for its blocks only links it will eventually eclipse its blocks-only links too through control of the addrman state.",https://github.com/bitcoin/bitcoin/pull/15759#issuecomment-480398699,480398699,
sdaftuar,2019-04-05T19:41:24Z,"This approach was motivated by the [TxProbe paper.](https://arxiv.org/pdf/1812.00942.pdf)  Fundamentally, transaction relay is going to leak information about our node's peers (as long as we care about not wasting bandwidth).  Rather than combat transaction-relay based inferences, which I think is a lost cause in the long-run even if there are improvements we can make in the short-term, I figure w",https://github.com/bitcoin/bitcoin/pull/15759#issuecomment-480398802,480398802,
gmaxwell,2019-04-05T19:49:21Z,"> I also did some simulations to verify that a random graph of 10000 peers would be fully connected if each peer makes 2 outbound connections to random other peers,\n\nCan you run these simulations assuming x% of the 10,000 peers are black holes (don't connect the graph), for various values of x%?\n\n2 might be fine for now, but ultimately I'd like to optimize memory usage for both inbound and",https://github.com/bitcoin/bitcoin/pull/15759#issuecomment-480400958,480400958,
instagibbs,2019-04-05T20:15:00Z,"> I figure we can directly address why we care about keeping the graph private\n\nTo the uninformed p2p reader this reason is?",https://github.com/bitcoin/bitcoin/pull/15759#issuecomment-480408075,480408075,
DrahtBot,2019-04-05T21:12:25Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#16762](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16762.html) (Rust-based Backup over-REST block downloade",https://github.com/bitcoin/bitcoin/pull/15759#issuecomment-480423675,480423675,
gmaxwell,2019-04-05T21:37:59Z,"> To the uninformed p2p reader this reason is?\n\n> (b) Knowledge of the network graph could be used to split a target node or\nnodes from the honest network (eg by knowing which peers to attack in order to\nachieve a network split).",https://github.com/bitcoin/bitcoin/pull/15759#issuecomment-480430294,480430294,
sdaftuar,2019-04-08T14:59:07Z,"> Can you run these simulations assuming x% of the 10,000 peers are black holes (don't connect the graph), for various values of x%?\n\nThis table shows my simulation results for various black hole rates, with various values of how many outbound connections we make (k=2 is what I've implemented in this PR).  This is on a 10,000 node graph with no non-listening nodes.  Each table entry shows the ",https://github.com/bitcoin/bitcoin/pull/15759#issuecomment-480868516,480868516,
practicalswift,2019-04-08T17:32:58Z,@sdaftuar Thanks for sharing the results of the analysis! Would you be willing to share the simulation scripts?,https://github.com/bitcoin/bitcoin/pull/15759#issuecomment-480928635,480928635,
sdaftuar,2019-04-09T11:57:38Z,"@practicalswift My simulation code is unreadable, and also may have bugs, so I'd prefer that anyone interested in this would independently corroborate my results from scratch. ",https://github.com/bitcoin/bitcoin/pull/15759#issuecomment-481220805,481220805,
naumenkogs,2019-04-10T17:34:02Z,"> separating block relay from transaction relay;\n\nThis is indeed a good idea. I also see it as a small step towards peer rotation, I think this suggestion makes it easier to reason about rotation.\n\nI'm not sure if this is strongly related to the data you provided, but I'm also curious how many nodes have to be attacked (suspended?) to split network in halves etc.",https://github.com/bitcoin/bitcoin/pull/15759#issuecomment-481787812,481787812,
luke-jr,2019-04-18T18:41:47Z,"Wouldn't this break all the benefits of compact blocks? (Ignoring that with the current implementation, block relay would likely still occur on the normal connections.)",https://github.com/bitcoin/bitcoin/pull/15759#issuecomment-484634796,484634796,
sdaftuar,2019-04-18T19:57:35Z,"@luke-jr I don't think so.  The idea is that nodes are still expected to do transaction relay with other peers, and my belief is that transaction propagation is good enough that compact block relay works just fine on these blocksonly links.  I believe my testing of this branch confirms that as well, but I'd welcome additional testers to corroborate those results in case I'm overlooking something.",https://github.com/bitcoin/bitcoin/pull/15759#issuecomment-484666402,484666402,
practicalswift,2019-05-16T19:13:05Z,Concept ACK: I like the idea,https://github.com/bitcoin/bitcoin/pull/15759#issuecomment-493196048,493196048,
jonasschnelli,2019-05-18T10:12:16Z,"Concept ACK.\nI'm still trying to understand this more detailed: does that mean that with 2 block-only connection and an assumed 5% black-hole-nodes rate, we only have a 3% chance to succeed? Since we relay, I guess there is no chance we could identify (and thus disconnect) black-hole peers?",https://github.com/bitcoin/bitcoin/pull/15759#issuecomment-493665389,493665389,
sdaftuar,2019-06-05T15:15:56Z,Rebased and addressed review comments.,https://github.com/bitcoin/bitcoin/pull/15759#issuecomment-499127658,499127658,
sdaftuar,2019-06-11T19:58:54Z,"> I'm still trying to understand this more detailed: does that mean that with 2 block-only connection and an assumed 5% black-hole-nodes rate, we only have a 3% chance to succeed? Since we relay, I guess there is no chance we could identify (and thus disconnect) black-hole peers?\n\n@jonasschnelli With 2 blocks-only connections, and if we assume 5% of nodes are useless black holes, then my simul",https://github.com/bitcoin/bitcoin/pull/15759#issuecomment-500999863,500999863,
JeremyRubin,2019-06-11T21:07:32Z,"I think that this should be correct code in case someone wants to set it up to tabulate against Suhas's simulation.\n\nEdit: I've rewritten it to be much much better. Scipy is so cool!\n```python\n import random\n import copy\n import scipy\n import scipy.sparse\n import scipy.linalg\n import numpy as np\n \n N = 1000\n def biased_coin(bias):\n     return random.random() <= bias\n de",https://github.com/bitcoin/bitcoin/pull/15759#issuecomment-501023367,501023367,
JeremyRubin,2019-06-11T21:53:15Z,"Improved the code for the above sim, in case anyone's following by email-only.",https://github.com/bitcoin/bitcoin/pull/15759#issuecomment-501037514,501037514,
JeremyRubin,2019-06-11T22:16:39Z,"Deep apologies for the noise; I missed Suhas's earlier note about the connectivity of the _non black hole nodes_, not the total connectivity. The below should work for that.\n\n```python\nimport random\n import copy\n import scipy\n import scipy.sparse\n import scipy.linalg\n import numpy as np\n \n N = 1000\n def biased_coin(bias):\n     return random.random() <= bias\n def make_grap",https://github.com/bitcoin/bitcoin/pull/15759#issuecomment-501043818,501043818,
JeremyRubin,2019-06-18T04:32:55Z,"The earlier versions have some issues with the scipy connected_components API (their documentation of the definition of 'weak' connected was incorrect, since been patched)\n\nAfter some back and forth offline with @sdaftuar, we're on the same page that the below simulation should be an accurate model for the scenario. Suhas and I have spot checked it (with 100 samples) for a few of the k, p, N=1",https://github.com/bitcoin/bitcoin/pull/15759#issuecomment-502942775,502942775,
JeremyRubin,2019-06-18T05:11:40Z,"I ran the sim with 16 samples per param group. With a small sample size, there's some variance/loss of precision, but it seems in line. results below:\n\n```\nk = 2, p = 0%, 100%\nk = 2, p = 5%, 0%\nk = 4, p = 0%, 100%\nk = 4, p = 5%, 100%\nk = 4, p = 10%, 100%\nk = 4, p = 15%, 93%\nk = 4, p = 20%, 37%\nk = 4, p = 25%, 37%\nk = 4, p = 30%, 6%\nk = 4, p = 35%, 0%\nk = 6, p = 0%, 100%\",https://github.com/bitcoin/bitcoin/pull/15759#issuecomment-502949672,502949672,
sdaftuar,2019-07-05T16:52:57Z,I believe there is a bug in this PR relating to address relay -- I will investigate further and update.,https://github.com/bitcoin/bitcoin/pull/15759#issuecomment-508814752,508814752,
sdaftuar,2019-07-05T20:37:28Z,Pushed a fixup for an address relay issue I spotted (to be squashed).,https://github.com/bitcoin/bitcoin/pull/15759#issuecomment-508857493,508857493,
jamesob,2019-07-08T19:02:32Z,"Hit a potential deadlock on this branch during IBD close to tip: \n\n```\n2019-07-08T18:58:46Z UpdateTip: new best=0000000000000000001ec53a5934fa44779d8ab375605cc80fc1f2eb96c76ce8 height=5806\n89 version=0x20000000 log2_work=90.738975 tx=424259718 date='2019-06-14T12:56:31Z' progress=0.982123 cache=214.6MiB(1\n639768txo)\n...\n2019-07-08T18:58:58Z sending getdata (37 bytes) peer=9\n2019-07",https://github.com/bitcoin/bitcoin/pull/15759#issuecomment-509351372,509351372,
sdaftuar,2019-07-09T15:50:01Z,"@jamesob Thanks for catching that!  The addr relay refactor introduced that ""potential deadlock""; while it's straightforward to fix, I decided to just drop that refactor since I ended up not using it anyway.\n\nI've updated the PR accordingly (the previous version of this branch is [15759.1](https://github.com/sdaftuar/bitcoin/commits/15759.1)).",https://github.com/bitcoin/bitcoin/pull/15759#issuecomment-509699243,509699243,
naumenkogs,2019-07-11T17:57:00Z,"I measured (see [source code](https://github.com/naumenkogs/bitcoin_network_analysis/tree/master/propagation_cmpct_blocks)) how extra blocksonly links affect [compact blocks relay](https://github.com/bitcoin/bips/blob/master/bip-0152.mediawiki) latency.  \nLow block relay latency is important to reduce orphan rates and, thus, increase the security of the network.\nJust to remind, compact block r",https://github.com/bitcoin/bitcoin/pull/15759#issuecomment-510589579,510589579,
jamesob,2019-07-23T18:41:43Z,"ACK https://github.com/bitcoin/bitcoin/pull/15759/commits/c73ff2cfa5e5532f908bfdd454efc02e4356f37a (modulo squashing the last commit into c987790152)\n\nI'm excited for this change. Adding blocks-only connections gives us a lot of resiliency for very little added complexity, and opens the door to safely doing more sophisticated peer management of our regular outbounds. Hopefully we can soon bump",https://github.com/bitcoin/bitcoin/pull/15759#issuecomment-514333505,514333505,
sdaftuar,2019-07-24T13:52:31Z,"@jamesob Thanks for reviewing, I've gone ahead and squashed the fixup commit into place.",https://github.com/bitcoin/bitcoin/pull/15759#issuecomment-514641446,514641446,
jamesob,2019-07-24T21:57:03Z,reACK https://github.com/bitcoin/bitcoin/pull/15759/commits/085f5b2805f5a202f7d553f9914c94c634c8092c based on [an identical comparison](https://github.com/bitcoin/bitcoin/compare/c73ff2cfa5e5532f908bfdd454efc02e4356f37a..085f5b2805f5a202f7d553f9914c94c634c8092c),https://github.com/bitcoin/bitcoin/pull/15759#issuecomment-514814980,514814980,
sdaftuar,2019-08-01T16:42:47Z,Updated this PR to incorporate feedback from @sipa / @dongcarl.  Previous version is [15759.2](https://github.com/sdaftuar/bitcoin/commits/15759.2),https://github.com/bitcoin/bitcoin/pull/15759#issuecomment-517366803,517366803,
naumenkogs,2019-08-04T03:57:22Z,"> what's the state of art of network topology inference based only on blocks\n\nNot much. There is [map-z](https://arxiv.org/pdf/1907.09755.pdf) paper which infers topology in Zcash, but it's a lot simplier than Bitcoin, because they have smaller network, blocks are processed longer, a significant portion of nodes produce blocks, etc. I'm trying to see how easy it would be to use something simil",https://github.com/bitcoin/bitcoin/pull/15759#issuecomment-517971718,517971718,
sipa,2019-08-04T04:30:55Z,"Ping @sr-gi, perhaps you know of ways for topology inference based on block relay?",https://github.com/bitcoin/bitcoin/pull/15759#issuecomment-517972854,517972854,
sr-gi,2019-08-06T10:19:32Z,"> Ping @sr-gi, perhaps you know of ways for topology inference based on block relay?\n\nNot really. We focused on tx relay since the difference in handling normal / orphan transaction could leak useful information. That is not the case for blocks AFAIK. I've had no chance to check map-z yet, but I'll do and see if I can think of something. ",https://github.com/bitcoin/bitcoin/pull/15759#issuecomment-518608887,518608887,
sdaftuar,2019-08-13T14:11:20Z,Updated to address some comment nits from @MarcoFalke and @ariard.,https://github.com/bitcoin/bitcoin/pull/15759#issuecomment-520851451,520851451,
MarcoFalke,2019-08-13T14:19:41Z,"re-ACK 08478f1409c65335a28dcf796f8e87a43d1b7040 (only change is adding a commit to clarify documentation)\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nre-ACK 08478f1409c65335a28dcf796f8e87a43d1b7040 (only change is adding a commit to clarify documentation)\n-----BEGIN PGP SIGNATURE-----\n\niQGzBAE",https://github.com/bitcoin/bitcoin/pull/15759#issuecomment-520854980,520854980,
MarcoFalke,2019-08-13T17:50:54Z,"I think there are a bunch of ""doc-level"" cleanups that should come afterwards. Like release notes, rpc changes, functional tests, whatnot... I think it is best to leave them for later.",https://github.com/bitcoin/bitcoin/pull/15759#issuecomment-520937901,520937901,
sdaftuar,2019-08-13T19:48:13Z,"I think it would be great to know whether this meaningfully improves our defenses against topology inference, but it also seems like something we will only know definitively if someone publishes a successful attack (I doubt we'll get any proofs anytime soon that no attacks are possible!).\n\nSo while I think it's good to give reviewers some time to see if anyone can come up with an attack agains",https://github.com/bitcoin/bitcoin/pull/15759#issuecomment-520981648,520981648,
jamesob,2019-08-13T20:26:55Z,"> If the resource usage for these additional connections is sufficiently small (as I believe it would be, in this patch) I think we would not regret it.\n\nI agree with this. Phrased differently, blocks-only connections offer a strict subset of the information that standard connections do. Given that, I don't see how these two additional connections could enable any new attacks, since these addi",https://github.com/bitcoin/bitcoin/pull/15759#issuecomment-520995708,520995708,
instagibbs,2019-08-13T20:50:50Z,"> I don't see how these two additional connections could enable any new attacks, since these additional links don't offer any additional information to would-be attackers.\n\nGiven correct implementation, of course!",https://github.com/bitcoin/bitcoin/pull/15759#issuecomment-521003889,521003889,
sdaftuar,2019-08-14T18:29:14Z,"I pushed changes to address feedback from @thebluematt and @jamesob so that we now connect to full relay peers before blocks-only ones.\n\nI also improved the logging of new outbound connections so that we also output whether it's a blocksonly peer or feeler peer.\n\n",https://github.com/bitcoin/bitcoin/pull/15759#issuecomment-521363669,521363669,
naumenkogs,2019-08-15T14:53:56Z,utACK 6962113,https://github.com/bitcoin/bitcoin/pull/15759#issuecomment-521670402,521670402,
sdaftuar,2019-08-20T12:35:14Z,"@ajtowns \n\n> This doesn't actually seem to work right? I'm seeing:\n> \n> ```\n> 2019-08-20T12:06:01Z receive version message: /Satoshi:0.18.0/: version 70015, b\n> locks=590955, us=XXX, peer=11\n> 2019-08-20T12:06:01Z New outbound peer connected: version: 70015, blocks=590955, blocks-only=true, feeler=false, peer=11\n> \n> 2019-08-20T12:06:04Z got inv: tx 9c42701fa9e819f9a858c0805058de",https://github.com/bitcoin/bitcoin/pull/15759#issuecomment-522993706,522993706,
ajtowns,2019-08-22T03:37:42Z,"Ignoring the inv's (so we don't send getdata and don't receive the tx back) is already a bandwidth saving, and prevents revealing the topology, so maybe just maintain that behaviour for this PR, rather than dropping the connection?\n\nI think dropping the connection does make sense though. Seems more likely that the observed misbehaviour in the wild is just due to spy nodes not having implemente",https://github.com/bitcoin/bitcoin/pull/15759#issuecomment-523733587,523733587,
ajtowns,2019-08-29T01:05:29Z,"> Added a commit where we go ahead and disconnect such peers\n\nNeed to update p2p_blocksonly test to match this behaviour change I think",https://github.com/bitcoin/bitcoin/pull/15759#issuecomment-525979364,525979364,
sdaftuar,2019-08-29T18:45:30Z,Fixed the `p2p_blocksonly.py` test to match the new behavior.,https://github.com/bitcoin/bitcoin/pull/15759#issuecomment-526312873,526312873,
ajtowns,2019-09-02T05:59:25Z,">     * I don't fully understand the reasoning behind the _Don't relay addr messages to block-relay-only peers_.\n\nI think I get this now.\n\nI think the logic is that tx relay will allow an attacker to identify our tx relay peers, attack them, and eventually control all our tx relay connections; but if that happens we'll still relay blocks via our block relay connections. What we don't want ",https://github.com/bitcoin/bitcoin/pull/15759#issuecomment-527012757,527012757,
sdaftuar,2019-09-03T13:59:04Z,"> I think this might degrade addr connectivity a little bit though -- RelayAddress won't choose your block-relay outbound connection, but it might choose an inbound peer that thinks of you as a block-relay connection, so will drop your messages into the void. If this change is widely deployed, this will be 20% of your inbound connections (or more if we eventually go from 8+2 to 8+8 or similar), so",https://github.com/bitcoin/bitcoin/pull/15759#issuecomment-527470881,527470881,
sipa,2019-09-06T22:07:06Z,ACK 0ba08020c9791f7caf5986ad6490c16a2b66cd83,https://github.com/bitcoin/bitcoin/pull/15759#issuecomment-529030268,529030268,
ajtowns,2019-09-07T09:21:55Z,"ACK 0ba08020c9791f7caf5986ad6490c16a2b66cd83 -- code review, ran tests. ran it on mainnet for a couple of days with MAX_BLOCKS_ONLY_CONNECTIONS upped from 2 to 16 and didn't observe any unexpected behaviour: it disconnected a couple of peers that tried sending inv's, and it successfully did compact block relay with some block relay peers.",https://github.com/bitcoin/bitcoin/pull/15759#issuecomment-529090355,529090355,
MarcoFalke,2019-10-04T14:21:44Z,Still needs release notes at https://github.com/bitcoin-core/bitcoin-devwiki/wiki/0.19.0-Release-Notes-Draft#p2p-changes,https://github.com/bitcoin/bitcoin/pull/15759#issuecomment-538418009,538418009,
MarcoFalke,2019-10-04T14:22:18Z,Maybe just copy-paste the section from the optech newsletter?,https://github.com/bitcoin/bitcoin/pull/15759#issuecomment-538418222,538418222,
sdaftuar,2019-10-04T14:37:08Z,@MarcoFalke I added a little text to that wiki page referencing this PR.,https://github.com/bitcoin/bitcoin/pull/15759#issuecomment-538424221,538424221,
promag,2019-05-18T09:01:18Z,"https://github.com/bitcoin/bitcoin/pull/15759/commits/c36939ca2ea636dce8047065d88c2e70bd418405\n\nMove initialization here and drop constructor:\n```cpp\nCRollingBloomFilter addrKnown GUARDED_BY(cs_addrsend){5000, 0.001};\n```\n",https://github.com/bitcoin/bitcoin/pull/15759#discussion_r285334943,285334943,src/net.h
promag,2019-05-18T09:04:33Z,"https://github.com/bitcoin/bitcoin/pull/15759/commits/c36939ca2ea636dce8047065d88c2e70bd418405\n\nCould explain why the new mutex? This commit isn't just refactor.",https://github.com/bitcoin/bitcoin/pull/15759#discussion_r285335020,285335020,src/net.h
promag,2019-05-18T09:06:31Z,"https://github.com/bitcoin/bitcoin/pull/15759/commits/c36939ca2ea636dce8047065d88c2e70bd418405\n\nnit, coult early return before the above lock:\n```cpp\nif (!_addr.IsValid()) return;\nLOCK(m_addr_relay.cs_addrsend);\nif (!m_addr_relay.addrKnown.contains(_addr.GetKey())) {\n```",https://github.com/bitcoin/bitcoin/pull/15759#discussion_r285335094,285335094,src/net.h
promag,2019-05-18T09:07:59Z,"https://github.com/bitcoin/bitcoin/pull/15759/commits/c36939ca2ea636dce8047065d88c2e70bd418405\n\nnit, could add `{ }`",https://github.com/bitcoin/bitcoin/pull/15759#discussion_r285335134,285335134,src/net_processing.cpp
promag,2019-05-18T09:15:07Z,"https://github.com/bitcoin/bitcoin/pull/15759/commits/5e6e12ef04b640d32d0341a3a1874fde46b0f95e\n\nInitialize here\n```cpp\nCRollingBloomFilter filterInventoryKnown GUARDED_BY(cs_tx_inventory){50000, 0.000001};\n```\nAnd can drop `.reset()` call, `CRollingBloomFilter` constructor already calls it.",https://github.com/bitcoin/bitcoin/pull/15759#discussion_r285335336,285335336,src/net.h
Empact,2019-05-27T21:33:09Z,nit: `m_addr_relay_peer` could be private,https://github.com/bitcoin/bitcoin/pull/15759#discussion_r287884765,287884765,src/net.h
Empact,2019-05-27T21:44:52Z,"```\nnet.cpp:2643:9: error: ‘fRelayTxes’ was not declared in this scope\n     if (fRelayTxes && !blocks_only) {\n         ^~~~~~~~~~\n```\nhttps://travis-ci.org/bitcoin/bitcoin/jobs/533781128",https://github.com/bitcoin/bitcoin/pull/15759#discussion_r287885999,287885999,src/net.cpp
dongcarl,2019-05-28T18:22:20Z,"> And can drop `.reset()` call, `CRollingBloomFilter` constructor already calls it.\n\nPermalink for convenience: https://github.com/bitcoin/bitcoin/blob/fdc951ad040a9117bc79f12086ce874b4c2aa55a/src/bloom.cpp#L206-L231",https://github.com/bitcoin/bitcoin/pull/15759#discussion_r288240263,288240263,src/net.h
dongcarl,2019-05-28T18:30:51Z,Nit: Would it be appropriate to rename this to `cs_block_inventory` for clarity?,https://github.com/bitcoin/bitcoin/pull/15759#discussion_r288243856,288243856,src/net.h
dongcarl,2019-05-28T19:11:45Z,"Perhaps this is a C++ quirk I'm not aware of, but I think that `CNode`'s  `fRelayTxes` was moved into `TxRelay` here: https://github.com/bitcoin/bitcoin/pull/15759/commits/5e6e12ef04b640d32d0341a3a1874fde46b0f95e#diff-1a8b9d1ad0a6fda5e751286c73102fc2R712. Perhaps this commit can be dropped as it seems like `blocks_only` does the same thing in the next commit: https://github.com/bitcoin/bitcoin/pul",https://github.com/bitcoin/bitcoin/pull/15759#discussion_r288259621,288259621,src/net.cpp
dongcarl,2019-05-28T19:40:44Z,"Trying to understand the logic here...\n\nAccording to the commit description, `bitcoind` will make 2 additional outbound connections, but with this logic, if `connOptions.nMaxOutbound <= 6` then there will be no additional outbound connections: https://www.wolframalpha.com/input/?i=min(2,+max(x-6,+0))\n\nFrom elsewhere in this commit, it seems like we consider the accounting for `nMaxOutbound",https://github.com/bitcoin/bitcoin/pull/15759#discussion_r288270228,288270228,src/init.cpp
dongcarl,2019-05-28T20:11:22Z,"Nit: Perhaps we should add documentation that `m_tx_relay == nullptr` means that the `CNode` is `blocks_only`, and `!pnode->fInbound && (pnode->m_tx_relay == nullptr)` is how we check if a `CNode` is outbound-blocks-only or not.",https://github.com/bitcoin/bitcoin/pull/15759#discussion_r288281529,288281529,src/net.h
dongcarl,2019-05-28T20:20:08Z,"Nit: Perhaps this is a good opportunity to rename `nMaxOutbound` to something more precise... As it's easy to think that:\n\n1. `nMaxOutbound` bounds `nOutbound` in `CConnman::ThreadOpenConnections(const std::vector<std::string>)`\n1.  `nMaxOutbound` includes `nMaxOutboundBlocksOnly` added below\n\nBoth of which are untrue as far as I can tell.",https://github.com/bitcoin/bitcoin/pull/15759#discussion_r288284902,288284902,src/init.cpp
EthanHeilman,2019-06-03T20:14:45Z,"This `- 6` is a little confusing and requires that you look up the default value of `connOptions.nMaxOutbound` to understand what this is doing. Also echoing @dongcarl comments that this doesn't work well when `connOptions.nMaxOutbound <= 6`.\n\n\nGiven that this fails for particular values and you only want 2 block only outbound why not change this to:\n\n```\nconnOptions.nMaxOutboundBlocks",https://github.com/bitcoin/bitcoin/pull/15759#discussion_r290017411,290017411,src/init.cpp
sdaftuar,2019-06-05T09:37:08Z,"I think one issue is that I wasn't sure how to do the `GUARDED_BY` annotations with a variable that didn't live in the class.  But also I thought it might make sense to explicitly lock things in this class with its own mutex, as that seems like a clearer design for making this code modular. \n\nThe reason I included this refactor commit at all was in preparation for being able to optionally not ",https://github.com/bitcoin/bitcoin/pull/15759#discussion_r290656339,290656339,src/net.h
sdaftuar,2019-06-05T13:37:37Z,"Perhaps the accounting logic should be improved to be clearer, but I believe the behavior here is at least (roughly) correct. The way this works is that if a user sets `-maxconnections` very low, that will be a hard limit on the number of inbound, outbound and outbound-blocks-only connections.  Before this PR, it would take the user setting their max connections value to less than 8 to change the ",https://github.com/bitcoin/bitcoin/pull/15759#discussion_r290741464,290741464,src/init.cpp
sdaftuar,2019-06-05T15:09:07Z,"Thanks, fixed.",https://github.com/bitcoin/bitcoin/pull/15759#discussion_r290790171,290790171,src/net.h
sdaftuar,2019-06-05T15:09:42Z,Done.,https://github.com/bitcoin/bitcoin/pull/15759#discussion_r290790487,290790487,src/net.h
sdaftuar,2019-06-05T15:09:59Z,Done.,https://github.com/bitcoin/bitcoin/pull/15759#discussion_r290790630,290790630,src/net_processing.cpp
sdaftuar,2019-06-05T15:10:45Z,"Thanks, done.",https://github.com/bitcoin/bitcoin/pull/15759#discussion_r290791077,290791077,src/net.h
sdaftuar,2019-06-05T15:10:53Z,"Meh, going to leave this as-is.",https://github.com/bitcoin/bitcoin/pull/15759#discussion_r290791177,290791177,src/net.h
sdaftuar,2019-06-05T15:10:59Z,"Thanks, fixed now.",https://github.com/bitcoin/bitcoin/pull/15759#discussion_r290791242,290791242,src/net.cpp
sdaftuar,2019-06-05T15:11:15Z,"I suppose but I'm going to leave this for now, this diff is already getting big.",https://github.com/bitcoin/bitcoin/pull/15759#discussion_r290791378,290791378,src/net.h
sdaftuar,2019-06-05T15:13:49Z,This was just a mistake when I rebased after the global `fRelayTxes` got renamed.  Fixed now -- I actually ended up dropping the commit where I made `-blocksonly` mode run without the transaction relay data structures.,https://github.com/bitcoin/bitcoin/pull/15759#discussion_r290792809,290792809,src/net.cpp
sdaftuar,2019-06-05T15:15:02Z,Added a comment explaining the `== nullptr`.,https://github.com/bitcoin/bitcoin/pull/15759#discussion_r290793432,290793432,src/net.h
promag,2019-06-11T13:55:49Z,"Thanks for the explanation, I'll review again with that in mind.",https://github.com/bitcoin/bitcoin/pull/15759#discussion_r292468475,292468475,src/net.h
promag,2019-06-11T22:34:52Z,"bacfdab\n\nnit, could fix indentation and keep braces?",https://github.com/bitcoin/bitcoin/pull/15759#discussion_r292686307,292686307,src/net_processing.cpp
jamesob,2019-07-09T18:29:25Z,"This logic as written will mean the first two connections we open are blocks-only... would this be a problem if for some reason we only had two reachable peers? I.e. would it make any sense to delay creating blocks-only connections until we've already made, say, 2 regular connections? Probably not, but figured it was worth checking.",https://github.com/bitcoin/bitcoin/pull/15759#discussion_r301732188,301732188,src/net.cpp
TheBlueMatt,2019-07-10T19:58:54Z,"I think just do std::min(MAX_BLOCKS_ONLY_CONNECTIONS, std::max(connOptions.nMaxConnections - MAX_OUTBOUND_CONNECTIONS, 0)).",https://github.com/bitcoin/bitcoin/pull/15759#discussion_r302245755,302245755,src/init.cpp
TheBlueMatt,2019-07-10T20:06:50Z,"Can you move this into CNodeState? They never belonged in CNode and the only reason they're still there is because its not been worth doing a free-standing PR to do it, but since you're moving them, might as well merge it all with TxDownloadState anyway.",https://github.com/bitcoin/bitcoin/pull/15759#discussion_r302248707,302248707,src/net.h
sdaftuar,2019-07-12T12:54:51Z,"That turns out to be more invasive than I realized when we discussed offline -- fRelayTxes and the bloom filter are used in net.cpp, particularly for the inbound peer eviction logic, so refactoring to allow that to live in net_processing would be more complicated than I think makes sense for this PR.",https://github.com/bitcoin/bitcoin/pull/15759#discussion_r302968525,302968525,src/net.h
sdaftuar,2019-07-12T12:58:03Z,"My intuition is that we have bigger problems than not receiving transactions if we're trying to connect to 8 peers but can only make 2 connections, so this isn't a big deal -- happy to reconsider if others disagree.",https://github.com/bitcoin/bitcoin/pull/15759#discussion_r302969781,302969781,src/net.cpp
sdaftuar,2019-07-12T14:36:57Z,"@TheBlueMatt  I pushed a commit that changes the behavior so that the first 8 outbounds are reserved to be regular full-relay peers, and only then do we allocate up to 2 blocksonly peers.\n",https://github.com/bitcoin/bitcoin/pull/15759#discussion_r303010972,303010972,src/init.cpp
sipa,2019-07-29T23:35:04Z,Bumping this. It seems the code changes would be slightly simpler if `nMaxOutbound` referred to the total of all outbound connections (including the blocksonly ones). That would also make it easier to reason whether no places where `nMaxOutbound` needed to be replaced with `nMaxOutbound + nMaxOutboundBlocksOnly` were forgotten.,https://github.com/bitcoin/bitcoin/pull/15759#discussion_r308479555,308479555,src/init.cpp
sipa,2019-07-29T23:36:51Z,Nit: this initialization of the `TxRelay::pfilter` field probably belongs better in the `TxRelay` constructor.,https://github.com/bitcoin/bitcoin/pull/15759#discussion_r308479919,308479919,src/net.cpp
sdaftuar,2019-07-31T15:44:32Z,Your point appears to be underscored by the fact that I did overlook at least one place where nMaxOutbound needed to be replaced by the sum.  I'll try to improve this as you both suggest.,https://github.com/bitcoin/bitcoin/pull/15759#discussion_r309294845,309294845,src/init.cpp
sdaftuar,2019-08-01T16:08:26Z,Fixed now.,https://github.com/bitcoin/bitcoin/pull/15759#discussion_r309779461,309779461,src/init.cpp
sdaftuar,2019-08-01T16:08:41Z,Done.,https://github.com/bitcoin/bitcoin/pull/15759#discussion_r309779570,309779570,src/net.cpp
ariard,2019-08-04T00:25:23Z,nit: could take opportunity to comment all members,https://github.com/bitcoin/bitcoin/pull/15759#discussion_r310366284,310366284,src/net.h
ariard,2019-08-04T00:28:25Z,Isn't a boolean a better practice than a nullptr ? Do we prefer to have a node crashing because of non-initialized acces or a topology leak because of a boolean in wrong state ?,https://github.com/bitcoin/bitcoin/pull/15759#discussion_r310366329,310366329,src/net.h
ariard,2019-08-04T00:30:09Z,"nit: comment is a bit misleading and without context lets suggest we have already transaction-only peers, isn't full-relay peers a better wording ?",https://github.com/bitcoin/bitcoin/pull/15759#discussion_r310366358,310366358,src/net_processing.cpp
MarcoFalke,2019-08-12T14:12:25Z,note to other reviewers: It is fine to not take a lock here because `timeLastMempoolReq` is atomic,https://github.com/bitcoin/bitcoin/pull/15759#discussion_r312945124,312945124,src/net_processing.cpp
MarcoFalke,2019-08-12T14:30:42Z,"> @ariard Isn't a boolean a better practice than a nullptr ? Do we prefer to have a node crashing because of non-initialized acces or a topology leak because of a boolean in wrong state ?\n\nI think the goal here is to not to construct the tx relay object if we don't want to use it. With a boolean that wouldn't be possible. However, it is possible with a pointer or an optional.",https://github.com/bitcoin/bitcoin/pull/15759#discussion_r312954868,312954868,src/net.h
MarcoFalke,2019-08-12T15:11:54Z,"Would be nice to add a comment here to explain that this will effectively treat MSG_TX and MSG_WITNESS_TX as ""unknown"" types, thus blocking the queue, thus starving this peer completely and making it a zombie.",https://github.com/bitcoin/bitcoin/pull/15759#discussion_r312976322,312976322,src/net_processing.cpp
sdaftuar,2019-08-13T14:09:59Z,"Leaving this alone for now, since I think these are relatively self-commented anyway, but also when I looked at this again it seems like another improvement here would be to conform all these variables to the style guide as well, which I'd prefer to not do in this PR at this point.",https://github.com/bitcoin/bitcoin/pull/15759#discussion_r313417866,313417866,src/net.h
sdaftuar,2019-08-13T14:10:15Z,Addressed in latest commit.,https://github.com/bitcoin/bitcoin/pull/15759#discussion_r313418010,313418010,src/net_processing.cpp
sdaftuar,2019-08-13T14:10:27Z,Addressed in latest commit.,https://github.com/bitcoin/bitcoin/pull/15759#discussion_r313418105,313418105,src/net_processing.cpp
TheBlueMatt,2019-08-13T20:06:30Z,"Hmm, should you add an else branch here and disconnect them if we opened a blocksonly connection to some peer that asked for filtering?",https://github.com/bitcoin/bitcoin/pull/15759#discussion_r313588220,313588220,src/net_processing.cpp
TheBlueMatt,2019-08-13T20:30:46Z,"I mean I dont think its all that critical, but I do think I'd prefer if it were non-blocks-only first. Specifically, if you have a rather-stale addrman, you'd like to use your first few peers to exchange addresses so speed up getting further connections (instead of being stuck spinning).",https://github.com/bitcoin/bitcoin/pull/15759#discussion_r313598108,313598108,src/net.cpp
ariard,2019-08-14T18:15:28Z,"Sorry for the noise on this one, I thought about it after the fact, maybe the ideal would be to have special classes CBlockNode/CTxNode but would need different code paths so that's for future works.",https://github.com/bitcoin/bitcoin/pull/15759#discussion_r314014747,314014747,src/net.h
sdaftuar,2019-08-14T18:28:02Z,Fixed in the latest version.,https://github.com/bitcoin/bitcoin/pull/15759#discussion_r314020286,314020286,src/net.cpp
jamesob,2019-08-15T15:41:46Z,"(https://github.com/bitcoin/bitcoin/pull/15759/commits/4e6a635f4ea3c1a6a026877e561e7671ac00b449)\n\nOnly if you have to rebase for other reasons: might wanna use the current naming convention for these. ",https://github.com/bitcoin/bitcoin/pull/15759#discussion_r314371544,314371544,src/net.cpp
jamesob,2019-08-15T15:59:39Z,"These long lines are tough to review in Github.\n\n![Selection_132](https://user-images.githubusercontent.com/73197/63108092-17dc9180-bf54-11e9-8b67-d28706c096c6.png)\n(fullscreen)\n\nObviously not worth addressing unless revisiting for other reasons.",https://github.com/bitcoin/bitcoin/pull/15759#discussion_r314380402,314380402,src/net.cpp
jnewbery,2019-08-16T16:02:16Z,I believe we'll stop processing _all_ messages in this case (since `ProcessMessages()` will exit early if the `vRecvGetData` vector is non-empty after `ProcessGetData()` was called),https://github.com/bitcoin/bitcoin/pull/15759#discussion_r314786257,314786257,src/net_processing.cpp
jnewbery,2019-08-16T16:56:02Z,micronit: change this to early-exit like in the `NetMsgType::FILTERCLEAR` block (otherwise there will be a meaningless log when a FEEFILTER is received from a blocks-only peer).,https://github.com/bitcoin/bitcoin/pull/15759#discussion_r314805306,314805306,src/net_processing.cpp
jnewbery,2019-08-16T18:18:27Z,I agree. It'd also be nice to comment the `nullptr`/`false` args.,https://github.com/bitcoin/bitcoin/pull/15759#discussion_r314835905,314835905,src/net.cpp
jnewbery,2019-08-16T19:28:35Z,"I don't think this branch is necessary (or can ever be hit). `IsAddrRelayPeer()` can only be false for `blocks_only` peers, which are outbound connections, and so will be caught by the `if (!pfrom->fInbound)` branch above.\n\nThere's no harm in this being here, but I think it's dead code.",https://github.com/bitcoin/bitcoin/pull/15759#discussion_r314860750,314860750,src/net_processing.cpp
ajtowns,2019-08-20T06:49:54Z,"As far as I can see, this prevents blocks only connections from being disconnected during IBD if their header set has less than `nMinimumChainWork` (in `net_processing:ProcessHeadersMessage()`). It also prevents blocks only nodes from getting evicted in `PeerLogicValidation::ConsiderEviction()` if they're not keeping up with the blocks we see. Not sure that makes sense?",https://github.com/bitcoin/bitcoin/pull/15759#discussion_r315529341,315529341,src/net_processing.cpp
ajtowns,2019-08-20T07:38:07Z,"I think it makes sense to keep this as belt-and-suspenders -- it's not that clear that `fInbound` will always be false whenever `m_addr_relay_peer` is false. Might make sense to have this test before the `!fInbound` test though, so that it is at least exercised?",https://github.com/bitcoin/bitcoin/pull/15759#discussion_r315545544,315545544,src/net_processing.cpp
ajtowns,2019-08-20T09:17:11Z,"I don't think `pfilter` can ever be null, so most of the `if (...->pfilter)` tests seem redundant. It's only ever changed by either: `pfilter.reset(new CBloomFilter(filter))` or `pfilter.reset(new CBloomFilter())`, which I think could be simplified to `*pfilter = filter` and `*pfilter = CBloomFilter()`, or, at that point, just having a CBloomFilter as a member directly.",https://github.com/bitcoin/bitcoin/pull/15759#discussion_r315587687,315587687,src/net.h
ajtowns,2019-08-20T09:21:26Z,"I think this should be both `PT_GUARDED_BY(cs_filter)` and `GUARDED_BY(cs_filter)` -- you shouldn't be (and aren't) resetting the pointer without holding the lock, since that would destroy the underlying data that some other thread might have held the lock and be accessing it.",https://github.com/bitcoin/bitcoin/pull/15759#discussion_r315589541,315589541,src/net.h
ajtowns,2019-08-20T09:24:41Z,"I could see `bool IsBlocksOnly() const { return !m_tx_relay; }` being a bit easier to follow, but otherwise thing the way it is is fine. `unique_ptr` saves memory compared to `boost::optional` so seems the right choice between those two.",https://github.com/bitcoin/bitcoin/pull/15759#discussion_r315590970,315590970,src/net.h
ajtowns,2019-08-20T10:05:15Z,"Would be nice to have the same behaviour for all the invalid-on-blocksonly-connections messages; whether ignoring it, logging it, or an immediate disconnect...",https://github.com/bitcoin/bitcoin/pull/15759#discussion_r315608535,315608535,src/net_processing.cpp
sdaftuar,2019-08-20T12:58:57Z,"Yeah this was the question I raised above -- we currently protect 4 of our outbound peers from this logic anyway.  So this PR changes that to 6 and always includes these blocks-only peers.  Protecting some peers at all from this logic is just belt-and-suspenders prevention of some kind of cascading failure, so it's not clear to me how to think about changing the logic, whether I should include the",https://github.com/bitcoin/bitcoin/pull/15759#discussion_r315673131,315673131,src/net_processing.cpp
sdaftuar,2019-08-20T13:01:03Z,"I concluded this as well, but figured I'd save that simplification for a later PR to avoid complicating the reasoning here.",https://github.com/bitcoin/bitcoin/pull/15759#discussion_r315674163,315674163,src/net.h
jnewbery,2019-08-21T19:22:20Z,"Seems reasonable. Perhaps also add a comment explaining that all blocks_only peers are outbound, so this check is currently redundant.",https://github.com/bitcoin/bitcoin/pull/15759#discussion_r316360827,316360827,src/net_processing.cpp
ajtowns,2019-08-22T04:27:16Z,"> Yeah this was the question I raised above\n\n([Link](https://github.com/bitcoin/bitcoin/pull/15759#issuecomment-500999863) for anyone playing along at home)\n\nHmm, `m_protect` only applies to `ConsiderEviction` not the `nMinimumChainWork` check, if I'm reading this right, so this makes blocks only peers more protected from eviction than the normal protected outbound peers?\n\nMaybe adding",https://github.com/bitcoin/bitcoin/pull/15759#discussion_r316492044,316492044,src/net_processing.cpp
jkczyz,2019-08-27T23:28:15Z,Can the constructor's initializer list be used here for member initialization?,https://github.com/bitcoin/bitcoin/pull/15759#discussion_r318337804,318337804,src/net.h
jkczyz,2019-08-28T00:03:41Z,"Likewise, can this be initialized in the above initializer list? It's unclear to me why this and the above members are not initialized there like the other members.",https://github.com/bitcoin/bitcoin/pull/15759#discussion_r318345109,318345109,src/net.cpp
jkczyz,2019-08-28T00:12:24Z,Consider naming `peer_has_bloom_filter` or something similarly readable corresponding to the member `fBloomFilter`.,https://github.com/bitcoin/bitcoin/pull/15759#discussion_r318346641,318346641,src/net.cpp
jkczyz,2019-08-28T15:50:12Z,Agreed here regarding `IsBlocksOnly`. Would also make future updates simpler given the number of times the check is performed.,https://github.com/bitcoin/bitcoin/pull/15759#discussion_r318658832,318658832,src/net.h
jkczyz,2019-08-28T16:01:40Z,"This may be a sign that the interface for `OpenNetworkConnection` needs to be rethought, given the way booleans are piped through different functions. Though this is probably outside the scope of the PR.",https://github.com/bitcoin/bitcoin/pull/15759#discussion_r318664698,318664698,src/net.cpp
sdaftuar,2019-08-28T20:46:06Z,"Seems like a style preference -- I don't see any harm the way I've written it, so will leave as-is.",https://github.com/bitcoin/bitcoin/pull/15759#discussion_r318784136,318784136,src/net.h
sdaftuar,2019-08-28T20:47:29Z,"This is in preparation for eventually not initializing this, in some cases.  Again I think this is a code-style preference and there's nothing wrong with this (intermediate) commit, so will leave as-is.",https://github.com/bitcoin/bitcoin/pull/15759#discussion_r318784700,318784700,src/net.cpp
sdaftuar,2019-08-28T20:51:10Z,"IMO an explicit nullptr check in the places in the code where we're about to dereference makes more sense than only using an `IsBlocksOnly()` function, where it's less clear to the reader whether a null-dereference could happen.  This happens in a lot of places, so I plan to leave many of the `== nullptr` checks.\n\nThere are a couple places in the code where we logically only care whether the p",https://github.com/bitcoin/bitcoin/pull/15759#discussion_r318786166,318786166,src/net.h
sdaftuar,2019-08-28T21:30:02Z,Done.,https://github.com/bitcoin/bitcoin/pull/15759#discussion_r318801572,318801572,src/net.h
sdaftuar,2019-08-28T21:30:37Z,I think this is better now.,https://github.com/bitcoin/bitcoin/pull/15759#discussion_r318801763,318801763,src/net_processing.cpp
sdaftuar,2019-08-28T21:31:21Z,"Improving this was below my bar for necessary changes with my last rework, so I have not addressed this (and may not).",https://github.com/bitcoin/bitcoin/pull/15759#discussion_r318801988,318801988,src/net_processing.cpp
jkczyz,2019-08-29T15:51:45Z,"FWIW, `pfilter` is initialized first then reset here whereas when using the initializer list syntax it is simply initialized to the value you give it. Using the initializer syntax is considered safer as there is no risk of accessing an uninitialized member. Additionally, it allows you to make members `const` where appropriate.",https://github.com/bitcoin/bitcoin/pull/15759#discussion_r319145866,319145866,src/net.h
ajtowns,2019-09-02T06:12:38Z,"This doesn't match the `fBlocksOnly` test for `::INV` -- if it did it would be:\n\n```\n((!g_relay_txes || pfrom->m_tx_relay == nullptr) && !pfrom->HasPermission(PF_RELAY))\n```\n\nI think the logic here is probably better, though maybe there should be a check to prevent choosing a node for blocks-relay if it would have PF_RELAY perms?",https://github.com/bitcoin/bitcoin/pull/15759#discussion_r319816662,319816662,src/net_processing.cpp
sdaftuar,2019-09-03T14:12:40Z,"I believe it's impossible for an outbound peer to be whitelisted and have PF_RELAY permissions, so these are the same...",https://github.com/bitcoin/bitcoin/pull/15759#discussion_r320294514,320294514,src/net_processing.cpp
ajtowns,2019-09-03T14:23:18Z,"I think you're right; `HasPermission()` checks `m_permissionFlags` and the only way m_permissionFlags is anything but PF_NONE is via `AcceptConnection()`, so inbound only.",https://github.com/bitcoin/bitcoin/pull/15759#discussion_r320300339,320300339,src/net_processing.cpp
TheBlueMatt,2019-09-04T19:39:09Z,"Note that this comment is incomplete, we'll stop processing *all* messages from this peer (including pongs, so we'll eventually disconnect them as well).",https://github.com/bitcoin/bitcoin/pull/15759#discussion_r320939154,320939154,src/net_processing.cpp
jnewbery,2019-09-04T22:25:07Z,I agree that we should update this comment (see https://github.com/bitcoin/bitcoin/pull/15759#discussion_r314786257),https://github.com/bitcoin/bitcoin/pull/15759#discussion_r321001281,321001281,src/net_processing.cpp
jamesob,2019-09-06T20:18:45Z,Way easier to reason about than the first iteration of this change. :+1: ,https://github.com/bitcoin/bitcoin/pull/15759#discussion_r321895128,321895128,src/init.cpp
