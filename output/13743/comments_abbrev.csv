fanquake,2018-07-23T07:31:33Z,"Concept ACK\n\nAfter this `boost::bind` will still be used by server, scheduler and validation (and associated tests). @ken2812221 Is there a particular reason you haven't removed that usage?",https://github.com/bitcoin/bitcoin/pull/13743#issuecomment-406966399,406966399,
practicalswift,2018-07-23T07:53:52Z,"Concept ACK, but please remove `using namespace std::placeholders;`. Reference `_N` using the fully specified `std::placeholders::_N`.\n\nSee developer notes:\n\n> - Don't import anything into the global namespace (`using namespace ...`). Use fully specified types such as `std::string`.",https://github.com/bitcoin/bitcoin/pull/13743#issuecomment-406971647,406971647,
ken2812221,2018-07-23T10:35:02Z,">After this boost::bind will still be used by server, scheduler and validation (and associated tests). \nIs there a particular reason you haven't removed that usage?\n\nThose instances cannot be replaced simply `boost` -> `std`. I'll try to get rid of those.\n\n>please remove `using namespace std::placeholders;`\n\nWill do",https://github.com/bitcoin/bitcoin/pull/13743#issuecomment-407013922,407013922,
MarcoFalke,2018-07-23T11:34:54Z,"I believe it is acceptable to be using `using namespace std::placeholders` here, since the alternative would be extremely verbose.",https://github.com/bitcoin/bitcoin/pull/13743#issuecomment-407027266,407027266,
practicalswift,2018-07-23T11:56:05Z,"@MarcoFalke I'm not sure I agree. The verbosity could help remind us that we really should use lambdas where we're currently using `std::bind` (modulo the few places where that is not technically possible in C++11), no? :-)",https://github.com/bitcoin/bitcoin/pull/13743#issuecomment-407032464,407032464,
ken2812221,2018-07-23T12:17:10Z,"@practicalswift Since @MarcoFalke think that `using namespace std::placeholders;` is acceptable,  I will wait for more comments from other people and decide what to do.",https://github.com/bitcoin/bitcoin/pull/13743#issuecomment-407038059,407038059,
practicalswift,2018-07-23T13:26:34Z,@ken2812221 OK! :-)  Could you try rewriting them as lambdas where appropriate? That would get rid of `std::bind` too :-),https://github.com/bitcoin/bitcoin/pull/13743#issuecomment-407057151,407057151,
ken2812221,2018-07-23T13:49:22Z,@practicalswift Good point! I'll try to use lambda to replace bind,https://github.com/bitcoin/bitcoin/pull/13743#issuecomment-407064199,407064199,
Empact,2018-07-23T17:28:46Z,"How about `using place = namespace std::placeholders;` as an alternative? The calls would be relatively less verbose and would read well, e.g. `std::bind(ThreadSafeMessageBox, this, place::_1, place::_2, place::_3)`. It would avoid polluting the global namespace, and would make the connection more explicit from source to reference.",https://github.com/bitcoin/bitcoin/pull/13743#issuecomment-407137442,407137442,
promag,2018-07-24T00:14:07Z,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/13743#issuecomment-407239200,407239200,
DrahtBot,2018-07-25T15:01:15Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#14464](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14464.html) (refactor: make checkqueue manage the thread",https://github.com/bitcoin/bitcoin/pull/13743#issuecomment-407785803,407785803,
MarcoFalke,2018-07-25T15:07:03Z,Could you sum up the differences between `std::bind` and lambda in the first comment for the convenience of the reviewers? It might not be obvious to everyone why lambdas should be preferred over `std::bind` everywhere.,https://github.com/bitcoin/bitcoin/pull/13743#issuecomment-407787812,407787812,
practicalswift,2018-07-26T10:07:25Z,"@MarcoFalke Stephan T. Lavavej (standard library maintainer Visual C++) sums up the `std::bind` issues/gotchas here: https://www.youtube.com/watch?v=zt7ThwVfap0&t=1721\n\nHis [recommendations](https://www.youtube.com/watch?v=zt7ThwVfap0&t=1940):\n\n> * Avoid using `bind()`\n> * Use lambdas, especially generic lambdas\n> * `bind()`: good idea in 2005, bad idea in 2015\n\nFun quote from the ",https://github.com/bitcoin/bitcoin/pull/13743#issuecomment-408047382,408047382,
theuni,2018-09-26T20:37:54Z,"Please break this up into logical commits for review.\nboost::bind -> std::bind makes sense to me. Concept ACK there for sure.\n\nstd::bind -> lambda seems more like a style/preference change. I prefer lambdas too, but I don't think that justifies the churn here. Maybe when lambdas are more robust and provide a more clear win with c++14/c++17?",https://github.com/bitcoin/bitcoin/pull/13743#issuecomment-424861394,424861394,
fanquake,2018-09-27T06:53:54Z,"Travis linter is failing with:\n```\nRunning script for: fcba334f0d21161354f168a081d95a63b82fa4c5\nALL_FILES=$(git ls-files -- '*.cpp' '*.h')\nfor i in 1 2 3 4 5; do\n    sed -i ""s/ _${i}/ std::placeholders::_${i}/g"" ${ALL_FILES}\ndone\nfatal: ambiguous argument '5': unknown revision or path not in the working tree.\n```",https://github.com/bitcoin/bitcoin/pull/13743#issuecomment-424978971,424978971,
ken2812221,2018-09-27T08:59:44Z,"Update: In this PR, I do ""replace boost::bind to std::bind"" only because there are some disputes about lambda.",https://github.com/bitcoin/bitcoin/pull/13743#issuecomment-425014630,425014630,
practicalswift,2018-09-27T09:11:22Z,@ken2812221 Makes sense! Getting rid of `boost/bind.hpp` is a very welcome first step :-),https://github.com/bitcoin/bitcoin/pull/13743#issuecomment-425018333,425018333,
Empact,2018-09-27T11:38:16Z,"Concept ACK, the callers should include `<functional>`",https://github.com/bitcoin/bitcoin/pull/13743#issuecomment-425058118,425058118,
sipa,2018-10-17T07:56:35Z,"Can this be implemented as a scripted diff? It looks relatively straightforward.\n",https://github.com/bitcoin/bitcoin/pull/13743#issuecomment-430528209,430528209,
ken2812221,2018-10-17T16:02:44Z,@sipa Done. Apparently I can't use `${i}` as the script's variable.,https://github.com/bitcoin/bitcoin/pull/13743#issuecomment-430688035,430688035,
sipa,2018-10-23T02:10:11Z,utACK cb53b825c26af6e628ba88d72b2000e75bedbbc6,https://github.com/bitcoin/bitcoin/pull/13743#issuecomment-432060284,432060284,
ryanofsky,2018-12-04T16:41:23Z,"Can this be merged, or does it need more review? I see review from @theuni was requested in github, but I don't know if it's necessary given the other reviews since this change is pretty straightforward.",https://github.com/bitcoin/bitcoin/pull/13743#issuecomment-444168162,444168162,
fanquake,2018-12-29T04:59:16Z,utACK cb53b82,https://github.com/bitcoin/bitcoin/pull/13743#issuecomment-450465918,450465918,
practicalswift,2018-12-29T10:30:43Z,utACK cb53b825c26af6e628ba88d72b2000e75bedbbc6,https://github.com/bitcoin/bitcoin/pull/13743#issuecomment-450482903,450482903,
practicalswift,2018-07-23T11:24:55Z,Please remove :-),https://github.com/bitcoin/bitcoin/pull/13743#discussion_r204366098,204366098,src/qt/bitcoingui.cpp
practicalswift,2018-07-23T11:25:11Z,Please remove :-),https://github.com/bitcoin/bitcoin/pull/13743#discussion_r204366159,204366159,src/qt/clientmodel.cpp
practicalswift,2018-07-23T11:25:17Z,Please remove :-),https://github.com/bitcoin/bitcoin/pull/13743#discussion_r204366177,204366177,src/qt/splashscreen.cpp
practicalswift,2018-07-23T11:25:22Z,Please remove :-),https://github.com/bitcoin/bitcoin/pull/13743#discussion_r204366206,204366206,src/qt/transactiontablemodel.cpp
practicalswift,2018-07-23T11:25:28Z,Please remove :-),https://github.com/bitcoin/bitcoin/pull/13743#discussion_r204366221,204366221,src/qt/walletmodel.cpp
practicalswift,2018-07-23T11:25:34Z,Please remove :-),https://github.com/bitcoin/bitcoin/pull/13743#discussion_r204366240,204366240,src/torcontrol.cpp
Empact,2018-07-23T17:25:34Z,"nit: can remove, this is now unreferenced",https://github.com/bitcoin/bitcoin/pull/13743#discussion_r204488860,204488860,src/rpc/server.cpp
Empact,2018-07-23T17:31:17Z,nit: Could `std::move` `connections`,https://github.com/bitcoin/bitcoin/pull/13743#discussion_r204490610,204490610,src/validationinterface.cpp
Empact,2018-07-23T17:40:30Z,nit: could extract these as a method on `ValidationInterfaceConnections` where it would be more clear whether the method was comprehensive in its disconnecting.,https://github.com/bitcoin/bitcoin/pull/13743#discussion_r204493660,204493660,src/validationinterface.cpp
Empact,2018-07-23T17:42:32Z,nit: could extract as a method on `ValidationInterfaceConnections`,https://github.com/bitcoin/bitcoin/pull/13743#discussion_r204494295,204494295,src/validationinterface.cpp
MarcoFalke,2018-07-24T00:21:41Z,I believe this will slow down the build significantly. So tend to NACK here.,https://github.com/bitcoin/bitcoin/pull/13743#discussion_r204591896,204591896,src/validationinterface.h
ken2812221,2018-07-24T15:20:22Z,Fixed,https://github.com/bitcoin/bitcoin/pull/13743#discussion_r204799535,204799535,src/validationinterface.h
practicalswift,2018-09-26T05:23:57Z,Make `resume_possible` an unnamed parameter.,https://github.com/bitcoin/bitcoin/pull/13743#discussion_r220429517,220429517,src/qt/clientmodel.cpp
ryanofsky,2018-09-27T15:06:46Z,Could drop this disconnect line (and the whole destructor) by replacing ` boost::signals2::connection` with `boost::signals2::scoped_connection` above.,https://github.com/bitcoin/bitcoin/pull/13743#discussion_r220962167,220962167,src/validation.cpp
ryanofsky,2018-09-27T15:14:08Z,It seems like these two maps would most naturally be `MainSignalsInstance` members. I don't think it is good to arbitrary divide the validationinterface state up between `g_signals->m_internals` and these new global variables (unless there's a specific reason for doing this that I'm not seeing).,https://github.com/bitcoin/bitcoin/pull/13743#discussion_r220964992,220964992,src/validationinterface.cpp
ryanofsky,2018-09-27T15:22:57Z,"I think if you used `scoped_connection` instead of `connection` types you could get rid of this for loop.\n\nAlso, since this for loop is the only thing that appears to iterate over `std::array<9>` objects, it might be a good idea to replace `std::array` with a plain struct if you do eliminate this loop. (I noticed you used a `ValidationInterfaceConnections` struct in a previous version of this ",https://github.com/bitcoin/bitcoin/pull/13743#discussion_r220968470,220968470,src/validationinterface.cpp
ken2812221,2018-10-14T11:11:20Z,I was trying to do this however MainSignalsInstance is not created when `RegisterWithMempoolSignals()` called. So I only move `g_connMainSignals` into a member of `MainSignalsInstance`. Keeping `g_connNotifyEntryRemoved` as a static global variable.,https://github.com/bitcoin/bitcoin/pull/13743#discussion_r224988537,224988537,src/validationinterface.cpp
ken2812221,2018-10-14T11:12:14Z,That idea looks good to me. I'll take it.,https://github.com/bitcoin/bitcoin/pull/13743#discussion_r224988563,224988563,src/validationinterface.cpp
ryanofsky,2018-10-19T17:37:11Z,"Following up on https://github.com/bitcoin/bitcoin/pull/13743#discussion_r224988537, I think it would be good to add a comment saying that this has to a separate global instead of a member of MainSignalsInstance, because RegisterWithMempoolSignals is currently called before RegisterBackgroundSignalScheduler, so MainSignalsInstance hasn't been created yet.\n\nInit code is more messy than it needs",https://github.com/bitcoin/bitcoin/pull/13743#discussion_r226726612,226726612,src/validationinterface.cpp
ken2812221,2018-10-22T00:39:11Z,DoneDone,https://github.com/bitcoin/bitcoin/pull/13743#discussion_r226886587,226886587,src/validationinterface.cpp
