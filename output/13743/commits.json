[
  {
    "sha": "2196c51821e340c9a9d2c76c30f9402370f84994",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMTk2YzUxODIxZTM0MGM5YTlkMmM3NmMzMGY5NDAyMzcwZjg0OTk0",
    "commit": {
      "author": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-10-17T15:12:28Z"
      },
      "committer": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-10-19T18:29:35Z"
      },
      "message": "refactor: Use boost::scoped_connection in signal/slot, also prefer range-based loop instead of std::transform",
      "tree": {
        "sha": "5f8b06f76be254788b30eda7af008da0abc8417d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5f8b06f76be254788b30eda7af008da0abc8417d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2196c51821e340c9a9d2c76c30f9402370f84994",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2196c51821e340c9a9d2c76c30f9402370f84994",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2196c51821e340c9a9d2c76c30f9402370f84994",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2196c51821e340c9a9d2c76c30f9402370f84994/comments",
    "author": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "be992701b018f256db6d64786624be4cb60d8975",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be992701b018f256db6d64786624be4cb60d8975",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/be992701b018f256db6d64786624be4cb60d8975"
      }
    ],
    "stats": {
      "total": 74,
      "additions": 35,
      "deletions": 39
    },
    "files": [
      {
        "sha": "19603e7a54c9f30b081f857c80e528367f0350a5",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2196c51821e340c9a9d2c76c30f9402370f84994/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2196c51821e340c9a9d2c76c30f9402370f84994/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=2196c51821e340c9a9d2c76c30f9402370f84994",
        "patch": "@@ -500,11 +500,7 @@ UniValue CRPCTable::execute(const JSONRPCRequest &request) const\n std::vector<std::string> CRPCTable::listCommands() const\n {\n     std::vector<std::string> commandList;\n-    typedef std::map<std::string, const CRPCCommand*> commandMap;\n-\n-    std::transform( mapCommands.begin(), mapCommands.end(),\n-                   std::back_inserter(commandList),\n-                   boost::bind(&commandMap::value_type::first,_1) );\n+    for (const auto& i : mapCommands) commandList.emplace_back(i.first);\n     return commandList;\n }\n "
      },
      {
        "sha": "db7b249ffc24efe40966a96a4e1469597f239bbc",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2196c51821e340c9a9d2c76c30f9402370f84994/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2196c51821e340c9a9d2c76c30f9402370f84994/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=2196c51821e340c9a9d2c76c30f9402370f84994",
        "patch": "@@ -2368,14 +2368,11 @@ class ConnectTrace {\n private:\n     std::vector<PerBlockConnectTrace> blocksConnected;\n     CTxMemPool &pool;\n+    boost::signals2::scoped_connection m_connNotifyEntryRemoved;\n \n public:\n     explicit ConnectTrace(CTxMemPool &_pool) : blocksConnected(1), pool(_pool) {\n-        pool.NotifyEntryRemoved.connect(boost::bind(&ConnectTrace::NotifyEntryRemoved, this, _1, _2));\n-    }\n-\n-    ~ConnectTrace() {\n-        pool.NotifyEntryRemoved.disconnect(boost::bind(&ConnectTrace::NotifyEntryRemoved, this, _1, _2));\n+        m_connNotifyEntryRemoved = pool.NotifyEntryRemoved.connect(boost::bind(&ConnectTrace::NotifyEntryRemoved, this, _1, _2));\n     }\n \n     void BlockConnected(CBlockIndex* pindex, std::shared_ptr<const CBlock> pblock) {"
      },
      {
        "sha": "4f3f67859ae2104665e536f15a311bea405ba990",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 29,
        "changes": 61,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2196c51821e340c9a9d2c76c30f9402370f84994/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2196c51821e340c9a9d2c76c30f9402370f84994/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=2196c51821e340c9a9d2c76c30f9402370f84994",
        "patch": "@@ -17,6 +17,18 @@\n \n #include <boost/signals2/signal.hpp>\n \n+struct ValidationInterfaceConnections {\n+    boost::signals2::scoped_connection UpdatedBlockTip;\n+    boost::signals2::scoped_connection TransactionAddedToMempool;\n+    boost::signals2::scoped_connection BlockConnected;\n+    boost::signals2::scoped_connection BlockDisconnected;\n+    boost::signals2::scoped_connection TransactionRemovedFromMempool;\n+    boost::signals2::scoped_connection ChainStateFlushed;\n+    boost::signals2::scoped_connection Broadcast;\n+    boost::signals2::scoped_connection BlockChecked;\n+    boost::signals2::scoped_connection NewPoWValidBlock;\n+};\n+\n struct MainSignalsInstance {\n     boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n     boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n@@ -32,12 +44,18 @@ struct MainSignalsInstance {\n     // but must ensure all callbacks happen in-order, so we end up creating\n     // our own queue here :(\n     SingleThreadedSchedulerClient m_schedulerClient;\n+    std::unordered_map<CValidationInterface*, ValidationInterfaceConnections> m_connMainSignals;\n \n     explicit MainSignalsInstance(CScheduler *pscheduler) : m_schedulerClient(pscheduler) {}\n };\n \n static CMainSignals g_signals;\n \n+// This map has to a separate global instead of a member of MainSignalsInstance,\n+// because RegisterWithMempoolSignals is currently called before RegisterBackgroundSignalScheduler,\n+// so MainSignalsInstance hasn't been created yet.\n+static std::unordered_map<CTxMemPool*, boost::signals2::scoped_connection> g_connNotifyEntryRemoved;\n+\n void CMainSignals::RegisterBackgroundSignalScheduler(CScheduler& scheduler) {\n     assert(!m_internals);\n     m_internals.reset(new MainSignalsInstance(&scheduler));\n@@ -59,11 +77,11 @@ size_t CMainSignals::CallbacksPending() {\n }\n \n void CMainSignals::RegisterWithMempoolSignals(CTxMemPool& pool) {\n-    pool.NotifyEntryRemoved.connect(boost::bind(&CMainSignals::MempoolEntryRemoved, this, _1, _2));\n+    g_connNotifyEntryRemoved.emplace(&pool, pool.NotifyEntryRemoved.connect(boost::bind(&CMainSignals::MempoolEntryRemoved, this, _1, _2)));\n }\n \n void CMainSignals::UnregisterWithMempoolSignals(CTxMemPool& pool) {\n-    pool.NotifyEntryRemoved.disconnect(boost::bind(&CMainSignals::MempoolEntryRemoved, this, _1, _2));\n+    g_connNotifyEntryRemoved.erase(&pool);\n }\n \n CMainSignals& GetMainSignals()\n@@ -72,42 +90,27 @@ CMainSignals& GetMainSignals()\n }\n \n void RegisterValidationInterface(CValidationInterface* pwalletIn) {\n-    g_signals.m_internals->UpdatedBlockTip.connect(boost::bind(&CValidationInterface::UpdatedBlockTip, pwalletIn, _1, _2, _3));\n-    g_signals.m_internals->TransactionAddedToMempool.connect(boost::bind(&CValidationInterface::TransactionAddedToMempool, pwalletIn, _1));\n-    g_signals.m_internals->BlockConnected.connect(boost::bind(&CValidationInterface::BlockConnected, pwalletIn, _1, _2, _3));\n-    g_signals.m_internals->BlockDisconnected.connect(boost::bind(&CValidationInterface::BlockDisconnected, pwalletIn, _1));\n-    g_signals.m_internals->TransactionRemovedFromMempool.connect(boost::bind(&CValidationInterface::TransactionRemovedFromMempool, pwalletIn, _1));\n-    g_signals.m_internals->ChainStateFlushed.connect(boost::bind(&CValidationInterface::ChainStateFlushed, pwalletIn, _1));\n-    g_signals.m_internals->Broadcast.connect(boost::bind(&CValidationInterface::ResendWalletTransactions, pwalletIn, _1, _2));\n-    g_signals.m_internals->BlockChecked.connect(boost::bind(&CValidationInterface::BlockChecked, pwalletIn, _1, _2));\n-    g_signals.m_internals->NewPoWValidBlock.connect(boost::bind(&CValidationInterface::NewPoWValidBlock, pwalletIn, _1, _2));\n+    ValidationInterfaceConnections& conns = g_signals.m_internals->m_connMainSignals[pwalletIn];\n+    conns.UpdatedBlockTip = g_signals.m_internals->UpdatedBlockTip.connect(boost::bind(&CValidationInterface::UpdatedBlockTip, pwalletIn, _1, _2, _3));\n+    conns.TransactionAddedToMempool = g_signals.m_internals->TransactionAddedToMempool.connect(boost::bind(&CValidationInterface::TransactionAddedToMempool, pwalletIn, _1));\n+    conns.BlockConnected = g_signals.m_internals->BlockConnected.connect(boost::bind(&CValidationInterface::BlockConnected, pwalletIn, _1, _2, _3));\n+    conns.BlockDisconnected = g_signals.m_internals->BlockDisconnected.connect(boost::bind(&CValidationInterface::BlockDisconnected, pwalletIn, _1));\n+    conns.TransactionRemovedFromMempool = g_signals.m_internals->TransactionRemovedFromMempool.connect(boost::bind(&CValidationInterface::TransactionRemovedFromMempool, pwalletIn, _1));\n+    conns.ChainStateFlushed = g_signals.m_internals->ChainStateFlushed.connect(boost::bind(&CValidationInterface::ChainStateFlushed, pwalletIn, _1));\n+    conns.Broadcast = g_signals.m_internals->Broadcast.connect(boost::bind(&CValidationInterface::ResendWalletTransactions, pwalletIn, _1, _2));\n+    conns.BlockChecked = g_signals.m_internals->BlockChecked.connect(boost::bind(&CValidationInterface::BlockChecked, pwalletIn, _1, _2));\n+    conns.NewPoWValidBlock = g_signals.m_internals->NewPoWValidBlock.connect(boost::bind(&CValidationInterface::NewPoWValidBlock, pwalletIn, _1, _2));\n }\n \n void UnregisterValidationInterface(CValidationInterface* pwalletIn) {\n-    g_signals.m_internals->BlockChecked.disconnect(boost::bind(&CValidationInterface::BlockChecked, pwalletIn, _1, _2));\n-    g_signals.m_internals->Broadcast.disconnect(boost::bind(&CValidationInterface::ResendWalletTransactions, pwalletIn, _1, _2));\n-    g_signals.m_internals->ChainStateFlushed.disconnect(boost::bind(&CValidationInterface::ChainStateFlushed, pwalletIn, _1));\n-    g_signals.m_internals->TransactionAddedToMempool.disconnect(boost::bind(&CValidationInterface::TransactionAddedToMempool, pwalletIn, _1));\n-    g_signals.m_internals->BlockConnected.disconnect(boost::bind(&CValidationInterface::BlockConnected, pwalletIn, _1, _2, _3));\n-    g_signals.m_internals->BlockDisconnected.disconnect(boost::bind(&CValidationInterface::BlockDisconnected, pwalletIn, _1));\n-    g_signals.m_internals->TransactionRemovedFromMempool.disconnect(boost::bind(&CValidationInterface::TransactionRemovedFromMempool, pwalletIn, _1));\n-    g_signals.m_internals->UpdatedBlockTip.disconnect(boost::bind(&CValidationInterface::UpdatedBlockTip, pwalletIn, _1, _2, _3));\n-    g_signals.m_internals->NewPoWValidBlock.disconnect(boost::bind(&CValidationInterface::NewPoWValidBlock, pwalletIn, _1, _2));\n+    g_signals.m_internals->m_connMainSignals.erase(pwalletIn);\n }\n \n void UnregisterAllValidationInterfaces() {\n     if (!g_signals.m_internals) {\n         return;\n     }\n-    g_signals.m_internals->BlockChecked.disconnect_all_slots();\n-    g_signals.m_internals->Broadcast.disconnect_all_slots();\n-    g_signals.m_internals->ChainStateFlushed.disconnect_all_slots();\n-    g_signals.m_internals->TransactionAddedToMempool.disconnect_all_slots();\n-    g_signals.m_internals->BlockConnected.disconnect_all_slots();\n-    g_signals.m_internals->BlockDisconnected.disconnect_all_slots();\n-    g_signals.m_internals->TransactionRemovedFromMempool.disconnect_all_slots();\n-    g_signals.m_internals->UpdatedBlockTip.disconnect_all_slots();\n-    g_signals.m_internals->NewPoWValidBlock.disconnect_all_slots();\n+    g_signals.m_internals->m_connMainSignals.clear();\n }\n \n void CallFunctionInValidationInterfaceQueue(std::function<void ()> func) {"
      }
    ]
  },
  {
    "sha": "cb53b825c26af6e628ba88d72b2000e75bedbbc6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYjUzYjgyNWMyNmFmNmU2MjhiYTg4ZDcyYjIwMDBlNzViZWRiYmM2",
    "commit": {
      "author": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-10-17T15:51:17Z"
      },
      "committer": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-10-19T18:29:59Z"
      },
      "message": "scripted-diff: Replace boost::bind with std::bind\n\n-BEGIN VERIFY SCRIPT-\nfor j in $(seq 1 5)\ndo\n    sed -i \"s/ _${j}/ std::placeholders::_${j}/g\" $(git grep --name-only \" _${j}\" -- '*.cpp' '*.h')\ndone\nsed -i \"s/boost::bind/std::bind/g\" $(git grep --name-only boost::bind -- '*.cpp' '*.h')\nsed -i \"s/boost::ref/std::ref/g\" $(git grep --name-only boost::ref -- '*.cpp' '*.h')\nsed -i '/boost\\/bind/d' $(git grep --name-only boost/bind)\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "697ef867c14085856bdf1568aa4132c7164e43a7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/697ef867c14085856bdf1568aa4132c7164e43a7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cb53b825c26af6e628ba88d72b2000e75bedbbc6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb53b825c26af6e628ba88d72b2000e75bedbbc6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cb53b825c26af6e628ba88d72b2000e75bedbbc6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb53b825c26af6e628ba88d72b2000e75bedbbc6/comments",
    "author": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2196c51821e340c9a9d2c76c30f9402370f84994",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2196c51821e340c9a9d2c76c30f9402370f84994",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2196c51821e340c9a9d2c76c30f9402370f84994"
      }
    ],
    "stats": {
      "total": 127,
      "additions": 59,
      "deletions": 68
    },
    "files": [
      {
        "sha": "8570fa63b13a32e118e942374e7b9c565dcac646",
        "filename": "src/bench/block_assemble.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb53b825c26af6e628ba88d72b2000e75bedbbc6/src/bench/block_assemble.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb53b825c26af6e628ba88d72b2000e75bedbbc6/src/bench/block_assemble.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/block_assemble.cpp?ref=cb53b825c26af6e628ba88d72b2000e75bedbbc6",
        "patch": "@@ -77,7 +77,7 @@ static void AssembleBlock(benchmark::State& state)\n         ::pcoinsTip.reset(new CCoinsViewCache(pcoinsdbview.get()));\n \n         const CChainParams& chainparams = Params();\n-        thread_group.create_thread(boost::bind(&CScheduler::serviceQueue, &scheduler));\n+        thread_group.create_thread(std::bind(&CScheduler::serviceQueue, &scheduler));\n         GetMainSignals().RegisterBackgroundSignalScheduler(scheduler);\n         LoadGenesisBlock(chainparams);\n         CValidationState state;"
      },
      {
        "sha": "cc2ab6e68cb0cca23972439a881d6cc8c12d144f",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb53b825c26af6e628ba88d72b2000e75bedbbc6/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb53b825c26af6e628ba88d72b2000e75bedbbc6/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=cb53b825c26af6e628ba88d72b2000e75bedbbc6",
        "patch": "@@ -57,7 +57,6 @@\n #include <boost/algorithm/string/classification.hpp>\n #include <boost/algorithm/string/replace.hpp>\n #include <boost/algorithm/string/split.hpp>\n-#include <boost/bind.hpp>\n #include <boost/thread.hpp>\n #include <openssl/crypto.h>\n \n@@ -1206,8 +1205,8 @@ bool AppInitMain()\n     }\n \n     // Start the lightweight task scheduler thread\n-    CScheduler::Function serviceLoop = boost::bind(&CScheduler::serviceQueue, &scheduler);\n-    threadGroup.create_thread(boost::bind(&TraceThread<CScheduler::Function>, \"scheduler\", serviceLoop));\n+    CScheduler::Function serviceLoop = std::bind(&CScheduler::serviceQueue, &scheduler);\n+    threadGroup.create_thread(std::bind(&TraceThread<CScheduler::Function>, \"scheduler\", serviceLoop));\n \n     GetMainSignals().RegisterBackgroundSignalScheduler(scheduler);\n     GetMainSignals().RegisterWithMempoolSignals(mempool);\n@@ -1598,7 +1597,7 @@ bool AppInitMain()\n         vImportFiles.push_back(strFile);\n     }\n \n-    threadGroup.create_thread(boost::bind(&ThreadImport, vImportFiles));\n+    threadGroup.create_thread(std::bind(&ThreadImport, vImportFiles));\n \n     // Wait for genesis block to be processed\n     {"
      },
      {
        "sha": "8486d98a10153326ed43076182f2c9236d4fd232",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb53b825c26af6e628ba88d72b2000e75bedbbc6/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb53b825c26af6e628ba88d72b2000e75bedbbc6/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=cb53b825c26af6e628ba88d72b2000e75bedbbc6",
        "patch": "@@ -58,7 +58,6 @@\n #include <QUrlQuery>\n #include <QVBoxLayout>\n \n-#include <boost/bind.hpp>\n \n const std::string BitcoinGUI::DEFAULT_UIPLATFORM =\n #if defined(Q_OS_MAC)\n@@ -1241,8 +1240,8 @@ static bool ThreadSafeMessageBox(BitcoinGUI* gui, const std::string& message, co\n void BitcoinGUI::subscribeToCoreSignals()\n {\n     // Connect signals to client\n-    m_handler_message_box = m_node.handleMessageBox(boost::bind(ThreadSafeMessageBox, this, _1, _2, _3));\n-    m_handler_question = m_node.handleQuestion(boost::bind(ThreadSafeMessageBox, this, _1, _3, _4));\n+    m_handler_message_box = m_node.handleMessageBox(std::bind(ThreadSafeMessageBox, this, std::placeholders::_1, std::placeholders::_2, std::placeholders::_3));\n+    m_handler_question = m_node.handleQuestion(std::bind(ThreadSafeMessageBox, this, std::placeholders::_1, std::placeholders::_3, std::placeholders::_4));\n }\n \n void BitcoinGUI::unsubscribeFromCoreSignals()"
      },
      {
        "sha": "b0be2dc72934b12fc7297f54640ccb4e69fd3d42",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb53b825c26af6e628ba88d72b2000e75bedbbc6/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb53b825c26af6e628ba88d72b2000e75bedbbc6/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=cb53b825c26af6e628ba88d72b2000e75bedbbc6",
        "patch": "@@ -247,13 +247,13 @@ static void BlockTipChanged(ClientModel *clientmodel, bool initialSync, int heig\n void ClientModel::subscribeToCoreSignals()\n {\n     // Connect signals to client\n-    m_handler_show_progress = m_node.handleShowProgress(boost::bind(ShowProgress, this, _1, _2));\n-    m_handler_notify_num_connections_changed = m_node.handleNotifyNumConnectionsChanged(boost::bind(NotifyNumConnectionsChanged, this, _1));\n-    m_handler_notify_network_active_changed = m_node.handleNotifyNetworkActiveChanged(boost::bind(NotifyNetworkActiveChanged, this, _1));\n-    m_handler_notify_alert_changed = m_node.handleNotifyAlertChanged(boost::bind(NotifyAlertChanged, this));\n-    m_handler_banned_list_changed = m_node.handleBannedListChanged(boost::bind(BannedListChanged, this));\n-    m_handler_notify_block_tip = m_node.handleNotifyBlockTip(boost::bind(BlockTipChanged, this, _1, _2, _3, _4, false));\n-    m_handler_notify_header_tip = m_node.handleNotifyHeaderTip(boost::bind(BlockTipChanged, this, _1, _2, _3, _4, true));\n+    m_handler_show_progress = m_node.handleShowProgress(std::bind(ShowProgress, this, std::placeholders::_1, std::placeholders::_2));\n+    m_handler_notify_num_connections_changed = m_node.handleNotifyNumConnectionsChanged(std::bind(NotifyNumConnectionsChanged, this, std::placeholders::_1));\n+    m_handler_notify_network_active_changed = m_node.handleNotifyNetworkActiveChanged(std::bind(NotifyNetworkActiveChanged, this, std::placeholders::_1));\n+    m_handler_notify_alert_changed = m_node.handleNotifyAlertChanged(std::bind(NotifyAlertChanged, this));\n+    m_handler_banned_list_changed = m_node.handleBannedListChanged(std::bind(BannedListChanged, this));\n+    m_handler_notify_block_tip = m_node.handleNotifyBlockTip(std::bind(BlockTipChanged, this, std::placeholders::_1, std::placeholders::_2, std::placeholders::_3, std::placeholders::_4, false));\n+    m_handler_notify_header_tip = m_node.handleNotifyHeaderTip(std::bind(BlockTipChanged, this, std::placeholders::_1, std::placeholders::_2, std::placeholders::_3, std::placeholders::_4, true));\n }\n \n void ClientModel::unsubscribeFromCoreSignals()"
      },
      {
        "sha": "8c38b20c4a33a4626acdb92fbd53dece4b8c0a78",
        "filename": "src/qt/splashscreen.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb53b825c26af6e628ba88d72b2000e75bedbbc6/src/qt/splashscreen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb53b825c26af6e628ba88d72b2000e75bedbbc6/src/qt/splashscreen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.cpp?ref=cb53b825c26af6e628ba88d72b2000e75bedbbc6",
        "patch": "@@ -24,7 +24,6 @@\n #include <QPainter>\n #include <QRadialGradient>\n \n-#include <boost/bind.hpp>\n \n SplashScreen::SplashScreen(interfaces::Node& node, Qt::WindowFlags f, const NetworkStyle *networkStyle) :\n     QWidget(0, f), curAlignment(0), m_node(node)\n@@ -180,16 +179,16 @@ static void ShowProgress(SplashScreen *splash, const std::string &title, int nPr\n #ifdef ENABLE_WALLET\n void SplashScreen::ConnectWallet(std::unique_ptr<interfaces::Wallet> wallet)\n {\n-    m_connected_wallet_handlers.emplace_back(wallet->handleShowProgress(boost::bind(ShowProgress, this, _1, _2, false)));\n+    m_connected_wallet_handlers.emplace_back(wallet->handleShowProgress(std::bind(ShowProgress, this, std::placeholders::_1, std::placeholders::_2, false)));\n     m_connected_wallets.emplace_back(std::move(wallet));\n }\n #endif\n \n void SplashScreen::subscribeToCoreSignals()\n {\n     // Connect signals to client\n-    m_handler_init_message = m_node.handleInitMessage(boost::bind(InitMessage, this, _1));\n-    m_handler_show_progress = m_node.handleShowProgress(boost::bind(ShowProgress, this, _1, _2, _3));\n+    m_handler_init_message = m_node.handleInitMessage(std::bind(InitMessage, this, std::placeholders::_1));\n+    m_handler_show_progress = m_node.handleShowProgress(std::bind(ShowProgress, this, std::placeholders::_1, std::placeholders::_2, std::placeholders::_3));\n #ifdef ENABLE_WALLET\n     m_handler_load_wallet = m_node.handleLoadWallet([this](std::unique_ptr<interfaces::Wallet> wallet) { ConnectWallet(std::move(wallet)); });\n #endif"
      },
      {
        "sha": "6efa88065e9c31cbe5a5a1622ec2a32bfd07291f",
        "filename": "src/qt/transactiontablemodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb53b825c26af6e628ba88d72b2000e75bedbbc6/src/qt/transactiontablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb53b825c26af6e628ba88d72b2000e75bedbbc6/src/qt/transactiontablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.cpp?ref=cb53b825c26af6e628ba88d72b2000e75bedbbc6",
        "patch": "@@ -27,7 +27,6 @@\n #include <QIcon>\n #include <QList>\n \n-#include <boost/bind.hpp>\n \n // Amount column is right-aligned it contains numbers\n static int column_alignments[] = {\n@@ -746,8 +745,8 @@ static void ShowProgress(TransactionTableModel *ttm, const std::string &title, i\n void TransactionTableModel::subscribeToCoreSignals()\n {\n     // Connect signals to wallet\n-    m_handler_transaction_changed = walletModel->wallet().handleTransactionChanged(boost::bind(NotifyTransactionChanged, this, _1, _2));\n-    m_handler_show_progress = walletModel->wallet().handleShowProgress(boost::bind(ShowProgress, this, _1, _2));\n+    m_handler_transaction_changed = walletModel->wallet().handleTransactionChanged(std::bind(NotifyTransactionChanged, this, std::placeholders::_1, std::placeholders::_2));\n+    m_handler_show_progress = walletModel->wallet().handleShowProgress(std::bind(ShowProgress, this, std::placeholders::_1, std::placeholders::_2));\n }\n \n void TransactionTableModel::unsubscribeFromCoreSignals()"
      },
      {
        "sha": "070b75b69f58d4948e8060bafb98ef0ddd4e9e5c",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb53b825c26af6e628ba88d72b2000e75bedbbc6/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb53b825c26af6e628ba88d72b2000e75bedbbc6/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=cb53b825c26af6e628ba88d72b2000e75bedbbc6",
        "patch": "@@ -417,12 +417,12 @@ static void NotifyWatchonlyChanged(WalletModel *walletmodel, bool fHaveWatchonly\n void WalletModel::subscribeToCoreSignals()\n {\n     // Connect signals to wallet\n-    m_handler_unload = m_wallet->handleUnload(boost::bind(&NotifyUnload, this));\n-    m_handler_status_changed = m_wallet->handleStatusChanged(boost::bind(&NotifyKeyStoreStatusChanged, this));\n-    m_handler_address_book_changed = m_wallet->handleAddressBookChanged(boost::bind(NotifyAddressBookChanged, this, _1, _2, _3, _4, _5));\n-    m_handler_transaction_changed = m_wallet->handleTransactionChanged(boost::bind(NotifyTransactionChanged, this, _1, _2));\n-    m_handler_show_progress = m_wallet->handleShowProgress(boost::bind(ShowProgress, this, _1, _2));\n-    m_handler_watch_only_changed = m_wallet->handleWatchOnlyChanged(boost::bind(NotifyWatchonlyChanged, this, _1));\n+    m_handler_unload = m_wallet->handleUnload(std::bind(&NotifyUnload, this));\n+    m_handler_status_changed = m_wallet->handleStatusChanged(std::bind(&NotifyKeyStoreStatusChanged, this));\n+    m_handler_address_book_changed = m_wallet->handleAddressBookChanged(std::bind(NotifyAddressBookChanged, this, std::placeholders::_1, std::placeholders::_2, std::placeholders::_3, std::placeholders::_4, std::placeholders::_5));\n+    m_handler_transaction_changed = m_wallet->handleTransactionChanged(std::bind(NotifyTransactionChanged, this, std::placeholders::_1, std::placeholders::_2));\n+    m_handler_show_progress = m_wallet->handleShowProgress(std::bind(ShowProgress, this, std::placeholders::_1, std::placeholders::_2));\n+    m_handler_watch_only_changed = m_wallet->handleWatchOnlyChanged(std::bind(NotifyWatchonlyChanged, this, std::placeholders::_1));\n }\n \n void WalletModel::unsubscribeFromCoreSignals()"
      },
      {
        "sha": "9a0cfebdf5cb3bf3c08922317ccc246afdb56953",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb53b825c26af6e628ba88d72b2000e75bedbbc6/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb53b825c26af6e628ba88d72b2000e75bedbbc6/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=cb53b825c26af6e628ba88d72b2000e75bedbbc6",
        "patch": "@@ -14,7 +14,6 @@\n #include <util.h>\n #include <utilstrencodings.h>\n \n-#include <boost/bind.hpp>\n #include <boost/signals2/signal.hpp>\n #include <boost/algorithm/string/classification.hpp>\n #include <boost/algorithm/string/split.hpp>"
      },
      {
        "sha": "b2da62fc75fc7a8a212036abe5a61095526aba14",
        "filename": "src/scheduler.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb53b825c26af6e628ba88d72b2000e75bedbbc6/src/scheduler.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb53b825c26af6e628ba88d72b2000e75bedbbc6/src/scheduler.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scheduler.cpp?ref=cb53b825c26af6e628ba88d72b2000e75bedbbc6",
        "patch": "@@ -8,7 +8,6 @@\n #include <reverselock.h>\n \n #include <assert.h>\n-#include <boost/bind.hpp>\n #include <utility>\n \n CScheduler::CScheduler() : nThreadsServicingQueue(0), stopRequested(false), stopWhenEmpty(false)\n@@ -120,12 +119,12 @@ void CScheduler::scheduleFromNow(CScheduler::Function f, int64_t deltaMilliSecon\n static void Repeat(CScheduler* s, CScheduler::Function f, int64_t deltaMilliSeconds)\n {\n     f();\n-    s->scheduleFromNow(boost::bind(&Repeat, s, f, deltaMilliSeconds), deltaMilliSeconds);\n+    s->scheduleFromNow(std::bind(&Repeat, s, f, deltaMilliSeconds), deltaMilliSeconds);\n }\n \n void CScheduler::scheduleEvery(CScheduler::Function f, int64_t deltaMilliSeconds)\n {\n-    scheduleFromNow(boost::bind(&Repeat, this, f, deltaMilliSeconds), deltaMilliSeconds);\n+    scheduleFromNow(std::bind(&Repeat, this, f, deltaMilliSeconds), deltaMilliSeconds);\n }\n \n size_t CScheduler::getQueueInfo(boost::chrono::system_clock::time_point &first,"
      },
      {
        "sha": "6d7f42cf9f3cc5da65793b6eafb298c0ee918c29",
        "filename": "src/scheduler.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb53b825c26af6e628ba88d72b2000e75bedbbc6/src/scheduler.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb53b825c26af6e628ba88d72b2000e75bedbbc6/src/scheduler.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scheduler.h?ref=cb53b825c26af6e628ba88d72b2000e75bedbbc6",
        "patch": "@@ -25,7 +25,7 @@\n // CScheduler* s = new CScheduler();\n // s->scheduleFromNow(doSomething, 11); // Assuming a: void doSomething() { }\n // s->scheduleFromNow(std::bind(Class::func, this, argument), 3);\n-// boost::thread* t = new boost::thread(boost::bind(CScheduler::serviceQueue, s));\n+// boost::thread* t = new boost::thread(std::bind(CScheduler::serviceQueue, s));\n //\n // ... then at program shutdown, clean up the thread running serviceQueue:\n // t->interrupt();"
      },
      {
        "sha": "100d65b779ffb2460da21a5393e52a5c40eeba58",
        "filename": "src/test/scheduler_tests.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 9,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb53b825c26af6e628ba88d72b2000e75bedbbc6/src/test/scheduler_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb53b825c26af6e628ba88d72b2000e75bedbbc6/src/test/scheduler_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/scheduler_tests.cpp?ref=cb53b825c26af6e628ba88d72b2000e75bedbbc6",
        "patch": "@@ -7,7 +7,6 @@\n \n #include <test/test_bitcoin.h>\n \n-#include <boost/bind.hpp>\n #include <boost/thread.hpp>\n #include <boost/test/unit_test.hpp>\n \n@@ -21,7 +20,7 @@ static void microTask(CScheduler& s, boost::mutex& mutex, int& counter, int delt\n     }\n     boost::chrono::system_clock::time_point noTime = boost::chrono::system_clock::time_point::min();\n     if (rescheduleTime != noTime) {\n-        CScheduler::Function f = boost::bind(&microTask, boost::ref(s), boost::ref(mutex), boost::ref(counter), -delta + 1, noTime);\n+        CScheduler::Function f = std::bind(&microTask, std::ref(s), std::ref(mutex), std::ref(counter), -delta + 1, noTime);\n         s.schedule(f, rescheduleTime);\n     }\n }\n@@ -69,8 +68,8 @@ BOOST_AUTO_TEST_CASE(manythreads)\n         boost::chrono::system_clock::time_point t = now + boost::chrono::microseconds(randomMsec(rng));\n         boost::chrono::system_clock::time_point tReschedule = now + boost::chrono::microseconds(500 + randomMsec(rng));\n         int whichCounter = zeroToNine(rng);\n-        CScheduler::Function f = boost::bind(&microTask, boost::ref(microTasks),\n-                                             boost::ref(counterMutex[whichCounter]), boost::ref(counter[whichCounter]),\n+        CScheduler::Function f = std::bind(&microTask, std::ref(microTasks),\n+                                             std::ref(counterMutex[whichCounter]), std::ref(counter[whichCounter]),\n                                              randomDelta(rng), tReschedule);\n         microTasks.schedule(f, t);\n     }\n@@ -82,20 +81,20 @@ BOOST_AUTO_TEST_CASE(manythreads)\n     // As soon as these are created they will start running and servicing the queue\n     boost::thread_group microThreads;\n     for (int i = 0; i < 5; i++)\n-        microThreads.create_thread(boost::bind(&CScheduler::serviceQueue, &microTasks));\n+        microThreads.create_thread(std::bind(&CScheduler::serviceQueue, &microTasks));\n \n     MicroSleep(600);\n     now = boost::chrono::system_clock::now();\n \n     // More threads and more tasks:\n     for (int i = 0; i < 5; i++)\n-        microThreads.create_thread(boost::bind(&CScheduler::serviceQueue, &microTasks));\n+        microThreads.create_thread(std::bind(&CScheduler::serviceQueue, &microTasks));\n     for (int i = 0; i < 100; i++) {\n         boost::chrono::system_clock::time_point t = now + boost::chrono::microseconds(randomMsec(rng));\n         boost::chrono::system_clock::time_point tReschedule = now + boost::chrono::microseconds(500 + randomMsec(rng));\n         int whichCounter = zeroToNine(rng);\n-        CScheduler::Function f = boost::bind(&microTask, boost::ref(microTasks),\n-                                             boost::ref(counterMutex[whichCounter]), boost::ref(counter[whichCounter]),\n+        CScheduler::Function f = std::bind(&microTask, std::ref(microTasks),\n+                                             std::ref(counterMutex[whichCounter]), std::ref(counter[whichCounter]),\n                                              randomDelta(rng), tReschedule);\n         microTasks.schedule(f, t);\n     }\n@@ -126,7 +125,7 @@ BOOST_AUTO_TEST_CASE(singlethreadedscheduler_ordered)\n     // if they don't we'll get out of order behaviour\n     boost::thread_group threads;\n     for (int i = 0; i < 5; ++i) {\n-        threads.create_thread(boost::bind(&CScheduler::serviceQueue, &scheduler));\n+        threads.create_thread(std::bind(&CScheduler::serviceQueue, &scheduler));\n     }\n \n     // these are not atomic, if SinglethreadedSchedulerClient prevents"
      },
      {
        "sha": "c4ed7b56d40d2c571f770501f6a09eb020c0967b",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb53b825c26af6e628ba88d72b2000e75bedbbc6/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb53b825c26af6e628ba88d72b2000e75bedbbc6/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=cb53b825c26af6e628ba88d72b2000e75bedbbc6",
        "patch": "@@ -92,7 +92,7 @@ TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(cha\n \n         // We have to run a scheduler thread to prevent ActivateBestChain\n         // from blocking due to queue overrun.\n-        threadGroup.create_thread(boost::bind(&CScheduler::serviceQueue, &scheduler));\n+        threadGroup.create_thread(std::bind(&CScheduler::serviceQueue, &scheduler));\n         GetMainSignals().RegisterBackgroundSignalScheduler(scheduler);\n \n         mempool.setSanityCheck(1.0);"
      },
      {
        "sha": "d001103d8f0ffd24b80c0dc63b570b25ab0d4be9",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb53b825c26af6e628ba88d72b2000e75bedbbc6/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb53b825c26af6e628ba88d72b2000e75bedbbc6/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=cb53b825c26af6e628ba88d72b2000e75bedbbc6",
        "patch": "@@ -467,7 +467,7 @@ BOOST_AUTO_TEST_CASE(test_big_witness_transaction) {\n     CCheckQueueControl<CScriptCheck> control(&scriptcheckqueue);\n \n     for (int i=0; i<20; i++)\n-        threadGroup.create_thread(boost::bind(&CCheckQueue<CScriptCheck>::Thread, boost::ref(scriptcheckqueue)));\n+        threadGroup.create_thread(std::bind(&CCheckQueue<CScriptCheck>::Thread, std::ref(scriptcheckqueue)));\n \n     std::vector<Coin> coins;\n     for(uint32_t i = 0; i < mtx.vin.size(); i++) {"
      },
      {
        "sha": "8683dfbb72b8cb70ebb00332c80d194fff9fa9ad",
        "filename": "src/torcontrol.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 12,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb53b825c26af6e628ba88d72b2000e75bedbbc6/src/torcontrol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb53b825c26af6e628ba88d72b2000e75bedbbc6/src/torcontrol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/torcontrol.cpp?ref=cb53b825c26af6e628ba88d72b2000e75bedbbc6",
        "patch": "@@ -15,7 +15,6 @@\n #include <set>\n #include <stdlib.h>\n \n-#include <boost/bind.hpp>\n #include <boost/signals2/signal.hpp>\n #include <boost/algorithm/string/split.hpp>\n #include <boost/algorithm/string/classification.hpp>\n@@ -459,8 +458,8 @@ TorController::TorController(struct event_base* _base, const std::string& _targe\n     if (!reconnect_ev)\n         LogPrintf(\"tor: Failed to create event for reconnection: out of memory?\\n\");\n     // Start connection attempts immediately\n-    if (!conn.Connect(_target, boost::bind(&TorController::connected_cb, this, _1),\n-         boost::bind(&TorController::disconnected_cb, this, _1) )) {\n+    if (!conn.Connect(_target, std::bind(&TorController::connected_cb, this, std::placeholders::_1),\n+         std::bind(&TorController::disconnected_cb, this, std::placeholders::_1) )) {\n         LogPrintf(\"tor: Initiating connection to Tor control port %s failed\\n\", _target);\n     }\n     // Read service private key if cached\n@@ -538,7 +537,7 @@ void TorController::auth_cb(TorControlConnection& _conn, const TorControlReply&\n         // Note that the 'virtual' port doesn't have to be the same as our internal port, but this is just a convenient\n         // choice.  TODO; refactor the shutdown sequence some day.\n         _conn.Command(strprintf(\"ADD_ONION %s Port=%i,127.0.0.1:%i\", private_key, GetListenPort(), GetListenPort()),\n-            boost::bind(&TorController::add_onion_cb, this, _1, _2));\n+            std::bind(&TorController::add_onion_cb, this, std::placeholders::_1, std::placeholders::_2));\n     } else {\n         LogPrintf(\"tor: Authentication failed\\n\");\n     }\n@@ -597,7 +596,7 @@ void TorController::authchallenge_cb(TorControlConnection& _conn, const TorContr\n             }\n \n             std::vector<uint8_t> computedClientHash = ComputeResponse(TOR_SAFE_CLIENTKEY, cookie, clientNonce, serverNonce);\n-            _conn.Command(\"AUTHENTICATE \" + HexStr(computedClientHash), boost::bind(&TorController::auth_cb, this, _1, _2));\n+            _conn.Command(\"AUTHENTICATE \" + HexStr(computedClientHash), std::bind(&TorController::auth_cb, this, std::placeholders::_1, std::placeholders::_2));\n         } else {\n             LogPrintf(\"tor: Invalid reply to AUTHCHALLENGE\\n\");\n         }\n@@ -646,23 +645,23 @@ void TorController::protocolinfo_cb(TorControlConnection& _conn, const TorContro\n             if (methods.count(\"HASHEDPASSWORD\")) {\n                 LogPrint(BCLog::TOR, \"tor: Using HASHEDPASSWORD authentication\\n\");\n                 boost::replace_all(torpassword, \"\\\"\", \"\\\\\\\"\");\n-                _conn.Command(\"AUTHENTICATE \\\"\" + torpassword + \"\\\"\", boost::bind(&TorController::auth_cb, this, _1, _2));\n+                _conn.Command(\"AUTHENTICATE \\\"\" + torpassword + \"\\\"\", std::bind(&TorController::auth_cb, this, std::placeholders::_1, std::placeholders::_2));\n             } else {\n                 LogPrintf(\"tor: Password provided with -torpassword, but HASHEDPASSWORD authentication is not available\\n\");\n             }\n         } else if (methods.count(\"NULL\")) {\n             LogPrint(BCLog::TOR, \"tor: Using NULL authentication\\n\");\n-            _conn.Command(\"AUTHENTICATE\", boost::bind(&TorController::auth_cb, this, _1, _2));\n+            _conn.Command(\"AUTHENTICATE\", std::bind(&TorController::auth_cb, this, std::placeholders::_1, std::placeholders::_2));\n         } else if (methods.count(\"SAFECOOKIE\")) {\n             // Cookie: hexdump -e '32/1 \"%02x\"\"\\n\"'  ~/.tor/control_auth_cookie\n             LogPrint(BCLog::TOR, \"tor: Using SAFECOOKIE authentication, reading cookie authentication from %s\\n\", cookiefile);\n             std::pair<bool,std::string> status_cookie = ReadBinaryFile(cookiefile, TOR_COOKIE_SIZE);\n             if (status_cookie.first && status_cookie.second.size() == TOR_COOKIE_SIZE) {\n-                // _conn.Command(\"AUTHENTICATE \" + HexStr(status_cookie.second), boost::bind(&TorController::auth_cb, this, _1, _2));\n+                // _conn.Command(\"AUTHENTICATE \" + HexStr(status_cookie.second), std::bind(&TorController::auth_cb, this, std::placeholders::_1, std::placeholders::_2));\n                 cookie = std::vector<uint8_t>(status_cookie.second.begin(), status_cookie.second.end());\n                 clientNonce = std::vector<uint8_t>(TOR_NONCE_SIZE, 0);\n                 GetRandBytes(clientNonce.data(), TOR_NONCE_SIZE);\n-                _conn.Command(\"AUTHCHALLENGE SAFECOOKIE \" + HexStr(clientNonce), boost::bind(&TorController::authchallenge_cb, this, _1, _2));\n+                _conn.Command(\"AUTHCHALLENGE SAFECOOKIE \" + HexStr(clientNonce), std::bind(&TorController::authchallenge_cb, this, std::placeholders::_1, std::placeholders::_2));\n             } else {\n                 if (status_cookie.first) {\n                     LogPrintf(\"tor: Authentication cookie %s is not exactly %i bytes, as is required by the spec\\n\", cookiefile, TOR_COOKIE_SIZE);\n@@ -684,7 +683,7 @@ void TorController::connected_cb(TorControlConnection& _conn)\n {\n     reconnect_timeout = RECONNECT_TIMEOUT_START;\n     // First send a PROTOCOLINFO command to figure out what authentication is expected\n-    if (!_conn.Command(\"PROTOCOLINFO 1\", boost::bind(&TorController::protocolinfo_cb, this, _1, _2)))\n+    if (!_conn.Command(\"PROTOCOLINFO 1\", std::bind(&TorController::protocolinfo_cb, this, std::placeholders::_1, std::placeholders::_2)))\n         LogPrintf(\"tor: Error sending initial protocolinfo command\\n\");\n }\n \n@@ -711,8 +710,8 @@ void TorController::Reconnect()\n     /* Try to reconnect and reestablish if we get booted - for example, Tor\n      * may be restarting.\n      */\n-    if (!conn.Connect(target, boost::bind(&TorController::connected_cb, this, _1),\n-         boost::bind(&TorController::disconnected_cb, this, _1) )) {\n+    if (!conn.Connect(target, std::bind(&TorController::connected_cb, this, std::placeholders::_1),\n+         std::bind(&TorController::disconnected_cb, this, std::placeholders::_1) )) {\n         LogPrintf(\"tor: Re-initiating connection to Tor control port %s failed\\n\", target);\n     }\n }"
      },
      {
        "sha": "317e7d44e6f201885a70dbe74d7d04cc86fe06c0",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb53b825c26af6e628ba88d72b2000e75bedbbc6/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb53b825c26af6e628ba88d72b2000e75bedbbc6/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=cb53b825c26af6e628ba88d72b2000e75bedbbc6",
        "patch": "@@ -2372,7 +2372,7 @@ class ConnectTrace {\n \n public:\n     explicit ConnectTrace(CTxMemPool &_pool) : blocksConnected(1), pool(_pool) {\n-        m_connNotifyEntryRemoved = pool.NotifyEntryRemoved.connect(boost::bind(&ConnectTrace::NotifyEntryRemoved, this, _1, _2));\n+        m_connNotifyEntryRemoved = pool.NotifyEntryRemoved.connect(std::bind(&ConnectTrace::NotifyEntryRemoved, this, std::placeholders::_1, std::placeholders::_2));\n     }\n \n     void BlockConnected(CBlockIndex* pindex, std::shared_ptr<const CBlock> pblock) {"
      },
      {
        "sha": "35bc21327ac13a8698c2bcabe0a46a71eccf748d",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb53b825c26af6e628ba88d72b2000e75bedbbc6/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb53b825c26af6e628ba88d72b2000e75bedbbc6/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=cb53b825c26af6e628ba88d72b2000e75bedbbc6",
        "patch": "@@ -77,7 +77,7 @@ size_t CMainSignals::CallbacksPending() {\n }\n \n void CMainSignals::RegisterWithMempoolSignals(CTxMemPool& pool) {\n-    g_connNotifyEntryRemoved.emplace(&pool, pool.NotifyEntryRemoved.connect(boost::bind(&CMainSignals::MempoolEntryRemoved, this, _1, _2)));\n+    g_connNotifyEntryRemoved.emplace(&pool, pool.NotifyEntryRemoved.connect(std::bind(&CMainSignals::MempoolEntryRemoved, this, std::placeholders::_1, std::placeholders::_2)));\n }\n \n void CMainSignals::UnregisterWithMempoolSignals(CTxMemPool& pool) {\n@@ -91,15 +91,15 @@ CMainSignals& GetMainSignals()\n \n void RegisterValidationInterface(CValidationInterface* pwalletIn) {\n     ValidationInterfaceConnections& conns = g_signals.m_internals->m_connMainSignals[pwalletIn];\n-    conns.UpdatedBlockTip = g_signals.m_internals->UpdatedBlockTip.connect(boost::bind(&CValidationInterface::UpdatedBlockTip, pwalletIn, _1, _2, _3));\n-    conns.TransactionAddedToMempool = g_signals.m_internals->TransactionAddedToMempool.connect(boost::bind(&CValidationInterface::TransactionAddedToMempool, pwalletIn, _1));\n-    conns.BlockConnected = g_signals.m_internals->BlockConnected.connect(boost::bind(&CValidationInterface::BlockConnected, pwalletIn, _1, _2, _3));\n-    conns.BlockDisconnected = g_signals.m_internals->BlockDisconnected.connect(boost::bind(&CValidationInterface::BlockDisconnected, pwalletIn, _1));\n-    conns.TransactionRemovedFromMempool = g_signals.m_internals->TransactionRemovedFromMempool.connect(boost::bind(&CValidationInterface::TransactionRemovedFromMempool, pwalletIn, _1));\n-    conns.ChainStateFlushed = g_signals.m_internals->ChainStateFlushed.connect(boost::bind(&CValidationInterface::ChainStateFlushed, pwalletIn, _1));\n-    conns.Broadcast = g_signals.m_internals->Broadcast.connect(boost::bind(&CValidationInterface::ResendWalletTransactions, pwalletIn, _1, _2));\n-    conns.BlockChecked = g_signals.m_internals->BlockChecked.connect(boost::bind(&CValidationInterface::BlockChecked, pwalletIn, _1, _2));\n-    conns.NewPoWValidBlock = g_signals.m_internals->NewPoWValidBlock.connect(boost::bind(&CValidationInterface::NewPoWValidBlock, pwalletIn, _1, _2));\n+    conns.UpdatedBlockTip = g_signals.m_internals->UpdatedBlockTip.connect(std::bind(&CValidationInterface::UpdatedBlockTip, pwalletIn, std::placeholders::_1, std::placeholders::_2, std::placeholders::_3));\n+    conns.TransactionAddedToMempool = g_signals.m_internals->TransactionAddedToMempool.connect(std::bind(&CValidationInterface::TransactionAddedToMempool, pwalletIn, std::placeholders::_1));\n+    conns.BlockConnected = g_signals.m_internals->BlockConnected.connect(std::bind(&CValidationInterface::BlockConnected, pwalletIn, std::placeholders::_1, std::placeholders::_2, std::placeholders::_3));\n+    conns.BlockDisconnected = g_signals.m_internals->BlockDisconnected.connect(std::bind(&CValidationInterface::BlockDisconnected, pwalletIn, std::placeholders::_1));\n+    conns.TransactionRemovedFromMempool = g_signals.m_internals->TransactionRemovedFromMempool.connect(std::bind(&CValidationInterface::TransactionRemovedFromMempool, pwalletIn, std::placeholders::_1));\n+    conns.ChainStateFlushed = g_signals.m_internals->ChainStateFlushed.connect(std::bind(&CValidationInterface::ChainStateFlushed, pwalletIn, std::placeholders::_1));\n+    conns.Broadcast = g_signals.m_internals->Broadcast.connect(std::bind(&CValidationInterface::ResendWalletTransactions, pwalletIn, std::placeholders::_1, std::placeholders::_2));\n+    conns.BlockChecked = g_signals.m_internals->BlockChecked.connect(std::bind(&CValidationInterface::BlockChecked, pwalletIn, std::placeholders::_1, std::placeholders::_2));\n+    conns.NewPoWValidBlock = g_signals.m_internals->NewPoWValidBlock.connect(std::bind(&CValidationInterface::NewPoWValidBlock, pwalletIn, std::placeholders::_1, std::placeholders::_2));\n }\n \n void UnregisterValidationInterface(CValidationInterface* pwalletIn) {"
      },
      {
        "sha": "4b9e2615b613a88eb4069c6e7df186dd3edbd228",
        "filename": "test/lint/lint-includes.sh",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb53b825c26af6e628ba88d72b2000e75bedbbc6/test/lint/lint-includes.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb53b825c26af6e628ba88d72b2000e75bedbbc6/test/lint/lint-includes.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-includes.sh?ref=cb53b825c26af6e628ba88d72b2000e75bedbbc6",
        "patch": "@@ -50,7 +50,6 @@ EXPECTED_BOOST_INCLUDES=(\n     boost/algorithm/string/classification.hpp\n     boost/algorithm/string/replace.hpp\n     boost/algorithm/string/split.hpp\n-    boost/bind.hpp\n     boost/chrono/chrono.hpp\n     boost/date_time/posix_time/posix_time.hpp\n     boost/filesystem.hpp"
      }
    ]
  }
]