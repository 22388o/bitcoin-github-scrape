[
  {
    "sha": "fa4760fbb3f1099dcd3c43ebc53c2a761a2170e8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTQ3NjBmYmIzZjEwOTlkY2QzYzQzZWJjNTNjMmE3NjFhMjE3MGU4",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-06-01T17:28:14Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-06-01T17:24:50Z"
      },
      "message": "qa: Increase includeconf test coverage",
      "tree": {
        "sha": "97323ea1e13c2b36a1f0a872076eaa7cf078876b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/97323ea1e13c2b36a1f0a872076eaa7cf078876b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa4760fbb3f1099dcd3c43ebc53c2a761a2170e8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJbEYFiAAoJEM4rdWl+aaVIfSAMAKjw3k15e93L+3eDVbNoKs5a\nfPRxjMKnG5Cz43FXfSMUUv0m/+6nXDpBfBocT1G1M+dc58oDqVm4t0dtmQuH5/7P\nacm/0oguU1izwnvY6Wh6VPTsnOTNwZdvz4gwL8rQmBaHWgtx9l8gVP0hVkbl0WXt\nQq4IEukjYswcIsZqWDfrGb01Lf4zoDGZmFhSQEdWhraUsfwvK30LCpt/4qZYg1yF\nY5FYFkg8pVeHcSumP/myAmpXAYrrFGoKLLVU8Adx2p3ODFe//O7W4wfQECiEa5vr\nI65lUXRo+vg8MeVoLlR57QYZaboQRXhXn0eZ8jStBc2Ma6HqYIm3pBirfdWu4Dag\nDPy6oeocxb8zZYqgmABdfYwVTpInr+rdGyHY9DnUh7WYO4yCMuF2eLFw5fbjlQJq\nFaNrrOViuL5xhY2lHyaOzqnpP2vQsy51WNbBl05AXfeG/ULTfuAPAFI2mRdGdJpn\nG8KHpUVeWfxyZER6BrlsFABxwyN9LRRzmVF8vVRBSA==\n=MZoC\n-----END PGP SIGNATURE-----",
        "payload": "tree 97323ea1e13c2b36a1f0a872076eaa7cf078876b\nparent 472fe8a2ce9f08f0311e4a04eef996eba19ff985\nauthor MarcoFalke <falke.marco@gmail.com> 1527874094 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1527873890 -0400\n\nqa: Increase includeconf test coverage\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa4760fbb3f1099dcd3c43ebc53c2a761a2170e8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa4760fbb3f1099dcd3c43ebc53c2a761a2170e8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa4760fbb3f1099dcd3c43ebc53c2a761a2170e8/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "472fe8a2ce9f08f0311e4a04eef996eba19ff985",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/472fe8a2ce9f08f0311e4a04eef996eba19ff985",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/472fe8a2ce9f08f0311e4a04eef996eba19ff985"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 26,
      "deletions": 13
    },
    "files": [
      {
        "sha": "48d64e3eeccf4c9fa4e007aded9d2122540501ff",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 6,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa4760fbb3f1099dcd3c43ebc53c2a761a2170e8/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa4760fbb3f1099dcd3c43ebc53c2a761a2170e8/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=fa4760fbb3f1099dcd3c43ebc53c2a761a2170e8",
        "patch": "@@ -459,9 +459,9 @@ bool ArgsManager::ParseParameters(int argc, const char* const argv[], std::strin\n     if (it != m_override_args.end()) {\n         if (it->second.size() > 0) {\n             for (const auto& ic : it->second) {\n-                fprintf(stderr, \"warning: -includeconf cannot be used from commandline; ignoring -includeconf=%s\\n\", ic.c_str());\n+                error += \"-includeconf cannot be used from commandline; -includeconf=\" + ic + \"\\n\";\n             }\n-            m_override_args.erase(it);\n+            return false;\n         }\n     }\n     return true;\n@@ -849,11 +849,12 @@ bool ArgsManager::ReadConfigFiles(std::string& error, bool ignore_invalid_keys)\n         // if there is an -includeconf in the override args, but it is empty, that means the user\n         // passed '-noincludeconf' on the command line, in which case we should not include anything\n         if (m_override_args.count(\"-includeconf\") == 0) {\n+            std::string chain_id = GetChainName();\n             std::vector<std::string> includeconf(GetArgs(\"-includeconf\"));\n             {\n                 // We haven't set m_network yet (that happens in SelectParams()), so manually check\n                 // for network.includeconf args.\n-                std::vector<std::string> includeconf_net(GetArgs(std::string(\"-\") + GetChainName() + \".includeconf\"));\n+                std::vector<std::string> includeconf_net(GetArgs(std::string(\"-\") + chain_id + \".includeconf\"));\n                 includeconf.insert(includeconf.end(), includeconf_net.begin(), includeconf_net.end());\n             }\n \n@@ -862,7 +863,7 @@ bool ArgsManager::ReadConfigFiles(std::string& error, bool ignore_invalid_keys)\n             {\n                 LOCK(cs_args);\n                 m_config_args.erase(\"-includeconf\");\n-                m_config_args.erase(std::string(\"-\") + GetChainName() + \".includeconf\");\n+                m_config_args.erase(std::string(\"-\") + chain_id + \".includeconf\");\n             }\n \n             for (const std::string& to_include : includeconf) {\n@@ -873,15 +874,22 @@ bool ArgsManager::ReadConfigFiles(std::string& error, bool ignore_invalid_keys)\n                     }\n                     LogPrintf(\"Included configuration file %s\\n\", to_include.c_str());\n                 } else {\n-                    fprintf(stderr, \"Failed to include configuration file %s\\n\", to_include.c_str());\n+                    error = \"Failed to include configuration file \" + to_include;\n+                    return false;\n                 }\n             }\n \n             // Warn about recursive -includeconf\n             includeconf = GetArgs(\"-includeconf\");\n             {\n-                std::vector<std::string> includeconf_net(GetArgs(std::string(\"-\") + GetChainName() + \".includeconf\"));\n+                std::vector<std::string> includeconf_net(GetArgs(std::string(\"-\") + chain_id + \".includeconf\"));\n                 includeconf.insert(includeconf.end(), includeconf_net.begin(), includeconf_net.end());\n+                std::string chain_id_final = GetChainName();\n+                if (chain_id_final != chain_id) {\n+                    // Also warn about recursive includeconf for the chain that was specified in one of the includeconfs\n+                    includeconf_net = GetArgs(std::string(\"-\") + chain_id_final + \".includeconf\");\n+                    includeconf.insert(includeconf.end(), includeconf_net.begin(), includeconf_net.end());\n+                }\n             }\n             for (const std::string& to_include : includeconf) {\n                 fprintf(stderr, \"warning: -includeconf cannot be used from included files; ignoring -includeconf=%s\\n\", to_include.c_str());"
      },
      {
        "sha": "9a7a0ca1031c4e278823082eb74cbf452d1770d4",
        "filename": "test/functional/feature_includeconf.py",
        "status": "modified",
        "additions": 12,
        "deletions": 7,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa4760fbb3f1099dcd3c43ebc53c2a761a2170e8/test/functional/feature_includeconf.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa4760fbb3f1099dcd3c43ebc53c2a761a2170e8/test/functional/feature_includeconf.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_includeconf.py?ref=fa4760fbb3f1099dcd3c43ebc53c2a761a2170e8",
        "patch": "@@ -41,14 +41,9 @@ def run_test(self):\n         subversion = self.nodes[0].getnetworkinfo()[\"subversion\"]\n         assert subversion.endswith(\"main; relative)/\")\n \n-        self.log.info(\"-includeconf cannot be used as command-line arg. subversion should still end with 'main; relative)/'\")\n+        self.log.info(\"-includeconf cannot be used as command-line arg\")\n         self.stop_node(0)\n-\n-        self.start_node(0, extra_args=[\"-includeconf=relative2.conf\"])\n-\n-        subversion = self.nodes[0].getnetworkinfo()[\"subversion\"]\n-        assert subversion.endswith(\"main; relative)/\")\n-        self.stop_node(0, expected_stderr=\"warning: -includeconf cannot be used from commandline; ignoring -includeconf=relative2.conf\")\n+        self.nodes[0].assert_start_raises_init_error(extra_args=[\"-includeconf=relative2.conf\"], expected_msg=\"Error parsing command line arguments: -includeconf cannot be used from commandline; -includeconf=relative2.conf\")\n \n         self.log.info(\"-includeconf cannot be used recursively. subversion should end with 'main; relative)/'\")\n         with open(os.path.join(self.options.tmpdir, \"node0\", \"relative.conf\"), \"a\", encoding=\"utf8\") as f:\n@@ -59,8 +54,18 @@ def run_test(self):\n         assert subversion.endswith(\"main; relative)/\")\n         self.stop_node(0, expected_stderr=\"warning: -includeconf cannot be used from included files; ignoring -includeconf=relative2.conf\")\n \n+        self.log.info(\"-includeconf cannot contain invalid arg\")\n+        with open(os.path.join(self.options.tmpdir, \"node0\", \"relative.conf\"), \"w\", encoding=\"utf8\") as f:\n+            f.write(\"foo=bar\\n\")\n+        self.nodes[0].assert_start_raises_init_error(expected_msg=\"Error reading configuration file: Invalid configuration value foo\")\n+\n+        self.log.info(\"-includeconf cannot be invalid path\")\n+        os.remove(os.path.join(self.options.tmpdir, \"node0\", \"relative.conf\"))\n+        self.nodes[0].assert_start_raises_init_error(expected_msg=\"Error reading configuration file: Failed to include configuration file relative.conf\")\n+\n         self.log.info(\"multiple -includeconf args can be used from the base config file. subversion should end with 'main; relative; relative2)/'\")\n         with open(os.path.join(self.options.tmpdir, \"node0\", \"relative.conf\"), \"w\", encoding=\"utf8\") as f:\n+            # Restore initial file contents\n             f.write(\"uacomment=relative\\n\")\n \n         with open(os.path.join(self.options.tmpdir, \"node0\", \"bitcoin.conf\"), \"a\", encoding='utf8') as f:"
      }
    ]
  }
]