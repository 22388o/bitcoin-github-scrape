[
  {
    "sha": "4d4e4c644826db03317d69a04fea03309c3ebabf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZDRlNGM2NDQ4MjZkYjAzMzE3ZDY5YTA0ZmVhMDMzMDljM2ViYWJm",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-03-04T20:57:58Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-03-04T20:57:58Z"
      },
      "message": "Suggested interfaces::Chain cleanups from #15288\n\nMostly documentation improvements requested in the last review of #15288 before\nit was merged\n(https://github.com/bitcoin/bitcoin/pull/15288#pullrequestreview-210241864)",
      "tree": {
        "sha": "d27757c54efa999c58ce42daa0554ea411d63880",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d27757c54efa999c58ce42daa0554ea411d63880"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4d4e4c644826db03317d69a04fea03309c3ebabf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d4e4c644826db03317d69a04fea03309c3ebabf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4d4e4c644826db03317d69a04fea03309c3ebabf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d4e4c644826db03317d69a04fea03309c3ebabf/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "45f434f44d0b55d137eaebb8c0486f9cebabc869",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45f434f44d0b55d137eaebb8c0486f9cebabc869",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/45f434f44d0b55d137eaebb8c0486f9cebabc869"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 36,
      "deletions": 14
    },
    "files": [
      {
        "sha": "f77d1721535bee672b972156960b7a93bc6607a0",
        "filename": "src/interfaces/README.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d4e4c644826db03317d69a04fea03309c3ebabf/src/interfaces/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d4e4c644826db03317d69a04fea03309c3ebabf/src/interfaces/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/README.md?ref=4d4e4c644826db03317d69a04fea03309c3ebabf",
        "patch": "@@ -2,9 +2,9 @@\n \n The following interfaces are defined here:\n \n-* [`Chain`](chain.h) \u2014 used by wallet to access blockchain and mempool state. Added in [#10973](https://github.com/bitcoin/bitcoin/pull/10973).\n+* [`Chain`](chain.h) \u2014 used by wallet to access blockchain and mempool state. Added in [#14437](https://github.com/bitcoin/bitcoin/pull/14437), [#14711](https://github.com/bitcoin/bitcoin/pull/14711), [#15288](https://github.com/bitcoin/bitcoin/pull/15288), and [#10973](https://github.com/bitcoin/bitcoin/pull/10973).\n \n-* [`ChainClient`](chain.h) \u2014 used by node to start & stop `Chain` clients. Added in [#10973](https://github.com/bitcoin/bitcoin/pull/10973).\n+* [`ChainClient`](chain.h) \u2014 used by node to start & stop `Chain` clients. Added in [#14437](https://github.com/bitcoin/bitcoin/pull/14437).\n \n * [`Node`](node.h) \u2014 used by GUI to start & stop bitcoin node. Added in [#10244](https://github.com/bitcoin/bitcoin/pull/10244).\n "
      },
      {
        "sha": "2eecea28d02e1b45e8ec929417e044e823c0814a",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d4e4c644826db03317d69a04fea03309c3ebabf/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d4e4c644826db03317d69a04fea03309c3ebabf/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=4d4e4c644826db03317d69a04fea03309c3ebabf",
        "patch": "@@ -148,7 +148,7 @@ class LockImpl : public Chain::Lock\n         LockAnnotation lock(::cs_main);\n         return CheckFinalTx(tx);\n     }\n-    bool submitToMemoryPool(CTransactionRef tx, CAmount absurd_fee, CValidationState& state) override\n+    bool submitToMemoryPool(const CTransactionRef& tx, CAmount absurd_fee, CValidationState& state) override\n     {\n         LockAnnotation lock(::cs_main);\n         return AcceptToMemoryPool(::mempool, state, tx, nullptr /* missing inputs */, nullptr /* txn replaced */,\n@@ -207,8 +207,8 @@ class ChainImpl : public Chain\n     bool hasDescendantsInMempool(const uint256& txid) override\n     {\n         LOCK(::mempool.cs);\n-        auto it_mp = ::mempool.mapTx.find(txid);\n-        return it_mp != ::mempool.mapTx.end() && it_mp->GetCountWithDescendants() > 1;\n+        auto it = ::mempool.GetIter(txid);\n+        return it && (*it)->GetCountWithDescendants() > 1;\n     }\n     void relayTransaction(const uint256& txid) override\n     {\n@@ -219,7 +219,7 @@ class ChainImpl : public Chain\n     {\n         ::mempool.GetTransactionAncestry(txid, ancestors, descendants);\n     }\n-    bool checkChainLimits(CTransactionRef tx) override\n+    bool checkChainLimits(const CTransactionRef& tx) override\n     {\n         LockPoints lp;\n         CTxMemPoolEntry entry(tx, 0, 0, 0, false, 0, lp);"
      },
      {
        "sha": "037e8e9ff5d5f025663fa952e5a735fdd74514a2",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 30,
        "deletions": 8,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d4e4c644826db03317d69a04fea03309c3ebabf/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d4e4c644826db03317d69a04fea03309c3ebabf/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=4d4e4c644826db03317d69a04fea03309c3ebabf",
        "patch": "@@ -6,7 +6,6 @@\n #define BITCOIN_INTERFACES_CHAIN_H\n \n #include <optional.h>               // For Optional and nullopt\n-#include <policy/rbf.h>             // For RBFTransactionState\n #include <primitives/transaction.h> // For CTransactionRef\n \n #include <memory>\n@@ -16,17 +15,39 @@\n #include <vector>\n \n class CBlock;\n+class CFeeRate;\n class CScheduler;\n class CValidationState;\n class uint256;\n+enum class RBFTransactionState;\n struct CBlockLocator;\n struct FeeCalculation;\n \n namespace interfaces {\n \n class Wallet;\n \n-//! Interface for giving wallet processes access to blockchain state.\n+//! Interface giving clients (wallet processes, maybe other analysis tools in\n+//! the future) ability to access to the chain state, receive notifications,\n+//! estimate fees, and submit transactions.\n+//!\n+//! TODO: Current chain methods are too low level, exposing too much of the\n+//! internal workings of the bitcoin node, and not being very convenient to use.\n+//! Chain methods should be cleaned up and simplified over time. Examples:\n+//!\n+//! * The Chain::lock() method, which lets clients delay chain tip updates\n+//!   should be removed when clients are able to respond to updates\n+//!   asynchronously\n+//!   (https://github.com/bitcoin/bitcoin/pull/10973#issuecomment-380101269).\n+//!\n+//! * The relayTransactions() and submitToMemoryPool() methods could be replaced\n+//!   with a higher-level broadcastTransaction method\n+//!   (https://github.com/bitcoin/bitcoin/pull/14978#issuecomment-459373984).\n+//!\n+//! * The initMessages() and loadWallet() methods which the wallet uses to send\n+//!   notifications to the GUI should go away when GUI and wallet can directly\n+//!   communicate with each other without going through the node\n+//!   (https://github.com/bitcoin/bitcoin/pull/15288#discussion_r253321096).\n class Chain\n {\n public:\n@@ -114,8 +135,9 @@ class Chain\n         virtual bool checkFinalTx(const CTransaction& tx) = 0;\n \n         //! Add transaction to memory pool if the transaction fee is below the\n-        //! amount specified by absurd_fee (as a safeguard). */\n-        virtual bool submitToMemoryPool(CTransactionRef tx, CAmount absurd_fee, CValidationState& state) = 0;\n+        //! amount specified by absurd_fee. Returns false if the transaction\n+        //! could not be added due to the fee or for another reason.\n+        virtual bool submitToMemoryPool(const CTransactionRef& tx, CAmount absurd_fee, CValidationState& state) = 0;\n     };\n \n     //! Return Lock interface. Chain is locked when this is called, and\n@@ -154,19 +176,19 @@ class Chain\n     //! Calculate mempool ancestor and descendant counts for the given transaction.\n     virtual void getTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants) = 0;\n \n-    //! Check chain limits.\n-    virtual bool checkChainLimits(CTransactionRef tx) = 0;\n+    //! Check if transaction will pass the mempool's chain limits.\n+    virtual bool checkChainLimits(const CTransactionRef& tx) = 0;\n \n     //! Estimate smart fee.\n     virtual CFeeRate estimateSmartFee(int num_blocks, bool conservative, FeeCalculation* calc = nullptr) = 0;\n \n     //! Fee estimator max target.\n     virtual unsigned int estimateMaxBlocks() = 0;\n \n-    //! Pool min fee.\n+    //! Mempool minimum fee.\n     virtual CFeeRate mempoolMinFee() = 0;\n \n-    //! Get node max tx fee setting (-maxtxfee).\n+    //! Node max tx fee setting (-maxtxfee).\n     //! This could be replaced by a per-wallet max fee, as proposed at\n     //! https://github.com/bitcoin/bitcoin/issues/15355\n     //! But for the time being, wallets call this to access the node setting."
      }
    ]
  }
]