[
  {
    "sha": "0fb9073edd49a39a64d7c7dbf6e6100a7259c0e1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZmI5MDczZWRkNDlhMzlhNjRkN2M3ZGJmNmU2MTAwYTcyNTljMGUx",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-12-18T19:56:21Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieterw@google.com",
        "date": "2012-12-18T20:39:29Z"
      },
      "message": "Split off hash.h from util.h",
      "tree": {
        "sha": "31fa4ca99619503b79e454b5ab258bea3ab3b50a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/31fa4ca99619503b79e454b5ab258bea3ab3b50a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0fb9073edd49a39a64d7c7dbf6e6100a7259c0e1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0fb9073edd49a39a64d7c7dbf6e6100a7259c0e1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0fb9073edd49a39a64d7c7dbf6e6100a7259c0e1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0fb9073edd49a39a64d7c7dbf6e6100a7259c0e1/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": null,
    "parents": [
      {
        "sha": "6940626d08e313c5e1cd99c63aeca9da45d5b7a4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6940626d08e313c5e1cd99c63aeca9da45d5b7a4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6940626d08e313c5e1cd99c63aeca9da45d5b7a4"
      }
    ],
    "stats": {
      "total": 228,
      "additions": 121,
      "deletions": 107
    },
    "files": [
      {
        "sha": "2ca142add6932961701459ca1f3c3fe71b24bc98",
        "filename": "bitcoin-qt.pro",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fb9073edd49a39a64d7c7dbf6e6100a7259c0e1/bitcoin-qt.pro",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fb9073edd49a39a64d7c7dbf6e6100a7259c0e1/bitcoin-qt.pro",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/bitcoin-qt.pro?ref=0fb9073edd49a39a64d7c7dbf6e6100a7259c0e1",
        "patch": "@@ -144,6 +144,7 @@ HEADERS += src/qt/bitcoingui.h \\\n     src/compat.h \\\n     src/sync.h \\\n     src/util.h \\\n+    src/hash.h \\\n     src/uint256.h \\\n     src/serialize.h \\\n     src/main.h \\"
      },
      {
        "sha": "780edde90f7cb1b45ec9ae0d3e286b793fc79c56",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fb9073edd49a39a64d7c7dbf6e6100a7259c0e1/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fb9073edd49a39a64d7c7dbf6e6100a7259c0e1/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=0fb9073edd49a39a64d7c7dbf6e6100a7259c0e1",
        "patch": "@@ -3,6 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"addrman.h\"\n+#include \"hash.h\"\n \n using namespace std;\n "
      },
      {
        "sha": "bc013139bbbc051e10d1987d91605684ee7a9be1",
        "filename": "src/hash.h",
        "status": "added",
        "additions": 116,
        "deletions": 0,
        "changes": 116,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fb9073edd49a39a64d7c7dbf6e6100a7259c0e1/src/hash.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fb9073edd49a39a64d7c7dbf6e6100a7259c0e1/src/hash.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.h?ref=0fb9073edd49a39a64d7c7dbf6e6100a7259c0e1",
        "patch": "@@ -0,0 +1,116 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2012 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#ifndef BITCOIN_HASH_H\n+#define BITCOIN_HASH_H\n+\n+#include \"uint256.h\"\n+#include \"serialize.h\"\n+\n+#include <openssl/sha.h>\n+#include <openssl/ripemd.h>\n+\n+template<typename T1>\n+inline uint256 Hash(const T1 pbegin, const T1 pend)\n+{\n+    static unsigned char pblank[1];\n+    uint256 hash1;\n+    SHA256((pbegin == pend ? pblank : (unsigned char*)&pbegin[0]), (pend - pbegin) * sizeof(pbegin[0]), (unsigned char*)&hash1);\n+    uint256 hash2;\n+    SHA256((unsigned char*)&hash1, sizeof(hash1), (unsigned char*)&hash2);\n+    return hash2;\n+}\n+\n+class CHashWriter\n+{\n+private:\n+    SHA256_CTX ctx;\n+\n+public:\n+    int nType;\n+    int nVersion;\n+\n+    void Init() {\n+        SHA256_Init(&ctx);\n+    }\n+\n+    CHashWriter(int nTypeIn, int nVersionIn) : nType(nTypeIn), nVersion(nVersionIn) {\n+        Init();\n+    }\n+\n+    CHashWriter& write(const char *pch, size_t size) {\n+        SHA256_Update(&ctx, pch, size);\n+        return (*this);\n+    }\n+\n+    // invalidates the object\n+    uint256 GetHash() {\n+        uint256 hash1;\n+        SHA256_Final((unsigned char*)&hash1, &ctx);\n+        uint256 hash2;\n+        SHA256((unsigned char*)&hash1, sizeof(hash1), (unsigned char*)&hash2);\n+        return hash2;\n+    }\n+\n+    template<typename T>\n+    CHashWriter& operator<<(const T& obj) {\n+        // Serialize to this stream\n+        ::Serialize(*this, obj, nType, nVersion);\n+        return (*this);\n+    }\n+};\n+\n+\n+template<typename T1, typename T2>\n+inline uint256 Hash(const T1 p1begin, const T1 p1end,\n+                    const T2 p2begin, const T2 p2end)\n+{\n+    static unsigned char pblank[1];\n+    uint256 hash1;\n+    SHA256_CTX ctx;\n+    SHA256_Init(&ctx);\n+    SHA256_Update(&ctx, (p1begin == p1end ? pblank : (unsigned char*)&p1begin[0]), (p1end - p1begin) * sizeof(p1begin[0]));\n+    SHA256_Update(&ctx, (p2begin == p2end ? pblank : (unsigned char*)&p2begin[0]), (p2end - p2begin) * sizeof(p2begin[0]));\n+    SHA256_Final((unsigned char*)&hash1, &ctx);\n+    uint256 hash2;\n+    SHA256((unsigned char*)&hash1, sizeof(hash1), (unsigned char*)&hash2);\n+    return hash2;\n+}\n+\n+template<typename T1, typename T2, typename T3>\n+inline uint256 Hash(const T1 p1begin, const T1 p1end,\n+                    const T2 p2begin, const T2 p2end,\n+                    const T3 p3begin, const T3 p3end)\n+{\n+    static unsigned char pblank[1];\n+    uint256 hash1;\n+    SHA256_CTX ctx;\n+    SHA256_Init(&ctx);\n+    SHA256_Update(&ctx, (p1begin == p1end ? pblank : (unsigned char*)&p1begin[0]), (p1end - p1begin) * sizeof(p1begin[0]));\n+    SHA256_Update(&ctx, (p2begin == p2end ? pblank : (unsigned char*)&p2begin[0]), (p2end - p2begin) * sizeof(p2begin[0]));\n+    SHA256_Update(&ctx, (p3begin == p3end ? pblank : (unsigned char*)&p3begin[0]), (p3end - p3begin) * sizeof(p3begin[0]));\n+    SHA256_Final((unsigned char*)&hash1, &ctx);\n+    uint256 hash2;\n+    SHA256((unsigned char*)&hash1, sizeof(hash1), (unsigned char*)&hash2);\n+    return hash2;\n+}\n+\n+template<typename T>\n+uint256 SerializeHash(const T& obj, int nType=SER_GETHASH, int nVersion=PROTOCOL_VERSION)\n+{\n+    CHashWriter ss(nType, nVersion);\n+    ss << obj;\n+    return ss.GetHash();\n+}\n+\n+inline uint160 Hash160(const std::vector<unsigned char>& vch)\n+{\n+    uint256 hash1;\n+    SHA256(&vch[0], vch.size(), (unsigned char*)&hash1);\n+    uint160 hash2;\n+    RIPEMD160((unsigned char*)&hash1, sizeof(hash1), (unsigned char*)&hash2);\n+    return hash2;\n+}\n+\n+#endif"
      },
      {
        "sha": "4da16b9cdb5088e8910c859aecf4c001ea36decb",
        "filename": "src/key.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fb9073edd49a39a64d7c7dbf6e6100a7259c0e1/src/key.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fb9073edd49a39a64d7c7dbf6e6100a7259c0e1/src/key.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.h?ref=0fb9073edd49a39a64d7c7dbf6e6100a7259c0e1",
        "patch": "@@ -11,7 +11,7 @@\n #include \"allocators.h\"\n #include \"serialize.h\"\n #include \"uint256.h\"\n-#include \"util.h\"\n+#include \"hash.h\"\n \n #include <openssl/ec.h> // for EC_KEY definition\n "
      },
      {
        "sha": "e37953772e0385f5a56d7a613ab56155b9ef6e7d",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fb9073edd49a39a64d7c7dbf6e6100a7259c0e1/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fb9073edd49a39a64d7c7dbf6e6100a7259c0e1/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=0fb9073edd49a39a64d7c7dbf6e6100a7259c0e1",
        "patch": "@@ -18,6 +18,7 @@\n #include \"netbase.h\"\n #include \"protocol.h\"\n #include \"addrman.h\"\n+#include \"hash.h\"\n \n class CNode;\n class CBlockIndex;"
      },
      {
        "sha": "4f31ce9cf3476abaa539731ac3bcd4d78c9401c2",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fb9073edd49a39a64d7c7dbf6e6100a7259c0e1/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fb9073edd49a39a64d7c7dbf6e6100a7259c0e1/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=0fb9073edd49a39a64d7c7dbf6e6100a7259c0e1",
        "patch": "@@ -6,6 +6,7 @@\n #include \"netbase.h\"\n #include \"util.h\"\n #include \"sync.h\"\n+#include \"hash.h\"\n \n #ifndef WIN32\n #include <sys/fcntl.h>"
      },
      {
        "sha": "8bea0dd2b35d1a04cb1736628e1b979e4047ff8f",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 0,
        "deletions": 106,
        "changes": 106,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fb9073edd49a39a64d7c7dbf6e6100a7259c0e1/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fb9073edd49a39a64d7c7dbf6e6100a7259c0e1/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=0fb9073edd49a39a64d7c7dbf6e6100a7259c0e1",
        "patch": "@@ -24,9 +24,6 @@ typedef int pid_t; /* define for Windows compatibility */\n #include <boost/date_time/gregorian/gregorian_types.hpp>\n #include <boost/date_time/posix_time/posix_time_types.hpp>\n \n-#include <openssl/sha.h>\n-#include <openssl/ripemd.h>\n-\n #include \"netbase.h\" // for AddTimeData\n \n typedef long long  int64;\n@@ -414,109 +411,6 @@ bool SoftSetBoolArg(const std::string& strArg, bool fValue);\n \n \n \n-template<typename T1>\n-inline uint256 Hash(const T1 pbegin, const T1 pend)\n-{\n-    static unsigned char pblank[1];\n-    uint256 hash1;\n-    SHA256((pbegin == pend ? pblank : (unsigned char*)&pbegin[0]), (pend - pbegin) * sizeof(pbegin[0]), (unsigned char*)&hash1);\n-    uint256 hash2;\n-    SHA256((unsigned char*)&hash1, sizeof(hash1), (unsigned char*)&hash2);\n-    return hash2;\n-}\n-\n-class CHashWriter\n-{\n-private:\n-    SHA256_CTX ctx;\n-\n-public:\n-    int nType;\n-    int nVersion;\n-\n-    void Init() {\n-        SHA256_Init(&ctx);\n-    }\n-\n-    CHashWriter(int nTypeIn, int nVersionIn) : nType(nTypeIn), nVersion(nVersionIn) {\n-        Init();\n-    }\n-\n-    CHashWriter& write(const char *pch, size_t size) {\n-        SHA256_Update(&ctx, pch, size);\n-        return (*this);\n-    }\n-\n-    // invalidates the object\n-    uint256 GetHash() {\n-        uint256 hash1;\n-        SHA256_Final((unsigned char*)&hash1, &ctx);\n-        uint256 hash2;\n-        SHA256((unsigned char*)&hash1, sizeof(hash1), (unsigned char*)&hash2);\n-        return hash2;\n-    }\n-\n-    template<typename T>\n-    CHashWriter& operator<<(const T& obj) {\n-        // Serialize to this stream\n-        ::Serialize(*this, obj, nType, nVersion);\n-        return (*this);\n-    }\n-};\n-\n-\n-template<typename T1, typename T2>\n-inline uint256 Hash(const T1 p1begin, const T1 p1end,\n-                    const T2 p2begin, const T2 p2end)\n-{\n-    static unsigned char pblank[1];\n-    uint256 hash1;\n-    SHA256_CTX ctx;\n-    SHA256_Init(&ctx);\n-    SHA256_Update(&ctx, (p1begin == p1end ? pblank : (unsigned char*)&p1begin[0]), (p1end - p1begin) * sizeof(p1begin[0]));\n-    SHA256_Update(&ctx, (p2begin == p2end ? pblank : (unsigned char*)&p2begin[0]), (p2end - p2begin) * sizeof(p2begin[0]));\n-    SHA256_Final((unsigned char*)&hash1, &ctx);\n-    uint256 hash2;\n-    SHA256((unsigned char*)&hash1, sizeof(hash1), (unsigned char*)&hash2);\n-    return hash2;\n-}\n-\n-template<typename T1, typename T2, typename T3>\n-inline uint256 Hash(const T1 p1begin, const T1 p1end,\n-                    const T2 p2begin, const T2 p2end,\n-                    const T3 p3begin, const T3 p3end)\n-{\n-    static unsigned char pblank[1];\n-    uint256 hash1;\n-    SHA256_CTX ctx;\n-    SHA256_Init(&ctx);\n-    SHA256_Update(&ctx, (p1begin == p1end ? pblank : (unsigned char*)&p1begin[0]), (p1end - p1begin) * sizeof(p1begin[0]));\n-    SHA256_Update(&ctx, (p2begin == p2end ? pblank : (unsigned char*)&p2begin[0]), (p2end - p2begin) * sizeof(p2begin[0]));\n-    SHA256_Update(&ctx, (p3begin == p3end ? pblank : (unsigned char*)&p3begin[0]), (p3end - p3begin) * sizeof(p3begin[0]));\n-    SHA256_Final((unsigned char*)&hash1, &ctx);\n-    uint256 hash2;\n-    SHA256((unsigned char*)&hash1, sizeof(hash1), (unsigned char*)&hash2);\n-    return hash2;\n-}\n-\n-template<typename T>\n-uint256 SerializeHash(const T& obj, int nType=SER_GETHASH, int nVersion=PROTOCOL_VERSION)\n-{\n-    CHashWriter ss(nType, nVersion);\n-    ss << obj;\n-    return ss.GetHash();\n-}\n-\n-inline uint160 Hash160(const std::vector<unsigned char>& vch)\n-{\n-    uint256 hash1;\n-    SHA256(&vch[0], vch.size(), (unsigned char*)&hash1);\n-    uint160 hash2;\n-    RIPEMD160((unsigned char*)&hash1, sizeof(hash1), (unsigned char*)&hash2);\n-    return hash2;\n-}\n-\n-\n /** Median filter over a stream of values.\n  * Returns the median of the last N numbers\n  */"
      }
    ]
  }
]