dcousens,2015-08-21T05:20:56Z,concept ACK\n,https://github.com/bitcoin/bitcoin/pull/6579#issuecomment-133289586,133289586,
jonasschnelli,2015-08-21T06:11:28Z,utACK.\n,https://github.com/bitcoin/bitcoin/pull/6579#issuecomment-133298746,133298746,
pstratem,2015-08-21T06:14:56Z,utACK (testing now)\n,https://github.com/bitcoin/bitcoin/pull/6579#issuecomment-133299448,133299448,
laanwj,2015-08-21T08:00:34Z,"Concept ACK.\nProcess-wise, this indeed does need a BIP.\n",https://github.com/bitcoin/bitcoin/pull/6579#issuecomment-133320397,133320397,
evGUzQIEQaL4,2015-08-21T10:25:52Z,BIP on the mailing list (still unnumbered).\n\nhttps://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-August/010535.html\n,https://github.com/bitcoin/bitcoin/pull/6579#issuecomment-133365934,133365934,
evoskuil,2015-08-21T11:18:40Z,Libbitcoin doesn't support BIP37 (and doesn't intend to). This allows us to fix the resulting protocol break.\n,https://github.com/bitcoin/bitcoin/pull/6579#issuecomment-133375376,133375376,
davecgh,2015-08-21T17:59:49Z,I'm happy to see this being added.  We've wanted this in btcd for quite some time as currently the only ways to not support bloom filters are either a protocol break or simply not applying the filters while claiming to do so.\n,https://github.com/bitcoin/bitcoin/pull/6579#issuecomment-133513576,133513576,
petertodd,2015-08-24T02:09:53Z,"Tested ACK (tested w/ Android Bitcoin Wallet, rescans with and without NODE_BLOOM work as expected)\n",https://github.com/bitcoin/bitcoin/pull/6579#issuecomment-133991022,133991022,
jgarzik,2015-08-24T03:47:36Z,"ACK conditional on not breaking notable groups of users in the field.  @petertodd testing w/ Android Bitcoin Wallet is much appreciated and is excellent test coverage.\n\nThe ""some wallets are moving to centralized servers"" argument is weak.  The desire is robust service for users - especially those using decentralized wallets; would not want to hurt active, decentralized solutions because some ot",https://github.com/bitcoin/bitcoin/pull/6579#issuecomment-134009655,134009655,
jgarzik,2015-08-24T04:04:23Z,"Hum.  Some further thoughts:\n\nThe general goal is to phase out this feature, yes?\n\nCurrently we have bloom support + no node_bloom bit.\n\nSeems silly to introduce a NODE_BLOOM bit only to eliminate bloom support - the natural end state of a default-bloom-disabled eventual ship mode after this + further changes, subsequently widely deployed.\n\nFurther, the end user client PoV is that P2P node",https://github.com/bitcoin/bitcoin/pull/6579#issuecomment-134021930,134021930,
evGUzQIEQaL4,2015-08-24T04:10:59Z,"> The general goal is to phase out this feature, yes?\n\nI didn't bump the BIP with that in mind. The intent is just to be able to signal to wallet users that there's no point wasting your time and bandwidth sending filterload messages that are never going to do anything. Many SPV wallets seem to blindly follow whatever DNS seeds return, so if you punt them they just come straight back with the sa",https://github.com/bitcoin/bitcoin/pull/6579#issuecomment-134024497,134024497,
laanwj,2015-08-24T10:31:18Z,"IMO, the goal of this is not to phase out the feature. Sure, it could be phased out at some point but some SPV wallets are using it so there is no hurry.\n\nThe goal is to make it optional for node implementations to implement it. As bloom filters are unnecessary for inter-full-node communications, IMO coupling NODE_NETWORK and support for bloom filters was a mistake and this corrects that.\n",https://github.com/bitcoin/bitcoin/pull/6579#issuecomment-134139438,134139438,
mikehearn,2015-08-24T14:20:45Z,"NACK - we went around all this in 2013 and the same arguments were made then. Nothing has changed since that time.\n\nThere is no need to make this optional, it doesn't help anyone and it can easily hurt. For instance, the next thing that will happen is that Peter Todd runs around telling everyone it's dangerous and they should disable it (he is wrong, but he'll do so anyway).\n\nYes, obviously it",https://github.com/bitcoin/bitcoin/pull/6579#issuecomment-134222138,134222138,
schildbach,2015-08-24T14:32:33Z,I agree with @mikehearn on this one. Bloom filters are important for smartphone wallets and nothing is won by not supporting them.\n,https://github.com/bitcoin/bitcoin/pull/6579#issuecomment-134227463,134227463,
dcousens,2015-08-24T14:44:59Z,"I'm personally in support with the intent pointed out by @evGUzQIEQaL4,  such that the PR should:\n- Signal intent to ignore those messages so I don't denial of service attack peoples wallets\n- [Allow ability to] easily disable BIP37 on high reliability nodes without having to manually patch\n\nI also think that the current default behaviour of supporting BIP37 should **not** be disabled until a ",https://github.com/bitcoin/bitcoin/pull/6579#issuecomment-134230406,134230406,
jgarzik,2015-08-24T14:51:05Z,"1) It sounds like this does negatively impact major user segments.\n\n2) The problem of bit inversion & backwards compatibility remains.  In-field client experience will be of nodes randomly failing to produce a proper filter\* response as expected, because they are unaware of NODE_BLOOM.\n",https://github.com/bitcoin/bitcoin/pull/6579#issuecomment-134232071,134232071,
gavinandresen,2015-08-24T15:08:50Z,"NACK from me, I'll repeat what I said last year: ""no consensus this is a good idea.""\n",https://github.com/bitcoin/bitcoin/pull/6579#issuecomment-134239911,134239911,
laanwj,2015-08-24T15:09:03Z,"Exactly @dcousens.\nFYI this **doesn't** change the default of supporting bloom filters in Bitcoin Core. It does make it possible to _signal_ not supporting it for implementations that - generally already -  do not support it (such as btcd, obelisk)\n\n``` c++\nif (GetBoolArg(""-peerbloomfilters"", true))\n    nLocalServices |= NODE_BLOOM;\n```\n\nMost SPV wallets are mobile applications, thus easil",https://github.com/bitcoin/bitcoin/pull/6579#issuecomment-134240037,134240037,
jgarzik,2015-08-24T15:10:44Z,"""I assume applications may be easily updated"" is a poor approach to backwards compat.\n",https://github.com/bitcoin/bitcoin/pull/6579#issuecomment-134240995,134240995,
laanwj,2015-08-24T15:12:02Z,Well the alternative (as currently used) is to ignore bloom commands without signaling it. Or disconnecting clients that request filtering functionality.\nIs that better for backwards compatiblity?\n,https://github.com/bitcoin/bitcoin/pull/6579#issuecomment-134241719,134241719,
mikehearn,2015-08-24T15:14:58Z,"The alternative is to not open a listening port. You won't appear in the DNS seeds, you won't get clients assuming you provide functionality you don't - it's a win.\n\nAFAICT the only people who care about this are those who want to serve data to the network with an incomplete implementation of the protocol. Nobody is forcing them to serve data, and nobody is forcing them to use or write incomplet",https://github.com/bitcoin/bitcoin/pull/6579#issuecomment-134243492,134243492,
laanwj,2015-08-24T15:20:37Z,"Users should have the choice to not serve SPV clients. It's their node, and their choice. It's not like a controversial hardfork that everyone has to agree on...\n",https://github.com/bitcoin/bitcoin/pull/6579#issuecomment-134246078,134246078,
jgarzik,2015-08-24T15:31:01Z,@mikehearn \n1) Agree on user benefit\n\n2) Let's not assume about others motivations.  It remains true that there is an attack vector.\n,https://github.com/bitcoin/bitcoin/pull/6579#issuecomment-134251968,134251968,
mikehearn,2015-08-24T15:32:26Z,"I just posted some hard data on the DoS attack risk to the mailing list.\n\nSummary is: I implemented a program that does a filter-a-lot attack. It turns out to not really affect anything, and 90% of the CPU usage is anyway in just loading the block from disk, not doing the filtering.\n",https://github.com/bitcoin/bitcoin/pull/6579#issuecomment-134252693,134252693,
laanwj,2015-08-24T15:35:07Z,That's why it is an I/O DoS.\n,https://github.com/bitcoin/bitcoin/pull/6579#issuecomment-134253881,134253881,
jgarzik,2015-08-24T15:37:57Z,What @laanwj said...\n,https://github.com/bitcoin/bitcoin/pull/6579#issuecomment-134254861,134254861,
mikehearn,2015-08-24T15:40:02Z,"It's not an IO DoS. Please read the email I sent. There is no DoS - no service is denied, which is the essential element of a DoS attack.\n\nbitcoind spends much more time just deserializing the blocks than it does waiting for disk seeks. If it was an IOP DoS then CPU usage would be low. In fact it pegs the core.\n",https://github.com/bitcoin/bitcoin/pull/6579#issuecomment-134255467,134255467,
sipa,2015-08-24T15:40:41Z,"Even ignoring the DoS argument, the fact is that there are codebases that\ndo not support this feature...\n",https://github.com/bitcoin/bitcoin/pull/6579#issuecomment-134255613,134255613,
laanwj,2015-08-24T15:45:43Z,"The exact impact depends on the speed of the disk and the speed of the CPU.\nIt is a fact that allowing a client to request blocks without sending them over the network opens up the possibility to generate lots of I/O. There is not even a way to optimize or index for it.\n\nObviously I agree that bloom filtering provides a useful service, that's why it deserves a service bit. Otherwise it should j",https://github.com/bitcoin/bitcoin/pull/6579#issuecomment-134256595,134256595,
mikehearn,2015-08-24T15:51:29Z,The attack doesn't let you generate lots of I/O because bitcoind is single threaded and spends most of its time digesting the data it just loaded. IO is simply not a bottleneck in this attack at all. I tested this both on my laptop and the bog-standard VPS I had for the last ~15 years.\n\nIs there any experimental data I can give you that would convince you this theory is wrong?\n\n@sipa Any proto,https://github.com/bitcoin/bitcoin/pull/6579#issuecomment-134258033,134258033,
dcousens,2015-08-24T16:03:32Z,"> Otherwise it'd become really hard to implement anything, you'd have to try and implement sane fallbacks for every case and eventually it just gets nuts\n\nI thought the point of this was to be trust less; in which case,  we have to have sane fall backs.\n\nI'd rather ask nodes if they support a service, and if they do,  penalize them if they fail to provide that service.\nRight now,  I might pen",https://github.com/bitcoin/bitcoin/pull/6579#issuecomment-134264910,134264910,
laanwj,2015-08-24T16:04:17Z,"@mikehearn Ok, it doesn't strictly need to be single-threaded, though. That's an artifact of how things are handled in BitcoinCore's current implementation. Probably a cs_main lock that is held all the time. \nI think that's a good point, in a way: by artificially slowing down bloom queries the DoS can be avoided: don't read blocks from disk faster than you would if you had to send them over the n",https://github.com/bitcoin/bitcoin/pull/6579#issuecomment-134265215,134265215,
Roasbeef,2015-08-24T16:06:51Z,"For the record: btcd _does_ in fact fully support bloom filtering. \n\nHowever, [there is a patch](https://github.com/btcsuite/btcd/pull/317) that was proposed earlier this year which introduces a CLI flag that if enabled, just sends `merkleblock` messages containing the entire, unfiltered block (lowering CPU utilization, but increasing bandwidth usage for the node). \n",https://github.com/bitcoin/bitcoin/pull/6579#issuecomment-134267718,134267718,
TheBlueMatt,2015-08-24T16:13:38Z,"This discussion seems to have been derailed, so let me make this clear: Neither this pull nor the BIP has any stated intention of phasing out bloom filtering support in the protocol. As much as I'd love to, I 100% agree with @mikehearn here, that would break any ability of SPV clients to operate on the P2P network (either as a way to double-check centralized servers, or otherwise), and that is rea",https://github.com/bitcoin/bitcoin/pull/6579#issuecomment-134273468,134273468,
TheBlueMatt,2015-08-24T16:25:23Z,"@jgarzik re: clients being updated: I'd love to hear a better way? Right now, as an SPV client expecting bloom filtering support, you can connect to a number of nodes, and they will disconnect you/not filter/etc. This allows us to keep exactly that same behavior (for nodes which do not disable the enabled-by-default flag), while giving SPV clients a better way to find peers after a relatively smal",https://github.com/bitcoin/bitcoin/pull/6579#issuecomment-134288085,134288085,
davecgh,2015-08-24T16:30:13Z,"I want to clarify that we don't like not having a proper option to disable the feature in `btcd` not because we simply don't want to implement that part of the protocol (it is already done and has been for over a year), rather because it is a dangerous, low-cost attack vector and we want to provide our users with the **choice**.\n\nThis isn't some theoretical concern either.  Back when we implemen",https://github.com/bitcoin/bitcoin/pull/6579#issuecomment-134290734,134290734,
TheBlueMatt,2015-08-24T16:33:24Z,"@davecgh Sadly, there are other such attack codes already public (dont know about their effectiveness, however), eg https://github.com/petertodd/bloom-io-attack\n",https://github.com/bitcoin/bitcoin/pull/6579#issuecomment-134291659,134291659,
mikehearn,2015-08-24T16:38:17Z,"Dave, if you send me the code of your attack tool I'll compare it to mine and see if I can reproduce what you saw with Bitcoin Core/XT. \n\nRegardless, this entire approach is wrong. You don't fix denial of service attacks by denying service to your users! That's exactly what the attacker wants. You fix them with better resource scheduling, prioritisation and potentially bans, to ensure your real ",https://github.com/bitcoin/bitcoin/pull/6579#issuecomment-134293524,134293524,
dcousens,2015-08-24T16:51:57Z,"> @TheBlueMatt Nodes that don't want to implement the protocol can just not listen, or (at worst) just disconnect peers that want this service to make them go away, just as they can today.\n\nExcept,  that sucks.   I'm not going to repeat my comments,  but to avoid you just stepping over them,  here is a [link](https://github.com/bitcoin/bitcoin/pull/6579#issuecomment-134264910).\n",https://github.com/bitcoin/bitcoin/pull/6579#issuecomment-134297627,134297627,
TheBlueMatt,2015-08-24T17:07:18Z,"@mikehearn I was also referring to some Bitcoin Core nodes which are patched to not support bloom filtering, eg for some miner relaynodes where sleeping for one second responding to some bloom requests is a huge problem.\n",https://github.com/bitcoin/bitcoin/pull/6579#issuecomment-134303007,134303007,
mikehearn,2015-08-24T17:22:22Z,"Those nodes should not listen at all. If someone finds a new kind of DoS attack that does actually cause DoS against the RPC interface, you'd be vulnerable. If your node is super-critical and very latency sensitive, just not listening solves all kinds of potential problems in one go.\n\nLook - I realise that just having a node bit is not the end of the world. But it also doesn't solve anything, as",https://github.com/bitcoin/bitcoin/pull/6579#issuecomment-134306986,134306986,
TheBlueMatt,2015-08-24T17:26:26Z,"@mikehearn Those nodes absolutely should listen, in fact that is the reason they exist - to listen and get as many connections as possible out to the network.\n",https://github.com/bitcoin/bitcoin/pull/6579#issuecomment-134307879,134307879,
mikehearn,2015-08-24T17:36:27Z,"Oh, I see where this goes - of course, a node can easily establish lots of outbound connections, but Core doesn't currently allow that to be configured, does it. So the only way to get lots of connections is to listen.\n\nBut that's a self-imposed constraint. There's a patch to fix it, it could be merged tomorrow. Then miner nodes could have lots of connections without listening.\n",https://github.com/bitcoin/bitcoin/pull/6579#issuecomment-134311393,134311393,
TheBlueMatt,2015-08-24T17:45:00Z,"I think this line of discussion has gone rather tangential to the issue at hand. Sufficient to say, some people do, today, run listening nodes which, for perfectly logical reasons (not just ""I dont want to implement this""), do not support filtered connections but nonetheless support the rest of the protocol.\n",https://github.com/bitcoin/bitcoin/pull/6579#issuecomment-134313800,134313800,
GamerSg,2015-08-24T18:03:02Z,"I fully agree that there should be an option to turn this off.\n\nI run 3 full nodes, 1 on a production server and 2 on my personal machines. \n\nI find it absurd that i cannot turn off bloom filtering on my production server where bitcoind runs on the same machine as my webserver and DB. The site/service should not be disrupted because bitcoind is busy serving some guy on a SPV wallet who wants t",https://github.com/bitcoin/bitcoin/pull/6579#issuecomment-134319493,134319493,
mikehearn,2015-08-24T18:09:43Z,"@GamerSg My tests don't seem to indicate any actual issue with filtering, but I do understand your concern. For a production critical node you want to minimise things that can go wrong and that's entirely reasonable.\n\nA better way to give you what you want is to let outbound connections be configured and then you can disable listening. That means you are protected against _any_ funny protocol ga",https://github.com/bitcoin/bitcoin/pull/6579#issuecomment-134321470,134321470,
gmaxwell,2015-08-24T18:31:57Z,"@mikehearn No one is suggesting removing the functionality, or even disabling it by default. All that is being discussed is making it optional in a way that doesn't break users completely-- usually a pretty good principle of protocol design for resource intensive functionality. Sometimes the cost/complexity with making something optional isn't worth it-- but for resource intensive features, it oft",https://github.com/bitcoin/bitcoin/pull/6579#issuecomment-134329986,134329986,
laanwj,2015-08-25T00:15:10Z,"@mikehearn Your suggestion for #6014 is _typical_ of the kind of shallow half-solutions you've been pursuing in your fork.\n\nSure, disabling listening will make it significantly harder to target you specifically.\nHowever it is no robust solution: if the goal is to attack the network then setting up 'trap' nodes that attack any connecting full node would work as well. Furthermore by combining dif",https://github.com/bitcoin/bitcoin/pull/6579#issuecomment-134422154,134422154,
dcousens,2015-08-25T00:58:28Z,"@mikehearn you mentioned the following:\n\n> the alternative also sucks for a different set of people.\n\nBut you have failed to address why this is actually a problem? (or address any of my points for that matter).\n\nThe arguments you presented have been based around disruption to services and users,  yet,  this change **does not** change the protocols current availability in **any** way.\n\nYou",https://github.com/bitcoin/bitcoin/pull/6579#issuecomment-134431566,134431566,
evGUzQIEQaL4,2015-08-25T03:01:07Z,"@Roasbeef Sorry misread other btd commenter, so you support BIP37 but would prefer not to for denial of service reasons? That seems quite reasonable. \n\n> However, there is a patch that was proposed earlier this year which introduces a CLI flag that if enabled, just sends merkleblock messages containing the entire, unfiltered block (lowering CPU utilization, but increasing bandwidth usage for the",https://github.com/bitcoin/bitcoin/pull/6579#issuecomment-134460429,134460429,
evoskuil,2015-08-25T06:34:31Z,"If everyone disables listening, how exactly do outbound connections work?\n",https://github.com/bitcoin/bitcoin/pull/6579#issuecomment-134496279,134496279,
evGUzQIEQaL4,2015-08-25T07:12:46Z,"> I think we'll probably add that to XT, as the arguments against it weren't really convincing to me or Gavin, and as we can see above, Matt is arguing that useful features for clients should be disabled because you ""must"" listen if you have a miner node. But that's only because the above patch wasn't merged. If it was, that logic would no longer apply.\n\n@mikehearn  That's ludicrous, you know th",https://github.com/bitcoin/bitcoin/pull/6579#issuecomment-134506534,134506534,
mikehearn,2015-08-25T11:18:16Z,"Well, this is drifting off topic - but bitnodes.io doesn't hold connections open all the time by any means, which is why they appear so often in the logs. Most of the sockets that I can see being used on my nodes are by long term nodes, or transient SPV wallets used by real users.\n\nRegardless, I was responding to the argument ""you have to listen to get lots of connections which is why everything",https://github.com/bitcoin/bitcoin/pull/6579#issuecomment-134557453,134557453,
mikehearn,2015-08-25T11:19:27Z,"@laanwj By the way, you make it sound like hijacking BGP is something anyone can do from their bog-standard Windows box. All attacks have costs and all you can ever do is raise those costs. The cost difference between ""make a TCP connection and send a message"" and ""do a globally visible BGP hijack"" is ..... extremely large. I'll take it.\n",https://github.com/bitcoin/bitcoin/pull/6579#issuecomment-134557666,134557666,
evGUzQIEQaL4,2015-08-25T11:32:24Z,"> It adds complexity that is only wanted by a tiny number of node implementations (just libbitcoin and pseudo-node I think?), but every wallet author will have to deal with.\n\nSeeing as the majority of SPV wallets are backed by BitcoinJ, you can deal with them quite handily in a single change. The authors of btcd also commented that they would like it given their concerns of denial of service, wh",https://github.com/bitcoin/bitcoin/pull/6579#issuecomment-134559901,134559901,
mikehearn,2015-08-25T11:55:02Z,I did publish my tests: see my email to the mailing list. If you mean publish the code then I won't do that for the same reasons Dave gave. Peter Todd _has_ published a program which is rather similar (and I notice it pretends to be bitcoinj - that's piss poor behaviour right there).\n\nI have a snapshot of the CPU profiles saved to disk. I can send them to you if you like. They show about 90% of ,https://github.com/bitcoin/bitcoin/pull/6579#issuecomment-134562922,134562922,
evGUzQIEQaL4,2015-08-25T12:34:37Z,"@mikehearn So you wouldn't have a problem with a Bitcoin Core option that disabled BIP37 responses entirely without making any attempt to signal it to its peers? Is dropping them the best, faking filtering and returning blank blocks, or just ignoring those responses entirely? You're the one who is going to need to make sure BitcoinJ can handle those situations properly so your contributions here a",https://github.com/bitcoin/bitcoin/pull/6579#issuecomment-134571196,134571196,
mikehearn,2015-08-25T15:59:08Z,> @mikehearn So you wouldn't have a problem with a Bitcoin Core option that disabled BIP37 responses entirely without making any attempt to signal it to its peers? \n\nHow did you arrive at that conclusion? Of course I would. I'm arguing it shouldn't be an optional part of the protocol.\n\n> I guess it's just a bit weird to have changes denied because someone did all this testing which shows every,https://github.com/bitcoin/bitcoin/pull/6579#issuecomment-134647822,134647822,
evGUzQIEQaL4,2015-08-25T16:34:47Z,"> How did you arrive at that conclusion? Of course I would. I'm arguing it shouldn't be an optional part of the protocol.\n\nSo far your arguments have been complaining about protocol modification time, I don't see why you think all nodes should be serving BIP37. They already don't, and there's no requirement for inter full node communication to ever need it. \n\n> Now I'm trying to figure out why",https://github.com/bitcoin/bitcoin/pull/6579#issuecomment-134664259,134664259,
mikehearn,2015-08-25T16:45:30Z,"I'm starting to feel this debate will go nowhere.\n\n> So far your arguments have been complaining about protocol modification time\n\nI already said in my comment above, that I don't think this is a good idea for a whole bunch of reasons, one of which is that supporting it would take a big pile of time away from more important things. But that's not the _only_ reason.\n\n> As far as I'm aware the",https://github.com/bitcoin/bitcoin/pull/6579#issuecomment-134666945,134666945,
evGUzQIEQaL4,2015-08-25T17:00:56Z,"> I've yet to find anyone other than academic researchers who actually care about doing analysis on Bloom filters,\n\n""Nobody cares"" is a pretty poor privacy defense, at the very minimum captured bloom filter leaks would be an extremely potent tool for blackmail. \n\n> I guess you have no thoughts on better scaling protocols.\n\n""Scaling"" at the detriment of user privacy and node stability is insa",https://github.com/bitcoin/bitcoin/pull/6579#issuecomment-134670653,134670653,
dexX7,2015-08-25T17:01:54Z,"It seems useful to signal the supported services, and since `NODE_BLOOM` appears to be (willingly or unwillingly) not available at any time, I can see how this service bit provides value. The discussion whether it can optionally be disabled seems pretty unrelated though.\n\nI'm wondering, how it plays together with block pruning, and I'd assume if pruning is enabled, then `NODE_BLOOM` should be di",https://github.com/bitcoin/bitcoin/pull/6579#issuecomment-134670906,134670906,
evGUzQIEQaL4,2015-08-25T17:04:16Z,"As far as I know there's no bad interaction between a pruned node and NODE_BLOOM, it could still serve BIP37 filters if it chose to and has the blocks available. New BIP37 SPV wallets won't attempt to download very old blocks so it's likely that they will be able to completely sync from even a heavily pruned node. \n",https://github.com/bitcoin/bitcoin/pull/6579#issuecomment-134671865,134671865,
sipa,2015-08-25T17:06:30Z,"Given that pruning will likely become more granular, with nodes advertizing\nranges or other subsets of blocks they maintain, I think the meaning of\nNODE_BLOOM should be ""I support the filter\* commands and will apply the\nfilters to reportee blocks and transactions, regardless of what blocks and\ntransactions I actually have available"", and not ""I serve all filtered\nblocks"".\n",https://github.com/bitcoin/bitcoin/pull/6579#issuecomment-134672312,134672312,
petertodd,2015-08-25T17:20:53Z,@sipa That was my intent with NODE_BLOOM as well in the original BIP I wrote.\n,https://github.com/bitcoin/bitcoin/pull/6579#issuecomment-134676372,134676372,
TheBlueMatt,2015-08-25T17:23:51Z,"Indeed, @sipa, that is what the current BIP text states.\n\nOn August 25, 2015 10:21:05 AM PDT, Peter Todd notifications@github.com wrote:\n\n> @sipa That was my intent with NODE_BLOOM as well in the original BIP I\n> wrote.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/bitcoin/bitcoin/pull/6579#issuecomment-134676372\n",https://github.com/bitcoin/bitcoin/pull/6579#issuecomment-134677198,134677198,
laanwj,2015-09-04T16:36:21Z,"ACK, apart from nit about `getinfo`.\n",https://github.com/bitcoin/bitcoin/pull/6579#issuecomment-137785529,137785529,
TheBlueMatt,2015-09-06T06:29:34Z,Rebased and removed the getinfo commit from @petertodd's original pull.\n,https://github.com/bitcoin/bitcoin/pull/6579#issuecomment-138046642,138046642,
dcousens,2015-09-06T14:26:36Z,utACK (again)\n,https://github.com/bitcoin/bitcoin/pull/6579#issuecomment-138089689,138089689,
petertodd,2015-09-07T17:13:07Z,ACK (again)\n,https://github.com/bitcoin/bitcoin/pull/6579#issuecomment-138342082,138342082,
sipa,2016-08-25T06:57:01Z,"As answered elsewhere, you need to disconnect, or the peer will waste time waiting for your responses later. It is polite to disconnect then, so they can find a better peer.\n",https://github.com/bitcoin/bitcoin/pull/6579#issuecomment-242297309,242297309,
petertodd,2015-08-21T05:50:11Z,"Oh actually, I was thinking for the first release, not only allow pfrom->nVersion < NO_BLOOM_VERSION clients to send filterX messages, but also respond to them, to give a bit of time for those clients to be upgraded. (this could even be gated to some fixed deadline in the future)\n\nMy original logic re: disconnecting clients immediately was to give those clients an opportunity to find another nod",https://github.com/bitcoin/bitcoin/pull/6579#discussion_r37608063,37608063,src/main.cpp
petertodd,2015-08-21T05:50:43Z,stray space\n,https://github.com/bitcoin/bitcoin/pull/6579#discussion_r37608079,37608079,src/rpcmisc.cpp
petertodd,2015-08-21T05:50:55Z,another stray space\n,https://github.com/bitcoin/bitcoin/pull/6579#discussion_r37608087,37608087,src/rpcmisc.cpp
pstratem,2015-08-21T05:59:38Z,"I believe that there is sufficient time for clients that need the NODE_BLOOM commands to upgrade before a client with this patch is even significantly deployed to the network, much less bloom filters widely disabled.\n",https://github.com/bitcoin/bitcoin/pull/6579#discussion_r37608346,37608346,src/main.cpp
jonasschnelli,2015-08-21T06:10:12Z,Is the else part required? With a score of 100 it get directly banned (with the default `-banscore`) anyways?\n,https://github.com/bitcoin/bitcoin/pull/6579#discussion_r37608662,37608662,src/main.cpp
petertodd,2015-08-21T06:11:58Z,"True, and of course it's easy to patch the DNS seeds that the affected wallets use to only return nodes that have NODE_BLOOM set - BitcoinJ doesn't do any peer addr caching, relying totally on the DNS seeds every time.\n",https://github.com/bitcoin/bitcoin/pull/6579#discussion_r37608724,37608724,src/main.cpp
petertodd,2015-08-21T06:13:14Z,"Well, the idea would be that >= NO_BLOOM_VERSION should _know_ not to send filters to non-bloom-supporting peers - it's misbehavior in that case.\n",https://github.com/bitcoin/bitcoin/pull/6579#discussion_r37608755,37608755,src/main.cpp
TheBlueMatt,2015-08-21T17:07:06Z,"Nope, purposeful space. It makes it lign up on RPC output.\n",https://github.com/bitcoin/bitcoin/pull/6579#discussion_r37655045,37655045,src/rpcmisc.cpp
TheBlueMatt,2015-08-21T17:07:09Z,"Nope, purposeful space. It makes it lign up on RPC output.\n",https://github.com/bitcoin/bitcoin/pull/6579#discussion_r37655047,37655047,src/rpcmisc.cpp
TheBlueMatt,2015-08-21T17:08:45Z,"Oops, yes, I meant to do what @petertodd said first, happens when you write code then change it without thinking :).\n",https://github.com/bitcoin/bitcoin/pull/6579#discussion_r37655176,37655176,src/main.cpp
laanwj,2015-09-03T15:53:09Z,"What is the point in ignoring filter\* messages, instead of disconnecting the asking nodes? I don't see how that's any friendlier.\nI like @petertodd's solution as well to respond to old `clients< NO_BLOOM_VERSION` for now then in a later release, add the disconnect.\nBut I don't see the point in this ignore behavior. It's worst of both worlds.\n",https://github.com/bitcoin/bitcoin/pull/6579#discussion_r38662023,38662023,src/main.cpp
petertodd,2015-09-03T16:03:36Z,"FWIW I did test my original disconnect instantly approach, and (at the time) the wallets I tested it with handled it just fine.\n",https://github.com/bitcoin/bitcoin/pull/6579#discussion_r38663269,38663269,src/main.cpp
petertodd,2015-09-03T16:05:07Z,"But yeah, a release that changes nothing for old version clients is 100% ok by me, and it should apply the filter to avoid bandwidth exhaustion. (which itself indicates stupid code in existing SPV wallets...)\n",https://github.com/bitcoin/bitcoin/pull/6579#discussion_r38663418,38663418,src/main.cpp
sipa,2015-09-03T16:05:27Z,"ACK on ""if not willing to serve a request, disconnect"".\n",https://github.com/bitcoin/bitcoin/pull/6579#discussion_r38663470,38663470,src/main.cpp
petertodd,2015-09-03T16:06:56Z,"ACK on ""if not willing to serve a request, disconnect"" too.\n",https://github.com/bitcoin/bitcoin/pull/6579#discussion_r38663633,38663633,src/main.cpp
TheBlueMatt,2015-09-03T17:51:08Z,"@laanwj I think you misread, that behavior was a bug and was unintentional. The current code does not ignore filter requests, ever, I agree that would be a bad idea. As the BIP has always suggested, it currently serves filtered connections to clients which propose an old version number, and disconnects clients with a new version number (with DoS prejudice). If you follow the two TODO comments (rem",https://github.com/bitcoin/bitcoin/pull/6579#discussion_r38674971,38674971,src/main.cpp
laanwj,2015-09-03T18:00:35Z,"@thebluematt Ah you're right, did't notice the `&& from->nVersion >= NO_BLOOM_VERSION` in the outer if.\n",https://github.com/bitcoin/bitcoin/pull/6579#discussion_r38676185,38676185,src/main.cpp
laanwj,2015-09-04T16:35:45Z,"Please see the comment at the top of getinfo(). This call is going to be deprecated in the future and should not be extended anymore: https://github.com/bitcoin/bitcoin/blob/master/src/rpcmisc.cpp#L30\n\nThe right place to add ""services"" woud be  `getnetworkinfo`. But it already has 'localservices'.\n",https://github.com/bitcoin/bitcoin/pull/6579#discussion_r38769694,38769694,src/rpcmisc.cpp
petertodd,2015-09-04T18:03:09Z,"Lol, how did I miss that? I added localservices in 99ddc6cb706e825e54da244a10d4d6389fc5eaae\n\n@laanwj Thanks for catching that!\n",https://github.com/bitcoin/bitcoin/pull/6579#discussion_r38778089,38778089,src/rpcmisc.cpp
rebroad,2016-08-25T06:53:40Z,"Not sure why Misbehaving is used here. I thought this function was for the protection of the node using it, but I can't see what harm there would be if the connection was kept open. I think that yes, disconnect makes sense if this is on an outgoing connection and using up one of the outgoing slots.\n",https://github.com/bitcoin/bitcoin/pull/6579#discussion_r76189162,76189162,src/main.cpp
rebroad,2016-09-12T18:49:21Z,Why the jump from 70002 to 70011?\n,https://github.com/bitcoin/bitcoin/pull/6579#discussion_r78431483,78431483,src/version.h
rebroad,2016-09-13T02:01:29Z,"Ages back, before this was merged, I'd written code that permitted turning off TX relaying during IBD (when relaying TXs is less useful to do most TXs being orphans), and then when we were getting close to the latest block, it would send a ""filterclear"" message to all connected nodes in order for them to start relaying TXs. If I was to be using this code today, I would be getting banned from every",https://github.com/bitcoin/bitcoin/pull/6579#discussion_r78485962,78485962,src/main.cpp
