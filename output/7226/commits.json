[
  {
    "sha": "9b41a5fba278e9ab56a9b86e7a5fe195dcad0b7a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YjQxYTVmYmEyNzhlOWFiNTZhOWI4NmU3YTVmZTE5NWRjYWQwYjdh",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-12-15T20:53:10Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2015-12-18T10:39:31Z"
      },
      "message": "Add more tests to p2p-fullblocktest",
      "tree": {
        "sha": "29a8d1d2e04f622ab5748ae54125bc779a25234e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/29a8d1d2e04f622ab5748ae54125bc779a25234e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9b41a5fba278e9ab56a9b86e7a5fe195dcad0b7a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b41a5fba278e9ab56a9b86e7a5fe195dcad0b7a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9b41a5fba278e9ab56a9b86e7a5fe195dcad0b7a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b41a5fba278e9ab56a9b86e7a5fe195dcad0b7a/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7a5040155ed59f8c9c51734bb2ee29f1593eaa6a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a5040155ed59f8c9c51734bb2ee29f1593eaa6a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7a5040155ed59f8c9c51734bb2ee29f1593eaa6a"
      }
    ],
    "stats": {
      "total": 158,
      "additions": 146,
      "deletions": 12
    },
    "files": [
      {
        "sha": "a6525e679383bead768b3c441d6db61ae931b09a",
        "filename": "qa/rpc-tests/p2p-fullblocktest.py",
        "status": "modified",
        "additions": 145,
        "deletions": 12,
        "changes": 157,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b41a5fba278e9ab56a9b86e7a5fe195dcad0b7a/qa/rpc-tests/p2p-fullblocktest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b41a5fba278e9ab56a9b86e7a5fe195dcad0b7a/qa/rpc-tests/p2p-fullblocktest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-fullblocktest.py?ref=9b41a5fba278e9ab56a9b86e7a5fe195dcad0b7a",
        "patch": "@@ -7,15 +7,15 @@\n \n from test_framework.test_framework import ComparisonTestFramework\n from test_framework.util import *\n-from test_framework.comptool import TestManager, TestInstance\n+from test_framework.comptool import TestManager, TestInstance, RejectResult\n from test_framework.mininode import *\n from test_framework.blocktools import *\n import logging\n import copy\n import time\n import numbers\n from test_framework.key import CECKey\n-from test_framework.script import CScript, CScriptOp, SignatureHash, SIGHASH_ALL, OP_TRUE\n+from test_framework.script import CScript, CScriptOp, SignatureHash, SIGHASH_ALL, OP_TRUE, OP_FALSE\n \n class PreviousSpendableOutput(object):\n     def __init__(self, tx = CTransaction(), n = -1):\n@@ -122,13 +122,29 @@ def accepted():\n             return TestInstance([[self.tip, True]])\n \n         # returns a test case that asserts that the current tip was rejected\n-        def rejected():\n-            return TestInstance([[self.tip, False]])\n+        def rejected(reject = None):\n+            if reject is None:\n+                return TestInstance([[self.tip, False]])\n+            else:\n+                return TestInstance([[self.tip, reject]])\n        \n         # move the tip back to a previous block\n         def tip(number):\n             self.tip = self.blocks[number]\n \n+        # add transactions to a block produced by next_block\n+        def update_block(block_number, new_transactions):\n+            block = self.blocks[block_number]\n+            old_hash = block.sha256\n+            self.add_transactions_to_block(block, new_transactions)\n+            block.solve()\n+            # Update the internal state just like in next_block\n+            self.tip = block\n+            self.block_heights[block.sha256] = self.block_heights[old_hash]\n+            del self.block_heights[old_hash]\n+            self.blocks[block_number] = block\n+            return block\n+\n         # creates a new block and advances the tip to that block\n         block = self.next_block\n \n@@ -141,23 +157,23 @@ def tip(number):\n \n         # Now we need that block to mature so we can spend the coinbase.\n         test = TestInstance(sync_every_block=False)\n-        for i in range(100):\n+        for i in range(99):\n             block(1000 + i)\n             test.blocks_and_transactions.append([self.tip, True])\n             save_spendable_output()\n         yield test\n \n \n-        # Start by bulding a couple of blocks on top (which output is spent is in parentheses):\n+        # Start by building a couple of blocks on top (which output is spent is\n+        # in parentheses):\n         #     genesis -> b1 (0) -> b2 (1)\n         out0 = get_spendable_output()\n         block(1, spend=out0)\n         save_spendable_output()\n         yield accepted()\n \n         out1 = get_spendable_output()\n-        block(2, spend=out1)\n-        # Inv again, then deliver twice (shouldn't break anything).\n+        b2 = block(2, spend=out1)\n         yield accepted()\n \n \n@@ -168,8 +184,8 @@ def tip(number):\n         # \n         # Nothing should happen at this point. We saw b2 first so it takes priority.\n         tip(1)\n-        block(3, spend=out1)\n-        # Deliver twice (should still not break anything)\n+        b3 = block(3, spend=out1)\n+        txout_b3 = PreviousSpendableOutput(b3.vtx[1], 1)\n         yield rejected()\n \n \n@@ -214,7 +230,7 @@ def tip(number):\n         #                      \\-> b3 (1) -> b4 (2)\n         tip(6)\n         block(9, spend=out4, additional_coinbase_value=1)\n-        yield rejected()\n+        yield rejected(RejectResult(16, 'bad-cb-amount'))\n \n         \n         # Create a fork that ends in a block with too much fee (the one that causes the reorg)\n@@ -226,7 +242,7 @@ def tip(number):\n         yield rejected()\n \n         block(11, spend=out4, additional_coinbase_value=1)\n-        yield rejected()\n+        yield rejected(RejectResult(16, 'bad-cb-amount'))\n \n \n         # Try again, but with a valid fork first\n@@ -252,6 +268,10 @@ def tip(number):\n \n         yield TestInstance([[b12, True, b13.sha256]]) # New tip should be b13.\n \n+        # Add a block with MAX_BLOCK_SIGOPS and one with one more sigop\n+        #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6  (3)\n+        #                                          \\-> b12 (3) -> b13 (4) -> b15 (5) -> b16 (6)\n+        #                      \\-> b3 (1) -> b4 (2)\n         \n         # Test that a block with a lot of checksigs is okay\n         lots_of_checksigs = CScript([OP_CHECKSIG] * (1000000 / 50 - 1))\n@@ -264,8 +284,121 @@ def tip(number):\n         out6 = get_spendable_output()\n         too_many_checksigs = CScript([OP_CHECKSIG] * (1000000 / 50))\n         block(16, spend=out6, script=too_many_checksigs)\n+        yield rejected(RejectResult(16, 'bad-blk-sigops'))\n+\n+\n+        # Attempt to spend a transaction created on a different fork\n+        #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6  (3)\n+        #                                          \\-> b12 (3) -> b13 (4) -> b15 (5) -> b17 (b3.vtx[1])\n+        #                      \\-> b3 (1) -> b4 (2)\n+        tip(15)\n+        block(17, spend=txout_b3)\n+        yield rejected(RejectResult(16, 'bad-txns-inputs-missingorspent'))\n+\n+        # Attempt to spend a transaction created on a different fork (on a fork this time)\n+        #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6  (3)\n+        #                                          \\-> b12 (3) -> b13 (4) -> b15 (5)\n+        #                                                                \\-> b18 (b3.vtx[1]) -> b19 (6)\n+        #                      \\-> b3 (1) -> b4 (2)\n+        tip(13)\n+        block(18, spend=txout_b3)\n+        yield rejected()\n+\n+        block(19, spend=out6)\n         yield rejected()\n \n+        # Attempt to spend a coinbase at depth too low\n+        #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6  (3)\n+        #                                          \\-> b12 (3) -> b13 (4) -> b15 (5) -> b20 (7)\n+        #                      \\-> b3 (1) -> b4 (2)\n+        tip(15)\n+        out7 = get_spendable_output()\n+        block(20, spend=out7)\n+        yield rejected(RejectResult(16, 'bad-txns-premature-spend-of-coinbase'))\n+\n+        # Attempt to spend a coinbase at depth too low (on a fork this time)\n+        #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6  (3)\n+        #                                          \\-> b12 (3) -> b13 (4) -> b15 (5)\n+        #                                                                \\-> b21 (6) -> b22 (5)\n+        #                      \\-> b3 (1) -> b4 (2)\n+        tip(13)\n+        block(21, spend=out6)\n+        yield rejected()\n+\n+        block(22, spend=out5)\n+        yield rejected()\n+\n+        # Create a block on either side of MAX_BLOCK_SIZE and make sure its accepted/rejected\n+        #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6  (3)\n+        #                                          \\-> b12 (3) -> b13 (4) -> b15 (5) -> b23 (6)\n+        #                                                                           \\-> b24 (6) -> b25 (7)\n+        #                      \\-> b3 (1) -> b4 (2)\n+        tip(15)\n+        b23 = block(23, spend=out6)\n+        old_hash = b23.sha256\n+        tx = CTransaction()\n+        script_length = MAX_BLOCK_SIZE - len(b23.serialize()) - 69\n+        script_output = CScript([chr(0)*script_length])\n+        tx.vout.append(CTxOut(0, script_output))\n+        tx.vin.append(CTxIn(COutPoint(b23.vtx[1].sha256, 1)))\n+        b23 = update_block(23, [tx])\n+        # Make sure the math above worked out to produce a max-sized block\n+        assert_equal(len(b23.serialize()), MAX_BLOCK_SIZE)\n+        yield accepted()\n+\n+        # Make the next block one byte bigger and check that it fails\n+        tip(15)\n+        b24 = block(24, spend=out6)\n+        script_length = MAX_BLOCK_SIZE - len(b24.serialize()) - 69\n+        script_output = CScript([chr(0)*(script_length+1)])\n+        tx.vout = [CTxOut(0, script_output)]\n+        b24 = update_block(24, [tx])\n+        assert_equal(len(b24.serialize()), MAX_BLOCK_SIZE+1)\n+        yield rejected(RejectResult(16, 'bad-blk-length'))\n+\n+        b25 = block(25, spend=out7)\n+        yield rejected()\n+\n+        # Create blocks with a coinbase input script size out of range\n+        #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6  (3)\n+        #                                          \\-> b12 (3) -> b13 (4) -> b15 (5) -> b23 (6) -> b30 (7)\n+        #                                                                           \\-> ... (6) -> ... (7)\n+        #                      \\-> b3 (1) -> b4 (2)\n+        tip(15)\n+        b26 = block(26, spend=out6)\n+        b26.vtx[0].vin[0].scriptSig = chr(0)\n+        b26.vtx[0].rehash()\n+        # update_block causes the merkle root to get updated, even with no new\n+        # transactions, and updates the required state.\n+        b26 = update_block(26, [])\n+        yield rejected(RejectResult(16, 'bad-cb-length'))\n+\n+        # Extend the b26 chain to make sure bitcoind isn't accepting b26\n+        b27 = block(27, spend=out7)\n+        yield rejected()\n+\n+        # Now try a too-large-coinbase script\n+        tip(15)\n+        b28 = block(28, spend=out6)\n+        b28.vtx[0].vin[0].scriptSig = chr(0)*101\n+        b28.vtx[0].rehash()\n+        b28 = update_block(28, [])\n+        yield rejected(RejectResult(16, 'bad-cb-length'))\n+\n+        # Extend the b28 chain to make sure bitcoind isn't accepted b28\n+        b29 = block(29, spend=out7)\n+        # TODO: Should get a reject message back with \"bad-prevblk\", except\n+        # there's a bug that prevents this from being detected.  Just note\n+        # failure for now, and add the reject result later.\n+        yield rejected()\n+\n+        # b30 has a max-sized coinbase scriptSig.\n+        tip(23)\n+        b30 = block(30)\n+        b30.vtx[0].vin[0].scriptSig = chr(0)*100\n+        b30.vtx[0].rehash()\n+        b30 = update_block(30, [])\n+        yield accepted()\n \n \n if __name__ == '__main__':"
      },
      {
        "sha": "8e49b5656563fadf766e1bf2cefe932be38f8f39",
        "filename": "qa/rpc-tests/test_framework/mininode.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b41a5fba278e9ab56a9b86e7a5fe195dcad0b7a/qa/rpc-tests/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b41a5fba278e9ab56a9b86e7a5fe195dcad0b7a/qa/rpc-tests/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/mininode.py?ref=9b41a5fba278e9ab56a9b86e7a5fe195dcad0b7a",
        "patch": "@@ -36,6 +36,7 @@\n MY_SUBVERSION = \"/python-mininode-tester:0.0.1/\"\n \n MAX_INV_SZ = 50000\n+MAX_BLOCK_SIZE = 1000000\n \n # Keep our own socket map for asyncore, so that we can track disconnects\n # ourselves (to workaround an issue with closing an asyncore socket when "
      }
    ]
  }
]