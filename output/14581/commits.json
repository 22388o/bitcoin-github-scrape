[
  {
    "sha": "93d35811f1150b9e1924e39cf9f20dca4203c098",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5M2QzNTgxMWYxMTUwYjllMTkyNGUzOWNmOWYyMGRjYTQyMDNjMDk4",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-07-12T13:02:05Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2018-08-02T17:54:04Z"
      },
      "message": "Add priority block request queue",
      "tree": {
        "sha": "dd3136e916a3500f6717dd0c9c56f492e279ed11",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dd3136e916a3500f6717dd0c9c56f492e279ed11"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/93d35811f1150b9e1924e39cf9f20dca4203c098",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAltjRTwACgkQV/+b28ww\nEAlQDxAAi093oZOkld3H4IT251FqE/vBpmcVQlOqjaDdBmsYO9tBNMwn6QCvwDfA\n04wnpLzYY4AyoWKfA0UzvnJDWjpU6KVGF4Jp7CX0S+FTBlWI5ABf97/tg1oUTjM0\nT5iBa6RVPO2EjHyFa4Yy5vXFTQLwvrGCZuV9ygWN3OO6y+/YlTnSbnDkpTZ+yURt\nlCPCH9P+5nqHEJ9YDv3LbvwfzIdR0UGtKwmhWDkLrXExOafyhkUwjckjSp6XUsJm\nWLlTsAlnXjcTsh6YgZJ+jFrWE4Iheyphch/OaHett3Zkhl0Yk/xzHS3tb02zuj1Q\nvDmcx8mAajbXM8eu5ME5hcAnsnpzYVccAIjARw8GBCeR+bShRX3xHIE9auUKqnx/\nbkX0xFGm913iTcJt1dRrB8xBWdKZt1N2VM69TuA7Mu52mnexxgMjpIcho/0uf9sN\nVzI6zyFkhA0/kxFSk/c+F0fNe0xJYoTGXz9w/3tZIX1vT7n6bZR2zEyx6ah1FxWX\nAtoEbDjP/k1By8HV1rjpY/favodJdeaneHgsJZRYr7kjFMYwVav6WHogimNqlQJb\nniQg5yQC26ZTVBJeeHA4/8aqlczoU7Rgd2dAevnEUwfhuzk9f1QuhFFDuhTb5Wst\nNrGQo+Y3MzwkjS3ewzLpI72HMLew2edRnpbUxq8urFIO662xD7c=\n=1sIj\n-----END PGP SIGNATURE-----",
        "payload": "tree dd3136e916a3500f6717dd0c9c56f492e279ed11\nparent 1ef57a96b8b7255bd1f1ea0583846f18305419bf\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1499864525 +0200\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1533232444 +0200\n\nAdd priority block request queue\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93d35811f1150b9e1924e39cf9f20dca4203c098",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/93d35811f1150b9e1924e39cf9f20dca4203c098",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93d35811f1150b9e1924e39cf9f20dca4203c098/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1ef57a96b8b7255bd1f1ea0583846f18305419bf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ef57a96b8b7255bd1f1ea0583846f18305419bf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1ef57a96b8b7255bd1f1ea0583846f18305419bf"
      }
    ],
    "stats": {
      "total": 95,
      "additions": 75,
      "deletions": 20
    },
    "files": [
      {
        "sha": "fe5e4af921e0f17256b21511221fd09aa4face3b",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 68,
        "deletions": 20,
        "changes": 88,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93d35811f1150b9e1924e39cf9f20dca4203c098/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93d35811f1150b9e1924e39cf9f20dca4203c098/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=93d35811f1150b9e1924e39cf9f20dca4203c098",
        "patch": "@@ -134,6 +134,7 @@ namespace {\n         const CBlockIndex* pindex;                               //!< Optional.\n         bool fValidatedHeaders;                                  //!< Whether this block has validated headers at the time of request.\n         std::unique_ptr<PartiallyDownloadedBlock> partialBlock;  //!< Optional, used for CMPCTBLOCK downloads\n+        bool priorityRequest;                                    //!< Whether its a priority download\n     };\n     std::map<uint256, std::pair<NodeId, std::list<QueuedBlock>::iterator> > mapBlocksInFlight GUARDED_BY(cs_main);\n \n@@ -172,6 +173,14 @@ namespace {\n \n     static size_t vExtraTxnForCompactIt GUARDED_BY(g_cs_orphans) = 0;\n     static std::vector<std::pair<uint256, CTransactionRef>> vExtraTxnForCompact GUARDED_BY(g_cs_orphans);\n+\n+    struct PriorityBlockRequest\n+    {\n+        const CBlockIndex* pindex;\n+        bool downloaded;\n+    };\n+\n+    std::vector<PriorityBlockRequest> blocksToDownloadFirst;\n } // namespace\n \n namespace {\n@@ -341,9 +350,15 @@ static void PushNodeVersion(CNode *pnode, CConnman* connman, int64_t nTime)\n     }\n }\n \n-// Returns a bool indicating whether we requested this block.\n+// Requires cs_main.\n+// Returns a MarkBlockAsReceivedResult struct to indicating whether we requested this block and if it was via the priority request queue\n // Also used if a block was /not/ received and timed out or started with another peer\n-static bool MarkBlockAsReceived(const uint256& hash) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n+struct MarkBlockAsReceivedResult\n+{\n+    bool fRequested;\n+    bool fPriorityRequest;\n+ };\n+MarkBlockAsReceivedResult MarkBlockAsReceived(const uint256& hash) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n     std::map<uint256, std::pair<NodeId, std::list<QueuedBlock>::iterator> >::iterator itInFlight = mapBlocksInFlight.find(hash);\n     if (itInFlight != mapBlocksInFlight.end()) {\n         CNodeState *state = State(itInFlight->second.first);\n@@ -357,18 +372,27 @@ static bool MarkBlockAsReceived(const uint256& hash) EXCLUSIVE_LOCKS_REQUIRED(cs\n             // First block on the queue was received, update the start download time for the next one\n             state->nDownloadingSince = std::max(state->nDownloadingSince, GetTimeMicros());\n         }\n-        state->vBlocksInFlight.erase(itInFlight->second.second);\n+        bool priorityRequest = itInFlight->second.second->priorityRequest;\n         state->nBlocksInFlight--;\n         state->nStallingSince = 0;\n+        if (priorityRequest) {\n+            // mark as downloaded\n+            auto it = std::find_if(blocksToDownloadFirst.begin(), blocksToDownloadFirst.end(),  [&itInFlight](const PriorityBlockRequest &r) { return r.pindex == itInFlight->second.second->pindex; });\n+            if (it != blocksToDownloadFirst.end()) {\n+                (*it).downloaded = true;\n+            }\n+        }\n+        state->vBlocksInFlight.erase(itInFlight->second.second);\n         mapBlocksInFlight.erase(itInFlight);\n-        return true;\n+\n+        return {true, priorityRequest};\n     }\n-    return false;\n+    return {false, false};\n }\n \n // returns false, still setting pit, if the block was already in flight from the same peer\n // pit will only be valid as long as the same cs_main lock is being held\n-static bool MarkBlockAsInFlight(NodeId nodeid, const uint256& hash, const CBlockIndex* pindex = nullptr, std::list<QueuedBlock>::iterator** pit = nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n+static bool MarkBlockAsInFlight(NodeId nodeid, const uint256& hash, const CBlockIndex* pindex = nullptr, std::list<QueuedBlock>::iterator** pit = nullptr, bool priorityRequest = false) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n     CNodeState *state = State(nodeid);\n     assert(state != nullptr);\n \n@@ -385,7 +409,7 @@ static bool MarkBlockAsInFlight(NodeId nodeid, const uint256& hash, const CBlock\n     MarkBlockAsReceived(hash);\n \n     std::list<QueuedBlock>::iterator it = state->vBlocksInFlight.insert(state->vBlocksInFlight.end(),\n-            {hash, pindex, pindex != nullptr, std::unique_ptr<PartiallyDownloadedBlock>(pit ? new PartiallyDownloadedBlock(&mempool) : nullptr)});\n+            {hash, pindex, pindex != nullptr, std::unique_ptr<PartiallyDownloadedBlock>(pit ? new PartiallyDownloadedBlock(&mempool) : nullptr), priorityRequest});\n     state->nBlocksInFlight++;\n     state->nBlocksInFlightValidHeaders += it->fValidatedHeaders;\n     if (state->nBlocksInFlight == 1) {\n@@ -502,11 +526,12 @@ static bool PeerHasHeader(CNodeState *state, const CBlockIndex *pindex) EXCLUSIV\n }\n \n /** Update pindexLastCommonBlock and add not-in-flight missing successors to vBlocks, until it has\n- *  at most count entries. */\n-static void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vector<const CBlockIndex*>& vBlocks, NodeId& nodeStaller, const Consensus::Params& consensusParams) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+ *  at most count entries.\n+ *  returns true if priority downloads where used */\n+bool FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vector<const CBlockIndex*>& vBlocks, NodeId& nodeStaller, const Consensus::Params& consensusParams) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     if (count == 0)\n-        return;\n+        return false;\n \n     vBlocks.reserve(vBlocks.size() + count);\n     CNodeState *state = State(nodeid);\n@@ -515,9 +540,22 @@ static void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vec\n     // Make sure pindexBestKnownBlock is up to date, we'll need it.\n     ProcessBlockAvailability(nodeid);\n \n+    if (!blocksToDownloadFirst.empty()) {\n+        for (const PriorityBlockRequest &r: blocksToDownloadFirst) {\n+            if (r.downloaded) continue;\n+            if (r.pindex && state->pindexBestKnownBlock != nullptr && state->pindexBestKnownBlock->nHeight >= r.pindex->nHeight && !mapBlocksInFlight.count(r.pindex->GetBlockHash())) {\n+                vBlocks.push_back(r.pindex);\n+                if (vBlocks.size() == count) {\n+                    break;\n+                }\n+            }\n+        }\n+        return true;\n+    }\n+\n     if (state->pindexBestKnownBlock == nullptr || state->pindexBestKnownBlock->nChainWork < chainActive.Tip()->nChainWork || state->pindexBestKnownBlock->nChainWork < nMinimumChainWork) {\n         // This peer has nothing interesting.\n-        return;\n+        return false;\n     }\n \n     if (state->pindexLastCommonBlock == nullptr) {\n@@ -530,7 +568,7 @@ static void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vec\n     // of its current tip anymore. Go back enough to fix that.\n     state->pindexLastCommonBlock = LastCommonAncestor(state->pindexLastCommonBlock, state->pindexBestKnownBlock);\n     if (state->pindexLastCommonBlock == state->pindexBestKnownBlock)\n-        return;\n+        return false;\n \n     std::vector<const CBlockIndex*> vToFetch;\n     const CBlockIndex *pindexWalk = state->pindexLastCommonBlock;\n@@ -559,11 +597,11 @@ static void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vec\n         for (const CBlockIndex* pindex : vToFetch) {\n             if (!pindex->IsValid(BLOCK_VALID_TREE)) {\n                 // We consider the chain that this peer is on invalid.\n-                return;\n+                return false;\n             }\n             if (!State(nodeid)->fHaveWitness && IsWitnessEnabled(pindex->pprev, consensusParams)) {\n                 // We wouldn't download this block or its descendants from this peer.\n-                return;\n+                return false;\n             }\n             if (pindex->nStatus & BLOCK_HAVE_DATA || chainActive.Contains(pindex)) {\n                 if (pindex->nChainTx)\n@@ -576,18 +614,19 @@ static void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vec\n                         // We aren't able to fetch anything, but we would be if the download window was one larger.\n                         nodeStaller = waitingfor;\n                     }\n-                    return;\n+                    return false;\n                 }\n                 vBlocks.push_back(pindex);\n                 if (vBlocks.size() == count) {\n-                    return;\n+                    return false;\n                 }\n             } else if (waitingfor == -1) {\n                 // This is the first already-in-flight block.\n                 waitingfor = mapBlocksInFlight[pindex->GetBlockHash()].first;\n             }\n         }\n     }\n+    return false;\n }\n \n } // namespace\n@@ -2709,7 +2748,8 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             LOCK(cs_main);\n             // Also always process if we requested the block explicitly, as we may\n             // need it even though it is not a candidate for a new best tip.\n-            forceProcessing |= MarkBlockAsReceived(hash);\n+            MarkBlockAsReceivedResult result = MarkBlockAsReceived(hash);\n+            forceProcessing |= result.fRequested;\n             // mapBlockSource is only used for sending reject messages and DoS scores,\n             // so the race between here and cs_main in ProcessNewBlock is fine.\n             mapBlockSource.emplace(hash, std::make_pair(pfrom->GetId(), true));\n@@ -3704,12 +3744,12 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n         if (!pto->fClient && ((fFetch && !pto->m_limited_node) || !IsInitialBlockDownload()) && state.nBlocksInFlight < MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n             std::vector<const CBlockIndex*> vToDownload;\n             NodeId staller = -1;\n-            FindNextBlocksToDownload(pto->GetId(), MAX_BLOCKS_IN_TRANSIT_PER_PEER - state.nBlocksInFlight, vToDownload, staller, consensusParams);\n+            bool priorityRequest = FindNextBlocksToDownload(pto->GetId(), MAX_BLOCKS_IN_TRANSIT_PER_PEER - state.nBlocksInFlight, vToDownload, staller, consensusParams);\n             for (const CBlockIndex *pindex : vToDownload) {\n                 uint32_t nFetchFlags = GetFetchFlags(pto);\n                 vGetData.push_back(CInv(MSG_BLOCK | nFetchFlags, pindex->GetBlockHash()));\n-                MarkBlockAsInFlight(pto->GetId(), pindex->GetBlockHash(), pindex);\n-                LogPrint(BCLog::NET, \"Requesting block %s (%d) peer=%d\\n\", pindex->GetBlockHash().ToString(),\n+                MarkBlockAsInFlight(pto->GetId(), pindex->GetBlockHash(), pindex, NULL, priorityRequest);\n+                LogPrint(BCLog::NET, \"Requesting%s block %s (%d) peer=%d\\n\", (priorityRequest ? \" (priority)\" : \" \"), pindex->GetBlockHash().ToString(),\n                     pindex->nHeight, pto->GetId());\n             }\n             if (state.nBlocksInFlight == 0 && staller != -1) {\n@@ -3775,6 +3815,14 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n     return true;\n }\n \n+void AddPriorityDownload(const std::vector<const CBlockIndex*>& blocksToDownload) {\n+    LOCK(cs_main);\n+    for (const CBlockIndex* pindex: blocksToDownload) {\n+        // we add blocks regardless of duplicates\n+        blocksToDownloadFirst.push_back({pindex, false});\n+    }\n+}\n+\n class CNetProcessingCleanup\n {\n public:"
      },
      {
        "sha": "da754cbf324e11de8abfbf8b6894b4b8b45907cd",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93d35811f1150b9e1924e39cf9f20dca4203c098/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93d35811f1150b9e1924e39cf9f20dca4203c098/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=93d35811f1150b9e1924e39cf9f20dca4203c098",
        "patch": "@@ -84,4 +84,11 @@ struct CNodeStateStats {\n /** Get statistics from node state */\n bool GetNodeStateStats(NodeId nodeid, CNodeStateStats &stats);\n \n+/**\n+ * Prioritize a block for downloading\n+ * Blocks requested with priority will be downloaded and processed first\n+ * Downloaded blocks will not trigger ActivateBestChain\n+ */\n+void AddPriorityDownload(const std::vector<const CBlockIndex*>& blocksToDownload);\n+\n #endif // BITCOIN_NET_PROCESSING_H"
      }
    ]
  },
  {
    "sha": "a71d38860a172a3ae84c3e25d9ff4f3e0fe860ed",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNzFkMzg4NjBhMTcyYTNhZTg0YzNlMjVkOWZmNGYzZTBmZTg2MGVk",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-07-27T08:14:53Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2018-08-02T17:54:05Z"
      },
      "message": "Add new ProcessPriorityRequest main signal",
      "tree": {
        "sha": "cba9dd0efc917a353244aa9fce5a308d75b89f50",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cba9dd0efc917a353244aa9fce5a308d75b89f50"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a71d38860a172a3ae84c3e25d9ff4f3e0fe860ed",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAltjRT0ACgkQV/+b28ww\nEAl9LRAAkKELb3HxowlgsqUvi4j29PY6wcWAaf8yRzXvrklNYqdE0QJKKB8yrLRO\nlIu8vtHf8KYJF+er0w9NAv3u5gqPn+kyR5qP9qZFN70JlOHVEgRlHDnEiOLw5hnu\nV4GcHbjKN5admHkyGUwAQx3K40RHL2CIPkJJ+zEMsTsSL93QtTqKBqaiJRh52t54\nyYUzJ6DykByDPcAiOfjRxCiQ060kHOf9/9pti51+n3lbJLkzR8Ty56jkthBN+9Pv\nz6vXDdsJvnRyqYSUq2lKZMbWeaRZ7kK1RQFCRNrF3D5pDmoEnwBbHowoeOUEztRE\nSsnuTTpPgu2QJPY0tE4JmTkFyg6QDyoPw7SMdNYN/ZdCpsZY+3teg2GqB31nov4y\nFklj8QE0dKZuFcJQD9HjnSjie6vdnHA3LqkRbXA7JYH/cJ/W28K456c2OPpFZpDE\n3kaYG4wmR2HaFgvAue0jluniwS2AuSa/ioVU3Sp4EWrdspstTk98AvmwuUwgHrpY\nkR5c+0srNGIpicGPI9oBs1/mfkSrKP2Hi7cANTI0jwnDzkJBWabZnQhNfUNMrnra\nqR5Zxxz7RgG8sRreBhrfjGFpHxqxC3abmy9BALYLADSYf+xmzvWrRe66OBH5DPUR\nWitNq8t/e6WsnvzrAseVAfPipaKsZnw3EMGGqtO57RJVLjpbMg4=\n=myaF\n-----END PGP SIGNATURE-----",
        "payload": "tree cba9dd0efc917a353244aa9fce5a308d75b89f50\nparent 93d35811f1150b9e1924e39cf9f20dca4203c098\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1501143293 +0200\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1533232445 +0200\n\nAdd new ProcessPriorityRequest main signal\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a71d38860a172a3ae84c3e25d9ff4f3e0fe860ed",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a71d38860a172a3ae84c3e25d9ff4f3e0fe860ed",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a71d38860a172a3ae84c3e25d9ff4f3e0fe860ed/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "93d35811f1150b9e1924e39cf9f20dca4203c098",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93d35811f1150b9e1924e39cf9f20dca4203c098",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/93d35811f1150b9e1924e39cf9f20dca4203c098"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 14,
      "deletions": 0
    },
    "files": [
      {
        "sha": "63d3108c17952203c531ca310399f01cae5089e4",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a71d38860a172a3ae84c3e25d9ff4f3e0fe860ed/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a71d38860a172a3ae84c3e25d9ff4f3e0fe860ed/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=a71d38860a172a3ae84c3e25d9ff4f3e0fe860ed",
        "patch": "@@ -28,6 +28,7 @@ struct MainSignalsInstance {\n     boost::signals2::signal<void (int64_t nBestBlockTime, CConnman* connman)> Broadcast;\n     boost::signals2::signal<void (const CBlock&, const CValidationState&)> BlockChecked;\n     boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n+    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex)> ProcessPriorityRequest;\n \n     // We are not allowed to assume the scheduler only runs in one thread,\n     // but must ensure all callbacks happen in-order, so we end up creating\n@@ -82,9 +83,12 @@ void RegisterValidationInterface(CValidationInterface* pwalletIn) {\n     g_signals.m_internals->Broadcast.connect(boost::bind(&CValidationInterface::ResendWalletTransactions, pwalletIn, _1, _2));\n     g_signals.m_internals->BlockChecked.connect(boost::bind(&CValidationInterface::BlockChecked, pwalletIn, _1, _2));\n     g_signals.m_internals->NewPoWValidBlock.connect(boost::bind(&CValidationInterface::NewPoWValidBlock, pwalletIn, _1, _2));\n+    g_signals.m_internals->ProcessPriorityRequest.connect(boost::bind(&CValidationInterface::ProcessPriorityRequest, pwalletIn, _1, _2));\n+\n }\n \n void UnregisterValidationInterface(CValidationInterface* pwalletIn) {\n+    g_signals.m_internals->ProcessPriorityRequest.disconnect(boost::bind(&CValidationInterface::ProcessPriorityRequest, pwalletIn, _1, _2));\n     g_signals.m_internals->BlockChecked.disconnect(boost::bind(&CValidationInterface::BlockChecked, pwalletIn, _1, _2));\n     g_signals.m_internals->Broadcast.disconnect(boost::bind(&CValidationInterface::ResendWalletTransactions, pwalletIn, _1, _2));\n     g_signals.m_internals->ChainStateFlushed.disconnect(boost::bind(&CValidationInterface::ChainStateFlushed, pwalletIn, _1));\n@@ -100,6 +104,7 @@ void UnregisterAllValidationInterfaces() {\n     if (!g_signals.m_internals) {\n         return;\n     }\n+    g_signals.m_internals->ProcessPriorityRequest.disconnect_all_slots();\n     g_signals.m_internals->BlockChecked.disconnect_all_slots();\n     g_signals.m_internals->Broadcast.disconnect_all_slots();\n     g_signals.m_internals->ChainStateFlushed.disconnect_all_slots();\n@@ -178,3 +183,7 @@ void CMainSignals::BlockChecked(const CBlock& block, const CValidationState& sta\n void CMainSignals::NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock> &block) {\n     m_internals->NewPoWValidBlock(pindex, block);\n }\n+\n+void CMainSignals::ProcessPriorityRequest(const std::shared_ptr<const CBlock> &pblock, const CBlockIndex *pindex) {\n+    m_internals->ProcessPriorityRequest(pblock, pindex);\n+}"
      },
      {
        "sha": "48437b354d2d88a28b68b2a6aeaf1e136aba8799",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a71d38860a172a3ae84c3e25d9ff4f3e0fe860ed/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a71d38860a172a3ae84c3e25d9ff4f3e0fe860ed/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=a71d38860a172a3ae84c3e25d9ff4f3e0fe860ed",
        "patch": "@@ -145,6 +145,10 @@ class CValidationInterface {\n      * Notifies listeners that a block which builds directly on our current tip\n      * has been received and connected to the headers tree, though not validated yet */\n     virtual void NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& block) {};\n+    /**\n+     * Notifies listeners of that a new priorit block request is ready to process\n+     */\n+    virtual void ProcessPriorityRequest(const std::shared_ptr<const CBlock> &block, const CBlockIndex *pindex) {};\n     friend void ::RegisterValidationInterface(CValidationInterface*);\n     friend void ::UnregisterValidationInterface(CValidationInterface*);\n     friend void ::UnregisterAllValidationInterfaces();\n@@ -185,6 +189,7 @@ class CMainSignals {\n     void Broadcast(int64_t nBestBlockTime, CConnman* connman);\n     void BlockChecked(const CBlock&, const CValidationState&);\n     void NewPoWValidBlock(const CBlockIndex *, const std::shared_ptr<const CBlock>&);\n+    void ProcessPriorityRequest(const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex);\n };\n \n CMainSignals& GetMainSignals();"
      }
    ]
  },
  {
    "sha": "fc54acc838d017a96ef88ea2dff57f4826f3e1c9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYzU0YWNjODM4ZDAxN2E5NmVmODhlYTJkZmY1N2Y0ODI2ZjNlMWM5",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-07-12T13:09:29Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2018-08-02T18:01:59Z"
      },
      "message": "Don't ActivateBestChain when processing priority block request",
      "tree": {
        "sha": "362d699cb9a9db7eda8efff0d18511952eaadc05",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/362d699cb9a9db7eda8efff0d18511952eaadc05"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fc54acc838d017a96ef88ea2dff57f4826f3e1c9",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAltjRxcACgkQV/+b28ww\nEAnmbhAAjoynPw5uzVFhPo5MTbWX2MW1acm2KbY30+IrrbxDS4YACN6eqFeUZVDt\nOxoq0tsmyWwlDqE+hBuGytQ0M4v0ER6XccDIOED0NMqjLUvC+hx/Gfm103Je3qnR\n2YQIc1heP5BRoZ2bVEgZPxiS4zYLVFfgZ4GxfrAMJKuXFxey/3pmnqBSUgHmMpXr\nhkOvWLluC1qV7BsFioO4KVg8627Yf7J+EibO0gfVEOkpyscbi+BdRA/we6PvmTrO\ndf9jTja118RcQg9Z9BJ7yZefWKBZvTIyBLhWaS6lQ/fFL400Q7QppEQXF+wRLeUL\n7jFUfGZ+Hilc1qY3AznRCyzPc5dRPcuTzXac7m02iC8iJs05Xv3OMjbBTC9F10XW\naIpVO7R3Ns3e4TRrHkApeRsVitQFowXNdnzmcqUwqDj4YQ+oQ5L8cHhBonYU0bKF\nJOfe2XvSncMmE8Ce93oPrg0q+YnZ0cHJxR8IEnCF4TRc/NwMazlBLVtCYQBP1LGP\nAsPBIpfiCTynAFG2wJHwCp0i24tLllbblDtHILZIlLWz+Nau1TnBmzjpQmMzepOO\nZoaDo4RA6g0GtrlXWX4XwA1fqMRj4joxiWW3gnpXELuP80ULBOEEsCP2kFQfoWrv\n8aILwywRCw7zOYwJPz3dQn4haWA7d6r2bzO4aoD3Z/Vlbwa9Ei4=\n=DcqJ\n-----END PGP SIGNATURE-----",
        "payload": "tree 362d699cb9a9db7eda8efff0d18511952eaadc05\nparent a71d38860a172a3ae84c3e25d9ff4f3e0fe860ed\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1499864969 +0200\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1533232919 +0200\n\nDon't ActivateBestChain when processing priority block request\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc54acc838d017a96ef88ea2dff57f4826f3e1c9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fc54acc838d017a96ef88ea2dff57f4826f3e1c9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc54acc838d017a96ef88ea2dff57f4826f3e1c9/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a71d38860a172a3ae84c3e25d9ff4f3e0fe860ed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a71d38860a172a3ae84c3e25d9ff4f3e0fe860ed",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a71d38860a172a3ae84c3e25d9ff4f3e0fe860ed"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 7,
      "deletions": 5
    },
    "files": [
      {
        "sha": "6b10ebbd72c3a7d6a11ee690420e2f96694cbb49",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc54acc838d017a96ef88ea2dff57f4826f3e1c9/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc54acc838d017a96ef88ea2dff57f4826f3e1c9/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=fc54acc838d017a96ef88ea2dff57f4826f3e1c9",
        "patch": "@@ -2743,19 +2743,20 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         LogPrint(BCLog::NET, \"received block %s peer=%d\\n\", pblock->GetHash().ToString(), pfrom->GetId());\n \n         bool forceProcessing = false;\n+        MarkBlockAsReceivedResult result;\n         const uint256 hash(pblock->GetHash());\n         {\n             LOCK(cs_main);\n             // Also always process if we requested the block explicitly, as we may\n             // need it even though it is not a candidate for a new best tip.\n-            MarkBlockAsReceivedResult result = MarkBlockAsReceived(hash);\n+            result = MarkBlockAsReceived(hash);\n             forceProcessing |= result.fRequested;\n             // mapBlockSource is only used for sending reject messages and DoS scores,\n             // so the race between here and cs_main in ProcessNewBlock is fine.\n             mapBlockSource.emplace(hash, std::make_pair(pfrom->GetId(), true));\n         }\n         bool fNewBlock = false;\n-        ProcessNewBlock(chainparams, pblock, forceProcessing, &fNewBlock);\n+        ProcessNewBlock(chainparams, pblock, forceProcessing, &fNewBlock, !result.fPriorityRequest);\n         if (fNewBlock) {\n             pfrom->nLastBlockTime = GetTime();\n         } else {"
      },
      {
        "sha": "579642d28f23d0b521f9f0d46f21679b3f6a07df",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc54acc838d017a96ef88ea2dff57f4826f3e1c9/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc54acc838d017a96ef88ea2dff57f4826f3e1c9/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=fc54acc838d017a96ef88ea2dff57f4826f3e1c9",
        "patch": "@@ -3547,7 +3547,7 @@ bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CVali\n     return true;\n }\n \n-bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, bool *fNewBlock)\n+bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, bool *fNewBlock, bool activateBestChain)\n {\n     AssertLockNotHeld(cs_main);\n \n@@ -3574,7 +3574,7 @@ bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<cons\n     NotifyHeaderTip();\n \n     CValidationState state; // Only used to report errors, not invalidity - ignore it\n-    if (!g_chainstate.ActivateBestChain(state, chainparams, pblock))\n+    if (activateBestChain && !g_chainstate.ActivateBestChain(state, chainparams, pblock))\n         return error(\"%s: ActivateBestChain failed (%s)\", __func__, FormatStateMessage(state));\n \n     return true;"
      },
      {
        "sha": "67ad91114d995c62f0a5750714ce02887e89c68b",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc54acc838d017a96ef88ea2dff57f4826f3e1c9/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc54acc838d017a96ef88ea2dff57f4826f3e1c9/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=fc54acc838d017a96ef88ea2dff57f4826f3e1c9",
        "patch": "@@ -224,10 +224,11 @@ static const uint64_t MIN_DISK_SPACE_FOR_BLOCK_FILES = 550 * 1024 * 1024;\n  *\n  * @param[in]   pblock  The block we want to process.\n  * @param[in]   fForceProcessing Process this block even if unrequested; used for non-network block sources and whitelisted peers.\n+ * @param[in]   activateBestChain will allow to bypass the activate best chain logic (for priority block downloads)\n  * @param[out]  fNewBlock A boolean which is set to indicate if the block was first received via this call\n  * @return True if state.IsValid()\n  */\n-bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, bool* fNewBlock) LOCKS_EXCLUDED(cs_main);\n+bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, bool* fNewBlock, bool activateBestChain = true) LOCKS_EXCLUDED(cs_main);\n \n /**\n  * Process incoming block headers."
      }
    ]
  },
  {
    "sha": "78206031444d0361086bb05881aff13b70bff40c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ODIwNjAzMTQ0NGQwMzYxMDg2YmIwNTg4MWFmZjEzYjcwYmZmNDBj",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-07-27T08:18:57Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2018-08-02T18:01:59Z"
      },
      "message": "Process priority requests",
      "tree": {
        "sha": "a7a0bcdf2af52b8b3800d54050f559efb882358a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a7a0bcdf2af52b8b3800d54050f559efb882358a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/78206031444d0361086bb05881aff13b70bff40c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAltjRxcACgkQV/+b28ww\nEAmD6Q/+Oz7BLv0CDdK2eRBvkd7B+Yn8guU7MfFT+smm5EKk5k8EQhqKiUSRSYDK\ny6p99tfrVxcyq3qqhv+5/YWrLHZIkhIf4VQsXTEmQV3RbJXp6QREll1fDa+w0TQX\nlZnA8kLvZCjTHsRg4uXAmM4lJyMqBfxESH8FJnrd/nSwTc1Nf15B0D5C2yC+s7O1\nm4SBcaP59CCW1EORSgdyxD07Rv/zxRV1iZy2eImcWRiyOqstcu8n0uj4YO8rlHJg\nOfv4xhKP3UKmrs4/LudBEUR58QyLs3eQeiWaN+jZtPNo/37ZmaNsPsDmDxOb+FyU\nL6PjivmEVukPNw3QDU0RW/IntDMrekPuFHxB1bqF+ZA4PI6WA9vq706bXJUV8joR\nO4ZWZzBpEA2lsEuRl9mlo42qSmU/q7alSkNUzGXDsmSbMST4z4bUuXAocXv1jpUi\n2+GgVDTx6LcWYefVHpBv0wN/E+Lq8ODArIHDMra0qrUFovspnZol8V+u6qZjEw9k\nCwub14vQPfUkV9E9kNQTvPkqJ5pWXvnbPj9iwb06pNU0e9HHcEpwq+0KjQvNIlFt\ntkncAh3h3tBA7SeX7utpEHruRZi6+656Wz0eoV2Tkdfthgf/RNU249+whabYBq/7\nwBTq6NBPXr0BSkcRwlsL3hp0CL0mc44+GyiKvh79xTF1Q8jLCYE=\n=mh4r\n-----END PGP SIGNATURE-----",
        "payload": "tree a7a0bcdf2af52b8b3800d54050f559efb882358a\nparent fc54acc838d017a96ef88ea2dff57f4826f3e1c9\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1501143537 +0200\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1533232919 +0200\n\nProcess priority requests\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78206031444d0361086bb05881aff13b70bff40c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/78206031444d0361086bb05881aff13b70bff40c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78206031444d0361086bb05881aff13b70bff40c/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fc54acc838d017a96ef88ea2dff57f4826f3e1c9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc54acc838d017a96ef88ea2dff57f4826f3e1c9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fc54acc838d017a96ef88ea2dff57f4826f3e1c9"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 44,
      "deletions": 0
    },
    "files": [
      {
        "sha": "68b3cb8433aebf1f606cc935932eeef74b640cb4",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 43,
        "deletions": 0,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/78206031444d0361086bb05881aff13b70bff40c/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/78206031444d0361086bb05881aff13b70bff40c/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=78206031444d0361086bb05881aff13b70bff40c",
        "patch": "@@ -2757,6 +2757,9 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         }\n         bool fNewBlock = false;\n         ProcessNewBlock(chainparams, pblock, forceProcessing, &fNewBlock, !result.fPriorityRequest);\n+        if (result.fPriorityRequest) {\n+            ProcessPriorityRequests(pblock);\n+        }\n         if (fNewBlock) {\n             pfrom->nLastBlockTime = GetTime();\n         } else {\n@@ -3824,6 +3827,46 @@ void AddPriorityDownload(const std::vector<const CBlockIndex*>& blocksToDownload\n     }\n }\n \n+void ProcessPriorityRequests(const std::shared_ptr<CBlock> blockRef) {\n+    LOCK(cs_main);\n+    if (blocksToDownloadFirst.empty()) {\n+        return;\n+    }\n+    auto it = std::begin(blocksToDownloadFirst);\n+    while (it != std::end(blocksToDownloadFirst)) {\n+        std::shared_ptr<const CBlock> currentBlock;\n+        const PriorityBlockRequest &r = *it;\n+        // make sure we process blocks in order\n+        if (!r.downloaded) {\n+            break;\n+        }\n+        if (r.pindex && blockRef && blockRef->GetHash() == r.pindex->GetBlockHash()) {\n+            // the passed in block, no need to load again from disk\n+            currentBlock = blockRef;\n+        }\n+        else if (r.pindex->nStatus & BLOCK_HAVE_DATA) {\n+            CBlock loadBlock;\n+            if (!ReadBlockFromDisk(loadBlock, r.pindex, Params().GetConsensus())) {\n+                throw std::runtime_error(std::string(__func__) + \"Can't read block from disk\");\n+            }\n+            currentBlock = std::make_shared<const CBlock>(loadBlock);\n+        }\n+        else {\n+            // stop in case we have no block data for this request\n+            break;\n+        }\n+\n+        // allow processing through signal\n+        GetMainSignals().ProcessPriorityRequest(currentBlock, r.pindex);\n+        LogPrint(BCLog::NET, \"processed priority block request (%s) height=%d\\n\", r.pindex->GetBlockHash().ToString(), r.pindex->nHeight);\n+\n+        // remove processed block from queue\n+        it = blocksToDownloadFirst.erase(std::remove_if(blocksToDownloadFirst.begin(), blocksToDownloadFirst.end(), [&r](const PriorityBlockRequest &rB) {\n+                                        return rB.pindex == r.pindex;\n+                                    }), blocksToDownloadFirst.end());\n+    }\n+}\n+\n class CNetProcessingCleanup\n {\n public:"
      },
      {
        "sha": "0c083573e0622682e9ec29c1286d8ba4def87c14",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/78206031444d0361086bb05881aff13b70bff40c/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/78206031444d0361086bb05881aff13b70bff40c/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=78206031444d0361086bb05881aff13b70bff40c",
        "patch": "@@ -90,5 +90,6 @@ bool GetNodeStateStats(NodeId nodeid, CNodeStateStats &stats);\n  * Downloaded blocks will not trigger ActivateBestChain\n  */\n void AddPriorityDownload(const std::vector<const CBlockIndex*>& blocksToDownload);\n+void ProcessPriorityRequests(const std::shared_ptr<CBlock> block);\n \n #endif // BITCOIN_NET_PROCESSING_H"
      }
    ]
  },
  {
    "sha": "a4535d188828d2ce6b630d260440bd1a0c1523b1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNDUzNWQxODg4MjhkMmNlNmI2MzBkMjYwNDQwYmQxYTBjMTUyM2Ix",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-07-12T13:22:15Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2018-08-02T18:05:27Z"
      },
      "message": "Optionally allow to skip the toFarAway check in AcceptBlock",
      "tree": {
        "sha": "be81a1dad773614413c86e39a94cad98bedb4157",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/be81a1dad773614413c86e39a94cad98bedb4157"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a4535d188828d2ce6b630d260440bd1a0c1523b1",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAltjR+gACgkQV/+b28ww\nEAklsQ//dAqlxykMd/AX1FgaGil8EB23k7lknv2Eiwpk2N3azoPqZ3zI6X+0P81q\nW+f+NxJZDOYe709G8RA0MqZ87o1JJ+moJEkQ3oH71+gwmMS+ZJuVnoXySFXjRXcC\nBnQ9ByK5OvDCDLmw2GuWr+4KlUH63CAiFSw+ALV7tI+jqN4WkbTCUoAoUPGon9xR\nhenutol9z4TgZZKws9Nf6cqzF4j1EXP2C4gDgQyDm3vjiMXep14TUlfYa4r9rzXQ\nzOmrHdCCtikwg1YDobRTQzywahQYrQRcAJG2AdUyDg+id1TXKTBuP1E6b4fqEOlu\n/KX1SnpCVwVpEv4UOJcHrXuPIRs4SxlhAJsZ1QDpNNVo0epr0Ld6+hgec2jW8obl\nkqtskbkAPu5h0U7gbq8bLpJH2gUMfkAkFqTc8rzAJUvx18ze1yp0hmEKGYI3EjRj\nd6nnyo/q6g0F2M3LppKSY3WBXrt4g02f5tTNzezf4hCEWTcnhheaC5o2TAX9I6sZ\nbeRMqYBZ0ccHMtVerXjz+IsaGJy9z49eU0uo8gEP+yOZA61D4BfPI4/nVL2e1XYd\nqxy1bPYHDiz6xPBM2JE42ZB7b64Cr6si5DwnurLAZlgHR3A103Lb8sELtdRRD4T+\nqifTSiQOLfITlK2+VRBAwT2FFr/hKom6LXWwhurFxdBb2nRd4WE=\n=RZ19\n-----END PGP SIGNATURE-----",
        "payload": "tree be81a1dad773614413c86e39a94cad98bedb4157\nparent 78206031444d0361086bb05881aff13b70bff40c\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1499865735 +0200\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1533233127 +0200\n\nOptionally allow to skip the toFarAway check in AcceptBlock\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4535d188828d2ce6b630d260440bd1a0c1523b1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a4535d188828d2ce6b630d260440bd1a0c1523b1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4535d188828d2ce6b630d260440bd1a0c1523b1/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "78206031444d0361086bb05881aff13b70bff40c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78206031444d0361086bb05881aff13b70bff40c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/78206031444d0361086bb05881aff13b70bff40c"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "ec629247b0503cc99c81fe51ac5a3216d1829031",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a4535d188828d2ce6b630d260440bd1a0c1523b1/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a4535d188828d2ce6b630d260440bd1a0c1523b1/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=a4535d188828d2ce6b630d260440bd1a0c1523b1",
        "patch": "@@ -165,7 +165,7 @@ class CChainState {\n      * that it doesn't descend from an invalid block, and then add it to mapBlockIndex.\n      */\n     bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n-    bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const CDiskBlockPos* dbp, bool* fNewBlock) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const CDiskBlockPos* dbp, bool* fNewBlock, bool checkFarAhead = true) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n     // Block (dis)connection on a given view:\n     DisconnectResult DisconnectBlock(const CBlock& block, const CBlockIndex* pindex, CCoinsViewCache& view);\n@@ -3468,7 +3468,7 @@ static CDiskBlockPos SaveBlockToDisk(const CBlock& block, int nHeight, const CCh\n }\n \n /** Store block on disk. If dbp is non-nullptr, the file is known to already reside on disk */\n-bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const CDiskBlockPos* dbp, bool* fNewBlock)\n+bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const CDiskBlockPos* dbp, bool* fNewBlock, bool checkFarAhead)\n {\n     const CBlock& block = *pblock;\n \n@@ -3504,7 +3504,7 @@ bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CVali\n     if (!fRequested) {  // If we didn't ask for it:\n         if (pindex->nTx != 0) return true;    // This is a previously-processed block that was pruned\n         if (!fHasMoreOrSameWork) return true; // Don't process less-work chains\n-        if (fTooFarAhead) return true;        // Block height is too high\n+        if (checkFarAhead && fTooFarAhead) return true;      // Block height is too high\n \n         // Protect against DoS attacks from low-work chains.\n         // If our tip is behind, a peer could try to send us\n@@ -3562,8 +3562,8 @@ bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<cons\n         LOCK(cs_main);\n \n         if (ret) {\n-            // Store to disk\n-            ret = g_chainstate.AcceptBlock(pblock, state, chainparams, &pindex, fForceProcessing, nullptr, fNewBlock);\n+            // Store to disk, skip toFarAway check if we are not planing to activate the best chain\n+            ret = g_chainstate.AcceptBlock(pblock, state, chainparams, &pindex, fForceProcessing, nullptr, fNewBlock, activateBestChain);\n         }\n         if (!ret) {\n             GetMainSignals().BlockChecked(*pblock, state);"
      }
    ]
  },
  {
    "sha": "3a2bd72593b10444fe24c74637ac4575b7af9404",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYTJiZDcyNTkzYjEwNDQ0ZmUyNGM3NDYzN2FjNDU3NWI3YWY5NDA0",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-01-10T17:24:56Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2018-08-02T18:08:09Z"
      },
      "message": "Add fAutoRequestBlocks to disabled/enable the verification progress",
      "tree": {
        "sha": "5bf87b1fe437bc1dbedb1129e157df7c8daf0b4d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5bf87b1fe437bc1dbedb1129e157df7c8daf0b4d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3a2bd72593b10444fe24c74637ac4575b7af9404",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAltjSIkACgkQV/+b28ww\nEAlWpg//Zm+MvyPa+Eavxt2VouOTqng62kraL8fSdwsBffW23YwdCUDLMK7GuMXW\n9LhadSjSNeQphhdvNpIT32FappUVLnc9h9NSaWcBRizbZNE7oyueDnflI78fpxWv\nkXclj5EGBbNiSADDRSmJL9eWW1iAg8BiYwqt0J8daSp01pOLU2ksJRUABCnOsUz0\n7bbg58BwqUVDkxgRs3rz3iJTWPGGwYmGRLL1jHlcIr7dwXMaVGISiZDmsVK4mAxM\nLH5hoI8u4fffaCK5yGkOYKOXYkwzJs0+VIMU7C3a5UuQuS2MrZZqLIwQyApr+5OJ\nLHOfaLpKCQf57heg7rCG8eZVP5gO7Fqma2DC4tpDY8TxRj3mgA8M+eBmr33r2nkw\nYt6VQpfetOcNLATdGHgB6LJmUb8iTGkuYZLpl4TnirhY0L8fSvldxZlov/rjU/vn\njG6lN8KOWmVqBatZUavEAIWsVUPIXKBYma8B5FifXHCBteIHp5GvtV0koLTTvTV6\npAb4O7+Lv8Q5OxEhlvZRnNFmVySyPePbx5QjbIm8cZ0NsdorK1QAX4IeWKGBH0FX\naCUbMsVe4rxeu2pVcFJunDFOZfDleoSskprjUgcUvq18kqkWsz87EdsVsY1N/7sL\nVGfENo55AMoaXbsZkGCHyoJNrlQKiCAxu1kSz54tzGsDQ08aG1s=\n=7YxW\n-----END PGP SIGNATURE-----",
        "payload": "tree 5bf87b1fe437bc1dbedb1129e157df7c8daf0b4d\nparent a4535d188828d2ce6b630d260440bd1a0c1523b1\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1484069096 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1533233289 +0200\n\nAdd fAutoRequestBlocks to disabled/enable the verification progress\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a2bd72593b10444fe24c74637ac4575b7af9404",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3a2bd72593b10444fe24c74637ac4575b7af9404",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a2bd72593b10444fe24c74637ac4575b7af9404/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a4535d188828d2ce6b630d260440bd1a0c1523b1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4535d188828d2ce6b630d260440bd1a0c1523b1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a4535d188828d2ce6b630d260440bd1a0c1523b1"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 23,
      "deletions": 0
    },
    "files": [
      {
        "sha": "9f467a1c2c25d904fc739f551fb15aa7868c0604",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a2bd72593b10444fe24c74637ac4575b7af9404/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a2bd72593b10444fe24c74637ac4575b7af9404/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=3a2bd72593b10444fe24c74637ac4575b7af9404",
        "patch": "@@ -93,6 +93,8 @@ static constexpr unsigned int AVG_FEEFILTER_BROADCAST_INTERVAL = 10 * 60;\n /** Maximum feefilter broadcast delay after significant change. */\n static constexpr unsigned int MAX_FEEFILTER_CHANGE_DELAY = 5 * 60;\n \n+static std::atomic<bool> fAutoRequestBlocks(DEFAULT_AUTOMATIC_BLOCK_REQUESTS);\n+\n // Internal stuff\n namespace {\n     /** Number of nodes with fSyncStarted. */\n@@ -553,6 +555,10 @@ bool FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vector<con\n         return true;\n     }\n \n+    if (!fAutoRequestBlocks) {\n+        return false;\n+    }\n+\n     if (state->pindexBestKnownBlock == nullptr || state->pindexBestKnownBlock->nChainWork < chainActive.Tip()->nChainWork || state->pindexBestKnownBlock->nChainWork < nMinimumChainWork) {\n         // This peer has nothing interesting.\n         return false;\n@@ -1547,6 +1553,10 @@ bool static ProcessHeadersMessage(CNode *pfrom, CConnman *connman, const std::ve\n                         pindexLast->GetBlockHash().ToString(),\n                         pindexLast->nHeight);\n             } else {\n+                // Do not request blocks if autorequest is disabled\n+                if (!fAutoRequestBlocks) {\n+                    return true;\n+                }\n                 std::vector<CInv> vGetData;\n                 // Download as much as possible, from earliest to latest.\n                 for (const CBlockIndex *pindex : reverse_iterate(vToFetch)) {\n@@ -3867,6 +3877,14 @@ void ProcessPriorityRequests(const std::shared_ptr<CBlock> blockRef) {\n     }\n }\n \n+void SetAutoRequestBlocks(bool state) {\n+    fAutoRequestBlocks = state;\n+}\n+\n+bool isAutoRequestingBlocks() {\n+    return fAutoRequestBlocks;\n+}\n+\n class CNetProcessingCleanup\n {\n public:"
      },
      {
        "sha": "6ae06c6828395b063cceff0721fcb19a1ad53d2a",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a2bd72593b10444fe24c74637ac4575b7af9404/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a2bd72593b10444fe24c74637ac4575b7af9404/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=3a2bd72593b10444fe24c74637ac4575b7af9404",
        "patch": "@@ -16,6 +16,8 @@ static const unsigned int DEFAULT_MAX_ORPHAN_TRANSACTIONS = 100;\n static const unsigned int DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN = 100;\n /** Default for BIP61 (sending reject messages) */\n static constexpr bool DEFAULT_ENABLE_BIP61 = true;\n+/** if disabled, blocks will not be requested automatically, useful for low-resources-available mode */\n+static const bool DEFAULT_AUTOMATIC_BLOCK_REQUESTS = true;\n \n class PeerLogicValidation final : public CValidationInterface, public NetEventsInterface {\n private:\n@@ -92,4 +94,7 @@ bool GetNodeStateStats(NodeId nodeid, CNodeStateStats &stats);\n void AddPriorityDownload(const std::vector<const CBlockIndex*>& blocksToDownload);\n void ProcessPriorityRequests(const std::shared_ptr<CBlock> block);\n \n+void SetAutoRequestBlocks(bool state);\n+bool isAutoRequestingBlocks();\n+\n #endif // BITCOIN_NET_PROCESSING_H"
      }
    ]
  },
  {
    "sha": "bb06a8493242588db9a29406715bd987bd9208d5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYjA2YTg0OTMyNDI1ODhkYjlhMjk0MDY3MTViZDk4N2JkOTIwOGQ1",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-11-16T08:12:27Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2018-08-02T18:23:18Z"
      },
      "message": "[RPC] Add requestblocks - a simple way to priorize block downloads",
      "tree": {
        "sha": "a88e7967c7246889424097e1e2f3f57ed6fe60d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a88e7967c7246889424097e1e2f3f57ed6fe60d2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bb06a8493242588db9a29406715bd987bd9208d5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAltjTBkACgkQV/+b28ww\nEAm2sA//T9QAvaaxJ+zEZdpBY6bfmdOBdPbxywA/WG6y1wXYgkhDsr2+TpSULQlT\nguqsfC4VizxKe4Xq51QbdACEjU6wbcsZ7PHt2k8nCjyKfI4NzX/bAQSTdvd0Tfmu\nlUJzZSPQxx4SW5uLVfjtWf/3UBkDidg5hADiejKMGzTmQunX2XLXg1Sn9m6eMKGk\n46cCndIO5kdjtV4goAq4bdNF+u1J3zEQHthiHYsltXJu5xMV9qAaUzt7aMloClpu\n0qup7k5RY62ZymnesYqAxkk08j+b6y6cbuEI5E9L+E4/VDHfv1384rH/gpouEB4n\n5az/pgf6vTzppI73zjRUQNVB+GRuWtYPKHbn3YrBGIP9A3MW8yEqctOLwJuP+1m4\n43hy+1b+wiJ9yuUAMvTBV5qGAJfKssLb/PZS7KcKcJiKvBQKeiMHI/bS9X6kYeod\niggyg6PMmuIR7MXN2qY5ACUJQM3ZYI/CJVxC5sXsM9eOvX81+iDv7onBcxPy7HtI\njLMBwv7X3JkDWVyf8ADv2iYBZpACo0/N8UHLmWhyhmFAd2Q9ppXqg27UreZ183ob\nyW4pBa2V1ggv+WiKVZuov/TMBwRt0qO+ArFLVzMcITQsrPTXtrTgLWQSCV0WMqf0\ntACNEG53pIZUwyjvDzZXloRmROut1Oc3AEdBsUzVIGblSWTJQEM=\n=N2ph\n-----END PGP SIGNATURE-----",
        "payload": "tree a88e7967c7246889424097e1e2f3f57ed6fe60d2\nparent 3a2bd72593b10444fe24c74637ac4575b7af9404\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1479283947 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1533234198 +0200\n\n[RPC] Add requestblocks - a simple way to priorize block downloads\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb06a8493242588db9a29406715bd987bd9208d5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bb06a8493242588db9a29406715bd987bd9208d5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb06a8493242588db9a29406715bd987bd9208d5/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3a2bd72593b10444fe24c74637ac4575b7af9404",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a2bd72593b10444fe24c74637ac4575b7af9404",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3a2bd72593b10444fe24c74637ac4575b7af9404"
      }
    ],
    "stats": {
      "total": 76,
      "additions": 75,
      "deletions": 1
    },
    "files": [
      {
        "sha": "592104621a53b022d45aee971dc3a1e0d3a6a732",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb06a8493242588db9a29406715bd987bd9208d5/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb06a8493242588db9a29406715bd987bd9208d5/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=bb06a8493242588db9a29406715bd987bd9208d5",
        "patch": "@@ -3877,6 +3877,18 @@ void ProcessPriorityRequests(const std::shared_ptr<CBlock> blockRef) {\n     }\n }\n \n+bool FlushPriorityDownloads() {\n+    LOCK(cs_main);\n+    bool ret = blocksToDownloadFirst.empty();\n+    blocksToDownloadFirst.clear();\n+    return !ret;\n+}\n+\n+size_t CountPriorityDownloads() {\n+    LOCK(cs_main);\n+    return blocksToDownloadFirst.size();\n+}\n+\n void SetAutoRequestBlocks(bool state) {\n     fAutoRequestBlocks = state;\n }"
      },
      {
        "sha": "8bbc7efc8ecdc0d722dbab8cdf5f4389f82d6935",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb06a8493242588db9a29406715bd987bd9208d5/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb06a8493242588db9a29406715bd987bd9208d5/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=bb06a8493242588db9a29406715bd987bd9208d5",
        "patch": "@@ -93,6 +93,8 @@ bool GetNodeStateStats(NodeId nodeid, CNodeStateStats &stats);\n  */\n void AddPriorityDownload(const std::vector<const CBlockIndex*>& blocksToDownload);\n void ProcessPriorityRequests(const std::shared_ptr<CBlock> block);\n+bool FlushPriorityDownloads();\n+size_t CountPriorityDownloads();\n \n void SetAutoRequestBlocks(bool state);\n bool isAutoRequestingBlocks();"
      },
      {
        "sha": "6db2d3d645e2611868e79c07c28d47a412056980",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 59,
        "deletions": 1,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb06a8493242588db9a29406715bd987bd9208d5/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb06a8493242588db9a29406715bd987bd9208d5/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=bb06a8493242588db9a29406715bd987bd9208d5",
        "patch": "@@ -16,6 +16,7 @@\n #include <core_io.h>\n #include <index/txindex.h>\n #include <key_io.h>\n+#include <net_processing.h>\n #include <policy/feerate.h>\n #include <policy/policy.h>\n #include <primitives/transaction.h>\n@@ -90,6 +91,7 @@ UniValue blockheaderToJSON(const CBlockIndex* blockindex)\n     if (chainActive.Contains(blockindex))\n         confirmations = chainActive.Height() - blockindex->nHeight + 1;\n     result.pushKV(\"confirmations\", confirmations);\n+    result.pushKV(\"validated\", ((blockindex->nStatus & BLOCK_VALID_MASK) >= BLOCK_VALID_SCRIPTS));\n     result.pushKV(\"height\", blockindex->nHeight);\n     result.pushKV(\"version\", blockindex->nVersion);\n     result.pushKV(\"versionHex\", strprintf(\"%08x\", blockindex->nVersion));\n@@ -120,6 +122,7 @@ UniValue blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool tx\n     if (chainActive.Contains(blockindex))\n         confirmations = chainActive.Height() - blockindex->nHeight + 1;\n     result.pushKV(\"confirmations\", confirmations);\n+    result.pushKV(\"validated\", (blockindex->nStatus & BLOCK_VALID_MASK) >= BLOCK_VALID_SCRIPTS);\n     result.pushKV(\"strippedsize\", (int)::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS));\n     result.pushKV(\"size\", (int)::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION));\n     result.pushKV(\"weight\", (int)::GetBlockWeight(block));\n@@ -691,6 +694,7 @@ static UniValue getblockheader(const JSONRPCRequest& request)\n             \"{\\n\"\n             \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n             \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n+            \"  \\\"validated\\\" : n,       (boolean) True if the block has been validated\\n\"\n             \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n             \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n             \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n@@ -1985,6 +1989,60 @@ class CoinsViewScanReserver\n     }\n };\n \n+UniValue requestblocks(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw std::runtime_error(\n+            \"requestblocks ( add | flush | status ) ( [\\\"hash_0\\\", \\\"hash_1\\\", ...] )\\n\"\n+            \"\\nPriorize blocks downloads.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. action            (string, required) the action to execute\\n\"\n+            \"                                        add  = add new blocks to the priority download\\n\"\n+            \"                                        flush = flush the queue (blocks in-flight will still be downloaded)\\n\"\n+            \"                                        status = get info about the queue\\n\"\n+            \"2. blockhashes       (array, optional) the hashes of the blocks to download\\n\"\n+            \"\\nResult:\\n\"\n+            \"   add: <null>\\n\"\n+            \"   flush: <true|false> (if the the queue wasn't empty)\\n\"\n+            \"   status: {\\\"count\\\": \\\"<amount of blocks in the queue>\\\"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"requestblocks\", \"add, \\\"'[\\\"<blockhash>\\\"]'\\\"\")\n+            + HelpExampleRpc(\"requestblocks\", \"add, \\\"'[\\\"<blockhash>\\\"]'\\\"\")\n+            );\n+\n+    if (request.params[0].get_str() == \"flush\") {\n+        return UniValue(FlushPriorityDownloads());\n+    }\n+    else if (request.params[0].get_str() == \"status\") {\n+        UniValue ret(UniValue::VOBJ);\n+        ret.push_back(Pair(\"count\", (uint64_t)CountPriorityDownloads()));\n+        return ret;\n+    }\n+    else if (request.params[0].get_str() == \"add\") {\n+        if (request.params[1].isNull()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Missing blocks array\");\n+        }\n+        std::vector<const CBlockIndex*> blocksToDownload;\n+        {\n+            LOCK(cs_main); //mapBlockIndex\n+            for (const UniValue& strHashU : request.params[1].get_array().getValues()) {\n+                uint256 hash(uint256S(strHashU.get_str()));\n+                BlockMap::const_iterator mi = mapBlockIndex.find(hash);\n+                if (mi == mapBlockIndex.end()) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+                }\n+                blocksToDownload.push_back(mi->second);\n+            }\n+        }\n+\n+        AddPriorityDownload(blocksToDownload);\n+        return NullUniValue;\n+    }\n+    else {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Unkown action\");\n+    }\n+}\n+\n UniValue scantxoutset(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n@@ -2159,8 +2217,8 @@ static const CRPCCommand commands[] =\n     { \"blockchain\",         \"pruneblockchain\",        &pruneblockchain,        {\"height\"} },\n     { \"blockchain\",         \"savemempool\",            &savemempool,            {} },\n     { \"blockchain\",         \"verifychain\",            &verifychain,            {\"checklevel\",\"nblocks\"} },\n-\n     { \"blockchain\",         \"preciousblock\",          &preciousblock,          {\"blockhash\"} },\n+    { \"blockchain\",         \"requestblocks\",          &requestblocks,          {\"action\", \"blockhashes\"} },\n     { \"blockchain\",         \"scantxoutset\",           &scantxoutset,           {\"action\", \"scanobjects\"} },\n \n     /* Not shown in help */"
      },
      {
        "sha": "26c5ef751271003ac59a70eea9c3d5d09090d786",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb06a8493242588db9a29406715bd987bd9208d5/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb06a8493242588db9a29406715bd987bd9208d5/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=bb06a8493242588db9a29406715bd987bd9208d5",
        "patch": "@@ -159,6 +159,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"logging\", 1, \"exclude\" },\n     { \"disconnectnode\", 1, \"nodeid\" },\n     { \"addwitnessaddress\", 1, \"p2sh\" },\n+    { \"requestblocks\", 1, \"blockhashes\" },\n     // Echo with conversion (For testing only)\n     { \"echojson\", 0, \"arg0\" },\n     { \"echojson\", 1, \"arg1\" },"
      },
      {
        "sha": "0760da5c07f7ed3f32a30df263878fd709ae06e6",
        "filename": "test/functional/rpc_blockchain.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb06a8493242588db9a29406715bd987bd9208d5/test/functional/rpc_blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb06a8493242588db9a29406715bd987bd9208d5/test/functional/rpc_blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_blockchain.py?ref=bb06a8493242588db9a29406715bd987bd9208d5",
        "patch": "@@ -214,6 +214,7 @@ def _test_getblockheader(self):\n         assert_equal(header['hash'], besthash)\n         assert_equal(header['height'], 200)\n         assert_equal(header['confirmations'], 1)\n+        assert_equal(header['validated'], True)\n         assert_equal(header['previousblockhash'], secondbesthash)\n         assert_is_hex_string(header['chainwork'])\n         assert_equal(header['nTx'], 1)"
      }
    ]
  },
  {
    "sha": "263b0b47a320f7ddfe5cc750c63656260e559dc4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNjNiMGI0N2EzMjBmN2RkZmU1Y2M3NTBjNjM2NTYyNjBlNTU5ZGM0",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-07-11T13:46:12Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2018-08-02T18:23:45Z"
      },
      "message": "Add -autorequestblocks which then allows to run in non-validation mode (pure light-client mode)",
      "tree": {
        "sha": "32e08257ad990cd23b744bcb20113319dcb04ce1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/32e08257ad990cd23b744bcb20113319dcb04ce1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/263b0b47a320f7ddfe5cc750c63656260e559dc4",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAltjTDQACgkQV/+b28ww\nEAmHbg/+JLMiK9d3RkVjkaCDTRlz5eX6uHEP5YZvdCsS7RLeWFUmuTefv01wG/eu\nRNxNIXpTK++2hLRHbikc4dbjOTCq8ecpV1ONc/k6xJdmJktxFZtUo23LD7DxAbCS\n/htUMJLEamfdR2VCyk/wac9Ykzk8kI862jcSHZ4DjFjoqn0vgXBAkBJKL8pLB5L/\nwTHwDuXvzjZ67SiUR0J1lC9aAvT1bbDbbDT2n8G5j0qDFPx+McgGoDjU3ZCqDmpi\n5GbHmFa1cMsshtAit3pC2xxm1lkPJ5F017YY7t+bKOwKLG/2isuM+4cnlOdF4La1\nZDMzSFDVcELPIoZZHtT1xyG+WRbMAighJtMRgB6J/KN58mhCBMT0m7ijzB/Xi48C\nJDEkQrhSIeW3X7PjpJdhR8MVpPdIs5nwO+PcRWxJ2+XhQZZhvyEwbQ3YGNtYCpAT\n01qRcPqW6A1XPzwko1Gtw8QVHIzQcGZQ5anljSlLWDITMQKOmNm7gK+exhVsxC99\nhJZ8gBvlmfV7n9z9czkmTr8v5iio/iTgH7fixveXwPcwAagE/wsBtetZ2nVaW5Fx\n9ocBIeN6IMCH7eTA19MN7UiB4UWwacYCEzYffGqVn9jypjdrUGJYo8g1D9IhUeFy\nbKZ29IUD5XxSdYTtuw4meK2MIQbMr8wsAwHyBZ5hKUO/ybYa8mg=\n=mRXg\n-----END PGP SIGNATURE-----",
        "payload": "tree 32e08257ad990cd23b744bcb20113319dcb04ce1\nparent bb06a8493242588db9a29406715bd987bd9208d5\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1499780772 +0200\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1533234225 +0200\n\nAdd -autorequestblocks which then allows to run in non-validation mode (pure light-client mode)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/263b0b47a320f7ddfe5cc750c63656260e559dc4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/263b0b47a320f7ddfe5cc750c63656260e559dc4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/263b0b47a320f7ddfe5cc750c63656260e559dc4/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bb06a8493242588db9a29406715bd987bd9208d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb06a8493242588db9a29406715bd987bd9208d5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bb06a8493242588db9a29406715bd987bd9208d5"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "8d71f591f02ee82fe50126dc0fd447ba07ffc1fc",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/263b0b47a320f7ddfe5cc750c63656260e559dc4/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/263b0b47a320f7ddfe5cc750c63656260e559dc4/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=263b0b47a320f7ddfe5cc750c63656260e559dc4",
        "patch": "@@ -356,6 +356,7 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-version\", \"Print version and exit\", false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-alertnotify=<cmd>\", \"Execute command when a relevant alert is received or we see a really long fork (%s in cmd is replaced by message)\", false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-assumevalid=<hex>\", strprintf(\"If this block is in the chain assume that it and its ancestors are valid and potentially skip their script verification (0 to verify all, default: %s, testnet: %s)\", defaultChainParams->GetConsensus().defaultAssumeValid.GetHex(), testnetChainParams->GetConsensus().defaultAssumeValid.GetHex()), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-autorequestblocks\", strprintf(\"Automatic block request, if disabled, blocks will not be requested automatically (default: %u)\", DEFAULT_AUTOMATIC_BLOCK_REQUESTS), false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-blocksdir=<dir>\", \"Specify blocks directory (default: <datadir>/blocks)\", false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-blocknotify=<cmd>\", \"Execute command when the best block changes (%s in cmd is replaced by block hash)\", false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-blockreconstructionextratxn=<n>\", strprintf(\"Extra transactions to keep in memory for compact block reconstructions (default: %u)\", DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN), false, OptionsCategory::OPTIONS);\n@@ -1004,6 +1005,7 @@ bool AppInitParameterInteraction()\n     }\n     fCheckBlockIndex = gArgs.GetBoolArg(\"-checkblockindex\", chainparams.DefaultConsistencyChecks());\n     fCheckpointsEnabled = gArgs.GetBoolArg(\"-checkpoints\", DEFAULT_CHECKPOINTS_ENABLED);\n+    SetAutoRequestBlocks(gArgs.GetBoolArg(\"-autorequestblocks\", DEFAULT_AUTOMATIC_BLOCK_REQUESTS));\n \n     hashAssumeValid = uint256S(gArgs.GetArg(\"-assumevalid\", chainparams.GetConsensus().defaultAssumeValid.GetHex()));\n     if (!hashAssumeValid.IsNull())"
      }
    ]
  },
  {
    "sha": "6e4c9b70f202a8917ddebc8d74aab055b1f504b4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZTRjOWI3MGYyMDJhODkxN2RkZWJjOGQ3NGFhYjA1NWIxZjUwNGI0",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-07-21T13:15:27Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2018-08-02T18:23:55Z"
      },
      "message": "[QA] add requestblocks test",
      "tree": {
        "sha": "cbed63f957178c8cbad14228e74494f779e62c09",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cbed63f957178c8cbad14228e74494f779e62c09"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6e4c9b70f202a8917ddebc8d74aab055b1f504b4",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAltjTDsACgkQV/+b28ww\nEAk5mg/+P/P3bim0MFF48+A+CQaJcnZv6DhsSC8M6kN98vtci82NBVph5Pv+2BWp\nlT1gVnzyLeu2iwHTikTWIPYWILvneOeggy66WsrreUHu5l6lewe3EGgruhMt2ozb\nKNlAOEJnK6wY5eDJNTPlh6xmmpS0ZyVqS2vUozRxNfXSoERXd1xhNjVBv0GWYcIW\nLlWfCBBPZLotCDm1FXN/aBydJaP83wjF70tz1VUrZR5CuoEihcnRHAnVNZ0oP3f2\nhK1KAit4+2DeAbR8sH8DgwgzK/5apm/j5y5nQAX+AtTHYrXeHWtZorrdaRZLYQNv\nt7QQoh9p18IfuE+gwGbvQk/vj+Y3CX9wpqwkxqB9eyHYv4etyvRzVmBRxEwVERjl\nazPkcAmeJFr/bcbWwGArNusczVbGqSwG2SGVzal8JUKzPBPPbLfispv/a63/tu0S\ng6mpk1Y0hnnOYvJHJPqWQwNKzqHiMyZAkywZXIHauSfPF+YXV9RiYacnKlxniiDY\nPTuoyH7oXUmhWYBozkL9LzFZileGi8mtjRoi2aXNENtoIlYj0EGQ8zDsuUSQY6TD\nhU/jRkM+JowEXIgX8IpAdErX867ikzB47KMb/0SdFHYJdJMjdHwmX0tLf5TTvUBI\nDGBXXK+S6xQX6hChpv6erpTePOHBEfxMeeovboqs73Ae7ld/Dvg=\n=Lb52\n-----END PGP SIGNATURE-----",
        "payload": "tree cbed63f957178c8cbad14228e74494f779e62c09\nparent 263b0b47a320f7ddfe5cc750c63656260e559dc4\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1500642927 +0200\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1533234235 +0200\n\n[QA] add requestblocks test\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e4c9b70f202a8917ddebc8d74aab055b1f504b4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6e4c9b70f202a8917ddebc8d74aab055b1f504b4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e4c9b70f202a8917ddebc8d74aab055b1f504b4/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "263b0b47a320f7ddfe5cc750c63656260e559dc4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/263b0b47a320f7ddfe5cc750c63656260e559dc4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/263b0b47a320f7ddfe5cc750c63656260e559dc4"
      }
    ],
    "stats": {
      "total": 63,
      "additions": 63,
      "deletions": 0
    },
    "files": [
      {
        "sha": "b1def74bc9268d3a7817d39edcca954932d6b0db",
        "filename": "test/functional/rpc_requestblocks.py",
        "status": "added",
        "additions": 62,
        "deletions": 0,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e4c9b70f202a8917ddebc8d74aab055b1f504b4/test/functional/rpc_requestblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e4c9b70f202a8917ddebc8d74aab055b1f504b4/test/functional/rpc_requestblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_requestblocks.py?ref=6e4c9b70f202a8917ddebc8d74aab055b1f504b4",
        "patch": "@@ -0,0 +1,62 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+\n+class RequestBlockRequestTest (BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 2\n+        self.extra_args = [[], ['-autorequestblocks=0']]\n+\n+    def run_test(self):\n+        self.nodes[0].generate(50)\n+        timeout = 20\n+        ctps = self.nodes[1].getchaintips()\n+        while timeout > 0:\n+            ctps = self.nodes[1].getchaintips()\n+            headerHeightReached = False\n+            for ct in ctps:\n+                if ct['status'] == \"headers-only\":\n+                    if ct['height'] == 50:\n+                        headerHeightReached = True\n+                if ct['status'] == \"active\":\n+                    assert(ct['height'] == 0)\n+            time.sleep(1)\n+            timeout-=1\n+            if headerHeightReached == True:\n+                break\n+        assert(timeout>0)\n+\n+        node0bbhash = self.nodes[0].getbestblockhash()\n+        # best block should not be validated, header must be available\n+        bh = self.nodes[1].getblockheader(node0bbhash, True)\n+\n+        assert_equal(bh['validated'], False)\n+        # block must not be available\n+        assert_raises_rpc_error(-1, \"Block not found on disk\", self.nodes[1].getblock, node0bbhash)\n+\n+        # request best block (auxiliary)\n+        self.nodes[1].requestblocks(\"add\", [node0bbhash])\n+        timeout = 20\n+        while timeout > 0:\n+            if self.nodes[1].requestblocks(\"status\")['count'] == 0:\n+                break\n+            time.sleep(1)\n+            timeout-=1\n+        assert(timeout>0)\n+\n+        # block must now be available\n+        block = self.nodes[1].getblock(node0bbhash, True)\n+        assert_equal(block['hash'], node0bbhash)\n+        assert_equal(block['validated'], False)\n+\n+        #prevblock must not be available\n+        assert_raises_rpc_error(-1, \"Block not found on disk\", self.nodes[1].getblock, block['previousblockhash'])\n+\n+if __name__ == '__main__':\n+    RequestBlockRequestTest().main()"
      },
      {
        "sha": "096be7cfde6bbdbecaeee03c1c72490e0c8b36a6",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e4c9b70f202a8917ddebc8d74aab055b1f504b4/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e4c9b70f202a8917ddebc8d74aab055b1f504b4/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=6e4c9b70f202a8917ddebc8d74aab055b1f504b4",
        "patch": "@@ -137,6 +137,7 @@\n     'wallet_encryption.py',\n     'feature_dersig.py',\n     'feature_cltv.py',\n+    'rpc_requestblocks.py',\n     'rpc_uptime.py',\n     'wallet_resendwallettransactions.py',\n     'wallet_fallbackfee.py',"
      }
    ]
  },
  {
    "sha": "50b8e516511b6939fae2dc8bf387912c1a364838",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MGI4ZTUxNjUxMWI2OTM5ZmFlMmRjOGJmMzg3OTEyYzFhMzY0ODM4",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-07-27T08:29:19Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2018-08-02T18:23:55Z"
      },
      "message": "Pass priority requests through ZMQ notifications",
      "tree": {
        "sha": "961171834da261149e9ff77316b322a592bc6879",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/961171834da261149e9ff77316b322a592bc6879"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/50b8e516511b6939fae2dc8bf387912c1a364838",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAltjTDsACgkQV/+b28ww\nEAmKSBAAinyj0qic9mof+1edYsuAwSVIxXSmpfBibucA64bkEml+hVotOjtyEe2u\n75s/V7vGWcclqgy4LFz8ce+sSsW1B80gjhiQDILbA/96+YI6hX4PjbTpj/BcxXnS\nvIrCzh/rOw8VT4FdOFk34wUkk8NYC07oX99K5m8UPCoBv2Ai8pLLSyXvksH7Qe/W\nP2QWLIHiDx0ysze3bJ82QEQ5W8YoXTOlhMBf5S7vag2+hecgXxFhvRIAEikUAee0\n3PSOGmDWFaLHzf6vG2+3s4lNQkWiKzIT4CocuCU036jvZdQ2vvprM09JJTnvt+b0\nxHgEampoZ5+zt0VkHcLEAMRwQYF7Pih8kOquy5DEiEpKzjHUK0Z253LCcnil09O3\n00GTihzLuf5QzvJBa3HnfXraxTQomFuLUQjsp3Niu63l5cdiDuh3j7zvx/VcML6a\nEkF+ErTvFK34yWt/QMFyvZAKOWpLnIaaFzt4PZ41pniwCW3VrK2Bcwxu2dHAS6M3\nCJY+/LsfiWSXFoV/wTc3mlwvBoA37K7vWcgBOoSIePJMJSYI2l3rmAQ6p84NChVW\nBcYwjiwqZ3Ly1+eBCLlTjPoV7JNj/644wiB4Zf+RXIH+AaJ+wdGmY/uy7f0ljwRX\nZkRvwXBjhQrsV6qZgN/18guvEPv1dxkSkmdtJkCFba0pV9EGfPc=\n=40dQ\n-----END PGP SIGNATURE-----",
        "payload": "tree 961171834da261149e9ff77316b322a592bc6879\nparent 6e4c9b70f202a8917ddebc8d74aab055b1f504b4\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1501144159 +0200\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1533234235 +0200\n\nPass priority requests through ZMQ notifications\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50b8e516511b6939fae2dc8bf387912c1a364838",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/50b8e516511b6939fae2dc8bf387912c1a364838",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50b8e516511b6939fae2dc8bf387912c1a364838/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6e4c9b70f202a8917ddebc8d74aab055b1f504b4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e4c9b70f202a8917ddebc8d74aab055b1f504b4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6e4c9b70f202a8917ddebc8d74aab055b1f504b4"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 9,
      "deletions": 0
    },
    "files": [
      {
        "sha": "7d5eb78cc74da0b9d8b2146f449da75ddbff7012",
        "filename": "src/zmq/zmqnotificationinterface.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50b8e516511b6939fae2dc8bf387912c1a364838/src/zmq/zmqnotificationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50b8e516511b6939fae2dc8bf387912c1a364838/src/zmq/zmqnotificationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqnotificationinterface.cpp?ref=50b8e516511b6939fae2dc8bf387912c1a364838",
        "patch": "@@ -182,6 +182,14 @@ void CZMQNotificationInterface::BlockConnected(const std::shared_ptr<const CBloc\n     }\n }\n \n+void CZMQNotificationInterface::ProcessPriorityRequest(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected)\n+{\n+    for (const CTransactionRef& ptx : pblock->vtx) {\n+        // Do a normal notify for each transaction added in the block\n+        TransactionAddedToMempool(ptx);\n+    }\n+}\n+\n void CZMQNotificationInterface::BlockDisconnected(const std::shared_ptr<const CBlock>& pblock)\n {\n     for (const CTransactionRef& ptx : pblock->vtx) {"
      },
      {
        "sha": "7f1ade5804e453f880a5a5b0bed0b4a233ecb087",
        "filename": "src/zmq/zmqnotificationinterface.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50b8e516511b6939fae2dc8bf387912c1a364838/src/zmq/zmqnotificationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50b8e516511b6939fae2dc8bf387912c1a364838/src/zmq/zmqnotificationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqnotificationinterface.h?ref=50b8e516511b6939fae2dc8bf387912c1a364838",
        "patch": "@@ -29,6 +29,7 @@ class CZMQNotificationInterface final : public CValidationInterface\n     // CValidationInterface\n     void TransactionAddedToMempool(const CTransactionRef& tx) override;\n     void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected, const std::vector<CTransactionRef>& vtxConflicted) override;\n+    void ProcessPriorityRequest(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected) override;\n     void BlockDisconnected(const std::shared_ptr<const CBlock>& pblock) override;\n     void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) override;\n "
      }
    ]
  }
]