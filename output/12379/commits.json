[
  {
    "sha": "7dcaa1a9798c4ffff824739d6395df0623579a40",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZGNhYTFhOTc5OGM0ZmZmZjgyNDczOWQ2Mzk1ZGYwNjIzNTc5YTQw",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-02-07T14:22:58Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-02-07T14:22:58Z"
      },
      "message": "scripted-diff: rename TestNode to TestP2PConn in tests\n\nSeveral test scripts define a subclass of P2PInterface called TestNode.\nThis commit renames those to TestP2PConn since we already have a\nTestNode class in the test framework.\n\n-BEGIN VERIFY SCRIPT-\nsed -i s/TestNode/TestP2PConn/ test/functional/*py test/functional/test_framework/comptool.py\n_END VERIFY SCRIPT-",
      "tree": {
        "sha": "e3940403e8fbebc4ec20500b99a781f8af44e93c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e3940403e8fbebc4ec20500b99a781f8af44e93c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7dcaa1a9798c4ffff824739d6395df0623579a40",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7dcaa1a9798c4ffff824739d6395df0623579a40",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7dcaa1a9798c4ffff824739d6395df0623579a40",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7dcaa1a9798c4ffff824739d6395df0623579a40/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1462bde767a121233118c04c5629bd9de1ba0f16",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1462bde767a121233118c04c5629bd9de1ba0f16",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1462bde767a121233118c04c5629bd9de1ba0f16"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 21,
      "deletions": 21
    },
    "files": [
      {
        "sha": "c92fe8dd4560e13759175e920d638e6675bf6bc9",
        "filename": "test/functional/feature_maxuploadtarget.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7dcaa1a9798c4ffff824739d6395df0623579a40/test/functional/feature_maxuploadtarget.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7dcaa1a9798c4ffff824739d6395df0623579a40/test/functional/feature_maxuploadtarget.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_maxuploadtarget.py?ref=7dcaa1a9798c4ffff824739d6395df0623579a40",
        "patch": "@@ -17,7 +17,7 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n \n-class TestNode(P2PInterface):\n+class TestP2PConn(P2PInterface):\n     def __init__(self):\n         super().__init__()\n         self.block_receive_map = defaultdict(int)\n@@ -55,7 +55,7 @@ def run_test(self):\n         p2p_conns = []\n \n         for _ in range(3):\n-            p2p_conns.append(self.nodes[0].add_p2p_connection(TestNode()))\n+            p2p_conns.append(self.nodes[0].add_p2p_connection(TestP2PConn()))\n \n         network_thread_start()\n         for p2pc in p2p_conns:\n@@ -147,7 +147,7 @@ def run_test(self):\n         self.start_node(0, [\"-whitelist=127.0.0.1\", \"-maxuploadtarget=1\", \"-blockmaxsize=999000\"])\n \n         # Reconnect to self.nodes[0]\n-        self.nodes[0].add_p2p_connection(TestNode())\n+        self.nodes[0].add_p2p_connection(TestP2PConn())\n \n         network_thread_start()\n         self.nodes[0].p2p.wait_for_verack()"
      },
      {
        "sha": "e700e599a85edf0b1355b502bbcbac51eb29d3f4",
        "filename": "test/functional/p2p_compactblocks.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7dcaa1a9798c4ffff824739d6395df0623579a40/test/functional/p2p_compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7dcaa1a9798c4ffff824739d6395df0623579a40/test/functional/p2p_compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_compactblocks.py?ref=7dcaa1a9798c4ffff824739d6395df0623579a40",
        "patch": "@@ -14,8 +14,8 @@\n from test_framework.blocktools import create_block, create_coinbase, add_witness_commitment\n from test_framework.script import CScript, OP_TRUE\n \n-# TestNode: A peer we use to send messages to bitcoind, and store responses.\n-class TestNode(P2PInterface):\n+# TestP2PConn: A peer we use to send messages to bitcoind, and store responses.\n+class TestP2PConn(P2PInterface):\n     def __init__(self):\n         super().__init__()\n         self.last_sendcmpct = []\n@@ -788,9 +788,9 @@ def announce_cmpct_block(node, peer):\n \n     def run_test(self):\n         # Setup the p2p connections and start up the network thread.\n-        self.test_node = self.nodes[0].add_p2p_connection(TestNode())\n-        self.segwit_node = self.nodes[1].add_p2p_connection(TestNode(), services=NODE_NETWORK|NODE_WITNESS)\n-        self.old_node = self.nodes[1].add_p2p_connection(TestNode(), services=NODE_NETWORK)\n+        self.test_node = self.nodes[0].add_p2p_connection(TestP2PConn())\n+        self.segwit_node = self.nodes[1].add_p2p_connection(TestP2PConn(), services=NODE_NETWORK|NODE_WITNESS)\n+        self.old_node = self.nodes[1].add_p2p_connection(TestP2PConn(), services=NODE_NETWORK)\n \n         network_thread_start()\n "
      },
      {
        "sha": "7c954cdca2d7e69f0615d72b95df310b3174bcb4",
        "filename": "test/functional/p2p_feefilter.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7dcaa1a9798c4ffff824739d6395df0623579a40/test/functional/p2p_feefilter.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7dcaa1a9798c4ffff824739d6395df0623579a40/test/functional/p2p_feefilter.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_feefilter.py?ref=7dcaa1a9798c4ffff824739d6395df0623579a40",
        "patch": "@@ -22,7 +22,7 @@ def allInvsMatch(invsExpected, testnode):\n         time.sleep(1)\n     return False\n \n-class TestNode(P2PInterface):\n+class TestP2PConn(P2PInterface):\n     def __init__(self):\n         super().__init__()\n         self.txinvs = []\n@@ -48,7 +48,7 @@ def run_test(self):\n         sync_blocks(self.nodes)\n \n         # Setup the p2p connections and start up the network thread.\n-        self.nodes[0].add_p2p_connection(TestNode())\n+        self.nodes[0].add_p2p_connection(TestP2PConn())\n         network_thread_start()\n         self.nodes[0].p2p.wait_for_verack()\n "
      },
      {
        "sha": "40f86d13876a79eeb4f94aa2955a68c8900405a0",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7dcaa1a9798c4ffff824739d6395df0623579a40/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7dcaa1a9798c4ffff824739d6395df0623579a40/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=7dcaa1a9798c4ffff824739d6395df0623579a40",
        "patch": "@@ -59,7 +59,7 @@ def test_witness_block(rpc, p2p, block, accepted, with_witness=True):\n     p2p.sync_with_ping()\n     assert_equal(rpc.getbestblockhash() == block.hash, accepted)\n \n-class TestNode(P2PInterface):\n+class TestP2PConn(P2PInterface):\n     def __init__(self):\n         super().__init__()\n         self.getdataset = set()\n@@ -1878,11 +1878,11 @@ def test_non_standard_witness(self):\n     def run_test(self):\n         # Setup the p2p connections and start up the network thread.\n         # self.test_node sets NODE_WITNESS|NODE_NETWORK\n-        self.test_node = self.nodes[0].add_p2p_connection(TestNode(), services=NODE_NETWORK|NODE_WITNESS)\n+        self.test_node = self.nodes[0].add_p2p_connection(TestP2PConn(), services=NODE_NETWORK|NODE_WITNESS)\n         # self.old_node sets only NODE_NETWORK\n-        self.old_node = self.nodes[0].add_p2p_connection(TestNode(), services=NODE_NETWORK)\n+        self.old_node = self.nodes[0].add_p2p_connection(TestP2PConn(), services=NODE_NETWORK)\n         # self.std_node is for testing node1 (fRequireStandard=true)\n-        self.std_node = self.nodes[1].add_p2p_connection(TestNode(), services=NODE_NETWORK|NODE_WITNESS)\n+        self.std_node = self.nodes[1].add_p2p_connection(TestP2PConn(), services=NODE_NETWORK|NODE_WITNESS)\n \n         network_thread_start()\n "
      },
      {
        "sha": "6a21b693b4e40c9a2bfd3c3174f71112ce328b90",
        "filename": "test/functional/p2p_timeouts.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7dcaa1a9798c4ffff824739d6395df0623579a40/test/functional/p2p_timeouts.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7dcaa1a9798c4ffff824739d6395df0623579a40/test/functional/p2p_timeouts.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_timeouts.py?ref=7dcaa1a9798c4ffff824739d6395df0623579a40",
        "patch": "@@ -27,7 +27,7 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n \n-class TestNode(P2PInterface):\n+class TestP2PConn(P2PInterface):\n     def on_version(self, message):\n         # Don't send a verack in response\n         pass\n@@ -39,9 +39,9 @@ def set_test_params(self):\n \n     def run_test(self):\n         # Setup the p2p connections and start up the network thread.\n-        no_verack_node = self.nodes[0].add_p2p_connection(TestNode())\n-        no_version_node = self.nodes[0].add_p2p_connection(TestNode(), send_version=False)\n-        no_send_node = self.nodes[0].add_p2p_connection(TestNode(), send_version=False)\n+        no_verack_node = self.nodes[0].add_p2p_connection(TestP2PConn())\n+        no_version_node = self.nodes[0].add_p2p_connection(TestP2PConn(), send_version=False)\n+        no_send_node = self.nodes[0].add_p2p_connection(TestP2PConn(), send_version=False)\n \n         network_thread_start()\n "
      },
      {
        "sha": "e0ca78e5d166685e88dc9193e4beec90129b6703",
        "filename": "test/functional/test_framework/comptool.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7dcaa1a9798c4ffff824739d6395df0623579a40/test/functional/test_framework/comptool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7dcaa1a9798c4ffff824739d6395df0623579a40/test/functional/test_framework/comptool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/comptool.py?ref=7dcaa1a9798c4ffff824739d6395df0623579a40",
        "patch": "@@ -8,7 +8,7 @@\n as the test generator to TestManager.  get_tests() should be a python\n generator that returns TestInstance objects.  See below for definition.\n \n-TestNode behaves as follows:\n+TestP2PConn behaves as follows:\n     Configure with a BlockStore and TxStore\n     on_inv: log the message but don't request\n     on_headers: log the chain tip\n@@ -39,7 +39,7 @@ def match(self, other):\n     def __repr__(self):\n         return '%i:%s' % (self.code,self.reason or '*')\n \n-class TestNode(P2PInterface):\n+class TestP2PConn(P2PInterface):\n \n     def __init__(self, block_store, tx_store):\n         super().__init__()\n@@ -170,7 +170,7 @@ def __init__(self, testgen, datadir):\n     def add_all_connections(self, nodes):\n         for i in range(len(nodes)):\n             # Create a p2p connection to each node\n-            node = TestNode(self.block_store, self.tx_store)\n+            node = TestP2PConn(self.block_store, self.tx_store)\n             node.peer_connect('127.0.0.1', p2p_port(i))\n             self.p2p_connections.append(node)\n "
      }
    ]
  },
  {
    "sha": "55e4c2b9f294e2ca41f4af4a3d114ea7457a7412",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NWU0YzJiOWYyOTRlMmNhNDFmNGFmNGEzZDExNGVhNzQ1N2E3NDEy",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-02-07T14:36:13Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-02-07T14:36:13Z"
      },
      "message": "[Tests] Move assert_start_raises_init_error method to TestNode",
      "tree": {
        "sha": "c7aa92e9beaae364e43c31ff4da77b1e55b8beac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c7aa92e9beaae364e43c31ff4da77b1e55b8beac"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/55e4c2b9f294e2ca41f4af4a3d114ea7457a7412",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55e4c2b9f294e2ca41f4af4a3d114ea7457a7412",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/55e4c2b9f294e2ca41f4af4a3d114ea7457a7412",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55e4c2b9f294e2ca41f4af4a3d114ea7457a7412/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7dcaa1a9798c4ffff824739d6395df0623579a40",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7dcaa1a9798c4ffff824739d6395df0623579a40",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7dcaa1a9798c4ffff824739d6395df0623579a40"
      }
    ],
    "stats": {
      "total": 83,
      "additions": 45,
      "deletions": 38
    },
    "files": [
      {
        "sha": "e978fd88b3291798ac96af842053ffdd51a26172",
        "filename": "test/functional/feature_config_args.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55e4c2b9f294e2ca41f4af4a3d114ea7457a7412/test/functional/feature_config_args.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55e4c2b9f294e2ca41f4af4a3d114ea7457a7412/test/functional/feature_config_args.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_config_args.py?ref=55e4c2b9f294e2ca41f4af4a3d114ea7457a7412",
        "patch": "@@ -25,13 +25,13 @@ def run_test(self):\n \n         # Check that using -datadir argument on non-existent directory fails\n         self.nodes[0].datadir = new_data_dir\n-        self.assert_start_raises_init_error(0, ['-datadir='+new_data_dir], 'Error: Specified data directory \"' + new_data_dir + '\" does not exist.')\n+        self.nodes[0].assert_start_raises_init_error(['-datadir='+new_data_dir], 'Error: Specified data directory \"' + new_data_dir + '\" does not exist.')\n \n         # Check that using non-existent datadir in conf file fails\n         conf_file = os.path.join(default_data_dir, \"bitcoin.conf\")\n         with open(conf_file, 'a', encoding='utf8') as f:\n             f.write(\"datadir=\" + new_data_dir + \"\\n\")\n-        self.assert_start_raises_init_error(0, ['-conf='+conf_file], 'Error reading configuration file: specified data directory \"' + new_data_dir + '\" does not exist.')\n+        self.nodes[0].assert_start_raises_init_error(['-conf='+conf_file], 'Error reading configuration file: specified data directory \"' + new_data_dir + '\" does not exist.')\n \n         # Create the directory and ensure the config file now works\n         os.mkdir(new_data_dir)"
      },
      {
        "sha": "65a03e50ad060fe3f583a33fcf1c6b1cce9eff5f",
        "filename": "test/functional/feature_logging.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55e4c2b9f294e2ca41f4af4a3d114ea7457a7412/test/functional/feature_logging.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55e4c2b9f294e2ca41f4af4a3d114ea7457a7412/test/functional/feature_logging.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_logging.py?ref=55e4c2b9f294e2ca41f4af4a3d114ea7457a7412",
        "patch": "@@ -30,7 +30,7 @@ def run_test(self):\n         invdir = os.path.join(self.nodes[0].datadir, \"regtest\", \"foo\")\n         invalidname = os.path.join(\"foo\", \"foo.log\")\n         self.stop_node(0)\n-        self.assert_start_raises_init_error(0, [\"-debuglogfile=%s\" % (invalidname)],\n+        self.nodes[0].assert_start_raises_init_error([\"-debuglogfile=%s\" % (invalidname)],\n                                                 \"Error: Could not open debug log file\")\n         assert not os.path.isfile(os.path.join(invdir, \"foo.log\"))\n \n@@ -44,7 +44,7 @@ def run_test(self):\n         self.stop_node(0)\n         invdir = os.path.join(self.options.tmpdir, \"foo\")\n         invalidname = os.path.join(invdir, \"foo.log\")\n-        self.assert_start_raises_init_error(0, [\"-debuglogfile=%s\" % invalidname],\n+        self.nodes[0].assert_start_raises_init_error([\"-debuglogfile=%s\" % invalidname],\n                                                \"Error: Could not open debug log file\")\n         assert not os.path.isfile(os.path.join(invdir, \"foo.log\"))\n "
      },
      {
        "sha": "5725b85b2c789bdb31d1400c9a16329f612d3b19",
        "filename": "test/functional/feature_uacomment.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55e4c2b9f294e2ca41f4af4a3d114ea7457a7412/test/functional/feature_uacomment.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55e4c2b9f294e2ca41f4af4a3d114ea7457a7412/test/functional/feature_uacomment.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_uacomment.py?ref=55e4c2b9f294e2ca41f4af4a3d114ea7457a7412",
        "patch": "@@ -24,12 +24,12 @@ def run_test(self):\n         self.log.info(\"test -uacomment max length\")\n         self.stop_node(0)\n         expected = \"exceeds maximum length (256). Reduce the number or size of uacomments.\"\n-        self.assert_start_raises_init_error(0, [\"-uacomment=\" + 'a' * 256], expected)\n+        self.nodes[0].assert_start_raises_init_error([\"-uacomment=\" + 'a' * 256], expected)\n \n         self.log.info(\"test -uacomment unsafe characters\")\n         for unsafe_char in ['/', ':', '(', ')']:\n             expected = \"User Agent comment (\" + unsafe_char + \") contains unsafe characters\"\n-            self.assert_start_raises_init_error(0, [\"-uacomment=\" + unsafe_char], expected)\n+            self.nodes[0].assert_start_raises_init_error([\"-uacomment=\" + unsafe_char], expected)\n \n if __name__ == '__main__':\n     UacommentTest().main()"
      },
      {
        "sha": "42e106208d8cba4ac99aa626d66e83fdd15e9b75",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 0,
        "deletions": 21,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55e4c2b9f294e2ca41f4af4a3d114ea7457a7412/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55e4c2b9f294e2ca41f4af4a3d114ea7457a7412/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=55e4c2b9f294e2ca41f4af4a3d114ea7457a7412",
        "patch": "@@ -271,27 +271,6 @@ def restart_node(self, i, extra_args=None):\n         self.stop_node(i)\n         self.start_node(i, extra_args)\n \n-    def assert_start_raises_init_error(self, i, extra_args=None, expected_msg=None, *args, **kwargs):\n-        with tempfile.SpooledTemporaryFile(max_size=2**16) as log_stderr:\n-            try:\n-                self.start_node(i, extra_args, stderr=log_stderr, *args, **kwargs)\n-                self.stop_node(i)\n-            except Exception as e:\n-                assert 'bitcoind exited' in str(e)  # node must have shutdown\n-                self.nodes[i].running = False\n-                self.nodes[i].process = None\n-                if expected_msg is not None:\n-                    log_stderr.seek(0)\n-                    stderr = log_stderr.read().decode('utf-8')\n-                    if expected_msg not in stderr:\n-                        raise AssertionError(\"Expected error \\\"\" + expected_msg + \"\\\" not found in:\\n\" + stderr)\n-            else:\n-                if expected_msg is None:\n-                    assert_msg = \"bitcoind should have exited with an error\"\n-                else:\n-                    assert_msg = \"bitcoind should have exited with expected error \" + expected_msg\n-                raise AssertionError(assert_msg)\n-\n     def wait_for_node_exit(self, i, timeout):\n         self.nodes[i].process.wait(timeout)\n "
      },
      {
        "sha": "f6b00518f04ebc0ae408668aef79c0e7f4acc083",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 28,
        "deletions": 0,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55e4c2b9f294e2ca41f4af4a3d114ea7457a7412/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55e4c2b9f294e2ca41f4af4a3d114ea7457a7412/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=55e4c2b9f294e2ca41f4af4a3d114ea7457a7412",
        "patch": "@@ -12,6 +12,7 @@\n import os\n import re\n import subprocess\n+import tempfile\n import time\n \n from .authproxy import JSONRPCException\n@@ -160,6 +161,33 @@ def is_node_stopped(self):\n     def wait_until_stopped(self, timeout=BITCOIND_PROC_WAIT_TIMEOUT):\n         wait_until(self.is_node_stopped, timeout=timeout)\n \n+    def assert_start_raises_init_error(self, extra_args=None, expected_msg=None, *args, **kwargs):\n+        \"\"\"Attempt to start the node and expect it to raise an error.\n+\n+        Will throw if bitcoind starts without an error.\n+        Will throw if an expected_msg is provided and it does not appear in bitcoind's stdout.\"\"\"\n+        with tempfile.SpooledTemporaryFile(max_size=2**16) as log_stderr:\n+            try:\n+                self.start(extra_args, stderr=log_stderr, *args, **kwargs)\n+                self.wait_for_rpc_connection()\n+                self.stop_node()\n+                self.wait_util_stopped()\n+            except Exception as e:\n+                assert 'bitcoind exited' in str(e)  # node must have shutdown\n+                self.running = False\n+                self.process = None\n+                if expected_msg is not None:\n+                    log_stderr.seek(0)\n+                    stderr = log_stderr.read().decode('utf-8')\n+                    if expected_msg not in stderr:\n+                        raise AssertionError(\"Expected error \\\"\" + expected_msg + \"\\\" not found in:\\n\" + stderr)\n+            else:\n+                if expected_msg is None:\n+                    assert_msg = \"bitcoind should have exited with an error\"\n+                else:\n+                    assert_msg = \"bitcoind should have exited with expected error \" + expected_msg\n+                raise AssertionError(assert_msg)\n+\n     def node_encrypt_wallet(self, passphrase):\n         \"\"\"\"Encrypts the wallet.\n "
      },
      {
        "sha": "3545ca1901af317de4f3bdf7b804665102f25dab",
        "filename": "test/functional/wallet_hd.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55e4c2b9f294e2ca41f4af4a3d114ea7457a7412/test/functional/wallet_hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55e4c2b9f294e2ca41f4af4a3d114ea7457a7412/test/functional/wallet_hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_hd.py?ref=55e4c2b9f294e2ca41f4af4a3d114ea7457a7412",
        "patch": "@@ -23,7 +23,7 @@ def run_test (self):\n \n         # Make sure can't switch off usehd after wallet creation\n         self.stop_node(1)\n-        self.assert_start_raises_init_error(1, ['-usehd=0'], 'already existing HD wallet')\n+        self.nodes[1].assert_start_raises_init_error(['-usehd=0'], 'already existing HD wallet')\n         self.start_node(1)\n         connect_nodes_bi(self.nodes, 0, 1)\n "
      },
      {
        "sha": "befa54c855d65ddf250dcc16ccea47ca92cd419c",
        "filename": "test/functional/wallet_multiwallet.py",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55e4c2b9f294e2ca41f4af4a3d114ea7457a7412/test/functional/wallet_multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55e4c2b9f294e2ca41f4af4a3d114ea7457a7412/test/functional/wallet_multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_multiwallet.py?ref=55e4c2b9f294e2ca41f4af4a3d114ea7457a7412",
        "patch": "@@ -30,31 +30,31 @@ def run_test(self):\n \n         self.stop_nodes()\n \n-        self.assert_start_raises_init_error(0, ['-walletdir=wallets'], 'Error: Specified -walletdir \"wallets\" does not exist')\n-        self.assert_start_raises_init_error(0, ['-walletdir=wallets'], 'Error: Specified -walletdir \"wallets\" is a relative path', cwd=data_dir())\n-        self.assert_start_raises_init_error(0, ['-walletdir=debug.log'], 'Error: Specified -walletdir \"debug.log\" is not a directory', cwd=data_dir())\n+        self.nodes[0].assert_start_raises_init_error(['-walletdir=wallets'], 'Error: Specified -walletdir \"wallets\" does not exist')\n+        self.nodes[0].assert_start_raises_init_error(['-walletdir=wallets'], 'Error: Specified -walletdir \"wallets\" is a relative path', cwd=data_dir())\n+        self.nodes[0].assert_start_raises_init_error(['-walletdir=debug.log'], 'Error: Specified -walletdir \"debug.log\" is not a directory', cwd=data_dir())\n \n         # should not initialize if there are duplicate wallets\n-        self.assert_start_raises_init_error(0, ['-wallet=w1', '-wallet=w1'], 'Error loading wallet w1. Duplicate -wallet filename specified.')\n+        self.nodes[0].assert_start_raises_init_error(['-wallet=w1', '-wallet=w1'], 'Error loading wallet w1. Duplicate -wallet filename specified.')\n \n         # should not initialize if wallet file is a directory\n         os.mkdir(wallet_dir('w11'))\n-        self.assert_start_raises_init_error(0, ['-wallet=w11'], 'Error loading wallet w11. -wallet filename must be a regular file.')\n+        self.nodes[0].assert_start_raises_init_error(['-wallet=w11'], 'Error loading wallet w11. -wallet filename must be a regular file.')\n \n         # should not initialize if one wallet is a copy of another\n         shutil.copyfile(wallet_dir('w2'), wallet_dir('w22'))\n-        self.assert_start_raises_init_error(0, ['-wallet=w2', '-wallet=w22'], 'duplicates fileid')\n+        self.nodes[0].assert_start_raises_init_error(['-wallet=w2', '-wallet=w22'], 'duplicates fileid')\n \n         # should not initialize if wallet file is a symlink\n         os.symlink(wallet_dir('w1'), wallet_dir('w12'))\n-        self.assert_start_raises_init_error(0, ['-wallet=w12'], 'Error loading wallet w12. -wallet filename must be a regular file.')\n+        self.nodes[0].assert_start_raises_init_error(['-wallet=w12'], 'Error loading wallet w12. -wallet filename must be a regular file.')\n \n         # should not initialize if the specified walletdir does not exist\n-        self.assert_start_raises_init_error(0, ['-walletdir=bad'], 'Error: Specified -walletdir \"bad\" does not exist')\n+        self.nodes[0].assert_start_raises_init_error(['-walletdir=bad'], 'Error: Specified -walletdir \"bad\" does not exist')\n         # should not initialize if the specified walletdir is not a directory\n         not_a_dir = wallet_dir('notadir')\n         open(not_a_dir, 'a').close()\n-        self.assert_start_raises_init_error(0, ['-walletdir=' + not_a_dir], 'Error: Specified -walletdir \"' + not_a_dir + '\" is not a directory')\n+        self.nodes[0].assert_start_raises_init_error(['-walletdir=' + not_a_dir], 'Error: Specified -walletdir \"' + not_a_dir + '\" is not a directory')\n \n         # if wallets/ doesn't exist, datadir should be the default wallet dir\n         wallet_dir2 = data_dir('walletdir')\n@@ -75,7 +75,7 @@ def run_test(self):\n         competing_wallet_dir = os.path.join(self.options.tmpdir, 'competing_walletdir')\n         os.mkdir(competing_wallet_dir)\n         self.restart_node(0, ['-walletdir='+competing_wallet_dir])\n-        self.assert_start_raises_init_error(1, ['-walletdir='+competing_wallet_dir], 'Error initializing wallet database environment')\n+        self.nodes[1].assert_start_raises_init_error(['-walletdir='+competing_wallet_dir], 'Error initializing wallet database environment')\n \n         self.restart_node(0, self.extra_args[0])\n "
      }
    ]
  },
  {
    "sha": "9ce0dc42cbe36386aac29eebdc8de52339ecb65f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5Y2UwZGM0MmNiZTM2Mzg2YWFjMjllZWJkYzhkZTUyMzM5ZWNiNjVm",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-02-07T14:57:27Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-02-07T14:57:27Z"
      },
      "message": "[Tests] Write stdout/stderr to datadir instead of temp file.",
      "tree": {
        "sha": "92e2b59a7ebac63086a7daf8c521f129854f30e0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/92e2b59a7ebac63086a7daf8c521f129854f30e0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9ce0dc42cbe36386aac29eebdc8de52339ecb65f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ce0dc42cbe36386aac29eebdc8de52339ecb65f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9ce0dc42cbe36386aac29eebdc8de52339ecb65f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ce0dc42cbe36386aac29eebdc8de52339ecb65f/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "55e4c2b9f294e2ca41f4af4a3d114ea7457a7412",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55e4c2b9f294e2ca41f4af4a3d114ea7457a7412",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/55e4c2b9f294e2ca41f4af4a3d114ea7457a7412"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 21,
      "deletions": 10
    },
    "files": [
      {
        "sha": "97072944ee6b19ed361068c36434de4d6b3d80bb",
        "filename": "test/functional/feature_config_args.py",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ce0dc42cbe36386aac29eebdc8de52339ecb65f/test/functional/feature_config_args.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ce0dc42cbe36386aac29eebdc8de52339ecb65f/test/functional/feature_config_args.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_config_args.py?ref=9ce0dc42cbe36386aac29eebdc8de52339ecb65f",
        "patch": "@@ -24,7 +24,6 @@ def run_test(self):\n         new_data_dir_2 = os.path.join(default_data_dir, 'newdatadir2')\n \n         # Check that using -datadir argument on non-existent directory fails\n-        self.nodes[0].datadir = new_data_dir\n         self.nodes[0].assert_start_raises_init_error(['-datadir='+new_data_dir], 'Error: Specified data directory \"' + new_data_dir + '\" does not exist.')\n \n         # Check that using non-existent datadir in conf file fails\n@@ -35,12 +34,17 @@ def run_test(self):\n \n         # Create the directory and ensure the config file now works\n         os.mkdir(new_data_dir)\n+        os.mkdir(os.path.join(new_data_dir, 'stdout'))\n+        os.mkdir(os.path.join(new_data_dir, 'stderr'))\n+        self.nodes[0].datadir = new_data_dir\n         self.start_node(0, ['-conf='+conf_file, '-wallet=w1'])\n         self.stop_node(0)\n         assert os.path.isfile(os.path.join(new_data_dir, 'regtest', 'wallets', 'w1'))\n \n         # Ensure command line argument overrides datadir in conf\n         os.mkdir(new_data_dir_2)\n+        os.mkdir(os.path.join(new_data_dir_2, 'stdout'))\n+        os.mkdir(os.path.join(new_data_dir_2, 'stderr'))\n         self.nodes[0].datadir = new_data_dir_2\n         self.start_node(0, ['-datadir='+new_data_dir_2, '-conf='+conf_file, '-wallet=w2'])\n         assert os.path.isfile(os.path.join(new_data_dir_2, 'regtest', 'wallets', 'w2'))"
      },
      {
        "sha": "caaf23af51fe35aaa798a8eb3e4ad1a294a0325d",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ce0dc42cbe36386aac29eebdc8de52339ecb65f/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ce0dc42cbe36386aac29eebdc8de52339ecb65f/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=9ce0dc42cbe36386aac29eebdc8de52339ecb65f",
        "patch": "@@ -218,7 +218,7 @@ def add_nodes(self, num_nodes, extra_args=None, rpchost=None, timewait=None, bin\n         assert_equal(len(extra_args), num_nodes)\n         assert_equal(len(binary), num_nodes)\n         for i in range(num_nodes):\n-            self.nodes.append(TestNode(i, self.options.tmpdir, extra_args[i], rpchost, timewait=timewait, binary=binary[i], stderr=None, mocktime=self.mocktime, coverage_dir=self.options.coveragedir, use_cli=self.options.usecli))\n+            self.nodes.append(TestNode(i, self.options.tmpdir, extra_args[i], rpchost, timewait=timewait, binary=binary[i], mocktime=self.mocktime, coverage_dir=self.options.coveragedir, use_cli=self.options.usecli))\n \n     def start_node(self, i, *args, **kwargs):\n         \"\"\"Start a bitcoind\"\"\"\n@@ -369,7 +369,7 @@ def _initialize_chain(self):\n                 args = [os.getenv(\"BITCOIND\", \"bitcoind\"), \"-server\", \"-keypool=1\", \"-datadir=\" + datadir, \"-discover=0\"]\n                 if i > 0:\n                     args.append(\"-connect=127.0.0.1:\" + str(p2p_port(0)))\n-                self.nodes.append(TestNode(i, self.options.cachedir, extra_args=[], rpchost=None, timewait=None, binary=None, stderr=None, mocktime=self.mocktime, coverage_dir=None))\n+                self.nodes.append(TestNode(i, self.options.cachedir, extra_args=[], rpchost=None, timewait=None, binary=None, mocktime=self.mocktime, coverage_dir=None))\n                 self.nodes[i].args = args\n                 self.start_node(i)\n "
      },
      {
        "sha": "a0ad2e9e0bb95234df9382d5efbad18b14f25ec0",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 12,
        "deletions": 7,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ce0dc42cbe36386aac29eebdc8de52339ecb65f/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ce0dc42cbe36386aac29eebdc8de52339ecb65f/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=9ce0dc42cbe36386aac29eebdc8de52339ecb65f",
        "patch": "@@ -43,7 +43,7 @@ class TestNode():\n     To make things easier for the test writer, any unrecognised messages will\n     be dispatched to the RPC connection.\"\"\"\n \n-    def __init__(self, i, dirname, extra_args, rpchost, timewait, binary, stderr, mocktime, coverage_dir, use_cli=False):\n+    def __init__(self, i, dirname, extra_args, rpchost, timewait, binary, mocktime, coverage_dir, use_cli=False):\n         self.index = i\n         self.datadir = os.path.join(dirname, \"node\" + str(i))\n         self.rpchost = rpchost\n@@ -56,7 +56,6 @@ def __init__(self, i, dirname, extra_args, rpchost, timewait, binary, stderr, mo\n             self.binary = os.getenv(\"BITCOIND\", \"bitcoind\")\n         else:\n             self.binary = binary\n-        self.stderr = stderr\n         self.coverage_dir = coverage_dir\n         # Most callers will just need to add extra args to the standard list below. For those callers that need more flexibity, they can just set the args property directly.\n         self.extra_args = extra_args\n@@ -82,13 +81,18 @@ def __getattr__(self, name):\n             assert self.rpc_connected and self.rpc is not None, \"Error: no RPC connection\"\n             return getattr(self.rpc, name)\n \n-    def start(self, extra_args=None, stderr=None, *args, **kwargs):\n+    def start(self, extra_args=None, stdout=None, stderr=None, *args, **kwargs):\n         \"\"\"Start the node.\"\"\"\n         if extra_args is None:\n             extra_args = self.extra_args\n+\n+        # Add a new stdout and stderr file for each time bitcoind is started\n         if stderr is None:\n-            stderr = self.stderr\n-        self.process = subprocess.Popen(self.args + extra_args, stderr=stderr, *args, **kwargs)\n+            stderr = tempfile.NamedTemporaryFile(dir=os.path.join(self.datadir, 'stderr'), delete=False)\n+        if stdout is None:\n+            stdout = tempfile.NamedTemporaryFile(dir=os.path.join(self.datadir, 'stdout'), delete=False)\n+\n+        self.process = subprocess.Popen(self.args + extra_args, stdout=stdout, stderr=stderr, *args, **kwargs)\n         self.running = True\n         self.log.debug(\"bitcoind started, waiting for RPC to come up\")\n \n@@ -166,9 +170,10 @@ def assert_start_raises_init_error(self, extra_args=None, expected_msg=None, *ar\n \n         Will throw if bitcoind starts without an error.\n         Will throw if an expected_msg is provided and it does not appear in bitcoind's stdout.\"\"\"\n-        with tempfile.SpooledTemporaryFile(max_size=2**16) as log_stderr:\n+        with tempfile.NamedTemporaryFile(dir=os.path.join(self.datadir, 'stderr'), delete=False) as log_stderr, \\\n+             tempfile.NamedTemporaryFile(dir=os.path.join(self.datadir, 'stdout'), delete=False) as log_stdout:\n             try:\n-                self.start(extra_args, stderr=log_stderr, *args, **kwargs)\n+                self.start(extra_args, stderr=log_stderr, stdout=log_stdout, *args, **kwargs)\n                 self.wait_for_rpc_connection()\n                 self.stop_node()\n                 self.wait_util_stopped()"
      },
      {
        "sha": "c8f9967114fc73587e9b66334d1ad188f9f3d115",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ce0dc42cbe36386aac29eebdc8de52339ecb65f/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ce0dc42cbe36386aac29eebdc8de52339ecb65f/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=9ce0dc42cbe36386aac29eebdc8de52339ecb65f",
        "patch": "@@ -292,6 +292,8 @@ def initialize_datadir(dirname, n):\n         f.write(\"port=\" + str(p2p_port(n)) + \"\\n\")\n         f.write(\"rpcport=\" + str(rpc_port(n)) + \"\\n\")\n         f.write(\"listenonion=0\\n\")\n+        os.makedirs(os.path.join(datadir, 'stderr'), exist_ok=True)\n+        os.makedirs(os.path.join(datadir, 'stdout'), exist_ok=True)\n     return datadir\n \n def get_datadir_path(dirname, n):"
      }
    ]
  },
  {
    "sha": "34e115a93861123a4996aea3cedb0f3a64e36eb7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNGUxMTVhOTM4NjExMjNhNDk5NmFlYTNjZWRiMGYzYTY0ZTM2ZWI3",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-02-07T15:00:13Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-02-07T15:00:15Z"
      },
      "message": "[Tests] Use LIBC_FATAL_STDERR_=1 in tests\n\nBy default, libc will print fatal errors to /dev/tty instead of stderr.\nAdding the LIBC_FATAL_STDERR_ to the environment variables allows\nus to catch libc errors in stderr and test for them.",
      "tree": {
        "sha": "1465861cecf9f02a263491fc15814a5e2bf8daa7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1465861cecf9f02a263491fc15814a5e2bf8daa7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/34e115a93861123a4996aea3cedb0f3a64e36eb7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34e115a93861123a4996aea3cedb0f3a64e36eb7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/34e115a93861123a4996aea3cedb0f3a64e36eb7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34e115a93861123a4996aea3cedb0f3a64e36eb7/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9ce0dc42cbe36386aac29eebdc8de52339ecb65f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ce0dc42cbe36386aac29eebdc8de52339ecb65f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9ce0dc42cbe36386aac29eebdc8de52339ecb65f"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 5,
      "deletions": 1
    },
    "files": [
      {
        "sha": "ce421634a0bb1925febd16ea8ea297e8ca0da7fb",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34e115a93861123a4996aea3cedb0f3a64e36eb7/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34e115a93861123a4996aea3cedb0f3a64e36eb7/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=34e115a93861123a4996aea3cedb0f3a64e36eb7",
        "patch": "@@ -92,7 +92,11 @@ def start(self, extra_args=None, stdout=None, stderr=None, *args, **kwargs):\n         if stdout is None:\n             stdout = tempfile.NamedTemporaryFile(dir=os.path.join(self.datadir, 'stdout'), delete=False)\n \n-        self.process = subprocess.Popen(self.args + extra_args, stdout=stdout, stderr=stderr, *args, **kwargs)\n+        # add environment variable LIBC_FATAL_STDERR_=1 so that libc errors are written to stderr and not the terminal\n+        subp_env = dict(os.environ, LIBC_FATAL_STDERR_=\"1\")\n+\n+        self.process = subprocess.Popen(self.args + extra_args, env=subp_env, stdout=stdout, stderr=stderr, *args, **kwargs)\n+\n         self.running = True\n         self.log.debug(\"bitcoind started, waiting for RPC to come up\")\n "
      }
    ]
  },
  {
    "sha": "b5b917fe02455b594cf5aba92bceaae6db943912",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNWI5MTdmZTAyNDU1YjU5NGNmNWFiYTkyYmNlYWFlNmRiOTQzOTEy",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-02-07T15:38:25Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-02-07T15:38:25Z"
      },
      "message": "[Tests] Update assert_start_raises_init_eror() to test for an exact match in stdout",
      "tree": {
        "sha": "133937bd4299b844c84defa1785c6c1868264cee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/133937bd4299b844c84defa1785c6c1868264cee"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b5b917fe02455b594cf5aba92bceaae6db943912",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5b917fe02455b594cf5aba92bceaae6db943912",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b5b917fe02455b594cf5aba92bceaae6db943912",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5b917fe02455b594cf5aba92bceaae6db943912/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "34e115a93861123a4996aea3cedb0f3a64e36eb7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34e115a93861123a4996aea3cedb0f3a64e36eb7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/34e115a93861123a4996aea3cedb0f3a64e36eb7"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 28,
      "deletions": 18
    },
    "files": [
      {
        "sha": "d5215fd9197178f21ee0a4c94c666340b0ebb8c4",
        "filename": "test/functional/feature_logging.py",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5b917fe02455b594cf5aba92bceaae6db943912/test/functional/feature_logging.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5b917fe02455b594cf5aba92bceaae6db943912/test/functional/feature_logging.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_logging.py?ref=b5b917fe02455b594cf5aba92bceaae6db943912",
        "patch": "@@ -30,8 +30,8 @@ def run_test(self):\n         invdir = os.path.join(self.nodes[0].datadir, \"regtest\", \"foo\")\n         invalidname = os.path.join(\"foo\", \"foo.log\")\n         self.stop_node(0)\n-        self.nodes[0].assert_start_raises_init_error([\"-debuglogfile=%s\" % (invalidname)],\n-                                                \"Error: Could not open debug log file\")\n+        exp_stderr = \"Error: Could not open debug log file \\S+?$\"\n+        self.nodes[0].assert_start_raises_init_error([\"-debuglogfile=%s\" % (invalidname)], exp_stderr)\n         assert not os.path.isfile(os.path.join(invdir, \"foo.log\"))\n \n         # check that invalid log (relative) works after path exists\n@@ -44,8 +44,7 @@ def run_test(self):\n         self.stop_node(0)\n         invdir = os.path.join(self.options.tmpdir, \"foo\")\n         invalidname = os.path.join(invdir, \"foo.log\")\n-        self.nodes[0].assert_start_raises_init_error([\"-debuglogfile=%s\" % invalidname],\n-                                               \"Error: Could not open debug log file\")\n+        self.nodes[0].assert_start_raises_init_error([\"-debuglogfile=%s\" % invalidname], exp_stderr)\n         assert not os.path.isfile(os.path.join(invdir, \"foo.log\"))\n \n         # check that invalid log (absolute) works after path exists"
      },
      {
        "sha": "7ec903772acc6b5539e28db7277d50af800dfacb",
        "filename": "test/functional/feature_uacomment.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5b917fe02455b594cf5aba92bceaae6db943912/test/functional/feature_uacomment.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5b917fe02455b594cf5aba92bceaae6db943912/test/functional/feature_uacomment.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_uacomment.py?ref=b5b917fe02455b594cf5aba92bceaae6db943912",
        "patch": "@@ -23,13 +23,13 @@ def run_test(self):\n \n         self.log.info(\"test -uacomment max length\")\n         self.stop_node(0)\n-        expected = \"exceeds maximum length (256). Reduce the number or size of uacomments.\"\n+        expected = \"Error: Total length of network version string \\([0-9]+\\) exceeds maximum length \\(256\\). Reduce the number or size of uacomments.\"\n         self.nodes[0].assert_start_raises_init_error([\"-uacomment=\" + 'a' * 256], expected)\n \n         self.log.info(\"test -uacomment unsafe characters\")\n-        for unsafe_char in ['/', ':', '(', ')']:\n-            expected = \"User Agent comment (\" + unsafe_char + \") contains unsafe characters\"\n-            self.nodes[0].assert_start_raises_init_error([\"-uacomment=\" + unsafe_char], expected)\n+        for unsafe_char in [('/', '\\/'), (':', ':'), ('(', '\\\\('), (')', '\\\\)')]:\n+            expected = \"Error: User Agent comment \\(\" + unsafe_char[1] + \"\\) contains unsafe characters.\"\n+            self.nodes[0].assert_start_raises_init_error([\"-uacomment=\" + unsafe_char[0]], expected)\n \n if __name__ == '__main__':\n     UacommentTest().main()"
      },
      {
        "sha": "adb5878e5f758d7f3b1c2b0e6c4d1d905b77bccb",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5b917fe02455b594cf5aba92bceaae6db943912/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5b917fe02455b594cf5aba92bceaae6db943912/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=b5b917fe02455b594cf5aba92bceaae6db943912",
        "patch": "@@ -172,8 +172,11 @@ def wait_until_stopped(self, timeout=BITCOIND_PROC_WAIT_TIMEOUT):\n     def assert_start_raises_init_error(self, extra_args=None, expected_msg=None, *args, **kwargs):\n         \"\"\"Attempt to start the node and expect it to raise an error.\n \n+        extra_args: extra arguments to pass through to bitcoind\n+        expected_msg: regex that stderr should match when bitcoind fails\n+\n         Will throw if bitcoind starts without an error.\n-        Will throw if an expected_msg is provided and it does not appear in bitcoind's stdout.\"\"\"\n+        Will throw if an expected_msg is provided and it does not match bitcoind's stdout.\"\"\"\n         with tempfile.NamedTemporaryFile(dir=os.path.join(self.datadir, 'stderr'), delete=False) as log_stderr, \\\n              tempfile.NamedTemporaryFile(dir=os.path.join(self.datadir, 'stdout'), delete=False) as log_stdout:\n             try:\n@@ -185,11 +188,12 @@ def assert_start_raises_init_error(self, extra_args=None, expected_msg=None, *ar\n                 assert 'bitcoind exited' in str(e)  # node must have shutdown\n                 self.running = False\n                 self.process = None\n+                # Check stderr for expected message\n                 if expected_msg is not None:\n                     log_stderr.seek(0)\n                     stderr = log_stderr.read().decode('utf-8')\n-                    if expected_msg not in stderr:\n-                        raise AssertionError(\"Expected error \\\"\" + expected_msg + \"\\\" not found in:\\n\" + stderr)\n+                    if re.fullmatch(expected_msg + '\\n', stderr) is None:\n+                        raise AssertionError('Expected stdout \"{}\" does not match stdout:\\n\"{}'.format(expected_msg, stderr))\n             else:\n                 if expected_msg is None:\n                     assert_msg = \"bitcoind should have exited with an error\""
      },
      {
        "sha": "a91c7705add13f1129ab6769bd46d036a1d2f415",
        "filename": "test/functional/wallet_hd.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5b917fe02455b594cf5aba92bceaae6db943912/test/functional/wallet_hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5b917fe02455b594cf5aba92bceaae6db943912/test/functional/wallet_hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_hd.py?ref=b5b917fe02455b594cf5aba92bceaae6db943912",
        "patch": "@@ -23,7 +23,7 @@ def run_test (self):\n \n         # Make sure can't switch off usehd after wallet creation\n         self.stop_node(1)\n-        self.nodes[1].assert_start_raises_init_error(['-usehd=0'], 'already existing HD wallet')\n+        self.nodes[1].assert_start_raises_init_error(['-usehd=0'], \"Error: Error loading wallet.dat: You can't disable HD on an already existing HD wallet\")\n         self.start_node(1)\n         connect_nodes_bi(self.nodes, 0, 1)\n "
      },
      {
        "sha": "1be86cad9430c6f391034934800a2ede581c178d",
        "filename": "test/functional/wallet_multiwallet.py",
        "status": "modified",
        "additions": 13,
        "deletions": 6,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5b917fe02455b594cf5aba92bceaae6db943912/test/functional/wallet_multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5b917fe02455b594cf5aba92bceaae6db943912/test/functional/wallet_multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_multiwallet.py?ref=b5b917fe02455b594cf5aba92bceaae6db943912",
        "patch": "@@ -35,19 +35,23 @@ def run_test(self):\n         self.nodes[0].assert_start_raises_init_error(['-walletdir=debug.log'], 'Error: Specified -walletdir \"debug.log\" is not a directory', cwd=data_dir())\n \n         # should not initialize if there are duplicate wallets\n-        self.nodes[0].assert_start_raises_init_error(['-wallet=w1', '-wallet=w1'], 'Error loading wallet w1. Duplicate -wallet filename specified.')\n+        self.nodes[0].assert_start_raises_init_error(['-wallet=w1', '-wallet=w1'], 'Error: Error loading wallet w1. Duplicate -wallet filename specified.')\n \n         # should not initialize if wallet file is a directory\n         os.mkdir(wallet_dir('w11'))\n-        self.nodes[0].assert_start_raises_init_error(['-wallet=w11'], 'Error loading wallet w11. -wallet filename must be a regular file.')\n+        self.nodes[0].assert_start_raises_init_error(['-wallet=w11'], 'Error: Error loading wallet w11. -wallet filename must be a regular file.')\n \n         # should not initialize if one wallet is a copy of another\n         shutil.copyfile(wallet_dir('w2'), wallet_dir('w22'))\n-        self.nodes[0].assert_start_raises_init_error(['-wallet=w2', '-wallet=w22'], 'duplicates fileid')\n+        exp_stderr = \"\\n\\n\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\n\" + \\\n+                     \"EXCEPTION: St13runtime_error       \\n\" + \\\n+                     \"CDB: Can't open database w22 \\(duplicates fileid [0-9A-Fa-f]+ from w2\\)       \\n\" + \\\n+                     \"bitcoin in AppInit\\(\\)       \\n\"\n+        self.nodes[0].assert_start_raises_init_error(['-wallet=w2', '-wallet=w22'], exp_stderr)\n \n         # should not initialize if wallet file is a symlink\n         os.symlink(wallet_dir('w1'), wallet_dir('w12'))\n-        self.nodes[0].assert_start_raises_init_error(['-wallet=w12'], 'Error loading wallet w12. -wallet filename must be a regular file.')\n+        self.nodes[0].assert_start_raises_init_error(['-wallet=w12'], 'Error: Error loading wallet w12. -wallet filename must be a regular file.')\n \n         # should not initialize if the specified walletdir does not exist\n         self.nodes[0].assert_start_raises_init_error(['-walletdir=bad'], 'Error: Specified -walletdir \"bad\" does not exist')\n@@ -74,8 +78,11 @@ def run_test(self):\n \n         competing_wallet_dir = os.path.join(self.options.tmpdir, 'competing_walletdir')\n         os.mkdir(competing_wallet_dir)\n-        self.restart_node(0, ['-walletdir='+competing_wallet_dir])\n-        self.nodes[1].assert_start_raises_init_error(['-walletdir='+competing_wallet_dir], 'Error initializing wallet database environment')\n+        self.restart_node(0, ['-walletdir=' + competing_wallet_dir])\n+        exp_stderr = \"Error: Error initializing wallet database environment \\\"\\S+?\\\"!\\n\" + \\\n+                     \"terminate called after throwing an instance of 'std::system_error'\\n\" + \\\n+                     \"  what\\(\\):  Invalid argument\"\n+        self.nodes[1].assert_start_raises_init_error(['-walletdir=' + competing_wallet_dir], exp_stderr)\n \n         self.restart_node(0, self.extra_args[0])\n "
      }
    ]
  },
  {
    "sha": "a13e6145a772d92845a4a89d9afb2d43230f9f2b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMTNlNjE0NWE3NzJkOTI4NDVhNGE4OWQ5YWZiMmQ0MzIzMGY5ZjJi",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-02-07T15:51:13Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-02-08T18:15:13Z"
      },
      "message": "[Tests] Assert that bitcoind stderr is empty on shutdown",
      "tree": {
        "sha": "d00445b815bf6acaa3f39b306890ce370ace7ae2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d00445b815bf6acaa3f39b306890ce370ace7ae2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a13e6145a772d92845a4a89d9afb2d43230f9f2b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a13e6145a772d92845a4a89d9afb2d43230f9f2b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a13e6145a772d92845a4a89d9afb2d43230f9f2b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a13e6145a772d92845a4a89d9afb2d43230f9f2b/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b5b917fe02455b594cf5aba92bceaae6db943912",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5b917fe02455b594cf5aba92bceaae6db943912",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b5b917fe02455b594cf5aba92bceaae6db943912"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 8,
      "deletions": 4
    },
    "files": [
      {
        "sha": "534e651715ad05d3a7333bff72c6694db7eba0a6",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a13e6145a772d92845a4a89d9afb2d43230f9f2b/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a13e6145a772d92845a4a89d9afb2d43230f9f2b/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=a13e6145a772d92845a4a89d9afb2d43230f9f2b",
        "patch": "@@ -88,9 +88,9 @@ def start(self, extra_args=None, stdout=None, stderr=None, *args, **kwargs):\n \n         # Add a new stdout and stderr file for each time bitcoind is started\n         if stderr is None:\n-            stderr = tempfile.NamedTemporaryFile(dir=os.path.join(self.datadir, 'stderr'), delete=False)\n+            self.stderr = tempfile.NamedTemporaryFile(dir=os.path.join(self.datadir, 'stderr'), delete=False)\n         if stdout is None:\n-            stdout = tempfile.NamedTemporaryFile(dir=os.path.join(self.datadir, 'stdout'), delete=False)\n+            self.stdout = tempfile.NamedTemporaryFile(dir=os.path.join(self.datadir, 'stdout'), delete=False)\n \n         # add environment variable LIBC_FATAL_STDERR_=1 so that libc errors are written to stderr and not the terminal\n         subp_env = dict(os.environ, LIBC_FATAL_STDERR_=\"1\")\n@@ -135,7 +135,7 @@ def get_wallet_rpc(self, wallet_name):\n             wallet_path = \"wallet/%s\" % wallet_name\n             return self.rpc / wallet_path\n \n-    def stop_node(self):\n+    def stop_node(self, clean_stderr=True):\n         \"\"\"Stop the node.\"\"\"\n         if not self.running:\n             return\n@@ -144,6 +144,10 @@ def stop_node(self):\n             self.stop()\n         except http.client.CannotSendRequest:\n             self.log.exception(\"Unable to stop node.\")\n+        if clean_stderr:\n+            stderr = self.stderr.read()\n+            if stderr != b'':\n+                raise AssertionError(\"stderr not empty:\\n{}\".format(stderr))\n         del self.p2ps[:]\n \n     def is_node_stopped(self):\n@@ -182,7 +186,7 @@ def assert_start_raises_init_error(self, extra_args=None, expected_msg=None, *ar\n             try:\n                 self.start(extra_args, stderr=log_stderr, stdout=log_stdout, *args, **kwargs)\n                 self.wait_for_rpc_connection()\n-                self.stop_node()\n+                self.stop_node(clean_stderr=False)\n                 self.wait_util_stopped()\n             except Exception as e:\n                 assert 'bitcoind exited' in str(e)  # node must have shutdown"
      }
    ]
  }
]