[
  {
    "sha": "64b9f27e0e46142d01ed5070c544ca7a98183d56",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NGI5ZjI3ZTBlNDYxNDJkMDFlZDUwNzBjNTQ0Y2E3YTk4MTgzZDU2",
    "commit": {
      "author": {
        "name": "Daniel Kraft",
        "email": "d@domob.eu",
        "date": "2018-07-23T12:43:45Z"
      },
      "committer": {
        "name": "Daniel Kraft",
        "email": "d@domob.eu",
        "date": "2018-07-23T13:44:58Z"
      },
      "message": "Skip is_closing() check when not available.\n\nhttps://github.com/bitcoin/bitcoin/pull/13715 introduced a new check\nfor _transport.is_closing() in mininode's P2PConnection's.  This function\nis only available from Python 3.4.4, though, while Bitcoin is supposed\nto support all Python 3.4 versions.\n\nIn this change, we make the check conditional on is_closing() being\navailable.  If it is not, then we revert to the behaviour before the\ncheck was introduced; this means that\nhttps://github.com/bitcoin/bitcoin/issues/13579 is not fixed for old\nsystems, but at least the tests work as they used to do before.\n\nThis includes a small refactoring from a one-line lambda to an\ninline function, because this makes the code easier to read with more\nand more conditions being added.\n\nFixes https://github.com/bitcoin/bitcoin/issues/13745.",
      "tree": {
        "sha": "eec10f66767708d08a339c2bbbff8b2a6e8d9267",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eec10f66767708d08a339c2bbbff8b2a6e8d9267"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/64b9f27e0e46142d01ed5070c544ca7a98183d56",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64b9f27e0e46142d01ed5070c544ca7a98183d56",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/64b9f27e0e46142d01ed5070c544ca7a98183d56",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64b9f27e0e46142d01ed5070c544ca7a98183d56/comments",
    "author": {
      "login": "domob1812",
      "id": 4943644,
      "node_id": "MDQ6VXNlcjQ5NDM2NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/domob1812",
      "html_url": "https://github.com/domob1812",
      "followers_url": "https://api.github.com/users/domob1812/followers",
      "following_url": "https://api.github.com/users/domob1812/following{/other_user}",
      "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions",
      "organizations_url": "https://api.github.com/users/domob1812/orgs",
      "repos_url": "https://api.github.com/users/domob1812/repos",
      "events_url": "https://api.github.com/users/domob1812/events{/privacy}",
      "received_events_url": "https://api.github.com/users/domob1812/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "domob1812",
      "id": 4943644,
      "node_id": "MDQ6VXNlcjQ5NDM2NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/domob1812",
      "html_url": "https://github.com/domob1812",
      "followers_url": "https://api.github.com/users/domob1812/followers",
      "following_url": "https://api.github.com/users/domob1812/following{/other_user}",
      "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions",
      "organizations_url": "https://api.github.com/users/domob1812/orgs",
      "repos_url": "https://api.github.com/users/domob1812/repos",
      "events_url": "https://api.github.com/users/domob1812/events{/privacy}",
      "received_events_url": "https://api.github.com/users/domob1812/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c0a47da7250586dd2a6b7ba368a876ba8c6a15f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0a47da7250586dd2a6b7ba368a876ba8c6a15f2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c0a47da7250586dd2a6b7ba368a876ba8c6a15f2"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 11,
      "deletions": 1
    },
    "files": [
      {
        "sha": "ccf767d357292de4362302b8eb9b50f1b9ba7416",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 11,
        "deletions": 1,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64b9f27e0e46142d01ed5070c544ca7a98183d56/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64b9f27e0e46142d01ed5070c544ca7a98183d56/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=64b9f27e0e46142d01ed5070c544ca7a98183d56",
        "patch": "@@ -179,7 +179,17 @@ def send_message(self, message):\n             raise IOError('Not connected')\n         self._log_message(\"send\", message)\n         tmsg = self._build_message(message)\n-        NetworkThread.network_event_loop.call_soon_threadsafe(lambda: self._transport and not self._transport.is_closing() and self._transport.write(tmsg))\n+\n+        def maybe_write():\n+            if not self._transport:\n+                return\n+            # Python <3.4.4 does not have is_closing, so we have to check for\n+            # its existence explicitly as long as Bitcoin Core supports all\n+            # Python 3.4 versions.\n+            if hasattr(self._transport, 'is_closing') and self._transport.is_closing():\n+                return\n+            self._transport.write(tmsg)\n+        NetworkThread.network_event_loop.call_soon_threadsafe(maybe_write)\n \n     # Class utility methods\n "
      }
    ]
  }
]