[
  {
    "sha": "e251f7d1fb1ae1f153994c4f8d9535f887f2c0d3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMjUxZjdkMWZiMWFlMWYxNTM5OTRjNGY4ZDk1MzVmODg3ZjJjMGQz",
    "commit": {
      "author": {
        "name": "Ikko Ashimine",
        "email": "eltociear@gmail.com",
        "date": "2020-12-24T13:37:17Z"
      },
      "committer": {
        "name": "Ikko Ashimine",
        "email": "eltociear@gmail.com",
        "date": "2021-01-03T13:16:52Z"
      },
      "message": "doc: fix some typos",
      "tree": {
        "sha": "fa23d4e7e871ba3d5b4c64a8b9670b63d9de244d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fa23d4e7e871ba3d5b4c64a8b9670b63d9de244d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e251f7d1fb1ae1f153994c4f8d9535f887f2c0d3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e251f7d1fb1ae1f153994c4f8d9535f887f2c0d3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e251f7d1fb1ae1f153994c4f8d9535f887f2c0d3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e251f7d1fb1ae1f153994c4f8d9535f887f2c0d3/comments",
    "author": {
      "login": "eltociear",
      "id": 22633385,
      "node_id": "MDQ6VXNlcjIyNjMzMzg1",
      "avatar_url": "https://avatars.githubusercontent.com/u/22633385?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/eltociear",
      "html_url": "https://github.com/eltociear",
      "followers_url": "https://api.github.com/users/eltociear/followers",
      "following_url": "https://api.github.com/users/eltociear/following{/other_user}",
      "gists_url": "https://api.github.com/users/eltociear/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/eltociear/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/eltociear/subscriptions",
      "organizations_url": "https://api.github.com/users/eltociear/orgs",
      "repos_url": "https://api.github.com/users/eltociear/repos",
      "events_url": "https://api.github.com/users/eltociear/events{/privacy}",
      "received_events_url": "https://api.github.com/users/eltociear/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "eltociear",
      "id": 22633385,
      "node_id": "MDQ6VXNlcjIyNjMzMzg1",
      "avatar_url": "https://avatars.githubusercontent.com/u/22633385?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/eltociear",
      "html_url": "https://github.com/eltociear",
      "followers_url": "https://api.github.com/users/eltociear/followers",
      "following_url": "https://api.github.com/users/eltociear/following{/other_user}",
      "gists_url": "https://api.github.com/users/eltociear/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/eltociear/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/eltociear/subscriptions",
      "organizations_url": "https://api.github.com/users/eltociear/orgs",
      "repos_url": "https://api.github.com/users/eltociear/repos",
      "events_url": "https://api.github.com/users/eltociear/events{/privacy}",
      "received_events_url": "https://api.github.com/users/eltociear/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cc592a85ea0c371f7269dbcad32857c181b657d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc592a85ea0c371f7269dbcad32857c181b657d1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cc592a85ea0c371f7269dbcad32857c181b657d1"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 13,
      "deletions": 13
    },
    "files": [
      {
        "sha": "360dbd9e45c81ef05b28810517c772bc3a86ad7e",
        "filename": "depends/packages/qt.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e251f7d1fb1ae1f153994c4f8d9535f887f2c0d3/depends/packages/qt.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e251f7d1fb1ae1f153994c4f8d9535f887f2c0d3/depends/packages/qt.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/qt.mk?ref=e251f7d1fb1ae1f153994c4f8d9535f887f2c0d3",
        "patch": "@@ -218,7 +218,7 @@ endef\n #\n # 7. In clang.conf, swap out clang & clang++, for our compiler + flags. See #17466.\n #\n-# 8. Adjust a regex in toolchain.prf, to accomodate Guix's usage of\n+# 8. Adjust a regex in toolchain.prf, to accommodate Guix's usage of\n # CROSS_LIBRARY_PATH. See #15277.\n define $(package)_preprocess_cmds\n   patch -p1 -i $($(package)_patch_dir)/freetype_back_compat.patch && \\"
      },
      {
        "sha": "3ffd1674e03bcf0da2995aa465908679bc5840e1",
        "filename": "depends/patches/fontconfig/gperf_header_regen.patch",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e251f7d1fb1ae1f153994c4f8d9535f887f2c0d3/depends/patches/fontconfig/gperf_header_regen.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e251f7d1fb1ae1f153994c4f8d9535f887f2c0d3/depends/patches/fontconfig/gperf_header_regen.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/fontconfig/gperf_header_regen.patch?ref=e251f7d1fb1ae1f153994c4f8d9535f887f2c0d3",
        "patch": "@@ -2,7 +2,7 @@ commit 7b6eb33ecd88768b28c67ce5d2d68a7eed5936b6\n Author: fanquake <fanquake@gmail.com>\n Date:   Tue Aug 25 14:34:53 2020 +0800\n \n-    Remove rule that causes inadvertant header regeneration\n+    Remove rule that causes inadvertent header regeneration\n \n     Otherwise the makefile will needlessly attempt to re-generate the\n     headers with gperf. This can be dropped once the upstream build is fixed."
      },
      {
        "sha": "2de6874cd4eb84f279a19fb0e71b7ede034bfd3a",
        "filename": "depends/patches/native_cctools/ld64_disable_threading.patch",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e251f7d1fb1ae1f153994c4f8d9535f887f2c0d3/depends/patches/native_cctools/ld64_disable_threading.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e251f7d1fb1ae1f153994c4f8d9535f887f2c0d3/depends/patches/native_cctools/ld64_disable_threading.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/native_cctools/ld64_disable_threading.patch?ref=e251f7d1fb1ae1f153994c4f8d9535f887f2c0d3",
        "patch": "@@ -8,7 +8,7 @@ Date:   Tue Aug 18 01:20:24 2020 +0000\n     differently based on which files have already been parsed. This is more\n     likely to occur on systems with more CPUs.\n \n-    Just disable threading for now. There is no noticable slowdown.\n+    Just disable threading for now. There is no noticeable slowdown.\n \n     See #9891.\n "
      },
      {
        "sha": "1ca55f1ce32bd11f7dd4b737c8b792341b2ca7e0",
        "filename": "depends/patches/qt/freetype_back_compat.patch",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e251f7d1fb1ae1f153994c4f8d9535f887f2c0d3/depends/patches/qt/freetype_back_compat.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e251f7d1fb1ae1f153994c4f8d9535f887f2c0d3/depends/patches/qt/freetype_back_compat.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/freetype_back_compat.patch?ref=e251f7d1fb1ae1f153994c4f8d9535f887f2c0d3",
        "patch": "@@ -9,7 +9,7 @@ Date:   Tue Aug 18 15:15:08 2020 +0800\n     backwards-compatibility.\n \n     Qt 5.9 introduced a call to FT_Get_Font_Format(). Replace it with FT_Get_X11_Font_Format()\n-    in order to remain compatibile with older freetype, which is still used by e.g. Ubuntu Trusty.\n+    in order to remain compatible with older freetype, which is still used by e.g. Ubuntu Trusty.\n \n     See #14348.\n "
      },
      {
        "sha": "c43fcc1ba040d7b44d59d8747fce0d0e92b32fb6",
        "filename": "depends/patches/qt/no-xlib.patch",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e251f7d1fb1ae1f153994c4f8d9535f887f2c0d3/depends/patches/qt/no-xlib.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e251f7d1fb1ae1f153994c4f8d9535f887f2c0d3/depends/patches/qt/no-xlib.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/no-xlib.patch?ref=e251f7d1fb1ae1f153994c4f8d9535f887f2c0d3",
        "patch": "@@ -53,7 +53,7 @@ index 7c62c2e2b3..c05c6c0a07 100644\n      cursor = createNonStandardCursor(cshape);\n  \n +#if QT_CONFIG(xcb_xlib) && QT_CONFIG(library)\n-     // Create a glpyh cursor if everything else failed\n+     // Create a glyph cursor if everything else failed\n      if (!cursor && cursorId) {\n          cursor = xcb_generate_id(conn);\n @@ -596,6 +603,7 @@ xcb_cursor_t QXcbCursor::createFontCursor(int cshape)"
      },
      {
        "sha": "e3f6b35a7db53e7f9e1f33a7dc435cd6720de614",
        "filename": "src/bench/verify_script.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e251f7d1fb1ae1f153994c4f8d9535f887f2c0d3/src/bench/verify_script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e251f7d1fb1ae1f153994c4f8d9535f887f2c0d3/src/bench/verify_script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/verify_script.cpp?ref=e251f7d1fb1ae1f153994c4f8d9535f887f2c0d3",
        "patch": "@@ -24,7 +24,7 @@ static void VerifyScriptBench(benchmark::Bench& bench)\n     const int flags = SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH;\n     const int witnessversion = 0;\n \n-    // Keypair.\n+    // Key pair.\n     CKey key;\n     static const std::array<unsigned char, 32> vchKey = {\n         {"
      },
      {
        "sha": "b5fc93886df774da20e156e0bdd98e6046243227",
        "filename": "src/core_read.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e251f7d1fb1ae1f153994c4f8d9535f887f2c0d3/src/core_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e251f7d1fb1ae1f153994c4f8d9535f887f2c0d3/src/core_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_read.cpp?ref=e251f7d1fb1ae1f153994c4f8d9535f887f2c0d3",
        "patch": "@@ -128,7 +128,7 @@ static bool DecodeTx(CMutableTransaction& tx, const std::vector<unsigned char>&\n {\n     // General strategy:\n     // - Decode both with extended serialization (which interprets the 0x0001 tag as a marker for\n-    //   the presense of witnesses) and with legacy serialization (which interprets the tag as a\n+    //   the presence of witnesses) and with legacy serialization (which interprets the tag as a\n     //   0-input 1-output incomplete transaction).\n     //   - Restricted by try_no_witness (which disables legacy if false) and try_witness (which\n     //     disables extended if false)."
      },
      {
        "sha": "e94e25e9ecbb20e12291b8905bd8f4becec02bf2",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e251f7d1fb1ae1f153994c4f8d9535f887f2c0d3/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e251f7d1fb1ae1f153994c4f8d9535f887f2c0d3/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=e251f7d1fb1ae1f153994c4f8d9535f887f2c0d3",
        "patch": "@@ -65,7 +65,7 @@ struct Peer {\n \n     /** Protects block inventory data members */\n     Mutex m_block_inv_mutex;\n-    /** List of blocks that we'll anounce via an `inv` message.\n+    /** List of blocks that we'll announce via an `inv` message.\n      * There is no final sorting before sending, as they are always sent\n      * immediately and in the order requested. */\n     std::vector<uint256> m_blocks_for_inv_relay GUARDED_BY(m_block_inv_mutex);"
      },
      {
        "sha": "cf878fe3748982d01fbad7e078dfc63edbbdffd2",
        "filename": "src/netaddress.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e251f7d1fb1ae1f153994c4f8d9535f887f2c0d3/src/netaddress.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e251f7d1fb1ae1f153994c4f8d9535f887f2c0d3/src/netaddress.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.h?ref=e251f7d1fb1ae1f153994c4f8d9535f887f2c0d3",
        "patch": "@@ -483,7 +483,7 @@ class CSubNet\n             READWRITE(obj.network);\n             if (obj.network.IsIPv4()) {\n                 // Before commit 102867c587f5f7954232fb8ed8e85cda78bb4d32, CSubNet used the last 4 bytes of netmask\n-                // to store the relevant bytes for an IPv4 mask. For compatiblity reasons, keep doing so in\n+                // to store the relevant bytes for an IPv4 mask. For compatibility reasons, keep doing so in\n                 // serialized form.\n                 unsigned char dummy[12] = {0};\n                 READWRITE(dummy);"
      },
      {
        "sha": "0193e4805122ab8ae9bdaae84a8800de7978a7f1",
        "filename": "src/test/validation_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e251f7d1fb1ae1f153994c4f8d9535f887f2c0d3/src/test/validation_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e251f7d1fb1ae1f153994c4f8d9535f887f2c0d3/src/test/validation_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_tests.cpp?ref=e251f7d1fb1ae1f153994c4f8d9535f887f2c0d3",
        "patch": "@@ -75,7 +75,7 @@ BOOST_AUTO_TEST_CASE(signet_parse_tests)\n     CMutableTransaction cb;\n     cb.vout.emplace_back(0, CScript{});\n     block.vtx.push_back(MakeTransactionRef(cb));\n-    block.vtx.push_back(MakeTransactionRef(cb)); // Add dummy tx to excercise merkle root code\n+    block.vtx.push_back(MakeTransactionRef(cb)); // Add dummy tx to exercise merkle root code\n     BOOST_CHECK(!SignetTxs::Create(block, challenge));\n     BOOST_CHECK(!CheckSignetBlockSolution(block, signet_params->GetConsensus()));\n "
      },
      {
        "sha": "4e6270220e0b9656b6e3f34926ff7cdbe563f90b",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e251f7d1fb1ae1f153994c4f8d9535f887f2c0d3/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e251f7d1fb1ae1f153994c4f8d9535f887f2c0d3/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=e251f7d1fb1ae1f153994c4f8d9535f887f2c0d3",
        "patch": "@@ -426,7 +426,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n                 uint256 checksum;\n                 ssValue >> checksum;\n                 if ((checksum_valid = Hash(vchPrivKey) != checksum)) {\n-                    strErr = \"Error reading wallet database: Crypted key corrupt\";\n+                    strErr = \"Error reading wallet database: Encrypted key corrupt\";\n                     return false;\n                 }\n             }"
      },
      {
        "sha": "bdbfa5aed1161e26bdafb58df4d9bf5924d2581d",
        "filename": "test/functional/feature_nulldummy.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e251f7d1fb1ae1f153994c4f8d9535f887f2c0d3/test/functional/feature_nulldummy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e251f7d1fb1ae1f153994c4f8d9535f887f2c0d3/test/functional/feature_nulldummy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_nulldummy.py?ref=e251f7d1fb1ae1f153994c4f8d9535f887f2c0d3",
        "patch": "@@ -60,7 +60,7 @@ def run_test(self):\n         self.wit_address = w0.getnewaddress(address_type='p2sh-segwit')\n         self.wit_ms_address = wmulti.addmultisigaddress(1, [self.pubkey], '', 'p2sh-segwit')['address']\n         if not self.options.descriptors:\n-            # Legacy wallets need to import these so that they are watched by the wallet. This is unnecssary (and does not need to be tested) for descriptor wallets\n+            # Legacy wallets need to import these so that they are watched by the wallet. This is unnecessary (and does not need to be tested) for descriptor wallets\n             wmulti.importaddress(self.ms_address)\n             wmulti.importaddress(self.wit_ms_address)\n "
      },
      {
        "sha": "ea0623bbf5c4f35d2edbc88b909b2168ea233fe7",
        "filename": "test/functional/wallet_encryption.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e251f7d1fb1ae1f153994c4f8d9535f887f2c0d3/test/functional/wallet_encryption.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e251f7d1fb1ae1f153994c4f8d9535f887f2c0d3/test/functional/wallet_encryption.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_encryption.py?ref=e251f7d1fb1ae1f153994c4f8d9535f887f2c0d3",
        "patch": "@@ -78,7 +78,7 @@ def run_test(self):\n         MAX_VALUE = 100000000\n         expected_time = int(time.time()) + MAX_VALUE - 600\n         self.nodes[0].walletpassphrase(passphrase2, MAX_VALUE - 600)\n-        # give buffer for walletpassphrase, since it iterates over all crypted keys\n+        # give buffer for walletpassphrase, since it iterates over all encrypted keys\n         expected_time_with_buffer = time.time() + MAX_VALUE - 600\n         actual_time = self.nodes[0].getwalletinfo()['unlocked_until']\n         assert_greater_than_or_equal(actual_time, expected_time)"
      }
    ]
  }
]