[
  {
    "sha": "fa126effc2a03e22708960344e62fc21259deb23",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTEyNmVmZmMyYTAzZTIyNzA4OTYwMzQ0ZTYyZmMyMTI1OWRlYjIz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-06-05T08:10:52Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-06-23T08:38:15Z"
      },
      "message": "Avoid undefined behavior using CFlatData in CScript serialization\n\n`&vch[vch.size()]` and even `&vch[0]` on vectors can cause assertion\nerrors with VC in debug mode. This is the problem mentioned in #4239.\nThe deeper problem with this is that we rely on undefined behavior.\n\n- Add `begin_ptr` and `end_ptr` functions that get the beginning and end\n  pointer of vector in a reliable way that copes with empty vectors and\n  doesn't reference outside the vector\n(see https://stackoverflow.com/questions/1339470/how-to-get-the-address-of-the-stdvector-buffer-start-most-elegantly/1339767#1339767).\n- Add a convenience constructor to CFlatData that wraps a vector.\n\nI added `begin_ptr` and `end_ptr` as separate functions as I imagine\nthey will be useful in more places.",
      "tree": {
        "sha": "bb21fb6b131efe0dd5448765c5240ba208d54945",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bb21fb6b131efe0dd5448765c5240ba208d54945"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa126effc2a03e22708960344e62fc21259deb23",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJTp+d4AAoJEHSBCwEjRsmmnIYH/19ttfV6klTOSR0r2vqBfoZ+\nL3cpxXXJ44LGFpD6aLbR+vhW13MOCGDt4zAIOru9m8cLth0iKJ/eVDGalN3ZY1Is\nvrSsFIMEofAc9AXrOvqK7Zso0JBBwYmrwv6/r2uLQXTe6qyiPwQJpOcFVGIMOkw4\n1GOltDUDnPKUiqlBX5v2C/LsCYpEL74Jzqe0e9FuOYKoMXtsJH4SyHgTcQody+61\niuMczRpwrxHTAFVaTJ3ILvLzJKJHNFc4wu8/I33+hOz76MWQgR0HspJZR307FXlA\nTwWPbaJ1AQ+8vABa5DDR7JW5RHscx49GOVJeFBmh11n3IIln2V4wHlDTvzl2JAM=\n=wKHA\n-----END PGP SIGNATURE-----",
        "payload": "tree bb21fb6b131efe0dd5448765c5240ba208d54945\nparent 52d4abfdef93cd622b297a092eb6639e678bcb9d\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1401955852 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1403512695 +0200\n\nAvoid undefined behavior using CFlatData in CScript serialization\n\n`&vch[vch.size()]` and even `&vch[0]` on vectors can cause assertion\nerrors with VC in debug mode. This is the problem mentioned in #4239.\nThe deeper problem with this is that we rely on undefined behavior.\n\n- Add `begin_ptr` and `end_ptr` functions that get the beginning and end\n  pointer of vector in a reliable way that copes with empty vectors and\n  doesn't reference outside the vector\n(see https://stackoverflow.com/questions/1339470/how-to-get-the-address-of-the-stdvector-buffer-start-most-elegantly/1339767#1339767).\n- Add a convenience constructor to CFlatData that wraps a vector.\n\nI added `begin_ptr` and `end_ptr` as separate functions as I imagine\nthey will be useful in more places.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa126effc2a03e22708960344e62fc21259deb23",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa126effc2a03e22708960344e62fc21259deb23",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa126effc2a03e22708960344e62fc21259deb23/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "52d4abfdef93cd622b297a092eb6639e678bcb9d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/52d4abfdef93cd622b297a092eb6639e678bcb9d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/52d4abfdef93cd622b297a092eb6639e678bcb9d"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 38,
      "deletions": 4
    },
    "files": [
      {
        "sha": "ea988f0e407c8fb3c05c20885960b3f50e4c562b",
        "filename": "src/script.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa126effc2a03e22708960344e62fc21259deb23/src/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa126effc2a03e22708960344e62fc21259deb23/src/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.h?ref=fa126effc2a03e22708960344e62fc21259deb23",
        "patch": "@@ -770,12 +770,12 @@ class CScriptCompressor\n     void Serialize(Stream &s, int nType, int nVersion) const {\n         std::vector<unsigned char> compr;\n         if (Compress(compr)) {\n-            s << CFlatData(&compr[0], &compr[compr.size()]);\n+            s << CFlatData(compr);\n             return;\n         }\n         unsigned int nSize = script.size() + nSpecialScripts;\n         s << VARINT(nSize);\n-        s << CFlatData(&script[0], &script[script.size()]);\n+        s << CFlatData(script);\n     }\n \n     template<typename Stream>\n@@ -784,13 +784,13 @@ class CScriptCompressor\n         s >> VARINT(nSize);\n         if (nSize < nSpecialScripts) {\n             std::vector<unsigned char> vch(GetSpecialSize(nSize), 0x00);\n-            s >> REF(CFlatData(&vch[0], &vch[vch.size()]));\n+            s >> REF(CFlatData(vch));\n             Decompress(nSize, vch);\n             return;\n         }\n         nSize -= nSpecialScripts;\n         script.resize(nSize);\n-        s >> REF(CFlatData(&script[0], &script[script.size()]));\n+        s >> REF(CFlatData(script));\n     }\n };\n "
      },
      {
        "sha": "5ac85554c6dbd3ecf425ee9d075dfae9e366f5bc",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 34,
        "deletions": 0,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa126effc2a03e22708960344e62fc21259deb23/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa126effc2a03e22708960344e62fc21259deb23/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=fa126effc2a03e22708960344e62fc21259deb23",
        "patch": "@@ -37,6 +37,34 @@ inline T& REF(const T& val)\n     return const_cast<T&>(val);\n }\n \n+/** Get begin pointer of vector (non-const version).\n+ * @note These functions avoid the undefined case of indexing into an empty\n+ * vector, as well as that of indexing after the end of the vector.\n+ */\n+template <class T, class TAl>\n+inline T* begin_ptr(std::vector<T,TAl>& v)\n+{\n+    return v.empty() ? NULL : &v[0];\n+}\n+/** Get begin pointer of vector (const version) */\n+template <class T, class TAl>\n+inline const T* begin_ptr(const std::vector<T,TAl>& v)\n+{\n+    return v.empty() ? NULL : &v[0];\n+}\n+/** Get end pointer of vector (non-const version) */\n+template <class T, class TAl>\n+inline T* end_ptr(std::vector<T,TAl>& v)\n+{\n+    return v.empty() ? NULL : (&v[0] + v.size());\n+}\n+/** Get end pointer of vector (const version) */\n+template <class T, class TAl>\n+inline const T* end_ptr(const std::vector<T,TAl>& v)\n+{\n+    return v.empty() ? NULL : (&v[0] + v.size());\n+}\n+\n /////////////////////////////////////////////////////////////////\n //\n // Templates for serializing to anything that looks like a stream,\n@@ -318,6 +346,12 @@ class CFlatData\n     char* pend;\n public:\n     CFlatData(void* pbeginIn, void* pendIn) : pbegin((char*)pbeginIn), pend((char*)pendIn) { }\n+    template <class T, class TAl>\n+    explicit CFlatData(std::vector<T,TAl> &v)\n+    {\n+        pbegin = (char*)begin_ptr(v);\n+        pend = (char*)end_ptr(v);\n+    }\n     char* begin() { return pbegin; }\n     const char* begin() const { return pbegin; }\n     char* end() { return pend; }"
      }
    ]
  }
]