[
  {
    "sha": "1444c2e7d0a243690b960c1fefe5f36bf5ca7e54",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNDQ0YzJlN2QwYTI0MzY5MGI5NjBjMWZlZmU1ZjM2YmY1Y2E3ZTU0",
    "commit": {
      "author": {
        "name": "Adam Langley",
        "email": "agl@google.com",
        "date": "2017-08-30T05:26:12Z"
      },
      "committer": {
        "name": "Mark Friedenbach",
        "email": "mark@friedenbach.org",
        "date": "2017-09-06T20:46:11Z"
      },
      "message": "Switch memory_cleanse implementation to BoringSSL's to ensure memory clearing even with link-time optimization.\n\nThe implementation we currently use from OpenSSL prevents the compiler from optimizing away clensing operations on blocks of memory that are about to be released, but this protection is not extended to link-time optimization. This commit copies the solution cooked up by Google compiler engineers which uses inline assembly directives to instruct the compiler not to optimize out the call under any circumstances. As the code is in-lined, this has the added advantage of removing one more OpenSSL dependency.\n\nRegarding license compatibility, Google's contributions to BoringSSL library, including this code, is made available under the ISC license, which is MIT compatible.\n\nBoringSSL git commit: ad1907fe73334d6c696c8539646c21b11178f20f",
      "tree": {
        "sha": "394bd270b1a3fd0d34693f0cdcaeccdd8732b07d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/394bd270b1a3fd0d34693f0cdcaeccdd8732b07d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1444c2e7d0a243690b960c1fefe5f36bf5ca7e54",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1444c2e7d0a243690b960c1fefe5f36bf5ca7e54",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1444c2e7d0a243690b960c1fefe5f36bf5ca7e54",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1444c2e7d0a243690b960c1fefe5f36bf5ca7e54/comments",
    "author": {
      "login": "agl",
      "id": 21203,
      "node_id": "MDQ6VXNlcjIxMjAz",
      "avatar_url": "https://avatars.githubusercontent.com/u/21203?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/agl",
      "html_url": "https://github.com/agl",
      "followers_url": "https://api.github.com/users/agl/followers",
      "following_url": "https://api.github.com/users/agl/following{/other_user}",
      "gists_url": "https://api.github.com/users/agl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/agl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/agl/subscriptions",
      "organizations_url": "https://api.github.com/users/agl/orgs",
      "repos_url": "https://api.github.com/users/agl/repos",
      "events_url": "https://api.github.com/users/agl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/agl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "maaku",
      "id": 69154,
      "node_id": "MDQ6VXNlcjY5MTU0",
      "avatar_url": "https://avatars.githubusercontent.com/u/69154?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maaku",
      "html_url": "https://github.com/maaku",
      "followers_url": "https://api.github.com/users/maaku/followers",
      "following_url": "https://api.github.com/users/maaku/following{/other_user}",
      "gists_url": "https://api.github.com/users/maaku/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maaku/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maaku/subscriptions",
      "organizations_url": "https://api.github.com/users/maaku/orgs",
      "repos_url": "https://api.github.com/users/maaku/repos",
      "events_url": "https://api.github.com/users/maaku/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maaku/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "961901f77e55aa07d5048000d57bcd218ae74b08",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/961901f77e55aa07d5048000d57bcd218ae74b08",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/961901f77e55aa07d5048000d57bcd218ae74b08"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 28,
      "deletions": 2
    },
    "files": [
      {
        "sha": "95899c9f02d96d2c391bb03c587df240252d85fe",
        "filename": "src/support/cleanse.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 2,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1444c2e7d0a243690b960c1fefe5f36bf5ca7e54/src/support/cleanse.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1444c2e7d0a243690b960c1fefe5f36bf5ca7e54/src/support/cleanse.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/support/cleanse.cpp?ref=1444c2e7d0a243690b960c1fefe5f36bf5ca7e54",
        "patch": "@@ -5,9 +5,35 @@\n \n #include \"cleanse.h\"\n \n-#include <openssl/crypto.h>\n+#include <cstring>\n \n+/* Compilers have a bad habit of removing \"superfluous\" memset calls that\n+ * are trying to zero memory. For example, when memset()ing a buffer and\n+ * then free()ing it, the compiler might decide that the memset is\n+ * unobservable and thus can be removed.\n+ *\n+ * Previously we used OpenSSL which tried to stop this by a) implementing\n+ * memset in assembly on x86 and b) putting the function in its own file\n+ * for other platforms.\n+ *\n+ * This change removes those tricks in favour of using asm directives to\n+ * scare the compiler away. As best as our compiler folks can tell, this is\n+ * sufficient and will continue to be so.\n+ *\n+ * Adam Langley <agl@google.com>\n+ * Commit: ad1907fe73334d6c696c8539646c21b11178f20f\n+ * BoringSSL (LICENSE: ISC)\n+ */\n void memory_cleanse(void *ptr, size_t len)\n {\n-    OPENSSL_cleanse(ptr, len);\n+    std::memset(ptr, 0, len);\n+\n+    /* As best as we can tell, this is sufficient to break any optimisations that\n+       might try to eliminate \"superfluous\" memsets. If there's an easy way to\n+       detect memset_s, it would be better to use that. */\n+#if defined(_MSC_VER)\n+    __asm;\n+#else\n+    __asm__ __volatile__(\"\" : : \"r\"(ptr) : \"memory\");\n+#endif\n }"
      }
    ]
  }
]