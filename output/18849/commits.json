[
  {
    "sha": "1f790a1147ad9a5fe06987d84b6cd71f91cbec4b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZjc5MGExMTQ3YWQ5YTVmZTA2OTg3ZDg0YjZjZDcxZjkxY2JlYzRi",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-03-29T23:31:03Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-05-12T21:12:46Z"
      },
      "message": "Make Span size type unsigned\n\nThis matches a change in the C++20 std::span proposal.",
      "tree": {
        "sha": "320deb12f1d446ca83369d16e4083e1c6b249fe5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/320deb12f1d446ca83369d16e4083e1c6b249fe5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1f790a1147ad9a5fe06987d84b6cd71f91cbec4b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f790a1147ad9a5fe06987d84b6cd71f91cbec4b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1f790a1147ad9a5fe06987d84b6cd71f91cbec4b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f790a1147ad9a5fe06987d84b6cd71f91cbec4b/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8da1e43b63cb36759eeb1fcfd6768163265c44e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8da1e43b63cb36759eeb1fcfd6768163265c44e2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8da1e43b63cb36759eeb1fcfd6768163265c44e2"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 9,
      "deletions": 8
    },
    "files": [
      {
        "sha": "31e9fba12ce9b76011cb0733ebe534a20ce0ffe7",
        "filename": "src/span.h",
        "status": "modified",
        "additions": 9,
        "deletions": 8,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f790a1147ad9a5fe06987d84b6cd71f91cbec4b/src/span.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f790a1147ad9a5fe06987d84b6cd71f91cbec4b/src/span.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/span.h?ref=1f790a1147ad9a5fe06987d84b6cd71f91cbec4b",
        "patch": "@@ -18,11 +18,12 @@ template<typename C>\n class Span\n {\n     C* m_data;\n-    std::ptrdiff_t m_size;\n+    std::size_t m_size;\n \n public:\n     constexpr Span() noexcept : m_data(nullptr), m_size(0) {}\n-    constexpr Span(C* data, std::ptrdiff_t size) noexcept : m_data(data), m_size(size) {}\n+    constexpr Span(C* data, std::size_t size) noexcept : m_data(data), m_size(size) {}\n+\n     constexpr Span(C* data, C* end) noexcept : m_data(data), m_size(end - data) {}\n \n     /** Implicit conversion of spans between compatible types.\n@@ -47,13 +48,13 @@ class Span\n     constexpr C* end() const noexcept { return m_data + m_size; }\n     constexpr C& front() const noexcept { return m_data[0]; }\n     constexpr C& back() const noexcept { return m_data[m_size - 1]; }\n-    constexpr std::ptrdiff_t size() const noexcept { return m_size; }\n-    constexpr C& operator[](std::ptrdiff_t pos) const noexcept { return m_data[pos]; }\n+    constexpr std::size_t size() const noexcept { return m_size; }\n+    constexpr C& operator[](std::size_t pos) const noexcept { return m_data[pos]; }\n \n-    constexpr Span<C> subspan(std::ptrdiff_t offset) const noexcept { return Span<C>(m_data + offset, m_size - offset); }\n-    constexpr Span<C> subspan(std::ptrdiff_t offset, std::ptrdiff_t count) const noexcept { return Span<C>(m_data + offset, count); }\n-    constexpr Span<C> first(std::ptrdiff_t count) const noexcept { return Span<C>(m_data, count); }\n-    constexpr Span<C> last(std::ptrdiff_t count) const noexcept { return Span<C>(m_data + m_size - count, count); }\n+    constexpr Span<C> subspan(std::size_t offset) const noexcept { return Span<C>(m_data + offset, m_size - offset); }\n+    constexpr Span<C> subspan(std::size_t offset, std::size_t count) const noexcept { return Span<C>(m_data + offset, count); }\n+    constexpr Span<C> first(std::size_t count) const noexcept { return Span<C>(m_data, count); }\n+    constexpr Span<C> last(std::size_t count) const noexcept { return Span<C>(m_data + m_size - count, count); }\n \n     friend constexpr bool operator==(const Span& a, const Span& b) noexcept { return a.size() == b.size() && std::equal(a.begin(), a.end(), b.begin()); }\n     friend constexpr bool operator!=(const Span& a, const Span& b) noexcept { return !(a == b); }"
      }
    ]
  },
  {
    "sha": "bb3d38fc061d8482e68cd335a45c9cd8bb66a475",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYjNkMzhmYzA2MWQ4NDgyZTY4Y2QzMzVhNDVjOWNkOGJiNjZhNDc1",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-03-29T23:58:04Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-05-12T21:12:46Z"
      },
      "message": "Make pointer-based Span construction safer\n\nThis prevents constructing a Span<A> given two pointers into an array\nof B (where B is a subclass of A), at least without explicit cast to\npointers to A.",
      "tree": {
        "sha": "e267d5d97f68f8b0a73035c4ff913a4cd30b709a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e267d5d97f68f8b0a73035c4ff913a4cd30b709a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bb3d38fc061d8482e68cd335a45c9cd8bb66a475",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb3d38fc061d8482e68cd335a45c9cd8bb66a475",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bb3d38fc061d8482e68cd335a45c9cd8bb66a475",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb3d38fc061d8482e68cd335a45c9cd8bb66a475/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1f790a1147ad9a5fe06987d84b6cd71f91cbec4b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f790a1147ad9a5fe06987d84b6cd71f91cbec4b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1f790a1147ad9a5fe06987d84b6cd71f91cbec4b"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 15,
      "deletions": 2
    },
    "files": [
      {
        "sha": "f83c1a53492a4a43ab3d5717f8f528d426330304",
        "filename": "src/span.h",
        "status": "modified",
        "additions": 15,
        "deletions": 2,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb3d38fc061d8482e68cd335a45c9cd8bb66a475/src/span.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb3d38fc061d8482e68cd335a45c9cd8bb66a475/src/span.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/span.h?ref=bb3d38fc061d8482e68cd335a45c9cd8bb66a475",
        "patch": "@@ -22,9 +22,22 @@ class Span\n \n public:\n     constexpr Span() noexcept : m_data(nullptr), m_size(0) {}\n-    constexpr Span(C* data, std::size_t size) noexcept : m_data(data), m_size(size) {}\n \n-    constexpr Span(C* data, C* end) noexcept : m_data(data), m_size(end - data) {}\n+    /** Construct a span from a begin pointer and a size.\n+     *\n+     * This implements a subset of the iterator-based std::span constructor in C++20,\n+     * which is hard to implement without std::address_of.\n+     */\n+    template <typename T, typename std::enable_if<std::is_convertible<T (*)[], C (*)[]>::value, int>::type = 0>\n+    constexpr Span(T* begin, std::size_t size) noexcept : m_data(begin), m_size(size) {}\n+\n+    /** Construct a span from a begin and end pointer.\n+     *\n+     * This implements a subset of the iterator-based std::span constructor in C++20,\n+     * which is hard to implement without std::address_of.\n+     */\n+    template <typename T, typename std::enable_if<std::is_convertible<T (*)[], C (*)[]>::value, int>::type = 0>\n+    constexpr Span(T* begin, T* end) noexcept : m_data(begin), m_size(end - begin) {}\n \n     /** Implicit conversion of spans between compatible types.\n      *"
      }
    ]
  },
  {
    "sha": "ab303a16d114b1e94c6cf0e4c5db5389dfa197f6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYjMwM2ExNmQxMTRiMWU5NGM2Y2YwZTRjNWRiNTM4OWRmYTE5N2Y2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-03-30T00:29:01Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-05-12T21:12:46Z"
      },
      "message": "Add Span constructors for arrays and vectors",
      "tree": {
        "sha": "804c4048b8e5061d4e4e6c19d8f8b095ac882025",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/804c4048b8e5061d4e4e6c19d8f8b095ac882025"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ab303a16d114b1e94c6cf0e4c5db5389dfa197f6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab303a16d114b1e94c6cf0e4c5db5389dfa197f6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ab303a16d114b1e94c6cf0e4c5db5389dfa197f6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab303a16d114b1e94c6cf0e4c5db5389dfa197f6/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bb3d38fc061d8482e68cd335a45c9cd8bb66a475",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb3d38fc061d8482e68cd335a45c9cd8bb66a475",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bb3d38fc061d8482e68cd335a45c9cd8bb66a475"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 21,
      "deletions": 13
    },
    "files": [
      {
        "sha": "d5fec462e11009357e85d8c336051c7805db5cf2",
        "filename": "src/span.h",
        "status": "modified",
        "additions": 21,
        "deletions": 13,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab303a16d114b1e94c6cf0e4c5db5389dfa197f6/src/span.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab303a16d114b1e94c6cf0e4c5db5389dfa197f6/src/span.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/span.h?ref=ab303a16d114b1e94c6cf0e4c5db5389dfa197f6",
        "patch": "@@ -56,6 +56,20 @@ class Span\n     /** Default assignment operator. */\n     Span& operator=(const Span& other) noexcept = default;\n \n+    /** Construct a Span from an array. This matches the corresponding C++20 std::span constructor. */\n+    template <int N>\n+    constexpr Span(C (&a)[N]) noexcept : m_data(a), m_size(N) {}\n+\n+    /** Construct a Span for objects with .data() and .size() (std::string, std::array, std::vector, ...).\n+     *\n+     * This implements a subset of the functionality provided by the C++20 std::span range-based constructor.\n+     *\n+     * To prevent surprises, only Spans for constant value types are supported when passing in temporaries.\n+     * Note that this restriction does not exist when converting arrays or other Spans (see above).\n+     */\n+    template <typename V, typename std::enable_if<(std::is_const<C>::value || std::is_lvalue_reference<V>::value) && std::is_convertible<typename std::remove_pointer<decltype(std::declval<V&>().data())>::type (*)[], C (*)[]>::value && std::is_convertible<decltype(std::declval<V&>().size()), std::size_t>::value, int>::type = 0>\n+    constexpr Span(V&& v) noexcept : m_data(v.data()), m_size(v.size()) {}\n+\n     constexpr C* data() const noexcept { return m_data; }\n     constexpr C* begin() const noexcept { return m_data; }\n     constexpr C* end() const noexcept { return m_data + m_size; }\n@@ -79,19 +93,13 @@ class Span\n     template <typename O> friend class Span;\n };\n \n-/** Create a span to a container exposing data() and size().\n- *\n- * This correctly deals with constness: the returned Span's element type will be\n- * whatever data() returns a pointer to. If either the passed container is const,\n- * or its element type is const, the resulting span will have a const element type.\n- *\n- * std::span will have a constructor that implements this functionality directly.\n- */\n-template<typename A, int N>\n-constexpr Span<A> MakeSpan(A (&a)[N]) { return Span<A>(a, N); }\n-\n-template<typename V>\n-constexpr Span<typename std::remove_pointer<decltype(std::declval<V>().data())>::type> MakeSpan(V& v) { return Span<typename std::remove_pointer<decltype(std::declval<V>().data())>::type>(v.data(), v.size()); }\n+// MakeSpan helps constructing a Span of the right type automatically.\n+/** MakeSpan for arrays: */\n+template <typename A, int N> Span<A> constexpr MakeSpan(A (&a)[N]) { return Span<A>(a, N); }\n+/** MakeSpan for temporaries / rvalue references, only supporting const output. */\n+template <typename V> constexpr auto MakeSpan(V&& v) -> typename std::enable_if<!std::is_lvalue_reference<V>::value, Span<const typename std::remove_pointer<decltype(v.data())>::type>>::type { return std::forward<V>(v); }\n+/** MakeSpan for (lvalue) references, supporting mutable output. */\n+template <typename V> constexpr auto MakeSpan(V& v) -> Span<typename std::remove_pointer<decltype(v.data())>::type> { return v; }\n \n /** Pop the last element off a span, and return a reference to that element. */\n template <typename T>"
      }
    ]
  },
  {
    "sha": "2676aeadfa0e43dcaaccc4720623cdfe0beed528",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNjc2YWVhZGZhMGU0M2RjYWFjY2M0NzIwNjIzY2RmZTBiZWVkNTI4",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-03-30T00:42:38Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-05-12T21:19:40Z"
      },
      "message": "Simplify usage of Span in several places",
      "tree": {
        "sha": "f68ed37715bddfefb1b8df1595bd91b307b32903",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f68ed37715bddfefb1b8df1595bd91b307b32903"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2676aeadfa0e43dcaaccc4720623cdfe0beed528",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2676aeadfa0e43dcaaccc4720623cdfe0beed528",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2676aeadfa0e43dcaaccc4720623cdfe0beed528",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2676aeadfa0e43dcaaccc4720623cdfe0beed528/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ab303a16d114b1e94c6cf0e4c5db5389dfa197f6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab303a16d114b1e94c6cf0e4c5db5389dfa197f6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ab303a16d114b1e94c6cf0e4c5db5389dfa197f6"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 18,
      "deletions": 18
    },
    "files": [
      {
        "sha": "7a5421ab6f2c2e67a7a5fe718ca59a26adb9167e",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2676aeadfa0e43dcaaccc4720623cdfe0beed528/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2676aeadfa0e43dcaaccc4720623cdfe0beed528/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=2676aeadfa0e43dcaaccc4720623cdfe0beed528",
        "patch": "@@ -139,7 +139,7 @@ std::string DescriptorChecksum(const Span<const char>& span)\n     return ret;\n }\n \n-std::string AddChecksum(const std::string& str) { return str + \"#\" + DescriptorChecksum(MakeSpan(str)); }\n+std::string AddChecksum(const std::string& str) { return str + \"#\" + DescriptorChecksum(str); }\n \n ////////////////////////////////////////////////////////////////////////////\n // Internal representation                                                //\n@@ -1087,7 +1087,7 @@ bool CheckChecksum(Span<const char>& sp, bool require_checksum, std::string& err\n \n std::unique_ptr<Descriptor> Parse(const std::string& descriptor, FlatSigningProvider& out, std::string& error, bool require_checksum)\n {\n-    Span<const char> sp(descriptor.data(), descriptor.size());\n+    Span<const char> sp{descriptor};\n     if (!CheckChecksum(sp, require_checksum, error)) return nullptr;\n     auto ret = ParseScript(0, sp, ParseScriptContext::TOP, out, error);\n     if (sp.size() == 0 && ret) return std::unique_ptr<Descriptor>(std::move(ret));\n@@ -1098,7 +1098,7 @@ std::string GetDescriptorChecksum(const std::string& descriptor)\n {\n     std::string ret;\n     std::string error;\n-    Span<const char> sp(descriptor.data(), descriptor.size());\n+    Span<const char> sp{descriptor};\n     if (!CheckChecksum(sp, false, error, &ret)) return \"\";\n     return ret;\n }"
      },
      {
        "sha": "9415bba58549e0bfc1d097873539084f7ddac202",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2676aeadfa0e43dcaaccc4720623cdfe0beed528/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2676aeadfa0e43dcaaccc4720623cdfe0beed528/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=2676aeadfa0e43dcaaccc4720623cdfe0beed528",
        "patch": "@@ -1522,7 +1522,7 @@ static bool ExecuteWitnessScript(const Span<const valtype>& stack_span, const CS\n static bool VerifyWitnessProgram(const CScriptWitness& witness, int witversion, const std::vector<unsigned char>& program, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror)\n {\n     CScript scriptPubKey;\n-    Span<const valtype> stack = MakeSpan(witness.stack);\n+    Span<const valtype> stack{witness.stack};\n \n     if (witversion == 0) {\n         if (program.size() == WITNESS_V0_SCRIPTHASH_SIZE) {"
      },
      {
        "sha": "f6b6e8f6f0cf446427c62a31c87f232ce761e237",
        "filename": "src/test/fuzz/span.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2676aeadfa0e43dcaaccc4720623cdfe0beed528/src/test/fuzz/span.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2676aeadfa0e43dcaaccc4720623cdfe0beed528/src/test/fuzz/span.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/span.cpp?ref=2676aeadfa0e43dcaaccc4720623cdfe0beed528",
        "patch": "@@ -18,7 +18,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n     FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n \n     std::string str = fuzzed_data_provider.ConsumeBytesAsString(32);\n-    const Span<const char> span = MakeSpan(str);\n+    const Span<const char> span{str};\n     (void)span.data();\n     (void)span.begin();\n     (void)span.end();\n@@ -32,7 +32,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n     }\n \n     std::string another_str = fuzzed_data_provider.ConsumeBytesAsString(32);\n-    const Span<const char> another_span = MakeSpan(another_str);\n+    const Span<const char> another_span{another_str};\n     assert((span <= another_span) != (span > another_span));\n     assert((span == another_span) != (span != another_span));\n     assert((span >= another_span) != (span < another_span));"
      },
      {
        "sha": "e5bf5dd6083b5d689d701df28c1ecaf498d3383a",
        "filename": "src/test/fuzz/spanparsing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2676aeadfa0e43dcaaccc4720623cdfe0beed528/src/test/fuzz/spanparsing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2676aeadfa0e43dcaaccc4720623cdfe0beed528/src/test/fuzz/spanparsing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/spanparsing.cpp?ref=2676aeadfa0e43dcaaccc4720623cdfe0beed528",
        "patch": "@@ -12,7 +12,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n     const size_t query_size = fuzzed_data_provider.ConsumeIntegral<size_t>();\n     const std::string query = fuzzed_data_provider.ConsumeBytesAsString(std::min<size_t>(query_size, 1024 * 1024));\n     const std::string span_str = fuzzed_data_provider.ConsumeRemainingBytesAsString();\n-    const Span<const char> const_span = MakeSpan(span_str);\n+    const Span<const char> const_span{span_str};\n \n     Span<const char> mut_span = const_span;\n     (void)spanparsing::Const(query, mut_span);"
      },
      {
        "sha": "257328974bcd06ed4f030d7e1aaa05a386b22872",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2676aeadfa0e43dcaaccc4720623cdfe0beed528/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2676aeadfa0e43dcaaccc4720623cdfe0beed528/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=2676aeadfa0e43dcaaccc4720623cdfe0beed528",
        "patch": "@@ -1829,7 +1829,7 @@ BOOST_AUTO_TEST_CASE(test_spanparsing)\n \n     // Const(...): parse a constant, update span to skip it if successful\n     input = \"MilkToastHoney\";\n-    sp = MakeSpan(input);\n+    sp = input;\n     success = Const(\"\", sp); // empty\n     BOOST_CHECK(success);\n     BOOST_CHECK_EQUAL(SpanToStr(sp), \"MilkToastHoney\");\n@@ -1854,7 +1854,7 @@ BOOST_AUTO_TEST_CASE(test_spanparsing)\n \n     // Func(...): parse a function call, update span to argument if successful\n     input = \"Foo(Bar(xy,z()))\";\n-    sp = MakeSpan(input);\n+    sp = input;\n \n     success = Func(\"FooBar\", sp);\n     BOOST_CHECK(!success);\n@@ -1877,31 +1877,31 @@ BOOST_AUTO_TEST_CASE(test_spanparsing)\n     Span<const char> result;\n \n     input = \"(n*(n-1))/2\";\n-    sp = MakeSpan(input);\n+    sp = input;\n     result = Expr(sp);\n     BOOST_CHECK_EQUAL(SpanToStr(result), \"(n*(n-1))/2\");\n     BOOST_CHECK_EQUAL(SpanToStr(sp), \"\");\n \n     input = \"foo,bar\";\n-    sp = MakeSpan(input);\n+    sp = input;\n     result = Expr(sp);\n     BOOST_CHECK_EQUAL(SpanToStr(result), \"foo\");\n     BOOST_CHECK_EQUAL(SpanToStr(sp), \",bar\");\n \n     input = \"(aaaaa,bbbbb()),c\";\n-    sp = MakeSpan(input);\n+    sp = input;\n     result = Expr(sp);\n     BOOST_CHECK_EQUAL(SpanToStr(result), \"(aaaaa,bbbbb())\");\n     BOOST_CHECK_EQUAL(SpanToStr(sp), \",c\");\n \n     input = \"xyz)foo\";\n-    sp = MakeSpan(input);\n+    sp = input;\n     result = Expr(sp);\n     BOOST_CHECK_EQUAL(SpanToStr(result), \"xyz\");\n     BOOST_CHECK_EQUAL(SpanToStr(sp), \")foo\");\n \n     input = \"((a),(b),(c)),xxx\";\n-    sp = MakeSpan(input);\n+    sp = input;\n     result = Expr(sp);\n     BOOST_CHECK_EQUAL(SpanToStr(result), \"((a),(b),(c))\");\n     BOOST_CHECK_EQUAL(SpanToStr(sp), \",xxx\");\n@@ -1910,27 +1910,27 @@ BOOST_AUTO_TEST_CASE(test_spanparsing)\n     std::vector<Span<const char>> results;\n \n     input = \"xxx\";\n-    results = Split(MakeSpan(input), 'x');\n+    results = Split(input, 'x');\n     BOOST_CHECK_EQUAL(results.size(), 4U);\n     BOOST_CHECK_EQUAL(SpanToStr(results[0]), \"\");\n     BOOST_CHECK_EQUAL(SpanToStr(results[1]), \"\");\n     BOOST_CHECK_EQUAL(SpanToStr(results[2]), \"\");\n     BOOST_CHECK_EQUAL(SpanToStr(results[3]), \"\");\n \n     input = \"one#two#three\";\n-    results = Split(MakeSpan(input), '-');\n+    results = Split(input, '-');\n     BOOST_CHECK_EQUAL(results.size(), 1U);\n     BOOST_CHECK_EQUAL(SpanToStr(results[0]), \"one#two#three\");\n \n     input = \"one#two#three\";\n-    results = Split(MakeSpan(input), '#');\n+    results = Split(input, '#');\n     BOOST_CHECK_EQUAL(results.size(), 3U);\n     BOOST_CHECK_EQUAL(SpanToStr(results[0]), \"one\");\n     BOOST_CHECK_EQUAL(SpanToStr(results[1]), \"two\");\n     BOOST_CHECK_EQUAL(SpanToStr(results[2]), \"three\");\n \n     input = \"*foo*bar*\";\n-    results = Split(MakeSpan(input), '*');\n+    results = Split(input, '*');\n     BOOST_CHECK_EQUAL(results.size(), 4U);\n     BOOST_CHECK_EQUAL(SpanToStr(results[0]), \"\");\n     BOOST_CHECK_EQUAL(SpanToStr(results[1]), \"foo\");"
      }
    ]
  },
  {
    "sha": "83a425d25af033086744c1c8c892015014ed46bd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4M2E0MjVkMjVhZjAzMzA4Njc0NGMxYzhjODkyMDE1MDE0ZWQ0NmJk",
    "commit": {
      "author": {
        "name": "William Casarin",
        "email": "jb55@jb55.com",
        "date": "2020-05-02T00:31:38Z"
      },
      "committer": {
        "name": "William Casarin",
        "email": "jb55@jb55.com",
        "date": "2020-05-15T22:26:54Z"
      },
      "message": "compressor: use a prevector in compressed script serialization\n\nUse a prevector for stack allocation instead of heap allocation during\nscript compression and decompression. These functions were doing\nmillions of unnecessary heap allocations during IBD.\n\nWe introduce a CompressedScript type alias for this prevector. It is\nsize 33 as that is the maximum size of a compressed script.\n\nFix the DecompressScript header to match the variable name from\ncompressor.cpp\n\nSigned-off-by: William Casarin <jb55@jb55.com>",
      "tree": {
        "sha": "1fd1094b3c5c37aa900b49b496e0d1c40468b7b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1fd1094b3c5c37aa900b49b496e0d1c40468b7b6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/83a425d25af033086744c1c8c892015014ed46bd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/83a425d25af033086744c1c8c892015014ed46bd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/83a425d25af033086744c1c8c892015014ed46bd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/83a425d25af033086744c1c8c892015014ed46bd/comments",
    "author": {
      "login": "jb55",
      "id": 45598,
      "node_id": "MDQ6VXNlcjQ1NTk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/45598?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jb55",
      "html_url": "https://github.com/jb55",
      "followers_url": "https://api.github.com/users/jb55/followers",
      "following_url": "https://api.github.com/users/jb55/following{/other_user}",
      "gists_url": "https://api.github.com/users/jb55/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jb55/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jb55/subscriptions",
      "organizations_url": "https://api.github.com/users/jb55/orgs",
      "repos_url": "https://api.github.com/users/jb55/repos",
      "events_url": "https://api.github.com/users/jb55/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jb55/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jb55",
      "id": 45598,
      "node_id": "MDQ6VXNlcjQ1NTk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/45598?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jb55",
      "html_url": "https://github.com/jb55",
      "followers_url": "https://api.github.com/users/jb55/followers",
      "following_url": "https://api.github.com/users/jb55/following{/other_user}",
      "gists_url": "https://api.github.com/users/jb55/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jb55/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jb55/subscriptions",
      "organizations_url": "https://api.github.com/users/jb55/orgs",
      "repos_url": "https://api.github.com/users/jb55/repos",
      "events_url": "https://api.github.com/users/jb55/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jb55/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "844d2070a2c0106bb7a54be5cad7d4da4d9cd55e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/844d2070a2c0106bb7a54be5cad7d4da4d9cd55e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/844d2070a2c0106bb7a54be5cad7d4da4d9cd55e"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 27,
      "deletions": 13
    },
    "files": [
      {
        "sha": "ef3135e7a5d0b7a2802cea8ce88e837eb94d306b",
        "filename": "src/compressor.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/83a425d25af033086744c1c8c892015014ed46bd/src/compressor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/83a425d25af033086744c1c8c892015014ed46bd/src/compressor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compressor.cpp?ref=83a425d25af033086744c1c8c892015014ed46bd",
        "patch": "@@ -52,7 +52,7 @@ static bool IsToPubKey(const CScript& script, CPubKey &pubkey)\n     return false;\n }\n \n-bool CompressScript(const CScript& script, std::vector<unsigned char> &out)\n+bool CompressScript(const CScript& script, CompressedScript& out)\n {\n     CKeyID keyID;\n     if (IsToKeyID(script, keyID)) {\n@@ -92,7 +92,7 @@ unsigned int GetSpecialScriptSize(unsigned int nSize)\n     return 0;\n }\n \n-bool DecompressScript(CScript& script, unsigned int nSize, const std::vector<unsigned char> &in)\n+bool DecompressScript(CScript& script, unsigned int nSize, const CompressedScript& in)\n {\n     switch(nSize) {\n     case 0x00:"
      },
      {
        "sha": "40b2496f06e81c0eb345c830d4372bad87441146",
        "filename": "src/compressor.h",
        "status": "modified",
        "additions": 16,
        "deletions": 4,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/83a425d25af033086744c1c8c892015014ed46bd/src/compressor.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/83a425d25af033086744c1c8c892015014ed46bd/src/compressor.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compressor.h?ref=83a425d25af033086744c1c8c892015014ed46bd",
        "patch": "@@ -6,14 +6,26 @@\n #ifndef BITCOIN_COMPRESSOR_H\n #define BITCOIN_COMPRESSOR_H\n \n+#include <prevector.h>\n #include <primitives/transaction.h>\n #include <script/script.h>\n #include <serialize.h>\n #include <span.h>\n \n-bool CompressScript(const CScript& script, std::vector<unsigned char> &out);\n+/**\n+ * This saves us from making many heap allocations when serializing\n+ * and deserializing compressed scripts.\n+ *\n+ * This prevector size is determined by the largest .resize() in the\n+ * CompressScript function. The largest compressed script format is a\n+ * compressed public key, which is 33 bytes.\n+ */\n+using CompressedScript = prevector<33, unsigned char>;\n+\n+\n+bool CompressScript(const CScript& script, CompressedScript& out);\n unsigned int GetSpecialScriptSize(unsigned int nSize);\n-bool DecompressScript(CScript& script, unsigned int nSize, const std::vector<unsigned char> &out);\n+bool DecompressScript(CScript& script, unsigned int nSize, const CompressedScript& in);\n \n /**\n  * Compress amount.\n@@ -51,7 +63,7 @@ struct ScriptCompression\n \n     template<typename Stream>\n     void Ser(Stream &s, const CScript& script) {\n-        std::vector<unsigned char> compr;\n+        CompressedScript compr;\n         if (CompressScript(script, compr)) {\n             s << MakeSpan(compr);\n             return;\n@@ -66,7 +78,7 @@ struct ScriptCompression\n         unsigned int nSize = 0;\n         s >> VARINT(nSize);\n         if (nSize < nSpecialScripts) {\n-            std::vector<unsigned char> vch(GetSpecialScriptSize(nSize), 0x00);\n+            CompressedScript vch(GetSpecialScriptSize(nSize), 0x00);\n             s >> MakeSpan(vch);\n             DecompressScript(script, nSize, vch);\n             return;"
      },
      {
        "sha": "4bc301f583f373fd9754e7cb7c1d253c263d9a36",
        "filename": "src/test/compress_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/83a425d25af033086744c1c8c892015014ed46bd/src/test/compress_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/83a425d25af033086744c1c8c892015014ed46bd/src/test/compress_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/compress_tests.cpp?ref=83a425d25af033086744c1c8c892015014ed46bd",
        "patch": "@@ -72,7 +72,7 @@ BOOST_AUTO_TEST_CASE(compress_script_to_ckey_id)\n     CScript script = CScript() << OP_DUP << OP_HASH160 << ToByteVector(pubkey.GetID()) << OP_EQUALVERIFY << OP_CHECKSIG;\n     BOOST_CHECK_EQUAL(script.size(), 25);\n \n-    std::vector<unsigned char> out;\n+    CompressedScript out;\n     bool done = CompressScript(script, out);\n     BOOST_CHECK_EQUAL(done, true);\n \n@@ -89,7 +89,7 @@ BOOST_AUTO_TEST_CASE(compress_script_to_cscript_id)\n     script << OP_HASH160 << ToByteVector(CScriptID(redeemScript)) << OP_EQUAL;\n     BOOST_CHECK_EQUAL(script.size(), 23);\n \n-    std::vector<unsigned char> out;\n+    CompressedScript out;\n     bool done = CompressScript(script, out);\n     BOOST_CHECK_EQUAL(done, true);\n \n@@ -107,7 +107,7 @@ BOOST_AUTO_TEST_CASE(compress_script_to_compressed_pubkey_id)\n     CScript script = CScript() << ToByteVector(key.GetPubKey()) << OP_CHECKSIG; // COMPRESSED_PUBLIC_KEY_SIZE (33)\n     BOOST_CHECK_EQUAL(script.size(), 35);\n \n-    std::vector<unsigned char> out;\n+    CompressedScript out;\n     bool done = CompressScript(script, out);\n     BOOST_CHECK_EQUAL(done, true);\n \n@@ -124,7 +124,7 @@ BOOST_AUTO_TEST_CASE(compress_script_to_uncompressed_pubkey_id)\n     CScript script =  CScript() << ToByteVector(key.GetPubKey()) << OP_CHECKSIG; // PUBLIC_KEY_SIZE (65)\n     BOOST_CHECK_EQUAL(script.size(), 67);                   // 1 char code + 65 char pubkey + OP_CHECKSIG\n \n-    std::vector<unsigned char> out;\n+    CompressedScript out;\n     bool done = CompressScript(script, out);\n     BOOST_CHECK_EQUAL(done, true);\n "
      },
      {
        "sha": "63fff7d2ba279ac590370e12dadd66b5a851ff1a",
        "filename": "src/test/fuzz/script.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/83a425d25af033086744c1c8c892015014ed46bd/src/test/fuzz/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/83a425d25af033086744c1c8c892015014ed46bd/src/test/fuzz/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/script.cpp?ref=83a425d25af033086744c1c8c892015014ed46bd",
        "patch": "@@ -36,7 +36,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n     if (!script_opt) return;\n     const CScript script{*script_opt};\n \n-    std::vector<unsigned char> compressed;\n+    CompressedScript compressed;\n     if (CompressScript(script, compressed)) {\n         const unsigned int size = compressed[0];\n         compressed.erase(compressed.begin());\n@@ -94,10 +94,12 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n \n     {\n         const std::vector<uint8_t> bytes = ConsumeRandomLengthByteVector(fuzzed_data_provider);\n+        CompressedScript compressed_script;\n+        compressed_script.assign(bytes.begin(), bytes.end());\n         // DecompressScript(..., ..., bytes) is not guaranteed to be defined if the bytes vector is too short\n-        if (bytes.size() >= 32) {\n+        if (compressed_script.size() >= 32) {\n             CScript decompressed_script;\n-            DecompressScript(decompressed_script, fuzzed_data_provider.ConsumeIntegral<unsigned int>(), bytes);\n+            DecompressScript(decompressed_script, fuzzed_data_provider.ConsumeIntegral<unsigned int>(), compressed_script);\n         }\n     }\n "
      }
    ]
  },
  {
    "sha": "a6d8f9fd2848618a00b018adca02bff62cec4b4f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNmQ4ZjlmZDI4NDg2MThhMDBiMDE4YWRjYTAyYmZmNjJjZWM0YjRm",
    "commit": {
      "author": {
        "name": "William Casarin",
        "email": "jb55@jb55.com",
        "date": "2020-05-02T03:03:43Z"
      },
      "committer": {
        "name": "William Casarin",
        "email": "jb55@jb55.com",
        "date": "2020-05-16T01:09:26Z"
      },
      "message": "bloom: use Span instead of std::vector for `insert` and `contains`\n\nWe can avoid many unnecessary std::vector allocations by changing\nCBloomFilter to take Spans instead of std::vector's for the `insert`\nand `contains` operations.\n\nCBloomFilter currently converts types such as CDataStream and uint256\nto std::vector on `insert` and `contains`. This is unnecessary because\nCDataStreams and uint256 are already std::vectors internally. We just\nneed a way to point to the right data within those types. Span gives\nus this ability.\n\nSigned-off-by: William Casarin <jb55@jb55.com>",
      "tree": {
        "sha": "a247e1f3384fa9a876b72a0705ad57197763482f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a247e1f3384fa9a876b72a0705ad57197763482f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a6d8f9fd2848618a00b018adca02bff62cec4b4f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6d8f9fd2848618a00b018adca02bff62cec4b4f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a6d8f9fd2848618a00b018adca02bff62cec4b4f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6d8f9fd2848618a00b018adca02bff62cec4b4f/comments",
    "author": {
      "login": "jb55",
      "id": 45598,
      "node_id": "MDQ6VXNlcjQ1NTk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/45598?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jb55",
      "html_url": "https://github.com/jb55",
      "followers_url": "https://api.github.com/users/jb55/followers",
      "following_url": "https://api.github.com/users/jb55/following{/other_user}",
      "gists_url": "https://api.github.com/users/jb55/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jb55/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jb55/subscriptions",
      "organizations_url": "https://api.github.com/users/jb55/orgs",
      "repos_url": "https://api.github.com/users/jb55/repos",
      "events_url": "https://api.github.com/users/jb55/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jb55/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jb55",
      "id": 45598,
      "node_id": "MDQ6VXNlcjQ1NTk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/45598?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jb55",
      "html_url": "https://github.com/jb55",
      "followers_url": "https://api.github.com/users/jb55/followers",
      "following_url": "https://api.github.com/users/jb55/following{/other_user}",
      "gists_url": "https://api.github.com/users/jb55/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jb55/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jb55/subscriptions",
      "organizations_url": "https://api.github.com/users/jb55/orgs",
      "repos_url": "https://api.github.com/users/jb55/repos",
      "events_url": "https://api.github.com/users/jb55/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jb55/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2676aeadfa0e43dcaaccc4720623cdfe0beed528",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2676aeadfa0e43dcaaccc4720623cdfe0beed528",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2676aeadfa0e43dcaaccc4720623cdfe0beed528"
      }
    ],
    "stats": {
      "total": 54,
      "additions": 26,
      "deletions": 28
    },
    "files": [
      {
        "sha": "02b8334117372ebfb08181b936defbb1a1c5cb42",
        "filename": "src/bloom.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 18,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6d8f9fd2848618a00b018adca02bff62cec4b4f/src/bloom.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6d8f9fd2848618a00b018adca02bff62cec4b4f/src/bloom.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.cpp?ref=a6d8f9fd2848618a00b018adca02bff62cec4b4f",
        "patch": "@@ -37,13 +37,13 @@ CBloomFilter::CBloomFilter(const unsigned int nElements, const double nFPRate, c\n {\n }\n \n-inline unsigned int CBloomFilter::Hash(unsigned int nHashNum, const std::vector<unsigned char>& vDataToHash) const\n+inline unsigned int CBloomFilter::Hash(unsigned int nHashNum, const Span<const unsigned char>& vDataToHash) const\n {\n     // 0xFBA4C795 chosen as it guarantees a reasonable bit difference between nHashNum values.\n     return MurmurHash3(nHashNum * 0xFBA4C795 + nTweak, vDataToHash) % (vData.size() * 8);\n }\n \n-void CBloomFilter::insert(const std::vector<unsigned char>& vKey)\n+void CBloomFilter::insert(const Span<const unsigned char>& vKey)\n {\n     if (vData.empty()) // Avoid divide-by-zero (CVE-2013-5700)\n         return;\n@@ -59,17 +59,15 @@ void CBloomFilter::insert(const COutPoint& outpoint)\n {\n     CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n     stream << outpoint;\n-    std::vector<unsigned char> data(stream.begin(), stream.end());\n-    insert(data);\n+    insert(Span<const unsigned char>((const unsigned char*)stream.data(), stream.size()));\n }\n \n void CBloomFilter::insert(const uint256& hash)\n {\n-    std::vector<unsigned char> data(hash.begin(), hash.end());\n-    insert(data);\n+    insert(Span<const unsigned char>(hash.begin(), hash.end()));\n }\n \n-bool CBloomFilter::contains(const std::vector<unsigned char>& vKey) const\n+bool CBloomFilter::contains(const Span<const unsigned char>& vKey) const\n {\n     if (vData.empty()) // Avoid divide-by-zero (CVE-2013-5700)\n         return true;\n@@ -87,14 +85,13 @@ bool CBloomFilter::contains(const COutPoint& outpoint) const\n {\n     CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n     stream << outpoint;\n-    std::vector<unsigned char> data(stream.begin(), stream.end());\n-    return contains(data);\n+    return contains(Span<const unsigned char>((const unsigned char*)stream.data(),\n+        stream.size()));\n }\n \n bool CBloomFilter::contains(const uint256& hash) const\n {\n-    std::vector<unsigned char> data(hash.begin(), hash.end());\n-    return contains(data);\n+    return contains(Span<const unsigned char>(hash.begin(), hash.end()));\n }\n \n bool CBloomFilter::IsWithinSizeConstraints() const\n@@ -198,7 +195,8 @@ CRollingBloomFilter::CRollingBloomFilter(const unsigned int nElements, const dou\n }\n \n /* Similar to CBloomFilter::Hash */\n-static inline uint32_t RollingBloomHash(unsigned int nHashNum, uint32_t nTweak, const std::vector<unsigned char>& vDataToHash) {\n+static inline uint32_t RollingBloomHash(unsigned int nHashNum, uint32_t nTweak, const Span<const unsigned char>& vDataToHash)\n+{\n     return MurmurHash3(nHashNum * 0xFBA4C795 + nTweak, vDataToHash);\n }\n \n@@ -210,7 +208,7 @@ static inline uint32_t FastMod(uint32_t x, size_t n) {\n     return ((uint64_t)x * (uint64_t)n) >> 32;\n }\n \n-void CRollingBloomFilter::insert(const std::vector<unsigned char>& vKey)\n+void CRollingBloomFilter::insert(const Span<const unsigned char>& vKey)\n {\n     if (nEntriesThisGeneration == nEntriesPerGeneration) {\n         nEntriesThisGeneration = 0;\n@@ -243,11 +241,10 @@ void CRollingBloomFilter::insert(const std::vector<unsigned char>& vKey)\n \n void CRollingBloomFilter::insert(const uint256& hash)\n {\n-    std::vector<unsigned char> vData(hash.begin(), hash.end());\n-    insert(vData);\n+    insert(Span<const unsigned char>(hash.begin(), hash.end()));\n }\n \n-bool CRollingBloomFilter::contains(const std::vector<unsigned char>& vKey) const\n+bool CRollingBloomFilter::contains(const Span<const unsigned char>& vKey) const\n {\n     for (int n = 0; n < nHashFuncs; n++) {\n         uint32_t h = RollingBloomHash(n, nTweak, vKey);\n@@ -263,8 +260,7 @@ bool CRollingBloomFilter::contains(const std::vector<unsigned char>& vKey) const\n \n bool CRollingBloomFilter::contains(const uint256& hash) const\n {\n-    std::vector<unsigned char> vData(hash.begin(), hash.end());\n-    return contains(vData);\n+    return contains(Span<const unsigned char>(hash.begin(), hash.end()));\n }\n \n void CRollingBloomFilter::reset()"
      },
      {
        "sha": "7defb5eb778ec78061dbddab5c159bd01b5521fb",
        "filename": "src/bloom.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6d8f9fd2848618a00b018adca02bff62cec4b4f/src/bloom.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6d8f9fd2848618a00b018adca02bff62cec4b4f/src/bloom.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.h?ref=a6d8f9fd2848618a00b018adca02bff62cec4b4f",
        "patch": "@@ -49,7 +49,7 @@ class CBloomFilter\n     unsigned int nTweak;\n     unsigned char nFlags;\n \n-    unsigned int Hash(unsigned int nHashNum, const std::vector<unsigned char>& vDataToHash) const;\n+    unsigned int Hash(unsigned int nHashNum, const Span<const unsigned char>& vDataToHash) const;\n \n public:\n     /**\n@@ -74,11 +74,11 @@ class CBloomFilter\n         READWRITE(nFlags);\n     }\n \n-    void insert(const std::vector<unsigned char>& vKey);\n+    void insert(const Span<const unsigned char>& vKey);\n     void insert(const COutPoint& outpoint);\n     void insert(const uint256& hash);\n \n-    bool contains(const std::vector<unsigned char>& vKey) const;\n+    bool contains(const Span<const unsigned char>& vKey) const;\n     bool contains(const COutPoint& outpoint) const;\n     bool contains(const uint256& hash) const;\n \n@@ -109,9 +109,9 @@ class CRollingBloomFilter\n public:\n     CRollingBloomFilter(const unsigned int nElements, const double nFPRate);\n \n-    void insert(const std::vector<unsigned char>& vKey);\n+    void insert(const Span<const unsigned char>& vKey);\n     void insert(const uint256& hash);\n-    bool contains(const std::vector<unsigned char>& vKey) const;\n+    bool contains(const Span<const unsigned char>& vKey) const;\n     bool contains(const uint256& hash) const;\n \n     void reset();"
      },
      {
        "sha": "d3360b6f8f755c81e8f16b7904751b04d5d0181f",
        "filename": "src/hash.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6d8f9fd2848618a00b018adca02bff62cec4b4f/src/hash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6d8f9fd2848618a00b018adca02bff62cec4b4f/src/hash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.cpp?ref=a6d8f9fd2848618a00b018adca02bff62cec4b4f",
        "patch": "@@ -2,17 +2,18 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <hash.h>\n #include <crypto/common.h>\n #include <crypto/hmac_sha512.h>\n+#include <hash.h>\n+#include <span.h>\n \n \n inline uint32_t ROTL32(uint32_t x, int8_t r)\n {\n     return (x << r) | (x >> (32 - r));\n }\n \n-unsigned int MurmurHash3(unsigned int nHashSeed, const std::vector<unsigned char>& vDataToHash)\n+unsigned int MurmurHash3(unsigned int nHashSeed, const Span<const unsigned char>& vDataToHash)\n {\n     // The following is MurmurHash3 (x86_32), see http://code.google.com/p/smhasher/source/browse/trunk/MurmurHash3.cpp\n     uint32_t h1 = nHashSeed;"
      },
      {
        "sha": "be6d4320e4f12364c49be0570cef769b3aea4300",
        "filename": "src/hash.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6d8f9fd2848618a00b018adca02bff62cec4b4f/src/hash.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6d8f9fd2848618a00b018adca02bff62cec4b4f/src/hash.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.h?ref=a6d8f9fd2848618a00b018adca02bff62cec4b4f",
        "patch": "@@ -200,7 +200,7 @@ uint256 SerializeHash(const T& obj, int nType=SER_GETHASH, int nVersion=PROTOCOL\n     return ss.GetHash();\n }\n \n-unsigned int MurmurHash3(unsigned int nHashSeed, const std::vector<unsigned char>& vDataToHash);\n+unsigned int MurmurHash3(unsigned int nHashSeed, const Span<const unsigned char>& vDataToHash);\n \n void BIP32Hash(const ChainCode &chainCode, unsigned int nChild, unsigned char header, const unsigned char data[32], unsigned char output[64]);\n "
      },
      {
        "sha": "0f117d57bee2b920a6f39a8740c55469397ac757",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6d8f9fd2848618a00b018adca02bff62cec4b4f/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6d8f9fd2848618a00b018adca02bff62cec4b4f/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=a6d8f9fd2848618a00b018adca02bff62cec4b4f",
        "patch": "@@ -14,11 +14,12 @@\n #include <crypto/siphash.h>\n #include <hash.h>\n #include <limitedmap.h>\n-#include <netaddress.h>\n #include <net_permissions.h>\n+#include <netaddress.h>\n #include <policy/feerate.h>\n #include <protocol.h>\n #include <random.h>\n+#include <span.h>\n #include <streams.h>\n #include <sync.h>\n #include <threadinterrupt.h>"
      },
      {
        "sha": "1ad560742970ea44bad89cf007f158b0d4cb5ae4",
        "filename": "src/test/bloom_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6d8f9fd2848618a00b018adca02bff62cec4b4f/src/test/bloom_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6d8f9fd2848618a00b018adca02bff62cec4b4f/src/test/bloom_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bloom_tests.cpp?ref=a6d8f9fd2848618a00b018adca02bff62cec4b4f",
        "patch": "@@ -91,7 +91,7 @@ BOOST_AUTO_TEST_CASE(bloom_create_insert_key)\n     CBloomFilter filter(2, 0.001, 0, BLOOM_UPDATE_ALL);\n     filter.insert(vchPubKey);\n     uint160 hash = pubkey.GetID();\n-    filter.insert(std::vector<unsigned char>(hash.begin(), hash.end()));\n+    filter.insert(Span<unsigned char>(hash.begin(), hash.end()));\n \n     CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n     stream << filter;"
      }
    ]
  },
  {
    "sha": "561f045ee4b9e5792976ead09b6840f1a77de7b9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NjFmMDQ1ZWU0YjllNTc5Mjk3NmVhZDA5YjY4NDBmMWE3N2RlN2I5",
    "commit": {
      "author": {
        "name": "William Casarin",
        "email": "jb55@jb55.com",
        "date": "2020-05-16T16:15:30Z"
      },
      "committer": {
        "name": "William Casarin",
        "email": "jb55@jb55.com",
        "date": "2020-05-16T16:18:30Z"
      },
      "message": "netaddress: fix indentation in CService::GetKey [moveonly]\n\nAlso run clang formatter to reorder imports\n\nSigned-off-by: William Casarin <jb55@jb55.com>",
      "tree": {
        "sha": "14b6612cbd8394ecd875a919ef89a7a6816d1f20",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/14b6612cbd8394ecd875a919ef89a7a6816d1f20"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/561f045ee4b9e5792976ead09b6840f1a77de7b9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/561f045ee4b9e5792976ead09b6840f1a77de7b9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/561f045ee4b9e5792976ead09b6840f1a77de7b9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/561f045ee4b9e5792976ead09b6840f1a77de7b9/comments",
    "author": {
      "login": "jb55",
      "id": 45598,
      "node_id": "MDQ6VXNlcjQ1NTk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/45598?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jb55",
      "html_url": "https://github.com/jb55",
      "followers_url": "https://api.github.com/users/jb55/followers",
      "following_url": "https://api.github.com/users/jb55/following{/other_user}",
      "gists_url": "https://api.github.com/users/jb55/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jb55/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jb55/subscriptions",
      "organizations_url": "https://api.github.com/users/jb55/orgs",
      "repos_url": "https://api.github.com/users/jb55/repos",
      "events_url": "https://api.github.com/users/jb55/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jb55/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jb55",
      "id": 45598,
      "node_id": "MDQ6VXNlcjQ1NTk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/45598?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jb55",
      "html_url": "https://github.com/jb55",
      "followers_url": "https://api.github.com/users/jb55/followers",
      "following_url": "https://api.github.com/users/jb55/following{/other_user}",
      "gists_url": "https://api.github.com/users/jb55/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jb55/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jb55/subscriptions",
      "organizations_url": "https://api.github.com/users/jb55/orgs",
      "repos_url": "https://api.github.com/users/jb55/repos",
      "events_url": "https://api.github.com/users/jb55/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jb55/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a6d8f9fd2848618a00b018adca02bff62cec4b4f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6d8f9fd2848618a00b018adca02bff62cec4b4f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a6d8f9fd2848618a00b018adca02bff62cec4b4f"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 10,
      "deletions": 9
    },
    "files": [
      {
        "sha": "8c3d303c337fa07d64d6ef5d6fa52fe4617d6c75",
        "filename": "src/netaddress.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 9,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/561f045ee4b9e5792976ead09b6840f1a77de7b9/src/netaddress.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/561f045ee4b9e5792976ead09b6840f1a77de7b9/src/netaddress.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.cpp?ref=561f045ee4b9e5792976ead09b6840f1a77de7b9",
        "patch": "@@ -3,11 +3,12 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <netaddress.h>\n #include <hash.h>\n-#include <util/strencodings.h>\n-#include <util/asmap.h>\n+#include <netaddress.h>\n+#include <prevector.h>\n #include <tinyformat.h>\n+#include <util/asmap.h>\n+#include <util/strencodings.h>\n \n static const unsigned char pchIPv4[12] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xff, 0xff };\n static const unsigned char pchOnionCat[] = {0xFD,0x87,0xD8,0x7E,0xEB,0x43};\n@@ -725,12 +726,12 @@ bool CService::GetSockAddr(struct sockaddr* paddr, socklen_t *addrlen) const\n  */\n std::vector<unsigned char> CService::GetKey() const\n {\n-     std::vector<unsigned char> vKey;\n-     vKey.resize(18);\n-     memcpy(vKey.data(), ip, 16);\n-     vKey[16] = port / 0x100; // most significant byte of our port\n-     vKey[17] = port & 0x0FF; // least significant byte of our port\n-     return vKey;\n+    std::vector<unsigned char> vKey;\n+    vKey.resize(18);\n+    memcpy(vKey.data(), ip, 16);\n+    vKey[16] = port / 0x100; // most significant byte of our port\n+    vKey[17] = port & 0x0FF; // least significant byte of our port\n+    return vKey;\n }\n \n std::string CService::ToStringPort() const"
      }
    ]
  },
  {
    "sha": "102761516ebba436eff424b6c4cf8af57d9c8da7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMDI3NjE1MTZlYmJhNDM2ZWZmNDI0YjZjNGNmOGFmNTdkOWM4ZGE3",
    "commit": {
      "author": {
        "name": "William Casarin",
        "email": "jb55@jb55.com",
        "date": "2020-05-02T03:16:05Z"
      },
      "committer": {
        "name": "William Casarin",
        "email": "jb55@jb55.com",
        "date": "2020-05-16T16:55:39Z"
      },
      "message": "netaddress: return a prevector from CService::GetKey()\n\nAvoid heap allocations in CService::GetKey by returning a prevector\ninstead of a std::vector. This method gets called many times, so\npassing via stack helps avoid heap thrashing.\n\nSigned-off-by: William Casarin <jb55@jb55.com>",
      "tree": {
        "sha": "c4b5da3ee4d9ad37b979345023bb5baccacade65",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c4b5da3ee4d9ad37b979345023bb5baccacade65"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/102761516ebba436eff424b6c4cf8af57d9c8da7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/102761516ebba436eff424b6c4cf8af57d9c8da7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/102761516ebba436eff424b6c4cf8af57d9c8da7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/102761516ebba436eff424b6c4cf8af57d9c8da7/comments",
    "author": {
      "login": "jb55",
      "id": 45598,
      "node_id": "MDQ6VXNlcjQ1NTk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/45598?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jb55",
      "html_url": "https://github.com/jb55",
      "followers_url": "https://api.github.com/users/jb55/followers",
      "following_url": "https://api.github.com/users/jb55/following{/other_user}",
      "gists_url": "https://api.github.com/users/jb55/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jb55/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jb55/subscriptions",
      "organizations_url": "https://api.github.com/users/jb55/orgs",
      "repos_url": "https://api.github.com/users/jb55/repos",
      "events_url": "https://api.github.com/users/jb55/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jb55/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jb55",
      "id": 45598,
      "node_id": "MDQ6VXNlcjQ1NTk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/45598?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jb55",
      "html_url": "https://github.com/jb55",
      "followers_url": "https://api.github.com/users/jb55/followers",
      "following_url": "https://api.github.com/users/jb55/following{/other_user}",
      "gists_url": "https://api.github.com/users/jb55/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jb55/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jb55/subscriptions",
      "organizations_url": "https://api.github.com/users/jb55/orgs",
      "repos_url": "https://api.github.com/users/jb55/repos",
      "events_url": "https://api.github.com/users/jb55/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jb55/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "561f045ee4b9e5792976ead09b6840f1a77de7b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/561f045ee4b9e5792976ead09b6840f1a77de7b9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/561f045ee4b9e5792976ead09b6840f1a77de7b9"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 5,
      "deletions": 3
    },
    "files": [
      {
        "sha": "8886727e57a732c8c174efe57466b110b1ffce65",
        "filename": "src/netaddress.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/102761516ebba436eff424b6c4cf8af57d9c8da7/src/netaddress.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/102761516ebba436eff424b6c4cf8af57d9c8da7/src/netaddress.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.cpp?ref=102761516ebba436eff424b6c4cf8af57d9c8da7",
        "patch": "@@ -724,9 +724,9 @@ bool CService::GetSockAddr(struct sockaddr* paddr, socklen_t *addrlen) const\n /**\n  * @returns An identifier unique to this service's address and port number.\n  */\n-std::vector<unsigned char> CService::GetKey() const\n+ServiceKey CService::GetKey() const\n {\n-    std::vector<unsigned char> vKey;\n+    ServiceKey vKey;\n     vKey.resize(18);\n     memcpy(vKey.data(), ip, 16);\n     vKey[16] = port / 0x100; // most significant byte of our port"
      },
      {
        "sha": "f1aac53b5fd28355b045951605c06e018840b7b4",
        "filename": "src/netaddress.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/102761516ebba436eff424b6c4cf8af57d9c8da7/src/netaddress.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/102761516ebba436eff424b6c4cf8af57d9c8da7/src/netaddress.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.h?ref=102761516ebba436eff424b6c4cf8af57d9c8da7",
        "patch": "@@ -146,6 +146,8 @@ class CSubNet\n         }\n };\n \n+using ServiceKey = prevector<18, unsigned char>;\n+\n /** A combination of a network address (CNetAddr) and a (TCP) port */\n class CService : public CNetAddr\n {\n@@ -163,7 +165,7 @@ class CService : public CNetAddr\n         friend bool operator==(const CService& a, const CService& b);\n         friend bool operator!=(const CService& a, const CService& b) { return !(a == b); }\n         friend bool operator<(const CService& a, const CService& b);\n-        std::vector<unsigned char> GetKey() const;\n+        ServiceKey GetKey() const;\n         std::string ToString() const;\n         std::string ToStringPort() const;\n         std::string ToStringIPPort() const;"
      }
    ]
  },
  {
    "sha": "8b88fcba80e51c8b8581144fd919b8cc9396066b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4Yjg4ZmNiYTgwZTUxYzhiODU4MTE0NGZkOTE5YjhjYzkzOTYwNjZi",
    "commit": {
      "author": {
        "name": "William Casarin",
        "email": "jb55@jb55.com",
        "date": "2020-05-21T04:19:28Z"
      },
      "committer": {
        "name": "William Casarin",
        "email": "jb55@jb55.com",
        "date": "2020-05-21T04:19:28Z"
      },
      "message": "Merge branches '2020-05-compresscript-prevector' and '2020-05-servicekey-prevector' into zeroalloc",
      "tree": {
        "sha": "4c633d07728f1e25bd680fa4bc45d9b46613279b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4c633d07728f1e25bd680fa4bc45d9b46613279b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8b88fcba80e51c8b8581144fd919b8cc9396066b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b88fcba80e51c8b8581144fd919b8cc9396066b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8b88fcba80e51c8b8581144fd919b8cc9396066b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b88fcba80e51c8b8581144fd919b8cc9396066b/comments",
    "author": {
      "login": "jb55",
      "id": 45598,
      "node_id": "MDQ6VXNlcjQ1NTk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/45598?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jb55",
      "html_url": "https://github.com/jb55",
      "followers_url": "https://api.github.com/users/jb55/followers",
      "following_url": "https://api.github.com/users/jb55/following{/other_user}",
      "gists_url": "https://api.github.com/users/jb55/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jb55/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jb55/subscriptions",
      "organizations_url": "https://api.github.com/users/jb55/orgs",
      "repos_url": "https://api.github.com/users/jb55/repos",
      "events_url": "https://api.github.com/users/jb55/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jb55/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jb55",
      "id": 45598,
      "node_id": "MDQ6VXNlcjQ1NTk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/45598?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jb55",
      "html_url": "https://github.com/jb55",
      "followers_url": "https://api.github.com/users/jb55/followers",
      "following_url": "https://api.github.com/users/jb55/following{/other_user}",
      "gists_url": "https://api.github.com/users/jb55/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jb55/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jb55/subscriptions",
      "organizations_url": "https://api.github.com/users/jb55/orgs",
      "repos_url": "https://api.github.com/users/jb55/repos",
      "events_url": "https://api.github.com/users/jb55/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jb55/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3eda7ea9ba724bfa53ad6f4f63af85fccb46da00",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3eda7ea9ba724bfa53ad6f4f63af85fccb46da00",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3eda7ea9ba724bfa53ad6f4f63af85fccb46da00"
      },
      {
        "sha": "83a425d25af033086744c1c8c892015014ed46bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/83a425d25af033086744c1c8c892015014ed46bd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/83a425d25af033086744c1c8c892015014ed46bd"
      },
      {
        "sha": "102761516ebba436eff424b6c4cf8af57d9c8da7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/102761516ebba436eff424b6c4cf8af57d9c8da7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/102761516ebba436eff424b6c4cf8af57d9c8da7"
      }
    ],
    "stats": {
      "total": 223,
      "additions": 130,
      "deletions": 93
    },
    "files": [
      {
        "sha": "02b8334117372ebfb08181b936defbb1a1c5cb42",
        "filename": "src/bloom.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 18,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b88fcba80e51c8b8581144fd919b8cc9396066b/src/bloom.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b88fcba80e51c8b8581144fd919b8cc9396066b/src/bloom.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.cpp?ref=8b88fcba80e51c8b8581144fd919b8cc9396066b",
        "patch": "@@ -37,13 +37,13 @@ CBloomFilter::CBloomFilter(const unsigned int nElements, const double nFPRate, c\n {\n }\n \n-inline unsigned int CBloomFilter::Hash(unsigned int nHashNum, const std::vector<unsigned char>& vDataToHash) const\n+inline unsigned int CBloomFilter::Hash(unsigned int nHashNum, const Span<const unsigned char>& vDataToHash) const\n {\n     // 0xFBA4C795 chosen as it guarantees a reasonable bit difference between nHashNum values.\n     return MurmurHash3(nHashNum * 0xFBA4C795 + nTweak, vDataToHash) % (vData.size() * 8);\n }\n \n-void CBloomFilter::insert(const std::vector<unsigned char>& vKey)\n+void CBloomFilter::insert(const Span<const unsigned char>& vKey)\n {\n     if (vData.empty()) // Avoid divide-by-zero (CVE-2013-5700)\n         return;\n@@ -59,17 +59,15 @@ void CBloomFilter::insert(const COutPoint& outpoint)\n {\n     CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n     stream << outpoint;\n-    std::vector<unsigned char> data(stream.begin(), stream.end());\n-    insert(data);\n+    insert(Span<const unsigned char>((const unsigned char*)stream.data(), stream.size()));\n }\n \n void CBloomFilter::insert(const uint256& hash)\n {\n-    std::vector<unsigned char> data(hash.begin(), hash.end());\n-    insert(data);\n+    insert(Span<const unsigned char>(hash.begin(), hash.end()));\n }\n \n-bool CBloomFilter::contains(const std::vector<unsigned char>& vKey) const\n+bool CBloomFilter::contains(const Span<const unsigned char>& vKey) const\n {\n     if (vData.empty()) // Avoid divide-by-zero (CVE-2013-5700)\n         return true;\n@@ -87,14 +85,13 @@ bool CBloomFilter::contains(const COutPoint& outpoint) const\n {\n     CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n     stream << outpoint;\n-    std::vector<unsigned char> data(stream.begin(), stream.end());\n-    return contains(data);\n+    return contains(Span<const unsigned char>((const unsigned char*)stream.data(),\n+        stream.size()));\n }\n \n bool CBloomFilter::contains(const uint256& hash) const\n {\n-    std::vector<unsigned char> data(hash.begin(), hash.end());\n-    return contains(data);\n+    return contains(Span<const unsigned char>(hash.begin(), hash.end()));\n }\n \n bool CBloomFilter::IsWithinSizeConstraints() const\n@@ -198,7 +195,8 @@ CRollingBloomFilter::CRollingBloomFilter(const unsigned int nElements, const dou\n }\n \n /* Similar to CBloomFilter::Hash */\n-static inline uint32_t RollingBloomHash(unsigned int nHashNum, uint32_t nTweak, const std::vector<unsigned char>& vDataToHash) {\n+static inline uint32_t RollingBloomHash(unsigned int nHashNum, uint32_t nTweak, const Span<const unsigned char>& vDataToHash)\n+{\n     return MurmurHash3(nHashNum * 0xFBA4C795 + nTweak, vDataToHash);\n }\n \n@@ -210,7 +208,7 @@ static inline uint32_t FastMod(uint32_t x, size_t n) {\n     return ((uint64_t)x * (uint64_t)n) >> 32;\n }\n \n-void CRollingBloomFilter::insert(const std::vector<unsigned char>& vKey)\n+void CRollingBloomFilter::insert(const Span<const unsigned char>& vKey)\n {\n     if (nEntriesThisGeneration == nEntriesPerGeneration) {\n         nEntriesThisGeneration = 0;\n@@ -243,11 +241,10 @@ void CRollingBloomFilter::insert(const std::vector<unsigned char>& vKey)\n \n void CRollingBloomFilter::insert(const uint256& hash)\n {\n-    std::vector<unsigned char> vData(hash.begin(), hash.end());\n-    insert(vData);\n+    insert(Span<const unsigned char>(hash.begin(), hash.end()));\n }\n \n-bool CRollingBloomFilter::contains(const std::vector<unsigned char>& vKey) const\n+bool CRollingBloomFilter::contains(const Span<const unsigned char>& vKey) const\n {\n     for (int n = 0; n < nHashFuncs; n++) {\n         uint32_t h = RollingBloomHash(n, nTweak, vKey);\n@@ -263,8 +260,7 @@ bool CRollingBloomFilter::contains(const std::vector<unsigned char>& vKey) const\n \n bool CRollingBloomFilter::contains(const uint256& hash) const\n {\n-    std::vector<unsigned char> vData(hash.begin(), hash.end());\n-    return contains(vData);\n+    return contains(Span<const unsigned char>(hash.begin(), hash.end()));\n }\n \n void CRollingBloomFilter::reset()"
      },
      {
        "sha": "a998e4fc5b0917f303dbd1ec6bfb9c044c6018b3",
        "filename": "src/bloom.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b88fcba80e51c8b8581144fd919b8cc9396066b/src/bloom.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b88fcba80e51c8b8581144fd919b8cc9396066b/src/bloom.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.h?ref=8b88fcba80e51c8b8581144fd919b8cc9396066b",
        "patch": "@@ -49,7 +49,7 @@ class CBloomFilter\n     unsigned int nTweak;\n     unsigned char nFlags;\n \n-    unsigned int Hash(unsigned int nHashNum, const std::vector<unsigned char>& vDataToHash) const;\n+    unsigned int Hash(unsigned int nHashNum, const Span<const unsigned char>& vDataToHash) const;\n \n public:\n     /**\n@@ -66,11 +66,11 @@ class CBloomFilter\n \n     SERIALIZE_METHODS(CBloomFilter, obj) { READWRITE(obj.vData, obj.nHashFuncs, obj.nTweak, obj.nFlags); }\n \n-    void insert(const std::vector<unsigned char>& vKey);\n+    void insert(const Span<const unsigned char>& vKey);\n     void insert(const COutPoint& outpoint);\n     void insert(const uint256& hash);\n \n-    bool contains(const std::vector<unsigned char>& vKey) const;\n+    bool contains(const Span<const unsigned char>& vKey) const;\n     bool contains(const COutPoint& outpoint) const;\n     bool contains(const uint256& hash) const;\n \n@@ -101,9 +101,9 @@ class CRollingBloomFilter\n public:\n     CRollingBloomFilter(const unsigned int nElements, const double nFPRate);\n \n-    void insert(const std::vector<unsigned char>& vKey);\n+    void insert(const Span<const unsigned char>& vKey);\n     void insert(const uint256& hash);\n-    bool contains(const std::vector<unsigned char>& vKey) const;\n+    bool contains(const Span<const unsigned char>& vKey) const;\n     bool contains(const uint256& hash) const;\n \n     void reset();"
      },
      {
        "sha": "ef3135e7a5d0b7a2802cea8ce88e837eb94d306b",
        "filename": "src/compressor.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b88fcba80e51c8b8581144fd919b8cc9396066b/src/compressor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b88fcba80e51c8b8581144fd919b8cc9396066b/src/compressor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compressor.cpp?ref=8b88fcba80e51c8b8581144fd919b8cc9396066b",
        "patch": "@@ -52,7 +52,7 @@ static bool IsToPubKey(const CScript& script, CPubKey &pubkey)\n     return false;\n }\n \n-bool CompressScript(const CScript& script, std::vector<unsigned char> &out)\n+bool CompressScript(const CScript& script, CompressedScript& out)\n {\n     CKeyID keyID;\n     if (IsToKeyID(script, keyID)) {\n@@ -92,7 +92,7 @@ unsigned int GetSpecialScriptSize(unsigned int nSize)\n     return 0;\n }\n \n-bool DecompressScript(CScript& script, unsigned int nSize, const std::vector<unsigned char> &in)\n+bool DecompressScript(CScript& script, unsigned int nSize, const CompressedScript& in)\n {\n     switch(nSize) {\n     case 0x00:"
      },
      {
        "sha": "40b2496f06e81c0eb345c830d4372bad87441146",
        "filename": "src/compressor.h",
        "status": "modified",
        "additions": 16,
        "deletions": 4,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b88fcba80e51c8b8581144fd919b8cc9396066b/src/compressor.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b88fcba80e51c8b8581144fd919b8cc9396066b/src/compressor.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compressor.h?ref=8b88fcba80e51c8b8581144fd919b8cc9396066b",
        "patch": "@@ -6,14 +6,26 @@\n #ifndef BITCOIN_COMPRESSOR_H\n #define BITCOIN_COMPRESSOR_H\n \n+#include <prevector.h>\n #include <primitives/transaction.h>\n #include <script/script.h>\n #include <serialize.h>\n #include <span.h>\n \n-bool CompressScript(const CScript& script, std::vector<unsigned char> &out);\n+/**\n+ * This saves us from making many heap allocations when serializing\n+ * and deserializing compressed scripts.\n+ *\n+ * This prevector size is determined by the largest .resize() in the\n+ * CompressScript function. The largest compressed script format is a\n+ * compressed public key, which is 33 bytes.\n+ */\n+using CompressedScript = prevector<33, unsigned char>;\n+\n+\n+bool CompressScript(const CScript& script, CompressedScript& out);\n unsigned int GetSpecialScriptSize(unsigned int nSize);\n-bool DecompressScript(CScript& script, unsigned int nSize, const std::vector<unsigned char> &out);\n+bool DecompressScript(CScript& script, unsigned int nSize, const CompressedScript& in);\n \n /**\n  * Compress amount.\n@@ -51,7 +63,7 @@ struct ScriptCompression\n \n     template<typename Stream>\n     void Ser(Stream &s, const CScript& script) {\n-        std::vector<unsigned char> compr;\n+        CompressedScript compr;\n         if (CompressScript(script, compr)) {\n             s << MakeSpan(compr);\n             return;\n@@ -66,7 +78,7 @@ struct ScriptCompression\n         unsigned int nSize = 0;\n         s >> VARINT(nSize);\n         if (nSize < nSpecialScripts) {\n-            std::vector<unsigned char> vch(GetSpecialScriptSize(nSize), 0x00);\n+            CompressedScript vch(GetSpecialScriptSize(nSize), 0x00);\n             s >> MakeSpan(vch);\n             DecompressScript(script, nSize, vch);\n             return;"
      },
      {
        "sha": "d3360b6f8f755c81e8f16b7904751b04d5d0181f",
        "filename": "src/hash.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b88fcba80e51c8b8581144fd919b8cc9396066b/src/hash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b88fcba80e51c8b8581144fd919b8cc9396066b/src/hash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.cpp?ref=8b88fcba80e51c8b8581144fd919b8cc9396066b",
        "patch": "@@ -2,17 +2,18 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <hash.h>\n #include <crypto/common.h>\n #include <crypto/hmac_sha512.h>\n+#include <hash.h>\n+#include <span.h>\n \n \n inline uint32_t ROTL32(uint32_t x, int8_t r)\n {\n     return (x << r) | (x >> (32 - r));\n }\n \n-unsigned int MurmurHash3(unsigned int nHashSeed, const std::vector<unsigned char>& vDataToHash)\n+unsigned int MurmurHash3(unsigned int nHashSeed, const Span<const unsigned char>& vDataToHash)\n {\n     // The following is MurmurHash3 (x86_32), see http://code.google.com/p/smhasher/source/browse/trunk/MurmurHash3.cpp\n     uint32_t h1 = nHashSeed;"
      },
      {
        "sha": "be6d4320e4f12364c49be0570cef769b3aea4300",
        "filename": "src/hash.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b88fcba80e51c8b8581144fd919b8cc9396066b/src/hash.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b88fcba80e51c8b8581144fd919b8cc9396066b/src/hash.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.h?ref=8b88fcba80e51c8b8581144fd919b8cc9396066b",
        "patch": "@@ -200,7 +200,7 @@ uint256 SerializeHash(const T& obj, int nType=SER_GETHASH, int nVersion=PROTOCOL\n     return ss.GetHash();\n }\n \n-unsigned int MurmurHash3(unsigned int nHashSeed, const std::vector<unsigned char>& vDataToHash);\n+unsigned int MurmurHash3(unsigned int nHashSeed, const Span<const unsigned char>& vDataToHash);\n \n void BIP32Hash(const ChainCode &chainCode, unsigned int nChild, unsigned char header, const unsigned char data[32], unsigned char output[64]);\n "
      },
      {
        "sha": "0f117d57bee2b920a6f39a8740c55469397ac757",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b88fcba80e51c8b8581144fd919b8cc9396066b/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b88fcba80e51c8b8581144fd919b8cc9396066b/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=8b88fcba80e51c8b8581144fd919b8cc9396066b",
        "patch": "@@ -14,11 +14,12 @@\n #include <crypto/siphash.h>\n #include <hash.h>\n #include <limitedmap.h>\n-#include <netaddress.h>\n #include <net_permissions.h>\n+#include <netaddress.h>\n #include <policy/feerate.h>\n #include <protocol.h>\n #include <random.h>\n+#include <span.h>\n #include <streams.h>\n #include <sync.h>\n #include <threadinterrupt.h>"
      },
      {
        "sha": "8886727e57a732c8c174efe57466b110b1ffce65",
        "filename": "src/netaddress.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 11,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b88fcba80e51c8b8581144fd919b8cc9396066b/src/netaddress.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b88fcba80e51c8b8581144fd919b8cc9396066b/src/netaddress.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.cpp?ref=8b88fcba80e51c8b8581144fd919b8cc9396066b",
        "patch": "@@ -3,11 +3,12 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <netaddress.h>\n #include <hash.h>\n-#include <util/strencodings.h>\n-#include <util/asmap.h>\n+#include <netaddress.h>\n+#include <prevector.h>\n #include <tinyformat.h>\n+#include <util/asmap.h>\n+#include <util/strencodings.h>\n \n static const unsigned char pchIPv4[12] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xff, 0xff };\n static const unsigned char pchOnionCat[] = {0xFD,0x87,0xD8,0x7E,0xEB,0x43};\n@@ -723,14 +724,14 @@ bool CService::GetSockAddr(struct sockaddr* paddr, socklen_t *addrlen) const\n /**\n  * @returns An identifier unique to this service's address and port number.\n  */\n-std::vector<unsigned char> CService::GetKey() const\n-{\n-     std::vector<unsigned char> vKey;\n-     vKey.resize(18);\n-     memcpy(vKey.data(), ip, 16);\n-     vKey[16] = port / 0x100; // most significant byte of our port\n-     vKey[17] = port & 0x0FF; // least significant byte of our port\n-     return vKey;\n+ServiceKey CService::GetKey() const\n+{\n+    ServiceKey vKey;\n+    vKey.resize(18);\n+    memcpy(vKey.data(), ip, 16);\n+    vKey[16] = port / 0x100; // most significant byte of our port\n+    vKey[17] = port & 0x0FF; // least significant byte of our port\n+    return vKey;\n }\n \n std::string CService::ToStringPort() const"
      },
      {
        "sha": "f29752a6871a74b3413fec36c2feaaf46c4e5a43",
        "filename": "src/netaddress.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b88fcba80e51c8b8581144fd919b8cc9396066b/src/netaddress.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b88fcba80e51c8b8581144fd919b8cc9396066b/src/netaddress.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.h?ref=8b88fcba80e51c8b8581144fd919b8cc9396066b",
        "patch": "@@ -134,6 +134,8 @@ class CSubNet\n         SERIALIZE_METHODS(CSubNet, obj) { READWRITE(obj.network, obj.netmask, obj.valid); }\n };\n \n+using ServiceKey = prevector<18, unsigned char>;\n+\n /** A combination of a network address (CNetAddr) and a (TCP) port */\n class CService : public CNetAddr\n {\n@@ -151,7 +153,7 @@ class CService : public CNetAddr\n         friend bool operator==(const CService& a, const CService& b);\n         friend bool operator!=(const CService& a, const CService& b) { return !(a == b); }\n         friend bool operator<(const CService& a, const CService& b);\n-        std::vector<unsigned char> GetKey() const;\n+        ServiceKey GetKey() const;\n         std::string ToString() const;\n         std::string ToStringPort() const;\n         std::string ToStringIPPort() const;"
      },
      {
        "sha": "7a5421ab6f2c2e67a7a5fe718ca59a26adb9167e",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b88fcba80e51c8b8581144fd919b8cc9396066b/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b88fcba80e51c8b8581144fd919b8cc9396066b/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=8b88fcba80e51c8b8581144fd919b8cc9396066b",
        "patch": "@@ -139,7 +139,7 @@ std::string DescriptorChecksum(const Span<const char>& span)\n     return ret;\n }\n \n-std::string AddChecksum(const std::string& str) { return str + \"#\" + DescriptorChecksum(MakeSpan(str)); }\n+std::string AddChecksum(const std::string& str) { return str + \"#\" + DescriptorChecksum(str); }\n \n ////////////////////////////////////////////////////////////////////////////\n // Internal representation                                                //\n@@ -1087,7 +1087,7 @@ bool CheckChecksum(Span<const char>& sp, bool require_checksum, std::string& err\n \n std::unique_ptr<Descriptor> Parse(const std::string& descriptor, FlatSigningProvider& out, std::string& error, bool require_checksum)\n {\n-    Span<const char> sp(descriptor.data(), descriptor.size());\n+    Span<const char> sp{descriptor};\n     if (!CheckChecksum(sp, require_checksum, error)) return nullptr;\n     auto ret = ParseScript(0, sp, ParseScriptContext::TOP, out, error);\n     if (sp.size() == 0 && ret) return std::unique_ptr<Descriptor>(std::move(ret));\n@@ -1098,7 +1098,7 @@ std::string GetDescriptorChecksum(const std::string& descriptor)\n {\n     std::string ret;\n     std::string error;\n-    Span<const char> sp(descriptor.data(), descriptor.size());\n+    Span<const char> sp{descriptor};\n     if (!CheckChecksum(sp, false, error, &ret)) return \"\";\n     return ret;\n }"
      },
      {
        "sha": "9415bba58549e0bfc1d097873539084f7ddac202",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b88fcba80e51c8b8581144fd919b8cc9396066b/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b88fcba80e51c8b8581144fd919b8cc9396066b/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=8b88fcba80e51c8b8581144fd919b8cc9396066b",
        "patch": "@@ -1522,7 +1522,7 @@ static bool ExecuteWitnessScript(const Span<const valtype>& stack_span, const CS\n static bool VerifyWitnessProgram(const CScriptWitness& witness, int witversion, const std::vector<unsigned char>& program, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror)\n {\n     CScript scriptPubKey;\n-    Span<const valtype> stack = MakeSpan(witness.stack);\n+    Span<const valtype> stack{witness.stack};\n \n     if (witversion == 0) {\n         if (program.size() == WITNESS_V0_SCRIPTHASH_SIZE) {"
      },
      {
        "sha": "d5fec462e11009357e85d8c336051c7805db5cf2",
        "filename": "src/span.h",
        "status": "modified",
        "additions": 44,
        "deletions": 22,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b88fcba80e51c8b8581144fd919b8cc9396066b/src/span.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b88fcba80e51c8b8581144fd919b8cc9396066b/src/span.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/span.h?ref=8b88fcba80e51c8b8581144fd919b8cc9396066b",
        "patch": "@@ -18,12 +18,26 @@ template<typename C>\n class Span\n {\n     C* m_data;\n-    std::ptrdiff_t m_size;\n+    std::size_t m_size;\n \n public:\n     constexpr Span() noexcept : m_data(nullptr), m_size(0) {}\n-    constexpr Span(C* data, std::ptrdiff_t size) noexcept : m_data(data), m_size(size) {}\n-    constexpr Span(C* data, C* end) noexcept : m_data(data), m_size(end - data) {}\n+\n+    /** Construct a span from a begin pointer and a size.\n+     *\n+     * This implements a subset of the iterator-based std::span constructor in C++20,\n+     * which is hard to implement without std::address_of.\n+     */\n+    template <typename T, typename std::enable_if<std::is_convertible<T (*)[], C (*)[]>::value, int>::type = 0>\n+    constexpr Span(T* begin, std::size_t size) noexcept : m_data(begin), m_size(size) {}\n+\n+    /** Construct a span from a begin and end pointer.\n+     *\n+     * This implements a subset of the iterator-based std::span constructor in C++20,\n+     * which is hard to implement without std::address_of.\n+     */\n+    template <typename T, typename std::enable_if<std::is_convertible<T (*)[], C (*)[]>::value, int>::type = 0>\n+    constexpr Span(T* begin, T* end) noexcept : m_data(begin), m_size(end - begin) {}\n \n     /** Implicit conversion of spans between compatible types.\n      *\n@@ -42,18 +56,32 @@ class Span\n     /** Default assignment operator. */\n     Span& operator=(const Span& other) noexcept = default;\n \n+    /** Construct a Span from an array. This matches the corresponding C++20 std::span constructor. */\n+    template <int N>\n+    constexpr Span(C (&a)[N]) noexcept : m_data(a), m_size(N) {}\n+\n+    /** Construct a Span for objects with .data() and .size() (std::string, std::array, std::vector, ...).\n+     *\n+     * This implements a subset of the functionality provided by the C++20 std::span range-based constructor.\n+     *\n+     * To prevent surprises, only Spans for constant value types are supported when passing in temporaries.\n+     * Note that this restriction does not exist when converting arrays or other Spans (see above).\n+     */\n+    template <typename V, typename std::enable_if<(std::is_const<C>::value || std::is_lvalue_reference<V>::value) && std::is_convertible<typename std::remove_pointer<decltype(std::declval<V&>().data())>::type (*)[], C (*)[]>::value && std::is_convertible<decltype(std::declval<V&>().size()), std::size_t>::value, int>::type = 0>\n+    constexpr Span(V&& v) noexcept : m_data(v.data()), m_size(v.size()) {}\n+\n     constexpr C* data() const noexcept { return m_data; }\n     constexpr C* begin() const noexcept { return m_data; }\n     constexpr C* end() const noexcept { return m_data + m_size; }\n     constexpr C& front() const noexcept { return m_data[0]; }\n     constexpr C& back() const noexcept { return m_data[m_size - 1]; }\n-    constexpr std::ptrdiff_t size() const noexcept { return m_size; }\n-    constexpr C& operator[](std::ptrdiff_t pos) const noexcept { return m_data[pos]; }\n+    constexpr std::size_t size() const noexcept { return m_size; }\n+    constexpr C& operator[](std::size_t pos) const noexcept { return m_data[pos]; }\n \n-    constexpr Span<C> subspan(std::ptrdiff_t offset) const noexcept { return Span<C>(m_data + offset, m_size - offset); }\n-    constexpr Span<C> subspan(std::ptrdiff_t offset, std::ptrdiff_t count) const noexcept { return Span<C>(m_data + offset, count); }\n-    constexpr Span<C> first(std::ptrdiff_t count) const noexcept { return Span<C>(m_data, count); }\n-    constexpr Span<C> last(std::ptrdiff_t count) const noexcept { return Span<C>(m_data + m_size - count, count); }\n+    constexpr Span<C> subspan(std::size_t offset) const noexcept { return Span<C>(m_data + offset, m_size - offset); }\n+    constexpr Span<C> subspan(std::size_t offset, std::size_t count) const noexcept { return Span<C>(m_data + offset, count); }\n+    constexpr Span<C> first(std::size_t count) const noexcept { return Span<C>(m_data, count); }\n+    constexpr Span<C> last(std::size_t count) const noexcept { return Span<C>(m_data + m_size - count, count); }\n \n     friend constexpr bool operator==(const Span& a, const Span& b) noexcept { return a.size() == b.size() && std::equal(a.begin(), a.end(), b.begin()); }\n     friend constexpr bool operator!=(const Span& a, const Span& b) noexcept { return !(a == b); }\n@@ -65,19 +93,13 @@ class Span\n     template <typename O> friend class Span;\n };\n \n-/** Create a span to a container exposing data() and size().\n- *\n- * This correctly deals with constness: the returned Span's element type will be\n- * whatever data() returns a pointer to. If either the passed container is const,\n- * or its element type is const, the resulting span will have a const element type.\n- *\n- * std::span will have a constructor that implements this functionality directly.\n- */\n-template<typename A, int N>\n-constexpr Span<A> MakeSpan(A (&a)[N]) { return Span<A>(a, N); }\n-\n-template<typename V>\n-constexpr Span<typename std::remove_pointer<decltype(std::declval<V>().data())>::type> MakeSpan(V& v) { return Span<typename std::remove_pointer<decltype(std::declval<V>().data())>::type>(v.data(), v.size()); }\n+// MakeSpan helps constructing a Span of the right type automatically.\n+/** MakeSpan for arrays: */\n+template <typename A, int N> Span<A> constexpr MakeSpan(A (&a)[N]) { return Span<A>(a, N); }\n+/** MakeSpan for temporaries / rvalue references, only supporting const output. */\n+template <typename V> constexpr auto MakeSpan(V&& v) -> typename std::enable_if<!std::is_lvalue_reference<V>::value, Span<const typename std::remove_pointer<decltype(v.data())>::type>>::type { return std::forward<V>(v); }\n+/** MakeSpan for (lvalue) references, supporting mutable output. */\n+template <typename V> constexpr auto MakeSpan(V& v) -> Span<typename std::remove_pointer<decltype(v.data())>::type> { return v; }\n \n /** Pop the last element off a span, and return a reference to that element. */\n template <typename T>"
      },
      {
        "sha": "1ad560742970ea44bad89cf007f158b0d4cb5ae4",
        "filename": "src/test/bloom_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b88fcba80e51c8b8581144fd919b8cc9396066b/src/test/bloom_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b88fcba80e51c8b8581144fd919b8cc9396066b/src/test/bloom_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bloom_tests.cpp?ref=8b88fcba80e51c8b8581144fd919b8cc9396066b",
        "patch": "@@ -91,7 +91,7 @@ BOOST_AUTO_TEST_CASE(bloom_create_insert_key)\n     CBloomFilter filter(2, 0.001, 0, BLOOM_UPDATE_ALL);\n     filter.insert(vchPubKey);\n     uint160 hash = pubkey.GetID();\n-    filter.insert(std::vector<unsigned char>(hash.begin(), hash.end()));\n+    filter.insert(Span<unsigned char>(hash.begin(), hash.end()));\n \n     CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n     stream << filter;"
      },
      {
        "sha": "7b661a0d1da9f08fe95a2f1e6615bd3c8a1dac2a",
        "filename": "src/test/compress_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b88fcba80e51c8b8581144fd919b8cc9396066b/src/test/compress_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b88fcba80e51c8b8581144fd919b8cc9396066b/src/test/compress_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/compress_tests.cpp?ref=8b88fcba80e51c8b8581144fd919b8cc9396066b",
        "patch": "@@ -72,7 +72,7 @@ BOOST_AUTO_TEST_CASE(compress_script_to_ckey_id)\n     CScript script = CScript() << OP_DUP << OP_HASH160 << ToByteVector(pubkey.GetID()) << OP_EQUALVERIFY << OP_CHECKSIG;\n     BOOST_CHECK_EQUAL(script.size(), 25U);\n \n-    std::vector<unsigned char> out;\n+    CompressedScript out;\n     bool done = CompressScript(script, out);\n     BOOST_CHECK_EQUAL(done, true);\n \n@@ -89,7 +89,7 @@ BOOST_AUTO_TEST_CASE(compress_script_to_cscript_id)\n     script << OP_HASH160 << ToByteVector(CScriptID(redeemScript)) << OP_EQUAL;\n     BOOST_CHECK_EQUAL(script.size(), 23U);\n \n-    std::vector<unsigned char> out;\n+    CompressedScript out;\n     bool done = CompressScript(script, out);\n     BOOST_CHECK_EQUAL(done, true);\n \n@@ -107,7 +107,7 @@ BOOST_AUTO_TEST_CASE(compress_script_to_compressed_pubkey_id)\n     CScript script = CScript() << ToByteVector(key.GetPubKey()) << OP_CHECKSIG; // COMPRESSED_PUBLIC_KEY_SIZE (33)\n     BOOST_CHECK_EQUAL(script.size(), 35U);\n \n-    std::vector<unsigned char> out;\n+    CompressedScript out;\n     bool done = CompressScript(script, out);\n     BOOST_CHECK_EQUAL(done, true);\n \n@@ -124,7 +124,7 @@ BOOST_AUTO_TEST_CASE(compress_script_to_uncompressed_pubkey_id)\n     CScript script =  CScript() << ToByteVector(key.GetPubKey()) << OP_CHECKSIG; // PUBLIC_KEY_SIZE (65)\n     BOOST_CHECK_EQUAL(script.size(), 67U);                   // 1 char code + 65 char pubkey + OP_CHECKSIG\n \n-    std::vector<unsigned char> out;\n+    CompressedScript out;\n     bool done = CompressScript(script, out);\n     BOOST_CHECK_EQUAL(done, true);\n "
      },
      {
        "sha": "b2e9d4282c16f598c3828a9cee8db827a34ff4c4",
        "filename": "src/test/fuzz/script.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b88fcba80e51c8b8581144fd919b8cc9396066b/src/test/fuzz/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b88fcba80e51c8b8581144fd919b8cc9396066b/src/test/fuzz/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/script.cpp?ref=8b88fcba80e51c8b8581144fd919b8cc9396066b",
        "patch": "@@ -41,7 +41,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n     if (!script_opt) return;\n     const CScript script{*script_opt};\n \n-    std::vector<unsigned char> compressed;\n+    CompressedScript compressed;\n     if (CompressScript(script, compressed)) {\n         const unsigned int size = compressed[0];\n         compressed.erase(compressed.begin());\n@@ -99,10 +99,12 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n \n     {\n         const std::vector<uint8_t> bytes = ConsumeRandomLengthByteVector(fuzzed_data_provider);\n+        CompressedScript compressed_script;\n+        compressed_script.assign(bytes.begin(), bytes.end());\n         // DecompressScript(..., ..., bytes) is not guaranteed to be defined if the bytes vector is too short\n-        if (bytes.size() >= 32) {\n+        if (compressed_script.size() >= 32) {\n             CScript decompressed_script;\n-            DecompressScript(decompressed_script, fuzzed_data_provider.ConsumeIntegral<unsigned int>(), bytes);\n+            DecompressScript(decompressed_script, fuzzed_data_provider.ConsumeIntegral<unsigned int>(), compressed_script);\n         }\n     }\n "
      },
      {
        "sha": "f6b6e8f6f0cf446427c62a31c87f232ce761e237",
        "filename": "src/test/fuzz/span.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b88fcba80e51c8b8581144fd919b8cc9396066b/src/test/fuzz/span.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b88fcba80e51c8b8581144fd919b8cc9396066b/src/test/fuzz/span.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/span.cpp?ref=8b88fcba80e51c8b8581144fd919b8cc9396066b",
        "patch": "@@ -18,7 +18,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n     FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n \n     std::string str = fuzzed_data_provider.ConsumeBytesAsString(32);\n-    const Span<const char> span = MakeSpan(str);\n+    const Span<const char> span{str};\n     (void)span.data();\n     (void)span.begin();\n     (void)span.end();\n@@ -32,7 +32,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n     }\n \n     std::string another_str = fuzzed_data_provider.ConsumeBytesAsString(32);\n-    const Span<const char> another_span = MakeSpan(another_str);\n+    const Span<const char> another_span{another_str};\n     assert((span <= another_span) != (span > another_span));\n     assert((span == another_span) != (span != another_span));\n     assert((span >= another_span) != (span < another_span));"
      },
      {
        "sha": "e5bf5dd6083b5d689d701df28c1ecaf498d3383a",
        "filename": "src/test/fuzz/spanparsing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b88fcba80e51c8b8581144fd919b8cc9396066b/src/test/fuzz/spanparsing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b88fcba80e51c8b8581144fd919b8cc9396066b/src/test/fuzz/spanparsing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/spanparsing.cpp?ref=8b88fcba80e51c8b8581144fd919b8cc9396066b",
        "patch": "@@ -12,7 +12,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n     const size_t query_size = fuzzed_data_provider.ConsumeIntegral<size_t>();\n     const std::string query = fuzzed_data_provider.ConsumeBytesAsString(std::min<size_t>(query_size, 1024 * 1024));\n     const std::string span_str = fuzzed_data_provider.ConsumeRemainingBytesAsString();\n-    const Span<const char> const_span = MakeSpan(span_str);\n+    const Span<const char> const_span{span_str};\n \n     Span<const char> mut_span = const_span;\n     (void)spanparsing::Const(query, mut_span);"
      },
      {
        "sha": "257328974bcd06ed4f030d7e1aaa05a386b22872",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b88fcba80e51c8b8581144fd919b8cc9396066b/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b88fcba80e51c8b8581144fd919b8cc9396066b/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=8b88fcba80e51c8b8581144fd919b8cc9396066b",
        "patch": "@@ -1829,7 +1829,7 @@ BOOST_AUTO_TEST_CASE(test_spanparsing)\n \n     // Const(...): parse a constant, update span to skip it if successful\n     input = \"MilkToastHoney\";\n-    sp = MakeSpan(input);\n+    sp = input;\n     success = Const(\"\", sp); // empty\n     BOOST_CHECK(success);\n     BOOST_CHECK_EQUAL(SpanToStr(sp), \"MilkToastHoney\");\n@@ -1854,7 +1854,7 @@ BOOST_AUTO_TEST_CASE(test_spanparsing)\n \n     // Func(...): parse a function call, update span to argument if successful\n     input = \"Foo(Bar(xy,z()))\";\n-    sp = MakeSpan(input);\n+    sp = input;\n \n     success = Func(\"FooBar\", sp);\n     BOOST_CHECK(!success);\n@@ -1877,31 +1877,31 @@ BOOST_AUTO_TEST_CASE(test_spanparsing)\n     Span<const char> result;\n \n     input = \"(n*(n-1))/2\";\n-    sp = MakeSpan(input);\n+    sp = input;\n     result = Expr(sp);\n     BOOST_CHECK_EQUAL(SpanToStr(result), \"(n*(n-1))/2\");\n     BOOST_CHECK_EQUAL(SpanToStr(sp), \"\");\n \n     input = \"foo,bar\";\n-    sp = MakeSpan(input);\n+    sp = input;\n     result = Expr(sp);\n     BOOST_CHECK_EQUAL(SpanToStr(result), \"foo\");\n     BOOST_CHECK_EQUAL(SpanToStr(sp), \",bar\");\n \n     input = \"(aaaaa,bbbbb()),c\";\n-    sp = MakeSpan(input);\n+    sp = input;\n     result = Expr(sp);\n     BOOST_CHECK_EQUAL(SpanToStr(result), \"(aaaaa,bbbbb())\");\n     BOOST_CHECK_EQUAL(SpanToStr(sp), \",c\");\n \n     input = \"xyz)foo\";\n-    sp = MakeSpan(input);\n+    sp = input;\n     result = Expr(sp);\n     BOOST_CHECK_EQUAL(SpanToStr(result), \"xyz\");\n     BOOST_CHECK_EQUAL(SpanToStr(sp), \")foo\");\n \n     input = \"((a),(b),(c)),xxx\";\n-    sp = MakeSpan(input);\n+    sp = input;\n     result = Expr(sp);\n     BOOST_CHECK_EQUAL(SpanToStr(result), \"((a),(b),(c))\");\n     BOOST_CHECK_EQUAL(SpanToStr(sp), \",xxx\");\n@@ -1910,27 +1910,27 @@ BOOST_AUTO_TEST_CASE(test_spanparsing)\n     std::vector<Span<const char>> results;\n \n     input = \"xxx\";\n-    results = Split(MakeSpan(input), 'x');\n+    results = Split(input, 'x');\n     BOOST_CHECK_EQUAL(results.size(), 4U);\n     BOOST_CHECK_EQUAL(SpanToStr(results[0]), \"\");\n     BOOST_CHECK_EQUAL(SpanToStr(results[1]), \"\");\n     BOOST_CHECK_EQUAL(SpanToStr(results[2]), \"\");\n     BOOST_CHECK_EQUAL(SpanToStr(results[3]), \"\");\n \n     input = \"one#two#three\";\n-    results = Split(MakeSpan(input), '-');\n+    results = Split(input, '-');\n     BOOST_CHECK_EQUAL(results.size(), 1U);\n     BOOST_CHECK_EQUAL(SpanToStr(results[0]), \"one#two#three\");\n \n     input = \"one#two#three\";\n-    results = Split(MakeSpan(input), '#');\n+    results = Split(input, '#');\n     BOOST_CHECK_EQUAL(results.size(), 3U);\n     BOOST_CHECK_EQUAL(SpanToStr(results[0]), \"one\");\n     BOOST_CHECK_EQUAL(SpanToStr(results[1]), \"two\");\n     BOOST_CHECK_EQUAL(SpanToStr(results[2]), \"three\");\n \n     input = \"*foo*bar*\";\n-    results = Split(MakeSpan(input), '*');\n+    results = Split(input, '*');\n     BOOST_CHECK_EQUAL(results.size(), 4U);\n     BOOST_CHECK_EQUAL(SpanToStr(results[0]), \"\");\n     BOOST_CHECK_EQUAL(SpanToStr(results[1]), \"foo\");"
      }
    ]
  }
]