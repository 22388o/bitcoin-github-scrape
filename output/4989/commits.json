[
  {
    "sha": "399e8ce6d7fade6717a74ec3ca5883b6184f8b4f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOTllOGNlNmQ3ZmFkZTY3MTdhNzRlYzNjYTU4ODNiNjE4NGY4YjRm",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-09-27T01:04:02Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-10-09T00:38:52Z"
      },
      "message": "Replace SignatureHash() with class TxSignatureHasher",
      "tree": {
        "sha": "73975e198cbb07532f2e3fb0d489523532990b7f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/73975e198cbb07532f2e3fb0d489523532990b7f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/399e8ce6d7fade6717a74ec3ca5883b6184f8b4f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/399e8ce6d7fade6717a74ec3ca5883b6184f8b4f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/399e8ce6d7fade6717a74ec3ca5883b6184f8b4f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/399e8ce6d7fade6717a74ec3ca5883b6184f8b4f/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dec58922d07241f0b502c96f8e5131abccbd5dc1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dec58922d07241f0b502c96f8e5131abccbd5dc1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dec58922d07241f0b502c96f8e5131abccbd5dc1"
      }
    ],
    "stats": {
      "total": 54,
      "additions": 35,
      "deletions": 19
    },
    "files": [
      {
        "sha": "34d865339bf9b13e3d86e7407c899e0212b5ca1d",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 4,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/399e8ce6d7fade6717a74ec3ca5883b6184f8b4f/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/399e8ce6d7fade6717a74ec3ca5883b6184f8b4f/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=399e8ce6d7fade6717a74ec3ca5883b6184f8b4f",
        "patch": "@@ -925,9 +925,7 @@ class CTransactionSignatureSerializer {\n     }\n };\n \n-} // anon namespace\n-\n-uint256 SignatureHash(const CScript& scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType)\n+uint256 TxSignatureHash(const CScript& scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType)\n {\n     if (nIn >= txTo.vin.size()) {\n         LogPrintf(\"ERROR: SignatureHash() : nIn=%d out of range\\n\", nIn);\n@@ -951,6 +949,13 @@ uint256 SignatureHash(const CScript& scriptCode, const CTransaction& txTo, unsig\n     return ss.GetHash();\n }\n \n+} // anon namespace\n+\n+uint256 TxSignatureHasher::SignatureHash(const CScript& scriptCode, int nHashType) const\n+{\n+    return TxSignatureHash(scriptCode, txTo, nIn, nHashType);\n+}\n+\n bool SignatureChecker::VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& pubkey, const uint256& sighash) const\n {\n     return pubkey.Verify(sighash, vchSig);\n@@ -969,7 +974,7 @@ bool SignatureChecker::CheckSig(const vector<unsigned char>& vchSigIn, const vec\n     int nHashType = vchSig.back();\n     vchSig.pop_back();\n \n-    uint256 sighash = SignatureHash(scriptCode, txTo, nIn, nHashType);\n+    uint256 sighash = hasher.SignatureHash(scriptCode, nHashType);\n \n     if (!VerifySignature(vchSig, pubkey, sighash))\n         return false;"
      },
      {
        "sha": "43cdb2a7e6a7745a4c9e2e6b0d64a47c1a36a327",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 13,
        "deletions": 5,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/399e8ce6d7fade6717a74ec3ca5883b6184f8b4f/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/399e8ce6d7fade6717a74ec3ca5883b6184f8b4f/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=399e8ce6d7fade6717a74ec3ca5883b6184f8b4f",
        "patch": "@@ -6,6 +6,8 @@\n #ifndef H_BITCOIN_SCRIPT_INTERPRETER\n #define H_BITCOIN_SCRIPT_INTERPRETER\n \n+#include \"core.h\"\n+\n #include <vector>\n #include <stdint.h>\n #include <string>\n@@ -48,7 +50,15 @@ enum\n     SCRIPT_VERIFY_NULLDUMMY = (1U << 4),\n };\n \n-uint256 SignatureHash(const CScript &scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType);\n+class TxSignatureHasher\n+{\n+private:\n+    const CTransaction txTo;\n+    unsigned int nIn;\n+public:\n+    TxSignatureHasher(const CTransaction& txToIn, unsigned int nInIn) : txTo(txToIn), nIn(nInIn) {}\n+    uint256 SignatureHash(const CScript& scriptCode, int nHashType) const;\n+};\n \n class BaseSignatureChecker\n {\n@@ -64,14 +74,12 @@ class BaseSignatureChecker\n class SignatureChecker : public BaseSignatureChecker\n {\n private:\n-    const CTransaction& txTo;\n-    unsigned int nIn;\n-\n+    const TxSignatureHasher hasher;\n protected:\n     virtual bool VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& vchPubKey, const uint256& sighash) const;\n \n public:\n-    SignatureChecker(const CTransaction& txToIn, unsigned int nInIn) : txTo(txToIn), nIn(nInIn) {}\n+    SignatureChecker(const CTransaction& txToIn, unsigned int nIn) : hasher(TxSignatureHasher(txToIn, nIn)) { }\n     bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode) const;\n };\n "
      },
      {
        "sha": "5bdb2800bead5e6c941bd15a015dd22b44f69de8",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/399e8ce6d7fade6717a74ec3ca5883b6184f8b4f/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/399e8ce6d7fade6717a74ec3ca5883b6184f8b4f/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=399e8ce6d7fade6717a74ec3ca5883b6184f8b4f",
        "patch": "@@ -95,10 +95,11 @@ bool SignSignature(const CKeyStore &keystore, const CScript& fromPubKey, CMutabl\n {\n     assert(nIn < txTo.vin.size());\n     CTxIn& txin = txTo.vin[nIn];\n+    TxSignatureHasher hasher(txTo, nIn);\n \n     // Leave out the signature from the hash, since a signature can't sign itself.\n     // The checksig op will also drop the signatures from its hash.\n-    uint256 hash = SignatureHash(fromPubKey, txTo, nIn, nHashType);\n+    uint256 hash = hasher.SignatureHash(fromPubKey, nHashType);\n \n     txnouttype whichType;\n     if (!Solver(keystore, fromPubKey, hash, nHashType, txin.scriptSig, whichType))\n@@ -112,7 +113,7 @@ bool SignSignature(const CKeyStore &keystore, const CScript& fromPubKey, CMutabl\n         CScript subscript = txin.scriptSig;\n \n         // Recompute txn hash using subscript in place of scriptPubKey:\n-        uint256 hash2 = SignatureHash(subscript, txTo, nIn, nHashType);\n+        uint256 hash2 = hasher.SignatureHash(subscript, nHashType);\n \n         txnouttype subType;\n         bool fSolved ="
      },
      {
        "sha": "6aa11acbb176c149bd3b2a229e5f99b00aab4475",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/399e8ce6d7fade6717a74ec3ca5883b6184f8b4f/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/399e8ce6d7fade6717a74ec3ca5883b6184f8b4f/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=399e8ce6d7fade6717a74ec3ca5883b6184f8b4f",
        "patch": "@@ -28,7 +28,7 @@ BOOST_AUTO_TEST_SUITE(multisig_tests)\n CScript\n sign_multisig(CScript scriptPubKey, vector<CKey> keys, CTransaction transaction, int whichIn)\n {\n-    uint256 hash = SignatureHash(scriptPubKey, transaction, whichIn, SIGHASH_ALL);\n+    uint256 hash = TxSignatureHasher(transaction, whichIn).SignatureHash(scriptPubKey, SIGHASH_ALL);\n \n     CScript result;\n     result << OP_0; // CHECKMULTISIG bug workaround"
      },
      {
        "sha": "32eff6a0af5c0b5eb6a1387fbef0b5757589c075",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/399e8ce6d7fade6717a74ec3ca5883b6184f8b4f/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/399e8ce6d7fade6717a74ec3ca5883b6184f8b4f/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=399e8ce6d7fade6717a74ec3ca5883b6184f8b4f",
        "patch": "@@ -9,6 +9,7 @@\n #include \"key.h\"\n #include \"keystore.h\"\n #include \"main.h\"\n+#include \"script/interpreter.h\"\n #include \"script/script.h\"\n #include \"script/sign.h\"\n #include \"util.h\"\n@@ -189,7 +190,7 @@ class TestBuilder\n \n     TestBuilder& PushSig(const CKey& key, int nHashType = SIGHASH_ALL, unsigned int lenR = 32, unsigned int lenS = 32)\n     {\n-        uint256 hash = SignatureHash(scriptPubKey, spendTx, 0, nHashType);\n+        uint256 hash = TxSignatureHasher(spendTx, 0).SignatureHash(scriptPubKey, nHashType);\n         std::vector<unsigned char> vchSig, r, s;\n         do {\n             key.Sign(hash, vchSig, lenS <= 32);\n@@ -545,7 +546,7 @@ BOOST_AUTO_TEST_CASE(script_PushData)\n CScript\n sign_multisig(CScript scriptPubKey, std::vector<CKey> keys, CTransaction transaction)\n {\n-    uint256 hash = SignatureHash(scriptPubKey, transaction, 0, SIGHASH_ALL);\n+    uint256 hash = TxSignatureHasher(transaction, 0).SignatureHash(scriptPubKey, SIGHASH_ALL);\n \n     CScript result;\n     //\n@@ -724,16 +725,17 @@ BOOST_AUTO_TEST_CASE(script_combineSigs)\n     BOOST_CHECK(combined == scriptSig);\n \n     // A couple of partially-signed versions:\n+    TxSignatureHasher hasher(txTo, 0);\n     vector<unsigned char> sig1;\n-    uint256 hash1 = SignatureHash(scriptPubKey, txTo, 0, SIGHASH_ALL);\n+    uint256 hash1 = hasher.SignatureHash(scriptPubKey, SIGHASH_ALL);\n     BOOST_CHECK(keys[0].Sign(hash1, sig1));\n     sig1.push_back(SIGHASH_ALL);\n     vector<unsigned char> sig2;\n-    uint256 hash2 = SignatureHash(scriptPubKey, txTo, 0, SIGHASH_NONE);\n+    uint256 hash2 = hasher.SignatureHash(scriptPubKey, SIGHASH_NONE);\n     BOOST_CHECK(keys[1].Sign(hash2, sig2));\n     sig2.push_back(SIGHASH_NONE);\n     vector<unsigned char> sig3;\n-    uint256 hash3 = SignatureHash(scriptPubKey, txTo, 0, SIGHASH_SINGLE);\n+    uint256 hash3 = hasher.SignatureHash(scriptPubKey, SIGHASH_SINGLE);\n     BOOST_CHECK(keys[2].Sign(hash3, sig3));\n     sig3.push_back(SIGHASH_SINGLE);\n "
      },
      {
        "sha": "3452ea63331ee0438bfb777c8ffdae43c12cd098",
        "filename": "src/test/sighash_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/399e8ce6d7fade6717a74ec3ca5883b6184f8b4f/src/test/sighash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/399e8ce6d7fade6717a74ec3ca5883b6184f8b4f/src/test/sighash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sighash_tests.cpp?ref=399e8ce6d7fade6717a74ec3ca5883b6184f8b4f",
        "patch": "@@ -139,7 +139,7 @@ BOOST_AUTO_TEST_CASE(sighash_test)\n \n         uint256 sh, sho;\n         sho = SignatureHashOld(scriptCode, txTo, nIn, nHashType);\n-        sh = SignatureHash(scriptCode, txTo, nIn, nHashType);\n+        sh = TxSignatureHasher(txTo, nIn).SignatureHash(scriptCode, nHashType);\n         #if defined(PRINT_SIGHASH_JSON)\n         CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n         ss << txTo;\n@@ -207,7 +207,7 @@ BOOST_AUTO_TEST_CASE(sighash_from_data)\n           continue;\n         }\n \n-        sh = SignatureHash(scriptCode, tx, nIn, nHashType);\n+        sh = TxSignatureHasher(tx, nIn).SignatureHash(scriptCode, nHashType);\n         BOOST_CHECK_MESSAGE(sh.GetHex() == sigHashHex, strTest);\n     }\n }"
      }
    ]
  },
  {
    "sha": "ce4929ab6d638190706482f78ed4901f508dc02b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZTQ5MjlhYjZkNjM4MTkwNzA2NDgyZjc4ZWQ0OTAxZjUwOGRjMDJi",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-09-26T18:44:53Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-10-09T00:38:53Z"
      },
      "message": "Change SignatureChecker constructor and make its TxSignatureHasher a reference",
      "tree": {
        "sha": "d68eaf43beaea827706ac59c88eb4510f601e4ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d68eaf43beaea827706ac59c88eb4510f601e4ec"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ce4929ab6d638190706482f78ed4901f508dc02b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce4929ab6d638190706482f78ed4901f508dc02b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ce4929ab6d638190706482f78ed4901f508dc02b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce4929ab6d638190706482f78ed4901f508dc02b/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "399e8ce6d7fade6717a74ec3ca5883b6184f8b4f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/399e8ce6d7fade6717a74ec3ca5883b6184f8b4f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/399e8ce6d7fade6717a74ec3ca5883b6184f8b4f"
      }
    ],
    "stats": {
      "total": 99,
      "additions": 54,
      "deletions": 45
    },
    "files": [
      {
        "sha": "b146e62e7f453c68da14a4347bc08d228ec84f74",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ce4929ab6d638190706482f78ed4901f508dc02b/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ce4929ab6d638190706482f78ed4901f508dc02b/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=ce4929ab6d638190706482f78ed4901f508dc02b",
        "patch": "@@ -429,11 +429,12 @@ static void MutateTxSign(CMutableTransaction& tx, const string& flagStr)\n         if (!fHashSingle || (i < mergedTx.vout.size()))\n             SignSignature(keystore, prevPubKey, mergedTx, i, nHashType);\n \n+        TxSignatureHasher hasher(mergedTx, i);\n         // ... and merge in other signatures:\n         BOOST_FOREACH(const CTransaction& txv, txVariants) {\n             txin.scriptSig = CombineSignatures(prevPubKey, mergedTx, i, txin.scriptSig, txv.vin[i].scriptSig);\n         }\n-        if (!VerifyScript(txin.scriptSig, prevPubKey, STANDARD_SCRIPT_VERIFY_FLAGS, SignatureChecker(mergedTx, i)))\n+        if (!VerifyScript(txin.scriptSig, prevPubKey, STANDARD_SCRIPT_VERIFY_FLAGS, SignatureChecker(hasher)))\n             fComplete = false;\n     }\n "
      },
      {
        "sha": "a030bbe9727c271464b310d1b66483e895a35bfb",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ce4929ab6d638190706482f78ed4901f508dc02b/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ce4929ab6d638190706482f78ed4901f508dc02b/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=ce4929ab6d638190706482f78ed4901f508dc02b",
        "patch": "@@ -1312,7 +1312,7 @@ void UpdateCoins(const CTransaction& tx, CValidationState &state, CCoinsViewCach\n \n bool CScriptCheck::operator()() const {\n     const CScript &scriptSig = ptxTo->vin[nIn].scriptSig;\n-    if (!VerifyScript(scriptSig, scriptPubKey, nFlags, CachingSignatureChecker(*ptxTo, nIn, cacheStore)))\n+    if (!VerifyScript(scriptSig, scriptPubKey, nFlags, CachingSignatureChecker(TxSignatureHasher(*ptxTo, nIn), cacheStore)))\n         return error(\"CScriptCheck() : %s:%d VerifySignature failed\", ptxTo->GetHash().ToString(), nIn);\n     return true;\n }"
      },
      {
        "sha": "3ed13cfc0ea7f6213cefac94d0b40b90e79a9106",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ce4929ab6d638190706482f78ed4901f508dc02b/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ce4929ab6d638190706482f78ed4901f508dc02b/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=ce4929ab6d638190706482f78ed4901f508dc02b",
        "patch": "@@ -684,11 +684,12 @@ Value signrawtransaction(const Array& params, bool fHelp)\n         if (!fHashSingle || (i < mergedTx.vout.size()))\n             SignSignature(keystore, prevPubKey, mergedTx, i, nHashType);\n \n+        TxSignatureHasher hasher(mergedTx, i);\n         // ... and merge in other signatures:\n         BOOST_FOREACH(const CMutableTransaction& txv, txVariants) {\n             txin.scriptSig = CombineSignatures(prevPubKey, mergedTx, i, txin.scriptSig, txv.vin[i].scriptSig);\n         }\n-        if (!VerifyScript(txin.scriptSig, prevPubKey, STANDARD_SCRIPT_VERIFY_FLAGS, SignatureChecker(mergedTx, i)))\n+        if (!VerifyScript(txin.scriptSig, prevPubKey, STANDARD_SCRIPT_VERIFY_FLAGS, SignatureChecker(hasher)))\n             fComplete = false;\n     }\n "
      },
      {
        "sha": "c9193c89298dfc379bce701ba00f3ce528658c57",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ce4929ab6d638190706482f78ed4901f508dc02b/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ce4929ab6d638190706482f78ed4901f508dc02b/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=ce4929ab6d638190706482f78ed4901f508dc02b",
        "patch": "@@ -79,7 +79,7 @@ class SignatureChecker : public BaseSignatureChecker\n     virtual bool VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& vchPubKey, const uint256& sighash) const;\n \n public:\n-    SignatureChecker(const CTransaction& txToIn, unsigned int nIn) : hasher(TxSignatureHasher(txToIn, nIn)) { }\n+    SignatureChecker(const TxSignatureHasher& hasherIn) : hasher(hasherIn) { }\n     bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode) const;\n };\n "
      },
      {
        "sha": "5e757a58fe2316910a4a5be2649029a5465de890",
        "filename": "src/script/sigcache.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ce4929ab6d638190706482f78ed4901f508dc02b/src/script/sigcache.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ce4929ab6d638190706482f78ed4901f508dc02b/src/script/sigcache.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sigcache.h?ref=ce4929ab6d638190706482f78ed4901f508dc02b",
        "patch": "@@ -18,7 +18,7 @@ class CachingSignatureChecker : public SignatureChecker\n     bool store;\n \n public:\n-    CachingSignatureChecker(const CTransaction& txToIn, unsigned int nInIn, bool storeIn=true) : SignatureChecker(txToIn, nInIn), store(storeIn) {}\n+    CachingSignatureChecker(const TxSignatureHasher& hasherIn, bool storeIn=true) : SignatureChecker(hasherIn), store(storeIn) { }\n \n     bool VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& vchPubKey, const uint256& sighash) const;\n };"
      },
      {
        "sha": "8c4bc938d6ddc15703bfcf0122ecd63ad9d3e99e",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ce4929ab6d638190706482f78ed4901f508dc02b/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ce4929ab6d638190706482f78ed4901f508dc02b/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=ce4929ab6d638190706482f78ed4901f508dc02b",
        "patch": "@@ -124,7 +124,7 @@ bool SignSignature(const CKeyStore &keystore, const CScript& fromPubKey, CMutabl\n     }\n \n     // Test solution\n-    return VerifyScript(txin.scriptSig, fromPubKey, STANDARD_SCRIPT_VERIFY_FLAGS, SignatureChecker(txTo, nIn));\n+    return VerifyScript(txin.scriptSig, fromPubKey, STANDARD_SCRIPT_VERIFY_FLAGS, SignatureChecker(hasher));\n }\n \n bool SignSignature(const CKeyStore &keystore, const CTransaction& txFrom, CMutableTransaction& txTo, unsigned int nIn, int nHashType)\n@@ -167,6 +167,7 @@ static CScript CombineMultisig(CScript scriptPubKey, const CMutableTransaction&\n     unsigned int nSigsRequired = vSolutions.front()[0];\n     unsigned int nPubKeys = vSolutions.size()-2;\n     map<valtype, valtype> sigs;\n+    TxSignatureHasher hasher(txTo, nIn);\n     BOOST_FOREACH(const valtype& sig, allsigs)\n     {\n         for (unsigned int i = 0; i < nPubKeys; i++)\n@@ -175,7 +176,7 @@ static CScript CombineMultisig(CScript scriptPubKey, const CMutableTransaction&\n             if (sigs.count(pubkey))\n                 continue; // Already got a sig for this pubkey\n \n-            if (SignatureChecker(txTo, nIn).CheckSig(sig, pubkey, scriptPubKey))\n+            if (SignatureChecker(hasher).CheckSig(sig, pubkey, scriptPubKey))\n             {\n                 sigs[pubkey] = sig;\n                 break;"
      },
      {
        "sha": "11d54e93d0b5a87972096b3f34656516ab68f856",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 18,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ce4929ab6d638190706482f78ed4901f508dc02b/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ce4929ab6d638190706482f78ed4901f508dc02b/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=ce4929ab6d638190706482f78ed4901f508dc02b",
        "patch": "@@ -25,10 +25,9 @@ typedef vector<unsigned char> valtype;\n \n BOOST_AUTO_TEST_SUITE(multisig_tests)\n \n-CScript\n-sign_multisig(CScript scriptPubKey, vector<CKey> keys, CTransaction transaction, int whichIn)\n+CScript sign_multisig(CScript scriptPubKey, vector<CKey> keys, const TxSignatureHasher& hasher)\n {\n-    uint256 hash = TxSignatureHasher(transaction, whichIn).SignatureHash(scriptPubKey, SIGHASH_ALL);\n+    uint256 hash = hasher.SignatureHash(scriptPubKey, SIGHASH_ALL);\n \n     CScript result;\n     result << OP_0; // CHECKMULTISIG bug workaround\n@@ -79,53 +78,58 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n     CScript s;\n \n     // Test a AND b:\n+    TxSignatureHasher hasherAnd(txTo[0], 0);\n+    SignatureChecker checkerAnd(hasherAnd);\n     keys.clear();\n     keys += key[0],key[1]; // magic operator+= from boost.assign\n-    s = sign_multisig(a_and_b, keys, txTo[0], 0);\n-    BOOST_CHECK(VerifyScript(s, a_and_b, flags, SignatureChecker(txTo[0], 0)));\n+    s = sign_multisig(a_and_b, keys, hasherAnd);\n+    BOOST_CHECK(VerifyScript(s, a_and_b, flags, checkerAnd));\n \n     for (int i = 0; i < 4; i++)\n     {\n         keys.clear();\n         keys += key[i];\n-        s = sign_multisig(a_and_b, keys, txTo[0], 0);\n-        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, flags, SignatureChecker(txTo[0], 0)), strprintf(\"a&b 1: %d\", i));\n+        s = sign_multisig(a_and_b, keys, hasherAnd);\n+        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, flags, checkerAnd), strprintf(\"a&b 1: %d\", i));\n \n         keys.clear();\n         keys += key[1],key[i];\n-        s = sign_multisig(a_and_b, keys, txTo[0], 0);\n-        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, flags, SignatureChecker(txTo[0], 0)), strprintf(\"a&b 2: %d\", i));\n+        s = sign_multisig(a_and_b, keys, hasherAnd);\n+        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, flags, checkerAnd), strprintf(\"a&b 2: %d\", i));\n     }\n \n     // Test a OR b:\n+    TxSignatureHasher hasherOr(txTo[1], 0);\n+    SignatureChecker checkerOr(hasherOr);\n     for (int i = 0; i < 4; i++)\n     {\n         keys.clear();\n         keys += key[i];\n-        s = sign_multisig(a_or_b, keys, txTo[1], 0);\n+        s = sign_multisig(a_or_b, keys, hasherOr);\n         if (i == 0 || i == 1)\n-            BOOST_CHECK_MESSAGE(VerifyScript(s, a_or_b, flags, SignatureChecker(txTo[1], 0)), strprintf(\"a|b: %d\", i));\n+            BOOST_CHECK_MESSAGE(VerifyScript(s, a_or_b, flags, checkerOr), strprintf(\"a|b: %d\", i));\n         else\n-            BOOST_CHECK_MESSAGE(!VerifyScript(s, a_or_b, flags, SignatureChecker(txTo[1], 0)), strprintf(\"a|b: %d\", i));\n+            BOOST_CHECK_MESSAGE(!VerifyScript(s, a_or_b, flags, checkerOr), strprintf(\"a|b: %d\", i));\n     }\n     s.clear();\n     s << OP_0 << OP_0;\n-    BOOST_CHECK(!VerifyScript(s, a_or_b, flags, SignatureChecker(txTo[1], 0)));\n+    BOOST_CHECK(!VerifyScript(s, a_or_b, flags, checkerOr));\n     s.clear();\n     s << OP_0 << OP_1;\n-    BOOST_CHECK(!VerifyScript(s, a_or_b, flags, SignatureChecker(txTo[1], 0)));\n-\n+    BOOST_CHECK(!VerifyScript(s, a_or_b, flags, checkerOr));\n \n+    TxSignatureHasher hasherEscrow(txTo[2], 0);\n+    SignatureChecker checkerEscrow(hasherEscrow);\n     for (int i = 0; i < 4; i++)\n         for (int j = 0; j < 4; j++)\n         {\n             keys.clear();\n             keys += key[i],key[j];\n-            s = sign_multisig(escrow, keys, txTo[2], 0);\n+            s = sign_multisig(escrow, keys, hasherEscrow);\n             if (i < j && i < 3 && j < 3)\n-                BOOST_CHECK_MESSAGE(VerifyScript(s, escrow, flags, SignatureChecker(txTo[2], 0)), strprintf(\"escrow 1: %d %d\", i, j));\n+                BOOST_CHECK_MESSAGE(VerifyScript(s, escrow, flags, checkerEscrow), strprintf(\"escrow 1: %d %d\", i, j));\n             else\n-                BOOST_CHECK_MESSAGE(!VerifyScript(s, escrow, flags, SignatureChecker(txTo[2], 0)), strprintf(\"escrow 2: %d %d\", i, j));\n+                BOOST_CHECK_MESSAGE(!VerifyScript(s, escrow, flags, checkerEscrow), strprintf(\"escrow 2: %d %d\", i, j));\n         }\n }\n "
      },
      {
        "sha": "1dd8facbefc87b59838561ffc59416061642ed00",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ce4929ab6d638190706482f78ed4901f508dc02b/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ce4929ab6d638190706482f78ed4901f508dc02b/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=ce4929ab6d638190706482f78ed4901f508dc02b",
        "patch": "@@ -42,7 +42,7 @@ Verify(const CScript& scriptSig, const CScript& scriptPubKey, bool fStrict)\n     txTo.vin[0].scriptSig = scriptSig;\n     txTo.vout[0].nValue = 1;\n \n-    return VerifyScript(scriptSig, scriptPubKey, fStrict ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE, SignatureChecker(txTo, 0));\n+    return VerifyScript(scriptSig, scriptPubKey, fStrict ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE, SignatureChecker(TxSignatureHasher(txTo, 0)));\n }\n \n "
      },
      {
        "sha": "a355a1349e610315bc051f4a3f418695f2e24b8d",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 14,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ce4929ab6d638190706482f78ed4901f508dc02b/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ce4929ab6d638190706482f78ed4901f508dc02b/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=ce4929ab6d638190706482f78ed4901f508dc02b",
        "patch": "@@ -93,7 +93,7 @@ CMutableTransaction BuildSpendingTransaction(const CScript& scriptSig, const CMu\n \n void DoTest(const CScript& scriptPubKey, const CScript& scriptSig, int flags, bool expect, const std::string& message)\n {\n-    BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, scriptPubKey, flags, SignatureChecker(BuildSpendingTransaction(scriptSig, BuildCreditingTransaction(scriptPubKey)), 0)) == expect, message);\n+    BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, scriptPubKey, flags, SignatureChecker(TxSignatureHasher(BuildSpendingTransaction(scriptSig, BuildCreditingTransaction(scriptPubKey)), 0))) == expect, message);\n }\n \n namespace\n@@ -589,15 +589,17 @@ BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG12)\n     CMutableTransaction txTo12 = BuildSpendingTransaction(CScript(), txFrom12);\n \n     CScript goodsig1 = sign_multisig(scriptPubKey12, key1, txTo12);\n-    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey12, flags, SignatureChecker(txTo12, 0)));\n+    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey12, flags, SignatureChecker(TxSignatureHasher(txTo12, 0))));\n     txTo12.vout[0].nValue = 2;\n-    BOOST_CHECK(!VerifyScript(goodsig1, scriptPubKey12, flags, SignatureChecker(txTo12, 0)));\n+    TxSignatureHasher hasher(txTo12, 0);\n+    SignatureChecker checker(hasher);\n+    BOOST_CHECK(!VerifyScript(goodsig1, scriptPubKey12, flags, checker));\n \n     CScript goodsig2 = sign_multisig(scriptPubKey12, key2, txTo12);\n-    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey12, flags, SignatureChecker(txTo12, 0)));\n+    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey12, flags, checker));\n \n     CScript badsig1 = sign_multisig(scriptPubKey12, key3, txTo12);\n-    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey12, flags, SignatureChecker(txTo12, 0)));\n+    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey12, flags, checker));\n }\n \n BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG23)\n@@ -614,49 +616,51 @@ BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG23)\n     CMutableTransaction txFrom23 = BuildCreditingTransaction(scriptPubKey23);\n     CMutableTransaction txTo23 = BuildSpendingTransaction(CScript(), txFrom23);\n \n+    TxSignatureHasher hasher(txTo23, 0);\n+    SignatureChecker checker(hasher);\n     std::vector<CKey> keys;\n     keys.push_back(key1); keys.push_back(key2);\n     CScript goodsig1 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey23, flags, SignatureChecker(txTo23, 0)));\n+    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey23, flags, checker));\n \n     keys.clear();\n     keys.push_back(key1); keys.push_back(key3);\n     CScript goodsig2 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey23, flags, SignatureChecker(txTo23, 0)));\n+    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey23, flags, checker));\n \n     keys.clear();\n     keys.push_back(key2); keys.push_back(key3);\n     CScript goodsig3 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(VerifyScript(goodsig3, scriptPubKey23, flags, SignatureChecker(txTo23, 0)));\n+    BOOST_CHECK(VerifyScript(goodsig3, scriptPubKey23, flags, checker));\n \n     keys.clear();\n     keys.push_back(key2); keys.push_back(key2); // Can't re-use sig\n     CScript badsig1 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey23, flags, SignatureChecker(txTo23, 0)));\n+    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey23, flags, checker));\n \n     keys.clear();\n     keys.push_back(key2); keys.push_back(key1); // sigs must be in correct order\n     CScript badsig2 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig2, scriptPubKey23, flags, SignatureChecker(txTo23, 0)));\n+    BOOST_CHECK(!VerifyScript(badsig2, scriptPubKey23, flags, checker));\n \n     keys.clear();\n     keys.push_back(key3); keys.push_back(key2); // sigs must be in correct order\n     CScript badsig3 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig3, scriptPubKey23, flags, SignatureChecker(txTo23, 0)));\n+    BOOST_CHECK(!VerifyScript(badsig3, scriptPubKey23, flags, checker));\n \n     keys.clear();\n     keys.push_back(key4); keys.push_back(key2); // sigs must match pubkeys\n     CScript badsig4 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig4, scriptPubKey23, flags, SignatureChecker(txTo23, 0)));\n+    BOOST_CHECK(!VerifyScript(badsig4, scriptPubKey23, flags, checker));\n \n     keys.clear();\n     keys.push_back(key1); keys.push_back(key4); // sigs must match pubkeys\n     CScript badsig5 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig5, scriptPubKey23, flags, SignatureChecker(txTo23, 0)));\n+    BOOST_CHECK(!VerifyScript(badsig5, scriptPubKey23, flags, checker));\n \n     keys.clear(); // Must have signatures\n     CScript badsig6 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig6, scriptPubKey23, flags, SignatureChecker(txTo23, 0)));\n+    BOOST_CHECK(!VerifyScript(badsig6, scriptPubKey23, flags, checker));\n }    \n \n BOOST_AUTO_TEST_CASE(script_combineSigs)"
      },
      {
        "sha": "fa26b08db0e8d87fbf1f92eaf1af007c72f8117e",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ce4929ab6d638190706482f78ed4901f508dc02b/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ce4929ab6d638190706482f78ed4901f508dc02b/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=ce4929ab6d638190706482f78ed4901f508dc02b",
        "patch": "@@ -137,10 +137,9 @@ BOOST_AUTO_TEST_CASE(tx_valid)\n                     break;\n                 }\n \n+                TxSignatureHasher hasher(tx, i);\n                 unsigned int verify_flags = ParseScriptFlags(test[2].get_str());\n-                BOOST_CHECK_MESSAGE(VerifyScript(tx.vin[i].scriptSig, mapprevOutScriptPubKeys[tx.vin[i].prevout],\n-                                                 verify_flags, SignatureChecker(tx, i)),\n-                                    strTest);\n+                BOOST_CHECK_MESSAGE(VerifyScript(tx.vin[i].scriptSig, mapprevOutScriptPubKeys[tx.vin[i].prevout], verify_flags, SignatureChecker(hasher)), strTest);\n             }\n         }\n     }\n@@ -211,8 +210,7 @@ BOOST_AUTO_TEST_CASE(tx_invalid)\n                 }\n \n                 unsigned int verify_flags = ParseScriptFlags(test[2].get_str());\n-                fValid = VerifyScript(tx.vin[i].scriptSig, mapprevOutScriptPubKeys[tx.vin[i].prevout],\n-                                      verify_flags, SignatureChecker(tx, i));\n+                fValid = VerifyScript(tx.vin[i].scriptSig, mapprevOutScriptPubKeys[tx.vin[i].prevout], verify_flags, SignatureChecker(TxSignatureHasher(tx, i)));\n             }\n \n             BOOST_CHECK_MESSAGE(!fValid, strTest);"
      }
    ]
  }
]