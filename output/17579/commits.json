[
  {
    "sha": "a1d5b12ec07d2f7aa9fa955a6dd99e8a2be5cb25",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMWQ1YjEyZWMwN2QyZjdhYTlmYTk1NWE2ZGQ5OWU4YTJiZTVjYjI1",
    "commit": {
      "author": {
        "name": "Andrew Toth",
        "email": "andrewstoth@gmail.com",
        "date": "2020-03-27T18:25:40Z"
      },
      "committer": {
        "name": "Andrew Toth",
        "email": "andrewstoth@gmail.com",
        "date": "2020-03-27T18:26:00Z"
      },
      "message": "Merge getreceivedby tally into GetReceived function",
      "tree": {
        "sha": "b9fcb9341b8fb5fe5fe88c327feec0c0ba9f081a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b9fcb9341b8fb5fe5fe88c327feec0c0ba9f081a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a1d5b12ec07d2f7aa9fa955a6dd99e8a2be5cb25",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1d5b12ec07d2f7aa9fa955a6dd99e8a2be5cb25",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a1d5b12ec07d2f7aa9fa955a6dd99e8a2be5cb25",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1d5b12ec07d2f7aa9fa955a6dd99e8a2be5cb25/comments",
    "author": {
      "login": "andrewtoth",
      "id": 237213,
      "node_id": "MDQ6VXNlcjIzNzIxMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/andrewtoth",
      "html_url": "https://github.com/andrewtoth",
      "followers_url": "https://api.github.com/users/andrewtoth/followers",
      "following_url": "https://api.github.com/users/andrewtoth/following{/other_user}",
      "gists_url": "https://api.github.com/users/andrewtoth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/andrewtoth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
      "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
      "repos_url": "https://api.github.com/users/andrewtoth/repos",
      "events_url": "https://api.github.com/users/andrewtoth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "andrewtoth",
      "id": 237213,
      "node_id": "MDQ6VXNlcjIzNzIxMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/andrewtoth",
      "html_url": "https://github.com/andrewtoth",
      "followers_url": "https://api.github.com/users/andrewtoth/followers",
      "following_url": "https://api.github.com/users/andrewtoth/following{/other_user}",
      "gists_url": "https://api.github.com/users/andrewtoth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/andrewtoth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
      "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
      "repos_url": "https://api.github.com/users/andrewtoth/repos",
      "events_url": "https://api.github.com/users/andrewtoth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "210b533a114462473024c92a20a0765001abd45d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/210b533a114462473024c92a20a0765001abd45d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/210b533a114462473024c92a20a0765001abd45d"
      }
    ],
    "stats": {
      "total": 106,
      "additions": 48,
      "deletions": 58
    },
    "files": [
      {
        "sha": "52a5ecec36e927730d46b10b723ff338ff8bf437",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 48,
        "deletions": 58,
        "changes": 106,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a1d5b12ec07d2f7aa9fa955a6dd99e8a2be5cb25/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a1d5b12ec07d2f7aa9fa955a6dd99e8a2be5cb25/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=a1d5b12ec07d2f7aa9fa955a6dd99e8a2be5cb25",
        "patch": "@@ -576,6 +576,52 @@ static UniValue signmessage(const JSONRPCRequest& request)\n     return signature;\n }\n \n+static CAmount GetReceived(interfaces::Chain::Lock& locked_chain, const CWallet& wallet, const UniValue& params, bool by_label) EXCLUSIVE_LOCKS_REQUIRED(wallet.cs_wallet)\n+{\n+    std::set<CTxDestination> address_set;\n+\n+    if (by_label) {\n+        // Get the set of addresses assigned to label\n+        std::string label = LabelFromValue(params[0]);\n+        address_set = wallet.GetLabelAddresses(label);\n+    } else {\n+        // Get the address\n+        CTxDestination dest = DecodeDestination(params[0].get_str());\n+        if (!IsValidDestination(dest)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n+        }\n+        CScript script_pub_key = GetScriptForDestination(dest);\n+        if (!wallet.IsMine(script_pub_key)) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Address not found in wallet\");\n+        }\n+        address_set.insert(dest);\n+    }\n+\n+    // Minimum confirmations\n+    int min_depth = 1;\n+    if (!params[1].isNull())\n+        min_depth = params[1].get_int();\n+\n+    // Tally\n+    CAmount amount = 0;\n+    for (const std::pair<const uint256, CWalletTx>& wtx_pair : wallet.mapWallet) {\n+        const CWalletTx& wtx = wtx_pair.second;\n+        if (wtx.IsCoinBase() || !locked_chain.checkFinalTx(*wtx.tx) || wtx.GetDepthInMainChain() < min_depth) {\n+            continue;\n+        }\n+\n+        for (const CTxOut& txout : wtx.tx->vout) {\n+            CTxDestination address;\n+            if (ExtractDestination(txout.scriptPubKey, address) && wallet.IsMine(address) && address_set.count(address)) {\n+                amount += txout.nValue;\n+            }\n+        }\n+    }\n+\n+    return amount;\n+}\n+\n+\n static UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n@@ -613,36 +659,7 @@ static UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n     auto locked_chain = pwallet->chain().lock();\n     LOCK(pwallet->cs_wallet);\n \n-    // Bitcoin address\n-    CTxDestination dest = DecodeDestination(request.params[0].get_str());\n-    if (!IsValidDestination(dest)) {\n-        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n-    }\n-    CScript scriptPubKey = GetScriptForDestination(dest);\n-    if (!pwallet->IsMine(scriptPubKey)) {\n-        throw JSONRPCError(RPC_WALLET_ERROR, \"Address not found in wallet\");\n-    }\n-\n-    // Minimum confirmations\n-    int nMinDepth = 1;\n-    if (!request.params[1].isNull())\n-        nMinDepth = request.params[1].get_int();\n-\n-    // Tally\n-    CAmount nAmount = 0;\n-    for (const std::pair<const uint256, CWalletTx>& pairWtx : pwallet->mapWallet) {\n-        const CWalletTx& wtx = pairWtx.second;\n-        if (wtx.IsCoinBase() || !locked_chain->checkFinalTx(*wtx.tx)) {\n-            continue;\n-        }\n-\n-        for (const CTxOut& txout : wtx.tx->vout)\n-            if (txout.scriptPubKey == scriptPubKey)\n-                if (wtx.GetDepthInMainChain() >= nMinDepth)\n-                    nAmount += txout.nValue;\n-    }\n-\n-    return  ValueFromAmount(nAmount);\n+    return ValueFromAmount(GetReceived(*locked_chain, *pwallet, request.params, /* by_label */ false));\n }\n \n \n@@ -683,34 +700,7 @@ static UniValue getreceivedbylabel(const JSONRPCRequest& request)\n     auto locked_chain = pwallet->chain().lock();\n     LOCK(pwallet->cs_wallet);\n \n-    // Minimum confirmations\n-    int nMinDepth = 1;\n-    if (!request.params[1].isNull())\n-        nMinDepth = request.params[1].get_int();\n-\n-    // Get the set of pub keys assigned to label\n-    std::string label = LabelFromValue(request.params[0]);\n-    std::set<CTxDestination> setAddress = pwallet->GetLabelAddresses(label);\n-\n-    // Tally\n-    CAmount nAmount = 0;\n-    for (const std::pair<const uint256, CWalletTx>& pairWtx : pwallet->mapWallet) {\n-        const CWalletTx& wtx = pairWtx.second;\n-        if (wtx.IsCoinBase() || !locked_chain->checkFinalTx(*wtx.tx)) {\n-            continue;\n-        }\n-\n-        for (const CTxOut& txout : wtx.tx->vout)\n-        {\n-            CTxDestination address;\n-            if (ExtractDestination(txout.scriptPubKey, address) && pwallet->IsMine(address) && setAddress.count(address)) {\n-                if (wtx.GetDepthInMainChain() >= nMinDepth)\n-                    nAmount += txout.nValue;\n-            }\n-        }\n-    }\n-\n-    return ValueFromAmount(nAmount);\n+    return ValueFromAmount(GetReceived(*locked_chain, *pwallet, request.params, /* by_label */ true));\n }\n \n "
      }
    ]
  }
]