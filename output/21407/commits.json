[
  {
    "sha": "80a5a8ea2b7ad512c74c29df5b504e9be6cf23a0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MGE1YThlYTJiN2FkNTEyYzc0YzI5ZGY1YjUwNGU5YmU2Y2YyM2Ew",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-03-10T11:07:08Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-03-16T10:00:57Z"
      },
      "message": "i2p: limit the size of incoming messages\n\nPut a limit on the amount of data `Sock::RecvUntilTerminator()` can read\nif no terminator is received.\n\nIn the case of I2P this avoids a runaway (or malicious) I2P proxy\nsending us tons of data without a terminator before a timeout is\ntriggered.",
      "tree": {
        "sha": "4afdcf0bdbde9a1692073c09d5f66aa04efc3a5c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4afdcf0bdbde9a1692073c09d5f66aa04efc3a5c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/80a5a8ea2b7ad512c74c29df5b504e9be6cf23a0",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmBQgdkACgkQVN8G9ktV\ny79zmh//f68JIZWXQZyz9v0BaidYEZ8nWS8rXsHk5GM9YxbzOfMhRsZxgAVrq8lZ\n4dn8eGgX9lSWJ/Cl4dHWAkj6pmaFVHhVFN8rp3oO+0NdAs7dZBQ4/1hnicAIuS7q\n4QQ60t4uNArhuFcvDEcm3wIlxtDO0eXMdjM7IHLXd2l2hWEXqt1AoeJP3lR0Ocg3\nQl8kBB3pK263APSKlr4iJBZ3f/qZS0q8LuGlmyHUVnd+62fDWlIauVjEwa8+z1ly\nZ3eZpPDHtdW4aXSZzwr0XttdjlPG7e571G96nWBfm1sBJOKWHR3t3v0A49M/1XEh\noiI2eZspI0ZWg2CWwMuvzBwUNCkGcADMJqHuYnpVCGobdsNSONQFjH5mTmCpoiLl\n4hehTZbRExMdo4T8h/5piIuK9mRBTSxs9PXW7qD25bFeNZMeSOloiVn0SXKqUEL3\n7yXOCR3o76IzG50XCuD9q4DxsCrI07aPZ4fGpOZEesUSJEU8KeQu82Sjrp0CE08f\ndL2dfkSViMTeZEFvFDXuLGoXEV0bBe0aLgjBPYk9BPr0CGM3lZQrbegfrYwhkgpF\nKWWRBEqg3OFacXpAjHYrEywMFQsqv9DjbPi/iGZl2jWt0gM7/pLb+SlkLknpscyi\nxs/oY90XPGYPhKYMXO4/yWcnU59g8KLnxN8Sgfto4Q/n3Ol0oc3/IB+i/RE5rPtk\nsmDIu7RSdlbQVtuujJSwWDGUn3uUPxbqJn+7DRBlGQyxhWNPn3cNoGNWmfqN1+Fc\nms13aATYyuectcUGG5sYQV38InTMDuBTywjSI/zDwHBTAKxrnDBQiV3Cvwe4hhje\noEsLKgY/zXod4WqpqGyKFBxlQU9T5wjmf/WFt+LcoQcGSl0GIrlEPUpaRFnkzA/E\nq9pUfINPTjSB/XhWA6ASW1msanqEhmCPbJ0NclyuO6JSkPuF8JH5Mh71z2Q12/XG\nZmjrCuyY47TCRYtz6sxe/yz9yw0oBgOsSzUp2GvJf3FzjtZO0G9GLnP8Iyc3vEMc\nd6aP96FbbkDfuWcFV1KLEQiDicjwdaOnWeOsJqFLStVPkr3JM3dGCyHnyyVg0JWN\nvNaggwJQUXFUD/7o7kIq//hDfmCDmOAzTiByw71EQ/t0iHozJKfYJ49xiF+apXgT\nAZSmlgwFlInKX3k+BZ7ItJCyxyGHa+/kqCG4jFAjJhUfrGy5KaSAzzKir7ibGIXU\nFpCNh/qzWsLk5PpfmJyz/NMf8dDlxfNHP5HO/EwEDTzN1bhm0r4zvYC0q4euW4KN\nyvzbhrYRk1hdHLDT/eeFx949YcZr5AmwLSZD1M4zQOYMhH3H4upL7oYyVk5rOJQ6\nafdQK293zp4aiQd+opTk8Idd2nBudg==\n=F2tH\n-----END PGP SIGNATURE-----",
        "payload": "tree 4afdcf0bdbde9a1692073c09d5f66aa04efc3a5c\nparent 7cdadf91d513250b983b6a1c4672a6acc0dcf074\nauthor Vasil Dimov <vd@FreeBSD.org> 1615374428 +0100\ncommitter Vasil Dimov <vd@FreeBSD.org> 1615888857 +0100\n\ni2p: limit the size of incoming messages\n\nPut a limit on the amount of data `Sock::RecvUntilTerminator()` can read\nif no terminator is received.\n\nIn the case of I2P this avoids a runaway (or malicious) I2P proxy\nsending us tons of data without a terminator before a timeout is\ntriggered.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80a5a8ea2b7ad512c74c29df5b504e9be6cf23a0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/80a5a8ea2b7ad512c74c29df5b504e9be6cf23a0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80a5a8ea2b7ad512c74c29df5b504e9be6cf23a0/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7cdadf91d513250b983b6a1c4672a6acc0dcf074",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7cdadf91d513250b983b6a1c4672a6acc0dcf074",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7cdadf91d513250b983b6a1c4672a6acc0dcf074"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 22,
      "deletions": 5
    },
    "files": [
      {
        "sha": "d16c620d88eed2635d455927241d3f2ab3cf707a",
        "filename": "src/i2p.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80a5a8ea2b7ad512c74c29df5b504e9be6cf23a0/src/i2p.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80a5a8ea2b7ad512c74c29df5b504e9be6cf23a0/src/i2p.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/i2p.cpp?ref=80a5a8ea2b7ad512c74c29df5b504e9be6cf23a0",
        "patch": "@@ -153,7 +153,7 @@ bool Session::Accept(Connection& conn)\n             }\n \n             const std::string& peer_dest =\n-                conn.sock.RecvUntilTerminator('\\n', MAX_WAIT_FOR_IO, *m_interrupt);\n+                conn.sock.RecvUntilTerminator('\\n', MAX_WAIT_FOR_IO, *m_interrupt, MAX_MSG_SIZE);\n \n             conn.peer = CService(DestB64ToAddr(peer_dest), Params().GetDefaultPort());\n \n@@ -252,7 +252,7 @@ Session::Reply Session::SendRequestAndGetReply(const Sock& sock,\n     // signaled.\n     static constexpr auto recv_timeout = 3min;\n \n-    reply.full = sock.RecvUntilTerminator('\\n', recv_timeout, *m_interrupt);\n+    reply.full = sock.RecvUntilTerminator('\\n', recv_timeout, *m_interrupt, MAX_MSG_SIZE);\n \n     for (const auto& kv : spanparsing::Split(reply.full, ' ')) {\n         const auto& pos = std::find(kv.begin(), kv.end(), '=');"
      },
      {
        "sha": "1ebe7d03298330d3f12fd265222b017108506d5b",
        "filename": "src/i2p.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80a5a8ea2b7ad512c74c29df5b504e9be6cf23a0/src/i2p.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80a5a8ea2b7ad512c74c29df5b504e9be6cf23a0/src/i2p.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/i2p.h?ref=80a5a8ea2b7ad512c74c29df5b504e9be6cf23a0",
        "patch": "@@ -40,6 +40,14 @@ struct Connection {\n \n namespace sam {\n \n+/**\n+ * The maximum size of an incoming message from the I2P SAM proxy (in bytes).\n+ * Used to avoid a runaway proxy from sending us an \"unlimited\" amount of data without a terminator.\n+ * The longest known message is ~1400 bytes, so this is high enough not to be triggered during\n+ * normal operation, yet low enough to avoid a malicious proxy from filling our memory.\n+ */\n+static constexpr size_t MAX_MSG_SIZE{65536};\n+\n /**\n  * I2P SAM session.\n  */"
      },
      {
        "sha": "f9ecfef5d449df4c618bac2497b8a5ea38055e40",
        "filename": "src/util/sock.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80a5a8ea2b7ad512c74c29df5b504e9be6cf23a0/src/util/sock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80a5a8ea2b7ad512c74c29df5b504e9be6cf23a0/src/util/sock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/sock.cpp?ref=80a5a8ea2b7ad512c74c29df5b504e9be6cf23a0",
        "patch": "@@ -175,7 +175,8 @@ void Sock::SendComplete(const std::string& data,\n \n std::string Sock::RecvUntilTerminator(uint8_t terminator,\n                                       std::chrono::milliseconds timeout,\n-                                      CThreadInterrupt& interrupt) const\n+                                      CThreadInterrupt& interrupt,\n+                                      size_t max_data) const\n {\n     const auto deadline = GetTime<std::chrono::milliseconds>() + timeout;\n     std::string data;\n@@ -190,9 +191,14 @@ std::string Sock::RecvUntilTerminator(uint8_t terminator,\n     // at a time is about 50 times slower.\n \n     for (;;) {\n+        if (data.size() >= max_data) {\n+            throw std::runtime_error(\n+                strprintf(\"Received too many bytes without a terminator (%u)\", data.size()));\n+        }\n+\n         char buf[512];\n \n-        const ssize_t peek_ret{Recv(buf, sizeof(buf), MSG_PEEK)};\n+        const ssize_t peek_ret{Recv(buf, std::min(sizeof(buf), max_data - data.size()), MSG_PEEK)};\n \n         switch (peek_ret) {\n         case -1: {"
      },
      {
        "sha": "4b0618dcffdd22ee6c349c178c2c143e435f81e4",
        "filename": "src/util/sock.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80a5a8ea2b7ad512c74c29df5b504e9be6cf23a0/src/util/sock.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80a5a8ea2b7ad512c74c29df5b504e9be6cf23a0/src/util/sock.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/sock.h?ref=80a5a8ea2b7ad512c74c29df5b504e9be6cf23a0",
        "patch": "@@ -135,13 +135,16 @@ class Sock\n      * @param[in] terminator Character up to which to read from the socket.\n      * @param[in] timeout Timeout for the entire operation.\n      * @param[in] interrupt If this is signaled then the operation is canceled.\n+     * @param[in] max_data The maximum amount of data (in bytes) to receive. If this many bytes\n+     * are received and there is still no terminator, then this method will throw an exception.\n      * @return The data that has been read, without the terminating character.\n      * @throws std::runtime_error if the operation cannot be completed. In this case some bytes may\n      * have been consumed from the socket.\n      */\n     virtual std::string RecvUntilTerminator(uint8_t terminator,\n                                             std::chrono::milliseconds timeout,\n-                                            CThreadInterrupt& interrupt) const;\n+                                            CThreadInterrupt& interrupt,\n+                                            size_t max_data) const;\n \n     /**\n      * Check if still connected."
      }
    ]
  },
  {
    "sha": "7059e6d82275b44efc41675ee10760145b6c1073",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MDU5ZTZkODIyNzViNDRlZmM0MTY3NWVlMTA3NjAxNDViNmMxMDcz",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-03-11T14:09:39Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-03-16T10:00:57Z"
      },
      "message": "test: add a test to ensure RecvUntilTerminator() limit works",
      "tree": {
        "sha": "ef4fb60f4df2f9845277e8880e568ca46b4f4d2d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ef4fb60f4df2f9845277e8880e568ca46b4f4d2d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7059e6d82275b44efc41675ee10760145b6c1073",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmBQgdkACgkQVN8G9ktV\ny7/8/h//Ra+2VYOSYxuPjKR9qRMd0jdPi9UUkN49SFKFKQ3r3pwY5GB/cOdD4+0Q\npwtrC0zNDmnOUqzRbNXGFZgxphitQhytLPJrOt8lSQFHUo/eka0yoVR1YBBV89JR\nu1d+cw3xcujn3mmSoGL/ZlUEbJH1IInPPC8Oj3vVtugAV3YF5Kjdm/yvQHUg2GUi\nJeDDar8+h7izpxUI1kFfYfrXQvFu+aPJaVY87Om/kzfDgJM3ixrCTeLI1Feg8WWu\n5TjLHLsqQDPcy5r5zwo/6oX1BHMbWznMP5+UkbdNszpppuaEP3cYZdgo3zzTHZb1\n2gHb6HaxQ1KIyR3KhIVhOj83R7MuzsgDszXO5Y2rdbmbtG4GRzooNYFsW2PEFVfj\nXs6K6Fko6WmYy1Yi+khD87UIHvSkS4XGwnDN704P+/4FWImXyVd7ZCVRLIq/RuU6\ndw4ORP8IntWh7yszhEoMphvjUZekJlHjqi8cIHn9ePwck8U3Y77VjnCcEusoHgZA\nNyUPEWquuLorPPubHL+jebmwhlCqMecbkCwvblaUK3YeVpcSlDPJPtKiVUlaDeUN\nw7MgERfBAPR25rabF5I/TItG4nToj9LBJ3dfNgPxKJ/+wYwJbCoWnovIWC2+fnlW\nb+ERj+6T/CF1nPfyZsUoYg+iTxHSR1aewjZDArIi78YgK4PTQ2IjC+9dyuDScolQ\nH8D0QCdu8EmsQ+ytMQAmCGiLazG4cLwZUHta7s6r/dWaR/GUK0one3i7x0wdsUCo\nP/Af0evI38NhYFL2UdvfOZUlEg+NkxLZsrz+IH9GhtGu466gYKA4ITj/Xe8k5b5s\nh/e0hQ8s3FT70YCKI2H68EPVF4LBaZj50qyAjCwp+TQRbXGl+twmvbFJMaHFjg7w\nsOOthjbDPEEV67lTqWQFA+t/lk0hHRtjzJnnGRhVmDzpgOw7flsX8Kz/nznP2o4c\nzqiS39rkIipYyvwAXr4xlDtpLQMQ0D9OZY2Rcyru3hMg34oVWn6qS/8vN9Yp6aTa\nGx1JH1NhM5T1slbs4p5iYWkjiiLItDFVAItvN4BA+bdDkz+AjA/GO0vkQGT2t8eE\nVfaPuZ4p0XVyoJwlrQylKKUe6Cu0U9SLN/6ZtcRSn7jKEOg4Qzsj5GHl7NCRkYcd\noM3h2DBjQztJt4uFpl5hauBRahrpjRlpNvMLTlZIvme9+QzDdXxC/YdQFN+bpilK\nNlqg6spu4tRLHgPUnhjY3gLix3zB1DRQYZXK8SKRdtZT8EPTSMT3SwfNaGp6oltQ\nx9H1j+Yz8TEvQ1DcJ2SfOdnXP6DsT7ZqqMc3wdsX0YLP3gAi7HYUYdVDdAGVapCk\nT6cqJtD7P+SJCAreTwLoFFP9I/z7xA==\n=Aap3\n-----END PGP SIGNATURE-----",
        "payload": "tree ef4fb60f4df2f9845277e8880e568ca46b4f4d2d\nparent 80a5a8ea2b7ad512c74c29df5b504e9be6cf23a0\nauthor Vasil Dimov <vd@FreeBSD.org> 1615471779 +0100\ncommitter Vasil Dimov <vd@FreeBSD.org> 1615888857 +0100\n\ntest: add a test to ensure RecvUntilTerminator() limit works\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7059e6d82275b44efc41675ee10760145b6c1073",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7059e6d82275b44efc41675ee10760145b6c1073",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7059e6d82275b44efc41675ee10760145b6c1073/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "80a5a8ea2b7ad512c74c29df5b504e9be6cf23a0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80a5a8ea2b7ad512c74c29df5b504e9be6cf23a0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/80a5a8ea2b7ad512c74c29df5b504e9be6cf23a0"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 31,
      "deletions": 0
    },
    "files": [
      {
        "sha": "400de875b7b9cd95c626d7a6125430271c4fd618",
        "filename": "src/test/sock_tests.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 0,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7059e6d82275b44efc41675ee10760145b6c1073/src/test/sock_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7059e6d82275b44efc41675ee10760145b6c1073/src/test/sock_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sock_tests.cpp?ref=7059e6d82275b44efc41675ee10760145b6c1073",
        "patch": "@@ -4,11 +4,13 @@\n \n #include <compat.h>\n #include <test/util/setup_common.h>\n+#include <threadinterrupt.h>\n #include <util/sock.h>\n #include <util/system.h>\n \n #include <boost/test/unit_test.hpp>\n \n+#include <cassert>\n #include <thread>\n \n using namespace std::chrono_literals;\n@@ -144,6 +146,35 @@ BOOST_AUTO_TEST_CASE(wait)\n     waiter.join();\n }\n \n+BOOST_AUTO_TEST_CASE(recv_until_terminator_limit)\n+{\n+    constexpr auto timeout = 1min; // High enough so that it is never hit.\n+    CThreadInterrupt interrupt;\n+    int s[2];\n+    CreateSocketPair(s);\n+\n+    Sock sock_send(s[0]);\n+    Sock sock_recv(s[1]);\n+\n+    std::thread receiver([&sock_recv, &timeout, &interrupt]() {\n+        constexpr size_t max_data{10};\n+        bool threw_as_expected{false};\n+        // BOOST_CHECK_EXCEPTION() writes to some variables shared with the main thread which\n+        // creates a data race. So mimic it manually.\n+        try {\n+            sock_recv.RecvUntilTerminator('\\n', timeout, interrupt, max_data);\n+        } catch (const std::runtime_error& e) {\n+            threw_as_expected = HasReason(\"too many bytes without a terminator\")(e);\n+        }\n+        assert(threw_as_expected);\n+    });\n+\n+    BOOST_REQUIRE_NO_THROW(sock_send.SendComplete(\"1234567\", timeout, interrupt));\n+    BOOST_REQUIRE_NO_THROW(sock_send.SendComplete(\"89a\\n\", timeout, interrupt));\n+\n+    receiver.join();\n+}\n+\n #endif /* WIN32 */\n \n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  }
]