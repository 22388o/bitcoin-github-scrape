[
  {
    "sha": "eff1f2cd44bacaec75aac71ea515bccd33b89f37",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZmYxZjJjZDQ0YmFjYWVjNzVhYWM3MWVhNTE1YmNjZDMzYjg5ZjM3",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-04-17T19:27:24Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-04-17T19:27:24Z"
      },
      "message": "Allow txindex in prune mode",
      "tree": {
        "sha": "ac6f7ff93e33e26ca6f6c1c03a494fb19ef24465",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ac6f7ff93e33e26ca6f6c1c03a494fb19ef24465"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eff1f2cd44bacaec75aac71ea515bccd33b89f37",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlrWSrEACgkQHrd2uwPH\nki0LNw//fcfTPPnJoACgydOkePSi8yDW1UmYkDjsCdUHNwO2VnZtxJmFLTcemUix\n5l5+nhpYgXycgNyoliCpTTHKbLLLShfr2Arl55kwhz+SaazOE3HC1lhVirKGDe7t\n2/X8B//kMYCPey1Rnt+FSVz9qmvcXgHCfkVJuwe3Z4KawNrPxjQe/j1SAM0I50x6\nIadqp7B4KVvDY2fF91O5xIksZagKgnWlpPSar6r5pYpDTIWwSJUYXKBGphb7udVK\nV/+ge28EENn3lzEIao7Fe+Rv6By8MRamN1OHuaUXMr1S9ChUQhfWEaydrWPVuy/U\nFL4oFEcXvP3FoTCeYamS9h4MoRAcqlp4u2DWcfVJveZQCz/5I7fovGXxbx5NvAIS\nh+hhCewnb6ALFizWIoFAdPaPfIJ/ach44eQ7dhb9/6I91mcd2MWVtyctlkoDC4Bf\ngwv4FoTovqo94XnM/irn5J665gqp6bM9YjoK8R9gQ5JuekVKXy1jpFhfq5oS3a7j\n649I1YdYudKawrmtvrtBKA27YcKkVy/e+QrU89L0oiFtZNBYFb9PuFal873udlsP\nHsc5PsU4BT76dE1SCGEe5E8dU3k1YM5/+YCn6yBHhzKaYARPgWAv9WEw6W+EJpe1\nt5sAkwz1AkkaICmrYw9hEyeMtdbV2etxLh94oWVkXURUK1+jT2k=\n=WAYQ\n-----END PGP SIGNATURE-----",
        "payload": "tree ac6f7ff93e33e26ca6f6c1c03a494fb19ef24465\nparent 3a8a4dc4a130c6d1eeff3fb8e6d9688dda2f8d25\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1523993244 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1523993244 +0200\n\nAllow txindex in prune mode\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eff1f2cd44bacaec75aac71ea515bccd33b89f37",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eff1f2cd44bacaec75aac71ea515bccd33b89f37",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eff1f2cd44bacaec75aac71ea515bccd33b89f37/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3a8a4dc4a130c6d1eeff3fb8e6d9688dda2f8d25",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a8a4dc4a130c6d1eeff3fb8e6d9688dda2f8d25",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3a8a4dc4a130c6d1eeff3fb8e6d9688dda2f8d25"
      }
    ],
    "stats": {
      "total": 58,
      "additions": 41,
      "deletions": 17
    },
    "files": [
      {
        "sha": "f19412dbdce99a834cb37e02f6ac42458de0e972",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eff1f2cd44bacaec75aac71ea515bccd33b89f37/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eff1f2cd44bacaec75aac71ea515bccd33b89f37/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=eff1f2cd44bacaec75aac71ea515bccd33b89f37",
        "patch": "@@ -925,8 +925,9 @@ bool AppInitParameterInteraction()\n \n     // if using block pruning, then disallow txindex\n     if (gArgs.GetArg(\"-prune\", 0)) {\n-        if (gArgs.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX))\n-            return InitError(_(\"Prune mode is incompatible with -txindex.\"));\n+        if (gArgs.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX)) {\n+            InitWarning(_(\"txindex in prune-mode is experimental\"));\n+        }\n     }\n \n     // -bind and -whitebind can't be set when not listening"
      },
      {
        "sha": "fccc270c658484385755c345496d9cf5cde10291",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eff1f2cd44bacaec75aac71ea515bccd33b89f37/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eff1f2cd44bacaec75aac71ea515bccd33b89f37/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=eff1f2cd44bacaec75aac71ea515bccd33b89f37",
        "patch": "@@ -352,8 +352,14 @@ static bool rest_tx(HTTPRequest* req, const std::string& strURIPart)\n \n     CTransactionRef tx;\n     uint256 hashBlock = uint256();\n-    if (!GetTransaction(hash, tx, Params().GetConsensus(), hashBlock, true))\n+    GetTransactionResult res = GetTransaction(hash, tx, Params().GetConsensus(), hashBlock, true);\n+    if (res == GetTransactionResult::BLOCK_PRUNED) {\n+        return RESTERR(req, HTTP_NOT_FOUND, \"Block no longer available (pruned)\");\n+    } else if (res == GetTransactionResult::BLOCK_LOAD_ERROR) {\n+        return RESTERR(req, HTTP_NOT_FOUND, \"Error loading block\");\n+    } else if (res != GetTransactionResult::LOAD_OK) {\n         return RESTERR(req, HTTP_NOT_FOUND, hashStr + \" not found\");\n+    }\n \n     CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION | RPCSerializationFlags());\n     ssTx << tx;"
      },
      {
        "sha": "acca3639cc4c58c1810e07882c20f5b4629dc95f",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eff1f2cd44bacaec75aac71ea515bccd33b89f37/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eff1f2cd44bacaec75aac71ea515bccd33b89f37/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=eff1f2cd44bacaec75aac71ea515bccd33b89f37",
        "patch": "@@ -169,13 +169,18 @@ UniValue getrawtransaction(const JSONRPCRequest& request)\n \n     CTransactionRef tx;\n     uint256 hash_block;\n-    if (!GetTransaction(hash, tx, Params().GetConsensus(), hash_block, true, blockindex)) {\n+    GetTransactionResult res = GetTransaction(hash, tx, Params().GetConsensus(), hash_block, true, blockindex);\n+    if (res != GetTransactionResult::LOAD_OK) {\n         std::string errmsg;\n         if (blockindex) {\n             if (!(blockindex->nStatus & BLOCK_HAVE_DATA)) {\n                 throw JSONRPCError(RPC_MISC_ERROR, \"Block not available\");\n             }\n             errmsg = \"No such transaction found in the provided block\";\n+        } else if (res == GetTransactionResult::BLOCK_PRUNED) {\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Block not available\");\n+        } else if (res == GetTransactionResult::BLOCK_LOAD_ERROR) {\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Block load error\");\n         } else {\n             errmsg = fTxIndex\n               ? \"No such mempool or blockchain transaction\"\n@@ -255,7 +260,7 @@ UniValue gettxoutproof(const JSONRPCRequest& request)\n     if (pblockindex == nullptr)\n     {\n         CTransactionRef tx;\n-        if (!GetTransaction(oneTxid, tx, Params().GetConsensus(), hashBlock, false) || hashBlock.IsNull())\n+        if (GetTransaction(oneTxid, tx, Params().GetConsensus(), hashBlock, false) != GetTransactionResult::LOAD_OK || hashBlock.IsNull())\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction not yet in block\");\n         pblockindex = LookupBlockIndex(hashBlock);\n         if (!pblockindex) {"
      },
      {
        "sha": "5599d1d278b2254fd456ae486d927ec7cb1d113c",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 11,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eff1f2cd44bacaec75aac71ea515bccd33b89f37/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eff1f2cd44bacaec75aac71ea515bccd33b89f37/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=eff1f2cd44bacaec75aac71ea515bccd33b89f37",
        "patch": "@@ -1006,7 +1006,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n  * Return transaction in txOut, and if it was found inside a block, its hash is placed in hashBlock.\n  * If blockIndex is provided, the transaction is fetched from the corresponding block.\n  */\n-bool GetTransaction(const uint256& hash, CTransactionRef& txOut, const Consensus::Params& consensusParams, uint256& hashBlock, bool fAllowSlow, CBlockIndex* blockIndex)\n+GetTransactionResult GetTransaction(const uint256& hash, CTransactionRef& txOut, const Consensus::Params& consensusParams, uint256& hashBlock, bool fAllowSlow, CBlockIndex* blockIndex)\n {\n     CBlockIndex* pindexSlow = blockIndex;\n \n@@ -1016,31 +1016,36 @@ bool GetTransaction(const uint256& hash, CTransactionRef& txOut, const Consensus\n         CTransactionRef ptx = mempool.get(hash);\n         if (ptx) {\n             txOut = ptx;\n-            return true;\n+            return GetTransactionResult::LOAD_OK;\n         }\n \n         if (fTxIndex) {\n             CDiskTxPos postx;\n             if (pblocktree->ReadTxIndex(hash, postx)) {\n                 CAutoFile file(OpenBlockFile(postx, true), SER_DISK, CLIENT_VERSION);\n-                if (file.IsNull())\n-                    return error(\"%s: OpenBlockFile failed\", __func__);\n+                if (file.IsNull()) {\n+                    error(\"%s: OpenBlockFile failed\", __func__);\n+                    return GetTransactionResult::BLOCK_LOAD_ERROR;\n+                }\n                 CBlockHeader header;\n                 try {\n                     file >> header;\n                     fseek(file.Get(), postx.nTxOffset, SEEK_CUR);\n                     file >> txOut;\n                 } catch (const std::exception& e) {\n-                    return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n+                    error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n+                    return GetTransactionResult::BLOCK_LOAD_ERROR;\n                 }\n                 hashBlock = header.GetHash();\n-                if (txOut->GetHash() != hash)\n-                    return error(\"%s: txid mismatch\", __func__);\n-                return true;\n+                if (txOut->GetHash() != hash) {\n+                    error(\"%s: txid mismatch\", __func__);\n+                    return GetTransactionResult::BLOCK_LOAD_ERROR;\n+                }\n+                return GetTransactionResult::LOAD_OK;\n             }\n \n             // transaction not found in index, nothing more can be done\n-            return false;\n+            return GetTransactionResult::NOT_FOUND;\n         }\n \n         if (fAllowSlow) { // use coin database to locate block that contains transaction, and scan it\n@@ -1056,13 +1061,13 @@ bool GetTransaction(const uint256& hash, CTransactionRef& txOut, const Consensus\n                 if (tx->GetHash() == hash) {\n                     txOut = tx;\n                     hashBlock = pindexSlow->GetBlockHash();\n-                    return true;\n+                    return GetTransactionResult::LOAD_OK;\n                 }\n             }\n         }\n     }\n \n-    return false;\n+    return GetTransactionResult::NOT_FOUND;\n }\n \n "
      },
      {
        "sha": "c31db0734363516d17d15d09b2e2eaedbbd8ad3e",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eff1f2cd44bacaec75aac71ea515bccd33b89f37/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eff1f2cd44bacaec75aac71ea515bccd33b89f37/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=eff1f2cd44bacaec75aac71ea515bccd33b89f37",
        "patch": "@@ -278,7 +278,14 @@ void ThreadScriptCheck();\n /** Check whether we are doing an initial block download (synchronizing from disk or network) */\n bool IsInitialBlockDownload();\n /** Retrieve a transaction (from memory pool, or from disk, if possible) */\n-bool GetTransaction(const uint256& hash, CTransactionRef& tx, const Consensus::Params& params, uint256& hashBlock, bool fAllowSlow = false, CBlockIndex* blockIndex = nullptr);\n+enum class GetTransactionResult\n+{\n+    LOAD_OK,\n+    NOT_FOUND,\n+    BLOCK_LOAD_ERROR,\n+    BLOCK_PRUNED,\n+};\n+GetTransactionResult GetTransaction(const uint256& hash, CTransactionRef& tx, const Consensus::Params& params, uint256& hashBlock, bool fAllowSlow = false, CBlockIndex* blockIndex = nullptr);\n /** Find the best known block, and make it the tip of the block chain */\n bool ActivateBestChain(CValidationState& state, const CChainParams& chainparams, std::shared_ptr<const CBlock> pblock = std::shared_ptr<const CBlock>());\n CAmount GetBlockSubsidy(int nHeight, const Consensus::Params& consensusParams);"
      }
    ]
  },
  {
    "sha": "ccc190e3743edb043fe4fac429eefc594ab6bb2f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjY2MxOTBlMzc0M2VkYjA0M2ZlNGZhYzQyOWVlZmM1OTRhYjZiYjJm",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-04-17T19:49:57Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-04-18T12:17:37Z"
      },
      "message": "Migrate txindex data of pruned blocks to blockheight/tx-pos model",
      "tree": {
        "sha": "7769415a7dfd742a8991ca49a715eeec2d05e48d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7769415a7dfd742a8991ca49a715eeec2d05e48d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ccc190e3743edb043fe4fac429eefc594ab6bb2f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlrXN2cACgkQHrd2uwPH\nki0R+g/9F7Lud8ng4oPrZAk6XoxMdQzii5u7W0pu06DVRc8N0oey/2djX+BQj4pp\nOx/4om/IUbeSfs7hL0+QJGaD/quI4tR/SQFougSo8n+wpteDnN2rBhMWidnWCMWJ\noomkrUeIe+ev0pKYfAkzDXOM3sJGsRBipKoKe91SXIJDz5G6UH0Suh5wMqMl0EWE\nISEHwYsc2vgGSz7RHDuvR5jtuLXAKtd+n7iZ0salXA3ain8kZLQ3uc2XqVN3krNn\nfMhdfeKx32jnxtpLmKTna6pYst5irpsGp6aIIyqu6vCCbA4k64xKkhEYUqOAGMyl\n920ifGGZiVTffOYhnkEYJMWP088T3MG0k/E0kMrSTfXcyQh1hIpRlGCa96pMowJF\n+3v3d1LDspBvhPMf9pjKVpQ9NS94CDTUOPzRi6gKXfh569HB2RixoEt5qWQWiWHa\nDBUkLmxXsG3gb1Zx4un4w4Njm34P6ZYfBNYF4rw7sudpznlmrp0OJJAI+1v729Aq\nRoaNDSTTuZTTgOVP9pjvsO8ry+ZViPkSxyqKgIwyjvQBTGBCbusgil2DUkJ7RlHb\nwK+09SO1bBkrL/xt4t3WTR0/lL7CovxhbuB80YoixNOhPp34VPW1PJENG3est00d\n4Wm/waQfrWtZUIOwkgHhJAOaMZ8Y7OtV/vi/xNaabCVbtGacJTU=\n=fg1J\n-----END PGP SIGNATURE-----",
        "payload": "tree 7769415a7dfd742a8991ca49a715eeec2d05e48d\nparent eff1f2cd44bacaec75aac71ea515bccd33b89f37\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1523994597 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1524053857 +0200\n\nMigrate txindex data of pruned blocks to blockheight/tx-pos model\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ccc190e3743edb043fe4fac429eefc594ab6bb2f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ccc190e3743edb043fe4fac429eefc594ab6bb2f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ccc190e3743edb043fe4fac429eefc594ab6bb2f/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eff1f2cd44bacaec75aac71ea515bccd33b89f37",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eff1f2cd44bacaec75aac71ea515bccd33b89f37",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eff1f2cd44bacaec75aac71ea515bccd33b89f37"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 41,
      "deletions": 11
    },
    "files": [
      {
        "sha": "d2dac54a39560532f3a8f21ba15bb90950e3fc6d",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 38,
        "deletions": 9,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ccc190e3743edb043fe4fac429eefc594ab6bb2f/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ccc190e3743edb043fe4fac429eefc594ab6bb2f/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=ccc190e3743edb043fe4fac429eefc594ab6bb2f",
        "patch": "@@ -292,8 +292,8 @@ enum class FlushStateMode {\n \n // See definition for documentation\n static bool FlushStateToDisk(const CChainParams& chainParams, CValidationState &state, FlushStateMode mode, int nManualPruneHeight=0);\n-static void FindFilesToPruneManual(std::set<int>& setFilesToPrune, int nManualPruneHeight);\n-static void FindFilesToPrune(std::set<int>& setFilesToPrune, uint64_t nPruneAfterHeight);\n+static void FindFilesToPruneManual(std::set<int>& setFilesToPrune, int nManualPruneHeight, CValidationState &state);\n+static void FindFilesToPrune(std::set<int>& setFilesToPrune, uint64_t nPruneAfterHeight, CValidationState &state);\n bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &inputs, bool fScriptChecks, unsigned int flags, bool cacheSigStore, bool cacheFullScriptStore, PrecomputedTransactionData& txdata, std::vector<CScriptCheck> *pvChecks = nullptr);\n static FILE* OpenUndoFile(const CDiskBlockPos &pos, bool fReadOnly = false);\n \n@@ -2090,9 +2090,9 @@ bool static FlushStateToDisk(const CChainParams& chainparams, CValidationState &\n         LOCK(cs_LastBlockFile);\n         if (fPruneMode && (fCheckForPruning || nManualPruneHeight > 0) && !fReindex) {\n             if (nManualPruneHeight > 0) {\n-                FindFilesToPruneManual(setFilesToPrune, nManualPruneHeight);\n+                FindFilesToPruneManual(setFilesToPrune, nManualPruneHeight, state);\n             } else {\n-                FindFilesToPrune(setFilesToPrune, chainparams.PruneAfterHeight());\n+                FindFilesToPrune(setFilesToPrune, chainparams.PruneAfterHeight(), state);\n                 fCheckForPruning = false;\n             }\n             if (!setFilesToPrune.empty()) {\n@@ -3549,13 +3549,41 @@ uint64_t CalculateCurrentUsage()\n }\n \n /* Prune a block file (modify associated database entries)*/\n-void PruneOneBlockFile(const int fileNumber)\n+void PruneOneBlockFile(const int fileNumber, CValidationState &state)\n {\n+    AssertLockHeld(cs_main);\n     LOCK(cs_LastBlockFile);\n \n+    int64_t txindex_migration_totaltime = 0;\n     for (const auto& entry : mapBlockIndex) {\n         CBlockIndex* pindex = entry.second;\n         if (pindex->nFile == fileNumber) {\n+            if (fTxIndex && (pindex->nStatus & BLOCK_HAVE_DATA)) {\n+                int64_t time_start = GetTimeMicros();\n+                // migrate pruned txindex data\n+                // txindex entries of pruned blocks will move its CDiskTxPos value to:\n+                //        nFile = INT_MAX <-- indicator that this block is no longer available\n+                //        nPos = block-height in chainActive (assumed reorg safe since prune min target is 288 blocks)\n+                //        nTxOffset = index of transaction position in block (not to confused with data offset)\n+                LogPrintf(\"txindex block pruning: %s migrate txindex data from block %s\\n\", __func__, pindex->GetBlockHash().GetHex());\n+                CBlock block;\n+                if (!ReadBlockFromDisk(block, pindex, Params().GetConsensus())) {\n+                    AbortNode(state, \"Failed to read block\");\n+                    return;\n+                }\n+                std::vector<std::pair<uint256, CDiskTxPos>> vPos;\n+                unsigned int txpos = 0;\n+                for(const auto& tx : block.vtx)\n+                {\n+                    CDiskTxPos pos(CDiskBlockPos(std::numeric_limits<int>::max(), pindex->nHeight), GetSizeOfCompactSize(txpos++));\n+                    vPos.emplace_back(tx->GetHash(), pos);\n+                }\n+                if (!pblocktree->WriteTxIndex(vPos)) {\n+                    AbortNode(state, \"Failed to write transaction index\");\n+                    return;\n+                }\n+                txindex_migration_totaltime+=GetTimeMicros()-time_start;\n+            }\n             pindex->nStatus &= ~BLOCK_HAVE_DATA;\n             pindex->nStatus &= ~BLOCK_HAVE_UNDO;\n             pindex->nFile = 0;\n@@ -3580,6 +3608,7 @@ void PruneOneBlockFile(const int fileNumber)\n \n     vinfoBlockFile[fileNumber].SetNull();\n     setDirtyFileInfo.insert(fileNumber);\n+    if (fTxIndex) LogPrint(BCLog::BENCH, \"txindex/prune migration time: %.2fms\\n\", MILLI * txindex_migration_totaltime);\n }\n \n \n@@ -3594,7 +3623,7 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune)\n }\n \n /* Calculate the block/rev files to delete based on height specified by user with RPC command pruneblockchain */\n-static void FindFilesToPruneManual(std::set<int>& setFilesToPrune, int nManualPruneHeight)\n+static void FindFilesToPruneManual(std::set<int>& setFilesToPrune, int nManualPruneHeight, CValidationState &state)\n {\n     assert(fPruneMode && nManualPruneHeight > 0);\n \n@@ -3608,7 +3637,7 @@ static void FindFilesToPruneManual(std::set<int>& setFilesToPrune, int nManualPr\n     for (int fileNumber = 0; fileNumber < nLastBlockFile; fileNumber++) {\n         if (vinfoBlockFile[fileNumber].nSize == 0 || vinfoBlockFile[fileNumber].nHeightLast > nLastBlockWeCanPrune)\n             continue;\n-        PruneOneBlockFile(fileNumber);\n+        PruneOneBlockFile(fileNumber, state);\n         setFilesToPrune.insert(fileNumber);\n         count++;\n     }\n@@ -3638,7 +3667,7 @@ void PruneBlockFilesManual(int nManualPruneHeight)\n  *\n  * @param[out]   setFilesToPrune   The set of file indices that can be unlinked will be returned\n  */\n-static void FindFilesToPrune(std::set<int>& setFilesToPrune, uint64_t nPruneAfterHeight)\n+static void FindFilesToPrune(std::set<int>& setFilesToPrune, uint64_t nPruneAfterHeight, CValidationState &state)\n {\n     LOCK2(cs_main, cs_LastBlockFile);\n     if (chainActive.Tip() == nullptr || nPruneTarget == 0) {\n@@ -3671,7 +3700,7 @@ static void FindFilesToPrune(std::set<int>& setFilesToPrune, uint64_t nPruneAfte\n             if (vinfoBlockFile[fileNumber].nHeightLast > nLastBlockWeCanPrune)\n                 continue;\n \n-            PruneOneBlockFile(fileNumber);\n+            PruneOneBlockFile(fileNumber, state);\n             // Queue up the files for removal\n             setFilesToPrune.insert(fileNumber);\n             nCurrentUsage -= nBytesToPrune;"
      },
      {
        "sha": "2a9d5500c42b31115c27c2534c1aaf1b390802f5",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ccc190e3743edb043fe4fac429eefc594ab6bb2f/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ccc190e3743edb043fe4fac429eefc594ab6bb2f/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=ccc190e3743edb043fe4fac429eefc594ab6bb2f",
        "patch": "@@ -299,7 +299,7 @@ uint64_t CalculateCurrentUsage();\n /**\n  *  Mark one block file as pruned.\n  */\n-void PruneOneBlockFile(const int fileNumber);\n+void PruneOneBlockFile(const int fileNumber, CValidationState &state);\n \n /**\n  *  Actually unlink the specified files"
      },
      {
        "sha": "dd7de427f1cc63a8f8f328711ec740e553e900d7",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ccc190e3743edb043fe4fac429eefc594ab6bb2f/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ccc190e3743edb043fe4fac429eefc594ab6bb2f/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=ccc190e3743edb043fe4fac429eefc594ab6bb2f",
        "patch": "@@ -55,7 +55,8 @@ BOOST_FIXTURE_TEST_CASE(rescan, TestChain100Setup)\n     }\n \n     // Prune the older block file.\n-    PruneOneBlockFile(oldTip->GetBlockPos().nFile);\n+    CValidationState state;\n+    PruneOneBlockFile(oldTip->GetBlockPos().nFile, state);\n     UnlinkPrunedFiles({oldTip->GetBlockPos().nFile});\n \n     // Verify ScanForWalletTransactions only picks transactions in the new block"
      }
    ]
  },
  {
    "sha": "5ccf1c0145322e858f22b826ae940d6d3fb75db3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1Y2NmMWMwMTQ1MzIyZTg1OGYyMmI4MjZhZTk0MGQ2ZDNmYjc1ZGIz",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-04-17T19:54:16Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-04-18T12:17:53Z"
      },
      "message": "Return blockhash if block is pruned in GetTransaction()",
      "tree": {
        "sha": "044503a462666d40e4687abf65b0b7bcf98ea0bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/044503a462666d40e4687abf65b0b7bcf98ea0bd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5ccf1c0145322e858f22b826ae940d6d3fb75db3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlrXN3EACgkQHrd2uwPH\nki2BxA/+IIysN1BIBpoVLhvnCPuu6qv3lunM+ORyrgBIeGWGQuxnk2uoDtk1Wc9p\nqreSctnQIeTYwxfV6ZLhavjAirJQ3vk+shhM4kRVU9Kc9XPCqknOy7AsdXdl3HCP\nw1lxdEPw6Bh6H0imfKLAzkR9N5Ay6ftHvMSoHcBC/cyK9trG/oY9GAE9ocvGdpTA\nLJakWgcLLhRU+l07HoaYvGxyPxh91RUIvlRclV5nPyBXxLmE8YhRx0enGPYRpH4b\nmeJceTejM871zqzpDBU+b9IRe+oQYDJYmH+hRsC7tBzRoFiMNUbMQ6g5QXA6rGEa\nOUMVhvNSqXwHbY8hKfBrI9IMgZdqhQcg9lCODOpF+BWnWSbP72p/WOtSmPkYddtQ\netotGQ8I4388ovehSFWpTvRq9QPaOwpIsyiXH6JhYMiFGhsiiEhujI5oNGEjvsyX\nQoP/JzqA4GBmxX04WOuFgpTLazVQheBc0kHoQXxuVmgaGT4zuDbuwduOI+NN8nNX\nwkIe2lJQQuvjV9+Eme6X48W6o7VHC6hiQraVcNO9itCRc/7hbftuSIn9/jm1oUDF\nEy87HfvVrbZ4/WuN5h4Gxs7sYEyHbuEw+ZI/7vJuoI3jnM/HVVUdv0/52ie6lQJ9\nfXCmYV5RRZoDikMiLOsrVvGiMSTtXTurwkLohoor4mFh8rZ414Q=\n=2fYr\n-----END PGP SIGNATURE-----",
        "payload": "tree 044503a462666d40e4687abf65b0b7bcf98ea0bd\nparent ccc190e3743edb043fe4fac429eefc594ab6bb2f\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1523994856 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1524053873 +0200\n\nReturn blockhash if block is pruned in GetTransaction()\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ccf1c0145322e858f22b826ae940d6d3fb75db3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5ccf1c0145322e858f22b826ae940d6d3fb75db3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ccf1c0145322e858f22b826ae940d6d3fb75db3/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ccc190e3743edb043fe4fac429eefc594ab6bb2f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ccc190e3743edb043fe4fac429eefc594ab6bb2f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ccc190e3743edb043fe4fac429eefc594ab6bb2f"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 9,
      "deletions": 0
    },
    "files": [
      {
        "sha": "6121a39c51bafa2dd1e885b9095ef379fd414584",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ccf1c0145322e858f22b826ae940d6d3fb75db3/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ccf1c0145322e858f22b826ae940d6d3fb75db3/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=5ccf1c0145322e858f22b826ae940d6d3fb75db3",
        "patch": "@@ -1022,6 +1022,15 @@ GetTransactionResult GetTransaction(const uint256& hash, CTransactionRef& txOut,\n         if (fTxIndex) {\n             CDiskTxPos postx;\n             if (pblocktree->ReadTxIndex(hash, postx)) {\n+                if (postx.nFile == std::numeric_limits<int>::max()) {\n+                    // blockfile is not available (pruned), CDiskTxPos.nPos points to the blockheight\n+                    // lookup blockindex via height from txindex and set hashBlock\n+                    CBlockIndex *p_index_possible = chainActive[postx.nPos];\n+                    if (p_index_possible) {\n+                        hashBlock = *p_index_possible->phashBlock;\n+                    }\n+                    return GetTransactionResult::BLOCK_PRUNED;\n+                }\n                 CAutoFile file(OpenBlockFile(postx, true), SER_DISK, CLIENT_VERSION);\n                 if (file.IsNull()) {\n                     error(\"%s: OpenBlockFile failed\", __func__);"
      }
    ]
  },
  {
    "sha": "ce86c1aa6fbe4c4ccf86033a31f08ebfbec7a1db",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZTg2YzFhYTZmYmU0YzRjY2Y4NjAzM2EzMWYwOGViZmJlYzdhMWRi",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-04-17T19:56:00Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-04-18T12:17:53Z"
      },
      "message": "Return blockhash if getrawtransaction found tx via index in pruned block",
      "tree": {
        "sha": "0ef22ef21b9cb3981a00ee705d26c5ca1a4aad03",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0ef22ef21b9cb3981a00ee705d26c5ca1a4aad03"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ce86c1aa6fbe4c4ccf86033a31f08ebfbec7a1db",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlrXN3EACgkQHrd2uwPH\nki1Xjg/+N/fCGYud+n+V92eErzeo+NbypHWAiwX6854uOQCBCghU33kzmJqgCjaO\nMvTVOjK/19O7rEpIaXGvAmykIuFjJ2lhJ0puSbH2l+idbRT5EDs4haRLC7y8tygH\nWb6idOdXcf9BQKvvCLjlDfkVNl5/0nuf+/bHaHt2SC+PVBpfs2VB5nefeaElqQl7\nkX/RzS3w5y2swDe1Cjeea12nw9Xjyv1FT5dhjrId/0d749nz/FQm8fOalhOfWRzE\nQenWcnUyKokTrSH91jE3tjwmjjPgq/TlxB/wm1PtOXSfaCwkdEEREvar86zxJ4W+\nTESZdwRn8Xjqb4NxBVKjmgAlM8w6jjaqOW0z1Vpq9+b2qv+ix/Y+zCt6GiNDyPJo\n4pgtacVI2f6zSWJGVOJRLNUmiLjsbNXjXn3yz4n496/1RM0cEX+sVXT/I5eBXHEl\nMBuN32Tn9E24WXG9s8xSw29UaCUUp/oZvP5DwX/aoc3C2mMLJbrilrViU61ejcrg\nYBaIIcz2yUR4bo7z53Euto/s5uNGstFqlSLfnhbTIqCJmy6npy5K+F9ufZt/5p5T\n75F8KOVVdI8AivL7X6MobCR0RqtWjXs4yLegCjSgarbhyuhpHi60PneRFcJ7Mxmr\nEPhv1KcAAGOZz4M/8Q70aJmHhTkGCVcoRvPsqhrAgwag//TYtoc=\n=5yxm\n-----END PGP SIGNATURE-----",
        "payload": "tree 0ef22ef21b9cb3981a00ee705d26c5ca1a4aad03\nparent 5ccf1c0145322e858f22b826ae940d6d3fb75db3\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1523994960 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1524053873 +0200\n\nReturn blockhash if getrawtransaction found tx via index in pruned block\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce86c1aa6fbe4c4ccf86033a31f08ebfbec7a1db",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ce86c1aa6fbe4c4ccf86033a31f08ebfbec7a1db",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce86c1aa6fbe4c4ccf86033a31f08ebfbec7a1db/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5ccf1c0145322e858f22b826ae940d6d3fb75db3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ccf1c0145322e858f22b826ae940d6d3fb75db3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5ccf1c0145322e858f22b826ae940d6d3fb75db3"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 6,
      "deletions": 1
    },
    "files": [
      {
        "sha": "4dcb05186a45efc71bd170c0acbc13d48a34cf5c",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ce86c1aa6fbe4c4ccf86033a31f08ebfbec7a1db/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ce86c1aa6fbe4c4ccf86033a31f08ebfbec7a1db/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=ce86c1aa6fbe4c4ccf86033a31f08ebfbec7a1db",
        "patch": "@@ -178,7 +178,12 @@ UniValue getrawtransaction(const JSONRPCRequest& request)\n             }\n             errmsg = \"No such transaction found in the provided block\";\n         } else if (res == GetTransactionResult::BLOCK_PRUNED) {\n-            throw JSONRPCError(RPC_MISC_ERROR, \"Block not available\");\n+            //TODO: fetch block via peers, wait for download and return transaction\n+            //see https://github.com/bitcoin/bitcoin/pull/10794\n+            UniValue result(UniValue::VOBJ);\n+            result.pushKV(\"status\", \"pruned\");\n+            result.pushKV(\"inblock\", hash_block.GetHex());\n+            return result;\n         } else if (res == GetTransactionResult::BLOCK_LOAD_ERROR) {\n             throw JSONRPCError(RPC_MISC_ERROR, \"Block load error\");\n         } else {"
      }
    ]
  }
]