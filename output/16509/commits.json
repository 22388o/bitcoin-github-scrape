[
  {
    "sha": "68f546635d5de2ccfedadeabc7bc79e12e5eca6a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2OGY1NDY2MzVkNWRlMmNjZmVkYWRlYWJjN2JjNzllMTJlNWVjYTZh",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2019-01-25T05:16:35Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-07-31T20:12:12Z"
      },
      "message": "test: Fix \u201clocal variable 'e' is assigned to but never used\u201d\n\nflake8 F841 lints, as of flake8 3.6.0",
      "tree": {
        "sha": "a3bb0ee43515e9a1b9523572cd28a6e6189df95c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a3bb0ee43515e9a1b9523572cd28a6e6189df95c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/68f546635d5de2ccfedadeabc7bc79e12e5eca6a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/68f546635d5de2ccfedadeabc7bc79e12e5eca6a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/68f546635d5de2ccfedadeabc7bc79e12e5eca6a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/68f546635d5de2ccfedadeabc7bc79e12e5eca6a/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3f288a1c05ebcadd7d7709f81c77921ff9e27ba2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f288a1c05ebcadd7d7709f81c77921ff9e27ba2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3f288a1c05ebcadd7d7709f81c77921ff9e27ba2"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "420a3a7688fb2d36f7133034cd48de6798b400df",
        "filename": "test/functional/feature_assumevalid.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68f546635d5de2ccfedadeabc7bc79e12e5eca6a/test/functional/feature_assumevalid.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68f546635d5de2ccfedadeabc7bc79e12e5eca6a/test/functional/feature_assumevalid.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_assumevalid.py?ref=68f546635d5de2ccfedadeabc7bc79e12e5eca6a",
        "patch": "@@ -72,7 +72,7 @@ def send_blocks_until_disconnected(self, p2p_conn):\n                 break\n             try:\n                 p2p_conn.send_message(msg_block(self.blocks[i]))\n-            except IOError as e:\n+            except IOError:\n                 assert not p2p_conn.is_connected\n                 break\n "
      },
      {
        "sha": "6d580ded477438aca8961473ee58b98e55387f36",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68f546635d5de2ccfedadeabc7bc79e12e5eca6a/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68f546635d5de2ccfedadeabc7bc79e12e5eca6a/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=68f546635d5de2ccfedadeabc7bc79e12e5eca6a",
        "patch": "@@ -192,18 +192,18 @@ def main(self):\n             self.setup_network()\n             self.run_test()\n             success = TestStatus.PASSED\n-        except JSONRPCException as e:\n+        except JSONRPCException:\n             self.log.exception(\"JSONRPC error\")\n         except SkipTest as e:\n             self.log.warning(\"Test Skipped: %s\" % e.message)\n             success = TestStatus.SKIPPED\n-        except AssertionError as e:\n+        except AssertionError:\n             self.log.exception(\"Assertion failed\")\n-        except KeyError as e:\n+        except KeyError:\n             self.log.exception(\"Key error\")\n-        except Exception as e:\n+        except Exception:\n             self.log.exception(\"Unexpected exception caught during testing\")\n-        except KeyboardInterrupt as e:\n+        except KeyboardInterrupt:\n             self.log.warning(\"Exiting after keyboard interrupt\")\n \n         if success == TestStatus.FAILED and self.options.pdbonfailure:"
      }
    ]
  },
  {
    "sha": "fa8a1d7ba30040f8c74f93fc41a61276c255a6a6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYThhMWQ3YmEzMDA0MGY4Yzc0ZjkzZmM0MWE2MTI3NmMyNTVhNmE2",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-07-31T18:11:32Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-07-31T21:00:25Z"
      },
      "message": "test: Adapt test framework for chains other than \"regtest\"\n\nCo-Authored-By: Jorge Tim\u00f3n <jtimon@jtimon.cc>",
      "tree": {
        "sha": "b5a686fcc62909c549c5a38f86d81678123b2dad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b5a686fcc62909c549c5a38f86d81678123b2dad"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa8a1d7ba30040f8c74f93fc41a61276c255a6a6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUivPgv/fquNlLBGNLVxxVtXWEfZouxqzPtNYSsots5hG30yRLRNvFHW6+lKVX7N\nBRNlcS07AEJ8dTMrslk4dZG7d/z/Okg5e6sVeeUF/Wf15jegjF7p/5yb0vONbxLP\nRBI8sYaPxIK1PdFd0QEU9ShRDjgk7Xl8Y7ixSb2LJlD6+L7v800Q7OR3g0i13To6\nlmlsFH6XeNGkWTWl88jN1YA77UBTQpzqWhgCr0nKg22rnnTuWcux3YWkkP3WGkJV\n1FQG2HCVJ+YiTMk/Qf7tXxSqWTsfrpudZy2Bvt7FnfFT/UtV7KRbyGSAqTVyMI/j\nw7YEcOeeRv/9fmUSa2zh1lWJ92+xeTD2+jC/aV3FM5SxmhnQ1yOcrKPyaogCpnj3\ncY/sFkyD6eQZcaorhH3qFlVWfc3/l/rMrIh57acTePV74Wbe5L7v8rpECzkeFlvm\ng9JPyFQnz8bctUZDrFOm2Co1mVwRO9gl79v8wG0z0VvvtTv3S8M0DTv0cW/M8+cP\n6ONv8fIw\n=T5Us\n-----END PGP SIGNATURE-----",
        "payload": "tree b5a686fcc62909c549c5a38f86d81678123b2dad\nparent 68f546635d5de2ccfedadeabc7bc79e12e5eca6a\nauthor MarcoFalke <falke.marco@gmail.com> 1564596692 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1564606825 -0400\n\ntest: Adapt test framework for chains other than \"regtest\"\n\nCo-Authored-By: Jorge Tim\u00f3n <jtimon@jtimon.cc>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa8a1d7ba30040f8c74f93fc41a61276c255a6a6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa8a1d7ba30040f8c74f93fc41a61276c255a6a6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa8a1d7ba30040f8c74f93fc41a61276c255a6a6/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "68f546635d5de2ccfedadeabc7bc79e12e5eca6a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/68f546635d5de2ccfedadeabc7bc79e12e5eca6a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/68f546635d5de2ccfedadeabc7bc79e12e5eca6a"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 28,
      "deletions": 24
    },
    "files": [
      {
        "sha": "6f01f97ea21cfc61639d1f71378e76e5437029d4",
        "filename": "test/functional/feature_blocksdir.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8a1d7ba30040f8c74f93fc41a61276c255a6a6/test/functional/feature_blocksdir.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8a1d7ba30040f8c74f93fc41a61276c255a6a6/test/functional/feature_blocksdir.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_blocksdir.py?ref=fa8a1d7ba30040f8c74f93fc41a61276c255a6a6",
        "patch": "@@ -18,10 +18,10 @@ def set_test_params(self):\n \n     def run_test(self):\n         self.stop_node(0)\n-        assert os.path.isdir(os.path.join(self.nodes[0].datadir, \"regtest\", \"blocks\"))\n+        assert os.path.isdir(os.path.join(self.nodes[0].datadir, self.chain, \"blocks\"))\n         assert not os.path.isdir(os.path.join(self.nodes[0].datadir, \"blocks\"))\n         shutil.rmtree(self.nodes[0].datadir)\n-        initialize_datadir(self.options.tmpdir, 0)\n+        initialize_datadir(self.options.tmpdir, 0, self.chain)\n         self.log.info(\"Starting with nonexistent blocksdir ...\")\n         blocksdir_path = os.path.join(self.options.tmpdir, 'blocksdir')\n         self.nodes[0].assert_start_raises_init_error([\"-blocksdir=\" + blocksdir_path], 'Error: Specified blocks directory \"{}\" does not exist.'.format(blocksdir_path))\n@@ -30,8 +30,8 @@ def run_test(self):\n         self.start_node(0, [\"-blocksdir=\" + blocksdir_path])\n         self.log.info(\"mining blocks..\")\n         self.nodes[0].generatetoaddress(10, self.nodes[0].get_deterministic_priv_key().address)\n-        assert os.path.isfile(os.path.join(blocksdir_path, \"regtest\", \"blocks\", \"blk00000.dat\"))\n-        assert os.path.isdir(os.path.join(self.nodes[0].datadir, \"regtest\", \"blocks\", \"index\"))\n+        assert os.path.isfile(os.path.join(blocksdir_path, self.chain, \"blocks\", \"blk00000.dat\"))\n+        assert os.path.isdir(os.path.join(self.nodes[0].datadir, self.chain, \"blocks\", \"index\"))\n \n \n if __name__ == '__main__':"
      },
      {
        "sha": "0a378c5ef5b2ebb121644f80f76fc031f9a50334",
        "filename": "test/functional/interface_bitcoin_cli.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8a1d7ba30040f8c74f93fc41a61276c255a6a6/test/functional/interface_bitcoin_cli.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8a1d7ba30040f8c74f93fc41a61276c255a6a6/test/functional/interface_bitcoin_cli.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_bitcoin_cli.py?ref=fa8a1d7ba30040f8c74f93fc41a61276c255a6a6",
        "patch": "@@ -29,7 +29,7 @@ def run_test(self):\n         rpc_response = self.nodes[0].getblockchaininfo()\n         assert_equal(cli_response, rpc_response)\n \n-        user, password = get_auth_cookie(self.nodes[0].datadir)\n+        user, password = get_auth_cookie(self.nodes[0].datadir, self.chain)\n \n         self.log.info(\"Test -stdinrpcpass option\")\n         assert_equal(0, self.nodes[0].cli('-rpcuser=%s' % user, '-stdinrpcpass', input=password).getblockcount())"
      },
      {
        "sha": "8979251a26e821972b3c7d980192a544fe8580fd",
        "filename": "test/functional/rpc_bind.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8a1d7ba30040f8c74f93fc41a61276c255a6a6/test/functional/rpc_bind.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8a1d7ba30040f8c74f93fc41a61276c255a6a6/test/functional/rpc_bind.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_bind.py?ref=fa8a1d7ba30040f8c74f93fc41a61276c255a6a6",
        "patch": "@@ -55,7 +55,7 @@ def run_allowip_test(self, allow_ips, rpchost, rpcport):\n         self.nodes[0].rpchost = None\n         self.start_nodes([node_args])\n         # connect to node through non-loopback interface\n-        node = get_rpc_proxy(rpc_url(self.nodes[0].datadir, 0, \"%s:%d\" % (rpchost, rpcport)), 0, coveragedir=self.options.coveragedir)\n+        node = get_rpc_proxy(rpc_url(self.nodes[0].datadir, 0, self.chain, \"%s:%d\" % (rpchost, rpcport)), 0, coveragedir=self.options.coveragedir)\n         node.getnetworkinfo()\n         self.stop_nodes()\n "
      },
      {
        "sha": "9aff08fdc7dae454a3428935ef734f2ecf003770",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8a1d7ba30040f8c74f93fc41a61276c255a6a6/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8a1d7ba30040f8c74f93fc41a61276c255a6a6/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=fa8a1d7ba30040f8c74f93fc41a61276c255a6a6",
        "patch": "@@ -91,6 +91,7 @@ class BitcoinTestFramework(metaclass=BitcoinTestMetaClass):\n \n     def __init__(self):\n         \"\"\"Sets test framework defaults. Do not override this method. Instead, override the set_test_params() method\"\"\"\n+        self.chain = 'regtest'\n         self.setup_clean_chain = False\n         self.nodes = []\n         self.network_thread = None\n@@ -342,6 +343,7 @@ def add_nodes(self, num_nodes, extra_args=None, *, rpchost=None, binary=None):\n             self.nodes.append(TestNode(\n                 i,\n                 get_datadir_path(self.options.tmpdir, i),\n+                chain=self.chain,\n                 rpchost=rpchost,\n                 timewait=self.rpc_timeout,\n                 bitcoind=binary[i],\n@@ -477,11 +479,12 @@ def _initialize_chain(self):\n         if not os.path.isdir(cache_node_dir):\n             self.log.debug(\"Creating cache directory {}\".format(cache_node_dir))\n \n-            initialize_datadir(self.options.cachedir, CACHE_NODE_ID)\n+            initialize_datadir(self.options.cachedir, CACHE_NODE_ID, self.chain)\n             self.nodes.append(\n                 TestNode(\n                     CACHE_NODE_ID,\n                     cache_node_dir,\n+                    chain=self.chain,\n                     extra_conf=[\"bind=127.0.0.1\"],\n                     extra_args=['-disablewallet'],\n                     rpchost=None,\n@@ -515,7 +518,7 @@ def _initialize_chain(self):\n             self.nodes = []\n \n             def cache_path(*paths):\n-                return os.path.join(cache_node_dir, \"regtest\", *paths)\n+                return os.path.join(cache_node_dir, self.chain, *paths)\n \n             os.rmdir(cache_path('wallets'))  # Remove empty wallets dir\n             for entry in os.listdir(cache_path()):\n@@ -526,15 +529,15 @@ def cache_path(*paths):\n             self.log.debug(\"Copy cache directory {} to node {}\".format(cache_node_dir, i))\n             to_dir = get_datadir_path(self.options.tmpdir, i)\n             shutil.copytree(cache_node_dir, to_dir)\n-            initialize_datadir(self.options.tmpdir, i)  # Overwrite port/rpcport in bitcoin.conf\n+            initialize_datadir(self.options.tmpdir, i, self.chain)  # Overwrite port/rpcport in bitcoin.conf\n \n     def _initialize_chain_clean(self):\n         \"\"\"Initialize empty blockchain for use by the test.\n \n         Create an empty blockchain and num_nodes wallets.\n         Useful if a test case wants complete control over initialization.\"\"\"\n         for i in range(self.num_nodes):\n-            initialize_datadir(self.options.tmpdir, i)\n+            initialize_datadir(self.options.tmpdir, i, self.chain)\n \n     def skip_if_no_py3_zmq(self):\n         \"\"\"Attempt to import the zmq package and skip the test if the import fails.\"\"\""
      },
      {
        "sha": "cac52817640b2aa3f434ad03cdf571ca08a4db92",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8a1d7ba30040f8c74f93fc41a61276c255a6a6/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8a1d7ba30040f8c74f93fc41a61276c255a6a6/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=fa8a1d7ba30040f8c74f93fc41a61276c255a6a6",
        "patch": "@@ -59,7 +59,7 @@ class TestNode():\n     To make things easier for the test writer, any unrecognised messages will\n     be dispatched to the RPC connection.\"\"\"\n \n-    def __init__(self, i, datadir, *, rpchost, timewait, bitcoind, bitcoin_cli, coverage_dir, cwd, extra_conf=None, extra_args=None, use_cli=False, start_perf=False):\n+    def __init__(self, i, datadir, *, chain, rpchost, timewait, bitcoind, bitcoin_cli, coverage_dir, cwd, extra_conf=None, extra_args=None, use_cli=False, start_perf=False):\n         \"\"\"\n         Kwargs:\n             start_perf (bool): If True, begin profiling the node with `perf` as soon as\n@@ -70,6 +70,7 @@ def __init__(self, i, datadir, *, rpchost, timewait, bitcoind, bitcoin_cli, cove\n         self.datadir = datadir\n         self.stdout_dir = os.path.join(self.datadir, \"stdout\")\n         self.stderr_dir = os.path.join(self.datadir, \"stderr\")\n+        self.chain = chain\n         self.rpchost = rpchost\n         self.rpc_timeout = timewait\n         self.binary = bitcoind\n@@ -197,7 +198,7 @@ def start(self, extra_args=None, *, cwd=None, stdout=None, stderr=None, **kwargs\n         # Delete any existing cookie file -- if such a file exists (eg due to\n         # unclean shutdown), it will get overwritten anyway by bitcoind, and\n         # potentially interfere with our attempt to authenticate\n-        delete_cookie_file(self.datadir)\n+        delete_cookie_file(self.datadir, self.chain)\n \n         # add environment variable LIBC_FATAL_STDERR_=1 so that libc errors are written to stderr and not the terminal\n         subp_env = dict(os.environ, LIBC_FATAL_STDERR_=\"1\")\n@@ -219,7 +220,7 @@ def wait_for_rpc_connection(self):\n                 raise FailedToStartError(self._node_msg(\n                     'bitcoind exited with status {} during initialization'.format(self.process.returncode)))\n             try:\n-                rpc = get_rpc_proxy(rpc_url(self.datadir, self.index, self.rpchost), self.index, timeout=self.rpc_timeout, coveragedir=self.coverage_dir)\n+                rpc = get_rpc_proxy(rpc_url(self.datadir, self.index, self.chain, self.rpchost), self.index, timeout=self.rpc_timeout, coveragedir=self.coverage_dir)\n                 rpc.getblockcount()\n                 # If the call to getblockcount() succeeds then the RPC connection is up\n                 self.log.debug(\"RPC successfully started\")\n@@ -306,7 +307,7 @@ def wait_until_stopped(self, timeout=BITCOIND_PROC_WAIT_TIMEOUT):\n \n     @contextlib.contextmanager\n     def assert_debug_log(self, expected_msgs):\n-        debug_log = os.path.join(self.datadir, 'regtest', 'debug.log')\n+        debug_log = os.path.join(self.datadir, self.chain, 'debug.log')\n         with open(debug_log, encoding='utf-8') as dl:\n             dl.seek(0, 2)\n             prev_size = dl.tell()"
      },
      {
        "sha": "8730157c745391b42ed6be49f9fec02ea000145d",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8a1d7ba30040f8c74f93fc41a61276c255a6a6/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8a1d7ba30040f8c74f93fc41a61276c255a6a6/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=fa8a1d7ba30040f8c74f93fc41a61276c255a6a6",
        "patch": "@@ -271,8 +271,8 @@ def p2p_port(n):\n def rpc_port(n):\n     return PORT_MIN + PORT_RANGE + n + (MAX_NODES * PortSeed.n) % (PORT_RANGE - 1 - MAX_NODES)\n \n-def rpc_url(datadir, i, rpchost=None):\n-    rpc_u, rpc_p = get_auth_cookie(datadir)\n+def rpc_url(datadir, i, chain, rpchost):\n+    rpc_u, rpc_p = get_auth_cookie(datadir, chain)\n     host = '127.0.0.1'\n     port = rpc_port(i)\n     if rpchost:\n@@ -286,13 +286,13 @@ def rpc_url(datadir, i, rpchost=None):\n # Node functions\n ################\n \n-def initialize_datadir(dirname, n):\n+def initialize_datadir(dirname, n, chain):\n     datadir = get_datadir_path(dirname, n)\n     if not os.path.isdir(datadir):\n         os.makedirs(datadir)\n     with open(os.path.join(datadir, \"bitcoin.conf\"), 'w', encoding='utf8') as f:\n-        f.write(\"regtest=1\\n\")\n-        f.write(\"[regtest]\\n\")\n+        f.write(\"{}=1\\n\".format(chain))\n+        f.write(\"[{}]\\n\".format(chain))\n         f.write(\"port=\" + str(p2p_port(n)) + \"\\n\")\n         f.write(\"rpcport=\" + str(rpc_port(n)) + \"\\n\")\n         f.write(\"server=1\\n\")\n@@ -312,7 +312,7 @@ def append_config(datadir, options):\n         for option in options:\n             f.write(option + \"\\n\")\n \n-def get_auth_cookie(datadir):\n+def get_auth_cookie(datadir, chain):\n     user = None\n     password = None\n     if os.path.isfile(os.path.join(datadir, \"bitcoin.conf\")):\n@@ -325,7 +325,7 @@ def get_auth_cookie(datadir):\n                     assert password is None  # Ensure that there is only one rpcpassword line\n                     password = line.split(\"=\")[1].strip(\"\\n\")\n     try:\n-        with open(os.path.join(datadir, \"regtest\", \".cookie\"), 'r', encoding=\"ascii\") as f:\n+        with open(os.path.join(datadir, chain, \".cookie\"), 'r', encoding=\"ascii\") as f:\n             userpass = f.read()\n             split_userpass = userpass.split(':')\n             user = split_userpass[0]\n@@ -337,10 +337,10 @@ def get_auth_cookie(datadir):\n     return user, password\n \n # If a cookie file exists in the given datadir, delete it.\n-def delete_cookie_file(datadir):\n-    if os.path.isfile(os.path.join(datadir, \"regtest\", \".cookie\")):\n+def delete_cookie_file(datadir, chain):\n+    if os.path.isfile(os.path.join(datadir, chain, \".cookie\")):\n         logger.debug(\"Deleting leftover cookie file\")\n-        os.remove(os.path.join(datadir, \"regtest\", \".cookie\"))\n+        os.remove(os.path.join(datadir, chain, \".cookie\"))\n \n def get_bip9_status(node, key):\n     info = node.getblockchaininfo()"
      }
    ]
  },
  {
    "sha": "faf36838bdba7393960fce6ad0c56dc1f93f5870",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWYzNjgzOGJkYmE3MzkzOTYwZmNlNmFkMGM1NmRjMWY5M2Y1ODcw",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-07-31T18:34:17Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-08-02T13:04:21Z"
      },
      "message": "test: Avoid hardcoding the chain name in combine_logs",
      "tree": {
        "sha": "8951cbc927e75db509ee5a7932f48e7755a61de6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8951cbc927e75db509ee5a7932f48e7755a61de6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faf36838bdba7393960fce6ad0c56dc1f93f5870",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUiE1Av+KZZbzUqyBxdFxjizeMsyfa1YfK4mbBkgJui5Qp49kBZoZ026zGxthG0w\na8a8WtElZy6wVu8CX8/CMV7ScfCWE3+twIN5cdJWdKCaoB2PwEWH/9MbYx5dIa8o\n+OhDbdMh//PXuQMPuQqL5ggu+sU8qqCRtUcl7Cn5os1Mz4fMqBfoxm59DgjtIJwT\n/oDli9ZNHjzRdd0bzKZUWklsNivdLPXpsGL4SuX01xdOV5FPBhTyEBNgCWuPnWOM\nzlpybg4gI8BeQ1dTfrsTGpdIZBXZSUCS3bVzfPMUEAMm7TQrv/x41wUDIyveBglK\nb0c2PgZQDktyeg1+ycZU/ssGjS2KUG5XSncAoKtagm+ZkjlVx6VkzcPfk7kbh3SP\nmJy8py6KYdROwmGR3owhVBll4y5Lj0YP2xRnVH1HQkIhGbCQlwKiAUU1vYjIklfi\nh1BOHpV7oqgK/do+MmP6JslLjz2NrLJCgYQdOrWFw5QxvN3B0rHQTvYE51b6+PSt\nvz7dXP7w\n=t0Qf\n-----END PGP SIGNATURE-----",
        "payload": "tree 8951cbc927e75db509ee5a7932f48e7755a61de6\nparent fa8a1d7ba30040f8c74f93fc41a61276c255a6a6\nauthor MarcoFalke <falke.marco@gmail.com> 1564598057 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1564751061 -0400\n\ntest: Avoid hardcoding the chain name in combine_logs\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faf36838bdba7393960fce6ad0c56dc1f93f5870",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faf36838bdba7393960fce6ad0c56dc1f93f5870",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faf36838bdba7393960fce6ad0c56dc1f93f5870/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa8a1d7ba30040f8c74f93fc41a61276c255a6a6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa8a1d7ba30040f8c74f93fc41a61276c255a6a6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa8a1d7ba30040f8c74f93fc41a61276c255a6a6"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 25,
      "deletions": 15
    },
    "files": [
      {
        "sha": "5364ac4b8c69fbbf026892e5882d343f35bee0ee",
        "filename": "test/functional/combine_logs.py",
        "status": "modified",
        "additions": 25,
        "deletions": 15,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faf36838bdba7393960fce6ad0c56dc1f93f5870/test/functional/combine_logs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faf36838bdba7393960fce6ad0c56dc1f93f5870/test/functional/combine_logs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/combine_logs.py?ref=faf36838bdba7393960fce6ad0c56dc1f93f5870",
        "patch": "@@ -8,6 +8,7 @@\n \n import argparse\n from collections import defaultdict, namedtuple\n+import glob\n import heapq\n import itertools\n import os\n@@ -76,9 +77,17 @@ def read_logs(tmp_dir):\n     Delegates to generator function get_log_events() to provide individual log events\n     for each of the input log files.\"\"\"\n \n+    # Find out what the folder is called that holds the debug.log file\n+    chain = glob.glob(\"{}/node0/*/debug.log\".format(tmp_dir))\n+    if chain:\n+        chain = chain[0]  # pick the first one if more than one chain was found (should never happen)\n+        chain = re.search('node0/(.+?)/debug\\.log$', chain).group(1)  # extract the chain name\n+    else:\n+        chain = 'regtest'  # fallback to regtest (should only happen when none exists)\n+\n     files = [(\"test\", \"%s/test_framework.log\" % tmp_dir)]\n     for i in itertools.count():\n-        logfile = \"{}/node{}/regtest/debug.log\".format(tmp_dir, i)\n+        logfile = \"{}/node{}/{}/debug.log\".format(tmp_dir, i, chain)\n         if not os.path.isfile(logfile):\n             break\n         files.append((\"node%d\" % i, logfile))\n@@ -164,25 +173,26 @@ def get_log_events(source, logfile):\n \n \n def print_logs_plain(log_events, colors):\n-        \"\"\"Renders the iterator of log events into text.\"\"\"\n-        for event in log_events:\n-            lines = event.event.splitlines()\n-            print(\"{0} {1: <5} {2} {3}\".format(colors[event.source.rstrip()], event.source, lines[0], colors[\"reset\"]))\n-            if len(lines) > 1:\n-                for line in lines[1:]:\n-                    print(\"{0}{1}{2}\".format(colors[event.source.rstrip()], line, colors[\"reset\"]))\n+    \"\"\"Renders the iterator of log events into text.\"\"\"\n+    for event in log_events:\n+        lines = event.event.splitlines()\n+        print(\"{0} {1: <5} {2} {3}\".format(colors[event.source.rstrip()], event.source, lines[0], colors[\"reset\"]))\n+        if len(lines) > 1:\n+            for line in lines[1:]:\n+                print(\"{0}{1}{2}\".format(colors[event.source.rstrip()], line, colors[\"reset\"]))\n \n \n def print_logs_html(log_events):\n-        \"\"\"Renders the iterator of log events into html.\"\"\"\n-        try:\n-            import jinja2\n-        except ImportError:\n-            print(\"jinja2 not found. Try `pip install jinja2`\")\n-            sys.exit(1)\n-        print(jinja2.Environment(loader=jinja2.FileSystemLoader('./'))\n+    \"\"\"Renders the iterator of log events into html.\"\"\"\n+    try:\n+        import jinja2\n+    except ImportError:\n+        print(\"jinja2 not found. Try `pip install jinja2`\")\n+        sys.exit(1)\n+    print(jinja2.Environment(loader=jinja2.FileSystemLoader('./'))\n                     .get_template('combined_log_template.html')\n                     .render(title=\"Combined Logs from testcase\", log_events=[event._asdict() for event in log_events]))\n \n+\n if __name__ == '__main__':\n     main()"
      }
    ]
  }
]