[
  {
    "sha": "b951b0973cfd4e0db4607a00d434a04afb0d6199",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiOTUxYjA5NzNjZmQ0ZTBkYjQ2MDdhMDBkNDM0YTA0YWZiMGQ2MTk5",
    "commit": {
      "author": {
        "name": "Larry Ruane",
        "email": "larryruane@gmail.com",
        "date": "2020-01-20T15:32:42Z"
      },
      "committer": {
        "name": "Larry Ruane",
        "email": "larryruane@gmail.com",
        "date": "2020-01-29T22:44:00Z"
      },
      "message": "on startup, write config options to debug.log",
      "tree": {
        "sha": "2acf7234057a1b41be604373c885ac431ae9a9f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2acf7234057a1b41be604373c885ac431ae9a9f2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b951b0973cfd4e0db4607a00d434a04afb0d6199",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b951b0973cfd4e0db4607a00d434a04afb0d6199",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b951b0973cfd4e0db4607a00d434a04afb0d6199",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b951b0973cfd4e0db4607a00d434a04afb0d6199/comments",
    "author": {
      "login": "LarryRuane",
      "id": 8321330,
      "node_id": "MDQ6VXNlcjgzMjEzMzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/LarryRuane",
      "html_url": "https://github.com/LarryRuane",
      "followers_url": "https://api.github.com/users/LarryRuane/followers",
      "following_url": "https://api.github.com/users/LarryRuane/following{/other_user}",
      "gists_url": "https://api.github.com/users/LarryRuane/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
      "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
      "repos_url": "https://api.github.com/users/LarryRuane/repos",
      "events_url": "https://api.github.com/users/LarryRuane/events{/privacy}",
      "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "LarryRuane",
      "id": 8321330,
      "node_id": "MDQ6VXNlcjgzMjEzMzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/LarryRuane",
      "html_url": "https://github.com/LarryRuane",
      "followers_url": "https://api.github.com/users/LarryRuane/followers",
      "following_url": "https://api.github.com/users/LarryRuane/following{/other_user}",
      "gists_url": "https://api.github.com/users/LarryRuane/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
      "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
      "repos_url": "https://api.github.com/users/LarryRuane/repos",
      "events_url": "https://api.github.com/users/LarryRuane/events{/privacy}",
      "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "aabec94541e23a67a9f30dc2c80dab3383a01737",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aabec94541e23a67a9f30dc2c80dab3383a01737",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aabec94541e23a67a9f30dc2c80dab3383a01737"
      }
    ],
    "stats": {
      "total": 119,
      "additions": 113,
      "deletions": 6
    },
    "files": [
      {
        "sha": "e1a02edb96ecb1cd5cb3e688de74a455a2138ff0",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 5,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b951b0973cfd4e0db4607a00d434a04afb0d6199/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b951b0973cfd4e0db4607a00d434a04afb0d6199/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=b951b0973cfd4e0db4607a00d434a04afb0d6199",
        "patch": "@@ -436,7 +436,7 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-timeout=<n>\", strprintf(\"Specify connection timeout in milliseconds (minimum: 1, default: %d)\", DEFAULT_CONNECT_TIMEOUT), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-peertimeout=<n>\", strprintf(\"Specify p2p connection timeout in seconds. This option determines the amount of time a peer may be inactive before the connection to it is dropped. (minimum: 1, default: %d)\", DEFAULT_PEER_CONNECT_TIMEOUT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-torcontrol=<ip>:<port>\", strprintf(\"Tor control port to use if onion listening enabled (default: %s)\", DEFAULT_TOR_CONTROL), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-torpassword=<pass>\", \"Tor control port password (default: empty)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-torpassword=<pass>\", \"Tor control port password (default: empty)\", ArgsManager::ALLOW_ANY | ArgsManager::SENSITIVE, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-asmap=<file>\", \"Specify asn mapping used for bucketing of the peers. Path should be relative to the -datadir path.\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n #ifdef USE_UPNP\n #if USE_UPNP\n@@ -537,15 +537,15 @@ void SetupServerArgs()\n \n     gArgs.AddArg(\"-rest\", strprintf(\"Accept public REST requests (default: %u)\", DEFAULT_REST_ENABLE), ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n     gArgs.AddArg(\"-rpcallowip=<ip>\", \"Allow JSON-RPC connections from specified source. Valid for <ip> are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times\", ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n-    gArgs.AddArg(\"-rpcauth=<userpw>\", \"Username and HMAC-SHA-256 hashed password for JSON-RPC connections. The field <userpw> comes in the format: <USERNAME>:<SALT>$<HASH>. A canonical python script is included in share/rpcauth. The client then connects normally using the rpcuser=<USERNAME>/rpcpassword=<PASSWORD> pair of arguments. This option can be specified multiple times\", ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n-    gArgs.AddArg(\"-rpcbind=<addr>[:port]\", \"Bind to given address to listen for JSON-RPC connections. Do not expose the RPC server to untrusted networks such as the public internet! This option is ignored unless -rpcallowip is also passed. Port is optional and overrides -rpcport. Use [host]:port notation for IPv6. This option can be specified multiple times (default: 127.0.0.1 and ::1 i.e., localhost)\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcauth=<userpw>\", \"Username and HMAC-SHA-256 hashed password for JSON-RPC connections. The field <userpw> comes in the format: <USERNAME>:<SALT>$<HASH>. A canonical python script is included in share/rpcauth. The client then connects normally using the rpcuser=<USERNAME>/rpcpassword=<PASSWORD> pair of arguments. This option can be specified multiple times\", ArgsManager::ALLOW_ANY | ArgsManager::SENSITIVE, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcbind=<addr>[:port]\", \"Bind to given address to listen for JSON-RPC connections. Do not expose the RPC server to untrusted networks such as the public internet! This option is ignored unless -rpcallowip is also passed. Port is optional and overrides -rpcport. Use [host]:port notation for IPv6. This option can be specified multiple times (default: 127.0.0.1 and ::1 i.e., localhost)\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY | ArgsManager::SENSITIVE, OptionsCategory::RPC);\n     gArgs.AddArg(\"-rpccookiefile=<loc>\", \"Location of the auth cookie. Relative paths will be prefixed by a net-specific datadir location. (default: data dir)\", ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n-    gArgs.AddArg(\"-rpcpassword=<pw>\", \"Password for JSON-RPC connections\", ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcpassword=<pw>\", \"Password for JSON-RPC connections\", ArgsManager::ALLOW_ANY | ArgsManager::SENSITIVE, OptionsCategory::RPC);\n     gArgs.AddArg(\"-rpcport=<port>\", strprintf(\"Listen for JSON-RPC connections on <port> (default: %u, testnet: %u, regtest: %u)\", defaultBaseParams->RPCPort(), testnetBaseParams->RPCPort(), regtestBaseParams->RPCPort()), ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::RPC);\n     gArgs.AddArg(\"-rpcserialversion\", strprintf(\"Sets the serialization of raw transaction or block hex returned in non-verbose mode, non-segwit(0) or segwit(1) (default: %d)\", DEFAULT_RPC_SERIALIZE_VERSION), ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n     gArgs.AddArg(\"-rpcservertimeout=<n>\", strprintf(\"Timeout during HTTP requests (default: %d)\", DEFAULT_HTTP_SERVER_TIMEOUT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::RPC);\n     gArgs.AddArg(\"-rpcthreads=<n>\", strprintf(\"Set the number of threads to service RPC calls (default: %d)\", DEFAULT_HTTP_THREADS), ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n-    gArgs.AddArg(\"-rpcuser=<user>\", \"Username for JSON-RPC connections\", ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcuser=<user>\", \"Username for JSON-RPC connections\", ArgsManager::ALLOW_ANY | ArgsManager::SENSITIVE, OptionsCategory::RPC);\n     gArgs.AddArg(\"-rpcwhitelist=<whitelist>\", \"Set a whitelist to filter incoming RPC calls for a specific user. The field <whitelist> comes in the format: <USERNAME>:<rpc 1>,<rpc 2>,...,<rpc n>. If multiple whitelists are set for a given user, they are set-intersected. See -rpcwhitelistdefault documentation for information on default whitelist behavior.\", ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n     gArgs.AddArg(\"-rpcwhitelistdefault\", \"Sets default behavior for rpc whitelisting. Unless rpcwhitelistdefault is set to 0, if any -rpcwhitelist is set, the rpc server acts as if all rpc users are subject to empty-unless-otherwise-specified whitelists. If rpcwhitelistdefault is set to 1 and no -rpcwhitelist is set, rpc server acts as if all rpc users are subject to empty whitelists.\", ArgsManager::ALLOW_BOOL, OptionsCategory::RPC);\n     gArgs.AddArg(\"-rpcworkqueue=<n>\", strprintf(\"Set the depth of the work queue to service RPC calls (default: %d)\", DEFAULT_HTTP_WORKQUEUE), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::RPC);\n@@ -1230,6 +1230,9 @@ bool AppInitMain(NodeContext& node)\n         LogPrintf(\"Config file: %s (not found, skipping)\\n\", config_file_path.string());\n     }\n \n+    // Log the config arguments to debug.log\n+    gArgs.LogArgs();\n+\n     LogPrintf(\"Using at most %i automatic connections (%i file descriptors available)\\n\", nMaxConnections, nFD);\n \n     // Warn about relative -datadir path."
      },
      {
        "sha": "10fb05ca8ae2b95d901734eab9ff39884c9f2602",
        "filename": "src/test/getarg_tests.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 0,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b951b0973cfd4e0db4607a00d434a04afb0d6199/src/test/getarg_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b951b0973cfd4e0db4607a00d434a04afb0d6199/src/test/getarg_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/getarg_tests.cpp?ref=b951b0973cfd4e0db4607a00d434a04afb0d6199",
        "patch": "@@ -183,4 +183,32 @@ BOOST_AUTO_TEST_CASE(boolargno)\n     BOOST_CHECK(gArgs.GetBoolArg(\"-foo\", false));\n }\n \n+BOOST_AUTO_TEST_CASE(logargs)\n+{\n+    const auto okaylog_bool = std::make_pair(\"-okaylog-bool\", ArgsManager::ALLOW_BOOL);\n+    const auto okaylog_negbool = std::make_pair(\"-okaylog-negbool\", ArgsManager::ALLOW_BOOL);\n+    const auto okaylog = std::make_pair(\"-okaylog\", ArgsManager::ALLOW_ANY);\n+    const auto dontlog = std::make_pair(\"-dontlog\", ArgsManager::ALLOW_ANY | ArgsManager::SENSITIVE);\n+    SetupArgs({okaylog_bool, okaylog_negbool, okaylog, dontlog});\n+    ResetArgs(\"-okaylog-bool -nookaylog-negbool -okaylog=public -dontlog=private\");\n+\n+    // Everything logged to debug.log will also append to str\n+    std::string str;\n+    auto print_connection = LogInstance().PushBackCallback(\n+        [&str](const std::string& s) {\n+            str += s;\n+        });\n+\n+    // Log the arguments\n+    gArgs.LogArgs();\n+\n+    LogInstance().DeleteCallback(print_connection);\n+    // Check that what should appear does, and what shouldn't doesn't.\n+    BOOST_CHECK(str.find(\"Command-line arg: okaylog-bool=\\\"\\\"\") != std::string::npos);\n+    BOOST_CHECK(str.find(\"Command-line arg: okaylog-negbool=false\") != std::string::npos);\n+    BOOST_CHECK(str.find(\"Command-line arg: okaylog=\\\"public\\\"\") != std::string::npos);\n+    BOOST_CHECK(str.find(\"dontlog=****\") != std::string::npos);\n+    BOOST_CHECK(str.find(\"private\") == std::string::npos);\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "ff3967c5778412beb05cc8d75fabda60912f62bd",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b951b0973cfd4e0db4607a00d434a04afb0d6199/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b951b0973cfd4e0db4607a00d434a04afb0d6199/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=b951b0973cfd4e0db4607a00d434a04afb0d6199",
        "patch": "@@ -864,6 +864,32 @@ std::vector<util::SettingsValue> ArgsManager::GetSettingsList(const std::string&\n     return util::GetSettingsList(m_settings, m_network, SettingName(arg), !UseDefaultSection(arg));\n }\n \n+void ArgsManager::logArgsPrefix(\n+    const std::string& prefix,\n+    const std::string& section,\n+    const std::map<std::string, std::vector<util::SettingsValue>>& args) const\n+{\n+    std::string section_str = section.empty() ? \"\" : \"[\" + section + \"] \";\n+    for (const auto& arg : args) {\n+        for (const auto& value : arg.second) {\n+            Optional<unsigned int> flags = GetArgFlags('-' + arg.first);\n+            if (flags) {\n+                std::string value_str = (*flags & SENSITIVE) ? \"****\" : value.write();\n+                LogPrintf(\"%s %s%s=%s\\n\", prefix, section_str, arg.first, value_str);\n+            }\n+        }\n+    }\n+}\n+\n+void ArgsManager::LogArgs() const\n+{\n+    LOCK(cs_args);\n+    for (const auto& section : m_settings.ro_config) {\n+        logArgsPrefix(\"Config file arg:\", section.first, section.second);\n+    }\n+    logArgsPrefix(\"Command-line arg:\", \"\", m_settings.command_line_options);\n+}\n+\n bool RenameOver(fs::path src, fs::path dest)\n {\n #ifdef WIN32"
      },
      {
        "sha": "bb69181de96400bcd99c9de70765aa968c7fc718",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b951b0973cfd4e0db4607a00d434a04afb0d6199/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b951b0973cfd4e0db4607a00d434a04afb0d6199/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=b951b0973cfd4e0db4607a00d434a04afb0d6199",
        "patch": "@@ -145,6 +145,8 @@ class ArgsManager\n          * between mainnet and regtest/testnet won't cause problems due to these\n          * parameters by accident. */\n         NETWORK_ONLY = 0x200,\n+        // This argument's value is sensitive (such as a password).\n+        SENSITIVE = 0x400,\n     };\n \n protected:\n@@ -318,6 +320,19 @@ class ArgsManager\n      * Return nullopt for unknown arg.\n      */\n     Optional<unsigned int> GetArgFlags(const std::string& name) const;\n+\n+    /**\n+     * Log the config file options and the command line arguments,\n+     * useful for troubleshooting.\n+     */\n+    void LogArgs() const;\n+\n+private:\n+    // Helper function for LogArgs().\n+    void logArgsPrefix(\n+        const std::string& prefix,\n+        const std::string& section,\n+        const std::map<std::string, std::vector<util::SettingsValue>>& args) const;\n };\n \n extern ArgsManager gArgs;"
      },
      {
        "sha": "1bc62f660d4cb3b6b452fcf5ee26b90965607082",
        "filename": "test/functional/feature_config_args.py",
        "status": "modified",
        "additions": 30,
        "deletions": 0,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b951b0973cfd4e0db4607a00d434a04afb0d6199/test/functional/feature_config_args.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b951b0973cfd4e0db4607a00d434a04afb0d6199/test/functional/feature_config_args.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_config_args.py?ref=b951b0973cfd4e0db4607a00d434a04afb0d6199",
        "patch": "@@ -83,10 +83,40 @@ def test_log_buffer(self):\n             self.start_node(0, extra_args=['-noconnect=0'])\n         self.stop_node(0)\n \n+    def test_args_log(self):\n+        self.log.info('Test config args logging')\n+        with self.nodes[0].assert_debug_log(\n+                expected_msgs=[\n+                    'Command-line arg: addnode=\"some.node\"',\n+                    'Command-line arg: rpcauth=****',\n+                    'Command-line arg: rpcbind=****',\n+                    'Command-line arg: rpcpassword=****',\n+                    'Command-line arg: rpcuser=****',\n+                    'Command-line arg: torpassword=****',\n+                    'Config file arg: regtest=\"1\"',\n+                    'Config file arg: [regtest] server=\"1\"',\n+                ],\n+                unexpected_msgs=[\n+                    'alice:f7efda5c189b999524f151318c0c86$d5b51b3beffbc0',\n+                    '127.1.1.1',\n+                    'secret-rpcuser',\n+                    'secret-torpassword',\n+                ]):\n+            self.start_node(0, extra_args=[\n+                '-addnode=some.node',\n+                '-rpcauth=alice:f7efda5c189b999524f151318c0c86$d5b51b3beffbc0',\n+                '-rpcbind=127.1.1.1',\n+                '-rpcpassword=',\n+                '-rpcuser=secret-rpcuser',\n+                '-torpassword=secret-torpassword',\n+            ])\n+        self.stop_node(0)\n+\n     def run_test(self):\n         self.stop_node(0)\n \n         self.test_log_buffer()\n+        self.test_args_log()\n \n         self.test_config_file_parser()\n "
      },
      {
        "sha": "0742dbe6175d692aa2387b49b8c43fa9fe72006b",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b951b0973cfd4e0db4607a00d434a04afb0d6199/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b951b0973cfd4e0db4607a00d434a04afb0d6199/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=b951b0973cfd4e0db4607a00d434a04afb0d6199",
        "patch": "@@ -298,7 +298,9 @@ def wait_until_stopped(self, timeout=BITCOIND_PROC_WAIT_TIMEOUT):\n         wait_until(self.is_node_stopped, timeout=timeout)\n \n     @contextlib.contextmanager\n-    def assert_debug_log(self, expected_msgs, timeout=2):\n+    def assert_debug_log(self, expected_msgs, unexpected_msgs=None, timeout=2):\n+        if unexpected_msgs is None:\n+            unexpected_msgs = []\n         time_end = time.time() + timeout\n         debug_log = os.path.join(self.datadir, self.chain, 'debug.log')\n         with open(debug_log, encoding='utf-8') as dl:\n@@ -313,6 +315,9 @@ def assert_debug_log(self, expected_msgs, timeout=2):\n                 dl.seek(prev_size)\n                 log = dl.read()\n             print_log = \" - \" + \"\\n - \".join(log.splitlines())\n+            for unexpected_msg in unexpected_msgs:\n+                if re.search(re.escape(unexpected_msg), log, flags=re.MULTILINE):\n+                    self._raise_assertion_error('Unexpected message \"{}\" partially matches log:\\n\\n{}\\n\\n'.format(unexpected_msg, print_log))\n             for expected_msg in expected_msgs:\n                 if re.search(re.escape(expected_msg), log, flags=re.MULTILINE) is None:\n                     found = False"
      }
    ]
  }
]