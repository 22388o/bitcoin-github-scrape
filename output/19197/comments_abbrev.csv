hebasto,2020-06-07 06:18:40,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/19197#issuecomment-640163951,640163951,
hebasto,2020-06-07 07:12:16,"Keep testing and the second instance of ""loadblk"" thread appears:\n\n![Screenshot from 2020-06-07 10-02-35](https://user-images.githubusercontent.com/32963518/83962547-fd8af000-a8a6-11ea-9a45-f8103f13b6bb.png)\n\nIs it ok?\n\nUPDATE: the same behavior observed on master, therefore it seems does not related to this PR changes. Going to submit a dedicated issue.",https://github.com/bitcoin/bitcoin/pull/19197#issuecomment-640169081,640169081,
MarcoFalke,2020-06-07 10:26:32,why is is ok to not wait for the thread to exit (join) before shutdown?,https://github.com/bitcoin/bitcoin/pull/19197#issuecomment-640193207,640193207,
sipa,2020-06-07 16:28:22,"@MarcoFalke AFAIK, there is no problem with that. The application won't quit until all its threads have terminated.",https://github.com/bitcoin/bitcoin/pull/19197#issuecomment-640244112,640244112,
MarcoFalke,2020-06-07 16:34:31,"What I mean is that during shutdown we assume the chain clients don't receive (let's say) block connected signals anymore because they are already flushed. After this change, it is (theoretically, I haven't checked) possible that ThreadImport generates events that will be sent to objects that can't handle them or that ThreadImport reads from objects that have been deleted.\n\nAm I missing someth",https://github.com/bitcoin/bitcoin/pull/19197#issuecomment-640245008,640245008,
donaloconnor,2020-06-07 16:57:38,"> @MarcoFalke AFAIK, there is no problem with that. The application won't quit until all its threads have terminated.\n\nI thought that once main returns, any detached threads will not be waited on and stack unwinding does not occur risking danger of uncalled dtors.\n\nI tried a sample here and it seems to be the case?\n```\n#include <thread>\n#include <chrono>\n#include <iostream>\n\nus",https://github.com/bitcoin/bitcoin/pull/19197#issuecomment-640248104,640248104,
sipa,2020-06-07 17:05:38,"@donaloconnor I would certainly have expected the code above to sleep 1 s before exiting, so it does seem I'm wrong.\n\n@MarcoFalke That's a good point. It seems we'll need to keep the std::thread object around somehow, and join it in the right order at shutdown.",https://github.com/bitcoin/bitcoin/pull/19197#issuecomment-640249127,640249127,
laanwj,2020-06-09 14:35:58,"Concept ACK.\n\n> @MarcoFalke That's a good point. It seems we'll need to keep the std::thread object around somehow, and join it in the right order at shutdown.\n\nYes. It needs to be join-ed on shutdown to make sure it has terminated before tearing down validation-related data structures. Detach is not safe for a thread like this.\n\n(there's only one use where using `detach` is acceptable",https://github.com/bitcoin/bitcoin/pull/19197#issuecomment-641338935,641338935,
fanquake,2020-06-12 07:47:31,Pushed a `.detach()`-less change.,https://github.com/bitcoin/bitcoin/pull/19197#issuecomment-643126864,643126864,
donaloconnor,2020-06-12 08:08:28,ACK 83fd3a6,https://github.com/bitcoin/bitcoin/pull/19197#issuecomment-643136469,643136469,
laanwj,2020-06-16 15:34:15,Code review ACK 83fd3a6d73eee452dc5141bdf6826da62d7b2dbd,https://github.com/bitcoin/bitcoin/pull/19197#issuecomment-644841483,644841483,
hebasto,2020-06-07 06:55:01,nit: The `AppInitMain()` is a way large function. Could the scope of the `import` variable be limited by a block?,https://github.com/bitcoin/bitcoin/pull/19197#discussion_r436332073,436332073,src/init.cpp
donaloconnor,2020-06-12 07:59:29,I think it might be safer to check if the thread is joinable before joining in case this path is reached after some initialization failure when the thread may not have started.,https://github.com/bitcoin/bitcoin/pull/19197#discussion_r439267832,439267832,src/init.cpp
fanquake,2020-06-12 08:06:14,"Thanks, I've added that.",https://github.com/bitcoin/bitcoin/pull/19197#discussion_r439270803,439270803,src/init.cpp
MarcoFalke,2020-06-12 11:22:45,"I don't really like adding more and more globals to init. Ideally init should be a slim file with only calls to other modules to start/stop. Longer term `ThreadImport` should be moved to validation because it is purely validation related. Init shouldn't need to know how to load blocks from disk, etc... Note that `LoadMempool` is also in validation.\n\nMoreover, with assumeutxo, thus multiple cha",https://github.com/bitcoin/bitcoin/pull/19197#discussion_r439362097,439362097,src/init.cpp
laanwj,2020-06-16 15:33:44,"On the other hand this was a *hidden* global before, a part of `threadGroup` (which can hopefully go away soon!). I don't think this PR makes anything worse.\n\nI think your longer-term solution makes sense, but I'm not sure it needs to be done here.",https://github.com/bitcoin/bitcoin/pull/19197#discussion_r440946316,440946316,src/init.cpp
MarcoFalke,2020-06-16 16:22:11,"Agree that it doesn't make anything worse, but it could be slightly better with a trivial diff.\n\n```diff\ndiff --git a/src/init.cpp b/src/init.cpp\nindex 8d9566edc3..984f6b2034 100644\n--- a/src/init.cpp\n+++ b/src/init.cpp\n@@ -152,8 +152,6 @@ NODISCARD static bool CreatePidFile()\n \n static std::unique_ptr<ECCVerifyHandle> globalVerifyHandle;\n \n-static std::thread g_load_block;\",https://github.com/bitcoin/bitcoin/pull/19197#discussion_r440980063,440980063,src/init.cpp
fanquake,2020-06-19 05:26:27,"Thanks. I'll take care of the suggestions, adding to chainman and thread renaming, in some followup changes. I just wanted to get it out of the Boost thread group here.",https://github.com/bitcoin/bitcoin/pull/19197#discussion_r442637440,442637440,src/init.cpp
