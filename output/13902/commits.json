[
  {
    "sha": "6e523c92969c3881d998a818c8957e89c9a20146",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZTUyM2M5Mjk2OWMzODgxZDk5OGE4MThjODk1N2U4OWM5YTIwMTQ2",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-08-07T12:52:49Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-08-07T13:27:09Z"
      },
      "message": "prevector: Suppress -Wmaybe-uninitialized (gcc) warning in indirect_ptr(...)",
      "tree": {
        "sha": "25236816518562e0610c301c3d729aa493035fb0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/25236816518562e0610c301c3d729aa493035fb0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6e523c92969c3881d998a818c8957e89c9a20146",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e523c92969c3881d998a818c8957e89c9a20146",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6e523c92969c3881d998a818c8957e89c9a20146",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e523c92969c3881d998a818c8957e89c9a20146/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8c3c402a5a2da9c4c62655b64a9adceced7e9cf4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c3c402a5a2da9c4c62655b64a9adceced7e9cf4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8c3c402a5a2da9c4c62655b64a9adceced7e9cf4"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 11,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b3bf34a495cb5985ca1bfc51386ee3b48cdb76ff",
        "filename": "src/prevector.h",
        "status": "modified",
        "additions": 11,
        "deletions": 1,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e523c92969c3881d998a818c8957e89c9a20146/src/prevector.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e523c92969c3881d998a818c8957e89c9a20146/src/prevector.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/prevector.h?ref=6e523c92969c3881d998a818c8957e89c9a20146",
        "patch": "@@ -159,7 +159,13 @@ class prevector {\n \n     T* direct_ptr(difference_type pos) { return reinterpret_cast<T*>(_union.direct) + pos; }\n     const T* direct_ptr(difference_type pos) const { return reinterpret_cast<const T*>(_union.direct) + pos; }\n-    T* indirect_ptr(difference_type pos) { return reinterpret_cast<T*>(_union.indirect) + pos; }\n+    T* indirect_ptr(difference_type pos) {\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wmaybe-uninitialized\"\n+         // gcc warning: <unnamed struct>::indirect\u2019 may be used uninitialized in this function [-Wmaybe-uninitialized]\n+        return reinterpret_cast<T*>(_union.indirect) + pos;\n+#pragma GCC diagnostic pop\n+    }\n     const T* indirect_ptr(difference_type pos) const { return reinterpret_cast<const T*>(_union.indirect) + pos; }\n     bool is_direct() const { return _size <= N; }\n \n@@ -178,7 +184,11 @@ class prevector {\n                 /* FIXME: Because malloc/realloc here won't call new_handler if allocation fails, assert\n                     success. These should instead use an allocator or new/delete so that handlers\n                     are called as necessary, but performance would be slightly degraded by doing so. */\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wmaybe-uninitialized\"\n+                // gcc warning: <unnamed struct>::indirect\u2019 may be used uninitialized in this function [-Wmaybe-uninitialized]\n                 _union.indirect = static_cast<char*>(realloc(_union.indirect, ((size_t)sizeof(T)) * new_capacity));\n+#pragma GCC diagnostic pop\n                 assert(_union.indirect);\n                 _union.capacity = new_capacity;\n             } else {"
      }
    ]
  }
]