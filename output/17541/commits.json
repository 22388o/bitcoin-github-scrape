[
  {
    "sha": "1be0b1fb2adcf95d76f879195564c0bf84162e31",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYmUwYjFmYjJhZGNmOTVkNzZmODc5MTk1NTY0YzBiZjg0MTYyZTMx",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2019-11-20T20:40:53Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2019-11-20T20:40:53Z"
      },
      "message": "test: add functional test for non-standard bare multisig txs\n\nA transaction is rejected by the mempool with reason \"bare-multisig\" if any of\nthe outputs' scriptPubKey has bare multisig format (M <PubKey1> <PubKey2> ...\n<PubKeyN> N OP_CHECKSIG) and bitcoind is started with \"-permitbaremultisig=0\".",
      "tree": {
        "sha": "5faa376bd6d36fd6a87b78adbaae166c4c9be5ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5faa376bd6d36fd6a87b78adbaae166c4c9be5ea"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1be0b1fb2adcf95d76f879195564c0bf84162e31",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1be0b1fb2adcf95d76f879195564c0bf84162e31",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1be0b1fb2adcf95d76f879195564c0bf84162e31",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1be0b1fb2adcf95d76f879195564c0bf84162e31/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a8d9f7dfa72395e95c9f197b47f2120e19f1b1d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8d9f7dfa72395e95c9f197b47f2120e19f1b1d2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a8d9f7dfa72395e95c9f197b47f2120e19f1b1d2"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 14,
      "deletions": 1
    },
    "files": [
      {
        "sha": "95d8053dc260de1112fa186f5c9cea83b3a91fd8",
        "filename": "test/functional/mempool_accept.py",
        "status": "modified",
        "additions": 14,
        "deletions": 1,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1be0b1fb2adcf95d76f879195564c0bf84162e31/test/functional/mempool_accept.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1be0b1fb2adcf95d76f879195564c0bf84162e31/test/functional/mempool_accept.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_accept.py?ref=1be0b1fb2adcf95d76f879195564c0bf84162e31",
        "patch": "@@ -8,6 +8,7 @@\n import math\n \n from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.key import ECKey\n from test_framework.messages import (\n     BIP125_SEQUENCE_NUMBER,\n     COIN,\n@@ -20,6 +21,9 @@\n     hash160,\n     CScript,\n     OP_0,\n+    OP_2,\n+    OP_3,\n+    OP_CHECKMULTISIG,\n     OP_EQUAL,\n     OP_HASH160,\n     OP_RETURN,\n@@ -35,7 +39,7 @@ class MempoolAcceptanceTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [[\n-            '-txindex',\n+            '-txindex','-permitbaremultisig=0',\n         ]] * self.num_nodes\n \n     def skip_test_if_missing_module(self):\n@@ -261,6 +265,15 @@ def run_test(self):\n             rawtxs=[tx.serialize().hex()],\n         )\n         tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_reference)))\n+        key = ECKey()\n+        key.generate()\n+        pubkey = key.get_pubkey().get_bytes()\n+        tx.vout[0].scriptPubKey = CScript([OP_2, pubkey, pubkey, pubkey, OP_3, OP_CHECKMULTISIG])  # Some bare multisig script (2-of-3)\n+        self.check_mempool_result(\n+            result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': 'bare-multisig'}],\n+            rawtxs=[tx.serialize().hex()],\n+        )\n+        tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_reference)))\n         tx.vin[0].scriptSig = CScript([OP_HASH160])  # Some not-pushonly scriptSig\n         self.check_mempool_result(\n             result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': 'scriptsig-not-pushonly'}],"
      }
    ]
  }
]