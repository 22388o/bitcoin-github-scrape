[
  {
    "sha": "ca4dba21337ff196fef2a47e29ae92f2c57ce1ad",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYTRkYmEyMTMzN2ZmMTk2ZmVmMmE0N2UyOWFlOTJmMmM1N2NlMWFk",
    "commit": {
      "author": {
        "name": "Harris",
        "email": "brakmic@gmail.com",
        "date": "2020-04-21T12:09:39Z"
      },
      "committer": {
        "name": "Harris",
        "email": "brakmic@gmail.com",
        "date": "2020-04-21T12:09:39Z"
      },
      "message": "rpc: remove g_rpc_node & g_rpc_chain",
      "tree": {
        "sha": "37c2e0ebe0227a7545b6de755ccb394bceb85023",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/37c2e0ebe0227a7545b6de755ccb394bceb85023"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ca4dba21337ff196fef2a47e29ae92f2c57ce1ad",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEED2bWxOeRx//n2QOeJiaFvHjtEfsFAl6e4oMACgkQJiaFvHjt\nEfu4swf6A8GBhs06o+F45/dpYjgiDr8C95h6I5hJul6p6QsYD5gCM92rJT7QUyQq\nCyfnYbB0pNB3lCxAYjpds31ptQFlX0pBRVRPRnxm0E2WR7RzO7ekNHKeQ7QBY/vS\nMBfJYGnGLt8OZrHmoMHIPW8lJm0MXOax3M18hjdu0+M8NBB+SwtcYMPR1xsN2G5L\nWHZ6ATp4nFsxOUxCz/uOs0DMzKfXAEbVarXWmaQhlp8ykH6KpT5UU7fJ6HDWP2F4\nEht/9I0Q3oBhSw+q+DoGBsLNIFlbs7rF2kV0fzXN8bWAK5c7XzEw3IGe/ddjCZdQ\ngitgRSXlc5YG9YFM7ZRMb7TaRzMEIg==\n=H//w\n-----END PGP SIGNATURE-----",
        "payload": "tree 37c2e0ebe0227a7545b6de755ccb394bceb85023\nparent 977328338e468390feea691de744609db213281b\nauthor Harris <brakmic@gmail.com> 1587470979 +0200\ncommitter Harris <brakmic@gmail.com> 1587470979 +0200\n\nrpc: remove g_rpc_node & g_rpc_chain\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca4dba21337ff196fef2a47e29ae92f2c57ce1ad",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ca4dba21337ff196fef2a47e29ae92f2c57ce1ad",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca4dba21337ff196fef2a47e29ae92f2c57ce1ad/comments",
    "author": {
      "login": "brakmic",
      "id": 56779,
      "node_id": "MDQ6VXNlcjU2Nzc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/56779?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brakmic",
      "html_url": "https://github.com/brakmic",
      "followers_url": "https://api.github.com/users/brakmic/followers",
      "following_url": "https://api.github.com/users/brakmic/following{/other_user}",
      "gists_url": "https://api.github.com/users/brakmic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brakmic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brakmic/subscriptions",
      "organizations_url": "https://api.github.com/users/brakmic/orgs",
      "repos_url": "https://api.github.com/users/brakmic/repos",
      "events_url": "https://api.github.com/users/brakmic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brakmic/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "brakmic",
      "id": 56779,
      "node_id": "MDQ6VXNlcjU2Nzc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/56779?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brakmic",
      "html_url": "https://github.com/brakmic",
      "followers_url": "https://api.github.com/users/brakmic/followers",
      "following_url": "https://api.github.com/users/brakmic/following{/other_user}",
      "gists_url": "https://api.github.com/users/brakmic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brakmic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brakmic/subscriptions",
      "organizations_url": "https://api.github.com/users/brakmic/orgs",
      "repos_url": "https://api.github.com/users/brakmic/repos",
      "events_url": "https://api.github.com/users/brakmic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brakmic/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "977328338e468390feea691de744609db213281b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/977328338e468390feea691de744609db213281b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/977328338e468390feea691de744609db213281b"
      }
    ],
    "stats": {
      "total": 927,
      "additions": 467,
      "deletions": 460
    },
    "files": [
      {
        "sha": "e3b99b034c9c1943d852bffec80c82d2b9b82e3c",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca4dba21337ff196fef2a47e29ae92f2c57ce1ad/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca4dba21337ff196fef2a47e29ae92f2c57ce1ad/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=ca4dba21337ff196fef2a47e29ae92f2c57ce1ad",
        "patch": "@@ -7,6 +7,7 @@\n #include <chainparams.h>\n #include <crypto/hmac_sha256.h>\n #include <httpserver.h>\n+#include <node/context.h>\n #include <rpc/protocol.h>\n #include <rpc/server.h>\n #include <ui_interface.h>\n@@ -151,7 +152,7 @@ static bool RPCAuthorized(const std::string& strAuth, std::string& strAuthUserna\n     return multiUserAuthorized(strUserPass);\n }\n \n-static bool HTTPReq_JSONRPC(HTTPRequest* req, const std::string &)\n+static bool HTTPReq_JSONRPC(HTTPRequest* req, const std::string&, NodeContext* pnode)\n {\n     // JSONRPC handles only POST\n     if (req->GetRequestMethod() != HTTPRequest::POST) {\n@@ -288,15 +289,15 @@ static bool InitRPCAuthentication()\n     return true;\n }\n \n-bool StartHTTPRPC()\n+bool StartHTTPRPC(NodeContext* pnode)\n {\n     LogPrint(BCLog::RPC, \"Starting HTTP RPC server\\n\");\n     if (!InitRPCAuthentication())\n         return false;\n \n-    RegisterHTTPHandler(\"/\", true, HTTPReq_JSONRPC);\n+    RegisterHTTPHandler(\"/\", true, HTTPReq_JSONRPC, pnode);\n     if (g_wallet_init_interface.HasWalletSupport()) {\n-        RegisterHTTPHandler(\"/wallet/\", false, HTTPReq_JSONRPC);\n+        RegisterHTTPHandler(\"/wallet/\", false, HTTPReq_JSONRPC, pnode);\n     }\n     struct event_base* eventBase = EventBase();\n     assert(eventBase);"
      },
      {
        "sha": "2f490a2b0aae026e027772874a57bf635134eb25",
        "filename": "src/httprpc.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca4dba21337ff196fef2a47e29ae92f2c57ce1ad/src/httprpc.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca4dba21337ff196fef2a47e29ae92f2c57ce1ad/src/httprpc.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.h?ref=ca4dba21337ff196fef2a47e29ae92f2c57ce1ad",
        "patch": "@@ -5,11 +5,12 @@\n #ifndef BITCOIN_HTTPRPC_H\n #define BITCOIN_HTTPRPC_H\n \n+#include <node/context.h>\n \n /** Start HTTP RPC subsystem.\n  * Precondition; HTTP and RPC has been started.\n  */\n-bool StartHTTPRPC();\n+bool StartHTTPRPC(NodeContext* pnode);\n /** Interrupt HTTP RPC subsystem.\n  */\n void InterruptHTTPRPC();\n@@ -21,7 +22,7 @@ void StopHTTPRPC();\n /** Start HTTP REST subsystem.\n  * Precondition; HTTP and RPC has been started.\n  */\n-void StartREST();\n+void StartREST(NodeContext* pnode);\n /** Interrupt RPC REST subsystem.\n  */\n void InterruptREST();"
      },
      {
        "sha": "5bcedb9d3f6f301cc64bcc8be3a3459d49a19be3",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 13,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca4dba21337ff196fef2a47e29ae92f2c57ce1ad/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca4dba21337ff196fef2a47e29ae92f2c57ce1ad/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=ca4dba21337ff196fef2a47e29ae92f2c57ce1ad",
        "patch": "@@ -6,14 +6,16 @@\n \n #include <chainparamsbase.h>\n #include <compat.h>\n-#include <util/threadnames.h>\n-#include <util/system.h>\n-#include <util/strencodings.h>\n #include <netbase.h>\n+#include <node/context.h>\n #include <rpc/protocol.h> // For HTTP status codes\n #include <shutdown.h>\n #include <sync.h>\n #include <ui_interface.h>\n+#include <util/check.h>\n+#include <util/strencodings.h>\n+#include <util/system.h>\n+#include <util/threadnames.h>\n \n #include <deque>\n #include <memory>\n@@ -46,20 +48,20 @@ static const size_t MAX_HEADERS_SIZE = 8192;\n class HTTPWorkItem final : public HTTPClosure\n {\n public:\n-    HTTPWorkItem(std::unique_ptr<HTTPRequest> _req, const std::string &_path, const HTTPRequestHandler& _func):\n-        req(std::move(_req)), path(_path), func(_func)\n+    HTTPWorkItem(std::unique_ptr<HTTPRequest> _req, const std::string& _path, const HTTPRequestHandler& _func, NodeContext* pnode = nullptr) : req(std::move(_req)), path(_path), func(_func), pnode(pnode)\n     {\n     }\n     void operator()() override\n     {\n-        func(req.get(), path);\n+        func(req.get(), path, pnode);\n     }\n \n     std::unique_ptr<HTTPRequest> req;\n \n private:\n     std::string path;\n     HTTPRequestHandler func;\n+    NodeContext* pnode;\n };\n \n /** Simple work queue for distributing work over multiple threads.\n@@ -125,13 +127,13 @@ class WorkQueue\n \n struct HTTPPathHandler\n {\n-    HTTPPathHandler(std::string _prefix, bool _exactMatch, HTTPRequestHandler _handler):\n-        prefix(_prefix), exactMatch(_exactMatch), handler(_handler)\n+    HTTPPathHandler(std::string _prefix, bool _exactMatch, HTTPRequestHandler _handler, NodeContext* pnode = nullptr) : prefix(_prefix), exactMatch(_exactMatch), handler(_handler), pnode(pnode)\n     {\n     }\n     std::string prefix;\n     bool exactMatch;\n     HTTPRequestHandler handler;\n+    NodeContext* pnode;\n };\n \n /** HTTP module state */\n@@ -212,6 +214,8 @@ std::string RequestMethodString(HTTPRequest::RequestMethod m)\n /** HTTP request callback */\n static void http_request_cb(struct evhttp_request* req, void* arg)\n {\n+    CHECK_NONFATAL(arg);\n+    NodeContext* pnode = (NodeContext*)arg;\n     // Disable reading to work around a libevent bug, fixed in 2.2.0.\n     if (event_get_version_number() >= 0x02010600 && event_get_version_number() < 0x02020001) {\n         evhttp_connection* conn = evhttp_request_get_connection(req);\n@@ -262,7 +266,7 @@ static void http_request_cb(struct evhttp_request* req, void* arg)\n \n     // Dispatch to worker thread\n     if (i != iend) {\n-        std::unique_ptr<HTTPWorkItem> item(new HTTPWorkItem(std::move(hreq), path, i->handler));\n+        std::unique_ptr<HTTPWorkItem> item(new HTTPWorkItem(std::move(hreq), path, i->handler, pnode));\n         assert(workQueue);\n         if (workQueue->Enqueue(item.get()))\n             item.release(); /* if true, queue took ownership */\n@@ -355,7 +359,7 @@ static void libevent_log_cb(int severity, const char *msg)\n         LogPrint(BCLog::LIBEVENT, \"libevent: %s\\n\", msg);\n }\n \n-bool InitHTTPServer()\n+bool InitHTTPServer(NodeContext* pnode)\n {\n     if (!InitHTTPAllowList())\n         return false;\n@@ -388,7 +392,7 @@ bool InitHTTPServer()\n     evhttp_set_timeout(http, gArgs.GetArg(\"-rpcservertimeout\", DEFAULT_HTTP_SERVER_TIMEOUT));\n     evhttp_set_max_headers_size(http, MAX_HEADERS_SIZE);\n     evhttp_set_max_body_size(http, MAX_SIZE);\n-    evhttp_set_gencb(http, http_request_cb, nullptr);\n+    evhttp_set_gencb(http, http_request_cb, pnode);\n \n     if (!HTTPBindAddresses(http)) {\n         LogPrintf(\"Unable to bind any endpoint for RPC server\\n\");\n@@ -637,10 +641,10 @@ HTTPRequest::RequestMethod HTTPRequest::GetRequestMethod() const\n     }\n }\n \n-void RegisterHTTPHandler(const std::string &prefix, bool exactMatch, const HTTPRequestHandler &handler)\n+void RegisterHTTPHandler(const std::string& prefix, bool exactMatch, const HTTPRequestHandler& handler, NodeContext* pnode)\n {\n     LogPrint(BCLog::HTTP, \"Registering HTTP handler for %s (exactmatch %d)\\n\", prefix, exactMatch);\n-    pathHandlers.push_back(HTTPPathHandler(prefix, exactMatch, handler));\n+    pathHandlers.push_back(HTTPPathHandler(prefix, exactMatch, handler, pnode));\n }\n \n void UnregisterHTTPHandler(const std::string &prefix, bool exactMatch)"
      },
      {
        "sha": "929f8a1ad09afa740a32e39cbefa2fd9250c2ca1",
        "filename": "src/httpserver.h",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca4dba21337ff196fef2a47e29ae92f2c57ce1ad/src/httpserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca4dba21337ff196fef2a47e29ae92f2c57ce1ad/src/httpserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.h?ref=ca4dba21337ff196fef2a47e29ae92f2c57ce1ad",
        "patch": "@@ -5,6 +5,8 @@\n #ifndef BITCOIN_HTTPSERVER_H\n #define BITCOIN_HTTPSERVER_H\n \n+#include <node/context.h>\n+\n #include <string>\n #include <functional>\n \n@@ -20,7 +22,7 @@ class HTTPRequest;\n /** Initialize HTTP server.\n  * Call this before RegisterHTTPHandler or EventBase().\n  */\n-bool InitHTTPServer();\n+bool InitHTTPServer(NodeContext* pnode);\n /** Start HTTP server.\n  * This is separate from InitHTTPServer to give users race-condition-free time\n  * to register their handlers between InitHTTPServer and StartHTTPServer.\n@@ -36,12 +38,12 @@ void StopHTTPServer();\n bool UpdateHTTPServerLogging(bool enable);\n \n /** Handler for requests to a certain HTTP path */\n-typedef std::function<bool(HTTPRequest* req, const std::string &)> HTTPRequestHandler;\n+typedef std::function<bool(HTTPRequest* req, const std::string&, NodeContext* pnode)> HTTPRequestHandler;\n /** Register handler for prefix.\n  * If multiple handlers match a prefix, the first-registered one will\n  * be invoked.\n  */\n-void RegisterHTTPHandler(const std::string &prefix, bool exactMatch, const HTTPRequestHandler &handler);\n+void RegisterHTTPHandler(const std::string& prefix, bool exactMatch, const HTTPRequestHandler& handler, NodeContext* pnode);\n /** Unregister handler for prefix */\n void UnregisterHTTPHandler(const std::string &prefix, bool exactMatch);\n "
      },
      {
        "sha": "f19c8b71caa9165fa78a65fa1411819eeac07ad4",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca4dba21337ff196fef2a47e29ae92f2c57ce1ad/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca4dba21337ff196fef2a47e29ae92f2c57ce1ad/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=ca4dba21337ff196fef2a47e29ae92f2c57ce1ad",
        "patch": "@@ -771,16 +771,16 @@ static bool InitSanityCheck()\n     return true;\n }\n \n-static bool AppInitServers()\n+static bool AppInitServers(NodeContext* pnode)\n {\n     RPCServer::OnStarted(&OnRPCStarted);\n     RPCServer::OnStopped(&OnRPCStopped);\n-    if (!InitHTTPServer())\n+    if (!InitHTTPServer(pnode))\n         return false;\n     StartRPC();\n-    if (!StartHTTPRPC())\n+    if (!StartHTTPRPC(pnode))\n         return false;\n-    if (gArgs.GetBoolArg(\"-rest\", DEFAULT_REST_ENABLE)) StartREST();\n+    if (gArgs.GetBoolArg(\"-rest\", DEFAULT_REST_ENABLE)) StartREST(pnode);\n     StartHTTPServer();\n     return true;\n }\n@@ -1317,7 +1317,7 @@ bool AppInitMain(NodeContext& node)\n     for (const auto& client : node.chain_clients) {\n         client->registerRpcs();\n     }\n-    g_rpc_node = &node;\n+    tableRPC.addNodeContext(&node);\n #if ENABLE_ZMQ\n     RegisterZMQRPCCommands(tableRPC);\n #endif\n@@ -1330,7 +1330,7 @@ bool AppInitMain(NodeContext& node)\n     if (gArgs.GetBoolArg(\"-server\", false))\n     {\n         uiInterface.InitMessage_connect(SetRPCWarmupStatus);\n-        if (!AppInitServers())\n+        if (!AppInitServers(&node))\n             return InitError(_(\"Unable to start HTTP server. See debug log for details.\").translated);\n     }\n "
      },
      {
        "sha": "fadfbd117b24ca28dcb9ec0b7004709ca6040b21",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca4dba21337ff196fef2a47e29ae92f2c57ce1ad/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca4dba21337ff196fef2a47e29ae92f2c57ce1ad/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=ca4dba21337ff196fef2a47e29ae92f2c57ce1ad",
        "patch": "@@ -189,10 +189,10 @@ class RpcHandlerImpl : public Handler\n public:\n     explicit RpcHandlerImpl(const CRPCCommand& command) : m_command(command), m_wrapped_command(&command)\n     {\n-        m_command.actor = [this](const JSONRPCRequest& request, UniValue& result, bool last_handler) {\n+        m_command.actor = [this](const JSONRPCRequest& request, UniValue& result, bool last_handler, const NodeContext& node) {\n             if (!m_wrapped_command) return false;\n             try {\n-                return m_wrapped_command->actor(request, result, last_handler);\n+                return m_wrapped_command->actor(request, result, last_handler, node);\n             } catch (const UniValue& e) {\n                 // If this is not the last handler and a wallet not found\n                 // exception was thrown, return false so the next handler can"
      },
      {
        "sha": "0ddae466def7116e32b9d11cfe6a26d87de98b21",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca4dba21337ff196fef2a47e29ae92f2c57ce1ad/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca4dba21337ff196fef2a47e29ae92f2c57ce1ad/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=ca4dba21337ff196fef2a47e29ae92f2c57ce1ad",
        "patch": "@@ -508,7 +508,6 @@ class WalletClientImpl : public ChainClient\n     }\n     void registerRpcs() override\n     {\n-        g_rpc_chain = &m_chain;\n         return RegisterWalletRPCCommands(m_chain, m_rpc_handlers);\n     }\n     bool verify() override { return VerifyWallets(m_chain, m_wallet_filenames); }"
      },
      {
        "sha": "62476142d5cb25779b9dca2cc1dc423da6b8a4dc",
        "filename": "src/node/transaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca4dba21337ff196fef2a47e29ae92f2c57ce1ad/src/node/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca4dba21337ff196fef2a47e29ae92f2c57ce1ad/src/node/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/transaction.cpp?ref=ca4dba21337ff196fef2a47e29ae92f2c57ce1ad",
        "patch": "@@ -13,7 +13,7 @@\n \n #include <future>\n \n-TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef tx, std::string& err_string, const CAmount& max_tx_fee, bool relay, bool wait_callback)\n+TransactionError BroadcastTransaction(const NodeContext& node, const CTransactionRef tx, std::string& err_string, const CAmount& max_tx_fee, bool relay, bool wait_callback)\n {\n     // BroadcastTransaction can be called by either sendrawtransaction RPC or wallet RPCs.\n     // node.connman is assigned both before chain clients and before RPC server is accepting calls,"
      },
      {
        "sha": "27adc3f29f64b3cd235b4fcd3763f7500b7d2dfc",
        "filename": "src/node/transaction.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca4dba21337ff196fef2a47e29ae92f2c57ce1ad/src/node/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca4dba21337ff196fef2a47e29ae92f2c57ce1ad/src/node/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/transaction.h?ref=ca4dba21337ff196fef2a47e29ae92f2c57ce1ad",
        "patch": "@@ -28,6 +28,6 @@ struct NodeContext;\n  * @param[in]  wait_callback wait until callbacks have been processed to avoid stale result due to a sequentially RPC.\n  * return error\n  */\n-NODISCARD TransactionError BroadcastTransaction(NodeContext& node, CTransactionRef tx, std::string& err_string, const CAmount& max_tx_fee, bool relay, bool wait_callback);\n+NODISCARD TransactionError BroadcastTransaction(const NodeContext& node, CTransactionRef tx, std::string& err_string, const CAmount& max_tx_fee, bool relay, bool wait_callback);\n \n #endif // BITCOIN_NODE_TRANSACTION_H"
      },
      {
        "sha": "63ecdead0a110fb038c457d1a47efbace8cad237",
        "filename": "src/qt/test/rpcnestedtests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca4dba21337ff196fef2a47e29ae92f2c57ce1ad/src/qt/test/rpcnestedtests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca4dba21337ff196fef2a47e29ae92f2c57ce1ad/src/qt/test/rpcnestedtests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/rpcnestedtests.cpp?ref=ca4dba21337ff196fef2a47e29ae92f2c57ce1ad",
        "patch": "@@ -14,7 +14,7 @@\n #include <QDir>\n #include <QtGlobal>\n \n-static UniValue rpcNestedTest_rpc(const JSONRPCRequest& request)\n+static UniValue rpcNestedTest_rpc(const JSONRPCRequest& request, const NodeContext& node)\n {\n     if (request.fHelp) {\n         return \"help message\";"
      },
      {
        "sha": "8f75fb9dcab79112a653165d28b325158119ca23",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 20,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca4dba21337ff196fef2a47e29ae92f2c57ce1ad/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca4dba21337ff196fef2a47e29ae92f2c57ce1ad/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=ca4dba21337ff196fef2a47e29ae92f2c57ce1ad",
        "patch": "@@ -80,13 +80,13 @@ static bool RESTERR(HTTPRequest* req, enum HTTPStatusCode status, std::string me\n  * @param[in]  req the HTTP request\n  * return pointer to the mempool or nullptr if no mempool found\n  */\n-static CTxMemPool* GetMemPool(HTTPRequest* req)\n+static CTxMemPool* GetMemPool(HTTPRequest* req, const NodeContext& node)\n {\n-    if (!g_rpc_node || !g_rpc_node->mempool) {\n+    if (!node.mempool) {\n         RESTERR(req, HTTP_NOT_FOUND, \"Mempool disabled or instance not found\");\n         return nullptr;\n     }\n-    return g_rpc_node->mempool;\n+    return node.mempool;\n }\n \n static RetFormat ParseDataFormat(std::string& param, const std::string& strReq)\n@@ -135,7 +135,8 @@ static bool CheckWarmup(HTTPRequest* req)\n }\n \n static bool rest_headers(HTTPRequest* req,\n-                         const std::string& strURIPart)\n+    const std::string& strURIPart,\n+    NodeContext* pnode)\n {\n     if (!CheckWarmup(req))\n         return false;\n@@ -275,20 +276,20 @@ static bool rest_block(HTTPRequest* req,\n     }\n }\n \n-static bool rest_block_extended(HTTPRequest* req, const std::string& strURIPart)\n+static bool rest_block_extended(HTTPRequest* req, const std::string& strURIPart, NodeContext* pnode)\n {\n     return rest_block(req, strURIPart, true);\n }\n \n-static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPart)\n+static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPart, NodeContext* pnode)\n {\n     return rest_block(req, strURIPart, false);\n }\n \n // A bit of a hack - dependency on a function defined in rpc/blockchain.cpp\n-UniValue getblockchaininfo(const JSONRPCRequest& request);\n+UniValue getblockchaininfo(const JSONRPCRequest& request, const NodeContext& node);\n \n-static bool rest_chaininfo(HTTPRequest* req, const std::string& strURIPart)\n+static bool rest_chaininfo(HTTPRequest* req, const std::string& strURIPart, NodeContext* pnode)\n {\n     if (!CheckWarmup(req))\n         return false;\n@@ -299,7 +300,7 @@ static bool rest_chaininfo(HTTPRequest* req, const std::string& strURIPart)\n     case RetFormat::JSON: {\n         JSONRPCRequest jsonRequest;\n         jsonRequest.params = UniValue(UniValue::VARR);\n-        UniValue chainInfoObject = getblockchaininfo(jsonRequest);\n+        UniValue chainInfoObject = getblockchaininfo(jsonRequest, *pnode);\n         std::string strJSON = chainInfoObject.write() + \"\\n\";\n         req->WriteHeader(\"Content-Type\", \"application/json\");\n         req->WriteReply(HTTP_OK, strJSON);\n@@ -311,11 +312,11 @@ static bool rest_chaininfo(HTTPRequest* req, const std::string& strURIPart)\n     }\n }\n \n-static bool rest_mempool_info(HTTPRequest* req, const std::string& strURIPart)\n+static bool rest_mempool_info(HTTPRequest* req, const std::string& strURIPart, NodeContext* pnode)\n {\n     if (!CheckWarmup(req))\n         return false;\n-    const CTxMemPool* mempool = GetMemPool(req);\n+    const CTxMemPool* mempool = GetMemPool(req, *pnode);\n     if (!mempool) return false;\n     std::string param;\n     const RetFormat rf = ParseDataFormat(param, strURIPart);\n@@ -335,10 +336,10 @@ static bool rest_mempool_info(HTTPRequest* req, const std::string& strURIPart)\n     }\n }\n \n-static bool rest_mempool_contents(HTTPRequest* req, const std::string& strURIPart)\n+static bool rest_mempool_contents(HTTPRequest* req, const std::string& strURIPart, NodeContext* pnode)\n {\n     if (!CheckWarmup(req)) return false;\n-    const CTxMemPool* mempool = GetMemPool(req);\n+    const CTxMemPool* mempool = GetMemPool(req, *pnode);\n     if (!mempool) return false;\n     std::string param;\n     const RetFormat rf = ParseDataFormat(param, strURIPart);\n@@ -358,7 +359,7 @@ static bool rest_mempool_contents(HTTPRequest* req, const std::string& strURIPar\n     }\n }\n \n-static bool rest_tx(HTTPRequest* req, const std::string& strURIPart)\n+static bool rest_tx(HTTPRequest* req, const std::string& strURIPart, NodeContext* pnode)\n {\n     if (!CheckWarmup(req))\n         return false;\n@@ -414,7 +415,7 @@ static bool rest_tx(HTTPRequest* req, const std::string& strURIPart)\n     }\n }\n \n-static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n+static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart, NodeContext* pnode)\n {\n     if (!CheckWarmup(req))\n         return false;\n@@ -523,7 +524,7 @@ static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n         };\n \n         if (fCheckMemPool) {\n-            const CTxMemPool* mempool = GetMemPool(req);\n+            const CTxMemPool* mempool = GetMemPool(req, *pnode);\n             if (!mempool) return false;\n             // use db+mempool as cache backend in case user likes to query mempool\n             LOCK2(cs_main, mempool->cs);\n@@ -601,7 +602,8 @@ static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n }\n \n static bool rest_blockhash_by_height(HTTPRequest* req,\n-                       const std::string& str_uri_part)\n+    const std::string& str_uri_part,\n+    NodeContext* pnode)\n {\n     if (!CheckWarmup(req)) return false;\n     std::string height_str;\n@@ -648,7 +650,7 @@ static bool rest_blockhash_by_height(HTTPRequest* req,\n \n static const struct {\n     const char* prefix;\n-    bool (*handler)(HTTPRequest* req, const std::string& strReq);\n+    bool (*handler)(HTTPRequest* req, const std::string& strReq, NodeContext* pnode);\n } uri_prefixes[] = {\n       {\"/rest/tx/\", rest_tx},\n       {\"/rest/block/notxdetails/\", rest_block_notxdetails},\n@@ -661,10 +663,10 @@ static const struct {\n       {\"/rest/blockhashbyheight/\", rest_blockhash_by_height},\n };\n \n-void StartREST()\n+void StartREST(NodeContext* pnode)\n {\n     for (unsigned int i = 0; i < ARRAYLEN(uri_prefixes); i++)\n-        RegisterHTTPHandler(uri_prefixes[i].prefix, false, uri_prefixes[i].handler);\n+        RegisterHTTPHandler(uri_prefixes[i].prefix, false, uri_prefixes[i].handler, pnode);\n }\n \n void InterruptREST()"
      },
      {
        "sha": "1ff5fa538e007b04f5f698942027daca4016885e",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 43,
        "deletions": 46,
        "changes": 89,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca4dba21337ff196fef2a47e29ae92f2c57ce1ad/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca4dba21337ff196fef2a47e29ae92f2c57ce1ad/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=ca4dba21337ff196fef2a47e29ae92f2c57ce1ad",
        "patch": "@@ -53,13 +53,12 @@ static Mutex cs_blockchange;\n static std::condition_variable cond_blockchange;\n static CUpdatedBlock latestblock;\n \n-CTxMemPool& EnsureMemPool()\n+CTxMemPool& EnsureMemPool(const NodeContext& node)\n {\n-    CHECK_NONFATAL(g_rpc_node);\n-    if (!g_rpc_node->mempool) {\n+    if (!node.mempool) {\n         throw JSONRPCError(RPC_CLIENT_MEMPOOL_DISABLED, \"Mempool disabled or instance not found\");\n     }\n-    return *g_rpc_node->mempool;\n+    return *node.mempool;\n }\n \n /* Calculate the difficulty for a given block index.\n@@ -170,7 +169,7 @@ UniValue blockToJSON(const CBlock& block, const CBlockIndex* tip, const CBlockIn\n     return result;\n }\n \n-static UniValue getblockcount(const JSONRPCRequest& request)\n+static UniValue getblockcount(const JSONRPCRequest& request, const NodeContext& node)\n {\n             RPCHelpMan{\"getblockcount\",\n                 \"\\nReturns the height of the most-work fully-validated chain.\\n\"\n@@ -188,7 +187,7 @@ static UniValue getblockcount(const JSONRPCRequest& request)\n     return ::ChainActive().Height();\n }\n \n-static UniValue getbestblockhash(const JSONRPCRequest& request)\n+static UniValue getbestblockhash(const JSONRPCRequest& request, const NodeContext& node)\n {\n             RPCHelpMan{\"getbestblockhash\",\n                 \"\\nReturns the hash of the best (tip) block in the most-work fully-validated chain.\\n\",\n@@ -215,7 +214,7 @@ void RPCNotifyBlockChange(bool ibd, const CBlockIndex * pindex)\n     cond_blockchange.notify_all();\n }\n \n-static UniValue waitfornewblock(const JSONRPCRequest& request)\n+static UniValue waitfornewblock(const JSONRPCRequest& request, const NodeContext& node)\n {\n             RPCHelpMan{\"waitfornewblock\",\n                 \"\\nWaits for a specific new block and returns useful info about it.\\n\"\n@@ -254,7 +253,7 @@ static UniValue waitfornewblock(const JSONRPCRequest& request)\n     return ret;\n }\n \n-static UniValue waitforblock(const JSONRPCRequest& request)\n+static UniValue waitforblock(const JSONRPCRequest& request, const NodeContext& node)\n {\n             RPCHelpMan{\"waitforblock\",\n                 \"\\nWaits for a specific new block and returns useful info about it.\\n\"\n@@ -297,7 +296,7 @@ static UniValue waitforblock(const JSONRPCRequest& request)\n     return ret;\n }\n \n-static UniValue waitforblockheight(const JSONRPCRequest& request)\n+static UniValue waitforblockheight(const JSONRPCRequest& request, const NodeContext& node)\n {\n             RPCHelpMan{\"waitforblockheight\",\n                 \"\\nWaits for (at least) block height and returns the height and hash\\n\"\n@@ -340,7 +339,7 @@ static UniValue waitforblockheight(const JSONRPCRequest& request)\n     return ret;\n }\n \n-static UniValue syncwithvalidationinterfacequeue(const JSONRPCRequest& request)\n+static UniValue syncwithvalidationinterfacequeue(const JSONRPCRequest& request, const NodeContext& node)\n {\n             RPCHelpMan{\"syncwithvalidationinterfacequeue\",\n                 \"\\nWaits for the validation interface queue to catch up on everything that was there when we entered this function.\\n\",\n@@ -356,7 +355,7 @@ static UniValue syncwithvalidationinterfacequeue(const JSONRPCRequest& request)\n     return NullUniValue;\n }\n \n-static UniValue getdifficulty(const JSONRPCRequest& request)\n+static UniValue getdifficulty(const JSONRPCRequest& request, const NodeContext& node)\n {\n             RPCHelpMan{\"getdifficulty\",\n                 \"\\nReturns the proof-of-work difficulty as a multiple of the minimum difficulty.\\n\",\n@@ -489,7 +488,7 @@ UniValue MempoolToJSON(const CTxMemPool& pool, bool verbose)\n     }\n }\n \n-static UniValue getrawmempool(const JSONRPCRequest& request)\n+static UniValue getrawmempool(const JSONRPCRequest& request, const NodeContext& node)\n {\n             RPCHelpMan{\"getrawmempool\",\n                 \"\\nReturns all transaction ids in memory pool as a json array of string transaction ids.\\n\"\n@@ -519,10 +518,10 @@ static UniValue getrawmempool(const JSONRPCRequest& request)\n     if (!request.params[0].isNull())\n         fVerbose = request.params[0].get_bool();\n \n-    return MempoolToJSON(EnsureMemPool(), fVerbose);\n+    return MempoolToJSON(EnsureMemPool(node), fVerbose);\n }\n \n-static UniValue getmempoolancestors(const JSONRPCRequest& request)\n+static UniValue getmempoolancestors(const JSONRPCRequest& request, const NodeContext& node)\n {\n             RPCHelpMan{\"getmempoolancestors\",\n                 \"\\nIf txid is in the mempool, returns all in-mempool ancestors.\\n\",\n@@ -549,7 +548,7 @@ static UniValue getmempoolancestors(const JSONRPCRequest& request)\n \n     uint256 hash = ParseHashV(request.params[0], \"parameter 1\");\n \n-    const CTxMemPool& mempool = EnsureMemPool();\n+    CTxMemPool& mempool = EnsureMemPool(node);\n     LOCK(mempool.cs);\n \n     CTxMemPool::txiter it = mempool.mapTx.find(hash);\n@@ -582,7 +581,7 @@ static UniValue getmempoolancestors(const JSONRPCRequest& request)\n     }\n }\n \n-static UniValue getmempooldescendants(const JSONRPCRequest& request)\n+static UniValue getmempooldescendants(const JSONRPCRequest& request, const NodeContext& node)\n {\n             RPCHelpMan{\"getmempooldescendants\",\n                 \"\\nIf txid is in the mempool, returns all in-mempool descendants.\\n\",\n@@ -612,7 +611,7 @@ static UniValue getmempooldescendants(const JSONRPCRequest& request)\n \n     uint256 hash = ParseHashV(request.params[0], \"parameter 1\");\n \n-    const CTxMemPool& mempool = EnsureMemPool();\n+    CTxMemPool& mempool = EnsureMemPool(node);\n     LOCK(mempool.cs);\n \n     CTxMemPool::txiter it = mempool.mapTx.find(hash);\n@@ -645,7 +644,7 @@ static UniValue getmempooldescendants(const JSONRPCRequest& request)\n     }\n }\n \n-static UniValue getmempoolentry(const JSONRPCRequest& request)\n+static UniValue getmempoolentry(const JSONRPCRequest& request, const NodeContext& node)\n {\n             RPCHelpMan{\"getmempoolentry\",\n                 \"\\nReturns mempool data for given transaction\\n\",\n@@ -662,7 +661,7 @@ static UniValue getmempoolentry(const JSONRPCRequest& request)\n \n     uint256 hash = ParseHashV(request.params[0], \"parameter 1\");\n \n-    const CTxMemPool& mempool = EnsureMemPool();\n+    CTxMemPool& mempool = EnsureMemPool(node);\n     LOCK(mempool.cs);\n \n     CTxMemPool::txiter it = mempool.mapTx.find(hash);\n@@ -676,7 +675,7 @@ static UniValue getmempoolentry(const JSONRPCRequest& request)\n     return info;\n }\n \n-static UniValue getblockhash(const JSONRPCRequest& request)\n+static UniValue getblockhash(const JSONRPCRequest& request, const NodeContext& node)\n {\n             RPCHelpMan{\"getblockhash\",\n                 \"\\nReturns hash of block in best-block-chain at height provided.\\n\",\n@@ -701,7 +700,7 @@ static UniValue getblockhash(const JSONRPCRequest& request)\n     return pblockindex->GetBlockHash().GetHex();\n }\n \n-static UniValue getblockheader(const JSONRPCRequest& request)\n+static UniValue getblockheader(const JSONRPCRequest& request, const NodeContext& node)\n {\n             RPCHelpMan{\"getblockheader\",\n                 \"\\nIf verbose is false, returns a string that is serialized, hex-encoded data for blockheader 'hash'.\\n\"\n@@ -801,7 +800,7 @@ static CBlockUndo GetUndoChecked(const CBlockIndex* pblockindex)\n     return blockUndo;\n }\n \n-static UniValue getblock(const JSONRPCRequest& request)\n+static UniValue getblock(const JSONRPCRequest& request, const NodeContext& node)\n {\n     RPCHelpMan{\"getblock\",\n                 \"\\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'hash'.\\n\"\n@@ -894,7 +893,7 @@ static UniValue getblock(const JSONRPCRequest& request)\n     return blockToJSON(block, tip, pblockindex, verbosity >= 2);\n }\n \n-static UniValue pruneblockchain(const JSONRPCRequest& request)\n+static UniValue pruneblockchain(const JSONRPCRequest& request, const NodeContext& node)\n {\n             RPCHelpMan{\"pruneblockchain\", \"\",\n                 {\n@@ -949,7 +948,7 @@ static UniValue pruneblockchain(const JSONRPCRequest& request)\n     return uint64_t(block->nHeight);\n }\n \n-static UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n+static UniValue gettxoutsetinfo(const JSONRPCRequest& request, const NodeContext& node)\n {\n             RPCHelpMan{\"gettxoutsetinfo\",\n                 \"\\nReturns statistics about the unspent transaction output set.\\n\"\n@@ -994,7 +993,7 @@ static UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n     return ret;\n }\n \n-UniValue gettxout(const JSONRPCRequest& request)\n+UniValue gettxout(const JSONRPCRequest& request, const NodeContext& node)\n {\n             RPCHelpMan{\"gettxout\",\n                 \"\\nReturns details about an unspent transaction output.\\n\",\n@@ -1045,7 +1044,7 @@ UniValue gettxout(const JSONRPCRequest& request)\n     CCoinsViewCache* coins_view = &::ChainstateActive().CoinsTip();\n \n     if (fMempool) {\n-        const CTxMemPool& mempool = EnsureMemPool();\n+        CTxMemPool& mempool = EnsureMemPool(node);\n         LOCK(mempool.cs);\n         CCoinsViewMemPool view(coins_view, mempool);\n         if (!view.GetCoin(out, coin) || mempool.isSpent(out)) {\n@@ -1073,7 +1072,7 @@ UniValue gettxout(const JSONRPCRequest& request)\n     return ret;\n }\n \n-static UniValue verifychain(const JSONRPCRequest& request)\n+static UniValue verifychain(const JSONRPCRequest& request, const NodeContext& node)\n {\n             RPCHelpMan{\"verifychain\",\n                 \"\\nVerifies blockchain database.\\n\",\n@@ -1163,7 +1162,7 @@ static void BIP9SoftForkDescPushBack(UniValue& softforks, const std::string &nam\n     softforks.pushKV(name, rv);\n }\n \n-UniValue getblockchaininfo(const JSONRPCRequest& request)\n+UniValue getblockchaininfo(const JSONRPCRequest& request, const NodeContext& node)\n {\n             RPCHelpMan{\"getblockchaininfo\",\n                 \"Returns an object containing various state info regarding blockchain processing.\\n\",\n@@ -1279,7 +1278,7 @@ struct CompareBlocksByHeight\n     }\n };\n \n-static UniValue getchaintips(const JSONRPCRequest& request)\n+static UniValue getchaintips(const JSONRPCRequest& request, const NodeContext& node)\n {\n             RPCHelpMan{\"getchaintips\",\n                 \"Return information about all known tips in the block tree,\"\n@@ -1393,7 +1392,7 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     return ret;\n }\n \n-static UniValue getmempoolinfo(const JSONRPCRequest& request)\n+static UniValue getmempoolinfo(const JSONRPCRequest& request, const NodeContext& node)\n {\n             RPCHelpMan{\"getmempoolinfo\",\n                 \"\\nReturns details on the active state of the TX memory pool.\\n\",\n@@ -1415,10 +1414,10 @@ static UniValue getmempoolinfo(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n-    return MempoolInfoToJSON(EnsureMemPool());\n+            return MempoolInfoToJSON(EnsureMemPool(node));\n }\n \n-static UniValue preciousblock(const JSONRPCRequest& request)\n+static UniValue preciousblock(const JSONRPCRequest& request, const NodeContext& node)\n {\n             RPCHelpMan{\"preciousblock\",\n                 \"\\nTreats a block as if it were received before others with the same work.\\n\"\n@@ -1455,7 +1454,7 @@ static UniValue preciousblock(const JSONRPCRequest& request)\n     return NullUniValue;\n }\n \n-static UniValue invalidateblock(const JSONRPCRequest& request)\n+static UniValue invalidateblock(const JSONRPCRequest& request, const NodeContext& node)\n {\n             RPCHelpMan{\"invalidateblock\",\n                 \"\\nPermanently marks a block as invalid, as if it violated a consensus rule.\\n\",\n@@ -1493,7 +1492,7 @@ static UniValue invalidateblock(const JSONRPCRequest& request)\n     return NullUniValue;\n }\n \n-static UniValue reconsiderblock(const JSONRPCRequest& request)\n+static UniValue reconsiderblock(const JSONRPCRequest& request, const NodeContext& node)\n {\n             RPCHelpMan{\"reconsiderblock\",\n                 \"\\nRemoves invalidity status of a block, its ancestors and its descendants, reconsider them for activation.\\n\"\n@@ -1530,7 +1529,7 @@ static UniValue reconsiderblock(const JSONRPCRequest& request)\n     return NullUniValue;\n }\n \n-static UniValue getchaintxstats(const JSONRPCRequest& request)\n+static UniValue getchaintxstats(const JSONRPCRequest& request, const NodeContext& node)\n {\n             RPCHelpMan{\"getchaintxstats\",\n                 \"\\nCompute statistics about the total number and rate of transactions in the chain.\\n\",\n@@ -1663,7 +1662,7 @@ static inline bool SetHasKeys(const std::set<T>& set, const Tk& key, const Args&\n // outpoint (needed for the utxo index) + nHeight + fCoinBase\n static constexpr size_t PER_UTXO_OVERHEAD = sizeof(COutPoint) + sizeof(uint32_t) + sizeof(bool);\n \n-static UniValue getblockstats(const JSONRPCRequest& request)\n+static UniValue getblockstats(const JSONRPCRequest& request, const NodeContext& node)\n {\n     RPCHelpMan{\"getblockstats\",\n                 \"\\nCompute per block statistics for a given window. All amounts are in satoshis.\\n\"\n@@ -1922,7 +1921,7 @@ static UniValue getblockstats(const JSONRPCRequest& request)\n     return ret;\n }\n \n-static UniValue savemempool(const JSONRPCRequest& request)\n+static UniValue savemempool(const JSONRPCRequest& request, const NodeContext& node)\n {\n             RPCHelpMan{\"savemempool\",\n                 \"\\nDumps the mempool to disk. It will fail until the previous dump is fully loaded.\\n\",\n@@ -1934,11 +1933,11 @@ static UniValue savemempool(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n-    const CTxMemPool& mempool = EnsureMemPool();\n+            CTxMemPool& mempool = EnsureMemPool(node);\n \n-    if (!mempool.IsLoaded()) {\n-        throw JSONRPCError(RPC_MISC_ERROR, \"The mempool was not loaded yet\");\n-    }\n+            if (!mempool.IsLoaded()) {\n+                throw JSONRPCError(RPC_MISC_ERROR, \"The mempool was not loaded yet\");\n+            }\n \n     if (!DumpMempool(mempool)) {\n         throw JSONRPCError(RPC_MISC_ERROR, \"Unable to dump mempool to disk\");\n@@ -2006,7 +2005,7 @@ class CoinsViewScanReserver\n     }\n };\n \n-UniValue scantxoutset(const JSONRPCRequest& request)\n+UniValue scantxoutset(const JSONRPCRequest& request, const NodeContext& node)\n {\n             RPCHelpMan{\"scantxoutset\",\n                 \"\\nEXPERIMENTAL warning: this call may be removed or changed in future releases.\\n\"\n@@ -2157,7 +2156,7 @@ UniValue scantxoutset(const JSONRPCRequest& request)\n     return result;\n }\n \n-static UniValue getblockfilter(const JSONRPCRequest& request)\n+static UniValue getblockfilter(const JSONRPCRequest& request, const NodeContext& node)\n {\n             RPCHelpMan{\"getblockfilter\",\n                 \"\\nRetrieve a BIP 157 content filter for a particular block.\\n\",\n@@ -2238,7 +2237,7 @@ static UniValue getblockfilter(const JSONRPCRequest& request)\n  *\n  * @see SnapshotMetadata\n  */\n-UniValue dumptxoutset(const JSONRPCRequest& request)\n+UniValue dumptxoutset(const JSONRPCRequest& request, const NodeContext& node)\n {\n     RPCHelpMan{\n         \"dumptxoutset\",\n@@ -2386,5 +2385,3 @@ static const CRPCCommand commands[] =\n     for (unsigned int vcidx = 0; vcidx < ARRAYLEN(commands); vcidx++)\n         t.appendCommand(commands[vcidx].name, &commands[vcidx]);\n }\n-\n-NodeContext* g_rpc_node = nullptr;"
      },
      {
        "sha": "109eadb12e4374c5f29724ef133aca4eec436210",
        "filename": "src/rpc/blockchain.h",
        "status": "modified",
        "additions": 1,
        "deletions": 6,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca4dba21337ff196fef2a47e29ae92f2c57ce1ad/src/rpc/blockchain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca4dba21337ff196fef2a47e29ae92f2c57ce1ad/src/rpc/blockchain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.h?ref=ca4dba21337ff196fef2a47e29ae92f2c57ce1ad",
        "patch": "@@ -47,11 +47,6 @@ UniValue blockheaderToJSON(const CBlockIndex* tip, const CBlockIndex* blockindex\n /** Used by getblockstats to get feerates at different percentiles by weight  */\n void CalculatePercentilesByWeight(CAmount result[NUM_GETBLOCKSTATS_PERCENTILES], std::vector<std::pair<CAmount, int64_t>>& scores, int64_t total_weight);\n \n-//! Pointer to node state that needs to be declared as a global to be accessible\n-//! RPC methods. Due to limitations of the RPC framework, there's currently no\n-//! direct way to pass in state to RPC methods without globals.\n-extern NodeContext* g_rpc_node;\n-\n-CTxMemPool& EnsureMemPool();\n+CTxMemPool& EnsureMemPool(const NodeContext&);\n \n #endif"
      },
      {
        "sha": "5c3136138b0b42aaf5170ad74642b4615f6e5a20",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 20,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca4dba21337ff196fef2a47e29ae92f2c57ce1ad/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca4dba21337ff196fef2a47e29ae92f2c57ce1ad/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=ca4dba21337ff196fef2a47e29ae92f2c57ce1ad",
        "patch": "@@ -79,7 +79,7 @@ static UniValue GetNetworkHashPS(int lookup, int height) {\n     return workDiff.getdouble() / timeDiff;\n }\n \n-static UniValue getnetworkhashps(const JSONRPCRequest& request)\n+static UniValue getnetworkhashps(const JSONRPCRequest& request, const NodeContext& node)\n {\n             RPCHelpMan{\"getnetworkhashps\",\n                 \"\\nReturns the estimated network hashes per second based on the last n blocks.\\n\"\n@@ -197,7 +197,7 @@ static bool getScriptFromDescriptor(const std::string& descriptor, CScript& scri\n     }\n }\n \n-static UniValue generatetodescriptor(const JSONRPCRequest& request)\n+static UniValue generatetodescriptor(const JSONRPCRequest& request, const NodeContext& node)\n {\n     RPCHelpMan{\n         \"generatetodescriptor\",\n@@ -227,12 +227,12 @@ static UniValue generatetodescriptor(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, error);\n     }\n \n-    const CTxMemPool& mempool = EnsureMemPool();\n+    CTxMemPool& mempool = EnsureMemPool(node);\n \n     return generateBlocks(mempool, coinbase_script, num_blocks, max_tries);\n }\n \n-static UniValue generatetoaddress(const JSONRPCRequest& request)\n+static UniValue generatetoaddress(const JSONRPCRequest& request, const NodeContext& node)\n {\n             RPCHelpMan{\"generatetoaddress\",\n                 \"\\nMine blocks immediately to a specified address (before the RPC call returns)\\n\",\n@@ -265,14 +265,14 @@ static UniValue generatetoaddress(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Error: Invalid address\");\n     }\n \n-    const CTxMemPool& mempool = EnsureMemPool();\n+    CTxMemPool& mempool = EnsureMemPool(node);\n \n     CScript coinbase_script = GetScriptForDestination(destination);\n \n     return generateBlocks(mempool, coinbase_script, nGenerate, nMaxTries);\n }\n \n-static UniValue generateblock(const JSONRPCRequest& request)\n+static UniValue generateblock(const JSONRPCRequest& request, const NodeContext& node)\n {\n     RPCHelpMan{\"generateblock\",\n         \"\\nMine a block with a set of ordered transactions immediately to a specified address or descriptor (before the RPC call returns)\\n\",\n@@ -311,7 +311,7 @@ static UniValue generateblock(const JSONRPCRequest& request)\n         coinbase_script = GetScriptForDestination(destination);\n     }\n \n-    const CTxMemPool& mempool = EnsureMemPool();\n+    CTxMemPool& mempool = EnsureMemPool(node);\n \n     std::vector<CTransactionRef> txs;\n     const auto raw_txs_or_txids = request.params[1].get_array();\n@@ -379,7 +379,7 @@ static UniValue generateblock(const JSONRPCRequest& request)\n     return obj;\n }\n \n-static UniValue getmininginfo(const JSONRPCRequest& request)\n+static UniValue getmininginfo(const JSONRPCRequest& request, const NodeContext& node)\n {\n             RPCHelpMan{\"getmininginfo\",\n                 \"\\nReturns a json object containing mining-related information.\",\n@@ -403,14 +403,14 @@ static UniValue getmininginfo(const JSONRPCRequest& request)\n             }.Check(request);\n \n     LOCK(cs_main);\n-    const CTxMemPool& mempool = EnsureMemPool();\n+    CTxMemPool& mempool = EnsureMemPool(node);\n \n     UniValue obj(UniValue::VOBJ);\n     obj.pushKV(\"blocks\",           (int)::ChainActive().Height());\n     if (BlockAssembler::m_last_block_weight) obj.pushKV(\"currentblockweight\", *BlockAssembler::m_last_block_weight);\n     if (BlockAssembler::m_last_block_num_txs) obj.pushKV(\"currentblocktx\", *BlockAssembler::m_last_block_num_txs);\n     obj.pushKV(\"difficulty\",       (double)GetDifficulty(::ChainActive().Tip()));\n-    obj.pushKV(\"networkhashps\",    getnetworkhashps(request));\n+    obj.pushKV(\"networkhashps\", getnetworkhashps(request, node));\n     obj.pushKV(\"pooledtx\",         (uint64_t)mempool.size());\n     obj.pushKV(\"chain\",            Params().NetworkIDString());\n     obj.pushKV(\"warnings\",         GetWarnings(false));\n@@ -419,7 +419,7 @@ static UniValue getmininginfo(const JSONRPCRequest& request)\n \n \n // NOTE: Unlike wallet RPC (which use BTC values), mining RPCs follow GBT (BIP 22) in using satoshi amounts\n-static UniValue prioritisetransaction(const JSONRPCRequest& request)\n+static UniValue prioritisetransaction(const JSONRPCRequest& request, const NodeContext& node)\n {\n             RPCHelpMan{\"prioritisetransaction\",\n                 \"Accepts the transaction into mined blocks at a higher (or lower) priority\\n\",\n@@ -449,7 +449,7 @@ static UniValue prioritisetransaction(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Priority is no longer supported, dummy argument to prioritisetransaction must be 0.\");\n     }\n \n-    EnsureMemPool().PrioritiseTransaction(hash, nAmount);\n+    EnsureMemPool(node).PrioritiseTransaction(hash, nAmount);\n     return true;\n }\n \n@@ -482,7 +482,7 @@ static std::string gbt_vb_name(const Consensus::DeploymentPos pos) {\n     return s;\n }\n \n-static UniValue getblocktemplate(const JSONRPCRequest& request)\n+static UniValue getblocktemplate(const JSONRPCRequest& request, const NodeContext& node)\n {\n             RPCHelpMan{\"getblocktemplate\",\n                 \"\\nIf the request parameters include a 'mode' key, that is used to explicitly select between the default 'template' request or a 'proposal'.\\n\"\n@@ -635,17 +635,17 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n     if (strMode != \"template\")\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid mode\");\n \n-    if(!g_rpc_node->connman)\n+    if (!node.connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n-    if (g_rpc_node->connman->GetNodeCount(CConnman::CONNECTIONS_ALL) == 0)\n+    if (node.connman->GetNodeCount(CConnman::CONNECTIONS_ALL) == 0)\n         throw JSONRPCError(RPC_CLIENT_NOT_CONNECTED, PACKAGE_NAME \" is not connected!\");\n \n     if (::ChainstateActive().IsInitialBlockDownload())\n         throw JSONRPCError(RPC_CLIENT_IN_INITIAL_DOWNLOAD, PACKAGE_NAME \" is in initial sync and waiting for blocks...\");\n \n     static unsigned int nTransactionsUpdatedLast;\n-    const CTxMemPool& mempool = EnsureMemPool();\n+    CTxMemPool& mempool = EnsureMemPool(node);\n \n     if (!lpval.isNull())\n     {\n@@ -892,7 +892,7 @@ class submitblock_StateCatcher : public CValidationInterface\n     }\n };\n \n-static UniValue submitblock(const JSONRPCRequest& request)\n+static UniValue submitblock(const JSONRPCRequest& request, const NodeContext& node)\n {\n     // We allow 2 arguments for compliance with BIP22. Argument 2 is ignored.\n             RPCHelpMan{\"submitblock\",\n@@ -955,7 +955,7 @@ static UniValue submitblock(const JSONRPCRequest& request)\n     return BIP22ValidationResult(sc.state);\n }\n \n-static UniValue submitheader(const JSONRPCRequest& request)\n+static UniValue submitheader(const JSONRPCRequest& request, const NodeContext& node)\n {\n             RPCHelpMan{\"submitheader\",\n                 \"\\nDecode the given hexdata as a header and submit it as a candidate chain tip if valid.\"\n@@ -991,7 +991,7 @@ static UniValue submitheader(const JSONRPCRequest& request)\n     throw JSONRPCError(RPC_VERIFY_ERROR, state.GetRejectReason());\n }\n \n-static UniValue estimatesmartfee(const JSONRPCRequest& request)\n+static UniValue estimatesmartfee(const JSONRPCRequest& request, const NodeContext& node)\n {\n             RPCHelpMan{\"estimatesmartfee\",\n                 \"\\nEstimates the approximate fee per kilobyte needed for a transaction to begin\\n\"\n@@ -1056,7 +1056,7 @@ static UniValue estimatesmartfee(const JSONRPCRequest& request)\n     return result;\n }\n \n-static UniValue estimaterawfee(const JSONRPCRequest& request)\n+static UniValue estimaterawfee(const JSONRPCRequest& request, const NodeContext& node)\n {\n             RPCHelpMan{\"estimaterawfee\",\n                 \"\\nWARNING: This interface is unstable and may disappear or change!\\n\""
      },
      {
        "sha": "a723fab8dee9a08533369355cbe6ac7fc0ac8b7a",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 18,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca4dba21337ff196fef2a47e29ae92f2c57ce1ad/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca4dba21337ff196fef2a47e29ae92f2c57ce1ad/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=ca4dba21337ff196fef2a47e29ae92f2c57ce1ad",
        "patch": "@@ -26,7 +26,7 @@\n \n #include <univalue.h>\n \n-static UniValue validateaddress(const JSONRPCRequest& request)\n+static UniValue validateaddress(const JSONRPCRequest& request, const NodeContext& node)\n {\n             RPCHelpMan{\"validateaddress\",\n                 \"\\nReturn information about the given bitcoin address.\\n\",\n@@ -70,7 +70,7 @@ static UniValue validateaddress(const JSONRPCRequest& request)\n     return ret;\n }\n \n-static UniValue createmultisig(const JSONRPCRequest& request)\n+static UniValue createmultisig(const JSONRPCRequest& request, const NodeContext& node)\n {\n             RPCHelpMan{\"createmultisig\",\n                 \"\\nCreates a multi-signature address with n signature of m keys required.\\n\"\n@@ -136,7 +136,7 @@ static UniValue createmultisig(const JSONRPCRequest& request)\n     return result;\n }\n \n-UniValue getdescriptorinfo(const JSONRPCRequest& request)\n+UniValue getdescriptorinfo(const JSONRPCRequest& request, const NodeContext& node)\n {\n             RPCHelpMan{\"getdescriptorinfo\",\n             {\"\\nAnalyses a descriptor.\\n\"},\n@@ -176,7 +176,7 @@ UniValue getdescriptorinfo(const JSONRPCRequest& request)\n     return result;\n }\n \n-UniValue deriveaddresses(const JSONRPCRequest& request)\n+UniValue deriveaddresses(const JSONRPCRequest& request, const NodeContext& node)\n {\n             RPCHelpMan{\"deriveaddresses\",\n             {\"\\nDerives one or more addresses corresponding to an output descriptor.\\n\"\n@@ -255,7 +255,7 @@ UniValue deriveaddresses(const JSONRPCRequest& request)\n     return addresses;\n }\n \n-static UniValue verifymessage(const JSONRPCRequest& request)\n+static UniValue verifymessage(const JSONRPCRequest& request, const NodeContext& node)\n {\n             RPCHelpMan{\"verifymessage\",\n                 \"\\nVerify a signed message\\n\",\n@@ -302,7 +302,7 @@ static UniValue verifymessage(const JSONRPCRequest& request)\n     return false;\n }\n \n-static UniValue signmessagewithprivkey(const JSONRPCRequest& request)\n+static UniValue signmessagewithprivkey(const JSONRPCRequest& request, const NodeContext& node)\n {\n             RPCHelpMan{\"signmessagewithprivkey\",\n                 \"\\nSign a message with the private key of an address\\n\",\n@@ -340,7 +340,7 @@ static UniValue signmessagewithprivkey(const JSONRPCRequest& request)\n     return signature;\n }\n \n-static UniValue setmocktime(const JSONRPCRequest& request)\n+static UniValue setmocktime(const JSONRPCRequest& request, const NodeContext& node)\n {\n             RPCHelpMan{\"setmocktime\",\n                 \"\\nSet the local time to given timestamp (-regtest only)\\n\",\n@@ -366,16 +366,14 @@ static UniValue setmocktime(const JSONRPCRequest& request)\n     RPCTypeCheck(request.params, {UniValue::VNUM});\n     int64_t time = request.params[0].get_int64();\n     SetMockTime(time);\n-    if (g_rpc_node) {\n-        for (const auto& chain_client : g_rpc_node->chain_clients) {\n-            chain_client->setMockTime(time);\n-        }\n+    for (const auto& chain_client : node.chain_clients) {\n+        chain_client->setMockTime(time);\n     }\n \n     return NullUniValue;\n }\n \n-static UniValue mockscheduler(const JSONRPCRequest& request)\n+static UniValue mockscheduler(const JSONRPCRequest& request, const NodeContext& node)\n {\n     RPCHelpMan{\"mockscheduler\",\n         \"\\nBump the scheduler into the future (-regtest only)\\n\",\n@@ -398,9 +396,8 @@ static UniValue mockscheduler(const JSONRPCRequest& request)\n     }\n \n     // protect against null pointer dereference\n-    CHECK_NONFATAL(g_rpc_node);\n-    CHECK_NONFATAL(g_rpc_node->scheduler);\n-    g_rpc_node->scheduler->MockForward(std::chrono::seconds(delta_seconds));\n+    CHECK_NONFATAL(node.scheduler);\n+    node.scheduler->MockForward(std::chrono::seconds(delta_seconds));\n \n     return NullUniValue;\n }\n@@ -437,7 +434,7 @@ static std::string RPCMallocInfo()\n }\n #endif\n \n-static UniValue getmemoryinfo(const JSONRPCRequest& request)\n+static UniValue getmemoryinfo(const JSONRPCRequest& request, const NodeContext& node)\n {\n     /* Please, avoid using the word \"pool\" here in the RPC interface or help,\n      * as users will undoubtedly confuse it with the other \"memory pool\"\n@@ -508,7 +505,7 @@ static void EnableOrDisableLogCategories(UniValue cats, bool enable) {\n     }\n }\n \n-UniValue logging(const JSONRPCRequest& request)\n+UniValue logging(const JSONRPCRequest& request, const NodeContext& node)\n {\n             RPCHelpMan{\"logging\",\n             \"Gets and sets the logging configuration.\\n\"\n@@ -576,7 +573,7 @@ UniValue logging(const JSONRPCRequest& request)\n     return result;\n }\n \n-static UniValue echo(const JSONRPCRequest& request)\n+static UniValue echo(const JSONRPCRequest& request, const NodeContext& node)\n {\n     if (request.fHelp)\n         throw std::runtime_error("
      },
      {
        "sha": "13e27815b1c3e3be7d35c3c76d87bacc27c7126d",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 188,
        "deletions": 188,
        "changes": 376,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca4dba21337ff196fef2a47e29ae92f2c57ce1ad/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca4dba21337ff196fef2a47e29ae92f2c57ce1ad/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=ca4dba21337ff196fef2a47e29ae92f2c57ce1ad",
        "patch": "@@ -28,7 +28,7 @@\n \n #include <univalue.h>\n \n-static UniValue getconnectioncount(const JSONRPCRequest& request)\n+static UniValue getconnectioncount(const JSONRPCRequest& request, const NodeContext& node)\n {\n             RPCHelpMan{\"getconnectioncount\",\n                 \"\\nReturns the number of connections to other nodes.\\n\",\n@@ -42,13 +42,13 @@ static UniValue getconnectioncount(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n-    if(!g_rpc_node->connman)\n-        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n+            if (!node.connman)\n+                throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n-    return (int)g_rpc_node->connman->GetNodeCount(CConnman::CONNECTIONS_ALL);\n+            return (int)node.connman->GetNodeCount(CConnman::CONNECTIONS_ALL);\n }\n \n-static UniValue ping(const JSONRPCRequest& request)\n+static UniValue ping(const JSONRPCRequest& request, const NodeContext& node)\n {\n             RPCHelpMan{\"ping\",\n                 \"\\nRequests that a ping be sent to all other nodes, to measure ping time.\\n\"\n@@ -62,17 +62,17 @@ static UniValue ping(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n-    if(!g_rpc_node->connman)\n-        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n+            if (!node.connman)\n+                throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n-    // Request that each node send a ping during next message processing pass\n-    g_rpc_node->connman->ForEachNode([](CNode* pnode) {\n-        pnode->fPingQueued = true;\n-    });\n-    return NullUniValue;\n+            // Request that each node send a ping during next message processing pass\n+            node.connman->ForEachNode([](CNode* pnode) {\n+                pnode->fPingQueued = true;\n+            });\n+            return NullUniValue;\n }\n \n-static UniValue getpeerinfo(const JSONRPCRequest& request)\n+static UniValue getpeerinfo(const JSONRPCRequest& request, const NodeContext& node)\n {\n             RPCHelpMan{\"getpeerinfo\",\n                 \"\\nReturns data about each connected network node as a json array of objects.\\n\",\n@@ -139,92 +139,92 @@ static UniValue getpeerinfo(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n-    if(!g_rpc_node->connman)\n-        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n-\n-    std::vector<CNodeStats> vstats;\n-    g_rpc_node->connman->GetNodeStats(vstats);\n-\n-    UniValue ret(UniValue::VARR);\n-\n-    for (const CNodeStats& stats : vstats) {\n-        UniValue obj(UniValue::VOBJ);\n-        CNodeStateStats statestats;\n-        bool fStateStats = GetNodeStateStats(stats.nodeid, statestats);\n-        obj.pushKV(\"id\", stats.nodeid);\n-        obj.pushKV(\"addr\", stats.addrName);\n-        if (!(stats.addrLocal.empty()))\n-            obj.pushKV(\"addrlocal\", stats.addrLocal);\n-        if (stats.addrBind.IsValid())\n-            obj.pushKV(\"addrbind\", stats.addrBind.ToString());\n-        if (stats.m_mapped_as != 0) {\n-            obj.pushKV(\"mapped_as\", uint64_t(stats.m_mapped_as));\n-        }\n-        obj.pushKV(\"services\", strprintf(\"%016x\", stats.nServices));\n-        obj.pushKV(\"servicesnames\", GetServicesNames(stats.nServices));\n-        obj.pushKV(\"relaytxes\", stats.fRelayTxes);\n-        obj.pushKV(\"lastsend\", stats.nLastSend);\n-        obj.pushKV(\"lastrecv\", stats.nLastRecv);\n-        obj.pushKV(\"bytessent\", stats.nSendBytes);\n-        obj.pushKV(\"bytesrecv\", stats.nRecvBytes);\n-        obj.pushKV(\"conntime\", stats.nTimeConnected);\n-        obj.pushKV(\"timeoffset\", stats.nTimeOffset);\n-        if (stats.m_ping_usec > 0) {\n-            obj.pushKV(\"pingtime\", ((double)stats.m_ping_usec) / 1e6);\n-        }\n-        if (stats.m_min_ping_usec < std::numeric_limits<int64_t>::max()) {\n-            obj.pushKV(\"minping\", ((double)stats.m_min_ping_usec) / 1e6);\n-        }\n-        if (stats.m_ping_wait_usec > 0) {\n-            obj.pushKV(\"pingwait\", ((double)stats.m_ping_wait_usec) / 1e6);\n-        }\n-        obj.pushKV(\"version\", stats.nVersion);\n-        // Use the sanitized form of subver here, to avoid tricksy remote peers from\n-        // corrupting or modifying the JSON output by putting special characters in\n-        // their ver message.\n-        obj.pushKV(\"subver\", stats.cleanSubVer);\n-        obj.pushKV(\"inbound\", stats.fInbound);\n-        obj.pushKV(\"addnode\", stats.m_manual_connection);\n-        obj.pushKV(\"startingheight\", stats.nStartingHeight);\n-        if (fStateStats) {\n-            obj.pushKV(\"banscore\", statestats.nMisbehavior);\n-            obj.pushKV(\"synced_headers\", statestats.nSyncHeight);\n-            obj.pushKV(\"synced_blocks\", statestats.nCommonHeight);\n-            UniValue heights(UniValue::VARR);\n-            for (const int height : statestats.vHeightInFlight) {\n-                heights.push_back(height);\n+            if (!node.connman)\n+                throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n+\n+            std::vector<CNodeStats> vstats;\n+            node.connman->GetNodeStats(vstats);\n+\n+            UniValue ret(UniValue::VARR);\n+\n+            for (const CNodeStats& stats : vstats) {\n+                UniValue obj(UniValue::VOBJ);\n+                CNodeStateStats statestats;\n+                bool fStateStats = GetNodeStateStats(stats.nodeid, statestats);\n+                obj.pushKV(\"id\", stats.nodeid);\n+                obj.pushKV(\"addr\", stats.addrName);\n+                if (!(stats.addrLocal.empty()))\n+                    obj.pushKV(\"addrlocal\", stats.addrLocal);\n+                if (stats.addrBind.IsValid())\n+                    obj.pushKV(\"addrbind\", stats.addrBind.ToString());\n+                if (stats.m_mapped_as != 0) {\n+                    obj.pushKV(\"mapped_as\", uint64_t(stats.m_mapped_as));\n+                }\n+                obj.pushKV(\"services\", strprintf(\"%016x\", stats.nServices));\n+                obj.pushKV(\"servicesnames\", GetServicesNames(stats.nServices));\n+                obj.pushKV(\"relaytxes\", stats.fRelayTxes);\n+                obj.pushKV(\"lastsend\", stats.nLastSend);\n+                obj.pushKV(\"lastrecv\", stats.nLastRecv);\n+                obj.pushKV(\"bytessent\", stats.nSendBytes);\n+                obj.pushKV(\"bytesrecv\", stats.nRecvBytes);\n+                obj.pushKV(\"conntime\", stats.nTimeConnected);\n+                obj.pushKV(\"timeoffset\", stats.nTimeOffset);\n+                if (stats.m_ping_usec > 0) {\n+                    obj.pushKV(\"pingtime\", ((double)stats.m_ping_usec) / 1e6);\n+                }\n+                if (stats.m_min_ping_usec < std::numeric_limits<int64_t>::max()) {\n+                    obj.pushKV(\"minping\", ((double)stats.m_min_ping_usec) / 1e6);\n+                }\n+                if (stats.m_ping_wait_usec > 0) {\n+                    obj.pushKV(\"pingwait\", ((double)stats.m_ping_wait_usec) / 1e6);\n+                }\n+                obj.pushKV(\"version\", stats.nVersion);\n+                // Use the sanitized form of subver here, to avoid tricksy remote peers from\n+                // corrupting or modifying the JSON output by putting special characters in\n+                // their ver message.\n+                obj.pushKV(\"subver\", stats.cleanSubVer);\n+                obj.pushKV(\"inbound\", stats.fInbound);\n+                obj.pushKV(\"addnode\", stats.m_manual_connection);\n+                obj.pushKV(\"startingheight\", stats.nStartingHeight);\n+                if (fStateStats) {\n+                    obj.pushKV(\"banscore\", statestats.nMisbehavior);\n+                    obj.pushKV(\"synced_headers\", statestats.nSyncHeight);\n+                    obj.pushKV(\"synced_blocks\", statestats.nCommonHeight);\n+                    UniValue heights(UniValue::VARR);\n+                    for (const int height : statestats.vHeightInFlight) {\n+                        heights.push_back(height);\n+                    }\n+                    obj.pushKV(\"inflight\", heights);\n+                }\n+                obj.pushKV(\"whitelisted\", stats.m_legacyWhitelisted);\n+                UniValue permissions(UniValue::VARR);\n+                for (const auto& permission : NetPermissions::ToStrings(stats.m_permissionFlags)) {\n+                    permissions.push_back(permission);\n+                }\n+                obj.pushKV(\"permissions\", permissions);\n+                obj.pushKV(\"minfeefilter\", ValueFromAmount(stats.minFeeFilter));\n+\n+                UniValue sendPerMsgCmd(UniValue::VOBJ);\n+                for (const auto& i : stats.mapSendBytesPerMsgCmd) {\n+                    if (i.second > 0)\n+                        sendPerMsgCmd.pushKV(i.first, i.second);\n+                }\n+                obj.pushKV(\"bytessent_per_msg\", sendPerMsgCmd);\n+\n+                UniValue recvPerMsgCmd(UniValue::VOBJ);\n+                for (const auto& i : stats.mapRecvBytesPerMsgCmd) {\n+                    if (i.second > 0)\n+                        recvPerMsgCmd.pushKV(i.first, i.second);\n+                }\n+                obj.pushKV(\"bytesrecv_per_msg\", recvPerMsgCmd);\n+\n+                ret.push_back(obj);\n             }\n-            obj.pushKV(\"inflight\", heights);\n-        }\n-        obj.pushKV(\"whitelisted\", stats.m_legacyWhitelisted);\n-        UniValue permissions(UniValue::VARR);\n-        for (const auto& permission : NetPermissions::ToStrings(stats.m_permissionFlags)) {\n-            permissions.push_back(permission);\n-        }\n-        obj.pushKV(\"permissions\", permissions);\n-        obj.pushKV(\"minfeefilter\", ValueFromAmount(stats.minFeeFilter));\n-\n-        UniValue sendPerMsgCmd(UniValue::VOBJ);\n-        for (const auto& i : stats.mapSendBytesPerMsgCmd) {\n-            if (i.second > 0)\n-                sendPerMsgCmd.pushKV(i.first, i.second);\n-        }\n-        obj.pushKV(\"bytessent_per_msg\", sendPerMsgCmd);\n-\n-        UniValue recvPerMsgCmd(UniValue::VOBJ);\n-        for (const auto& i : stats.mapRecvBytesPerMsgCmd) {\n-            if (i.second > 0)\n-                recvPerMsgCmd.pushKV(i.first, i.second);\n-        }\n-        obj.pushKV(\"bytesrecv_per_msg\", recvPerMsgCmd);\n-\n-        ret.push_back(obj);\n-    }\n \n     return ret;\n }\n \n-static UniValue addnode(const JSONRPCRequest& request)\n+static UniValue addnode(const JSONRPCRequest& request, const NodeContext& node)\n {\n     std::string strCommand;\n     if (!request.params[1].isNull())\n@@ -248,33 +248,33 @@ static UniValue addnode(const JSONRPCRequest& request)\n                 },\n             }.ToString());\n \n-    if(!g_rpc_node->connman)\n+    if (!node.connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n     std::string strNode = request.params[0].get_str();\n \n     if (strCommand == \"onetry\")\n     {\n         CAddress addr;\n-        g_rpc_node->connman->OpenNetworkConnection(addr, false, nullptr, strNode.c_str(), false, false, true);\n+        node.connman->OpenNetworkConnection(addr, false, nullptr, strNode.c_str(), false, false, true);\n         return NullUniValue;\n     }\n \n     if (strCommand == \"add\")\n     {\n-        if(!g_rpc_node->connman->AddNode(strNode))\n+        if (!node.connman->AddNode(strNode))\n             throw JSONRPCError(RPC_CLIENT_NODE_ALREADY_ADDED, \"Error: Node already added\");\n     }\n     else if(strCommand == \"remove\")\n     {\n-        if(!g_rpc_node->connman->RemoveAddedNode(strNode))\n+        if (!node.connman->RemoveAddedNode(strNode))\n             throw JSONRPCError(RPC_CLIENT_NODE_NOT_ADDED, \"Error: Node has not been added.\");\n     }\n \n     return NullUniValue;\n }\n \n-static UniValue disconnectnode(const JSONRPCRequest& request)\n+static UniValue disconnectnode(const JSONRPCRequest& request, const NodeContext& node)\n {\n             RPCHelpMan{\"disconnectnode\",\n                 \"\\nImmediately disconnects from the specified peer node.\\n\"\n@@ -293,23 +293,23 @@ static UniValue disconnectnode(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n-    if(!g_rpc_node->connman)\n-        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n-\n-    bool success;\n-    const UniValue &address_arg = request.params[0];\n-    const UniValue &id_arg = request.params[1];\n-\n-    if (!address_arg.isNull() && id_arg.isNull()) {\n-        /* handle disconnect-by-address */\n-        success = g_rpc_node->connman->DisconnectNode(address_arg.get_str());\n-    } else if (!id_arg.isNull() && (address_arg.isNull() || (address_arg.isStr() && address_arg.get_str().empty()))) {\n-        /* handle disconnect-by-id */\n-        NodeId nodeid = (NodeId) id_arg.get_int64();\n-        success = g_rpc_node->connman->DisconnectNode(nodeid);\n-    } else {\n-        throw JSONRPCError(RPC_INVALID_PARAMS, \"Only one of address and nodeid should be provided.\");\n-    }\n+            if (!node.connman)\n+                throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n+\n+            bool success;\n+            const UniValue& address_arg = request.params[0];\n+            const UniValue& id_arg = request.params[1];\n+\n+            if (!address_arg.isNull() && id_arg.isNull()) {\n+                /* handle disconnect-by-address */\n+                success = node.connman->DisconnectNode(address_arg.get_str());\n+            } else if (!id_arg.isNull() && (address_arg.isNull() || (address_arg.isStr() && address_arg.get_str().empty()))) {\n+                /* handle disconnect-by-id */\n+                NodeId nodeid = (NodeId)id_arg.get_int64();\n+                success = node.connman->DisconnectNode(nodeid);\n+            } else {\n+                throw JSONRPCError(RPC_INVALID_PARAMS, \"Only one of address and nodeid should be provided.\");\n+            }\n \n     if (!success) {\n         throw JSONRPCError(RPC_CLIENT_NODE_NOT_CONNECTED, \"Node not found in connected nodes\");\n@@ -318,7 +318,7 @@ static UniValue disconnectnode(const JSONRPCRequest& request)\n     return NullUniValue;\n }\n \n-static UniValue getaddednodeinfo(const JSONRPCRequest& request)\n+static UniValue getaddednodeinfo(const JSONRPCRequest& request, const NodeContext& node)\n {\n             RPCHelpMan{\"getaddednodeinfo\",\n                 \"\\nReturns information about the given added node, or all added nodes\\n\"\n@@ -350,24 +350,24 @@ static UniValue getaddednodeinfo(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n-    if(!g_rpc_node->connman)\n-        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n+            if (!node.connman)\n+                throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n-    std::vector<AddedNodeInfo> vInfo = g_rpc_node->connman->GetAddedNodeInfo();\n+            std::vector<AddedNodeInfo> vInfo = node.connman->GetAddedNodeInfo();\n \n-    if (!request.params[0].isNull()) {\n-        bool found = false;\n-        for (const AddedNodeInfo& info : vInfo) {\n-            if (info.strAddedNode == request.params[0].get_str()) {\n-                vInfo.assign(1, info);\n-                found = true;\n-                break;\n+            if (!request.params[0].isNull()) {\n+                bool found = false;\n+                for (const AddedNodeInfo& info : vInfo) {\n+                    if (info.strAddedNode == request.params[0].get_str()) {\n+                        vInfo.assign(1, info);\n+                        found = true;\n+                        break;\n+                    }\n+                }\n+                if (!found) {\n+                    throw JSONRPCError(RPC_CLIENT_NODE_NOT_ADDED, \"Error: Node has not been added.\");\n+                }\n             }\n-        }\n-        if (!found) {\n-            throw JSONRPCError(RPC_CLIENT_NODE_NOT_ADDED, \"Error: Node has not been added.\");\n-        }\n-    }\n \n     UniValue ret(UniValue::VARR);\n \n@@ -389,7 +389,7 @@ static UniValue getaddednodeinfo(const JSONRPCRequest& request)\n     return ret;\n }\n \n-static UniValue getnettotals(const JSONRPCRequest& request)\n+static UniValue getnettotals(const JSONRPCRequest& request, const NodeContext& node)\n {\n             RPCHelpMan{\"getnettotals\",\n                 \"\\nReturns information about network traffic, including bytes in, bytes out,\\n\"\n@@ -417,23 +417,23 @@ static UniValue getnettotals(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"getnettotals\", \"\")\n                 },\n             }.Check(request);\n-    if(!g_rpc_node->connman)\n-        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n-\n-    UniValue obj(UniValue::VOBJ);\n-    obj.pushKV(\"totalbytesrecv\", g_rpc_node->connman->GetTotalBytesRecv());\n-    obj.pushKV(\"totalbytessent\", g_rpc_node->connman->GetTotalBytesSent());\n-    obj.pushKV(\"timemillis\", GetTimeMillis());\n-\n-    UniValue outboundLimit(UniValue::VOBJ);\n-    outboundLimit.pushKV(\"timeframe\", g_rpc_node->connman->GetMaxOutboundTimeframe());\n-    outboundLimit.pushKV(\"target\", g_rpc_node->connman->GetMaxOutboundTarget());\n-    outboundLimit.pushKV(\"target_reached\", g_rpc_node->connman->OutboundTargetReached(false));\n-    outboundLimit.pushKV(\"serve_historical_blocks\", !g_rpc_node->connman->OutboundTargetReached(true));\n-    outboundLimit.pushKV(\"bytes_left_in_cycle\", g_rpc_node->connman->GetOutboundTargetBytesLeft());\n-    outboundLimit.pushKV(\"time_left_in_cycle\", g_rpc_node->connman->GetMaxOutboundTimeLeftInCycle());\n-    obj.pushKV(\"uploadtarget\", outboundLimit);\n-    return obj;\n+            if (!node.connman)\n+                throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n+\n+            UniValue obj(UniValue::VOBJ);\n+            obj.pushKV(\"totalbytesrecv\", node.connman->GetTotalBytesRecv());\n+            obj.pushKV(\"totalbytessent\", node.connman->GetTotalBytesSent());\n+            obj.pushKV(\"timemillis\", GetTimeMillis());\n+\n+            UniValue outboundLimit(UniValue::VOBJ);\n+            outboundLimit.pushKV(\"timeframe\", node.connman->GetMaxOutboundTimeframe());\n+            outboundLimit.pushKV(\"target\", node.connman->GetMaxOutboundTarget());\n+            outboundLimit.pushKV(\"target_reached\", node.connman->OutboundTargetReached(false));\n+            outboundLimit.pushKV(\"serve_historical_blocks\", !node.connman->OutboundTargetReached(true));\n+            outboundLimit.pushKV(\"bytes_left_in_cycle\", node.connman->GetOutboundTargetBytesLeft());\n+            outboundLimit.pushKV(\"time_left_in_cycle\", node.connman->GetMaxOutboundTimeLeftInCycle());\n+            obj.pushKV(\"uploadtarget\", outboundLimit);\n+            return obj;\n }\n \n static UniValue GetNetworksInfo()\n@@ -457,7 +457,7 @@ static UniValue GetNetworksInfo()\n     return networks;\n }\n \n-static UniValue getnetworkinfo(const JSONRPCRequest& request)\n+static UniValue getnetworkinfo(const JSONRPCRequest& request, const NodeContext& node)\n {\n             RPCHelpMan{\"getnetworkinfo\",\n                 \"Returns an object containing various state info regarding P2P networking.\\n\",\n@@ -513,16 +513,16 @@ static UniValue getnetworkinfo(const JSONRPCRequest& request)\n     obj.pushKV(\"version\",       CLIENT_VERSION);\n     obj.pushKV(\"subversion\",    strSubVersion);\n     obj.pushKV(\"protocolversion\",PROTOCOL_VERSION);\n-    if (g_rpc_node->connman) {\n-        ServiceFlags services = g_rpc_node->connman->GetLocalServices();\n+    if (node.connman) {\n+        ServiceFlags services = node.connman->GetLocalServices();\n         obj.pushKV(\"localservices\", strprintf(\"%016x\", services));\n         obj.pushKV(\"localservicesnames\", GetServicesNames(services));\n     }\n     obj.pushKV(\"localrelay\", g_relay_txes);\n     obj.pushKV(\"timeoffset\",    GetTimeOffset());\n-    if (g_rpc_node->connman) {\n-        obj.pushKV(\"networkactive\", g_rpc_node->connman->GetNetworkActive());\n-        obj.pushKV(\"connections\",   (int)g_rpc_node->connman->GetNodeCount(CConnman::CONNECTIONS_ALL));\n+    if (node.connman) {\n+        obj.pushKV(\"networkactive\", node.connman->GetNetworkActive());\n+        obj.pushKV(\"connections\", (int)node.connman->GetNodeCount(CConnman::CONNECTIONS_ALL));\n     }\n     obj.pushKV(\"networks\",      GetNetworksInfo());\n     obj.pushKV(\"relayfee\",      ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n@@ -544,7 +544,7 @@ static UniValue getnetworkinfo(const JSONRPCRequest& request)\n     return obj;\n }\n \n-static UniValue setban(const JSONRPCRequest& request)\n+static UniValue setban(const JSONRPCRequest& request, const NodeContext& node)\n {\n     const RPCHelpMan help{\"setban\",\n                 \"\\nAttempts to add or remove an IP/Subnet from the banned list.\\n\",\n@@ -567,7 +567,7 @@ static UniValue setban(const JSONRPCRequest& request)\n     if (request.fHelp || !help.IsValidNumArgs(request.params.size()) || (strCommand != \"add\" && strCommand != \"remove\")) {\n         throw std::runtime_error(help.ToString());\n     }\n-    if (!g_rpc_node->banman) {\n+    if (!node.banman) {\n         throw JSONRPCError(RPC_DATABASE_ERROR, \"Error: Ban database not loaded\");\n     }\n \n@@ -591,7 +591,7 @@ static UniValue setban(const JSONRPCRequest& request)\n \n     if (strCommand == \"add\")\n     {\n-        if (isSubnet ? g_rpc_node->banman->IsBanned(subNet) : g_rpc_node->banman->IsBanned(netAddr)) {\n+        if (isSubnet ? node.banman->IsBanned(subNet) : node.banman->IsBanned(netAddr)) {\n             throw JSONRPCError(RPC_CLIENT_NODE_ALREADY_ADDED, \"Error: IP/Subnet already banned\");\n         }\n \n@@ -604,27 +604,27 @@ static UniValue setban(const JSONRPCRequest& request)\n             absolute = true;\n \n         if (isSubnet) {\n-            g_rpc_node->banman->Ban(subNet, BanReasonManuallyAdded, banTime, absolute);\n-            if (g_rpc_node->connman) {\n-                g_rpc_node->connman->DisconnectNode(subNet);\n+            node.banman->Ban(subNet, BanReasonManuallyAdded, banTime, absolute);\n+            if (node.connman) {\n+                node.connman->DisconnectNode(subNet);\n             }\n         } else {\n-            g_rpc_node->banman->Ban(netAddr, BanReasonManuallyAdded, banTime, absolute);\n-            if (g_rpc_node->connman) {\n-                g_rpc_node->connman->DisconnectNode(netAddr);\n+            node.banman->Ban(netAddr, BanReasonManuallyAdded, banTime, absolute);\n+            if (node.connman) {\n+                node.connman->DisconnectNode(netAddr);\n             }\n         }\n     }\n     else if(strCommand == \"remove\")\n     {\n-        if (!( isSubnet ? g_rpc_node->banman->Unban(subNet) : g_rpc_node->banman->Unban(netAddr) )) {\n+        if (!(isSubnet ? node.banman->Unban(subNet) : node.banman->Unban(netAddr))) {\n             throw JSONRPCError(RPC_CLIENT_INVALID_IP_OR_SUBNET, \"Error: Unban failed. Requested address/subnet was not previously banned.\");\n         }\n     }\n     return NullUniValue;\n }\n \n-static UniValue listbanned(const JSONRPCRequest& request)\n+static UniValue listbanned(const JSONRPCRequest& request, const NodeContext& node)\n {\n             RPCHelpMan{\"listbanned\",\n                 \"\\nList all banned IPs/Subnets.\\n\",\n@@ -645,12 +645,12 @@ static UniValue listbanned(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n-    if(!g_rpc_node->banman) {\n-        throw JSONRPCError(RPC_DATABASE_ERROR, \"Error: Ban database not loaded\");\n-    }\n+            if (!node.banman) {\n+                throw JSONRPCError(RPC_DATABASE_ERROR, \"Error: Ban database not loaded\");\n+            }\n \n     banmap_t banMap;\n-    g_rpc_node->banman->GetBanned(banMap);\n+    node.banman->GetBanned(banMap);\n \n     UniValue bannedAddresses(UniValue::VARR);\n     for (const auto& entry : banMap)\n@@ -668,7 +668,7 @@ static UniValue listbanned(const JSONRPCRequest& request)\n     return bannedAddresses;\n }\n \n-static UniValue clearbanned(const JSONRPCRequest& request)\n+static UniValue clearbanned(const JSONRPCRequest& request, const NodeContext& node)\n {\n             RPCHelpMan{\"clearbanned\",\n                 \"\\nClear all banned IPs.\\n\",\n@@ -679,16 +679,16 @@ static UniValue clearbanned(const JSONRPCRequest& request)\n                             + HelpExampleRpc(\"clearbanned\", \"\")\n                 },\n             }.Check(request);\n-    if (!g_rpc_node->banman) {\n-        throw JSONRPCError(RPC_DATABASE_ERROR, \"Error: Ban database not loaded\");\n-    }\n+            if (!node.banman) {\n+                throw JSONRPCError(RPC_DATABASE_ERROR, \"Error: Ban database not loaded\");\n+            }\n \n-    g_rpc_node->banman->ClearBanned();\n+            node.banman->ClearBanned();\n \n-    return NullUniValue;\n+            return NullUniValue;\n }\n \n-static UniValue setnetworkactive(const JSONRPCRequest& request)\n+static UniValue setnetworkactive(const JSONRPCRequest& request, const NodeContext& node)\n {\n             RPCHelpMan{\"setnetworkactive\",\n                 \"\\nDisable/enable all p2p network activity.\\n\",\n@@ -699,16 +699,16 @@ static UniValue setnetworkactive(const JSONRPCRequest& request)\n                 RPCExamples{\"\"},\n             }.Check(request);\n \n-    if (!g_rpc_node->connman) {\n-        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n-    }\n+            if (!node.connman) {\n+                throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n+            }\n \n-    g_rpc_node->connman->SetNetworkActive(request.params[0].get_bool());\n+            node.connman->SetNetworkActive(request.params[0].get_bool());\n \n-    return g_rpc_node->connman->GetNetworkActive();\n+            return node.connman->GetNetworkActive();\n }\n \n-static UniValue getnodeaddresses(const JSONRPCRequest& request)\n+static UniValue getnodeaddresses(const JSONRPCRequest& request, const NodeContext& node)\n {\n             RPCHelpMan{\"getnodeaddresses\",\n                 \"\\nReturn known addresses which can potentially be used to find new nodes in the network\\n\",\n@@ -732,9 +732,9 @@ static UniValue getnodeaddresses(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"getnodeaddresses\", \"8\")\n                 },\n             }.Check(request);\n-    if (!g_rpc_node->connman) {\n-        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n-    }\n+            if (!node.connman) {\n+                throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n+            }\n \n     int count = 1;\n     if (!request.params[0].isNull()) {\n@@ -744,7 +744,7 @@ static UniValue getnodeaddresses(const JSONRPCRequest& request)\n         }\n     }\n     // returns a shuffled list of CAddress\n-    std::vector<CAddress> vAddr = g_rpc_node->connman->GetAddresses();\n+    std::vector<CAddress> vAddr = node.connman->GetAddresses();\n     UniValue ret(UniValue::VARR);\n \n     int address_return_count = std::min<int>(count, vAddr.size());"
      },
      {
        "sha": "0fcfd6ad25feb575f2cffe032f0387baad54f81d",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 23,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca4dba21337ff196fef2a47e29ae92f2c57ce1ad/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca4dba21337ff196fef2a47e29ae92f2c57ce1ad/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=ca4dba21337ff196fef2a47e29ae92f2c57ce1ad",
        "patch": "@@ -72,7 +72,7 @@ static void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue&\n     }\n }\n \n-static UniValue getrawtransaction(const JSONRPCRequest& request)\n+static UniValue getrawtransaction(const JSONRPCRequest& request, const NodeContext& node)\n {\n     RPCHelpMan{\n                 \"getrawtransaction\",\n@@ -222,7 +222,7 @@ static UniValue getrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n-static UniValue gettxoutproof(const JSONRPCRequest& request)\n+static UniValue gettxoutproof(const JSONRPCRequest& request, const NodeContext& node)\n {\n             RPCHelpMan{\"gettxoutproof\",\n                 \"\\nReturns a hex-encoded proof that \\\"txid\\\" was included in a block.\\n\"\n@@ -315,7 +315,7 @@ static UniValue gettxoutproof(const JSONRPCRequest& request)\n     return strHex;\n }\n \n-static UniValue verifytxoutproof(const JSONRPCRequest& request)\n+static UniValue verifytxoutproof(const JSONRPCRequest& request, const NodeContext& node)\n {\n             RPCHelpMan{\"verifytxoutproof\",\n                 \"\\nVerifies that a proof points to a transaction in a block, returning the transaction it commits to\\n\"\n@@ -360,7 +360,7 @@ static UniValue verifytxoutproof(const JSONRPCRequest& request)\n     return res;\n }\n \n-static UniValue createrawtransaction(const JSONRPCRequest& request)\n+static UniValue createrawtransaction(const JSONRPCRequest& request, const NodeContext& node)\n {\n             RPCHelpMan{\"createrawtransaction\",\n                 \"\\nCreate a transaction spending the given inputs and creating new outputs.\\n\"\n@@ -429,7 +429,7 @@ static UniValue createrawtransaction(const JSONRPCRequest& request)\n     return EncodeHexTx(CTransaction(rawTx));\n }\n \n-static UniValue decoderawtransaction(const JSONRPCRequest& request)\n+static UniValue decoderawtransaction(const JSONRPCRequest& request, const NodeContext& node)\n {\n     RPCHelpMan{\"decoderawtransaction\",\n                 \"\\nReturn a JSON object representing the serialized, hex-encoded transaction.\\n\",\n@@ -525,7 +525,7 @@ static std::string GetAllOutputTypes()\n     return ret;\n }\n \n-static UniValue decodescript(const JSONRPCRequest& request)\n+static UniValue decodescript(const JSONRPCRequest& request, const NodeContext& node)\n {\n     RPCHelpMan{\"decodescript\",\n                 \"\\nDecode a hex-encoded script.\\n\",\n@@ -616,7 +616,7 @@ static UniValue decodescript(const JSONRPCRequest& request)\n     return r;\n }\n \n-static UniValue combinerawtransaction(const JSONRPCRequest& request)\n+static UniValue combinerawtransaction(const JSONRPCRequest& request, const NodeContext& node)\n {\n             RPCHelpMan{\"combinerawtransaction\",\n                 \"\\nCombine multiple partially signed transactions into one transaction.\\n\"\n@@ -659,7 +659,7 @@ static UniValue combinerawtransaction(const JSONRPCRequest& request)\n     CCoinsView viewDummy;\n     CCoinsViewCache view(&viewDummy);\n     {\n-        const CTxMemPool& mempool = EnsureMemPool();\n+        CTxMemPool& mempool = EnsureMemPool(node);\n         LOCK(cs_main);\n         LOCK(mempool.cs);\n         CCoinsViewCache &viewChain = ::ChainstateActive().CoinsTip();\n@@ -699,7 +699,7 @@ static UniValue combinerawtransaction(const JSONRPCRequest& request)\n     return EncodeHexTx(CTransaction(mergedTx));\n }\n \n-static UniValue signrawtransactionwithkey(const JSONRPCRequest& request)\n+static UniValue signrawtransactionwithkey(const JSONRPCRequest& request, const NodeContext& node)\n {\n             RPCHelpMan{\"signrawtransactionwithkey\",\n                 \"\\nSign inputs for raw transaction (serialized, hex-encoded).\\n\"\n@@ -784,7 +784,7 @@ static UniValue signrawtransactionwithkey(const JSONRPCRequest& request)\n     for (const CTxIn& txin : mtx.vin) {\n         coins[txin.prevout]; // Create empty map entry keyed by prevout.\n     }\n-    FindCoins(*g_rpc_node, coins);\n+    FindCoins(node, coins);\n \n     // Parse the prevtxs array\n     ParsePrevouts(request.params[2], &keystore, coins);\n@@ -794,7 +794,7 @@ static UniValue signrawtransactionwithkey(const JSONRPCRequest& request)\n     return result;\n }\n \n-static UniValue sendrawtransaction(const JSONRPCRequest& request)\n+static UniValue sendrawtransaction(const JSONRPCRequest& request, const NodeContext& node)\n {\n     RPCHelpMan{\"sendrawtransaction\",\n                 \"\\nSubmit a raw transaction (serialized, hex-encoded) to local node and network.\\n\"\n@@ -843,15 +843,15 @@ static UniValue sendrawtransaction(const JSONRPCRequest& request)\n \n     std::string err_string;\n     AssertLockNotHeld(cs_main);\n-    const TransactionError err = BroadcastTransaction(*g_rpc_node, tx, err_string, max_raw_tx_fee, /*relay*/ true, /*wait_callback*/ true);\n+    const TransactionError err = BroadcastTransaction(node, tx, err_string, max_raw_tx_fee, /*relay*/ true, /*wait_callback*/ true);\n     if (TransactionError::OK != err) {\n         throw JSONRPCTransactionError(err, err_string);\n     }\n \n     return tx->GetHash().GetHex();\n }\n \n-static UniValue testmempoolaccept(const JSONRPCRequest& request)\n+static UniValue testmempoolaccept(const JSONRPCRequest& request, const NodeContext& node)\n {\n     RPCHelpMan{\"testmempoolaccept\",\n                 \"\\nReturns result of mempool acceptance tests indicating if raw transaction (serialized, hex-encoded) would be accepted by mempool.\\n\"\n@@ -910,7 +910,7 @@ static UniValue testmempoolaccept(const JSONRPCRequest& request)\n                                              DEFAULT_MAX_RAW_TX_FEE_RATE :\n                                              CFeeRate(AmountFromValue(request.params[1]));\n \n-    CTxMemPool& mempool = EnsureMemPool();\n+    CTxMemPool& mempool = EnsureMemPool(node);\n     int64_t virtual_size = GetVirtualTransactionSize(*tx);\n     CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n \n@@ -961,7 +961,7 @@ static std::string WriteHDKeypath(std::vector<uint32_t>& keypath)\n     return keypath_str;\n }\n \n-UniValue decodepsbt(const JSONRPCRequest& request)\n+UniValue decodepsbt(const JSONRPCRequest& request, const NodeContext& node)\n {\n             RPCHelpMan{\"decodepsbt\",\n                 \"\\nReturn a JSON object representing the serialized, base64-encoded partially signed Bitcoin transaction.\\n\",\n@@ -1266,7 +1266,7 @@ UniValue decodepsbt(const JSONRPCRequest& request)\n     return result;\n }\n \n-UniValue combinepsbt(const JSONRPCRequest& request)\n+UniValue combinepsbt(const JSONRPCRequest& request, const NodeContext& node)\n {\n             RPCHelpMan{\"combinepsbt\",\n                 \"\\nCombine multiple partially signed Bitcoin transactions into one transaction.\\n\"\n@@ -1314,7 +1314,7 @@ UniValue combinepsbt(const JSONRPCRequest& request)\n     return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n }\n \n-UniValue finalizepsbt(const JSONRPCRequest& request)\n+UniValue finalizepsbt(const JSONRPCRequest& request, const NodeContext& node)\n {\n             RPCHelpMan{\"finalizepsbt\",\n                 \"Finalize the inputs of a PSBT. If the transaction is fully signed, it will produce a\\n\"\n@@ -1371,7 +1371,7 @@ UniValue finalizepsbt(const JSONRPCRequest& request)\n     return result;\n }\n \n-UniValue createpsbt(const JSONRPCRequest& request)\n+UniValue createpsbt(const JSONRPCRequest& request, const NodeContext& node)\n {\n             RPCHelpMan{\"createpsbt\",\n                 \"\\nCreates a transaction in the Partially Signed Transaction format.\\n\"\n@@ -1449,7 +1449,7 @@ UniValue createpsbt(const JSONRPCRequest& request)\n     return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n }\n \n-UniValue converttopsbt(const JSONRPCRequest& request)\n+UniValue converttopsbt(const JSONRPCRequest& request, const NodeContext& node)\n {\n     RPCHelpMan{\"converttopsbt\",\n                 \"\\nConverts a network serialized transaction to a PSBT. This should be used only with createrawtransaction and fundrawtransaction\\n\"\n@@ -1516,7 +1516,7 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n     return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n }\n \n-UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n+UniValue utxoupdatepsbt(const JSONRPCRequest& request, const NodeContext& node)\n {\n             RPCHelpMan{\"utxoupdatepsbt\",\n             \"\\nUpdates all segwit inputs and outputs in a PSBT with data from output descriptors, the UTXO set or the mempool.\\n\",\n@@ -1561,7 +1561,7 @@ UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n     CCoinsView viewDummy;\n     CCoinsViewCache view(&viewDummy);\n     {\n-        const CTxMemPool& mempool = EnsureMemPool();\n+        CTxMemPool& mempool = EnsureMemPool(node);\n         LOCK2(cs_main, mempool.cs);\n         CCoinsViewCache &viewChain = ::ChainstateActive().CoinsTip();\n         CCoinsViewMemPool viewMempool(&viewChain, mempool);\n@@ -1604,7 +1604,7 @@ UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n     return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n }\n \n-UniValue joinpsbts(const JSONRPCRequest& request)\n+UniValue joinpsbts(const JSONRPCRequest& request, const NodeContext& node)\n {\n             RPCHelpMan{\"joinpsbts\",\n             \"\\nJoins multiple distinct PSBTs with different inputs and outputs into one PSBT with inputs and outputs from all of the PSBTs\\n\"\n@@ -1697,7 +1697,7 @@ UniValue joinpsbts(const JSONRPCRequest& request)\n     return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n }\n \n-UniValue analyzepsbt(const JSONRPCRequest& request)\n+UniValue analyzepsbt(const JSONRPCRequest& request, const NodeContext& node)\n {\n             RPCHelpMan{\"analyzepsbt\",\n             \"\\nAnalyzes and provides information about the current status of a PSBT and its inputs\\n\","
      },
      {
        "sha": "e71281d5eaa5b9052faba729f053acddfc46e533",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 10,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca4dba21337ff196fef2a47e29ae92f2c57ce1ad/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca4dba21337ff196fef2a47e29ae92f2c57ce1ad/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=ca4dba21337ff196fef2a47e29ae92f2c57ce1ad",
        "patch": "@@ -5,6 +5,7 @@\n \n #include <rpc/server.h>\n \n+#include <node/context.h>\n #include <rpc/util.h>\n #include <shutdown.h>\n #include <sync.h>\n@@ -26,7 +27,7 @@ static std::string rpcWarmupStatus GUARDED_BY(cs_rpcWarmup) = \"RPC server starte\n static RPCTimerInterface* timerInterface = nullptr;\n /* Map of name to timer. */\n static std::map<std::string, std::unique_ptr<RPCTimerBase> > deadlineTimers;\n-static bool ExecuteCommand(const CRPCCommand& command, const JSONRPCRequest& request, UniValue& result, bool last_handler);\n+static bool ExecuteCommand(const CRPCCommand& command, const JSONRPCRequest& request, UniValue& result, bool last_handler, const NodeContext& node);\n \n struct RPCCommandExecutionInfo\n {\n@@ -99,7 +100,7 @@ std::string CRPCTable::help(const std::string& strCommand, const JSONRPCRequest&\n         {\n             UniValue unused_result;\n             if (setDone.insert(pcmd->unique_id).second)\n-                pcmd->actor(jreq, unused_result, true /* last_handler */);\n+                pcmd->actor(jreq, unused_result, true /* last_handler */, *pnode);\n         }\n         catch (const std::exception& e)\n         {\n@@ -127,7 +128,7 @@ std::string CRPCTable::help(const std::string& strCommand, const JSONRPCRequest&\n     return strRet;\n }\n \n-UniValue help(const JSONRPCRequest& jsonRequest)\n+UniValue help(const JSONRPCRequest& jsonRequest, const NodeContext& node)\n {\n     if (jsonRequest.fHelp || jsonRequest.params.size() > 1)\n         throw std::runtime_error(\n@@ -151,7 +152,7 @@ UniValue help(const JSONRPCRequest& jsonRequest)\n }\n \n \n-UniValue stop(const JSONRPCRequest& jsonRequest)\n+UniValue stop(const JSONRPCRequest& jsonRequest, const NodeContext& node)\n {\n     static const std::string RESULT{PACKAGE_NAME \" stopping\"};\n     // Accept the deprecated and ignored 'detach' boolean argument\n@@ -175,7 +176,7 @@ UniValue stop(const JSONRPCRequest& jsonRequest)\n     return RESULT;\n }\n \n-static UniValue uptime(const JSONRPCRequest& jsonRequest)\n+static UniValue uptime(const JSONRPCRequest& jsonRequest, const NodeContext& node)\n {\n             RPCHelpMan{\"uptime\",\n                 \"\\nReturns the total uptime of the server.\\n\",\n@@ -192,7 +193,7 @@ static UniValue uptime(const JSONRPCRequest& jsonRequest)\n     return GetTime() - GetStartupTime();\n }\n \n-static UniValue getrpcinfo(const JSONRPCRequest& request)\n+static UniValue getrpcinfo(const JSONRPCRequest& request, const NodeContext& node)\n {\n             RPCHelpMan{\"getrpcinfo\",\n                 \"\\nReturns details of the RPC server.\\n\",\n@@ -259,6 +260,12 @@ CRPCTable::CRPCTable()\n     }\n }\n \n+void CRPCTable::addNodeContext(NodeContext* pnode_ctx)\n+{\n+    CHECK_NONFATAL(pnode_ctx);\n+    pnode = pnode_ctx;\n+}\n+\n bool CRPCTable::appendCommand(const std::string& name, const CRPCCommand* pcmd)\n {\n     if (IsRPCRunning())\n@@ -432,24 +439,24 @@ UniValue CRPCTable::execute(const JSONRPCRequest &request) const\n     if (it != mapCommands.end()) {\n         UniValue result;\n         for (const auto& command : it->second) {\n-            if (ExecuteCommand(*command, request, result, &command == &it->second.back())) {\n+            if (ExecuteCommand(*command, request, result, &command == &it->second.back(), *pnode)) {\n                 return result;\n             }\n         }\n     }\n     throw JSONRPCError(RPC_METHOD_NOT_FOUND, \"Method not found\");\n }\n \n-static bool ExecuteCommand(const CRPCCommand& command, const JSONRPCRequest& request, UniValue& result, bool last_handler)\n+static bool ExecuteCommand(const CRPCCommand& command, const JSONRPCRequest& request, UniValue& result, bool last_handler, const NodeContext& node)\n {\n     try\n     {\n         RPCCommandExecution execution(request.strMethod);\n         // Execute, convert arguments to array if necessary\n         if (request.params.isObject()) {\n-            return command.actor(transformNamedArguments(request, command.argNames), result, last_handler);\n+            return command.actor(transformNamedArguments(request, command.argNames), result, last_handler, node);\n         } else {\n-            return command.actor(request, result, last_handler);\n+            return command.actor(request, result, last_handler, node);\n         }\n     }\n     catch (const std::exception& e)"
      },
      {
        "sha": "667b12e2a8a66c4cdcd483f8e72c55cd710776a9",
        "filename": "src/rpc/server.h",
        "status": "modified",
        "additions": 16,
        "deletions": 7,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca4dba21337ff196fef2a47e29ae92f2c57ce1ad/src/rpc/server.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca4dba21337ff196fef2a47e29ae92f2c57ce1ad/src/rpc/server.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.h?ref=ca4dba21337ff196fef2a47e29ae92f2c57ce1ad",
        "patch": "@@ -7,6 +7,7 @@\n #define BITCOIN_RPC_SERVER_H\n \n #include <amount.h>\n+#include <node/context.h>\n #include <rpc/request.h>\n \n #include <map>\n@@ -81,28 +82,30 @@ void RPCUnsetTimerInterface(RPCTimerInterface *iface);\n  */\n void RPCRunLater(const std::string& name, std::function<void()> func, int64_t nSeconds);\n \n-typedef UniValue(*rpcfn_type)(const JSONRPCRequest& jsonRequest);\n+typedef UniValue (*rpcfn_type)(const JSONRPCRequest& jsonRequest, const NodeContext& node);\n \n class CRPCCommand\n {\n public:\n     //! RPC method handler reading request and assigning result. Should return\n     //! true if request is fully handled, false if it should be passed on to\n     //! subsequent handlers.\n-    using Actor = std::function<bool(const JSONRPCRequest& request, UniValue& result, bool last_handler)>;\n+    using Actor = std::function<bool(const JSONRPCRequest& request, UniValue& result, bool last_handler, const NodeContext& node)>;\n \n-    //! Constructor taking Actor callback supporting multiple handlers.\n+    //! Constructor taking Actor callback supporting multiple handlers\n     CRPCCommand(std::string category, std::string name, Actor actor, std::vector<std::string> args, intptr_t unique_id)\n         : category(std::move(category)), name(std::move(name)), actor(std::move(actor)), argNames(std::move(args)),\n           unique_id(unique_id)\n     {\n     }\n \n-    //! Simplified constructor taking plain rpcfn_type function pointer.\n     CRPCCommand(const char* category, const char* name, rpcfn_type fn, std::initializer_list<const char*> args)\n-        : CRPCCommand(category, name,\n-                      [fn](const JSONRPCRequest& request, UniValue& result, bool) { result = fn(request); return true; },\n-                      {args.begin(), args.end()}, intptr_t(fn))\n+        : CRPCCommand(\n+              category,\n+              name,\n+              [fn](const JSONRPCRequest& request, UniValue& result, bool last_handler, const NodeContext& node) { result = fn(request, node); return true; },\n+              {args.begin(), args.end()},\n+              intptr_t(fn))\n     {\n     }\n \n@@ -120,6 +123,8 @@ class CRPCTable\n {\n private:\n     std::map<std::string, std::vector<const CRPCCommand*>> mapCommands;\n+    NodeContext* pnode = nullptr;\n+\n public:\n     CRPCTable();\n     std::string help(const std::string& name, const JSONRPCRequest& helpreq) const;\n@@ -153,6 +158,10 @@ class CRPCTable\n      */\n     bool appendCommand(const std::string& name, const CRPCCommand* pcmd);\n     bool removeCommand(const std::string& name, const CRPCCommand* pcmd);\n+    /**\n+     * Adds the current node context to be forwarded to RPC functions\n+     */\n+    void addNodeContext(NodeContext* pnode);\n };\n \n bool IsDeprecatedRPCEnabled(const std::string& method);"
      },
      {
        "sha": "cd3e7b752ec70dee2404c6940b8a7e26f39a5219",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca4dba21337ff196fef2a47e29ae92f2c57ce1ad/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca4dba21337ff196fef2a47e29ae92f2c57ce1ad/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=ca4dba21337ff196fef2a47e29ae92f2c57ce1ad",
        "patch": "@@ -123,15 +123,15 @@ TestingSetup::TestingSetup(const std::string& chainName, const std::vector<const\n     const CChainParams& chainparams = Params();\n     // Ideally we'd move all the RPC tests to the functional testing framework\n     // instead of unit tests, but for now we need these here.\n-    g_rpc_node = &m_node;\n     RegisterAllCoreRPCCommands(tableRPC);\n+    tableRPC.addNodeContext(&m_node);\n \n     m_node.scheduler = MakeUnique<CScheduler>();\n \n     // We have to run a scheduler thread to prevent ActivateBestChain\n     // from blocking due to queue overrun.\n     threadGroup.create_thread([&]{ m_node.scheduler->serviceQueue(); });\n-    GetMainSignals().RegisterBackgroundSignalScheduler(*g_rpc_node->scheduler);\n+    GetMainSignals().RegisterBackgroundSignalScheduler(*m_node.scheduler);\n \n     pblocktree.reset(new CBlockTreeDB(1 << 20, true));\n \n@@ -176,7 +176,6 @@ TestingSetup::~TestingSetup()\n     threadGroup.join_all();\n     GetMainSignals().FlushBackgroundCallbacks();\n     GetMainSignals().UnregisterBackgroundSignalScheduler();\n-    g_rpc_node = nullptr;\n     m_node.connman.reset();\n     m_node.banman.reset();\n     m_node.args = nullptr;"
      },
      {
        "sha": "7189ff6eff137c79374e7b0e72b5fe442334707e",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca4dba21337ff196fef2a47e29ae92f2c57ce1ad/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca4dba21337ff196fef2a47e29ae92f2c57ce1ad/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=ca4dba21337ff196fef2a47e29ae92f2c57ce1ad",
        "patch": "@@ -90,7 +90,7 @@ static void RescanWallet(CWallet& wallet, const WalletRescanReserver& reserver,\n     }\n }\n \n-UniValue importprivkey(const JSONRPCRequest& request)\n+UniValue importprivkey(const JSONRPCRequest& request, const NodeContext& node)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     CWallet* const pwallet = wallet.get();\n@@ -194,7 +194,7 @@ UniValue importprivkey(const JSONRPCRequest& request)\n     return NullUniValue;\n }\n \n-UniValue abortrescan(const JSONRPCRequest& request)\n+UniValue abortrescan(const JSONRPCRequest& request, const NodeContext& node)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     CWallet* const pwallet = wallet.get();\n@@ -222,7 +222,7 @@ UniValue abortrescan(const JSONRPCRequest& request)\n     return true;\n }\n \n-UniValue importaddress(const JSONRPCRequest& request)\n+UniValue importaddress(const JSONRPCRequest& request, const NodeContext& node)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     CWallet* const pwallet = wallet.get();\n@@ -326,7 +326,7 @@ UniValue importaddress(const JSONRPCRequest& request)\n     return NullUniValue;\n }\n \n-UniValue importprunedfunds(const JSONRPCRequest& request)\n+UniValue importprunedfunds(const JSONRPCRequest& request, const NodeContext& node)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     CWallet* const pwallet = wallet.get();\n@@ -386,7 +386,7 @@ UniValue importprunedfunds(const JSONRPCRequest& request)\n     throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"No addresses in wallet correspond to included transaction\");\n }\n \n-UniValue removeprunedfunds(const JSONRPCRequest& request)\n+UniValue removeprunedfunds(const JSONRPCRequest& request, const NodeContext& node)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     CWallet* const pwallet = wallet.get();\n@@ -426,7 +426,7 @@ UniValue removeprunedfunds(const JSONRPCRequest& request)\n     return NullUniValue;\n }\n \n-UniValue importpubkey(const JSONRPCRequest& request)\n+UniValue importpubkey(const JSONRPCRequest& request, const NodeContext& node)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     CWallet* const pwallet = wallet.get();\n@@ -515,7 +515,7 @@ UniValue importpubkey(const JSONRPCRequest& request)\n }\n \n \n-UniValue importwallet(const JSONRPCRequest& request)\n+UniValue importwallet(const JSONRPCRequest& request, const NodeContext& node)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     CWallet* const pwallet = wallet.get();\n@@ -674,7 +674,7 @@ UniValue importwallet(const JSONRPCRequest& request)\n     return NullUniValue;\n }\n \n-UniValue dumpprivkey(const JSONRPCRequest& request)\n+UniValue dumpprivkey(const JSONRPCRequest& request, const NodeContext& node)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     const CWallet* const pwallet = wallet.get();\n@@ -722,7 +722,7 @@ UniValue dumpprivkey(const JSONRPCRequest& request)\n }\n \n \n-UniValue dumpwallet(const JSONRPCRequest& request)\n+UniValue dumpwallet(const JSONRPCRequest& request, const NodeContext& node)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     const CWallet* const pwallet = wallet.get();\n@@ -1264,7 +1264,7 @@ static int64_t GetImportTimestamp(const UniValue& data, int64_t now)\n     throw JSONRPCError(RPC_TYPE_ERROR, \"Missing required timestamp field for key\");\n }\n \n-UniValue importmulti(const JSONRPCRequest& mainRequest)\n+UniValue importmulti(const JSONRPCRequest& mainRequest, const NodeContext& node)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(mainRequest);\n     CWallet* const pwallet = wallet.get();"
      },
      {
        "sha": "de67da49b1d78f4b536bfb16ce0c79890a740574",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 59,
        "deletions": 60,
        "changes": 119,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca4dba21337ff196fef2a47e29ae92f2c57ce1ad/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca4dba21337ff196fef2a47e29ae92f2c57ce1ad/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=ca4dba21337ff196fef2a47e29ae92f2c57ce1ad",
        "patch": "@@ -182,7 +182,7 @@ static std::string LabelFromValue(const UniValue& value)\n     return label;\n }\n \n-static UniValue getnewaddress(const JSONRPCRequest& request)\n+static UniValue getnewaddress(const JSONRPCRequest& request, const NodeContext& node)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     CWallet* const pwallet = wallet.get();\n@@ -235,7 +235,7 @@ static UniValue getnewaddress(const JSONRPCRequest& request)\n     return EncodeDestination(dest);\n }\n \n-static UniValue getrawchangeaddress(const JSONRPCRequest& request)\n+static UniValue getrawchangeaddress(const JSONRPCRequest& request, const NodeContext& node)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     CWallet* const pwallet = wallet.get();\n@@ -281,7 +281,7 @@ static UniValue getrawchangeaddress(const JSONRPCRequest& request)\n }\n \n \n-static UniValue setlabel(const JSONRPCRequest& request)\n+static UniValue setlabel(const JSONRPCRequest& request, const NodeContext& node)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     CWallet* const pwallet = wallet.get();\n@@ -353,7 +353,7 @@ static CTransactionRef SendMoney(interfaces::Chain::Lock& locked_chain, CWallet\n     return tx;\n }\n \n-static UniValue sendtoaddress(const JSONRPCRequest& request)\n+static UniValue sendtoaddress(const JSONRPCRequest& request, const NodeContext& node)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     CWallet* const pwallet = wallet.get();\n@@ -449,7 +449,7 @@ static UniValue sendtoaddress(const JSONRPCRequest& request)\n     return tx->GetHash().GetHex();\n }\n \n-static UniValue listaddressgroupings(const JSONRPCRequest& request)\n+static UniValue listaddressgroupings(const JSONRPCRequest& request, const NodeContext& node)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     const CWallet* const pwallet = wallet.get();\n@@ -512,7 +512,7 @@ static UniValue listaddressgroupings(const JSONRPCRequest& request)\n     return jsonGroupings;\n }\n \n-static UniValue signmessage(const JSONRPCRequest& request)\n+static UniValue signmessage(const JSONRPCRequest& request, const NodeContext& node)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     const CWallet* const pwallet = wallet.get();\n@@ -618,7 +618,7 @@ static CAmount GetReceived(interfaces::Chain::Lock& locked_chain, const CWallet&\n }\n \n \n-static UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n+static UniValue getreceivedbyaddress(const JSONRPCRequest& request, const NodeContext& node)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     const CWallet* const pwallet = wallet.get();\n@@ -659,7 +659,7 @@ static UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n }\n \n \n-static UniValue getreceivedbylabel(const JSONRPCRequest& request)\n+static UniValue getreceivedbylabel(const JSONRPCRequest& request, const NodeContext& node)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     const CWallet* const pwallet = wallet.get();\n@@ -700,7 +700,7 @@ static UniValue getreceivedbylabel(const JSONRPCRequest& request)\n }\n \n \n-static UniValue getbalance(const JSONRPCRequest& request)\n+static UniValue getbalance(const JSONRPCRequest& request, const NodeContext& node)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     const CWallet* const pwallet = wallet.get();\n@@ -758,7 +758,7 @@ static UniValue getbalance(const JSONRPCRequest& request)\n     return ValueFromAmount(bal.m_mine_trusted + (include_watchonly ? bal.m_watchonly_trusted : 0));\n }\n \n-static UniValue getunconfirmedbalance(const JSONRPCRequest &request)\n+static UniValue getunconfirmedbalance(const JSONRPCRequest& request, const NodeContext& node)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     const CWallet* const pwallet = wallet.get();\n@@ -785,7 +785,7 @@ static UniValue getunconfirmedbalance(const JSONRPCRequest &request)\n }\n \n \n-static UniValue sendmany(const JSONRPCRequest& request)\n+static UniValue sendmany(const JSONRPCRequest& request, const NodeContext& node)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     CWallet* const pwallet = wallet.get();\n@@ -920,7 +920,7 @@ static UniValue sendmany(const JSONRPCRequest& request)\n     return tx->GetHash().GetHex();\n }\n \n-static UniValue addmultisigaddress(const JSONRPCRequest& request)\n+static UniValue addmultisigaddress(const JSONRPCRequest& request, const NodeContext& node)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     CWallet* const pwallet = wallet.get();\n@@ -1163,7 +1163,7 @@ static UniValue ListReceived(interfaces::Chain::Lock& locked_chain, const CWalle\n     return ret;\n }\n \n-static UniValue listreceivedbyaddress(const JSONRPCRequest& request)\n+static UniValue listreceivedbyaddress(const JSONRPCRequest& request, const NodeContext& node)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     const CWallet* const pwallet = wallet.get();\n@@ -1215,7 +1215,7 @@ static UniValue listreceivedbyaddress(const JSONRPCRequest& request)\n     return ListReceived(*locked_chain, pwallet, request.params, false);\n }\n \n-static UniValue listreceivedbylabel(const JSONRPCRequest& request)\n+static UniValue listreceivedbylabel(const JSONRPCRequest& request, const NodeContext& node)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     const CWallet* const pwallet = wallet.get();\n@@ -1377,7 +1377,7 @@ static const std::vector<RPCResult> TransactionDescriptionString()\n                \"may be unknown for unconfirmed transactions not in the mempool\"}};\n }\n \n-UniValue listtransactions(const JSONRPCRequest& request)\n+UniValue listtransactions(const JSONRPCRequest& request, const NodeContext& node)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     const CWallet* const pwallet = wallet.get();\n@@ -1491,7 +1491,7 @@ UniValue listtransactions(const JSONRPCRequest& request)\n     return result;\n }\n \n-static UniValue listsinceblock(const JSONRPCRequest& request)\n+static UniValue listsinceblock(const JSONRPCRequest& request, const NodeContext& node)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     const CWallet* const pwallet = wallet.get();\n@@ -1633,7 +1633,7 @@ static UniValue listsinceblock(const JSONRPCRequest& request)\n     return ret;\n }\n \n-static UniValue gettransaction(const JSONRPCRequest& request)\n+static UniValue gettransaction(const JSONRPCRequest& request, const NodeContext& node)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     const CWallet* const pwallet = wallet.get();\n@@ -1747,7 +1747,7 @@ static UniValue gettransaction(const JSONRPCRequest& request)\n     return entry;\n }\n \n-static UniValue abandontransaction(const JSONRPCRequest& request)\n+static UniValue abandontransaction(const JSONRPCRequest& request, const NodeContext& node)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     CWallet* const pwallet = wallet.get();\n@@ -1792,7 +1792,7 @@ static UniValue abandontransaction(const JSONRPCRequest& request)\n }\n \n \n-static UniValue backupwallet(const JSONRPCRequest& request)\n+static UniValue backupwallet(const JSONRPCRequest& request, const NodeContext& node)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     const CWallet* const pwallet = wallet.get();\n@@ -1829,7 +1829,7 @@ static UniValue backupwallet(const JSONRPCRequest& request)\n }\n \n \n-static UniValue keypoolrefill(const JSONRPCRequest& request)\n+static UniValue keypoolrefill(const JSONRPCRequest& request, const NodeContext& node)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     CWallet* const pwallet = wallet.get();\n@@ -1877,7 +1877,7 @@ static UniValue keypoolrefill(const JSONRPCRequest& request)\n }\n \n \n-static UniValue walletpassphrase(const JSONRPCRequest& request)\n+static UniValue walletpassphrase(const JSONRPCRequest& request, const NodeContext& node)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     CWallet* const pwallet = wallet.get();\n@@ -1969,7 +1969,7 @@ static UniValue walletpassphrase(const JSONRPCRequest& request)\n }\n \n \n-static UniValue walletpassphrasechange(const JSONRPCRequest& request)\n+static UniValue walletpassphrasechange(const JSONRPCRequest& request, const NodeContext& node)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     CWallet* const pwallet = wallet.get();\n@@ -2020,7 +2020,7 @@ static UniValue walletpassphrasechange(const JSONRPCRequest& request)\n }\n \n \n-static UniValue walletlock(const JSONRPCRequest& request)\n+static UniValue walletlock(const JSONRPCRequest& request, const NodeContext& node)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     CWallet* const pwallet = wallet.get();\n@@ -2061,7 +2061,7 @@ static UniValue walletlock(const JSONRPCRequest& request)\n }\n \n \n-static UniValue encryptwallet(const JSONRPCRequest& request)\n+static UniValue encryptwallet(const JSONRPCRequest& request, const NodeContext& node)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     CWallet* const pwallet = wallet.get();\n@@ -2122,7 +2122,7 @@ static UniValue encryptwallet(const JSONRPCRequest& request)\n     return \"wallet encrypted; The keypool has been flushed and a new HD seed was generated (if you are using HD). You need to make a new backup.\";\n }\n \n-static UniValue lockunspent(const JSONRPCRequest& request)\n+static UniValue lockunspent(const JSONRPCRequest& request, const NodeContext& node)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     CWallet* const pwallet = wallet.get();\n@@ -2249,7 +2249,7 @@ static UniValue lockunspent(const JSONRPCRequest& request)\n     return true;\n }\n \n-static UniValue listlockunspent(const JSONRPCRequest& request)\n+static UniValue listlockunspent(const JSONRPCRequest& request, const NodeContext& node)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     const CWallet* const pwallet = wallet.get();\n@@ -2305,7 +2305,7 @@ static UniValue listlockunspent(const JSONRPCRequest& request)\n     return ret;\n }\n \n-static UniValue settxfee(const JSONRPCRequest& request)\n+static UniValue settxfee(const JSONRPCRequest& request, const NodeContext& node)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     CWallet* const pwallet = wallet.get();\n@@ -2349,7 +2349,7 @@ static UniValue settxfee(const JSONRPCRequest& request)\n     return true;\n }\n \n-static UniValue getbalances(const JSONRPCRequest& request)\n+static UniValue getbalances(const JSONRPCRequest& request, const NodeContext& node)\n {\n     std::shared_ptr<CWallet> const rpc_wallet = GetWalletForJSONRPCRequest(request);\n     if (!EnsureWalletIsAvailable(rpc_wallet.get(), request.fHelp)) {\n@@ -2417,7 +2417,7 @@ static UniValue getbalances(const JSONRPCRequest& request)\n     return balances;\n }\n \n-static UniValue getwalletinfo(const JSONRPCRequest& request)\n+static UniValue getwalletinfo(const JSONRPCRequest& request, const NodeContext& node)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     const CWallet* const pwallet = wallet.get();\n@@ -2508,7 +2508,7 @@ static UniValue getwalletinfo(const JSONRPCRequest& request)\n     return obj;\n }\n \n-static UniValue listwalletdir(const JSONRPCRequest& request)\n+static UniValue listwalletdir(const JSONRPCRequest& request, const NodeContext& node)\n {\n             RPCHelpMan{\"listwalletdir\",\n                 \"Returns a list of wallets in the wallet directory.\\n\",\n@@ -2543,7 +2543,7 @@ static UniValue listwalletdir(const JSONRPCRequest& request)\n     return result;\n }\n \n-static UniValue listwallets(const JSONRPCRequest& request)\n+static UniValue listwallets(const JSONRPCRequest& request, const NodeContext& node)\n {\n             RPCHelpMan{\"listwallets\",\n                 \"Returns a list of currently loaded wallets.\\n\"\n@@ -2576,7 +2576,7 @@ static UniValue listwallets(const JSONRPCRequest& request)\n     return obj;\n }\n \n-static UniValue loadwallet(const JSONRPCRequest& request)\n+static UniValue loadwallet(const JSONRPCRequest& request, const NodeContext& node)\n {\n             RPCHelpMan{\"loadwallet\",\n                 \"\\nLoads a wallet from a wallet file or directory.\"\n@@ -2612,7 +2612,7 @@ static UniValue loadwallet(const JSONRPCRequest& request)\n \n     std::string error;\n     std::vector<std::string> warning;\n-    std::shared_ptr<CWallet> const wallet = LoadWallet(*g_rpc_chain, location, error, warning);\n+    std::shared_ptr<CWallet> const wallet = LoadWallet(*node.chain, location, error, warning);\n     if (!wallet) throw JSONRPCError(RPC_WALLET_ERROR, error);\n \n     UniValue obj(UniValue::VOBJ);\n@@ -2622,7 +2622,7 @@ static UniValue loadwallet(const JSONRPCRequest& request)\n     return obj;\n }\n \n-static UniValue setwalletflag(const JSONRPCRequest& request)\n+static UniValue setwalletflag(const JSONRPCRequest& request, const NodeContext& node)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     CWallet* const pwallet = wallet.get();\n@@ -2690,7 +2690,7 @@ static UniValue setwalletflag(const JSONRPCRequest& request)\n     return res;\n }\n \n-static UniValue createwallet(const JSONRPCRequest& request)\n+static UniValue createwallet(const JSONRPCRequest& request, const NodeContext& node)\n {\n     RPCHelpMan{\n         \"createwallet\",\n@@ -2740,7 +2740,7 @@ static UniValue createwallet(const JSONRPCRequest& request)\n \n     std::string error;\n     std::shared_ptr<CWallet> wallet;\n-    WalletCreationStatus status = CreateWallet(*g_rpc_chain, passphrase, flags, request.params[0].get_str(), error, warnings, wallet);\n+    WalletCreationStatus status = CreateWallet(*node.chain, passphrase, flags, request.params[0].get_str(), error, warnings, wallet);\n     switch (status) {\n         case WalletCreationStatus::CREATION_FAILED:\n             throw JSONRPCError(RPC_WALLET_ERROR, error);\n@@ -2758,7 +2758,7 @@ static UniValue createwallet(const JSONRPCRequest& request)\n     return obj;\n }\n \n-static UniValue unloadwallet(const JSONRPCRequest& request)\n+static UniValue unloadwallet(const JSONRPCRequest& request, const NodeContext& node)\n {\n             RPCHelpMan{\"unloadwallet\",\n                 \"Unloads the wallet referenced by the request endpoint otherwise unloads the wallet specified in the argument.\\n\"\n@@ -2799,7 +2799,7 @@ static UniValue unloadwallet(const JSONRPCRequest& request)\n     return NullUniValue;\n }\n \n-static UniValue listunspent(const JSONRPCRequest& request)\n+static UniValue listunspent(const JSONRPCRequest& request, const NodeContext& node)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     const CWallet* const pwallet = wallet.get();\n@@ -3133,7 +3133,7 @@ void FundTransaction(CWallet* const pwallet, CMutableTransaction& tx, CAmount& f\n     }\n }\n \n-static UniValue fundrawtransaction(const JSONRPCRequest& request)\n+static UniValue fundrawtransaction(const JSONRPCRequest& request, const NodeContext& node)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     CWallet* const pwallet = wallet.get();\n@@ -3233,7 +3233,7 @@ static UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n-UniValue signrawtransactionwithwallet(const JSONRPCRequest& request)\n+UniValue signrawtransactionwithwallet(const JSONRPCRequest& request, const NodeContext& node)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     const CWallet* const pwallet = wallet.get();\n@@ -3328,7 +3328,7 @@ UniValue signrawtransactionwithwallet(const JSONRPCRequest& request)\n     return result;\n }\n \n-static UniValue bumpfee(const JSONRPCRequest& request)\n+static UniValue bumpfee(const JSONRPCRequest& request, const NodeContext& node)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     CWallet* const pwallet = wallet.get();\n@@ -3501,7 +3501,7 @@ static UniValue bumpfee(const JSONRPCRequest& request)\n     return result;\n }\n \n-UniValue rescanblockchain(const JSONRPCRequest& request)\n+UniValue rescanblockchain(const JSONRPCRequest& request, const NodeContext& node)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     CWallet* const pwallet = wallet.get();\n@@ -3702,7 +3702,7 @@ static UniValue AddressBookDataToJSON(const CAddressBookData& data, const bool v\n     return ret;\n }\n \n-UniValue getaddressinfo(const JSONRPCRequest& request)\n+UniValue getaddressinfo(const JSONRPCRequest& request, const NodeContext& node)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     const CWallet* const pwallet = wallet.get();\n@@ -3845,7 +3845,7 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n     return ret;\n }\n \n-static UniValue getaddressesbylabel(const JSONRPCRequest& request)\n+static UniValue getaddressesbylabel(const JSONRPCRequest& request, const NodeContext& node)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     const CWallet* const pwallet = wallet.get();\n@@ -3905,7 +3905,7 @@ static UniValue getaddressesbylabel(const JSONRPCRequest& request)\n     return ret;\n }\n \n-static UniValue listlabels(const JSONRPCRequest& request)\n+static UniValue listlabels(const JSONRPCRequest& request, const NodeContext& node)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     const CWallet* const pwallet = wallet.get();\n@@ -3961,7 +3961,7 @@ static UniValue listlabels(const JSONRPCRequest& request)\n     return ret;\n }\n \n-UniValue sethdseed(const JSONRPCRequest& request)\n+UniValue sethdseed(const JSONRPCRequest& request, const NodeContext& node)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     CWallet* const pwallet = wallet.get();\n@@ -4039,7 +4039,7 @@ UniValue sethdseed(const JSONRPCRequest& request)\n     return NullUniValue;\n }\n \n-UniValue walletprocesspsbt(const JSONRPCRequest& request)\n+UniValue walletprocesspsbt(const JSONRPCRequest& request, const NodeContext& node)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     const CWallet* const pwallet = wallet.get();\n@@ -4106,7 +4106,7 @@ UniValue walletprocesspsbt(const JSONRPCRequest& request)\n     return result;\n }\n \n-UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n+UniValue walletcreatefundedpsbt(const JSONRPCRequest& request, const NodeContext& node)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     CWallet* const pwallet = wallet.get();\n@@ -4231,7 +4231,7 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n     return result;\n }\n \n-static UniValue upgradewallet(const JSONRPCRequest& request)\n+static UniValue upgradewallet(const JSONRPCRequest& request, const NodeContext& node)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     CWallet* const pwallet = wallet.get();\n@@ -4270,16 +4270,16 @@ static UniValue upgradewallet(const JSONRPCRequest& request)\n     return error;\n }\n \n-UniValue abortrescan(const JSONRPCRequest& request); // in rpcdump.cpp\n-UniValue dumpprivkey(const JSONRPCRequest& request); // in rpcdump.cpp\n-UniValue importprivkey(const JSONRPCRequest& request);\n-UniValue importaddress(const JSONRPCRequest& request);\n-UniValue importpubkey(const JSONRPCRequest& request);\n-UniValue dumpwallet(const JSONRPCRequest& request);\n-UniValue importwallet(const JSONRPCRequest& request);\n-UniValue importprunedfunds(const JSONRPCRequest& request);\n-UniValue removeprunedfunds(const JSONRPCRequest& request);\n-UniValue importmulti(const JSONRPCRequest& request);\n+UniValue abortrescan(const JSONRPCRequest& request, const NodeContext& node); // in rpcdump.cpp\n+UniValue dumpprivkey(const JSONRPCRequest& request, const NodeContext& node); // in rpcdump.cpp\n+UniValue importprivkey(const JSONRPCRequest& request, const NodeContext& node);\n+UniValue importaddress(const JSONRPCRequest& request, const NodeContext& node);\n+UniValue importpubkey(const JSONRPCRequest& request, const NodeContext& node);\n+UniValue dumpwallet(const JSONRPCRequest& request, const NodeContext& node);\n+UniValue importwallet(const JSONRPCRequest& request, const NodeContext& node);\n+UniValue importprunedfunds(const JSONRPCRequest& request, const NodeContext& node);\n+UniValue removeprunedfunds(const JSONRPCRequest& request, const NodeContext& node);\n+UniValue importmulti(const JSONRPCRequest& request, const NodeContext& node);\n \n void RegisterWalletRPCCommands(interfaces::Chain& chain, std::vector<std::unique_ptr<interfaces::Handler>>& handlers)\n {\n@@ -4351,4 +4351,3 @@ static const CRPCCommand commands[] =\n         handlers.emplace_back(chain.handleRpc(commands[vcidx]));\n }\n \n-interfaces::Chain* g_rpc_chain = nullptr;"
      },
      {
        "sha": "f508d151357cd14cad2bd794789e4f464eb81932",
        "filename": "src/wallet/rpcwallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 8,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca4dba21337ff196fef2a47e29ae92f2c57ce1ad/src/wallet/rpcwallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca4dba21337ff196fef2a47e29ae92f2c57ce1ad/src/wallet/rpcwallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.h?ref=ca4dba21337ff196fef2a47e29ae92f2c57ce1ad",
        "patch": "@@ -6,6 +6,7 @@\n #define BITCOIN_WALLET_RPCWALLET_H\n \n #include <memory>\n+#include <node/context.h>\n #include <string>\n #include <vector>\n \n@@ -22,12 +23,6 @@ class Chain;\n class Handler;\n }\n \n-//! Pointer to chain interface that needs to be declared as a global to be\n-//! accessible loadwallet and createwallet methods. Due to limitations of the\n-//! RPC framework, there's currently no direct way to pass in state to RPC\n-//! methods without globals.\n-extern interfaces::Chain* g_rpc_chain;\n-\n void RegisterWalletRPCCommands(interfaces::Chain& chain, std::vector<std::unique_ptr<interfaces::Handler>>& handlers);\n \n /**\n@@ -42,6 +37,6 @@ void EnsureWalletIsUnlocked(const CWallet*);\n bool EnsureWalletIsAvailable(const CWallet*, bool avoidException);\n LegacyScriptPubKeyMan& EnsureLegacyScriptPubKeyMan(CWallet& wallet, bool also_create = false);\n \n-UniValue getaddressinfo(const JSONRPCRequest& request);\n-UniValue signrawtransactionwithwallet(const JSONRPCRequest& request);\n+UniValue getaddressinfo(const JSONRPCRequest& request, const NodeContext* prpc_node);\n+UniValue signrawtransactionwithwallet(const JSONRPCRequest& request, const NodeContext* prpc_node);\n #endif //BITCOIN_WALLET_RPCWALLET_H"
      },
      {
        "sha": "4044fdb4b54171c48fcbe81ee6ebfdff6d32e7cc",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca4dba21337ff196fef2a47e29ae92f2c57ce1ad/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca4dba21337ff196fef2a47e29ae92f2c57ce1ad/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=ca4dba21337ff196fef2a47e29ae92f2c57ce1ad",
        "patch": "@@ -20,9 +20,9 @@\n #include <boost/test/unit_test.hpp>\n #include <univalue.h>\n \n-extern UniValue importmulti(const JSONRPCRequest& request);\n-extern UniValue dumpwallet(const JSONRPCRequest& request);\n-extern UniValue importwallet(const JSONRPCRequest& request);\n+extern UniValue importmulti(const JSONRPCRequest& request, const NodeContext& node);\n+extern UniValue dumpwallet(const JSONRPCRequest& request, const NodeContext& node);\n+extern UniValue importwallet(const JSONRPCRequest& request, const NodeContext& node);\n \n BOOST_FIXTURE_TEST_SUITE(wallet_tests, WalletTestingSetup)\n \n@@ -174,7 +174,7 @@ BOOST_FIXTURE_TEST_CASE(importmulti_rescan, TestChain100Setup)\n         request.params.setArray();\n         request.params.push_back(keys);\n \n-        UniValue response = importmulti(request);\n+        UniValue response = importmulti(request, node);\n         BOOST_CHECK_EQUAL(response.write(),\n             strprintf(\"[{\\\"success\\\":false,\\\"error\\\":{\\\"code\\\":-1,\\\"message\\\":\\\"Rescan failed for key with creation \"\n                       \"timestamp %d. There was an error reading a block from time %d, which is after or within %d \"\n@@ -227,7 +227,7 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n         request.params.push_back(backup_file);\n         AddWallet(wallet);\n         wallet->SetLastBlockProcessed(::ChainActive().Height(), ::ChainActive().Tip()->GetBlockHash());\n-        ::dumpwallet(request);\n+        ::dumpwallet(request, node);\n         RemoveWallet(wallet);\n     }\n \n@@ -243,7 +243,7 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n         request.params.push_back(backup_file);\n         AddWallet(wallet);\n         wallet->SetLastBlockProcessed(::ChainActive().Height(), ::ChainActive().Tip()->GetBlockHash());\n-        ::importwallet(request);\n+        ::importwallet(request, node);\n         RemoveWallet(wallet);\n \n         BOOST_CHECK_EQUAL(wallet->mapWallet.size(), 3U);"
      },
      {
        "sha": "f385a59ced1ea1dbe35952d80aa8a79e464a237f",
        "filename": "src/zmq/zmqrpc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca4dba21337ff196fef2a47e29ae92f2c57ce1ad/src/zmq/zmqrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca4dba21337ff196fef2a47e29ae92f2c57ce1ad/src/zmq/zmqrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqrpc.cpp?ref=ca4dba21337ff196fef2a47e29ae92f2c57ce1ad",
        "patch": "@@ -13,7 +13,7 @@\n \n namespace {\n \n-UniValue getzmqnotifications(const JSONRPCRequest& request)\n+UniValue getzmqnotifications(const JSONRPCRequest& request, const NodeContext& node)\n {\n             RPCHelpMan{\"getzmqnotifications\",\n                 \"\\nReturns information about the active ZeroMQ notifications.\\n\","
      }
    ]
  }
]