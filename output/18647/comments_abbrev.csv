practicalswift,2020-04-15 10:39:50,"Concept ACK on fixing #17548\n\nThanks for tackling this issue!",https://github.com/bitcoin/bitcoin/pull/18647#issuecomment-613961712,613961712,
ryanofsky,2020-04-15 14:02:36,"Few thoughts:\n\n* This changes rpc method signature every every method from `UniValue(const JSONRPCRequest&)` by adding NodeContext parameter, but Marco's #18531 is already changing method signatures a different way. You should work with Marco to come up with signature for rpc methods that doesn't conflict\n* This PR doesn't actually get rid of the `g_rpc_node` variable, just a handful of uses",https://github.com/bitcoin/bitcoin/pull/18647#issuecomment-614059391,614059391,
MarcoFalke,2020-04-15 14:21:48,"#18531 Doesn't change how RPC methods are dispatched, but it wraps them into an RPCMan. Assuming my pull makes it in first, it is going to reduce the diff of this pull significantly. Though, when `JSONRPCRequest` is used to pass in context, the two pulls should not conflict at all.",https://github.com/bitcoin/bitcoin/pull/18647#issuecomment-614069686,614069686,
brakmic,2020-04-15 14:23:05,"Hi @ryanofsky, and many thanks!\n\n> Few thoughts:\n> \n> * This changes rpc method signature every every method from `UniValue(const JSONRPCRequest&)` by adding NodeContext parameter, but Marco's #18531 is already changing method signatures a different way. You should work with Marco to come up with signature for rpc methods that doesn't conflict\n\nDidn't know about that.  Could not find a",https://github.com/bitcoin/bitcoin/pull/18647#issuecomment-614070351,614070351,
DrahtBot,2020-04-15 14:32:29,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18699 (wallet: Avoid translating RPC errors by MarcoFalke)\n* #18698 (Make g_chainman internal to validation by MarcoFalk",https://github.com/bitcoin/bitcoin/pull/18647#issuecomment-614075590,614075590,
ryanofsky,2020-04-15 15:28:45,"> I never wanted to get rid of it, only make it:\n> \n> * **const ref**\n\nI don't think the the const part is good. RPC methods can start/stop the node, initiate connections, load wallets, so I don't think they should be prevented from changing all context members that exist now and all new context members we may add in the future.\n\n> * forwarded to actors directly and in one place (and n",https://github.com/bitcoin/bitcoin/pull/18647#issuecomment-614108634,614108634,
brakmic,2020-04-15 15:32:53,"> > I never wanted to get rid of it, only make it:\n> > \n> > * **const ref**\n> \n> I don't think the the const part is good. RPC methods can start/stop the node, initiate connections, load wallets, so I don't think they should be prevented from changing all context members that exist now and all new context members we may add in the future.\n> \n\nWell, then I think we should have differe",https://github.com/bitcoin/bitcoin/pull/18647#issuecomment-614111139,614111139,
ryanofsky,2020-04-15 15:40:02,"> Well, then I think we should need different variant of contexts.\n\nIt would be good to elaborate on the problem being solved in the PR description. It seems to have something to do with data data hiding, but specifics are unclear. \n\nI think the goal of #17548 is remove the global variable, though, so I wouldn't say this fixes that issue, even though it could help",https://github.com/bitcoin/bitcoin/pull/18647#issuecomment-614115427,614115427,
brakmic,2020-04-15 15:43:46,"> > Well, then I think we should need different variant of contexts.\n> \n> It would be good to elaborate on the problem being solved in the PR description. It seems to have something to do with data data hiding, but specifics are unclear.\n> \n> I think the goal of #17548 is remove the global variable, though, so I wouldn't say this fixes that issue, even though it could help\n\nYes, of cou",https://github.com/bitcoin/bitcoin/pull/18647#issuecomment-614117585,614117585,
brakmic,2020-04-22 11:54:02,"> Instead of changing all RPC handlers I think you could override `CRPCCommand` constructor to take\n> a `UniValue (*rpcfn_type)(const JSONRPCRequest& jsonRequest)`. The same approach can be done in Marco PR, `RPCMan` can take different method signatures.\n\nYes, this approach would be less invasive. Maybe I could rebase after Marco's PR gets merged? ",https://github.com/bitcoin/bitcoin/pull/18647#issuecomment-617731473,617731473,
ryanofsky,2020-04-22 16:15:10,"I really appreciate the effort here, but I don't think this PR is teneble, and I have a simpler alternative in #18740. This PR is too wide in scope changing things that don't need to be changed, and is accessing node context in places that will make changes we do want more difficult. Specifically this PR is:\n\n- Making spurious changes to httpserver which aren't necessary because it already sup",https://github.com/bitcoin/bitcoin/pull/18647#issuecomment-617878826,617878826,
brakmic,2020-04-22 16:49:03,"Hi @ryanofsky \n\n> I really appreciate the effort here, but I don't think this PR is teneble, and I have a simpler alternative in #18740. \n\nSimpler is very often better!\n\n> This PR is too wide in scope changing things that don't need to be changed, and is accessing > node context in places that will make changes we do want more difficult. \n\nThis indeed is the case, but mostly becaus",https://github.com/bitcoin/bitcoin/pull/18647#issuecomment-617898847,617898847,
