gmaxwell,2017-06-28T04:20:54Z,"> ""ES.20: Always initialize an object"" \n\nI disagree.  Adding superfluous initialization can conceal real bugs when it prevents valgrind and MSAN from seeing code accessing uninitialized memory because it's been filled with dummy data.  This isn't a hypothetical concern-- I've both seen errors caught this way, and real errors hidden by excess initialization.\n\nIf the initialization the appro",https://github.com/bitcoin/bitcoin/pull/10686#issuecomment-311552618,311552618,
practicalswift,2017-06-28T10:19:02Z,"@gmaxwell You have a good point there with regards to discovering issues via valgrind and MSAN. (Perhaps worth adding as an counter-argument/exception to ES.20 in the C++ Core Guidelines?)\n\nIn this specific case with these six changes - are there such risks associated with any of the changes introduced here? Let me know if so and I'll skip any such change.",https://github.com/bitcoin/bitcoin/pull/10686#issuecomment-311618903,311618903,
meshcollider,2017-06-28T13:30:39Z,"From what I can see, the specific changes here should be fine, I believe it was more of a general note (which I do agree with).",https://github.com/bitcoin/bitcoin/pull/10686#issuecomment-311660383,311660383,
laanwj,2017-06-28T13:46:11Z,"> In this specific case with these six changes - are there such risks associated with any of the changes introduced here? Let me know if so and I'll skip any such change.\n\nThere are always risks associated with changes. Especially in consensus-critical code we should thus not make unnecessary ones.",https://github.com/bitcoin/bitcoin/pull/10686#issuecomment-311664561,311664561,
practicalswift,2017-06-28T15:42:23Z,@laanwj Is there any of these six changes that touches on consensus-critical code and should be considered unnecessary? Let me know and I'll exclude from this PR :-),https://github.com/bitcoin/bitcoin/pull/10686#issuecomment-311700436,311700436,
sipa,2017-06-28T15:43:38Z,"I think none of the changes here on themselves are risky, but all of them hide potential future bugs.",https://github.com/bitcoin/bitcoin/pull/10686#issuecomment-311700819,311700819,
practicalswift,2017-07-03T15:13:53Z,"Thanks for reviewing and thanks for some insightful comments with regards to early initialization potentially hiding issues from runtime detection of code accessing uninitialized memory (when using say `valgrind` or MSAN).\n\nThe consensus is a clear NACK with regards to early initialization, so I'll close this PR.\n\nI'll create a separate PR with with the non-initialization change: switching",https://github.com/bitcoin/bitcoin/pull/10686#issuecomment-312672400,312672400,
sipa,2017-06-28T00:15:32Z,Why?,https://github.com/bitcoin/bitcoin/pull/10686#discussion_r124427552,124427552,src/bench/base58.cpp
practicalswift,2017-06-28T00:19:39Z,"@sipa To get rid of `clang-tidy`, Clang Static Analyzer and other static analyser warnings along the lines of:\n```c++\nbench/base58.cpp:23:9: warning: Function call argument is a pointer to uninitialized value [clang-analyzer-core.CallAndMessage]\n```\n\n",https://github.com/bitcoin/bitcoin/pull/10686#discussion_r124427995,124427995,src/bench/base58.cpp
sipa,2017-06-28T00:21:31Z,That seems overly pedantic...,https://github.com/bitcoin/bitcoin/pull/10686#discussion_r124428189,124428189,src/bench/base58.cpp
meshcollider,2017-06-28T02:00:13Z,Is that because b+32 is passed to the EncodeBase58 function and clang thinks the function might use it?,https://github.com/bitcoin/bitcoin/pull/10686#discussion_r124437559,124437559,src/bench/base58.cpp
sipa,2017-06-28T02:01:56Z,"It's perfectly legal to use a pointer that points one past the end of an object (and the function does). You can't dereference it, though.",https://github.com/bitcoin/bitcoin/pull/10686#discussion_r124437694,124437694,src/bench/base58.cpp
meshcollider,2017-06-28T02:03:10Z,"Yeah but is that the only reason clang is giving that warning? I agree that it would be pedantic to add an extra element to the array just to get rid of that warning, seems very hacky",https://github.com/bitcoin/bitcoin/pull/10686#discussion_r124437795,124437795,src/bench/base58.cpp
theuni,2017-06-28T02:26:38Z,"If we're going to change this for pedantic correctness (which I'm not arguing for), I'd 100x rather make this a ```std::array<unsigned char, 32>``` and iterate properly.",https://github.com/bitcoin/bitcoin/pull/10686#discussion_r124440099,124440099,src/bench/base58.cpp
practicalswift,2017-06-28T07:36:31Z,"Now using `std::array<unsigned char, 32>`. Both `clang-tidy` and Clang Static Analyzer are now happy :-)",https://github.com/bitcoin/bitcoin/pull/10686#discussion_r124470712,124470712,src/bench/base58.cpp
