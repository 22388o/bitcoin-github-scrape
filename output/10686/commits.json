[
  {
    "sha": "0447039f7ee538b6c547ea36daac4b181924d95e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNDQ3MDM5ZjdlZTUzOGI2YzU0N2VhMzZkYWFjNGIxODE5MjRkOTVl",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-06-27T21:59:21Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-06-28T07:23:16Z"
      },
      "message": "Avoid usage of uninitialized values in function call arguments\n\nRationale:\n> Avoid used-before-set errors and their associated undefined behavior. Avoid problems with comprehension of complex initialization. Simplify refactoring.\n\nFor a more thorough discussion, see [\"ES.20: Always initialize an object\"](https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#es20-always-initialize-an-object) in the C++ Core Guidelines (Stroustrup & Sutter).",
      "tree": {
        "sha": "ff8a54dc7ef52d327681223b9f2a4ad60e4ea92e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ff8a54dc7ef52d327681223b9f2a4ad60e4ea92e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0447039f7ee538b6c547ea36daac4b181924d95e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0447039f7ee538b6c547ea36daac4b181924d95e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0447039f7ee538b6c547ea36daac4b181924d95e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0447039f7ee538b6c547ea36daac4b181924d95e/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "234ffc677ee58591b139695bf92bbd6f504ee91a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/234ffc677ee58591b139695bf92bbd6f504ee91a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/234ffc677ee58591b139695bf92bbd6f504ee91a"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 26,
      "deletions": 20
    },
    "files": [
      {
        "sha": "f1cde75dfdc88f53f50a03fc3a3bc3e3c7089862",
        "filename": "src/bench/base58.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 12,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0447039f7ee538b6c547ea36daac4b181924d95e/src/bench/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0447039f7ee538b6c547ea36daac4b181924d95e/src/bench/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/base58.cpp?ref=0447039f7ee538b6c547ea36daac4b181924d95e",
        "patch": "@@ -13,28 +13,30 @@\n \n static void Base58Encode(benchmark::State& state)\n {\n-    unsigned char buff[32] = {\n-        17, 79, 8, 99, 150, 189, 208, 162, 22, 23, 203, 163, 36, 58, 147,\n-        227, 139, 2, 215, 100, 91, 38, 11, 141, 253, 40, 117, 21, 16, 90,\n-        200, 24\n+    std::array<unsigned char, 32> buff = {\n+        {\n+            17, 79, 8, 99, 150, 189, 208, 162, 22, 23, 203, 163, 36, 58, 147,\n+            227, 139, 2, 215, 100, 91, 38, 11, 141, 253, 40, 117, 21, 16, 90,\n+            200, 24\n+        }\n     };\n-    unsigned char* b = buff;\n     while (state.KeepRunning()) {\n-        EncodeBase58(b, b + 32);\n+        EncodeBase58(buff.begin(), buff.end());\n     }\n }\n \n \n static void Base58CheckEncode(benchmark::State& state)\n {\n-    unsigned char buff[32] = {\n-        17, 79, 8, 99, 150, 189, 208, 162, 22, 23, 203, 163, 36, 58, 147,\n-        227, 139, 2, 215, 100, 91, 38, 11, 141, 253, 40, 117, 21, 16, 90,\n-        200, 24\n+    std::array<unsigned char, 32> buff = {\n+        {\n+            17, 79, 8, 99, 150, 189, 208, 162, 22, 23, 203, 163, 36, 58, 147,\n+            227, 139, 2, 215, 100, 91, 38, 11, 141, 253, 40, 117, 21, 16, 90,\n+            200, 24\n+        }\n     };\n-    unsigned char* b = buff;\n     std::vector<unsigned char> vch;\n-    vch.assign(b, b + 32);\n+    vch.assign(buff.begin(), buff.end());\n     while (state.KeepRunning()) {\n         EncodeBase58Check(vch);\n     }"
      },
      {
        "sha": "9807c4a2d2c9f3c2e7c10788818fb179964494d6",
        "filename": "src/bench/verify_script.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0447039f7ee538b6c547ea36daac4b181924d95e/src/bench/verify_script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0447039f7ee538b6c547ea36daac4b181924d95e/src/bench/verify_script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/verify_script.cpp?ref=0447039f7ee538b6c547ea36daac4b181924d95e",
        "patch": "@@ -55,8 +55,12 @@ static void VerifyScriptBench(benchmark::State& state)\n \n     // Keypair.\n     CKey key;\n-    const unsigned char vchKey[32] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1};\n-    key.Set(vchKey, vchKey + 32, false);\n+    std::array<unsigned char, 32> vchKey = {\n+        {\n+            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1\n+        }\n+    };\n+    key.Set(vchKey.begin(), vchKey.end(), false);\n     CPubKey pubkey = key.GetPubKey();\n     uint160 pubkeyHash;\n     CHash160().Write(pubkey.begin(), pubkey.size()).Finalize(pubkeyHash.begin());"
      },
      {
        "sha": "9264c39c8a96917c9b659a2d35930fb835db74e7",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0447039f7ee538b6c547ea36daac4b181924d95e/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0447039f7ee538b6c547ea36daac4b181924d95e/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=0447039f7ee538b6c547ea36daac4b181924d95e",
        "patch": "@@ -157,7 +157,7 @@ static void RegisterLoad(const std::string& strInput)\n     // load file chunks into one big buffer\n     std::string valStr;\n     while ((!feof(f)) && (!ferror(f))) {\n-        char buf[4096];\n+        char buf[4096] = {};\n         int bread = fread(buf, 1, sizeof(buf), f);\n         if (bread <= 0)\n             break;\n@@ -747,7 +747,7 @@ static void OutputTx(const CTransaction& tx)\n \n static std::string readStdin()\n {\n-    char buf[4096];\n+    char buf[4096] = {};\n     std::string ret;\n \n     while (!feof(stdin)) {"
      },
      {
        "sha": "8f261f719ecfb7df225a3dbadd4d3c439d628458",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0447039f7ee538b6c547ea36daac4b181924d95e/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0447039f7ee538b6c547ea36daac4b181924d95e/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=0447039f7ee538b6c547ea36daac4b181924d95e",
        "patch": "@@ -1012,7 +1012,7 @@ bool CConnman::AttemptToEvictConnection()\n \n     // Identify the network group with the most connections and youngest member.\n     // (vEvictionCandidates is already sorted by reverse connect time)\n-    uint64_t naMostConnections;\n+    uint64_t naMostConnections = 0;\n     unsigned int nMostConnections = 0;\n     int64_t nMostConnectionsTime = 0;\n     std::map<uint64_t, std::vector<NodeEvictionCandidate> > mapNetGroupNodes;"
      },
      {
        "sha": "097181d7f02c14fc008a68ebfd65a4848e08a65c",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0447039f7ee538b6c547ea36daac4b181924d95e/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0447039f7ee538b6c547ea36daac4b181924d95e/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=0447039f7ee538b6c547ea36daac4b181924d95e",
        "patch": "@@ -275,7 +275,7 @@ class CCoins\n     void Unserialize(Stream &s) {\n         unsigned int nCode = 0;\n         // version\n-        int nVersionDummy;\n+        int nVersionDummy = 0;\n         ::Unserialize(s, VARINT(nVersionDummy));\n         // header code\n         ::Unserialize(s, VARINT(nCode));"
      },
      {
        "sha": "7cdd108095f474af59bc8b84f5e3f7c840737852",
        "filename": "src/wallet/test/crypto_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0447039f7ee538b6c547ea36daac4b181924d95e/src/wallet/test/crypto_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0447039f7ee538b6c547ea36daac4b181924d95e/src/wallet/test/crypto_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/crypto_tests.cpp?ref=0447039f7ee538b6c547ea36daac4b181924d95e",
        "patch": "@@ -96,8 +96,8 @@ static void TestPassphraseSingle(const std::vector<unsigned char>& vchSalt, cons\n                  const std::vector<unsigned char>& correctKey = std::vector<unsigned char>(),\n                  const std::vector<unsigned char>& correctIV=std::vector<unsigned char>())\n {\n-    unsigned char chKey[WALLET_CRYPTO_KEY_SIZE];\n-    unsigned char chIV[WALLET_CRYPTO_IV_SIZE];\n+    unsigned char chKey[WALLET_CRYPTO_KEY_SIZE] = {};\n+    unsigned char chIV[WALLET_CRYPTO_IV_SIZE] = {};\n \n     CCrypter crypt;\n     crypt.SetKeyFromPassphrase(passphrase, vchSalt, rounds, 0);"
      }
    ]
  }
]