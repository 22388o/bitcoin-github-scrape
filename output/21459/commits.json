[
  {
    "sha": "1fe6aba782c60bc92d8911a116f66eff2ebfe535",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZmU2YWJhNzgyYzYwYmM5MmQ4OTExYTExNmY2NmVmZjJlYmZlNTM1",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2021-03-17T15:05:36Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2021-03-17T15:06:22Z"
      },
      "message": "build: Add convenient BITCOIN_TRY_ADD_COMPILE_FLAG macro\n\nThis change allows to type a flag, and a *CXXFLAGS variable once only\non each macro invocation.\n\nNo behavior change.",
      "tree": {
        "sha": "7fcd2f1234b3075f5b7135249616f9a02912bb7a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7fcd2f1234b3075f5b7135249616f9a02912bb7a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1fe6aba782c60bc92d8911a116f66eff2ebfe535",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAmBSGu4ACgkQQQEIES5+\nqB/84hAAt0enxn/D7i2wzBus2/O1lEyKC9wV4Q5nc0sGQUdEhdTNNHN2EW0B3EH3\nrANQEbYtmcghwZhqRRpitzmS9pcJXX0auzHtLF2Z7bOBZDpKe/eof7vzMYUG423X\nUMzAHtCl3G4s4QgUT7qgCzCwxWHizDqqId0Pdlc/jjKyWuvMIMG4S/up+lKOZvhD\nVV+TVRxVXTE8I5JhqiNTlJPzlGpJKd0uBXR9X9ZlyQzs5XEuI5vXTFmEjURvGl8h\nJJxWQkkvYT6FMi8gITARIJ4kXsXv90ysL4DNo/EdmdLs8aF5GjCNSj6x5Fs91sVE\nqn12Agfw+zKyv/MvmGNG3JdaRAl3kuUD7cO7M6PUp//sIZy1U2miYN+ZXYL4cOIw\napMzAvtSXzHZya63ck6PvKDplip5p7wuD3ZVR64D4Xb95pgPnnqr6uAIq8z8HrH/\nP1nFeRNd0C2O5HmyazoBUEkJc64pEKfT+MPwURKDVETyo+IvuMgDFVL3u6U3rcI1\no0dZSR8WUdlr3qw6MMzCHXgEBsuWABRHAUO4CLTdSALfn5NXw6rTe5iOO/adtYJ7\nd8k2wNXDkpNUgYziqZJKwaxyeZeMkhFxKvdeIYygDkhUYn0ngJS2DHys6KcB5RTc\n0h4bPJqxZe3jsnALMSn0mE7bLZm01VbqmyvoGFuuXi+/9nzTp4Y=\n=N25z\n-----END PGP SIGNATURE-----",
        "payload": "tree 7fcd2f1234b3075f5b7135249616f9a02912bb7a\nparent a9d1b40d53ec417eefbe767aa66701ef8e1801d5\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1615993536 +0200\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1615993582 +0200\n\nbuild: Add convenient BITCOIN_TRY_ADD_COMPILE_FLAG macro\n\nThis change allows to type a flag, and a *CXXFLAGS variable once only\non each macro invocation.\n\nNo behavior change.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1fe6aba782c60bc92d8911a116f66eff2ebfe535",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1fe6aba782c60bc92d8911a116f66eff2ebfe535",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1fe6aba782c60bc92d8911a116f66eff2ebfe535/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a9d1b40d53ec417eefbe767aa66701ef8e1801d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9d1b40d53ec417eefbe767aa66701ef8e1801d5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a9d1b40d53ec417eefbe767aa66701ef8e1801d5"
      }
    ],
    "stats": {
      "total": 98,
      "additions": 53,
      "deletions": 45
    },
    "files": [
      {
        "sha": "986344b30ad6c9025f8d879c534167c969ec1fbb",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 53,
        "deletions": 45,
        "changes": 98,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1fe6aba782c60bc92d8911a116f66eff2ebfe535/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1fe6aba782c60bc92d8911a116f66eff2ebfe535/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=1fe6aba782c60bc92d8911a116f66eff2ebfe535",
        "patch": "@@ -354,6 +354,14 @@ dnl warning about something unrelated, for example about some path issue. If tha\n dnl -Werror cannot be used because all of those warnings would be turned into errors.\n AX_CHECK_COMPILE_FLAG([-Werror],[CXXFLAG_WERROR=\"-Werror\"],[CXXFLAG_WERROR=\"\"])\n \n+dnl A wrapper around AX_CHECK_COMPILE_FLAG, useful in most cases.\n+dnl\n+dnl BITCOIN_TRY_ADD_COMPILE_FLAG(FLAG, COMPILER_FLAGS, [INPUT])\n+dnl -----------------------------------------------------------\n+dnl\n+AC_DEFUN([BITCOIN_TRY_ADD_COMPILE_FLAG],\n+         [AX_CHECK_COMPILE_FLAG([$1], [$2=\"$$2 $1\"], [], [$CXXFLAG_WERROR], [$3])])\n+\n dnl Check for a flag to turn linker warnings into errors. When flags are passed to linkers via the\n dnl compiler driver using a -Wl,-foo flag, linker warnings may be swallowed rather than bubbling up.\n dnl See note above, the same applies here as well.\n@@ -387,7 +395,7 @@ if test \"x$enable_debug\" = xyes; then\n   AX_CHECK_PREPROC_FLAG([-DDEBUG],[[DEBUG_CPPFLAGS=\"$DEBUG_CPPFLAGS -DDEBUG\"]],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_PREPROC_FLAG([-DDEBUG_LOCKORDER],[[DEBUG_CPPFLAGS=\"$DEBUG_CPPFLAGS -DDEBUG_LOCKORDER\"]],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_PREPROC_FLAG([-DABORT_ON_FAILED_ASSUME],[[DEBUG_CPPFLAGS=\"$DEBUG_CPPFLAGS -DABORT_ON_FAILED_ASSUME\"]],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-ftrapv],[DEBUG_CXXFLAGS=\"$DEBUG_CXXFLAGS -ftrapv\"],,[[$CXXFLAG_WERROR]])\n+  BITCOIN_TRY_ADD_COMPILE_FLAG([-ftrapv], [DEBUG_CXXFLAGS])\n fi\n \n if test x$use_sanitizers != x; then\n@@ -422,63 +430,63 @@ if test \"x$enable_werror\" = \"xyes\"; then\n   if test \"x$CXXFLAG_WERROR\" = \"x\"; then\n     AC_MSG_ERROR(\"enable-werror set but -Werror is not usable\")\n   fi\n-  AX_CHECK_COMPILE_FLAG([-Werror=gnu],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=gnu\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Werror=vla],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=vla\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Werror=shadow-field],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=shadow-field\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Werror=switch],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=switch\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Werror=thread-safety],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=thread-safety\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Werror=range-loop-analysis],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=range-loop-analysis\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Werror=unused-variable],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=unused-variable\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Werror=date-time],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=date-time\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Werror=return-type],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=return-type\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Werror=conditional-uninitialized],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=conditional-uninitialized\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Werror=sign-compare],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=sign-compare\"],,[[$CXXFLAG_WERROR]])\n+  BITCOIN_TRY_ADD_COMPILE_FLAG([-Werror=gnu], [ERROR_CXXFLAGS])\n+  BITCOIN_TRY_ADD_COMPILE_FLAG([-Werror=vla], [ERROR_CXXFLAGS])\n+  BITCOIN_TRY_ADD_COMPILE_FLAG([-Werror=shadow-field], [ERROR_CXXFLAGS])\n+  BITCOIN_TRY_ADD_COMPILE_FLAG([-Werror=switch], [ERROR_CXXFLAGS])\n+  BITCOIN_TRY_ADD_COMPILE_FLAG([-Werror=thread-safety], [ERROR_CXXFLAGS])\n+  BITCOIN_TRY_ADD_COMPILE_FLAG([-Werror=range-loop-analysis], [ERROR_CXXFLAGS])\n+  BITCOIN_TRY_ADD_COMPILE_FLAG([-Werror=unused-variable], [ERROR_CXXFLAGS])\n+  BITCOIN_TRY_ADD_COMPILE_FLAG([-Werror=date-time], [ERROR_CXXFLAGS])\n+  BITCOIN_TRY_ADD_COMPILE_FLAG([-Werror=return-type], [ERROR_CXXFLAGS])\n+  BITCOIN_TRY_ADD_COMPILE_FLAG([-Werror=conditional-uninitialized], [ERROR_CXXFLAGS])\n+  BITCOIN_TRY_ADD_COMPILE_FLAG([-Werror=sign-compare], [ERROR_CXXFLAGS])\n   dnl -Wsuggest-override is broken with GCC before 9.2\n   dnl https://gcc.gnu.org/bugzilla/show_bug.cgi?id=78010\n-  AX_CHECK_COMPILE_FLAG([-Werror=suggest-override],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=suggest-override\"],,[[$CXXFLAG_WERROR]],\n-                        [AC_LANG_SOURCE([[struct A { virtual void f(); }; struct B : A { void f() final; };]])])\n-  AX_CHECK_COMPILE_FLAG([-Werror=unreachable-code-loop-increment],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=unreachable-code-loop-increment\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Werror=mismatched-tags], [ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=mismatched-tags\"], [], [$CXXFLAG_WERROR])\n+  BITCOIN_TRY_ADD_COMPILE_FLAG([-Werror=suggest-override], [ERROR_CXXFLAGS],\n+                               [AC_LANG_SOURCE([[struct A { virtual void f(); }; struct B : A { void f() final; };]])])\n+  BITCOIN_TRY_ADD_COMPILE_FLAG([-Werror=unreachable-code-loop-increment], [ERROR_CXXFLAGS])\n+  BITCOIN_TRY_ADD_COMPILE_FLAG([-Werror=mismatched-tags], [ERROR_CXXFLAGS])\n fi\n \n if test \"x$CXXFLAGS_overridden\" = \"xno\"; then\n-  AX_CHECK_COMPILE_FLAG([-Wall],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wall\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Wextra],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wextra\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Wgnu],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wgnu\"],,[[$CXXFLAG_WERROR]])\n+  BITCOIN_TRY_ADD_COMPILE_FLAG([-Wall], [WARN_CXXFLAGS])\n+  BITCOIN_TRY_ADD_COMPILE_FLAG([-Wextra], [WARN_CXXFLAGS])\n+  BITCOIN_TRY_ADD_COMPILE_FLAG([-Wgnu], [WARN_CXXFLAGS])\n   dnl some compilers will ignore -Wformat-security without -Wformat, so just combine the two here.\n-  AX_CHECK_COMPILE_FLAG([-Wformat -Wformat-security],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wformat -Wformat-security\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Wvla],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wvla\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Wshadow-field],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wshadow-field\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Wswitch],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wswitch\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Wthread-safety],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wthread-safety\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Wrange-loop-analysis],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wrange-loop-analysis\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Wredundant-decls],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wredundant-decls\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Wunused-variable],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wunused-variable\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Wunused-member-function],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wunused-member-function\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Wdate-time],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wdate-time\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Wconditional-uninitialized],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wconditional-uninitialized\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Wsign-compare],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wsign-compare\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Wduplicated-branches],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wduplicated-branches\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Wduplicated-cond],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wduplicated-cond\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Wlogical-op],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wlogical-op\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Woverloaded-virtual],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Woverloaded-virtual\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Wsuggest-override],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wsuggest-override\"],,[[$CXXFLAG_WERROR]],\n-                        [AC_LANG_SOURCE([[struct A { virtual void f(); }; struct B : A { void f() final; };]])])\n-  AX_CHECK_COMPILE_FLAG([-Wunreachable-code-loop-increment],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wunreachable-code-loop-increment\"],,[[$CXXFLAG_WERROR]])\n+  BITCOIN_TRY_ADD_COMPILE_FLAG([-Wformat -Wformat-security], [WARN_CXXFLAGS])\n+  BITCOIN_TRY_ADD_COMPILE_FLAG([-Wvla], [WARN_CXXFLAGS])\n+  BITCOIN_TRY_ADD_COMPILE_FLAG([-Wshadow-field], [WARN_CXXFLAGS])\n+  BITCOIN_TRY_ADD_COMPILE_FLAG([-Wswitch], [WARN_CXXFLAGS])\n+  BITCOIN_TRY_ADD_COMPILE_FLAG([-Wthread-safety], [WARN_CXXFLAGS])\n+  BITCOIN_TRY_ADD_COMPILE_FLAG([-Wrange-loop-analysis], [WARN_CXXFLAGS])\n+  BITCOIN_TRY_ADD_COMPILE_FLAG([-Wredundant-decls], [WARN_CXXFLAGS])\n+  BITCOIN_TRY_ADD_COMPILE_FLAG([-Wunused-variable], [WARN_CXXFLAGS])\n+  BITCOIN_TRY_ADD_COMPILE_FLAG([-Wunused-member-function], [WARN_CXXFLAGS])\n+  BITCOIN_TRY_ADD_COMPILE_FLAG([-Wdate-time], [WARN_CXXFLAGS])\n+  BITCOIN_TRY_ADD_COMPILE_FLAG([-Wconditional-uninitialized], [WARN_CXXFLAGS])\n+  BITCOIN_TRY_ADD_COMPILE_FLAG([-Wsign-compare], [WARN_CXXFLAGS])\n+  BITCOIN_TRY_ADD_COMPILE_FLAG([-Wduplicated-branches], [WARN_CXXFLAGS])\n+  BITCOIN_TRY_ADD_COMPILE_FLAG([-Wduplicated-cond], [WARN_CXXFLAGS])\n+  BITCOIN_TRY_ADD_COMPILE_FLAG([-Wlogical-op], [WARN_CXXFLAGS])\n+  BITCOIN_TRY_ADD_COMPILE_FLAG([-Woverloaded-virtual], [WARN_CXXFLAGS])\n+  BITCOIN_TRY_ADD_COMPILE_FLAG([-Wsuggest-override], [WARN_CXXFLAGS],\n+                               [AC_LANG_SOURCE([[struct A { virtual void f(); }; struct B : A { void f() final; };]])])\n+  BITCOIN_TRY_ADD_COMPILE_FLAG([-Wunreachable-code-loop-increment], [WARN_CXXFLAGS])\n \n   dnl Some compilers (gcc) ignore unknown -Wno-* options, but warn about all\n   dnl unknown options if any other warning is produced. Test the -Wfoo case, and\n   dnl set the -Wno-foo case if it works.\n-  AX_CHECK_COMPILE_FLAG([-Wunused-parameter],[NOWARN_CXXFLAGS=\"$NOWARN_CXXFLAGS -Wno-unused-parameter\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Wself-assign],[NOWARN_CXXFLAGS=\"$NOWARN_CXXFLAGS -Wno-self-assign\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Wunused-local-typedef],[NOWARN_CXXFLAGS=\"$NOWARN_CXXFLAGS -Wno-unused-local-typedef\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Wdeprecated-register],[NOWARN_CXXFLAGS=\"$NOWARN_CXXFLAGS -Wno-deprecated-register\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Wimplicit-fallthrough],[NOWARN_CXXFLAGS=\"$NOWARN_CXXFLAGS -Wno-implicit-fallthrough\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Wdeprecated-copy],[NOWARN_CXXFLAGS=\"$NOWARN_CXXFLAGS -Wno-deprecated-copy\"],,[[$CXXFLAG_WERROR]])\n+  BITCOIN_TRY_ADD_COMPILE_FLAG([-Wunused-parameter], [NOWARN_CXXFLAGS])\n+  BITCOIN_TRY_ADD_COMPILE_FLAG([-Wself-assign], [NOWARN_CXXFLAGS])\n+  BITCOIN_TRY_ADD_COMPILE_FLAG([-Wunused-local-typedef], [NOWARN_CXXFLAGS])\n+  BITCOIN_TRY_ADD_COMPILE_FLAG([-Wdeprecated-register], [NOWARN_CXXFLAGS])\n+  BITCOIN_TRY_ADD_COMPILE_FLAG([-Wimplicit-fallthrough], [NOWARN_CXXFLAGS])\n+  BITCOIN_TRY_ADD_COMPILE_FLAG([-Wdeprecated-copy], [NOWARN_CXXFLAGS])\n fi\n \n dnl Don't allow extended (non-ASCII) symbols in identifiers. This is easier for code review.\n-AX_CHECK_COMPILE_FLAG([-fno-extended-identifiers],[[CXXFLAGS=\"$CXXFLAGS -fno-extended-identifiers\"]],,[[$CXXFLAG_WERROR]])\n+BITCOIN_TRY_ADD_COMPILE_FLAG([-fno-extended-identifiers], [CXXFLAGS])\n \n enable_sse42=no\n enable_sse41=no"
      }
    ]
  }
]