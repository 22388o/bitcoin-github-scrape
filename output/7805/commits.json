[
  {
    "sha": "19b9e051e7ee3eb66a033a08be8b7d40c2babcf5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxOWI5ZTA1MWU3ZWUzZWI2NmEwMzNhMDhiZThiN2Q0MGMyYmFiY2Y1",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2016-04-04T02:36:47Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2016-04-06T14:02:23Z"
      },
      "message": "Eliminate TX trickle bypass, sort TX invs for privacy and priority.\n\nPreviously Bitcoin would send 1/4 of transactions out to all peers\n instantly.  This causes high overhead because it makes >80% of\n INVs size 1.  Doing so harms privacy, because it limits the\n amount of source obscurity a transaction can receive.\n\nThese randomized broadcasts also disobeyed transaction dependencies\n and required use of the orphan pool.  Because the orphan pool is\n so small this leads to poor propagation for dependent transactions.\n\nWhen the bypass wasn't in effect, transactions were sent in the\n order they were received.  This avoided creating orphans but\n undermines privacy fairly significantly.\n\nThis commit:\n Eliminates the bypass. The bypass is replaced by halving the\n  average delay for outbound peers.\n\n Sorts candidate transactions for INV by their topological\n  depth then by their feerate (then hash); removing the\n  information leakage and providing priority service to\n  higher fee transactions.\n\n Limits the amount of transactions sent in a single INV to\n  7tx/sec (and twice that for outbound); this limits the\n  harm of low fee transaction floods, gives faster relay\n  service to higher fee transactions. The 7 sounds lower\n  than it really is because received advertisements need\n  not be sent, and because the aggregate rate is multipled\n  by the number of peers.",
      "tree": {
        "sha": "929e28b778c309bea13145c1b1c1bc20f2ffa195",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/929e28b778c309bea13145c1b1c1bc20f2ffa195"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/19b9e051e7ee3eb66a033a08be8b7d40c2babcf5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/19b9e051e7ee3eb66a033a08be8b7d40c2babcf5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/19b9e051e7ee3eb66a033a08be8b7d40c2babcf5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/19b9e051e7ee3eb66a033a08be8b7d40c2babcf5/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e662a76288011fe6a640f1c02c2381284ad93a03",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e662a76288011fe6a640f1c02c2381284ad93a03",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e662a76288011fe6a640f1c02c2381284ad93a03"
      }
    ],
    "stats": {
      "total": 85,
      "additions": 58,
      "deletions": 27
    },
    "files": [
      {
        "sha": "cdb110ce3829824ea880d23f50fcd99b4531f525",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 24,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/19b9e051e7ee3eb66a033a08be8b7d40c2babcf5/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/19b9e051e7ee3eb66a033a08be8b7d40c2babcf5/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=19b9e051e7ee3eb66a033a08be8b7d40c2babcf5",
        "patch": "@@ -5530,6 +5530,29 @@ bool ProcessMessages(CNode* pfrom)\n     return fOk;\n }\n \n+class CompareInvMempoolOrder\n+{\n+    CTxMemPool *mp;\n+public:\n+    CompareInvMempoolOrder(CTxMemPool *mempool)\n+    {\n+        mp = mempool;\n+    }\n+\n+    bool operator()(const CInv &a, const CInv &b)\n+    {\n+        if (a.type != MSG_TX && b.type != MSG_TX) {\n+            return false;\n+        } else {\n+            if (a.type != MSG_TX) {\n+                return true;\n+            } else if (b.type != MSG_TX) {\n+                return false;\n+            }\n+            return mp->CompareDepthAndScore(a.hash, b.hash);\n+        }\n+    }\n+};\n \n bool SendMessages(CNode* pto)\n {\n@@ -5760,42 +5783,31 @@ bool SendMessages(CNode* pto)\n             bool fSendTrickle = pto->fWhitelisted;\n             if (pto->nNextInvSend < nNow) {\n                 fSendTrickle = true;\n-                pto->nNextInvSend = PoissonNextSend(nNow, AVG_INVENTORY_BROADCAST_INTERVAL);\n+                // Use half the delay for outbound peers, as their is less privacy concern for them.\n+                pto->nNextInvSend = PoissonNextSend(nNow, INVENTORY_BROADCAST_INTERVAL >> !pto->fInbound);\n             }\n             LOCK(pto->cs_inventory);\n-            vInv.reserve(std::min<size_t>(1000, pto->vInventoryToSend.size()));\n+            if (fSendTrickle && pto->vInventoryToSend.size() > 1) {\n+                // Topologically and fee-rate sort the inventory we send for privacy and priority reasons.\n+                CompareInvMempoolOrder compareInvMempoolOrder(&mempool);\n+                std::stable_sort(pto->vInventoryToSend.begin(), pto->vInventoryToSend.end(), compareInvMempoolOrder);\n+            }\n+            vInv.reserve(std::min<size_t>(INVENTORY_BROADCAST_MAX, pto->vInventoryToSend.size()));\n             vInvWait.reserve(pto->vInventoryToSend.size());\n             BOOST_FOREACH(const CInv& inv, pto->vInventoryToSend)\n             {\n                 if (inv.type == MSG_TX && pto->filterInventoryKnown.contains(inv.hash))\n                     continue;\n-\n-                // trickle out tx inv to protect privacy\n-                if (inv.type == MSG_TX && !fSendTrickle)\n-                {\n-                    // 1/4 of tx invs blast to all immediately\n-                    static uint256 hashSalt;\n-                    if (hashSalt.IsNull())\n-                        hashSalt = GetRandHash();\n-                    uint256 hashRand = ArithToUint256(UintToArith256(inv.hash) ^ UintToArith256(hashSalt));\n-                    hashRand = Hash(BEGIN(hashRand), END(hashRand));\n-                    bool fTrickleWait = ((UintToArith256(hashRand) & 3) != 0);\n-\n-                    if (fTrickleWait)\n-                    {\n-                        vInvWait.push_back(inv);\n-                        continue;\n-                    }\n+                // No reason to drain out at many times the network's capacity,\n+                // especially since we have many peers and some will draw much shorter delays.\n+                if (vInv.size() >= INVENTORY_BROADCAST_MAX || (inv.type == MSG_TX && !fSendTrickle)) {\n+                    vInvWait.push_back(inv);\n+                    continue;\n                 }\n \n                 pto->filterInventoryKnown.insert(inv.hash);\n \n                 vInv.push_back(inv);\n-                if (vInv.size() >= 1000)\n-                {\n-                    pto->PushMessage(NetMsgType::INV, vInv);\n-                    vInv.clear();\n-                }\n             }\n             pto->vInventoryToSend = vInvWait;\n         }"
      },
      {
        "sha": "5bd687ea19ff3b2e029afd9f2e999e788f6f0f08",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/19b9e051e7ee3eb66a033a08be8b7d40c2babcf5/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/19b9e051e7ee3eb66a033a08be8b7d40c2babcf5/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=19b9e051e7ee3eb66a033a08be8b7d40c2babcf5",
        "patch": "@@ -99,9 +99,12 @@ static const unsigned int MAX_REJECT_MESSAGE_LENGTH = 111;\n static const unsigned int AVG_LOCAL_ADDRESS_BROADCAST_INTERVAL = 24 * 24 * 60;\n /** Average delay between peer address broadcasts in seconds. */\n static const unsigned int AVG_ADDRESS_BROADCAST_INTERVAL = 30;\n-/** Average delay between trickled inventory broadcasts in seconds.\n- *  Blocks, whitelisted receivers, and a random 25% of transactions bypass this. */\n-static const unsigned int AVG_INVENTORY_BROADCAST_INTERVAL = 5;\n+/** Average delay between trickled inventory transmissions in seconds.\n+ *  Blocks and whitelisted receivers bypass this, outbound peers get half this delay. */\n+static const unsigned int INVENTORY_BROADCAST_INTERVAL = 5;\n+/** Maximum number of inventor items to send per transmission.\n+ *  Limits the impact of low-fee transaction floods. */\n+static const unsigned int INVENTORY_BROADCAST_MAX = 7 * INVENTORY_BROADCAST_INTERVAL;\n /** Average delay between feefilter broadcasts in seconds. */\n static const unsigned int AVG_FEEFILTER_BROADCAST_INTERVAL = 10 * 60;\n /** Maximum feefilter broadcast delay after significant change. */"
      },
      {
        "sha": "3aba578fac99ef2b8c788d0db21cfc00e6ee4a77",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/19b9e051e7ee3eb66a033a08be8b7d40c2babcf5/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/19b9e051e7ee3eb66a033a08be8b7d40c2babcf5/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=19b9e051e7ee3eb66a033a08be8b7d40c2babcf5",
        "patch": "@@ -752,6 +752,21 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n     assert(innerUsage == cachedInnerUsage);\n }\n \n+bool CTxMemPool::CompareDepthAndScore(const uint256& hasha, const uint256& hashb)\n+{\n+    LOCK(cs);\n+    indexed_transaction_set::const_iterator i = mapTx.find(hasha);\n+    if (i == mapTx.end()) return false;\n+    indexed_transaction_set::const_iterator j = mapTx.find(hashb);\n+    if (j == mapTx.end()) return true;\n+    uint64_t counta = i->GetCountWithAncestors();\n+    uint64_t countb = j->GetCountWithAncestors();\n+    if (counta == countb) {\n+        return CompareTxMemPoolEntryByScore()(*i, *j);\n+    }\n+    return counta < countb;\n+}\n+\n void CTxMemPool::queryHashes(vector<uint256>& vtxid)\n {\n     vtxid.clear();"
      },
      {
        "sha": "28e33ba289764e02e022664fb8cbf9d4bba29c68",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/19b9e051e7ee3eb66a033a08be8b7d40c2babcf5/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/19b9e051e7ee3eb66a033a08be8b7d40c2babcf5/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=19b9e051e7ee3eb66a033a08be8b7d40c2babcf5",
        "patch": "@@ -511,6 +511,7 @@ class CTxMemPool\n                         std::list<CTransaction>& conflicts, bool fCurrentEstimate = true);\n     void clear();\n     void _clear(); //lock free\n+    bool CompareDepthAndScore(const uint256& hasha, const uint256& hashb);\n     void queryHashes(std::vector<uint256>& vtxid);\n     void pruneSpent(const uint256& hash, CCoins &coins);\n     unsigned int GetTransactionsUpdated() const;"
      }
    ]
  }
]