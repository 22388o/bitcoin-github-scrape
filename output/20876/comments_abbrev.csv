DrahtBot,2021-01-07 19:52:55,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #20874 (test: Run mempool_limit.py even with wallet disabled by stackman27)\n\nIf you consider this pull request important",https://github.com/bitcoin/bitcoin/pull/20876#issuecomment-756345460,756345460,
mjdietzx,2021-01-08 20:45:00,ACK faabc26a61873b2cd0390a21df571fe53c893c11,https://github.com/bitcoin/bitcoin/pull/20876#issuecomment-756989949,756989949,
glozow,2021-01-10 00:04:55,"Concept ACK hehe, was just thinking that it'd be nice to have a just-create-don't-send option for the MiniWallet. What do you think of a bool option?",https://github.com/bitcoin/bitcoin/pull/20876#issuecomment-757387150,757387150,
MarcoFalke,2021-01-10 09:19:35,"> What do you think of a bool option?\n\nSure, but let's do that in the PR that needs the feature. (To not introduce dead code branches right away)",https://github.com/bitcoin/bitcoin/pull/20876#issuecomment-757443980,757443980,
stackman27,2021-01-08 09:11:29,"I just have a conceptual question here. Why would we wanna send tx when we know it's going to fail? for instance I ran this code to check for failure and success and got\n![markoPR2](https://user-images.githubusercontent.com/26356227/103995201-feda0f00-514c-11eb-87e5-180380da79d3.PNG). Is it to retrieve the error reason? If so, since `reject-reason` is a part of the `tx_info` object can't we just",https://github.com/bitcoin/bitcoin/pull/20876#discussion_r553825037,553825037,test/functional/test_framework/wallet.py
MarcoFalke,2021-01-08 09:46:29,"None of the code paths currently send a tx that we know is going to fail. Otherwise, `sendrawtransaction` would throw.",https://github.com/bitcoin/bitcoin/pull/20876#discussion_r553842608,553842608,test/functional/test_framework/wallet.py
mjdietzx,2021-01-08 16:50:51,"This makes me notice a potentially unwanted side-effect in `send_self_transfer`. If a test case is catching an exception in `send_self_transfer`, `self._utxos.append({'txid': txid, 'vout': 0, 'value': send_value})` is happening before some rpc calls and assertions that could potentially fail. This could cause some confusing behavior in the case an exception does get thrown, and `self._utxos` is le",https://github.com/bitcoin/bitcoin/pull/20876#discussion_r554063992,554063992,test/functional/test_framework/wallet.py
mjdietzx,2021-01-08 16:53:12,"Well, I guess this would only apply if there are cases where `testmempoolaccept` succeeds but `sendrawtransaction` fails",https://github.com/bitcoin/bitcoin/pull/20876#discussion_r554066333,554066333,test/functional/test_framework/wallet.py
mjdietzx,2021-01-08 16:55:06,Unrelated to this PR: What are your thoughts of returning the entire `tx_info` here? There have been a few cases where that would have been nice when I worked with `MiniWallet`. If you think it's useful I could open a PR for that,https://github.com/bitcoin/bitcoin/pull/20876#discussion_r554068230,554068230,test/functional/test_framework/wallet.py
glozow,2021-01-10 00:10:59,"@mjdietzx What fields are you thinking of in particular?\n\nAlso I'm pretty sure you can get wtxid with `tx.calc_sha256(with_witness=True)`",https://github.com/bitcoin/bitcoin/pull/20876#discussion_r554489019,554489019,test/functional/test_framework/wallet.py
MarcoFalke,2021-01-10 09:17:36,"> Also I'm pretty sure you can get wtxid with tx.calc_sha256(with_witness=True)\n\nsha256 here is is an `int`, not a hex encoding of how txids are represented in Bitcoin (with endian switched for some reason)",https://github.com/bitcoin/bitcoin/pull/20876#discussion_r554536520,554536520,test/functional/test_framework/wallet.py
MarcoFalke,2021-01-10 09:19:11,"> If you think it's useful I could open a PR for that\n\nSure, let's do that in the PR where the return value is needed.",https://github.com/bitcoin/bitcoin/pull/20876#discussion_r554536700,554536700,test/functional/test_framework/wallet.py
