[
  {
    "sha": "fab0d998f4bf0f3f09afa51845d91408dd484408",
    "node_id": "C_kwDOABII59oAKGZhYjBkOTk4ZjRiZjBmM2YwOWFmYTUxODQ1ZDkxNDA4ZGQ0ODQ0MDg",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-11-12T11:10:47Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-12-01T09:07:20Z"
      },
      "message": "style: Remove whitespace\n\nCan be reviewed via --ignore-all-space",
      "tree": {
        "sha": "fa914c7ea8860b5e6091975899a2a3a6a73335fc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fa914c7ea8860b5e6091975899a2a3a6a73335fc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fab0d998f4bf0f3f09afa51845d91408dd484408",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhW2gv/efz87RHjmHVmcrZjV7iT1GDJ1qlLtBcJWXGdV6Rb1bfRRxSYcGBN+JJS\nnshpjKOXLezHiNexkybh13ToN2iI0+CWUpFy0V7cJWbFzVWjr7zrAVXLnEzVQvXe\n44ZqW4KdzXg+ZrjYjomn/vzIrxnDOrgl46fIpoSwHLx8TytVx6aLwgSJLMlioDvF\nb5NsY+/x7bflNSM3jZAnlfhB1R1gIvdDXCJ633LttsY4Je/Edb+eSgHF74whSQvy\nizO9WMRAbA1BYSLCnvmvPvNqlXBdbqBi0/67tytfkHLAu7z7IwNymu1mayBbdw68\ndQJVyzb7OvSAvAA7JGaFPM5x2W3INz3QnUHNIQ6B7zUPbxcQLT4ciVhU6IvLrNZf\niKWiHNfOAo73WkIxSEZ4A9qnsnBWd6xy+6okzXy3vXrYITHRGiGpVTvhkNzV3a2a\nHp6cHYgHrCq6Egujsx3G7ciY4TsPUZTCLhtCd8PrqE5fxetZhiC24IiMfP3q/hBj\nWKhxyDAX\n=4n7b\n-----END PGP SIGNATURE-----",
        "payload": "tree fa914c7ea8860b5e6091975899a2a3a6a73335fc\nparent f2074eeb2d9cd4c42936b5ba017de04cd129d9d7\nauthor MarcoFalke <falke.marco@gmail.com> 1636715447 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1638349640 +0100\n\nstyle: Remove whitespace\n\nCan be reviewed via --ignore-all-space\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab0d998f4bf0f3f09afa51845d91408dd484408",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fab0d998f4bf0f3f09afa51845d91408dd484408",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab0d998f4bf0f3f09afa51845d91408dd484408/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f2074eeb2d9cd4c42936b5ba017de04cd129d9d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2074eeb2d9cd4c42936b5ba017de04cd129d9d7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f2074eeb2d9cd4c42936b5ba017de04cd129d9d7"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 27,
      "deletions": 26
    },
    "files": [
      {
        "sha": "d5e6b4f5a539f42f73ef905fb0c9245eba85fcfc",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 26,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab0d998f4bf0f3f09afa51845d91408dd484408/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab0d998f4bf0f3f09afa51845d91408dd484408/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=fab0d998f4bf0f3f09afa51845d91408dd484408",
        "patch": "@@ -535,32 +535,33 @@ static std::string GetAllOutputTypes()\n \n static RPCHelpMan decodescript()\n {\n-    return RPCHelpMan{\"decodescript\",\n-                \"\\nDecode a hex-encoded script.\\n\",\n-                {\n-                    {\"hexstring\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"the hex-encoded script\"},\n-                },\n-                RPCResult{\n-                    RPCResult::Type::OBJ, \"\", \"\",\n-                    {\n-                        {RPCResult::Type::STR, \"asm\", \"Script public key\"},\n-                        {RPCResult::Type::STR, \"type\", \"The output type (e.g. \"+GetAllOutputTypes()+\")\"},\n-                        {RPCResult::Type::STR, \"address\", /* optional */ true, \"The Bitcoin address (only if a well-defined address exists)\"},\n-                        {RPCResult::Type::STR, \"p2sh\", /* optional */ true, \"address of P2SH script wrapping this redeem script (not returned if the script is already a P2SH)\"},\n-                        {RPCResult::Type::OBJ, \"segwit\", /* optional */ true, \"Result of a witness script public key wrapping this redeem script (not returned if the script is a P2SH or witness)\",\n-                        {\n-                            {RPCResult::Type::STR, \"asm\", \"String representation of the script public key\"},\n-                            {RPCResult::Type::STR_HEX, \"hex\", \"Hex string of the script public key\"},\n-                            {RPCResult::Type::STR, \"type\", \"The type of the script public key (e.g. witness_v0_keyhash or witness_v0_scripthash)\"},\n-                            {RPCResult::Type::STR, \"address\", /* optional */ true, \"The Bitcoin address (only if a well-defined address exists)\"},\n-                            {RPCResult::Type::STR, \"p2sh-segwit\", \"address of the P2SH script wrapping this witness redeem script\"},\n-                        }},\n-                    }\n-                },\n-                RPCExamples{\n-                    HelpExampleCli(\"decodescript\", \"\\\"hexstring\\\"\")\n-            + HelpExampleRpc(\"decodescript\", \"\\\"hexstring\\\"\")\n-                },\n+    return RPCHelpMan{\n+        \"decodescript\",\n+        \"\\nDecode a hex-encoded script.\\n\",\n+        {\n+            {\"hexstring\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"the hex-encoded script\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                {RPCResult::Type::STR, \"asm\", \"Script public key\"},\n+                {RPCResult::Type::STR, \"type\", \"The output type (e.g. \" + GetAllOutputTypes() + \")\"},\n+                {RPCResult::Type::STR, \"address\", /* optional */ true, \"The Bitcoin address (only if a well-defined address exists)\"},\n+                {RPCResult::Type::STR, \"p2sh\", /* optional */ true, \"address of P2SH script wrapping this redeem script (not returned if the script is already a P2SH)\"},\n+                {RPCResult::Type::OBJ, \"segwit\", /* optional */ true, \"Result of a witness script public key wrapping this redeem script (not returned if the script is a P2SH or witness)\",\n+                 {\n+                     {RPCResult::Type::STR, \"asm\", \"String representation of the script public key\"},\n+                     {RPCResult::Type::STR_HEX, \"hex\", \"Hex string of the script public key\"},\n+                     {RPCResult::Type::STR, \"type\", \"The type of the script public key (e.g. witness_v0_keyhash or witness_v0_scripthash)\"},\n+                     {RPCResult::Type::STR, \"address\", /* optional */ true, \"The Bitcoin address (only if a well-defined address exists)\"},\n+                     {RPCResult::Type::STR, \"p2sh-segwit\", \"address of the P2SH script wrapping this witness redeem script\"},\n+                 }},\n+            },\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"decodescript\", \"\\\"hexstring\\\"\")\n+          + HelpExampleRpc(\"decodescript\", \"\\\"hexstring\\\"\")\n+        },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n     RPCTypeCheck(request.params, {UniValue::VSTR});"
      }
    ]
  },
  {
    "sha": "33330702081f67cb05fd86e00b252f6355249513",
    "node_id": "C_kwDOABII59oAKDMzMzMwNzAyMDgxZjY3Y2IwNWZkODZlMDBiMjUyZjYzNTUyNDk1MTM",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-11-14T11:02:40Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-12-01T09:07:51Z"
      },
      "message": "refactor: Call type-solver earlier in decodescript\n\nAlso, remove std::string type.",
      "tree": {
        "sha": "b6dceed0f3170f605a114029c940da6a2d433ab7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b6dceed0f3170f605a114029c940da6a2d433ab7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/33330702081f67cb05fd86e00b252f6355249513",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhQrgv+OEBm/NG5/20R5KF60DSQ+XXX3N+LL4/fdcq82qOeLJb/qjQT5Kz0Cv8F\nJy+1jAfcL2aAApceGRRaj/x0k+V201hux3dZfxFMytaPdKvFNbYigtQsGIzC2Iq9\nVji2gwAV1nvhO3MajoZ2H1nVw4QZn0tv3al6ANeRkSkxlXq697qnYMO+Sf0uF5Fo\nSMpzAh43G1SnMmOKa+TLYaUkH7+KyQu4D1lCGjwRTMInYGztaLHmMZ9k1A24PMMJ\n8i+xQKw64BaTYjLUGUCqyQZzi45FWuUqOwqaF/F8VkOAsU5luqctvI+NUXAxOyzD\nGhnWN5fSvDIgyJejq1K2vvZk/zTJ5h3rHBT5wPZhKZIpx0mVLMU+oClvpzCL58Nm\nwXbA/MtdVJIpHyLGRK2GiIe4pHBa4t9PI1vvhJL72OAMRqPRwqygnbeO/2TuN+uO\nQVNGGL7nVdKWIowJm/IB+XMOVl+hSle9jiAUIJ5y/iGDC8u+TmRuU9IIyQ4q10/g\nX1Ve8KQu\n=PJUe\n-----END PGP SIGNATURE-----",
        "payload": "tree b6dceed0f3170f605a114029c940da6a2d433ab7\nparent fab0d998f4bf0f3f09afa51845d91408dd484408\nauthor MarcoFalke <falke.marco@gmail.com> 1636887760 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1638349671 +0100\n\nrefactor: Call type-solver earlier in decodescript\n\nAlso, remove std::string type.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33330702081f67cb05fd86e00b252f6355249513",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/33330702081f67cb05fd86e00b252f6355249513",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33330702081f67cb05fd86e00b252f6355249513/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fab0d998f4bf0f3f09afa51845d91408dd484408",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab0d998f4bf0f3f09afa51845d91408dd484408",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fab0d998f4bf0f3f09afa51845d91408dd484408"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 4,
      "deletions": 6
    },
    "files": [
      {
        "sha": "c15cb3785ac6cf19ff6bf81ff770f74874a5c0b8",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 6,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33330702081f67cb05fd86e00b252f6355249513/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33330702081f67cb05fd86e00b252f6355249513/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=33330702081f67cb05fd86e00b252f6355249513",
        "patch": "@@ -576,18 +576,16 @@ static RPCHelpMan decodescript()\n     }\n     ScriptPubKeyToUniv(script, r, /* include_hex */ false);\n \n-    UniValue type;\n-    type = find_value(r, \"type\");\n+    std::vector<std::vector<unsigned char>> solutions_data;\n+    const TxoutType which_type{Solver(script, solutions_data)};\n \n-    if (type.isStr() && type.get_str() != \"scripthash\") {\n+    if (which_type != TxoutType::SCRIPTHASH) {\n         // P2SH cannot be wrapped in a P2SH. If this script is already a P2SH,\n         // don't return the address for a P2SH of the P2SH.\n         r.pushKV(\"p2sh\", EncodeDestination(ScriptHash(script)));\n         // P2SH and witness programs cannot be wrapped in P2WSH, if this script\n         // is a witness program, don't return addresses for a segwit programs.\n-        if (type.get_str() == \"pubkey\" || type.get_str() == \"pubkeyhash\" || type.get_str() == \"multisig\" || type.get_str() == \"nonstandard\") {\n-            std::vector<std::vector<unsigned char>> solutions_data;\n-            TxoutType which_type = Solver(script, solutions_data);\n+        if (which_type == TxoutType::PUBKEY || which_type == TxoutType::PUBKEYHASH || which_type == TxoutType::MULTISIG || which_type == TxoutType::NONSTANDARD) {\n             // Uncompressed pubkeys cannot be used with segwit checksigs.\n             // If the script contains an uncompressed pubkey, skip encoding of a segwit program.\n             if ((which_type == TxoutType::PUBKEY) || (which_type == TxoutType::MULTISIG)) {"
      }
    ]
  }
]