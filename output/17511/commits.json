[
  {
    "sha": "2bcf1fc444d5c4b8efa879e54e7b6134b7e6b986",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYmNmMWZjNDQ0ZDVjNGI4ZWZhODc5ZTU0ZTdiNjEzNGI3ZTZiOTg2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-11-18T23:16:50Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-11-19T23:38:27Z"
      },
      "message": "Pass a maximum output length to DecodeBase58 and DecodeBase58Check\n\nAlso remove a needless loop in DecodeBase58 to prune zeroes in the base256\noutput of the conversion. The number of zeroes is implied by keeping track\nexplicitly of the length during the loop.",
      "tree": {
        "sha": "333cb13784c3cd48d5ade305246212ddbd590386",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/333cb13784c3cd48d5ade305246212ddbd590386"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2bcf1fc444d5c4b8efa879e54e7b6134b7e6b986",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2bcf1fc444d5c4b8efa879e54e7b6134b7e6b986",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2bcf1fc444d5c4b8efa879e54e7b6134b7e6b986",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2bcf1fc444d5c4b8efa879e54e7b6134b7e6b986/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b4a1da9ef8e4b673c290d5b882527e627ae1b43a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b4a1da9ef8e4b673c290d5b882527e627ae1b43a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b4a1da9ef8e4b673c290d5b882527e627ae1b43a"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 33,
      "deletions": 13
    },
    "files": [
      {
        "sha": "a0149fb64116a2640170a0c9f9359216c02afbed",
        "filename": "src/base58.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 9,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2bcf1fc444d5c4b8efa879e54e7b6134b7e6b986/src/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2bcf1fc444d5c4b8efa879e54e7b6134b7e6b986/src/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.cpp?ref=2bcf1fc444d5c4b8efa879e54e7b6134b7e6b986",
        "patch": "@@ -11,6 +11,8 @@\n #include <assert.h>\n #include <string.h>\n \n+#include <limits>\n+\n /** All alphanumeric characters except for \"0\", \"I\", \"O\", and \"l\" */\n static const char* pszBase58 = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\n static const int8_t mapBase58[256] = {\n@@ -32,7 +34,7 @@ static const int8_t mapBase58[256] = {\n     -1,-1,-1,-1,-1,-1,-1,-1, -1,-1,-1,-1,-1,-1,-1,-1,\n };\n \n-bool DecodeBase58(const char* psz, std::vector<unsigned char>& vch)\n+bool DecodeBase58(const char* psz, std::vector<unsigned char>& vch, int max_ret_len)\n {\n     // Skip leading spaces.\n     while (*psz && IsSpace(*psz))\n@@ -42,6 +44,7 @@ bool DecodeBase58(const char* psz, std::vector<unsigned char>& vch)\n     int length = 0;\n     while (*psz == '1') {\n         zeroes++;\n+        if (zeroes > max_ret_len) return false;\n         psz++;\n     }\n     // Allocate enough space in big-endian base256 representation.\n@@ -62,6 +65,7 @@ bool DecodeBase58(const char* psz, std::vector<unsigned char>& vch)\n         }\n         assert(carry == 0);\n         length = i;\n+        if (length + zeroes > max_ret_len) return false;\n         psz++;\n     }\n     // Skip trailing spaces.\n@@ -71,8 +75,6 @@ bool DecodeBase58(const char* psz, std::vector<unsigned char>& vch)\n         return false;\n     // Skip leading zeroes in b256.\n     std::vector<unsigned char>::iterator it = b256.begin() + (size - length);\n-    while (it != b256.end() && *it == 0)\n-        it++;\n     // Copy result into output vector.\n     vch.reserve(zeroes + (b256.end() - it));\n     vch.assign(zeroes, 0x00);\n@@ -126,9 +128,9 @@ std::string EncodeBase58(const std::vector<unsigned char>& vch)\n     return EncodeBase58(vch.data(), vch.data() + vch.size());\n }\n \n-bool DecodeBase58(const std::string& str, std::vector<unsigned char>& vchRet)\n+bool DecodeBase58(const std::string& str, std::vector<unsigned char>& vchRet, int max_ret_len)\n {\n-    return DecodeBase58(str.c_str(), vchRet);\n+    return DecodeBase58(str.c_str(), vchRet, max_ret_len);\n }\n \n std::string EncodeBase58Check(const std::vector<unsigned char>& vchIn)\n@@ -140,9 +142,9 @@ std::string EncodeBase58Check(const std::vector<unsigned char>& vchIn)\n     return EncodeBase58(vch);\n }\n \n-bool DecodeBase58Check(const char* psz, std::vector<unsigned char>& vchRet)\n+bool DecodeBase58Check(const char* psz, std::vector<unsigned char>& vchRet, int max_ret_len)\n {\n-    if (!DecodeBase58(psz, vchRet) ||\n+    if (!DecodeBase58(psz, vchRet, max_ret_len > std::numeric_limits<int>::max() - 4 ? std::numeric_limits<int>::max() : max_ret_len + 4) ||\n         (vchRet.size() < 4)) {\n         vchRet.clear();\n         return false;\n@@ -157,7 +159,7 @@ bool DecodeBase58Check(const char* psz, std::vector<unsigned char>& vchRet)\n     return true;\n }\n \n-bool DecodeBase58Check(const std::string& str, std::vector<unsigned char>& vchRet)\n+bool DecodeBase58Check(const std::string& str, std::vector<unsigned char>& vchRet, int max_ret)\n {\n-    return DecodeBase58Check(str.c_str(), vchRet);\n+    return DecodeBase58Check(str.c_str(), vchRet, max_ret);\n }"
      },
      {
        "sha": "cfdab511b6d17792458200cc4db12d42042a027f",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2bcf1fc444d5c4b8efa879e54e7b6134b7e6b986/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2bcf1fc444d5c4b8efa879e54e7b6134b7e6b986/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=2bcf1fc444d5c4b8efa879e54e7b6134b7e6b986",
        "patch": "@@ -16,6 +16,7 @@\n \n #include <attributes.h>\n \n+#include <limits>\n #include <string>\n #include <vector>\n \n@@ -35,13 +36,13 @@ std::string EncodeBase58(const std::vector<unsigned char>& vch);\n  * return true if decoding is successful.\n  * psz cannot be nullptr.\n  */\n-NODISCARD bool DecodeBase58(const char* psz, std::vector<unsigned char>& vchRet);\n+NODISCARD bool DecodeBase58(const char* psz, std::vector<unsigned char>& vchRet, int max_ret_len = std::numeric_limits<int>::max());\n \n /**\n  * Decode a base58-encoded string (str) into a byte vector (vchRet).\n  * return true if decoding is successful.\n  */\n-NODISCARD bool DecodeBase58(const std::string& str, std::vector<unsigned char>& vchRet);\n+NODISCARD bool DecodeBase58(const std::string& str, std::vector<unsigned char>& vchRet, int max_ret_len = std::numeric_limits<int>::max());\n \n /**\n  * Encode a byte vector into a base58-encoded string, including checksum\n@@ -52,12 +53,12 @@ std::string EncodeBase58Check(const std::vector<unsigned char>& vchIn);\n  * Decode a base58-encoded string (psz) that includes a checksum into a byte\n  * vector (vchRet), return true if decoding is successful\n  */\n-NODISCARD bool DecodeBase58Check(const char* psz, std::vector<unsigned char>& vchRet);\n+NODISCARD bool DecodeBase58Check(const char* psz, std::vector<unsigned char>& vchRet, int max_ret_len = std::numeric_limits<int>::max());\n \n /**\n  * Decode a base58-encoded string (str) that includes a checksum into a byte\n  * vector (vchRet), return true if decoding is successful\n  */\n-NODISCARD bool DecodeBase58Check(const std::string& str, std::vector<unsigned char>& vchRet);\n+NODISCARD bool DecodeBase58Check(const std::string& str, std::vector<unsigned char>& vchRet, int max_ret_len = std::numeric_limits<int>::max());\n \n #endif // BITCOIN_BASE58_H"
      },
      {
        "sha": "5d53088cc65f8609535a4f24e94440bb46152958",
        "filename": "src/test/base58_tests.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2bcf1fc444d5c4b8efa879e54e7b6134b7e6b986/src/test/base58_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2bcf1fc444d5c4b8efa879e54e7b6134b7e6b986/src/test/base58_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base58_tests.cpp?ref=2bcf1fc444d5c4b8efa879e54e7b6134b7e6b986",
        "patch": "@@ -7,6 +7,7 @@\n #include <base58.h>\n #include <test/util/setup_common.h>\n #include <util/strencodings.h>\n+#include <util/vector.h>\n \n #include <univalue.h>\n \n@@ -66,4 +67,20 @@ BOOST_AUTO_TEST_CASE(base58_DecodeBase58)\n     BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n }\n \n+BOOST_AUTO_TEST_CASE(base58_random_encode_decode)\n+{\n+    for (int n = 0; n < 1000; ++n) {\n+        unsigned int len = 1 + InsecureRandBits(8);\n+        unsigned int zeroes = InsecureRandBool() ? InsecureRandRange(len + 1) : 0;\n+        auto data = Cat(std::vector<unsigned char>(zeroes, '\\000'), g_insecure_rand_ctx.randbytes(len - zeroes));\n+        auto encoded = EncodeBase58Check(data);\n+        std::vector<unsigned char> decoded;\n+        auto ok_too_small = DecodeBase58Check(encoded, decoded, InsecureRandRange(len));\n+        BOOST_CHECK(!ok_too_small);\n+        auto ok = DecodeBase58Check(encoded, decoded, len + InsecureRandRange(257 - len));\n+        BOOST_CHECK(ok);\n+        BOOST_CHECK(data == decoded);\n+    }\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "5909bcd3bf3c3502355e89fd0b76bb8e93d8a95b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1OTA5YmNkM2JmM2MzNTAyMzU1ZTg5ZmQwYjc2YmI4ZTkzZDhhOTVi",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-11-18T23:26:55Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-12-06T00:31:09Z"
      },
      "message": "Add bounds checks in key_io before DecodeBase58Check",
      "tree": {
        "sha": "388569d03abf646a5b616c7a68e4611d0f2cf0a3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/388569d03abf646a5b616c7a68e4611d0f2cf0a3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5909bcd3bf3c3502355e89fd0b76bb8e93d8a95b",
      "comment_count": 1,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5909bcd3bf3c3502355e89fd0b76bb8e93d8a95b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5909bcd3bf3c3502355e89fd0b76bb8e93d8a95b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5909bcd3bf3c3502355e89fd0b76bb8e93d8a95b/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2bcf1fc444d5c4b8efa879e54e7b6134b7e6b986",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2bcf1fc444d5c4b8efa879e54e7b6134b7e6b986",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2bcf1fc444d5c4b8efa879e54e7b6134b7e6b986"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 13,
      "deletions": 14
    },
    "files": [
      {
        "sha": "90eded4992adb78ac14f96979fb6bf10fa881236",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5909bcd3bf3c3502355e89fd0b76bb8e93d8a95b/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5909bcd3bf3c3502355e89fd0b76bb8e93d8a95b/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=5909bcd3bf3c3502355e89fd0b76bb8e93d8a95b",
        "patch": "@@ -16,7 +16,6 @@\n \n #include <attributes.h>\n \n-#include <limits>\n #include <string>\n #include <vector>\n \n@@ -36,13 +35,13 @@ std::string EncodeBase58(const std::vector<unsigned char>& vch);\n  * return true if decoding is successful.\n  * psz cannot be nullptr.\n  */\n-NODISCARD bool DecodeBase58(const char* psz, std::vector<unsigned char>& vchRet, int max_ret_len = std::numeric_limits<int>::max());\n+NODISCARD bool DecodeBase58(const char* psz, std::vector<unsigned char>& vchRet, int max_ret_len);\n \n /**\n  * Decode a base58-encoded string (str) into a byte vector (vchRet).\n  * return true if decoding is successful.\n  */\n-NODISCARD bool DecodeBase58(const std::string& str, std::vector<unsigned char>& vchRet, int max_ret_len = std::numeric_limits<int>::max());\n+NODISCARD bool DecodeBase58(const std::string& str, std::vector<unsigned char>& vchRet, int max_ret_len);\n \n /**\n  * Encode a byte vector into a base58-encoded string, including checksum\n@@ -53,12 +52,12 @@ std::string EncodeBase58Check(const std::vector<unsigned char>& vchIn);\n  * Decode a base58-encoded string (psz) that includes a checksum into a byte\n  * vector (vchRet), return true if decoding is successful\n  */\n-NODISCARD bool DecodeBase58Check(const char* psz, std::vector<unsigned char>& vchRet, int max_ret_len = std::numeric_limits<int>::max());\n+NODISCARD bool DecodeBase58Check(const char* psz, std::vector<unsigned char>& vchRet, int max_ret_len);\n \n /**\n  * Decode a base58-encoded string (str) that includes a checksum into a byte\n  * vector (vchRet), return true if decoding is successful\n  */\n-NODISCARD bool DecodeBase58Check(const std::string& str, std::vector<unsigned char>& vchRet, int max_ret_len = std::numeric_limits<int>::max());\n+NODISCARD bool DecodeBase58Check(const std::string& str, std::vector<unsigned char>& vchRet, int max_ret_len);\n \n #endif // BITCOIN_BASE58_H"
      },
      {
        "sha": "d8c9b2e01a203fa46f22c4d563a0ad981396f3bc",
        "filename": "src/bench/base58.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5909bcd3bf3c3502355e89fd0b76bb8e93d8a95b/src/bench/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5909bcd3bf3c3502355e89fd0b76bb8e93d8a95b/src/bench/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/base58.cpp?ref=5909bcd3bf3c3502355e89fd0b76bb8e93d8a95b",
        "patch": "@@ -47,7 +47,7 @@ static void Base58Decode(benchmark::State& state)\n     const char* addr = \"17VZNX1SN5NtKa8UQFxwQbFeFc3iqRYhem\";\n     std::vector<unsigned char> vch;\n     while (state.KeepRunning()) {\n-        (void) DecodeBase58(addr, vch);\n+        (void) DecodeBase58(addr, vch, 64);\n     }\n }\n "
      },
      {
        "sha": "af06db7343e3693ec911895536d0dd0185ff04f1",
        "filename": "src/key_io.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5909bcd3bf3c3502355e89fd0b76bb8e93d8a95b/src/key_io.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5909bcd3bf3c3502355e89fd0b76bb8e93d8a95b/src/key_io.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key_io.cpp?ref=5909bcd3bf3c3502355e89fd0b76bb8e93d8a95b",
        "patch": "@@ -73,7 +73,7 @@ CTxDestination DecodeDestination(const std::string& str, const CChainParams& par\n {\n     std::vector<unsigned char> data;\n     uint160 hash;\n-    if (DecodeBase58Check(str, data)) {\n+    if (DecodeBase58Check(str, data, 21)) {\n         // base58-encoded Bitcoin addresses.\n         // Public-key-hash-addresses have version 0 (or 111 testnet).\n         // The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n@@ -133,7 +133,7 @@ CKey DecodeSecret(const std::string& str)\n {\n     CKey key;\n     std::vector<unsigned char> data;\n-    if (DecodeBase58Check(str, data)) {\n+    if (DecodeBase58Check(str, data, 34)) {\n         const std::vector<unsigned char>& privkey_prefix = Params().Base58Prefix(CChainParams::SECRET_KEY);\n         if ((data.size() == 32 + privkey_prefix.size() || (data.size() == 33 + privkey_prefix.size() && data.back() == 1)) &&\n             std::equal(privkey_prefix.begin(), privkey_prefix.end(), data.begin())) {\n@@ -164,7 +164,7 @@ CExtPubKey DecodeExtPubKey(const std::string& str)\n {\n     CExtPubKey key;\n     std::vector<unsigned char> data;\n-    if (DecodeBase58Check(str, data)) {\n+    if (DecodeBase58Check(str, data, 78)) {\n         const std::vector<unsigned char>& prefix = Params().Base58Prefix(CChainParams::EXT_PUBLIC_KEY);\n         if (data.size() == BIP32_EXTKEY_SIZE + prefix.size() && std::equal(prefix.begin(), prefix.end(), data.begin())) {\n             key.Decode(data.data() + prefix.size());\n@@ -187,7 +187,7 @@ CExtKey DecodeExtKey(const std::string& str)\n {\n     CExtKey key;\n     std::vector<unsigned char> data;\n-    if (DecodeBase58Check(str, data)) {\n+    if (DecodeBase58Check(str, data, 78)) {\n         const std::vector<unsigned char>& prefix = Params().Base58Prefix(CChainParams::EXT_SECRET_KEY);\n         if (data.size() == BIP32_EXTKEY_SIZE + prefix.size() && std::equal(prefix.begin(), prefix.end(), data.begin())) {\n             key.Decode(data.data() + prefix.size());"
      },
      {
        "sha": "96fdf8c86d3facf1a50a70f0ef30c0f6f2a6d99f",
        "filename": "src/test/base58_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5909bcd3bf3c3502355e89fd0b76bb8e93d8a95b/src/test/base58_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5909bcd3bf3c3502355e89fd0b76bb8e93d8a95b/src/test/base58_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base58_tests.cpp?ref=5909bcd3bf3c3502355e89fd0b76bb8e93d8a95b",
        "patch": "@@ -54,15 +54,15 @@ BOOST_AUTO_TEST_CASE(base58_DecodeBase58)\n         }\n         std::vector<unsigned char> expected = ParseHex(test[0].get_str());\n         std::string base58string = test[1].get_str();\n-        BOOST_CHECK_MESSAGE(DecodeBase58(base58string, result), strTest);\n+        BOOST_CHECK_MESSAGE(DecodeBase58(base58string, result, 256), strTest);\n         BOOST_CHECK_MESSAGE(result.size() == expected.size() && std::equal(result.begin(), result.end(), expected.begin()), strTest);\n     }\n \n-    BOOST_CHECK(!DecodeBase58(\"invalid\", result));\n+    BOOST_CHECK(!DecodeBase58(\"invalid\", result, 100));\n \n     // check that DecodeBase58 skips whitespace, but still fails with unexpected non-whitespace at the end.\n-    BOOST_CHECK(!DecodeBase58(\" \\t\\n\\v\\f\\r skip \\r\\f\\v\\n\\t a\", result));\n-    BOOST_CHECK( DecodeBase58(\" \\t\\n\\v\\f\\r skip \\r\\f\\v\\n\\t \", result));\n+    BOOST_CHECK(!DecodeBase58(\" \\t\\n\\v\\f\\r skip \\r\\f\\v\\n\\t a\", result, 3));\n+    BOOST_CHECK( DecodeBase58(\" \\t\\n\\v\\f\\r skip \\r\\f\\v\\n\\t \", result, 3));\n     std::vector<unsigned char> expected = ParseHex(\"971a55\");\n     BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n }"
      }
    ]
  }
]