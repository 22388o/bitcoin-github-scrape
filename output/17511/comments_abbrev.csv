practicalswift,2019-11-19 06:39:21,"Concept ACK\n\nThanks for fixing this!",https://github.com/bitcoin/bitcoin/pull/17511#issuecomment-555357457,555357457,
laanwj,2019-11-19 07:53:52,"~~I still stand by what I said in https://github.com/bitcoin/bitcoin/issues/17501#issuecomment-554910700~~\n\n> I would say it's not the encoder/decoder responsibility to check input sizes. Good generic code works for any input size.\n> But of course, the application side (e.g. address parsing routines) could have a check to see if inputs are reasonable. They have that knowledge.\n\n~~Checkin",https://github.com/bitcoin/bitcoin/pull/17511#issuecomment-555378987,555378987,
sipa,2019-11-19 08:30:35,"@laanwj Hmm, I think there is a better solution than this. We do have upper bounds on the encoded data as well, which would be fine. Alternatively, we could just make DecodeBase58(Check) take an additional argument for the max size on the encoded data.",https://github.com/bitcoin/bitcoin/pull/17511#issuecomment-555390901,555390901,
laanwj,2019-11-19 08:36:02,"Ah yes, the number of '0' is not really unbounded, because they are counted and signify the padding. It basically just ignores an infinite amount of spaces around it. That's fine.\n\nI think this solution is OK!\n\n> Alternatively, we could just make DecodeBase58(Check) take an additional argument for the max size on the encoded data.\n\nI kind of like having a separate function to estimate ",https://github.com/bitcoin/bitcoin/pull/17511#issuecomment-555392883,555392883,
Sjors,2019-11-20 10:46:58,"Note that there are various places, e.g. PSBT parsing, that call `DecodeBase64`  in `strencodings` directly, bypassing these new bounds checks.",https://github.com/bitcoin/bitcoin/pull/17511#issuecomment-555948382,555948382,
laanwj,2019-11-20 10:48:49,"@Sjors DecodeBase64 doesn't have this problem, its runtime is linear on the input size.",https://github.com/bitcoin/bitcoin/pull/17511#issuecomment-555949036,555949036,
practicalswift,2019-11-25 10:17:33,"@sipa \n\nI think we should drop the default for `max_ret_len` since the default of `std::numeric_limits<int>::max()` is not a good or ""natural"" choice for most callers.\n\nI think it would be preferable to not have a default for `max_ret_len` to make sure callers make an informed decision regarding `max_ret_len`.\n\nMakes sense?",https://github.com/bitcoin/bitcoin/pull/17511#issuecomment-558086883,558086883,
sipa,2019-12-06 00:32:08,@practicalswift Done.,https://github.com/bitcoin/bitcoin/pull/17511#issuecomment-562379898,562379898,
laanwj,2019-12-06 07:33:53,"code review ACK 5909bcd3bf3c3502355e89fd0b76bb8e93d8a95b\n(definitely agree that this is easier to review than the size estimation as separate function)",https://github.com/bitcoin/bitcoin/pull/17511#issuecomment-562466189,562466189,
practicalswift,2019-12-06 08:47:55,"ACK 5909bcd3bf3c3502355e89fd0b76bb8e93d8a95b -- code looks correct\n\nFWIW there is a base58 fuzzer in #17229 (currently at zero concept ACKs :)) which would be nice to have in the tree in addition to the unit tests to get further testing.",https://github.com/bitcoin/bitcoin/pull/17511#issuecomment-562486495,562486495,
DrahtBot,2019-12-11 18:41:34,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#17721](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17721.html) (util: Don't allow Base58 decoding of non-Ba",https://github.com/bitcoin/bitcoin/pull/17511#issuecomment-564677964,564677964,
MarcoFalke,2019-11-19 02:28:41,"```\nTest cases order is shuffled using seed: 911766883\n\nEntering test module ""Bitcoin Core Test Suite""\n\ntest/key_io_tests.cpp(20): Entering test suite ""key_io_tests""\n\ntest/key_io_tests.cpp(122): Entering test case ""key_io_invalid""\n\nbase58.cpp:49:17: runtime error: unsigned integer overflow: 0 - 1 cannot be represented in type 'unsigned long'\n\n    #0 0x55bab4eefc6d in DecodeBa",https://github.com/bitcoin/bitcoin/pull/17511#discussion_r347705333,347705333,src/base58.cpp
laanwj,2019-11-19 08:36:50,"Let's make `1000000` a constant, like `BASE58_LIMIT`.",https://github.com/bitcoin/bitcoin/pull/17511#discussion_r347788868,347788868,src/base58.cpp
laanwj,2019-11-19 08:40:38,"""and will never undershoot by more than 0.25% plus 2"" is not true in the case of trailing spaces, I think :smile: ",https://github.com/bitcoin/bitcoin/pull/17511#discussion_r347790436,347790436,src/base58.h
sipa,2019-11-19 23:40:52,"I've rewritten it, this constant is no longer necessary.",https://github.com/bitcoin/bitcoin/pull/17511#discussion_r348226795,348226795,src/base58.cpp
sipa,2019-11-19 23:41:32,"You're right, and that makes this whole approach wrong, as it will reject inputs that are too long just due to spaces at the end. I've changed the approach.",https://github.com/bitcoin/bitcoin/pull/17511#discussion_r348226952,348226952,src/base58.h
