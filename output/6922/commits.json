[
  {
    "sha": "6bbfbbb1cb8c8fcf7dedb6b191ce54a44cfdaa5c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YmJmYmJiMWNiOGM4ZmNmN2RlZGI2YjE5MWNlNTRhNDRjZmRhYTVj",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2015-10-31T09:10:14Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2015-10-31T09:10:14Z"
      },
      "message": "Use const ref in PrioritiseTransaction, update logging\n\n- make the logging in PrioritiseTransaction() use __func__",
      "tree": {
        "sha": "6263775b8c2b8ac5c09fffce7d4d7d2b5ac74a37",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6263775b8c2b8ac5c09fffce7d4d7d2b5ac74a37"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6bbfbbb1cb8c8fcf7dedb6b191ce54a44cfdaa5c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6bbfbbb1cb8c8fcf7dedb6b191ce54a44cfdaa5c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6bbfbbb1cb8c8fcf7dedb6b191ce54a44cfdaa5c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6bbfbbb1cb8c8fcf7dedb6b191ce54a44cfdaa5c/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "48b5b84ee511d5ccd0d47bb0018c1b3c9ddebeff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48b5b84ee511d5ccd0d47bb0018c1b3c9ddebeff",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/48b5b84ee511d5ccd0d47bb0018c1b3c9ddebeff"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "f0224b38a04cd703ad8f124b3fa8f1146d18dfdf",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bbfbbb1cb8c8fcf7dedb6b191ce54a44cfdaa5c/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bbfbbb1cb8c8fcf7dedb6b191ce54a44cfdaa5c/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=6bbfbbb1cb8c8fcf7dedb6b191ce54a44cfdaa5c",
        "patch": "@@ -742,15 +742,15 @@ CTxMemPool::ReadFeeEstimates(CAutoFile& filein)\n     return true;\n }\n \n-void CTxMemPool::PrioritiseTransaction(const uint256 hash, const string strHash, double dPriorityDelta, const CAmount& nFeeDelta)\n+void CTxMemPool::PrioritiseTransaction(const uint256 hash, const std::string& strHash, double dPriorityDelta, const CAmount& nFeeDelta)\n {\n     {\n         LOCK(cs);\n         std::pair<double, CAmount> &deltas = mapDeltas[hash];\n         deltas.first += dPriorityDelta;\n         deltas.second += nFeeDelta;\n     }\n-    LogPrintf(\"PrioritiseTransaction: %s priority += %f, fee += %d\\n\", strHash, dPriorityDelta, FormatMoney(nFeeDelta));\n+    LogPrintf(\"%s: %s priority += %f, fee += %d\\n\", __func__, strHash, dPriorityDelta, FormatMoney(nFeeDelta));\n }\n \n void CTxMemPool::ApplyDeltas(const uint256 hash, double &dPriorityDelta, CAmount &nFeeDelta) const"
      },
      {
        "sha": "9da3223af9acd391535b8bd395cfd30b7b61fb3f",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bbfbbb1cb8c8fcf7dedb6b191ce54a44cfdaa5c/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bbfbbb1cb8c8fcf7dedb6b191ce54a44cfdaa5c/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=6bbfbbb1cb8c8fcf7dedb6b191ce54a44cfdaa5c",
        "patch": "@@ -387,7 +387,7 @@ class CTxMemPool\n     bool HasNoInputsOf(const CTransaction& tx) const;\n \n     /** Affect CreateNewBlock prioritisation of transactions */\n-    void PrioritiseTransaction(const uint256 hash, const std::string strHash, double dPriorityDelta, const CAmount& nFeeDelta);\n+    void PrioritiseTransaction(const uint256 hash, const std::string& strHash, double dPriorityDelta, const CAmount& nFeeDelta);\n     void ApplyDeltas(const uint256 hash, double &dPriorityDelta, CAmount &nFeeDelta) const;\n     void ClearPrioritisation(const uint256 hash);\n "
      }
    ]
  },
  {
    "sha": "959bb93dde14695350dfbac5a1cf57f53e6c716d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NTliYjkzZGRlMTQ2OTUzNTBkZmJhYzVhMWNmNTdmNTNlNmM3MTZk",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2015-10-31T09:12:20Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2015-10-31T09:12:20Z"
      },
      "message": "add std:: where missing and prevent std namespace pollution",
      "tree": {
        "sha": "0f86df9ea1e5e0fb9c75aea517b725e1dd68da87",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0f86df9ea1e5e0fb9c75aea517b725e1dd68da87"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/959bb93dde14695350dfbac5a1cf57f53e6c716d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/959bb93dde14695350dfbac5a1cf57f53e6c716d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/959bb93dde14695350dfbac5a1cf57f53e6c716d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/959bb93dde14695350dfbac5a1cf57f53e6c716d/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "6bbfbbb1cb8c8fcf7dedb6b191ce54a44cfdaa5c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6bbfbbb1cb8c8fcf7dedb6b191ce54a44cfdaa5c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6bbfbbb1cb8c8fcf7dedb6b191ce54a44cfdaa5c"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 5,
      "deletions": 7
    },
    "files": [
      {
        "sha": "21310f944d007158c34ff46ae9431d46ab57e7d0",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 7,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/959bb93dde14695350dfbac5a1cf57f53e6c716d/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/959bb93dde14695350dfbac5a1cf57f53e6c716d/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=959bb93dde14695350dfbac5a1cf57f53e6c716d",
        "patch": "@@ -16,8 +16,6 @@\n #include \"utiltime.h\"\n #include \"version.h\"\n \n-using namespace std;\n-\n CTxMemPoolEntry::CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n                                  int64_t _nTime, double _dPriority,\n                                  unsigned int _nHeight, bool poolHasNoInputsOf):\n@@ -479,7 +477,7 @@ void CTxMemPool::removeCoinbaseSpends(const CCoinsViewCache *pcoins, unsigned in\n {\n     // Remove transactions spending a coinbase which are now immature\n     LOCK(cs);\n-    list<CTransaction> transactionsToRemove;\n+    std::list<CTransaction> transactionsToRemove;\n     for (indexed_transaction_set::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n         const CTransaction& tx = it->GetTx();\n         BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n@@ -495,15 +493,15 @@ void CTxMemPool::removeCoinbaseSpends(const CCoinsViewCache *pcoins, unsigned in\n         }\n     }\n     BOOST_FOREACH(const CTransaction& tx, transactionsToRemove) {\n-        list<CTransaction> removed;\n+        std::list<CTransaction> removed;\n         remove(tx, removed, true);\n     }\n }\n \n void CTxMemPool::removeConflicts(const CTransaction &tx, std::list<CTransaction>& removed)\n {\n     // Remove transactions which depend on inputs of tx, recursively\n-    list<CTransaction> result;\n+    std::list<CTransaction> result;\n     LOCK(cs);\n     BOOST_FOREACH(const CTxIn &txin, tx.vin) {\n         std::map<COutPoint, CInPoint>::iterator it = mapNextTx.find(txin.prevout);\n@@ -582,7 +580,7 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n     CCoinsViewCache mempoolDuplicate(const_cast<CCoinsViewCache*>(pcoins));\n \n     LOCK(cs);\n-    list<const CTxMemPoolEntry*> waitingOnDependants;\n+    std::list<const CTxMemPoolEntry*> waitingOnDependants;\n     for (indexed_transaction_set::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n         unsigned int i = 0;\n         checkTotal += it->GetTxSize();\n@@ -677,7 +675,7 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n     assert(innerUsage == cachedInnerUsage);\n }\n \n-void CTxMemPool::queryHashes(vector<uint256>& vtxid)\n+void CTxMemPool::queryHashes(std::vector<uint256>& vtxid)\n {\n     vtxid.clear();\n "
      }
    ]
  },
  {
    "sha": "9814f52cdf36dc62ead25615389e619cfcb7f95b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ODE0ZjUyY2RmMzZkYzYyZWFkMjU2MTUzODllNjE5Y2ZjYjdmOTVi",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2015-10-31T09:13:27Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2015-10-31T09:13:27Z"
      },
      "message": "use correct format for function definitions",
      "tree": {
        "sha": "c7ed92a33c6463488a8cc41f6ccb9ded0abc6d1a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c7ed92a33c6463488a8cc41f6ccb9ded0abc6d1a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9814f52cdf36dc62ead25615389e619cfcb7f95b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9814f52cdf36dc62ead25615389e619cfcb7f95b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9814f52cdf36dc62ead25615389e619cfcb7f95b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9814f52cdf36dc62ead25615389e619cfcb7f95b/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "959bb93dde14695350dfbac5a1cf57f53e6c716d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/959bb93dde14695350dfbac5a1cf57f53e6c716d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/959bb93dde14695350dfbac5a1cf57f53e6c716d"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 11,
      "deletions": 10
    },
    "files": [
      {
        "sha": "0ab55b5da17114a79c0fa9b3b75fd7ab795e2a4e",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 10,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9814f52cdf36dc62ead25615389e619cfcb7f95b/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9814f52cdf36dc62ead25615389e619cfcb7f95b/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=9814f52cdf36dc62ead25615389e619cfcb7f95b",
        "patch": "@@ -36,8 +36,7 @@ CTxMemPoolEntry::CTxMemPoolEntry(const CTxMemPoolEntry& other)\n     *this = other;\n }\n \n-double\n-CTxMemPoolEntry::GetPriority(unsigned int currentHeight) const\n+double CTxMemPoolEntry::GetPriority(unsigned int currentHeight) const\n {\n     CAmount nValueIn = tx.GetValueOut()+nFee;\n     double deltaPriority = ((double)(currentHeight-nHeight)*nValueIn)/nModSize;\n@@ -705,8 +704,7 @@ double CTxMemPool::estimatePriority(int nBlocks) const\n     return minerPolicyEstimator->estimatePriority(nBlocks);\n }\n \n-bool\n-CTxMemPool::WriteFeeEstimates(CAutoFile& fileout) const\n+bool CTxMemPool::WriteFeeEstimates(CAutoFile& fileout) const\n {\n     try {\n         LOCK(cs);\n@@ -721,8 +719,7 @@ CTxMemPool::WriteFeeEstimates(CAutoFile& fileout) const\n     return true;\n }\n \n-bool\n-CTxMemPool::ReadFeeEstimates(CAutoFile& filein)\n+bool CTxMemPool::ReadFeeEstimates(CAutoFile& filein)\n {\n     try {\n         int nVersionRequired, nVersionThatWrote;\n@@ -778,7 +775,8 @@ bool CTxMemPool::HasNoInputsOf(const CTransaction &tx) const\n \n CCoinsViewMemPool::CCoinsViewMemPool(CCoinsView *baseIn, CTxMemPool &mempoolIn) : CCoinsViewBacked(baseIn), mempool(mempoolIn) { }\n \n-bool CCoinsViewMemPool::GetCoins(const uint256 &txid, CCoins &coins) const {\n+bool CCoinsViewMemPool::GetCoins(const uint256 &txid, CCoins &coins) const\n+{\n     // If an entry in the mempool exists, always return that one, as it's guaranteed to never\n     // conflict with the underlying cache, and it cannot have pruned entries (as it contains full)\n     // transactions. First checking the underlying cache risks returning a pruned entry instead.\n@@ -790,17 +788,20 @@ bool CCoinsViewMemPool::GetCoins(const uint256 &txid, CCoins &coins) const {\n     return (base->GetCoins(txid, coins) && !coins.IsPruned());\n }\n \n-bool CCoinsViewMemPool::HaveCoins(const uint256 &txid) const {\n+bool CCoinsViewMemPool::HaveCoins(const uint256 &txid) const\n+{\n     return mempool.exists(txid) || base->HaveCoins(txid);\n }\n \n-size_t CTxMemPool::DynamicMemoryUsage() const {\n+size_t CTxMemPool::DynamicMemoryUsage() const\n+{\n     LOCK(cs);\n     // Estimate the overhead of mapTx to be 9 pointers + an allocation, as no exact formula for boost::multi_index_contained is implemented.\n     return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 9 * sizeof(void*)) * mapTx.size() + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + memusage::DynamicUsage(mapLinks) + cachedInnerUsage;\n }\n \n-void CTxMemPool::RemoveStaged(setEntries &stage) {\n+void CTxMemPool::RemoveStaged(setEntries &stage)\n+{\n     AssertLockHeld(cs);\n     UpdateForRemoveFromMempool(stage);\n     BOOST_FOREACH(const txiter& it, stage) {"
      }
    ]
  }
]