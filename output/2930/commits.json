[
  {
    "sha": "bdd0c59ab0b412b3e8595bd95f635f975e22bb85",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZGQwYzU5YWIwYjQxMmIzZTg1OTViZDk1ZjYzNWY5NzVlMjJiYjg1",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2013-08-24T13:07:17Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2013-08-29T08:38:51Z"
      },
      "message": "Bitcoin-Qt: fixes for using display unit from options\n\n- extend PaymentServer with setOptionsModel() and rework initNetManager()\n  to make use of that\n- fix all other places in the code to use display unit from options and no\n  hard-coded unit",
      "tree": {
        "sha": "3c54fa2eedf564de1a90cbfb2158b9ecc5dcb9ff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3c54fa2eedf564de1a90cbfb2158b9ecc5dcb9ff"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bdd0c59ab0b412b3e8595bd95f635f975e22bb85",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bdd0c59ab0b412b3e8595bd95f635f975e22bb85",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bdd0c59ab0b412b3e8595bd95f635f975e22bb85",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bdd0c59ab0b412b3e8595bd95f635f975e22bb85/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "ff33a3470dd1d1446549d02609c991c0490e0fdf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff33a3470dd1d1446549d02609c991c0490e0fdf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ff33a3470dd1d1446549d02609c991c0490e0fdf"
      }
    ],
    "stats": {
      "total": 117,
      "additions": 67,
      "deletions": 50
    },
    "files": [
      {
        "sha": "f2386f3cff44c6268b112fd975351a7e2aaaf0bb",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bdd0c59ab0b412b3e8595bd95f635f975e22bb85/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bdd0c59ab0b412b3e8595bd95f635f975e22bb85/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=bdd0c59ab0b412b3e8595bd95f635f975e22bb85",
        "patch": "@@ -300,7 +300,8 @@ int main(int argc, char *argv[])\n                 optionsModel.Upgrade(); // Must be done after AppInit2\n \n                 PaymentServer::LoadRootCAs();\n-                paymentServer->initNetManager(optionsModel);\n+                paymentServer->setOptionsModel(&optionsModel);\n+                paymentServer->initNetManager();\n \n                 if (splashref)\n                     splash.finish(&window);"
      },
      {
        "sha": "bb9eb60e5bd5a90aa68a1632d9fe55c07c2de2f5",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bdd0c59ab0b412b3e8595bd95f635f975e22bb85/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bdd0c59ab0b412b3e8595bd95f635f975e22bb85/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=bdd0c59ab0b412b3e8595bd95f635f975e22bb85",
        "patch": "@@ -670,9 +670,12 @@ void BitcoinGUI::closeEvent(QCloseEvent *event)\n \n void BitcoinGUI::askFee(qint64 nFeeRequired, bool *payFee)\n {\n+    if (!clientModel || !clientModel->getOptionsModel())\n+        return;\n+\n     QString strMessage = tr(\"This transaction is over the size limit. You can still send it for a fee of %1, \"\n         \"which goes to the nodes that process your transaction and helps to support the network. \"\n-        \"Do you want to pay the fee?\").arg(BitcoinUnits::formatWithUnit(BitcoinUnits::BTC, nFeeRequired));\n+        \"Do you want to pay the fee?\").arg(BitcoinUnits::formatWithUnit(clientModel->getOptionsModel()->getDisplayUnit(), nFeeRequired));\n     QMessageBox::StandardButton retval = QMessageBox::question(\n           this, tr(\"Confirm transaction fee\"), strMessage,\n           QMessageBox::Yes|QMessageBox::Cancel, QMessageBox::Yes);"
      },
      {
        "sha": "c7c6f6706a2137c9ff284bffd57fb229bce8b74e",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 6,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bdd0c59ab0b412b3e8595bd95f635f975e22bb85/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bdd0c59ab0b412b3e8595bd95f635f975e22bb85/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=bdd0c59ab0b412b3e8595bd95f635f975e22bb85",
        "patch": "@@ -92,7 +92,7 @@ static void ReportInvalidCertificate(const QSslCertificate& cert)\n }\n \n //\n-// Load openSSL's list of root certificate authorities\n+// Load OpenSSL's list of root certificate authorities\n //\n void PaymentServer::LoadRootCAs(X509_STORE* _store)\n {\n@@ -147,7 +147,7 @@ void PaymentServer::LoadRootCAs(X509_STORE* _store)\n         const unsigned char *data = (const unsigned char *)certData.data();\n \n         X509* x509 = d2i_X509(0, &data, certData.size());\n-        if (x509 && X509_STORE_add_cert( PaymentServer::certStore, x509))\n+        if (x509 && X509_STORE_add_cert(PaymentServer::certStore, x509))\n         {\n             // Note: X509_STORE_free will free the X509* objects when\n             // the PaymentServer is destroyed\n@@ -303,18 +303,20 @@ bool PaymentServer::eventFilter(QObject *, QEvent *event)\n     return false;\n }\n \n-void PaymentServer::initNetManager(const OptionsModel& options)\n+void PaymentServer::initNetManager()\n {\n+    if (!optionsModel)\n+        return;\n     if (netManager != NULL)\n         delete netManager;\n \n     // netManager is used to fetch paymentrequests given in bitcoin: URI's\n     netManager = new QNetworkAccessManager(this);\n \n-    // Use proxy settings from options:\n+    // Use proxy settings from optionsModel:\n     QString proxyIP;\n     quint16 proxyPort;\n-    if (options.getProxySettings(proxyIP, proxyPort))\n+    if (optionsModel->getProxySettings(proxyIP, proxyPort))\n     {\n         QNetworkProxy proxy;\n         proxy.setType(QNetworkProxy::Socks5Proxy);\n@@ -435,13 +437,16 @@ bool\n PaymentServer::processPaymentRequest(PaymentRequestPlus& request,\n                                      QList<SendCoinsRecipient>& recipients)\n {\n+    if (!optionsModel)\n+        return false;\n+\n     QList<std::pair<CScript,qint64> > sendingTos = request.getPayTo();\n     qint64 totalAmount = 0;\n     foreach(const PAIRTYPE(CScript, qint64)& sendingTo, sendingTos) {\n         CTxOut txOut(sendingTo.second, sendingTo.first);\n         if (txOut.IsDust(CTransaction::nMinRelayTxFee)) {\n             QString message = QObject::tr(\"Requested payment amount (%1) too small\")\n-                .arg(BitcoinUnits::formatWithUnit(BitcoinUnits::BTC, sendingTo.second));\n+                .arg(BitcoinUnits::formatWithUnit(optionsModel->getDisplayUnit(), sendingTo.second));\n             qDebug() << message;\n             emit reportError(tr(\"Payment request error\"), message, CClientUIInterface::MODAL);\n             return false;\n@@ -614,3 +619,8 @@ PaymentServer::reportSslErrors(QNetworkReply* reply, const QList<QSslError> &err\n     }\n     emit reportError(tr(\"Network request error\"), errString, CClientUIInterface::MODAL);\n }\n+\n+void PaymentServer::setOptionsModel(OptionsModel *optionsModel)\n+{\n+    this->optionsModel = optionsModel;\n+}"
      },
      {
        "sha": "131ede518e9830895726202c7a6af8d3aa708871",
        "filename": "src/qt/paymentserver.h",
        "status": "modified",
        "additions": 12,
        "deletions": 6,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bdd0c59ab0b412b3e8595bd95f635f975e22bb85/src/qt/paymentserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bdd0c59ab0b412b3e8595bd95f635f975e22bb85/src/qt/paymentserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.h?ref=bdd0c59ab0b412b3e8595bd95f635f975e22bb85",
        "patch": "@@ -17,7 +17,7 @@\n // received at or during startup in a list.\n //\n // When startup is finished and the main window is\n-// show, a signal is sent to slot uiReady(), which\n+// shown, a signal is sent to slot uiReady(), which\n // emits a receivedURL() signal for any payment\n // requests that happened during startup.\n //\n@@ -70,13 +70,16 @@ class PaymentServer : public QObject\n     // Return certificate store\n     static X509_STORE* getCertStore() { return certStore; }\n \n-    // Setup networking (options is used to get proxy settings)\n-    void initNetManager(const OptionsModel& options);\n+    // Setup networking\n+    void initNetManager();\n \n     // Constructor registers this on the parent QApplication to\n     // receive QEvent::FileOpen events\n     bool eventFilter(QObject *object, QEvent *event);\n \n+    // OptionsModel is used for getting proxy settings and display unit\n+    void setOptionsModel(OptionsModel *optionsModel);\n+\n signals:\n     // Fired when a valid payment request is received\n     void receivedPaymentRequest(SendCoinsRecipient);\n@@ -106,12 +109,15 @@ private slots:\n     void handleURIOrFile(const QString& s);\n     void fetchRequest(const QUrl& url);\n \n-    bool saveURIs;                 // true during startup\n+    bool saveURIs;                      // true during startup\n     QLocalServer* uriServer;\n-    static X509_STORE* certStore; // Trusted root certificates\n+\n+    static X509_STORE* certStore;       // Trusted root certificates\n     static void freeCertStore();\n \n-    QNetworkAccessManager* netManager; // Used to fetch payment requests\n+    QNetworkAccessManager* netManager;  // Used to fetch payment requests\n+\n+    OptionsModel *optionsModel;\n };\n \n #endif // PAYMENTSERVER_H"
      },
      {
        "sha": "e3fec61046d24e089de614c0b6557ed5437ca0ef",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 14,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bdd0c59ab0b412b3e8595bd95f635f975e22bb85/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bdd0c59ab0b412b3e8595bd95f635f975e22bb85/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=bdd0c59ab0b412b3e8595bd95f635f975e22bb85",
        "patch": "@@ -63,12 +63,12 @@ SendCoinsDialog::~SendCoinsDialog()\n \n void SendCoinsDialog::on_sendButton_clicked()\n {\n+    if(!model || !model->getOptionsModel())\n+        return;\n+\n     QList<SendCoinsRecipient> recipients;\n     bool valid = true;\n \n-    if(!model)\n-        return;\n-\n     for(int i = 0; i < ui->entries->count(); ++i)\n     {\n         SendCoinsEntry *entry = qobject_cast<SendCoinsEntry*>(ui->entries->itemAt(i)->widget());\n@@ -94,7 +94,7 @@ void SendCoinsDialog::on_sendButton_clicked()\n     QStringList formatted;\n     foreach(const SendCoinsRecipient &rcp, recipients)\n     {\n-        QString amount = BitcoinUnits::formatWithUnit(BitcoinUnits::BTC, rcp.amount);\n+        QString amount = BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), rcp.amount);\n         if (rcp.authenticatedMerchant.isEmpty())\n         {\n             QString address = rcp.address;\n@@ -158,7 +158,7 @@ void SendCoinsDialog::on_sendButton_clicked()\n     case WalletModel::AmountWithFeeExceedsBalance:\n         QMessageBox::warning(this, tr(\"Send Coins\"),\n             tr(\"The total exceeds your balance when the %1 transaction fee is included.\").\n-            arg(BitcoinUnits::formatWithUnit(BitcoinUnits::BTC, sendstatus.fee)),\n+            arg(BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), sendstatus.fee)),\n             QMessageBox::Ok, QMessageBox::Ok);\n         break;\n     case WalletModel::DuplicateAddress:\n@@ -338,18 +338,14 @@ void SendCoinsDialog::setBalance(qint64 balance, qint64 unconfirmedBalance, qint\n {\n     Q_UNUSED(unconfirmedBalance);\n     Q_UNUSED(immatureBalance);\n-    if(!model || !model->getOptionsModel())\n-        return;\n \n-    int unit = model->getOptionsModel()->getDisplayUnit();\n-    ui->labelBalance->setText(BitcoinUnits::formatWithUnit(unit, balance));\n+    if(model && model->getOptionsModel())\n+    {\n+        ui->labelBalance->setText(BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), balance));\n+    }\n }\n \n void SendCoinsDialog::updateDisplayUnit()\n {\n-    if(model && model->getOptionsModel())\n-    {\n-        // Update labelBalance with the current balance and the current unit\n-        ui->labelBalance->setText(BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), model->getBalance()));\n-    }\n+    setBalance(model->getBalance(), 0, 0);\n }"
      },
      {
        "sha": "6c8ad62b2be3a89e84323bac0ad10b80b7920356",
        "filename": "src/qt/test/paymentservertests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bdd0c59ab0b412b3e8595bd95f635f975e22bb85/src/qt/test/paymentservertests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bdd0c59ab0b412b3e8595bd95f635f975e22bb85/src/qt/test/paymentservertests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/paymentservertests.cpp?ref=bdd0c59ab0b412b3e8595bd95f635f975e22bb85",
        "patch": "@@ -58,7 +58,8 @@ void PaymentServerTests::paymentServerTests()\n     X509_STORE* caStore = X509_STORE_new();\n     X509_STORE_add_cert(caStore, parse_b64der_cert(caCert_BASE64));\n     PaymentServer::LoadRootCAs(caStore);\n-    server->initNetManager(optionsModel);\n+    server->setOptionsModel(&optionsModel);\n+    server->initNetManager();\n     server->uiReady();\n \n     // Now feed PaymentRequests to server, and observe signals it produces:"
      },
      {
        "sha": "55875c2e46fdaa3218128ea56210d82db719b904",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bdd0c59ab0b412b3e8595bd95f635f975e22bb85/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bdd0c59ab0b412b3e8595bd95f635f975e22bb85/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=bdd0c59ab0b412b3e8595bd95f635f975e22bb85",
        "patch": "@@ -32,7 +32,7 @@ QString TransactionDesc::FormatTxStatus(const CWalletTx& wtx)\n     }\n }\n \n-QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx)\n+QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, int unit)\n {\n     QString strHTML;\n \n@@ -129,7 +129,7 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx)\n                 nUnmatured += wallet->GetCredit(txout);\n             strHTML += \"<b>\" + tr(\"Credit\") + \":</b> \";\n             if (wtx.IsInMainChain())\n-                strHTML += BitcoinUnits::formatWithUnit(BitcoinUnits::BTC, nUnmatured)+ \" (\" + tr(\"matures in %n more block(s)\", \"\", wtx.GetBlocksToMaturity()) + \")\";\n+                strHTML += BitcoinUnits::formatWithUnit(unit, nUnmatured)+ \" (\" + tr(\"matures in %n more block(s)\", \"\", wtx.GetBlocksToMaturity()) + \")\";\n             else\n                 strHTML += \"(\" + tr(\"not accepted\") + \")\";\n             strHTML += \"<br>\";\n@@ -139,7 +139,7 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx)\n             //\n             // Credit\n             //\n-            strHTML += \"<b>\" + tr(\"Credit\") + \":</b> \" + BitcoinUnits::formatWithUnit(BitcoinUnits::BTC, nNet) + \"<br>\";\n+            strHTML += \"<b>\" + tr(\"Credit\") + \":</b> \" + BitcoinUnits::formatWithUnit(unit, nNet) + \"<br>\";\n         }\n         else\n         {\n@@ -175,21 +175,21 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx)\n                         }\n                     }\n \n-                    strHTML += \"<b>\" + tr(\"Debit\") + \":</b> \" + BitcoinUnits::formatWithUnit(BitcoinUnits::BTC, -txout.nValue) + \"<br>\";\n+                    strHTML += \"<b>\" + tr(\"Debit\") + \":</b> \" + BitcoinUnits::formatWithUnit(unit, -txout.nValue) + \"<br>\";\n                 }\n \n                 if (fAllToMe)\n                 {\n                     // Payment to self\n                     int64 nChange = wtx.GetChange();\n                     int64 nValue = nCredit - nChange;\n-                    strHTML += \"<b>\" + tr(\"Debit\") + \":</b> \" + BitcoinUnits::formatWithUnit(BitcoinUnits::BTC, -nValue) + \"<br>\";\n-                    strHTML += \"<b>\" + tr(\"Credit\") + \":</b> \" + BitcoinUnits::formatWithUnit(BitcoinUnits::BTC, nValue) + \"<br>\";\n+                    strHTML += \"<b>\" + tr(\"Debit\") + \":</b> \" + BitcoinUnits::formatWithUnit(unit, -nValue) + \"<br>\";\n+                    strHTML += \"<b>\" + tr(\"Credit\") + \":</b> \" + BitcoinUnits::formatWithUnit(unit, nValue) + \"<br>\";\n                 }\n \n                 int64 nTxFee = nDebit - GetValueOut(wtx);\n                 if (nTxFee > 0)\n-                    strHTML += \"<b>\" + tr(\"Transaction fee\") + \":</b> \" + BitcoinUnits::formatWithUnit(BitcoinUnits::BTC, -nTxFee) + \"<br>\";\n+                    strHTML += \"<b>\" + tr(\"Transaction fee\") + \":</b> \" + BitcoinUnits::formatWithUnit(unit, -nTxFee) + \"<br>\";\n             }\n             else\n             {\n@@ -198,14 +198,14 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx)\n                 //\n                 BOOST_FOREACH(const CTxIn& txin, wtx.vin)\n                     if (wallet->IsMine(txin))\n-                        strHTML += \"<b>\" + tr(\"Debit\") + \":</b> \" + BitcoinUnits::formatWithUnit(BitcoinUnits::BTC, -wallet->GetDebit(txin)) + \"<br>\";\n+                        strHTML += \"<b>\" + tr(\"Debit\") + \":</b> \" + BitcoinUnits::formatWithUnit(unit, -wallet->GetDebit(txin)) + \"<br>\";\n                 BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n                     if (wallet->IsMine(txout))\n-                        strHTML += \"<b>\" + tr(\"Credit\") + \":</b> \" + BitcoinUnits::formatWithUnit(BitcoinUnits::BTC, wallet->GetCredit(txout)) + \"<br>\";\n+                        strHTML += \"<b>\" + tr(\"Credit\") + \":</b> \" + BitcoinUnits::formatWithUnit(unit, wallet->GetCredit(txout)) + \"<br>\";\n             }\n         }\n \n-        strHTML += \"<b>\" + tr(\"Net amount\") + \":</b> \" + BitcoinUnits::formatWithUnit(BitcoinUnits::BTC, nNet, true) + \"<br>\";\n+        strHTML += \"<b>\" + tr(\"Net amount\") + \":</b> \" + BitcoinUnits::formatWithUnit(unit, nNet, true) + \"<br>\";\n \n         //\n         // Message\n@@ -243,10 +243,10 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx)\n             strHTML += \"<hr><br>\" + tr(\"Debug information\") + \"<br><br>\";\n             BOOST_FOREACH(const CTxIn& txin, wtx.vin)\n                 if(wallet->IsMine(txin))\n-                    strHTML += \"<b>\" + tr(\"Debit\") + \":</b> \" + BitcoinUnits::formatWithUnit(BitcoinUnits::BTC, -wallet->GetDebit(txin)) + \"<br>\";\n+                    strHTML += \"<b>\" + tr(\"Debit\") + \":</b> \" + BitcoinUnits::formatWithUnit(unit, -wallet->GetDebit(txin)) + \"<br>\";\n             BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n                 if(wallet->IsMine(txout))\n-                    strHTML += \"<b>\" + tr(\"Credit\") + \":</b> \" + BitcoinUnits::formatWithUnit(BitcoinUnits::BTC, wallet->GetCredit(txout)) + \"<br>\";\n+                    strHTML += \"<b>\" + tr(\"Credit\") + \":</b> \" + BitcoinUnits::formatWithUnit(unit, wallet->GetCredit(txout)) + \"<br>\";\n \n             strHTML += \"<br><b>\" + tr(\"Transaction\") + \":</b><br>\";\n             strHTML += GUIUtil::HtmlEscape(wtx.ToString(), true);\n@@ -274,7 +274,7 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx)\n                                     strHTML += GUIUtil::HtmlEscape(wallet->mapAddressBook[address].name) + \" \";\n                                 strHTML += QString::fromStdString(CBitcoinAddress(address).ToString());\n                             }\n-                            strHTML = strHTML + \" \" + tr(\"Amount\") + \"=\" + BitcoinUnits::formatWithUnit(BitcoinUnits::BTC, vout.nValue);\n+                            strHTML = strHTML + \" \" + tr(\"Amount\") + \"=\" + BitcoinUnits::formatWithUnit(unit, vout.nValue);\n                             strHTML = strHTML + \" IsMine=\" + (wallet->IsMine(vout) ? tr(\"true\") : tr(\"false\")) + \"</li>\";\n                         }\n                     }"
      },
      {
        "sha": "a659281dd2f1d01e9d994b05b8053558a2a5f334",
        "filename": "src/qt/transactiondesc.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bdd0c59ab0b412b3e8595bd95f635f975e22bb85/src/qt/transactiondesc.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bdd0c59ab0b412b3e8595bd95f635f975e22bb85/src/qt/transactiondesc.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.h?ref=bdd0c59ab0b412b3e8595bd95f635f975e22bb85",
        "patch": "@@ -14,7 +14,7 @@ class TransactionDesc: public QObject\n     Q_OBJECT\n \n public:\n-    static QString toHTML(CWallet *wallet, CWalletTx &wtx);\n+    static QString toHTML(CWallet *wallet, CWalletTx &wtx, int unit);\n \n private:\n     TransactionDesc() {}"
      },
      {
        "sha": "625e6572954bb6ac486b429b561df1c02ca337cb",
        "filename": "src/qt/transactiontablemodel.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bdd0c59ab0b412b3e8595bd95f635f975e22bb85/src/qt/transactiontablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bdd0c59ab0b412b3e8595bd95f635f975e22bb85/src/qt/transactiontablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.cpp?ref=bdd0c59ab0b412b3e8595bd95f635f975e22bb85",
        "patch": "@@ -48,11 +48,12 @@ struct TxLessThan\n class TransactionTablePriv\n {\n public:\n-    TransactionTablePriv(CWallet *wallet, TransactionTableModel *parent):\n-            wallet(wallet),\n-            parent(parent)\n+    TransactionTablePriv(CWallet *wallet, TransactionTableModel *parent) :\n+        wallet(wallet),\n+        parent(parent)\n     {\n     }\n+\n     CWallet *wallet;\n     TransactionTableModel *parent;\n \n@@ -200,19 +201,18 @@ class TransactionTablePriv\n         }\n     }\n \n-    QString describe(TransactionRecord *rec)\n+    QString describe(TransactionRecord *rec, int unit)\n     {\n         {\n             LOCK(wallet->cs_wallet);\n             std::map<uint256, CWalletTx>::iterator mi = wallet->mapWallet.find(rec->hash);\n             if(mi != wallet->mapWallet.end())\n             {\n-                return TransactionDesc::toHTML(wallet, mi->second);\n+                return TransactionDesc::toHTML(wallet, mi->second, unit);\n             }\n         }\n         return QString(\"\");\n     }\n-\n };\n \n TransactionTableModel::TransactionTableModel(CWallet* wallet, WalletModel *parent):\n@@ -561,7 +561,7 @@ QVariant TransactionTableModel::data(const QModelIndex &index, int role) const\n     case DateRole:\n         return QDateTime::fromTime_t(static_cast<uint>(rec->time));\n     case LongDescriptionRole:\n-        return priv->describe(rec);\n+        return priv->describe(rec, walletModel->getOptionsModel()->getDisplayUnit());\n     case AddressRole:\n         return QString::fromStdString(rec->address);\n     case LabelRole:"
      }
    ]
  }
]