laanwj,2017-09-11T22:07:38Z,"I'm scared that we use floats for monetary values in these places, even when just for display. This is ok for a workaround, but in the long run it would be preferable for these to be converted to fixed point math.",https://github.com/bitcoin/bitcoin/pull/11303#issuecomment-328672860,328672860,
MarcoFalke,2017-09-12T07:13:11Z,"Concept ACK 1789e4675b17f274fcb0761321e6fd249a102f40. I think it is fine to use double for fee estimation, as it is an approximation anyway. The rounding should take care of not violating the edge cases.",https://github.com/bitcoin/bitcoin/pull/11303#issuecomment-328761281,328761281,
MarcoFalke,2017-09-12T07:14:37Z,The bench changes seem unrelated to estimatefee. Shouldn't those go to another pull?,https://github.com/bitcoin/bitcoin/pull/11303#issuecomment-328761583,328761583,
morcos,2017-09-12T13:37:40Z,"+1 splitting the changes  (EDIT: maybe not worth it now, but i would have preferred that)\n\n@laanwj I don't think it makes sense to use integer math for fee estimation.  The bug here wasn't necessarily caused by floating point math but by the fact that we were implicitly taking a floor to round the answer to an integer whereas we should have been rounding or ceiling.  But we would still need to",https://github.com/bitcoin/bitcoin/pull/11303#issuecomment-328855751,328855751,
TheBlueMatt,2017-09-12T14:40:36Z,"All of the changes are from -Wfloat-conversion, so I figured I'd dump them all together, otherwise I would have just skipped the bench/wallet/etc changes and only done the CFeeRate ones.",https://github.com/bitcoin/bitcoin/pull/11303#issuecomment-328873988,328873988,
morcos,2017-09-12T14:47:13Z,"ACK 1789e46\n\nThis doesn't fix all cases of 999 estimates though, my guess is the rest are caused by tracking fee estimation for transactions which enter mempool via reorg.  Will fix that separately.",https://github.com/bitcoin/bitcoin/pull/11303#issuecomment-328876032,328876032,
MarcoFalke,2017-09-30T16:07:07Z,Tested ACK 1789e4675b17f274fcb0761321e6fd249a102f40,https://github.com/bitcoin/bitcoin/pull/11303#issuecomment-333318292,333318292,
sipa,2017-09-12T00:39:01Z,"In commit ""Remove countMaskInv caching in bench framework"".\n\nIsn't countMask always a power of two minus one? If so, we could just remember the number of bits in it, and use a shift instead of a division?\n\nEDIT: this doesn't apply here, as you can't shift a double, but does in line 64.",https://github.com/bitcoin/bitcoin/pull/11303#discussion_r138227579,138227579,src/bench/bench.cpp
sipa,2017-09-12T00:42:26Z,"In commit ""Make float <-> int casts explicit outside of test, qt, CFeeRate""\n\nNit: for primitive types we usually use C-style casts for brevity (in many places in this commit).",https://github.com/bitcoin/bitcoin/pull/11303#discussion_r138228034,138228034,src/policy/fees.cpp
TheBlueMatt,2017-09-12T00:50:14Z,"Heh, I was assuming based on #10498 that we want to migrate. I dont care either way.",https://github.com/bitcoin/bitcoin/pull/11303#discussion_r138228857,138228857,src/policy/fees.cpp
sipa,2017-09-12T00:51:28Z,"Note that #10498 is only about non-primitive types.\n\nI don't care strongly either (it's not in the developer notes) - just pointing out that it differs from common style.",https://github.com/bitcoin/bitcoin/pull/11303#discussion_r138228986,138228986,src/policy/fees.cpp
TheBlueMatt,2017-09-12T00:55:20Z,"Ah, heh, well CAmount we stradle the line...cause its a primitive typedef we often pass it by reference. I'll leave it for now since its a bit more clear what going on.",https://github.com/bitcoin/bitcoin/pull/11303#discussion_r138229425,138229425,src/policy/fees.cpp
TheBlueMatt,2017-09-29T00:00:48Z,"I'm gonna leave this be, I think we need to re-write the bench crap anyway (there is a very massive difference between runs based on the number of iterations, in many of my tests, so all of this garbage needs to just be removed).",https://github.com/bitcoin/bitcoin/pull/11303#discussion_r141763996,141763996,src/bench/bench.cpp
