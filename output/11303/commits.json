[
  {
    "sha": "0b1b9148cd77092d2851eeed5c8c6d5ce117452a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYjFiOTE0OGNkNzcwOTJkMjg1MWVlZWQ1YzhjNmQ1Y2UxMTc0NTJh",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-09-11T19:24:45Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-09-11T19:51:36Z"
      },
      "message": "Remove countMaskInv caching in bench framework\n\nWe were saving a div by caching the inverse as a float, but this\nended up requiring a int -> float -> int conversion, which takes\nalmost as much time as the difference between float mul and div.\n\nThere are lots of other more pressing issues with the bench\nframework which probably require simply removing the adaptive\niteration count stuff anyway.",
      "tree": {
        "sha": "cea43a2e65ce78ee5672be68ab575878d604a345",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cea43a2e65ce78ee5672be68ab575878d604a345"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0b1b9148cd77092d2851eeed5c8c6d5ce117452a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b1b9148cd77092d2851eeed5c8c6d5ce117452a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0b1b9148cd77092d2851eeed5c8c6d5ce117452a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b1b9148cd77092d2851eeed5c8c6d5ce117452a/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "31e72b284ef54c4c221015c8d700946c6143fb7a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31e72b284ef54c4c221015c8d700946c6143fb7a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/31e72b284ef54c4c221015c8d700946c6143fb7a"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 3,
      "deletions": 6
    },
    "files": [
      {
        "sha": "7b307d6f42381e7b27cbfb21c882b88688acf63d",
        "filename": "src/bench/bench.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b1b9148cd77092d2851eeed5c8c6d5ce117452a/src/bench/bench.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b1b9148cd77092d2851eeed5c8c6d5ce117452a/src/bench/bench.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench.cpp?ref=0b1b9148cd77092d2851eeed5c8c6d5ce117452a",
        "patch": "@@ -55,21 +55,20 @@ bool benchmark::State::KeepRunning()\n     else {\n         now = gettimedouble();\n         double elapsed = now - lastTime;\n-        double elapsedOne = elapsed * countMaskInv;\n+        double elapsedOne = elapsed / (countMask + 1);\n         if (elapsedOne < minTime) minTime = elapsedOne;\n         if (elapsedOne > maxTime) maxTime = elapsedOne;\n \n         // We only use relative values, so don't have to handle 64-bit wrap-around specially\n         nowCycles = perf_cpucycles();\n-        uint64_t elapsedOneCycles = (nowCycles - lastCycles) * countMaskInv;\n+        uint64_t elapsedOneCycles = (nowCycles - lastCycles) / (countMask + 1);\n         if (elapsedOneCycles < minCycles) minCycles = elapsedOneCycles;\n         if (elapsedOneCycles > maxCycles) maxCycles = elapsedOneCycles;\n \n         if (elapsed*128 < maxElapsed) {\n           // If the execution was much too fast (1/128th of maxElapsed), increase the count mask by 8x and restart timing.\n           // The restart avoids including the overhead of this code in the measurement.\n           countMask = ((countMask<<3)|7) & ((1LL<<60)-1);\n-          countMaskInv = 1./(countMask+1);\n           count = 0;\n           minTime = std::numeric_limits<double>::max();\n           maxTime = std::numeric_limits<double>::min();\n@@ -81,7 +80,6 @@ bool benchmark::State::KeepRunning()\n           uint64_t newCountMask = ((countMask<<1)|1) & ((1LL<<60)-1);\n           if ((count & newCountMask)==0) {\n               countMask = newCountMask;\n-              countMaskInv = 1./(countMask+1);\n           }\n         }\n     }"
      },
      {
        "sha": "79109eaa5615123e7b196ff94bc1e96b4f00bfcb",
        "filename": "src/bench/bench.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b1b9148cd77092d2851eeed5c8c6d5ce117452a/src/bench/bench.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b1b9148cd77092d2851eeed5c8c6d5ce117452a/src/bench/bench.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench.h?ref=0b1b9148cd77092d2851eeed5c8c6d5ce117452a",
        "patch": "@@ -41,7 +41,7 @@ namespace benchmark {\n         std::string name;\n         double maxElapsed;\n         double beginTime;\n-        double lastTime, minTime, maxTime, countMaskInv;\n+        double lastTime, minTime, maxTime;\n         uint64_t count;\n         uint64_t countMask;\n         uint64_t beginCycles;\n@@ -55,7 +55,6 @@ namespace benchmark {\n             minCycles = std::numeric_limits<uint64_t>::max();\n             maxCycles = std::numeric_limits<uint64_t>::min();\n             countMask = 1;\n-            countMaskInv = 1./(countMask + 1);\n         }\n         bool KeepRunning();\n     };"
      }
    ]
  },
  {
    "sha": "53a6590f496b25174c740927243bf8307541b0b9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1M2E2NTkwZjQ5NmIyNTE3NGM3NDA5MjcyNDNiZjgzMDc1NDFiMGI5",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-09-11T19:43:49Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-09-11T19:51:37Z"
      },
      "message": "Make float <-> int casts explicit outside of test, qt, CFeeRate",
      "tree": {
        "sha": "66e5b7ba754ffd41f58e600993f710e687f23502",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/66e5b7ba754ffd41f58e600993f710e687f23502"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/53a6590f496b25174c740927243bf8307541b0b9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/53a6590f496b25174c740927243bf8307541b0b9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/53a6590f496b25174c740927243bf8307541b0b9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/53a6590f496b25174c740927243bf8307541b0b9/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0b1b9148cd77092d2851eeed5c8c6d5ce117452a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b1b9148cd77092d2851eeed5c8c6d5ce117452a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0b1b9148cd77092d2851eeed5c8c6d5ce117452a"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 7,
      "deletions": 7
    },
    "files": [
      {
        "sha": "ca774cd74b6e26f5ce64fda7a98e33c56b976e35",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53a6590f496b25174c740927243bf8307541b0b9/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53a6590f496b25174c740927243bf8307541b0b9/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=53a6590f496b25174c740927243bf8307541b0b9",
        "patch": "@@ -1043,5 +1043,5 @@ CAmount FeeFilterRounder::round(CAmount currentMinFee)\n     if ((it != feeset.begin() && insecure_rand.rand32() % 3 != 0) || it == feeset.end()) {\n         it--;\n     }\n-    return *it;\n+    return static_cast<CAmount>(*it);\n }"
      },
      {
        "sha": "e0be817048264242f4dcd3cc479a17ee1a4d4ed2",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53a6590f496b25174c740927243bf8307541b0b9/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53a6590f496b25174c740927243bf8307541b0b9/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=53a6590f496b25174c740927243bf8307541b0b9",
        "patch": "@@ -146,7 +146,7 @@ UniValue getpeerinfo(const JSONRPCRequest& request)\n         obj.push_back(Pair(\"timeoffset\", stats.nTimeOffset));\n         if (stats.dPingTime > 0.0)\n             obj.push_back(Pair(\"pingtime\", stats.dPingTime));\n-        if (stats.dMinPing < std::numeric_limits<int64_t>::max()/1e6)\n+        if (stats.dMinPing < static_cast<double>(std::numeric_limits<int64_t>::max())/1e6)\n             obj.push_back(Pair(\"minping\", stats.dMinPing));\n         if (stats.dPingWait > 0.0)\n             obj.push_back(Pair(\"pingwait\", stats.dPingWait));"
      },
      {
        "sha": "929d2235883646fa901592000479ed55e11443d6",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53a6590f496b25174c740927243bf8307541b0b9/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53a6590f496b25174c740927243bf8307541b0b9/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=53a6590f496b25174c740927243bf8307541b0b9",
        "patch": "@@ -507,7 +507,7 @@ class CTxMemPool\n      * check does nothing.\n      */\n     void check(const CCoinsViewCache *pcoins) const;\n-    void setSanityCheck(double dFrequency = 1.0) { nCheckFrequency = dFrequency * 4294967295.0; }\n+    void setSanityCheck(double dFrequency = 1.0) { nCheckFrequency = static_cast<uint32_t>(dFrequency * 4294967295.0); }\n \n     // addUnchecked must updated state for all ancestors of a given transaction,\n     // to track size/count of descendant transactions.  First version of"
      },
      {
        "sha": "1d163a2bbb8c6eb03c2817c7c56778465c112f08",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53a6590f496b25174c740927243bf8307541b0b9/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53a6590f496b25174c740927243bf8307541b0b9/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=53a6590f496b25174c740927243bf8307541b0b9",
        "patch": "@@ -390,11 +390,11 @@ bool CWallet::ChangeWalletPassphrase(const SecureString& strOldWalletPassphrase,\n             {\n                 int64_t nStartTime = GetTimeMillis();\n                 crypter.SetKeyFromPassphrase(strNewWalletPassphrase, pMasterKey.second.vchSalt, pMasterKey.second.nDeriveIterations, pMasterKey.second.nDerivationMethod);\n-                pMasterKey.second.nDeriveIterations = pMasterKey.second.nDeriveIterations * (100 / ((double)(GetTimeMillis() - nStartTime)));\n+                pMasterKey.second.nDeriveIterations = static_cast<unsigned int>(pMasterKey.second.nDeriveIterations * (100 / ((double)(GetTimeMillis() - nStartTime))));\n \n                 nStartTime = GetTimeMillis();\n                 crypter.SetKeyFromPassphrase(strNewWalletPassphrase, pMasterKey.second.vchSalt, pMasterKey.second.nDeriveIterations, pMasterKey.second.nDerivationMethod);\n-                pMasterKey.second.nDeriveIterations = (pMasterKey.second.nDeriveIterations + pMasterKey.second.nDeriveIterations * 100 / ((double)(GetTimeMillis() - nStartTime))) / 2;\n+                pMasterKey.second.nDeriveIterations = (pMasterKey.second.nDeriveIterations + static_cast<unsigned int>(pMasterKey.second.nDeriveIterations * 100 / ((double)(GetTimeMillis() - nStartTime)))) / 2;\n \n                 if (pMasterKey.second.nDeriveIterations < 25000)\n                     pMasterKey.second.nDeriveIterations = 25000;\n@@ -595,11 +595,11 @@ bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n     CCrypter crypter;\n     int64_t nStartTime = GetTimeMillis();\n     crypter.SetKeyFromPassphrase(strWalletPassphrase, kMasterKey.vchSalt, 25000, kMasterKey.nDerivationMethod);\n-    kMasterKey.nDeriveIterations = 2500000 / ((double)(GetTimeMillis() - nStartTime));\n+    kMasterKey.nDeriveIterations = static_cast<unsigned int>(2500000 / ((double)(GetTimeMillis() - nStartTime)));\n \n     nStartTime = GetTimeMillis();\n     crypter.SetKeyFromPassphrase(strWalletPassphrase, kMasterKey.vchSalt, kMasterKey.nDeriveIterations, kMasterKey.nDerivationMethod);\n-    kMasterKey.nDeriveIterations = (kMasterKey.nDeriveIterations + kMasterKey.nDeriveIterations * 100 / ((double)(GetTimeMillis() - nStartTime))) / 2;\n+    kMasterKey.nDeriveIterations = (kMasterKey.nDeriveIterations + static_cast<unsigned int>(kMasterKey.nDeriveIterations * 100 / ((double)(GetTimeMillis() - nStartTime)))) / 2;\n \n     if (kMasterKey.nDeriveIterations < 25000)\n         kMasterKey.nDeriveIterations = 25000;"
      }
    ]
  },
  {
    "sha": "1789e4675b17f274fcb0761321e6fd249a102f40",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNzg5ZTQ2NzViMTdmMjc0ZmNiMDc2MTMyMWU2ZmQyNDlhMTAyZjQw",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-09-11T19:47:09Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-09-11T22:07:52Z"
      },
      "message": "Force explicit double -> int conversion for CFeeRate constructor\n\nThis resolves an issue where estimatesmartfee would return 999\nsat/byte instead of 1000, due to floating point loss of precision\n\nThanks to sipa for suggesting is_integral.",
      "tree": {
        "sha": "d72c88f1091a160d8cfb6aff41aa13d57b9072ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d72c88f1091a160d8cfb6aff41aa13d57b9072ce"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1789e4675b17f274fcb0761321e6fd249a102f40",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1789e4675b17f274fcb0761321e6fd249a102f40",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1789e4675b17f274fcb0761321e6fd249a102f40",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1789e4675b17f274fcb0761321e6fd249a102f40/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "53a6590f496b25174c740927243bf8307541b0b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/53a6590f496b25174c740927243bf8307541b0b9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/53a6590f496b25174c740927243bf8307541b0b9"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 13,
      "deletions": 8
    },
    "files": [
      {
        "sha": "3449cdd6990d5a3af10479ef8e7feea6fd53fc6e",
        "filename": "src/policy/feerate.h",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1789e4675b17f274fcb0761321e6fd249a102f40/src/policy/feerate.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1789e4675b17f274fcb0761321e6fd249a102f40/src/policy/feerate.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/feerate.h?ref=1789e4675b17f274fcb0761321e6fd249a102f40",
        "patch": "@@ -20,10 +20,15 @@ class CFeeRate\n {\n private:\n     CAmount nSatoshisPerK; // unit is satoshis-per-1,000-bytes\n+\n public:\n     /** Fee rate of 0 satoshis per kB */\n     CFeeRate() : nSatoshisPerK(0) { }\n-    explicit CFeeRate(const CAmount& _nSatoshisPerK): nSatoshisPerK(_nSatoshisPerK) { }\n+    template<typename I>\n+    CFeeRate(const I _nSatoshisPerK): nSatoshisPerK(_nSatoshisPerK) {\n+        // We've previously had bugs creep in from silent double->int conversion...\n+        static_assert(std::is_integral<I>::value, \"CFeeRate should be used without floats\");\n+    }\n     /** Constructor for a fee rate in satoshis per kB. The size in bytes must not exceed (2^63 - 1)*/\n     CFeeRate(const CAmount& nFeePaid, size_t nBytes);\n     /**"
      },
      {
        "sha": "8056f385abf3091c66921ea943e1a978e1aef7c6",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1789e4675b17f274fcb0761321e6fd249a102f40/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1789e4675b17f274fcb0761321e6fd249a102f40/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=1789e4675b17f274fcb0761321e6fd249a102f40",
        "patch": "@@ -714,7 +714,7 @@ CFeeRate CBlockPolicyEstimator::estimateRawFee(int confTarget, double successThr\n     if (median < 0)\n         return CFeeRate(0);\n \n-    return CFeeRate(median);\n+    return CFeeRate(llround(median));\n }\n \n unsigned int CBlockPolicyEstimator::HighestTargetTracked(FeeEstimateHorizon horizon) const\n@@ -901,7 +901,7 @@ CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, FeeCalculation\n \n     if (median < 0) return CFeeRate(0); // error condition\n \n-    return CFeeRate(median);\n+    return CFeeRate(llround(median));\n }\n \n "
      },
      {
        "sha": "116210a297486adb03d9ea7f6069abcd8320a6bf",
        "filename": "src/test/mempool_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1789e4675b17f274fcb0761321e6fd249a102f40/src/test/mempool_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1789e4675b17f274fcb0761321e6fd249a102f40/src/test/mempool_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mempool_tests.cpp?ref=1789e4675b17f274fcb0761321e6fd249a102f40",
        "patch": "@@ -559,15 +559,15 @@ BOOST_AUTO_TEST_CASE(MempoolSizeLimitTest)\n     // ... we should keep the same min fee until we get a block\n     pool.removeForBlock(vtx, 1);\n     SetMockTime(42 + 2*CTxMemPool::ROLLING_FEE_HALFLIFE);\n-    BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), (maxFeeRateRemoved.GetFeePerK() + 1000)/2);\n+    BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), llround((maxFeeRateRemoved.GetFeePerK() + 1000)/2.0));\n     // ... then feerate should drop 1/2 each halflife\n \n     SetMockTime(42 + 2*CTxMemPool::ROLLING_FEE_HALFLIFE + CTxMemPool::ROLLING_FEE_HALFLIFE/2);\n-    BOOST_CHECK_EQUAL(pool.GetMinFee(pool.DynamicMemoryUsage() * 5 / 2).GetFeePerK(), (maxFeeRateRemoved.GetFeePerK() + 1000)/4);\n+    BOOST_CHECK_EQUAL(pool.GetMinFee(pool.DynamicMemoryUsage() * 5 / 2).GetFeePerK(), llround((maxFeeRateRemoved.GetFeePerK() + 1000)/4.0));\n     // ... with a 1/2 halflife when mempool is < 1/2 its target size\n \n     SetMockTime(42 + 2*CTxMemPool::ROLLING_FEE_HALFLIFE + CTxMemPool::ROLLING_FEE_HALFLIFE/2 + CTxMemPool::ROLLING_FEE_HALFLIFE/4);\n-    BOOST_CHECK_EQUAL(pool.GetMinFee(pool.DynamicMemoryUsage() * 9 / 2).GetFeePerK(), (maxFeeRateRemoved.GetFeePerK() + 1000)/8);\n+    BOOST_CHECK_EQUAL(pool.GetMinFee(pool.DynamicMemoryUsage() * 9 / 2).GetFeePerK(), llround((maxFeeRateRemoved.GetFeePerK() + 1000)/8.0));\n     // ... with a 1/4 halflife when mempool is < 1/4 its target size\n \n     SetMockTime(42 + 7*CTxMemPool::ROLLING_FEE_HALFLIFE + CTxMemPool::ROLLING_FEE_HALFLIFE/2 + CTxMemPool::ROLLING_FEE_HALFLIFE/4);"
      },
      {
        "sha": "776d3f36ca18a5209bb31401c46b9eea699dbecf",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1789e4675b17f274fcb0761321e6fd249a102f40/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1789e4675b17f274fcb0761321e6fd249a102f40/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=1789e4675b17f274fcb0761321e6fd249a102f40",
        "patch": "@@ -981,7 +981,7 @@ const CTxMemPool::setEntries & CTxMemPool::GetMemPoolChildren(txiter entry) cons\n CFeeRate CTxMemPool::GetMinFee(size_t sizelimit) const {\n     LOCK(cs);\n     if (!blockSinceLastRollingFeeBump || rollingMinimumFeeRate == 0)\n-        return CFeeRate(rollingMinimumFeeRate);\n+        return CFeeRate(llround(rollingMinimumFeeRate));\n \n     int64_t time = GetTime();\n     if (time > lastRollingFeeUpdate + 10) {\n@@ -999,7 +999,7 @@ CFeeRate CTxMemPool::GetMinFee(size_t sizelimit) const {\n             return CFeeRate(0);\n         }\n     }\n-    return std::max(CFeeRate(rollingMinimumFeeRate), incrementalRelayFee);\n+    return std::max(CFeeRate(llround(rollingMinimumFeeRate)), incrementalRelayFee);\n }\n \n void CTxMemPool::trackPackageRemoved(const CFeeRate& rate) {"
      }
    ]
  }
]