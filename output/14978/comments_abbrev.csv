gwillen,2018-12-17T06:02:00Z,"I cleverly made a small change that apparently g++ does not accept but Clang does, so I will have to fix that before it will build on Linux, oops. (I commented on the offending line in the diff.)",https://github.com/bitcoin/bitcoin/pull/14978#issuecomment-447731683,447731683,
gwillen,2018-12-17T07:39:25Z,"Hmm, something is also legitimately broken in the tests, will investigate tomorrow. :-\",https://github.com/bitcoin/bitcoin/pull/14978#issuecomment-447749926,447749926,
DrahtBot,2018-12-17T08:24:49Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#15253](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15253.html) (Net: Consistently log outgoing INV messages",https://github.com/bitcoin/bitcoin/pull/14978#issuecomment-447759931,447759931,
promag,2018-12-17T14:36:13Z,"Concept ACK.\n\n> for use in GUI code\n\nCan you detail the GUI part?\n\n> which is already under development and working-ish.\n\nIs it available?",https://github.com/bitcoin/bitcoin/pull/14978#issuecomment-447867073,447867073,
gwillen,2018-12-17T22:51:46Z,"> Can you detail the GUI part?\n\nI'm adding an interface for offline and multisig signing in the GUI, using PSBT as the on-disk format for the intermediate files. See e.g. how Bitcoin Armory handles offline transactions, which I'm basically copying.\n\n> Is it available?\n\nI pasted it into #bitcoin-core-dev awhile ago -- I will link it here in the comment thread once I'm sure the tip of my",https://github.com/bitcoin/bitcoin/pull/14978#issuecomment-448029296,448029296,
jb55,2018-12-18T03:02:20Z,"@gwillen writes:\n> * Move most PSBT definitions into psbt.h.\n> * Move most PSBT RPC utilities into psbt.{h,cpp}.\n> * Move wallet-touching PSBT RPC utilities (FillPSBT) into\n>     wallet/psbtwallet.{h,cpp}.\n> * Switch exceptions from JSONRPCError() to new PSBTException class.\n> * Split DecodePSBT into DecodeBase64PSBT (old behavior) and DecodeRawPSBT.\n> * Add one new version of DecodeBase64 ",https://github.com/bitcoin/bitcoin/pull/14978#issuecomment-448079641,448079641,
gwillen,2018-12-18T04:15:36Z,"The GUI work is WIP here: https://github.com/gwillen/bitcoin/tree/feature-offline-v1 . I made that branch at a known-working version, since I'm making significant changes to it right now.\n\nIt's not currently based on this PR, which I will have to rebase it onto later; this PR is an extraction of some refactoring that also appears in that PR, plus some other stuff that doesn't yet.",https://github.com/bitcoin/bitcoin/pull/14978#issuecomment-448090750,448090750,
gwillen,2018-12-18T04:16:20Z,"@jb55 Yeah, I can definitely split it out if people prefer. Will take a day or two to get to. I might ask slight forgiveness in some cases where a reasonable intermediate state between two combined changes never existed, and would be hard to recreate.",https://github.com/bitcoin/bitcoin/pull/14978#issuecomment-448090866,448090866,
Empact,2018-12-18T07:49:14Z,"Would be helpful to split the commit up, for review now and for intelligibility when looking back in the future.",https://github.com/bitcoin/bitcoin/pull/14978#issuecomment-448127504,448127504,
achow101,2018-12-19T04:49:04Z,"Concept ACK. Agree with above, split this into multiple commits.",https://github.com/bitcoin/bitcoin/pull/14978#issuecomment-448468508,448468508,
promag,2018-12-19T14:09:07Z,"I definitely agree in splitting it.\n\n@gwillen checked out the branch and looks promising.\n\n",https://github.com/bitcoin/bitcoin/pull/14978#issuecomment-448608549,448608549,
gwillen,2019-01-09T11:13:10Z,"Sorry for the delay. I have split the PR into more reasonable commits. The one that does the bulk of the code movement between files (""Move PSBT definitions and code to separate files"") is now _only_ movement (and adjusting headers / Makefile), and no other substantive changes. \n\nThe final result is exactly the same as before, except for a single stray blank line I had accidentally introduced ",https://github.com/bitcoin/bitcoin/pull/14978#issuecomment-452660611,452660611,
jb55,2019-01-09T16:48:29Z,"This looks much better now! Thanks! \n\nutACK dd45d3febacb40cf68f58eff08f76db2854fc340\n\nThe refactorings look pretty good in general.\n\nI did a quick skim of the code, I didn't see anything obviously wrong but I'm no expert on this part of the codebase.",https://github.com/bitcoin/bitcoin/pull/14978#issuecomment-452766732,452766732,
gwillen,2019-01-09T22:45:56Z,"FWIW I believe the travis failure is spurious -- it failed a single unrelated test, on a single platform, and the code hasn't changed since the last time it succeeded.",https://github.com/bitcoin/bitcoin/pull/14978#issuecomment-452898011,452898011,
gwillen,2019-01-16T00:32:35Z,"(Minor edit to remove a single unnecessary #include line that was bugging me, no significant change.)",https://github.com/bitcoin/bitcoin/pull/14978#issuecomment-454605365,454605365,
Sjors,2019-01-18T17:35:42Z,"Concept ACK.\n\nFunny enough, yesterday I ran into an issue where I needed to reuse `sendrawtransaction`.\n\n@sipa wrote:\n> I'm slightly worried about the use of exceptions in code that use usable in more places than just RPC, as C++ can't guarantee that all possible exceptions are being dealt with at the right layer.\n\n> Would an enum with PSBT-related error codes, plus a enum to string ",https://github.com/bitcoin/bitcoin/pull/14978#issuecomment-455627335,455627335,
gwillen,2019-01-29T06:18:52Z,"@promag @sipa @Sjors Can you have an argument, here or elsewhere, about how error handling should work in cases like this, and then tell me what to do? :-) I am ambivalent between ""better exceptions"" and ""switch to return values"". It seems like Sjors and maybe promag favor door number 1, whereas sipa favors door number 2 for reasons I find entirely defensible, but the result is a little harder to ",https://github.com/bitcoin/bitcoin/pull/14978#issuecomment-458421067,458421067,
promag,2019-01-29T16:55:04Z,"@gwillen I'd avoid using exceptions to control flow. For instance, you have:\n```cpp\nbool FillPSBT(const CWallet* pwallet, PartiallySignedTransaction& psbtx, int sighash_type = 1 /* SIGHASH_ALL */, bool sign = true, bool bip32derivs = false)\n```\nAnd looks like it returns `false` if it fails, but that's wrong. In fact, it throws if some error occurs and returns whether the transaction has a ",https://github.com/bitcoin/bitcoin/pull/14978#issuecomment-458618307,458618307,
sipa,2019-01-30T05:56:57Z,"@gwillen My preference is an enum over exceptions (but both are used in the codebase, so if others feel strongly, feel free to ignore me).",https://github.com/bitcoin/bitcoin/pull/14978#issuecomment-458821958,458821958,
gwillen,2019-01-30T07:57:26Z,"I think I've addressed everything except the error-handling / exceptions stuff, which I'm still thinking about and will punt to tomorrow.\n\nI significantly reworked the FinalizePSBT interface, so it deserves another look. Everything else was relatively minor.",https://github.com/bitcoin/bitcoin/pull/14978#issuecomment-458846994,458846994,
achow101,2019-01-30T20:28:27Z,"I agree that using an enum would be better. We already use enums for other errors  like script_error, etc. So I think it would make sense to continue that pattern here as well.",https://github.com/bitcoin/bitcoin/pull/14978#issuecomment-459096637,459096637,
gwillen,2019-01-31T03:44:13Z,"Ok, I ended up doing something that feels a little gross and unorthodox for the error handling.\n\nThe problems with a new enum are several-fold: Most notably, it would be at least two new enums, since BroadcastTransaction and the various PSBT functions are not really of the same sort, unless we want something like a general-purpose TransactionError type (which I wouldn't be totally against.) Th",https://github.com/bitcoin/bitcoin/pull/14978#issuecomment-459203945,459203945,
gwillen,2019-01-31T04:01:44Z,"Oh, and I think the Travis failure is real -- I think the problem is that actually BroadcastTransaction does NOT belong under wallet/ and needs to be linked even when the wallet is disabled. So right now disabling the wallet causes the link to fail.\n\nSuggestions for where to move it? Right now it's a pair of new files named wallet/transaction.{h,cpp}.",https://github.com/bitcoin/bitcoin/pull/14978#issuecomment-459206704,459206704,
Sjors,2019-01-31T09:37:56Z,"> The ONLY consumer of error codes in any form (as far as I can tell) would be RPC callers,\n\nIn #14912 I plan to move more code into the `ExternalSigner` class, which will be used by both RPC and the GUI.\n\n> general-purpose TransactionError type\n\nWorks for me\n\n> I retained the use of RPCErrorCode and JSONRPCError. Instead of throwing the resulting UniValue objects, I am using out p",https://github.com/bitcoin/bitcoin/pull/14978#issuecomment-459278864,459278864,
ryanofsky,2019-01-31T14:56:00Z,"> > that actually BroadcastTransaction does NOT belong under wallet/\n\n> Indeed it doesn't. Nodes without a wallet can also broadcast transactions and do various things with PSBT. Maybe src/node/transaction.{h,c}? @ryanofsky what makes sense given #10973? I'm assuming it doesn't really belong in src/interfaces?\n\nIt would be reasonable to make `BroadcastTransaction` an `interfaces::Chain` me",https://github.com/bitcoin/bitcoin/pull/14978#issuecomment-459373984,459373984,
gwillen,2019-02-01T01:03:07Z,"@ryanofsky The reason I need something like BroadcastTransaction is that, currently, none of the interfaces:: stuff exports a way to broadcast a transaction that didn't come from the wallet (and I need the RPC-like ability to do it with a blob I was handed.) So probably these codepaths should eventually merge! :-)",https://github.com/bitcoin/bitcoin/pull/14978#issuecomment-459566924,459566924,
Sjors,2019-02-01T12:56:53Z,"By the way `wallet/transaction.{h,cpp}` is still useful, even if not for this PR. E.g. I have a need to move `FundTransaction(CWallet* const pwallet, CMutableTransaction& tx...` out of `rpcwallet.{h,cpp}`\n\nI would probably also wrap that inside a `FundPSBT` method in `wallet/psbtwallet.{h,cpp}`, so that `walletcreatefundedpsbt` doesn't have to deal directly with `CMutableTransaction`. ",https://github.com/bitcoin/bitcoin/pull/14978#issuecomment-459714289,459714289,
gwillen,2019-02-04T22:48:18Z,"@ryanofsky Now that I'm actually trying to do it -- why interfaces::Chain and not interfaces::Node? That seems like a better fit. (Especially since the GUI ClientModel object has a Node interface handy, but I don't see where the GUI easily gets access to a Chain, although I'm not totally sure where to look.)\n\n(Noting that specifically I need to do this in a non-wallet context, for a transactio",https://github.com/bitcoin/bitcoin/pull/14978#issuecomment-460444291,460444291,
ryanofsky,2019-02-04T23:28:42Z,"> Why interfaces::Chain and not interfaces::Node? That seems like a better fit.\n\nYou're right. I didn't look at this PR closely enough and assumed that it was calling `BroadcastTransaction` from the wallet. In this case, a `Chain` method would have to be added at some point (like in #15288), because the `Chain` interface is the only way a separate wallet process can access the node process. Af",https://github.com/bitcoin/bitcoin/pull/14978#issuecomment-460455108,460455108,
gwillen,2019-02-05T00:10:45Z,"Oh, good point. So I'm going ahead with creating src/node for it to live in, and then later I will forward from interfaces::Node (when I actually add a GUI use of it.)",https://github.com/bitcoin/bitcoin/pull/14978#issuecomment-460464163,460464163,
gwillen,2019-02-06T22:42:58Z,"Ok, I think I have fixed the issue with BroadcastTransaction linking, by moving it out of the wallet stuff.\n\nI have made another attempt at the error stuff. :-) This time we have a TransactionError enum, and a translation table from TransactionError to RPCErrorCode, as well as strings for each TransactionError.\n\nThe result is _almost_ faithful, for RPC clients, to how it was before, except",https://github.com/bitcoin/bitcoin/pull/14978#issuecomment-461217722,461217722,
gwillen,2019-02-07T03:27:36Z,"In fact, it turns out that changing the error message wording of BroadcastTransaction at all breaks a bunch of functional tests. Working on it.\n\nEDIT: Yeah the tests definitely require the failure strings from FormatStateMessage. So I'm going to think about how to plumb those through.",https://github.com/bitcoin/bitcoin/pull/14978#issuecomment-461275858,461275858,
gwillen,2019-02-07T11:57:28Z,There we go! Ready for another look.,https://github.com/bitcoin/bitcoin/pull/14978#issuecomment-461390320,461390320,
Sjors,2019-02-10T15:52:50Z,"re-utACK 6097ae0, main changes since my last review:\n* moved `BroadcastTransaction` to `src/node` instead of `src/wallet/transaction.cpp`, because it's not a wallet thing.\n* switched away from exceptions d988f06\n* `CombinePSBTs` now returns boolean and has an `&out` and `&error` param",https://github.com/bitcoin/bitcoin/pull/14978#issuecomment-462144019,462144019,
gwillen,2019-02-11T22:23:26Z,Rebased.,https://github.com/bitcoin/bitcoin/pull/14978#issuecomment-462519173,462519173,
gwillen,2019-02-14T02:32:03Z,"Can 1-2 people who already acked, but haven't looked in awhile, take a quick look and give a reack? I do not expect further changes unless I am forced to rebase again.",https://github.com/bitcoin/bitcoin/pull/14978#issuecomment-463461849,463461849,
achow101,2019-02-14T03:28:10Z,utACK 102faad81efa1cb12c29c466cfe81fc8c7351e1d,https://github.com/bitcoin/bitcoin/pull/14978#issuecomment-463473599,463473599,
meshcollider,2019-02-14T08:47:57Z,@gwillen thanks for being so proactive with addressing review comments :),https://github.com/bitcoin/bitcoin/pull/14978#issuecomment-463543262,463543262,
gwillen,2018-12-17T06:00:56Z,"Ok, I thought I was very clever converting this from a std::vector&lt;unsigned char&gt; to a std::string, but the reality appears to be that Clang is happy with this line and g++ hates it, so I'm going to have to massage this back towards the original version a bit, in order to get it to build anywhere but macOS.",https://github.com/bitcoin/bitcoin/pull/14978#discussion_r242032923,242032923,src/core_read.cpp
practicalswift,2018-12-17T11:57:12Z,"Space before `(`. Applies throughout this PR.\n\nPlease run all new files through `clang-format` :-)",https://github.com/bitcoin/bitcoin/pull/14978#discussion_r242119943,242119943,src/psbt.h
gwillen,2018-12-17T17:01:27Z,"This is moved code, none of this code is new -- I expect I should not actually clang-format it, to preserve move-detection?",https://github.com/bitcoin/bitcoin/pull/14978#discussion_r242232019,242232019,src/psbt.h
promag,2018-12-17T17:09:02Z,Agree.,https://github.com/bitcoin/bitcoin/pull/14978#discussion_r242234962,242234962,src/psbt.h
practicalswift,2018-12-17T17:13:01Z,Makes sense!,https://github.com/bitcoin/bitcoin/pull/14978#discussion_r242236541,242236541,src/psbt.h
achow101,2019-01-09T18:22:01Z,nit: variable name should be snake_case. See doc/developer-notes.md for naming convention.,https://github.com/bitcoin/bitcoin/pull/14978#discussion_r246489067,246489067,src/util/strencodings.cpp
achow101,2019-01-09T18:54:03Z,This results in RPC errors with a code `RPC_MISC_ERROR`. I think it would be better if you could somehow make the error code more specific (the message still comes through).,https://github.com/bitcoin/bitcoin/pull/14978#discussion_r246499022,246499022,src/psbt.h
gwillen,2019-01-09T22:43:14Z,"This was copied from surrounding context (it just wraps the c_str version of the same function, which has the same parameter named the same thing, and I'm propagating it outwards to the wrapper.)",https://github.com/bitcoin/bitcoin/pull/14978#discussion_r246574699,246574699,src/util/strencodings.cpp
gwillen,2019-01-09T22:44:21Z,"Yeah, I'd love any thoughts on how to accomplish this without gunking up non-RPC code too much when it calls this codepath. I don't really want this to depend on the RPC stuff.",https://github.com/bitcoin/bitcoin/pull/14978#discussion_r246575002,246575002,src/psbt.h
promag,2019-01-16T10:01:47Z,"Commit 801333b\n\nCould add test for this new error?",https://github.com/bitcoin/bitcoin/pull/14978#discussion_r248217728,248217728,src/core_read.cpp
promag,2019-01-16T10:03:37Z,"Commit 801333b\n\nTo avoid changing this line you could add a commit before with something along:\n```diff\n--- a/src/streams.h\n+++ b/src/streams.h\n@@ -236,17 +236,8 @@ public:\n         Init(nTypeIn, nVersionIn);\n     }\n\n-    CDataStream(const vector_type& vchIn, int nTypeIn, int nVersionIn) : vch(vchIn.begin(), vchIn.end())\n-    {\n-        Init(nTypeIn, nVersionIn);\n-    }\",https://github.com/bitcoin/bitcoin/pull/14978#discussion_r248218346,248218346,src/core_read.cpp
promag,2019-01-16T10:09:33Z,"Commit 801333b\n\nnit, would be nice see brief comments.",https://github.com/bitcoin/bitcoin/pull/14978#discussion_r248220308,248220308,src/core_io.h
promag,2019-01-16T10:10:05Z,"Commit 801333b\n\nnit, s/tx_data/raw_tx?",https://github.com/bitcoin/bitcoin/pull/14978#discussion_r248220479,248220479,src/core_io.h
promag,2019-01-16T10:16:35Z,"Commit 745c540\n\nShouldn't this be elsewhere if the goal is to use in the GUI?\n\nI think this should return `uint256`.\n\nnit, could document that the transaction id is returned.\n\nnit, s/allowhighfees/allow_high_fees.",https://github.com/bitcoin/bitcoin/pull/14978#discussion_r248222592,248222592,src/rpc/rawtransaction.h
promag,2019-01-16T10:20:11Z,"Commit 745c540\n\nnit, despite being valid I think it's more readable in the form:\n```cpp\nbool allowhighfees = false;\nif (!request.params[1].isNull()) allowhighfees = request.params[1].get_bool();\n```\nBecause it is more clear the default value.",https://github.com/bitcoin/bitcoin/pull/14978#discussion_r248223984,248223984,src/rpc/rawtransaction.cpp
promag,2019-01-16T10:48:18Z,"Thread https://github.com/bitcoin/bitcoin/pull/14978/commits/617247cbc1622667a493772214fc8416066b3908#r246575002\n\nOne simple way this could be achieved is to add custom error handler to `CRPCCommand` which would translate this exception to the desired output.\n\nOne non intrusive way to add the error handler is to set it in\nhttps://github.com/bitcoin/bitcoin/blob/391a27376b30492f55b398fc22",https://github.com/bitcoin/bitcoin/pull/14978#discussion_r248233535,248233535,src/psbt.h
promag,2019-01-16T10:50:12Z,"Commit 08ef528\n\nIf this is only used once and you now it's called from `Merge` then I suggest to inline it there.",https://github.com/bitcoin/bitcoin/pull/14978#discussion_r248234110,248234110,src/psbt.h
promag,2019-01-16T10:56:18Z,"Commit 08ef528\n\nAdd comment explaining the return value.",https://github.com/bitcoin/bitcoin/pull/14978#discussion_r248236086,248236086,src/psbt.h
promag,2019-01-16T11:04:13Z,"Commit c062d74\n\nMake the argument a const reference.\n\nnit, brace on new line.",https://github.com/bitcoin/bitcoin/pull/14978#discussion_r248238602,248238602,src/psbt.cpp
sipa,2019-01-17T00:11:44Z,"From https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md:\n\n> When writing patches, favor the new style over attempting to mimic the surrounding style, except for move-only commits.",https://github.com/bitcoin/bitcoin/pull/14978#discussion_r248499054,248499054,src/util/strencodings.cpp
sipa,2019-01-17T00:16:14Z,Returning uint256 seems more natural indeed.,https://github.com/bitcoin/bitcoin/pull/14978#discussion_r248499937,248499937,src/rpc/rawtransaction.h
sipa,2019-01-17T00:21:12Z,"I'm slightly worried about the use of exceptions in code that use usable in more places than just RPC, as C++ can't guarantee that all possible exceptions are being dealt with at the right layer.\n\nWould an enum with PSBT-related error codes, plus a enum to string conversion function (like in script/script_error) make sense?",https://github.com/bitcoin/bitcoin/pull/14978#discussion_r248500788,248500788,src/psbt.h
Sjors,2019-01-18T17:45:42Z,"Nit: we're only calling `DecodeBase64` in a handful of places, so you could also change the return type to `bool` and pass the output string as a reference param. Though it also makes sense to remain consistent with the existing (char*) methods.",https://github.com/bitcoin/bitcoin/pull/14978#discussion_r249129561,249129561,src/util/strencodings.cpp
Sjors,2019-01-18T17:56:36Z,"Both `tx_data` and `raw_tx` suggest a transaction hex. Something like `raw_psbt` is probably more clear, and consistent with the function name.",https://github.com/bitcoin/bitcoin/pull/14978#discussion_r249132854,249132854,src/core_io.h
Sjors,2019-01-18T17:58:27Z,nit: `base64_psbt` (see next comment),https://github.com/bitcoin/bitcoin/pull/14978#discussion_r249133382,249133382,src/core_io.h
Sjors,2019-01-18T18:01:54Z,"Currently in 745c540d05f4a21810eccc5e9450e9b321560560, wrong commit?",https://github.com/bitcoin/bitcoin/pull/14978#discussion_r249134420,249134420,src/rpc/rawtransaction.cpp
Sjors,2019-01-18T18:03:38Z,"I also need access to this function in #14912 from other wallet RPC methods. Not really an issue, because I can always include `src/rpc/rawtransaction.h`. But perhaps create a new `src/wallet/transaction.cpp`?\n\nI might add `BroadcastTransaction(PartiallySignedTransaction psbt, bool allowhighfees = false)` in my own PR.",https://github.com/bitcoin/bitcoin/pull/14978#discussion_r249134860,249134860,src/rpc/rawtransaction.h
Sjors,2019-01-24T13:07:00Z,"Can you add parameter info here? Try:\n\n```cpp\n/**\n * Finalizes a PSBT if possible, combining partial signatures and optionally\n * extracting to a signed transaction ready for sending.\n *\n * @param[in] &psbtx  reference to PartiallySignedTransaction\n * @param[in] extract whether to extract the transaction as a hex string\n * @param[in] &result PSBT as base64 or transaction as hex s",https://github.com/bitcoin/bitcoin/pull/14978#discussion_r250597281,250597281,src/psbt.h
Sjors,2019-01-24T13:46:44Z,nit: const params,https://github.com/bitcoin/bitcoin/pull/14978#discussion_r250610209,250610209,src/rpc/rawtransaction.cpp
gwillen,2019-01-29T05:33:21Z,"I will fix the argument name, but otherwise leave things alone unless you would strongly prefer the more invasive changes. (I am changing pfInvalid to pf_invalid everywhere in the surrounding context, because it will drive me completely nuts to make it inconsistent. Please don't make me do that.)",https://github.com/bitcoin/bitcoin/pull/14978#discussion_r251696573,251696573,src/util/strencodings.cpp
gwillen,2019-01-29T06:16:52Z,I think it's the right commit? It moves into BroadcastTransaction.,https://github.com/bitcoin/bitcoin/pull/14978#discussion_r251703558,251703558,src/rpc/rawtransaction.cpp
gwillen,2019-01-29T07:04:07Z,"Is this safe (does it not ""prove too much"")? Certainly I can imagine it might cause worse error messages in some cases. I assume it wasn't done that way for some reason originally?",https://github.com/bitcoin/bitcoin/pull/14978#discussion_r251712255,251712255,src/core_read.cpp
gwillen,2019-01-29T07:05:38Z,"Agreed that this should be elsewhere, I will create src/wallet/transaction.cpp for it. (I was reluctant to be too original just to move a single function, but I prefer it that way also.) And agree regarding the return value, will change it.\n\nI don't think there's too much additional value in taking a PartiallySignedTransaction, since finalization always results in a CTransaction.",https://github.com/bitcoin/bitcoin/pull/14978#discussion_r251712533,251712533,src/rpc/rawtransaction.h
gwillen,2019-01-29T07:11:54Z,Done.,https://github.com/bitcoin/bitcoin/pull/14978#discussion_r251713802,251713802,src/core_io.h
gwillen,2019-01-29T07:11:59Z,Done.,https://github.com/bitcoin/bitcoin/pull/14978#discussion_r251713815,251713815,src/core_io.h
gwillen,2019-01-29T07:12:04Z,Done.,https://github.com/bitcoin/bitcoin/pull/14978#discussion_r251713828,251713828,src/core_read.cpp
Sjors,2019-01-29T15:33:03Z,"Yeah, let's not do too much in this PR.",https://github.com/bitcoin/bitcoin/pull/14978#discussion_r251883895,251883895,src/util/strencodings.cpp
Sjors,2019-01-29T15:33:54Z,@achow101 thoughts?,https://github.com/bitcoin/bitcoin/pull/14978#discussion_r251884271,251884271,src/core_read.cpp
Sjors,2019-01-29T15:35:07Z,"(agree with the latter, I ended up with a different approach too, the seperate file is useful enough)",https://github.com/bitcoin/bitcoin/pull/14978#discussion_r251884855,251884855,src/rpc/rawtransaction.h
Empact,2019-01-29T21:40:13Z,nit: use `//!` or equivalent for doxygen,https://github.com/bitcoin/bitcoin/pull/14978#discussion_r252028851,252028851,src/core_io.h
gwillen,2019-01-30T05:32:21Z,"Aha, right. Done.",https://github.com/bitcoin/bitcoin/pull/14978#discussion_r252121272,252121272,src/core_io.h
gwillen,2019-01-30T05:41:56Z,"Just for fun, I went and checked -- this code is essentially unchanged since the repo was first imported to github in 2009. So the rationale is probably lost to history...",https://github.com/bitcoin/bitcoin/pull/14978#discussion_r252122624,252122624,src/core_read.cpp
gwillen,2019-01-30T05:44:03Z,"Makes sense, done.",https://github.com/bitcoin/bitcoin/pull/14978#discussion_r252122891,252122891,src/rpc/rawtransaction.cpp
gwillen,2019-01-30T05:47:11Z,"Can you clarify? These are both by-value, so I wouldn't ordinarily bother marking them const. Am I supposed to?",https://github.com/bitcoin/bitcoin/pull/14978#discussion_r252123372,252123372,src/rpc/rawtransaction.cpp
sipa,2019-01-30T05:56:15Z,"There is little point in doing so, as constness of by-value arguments doesn't even affect the function signature.\n\nYou can if you really want to make sure the local variables associated with them don't change during the function execution, but that's unusual in our codebase, and not very important.",https://github.com/bitcoin/bitcoin/pull/14978#discussion_r252124825,252124825,src/rpc/rawtransaction.cpp
gwillen,2019-01-30T06:28:46Z,"Done, but this now makes it more obvious that BroadcastTransaction has the same question as the PSBT functions as to how it shall signal an error, since right now it throws UniValues like the other RPC stuff.",https://github.com/bitcoin/bitcoin/pull/14978#discussion_r252130275,252130275,src/rpc/rawtransaction.h
gwillen,2019-01-30T06:33:20Z,"Makes sense, done.",https://github.com/bitcoin/bitcoin/pull/14978#discussion_r252131014,252131014,src/psbt.h
gwillen,2019-01-30T06:38:30Z,Done.,https://github.com/bitcoin/bitcoin/pull/14978#discussion_r252131768,252131768,src/psbt.h
gwillen,2019-01-30T06:58:09Z,Done.,https://github.com/bitcoin/bitcoin/pull/14978#discussion_r252135154,252135154,src/psbt.cpp
gwillen,2019-01-30T07:50:08Z,">Though maybe that's too much refactoring for this PR.\n\nNo, it's too late, you've got me thinking about it now. The ""finalize and maybe extract"" interface is kind of weird as it stands, and the string-handling stuff belongs in the rpc handler, not in the general-purpose functions. I clearly drew the abstraction boundaries in the wrong place.\n\nI've reworked this in a way that feels a bit be",https://github.com/bitcoin/bitcoin/pull/14978#discussion_r252145692,252145692,src/psbt.h
Sjors,2019-01-30T13:37:04Z,"You're right, looks good.",https://github.com/bitcoin/bitcoin/pull/14978#discussion_r252258040,252258040,src/rpc/rawtransaction.cpp
Sjors,2019-01-31T09:41:04Z,Yuck pseudo-circular dependency? :-) ,https://github.com/bitcoin/bitcoin/pull/14978#discussion_r252594448,252594448,src/wallet/psbtwallet.cpp
sipa,2019-02-08T03:40:58Z,"It seems a bit strange that `raw_psbt` is a string and not a `std::vector<unsigned char>`. The `DecodeBase64` call below also returns a `std::vector<unsigned char>`, so changing this would avoid a conversion (which I'm a bit surprised happens automatically).",https://github.com/bitcoin/bitcoin/pull/14978#discussion_r254947978,254947978,src/core_io.h
sipa,2019-02-08T03:48:06Z,This changes the error code for TRANSACTION_ERR_INVALID_PSBT from RPC_DESERIALIZATION_ERROR to RPC_INVALID_PARAMETER. Is that intentional?,https://github.com/bitcoin/bitcoin/pull/14978#discussion_r254948713,254948713,src/rpc/util.cpp
gwillen,2019-02-08T06:28:50Z,"Yes, because there are two cases where we return an RPC error for a PSBT being semantically invalid, and we were returning DESERIALIZATION_ERROR in one case (when the invalid PSBT was given as a parameter) and INVALID_PARAMETER in the other (when the invalid PSBT was the result of a merge), and the I though the latter seemed more reasonable. My sense was that DESERIALIZATION_ERROR is only meant fo",https://github.com/bitcoin/bitcoin/pull/14978#discussion_r254966363,254966363,src/rpc/util.cpp
sipa,2019-02-08T07:03:45Z,I don't have any strong opinion on the RPC codes. I just wanted to make sure this was intentional (as it could easily have been a copypaste error or so).,https://github.com/bitcoin/bitcoin/pull/14978#discussion_r254971323,254971323,src/rpc/util.cpp
gwillen,2019-02-08T07:23:51Z,"In fact, DecodeBase64 does not return a vector&lt;uchar>, it does return a std::string when given a std::string, which I imagine is why I ended up doing it this way, to avoid having to convert it. (When given a char*, it returns a vector&lt;uchar>. Your guess why it was done this way is as good as mine.)\n\nI did carefully check that std::string is just a binary-safe as vector&lt;uchar>. I'm fin",https://github.com/bitcoin/bitcoin/pull/14978#discussion_r254974356,254974356,src/core_io.h
sipa,2019-02-09T00:45:50Z,"Oh, you're right. That's weird, but probably out of scope for this PR. I'm fine with leaving this as is.",https://github.com/bitcoin/bitcoin/pull/14978#discussion_r255276868,255276868,src/core_io.h
sipa,2019-02-09T01:08:12Z,This looks like a C-ism. You can just use `enum TransactionError { ... };` in C++ with (I think) the same effect.,https://github.com/bitcoin/bitcoin/pull/14978#discussion_r255279060,255279060,src/node/transaction.h
sipa,2019-02-09T01:10:57Z,Nit: `CMutableTransaction`.,https://github.com/bitcoin/bitcoin/pull/14978#discussion_r255279289,255279289,src/psbt.h
gwillen,2019-02-09T03:45:35Z,In my defense I copied it from ScriptError_t. I'll change it.,https://github.com/bitcoin/bitcoin/pull/14978#discussion_r255286183,255286183,src/node/transaction.h
gwillen,2019-02-09T03:46:40Z,"Oh, you're right, I think I had to change it for #14906 and forgot to change the comment. Will fix.",https://github.com/bitcoin/bitcoin/pull/14978#discussion_r255286215,255286215,src/psbt.h
practicalswift,2019-02-09T13:05:41Z,Should be `enum class`?,https://github.com/bitcoin/bitcoin/pull/14978#discussion_r255298221,255298221,src/node/transaction.h
gwillen,2019-02-10T04:18:05Z,"Oh, I've never used that before but it looks cool.\n\nIt looks like if I made that change, all references to the enum constants would have to be qualified with the name of the enum? So I should remove all the TRANSACTION_ERR prefixes, so e.g. TRANSACTION_ERR_MISSING_INPUTS would become TransactionError::MISSING_INPUTS?\n\nI'm always in favor of adding more compile-time checks when it's easy, s",https://github.com/bitcoin/bitcoin/pull/14978#discussion_r255323007,255323007,src/node/transaction.h
gwillen,2019-02-10T05:10:12Z,Updated.,https://github.com/bitcoin/bitcoin/pull/14978#discussion_r255323715,255323715,src/node/transaction.h
