[
  {
    "sha": "d227be961afb5f45988c3c6de125daf08ceff399",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMjI3YmU5NjFhZmI1ZjQ1OTg4YzNjNmRlMTI1ZGFmMDhjZWZmMzk5",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-07-11T17:00:10Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-07-22T20:55:37Z"
      },
      "message": "Policy: RENAME: Introduce CPolicy interface and hidden CStandardPolicy class implementing it\n\nRename 3 functions into CPolicy methods:\n\n- IsStandard -> policy.ApproveScript\n- IsStandardTx -> policy.ApproveTx\n- AreInputsStandard -> policy.ApproveTxInputs",
      "tree": {
        "sha": "cfbdc967f15910dc5537a5c70b349a6ef5981b32",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cfbdc967f15910dc5537a5c70b349a6ef5981b32"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d227be961afb5f45988c3c6de125daf08ceff399",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d227be961afb5f45988c3c6de125daf08ceff399",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d227be961afb5f45988c3c6de125daf08ceff399",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d227be961afb5f45988c3c6de125daf08ceff399/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7cdefb927e928780cdbbb3a9b2ffe37716eebae1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7cdefb927e928780cdbbb3a9b2ffe37716eebae1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7cdefb927e928780cdbbb3a9b2ffe37716eebae1"
      }
    ],
    "stats": {
      "total": 102,
      "additions": 66,
      "deletions": 36
    },
    "files": [
      {
        "sha": "51eae77a21b72b3a7a60aa1d5444e609cb618e7f",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d227be961afb5f45988c3c6de125daf08ceff399/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d227be961afb5f45988c3c6de125daf08ceff399/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=d227be961afb5f45988c3c6de125daf08ceff399",
        "patch": "@@ -68,6 +68,7 @@ bool fAlerts = DEFAULT_ALERTS;\n \n /** Fees smaller than this (in satoshi) are considered zero fee (for relaying and mining) */\n CFeeRate minRelayTxFee = CFeeRate(1000);\n+CPolicy globalPolicy;\n \n CTxMemPool mempool(::minRelayTxFee);\n \n@@ -751,6 +752,7 @@ CAmount GetMinRelayFee(const CTransaction& tx, unsigned int nBytes, bool fAllowF\n bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransaction &tx, bool fLimitFree,\n                         bool* pfMissingInputs, bool fRejectAbsurdFee)\n {\n+    const CPolicy& policy = globalPolicy;\n     AssertLockHeld(cs_main);\n     if (pfMissingInputs)\n         *pfMissingInputs = false;\n@@ -765,7 +767,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n \n     // Rather not work on nonstandard transactions (unless -testnet/-regtest)\n     string reason;\n-    if (fRequireStandard && !IsStandardTx(tx, reason))\n+    if (!policy.ApproveTx(tx, reason))\n         return state.DoS(0,\n                          error(\"AcceptToMemoryPool: nonstandard transaction: %s\", reason),\n                          REJECT_NONSTANDARD, reason);\n@@ -836,7 +838,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         }\n \n         // Check for non-standard pay-to-script-hash in inputs\n-        if (fRequireStandard && !AreInputsStandard(tx, view))\n+        if (!policy.ApproveTxInputs(tx, view))\n             return error(\"AcceptToMemoryPool: nonstandard transaction input\");\n \n         // Check that the transaction doesn't have an excessive number of"
      },
      {
        "sha": "fedde046f4b457a25486cf9fe3b62420231c55a7",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d227be961afb5f45988c3c6de125daf08ceff399/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d227be961afb5f45988c3c6de125daf08ceff399/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=d227be961afb5f45988c3c6de125daf08ceff399",
        "patch": "@@ -40,6 +40,7 @@ class CBlockIndex;\n class CBlockTreeDB;\n class CBloomFilter;\n class CInv;\n+class CPolicy;\n class CScriptCheck;\n class CValidationInterface;\n class CValidationState;\n@@ -105,6 +106,7 @@ extern bool fCheckpointsEnabled;\n extern size_t nCoinCacheUsage;\n extern CFeeRate minRelayTxFee;\n extern bool fAlerts;\n+extern CPolicy globalPolicy;\n \n /** Best header we've seen so far (used for getheaders queries' starting points). */\n extern CBlockIndex *pindexBestHeader;"
      },
      {
        "sha": "0723026969eddadd91a93303e30fed89452841b8",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 4,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d227be961afb5f45988c3c6de125daf08ceff399/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d227be961afb5f45988c3c6de125daf08ceff399/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=d227be961afb5f45988c3c6de125daf08ceff399",
        "patch": "@@ -34,7 +34,7 @@\n      *   DUP CHECKSIG DROP ... repeated 100 times... OP_1\n      */\n \n-bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType)\n+bool CPolicy::ApproveScript(const CScript& scriptPubKey, txnouttype& whichType) const\n {\n     std::vector<std::vector<unsigned char> > vSolutions;\n     if (!Solver(scriptPubKey, whichType, vSolutions))\n@@ -54,8 +54,17 @@ bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType)\n     return whichType != TX_NONSTANDARD;\n }\n \n-bool IsStandardTx(const CTransaction& tx, std::string& reason)\n+bool CPolicy::ApproveScript(const CScript& scriptPubKey) const\n {\n+    txnouttype whichType;\n+    return ApproveScript(scriptPubKey, whichType);\n+}\n+\n+bool CPolicy::ApproveTx(const CTransaction& tx, std::string& reason) const\n+{\n+    if (!fRequireStandard)\n+        return true;\n+\n     if (tx.nVersion > CTransaction::CURRENT_VERSION || tx.nVersion < 1) {\n         reason = \"version\";\n         return false;\n@@ -93,7 +102,7 @@ bool IsStandardTx(const CTransaction& tx, std::string& reason)\n     unsigned int nDataOut = 0;\n     txnouttype whichType;\n     BOOST_FOREACH(const CTxOut& txout, tx.vout) {\n-        if (!::IsStandard(txout.scriptPubKey, whichType)) {\n+        if (!ApproveScript(txout.scriptPubKey, whichType)) {\n             reason = \"scriptpubkey\";\n             return false;\n         }\n@@ -118,8 +127,11 @@ bool IsStandardTx(const CTransaction& tx, std::string& reason)\n     return true;\n }\n \n-bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n+bool CPolicy::ApproveTxInputs(const CTransaction& tx, const CCoinsViewCache& mapInputs) const\n {\n+    if (!fRequireStandard)\n+        return true;\n+\n     if (tx.IsCoinBase())\n         return true; // Coinbases don't use vin normally\n "
      },
      {
        "sha": "d14b20ff3380fafd6e692a8959e749cd0813bc51",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 12,
        "deletions": 3,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d227be961afb5f45988c3c6de125daf08ceff399/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d227be961afb5f45988c3c6de125daf08ceff399/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=d227be961afb5f45988c3c6de125daf08ceff399",
        "patch": "@@ -42,17 +42,26 @@ static const unsigned int STANDARD_SCRIPT_VERIFY_FLAGS = MANDATORY_SCRIPT_VERIFY\n /** For convenience, standard but not mandatory verify flags. */\n static const unsigned int STANDARD_NOT_MANDATORY_VERIFY_FLAGS = STANDARD_SCRIPT_VERIFY_FLAGS & ~MANDATORY_SCRIPT_VERIFY_FLAGS;\n \n-bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType);\n+/**\n+ * \\class CPolicy\n+ * Generic interface class for policy.\n+ */\n+class CPolicy\n+{\n+    bool ApproveScript(const CScript&, txnouttype&) const;\n+public:\n+    bool ApproveScript(const CScript&) const;\n     /**\n      * Check for standard transaction types\n      * @return True if all outputs (scriptPubKeys) use only standard transaction forms\n      */\n-bool IsStandardTx(const CTransaction& tx, std::string& reason);\n+    bool ApproveTx(const CTransaction& tx, std::string& reason) const;\n     /**\n      * Check for standard transaction types\n      * @param[in] mapInputs    Map of previous transactions that have outputs we're spending\n      * @return True if all inputs (scriptSigs) use only standard transaction forms\n      */\n-bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs);\n+    bool ApproveTxInputs(const CTransaction& tx, const CCoinsViewCache& mapInputs) const;\n+};\n \n #endif // BITCOIN_POLICY_H"
      },
      {
        "sha": "efae536c4ccb6fba37529020bc7b84c213d08d06",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 7,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d227be961afb5f45988c3c6de125daf08ceff399/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d227be961afb5f45988c3c6de125daf08ceff399/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=d227be961afb5f45988c3c6de125daf08ceff399",
        "patch": "@@ -143,27 +143,26 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n \n BOOST_AUTO_TEST_CASE(multisig_IsStandard)\n {\n+    const CPolicy testPolicy;\n     CKey key[4];\n     for (int i = 0; i < 4; i++)\n         key[i].MakeNewKey(true);\n \n-    txnouttype whichType;\n-\n     CScript a_and_b;\n     a_and_b << OP_2 << ToByteVector(key[0].GetPubKey()) << ToByteVector(key[1].GetPubKey()) << OP_2 << OP_CHECKMULTISIG;\n-    BOOST_CHECK(::IsStandard(a_and_b, whichType));\n+    BOOST_CHECK(testPolicy.ApproveScript(a_and_b));\n \n     CScript a_or_b;\n     a_or_b  << OP_1 << ToByteVector(key[0].GetPubKey()) << ToByteVector(key[1].GetPubKey()) << OP_2 << OP_CHECKMULTISIG;\n-    BOOST_CHECK(::IsStandard(a_or_b, whichType));\n+    BOOST_CHECK(testPolicy.ApproveScript(a_or_b));\n \n     CScript escrow;\n     escrow << OP_2 << ToByteVector(key[0].GetPubKey()) << ToByteVector(key[1].GetPubKey()) << ToByteVector(key[2].GetPubKey()) << OP_3 << OP_CHECKMULTISIG;\n-    BOOST_CHECK(::IsStandard(escrow, whichType));\n+    BOOST_CHECK(testPolicy.ApproveScript(escrow));\n \n     CScript one_of_four;\n     one_of_four << OP_1 << ToByteVector(key[0].GetPubKey()) << ToByteVector(key[1].GetPubKey()) << ToByteVector(key[2].GetPubKey()) << ToByteVector(key[3].GetPubKey()) << OP_4 << OP_CHECKMULTISIG;\n-    BOOST_CHECK(!::IsStandard(one_of_four, whichType));\n+    BOOST_CHECK(!testPolicy.ApproveScript(one_of_four));\n \n     CScript malformed[6];\n     malformed[0] << OP_3 << ToByteVector(key[0].GetPubKey()) << ToByteVector(key[1].GetPubKey()) << OP_2 << OP_CHECKMULTISIG;\n@@ -174,7 +173,7 @@ BOOST_AUTO_TEST_CASE(multisig_IsStandard)\n     malformed[5] << OP_1 << ToByteVector(key[0].GetPubKey()) << ToByteVector(key[1].GetPubKey());\n \n     for (int i = 0; i < 6; i++)\n-        BOOST_CHECK(!::IsStandard(malformed[i], whichType));\n+        BOOST_CHECK(!testPolicy.ApproveScript(malformed[i]));\n }\n \n BOOST_AUTO_TEST_CASE(multisig_Solver1)"
      },
      {
        "sha": "bbf7af13d5c40ad583473179313025816af50d1b",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 7,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d227be961afb5f45988c3c6de125daf08ceff399/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d227be961afb5f45988c3c6de125daf08ceff399/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=d227be961afb5f45988c3c6de125daf08ceff399",
        "patch": "@@ -53,6 +53,7 @@ BOOST_FIXTURE_TEST_SUITE(script_P2SH_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(sign)\n {\n+    const CPolicy testPolicy;\n     LOCK(cs_main);\n     // Pay-to-script-hash looks like this:\n     // scriptSig:    <sig> <sig...> <serialized_script>\n@@ -91,7 +92,7 @@ BOOST_AUTO_TEST_CASE(sign)\n         txFrom.vout[i+4].scriptPubKey = standardScripts[i];\n         txFrom.vout[i+4].nValue = COIN;\n     }\n-    BOOST_CHECK(IsStandardTx(txFrom, reason));\n+    BOOST_CHECK(testPolicy.ApproveTx(txFrom, reason));\n \n     CMutableTransaction txTo[8]; // Spending transactions\n     for (int i = 0; i < 8; i++)\n@@ -154,6 +155,7 @@ BOOST_AUTO_TEST_CASE(norecurse)\n \n BOOST_AUTO_TEST_CASE(set)\n {\n+    const CPolicy testPolicy;\n     LOCK(cs_main);\n     // Test the CScript::Set* methods\n     CBasicKeyStore keystore;\n@@ -187,7 +189,7 @@ BOOST_AUTO_TEST_CASE(set)\n         txFrom.vout[i].scriptPubKey = outer[i];\n         txFrom.vout[i].nValue = CENT;\n     }\n-    BOOST_CHECK(IsStandardTx(txFrom, reason));\n+    BOOST_CHECK(testPolicy.ApproveTx(txFrom, reason));\n \n     CMutableTransaction txTo[4]; // Spending transactions\n     for (int i = 0; i < 4; i++)\n@@ -205,7 +207,7 @@ BOOST_AUTO_TEST_CASE(set)\n     for (int i = 0; i < 4; i++)\n     {\n         BOOST_CHECK_MESSAGE(SignSignature(keystore, txFrom, txTo[i], 0), strprintf(\"SignSignature %d\", i));\n-        BOOST_CHECK_MESSAGE(IsStandardTx(txTo[i], reason), strprintf(\"txTo[%d].IsStandard\", i));\n+        BOOST_CHECK_MESSAGE(testPolicy.ApproveTx(txTo[i], reason), strprintf(\"txTo[%d].IsStandard\", i));\n     }\n }\n \n@@ -262,6 +264,7 @@ BOOST_AUTO_TEST_CASE(switchover)\n \n BOOST_AUTO_TEST_CASE(AreInputsStandard)\n {\n+    const CPolicy testPolicy;\n     LOCK(cs_main);\n     CCoinsView coinsDummy;\n     CCoinsViewCache coins(&coinsDummy);\n@@ -342,7 +345,7 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n     txTo.vin[3].scriptSig << OP_11 << OP_11 << static_cast<vector<unsigned char> >(oneAndTwo);\n     txTo.vin[4].scriptSig << static_cast<vector<unsigned char> >(fifteenSigops);\n \n-    BOOST_CHECK(::AreInputsStandard(txTo, coins));\n+    BOOST_CHECK(testPolicy.ApproveTxInputs(txTo, coins));\n     // 22 P2SH sigops for all inputs (1 for vin[0], 6 for vin[3], 15 for vin[4]\n     BOOST_CHECK_EQUAL(GetP2SHSigOpCount(txTo, coins), 22U);\n \n@@ -351,7 +354,7 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n     {\n         CScript t = txTo.vin[i].scriptSig;\n         txTo.vin[i].scriptSig = (CScript() << 11) + t;\n-        BOOST_CHECK(!::AreInputsStandard(txTo, coins));\n+        BOOST_CHECK(!testPolicy.ApproveTxInputs(txTo, coins));\n         txTo.vin[i].scriptSig = t;\n     }\n \n@@ -364,7 +367,7 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n     txToNonStd1.vin[0].prevout.hash = txFrom.GetHash();\n     txToNonStd1.vin[0].scriptSig << static_cast<vector<unsigned char> >(sixteenSigops);\n \n-    BOOST_CHECK(!::AreInputsStandard(txToNonStd1, coins));\n+    BOOST_CHECK(!testPolicy.ApproveTxInputs(txToNonStd1, coins));\n     BOOST_CHECK_EQUAL(GetP2SHSigOpCount(txToNonStd1, coins), 16U);\n \n     CMutableTransaction txToNonStd2;\n@@ -376,7 +379,7 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n     txToNonStd2.vin[0].prevout.hash = txFrom.GetHash();\n     txToNonStd2.vin[0].scriptSig << static_cast<vector<unsigned char> >(twentySigops);\n \n-    BOOST_CHECK(!::AreInputsStandard(txToNonStd2, coins));\n+    BOOST_CHECK(!testPolicy.ApproveTxInputs(txToNonStd2, coins));\n     BOOST_CHECK_EQUAL(GetP2SHSigOpCount(txToNonStd2, coins), 20U);\n }\n "
      },
      {
        "sha": "bbd8b8afeee933c8942046e0b715e94fad57fad1",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 13,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d227be961afb5f45988c3c6de125daf08ceff399/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d227be961afb5f45988c3c6de125daf08ceff399/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=d227be961afb5f45988c3c6de125daf08ceff399",
        "patch": "@@ -15,6 +15,7 @@\n #include \"policy/policy.h\"\n #include \"script/script.h\"\n #include \"script/script_error.h\"\n+#include \"utilstrencodings.h\"\n \n #include <map>\n #include <string>\n@@ -287,6 +288,7 @@ SetupDummyInputs(CBasicKeyStore& keystoreRet, CCoinsViewCache& coinsRet)\n \n BOOST_AUTO_TEST_CASE(test_Get)\n {\n+    const CPolicy testPolicy;\n     CBasicKeyStore keystore;\n     CCoinsView coinsDummy;\n     CCoinsViewCache coins(&coinsDummy);\n@@ -307,20 +309,21 @@ BOOST_AUTO_TEST_CASE(test_Get)\n     t1.vout[0].nValue = 90*CENT;\n     t1.vout[0].scriptPubKey << OP_1;\n \n-    BOOST_CHECK(AreInputsStandard(t1, coins));\n+    BOOST_CHECK(testPolicy.ApproveTxInputs(t1, coins));\n     BOOST_CHECK_EQUAL(coins.GetValueIn(t1), (50+21+22)*CENT);\n \n     // Adding extra junk to the scriptSig should make it non-standard:\n     t1.vin[0].scriptSig << OP_11;\n-    BOOST_CHECK(!AreInputsStandard(t1, coins));\n+    BOOST_CHECK(!testPolicy.ApproveTxInputs(t1, coins));\n \n     // ... as should not having enough:\n     t1.vin[0].scriptSig = CScript();\n-    BOOST_CHECK(!AreInputsStandard(t1, coins));\n+    BOOST_CHECK(!testPolicy.ApproveTxInputs(t1, coins));\n }\n \n BOOST_AUTO_TEST_CASE(test_IsStandard)\n {\n+    const CPolicy testPolicy;\n     LOCK(cs_main);\n     CBasicKeyStore keystore;\n     CCoinsView coinsDummy;\n@@ -339,43 +342,43 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     t.vout[0].scriptPubKey = GetScriptForDestination(key.GetPubKey().GetID());\n \n     string reason;\n-    BOOST_CHECK(IsStandardTx(t, reason));\n+    BOOST_CHECK(testPolicy.ApproveTx(t, reason));\n \n     t.vout[0].nValue = 501; // dust\n-    BOOST_CHECK(!IsStandardTx(t, reason));\n+    BOOST_CHECK(!testPolicy.ApproveTx(t, reason));\n \n     t.vout[0].nValue = 601; // not dust\n-    BOOST_CHECK(IsStandardTx(t, reason));\n+    BOOST_CHECK(testPolicy.ApproveTx(t, reason));\n \n     t.vout[0].scriptPubKey = CScript() << OP_1;\n-    BOOST_CHECK(!IsStandardTx(t, reason));\n+    BOOST_CHECK(!testPolicy.ApproveTx(t, reason));\n \n     // 80-byte TX_NULL_DATA (standard)\n     t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\");\n-    BOOST_CHECK(IsStandardTx(t, reason));\n+    BOOST_CHECK(testPolicy.ApproveTx(t, reason));\n \n     // 81-byte TX_NULL_DATA (non-standard)\n     t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3800\");\n-    BOOST_CHECK(!IsStandardTx(t, reason));\n+    BOOST_CHECK(!testPolicy.ApproveTx(t, reason));\n \n     // TX_NULL_DATA w/o PUSHDATA\n     t.vout.resize(1);\n     t.vout[0].scriptPubKey = CScript() << OP_RETURN;\n-    BOOST_CHECK(IsStandardTx(t, reason));\n+    BOOST_CHECK(testPolicy.ApproveTx(t, reason));\n \n     // Only one TX_NULL_DATA permitted in all cases\n     t.vout.resize(2);\n     t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\");\n     t.vout[1].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\");\n-    BOOST_CHECK(!IsStandardTx(t, reason));\n+    BOOST_CHECK(!testPolicy.ApproveTx(t, reason));\n \n     t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\");\n     t.vout[1].scriptPubKey = CScript() << OP_RETURN;\n-    BOOST_CHECK(!IsStandardTx(t, reason));\n+    BOOST_CHECK(!testPolicy.ApproveTx(t, reason));\n \n     t.vout[0].scriptPubKey = CScript() << OP_RETURN;\n     t.vout[1].scriptPubKey = CScript() << OP_RETURN;\n-    BOOST_CHECK(!IsStandardTx(t, reason));\n+    BOOST_CHECK(!testPolicy.ApproveTx(t, reason));\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "3d03f15126b79bd9f22ccd27f1d8ca43d9e16bf5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZDAzZjE1MTI2Yjc5YmQ5ZjIyY2NkMjdmMWQ4Y2E0M2Q5ZTE2YmY1",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-07-11T17:34:25Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-07-22T22:28:53Z"
      },
      "message": "Policy: Turn policy globals into CStandardPolicy attributes\n\n...by separating CStandardPolicy implementation from CPolicy interface\n\nEliminated globals:\n\n-fIsBareMultisigStd\n-fRequireStandard",
      "tree": {
        "sha": "43e15ac1f23004b7486140ea1526e9ec44f6d135",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/43e15ac1f23004b7486140ea1526e9ec44f6d135"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3d03f15126b79bd9f22ccd27f1d8ca43d9e16bf5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d03f15126b79bd9f22ccd27f1d8ca43d9e16bf5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3d03f15126b79bd9f22ccd27f1d8ca43d9e16bf5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d03f15126b79bd9f22ccd27f1d8ca43d9e16bf5/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d227be961afb5f45988c3c6de125daf08ceff399",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d227be961afb5f45988c3c6de125daf08ceff399",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d227be961afb5f45988c3c6de125daf08ceff399"
      }
    ],
    "stats": {
      "total": 236,
      "additions": 175,
      "deletions": 61
    },
    "files": [
      {
        "sha": "06b3e0631df5a14dd66f077f62d317f12fab72ef",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 8,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d03f15126b79bd9f22ccd27f1d8ca43d9e16bf5/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d03f15126b79bd9f22ccd27f1d8ca43d9e16bf5/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=3d03f15126b79bd9f22ccd27f1d8ca43d9e16bf5",
        "patch": "@@ -314,7 +314,6 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-maxsendbuffer=<n>\", strprintf(_(\"Maximum per-connection send buffer, <n>*1000 bytes (default: %u)\"), 1000));\n     strUsage += HelpMessageOpt(\"-onion=<ip:port>\", strprintf(_(\"Use separate SOCKS5 proxy to reach peers via Tor hidden services (default: %s)\"), \"-proxy\"));\n     strUsage += HelpMessageOpt(\"-onlynet=<net>\", _(\"Only connect to nodes in network <net> (ipv4, ipv6 or onion)\"));\n-    strUsage += HelpMessageOpt(\"-permitbaremultisig\", strprintf(_(\"Relay non-P2SH multisig (default: %u)\"), 1));\n     strUsage += HelpMessageOpt(\"-port=<port>\", strprintf(_(\"Listen for connections on <port> (default: %u or testnet: %u)\"), 8333, 18333));\n     strUsage += HelpMessageOpt(\"-proxy=<ip:port>\", _(\"Connect through SOCKS5 proxy\"));\n     strUsage += HelpMessageOpt(\"-proxyrandomize\", strprintf(_(\"Randomize credentials for every proxy connection. This enables Tor stream isolation (default: %u)\"), 1));\n@@ -395,9 +394,8 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-shrinkdebugfile\", _(\"Shrink debug.log file on client startup (default: 1 when no -debug)\"));\n     strUsage += HelpMessageOpt(\"-testnet\", _(\"Use the test network\"));\n \n+    Policy::AppendHelpMessages(strUsage);\n     strUsage += HelpMessageGroup(_(\"Node relay options:\"));\n-    if (showDebug)\n-        strUsage += HelpMessageOpt(\"-acceptnonstdtxn\", strprintf(\"Relay and mine \\\"non-standard\\\" transactions (%sdefault: %u)\", \"testnet/regtest only; \", !Params(CBaseChainParams::TESTNET).RequireStandard()));\n     strUsage += HelpMessageOpt(\"-datacarrier\", strprintf(_(\"Relay and mine data carrier transactions (default: %u)\"), 1));\n     strUsage += HelpMessageOpt(\"-datacarriersize\", strprintf(_(\"Maximum size of data in data carrier transactions we relay and mine (default: %u)\"), MAX_OP_RETURN_RELAY));\n \n@@ -851,10 +849,11 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         else\n             return InitError(strprintf(_(\"Invalid amount for -minrelaytxfee=<amount>: '%s'\"), mapArgs[\"-minrelaytxfee\"]));\n     }\n-\n-    fRequireStandard = !GetBoolArg(\"-acceptnonstdtxn\", !Params().RequireStandard());\n-    if (Params().RequireStandard() && !fRequireStandard)\n-        return InitError(strprintf(\"acceptnonstdtxn is not currently supported for %s chain\", chainparams.NetworkIDString()));\n+    try {\n+        globalPolicy.InitFromArgs(mapArgs);\n+    } catch(const std::exception& e) {\n+        return InitError(strprintf(_(\"Error while initializing policy: %s\"), e.what()));\n+    }\n \n #ifdef ENABLE_WALLET\n     if (mapArgs.count(\"-mintxfee\"))\n@@ -900,7 +899,6 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     std::string strWalletFile = GetArg(\"-wallet\", \"wallet.dat\");\n #endif // ENABLE_WALLET\n \n-    fIsBareMultisigStd = GetBoolArg(\"-permitbaremultisig\", true);\n     nMaxDatacarrierBytes = GetArg(\"-datacarriersize\", nMaxDatacarrierBytes);\n \n     fAlerts = GetBoolArg(\"-alerts\", DEFAULT_ALERTS);"
      },
      {
        "sha": "11b7952332f3968a05b10916f0542a184797e279",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d03f15126b79bd9f22ccd27f1d8ca43d9e16bf5/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d03f15126b79bd9f22ccd27f1d8ca43d9e16bf5/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=3d03f15126b79bd9f22ccd27f1d8ca43d9e16bf5",
        "patch": "@@ -58,8 +58,6 @@ bool fReindex = false;\n bool fTxIndex = false;\n bool fHavePruned = false;\n bool fPruneMode = false;\n-bool fIsBareMultisigStd = true;\n-bool fRequireStandard = true;\n bool fCheckBlockIndex = false;\n bool fCheckpointsEnabled = true;\n size_t nCoinCacheUsage = 5000 * 300;\n@@ -68,7 +66,7 @@ bool fAlerts = DEFAULT_ALERTS;\n \n /** Fees smaller than this (in satoshi) are considered zero fee (for relaying and mining) */\n CFeeRate minRelayTxFee = CFeeRate(1000);\n-CPolicy globalPolicy;\n+CStandardPolicy globalPolicy;\n \n CTxMemPool mempool(::minRelayTxFee);\n "
      },
      {
        "sha": "792a9e4c450377c0458ee59593017b1d3000eade",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d03f15126b79bd9f22ccd27f1d8ca43d9e16bf5/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d03f15126b79bd9f22ccd27f1d8ca43d9e16bf5/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=3d03f15126b79bd9f22ccd27f1d8ca43d9e16bf5",
        "patch": "@@ -40,7 +40,7 @@ class CBlockIndex;\n class CBlockTreeDB;\n class CBloomFilter;\n class CInv;\n-class CPolicy;\n+class CStandardPolicy;\n class CScriptCheck;\n class CValidationInterface;\n class CValidationState;\n@@ -99,14 +99,12 @@ extern bool fImporting;\n extern bool fReindex;\n extern int nScriptCheckThreads;\n extern bool fTxIndex;\n-extern bool fIsBareMultisigStd;\n-extern bool fRequireStandard;\n extern bool fCheckBlockIndex;\n extern bool fCheckpointsEnabled;\n extern size_t nCoinCacheUsage;\n extern CFeeRate minRelayTxFee;\n extern bool fAlerts;\n-extern CPolicy globalPolicy;\n+extern CStandardPolicy globalPolicy;\n \n /** Best header we've seen so far (used for getheaders queries' starting points). */\n extern CBlockIndex *pindexBestHeader;"
      },
      {
        "sha": "cedd32284bba60d59853f6686bd47eb2248e9978",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 42,
        "deletions": 26,
        "changes": 68,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d03f15126b79bd9f22ccd27f1d8ca43d9e16bf5/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d03f15126b79bd9f22ccd27f1d8ca43d9e16bf5/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=3d03f15126b79bd9f22ccd27f1d8ca43d9e16bf5",
        "patch": "@@ -7,34 +7,41 @@\n \n #include \"policy/policy.h\"\n \n+#include \"chainparams.h\"\n #include \"main.h\"\n #include \"tinyformat.h\"\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n \n #include <boost/foreach.hpp>\n \n-    /**\n-     * Check transaction inputs to mitigate two\n-     * potential denial-of-service attacks:\n-     * \n-     * 1. scriptSigs with extra data stuffed into them,\n-     *    not consumed by scriptPubKey (or P2SH script)\n-     * 2. P2SH scripts with a crazy number of expensive\n-     *    CHECKSIG/CHECKMULTISIG operations\n-     *\n-     * Check transaction inputs, and make sure any\n-     * pay-to-script-hash transactions are evaluating IsStandard scripts\n-     * \n-     * Why bother? To avoid denial-of-service attacks; an attacker\n-     * can submit a standard HASH... OP_EQUAL transaction,\n-     * which will get accepted into blocks. The redemption\n-     * script can be anything; an attacker could use a very\n-     * expensive-to-check-upon-redemption script like:\n-     *   DUP CHECKSIG DROP ... repeated 100 times... OP_1\n-     */\n-\n-bool CPolicy::ApproveScript(const CScript& scriptPubKey, txnouttype& whichType) const\n+/** CStandardPolicy initialization */\n+\n+std::vector<std::pair<std::string, std::string> > CStandardPolicy::GetOptionsHelp() const\n+{\n+    std::vector<std::pair<std::string, std::string> > optionsHelp;\n+    optionsHelp.push_back(std::make_pair(\"-permitbaremultisig\", strprintf(_(\"Relay non-P2SH multisig (default: %u)\"), fIsBareMultisigStd)));\n+    optionsHelp.push_back(std::make_pair(\"-acceptnonstdtxn\", strprintf(_(\"Relay and mine \\\"non-standard\\\" transactions (testnet/regtest only; default: %u)\"), Params(CBaseChainParams::MAIN).RequireStandard())));\n+    return optionsHelp;\n+}\n+\n+void CStandardPolicy::InitFromArgs(const std::map<std::string, std::string>& mapArgs)\n+{\n+    fIsBareMultisigStd = GetBoolArg(\"-permitbaremultisig\", fIsBareMultisigStd, mapArgs);\n+    fAcceptNonStdTxn = GetBoolArg(\"-acceptnonstdtxn\", !Params().RequireStandard(), mapArgs);\n+    if (fAcceptNonStdTxn && Params().RequireStandard())\n+        throw std::runtime_error(strprintf(_(\"%s: acceptnonstdtxn is not currently supported for %s chain.\"), __func__, Params().NetworkIDString()));\n+}\n+\n+CStandardPolicy::CStandardPolicy(bool fIsBareMultisigStdIn, bool fAcceptNonStdTxnIn) :\n+    fIsBareMultisigStd(fIsBareMultisigStdIn),\n+    fAcceptNonStdTxn(fAcceptNonStdTxnIn)\n+{\n+}\n+\n+/** CStandardPolicy implementation */\n+\n+bool CStandardPolicy::ApproveScript(const CScript& scriptPubKey, txnouttype& whichType) const\n {\n     std::vector<std::vector<unsigned char> > vSolutions;\n     if (!Solver(scriptPubKey, whichType, vSolutions))\n@@ -54,15 +61,15 @@ bool CPolicy::ApproveScript(const CScript& scriptPubKey, txnouttype& whichType)\n     return whichType != TX_NONSTANDARD;\n }\n \n-bool CPolicy::ApproveScript(const CScript& scriptPubKey) const\n+bool CStandardPolicy::ApproveScript(const CScript& scriptPubKey) const\n {\n     txnouttype whichType;\n     return ApproveScript(scriptPubKey, whichType);\n }\n \n-bool CPolicy::ApproveTx(const CTransaction& tx, std::string& reason) const\n+bool CStandardPolicy::ApproveTx(const CTransaction& tx, std::string& reason) const\n {\n-    if (!fRequireStandard)\n+    if (fAcceptNonStdTxn)\n         return true;\n \n     if (tx.nVersion > CTransaction::CURRENT_VERSION || tx.nVersion < 1) {\n@@ -127,9 +134,9 @@ bool CPolicy::ApproveTx(const CTransaction& tx, std::string& reason) const\n     return true;\n }\n \n-bool CPolicy::ApproveTxInputs(const CTransaction& tx, const CCoinsViewCache& mapInputs) const\n+bool CStandardPolicy::ApproveTxInputs(const CTransaction& tx, const CCoinsViewCache& mapInputs) const\n {\n-    if (!fRequireStandard)\n+    if (fAcceptNonStdTxn)\n         return true;\n \n     if (tx.IsCoinBase())\n@@ -188,3 +195,12 @@ bool CPolicy::ApproveTxInputs(const CTransaction& tx, const CCoinsViewCache& map\n \n     return true;\n }\n+\n+/** Policy Factory and related utility functions */\n+\n+void Policy::AppendHelpMessages(std::string& strUsage)\n+{\n+    const CStandardPolicy policy;\n+    strUsage += HelpMessageGroup(strprintf(_(\"Policy options: (for policy: %s)\"), Policy::STANDARD));\n+    AppendMessagesOpt(strUsage, policy.GetOptionsHelp());\n+}"
      },
      {
        "sha": "3f9d3e39f6f88a41a5651330f604239cd91caaf7",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 75,
        "deletions": 4,
        "changes": 79,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d03f15126b79bd9f22ccd27f1d8ca43d9e16bf5/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d03f15126b79bd9f22ccd27f1d8ca43d9e16bf5/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=3d03f15126b79bd9f22ccd27f1d8ca43d9e16bf5",
        "patch": "@@ -10,6 +10,7 @@\n #include \"script/interpreter.h\"\n #include \"script/standard.h\"\n \n+#include <map>\n #include <string>\n \n class CCoinsViewCache;\n@@ -48,20 +49,90 @@ static const unsigned int STANDARD_NOT_MANDATORY_VERIFY_FLAGS = STANDARD_SCRIPT_\n  */\n class CPolicy\n {\n-    bool ApproveScript(const CScript&, txnouttype&) const;\n public:\n-    bool ApproveScript(const CScript&) const;\n+    virtual ~CPolicy() {};\n+    /**\n+     * @param argMap a map with options to read from.\n+     * @return a formatted HelpMessage string with the policy options\n+     */\n+    virtual std::vector<std::pair<std::string, std::string> > GetOptionsHelp() const\n+    {\n+        std::vector<std::pair<std::string, std::string> > optionsHelp;\n+        return optionsHelp;\n+    }\n+    /**\n+     * @param argMap a map with options to read from.\n+     * @return a formatted HelpMessage string with the policy options\n+     */\n+    virtual void InitFromArgs(const std::map<std::string, std::string>& argMap) {};\n+    virtual bool ApproveScript(const CScript& scriptPubKey) const { return true; };\n     /**\n      * Check for standard transaction types\n      * @return True if all outputs (scriptPubKeys) use only standard transaction forms\n      */\n-    bool ApproveTx(const CTransaction& tx, std::string& reason) const;\n+    virtual bool ApproveTx(const CTransaction& tx, std::string& reason) const { return true; };\n     /**\n      * Check for standard transaction types\n      * @param[in] mapInputs    Map of previous transactions that have outputs we're spending\n      * @return True if all inputs (scriptSigs) use only standard transaction forms\n      */\n-    bool ApproveTxInputs(const CTransaction& tx, const CCoinsViewCache& mapInputs) const;\n+    virtual bool ApproveTxInputs(const CTransaction& tx, const CCoinsViewCache& mapInputs) const { return true; };\n };\n \n+/**\n+ * \\class CStandardPolicy\n+ * Standard implementation of CPolicy.\n+ */\n+class CStandardPolicy : public CPolicy\n+{\n+protected:\n+    bool fIsBareMultisigStd;\n+    bool fAcceptNonStdTxn;\n+\n+    bool ApproveScript(const CScript&, txnouttype&) const;\n+public:\n+    CStandardPolicy(\n+                    bool fIsBareMultisigStdIn=true, \n+                    bool fAcceptNonStdTxnIn=false\n+                    );\n+    virtual std::vector<std::pair<std::string, std::string> > GetOptionsHelp() const;\n+    virtual void InitFromArgs(const std::map<std::string, std::string>&);\n+    virtual bool ApproveScript(const CScript& scriptPubKey) const;\n+    virtual bool ApproveTx(const CTransaction& tx, std::string& reason) const;\n+    /**\n+     * Check transaction inputs to mitigate two\n+     * potential denial-of-service attacks:\n+     * \n+     * 1. scriptSigs with extra data stuffed into them,\n+     *    not consumed by scriptPubKey (or P2SH script)\n+     * 2. P2SH scripts with a crazy number of expensive\n+     *    CHECKSIG/CHECKMULTISIG operations\n+     *\n+     * Check transaction inputs, and make sure any\n+     * pay-to-script-hash transactions are evaluating IsStandard scripts\n+     * \n+     * Why bother? To avoid denial-of-service attacks; an attacker\n+     * can submit a standard HASH... OP_EQUAL transaction,\n+     * which will get accepted into blocks. The redemption\n+     * script can be anything; an attacker could use a very\n+     * expensive-to-check-upon-redemption script like:\n+     *   DUP CHECKSIG DROP ... repeated 100 times... OP_1\n+     */\n+    virtual bool ApproveTxInputs(const CTransaction& tx, const CCoinsViewCache& mapInputs) const;\n+};\n+\n+namespace Policy {\n+\n+/**\n+ * Append a help string for the options of the selected policy.\n+ * @param strUsage a formatted HelpMessage string with policy options\n+ * is appended to this string\n+ */\n+void AppendHelpMessages(std::string& strUsage);\n+\n+/** Supported policies */\n+static const std::string STANDARD = \"standard\";\n+\n+} // namespace Policy\n+\n #endif // BITCOIN_POLICY_H"
      },
      {
        "sha": "b5fb8e0593630b2c160ced470fcb2ce285139a50",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d03f15126b79bd9f22ccd27f1d8ca43d9e16bf5/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d03f15126b79bd9f22ccd27f1d8ca43d9e16bf5/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=3d03f15126b79bd9f22ccd27f1d8ca43d9e16bf5",
        "patch": "@@ -143,7 +143,7 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n \n BOOST_AUTO_TEST_CASE(multisig_IsStandard)\n {\n-    const CPolicy testPolicy;\n+    const CStandardPolicy testPolicy;\n     CKey key[4];\n     for (int i = 0; i < 4; i++)\n         key[i].MakeNewKey(true);"
      },
      {
        "sha": "2167132b59c5ad93cb04f4b850104e4c7b25dba9",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d03f15126b79bd9f22ccd27f1d8ca43d9e16bf5/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d03f15126b79bd9f22ccd27f1d8ca43d9e16bf5/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=3d03f15126b79bd9f22ccd27f1d8ca43d9e16bf5",
        "patch": "@@ -53,7 +53,7 @@ BOOST_FIXTURE_TEST_SUITE(script_P2SH_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(sign)\n {\n-    const CPolicy testPolicy;\n+    const CStandardPolicy testPolicy;\n     LOCK(cs_main);\n     // Pay-to-script-hash looks like this:\n     // scriptSig:    <sig> <sig...> <serialized_script>\n@@ -155,7 +155,7 @@ BOOST_AUTO_TEST_CASE(norecurse)\n \n BOOST_AUTO_TEST_CASE(set)\n {\n-    const CPolicy testPolicy;\n+    const CStandardPolicy testPolicy;\n     LOCK(cs_main);\n     // Test the CScript::Set* methods\n     CBasicKeyStore keystore;\n@@ -264,7 +264,7 @@ BOOST_AUTO_TEST_CASE(switchover)\n \n BOOST_AUTO_TEST_CASE(AreInputsStandard)\n {\n-    const CPolicy testPolicy;\n+    const CStandardPolicy testPolicy;\n     LOCK(cs_main);\n     CCoinsView coinsDummy;\n     CCoinsViewCache coins(&coinsDummy);"
      },
      {
        "sha": "33f41a0f4723bdb7e1bb53abcf8920fe41c36567",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d03f15126b79bd9f22ccd27f1d8ca43d9e16bf5/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d03f15126b79bd9f22ccd27f1d8ca43d9e16bf5/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=3d03f15126b79bd9f22ccd27f1d8ca43d9e16bf5",
        "patch": "@@ -288,7 +288,7 @@ SetupDummyInputs(CBasicKeyStore& keystoreRet, CCoinsViewCache& coinsRet)\n \n BOOST_AUTO_TEST_CASE(test_Get)\n {\n-    const CPolicy testPolicy;\n+    const CStandardPolicy testPolicy;\n     CBasicKeyStore keystore;\n     CCoinsView coinsDummy;\n     CCoinsViewCache coins(&coinsDummy);\n@@ -323,7 +323,7 @@ BOOST_AUTO_TEST_CASE(test_Get)\n \n BOOST_AUTO_TEST_CASE(test_IsStandard)\n {\n-    const CPolicy testPolicy;\n+    const CStandardPolicy testPolicy;\n     LOCK(cs_main);\n     CBasicKeyStore keystore;\n     CCoinsView coinsDummy;"
      },
      {
        "sha": "de0c14e19f183263c9e397ce7e8da45abe14e1b9",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 10,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d03f15126b79bd9f22ccd27f1d8ca43d9e16bf5/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d03f15126b79bd9f22ccd27f1d8ca43d9e16bf5/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=3d03f15126b79bd9f22ccd27f1d8ca43d9e16bf5",
        "patch": "@@ -312,31 +312,49 @@ void ParseParameters(int argc, const char* const argv[])\n     }\n }\n \n-std::string GetArg(const std::string& strArg, const std::string& strDefault)\n+std::string GetArg(const std::string& strArg, const std::string& strDefault, const std::map<std::string, std::string>& mapArgs)\n {\n-    if (mapArgs.count(strArg))\n-        return mapArgs[strArg];\n+    std::map<std::string, std::string>::const_iterator it = mapArgs.find(strArg);\n+    if (it != mapArgs.end())\n+        return it->second;\n     return strDefault;\n }\n \n-int64_t GetArg(const std::string& strArg, int64_t nDefault)\n+int64_t GetArg(const std::string& strArg, int64_t nDefault, const std::map<std::string, std::string>& mapArgs)\n {\n-    if (mapArgs.count(strArg))\n-        return atoi64(mapArgs[strArg]);\n+    std::map<std::string, std::string>::const_iterator it = mapArgs.find(strArg);\n+    if (it != mapArgs.end())\n+        return atoi64(it->second);\n     return nDefault;\n }\n \n-bool GetBoolArg(const std::string& strArg, bool fDefault)\n+bool GetBoolArg(const std::string& strArg, bool fDefault, const std::map<std::string, std::string>& mapArgs)\n {\n-    if (mapArgs.count(strArg))\n+    std::map<std::string, std::string>::const_iterator it = mapArgs.find(strArg);\n+    if (it != mapArgs.end())\n     {\n-        if (mapArgs[strArg].empty())\n+        if (it->second.empty())\n             return true;\n-        return (atoi(mapArgs[strArg]) != 0);\n+        return (atoi(it->second) != 0);\n     }\n     return fDefault;\n }\n \n+std::string GetArg(const std::string& strArg, const std::string& strDefault)\n+{\n+    return GetArg(strArg, strDefault, mapArgs);\n+}\n+\n+int64_t GetArg(const std::string& strArg, int64_t nDefault)\n+{\n+    return GetArg(strArg, nDefault, mapArgs);\n+}\n+\n+bool GetBoolArg(const std::string& strArg, bool fDefault)\n+{\n+    return GetBoolArg(strArg, fDefault, mapArgs);\n+}\n+\n bool SoftSetArg(const std::string& strArg, const std::string& strValue)\n {\n     if (mapArgs.count(strArg))\n@@ -368,6 +386,12 @@ std::string HelpMessageOpt(const std::string &option, const std::string &message\n            std::string(\"\\n\\n\");\n }\n \n+void AppendMessagesOpt(std::string& strUsage, const std::vector<std::pair<std::string, std::string> >& optionsHelp)\n+{\n+    for (unsigned int i=0; i < optionsHelp.size(); i++)\n+        strUsage += HelpMessageOpt(optionsHelp[i].first, optionsHelp[i].second);\n+}\n+\n static std::string FormatException(const std::exception* pex, const char* pszThread)\n {\n #ifdef WIN32"
      },
      {
        "sha": "5d45bb65f4adcbc941101c7f9afb53b892ee45eb",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d03f15126b79bd9f22ccd27f1d8ca43d9e16bf5/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d03f15126b79bd9f22ccd27f1d8ca43d9e16bf5/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=3d03f15126b79bd9f22ccd27f1d8ca43d9e16bf5",
        "patch": "@@ -145,6 +145,7 @@ inline bool IsSwitchChar(char c)\n  * @return command-line argument or default value\n  */\n std::string GetArg(const std::string& strArg, const std::string& strDefault);\n+std::string GetArg(const std::string& strArg, const std::string& strDefault, const std::map<std::string, std::string>& mapArgs);\n \n /**\n  * Return integer argument or default value\n@@ -154,6 +155,7 @@ std::string GetArg(const std::string& strArg, const std::string& strDefault);\n  * @return command-line argument (0 if invalid number) or default value\n  */\n int64_t GetArg(const std::string& strArg, int64_t nDefault);\n+int64_t GetArg(const std::string& strArg, int64_t nDefault, const std::map<std::string, std::string>& mapArgs);\n \n /**\n  * Return boolean argument or default value\n@@ -163,6 +165,7 @@ int64_t GetArg(const std::string& strArg, int64_t nDefault);\n  * @return command-line argument or default value\n  */\n bool GetBoolArg(const std::string& strArg, bool fDefault);\n+bool GetBoolArg(const std::string& strArg, bool fDefault, const std::map<std::string, std::string>& mapArgs);\n \n /**\n  * Set an argument if it doesn't already have a value\n@@ -199,6 +202,12 @@ std::string HelpMessageGroup(const std::string& message);\n  */\n std::string HelpMessageOpt(const std::string& option, const std::string& message);\n \n+/**\n+ * @param strUsage a string where the options' help with me appended\n+ * @param optionsHelp a vector of string pairs to iteratively call HelpMessageOpt\n+ */\n+void AppendMessagesOpt(std::string& strUsage, const std::vector<std::pair<std::string, std::string> >& optionsHelp);\n+\n /**\n  * Return the number of physical cores available on the current system.\n  * @note This does not count virtual cores, such as those provided by HyperThreading"
      }
    ]
  },
  {
    "sha": "a4b28c491202a1d6c6e77f9439b08b3b2613e818",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNGIyOGM0OTEyMDJhMWQ2YzZlNzdmOTQzOWIwOGIzYjI2MTNlODE4",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-07-07T20:34:40Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-07-22T22:28:56Z"
      },
      "message": "fixup! the whole point of exposing policy options is to allow users to select them",
      "tree": {
        "sha": "d0fbb82bb33e04656f85a9ac069fc3a557fdb546",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d0fbb82bb33e04656f85a9ac069fc3a557fdb546"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a4b28c491202a1d6c6e77f9439b08b3b2613e818",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4b28c491202a1d6c6e77f9439b08b3b2613e818",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a4b28c491202a1d6c6e77f9439b08b3b2613e818",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4b28c491202a1d6c6e77f9439b08b3b2613e818/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3d03f15126b79bd9f22ccd27f1d8ca43d9e16bf5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d03f15126b79bd9f22ccd27f1d8ca43d9e16bf5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3d03f15126b79bd9f22ccd27f1d8ca43d9e16bf5"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 1,
      "deletions": 3
    },
    "files": [
      {
        "sha": "88ccff0ff0f1ee572afb8093a0b45085b8d4daa2",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a4b28c491202a1d6c6e77f9439b08b3b2613e818/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a4b28c491202a1d6c6e77f9439b08b3b2613e818/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=a4b28c491202a1d6c6e77f9439b08b3b2613e818",
        "patch": "@@ -21,16 +21,14 @@ std::vector<std::pair<std::string, std::string> > CStandardPolicy::GetOptionsHel\n {\n     std::vector<std::pair<std::string, std::string> > optionsHelp;\n     optionsHelp.push_back(std::make_pair(\"-permitbaremultisig\", strprintf(_(\"Relay non-P2SH multisig (default: %u)\"), fIsBareMultisigStd)));\n-    optionsHelp.push_back(std::make_pair(\"-acceptnonstdtxn\", strprintf(_(\"Relay and mine \\\"non-standard\\\" transactions (testnet/regtest only; default: %u)\"), Params(CBaseChainParams::MAIN).RequireStandard())));\n+    optionsHelp.push_back(std::make_pair(\"-acceptnonstdtxn\", strprintf(_(\"Relay and mine \\\"non-standard\\\" transactions (default: %u)\"), Params(CBaseChainParams::MAIN).RequireStandard())));\n     return optionsHelp;\n }\n \n void CStandardPolicy::InitFromArgs(const std::map<std::string, std::string>& mapArgs)\n {\n     fIsBareMultisigStd = GetBoolArg(\"-permitbaremultisig\", fIsBareMultisigStd, mapArgs);\n     fAcceptNonStdTxn = GetBoolArg(\"-acceptnonstdtxn\", !Params().RequireStandard(), mapArgs);\n-    if (fAcceptNonStdTxn && Params().RequireStandard())\n-        throw std::runtime_error(strprintf(_(\"%s: acceptnonstdtxn is not currently supported for %s chain.\"), __func__, Params().NetworkIDString()));\n }\n \n CStandardPolicy::CStandardPolicy(bool fIsBareMultisigStdIn, bool fAcceptNonStdTxnIn) :"
      }
    ]
  }
]