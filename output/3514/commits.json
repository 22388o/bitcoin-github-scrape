[
  {
    "sha": "f59d8f0b644d49324cabd19c58cf2262d49e1392",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNTlkOGYwYjY0NGQ0OTMyNGNhYmQxOWM1OGNmMjI2MmQ0OWUxMzky",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-01-10T12:23:26Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-02-08T15:52:19Z"
      },
      "message": "Per-peer block download tracking and stalled download detection.\n\nKeep track of which block is being requested (and to be requested) from\neach peer, and limit the number of blocks in-flight per peer. In addition,\ndetect stalled downloads, and disconnect if they persist for too long.\n\nThis means blocks are never requested twice, and should eliminate duplicate\ndownloads during synchronization.",
      "tree": {
        "sha": "b699fa0e1f6a0ca3fc09ef0ef50c4f30a6ad5b9c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b699fa0e1f6a0ca3fc09ef0ef50c4f30a6ad5b9c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f59d8f0b644d49324cabd19c58cf2262d49e1392",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f59d8f0b644d49324cabd19c58cf2262d49e1392",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f59d8f0b644d49324cabd19c58cf2262d49e1392",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f59d8f0b644d49324cabd19c58cf2262d49e1392/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "95e66247ebaac88dadd081f850ebf86c71831e61",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95e66247ebaac88dadd081f850ebf86c71831e61",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/95e66247ebaac88dadd081f850ebf86c71831e61"
      }
    ],
    "stats": {
      "total": 160,
      "additions": 131,
      "deletions": 29
    },
    "files": [
      {
        "sha": "b2873f2a10e1afc154e5679b8fa0ce400708447a",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 122,
        "deletions": 27,
        "changes": 149,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f59d8f0b644d49324cabd19c58cf2262d49e1392/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f59d8f0b644d49324cabd19c58cf2262d49e1392/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=f59d8f0b644d49324cabd19c58cf2262d49e1392",
        "patch": "@@ -112,6 +112,16 @@ uint32_t nBlockSequenceId = 1;\n // Sources of received blocks, to be able to send them reject messages or ban\n // them, if processing happens afterwards. Protected by cs_main.\n map<uint256, NodeId> mapBlockSource;\n+\n+// Blocks that are in flight, and that are in the queue to be downloaded.\n+// Protected by cs_main.\n+struct QueuedBlock {\n+    uint256 hash;\n+    int64_t nTime;  // Time of \"getdata\" request in microseconds.\n+    int nQueuedBefore;  // Number of blocks in flight at the time of request.\n+};\n+map<uint256, pair<NodeId, list<QueuedBlock>::iterator> > mapBlocksInFlight;\n+map<uint256, pair<NodeId, list<uint256>::iterator> > mapBlocksToDownload;\n }\n \n //////////////////////////////////////////////////////////////////////////////\n@@ -195,10 +205,20 @@ struct CNodeState {\n     std::string name;\n     // List of asynchronously-determined block rejections to notify this peer about.\n     std::vector<CBlockReject> rejects;\n+    list<QueuedBlock> vBlocksInFlight;\n+    int nBlocksInFlight;\n+    list<uint256> vBlocksToDownload;\n+    int nBlocksToDownload;\n+    int64_t nLastBlockReceive;\n+    int64_t nLastBlockProcess;\n \n     CNodeState() {\n         nMisbehavior = 0;\n         fShouldBan = false;\n+        nBlocksToDownload = 0;\n+        nBlocksInFlight = 0;\n+        nLastBlockReceive = 0;\n+        nLastBlockProcess = 0;\n     }\n };\n \n@@ -227,8 +247,71 @@ void InitializeNode(NodeId nodeid, const CNode *pnode) {\n \n void FinalizeNode(NodeId nodeid) {\n     LOCK(cs_main);\n+    CNodeState *state = State(nodeid);\n+\n+    BOOST_FOREACH(const QueuedBlock& entry, state->vBlocksInFlight)\n+        mapBlocksInFlight.erase(entry.hash);\n+    BOOST_FOREACH(const uint256& hash, state->vBlocksToDownload)\n+        mapBlocksToDownload.erase(hash);\n+\n     mapNodeState.erase(nodeid);\n }\n+\n+// Requires cs_main.\n+void MarkBlockAsReceived(const uint256 &hash, NodeId nodeFrom = -1) {\n+    map<uint256, pair<NodeId, list<uint256>::iterator> >::iterator itToDownload = mapBlocksToDownload.find(hash);\n+    if (itToDownload != mapBlocksToDownload.end()) {\n+        CNodeState *state = State(itToDownload->second.first);\n+        state->vBlocksToDownload.erase(itToDownload->second.second);\n+        state->nBlocksToDownload--;\n+        mapBlocksToDownload.erase(itToDownload);\n+    }\n+\n+    map<uint256, pair<NodeId, list<QueuedBlock>::iterator> >::iterator itInFlight = mapBlocksInFlight.find(hash);\n+    if (itInFlight != mapBlocksInFlight.end()) {\n+        CNodeState *state = State(itInFlight->second.first);\n+        state->vBlocksInFlight.erase(itInFlight->second.second);\n+        state->nBlocksInFlight--;\n+        if (itInFlight->second.first == nodeFrom)\n+            state->nLastBlockReceive = GetTimeMicros();\n+        mapBlocksInFlight.erase(itInFlight);\n+    }\n+\n+}\n+\n+// Requires cs_main.\n+bool AddBlockToQueue(NodeId nodeid, const uint256 &hash) {\n+    if (mapBlocksToDownload.count(hash) || mapBlocksInFlight.count(hash))\n+        return false;\n+\n+    CNodeState *state = State(nodeid);\n+    if (state == NULL)\n+        return false;\n+\n+    list<uint256>::iterator it = state->vBlocksToDownload.insert(state->vBlocksToDownload.end(), hash);\n+    state->nBlocksToDownload++;\n+    if (state->nBlocksToDownload > 5000)\n+        Misbehaving(nodeid, 10);\n+    mapBlocksToDownload[hash] = std::make_pair(nodeid, it);\n+    return true;\n+}\n+\n+// Requires cs_main.\n+void MarkBlockAsInFlight(NodeId nodeid, const uint256 &hash) {\n+    CNodeState *state = State(nodeid);\n+    assert(state != NULL);\n+\n+    // Make sure it's not listed somewhere already.\n+    MarkBlockAsReceived(hash);\n+\n+    QueuedBlock newentry = {hash, GetTimeMicros(), state->nBlocksInFlight};\n+    if (state->nBlocksInFlight == 0)\n+        state->nLastBlockReceive = newentry.nTime; // Reset when a first request is sent.\n+    list<QueuedBlock>::iterator it = state->vBlocksInFlight.insert(state->vBlocksInFlight.end(), newentry);\n+    state->nBlocksInFlight++;\n+    mapBlocksInFlight[hash] = std::make_pair(nodeid, it);\n+}\n+\n }\n \n bool GetNodeStateStats(NodeId nodeid, CNodeStateStats &stats) {\n@@ -1299,6 +1382,7 @@ void CheckForkWarningConditionsOnNewFork(CBlockIndex* pindexNewForkTip)\n     CheckForkWarningConditions();\n }\n \n+// Requires cs_main.\n void Misbehaving(NodeId pnode, int howmuch)\n {\n     if (howmuch == 0)\n@@ -2021,7 +2105,6 @@ bool AddToBlockIndex(CBlock& block, CValidationState& state, const CDiskBlockPos\n          pindexNew->nSequenceId = nBlockSequenceId++;\n     }\n     assert(pindexNew);\n-    mapAlreadyAskedFor.erase(CInv(MSG_BLOCK, hash));\n     map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.insert(make_pair(hash, pindexNew)).first;\n     pindexNew->phashBlock = &((*mi).first);\n     map<uint256, CBlockIndex*>::iterator miPrev = mapBlockIndex.find(block.hashPrevBlock);\n@@ -2367,11 +2450,8 @@ bool ProcessBlock(CValidationState &state, CNode* pfrom, CBlock* pblock, CDiskBl\n         return state.Invalid(error(\"ProcessBlock() : already have block (orphan) %s\", hash.ToString()), 0, \"duplicate\");\n \n     // Preliminary checks\n-    if (!CheckBlock(*pblock, state)) {\n-        if (state.CorruptionPossible())\n-            mapAlreadyAskedFor.erase(CInv(MSG_BLOCK, hash));\n+    if (!CheckBlock(*pblock, state))\n         return error(\"ProcessBlock() : CheckBlock FAILED\");\n-    }\n \n     CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint(mapBlockIndex);\n     if (pcheckpoint && pblock->hashPrevBlock != (chainActive.Tip() ? chainActive.Tip()->GetBlockHash() : uint256(0)))\n@@ -3223,7 +3303,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         return true;\n     }\n \n-\n+    State(pfrom->GetId())->nLastBlockProcess = GetTimeMicros();\n \n \n \n@@ -3426,15 +3506,6 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n             return error(\"message inv size() = %\"PRIszu\"\", vInv.size());\n         }\n \n-        // find last block in inv vector\n-        unsigned int nLastBlock = (unsigned int)(-1);\n-        for (unsigned int nInv = 0; nInv < vInv.size(); nInv++) {\n-            if (vInv[vInv.size() - 1 - nInv].type == MSG_BLOCK) {\n-                nLastBlock = vInv.size() - 1 - nInv;\n-                break;\n-            }\n-        }\n-\n         LOCK(cs_main);\n \n         for (unsigned int nInv = 0; nInv < vInv.size(); nInv++)\n@@ -3448,17 +3519,14 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n             LogPrint(\"net\", \"  got inventory: %s  %s\\n\", inv.ToString(), fAlreadyHave ? \"have\" : \"new\");\n \n             if (!fAlreadyHave) {\n-                if (!fImporting && !fReindex)\n-                    pfrom->AskFor(inv);\n+                if (!fImporting && !fReindex) {\n+                    if (inv.type == MSG_BLOCK)\n+                        AddBlockToQueue(pfrom->GetId(), inv.hash);\n+                    else\n+                        pfrom->AskFor(inv);\n+                }\n             } else if (inv.type == MSG_BLOCK && mapOrphanBlocks.count(inv.hash)) {\n                 PushGetBlocks(pfrom, chainActive.Tip(), GetOrphanRoot(inv.hash));\n-            } else if (nInv == nLastBlock) {\n-                // In case we are on a very long side-chain, it is possible that we already have\n-                // the last block in an inv bundle sent in response to getblocks. Try to detect\n-                // this situation and push another getblocks to continue.\n-                PushGetBlocks(pfrom, mapBlockIndex[inv.hash], uint256(0));\n-                if (fDebug)\n-                    LogPrintf(\"force request: %s\\n\", inv.ToString());\n             }\n \n             // Track requests for our stuff\n@@ -3665,6 +3733,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         LOCK(cs_main);\n         // Remember who we got this block from.\n         mapBlockSource[inv.hash] = pfrom->GetId();\n+        MarkBlockAsReceived(inv.hash, pfrom->GetId());\n \n         CValidationState state;\n         ProcessBlock(state, pfrom, &block);\n@@ -4192,12 +4261,38 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n             pto->PushMessage(\"inv\", vInv);\n \n \n+        // Detect stalled peers. Require that blocks are in flight, we haven't\n+        // received a (requested) block in one minute, and that all blocks are\n+        // in flight for over two minutes, since we first had a chance to\n+        // process an incoming block.\n+        int64_t nNow = GetTimeMicros();\n+        if (!pto->fDisconnect && state.nBlocksInFlight && \n+            state.nLastBlockReceive < state.nLastBlockProcess - BLOCK_DOWNLOAD_TIMEOUT*1000000 && \n+            state.vBlocksInFlight.front().nTime < state.nLastBlockProcess - 2*BLOCK_DOWNLOAD_TIMEOUT*1000000) {\n+            LogPrintf(\"Peer %s is stalling block download, disconnecting\\n\", state.name.c_str());\n+            pto->fDisconnect = true;\n+        }\n+\n         //\n-        // Message: getdata\n+        // Message: getdata (blocks)\n         //\n         vector<CInv> vGetData;\n-        int64_t nNow = GetTime() * 1000000;\n-        while (!pto->mapAskFor.empty() && (*pto->mapAskFor.begin()).first <= nNow)\n+        while (!pto->fDisconnect && state.nBlocksToDownload && state.nBlocksInFlight < MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n+            uint256 hash = state.vBlocksToDownload.front();\n+            vGetData.push_back(CInv(MSG_BLOCK, hash));\n+            MarkBlockAsInFlight(pto->GetId(), hash);\n+            LogPrint(\"net\", \"Requesting block %s from %s\\n\", hash.ToString().c_str(), state.name.c_str());\n+            if (vGetData.size() >= 1000)\n+            {\n+                pto->PushMessage(\"getdata\", vGetData);\n+                vGetData.clear();\n+            }\n+        }\n+\n+        //\n+        // Message: getdata (non-blocks)\n+        //\n+        while (!pto->fDisconnect && !pto->mapAskFor.empty() && (*pto->mapAskFor.begin()).first <= nNow)\n         {\n             const CInv& inv = (*pto->mapAskFor.begin()).second;\n             if (!AlreadyHave(inv))"
      },
      {
        "sha": "159a665466afe1d4f581d9daf2f52e1e0f532c80",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f59d8f0b644d49324cabd19c58cf2262d49e1392/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f59d8f0b644d49324cabd19c58cf2262d49e1392/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=f59d8f0b644d49324cabd19c58cf2262d49e1392",
        "patch": "@@ -59,6 +59,11 @@ static const int COINBASE_MATURITY = 100;\n static const unsigned int LOCKTIME_THRESHOLD = 500000000; // Tue Nov  5 00:53:20 1985 UTC\n /** Maximum number of script-checking threads allowed */\n static const int MAX_SCRIPTCHECK_THREADS = 16;\n+/** Number of blocks that can be requested at any given time from a single peer. */\n+static const int MAX_BLOCKS_IN_TRANSIT_PER_PEER = 128;\n+/** Timeout in seconds before considering a block download peer unresponsive. */\n+static const unsigned int BLOCK_DOWNLOAD_TIMEOUT = 60;\n+\n #ifdef USE_UPNP\n static const int fHaveUPnP = true;\n #else\n@@ -182,6 +187,9 @@ bool VerifySignature(const CCoins& txFrom, const CTransaction& txTo, unsigned in\n bool AbortNode(const std::string &msg);\n /** Get statistics from node state */\n bool GetNodeStateStats(NodeId nodeid, CNodeStateStats &stats);\n+/** Increase a node's misbehavior score. */\n+void Misbehaving(NodeId nodeid, int howmuch);\n+\n \n /** (try to) add transaction to memory pool **/\n bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransaction &tx, bool fLimitFree,"
      },
      {
        "sha": "0307a0ccb299364f1609041c5dfebb1d11679756",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f59d8f0b644d49324cabd19c58cf2262d49e1392/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f59d8f0b644d49324cabd19c58cf2262d49e1392/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=f59d8f0b644d49324cabd19c58cf2262d49e1392",
        "patch": "@@ -427,7 +427,7 @@ class CNode\n         LogPrint(\"net\", \"askfor %s   %\"PRId64\" (%s)\\n\", inv.ToString().c_str(), nRequestTime, DateTimeStrFormat(\"%H:%M:%S\", nRequestTime/1000000).c_str());\n \n         // Make sure not to reuse time indexes to keep things in the same order\n-        int64_t nNow = (GetTime() - 1) * 1000000;\n+        int64_t nNow = GetTimeMicros() - 1000000;\n         static int64_t nLastTime;\n         ++nLastTime;\n         nNow = std::max(nNow, nLastTime);"
      },
      {
        "sha": "7bf7b19b5410992c88a74d51423c1c9b5727c7ed",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f59d8f0b644d49324cabd19c58cf2262d49e1392/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f59d8f0b644d49324cabd19c58cf2262d49e1392/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=f59d8f0b644d49324cabd19c58cf2262d49e1392",
        "patch": "@@ -21,7 +21,6 @@\n // Tests this internal-to-main.cpp method:\n extern bool AddOrphanTx(const CTransaction& tx);\n extern unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans);\n-extern void Misbehaving(NodeId nodeid, int howmuch);\n extern std::map<uint256, CTransaction> mapOrphanTransactions;\n extern std::map<uint256, std::set<uint256> > mapOrphanTransactionsByPrev;\n "
      }
    ]
  }
]