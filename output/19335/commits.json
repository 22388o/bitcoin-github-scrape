[
  {
    "sha": "65fb8807ac402d1e924fd85969b5837c192bf59f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NWZiODgwN2FjNDAyZDFlOTI0ZmQ4NTk2OWI1ODM3YzE5MmJmNTlm",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-07-16T17:19:37Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-07-23T03:30:19Z"
      },
      "message": "Combine BerkeleyEnvironment::Verify into BerkeleyDatabase::Verify",
      "tree": {
        "sha": "72f74723735ad8997103cc664cdc98ed6529d3d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/72f74723735ad8997103cc664cdc98ed6529d3d5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/65fb8807ac402d1e924fd85969b5837c192bf59f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65fb8807ac402d1e924fd85969b5837c192bf59f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/65fb8807ac402d1e924fd85969b5837c192bf59f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65fb8807ac402d1e924fd85969b5837c192bf59f/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9d4b3d86b694ac6e56495e1955f6bf5ff584cbb9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d4b3d86b694ac6e56495e1955f6bf5ff584cbb9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9d4b3d86b694ac6e56495e1955f6bf5ff584cbb9"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 6,
      "deletions": 13
    },
    "files": [
      {
        "sha": "3c9d25e5a8b1539b564cf937b2dfe66c9a4dbb08",
        "filename": "src/wallet/bdb.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 11,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65fb8807ac402d1e924fd85969b5837c192bf59f/src/wallet/bdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65fb8807ac402d1e924fd85969b5837c192bf59f/src/wallet/bdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.cpp?ref=65fb8807ac402d1e924fd85969b5837c192bf59f",
        "patch": "@@ -232,16 +232,6 @@ BerkeleyEnvironment::BerkeleyEnvironment()\n     fMockDb = true;\n }\n \n-bool BerkeleyEnvironment::Verify(const std::string& strFile)\n-{\n-    LOCK(cs_db);\n-    assert(mapFileUseCount.count(strFile) == 0);\n-\n-    Db db(dbenv.get(), 0);\n-    int result = db.verify(strFile.c_str(), nullptr, nullptr, 0);\n-    return result == 0;\n-}\n-\n BerkeleyBatch::SafeDbt::SafeDbt()\n {\n     m_dbt.set_flags(DB_DBT_MALLOC);\n@@ -295,7 +285,12 @@ bool BerkeleyDatabase::Verify(bilingual_str& errorStr)\n \n     if (fs::exists(file_path))\n     {\n-        if (!env->Verify(strFile)) {\n+        LOCK(cs_db);\n+        assert(env->mapFileUseCount.count(strFile) == 0);\n+\n+        Db db(env->dbenv.get(), 0);\n+        int result = db.verify(strFile.c_str(), nullptr, nullptr, 0);\n+        if (result != 0) {\n             errorStr = strprintf(_(\"%s corrupt. Try using the wallet tool bitcoin-wallet to salvage or restoring a backup.\"), file_path);\n             return false;\n         }"
      },
      {
        "sha": "3068a75c5d82c6c11c8ad7dbf68a73edaef1355b",
        "filename": "src/wallet/bdb.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65fb8807ac402d1e924fd85969b5837c192bf59f/src/wallet/bdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65fb8807ac402d1e924fd85969b5837c192bf59f/src/wallet/bdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.h?ref=65fb8807ac402d1e924fd85969b5837c192bf59f",
        "patch": "@@ -67,8 +67,6 @@ class BerkeleyEnvironment\n     bool IsDatabaseLoaded(const std::string& db_filename) const { return m_databases.find(db_filename) != m_databases.end(); }\n     fs::path Directory() const { return strPath; }\n \n-    bool Verify(const std::string& strFile);\n-\n     bool Open(bilingual_str& error);\n     void Close();\n     void Flush(bool fShutdown);"
      }
    ]
  },
  {
    "sha": "4fe4b3bf1b152877677a6115f82aefaf318dd514",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZmU0YjNiZjFiMTUyODc3Njc3YTYxMTVmODJhZWZhZjMxOGRkNTE0",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-13T18:09:26Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-07-23T03:30:19Z"
      },
      "message": "walletdb: track database file use as m_refcount within BerkeleyDatabase\n\nInstead of having BerkeleyEnvironment track the file use count, make\nBerkeleyDatabase do it itself.",
      "tree": {
        "sha": "e4694b47079bfbd7df234094d24596d96fe5b536",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e4694b47079bfbd7df234094d24596d96fe5b536"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4fe4b3bf1b152877677a6115f82aefaf318dd514",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4fe4b3bf1b152877677a6115f82aefaf318dd514",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4fe4b3bf1b152877677a6115f82aefaf318dd514",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4fe4b3bf1b152877677a6115f82aefaf318dd514/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "65fb8807ac402d1e924fd85969b5837c192bf59f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65fb8807ac402d1e924fd85969b5837c192bf59f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/65fb8807ac402d1e924fd85969b5837c192bf59f"
      }
    ],
    "stats": {
      "total": 57,
      "additions": 28,
      "deletions": 29
    },
    "files": [
      {
        "sha": "4653a75fced6900ddd3b51c0da8ee500c7f0ab72",
        "filename": "src/wallet/bdb.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 28,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4fe4b3bf1b152877677a6115f82aefaf318dd514/src/wallet/bdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4fe4b3bf1b152877677a6115f82aefaf318dd514/src/wallet/bdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.cpp?ref=4fe4b3bf1b152877677a6115f82aefaf318dd514",
        "patch": "@@ -97,9 +97,8 @@ void BerkeleyEnvironment::Close()\n     fDbEnvInit = false;\n \n     for (auto& db : m_databases) {\n-        auto count = mapFileUseCount.find(db.first);\n-        assert(count == mapFileUseCount.end() || count->second == 0);\n         BerkeleyDatabase& database = db.second.get();\n+        assert(database.m_refcount <= 0);\n         if (database.m_db) {\n             database.m_db->close(0);\n             database.m_db.reset();\n@@ -285,8 +284,7 @@ bool BerkeleyDatabase::Verify(bilingual_str& errorStr)\n \n     if (fs::exists(file_path))\n     {\n-        LOCK(cs_db);\n-        assert(env->mapFileUseCount.count(strFile) == 0);\n+        assert(m_refcount == 0);\n \n         Db db(env->dbenv.get(), 0);\n         int result = db.verify(strFile.c_str(), nullptr, nullptr, 0);\n@@ -459,8 +457,8 @@ void BerkeleyEnvironment::ReloadDbEnv()\n     AssertLockNotHeld(cs_db);\n     std::unique_lock<RecursiveMutex> lock(cs_db);\n     m_db_in_use.wait(lock, [this](){\n-        for (auto& count : mapFileUseCount) {\n-            if (count.second > 0) return false;\n+        for (auto& db : m_databases) {\n+            if (db.second.get().m_refcount > 0) return false;\n         }\n         return true;\n     });\n@@ -488,11 +486,11 @@ bool BerkeleyDatabase::Rewrite(const char* pszSkip)\n     while (true) {\n         {\n             LOCK(cs_db);\n-            if (!env->mapFileUseCount.count(strFile) || env->mapFileUseCount[strFile] == 0) {\n+            if (m_refcount <= 0) {\n                 // Flush log data to the dat file\n                 env->CloseDb(strFile);\n                 env->CheckpointLSN(strFile);\n-                env->mapFileUseCount.erase(strFile);\n+                m_refcount = -1;\n \n                 bool fSuccess = true;\n                 LogPrintf(\"BerkeleyBatch::Rewrite: Rewriting %s...\\n\", strFile);\n@@ -576,10 +574,11 @@ void BerkeleyEnvironment::Flush(bool fShutdown)\n         return;\n     {\n         LOCK(cs_db);\n-        std::map<std::string, int>::iterator mi = mapFileUseCount.begin();\n-        while (mi != mapFileUseCount.end()) {\n-            std::string strFile = (*mi).first;\n-            int nRefCount = (*mi).second;\n+        bool no_dbs_accessed = true;\n+        for (auto& db_it : m_databases) {\n+            std::string strFile = db_it.first;\n+            int nRefCount = db_it.second.get().m_refcount;\n+            if (nRefCount < 0) continue;\n             LogPrint(BCLog::WALLETDB, \"BerkeleyEnvironment::Flush: Flushing %s (refcount = %d)...\\n\", strFile, nRefCount);\n             if (nRefCount == 0) {\n                 // Move log data to the dat file\n@@ -590,14 +589,15 @@ void BerkeleyEnvironment::Flush(bool fShutdown)\n                 if (!fMockDb)\n                     dbenv->lsn_reset(strFile.c_str(), 0);\n                 LogPrint(BCLog::WALLETDB, \"BerkeleyEnvironment::Flush: %s closed\\n\", strFile);\n-                mapFileUseCount.erase(mi++);\n-            } else\n-                mi++;\n+                nRefCount = -1;\n+            } else {\n+                no_dbs_accessed = false;\n+            }\n         }\n         LogPrint(BCLog::WALLETDB, \"BerkeleyEnvironment::Flush: Flush(%s)%s took %15dms\\n\", fShutdown ? \"true\" : \"false\", fDbEnvInit ? \"\" : \" database not started\", GetTimeMillis() - nStart);\n         if (fShutdown) {\n             char** listp;\n-            if (mapFileUseCount.empty()) {\n+            if (no_dbs_accessed) {\n                 dbenv->log_archive(&listp, DB_ARCH_REMOVE);\n                 Close();\n                 if (!fMockDb) {\n@@ -618,21 +618,20 @@ bool BerkeleyDatabase::PeriodicFlush()\n     if (!lockDb) return false;\n \n     // Don't flush if any databases are in use\n-    for (const auto& use_count : env->mapFileUseCount) {\n-        if (use_count.second > 0) return false;\n+    for (auto& it : env->m_databases) {\n+        if (it.second.get().m_refcount > 0) return false;\n     }\n \n     // Don't flush if there haven't been any batch writes for this database.\n-    auto it = env->mapFileUseCount.find(strFile);\n-    if (it == env->mapFileUseCount.end()) return false;\n+    if (m_refcount < 0) return false;\n \n     LogPrint(BCLog::WALLETDB, \"Flushing %s\\n\", strFile);\n     int64_t nStart = GetTimeMillis();\n \n     // Flush wallet file so it's self contained\n     env->CloseDb(strFile);\n     env->CheckpointLSN(strFile);\n-    env->mapFileUseCount.erase(it);\n+    m_refcount = -1;\n \n     LogPrint(BCLog::WALLETDB, \"Flushed %s %dms\\n\", strFile, GetTimeMillis() - nStart);\n \n@@ -648,12 +647,11 @@ bool BerkeleyDatabase::Backup(const std::string& strDest) const\n     {\n         {\n             LOCK(cs_db);\n-            if (!env->mapFileUseCount.count(strFile) || env->mapFileUseCount[strFile] == 0)\n+            if (m_refcount <= 0)\n             {\n                 // Flush log data to the dat file\n                 env->CloseDb(strFile);\n                 env->CheckpointLSN(strFile);\n-                env->mapFileUseCount.erase(strFile);\n \n                 // Copy wallet file\n                 fs::path pathSrc = env->Directory() / strFile;\n@@ -835,15 +833,17 @@ bool BerkeleyBatch::HasKey(CDataStream&& key)\n void BerkeleyDatabase::AddRef()\n {\n     LOCK(cs_db);\n-    ++env->mapFileUseCount[strFile];\n+    if (m_refcount < 0) {\n+        m_refcount = 1;\n+    } else {\n+        m_refcount++;\n+    }\n }\n \n void BerkeleyDatabase::RemoveRef()\n {\n-    {\n-        LOCK(cs_db);\n-        --env->mapFileUseCount[strFile];\n-    }\n+    LOCK(cs_db);\n+    m_refcount--;\n     env->m_db_in_use.notify_all();\n }\n "
      },
      {
        "sha": "6c148b37cbf9ade7bec07a7df2a8904386e8e59c",
        "filename": "src/wallet/bdb.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4fe4b3bf1b152877677a6115f82aefaf318dd514/src/wallet/bdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4fe4b3bf1b152877677a6115f82aefaf318dd514/src/wallet/bdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.h?ref=4fe4b3bf1b152877677a6115f82aefaf318dd514",
        "patch": "@@ -52,7 +52,6 @@ class BerkeleyEnvironment\n \n public:\n     std::unique_ptr<DbEnv> dbenv;\n-    std::map<std::string, int> mapFileUseCount;\n     std::map<std::string, std::reference_wrapper<BerkeleyDatabase>> m_databases;\n     std::unordered_map<std::string, WalletDatabaseFileId> m_fileids;\n     std::condition_variable_any m_db_in_use;"
      }
    ]
  },
  {
    "sha": "d86efab37002841fd059251672e1ec1a977b743f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkODZlZmFiMzcwMDI4NDFmZDA1OTI1MTY3MmUxZWMxYTk3N2I3NDNm",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-11T02:41:34Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-07-23T03:30:19Z"
      },
      "message": "walletdb: Move Db->open to BerkeleyDatabase::Open\n\nInstead of opening the Db handle in BerkeleyBatch, make BerkeleyDatabase\ndo that.",
      "tree": {
        "sha": "19b52f8623b2b11dd55891636b5f24f592c9bd79",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/19b52f8623b2b11dd55891636b5f24f592c9bd79"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d86efab37002841fd059251672e1ec1a977b743f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d86efab37002841fd059251672e1ec1a977b743f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d86efab37002841fd059251672e1ec1a977b743f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d86efab37002841fd059251672e1ec1a977b743f/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4fe4b3bf1b152877677a6115f82aefaf318dd514",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4fe4b3bf1b152877677a6115f82aefaf318dd514",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4fe4b3bf1b152877677a6115f82aefaf318dd514"
      }
    ],
    "stats": {
      "total": 61,
      "additions": 32,
      "deletions": 29
    },
    "files": [
      {
        "sha": "55590fcc5e15b1787eac4280d00c4558782be69c",
        "filename": "src/wallet/bdb.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 28,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d86efab37002841fd059251672e1ec1a977b743f/src/wallet/bdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d86efab37002841fd059251672e1ec1a977b743f/src/wallet/bdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.cpp?ref=d86efab37002841fd059251672e1ec1a977b743f",
        "patch": "@@ -317,13 +317,27 @@ BerkeleyDatabase::~BerkeleyDatabase()\n \n BerkeleyBatch::BerkeleyBatch(BerkeleyDatabase& database, const char* pszMode, bool fFlushOnCloseIn) : pdb(nullptr), activeTxn(nullptr), m_cursor(nullptr), m_database(database)\n {\n+    database.AddRef();\n+    database.Open(pszMode);\n     fReadOnly = (!strchr(pszMode, '+') && !strchr(pszMode, 'w'));\n     fFlushOnClose = fFlushOnCloseIn;\n     env = database.env.get();\n-    if (database.IsDummy()) {\n+    pdb = database.m_db.get();\n+    strFile = database.strFile;\n+    bool fCreate = strchr(pszMode, 'c') != nullptr;\n+    if (fCreate && !Exists(std::string(\"version\"))) {\n+        bool fTmp = fReadOnly;\n+        fReadOnly = false;\n+        Write(std::string(\"version\"), CLIENT_VERSION);\n+        fReadOnly = fTmp;\n+    }\n+}\n+\n+void BerkeleyDatabase::Open(const char* pszMode)\n+{\n+    if (IsDummy()){\n         return;\n     }\n-    const std::string &strFilename = database.strFile;\n \n     bool fCreate = strchr(pszMode, 'c') != nullptr;\n     unsigned int nFlags = DB_THREAD;\n@@ -334,10 +348,9 @@ BerkeleyBatch::BerkeleyBatch(BerkeleyDatabase& database, const char* pszMode, bo\n         LOCK(cs_db);\n         bilingual_str open_err;\n         if (!env->Open(open_err))\n-            throw std::runtime_error(\"BerkeleyBatch: Failed to open database environment.\");\n+            throw std::runtime_error(\"BerkeleyDatabase: Failed to open database environment.\");\n \n-        pdb = database.m_db.get();\n-        if (pdb == nullptr) {\n+        if (m_db == nullptr) {\n             int ret;\n             std::unique_ptr<Db> pdb_temp = MakeUnique<Db>(env->dbenv.get(), 0);\n \n@@ -346,19 +359,19 @@ BerkeleyBatch::BerkeleyBatch(BerkeleyDatabase& database, const char* pszMode, bo\n                 DbMpoolFile* mpf = pdb_temp->get_mpf();\n                 ret = mpf->set_flags(DB_MPOOL_NOFILE, 1);\n                 if (ret != 0) {\n-                    throw std::runtime_error(strprintf(\"BerkeleyBatch: Failed to configure for no temp file backing for database %s\", strFilename));\n+                    throw std::runtime_error(strprintf(\"BerkeleyDatabase: Failed to configure for no temp file backing for database %s\", strFile));\n                 }\n             }\n \n             ret = pdb_temp->open(nullptr,                             // Txn pointer\n-                            fMockDb ? nullptr : strFilename.c_str(),  // Filename\n-                            fMockDb ? strFilename.c_str() : \"main\",   // Logical db name\n+                            fMockDb ? nullptr : strFile.c_str(),      // Filename\n+                            fMockDb ? strFile.c_str() : \"main\",       // Logical db name\n                             DB_BTREE,                                 // Database type\n                             nFlags,                                   // Flags\n                             0);\n \n             if (ret != 0) {\n-                throw std::runtime_error(strprintf(\"BerkeleyBatch: Error %d, can't open database %s\", ret, strFilename));\n+                throw std::runtime_error(strprintf(\"BerkeleyDatabase: Error %d, can't open database %s\", ret, strFile));\n             }\n \n             // Call CheckUniqueFileid on the containing BDB environment to\n@@ -377,29 +390,15 @@ BerkeleyBatch::BerkeleyBatch(BerkeleyDatabase& database, const char* pszMode, bo\n             // versions of BDB have an set_lk_exclusive method for this\n             // purpose, but the older version we use does not.)\n             for (const auto& env : g_dbenvs) {\n-                CheckUniqueFileid(*env.second.lock().get(), strFilename, *pdb_temp, this->env->m_fileids[strFilename]);\n+                CheckUniqueFileid(*env.second.lock().get(), strFile, *pdb_temp, this->env->m_fileids[strFile]);\n             }\n \n-            pdb = pdb_temp.release();\n-            database.m_db.reset(pdb);\n+            m_db.reset(pdb_temp.release());\n \n-            if (fCreate && !Exists(std::string(\"version\"))) {\n-                bool fTmp = fReadOnly;\n-                fReadOnly = false;\n-                Write(std::string(\"version\"), CLIENT_VERSION);\n-                fReadOnly = fTmp;\n-            }\n         }\n-        database.AddRef();\n-        strFile = strFilename;\n     }\n }\n \n-void BerkeleyDatabase::Open(const char* mode)\n-{\n-    throw std::logic_error(\"BerkeleyDatabase does not implement Open. This function should not be called.\");\n-}\n-\n void BerkeleyBatch::Flush()\n {\n     if (activeTxn)\n@@ -420,6 +419,12 @@ void BerkeleyDatabase::IncrementUpdateCounter()\n     ++nUpdateCounter;\n }\n \n+BerkeleyBatch::~BerkeleyBatch()\n+{\n+    Close();\n+    m_database.RemoveRef();\n+}\n+\n void BerkeleyBatch::Close()\n {\n     if (!pdb)\n@@ -432,8 +437,6 @@ void BerkeleyBatch::Close()\n \n     if (fFlushOnClose)\n         Flush();\n-\n-    m_database.RemoveRef();\n }\n \n void BerkeleyEnvironment::CloseDb(const std::string& strFile)\n@@ -844,7 +847,7 @@ void BerkeleyDatabase::RemoveRef()\n {\n     LOCK(cs_db);\n     m_refcount--;\n-    env->m_db_in_use.notify_all();\n+    if (env) env->m_db_in_use.notify_all();\n }\n \n std::unique_ptr<DatabaseBatch> BerkeleyDatabase::MakeBatch(const char* mode, bool flush_on_close)"
      },
      {
        "sha": "90f5f2e877b1bad1ba7af1f6a72fbad85f6d4058",
        "filename": "src/wallet/bdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d86efab37002841fd059251672e1ec1a977b743f/src/wallet/bdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d86efab37002841fd059251672e1ec1a977b743f/src/wallet/bdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.h?ref=d86efab37002841fd059251672e1ec1a977b743f",
        "patch": "@@ -217,7 +217,7 @@ class BerkeleyBatch : public DatabaseBatch\n \n public:\n     explicit BerkeleyBatch(BerkeleyDatabase& database, const char* pszMode = \"r+\", bool fFlushOnCloseIn=true);\n-    ~BerkeleyBatch() override { Close(); }\n+    ~BerkeleyBatch() override;\n \n     BerkeleyBatch(const BerkeleyBatch&) = delete;\n     BerkeleyBatch& operator=(const BerkeleyBatch&) = delete;"
      }
    ]
  },
  {
    "sha": "00f0041351bcd6ddbab110df1189f79ce011e192",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMGYwMDQxMzUxYmNkNmRkYmFiMTEwZGYxMTg5Zjc5Y2UwMTFlMTky",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-07-16T18:24:34Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-07-23T03:30:19Z"
      },
      "message": "No need to check for duplicate fileids in all dbenvs\n\nSince we have .walletlock in each directory, we don't need the duplicate\nfileid checks across all dbenvs as it shouldn't be possible anyways.",
      "tree": {
        "sha": "14c9826de1857d5ee48a02642730a31772159799",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/14c9826de1857d5ee48a02642730a31772159799"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/00f0041351bcd6ddbab110df1189f79ce011e192",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/00f0041351bcd6ddbab110df1189f79ce011e192",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/00f0041351bcd6ddbab110df1189f79ce011e192",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/00f0041351bcd6ddbab110df1189f79ce011e192/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d86efab37002841fd059251672e1ec1a977b743f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d86efab37002841fd059251672e1ec1a977b743f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d86efab37002841fd059251672e1ec1a977b743f"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 9,
      "deletions": 20
    },
    "files": [
      {
        "sha": "a8719806ab065eed805f19c90239c12d80bd8d0f",
        "filename": "src/wallet/bdb.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 17,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/00f0041351bcd6ddbab110df1189f79ce011e192/src/wallet/bdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/00f0041351bcd6ddbab110df1189f79ce011e192/src/wallet/bdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.cpp?ref=00f0041351bcd6ddbab110df1189f79ce011e192",
        "patch": "@@ -32,12 +32,12 @@ void CheckUniqueFileid(const BerkeleyEnvironment& env, const std::string& filena\n \n     int ret = db.get_mpf()->get_fileid(fileid.value);\n     if (ret != 0) {\n-        throw std::runtime_error(strprintf(\"BerkeleyBatch: Can't open database %s (get_fileid failed with %d)\", filename, ret));\n+        throw std::runtime_error(strprintf(\"BerkeleyDatabase: Can't open database %s (get_fileid failed with %d)\", filename, ret));\n     }\n \n     for (const auto& item : env.m_fileids) {\n         if (fileid == item.second && &fileid != &item.second) {\n-            throw std::runtime_error(strprintf(\"BerkeleyBatch: Can't open database %s (duplicates fileid %s from %s)\", filename,\n+            throw std::runtime_error(strprintf(\"BerkeleyDatabase: Can't open database %s (duplicates fileid %s from %s)\", filename,\n                 HexStr(std::begin(item.second.value), std::end(item.second.value)), item.first));\n         }\n     }\n@@ -309,6 +309,8 @@ BerkeleyDatabase::~BerkeleyDatabase()\n {\n     if (env) {\n         LOCK(cs_db);\n+        env->CloseDb(strFile);\n+        assert(!m_db);\n         size_t erased = env->m_databases.erase(strFile);\n         assert(erased == 1);\n         env->m_fileids.erase(strFile);\n@@ -373,25 +375,12 @@ void BerkeleyDatabase::Open(const char* pszMode)\n             if (ret != 0) {\n                 throw std::runtime_error(strprintf(\"BerkeleyDatabase: Error %d, can't open database %s\", ret, strFile));\n             }\n+            m_file_path = (env->Directory() / strFile).string();\n \n             // Call CheckUniqueFileid on the containing BDB environment to\n             // avoid BDB data consistency bugs that happen when different data\n             // files in the same environment have the same fileid.\n-            //\n-            // Also call CheckUniqueFileid on all the other g_dbenvs to prevent\n-            // bitcoin from opening the same data file through another\n-            // environment when the file is referenced through equivalent but\n-            // not obviously identical symlinked or hard linked or bind mounted\n-            // paths. In the future a more relaxed check for equal inode and\n-            // device ids could be done instead, which would allow opening\n-            // different backup copies of a wallet at the same time. Maybe even\n-            // more ideally, an exclusive lock for accessing the database could\n-            // be implemented, so no equality checks are needed at all. (Newer\n-            // versions of BDB have an set_lk_exclusive method for this\n-            // purpose, but the older version we use does not.)\n-            for (const auto& env : g_dbenvs) {\n-                CheckUniqueFileid(*env.second.lock().get(), strFile, *pdb_temp, this->env->m_fileids[strFile]);\n-            }\n+            CheckUniqueFileid(*env, strFile, *pdb_temp, this->env->m_fileids[strFile]);\n \n             m_db.reset(pdb_temp.release());\n "
      },
      {
        "sha": "a54396cad3bf366bae5619d8d3d8a3f59edab1a7",
        "filename": "test/functional/wallet_multiwallet.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/00f0041351bcd6ddbab110df1189f79ce011e192/test/functional/wallet_multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/00f0041351bcd6ddbab110df1189f79ce011e192/test/functional/wallet_multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_multiwallet.py?ref=00f0041351bcd6ddbab110df1189f79ce011e192",
        "patch": "@@ -120,7 +120,7 @@ def wallet_file(name):\n \n         # should not initialize if one wallet is a copy of another\n         shutil.copyfile(wallet_dir('w8'), wallet_dir('w8_copy'))\n-        exp_stderr = r\"BerkeleyBatch: Can't open database w8_copy \\(duplicates fileid \\w+ from w8\\)\"\n+        exp_stderr = r\"BerkeleyDatabase: Can't open database w8_copy \\(duplicates fileid \\w+ from w8\\)\"\n         self.nodes[0].assert_start_raises_init_error(['-wallet=w8', '-wallet=w8_copy'], exp_stderr, match=ErrorMatch.PARTIAL_REGEX)\n \n         # should not initialize if wallet file is a symlink\n@@ -258,10 +258,10 @@ def wallet_file(name):\n         assert_raises_rpc_error(-4, \"Wallet file verification failed. Error loading wallet wallet.dat. Duplicate -wallet filename specified.\", self.nodes[0].loadwallet, 'wallet.dat')\n \n         # Fail to load if one wallet is a copy of another\n-        assert_raises_rpc_error(-4, \"BerkeleyBatch: Can't open database w8_copy (duplicates fileid\", self.nodes[0].loadwallet, 'w8_copy')\n+        assert_raises_rpc_error(-4, \"BerkeleyDatabase: Can't open database w8_copy (duplicates fileid\", self.nodes[0].loadwallet, 'w8_copy')\n \n         # Fail to load if one wallet is a copy of another, test this twice to make sure that we don't re-introduce #14304\n-        assert_raises_rpc_error(-4, \"BerkeleyBatch: Can't open database w8_copy (duplicates fileid\", self.nodes[0].loadwallet, 'w8_copy')\n+        assert_raises_rpc_error(-4, \"BerkeleyDatabase: Can't open database w8_copy (duplicates fileid\", self.nodes[0].loadwallet, 'w8_copy')\n \n \n         # Fail to load if wallet file is a symlink"
      }
    ]
  },
  {
    "sha": "74507ce71eb61105fb3ae8460999099234ca7b8b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NDUwN2NlNzFlYjYxMTA1ZmIzYWU4NDYwOTk5MDk5MjM0Y2E3Yjhi",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-06-15T20:14:57Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-07-23T03:30:19Z"
      },
      "message": "walletdb: Remove BerkeleyBatch friend class from BerkeleyDatabase",
      "tree": {
        "sha": "dfd8860bfe8104ea2f3ec96d798f45fd5c08cd36",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dfd8860bfe8104ea2f3ec96d798f45fd5c08cd36"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/74507ce71eb61105fb3ae8460999099234ca7b8b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/74507ce71eb61105fb3ae8460999099234ca7b8b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/74507ce71eb61105fb3ae8460999099234ca7b8b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/74507ce71eb61105fb3ae8460999099234ca7b8b/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "00f0041351bcd6ddbab110df1189f79ce011e192",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/00f0041351bcd6ddbab110df1189f79ce011e192",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/00f0041351bcd6ddbab110df1189f79ce011e192"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "982423f00e17f3b26b4d1e37d6fc649cd42dab8f",
        "filename": "src/wallet/bdb.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74507ce71eb61105fb3ae8460999099234ca7b8b/src/wallet/bdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74507ce71eb61105fb3ae8460999099234ca7b8b/src/wallet/bdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.h?ref=74507ce71eb61105fb3ae8460999099234ca7b8b",
        "patch": "@@ -97,7 +97,6 @@ class BerkeleyBatch;\n  **/\n class BerkeleyDatabase : public WalletDatabase\n {\n-    friend class BerkeleyBatch;\n public:\n     /** Create dummy DB handle */\n     BerkeleyDatabase() : WalletDatabase(), env(nullptr)\n@@ -163,11 +162,12 @@ class BerkeleyDatabase : public WalletDatabase\n     /** Database pointer. This is initialized lazily and reset during flushes, so it can be null. */\n     std::unique_ptr<Db> m_db;\n \n+    std::string strFile;\n+\n     /** Make a BerkeleyBatch connected to this database */\n     std::unique_ptr<DatabaseBatch> MakeBatch(const char* mode = \"r+\", bool flush_on_close = true) override;\n \n private:\n-    std::string strFile;\n \n     /** Return whether this database handle is a dummy for testing.\n      * Only to be used at a low level, application should ideally not care"
      }
    ]
  }
]