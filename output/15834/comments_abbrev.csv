gmaxwell,2019-04-17T06:24:55Z,Are we failing to dequeue txn for non-witness peers that send us witness txn that we drop?,https://github.com/bitcoin/bitcoin/pull/15834#issuecomment-483953736,483953736,
MarcoFalke,2019-04-17T12:06:23Z,"Concept ACK\n\nCould you please update the comment in \n\nhttps://github.com/bitcoin/bitcoin/blob/7c4e69c6dcde13c572888fa7d00f70157b1f32aa/src/net_processing.cpp#L1462-L1469\n\nto say:\n* Why we send so many notfound. (Because of orphan handling, see https://github.com/bitcoin/bitcoin/pull/15776#issuecomment-483916240)\n* Remove the phrase ""Currently only SPV clients actually care...""",https://github.com/bitcoin/bitcoin/pull/15834#issuecomment-484055268,484055268,
sdaftuar,2019-04-17T17:19:05Z,@ajtowns Thanks for the review and good catch on those additional issues you spotted.  I'll continue to work on this PR for master but I now think that we should revert this for 0.18 rather than try to make a fix and backport.  Please see #15839. ,https://github.com/bitcoin/bitcoin/pull/15834#issuecomment-484182749,484182749,
sdaftuar,2019-04-17T18:38:52Z,"> Are we failing to dequeue txn for non-witness peers that send us witness txn that we drop?\n\n@gmaxwell Not that I can see.  It looks to me like the only way a peer could ""send"" us a transaction that doesn't get dequeued is if it fails to deserialize successfully; once we've deserialized I don't think there's a code path that would not result in updating the data structures.",https://github.com/bitcoin/bitcoin/pull/15834#issuecomment-484211888,484211888,
gmaxwell,2019-04-17T21:51:24Z,So I don't forget: Instead of disconnecting we can make the ordering in the random fetching biased based on the size() of the INVs outstanding queue and the number of expired entries.... so hosts that INV dos us just end up de-preferred for fetching.,https://github.com/bitcoin/bitcoin/pull/15834#issuecomment-484274900,484274900,
DrahtBot,2019-04-18T15:15:05Z,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/15834#issuecomment-484552990,484552990,
laanwj,2019-04-18T15:38:25Z,Removing this from 0.18.0 because of #14897,https://github.com/bitcoin/bitcoin/pull/15834#issuecomment-484565270,484565270,
sdaftuar,2019-05-03T20:17:10Z,"I've updated this PR and believe the bugs have now been fixed.  I've also got a test, but with the delays involved it takes a very long time to run (ie the test has to sit around and wait for various timeouts).  I'm guessing people don't want to include a test in the test suite (even an extended test) that would take tens of minutes to complete.\n\nWould reviewers prefer me to switch the uses of",https://github.com/bitcoin/bitcoin/pull/15834#issuecomment-489226513,489226513,
gmaxwell,2019-05-11T20:12:47Z,Thanks for making progress here. Testing now.,https://github.com/bitcoin/bitcoin/pull/15834#issuecomment-491540511,491540511,
sdaftuar,2019-05-28T20:30:02Z,Addressed some nits.  Old version is [15834.1](https://github.com/sdaftuar/bitcoin/commits/15834.1),https://github.com/bitcoin/bitcoin/pull/15834#issuecomment-496677188,496677188,
sdaftuar,2019-05-28T21:11:49Z,"> If the functional test is already written, I'd run it and certainly review it as an exercise to understand it.\n\n@jonatack You can take a look at this if you'd like: https://github.com/sdaftuar/bitcoin/commit/db8fc5a2e25b6fcb08924e57f3a3a1acef6611ea\n\nTook a bit over 30 minutes the last time I ran it.\n",https://github.com/bitcoin/bitcoin/pull/15834#issuecomment-496691710,496691710,
ajtowns,2019-05-29T03:36:48Z,utACK 308b76732f97020c86977e29c854e8e27262cf7c,https://github.com/bitcoin/bitcoin/pull/15834#issuecomment-496771040,496771040,
jonatack,2019-05-30T13:09:57Z,"> @jonatack You can take a look at this if you'd like: [sdaftuar@db8fc5a](https://github.com/sdaftuar/bitcoin/commit/db8fc5a2e25b6fcb08924e57f3a3a1acef6611ea)\n> \n> Took a bit over 30 minutes the last time I ran it.\n\nThanks @sdaftuar. Initial run passed in ~23 minutes.\n\n```\n((HEAD detached at sdaftuar/test-15834))$  test/functional/feature_tx_download.py\n2019-05-30T12:38:57.455000Z ",https://github.com/bitcoin/bitcoin/pull/15834#issuecomment-497323434,497323434,
morcos,2019-06-06T15:53:59Z,"I reviewed the logic and tried to think through various failure modes and did a light review of the code.\nlight ACK 308b767",https://github.com/bitcoin/bitcoin/pull/15834#issuecomment-499555837,499555837,
laanwj,2019-06-10T10:26:16Z,Code review ACK 308b76732f97020c86977e29c854e8e27262cf7c,https://github.com/bitcoin/bitcoin/pull/15834#issuecomment-500368449,500368449,
sdaftuar,2019-06-11T15:37:43Z,"Thanks for the review @jamesob and @marcofalke.  I'm going to leave the nits alone for now, and if I end up having to update this PR again I'll consider taking the nits at that point.\n\nTo other reviewers, I think what this PR needs most is additional testing (eg on mainnet).",https://github.com/bitcoin/bitcoin/pull/15834#issuecomment-500898341,500898341,
jonatack,2019-06-11T16:43:40Z,"Light ACK 308b76732f97020c86977e29c854e8e27262cf7c.\n\nAgree with additional testing. I've been looking at mainnet logs and the functional tests at https://github.com/sdaftuar/bitcoin/commit/db8fc5a2e25b6fcb08924e57f3a3a1acef6611ea to see how they might be improved or run more quickly.\n\nRough breakdown of current test run times in `feature_tx_download.py`:\n- `test_in_flight_max` in particu",https://github.com/bitcoin/bitcoin/pull/15834#issuecomment-500926520,500926520,
sdaftuar,2019-06-11T20:10:28Z,"One other thought for reviewers -- one thing I think we didn't consider very well when #14897 was merged is the effect this change has on the relay of dependent transactions.\n\nAs a reminder, when a batch of transactions is to be announced to a peer, bitcoind will sort the batch so that parents appear before children in the INV message.  Before #14897, transactions announced by a given peer wou",https://github.com/bitcoin/bitcoin/pull/15834#issuecomment-501003776,501003776,
MarcoFalke,2019-06-11T20:22:38Z,"Looks like this has about 6 ACKs. Unless there are objections, this will be merged within the next couple of weeks.\n\nI am running a node with extended logging for corner cases to see if anything obvious breaks.",https://github.com/bitcoin/bitcoin/pull/15834#issuecomment-501008051,501008051,
jamesob,2019-06-11T20:57:16Z,"ACK 308b76732f\n\nI've run the functional test @sdaftuar wrote (https://github.com/sdaftuar/bitcoin/commit/db8fc5a2e25b6fcb08924e57f3a3a1acef6611ea) and verified that if fails before these changes and passes when cherry-picked on top of this branch.\n\nI compiled and ran this on mainnet for a few hours. My datadir was somewhat out of date, so this code was tested in both IBD and at tip. I watc",https://github.com/bitcoin/bitcoin/pull/15834#issuecomment-501019977,501019977,
jamesob,2019-06-11T21:04:23Z,@MarcoFalke isn't there an argument for merging this sooner rather than later so that it gets wider (if not incidental) test usage before 0.19 is released?,https://github.com/bitcoin/bitcoin/pull/15834#issuecomment-501022322,501022322,
MarcoFalke,2019-06-12T11:12:56Z,"Did some tests:\n\n* :heavy_check_mark: Race between a tx and the same tx in a block is correctly timed out:\n\nThe excerpt of the debug log shows that peer 7 relays us a tx, which is included in a block shortly after. Then peer 400 announces the tx to us, and we think it is `new` based on our heuristic tests. Peer 400 won't send us the tx anymore (for whatever reason), and it correctly times ",https://github.com/bitcoin/bitcoin/pull/15834#issuecomment-501227739,501227739,
MarcoFalke,2019-06-12T11:44:52Z,"ACK 308b76732f97020c86977e29c854e8e27262cf7c (Tested two of the three bugs this pull fixes, see comment above)\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nACK 308b76732f97020c86977e29c854e8e27262cf7c (Tested two of the three bugs this pull fixes, see comment above)\n-----BEGIN PGP SIGNATURE-----\n",https://github.com/bitcoin/bitcoin/pull/15834#issuecomment-501237294,501237294,
gmaxwell,2019-04-17T01:01:07Z,"Does the use of 10 here imply that-- assuming all peers INV a transaction to us at roughly the same time-- that we get no more robustness to transaction suppression than if we only had ten peers?  If so, perhaps this should be equal to the maximum number of peers times the interval",https://github.com/bitcoin/bitcoin/pull/15834#discussion_r276046301,276046301,src/net_processing.cpp
ajtowns,2019-04-17T02:54:05Z,"No, `TX_EXPIRY_INTERVAL` only removes tx's that are already in the `in_flight` list, which means we've already sent a GETDATA for them at least `TX_EXPIRY_INTERVAL` microseconds ago. EDIT: (And doesn't remove them from other peers' queues, whether they've been sent a GETDATA already, or that's still pending)",https://github.com/bitcoin/bitcoin/pull/15834#discussion_r276062747,276062747,src/net_processing.cpp
ajtowns,2019-04-17T03:16:22Z,"Maybe:\n\n    if (m_tx_in_flight.erase(hash)) {\n        m_tx_announced.erase(hash);\n    }\n\nOtherwise sending `INV x1 x2 .. x100`, then looping `INV x; NOTFOUND x` (without ever sending the corresponding `TX` message) will grow `m_tx_process_time` unboundedly, I think.",https://github.com/bitcoin/bitcoin/pull/15834#discussion_r276065900,276065900,src/net_processing.cpp
ajtowns,2019-04-17T04:17:58Z,"That's a bit unpredictable, maybe `nNow + TX_EXPIRY_INTERVAL/2 + GetRand(TX_EXPIRY_INTERVAL)` ? Also kind of a pain to test 10 minute delays that don't consider mocktime, but whatever.",https://github.com/bitcoin/bitcoin/pull/15834#discussion_r276073773,276073773,src/net_processing.cpp
ajtowns,2019-04-17T04:51:12Z,"Yeah, testing confirms we can get a memory leak this way -- test node gets from 60M to 1GB resident size after about 1M `INV y1..y100; NOTFOUND y1..y100` pairs, after pre-filling in_flight and process with `INV x1..x5000`, and suggested change keeps resident size stable at 60M.\n\n`INV y; TX ytx` also unconditionally clears `m_tx_announced`, but that's okay because redoing `INV y` won't re-add i",https://github.com/bitcoin/bitcoin/pull/15834#discussion_r276078275,276078275,src/net_processing.cpp
ajtowns,2019-04-17T07:34:20Z,"However, I think there's another bug that causes problems here -- if you have two offers with nearby `m_process_time` values, then you'll hit the `else` clause of `last_request_Time <= nNow - GETDATA_TX_INTERVAL` and call `RequestTx(txid)` which will just return because it's already present in `m_tx_announced`, and then you'll clear `inv.hash` (ie `txid`) from `tx_process_time`, and never actually",https://github.com/bitcoin/bitcoin/pull/15834#discussion_r276112938,276112938,src/net_processing.cpp
ajtowns,2019-04-17T07:58:36Z,"Might be good to call `EraseTxRequest(hash);` inside the `if` as well, so that we don't delay requesting from other peers when we've already received a NOTFOUND. Could leave that for #15505 though.",https://github.com/bitcoin/bitcoin/pull/15834#discussion_r276120894,276120894,src/net_processing.cpp
ajtowns,2019-04-18T05:05:22Z,"Oh, that only works for the request side. If we get:\n\n     0s peer A: INV deadbeef...\n     1s peer B: INV deadbeef...\n     ...\n     5s peer Z: INV deadbeef\n\nand then we happen to query some unresponsive peers, we'll see:\n\n    10s: -> peer D: GETDATA deadbeef...\n    610s: [expired]\n    611s: -> peer Q: GETDATA deadbeef...\n    1211s: [expired]\n\nAt which point every peer w",https://github.com/bitcoin/bitcoin/pull/15834#discussion_r276518533,276518533,src/net_processing.cpp
sdaftuar,2019-04-22T15:57:15Z,"The code in #15505 is checking for entries being in the in-flight map, so I'll take that suggestion here.  But I think the best way to close the door on this would be to just bound the `m_tx_process_time` map explicitly, so I'll do that too.\n\nI'll leave the `EraseTxRequest()` call for #15505.",https://github.com/bitcoin/bitcoin/pull/15834#discussion_r277335337,277335337,src/net_processing.cpp
sdaftuar,2019-04-22T18:35:53Z,"> Does the use of 10 here imply that-- assuming all peers INV a transaction to us at roughly the same time-- that we get no more robustness to transaction suppression than if we only had ten peers?\n\n@gmaxwell I'm not sure I understand the question -- is the concern that an adversary could keep re-announcing a transaction to us, and every 10 minutes we'll retry that adversary instead of going t",https://github.com/bitcoin/bitcoin/pull/15834#discussion_r277387561,277387561,src/net_processing.cpp
sdaftuar,2019-04-22T18:43:18Z,"@ajtowns Thanks for catching that bug around `RequestTx()`.  I'll be including a fix the next time I update this PR.\n\n> Oh, that only works for the request side. If we get:\n> \n> ```\n>  0s peer A: INV deadbeef...\n>  1s peer B: INV deadbeef...\n>  ...\n>  5s peer Z: INV deadbeef\n> ```\n> and then we happen to query some unresponsive peers, we'll see:\n> \n> ```\n> 10s: -> peer D:",https://github.com/bitcoin/bitcoin/pull/15834#discussion_r277390154,277390154,src/net_processing.cpp
sdaftuar,2019-04-22T18:43:43Z,"Sounds good, thanks.",https://github.com/bitcoin/bitcoin/pull/15834#discussion_r277390327,277390327,src/net_processing.cpp
ajtowns,2019-04-23T06:20:26Z,"Yeah, I think I got the `GetTxRequestTime` check confused with checking whether it was inflight via another node at all, rather than just hadn't been asked for for a while.",https://github.com/bitcoin/bitcoin/pull/15834#discussion_r277530762,277530762,src/net_processing.cpp
gmaxwell,2019-05-11T20:25:10Z,"we use peer= almost everwhere in our net logs, you're messing up my log grepping. ",https://github.com/bitcoin/bitcoin/pull/15834#discussion_r283110423,283110423,src/net_processing.cpp
gmaxwell,2019-05-11T20:33:37Z,My comment on the interval was mostly that we'll expire all past the first ten to offer to us before we ever get to them. The discussion with AJ sorted out my confusion.,https://github.com/bitcoin/bitcoin/pull/15834#discussion_r283110646,283110646,src/net_processing.cpp
ajtowns,2019-05-14T17:23:23Z,`it = m_tx_in_flight.erase(it)` should do the same thing fwiw,https://github.com/bitcoin/bitcoin/pull/15834#discussion_r283913008,283913008,src/net_processing.cpp
jonatack,2019-05-15T16:48:30Z,Worth mentioning this applies to inflight txns?,https://github.com/bitcoin/bitcoin/pull/15834#discussion_r284352320,284352320,src/net_processing.cpp
jonatack,2019-05-15T16:51:09Z,"Nit: While reviewing I found myself annotating with comments, then saw similar comments existed a few lines higher up... perhaps do the same, at least for values that don't depend on other constants?\n\n```diff\n /** Maximum number of announced transactions from a peer */\n-static constexpr int32_t MAX_PEER_TX_ANNOUNCEMENTS = 2 * MAX_INV_SZ;\n+static constexpr int32_t MAX_PEER_TX_ANNOUNCEMENT",https://github.com/bitcoin/bitcoin/pull/15834#discussion_r284353335,284353335,src/net_processing.cpp
ajtowns,2019-05-15T20:29:40Z,"`CalculateTxGetDataTime()` recalculates `last_request_time` and tests it against 0 via this path which seems a bit useless, but probably cleaner this way than trying to change it.",https://github.com/bitcoin/bitcoin/pull/15834#discussion_r284437333,284437333,src/net_processing.cpp
sdaftuar,2019-05-28T20:30:14Z,Done,https://github.com/bitcoin/bitcoin/pull/15834#discussion_r288288766,288288766,src/net_processing.cpp
sdaftuar,2019-05-28T20:30:33Z,"Thanks for the tip, but leaving this alone.",https://github.com/bitcoin/bitcoin/pull/15834#discussion_r288288895,288288895,src/net_processing.cpp
sdaftuar,2019-05-28T20:30:44Z,Done and done.,https://github.com/bitcoin/bitcoin/pull/15834#discussion_r288288978,288288978,src/net_processing.cpp
morcos,2019-06-06T15:53:45Z,"This comment is slightly confusing in this PR, but I think the code logic is correct.  The idea is that if the tx isn't in_flight from you then there is no reason to try erasing it from `m_tx_announced`, because if its in there you are still going to deal with it at some later point via `m_tx_process_time`",https://github.com/bitcoin/bitcoin/pull/15834#discussion_r291253714,291253714,src/net_processing.cpp
jamesob,2019-06-10T07:01:30Z,"Was confused about why we're consulting `MAX_BLOCKS_IN_TRANSIT_PER_PEER` for tx-based logic, but I guess this is just to avoid wasting time reading too-long DoSy INVs?",https://github.com/bitcoin/bitcoin/pull/15834#discussion_r291899918,291899918,src/net_processing.cpp
jamesob,2019-06-10T07:08:02Z,"If you care to, I think the body of this loop can be written more simply as\n```cpp\nif (inv.type == MSG_TX || inv.type == MSG_WITNESS_TX) {\n    // If we receive a NOTFOUND message for a txid we requested, erase\n    // it from our data structures for this peer.\n    if (state->m_tx_download.m_tx_in_flight.erase(inv.hash) > 0) {\n        state->m_tx_download.m_tx_announced.erase(inv.hash);",https://github.com/bitcoin/bitcoin/pull/15834#discussion_r291901132,291901132,src/net_processing.cpp
jamesob,2019-06-11T01:32:24Z,"`RequestTx()` does the same as the two lines below, but performs `.size()` checks on the tx maps and ensures the txid is in `m_tx_announced`. Are we not just calling that because we don't care to do those checks as belt-and-suspenders, or do we specifically want to avoid populating `m_tx_announced`? I guess those checks are safe to avoid given txid was already in `tx_process_time`, but seems like ",https://github.com/bitcoin/bitcoin/pull/15834#discussion_r292248655,292248655,src/net_processing.cpp
jamesob,2019-06-11T01:45:48Z,"Maybe worth noting that I *think* `m_tx_process_time` is liable to outgrow `m_tx_announced` temporarily (e.g. we ask peer for txid, get back NOTFOUND, `m_tx_announced` entry immediately erased but `m_tx_process_time` entry hangs around until next `SendMessages()`) but I think this is negligible.",https://github.com/bitcoin/bitcoin/pull/15834#discussion_r292250774,292250774,src/net_processing.cpp
MarcoFalke,2019-06-11T10:10:05Z,"in commit 23163b7593 Add an explicit memory bound to m_tx_process_time:\n\nstyle-nit: Could remove the `.count()` here and add the check below: `if(!insert().second) return; // already have`. (This is how the code looked like in previous versions of Bitcoin Core)",https://github.com/bitcoin/bitcoin/pull/15834#discussion_r292379043,292379043,src/net_processing.cpp
MarcoFalke,2019-06-11T10:34:58Z,"Re https://github.com/bitcoin/bitcoin/pull/15834/commits/23163b759354b84c5a076e3e2ae6ae6338106035#r292250774:\n\nThat shouldn't matter, since something else must have gone horribly wrong when there are more than `MAX_PEER_TX_ANNOUNCEMENTS` == 100k.",https://github.com/bitcoin/bitcoin/pull/15834#discussion_r292388169,292388169,src/net_processing.cpp
MarcoFalke,2019-06-11T10:41:14Z,"in commit e32e08407e Remove NOTFOUND transactions from in-flight data structures:\n\ndoc-nit: Maybe add a comment `// We only send NOTFOUNDs for transactions, but for any peer, this message should never be larger than all in-flight inventory items`?",https://github.com/bitcoin/bitcoin/pull/15834#discussion_r292390278,292390278,src/net_processing.cpp
MarcoFalke,2019-06-11T11:00:57Z,"re https://github.com/bitcoin/bitcoin/pull/15834/commits/e32e08407e2781d881b9da92aa06494525ddd085#r291253714:\n\nI think ""spurious"" is still fine. Why would a node announce you a tx and then follow up with a NOTFOUND without any further communication with you.",https://github.com/bitcoin/bitcoin/pull/15834#discussion_r292397647,292397647,src/net_processing.cpp
MarcoFalke,2019-06-11T11:02:37Z,"re https://github.com/bitcoin/bitcoin/pull/15834/commits/e32e08407e2781d881b9da92aa06494525ddd085#r291901132:\n\nLooks fine, but should keep the ""spurious"" comment ofc.",https://github.com/bitcoin/bitcoin/pull/15834#discussion_r292398250,292398250,src/net_processing.cpp
MarcoFalke,2019-06-11T11:19:25Z,"in commit f635a3ba11 Expire old entries from the in-flight tx map:\n\nstyle-nit: Is it required to guard the iterator increment behind some conditions? It seems less fragile and less code to just remove both in-body iterator mangling and do a normal for-loop, by putting the increment in the for-loop header?",https://github.com/bitcoin/bitcoin/pull/15834#discussion_r292403792,292403792,src/net_processing.cpp
sdaftuar,2019-06-11T15:27:35Z,"I think the questions around why I [structured the loop this way](https://github.com/bitcoin/bitcoin/pull/15834/files/23163b759354b84c5a076e3e2ae6ae6338106035..e32e08407e2781d881b9da92aa06494525ddd085#r291901132) (and why I made a comment about skipping ""any further work"") is motivated by the additional code I plan to add in #15505.  See for instance: https://github.com/bitcoin/bitcoin/pull/15505/",https://github.com/bitcoin/bitcoin/pull/15834#discussion_r292518156,292518156,src/net_processing.cpp
sdaftuar,2019-06-11T15:28:53Z,"Yep that is the reason I had in mind -- a peer might reasonably send us a NOTFOUND for something we sent a GETDATA for, but not more than that. ",https://github.com/bitcoin/bitcoin/pull/15834#discussion_r292518862,292518862,src/net_processing.cpp
sdaftuar,2019-06-11T15:30:53Z,`RequestTx()` is inappropriate here and was a bug -- see @ajtowns' comment at https://github.com/bitcoin/bitcoin/pull/15834#discussion_r276112938,https://github.com/bitcoin/bitcoin/pull/15834#discussion_r292519963,292519963,src/net_processing.cpp
sdaftuar,2019-06-11T15:34:00Z,"Not sure if I'm misunderstanding your question, but erasing the iterator invalidates it, so we must increment it first -- so we can't just put this in the for-loop header if on some loop iterations we erase and on others we don't.",https://github.com/bitcoin/bitcoin/pull/15834#discussion_r292521468,292521468,src/net_processing.cpp
jamesob,2019-06-11T18:11:37Z,"Oops, sorry I missed that. Thanks for the pointer.",https://github.com/bitcoin/bitcoin/pull/15834#discussion_r292593317,292593317,src/net_processing.cpp
