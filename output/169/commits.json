[
  {
    "sha": "44d4f633bf77a77d13031dc5ffe53f57ce3c8026",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NGQ0ZjYzM2JmNzdhNzdkMTMwMzFkYzVmZmU1M2Y1N2NlM2M4MDI2",
    "commit": {
      "author": {
        "name": "genjix",
        "email": "fake@lol.u",
        "date": "2011-04-19T14:44:44Z"
      },
      "committer": {
        "name": "genjix",
        "email": "fake@lol.u",
        "date": "2011-04-19T14:44:44Z"
      },
      "message": "Added namelookup PHP service which does getaddress from nickname.",
      "tree": {
        "sha": "be3c681e7ed433fcb308adba1ec5ed7206615d34",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/be3c681e7ed433fcb308adba1ec5ed7206615d34"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/44d4f633bf77a77d13031dc5ffe53f57ce3c8026",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44d4f633bf77a77d13031dc5ffe53f57ce3c8026",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/44d4f633bf77a77d13031dc5ffe53f57ce3c8026",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44d4f633bf77a77d13031dc5ffe53f57ce3c8026/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "72e962cf5589d708a6ba636c07ab7db7165ba965",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/72e962cf5589d708a6ba636c07ab7db7165ba965",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/72e962cf5589d708a6ba636c07ab7db7165ba965"
      }
    ],
    "stats": {
      "total": 251,
      "additions": 251,
      "deletions": 0
    },
    "files": [
      {
        "sha": "6ff85206f10f21c454d611c5bf2beae2f50f4f6c",
        "filename": "contrib/ns/DATABASE",
        "status": "added",
        "additions": 60,
        "deletions": 0,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/44d4f633bf77a77d13031dc5ffe53f57ce3c8026/contrib/ns/DATABASE",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/44d4f633bf77a77d13031dc5ffe53f57ce3c8026/contrib/ns/DATABASE",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/ns/DATABASE?ref=44d4f633bf77a77d13031dc5ffe53f57ce3c8026",
        "patch": "@@ -0,0 +1,60 @@\n+-- MySQL dump 10.13  Distrib 5.1.49, for debian-linux-gnu (i686)\n+--\n+-- Host: localhost    Database: bitnom\n+-- ------------------------------------------------------\n+-- Server version\t5.1.49-1ubuntu8.1\n+\n+/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;\n+/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;\n+/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;\n+/*!40101 SET NAMES utf8 */;\n+/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;\n+/*!40103 SET TIME_ZONE='+00:00' */;\n+/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;\n+/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;\n+/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;\n+/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;\n+\n+--\n+-- Table structure for table `nicknames`\n+--\n+\n+DROP TABLE IF EXISTS `nicknames`;\n+/*!40101 SET @saved_cs_client     = @@character_set_client */;\n+/*!40101 SET character_set_client = utf8 */;\n+CREATE TABLE `nicknames` (\n+  `nickid` int(10) unsigned NOT NULL AUTO_INCREMENT,\n+  `nickname` varchar(100) NOT NULL,\n+  `addr` varchar(44) DEFAULT NULL,\n+  `uid` int(10) unsigned NOT NULL,\n+  `timest` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n+  PRIMARY KEY (`nickid`)\n+) ENGINE=MyISAM AUTO_INCREMENT=12 DEFAULT CHARSET=latin1;\n+/*!40101 SET character_set_client = @saved_cs_client */;\n+\n+--\n+-- Table structure for table `users`\n+--\n+\n+DROP TABLE IF EXISTS `users`;\n+/*!40101 SET @saved_cs_client     = @@character_set_client */;\n+/*!40101 SET character_set_client = utf8 */;\n+CREATE TABLE `users` (\n+  `uid` int(10) unsigned NOT NULL AUTO_INCREMENT,\n+  `oidlogin` varchar(100) NOT NULL,\n+  `pubkey` varchar(500) DEFAULT NULL,\n+  `timest` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n+  PRIMARY KEY (`uid`)\n+) ENGINE=MyISAM AUTO_INCREMENT=5 DEFAULT CHARSET=latin1;\n+/*!40101 SET character_set_client = @saved_cs_client */;\n+/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;\n+\n+/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;\n+/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;\n+/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;\n+/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;\n+/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;\n+/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;\n+/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;\n+\n+-- Dump completed on 2011-04-16 19:10:38"
      },
      {
        "sha": "a4cf2f609810dab1fbfcbbc9140a467a8d572df6",
        "filename": "contrib/ns/db.bitnom.inc",
        "status": "added",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/44d4f633bf77a77d13031dc5ffe53f57ce3c8026/contrib/ns/db.bitnom.inc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/44d4f633bf77a77d13031dc5ffe53f57ce3c8026/contrib/ns/db.bitnom.inc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/ns/db.bitnom.inc?ref=44d4f633bf77a77d13031dc5ffe53f57ce3c8026",
        "patch": "@@ -0,0 +1,6 @@\n+<?php\n+// This will connect to the MySQL server\n+mysql_connect('localhost', 'root', '') or die(mysql_error());\n+// This will connect to a database on that server.\n+mysql_select_db('bitnom') or die(mysql_error());\n+"
      },
      {
        "sha": "cfffeca6b76d002cc225765dfb2998d26c77e38b",
        "filename": "contrib/ns/errors.php",
        "status": "added",
        "additions": 57,
        "deletions": 0,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/44d4f633bf77a77d13031dc5ffe53f57ce3c8026/contrib/ns/errors.php",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/44d4f633bf77a77d13031dc5ffe53f57ce3c8026/contrib/ns/errors.php",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/ns/errors.php?ref=44d4f633bf77a77d13031dc5ffe53f57ce3c8026",
        "patch": "@@ -0,0 +1,57 @@\n+<?php\n+\n+const MISSING_POST_VALUE = 0;\n+const SQL_FAILURE = 1;\n+const RECORD_NOT_FOUND = 404;\n+const NO_PUBKEY = 2;\n+const BAD_SIGNATURE = 3;\n+const INTERNAL_ERROR = 4;\n+const NO_ADDR_SET = 5;\n+\n+function error_json($errcode, $params=array())\n+{\n+    $json = array('errcode' => $errcode);\n+    switch ($errcode) {\n+        case MISSING_POST_VALUE:\n+            $json['error'] = 'Missing POST value.';\n+            break;\n+\n+        case SQL_FAILURE:\n+            $json['error'] = 'SQL query failed.';\n+            break;\n+\n+        case RECORD_NOT_FOUND:\n+            $json['error'] = 'Record not found.';\n+            break;\n+\n+        case NO_PUBKEY:\n+            $json['error'] = 'Public key does not exist.';\n+            break;\n+\n+        case BAD_SIGNATURE:\n+            $json['error'] = 'Bad signature.';\n+            break;\n+\n+        case INTERNAL_ERROR:\n+            $json['error'] = 'Internal error occurred.';\n+            break;\n+\n+        case NO_ADDR_SET:\n+            $json['error'] = 'No address set for this nickname.';\n+            break;\n+\n+        default:\n+            $json['error'] = 'Unknown error code.';\n+            break;\n+    }\n+    return json_encode($json);\n+}\n+\n+class ErrorJson extends Exception\n+{\n+    public function __construct($errcode, $params=array())\n+    {\n+        parent::__construct(error_json($errcode, $params));\n+    }\n+}\n+"
      },
      {
        "sha": "441421458fe8c4de32798b24c0448ca77b4d6d7f",
        "filename": "contrib/ns/getaddress/index.php",
        "status": "added",
        "additions": 28,
        "deletions": 0,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/44d4f633bf77a77d13031dc5ffe53f57ce3c8026/contrib/ns/getaddress/index.php",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/44d4f633bf77a77d13031dc5ffe53f57ce3c8026/contrib/ns/getaddress/index.php",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/ns/getaddress/index.php?ref=44d4f633bf77a77d13031dc5ffe53f57ce3c8026",
        "patch": "@@ -0,0 +1,28 @@\n+<?php\n+require '../util.php';\n+require '../errors.php';\n+\n+try {\n+    $nickname = geten('nickname');\n+    $query = \"\n+        SELECT\n+            addr\n+        FROM\n+            nicknames\n+        WHERE\n+            nickname='$nickname'\n+        \";\n+    $result = do_queryn($query);\n+    if (!has_results($result))\n+        throw new ErrorJson(RECORD_NOT_FOUND);\n+    $row = mysql_fetch_assoc($result);\n+    if (!isset($row['addr']))\n+        throw new ErrorJson(NO_ADDR_SET);\n+\n+    $json = array('address' => $row['addr']);\n+    echo json_encode($json);\n+}\n+catch (ErrorJson $e) {\n+    echo $e->getMessage();\n+}\n+"
      },
      {
        "sha": "12f1f1f47892472793eed3ef84a48ca8d8df5436",
        "filename": "contrib/ns/util.php",
        "status": "added",
        "additions": 100,
        "deletions": 0,
        "changes": 100,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/44d4f633bf77a77d13031dc5ffe53f57ce3c8026/contrib/ns/util.php",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/44d4f633bf77a77d13031dc5ffe53f57ce3c8026/contrib/ns/util.php",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/ns/util.php?ref=44d4f633bf77a77d13031dc5ffe53f57ce3c8026",
        "patch": "@@ -0,0 +1,100 @@\n+<?php\n+require '/var/db.bitnom.inc';\n+\n+class Problem extends Exception\n+{\n+    # PHP sucks!\n+    public function __construct($title, $message)\n+    {\n+        parent::__construct($message);\n+        $this->title = $title;\n+    }\n+\n+    public function getTitle()\n+    {\n+        return $this->title;\n+    }\n+}\n+class Error extends Problem\n+{\n+}\n+\n+# -----------------------------------------------------\n+# These functions are for the API\n+# -----------------------------------------------------\n+function posten($key)\n+{\n+    if (!isset($_POST[$key]))\n+        throw new ErrorJson(MISSING_POST_VALUE);\n+    return escapestr($_POST[$key]);\n+}\n+function geten($key)\n+{\n+    if (!isset($_GET[$key]))\n+        throw new ErrorJson(MISSING_POST_VALUE);\n+    return escapestr($_GET[$key]);\n+}\n+\n+function do_queryn($query)\n+{\n+    if (!$result = mysql_query($query)) \n+        throw new ErrorJson(SQL_FAILURE, array('mysql_err' => mysql_error()));\n+    return $result;\n+}\n+function get_rown($result)\n+{\n+    $row = mysql_fetch_array($result, MYSQL_ASSOC);\n+    if (!$row)\n+        throw new ErrorJson(RECORD_NOT_FOUND);\n+    return $row;\n+}\n+\n+# -----------------------------------------------------\n+function do_query($query)\n+{\n+    $result = mysql_query($query) or die(mysql_error());\n+    return $result;\n+}\n+function get_row($result)\n+{\n+    $row = mysql_fetch_array($result, MYSQL_ASSOC);\n+    if (!$row)\n+        throw new Error('Ooops!', \"Seems there's a missing value here.\");\n+    return $row;\n+}\n+\n+function has_results($result)\n+{\n+    if (mysql_num_rows($result) > 0)\n+        return true;\n+    else\n+        return false;\n+}\n+\n+function escapestr($str)\n+{\n+    return mysql_real_escape_string(strip_tags(htmlspecialchars($str)));\n+}\n+\n+function user_id()\n+{\n+    if (!isset($_SESSION['uid'])) {\n+        # grave error. should never happen and should be reported as urgent breach.\n+        throw new Error('Login 404', \"You're not logged in. Proceed to the <a href='login.php'>login</a> form.\");\n+    }\n+    return escapestr($_SESSION['uid']);\n+}\n+\n+function post($key)\n+{\n+    if (!isset($_POST[$key]))\n+        throw new Error('Ooops!', \"Missing posted value $key!\");\n+    return escapestr($_POST[$key]);\n+}\n+function get($key)\n+{\n+    if (!isset($_GET[$key]))\n+        throw new Error('Ooops!', \"Missing get value $key!\");\n+    return escapestr($_POST[$key]);\n+}\n+"
      }
    ]
  },
  {
    "sha": "e6fd5ad338e2be7b6f2b78d721257c4fe87ecd96",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNmZkNWFkMzM4ZTJiZTdiNmYyYjc4ZDcyMTI1N2M0ZmU4N2VjZDk2",
    "commit": {
      "author": {
        "name": "genjix",
        "email": "fake@lol.u",
        "date": "2011-04-19T15:07:44Z"
      },
      "committer": {
        "name": "genjix",
        "email": "fake@lol.u",
        "date": "2011-04-19T15:07:44Z"
      },
      "message": "Added send rpc command which does a lookup from hostname.foo/getaddress/?nickname=genjix\n\nFormat:\n\n  ./bitcoind send genjix@hostname.foo 0.1",
      "tree": {
        "sha": "b921f27e10d133ec029ab2cb2bad54047bd3e903",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b921f27e10d133ec029ab2cb2bad54047bd3e903"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e6fd5ad338e2be7b6f2b78d721257c4fe87ecd96",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6fd5ad338e2be7b6f2b78d721257c4fe87ecd96",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e6fd5ad338e2be7b6f2b78d721257c4fe87ecd96",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6fd5ad338e2be7b6f2b78d721257c4fe87ecd96/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "44d4f633bf77a77d13031dc5ffe53f57ce3c8026",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44d4f633bf77a77d13031dc5ffe53f57ce3c8026",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/44d4f633bf77a77d13031dc5ffe53f57ce3c8026"
      }
    ],
    "stats": {
      "total": 227,
      "additions": 225,
      "deletions": 2
    },
    "files": [
      {
        "sha": "14fdc960be6f4db9c9c7d46276e5841287dbd4a1",
        "filename": "makefile.unix",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6fd5ad338e2be7b6f2b78d721257c4fe87ecd96/makefile.unix",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6fd5ad338e2be7b6f2b78d721257c4fe87ecd96/makefile.unix",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/makefile.unix?ref=e6fd5ad338e2be7b6f2b78d721257c4fe87ecd96",
        "patch": "@@ -21,7 +21,9 @@ LIBS= \\\n    -l boost_thread \\\n    -l db_cxx \\\n    -l ssl \\\n-   -l crypto\n+   -l crypto \\\n+ -Wl,-Bdynamic \\\n+   -l curl\n \n ifdef USE_UPNP\n \tLIBS += -l miniupnpc\n@@ -38,7 +40,7 @@ LIBS+= \\\n DEBUGFLAGS=-g -D__WXDEBUG__\n CXXFLAGS=-O2 -Wno-invalid-offsetof -Wformat $(DEBUGFLAGS) $(DEFS)\n HEADERS=headers.h strlcpy.h serialize.h uint256.h util.h key.h bignum.h base58.h \\\n-    script.h db.h net.h irc.h main.h rpc.h uibase.h ui.h noui.h init.h\n+    script.h db.h net.h irc.h main.h rpc.h uibase.h ui.h noui.h init.h resolv.h\n \n OBJS= \\\n     obj/util.o \\\n@@ -49,6 +51,7 @@ OBJS= \\\n     obj/main.o \\\n     obj/rpc.o \\\n     obj/init.o \\\n+    obj/resolv.o \\\n     cryptopp/obj/sha.o \\\n     cryptopp/obj/cpu.o\n \n@@ -83,3 +86,4 @@ clean:\n \t-rm -f headers.h.gch\n \t-rm -f bitcoin\n \t-rm -f bitcoind\n+"
      },
      {
        "sha": "1f0a0057d0916baf9651858b4ddd52d278338f42",
        "filename": "resolv.cpp",
        "status": "added",
        "additions": 96,
        "deletions": 0,
        "changes": 96,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6fd5ad338e2be7b6f2b78d721257c4fe87ecd96/resolv.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6fd5ad338e2be7b6f2b78d721257c4fe87ecd96/resolv.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/resolv.cpp?ref=e6fd5ad338e2be7b6f2b78d721257c4fe87ecd96",
        "patch": "@@ -0,0 +1,96 @@\n+#include \"resolv.h\"\n+\n+#include <boost/lexical_cast.hpp>\n+\n+// callback used to write response from the server\n+static int writer(char *pData, size_t nSize, size_t nNmemb, std::string *pBuffer)  \n+{  \n+  int nResult = 0;  \n+  if (pBuffer != NULL)  \n+  {  \n+    pBuffer->append(pData, nSize * nNmemb);  \n+    // How much did we write?  \n+    nResult = nSize * nNmemb;  \n+  }  \n+  return nResult;  \n+}\n+\n+NameResolutionService::NameResolutionService()\n+{\n+    // Initialise CURL with our various options.\n+    curl = curl_easy_init();\n+    // This goes first in case of any problems below. We get an error message.\n+    curl_easy_setopt(curl, CURLOPT_ERRORBUFFER, pErrorBuffer);  \n+    // fail when server sends >= 404\n+    curl_easy_setopt(curl, CURLOPT_FAILONERROR, 1);  \n+    curl_easy_setopt(curl, CURLOPT_HEADER, 0);  \n+    curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 0);  \n+    curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, writer);  \n+    // server response goes in strBuffer\n+    curl_easy_setopt(curl, CURLOPT_WRITEDATA, &strBuffer);  \n+    pErrorBuffer[0] = '\\0';\n+}\n+NameResolutionService::~NameResolutionService()\n+{\n+    curl_easy_cleanup(curl);\n+}\n+\n+void NameResolutionService::ExplodeHandle(const string& strHandle, string& strNickname, string& strDomain)\n+{\n+    // split address at @ furthrest to the right\n+    size_t nPosAtsym = strHandle.rfind('@');\n+    strNickname = strHandle.substr(0, nPosAtsym);\n+    strDomain = strHandle.substr(nPosAtsym + 1, strHandle.size());\n+}\n+bool NameResolutionService::Perform()\n+{\n+    // Called after everything has been setup. This actually does the request.\n+    CURLcode result = curl_easy_perform(curl);  \n+    return (result == CURLE_OK);\n+}\n+\n+string NameResolutionService::FetchAddress(const string& strHandle, string& strAddy)\n+{\n+    // GET is defined for 'getting' data, so we use GET for the low risk fetching of people's addresses\n+    if (!curl)\n+        // For some reason CURL didn't start...\n+        return pErrorBuffer;\n+    // Expand the handle\n+    string strNickname, strDomain;\n+    ExplodeHandle(strHandle, strNickname, strDomain);\n+    // url encode the nickname for get request\n+    const char* pszEncodedNick = curl_easy_escape(curl, strNickname.c_str(), strNickname.size());\n+    if (!pszEncodedNick)\n+        return \"Unable to encode nickname.\";\n+    // construct url for GET request\n+    string strRequestUrl = strDomain + \"/getaddress/?nickname=\" + pszEncodedNick;\n+    // Pass URL to CURL\n+    curl_easy_setopt(curl, CURLOPT_URL, strRequestUrl.c_str());  \n+    if (!Perform())\n+        return pErrorBuffer;\n+    // Server should respond with a JSON that has the address in.\n+    strAddy = strBuffer;\n+    return \"\";  // no error\n+}\n+\n+NameResolutionService::PostVariables::PostVariables()\n+{\n+    // pBegin/pEnd *must* be null before calling curl_formadd\n+    pBegin = NULL;\n+    pEnd = NULL;\n+}\n+NameResolutionService::PostVariables::~PostVariables()\n+{\n+    curl_formfree(pBegin);\n+}\n+bool NameResolutionService::PostVariables::Add(const string& strKey, const string& strVal)\n+{\n+    // Copy strings to this block. Return true on success.\n+    return curl_formadd(&pBegin, &pEnd, CURLFORM_COPYNAME, strKey.c_str(), CURLFORM_COPYCONTENTS, strVal.c_str(), CURLFORM_END) == CURL_FORMADD_OK;\n+}\n+\n+curl_httppost* NameResolutionService::PostVariables::operator()() const\n+{\n+    return pBegin;\n+}\n+"
      },
      {
        "sha": "c6e0e4a2a0ce57d2fb74158b662019037c38a7e1",
        "filename": "resolv.h",
        "status": "added",
        "additions": 61,
        "deletions": 0,
        "changes": 61,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6fd5ad338e2be7b6f2b78d721257c4fe87ecd96/resolv.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6fd5ad338e2be7b6f2b78d721257c4fe87ecd96/resolv.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/resolv.h?ref=e6fd5ad338e2be7b6f2b78d721257c4fe87ecd96",
        "patch": "@@ -0,0 +1,61 @@\n+#ifndef NOMRESOLV_H__\n+#define NOMRESOLV_H__\n+\n+#include <string>\n+#include \"curl/curl.h\"\n+\n+using std::string;\n+\n+/*\n+\n+This class resolves against a server to lookup addresses.\n+To not conflict with the bitcoin addresses, we refer here to people's handles.\n+A handle is of the form:\n+\n+   genjix@foo.org\n+\n+Most characters are valid for the username + password (and handled accordingly), but the domain follows usual web standards. It is possible to affix a path if needed,\n+\n+   genjix@bar.com/path/to/\n+\n+*/\n+\n+class NameResolutionService\n+{\n+public:\n+    NameResolutionService();\n+    ~NameResolutionService();\n+\n+    // Three main methods map to RPC actions.\n+    string FetchAddress(const string& strHandle, string& strAddy);\n+\n+private:\n+    // A POST block\n+    class PostVariables\n+    {\n+    public:\n+        PostVariables();\n+        ~PostVariables();\n+        // Add a new key, value pair\n+        bool Add(const string& strKey, const string& strVal);\n+        curl_httppost* operator()() const;\n+    private:\n+        // CURL stores POST blocks as linked lists.\n+        curl_httppost *pBegin, *pEnd;\n+    };\n+\n+    // Explodes user@domain => user, domain\n+    static void ExplodeHandle(const string& strHandle, string& strNickname, string& strDomain);\n+    // Perform the HTTP request. Returns true on success.\n+    bool Perform();\n+\n+    // CURL error message\n+    char pErrorBuffer[CURL_ERROR_SIZE];  \n+    // CURL response\n+    string strBuffer;\n+    // CURL handle\n+    CURL *curl;\n+};\n+\n+#endif\n+"
      },
      {
        "sha": "610a4b0d26a7c4d28cf2d8f17777cb560ecd4e3b",
        "filename": "rpc.cpp",
        "status": "modified",
        "additions": 62,
        "deletions": 0,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6fd5ad338e2be7b6f2b78d721257c4fe87ecd96/rpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6fd5ad338e2be7b6f2b78d721257c4fe87ecd96/rpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/rpc.cpp?ref=e6fd5ad338e2be7b6f2b78d721257c4fe87ecd96",
        "patch": "@@ -21,6 +21,9 @@ typedef boost::asio::ssl::stream<boost::asio::ip::tcp::socket> SSLStream;\n // a certain size around 145MB.  If we need access to json_spirit outside this\n // file, we could use the compiled json_spirit option.\n \n+// name resolution service\n+#include \"resolv.h\"\n+\n using namespace boost::asio;\n using namespace json_spirit;\n \n@@ -494,6 +497,63 @@ Value sendtoaddress(const Array& params, bool fHelp)\n     return wtx.GetHash().GetHex();\n }\n \n+const Object CheckMaybeThrow(const string& strJsonIn)\n+{\n+    // Parse input JSON\n+    Value valRequest;\n+    if (!read_string(strJsonIn, valRequest) || valRequest.type() != obj_type)\n+        throw JSONRPCError(-32700, \"Parse error\");\n+    const Object& request = valRequest.get_obj();\n+    // Now check for a key called \"error\"\n+    const Value& error  = find_value(request, \"error\");\n+    // It's an error JSON! so propagate the error.\n+    if (error.type() != null_type)   \n+        throw JSONRPCError(-4, error.get_str());\n+    // Return JSON object\n+    return request;\n+}\n+\n+const string CollectAddress(const string& strIn)\n+{\n+    // If the handle does not have an @ in it, then it's a normal base58 bitcoin address\n+    if (strIn.find('@') == (size_t)-1)\n+        return strIn;\n+    \n+    // Open the lookup service\n+    NameResolutionService ns;\n+    // We established that the input string is not a BTC address, so we use it as a handle now.\n+    string strHandle = strIn, strAddy;\n+    string strError = ns.FetchAddress(strHandle, strAddy);\n+    if (!strError.empty())\n+        throw JSONRPCError(-4, strError);\n+\n+    const Object& request(CheckMaybeThrow(strAddy));\n+    // Get the BTC address from the JSON\n+    const Value& address = find_value(request, \"address\");\n+    if (address.type() != str_type)\n+        throw JSONRPCError(-32600, \"Server responded with malformed reply.\");\n+    return address.get_str();\n+}\n+\n+// Named this way to prevent possible conflicts.\n+Value rpc_send(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() != 2)\n+        throw runtime_error(\n+            \"send <name@domain or address> <amount>\\n\"\n+            \"<amount> is a real and is rounded to the nearest 0.01\");\n+    \n+    // Intelligent function which looks up address given handle, or returns address\n+    string strAddy = CollectAddress(params[0].get_str());\n+    int64 nAmount = AmountFromValue(params[1]);\n+    // Do the send\n+    CWalletTx wtx;\n+    string strError = SendMoneyToBitcoinAddress(strAddy, nAmount, wtx);\n+    if (!strError.empty())\n+        throw JSONRPCError(-4, strError);\n+    return wtx.GetHash().GetHex();\n+}\n+\n \n Value getreceivedbyaddress(const Array& params, bool fHelp)\n {\n@@ -1419,6 +1479,7 @@ pair<string, rpcfn_type> pCallTable[] =\n     make_pair(\"getaddressesbyaccount\", &getaddressesbyaccount),\n     make_pair(\"getaddressesbylabel\",   &getaddressesbyaccount), // deprecated\n     make_pair(\"sendtoaddress\",         &sendtoaddress),\n+    make_pair(\"send\",                  &rpc_send),\n     make_pair(\"getamountreceived\",     &getreceivedbyaddress), // deprecated, renamed to getreceivedbyaddress\n     make_pair(\"getallreceived\",        &listreceivedbyaddress), // deprecated, renamed to listreceivedbyaddress\n     make_pair(\"getreceivedbyaddress\",  &getreceivedbyaddress),\n@@ -2069,6 +2130,7 @@ int CommandLineRPC(int argc, char *argv[])\n         if (strMethod == \"setgenerate\"            && n > 0) ConvertTo<bool>(params[0]);\n         if (strMethod == \"setgenerate\"            && n > 1) ConvertTo<boost::int64_t>(params[1]);\n         if (strMethod == \"sendtoaddress\"          && n > 1) ConvertTo<double>(params[1]);\n+        if (strMethod == \"send\"                   && n > 1) ConvertTo<double>(params[1]);\n         if (strMethod == \"getamountreceived\"      && n > 1) ConvertTo<boost::int64_t>(params[1]); // deprecated\n         if (strMethod == \"getreceivedbyaddress\"   && n > 1) ConvertTo<boost::int64_t>(params[1]);\n         if (strMethod == \"getreceivedbyaccount\"   && n > 1) ConvertTo<boost::int64_t>(params[1]);"
      }
    ]
  }
]