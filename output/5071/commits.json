[
  {
    "sha": "7d6dd10f0ad29eb62bba19e61bc7d35d96a7cab7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZDZkZDEwZjBhZDI5ZWI2MmJiYTE5ZTYxYmM3ZDM1ZDk2YTdjYWI3",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2014-10-10T02:37:12Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2014-10-26T09:16:30Z"
      },
      "message": "coins: GetTxFees method",
      "tree": {
        "sha": "d85a46ad35bcf25af6ee08cf6bd673d88cc10beb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d85a46ad35bcf25af6ee08cf6bd673d88cc10beb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7d6dd10f0ad29eb62bba19e61bc7d35d96a7cab7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d6dd10f0ad29eb62bba19e61bc7d35d96a7cab7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7d6dd10f0ad29eb62bba19e61bc7d35d96a7cab7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d6dd10f0ad29eb62bba19e61bc7d35d96a7cab7/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "84d13eef883769451ba9f77b56d9738d24474d5c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84d13eef883769451ba9f77b56d9738d24474d5c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/84d13eef883769451ba9f77b56d9738d24474d5c"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 6,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f74ba10f541a0a81bf777f8e5b2fb469dbc7dfda",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d6dd10f0ad29eb62bba19e61bc7d35d96a7cab7/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d6dd10f0ad29eb62bba19e61bc7d35d96a7cab7/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=7d6dd10f0ad29eb62bba19e61bc7d35d96a7cab7",
        "patch": "@@ -214,6 +214,11 @@ CAmount CCoinsViewCache::GetValueIn(const CTransaction& tx) const\n     return nResult;\n }\n \n+CAmount CCoinsViewCache::GetTxFees(const CTransaction& tx) const\n+{\n+    return GetValueIn(tx) - tx.GetValueOut();\n+}\n+\n bool CCoinsViewCache::HaveInputs(const CTransaction& tx) const\n {\n     if (!tx.IsCoinBase()) {"
      },
      {
        "sha": "8f7f4a3441e3d2f3547487529d3419f96309d453",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d6dd10f0ad29eb62bba19e61bc7d35d96a7cab7/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d6dd10f0ad29eb62bba19e61bc7d35d96a7cab7/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=7d6dd10f0ad29eb62bba19e61bc7d35d96a7cab7",
        "patch": "@@ -411,6 +411,7 @@ class CCoinsViewCache : public CCoinsViewBacked\n         @return\tSum of value of all inputs (scriptSigs)\n      */\n     CAmount GetValueIn(const CTransaction& tx) const;\n+    CAmount GetTxFees(const CTransaction& tx) const;\n \n     // Check whether all prevouts of the transaction are present in the UTXO set represented by this view\n     bool HaveInputs(const CTransaction& tx) const;"
      }
    ]
  },
  {
    "sha": "025995d0f97be1d36bf7846c1a80fe1046db2c3b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMjU5OTVkMGY5N2JlMWQzNmJmNzg0NmMxYTgwZmUxMDQ2ZGIyYzNi",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2014-10-10T03:13:59Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2014-10-26T09:16:30Z"
      },
      "message": "txmempool: lookupConflicts method",
      "tree": {
        "sha": "d85ae1a3007786fd3b255eec84772f95cff75a4c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d85ae1a3007786fd3b255eec84772f95cff75a4c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/025995d0f97be1d36bf7846c1a80fe1046db2c3b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/025995d0f97be1d36bf7846c1a80fe1046db2c3b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/025995d0f97be1d36bf7846c1a80fe1046db2c3b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/025995d0f97be1d36bf7846c1a80fe1046db2c3b/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7d6dd10f0ad29eb62bba19e61bc7d35d96a7cab7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d6dd10f0ad29eb62bba19e61bc7d35d96a7cab7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7d6dd10f0ad29eb62bba19e61bc7d35d96a7cab7"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 23,
      "deletions": 10
    },
    "files": [
      {
        "sha": "3a8e868bf0f18e5cabad797c576e08c236ffc129",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 10,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/025995d0f97be1d36bf7846c1a80fe1046db2c3b/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/025995d0f97be1d36bf7846c1a80fe1046db2c3b/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=025995d0f97be1d36bf7846c1a80fe1046db2c3b",
        "patch": "@@ -904,17 +904,10 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         return false;\n \n     // Check for conflicts with in-memory transactions\n+    if (pool.lookupConflicts(tx, NULL))\n     {\n-    LOCK(pool.cs); // protect pool.mapNextTx\n-    for (unsigned int i = 0; i < tx.vin.size(); i++)\n-    {\n-        COutPoint outpoint = tx.vin[i].prevout;\n-        if (pool.mapNextTx.count(outpoint))\n-        {\n-            // Disable replacement feature for now\n-            return false;\n-        }\n-    }\n+        // Disable replacement feature for now\n+        return false;\n     }\n \n     {"
      },
      {
        "sha": "1d5d2904e22f30b7652c2d45ec0ab0326c1e6d24",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/025995d0f97be1d36bf7846c1a80fe1046db2c3b/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/025995d0f97be1d36bf7846c1a80fe1046db2c3b/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=025995d0f97be1d36bf7846c1a80fe1046db2c3b",
        "patch": "@@ -556,6 +556,25 @@ bool CTxMemPool::lookup(uint256 hash, CTransaction& result) const\n     return true;\n }\n \n+bool CTxMemPool::lookupConflicts(const CTransaction& tx, std::vector<const CTransaction *> *vtxConflicts) const\n+{\n+    bool rv = false;\n+    LOCK(cs);\n+    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+    {\n+        const COutPoint& outpoint = txin.prevout;\n+        std::map<COutPoint, CInPoint>::const_iterator elem = mapNextTx.find(outpoint);\n+        if (mapNextTx.end() != elem)\n+        {\n+            if (!vtxConflicts)\n+                return true;\n+            vtxConflicts->push_back(elem->second.ptx);\n+            rv = true;\n+        }\n+    }\n+    return rv;\n+}\n+\n CFeeRate CTxMemPool::estimateFee(int nBlocks) const\n {\n     LOCK(cs);"
      },
      {
        "sha": "f5c3fe88335862877e3f615bf2c8332822768636",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/025995d0f97be1d36bf7846c1a80fe1046db2c3b/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/025995d0f97be1d36bf7846c1a80fe1046db2c3b/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=025995d0f97be1d36bf7846c1a80fe1046db2c3b",
        "patch": "@@ -137,6 +137,7 @@ class CTxMemPool\n     }\n \n     bool lookup(uint256 hash, CTransaction& result) const;\n+    bool lookupConflicts(const CTransaction&, std::vector<const CTransaction *> *vtxConflicts) const;\n \n     // Estimate fee rate needed to get into the next\n     // nBlocks"
      }
    ]
  },
  {
    "sha": "3b61d6813f204b913ff8fe435f37c16fe643f95c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYjYxZDY4MTNmMjA0YjkxM2ZmOGZlNDM1ZjM3YzE2ZmU2NDNmOTVj",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2014-10-10T03:12:12Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2014-10-26T09:16:30Z"
      },
      "message": "Introduce CNodePolicy for putting isolated node policy code and parameters on\n\nInitially populated with policy-specific code moved from AcceptToMemoryPool.",
      "tree": {
        "sha": "9e1dcc7173666f283c90702859ad72a9e94a2f74",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9e1dcc7173666f283c90702859ad72a9e94a2f74"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3b61d6813f204b913ff8fe435f37c16fe643f95c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b61d6813f204b913ff8fe435f37c16fe643f95c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3b61d6813f204b913ff8fe435f37c16fe643f95c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b61d6813f204b913ff8fe435f37c16fe643f95c/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "025995d0f97be1d36bf7846c1a80fe1046db2c3b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/025995d0f97be1d36bf7846c1a80fe1046db2c3b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/025995d0f97be1d36bf7846c1a80fe1046db2c3b"
      }
    ],
    "stats": {
      "total": 227,
      "additions": 162,
      "deletions": 65
    },
    "files": [
      {
        "sha": "583070f1dec981dbfc108618c3ce19099ec68942",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b61d6813f204b913ff8fe435f37c16fe643f95c/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b61d6813f204b913ff8fe435f37c16fe643f95c/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=3b61d6813f204b913ff8fe435f37c16fe643f95c",
        "patch": "@@ -94,6 +94,7 @@ BITCOIN_CORE_H = \\\n   netbase.h \\\n   net.h \\\n   noui.h \\\n+  policy.h \\\n   pow.h \\\n   protocol.h \\\n   random.h \\\n@@ -156,6 +157,7 @@ libbitcoin_server_a_SOURCES = \\\n   miner.cpp \\\n   net.cpp \\\n   noui.cpp \\\n+  policy.cpp \\\n   pow.cpp \\\n   rpcblockchain.cpp \\\n   rpcmining.cpp \\"
      },
      {
        "sha": "26e636c83725166d02305529544a731ab554a739",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b61d6813f204b913ff8fe435f37c16fe643f95c/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b61d6813f204b913ff8fe435f37c16fe643f95c/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=3b61d6813f204b913ff8fe435f37c16fe643f95c",
        "patch": "@@ -657,6 +657,8 @@ bool AppInit2(boost::thread_group& threadGroup)\n     const char* pszP2SH = \"/P2SH/\";\n     COINBASE_FLAGS << std::vector<unsigned char>(pszP2SH, pszP2SH+strlen(pszP2SH));\n \n+    policy.fRequireStandardTx = Params().RequireStandard();\n+\n     // Fee-per-kilobyte amount considered the same as \"free\"\n     // If you are mining, be careful setting this:\n     // if you set it to zero then"
      },
      {
        "sha": "9da632269db1527eeb9a26e41e59e0ed7093dafb",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 65,
        "changes": 81,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b61d6813f204b913ff8fe435f37c16fe643f95c/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b61d6813f204b913ff8fe435f37c16fe643f95c/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=3b61d6813f204b913ff8fe435f37c16fe643f95c",
        "patch": "@@ -12,6 +12,7 @@\n #include \"checkqueue.h\"\n #include \"init.h\"\n #include \"net.h\"\n+#include \"policy.h\"\n #include \"pow.h\"\n #include \"txdb.h\"\n #include \"txmempool.h\"\n@@ -57,6 +58,7 @@ unsigned int nCoinCacheSize = 5000;\n CFeeRate minRelayTxFee = CFeeRate(1000);\n \n CTxMemPool mempool(::minRelayTxFee);\n+CNodePolicy policy;\n \n struct COrphanTx {\n     CTransaction tx;\n@@ -891,30 +893,18 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         return state.DoS(100, error(\"AcceptToMemoryPool: : coinbase as individual tx\"),\n                          REJECT_INVALID, \"coinbase\");\n \n-    // Rather not work on nonstandard transactions (unless -testnet/-regtest)\n-    string reason;\n-    if (Params().RequireStandard() && !IsStandardTx(tx, reason))\n-        return state.DoS(0,\n-                         error(\"AcceptToMemoryPool : nonstandard transaction: %s\", reason),\n-                         REJECT_NONSTANDARD, reason);\n-\n     // is it already in the memory pool?\n     uint256 hash = tx.GetHash();\n     if (pool.exists(hash))\n         return false;\n \n-    // Check for conflicts with in-memory transactions\n-    if (pool.lookupConflicts(tx, NULL))\n-    {\n-        // Disable replacement feature for now\n+    if (!policy.AcceptTxPoolPreInputs(pool, state, tx))\n         return false;\n-    }\n \n     {\n         CCoinsView dummy;\n         CCoinsViewCache view(&dummy);\n \n-        CAmount nValueIn = 0;\n         {\n         LOCK(pool.cs);\n         CCoinsViewMemPool viewMemPool(pcoinsTip, pool);\n@@ -943,67 +933,28 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         // Bring the best block into scope\n         view.GetBestBlock();\n \n-        nValueIn = view.GetValueIn(tx);\n-\n         // we have all inputs cached now, so switch back to dummy, so we don't need to keep lock on mempool\n         view.SetBackend(dummy);\n         }\n \n-        // Check for non-standard pay-to-script-hash in inputs\n-        if (Params().RequireStandard() && !AreInputsStandard(tx, view))\n-            return error(\"AcceptToMemoryPool: : nonstandard transaction input\");\n-\n-        // Check that the transaction doesn't have an excessive number of\n-        // sigops, making it impossible to mine. Since the coinbase transaction\n-        // itself can contain sigops MAX_TX_SIGOPS is less than\n-        // MAX_BLOCK_SIGOPS; we still consider this an invalid rather than\n-        // merely non-standard transaction.\n-        unsigned int nSigOps = GetLegacySigOpCount(tx);\n-        nSigOps += GetP2SHSigOpCount(tx, view);\n-        if (nSigOps > MAX_TX_SIGOPS)\n-            return state.DoS(0,\n-                             error(\"AcceptToMemoryPool : too many sigops %s, %d > %d\",\n-                                   hash.ToString(), nSigOps, MAX_TX_SIGOPS),\n-                             REJECT_NONSTANDARD, \"bad-txns-too-many-sigops\");\n-\n-        CAmount nValueOut = tx.GetValueOut();\n-        CAmount nFees = nValueIn-nValueOut;\n+        if (!policy.AcceptTxWithInputs(pool, state, tx, view))\n+            return false;\n+\n+        CAmount nFees = view.GetTxFees(tx);\n         double dPriority = view.GetPriority(tx, chainActive.Height());\n \n         CTxMemPoolEntry entry(tx, nFees, GetTime(), dPriority, chainActive.Height());\n-        unsigned int nSize = entry.GetTxSize();\n \n-        // Don't accept it if it can't get into a block\n-        CAmount txMinFee = GetMinRelayFee(tx, nSize, true);\n-        if (fLimitFree && nFees < txMinFee)\n-            return state.DoS(0, error(\"AcceptToMemoryPool : not enough fees %s, %d < %d\",\n-                                      hash.ToString(), nFees, txMinFee),\n-                             REJECT_INSUFFICIENTFEE, \"insufficient fee\");\n-\n-        // Continuously rate-limit free (really, very-low-fee)transactions\n-        // This mitigates 'penny-flooding' -- sending thousands of free transactions just to\n-        // be annoying or make others' transactions take longer to confirm.\n-        if (fLimitFree && nFees < ::minRelayTxFee.GetFee(nSize))\n-        {\n-            static CCriticalSection csFreeLimiter;\n-            static double dFreeCount;\n-            static int64_t nLastTime;\n-            int64_t nNow = GetTime();\n-\n-            LOCK(csFreeLimiter);\n-\n-            // Use an exponentially decaying ~10-minute window:\n-            dFreeCount *= pow(1.0 - 1.0/600.0, (double)(nNow - nLastTime));\n-            nLastTime = nNow;\n-            // -limitfreerelay unit is thousand-bytes-per-minute\n-            // At default rate it would take over a month to fill 1GB\n-            if (dFreeCount >= GetArg(\"-limitfreerelay\", 15)*10*1000)\n-                return state.DoS(0, error(\"AcceptToMemoryPool : free transaction rejected by rate limiter\"),\n-                                 REJECT_INSUFFICIENTFEE, \"insufficient priority\");\n-            LogPrint(\"mempool\", \"Rate limit dFreeCount: %g => %g\\n\", dFreeCount, dFreeCount+nSize);\n-            dFreeCount += nSize;\n-        }\n+        bool fRateLimit = false;\n+        // policy.AcceptMemPoolEntry is expected to set fRateLimit (passed by reference) if it wants to\n+        if (!policy.AcceptMemPoolEntry(pool, state, entry, view, fRateLimit))\n+            return false;\n+        if (!fLimitFree)\n+            fRateLimit = false;\n+        if (fRateLimit && !policy.RateLimitTx(pool, state, entry, view))\n+            return false;\n \n+        unsigned int nSize = entry.GetTxSize();\n         if (fRejectInsaneFee && nFees > ::minRelayTxFee.GetFee(nSize) * 10000)\n             return error(\"AcceptToMemoryPool: : insane fees %s, %d > %d\",\n                          hash.ToString(),"
      },
      {
        "sha": "10aa390f2392a1b9e187ff70325fd2a22f23bccd",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b61d6813f204b913ff8fe435f37c16fe643f95c/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b61d6813f204b913ff8fe435f37c16fe643f95c/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=3b61d6813f204b913ff8fe435f37c16fe643f95c",
        "patch": "@@ -15,6 +15,7 @@\n #include \"coins.h\"\n #include \"core.h\"\n #include \"net.h\"\n+#include \"policy.h\"\n #include \"pow.h\"\n #include \"script/script.h\"\n #include \"script/sigcache.h\"\n@@ -102,6 +103,7 @@ struct BlockHasher\n extern CScript COINBASE_FLAGS;\n extern CCriticalSection cs_main;\n extern CTxMemPool mempool;\n+extern CNodePolicy policy;\n typedef boost::unordered_map<uint256, CBlockIndex*, BlockHasher> BlockMap;\n extern BlockMap mapBlockIndex;\n extern uint64_t nLastBlockTx;"
      },
      {
        "sha": "844d05fadf7cb205453c274486fe42c3264db6fd",
        "filename": "src/policy.cpp",
        "status": "added",
        "additions": 103,
        "deletions": 0,
        "changes": 103,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b61d6813f204b913ff8fe435f37c16fe643f95c/src/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b61d6813f204b913ff8fe435f37c16fe643f95c/src/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy.cpp?ref=3b61d6813f204b913ff8fe435f37c16fe643f95c",
        "patch": "@@ -0,0 +1,103 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+// NOTE: This file is intended to be customised by the end user, and includes only local node policy logic\n+\n+#include \"amount.h\"\n+#include \"core.h\"\n+#include \"main.h\"\n+#include \"sync.h\"\n+#include \"txmempool.h\"\n+#include \"util.h\"\n+\n+#include <cmath>\n+#include <string>\n+\n+bool CNodePolicy::AcceptTxPoolPreInputs(CTxMemPool& pool, CValidationState& state, const CTransaction& tx)\n+{\n+    // Rather not work on nonstandard transactions (unless -testnet/-regtest)\n+    std::string reason;\n+    if (fRequireStandardTx && !IsStandardTx(tx, reason))\n+        return state.DoS(0,\n+                         error(\"%s : nonstandard transaction: %s\", __func__, reason),\n+                         REJECT_NONSTANDARD, reason);\n+\n+    // Check for conflicts with in-memory transactions\n+    if (pool.lookupConflicts(tx, NULL))\n+    {\n+        // Disable replacement feature for now\n+        return false;\n+    }\n+\n+    return true;\n+}\n+\n+bool CNodePolicy::AcceptTxWithInputs(CTxMemPool& pool, CValidationState& state, const CTransaction& tx, CCoinsViewCache& view)\n+{\n+    // Check for non-standard pay-to-script-hash in inputs\n+    if (fRequireStandardTx && !AreInputsStandard(tx, view))\n+        return error(\"%s : nonstandard transaction input\", __func__);\n+\n+    // Check that the transaction doesn't have an excessive number of\n+    // sigops, making it impossible to mine. Since the coinbase transaction\n+    // itself can contain sigops MAX_TX_SIGOPS is less than\n+    // MAX_BLOCK_SIGOPS; we still consider this an invalid rather than\n+    // merely non-standard transaction.\n+    unsigned int nSigOps = GetLegacySigOpCount(tx);\n+    nSigOps += GetP2SHSigOpCount(tx, view);\n+    if (nSigOps > MAX_TX_SIGOPS)\n+        return state.DoS(0,\n+                         error(\"%s : too many sigops %s, %d > %d\",\n+                               __func__, tx.GetHash().ToString(), nSigOps, MAX_TX_SIGOPS),\n+                         REJECT_NONSTANDARD, \"bad-txns-too-many-sigops\");\n+\n+    return true;\n+}\n+\n+bool CNodePolicy::AcceptMemPoolEntry(CTxMemPool& pool, CValidationState& state, CTxMemPoolEntry& entry, CCoinsViewCache& view, bool& fRateLimit)\n+{\n+    const CTransaction& tx = entry.GetTx();\n+\n+    CAmount nFees = entry.GetFee();\n+    unsigned int nSize = entry.GetTxSize();\n+\n+    // Don't accept it if it can't get into a block\n+    CAmount txMinFee = GetMinRelayFee(tx, nSize, true);\n+    if (nFees < txMinFee)\n+        return state.DoS(0, error(\"%s : not enough fees %s, %d < %d\",\n+                                  __func__, tx.GetHash().ToString(), nFees, txMinFee),\n+                         REJECT_INSUFFICIENTFEE, \"insufficient fee\");\n+\n+    // Continuously rate-limit free (really, very-low-fee)transactions\n+    // This mitigates 'penny-flooding' -- sending thousands of free transactions just to\n+    // be annoying or make others' transactions take longer to confirm.\n+    fRateLimit = (nFees < ::minRelayTxFee.GetFee(nSize));\n+\n+    return true;\n+}\n+\n+bool CNodePolicy::RateLimitTx(CTxMemPool& pool, CValidationState& state, CTxMemPoolEntry& entry, CCoinsViewCache& view)\n+{\n+    static CCriticalSection csFreeLimiter;\n+    static double dFreeCount;\n+    static int64_t nLastTime;\n+    int64_t nNow = GetTime();\n+\n+    LOCK(csFreeLimiter);\n+\n+    // Use an exponentially decaying ~10-minute window:\n+    dFreeCount *= pow(1.0 - 1.0/600.0, (double)(nNow - nLastTime));\n+    nLastTime = nNow;\n+    // -limitfreerelay unit is thousand-bytes-per-minute\n+    // At default rate it would take over a month to fill 1GB\n+    if (dFreeCount >= GetArg(\"-limitfreerelay\", 15)*10*1000)\n+        return state.DoS(0, error(\"%s : free transaction rejected by rate limiter\", __func__),\n+                         REJECT_INSUFFICIENTFEE, \"insufficient priority\");\n+    unsigned int nSize = entry.GetTxSize();\n+    LogPrint(\"mempool\", \"Rate limit dFreeCount: %g => %g\\n\", dFreeCount, dFreeCount+nSize);\n+    dFreeCount += nSize;\n+\n+    return true;\n+}"
      },
      {
        "sha": "588e78df594fc81ab1f5d40d1ac6f4e06317c228",
        "filename": "src/policy.h",
        "status": "added",
        "additions": 37,
        "deletions": 0,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b61d6813f204b913ff8fe435f37c16fe643f95c/src/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b61d6813f204b913ff8fe435f37c16fe643f95c/src/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy.h?ref=3b61d6813f204b913ff8fe435f37c16fe643f95c",
        "patch": "@@ -0,0 +1,37 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_H\n+#define BITCOIN_POLICY_H\n+\n+class CCoinsViewCache;\n+class CTransaction;\n+class CTxMemPool;\n+class CTxMemPoolEntry;\n+class CValidationState;\n+\n+class CNodePolicyBase\n+{\n+public:\n+    virtual bool AcceptTxPoolPreInputs(CTxMemPool&, CValidationState&, const CTransaction&) = 0;\n+    virtual bool AcceptTxWithInputs(CTxMemPool&, CValidationState&, const CTransaction&, CCoinsViewCache&) = 0;\n+    virtual bool AcceptMemPoolEntry(CTxMemPool&, CValidationState&, CTxMemPoolEntry&, CCoinsViewCache&, bool& fRateLimit) = 0;\n+    virtual bool RateLimitTx(CTxMemPool&, CValidationState&, CTxMemPoolEntry&, CCoinsViewCache&) = 0;\n+};\n+\n+class CNodePolicy : CNodePolicyBase\n+{\n+public:\n+    bool fRequireStandardTx;\n+\n+    CNodePolicy() : fRequireStandardTx(true) { };\n+\n+    virtual bool AcceptTxPoolPreInputs(CTxMemPool&, CValidationState&, const CTransaction&);\n+    virtual bool AcceptTxWithInputs(CTxMemPool&, CValidationState&, const CTransaction&, CCoinsViewCache&);\n+    virtual bool AcceptMemPoolEntry(CTxMemPool&, CValidationState&, CTxMemPoolEntry&, CCoinsViewCache&, bool& fRateLimit);\n+    virtual bool RateLimitTx(CTxMemPool&, CValidationState&, CTxMemPoolEntry&, CCoinsViewCache&);\n+};\n+\n+#endif // BITCOIN_POLICY_H"
      }
    ]
  }
]