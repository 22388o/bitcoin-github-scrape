[
  {
    "sha": "74f7b1273c41892058fb2ff99aab878ccd22082a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NGY3YjEyNzNjNDE4OTIwNThmYjJmZjk5YWFiODc4Y2NkMjIwODJh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-04-20T07:05:12Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-04-23T07:32:25Z"
      },
      "message": "dbwrapper: Remove throw keywords in function signatures\n\nUsing throw() specifications in function signatures is not only\nnot required in C++, it is considered deprecated for\n[various reasons](https://stackoverflow.com/questions/1055387/throw-keyword-in-functions-signature).\nIt is not implemented by any of the common C++ compilers. The usage is\nalso inconsistent with the rest of the source code.",
      "tree": {
        "sha": "03e599adb2e5a70f2d85ff0927fdbe372ec7b7c9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/03e599adb2e5a70f2d85ff0927fdbe372ec7b7c9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/74f7b1273c41892058fb2ff99aab878ccd22082a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/74f7b1273c41892058fb2ff99aab878ccd22082a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/74f7b1273c41892058fb2ff99aab878ccd22082a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/74f7b1273c41892058fb2ff99aab878ccd22082a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "04a29373571d44be36bd099c3b3ec3cda89e99d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/04a29373571d44be36bd099c3b3ec3cda89e99d1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/04a29373571d44be36bd099c3b3ec3cda89e99d1"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 9,
      "deletions": 9
    },
    "files": [
      {
        "sha": "16f85a3e65dbdf3a9e06412f1dbe0e7eb5ac06ce",
        "filename": "src/dbwrapper.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74f7b1273c41892058fb2ff99aab878ccd22082a/src/dbwrapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74f7b1273c41892058fb2ff99aab878ccd22082a/src/dbwrapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dbwrapper.cpp?ref=74f7b1273c41892058fb2ff99aab878ccd22082a",
        "patch": "@@ -15,7 +15,7 @@\n #include <memenv.h>\n #include <stdint.h>\n \n-void HandleError(const leveldb::Status& status) throw(dbwrapper_error)\n+void HandleError(const leveldb::Status& status)\n {\n     if (status.ok())\n         return;\n@@ -102,7 +102,7 @@ CDBWrapper::~CDBWrapper()\n     options.env = NULL;\n }\n \n-bool CDBWrapper::WriteBatch(CDBBatch& batch, bool fSync) throw(dbwrapper_error)\n+bool CDBWrapper::WriteBatch(CDBBatch& batch, bool fSync)\n {\n     leveldb::Status status = pdb->Write(fSync ? syncoptions : writeoptions, &batch.batch);\n     HandleError(status);"
      },
      {
        "sha": "96fb42429f84ed39058ead2b7571e6d1c393e28d",
        "filename": "src/dbwrapper.h",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74f7b1273c41892058fb2ff99aab878ccd22082a/src/dbwrapper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74f7b1273c41892058fb2ff99aab878ccd22082a/src/dbwrapper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dbwrapper.h?ref=74f7b1273c41892058fb2ff99aab878ccd22082a",
        "patch": "@@ -23,7 +23,7 @@ class dbwrapper_error : public std::runtime_error\n     dbwrapper_error(const std::string& msg) : std::runtime_error(msg) {}\n };\n \n-void HandleError(const leveldb::Status& status) throw(dbwrapper_error);\n+void HandleError(const leveldb::Status& status);\n \n /** Batch of changes queued to be written to a CDBWrapper */\n class CDBBatch\n@@ -180,7 +180,7 @@ class CDBWrapper\n     ~CDBWrapper();\n \n     template <typename K, typename V>\n-    bool Read(const K& key, V& value) const throw(dbwrapper_error)\n+    bool Read(const K& key, V& value) const\n     {\n         CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n         ssKey.reserve(ssKey.GetSerializeSize(key));\n@@ -206,15 +206,15 @@ class CDBWrapper\n     }\n \n     template <typename K, typename V>\n-    bool Write(const K& key, const V& value, bool fSync = false) throw(dbwrapper_error)\n+    bool Write(const K& key, const V& value, bool fSync = false)\n     {\n         CDBBatch batch(&obfuscate_key);\n         batch.Write(key, value);\n         return WriteBatch(batch, fSync);\n     }\n \n     template <typename K>\n-    bool Exists(const K& key) const throw(dbwrapper_error)\n+    bool Exists(const K& key) const\n     {\n         CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n         ssKey.reserve(ssKey.GetSerializeSize(key));\n@@ -233,22 +233,22 @@ class CDBWrapper\n     }\n \n     template <typename K>\n-    bool Erase(const K& key, bool fSync = false) throw(dbwrapper_error)\n+    bool Erase(const K& key, bool fSync = false)\n     {\n         CDBBatch batch(&obfuscate_key);\n         batch.Erase(key);\n         return WriteBatch(batch, fSync);\n     }\n \n-    bool WriteBatch(CDBBatch& batch, bool fSync = false) throw(dbwrapper_error);\n+    bool WriteBatch(CDBBatch& batch, bool fSync = false);\n \n     // not available for LevelDB; provide for compatibility with BDB\n     bool Flush()\n     {\n         return true;\n     }\n \n-    bool Sync() throw(dbwrapper_error)\n+    bool Sync()\n     {\n         CDBBatch batch(&obfuscate_key);\n         return WriteBatch(batch, true);"
      }
    ]
  },
  {
    "sha": "878bf480a3875181712a53a1156754faa19e579b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NzhiZjQ4MGEzODc1MTgxNzEyYTUzYTExNTY3NTRmYWExOWU1Nzli",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-04-20T07:08:45Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-04-23T07:32:25Z"
      },
      "message": "dbwrapper: Remove CDBWrapper::GetObfuscateKeyHex\n\nIt is an unnecessary method as it is used only two times\nand only internally, and the whole implementation is\nHexStr(obfuscate_key).",
      "tree": {
        "sha": "108e95a67fae45d6b38e32b27f8b2c8ca8560602",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/108e95a67fae45d6b38e32b27f8b2c8ca8560602"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/878bf480a3875181712a53a1156754faa19e579b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/878bf480a3875181712a53a1156754faa19e579b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/878bf480a3875181712a53a1156754faa19e579b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/878bf480a3875181712a53a1156754faa19e579b/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "74f7b1273c41892058fb2ff99aab878ccd22082a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/74f7b1273c41892058fb2ff99aab878ccd22082a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/74f7b1273c41892058fb2ff99aab878ccd22082a"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 2,
      "deletions": 13
    },
    "files": [
      {
        "sha": "9eae7c7c80b5487d38691fe8f0bb0fa7e745f667",
        "filename": "src/dbwrapper.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 7,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/878bf480a3875181712a53a1156754faa19e579b/src/dbwrapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/878bf480a3875181712a53a1156754faa19e579b/src/dbwrapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dbwrapper.cpp?ref=878bf480a3875181712a53a1156754faa19e579b",
        "patch": "@@ -84,10 +84,10 @@ CDBWrapper::CDBWrapper(const boost::filesystem::path& path, size_t nCacheSize, b\n         Write(OBFUSCATE_KEY_KEY, new_key);\n         obfuscate_key = new_key;\n \n-        LogPrintf(\"Wrote new obfuscate key for %s: %s\\n\", path.string(), GetObfuscateKeyHex());\n+        LogPrintf(\"Wrote new obfuscate key for %s: %s\\n\", path.string(), HexStr(obfuscate_key));\n     }\n \n-    LogPrintf(\"Using obfuscation key for %s: %s\\n\", path.string(), GetObfuscateKeyHex());\n+    LogPrintf(\"Using obfuscation key for %s: %s\\n\", path.string(), HexStr(obfuscate_key));\n }\n \n CDBWrapper::~CDBWrapper()\n@@ -141,11 +141,6 @@ const std::vector<unsigned char>& CDBWrapper::GetObfuscateKey() const\n     return obfuscate_key;\n }\n \n-std::string CDBWrapper::GetObfuscateKeyHex() const\n-{\n-    return HexStr(obfuscate_key);\n-}\n-\n CDBIterator::~CDBIterator() { delete piter; }\n bool CDBIterator::Valid() { return piter->Valid(); }\n void CDBIterator::SeekToFirst() { piter->SeekToFirst(); }"
      },
      {
        "sha": "153c0fd1bf8b8b62ae7ca40ea3f5d3ef3abb7d77",
        "filename": "src/dbwrapper.h",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/878bf480a3875181712a53a1156754faa19e579b/src/dbwrapper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/878bf480a3875181712a53a1156754faa19e579b/src/dbwrapper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dbwrapper.h?ref=878bf480a3875181712a53a1156754faa19e579b",
        "patch": "@@ -268,12 +268,6 @@ class CDBWrapper\n      * Accessor for obfuscate_key.\n      */\n     const std::vector<unsigned char>& GetObfuscateKey() const;\n-\n-    /**\n-     * Return the obfuscate_key as a hex-formatted string.\n-     */\n-    std::string GetObfuscateKeyHex() const;\n-\n };\n \n #endif // BITCOIN_DBWRAPPER_H"
      }
    ]
  },
  {
    "sha": "b69836d6ff2bd7dc9568ad4af8235662bb4f1826",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNjk4MzZkNmZmMmJkN2RjOTU2OGFkNGFmODIzNTY2MmJiNGYxODI2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-04-20T09:46:01Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-04-23T07:32:25Z"
      },
      "message": "dbwrapper: Pass parent CDBWrapper into CDBBatch and CDBIterator\n\nPass parent wrapper directly instead of obfuscation key. This\nmakes it possible for other databases which re-use this code\nto use other properties from the database.\n\nAdd a namespace dbwrapper_private for private functions to be used\nonly in dbwrapper.h/cpp and dbwrapper_tests.",
      "tree": {
        "sha": "75aaeee173452ebde6ce70be705f02eba3c3c712",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/75aaeee173452ebde6ce70be705f02eba3c3c712"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b69836d6ff2bd7dc9568ad4af8235662bb4f1826",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b69836d6ff2bd7dc9568ad4af8235662bb4f1826",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b69836d6ff2bd7dc9568ad4af8235662bb4f1826",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b69836d6ff2bd7dc9568ad4af8235662bb4f1826/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "878bf480a3875181712a53a1156754faa19e579b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/878bf480a3875181712a53a1156754faa19e579b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/878bf480a3875181712a53a1156754faa19e579b"
      }
    ],
    "stats": {
      "total": 74,
      "additions": 44,
      "deletions": 30
    },
    "files": [
      {
        "sha": "42f57676ab961155bd12ee7af31a2fb1c11c42fd",
        "filename": "src/dbwrapper.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 5,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b69836d6ff2bd7dc9568ad4af8235662bb4f1826/src/dbwrapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b69836d6ff2bd7dc9568ad4af8235662bb4f1826/src/dbwrapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dbwrapper.cpp?ref=b69836d6ff2bd7dc9568ad4af8235662bb4f1826",
        "patch": "@@ -136,12 +136,16 @@ bool CDBWrapper::IsEmpty()\n     return !(it->Valid());\n }\n \n-const std::vector<unsigned char>& CDBWrapper::GetObfuscateKey() const\n-{\n-    return obfuscate_key;\n-}\n-\n CDBIterator::~CDBIterator() { delete piter; }\n bool CDBIterator::Valid() { return piter->Valid(); }\n void CDBIterator::SeekToFirst() { piter->SeekToFirst(); }\n void CDBIterator::Next() { piter->Next(); }\n+\n+namespace dbwrapper_private {\n+\n+const std::vector<unsigned char>& GetObfuscateKey(const CDBWrapper &w)\n+{\n+    return w.obfuscate_key;\n+}\n+\n+};"
      },
      {
        "sha": "9eca2edf607343a8ec283ae911b1d0320bf926db",
        "filename": "src/dbwrapper.h",
        "status": "modified",
        "additions": 28,
        "deletions": 18,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b69836d6ff2bd7dc9568ad4af8235662bb4f1826/src/dbwrapper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b69836d6ff2bd7dc9568ad4af8235662bb4f1826/src/dbwrapper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dbwrapper.h?ref=b69836d6ff2bd7dc9568ad4af8235662bb4f1826",
        "patch": "@@ -25,20 +25,34 @@ class dbwrapper_error : public std::runtime_error\n \n void HandleError(const leveldb::Status& status);\n \n+class CDBWrapper;\n+\n+/** These should be considered an implementation detail of the specific database.\n+ */\n+namespace dbwrapper_private {\n+\n+/** Work around circular dependency, as well as for testing in dbwrapper_tests.\n+ * Database obfuscation should be considered an implementation detail of the\n+ * specific database.\n+ */\n+const std::vector<unsigned char>& GetObfuscateKey(const CDBWrapper &w);\n+\n+};\n+\n /** Batch of changes queued to be written to a CDBWrapper */\n class CDBBatch\n {\n     friend class CDBWrapper;\n \n private:\n+    const CDBWrapper &parent;\n     leveldb::WriteBatch batch;\n-    const std::vector<unsigned char> *obfuscate_key;\n \n public:\n     /**\n-     * @param[in] obfuscate_key    If passed, XOR data with this key.\n+     * @param[in] parent    CDBWrapper that this batch is to be submitted to\n      */\n-    CDBBatch(const std::vector<unsigned char> *obfuscate_key) : obfuscate_key(obfuscate_key) { };\n+    CDBBatch(const CDBWrapper &parent) : parent(parent) { };\n \n     template <typename K, typename V>\n     void Write(const K& key, const V& value)\n@@ -51,7 +65,7 @@ class CDBBatch\n         CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n         ssValue.reserve(ssValue.GetSerializeSize(value));\n         ssValue << value;\n-        ssValue.Xor(*obfuscate_key);\n+        ssValue.Xor(dbwrapper_private::GetObfuscateKey(parent));\n         leveldb::Slice slValue(&ssValue[0], ssValue.size());\n \n         batch.Put(slKey, slValue);\n@@ -72,17 +86,17 @@ class CDBBatch\n class CDBIterator\n {\n private:\n+    const CDBWrapper &parent;\n     leveldb::Iterator *piter;\n-    const std::vector<unsigned char> *obfuscate_key;\n \n public:\n \n     /**\n+     * @param[in] parent           Parent CDBWrapper instance.\n      * @param[in] piterIn          The original leveldb iterator.\n-     * @param[in] obfuscate_key    If passed, XOR data with this key.\n      */\n-    CDBIterator(leveldb::Iterator *piterIn, const std::vector<unsigned char>* obfuscate_key) :\n-        piter(piterIn), obfuscate_key(obfuscate_key) { };\n+    CDBIterator(const CDBWrapper &parent, leveldb::Iterator *piterIn) :\n+        parent(parent), piter(piterIn) { };\n     ~CDBIterator();\n \n     bool Valid();\n@@ -118,7 +132,7 @@ class CDBIterator\n         leveldb::Slice slValue = piter->value();\n         try {\n             CDataStream ssValue(slValue.data(), slValue.data() + slValue.size(), SER_DISK, CLIENT_VERSION);\n-            ssValue.Xor(*obfuscate_key);\n+            ssValue.Xor(dbwrapper_private::GetObfuscateKey(parent));\n             ssValue >> value;\n         } catch (const std::exception&) {\n             return false;\n@@ -134,6 +148,7 @@ class CDBIterator\n \n class CDBWrapper\n {\n+    friend const std::vector<unsigned char>& dbwrapper_private::GetObfuscateKey(const CDBWrapper &w);\n private:\n     //! custom environment this database is using (may be NULL in case of default environment)\n     leveldb::Env* penv;\n@@ -208,7 +223,7 @@ class CDBWrapper\n     template <typename K, typename V>\n     bool Write(const K& key, const V& value, bool fSync = false)\n     {\n-        CDBBatch batch(&obfuscate_key);\n+        CDBBatch batch(*this);\n         batch.Write(key, value);\n         return WriteBatch(batch, fSync);\n     }\n@@ -235,7 +250,7 @@ class CDBWrapper\n     template <typename K>\n     bool Erase(const K& key, bool fSync = false)\n     {\n-        CDBBatch batch(&obfuscate_key);\n+        CDBBatch batch(*this);\n         batch.Erase(key);\n         return WriteBatch(batch, fSync);\n     }\n@@ -250,24 +265,19 @@ class CDBWrapper\n \n     bool Sync()\n     {\n-        CDBBatch batch(&obfuscate_key);\n+        CDBBatch batch(*this);\n         return WriteBatch(batch, true);\n     }\n \n     CDBIterator *NewIterator()\n     {\n-        return new CDBIterator(pdb->NewIterator(iteroptions), &obfuscate_key);\n+        return new CDBIterator(*this, pdb->NewIterator(iteroptions));\n     }\n \n     /**\n      * Return true if the database managed by this class contains no entries.\n      */\n     bool IsEmpty();\n-\n-    /**\n-     * Accessor for obfuscate_key.\n-     */\n-    const std::vector<unsigned char>& GetObfuscateKey() const;\n };\n \n #endif // BITCOIN_DBWRAPPER_H"
      },
      {
        "sha": "081d57831d0dd595c536a78f91b9d703ca0258df",
        "filename": "src/test/dbwrapper_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b69836d6ff2bd7dc9568ad4af8235662bb4f1826/src/test/dbwrapper_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b69836d6ff2bd7dc9568ad4af8235662bb4f1826/src/test/dbwrapper_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/dbwrapper_tests.cpp?ref=b69836d6ff2bd7dc9568ad4af8235662bb4f1826",
        "patch": "@@ -39,7 +39,7 @@ BOOST_AUTO_TEST_CASE(dbwrapper)\n         uint256 res;\n \n         // Ensure that we're doing real obfuscation when obfuscate=true\n-        BOOST_CHECK(obfuscate != is_null_key(dbw.GetObfuscateKey()));\n+        BOOST_CHECK(obfuscate != is_null_key(dbwrapper_private::GetObfuscateKey(dbw)));\n \n         BOOST_CHECK(dbw.Write(key, in));\n         BOOST_CHECK(dbw.Read(key, res));\n@@ -64,7 +64,7 @@ BOOST_AUTO_TEST_CASE(dbwrapper_batch)\n         uint256 in3 = GetRandHash();\n \n         uint256 res;\n-        CDBBatch batch(&dbw.GetObfuscateKey());\n+        CDBBatch batch(dbw);\n \n         batch.Write(key, in);\n         batch.Write(key2, in2);\n@@ -156,7 +156,7 @@ BOOST_AUTO_TEST_CASE(existing_data_no_obfuscate)\n     BOOST_CHECK_EQUAL(res2.ToString(), in.ToString());\n \n     BOOST_CHECK(!odbw.IsEmpty()); // There should be existing data\n-    BOOST_CHECK(is_null_key(odbw.GetObfuscateKey())); // The key should be an empty string\n+    BOOST_CHECK(is_null_key(dbwrapper_private::GetObfuscateKey(odbw))); // The key should be an empty string\n \n     uint256 in2 = GetRandHash();\n     uint256 res3;\n@@ -193,7 +193,7 @@ BOOST_AUTO_TEST_CASE(existing_data_reindex)\n     // Check that the key/val we wrote with unobfuscated wrapper doesn't exist\n     uint256 res2;\n     BOOST_CHECK(!odbw.Read(key, res2));\n-    BOOST_CHECK(!is_null_key(odbw.GetObfuscateKey()));\n+    BOOST_CHECK(!is_null_key(dbwrapper_private::GetObfuscateKey(odbw)));\n \n     uint256 in2 = GetRandHash();\n     uint256 res3;"
      },
      {
        "sha": "5fbaeb608a74c827a172887c9488967c177f8c27",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b69836d6ff2bd7dc9568ad4af8235662bb4f1826/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b69836d6ff2bd7dc9568ad4af8235662bb4f1826/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=b69836d6ff2bd7dc9568ad4af8235662bb4f1826",
        "patch": "@@ -49,7 +49,7 @@ uint256 CCoinsViewDB::GetBestBlock() const {\n }\n \n bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) {\n-    CDBBatch batch(&db.GetObfuscateKey());\n+    CDBBatch batch(db);\n     size_t count = 0;\n     size_t changed = 0;\n     for (CCoinsMap::iterator it = mapCoins.begin(); it != mapCoins.end();) {\n@@ -139,7 +139,7 @@ void CCoinsViewDBCursor::Next()\n }\n \n bool CBlockTreeDB::WriteBatchSync(const std::vector<std::pair<int, const CBlockFileInfo*> >& fileInfo, int nLastFile, const std::vector<const CBlockIndex*>& blockinfo) {\n-    CDBBatch batch(&GetObfuscateKey());\n+    CDBBatch batch(*this);\n     for (std::vector<std::pair<int, const CBlockFileInfo*> >::const_iterator it=fileInfo.begin(); it != fileInfo.end(); it++) {\n         batch.Write(make_pair(DB_BLOCK_FILES, it->first), *it->second);\n     }\n@@ -155,7 +155,7 @@ bool CBlockTreeDB::ReadTxIndex(const uint256 &txid, CDiskTxPos &pos) {\n }\n \n bool CBlockTreeDB::WriteTxIndex(const std::vector<std::pair<uint256, CDiskTxPos> >&vect) {\n-    CDBBatch batch(&GetObfuscateKey());\n+    CDBBatch batch(*this);\n     for (std::vector<std::pair<uint256,CDiskTxPos> >::const_iterator it=vect.begin(); it!=vect.end(); it++)\n         batch.Write(make_pair(DB_TXINDEX, it->first), it->second);\n     return WriteBatch(batch);"
      }
    ]
  },
  {
    "sha": "869cf1234a915808fda6fd663dead5580fbd046e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NjljZjEyMzRhOTE1ODA4ZmRhNmZkNjYzZGVhZDU1ODBmYmQwNDZl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-04-20T09:48:57Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-04-23T07:32:25Z"
      },
      "message": "dbwrapper: Move `HandleError` to `dbwrapper_private`\n\nHandleError is implementation-specific.",
      "tree": {
        "sha": "b359d5dd57f5a34b6758983781f2743526235c66",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b359d5dd57f5a34b6758983781f2743526235c66"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/869cf1234a915808fda6fd663dead5580fbd046e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/869cf1234a915808fda6fd663dead5580fbd046e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/869cf1234a915808fda6fd663dead5580fbd046e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/869cf1234a915808fda6fd663dead5580fbd046e/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b69836d6ff2bd7dc9568ad4af8235662bb4f1826",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b69836d6ff2bd7dc9568ad4af8235662bb4f1826",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b69836d6ff2bd7dc9568ad4af8235662bb4f1826"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 23,
      "deletions": 21
    },
    "files": [
      {
        "sha": "09c68fbe550c822ad30e575785563c896091f1ca",
        "filename": "src/dbwrapper.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 17,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/869cf1234a915808fda6fd663dead5580fbd046e/src/dbwrapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/869cf1234a915808fda6fd663dead5580fbd046e/src/dbwrapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dbwrapper.cpp?ref=869cf1234a915808fda6fd663dead5580fbd046e",
        "patch": "@@ -15,20 +15,6 @@\n #include <memenv.h>\n #include <stdint.h>\n \n-void HandleError(const leveldb::Status& status)\n-{\n-    if (status.ok())\n-        return;\n-    LogPrintf(\"%s\\n\", status.ToString());\n-    if (status.IsCorruption())\n-        throw dbwrapper_error(\"Database corrupted\");\n-    if (status.IsIOError())\n-        throw dbwrapper_error(\"Database I/O error\");\n-    if (status.IsNotFound())\n-        throw dbwrapper_error(\"Database entry missing\");\n-    throw dbwrapper_error(\"Unknown database error\");\n-}\n-\n static leveldb::Options GetOptions(size_t nCacheSize)\n {\n     leveldb::Options options;\n@@ -61,13 +47,13 @@ CDBWrapper::CDBWrapper(const boost::filesystem::path& path, size_t nCacheSize, b\n         if (fWipe) {\n             LogPrintf(\"Wiping LevelDB in %s\\n\", path.string());\n             leveldb::Status result = leveldb::DestroyDB(path.string(), options);\n-            HandleError(result);\n+            dbwrapper_private::HandleError(result);\n         }\n         TryCreateDirectory(path);\n         LogPrintf(\"Opening LevelDB in %s\\n\", path.string());\n     }\n     leveldb::Status status = leveldb::DB::Open(options, path.string(), &pdb);\n-    HandleError(status);\n+    dbwrapper_private::HandleError(status);\n     LogPrintf(\"Opened LevelDB successfully\\n\");\n \n     // The base-case obfuscation key, which is a noop.\n@@ -105,7 +91,7 @@ CDBWrapper::~CDBWrapper()\n bool CDBWrapper::WriteBatch(CDBBatch& batch, bool fSync)\n {\n     leveldb::Status status = pdb->Write(fSync ? syncoptions : writeoptions, &batch.batch);\n-    HandleError(status);\n+    dbwrapper_private::HandleError(status);\n     return true;\n }\n \n@@ -143,6 +129,20 @@ void CDBIterator::Next() { piter->Next(); }\n \n namespace dbwrapper_private {\n \n+void HandleError(const leveldb::Status& status)\n+{\n+    if (status.ok())\n+        return;\n+    LogPrintf(\"%s\\n\", status.ToString());\n+    if (status.IsCorruption())\n+        throw dbwrapper_error(\"Database corrupted\");\n+    if (status.IsIOError())\n+        throw dbwrapper_error(\"Database I/O error\");\n+    if (status.IsNotFound())\n+        throw dbwrapper_error(\"Database entry missing\");\n+    throw dbwrapper_error(\"Unknown database error\");\n+}\n+\n const std::vector<unsigned char>& GetObfuscateKey(const CDBWrapper &w)\n {\n     return w.obfuscate_key;"
      },
      {
        "sha": "a0779d3ab99189740d59782e508db261130669ad",
        "filename": "src/dbwrapper.h",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/869cf1234a915808fda6fd663dead5580fbd046e/src/dbwrapper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/869cf1234a915808fda6fd663dead5580fbd046e/src/dbwrapper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dbwrapper.h?ref=869cf1234a915808fda6fd663dead5580fbd046e",
        "patch": "@@ -23,14 +23,16 @@ class dbwrapper_error : public std::runtime_error\n     dbwrapper_error(const std::string& msg) : std::runtime_error(msg) {}\n };\n \n-void HandleError(const leveldb::Status& status);\n-\n class CDBWrapper;\n \n /** These should be considered an implementation detail of the specific database.\n  */\n namespace dbwrapper_private {\n \n+/** Handle database error by throwing dbwrapper_error exception.\n+ */\n+void HandleError(const leveldb::Status& status);\n+\n /** Work around circular dependency, as well as for testing in dbwrapper_tests.\n  * Database obfuscation should be considered an implementation detail of the\n  * specific database.\n@@ -208,7 +210,7 @@ class CDBWrapper\n             if (status.IsNotFound())\n                 return false;\n             LogPrintf(\"LevelDB read failure: %s\\n\", status.ToString());\n-            HandleError(status);\n+            dbwrapper_private::HandleError(status);\n         }\n         try {\n             CDataStream ssValue(strValue.data(), strValue.data() + strValue.size(), SER_DISK, CLIENT_VERSION);\n@@ -242,7 +244,7 @@ class CDBWrapper\n             if (status.IsNotFound())\n                 return false;\n             LogPrintf(\"LevelDB read failure: %s\\n\", status.ToString());\n-            HandleError(status);\n+            dbwrapper_private::HandleError(status);\n         }\n         return true;\n     }"
      }
    ]
  }
]