[
  {
    "sha": "589f958662a2dcaacdb9a66f1088c74828a39577",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ODlmOTU4NjYyYTJkY2FhY2RiOWE2NmYxMDg4Yzc0ODI4YTM5NTc3",
    "commit": {
      "author": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-12-20T21:08:15Z"
      },
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-12-20T21:08:15Z"
      },
      "message": "build: Check for 128 bit integer support\n\nUsed in MuHash3072 implementation.\n\nCo-authored-by: Pieter Wuille <pieter.wuille@gmail.com>",
      "tree": {
        "sha": "46743436a65e82399da44e2b6c51911bfb954011",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/46743436a65e82399da44e2b6c51911bfb954011"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/589f958662a2dcaacdb9a66f1088c74828a39577",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAl/fvawVHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jNsucQAJVLIn6KJK9mgt6blB1J3dzGFK+C\nz/xjYBzxksGZY62sxN8gPXQLeceZWicjDx8ZZute9NTXeObAZDonzhnsXXCWGYS1\ni2w2i/aFGvbSxtf1glFuuKkvrOIcxIGk/Xw1yVp2VucIcCGiBN67Z41J2MGaS/84\nQ5w8WZkI1F/D5EDjevPQb95POHNOYlAZnk+L54UYrTPGlSc36X6Gb99aZH7b9PeO\n+ZTDBKddwFohZnlSE1fTNm8VTVtnZfTlGmRIIlIMMwC+/rvt6YaVJpyf5Zlzucsc\nPt7iRMbKjgKRGPqrAinExd086dvKCYolBS/eRCYzI7vPv7CfMoFQ0vv/O5LSqTfd\nK2Rh/PHCJOgTYuqfnwVR3bHknMgJctuO+RpNz+efm5qPK3TbZ1dTt0QPBXuY/sHV\n0DKXNU0K87czvinLWxhGXhOkp1JaE35hHMFqGKmcjihLvs5J7Z/MTYPx8TYLGMgy\nCBII2EzdyxCOBxAylxMXLB5/FYjWkR0N2y7XJhz7aReF1gIlay/UKF+/XGEsWccJ\nMraFjWWNY411jj1cGz3vkUT4UqtPbSaUbFfx/Z8/pHNYy4zoCf0UuHYTpcUYLCdz\nfUUj+0HNkTX323Vol5LFrFrQhwJvxSZujisKQRevr2hNymGFZtt7qwLI5Ae0+k/4\n3ngKuX1mOpXw/Pi+\n=jy9j\n-----END PGP SIGNATURE-----",
        "payload": "tree 46743436a65e82399da44e2b6c51911bfb954011\nparent 1811e488d53b82825e3523f6f0cdb97f635f03a7\nauthor Fabian Jahr <fjahr@protonmail.com> 1608498495 +0100\ncommitter Fabian Jahr <fjahr@protonmail.com> 1608498495 +0100\n\nbuild: Check for 128 bit integer support\n\nUsed in MuHash3072 implementation.\n\nCo-authored-by: Pieter Wuille <pieter.wuille@gmail.com>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/589f958662a2dcaacdb9a66f1088c74828a39577",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/589f958662a2dcaacdb9a66f1088c74828a39577",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/589f958662a2dcaacdb9a66f1088c74828a39577/comments",
    "author": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1811e488d53b82825e3523f6f0cdb97f635f03a7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1811e488d53b82825e3523f6f0cdb97f635f03a7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1811e488d53b82825e3523f6f0cdb97f635f03a7"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e1c78c1a69e71f6578ffdfc6f69b3676b8f4fd40",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/589f958662a2dcaacdb9a66f1088c74828a39577/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/589f958662a2dcaacdb9a66f1088c74828a39577/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=589f958662a2dcaacdb9a66f1088c74828a39577",
        "patch": "@@ -753,6 +753,9 @@ if test x$use_lcov_branch != xno; then\n   AC_SUBST(LCOV_OPTS, \"$LCOV_OPTS --rc lcov_branch_coverage=1\")\n fi\n \n+dnl Check for __int128\n+AC_CHECK_TYPES([__int128])\n+\n dnl Check for endianness\n AC_C_BIGENDIAN\n "
      }
    ]
  },
  {
    "sha": "0b4d290bf5b0a4d156c523431bf89aaa9ffe92e5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYjRkMjkwYmY1YjBhNGQxNTZjNTIzNDMxYmY4OWFhYTlmZmU5MmU1",
    "commit": {
      "author": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-12-20T21:23:47Z"
      },
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-12-20T22:27:58Z"
      },
      "message": "crypto: Add Num3072 implementation\n\nNum3072 is a specialized bignum implementation used in MuHash3072.\n\nCo-authored-by: Pieter Wuille <pieter.wuille@gmail.com>",
      "tree": {
        "sha": "676d832b0e7b0319c3bebe818b1a87eab87fd38a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/676d832b0e7b0319c3bebe818b1a87eab87fd38a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0b4d290bf5b0a4d156c523431bf89aaa9ffe92e5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAl/fz/AVHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jN96wQAKFRQnhRUgCN0F32kSyaTBC8afSX\n78HsG8uJNpzlI3va4Mgx1TtiAzewgSF0DEVdudwLTVzk6N62R/dkGyH7jA4ERVqX\n8YI9KsuMVylg4qZRxFs5yPaSA6NSgOpMW1yUsjZkjd+mtD/jVlv4AKl2tAwUBHNw\nrnUWdk2NzRzhiRF8Enku74wdID5ta4mTUka2ytrQQHksTa+jMkWsgF30CIEEqHMO\nNJ9QNpUH8618DC0ntF9WP/5cKwt9gFmea2JZQ2SbPlD4i0cD6+cR4/I+dGfPyC+Z\nrvLAwnV4zP6EI2n3sYZBB3H1Wh+HROf91hwgaSI8bheSXRTJKZlPj02FaRRB4HMR\nmgqOHJfbccBXO6oWNV1gKtBkfxr9MVFUpdploGTpY7ObvyFvVp+nvaP2jESrX2J5\nOgaRuiDcUXL2oOR3vY51wZRuqF33x8EmIhohaeDYeyYwjIB3mRUHTjRSMtY7E6Vk\nCH4XSl862YdV6ak1GaRqFGTHKODWIr7of++J7/Fk7zPhq2kv7cbbkC4stI9nTM0V\nhbpJ/fupabqAr4lSQoxMtIE6Oho6g1Ke8prruUO2I+ZesiHafIS2q7U419byFqs3\nBByeSGWQY0/cJ0tvy0KFzcpHmiempR4zMbtAfWVWJKfIZnzzwLWRG6ntp7wm6e9p\nBE9PZRm+MQyOM7sI\n=ZST/\n-----END PGP SIGNATURE-----",
        "payload": "tree 676d832b0e7b0319c3bebe818b1a87eab87fd38a\nparent 589f958662a2dcaacdb9a66f1088c74828a39577\nauthor Fabian Jahr <fjahr@protonmail.com> 1608499427 +0100\ncommitter Fabian Jahr <fjahr@protonmail.com> 1608503278 +0100\n\ncrypto: Add Num3072 implementation\n\nNum3072 is a specialized bignum implementation used in MuHash3072.\n\nCo-authored-by: Pieter Wuille <pieter.wuille@gmail.com>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b4d290bf5b0a4d156c523431bf89aaa9ffe92e5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0b4d290bf5b0a4d156c523431bf89aaa9ffe92e5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b4d290bf5b0a4d156c523431bf89aaa9ffe92e5/comments",
    "author": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "589f958662a2dcaacdb9a66f1088c74828a39577",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/589f958662a2dcaacdb9a66f1088c74828a39577",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/589f958662a2dcaacdb9a66f1088c74828a39577"
      }
    ],
    "stats": {
      "total": 339,
      "additions": 339,
      "deletions": 0
    },
    "files": [
      {
        "sha": "d0f59065da743156abdb03e1652378926bff72dc",
        "filename": "src/crypto/muhash.cpp",
        "status": "added",
        "additions": 277,
        "deletions": 0,
        "changes": 277,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b4d290bf5b0a4d156c523431bf89aaa9ffe92e5/src/crypto/muhash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b4d290bf5b0a4d156c523431bf89aaa9ffe92e5/src/crypto/muhash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/muhash.cpp?ref=0b4d290bf5b0a4d156c523431bf89aaa9ffe92e5",
        "patch": "@@ -0,0 +1,277 @@\n+// Copyright (c) 2017-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+#include <hash.h>\n+\n+#include <cassert>\n+#include <cstdio>\n+#include <limits>\n+\n+namespace {\n+\n+using limb_t = Num3072::limb_t;\n+using double_limb_t = Num3072::double_limb_t;\n+constexpr int LIMB_SIZE = Num3072::LIMB_SIZE;\n+constexpr int LIMBS = Num3072::LIMBS;\n+/** 2^3072 - 1103717, the largest 3072-bit safe prime number, is used as the modulus. */\n+constexpr limb_t MAX_PRIME_DIFF = 1103717;\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+inline void extract3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = c2;\n+    c2 = 0;\n+}\n+\n+/** [c0,c1] = a * b */\n+inline void mul(limb_t& c0, limb_t& c1, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    c1 = t >> LIMB_SIZE;\n+    c0 = t;\n+}\n+\n+/* [c0,c1,c2] += n * [d0,d1,d2]. c2 is 0 initially */\n+inline void mulnadd3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& d0, limb_t& d1, limb_t& d2, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)d0 * n + c0;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)d1 * n + c1;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+    c2 = t + d2 * n;\n+}\n+\n+/* [c0,c1] *= n */\n+inline void muln2(limb_t& c0, limb_t& c1, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)c0 * n;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)c1 * n;\n+    c1 = t;\n+}\n+\n+/** [c0,c1,c2] += a * b */\n+inline void muladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    limb_t th = t >> LIMB_SIZE;\n+    limb_t tl = t;\n+\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1,c2] += 2 * a * b */\n+inline void muldbladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    limb_t th = t >> LIMB_SIZE;\n+    limb_t tl = t;\n+\n+    c0 += tl;\n+    limb_t tt = th + ((c0 < tl) ? 1 : 0);\n+    c1 += tt;\n+    c2 += (c1 < tt) ? 1 : 0;\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/**\n+ * Add limb a to [c0,c1]: [c0,c1] += a. Then extract the lowest\n+ * limb of [c0,c1] into n, and left shift the number by 1 limb.\n+ * */\n+inline void addnextract2(limb_t& c0, limb_t& c1, const limb_t& a, limb_t& n)\n+{\n+    limb_t c2 = 0;\n+\n+    // add\n+    c0 += a;\n+    if (c0 < a) {\n+        c1 += 1;\n+\n+        // Handle case when c1 has overflown\n+        if (c1 == 0)\n+            c2 = 1;\n+    }\n+\n+    // extract\n+    n = c0;\n+    c0 = c1;\n+    c1 = c2;\n+}\n+\n+/** in_out = in_out^(2^sq) * mul */\n+inline void square_n_mul(Num3072& in_out, const int sq, const Num3072& mul)\n+{\n+    for (int j = 0; j < sq; ++j) in_out.Square();\n+    in_out.Multiply(mul);\n+}\n+\n+} // namespace\n+\n+/** Indicates wether d is larger than the modulus. */\n+bool Num3072::IsOverflow() const\n+{\n+    if (this->limbs[0] <= std::numeric_limits<limb_t>::max() - MAX_PRIME_DIFF) return false;\n+    for (int i = 1; i < LIMBS; ++i) {\n+        if (this->limbs[i] != std::numeric_limits<limb_t>::max()) return false;\n+    }\n+    return true;\n+}\n+\n+void Num3072::FullReduce()\n+{\n+    limb_t c0 = MAX_PRIME_DIFF;\n+    limb_t c1 = 0;\n+    for (int i = 0; i < LIMBS; ++i) {\n+        addnextract2(c0, c1, this->limbs[i], this->limbs[i]);\n+    }\n+}\n+\n+Num3072 Num3072::GetInverse() const\n+{\n+    // For fast exponentiation a sliding window exponentiation with repunit\n+    // precomputation is utilized. See \"Fast Point Decompression for Standard\n+    // Elliptic Curves\" (Brumley, J\u00e4rvinen, 2008).\n+\n+    Num3072 p[12]; // p[i] = a^(2^(2^i)-1)\n+    Num3072 out;\n+\n+    p[0] = *this;\n+\n+    for (int i = 0; i < 11; ++i) {\n+        p[i + 1] = p[i];\n+        for (int j = 0; j < (1 << i); ++j) p[i + 1].Square();\n+        p[i + 1].Multiply(p[i]);\n+    }\n+\n+    out = p[11];\n+\n+    square_n_mul(out, 512, p[9]);\n+    square_n_mul(out, 256, p[8]);\n+    square_n_mul(out, 128, p[7]);\n+    square_n_mul(out, 64, p[6]);\n+    square_n_mul(out, 32, p[5]);\n+    square_n_mul(out, 8, p[3]);\n+    square_n_mul(out, 2, p[1]);\n+    square_n_mul(out, 1, p[0]);\n+    square_n_mul(out, 5, p[2]);\n+    square_n_mul(out, 3, p[0]);\n+    square_n_mul(out, 2, p[0]);\n+    square_n_mul(out, 4, p[0]);\n+    square_n_mul(out, 4, p[1]);\n+    square_n_mul(out, 3, p[0]);\n+\n+    return out;\n+}\n+\n+void Num3072::Multiply(const Num3072& a)\n+{\n+    limb_t c0 = 0, c1 = 0, c2 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of this*a into tmp, including one reduction. */\n+    for (int j = 0; j < LIMBS - 1; ++j) {\n+        limb_t d0 = 0, d1 = 0, d2 = 0;\n+        mul(d0, d1, this->limbs[1 + j], a.limbs[LIMBS + j - (1 + j)]);\n+        for (int i = 2 + j; i < LIMBS; ++i) muladd3(d0, d1, d2, this->limbs[i], a.limbs[LIMBS + j - i]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n+        for (int i = 0; i < j + 1; ++i) muladd3(c0, c1, c2, this->limbs[i], a.limbs[j - i]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+\n+    /* Compute limb N-1 of a*b into tmp. */\n+    assert(c2 == 0);\n+    for (int i = 0; i < LIMBS; ++i) muladd3(c0, c1, c2, this->limbs[i], a.limbs[LIMBS - 1 - i]);\n+    extract3(c0, c1, c2, tmp.limbs[LIMBS - 1]);\n+\n+    /* Perform a second reduction. */\n+    muln2(c0, c1, MAX_PRIME_DIFF);\n+    for (int j = 0; j < LIMBS; ++j) {\n+        addnextract2(c0, c1, tmp.limbs[j], this->limbs[j]);\n+    }\n+\n+    assert(c1 == 0);\n+    assert(c0 == 0 || c0 == 1);\n+\n+    /* Perform up to two more reductions if the internal state has already\n+     * overflown the MAX of Num3072 or if it is larger than the modulus or\n+     * if both are the case.\n+     * */\n+    if (this->IsOverflow()) this->FullReduce();\n+    if (c0) this->FullReduce();\n+}\n+\n+void Num3072::Square()\n+{\n+    limb_t c0 = 0, c1 = 0, c2 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of this*this into tmp, including one reduction. */\n+    for (int j = 0; j < LIMBS - 1; ++j) {\n+        limb_t d0 = 0, d1 = 0, d2 = 0;\n+        for (int i = 0; i < (LIMBS - 1 - j) / 2; ++i) muldbladd3(d0, d1, d2, this->limbs[i + j + 1], this->limbs[LIMBS - 1 - i]);\n+        if ((j + 1) & 1) muladd3(d0, d1, d2, this->limbs[(LIMBS - 1 - j) / 2 + j + 1], this->limbs[LIMBS - 1 - (LIMBS - 1 - j) / 2]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n+        for (int i = 0; i < (j + 1) / 2; ++i) muldbladd3(c0, c1, c2, this->limbs[i], this->limbs[j - i]);\n+        if ((j + 1) & 1) muladd3(c0, c1, c2, this->limbs[(j + 1) / 2], this->limbs[j - (j + 1) / 2]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+\n+    assert(c2 == 0);\n+    for (int i = 0; i < LIMBS / 2; ++i) muldbladd3(c0, c1, c2, this->limbs[i], this->limbs[LIMBS - 1 - i]);\n+    extract3(c0, c1, c2, tmp.limbs[LIMBS - 1]);\n+\n+    /* Perform a second reduction. */\n+    muln2(c0, c1, MAX_PRIME_DIFF);\n+    for (int j = 0; j < LIMBS; ++j) {\n+        addnextract2(c0, c1, tmp.limbs[j], this->limbs[j]);\n+    }\n+\n+    assert(c1 == 0);\n+    assert(c0 == 0 || c0 == 1);\n+\n+    /* Perform up to two more reductions if the internal state has already\n+     * overflown the MAX of Num3072 or if it is larger than the modulus or\n+     * if both are the case.\n+     * */\n+    if (this->IsOverflow()) this->FullReduce();\n+    if (c0) this->FullReduce();\n+}\n+\n+void Num3072::SetToOne()\n+{\n+    this->limbs[0] = 1;\n+    for (int i = 1; i < LIMBS; ++i) this->limbs[i] = 0;\n+}\n+\n+void Num3072::Divide(const Num3072& a)\n+{\n+    if (this->IsOverflow()) this->FullReduce();\n+\n+    Num3072 inv{};\n+    if (a.IsOverflow()) {\n+        Num3072 b = a;\n+        b.FullReduce();\n+        inv = b.GetInverse();\n+    } else {\n+        inv = a.GetInverse();\n+    }\n+\n+    this->Multiply(inv);\n+    if (this->IsOverflow()) this->FullReduce();\n+}"
      },
      {
        "sha": "e5f6f0464fdb0dc730be4f4f0661a174c0bc0f4c",
        "filename": "src/crypto/muhash.h",
        "status": "added",
        "additions": 62,
        "deletions": 0,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b4d290bf5b0a4d156c523431bf89aaa9ffe92e5/src/crypto/muhash.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b4d290bf5b0a4d156c523431bf89aaa9ffe92e5/src/crypto/muhash.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/muhash.h?ref=0b4d290bf5b0a4d156c523431bf89aaa9ffe92e5",
        "patch": "@@ -0,0 +1,62 @@\n+// Copyright (c) 2017-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CRYPTO_MUHASH_H\n+#define BITCOIN_CRYPTO_MUHASH_H\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <serialize.h>\n+#include <uint256.h>\n+\n+#include <stdint.h>\n+\n+class Num3072\n+{\n+private:\n+    void FullReduce();\n+    bool IsOverflow() const;\n+    Num3072 GetInverse() const;\n+\n+public:\n+\n+#ifdef HAVE___INT128\n+    typedef unsigned __int128 double_limb_t;\n+    typedef uint64_t limb_t;\n+    static constexpr int LIMBS = 48;\n+    static constexpr int LIMB_SIZE = 64;\n+#else\n+    typedef uint64_t double_limb_t;\n+    typedef uint32_t limb_t;\n+    static constexpr int LIMBS = 96;\n+    static constexpr int LIMB_SIZE = 32;\n+#endif\n+    limb_t limbs[LIMBS];\n+\n+    // Sanity check for Num3072 constants\n+    static_assert(LIMB_SIZE * LIMBS == 3072, \"Num3072 isn't 3072 bits\");\n+    static_assert(sizeof(double_limb_t) == sizeof(limb_t) * 2, \"bad size for double_limb_t\");\n+    static_assert(sizeof(limb_t) * 8 == LIMB_SIZE, \"LIMB_SIZE is incorrect\");\n+\n+    // Hard coded values in MuHash3072 constructor and Finalize\n+    static_assert(sizeof(limb_t) == 4 || sizeof(limb_t) == 8, \"bad size for limb_t\");\n+\n+    void Multiply(const Num3072& a);\n+    void Divide(const Num3072& a);\n+    void SetToOne();\n+    void Square();\n+\n+    Num3072() { this->SetToOne(); };\n+\n+    SERIALIZE_METHODS(Num3072, obj)\n+    {\n+        for (auto& limb : obj.limbs) {\n+            READWRITE(limb);\n+        }\n+    }\n+};\n+\n+#endif // BITCOIN_CRYPTO_MUHASH_H"
      }
    ]
  },
  {
    "sha": "adc708c98dbf03b1735edc91f813a36580781a95",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZGM3MDhjOThkYmYwM2IxNzM1ZWRjOTFmODEzYTM2NTgwNzgxYTk1",
    "commit": {
      "author": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-12-20T21:27:14Z"
      },
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-12-21T18:57:04Z"
      },
      "message": "crypto: Add MuHash3072 implementation\n\nCo-authored-by: Pieter Wuille <pieter.wuille@gmail.com>",
      "tree": {
        "sha": "5c049fc8e47549747b30b7c0e001ea1fd1ab0a6a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5c049fc8e47549747b30b7c0e001ea1fd1ab0a6a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/adc708c98dbf03b1735edc91f813a36580781a95",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAl/g8AcVHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jNKjcQAIOvBo3cbqLcAjnIPr2a0DnPX9bY\nI2pIg/lB4Ztasi2mxtdXoVZAaPrb/FwG+9UnyHnoVTraaRo8JvPtjVkd96WrfMXe\nofSHh10O2mtrgoDWJBxrQa3YTrtd8Lux0oVq0Jd5O2kNuPdoWFG65FpJbNCmzHom\nojFWc2E3sqjyLocMrug+0v/75qoEG5T87Hgj3vq0WrtmuLqI+Y4JJ4GLx3+rH+Gb\nKuMUmKEq8Lfhs/gwRmr7Wfc5AUSF+USqyO6a8/uhuMlP5Zw1LYK2FqrOHpXD+k9h\nk6mVWju4TYdb6zsNyoZBV8HIuZ04S1TTuZh3wswxOFXfbjMV7BpsCEO5/xdKQ9Ty\nlKj7zLYQ0pFETf6PgueT0/mpwyqyFZ/ELdJMpNoWNYR5FQnN+VoOlkCTn5J8zxMI\nZbAGJIay3BQxwFd9+S4XPRQIg7iKDGnYrCGktubZAlpoDGabuLlThlSxLb07Xuf8\nnllWcu9v1bnweoOK+kd7Bz4j8MK/pPYuLfYy6NIFBrASriGBDoL+FJJM6yr2mtVt\nwCqMPQ5I0LIjGVVhtxULmX1iu0E8as1dTJ9rgQigStAXHhDDOjX+O/3iil6oNVuW\nISQcwqlPhU8Gr35HcertYBm0RRweyadWHA6mpU/wabIL99q3hcuy9VZtrXHi2d6u\nixofP6gW3EUTEztn\n=iS7P\n-----END PGP SIGNATURE-----",
        "payload": "tree 5c049fc8e47549747b30b7c0e001ea1fd1ab0a6a\nparent 0b4d290bf5b0a4d156c523431bf89aaa9ffe92e5\nauthor Fabian Jahr <fjahr@protonmail.com> 1608499634 +0100\ncommitter Fabian Jahr <fjahr@protonmail.com> 1608577024 +0100\n\ncrypto: Add MuHash3072 implementation\n\nCo-authored-by: Pieter Wuille <pieter.wuille@gmail.com>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/adc708c98dbf03b1735edc91f813a36580781a95",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/adc708c98dbf03b1735edc91f813a36580781a95",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/adc708c98dbf03b1735edc91f813a36580781a95/comments",
    "author": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0b4d290bf5b0a4d156c523431bf89aaa9ffe92e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b4d290bf5b0a4d156c523431bf89aaa9ffe92e5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0b4d290bf5b0a4d156c523431bf89aaa9ffe92e5"
      }
    ],
    "stats": {
      "total": 131,
      "additions": 131,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ca44b1b88e7de340f78d1ed0a76788680895923b",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adc708c98dbf03b1735edc91f813a36580781a95/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adc708c98dbf03b1735edc91f813a36580781a95/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=adc708c98dbf03b1735edc91f813a36580781a95",
        "patch": "@@ -406,6 +406,8 @@ crypto_libbitcoin_crypto_base_a_SOURCES = \\\n   crypto/hmac_sha512.h \\\n   crypto/poly1305.h \\\n   crypto/poly1305.cpp \\\n+  crypto/muhash.h \\\n+  crypto/muhash.cpp \\\n   crypto/ripemd160.cpp \\\n   crypto/ripemd160.h \\\n   crypto/sha1.cpp \\"
      },
      {
        "sha": "fbd14f93252b79cd764e67ba7ba761b901872119",
        "filename": "src/crypto/muhash.cpp",
        "status": "modified",
        "additions": 61,
        "deletions": 0,
        "changes": 61,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adc708c98dbf03b1735edc91f813a36580781a95/src/crypto/muhash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adc708c98dbf03b1735edc91f813a36580781a95/src/crypto/muhash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/muhash.cpp?ref=adc708c98dbf03b1735edc91f813a36580781a95",
        "patch": "@@ -275,3 +275,64 @@ void Num3072::Divide(const Num3072& a)\n     this->Multiply(inv);\n     if (this->IsOverflow()) this->FullReduce();\n }\n+\n+Num3072 MuHash3072::ToNum3072(Span<const unsigned char> in) {\n+    Num3072 out{};\n+    uint256 hashed_in = (CHashWriter(SER_DISK, 0) << in).GetSHA256();\n+    unsigned char tmp[BYTE_SIZE];\n+    ChaCha20(hashed_in.data(), hashed_in.size()).Keystream(tmp, BYTE_SIZE);\n+    for (int i = 0; i < LIMBS; ++i) {\n+        if (sizeof(limb_t) == 4) {\n+            out.limbs[i] = ReadLE32(tmp + 4 * i);\n+        } else if (sizeof(limb_t) == 8) {\n+            out.limbs[i] = ReadLE64(tmp + 8 * i);\n+        }\n+    }\n+    return out;\n+}\n+\n+MuHash3072::MuHash3072(Span<const unsigned char> in) noexcept\n+{\n+    m_numerator = ToNum3072(in);\n+}\n+\n+void MuHash3072::Finalize(uint256& out) noexcept\n+{\n+    m_numerator.Divide(m_denominator);\n+    m_denominator.SetToOne();  // Needed to keep the MuHash object valid\n+\n+    unsigned char data[384];\n+    for (int i = 0; i < LIMBS; ++i) {\n+        if (sizeof(limb_t) == 4) {\n+            WriteLE32(data + i * 4, m_numerator.limbs[i]);\n+        } else if (sizeof(limb_t) == 8) {\n+            WriteLE64(data + i * 8, m_numerator.limbs[i]);\n+        }\n+    }\n+\n+    out = (CHashWriter(SER_DISK, 0) << data).GetSHA256();\n+}\n+\n+MuHash3072& MuHash3072::operator*=(const MuHash3072& mul) noexcept\n+{\n+    m_numerator.Multiply(mul.m_numerator);\n+    m_denominator.Multiply(mul.m_denominator);\n+    return *this;\n+}\n+\n+MuHash3072& MuHash3072::operator/=(const MuHash3072& div) noexcept\n+{\n+    m_numerator.Multiply(div.m_denominator);\n+    m_denominator.Multiply(div.m_numerator);\n+    return *this;\n+}\n+\n+MuHash3072& MuHash3072::Insert(Span<const unsigned char> in) noexcept {\n+    m_numerator.Multiply(ToNum3072(in));\n+    return *this;\n+}\n+\n+MuHash3072& MuHash3072::Remove(Span<const unsigned char> in) noexcept {\n+    m_numerator.Divide(ToNum3072(in));\n+    return *this;\n+}"
      },
      {
        "sha": "0c710007c48768a2b0b2d401ca72fff566fa358f",
        "filename": "src/crypto/muhash.h",
        "status": "modified",
        "additions": 68,
        "deletions": 0,
        "changes": 68,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adc708c98dbf03b1735edc91f813a36580781a95/src/crypto/muhash.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adc708c98dbf03b1735edc91f813a36580781a95/src/crypto/muhash.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/muhash.h?ref=adc708c98dbf03b1735edc91f813a36580781a95",
        "patch": "@@ -59,4 +59,72 @@ class Num3072\n     }\n };\n \n+/** A class representing MuHash sets\n+ *\n+ * MuHash is a hashing algorithm that supports adding set elements in any\n+ * order but also deleting in any order. As a result, it can maintain a\n+ * running sum for a set of data as a whole, and add/remove when data\n+ * is added to or removed from it. A downside of MuHash is that computing\n+ * an inverse is relatively expensive. This is solved by representing\n+ * the running value as a fraction, and multiplying added elements into\n+ * the numerator and removed elements into the denominator. Only when the\n+ * final hash is desired, a single modular inverse and multiplication is\n+ * needed to combine the two. The combination is also run on serialization\n+ * to allow for space-efficient storage on disk.\n+ *\n+ * As the update operations are also associative, H(a)+H(b)+H(c)+H(d) can\n+ * in fact be computed as (H(a)+H(b)) + (H(c)+H(d)). This implies that\n+ * all of this is perfectly parallellizable: each thread can process an\n+ * arbitrary subset of the update operations, allowing them to be\n+ * efficiently combined later.\n+ *\n+ * Muhash does not support checking if an element is already part of the\n+ * set. That is why this class does not enforce the use of a set as the\n+ * data it represents because there is no efficient way to do so.\n+ * It is possible to add elements more than once and also to remove\n+ * elements that have not been added before. However, this implementation\n+ * is intended to represent a set of elements.\n+ *\n+ * See also https://cseweb.ucsd.edu/~mihir/papers/inchash.pdf and\n+ * https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014337.html.\n+ */\n+class MuHash3072\n+{\n+private:\n+    static constexpr size_t BYTE_SIZE = 384;\n+\n+    Num3072 m_numerator;\n+    Num3072 m_denominator;\n+\n+    Num3072 ToNum3072(Span<const unsigned char> in);\n+\n+public:\n+    /* The empty set. */\n+    MuHash3072() noexcept {};\n+\n+    /* A singleton with variable sized data in it. */\n+    explicit MuHash3072(Span<const unsigned char> in) noexcept;\n+\n+    /* Insert a single piece of data into the set. */\n+    MuHash3072& Insert(Span<const unsigned char> in) noexcept;\n+\n+    /* Remove a single piece of data from the set. */\n+    MuHash3072& Remove(Span<const unsigned char> in) noexcept;\n+\n+    /* Multiply (resulting in a hash for the union of the sets) */\n+    MuHash3072& operator*=(const MuHash3072& mul) noexcept;\n+\n+    /* Divide (resulting in a hash for the difference of the sets) */\n+    MuHash3072& operator/=(const MuHash3072& div) noexcept;\n+\n+    /* Finalize into a 32-byte hash. Does not change this object's value. */\n+    void Finalize(uint256& out) noexcept;\n+\n+    SERIALIZE_METHODS(MuHash3072, obj)\n+    {\n+        READWRITE(obj.m_numerator);\n+        READWRITE(obj.m_denominator);\n+    }\n+};\n+\n #endif // BITCOIN_CRYPTO_MUHASH_H"
      }
    ]
  },
  {
    "sha": "7b1242229d1fcc9277238a3aefb3431061c82bfa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YjEyNDIyMjlkMWZjYzkyNzcyMzhhM2FlZmIzNDMxMDYxYzgyYmZh",
    "commit": {
      "author": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-12-20T21:25:29Z"
      },
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-12-21T18:57:28Z"
      },
      "message": "test: Add MuHash3072 unit tests\n\nCo-authored-by: Pieter Wuille <pieter.wuille@gmail.com>\nCo-authored-by: Anthony Towns <aj@erisian.com.au>",
      "tree": {
        "sha": "0fd34856072208fe6bd44f19704b40bad5d40798",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0fd34856072208fe6bd44f19704b40bad5d40798"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7b1242229d1fcc9277238a3aefb3431061c82bfa",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAl/g8B0VHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jNTyEP+wTtvvv+YrfQVwEiz44EgX1toRH0\nO+TR/k5tQK7uRfwR3cMlYHh0lz5tqXJlosSocEP4iq8owACeaWq9X1cfWfGNoyTC\nWlFytizXJ+7MDQOAg7ypiIiNoYlHov4LE332GkD6Wd/thU7n7etZTjmJ7vwazEQO\nRC2fz74roo9HK0asIMziJMGVUE9IZklLmwjHheEQiV8RGmkZsWxacdMSuOZA1NhF\niIT4Xyv/owpy12JMUGUfs3IpGhAynMwPSzu3eaADa0/ze3jZlfJI+l15FSr7ekx7\nftwHM3TZpA/FfiNJfH//GVob37VrtJMfzsJFZ95+LT0Ge5sWEMND9G81On0CH2do\n6/QE2BgZeBE4L0ZRFjYF3ddpx5F+yC5muJ7q4tVIbXePMxXgAgADPK3W9cLFYwBu\nqyxiu9lgnvlduPFTviWvq0cl1LNr8hgBFUBxa3oD94tcxgl5PK4vghO57dG/6JC3\nO3EP5mPnhpCTougkgoTKaaP0uH7mGuTNKHDJQxfIDwjUdNAY4zmizRqcTY+zroNT\n4jISR3/B9sIHuzcEPwvFjjHk3U4AYaXtxZjQCowR10V1pcQNdXzCRraVEf0l3Dji\njms8Kp527WAiyyLVhNOu+OZhepzJZfJHHWExpWkCSIbgw0KzaSmC6i7JZXvJYurD\nzDdn3M4ShsQllF3V\n=hNUE\n-----END PGP SIGNATURE-----",
        "payload": "tree 0fd34856072208fe6bd44f19704b40bad5d40798\nparent adc708c98dbf03b1735edc91f813a36580781a95\nauthor Fabian Jahr <fjahr@protonmail.com> 1608499529 +0100\ncommitter Fabian Jahr <fjahr@protonmail.com> 1608577048 +0100\n\ntest: Add MuHash3072 unit tests\n\nCo-authored-by: Pieter Wuille <pieter.wuille@gmail.com>\nCo-authored-by: Anthony Towns <aj@erisian.com.au>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b1242229d1fcc9277238a3aefb3431061c82bfa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7b1242229d1fcc9277238a3aefb3431061c82bfa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b1242229d1fcc9277238a3aefb3431061c82bfa/comments",
    "author": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "adc708c98dbf03b1735edc91f813a36580781a95",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/adc708c98dbf03b1735edc91f813a36580781a95",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/adc708c98dbf03b1735edc91f813a36580781a95"
      }
    ],
    "stats": {
      "total": 90,
      "additions": 90,
      "deletions": 0
    },
    "files": [
      {
        "sha": "7358b246b63c55b8b30fdabe1ac0d6ffb3956e10",
        "filename": "src/test/crypto_tests.cpp",
        "status": "modified",
        "additions": 90,
        "deletions": 0,
        "changes": 90,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7b1242229d1fcc9277238a3aefb3431061c82bfa/src/test/crypto_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7b1242229d1fcc9277238a3aefb3431061c82bfa/src/test/crypto_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/crypto_tests.cpp?ref=7b1242229d1fcc9277238a3aefb3431061c82bfa",
        "patch": "@@ -14,7 +14,9 @@\n #include <crypto/sha256.h>\n #include <crypto/sha3.h>\n #include <crypto/sha512.h>\n+#include <crypto/muhash.h>\n #include <random.h>\n+#include <streams.h>\n #include <test/util/setup_common.h>\n #include <util/strencodings.h>\n \n@@ -857,4 +859,92 @@ BOOST_AUTO_TEST_CASE(sha3_256_tests)\n     TestSHA3_256(\"72c57c359e10684d0517e46653a02d18d29eff803eb009e4d5eb9e95add9ad1a4ac1f38a70296f3a369a16985ca3c957de2084cdc9bdd8994eb59b8815e0debad4ec1f001feac089820db8becdaf896aaf95721e8674e5d476b43bd2b873a7d135cd685f545b438210f9319e4dcd55986c85303c1ddf18dc746fe63a409df0a998ed376eb683e16c09e6e9018504152b3e7628ef350659fb716e058a5263a18823d2f2f6ee6a8091945a48ae1c5cb1694cf2c1fe76ef9177953afe8899cfa2b7fe0603bfa3180937dadfb66fbbdd119bbf8063338aa4a699075a3bfdbae8db7e5211d0917e9665a702fc9b0a0a901d08bea97654162d82a9f05622b060b634244779c33427eb7a29353a5f48b07cbefa72f3622ac5900bef77b71d6b314296f304c8426f451f32049b1f6af156a9dab702e8907d3cd72bb2c50493f4d593e731b285b70c803b74825b3524cda3205a8897106615260ac93c01c5ec14f5b11127783989d1824527e99e04f6a340e827b559f24db9292fcdd354838f9339a5fa1d7f6b2087f04835828b13463dd40927866f16ae33ed501ec0e6c4e63948768c5aeea3e4f6754985954bea7d61088c44430204ef491b74a64bde1358cecb2cad28ee6a3de5b752ff6a051104d88478653339457ac45ba44cbb65f54d1969d047cda746931d5e6a8b48e211416aefd5729f3d60b56b54e7f85aa2f42de3cb69419240c24e67139a11790a709edef2ac52cf35dd0a08af45926ebe9761f498ff83bfe263d6897ee97943a4b982fe3404ef0b4a45e06113c60340e0664f14799bf59cb4b3934b465fabefd87155905ee5309ba41e9e402973311831ea600b16437f71df39ee77130490c4d0227e5d1757fdc66af3ae6b9953053ed9aafca0160209858a7d4dd38fe10e0cb153672d08633ed6c54977aa0a6e67f9ff2f8c9d22dd7b21de08192960fd0e0da68d77c8d810db11dcaa61c725cd4092cbff76c8e1debd8d0361bb3f2e607911d45716f53067bdc0d89dd4889177765166a424e9fc0cb711201099dda213355e6639ac7eb86eca2ae0ab38b7f674f37ef8a6fcca1a6f52f55d9e1dcd631d2c3c82bba129172feb991d5af51afecd9d61a88b6832e4107480e392aed61a8644f551665ebff6b20953b635737a4f895e429fddcfe801f606fbda74b3bf6f5767d0fac14907fcfd0aa1d4c11b9e91b01d68052399b51a29f1ae6acd965109977c14a555cbcbd21ad8cb9f8853506d4bc21c01e62d61d7b21be1b923be54914e6b0a7ca84dd11f1159193e1184568a6134a6bbadf5b4df986edcf2019390ae841cfaa44435e28ce877d3dae4177992fa5d4e5c005876dbe3d1e63bec7dcc0942762b48b1ecc6c1a918409a8a72812a1e245c0c67be6e729c2b49bc6ee4d24a8f63e78e75db45655c26a9a78aff36fcd67117f26b8f654dca664b9f0e30681874cb749e1a692720078856286c2560b0292cc837933423147569350955c9571bf8941ba128fd339cb4268f46b94bc6ee203eb7026813706ea51c4f24c91866fc23a724bf2501327e6ae89c29f8db315dc28d2c7c719514036367e018f4835f63fdecd71f9bdced7132b6c4f8b13c69a517026fcd3622d67cb632320d5e7308f78f4b7cea11f6291b137851dc6cd6366f2785c71c3f237f81a7658b2a8d512b61e0ad5a4710b7b124151689fcb2116063fbff7e9115fed7b93de834970b838e49f8f8ba5f1f874c354078b5810a55ae289a56da563f1da6cd80a3757d6073fa55e016e45ac6cec1f69d871c92fd0ae9670c74249045e6b464787f9504128736309fed205f8df4d90e332908581298d9c75a3fa36ab0c3c9272e62de53ab290c803d67b696fd615c260a47bffad16746f18ba1a10a061bacbea9369693b3c042eec36bed289d7d12e52bca8aa1c2dff88ca7816498d25626d0f1e106ebb0b4a12138e00f3df5b1c2f49d98b1756e69b641b7c6353d99dbff050f4d76842c6cf1c2a4b062fc8e6336fa689b7c9d5c6b4ab8c15a5c20e514ff070a602d85ae52fa7810c22f8eeffd34a095b93342144f7a98d024216b3d68ed7bea047517bfcd83ec83febd1ba0e5858e2bdc1d8b1f7b0f89e90ccc432a3f930cb8209462e64556c5054c56ca2a85f16b32eb83a10459d13516faa4d23302b7607b9bd38dab2239ac9e9440c314433fdfb3ceadab4b4f87415ed6f240e017221f3b5f7ac196cdf54957bec42fe6893994b46de3d27dc7fb58ca88feb5b9e79cf20053d12530ac524337b22a3629bea52f40b06d3e2128f32060f9105847daed81d35f20e2002817434659baff64494c5b5c7f9216bfda38412a0f70511159dc73bb6bae1f8eaa0ef08d99bcb31f94f6be12c29c83df45926430b366c99fca3270c15fc4056398fdf3135b7779e3066a006961d1ac0ad1c83179ce39e87a96b722ec23aabc065badf3e188347a360772ca6a447abac7e6a44f0d4632d52926332e44a0a86bff5ce699fd063bdda3ffd4c41b53ded49fecec67f40599b934e16e3fd1bc063ad7026f8d71bfd4cbaf56599586774723194b692036f1b6bb242e2ffb9c600b5215b412764599476ce475c9e5b396fbcebd6be323dcf4d0048077400aac7500db41dc95fc7f7edbe7c9c2ec5ea89943fe13b42217eef530bbd023671509e12dfce4e1c1c82955d965e6a68aa66f6967dba48feda572db1f099d9a6dc4bc8edade852b5e824a06890dc48a6a6510ecaf8cf7620d757290e3166d431abecc624fa9ac2234d2eb783308ead45544910c633a94964b2ef5fbc409cb8835ac4147d384e12e0a5e13951f7de0ee13eafcb0ca0c04946d7804040c0a3cd088352424b097adb7aad1ca4495952f3e6c0158c02d2bcec33bfda69301434a84d9027ce02c0b9725dad118\", \"d894b86261436362e64241e61f6b3e6589daf64dc641f60570c4c0bf3b1f2ca3\");\n }\n \n+static MuHash3072 FromInt(unsigned char i) {\n+    unsigned char tmp[32] = {i, 0};\n+    return MuHash3072(tmp);\n+}\n+\n+BOOST_AUTO_TEST_CASE(muhash_tests)\n+{\n+    uint256 out;\n+\n+    for (int iter = 0; iter < 10; ++iter) {\n+        uint256 res;\n+        int table[4];\n+        for (int i = 0; i < 4; ++i) {\n+            table[i] = g_insecure_rand_ctx.randbits(3);\n+        }\n+        for (int order = 0; order < 4; ++order) {\n+            MuHash3072 acc;\n+            for (int i = 0; i < 4; ++i) {\n+                int t = table[i ^ order];\n+                if (t & 4) {\n+                    acc /= FromInt(t & 3);\n+                } else {\n+                    acc *= FromInt(t & 3);\n+                }\n+            }\n+            acc.Finalize(out);\n+            if (order == 0) {\n+                res = out;\n+            } else {\n+                BOOST_CHECK(res == out);\n+            }\n+        }\n+\n+        MuHash3072 x = FromInt(g_insecure_rand_ctx.randbits(4)); // x=X\n+        MuHash3072 y = FromInt(g_insecure_rand_ctx.randbits(4)); // x=X, y=Y\n+        MuHash3072 z; // x=X, y=Y, z=1\n+        z *= x; // x=X, y=Y, z=X\n+        z *= y; // x=X, y=Y, z=X*Y\n+        y *= x; // x=X, y=Y*X, z=X*Y\n+        z /= y; // x=X, y=Y*X, z=1\n+        z.Finalize(out);\n+\n+        uint256 out2;\n+        MuHash3072 a;\n+        a.Finalize(out2);\n+\n+        BOOST_CHECK_EQUAL(out, out2);\n+    }\n+\n+    MuHash3072 acc = FromInt(0);\n+    acc *= FromInt(1);\n+    acc /= FromInt(2);\n+    acc.Finalize(out);\n+    BOOST_CHECK_EQUAL(out, uint256S(\"10d312b100cbd32ada024a6646e40d3482fcff103668d2625f10002a607d5863\"));\n+\n+    MuHash3072 acc2 = FromInt(0);\n+    unsigned char tmp[32] = {1, 0};\n+    acc2.Insert(tmp);\n+    unsigned char tmp2[32] = {2, 0};\n+    acc2.Remove(tmp2);\n+    acc2.Finalize(out);\n+    BOOST_CHECK_EQUAL(out, uint256S(\"10d312b100cbd32ada024a6646e40d3482fcff103668d2625f10002a607d5863\"));\n+\n+    // Test MuHash3072 serialization\n+    MuHash3072 serchk = FromInt(1); serchk *= FromInt(2);\n+    std::string ser_exp = \"1fa093295ea30a6a3acdc7b3f770fa538eff537528e990e2910e40bbcfd7f6696b1256901929094694b56316de342f593303dd12ac43e06dce1be1ff8301c845beb15468fff0ef002dbf80c29f26e6452bccc91b5cb9437ad410d2a67ea847887fa3c6a6553309946880fe20db2c73fe0641adbd4e86edfee0d9f8cd0ee1230898873dc13ed8ddcaf045c80faa082774279007a2253f8922ee3ef361d378a6af3ddaf180b190ac97e556888c36b3d1fb1c85aab9ccd46e3deaeb7b7cf5db067a7e9ff86b658cf3acd6662bbcce37232daa753c48b794356c020090c831a8304416e2aa7ad633c0ddb2f11be1be316a81be7f7e472071c042cb68faef549c221ebff209273638b741aba5a81675c45a5fa92fea4ca821d7a324cb1e1a2ccd3b76c4228ec8066dad2a5df6e1bd0de45c7dd5de8070bdb46db6c554cf9aefc9b7b2bbf9f75b1864d9f95005314593905c0109b71f703d49944ae94477b51dac10a816bb6d1c700bafabc8bd86fac8df24be519a2f2836b16392e18036cb13e48c5cn+    CDataStream ss_chk(SER_DISK, PROTOCOL_VERSION);\n+    ss_chk << serchk;\n+    BOOST_CHECK_EQUAL(ser_exp, HexStr(ss_chk.str()));\n+\n+    // Test MuHash3072 deserialization\n+    MuHash3072 deserchk;\n+    ss_chk >> deserchk;\n+    uint256 out3;\n+    serchk.Finalize(out);\n+    deserchk.Finalize(out3);\n+    BOOST_CHECK_EQUAL(HexStr(out), HexStr(out3));\n+\n+    // Test MuHash3072 overflow, meaning the internal data is larger than the modulus.\n+    CDataStream ss_max(ParseHex(\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffn+    MuHash3072 overflowchk;\n+    ss_max >> overflowchk;\n+\n+    uint256 out4;\n+    overflowchk.Finalize(out4);\n+    BOOST_CHECK_EQUAL(HexStr(out4), \"3a31e6903aff0de9f62f9a9f7f8b861de76ce2cda09822b90014319ae5dc2271\");\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "c1225273857f9fa2e2276396e3f8b3ea48306df3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMTIyNTI3Mzg1N2Y5ZmEyZTIyNzYzOTZlM2Y4YjNlYTQ4MzA2ZGYz",
    "commit": {
      "author": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2019-11-08T17:15:11Z"
      },
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-12-21T18:57:33Z"
      },
      "message": "bench: Add Muhash benchmarks\n\nCo-authored-by: Pieter Wuille <pieter.wuille@gmail.com>",
      "tree": {
        "sha": "dd7e7d3cc0ae2b9d984023979783cdc5706eaf9f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dd7e7d3cc0ae2b9d984023979783cdc5706eaf9f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c1225273857f9fa2e2276396e3f8b3ea48306df3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAl/g8B0VHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jNjSkP/2J3l1L9BcaKIttwaTvdmqKoHZvP\neDkbG9wMeKKlnXefbIsaf5p1ZBR34YGGnc99yoTulfJBH+vBtcgFvF1FnzY/17fa\n0n8zSjSWvYn/3EWU1zZBkRsfyy/NBT+TJPV951ZwdzuePc+60Ti6hR6pL2XDK7dO\nXEi3P0FjObK7uAvXeQ8OzAkkRTK3p/5xBbWOEPC35iluF7yOfSGf8VRuEq89b9Yr\n1wiPK62TRNWJa1NJfatOR5P13EUP/9oLDZgO8bdth+CUa8IDpRfFCZB0wsUh2ctM\nVVqt6jDt1HIPJ00B/fJmqNtBRWWc90U/CudPrFEgCyiNMDYKyuUnh7r3carETpEH\nf/FqTDwJ/BlbDI3K4jWiN4Sok4OH6eVRae8qNUZO5B/q1lNuDJG+eGnfiWxEs9Rq\nTZfMD9XoY0zGvjJIZha2p61593PU5ucSrk89gSZQRPltO0GGippgeO9OEfo2In+d\n0b7FQIkwHV//31IXpjV3QCDS6l4r6OD997JRkXKCjElvVGND6YFhvae1ExPfdFMO\nXXWcags57kBNxkczTyQxYx9ScFgj7JdVxW1nXj+N0NM1HeebljtlZnR/vMQpsDgh\nbA6adbJATbitI1zEitlWwAXHrLObv6NOr3JDkBhOE4cBwnwY28Rgm+GnG7zcXkBA\n8tUEG80Q+wGX6S5I\n=xUey\n-----END PGP SIGNATURE-----",
        "payload": "tree dd7e7d3cc0ae2b9d984023979783cdc5706eaf9f\nparent 7b1242229d1fcc9277238a3aefb3431061c82bfa\nauthor Fabian Jahr <fjahr@protonmail.com> 1573233311 +0000\ncommitter Fabian Jahr <fjahr@protonmail.com> 1608577053 +0100\n\nbench: Add Muhash benchmarks\n\nCo-authored-by: Pieter Wuille <pieter.wuille@gmail.com>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1225273857f9fa2e2276396e3f8b3ea48306df3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c1225273857f9fa2e2276396e3f8b3ea48306df3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1225273857f9fa2e2276396e3f8b3ea48306df3/comments",
    "author": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7b1242229d1fcc9277238a3aefb3431061c82bfa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b1242229d1fcc9277238a3aefb3431061c82bfa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7b1242229d1fcc9277238a3aefb3431061c82bfa"
      }
    ],
    "stats": {
      "total": 54,
      "additions": 54,
      "deletions": 0
    },
    "files": [
      {
        "sha": "30fe11be6b3032a2ff7eec3eaa4fb6e43621a952",
        "filename": "src/bench/crypto_hash.cpp",
        "status": "modified",
        "additions": 54,
        "deletions": 0,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1225273857f9fa2e2276396e3f8b3ea48306df3/src/bench/crypto_hash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1225273857f9fa2e2276396e3f8b3ea48306df3/src/bench/crypto_hash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/crypto_hash.cpp?ref=c1225273857f9fa2e2276396e3f8b3ea48306df3",
        "patch": "@@ -4,6 +4,7 @@\n \n \n #include <bench/bench.h>\n+#include <crypto/muhash.h>\n #include <crypto/ripemd160.h>\n #include <crypto/sha1.h>\n #include <crypto/sha256.h>\n@@ -105,6 +106,54 @@ static void FastRandom_1bit(benchmark::Bench& bench)\n     });\n }\n \n+static void MuHash(benchmark::Bench& bench)\n+{\n+    MuHash3072 acc;\n+    unsigned char key[32] = {0};\n+    int i = 0;\n+    bench.run([&] {\n+        key[0] = ++i;\n+        acc *= MuHash3072(key);\n+    });\n+}\n+\n+static void MuHashMul(benchmark::Bench& bench)\n+{\n+    MuHash3072 acc;\n+    FastRandomContext rng(true);\n+    MuHash3072 muhash{rng.randbytes(32)};\n+\n+    bench.run([&] {\n+        acc *= muhash;\n+    });\n+}\n+\n+static void MuHashDiv(benchmark::Bench& bench)\n+{\n+    MuHash3072 acc;\n+    FastRandomContext rng(true);\n+    MuHash3072 muhash{rng.randbytes(32)};\n+\n+    for (size_t i = 0; i < bench.epochIterations(); ++i) {\n+        acc *= muhash;\n+    }\n+\n+    bench.run([&] {\n+        acc /= muhash;\n+    });\n+}\n+\n+static void MuHashPrecompute(benchmark::Bench& bench)\n+{\n+    MuHash3072 acc;\n+    FastRandomContext rng(true);\n+    std::vector<unsigned char> key{rng.randbytes(32)};\n+\n+    bench.run([&] {\n+        MuHash3072{key};\n+    });\n+}\n+\n BENCHMARK(RIPEMD160);\n BENCHMARK(SHA1);\n BENCHMARK(SHA256);\n@@ -116,3 +165,8 @@ BENCHMARK(SipHash_32b);\n BENCHMARK(SHA256D64_1024);\n BENCHMARK(FastRandom_32bit);\n BENCHMARK(FastRandom_1bit);\n+\n+BENCHMARK(MuHash);\n+BENCHMARK(MuHashMul);\n+BENCHMARK(MuHashDiv);\n+BENCHMARK(MuHashPrecompute);"
      }
    ]
  },
  {
    "sha": "b111410914041b72961536c3e4037eba103a8085",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMTExNDEwOTE0MDQxYjcyOTYxNTM2YzNlNDAzN2ViYTEwM2E4MDg1",
    "commit": {
      "author": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-07-01T14:13:01Z"
      },
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-12-21T18:57:33Z"
      },
      "message": "test: Add MuHash3072 fuzz test",
      "tree": {
        "sha": "a594eb7ffc6ca5f879ad5b2f09873ca9db4425b1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a594eb7ffc6ca5f879ad5b2f09873ca9db4425b1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b111410914041b72961536c3e4037eba103a8085",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAl/g8B0VHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jNOtgP/ipFf1j03Jevpe0Bhm6NvgrszsHm\ngkZ+O2MsVnLeBnrYwpdQNqMS/4v8HCqkGkoc/p/HKFJOPIwpf7pAsz67ARXo6vmM\nOiRJD5MSe1+0qPq/GzuR2kSGxf3s1Z1ssDmgGf3Nub2w8Ouci63LHDFOtot1U2Fe\naR+Di2DNuj7sAh5duY8VwSuBdgGQCJV8AybK1AUvgBBBDTDmhg9RzGibmbtPVS9J\nTd89x54UeOSQih4CrykKtPiII386s4wmnWuVzTTMdLpXfBhdmMLJ1hFOCNH4IbEQ\nJGWFNvuT7qkoQN64OcTYCeWRbL6FiLlLo53pyh4QB1K0Kn//VJWWVbOMT47y2jPn\nSOEQ3K7/MF1yNv2Ii1obkZbmtB9khkTfcwpqdFdDpqm5BXY98vSLClAiKtEgRnoJ\ngRAM2ctaCzBiYVaVMSS7sB/7d/7X0eXTj1piZnNQUEy93OgGKLlZac9gEMkwnzQX\nLME0o2IVhDKlH/TFfov8cMVoFBOw8KQJ8wnqeEPdT7Jx9wFgNcCr8N1E7/dSkb15\nb8Gak+oEZgrrHgh4qyGWoFTfyZEnmz4dn3cWBUm4GrpCuG3ETDSnNXhsIKCBLTzl\nnBwqns1ae+U13VRcaVmDcvi2VmnyZSZ70q/7KEzNBw1itETyzYbGMvCFjonPikD7\nkAI6YP7UnkhJBjFY\n=N94n\n-----END PGP SIGNATURE-----",
        "payload": "tree a594eb7ffc6ca5f879ad5b2f09873ca9db4425b1\nparent c1225273857f9fa2e2276396e3f8b3ea48306df3\nauthor Fabian Jahr <fjahr@protonmail.com> 1593612781 +0200\ncommitter Fabian Jahr <fjahr@protonmail.com> 1608577053 +0100\n\ntest: Add MuHash3072 fuzz test\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b111410914041b72961536c3e4037eba103a8085",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b111410914041b72961536c3e4037eba103a8085",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b111410914041b72961536c3e4037eba103a8085/comments",
    "author": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c1225273857f9fa2e2276396e3f8b3ea48306df3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1225273857f9fa2e2276396e3f8b3ea48306df3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c1225273857f9fa2e2276396e3f8b3ea48306df3"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 15,
      "deletions": 1
    },
    "files": [
      {
        "sha": "9668b84e7b1950adabdba34983f2dcf8d26afe31",
        "filename": "src/test/fuzz/crypto.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 1,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b111410914041b72961536c3e4037eba103a8085/src/test/fuzz/crypto.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b111410914041b72961536c3e4037eba103a8085/src/test/fuzz/crypto.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/crypto.cpp?ref=b111410914041b72961536c3e4037eba103a8085",
        "patch": "@@ -4,6 +4,7 @@\n \n #include <crypto/hmac_sha256.h>\n #include <crypto/hmac_sha512.h>\n+#include <crypto/muhash.h>\n #include <crypto/ripemd160.h>\n #include <crypto/sha1.h>\n #include <crypto/sha256.h>\n@@ -35,6 +36,7 @@ FUZZ_TARGET(crypto)\n     CSHA512 sha512;\n     SHA3_256 sha3;\n     CSipHasher sip_hasher{fuzzed_data_provider.ConsumeIntegral<uint64_t>(), fuzzed_data_provider.ConsumeIntegral<uint64_t>()};\n+    MuHash3072 muhash;\n \n     while (fuzzed_data_provider.ConsumeBool()) {\n         switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 2)) {\n@@ -60,6 +62,12 @@ FUZZ_TARGET(crypto)\n             (void)Hash(data);\n             (void)Hash160(data);\n             (void)sha512.Size();\n+\n+            if (fuzzed_data_provider.ConsumeBool()) {\n+                muhash *= MuHash3072(data);\n+            } else {\n+                muhash /= MuHash3072(data);\n+            }\n             break;\n         }\n         case 1: {\n@@ -70,10 +78,11 @@ FUZZ_TARGET(crypto)\n             (void)sha256.Reset();\n             (void)sha3.Reset();\n             (void)sha512.Reset();\n+            muhash = MuHash3072();\n             break;\n         }\n         case 2: {\n-            switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 9)) {\n+            switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 10)) {\n             case 0: {\n                 data.resize(CHash160::OUTPUT_SIZE);\n                 hash160.Finalize(data);\n@@ -124,6 +133,11 @@ FUZZ_TARGET(crypto)\n                 sha3.Finalize(data);\n                 break;\n             }\n+            case 10: {\n+                uint256 out;\n+                muhash.Finalize(out);\n+                break;\n+            }\n             }\n             break;\n         }"
      }
    ]
  },
  {
    "sha": "01297fb3ca57e4b8cbc5a89fc7c6367de33b0bc6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMTI5N2ZiM2NhNTdlNGI4Y2JjNWE4OWZjN2M2MzY3ZGUzM2IwYmM2",
    "commit": {
      "author": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-11-24T00:35:37Z"
      },
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-12-22T00:48:30Z"
      },
      "message": "fuzz: Add MuHash consistency fuzz test",
      "tree": {
        "sha": "4f7fb344a9d67587598db2f72e74f2225bd9a6f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4f7fb344a9d67587598db2f72e74f2225bd9a6f1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/01297fb3ca57e4b8cbc5a89fc7c6367de33b0bc6",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAl/hQmEVHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jNNgYP/jeGyfZP5EUTBP3i0PO56mALxkxi\nFHtY/miaSdOJVi2GihKR/Lw7Q+iogUH8blf2aDFL9/gi6VJY9yL+LHsR80QiWRk1\no4NAc3+LUDpFmpzd52W67Qbst8UaEqDUjiRcXsUgh6DkLrP/iTGdLGw5OhyI+QSE\nMywOwCKGyyAzPx7sAj4sGL6NDPSbouj1mVJYo6qA//X/qv+m0m88Psf961Nr/u3C\nbcxcOXW9AfLA3q8WTZwQ6Tq2CxbV517weFHOKOoraOU30KSpbY+tUpcQ1yg17M9R\ny/gx3+fRJGfegykVsBl+/ppNLi63CvE3z43OYy/Q0Gx87vjxjZ95J92jTJPRgUN1\nMQM9dA6jXjctQIT7Z+DBI2IAMaHfvsqEhFs8ADvqATR/+q3SS5izdBvMMpnR9w1s\nCbZnHaLXClmlmvwfcOjozsBxRHNfdxl9S/rQ7kHGr04bXVJ/yInC6sokyt0i4zDu\nWn+tZ2V4xZCs7C3+nSvsqcijcGGWIZXFcRLQbd4m+lQ65HgWaU/yA+fcNyrgECjr\nBHiktC+aoXXHBIdx86YbEKbusBzM48c13vjbMcUpqjcSmfM3vIXJdC0YXhLjk1D8\nPFh/4FH+bZkFTEQNNj0pX9wquuTRhpT70kiPD2aYQR91aE1M7emsMAMzfDJvGB/G\nreoOKwL0qIsFScc/\n=qFfA\n-----END PGP SIGNATURE-----",
        "payload": "tree 4f7fb344a9d67587598db2f72e74f2225bd9a6f1\nparent b111410914041b72961536c3e4037eba103a8085\nauthor Fabian Jahr <fjahr@protonmail.com> 1606178137 +0100\ncommitter Fabian Jahr <fjahr@protonmail.com> 1608598110 +0100\n\nfuzz: Add MuHash consistency fuzz test\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01297fb3ca57e4b8cbc5a89fc7c6367de33b0bc6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/01297fb3ca57e4b8cbc5a89fc7c6367de33b0bc6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01297fb3ca57e4b8cbc5a89fc7c6367de33b0bc6/comments",
    "author": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b111410914041b72961536c3e4037eba103a8085",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b111410914041b72961536c3e4037eba103a8085",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b111410914041b72961536c3e4037eba103a8085"
      }
    ],
    "stats": {
      "total": 54,
      "additions": 54,
      "deletions": 0
    },
    "files": [
      {
        "sha": "0c86deff12033033cde5070e5a6e667fad29613e",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/01297fb3ca57e4b8cbc5a89fc7c6367de33b0bc6/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/01297fb3ca57e4b8cbc5a89fc7c6367de33b0bc6/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=01297fb3ca57e4b8cbc5a89fc7c6367de33b0bc6",
        "patch": "@@ -229,6 +229,7 @@ test_fuzz_fuzz_SOURCES = \\\n  test/fuzz/locale.cpp \\\n  test/fuzz/merkleblock.cpp \\\n  test/fuzz/message.cpp \\\n+ test/fuzz/muhash.cpp \\\n  test/fuzz/multiplication_overflow.cpp \\\n  test/fuzz/net.cpp \\\n  test/fuzz/net_permissions.cpp \\"
      },
      {
        "sha": "87359c9d392df52d6421f19dccfb40206dbbb7f3",
        "filename": "src/test/fuzz/muhash.cpp",
        "status": "added",
        "additions": 53,
        "deletions": 0,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/01297fb3ca57e4b8cbc5a89fc7c6367de33b0bc6/src/test/fuzz/muhash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/01297fb3ca57e4b8cbc5a89fc7c6367de33b0bc6/src/test/fuzz/muhash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/muhash.cpp?ref=01297fb3ca57e4b8cbc5a89fc7c6367de33b0bc6",
        "patch": "@@ -0,0 +1,53 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <vector>\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    std::vector<uint8_t> data = ConsumeRandomLengthByteVector(fuzzed_data_provider);\n+    std::vector<uint8_t> data2 = ConsumeRandomLengthByteVector(fuzzed_data_provider);\n+    if (data.empty()) {\n+        data.resize(fuzzed_data_provider.ConsumeIntegralInRange<size_t>(1, 4096), fuzzed_data_provider.ConsumeIntegral<uint8_t>());\n+    }\n+    if (data2.empty()) {\n+        data2.resize(fuzzed_data_provider.ConsumeIntegralInRange<size_t>(1, 4096), fuzzed_data_provider.ConsumeIntegral<uint8_t>());\n+    }\n+\n+    data = ConsumeRandomLengthByteVector(fuzzed_data_provider);\n+    data2 = ConsumeRandomLengthByteVector(fuzzed_data_provider);\n+\n+    MuHash3072 muhash;\n+\n+    // Test that MuHash result is consistent independent of order of operations\n+    muhash.Insert(data);\n+    muhash.Insert(data2);\n+\n+    uint256 out;\n+    muhash.Finalize(out);\n+\n+    muhash = MuHash3072();\n+    muhash.Insert(data2);\n+    muhash.Insert(data);\n+\n+    uint256 out2;\n+    muhash.Finalize(out2);\n+\n+    assert(out == out2);\n+\n+    // Test that removing all added elements brings the object back to it's initial state\n+    muhash /= muhash;\n+    muhash.Finalize(out);\n+\n+    MuHash3072 muhash2;\n+    muhash2.Finalize(out2);\n+\n+    assert(out == out2);\n+}"
      }
    ]
  },
  {
    "sha": "9815332d5158d69a94abeaf465a2c07bd8e43359",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ODE1MzMyZDUxNThkNjlhOTRhYmVhZjQ2NWEyYzA3YmQ4ZTQzMzU5",
    "commit": {
      "author": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-12-17T22:25:30Z"
      },
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-12-22T00:48:34Z"
      },
      "message": "test: Change MuHash Python implementation to match cpp version again",
      "tree": {
        "sha": "129d161a4e5081f7a1a2e90da6912c5d1135b184",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/129d161a4e5081f7a1a2e90da6912c5d1135b184"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9815332d5158d69a94abeaf465a2c07bd8e43359",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAl/hQmIVHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jNt5kQAJMb3BRaXGevm8K9RMK04TRq14A5\nw8JpuKTUO7/G0DSPQ56KDV0A0dJr8EV/Xsx1LN0B+tlwToKRnY3yHgyFEF8OykqT\njoEOA9TOAzX6s/4gM5MUBNpyBXEvuvD+obIgfG2QZSEdaM0wLC/ApfILgYSUBIjH\nkH2zvuvqv18EydczRFsrn5MEXgIqhVD41Rj1x9vio9+Q3O9hdO4QEZb1BxhvZDVS\nHbU5R7yueSXp3U3OzdUEZxTQdQH75tvgdKTncGw3ZWyXNkqEVnWmc1d0Rv590fWA\nrLIp6ovcgnNrsn2h/aU1isjl/WrVxnj4xPUkrGmZTrDv2ulyKgdKvDnCW1BMtu18\nJTP9lU1GPD9eZ7qa+sHJVxgJQu5a6vk4UugEVk/jqhKtRrz9Cjut0ThMA7XQhkox\n07sC3j/7VRbNCY+4PIJWffTvUM5ejPaWdcP9x4jnnPz8cm7z1G8vk5Mf0MFZZVRK\nhWqfocEyk7itx3l8M2uKrVVhlTiMyL0uQDD+6kVxZZDJzJp3uJj264Z1rApKfz6A\nGqy18zbHxv7gXQjjzR7sUHhlvzQfeGe1yCY1glsdW5h+9edVaTYoWezRAlgBGPaL\nz2WFfnF/QfpVAygVEClSbclQ0zQOoibMHHa2PLz1RCkL9MOQTTAmxbRTokhUIvat\nBYVgPdxLCvIlMrXC\n=S1Nr\n-----END PGP SIGNATURE-----",
        "payload": "tree 129d161a4e5081f7a1a2e90da6912c5d1135b184\nparent 01297fb3ca57e4b8cbc5a89fc7c6367de33b0bc6\nauthor Fabian Jahr <fjahr@protonmail.com> 1608243930 +0100\ncommitter Fabian Jahr <fjahr@protonmail.com> 1608598114 +0100\n\ntest: Change MuHash Python implementation to match cpp version again\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9815332d5158d69a94abeaf465a2c07bd8e43359",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9815332d5158d69a94abeaf465a2c07bd8e43359",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9815332d5158d69a94abeaf465a2c07bd8e43359/comments",
    "author": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "01297fb3ca57e4b8cbc5a89fc7c6367de33b0bc6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01297fb3ca57e4b8cbc5a89fc7c6367de33b0bc6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/01297fb3ca57e4b8cbc5a89fc7c6367de33b0bc6"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 8,
      "deletions": 6
    },
    "files": [
      {
        "sha": "183548f71fff4621aedc2ba9414340c779cb8acb",
        "filename": "test/functional/test_framework/muhash.py",
        "status": "modified",
        "additions": 8,
        "deletions": 6,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9815332d5158d69a94abeaf465a2c07bd8e43359/test/functional/test_framework/muhash.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9815332d5158d69a94abeaf465a2c07bd8e43359/test/functional/test_framework/muhash.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/muhash.py?ref=9815332d5158d69a94abeaf465a2c07bd8e43359",
        "patch": "@@ -78,11 +78,13 @@ def __init__(self):\n \n     def insert(self, data):\n         \"\"\"Insert a byte array data in the set.\"\"\"\n-        self.numerator = (self.numerator * data_to_num3072(data)) % self.MODULUS\n+        data_hash = hashlib.sha256(data).digest()\n+        self.numerator = (self.numerator * data_to_num3072(data_hash)) % self.MODULUS\n \n     def remove(self, data):\n         \"\"\"Remove a byte array from the set.\"\"\"\n-        self.denominator = (self.denominator * data_to_num3072(data)) % self.MODULUS\n+        data_hash = hashlib.sha256(data).digest()\n+        self.denominator = (self.denominator * data_to_num3072(data_hash)) % self.MODULUS\n \n     def digest(self):\n         \"\"\"Extract the final hash. Does not modify this object.\"\"\"\n@@ -93,12 +95,12 @@ def digest(self):\n class TestFrameworkMuhash(unittest.TestCase):\n     def test_muhash(self):\n         muhash = MuHash3072()\n-        muhash.insert([0]*32)\n-        muhash.insert([1] + [0]*31)\n-        muhash.remove([2] + [0]*31)\n+        muhash.insert(b'\\x00' * 32)\n+        muhash.insert((b'\\x01' + b'\\x00' * 31))\n+        muhash.remove((b'\\x02' + b'\\x00' * 31))\n         finalized = muhash.digest()\n         # This mirrors the result in the C++ MuHash3072 unit test\n-        self.assertEqual(finalized[::-1].hex(), \"a44e16d5e34d259b349af21c06e65d653915d2e208e4e03f389af750dc0bfdc3\")\n+        self.assertEqual(finalized[::-1].hex(), \"10d312b100cbd32ada024a6646e40d3482fcff103668d2625f10002a607d5863\")\n \n     def test_chacha20(self):\n         def chacha_check(key, result):"
      }
    ]
  }
]