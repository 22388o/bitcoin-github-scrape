kallewoof,2018-07-02T11:26:34Z,"@fanquake: This isn't really tests, it's an optimization of `bech32::Encode()`. It does include benchmarks to show that the optimization is useful though.",https://github.com/bitcoin/bitcoin/pull/13586#issuecomment-401773908,401773908,
DrahtBot,2018-07-06T07:26:47Z,"<!--e57a25ab6845829454e8d69fc972939a-->Note to reviewers: This pull request conflicts with the following ones:\n\n* #13249 (Make objects in range declarations immutable by default. Avoid unnecessary copying of objects in range declarations. by practicalswift)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that s",https://github.com/bitcoin/bitcoin/pull/13586#issuecomment-402950897,402950897,
laanwj,2018-07-10T14:13:25Z,I'm a bit scared of this due to the potential security issue introduced. Is it really worth it?,https://github.com/bitcoin/bitcoin/pull/13586#issuecomment-403837349,403837349,
kallewoof,2018-07-11T01:56:42Z,"@laanwj If you mean the unchecked length, I added an assertion in e35eed5.",https://github.com/bitcoin/bitcoin/pull/13586#issuecomment-404019973,404019973,
laanwj,2018-07-11T06:58:59Z,"Sure, yes. Though an assertion is not a replacement for proper error handing, IMO. This still means the whole process crashes if a string that is too long is passed in, and makes the security dependent on assertions being enabled (this might be true in other place too though :( ).",https://github.com/bitcoin/bitcoin/pull/13586#issuecomment-404065590,404065590,
kallewoof,2018-07-11T07:08:54Z,"I am not convinced this is necessary myself anymore, so I am closing. If someone feels like it's a worthy endeavour go nuts.",https://github.com/bitcoin/bitcoin/pull/13586#issuecomment-404067746,404067746,
laanwj,2018-07-11T09:19:36Z,"It still makes sense to add the benchmark, I think!",https://github.com/bitcoin/bitcoin/pull/13586#issuecomment-404102970,404102970,
kallewoof,2018-07-11T09:27:41Z,Dropped the last commit and keeping the bench part only.,https://github.com/bitcoin/bitcoin/pull/13586#issuecomment-404105290,404105290,
laanwj,2018-07-11T09:35:57Z,utACK 189cf35f3e6d2cc9ed08eb23dd0ea36be28b6c11,https://github.com/bitcoin/bitcoin/pull/13586#issuecomment-404107760,404107760,
Empact,2018-07-11T09:36:45Z,tACK 189cf35,https://github.com/bitcoin/bitcoin/pull/13586#issuecomment-404107974,404107974,
Empact,2018-07-02T07:32:13Z,Is there slow-down associated with inlining `hrp_size`? Seems the compiler would optimize that.,https://github.com/bitcoin/bitcoin/pull/13586#discussion_r199405979,199405979,src/bech32.cpp
Empact,2018-07-02T07:34:08Z,How about switching to `++ptr`?,https://github.com/bitcoin/bitcoin/pull/13586#discussion_r199406333,199406333,src/bech32.cpp
kallewoof,2018-07-02T07:42:18Z,Why? (And that would change the behavior to setting the next value rather than the current and iterating.),https://github.com/bitcoin/bitcoin/pull/13586#discussion_r199408031,199408031,src/bech32.cpp
kallewoof,2018-07-02T07:42:49Z,"I'll check. I didn't like repeatedly calling hrp.size() but it may be optimized away, as you say.",https://github.com/bitcoin/bitcoin/pull/13586#discussion_r199408167,199408167,src/bech32.cpp
kallewoof,2018-07-02T07:54:00Z,"I don't think the difference warrants the extra line, so I removed it. Thanks for the nudge. :)",https://github.com/bitcoin/bitcoin/pull/13586#discussion_r199410813,199410813,src/bech32.cpp
Empact,2018-07-02T08:04:37Z,"`++i is preferred over i++.`\nhttps://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md\n\nYou can make the behavior fit by shifting the increment to the later operation in each case.",https://github.com/bitcoin/bitcoin/pull/13586#discussion_r199413396,199413396,src/bech32.cpp
kallewoof,2018-07-02T08:35:53Z,"In this case, I think `$(ptr++)` is a better alternative, as it is more intuitive. Update the value and then move to the next position. Doing `++i` here semantically means the pointer points to the last byte that was set, rather than the next available byte.",https://github.com/bitcoin/bitcoin/pull/13586#discussion_r199421172,199421172,src/bech32.cpp
Empact,2018-07-02T16:58:48Z,"The nice thing about `++ptr`, and the reason it is preferred AFAIK, is that it does not require a copy of the value in order to operate - you always operate using the value directly because it is holding the current value rather than the next one.",https://github.com/bitcoin/bitcoin/pull/13586#discussion_r199561055,199561055,src/bech32.cpp
sipa,2018-07-02T17:34:06Z,"In theory, `++x` is faster than `x++` for the reason you mention. However, in practice, for simple types the optimizer will rearrange things to avoid the copy. Even for more complex types this is often the case.\n\nFurthermore, just because a construct is preferred doesn't mean you need to go out of your way to use over an alternative. If there are good reasons for `x++`, like here, you can use ",https://github.com/bitcoin/bitcoin/pull/13586#discussion_r199569797,199569797,src/bech32.cpp
sipa,2018-07-03T18:42:46Z,"Even faster: `return std::string(ret, ptr);` (no need for the string constructor to find the string length again, you already know).",https://github.com/bitcoin/bitcoin/pull/13586#discussion_r199913610,199913610,src/bech32.cpp
kallewoof,2018-07-04T03:23:23Z,Nice!,https://github.com/bitcoin/bitcoin/pull/13586#discussion_r199999821,199999821,src/bech32.cpp
kallewoof,2018-07-04T03:31:46Z,"Damn.\n```\nBech32Encode, 5, 800000, 3.79493, 9.32891e-07, 9.75863e-07, 9.47069e-07\n```\n",https://github.com/bitcoin/bitcoin/pull/13586#discussion_r200000540,200000540,src/bech32.cpp
kallewoof,2018-07-04T05:54:19Z,"Actually, the vanity generator did not see an increase in speed so this may have been a fluke. It didn't make it worse though so keeping.",https://github.com/bitcoin/bitcoin/pull/13586#discussion_r200014397,200014397,src/bech32.cpp
laanwj,2018-07-10T14:00:49Z,"Too bad it didn't help, but I prefer the avoidance of zero-terminated strings in any case.",https://github.com/bitcoin/bitcoin/pull/13586#discussion_r201353888,201353888,src/bech32.cpp
laanwj,2018-07-10T14:03:57Z,please use `.data()` here (it goes more naturally with `.size()`),https://github.com/bitcoin/bitcoin/pull/13586#discussion_r201355066,201355066,src/bech32.cpp
laanwj,2018-07-10T14:06:32Z,"This **really** needs a length check. Fixing the length at 91 but still copying the entire input (and writing after it) is a buffer overflow waiting to happen, otherwise.",https://github.com/bitcoin/bitcoin/pull/13586#discussion_r201356039,201356039,src/bech32.cpp
gmaxwell,2018-07-10T15:51:43Z,Came here to say the same regarding a length check. It's too brittle otherwise.,https://github.com/bitcoin/bitcoin/pull/13586#discussion_r201397178,201397178,src/bech32.cpp
kallewoof,2018-07-11T01:56:21Z,I knew you'd say that. Added length check and updated benchmark results in OP. Still improvement.,https://github.com/bitcoin/bitcoin/pull/13586#discussion_r201545684,201545684,src/bech32.cpp
