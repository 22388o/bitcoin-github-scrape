fanquake,2018-02-19T06:12:12Z,"@jameshilliard What's the best way to test this? I assume it will only work with very recent Clang/GCC?\n\nDid ./configure with master + https://github.com/bitcoin/bitcoin/pull/12412/commits/20879d31ef9dc7f54cd7f4ea52a417d3b337fba5 on OS X:\n```\nchecking whether C++ compiler accepts -Wstack-protector... yes\nchecking whether C++ compiler accepts -fstack-protector-all... yes\nchecking whethe",https://github.com/bitcoin/bitcoin/pull/12412#issuecomment-366597331,366597331,
jameshilliard,2018-02-19T08:53:31Z,@fanquake This is pretty much untested other than checking that the flags don't get set when not available on OS X. Yeah I think you just need a really new Clang/GCC.,https://github.com/bitcoin/bitcoin/pull/12412#issuecomment-366623988,366623988,
theuni,2018-02-19T17:26:54Z,"I'm not convinced that this is the right thing to do.\n\nNot only does Bitcoin core need to be compiled this way in order to be safe, the libc and c++ stdlib need to be rebuilt as well. I'd hate to take a performance it, and only be providing a false sense of security. For example, this would not be enough to protect our current gitian builds.\n\nSeems like this should really be done at the di",https://github.com/bitcoin/bitcoin/pull/12412#issuecomment-366758159,366758159,
jameshilliard,2018-02-19T17:36:38Z,"> Seems like this should really be done at the distro level.\n\nTricky part is mitigations are needed at both levels and we intentionally avoid letting bitcoin core get included in distro package managers.\n\n> Are any distros forcing these on by default?\n\nSounds like some plan to. Maybe we should just detect if the distro has libs with mitigations and then enable only when they do at comp",https://github.com/bitcoin/bitcoin/pull/12412#issuecomment-366760649,366760649,
eklitzke,2018-03-22T06:56:41Z,"AIUI Spectre style attacks let an attacker read memory already mapped in their own address space (contrast to meltdown, which is much more severe). That's why the focus w/ spectre has been on JS engines: it allows ""sandboxed"" javascript code to read in-process browser data outside of the sandbox.\n\nThat's a serious, but very particular (and unusual) use case. What kind of attack specifically do",https://github.com/bitcoin/bitcoin/pull/12412#issuecomment-375198147,375198147,
sipa,2018-03-22T23:24:04Z,"@eklitzke Indeed, I think that style of attacks only applies to programs that run JIT compiled untrusted code. I can't see anything in Bitcoin Core that would risk acting like that.",https://github.com/bitcoin/bitcoin/pull/12412#issuecomment-375489937,375489937,
fanquake,2018-03-24T04:22:23Z,"Going to close this for now. After discussing with @theuni, this doesn't seem to be how we'd want to tackle this, if we even do overall. Discussing can continue in #12091.",https://github.com/bitcoin/bitcoin/pull/12412#issuecomment-375845710,375845710,
