practicalswift,2020-02-17 22:08:53,"Great first-time contribution! Welcome as a contributor! Hope to see more contributions from you.\n\nThanks for tackling UB issues in the project. The bulk of them should be fixed by now and this is one of the last few UB issues I'm aware of. Don't hesitate to report and/or fix any other UB issues you might find and don't hesitate to ping me if you want your work reviewed.\n\nConcept ACK\n\n",https://github.com/bitcoin/bitcoin/pull/18167#issuecomment-587174040,587174040,
practicalswift,2020-02-18 14:32:54,"ACK be94096dfb0c4862e2314cbae4120d7360b08ef2\n\nVerified that `clang++ -O1` (trunk) generates exactly the same object code before and after the change (as expected) for each of the changed functions:\n\n<details><summary>Click for results</summary>\n\n```\n#include <cstdint>\n#include <cstring>\n\nuint64_t ser_double_to_uint64_old(double x)\n{\n    union { double x; uint64_t y; } tmp;",https://github.com/bitcoin/bitcoin/pull/18167#issuecomment-587488632,587488632,
luke-jr,2020-02-19 03:45:04,"~0\n\nSeems like the better solution here is to stop assuming floats have a specific internal representation? :/",https://github.com/bitcoin/bitcoin/pull/18167#issuecomment-588020656,588020656,
sipa,2020-02-19 03:48:07,"@luke-jr That would indeed be preferable, but it seems that would effectively require implementing a IEEE 754 software encoder/decoder, which is nontrivial.\n\nThis is still an improvement though. memcpy into another type seems indeed to be the modern idiom (we use the same in ReadLE32 and friends, after verifying that compilers indeed optimize through that).\n\nConcept ACK",https://github.com/bitcoin/bitcoin/pull/18167#issuecomment-588021264,588021264,
TheQuantumPhysicist,2020-02-19 13:46:47,"> @luke-jr That would indeed be preferable, but it seems that would effectively require implementing a IEEE 754 software encoder/decoder, which is nontrivial.\n\nThere's a famous library, called [softfloat](http://www.jhauser.us/arithmetic/SoftFloat.html). It does all that. But I think that's unnecessary. IEEE 754 is the same everywhere as repsentation. The differences between different CPUs com",https://github.com/bitcoin/bitcoin/pull/18167#issuecomment-588239070,588239070,
practicalswift,2020-02-19 19:02:51,ACK 0653939ac130eddffe40c53ac418bea305d3bf82,https://github.com/bitcoin/bitcoin/pull/18167#issuecomment-588391180,588391180,
elichai,2020-02-19 20:26:14,ACK 0653939ac130eddffe40c53ac418bea305d3bf82,https://github.com/bitcoin/bitcoin/pull/18167#issuecomment-588432418,588432418,
laanwj,2020-02-26 17:55:59,Code review ACK 0653939ac130eddffe40c53ac418bea305d3bf82,https://github.com/bitcoin/bitcoin/pull/18167#issuecomment-591558413,591558413,
laanwj,2020-02-26 17:59:45,"> That would indeed be preferable, but it seems that would effectively require implementing a IEEE 754 software encoder/decoder, which is nontrivial.\n\nPlease, don't. If you're really willing to pick up a huge amount of work to support obscure platforms, I would prefer to move away from serializing floating point numbers at all.I tried this once but there's quite some usage (luckily, not in the",https://github.com/bitcoin/bitcoin/pull/18167#issuecomment-591560027,591560027,
practicalswift,2020-02-26 18:59:45,"Great to see this merged!\n\n@TheQuantumPhysicist If you want to tackle the few remaining instances of UB you might want to build with `CC=clang CXX=clang++ ./configure --with-sanitizers=undefined && make` and fix any violations you are able to trigger :)",https://github.com/bitcoin/bitcoin/pull/18167#issuecomment-591586911,591586911,
TheQuantumPhysicist,2020-02-26 19:04:51,"@practicalswift Thanks for the support! Actually I use clang sanitizers all the time. Thread sanitizer, undefined behavior sanitizer, memory sanitizer and address sanitizer. You can see them in all my github projects that I wrote myself. But this one here I discovered by coincidence and hence fixed üòâ \n\nAnd I almost never use gcc anymore üòÑ \n\nBtw, if you're interested, there's an issue I ope",https://github.com/bitcoin/bitcoin/pull/18167#issuecomment-591589156,591589156,
MarcoFalke,2020-02-26 19:45:43,"Checked that be94096dfb0c4862e2314cbae4120d7360b08ef2 compiles to the same bitcoind with `-O2` on:\n\n* clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)\nTarget: aarch64-unknown-linux-gnu\n\n* clang version 9.0.0 (Fedora 9.0.0-1.fc31)\nTarget: x86_64-unknown-linux-gnu\n",https://github.com/bitcoin/bitcoin/pull/18167#issuecomment-591609045,591609045,
elichai,2020-02-19 12:26:50,"Maybe add `static_assert(sizeof(tmp) == sizeof(x), ""double and uint64_t assumed to have the same size"");`?\n(this might be redundant with other places but I think it's also helpful as documentation)\n\n(Same for the rest of the functions)",https://github.com/bitcoin/bitcoin/pull/18167#discussion_r381259171,381259171,src/serialize.h
TheQuantumPhysicist,2020-02-19 13:43:08,"I swear I wanted to do that, but then I was afraid people would find it paranoid ü§ê \n\nYou sure I should go for that?",https://github.com/bitcoin/bitcoin/pull/18167#discussion_r381296307,381296307,src/serialize.h
practicalswift,2020-02-19 14:01:07,"Explicitly stating assumptions is good and `static_assert`:s cannot hurt :)  Go for it! :)\n\nFWIW:\n\nhttps://github.com/bitcoin/bitcoin/blob/68e841e0af223a220d1f037e4c5680c1b228aa3e/src/compat/assumptions.h#L43-L46",https://github.com/bitcoin/bitcoin/pull/18167#discussion_r381307550,381307550,src/serialize.h
TheQuantumPhysicist,2020-02-19 17:46:26,Done.,https://github.com/bitcoin/bitcoin/pull/18167#discussion_r381438787,381438787,src/serialize.h
