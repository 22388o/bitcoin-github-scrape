luke-jr,2011-12-03T01:57:15Z,"NACK\n\n9db95d3 introduces a regression: when you send-to-self, and have to pay a fee, instead of the usual send/receive pair in listtransactions, we now get a second 'send' instead of the 'receive'. This 'send' has an amount that appears to be your _change_ from the transaction, shown in negative.\n",https://github.com/bitcoin/bitcoin/pull/669#issuecomment-2998414,2998414,
gavinandresen,2011-12-03T02:21:44Z,Nice catch on the listtransactions regression.\n,https://github.com/bitcoin/bitcoin/pull/669#issuecomment-2998553,2998553,
mikehearn,2011-11-30T23:06:36Z,"Maybe add comments in keystore.h and db.h indicating why you might want to store scripts keyed by hash in your wallet, as this is not obvious at all given the readers basic mental model of how Bitcoin works.\n",https://github.com/bitcoin/bitcoin/pull/669#discussion_r262727,262727,src/db.h
mikehearn,2011-11-30T23:07:43Z,"Same here, consider comments explaining what this is all about and why scripts are keyed by hash. Also, the methods say ""AddCScript"" but actually take an arbitrary byte buffer - which do you want, scripts or any data? Be consistent.\n",https://github.com/bitcoin/bitcoin/pull/669#discussion_r262730,262730,src/keystore.h
mikehearn,2011-11-30T23:07:59Z,"mapData is not a very descriptive name, don't all maps contain data?\n",https://github.com/bitcoin/bitcoin/pull/669#discussion_r262732,262732,src/keystore.h
mikehearn,2011-11-30T23:08:32Z,"Maybe state explicitly in these messages why they are considered non-standard (too large, opcodes present)\n",https://github.com/bitcoin/bitcoin/pull/669#discussion_r262734,262734,src/main.cpp
mikehearn,2011-11-30T23:09:31Z,::AreInputsStandard?\n\nConsider commenting (or using a typedef) that the map key is a tx hash\n,https://github.com/bitcoin/bitcoin/pull/669#discussion_r262740,262740,src/main.cpp
mikehearn,2011-11-30T23:11:04Z,"This is a fairly complex expression, comment what txPrev.vout[vin[i].prevout.n] refers to here (I know it's obvious if you think about it but it's easier to read....)\n",https://github.com/bitcoin/bitcoin/pull/669#discussion_r262746,262746,src/main.cpp
mikehearn,2011-11-30T23:11:16Z,"return error(""..."")? same for other locations in this function?\n",https://github.com/bitcoin/bitcoin/pull/669#discussion_r262748,262748,src/main.cpp
mikehearn,2011-11-30T23:14:38Z,"What does the magic 1,1,1 mean, maybe this should be a global constant?\n",https://github.com/bitcoin/bitcoin/pull/669#discussion_r262757,262757,src/main.cpp
mikehearn,2011-11-30T23:17:02Z,"Would it be worth allowing the default time to be adjusted using a message signed by you, embedded in a block coinbase?\n\nAlternatively, calculate it dynamically based on the frequency of the coinbase markers?\n",https://github.com/bitcoin/bitcoin/pull/669#discussion_r262763,262763,src/main.cpp
mikehearn,2011-11-30T23:18:42Z,"That's rather verbose. Why not just have some kind of code prefix like ""FM"" and then 16 feature bits, in case you want to do this again in future?\n",https://github.com/bitcoin/bitcoin/pull/669#discussion_r262770,262770,src/main.cpp
mikehearn,2011-11-30T23:20:42Z,This sort of table is often done with a macro to avoid the possibility of typos.\n,https://github.com/bitcoin/bitcoin/pull/669#discussion_r262777,262777,src/script.cpp
mikehearn,2011-11-30T23:21:30Z,Why forbid them?\n,https://github.com/bitcoin/bitcoin/pull/669#discussion_r262780,262780,src/script.cpp
mikehearn,2011-11-30T23:22:54Z,"These are actually types of scriptPubKeys, not transactions\n",https://github.com/bitcoin/bitcoin/pull/669#discussion_r262782,262782,src/script.cpp
mikehearn,2011-11-30T23:27:56Z,this might be clearer using integer indexs\n,https://github.com/bitcoin/bitcoin/pull/669#discussion_r262816,262816,src/script.cpp
mikehearn,2011-11-30T23:35:18Z,Do you need to reset the mock time afterwards? Don't recall how this works.\n,https://github.com/bitcoin/bitcoin/pull/669#discussion_r262841,262841,src/test/script_op_eval_tests.cpp
mikehearn,2011-11-30T23:37:13Z,That's a bit confusing. Isn't there a simpler way to phrase this check?\n,https://github.com/bitcoin/bitcoin/pull/669#discussion_r262850,262850,src/wallet.cpp
gavinandresen,2011-12-01T03:31:17Z,I hate naming things... must be my Australian roots.  I'll call it Bruce.\n,https://github.com/bitcoin/bitcoin/pull/669#discussion_r263278,263278,src/keystore.h
gavinandresen,2011-12-01T03:33:47Z,"That (and several of your other line comments here) is SatoshiCode, just moved around.  But you're right, this is a good opportunity to make it easier to read....\n",https://github.com/bitcoin/bitcoin/pull/669#discussion_r263279,263279,src/main.cpp
gavinandresen,2011-12-01T03:34:58Z,"Darn good question.  More SatoshiCode (in this case, I think just the indentation level changed).\n",https://github.com/bitcoin/bitcoin/pull/669#discussion_r263281,263281,src/main.cpp
gavinandresen,2011-12-01T03:37:41Z,"Luke-Jr was big on doing something like that. I don't think the extra code complication is worth it; this is the Simplest Possible Thing That Will Work.  Keeping track of frequency, or a signed message, means storing the message somewhere, or storing the frequency somewhere (or recomputing it in LoadBlockChain and recomputing it whenever there's a new block or a block chain reorg, etc etc etc).\n",https://github.com/bitcoin/bitcoin/pull/669#discussion_r263283,263283,src/main.cpp
gavinandresen,2011-12-01T03:40:41Z,"Again, Simplest Possible Thing that will work.\n\nThe release after OP_EVAL has majority mining support this code will be removed-- I assume the big mining pools aren't going to remove support for it once they add support for it.  The next time with have an OP_EVAL-like change, we'll lobby miners to put some other string in their coinbases....\n",https://github.com/bitcoin/bitcoin/pull/669#discussion_r263289,263289,src/main.cpp
gavinandresen,2011-12-01T04:03:59Z,Because they don't make sense inside OP_EVAL'ed code.\n\nExample:\nscriptPubKey: DUP HASH160 ...hash of serialized script... EQUALVERIFY EVAL\n\nRedeemed in a transaction that has:\nscriptSig:  <sig> <pubkey> serialized(stuff... CODESEPARATOR CHECKSIG)\n\nSo: CHECKSIG takes the part of the scriptPubKey from the last CODESEPARATOR to the end of the scriptPubKey and replaces the scriptSig with that.,https://github.com/bitcoin/bitcoin/pull/669#discussion_r263311,263311,src/script.cpp
gavinandresen,2011-12-01T04:06:07Z,"Naming again....  GetScriptPubKeyTypeName ?    Is there a better term for ""part of a transaction that specifies the conditions necessary to redeem"" ?\n",https://github.com/bitcoin/bitcoin/pull/669#discussion_r263314,263314,src/script.cpp
mikehearn,2011-12-01T11:17:54Z,GetOutputType?\n,https://github.com/bitcoin/bitcoin/pull/669#discussion_r263697,263697,src/script.cpp
mikehearn,2011-12-01T11:18:12Z,Makes sense. Best to put the explanation in a comment rather than a code review thread though.\n,https://github.com/bitcoin/bitcoin/pull/669#discussion_r263699,263699,src/script.cpp
mikehearn,2011-12-01T11:19:23Z,"Yup, sorry, I realize it's not yours. Just might as well fix up minor things like this whilst there is attention on a particular part of the code.\n",https://github.com/bitcoin/bitcoin/pull/669#discussion_r263701,263701,src/main.cpp
gavinandresen,2011-12-01T16:57:25Z,The test fixture resets mock time between tests.  Although the mock time doesn't matter any more-- a previous refactoring added Yet Another argument to VerifyScript that controls whether it interprets OP_EVAL as a no-op or not.  I'll fix the test case.\n,https://github.com/bitcoin/bitcoin/pull/669#discussion_r264336,264336,src/test/script_op_eval_tests.cpp
