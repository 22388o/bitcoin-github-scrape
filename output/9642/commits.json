[
  {
    "sha": "e552742168a099d56eee1ff73a75db0c41519718",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNTUyNzQyMTY4YTA5OWQ1NmVlZTFmZjczYTc1ZGIwYzQxNTE5NzE4",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-01-23T20:56:53Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-01-23T20:56:53Z"
      },
      "message": "Split MAX_BLOCK_SERIALIZED_SIZE into MAX_BIP141_BLOCK_SIZE and MAX_POSSIBLE_BLOCK_SIZE",
      "tree": {
        "sha": "ffba5b1c36ae7df75c8b880f8e9c543f3400a74f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ffba5b1c36ae7df75c8b880f8e9c543f3400a74f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e552742168a099d56eee1ff73a75db0c41519718",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e552742168a099d56eee1ff73a75db0c41519718",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e552742168a099d56eee1ff73a75db0c41519718",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e552742168a099d56eee1ff73a75db0c41519718/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "71148b8947fe8b4d756822420a7f31c380159425",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71148b8947fe8b4d756822420a7f31c380159425",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/71148b8947fe8b4d756822420a7f31c380159425"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 12,
      "deletions": 10
    },
    "files": [
      {
        "sha": "43eb7f7846db6d92064c753f6453a53f6680e7fb",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e552742168a099d56eee1ff73a75db0c41519718/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e552742168a099d56eee1ff73a75db0c41519718/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=e552742168a099d56eee1ff73a75db0c41519718",
        "patch": "@@ -8,8 +8,10 @@\n \n #include <stdint.h>\n \n-/** The maximum allowed size for a serialized block, in bytes (only for buffer size limits) */\n-static const unsigned int MAX_BLOCK_SERIALIZED_SIZE = 4000000;\n+/** The maximum allowed size for a serialized block under BIP 141 rules, in bytes */\n+static const unsigned int MAX_BIP141_BLOCK_SIZE = 4000000;\n+/** The maximum possible size for a serialized block, in bytes (only for buffer size limits) */\n+static const unsigned int MAX_POSSIBLE_BLOCK_SIZE = 4000000;\n /** The maximum allowed weight for a block, see BIP 141 (network rule) */\n static const unsigned int MAX_BLOCK_WEIGHT = 4000000;\n /** The maximum allowed size for a block excluding witness data, in bytes (network rule) */"
      },
      {
        "sha": "098aa1184dac46bcf0c95bc9f787abea6dc15971",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e552742168a099d56eee1ff73a75db0c41519718/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e552742168a099d56eee1ff73a75db0c41519718/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=e552742168a099d56eee1ff73a75db0c41519718",
        "patch": "@@ -86,7 +86,7 @@ BlockAssembler::BlockAssembler(const CChainParams& _chainparams)\n     bool fWeightSet = false;\n     if (IsArgSet(\"-blockmaxweight\")) {\n         nBlockMaxWeight = GetArg(\"-blockmaxweight\", DEFAULT_BLOCK_MAX_WEIGHT);\n-        nBlockMaxSize = MAX_BLOCK_SERIALIZED_SIZE;\n+        nBlockMaxSize = MAX_POSSIBLE_BLOCK_SIZE;\n         fWeightSet = true;\n     }\n     if (IsArgSet(\"-blockmaxsize\")) {\n@@ -105,10 +105,10 @@ BlockAssembler::BlockAssembler(const CChainParams& _chainparams)\n \n     // Limit weight to between 4K and MAX_BLOCK_WEIGHT-4K for sanity:\n     nBlockMaxWeight = std::max((unsigned int)4000, std::min((unsigned int)(MAX_BLOCK_WEIGHT-4000), nBlockMaxWeight));\n-    // Limit size to between 1K and MAX_BLOCK_SERIALIZED_SIZE-1K for sanity:\n-    nBlockMaxSize = std::max((unsigned int)1000, std::min((unsigned int)(MAX_BLOCK_SERIALIZED_SIZE-1000), nBlockMaxSize));\n+    // Limit size to between 1K and MAX_BIP141_BLOCK_SIZE-1K for sanity:\n+    nBlockMaxSize = std::max((unsigned int)1000, std::min((unsigned int)(MAX_BIP141_BLOCK_SIZE-1000), nBlockMaxSize));\n     // Whether we need to account for byte usage (in addition to weight usage)\n-    fNeedSizeAccounting = (nBlockMaxSize < MAX_BLOCK_SERIALIZED_SIZE-1000);\n+    fNeedSizeAccounting = (nBlockMaxSize < nBlockMaxWeight * 4);\n }\n \n void BlockAssembler::resetBlock()"
      },
      {
        "sha": "03c19f4c8940cd3d46f3ccc62ba51bfee6cfb0b5",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e552742168a099d56eee1ff73a75db0c41519718/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e552742168a099d56eee1ff73a75db0c41519718/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=e552742168a099d56eee1ff73a75db0c41519718",
        "patch": "@@ -2496,7 +2496,7 @@ bool CConnman::OutboundTargetReached(bool historicalBlockServingLimit)\n     {\n         // keep a large enough buffer to at least relay each block once\n         uint64_t timeLeftInCycle = GetMaxOutboundTimeLeftInCycle();\n-        uint64_t buffer = timeLeftInCycle / 600 * MAX_BLOCK_SERIALIZED_SIZE;\n+        uint64_t buffer = timeLeftInCycle / 600 * MAX_POSSIBLE_BLOCK_SIZE;\n         if (buffer >= nMaxOutboundLimit || nMaxOutboundTotalBytesSentInCycle >= nMaxOutboundLimit - buffer)\n             return true;\n     }"
      },
      {
        "sha": "1dd0b30cc295a94166bade26870787a0ec22192a",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e552742168a099d56eee1ff73a75db0c41519718/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e552742168a099d56eee1ff73a75db0c41519718/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=e552742168a099d56eee1ff73a75db0c41519718",
        "patch": "@@ -676,7 +676,7 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n         nSigOpLimit /= WITNESS_SCALE_FACTOR;\n     }\n     result.push_back(Pair(\"sigoplimit\", nSigOpLimit));\n-    result.push_back(Pair(\"sizelimit\", (int64_t)MAX_BLOCK_SERIALIZED_SIZE));\n+    result.push_back(Pair(\"sizelimit\", (int64_t)MAX_BIP141_BLOCK_SIZE));\n     result.push_back(Pair(\"weightlimit\", (int64_t)MAX_BLOCK_WEIGHT));\n     result.push_back(Pair(\"curtime\", pblock->GetBlockTime()));\n     result.push_back(Pair(\"bits\", strprintf(\"%08x\", pblock->nBits)));"
      },
      {
        "sha": "167ba9b7dfb9f8662010959b1390a14b2419f2fc",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e552742168a099d56eee1ff73a75db0c41519718/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e552742168a099d56eee1ff73a75db0c41519718/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=e552742168a099d56eee1ff73a75db0c41519718",
        "patch": "@@ -3815,7 +3815,7 @@ bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskB\n     int nLoaded = 0;\n     try {\n         // This takes over fileIn and calls fclose() on it in the CBufferedFile destructor\n-        CBufferedFile blkdat(fileIn, 2*MAX_BLOCK_SERIALIZED_SIZE, MAX_BLOCK_SERIALIZED_SIZE+8, SER_DISK, CLIENT_VERSION);\n+        CBufferedFile blkdat(fileIn, 2*MAX_POSSIBLE_BLOCK_SIZE, MAX_POSSIBLE_BLOCK_SIZE+8, SER_DISK, CLIENT_VERSION);\n         uint64_t nRewind = blkdat.GetPos();\n         while (!blkdat.eof()) {\n             boost::this_thread::interruption_point();\n@@ -3834,7 +3834,7 @@ bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskB\n                     continue;\n                 // read size\n                 blkdat >> nSize;\n-                if (nSize < 80 || nSize > MAX_BLOCK_SERIALIZED_SIZE)\n+                if (nSize < 80 || nSize > MAX_POSSIBLE_BLOCK_SIZE)\n                     continue;\n             } catch (const std::exception&) {\n                 // no valid block header found; don't complain"
      }
    ]
  },
  {
    "sha": "8befa70e7386f74f074fb8d088f5a64483b37d1c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YmVmYTcwZTczODZmNzRmMDc0ZmI4ZDA4OGY1YTY0NDgzYjM3ZDFj",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-01-23T21:21:13Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-01-23T21:21:13Z"
      },
      "message": "Split MAX_BLOCK_BASE_SIZE into MAX_STRIPPED_BLOCK_SIZE and MAX_STRIPPED_TRANSACTION_SIZE",
      "tree": {
        "sha": "2ce1624b8793631e326d8d6e2ebefba2f1bea580",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2ce1624b8793631e326d8d6e2ebefba2f1bea580"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8befa70e7386f74f074fb8d088f5a64483b37d1c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8befa70e7386f74f074fb8d088f5a64483b37d1c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8befa70e7386f74f074fb8d088f5a64483b37d1c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8befa70e7386f74f074fb8d088f5a64483b37d1c/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e552742168a099d56eee1ff73a75db0c41519718",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e552742168a099d56eee1ff73a75db0c41519718",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e552742168a099d56eee1ff73a75db0c41519718"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 8,
      "deletions": 6
    },
    "files": [
      {
        "sha": "f405cea33fcc5eefcbab2964d58e1897df7d3a62",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8befa70e7386f74f074fb8d088f5a64483b37d1c/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8befa70e7386f74f074fb8d088f5a64483b37d1c/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=8befa70e7386f74f074fb8d088f5a64483b37d1c",
        "patch": "@@ -218,7 +218,7 @@ static void MutateTxAddInput(CMutableTransaction& tx, const std::string& strInpu\n     uint256 txid(uint256S(strTxid));\n \n     static const unsigned int minTxOutSz = 9;\n-    static const unsigned int maxVout = MAX_BLOCK_BASE_SIZE / minTxOutSz;\n+    static const unsigned int maxVout = MAX_STRIPPED_TRANSACTION_SIZE / minTxOutSz;\n \n     // extract and validate vout\n     std::string strVout = vStrInputParts[1];"
      },
      {
        "sha": "fdca77d5573efa6e41cf2f6df844d2ebde53cdef",
        "filename": "src/blockencodings.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8befa70e7386f74f074fb8d088f5a64483b37d1c/src/blockencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8befa70e7386f74f074fb8d088f5a64483b37d1c/src/blockencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockencodings.cpp?ref=8befa70e7386f74f074fb8d088f5a64483b37d1c",
        "patch": "@@ -50,7 +50,7 @@ uint64_t CBlockHeaderAndShortTxIDs::GetShortID(const uint256& txhash) const {\n ReadStatus PartiallyDownloadedBlock::InitData(const CBlockHeaderAndShortTxIDs& cmpctblock, const std::vector<std::pair<uint256, CTransactionRef>>& extra_txn) {\n     if (cmpctblock.header.IsNull() || (cmpctblock.shorttxids.empty() && cmpctblock.prefilledtxn.empty()))\n         return READ_STATUS_INVALID;\n-    if (cmpctblock.shorttxids.size() + cmpctblock.prefilledtxn.size() > MAX_BLOCK_BASE_SIZE / MIN_TRANSACTION_BASE_SIZE)\n+    if (cmpctblock.shorttxids.size() + cmpctblock.prefilledtxn.size() > MAX_STRIPPED_BLOCK_SIZE / MIN_TRANSACTION_BASE_SIZE)\n         return READ_STATUS_INVALID;\n \n     assert(header.IsNull() && txn_available.empty());"
      },
      {
        "sha": "5b561afc530efc5f6d18ad72c22a808049fc917a",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8befa70e7386f74f074fb8d088f5a64483b37d1c/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8befa70e7386f74f074fb8d088f5a64483b37d1c/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=8befa70e7386f74f074fb8d088f5a64483b37d1c",
        "patch": "@@ -15,9 +15,11 @@ static const unsigned int MAX_POSSIBLE_BLOCK_SIZE = 4000000;\n /** The maximum allowed weight for a block, see BIP 141 (network rule) */\n static const unsigned int MAX_BLOCK_WEIGHT = 4000000;\n /** The maximum allowed size for a block excluding witness data, in bytes (network rule) */\n-static const unsigned int MAX_BLOCK_BASE_SIZE = 1000000;\n+static const unsigned int MAX_STRIPPED_BLOCK_SIZE = 1000000;\n /** The maximum allowed number of signature check operations in a block (network rule) */\n static const int64_t MAX_BLOCK_SIGOPS_COST = 80000;\n+/** The maximum allowed size for a transaction excluding witness data, in bytes (network rule) */\n+static const unsigned int MAX_STRIPPED_TRANSACTION_SIZE = 1000000;\n /** Coinbase transaction outputs can only be spent after this number of new blocks (network rule) */\n static const int COINBASE_MATURITY = 100;\n "
      },
      {
        "sha": "8174faffc98b044ed2c54fd465ebf86ddea029a3",
        "filename": "src/merkleblock.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8befa70e7386f74f074fb8d088f5a64483b37d1c/src/merkleblock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8befa70e7386f74f074fb8d088f5a64483b37d1c/src/merkleblock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/merkleblock.cpp?ref=8befa70e7386f74f074fb8d088f5a64483b37d1c",
        "patch": "@@ -155,7 +155,7 @@ uint256 CPartialMerkleTree::ExtractMatches(std::vector<uint256> &vMatch, std::ve\n     if (nTransactions == 0)\n         return uint256();\n     // check for excessively high numbers of transactions\n-    if (nTransactions > MAX_BLOCK_BASE_SIZE / 60) // 60 is the lower bound for the size of a serialized CTransaction\n+    if (nTransactions > MAX_STRIPPED_BLOCK_SIZE / 60) // 60 is the lower bound for the size of a serialized CTransaction\n         return uint256();\n     // there can never be more hashes provided than one for every txid\n     if (vHash.size() > nTransactions)"
      },
      {
        "sha": "b5990f0b8367415d9de88392d71e4028ca9dbdbb",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8befa70e7386f74f074fb8d088f5a64483b37d1c/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8befa70e7386f74f074fb8d088f5a64483b37d1c/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=8befa70e7386f74f074fb8d088f5a64483b37d1c",
        "patch": "@@ -466,7 +466,7 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state, bool fChe\n     if (tx.vout.empty())\n         return state.DoS(10, false, REJECT_INVALID, \"bad-txns-vout-empty\");\n     // Size limits (this doesn't take the witness into account, as that hasn't been checked for malleability)\n-    if (::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) > MAX_BLOCK_BASE_SIZE)\n+    if (::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) > MAX_STRIPPED_TRANSACTION_SIZE)\n         return state.DoS(100, false, REJECT_INVALID, \"bad-txns-oversize\");\n \n     // Check for negative or overflow output values\n@@ -2822,7 +2822,7 @@ bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::P\n     // checks that use witness data may be performed here.\n \n     // Size limits\n-    if (block.vtx.empty() || block.vtx.size() > MAX_BLOCK_BASE_SIZE || ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) > MAX_BLOCK_BASE_SIZE)\n+    if (block.vtx.empty() || block.vtx.size() > MAX_STRIPPED_BLOCK_SIZE || ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) > MAX_STRIPPED_BLOCK_SIZE)\n         return state.DoS(100, false, REJECT_INVALID, \"bad-blk-length\", false, \"size limits failed\");\n \n     // First transaction must be coinbase, the rest must not be"
      }
    ]
  },
  {
    "sha": "caa782cc858f12f773dec6d58439b549080daed5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYWE3ODJjYzg1OGYxMmY3NzNkZWM2ZDU4NDM5YjU0OTA4MGRhZWQ1",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-01-23T21:43:03Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-01-23T21:43:03Z"
      },
      "message": "Implement most of \"Safe block size limit\" logic",
      "tree": {
        "sha": "5abe70729e94fddf0290a44fd10344f32888aa69",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5abe70729e94fddf0290a44fd10344f32888aa69"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/caa782cc858f12f773dec6d58439b549080daed5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/caa782cc858f12f773dec6d58439b549080daed5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/caa782cc858f12f773dec6d58439b549080daed5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/caa782cc858f12f773dec6d58439b549080daed5/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8befa70e7386f74f074fb8d088f5a64483b37d1c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8befa70e7386f74f074fb8d088f5a64483b37d1c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8befa70e7386f74f074fb8d088f5a64483b37d1c"
      }
    ],
    "stats": {
      "total": 66,
      "additions": 60,
      "deletions": 6
    },
    "files": [
      {
        "sha": "09ab55a0e662375818a6c85e84cb26ae524cc745",
        "filename": "src/blockencodings.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/caa782cc858f12f773dec6d58439b549080daed5/src/blockencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/caa782cc858f12f773dec6d58439b549080daed5/src/blockencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockencodings.cpp?ref=caa782cc858f12f773dec6d58439b549080daed5",
        "patch": "@@ -50,7 +50,7 @@ uint64_t CBlockHeaderAndShortTxIDs::GetShortID(const uint256& txhash) const {\n ReadStatus PartiallyDownloadedBlock::InitData(const CBlockHeaderAndShortTxIDs& cmpctblock, const std::vector<std::pair<uint256, CTransactionRef>>& extra_txn) {\n     if (cmpctblock.header.IsNull() || (cmpctblock.shorttxids.empty() && cmpctblock.prefilledtxn.empty()))\n         return READ_STATUS_INVALID;\n-    if (cmpctblock.shorttxids.size() + cmpctblock.prefilledtxn.size() > MAX_STRIPPED_BLOCK_SIZE / MIN_TRANSACTION_BASE_SIZE)\n+    if (cmpctblock.shorttxids.size() + cmpctblock.prefilledtxn.size() > MAX_POSSIBLE_BLOCK_SIZE / MIN_TRANSACTION_BASE_SIZE)\n         return READ_STATUS_INVALID;\n \n     assert(header.IsNull() && txn_available.empty());"
      },
      {
        "sha": "0a58d44b61a165dd2d21f11d940cc14da7114300",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/caa782cc858f12f773dec6d58439b549080daed5/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/caa782cc858f12f773dec6d58439b549080daed5/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=caa782cc858f12f773dec6d58439b549080daed5",
        "patch": "@@ -11,11 +11,11 @@\n /** The maximum allowed size for a serialized block under BIP 141 rules, in bytes */\n static const unsigned int MAX_BIP141_BLOCK_SIZE = 4000000;\n /** The maximum possible size for a serialized block, in bytes (only for buffer size limits) */\n-static const unsigned int MAX_POSSIBLE_BLOCK_SIZE = 4000000;\n+static const unsigned int MAX_POSSIBLE_BLOCK_SIZE = 30921408;\n /** The maximum allowed weight for a block, see BIP 141 (network rule) */\n static const unsigned int MAX_BLOCK_WEIGHT = 4000000;\n /** The maximum allowed size for a block excluding witness data, in bytes (network rule) */\n-static const unsigned int MAX_STRIPPED_BLOCK_SIZE = 1000000;\n+static const unsigned int MAX_BIP141_STRIPPED_BLOCK_SIZE = 1000000;\n /** The maximum allowed number of signature check operations in a block (network rule) */\n static const int64_t MAX_BLOCK_SIGOPS_COST = 80000;\n /** The maximum allowed size for a transaction excluding witness data, in bytes (network rule) */"
      },
      {
        "sha": "18ec8ea5d03ba73da8130bc973bec42911c7d79a",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/caa782cc858f12f773dec6d58439b549080daed5/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/caa782cc858f12f773dec6d58439b549080daed5/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=caa782cc858f12f773dec6d58439b549080daed5",
        "patch": "@@ -17,6 +17,7 @@ enum DeploymentPos\n     DEPLOYMENT_TESTDUMMY,\n     DEPLOYMENT_CSV, // Deployment of BIP68, BIP112, and BIP113.\n     DEPLOYMENT_SEGWIT, // Deployment of BIP141, BIP143, and BIP147.\n+    DEPLOYMENT_BLKSIZE,\n     // NOTE: Also add new deployments to VersionBitsDeploymentInfo in versionbits.cpp\n     MAX_VERSION_BITS_DEPLOYMENTS\n };"
      },
      {
        "sha": "b7aeb95509c464fe2d59ba174cb60b55b6dd18fb",
        "filename": "src/merkleblock.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/caa782cc858f12f773dec6d58439b549080daed5/src/merkleblock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/caa782cc858f12f773dec6d58439b549080daed5/src/merkleblock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/merkleblock.cpp?ref=caa782cc858f12f773dec6d58439b549080daed5",
        "patch": "@@ -155,7 +155,7 @@ uint256 CPartialMerkleTree::ExtractMatches(std::vector<uint256> &vMatch, std::ve\n     if (nTransactions == 0)\n         return uint256();\n     // check for excessively high numbers of transactions\n-    if (nTransactions > MAX_STRIPPED_BLOCK_SIZE / 60) // 60 is the lower bound for the size of a serialized CTransaction\n+    if (nTransactions > MAX_POSSIBLE_BLOCK_SIZE / 60) // 60 is the lower bound for the size of a serialized CTransaction\n         return uint256();\n     // there can never be more hashes provided than one for every txid\n     if (vHash.size() > nTransactions)"
      },
      {
        "sha": "39ff3276645b0f7457b8d35171541f4e15e5df26",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/caa782cc858f12f773dec6d58439b549080daed5/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/caa782cc858f12f773dec6d58439b549080daed5/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=caa782cc858f12f773dec6d58439b549080daed5",
        "patch": "@@ -104,6 +104,7 @@ BlockAssembler::BlockAssembler(const CChainParams& _chainparams)\n     }\n \n     // Limit weight to between 4K and MAX_BLOCK_WEIGHT-4K for sanity:\n+    // FIXME: Remove this before AD 2024 if weight stops being enforced\n     nBlockMaxWeight = std::max((unsigned int)4000, std::min((unsigned int)(MAX_BLOCK_WEIGHT-4000), nBlockMaxWeight));\n     // Limit size to between 1K and MAX_BIP141_BLOCK_SIZE-1K for sanity:\n     nBlockMaxSize = std::max((unsigned int)1000, std::min((unsigned int)(MAX_BIP141_BLOCK_SIZE-1000), nBlockMaxSize));"
      },
      {
        "sha": "e9ad81bc35c23f0d6f8aab06c99868c3c993f028",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 46,
        "deletions": 1,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/caa782cc858f12f773dec6d58439b549080daed5/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/caa782cc858f12f773dec6d58439b549080daed5/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=caa782cc858f12f773dec6d58439b549080daed5",
        "patch": "@@ -1667,6 +1667,39 @@ int32_t ComputeBlockVersion(const CBlockIndex* pindexPrev, const Consensus::Para\n     return nVersion;\n }\n \n+uint32_t GetMaxStrippedBlockSize(const CBlockIndex* pindexPrev, const Consensus::Params& consensusParams, int64_t nMedianTimePast) {\n+    if (VersionBitsState(pindexPrev, consensusParams, Consensus::DEPLOYMENT_BLKSIZE, versionbitscache) != THRESHOLD_ACTIVE) {\n+        return MAX_BIP141_STRIPPED_BLOCK_SIZE;\n+    }\n+\n+    // In case we activate early on regtest.\n+    if (nMedianTimePast < 1483246800) {\n+        return 300000;\n+    }\n+    // The first step is on January 1st 2017.\n+    // After that, one step happens every 2^23 seconds.\n+    int64_t step = (nMedianTimePast - 1483246800) >> 23;\n+    // Don't do more than 107 steps, to stay under 32 MB.\n+    step = std::min<int64_t>(step, 107);\n+    // Every step is a 2^(1/16) factor.\n+    static const uint32_t bases[16] = {\n+        // bases[i] == round(300000 * pow(2.0, i / 16.0))\n+        300000, 313282, 327152, 341637,\n+        356762, 372557, 389052, 406277,\n+        424264, 443048, 462663, 483147,\n+        504538, 526876, 550202, 574562\n+    };\n+    return bases[step & 15] << (step / 16);\n+}\n+\n+uint32_t GetMaxBlockSize(const CBlockIndex* pindexPrev, const Consensus::Params& consensusParams, int64_t nMedianTimePast) {\n+    if (VersionBitsState(pindexPrev, consensusParams, Consensus::DEPLOYMENT_BLKSIZE, versionbitscache) != THRESHOLD_ACTIVE && VersionBitsState(pindexPrev, consensusParams, Consensus::DEPLOYMENT_SEGWIT, versionbitscache) == THRESHOLD_ACTIVE) {\n+        return MAX_BIP141_BLOCK_SIZE;\n+    } else {\n+        return GetMaxStrippedBlockSize(pindexPrev, consensusParams, nMedianTimePast);\n+    }\n+}\n+\n /**\n  * Threshold condition checker that triggers when unknown versionbits are seen on the network.\n  */\n@@ -2822,7 +2855,7 @@ bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::P\n     // checks that use witness data may be performed here.\n \n     // Size limits\n-    if (block.vtx.empty() || block.vtx.size() > MAX_STRIPPED_BLOCK_SIZE || ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) > MAX_STRIPPED_BLOCK_SIZE)\n+    if (block.vtx.empty() || block.vtx.size() > MAX_POSSIBLE_BLOCK_SIZE || ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) > MAX_POSSIBLE_BLOCK_SIZE)\n         return state.DoS(100, false, REJECT_INVALID, \"bad-blk-length\", false, \"size limits failed\");\n \n     // First transaction must be coinbase, the rest must not be\n@@ -2955,6 +2988,12 @@ bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& sta\n bool ContextualCheckBlock(const CBlock& block, CValidationState& state, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev)\n {\n     const int nHeight = pindexPrev == NULL ? 0 : pindexPrev->nHeight + 1;\n+    const int64_t nMedianTimePast = pindexPrev->GetMedianTimePast();\n+\n+    // Size limits\n+    const uint32_t maxStrippedBlockSize = GetMaxStrippedBlockSize(pindexPrev, consensusParams, nMedianTimePast);\n+    if (::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) > maxStrippedBlockSize)\n+        return state.DoS(100, false, REJECT_INVALID, \"bad-blk-length\", false, \"size limits failed\");\n \n     // Start enforcing BIP113 (Median Time Past) using versionbits logic.\n     int nLockTimeFlags = 0;\n@@ -3026,6 +3065,12 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, const Co\n     // large by filling up the coinbase witness, which doesn't change\n     // the block hash, so we couldn't mark the block as permanently\n     // failed).\n+    if (VersionBitsState(pindexPrev, consensusParams, Consensus::DEPLOYMENT_BLKSIZE, versionbitscache) == THRESHOLD_ACTIVE) {\n+        const uint32_t maxBlockSize = GetMaxBlockSize(pindexPrev, consensusParams, nMedianTimePast);\n+        if (::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION) > maxBlockSize) {\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-blk-length\", false, \"size limits failed\");\n+        }\n+    } else\n     if (GetBlockWeight(block) > MAX_BLOCK_WEIGHT) {\n         return state.DoS(100, false, REJECT_INVALID, \"bad-blk-weight\", false, strprintf(\"%s : weight limit failed\", __func__));\n     }"
      },
      {
        "sha": "47e7478fa15e38f09339c01273370b17f99a997c",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/caa782cc858f12f773dec6d58439b549080daed5/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/caa782cc858f12f773dec6d58439b549080daed5/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=caa782cc858f12f773dec6d58439b549080daed5",
        "patch": "@@ -545,6 +545,9 @@ int GetSpendHeight(const CCoinsViewCache& inputs);\n \n extern VersionBitsCache versionbitscache;\n \n+uint32_t GetMaxStrippedBlockSize(const CBlockIndex* pindexPrev, const Consensus::Params&, int64_t nMedianTimePast);\n+uint32_t GetMaxBlockSize(const CBlockIndex* pindexPrev, const Consensus::Params&, int64_t nMedianTimePast);\n+\n /**\n  * Determine what nVersion a new block should use.\n  */"
      },
      {
        "sha": "9c7f30aa2e2f365aed82a118671ed626b9bef6f8",
        "filename": "src/versionbits.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/caa782cc858f12f773dec6d58439b549080daed5/src/versionbits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/caa782cc858f12f773dec6d58439b549080daed5/src/versionbits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.cpp?ref=caa782cc858f12f773dec6d58439b549080daed5",
        "patch": "@@ -18,7 +18,11 @@ const struct BIP9DeploymentInfo VersionBitsDeploymentInfo[Consensus::MAX_VERSION\n     {\n         /*.name =*/ \"segwit\",\n         /*.gbt_force =*/ false,\n-    }\n+    },\n+    {\n+        /*.name =*/ \"blksize\",\n+        /*.gbt_force =*/ true,\n+    },\n };\n \n ThresholdState AbstractThresholdConditionChecker::GetStateFor(const CBlockIndex* pindexPrev, const Consensus::Params& params, ThresholdConditionCache& cache) const"
      }
    ]
  },
  {
    "sha": "76aeb5b45f68cd5c51714a1a1c26572a1f0b9cce",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NmFlYjViNDVmNjhjZDVjNTE3MTRhMWExYzI2NTcyYTFmMGI5Y2Nl",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-01-26T21:02:40Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-01-26T21:02:40Z"
      },
      "message": "Enforce a max block weight of size*2 when bip-blksize activates",
      "tree": {
        "sha": "61715a8da6003a90247a5267d46e766197cdb3dc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/61715a8da6003a90247a5267d46e766197cdb3dc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/76aeb5b45f68cd5c51714a1a1c26572a1f0b9cce",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76aeb5b45f68cd5c51714a1a1c26572a1f0b9cce",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/76aeb5b45f68cd5c51714a1a1c26572a1f0b9cce",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76aeb5b45f68cd5c51714a1a1c26572a1f0b9cce/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "caa782cc858f12f773dec6d58439b549080daed5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/caa782cc858f12f773dec6d58439b549080daed5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/caa782cc858f12f773dec6d58439b549080daed5"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 12,
      "deletions": 7
    },
    "files": [
      {
        "sha": "cbf068564f731a8fcdf3247a882d69296a2257bf",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76aeb5b45f68cd5c51714a1a1c26572a1f0b9cce/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76aeb5b45f68cd5c51714a1a1c26572a1f0b9cce/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=76aeb5b45f68cd5c51714a1a1c26572a1f0b9cce",
        "patch": "@@ -13,7 +13,7 @@ static const unsigned int MAX_BIP141_BLOCK_SIZE = 4000000;\n /** The maximum possible size for a serialized block, in bytes (only for buffer size limits) */\n static const unsigned int MAX_POSSIBLE_BLOCK_SIZE = 30921408;\n /** The maximum allowed weight for a block, see BIP 141 (network rule) */\n-static const unsigned int MAX_BLOCK_WEIGHT = 4000000;\n+static const unsigned int MAX_BIP141_BLOCK_WEIGHT = 4000000;\n /** The maximum allowed size for a block excluding witness data, in bytes (network rule) */\n static const unsigned int MAX_BIP141_STRIPPED_BLOCK_SIZE = 1000000;\n /** The maximum allowed number of signature check operations in a block (network rule) */"
      },
      {
        "sha": "cc769e552b71f74aed9563ed2ca9bd651bb274bf",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76aeb5b45f68cd5c51714a1a1c26572a1f0b9cce/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76aeb5b45f68cd5c51714a1a1c26572a1f0b9cce/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=76aeb5b45f68cd5c51714a1a1c26572a1f0b9cce",
        "patch": "@@ -103,9 +103,9 @@ BlockAssembler::BlockAssembler(const CChainParams& _chainparams)\n         blockMinFeeRate = CFeeRate(DEFAULT_BLOCK_MIN_TX_FEE);\n     }\n \n-    // Limit weight to between 4K and MAX_BLOCK_WEIGHT-4K for sanity:\n-    // FIXME: Remove this before AD 2024 if weight stops being enforced\n-    nBlockMaxWeight = std::max((unsigned int)4000, std::min((unsigned int)(MAX_BLOCK_WEIGHT-4000), nBlockMaxWeight));\n+    // FIXME: Adjust these if DEPLOYMENT_BLKSIZE is active\n+    // Limit weight to between 4K and MAX_BIP141_BLOCK_WEIGHT-4K for sanity:\n+    nBlockMaxWeight = std::max((unsigned int)4000, std::min((unsigned int)(MAX_BIP141_BLOCK_WEIGHT-4000), nBlockMaxWeight));\n     // Limit size to between 1K and MAX_BIP141_BLOCK_SIZE-1K for sanity:\n     nBlockMaxSize = std::max((unsigned int)1000, std::min((unsigned int)(MAX_BIP141_BLOCK_SIZE-1000), nBlockMaxSize));\n     // Whether we need to account for byte usage (in addition to weight usage)"
      },
      {
        "sha": "d5a4d909642f4ecbeed5ac9b1c1d793b29253d51",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76aeb5b45f68cd5c51714a1a1c26572a1f0b9cce/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76aeb5b45f68cd5c51714a1a1c26572a1f0b9cce/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=76aeb5b45f68cd5c51714a1a1c26572a1f0b9cce",
        "patch": "@@ -676,8 +676,9 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n         nSigOpLimit /= WITNESS_SCALE_FACTOR;\n     }\n     result.push_back(Pair(\"sigoplimit\", nSigOpLimit));\n+    // FIXME: Adjust these if DEPLOYMENT_BLKSIZE is active\n     result.push_back(Pair(\"sizelimit\", (int64_t)MAX_BIP141_BLOCK_SIZE));\n-    result.push_back(Pair(\"weightlimit\", (int64_t)MAX_BLOCK_WEIGHT));\n+    result.push_back(Pair(\"weightlimit\", (int64_t)MAX_BIP141_BLOCK_WEIGHT));\n     result.push_back(Pair(\"curtime\", pblock->GetBlockTime()));\n     result.push_back(Pair(\"bits\", strprintf(\"%08x\", pblock->nBits)));\n     result.push_back(Pair(\"height\", (int64_t)(pindexPrev->nHeight+1)));"
      },
      {
        "sha": "4c2a04bdb58653ea35ababeb179c9f61260d0f29",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76aeb5b45f68cd5c51714a1a1c26572a1f0b9cce/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76aeb5b45f68cd5c51714a1a1c26572a1f0b9cce/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=76aeb5b45f68cd5c51714a1a1c26572a1f0b9cce",
        "patch": "@@ -3065,13 +3065,17 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, const Co\n     // large by filling up the coinbase witness, which doesn't change\n     // the block hash, so we couldn't mark the block as permanently\n     // failed).\n+    int64_t nMaxBlockWeight;\n     if (VersionBitsState(pindexPrev, consensusParams, Consensus::DEPLOYMENT_BLKSIZE, versionbitscache) == THRESHOLD_ACTIVE) {\n         const uint32_t maxBlockSize = GetMaxBlockSize(pindexPrev, consensusParams, nMedianTimePast);\n         if (::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION) > maxBlockSize) {\n             return state.DoS(100, false, REJECT_INVALID, \"bad-blk-length\", false, \"size limits failed\");\n         }\n-    } else\n-    if (GetBlockWeight(block) > MAX_BLOCK_WEIGHT) {\n+        nMaxBlockWeight = maxBlockSize * 2;\n+    } else {\n+        nMaxBlockWeight = MAX_BIP141_BLOCK_WEIGHT;\n+    }\n+    if (GetBlockWeight(block) > nMaxBlockWeight) {\n         return state.DoS(100, false, REJECT_INVALID, \"bad-blk-weight\", false, strprintf(\"%s : weight limit failed\", __func__));\n     }\n "
      }
    ]
  },
  {
    "sha": "456836dcfb6edbb038597e103d6f257ab314b1bd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NTY4MzZkY2ZiNmVkYmIwMzg1OTdlMTAzZDZmMjU3YWIzMTRiMWJk",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-01-26T21:23:22Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-01-28T21:16:53Z"
      },
      "message": "For bip-blksize, count scriptSigs as 1 WU per byte",
      "tree": {
        "sha": "a2c35b248ccbd7df3eb7a82eac1f977e1efd7088",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a2c35b248ccbd7df3eb7a82eac1f977e1efd7088"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/456836dcfb6edbb038597e103d6f257ab314b1bd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/456836dcfb6edbb038597e103d6f257ab314b1bd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/456836dcfb6edbb038597e103d6f257ab314b1bd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/456836dcfb6edbb038597e103d6f257ab314b1bd/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "76aeb5b45f68cd5c51714a1a1c26572a1f0b9cce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76aeb5b45f68cd5c51714a1a1c26572a1f0b9cce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/76aeb5b45f68cd5c51714a1a1c26572a1f0b9cce"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 21,
      "deletions": 13
    },
    "files": [
      {
        "sha": "2b6c30687167c4baeb2379a484d20092d6272af6",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/456836dcfb6edbb038597e103d6f257ab314b1bd/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/456836dcfb6edbb038597e103d6f257ab314b1bd/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=456836dcfb6edbb038597e103d6f257ab314b1bd",
        "patch": "@@ -190,7 +190,7 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n     pblocktemplate->vTxFees[0] = -nFees;\n \n     uint64_t nSerializeSize = GetSerializeSize(*pblock, SER_NETWORK, PROTOCOL_VERSION);\n-    LogPrintf(\"CreateNewBlock(): total size: %u block weight: %u txs: %u fees: %ld sigops %d\\n\", nSerializeSize, GetBlockWeight(*pblock), nBlockTx, nFees, nBlockSigOpsCost);\n+    LogPrintf(\"CreateNewBlock(): total size: %u block weight: %u txs: %u fees: %ld sigops %d\\n\", nSerializeSize, GetBlockWeight(*pblock, SERIALIZE_TRANSACTION_NO_WITNESS /* FIXME */), nBlockTx, nFees, nBlockSigOpsCost);\n \n     // Fill in header\n     pblock->hashPrevBlock  = pindexPrev->GetBlockHash();"
      },
      {
        "sha": "6c6cad3869c3f336ba44e52c5f6af41b12dc86d9",
        "filename": "src/primitives/block.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/456836dcfb6edbb038597e103d6f257ab314b1bd/src/primitives/block.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/456836dcfb6edbb038597e103d6f257ab314b1bd/src/primitives/block.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.cpp?ref=456836dcfb6edbb038597e103d6f257ab314b1bd",
        "patch": "@@ -32,11 +32,11 @@ std::string CBlock::ToString() const\n     return s.str();\n }\n \n-int64_t GetBlockWeight(const CBlock& block)\n+int64_t GetBlockWeight(const CBlock& block, int nWitnessVersionFlags)\n {\n     // This implements the weight = (stripped_size * 4) + witness_size formula,\n     // using only serialization with and without witness data. As witness_size\n     // is equal to total_size - stripped_size, this formula is identical to:\n     // weight = (stripped_size * 3) + total_size.\n-    return ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * (WITNESS_SCALE_FACTOR - 1) + ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION);\n+    return ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION | nWitnessVersionFlags) * (WITNESS_SCALE_FACTOR - 1) + ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION);\n }"
      },
      {
        "sha": "286e16bbaac112b0879095e8c9183ebb4105a03f",
        "filename": "src/primitives/block.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/456836dcfb6edbb038597e103d6f257ab314b1bd/src/primitives/block.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/456836dcfb6edbb038597e103d6f257ab314b1bd/src/primitives/block.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.h?ref=456836dcfb6edbb038597e103d6f257ab314b1bd",
        "patch": "@@ -155,7 +155,7 @@ struct CBlockLocator\n     }\n };\n \n-/** Compute the consensus-critical block weight (see BIP 141). */\n-int64_t GetBlockWeight(const CBlock& tx);\n+/** Compute the consensus-critical block weight. */\n+int64_t GetBlockWeight(const CBlock& tx, int nWitnessVersionFlags);\n \n #endif // BITCOIN_PRIMITIVES_BLOCK_H"
      },
      {
        "sha": "c5da89246ee9042129ee13640d84fc17803a399d",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/456836dcfb6edbb038597e103d6f257ab314b1bd/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/456836dcfb6edbb038597e103d6f257ab314b1bd/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=456836dcfb6edbb038597e103d6f257ab314b1bd",
        "patch": "@@ -12,6 +12,7 @@\n #include \"uint256.h\"\n \n static const int SERIALIZE_TRANSACTION_NO_WITNESS = 0x40000000;\n+static const int SERIALIZE_TRANSACTION_NO_SIGS = 0x60000000;  /* includes SERIALIZE_TRANSACTION_NO_WITNESS */\n \n static const int WITNESS_SCALE_FACTOR = 4;\n \n@@ -107,7 +108,13 @@ class CTxIn\n     template <typename Stream, typename Operation>\n     inline void SerializationOp(Stream& s, Operation ser_action) {\n         READWRITE(prevout);\n-        READWRITE(*(CScriptBase*)(&scriptSig));\n+        if ((s.GetVersion() & SERIALIZE_TRANSACTION_NO_SIGS) == SERIALIZE_TRANSACTION_NO_SIGS) {\n+            assert(!ser_action.ForRead());\n+            CScriptBase dummy;\n+            READWRITE(dummy);\n+        } else {\n+            READWRITE(*(CScriptBase*)(&scriptSig));\n+        }\n         READWRITE(nSequence);\n     }\n "
      },
      {
        "sha": "6cc5331e37fffc7c4e9d52c2e6ae2d9ebdbf72bd",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/456836dcfb6edbb038597e103d6f257ab314b1bd/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/456836dcfb6edbb038597e103d6f257ab314b1bd/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=456836dcfb6edbb038597e103d6f257ab314b1bd",
        "patch": "@@ -113,7 +113,7 @@ UniValue blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool tx\n     result.push_back(Pair(\"confirmations\", confirmations));\n     result.push_back(Pair(\"strippedsize\", (int)::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS)));\n     result.push_back(Pair(\"size\", (int)::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION)));\n-    result.push_back(Pair(\"weight\", (int)::GetBlockWeight(block)));\n+    result.push_back(Pair(\"weight\", (int)::GetBlockWeight(block, SERIALIZE_TRANSACTION_NO_WITNESS /* FIXME */)));\n     result.push_back(Pair(\"height\", blockindex->nHeight));\n     result.push_back(Pair(\"version\", block.nVersion));\n     result.push_back(Pair(\"versionHex\", strprintf(\"%08x\", block.nVersion)));"
      },
      {
        "sha": "e8bf23b26f5114412bd04bdff738b2f51b1ff513",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/456836dcfb6edbb038597e103d6f257ab314b1bd/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/456836dcfb6edbb038597e103d6f257ab314b1bd/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=456836dcfb6edbb038597e103d6f257ab314b1bd",
        "patch": "@@ -3065,18 +3065,19 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, const Co\n     // large by filling up the coinbase witness, which doesn't change\n     // the block hash, so we couldn't mark the block as permanently\n     // failed).\n-    int64_t nMaxBlockWeight;\n     if (VersionBitsState(pindexPrev, consensusParams, Consensus::DEPLOYMENT_BLKSIZE, versionbitscache) == THRESHOLD_ACTIVE) {\n         const uint32_t maxBlockSize = GetMaxBlockSize(pindexPrev, consensusParams, nMedianTimePast);\n         if (::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION) > maxBlockSize) {\n             return state.DoS(100, false, REJECT_INVALID, \"bad-blk-length\", false, \"size limits failed\");\n         }\n-        nMaxBlockWeight = maxBlockSize * 2;\n+        const int64_t nMaxBlockWeight = maxBlockSize * 2;\n+        if (GetBlockWeight(block, SERIALIZE_TRANSACTION_NO_SIGS) > nMaxBlockWeight) {\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-blk-weight\", false, strprintf(\"%s : weight limit failed\", __func__));\n+        }\n     } else {\n-        nMaxBlockWeight = MAX_BIP141_BLOCK_WEIGHT;\n-    }\n-    if (GetBlockWeight(block) > nMaxBlockWeight) {\n-        return state.DoS(100, false, REJECT_INVALID, \"bad-blk-weight\", false, strprintf(\"%s : weight limit failed\", __func__));\n+        if (GetBlockWeight(block, SERIALIZE_TRANSACTION_NO_WITNESS) > MAX_BIP141_BLOCK_WEIGHT) {\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-blk-weight\", false, strprintf(\"%s : weight limit failed\", __func__));\n+        }\n     }\n \n     return true;"
      }
    ]
  }
]