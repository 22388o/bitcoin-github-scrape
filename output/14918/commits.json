[
  {
    "sha": "fa0ad4e7ce8f4c19fe58bf06747bf8c62600581c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTBhZDRlN2NlOGY0YzE5ZmU1OGJmMDY3NDdiZjhjNjI2MDA1ODFj",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-12-10T21:56:51Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-11T13:40:10Z"
      },
      "message": "RPCHelpMan: Check default values are given at compile-time",
      "tree": {
        "sha": "5c9ef121d5f875fc9a1cb4c6a648dea756e47810",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5c9ef121d5f875fc9a1cb4c6a648dea756e47810"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa0ad4e7ce8f4c19fe58bf06747bf8c62600581c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJcYXs6AAoJEM4rdWl+aaVIa28MAKCmN08d4Fr8eC1mH+/Bmg5O\nG6TriCnxdaaZqaJGIKC2mtHlYQx4mzsMoKjtB9Zt9hPWTBH9Q4XvD68UUw3MQ7Z7\ngTsvlZGy4KrLEHPk0HIkkj8j6++ciYiH+Rm5csEeh6is0q3ruQrS8oHQrR5g3MCj\n0aP/QOdFkDZLIHNxIv4lc5tJon9GfzcBPqjQHRv5hz4UvgXLspBHdq7AqHQIf1ex\nwp5yVT+7bLD5jpBZJvKPOE/NSf8foUEbjNPE3FKYQArklImkGxDfnvaGVerWkqJz\nLgbezNpe/tmhXAyuYvO8b7aNK9N+ifCCNvInyH+aSYTjZbJHdeJpzpAiY8JwNmd0\n69VoX9nSkhW4oePTOP+v6FsPR4nj2yftgp26YpMqmSv+F9YkXmP3dUrj4tL9oqf2\nKYs9W6Eu3jU6i6oim3A3MZOyP0rvKpJMJ51yZTnL4HQvd8XMixu85/FiTsZl/MbD\n/Su0pVwXfNqmJX6I+jG5QSLKz6Oapq06YfmlcwHlqA==\n=J7BQ\n-----END PGP SIGNATURE-----",
        "payload": "tree 5c9ef121d5f875fc9a1cb4c6a648dea756e47810\nparent ff9e197212eba49a7865430126c8e803b9825aa8\nauthor MarcoFalke <falke.marco@gmail.com> 1544479011 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1549892410 -0500\n\nRPCHelpMan: Check default values are given at compile-time\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa0ad4e7ce8f4c19fe58bf06747bf8c62600581c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa0ad4e7ce8f4c19fe58bf06747bf8c62600581c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa0ad4e7ce8f4c19fe58bf06747bf8c62600581c/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ff9e197212eba49a7865430126c8e803b9825aa8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff9e197212eba49a7865430126c8e803b9825aa8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ff9e197212eba49a7865430126c8e803b9825aa8"
      }
    ],
    "stats": {
      "total": 751,
      "additions": 388,
      "deletions": 363
    },
    "files": [
      {
        "sha": "7fb9ff2eaf03d77e1ce8f6b489b61713ac66d8e1",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 37,
        "changes": 74,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0ad4e7ce8f4c19fe58bf06747bf8c62600581c/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0ad4e7ce8f4c19fe58bf06747bf8c62600581c/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=fa0ad4e7ce8f4c19fe58bf06747bf8c62600581c",
        "patch": "@@ -215,7 +215,7 @@ static UniValue waitfornewblock(const JSONRPCRequest& request)\n                 \"\\nWaits for a specific new block and returns useful info about it.\\n\"\n                 \"\\nReturns the current block on timeout or exit.\\n\",\n                 {\n-                    {\"timeout\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"0\", \"Time in milliseconds to wait for a response. 0 indicates no timeout.\"},\n+                    {\"timeout\", RPCArg::Type::NUM, /* default */ \"0\", \"Time in milliseconds to wait for a response. 0 indicates no timeout.\"},\n                 },\n                 RPCResult{\n             \"{                           (json object)\\n\"\n@@ -256,8 +256,8 @@ static UniValue waitforblock(const JSONRPCRequest& request)\n                 \"\\nWaits for a specific new block and returns useful info about it.\\n\"\n                 \"\\nReturns the current block on timeout or exit.\\n\",\n                 {\n-                    {\"blockhash\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"Block hash to wait for.\"},\n-                    {\"timeout\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"0\", \"Time in milliseconds to wait for a response. 0 indicates no timeout.\"},\n+                    {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"Block hash to wait for.\"},\n+                    {\"timeout\", RPCArg::Type::NUM, /* default */ \"0\", \"Time in milliseconds to wait for a response. 0 indicates no timeout.\"},\n                 },\n                 RPCResult{\n             \"{                           (json object)\\n\"\n@@ -302,8 +302,8 @@ static UniValue waitforblockheight(const JSONRPCRequest& request)\n                 \"of the current tip.\\n\"\n                 \"\\nReturns the current block on timeout or exit.\\n\",\n                 {\n-                    {\"height\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"Block height to wait for.\"},\n-                    {\"timeout\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"0\", \"Time in milliseconds to wait for a response. 0 indicates no timeout.\"},\n+                    {\"height\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Block height to wait for.\"},\n+                    {\"timeout\", RPCArg::Type::NUM, /* default */ \"0\", \"Time in milliseconds to wait for a response. 0 indicates no timeout.\"},\n                 },\n                 RPCResult{\n             \"{                           (json object)\\n\"\n@@ -501,7 +501,7 @@ static UniValue getrawmempool(const JSONRPCRequest& request)\n                 \"\\nReturns all transaction ids in memory pool as a json array of string transaction ids.\\n\"\n                 \"\\nHint: use getmempoolentry to fetch a specific transaction from the mempool.\\n\",\n                 {\n-                    {\"verbose\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"True for a json object, false for array of transaction ids\"},\n+                    {\"verbose\", RPCArg::Type::BOOL, /* default */ \"false\", \"True for a json object, false for array of transaction ids\"},\n                 },\n                 RPCResult{\"for verbose = false\",\n             \"[                     (json array of string)\\n\"\n@@ -535,8 +535,8 @@ static UniValue getmempoolancestors(const JSONRPCRequest& request)\n             RPCHelpMan{\"getmempoolancestors\",\n                 \"\\nIf txid is in the mempool, returns all in-mempool ancestors.\\n\",\n                 {\n-                    {\"txid\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The transaction id (must be in mempool)\"},\n-                    {\"verbose\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"True for a json object, false for array of transaction ids\"},\n+                    {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id (must be in mempool)\"},\n+                    {\"verbose\", RPCArg::Type::BOOL, /* default */ \"false\", \"True for a json object, false for array of transaction ids\"},\n                 },\n                 {\n                     RPCResult{\"for verbose = false\",\n@@ -605,8 +605,8 @@ static UniValue getmempooldescendants(const JSONRPCRequest& request)\n             RPCHelpMan{\"getmempooldescendants\",\n                 \"\\nIf txid is in the mempool, returns all in-mempool descendants.\\n\",\n                 {\n-                    {\"txid\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The transaction id (must be in mempool)\"},\n-                    {\"verbose\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"True for a json object, false for array of transaction ids\"},\n+                    {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id (must be in mempool)\"},\n+                    {\"verbose\", RPCArg::Type::BOOL, /* default */ \"false\", \"True for a json object, false for array of transaction ids\"},\n                 },\n                 {\n                     RPCResult{\"for verbose = false\",\n@@ -675,7 +675,7 @@ static UniValue getmempoolentry(const JSONRPCRequest& request)\n             RPCHelpMan{\"getmempoolentry\",\n                 \"\\nReturns mempool data for given transaction\\n\",\n                 {\n-                    {\"txid\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The transaction id (must be in mempool)\"},\n+                    {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id (must be in mempool)\"},\n                 },\n                 RPCResult{\n             \"{                           (json object)\\n\"\n@@ -711,7 +711,7 @@ static UniValue getblockhash(const JSONRPCRequest& request)\n             RPCHelpMan{\"getblockhash\",\n                 \"\\nReturns hash of block in best-block-chain at height provided.\\n\",\n                 {\n-                    {\"height\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"The height index\"},\n+                    {\"height\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The height index\"},\n                 },\n                 RPCResult{\n             \"\\\"hash\\\"         (string) The block hash\\n\"\n@@ -740,8 +740,8 @@ static UniValue getblockheader(const JSONRPCRequest& request)\n                 \"\\nIf verbose is false, returns a string that is serialized, hex-encoded data for blockheader 'hash'.\\n\"\n                 \"If verbose is true, returns an Object with information about blockheader <hash>.\\n\",\n                 {\n-                    {\"blockhash\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The block hash\"},\n-                    {\"verbose\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"true\", \"true for a json object, false for the hex-encoded data\"},\n+                    {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The block hash\"},\n+                    {\"verbose\", RPCArg::Type::BOOL, /* default */ \"true\", \"true for a json object, false for the hex-encoded data\"},\n                 },\n                 {\n                     RPCResult{\"for verbose = true\",\n@@ -830,8 +830,8 @@ static UniValue getblock(const JSONRPCRequest& request)\n                 \"If verbosity is 1, returns an Object with information about block <hash>.\\n\"\n                 \"If verbosity is 2, returns an Object with information about block <hash> and information about each transaction. \\n\",\n                 {\n-                    {\"blockhash\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The block hash\"},\n-                    {\"verbosity\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"1\", \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\"},\n+                    {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The block hash\"},\n+                    {\"verbosity\", RPCArg::Type::NUM, /* default */ \"1\", \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\"},\n                 },\n                 {\n                     RPCResult{\"for verbosity = 0\",\n@@ -986,7 +986,7 @@ static UniValue pruneblockchain(const JSONRPCRequest& request)\n         throw std::runtime_error(\n             RPCHelpMan{\"pruneblockchain\", \"\",\n                 {\n-                    {\"height\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"The block height to prune up to. May be set to a discrete height, or a unix timestamp\\n\"\n+                    {\"height\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block height to prune up to. May be set to a discrete height, or a unix timestamp\\n\"\n             \"                  to prune blocks whose block time is at least 2 hours older than the provided timestamp.\"},\n                 },\n                 RPCResult{\n@@ -1085,9 +1085,9 @@ UniValue gettxout(const JSONRPCRequest& request)\n             RPCHelpMan{\"gettxout\",\n                 \"\\nReturns details about an unspent transaction output.\\n\",\n                 {\n-                    {\"txid\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The transaction id\"},\n-                    {\"n\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"vout number\"},\n-                    {\"include_mempool\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"true\", \"Whether to include the mempool. Note that an unspent output that is spent in the mempool won't appear.\"},\n+                    {\"txid\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The transaction id\"},\n+                    {\"n\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"vout number\"},\n+                    {\"include_mempool\", RPCArg::Type::BOOL, /* default */ \"true\", \"Whether to include the mempool. Note that an unspent output that is spent in the mempool won't appear.\"},\n                 },\n                 RPCResult{\n             \"{\\n\"\n@@ -1166,8 +1166,8 @@ static UniValue verifychain(const JSONRPCRequest& request)\n             RPCHelpMan{\"verifychain\",\n                 \"\\nVerifies blockchain database.\\n\",\n                 {\n-                    {\"checklevel\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ strprintf(\"%d, range=0-4\", nCheckLevel), \"How thorough the block verification is.\"},\n-                    {\"nblocks\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ strprintf(\"%d, 0=all\", nCheckDepth), \"The number of blocks to check.\"},\n+                    {\"checklevel\", RPCArg::Type::NUM, /* default */ strprintf(\"%d, range=0-4\", nCheckLevel), \"How thorough the block verification is.\"},\n+                    {\"nblocks\", RPCArg::Type::NUM, /* default */ strprintf(\"%d, 0=all\", nCheckDepth), \"The number of blocks to check.\"},\n                 },\n                 RPCResult{\n             \"true|false       (boolean) Verified or not\\n\"\n@@ -1534,7 +1534,7 @@ static UniValue preciousblock(const JSONRPCRequest& request)\n                 \"\\nA later preciousblock call can override the effect of an earlier one.\\n\"\n                 \"\\nThe effects of preciousblock are not retained across restarts.\\n\",\n                 {\n-                    {\"blockhash\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"the hash of the block to mark as precious\"},\n+                    {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"the hash of the block to mark as precious\"},\n                 },\n                 RPCResults{},\n                 RPCExamples{\n@@ -1571,7 +1571,7 @@ static UniValue invalidateblock(const JSONRPCRequest& request)\n             RPCHelpMan{\"invalidateblock\",\n                 \"\\nPermanently marks a block as invalid, as if it violated a consensus rule.\\n\",\n                 {\n-                    {\"blockhash\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"the hash of the block to mark as invalid\"},\n+                    {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"the hash of the block to mark as invalid\"},\n                 },\n                 RPCResults{},\n                 RPCExamples{\n@@ -1612,7 +1612,7 @@ static UniValue reconsiderblock(const JSONRPCRequest& request)\n                 \"\\nRemoves invalidity status of a block, its ancestors and its descendants, reconsider them for activation.\\n\"\n                 \"This can be used to undo the effects of invalidateblock.\\n\",\n                 {\n-                    {\"blockhash\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"the hash of the block to reconsider\"},\n+                    {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"the hash of the block to reconsider\"},\n                 },\n                 RPCResults{},\n                 RPCExamples{\n@@ -1650,8 +1650,8 @@ static UniValue getchaintxstats(const JSONRPCRequest& request)\n             RPCHelpMan{\"getchaintxstats\",\n                 \"\\nCompute statistics about the total number and rate of transactions in the chain.\\n\",\n                 {\n-                    {\"nblocks\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"one month\", \"Size of the window in number of blocks\"},\n-                    {\"blockhash\", RPCArg::Type::STR_HEX, /* opt */ true, /* default_val */ \"chain tip\", \"The hash of the block that ends the window.\"},\n+                    {\"nblocks\", RPCArg::Type::NUM, /* default */ \"one month\", \"Size of the window in number of blocks\"},\n+                    {\"blockhash\", RPCArg::Type::STR_HEX, /* default */ \"chain tip\", \"The hash of the block that ends the window.\"},\n                 },\n                 RPCResult{\n             \"{\\n\"\n@@ -1785,11 +1785,11 @@ static UniValue getblockstats(const JSONRPCRequest& request)\n                 \"It won't work for some heights with pruning.\\n\"\n                 \"It won't work without -txindex for utxo_size_inc, *fee or *feerate stats.\\n\",\n                 {\n-                    {\"hash_or_height\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"The block hash or height of the target block\", \"\", {\"\", \"string or numeric\"}},\n-                    {\"stats\", RPCArg::Type::ARR, /* opt */ true, /* default_val */ \"all values\", \"Values to plot (see result below)\",\n+                    {\"hash_or_height\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block hash or height of the target block\", \"\", {\"\", \"string or numeric\"}},\n+                    {\"stats\", RPCArg::Type::ARR, /* default */ \"all values\", \"Values to plot (see result below)\",\n                         {\n-                            {\"height\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"Selected statistic\"},\n-                            {\"time\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"Selected statistic\"},\n+                            {\"height\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"Selected statistic\"},\n+                            {\"time\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"Selected statistic\"},\n                         },\n                         \"stats\"},\n                 },\n@@ -2148,18 +2148,18 @@ UniValue scantxoutset(const JSONRPCRequest& request)\n                 \"In the latter case, a range needs to be specified by below if different from 1000.\\n\"\n                 \"For more information on output descriptors, see the documentation in the doc/descriptors.md file.\\n\",\n                 {\n-                    {\"action\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The action to execute\\n\"\n+                    {\"action\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The action to execute\\n\"\n             \"                                      \\\"start\\\" for starting a scan\\n\"\n             \"                                      \\\"abort\\\" for aborting the current scan (returns true when abort was successful)\\n\"\n             \"                                      \\\"status\\\" for progress report (in %) of the current scan\"},\n-                    {\"scanobjects\", RPCArg::Type::ARR, /* opt */ false, /* default_val */ \"\", \"Array of scan objects\\n\"\n+                    {\"scanobjects\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"Array of scan objects\\n\"\n             \"                                  Every scan object is either a string descriptor or an object:\",\n                         {\n-                            {\"descriptor\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"An output descriptor\"},\n-                            {\"\", RPCArg::Type::OBJ, /* opt */ true, /* default_val */ \"\", \"An object with output descriptor and metadata\",\n+                            {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"An output descriptor\"},\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"An object with output descriptor and metadata\",\n                                 {\n-                                    {\"desc\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"An output descriptor\"},\n-                                    {\"range\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"1000\", \"Up to what child index HD chains should be explored\"},\n+                                    {\"desc\", RPCArg::Type::STR, RPCArg::Optional::NO, \"An output descriptor\"},\n+                                    {\"range\", RPCArg::Type::NUM, /* default */ \"1000\", \"Up to what child index HD chains should be explored\"},\n                                 },\n                             },\n                         },"
      },
      {
        "sha": "3aae2c645c22770d5cc40bead7299bc21cf26c8e",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 21,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0ad4e7ce8f4c19fe58bf06747bf8c62600581c/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0ad4e7ce8f4c19fe58bf06747bf8c62600581c/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=fa0ad4e7ce8f4c19fe58bf06747bf8c62600581c",
        "patch": "@@ -92,8 +92,8 @@ static UniValue getnetworkhashps(const JSONRPCRequest& request)\n                 \"Pass in [blocks] to override # of blocks, -1 specifies since last difficulty change.\\n\"\n                 \"Pass in [height] to estimate the network speed at the time when a certain block was found.\\n\",\n                 {\n-                    {\"nblocks\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"120\", \"The number of blocks, or -1 for blocks since last difficulty change.\"},\n-                    {\"height\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"-1\", \"To estimate at the time of the given height.\"},\n+                    {\"nblocks\", RPCArg::Type::NUM, /* default */ \"120\", \"The number of blocks, or -1 for blocks since last difficulty change.\"},\n+                    {\"height\", RPCArg::Type::NUM, /* default */ \"-1\", \"To estimate at the time of the given height.\"},\n                 },\n                 RPCResult{\n             \"x             (numeric) Hashes per second estimated\\n\"\n@@ -163,9 +163,9 @@ static UniValue generatetoaddress(const JSONRPCRequest& request)\n             RPCHelpMan{\"generatetoaddress\",\n                 \"\\nMine blocks immediately to a specified address (before the RPC call returns)\\n\",\n                 {\n-                    {\"nblocks\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"How many blocks are generated immediately.\"},\n-                    {\"address\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The address to send the newly generated bitcoin to.\"},\n-                    {\"maxtries\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"1000000\", \"How many iterations to try.\"},\n+                    {\"nblocks\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"How many blocks are generated immediately.\"},\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The address to send the newly generated bitcoin to.\"},\n+                    {\"maxtries\", RPCArg::Type::NUM, /* default */ \"1000000\", \"How many iterations to try.\"},\n                 },\n                 RPCResult{\n             \"[ blockhashes ]     (array) hashes of blocks generated\\n\"\n@@ -244,10 +244,10 @@ static UniValue prioritisetransaction(const JSONRPCRequest& request)\n             RPCHelpMan{\"prioritisetransaction\",\n                 \"Accepts the transaction into mined blocks at a higher (or lower) priority\\n\",\n                 {\n-                    {\"txid\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The transaction id.\"},\n-                    {\"dummy\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"null\", \"API-Compatibility for previous API. Must be zero or null.\\n\"\n+                    {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id.\"},\n+                    {\"dummy\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED_NAMED_ARG, \"API-Compatibility for previous API. Must be zero or null.\\n\"\n             \"                  DEPRECATED. For forward compatibility use named arguments and omit this parameter.\"},\n-                    {\"fee_delta\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"The fee value (in satoshis) to add (or subtract, if negative).\\n\"\n+                    {\"fee_delta\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The fee value (in satoshis) to add (or subtract, if negative).\\n\"\n             \"                  Note, that this value is not a fee rate. It is a value to modify absolute fee of the TX.\\n\"\n             \"                  The fee is not actually paid, only the algorithm for selecting transactions into a block\\n\"\n             \"                  considers the transaction as it would have paid a higher (or lower) fee.\"},\n@@ -316,17 +316,17 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n                 \"    https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki#getblocktemplate_changes\\n\"\n                 \"    https://github.com/bitcoin/bips/blob/master/bip-0145.mediawiki\\n\",\n                 {\n-                    {\"template_request\", RPCArg::Type::OBJ, /* opt */ false, /* default_val */ \"\", \"A json object in the following spec\",\n+                    {\"template_request\", RPCArg::Type::OBJ, RPCArg::Optional::NO, \"A json object in the following spec\",\n                         {\n-                            {\"mode\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"This must be set to \\\"template\\\", \\\"proposal\\\" (see BIP 23), or omitted\"},\n-                            {\"capabilities\", RPCArg::Type::ARR, /* opt */ true, /* default_val */ \"\", \"A list of strings\",\n+                            {\"mode\", RPCArg::Type::STR, /* treat as named arg */ RPCArg::Optional::OMITTED_NAMED_ARG, \"This must be set to \\\"template\\\", \\\"proposal\\\" (see BIP 23), or omitted\"},\n+                            {\"capabilities\", RPCArg::Type::ARR, /* treat as named arg */ RPCArg::Optional::OMITTED_NAMED_ARG, \"A list of strings\",\n                                 {\n-                                    {\"support\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"client side supported feature, 'longpoll', 'coinbasetxn', 'coinbasevalue', 'proposal', 'serverlist', 'workid'\"},\n+                                    {\"support\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"client side supported feature, 'longpoll', 'coinbasetxn', 'coinbasevalue', 'proposal', 'serverlist', 'workid'\"},\n                                 },\n                                 },\n-                            {\"rules\", RPCArg::Type::ARR, /* opt */ false, /* default_val */ \"\", \"A list of strings\",\n+                            {\"rules\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"A list of strings\",\n                                 {\n-                                    {\"support\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"client side supported softfork deployment\"},\n+                                    {\"support\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"client side supported softfork deployment\"},\n                                 },\n                                 },\n                         },\n@@ -716,8 +716,8 @@ static UniValue submitblock(const JSONRPCRequest& request)\n                 \"\\nAttempts to submit new block to network.\\n\"\n                 \"See https://en.bitcoin.it/wiki/BIP_0022 for full specification.\\n\",\n                 {\n-                    {\"hexdata\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"the hex-encoded block data to submit\"},\n-                    {\"dummy\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"ignored\", \"dummy value, for compatibility with BIP22. This value is ignored.\"},\n+                    {\"hexdata\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"the hex-encoded block data to submit\"},\n+                    {\"dummy\", RPCArg::Type::STR, /* default */ \"ignored\", \"dummy value, for compatibility with BIP22. This value is ignored.\"},\n                 },\n                 RPCResults{},\n                 RPCExamples{\n@@ -781,7 +781,7 @@ static UniValue submitheader(const JSONRPCRequest& request)\n                 \"\\nDecode the given hexdata as a header and submit it as a candidate chain tip if valid.\"\n                 \"\\nThrows when the header is invalid.\\n\",\n                 {\n-                    {\"hexdata\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"the hex-encoded block header data\"},\n+                    {\"hexdata\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"the hex-encoded block header data\"},\n                 },\n                 RPCResult{\n             \"None\"\n@@ -823,8 +823,8 @@ static UniValue estimatesmartfee(const JSONRPCRequest& request)\n                 \"for which the estimate is valid. Uses virtual transaction size as defined\\n\"\n                 \"in BIP 141 (witness data is discounted).\\n\",\n                 {\n-                    {\"conf_target\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"Confirmation target in blocks (1 - 1008)\"},\n-                    {\"estimate_mode\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"CONSERVATIVE\", \"The fee estimate mode.\\n\"\n+                    {\"conf_target\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Confirmation target in blocks (1 - 1008)\"},\n+                    {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"CONSERVATIVE\", \"The fee estimate mode.\\n\"\n             \"                   Whether to return a more conservative estimate which also satisfies\\n\"\n             \"                   a longer history. A conservative estimate potentially returns a\\n\"\n             \"                   higher feerate and is more likely to be sufficient for the desired\\n\"\n@@ -890,8 +890,8 @@ static UniValue estimaterawfee(const JSONRPCRequest& request)\n                 \"confirmation within conf_target blocks if possible. Uses virtual transaction size as\\n\"\n                 \"defined in BIP 141 (witness data is discounted).\\n\",\n                 {\n-                    {\"conf_target\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"Confirmation target in blocks (1 - 1008)\"},\n-                    {\"threshold\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"0.95\", \"The proportion of transactions in a given feerate range that must have been\\n\"\n+                    {\"conf_target\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Confirmation target in blocks (1 - 1008)\"},\n+                    {\"threshold\", RPCArg::Type::NUM, /* default */ \"0.95\", \"The proportion of transactions in a given feerate range that must have been\\n\"\n             \"               confirmed within conf_target in order to consider those feerates as high enough and proceed to check\\n\"\n             \"               lower buckets.\"},\n                 },"
      },
      {
        "sha": "784adfa9691cf633f0dc1b2fb68da4b9905e97fa",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 19,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0ad4e7ce8f4c19fe58bf06747bf8c62600581c/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0ad4e7ce8f4c19fe58bf06747bf8c62600581c/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=fa0ad4e7ce8f4c19fe58bf06747bf8c62600581c",
        "patch": "@@ -40,7 +40,7 @@ static UniValue validateaddress(const JSONRPCRequest& request)\n                 \"fields have moved to getaddressinfo and will only be shown here with -deprecatedrpc=validateaddress: ismine, iswatchonly,\\n\"\n                 \"script, hex, pubkeys, sigsrequired, pubkey, addresses, embedded, iscompressed, account, timestamp, hdkeypath, kdmasterkeyid.\\n\",\n                 {\n-                    {\"address\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The bitcoin address to validate\"},\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The bitcoin address to validate\"},\n                 },\n                 RPCResult{\n             \"{\\n\"\n@@ -87,12 +87,12 @@ static UniValue createmultisig(const JSONRPCRequest& request)\n                 \"\\nCreates a multi-signature address with n signature of m keys required.\\n\"\n                 \"It returns a json object with the address and redeemScript.\\n\",\n                 {\n-                    {\"nrequired\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"The number of required signatures out of the n keys.\"},\n-                    {\"keys\", RPCArg::Type::ARR, /* opt */ false, /* default_val */ \"\", \"A json array of hex-encoded public keys.\",\n+                    {\"nrequired\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The number of required signatures out of the n keys.\"},\n+                    {\"keys\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"A json array of hex-encoded public keys.\",\n                         {\n-                            {\"key\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The hex-encoded public key\"},\n+                            {\"key\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"The hex-encoded public key\"},\n                         }},\n-                    {\"address_type\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"legacy\", \"The address type to use. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n+                    {\"address_type\", RPCArg::Type::STR, /* default */ \"legacy\", \"The address type to use. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n                 },\n                 RPCResult{\n             \"{\\n\"\n@@ -158,9 +158,9 @@ UniValue deriveaddresses(const JSONRPCRequest& request)\n             \"or more path elements separated by \\\"/\\\", where \\\"h\\\" represents a hardened child key.\\n\"\n             \"For more information on output descriptors, see the documentation in the doc/descriptors.md file.\\n\"},\n             {\n-                {\"descriptor\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The descriptor.\"},\n-                {\"begin\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"\", \"If a ranged descriptor is used, this specifies the beginning of the range to import.\"},\n-                {\"end\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"\", \"If a ranged descriptor is used, this specifies the end of the range to import.\"}\n+                {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The descriptor.\"},\n+                {\"begin\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED_NAMED_ARG, \"If a ranged descriptor is used, this specifies the beginning of the range to import.\"},\n+                {\"end\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED_NAMED_ARG, \"If a ranged descriptor is used, this specifies the end of the range to import.\"}\n             },\n             RPCResult{\n                 \"[ address ] (array) the derived addresses\\n\"\n@@ -239,9 +239,9 @@ static UniValue verifymessage(const JSONRPCRequest& request)\n             RPCHelpMan{\"verifymessage\",\n                 \"\\nVerify a signed message\\n\",\n                 {\n-                    {\"address\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The bitcoin address to use for the signature.\"},\n-                    {\"signature\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The signature provided by the signer in base 64 encoding (see signmessage).\"},\n-                    {\"message\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The message that was signed.\"},\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The bitcoin address to use for the signature.\"},\n+                    {\"signature\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The signature provided by the signer in base 64 encoding (see signmessage).\"},\n+                    {\"message\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The message that was signed.\"},\n                 },\n                 RPCResult{\n             \"true|false   (boolean) If the signature is verified or not.\\n\"\n@@ -298,8 +298,8 @@ static UniValue signmessagewithprivkey(const JSONRPCRequest& request)\n             RPCHelpMan{\"signmessagewithprivkey\",\n                 \"\\nSign a message with the private key of an address\\n\",\n                 {\n-                    {\"privkey\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The private key to sign the message with.\"},\n-                    {\"message\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The message to create a signature of.\"},\n+                    {\"privkey\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The private key to sign the message with.\"},\n+                    {\"message\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The message to create a signature of.\"},\n                 },\n                 RPCResult{\n             \"\\\"signature\\\"          (string) The signature of the message encoded in base 64\\n\"\n@@ -340,7 +340,7 @@ static UniValue setmocktime(const JSONRPCRequest& request)\n             RPCHelpMan{\"setmocktime\",\n                 \"\\nSet the local time to given timestamp (-regtest only)\\n\",\n                 {\n-                    {\"timestamp\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"Unix seconds-since-epoch timestamp\\n\"\n+                    {\"timestamp\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Unix seconds-since-epoch timestamp\\n\"\n             \"   Pass 0 to go back to using the system time.\"},\n                 },\n                 RPCResults{},\n@@ -406,7 +406,7 @@ static UniValue getmemoryinfo(const JSONRPCRequest& request)\n             RPCHelpMan{\"getmemoryinfo\",\n                 \"Returns an object containing information about memory usage.\\n\",\n                 {\n-                    {\"mode\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\\\"stats\\\"\", \"determines what kind of information is returned.\\n\"\n+                    {\"mode\", RPCArg::Type::STR, /* default */ \"\\\"stats\\\"\", \"determines what kind of information is returned.\\n\"\n             \"  - \\\"stats\\\" returns general statistics about memory usage in the daemon.\\n\"\n             \"  - \\\"mallocinfo\\\" returns an XML string describing low-level heap state (only available if compiled with glibc 2.10+).\"},\n                 },\n@@ -483,13 +483,13 @@ UniValue logging(const JSONRPCRequest& request)\n             \"  - \\\"none\\\", \\\"0\\\" : even if other logging categories are specified, ignore all of them.\\n\"\n             ,\n                 {\n-                    {\"include\", RPCArg::Type::ARR, /* opt */ true, /* default_val */ \"null\", \"A json array of categories to add debug logging\",\n+                    {\"include\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"A json array of categories to add debug logging\",\n                         {\n-                            {\"include_category\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"the valid logging category\"},\n+                            {\"include_category\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"the valid logging category\"},\n                         }},\n-                    {\"exclude\", RPCArg::Type::ARR, /* opt */ true, /* default_val */ \"null\", \"A json array of categories to remove debug logging\",\n+                    {\"exclude\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"A json array of categories to remove debug logging\",\n                         {\n-                            {\"exclude_category\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"the valid logging category\"},\n+                            {\"exclude_category\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"the valid logging category\"},\n                         }},\n                 },\n                 RPCResult{"
      },
      {
        "sha": "6bbbbc9876d2743cd6a890d57a196d57180f7860",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0ad4e7ce8f4c19fe58bf06747bf8c62600581c/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0ad4e7ce8f4c19fe58bf06747bf8c62600581c/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=fa0ad4e7ce8f4c19fe58bf06747bf8c62600581c",
        "patch": "@@ -221,8 +221,8 @@ static UniValue addnode(const JSONRPCRequest& request)\n                 \"Nodes added using addnode (or -connect) are protected from DoS disconnection and are not required to be\\n\"\n                 \"full nodes/support SegWit as other outbound peers are (though such peers will not be synced from).\\n\",\n                 {\n-                    {\"node\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The node (see getpeerinfo for nodes)\"},\n-                    {\"command\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"'add' to add a node to the list, 'remove' to remove a node from the list, 'onetry' to try a connection to the node once\"},\n+                    {\"node\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The node (see getpeerinfo for nodes)\"},\n+                    {\"command\", RPCArg::Type::STR, RPCArg::Optional::NO, \"'add' to add a node to the list, 'remove' to remove a node from the list, 'onetry' to try a connection to the node once\"},\n                 },\n                 RPCResults{},\n                 RPCExamples{\n@@ -266,8 +266,8 @@ static UniValue disconnectnode(const JSONRPCRequest& request)\n                 \"\\nStrictly one out of 'address' and 'nodeid' can be provided to identify the node.\\n\"\n                 \"\\nTo disconnect by nodeid, either set 'address' to the empty string, or call using the named 'nodeid' argument only.\\n\",\n                 {\n-                    {\"address\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"fallback to nodeid\", \"The IP address/port of the node\"},\n-                    {\"nodeid\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"fallback to address\", \"The node ID (see getpeerinfo for node IDs)\"},\n+                    {\"address\", RPCArg::Type::STR, /* default */ \"fallback to nodeid\", \"The IP address/port of the node\"},\n+                    {\"nodeid\", RPCArg::Type::NUM, /* default */ \"fallback to address\", \"The node ID (see getpeerinfo for node IDs)\"},\n                 },\n                 RPCResults{},\n                 RPCExamples{\n@@ -311,7 +311,7 @@ static UniValue getaddednodeinfo(const JSONRPCRequest& request)\n                 \"\\nReturns information about the given added node, or all added nodes\\n\"\n                 \"(note that onetry addnodes are not listed here)\\n\",\n                 {\n-                    {\"node\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"all nodes\", \"If provided, return information about this specific node, otherwise all nodes are returned.\"},\n+                    {\"node\", RPCArg::Type::STR, /* default */ \"all nodes\", \"If provided, return information about this specific node, otherwise all nodes are returned.\"},\n                 },\n                 RPCResult{\n             \"[\\n\"\n@@ -532,10 +532,10 @@ static UniValue setban(const JSONRPCRequest& request)\n             RPCHelpMan{\"setban\",\n                 \"\\nAttempts to add or remove an IP/Subnet from the banned list.\\n\",\n                 {\n-                    {\"subnet\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The IP/Subnet (see getpeerinfo for nodes IP) with an optional netmask (default is /32 = single IP)\"},\n-                    {\"command\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"'add' to add an IP/Subnet to the list, 'remove' to remove an IP/Subnet from the list\"},\n-                    {\"bantime\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"0\", \"time in seconds how long (or until when if [absolute] is set) the IP is banned (0 or empty means using the default time of 24h which can also be overwritten by the -bantime startup argument)\"},\n-                    {\"absolute\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"If set, the bantime must be an absolute timestamp in seconds since epoch (Jan 1 1970 GMT)\"},\n+                    {\"subnet\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The IP/Subnet (see getpeerinfo for nodes IP) with an optional netmask (default is /32 = single IP)\"},\n+                    {\"command\", RPCArg::Type::STR, RPCArg::Optional::NO, \"'add' to add an IP/Subnet to the list, 'remove' to remove an IP/Subnet from the list\"},\n+                    {\"bantime\", RPCArg::Type::NUM, /* default */ \"0\", \"time in seconds how long (or until when if [absolute] is set) the IP is banned (0 or empty means using the default time of 24h which can also be overwritten by the -bantime startup argument)\"},\n+                    {\"absolute\", RPCArg::Type::BOOL, /* default */ \"false\", \"If set, the bantime must be an absolute timestamp in seconds since epoch (Jan 1 1970 GMT)\"},\n                 },\n                 RPCResults{},\n                 RPCExamples{\n@@ -667,7 +667,7 @@ static UniValue setnetworkactive(const JSONRPCRequest& request)\n             RPCHelpMan{\"setnetworkactive\",\n                 \"\\nDisable/enable all p2p network activity.\\n\",\n                 {\n-                    {\"state\", RPCArg::Type::BOOL, /* opt */ false, /* default_val */ \"\", \"true to enable networking, false to disable\"},\n+                    {\"state\", RPCArg::Type::BOOL, RPCArg::Optional::NO, \"true to enable networking, false to disable\"},\n                 },\n                 RPCResults{},\n                 RPCExamples{\"\"},\n@@ -691,7 +691,7 @@ static UniValue getnodeaddresses(const JSONRPCRequest& request)\n             RPCHelpMan{\"getnodeaddresses\",\n                 \"\\nReturn known addresses which can potentially be used to find new nodes in the network\\n\",\n                 {\n-                    {\"count\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"1\", \"How many addresses to return. Limited to the smaller of \" + std::to_string(ADDRMAN_GETADDR_MAX) + \" or \" + std::to_string(ADDRMAN_GETADDR_MAX_PCT) + \"% of all known addresses.\"},\n+                    {\"count\", RPCArg::Type::NUM, /* default */ \"1\", \"How many addresses to return. Limited to the smaller of \" + std::to_string(ADDRMAN_GETADDR_MAX) + \" or \" + std::to_string(ADDRMAN_GETADDR_MAX_PCT) + \"% of all known addresses.\"},\n                 },\n                 RPCResult{\n             \"[\\n\""
      },
      {
        "sha": "c2f0c73851b5274f485c1901ffb5e7a3646bbc87",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 60,
        "deletions": 60,
        "changes": 120,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0ad4e7ce8f4c19fe58bf06747bf8c62600581c/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0ad4e7ce8f4c19fe58bf06747bf8c62600581c/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=fa0ad4e7ce8f4c19fe58bf06747bf8c62600581c",
        "patch": "@@ -82,9 +82,9 @@ static UniValue getrawtransaction(const JSONRPCRequest& request)\n                 \"\\nIf verbose is 'true', returns an Object with information about 'txid'.\\n\"\n                 \"If verbose is 'false' or omitted, returns a string that is serialized, hex-encoded data for 'txid'.\\n\",\n                 {\n-                    {\"txid\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The transaction id\"},\n-                    {\"verbose\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"If false, return a string, otherwise return a json object\"},\n-                    {\"blockhash\", RPCArg::Type::STR_HEX, /* opt */ true, /* default_val */ \"null\", \"The block in which to look for the transaction\"},\n+                    {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                    {\"verbose\", RPCArg::Type::BOOL, /* default */ \"false\", \"If false, return a string, otherwise return a json object\"},\n+                    {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED_NAMED_ARG, \"The block in which to look for the transaction\"},\n                 },\n                 {\n                     RPCResult{\"if verbose is not set or set to false\",\n@@ -218,12 +218,12 @@ static UniValue gettxoutproof(const JSONRPCRequest& request)\n                 \"you need to maintain a transaction index, using the -txindex command line option or\\n\"\n                 \"specify the block in which the transaction is included manually (by blockhash).\\n\",\n                 {\n-                    {\"txids\", RPCArg::Type::ARR, /* opt */ false, /* default_val */ \"\", \"A json array of txids to filter\",\n+                    {\"txids\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"A json array of txids to filter\",\n                         {\n-                            {\"txid\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"A transaction hash\"},\n+                            {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A transaction hash\"},\n                         },\n                         },\n-                    {\"blockhash\", RPCArg::Type::STR_HEX, /* opt */ true, /* default_val */ \"null\", \"If specified, looks for txid in the block with this hash\"},\n+                    {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED_NAMED_ARG, \"If specified, looks for txid in the block with this hash\"},\n                 },\n                 RPCResult{\n             \"\\\"data\\\"           (string) A string that is a serialized, hex-encoded data for the proof.\\n\"\n@@ -311,7 +311,7 @@ static UniValue verifytxoutproof(const JSONRPCRequest& request)\n                 \"\\nVerifies that a proof points to a transaction in a block, returning the transaction it commits to\\n\"\n                 \"and throwing an RPC error if the block is not in our best chain\\n\",\n                 {\n-                    {\"proof\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The hex-encoded proof generated by gettxoutproof\"},\n+                    {\"proof\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The hex-encoded proof generated by gettxoutproof\"},\n                 },\n                 RPCResult{\n             \"[\\\"txid\\\"]      (array, strings) The txid(s) which the proof commits to, or empty array if the proof can not be validated.\\n\"\n@@ -472,36 +472,36 @@ static UniValue createrawtransaction(const JSONRPCRequest& request)\n                 \"Note that the transaction's inputs are not signed, and\\n\"\n                 \"it is not stored in the wallet or transmitted to the network.\\n\",\n                 {\n-                    {\"inputs\", RPCArg::Type::ARR, /* opt */ false, /* default_val */ \"\", \"A json array of json objects\",\n+                    {\"inputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"A json array of json objects\",\n                         {\n-                            {\"\", RPCArg::Type::OBJ, /* opt */ true, /* default_val */ \"\", \"\",\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n                                 {\n-                                    {\"txid\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The transaction id\"},\n-                                    {\"vout\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"The output number\"},\n-                                    {\"sequence\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"depends on the value of the 'replaceable' and 'locktime' arguments\", \"The sequence number\"},\n+                                    {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                                    {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                                    {\"sequence\", RPCArg::Type::NUM, /* default */ \"depends on the value of the 'replaceable' and 'locktime' arguments\", \"The sequence number\"},\n                                 },\n                                 },\n                         },\n                         },\n-                    {\"outputs\", RPCArg::Type::ARR, /* opt */ false, /* default_val */ \"\", \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+                    {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n                             \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n                             \"For compatibility reasons, a dictionary, which holds the key-value pairs directly, is also\\n\"\n                             \"                             accepted as second parameter.\",\n                         {\n-                            {\"\", RPCArg::Type::OBJ, /* opt */ true, /* default_val */ \"\", \"\",\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n                                 {\n-                                    {\"address\", RPCArg::Type::AMOUNT, /* opt */ false, /* default_val */ \"\", \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT},\n+                                    {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT},\n                                 },\n                                 },\n-                            {\"\", RPCArg::Type::OBJ, /* opt */ true, /* default_val */ \"\", \"\",\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n                                 {\n-                                    {\"data\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},\n+                                    {\"data\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},\n                                 },\n                                 },\n                         },\n                         },\n-                    {\"locktime\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"0\", \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n-                    {\"replaceable\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Marks this transaction as BIP125-replaceable.\\n\"\n+                    {\"locktime\", RPCArg::Type::NUM, /* default */ \"0\", \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                    {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"false\", \"Marks this transaction as BIP125-replaceable.\\n\"\n             \"                             Allows this transaction to be replaced by a transaction with higher fees. If provided, it is an error if explicit sequence numbers are incompatible.\"},\n                 },\n                 RPCResult{\n@@ -536,8 +536,8 @@ static UniValue decoderawtransaction(const JSONRPCRequest& request)\n             RPCHelpMan{\"decoderawtransaction\",\n                 \"\\nReturn a JSON object representing the serialized, hex-encoded transaction.\\n\",\n                 {\n-                    {\"hexstring\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The transaction hex string\"},\n-                    {\"iswitness\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"depends on heuristic tests\", \"Whether the transaction hex is a serialized witness transaction\\n\"\n+                    {\"hexstring\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction hex string\"},\n+                    {\"iswitness\", RPCArg::Type::BOOL, /* default */ \"depends on heuristic tests\", \"Whether the transaction hex is a serialized witness transaction\\n\"\n             \"                         If iswitness is not present, heuristic tests will be used in decoding\"},\n                 },\n                 RPCResult{\n@@ -611,7 +611,7 @@ static UniValue decodescript(const JSONRPCRequest& request)\n             RPCHelpMan{\"decodescript\",\n                 \"\\nDecode a hex-encoded script.\\n\",\n                 {\n-                    {\"hexstring\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"the hex-encoded script\"},\n+                    {\"hexstring\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"the hex-encoded script\"},\n                 },\n                 RPCResult{\n             \"{\\n\"\n@@ -711,9 +711,9 @@ static UniValue combinerawtransaction(const JSONRPCRequest& request)\n                 \"The combined transaction may be another partially signed transaction or a \\n\"\n                 \"fully signed transaction.\",\n                 {\n-                    {\"txs\", RPCArg::Type::ARR, /* opt */ false, /* default_val */ \"\", \"A json array of hex strings of partially signed transactions\",\n+                    {\"txs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"A json array of hex strings of partially signed transactions\",\n                         {\n-                            {\"hexstring\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"A transaction hash\"},\n+                            {\"hexstring\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A transaction hash\"},\n                         },\n                         },\n                 },\n@@ -936,26 +936,26 @@ static UniValue signrawtransactionwithkey(const JSONRPCRequest& request)\n                 \"The third optional argument (may be null) is an array of previous transaction outputs that\\n\"\n                 \"this transaction depends on but may not yet be in the block chain.\\n\",\n                 {\n-                    {\"hexstring\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The transaction hex string\"},\n-                    {\"privkeys\", RPCArg::Type::ARR, /* opt */ false, /* default_val */ \"\", \"A json array of base58-encoded private keys for signing\",\n+                    {\"hexstring\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The transaction hex string\"},\n+                    {\"privkeys\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"A json array of base58-encoded private keys for signing\",\n                         {\n-                            {\"privatekey\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"private key in base58-encoding\"},\n+                            {\"privatekey\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"private key in base58-encoding\"},\n                         },\n                         },\n-                    {\"prevtxs\", RPCArg::Type::ARR, /* opt */ true, /* default_val */ \"null\", \"A json array of previous dependent transaction outputs\",\n+                    {\"prevtxs\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"A json array of previous dependent transaction outputs\",\n                         {\n-                            {\"\", RPCArg::Type::OBJ, /* opt */ true, /* default_val */ \"\", \"\",\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n                                 {\n-                                    {\"txid\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The transaction id\"},\n-                                    {\"vout\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"The output number\"},\n-                                    {\"scriptPubKey\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"script key\"},\n-                                    {\"redeemScript\", RPCArg::Type::STR_HEX, /* opt */ true, /* default_val */ \"omitted\", \"(required for P2SH or P2WSH) redeem script\"},\n-                                    {\"amount\", RPCArg::Type::AMOUNT, /* opt */ false, /* default_val */ \"\", \"The amount spent\"},\n+                                    {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                                    {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                                    {\"scriptPubKey\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"script key\"},\n+                                    {\"redeemScript\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"(required for P2SH or P2WSH) redeem script\"},\n+                                    {\"amount\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"The amount spent\"},\n                                 },\n                                 },\n                         },\n                         },\n-                    {\"sighashtype\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"ALL\", \"The signature hash type. Must be one of:\\n\"\n+                    {\"sighashtype\", RPCArg::Type::STR, /* default */ \"ALL\", \"The signature hash type. Must be one of:\\n\"\n             \"       \\\"ALL\\\"\\n\"\n             \"       \\\"NONE\\\"\\n\"\n             \"       \\\"SINGLE\\\"\\n\"\n@@ -1023,8 +1023,8 @@ static UniValue sendrawtransaction(const JSONRPCRequest& request)\n                 \"\\nSubmits raw transaction (serialized, hex-encoded) to local node and network.\\n\"\n                 \"\\nAlso see createrawtransaction and signrawtransactionwithkey calls.\\n\",\n                 {\n-                    {\"hexstring\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The hex string of the raw transaction\"},\n-                    {\"allowhighfees\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Allow high fees\"},\n+                    {\"hexstring\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The hex string of the raw transaction\"},\n+                    {\"allowhighfees\", RPCArg::Type::BOOL, /* default */ \"false\", \"Allow high fees\"},\n                 },\n                 RPCResult{\n             \"\\\"hex\\\"             (string) The transaction hash in hex\\n\"\n@@ -1122,13 +1122,13 @@ static UniValue testmempoolaccept(const JSONRPCRequest& request)\n                 \"\\nThis checks if the transaction violates the consensus or policy rules.\\n\"\n                 \"\\nSee sendrawtransaction call.\\n\",\n                 {\n-                    {\"rawtxs\", RPCArg::Type::ARR, /* opt */ false, /* default_val */ \"\", \"An array of hex strings of raw transactions.\\n\"\n+                    {\"rawtxs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"An array of hex strings of raw transactions.\\n\"\n             \"                                        Length must be one for now.\",\n                         {\n-                            {\"rawtx\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"\"},\n+                            {\"rawtx\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"\"},\n                         },\n                         },\n-                    {\"allowhighfees\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Allow high fees\"},\n+                    {\"allowhighfees\", RPCArg::Type::BOOL, /* default */ \"false\", \"Allow high fees\"},\n                 },\n                 RPCResult{\n             \"[                   (array) The result of the mempool acceptance test for each raw transaction in the input array.\\n\"\n@@ -1223,7 +1223,7 @@ UniValue decodepsbt(const JSONRPCRequest& request)\n             RPCHelpMan{\"decodepsbt\",\n                 \"\\nReturn a JSON object representing the serialized, base64-encoded partially signed Bitcoin transaction.\\n\",\n                 {\n-                    {\"psbt\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The PSBT base64 string\"},\n+                    {\"psbt\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The PSBT base64 string\"},\n                 },\n                 RPCResult{\n             \"{\\n\"\n@@ -1499,9 +1499,9 @@ UniValue combinepsbt(const JSONRPCRequest& request)\n                 \"\\nCombine multiple partially signed Bitcoin transactions into one transaction.\\n\"\n                 \"Implements the Combiner role.\\n\",\n                 {\n-                    {\"txs\", RPCArg::Type::ARR, /* opt */ false, /* default_val */ \"\", \"A json array of base64 strings of partially signed transactions\",\n+                    {\"txs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"A json array of base64 strings of partially signed transactions\",\n                         {\n-                            {\"psbt\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"A base64 string of a PSBT\"},\n+                            {\"psbt\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"A base64 string of a PSBT\"},\n                         },\n                         },\n                 },\n@@ -1559,8 +1559,8 @@ UniValue finalizepsbt(const JSONRPCRequest& request)\n                 \"created which has the final_scriptSig and final_scriptWitness fields filled for inputs that are complete.\\n\"\n                 \"Implements the Finalizer and Extractor roles.\\n\",\n                 {\n-                    {\"psbt\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"A base64 string of a PSBT\"},\n-                    {\"extract\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"true\", \"If true and the transaction is complete,\\n\"\n+                    {\"psbt\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A base64 string of a PSBT\"},\n+                    {\"extract\", RPCArg::Type::BOOL, /* default */ \"true\", \"If true and the transaction is complete,\\n\"\n             \"                             extract and return the complete transaction in normal network serialization instead of the PSBT.\"},\n                 },\n                 RPCResult{\n@@ -1622,36 +1622,36 @@ UniValue createpsbt(const JSONRPCRequest& request)\n                 \"\\nCreates a transaction in the Partially Signed Transaction format.\\n\"\n                 \"Implements the Creator role.\\n\",\n                 {\n-                    {\"inputs\", RPCArg::Type::ARR, /* opt */ false, /* default_val */ \"\", \"A json array of json objects\",\n+                    {\"inputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"A json array of json objects\",\n                         {\n-                            {\"\", RPCArg::Type::OBJ, /* opt */ false, /* default_val */ \"\", \"\",\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n                                 {\n-                                    {\"txid\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The transaction id\"},\n-                                    {\"vout\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"The output number\"},\n-                                    {\"sequence\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"depends on the value of the 'replaceable' and 'locktime' arguments\", \"The sequence number\"},\n+                                    {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                                    {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                                    {\"sequence\", RPCArg::Type::NUM, /* default */ \"depends on the value of the 'replaceable' and 'locktime' arguments\", \"The sequence number\"},\n                                 },\n                                 },\n                         },\n                         },\n-                    {\"outputs\", RPCArg::Type::ARR, /* opt */ false, /* default_val */ \"\", \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+                    {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n                             \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n                             \"For compatibility reasons, a dictionary, which holds the key-value pairs directly, is also\\n\"\n                             \"                             accepted as second parameter.\",\n                         {\n-                            {\"\", RPCArg::Type::OBJ, /* opt */ true, /* default_val */ \"\", \"\",\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n                                 {\n-                                    {\"address\", RPCArg::Type::AMOUNT, /* opt */ false, /* default_val */ \"\", \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT},\n+                                    {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT},\n                                 },\n                                 },\n-                            {\"\", RPCArg::Type::OBJ, /* opt */ true, /* default_val */ \"\", \"\",\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n                                 {\n-                                    {\"data\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},\n+                                    {\"data\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},\n                                 },\n                                 },\n                         },\n                         },\n-                    {\"locktime\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"0\", \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n-                    {\"replaceable\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Marks this transaction as BIP125 replaceable.\\n\"\n+                    {\"locktime\", RPCArg::Type::NUM, /* default */ \"0\", \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                    {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"false\", \"Marks this transaction as BIP125 replaceable.\\n\"\n                             \"                             Allows this transaction to be replaced by a transaction with higher fees. If provided, it is an error if explicit sequence numbers are incompatible.\"},\n                 },\n                 RPCResult{\n@@ -1698,10 +1698,10 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n                 \"\\nConverts a network serialized transaction to a PSBT. This should be used only with createrawtransaction and fundrawtransaction\\n\"\n                 \"createpsbt and walletcreatefundedpsbt should be used for new applications.\\n\",\n                 {\n-                    {\"hexstring\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The hex string of a raw transaction\"},\n-                    {\"permitsigdata\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"If true, any signatures in the input will be discarded and conversion.\\n\"\n+                    {\"hexstring\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The hex string of a raw transaction\"},\n+                    {\"permitsigdata\", RPCArg::Type::BOOL, /* default */ \"false\", \"If true, any signatures in the input will be discarded and conversion.\\n\"\n                             \"                              will continue. If false, RPC will fail if any signatures are present.\"},\n-                    {\"iswitness\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"depends on heuristic tests\", \"Whether the transaction hex is a serialized witness transaction.\\n\"\n+                    {\"iswitness\", RPCArg::Type::BOOL, /* default */ \"depends on heuristic tests\", \"Whether the transaction hex is a serialized witness transaction.\\n\"\n                             \"                              If iswitness is not present, heuristic tests will be used in decoding. If true, only witness deserializaion\\n\"\n                             \"                              will be tried. If false, only non-witness deserialization will be tried. Only has an effect if\\n\"\n                             \"                              permitsigdata is true.\"},"
      },
      {
        "sha": "cd90573da0ed32c589e9d4259caed4e2b842e2eb",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0ad4e7ce8f4c19fe58bf06747bf8c62600581c/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0ad4e7ce8f4c19fe58bf06747bf8c62600581c/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=fa0ad4e7ce8f4c19fe58bf06747bf8c62600581c",
        "patch": "@@ -230,7 +230,7 @@ UniValue help(const JSONRPCRequest& jsonRequest)\n             RPCHelpMan{\"help\",\n                 \"\\nList all commands, or get help for a specified command.\\n\",\n                 {\n-                    {\"command\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"all commands\", \"The command to get help on\"},\n+                    {\"command\", RPCArg::Type::STR, /* default */ \"all commands\", \"The command to get help on\"},\n                 },\n                 RPCResult{\n             \"\\\"text\\\"     (string) The help text\\n\""
      },
      {
        "sha": "5599be815ba5e97e53cd093130b7335f22709ad9",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 18,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0ad4e7ce8f4c19fe58bf06747bf8c62600581c/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0ad4e7ce8f4c19fe58bf06747bf8c62600581c/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=fa0ad4e7ce8f4c19fe58bf06747bf8c62600581c",
        "patch": "@@ -170,12 +170,12 @@ struct Sections {\n                 left += outer_type == OuterType::OBJ ? arg.ToStringObj(/* oneline */ false) : arg.ToString(/* oneline */ false);\n             }\n             left += \",\";\n-            PushSection({left, arg.ToDescriptionString(/* implicitly_required */ outer_type == OuterType::ARR)});\n+            PushSection({left, arg.ToDescriptionString()});\n             break;\n         }\n         case RPCArg::Type::OBJ:\n         case RPCArg::Type::OBJ_USER_KEYS: {\n-            const auto right = outer_type == OuterType::NAMED_ARG ? \"\" : arg.ToDescriptionString(/* implicitly_required */ outer_type == OuterType::ARR);\n+            const auto right = outer_type == OuterType::NAMED_ARG ? \"\" : arg.ToDescriptionString();\n             PushSection({indent + \"{\", right});\n             for (const auto& arg_inner : arg.m_inner) {\n                 Push(arg_inner, current_indent + 2, OuterType::OBJ);\n@@ -190,7 +190,7 @@ struct Sections {\n             auto left = indent;\n             left += outer_type == OuterType::OBJ ? \"\\\"\" + arg.m_name + \"\\\": \" : \"\";\n             left += \"[\";\n-            const auto right = outer_type == OuterType::NAMED_ARG ? \"\" : arg.ToDescriptionString(/* implicitly_required */ outer_type == OuterType::ARR);\n+            const auto right = outer_type == OuterType::NAMED_ARG ? \"\" : arg.ToDescriptionString();\n             PushSection({left, right});\n             for (const auto& arg_inner : arg.m_inner) {\n                 Push(arg_inner, current_indent + 2, OuterType::ARR);\n@@ -283,8 +283,14 @@ std::string RPCHelpMan::ToString() const\n     ret += m_name;\n     bool was_optional{false};\n     for (const auto& arg : m_args) {\n+        bool optional;\n+        if (arg.m_fallback.which() == 1) {\n+            optional = true;\n+        } else {\n+            optional = RPCArg::Optional::NO != boost::get<RPCArg::Optional>(arg.m_fallback);\n+        }\n         ret += \" \";\n-        if (arg.m_optional) {\n+        if (optional) {\n             if (!was_optional) ret += \"( \";\n             was_optional = true;\n         } else {\n@@ -324,7 +330,7 @@ std::string RPCHelpMan::ToString() const\n     return ret;\n }\n \n-std::string RPCArg::ToDescriptionString(const bool implicitly_required) const\n+std::string RPCArg::ToDescriptionString() const\n {\n     std::string ret;\n     ret += \"(\";\n@@ -362,19 +368,24 @@ std::string RPCArg::ToDescriptionString(const bool implicitly_required) const\n             // no default case, so the compiler can warn about missing cases\n         }\n     }\n-    if (!implicitly_required) {\n-        ret += \", \";\n-        if (m_optional) {\n-            ret += \"optional\";\n-            if (!m_default_value.empty()) {\n-                ret += \", default=\" + m_default_value;\n-            } else {\n-                // TODO enable this assert, when all optional parameters have their default value documented\n-                //assert(false);\n-            }\n-        } else {\n-            ret += \"required\";\n-            assert(m_default_value.empty()); // Default value is ignored, and must not be present\n+    if (m_fallback.which() == 1) {\n+        ret += \", optional, default=\" + boost::get<std::string>(m_fallback);\n+    } else {\n+        switch (boost::get<RPCArg::Optional>(m_fallback)) {\n+        case RPCArg::Optional::OMITTED: {\n+            // nothing to do. Element is treated as if not present and has no default value\n+            break;\n+        }\n+        case RPCArg::Optional::OMITTED_NAMED_ARG: {\n+            ret += \", optional\"; // Default value is \"null\"\n+            break;\n+        }\n+        case RPCArg::Optional::NO: {\n+            ret += \", required\";\n+            break;\n+        }\n+\n+            // no default case, so the compiler can warn about missing cases\n         }\n     }\n     ret += \")\";"
      },
      {
        "sha": "e296ee68c9b0794322689529adbea17272d4dcce",
        "filename": "src/rpc/util.h",
        "status": "modified",
        "additions": 26,
        "deletions": 12,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0ad4e7ce8f4c19fe58bf06747bf8c62600581c/src/rpc/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0ad4e7ce8f4c19fe58bf06747bf8c62600581c/src/rpc/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.h?ref=fa0ad4e7ce8f4c19fe58bf06747bf8c62600581c",
        "patch": "@@ -12,6 +12,8 @@\n #include <string>\n #include <vector>\n \n+#include <boost/variant.hpp>\n+\n class CKeyStore;\n class CPubKey;\n class CScript;\n@@ -39,27 +41,42 @@ struct RPCArg {\n         AMOUNT,        //!< Special type representing a floating point amount (can be either NUM or STR)\n         STR_HEX,       //!< Special type that is a STR with only hex chars\n     };\n+\n+    enum class Optional {\n+        /** Required arg */\n+        NO,\n+        /**\n+         * Optinal arg that is a named argument and has a default value of\n+         * `null`. When possible, the default value should be specified.\n+         */\n+        OMITTED_NAMED_ARG,\n+        /**\n+         * Optional argument with default value omitted because they are\n+         * implicitly clear. That is, elements in an array or object may not\n+         * exist by default.\n+         * When possible, the default value should be specified.\n+         */\n+        OMITTED,\n+    };\n+    using Fallback = boost::variant<Optional, /* default value for optional args */ std::string>;\n     const std::string m_name; //!< The name of the arg (can be empty for inner args)\n     const Type m_type;\n     const std::vector<RPCArg> m_inner; //!< Only used for arrays or dicts\n-    const bool m_optional;\n-    const std::string m_default_value; //!< Only used for optional args\n+    const Fallback m_fallback;\n     const std::string m_description;\n     const std::string m_oneline_description; //!< Should be empty unless it is supposed to override the auto-generated summary line\n     const std::vector<std::string> m_type_str; //!< Should be empty unless it is supposed to override the auto-generated type strings. Vector length is either 0 or 2, m_type_str.at(0) will override the type of the value in a key-value pair, m_type_str.at(1) will override the type in the argument description.\n \n     RPCArg(\n         const std::string& name,\n         const Type& type,\n-        const bool opt,\n-        const std::string& default_val,\n+        const Fallback& fallback,\n         const std::string& description,\n         const std::string& oneline_description = \"\",\n         const std::vector<std::string>& type_str = {})\n         : m_name{name},\n           m_type{type},\n-          m_optional{opt},\n-          m_default_value{default_val},\n+          m_fallback{fallback},\n           m_description{description},\n           m_oneline_description{oneline_description},\n           m_type_str{type_str}\n@@ -70,17 +87,15 @@ struct RPCArg {\n     RPCArg(\n         const std::string& name,\n         const Type& type,\n-        const bool opt,\n-        const std::string& default_val,\n+        const Fallback& fallback,\n         const std::string& description,\n         const std::vector<RPCArg>& inner,\n         const std::string& oneline_description = \"\",\n         const std::vector<std::string>& type_str = {})\n         : m_name{name},\n           m_type{type},\n           m_inner{inner},\n-          m_optional{opt},\n-          m_default_value{default_val},\n+          m_fallback{fallback},\n           m_description{description},\n           m_oneline_description{oneline_description},\n           m_type_str{type_str}\n@@ -101,9 +116,8 @@ struct RPCArg {\n     /**\n      * Return the description string, including the argument type and whether\n      * the argument is required.\n-     * implicitly_required is set for arguments in an array, which are neither optional nor required.\n      */\n-    std::string ToDescriptionString(bool implicitly_required = false) const;\n+    std::string ToDescriptionString() const;\n };\n \n struct RPCResult {"
      },
      {
        "sha": "ec49efcf2246932a770537f5d088324f28d473ce",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 35,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0ad4e7ce8f4c19fe58bf06747bf8c62600581c/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0ad4e7ce8f4c19fe58bf06747bf8c62600581c/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=fa0ad4e7ce8f4c19fe58bf06747bf8c62600581c",
        "patch": "@@ -116,9 +116,9 @@ UniValue importprivkey(const JSONRPCRequest& request)\n             \"\\nNote: This call can take over an hour to complete if rescan is true, during that time, other rpc calls\\n\"\n             \"may report that the imported key exists but related transactions are still missing, leading to temporarily incorrect/bogus balances and unspent outputs until rescan completes.\\n\",\n                 {\n-                    {\"privkey\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The private key (see dumpprivkey)\"},\n-                    {\"label\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"current label if address exists, otherwise \\\"\\\"\", \"An optional label\"},\n-                    {\"rescan\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"true\", \"Rescan the wallet for transactions\"},\n+                    {\"privkey\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The private key (see dumpprivkey)\"},\n+                    {\"label\", RPCArg::Type::STR, /* default */ \"current label if address exists, otherwise \\\"\\\"\", \"An optional label\"},\n+                    {\"rescan\", RPCArg::Type::BOOL, /* default */ \"true\", \"Rescan the wallet for transactions\"},\n                 },\n                 RPCResults{},\n                 RPCExamples{\n@@ -286,10 +286,10 @@ UniValue importaddress(const JSONRPCRequest& request)\n             \"\\nNote: If you import a non-standard raw script in hex form, outputs sending to it will be treated\\n\"\n             \"as change, and not show up in many RPCs.\\n\",\n                 {\n-                    {\"address\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The Bitcoin address (or hex-encoded script)\"},\n-                    {\"label\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\\\"\\\"\", \"An optional label\"},\n-                    {\"rescan\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"true\", \"Rescan the wallet for transactions\"},\n-                    {\"p2sh\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Add the P2SH version of the script as well\"},\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The Bitcoin address (or hex-encoded script)\"},\n+                    {\"label\", RPCArg::Type::STR, /* default */ \"\\\"\\\"\", \"An optional label\"},\n+                    {\"rescan\", RPCArg::Type::BOOL, /* default */ \"true\", \"Rescan the wallet for transactions\"},\n+                    {\"p2sh\", RPCArg::Type::BOOL, /* default */ \"false\", \"Add the P2SH version of the script as well\"},\n                 },\n                 RPCResults{},\n                 RPCExamples{\n@@ -364,8 +364,8 @@ UniValue importprunedfunds(const JSONRPCRequest& request)\n             RPCHelpMan{\"importprunedfunds\",\n                 \"\\nImports funds without rescan. Corresponding address or script must previously be included in wallet. Aimed towards pruned wallets. The end-user is responsible to import additional transactions that subsequently spend the imported outputs or rescan after the point in the blockchain the transaction is included.\\n\",\n                 {\n-                    {\"rawtransaction\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"A raw transaction in hex funding an already-existing address in wallet\"},\n-                    {\"txoutproof\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The hex output from gettxoutproof that contains the transaction\"},\n+                    {\"rawtransaction\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"A raw transaction in hex funding an already-existing address in wallet\"},\n+                    {\"txoutproof\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The hex output from gettxoutproof that contains the transaction\"},\n                 },\n                 RPCResults{},\n                 RPCExamples{\"\"},\n@@ -431,7 +431,7 @@ UniValue removeprunedfunds(const JSONRPCRequest& request)\n             RPCHelpMan{\"removeprunedfunds\",\n                 \"\\nDeletes the specified transaction from the wallet. Meant for use with pruned wallets and as a companion to importprunedfunds. This will affect wallet balances.\\n\",\n                 {\n-                    {\"txid\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The hex-encoded id of the transaction you are deleting\"},\n+                    {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The hex-encoded id of the transaction you are deleting\"},\n                 },\n                 RPCResults{},\n                 RPCExamples{\n@@ -475,9 +475,9 @@ UniValue importpubkey(const JSONRPCRequest& request)\n             \"\\nNote: This call can take over an hour to complete if rescan is true, during that time, other rpc calls\\n\"\n             \"may report that the imported pubkey exists but related transactions are still missing, leading to temporarily incorrect/bogus balances and unspent outputs until rescan completes.\\n\",\n                 {\n-                    {\"pubkey\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The hex-encoded public key\"},\n-                    {\"label\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\\\"\\\"\", \"An optional label\"},\n-                    {\"rescan\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"true\", \"Rescan the wallet for transactions\"},\n+                    {\"pubkey\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The hex-encoded public key\"},\n+                    {\"label\", RPCArg::Type::STR, /* default */ \"\\\"\\\"\", \"An optional label\"},\n+                    {\"rescan\", RPCArg::Type::BOOL, /* default */ \"true\", \"Rescan the wallet for transactions\"},\n                 },\n                 RPCResults{},\n                 RPCExamples{\n@@ -548,7 +548,7 @@ UniValue importwallet(const JSONRPCRequest& request)\n             RPCHelpMan{\"importwallet\",\n                 \"\\nImports keys from a wallet dump file (see dumpwallet). Requires a new wallet backup to include imported keys.\\n\",\n                 {\n-                    {\"filename\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The wallet file\"},\n+                    {\"filename\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The wallet file\"},\n                 },\n                 RPCResults{},\n                 RPCExamples{\n@@ -709,7 +709,7 @@ UniValue dumpprivkey(const JSONRPCRequest& request)\n                 \"\\nReveals the private key corresponding to 'address'.\\n\"\n                 \"Then the importprivkey can be used with this output\\n\",\n                 {\n-                    {\"address\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The bitcoin address for the private key\"},\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The bitcoin address for the private key\"},\n                 },\n                 RPCResult{\n             \"\\\"key\\\"                (string) The private key\\n\"\n@@ -759,7 +759,7 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n                 \"Note that if your wallet contains keys which are not derived from your HD seed (e.g. imported keys), these are not covered by\\n\"\n                 \"only backing up the seed itself, and must be backed up too (e.g. ensure you back up the whole dumpfile).\\n\",\n                 {\n-                    {\"filename\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The filename with path (either absolute or relative to bitcoind)\"},\n+                    {\"filename\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The filename with path (either absolute or relative to bitcoind)\"},\n                 },\n                 RPCResult{\n             \"{                           (json object)\\n\"\n@@ -1319,50 +1319,50 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n             \"\\nNote: This call can take over an hour to complete if rescan is true, during that time, other rpc calls\\n\"\n             \"may report that the imported keys, addresses or scripts exists but related transactions are still missing.\\n\",\n                 {\n-                    {\"requests\", RPCArg::Type::ARR, /* opt */ false, /* default_val */ \"\", \"Data to be imported\",\n+                    {\"requests\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"Data to be imported\",\n                         {\n-                            {\"\", RPCArg::Type::OBJ, /* opt */ false, /* default_val */ \"\", \"\",\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n                                 {\n-                                    {\"desc\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"Descriptor to import. If using descriptor, do not also provide address/scriptPubKey, scripts, or pubkeys\"},\n-                                    {\"scriptPubKey\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"Type of scriptPubKey (string for script, json for address). Should not be provided if using a descriptor\",\n+                                    {\"desc\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"Descriptor to import. If using descriptor, do not also provide address/scriptPubKey, scripts, or pubkeys\"},\n+                                    {\"scriptPubKey\", RPCArg::Type::STR, RPCArg::Optional::NO, \"Type of scriptPubKey (string for script, json for address). Should not be provided if using a descriptor\",\n                                         /* oneline_description */ \"\", {\"\\\"<script>\\\" | { \\\"address\\\":\\\"<address>\\\" }\", \"string / json\"}\n                                     },\n-                                    {\"timestamp\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"Creation time of the key in seconds since epoch (Jan 1 1970 GMT),\\n\"\n+                                    {\"timestamp\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Creation time of the key in seconds since epoch (Jan 1 1970 GMT),\\n\"\n         \"                                                              or the string \\\"now\\\" to substitute the current synced blockchain time. The timestamp of the oldest\\n\"\n         \"                                                              key will determine how far back blockchain rescans need to begin for missing wallet transactions.\\n\"\n         \"                                                              \\\"now\\\" can be specified to bypass scanning, for keys which are known to never have been used, and\\n\"\n         \"                                                              0 can be specified to scan the entire blockchain. Blocks up to 2 hours before the earliest key\\n\"\n         \"                                                              creation time of all keys being imported by the importmulti call will be scanned.\",\n                                         /* oneline_description */ \"\", {\"timestamp | \\\"now\\\"\", \"integer / string\"}\n                                     },\n-                                    {\"redeemscript\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"omitted\", \"Allowed only if the scriptPubKey is a P2SH or P2SH-P2WSH address/scriptPubKey\"},\n-                                    {\"witnessscript\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"omitted\", \"Allowed only if the scriptPubKey is a P2SH-P2WSH or P2WSH address/scriptPubKey\"},\n-                                    {\"pubkeys\", RPCArg::Type::ARR, /* opt */ true, /* default_val */ \"empty array\", \"Array of strings giving pubkeys to import. They must occur in P2PKH or P2WPKH scripts. They are not required when the private key is also provided (see the \\\"keys\\\" argument).\",\n+                                    {\"redeemscript\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"Allowed only if the scriptPubKey is a P2SH or P2SH-P2WSH address/scriptPubKey\"},\n+                                    {\"witnessscript\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"Allowed only if the scriptPubKey is a P2SH-P2WSH or P2WSH address/scriptPubKey\"},\n+                                    {\"pubkeys\", RPCArg::Type::ARR, /* default */ \"empty array\", \"Array of strings giving pubkeys to import. They must occur in P2PKH or P2WPKH scripts. They are not required when the private key is also provided (see the \\\"keys\\\" argument).\",\n                                         {\n-                                            {\"pubKey\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"\"},\n+                                            {\"pubKey\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"\"},\n                                         }\n                                     },\n-                                    {\"keys\", RPCArg::Type::ARR, /* opt */ true, /* default_val */ \"empty array\", \"Array of strings giving private keys to import. The corresponding public keys must occur in the output or redeemscript.\",\n+                                    {\"keys\", RPCArg::Type::ARR, /* default */ \"empty array\", \"Array of strings giving private keys to import. The corresponding public keys must occur in the output or redeemscript.\",\n                                         {\n-                                            {\"key\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"\"},\n+                                            {\"key\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"\"},\n                                         }\n                                     },\n-                                    {\"range\", RPCArg::Type::OBJ, /* opt */ true, /* default_val */ \"\", \"If a ranged descriptor is used, this specifies the start and end of the range to import\",\n+                                    {\"range\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"If a ranged descriptor is used, this specifies the start and end of the range to import\",\n                                         {\n-                                            {\"start\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"0\", \"Start of the range to import\"},\n-                                            {\"end\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"End of the range to import (inclusive)\"},\n+                                            {\"start\", RPCArg::Type::NUM, /* default */ \"0\", \"Start of the range to import\"},\n+                                            {\"end\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"End of the range to import (inclusive)\"},\n                                         }\n                                     },\n-                                    {\"internal\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Stating whether matching outputs should be treated as not incoming payments (also known as change)\"},\n-                                    {\"watchonly\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Stating whether matching outputs should be considered watchonly.\"},\n-                                    {\"label\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"''\", \"Label to assign to the address, only allowed with internal=false\"},\n+                                    {\"internal\", RPCArg::Type::BOOL, /* default */ \"false\", \"Stating whether matching outputs should be treated as not incoming payments (also known as change)\"},\n+                                    {\"watchonly\", RPCArg::Type::BOOL, /* default */ \"false\", \"Stating whether matching outputs should be considered watchonly.\"},\n+                                    {\"label\", RPCArg::Type::STR, /* default */ \"''\", \"Label to assign to the address, only allowed with internal=false\"},\n                                 },\n                             },\n                         },\n                         \"\\\"requests\\\"\"},\n-                    {\"options\", RPCArg::Type::OBJ, /* opt */ true, /* default_val */ \"null\", \"\",\n+                    {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n                         {\n-                            {\"rescan\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"true\", \"Stating if should rescan the blockchain after all imports\"},\n+                            {\"rescan\", RPCArg::Type::BOOL, /* default */ \"true\", \"Stating if should rescan the blockchain after all imports\"},\n                         },\n                         \"\\\"options\\\"\"},\n                 },"
      },
      {
        "sha": "7dd27d7866416dce2bf787d6857b008339cc5366",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 149,
        "deletions": 149,
        "changes": 298,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0ad4e7ce8f4c19fe58bf06747bf8c62600581c/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0ad4e7ce8f4c19fe58bf06747bf8c62600581c/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=fa0ad4e7ce8f4c19fe58bf06747bf8c62600581c",
        "patch": "@@ -158,8 +158,8 @@ static UniValue getnewaddress(const JSONRPCRequest& request)\n                 \"If 'label' is specified, it is added to the address book \\n\"\n                 \"so payments received with the address will be associated with 'label'.\\n\",\n                 {\n-                    {\"label\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"null\", \"The label name for the address to be linked to. If not provided, the default label \\\"\\\" is used. It can also be set to the empty string \\\"\\\" to represent the default label. The label does not need to exist, it will be created if there is no label by the given name.\"},\n-                    {\"address_type\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"set by -addresstype\", \"The address type to use. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n+                    {\"label\", RPCArg::Type::STR, /* default */ \"\\\"\\\"\", \"The label name for the address to be linked to. It can also be set to the empty string \\\"\\\" to represent the default label. The label does not need to exist, it will be created if there is no label by the given name.\"},\n+                    {\"address_type\", RPCArg::Type::STR, /* default */ \"set by -addresstype\", \"The address type to use. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n                 },\n                 RPCResult{\n             \"\\\"address\\\"    (string) The new bitcoin address\\n\"\n@@ -226,7 +226,7 @@ static UniValue getrawchangeaddress(const JSONRPCRequest& request)\n                 \"\\nReturns a new Bitcoin address, for receiving change.\\n\"\n                 \"This is for use with raw transactions, NOT normal use.\\n\",\n                 {\n-                    {\"address_type\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"set by -changetype\", \"The address type to use. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n+                    {\"address_type\", RPCArg::Type::STR, /* default */ \"set by -changetype\", \"The address type to use. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n                 },\n                 RPCResult{\n             \"\\\"address\\\"    (string) The address\\n\"\n@@ -287,8 +287,8 @@ static UniValue setlabel(const JSONRPCRequest& request)\n             RPCHelpMan{\"setlabel\",\n                 \"\\nSets the label associated with the given address.\\n\",\n                 {\n-                    {\"address\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The bitcoin address to be associated with a label.\"},\n-                    {\"label\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The label to assign to the address.\"},\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The bitcoin address to be associated with a label.\"},\n+                    {\"label\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The label to assign to the address.\"},\n                 },\n                 RPCResults{},\n                 RPCExamples{\n@@ -371,18 +371,18 @@ static UniValue sendtoaddress(const JSONRPCRequest& request)\n                 \"\\nSend an amount to a given address.\" +\n                     HelpRequiringPassphrase(pwallet) + \"\\n\",\n                 {\n-                    {\"address\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The bitcoin address to send to.\"},\n-                    {\"amount\", RPCArg::Type::AMOUNT, /* opt */ false, /* default_val */ \"\", \"The amount in \" + CURRENCY_UNIT + \" to send. eg 0.1\"},\n-                    {\"comment\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"null\", \"A comment used to store what the transaction is for.\\n\"\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The bitcoin address to send to.\"},\n+                    {\"amount\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"The amount in \" + CURRENCY_UNIT + \" to send. eg 0.1\"},\n+                    {\"comment\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"A comment used to store what the transaction is for.\\n\"\n             \"                             This is not part of the transaction, just kept in your wallet.\"},\n-                    {\"comment_to\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"null\", \"A comment to store the name of the person or organization\\n\"\n+                    {\"comment_to\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"A comment to store the name of the person or organization\\n\"\n             \"                             to which you're sending the transaction. This is not part of the \\n\"\n             \"                             transaction, just kept in your wallet.\"},\n-                    {\"subtractfeefromamount\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"The fee will be deducted from the amount being sent.\\n\"\n+                    {\"subtractfeefromamount\", RPCArg::Type::BOOL, /* default */ \"false\", \"The fee will be deducted from the amount being sent.\\n\"\n             \"                             The recipient will receive less bitcoins than you enter in the amount field.\"},\n-                    {\"replaceable\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"fallback to wallet's default\", \"Allow this transaction to be replaced by a transaction with higher fees via BIP 125\"},\n-                    {\"conf_target\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"fallback to wallet's default\", \"Confirmation target (in blocks)\"},\n-                    {\"estimate_mode\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"UNSET\", \"The fee estimate mode, must be one of:\\n\"\n+                    {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"fallback to wallet's default\", \"Allow this transaction to be replaced by a transaction with higher fees via BIP 125\"},\n+                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"fallback to wallet's default\", \"Confirmation target (in blocks)\"},\n+                    {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"UNSET\", \"The fee estimate mode, must be one of:\\n\"\n             \"       \\\"UNSET\\\"\\n\"\n             \"       \\\"ECONOMICAL\\\"\\n\"\n             \"       \\\"CONSERVATIVE\\\"\"},\n@@ -527,8 +527,8 @@ static UniValue signmessage(const JSONRPCRequest& request)\n                 \"\\nSign a message with the private key of an address\" +\n                     HelpRequiringPassphrase(pwallet) + \"\\n\",\n                 {\n-                    {\"address\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The bitcoin address to use for the private key.\"},\n-                    {\"message\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The message to create a signature of.\"},\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The bitcoin address to use for the private key.\"},\n+                    {\"message\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The message to create a signature of.\"},\n                 },\n                 RPCResult{\n             \"\\\"signature\\\"          (string) The signature of the message encoded in base 64\\n\"\n@@ -593,8 +593,8 @@ static UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n             RPCHelpMan{\"getreceivedbyaddress\",\n                 \"\\nReturns the total amount received by the given address in transactions with at least minconf confirmations.\\n\",\n                 {\n-                    {\"address\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The bitcoin address for transactions.\"},\n-                    {\"minconf\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"1\", \"Only include transactions confirmed at least this many times.\"},\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The bitcoin address for transactions.\"},\n+                    {\"minconf\", RPCArg::Type::NUM, /* default */ \"1\", \"Only include transactions confirmed at least this many times.\"},\n                 },\n                 RPCResult{\n             \"amount   (numeric) The total amount in \" + CURRENCY_UNIT + \" received at this address.\\n\"\n@@ -665,8 +665,8 @@ static UniValue getreceivedbylabel(const JSONRPCRequest& request)\n             RPCHelpMan{\"getreceivedbylabel\",\n                 \"\\nReturns the total amount received by addresses with <label> in transactions with at least [minconf] confirmations.\\n\",\n                 {\n-                    {\"label\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The selected label, may be the default label using \\\"\\\".\"},\n-                    {\"minconf\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"1\", \"Only include transactions confirmed at least this many times.\"},\n+                    {\"label\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The selected label, may be the default label using \\\"\\\".\"},\n+                    {\"minconf\", RPCArg::Type::NUM, /* default */ \"1\", \"Only include transactions confirmed at least this many times.\"},\n                 },\n                 RPCResult{\n             \"amount              (numeric) The total amount in \" + CURRENCY_UNIT + \" received for this label.\\n\"\n@@ -737,9 +737,9 @@ static UniValue getbalance(const JSONRPCRequest& request)\n                 \"The available balance is what the wallet considers currently spendable, and is\\n\"\n                 \"thus affected by options which limit spendability such as -spendzeroconfchange.\\n\",\n                 {\n-                    {\"dummy\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"null\", \"Remains for backward compatibility. Must be excluded or set to \\\"*\\\".\"},\n-                    {\"minconf\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"0\", \"Only include transactions confirmed at least this many times.\"},\n-                    {\"include_watchonly\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Also include balance in watch-only addresses (see 'importaddress')\"},\n+                    {\"dummy\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Remains for backward compatibility. Must be excluded or set to \\\"*\\\".\"},\n+                    {\"minconf\", RPCArg::Type::NUM, /* default */ \"0\", \"Only include transactions confirmed at least this many times.\"},\n+                    {\"include_watchonly\", RPCArg::Type::BOOL, /* default */ \"false\", \"Also include balance in watch-only addresses (see 'importaddress')\"},\n                 },\n                 RPCResult{\n             \"amount              (numeric) The total amount in \" + CURRENCY_UNIT + \" received for this wallet.\\n\"\n@@ -823,25 +823,25 @@ static UniValue sendmany(const JSONRPCRequest& request)\n                 \"\\nSend multiple times. Amounts are double-precision floating point numbers.\" +\n                     HelpRequiringPassphrase(pwallet) + \"\\n\",\n                 {\n-                    {\"dummy\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"Must be set to \\\"\\\" for backwards compatibility.\", \"\\\"\\\"\"},\n-                    {\"amounts\", RPCArg::Type::OBJ, /* opt */ false, /* default_val */ \"\", \"A json object with addresses and amounts\",\n+                    {\"dummy\", RPCArg::Type::STR, RPCArg::Optional::NO, \"Must be set to \\\"\\\" for backwards compatibility.\", \"\\\"\\\"\"},\n+                    {\"amounts\", RPCArg::Type::OBJ, RPCArg::Optional::NO, \"A json object with addresses and amounts\",\n                         {\n-                            {\"address\", RPCArg::Type::AMOUNT, /* opt */ false, /* default_val */ \"\", \"The bitcoin address is the key, the numeric amount (can be string) in \" + CURRENCY_UNIT + \" is the value\"},\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"The bitcoin address is the key, the numeric amount (can be string) in \" + CURRENCY_UNIT + \" is the value\"},\n                         },\n                     },\n-                    {\"minconf\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"1\", \"Only use the balance confirmed at least this many times.\"},\n-                    {\"comment\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"null\", \"A comment\"},\n-                    {\"subtractfeefrom\", RPCArg::Type::ARR, /* opt */ true, /* default_val */ \"null\", \"A json array with addresses.\\n\"\n+                    {\"minconf\", RPCArg::Type::NUM, /* default */ \"1\", \"Only use the balance confirmed at least this many times.\"},\n+                    {\"comment\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"A comment\"},\n+                    {\"subtractfeefrom\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"A json array with addresses.\\n\"\n             \"                           The fee will be equally deducted from the amount of each selected address.\\n\"\n             \"                           Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n             \"                           If no addresses are specified here, the sender pays the fee.\",\n                         {\n-                            {\"address\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"Subtract fee from this address\"},\n+                            {\"address\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"Subtract fee from this address\"},\n                         },\n                     },\n-                    {\"replaceable\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"fallback to wallet's default\", \"Allow this transaction to be replaced by a transaction with higher fees via BIP 125\"},\n-                    {\"conf_target\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"fallback to wallet's default\", \"Confirmation target (in blocks)\"},\n-                    {\"estimate_mode\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"UNSET\", \"The fee estimate mode, must be one of:\\n\"\n+                    {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"fallback to wallet's default\", \"Allow this transaction to be replaced by a transaction with higher fees via BIP 125\"},\n+                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"fallback to wallet's default\", \"Confirmation target (in blocks)\"},\n+                    {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"UNSET\", \"The fee estimate mode, must be one of:\\n\"\n             \"       \\\"UNSET\\\"\\n\"\n             \"       \\\"ECONOMICAL\\\"\\n\"\n             \"       \\\"CONSERVATIVE\\\"\"},\n@@ -983,14 +983,14 @@ static UniValue addmultisigaddress(const JSONRPCRequest& request)\n                 \"See `importaddress` for watchonly p2sh address support.\\n\"\n                 \"If 'label' is specified, assign address to that label.\\n\",\n                 {\n-                    {\"nrequired\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"The number of required signatures out of the n keys or addresses.\"},\n-                    {\"keys\", RPCArg::Type::ARR, /* opt */ false, /* default_val */ \"\", \"A json array of bitcoin addresses or hex-encoded public keys\",\n+                    {\"nrequired\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The number of required signatures out of the n keys or addresses.\"},\n+                    {\"keys\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"A json array of bitcoin addresses or hex-encoded public keys\",\n                         {\n-                            {\"key\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"bitcoin address or hex-encoded public key\"},\n+                            {\"key\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"bitcoin address or hex-encoded public key\"},\n                         },\n                         },\n-                    {\"label\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"null\", \"A label to assign the addresses to.\"},\n-                    {\"address_type\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"set by -addresstype\", \"The address type to use. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n+                    {\"label\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"A label to assign the addresses to.\"},\n+                    {\"address_type\", RPCArg::Type::STR, /* default */ \"set by -addresstype\", \"The address type to use. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n                 },\n                 RPCResult{\n             \"{\\n\"\n@@ -1217,10 +1217,10 @@ static UniValue listreceivedbyaddress(const JSONRPCRequest& request)\n             RPCHelpMan{\"listreceivedbyaddress\",\n                 \"\\nList balances by receiving address.\\n\",\n                 {\n-                    {\"minconf\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"1\", \"The minimum number of confirmations before payments are included.\"},\n-                    {\"include_empty\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Whether to include addresses that haven't received any payments.\"},\n-                    {\"include_watchonly\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Whether to include watch-only addresses (see 'importaddress').\"},\n-                    {\"address_filter\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"null\", \"If present, only return information on this address.\"},\n+                    {\"minconf\", RPCArg::Type::NUM, /* default */ \"1\", \"The minimum number of confirmations before payments are included.\"},\n+                    {\"include_empty\", RPCArg::Type::BOOL, /* default */ \"false\", \"Whether to include addresses that haven't received any payments.\"},\n+                    {\"include_watchonly\", RPCArg::Type::BOOL, /* default */ \"false\", \"Whether to include watch-only addresses (see 'importaddress').\"},\n+                    {\"address_filter\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"If present, only return information on this address.\"},\n                 },\n                 RPCResult{\n             \"[\\n\"\n@@ -1270,9 +1270,9 @@ static UniValue listreceivedbylabel(const JSONRPCRequest& request)\n             RPCHelpMan{\"listreceivedbylabel\",\n                 \"\\nList received transactions by label.\\n\",\n                 {\n-                    {\"minconf\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"1\", \"The minimum number of confirmations before payments are included.\"},\n-                    {\"include_empty\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Whether to include labels that haven't received any payments.\"},\n-                    {\"include_watchonly\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Whether to include watch-only addresses (see 'importaddress').\"},\n+                    {\"minconf\", RPCArg::Type::NUM, /* default */ \"1\", \"The minimum number of confirmations before payments are included.\"},\n+                    {\"include_empty\", RPCArg::Type::BOOL, /* default */ \"false\", \"Whether to include labels that haven't received any payments.\"},\n+                    {\"include_watchonly\", RPCArg::Type::BOOL, /* default */ \"false\", \"Whether to include watch-only addresses (see 'importaddress').\"},\n                 },\n                 RPCResult{\n             \"[\\n\"\n@@ -1411,11 +1411,11 @@ UniValue listtransactions(const JSONRPCRequest& request)\n                 \"\\nIf a label name is provided, this will return only incoming transactions paying to addresses with the specified label.\\n\"\n                 \"\\nReturns up to 'count' most recent transactions skipping the first 'from' transactions.\\n\",\n                 {\n-                    {\"label\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"null\", \"If set, should be a valid label name to return only incoming transactions\\n\"\n+                    {\"label\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"If set, should be a valid label name to return only incoming transactions\\n\"\n             \"              with the specified label, or \\\"*\\\" to disable filtering and return all transactions.\"},\n-                    {\"count\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"10\", \"The number of transactions to return\"},\n-                    {\"skip\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"0\", \"The number of transactions to skip\"},\n-                    {\"include_watchonly\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Include transactions to watch-only addresses (see 'importaddress')\"},\n+                    {\"count\", RPCArg::Type::NUM, /* default */ \"10\", \"The number of transactions to return\"},\n+                    {\"skip\", RPCArg::Type::NUM, /* default */ \"0\", \"The number of transactions to skip\"},\n+                    {\"include_watchonly\", RPCArg::Type::BOOL, /* default */ \"false\", \"Include transactions to watch-only addresses (see 'importaddress')\"},\n                 },\n                 RPCResult{\n             \"[\\n\"\n@@ -1546,10 +1546,10 @@ static UniValue listsinceblock(const JSONRPCRequest& request)\n                 \"If \\\"blockhash\\\" is no longer a part of the main chain, transactions from the fork point onward are included.\\n\"\n                 \"Additionally, if include_removed is set, transactions affecting the wallet which were removed are returned in the \\\"removed\\\" array.\\n\",\n                 {\n-                    {\"blockhash\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"null\", \"If set, the block hash to list transactions since, otherwise list all transactions.\"},\n-                    {\"target_confirmations\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"1\", \"Return the nth block hash from the main chain. e.g. 1 would mean the best block hash. Note: this is not used as a filter, but only affects [lastblock] in the return value\"},\n-                    {\"include_watchonly\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Include transactions to watch-only addresses (see 'importaddress')\"},\n-                    {\"include_removed\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"true\", \"Show transactions that were removed due to a reorg in the \\\"removed\\\" array\\n\"\n+                    {\"blockhash\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"If set, the block hash to list transactions since, otherwise list all transactions.\"},\n+                    {\"target_confirmations\", RPCArg::Type::NUM, /* default */ \"1\", \"Return the nth block hash from the main chain. e.g. 1 would mean the best block hash. Note: this is not used as a filter, but only affects [lastblock] in the return value\"},\n+                    {\"include_watchonly\", RPCArg::Type::BOOL, /* default */ \"false\", \"Include transactions to watch-only addresses (see 'importaddress')\"},\n+                    {\"include_removed\", RPCArg::Type::BOOL, /* default */ \"true\", \"Show transactions that were removed due to a reorg in the \\\"removed\\\" array\\n\"\n             \"                                                           (not guaranteed to work on pruned nodes)\"},\n                 },\n                 RPCResult{\n@@ -1689,8 +1689,8 @@ static UniValue gettransaction(const JSONRPCRequest& request)\n             RPCHelpMan{\"gettransaction\",\n                 \"\\nGet detailed information about in-wallet transaction <txid>\\n\",\n                 {\n-                    {\"txid\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The transaction id\"},\n-                    {\"include_watchonly\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Whether to include watch-only addresses in balance calculation and details[]\"},\n+                    {\"txid\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The transaction id\"},\n+                    {\"include_watchonly\", RPCArg::Type::BOOL, /* default */ \"false\", \"Whether to include watch-only addresses in balance calculation and details[]\"},\n                 },\n                 RPCResult{\n             \"{\\n\"\n@@ -1795,7 +1795,7 @@ static UniValue abandontransaction(const JSONRPCRequest& request)\n                 \"It only works on transactions which are not included in a block and are not currently in the mempool.\\n\"\n                 \"It has no effect on transactions which are already abandoned.\\n\",\n                 {\n-                    {\"txid\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The transaction id\"},\n+                    {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n                 },\n                 RPCResults{},\n                 RPCExamples{\n@@ -1839,7 +1839,7 @@ static UniValue backupwallet(const JSONRPCRequest& request)\n             RPCHelpMan{\"backupwallet\",\n                 \"\\nSafely copies current wallet file to destination, which can be a directory or a path with filename.\\n\",\n                 {\n-                    {\"destination\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The destination directory or file\"},\n+                    {\"destination\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The destination directory or file\"},\n                 },\n                 RPCResults{},\n                 RPCExamples{\n@@ -1879,7 +1879,7 @@ static UniValue keypoolrefill(const JSONRPCRequest& request)\n                 \"\\nFills the keypool.\"+\n                     HelpRequiringPassphrase(pwallet) + \"\\n\",\n                 {\n-                    {\"newsize\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"100\", \"The new keypool size\"},\n+                    {\"newsize\", RPCArg::Type::NUM, /* default */ \"100\", \"The new keypool size\"},\n                 },\n                 RPCResults{},\n                 RPCExamples{\n@@ -1932,8 +1932,8 @@ static UniValue walletpassphrase(const JSONRPCRequest& request)\n             \"Issuing the walletpassphrase command while the wallet is already unlocked will set a new unlock\\n\"\n             \"time that overrides the old one.\\n\",\n                 {\n-                    {\"passphrase\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The wallet passphrase\"},\n-                    {\"timeout\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"The time to keep the decryption key in seconds; capped at 100000000 (~3 years).\"},\n+                    {\"passphrase\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The wallet passphrase\"},\n+                    {\"timeout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The time to keep the decryption key in seconds; capped at 100000000 (~3 years).\"},\n                 },\n                 RPCResults{},\n                 RPCExamples{\n@@ -2015,8 +2015,8 @@ static UniValue walletpassphrasechange(const JSONRPCRequest& request)\n             RPCHelpMan{\"walletpassphrasechange\",\n                 \"\\nChanges the wallet passphrase from 'oldpassphrase' to 'newpassphrase'.\\n\",\n                 {\n-                    {\"oldpassphrase\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The current passphrase\"},\n-                    {\"newpassphrase\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The new passphrase\"},\n+                    {\"oldpassphrase\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The current passphrase\"},\n+                    {\"newpassphrase\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The new passphrase\"},\n                 },\n                 RPCResults{},\n                 RPCExamples{\n@@ -2117,7 +2117,7 @@ static UniValue encryptwallet(const JSONRPCRequest& request)\n                 \"Use the walletpassphrase call for this, and then walletlock call.\\n\"\n                 \"If the wallet is already encrypted, use the walletpassphrasechange call.\\n\",\n                 {\n-                    {\"passphrase\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The pass phrase to encrypt the wallet with. It must be at least 1 character, but should be long.\"},\n+                    {\"passphrase\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The pass phrase to encrypt the wallet with. It must be at least 1 character, but should be long.\"},\n                 },\n                 RPCResults{},\n                 RPCExamples{\n@@ -2179,13 +2179,13 @@ static UniValue lockunspent(const JSONRPCRequest& request)\n                 \"is always cleared (by virtue of process exit) when a node stops or fails.\\n\"\n                 \"Also see the listunspent call\\n\",\n                 {\n-                    {\"unlock\", RPCArg::Type::BOOL, /* opt */ false, /* default_val */ \"\", \"Whether to unlock (true) or lock (false) the specified transactions\"},\n-                    {\"transactions\", RPCArg::Type::ARR, /* opt */ true, /* default_val */ \"empty array\", \"A json array of objects. Each object the txid (string) vout (numeric).\",\n+                    {\"unlock\", RPCArg::Type::BOOL, RPCArg::Optional::NO, \"Whether to unlock (true) or lock (false) the specified transactions\"},\n+                    {\"transactions\", RPCArg::Type::ARR, /* default */ \"empty array\", \"A json array of objects. Each object the txid (string) vout (numeric).\",\n                         {\n-                            {\"\", RPCArg::Type::OBJ, /* opt */ true, /* default_val */ \"\", \"\",\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n                                 {\n-                                    {\"txid\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The transaction id\"},\n-                                    {\"vout\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"The output number\"},\n+                                    {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                                    {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n                                 },\n                             },\n                         },\n@@ -2359,7 +2359,7 @@ static UniValue settxfee(const JSONRPCRequest& request)\n             RPCHelpMan{\"settxfee\",\n                 \"\\nSet the transaction fee per kB for this wallet. Overrides the global -paytxfee command line parameter.\\n\",\n                 {\n-                    {\"amount\", RPCArg::Type::AMOUNT, /* opt */ false, /* default_val */ \"\", \"The transaction fee in \" + CURRENCY_UNIT + \"/kB\"},\n+                    {\"amount\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"The transaction fee in \" + CURRENCY_UNIT + \"/kB\"},\n                 },\n                 RPCResult{\n             \"true|false        (boolean) Returns true if successful\\n\"\n@@ -2540,7 +2540,7 @@ static UniValue loadwallet(const JSONRPCRequest& request)\n                 \"\\nNote that all wallet command-line options used when starting bitcoind will be\"\n                 \"\\napplied to the new wallet (eg -zapwallettxes, upgradewallet, rescan, etc).\\n\",\n                 {\n-                    {\"filename\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The wallet directory or .dat file.\"},\n+                    {\"filename\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The wallet directory or .dat file.\"},\n                 },\n                 RPCResult{\n             \"{\\n\"\n@@ -2594,9 +2594,9 @@ static UniValue createwallet(const JSONRPCRequest& request)\n             RPCHelpMan{\"createwallet\",\n                 \"\\nCreates and loads a new wallet.\\n\",\n                 {\n-                    {\"wallet_name\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The name for the new wallet. If this is a path, the wallet will be created at the path location.\"},\n-                    {\"disable_private_keys\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Disable the possibility of private keys (only watchonlys are possible in this mode).\"},\n-                    {\"blank\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Create a blank wallet. A blank wallet has no keys or HD seed. One can be set using sethdseed.\"},\n+                    {\"wallet_name\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The name for the new wallet. If this is a path, the wallet will be created at the path location.\"},\n+                    {\"disable_private_keys\", RPCArg::Type::BOOL, /* default */ \"false\", \"Disable the possibility of private keys (only watchonlys are possible in this mode).\"},\n+                    {\"blank\", RPCArg::Type::BOOL, /* default */ \"false\", \"Create a blank wallet. A blank wallet has no keys or HD seed. One can be set using sethdseed.\"},\n                 },\n                 RPCResult{\n             \"{\\n\"\n@@ -2655,7 +2655,7 @@ static UniValue unloadwallet(const JSONRPCRequest& request)\n                 \"Unloads the wallet referenced by the request endpoint otherwise unloads the wallet specified in the argument.\\n\"\n                 \"Specifying the wallet name on a wallet endpoint is invalid.\",\n                 {\n-                    {\"wallet_name\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"the wallet name from the RPC request\", \"The name of the wallet to unload.\"},\n+                    {\"wallet_name\", RPCArg::Type::STR, /* default */ \"the wallet name from the RPC request\", \"The name of the wallet to unload.\"},\n                 },\n                 RPCResults{},\n                 RPCExamples{\n@@ -2750,21 +2750,21 @@ static UniValue listunspent(const JSONRPCRequest& request)\n                 \"with between minconf and maxconf (inclusive) confirmations.\\n\"\n                 \"Optionally filter to only include txouts paid to specified addresses.\\n\",\n                 {\n-                    {\"minconf\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"1\", \"The minimum confirmations to filter\"},\n-                    {\"maxconf\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"9999999\", \"The maximum confirmations to filter\"},\n-                    {\"addresses\", RPCArg::Type::ARR, /* opt */ true, /* default_val */ \"empty array\", \"A json array of bitcoin addresses to filter\",\n+                    {\"minconf\", RPCArg::Type::NUM, /* default */ \"1\", \"The minimum confirmations to filter\"},\n+                    {\"maxconf\", RPCArg::Type::NUM, /* default */ \"9999999\", \"The maximum confirmations to filter\"},\n+                    {\"addresses\", RPCArg::Type::ARR, /* default */ \"empty array\", \"A json array of bitcoin addresses to filter\",\n                         {\n-                            {\"address\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"bitcoin address\"},\n+                            {\"address\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"bitcoin address\"},\n                         },\n                     },\n-                    {\"include_unsafe\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"true\", \"Include outputs that are not safe to spend\\n\"\n+                    {\"include_unsafe\", RPCArg::Type::BOOL, /* default */ \"true\", \"Include outputs that are not safe to spend\\n\"\n             \"                  See description of \\\"safe\\\" attribute below.\"},\n-                    {\"query_options\", RPCArg::Type::OBJ, /* opt */ true, /* default_val */ \"null\", \"JSON with query options\",\n+                    {\"query_options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"JSON with query options\",\n                         {\n-                            {\"minimumAmount\", RPCArg::Type::AMOUNT, /* opt */ true, /* default_val */ \"0\", \"Minimum value of each UTXO in \" + CURRENCY_UNIT + \"\"},\n-                            {\"maximumAmount\", RPCArg::Type::AMOUNT, /* opt */ true, /* default_val */ \"unlimited\", \"Maximum value of each UTXO in \" + CURRENCY_UNIT + \"\"},\n-                            {\"maximumCount\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"unlimited\", \"Maximum number of UTXOs\"},\n-                            {\"minimumSumAmount\", RPCArg::Type::AMOUNT, /* opt */ true, /* default_val */ \"unlimited\", \"Minimum sum value of all UTXOs in \" + CURRENCY_UNIT + \"\"},\n+                            {\"minimumAmount\", RPCArg::Type::AMOUNT, /* default */ \"0\", \"Minimum value of each UTXO in \" + CURRENCY_UNIT + \"\"},\n+                            {\"maximumAmount\", RPCArg::Type::AMOUNT, /* default */ \"unlimited\", \"Maximum value of each UTXO in \" + CURRENCY_UNIT + \"\"},\n+                            {\"maximumCount\", RPCArg::Type::NUM, /* default */ \"unlimited\", \"Maximum number of UTXOs\"},\n+                            {\"minimumSumAmount\", RPCArg::Type::AMOUNT, /* default */ \"unlimited\", \"Minimum sum value of all UTXOs in \" + CURRENCY_UNIT + \"\"},\n                         },\n                         \"query_options\"},\n                 },\n@@ -3052,33 +3052,33 @@ static UniValue fundrawtransaction(const JSONRPCRequest& request)\n                 \"You can see whether this is the case by checking the \\\"solvable\\\" field in the listunspent output.\\n\"\n                 \"Only pay-to-pubkey, multisig, and P2SH versions thereof are currently supported for watch-only\\n\",\n                 {\n-                    {\"hexstring\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The hex string of the raw transaction\"},\n-                    {\"options\", RPCArg::Type::OBJ, /* opt */ true, /* default_val */ \"null\", \"for backward compatibility: passing in a true instead of an object will result in {\\\"includeWatching\\\":true}\",\n+                    {\"hexstring\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The hex string of the raw transaction\"},\n+                    {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"for backward compatibility: passing in a true instead of an object will result in {\\\"includeWatching\\\":true}\",\n                         {\n-                            {\"changeAddress\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"pool address\", \"The bitcoin address to receive the change\"},\n-                            {\"changePosition\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"random\", \"The index of the change output\"},\n-                            {\"change_type\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"set by -changetype\", \"The output type to use. Only valid if changeAddress is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n-                            {\"includeWatching\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Also select inputs which are watch only\"},\n-                            {\"lockUnspents\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Lock selected unspent outputs\"},\n-                            {\"feeRate\", RPCArg::Type::AMOUNT, /* opt */ true, /* default_val */ \"not set: makes wallet determine the fee\", \"Set a specific fee rate in \" + CURRENCY_UNIT + \"/kB\"},\n-                            {\"subtractFeeFromOutputs\", RPCArg::Type::ARR, /* opt */ true, /* default_val */ \"empty array\", \"A json array of integers.\\n\"\n+                            {\"changeAddress\", RPCArg::Type::STR, /* default */ \"pool address\", \"The bitcoin address to receive the change\"},\n+                            {\"changePosition\", RPCArg::Type::NUM, /* default */ \"random\", \"The index of the change output\"},\n+                            {\"change_type\", RPCArg::Type::STR, /* default */ \"set by -changetype\", \"The output type to use. Only valid if changeAddress is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n+                            {\"includeWatching\", RPCArg::Type::BOOL, /* default */ \"false\", \"Also select inputs which are watch only\"},\n+                            {\"lockUnspents\", RPCArg::Type::BOOL, /* default */ \"false\", \"Lock selected unspent outputs\"},\n+                            {\"feeRate\", RPCArg::Type::AMOUNT, /* default */ \"not set: makes wallet determine the fee\", \"Set a specific fee rate in \" + CURRENCY_UNIT + \"/kB\"},\n+                            {\"subtractFeeFromOutputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"A json array of integers.\\n\"\n                             \"                              The fee will be equally deducted from the amount of each specified output.\\n\"\n                             \"                              Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n                             \"                              If no outputs are specified here, the sender pays the fee.\",\n                                 {\n-                                    {\"vout_index\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"\", \"The zero-based output index, before a change output is added.\"},\n+                                    {\"vout_index\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The zero-based output index, before a change output is added.\"},\n                                 },\n                             },\n-                            {\"replaceable\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"fallback to wallet's default\", \"Marks this transaction as BIP125 replaceable.\\n\"\n+                            {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"fallback to wallet's default\", \"Marks this transaction as BIP125 replaceable.\\n\"\n                             \"                              Allows this transaction to be replaced by a transaction with higher fees\"},\n-                            {\"conf_target\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"fallback to wallet's default\", \"Confirmation target (in blocks)\"},\n-                            {\"estimate_mode\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"UNSET\", \"The fee estimate mode, must be one of:\\n\"\n+                            {\"conf_target\", RPCArg::Type::NUM, /* default */ \"fallback to wallet's default\", \"Confirmation target (in blocks)\"},\n+                            {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"UNSET\", \"The fee estimate mode, must be one of:\\n\"\n                             \"         \\\"UNSET\\\"\\n\"\n                             \"         \\\"ECONOMICAL\\\"\\n\"\n                             \"         \\\"CONSERVATIVE\\\"\"},\n                         },\n                         \"options\"},\n-                    {\"iswitness\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"depends on heuristic tests\", \"Whether the transaction hex is a serialized witness transaction \\n\"\n+                    {\"iswitness\", RPCArg::Type::BOOL, /* default */ \"depends on heuristic tests\", \"Whether the transaction hex is a serialized witness transaction \\n\"\n                             \"                              If iswitness is not present, heuristic tests will be used in decoding\"},\n                 },\n                 RPCResult{\n@@ -3139,21 +3139,21 @@ UniValue signrawtransactionwithwallet(const JSONRPCRequest& request)\n                 \"this transaction depends on but may not yet be in the block chain.\" +\n                     HelpRequiringPassphrase(pwallet) + \"\\n\",\n                 {\n-                    {\"hexstring\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The transaction hex string\"},\n-                    {\"prevtxs\", RPCArg::Type::ARR, /* opt */ true, /* default_val */ \"null\", \"A json array of previous dependent transaction outputs\",\n+                    {\"hexstring\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The transaction hex string\"},\n+                    {\"prevtxs\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"A json array of previous dependent transaction outputs\",\n                         {\n-                            {\"\", RPCArg::Type::OBJ, /* opt */ false, /* default_val */ \"\", \"\",\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n                                 {\n-                                    {\"txid\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The transaction id\"},\n-                                    {\"vout\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"The output number\"},\n-                                    {\"scriptPubKey\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"script key\"},\n-                                    {\"redeemScript\", RPCArg::Type::STR_HEX, /* opt */ true, /* default_val */ \"omitted\", \"(required for P2SH or P2WSH)\"},\n-                                    {\"amount\", RPCArg::Type::AMOUNT, /* opt */ false, /* default_val */ \"\", \"The amount spent\"},\n+                                    {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                                    {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                                    {\"scriptPubKey\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"script key\"},\n+                                    {\"redeemScript\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"(required for P2SH or P2WSH) redeem script\"},\n+                                    {\"amount\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"The amount spent\"},\n                                 },\n                             },\n                         },\n                     },\n-                    {\"sighashtype\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"ALL\", \"The signature hash type. Must be one of\\n\"\n+                    {\"sighashtype\", RPCArg::Type::STR, /* default */ \"ALL\", \"The signature hash type. Must be one of\\n\"\n             \"       \\\"ALL\\\"\\n\"\n             \"       \\\"NONE\\\"\\n\"\n             \"       \\\"SINGLE\\\"\\n\"\n@@ -3222,22 +3222,22 @@ static UniValue bumpfee(const JSONRPCRequest& request)\n                 \"At a minimum, the new fee rate must be high enough to pay an additional new relay fee (incrementalfee\\n\"\n                 \"returned by getnetworkinfo) to enter the node's mempool.\\n\",\n                 {\n-                    {\"txid\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The txid to be bumped\"},\n-                    {\"options\", RPCArg::Type::OBJ, /* opt */ true, /* default_val */ \"null\", \"\",\n+                    {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The txid to be bumped\"},\n+                    {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n                         {\n-                            {\"confTarget\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"fallback to wallet's default\", \"Confirmation target (in blocks)\"},\n-                            {\"totalFee\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"fallback to 'confTarget'\", \"Total fee (NOT feerate) to pay, in satoshis.\\n\"\n+                            {\"confTarget\", RPCArg::Type::NUM, /* default */ \"fallback to wallet's default\", \"Confirmation target (in blocks)\"},\n+                            {\"totalFee\", RPCArg::Type::NUM, /* default */ \"fallback to 'confTarget'\", \"Total fee (NOT feerate) to pay, in satoshis.\\n\"\n             \"                         In rare cases, the actual fee paid might be slightly higher than the specified\\n\"\n             \"                         totalFee if the tx change output has to be removed because it is too close to\\n\"\n             \"                         the dust threshold.\"},\n-                            {\"replaceable\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"true\", \"Whether the new transaction should still be\\n\"\n+                            {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"true\", \"Whether the new transaction should still be\\n\"\n             \"                         marked bip-125 replaceable. If true, the sequence numbers in the transaction will\\n\"\n             \"                         be left unchanged from the original. If false, any input sequence numbers in the\\n\"\n             \"                         original transaction that were less than 0xfffffffe will be increased to 0xfffffffe\\n\"\n             \"                         so the new transaction will not be explicitly bip-125 replaceable (though it may\\n\"\n             \"                         still be replaceable in practice, for example if it has unconfirmed ancestors which\\n\"\n             \"                         are replaceable).\"},\n-                            {\"estimate_mode\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"UNSET\", \"The fee estimate mode, must be one of:\\n\"\n+                            {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"UNSET\", \"The fee estimate mode, must be one of:\\n\"\n             \"         \\\"UNSET\\\"\\n\"\n             \"         \\\"ECONOMICAL\\\"\\n\"\n             \"         \\\"CONSERVATIVE\\\"\"},\n@@ -3369,8 +3369,8 @@ UniValue generate(const JSONRPCRequest& request)\n             RPCHelpMan{\"generate\",\n                 \"\\nMine up to nblocks blocks immediately (before the RPC call returns) to an address in the wallet.\\n\",\n                 {\n-                    {\"nblocks\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"How many blocks are generated immediately.\"},\n-                    {\"maxtries\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"1000000\", \"How many iterations to try.\"},\n+                    {\"nblocks\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"How many blocks are generated immediately.\"},\n+                    {\"maxtries\", RPCArg::Type::NUM, /* default */ \"1000000\", \"How many iterations to try.\"},\n                 },\n                 RPCResult{\n             \"[ blockhashes ]     (array) hashes of blocks generated\\n\"\n@@ -3424,8 +3424,8 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n             RPCHelpMan{\"rescanblockchain\",\n                 \"\\nRescan the local blockchain for wallet related transactions.\\n\",\n                 {\n-                    {\"start_height\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"0\", \"block height where the rescan should start\"},\n-                    {\"stop_height\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"\", \"the last block height that should be scanned. If none is provided it will rescan up to the tip at return time of this call.\"},\n+                    {\"start_height\", RPCArg::Type::NUM, /* default */ \"0\", \"block height where the rescan should start\"},\n+                    {\"stop_height\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED_NAMED_ARG, \"the last block height that should be scanned. If none is provided it will rescan up to the tip at return time of this call.\"},\n                 },\n                 RPCResult{\n             \"{\\n\"\n@@ -3638,7 +3638,7 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n                 \"\\nReturn information about the given bitcoin address. Some information requires the address\\n\"\n                 \"to be in the wallet.\\n\",\n                 {\n-                    {\"address\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The bitcoin address to get the information of.\"},\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The bitcoin address to get the information of.\"},\n                 },\n                 RPCResult{\n             \"{\\n\"\n@@ -3765,7 +3765,7 @@ static UniValue getaddressesbylabel(const JSONRPCRequest& request)\n             RPCHelpMan{\"getaddressesbylabel\",\n                 \"\\nReturns the list of addresses assigned the specified label.\\n\",\n                 {\n-                    {\"label\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The label.\"},\n+                    {\"label\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The label.\"},\n                 },\n                 RPCResult{\n             \"{ (json object with addresses as keys)\\n\"\n@@ -3813,7 +3813,7 @@ static UniValue listlabels(const JSONRPCRequest& request)\n             RPCHelpMan{\"listlabels\",\n                 \"\\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\\n\",\n                 {\n-                    {\"purpose\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"null\", \"Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\"},\n+                    {\"purpose\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\"},\n                 },\n                 RPCResult{\n             \"[               (json array of string)\\n\"\n@@ -3873,11 +3873,11 @@ UniValue sethdseed(const JSONRPCRequest& request)\n                 \"\\nNote that you will need to MAKE A NEW BACKUP of your wallet after setting the HD wallet seed.\" +\n                     HelpRequiringPassphrase(pwallet) + \"\\n\",\n                 {\n-                    {\"newkeypool\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"true\", \"Whether to flush old unused addresses, including change addresses, from the keypool and regenerate it.\\n\"\n+                    {\"newkeypool\", RPCArg::Type::BOOL, /* default */ \"true\", \"Whether to flush old unused addresses, including change addresses, from the keypool and regenerate it.\\n\"\n             \"                             If true, the next address from getnewaddress and change address from getrawchangeaddress will be from this new seed.\\n\"\n             \"                             If false, addresses (including change addresses if the wallet already had HD Chain Split enabled) from the existing\\n\"\n             \"                             keypool will be used until it has been depleted.\"},\n-                    {\"seed\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"random seed\", \"The WIF private key to use as the new HD seed.\\n\"\n+                    {\"seed\", RPCArg::Type::STR, /* default */ \"random seed\", \"The WIF private key to use as the new HD seed.\\n\"\n             \"                             The seed value can be retrieved using the dumpwallet command. It is the private key marked hdseed=1\"},\n                 },\n                 RPCResults{},\n@@ -4018,16 +4018,16 @@ UniValue walletprocesspsbt(const JSONRPCRequest& request)\n                 \"that we can sign for.\" +\n                     HelpRequiringPassphrase(pwallet) + \"\\n\",\n                 {\n-                    {\"psbt\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The transaction base64 string\"},\n-                    {\"sign\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"true\", \"Also sign the transaction when updating\"},\n-                    {\"sighashtype\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"ALL\", \"The signature hash type to sign with if not specified by the PSBT. Must be one of\\n\"\n+                    {\"psbt\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The transaction base64 string\"},\n+                    {\"sign\", RPCArg::Type::BOOL, /* default */ \"true\", \"Also sign the transaction when updating\"},\n+                    {\"sighashtype\", RPCArg::Type::STR, /* default */ \"ALL\", \"The signature hash type to sign with if not specified by the PSBT. Must be one of\\n\"\n             \"       \\\"ALL\\\"\\n\"\n             \"       \\\"NONE\\\"\\n\"\n             \"       \\\"SINGLE\\\"\\n\"\n             \"       \\\"ALL|ANYONECANPAY\\\"\\n\"\n             \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n             \"       \\\"SINGLE|ANYONECANPAY\\\"\"},\n-                    {\"bip32derivs\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"If true, includes the BIP 32 derivation paths for public keys if we know them\"},\n+                    {\"bip32derivs\", RPCArg::Type::BOOL, /* default */ \"false\", \"If true, includes the BIP 32 derivation paths for public keys if we know them\"},\n                 },\n                 RPCResult{\n             \"{\\n\"\n@@ -4082,61 +4082,61 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n                 \"\\nCreates and funds a transaction in the Partially Signed Transaction format. Inputs will be added if supplied inputs are not enough\\n\"\n                 \"Implements the Creator and Updater roles.\\n\",\n                 {\n-                    {\"inputs\", RPCArg::Type::ARR, /* opt */ false, /* default_val */ \"\", \"A json array of json objects\",\n+                    {\"inputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"A json array of json objects\",\n                         {\n-                            {\"\", RPCArg::Type::OBJ, /* opt */ false, /* default_val */ \"\", \"\",\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n                                 {\n-                                    {\"txid\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The transaction id\"},\n-                                    {\"vout\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"The output number\"},\n-                                    {\"sequence\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"The sequence number\"},\n+                                    {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                                    {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                                    {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n                                 },\n                             },\n                         },\n                         },\n-                    {\"outputs\", RPCArg::Type::ARR, /* opt */ false, /* default_val */ \"\", \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+                    {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n                             \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n                             \"For compatibility reasons, a dictionary, which holds the key-value pairs directly, is also\\n\"\n                             \"                             accepted as second parameter.\",\n                         {\n-                            {\"\", RPCArg::Type::OBJ, /* opt */ true, /* default_val */ \"\", \"\",\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n                                 {\n-                                    {\"address\", RPCArg::Type::AMOUNT, /* opt */ false, /* default_val */ \"\", \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                                    {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n                                 },\n                                 },\n-                            {\"\", RPCArg::Type::OBJ, /* opt */ true, /* default_val */ \"\", \"\",\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n                                 {\n-                                    {\"data\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},\n+                                    {\"data\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},\n                                 },\n                             },\n                         },\n                     },\n-                    {\"locktime\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"0\", \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n-                    {\"options\", RPCArg::Type::OBJ, /* opt */ true, /* default_val */ \"null\", \"\",\n+                    {\"locktime\", RPCArg::Type::NUM, /* default */ \"0\", \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                    {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n                         {\n-                            {\"changeAddress\", RPCArg::Type::STR_HEX, /* opt */ true, /* default_val */ \"pool address\", \"The bitcoin address to receive the change\"},\n-                            {\"changePosition\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"random\", \"The index of the change output\"},\n-                            {\"change_type\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"set by -changetype\", \"The output type to use. Only valid if changeAddress is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n-                            {\"includeWatching\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Also select inputs which are watch only\"},\n-                            {\"lockUnspents\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Lock selected unspent outputs\"},\n-                            {\"feeRate\", RPCArg::Type::AMOUNT, /* opt */ true, /* default_val */ \"not set: makes wallet determine the fee\", \"Set a specific fee rate in \" + CURRENCY_UNIT + \"/kB\"},\n-                            {\"subtractFeeFromOutputs\", RPCArg::Type::ARR, /* opt */ true, /* default_val */ \"empty array\", \"A json array of integers.\\n\"\n+                            {\"changeAddress\", RPCArg::Type::STR_HEX, /* default */ \"pool address\", \"The bitcoin address to receive the change\"},\n+                            {\"changePosition\", RPCArg::Type::NUM, /* default */ \"random\", \"The index of the change output\"},\n+                            {\"change_type\", RPCArg::Type::STR, /* default */ \"set by -changetype\", \"The output type to use. Only valid if changeAddress is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n+                            {\"includeWatching\", RPCArg::Type::BOOL, /* default */ \"false\", \"Also select inputs which are watch only\"},\n+                            {\"lockUnspents\", RPCArg::Type::BOOL, /* default */ \"false\", \"Lock selected unspent outputs\"},\n+                            {\"feeRate\", RPCArg::Type::AMOUNT, /* default */ \"not set: makes wallet determine the fee\", \"Set a specific fee rate in \" + CURRENCY_UNIT + \"/kB\"},\n+                            {\"subtractFeeFromOutputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"A json array of integers.\\n\"\n                             \"                              The fee will be equally deducted from the amount of each specified output.\\n\"\n                             \"                              Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n                             \"                              If no outputs are specified here, the sender pays the fee.\",\n                                 {\n-                                    {\"vout_index\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"\", \"The zero-based output index, before a change output is added.\"},\n+                                    {\"vout_index\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The zero-based output index, before a change output is added.\"},\n                                 },\n                             },\n-                            {\"replaceable\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Marks this transaction as BIP125 replaceable.\\n\"\n+                            {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"false\", \"Marks this transaction as BIP125 replaceable.\\n\"\n                             \"                              Allows this transaction to be replaced by a transaction with higher fees\"},\n-                            {\"conf_target\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"Fallback to wallet's confirmation target\", \"Confirmation target (in blocks)\"},\n-                            {\"estimate_mode\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"UNSET\", \"The fee estimate mode, must be one of:\\n\"\n+                            {\"conf_target\", RPCArg::Type::NUM, /* default */ \"Fallback to wallet's confirmation target\", \"Confirmation target (in blocks)\"},\n+                            {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"UNSET\", \"The fee estimate mode, must be one of:\\n\"\n                             \"         \\\"UNSET\\\"\\n\"\n                             \"         \\\"ECONOMICAL\\\"\\n\"\n                             \"         \\\"CONSERVATIVE\\\"\"},\n                         },\n                         \"options\"},\n-                    {\"bip32derivs\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"If true, includes the BIP 32 derivation paths for public keys if we know them\"},\n+                    {\"bip32derivs\", RPCArg::Type::BOOL, /* default */ \"false\", \"If true, includes the BIP 32 derivation paths for public keys if we know them\"},\n                 },\n                 RPCResult{\n                             \"{\\n\""
      }
    ]
  }
]