[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/457502955",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15250#issuecomment-457502955",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15250",
    "id": 457502955,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NzUwMjk1NQ==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-25T09:00:54Z",
    "updated_at": "2019-01-25T09:00:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "While you're changing `random.cpp`: isn't the `std::move` on L562 without any effect? Could be removed? ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/457502955/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/457756126",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15250#issuecomment-457756126",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15250",
    "id": 457756126,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1Nzc1NjEyNg==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-25T22:34:10Z",
    "updated_at": "2019-01-25T22:34:10Z",
    "author_association": "MEMBER",
    "body": "@practicalswift `MixExtract` intentionally takes an rvalue reference, so that callers must either pass in a temporary, or use `std::move` explicitly (as the hasher object becomes useless after the call).",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/457756126/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/457809977",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15250#issuecomment-457809977",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15250",
    "id": 457809977,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NzgwOTk3Nw==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-26T07:28:22Z",
    "updated_at": "2019-01-28T18:16:43Z",
    "author_association": "MEMBER",
    "body": "@gmaxwell Wow, I didn't know about those failure modes of RdRand and RdSeed. Rewrote things a bit to take that into account. RdRand is now retried up to 10 times (and ignored after that). RdSeed is retried indefinitely (with a pause in between). When using RdRand for 256-bit seeding, it's invoked 1024 times and XORed to produce each 64 bit group.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/457809977/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/458183513",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15250#issuecomment-458183513",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15250",
    "id": 458183513,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODE4MzUxMw==",
    "user": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?u=63e5c438c242094837a9deeda775d77988b508bf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-28T15:47:50Z",
    "updated_at": "2019-01-28T15:47:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "utACK",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/458183513/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/461266838",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15250#issuecomment-461266838",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15250",
    "id": 461266838,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MTI2NjgzOA==",
    "user": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?u=63e5c438c242094837a9deeda775d77988b508bf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-07T02:29:27Z",
    "updated_at": "2019-02-07T02:29:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "ACK",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/461266838/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/461268568",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15250#issuecomment-461268568",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15250",
    "id": 461268568,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MTI2ODU2OA==",
    "user": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?u=63e5c438c242094837a9deeda775d77988b508bf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-07T02:39:50Z",
    "updated_at": "2019-02-07T02:39:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "Aside, we might want to consider this one a bug fix, since technically we weren't using rdrand quite correctly before.  OTOH, the use of rdrand was entirely non-critical... sooo...",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/461268568/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/462740431",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15250#issuecomment-462740431",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15250",
    "id": 462740431,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2Mjc0MDQzMQ==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-12T12:26:47Z",
    "updated_at": "2019-02-12T12:26:47Z",
    "author_association": "MEMBER",
    "body": "So to be clear: this doesn't result in a CPU with broken and/or backdoored `RDRAND` or `RDSEED` instruction to generate vulberable private keys?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/462740431/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/462816434",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15250#issuecomment-462816434",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15250",
    "id": 462816434,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MjgxNjQzNA==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-12T15:57:32Z",
    "updated_at": "2019-02-12T15:57:32Z",
    "author_association": "MEMBER",
    "body": "@laanwj Not trivially, at least. The output of the rdrand/rdseed is mixed with other entropy using SHA512 to produce output and the new state.\n\nIn theory a backdoored CPU could try to infer what variable is going to store entropy, and try to control that directly. ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/462816434/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/462837153",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15250#issuecomment-462837153",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15250",
    "id": 462837153,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MjgzNzE1Mw==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-12T16:46:26Z",
    "updated_at": "2019-02-12T16:46:26Z",
    "author_association": "MEMBER",
    "body": "Thanks!\r\n\r\n> In theory a backdoored CPU could try to infer what variable is going to store entropy, and try to control that directly.\r\n\r\nSure\u2014I meant when say, only those instructions were made to return a fixed value, not anything more advanced/complex. Like a bugdoor with plausible deniability.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/462837153/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/463305751",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15250#issuecomment-463305751",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15250",
    "id": 463305751,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MzMwNTc1MQ==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-13T18:10:41Z",
    "updated_at": "2019-02-13T18:21:06Z",
    "author_association": "MEMBER",
    "body": "Code review utACK 1435fabc19d2143187efb493cbe23225eaf851ae\r\nI have no hardware to be able to test this on.\r\n(if you do, `/proc/cpuinfo` will show the `rdrand` and/or `rdseed` under `flags`)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/463305751/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/463338406",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15250#issuecomment-463338406",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15250",
    "id": 463338406,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MzMzODQwNg==",
    "user": {
      "login": "JustinTArthur",
      "id": 577312,
      "node_id": "MDQ6VXNlcjU3NzMxMg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/577312?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JustinTArthur",
      "html_url": "https://github.com/JustinTArthur",
      "followers_url": "https://api.github.com/users/JustinTArthur/followers",
      "following_url": "https://api.github.com/users/JustinTArthur/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinTArthur/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JustinTArthur/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinTArthur/subscriptions",
      "organizations_url": "https://api.github.com/users/JustinTArthur/orgs",
      "repos_url": "https://api.github.com/users/JustinTArthur/repos",
      "events_url": "https://api.github.com/users/JustinTArthur/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JustinTArthur/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-13T19:39:39Z",
    "updated_at": "2019-02-13T19:39:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "ACK 1435fab on macOS x86_64 on Intel Core i7-7920HQ CPU @ 3.10GHz (has RDRAND & RDSEED).\r\n\r\n> `2019-02-13T19:22:30Z Using the 'sse4(1way),sse41(4way),avx2(8way)' SHA256 implementation`\r\n> `2019-02-13T19:22:30Z Using RdSeed as additional entropy source`\r\n> `2019-02-13T19:22:30Z Using RdRand as an additional entropy source`\r\n\r\nFunctional and unit tests pass.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/463338406/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/463357488",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15250#issuecomment-463357488",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15250",
    "id": 463357488,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MzM1NzQ4OA==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-13T20:33:24Z",
    "updated_at": "2019-02-13T20:33:24Z",
    "author_association": "MEMBER",
    "body": "Tested on a system with RdRand but no RdSeed; tests pass, `bitcoind` runs fine, and reports only \"Using RdRand as an additional entropy source\".",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/463357488/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/463473843",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15250#issuecomment-463473843",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15250",
    "id": 463473843,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MzQ3Mzg0Mw==",
    "user": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?u=63e5c438c242094837a9deeda775d77988b508bf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-14T03:29:17Z",
    "updated_at": "2019-02-14T03:29:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "Tested on a system with no rdrand/rdseed, and it didn't catch fire. does @luke-jr  maybe have a 32-bit system with rdrand/rdseed?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/463473843/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/463475107",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15250#issuecomment-463475107",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15250",
    "id": 463475107,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MzQ3NTEwNw==",
    "user": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?u=63e5c438c242094837a9deeda775d77988b508bf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-14T03:35:53Z",
    "updated_at": "2019-02-14T03:35:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "@laanwj  To expand on Pieter's response.  Our mixing construction is designed to be secure against adversarial inputs generated by an attacker that can also inspect the entire process state unless the attacker can attack SHA512 in a very serious way (e.g. construct a suffix to a message being hashed that causes a specific hash value).\r\n\r\nThere are various standards for combining entropy sources that just xor the sources. The construction we're using is obviously stronger than those. If we had just xored the state then a malicious rdrand could inspect and return the current state (perhaps xored with a constant) in order to override it, and even plausibly do so as a bugdoor (e.g. oops we accidentally failed to update the register).  I just mention this to point out that what we're doing is stronger than something other people think is acceptable... ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/463475107/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/463808142",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15250#issuecomment-463808142",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15250",
    "id": 463808142,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MzgwODE0Mg==",
    "user": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?u=871eabd15ac87d37f1b4d2b927fa8f33e3ad7fe3&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-14T21:37:15Z",
    "updated_at": "2019-02-14T21:37:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "@gmaxwell \r\n`\r\nLinux debian 4.9.0-8-686-pae #1 SMP Debian 4.9.130-2 (2018-10-27) i686 GNU/Linux\r\n2019-02-14T21:30:29Z Using RdSeed as additional entropy source\r\n2019-02-14T21:30:29Z Using RdRand as an additional entropy source\r\n`",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/463808142/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251188313",
    "pull_request_review_id": 196776323,
    "id": 251188313,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MTE4ODMxMw==",
    "diff_hunk": "@@ -78,25 +78,84 @@ static inline int64_t GetPerformanceCounter() noexcept\n }\n \n #if defined(__x86_64__) || defined(__amd64__) || defined(__i386__)\n-static bool rdrand_supported = false;\n+static bool g_rdrand_supported = false;\n+static bool g_rdseed_supported = false;\n static constexpr uint32_t CPUID_F1_ECX_RDRAND = 0x40000000;\n+static constexpr uint32_t CPUID_F7_EBX_RDSEED = 0x00040000;\n+\n+static void inline GetCPUID(uint32_t leaf, uint32_t subleaf, uint32_t& a, uint32_t& b, uint32_t& c, uint32_t& d)\n+{\n+#ifdef __GNUC__\n+    __cpuid_count(leaf, subleaf, a, b, c, d);\n+#else\n+  __asm__ (\"cpuid\" : \"=a\"(a), \"=b\"(b), \"=c\"(c), \"=d\"(d) : \"0\"(leaf), \"2\"(subleaf));\n+#endif\n+}\n+\n static void InitHardwareRand()\n {\n     uint32_t eax, ebx, ecx, edx;\n-    if (__get_cpuid(1, &eax, &ebx, &ecx, &edx) && (ecx & CPUID_F1_ECX_RDRAND)) {\n-        rdrand_supported = true;\n+    GetCPUID(1, 0, eax, ebx, ecx, edx);\n+    if (ecx & CPUID_F1_ECX_RDRAND) {\n+        g_rdrand_supported = true;\n+        GetCPUID(7, 0, eax, ebx, ecx, edx);\n+        if (ebx & CPUID_F7_EBX_RDSEED) {\n+            g_rdseed_supported = true;\n+        }\n     }\n }\n \n static void ReportHardwareRand()\n {\n-    if (rdrand_supported) {\n-        // This must be done in a separate function, as HWRandInit() may be indirectly called\n-        // from global constructors, before logging is initialized.\n+    // This must be done in a separate function, as HWRandInit() may be indirectly called\n+    // from global constructors, before logging is initialized.\n+    if (g_rdseed_supported) {\n+        LogPrintf(\"Using RdSeed and RdRand as additional entropy sources\\n\");\n+    } else if (g_rdrand_supported) {\n         LogPrintf(\"Using RdRand as an additional entropy source\\n\");\n     }\n }\n \n+/** Read 64 bits of entropy using rdrand.\n+ *\n+ * Must only be called when RdRand is supported.\n+ */\n+static uint64_t GetRdRand() noexcept\n+{\n+    uint8_t ok;\n+#ifdef __i386__\n+    uint32_t r1, r2;\n+    __asm__ volatile (\".byte 0x0f, 0xc7, 0xf0, 0x0f, 0xc7, 0xf2; setc %2\" : \"=a\"(r1), \"=d\"(r2), \"=q\"(ok) :: \"cc\"); // rdrand %eax; rdrand %edx\n+    assert(ok);\n+    return (((uint64_t)r2) << 32) | r1;\n+#else",
    "path": "src/random.cpp",
    "position": null,
    "original_position": 60,
    "commit_id": "1435fabc19d2143187efb493cbe23225eaf851ae",
    "original_commit_id": "83ebab177bc7d194c18eb7401107d6a8c7d08423",
    "user": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I feel like this and the one below should be guarded by #if defined(__x86_64__) || defined(__amd64__)  ... I think we'd like to prefer x86_64 asm in the output, even if we're not going to call it. :P",
    "created_at": "2019-01-26T04:55:30Z",
    "updated_at": "2019-02-04T01:34:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15250#discussion_r251188313",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15250",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251188313"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15250#discussion_r251188313"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15250"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251188313/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 131,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251188552",
    "pull_request_review_id": 196776590,
    "id": 251188552,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MTE4ODU1Mg==",
    "diff_hunk": "@@ -107,36 +166,37 @@ static void InitHardwareRand() {}\n static void ReportHardwareRand() {}\n #endif\n \n-static bool GetHardwareRand(unsigned char* ent32) noexcept {\n+static bool GetHardwareRand64(unsigned char* ent8) noexcept {\n #if defined(__x86_64__) || defined(__amd64__) || defined(__i386__)\n-    if (rdrand_supported) {\n-        uint8_t ok;\n-        // Not all assemblers support the rdrand instruction, write it in hex.\n-#ifdef __i386__\n-        for (int iter = 0; iter < 4; ++iter) {\n-            uint32_t r1, r2;\n-            __asm__ volatile (\".byte 0x0f, 0xc7, 0xf0;\" // rdrand %eax\n-                              \".byte 0x0f, 0xc7, 0xf2;\" // rdrand %edx\n-                              \"setc %2\" :\n-                              \"=a\"(r1), \"=d\"(r2), \"=q\"(ok) :: \"cc\");\n-            if (!ok) return false;\n-            WriteLE32(ent32 + 8 * iter, r1);\n-            WriteLE32(ent32 + 8 * iter + 4, r2);\n-        }\n-#else\n-        uint64_t r1, r2, r3, r4;\n-        __asm__ volatile (\".byte 0x48, 0x0f, 0xc7, 0xf0, \" // rdrand %rax\n-                                \"0x48, 0x0f, 0xc7, 0xf3, \" // rdrand %rbx\n-                                \"0x48, 0x0f, 0xc7, 0xf1, \" // rdrand %rcx\n-                                \"0x48, 0x0f, 0xc7, 0xf2; \" // rdrand %rdx\n-                          \"setc %4\" :\n-                          \"=a\"(r1), \"=b\"(r2), \"=c\"(r3), \"=d\"(r4), \"=q\"(ok) :: \"cc\");\n-        if (!ok) return false;\n-        WriteLE64(ent32, r1);\n-        WriteLE64(ent32 + 8, r2);\n-        WriteLE64(ent32 + 16, r3);\n-        WriteLE64(ent32 + 24, r4);\n+    if (g_rdrand_supported) {\n+        uint64_t out = GetRdRand();\n+        WriteLE64(ent8, out);\n+        return true;\n+    }\n #endif\n+    return false;\n+}\n+\n+static bool GetHardwareRand256(unsigned char* ent32) noexcept {\n+#if defined(__x86_64__) || defined(__amd64__) || defined(__i386__)\n+    // When we want 256 bits of entropy, prefer RdSeed over RdRand, as it's\n+    // guaranteed to produce independent randomness on every call. RdRand\n+    // output is generated using an RNG seeded by the actual entropy, which does\n+    // not guarantee (information theoretically) independent results.\n+    if (g_rdseed_supported) {\n+        uint64_t out1 = GetRdSeed(), out2 = GetRdSeed(), out3 = GetRdSeed(), out4 = GetRdSeed();\n+        WriteLE64(ent32, out1);\n+        WriteLE64(ent32 + 8, out2);\n+        WriteLE64(ent32 + 16, out3);\n+        WriteLE64(ent32 + 24, out4);\n+        return true;\n+    }\n+    if (g_rdrand_supported) {\n+        uint64_t out1 = GetRdRand(), out2 = GetRdRand(), out3 = GetRdRand(), out4 = GetRdRand();\n+        WriteLE64(ent32, out1);\n+        WriteLE64(ent32 + 8, out2);\n+        WriteLE64(ent32 + 16, out3);\n+        WriteLE64(ent32 + 24, out4);\n         return true;",
    "path": "src/random.cpp",
    "position": null,
    "original_position": 154,
    "commit_id": "1435fabc19d2143187efb493cbe23225eaf851ae",
    "original_commit_id": "83ebab177bc7d194c18eb7401107d6a8c7d08423",
    "user": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Maybe we should ignore it for the less critical runtime use, but pedantically: \r\n\r\n\"After invoking the RDRAND instruction, the caller must examine the carry flag (CF) to determine whether a random value was available at the time the RDRAND instruction was executed. As Table 3 shows, a value of 1 indicates that a random value was available and placed in the destination register provided in the invocation. A value of 0 indicates that a random value was not available. In current architectures the destination register will also be zeroed as a side effect of this condition.\" ... \"It is recommended that applications attempt 10 retries in a tight loop in the unlikely event that the RDRAND instruction does not return a random number. This number is based on a binomial probability argument: given the design margins of the DRNG, the odds of ten failures in a row are astronomically small and would in fact be an indication of a larger CPU issue.\"\r\n\r\nThis one might also want to consider:\r\n\r\n\"There are two approaches to structuring RDRAND invocations such that DRBG reseeding can be guaranteed:\r\n\r\n    Iteratively execute RDRAND beyond the DRBG upper bound by executing more than 1022 64-bit RDRANDs\"",
    "created_at": "2019-01-26T05:06:57Z",
    "updated_at": "2019-02-04T01:34:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15250#discussion_r251188552",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15250",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251188552"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15250#discussion_r251188552"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15250"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251188552/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 227,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251188580",
    "pull_request_review_id": 196776620,
    "id": 251188580,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MTE4ODU4MA==",
    "diff_hunk": "@@ -107,36 +166,37 @@ static void InitHardwareRand() {}\n static void ReportHardwareRand() {}\n #endif\n \n-static bool GetHardwareRand(unsigned char* ent32) noexcept {\n+static bool GetHardwareRand64(unsigned char* ent8) noexcept {\n #if defined(__x86_64__) || defined(__amd64__) || defined(__i386__)\n-    if (rdrand_supported) {\n-        uint8_t ok;\n-        // Not all assemblers support the rdrand instruction, write it in hex.\n-#ifdef __i386__\n-        for (int iter = 0; iter < 4; ++iter) {\n-            uint32_t r1, r2;\n-            __asm__ volatile (\".byte 0x0f, 0xc7, 0xf0;\" // rdrand %eax\n-                              \".byte 0x0f, 0xc7, 0xf2;\" // rdrand %edx\n-                              \"setc %2\" :\n-                              \"=a\"(r1), \"=d\"(r2), \"=q\"(ok) :: \"cc\");\n-            if (!ok) return false;\n-            WriteLE32(ent32 + 8 * iter, r1);\n-            WriteLE32(ent32 + 8 * iter + 4, r2);\n-        }\n-#else\n-        uint64_t r1, r2, r3, r4;\n-        __asm__ volatile (\".byte 0x48, 0x0f, 0xc7, 0xf0, \" // rdrand %rax\n-                                \"0x48, 0x0f, 0xc7, 0xf3, \" // rdrand %rbx\n-                                \"0x48, 0x0f, 0xc7, 0xf1, \" // rdrand %rcx\n-                                \"0x48, 0x0f, 0xc7, 0xf2; \" // rdrand %rdx\n-                          \"setc %4\" :\n-                          \"=a\"(r1), \"=b\"(r2), \"=c\"(r3), \"=d\"(r4), \"=q\"(ok) :: \"cc\");\n-        if (!ok) return false;\n-        WriteLE64(ent32, r1);\n-        WriteLE64(ent32 + 8, r2);\n-        WriteLE64(ent32 + 16, r3);\n-        WriteLE64(ent32 + 24, r4);\n+    if (g_rdrand_supported) {\n+        uint64_t out = GetRdRand();\n+        WriteLE64(ent8, out);\n+        return true;\n+    }\n #endif\n+    return false;\n+}\n+\n+static bool GetHardwareRand256(unsigned char* ent32) noexcept {\n+#if defined(__x86_64__) || defined(__amd64__) || defined(__i386__)\n+    // When we want 256 bits of entropy, prefer RdSeed over RdRand, as it's\n+    // guaranteed to produce independent randomness on every call. RdRand\n+    // output is generated using an RNG seeded by the actual entropy, which does\n+    // not guarantee (information theoretically) independent results.\n+    if (g_rdseed_supported) {\n+        uint64_t out1 = GetRdSeed(), out2 = GetRdSeed(), out3 = GetRdSeed(), out4 = GetRdSeed();\n+        WriteLE64(ent32, out1);\n+        WriteLE64(ent32 + 8, out2);\n+        WriteLE64(ent32 + 16, out3);\n+        WriteLE64(ent32 + 24, out4);\n+        return true;",
    "path": "src/random.cpp",
    "position": null,
    "original_position": 146,
    "commit_id": "1435fabc19d2143187efb493cbe23225eaf851ae",
    "original_commit_id": "83ebab177bc7d194c18eb7401107d6a8c7d08423",
    "user": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "\"After invoking the RDSEED instruction, the caller must examine the carry flag (CF) to determine whether a random seed was available at the time the RDSEED instruction was executed. As shown in Table 5, a value of 1 indicates that a random seed was available and placed in the destination register provided in the invocation.\" \"Unlike the RDRAND instruction, the seed values come directly from the entropy conditioner, and it is possible for callers to invoke RDSEED faster than those values are generated. This means that applications must be designed robustly and be prepared for calls to RDSEED to fail because seeds are not available (CF=0).\r\n\r\nIf only one thread is calling RDSEED infrequently, it is very unlikely that a random seed will not be available. Only during periods of heavy demand, such as when one thread is calling RDSEED in rapid succession or multiple threads are calling RDSEED simultaneously, are underflows likely to occur. Because the RDSEED instruction does not have a fairness mechanism built into it, however, there are no guarantees as to how often a thread should retry the instruction, or how many retries might be needed, in order to obtain a random seed. In practice, this depends on the number of hardware threads on the CPU and how aggressively they are calling RDSEED.\" \"5.3.1.1 Synchronous applications\r\n\r\nIf the application is not latency-sensitive, then it can simply retry the RDSEED instruction indefinitely, though it is recommended that a PAUSE instruction be placed in the retry loop. In the worst-case scenario, where multiple threads are invoking RDSEED continually, the delays can be long, but the longer the delay, the more likely (with an exponentially increasing probability) that the instruction will return a result.\"",
    "created_at": "2019-01-26T05:08:38Z",
    "updated_at": "2019-02-04T01:34:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15250#discussion_r251188580",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15250",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251188580"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15250#discussion_r251188580"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15250"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251188580/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 217,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251191210",
    "pull_request_review_id": 196779611,
    "id": 251191210,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MTE5MTIxMA==",
    "diff_hunk": "@@ -78,25 +78,84 @@ static inline int64_t GetPerformanceCounter() noexcept\n }\n \n #if defined(__x86_64__) || defined(__amd64__) || defined(__i386__)\n-static bool rdrand_supported = false;\n+static bool g_rdrand_supported = false;\n+static bool g_rdseed_supported = false;\n static constexpr uint32_t CPUID_F1_ECX_RDRAND = 0x40000000;\n+static constexpr uint32_t CPUID_F7_EBX_RDSEED = 0x00040000;\n+\n+static void inline GetCPUID(uint32_t leaf, uint32_t subleaf, uint32_t& a, uint32_t& b, uint32_t& c, uint32_t& d)\n+{\n+#ifdef __GNUC__\n+    __cpuid_count(leaf, subleaf, a, b, c, d);\n+#else\n+  __asm__ (\"cpuid\" : \"=a\"(a), \"=b\"(b), \"=c\"(c), \"=d\"(d) : \"0\"(leaf), \"2\"(subleaf));\n+#endif\n+}\n+\n static void InitHardwareRand()\n {\n     uint32_t eax, ebx, ecx, edx;\n-    if (__get_cpuid(1, &eax, &ebx, &ecx, &edx) && (ecx & CPUID_F1_ECX_RDRAND)) {\n-        rdrand_supported = true;\n+    GetCPUID(1, 0, eax, ebx, ecx, edx);\n+    if (ecx & CPUID_F1_ECX_RDRAND) {\n+        g_rdrand_supported = true;\n+        GetCPUID(7, 0, eax, ebx, ecx, edx);\n+        if (ebx & CPUID_F7_EBX_RDSEED) {\n+            g_rdseed_supported = true;\n+        }\n     }\n }\n \n static void ReportHardwareRand()\n {\n-    if (rdrand_supported) {\n-        // This must be done in a separate function, as HWRandInit() may be indirectly called\n-        // from global constructors, before logging is initialized.\n+    // This must be done in a separate function, as HWRandInit() may be indirectly called\n+    // from global constructors, before logging is initialized.\n+    if (g_rdseed_supported) {\n+        LogPrintf(\"Using RdSeed and RdRand as additional entropy sources\\n\");\n+    } else if (g_rdrand_supported) {\n         LogPrintf(\"Using RdRand as an additional entropy source\\n\");\n     }\n }\n \n+/** Read 64 bits of entropy using rdrand.\n+ *\n+ * Must only be called when RdRand is supported.\n+ */\n+static uint64_t GetRdRand() noexcept\n+{\n+    uint8_t ok;\n+#ifdef __i386__\n+    uint32_t r1, r2;\n+    __asm__ volatile (\".byte 0x0f, 0xc7, 0xf0, 0x0f, 0xc7, 0xf2; setc %2\" : \"=a\"(r1), \"=d\"(r2), \"=q\"(ok) :: \"cc\"); // rdrand %eax; rdrand %edx\n+    assert(ok);\n+    return (((uint64_t)r2) << 32) | r1;\n+#else",
    "path": "src/random.cpp",
    "position": null,
    "original_position": 60,
    "commit_id": "1435fabc19d2143187efb493cbe23225eaf851ae",
    "original_commit_id": "83ebab177bc7d194c18eb7401107d6a8c7d08423",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done.",
    "created_at": "2019-01-26T07:25:14Z",
    "updated_at": "2019-02-04T01:34:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15250#discussion_r251191210",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15250",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251191210"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15250#discussion_r251191210"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15250"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251191210/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 131,
    "side": "RIGHT",
    "in_reply_to_id": 251188313
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251191212",
    "pull_request_review_id": 196779614,
    "id": 251191212,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MTE5MTIxMg==",
    "diff_hunk": "@@ -107,36 +166,37 @@ static void InitHardwareRand() {}\n static void ReportHardwareRand() {}\n #endif\n \n-static bool GetHardwareRand(unsigned char* ent32) noexcept {\n+static bool GetHardwareRand64(unsigned char* ent8) noexcept {\n #if defined(__x86_64__) || defined(__amd64__) || defined(__i386__)\n-    if (rdrand_supported) {\n-        uint8_t ok;\n-        // Not all assemblers support the rdrand instruction, write it in hex.\n-#ifdef __i386__\n-        for (int iter = 0; iter < 4; ++iter) {\n-            uint32_t r1, r2;\n-            __asm__ volatile (\".byte 0x0f, 0xc7, 0xf0;\" // rdrand %eax\n-                              \".byte 0x0f, 0xc7, 0xf2;\" // rdrand %edx\n-                              \"setc %2\" :\n-                              \"=a\"(r1), \"=d\"(r2), \"=q\"(ok) :: \"cc\");\n-            if (!ok) return false;\n-            WriteLE32(ent32 + 8 * iter, r1);\n-            WriteLE32(ent32 + 8 * iter + 4, r2);\n-        }\n-#else\n-        uint64_t r1, r2, r3, r4;\n-        __asm__ volatile (\".byte 0x48, 0x0f, 0xc7, 0xf0, \" // rdrand %rax\n-                                \"0x48, 0x0f, 0xc7, 0xf3, \" // rdrand %rbx\n-                                \"0x48, 0x0f, 0xc7, 0xf1, \" // rdrand %rcx\n-                                \"0x48, 0x0f, 0xc7, 0xf2; \" // rdrand %rdx\n-                          \"setc %4\" :\n-                          \"=a\"(r1), \"=b\"(r2), \"=c\"(r3), \"=d\"(r4), \"=q\"(ok) :: \"cc\");\n-        if (!ok) return false;\n-        WriteLE64(ent32, r1);\n-        WriteLE64(ent32 + 8, r2);\n-        WriteLE64(ent32 + 16, r3);\n-        WriteLE64(ent32 + 24, r4);\n+    if (g_rdrand_supported) {\n+        uint64_t out = GetRdRand();\n+        WriteLE64(ent8, out);\n+        return true;\n+    }\n #endif\n+    return false;\n+}\n+\n+static bool GetHardwareRand256(unsigned char* ent32) noexcept {\n+#if defined(__x86_64__) || defined(__amd64__) || defined(__i386__)\n+    // When we want 256 bits of entropy, prefer RdSeed over RdRand, as it's\n+    // guaranteed to produce independent randomness on every call. RdRand\n+    // output is generated using an RNG seeded by the actual entropy, which does\n+    // not guarantee (information theoretically) independent results.\n+    if (g_rdseed_supported) {\n+        uint64_t out1 = GetRdSeed(), out2 = GetRdSeed(), out3 = GetRdSeed(), out4 = GetRdSeed();\n+        WriteLE64(ent32, out1);\n+        WriteLE64(ent32 + 8, out2);\n+        WriteLE64(ent32 + 16, out3);\n+        WriteLE64(ent32 + 24, out4);\n+        return true;\n+    }\n+    if (g_rdrand_supported) {\n+        uint64_t out1 = GetRdRand(), out2 = GetRdRand(), out3 = GetRdRand(), out4 = GetRdRand();\n+        WriteLE64(ent32, out1);\n+        WriteLE64(ent32 + 8, out2);\n+        WriteLE64(ent32 + 16, out3);\n+        WriteLE64(ent32 + 24, out4);\n         return true;",
    "path": "src/random.cpp",
    "position": null,
    "original_position": 154,
    "commit_id": "1435fabc19d2143187efb493cbe23225eaf851ae",
    "original_commit_id": "83ebab177bc7d194c18eb7401107d6a8c7d08423",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done.",
    "created_at": "2019-01-26T07:25:23Z",
    "updated_at": "2019-02-04T01:34:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15250#discussion_r251191212",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15250",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251191212"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15250#discussion_r251191212"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15250"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251191212/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 227,
    "side": "RIGHT",
    "in_reply_to_id": 251188552
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251191232",
    "pull_request_review_id": 196779637,
    "id": 251191232,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MTE5MTIzMg==",
    "diff_hunk": "@@ -107,36 +166,37 @@ static void InitHardwareRand() {}\n static void ReportHardwareRand() {}\n #endif\n \n-static bool GetHardwareRand(unsigned char* ent32) noexcept {\n+static bool GetHardwareRand64(unsigned char* ent8) noexcept {\n #if defined(__x86_64__) || defined(__amd64__) || defined(__i386__)\n-    if (rdrand_supported) {\n-        uint8_t ok;\n-        // Not all assemblers support the rdrand instruction, write it in hex.\n-#ifdef __i386__\n-        for (int iter = 0; iter < 4; ++iter) {\n-            uint32_t r1, r2;\n-            __asm__ volatile (\".byte 0x0f, 0xc7, 0xf0;\" // rdrand %eax\n-                              \".byte 0x0f, 0xc7, 0xf2;\" // rdrand %edx\n-                              \"setc %2\" :\n-                              \"=a\"(r1), \"=d\"(r2), \"=q\"(ok) :: \"cc\");\n-            if (!ok) return false;\n-            WriteLE32(ent32 + 8 * iter, r1);\n-            WriteLE32(ent32 + 8 * iter + 4, r2);\n-        }\n-#else\n-        uint64_t r1, r2, r3, r4;\n-        __asm__ volatile (\".byte 0x48, 0x0f, 0xc7, 0xf0, \" // rdrand %rax\n-                                \"0x48, 0x0f, 0xc7, 0xf3, \" // rdrand %rbx\n-                                \"0x48, 0x0f, 0xc7, 0xf1, \" // rdrand %rcx\n-                                \"0x48, 0x0f, 0xc7, 0xf2; \" // rdrand %rdx\n-                          \"setc %4\" :\n-                          \"=a\"(r1), \"=b\"(r2), \"=c\"(r3), \"=d\"(r4), \"=q\"(ok) :: \"cc\");\n-        if (!ok) return false;\n-        WriteLE64(ent32, r1);\n-        WriteLE64(ent32 + 8, r2);\n-        WriteLE64(ent32 + 16, r3);\n-        WriteLE64(ent32 + 24, r4);\n+    if (g_rdrand_supported) {\n+        uint64_t out = GetRdRand();\n+        WriteLE64(ent8, out);\n+        return true;\n+    }\n #endif\n+    return false;\n+}\n+\n+static bool GetHardwareRand256(unsigned char* ent32) noexcept {\n+#if defined(__x86_64__) || defined(__amd64__) || defined(__i386__)\n+    // When we want 256 bits of entropy, prefer RdSeed over RdRand, as it's\n+    // guaranteed to produce independent randomness on every call. RdRand\n+    // output is generated using an RNG seeded by the actual entropy, which does\n+    // not guarantee (information theoretically) independent results.\n+    if (g_rdseed_supported) {\n+        uint64_t out1 = GetRdSeed(), out2 = GetRdSeed(), out3 = GetRdSeed(), out4 = GetRdSeed();\n+        WriteLE64(ent32, out1);\n+        WriteLE64(ent32 + 8, out2);\n+        WriteLE64(ent32 + 16, out3);\n+        WriteLE64(ent32 + 24, out4);\n+        return true;",
    "path": "src/random.cpp",
    "position": null,
    "original_position": 146,
    "commit_id": "1435fabc19d2143187efb493cbe23225eaf851ae",
    "original_commit_id": "83ebab177bc7d194c18eb7401107d6a8c7d08423",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done.",
    "created_at": "2019-01-26T07:26:34Z",
    "updated_at": "2019-02-04T01:34:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15250#discussion_r251191232",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15250",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251191232"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15250#discussion_r251191232"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15250"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251191232/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 217,
    "side": "RIGHT",
    "in_reply_to_id": 251188580
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/252701628",
    "pull_request_review_id": 198635722,
    "id": 252701628,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MjcwMTYyOA==",
    "diff_hunk": "@@ -78,25 +78,112 @@ static inline int64_t GetPerformanceCounter() noexcept\n }\n \n #if defined(__x86_64__) || defined(__amd64__) || defined(__i386__)\n-static bool rdrand_supported = false;\n+static bool g_rdrand_supported = false;\n+static bool g_rdseed_supported = false;\n static constexpr uint32_t CPUID_F1_ECX_RDRAND = 0x40000000;\n+static constexpr uint32_t CPUID_F7_EBX_RDSEED = 0x00040000;\n+\n+static void inline GetCPUID(uint32_t leaf, uint32_t subleaf, uint32_t& a, uint32_t& b, uint32_t& c, uint32_t& d)\n+{\n+#ifdef __GNUC__\n+    __cpuid_count(leaf, subleaf, a, b, c, d);\n+#else\n+  __asm__ (\"cpuid\" : \"=a\"(a), \"=b\"(b), \"=c\"(c), \"=d\"(d) : \"0\"(leaf), \"2\"(subleaf));",
    "path": "src/random.cpp",
    "position": null,
    "original_position": 15,
    "commit_id": "1435fabc19d2143187efb493cbe23225eaf851ae",
    "original_commit_id": "673964328fc2a09cfd9d14ca59c8b37ffa49620c",
    "user": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: whitespace",
    "created_at": "2019-01-31T15:01:20Z",
    "updated_at": "2019-02-04T01:34:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15250#discussion_r252701628",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15250",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/252701628"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15250#discussion_r252701628"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15250"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/252701628/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 97,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/252730526",
    "pull_request_review_id": 198635722,
    "id": 252730526,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MjczMDUyNg==",
    "diff_hunk": "@@ -78,25 +78,112 @@ static inline int64_t GetPerformanceCounter() noexcept\n }\n \n #if defined(__x86_64__) || defined(__amd64__) || defined(__i386__)\n-static bool rdrand_supported = false;\n+static bool g_rdrand_supported = false;\n+static bool g_rdseed_supported = false;\n static constexpr uint32_t CPUID_F1_ECX_RDRAND = 0x40000000;\n+static constexpr uint32_t CPUID_F7_EBX_RDSEED = 0x00040000;\n+\n+static void inline GetCPUID(uint32_t leaf, uint32_t subleaf, uint32_t& a, uint32_t& b, uint32_t& c, uint32_t& d)",
    "path": "src/random.cpp",
    "position": 15,
    "original_position": 10,
    "commit_id": "1435fabc19d2143187efb493cbe23225eaf851ae",
    "original_commit_id": "673964328fc2a09cfd9d14ca59c8b37ffa49620c",
    "user": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Maybe I'm mistaken, but I think we can use `__get_cpuid` here, e.g.:\r\nhttps://github.com/linuxkit/linuxkit/blob/c5b3f24de6ba2238c5465025960f16920a731124/pkg/rngd/cmd/rngd/rng_linux_amd64.go#L11-L23\r\n\r\nIf not, how about a comment ala, or extracting a common method: https://github.com/bitcoin/bitcoin/blob/4d661baf1aca4226d1c4ec89fe7e44c1f93f04da/src/crypto/sha256.cpp#L552",
    "created_at": "2019-01-31T16:07:10Z",
    "updated_at": "2019-02-04T01:34:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15250#discussion_r252730526",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15250",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/252730526"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15250#discussion_r252730526"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15250"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/252730526/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 91,
    "original_line": 91,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/252731598",
    "pull_request_review_id": 198635722,
    "id": 252731598,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MjczMTU5OA==",
    "diff_hunk": "@@ -78,25 +78,112 @@ static inline int64_t GetPerformanceCounter() noexcept\n }\n \n #if defined(__x86_64__) || defined(__amd64__) || defined(__i386__)\n-static bool rdrand_supported = false;\n+static bool g_rdrand_supported = false;\n+static bool g_rdseed_supported = false;\n static constexpr uint32_t CPUID_F1_ECX_RDRAND = 0x40000000;\n+static constexpr uint32_t CPUID_F7_EBX_RDSEED = 0x00040000;",
    "path": "src/random.cpp",
    "position": 8,
    "original_position": 8,
    "commit_id": "1435fabc19d2143187efb493cbe23225eaf851ae",
    "original_commit_id": "673964328fc2a09cfd9d14ca59c8b37ffa49620c",
    "user": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Maybe `static_assert` against `cpuid.h`'s definition of `bit_RDRND`, `bit_RDSEED` if available?",
    "created_at": "2019-01-31T16:09:39Z",
    "updated_at": "2019-02-04T01:34:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15250#discussion_r252731598",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15250",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/252731598"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15250#discussion_r252731598"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15250"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/252731598/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 84,
    "original_line": 84,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/252738092",
    "pull_request_review_id": 198635722,
    "id": 252738092,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MjczODA5Mg==",
    "diff_hunk": "@@ -78,25 +78,112 @@ static inline int64_t GetPerformanceCounter() noexcept\n }\n \n #if defined(__x86_64__) || defined(__amd64__) || defined(__i386__)\n-static bool rdrand_supported = false;\n+static bool g_rdrand_supported = false;\n+static bool g_rdseed_supported = false;\n static constexpr uint32_t CPUID_F1_ECX_RDRAND = 0x40000000;\n+static constexpr uint32_t CPUID_F7_EBX_RDSEED = 0x00040000;\n+\n+static void inline GetCPUID(uint32_t leaf, uint32_t subleaf, uint32_t& a, uint32_t& b, uint32_t& c, uint32_t& d)\n+{\n+#ifdef __GNUC__\n+    __cpuid_count(leaf, subleaf, a, b, c, d);\n+#else\n+  __asm__ (\"cpuid\" : \"=a\"(a), \"=b\"(b), \"=c\"(c), \"=d\"(d) : \"0\"(leaf), \"2\"(subleaf));\n+#endif\n+}\n+\n static void InitHardwareRand()\n {\n     uint32_t eax, ebx, ecx, edx;\n-    if (__get_cpuid(1, &eax, &ebx, &ecx, &edx) && (ecx & CPUID_F1_ECX_RDRAND)) {\n-        rdrand_supported = true;\n+    GetCPUID(1, 0, eax, ebx, ecx, edx);\n+    if (ecx & CPUID_F1_ECX_RDRAND) {\n+        g_rdrand_supported = true;\n+        GetCPUID(7, 0, eax, ebx, ecx, edx);\n+        if (ebx & CPUID_F7_EBX_RDSEED) {\n+            g_rdseed_supported = true;\n+        }",
    "path": "src/random.cpp",
    "position": null,
    "original_position": 30,
    "commit_id": "1435fabc19d2143187efb493cbe23225eaf851ae",
    "original_commit_id": "673964328fc2a09cfd9d14ca59c8b37ffa49620c",
    "user": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Wasn't able to find a source for this: is RDSEED always and everywhere absent if RDRAND is absent? Seems relatively harmless to not make the tests dependent on one another. https://software.intel.com/en-us/articles/intel-digital-random-number-generator-drng-software-implementation-guide#inpage-nav-6-1",
    "created_at": "2019-01-31T16:24:45Z",
    "updated_at": "2019-02-04T01:34:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15250#discussion_r252738092",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15250",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/252738092"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15250#discussion_r252738092"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15250"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/252738092/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 104,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/252738850",
    "pull_request_review_id": 198635722,
    "id": 252738850,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MjczODg1MA==",
    "diff_hunk": "@@ -107,36 +194,36 @@ static void InitHardwareRand() {}\n static void ReportHardwareRand() {}\n #endif\n \n-static bool GetHardwareRand(unsigned char* ent32) noexcept {\n+static bool SeedHardwareFast(CSHA512& hasher) noexcept {\n #if defined(__x86_64__) || defined(__amd64__) || defined(__i386__)\n-    if (rdrand_supported) {\n-        uint8_t ok;\n-        // Not all assemblers support the rdrand instruction, write it in hex.\n-#ifdef __i386__\n-        for (int iter = 0; iter < 4; ++iter) {\n-            uint32_t r1, r2;\n-            __asm__ volatile (\".byte 0x0f, 0xc7, 0xf0;\" // rdrand %eax\n-                              \".byte 0x0f, 0xc7, 0xf2;\" // rdrand %edx\n-                              \"setc %2\" :\n-                              \"=a\"(r1), \"=d\"(r2), \"=q\"(ok) :: \"cc\");\n-            if (!ok) return false;\n-            WriteLE32(ent32 + 8 * iter, r1);\n-            WriteLE32(ent32 + 8 * iter + 4, r2);\n-        }\n-#else\n-        uint64_t r1, r2, r3, r4;\n-        __asm__ volatile (\".byte 0x48, 0x0f, 0xc7, 0xf0, \" // rdrand %rax\n-                                \"0x48, 0x0f, 0xc7, 0xf3, \" // rdrand %rbx\n-                                \"0x48, 0x0f, 0xc7, 0xf1, \" // rdrand %rcx\n-                                \"0x48, 0x0f, 0xc7, 0xf2; \" // rdrand %rdx\n-                          \"setc %4\" :\n-                          \"=a\"(r1), \"=b\"(r2), \"=c\"(r3), \"=d\"(r4), \"=q\"(ok) :: \"cc\");\n-        if (!ok) return false;\n-        WriteLE64(ent32, r1);\n-        WriteLE64(ent32 + 8, r2);\n-        WriteLE64(ent32 + 16, r3);\n-        WriteLE64(ent32 + 24, r4);\n+    if (g_rdrand_supported) {\n+        uint64_t out = GetRdRand();\n+        hasher.Write((const unsigned char*)&out, sizeof(out));\n+        return true;\n+    }\n #endif\n+    return false;\n+}\n+\n+static bool SeedHardwareSlow(CSHA512& hasher) noexcept {\n+#if defined(__x86_64__) || defined(__amd64__) || defined(__i386__)\n+    // When we want 256 bits of entropy, prefer RdSeed over RdRand, as it's\n+    // guaranteed to produce independent randomness on every call.\n+    if (g_rdseed_supported) {\n+        for (int i = 0; i < 4; ++i) {\n+            uint64_t out = GetRdSeed();\n+            hasher.Write((const unsigned char*)&out, sizeof(out));\n+        }\n+        return true;\n+    }\n+    // When falling back to RdRand, XOR the result of 1024 results.\n+    // This guarantees a reseeding occurs between each.\n+    if (g_rdrand_supported) {",
    "path": "src/random.cpp",
    "position": 184,
    "original_position": 175,
    "commit_id": "1435fabc19d2143187efb493cbe23225eaf851ae",
    "original_commit_id": "673964328fc2a09cfd9d14ca59c8b37ffa49620c",
    "user": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This is always applied when the `g_rdseed_supported` case is, given the dependent detection logic. `else if`?",
    "created_at": "2019-01-31T16:26:26Z",
    "updated_at": "2019-02-04T01:34:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15250#discussion_r252738850",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15250",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/252738850"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15250#discussion_r252738850"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15250"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/252738850/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 229,
    "original_line": 229,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/252751670",
    "pull_request_review_id": 198635722,
    "id": 252751670,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1Mjc1MTY3MA==",
    "diff_hunk": "@@ -78,25 +78,112 @@ static inline int64_t GetPerformanceCounter() noexcept\n }\n \n #if defined(__x86_64__) || defined(__amd64__) || defined(__i386__)\n-static bool rdrand_supported = false;\n+static bool g_rdrand_supported = false;\n+static bool g_rdseed_supported = false;\n static constexpr uint32_t CPUID_F1_ECX_RDRAND = 0x40000000;\n+static constexpr uint32_t CPUID_F7_EBX_RDSEED = 0x00040000;\n+\n+static void inline GetCPUID(uint32_t leaf, uint32_t subleaf, uint32_t& a, uint32_t& b, uint32_t& c, uint32_t& d)\n+{\n+#ifdef __GNUC__\n+    __cpuid_count(leaf, subleaf, a, b, c, d);\n+#else\n+  __asm__ (\"cpuid\" : \"=a\"(a), \"=b\"(b), \"=c\"(c), \"=d\"(d) : \"0\"(leaf), \"2\"(subleaf));\n+#endif\n+}\n+\n static void InitHardwareRand()\n {\n     uint32_t eax, ebx, ecx, edx;\n-    if (__get_cpuid(1, &eax, &ebx, &ecx, &edx) && (ecx & CPUID_F1_ECX_RDRAND)) {\n-        rdrand_supported = true;\n+    GetCPUID(1, 0, eax, ebx, ecx, edx);\n+    if (ecx & CPUID_F1_ECX_RDRAND) {\n+        g_rdrand_supported = true;\n+        GetCPUID(7, 0, eax, ebx, ecx, edx);\n+        if (ebx & CPUID_F7_EBX_RDSEED) {\n+            g_rdseed_supported = true;\n+        }\n     }\n }\n \n static void ReportHardwareRand()\n {\n-    if (rdrand_supported) {\n-        // This must be done in a separate function, as HWRandInit() may be indirectly called\n-        // from global constructors, before logging is initialized.\n+    // This must be done in a separate function, as HWRandInit() may be indirectly called\n+    // from global constructors, before logging is initialized.\n+    if (g_rdseed_supported) {\n+        LogPrintf(\"Using RdSeed and RdRand as additional entropy sources\\n\");\n+    } else if (g_rdrand_supported) {\n         LogPrintf(\"Using RdRand as an additional entropy source\\n\");\n     }\n }\n \n+/** Read 64 bits of entropy using rdrand.\n+ *\n+ * Must only be called when RdRand is supported.\n+ */\n+static uint64_t GetRdRand() noexcept\n+{\n+    // RdRand may very rarely fail. Invoke it up to 10 times in a loop to reduce this risk.\n+#ifdef __i386__\n+    uint8_t ok;\n+    uint32_t r1, r2;\n+    for (int i = 0; i < 10; ++i) {\n+        __asm__ volatile (\".byte 0x0f, 0xc7, 0xf0; setc %1\" : \"=a\"(r1), \"=q\"(ok) :: \"cc\"); // rdrand %eax\n+        if (ok) break;\n+    }\n+    for (int i = 0; i < 10; ++i) {\n+        __asm__ volatile (\".byte 0x0f, 0xc7, 0xf0; setc %1\" : \"=a\"(r2), \"=q\"(ok) :: \"cc\"); // rdrand %eax\n+        if (ok) break;\n+    }\n+    return (((uint64_t)r2) << 32) | r1;",
    "path": "src/random.cpp",
    "position": 73,
    "original_position": 66,
    "commit_id": "1435fabc19d2143187efb493cbe23225eaf851ae",
    "original_commit_id": "673964328fc2a09cfd9d14ca59c8b37ffa49620c",
    "user": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "> If you put two 64-bit values with additive prediction resistance togehter, the prediction resistance of the resulting value is only 65 bits (264 + 264 = 265).\r\nhttps://software.intel.com/en-us/blogs/2012/11/17/the-difference-between-rdrand-and-rdseed\r\n\r\nAssume this is addressed via the XOR rounds?",
    "created_at": "2019-01-31T16:55:47Z",
    "updated_at": "2019-02-04T01:34:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15250#discussion_r252751670",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15250",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/252751670"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15250#discussion_r252751670"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15250"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/252751670/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 144,
    "original_line": 144,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/252753330",
    "pull_request_review_id": 198635722,
    "id": 252753330,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1Mjc1MzMzMA==",
    "diff_hunk": "@@ -107,36 +194,36 @@ static void InitHardwareRand() {}\n static void ReportHardwareRand() {}\n #endif\n \n-static bool GetHardwareRand(unsigned char* ent32) noexcept {\n+static bool SeedHardwareFast(CSHA512& hasher) noexcept {\n #if defined(__x86_64__) || defined(__amd64__) || defined(__i386__)\n-    if (rdrand_supported) {\n-        uint8_t ok;\n-        // Not all assemblers support the rdrand instruction, write it in hex.\n-#ifdef __i386__\n-        for (int iter = 0; iter < 4; ++iter) {\n-            uint32_t r1, r2;\n-            __asm__ volatile (\".byte 0x0f, 0xc7, 0xf0;\" // rdrand %eax\n-                              \".byte 0x0f, 0xc7, 0xf2;\" // rdrand %edx\n-                              \"setc %2\" :\n-                              \"=a\"(r1), \"=d\"(r2), \"=q\"(ok) :: \"cc\");\n-            if (!ok) return false;\n-            WriteLE32(ent32 + 8 * iter, r1);\n-            WriteLE32(ent32 + 8 * iter + 4, r2);\n-        }\n-#else\n-        uint64_t r1, r2, r3, r4;\n-        __asm__ volatile (\".byte 0x48, 0x0f, 0xc7, 0xf0, \" // rdrand %rax\n-                                \"0x48, 0x0f, 0xc7, 0xf3, \" // rdrand %rbx\n-                                \"0x48, 0x0f, 0xc7, 0xf1, \" // rdrand %rcx\n-                                \"0x48, 0x0f, 0xc7, 0xf2; \" // rdrand %rdx\n-                          \"setc %4\" :\n-                          \"=a\"(r1), \"=b\"(r2), \"=c\"(r3), \"=d\"(r4), \"=q\"(ok) :: \"cc\");\n-        if (!ok) return false;\n-        WriteLE64(ent32, r1);\n-        WriteLE64(ent32 + 8, r2);\n-        WriteLE64(ent32 + 16, r3);\n-        WriteLE64(ent32 + 24, r4);\n+    if (g_rdrand_supported) {\n+        uint64_t out = GetRdRand();\n+        hasher.Write((const unsigned char*)&out, sizeof(out));\n+        return true;\n+    }\n #endif\n+    return false;\n+}\n+\n+static bool SeedHardwareSlow(CSHA512& hasher) noexcept {",
    "path": "src/random.cpp",
    "position": null,
    "original_position": 162,
    "commit_id": "1435fabc19d2143187efb493cbe23225eaf851ae",
    "original_commit_id": "673964328fc2a09cfd9d14ca59c8b37ffa49620c",
    "user": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Returns `bool` that no one reacts to. Drop or log? ",
    "created_at": "2019-01-31T16:59:51Z",
    "updated_at": "2019-02-04T01:34:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15250#discussion_r252753330",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15250",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/252753330"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15250#discussion_r252753330"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15250"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/252753330/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 208,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/252753406",
    "pull_request_review_id": 198635722,
    "id": 252753406,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1Mjc1MzQwNg==",
    "diff_hunk": "@@ -107,36 +194,36 @@ static void InitHardwareRand() {}\n static void ReportHardwareRand() {}\n #endif\n \n-static bool GetHardwareRand(unsigned char* ent32) noexcept {\n+static bool SeedHardwareFast(CSHA512& hasher) noexcept {",
    "path": "src/random.cpp",
    "position": null,
    "original_position": 124,
    "commit_id": "1435fabc19d2143187efb493cbe23225eaf851ae",
    "original_commit_id": "673964328fc2a09cfd9d14ca59c8b37ffa49620c",
    "user": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Returns `bool` that no one reacts to. Drop or log?",
    "created_at": "2019-01-31T17:00:02Z",
    "updated_at": "2019-02-04T01:34:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15250#discussion_r252753406",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15250",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/252753406"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15250#discussion_r252753406"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15250"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/252753406/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 197,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/253244146",
    "pull_request_review_id": 199323652,
    "id": 253244146,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MzI0NDE0Ng==",
    "diff_hunk": "@@ -78,25 +78,112 @@ static inline int64_t GetPerformanceCounter() noexcept\n }\n \n #if defined(__x86_64__) || defined(__amd64__) || defined(__i386__)\n-static bool rdrand_supported = false;\n+static bool g_rdrand_supported = false;\n+static bool g_rdseed_supported = false;\n static constexpr uint32_t CPUID_F1_ECX_RDRAND = 0x40000000;\n+static constexpr uint32_t CPUID_F7_EBX_RDSEED = 0x00040000;\n+\n+static void inline GetCPUID(uint32_t leaf, uint32_t subleaf, uint32_t& a, uint32_t& b, uint32_t& c, uint32_t& d)\n+{\n+#ifdef __GNUC__\n+    __cpuid_count(leaf, subleaf, a, b, c, d);\n+#else\n+  __asm__ (\"cpuid\" : \"=a\"(a), \"=b\"(b), \"=c\"(c), \"=d\"(d) : \"0\"(leaf), \"2\"(subleaf));\n+#endif\n+}\n+\n static void InitHardwareRand()\n {\n     uint32_t eax, ebx, ecx, edx;\n-    if (__get_cpuid(1, &eax, &ebx, &ecx, &edx) && (ecx & CPUID_F1_ECX_RDRAND)) {\n-        rdrand_supported = true;\n+    GetCPUID(1, 0, eax, ebx, ecx, edx);\n+    if (ecx & CPUID_F1_ECX_RDRAND) {\n+        g_rdrand_supported = true;\n+        GetCPUID(7, 0, eax, ebx, ecx, edx);\n+        if (ebx & CPUID_F7_EBX_RDSEED) {\n+            g_rdseed_supported = true;\n+        }\n     }\n }\n \n static void ReportHardwareRand()\n {\n-    if (rdrand_supported) {\n-        // This must be done in a separate function, as HWRandInit() may be indirectly called\n-        // from global constructors, before logging is initialized.\n+    // This must be done in a separate function, as HWRandInit() may be indirectly called\n+    // from global constructors, before logging is initialized.\n+    if (g_rdseed_supported) {\n+        LogPrintf(\"Using RdSeed and RdRand as additional entropy sources\\n\");\n+    } else if (g_rdrand_supported) {\n         LogPrintf(\"Using RdRand as an additional entropy source\\n\");\n     }\n }\n \n+/** Read 64 bits of entropy using rdrand.\n+ *\n+ * Must only be called when RdRand is supported.\n+ */\n+static uint64_t GetRdRand() noexcept\n+{\n+    // RdRand may very rarely fail. Invoke it up to 10 times in a loop to reduce this risk.\n+#ifdef __i386__\n+    uint8_t ok;\n+    uint32_t r1, r2;\n+    for (int i = 0; i < 10; ++i) {\n+        __asm__ volatile (\".byte 0x0f, 0xc7, 0xf0; setc %1\" : \"=a\"(r1), \"=q\"(ok) :: \"cc\"); // rdrand %eax\n+        if (ok) break;\n+    }\n+    for (int i = 0; i < 10; ++i) {\n+        __asm__ volatile (\".byte 0x0f, 0xc7, 0xf0; setc %1\" : \"=a\"(r2), \"=q\"(ok) :: \"cc\"); // rdrand %eax\n+        if (ok) break;\n+    }\n+    return (((uint64_t)r2) << 32) | r1;",
    "path": "src/random.cpp",
    "position": 73,
    "original_position": 66,
    "commit_id": "1435fabc19d2143187efb493cbe23225eaf851ae",
    "original_commit_id": "673964328fc2a09cfd9d14ca59c8b37ffa49620c",
    "user": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Keep reading: rdrand is guaranteed to be reseeded at least every 1022 calls, see the documentation that I provided in earlier comments.",
    "created_at": "2019-02-02T01:01:11Z",
    "updated_at": "2019-02-04T01:34:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15250#discussion_r253244146",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15250",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/253244146"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15250#discussion_r253244146"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15250"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/253244146/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 144,
    "original_line": 144,
    "side": "RIGHT",
    "in_reply_to_id": 252751670
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/253244449",
    "pull_request_review_id": 199324026,
    "id": 253244449,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MzI0NDQ0OQ==",
    "diff_hunk": "@@ -107,36 +194,36 @@ static void InitHardwareRand() {}\n static void ReportHardwareRand() {}\n #endif\n \n-static bool GetHardwareRand(unsigned char* ent32) noexcept {\n+static bool SeedHardwareFast(CSHA512& hasher) noexcept {\n #if defined(__x86_64__) || defined(__amd64__) || defined(__i386__)\n-    if (rdrand_supported) {\n-        uint8_t ok;\n-        // Not all assemblers support the rdrand instruction, write it in hex.\n-#ifdef __i386__\n-        for (int iter = 0; iter < 4; ++iter) {\n-            uint32_t r1, r2;\n-            __asm__ volatile (\".byte 0x0f, 0xc7, 0xf0;\" // rdrand %eax\n-                              \".byte 0x0f, 0xc7, 0xf2;\" // rdrand %edx\n-                              \"setc %2\" :\n-                              \"=a\"(r1), \"=d\"(r2), \"=q\"(ok) :: \"cc\");\n-            if (!ok) return false;\n-            WriteLE32(ent32 + 8 * iter, r1);\n-            WriteLE32(ent32 + 8 * iter + 4, r2);\n-        }\n-#else\n-        uint64_t r1, r2, r3, r4;\n-        __asm__ volatile (\".byte 0x48, 0x0f, 0xc7, 0xf0, \" // rdrand %rax\n-                                \"0x48, 0x0f, 0xc7, 0xf3, \" // rdrand %rbx\n-                                \"0x48, 0x0f, 0xc7, 0xf1, \" // rdrand %rcx\n-                                \"0x48, 0x0f, 0xc7, 0xf2; \" // rdrand %rdx\n-                          \"setc %4\" :\n-                          \"=a\"(r1), \"=b\"(r2), \"=c\"(r3), \"=d\"(r4), \"=q\"(ok) :: \"cc\");\n-        if (!ok) return false;\n-        WriteLE64(ent32, r1);\n-        WriteLE64(ent32 + 8, r2);\n-        WriteLE64(ent32 + 16, r3);\n-        WriteLE64(ent32 + 24, r4);\n+    if (g_rdrand_supported) {\n+        uint64_t out = GetRdRand();\n+        hasher.Write((const unsigned char*)&out, sizeof(out));\n+        return true;\n+    }\n #endif\n+    return false;\n+}\n+\n+static bool SeedHardwareSlow(CSHA512& hasher) noexcept {\n+#if defined(__x86_64__) || defined(__amd64__) || defined(__i386__)\n+    // When we want 256 bits of entropy, prefer RdSeed over RdRand, as it's\n+    // guaranteed to produce independent randomness on every call.\n+    if (g_rdseed_supported) {\n+        for (int i = 0; i < 4; ++i) {\n+            uint64_t out = GetRdSeed();\n+            hasher.Write((const unsigned char*)&out, sizeof(out));\n+        }\n+        return true;\n+    }\n+    // When falling back to RdRand, XOR the result of 1024 results.\n+    // This guarantees a reseeding occurs between each.\n+    if (g_rdrand_supported) {",
    "path": "src/random.cpp",
    "position": 184,
    "original_position": 175,
    "commit_id": "1435fabc19d2143187efb493cbe23225eaf851ae",
    "original_commit_id": "673964328fc2a09cfd9d14ca59c8b37ffa49620c",
    "user": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "The prior block unconditionally returns if its entered, so it is not applied if rdseed is supported (and shouldn't be.)",
    "created_at": "2019-02-02T01:04:08Z",
    "updated_at": "2019-02-04T01:34:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15250#discussion_r253244449",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15250",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/253244449"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15250#discussion_r253244449"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15250"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/253244449/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 229,
    "original_line": 229,
    "side": "RIGHT",
    "in_reply_to_id": 252738850
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/253312226",
    "pull_request_review_id": 199397616,
    "id": 253312226,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MzMxMjIyNg==",
    "diff_hunk": "@@ -107,36 +194,36 @@ static void InitHardwareRand() {}\n static void ReportHardwareRand() {}\n #endif\n \n-static bool GetHardwareRand(unsigned char* ent32) noexcept {\n+static bool SeedHardwareFast(CSHA512& hasher) noexcept {\n #if defined(__x86_64__) || defined(__amd64__) || defined(__i386__)\n-    if (rdrand_supported) {\n-        uint8_t ok;\n-        // Not all assemblers support the rdrand instruction, write it in hex.\n-#ifdef __i386__\n-        for (int iter = 0; iter < 4; ++iter) {\n-            uint32_t r1, r2;\n-            __asm__ volatile (\".byte 0x0f, 0xc7, 0xf0;\" // rdrand %eax\n-                              \".byte 0x0f, 0xc7, 0xf2;\" // rdrand %edx\n-                              \"setc %2\" :\n-                              \"=a\"(r1), \"=d\"(r2), \"=q\"(ok) :: \"cc\");\n-            if (!ok) return false;\n-            WriteLE32(ent32 + 8 * iter, r1);\n-            WriteLE32(ent32 + 8 * iter + 4, r2);\n-        }\n-#else\n-        uint64_t r1, r2, r3, r4;\n-        __asm__ volatile (\".byte 0x48, 0x0f, 0xc7, 0xf0, \" // rdrand %rax\n-                                \"0x48, 0x0f, 0xc7, 0xf3, \" // rdrand %rbx\n-                                \"0x48, 0x0f, 0xc7, 0xf1, \" // rdrand %rcx\n-                                \"0x48, 0x0f, 0xc7, 0xf2; \" // rdrand %rdx\n-                          \"setc %4\" :\n-                          \"=a\"(r1), \"=b\"(r2), \"=c\"(r3), \"=d\"(r4), \"=q\"(ok) :: \"cc\");\n-        if (!ok) return false;\n-        WriteLE64(ent32, r1);\n-        WriteLE64(ent32 + 8, r2);\n-        WriteLE64(ent32 + 16, r3);\n-        WriteLE64(ent32 + 24, r4);\n+    if (g_rdrand_supported) {\n+        uint64_t out = GetRdRand();\n+        hasher.Write((const unsigned char*)&out, sizeof(out));\n+        return true;\n+    }\n #endif\n+    return false;\n+}\n+\n+static bool SeedHardwareSlow(CSHA512& hasher) noexcept {",
    "path": "src/random.cpp",
    "position": null,
    "original_position": 162,
    "commit_id": "1435fabc19d2143187efb493cbe23225eaf851ae",
    "original_commit_id": "673964328fc2a09cfd9d14ca59c8b37ffa49620c",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "If returning `bool` then please consider `NODISCARD`.",
    "created_at": "2019-02-03T17:56:45Z",
    "updated_at": "2019-02-04T01:34:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15250#discussion_r253312226",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15250",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/253312226"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15250#discussion_r253312226"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15250"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/253312226/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 208,
    "side": "RIGHT",
    "in_reply_to_id": 252753330
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/253312235",
    "pull_request_review_id": 199397624,
    "id": 253312235,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MzMxMjIzNQ==",
    "diff_hunk": "@@ -107,36 +194,36 @@ static void InitHardwareRand() {}\n static void ReportHardwareRand() {}\n #endif\n \n-static bool GetHardwareRand(unsigned char* ent32) noexcept {\n+static bool SeedHardwareFast(CSHA512& hasher) noexcept {",
    "path": "src/random.cpp",
    "position": null,
    "original_position": 124,
    "commit_id": "1435fabc19d2143187efb493cbe23225eaf851ae",
    "original_commit_id": "673964328fc2a09cfd9d14ca59c8b37ffa49620c",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Same here: if returning `bool` then please consider `NODISCARD`.",
    "created_at": "2019-02-03T17:56:55Z",
    "updated_at": "2019-02-04T01:34:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15250#discussion_r253312235",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15250",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/253312235"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15250#discussion_r253312235"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15250"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/253312235/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 197,
    "side": "RIGHT",
    "in_reply_to_id": 252753406
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/253322279",
    "pull_request_review_id": 199408247,
    "id": 253322279,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MzMyMjI3OQ==",
    "diff_hunk": "@@ -78,25 +78,112 @@ static inline int64_t GetPerformanceCounter() noexcept\n }\n \n #if defined(__x86_64__) || defined(__amd64__) || defined(__i386__)\n-static bool rdrand_supported = false;\n+static bool g_rdrand_supported = false;\n+static bool g_rdseed_supported = false;\n static constexpr uint32_t CPUID_F1_ECX_RDRAND = 0x40000000;\n+static constexpr uint32_t CPUID_F7_EBX_RDSEED = 0x00040000;\n+\n+static void inline GetCPUID(uint32_t leaf, uint32_t subleaf, uint32_t& a, uint32_t& b, uint32_t& c, uint32_t& d)\n+{\n+#ifdef __GNUC__\n+    __cpuid_count(leaf, subleaf, a, b, c, d);\n+#else\n+  __asm__ (\"cpuid\" : \"=a\"(a), \"=b\"(b), \"=c\"(c), \"=d\"(d) : \"0\"(leaf), \"2\"(subleaf));",
    "path": "src/random.cpp",
    "position": null,
    "original_position": 15,
    "commit_id": "1435fabc19d2143187efb493cbe23225eaf851ae",
    "original_commit_id": "673964328fc2a09cfd9d14ca59c8b37ffa49620c",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Where?",
    "created_at": "2019-02-03T22:16:42Z",
    "updated_at": "2019-02-04T01:34:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15250#discussion_r253322279",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15250",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/253322279"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15250#discussion_r253322279"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15250"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/253322279/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 97,
    "side": "RIGHT",
    "in_reply_to_id": 252701628
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/253322358",
    "pull_request_review_id": 199408342,
    "id": 253322358,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MzMyMjM1OA==",
    "diff_hunk": "@@ -78,25 +78,112 @@ static inline int64_t GetPerformanceCounter() noexcept\n }\n \n #if defined(__x86_64__) || defined(__amd64__) || defined(__i386__)\n-static bool rdrand_supported = false;\n+static bool g_rdrand_supported = false;\n+static bool g_rdseed_supported = false;\n static constexpr uint32_t CPUID_F1_ECX_RDRAND = 0x40000000;\n+static constexpr uint32_t CPUID_F7_EBX_RDSEED = 0x00040000;\n+\n+static void inline GetCPUID(uint32_t leaf, uint32_t subleaf, uint32_t& a, uint32_t& b, uint32_t& c, uint32_t& d)",
    "path": "src/random.cpp",
    "position": 15,
    "original_position": 10,
    "commit_id": "1435fabc19d2143187efb493cbe23225eaf851ae",
    "original_commit_id": "673964328fc2a09cfd9d14ca59c8b37ffa49620c",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "No, we need subleafs to detect rdseed, so __get_cpuid won't work.",
    "created_at": "2019-02-03T22:19:00Z",
    "updated_at": "2019-02-04T01:34:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15250#discussion_r253322358",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15250",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/253322358"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15250#discussion_r253322358"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15250"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/253322358/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 91,
    "original_line": 91,
    "side": "RIGHT",
    "in_reply_to_id": 252730526
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/253322640",
    "pull_request_review_id": 199408631,
    "id": 253322640,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MzMyMjY0MA==",
    "diff_hunk": "@@ -78,25 +78,112 @@ static inline int64_t GetPerformanceCounter() noexcept\n }\n \n #if defined(__x86_64__) || defined(__amd64__) || defined(__i386__)\n-static bool rdrand_supported = false;\n+static bool g_rdrand_supported = false;\n+static bool g_rdseed_supported = false;\n static constexpr uint32_t CPUID_F1_ECX_RDRAND = 0x40000000;\n+static constexpr uint32_t CPUID_F7_EBX_RDSEED = 0x00040000;\n+\n+static void inline GetCPUID(uint32_t leaf, uint32_t subleaf, uint32_t& a, uint32_t& b, uint32_t& c, uint32_t& d)\n+{\n+#ifdef __GNUC__\n+    __cpuid_count(leaf, subleaf, a, b, c, d);\n+#else\n+  __asm__ (\"cpuid\" : \"=a\"(a), \"=b\"(b), \"=c\"(c), \"=d\"(d) : \"0\"(leaf), \"2\"(subleaf));\n+#endif\n+}\n+\n static void InitHardwareRand()\n {\n     uint32_t eax, ebx, ecx, edx;\n-    if (__get_cpuid(1, &eax, &ebx, &ecx, &edx) && (ecx & CPUID_F1_ECX_RDRAND)) {\n-        rdrand_supported = true;\n+    GetCPUID(1, 0, eax, ebx, ecx, edx);\n+    if (ecx & CPUID_F1_ECX_RDRAND) {\n+        g_rdrand_supported = true;\n+        GetCPUID(7, 0, eax, ebx, ecx, edx);\n+        if (ebx & CPUID_F7_EBX_RDSEED) {\n+            g_rdseed_supported = true;\n+        }\n     }\n }\n \n static void ReportHardwareRand()\n {\n-    if (rdrand_supported) {\n-        // This must be done in a separate function, as HWRandInit() may be indirectly called\n-        // from global constructors, before logging is initialized.\n+    // This must be done in a separate function, as HWRandInit() may be indirectly called\n+    // from global constructors, before logging is initialized.\n+    if (g_rdseed_supported) {\n+        LogPrintf(\"Using RdSeed and RdRand as additional entropy sources\\n\");\n+    } else if (g_rdrand_supported) {\n         LogPrintf(\"Using RdRand as an additional entropy source\\n\");\n     }\n }\n \n+/** Read 64 bits of entropy using rdrand.\n+ *\n+ * Must only be called when RdRand is supported.\n+ */\n+static uint64_t GetRdRand() noexcept\n+{\n+    // RdRand may very rarely fail. Invoke it up to 10 times in a loop to reduce this risk.\n+#ifdef __i386__\n+    uint8_t ok;\n+    uint32_t r1, r2;\n+    for (int i = 0; i < 10; ++i) {\n+        __asm__ volatile (\".byte 0x0f, 0xc7, 0xf0; setc %1\" : \"=a\"(r1), \"=q\"(ok) :: \"cc\"); // rdrand %eax\n+        if (ok) break;\n+    }\n+    for (int i = 0; i < 10; ++i) {\n+        __asm__ volatile (\".byte 0x0f, 0xc7, 0xf0; setc %1\" : \"=a\"(r2), \"=q\"(ok) :: \"cc\"); // rdrand %eax\n+        if (ok) break;\n+    }\n+    return (((uint64_t)r2) << 32) | r1;",
    "path": "src/random.cpp",
    "position": 73,
    "original_position": 66,
    "commit_id": "1435fabc19d2143187efb493cbe23225eaf851ae",
    "original_commit_id": "673964328fc2a09cfd9d14ca59c8b37ffa49620c",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "@Empact Nothing is being added together here (it's concatenated, which doesn't suffer from the same problem). Also, this function is only trying to produce a 64-bit value.",
    "created_at": "2019-02-03T22:25:27Z",
    "updated_at": "2019-02-04T01:34:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15250#discussion_r253322640",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15250",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/253322640"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15250#discussion_r253322640"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15250"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/253322640/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 144,
    "original_line": 144,
    "side": "RIGHT",
    "in_reply_to_id": 252751670
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/253322806",
    "pull_request_review_id": 199408808,
    "id": 253322806,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MzMyMjgwNg==",
    "diff_hunk": "@@ -107,36 +194,36 @@ static void InitHardwareRand() {}\n static void ReportHardwareRand() {}\n #endif\n \n-static bool GetHardwareRand(unsigned char* ent32) noexcept {\n+static bool SeedHardwareFast(CSHA512& hasher) noexcept {",
    "path": "src/random.cpp",
    "position": null,
    "original_position": 124,
    "commit_id": "1435fabc19d2143187efb493cbe23225eaf851ae",
    "original_commit_id": "673964328fc2a09cfd9d14ca59c8b37ffa49620c",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Fixed. `bool` is gone.",
    "created_at": "2019-02-03T22:28:25Z",
    "updated_at": "2019-02-04T01:34:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15250#discussion_r253322806",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15250",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/253322806"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15250#discussion_r253322806"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15250"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/253322806/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 197,
    "side": "RIGHT",
    "in_reply_to_id": 252753406
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/253322817",
    "pull_request_review_id": 199408817,
    "id": 253322817,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MzMyMjgxNw==",
    "diff_hunk": "@@ -107,36 +194,36 @@ static void InitHardwareRand() {}\n static void ReportHardwareRand() {}\n #endif\n \n-static bool GetHardwareRand(unsigned char* ent32) noexcept {\n+static bool SeedHardwareFast(CSHA512& hasher) noexcept {\n #if defined(__x86_64__) || defined(__amd64__) || defined(__i386__)\n-    if (rdrand_supported) {\n-        uint8_t ok;\n-        // Not all assemblers support the rdrand instruction, write it in hex.\n-#ifdef __i386__\n-        for (int iter = 0; iter < 4; ++iter) {\n-            uint32_t r1, r2;\n-            __asm__ volatile (\".byte 0x0f, 0xc7, 0xf0;\" // rdrand %eax\n-                              \".byte 0x0f, 0xc7, 0xf2;\" // rdrand %edx\n-                              \"setc %2\" :\n-                              \"=a\"(r1), \"=d\"(r2), \"=q\"(ok) :: \"cc\");\n-            if (!ok) return false;\n-            WriteLE32(ent32 + 8 * iter, r1);\n-            WriteLE32(ent32 + 8 * iter + 4, r2);\n-        }\n-#else\n-        uint64_t r1, r2, r3, r4;\n-        __asm__ volatile (\".byte 0x48, 0x0f, 0xc7, 0xf0, \" // rdrand %rax\n-                                \"0x48, 0x0f, 0xc7, 0xf3, \" // rdrand %rbx\n-                                \"0x48, 0x0f, 0xc7, 0xf1, \" // rdrand %rcx\n-                                \"0x48, 0x0f, 0xc7, 0xf2; \" // rdrand %rdx\n-                          \"setc %4\" :\n-                          \"=a\"(r1), \"=b\"(r2), \"=c\"(r3), \"=d\"(r4), \"=q\"(ok) :: \"cc\");\n-        if (!ok) return false;\n-        WriteLE64(ent32, r1);\n-        WriteLE64(ent32 + 8, r2);\n-        WriteLE64(ent32 + 16, r3);\n-        WriteLE64(ent32 + 24, r4);\n+    if (g_rdrand_supported) {\n+        uint64_t out = GetRdRand();\n+        hasher.Write((const unsigned char*)&out, sizeof(out));\n+        return true;\n+    }\n #endif\n+    return false;\n+}\n+\n+static bool SeedHardwareSlow(CSHA512& hasher) noexcept {",
    "path": "src/random.cpp",
    "position": null,
    "original_position": 162,
    "commit_id": "1435fabc19d2143187efb493cbe23225eaf851ae",
    "original_commit_id": "673964328fc2a09cfd9d14ca59c8b37ffa49620c",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Fixed, removed the bool.",
    "created_at": "2019-02-03T22:28:37Z",
    "updated_at": "2019-02-04T01:34:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15250#discussion_r253322817",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15250",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/253322817"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15250#discussion_r253322817"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15250"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/253322817/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 208,
    "side": "RIGHT",
    "in_reply_to_id": 252753330
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/253322842",
    "pull_request_review_id": 199408845,
    "id": 253322842,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MzMyMjg0Mg==",
    "diff_hunk": "@@ -78,25 +78,112 @@ static inline int64_t GetPerformanceCounter() noexcept\n }\n \n #if defined(__x86_64__) || defined(__amd64__) || defined(__i386__)\n-static bool rdrand_supported = false;\n+static bool g_rdrand_supported = false;\n+static bool g_rdseed_supported = false;\n static constexpr uint32_t CPUID_F1_ECX_RDRAND = 0x40000000;\n+static constexpr uint32_t CPUID_F7_EBX_RDSEED = 0x00040000;\n+\n+static void inline GetCPUID(uint32_t leaf, uint32_t subleaf, uint32_t& a, uint32_t& b, uint32_t& c, uint32_t& d)\n+{\n+#ifdef __GNUC__\n+    __cpuid_count(leaf, subleaf, a, b, c, d);\n+#else\n+  __asm__ (\"cpuid\" : \"=a\"(a), \"=b\"(b), \"=c\"(c), \"=d\"(d) : \"0\"(leaf), \"2\"(subleaf));\n+#endif\n+}\n+\n static void InitHardwareRand()\n {\n     uint32_t eax, ebx, ecx, edx;\n-    if (__get_cpuid(1, &eax, &ebx, &ecx, &edx) && (ecx & CPUID_F1_ECX_RDRAND)) {\n-        rdrand_supported = true;\n+    GetCPUID(1, 0, eax, ebx, ecx, edx);\n+    if (ecx & CPUID_F1_ECX_RDRAND) {\n+        g_rdrand_supported = true;\n+        GetCPUID(7, 0, eax, ebx, ecx, edx);\n+        if (ebx & CPUID_F7_EBX_RDSEED) {\n+            g_rdseed_supported = true;\n+        }",
    "path": "src/random.cpp",
    "position": null,
    "original_position": 30,
    "commit_id": "1435fabc19d2143187efb493cbe23225eaf851ae",
    "original_commit_id": "673964328fc2a09cfd9d14ca59c8b37ffa49620c",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Indeed, made them independent.",
    "created_at": "2019-02-03T22:28:59Z",
    "updated_at": "2019-02-04T01:34:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15250#discussion_r253322842",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15250",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/253322842"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15250#discussion_r253322842"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15250"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/253322842/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 104,
    "side": "RIGHT",
    "in_reply_to_id": 252738092
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/253322845",
    "pull_request_review_id": 199408849,
    "id": 253322845,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MzMyMjg0NQ==",
    "diff_hunk": "@@ -78,25 +78,112 @@ static inline int64_t GetPerformanceCounter() noexcept\n }\n \n #if defined(__x86_64__) || defined(__amd64__) || defined(__i386__)\n-static bool rdrand_supported = false;\n+static bool g_rdrand_supported = false;\n+static bool g_rdseed_supported = false;\n static constexpr uint32_t CPUID_F1_ECX_RDRAND = 0x40000000;\n+static constexpr uint32_t CPUID_F7_EBX_RDSEED = 0x00040000;",
    "path": "src/random.cpp",
    "position": 8,
    "original_position": 8,
    "commit_id": "1435fabc19d2143187efb493cbe23225eaf851ae",
    "original_commit_id": "673964328fc2a09cfd9d14ca59c8b37ffa49620c",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done.",
    "created_at": "2019-02-03T22:29:05Z",
    "updated_at": "2019-02-04T01:34:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15250#discussion_r253322845",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15250",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/253322845"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15250#discussion_r253322845"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15250"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/253322845/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 84,
    "original_line": 84,
    "side": "RIGHT",
    "in_reply_to_id": 252731598
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/253322848",
    "pull_request_review_id": 199408852,
    "id": 253322848,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MzMyMjg0OA==",
    "diff_hunk": "@@ -78,25 +78,112 @@ static inline int64_t GetPerformanceCounter() noexcept\n }\n \n #if defined(__x86_64__) || defined(__amd64__) || defined(__i386__)\n-static bool rdrand_supported = false;\n+static bool g_rdrand_supported = false;\n+static bool g_rdseed_supported = false;\n static constexpr uint32_t CPUID_F1_ECX_RDRAND = 0x40000000;\n+static constexpr uint32_t CPUID_F7_EBX_RDSEED = 0x00040000;\n+\n+static void inline GetCPUID(uint32_t leaf, uint32_t subleaf, uint32_t& a, uint32_t& b, uint32_t& c, uint32_t& d)",
    "path": "src/random.cpp",
    "position": 15,
    "original_position": 10,
    "commit_id": "1435fabc19d2143187efb493cbe23225eaf851ae",
    "original_commit_id": "673964328fc2a09cfd9d14ca59c8b37ffa49620c",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Added a comment.",
    "created_at": "2019-02-03T22:29:13Z",
    "updated_at": "2019-02-04T01:34:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15250#discussion_r253322848",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15250",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/253322848"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15250#discussion_r253322848"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15250"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/253322848/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 91,
    "original_line": 91,
    "side": "RIGHT",
    "in_reply_to_id": 252730526
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/253324675",
    "pull_request_review_id": 199410793,
    "id": 253324675,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MzMyNDY3NQ==",
    "diff_hunk": "@@ -78,25 +78,112 @@ static inline int64_t GetPerformanceCounter() noexcept\n }\n \n #if defined(__x86_64__) || defined(__amd64__) || defined(__i386__)\n-static bool rdrand_supported = false;\n+static bool g_rdrand_supported = false;\n+static bool g_rdseed_supported = false;\n static constexpr uint32_t CPUID_F1_ECX_RDRAND = 0x40000000;\n+static constexpr uint32_t CPUID_F7_EBX_RDSEED = 0x00040000;\n+\n+static void inline GetCPUID(uint32_t leaf, uint32_t subleaf, uint32_t& a, uint32_t& b, uint32_t& c, uint32_t& d)\n+{\n+#ifdef __GNUC__\n+    __cpuid_count(leaf, subleaf, a, b, c, d);\n+#else\n+  __asm__ (\"cpuid\" : \"=a\"(a), \"=b\"(b), \"=c\"(c), \"=d\"(d) : \"0\"(leaf), \"2\"(subleaf));",
    "path": "src/random.cpp",
    "position": null,
    "original_position": 15,
    "commit_id": "1435fabc19d2143187efb493cbe23225eaf851ae",
    "original_commit_id": "673964328fc2a09cfd9d14ca59c8b37ffa49620c",
    "user": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Line 91 is indented 2 spaces instead of 4. :P",
    "created_at": "2019-02-03T23:08:14Z",
    "updated_at": "2019-02-04T01:34:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15250#discussion_r253324675",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15250",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/253324675"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15250#discussion_r253324675"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15250"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/253324675/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 97,
    "side": "RIGHT",
    "in_reply_to_id": 252701628
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/253332103",
    "pull_request_review_id": 199419364,
    "id": 253332103,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MzMzMjEwMw==",
    "diff_hunk": "@@ -78,25 +78,112 @@ static inline int64_t GetPerformanceCounter() noexcept\n }\n \n #if defined(__x86_64__) || defined(__amd64__) || defined(__i386__)\n-static bool rdrand_supported = false;\n+static bool g_rdrand_supported = false;\n+static bool g_rdseed_supported = false;\n static constexpr uint32_t CPUID_F1_ECX_RDRAND = 0x40000000;\n+static constexpr uint32_t CPUID_F7_EBX_RDSEED = 0x00040000;\n+\n+static void inline GetCPUID(uint32_t leaf, uint32_t subleaf, uint32_t& a, uint32_t& b, uint32_t& c, uint32_t& d)\n+{\n+#ifdef __GNUC__\n+    __cpuid_count(leaf, subleaf, a, b, c, d);\n+#else\n+  __asm__ (\"cpuid\" : \"=a\"(a), \"=b\"(b), \"=c\"(c), \"=d\"(d) : \"0\"(leaf), \"2\"(subleaf));",
    "path": "src/random.cpp",
    "position": null,
    "original_position": 15,
    "commit_id": "1435fabc19d2143187efb493cbe23225eaf851ae",
    "original_commit_id": "673964328fc2a09cfd9d14ca59c8b37ffa49620c",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Oh! Fixed.",
    "created_at": "2019-02-04T01:34:53Z",
    "updated_at": "2019-02-04T01:34:53Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15250#discussion_r253332103",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15250",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/253332103"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15250#discussion_r253332103"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15250"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/253332103/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 97,
    "side": "RIGHT",
    "in_reply_to_id": 252701628
  }
]