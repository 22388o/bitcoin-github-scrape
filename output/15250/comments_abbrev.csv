practicalswift,2019-01-25T09:00:54Z,While you're changing `random.cpp`: isn't the `std::move` on L562 without any effect? Could be removed? ,https://github.com/bitcoin/bitcoin/pull/15250#issuecomment-457502955,457502955,
sipa,2019-01-25T22:34:10Z,"@practicalswift `MixExtract` intentionally takes an rvalue reference, so that callers must either pass in a temporary, or use `std::move` explicitly (as the hasher object becomes useless after the call).",https://github.com/bitcoin/bitcoin/pull/15250#issuecomment-457756126,457756126,
sipa,2019-01-26T07:28:22Z,"@gmaxwell Wow, I didn't know about those failure modes of RdRand and RdSeed. Rewrote things a bit to take that into account. RdRand is now retried up to 10 times (and ignored after that). RdSeed is retried indefinitely (with a pause in between). When using RdRand for 256-bit seeding, it's invoked 1024 times and XORed to produce each 64 bit group.",https://github.com/bitcoin/bitcoin/pull/15250#issuecomment-457809977,457809977,
gmaxwell,2019-01-28T15:47:50Z,utACK,https://github.com/bitcoin/bitcoin/pull/15250#issuecomment-458183513,458183513,
gmaxwell,2019-02-07T02:29:27Z,ACK,https://github.com/bitcoin/bitcoin/pull/15250#issuecomment-461266838,461266838,
gmaxwell,2019-02-07T02:39:50Z,"Aside, we might want to consider this one a bug fix, since technically we weren't using rdrand quite correctly before.  OTOH, the use of rdrand was entirely non-critical... sooo...",https://github.com/bitcoin/bitcoin/pull/15250#issuecomment-461268568,461268568,
laanwj,2019-02-12T12:26:47Z,So to be clear: this doesn't result in a CPU with broken and/or backdoored `RDRAND` or `RDSEED` instruction to generate vulberable private keys?,https://github.com/bitcoin/bitcoin/pull/15250#issuecomment-462740431,462740431,
sipa,2019-02-12T15:57:32Z,"@laanwj Not trivially, at least. The output of the rdrand/rdseed is mixed with other entropy using SHA512 to produce output and the new state.\n\nIn theory a backdoored CPU could try to infer what variable is going to store entropy, and try to control that directly. ",https://github.com/bitcoin/bitcoin/pull/15250#issuecomment-462816434,462816434,
laanwj,2019-02-12T16:46:26Z,"Thanks!\n\n> In theory a backdoored CPU could try to infer what variable is going to store entropy, and try to control that directly.\n\nSureâ€”I meant when say, only those instructions were made to return a fixed value, not anything more advanced/complex. Like a bugdoor with plausible deniability.",https://github.com/bitcoin/bitcoin/pull/15250#issuecomment-462837153,462837153,
laanwj,2019-02-13T18:10:41Z,"Code review utACK 1435fabc19d2143187efb493cbe23225eaf851ae\nI have no hardware to be able to test this on.\n(if you do, `/proc/cpuinfo` will show the `rdrand` and/or `rdseed` under `flags`)",https://github.com/bitcoin/bitcoin/pull/15250#issuecomment-463305751,463305751,
JustinTArthur,2019-02-13T19:39:39Z,"ACK 1435fab on macOS x86_64 on Intel Core i7-7920HQ CPU @ 3.10GHz (has RDRAND & RDSEED).\n\n> `2019-02-13T19:22:30Z Using the 'sse4(1way),sse41(4way),avx2(8way)' SHA256 implementation`\n> `2019-02-13T19:22:30Z Using RdSeed as additional entropy source`\n> `2019-02-13T19:22:30Z Using RdRand as an additional entropy source`\n\nFunctional and unit tests pass.",https://github.com/bitcoin/bitcoin/pull/15250#issuecomment-463338406,463338406,
sipa,2019-02-13T20:33:24Z,"Tested on a system with RdRand but no RdSeed; tests pass, `bitcoind` runs fine, and reports only ""Using RdRand as an additional entropy source"".",https://github.com/bitcoin/bitcoin/pull/15250#issuecomment-463357488,463357488,
gmaxwell,2019-02-14T03:29:17Z,"Tested on a system with no rdrand/rdseed, and it didn't catch fire. does @luke-jr  maybe have a 32-bit system with rdrand/rdseed?",https://github.com/bitcoin/bitcoin/pull/15250#issuecomment-463473843,463473843,
gmaxwell,2019-02-14T03:35:53Z,"@laanwj  To expand on Pieter's response.  Our mixing construction is designed to be secure against adversarial inputs generated by an attacker that can also inspect the entire process state unless the attacker can attack SHA512 in a very serious way (e.g. construct a suffix to a message being hashed that causes a specific hash value).\n\nThere are various standards for combining entropy sources ",https://github.com/bitcoin/bitcoin/pull/15250#issuecomment-463475107,463475107,
pstratem,2019-02-14T21:37:15Z,"@gmaxwell \n`\nLinux debian 4.9.0-8-686-pae #1 SMP Debian 4.9.130-2 (2018-10-27) i686 GNU/Linux\n2019-02-14T21:30:29Z Using RdSeed as additional entropy source\n2019-02-14T21:30:29Z Using RdRand as an additional entropy source\n`",https://github.com/bitcoin/bitcoin/pull/15250#issuecomment-463808142,463808142,
gmaxwell,2019-01-26T04:55:30Z,"I feel like this and the one below should be guarded by #if defined(__x86_64__) || defined(__amd64__)  ... I think we'd like to prefer x86_64 asm in the output, even if we're not going to call it. :P",https://github.com/bitcoin/bitcoin/pull/15250#discussion_r251188313,251188313,src/random.cpp
gmaxwell,2019-01-26T05:06:57Z,"Maybe we should ignore it for the less critical runtime use, but pedantically: \n\n""After invoking the RDRAND instruction, the caller must examine the carry flag (CF) to determine whether a random value was available at the time the RDRAND instruction was executed. As Table 3 shows, a value of 1 indicates that a random value was available and placed in the destination register provided in the in",https://github.com/bitcoin/bitcoin/pull/15250#discussion_r251188552,251188552,src/random.cpp
gmaxwell,2019-01-26T05:08:38Z,"""After invoking the RDSEED instruction, the caller must examine the carry flag (CF) to determine whether a random seed was available at the time the RDSEED instruction was executed. As shown in Table 5, a value of 1 indicates that a random seed was available and placed in the destination register provided in the invocation."" ""Unlike the RDRAND instruction, the seed values come directly from the en",https://github.com/bitcoin/bitcoin/pull/15250#discussion_r251188580,251188580,src/random.cpp
sipa,2019-01-26T07:25:14Z,Done.,https://github.com/bitcoin/bitcoin/pull/15250#discussion_r251191210,251191210,src/random.cpp
sipa,2019-01-26T07:25:23Z,Done.,https://github.com/bitcoin/bitcoin/pull/15250#discussion_r251191212,251191212,src/random.cpp
sipa,2019-01-26T07:26:34Z,Done.,https://github.com/bitcoin/bitcoin/pull/15250#discussion_r251191232,251191232,src/random.cpp
Empact,2019-01-31T15:01:20Z,nit: whitespace,https://github.com/bitcoin/bitcoin/pull/15250#discussion_r252701628,252701628,src/random.cpp
Empact,2019-01-31T16:07:10Z,"Maybe I'm mistaken, but I think we can use `__get_cpuid` here, e.g.:\nhttps://github.com/linuxkit/linuxkit/blob/c5b3f24de6ba2238c5465025960f16920a731124/pkg/rngd/cmd/rngd/rng_linux_amd64.go#L11-L23\n\nIf not, how about a comment ala, or extracting a common method: https://github.com/bitcoin/bitcoin/blob/4d661baf1aca4226d1c4ec89fe7e44c1f93f04da/src/crypto/sha256.cpp#L552",https://github.com/bitcoin/bitcoin/pull/15250#discussion_r252730526,252730526,src/random.cpp
Empact,2019-01-31T16:09:39Z,"Maybe `static_assert` against `cpuid.h`'s definition of `bit_RDRND`, `bit_RDSEED` if available?",https://github.com/bitcoin/bitcoin/pull/15250#discussion_r252731598,252731598,src/random.cpp
Empact,2019-01-31T16:24:45Z,Wasn't able to find a source for this: is RDSEED always and everywhere absent if RDRAND is absent? Seems relatively harmless to not make the tests dependent on one another. https://software.intel.com/en-us/articles/intel-digital-random-number-generator-drng-software-implementation-guide#inpage-nav-6-1,https://github.com/bitcoin/bitcoin/pull/15250#discussion_r252738092,252738092,src/random.cpp
Empact,2019-01-31T16:26:26Z,"This is always applied when the `g_rdseed_supported` case is, given the dependent detection logic. `else if`?",https://github.com/bitcoin/bitcoin/pull/15250#discussion_r252738850,252738850,src/random.cpp
Empact,2019-01-31T16:55:47Z,"> If you put two 64-bit values with additive prediction resistance togehter, the prediction resistance of the resulting value is only 65 bits (264 + 264 = 265).\nhttps://software.intel.com/en-us/blogs/2012/11/17/the-difference-between-rdrand-and-rdseed\n\nAssume this is addressed via the XOR rounds?",https://github.com/bitcoin/bitcoin/pull/15250#discussion_r252751670,252751670,src/random.cpp
Empact,2019-01-31T16:59:51Z,Returns `bool` that no one reacts to. Drop or log? ,https://github.com/bitcoin/bitcoin/pull/15250#discussion_r252753330,252753330,src/random.cpp
Empact,2019-01-31T17:00:02Z,Returns `bool` that no one reacts to. Drop or log?,https://github.com/bitcoin/bitcoin/pull/15250#discussion_r252753406,252753406,src/random.cpp
gmaxwell,2019-02-02T01:01:11Z,"Keep reading: rdrand is guaranteed to be reseeded at least every 1022 calls, see the documentation that I provided in earlier comments.",https://github.com/bitcoin/bitcoin/pull/15250#discussion_r253244146,253244146,src/random.cpp
gmaxwell,2019-02-02T01:04:08Z,"The prior block unconditionally returns if its entered, so it is not applied if rdseed is supported (and shouldn't be.)",https://github.com/bitcoin/bitcoin/pull/15250#discussion_r253244449,253244449,src/random.cpp
practicalswift,2019-02-03T17:56:45Z,If returning `bool` then please consider `NODISCARD`.,https://github.com/bitcoin/bitcoin/pull/15250#discussion_r253312226,253312226,src/random.cpp
practicalswift,2019-02-03T17:56:55Z,Same here: if returning `bool` then please consider `NODISCARD`.,https://github.com/bitcoin/bitcoin/pull/15250#discussion_r253312235,253312235,src/random.cpp
sipa,2019-02-03T22:16:42Z,Where?,https://github.com/bitcoin/bitcoin/pull/15250#discussion_r253322279,253322279,src/random.cpp
sipa,2019-02-03T22:19:00Z,"No, we need subleafs to detect rdseed, so __get_cpuid won't work.",https://github.com/bitcoin/bitcoin/pull/15250#discussion_r253322358,253322358,src/random.cpp
sipa,2019-02-03T22:25:27Z,"@Empact Nothing is being added together here (it's concatenated, which doesn't suffer from the same problem). Also, this function is only trying to produce a 64-bit value.",https://github.com/bitcoin/bitcoin/pull/15250#discussion_r253322640,253322640,src/random.cpp
sipa,2019-02-03T22:28:25Z,Fixed. `bool` is gone.,https://github.com/bitcoin/bitcoin/pull/15250#discussion_r253322806,253322806,src/random.cpp
sipa,2019-02-03T22:28:37Z,"Fixed, removed the bool.",https://github.com/bitcoin/bitcoin/pull/15250#discussion_r253322817,253322817,src/random.cpp
sipa,2019-02-03T22:28:59Z,"Indeed, made them independent.",https://github.com/bitcoin/bitcoin/pull/15250#discussion_r253322842,253322842,src/random.cpp
sipa,2019-02-03T22:29:05Z,Done.,https://github.com/bitcoin/bitcoin/pull/15250#discussion_r253322845,253322845,src/random.cpp
sipa,2019-02-03T22:29:13Z,Added a comment.,https://github.com/bitcoin/bitcoin/pull/15250#discussion_r253322848,253322848,src/random.cpp
Empact,2019-02-03T23:08:14Z,Line 91 is indented 2 spaces instead of 4. :P,https://github.com/bitcoin/bitcoin/pull/15250#discussion_r253324675,253324675,src/random.cpp
sipa,2019-02-04T01:34:53Z,Oh! Fixed.,https://github.com/bitcoin/bitcoin/pull/15250#discussion_r253332103,253332103,src/random.cpp
