[
  {
    "sha": "367790d5cf85b62c47a908a2707bd4fa7af92c2b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNjc3OTBkNWNmODViNjJjNDdhOTA4YTI3MDdiZDRmYTdhZjkyYzJi",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2014-12-16T19:58:00Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-03-13T15:58:33Z"
      },
      "message": "[REST] basic input/output sanity check\n\nMentioned by SergioDemianLerner at https://github.com/bitcoin/bitcoin/commit/f676c80f437e15ab0ee190e93baea733a88db0f2#commitcomment-8996114",
      "tree": {
        "sha": "64e981f721a3ad5188ae784f9a634c253801633f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/64e981f721a3ad5188ae784f9a634c253801633f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/367790d5cf85b62c47a908a2707bd4fa7af92c2b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/367790d5cf85b62c47a908a2707bd4fa7af92c2b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/367790d5cf85b62c47a908a2707bd4fa7af92c2b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/367790d5cf85b62c47a908a2707bd4fa7af92c2b/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7077fe6dd4208bdbd46940f7923b7d89202c3287",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7077fe6dd4208bdbd46940f7923b7d89202c3287",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7077fe6dd4208bdbd46940f7923b7d89202c3287"
      }
    ],
    "stats": {
      "total": 60,
      "additions": 47,
      "deletions": 13
    },
    "files": [
      {
        "sha": "89cc2f244108523c677406af13dc6f3a0c5a70ae",
        "filename": "qa/rpc-tests/rest.py",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/367790d5cf85b62c47a908a2707bd4fa7af92c2b/qa/rpc-tests/rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/367790d5cf85b62c47a908a2707bd4fa7af92c2b/qa/rpc-tests/rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rest.py?ref=367790d5cf85b62c47a908a2707bd4fa7af92c2b",
        "patch": "@@ -113,5 +113,22 @@ def run_test(self):\n         json_obj = json.loads(json_string)\n         assert_equal(json_obj['bestblockhash'], bb_hash)\n \n+        #check input param sanity\n+        # check string sanity and limits\n+        response_header = http_get_call(url.hostname, url.port, '/rest/headers/1000000000000000/'+bb_hash+self.FORMAT_SEPARATOR+\"bin\", True)\n+        assert_equal(response_header.status, 400)\n+        response_header_str = response_header.read()\n+        assert_equal(\"Invalid input parameter\" in response_header_str, True)\n+        \n+        #check string sanity (block)\n+        response_header = http_get_call(url.hostname, url.port, '/rest/block/*!2%%%28()?^'+self.FORMAT_SEPARATOR+\"bin\", True)\n+        response_header_str = response_header.read()\n+        assert_equal(response_header_str[-8:].rstrip(), \"228()?\")\n+        \n+        #check string sanity (tx)\n+        response_header = http_get_call(url.hostname, url.port, '/rest/tx/*!2%%%28()?^'+self.FORMAT_SEPARATOR+\"bin\", True)\n+        response_header_str = response_header.read()\n+        assert_equal(response_header_str[-8:].rstrip(), \"228()?\")\n+        \n if __name__ == '__main__':\n     RESTTest ().main ()"
      },
      {
        "sha": "341f9d2b2e6e23b768d4b3862b70320ec8909821",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 30,
        "deletions": 13,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/367790d5cf85b62c47a908a2707bd4fa7af92c2b/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/367790d5cf85b62c47a908a2707bd4fa7af92c2b/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=367790d5cf85b62c47a908a2707bd4fa7af92c2b",
        "patch": "@@ -24,6 +24,13 @@ enum RetFormat {\n     RF_JSON,\n };\n \n+enum InputType {\n+    IT_UNDEF,\n+    IT_DIGITS,\n+    IT_BLOCKHASH,\n+    IT_TXHASH\n+};\n+\n static const struct {\n     enum RetFormat rf;\n     const char* name;\n@@ -52,6 +59,15 @@ static RestErr RESTERR(enum HTTPStatusCode status, string message)\n     return re;\n }\n \n+void CheckRequestString(const string inputString, enum InputType inputType = IT_UNDEF, size_t maxLength = 0)\n+{\n+    //check for requested input type and throw exception if invalid type or size\n+    if ( (inputType == IT_DIGITS && inputString.find_first_not_of(\"0123456789\") != std::string::npos)\n+        || ( (inputType == IT_BLOCKHASH || inputType == IT_TXHASH) && inputString.length() > 64)\n+        || (maxLength > 0 && inputString.length() > maxLength) )\n+        throw RESTERR(HTTP_BAD_REQUEST, \"Invalid input parameter (\"+ (std::string)( (maxLength > 0) ? \"wrong size\" : \"wrong type\" ) +\")\");\n+}\n+\n static enum RetFormat ParseDataFormat(vector<string>& params, const string strReq)\n {\n     boost::split(params, strReq, boost::is_any_of(\".\"));\n@@ -102,14 +118,15 @@ static bool rest_headers(AcceptedConnection* conn,\n     if (path.size() != 2)\n         throw RESTERR(HTTP_BAD_REQUEST, \"No header count specified. Use /rest/headers/<count>/<hash>.<ext>.\");\n \n+    CheckRequestString(path[0], IT_DIGITS, 8);\n     long count = strtol(path[0].c_str(), NULL, 10);\n     if (count < 1 || count > 2000)\n-        throw RESTERR(HTTP_BAD_REQUEST, \"Header count out of range: \" + path[0]);\n+        throw RESTERR(HTTP_BAD_REQUEST, \"Header count out of range: \" + SanitizeString(path[0]));\n \n-    string hashStr = path[1];\n+    CheckRequestString(path[1], IT_BLOCKHASH);\n     uint256 hash;\n-    if (!ParseHashStr(hashStr, hash))\n-        throw RESTERR(HTTP_BAD_REQUEST, \"Invalid hash: \" + hashStr);\n+    if (!ParseHashStr(path[1], hash))\n+        throw RESTERR(HTTP_BAD_REQUEST, \"Invalid hash: \" + SanitizeString(path[1]));\n \n     std::vector<CBlockHeader> headers;\n     headers.reserve(count);\n@@ -161,21 +178,21 @@ static bool rest_block(AcceptedConnection* conn,\n     vector<string> params;\n     const RetFormat rf = ParseDataFormat(params, strReq);\n \n-    string hashStr = params[0];\n+    CheckRequestString(params[0], IT_BLOCKHASH);\n     uint256 hash;\n-    if (!ParseHashStr(hashStr, hash))\n-        throw RESTERR(HTTP_BAD_REQUEST, \"Invalid hash: \" + hashStr);\n+    if (!ParseHashStr(params[0], hash))\n+        throw RESTERR(HTTP_BAD_REQUEST, \"Invalid hash: \" + SanitizeString(params[0]));\n \n     CBlock block;\n     CBlockIndex* pblockindex = NULL;\n     {\n         LOCK(cs_main);\n         if (mapBlockIndex.count(hash) == 0)\n-            throw RESTERR(HTTP_NOT_FOUND, hashStr + \" not found\");\n+            throw RESTERR(HTTP_NOT_FOUND, SanitizeString(params[0]) + \" not found\");\n \n         pblockindex = mapBlockIndex[hash];\n         if (!ReadBlockFromDisk(block, pblockindex))\n-            throw RESTERR(HTTP_NOT_FOUND, hashStr + \" not found\");\n+            throw RESTERR(HTTP_NOT_FOUND, SanitizeString(params[0]) + \" not found\");\n     }\n \n     CDataStream ssBlock(SER_NETWORK, PROTOCOL_VERSION);\n@@ -260,15 +277,15 @@ static bool rest_tx(AcceptedConnection* conn,\n     vector<string> params;\n     const RetFormat rf = ParseDataFormat(params, strReq);\n \n-    string hashStr = params[0];\n+    CheckRequestString(params[0], IT_TXHASH);\n     uint256 hash;\n-    if (!ParseHashStr(hashStr, hash))\n-        throw RESTERR(HTTP_BAD_REQUEST, \"Invalid hash: \" + hashStr);\n+    if (!ParseHashStr(params[0], hash))\n+        throw RESTERR(HTTP_BAD_REQUEST, \"Invalid hash: \" + SanitizeString(params[0]));\n \n     CTransaction tx;\n     uint256 hashBlock = uint256();\n     if (!GetTransaction(hash, tx, hashBlock, true))\n-        throw RESTERR(HTTP_NOT_FOUND, hashStr + \" not found\");\n+        throw RESTERR(HTTP_NOT_FOUND, SanitizeString(params[0]) + \" not found\");\n \n     CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n     ssTx << tx;"
      }
    ]
  },
  {
    "sha": "d5b73e13600e7e81a7cb0a01c2a4a871239ca673",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNWI3M2UxMzYwMGU3ZTgxYTdjYjBhMDFjMmE0YTg3MTIzOWNhNjcz",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-03-21T14:28:30Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-03-23T10:39:52Z"
      },
      "message": "[REST] basic input/output sanity check (overhaul)\n\n- removed SanitizeString() because we now make sure that input parameters are correct.\n- more precise parameter check including more details error string.",
      "tree": {
        "sha": "06e5e73e3b4625e62dbfc9abbeda47ab3cead70a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/06e5e73e3b4625e62dbfc9abbeda47ab3cead70a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d5b73e13600e7e81a7cb0a01c2a4a871239ca673",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d5b73e13600e7e81a7cb0a01c2a4a871239ca673",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d5b73e13600e7e81a7cb0a01c2a4a871239ca673",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d5b73e13600e7e81a7cb0a01c2a4a871239ca673/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "367790d5cf85b62c47a908a2707bd4fa7af92c2b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/367790d5cf85b62c47a908a2707bd4fa7af92c2b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/367790d5cf85b62c47a908a2707bd4fa7af92c2b"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 18,
      "deletions": 21
    },
    "files": [
      {
        "sha": "b8bddac23ba69f5f467bdbdca6dc22bd5a5b7b38",
        "filename": "qa/rpc-tests/rest.py",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d5b73e13600e7e81a7cb0a01c2a4a871239ca673/qa/rpc-tests/rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d5b73e13600e7e81a7cb0a01c2a4a871239ca673/qa/rpc-tests/rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rest.py?ref=d5b73e13600e7e81a7cb0a01c2a4a871239ca673",
        "patch": "@@ -118,17 +118,17 @@ def run_test(self):\n         response_header = http_get_call(url.hostname, url.port, '/rest/headers/1000000000000000/'+bb_hash+self.FORMAT_SEPARATOR+\"bin\", True)\n         assert_equal(response_header.status, 400)\n         response_header_str = response_header.read()\n-        assert_equal(\"Invalid input parameter\" in response_header_str, True)\n+        assert_equal(\"Invalid input parameter (wrong size)\" in response_header_str, True)\n         \n-        #check string sanity (block)\n-        response_header = http_get_call(url.hostname, url.port, '/rest/block/*!2%%%28()?^'+self.FORMAT_SEPARATOR+\"bin\", True)\n-        response_header_str = response_header.read()\n-        assert_equal(response_header_str[-8:].rstrip(), \"228()?\")\n+        #check input hex check\n+        response = http_get_call(url.hostname, url.port, '/rest/block/0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e220z'+self.FORMAT_SEPARATOR+\"bin\", True) #using a non hex hash\n+        response_str = response.read()\n+        assert_equal(\"Invalid input parameter (wrong type)\" in response_str, True)\n         \n         #check string sanity (tx)\n-        response_header = http_get_call(url.hostname, url.port, '/rest/tx/*!2%%%28()?^'+self.FORMAT_SEPARATOR+\"bin\", True)\n-        response_header_str = response_header.read()\n-        assert_equal(response_header_str[-8:].rstrip(), \"228()?\")\n+        response = http_get_call(url.hostname, url.port, '/rest/tx/0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e220z'+self.FORMAT_SEPARATOR+\"bin\", True)\n+        response_str = response.read()\n+        assert_equal(\"Invalid input parameter (wrong type)\" in response_str, True)\n         \n if __name__ == '__main__':\n     RESTTest ().main ()"
      },
      {
        "sha": "56c7d4acf9e6597f7a013fb45d6233f42bec7ef3",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 13,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d5b73e13600e7e81a7cb0a01c2a4a871239ca673/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d5b73e13600e7e81a7cb0a01c2a4a871239ca673/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=d5b73e13600e7e81a7cb0a01c2a4a871239ca673",
        "patch": "@@ -59,13 +59,13 @@ static RestErr RESTERR(enum HTTPStatusCode status, string message)\n     return re;\n }\n \n-void CheckRequestString(const string inputString, enum InputType inputType = IT_UNDEF, size_t maxLength = 0)\n+void CheckRequestString(const string &inputString, enum InputType inputType = IT_UNDEF, size_t maxLength = 0)\n {\n     //check for requested input type and throw exception if invalid type or size\n     if ( (inputType == IT_DIGITS && inputString.find_first_not_of(\"0123456789\") != std::string::npos)\n-        || ( (inputType == IT_BLOCKHASH || inputType == IT_TXHASH) && inputString.length() > 64)\n-        || (maxLength > 0 && inputString.length() > maxLength) )\n-        throw RESTERR(HTTP_BAD_REQUEST, \"Invalid input parameter (\"+ (std::string)( (maxLength > 0) ? \"wrong size\" : \"wrong type\" ) +\")\");\n+        || ( (inputType == IT_BLOCKHASH || inputType == IT_TXHASH) && (!IsHex(inputString) || inputString.size() != 64))\n+        || (maxLength > 0 && inputString.size() > maxLength) )\n+        throw RESTERR(HTTP_BAD_REQUEST, \"Invalid input parameter (wrong \"+ (std::string)( (((inputType == IT_BLOCKHASH || inputType == IT_TXHASH) && inputString.size() != 64) || (maxLength > 0 && inputString.size() > maxLength)) ? \"size\" : \"type\") +\")\");\n }\n \n static enum RetFormat ParseDataFormat(vector<string>& params, const string strReq)\n@@ -98,9 +98,6 @@ static string AvailableDataFormatsString()\n \n static bool ParseHashStr(const string& strReq, uint256& v)\n {\n-    if (!IsHex(strReq) || (strReq.size() != 64))\n-        return false;\n-\n     v.SetHex(strReq);\n     return true;\n }\n@@ -121,12 +118,12 @@ static bool rest_headers(AcceptedConnection* conn,\n     CheckRequestString(path[0], IT_DIGITS, 8);\n     long count = strtol(path[0].c_str(), NULL, 10);\n     if (count < 1 || count > 2000)\n-        throw RESTERR(HTTP_BAD_REQUEST, \"Header count out of range: \" + SanitizeString(path[0]));\n+        throw RESTERR(HTTP_BAD_REQUEST, \"Header count out of range: \" + path[0]);\n \n     CheckRequestString(path[1], IT_BLOCKHASH);\n     uint256 hash;\n     if (!ParseHashStr(path[1], hash))\n-        throw RESTERR(HTTP_BAD_REQUEST, \"Invalid hash: \" + SanitizeString(path[1]));\n+        throw RESTERR(HTTP_BAD_REQUEST, \"Invalid hash: \" + path[1]);\n \n     std::vector<CBlockHeader> headers;\n     headers.reserve(count);\n@@ -181,14 +178,14 @@ static bool rest_block(AcceptedConnection* conn,\n     CheckRequestString(params[0], IT_BLOCKHASH);\n     uint256 hash;\n     if (!ParseHashStr(params[0], hash))\n-        throw RESTERR(HTTP_BAD_REQUEST, \"Invalid hash: \" + SanitizeString(params[0]));\n+        throw RESTERR(HTTP_BAD_REQUEST, \"Invalid hash: \" + params[0]);\n \n     CBlock block;\n     CBlockIndex* pblockindex = NULL;\n     {\n         LOCK(cs_main);\n         if (mapBlockIndex.count(hash) == 0)\n-            throw RESTERR(HTTP_NOT_FOUND, SanitizeString(params[0]) + \" not found\");\n+            throw RESTERR(HTTP_NOT_FOUND, params[0] + \" not found\");\n \n         pblockindex = mapBlockIndex[hash];\n         if (!ReadBlockFromDisk(block, pblockindex))\n@@ -280,12 +277,12 @@ static bool rest_tx(AcceptedConnection* conn,\n     CheckRequestString(params[0], IT_TXHASH);\n     uint256 hash;\n     if (!ParseHashStr(params[0], hash))\n-        throw RESTERR(HTTP_BAD_REQUEST, \"Invalid hash: \" + SanitizeString(params[0]));\n+        throw RESTERR(HTTP_BAD_REQUEST, \"Invalid hash: \" + params[0]);\n \n     CTransaction tx;\n     uint256 hashBlock = uint256();\n     if (!GetTransaction(hash, tx, hashBlock, true))\n-        throw RESTERR(HTTP_NOT_FOUND, SanitizeString(params[0]) + \" not found\");\n+        throw RESTERR(HTTP_NOT_FOUND, params[0] + \" not found\");\n \n     CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n     ssTx << tx;"
      }
    ]
  }
]