jgarzik,2014-12-16T20:04:16Z,What about rethinking the logic a bit?  This is only needed for error responses that echo back to the client a piece of information it already knows.\n\nIt seems like each case could be simplified by removing the variable portion of each error string.\n,https://github.com/bitcoin/bitcoin/pull/5492#issuecomment-67222369,67222369,
jonasschnelli,2014-12-16T20:18:23Z,"Removing the variable from the error string would also be feasible method IMO.\nDepends if we'd like to keep the ""more information"" in the error string.\nBut i agree with just have ""invalid hash"" instead of ""invalid hash: /inputhash/"", etc.\n\nOn the other hand it could be handy and save(r) for upcoming implementations to make sure input parameters gets a minimalistic check.\n\nIn the current impl",https://github.com/bitcoin/bitcoin/pull/5492#issuecomment-67224643,67224643,
laanwj,2015-01-26T11:56:30Z,+1 for better input validation.\n\nHowever I don't like the approach of using sanitize for input strings. It should either accept the input as-is or reject it and throw an error immediately. Don't try to proceed at all using 'sanitized' input.\n\nUsing sanitizestring for logged messages makes sense.\n,https://github.com/bitcoin/bitcoin/pull/5492#issuecomment-71450411,71450411,
gavinandresen,2015-03-11T19:21:22Z,"I agree with @laanwj -- throw an error if given unsanitary input, don't try to fix it.\n(but sanitize if input is logged as part of the error handling, of course)\n",https://github.com/bitcoin/bitcoin/pull/5492#issuecomment-78350449,78350449,
jonasschnelli,2015-03-11T22:32:11Z,Agreed. I'll update the PR to detect unsanitary inputs and throw exception in such cases.\n,https://github.com/bitcoin/bitcoin/pull/5492#issuecomment-78387238,78387238,
jonasschnelli,2015-03-12T13:03:40Z,Updated.\nNow it will detect unsafe inputs. Outputs still go though `SanitizeString()`.\n,https://github.com/bitcoin/bitcoin/pull/5492#issuecomment-78475088,78475088,
jonasschnelli,2015-03-21T14:32:24Z,"@laanwj: Right. Is was redundant.\n\nI just updated the whole PR.\nI did also remove `SanitizeString()` from error replies because we are now sure that hashes and amounts are correct formatted, etc.\nHow does it look now?\n",https://github.com/bitcoin/bitcoin/pull/5492#issuecomment-84358549,84358549,
laanwj,2015-03-24T08:36:00Z,"The redundant `CheckRequestString` check still seems to be there?\n\nI'd personally have kept the SanitizeStrings on output just in case, as a kind of belt-and-suspenders, but no strong opinion there.\n",https://github.com/bitcoin/bitcoin/pull/5492#issuecomment-85398823,85398823,
jonasschnelli,2015-03-24T08:39:40Z,"@laanwj There is no more redundancy.  `CheckRequestString()` will ensure input correctness, `ParseHashStr()` will no longer check for correctness of the hashstr to parse.\nI removed SanitizeStrings because it was no longer possible to output a non hex hash or unlimited-non-digi-value.\n",https://github.com/bitcoin/bitcoin/pull/5492#issuecomment-85401562,85401562,
laanwj,2015-03-24T09:46:13Z,"> ParseHashStr() will no longer check for correctness of the hashstr to parse.\n\nTo me it seems that was an excellent place to do the check. Where possible, combining checking input and parsing makes sense, as it reduces the scope for error.\n",https://github.com/bitcoin/bitcoin/pull/5492#issuecomment-85425302,85425302,
jonasschnelli,2015-03-24T18:14:30Z,I'm also not happy with the solution. Let me try to optimize and shuffle around some things.\n,https://github.com/bitcoin/bitcoin/pull/5492#issuecomment-85628482,85628482,
laanwj,2015-03-20T15:13:55Z,"Isn't this pre-check redundant? e.g., ParseHashStr will already fail on invalid hashes. Or should, at least.\n",https://github.com/bitcoin/bitcoin/pull/5492#discussion_r26847012,26847012,src/rest.cpp
Diapolo,2015-03-21T17:47:24Z,Why are you not using `const std::string& inputString`?\n,https://github.com/bitcoin/bitcoin/pull/5492#discussion_r26895093,26895093,src/rest.cpp
jonasschnelli,2015-03-21T19:00:12Z,Right.\nThe rest.cpp class was introduced with `using namespace std;` which is somehow inconsistent with other classes/files. This PR just follows the current rest.cpp implementation code style. But i'm pretty sure someone will open a PR to fix this. :)\n,https://github.com/bitcoin/bitcoin/pull/5492#discussion_r26895785,26895785,src/rest.cpp
Diapolo,2015-03-23T06:39:48Z,The important part wasn't the `std::` it was the `&` ;-).\n,https://github.com/bitcoin/bitcoin/pull/5492#discussion_r26916269,26916269,src/rest.cpp
jonasschnelli,2015-03-23T08:11:17Z,Ha. Yes. Right. will change that to pass-by-ref.\n,https://github.com/bitcoin/bitcoin/pull/5492#discussion_r26918767,26918767,src/rest.cpp
jonasschnelli,2015-03-23T10:40:57Z,> Why are you not using const std::string& inputString?\n\nFixed.\n,https://github.com/bitcoin/bitcoin/pull/5492#discussion_r26926525,26926525,src/rest.cpp
