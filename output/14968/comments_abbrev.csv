luke-jr,2018-12-15T07:14:45Z,"Doesn't binding 127.0.0.1 fail if ::1 is already bound, on some systems? (Because ::1 includes 127.0.0.1 in practice.)",https://github.com/bitcoin/bitcoin/pull/14968#issuecomment-447544254,447544254,
laanwj,2018-12-15T07:20:59Z,"> Doesn't binding 127.0.0.1 fail if ::1 is already bound, on some systems? (Because ::1 includes 127.0.0.1 in practice.)\n\nNo, that's definitely not true. No localhost address or subnet should include each other.\n\n```\nlo: flags=73<UP,LOOPBACK,RUNNING>  mtu 65536\n        inet 127.0.0.1  netmask 255.0.0.0\n        inet6 ::1  prefixlen 128  scopeid 0x10<host>\n```\nso:\n```\n127.0.0.1",https://github.com/bitcoin/bitcoin/pull/14968#issuecomment-447544539,447544539,
meshcollider,2018-12-15T19:42:39Z,"Concept ACK\n\nThe error message here also needs updating for the new behaviour:\n\nhttps://github.com/bitcoin/bitcoin/blob/f128ecae3577bf9294efc8ff1dc9e0549ae91243/src/httpserver.cpp#L393-L396",https://github.com/bitcoin/bitcoin/pull/14968#issuecomment-447593022,447593022,
laanwj,2018-12-16T08:08:53Z,"@MeshCollider thanks, updated",https://github.com/bitcoin/bitcoin/pull/14968#issuecomment-447624852,447624852,
sipa,2018-12-16T08:10:57Z,utACK,https://github.com/bitcoin/bitcoin/pull/14968#issuecomment-447624946,447624946,
gmaxwell,2018-12-16T10:25:13Z,"utACK  would also be nicer to get this in sooner rather than later, so we get more of a chance to find out that SpatulaBSD behaves like luke thought before this ends up in a release. :)",https://github.com/bitcoin/bitcoin/pull/14968#issuecomment-447631820,447631820,
Empact,2018-12-16T10:30:33Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/14968#issuecomment-447632175,447632175,
MarcoFalke,2018-12-16T17:31:07Z,Travis fails when creating the cache. Could be because of the default value of `bind_to_localhost_only`? Not sure if `self.bind_to_localhost_only` even makes sense after the recent changes to how rpc binds.,https://github.com/bitcoin/bitcoin/pull/14968#issuecomment-447661062,447661062,
laanwj,2018-12-17T08:53:09Z,"`bind_to_localhost_only` has to do with P2P, not RPC. IIRC RPC was always already bound to localhost only for the tests, apart from the bind test.",https://github.com/bitcoin/bitcoin/pull/14968#issuecomment-447767239,447767239,
laanwj,2018-12-17T09:09:45Z,"I guess this has to do with Travis not supporting (even local!) IPv6 at all, so the IPv6 bind fails and it doesn't start.\n\nI suppose not being able to auto-bind on either IPv4 or IPv6 is valid if there is no such interface, at least if `-rpcbind` was not explicitly given.",https://github.com/bitcoin/bitcoin/pull/14968#issuecomment-447771824,447771824,
laanwj,2018-12-17T10:16:53Z,"OK, per suggestion by @gmaxwell I've changed the logic. By default, if no explicit bind configuration is given, the `EADDRNOTAVAIL` error while binding is ignored (but not, say, `EADDRINUSE`). This is user-friendly as it means the default setting will auto-detect based on available IPv4/IPv6. In all other cases all errors are fatal.\n\nThis can be tested using linux network namespaces\n```bash",https://github.com/bitcoin/bitcoin/pull/14968#issuecomment-447792690,447792690,
laanwj,2018-12-17T10:59:18Z,"Sigh, that still didn't solve the Travis issue though. Locally running the tests with no IPv6 localhost worked fine for me now.",https://github.com/bitcoin/bitcoin/pull/14968#issuecomment-447805499,447805499,
luke-jr,2018-12-28T04:46:52Z,"Unfortunately, evhttp_bind_socket_with_handle returns a 0/Success errno when listen fails. I've opened a report upstream to fix this, but obviously we can't rely on it now: https://github.com/libevent/libevent/pull/738",https://github.com/bitcoin/bitcoin/pull/14968#issuecomment-450289229,450289229,
luke-jr,2018-12-28T06:29:11Z,One possible solution is to clone the evhttp code. I got it down to 65 lines: https://github.com/bitcoin/bitcoin/compare/master...luke-jr:my_bind_socket_with_handle,https://github.com/bitcoin/bitcoin/pull/14968#issuecomment-450299409,450299409,
luke-jr,2018-12-28T07:40:50Z,"At least on Travis, the failure isn't caused by `listen()`'s errno being lost.\n\nInstead, what's happening is that `getaddrinfo` is returning `EVUTIL_EAI_ADDRFAMILY`. These errors are borrowed from the system's `EAI_*` constants, which [can] overlap with `errno`'s constants, so it's not practical to just stuff them into `errno` from `evhttp_bind_socket_with_handle`... Opened a libevent issue fo",https://github.com/bitcoin/bitcoin/pull/14968#issuecomment-450309374,450309374,
luke-jr,2018-12-28T08:58:21Z,Just noticed Travis is passing on this PR... did we lose some test coverage between 0.17 (where I'm testing it) and master?,https://github.com/bitcoin/bitcoin/pull/14968#issuecomment-450321053,450321053,
laanwj,2018-12-28T09:17:18Z,"> Unfortunately, evhttp_bind_socket_with_handle returns a 0/Success errno when listen fails. \n\nStrange, this worked for me, and it seems to work on Travis. As stated I've tested this (at least on Linux) in various ways.\n\nAn alternative solution here (which I initially wanted to do, but this seemed like a workable suggestion at the time **if of course C code didn't mess up error handling ev",https://github.com/bitcoin/bitcoin/pull/14968#issuecomment-450324159,450324159,
laanwj,2018-12-28T09:35:03Z,"WAIT: it's the `bind` in `evhttp_bind_socket_with_handle` failing that we're looking for here, not the `listen`. This seems to not touch the error code, so it can be retrieved succesfully:\n\n```c++\n	if ((fd = bind_socket(address, port, 1 /*reuse*/)) == -1)\n		return (NULL);\n```\n\nI don't think we care about specific `errno` when `listen` fails, do we? This is always fatal.\n",https://github.com/bitcoin/bitcoin/pull/14968#issuecomment-450327342,450327342,
luke-jr,2018-12-28T11:24:39Z,"With this backported to 0.17, Travis was indeed failing on `getaddrinfo`; no idea why it's passing on master. :/",https://github.com/bitcoin/bitcoin/pull/14968#issuecomment-450344476,450344476,
laanwj,2018-12-28T11:37:35Z,"Yes, tried in #15050, really strange. I think specific error code checking is a dead end, just too fragile.\n\nLooking for a platform independent way now to check if there is a local IPv4 or local IPv6 interface without actually binding to it. `libevent` internally checks for a *nonlocal* interface in `evutil_found_ifaddr` but this is not what we want to know in this case.\nToo bad the logic in",https://github.com/bitcoin/bitcoin/pull/14968#issuecomment-450346083,450346083,
laanwj,2018-12-28T11:43:30Z,Closing this for now.,https://github.com/bitcoin/bitcoin/pull/14968#issuecomment-450346742,450346742,
vasild,2021-09-15T10:51:53Z,"Just reading the libevent2 code, I did not try this, but the following may be a way to pass `IPV6_V6ONLY` to libevent2:\n\nInstead of `evhttp_bind_socket_with_handle()` (called from `src/httpserver.cpp`) call `evconnlistener_new_bind(flags|=LEV_OPT_BIND_IPV6ONLY)`, it returns `evconnlistener`. Pass that to `evhttp_bind_listener()`.",https://github.com/bitcoin/bitcoin/pull/14968#issuecomment-919912510,919912510,
laanwj,2021-09-15T11:08:00Z,"> Just reading the libevent2 code, I did not try this, but the following may be a way to pass IPV6_V6ONLY to libevent2:\n\nTo provide context: being able to set `IPV6_V6ONLY` on the evhttp listening socket to a fixed value (either on or off will do) independent of operating system will allow to do consistent error checking on the binding to localhost, as the the uncertainty in behavior is gone.",https://github.com/bitcoin/bitcoin/pull/14968#issuecomment-919922861,919922861,
laanwj,2018-12-17T15:26:37Z,Needed this to prevent a leak and segfault in `StopHTTPServer` (because the owning `evhttp` is freed but the listeners are not).,https://github.com/bitcoin/bitcoin/pull/14968#discussion_r242190994,242190994,src/httpserver.cpp
