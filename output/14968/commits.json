[
  {
    "sha": "7b5e4001f95ac8cb19f8f208634a5e07b9979562",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YjVlNDAwMWY5NWFjOGNiMTlmOGYyMDg2MzRhNWUwN2I5OTc5NTYy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-12-15T06:59:18Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-12-17T17:17:34Z"
      },
      "message": "http: Fail initialization when any bind fails\n\nCurrently the HTTP server initialization (`HTTPBindAddresses`) fails\nonly when *all* bindings fail. So if multiple binds are specified\n(`127.0.0.1` and `::1` by defeault) and one succeeds and the other\nfails, the latter is essentially ignored.\n\nThis commit changes the error behavior to fail *if not all* binds could\nbe performed, which I think is more in line with how software normally\nhandles this and what users expect.",
      "tree": {
        "sha": "cde95c32878276e947ee41a8befd8a6763d52965",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cde95c32878276e947ee41a8befd8a6763d52965"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7b5e4001f95ac8cb19f8f208634a5e07b9979562",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b5e4001f95ac8cb19f8f208634a5e07b9979562",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7b5e4001f95ac8cb19f8f208634a5e07b9979562",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b5e4001f95ac8cb19f8f208634a5e07b9979562/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b53573e5c6c7cac3086cbfd22311b31cbc8140ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b53573e5c6c7cac3086cbfd22311b31cbc8140ec",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b53573e5c6c7cac3086cbfd22311b31cbc8140ec"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 23,
      "deletions": 3
    },
    "files": [
      {
        "sha": "6afb54eedd9d3a54bd82a8cccec5be3bc2290ca6",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 3,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7b5e4001f95ac8cb19f8f208634a5e07b9979562/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7b5e4001f95ac8cb19f8f208634a5e07b9979562/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=7b5e4001f95ac8cb19f8f208634a5e07b9979562",
        "patch": "@@ -298,11 +298,13 @@ static bool HTTPBindAddresses(struct evhttp* http)\n {\n     int http_port = gArgs.GetArg(\"-rpcport\", BaseParams().RPCPort());\n     std::vector<std::pair<std::string, uint16_t> > endpoints;\n+    bool is_default = false;\n \n     // Determine what addresses to bind to\n     if (!(gArgs.IsArgSet(\"-rpcallowip\") && gArgs.IsArgSet(\"-rpcbind\"))) { // Default to loopback if not allowing external IPs\n         endpoints.push_back(std::make_pair(\"::1\", http_port));\n         endpoints.push_back(std::make_pair(\"127.0.0.1\", http_port));\n+        is_default = true;\n         if (gArgs.IsArgSet(\"-rpcallowip\")) {\n             LogPrintf(\"WARNING: option -rpcallowip was specified without -rpcbind; this doesn't usually make sense\\n\");\n         }\n@@ -319,6 +321,7 @@ static bool HTTPBindAddresses(struct evhttp* http)\n     }\n \n     // Bind addresses\n+    int num_fail = 0;\n     for (std::vector<std::pair<std::string, uint16_t> >::iterator i = endpoints.begin(); i != endpoints.end(); ++i) {\n         LogPrint(BCLog::HTTP, \"Binding RPC on address %s port %i\\n\", i->first, i->second);\n         evhttp_bound_socket *bind_handle = evhttp_bind_socket_with_handle(http, i->first.empty() ? nullptr : i->first.c_str(), i->second);\n@@ -329,10 +332,27 @@ static bool HTTPBindAddresses(struct evhttp* http)\n             }\n             boundSockets.push_back(bind_handle);\n         } else {\n-            LogPrintf(\"Binding RPC on address %s port %i failed.\\n\", i->first, i->second);\n+            int err = EVUTIL_SOCKET_ERROR();\n+            if (!is_default || (err != EADDRNOTAVAIL && err != ENOENT)) {\n+                LogPrintf(\"Binding RPC on address %s port %i failed (Error: %s).\\n\", i->first, i->second, NetworkErrorString(err));\n+                num_fail += 1;\n+            } else {\n+                // Don't count failure if binding was not explicitly configured\n+                // (default settings) and the address is not available.\n+                // (for example: Travis without IPv6 localhost will return ENOENT)\n+                LogPrintf(\"Binding RPC on address %s port %i failed, error ignored because interface was unavailable.\\n\", i->first, i->second);\n+            }\n+        }\n+    }\n+    if (num_fail != 0) {\n+        // In case of an error, clean up listening sockets that succeeded to\n+        // avoid leak\n+        for (evhttp_bound_socket *socket : boundSockets) {\n+            evhttp_del_accept_socket(http, socket);\n         }\n+        boundSockets.clear();\n     }\n-    return !boundSockets.empty();\n+    return num_fail == 0;\n }\n \n /** Simple wrapper to set thread name and run work queue */\n@@ -391,7 +411,7 @@ bool InitHTTPServer()\n     evhttp_set_gencb(http, http_request_cb, nullptr);\n \n     if (!HTTPBindAddresses(http)) {\n-        LogPrintf(\"Unable to bind any endpoint for RPC server\\n\");\n+        LogPrintf(\"Unable to bind all endpoints for RPC server\\n\");\n         return false;\n     }\n "
      }
    ]
  }
]