jnewbery,2020-08-12 11:42:19,"This was requested by @MarcoFalke @sdaftuar and @theuni in #19607 (https://github.com/bitcoin/bitcoin/pull/19607#discussion_r462032894).\n\nChanging `CConnman* connman` to `CConnman& m_connman` is the continuation of work in #19174. See https://github.com/bitcoin/bitcoin/pull/19542#issuecomment-660303800 and https://github.com/bitcoin/bitcoin/pull/19174#issuecomment-658627037 for further discuss",https://github.com/bitcoin/bitcoin/pull/19704#issuecomment-672821085,672821085,
Crypt-iQ,2020-08-12 12:23:08,Fuzzers fail because `ProcessMessage` is used in the harnesses.,https://github.com/bitcoin/bitcoin/pull/19704#issuecomment-672838354,672838354,
theStack,2020-08-12 12:57:22,Concept ACK -- this is definitely a more appropriate location for `ProcessMessage` than the whole net_processing module scope. ,https://github.com/bitcoin/bitcoin/pull/19704#issuecomment-672854102,672854102,
jnewbery,2020-08-12 13:20:08,I've fixed the fuzz build (I think). Let's see what Travis thinks.,https://github.com/bitcoin/bitcoin/pull/19704#issuecomment-672865975,672865975,
jnewbery,2020-08-12 13:30:52,rebased,https://github.com/bitcoin/bitcoin/pull/19704#issuecomment-672872005,672872005,
jonatack,2020-08-13 20:09:10,"Light approach ACK, if there is a follow-up code branch to see where this is heading I'd look at it. ",https://github.com/bitcoin/bitcoin/pull/19704#issuecomment-673685601,673685601,
JeremyRubin,2020-08-13 20:39:00,"Concept Ack and lite-cr ack (doesn't seem to change any logic, just refactor).\n\nIn terms of approach might be nice to encapsulate processmessage as a subclass that only has access to the relevant references out of the PeerLogicValidation state, but I don't think that's required (just thinking ahead that we might want all the individual message handlers in their own class).\n\nedit: another r",https://github.com/bitcoin/bitcoin/pull/19704#issuecomment-673698948,673698948,
jnewbery,2020-08-14 09:44:51,Lots of discussion on this at http://www.erisian.com.au/meetbot/bitcoin-core-dev/2020/bitcoin-core-dev.2020-08-13-19.00.log.html#l-104,https://github.com/bitcoin/bitcoin/pull/19704#issuecomment-673990948,673990948,
promag,2020-08-14 14:03:52,"Code review ACK cbcb80abc8b3bddaba81e8ba2b22c7d957f02f37.\n\nAm I missing something or this should have refactoring label?\n\nFirst 2 commits could be merged on its own.",https://github.com/bitcoin/bitcoin/pull/19704#issuecomment-674090872,674090872,
DrahtBot,2020-08-20 20:37:57,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19763 (net: don't try to relay to the address' originator by vasild)\n* #19753 (p2p: don't add AlreadyHave transactions t",https://github.com/bitcoin/bitcoin/pull/19704#issuecomment-677891365,677891365,
jnewbery,2020-08-21 10:07:43,Great suggestions @MarcoFalke . I've taken them all.,https://github.com/bitcoin/bitcoin/pull/19704#issuecomment-678171638,678171638,
jonatack,2020-08-21 11:08:58,"travis and cirrus:\n```\nMemorySanitizer: use-of-uninitialized-value \nsrc/net_processing.cpp:656:82 in (anonymous namespace)::TipMayBeStale(Consensus::Params const&)\n```\nhttps://travis-ci.org/github/bitcoin/bitcoin/jobs/719886303\n\nhttps://github.com/bitcoin/bitcoin/pull/19704/checks?check_run_id=1011864356",https://github.com/bitcoin/bitcoin/pull/19704#issuecomment-678236503,678236503,
jnewbery,2020-08-21 12:13:10,"> travis and cirrus:\n> \n> MemorySanitizer: use-of-uninitialized-value \n> src/net_processing.cpp:656:82 in (anonymous namespace)::TipMayBeStale(Consensus::Params const&)\n\nIt looks like that happens because `SelectParams()` is called twice in the `TestChain100Setup` constructor, including after \nthe `PeerLogicValidation` object is constructed (see https://github.com/bitcoin/bitcoin/commi",https://github.com/bitcoin/bitcoin/pull/19704#issuecomment-678259092,678259092,
MarcoFalke,2020-08-24 08:57:07,"re-ACK daed542a12, only change is removing second commit ðŸŽ´\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nre-ACK daed542a12, only change is removing second commit ðŸŽ´\n-----BEGIN PGP SIGNATURE-----\n\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUi57gv/VAtt+n9kwA+RHgQQQsRU5ybObK",https://github.com/bitcoin/bitcoin/pull/19704#issuecomment-679001051,679001051,
promag,2020-08-24 09:36:17,Code review ACK daed542a12e0a6a4692aca12a61b84cd55accc33.,https://github.com/bitcoin/bitcoin/pull/19704#issuecomment-679020442,679020442,
MarcoFalke,2020-08-21 07:36:42,"in commit eb170099f3ea91555b56fdaaae89a64fe04b93be: It seems a bit confusing to pass in chainparams to be stored as a reference in a member variable, but then pass in the consensus params via a parameter of a function call, even though they can be ""derived"" from the chain params.\n\nI'd suggest the following patch:\n\n```diff\ndiff --git a/src/net_processing.cpp b/src/net_processing.cpp\nind",https://github.com/bitcoin/bitcoin/pull/19704#discussion_r474475437,474475437,src/test/denialofservice_tests.cpp
MarcoFalke,2020-08-21 07:38:02,"in commit eb170099f3ea91555b56fdaaae89a64fe04b93be: Seems a bit odd to require the whole header when only the name is needed (the compiler doesn't need to know the struct memory layout to keep a pointer or reference as a member variable)\n\nNote that txmemool.h isn't included either.\n\nI suggest the patch from the other comment",https://github.com/bitcoin/bitcoin/pull/19704#discussion_r474476502,474476502,src/net_processing.h
jnewbery,2020-08-21 10:06:25,good idea. Done,https://github.com/bitcoin/bitcoin/pull/19704#discussion_r474603371,474603371,src/test/denialofservice_tests.cpp
jnewbery,2020-08-21 10:07:24,yup. That's better. Done.,https://github.com/bitcoin/bitcoin/pull/19704#discussion_r474603763,474603763,src/net_processing.h
jonatack,2020-08-21 11:28:02,Does this need to be moved from the fuzz test into the codebase?,https://github.com/bitcoin/bitcoin/pull/19704#discussion_r474638561,474638561,src/net_processing.h
jnewbery,2020-08-21 12:14:59,I don't understand the question. The method is public so it can be called by the fuzz test.,https://github.com/bitcoin/bitcoin/pull/19704#discussion_r474658888,474658888,src/net_processing.h
jonatack,2020-08-24 09:31:15,"Yes, nvm.",https://github.com/bitcoin/bitcoin/pull/19704#discussion_r475466316,475466316,src/net_processing.h
