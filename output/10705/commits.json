[
  {
    "sha": "f42fc1d508f24447519f79cf6304b2e4e2233a51",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNDJmYzFkNTA4ZjI0NDQ3NTE5Zjc5Y2Y2MzA0YjJlNGUyMjMzYTUx",
    "commit": {
      "author": {
        "name": "klemens",
        "email": "ka7@github.com",
        "date": "2017-08-15T22:24:39Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-08-15T22:24:39Z"
      },
      "message": "doc: spelling fixes",
      "tree": {
        "sha": "77569674d0fbb6ec885bbd08def6f52b0f966d50",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/77569674d0fbb6ec885bbd08def6f52b0f966d50"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f42fc1d508f24447519f79cf6304b2e4e2233a51",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f42fc1d508f24447519f79cf6304b2e4e2233a51",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f42fc1d508f24447519f79cf6304b2e4e2233a51",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f42fc1d508f24447519f79cf6304b2e4e2233a51/comments",
    "author": null,
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "65cc7aacfbfc7b747926375280a1d839e88d576b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65cc7aacfbfc7b747926375280a1d839e88d576b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/65cc7aacfbfc7b747926375280a1d839e88d576b"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 15,
      "deletions": 15
    },
    "files": [
      {
        "sha": "14a59fdf6bc8b58e3bc3e6720548a12fa6ea3b88",
        "filename": "contrib/debian/examples/bitcoin.conf",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f42fc1d508f24447519f79cf6304b2e4e2233a51/contrib/debian/examples/bitcoin.conf",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f42fc1d508f24447519f79cf6304b2e4e2233a51/contrib/debian/examples/bitcoin.conf",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/examples/bitcoin.conf?ref=f42fc1d508f24447519f79cf6304b2e4e2233a51",
        "patch": "@@ -76,7 +76,7 @@\n #rpcuser=Ulysseys\n #rpcpassword=YourSuperGreatPasswordNumber_DO_NOT_USE_THIS_OR_YOU_WILL_GET_ROBBED_385593\n #\n-# The second method `rpcauth` can be added to server startup argument. It is set at intialization time\n+# The second method `rpcauth` can be added to server startup argument. It is set at initialization time\n # using the output from the script in share/rpcuser/rpcuser.py after providing a username:\n #\n # ./share/rpcuser/rpcuser.py alice"
      },
      {
        "sha": "6c948d515153abb31977928f11c9ee37b0ea6ccc",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f42fc1d508f24447519f79cf6304b2e4e2233a51/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f42fc1d508f24447519f79cf6304b2e4e2233a51/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=f42fc1d508f24447519f79cf6304b2e4e2233a51",
        "patch": "@@ -4,7 +4,7 @@ Developer Notes\n Various coding styles have been used during the history of the codebase,\n and the result is not very consistent. However, we're now trying to converge to\n a single style, which is specified below. When writing patches, favor the new\n-style over attempting to mimick the surrounding style, except for move-only\n+style over attempting to mimic the surrounding style, except for move-only\n commits.\n \n Do not submit patches solely to modify the style of existing code."
      },
      {
        "sha": "56909d5b48a6fb92e4fb4db8b1cbcb815fa0ac97",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f42fc1d508f24447519f79cf6304b2e4e2233a51/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f42fc1d508f24447519f79cf6304b2e4e2233a51/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=f42fc1d508f24447519f79cf6304b2e4e2233a51",
        "patch": "@@ -415,7 +415,7 @@ bool InitHTTPServer()\n     LogPrintf(\"HTTP: creating work queue of depth %d\\n\", workQueueDepth);\n \n     workQueue = new WorkQueue<HTTPClosure>(workQueueDepth);\n-    // tranfer ownership to eventBase/HTTP via .release()\n+    // transfer ownership to eventBase/HTTP via .release()\n     eventBase = base_ctr.release();\n     eventHTTP = http_ctr.release();\n     return true;"
      },
      {
        "sha": "4b81c54d36c899946e0df66b68f2a185c68a5a41",
        "filename": "src/qt/networkstyle.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f42fc1d508f24447519f79cf6304b2e4e2233a51/src/qt/networkstyle.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f42fc1d508f24447519f79cf6304b2e4e2233a51/src/qt/networkstyle.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/networkstyle.cpp?ref=f42fc1d508f24447519f79cf6304b2e4e2233a51",
        "patch": "@@ -44,7 +44,7 @@ NetworkStyle::NetworkStyle(const QString &_appName, const int iconColorHueShift,\n             // loop through pixels\n             for(int x=0;x<img.width();x++)\n             {\n-                // preserve alpha because QColor::getHsl doesen't return the alpha value\n+                // preserve alpha because QColor::getHsl doesn't return the alpha value\n                 a = qAlpha(scL[x]);\n                 QColor col(scL[x]);\n "
      },
      {
        "sha": "740d2ec885ac66bb4c82d862bdcaa2fcee36c74e",
        "filename": "src/qt/test/rpcnestedtests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f42fc1d508f24447519f79cf6304b2e4e2233a51/src/qt/test/rpcnestedtests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f42fc1d508f24447519f79cf6304b2e4e2233a51/src/qt/test/rpcnestedtests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/rpcnestedtests.cpp?ref=f42fc1d508f24447519f79cf6304b2e4e2233a51",
        "patch": "@@ -77,7 +77,7 @@ void RPCNestedTests::rpcNestedTests()\n     RPCConsole::RPCExecuteCommandLine(result, \"getblockchaininfo \"); //whitespace at the end will be tolerated\n     QVERIFY(result.substr(0,1) == \"{\");\n \n-    (RPCConsole::RPCExecuteCommandLine(result, \"getblockchaininfo()[\\\"chain\\\"]\")); //Quote path identifier are allowed, but look after a child contaning the quotes in the key\n+    (RPCConsole::RPCExecuteCommandLine(result, \"getblockchaininfo()[\\\"chain\\\"]\")); //Quote path identifier are allowed, but look after a child containing the quotes in the key\n     QVERIFY(result == \"null\");\n \n     (RPCConsole::RPCExecuteCommandLine(result, \"createrawtransaction [] {} 0\")); //parameter not in brackets are allowed"
      },
      {
        "sha": "c1acbc6815b62a9ee5a12000ab40706a7075020b",
        "filename": "src/qt/test/test_main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f42fc1d508f24447519f79cf6304b2e4e2233a51/src/qt/test/test_main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f42fc1d508f24447519f79cf6304b2e4e2233a51/src/qt/test/test_main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/test_main.cpp?ref=f42fc1d508f24447519f79cf6304b2e4e2233a51",
        "patch": "@@ -57,7 +57,7 @@ int main(int argc, char *argv[])\n     bool fInvalid = false;\n \n     // Prefer the \"minimal\" platform for the test instead of the normal default\n-    // platform (\"xcb\", \"windows\", or \"cocoa\") so tests can't unintentially\n+    // platform (\"xcb\", \"windows\", or \"cocoa\") so tests can't unintentionally\n     // interfere with any background GUIs and don't require extra resources.\n     setenv(\"QT_QPA_PLATFORM\", \"minimal\", 0);\n "
      },
      {
        "sha": "812e8534cd76e865feb6a0f076b4bdc0b726dceb",
        "filename": "src/test/blockencodings_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f42fc1d508f24447519f79cf6304b2e4e2233a51/src/test/blockencodings_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f42fc1d508f24447519f79cf6304b2e4e2233a51/src/test/blockencodings_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockencodings_tests.cpp?ref=f42fc1d508f24447519f79cf6304b2e4e2233a51",
        "patch": "@@ -51,7 +51,7 @@ static CBlock BuildBlockTestCase() {\n     return block;\n }\n \n-// Number of shared use_counts we expect for a tx we havent touched\n+// Number of shared use_counts we expect for a tx we haven't touched\n // == 2 (mempool + our copy from the GetSharedTx call)\n #define SHARED_TX_OFFSET 2\n "
      },
      {
        "sha": "99d0277b7cebbf7f49b6d7e68be293c254e8bac1",
        "filename": "src/test/coins_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f42fc1d508f24447519f79cf6304b2e4e2233a51/src/test/coins_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f42fc1d508f24447519f79cf6304b2e4e2233a51/src/test/coins_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coins_tests.cpp?ref=f42fc1d508f24447519f79cf6304b2e4e2233a51",
        "patch": "@@ -275,7 +275,7 @@ UtxoData::iterator FindRandomFrom(const std::set<COutPoint> &utxoSet) {\n // except the emphasis is on testing the functionality of UpdateCoins\n // random txs are created and UpdateCoins is used to update the cache stack\n // In particular it is tested that spending a duplicate coinbase tx\n-// has the expected effect (the other duplicate is overwitten at all cache levels)\n+// has the expected effect (the other duplicate is overwritten at all cache levels)\n BOOST_AUTO_TEST_CASE(updatecoins_simulation_test)\n {\n     bool spent_a_duplicate_coinbase = false;"
      },
      {
        "sha": "09442b7f9fcb9e67cb526c91e168e32df3feb642",
        "filename": "src/test/data/tx_invalid.json",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f42fc1d508f24447519f79cf6304b2e4e2233a51/src/test/data/tx_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f42fc1d508f24447519f79cf6304b2e4e2233a51/src/test/data/tx_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_invalid.json?ref=f42fc1d508f24447519f79cf6304b2e4e2233a51",
        "patch": "@@ -205,7 +205,7 @@\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4259839 CHECKSEQUENCEVERIFY 1\"]],\n \"020000000100010000000000000000000000000000000000000000000000000000000000000000000000feff40000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n \n-[\"By-time locks, with argument just beyond txin.nSequence (but within numerical boundries)\"],\n+[\"By-time locks, with argument just beyond txin.nSequence (but within numerical boundaries)\"],\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4194305 CHECKSEQUENCEVERIFY 1\"]],\n \"020000000100010000000000000000000000000000000000000000000000000000000000000000000000000040000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4259839 CHECKSEQUENCEVERIFY 1\"]],"
      },
      {
        "sha": "ddc7c23e8ac555cd645057333eda17d2c4f4f0e2",
        "filename": "test/functional/bumpfee.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f42fc1d508f24447519f79cf6304b2e4e2233a51/test/functional/bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f42fc1d508f24447519f79cf6304b2e4e2233a51/test/functional/bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bumpfee.py?ref=f42fc1d508f24447519f79cf6304b2e4e2233a51",
        "patch": "@@ -90,7 +90,7 @@ def test_simple_bumpfee_succeeds(rbf_node, peer_node, dest_address):\n     bumped_tx = rbf_node.bumpfee(rbfid)\n     assert_equal(bumped_tx[\"errors\"], [])\n     assert bumped_tx[\"fee\"] - abs(rbftx[\"fee\"]) > 0\n-    # check that bumped_tx propogates, original tx was evicted and has a wallet conflict\n+    # check that bumped_tx propagates, original tx was evicted and has a wallet conflict\n     sync_mempools((rbf_node, peer_node))\n     assert bumped_tx[\"txid\"] in rbf_node.getrawmempool()\n     assert bumped_tx[\"txid\"] in peer_node.getrawmempool()"
      },
      {
        "sha": "57fd305b7ffbddb2f87bcdc48c81fa9dee8baf7e",
        "filename": "test/functional/example_test.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f42fc1d508f24447519f79cf6304b2e4e2233a51/test/functional/example_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f42fc1d508f24447519f79cf6304b2e4e2233a51/test/functional/example_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/example_test.py?ref=f42fc1d508f24447519f79cf6304b2e4e2233a51",
        "patch": "@@ -196,7 +196,7 @@ def run_test(self):\n         node2.add_connection(connections[1])\n         node2.wait_for_verack()\n \n-        self.log.info(\"Wait for node2 reach current tip. Test that it has propogated all the blocks to us\")\n+        self.log.info(\"Wait for node2 reach current tip. Test that it has propagated all the blocks to us\")\n \n         for block in blocks:\n             getdata_request = msg_getdata()"
      },
      {
        "sha": "1e63d38035ae82c6f56b25e80b8d52b90eb427ea",
        "filename": "test/functional/net.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f42fc1d508f24447519f79cf6304b2e4e2233a51/test/functional/net.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f42fc1d508f24447519f79cf6304b2e4e2233a51/test/functional/net.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/net.py?ref=f42fc1d508f24447519f79cf6304b2e4e2233a51",
        "patch": "@@ -85,7 +85,7 @@ def _test_getaddednodeinfo(self):\n         added_nodes = self.nodes[0].getaddednodeinfo(ip_port)\n         assert_equal(len(added_nodes), 1)\n         assert_equal(added_nodes[0]['addednode'], ip_port)\n-        # check that a non-existant node returns an error\n+        # check that a non-existent node returns an error\n         assert_raises_jsonrpc(-24, \"Node has not been added\",\n                               self.nodes[0].getaddednodeinfo, '1.1.1.1')\n "
      },
      {
        "sha": "3e00a34ac4d22b847863e5c56c55ce1ac0e40c4e",
        "filename": "test/functional/pruning.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f42fc1d508f24447519f79cf6304b2e4e2233a51/test/functional/pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f42fc1d508f24447519f79cf6304b2e4e2233a51/test/functional/pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/pruning.py?ref=f42fc1d508f24447519f79cf6304b2e4e2233a51",
        "patch": "@@ -136,7 +136,7 @@ def reorg_test(self):\n         self.log.info(\"Invalidating block %s at height %d\" % (badhash,invalidheight))\n         self.nodes[1].invalidateblock(badhash)\n \n-        # We've now switched to our previously mined-24 block fork on node 1, but thats not what we want\n+        # We've now switched to our previously mined-24 block fork on node 1, but that's not what we want\n         # So invalidate that fork as well, until we're on the same chain as node 0/2 (but at an ancestor 288 blocks ago)\n         mainchainhash = self.nodes[0].getblockhash(invalidheight - 1)\n         curhash = self.nodes[1].getblockhash(invalidheight - 1)\n@@ -199,7 +199,7 @@ def reorg_back(self):\n         goalbesthash = self.mainchainhash2\n \n         # As of 0.10 the current block download logic is not able to reorg to the original chain created in\n-        # create_chain_with_stale_blocks because it doesn't know of any peer thats on that chain from which to\n+        # create_chain_with_stale_blocks because it doesn't know of any peer that's on that chain from which to\n         # redownload its missing blocks.\n         # Invalidate the reorg_test chain in node 0 as well, it can successfully switch to the original chain\n         # because it has all the block data."
      },
      {
        "sha": "80e296e6507d5fa8977431f7087322ec27a35111",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f42fc1d508f24447519f79cf6304b2e4e2233a51/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f42fc1d508f24447519f79cf6304b2e4e2233a51/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=f42fc1d508f24447519f79cf6304b2e4e2233a51",
        "patch": "@@ -169,7 +169,7 @@ def main():\n     Help text and arguments for individual test script:''',\n                                      formatter_class=argparse.RawTextHelpFormatter)\n     parser.add_argument('--coverage', action='store_true', help='generate a basic coverage report for the RPC interface')\n-    parser.add_argument('--exclude', '-x', help='specify a comma-seperated-list of scripts to exclude.')\n+    parser.add_argument('--exclude', '-x', help='specify a comma-separated-list of scripts to exclude.')\n     parser.add_argument('--extended', action='store_true', help='run the extended test suite in addition to the basic tests')\n     parser.add_argument('--force', '-f', action='store_true', help='run tests even on platforms where they are disabled by default (e.g. windows).')\n     parser.add_argument('--help', '-h', '-?', action='store_true', help='print help text and exit')"
      }
    ]
  }
]