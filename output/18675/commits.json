[
  {
    "sha": "3718ae2ef8dd2559e435bf8d7f5ed5217611ce81",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNzE4YWUyZWY4ZGQyNTU5ZTQzNWJmOGQ3ZjVlZDUyMTc2MTFjZTgx",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-04-16T18:52:35Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-04-16T19:20:57Z"
      },
      "message": "[tests] Don't initialize PrecomputedTransactionData in txvalidationcache tests\n\nPrecomputedTransactionData is initialized inside CheckInputScripts(). No need\nto pre-initialize it before calling into CheckInputScripts().",
      "tree": {
        "sha": "9ee8971d5141adf3226ce641ecaf74f472fe67db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9ee8971d5141adf3226ce641ecaf74f472fe67db"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3718ae2ef8dd2559e435bf8d7f5ed5217611ce81",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3718ae2ef8dd2559e435bf8d7f5ed5217611ce81",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3718ae2ef8dd2559e435bf8d7f5ed5217611ce81",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3718ae2ef8dd2559e435bf8d7f5ed5217611ce81/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d8dfcea5d956126fe0e2b1f36db74c8ef805e7ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8dfcea5d956126fe0e2b1f36db74c8ef805e7ab",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d8dfcea5d956126fe0e2b1f36db74c8ef805e7ab"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "d446e878508c9bc7354da159cee9b4966cdb554d",
        "filename": "src/test/txvalidationcache_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3718ae2ef8dd2559e435bf8d7f5ed5217611ce81/src/test/txvalidationcache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3718ae2ef8dd2559e435bf8d7f5ed5217611ce81/src/test/txvalidationcache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidationcache_tests.cpp?ref=3718ae2ef8dd2559e435bf8d7f5ed5217611ce81",
        "patch": "@@ -108,7 +108,7 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_block_doublespend, TestChain100Setup)\n // any script flag that is implemented as an upgraded NOP code.\n static void ValidateCheckInputsForAllFlags(const CTransaction &tx, uint32_t failing_flags, bool add_to_cache) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n-    PrecomputedTransactionData txdata(tx);\n+    PrecomputedTransactionData txdata;\n     // If we add many more flags, this loop can get too expensive, but we can\n     // rewrite in the future to randomly pick a set of flags to evaluate.\n     for (uint32_t test_flags=0; test_flags < (1U << 16); test_flags += 1) {\n@@ -200,7 +200,7 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n         LOCK(cs_main);\n \n         TxValidationState state;\n-        PrecomputedTransactionData ptd_spend_tx(spend_tx);\n+        PrecomputedTransactionData ptd_spend_tx;\n \n         BOOST_CHECK(!CheckInputScripts(CTransaction(spend_tx), state, &::ChainstateActive().CoinsTip(), SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_DERSIG, true, true, ptd_spend_tx, nullptr));\n \n@@ -269,7 +269,7 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n         // Make it valid, and check again\n         invalid_with_cltv_tx.vin[0].scriptSig = CScript() << vchSig << 100;\n         TxValidationState state;\n-        PrecomputedTransactionData txdata(invalid_with_cltv_tx);\n+        PrecomputedTransactionData txdata;\n         BOOST_CHECK(CheckInputScripts(CTransaction(invalid_with_cltv_tx), state, ::ChainstateActive().CoinsTip(), SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY, true, true, txdata, nullptr));\n     }\n \n@@ -297,7 +297,7 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n         // Make it valid, and check again\n         invalid_with_csv_tx.vin[0].scriptSig = CScript() << vchSig << 100;\n         TxValidationState state;\n-        PrecomputedTransactionData txdata(invalid_with_csv_tx);\n+        PrecomputedTransactionData txdata;\n         BOOST_CHECK(CheckInputScripts(CTransaction(invalid_with_csv_tx), state, &::ChainstateActive().CoinsTip(), SCRIPT_VERIFY_CHECKSEQUENCEVERIFY, true, true, txdata, nullptr));\n     }\n \n@@ -358,7 +358,7 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n         tx.vin[1].scriptWitness.SetNull();\n \n         TxValidationState state;\n-        PrecomputedTransactionData txdata(tx);\n+        PrecomputedTransactionData txdata;\n         // This transaction is now invalid under segwit, because of the second input.\n         BOOST_CHECK(!CheckInputScripts(CTransaction(tx), state, &::ChainstateActive().CoinsTip(), SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, true, true, txdata, nullptr));\n "
      }
    ]
  }
]