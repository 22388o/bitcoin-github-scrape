[
  {
    "sha": "0205abd83d8f8dcbe453440a3fa4e494b71704e8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMjA1YWJkODNkOGY4ZGNiZTQ1MzQ0MGEzZmE0ZTQ5NGI3MTcwNGU4",
    "commit": {
      "author": {
        "name": "Kangmo",
        "email": "kangmo@nanolat.com",
        "date": "2013-12-16T00:26:04Z"
      },
      "committer": {
        "name": "Kangmo",
        "email": "kangmo@nanolat.com",
        "date": "2013-12-16T00:26:04Z"
      },
      "message": "Improve unit test code not to compare with explanatory messages for each platform.\nInstead, use have an exception object to check if the string returned by what() on the raised exception matches the string returned by what() on the expected exception instance.\nThis way, we do not need to list all different possible explanatory strings for different platforms in the test code, and make it simple. (The idea is by Cory Fields.)",
      "tree": {
        "sha": "f19aa304bbfc3f3b6162e8c5967cd3515db7483b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f19aa304bbfc3f3b6162e8c5967cd3515db7483b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0205abd83d8f8dcbe453440a3fa4e494b71704e8",
      "comment_count": 2,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0205abd83d8f8dcbe453440a3fa4e494b71704e8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0205abd83d8f8dcbe453440a3fa4e494b71704e8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0205abd83d8f8dcbe453440a3fa4e494b71704e8/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "bccd5324ab5b76c21b01bfe9c8ec7ab2061c93e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bccd5324ab5b76c21b01bfe9c8ec7ab2061c93e4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bccd5324ab5b76c21b01bfe9c8ec7ab2061c93e4"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 6,
      "deletions": 4
    },
    "files": [
      {
        "sha": "415f957811dd8434b2d8184c2785b3c4db1d68bb",
        "filename": "src/test/serialize_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0205abd83d8f8dcbe453440a3fa4e494b71704e8/src/test/serialize_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0205abd83d8f8dcbe453440a3fa4e494b71704e8/src/test/serialize_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/serialize_tests.cpp?ref=0205abd83d8f8dcbe453440a3fa4e494b71704e8",
        "patch": "@@ -61,11 +61,13 @@ BOOST_AUTO_TEST_CASE(compactsize)\n \n static bool isCanonicalException(const std::ios_base::failure& ex)\n {\n-    std::string strExplanatoryString(\"non-canonical ReadCompactSize()\");\n+    std::ios_base::failure expectedException(\"non-canonical ReadCompactSize()\");\n \n-    return strExplanatoryString == ex.what() ||\n-           // OSX Apple LLVM version 5.0 (OSX 10.9) \n-           strExplanatoryString + \": unspecified iostream_category error\" == ex.what();\n+    // The string returned by what() can be different for different platforms.\n+    // Instead of directly comparing the ex.what() with an expected string,\n+    // create an instance of exception to see if ex.what() matches \n+    // the expected explanatory string returned by the exception instance. \n+    return strcmp(expectedException.what(), ex.what()) == 0;\n }\n \n "
      }
    ]
  }
]