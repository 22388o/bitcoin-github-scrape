[
  {
    "sha": "65f78a111ff52c2212cc0a423662e7a41d1206dd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NWY3OGExMTFmZjUyYzIyMTJjYzBhNDIzNjYyZTdhNDFkMTIwNmRk",
    "commit": {
      "author": {
        "name": "Ashley Holman",
        "email": "dscvlt@gmail.com",
        "date": "2014-05-23T17:09:59Z"
      },
      "committer": {
        "name": "Ashley Holman",
        "email": "dscvlt@gmail.com",
        "date": "2014-06-03T08:07:34Z"
      },
      "message": "Qt: Add GUI view of peer information. #4133",
      "tree": {
        "sha": "e3f986034d79e48a13986e1a144a0f7b2a879a7f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e3f986034d79e48a13986e1a144a0f7b2a879a7f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/65f78a111ff52c2212cc0a423662e7a41d1206dd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG/MacGPG2 v2.0.20 (Darwin)\n\niQGcBAABAgAGBQJTjYJJAAoJEDVfPwlxLasyTvAMAK0d+C8Ite5MzzeK0SAvcz9Q\nlJG97+EoNaF0RlrC+V3wTIRENZvqXmFBxt5QTi+R/+1iHwOsLy2mwVGqaE0gM7gR\nwBd4DiVLy/gu2d/BiZQ/eItTQZZyT1l18wYyc0jXc7RUoXDIGJ970rqd4mdVZjme\nSW4ZYY8rtSXFkkaZbj/WlfavBzuzxcQ7spp+JiTgDjwFVbtkADwGTEi3nPWOF3zu\n4pB1utCpMQiEbEXPOlKbTmM8nwNJ/tIBq4rO+5aGVQ++E4qWQj4sWCnyrmah/Tv2\nYi77P+Ww1Md+A3inXi+eQEwrTA0N5/he8uyUDZ9igMIatse7/1BIeV6FELy+AeMU\nos1pZABYyJaukG9mwpiYtFCh1QqSNL1aEgbVuRjhJAxe/UmJ00ITYX0HBo0EPHoI\nax7XC0S0L/3Q/8Kf9Zal3m/ABomntxuk09ncEtpKcPP6+HILFemHSxzEhSxiPQ6j\n7UXfDeMh7hX7tXbPGhgAm8JR10mM4vD/nqS1F8LskA==\n=dztm\n-----END PGP SIGNATURE-----",
        "payload": "tree e3f986034d79e48a13986e1a144a0f7b2a879a7f\nparent 9d97e83bf677ce595c6b2dc5d6805c2fcb1bc05b\nauthor Ashley Holman <dscvlt@gmail.com> 1400864999 -0500\ncommitter Ashley Holman <dscvlt@gmail.com> 1401782854 +0930\n\nQt: Add GUI view of peer information. #4133\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65f78a111ff52c2212cc0a423662e7a41d1206dd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/65f78a111ff52c2212cc0a423662e7a41d1206dd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65f78a111ff52c2212cc0a423662e7a41d1206dd/comments",
    "author": {
      "login": "ashleyholman",
      "id": 549484,
      "node_id": "MDQ6VXNlcjU0OTQ4NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/549484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ashleyholman",
      "html_url": "https://github.com/ashleyholman",
      "followers_url": "https://api.github.com/users/ashleyholman/followers",
      "following_url": "https://api.github.com/users/ashleyholman/following{/other_user}",
      "gists_url": "https://api.github.com/users/ashleyholman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ashleyholman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ashleyholman/subscriptions",
      "organizations_url": "https://api.github.com/users/ashleyholman/orgs",
      "repos_url": "https://api.github.com/users/ashleyholman/repos",
      "events_url": "https://api.github.com/users/ashleyholman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ashleyholman/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ashleyholman",
      "id": 549484,
      "node_id": "MDQ6VXNlcjU0OTQ4NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/549484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ashleyholman",
      "html_url": "https://github.com/ashleyholman",
      "followers_url": "https://api.github.com/users/ashleyholman/followers",
      "following_url": "https://api.github.com/users/ashleyholman/following{/other_user}",
      "gists_url": "https://api.github.com/users/ashleyholman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ashleyholman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ashleyholman/subscriptions",
      "organizations_url": "https://api.github.com/users/ashleyholman/orgs",
      "repos_url": "https://api.github.com/users/ashleyholman/repos",
      "events_url": "https://api.github.com/users/ashleyholman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ashleyholman/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9d97e83bf677ce595c6b2dc5d6805c2fcb1bc05b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d97e83bf677ce595c6b2dc5d6805c2fcb1bc05b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9d97e83bf677ce595c6b2dc5d6805c2fcb1bc05b"
      }
    ],
    "stats": {
      "total": 882,
      "additions": 870,
      "deletions": 12
    },
    "files": [
      {
        "sha": "1d85113d78204a33b18880371a3feb6f6753e6a4",
        "filename": "src/qt/Makefile.am",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65f78a111ff52c2212cc0a423662e7a41d1206dd/src/qt/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65f78a111ff52c2212cc0a423662e7a41d1206dd/src/qt/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/Makefile.am?ref=65f78a111ff52c2212cc0a423662e7a41d1206dd",
        "patch": "@@ -126,6 +126,7 @@ QT_MOC_CPP = \\\n   moc_optionsdialog.cpp \\\n   moc_optionsmodel.cpp \\\n   moc_overviewpage.cpp \\\n+  moc_peertablemodel.cpp \\\n   moc_paymentserver.cpp \\\n   moc_qvalidatedlineedit.cpp \\\n   moc_qvaluecombobox.cpp \\\n@@ -191,6 +192,7 @@ BITCOIN_QT_H = \\\n   overviewpage.h \\\n   paymentrequestplus.h \\\n   paymentserver.h \\\n+  peertablemodel.h \\\n   qvalidatedlineedit.h \\\n   qvaluecombobox.h \\\n   receivecoinsdialog.h \\\n@@ -294,6 +296,7 @@ BITCOIN_QT_CPP += \\\n   overviewpage.cpp \\\n   paymentrequestplus.cpp \\\n   paymentserver.cpp \\\n+  peertablemodel.cpp \\\n   receivecoinsdialog.cpp \\\n   receiverequestdialog.cpp \\\n   recentrequeststablemodel.cpp \\"
      },
      {
        "sha": "ce773e0f822d4636e81ddb92f4f82a2683e4619e",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65f78a111ff52c2212cc0a423662e7a41d1206dd/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65f78a111ff52c2212cc0a423662e7a41d1206dd/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=65f78a111ff52c2212cc0a423662e7a41d1206dd",
        "patch": "@@ -5,6 +5,7 @@\n #include \"clientmodel.h\"\n \n #include \"guiconstants.h\"\n+#include \"peertablemodel.h\"\n \n #include \"alert.h\"\n #include \"chainparams.h\"\n@@ -22,11 +23,12 @@\n static const int64_t nClientStartupTime = GetTime();\n \n ClientModel::ClientModel(OptionsModel *optionsModel, QObject *parent) :\n-    QObject(parent), optionsModel(optionsModel),\n+    QObject(parent), optionsModel(optionsModel), peerTableModel(0),\n     cachedNumBlocks(0),\n     cachedReindexing(0), cachedImporting(0),\n     numBlocksAtStartup(-1), pollTimer(0)\n {\n+    peerTableModel = new PeerTableModel(this);\n     pollTimer = new QTimer(this);\n     connect(pollTimer, SIGNAL(timeout()), this, SLOT(updateTimer()));\n     pollTimer->start(MODEL_UPDATE_DELAY);\n@@ -173,6 +175,11 @@ OptionsModel *ClientModel::getOptionsModel()\n     return optionsModel;\n }\n \n+PeerTableModel *ClientModel::getPeerTableModel()\n+{\n+    return peerTableModel;\n+}\n+\n QString ClientModel::formatFullVersion() const\n {\n     return QString::fromStdString(FormatFullVersion());"
      },
      {
        "sha": "c18d30178b9bc7c0f83fc300b12e89e5249c6d22",
        "filename": "src/qt/clientmodel.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65f78a111ff52c2212cc0a423662e7a41d1206dd/src/qt/clientmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65f78a111ff52c2212cc0a423662e7a41d1206dd/src/qt/clientmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.h?ref=65f78a111ff52c2212cc0a423662e7a41d1206dd",
        "patch": "@@ -9,6 +9,7 @@\n \n class AddressTableModel;\n class OptionsModel;\n+class PeerTableModel;\n class TransactionTableModel;\n \n class CWallet;\n@@ -42,6 +43,7 @@ class ClientModel : public QObject\n     ~ClientModel();\n \n     OptionsModel *getOptionsModel();\n+    PeerTableModel *getPeerTableModel();\n \n     //! Return number of connections, default is in- and outbound (total)\n     int getNumConnections(unsigned int flags = CONNECTIONS_ALL) const;\n@@ -71,6 +73,7 @@ class ClientModel : public QObject\n \n private:\n     OptionsModel *optionsModel;\n+    PeerTableModel *peerTableModel;\n \n     int cachedNumBlocks;\n     bool cachedReindexing;"
      },
      {
        "sha": "bf737d9b99676a0dc7f10fe3eaa3e9d215ea885e",
        "filename": "src/qt/forms/rpcconsole.ui",
        "status": "modified",
        "additions": 275,
        "deletions": 0,
        "changes": 275,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65f78a111ff52c2212cc0a423662e7a41d1206dd/src/qt/forms/rpcconsole.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65f78a111ff52c2212cc0a423662e7a41d1206dd/src/qt/forms/rpcconsole.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/rpcconsole.ui?ref=65f78a111ff52c2212cc0a423662e7a41d1206dd",
        "patch": "@@ -652,6 +652,281 @@\n        </item>\n       </layout>\n      </widget>\n+     <widget class=\"QWidget\" name=\"tab_peers\">\n+      <attribute name=\"title\">\n+       <string>&amp;Peers</string>\n+      </attribute>\n+      <layout class=\"QGridLayout\" name=\"gridLayout_2\">\n+       <item row=\"0\" column=\"1\">\n+        <widget class=\"QLabel\" name=\"peerHeading\">\n+         <property name=\"sizePolicy\">\n+          <sizepolicy hsizetype=\"Preferred\" vsizetype=\"Minimum\">\n+           <horstretch>0</horstretch>\n+           <verstretch>0</verstretch>\n+          </sizepolicy>\n+         </property>\n+         <property name=\"text\">\n+          <string>Select a peer to view detailed information.</string>\n+         </property>\n+         <property name=\"margin\">\n+          <number>3</number>\n+         </property>\n+        </widget>\n+       </item>\n+       <item row=\"0\" column=\"0\" rowspan=\"2\">\n+        <widget class=\"QTableView\" name=\"peerWidget\">\n+         <property name=\"sizePolicy\">\n+          <sizepolicy hsizetype=\"Expanding\" vsizetype=\"Expanding\">\n+           <horstretch>0</horstretch>\n+           <verstretch>0</verstretch>\n+          </sizepolicy>\n+         </property>\n+         <property name=\"horizontalScrollBarPolicy\">\n+          <enum>Qt::ScrollBarAlwaysOff</enum>\n+         </property>\n+         <property name=\"editTriggers\">\n+          <set>QAbstractItemView::AnyKeyPressed|QAbstractItemView::DoubleClicked|QAbstractItemView::EditKeyPressed</set>\n+         </property>\n+         <property name=\"sortingEnabled\">\n+          <bool>true</bool>\n+         </property>\n+        </widget>\n+       </item>\n+       <item row=\"1\" column=\"1\">\n+        <widget class=\"QWidget\" name=\"detailWidget\" native=\"true\">\n+         <property name=\"sizePolicy\">\n+          <sizepolicy hsizetype=\"Preferred\" vsizetype=\"Expanding\">\n+           <horstretch>0</horstretch>\n+           <verstretch>0</verstretch>\n+          </sizepolicy>\n+         </property>\n+         <layout class=\"QGridLayout\" name=\"gridLayout_3\">\n+          <property name=\"leftMargin\">\n+           <number>3</number>\n+          </property>\n+          <item row=\"12\" column=\"0\">\n+           <widget class=\"QLabel\" name=\"label_21\">\n+            <property name=\"text\">\n+             <string>Version:</string>\n+            </property>\n+           </widget>\n+          </item>\n+          <item row=\"11\" column=\"1\">\n+           <widget class=\"QLabel\" name=\"peerPingTime\">\n+            <property name=\"text\">\n+             <string>N/A</string>\n+            </property>\n+           </widget>\n+          </item>\n+          <item row=\"5\" column=\"0\">\n+           <widget class=\"QLabel\" name=\"label_19\">\n+            <property name=\"text\">\n+             <string>Last Receive:</string>\n+            </property>\n+           </widget>\n+          </item>\n+          <item row=\"14\" column=\"0\">\n+           <widget class=\"QLabel\" name=\"label_28\">\n+            <property name=\"text\">\n+             <string>User Agent:</string>\n+            </property>\n+           </widget>\n+          </item>\n+          <item row=\"12\" column=\"1\">\n+           <widget class=\"QLabel\" name=\"peerVersion\">\n+            <property name=\"text\">\n+             <string>N/A</string>\n+            </property>\n+           </widget>\n+          </item>\n+          <item row=\"8\" column=\"1\">\n+           <widget class=\"QLabel\" name=\"peerConnTime\">\n+            <property name=\"minimumSize\">\n+             <size>\n+              <width>160</width>\n+              <height>0</height>\n+             </size>\n+            </property>\n+            <property name=\"text\">\n+             <string>N/A</string>\n+            </property>\n+           </widget>\n+          </item>\n+          <item row=\"11\" column=\"0\">\n+           <widget class=\"QLabel\" name=\"label_26\">\n+            <property name=\"text\">\n+             <string>Ping Time:</string>\n+            </property>\n+           </widget>\n+          </item>\n+          <item row=\"5\" column=\"1\">\n+           <widget class=\"QLabel\" name=\"peerLastRecv\">\n+            <property name=\"sizePolicy\">\n+             <sizepolicy hsizetype=\"Preferred\" vsizetype=\"Preferred\">\n+              <horstretch>0</horstretch>\n+              <verstretch>0</verstretch>\n+             </sizepolicy>\n+            </property>\n+            <property name=\"text\">\n+             <string>N/A</string>\n+            </property>\n+           </widget>\n+          </item>\n+          <item row=\"8\" column=\"0\">\n+           <widget class=\"QLabel\" name=\"label_22\">\n+            <property name=\"text\">\n+             <string>Connection Time:</string>\n+            </property>\n+           </widget>\n+          </item>\n+          <item row=\"6\" column=\"1\">\n+           <widget class=\"QLabel\" name=\"peerBytesSent\">\n+            <property name=\"text\">\n+             <string>N/A</string>\n+            </property>\n+           </widget>\n+          </item>\n+          <item row=\"14\" column=\"1\">\n+           <widget class=\"QLabel\" name=\"peerSubversion\">\n+            <property name=\"text\">\n+             <string>N/A</string>\n+            </property>\n+           </widget>\n+          </item>\n+          <item row=\"15\" column=\"0\">\n+           <widget class=\"QLabel\" name=\"label_29\">\n+            <property name=\"text\">\n+             <string>Starting Height:</string>\n+            </property>\n+           </widget>\n+          </item>\n+          <item row=\"7\" column=\"1\">\n+           <widget class=\"QLabel\" name=\"peerBytesRecv\">\n+            <property name=\"text\">\n+             <string>N/A</string>\n+            </property>\n+           </widget>\n+          </item>\n+          <item row=\"6\" column=\"0\">\n+           <widget class=\"QLabel\" name=\"label_18\">\n+            <property name=\"text\">\n+             <string>Bytes Sent:</string>\n+            </property>\n+           </widget>\n+          </item>\n+          <item row=\"7\" column=\"0\">\n+           <widget class=\"QLabel\" name=\"label_20\">\n+            <property name=\"text\">\n+             <string>Bytes Received:</string>\n+            </property>\n+           </widget>\n+          </item>\n+          <item row=\"15\" column=\"1\">\n+           <widget class=\"QLabel\" name=\"peerHeight\">\n+            <property name=\"text\">\n+             <string>N/A</string>\n+            </property>\n+           </widget>\n+          </item>\n+          <item row=\"16\" column=\"0\">\n+           <widget class=\"QLabel\" name=\"label_24\">\n+            <property name=\"text\">\n+             <string>Ban Score:</string>\n+            </property>\n+           </widget>\n+          </item>\n+          <item row=\"16\" column=\"1\">\n+           <widget class=\"QLabel\" name=\"peerBanScore\">\n+            <property name=\"text\">\n+             <string>N/A</string>\n+            </property>\n+           </widget>\n+          </item>\n+          <item row=\"17\" column=\"0\">\n+           <widget class=\"QLabel\" name=\"label_23\">\n+            <property name=\"text\">\n+             <string>Direction:</string>\n+            </property>\n+           </widget>\n+          </item>\n+          <item row=\"17\" column=\"1\">\n+           <widget class=\"QLabel\" name=\"peerDirection\">\n+            <property name=\"text\">\n+             <string>N/A</string>\n+            </property>\n+           </widget>\n+          </item>\n+          <item row=\"19\" column=\"0\">\n+           <widget class=\"QLabel\" name=\"label_25\">\n+            <property name=\"text\">\n+             <string>Sync Node:</string>\n+            </property>\n+           </widget>\n+          </item>\n+          <item row=\"19\" column=\"1\">\n+           <widget class=\"QLabel\" name=\"peerSyncNode\">\n+            <property name=\"text\">\n+             <string>N/A</string>\n+            </property>\n+           </widget>\n+          </item>\n+          <item row=\"3\" column=\"0\">\n+           <widget class=\"QLabel\" name=\"label_15\">\n+            <property name=\"text\">\n+             <string>Last Send:</string>\n+            </property>\n+           </widget>\n+          </item>\n+          <item row=\"2\" column=\"0\">\n+           <widget class=\"QLabel\" name=\"label_4\">\n+            <property name=\"text\">\n+             <string>Services:</string>\n+            </property>\n+           </widget>\n+          </item>\n+          <item row=\"1\" column=\"0\">\n+           <widget class=\"QLabel\" name=\"label_27\">\n+            <property name=\"text\">\n+             <string>IP Address/port:</string>\n+            </property>\n+           </widget>\n+          </item>\n+          <item row=\"3\" column=\"1\">\n+           <widget class=\"QLabel\" name=\"peerLastSend\">\n+            <property name=\"text\">\n+             <string>N/A</string>\n+            </property>\n+           </widget>\n+          </item>\n+          <item row=\"2\" column=\"1\">\n+           <widget class=\"QLabel\" name=\"peerServices\">\n+            <property name=\"text\">\n+             <string>N/A</string>\n+            </property>\n+           </widget>\n+          </item>\n+          <item row=\"1\" column=\"1\">\n+           <widget class=\"QLabel\" name=\"peerAddr\">\n+            <property name=\"text\">\n+             <string>N/A</string>\n+            </property>\n+           </widget>\n+          </item>\n+          <item row=\"20\" column=\"0\">\n+           <widget class=\"QWidget\" name=\"widget\" native=\"true\">\n+            <property name=\"sizePolicy\">\n+             <sizepolicy hsizetype=\"Preferred\" vsizetype=\"Expanding\">\n+              <horstretch>0</horstretch>\n+              <verstretch>0</verstretch>\n+             </sizepolicy>\n+            </property>\n+           </widget>\n+          </item>\n+         </layout>\n+        </widget>\n+       </item>\n+      </layout>\n+     </widget>\n     </widget>\n    </item>\n   </layout>"
      },
      {
        "sha": "851c0130ed410145173f2a306c28014b59c6c046",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 48,
        "deletions": 0,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65f78a111ff52c2212cc0a423662e7a41d1206dd/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65f78a111ff52c2212cc0a423662e7a41d1206dd/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=65f78a111ff52c2212cc0a423662e7a41d1206dd",
        "patch": "@@ -11,6 +11,7 @@\n \n #include \"core.h\"\n #include \"init.h\"\n+#include \"protocol.h\"\n #include \"util.h\"\n \n #ifdef WIN32\n@@ -750,4 +751,51 @@ QString boostPathToQString(const boost::filesystem::path &path)\n }\n #endif\n \n+QString formatDurationStr(int secs)\n+{\n+    QStringList strList;\n+    int days = secs / 86400;\n+    int hours = (secs % 86400) / 3600;\n+    int mins = (secs % 3600) / 60;\n+    int seconds = secs % 60;\n+\n+    if (days)\n+        strList.append(QString(QObject::tr(\"%1 d\")).arg(days));\n+    if (hours)\n+        strList.append(QString(QObject::tr(\"%1 h\")).arg(hours));\n+    if (mins)\n+        strList.append(QString(QObject::tr(\"%1 m\")).arg(mins));\n+    if (seconds || (!days && !hours && !mins))\n+        strList.append(QString(QObject::tr(\"%1 s\")).arg(seconds));\n+\n+    return strList.join(\" \");\n+}\n+\n+QString formatServicesStr(uint64_t mask)\n+{\n+    QStringList strList;\n+\n+    // Just scan the last 8 bits for now.\n+    for (int i=0; i < 8; i++) {\n+        uint64_t check = 1 << i;\n+        if (mask & check)\n+        {\n+            switch (check)\n+            {\n+            case NODE_NETWORK:\n+                strList.append(QObject::tr(\"NETWORK\"));\n+                break;\n+            default:\n+                strList.append(QString(\"%1[%2]\").arg(QObject::tr(\"UNKNOWN\")).arg(check));\n+            }\n+        }\n+    }\n+\n+    if (strList.size())\n+        return strList.join(\" & \");\n+    else\n+        return QObject::tr(\"None\");\n+\n+}\n+\n } // namespace GUIUtil"
      },
      {
        "sha": "ea6b7de8724a46c72ccef820d5f690e3c56cadf7",
        "filename": "src/qt/guiutil.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65f78a111ff52c2212cc0a423662e7a41d1206dd/src/qt/guiutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65f78a111ff52c2212cc0a423662e7a41d1206dd/src/qt/guiutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.h?ref=65f78a111ff52c2212cc0a423662e7a41d1206dd",
        "patch": "@@ -173,6 +173,12 @@ namespace GUIUtil\n     /* Convert OS specific boost path to QString through UTF-8 */\n     QString boostPathToQString(const boost::filesystem::path &path);\n \n+    /* Convert seconds into a QString with days, hours, mins, secs */\n+    QString formatDurationStr(int secs);\n+\n+    /* Format CNodeStats.nServices bitmask into a user-readable string */\n+    QString formatServicesStr(uint64_t mask);\n+\n } // namespace GUIUtil\n \n #endif // GUIUTIL_H"
      },
      {
        "sha": "fba9d84e772781494f376ca45f5669c5d66bb4ce",
        "filename": "src/qt/peertablemodel.cpp",
        "status": "added",
        "additions": 238,
        "deletions": 0,
        "changes": 238,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65f78a111ff52c2212cc0a423662e7a41d1206dd/src/qt/peertablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65f78a111ff52c2212cc0a423662e7a41d1206dd/src/qt/peertablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/peertablemodel.cpp?ref=65f78a111ff52c2212cc0a423662e7a41d1206dd",
        "patch": "@@ -0,0 +1,238 @@\n+// Copyright (c) 2011-2013 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"peertablemodel.h\"\n+\n+#include \"clientmodel.h\"\n+\n+#include \"net.h\"\n+#include \"sync.h\"\n+\n+#include <QDebug>\n+#include <QList>\n+#include <QTimer>\n+\n+bool NodeLessThan::operator()(const CNodeCombinedStats &left, const CNodeCombinedStats &right) const\n+{\n+    const CNodeStats *pLeft = &(left.nodestats);\n+    const CNodeStats *pRight = &(right.nodestats);\n+\n+    if (order == Qt::DescendingOrder)\n+        std::swap(pLeft, pRight);\n+\n+    switch(column)\n+    {\n+    case PeerTableModel::Address:\n+        return pLeft->addrName.compare(pRight->addrName) < 0;\n+    case PeerTableModel::Subversion:\n+        return pLeft->cleanSubVer.compare(pRight->cleanSubVer) < 0;\n+    case PeerTableModel::Height:\n+        return pLeft->nStartingHeight < pRight->nStartingHeight;\n+    }\n+\n+    return false;\n+}\n+\n+// private implementation\n+class PeerTablePriv\n+{\n+public:\n+    /** Local cache of peer information */\n+    QList<CNodeCombinedStats> cachedNodeStats;\n+    /** Column to sort nodes by */\n+    int sortColumn;\n+    /** Order (ascending or descending) to sort nodes by */\n+    Qt::SortOrder sortOrder;\n+    /** Index of rows by node ID */\n+    std::map<NodeId, int> mapNodeRows;\n+\n+    /** Pull a full list of peers from vNodes into our cache */\n+    void refreshPeers() {\n+        TRY_LOCK(cs_vNodes, lockNodes);\n+        {\n+            if (!lockNodes)\n+            {\n+                // skip the refresh if we can't immediately get the lock\n+                return;\n+            }\n+            cachedNodeStats.clear();\n+#if QT_VERSION >= 0x040700\n+            cachedNodeStats.reserve(vNodes.size());\n+#endif\n+            BOOST_FOREACH(CNode* pnode, vNodes)\n+            {\n+                CNodeCombinedStats stats;\n+                stats.statestats.nMisbehavior = -1;\n+                pnode->copyStats(stats.nodestats);\n+                cachedNodeStats.append(stats);\n+            }\n+        }\n+\n+        // if we can, retrieve the CNodeStateStats for each node.\n+        TRY_LOCK(cs_main, lockMain);\n+        {\n+            if (lockMain)\n+            {\n+                BOOST_FOREACH(CNodeCombinedStats &stats, cachedNodeStats)\n+                {\n+                    GetNodeStateStats(stats.nodestats.nodeid, stats.statestats);\n+                }\n+            }\n+        }\n+\n+\n+        if (sortColumn >= 0)\n+            // sort cacheNodeStats (use stable sort to prevent rows jumping around unneceesarily)\n+            qStableSort(cachedNodeStats.begin(), cachedNodeStats.end(), NodeLessThan(sortColumn, sortOrder));\n+\n+        // build index map\n+        mapNodeRows.clear();\n+        int row = 0;\n+        BOOST_FOREACH(CNodeCombinedStats &stats, cachedNodeStats)\n+        {\n+            mapNodeRows.insert(std::pair<NodeId, int>(stats.nodestats.nodeid, row++));\n+        }\n+    }\n+\n+    int size()\n+    {\n+        return cachedNodeStats.size();\n+    }\n+\n+    CNodeCombinedStats *index(int idx)\n+    {\n+        if(idx >= 0 && idx < cachedNodeStats.size()) {\n+            return &cachedNodeStats[idx];\n+        }\n+        else\n+        {\n+            return 0;\n+        }\n+    }\n+\n+};\n+\n+PeerTableModel::PeerTableModel(ClientModel *parent) :\n+    QAbstractTableModel(parent),clientModel(parent),timer(0)\n+{\n+    columns << tr(\"Address\") << tr(\"User Agent\") << tr(\"Start Height\");\n+    priv = new PeerTablePriv();\n+    // default to unsorted\n+    priv->sortColumn = -1;\n+\n+    // set up timer for auto refresh\n+    timer = new QTimer();\n+    connect(timer, SIGNAL(timeout()), SLOT(refresh()));\n+\n+    // load initial data\n+    refresh();\n+}\n+\n+void PeerTableModel::startAutoRefresh(int msecs)\n+{\n+    timer->setInterval(1000);\n+    timer->start();\n+}\n+\n+void PeerTableModel::stopAutoRefresh()\n+{\n+    timer->stop();\n+}\n+\n+int PeerTableModel::rowCount(const QModelIndex &parent) const\n+{\n+    Q_UNUSED(parent);\n+    return priv->size();\n+}\n+\n+int PeerTableModel::columnCount(const QModelIndex &parent) const\n+{\n+    Q_UNUSED(parent);\n+    return 3;\n+}\n+\n+QVariant PeerTableModel::data(const QModelIndex &index, int role) const\n+{\n+    if(!index.isValid())\n+        return QVariant();\n+\n+    CNodeCombinedStats *rec = static_cast<CNodeCombinedStats*>(index.internalPointer());\n+\n+    if(role == Qt::DisplayRole)\n+    {\n+        switch(index.column())\n+        {\n+        case Address:\n+            return QVariant(rec->nodestats.addrName.c_str());\n+        case Subversion:\n+            return QVariant(rec->nodestats.cleanSubVer.c_str());\n+        case Height:\n+            return rec->nodestats.nStartingHeight;\n+        }\n+    }\n+    return QVariant();\n+}\n+\n+QVariant PeerTableModel::headerData(int section, Qt::Orientation orientation, int role) const\n+{\n+    if(orientation == Qt::Horizontal)\n+    {\n+        if(role == Qt::DisplayRole && section < columns.size())\n+        {\n+            return columns[section];\n+        }\n+    }\n+    return QVariant();\n+}\n+\n+Qt::ItemFlags PeerTableModel::flags(const QModelIndex &index) const\n+{\n+    if(!index.isValid())\n+        return 0;\n+\n+    Qt::ItemFlags retval = Qt::ItemIsSelectable | Qt::ItemIsEnabled;\n+    return retval;\n+}\n+\n+QModelIndex PeerTableModel::index(int row, int column, const QModelIndex &parent) const\n+{\n+    Q_UNUSED(parent);\n+    CNodeCombinedStats *data = priv->index(row);\n+\n+    if (data)\n+    {\n+        return createIndex(row, column, data);\n+    }\n+    else\n+    {\n+        return QModelIndex();\n+    }\n+}\n+\n+const CNodeCombinedStats *PeerTableModel::getNodeStats(int idx) {\n+    return priv->index(idx);\n+}\n+\n+void PeerTableModel::refresh()\n+{\n+    emit layoutAboutToBeChanged();\n+    priv->refreshPeers();\n+    emit layoutChanged();\n+}\n+\n+int PeerTableModel::getRowByNodeId(NodeId nodeid)\n+{\n+    std::map<NodeId, int>::iterator it = priv->mapNodeRows.find(nodeid);\n+    if (it == priv->mapNodeRows.end())\n+        return -1;\n+\n+    return it->second;\n+}\n+\n+void PeerTableModel::sort(int column, Qt::SortOrder order)\n+{\n+    priv->sortColumn = column;\n+    priv->sortOrder = order;\n+    refresh();\n+}"
      },
      {
        "sha": "d947e21240f9ad389c556d4b8c00dd14382b73fe",
        "filename": "src/qt/peertablemodel.h",
        "status": "added",
        "additions": 79,
        "deletions": 0,
        "changes": 79,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65f78a111ff52c2212cc0a423662e7a41d1206dd/src/qt/peertablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65f78a111ff52c2212cc0a423662e7a41d1206dd/src/qt/peertablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/peertablemodel.h?ref=65f78a111ff52c2212cc0a423662e7a41d1206dd",
        "patch": "@@ -0,0 +1,79 @@\n+// Copyright (c) 2011-2013 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef PEERTABLEMODEL_H\n+#define PEERTABLEMODEL_H\n+\n+#include \"main.h\"\n+#include \"net.h\"\n+\n+#include <QAbstractTableModel>\n+#include <QStringList>\n+\n+class PeerTablePriv;\n+class ClientModel;\n+\n+class QTimer;\n+\n+struct CNodeCombinedStats {\n+    CNodeStats nodestats;\n+    CNodeStateStats statestats;\n+};\n+\n+class NodeLessThan\n+{\n+public:\n+    NodeLessThan(int nColumn, Qt::SortOrder fOrder):\n+        column(nColumn), order(fOrder) {}\n+    bool operator()(const CNodeCombinedStats &left, const CNodeCombinedStats &right) const;\n+\n+private:\n+    int column;\n+    Qt::SortOrder order;\n+};\n+\n+/**\n+   Qt model providing information about connected peers, similar to the\n+   \"getpeerinfo\" RPC call. Used by the rpc console UI.\n+ */\n+class PeerTableModel : public QAbstractTableModel\n+{\n+    Q_OBJECT\n+\n+public:\n+    explicit PeerTableModel(ClientModel *parent = 0);\n+    const CNodeCombinedStats *getNodeStats(int idx);\n+    int getRowByNodeId(NodeId nodeid);\n+    void startAutoRefresh(int msecs);\n+    void stopAutoRefresh();\n+\n+    enum ColumnIndex {\n+        Address = 0,\n+        Subversion = 1,\n+        Height = 2\n+    };\n+\n+    /** @name Methods overridden from QAbstractTableModel\n+        @{*/\n+    int rowCount(const QModelIndex &parent) const;\n+    int columnCount(const QModelIndex &parent) const;\n+    QVariant data(const QModelIndex &index, int role) const;\n+    QVariant headerData(int section, Qt::Orientation orientation, int role) const;\n+    QModelIndex index(int row, int column, const QModelIndex &parent) const;\n+    Qt::ItemFlags flags(const QModelIndex &index) const;\n+    void sort(int column, Qt::SortOrder order);\n+    /*@}*/\n+\n+public slots:\n+    void refresh();\n+\n+private:\n+    ClientModel *clientModel;\n+    QStringList columns;\n+    PeerTablePriv *priv;\n+    QTimer *timer;\n+\n+};\n+\n+#endif // PEERTABLEMODEL_H"
      },
      {
        "sha": "ed048cf3cc6069a8e5f7b841f9f0b310514a1f23",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 181,
        "deletions": 11,
        "changes": 192,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65f78a111ff52c2212cc0a423662e7a41d1206dd/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65f78a111ff52c2212cc0a423662e7a41d1206dd/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=65f78a111ff52c2212cc0a423662e7a41d1206dd",
        "patch": "@@ -7,6 +7,10 @@\n \n #include \"clientmodel.h\"\n #include \"guiutil.h\"\n+#include \"peertablemodel.h\"\n+\n+#include \"main.h\"\n+#include \"util.h\"\n \n #include \"rpcserver.h\"\n #include \"rpcclient.h\"\n@@ -195,6 +199,10 @@ RPCConsole::RPCConsole(QWidget *parent) :\n     clientModel(0),\n     historyPtr(0)\n {\n+    detailNodeStats = CNodeCombinedStats();\n+    detailNodeStats.nodestats.nodeid = -1;\n+    detailNodeStats.statestats.nMisbehavior = -1;\n+\n     ui->setupUi(this);\n     GUIUtil::restoreWindowGeometry(\"nRPCConsoleWindow\", this->size(), this);\n \n@@ -214,6 +222,7 @@ RPCConsole::RPCConsole(QWidget *parent) :\n \n     startExecutor();\n     setTrafficGraphRange(INITIAL_TRAFFIC_GRAPH_MINS);\n+    ui->detailWidget->hide();\n \n     clear();\n }\n@@ -277,6 +286,23 @@ void RPCConsole::setClientModel(ClientModel *model)\n         updateTrafficStats(model->getTotalBytesRecv(), model->getTotalBytesSent());\n         connect(model, SIGNAL(bytesChanged(quint64,quint64)), this, SLOT(updateTrafficStats(quint64, quint64)));\n \n+        // set up peer table\n+        ui->peerWidget->setModel(model->getPeerTableModel());\n+        ui->peerWidget->verticalHeader()->hide();\n+        ui->peerWidget->setEditTriggers(QAbstractItemView::NoEditTriggers);\n+        ui->peerWidget->setSelectionBehavior(QAbstractItemView::SelectRows);\n+        ui->peerWidget->setSelectionMode(QAbstractItemView::SingleSelection);\n+        ui->peerWidget->setColumnWidth(PeerTableModel::Address, ADDRESS_COLUMN_WIDTH);\n+        columnResizingFixer = new GUIUtil::TableViewLastColumnResizingFixer(ui->peerWidget, MINIMUM_COLUMN_WIDTH, MINIMUM_COLUMN_WIDTH);\n+\n+        // connect the peerWidget's selection model to our peerSelected() handler\n+        QItemSelectionModel *peerSelectModel = ui->peerWidget->selectionModel();\n+        connect(peerSelectModel,\n+                SIGNAL(selectionChanged(const QItemSelection &, const QItemSelection &)),\n+                this,\n+                SLOT(peerSelected(const QItemSelection &, const QItemSelection &)));\n+        connect(model->getPeerTableModel(), SIGNAL(layoutChanged()), this, SLOT(peerLayoutChanged()));\n+\n         // Provide initial values\n         ui->clientVersion->setText(model->formatFullVersion());\n         ui->clientName->setText(model->clientName());\n@@ -474,21 +500,165 @@ QString RPCConsole::FormatBytes(quint64 bytes)\n void RPCConsole::setTrafficGraphRange(int mins)\n {\n     ui->trafficGraph->setGraphRangeMins(mins);\n-    if(mins < 60) {\n-        ui->lblGraphRange->setText(QString(tr(\"%1 m\")).arg(mins));\n-    } else {\n-        int hours = mins / 60;\n-        int minsLeft = mins % 60;\n-        if(minsLeft == 0) {\n-            ui->lblGraphRange->setText(QString(tr(\"%1 h\")).arg(hours));\n-        } else {\n-            ui->lblGraphRange->setText(QString(tr(\"%1 h %2 m\")).arg(hours).arg(minsLeft));\n-        }\n-    }\n+    ui->lblGraphRange->setText(GUIUtil::formatDurationStr(mins * 60));\n }\n \n void RPCConsole::updateTrafficStats(quint64 totalBytesIn, quint64 totalBytesOut)\n {\n     ui->lblBytesIn->setText(FormatBytes(totalBytesIn));\n     ui->lblBytesOut->setText(FormatBytes(totalBytesOut));\n }\n+\n+void RPCConsole::peerSelected(const QItemSelection &selected, const QItemSelection &deselected)\n+{\n+    if (selected.indexes().isEmpty())\n+        return;\n+\n+    // mark the cached banscore as unknown\n+    detailNodeStats.statestats.nMisbehavior = -1;\n+\n+    const CNodeCombinedStats *stats = clientModel->getPeerTableModel()->getNodeStats(selected.indexes().first().row());\n+\n+    if (stats)\n+    {\n+        detailNodeStats.nodestats.nodeid = stats->nodestats.nodeid;\n+        updateNodeDetail(stats);\n+        ui->detailWidget->show();\n+        ui->detailWidget->setDisabled(false);\n+    }\n+}\n+\n+void RPCConsole::peerLayoutChanged()\n+{\n+    const CNodeCombinedStats *stats = NULL;\n+    bool fUnselect = false, fReselect = false, fDisconnected = false;\n+\n+    if (detailNodeStats.nodestats.nodeid == -1)\n+        // no node selected yet\n+        return;\n+\n+    // find the currently selected row\n+    int selectedRow;\n+    QModelIndexList selectedModelIndex = ui->peerWidget->selectionModel()->selectedIndexes();\n+    if (selectedModelIndex.isEmpty())\n+        selectedRow = -1;\n+    else\n+        selectedRow = selectedModelIndex.first().row();\n+\n+    // check if our detail node has a row in the table (it may not necessarily\n+    // be at selectedRow since its position can change after a layout change)\n+    int detailNodeRow = clientModel->getPeerTableModel()->getRowByNodeId(detailNodeStats.nodestats.nodeid);\n+\n+    if (detailNodeRow < 0)\n+    {\n+        // detail node dissapeared from table (node disconnected)\n+        fUnselect = true;\n+        fDisconnected = true;\n+        detailNodeStats.nodestats.nodeid = 0;\n+    }\n+    else\n+    {\n+        if (detailNodeRow != selectedRow)\n+        {\n+            // detail node moved position\n+            fUnselect = true;\n+            fReselect = true;\n+        }\n+\n+        // get fresh stats on the detail node.\n+        stats = clientModel->getPeerTableModel()->getNodeStats(detailNodeRow);\n+    }\n+\n+    if (fUnselect && selectedRow >= 0)\n+    {\n+        ui->peerWidget->selectionModel()->select(QItemSelection(selectedModelIndex.first(), selectedModelIndex.last()),\n+                                                 QItemSelectionModel::Deselect);\n+    }\n+\n+    if (fReselect)\n+    {\n+        ui->peerWidget->selectRow(detailNodeRow);\n+    }\n+\n+    if (stats)\n+        updateNodeDetail(stats);\n+\n+    if (fDisconnected)\n+    {\n+        ui->peerHeading->setText(QString(tr(\"Peer Disconnected\")));\n+        ui->detailWidget->setDisabled(true);\n+        QDateTime dt = QDateTime::fromTime_t(detailNodeStats.nodestats.nLastSend);\n+        if (detailNodeStats.nodestats.nLastSend)\n+            ui->peerLastSend->setText(dt.toString(\"yyyy-MM-dd hh:mm:ss\"));\n+        dt.setTime_t(detailNodeStats.nodestats.nLastRecv);\n+        if (detailNodeStats.nodestats.nLastRecv)\n+            ui->peerLastRecv->setText(dt.toString(\"yyyy-MM-dd hh:mm:ss\"));\n+        dt.setTime_t(detailNodeStats.nodestats.nTimeConnected);\n+        ui->peerConnTime->setText(dt.toString(\"yyyy-MM-dd hh:mm:ss\"));\n+    }\n+}\n+\n+void RPCConsole::updateNodeDetail(const CNodeCombinedStats *combinedStats)\n+{\n+    CNodeStats stats = combinedStats->nodestats;\n+\n+    // keep a copy of timestamps, used to display dates upon disconnect\n+    detailNodeStats.nodestats.nLastSend = stats.nLastSend;\n+    detailNodeStats.nodestats.nLastRecv = stats.nLastRecv;\n+    detailNodeStats.nodestats.nTimeConnected = stats.nTimeConnected;\n+\n+    // update the detail ui with latest node information\n+    ui->peerHeading->setText(QString(\"<b>%1</b>\").arg(tr(\"Node Detail\")));\n+    ui->peerAddr->setText(QString(stats.addrName.c_str()));\n+    ui->peerServices->setText(GUIUtil::formatServicesStr(stats.nServices));\n+    ui->peerLastSend->setText(stats.nLastSend ? GUIUtil::formatDurationStr(GetTime() - stats.nLastSend) : tr(\"never\"));\n+    ui->peerLastRecv->setText(stats.nLastRecv ? GUIUtil::formatDurationStr(GetTime() - stats.nLastRecv) : tr(\"never\"));\n+    ui->peerBytesSent->setText(FormatBytes(stats.nSendBytes));\n+    ui->peerBytesRecv->setText(FormatBytes(stats.nRecvBytes));\n+    ui->peerConnTime->setText(GUIUtil::formatDurationStr(GetTime() - stats.nTimeConnected));\n+    ui->peerPingTime->setText(stats.dPingTime == 0 ? tr(\"N/A\") : QString(tr(\"%1 secs\")).arg(QString::number(stats.dPingTime, 'f', 3)));\n+    ui->peerVersion->setText(QString(\"%1\").arg(stats.nVersion));\n+    ui->peerSubversion->setText(QString(stats.cleanSubVer.c_str()));\n+    ui->peerDirection->setText(stats.fInbound ? tr(\"Inbound\") : tr(\"Outbound\"));\n+    ui->peerHeight->setText(QString(\"%1\").arg(stats.nStartingHeight));\n+    ui->peerSyncNode->setText(stats.fSyncNode ? tr(\"Yes\") : tr(\"No\"));\n+\n+    // if we can, display the peer's ban score\n+    CNodeStateStats statestats = combinedStats->statestats;\n+    if (statestats.nMisbehavior >= 0)\n+    {\n+        // we have a new nMisbehavor value - update the cache\n+        detailNodeStats.statestats.nMisbehavior = statestats.nMisbehavior;\n+    }\n+\n+    // pull the ban score from cache.  -1 means it hasn't been retrieved yet (lock busy).\n+    if (detailNodeStats.statestats.nMisbehavior >= 0)\n+        ui->peerBanScore->setText(QString(\"%1\").arg(detailNodeStats.statestats.nMisbehavior));\n+    else\n+        ui->peerBanScore->setText(tr(\"Fetching...\"));\n+}\n+\n+void RPCConsole::resizeEvent(QResizeEvent *event)\n+{\n+    QWidget::resizeEvent(event);\n+    columnResizingFixer->stretchColumnWidth(PeerTableModel::Address);\n+}\n+\n+void RPCConsole::showEvent(QShowEvent *event)\n+{\n+    QWidget::showEvent(event);\n+\n+    // peerWidget needs a resize in case the dialog has non-default geometry\n+    columnResizingFixer->stretchColumnWidth(PeerTableModel::Address);\n+\n+    // start the PeerTableModel refresh timer\n+    clientModel->getPeerTableModel()->startAutoRefresh(1000);\n+}\n+\n+void RPCConsole::hideEvent(QHideEvent *event)\n+{\n+    QWidget::hideEvent(event);\n+\n+    // stop PeerTableModel auto refresh\n+    clientModel->getPeerTableModel()->stopAutoRefresh();\n+}"
      },
      {
        "sha": "c17d5397ecef92d94e7b65dc5e037cf423b8efe4",
        "filename": "src/qt/rpcconsole.h",
        "status": "modified",
        "additions": 29,
        "deletions": 0,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65f78a111ff52c2212cc0a423662e7a41d1206dd/src/qt/rpcconsole.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65f78a111ff52c2212cc0a423662e7a41d1206dd/src/qt/rpcconsole.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.h?ref=65f78a111ff52c2212cc0a423662e7a41d1206dd",
        "patch": "@@ -5,10 +5,18 @@\n #ifndef RPCCONSOLE_H\n #define RPCCONSOLE_H\n \n+#include \"guiutil.h\"\n+#include \"net.h\"\n+\n+#include \"peertablemodel.h\"\n+\n #include <QDialog>\n \n class ClientModel;\n \n+class QItemSelection;\n+class CNodeCombinedStats;\n+\n namespace Ui {\n     class RPCConsole;\n }\n@@ -35,6 +43,19 @@ class RPCConsole: public QDialog\n protected:\n     virtual bool eventFilter(QObject* obj, QEvent *event);\n \n+private:\n+    /** show detailed information on ui about selected node */\n+    void updateNodeDetail(const CNodeCombinedStats *combinedStats);\n+\n+    enum ColumnWidths\n+    {\n+        ADDRESS_COLUMN_WIDTH = 250,\n+        MINIMUM_COLUMN_WIDTH = 120\n+    };\n+\n+    /** track the node that we are currently viewing detail on in the peers tab */\n+    CNodeCombinedStats detailNodeStats;\n+\n private slots:\n     void on_lineEdit_returnPressed();\n     void on_tabWidget_currentChanged(int index);\n@@ -44,6 +65,9 @@ private slots:\n     void on_sldGraphRange_valueChanged(int value);\n     /** update traffic statistics */\n     void updateTrafficStats(quint64 totalBytesIn, quint64 totalBytesOut);\n+    void resizeEvent(QResizeEvent *event);\n+    void showEvent(QShowEvent *event);\n+    void hideEvent(QHideEvent *event);\n \n public slots:\n     void clear();\n@@ -57,6 +81,10 @@ public slots:\n     void browseHistory(int offset);\n     /** Scroll console view to end */\n     void scrollToEnd();\n+    /** Handle selection of peer in peers list */\n+    void peerSelected(const QItemSelection &selected, const QItemSelection &deselected);\n+    /** Handle updated peer information */\n+    void peerLayoutChanged();\n \n signals:\n     // For RPC command executor\n@@ -70,6 +98,7 @@ public slots:\n     Ui::RPCConsole *ui;\n     ClientModel *clientModel;\n     QStringList history;\n+    GUIUtil::TableViewLastColumnResizingFixer *columnResizingFixer;\n     int historyPtr;\n \n     void startExecutor();"
      }
    ]
  }
]