[
  {
    "sha": "c3b1181020efb43e3a9472918f8e192ab22ee2ee",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjM2IxMTgxMDIwZWZiNDNlM2E5NDcyOTE4ZjhlMTkyYWIyMmVlMmVl",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@jtimon.cc",
        "date": "2015-01-17T16:49:53Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-03-26T12:00:32Z"
      },
      "message": "Coins: Refactor: Separate CCoinsViewEfficient abstract class from CCoinsViewCache (make parent its class)",
      "tree": {
        "sha": "ed62e8d65d3f45a67cb2ff8e4ada282c6380af6e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ed62e8d65d3f45a67cb2ff8e4ada282c6380af6e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c3b1181020efb43e3a9472918f8e192ab22ee2ee",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c3b1181020efb43e3a9472918f8e192ab22ee2ee",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c3b1181020efb43e3a9472918f8e192ab22ee2ee",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c3b1181020efb43e3a9472918f8e192ab22ee2ee/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8e4fd0cc315cad1e2925907ef7c62549a83730a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e4fd0cc315cad1e2925907ef7c62549a83730a5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8e4fd0cc315cad1e2925907ef7c62549a83730a5"
      }
    ],
    "stats": {
      "total": 67,
      "additions": 41,
      "deletions": 26
    },
    "files": [
      {
        "sha": "57c81a94f3066a6366ae1d45825aae1191f86eb0",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3b1181020efb43e3a9472918f8e192ab22ee2ee/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3b1181020efb43e3a9472918f8e192ab22ee2ee/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=c3b1181020efb43e3a9472918f8e192ab22ee2ee",
        "patch": "@@ -57,7 +57,9 @@ bool CCoinsViewBacked::GetStats(CCoinsStats &stats) const { return base->GetStat\n \n CCoinsKeyHasher::CCoinsKeyHasher() : salt(GetRandHash()) {}\n \n-CCoinsViewCache::CCoinsViewCache(CCoinsView *baseIn) : CCoinsViewBacked(baseIn), hasModifier(false) { }\n+CCoinsViewEfficient::CCoinsViewEfficient(CCoinsView* baseIn) : CCoinsViewBacked(baseIn) {}\n+\n+CCoinsViewCache::CCoinsViewCache(CCoinsView* baseIn) : CCoinsViewEfficient(baseIn), hasModifier(false) { }\n \n CCoinsViewCache::~CCoinsViewCache()\n {\n@@ -182,14 +184,14 @@ unsigned int CCoinsViewCache::GetCacheSize() const {\n     return cacheCoins.size();\n }\n \n-const CTxOut &CCoinsViewCache::GetOutputFor(const CTxIn& input) const\n+const CTxOut& CCoinsViewEfficient::GetOutputFor(const CTxIn& input) const\n {\n     const CCoins* coins = AccessCoins(input.prevout.hash);\n     assert(coins && coins->IsAvailable(input.prevout.n));\n     return coins->vout[input.prevout.n];\n }\n \n-CAmount CCoinsViewCache::GetValueIn(const CTransaction& tx) const\n+CAmount CCoinsViewEfficient::GetValueIn(const CTransaction& tx) const\n {\n     if (tx.IsCoinBase())\n         return 0;\n@@ -201,7 +203,7 @@ CAmount CCoinsViewCache::GetValueIn(const CTransaction& tx) const\n     return nResult;\n }\n \n-bool CCoinsViewCache::HaveInputs(const CTransaction& tx) const\n+bool CCoinsViewEfficient::HaveInputs(const CTransaction& tx) const\n {\n     if (!tx.IsCoinBase()) {\n         for (unsigned int i = 0; i < tx.vin.size(); i++) {\n@@ -215,7 +217,7 @@ bool CCoinsViewCache::HaveInputs(const CTransaction& tx) const\n     return true;\n }\n \n-double CCoinsViewCache::GetPriority(const CTransaction &tx, int nHeight) const\n+double CCoinsViewEfficient::GetPriority(const CTransaction &tx, int nHeight) const\n {\n     if (tx.IsCoinBase())\n         return 0.0;"
      },
      {
        "sha": "1330281862dce3640bd5082a83f6a82cf0e062bf",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 34,
        "deletions": 21,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3b1181020efb43e3a9472918f8e192ab22ee2ee/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3b1181020efb43e3a9472918f8e192ab22ee2ee/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=c3b1181020efb43e3a9472918f8e192ab22ee2ee",
        "patch": "@@ -344,6 +344,37 @@ class CCoinsViewBacked : public CCoinsView\n };\n \n \n+/** Abstract view with more efficient access and some dependent functions. */\n+class CCoinsViewEfficient : public CCoinsViewBacked\n+{\n+public:\n+    CCoinsViewEfficient(CCoinsView* viewIn);\n+    virtual ~CCoinsViewEfficient() {};\n+    /**\n+     * Return a pointer to CCoins, or NULL if not found. This is\n+     * more efficient than GetCoins.\n+     */\n+    virtual const CCoins* AccessCoins(const uint256& txid) const = 0;\n+\n+    //! Check whether all prevouts of the transaction are present in the UTXO set represented by this view\n+    bool HaveInputs(const CTransaction& tx) const;\n+\n+    /** \n+     * Amount of bitcoins coming in to a transaction\n+     * Note that lightweight clients may not know anything besides the hash of previous transactions,\n+     * so may not be able to calculate this.\n+     *\n+     * @param[in] tx\ttransaction for which we are checking input total\n+     * @return\tSum of value of all inputs (scriptSigs)\n+     */\n+    CAmount GetValueIn(const CTransaction& tx) const;\n+\n+    //! Return priority of tx at height nHeight\n+    double GetPriority(const CTransaction& tx, int nHeight) const;\n+\n+    const CTxOut& GetOutputFor(const CTxIn& input) const;\n+};\n+\n class CCoinsViewCache;\n \n /** \n@@ -366,7 +397,7 @@ class CCoinsModifier\n };\n \n /** CCoinsView that adds a memory cache for transactions to another CCoinsView */\n-class CCoinsViewCache : public CCoinsViewBacked\n+class CCoinsViewCache : public CCoinsViewEfficient\n {\n protected:\n     /* Whether this cache has an active modifier. */\n@@ -381,7 +412,7 @@ class CCoinsViewCache : public CCoinsViewBacked\n \n public:\n     CCoinsViewCache(CCoinsView *baseIn);\n-    ~CCoinsViewCache();\n+    virtual ~CCoinsViewCache();\n \n     // Standard CCoinsView methods\n     bool GetCoins(const uint256 &txid, CCoins &coins) const;\n@@ -395,7 +426,7 @@ class CCoinsViewCache : public CCoinsViewBacked\n      * more efficient than GetCoins. Modifications to other cache entries are\n      * allowed while accessing the returned pointer.\n      */\n-    const CCoins* AccessCoins(const uint256 &txid) const;\n+    virtual const CCoins* AccessCoins(const uint256 &txid) const;\n \n     /**\n      * Return a modifiable reference to a CCoins. If no entry with the given\n@@ -414,24 +445,6 @@ class CCoinsViewCache : public CCoinsViewBacked\n     //! Calculate the size of the cache (in number of transactions)\n     unsigned int GetCacheSize() const;\n \n-    /** \n-     * Amount of bitcoins coming in to a transaction\n-     * Note that lightweight clients may not know anything besides the hash of previous transactions,\n-     * so may not be able to calculate this.\n-     *\n-     * @param[in] tx\ttransaction for which we are checking input total\n-     * @return\tSum of value of all inputs (scriptSigs)\n-     */\n-    CAmount GetValueIn(const CTransaction& tx) const;\n-\n-    //! Check whether all prevouts of the transaction are present in the UTXO set represented by this view\n-    bool HaveInputs(const CTransaction& tx) const;\n-\n-    //! Return priority of tx at height nHeight\n-    double GetPriority(const CTransaction &tx, int nHeight) const;\n-\n-    const CTxOut &GetOutputFor(const CTxIn& input) const;\n-\n     friend class CCoinsModifier;\n \n private:"
      }
    ]
  },
  {
    "sha": "613b062a25105b58fdbdb5c1022e0ab045e124b6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MTNiMDYyYTI1MTA1YjU4ZmRiZGI1YzEwMjJlMGFiMDQ1ZTEyNGI2",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@jtimon.cc",
        "date": "2015-01-18T13:02:55Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-03-26T12:07:19Z"
      },
      "message": "Coins: MOVEONLY: Move CCoinsViewCache and CCoinsModifier to coinscache.o",
      "tree": {
        "sha": "f37960940a3a2c754177e685d69edd5431f85a47",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f37960940a3a2c754177e685d69edd5431f85a47"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/613b062a25105b58fdbdb5c1022e0ab045e124b6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/613b062a25105b58fdbdb5c1022e0ab045e124b6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/613b062a25105b58fdbdb5c1022e0ab045e124b6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/613b062a25105b58fdbdb5c1022e0ab045e124b6/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c3b1181020efb43e3a9472918f8e192ab22ee2ee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c3b1181020efb43e3a9472918f8e192ab22ee2ee",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c3b1181020efb43e3a9472918f8e192ab22ee2ee"
      }
    ],
    "stats": {
      "total": 500,
      "additions": 268,
      "deletions": 232
    },
    "files": [
      {
        "sha": "fa9901be416843f3901ef134ffcc575b5a82435c",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/613b062a25105b58fdbdb5c1022e0ab045e124b6/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/613b062a25105b58fdbdb5c1022e0ab045e124b6/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=613b062a25105b58fdbdb5c1022e0ab045e124b6",
        "patch": "@@ -85,6 +85,7 @@ BITCOIN_CORE_H = \\\n   clientversion.h \\\n   coincontrol.h \\\n   coins.h \\\n+  coinscache.h \\\n   compat.h \\\n   compressor.h \\\n   consensus/params.h \\\n@@ -243,6 +244,7 @@ libbitcoin_common_a_SOURCES = \\\n   base58.cpp \\\n   chainparams.cpp \\\n   coins.cpp \\\n+  coinscache.cpp \\\n   compressor.cpp \\\n   primitives/block.cpp \\\n   primitives/transaction.cpp \\"
      },
      {
        "sha": "4a2ff915fb87d4d238429aa4389f55b9fd3674d8",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/613b062a25105b58fdbdb5c1022e0ab045e124b6/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/613b062a25105b58fdbdb5c1022e0ab045e124b6/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=613b062a25105b58fdbdb5c1022e0ab045e124b6",
        "patch": "@@ -4,18 +4,19 @@\n \n #include \"base58.h\"\n #include \"clientversion.h\"\n-#include \"primitives/block.h\" // for MAX_BLOCK_SIZE\n-#include \"primitives/transaction.h\"\n-#include \"core_io.h\"\n #include \"coins.h\"\n+#include \"coinscache.h\"\n+#include \"core_io.h\"\n #include \"keystore.h\"\n+#include \"primitives/block.h\" // for MAX_BLOCK_SIZE\n+#include \"primitives/transaction.h\"\n #include \"script/script.h\"\n #include \"script/sign.h\"\n #include \"ui_interface.h\" // for _(...)\n #include \"univalue/univalue.h\"\n #include \"util.h\"\n-#include \"utilstrencodings.h\"\n #include \"utilmoneystr.h\"\n+#include \"utilstrencodings.h\"\n \n #include <stdio.h>\n "
      },
      {
        "sha": "6b3353bc39c04b9e93033a10e345d2247b77eaf6",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 140,
        "changes": 140,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/613b062a25105b58fdbdb5c1022e0ab045e124b6/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/613b062a25105b58fdbdb5c1022e0ab045e124b6/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=613b062a25105b58fdbdb5c1022e0ab045e124b6",
        "patch": "@@ -59,131 +59,6 @@ CCoinsKeyHasher::CCoinsKeyHasher() : salt(GetRandHash()) {}\n \n CCoinsViewEfficient::CCoinsViewEfficient(CCoinsView* baseIn) : CCoinsViewBacked(baseIn) {}\n \n-CCoinsViewCache::CCoinsViewCache(CCoinsView* baseIn) : CCoinsViewEfficient(baseIn), hasModifier(false) { }\n-\n-CCoinsViewCache::~CCoinsViewCache()\n-{\n-    assert(!hasModifier);\n-}\n-\n-CCoinsMap::const_iterator CCoinsViewCache::FetchCoins(const uint256 &txid) const {\n-    CCoinsMap::iterator it = cacheCoins.find(txid);\n-    if (it != cacheCoins.end())\n-        return it;\n-    CCoins tmp;\n-    if (!base->GetCoins(txid, tmp))\n-        return cacheCoins.end();\n-    CCoinsMap::iterator ret = cacheCoins.insert(std::make_pair(txid, CCoinsCacheEntry())).first;\n-    tmp.swap(ret->second.coins);\n-    if (ret->second.coins.IsPruned()) {\n-        // The parent only has an empty entry for this txid; we can consider our\n-        // version as fresh.\n-        ret->second.flags = CCoinsCacheEntry::FRESH;\n-    }\n-    return ret;\n-}\n-\n-bool CCoinsViewCache::GetCoins(const uint256 &txid, CCoins &coins) const {\n-    CCoinsMap::const_iterator it = FetchCoins(txid);\n-    if (it != cacheCoins.end()) {\n-        coins = it->second.coins;\n-        return true;\n-    }\n-    return false;\n-}\n-\n-CCoinsModifier CCoinsViewCache::ModifyCoins(const uint256 &txid) {\n-    assert(!hasModifier);\n-    std::pair<CCoinsMap::iterator, bool> ret = cacheCoins.insert(std::make_pair(txid, CCoinsCacheEntry()));\n-    if (ret.second) {\n-        if (!base->GetCoins(txid, ret.first->second.coins)) {\n-            // The parent view does not have this entry; mark it as fresh.\n-            ret.first->second.coins.Clear();\n-            ret.first->second.flags = CCoinsCacheEntry::FRESH;\n-        } else if (ret.first->second.coins.IsPruned()) {\n-            // The parent view only has a pruned entry for this; mark it as fresh.\n-            ret.first->second.flags = CCoinsCacheEntry::FRESH;\n-        }\n-    }\n-    // Assume that whenever ModifyCoins is called, the entry will be modified.\n-    ret.first->second.flags |= CCoinsCacheEntry::DIRTY;\n-    return CCoinsModifier(*this, ret.first);\n-}\n-\n-const CCoins* CCoinsViewCache::AccessCoins(const uint256 &txid) const {\n-    CCoinsMap::const_iterator it = FetchCoins(txid);\n-    if (it == cacheCoins.end()) {\n-        return NULL;\n-    } else {\n-        return &it->second.coins;\n-    }\n-}\n-\n-bool CCoinsViewCache::HaveCoins(const uint256 &txid) const {\n-    CCoinsMap::const_iterator it = FetchCoins(txid);\n-    // We're using vtx.empty() instead of IsPruned here for performance reasons,\n-    // as we only care about the case where a transaction was replaced entirely\n-    // in a reorganization (which wipes vout entirely, as opposed to spending\n-    // which just cleans individual outputs).\n-    return (it != cacheCoins.end() && !it->second.coins.vout.empty());\n-}\n-\n-uint256 CCoinsViewCache::GetBestBlock() const {\n-    if (hashBlock.IsNull())\n-        hashBlock = base->GetBestBlock();\n-    return hashBlock;\n-}\n-\n-void CCoinsViewCache::SetBestBlock(const uint256 &hashBlockIn) {\n-    hashBlock = hashBlockIn;\n-}\n-\n-bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn) {\n-    assert(!hasModifier);\n-    for (CCoinsMap::iterator it = mapCoins.begin(); it != mapCoins.end();) {\n-        if (it->second.flags & CCoinsCacheEntry::DIRTY) { // Ignore non-dirty entries (optimization).\n-            CCoinsMap::iterator itUs = cacheCoins.find(it->first);\n-            if (itUs == cacheCoins.end()) {\n-                if (!it->second.coins.IsPruned()) {\n-                    // The parent cache does not have an entry, while the child\n-                    // cache does have (a non-pruned) one. Move the data up, and\n-                    // mark it as fresh (if the grandparent did have it, we\n-                    // would have pulled it in at first GetCoins).\n-                    assert(it->second.flags & CCoinsCacheEntry::FRESH);\n-                    CCoinsCacheEntry& entry = cacheCoins[it->first];\n-                    entry.coins.swap(it->second.coins);\n-                    entry.flags = CCoinsCacheEntry::DIRTY | CCoinsCacheEntry::FRESH;\n-                }\n-            } else {\n-                if ((itUs->second.flags & CCoinsCacheEntry::FRESH) && it->second.coins.IsPruned()) {\n-                    // The grandparent does not have an entry, and the child is\n-                    // modified and being pruned. This means we can just delete\n-                    // it from the parent.\n-                    cacheCoins.erase(itUs);\n-                } else {\n-                    // A normal modification.\n-                    itUs->second.coins.swap(it->second.coins);\n-                    itUs->second.flags |= CCoinsCacheEntry::DIRTY;\n-                }\n-            }\n-        }\n-        CCoinsMap::iterator itOld = it++;\n-        mapCoins.erase(itOld);\n-    }\n-    hashBlock = hashBlockIn;\n-    return true;\n-}\n-\n-bool CCoinsViewCache::Flush() {\n-    bool fOk = base->BatchWrite(cacheCoins, hashBlock);\n-    cacheCoins.clear();\n-    return fOk;\n-}\n-\n-unsigned int CCoinsViewCache::GetCacheSize() const {\n-    return cacheCoins.size();\n-}\n-\n const CTxOut& CCoinsViewEfficient::GetOutputFor(const CTxIn& input) const\n {\n     const CCoins* coins = AccessCoins(input.prevout.hash);\n@@ -233,18 +108,3 @@ double CCoinsViewEfficient::GetPriority(const CTransaction &tx, int nHeight) con\n     }\n     return tx.ComputePriority(dResult);\n }\n-\n-CCoinsModifier::CCoinsModifier(CCoinsViewCache& cache_, CCoinsMap::iterator it_) : cache(cache_), it(it_) {\n-    assert(!cache.hasModifier);\n-    cache.hasModifier = true;\n-}\n-\n-CCoinsModifier::~CCoinsModifier()\n-{\n-    assert(cache.hasModifier);\n-    cache.hasModifier = false;\n-    it->second.coins.Cleanup();\n-    if ((it->second.flags & CCoinsCacheEntry::FRESH) && it->second.coins.IsPruned()) {\n-        cache.cacheCoins.erase(it);\n-    }\n-}"
      },
      {
        "sha": "cddc12c95af8ba425202830c3d5c6eb95f1fb97f",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 0,
        "deletions": 82,
        "changes": 82,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/613b062a25105b58fdbdb5c1022e0ab045e124b6/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/613b062a25105b58fdbdb5c1022e0ab045e124b6/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=613b062a25105b58fdbdb5c1022e0ab045e124b6",
        "patch": "@@ -375,86 +375,4 @@ class CCoinsViewEfficient : public CCoinsViewBacked\n     const CTxOut& GetOutputFor(const CTxIn& input) const;\n };\n \n-class CCoinsViewCache;\n-\n-/** \n- * A reference to a mutable cache entry. Encapsulating it allows us to run\n- *  cleanup code after the modification is finished, and keeping track of\n- *  concurrent modifications. \n- */\n-class CCoinsModifier\n-{\n-private:\n-    CCoinsViewCache& cache;\n-    CCoinsMap::iterator it;\n-    CCoinsModifier(CCoinsViewCache& cache_, CCoinsMap::iterator it_);\n-\n-public:\n-    CCoins* operator->() { return &it->second.coins; }\n-    CCoins& operator*() { return it->second.coins; }\n-    ~CCoinsModifier();\n-    friend class CCoinsViewCache;\n-};\n-\n-/** CCoinsView that adds a memory cache for transactions to another CCoinsView */\n-class CCoinsViewCache : public CCoinsViewEfficient\n-{\n-protected:\n-    /* Whether this cache has an active modifier. */\n-    bool hasModifier;\n-\n-    /**\n-     * Make mutable so that we can \"fill the cache\" even from Get-methods\n-     * declared as \"const\".  \n-     */\n-    mutable uint256 hashBlock;\n-    mutable CCoinsMap cacheCoins;\n-\n-public:\n-    CCoinsViewCache(CCoinsView *baseIn);\n-    virtual ~CCoinsViewCache();\n-\n-    // Standard CCoinsView methods\n-    bool GetCoins(const uint256 &txid, CCoins &coins) const;\n-    bool HaveCoins(const uint256 &txid) const;\n-    uint256 GetBestBlock() const;\n-    void SetBestBlock(const uint256 &hashBlock);\n-    bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock);\n-\n-    /**\n-     * Return a pointer to CCoins in the cache, or NULL if not found. This is\n-     * more efficient than GetCoins. Modifications to other cache entries are\n-     * allowed while accessing the returned pointer.\n-     */\n-    virtual const CCoins* AccessCoins(const uint256 &txid) const;\n-\n-    /**\n-     * Return a modifiable reference to a CCoins. If no entry with the given\n-     * txid exists, a new one is created. Simultaneous modifications are not\n-     * allowed.\n-     */\n-    CCoinsModifier ModifyCoins(const uint256 &txid);\n-\n-    /**\n-     * Push the modifications applied to this cache to its base.\n-     * Failure to call this method before destruction will cause the changes to be forgotten.\n-     * If false is returned, the state of this cache (and its backing view) will be undefined.\n-     */\n-    bool Flush();\n-\n-    //! Calculate the size of the cache (in number of transactions)\n-    unsigned int GetCacheSize() const;\n-\n-    friend class CCoinsModifier;\n-\n-private:\n-    CCoinsMap::iterator FetchCoins(const uint256 &txid);\n-    CCoinsMap::const_iterator FetchCoins(const uint256 &txid) const;\n-\n-    /**\n-     * By making the copy constructor private, we prevent accidentally using it when one intends to create a cache on top of a base cache.\n-     */\n-    CCoinsViewCache(const CCoinsViewCache &);\n-};\n-\n #endif // BITCOIN_COINS_H"
      },
      {
        "sha": "57ea550f71b73337900c2cdaf7055c10fa95ea41",
        "filename": "src/coinscache.cpp",
        "status": "added",
        "additions": 145,
        "deletions": 0,
        "changes": 145,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/613b062a25105b58fdbdb5c1022e0ab045e124b6/src/coinscache.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/613b062a25105b58fdbdb5c1022e0ab045e124b6/src/coinscache.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coinscache.cpp?ref=613b062a25105b58fdbdb5c1022e0ab045e124b6",
        "patch": "@@ -0,0 +1,145 @@\n+// Copyright (c) 2012-2014 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"coinscache.h\"\n+\n+CCoinsViewCache::CCoinsViewCache(CCoinsView* baseIn) : CCoinsViewEfficient(baseIn), hasModifier(false) { }\n+\n+CCoinsViewCache::~CCoinsViewCache()\n+{\n+    assert(!hasModifier);\n+}\n+\n+CCoinsMap::const_iterator CCoinsViewCache::FetchCoins(const uint256 &txid) const {\n+    CCoinsMap::iterator it = cacheCoins.find(txid);\n+    if (it != cacheCoins.end())\n+        return it;\n+    CCoins tmp;\n+    if (!base->GetCoins(txid, tmp))\n+        return cacheCoins.end();\n+    CCoinsMap::iterator ret = cacheCoins.insert(std::make_pair(txid, CCoinsCacheEntry())).first;\n+    tmp.swap(ret->second.coins);\n+    if (ret->second.coins.IsPruned()) {\n+        // The parent only has an empty entry for this txid; we can consider our\n+        // version as fresh.\n+        ret->second.flags = CCoinsCacheEntry::FRESH;\n+    }\n+    return ret;\n+}\n+\n+bool CCoinsViewCache::GetCoins(const uint256 &txid, CCoins &coins) const {\n+    CCoinsMap::const_iterator it = FetchCoins(txid);\n+    if (it != cacheCoins.end()) {\n+        coins = it->second.coins;\n+        return true;\n+    }\n+    return false;\n+}\n+\n+CCoinsModifier CCoinsViewCache::ModifyCoins(const uint256 &txid) {\n+    assert(!hasModifier);\n+    std::pair<CCoinsMap::iterator, bool> ret = cacheCoins.insert(std::make_pair(txid, CCoinsCacheEntry()));\n+    if (ret.second) {\n+        if (!base->GetCoins(txid, ret.first->second.coins)) {\n+            // The parent view does not have this entry; mark it as fresh.\n+            ret.first->second.coins.Clear();\n+            ret.first->second.flags = CCoinsCacheEntry::FRESH;\n+        } else if (ret.first->second.coins.IsPruned()) {\n+            // The parent view only has a pruned entry for this; mark it as fresh.\n+            ret.first->second.flags = CCoinsCacheEntry::FRESH;\n+        }\n+    }\n+    // Assume that whenever ModifyCoins is called, the entry will be modified.\n+    ret.first->second.flags |= CCoinsCacheEntry::DIRTY;\n+    return CCoinsModifier(*this, ret.first);\n+}\n+\n+const CCoins* CCoinsViewCache::AccessCoins(const uint256 &txid) const {\n+    CCoinsMap::const_iterator it = FetchCoins(txid);\n+    if (it == cacheCoins.end()) {\n+        return NULL;\n+    } else {\n+        return &it->second.coins;\n+    }\n+}\n+\n+bool CCoinsViewCache::HaveCoins(const uint256 &txid) const {\n+    CCoinsMap::const_iterator it = FetchCoins(txid);\n+    // We're using vtx.empty() instead of IsPruned here for performance reasons,\n+    // as we only care about the case where a transaction was replaced entirely\n+    // in a reorganization (which wipes vout entirely, as opposed to spending\n+    // which just cleans individual outputs).\n+    return (it != cacheCoins.end() && !it->second.coins.vout.empty());\n+}\n+\n+uint256 CCoinsViewCache::GetBestBlock() const {\n+    if (hashBlock.IsNull())\n+        hashBlock = base->GetBestBlock();\n+    return hashBlock;\n+}\n+\n+void CCoinsViewCache::SetBestBlock(const uint256 &hashBlockIn) {\n+    hashBlock = hashBlockIn;\n+}\n+\n+bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn) {\n+    assert(!hasModifier);\n+    for (CCoinsMap::iterator it = mapCoins.begin(); it != mapCoins.end();) {\n+        if (it->second.flags & CCoinsCacheEntry::DIRTY) { // Ignore non-dirty entries (optimization).\n+            CCoinsMap::iterator itUs = cacheCoins.find(it->first);\n+            if (itUs == cacheCoins.end()) {\n+                if (!it->second.coins.IsPruned()) {\n+                    // The parent cache does not have an entry, while the child\n+                    // cache does have (a non-pruned) one. Move the data up, and\n+                    // mark it as fresh (if the grandparent did have it, we\n+                    // would have pulled it in at first GetCoins).\n+                    assert(it->second.flags & CCoinsCacheEntry::FRESH);\n+                    CCoinsCacheEntry& entry = cacheCoins[it->first];\n+                    entry.coins.swap(it->second.coins);\n+                    entry.flags = CCoinsCacheEntry::DIRTY | CCoinsCacheEntry::FRESH;\n+                }\n+            } else {\n+                if ((itUs->second.flags & CCoinsCacheEntry::FRESH) && it->second.coins.IsPruned()) {\n+                    // The grandparent does not have an entry, and the child is\n+                    // modified and being pruned. This means we can just delete\n+                    // it from the parent.\n+                    cacheCoins.erase(itUs);\n+                } else {\n+                    // A normal modification.\n+                    itUs->second.coins.swap(it->second.coins);\n+                    itUs->second.flags |= CCoinsCacheEntry::DIRTY;\n+                }\n+            }\n+        }\n+        CCoinsMap::iterator itOld = it++;\n+        mapCoins.erase(itOld);\n+    }\n+    hashBlock = hashBlockIn;\n+    return true;\n+}\n+\n+bool CCoinsViewCache::Flush() {\n+    bool fOk = base->BatchWrite(cacheCoins, hashBlock);\n+    cacheCoins.clear();\n+    return fOk;\n+}\n+\n+unsigned int CCoinsViewCache::GetCacheSize() const {\n+    return cacheCoins.size();\n+}\n+\n+CCoinsModifier::CCoinsModifier(CCoinsViewCache& cache_, CCoinsMap::iterator it_) : cache(cache_), it(it_) {\n+    assert(!cache.hasModifier);\n+    cache.hasModifier = true;\n+}\n+\n+CCoinsModifier::~CCoinsModifier()\n+{\n+    assert(cache.hasModifier);\n+    cache.hasModifier = false;\n+    it->second.coins.Cleanup();\n+    if ((it->second.flags & CCoinsCacheEntry::FRESH) && it->second.coins.IsPruned()) {\n+        cache.cacheCoins.erase(it);\n+    }\n+}"
      },
      {
        "sha": "94ddd5b12272045aa524d44ea8268c62e9eeefcb",
        "filename": "src/coinscache.h",
        "status": "added",
        "additions": 93,
        "deletions": 0,
        "changes": 93,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/613b062a25105b58fdbdb5c1022e0ab045e124b6/src/coinscache.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/613b062a25105b58fdbdb5c1022e0ab045e124b6/src/coinscache.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coinscache.h?ref=613b062a25105b58fdbdb5c1022e0ab045e124b6",
        "patch": "@@ -0,0 +1,93 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COINSCACHE_H\n+#define BITCOIN_COINSCACHE_H\n+\n+#include \"coins.h\"\n+\n+class CCoinsViewCache;\n+\n+/** \n+ * A reference to a mutable cache entry. Encapsulating it allows us to run\n+ *  cleanup code after the modification is finished, and keeping track of\n+ *  concurrent modifications. \n+ */\n+class CCoinsModifier\n+{\n+private:\n+    CCoinsViewCache& cache;\n+    CCoinsMap::iterator it;\n+    CCoinsModifier(CCoinsViewCache& cache_, CCoinsMap::iterator it_);\n+\n+public:\n+    CCoins* operator->() { return &it->second.coins; }\n+    CCoins& operator*() { return it->second.coins; }\n+    ~CCoinsModifier();\n+    friend class CCoinsViewCache;\n+};\n+\n+/** CCoinsView that adds a memory cache for transactions to another CCoinsView */\n+class CCoinsViewCache : public CCoinsViewEfficient\n+{\n+protected:\n+    /* Whether this cache has an active modifier. */\n+    bool hasModifier;\n+\n+    /**\n+     * Make mutable so that we can \"fill the cache\" even from Get-methods\n+     * declared as \"const\".  \n+     */\n+    mutable uint256 hashBlock;\n+    mutable CCoinsMap cacheCoins;\n+\n+public:\n+    CCoinsViewCache(CCoinsView *baseIn);\n+    virtual ~CCoinsViewCache();\n+\n+    // Standard CCoinsView methods\n+    bool GetCoins(const uint256 &txid, CCoins &coins) const;\n+    bool HaveCoins(const uint256 &txid) const;\n+    uint256 GetBestBlock() const;\n+    void SetBestBlock(const uint256 &hashBlock);\n+    bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock);\n+\n+    /**\n+     * Return a pointer to CCoins in the cache, or NULL if not found. This is\n+     * more efficient than GetCoins. Modifications to other cache entries are\n+     * allowed while accessing the returned pointer.\n+     */\n+    virtual const CCoins* AccessCoins(const uint256 &txid) const;\n+\n+    /**\n+     * Return a modifiable reference to a CCoins. If no entry with the given\n+     * txid exists, a new one is created. Simultaneous modifications are not\n+     * allowed.\n+     */\n+    CCoinsModifier ModifyCoins(const uint256 &txid);\n+\n+    /**\n+     * Push the modifications applied to this cache to its base.\n+     * Failure to call this method before destruction will cause the changes to be forgotten.\n+     * If false is returned, the state of this cache (and its backing view) will be undefined.\n+     */\n+    bool Flush();\n+\n+    //! Calculate the size of the cache (in number of transactions)\n+    unsigned int GetCacheSize() const;\n+\n+    friend class CCoinsModifier;\n+\n+private:\n+    CCoinsMap::iterator FetchCoins(const uint256 &txid);\n+    CCoinsMap::const_iterator FetchCoins(const uint256 &txid) const;\n+\n+    /**\n+     * By making the copy constructor private, we prevent accidentally using it when one intends to create a cache on top of a base cache.\n+     */\n+    CCoinsViewCache(const CCoinsViewCache &);\n+};\n+\n+#endif // BITCOIN_COINSCACHE_H"
      },
      {
        "sha": "35b98e89c51faf04fb38fc6e8c4983ed7206e76f",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/613b062a25105b58fdbdb5c1022e0ab045e124b6/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/613b062a25105b58fdbdb5c1022e0ab045e124b6/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=613b062a25105b58fdbdb5c1022e0ab045e124b6",
        "patch": "@@ -12,6 +12,8 @@\n #include \"addrman.h\"\n #include \"amount.h\"\n #include \"checkpoints.h\"\n+#include \"coins.h\"\n+#include \"coinscache.h\"\n #include \"compat/sanity.h\"\n #include \"key.h\"\n #include \"main.h\""
      },
      {
        "sha": "a613042bcb30341fc41bc838b969934a6d1a2ebd",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/613b062a25105b58fdbdb5c1022e0ab045e124b6/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/613b062a25105b58fdbdb5c1022e0ab045e124b6/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=613b062a25105b58fdbdb5c1022e0ab045e124b6",
        "patch": "@@ -11,6 +11,8 @@\n #include \"chainparams.h\"\n #include \"checkpoints.h\"\n #include \"checkqueue.h\"\n+#include \"coins.h\"\n+#include \"coinscache.h\"\n #include \"init.h\"\n #include \"merkleblock.h\"\n #include \"net.h\""
      },
      {
        "sha": "8366e900c24b238f8e274ccc7c2bcd5597732028",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/613b062a25105b58fdbdb5c1022e0ab045e124b6/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/613b062a25105b58fdbdb5c1022e0ab045e124b6/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=613b062a25105b58fdbdb5c1022e0ab045e124b6",
        "patch": "@@ -13,10 +13,9 @@\n #include \"amount.h\"\n #include \"chain.h\"\n #include \"chainparams.h\"\n-#include \"coins.h\"\n+#include \"net.h\"\n #include \"primitives/block.h\"\n #include \"primitives/transaction.h\"\n-#include \"net.h\"\n #include \"script/script.h\"\n #include \"script/sigcache.h\"\n #include \"script/standard.h\""
      },
      {
        "sha": "02cf4715128b84be1d936463a136db696ca14754",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/613b062a25105b58fdbdb5c1022e0ab045e124b6/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/613b062a25105b58fdbdb5c1022e0ab045e124b6/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=613b062a25105b58fdbdb5c1022e0ab045e124b6",
        "patch": "@@ -6,11 +6,12 @@\n #include \"miner.h\"\n \n #include \"amount.h\"\n-#include \"primitives/transaction.h\"\n+#include \"coinscache.h\"\n #include \"hash.h\"\n #include \"main.h\"\n #include \"net.h\"\n #include \"pow.h\"\n+#include \"primitives/transaction.h\"\n #include \"timedata.h\"\n #include \"util.h\"\n #include \"utilmoneystr.h\""
      },
      {
        "sha": "cd9ca1f6e02d9a7c6aac446448d5f20ba97abec9",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/613b062a25105b58fdbdb5c1022e0ab045e124b6/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/613b062a25105b58fdbdb5c1022e0ab045e124b6/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=613b062a25105b58fdbdb5c1022e0ab045e124b6",
        "patch": "@@ -10,12 +10,13 @@\n #include \"transactionrecord.h\"\n \n #include \"base58.h\"\n-#include \"wallet/db.h\"\n+#include \"coinscache.h\"\n #include \"main.h\"\n #include \"script/script.h\"\n #include \"timedata.h\"\n #include \"ui_interface.h\"\n #include \"util.h\"\n+#include \"wallet/db.h\"\n #include \"wallet/wallet.h\"\n \n #include <stdint.h>"
      },
      {
        "sha": "7f0b87178c7a9bc0356741cdcb6781d94da38c47",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/613b062a25105b58fdbdb5c1022e0ab045e124b6/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/613b062a25105b58fdbdb5c1022e0ab045e124b6/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=613b062a25105b58fdbdb5c1022e0ab045e124b6",
        "patch": "@@ -4,6 +4,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"checkpoints.h\"\n+#include \"coinscache.h\"\n #include \"main.h\"\n #include \"rpcserver.h\"\n #include \"sync.h\""
      },
      {
        "sha": "bbda8765d2440ec4d523cf70e872171a0924bd5b",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/613b062a25105b58fdbdb5c1022e0ab045e124b6/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/613b062a25105b58fdbdb5c1022e0ab045e124b6/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=613b062a25105b58fdbdb5c1022e0ab045e124b6",
        "patch": "@@ -4,12 +4,14 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"base58.h\"\n-#include \"primitives/transaction.h\"\n+#include \"coins.h\"\n+#include \"coinscache.h\"\n #include \"core_io.h\"\n #include \"init.h\"\n #include \"keystore.h\"\n #include \"main.h\"\n #include \"net.h\"\n+#include \"primitives/transaction.h\"\n #include \"rpcserver.h\"\n #include \"script/script.h\"\n #include \"script/sign.h\""
      },
      {
        "sha": "98735edc90be70e30965da77d48297f7d5b85ab0",
        "filename": "src/test/coins_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/613b062a25105b58fdbdb5c1022e0ab045e124b6/src/test/coins_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/613b062a25105b58fdbdb5c1022e0ab045e124b6/src/test/coins_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coins_tests.cpp?ref=613b062a25105b58fdbdb5c1022e0ab045e124b6",
        "patch": "@@ -3,6 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"coins.h\"\n+#include \"coinscache.h\"\n #include \"random.h\"\n #include \"uint256.h\"\n #include \"test/test_bitcoin.h\""
      },
      {
        "sha": "dbfe366fca4eeb846f22c799c47d55b73291023e",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/613b062a25105b58fdbdb5c1022e0ab045e124b6/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/613b062a25105b58fdbdb5c1022e0ab045e124b6/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=613b062a25105b58fdbdb5c1022e0ab045e124b6",
        "patch": "@@ -2,6 +2,8 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"coins.h\"\n+#include \"coinscache.h\"\n #include \"key.h\"\n #include \"keystore.h\"\n #include \"main.h\""
      },
      {
        "sha": "a8a80381f3f700fdb95e95df82d274b87262d720",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/613b062a25105b58fdbdb5c1022e0ab045e124b6/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/613b062a25105b58fdbdb5c1022e0ab045e124b6/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=613b062a25105b58fdbdb5c1022e0ab045e124b6",
        "patch": "@@ -6,6 +6,7 @@\n \n #include \"test_bitcoin.h\"\n \n+#include \"coinscache.h\"\n #include \"main.h\"\n #include \"random.h\"\n #include \"txdb.h\""
      },
      {
        "sha": "b446d0de027c452e49e04d7339f705abe43ef390",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/613b062a25105b58fdbdb5c1022e0ab045e124b6/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/613b062a25105b58fdbdb5c1022e0ab045e124b6/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=613b062a25105b58fdbdb5c1022e0ab045e124b6",
        "patch": "@@ -7,12 +7,14 @@\n #include \"test/test_bitcoin.h\"\n \n #include \"clientversion.h\"\n+#include \"coins.h\"\n+#include \"coinscache.h\"\n+#include \"core_io.h\"\n #include \"key.h\"\n #include \"keystore.h\"\n #include \"main.h\"\n #include \"script/script.h\"\n #include \"script/script_error.h\"\n-#include \"core_io.h\"\n \n #include <map>\n #include <string>"
      },
      {
        "sha": "1a8eb291c016486fb3079d494869761c0e20e87b",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/613b062a25105b58fdbdb5c1022e0ab045e124b6/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/613b062a25105b58fdbdb5c1022e0ab045e124b6/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=613b062a25105b58fdbdb5c1022e0ab045e124b6",
        "patch": "@@ -6,6 +6,8 @@\n #include \"txmempool.h\"\n \n #include \"clientversion.h\"\n+#include \"coins.h\"\n+#include \"coinscache.h\"\n #include \"main.h\"\n #include \"streams.h\"\n #include \"util.h\""
      },
      {
        "sha": "cc3d1127430055e3a72440d9d9f74458b393ba7c",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/613b062a25105b58fdbdb5c1022e0ab045e124b6/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/613b062a25105b58fdbdb5c1022e0ab045e124b6/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=613b062a25105b58fdbdb5c1022e0ab045e124b6",
        "patch": "@@ -14,6 +14,7 @@\n #include \"sync.h\"\n \n class CAutoFile;\n+class CCoinsViewCache;\n \n inline double AllowFreeThreshold()\n {"
      }
    ]
  }
]