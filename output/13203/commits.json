[
  {
    "sha": "b04f1176ffc3d82c78cdc758621d12496e37d5f0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMDRmMTE3NmZmYzNkODJjNzhjZGM3NTg2MjFkMTI0OTZlMzdkNWYw",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2018-06-11T15:24:19Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2018-06-11T16:27:37Z"
      },
      "message": "Add POWER8 vector impl for 4-way SHA256\n\nThis speeds up 4-way SHA256 by about 3.75x over the C impl.",
      "tree": {
        "sha": "b5aaf429316772a17ada9a675484f379510691e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b5aaf429316772a17ada9a675484f379510691e3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b04f1176ffc3d82c78cdc758621d12496e37d5f0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b04f1176ffc3d82c78cdc758621d12496e37d5f0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b04f1176ffc3d82c78cdc758621d12496e37d5f0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b04f1176ffc3d82c78cdc758621d12496e37d5f0/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "43ae5ee9e4c274c402ebb9a73795593a6c18c157",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/43ae5ee9e4c274c402ebb9a73795593a6c18c157",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/43ae5ee9e4c274c402ebb9a73795593a6c18c157"
      }
    ],
    "stats": {
      "total": 445,
      "additions": 445,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ab96a310d23f0d3e02c7d20c024c8f585847122f",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b04f1176ffc3d82c78cdc758621d12496e37d5f0/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b04f1176ffc3d82c78cdc758621d12496e37d5f0/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=b04f1176ffc3d82c78cdc758621d12496e37d5f0",
        "patch": "@@ -314,6 +314,7 @@ fi\n AX_CHECK_COMPILE_FLAG([-msse4.2],[[SSE42_CXXFLAGS=\"-msse4.2\"]],,[[$CXXFLAG_WERROR]])\n AX_CHECK_COMPILE_FLAG([-msse4.1],[[SSE41_CXXFLAGS=\"-msse4.1\"]],,[[$CXXFLAG_WERROR]])\n AX_CHECK_COMPILE_FLAG([-mavx -mavx2],[[AVX2_CXXFLAGS=\"-mavx -mavx2\"]],,[[$CXXFLAG_WERROR]])\n+AX_CHECK_COMPILE_FLAG([-mpower8-vector],[[POWER8_CXXFLAGS=\"-mpower8-vector\"]],,[[$CXXFLAG_WERROR]])\n \n TEMP_CXXFLAGS=\"$CXXFLAGS\"\n CXXFLAGS=\"$CXXFLAGS $SSE42_CXXFLAGS\"\n@@ -375,6 +376,22 @@ AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n )\n CXXFLAGS=\"$TEMP_CXXFLAGS\"\n \n+TEMP_CXXFLAGS=\"$CXXFLAGS\"\n+CXXFLAGS=\"$TEMP_CXXFLAGS $POWER8_CXXFLAGS\"\n+AC_MSG_CHECKING(for POWER8 compiler support)\n+AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n+    #include <altivec.h>\n+    #include <stdint.h>\n+  ]], [[\n+    unsigned char src[16];\n+    __builtin_crypto_vshasigmaw((__vector uint32_t)vec_vsx_ld(0, src), 1, 0xf);\n+    return 0;\n+  ]])],\n+  [ AC_MSG_RESULT(yes); enable_power8=yes; AC_DEFINE(ENABLE_POWER8, 1, [Define if compiler supports POWER8 instructions.]) ],\n+  [ AC_MSG_RESULT(no) ]\n+)\n+CXXFLAGS=\"$TEMP_CXXFLAGS\"\n+\n CPPFLAGS=\"$CPPFLAGS -DHAVE_BUILD_INFO -D__STDC_FORMAT_MACROS\"\n \n AC_ARG_WITH([utils],\n@@ -1295,6 +1312,7 @@ AM_CONDITIONAL([HARDEN],[test x$use_hardening = xyes])\n AM_CONDITIONAL([ENABLE_HWCRC32],[test x$enable_hwcrc32 = xyes])\n AM_CONDITIONAL([ENABLE_SSE41],[test x$enable_sse41 = xyes])\n AM_CONDITIONAL([ENABLE_AVX2],[test x$enable_avx2 = xyes])\n+AM_CONDITIONAL([ENABLE_POWER8], [test x$enable_power8 = xyes])\n AM_CONDITIONAL([USE_ASM],[test x$use_asm = xyes])\n \n AC_DEFINE(CLIENT_VERSION_MAJOR, _CLIENT_VERSION_MAJOR, [Major version])\n@@ -1339,6 +1357,7 @@ AC_SUBST(SANITIZER_LDFLAGS)\n AC_SUBST(SSE42_CXXFLAGS)\n AC_SUBST(SSE41_CXXFLAGS)\n AC_SUBST(AVX2_CXXFLAGS)\n+AC_SUBST(POWER8_CXXFLAGS)\n AC_SUBST(LIBTOOL_APP_LDFLAGS)\n AC_SUBST(USE_UPNP)\n AC_SUBST(USE_QRCODE)"
      },
      {
        "sha": "0f0a80959afccf14d7029f6c4af965c25d6199b0",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b04f1176ffc3d82c78cdc758621d12496e37d5f0/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b04f1176ffc3d82c78cdc758621d12496e37d5f0/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=b04f1176ffc3d82c78cdc758621d12496e37d5f0",
        "patch": "@@ -52,6 +52,10 @@ if ENABLE_AVX2\n LIBBITCOIN_CRYPTO_AVX2 = crypto/libbitcoin_crypto_avx2.a\n LIBBITCOIN_CRYPTO += $(LIBBITCOIN_CRYPTO_AVX2)\n endif\n+if ENABLE_POWER8\n+LIBBITCOIN_CRYPTO_POWER8 = crypto/libbitcoin_crypto_power8.a\n+LIBBITCOIN_CRYPTO += $(LIBBITCOIN_CRYPTO_POWER8)\n+endif\n \n $(LIBSECP256K1): $(wildcard secp256k1/src/*) $(wildcard secp256k1/include/*)\n \t$(AM_V_at)$(MAKE) $(AM_MAKEFLAGS) -C $(@D) $(@F)\n@@ -313,6 +317,12 @@ crypto_libbitcoin_crypto_avx2_a_CXXFLAGS += $(AVX2_CXXFLAGS)\n crypto_libbitcoin_crypto_avx2_a_CPPFLAGS += -DENABLE_AVX2\n crypto_libbitcoin_crypto_avx2_a_SOURCES = crypto/sha256_avx2.cpp\n \n+crypto_libbitcoin_crypto_power8_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+crypto_libbitcoin_crypto_power8_a_CPPFLAGS = $(AM_CPPFLAGS)\n+crypto_libbitcoin_crypto_power8_a_CXXFLAGS += $(POWER8_CXXFLAGS)\n+crypto_libbitcoin_crypto_power8_a_CPPFLAGS += -DENABLE_POWER8\n+crypto_libbitcoin_crypto_power8_a_SOURCES = crypto/sha256_power8.cpp\n+\n # consensus: shared between all executables that validate any consensus rules.\n libbitcoin_consensus_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n libbitcoin_consensus_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)"
      },
      {
        "sha": "ce9bae1d3da9d7bf9dd5e7e469cf0357ae39a147",
        "filename": "src/crypto/sha256.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b04f1176ffc3d82c78cdc758621d12496e37d5f0/src/crypto/sha256.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b04f1176ffc3d82c78cdc758621d12496e37d5f0/src/crypto/sha256.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/sha256.cpp?ref=b04f1176ffc3d82c78cdc758621d12496e37d5f0",
        "patch": "@@ -29,6 +29,15 @@ namespace sha256d64_avx2\n void Transform_8way(unsigned char* out, const unsigned char* in);\n }\n \n+#if defined(__linux__) && defined(ENABLE_POWER8)\n+#include <sys/auxv.h>\n+namespace sha256_power8\n+{\n+void Transform_4way(unsigned char* out, const unsigned char* in);\n+}\n+#endif\n+\n+\n // Internal implementation code.\n namespace\n {\n@@ -511,6 +520,12 @@ std::string SHA256AutoDetect()\n         ret = \"sse4\";\n #endif\n     }\n+#elif (defined(__linux__)) && defined(ENABLE_POWER8)\n+    if (getauxval(AT_HWCAP2) & 0x02000000) {\n+        TransformD64_4way = sha256_power8::Transform_4way;\n+        assert(SelfTest(Transform));\n+        return \"power8(4way),C(1way)\";\n+    }\n #endif\n \n     assert(SelfTest(Transform));"
      },
      {
        "sha": "c0e0f8bdba0ab9afea87660328d56464f0e067a4",
        "filename": "src/crypto/sha256_power8.cpp",
        "status": "added",
        "additions": 401,
        "deletions": 0,
        "changes": 401,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b04f1176ffc3d82c78cdc758621d12496e37d5f0/src/crypto/sha256_power8.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b04f1176ffc3d82c78cdc758621d12496e37d5f0/src/crypto/sha256_power8.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/sha256_power8.cpp?ref=b04f1176ffc3d82c78cdc758621d12496e37d5f0",
        "patch": "@@ -0,0 +1,401 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+//\n+// This is a translation to GCC extended asm syntax from YASM code by Intel\n+// (available at the bottom of this file).\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <stdint.h>\n+\n+#if defined(HAVE_ENDIAN_H)\n+#include <endian.h>\n+#elif defined(HAVE_SYS_ENDIAN_H)\n+#include <sys/endian.h>\n+#endif\n+\n+#include <altivec.h>\n+\n+namespace sha256_power8\n+{\n+\n+typedef vector uint32_t uint32x4_p8;\n+typedef vector uint8_t uint8x16_p8;\n+\n+//! Gets the first uin32_t from a, b, c, d, converts from BE to host endian, and returns them concatenated\n+template<uint8_t OFFS> static inline uint32x4_p8 pack_bytes\n+        (const uint8x16_p8 a, const uint8x16_p8 b, const uint8x16_p8 c, const uint8x16_p8 d) {\n+    uint8x16_p8 perm1 = {0+OFFS,1+OFFS,2+OFFS,3+OFFS, 16+OFFS,17+OFFS,18+OFFS,19+OFFS, 0,0,0,0, 0,0,0,0};\n+#ifdef WORDS_BIGENDIAN\n+    uint8x16_p8 perm2 = {0,1,2,3, 4,5,6,7, 16,17,18,19, 20,21,22,23};\n+#else\n+    uint8x16_p8 perm2 = {3,2,1,0, 7,6,5,4, 19,18,17,16, 23,22,21,20};\n+#endif\n+    return (uint32x4_p8)vec_perm(vec_perm((uint8x16_p8)a, (uint8x16_p8)b, perm1), vec_perm((uint8x16_p8)c, (uint8x16_p8)d, perm1), perm2);\n+}\n+\n+static const __attribute__((aligned(16))) uint32_t K[] = {\n+    0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,\n+    0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,\n+    0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,\n+    0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,\n+    0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,\n+    0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,\n+    0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,\n+    0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,\n+    0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,\n+    0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,\n+    0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,\n+    0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,\n+    0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,\n+    0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,\n+    0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,\n+    0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2\n+};\n+\n+#define Ch(x, y, z) vec_sel((z), (y), (x))\n+#define Maj(x, y, z) vec_sel((y), (z), vec_xor((x), (y)))\n+\n+#define KRound(a, b, c, d, e, f, g, h, k, w) \\\n+    do { \\\n+        uint32x4_p8 t1 = h + Ch(e, f, g) + __builtin_crypto_vshasigmaw(e, 1, 0xf) + k + w; \\\n+        uint32x4_p8 t2 = Maj(a, b, c) + __builtin_crypto_vshasigmaw(a, 1, 0); \\\n+        d += t1; \\\n+        h = t1 + t2; \\\n+    } while(false);\n+\n+#define Round(a, b, c, d, e, f, g, h, k, w) \\\n+    do { \\\n+        uint32x4_p8 kay = {k, k, k, k}; \\\n+        uint32x4_p8 t1 = h + Ch(e, f, g) + __builtin_crypto_vshasigmaw(e, 1, 0xf) + kay + w; \\\n+        uint32x4_p8 t2 = Maj(a, b, c) + __builtin_crypto_vshasigmaw(a, 1, 0); \\\n+        d += t1; \\\n+        h = t1 + t2; \\\n+    } while(false);\n+\n+#define KRound2(a, b, c, d, e, f, g, h, k) \\\n+    do { \\\n+        uint32x4_p8 t1 = h + Ch(e, f, g) + __builtin_crypto_vshasigmaw(e, 1, 0xf) + k; \\\n+        uint32x4_p8 t2 = Maj(a, b, c) + __builtin_crypto_vshasigmaw(a, 1, 0); \\\n+        d += t1; \\\n+        h = t1 + t2; \\\n+    } while(false);\n+\n+#define Round2(a, b, c, d, e, f, g, h, k) \\\n+    do { \\\n+        uint32x4_p8 kay = {k, k, k, k}; \\\n+        uint32x4_p8 t1 = h + Ch(e, f, g) + __builtin_crypto_vshasigmaw(e, 1, 0xf) + kay; \\\n+        uint32x4_p8 t2 = Maj(a, b, c) + __builtin_crypto_vshasigmaw(a, 1, 0); \\\n+        d += t1; \\\n+        h = t1 + t2; \\\n+    } while(false);\n+\n+#define sigma0(w) __builtin_crypto_vshasigmaw(w, 0, 0)\n+#define sigma1(w) __builtin_crypto_vshasigmaw(w, 0, 0xf)\n+\n+/** Perform a 4 double-SHA-256 64-byte updates at once*/\n+void Transform_4way(unsigned char* out, const unsigned char* in)\n+{\n+    uint32x4_p8 a = {0x6a09e667ul, 0x6a09e667ul, 0x6a09e667ul, 0x6a09e667ul};\n+    uint32x4_p8 b = {0xbb67ae85ul, 0xbb67ae85ul, 0xbb67ae85ul, 0xbb67ae85ul};\n+    uint32x4_p8 c = {0x3c6ef372ul, 0x3c6ef372ul, 0x3c6ef372ul, 0x3c6ef372ul};\n+    uint32x4_p8 d = {0xa54ff53aul, 0xa54ff53aul, 0xa54ff53aul, 0xa54ff53aul};\n+    uint32x4_p8 e = {0x510e527ful, 0x510e527ful, 0x510e527ful, 0x510e527ful};\n+    uint32x4_p8 f = {0x9b05688cul, 0x9b05688cul, 0x9b05688cul, 0x9b05688cul};\n+    uint32x4_p8 g = {0x1f83d9abul, 0x1f83d9abul, 0x1f83d9abul, 0x1f83d9abul};\n+    uint32x4_p8 h = {0x5be0cd19ul, 0x5be0cd19ul, 0x5be0cd19ul, 0x5be0cd19ul};\n+\n+    uint8x16_p8 w0123_0 = vec_vsx_ld(0 *16 + 0  , in);\n+    uint8x16_p8 w4567_0 = vec_vsx_ld(1 *16 + 0  , in);\n+    uint8x16_p8 w8901_0 = vec_vsx_ld(2 *16 + 0  , in);\n+    uint8x16_p8 w2345_0 = vec_vsx_ld(3 *16 + 0  , in);\n+\n+    uint8x16_p8 w0123_1 = vec_vsx_ld(0 *16 + 64 , in);\n+    uint8x16_p8 w4567_1 = vec_vsx_ld(1 *16 + 64 , in);\n+    uint8x16_p8 w8901_1 = vec_vsx_ld(2 *16 + 64 , in);\n+    uint8x16_p8 w2345_1 = vec_vsx_ld(3 *16 + 64 , in);\n+\n+    uint8x16_p8 w0123_2 = vec_vsx_ld(0 *16 + 128, in);\n+    uint8x16_p8 w4567_2 = vec_vsx_ld(1 *16 + 128, in);\n+    uint8x16_p8 w8901_2 = vec_vsx_ld(2 *16 + 128, in);\n+    uint8x16_p8 w2345_2 = vec_vsx_ld(3 *16 + 128, in);\n+\n+    uint8x16_p8 w0123_3 = vec_vsx_ld(0 *16 + 192, in);\n+    uint8x16_p8 w4567_3 = vec_vsx_ld(1 *16 + 192, in);\n+    uint8x16_p8 w8901_3 = vec_vsx_ld(2 *16 + 192, in);\n+    uint8x16_p8 w2345_3 = vec_vsx_ld(3 *16 + 192, in);\n+\n+    uint32x4_p8 w0  = pack_bytes<0 >(w0123_0, w0123_1, w0123_2, w0123_3);\n+    uint32x4_p8 w1  = pack_bytes<4 >(w0123_0, w0123_1, w0123_2, w0123_3);\n+    uint32x4_p8 w2  = pack_bytes<8 >(w0123_0, w0123_1, w0123_2, w0123_3);\n+    uint32x4_p8 w3  = pack_bytes<12>(w0123_0, w0123_1, w0123_2, w0123_3);\n+\n+    uint32x4_p8 w4  = pack_bytes<0 >(w4567_0, w4567_1, w4567_2, w4567_3);\n+    uint32x4_p8 w5  = pack_bytes<4 >(w4567_0, w4567_1, w4567_2, w4567_3);\n+    uint32x4_p8 w6  = pack_bytes<8 >(w4567_0, w4567_1, w4567_2, w4567_3);\n+    uint32x4_p8 w7  = pack_bytes<12>(w4567_0, w4567_1, w4567_2, w4567_3);\n+\n+    uint32x4_p8 w8  = pack_bytes<0 >(w8901_0, w8901_1, w8901_2, w8901_3);\n+    uint32x4_p8 w9  = pack_bytes<4 >(w8901_0, w8901_1, w8901_2, w8901_3);\n+    uint32x4_p8 w10 = pack_bytes<8 >(w8901_0, w8901_1, w8901_2, w8901_3);\n+    uint32x4_p8 w11 = pack_bytes<12>(w8901_0, w8901_1, w8901_2, w8901_3);\n+\n+    uint32x4_p8 w12 = pack_bytes<0 >(w2345_0, w2345_1, w2345_2, w2345_3);\n+    uint32x4_p8 w13 = pack_bytes<4 >(w2345_0, w2345_1, w2345_2, w2345_3);\n+    uint32x4_p8 w14 = pack_bytes<8 >(w2345_0, w2345_1, w2345_2, w2345_3);\n+    uint32x4_p8 w15 = pack_bytes<12>(w2345_0, w2345_1, w2345_2, w2345_3);\n+\n+    uint32x4_p8 k = (uint32x4_p8)vec_ld(0, K);\n+    KRound(a, b, c, d, e, f, g, h, vec_splat(k, 0), w0);\n+    KRound(h, a, b, c, d, e, f, g, vec_splat(k, 1), w1);\n+    KRound(g, h, a, b, c, d, e, f, vec_splat(k, 2), w2);\n+    KRound(f, g, h, a, b, c, d, e, vec_splat(k, 3), w3);\n+    k = (uint32x4_p8)vec_ld(1*16, K);\n+    KRound(e, f, g, h, a, b, c, d, vec_splat(k, 0), w4);\n+    KRound(d, e, f, g, h, a, b, c, vec_splat(k, 1), w5);\n+    KRound(c, d, e, f, g, h, a, b, vec_splat(k, 2), w6);\n+    KRound(b, c, d, e, f, g, h, a, vec_splat(k, 3), w7);\n+    k = (uint32x4_p8)vec_ld(2*16, K);\n+    KRound(a, b, c, d, e, f, g, h, vec_splat(k, 0), w8);\n+    KRound(h, a, b, c, d, e, f, g, vec_splat(k, 1), w9);\n+    KRound(g, h, a, b, c, d, e, f, vec_splat(k, 2), w10);\n+    KRound(f, g, h, a, b, c, d, e, vec_splat(k, 3), w11);\n+    k = (uint32x4_p8)vec_ld(3*16, K);\n+    KRound(e, f, g, h, a, b, c, d, vec_splat(k, 0), w12);\n+    KRound(d, e, f, g, h, a, b, c, vec_splat(k, 1), w13);\n+    KRound(c, d, e, f, g, h, a, b, vec_splat(k, 2), w14);\n+    KRound(b, c, d, e, f, g, h, a, vec_splat(k, 3), w15);\n+\n+    for (int i = 0; i < 3; i++) {\n+        k = (uint32x4_p8)vec_ld((4+4*i)*16, K);\n+        KRound(a, b, c, d, e, f, g, h, vec_splat(k, 0), (w0 += sigma1(w14) + w9 + sigma0(w1)));\n+        KRound(h, a, b, c, d, e, f, g, vec_splat(k, 1), (w1 += sigma1(w15) + w10 + sigma0(w2)));\n+        KRound(g, h, a, b, c, d, e, f, vec_splat(k, 2), (w2 += sigma1(w0) + w11 + sigma0(w3)));\n+        KRound(f, g, h, a, b, c, d, e, vec_splat(k, 3), (w3 += sigma1(w1) + w12 + sigma0(w4)));\n+        k = (uint32x4_p8)vec_ld((5+4*i)*16, K);\n+        KRound(e, f, g, h, a, b, c, d, vec_splat(k, 0), (w4 += sigma1(w2) + w13 + sigma0(w5)));\n+        KRound(d, e, f, g, h, a, b, c, vec_splat(k, 1), (w5 += sigma1(w3) + w14 + sigma0(w6)));\n+        KRound(c, d, e, f, g, h, a, b, vec_splat(k, 2), (w6 += sigma1(w4) + w15 + sigma0(w7)));\n+        KRound(b, c, d, e, f, g, h, a, vec_splat(k, 3), (w7 += sigma1(w5) + w0 + sigma0(w8)));\n+        k = (uint32x4_p8)vec_ld((6+4*i)*16, K);\n+        KRound(a, b, c, d, e, f, g, h, vec_splat(k, 0), (w8 += sigma1(w6) + w1 + sigma0(w9)));\n+        KRound(h, a, b, c, d, e, f, g, vec_splat(k, 1), (w9 += sigma1(w7) + w2 + sigma0(w10)));\n+        KRound(g, h, a, b, c, d, e, f, vec_splat(k, 2), (w10 += sigma1(w8) + w3 + sigma0(w11)));\n+        KRound(f, g, h, a, b, c, d, e, vec_splat(k, 3), (w11 += sigma1(w9) + w4 + sigma0(w12)));\n+        k = (uint32x4_p8)vec_ld((7+4*i)*16, K);\n+        KRound(e, f, g, h, a, b, c, d, vec_splat(k, 0), (w12 += sigma1(w10) + w5 + sigma0(w13)));\n+        KRound(d, e, f, g, h, a, b, c, vec_splat(k, 1), (w13 += sigma1(w11) + w6 + sigma0(w14)));\n+        KRound(c, d, e, f, g, h, a, b, vec_splat(k, 2), (w14 += sigma1(w12) + w7 + sigma0(w15)));\n+        KRound(b, c, d, e, f, g, h, a, vec_splat(k, 3), (w15 += sigma1(w13) + w8 + sigma0(w0)));\n+    }\n+\n+    a += uint32x4_p8{0x6a09e667ul, 0x6a09e667ul, 0x6a09e667ul, 0x6a09e667ul};\n+    b += uint32x4_p8{0xbb67ae85ul, 0xbb67ae85ul, 0xbb67ae85ul, 0xbb67ae85ul};\n+    c += uint32x4_p8{0x3c6ef372ul, 0x3c6ef372ul, 0x3c6ef372ul, 0x3c6ef372ul};\n+    d += uint32x4_p8{0xa54ff53aul, 0xa54ff53aul, 0xa54ff53aul, 0xa54ff53aul};\n+    e += uint32x4_p8{0x510e527ful, 0x510e527ful, 0x510e527ful, 0x510e527ful};\n+    f += uint32x4_p8{0x9b05688cul, 0x9b05688cul, 0x9b05688cul, 0x9b05688cul};\n+    g += uint32x4_p8{0x1f83d9abul, 0x1f83d9abul, 0x1f83d9abul, 0x1f83d9abul};\n+    h += uint32x4_p8{0x5be0cd19ul, 0x5be0cd19ul, 0x5be0cd19ul, 0x5be0cd19ul};\n+\n+    uint32x4_p8 t0 = a;\n+    uint32x4_p8 t1 = b;\n+    uint32x4_p8 t2 = c;\n+    uint32x4_p8 t3 = d;\n+    uint32x4_p8 t4 = e;\n+    uint32x4_p8 t5 = f;\n+    uint32x4_p8 t6 = g;\n+    uint32x4_p8 t7 = h;\n+\n+    KRound2(a, b, c, d, e, f, g, h, 0xc28a2f98);\n+    KRound2(h, a, b, c, d, e, f, g, 0x71374491);\n+    KRound2(g, h, a, b, c, d, e, f, 0xb5c0fbcf);\n+    KRound2(f, g, h, a, b, c, d, e, 0xe9b5dba5);\n+    KRound2(e, f, g, h, a, b, c, d, 0x3956c25b);\n+    KRound2(d, e, f, g, h, a, b, c, 0x59f111f1);\n+    KRound2(c, d, e, f, g, h, a, b, 0x923f82a4);\n+    KRound2(b, c, d, e, f, g, h, a, 0xab1c5ed5);\n+    KRound2(a, b, c, d, e, f, g, h, 0xd807aa98);\n+    KRound2(h, a, b, c, d, e, f, g, 0x12835b01);\n+    KRound2(g, h, a, b, c, d, e, f, 0x243185be);\n+    KRound2(f, g, h, a, b, c, d, e, 0x550c7dc3);\n+    KRound2(e, f, g, h, a, b, c, d, 0x72be5d74);\n+    KRound2(d, e, f, g, h, a, b, c, 0x80deb1fe);\n+    KRound2(c, d, e, f, g, h, a, b, 0x9bdc06a7);\n+    KRound2(b, c, d, e, f, g, h, a, 0xc19bf374);\n+    KRound2(a, b, c, d, e, f, g, h, 0x649b69c1);\n+    KRound2(h, a, b, c, d, e, f, g, 0xf0fe4786);\n+    KRound2(g, h, a, b, c, d, e, f, 0x0fe1edc6);\n+    KRound2(f, g, h, a, b, c, d, e, 0x240cf254);\n+    KRound2(e, f, g, h, a, b, c, d, 0x4fe9346f);\n+    KRound2(d, e, f, g, h, a, b, c, 0x6cc984be);\n+    KRound2(c, d, e, f, g, h, a, b, 0x61b9411e);\n+    KRound2(b, c, d, e, f, g, h, a, 0x16f988fa);\n+    KRound2(a, b, c, d, e, f, g, h, 0xf2c65152);\n+    KRound2(h, a, b, c, d, e, f, g, 0xa88e5a6d);\n+    KRound2(g, h, a, b, c, d, e, f, 0xb019fc65);\n+    KRound2(f, g, h, a, b, c, d, e, 0xb9d99ec7);\n+    KRound2(e, f, g, h, a, b, c, d, 0x9a1231c3);\n+    KRound2(d, e, f, g, h, a, b, c, 0xe70eeaa0);\n+    KRound2(c, d, e, f, g, h, a, b, 0xfdb1232b);\n+    KRound2(b, c, d, e, f, g, h, a, 0xc7353eb0);\n+    KRound2(a, b, c, d, e, f, g, h, 0x3069bad5);\n+    KRound2(h, a, b, c, d, e, f, g, 0xcb976d5f);\n+    KRound2(g, h, a, b, c, d, e, f, 0x5a0f118f);\n+    KRound2(f, g, h, a, b, c, d, e, 0xdc1eeefd);\n+    KRound2(e, f, g, h, a, b, c, d, 0x0a35b689);\n+    KRound2(d, e, f, g, h, a, b, c, 0xde0b7a04);\n+    KRound2(c, d, e, f, g, h, a, b, 0x58f4ca9d);\n+    KRound2(b, c, d, e, f, g, h, a, 0xe15d5b16);\n+    KRound2(a, b, c, d, e, f, g, h, 0x007f3e86);\n+    KRound2(h, a, b, c, d, e, f, g, 0x37088980);\n+    KRound2(g, h, a, b, c, d, e, f, 0xa507ea32);\n+    KRound2(f, g, h, a, b, c, d, e, 0x6fab9537);\n+    KRound2(e, f, g, h, a, b, c, d, 0x17406110);\n+    KRound2(d, e, f, g, h, a, b, c, 0x0d8cd6f1);\n+    KRound2(c, d, e, f, g, h, a, b, 0xcdaa3b6d);\n+    KRound2(b, c, d, e, f, g, h, a, 0xc0bbbe37);\n+    KRound2(a, b, c, d, e, f, g, h, 0x83613bda);\n+    KRound2(h, a, b, c, d, e, f, g, 0xdb48a363);\n+    KRound2(g, h, a, b, c, d, e, f, 0x0b02e931);\n+    KRound2(f, g, h, a, b, c, d, e, 0x6fd15ca7);\n+    KRound2(e, f, g, h, a, b, c, d, 0x521afaca);\n+    KRound2(d, e, f, g, h, a, b, c, 0x31338431);\n+    KRound2(c, d, e, f, g, h, a, b, 0x6ed41a95);\n+    KRound2(b, c, d, e, f, g, h, a, 0x6d437890);\n+    KRound2(a, b, c, d, e, f, g, h, 0xc39c91f2);\n+    KRound2(h, a, b, c, d, e, f, g, 0x9eccabbd);\n+    KRound2(g, h, a, b, c, d, e, f, 0xb5c9a0e6);\n+    KRound2(f, g, h, a, b, c, d, e, 0x532fb63c);\n+    KRound2(e, f, g, h, a, b, c, d, 0xd2c741c6);\n+    KRound2(d, e, f, g, h, a, b, c, 0x07237ea3);\n+    KRound2(c, d, e, f, g, h, a, b, 0xa4954b68);\n+    KRound2(b, c, d, e, f, g, h, a, 0x4c191d76);\n+\n+\n+    w0 = t0 + a;\n+    w1 = t1 + b;\n+    w2 = t2 + c;\n+    w3 = t3 + d;\n+    w4 = t4 + e;\n+    w5 = t5 + f;\n+    w6 = t6 + g;\n+    w7 = t7 + h;\n+\n+    a = uint32x4_p8{0x6a09e667ul, 0x6a09e667ul, 0x6a09e667ul, 0x6a09e667ul};\n+    b = uint32x4_p8{0xbb67ae85ul, 0xbb67ae85ul, 0xbb67ae85ul, 0xbb67ae85ul};\n+    c = uint32x4_p8{0x3c6ef372ul, 0x3c6ef372ul, 0x3c6ef372ul, 0x3c6ef372ul};\n+    d = uint32x4_p8{0xa54ff53aul, 0xa54ff53aul, 0xa54ff53aul, 0xa54ff53aul};\n+    e = uint32x4_p8{0x510e527ful, 0x510e527ful, 0x510e527ful, 0x510e527ful};\n+    f = uint32x4_p8{0x9b05688cul, 0x9b05688cul, 0x9b05688cul, 0x9b05688cul};\n+    g = uint32x4_p8{0x1f83d9abul, 0x1f83d9abul, 0x1f83d9abul, 0x1f83d9abul};\n+    h = uint32x4_p8{0x5be0cd19ul, 0x5be0cd19ul, 0x5be0cd19ul, 0x5be0cd19ul};\n+\n+    Round(a, b, c, d, e, f, g, h, 0x428a2f98, w0);\n+    Round(h, a, b, c, d, e, f, g, 0x71374491, w1);\n+    Round(g, h, a, b, c, d, e, f, 0xb5c0fbcf, w2);\n+    Round(f, g, h, a, b, c, d, e, 0xe9b5dba5, w3);\n+    Round(e, f, g, h, a, b, c, d, 0x3956c25b, w4);\n+    Round(d, e, f, g, h, a, b, c, 0x59f111f1, w5);\n+    Round(c, d, e, f, g, h, a, b, 0x923f82a4, w6);\n+    Round(b, c, d, e, f, g, h, a, 0xab1c5ed5, w7);\n+    Round2(a, b, c, d, e, f, g, h, 0x5807aa98);\n+    Round2(h, a, b, c, d, e, f, g, 0x12835b01);\n+    Round2(g, h, a, b, c, d, e, f, 0x243185be);\n+    Round2(f, g, h, a, b, c, d, e, 0x550c7dc3);\n+    Round2(e, f, g, h, a, b, c, d, 0x72be5d74);\n+    Round2(d, e, f, g, h, a, b, c, 0x80deb1fe);\n+    Round2(c, d, e, f, g, h, a, b, 0x9bdc06a7);\n+    Round2(b, c, d, e, f, g, h, a, 0xc19bf274);\n+    Round(a, b, c, d, e, f, g, h, 0xe49b69c1, (w0 += sigma0(w1)));\n+    w1 += uint32x4_p8{0xa00000, 0xa00000, 0xa00000, 0xa00000};\n+    Round(h, a, b, c, d, e, f, g, 0xefbe4786, (w1 += sigma0(w2)));\n+    Round(g, h, a, b, c, d, e, f, 0x0fc19dc6, (w2 += sigma1(w0) + sigma0(w3)));\n+    Round(f, g, h, a, b, c, d, e, 0x240ca1cc, (w3 += sigma1(w1) + sigma0(w4)));\n+    Round(e, f, g, h, a, b, c, d, 0x2de92c6f, (w4 += sigma1(w2) + sigma0(w5)));\n+    Round(d, e, f, g, h, a, b, c, 0x4a7484aa, (w5 += sigma1(w3) + sigma0(w6)));\n+    w6 += uint32x4_p8{0x100, 0x100, 0x100, 0x100};\n+    Round(c, d, e, f, g, h, a, b, 0x5cb0a9dc, (w6 += sigma1(w4) + sigma0(w7)));\n+    w7 += uint32x4_p8{0x11002000, 0x11002000, 0x11002000, 0x11002000};\n+    Round(b, c, d, e, f, g, h, a, 0x76f988da, (w7 += sigma1(w5) + w0));\n+    w8 = uint32x4_p8{0x80000000, 0x80000000, 0x80000000, 0x80000000};\n+    Round(a, b, c, d, e, f, g, h, 0x983e5152, (w8 += sigma1(w6) + w1));\n+    Round(h, a, b, c, d, e, f, g, 0xa831c66d, (w9 = sigma1(w7) + w2));\n+    Round(g, h, a, b, c, d, e, f, 0xb00327c8, (w10 = sigma1(w8) + w3));\n+    Round(f, g, h, a, b, c, d, e, 0xbf597fc7, (w11 = sigma1(w9) + w4));\n+    Round(e, f, g, h, a, b, c, d, 0xc6e00bf3, (w12 = sigma1(w10) + w5));\n+    Round(d, e, f, g, h, a, b, c, 0xd5a79147, (w13 = sigma1(w11) + w6));\n+    w14 = uint32x4_p8{0x400022, 0x400022, 0x400022, 0x400022};\n+    Round(c, d, e, f, g, h, a, b, 0x06ca6351, (w14 += sigma1(w12) + w7));\n+    w15 = uint32x4_p8{0x100, 0x100, 0x100, 0x100};\n+    Round(b, c, d, e, f, g, h, a, 0x14292967, (w15 += sigma1(w13) + w8 + sigma0(w0)));\n+    Round(a, b, c, d, e, f, g, h, 0x27b70a85, (w0 += sigma1(w14) + w9 + sigma0(w1)));\n+    Round(h, a, b, c, d, e, f, g, 0x2e1b2138, (w1 += sigma1(w15) + w10 + sigma0(w2)));\n+    Round(g, h, a, b, c, d, e, f, 0x4d2c6dfc, (w2 += sigma1(w0) + w11 + sigma0(w3)));\n+    Round(f, g, h, a, b, c, d, e, 0x53380d13, (w3 += sigma1(w1) + w12 + sigma0(w4)));\n+    Round(e, f, g, h, a, b, c, d, 0x650a7354, (w4 += sigma1(w2) + w13 + sigma0(w5)));\n+    Round(d, e, f, g, h, a, b, c, 0x766a0abb, (w5 += sigma1(w3) + w14 + sigma0(w6)));\n+    Round(c, d, e, f, g, h, a, b, 0x81c2c92e, (w6 += sigma1(w4) + w15 + sigma0(w7)));\n+    Round(b, c, d, e, f, g, h, a, 0x92722c85, (w7 += sigma1(w5) + w0 + sigma0(w8)));\n+    Round(a, b, c, d, e, f, g, h, 0xa2bfe8a1, (w8 += sigma1(w6) + w1 + sigma0(w9)));\n+    Round(h, a, b, c, d, e, f, g, 0xa81a664b, (w9 += sigma1(w7) + w2 + sigma0(w10)));\n+    Round(g, h, a, b, c, d, e, f, 0xc24b8b70, (w10 += sigma1(w8) + w3 + sigma0(w11)));\n+    Round(f, g, h, a, b, c, d, e, 0xc76c51a3, (w11 += sigma1(w9) + w4 + sigma0(w12)));\n+    Round(e, f, g, h, a, b, c, d, 0xd192e819, (w12 += sigma1(w10) + w5 + sigma0(w13)));\n+    Round(d, e, f, g, h, a, b, c, 0xd6990624, (w13 += sigma1(w11) + w6 + sigma0(w14)));\n+    Round(c, d, e, f, g, h, a, b, 0xf40e3585, (w14 += sigma1(w12) + w7 + sigma0(w15)));\n+    Round(b, c, d, e, f, g, h, a, 0x106aa070, (w15 += sigma1(w13) + w8 + sigma0(w0)));\n+    Round(a, b, c, d, e, f, g, h, 0x19a4c116, (w0 += sigma1(w14) + w9 + sigma0(w1)));\n+    Round(h, a, b, c, d, e, f, g, 0x1e376c08, (w1 += sigma1(w15) + w10 + sigma0(w2)));\n+    Round(g, h, a, b, c, d, e, f, 0x2748774c, (w2 += sigma1(w0) + w11 + sigma0(w3)));\n+    Round(f, g, h, a, b, c, d, e, 0x34b0bcb5, (w3 += sigma1(w1) + w12 + sigma0(w4)));\n+    Round(e, f, g, h, a, b, c, d, 0x391c0cb3, (w4 += sigma1(w2) + w13 + sigma0(w5)));\n+    Round(d, e, f, g, h, a, b, c, 0x4ed8aa4a, (w5 += sigma1(w3) + w14 + sigma0(w6)));\n+    Round(c, d, e, f, g, h, a, b, 0x5b9cca4f, (w6 += sigma1(w4) + w15 + sigma0(w7)));\n+    Round(b, c, d, e, f, g, h, a, 0x682e6ff3, (w7 += sigma1(w5) + w0 + sigma0(w8)));\n+    Round(a, b, c, d, e, f, g, h, 0x748f82ee, (w8 += sigma1(w6) + w1 + sigma0(w9)));\n+    Round(h, a, b, c, d, e, f, g, 0x78a5636f, (w9 += sigma1(w7) + w2 + sigma0(w10)));\n+    Round(g, h, a, b, c, d, e, f, 0x84c87814, (w10 += sigma1(w8) + w3 + sigma0(w11)));\n+    Round(f, g, h, a, b, c, d, e, 0x8cc70208, (w11 += sigma1(w9) + w4 + sigma0(w12)));\n+    Round(e, f, g, h, a, b, c, d, 0x90befffa, (w12 += sigma1(w10) + w5 + sigma0(w13)));\n+    Round(d, e, f, g, h, a, b, c, 0xa4506ceb, (w13 += sigma1(w11) + w6 + sigma0(w14)));\n+    Round(c, d, e, f, g, h, a, b, 0xbef9a3f7, (w14 + sigma1(w12) + w7 + sigma0(w15)));\n+    Round(b, c, d, e, f, g, h, a, 0xc67178f2, (w15 + sigma1(w13) + w8 + sigma0(w0)));\n+\n+    a += uint32x4_p8{0x6a09e667ul, 0x6a09e667ul, 0x6a09e667ul, 0x6a09e667ul};\n+    b += uint32x4_p8{0xbb67ae85ul, 0xbb67ae85ul, 0xbb67ae85ul, 0xbb67ae85ul};\n+    c += uint32x4_p8{0x3c6ef372ul, 0x3c6ef372ul, 0x3c6ef372ul, 0x3c6ef372ul};\n+    d += uint32x4_p8{0xa54ff53aul, 0xa54ff53aul, 0xa54ff53aul, 0xa54ff53aul};\n+    e += uint32x4_p8{0x510e527ful, 0x510e527ful, 0x510e527ful, 0x510e527ful};\n+    f += uint32x4_p8{0x9b05688cul, 0x9b05688cul, 0x9b05688cul, 0x9b05688cul};\n+    g += uint32x4_p8{0x1f83d9abul, 0x1f83d9abul, 0x1f83d9abul, 0x1f83d9abul};\n+    h += uint32x4_p8{0x5be0cd19ul, 0x5be0cd19ul, 0x5be0cd19ul, 0x5be0cd19ul};\n+\n+    w0123_0 = (uint8x16_p8)pack_bytes<0 >((uint8x16_p8)a, (uint8x16_p8)b, (uint8x16_p8)c, (uint8x16_p8)d);\n+    w4567_0 = (uint8x16_p8)pack_bytes<0 >((uint8x16_p8)e, (uint8x16_p8)f, (uint8x16_p8)g, (uint8x16_p8)h);\n+\n+    w0123_1 = (uint8x16_p8)pack_bytes<4 >((uint8x16_p8)a, (uint8x16_p8)b, (uint8x16_p8)c, (uint8x16_p8)d);\n+    w4567_1 = (uint8x16_p8)pack_bytes<4 >((uint8x16_p8)e, (uint8x16_p8)f, (uint8x16_p8)g, (uint8x16_p8)h);\n+\n+    w0123_2 = (uint8x16_p8)pack_bytes<8 >((uint8x16_p8)a, (uint8x16_p8)b, (uint8x16_p8)c, (uint8x16_p8)d);\n+    w4567_2 = (uint8x16_p8)pack_bytes<8 >((uint8x16_p8)e, (uint8x16_p8)f, (uint8x16_p8)g, (uint8x16_p8)h);\n+\n+    w0123_3 = (uint8x16_p8)pack_bytes<12>((uint8x16_p8)a, (uint8x16_p8)b, (uint8x16_p8)c, (uint8x16_p8)d);\n+    w4567_3 = (uint8x16_p8)pack_bytes<12>((uint8x16_p8)e, (uint8x16_p8)f, (uint8x16_p8)g, (uint8x16_p8)h);\n+\n+    vec_vsx_st(w0123_0, 0 *16 + 0 , out);\n+    vec_vsx_st(w4567_0, 1 *16 + 0 , out);\n+\n+    vec_vsx_st(w0123_1, 0 *16 + 32, out);\n+    vec_vsx_st(w4567_1, 1 *16 + 32, out);\n+\n+    vec_vsx_st(w0123_2, 0 *16 + 64, out);\n+    vec_vsx_st(w4567_2, 1 *16 + 64, out);\n+\n+    vec_vsx_st(w0123_3, 0 *16 + 96, out);\n+    vec_vsx_st(w4567_3, 1 *16 + 96, out);\n+}\n+}"
      }
    ]
  },
  {
    "sha": "3b402e0738351aeb17fd6366e9db95b76a01df5d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYjQwMmUwNzM4MzUxYWViMTdmZDYzNjZlOWRiOTViNzZhMDFkZjVk",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2018-06-11T15:35:40Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2018-06-11T16:27:47Z"
      },
      "message": "Make checkqueue bench a realistic result\n\nPreviously checkqueue bench would essentially just test cross-core\nlatency with more threads the more threads a host had. Not only did\nthis make the result worse on hosts with more CPU cores, but it\ndoesn't mimic how we use the checkqueue in real life, and made\nbench_bitcoin almost unusably slow on high-core-count systems,\nespecially dual-CPU systems.\n\nInstead, we use the same thread count that we use for the real\nvalidation queue, with a 75-microsecond busy-wait on each thread,\nwhich should at least vaguely mimic how we use the checkqueue.",
      "tree": {
        "sha": "9685f420a2915f5e30c0619c39f207da01b33d2a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9685f420a2915f5e30c0619c39f207da01b33d2a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3b402e0738351aeb17fd6366e9db95b76a01df5d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b402e0738351aeb17fd6366e9db95b76a01df5d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3b402e0738351aeb17fd6366e9db95b76a01df5d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b402e0738351aeb17fd6366e9db95b76a01df5d/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b04f1176ffc3d82c78cdc758621d12496e37d5f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b04f1176ffc3d82c78cdc758621d12496e37d5f0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b04f1176ffc3d82c78cdc758621d12496e37d5f0"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 6,
      "deletions": 4
    },
    "files": [
      {
        "sha": "4d4b33c987714b80602c0f23037272b91acff030",
        "filename": "src/bench/checkqueue.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b402e0738351aeb17fd6366e9db95b76a01df5d/src/bench/checkqueue.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b402e0738351aeb17fd6366e9db95b76a01df5d/src/bench/checkqueue.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/checkqueue.cpp?ref=3b402e0738351aeb17fd6366e9db95b76a01df5d",
        "patch": "@@ -4,6 +4,7 @@\n \n #include <bench/bench.h>\n #include <util.h>\n+#include <utiltime.h>\n #include <validation.h>\n #include <checkqueue.h>\n #include <prevector.h>\n@@ -12,7 +13,6 @@\n #include <random.h>\n \n \n-static const int MIN_CORES = 2;\n static const size_t BATCHES = 101;\n static const size_t BATCH_SIZE = 30;\n static const int PREVECTOR_SIZE = 28;\n@@ -21,7 +21,7 @@ static const unsigned int QUEUE_BATCH_SIZE = 128;\n // This Benchmark tests the CheckQueue with a slightly realistic workload,\n // where checks all contain a prevector that is indirect 50% of the time\n // and there is a little bit of work done between calls to Add.\n-static void CCheckQueueSpeedPrevectorJob(benchmark::State& state)\n+static void CCheckQueueSpeedPrevectorSleepJob(benchmark::State& state)\n {\n     struct PrevectorJob {\n         prevector<PREVECTOR_SIZE, uint8_t> p;\n@@ -32,13 +32,15 @@ static void CCheckQueueSpeedPrevectorJob(benchmark::State& state)\n         }\n         bool operator()()\n         {\n+            int64_t starttime = GetTimeMicros();\n+            while (GetTimeMicros() < starttime + 75) {}\n             return true;\n         }\n         void swap(PrevectorJob& x){p.swap(x.p);};\n     };\n     CCheckQueue<PrevectorJob> queue {QUEUE_BATCH_SIZE};\n     boost::thread_group tg;\n-    for (auto x = 0; x < std::max(MIN_CORES, GetNumCores()); ++x) {\n+    for (auto x = 0; x < std::min(MAX_SCRIPTCHECK_THREADS, GetNumCores()); ++x) {\n        tg.create_thread([&]{queue.Thread();});\n     }\n     while (state.KeepRunning()) {\n@@ -59,4 +61,4 @@ static void CCheckQueueSpeedPrevectorJob(benchmark::State& state)\n     tg.interrupt_all();\n     tg.join_all();\n }\n-BENCHMARK(CCheckQueueSpeedPrevectorJob, 1400);\n+BENCHMARK(CCheckQueueSpeedPrevectorSleepJob, 100);"
      }
    ]
  }
]