laanwj,2018-05-09T18:02:09Z,"Cool!\nPing @luke-jr",https://github.com/bitcoin/bitcoin/pull/13203#issuecomment-387824621,387824621,
TheBlueMatt,2018-05-09T20:59:18Z,"@luke-jr No, it definitely works, but its apparently /only/ tested on POWER, not ""not yet tested"" :p.",https://github.com/bitcoin/bitcoin/pull/13203#issuecomment-387873884,387873884,
gmaxwell,2018-05-15T18:55:37Z,spiffy! will test soon,https://github.com/bitcoin/bitcoin/pull/13203#issuecomment-389275630,389275630,
TheBlueMatt,2018-06-04T18:34:45Z,Rebased.,https://github.com/bitcoin/bitcoin/pull/13203#issuecomment-394454661,394454661,
TheBlueMatt,2018-06-11T16:32:40Z,"Rebased. Should be ready for merge +/- some more review, though luckily the tests should mostly cover it.",https://github.com/bitcoin/bitcoin/pull/13203#issuecomment-396304822,396304822,
TheBlueMatt,2018-06-11T16:33:32Z,Note that I also had to fix the checkqueue bench as otherwise bench_bitcoin is unsuably slow on multi-cpu (or many-core) systems.,https://github.com/bitcoin/bitcoin/pull/13203#issuecomment-396305084,396305084,
laanwj,2018-06-14T17:50:48Z,I'm unable to test this at the moment. Can someone please post the benchmark results before/after this?,https://github.com/bitcoin/bitcoin/pull/13203#issuecomment-397382020,397382020,
DrahtBot,2018-07-09T23:26:52Z,<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase,https://github.com/bitcoin/bitcoin/pull/13203#issuecomment-403650979,403650979,
gmaxwell,2018-08-21T19:16:38Z,This needs a trivial rebase but with that works fine against master.  ACK. Will post benchmarks after IBD finishes.,https://github.com/bitcoin/bitcoin/pull/13203#issuecomment-414790404,414790404,
gmaxwell,2018-08-23T02:08:43Z,"Before:\nMerkleRoot, 5, 800, 21.6763, 0.00541869, 0.00541984, 0.00541886\nAfter:\nMerkleRoot, 5, 800, 6.32571, 0.00158138, 0.00158148, 0.00158142\n\nOn power9.\n\nInteresting reindex speed was about the same for both.",https://github.com/bitcoin/bitcoin/pull/13203#issuecomment-415257976,415257976,
gmaxwell,2018-08-23T02:09:31Z,@TheBlueMatt  Rebase.,https://github.com/bitcoin/bitcoin/pull/13203#issuecomment-415258093,415258093,
TheBlueMatt,2018-08-24T19:31:53Z,"Hmm, well if it doesnt speed up rebase then there is something funky we should look into before merging new code, no?",https://github.com/bitcoin/bitcoin/pull/13203#issuecomment-415860369,415860369,
TheBlueMatt,2018-08-24T20:29:52Z,"Gonna go ahead and close it, if someone wants to adopt it and figure out why IBD didn't improve where the equivalent x86 change improved it significantly, they should adopt it.",https://github.com/bitcoin/bitcoin/pull/13203#issuecomment-415874064,415874064,
gmaxwell,2018-08-24T23:46:23Z,"The comparable change made a big impact on x86 many months ago-- who knows now... Synchronization primitives are more expensive on power, so it also wouldn't be surprising if our glib use of atomics all over the place weren't moving around the limiting factors in performance on power compared to x86.\n\n",https://github.com/bitcoin/bitcoin/pull/13203#issuecomment-415909895,415909895,
luke-jr,2018-05-09T18:20:48Z,Shouldn't this be CPPFLAGS or CXXFLAGS?,https://github.com/bitcoin/bitcoin/pull/13203#discussion_r187131582,187131582,configure.ac
luke-jr,2018-05-09T18:21:36Z,"This is probably needed on CXXFLAGS, since the man page says it changes the code generated.",https://github.com/bitcoin/bitcoin/pull/13203#discussion_r187131780,187131780,src/Makefile.am
luke-jr,2018-05-09T18:27:18Z,"I don't think we need this here, and POWER vectoring stuff seems to screw with standard C++ stuff, so maybe not a good idea to have it.",https://github.com/bitcoin/bitcoin/pull/13203#discussion_r187133411,187133411,src/crypto/sha256.cpp
luke-jr,2018-05-09T18:28:04Z,Can we move this check to a function in the power8-specific file?,https://github.com/bitcoin/bitcoin/pull/13203#discussion_r187133646,187133646,src/crypto/sha256.cpp
luke-jr,2018-05-09T18:29:04Z,`__vector` is a non-standard GCC extension; any reason we can't use `vector` here directly?,https://github.com/bitcoin/bitcoin/pull/13203#discussion_r187133946,187133946,src/crypto/sha256_power8.cpp
luke-jr,2018-05-09T18:29:50Z,"Since this file is only compiled with `HAVE_POWER8`, I think we don't need this here.",https://github.com/bitcoin/bitcoin/pull/13203#discussion_r187134176,187134176,src/crypto/sha256_power8.cpp
theuni,2018-05-09T19:19:24Z,"Can't compiler defines be used instead so that non-autoconf builds can compile with optims too?\n\nSpecifically for this one, rather than ```ifdef(ENABLE_AVX2)```, use ```ifdef(__AVX2__)```",https://github.com/bitcoin/bitcoin/pull/13203#discussion_r187147868,187147868,src/Makefile.am
theuni,2018-05-09T19:28:22Z,"Agree, but this should be assigned to POWER_VSX_CXXFLAGS or so above, in an AX_CHECK_LINK_FLAG test.",https://github.com/bitcoin/bitcoin/pull/13203#discussion_r187150238,187150238,configure.ac
theuni,2018-05-09T19:31:49Z,Only define these in their respective check's success cases.,https://github.com/bitcoin/bitcoin/pull/13203#discussion_r187151168,187151168,configure.ac
theuni,2018-05-09T19:34:41Z,Please move the defines/conditionals down with the other asm flags for consistency.,https://github.com/bitcoin/bitcoin/pull/13203#discussion_r187151892,187151892,configure.ac
theuni,2018-05-09T19:35:48Z,These should all be $(AM_CXXFLAGS) $(PIE_FLAGS).,https://github.com/bitcoin/bitcoin/pull/13203#discussion_r187152175,187152175,src/Makefile.am
theuni,2018-05-09T19:36:06Z,Ditto for the CPPFLAGS.,https://github.com/bitcoin/bitcoin/pull/13203#discussion_r187152249,187152249,src/Makefile.am
theuni,2018-05-09T19:42:50Z,append to EXTRA_LIBRARIES outside of the ```if HAVE_POWER8```. These libraries are only built if something depends on them.,https://github.com/bitcoin/bitcoin/pull/13203#discussion_r187153964,187153964,src/Makefile.am
theuni,2018-05-09T19:46:50Z,"I'm not sure whether this works as intended or not, but we don't want to be doing it either way. Add LIBBITCOIN_CRYPTO_POWER8 to bitcoind_LDADD like the others, we can potentially aggregate them as a follow-up.",https://github.com/bitcoin/bitcoin/pull/13203#discussion_r187154896,187154896,src/Makefile.am
TheBlueMatt,2018-05-09T21:01:09Z,"auxv isnt POWER- or vector-specific, its to get getauxval which is a libc function.",https://github.com/bitcoin/bitcoin/pull/13203#discussion_r187174989,187174989,src/crypto/sha256.cpp
TheBlueMatt,2018-05-09T21:01:38Z,"Its right below the x86-specific support check, and its a short file, it seems like overkill.",https://github.com/bitcoin/bitcoin/pull/13203#discussion_r187175124,187175124,src/crypto/sha256.cpp
TheBlueMatt,2018-05-09T21:05:10Z,"Why not? Its shorthand for ""crypto depends on this"" instead of listing it as a dep in every target that may use it. Its also much less britle, which is important given we dont have a POWER travis target.",https://github.com/bitcoin/bitcoin/pull/13203#discussion_r187176023,187176023,src/Makefile.am
theuni,2018-05-09T21:53:28Z,"I agree with aggregating, but as a clean follow-up, or as part of #13191. I'd just prefer not to have one-off's. It's not clear, for example, if EXTRA_LIBRARIES is appended twice, as it depends on when LIBBITCOIN_CRYPTO is calculated.",https://github.com/bitcoin/bitcoin/pull/13203#discussion_r187187292,187187292,src/Makefile.am
theuni,2018-05-09T21:57:45Z,"This should reset CXXFLAGS, not LDFLAGS.",https://github.com/bitcoin/bitcoin/pull/13203#discussion_r187188164,187188164,configure.ac
theuni,2018-05-09T23:20:20Z,"```\nPOWER8_ASM_CXXFLAGS=""-mpower8-vector""\nAC_MSG_RESULT(yes)\n```\nThen at the bottom, with the others:\n```\nAC_SUBST(POWER8_ASM_CXXFLAGS)\n```\nThen in the Makefile.am:\n```\ncrypto_libbitcoin_crypto_power8_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS) $(POWER8_ASM_CXXFLAGS)\n```",https://github.com/bitcoin/bitcoin/pull/13203#discussion_r187203061,187203061,configure.ac
theuni,2018-05-09T23:24:03Z,"HAVE_POWER8 is a define that will be handled by autoheader, it can't be treated like a variable here. Need to set one separately.",https://github.com/bitcoin/bitcoin/pull/13203#discussion_r187203593,187203593,configure.ac
luke-jr,2018-07-25T23:22:25Z,"I don't see any YASM code at the bottom; also, really from Intel?",https://github.com/bitcoin/bitcoin/pull/13203#discussion_r205290913,205290913,src/crypto/sha256_power8.cpp
sipa,2018-07-25T23:24:38Z,Looks like that was copied from the sse4 code.,https://github.com/bitcoin/bitcoin/pull/13203#discussion_r205291294,205291294,src/crypto/sha256_power8.cpp
luke-jr,2018-07-25T23:52:19Z,Better to use `vector` here. We don't use [the non-standard] `__vector` in the code itself.,https://github.com/bitcoin/bitcoin/pull/13203#discussion_r205295673,205295673,configure.ac
luke-jr,2018-07-25T23:54:49Z,I think `-faltivec` is needed too?,https://github.com/bitcoin/bitcoin/pull/13203#discussion_r205296034,205296034,configure.ac
