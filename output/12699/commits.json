[
  {
    "sha": "2fb9c1e6681370478e24a19172ed6d78d95d50d3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZmI5YzFlNjY4MTM3MDQ3OGUyNGExOTE3MmVkNmQ3OGQ5NWQ1MGQz",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2018-03-15T20:18:48Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2018-03-21T19:03:24Z"
      },
      "message": "shuffle selected coins before transaction finalization",
      "tree": {
        "sha": "cea38f2e51b940f75151a24ab77f9d12af70940f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cea38f2e51b940f75151a24ab77f9d12af70940f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2fb9c1e6681370478e24a19172ed6d78d95d50d3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2fb9c1e6681370478e24a19172ed6d78d95d50d3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2fb9c1e6681370478e24a19172ed6d78d95d50d3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2fb9c1e6681370478e24a19172ed6d78d95d50d3/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1ec1602a4549f6b68586cead8eff701bceb624f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ec1602a4549f6b68586cead8eff701bceb624f5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1ec1602a4549f6b68586cead8eff701bceb624f5"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 23,
      "deletions": 14
    },
    "files": [
      {
        "sha": "5472062a20a6127dfe9359a11f78d96c7bcdf98b",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 14,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2fb9c1e6681370478e24a19172ed6d78d95d50d3/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2fb9c1e6681370478e24a19172ed6d78d95d50d3/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=2fb9c1e6681370478e24a19172ed6d78d95d50d3",
        "patch": "@@ -2889,20 +2889,11 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CTransac\n                     nChangePosInOut = -1;\n                 }\n \n-                // Fill vin\n+                // Dummy fill vin for maximum size estimation\n                 //\n-                // Note how the sequence number is set to non-maxint so that\n-                // the nLockTime set above actually works.\n-                //\n-                // BIP125 defines opt-in RBF as any nSequence < maxint-1, so\n-                // we use the highest possible value in that range (maxint-2)\n-                // to avoid conflicting with other possible uses of nSequence,\n-                // and in the spirit of \"smallest possible change from prior\n-                // behavior.\"\n-                const uint32_t nSequence = coin_control.signalRbf ? MAX_BIP125_RBF_SEQUENCE : (CTxIn::SEQUENCE_FINAL - 1);\n-                for (const auto& coin : setCoins)\n-                    txNew.vin.push_back(CTxIn(coin.outpoint,CScript(),\n-                                              nSequence));\n+                for (const auto& coin : setCoins) {\n+                    txNew.vin.push_back(CTxIn(coin.outpoint,CScript()));\n+                }\n \n                 nBytes = CalculateMaximumSignedTxSize(txNew, this);\n                 if (nBytes < 0) {\n@@ -2992,11 +2983,29 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CTransac\n \n         if (nChangePosInOut == -1) reservekey.ReturnKey(); // Return any reserved key if we don't have change\n \n+        // Shuffle selected coins and fill in final vin\n+        txNew.vin.clear();\n+        std::vector<CInputCoin> selected_coins(setCoins.begin(), setCoins.end());\n+        std::shuffle(selected_coins.begin(), selected_coins.end(), FastRandomContext());\n+\n+        // Note how the sequence number is set to non-maxint so that\n+        // the nLockTime set above actually works.\n+        //\n+        // BIP125 defines opt-in RBF as any nSequence < maxint-1, so\n+        // we use the highest possible value in that range (maxint-2)\n+        // to avoid conflicting with other possible uses of nSequence,\n+        // and in the spirit of \"smallest possible change from prior\n+        // behavior.\"\n+        const uint32_t nSequence = coin_control.signalRbf ? MAX_BIP125_RBF_SEQUENCE : (CTxIn::SEQUENCE_FINAL - 1);\n+        for (const auto& coin : selected_coins) {\n+            txNew.vin.push_back(CTxIn(coin.outpoint, CScript(), nSequence));\n+        }\n+\n         if (sign)\n         {\n             CTransaction txNewConst(txNew);\n             int nIn = 0;\n-            for (const auto& coin : setCoins)\n+            for (const auto& coin : selected_coins)\n             {\n                 const CScript& scriptPubKey = coin.txout.scriptPubKey;\n                 SignatureData sigdata;"
      }
    ]
  }
]