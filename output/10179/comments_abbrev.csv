TheBlueMatt,2017-04-17T13:54:00Z,Rebased after ##10178 merge.,https://github.com/bitcoin/bitcoin/pull/10179#issuecomment-294489631,294489631,
morcos,2017-04-24T18:11:21Z,"fast review utACK\n",https://github.com/bitcoin/bitcoin/pull/10179#issuecomment-296775885,296775885,
laanwj,2017-04-25T12:55:29Z,"utACK 010f3ae\n",https://github.com/bitcoin/bitcoin/pull/10179#issuecomment-297020818,297020818,
TheBlueMatt,2017-04-25T12:58:28Z,"I don't currently have tests written, but given nearly everything passes through I've found its pretty well-excersized by existing wallet functional tests. I'll add unit tests for this to my to-do list.\n\nOn April 25, 2017 8:55:34 AM EDT, ""Wladimir J. van der Laan"" <notifications@github.com> wrote:\n>utACK e5d0c66 - are you planning on adding tests for this functionality\n>later?\n",https://github.com/bitcoin/bitcoin/pull/10179#issuecomment-297021602,297021602,
TheBlueMatt,2017-04-27T01:00:00Z,"@sipa re: unused and untested code, see #10286, which I think it would be reasonable to require at least concept acks on prior to merging this.",https://github.com/bitcoin/bitcoin/pull/10179#issuecomment-297582085,297582085,
ryanofsky,2017-05-03T13:43:59Z,utACK 643a988101f12581725d08d71cfcb5d932a062ac. I like the new ProcessQueue location and std::move additions.,https://github.com/bitcoin/bitcoin/pull/10179#issuecomment-298914626,298914626,
TheBlueMatt,2017-05-04T20:51:49Z,Squashed and tweaked commit wording.,https://github.com/bitcoin/bitcoin/pull/10179#issuecomment-299305471,299305471,
ryanofsky,2017-05-05T20:51:53Z,utACK 830c26b55a2b4bc93509d3fa7f17a0b383a95835. Only change aside from the history squashing is switching to the schedule() default arg.,https://github.com/bitcoin/bitcoin/pull/10179#issuecomment-299572650,299572650,
sipa,2017-06-03T19:39:21Z,"utACK. Since you're adding a new class, would you mind making a few changes to match the new naming rules in the style guide?",https://github.com/bitcoin/bitcoin/pull/10179#issuecomment-305996897,305996897,
TheBlueMatt,2017-06-06T00:39:54Z,Removed C prefix from classes without rebasing.,https://github.com/bitcoin/bitcoin/pull/10179#issuecomment-306348948,306348948,
TheBlueMatt,2017-06-08T15:30:26Z,Very minor rebase.,https://github.com/bitcoin/bitcoin/pull/10179#issuecomment-307139595,307139595,
ryanofsky,2017-06-12T17:50:26Z,Status of this PR? It has had 4 utACKs (though @laanwj's is in [strikethrough](https://github.com/bitcoin/bitcoin/pull/10179#issuecomment-297020818)) as well as comments from @mchrostowski in #10286.,https://github.com/bitcoin/bitcoin/pull/10179#issuecomment-307865610,307865610,
sipa,2017-06-23T01:51:52Z,@laanwj Does the strikethrough utACK means you still have a concern?,https://github.com/bitcoin/bitcoin/pull/10179#issuecomment-310548915,310548915,
laanwj,2017-06-28T06:11:11Z,"@sipa Just that I had a concern at the time, and was too quick to utACK. I should re-review.",https://github.com/bitcoin/bitcoin/pull/10179#issuecomment-311565907,311565907,
theuni,2017-07-03T21:22:21Z,utACK (after rebase) now that #10683 is in.,https://github.com/bitcoin/bitcoin/pull/10179#issuecomment-312735904,312735904,
TheBlueMatt,2017-07-04T00:54:46Z,Rebased.,https://github.com/bitcoin/bitcoin/pull/10179#issuecomment-312756135,312756135,
TheBlueMatt,2017-07-07T15:17:06Z,Redid the shutdown callback-flushing at @morcos's request - now flushes earlier in the Shutdown() process in a much better location - after all our peers have stopped processing (and thus cant generate callbacks) and before wallet flushing.,https://github.com/bitcoin/bitcoin/pull/10179#issuecomment-313711092,313711092,
TheBlueMatt,2017-07-07T16:56:47Z,"Added a comment on flush/drop behavior - \n""Any future callbacks will be dropped. This should absolutely be safe - if missing a callback results in an unrecoverable situation, unclean shutdown would too. The only reason to do the above flushes is to let the wallet catch up with our current chain to avoid any strange pruning edge cases and make next startup faster by avoiding rescan.""\n\n",https://github.com/bitcoin/bitcoin/pull/10179#issuecomment-313736506,313736506,
morcos,2017-07-07T17:17:37Z,utACK 3192975,https://github.com/bitcoin/bitcoin/pull/10179#issuecomment-313741670,313741670,
theuni,2017-07-07T23:38:31Z,"re-utACK 3192975f1d177aa9f0bbd823c6387cfbfa943610, though very hesitantly after thinking through the tear-down some more. The shutdown process is going to get really hard to trace when callbacks start coming in on different threads.\n\nI really hope some ownership model will begin to emerge. ",https://github.com/bitcoin/bitcoin/pull/10179#issuecomment-313816720,313816720,
morcos,2017-04-24T18:10:57Z,"nit: i'm the last person who should comment on coding style, but isn't this easier to read:\n`std::atomic<bool> fCallbacksRunning(false)`",https://github.com/bitcoin/bitcoin/pull/10179#discussion_r113017345,113017345,src/validationinterface.cpp
TheBlueMatt,2017-04-24T22:08:36Z,"My C++-fu is not good enough to get that to compile. Not actually sure why, though, frankly.",https://github.com/bitcoin/bitcoin/pull/10179#discussion_r113068753,113068753,src/validationinterface.cpp
sipa,2017-04-24T22:25:55Z,"Could you try\n```c++\nstd::atomic<bool> fCallbacksRunning = std::atomic<bool>(false);\n```\n?",https://github.com/bitcoin/bitcoin/pull/10179#discussion_r113071523,113071523,src/validationinterface.cpp
TheBlueMatt,2017-04-24T22:37:00Z,"Yes, that works, but I think thats worse than using the init wrapper, which is what that wrapper exists for.",https://github.com/bitcoin/bitcoin/pull/10179#discussion_r113073136,113073136,src/validationinterface.cpp
laanwj,2017-04-25T13:06:35Z,"This doesn't seem exception-safe. If an exception is raised inside here, `fCallbacksRunning` will stay set forever.\n",https://github.com/bitcoin/bitcoin/pull/10179#discussion_r113189098,113189098,src/validationinterface.cpp
TheBlueMatt,2017-04-25T14:42:48Z,"Indeed. Put a generic try {} catch(...) {Log} around it, not sure what else to do there.",https://github.com/bitcoin/bitcoin/pull/10179#discussion_r113214676,113214676,src/validationinterface.cpp
sipa,2017-04-26T00:59:08Z,Use a std::unique_ptr instead?,https://github.com/bitcoin/bitcoin/pull/10179#discussion_r113345742,113345742,src/validationinterface.cpp
sipa,2017-04-26T01:00:50Z,"That's scary, it would lose a callback. Shouldn't it assert in this case?",https://github.com/bitcoin/bitcoin/pull/10179#discussion_r113345909,113345909,src/validationinterface.cpp
sipa,2017-04-26T01:03:04Z,"Instead of looping until there are no more scheduled callbacks, isn't easier/better to return, but reschedule itself? That way a large set of queued callbacks won't prevent the scheduler from running other (non-callback) jobs in the mean time.",https://github.com/bitcoin/bitcoin/pull/10179#discussion_r113346076,113346076,src/validationinterface.cpp
laanwj,2017-04-26T06:37:05Z,"You could catch the exception, clear the flag, and `throw` again. Though RAII is usually the best way in C++ to cover all exit paths.",https://github.com/bitcoin/bitcoin/pull/10179#discussion_r113375144,113375144,src/validationinterface.cpp
theuni,2017-04-26T19:38:16Z,"Use braced initialization in a class/struct definition:\n```c++\nstd::atomic<bool> fCallbacksRunning{false};\n```",https://github.com/bitcoin/bitcoin/pull/10179#discussion_r113543573,113543573,src/validationinterface.cpp
TheBlueMatt,2017-04-26T21:43:36Z,"Cant, sadly, as the whole point was to not make CMainSignalsInterface sit in the .h to avoid having a bost/signals include in half our codebase.",https://github.com/bitcoin/bitcoin/pull/10179#discussion_r113570307,113570307,src/validationinterface.cpp
TheBlueMatt,2017-04-26T21:56:31Z,"Rewrote to just use a regular bool inside the lock, no reason to really have an atomic here.",https://github.com/bitcoin/bitcoin/pull/10179#discussion_r113572738,113572738,src/validationinterface.cpp
TheBlueMatt,2017-04-26T21:56:44Z,"OK, made a local class that will RAII it :)",https://github.com/bitcoin/bitcoin/pull/10179#discussion_r113572775,113572775,src/validationinterface.cpp
TheBlueMatt,2017-04-26T21:56:53Z,Done.,https://github.com/bitcoin/bitcoin/pull/10179#discussion_r113572808,113572808,src/validationinterface.cpp
TheBlueMatt,2017-04-26T21:56:58Z,assert()ed,https://github.com/bitcoin/bitcoin/pull/10179#discussion_r113572828,113572828,src/validationinterface.cpp
sipa,2017-04-26T22:00:37Z,`std::unique_ptr` seems to work fine with forward-declared types: https://github.com/sipa/bitcoin/commit/a4ecaad,https://github.com/bitcoin/bitcoin/pull/10179#discussion_r113573525,113573525,src/validationinterface.cpp
TheBlueMatt,2017-04-26T22:16:59Z,"Well, I'll be! Took your patch and squashed (hope you dont mind).",https://github.com/bitcoin/bitcoin/pull/10179#discussion_r113576299,113576299,src/validationinterface.cpp
sipa,2017-04-26T22:27:58Z,"Sorry, but I'm going to insist that you maintain this commit intact (nevermind that it's likely the exact same patch you'd come up with if I hadn't shown you) forever in your PR history. Note: sarcasm.",https://github.com/bitcoin/bitcoin/pull/10179#discussion_r113577966,113577966,src/validationinterface.cpp
ryanofsky,2017-05-02T16:43:09Z,"In commit ""Make ValidationInterface signals-type-agnostic""\n\nI don't think you need to have this internals pointer in order to do the signal routing / CScheduler stuff that's ostensibly the motivation for this change. (The signals could just be regular class members.). If you like this better because it helps hide the boost dependency, though, that seems fine. This is just the pImpl pattern, ht",https://github.com/bitcoin/bitcoin/pull/10179#discussion_r114365749,114365749,src/validationinterface.h
ryanofsky,2017-05-02T17:09:49Z,"In commit ""Handle more than one CScheduler thread in CValidationInterface""\n\nThis seems like it would a lot simpler it just spawned a single thread to run the callbacks in sequence instead of relying on CScheduler and then doing a bunch of synchronization on top of it to keep things scheduled and prevent more than one callback from executing at the same time.\n\nAlso, I think it would be nice",https://github.com/bitcoin/bitcoin/pull/10179#discussion_r114371879,114371879,src/validationinterface.cpp
ryanofsky,2017-05-02T17:19:07Z,"In commit ""Handle more than one CScheduler thread in CValidationInterface"":\n\nShould pass `func` by value or rvalue reference so you can move it into the `callbacksPending` list without a copy.",https://github.com/bitcoin/bitcoin/pull/10179#discussion_r114373991,114373991,src/validationinterface.cpp
ryanofsky,2017-05-02T17:21:03Z,"In commit ""Handle more than one CScheduler thread in CValidationInterface""\n\nCould add `std::move` here.",https://github.com/bitcoin/bitcoin/pull/10179#discussion_r114374403,114374403,src/validationinterface.cpp
TheBlueMatt,2017-05-02T19:56:34Z,"Yea, the real motivation there was to not have to #include boost signals garbage everywhere, nothing more.",https://github.com/bitcoin/bitcoin/pull/10179#discussion_r114409991,114409991,src/validationinterface.h
TheBlueMatt,2017-05-02T20:33:24Z,"Moved to scheduler.h, testing left as an excersize for the reader :p.",https://github.com/bitcoin/bitcoin/pull/10179#discussion_r114418023,114418023,src/validationinterface.cpp
TheBlueMatt,2017-05-02T20:33:29Z,Done.,https://github.com/bitcoin/bitcoin/pull/10179#discussion_r114418053,114418053,src/validationinterface.cpp
TheBlueMatt,2017-05-02T20:33:32Z,Done.,https://github.com/bitcoin/bitcoin/pull/10179#discussion_r114418066,114418066,src/validationinterface.cpp
sipa,2017-06-12T20:09:52Z,"Would you mind changing this to lowercase-only variable names (e.g. `m_cs_callbacks_pending`, `m_callbacks_pending`, `m_callbacks_running`)?",https://github.com/bitcoin/bitcoin/pull/10179#discussion_r121513653,121513653,src/scheduler.h
TheBlueMatt,2017-06-21T01:12:06Z,Done.,https://github.com/bitcoin/bitcoin/pull/10179#discussion_r123134051,123134051,src/scheduler.h
theuni,2017-06-27T22:04:46Z,"This potentially leaves events in the SingleThreadedSchedulerClient process queue with a dangling pointer to ""this"", no? I believe SingleThreadedSchedulerClient needs interrupt/stop functionality.",https://github.com/bitcoin/bitcoin/pull/10179#discussion_r124408608,124408608,src/validationinterface.cpp
TheBlueMatt,2017-06-27T23:11:18Z,"Interrupt() will stop the processing of events long before we ever call UnregisterBackgroundSignalScheduler in init/bitcoind.cpp/qt/bitcoin.cpp. There isnt really a great way to solve this, I think, without just making the CScheduler own the thread(/group), but I went ahead and pushed a commit which will just call any remaining callbacks when Unregister is called.",https://github.com/bitcoin/bitcoin/pull/10179#discussion_r124419087,124419087,src/validationinterface.cpp
laanwj,2017-06-28T06:22:10Z,"#10683 gets rid of `GetScriptForMining` in validationinterface, which I think it's good because it mutates its argument. Doing that in a decoupled thread would be disastrous.",https://github.com/bitcoin/bitcoin/pull/10179#discussion_r124460161,124460161,src/validationinterface.h
TheBlueMatt,2017-06-28T14:13:07Z,"All of the move-to-background-thread stuff is going to be a slow per-function process. See, eg, #10652 which moves a few functions to the background for net_processing and, of course, #10286 which moves a few to the background for wallet. Agreed that GetScriptForMining should go away and then it wont be a concern :).",https://github.com/bitcoin/bitcoin/pull/10179#discussion_r124551923,124551923,src/validationinterface.h
ryanofsky,2017-07-10T15:35:20Z,"In commit ""Flush CValidationInterface callbacks prior to destruction""\n\nShutdown order is convoluted enough that I think it would be good to add asserts, like asserting m_internals is non-null here and that scheduler is shut down or shutting down at this point (nThreadsServicingQueue == 0 || shouldStop). Latter might be more appropriate inside the scheduling code.",https://github.com/bitcoin/bitcoin/pull/10179#discussion_r126457653,126457653,src/validationinterface.cpp
ryanofsky,2017-07-10T16:32:59Z,"In commit ""Give CMainSignals a reference to the global scheduler""\n\nIt seems like the right place for this unregister call would be earlier in Shutdown(), after scheduler thread is cancelled and the last signal is sent, for consistency with the register call, which is made when the scheduler thread is started.\n\nThis would let you flush the background queue when the signal scheduler is destr",https://github.com/bitcoin/bitcoin/pull/10179#discussion_r126473141,126473141,src/init.cpp
ryanofsky,2017-07-10T17:09:05Z,"In commit ""Flush CValidationInterface callbacks prior to destruction""\n\nComment should point out that this should only be called when scheduler is not active. Otherwise this could burn cpu racing with scheduler thread to run the next callback.",https://github.com/bitcoin/bitcoin/pull/10179#discussion_r126481557,126481557,src/scheduler.h
ryanofsky,2017-07-10T17:44:29Z,"In commit ""Support more than one CScheduler thread for serial clients""\n\nIt'd be good to just reset the scheduler pointer here instead of going overboard and destroying all the boost signals at this point as well. It just seems like a random and unexpected thing to be doing in a function called `UnregisterBackgroundSignalScheduler` especially given new flush behavior which allows signals be for",https://github.com/bitcoin/bitcoin/pull/10179#discussion_r126489884,126489884,src/validationinterface.cpp
TheBlueMatt,2017-07-11T01:02:20Z,"We cant unregister the background scheduler from the validation interface until we're sure nothing is gonna generate anymore callbacks (so, really, after the pcoinsTip/etc deletions). If we want to mirror the initialization order, we'd have to move it even further down, not up, as de-init in RAII order would be after wallet deltion.",https://github.com/bitcoin/bitcoin/pull/10179#discussion_r126573098,126573098,src/init.cpp
TheBlueMatt,2017-07-11T01:09:06Z,Added the assert instead,https://github.com/bitcoin/bitcoin/pull/10179#discussion_r126573737,126573737,src/scheduler.h
TheBlueMatt,2017-07-11T01:09:15Z,Added.,https://github.com/bitcoin/bitcoin/pull/10179#discussion_r126573753,126573753,src/validationinterface.cpp
