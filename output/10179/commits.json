[
  {
    "sha": "ff6a834fc32b25376e221fefa8c2a2565b4167cc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZjZhODM0ZmMzMmIyNTM3NmUyMjFmZWZhOGMyYTI1NjViNDE2N2Nj",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-04-27T00:13:24Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-07-04T00:52:25Z"
      },
      "message": "Use TestingSetup to DRY qt rpcnestedtests",
      "tree": {
        "sha": "6671f326e8f1a34b97f01ee1a87f9944fc4d2816",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6671f326e8f1a34b97f01ee1a87f9944fc4d2816"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ff6a834fc32b25376e221fefa8c2a2565b4167cc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff6a834fc32b25376e221fefa8c2a2565b4167cc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ff6a834fc32b25376e221fefa8c2a2565b4167cc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff6a834fc32b25376e221fefa8c2a2565b4167cc/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7397af9d314dd01ca3699efbe6eec68f62a6ef2b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7397af9d314dd01ca3699efbe6eec68f62a6ef2b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7397af9d314dd01ca3699efbe6eec68f62a6ef2b"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 3,
      "deletions": 19
    },
    "files": [
      {
        "sha": "fbad9e544ae8f00acd2f17d48c54f130d226fcf8",
        "filename": "src/qt/test/rpcnestedtests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 19,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff6a834fc32b25376e221fefa8c2a2565b4167cc/src/qt/test/rpcnestedtests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff6a834fc32b25376e221fefa8c2a2565b4167cc/src/qt/test/rpcnestedtests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/rpcnestedtests.cpp?ref=ff6a834fc32b25376e221fefa8c2a2565b4167cc",
        "patch": "@@ -12,6 +12,7 @@\n #include \"rpc/server.h\"\n #include \"rpcconsole.h\"\n #include \"test/testutil.h\"\n+#include \"test/test_bitcoin.h\"\n #include \"univalue.h\"\n #include \"util.h\"\n \n@@ -35,24 +36,15 @@ void RPCNestedTests::rpcNestedTests()\n {\n     // do some test setup\n     // could be moved to a more generic place when we add more tests on QT level\n-    const CChainParams& chainparams = Params();\n-    RegisterAllCoreRPCCommands(tableRPC);\n     tableRPC.appendCommand(\"rpcNestedTest\", &vRPCCommands[0]);\n     ClearDatadirCache();\n     std::string path = QDir::tempPath().toStdString() + \"/\" + strprintf(\"test_bitcoin_qt_%lu_%i\", (unsigned long)GetTime(), (int)(GetRand(100000)));\n     QDir dir(QString::fromStdString(path));\n     dir.mkpath(\".\");\n     ForceSetArg(\"-datadir\", path);\n     //mempool.setSanityCheck(1.0);\n-    pblocktree = new CBlockTreeDB(1 << 20, true);\n-    pcoinsdbview = new CCoinsViewDB(1 << 23, true);\n-    pcoinsTip = new CCoinsViewCache(pcoinsdbview);\n-    InitBlockIndex(chainparams);\n-    {\n-        CValidationState state;\n-        bool ok = ActivateBestChain(state, chainparams);\n-        QVERIFY(ok);\n-    }\n+\n+    TestingSetup test;\n \n     SetRPCWarmupFinished();\n \n@@ -145,13 +137,5 @@ void RPCNestedTests::rpcNestedTests()\n     QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(result, \"rpcNestedTest(abc,,)\"), std::runtime_error); //don't tollerate empty arguments when using ,\n #endif\n \n-    UnloadBlockIndex();\n-    delete pcoinsTip;\n-    pcoinsTip = nullptr;\n-    delete pcoinsdbview;\n-    pcoinsdbview = nullptr;\n-    delete pblocktree;\n-    pblocktree = nullptr;\n-\n     fs::remove_all(fs::path(path));\n }"
      }
    ]
  },
  {
    "sha": "3a19fed9db558a5f666d965b6f602f7faf74ab73",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYTE5ZmVkOWRiNTU4YTVmNjY2ZDk2NWI2ZjYwMmY3ZmFmNzRhYjcz",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-01-19T21:17:14Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-07-04T00:54:36Z"
      },
      "message": "Make ValidationInterface signals-type-agnostic\n\n(by hiding boost::signals stuff in the .cpp)\n\nThis allows us to give it a bit more intelligence as we move\nforward, including routing some signals through CScheduler. While\nthe introduction of a \"internals\" pointer in the class is pretty\nugly, the fact that we no longer need to include boost/signals\ndirectly from validationinterface.h is very much worth the loss.",
      "tree": {
        "sha": "140bdbcd44450a12f0a7c290f623e946637999a3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/140bdbcd44450a12f0a7c290f623e946637999a3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3a19fed9db558a5f666d965b6f602f7faf74ab73",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a19fed9db558a5f666d965b6f602f7faf74ab73",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3a19fed9db558a5f666d965b6f602f7faf74ab73",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a19fed9db558a5f666d965b6f602f7faf74ab73/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ff6a834fc32b25376e221fefa8c2a2565b4167cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff6a834fc32b25376e221fefa8c2a2565b4167cc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ff6a834fc32b25376e221fefa8c2a2565b4167cc"
      }
    ],
    "stats": {
      "total": 170,
      "additions": 117,
      "deletions": 53
    },
    "files": [
      {
        "sha": "7d0ab756e8ed6c293eb771f2f4a04e311a8a4f7e",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 81,
        "deletions": 27,
        "changes": 108,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a19fed9db558a5f666d965b6f602f7faf74ab73/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a19fed9db558a5f666d965b6f602f7faf74ab73/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=3a19fed9db558a5f666d965b6f602f7faf74ab73",
        "patch": "@@ -5,45 +5,99 @@\n \n #include \"validationinterface.h\"\n \n+#include <boost/signals2/signal.hpp>\n+\n+struct MainSignalsInstance {\n+    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n+    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n+    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::vector<CTransactionRef>&)> BlockConnected;\n+    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &)> BlockDisconnected;\n+    boost::signals2::signal<void (const CBlockLocator &)> SetBestChain;\n+    boost::signals2::signal<void (const uint256 &)> Inventory;\n+    boost::signals2::signal<void (int64_t nBestBlockTime, CConnman* connman)> Broadcast;\n+    boost::signals2::signal<void (const CBlock&, const CValidationState&)> BlockChecked;\n+    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n+};\n+\n static CMainSignals g_signals;\n \n+CMainSignals::CMainSignals() {\n+    m_internals.reset(new MainSignalsInstance());\n+}\n+\n CMainSignals& GetMainSignals()\n {\n     return g_signals;\n }\n \n void RegisterValidationInterface(CValidationInterface* pwalletIn) {\n-    g_signals.UpdatedBlockTip.connect(boost::bind(&CValidationInterface::UpdatedBlockTip, pwalletIn, _1, _2, _3));\n-    g_signals.TransactionAddedToMempool.connect(boost::bind(&CValidationInterface::TransactionAddedToMempool, pwalletIn, _1));\n-    g_signals.BlockConnected.connect(boost::bind(&CValidationInterface::BlockConnected, pwalletIn, _1, _2, _3));\n-    g_signals.BlockDisconnected.connect(boost::bind(&CValidationInterface::BlockDisconnected, pwalletIn, _1));\n-    g_signals.SetBestChain.connect(boost::bind(&CValidationInterface::SetBestChain, pwalletIn, _1));\n-    g_signals.Inventory.connect(boost::bind(&CValidationInterface::Inventory, pwalletIn, _1));\n-    g_signals.Broadcast.connect(boost::bind(&CValidationInterface::ResendWalletTransactions, pwalletIn, _1, _2));\n-    g_signals.BlockChecked.connect(boost::bind(&CValidationInterface::BlockChecked, pwalletIn, _1, _2));\n-    g_signals.NewPoWValidBlock.connect(boost::bind(&CValidationInterface::NewPoWValidBlock, pwalletIn, _1, _2));\n+    g_signals.m_internals->UpdatedBlockTip.connect(boost::bind(&CValidationInterface::UpdatedBlockTip, pwalletIn, _1, _2, _3));\n+    g_signals.m_internals->TransactionAddedToMempool.connect(boost::bind(&CValidationInterface::TransactionAddedToMempool, pwalletIn, _1));\n+    g_signals.m_internals->BlockConnected.connect(boost::bind(&CValidationInterface::BlockConnected, pwalletIn, _1, _2, _3));\n+    g_signals.m_internals->BlockDisconnected.connect(boost::bind(&CValidationInterface::BlockDisconnected, pwalletIn, _1));\n+    g_signals.m_internals->SetBestChain.connect(boost::bind(&CValidationInterface::SetBestChain, pwalletIn, _1));\n+    g_signals.m_internals->Inventory.connect(boost::bind(&CValidationInterface::Inventory, pwalletIn, _1));\n+    g_signals.m_internals->Broadcast.connect(boost::bind(&CValidationInterface::ResendWalletTransactions, pwalletIn, _1, _2));\n+    g_signals.m_internals->BlockChecked.connect(boost::bind(&CValidationInterface::BlockChecked, pwalletIn, _1, _2));\n+    g_signals.m_internals->NewPoWValidBlock.connect(boost::bind(&CValidationInterface::NewPoWValidBlock, pwalletIn, _1, _2));\n }\n \n void UnregisterValidationInterface(CValidationInterface* pwalletIn) {\n-    g_signals.BlockChecked.disconnect(boost::bind(&CValidationInterface::BlockChecked, pwalletIn, _1, _2));\n-    g_signals.Broadcast.disconnect(boost::bind(&CValidationInterface::ResendWalletTransactions, pwalletIn, _1, _2));\n-    g_signals.Inventory.disconnect(boost::bind(&CValidationInterface::Inventory, pwalletIn, _1));\n-    g_signals.SetBestChain.disconnect(boost::bind(&CValidationInterface::SetBestChain, pwalletIn, _1));\n-    g_signals.TransactionAddedToMempool.disconnect(boost::bind(&CValidationInterface::TransactionAddedToMempool, pwalletIn, _1));\n-    g_signals.BlockConnected.disconnect(boost::bind(&CValidationInterface::BlockConnected, pwalletIn, _1, _2, _3));\n-    g_signals.BlockDisconnected.disconnect(boost::bind(&CValidationInterface::BlockDisconnected, pwalletIn, _1));\n-    g_signals.UpdatedBlockTip.disconnect(boost::bind(&CValidationInterface::UpdatedBlockTip, pwalletIn, _1, _2, _3));\n-    g_signals.NewPoWValidBlock.disconnect(boost::bind(&CValidationInterface::NewPoWValidBlock, pwalletIn, _1, _2));\n+    g_signals.m_internals->BlockChecked.disconnect(boost::bind(&CValidationInterface::BlockChecked, pwalletIn, _1, _2));\n+    g_signals.m_internals->Broadcast.disconnect(boost::bind(&CValidationInterface::ResendWalletTransactions, pwalletIn, _1, _2));\n+    g_signals.m_internals->Inventory.disconnect(boost::bind(&CValidationInterface::Inventory, pwalletIn, _1));\n+    g_signals.m_internals->SetBestChain.disconnect(boost::bind(&CValidationInterface::SetBestChain, pwalletIn, _1));\n+    g_signals.m_internals->TransactionAddedToMempool.disconnect(boost::bind(&CValidationInterface::TransactionAddedToMempool, pwalletIn, _1));\n+    g_signals.m_internals->BlockConnected.disconnect(boost::bind(&CValidationInterface::BlockConnected, pwalletIn, _1, _2, _3));\n+    g_signals.m_internals->BlockDisconnected.disconnect(boost::bind(&CValidationInterface::BlockDisconnected, pwalletIn, _1));\n+    g_signals.m_internals->UpdatedBlockTip.disconnect(boost::bind(&CValidationInterface::UpdatedBlockTip, pwalletIn, _1, _2, _3));\n+    g_signals.m_internals->NewPoWValidBlock.disconnect(boost::bind(&CValidationInterface::NewPoWValidBlock, pwalletIn, _1, _2));\n }\n \n void UnregisterAllValidationInterfaces() {\n-    g_signals.BlockChecked.disconnect_all_slots();\n-    g_signals.Broadcast.disconnect_all_slots();\n-    g_signals.Inventory.disconnect_all_slots();\n-    g_signals.SetBestChain.disconnect_all_slots();\n-    g_signals.TransactionAddedToMempool.disconnect_all_slots();\n-    g_signals.BlockConnected.disconnect_all_slots();\n-    g_signals.BlockDisconnected.disconnect_all_slots();\n-    g_signals.UpdatedBlockTip.disconnect_all_slots();\n-    g_signals.NewPoWValidBlock.disconnect_all_slots();\n+    g_signals.m_internals->BlockChecked.disconnect_all_slots();\n+    g_signals.m_internals->Broadcast.disconnect_all_slots();\n+    g_signals.m_internals->Inventory.disconnect_all_slots();\n+    g_signals.m_internals->SetBestChain.disconnect_all_slots();\n+    g_signals.m_internals->TransactionAddedToMempool.disconnect_all_slots();\n+    g_signals.m_internals->BlockConnected.disconnect_all_slots();\n+    g_signals.m_internals->BlockDisconnected.disconnect_all_slots();\n+    g_signals.m_internals->UpdatedBlockTip.disconnect_all_slots();\n+    g_signals.m_internals->NewPoWValidBlock.disconnect_all_slots();\n+}\n+\n+void CMainSignals::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {\n+    m_internals->UpdatedBlockTip(pindexNew, pindexFork, fInitialDownload);\n+}\n+\n+void CMainSignals::TransactionAddedToMempool(const CTransactionRef &ptx) {\n+    m_internals->TransactionAddedToMempool(ptx);\n+}\n+\n+void CMainSignals::BlockConnected(const std::shared_ptr<const CBlock> &pblock, const CBlockIndex *pindex, const std::vector<CTransactionRef>& vtxConflicted) {\n+    m_internals->BlockConnected(pblock, pindex, vtxConflicted);\n+}\n+\n+void CMainSignals::BlockDisconnected(const std::shared_ptr<const CBlock> &pblock) {\n+    m_internals->BlockDisconnected(pblock);\n+}\n+\n+void CMainSignals::SetBestChain(const CBlockLocator &locator) {\n+    m_internals->SetBestChain(locator);\n+}\n+\n+void CMainSignals::Inventory(const uint256 &hash) {\n+    m_internals->Inventory(hash);\n+}\n+\n+void CMainSignals::Broadcast(int64_t nBestBlockTime, CConnman* connman) {\n+    m_internals->Broadcast(nBestBlockTime, connman);\n+}\n+\n+void CMainSignals::BlockChecked(const CBlock& block, const CValidationState& state) {\n+    m_internals->BlockChecked(block, state);\n+}\n+\n+void CMainSignals::NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock> &block) {\n+    m_internals->NewPoWValidBlock(pindex, block);\n }"
      },
      {
        "sha": "c248781a48e0615ef6eec76323d97cfd479e06b3",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 36,
        "deletions": 26,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a19fed9db558a5f666d965b6f602f7faf74ab73/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a19fed9db558a5f666d965b6f602f7faf74ab73/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=3a19fed9db558a5f666d965b6f602f7faf74ab73",
        "patch": "@@ -6,7 +6,6 @@\n #ifndef BITCOIN_VALIDATIONINTERFACE_H\n #define BITCOIN_VALIDATIONINTERFACE_H\n \n-#include <boost/signals2/signal.hpp>\n #include <memory>\n \n #include \"primitives/transaction.h\" // CTransaction(Ref)\n@@ -32,49 +31,60 @@ void UnregisterAllValidationInterfaces();\n \n class CValidationInterface {\n protected:\n-    virtual void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {}\n-    virtual void TransactionAddedToMempool(const CTransactionRef &ptxn) {}\n-    virtual void BlockConnected(const std::shared_ptr<const CBlock> &block, const CBlockIndex *pindex, const std::vector<CTransactionRef> &txnConflicted) {}\n-    virtual void BlockDisconnected(const std::shared_ptr<const CBlock> &block) {}\n-    virtual void SetBestChain(const CBlockLocator &locator) {}\n-    virtual void Inventory(const uint256 &hash) {}\n-    virtual void ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman) {}\n-    virtual void BlockChecked(const CBlock&, const CValidationState&) {}\n-    virtual void NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& block) {};\n-    friend void ::RegisterValidationInterface(CValidationInterface*);\n-    friend void ::UnregisterValidationInterface(CValidationInterface*);\n-    friend void ::UnregisterAllValidationInterfaces();\n-};\n-\n-struct CMainSignals {\n     /** Notifies listeners of updated block chain tip */\n-    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n+    virtual void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {}\n     /** Notifies listeners of a transaction having been added to mempool. */\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n+    virtual void TransactionAddedToMempool(const CTransactionRef &ptxn) {}\n     /**\n      * Notifies listeners of a block being connected.\n      * Provides a vector of transactions evicted from the mempool as a result.\n      */\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::vector<CTransactionRef> &)> BlockConnected;\n+    virtual void BlockConnected(const std::shared_ptr<const CBlock> &block, const CBlockIndex *pindex, const std::vector<CTransactionRef> &txnConflicted) {}\n     /** Notifies listeners of a block being disconnected */\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &)> BlockDisconnected;\n-    /** Notifies listeners of a new active block chain. */\n-    boost::signals2::signal<void (const CBlockLocator &)> SetBestChain;\n+    virtual void BlockDisconnected(const std::shared_ptr<const CBlock> &block) {}\n+    /** Notifies listeners of the new active block chain on-disk. */\n+    virtual void SetBestChain(const CBlockLocator &locator) {}\n     /** Notifies listeners about an inventory item being seen on the network. */\n-    boost::signals2::signal<void (const uint256 &)> Inventory;\n+    virtual void Inventory(const uint256 &hash) {}\n     /** Tells listeners to broadcast their data. */\n-    boost::signals2::signal<void (int64_t nBestBlockTime, CConnman* connman)> Broadcast;\n+    virtual void ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman) {}\n     /**\n      * Notifies listeners of a block validation result.\n      * If the provided CValidationState IsValid, the provided block\n      * is guaranteed to be the current best block at the time the\n      * callback was generated (not necessarily now)\n      */\n-    boost::signals2::signal<void (const CBlock&, const CValidationState&)> BlockChecked;\n+    virtual void BlockChecked(const CBlock&, const CValidationState&) {}\n     /**\n      * Notifies listeners that a block which builds directly on our current tip\n      * has been received and connected to the headers tree, though not validated yet */\n-    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n+    virtual void NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& block) {};\n+    friend void ::RegisterValidationInterface(CValidationInterface*);\n+    friend void ::UnregisterValidationInterface(CValidationInterface*);\n+    friend void ::UnregisterAllValidationInterfaces();\n+};\n+\n+struct MainSignalsInstance;\n+class CMainSignals {\n+private:\n+    std::unique_ptr<MainSignalsInstance> m_internals;\n+\n+    friend void ::RegisterValidationInterface(CValidationInterface*);\n+    friend void ::UnregisterValidationInterface(CValidationInterface*);\n+    friend void ::UnregisterAllValidationInterfaces();\n+public:\n+    CMainSignals();\n+\n+    void UpdatedBlockTip(const CBlockIndex *, const CBlockIndex *, bool fInitialDownload);\n+    void TransactionAddedToMempool(const CTransactionRef &);\n+    void BlockConnected(const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::vector<CTransactionRef> &);\n+    void BlockDisconnected(const std::shared_ptr<const CBlock> &);\n+    void UpdatedTransaction(const uint256 &);\n+    void SetBestChain(const CBlockLocator &);\n+    void Inventory(const uint256 &);\n+    void Broadcast(int64_t nBestBlockTime, CConnman* connman);\n+    void BlockChecked(const CBlock&, const CValidationState&);\n+    void NewPoWValidBlock(const CBlockIndex *, const std::shared_ptr<const CBlock>&);\n };\n \n CMainSignals& GetMainSignals();"
      }
    ]
  },
  {
    "sha": "cda1429d5bfee129a0d1f6f1c65962b30251bafb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZGExNDI5ZDViZmVlMTI5YTBkMWY2ZjFjNjU5NjJiMzAyNTFiYWZi",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-01-19T21:49:22Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-07-07T15:33:18Z"
      },
      "message": "Give CMainSignals a reference to the global scheduler\n\n...so that it can run some signals in the background later",
      "tree": {
        "sha": "5625a6b2d9e5fd5cfe23c453ebbd6e1f34f362a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5625a6b2d9e5fd5cfe23c453ebbd6e1f34f362a9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cda1429d5bfee129a0d1f6f1c65962b30251bafb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cda1429d5bfee129a0d1f6f1c65962b30251bafb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cda1429d5bfee129a0d1f6f1c65962b30251bafb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cda1429d5bfee129a0d1f6f1c65962b30251bafb/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3a19fed9db558a5f666d965b6f602f7faf74ab73",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a19fed9db558a5f666d965b6f602f7faf74ab73",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3a19fed9db558a5f666d965b6f602f7faf74ab73"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 32,
      "deletions": 0
    },
    "files": [
      {
        "sha": "94bba6820e49763cb9e73d0e3722d963667621e4",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cda1429d5bfee129a0d1f6f1c65962b30251bafb/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cda1429d5bfee129a0d1f6f1c65962b30251bafb/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=cda1429d5bfee129a0d1f6f1c65962b30251bafb",
        "patch": "@@ -251,6 +251,7 @@ void Shutdown()\n     }\n #endif\n     UnregisterAllValidationInterfaces();\n+    GetMainSignals().UnregisterBackgroundSignalScheduler();\n #ifdef ENABLE_WALLET\n     for (CWalletRef pwallet : vpwallets) {\n         delete pwallet;\n@@ -1203,6 +1204,8 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     CScheduler::Function serviceLoop = boost::bind(&CScheduler::serviceQueue, &scheduler);\n     threadGroup.create_thread(boost::bind(&TraceThread<CScheduler::Function>, \"scheduler\", serviceLoop));\n \n+    GetMainSignals().RegisterBackgroundSignalScheduler(scheduler);\n+\n     /* Start the RPC server already.  It will be started in \"warmup\" mode\n      * and not really process calls already (but it will signify connections\n      * that the server is there and will be ready later).  Warmup mode will"
      },
      {
        "sha": "e6a8cc779dbf219282419423cdd28120c4067da4",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cda1429d5bfee129a0d1f6f1c65962b30251bafb/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cda1429d5bfee129a0d1f6f1c65962b30251bafb/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=cda1429d5bfee129a0d1f6f1c65962b30251bafb",
        "patch": "@@ -62,6 +62,12 @@ TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(cha\n         pathTemp = GetTempPath() / strprintf(\"test_bitcoin_%lu_%i\", (unsigned long)GetTime(), (int)(InsecureRandRange(100000)));\n         fs::create_directories(pathTemp);\n         ForceSetArg(\"-datadir\", pathTemp.string());\n+\n+        // Note that because we don't bother running a scheduler thread here,\n+        // callbacks via CValidationInterface are unreliable, but that's OK,\n+        // our unit tests aren't testing multiple parts of the code at once.\n+        GetMainSignals().RegisterBackgroundSignalScheduler(scheduler);\n+\n         mempool.setSanityCheck(1.0);\n         pblocktree = new CBlockTreeDB(1 << 20, true);\n         pcoinsdbview = new CCoinsViewDB(1 << 23, true);\n@@ -88,6 +94,7 @@ TestingSetup::~TestingSetup()\n         UnregisterNodeSignals(GetNodeSignals());\n         threadGroup.interrupt_all();\n         threadGroup.join_all();\n+        GetMainSignals().UnregisterBackgroundSignalScheduler();\n         UnloadBlockIndex();\n         delete pcoinsTip;\n         delete pcoinsdbview;"
      },
      {
        "sha": "dd3b13c8c8944d80e3ece2e3e9e57bd907c31bb7",
        "filename": "src/test/test_bitcoin.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cda1429d5bfee129a0d1f6f1c65962b30251bafb/src/test/test_bitcoin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cda1429d5bfee129a0d1f6f1c65962b30251bafb/src/test/test_bitcoin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.h?ref=cda1429d5bfee129a0d1f6f1c65962b30251bafb",
        "patch": "@@ -10,6 +10,7 @@\n #include \"key.h\"\n #include \"pubkey.h\"\n #include \"random.h\"\n+#include \"scheduler.h\"\n #include \"txdb.h\"\n #include \"txmempool.h\"\n \n@@ -53,6 +54,7 @@ struct TestingSetup: public BasicTestingSetup {\n     fs::path pathTemp;\n     boost::thread_group threadGroup;\n     CConnman* connman;\n+    CScheduler scheduler;\n \n     TestingSetup(const std::string& chainName = CBaseChainParams::MAIN);\n     ~TestingSetup();"
      },
      {
        "sha": "a17a08eee2ad88c87256986754fe8d7b34ee5029",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cda1429d5bfee129a0d1f6f1c65962b30251bafb/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cda1429d5bfee129a0d1f6f1c65962b30251bafb/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=cda1429d5bfee129a0d1f6f1c65962b30251bafb",
        "patch": "@@ -4,6 +4,8 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"validationinterface.h\"\n+#include \"init.h\"\n+#include \"scheduler.h\"\n \n #include <boost/signals2/signal.hpp>\n \n@@ -17,6 +19,8 @@ struct MainSignalsInstance {\n     boost::signals2::signal<void (int64_t nBestBlockTime, CConnman* connman)> Broadcast;\n     boost::signals2::signal<void (const CBlock&, const CValidationState&)> BlockChecked;\n     boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n+\n+    CScheduler *m_scheduler = NULL;\n };\n \n static CMainSignals g_signals;\n@@ -25,6 +29,15 @@ CMainSignals::CMainSignals() {\n     m_internals.reset(new MainSignalsInstance());\n }\n \n+void CMainSignals::RegisterBackgroundSignalScheduler(CScheduler& scheduler) {\n+    assert(!m_internals->m_scheduler);\n+    m_internals->m_scheduler = &scheduler;\n+}\n+\n+void CMainSignals::UnregisterBackgroundSignalScheduler() {\n+    m_internals->m_scheduler = NULL;\n+}\n+\n CMainSignals& GetMainSignals()\n {\n     return g_signals;"
      },
      {
        "sha": "8cae3c6db4e4a6bc275b8243b3b46490c0f4c267",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cda1429d5bfee129a0d1f6f1c65962b30251bafb/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cda1429d5bfee129a0d1f6f1c65962b30251bafb/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=cda1429d5bfee129a0d1f6f1c65962b30251bafb",
        "patch": "@@ -19,6 +19,7 @@ class CReserveScript;\n class CValidationInterface;\n class CValidationState;\n class uint256;\n+class CScheduler;\n \n // These functions dispatch to one or all registered wallets\n \n@@ -72,9 +73,15 @@ class CMainSignals {\n     friend void ::RegisterValidationInterface(CValidationInterface*);\n     friend void ::UnregisterValidationInterface(CValidationInterface*);\n     friend void ::UnregisterAllValidationInterfaces();\n+\n public:\n     CMainSignals();\n \n+    /** Register a CScheduler to give callbacks which should run in the background (may only be called once) */\n+    void RegisterBackgroundSignalScheduler(CScheduler& scheduler);\n+    /** Unregister a CScheduler to give callbacks which should run in the background - these callbacks will now be dropped! */\n+    void UnregisterBackgroundSignalScheduler();\n+\n     void UpdatedBlockTip(const CBlockIndex *, const CBlockIndex *, bool fInitialDownload);\n     void TransactionAddedToMempool(const CTransactionRef &);\n     void BlockConnected(const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::vector<CTransactionRef> &);"
      }
    ]
  },
  {
    "sha": "2fbf2dbe151e135586cc1bb05b891f2c8ab6c817",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZmJmMmRiZTE1MWUxMzU1ODZjYzFiYjA1Yjg5MWYyYzhhYjZjODE3",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-01-20T20:10:43Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-07-07T15:33:18Z"
      },
      "message": "Add default arg to CScheduler to schedule() a callback now",
      "tree": {
        "sha": "6e338cd312bd30b1da98951af48aa885bb922d07",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6e338cd312bd30b1da98951af48aa885bb922d07"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2fbf2dbe151e135586cc1bb05b891f2c8ab6c817",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2fbf2dbe151e135586cc1bb05b891f2c8ab6c817",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2fbf2dbe151e135586cc1bb05b891f2c8ab6c817",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2fbf2dbe151e135586cc1bb05b891f2c8ab6c817/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cda1429d5bfee129a0d1f6f1c65962b30251bafb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cda1429d5bfee129a0d1f6f1c65962b30251bafb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cda1429d5bfee129a0d1f6f1c65962b30251bafb"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "5da6e6f69f15a7d888eb19f8e6fa100eb11cedc3",
        "filename": "src/scheduler.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2fbf2dbe151e135586cc1bb05b891f2c8ab6c817/src/scheduler.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2fbf2dbe151e135586cc1bb05b891f2c8ab6c817/src/scheduler.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scheduler.h?ref=2fbf2dbe151e135586cc1bb05b891f2c8ab6c817",
        "patch": "@@ -41,7 +41,7 @@ class CScheduler\n     typedef std::function<void(void)> Function;\n \n     // Call func at/after time t\n-    void schedule(Function f, boost::chrono::system_clock::time_point t);\n+    void schedule(Function f, boost::chrono::system_clock::time_point t=boost::chrono::system_clock::now());\n \n     // Convenience method: call f once deltaSeconds from now\n     void scheduleFromNow(Function f, int64_t deltaMilliSeconds);"
      }
    ]
  },
  {
    "sha": "08096bbbc6d6fef86943ca8ce5e6de18744d58ea",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowODA5NmJiYmM2ZDZmZWY4Njk0M2NhOGNlNWU2ZGUxODc0NGQ1OGVh",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-04-10T18:55:49Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-07-07T15:33:18Z"
      },
      "message": "Support more than one CScheduler thread for serial clients\n\nThis will be used by CValidationInterface soon.\n\nThis requires a bit of work as we need to ensure that most of our\ncallbacks happen in-order (to avoid synchronization issues in\nwallet) - we keep our own internal queue and push things onto it,\nscheduling a queue-draining function immediately upon new\ncallbacks.",
      "tree": {
        "sha": "b1199ad23ceb259db07d8f3fb3b6dbe4c996fefa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b1199ad23ceb259db07d8f3fb3b6dbe4c996fefa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/08096bbbc6d6fef86943ca8ce5e6de18744d58ea",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08096bbbc6d6fef86943ca8ce5e6de18744d58ea",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/08096bbbc6d6fef86943ca8ce5e6de18744d58ea",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08096bbbc6d6fef86943ca8ce5e6de18744d58ea/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2fbf2dbe151e135586cc1bb05b891f2c8ab6c817",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2fbf2dbe151e135586cc1bb05b891f2c8ab6c817",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2fbf2dbe151e135586cc1bb05b891f2c8ab6c817"
      }
    ],
    "stats": {
      "total": 100,
      "additions": 90,
      "deletions": 10
    },
    "files": [
      {
        "sha": "a76a87e10a6bac85605653009bd108d656563460",
        "filename": "src/scheduler.cpp",
        "status": "modified",
        "additions": 52,
        "deletions": 0,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08096bbbc6d6fef86943ca8ce5e6de18744d58ea/src/scheduler.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08096bbbc6d6fef86943ca8ce5e6de18744d58ea/src/scheduler.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scheduler.cpp?ref=08096bbbc6d6fef86943ca8ce5e6de18744d58ea",
        "patch": "@@ -139,3 +139,55 @@ size_t CScheduler::getQueueInfo(boost::chrono::system_clock::time_point &first,\n     }\n     return result;\n }\n+\n+\n+void SingleThreadedSchedulerClient::MaybeScheduleProcessQueue() {\n+    {\n+        LOCK(m_cs_callbacks_pending);\n+        // Try to avoid scheduling too many copies here, but if we\n+        // accidentally have two ProcessQueue's scheduled at once its\n+        // not a big deal.\n+        if (m_are_callbacks_running) return;\n+        if (m_callbacks_pending.empty()) return;\n+    }\n+    m_pscheduler->schedule(std::bind(&SingleThreadedSchedulerClient::ProcessQueue, this));\n+}\n+\n+void SingleThreadedSchedulerClient::ProcessQueue() {\n+    std::function<void (void)> callback;\n+    {\n+        LOCK(m_cs_callbacks_pending);\n+        if (m_are_callbacks_running) return;\n+        if (m_callbacks_pending.empty()) return;\n+        m_are_callbacks_running = true;\n+\n+        callback = std::move(m_callbacks_pending.front());\n+        m_callbacks_pending.pop_front();\n+    }\n+\n+    // RAII the setting of fCallbacksRunning and calling MaybeScheduleProcessQueue\n+    // to ensure both happen safely even if callback() throws.\n+    struct RAIICallbacksRunning {\n+        SingleThreadedSchedulerClient* instance;\n+        RAIICallbacksRunning(SingleThreadedSchedulerClient* _instance) : instance(_instance) {}\n+        ~RAIICallbacksRunning() {\n+            {\n+                LOCK(instance->m_cs_callbacks_pending);\n+                instance->m_are_callbacks_running = false;\n+            }\n+            instance->MaybeScheduleProcessQueue();\n+        }\n+    } raiicallbacksrunning(this);\n+\n+    callback();\n+}\n+\n+void SingleThreadedSchedulerClient::AddToProcessQueue(std::function<void (void)> func) {\n+    assert(m_pscheduler);\n+\n+    {\n+        LOCK(m_cs_callbacks_pending);\n+        m_callbacks_pending.emplace_back(std::move(func));\n+    }\n+    MaybeScheduleProcessQueue();\n+}"
      },
      {
        "sha": "82036afdf02225185d2510a66a0597eb11414313",
        "filename": "src/scheduler.h",
        "status": "modified",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08096bbbc6d6fef86943ca8ce5e6de18744d58ea/src/scheduler.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08096bbbc6d6fef86943ca8ce5e6de18744d58ea/src/scheduler.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scheduler.h?ref=08096bbbc6d6fef86943ca8ce5e6de18744d58ea",
        "patch": "@@ -14,6 +14,8 @@\n #include <boost/thread.hpp>\n #include <map>\n \n+#include \"sync.h\"\n+\n //\n // Simple class for background tasks that should be run\n // periodically or once \"after a while\"\n@@ -79,4 +81,26 @@ class CScheduler\n     bool shouldStop() { return stopRequested || (stopWhenEmpty && taskQueue.empty()); }\n };\n \n+/**\n+ * Class used by CScheduler clients which may schedule multiple jobs\n+ * which are required to be run serially. Does not require such jobs\n+ * to be executed on the same thread, but no two jobs will be executed\n+ * at the same time.\n+ */\n+class SingleThreadedSchedulerClient {\n+private:\n+    CScheduler *m_pscheduler;\n+\n+    CCriticalSection m_cs_callbacks_pending;\n+    std::list<std::function<void (void)>> m_callbacks_pending;\n+    bool m_are_callbacks_running = false;\n+\n+    void MaybeScheduleProcessQueue();\n+    void ProcessQueue();\n+\n+public:\n+    SingleThreadedSchedulerClient(CScheduler *pschedulerIn) : m_pscheduler(pschedulerIn) {}\n+    void AddToProcessQueue(std::function<void (void)> func);\n+};\n+\n #endif"
      },
      {
        "sha": "8edc7c398dae6b64bd90c9b176723ea67c54bb3a",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 8,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08096bbbc6d6fef86943ca8ce5e6de18744d58ea/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08096bbbc6d6fef86943ca8ce5e6de18744d58ea/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=08096bbbc6d6fef86943ca8ce5e6de18744d58ea",
        "patch": "@@ -6,6 +6,11 @@\n #include \"validationinterface.h\"\n #include \"init.h\"\n #include \"scheduler.h\"\n+#include \"sync.h\"\n+#include \"util.h\"\n+\n+#include <list>\n+#include <atomic>\n \n #include <boost/signals2/signal.hpp>\n \n@@ -20,22 +25,23 @@ struct MainSignalsInstance {\n     boost::signals2::signal<void (const CBlock&, const CValidationState&)> BlockChecked;\n     boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n \n-    CScheduler *m_scheduler = NULL;\n+    // We are not allowed to assume the scheduler only runs in one thread,\n+    // but must ensure all callbacks happen in-order, so we end up creating\n+    // our own queue here :(\n+    SingleThreadedSchedulerClient m_schedulerClient;\n+\n+    MainSignalsInstance(CScheduler *pscheduler) : m_schedulerClient(pscheduler) {}\n };\n \n static CMainSignals g_signals;\n \n-CMainSignals::CMainSignals() {\n-    m_internals.reset(new MainSignalsInstance());\n-}\n-\n void CMainSignals::RegisterBackgroundSignalScheduler(CScheduler& scheduler) {\n-    assert(!m_internals->m_scheduler);\n-    m_internals->m_scheduler = &scheduler;\n+    assert(!m_internals);\n+    m_internals.reset(new MainSignalsInstance(&scheduler));\n }\n \n void CMainSignals::UnregisterBackgroundSignalScheduler() {\n-    m_internals->m_scheduler = NULL;\n+    m_internals.reset(nullptr);\n }\n \n CMainSignals& GetMainSignals()"
      },
      {
        "sha": "fbfe273b10c8f59966e8f3f924959a980ce0a0dd",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08096bbbc6d6fef86943ca8ce5e6de18744d58ea/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08096bbbc6d6fef86943ca8ce5e6de18744d58ea/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=08096bbbc6d6fef86943ca8ce5e6de18744d58ea",
        "patch": "@@ -75,8 +75,6 @@ class CMainSignals {\n     friend void ::UnregisterAllValidationInterfaces();\n \n public:\n-    CMainSignals();\n-\n     /** Register a CScheduler to give callbacks which should run in the background (may only be called once) */\n     void RegisterBackgroundSignalScheduler(CScheduler& scheduler);\n     /** Unregister a CScheduler to give callbacks which should run in the background - these callbacks will now be dropped! */"
      }
    ]
  },
  {
    "sha": "3192975f1d177aa9f0bbd823c6387cfbfa943610",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMTkyOTc1ZjFkMTc3YWE5ZjBiYmQ4MjNjNjM4N2NmYmZhOTQzNjEw",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-06-27T23:07:52Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-07-07T16:55:57Z"
      },
      "message": "Flush CValidationInterface callbacks prior to destruction\n\nNote that the CScheduler thread cant be running at this point,\nit has already been stopped with the rest of the init threadgroup.\nThus, just calling any remaining loose callbacks during Shutdown()\nis sane.",
      "tree": {
        "sha": "c14016ecb6fc50d7fc33b002368348efa8e12745",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c14016ecb6fc50d7fc33b002368348efa8e12745"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3192975f1d177aa9f0bbd823c6387cfbfa943610",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3192975f1d177aa9f0bbd823c6387cfbfa943610",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3192975f1d177aa9f0bbd823c6387cfbfa943610",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3192975f1d177aa9f0bbd823c6387cfbfa943610/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "08096bbbc6d6fef86943ca8ce5e6de18744d58ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08096bbbc6d6fef86943ca8ce5e6de18744d58ea",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/08096bbbc6d6fef86943ca8ce5e6de18744d58ea"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 32,
      "deletions": 0
    },
    "files": [
      {
        "sha": "12f29a4ca877f05bf6a0c63fd28823f62deff576",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3192975f1d177aa9f0bbd823c6387cfbfa943610/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3192975f1d177aa9f0bbd823c6387cfbfa943610/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=3192975f1d177aa9f0bbd823c6387cfbfa943610",
        "patch": "@@ -215,6 +215,19 @@ void Shutdown()\n         fFeeEstimatesInitialized = false;\n     }\n \n+    // FlushStateToDisk generates a SetBestChain callback, which we should avoid missing\n+    FlushStateToDisk();\n+\n+    // After there are no more peers/RPC left to give us new data which may generate\n+    // CValidationInterface callbacks, flush them...\n+    GetMainSignals().FlushBackgroundCallbacks();\n+\n+    // Any future callbacks will be dropped. This should absolutely be safe - if\n+    // missing a callback results in an unrecoverable situation, unclean shutdown\n+    // would too. The only reason to do the above flushes is to let the wallet catch\n+    // up with our current chain to avoid any strange pruning edge cases and make\n+    // next startup faster by avoiding rescan.\n+\n     {\n         LOCK(cs_main);\n         if (pcoinsTip != NULL) {"
      },
      {
        "sha": "35bf0da4becac8282f0b890a774fce43bbf822fc",
        "filename": "src/scheduler.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3192975f1d177aa9f0bbd823c6387cfbfa943610/src/scheduler.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3192975f1d177aa9f0bbd823c6387cfbfa943610/src/scheduler.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scheduler.cpp?ref=3192975f1d177aa9f0bbd823c6387cfbfa943610",
        "patch": "@@ -191,3 +191,12 @@ void SingleThreadedSchedulerClient::AddToProcessQueue(std::function<void (void)>\n     }\n     MaybeScheduleProcessQueue();\n }\n+\n+void SingleThreadedSchedulerClient::EmptyQueue() {\n+    bool should_continue = true;\n+    while (should_continue) {\n+        ProcessQueue();\n+        LOCK(m_cs_callbacks_pending);\n+        should_continue = !m_callbacks_pending.empty();\n+    }\n+}"
      },
      {
        "sha": "6a079f7749e8d31daf282469cff446f116d0b1a6",
        "filename": "src/scheduler.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3192975f1d177aa9f0bbd823c6387cfbfa943610/src/scheduler.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3192975f1d177aa9f0bbd823c6387cfbfa943610/src/scheduler.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scheduler.h?ref=3192975f1d177aa9f0bbd823c6387cfbfa943610",
        "patch": "@@ -101,6 +101,9 @@ class SingleThreadedSchedulerClient {\n public:\n     SingleThreadedSchedulerClient(CScheduler *pschedulerIn) : m_pscheduler(pschedulerIn) {}\n     void AddToProcessQueue(std::function<void (void)> func);\n+\n+    // Processes all remaining queue members on the calling thread, blocking until queue is empty\n+    void EmptyQueue();\n };\n \n #endif"
      },
      {
        "sha": "3ba81ed17b5e7ed53582aff9df7e8e3eb981844d",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3192975f1d177aa9f0bbd823c6387cfbfa943610/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3192975f1d177aa9f0bbd823c6387cfbfa943610/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=3192975f1d177aa9f0bbd823c6387cfbfa943610",
        "patch": "@@ -94,6 +94,7 @@ TestingSetup::~TestingSetup()\n         UnregisterNodeSignals(GetNodeSignals());\n         threadGroup.interrupt_all();\n         threadGroup.join_all();\n+        GetMainSignals().FlushBackgroundCallbacks();\n         GetMainSignals().UnregisterBackgroundSignalScheduler();\n         UnloadBlockIndex();\n         delete pcoinsTip;"
      },
      {
        "sha": "bf20d606f833bf033df5787f210b606b8209dae2",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3192975f1d177aa9f0bbd823c6387cfbfa943610/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3192975f1d177aa9f0bbd823c6387cfbfa943610/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=3192975f1d177aa9f0bbd823c6387cfbfa943610",
        "patch": "@@ -44,6 +44,10 @@ void CMainSignals::UnregisterBackgroundSignalScheduler() {\n     m_internals.reset(nullptr);\n }\n \n+void CMainSignals::FlushBackgroundCallbacks() {\n+    m_internals->m_schedulerClient.EmptyQueue();\n+}\n+\n CMainSignals& GetMainSignals()\n {\n     return g_signals;"
      },
      {
        "sha": "568da66df283c002c17b2ab8c46608c76980e9d5",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3192975f1d177aa9f0bbd823c6387cfbfa943610/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3192975f1d177aa9f0bbd823c6387cfbfa943610/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=3192975f1d177aa9f0bbd823c6387cfbfa943610",
        "patch": "@@ -79,6 +79,8 @@ class CMainSignals {\n     void RegisterBackgroundSignalScheduler(CScheduler& scheduler);\n     /** Unregister a CScheduler to give callbacks which should run in the background - these callbacks will now be dropped! */\n     void UnregisterBackgroundSignalScheduler();\n+    /** Call any remaining callbacks on the calling thread */\n+    void FlushBackgroundCallbacks();\n \n     void UpdatedBlockTip(const CBlockIndex *, const CBlockIndex *, bool fInitialDownload);\n     void TransactionAddedToMempool(const CTransactionRef &);"
      }
    ]
  },
  {
    "sha": "1f668b646806f94acd851acdbd9939c24e0492d3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZjY2OGI2NDY4MDZmOTRhY2Q4NTFhY2RiZDk5MzljMjRlMDQ5MmQz",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-07-11T01:08:19Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-07-11T01:08:19Z"
      },
      "message": "Expose if CScheduler is being serviced, assert its not in EmptyQueue",
      "tree": {
        "sha": "c771b63f06207f18c7956ca5c40d2924972ba92b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c771b63f06207f18c7956ca5c40d2924972ba92b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1f668b646806f94acd851acdbd9939c24e0492d3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f668b646806f94acd851acdbd9939c24e0492d3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1f668b646806f94acd851acdbd9939c24e0492d3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f668b646806f94acd851acdbd9939c24e0492d3/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3192975f1d177aa9f0bbd823c6387cfbfa943610",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3192975f1d177aa9f0bbd823c6387cfbfa943610",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3192975f1d177aa9f0bbd823c6387cfbfa943610"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 9,
      "deletions": 0
    },
    "files": [
      {
        "sha": "36a6d5110d940dd973562324a863c760eb3c76c2",
        "filename": "src/scheduler.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f668b646806f94acd851acdbd9939c24e0492d3/src/scheduler.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f668b646806f94acd851acdbd9939c24e0492d3/src/scheduler.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scheduler.cpp?ref=1f668b646806f94acd851acdbd9939c24e0492d3",
        "patch": "@@ -140,6 +140,10 @@ size_t CScheduler::getQueueInfo(boost::chrono::system_clock::time_point &first,\n     return result;\n }\n \n+bool CScheduler::AreThreadsServicingQueue() const {\n+    return nThreadsServicingQueue;\n+}\n+\n \n void SingleThreadedSchedulerClient::MaybeScheduleProcessQueue() {\n     {\n@@ -193,6 +197,7 @@ void SingleThreadedSchedulerClient::AddToProcessQueue(std::function<void (void)>\n }\n \n void SingleThreadedSchedulerClient::EmptyQueue() {\n+    assert(!m_pscheduler->AreThreadsServicingQueue());\n     bool should_continue = true;\n     while (should_continue) {\n         ProcessQueue();"
      },
      {
        "sha": "0365d668b209b85eeedb6e1d51e60649d6b57692",
        "filename": "src/scheduler.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f668b646806f94acd851acdbd9939c24e0492d3/src/scheduler.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f668b646806f94acd851acdbd9939c24e0492d3/src/scheduler.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scheduler.h?ref=1f668b646806f94acd851acdbd9939c24e0492d3",
        "patch": "@@ -71,6 +71,9 @@ class CScheduler\n     size_t getQueueInfo(boost::chrono::system_clock::time_point &first,\n                         boost::chrono::system_clock::time_point &last) const;\n \n+    // Returns true if there are threads actively running in serviceQueue()\n+    bool AreThreadsServicingQueue() const;\n+\n private:\n     std::multimap<boost::chrono::system_clock::time_point, Function> taskQueue;\n     boost::condition_variable newTaskScheduled;\n@@ -103,6 +106,7 @@ class SingleThreadedSchedulerClient {\n     void AddToProcessQueue(std::function<void (void)> func);\n \n     // Processes all remaining queue members on the calling thread, blocking until queue is empty\n+    // Must be called after the CScheduler has no remaining processing threads!\n     void EmptyQueue();\n };\n "
      }
    ]
  }
]