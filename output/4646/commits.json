[
  {
    "sha": "8c84a55f83977765ba9181184eb0e5be097a869f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4Yzg0YTU1ZjgzOTc3NzY1YmE5MTgxMTg0ZWIwZTViZTA5N2E4Njlm",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jgarzik@bitpay.com",
        "date": "2014-08-07T04:50:21Z"
      },
      "committer": {
        "name": "Jeff Garzik",
        "email": "jgarzik@bitpay.com",
        "date": "2014-08-07T04:50:21Z"
      },
      "message": "Move message processing to new 'procmsg' module.\n\nCompiles and passes tests.  Could use some refinement.",
      "tree": {
        "sha": "a8bb440385d5c218dc926ed57f5f9c9d2e5cc1ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a8bb440385d5c218dc926ed57f5f9c9d2e5cc1ea"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8c84a55f83977765ba9181184eb0e5be097a869f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c84a55f83977765ba9181184eb0e5be097a869f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8c84a55f83977765ba9181184eb0e5be097a869f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c84a55f83977765ba9181184eb0e5be097a869f/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "8833acc4c979877993f87c8fdc8a6d14cd072ba2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8833acc4c979877993f87c8fdc8a6d14cd072ba2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8833acc4c979877993f87c8fdc8a6d14cd072ba2"
      }
    ],
    "stats": {
      "total": 2747,
      "additions": 1384,
      "deletions": 1363
    },
    "files": [
      {
        "sha": "a6b016704dd6d5262ff00a1006d84ad75be44042",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c84a55f83977765ba9181184eb0e5be097a869f/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c84a55f83977765ba9181184eb0e5be097a869f/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=8c84a55f83977765ba9181184eb0e5be097a869f",
        "patch": "@@ -148,6 +148,7 @@ libbitcoin_server_a_SOURCES = \\\n   net.cpp \\\n   noui.cpp \\\n   pow.cpp \\\n+  procmsg.cpp \\\n   rpcblockchain.cpp \\\n   rpcmining.cpp \\\n   rpcmisc.cpp \\"
      },
      {
        "sha": "90c357676caed1ea21120357974f33cba0b26c91",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1363,
        "changes": 1368,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c84a55f83977765ba9181184eb0e5be097a869f/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c84a55f83977765ba9181184eb0e5be097a869f/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=8c84a55f83977765ba9181184eb0e5be097a869f",
        "patch": "@@ -54,16 +54,10 @@ CFeeRate minRelayTxFee = CFeeRate(1000);\n \n CTxMemPool mempool(::minRelayTxFee);\n \n-struct COrphanBlock {\n-    uint256 hashBlock;\n-    uint256 hashPrev;\n-    vector<unsigned char> vchBlock;\n-};\n map<uint256, COrphanBlock*> mapOrphanBlocks;\n multimap<uint256, COrphanBlock*> mapOrphanBlocksByPrev;\n \n map<uint256, CTransaction> mapOrphanTransactions;\n-map<uint256, set<uint256> > mapOrphanTransactionsByPrev;\n \n // Constant stuff for coinbase transactions we create:\n CScript COINBASE_FLAGS;\n@@ -112,45 +106,22 @@ namespace {\n \n     // Sources of received blocks, to be able to send them reject messages or ban\n     // them, if processing happens afterwards. Protected by cs_main.\n-    map<uint256, NodeId> mapBlockSource;\n-\n-    // Blocks that are in flight, and that are in the queue to be downloaded.\n-    // Protected by cs_main.\n-    struct QueuedBlock {\n-        uint256 hash;\n-        int64_t nTime;  // Time of \"getdata\" request in microseconds.\n-        int nQueuedBefore;  // Number of blocks in flight at the time of request.\n-    };\n+\n     map<uint256, pair<NodeId, list<QueuedBlock>::iterator> > mapBlocksInFlight;\n     map<uint256, pair<NodeId, list<uint256>::iterator> > mapBlocksToDownload;\n \n } // anon namespace\n \n+map<uint256, NodeId> mapBlockSource;\n+\n //////////////////////////////////////////////////////////////////////////////\n //\n // dispatching functions\n //\n \n // These functions dispatch to one or all registered wallets\n \n-namespace {\n-\n-struct CMainSignals {\n-    // Notifies listeners of updated transaction data (transaction, and optionally the block it is found in.\n-    boost::signals2::signal<void (const CTransaction &, const CBlock *)> SyncTransaction;\n-    // Notifies listeners of an erased transaction (currently disabled, requires transaction replacement).\n-    boost::signals2::signal<void (const uint256 &)> EraseTransaction;\n-    // Notifies listeners of an updated transaction without new data (for now: a coinbase potentially becoming visible).\n-    boost::signals2::signal<void (const uint256 &)> UpdatedTransaction;\n-    // Notifies listeners of a new active block chain.\n-    boost::signals2::signal<void (const CBlockLocator &)> SetBestChain;\n-    // Notifies listeners about an inventory item being seen on the network.\n-    boost::signals2::signal<void (const uint256 &)> Inventory;\n-    // Tells listeners to broadcast their data.\n-    boost::signals2::signal<void ()> Broadcast;\n-} g_signals;\n-\n-} // anon namespace\n+struct CMainSignals g_signals;\n \n void RegisterWallet(CWalletInterface* pwalletIn) {\n     g_signals.SyncTransaction.connect(boost::bind(&CWalletInterface::SyncTransaction, pwalletIn, _1, _2));\n@@ -188,49 +159,6 @@ void SyncWithWallets(const CTransaction &tx, const CBlock *pblock) {\n // Registration of network node signals.\n //\n \n-namespace {\n-\n-struct CBlockReject {\n-    unsigned char chRejectCode;\n-    string strRejectReason;\n-    uint256 hashBlock;\n-};\n-\n-// Maintain validation-specific state about nodes, protected by cs_main, instead\n-// by CNode's own locks. This simplifies asynchronous operation, where\n-// processing of incoming data is done after the ProcessMessage call returns,\n-// and we're no longer holding the node's locks.\n-struct CNodeState {\n-    // Accumulated misbehaviour score for this peer.\n-    int nMisbehavior;\n-    // Whether this peer should be disconnected and banned (unless whitelisted).\n-    bool fShouldBan;\n-    // String name of this peer (debugging/logging purposes).\n-    std::string name;\n-    // List of asynchronously-determined block rejections to notify this peer about.\n-    std::vector<CBlockReject> rejects;\n-    // The best known block we know this peer has announced.\n-    CBlockIndex *pindexBestKnownBlock;\n-    // The hash of the last unknown block this peer has announced.\n-    uint256 hashLastUnknownBlock;\n-    list<QueuedBlock> vBlocksInFlight;\n-    int nBlocksInFlight;\n-    list<uint256> vBlocksToDownload;\n-    int nBlocksToDownload;\n-    int64_t nLastBlockReceive;\n-    int64_t nLastBlockProcess;\n-\n-    CNodeState() {\n-        nMisbehavior = 0;\n-        fShouldBan = false;\n-        pindexBestKnownBlock = NULL;\n-        hashLastUnknownBlock = uint256(0);\n-        nBlocksToDownload = 0;\n-        nBlocksInFlight = 0;\n-        nLastBlockReceive = 0;\n-        nLastBlockProcess = 0;\n-    }\n-};\n \n // Map maintaining per-node state. Requires cs_main.\n map<NodeId, CNodeState> mapNodeState;\n@@ -354,8 +282,6 @@ void UpdateBlockAvailability(NodeId nodeid, const uint256 &hash) {\n     }\n }\n \n-} // anon namespace\n-\n bool GetNodeStateStats(NodeId nodeid, CNodeStateStats &stats) {\n     LOCK(cs_main);\n     CNodeState *state = State(nodeid);\n@@ -455,74 +381,6 @@ const CBlockIndex *CChain::FindFork(const CBlockIndex *pindex) const {\n CCoinsViewCache *pcoinsTip = NULL;\n CBlockTreeDB *pblocktree = NULL;\n \n-//////////////////////////////////////////////////////////////////////////////\n-//\n-// mapOrphanTransactions\n-//\n-\n-bool AddOrphanTx(const CTransaction& tx)\n-{\n-    uint256 hash = tx.GetHash();\n-    if (mapOrphanTransactions.count(hash))\n-        return false;\n-\n-    // Ignore big transactions, to avoid a\n-    // send-big-orphans memory exhaustion attack. If a peer has a legitimate\n-    // large transaction with a missing parent then we assume\n-    // it will rebroadcast it later, after the parent transaction(s)\n-    // have been mined or received.\n-    // 10,000 orphans, each of which is at most 5,000 bytes big is\n-    // at most 500 megabytes of orphans:\n-    unsigned int sz = tx.GetSerializeSize(SER_NETWORK, CTransaction::CURRENT_VERSION);\n-    if (sz > 5000)\n-    {\n-        LogPrint(\"mempool\", \"ignoring large orphan tx (size: %u, hash: %s)\\n\", sz, hash.ToString());\n-        return false;\n-    }\n-\n-    mapOrphanTransactions[hash] = tx;\n-    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n-        mapOrphanTransactionsByPrev[txin.prevout.hash].insert(hash);\n-\n-    LogPrint(\"mempool\", \"stored orphan tx %s (mapsz %u)\\n\", hash.ToString(),\n-        mapOrphanTransactions.size());\n-    return true;\n-}\n-\n-void static EraseOrphanTx(uint256 hash)\n-{\n-    if (!mapOrphanTransactions.count(hash))\n-        return;\n-    const CTransaction& tx = mapOrphanTransactions[hash];\n-    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n-    {\n-        mapOrphanTransactionsByPrev[txin.prevout.hash].erase(hash);\n-        if (mapOrphanTransactionsByPrev[txin.prevout.hash].empty())\n-            mapOrphanTransactionsByPrev.erase(txin.prevout.hash);\n-    }\n-    mapOrphanTransactions.erase(hash);\n-}\n-\n-unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans)\n-{\n-    unsigned int nEvicted = 0;\n-    while (mapOrphanTransactions.size() > nMaxOrphans)\n-    {\n-        // Evict a random orphan:\n-        uint256 randomhash = GetRandHash();\n-        map<uint256, CTransaction>::iterator it = mapOrphanTransactions.lower_bound(randomhash);\n-        if (it == mapOrphanTransactions.end())\n-            it = mapOrphanTransactions.begin();\n-        EraseOrphanTx(it->first);\n-        ++nEvicted;\n-    }\n-    return nEvicted;\n-}\n-\n-\n-\n-\n-\n \n \n bool IsStandardTx(const CTransaction& tx, string& reason)\n@@ -1200,7 +1058,7 @@ bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex)\n     return true;\n }\n \n-uint256 static GetOrphanRoot(const uint256& hash)\n+uint256 GetOrphanRoot(const uint256& hash)\n {\n     map<uint256, COrphanBlock*>::iterator it = mapOrphanBlocks.find(hash);\n     if (it == mapOrphanBlocks.end())\n@@ -3355,1222 +3213,6 @@ string GetWarnings(string strFor)\n \n \n \n-//////////////////////////////////////////////////////////////////////////////\n-//\n-// Messages\n-//\n-\n-\n-bool static AlreadyHave(const CInv& inv)\n-{\n-    switch (inv.type)\n-    {\n-    case MSG_TX:\n-        {\n-            bool txInMap = false;\n-            txInMap = mempool.exists(inv.hash);\n-            return txInMap || mapOrphanTransactions.count(inv.hash) ||\n-                pcoinsTip->HaveCoins(inv.hash);\n-        }\n-    case MSG_BLOCK:\n-        return mapBlockIndex.count(inv.hash) ||\n-               mapOrphanBlocks.count(inv.hash);\n-    }\n-    // Don't know what it is, just say we already got one\n-    return true;\n-}\n-\n-\n-void static ProcessGetData(CNode* pfrom)\n-{\n-    std::deque<CInv>::iterator it = pfrom->vRecvGetData.begin();\n-\n-    vector<CInv> vNotFound;\n-\n-    LOCK(cs_main);\n-\n-    while (it != pfrom->vRecvGetData.end()) {\n-        // Don't bother if send buffer is too full to respond anyway\n-        if (pfrom->nSendSize >= SendBufferSize())\n-            break;\n-\n-        const CInv &inv = *it;\n-        {\n-            boost::this_thread::interruption_point();\n-            it++;\n-\n-            if (inv.type == MSG_BLOCK || inv.type == MSG_FILTERED_BLOCK)\n-            {\n-                bool send = false;\n-                map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(inv.hash);\n-                if (mi != mapBlockIndex.end())\n-                {\n-                    // If the requested block is at a height below our last\n-                    // checkpoint, only serve it if it's in the checkpointed chain\n-                    int nHeight = mi->second->nHeight;\n-                    CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint(mapBlockIndex);\n-                    if (pcheckpoint && nHeight < pcheckpoint->nHeight) {\n-                        if (!chainActive.Contains(mi->second))\n-                        {\n-                            LogPrintf(\"ProcessGetData(): ignoring request for old block that isn't in the main chain\\n\");\n-                        } else {\n-                            send = true;\n-                        }\n-                    } else {\n-                        send = true;\n-                    }\n-                }\n-                if (send)\n-                {\n-                    // Send block from disk\n-                    CBlock block;\n-                    if (!ReadBlockFromDisk(block, (*mi).second))\n-                        assert(!\"cannot load block from disk\");\n-                    if (inv.type == MSG_BLOCK)\n-                        pfrom->PushMessage(\"block\", block);\n-                    else // MSG_FILTERED_BLOCK)\n-                    {\n-                        LOCK(pfrom->cs_filter);\n-                        if (pfrom->pfilter)\n-                        {\n-                            CMerkleBlock merkleBlock(block, *pfrom->pfilter);\n-                            pfrom->PushMessage(\"merkleblock\", merkleBlock);\n-                            // CMerkleBlock just contains hashes, so also push any transactions in the block the client did not see\n-                            // This avoids hurting performance by pointlessly requiring a round-trip\n-                            // Note that there is currently no way for a node to request any single transactions we didnt send here -\n-                            // they must either disconnect and retry or request the full block.\n-                            // Thus, the protocol spec specified allows for us to provide duplicate txn here,\n-                            // however we MUST always provide at least what the remote peer needs\n-                            typedef std::pair<unsigned int, uint256> PairType;\n-                            BOOST_FOREACH(PairType& pair, merkleBlock.vMatchedTxn)\n-                                if (!pfrom->setInventoryKnown.count(CInv(MSG_TX, pair.second)))\n-                                    pfrom->PushMessage(\"tx\", block.vtx[pair.first]);\n-                        }\n-                        // else\n-                            // no response\n-                    }\n-\n-                    // Trigger them to send a getblocks request for the next batch of inventory\n-                    if (inv.hash == pfrom->hashContinue)\n-                    {\n-                        // Bypass PushInventory, this must send even if redundant,\n-                        // and we want it right after the last block so they don't\n-                        // wait for other stuff first.\n-                        vector<CInv> vInv;\n-                        vInv.push_back(CInv(MSG_BLOCK, chainActive.Tip()->GetBlockHash()));\n-                        pfrom->PushMessage(\"inv\", vInv);\n-                        pfrom->hashContinue = 0;\n-                    }\n-                }\n-            }\n-            else if (inv.IsKnownType())\n-            {\n-                // Send stream from relay memory\n-                bool pushed = false;\n-                {\n-                    LOCK(cs_mapRelay);\n-                    map<CInv, CDataStream>::iterator mi = mapRelay.find(inv);\n-                    if (mi != mapRelay.end()) {\n-                        pfrom->PushMessage(inv.GetCommand(), (*mi).second);\n-                        pushed = true;\n-                    }\n-                }\n-                if (!pushed && inv.type == MSG_TX) {\n-                    CTransaction tx;\n-                    if (mempool.lookup(inv.hash, tx)) {\n-                        CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n-                        ss.reserve(1000);\n-                        ss << tx;\n-                        pfrom->PushMessage(\"tx\", ss);\n-                        pushed = true;\n-                    }\n-                }\n-                if (!pushed) {\n-                    vNotFound.push_back(inv);\n-                }\n-            }\n-\n-            // Track requests for our stuff.\n-            g_signals.Inventory(inv.hash);\n-\n-            if (inv.type == MSG_BLOCK || inv.type == MSG_FILTERED_BLOCK)\n-                break;\n-        }\n-    }\n-\n-    pfrom->vRecvGetData.erase(pfrom->vRecvGetData.begin(), it);\n-\n-    if (!vNotFound.empty()) {\n-        // Let the peer know that we didn't find what it asked for, so it doesn't\n-        // have to wait around forever. Currently only SPV clients actually care\n-        // about this message: it's needed when they are recursively walking the\n-        // dependencies of relevant unconfirmed transactions. SPV clients want to\n-        // do that because they want to know about (and store and rebroadcast and\n-        // risk analyze) the dependencies of transactions relevant to them, without\n-        // having to download the entire memory pool.\n-        pfrom->PushMessage(\"notfound\", vNotFound);\n-    }\n-}\n-\n-bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv, int64_t nTimeReceived)\n-{\n-    RandAddSeedPerfmon();\n-    LogPrint(\"net\", \"received: %s (%u bytes) peer=%d\\n\", strCommand, vRecv.size(), pfrom->id);\n-    if (mapArgs.count(\"-dropmessagestest\") && GetRand(atoi(mapArgs[\"-dropmessagestest\"])) == 0)\n-    {\n-        LogPrintf(\"dropmessagestest DROPPING RECV MESSAGE\\n\");\n-        return true;\n-    }\n-\n-    {\n-        LOCK(cs_main);\n-        State(pfrom->GetId())->nLastBlockProcess = GetTimeMicros();\n-    }\n-\n-\n-\n-    if (strCommand == \"version\")\n-    {\n-        // Each connection can only send one version message\n-        if (pfrom->nVersion != 0)\n-        {\n-            pfrom->PushMessage(\"reject\", strCommand, REJECT_DUPLICATE, string(\"Duplicate version message\"));\n-            Misbehaving(pfrom->GetId(), 1);\n-            return false;\n-        }\n-\n-        int64_t nTime;\n-        CAddress addrMe;\n-        CAddress addrFrom;\n-        uint64_t nNonce = 1;\n-        vRecv >> pfrom->nVersion >> pfrom->nServices >> nTime >> addrMe;\n-        if (pfrom->nVersion < MIN_PEER_PROTO_VERSION)\n-        {\n-            // disconnect from peers older than this proto version\n-            LogPrintf(\"peer=%d using obsolete version %i; disconnecting\\n\", pfrom->id, pfrom->nVersion);\n-            pfrom->PushMessage(\"reject\", strCommand, REJECT_OBSOLETE,\n-                               strprintf(\"Version must be %d or greater\", MIN_PEER_PROTO_VERSION));\n-            pfrom->fDisconnect = true;\n-            return false;\n-        }\n-\n-        if (pfrom->nVersion == 10300)\n-            pfrom->nVersion = 300;\n-        if (!vRecv.empty())\n-            vRecv >> addrFrom >> nNonce;\n-        if (!vRecv.empty()) {\n-            vRecv >> pfrom->strSubVer;\n-            pfrom->cleanSubVer = SanitizeString(pfrom->strSubVer);\n-        }\n-        if (!vRecv.empty())\n-            vRecv >> pfrom->nStartingHeight;\n-        if (!vRecv.empty())\n-            vRecv >> pfrom->fRelayTxes; // set to true after we get the first filter* message\n-        else\n-            pfrom->fRelayTxes = true;\n-\n-        if (pfrom->fInbound && addrMe.IsRoutable())\n-        {\n-            pfrom->addrLocal = addrMe;\n-            SeenLocal(addrMe);\n-        }\n-\n-        // Disconnect if we connected to ourself\n-        if (nNonce == nLocalHostNonce && nNonce > 1)\n-        {\n-            LogPrintf(\"connected to self at %s, disconnecting\\n\", pfrom->addr.ToString());\n-            pfrom->fDisconnect = true;\n-            return true;\n-        }\n-\n-        // Be shy and don't send version until we hear\n-        if (pfrom->fInbound)\n-            pfrom->PushVersion();\n-\n-        pfrom->fClient = !(pfrom->nServices & NODE_NETWORK);\n-\n-\n-        // Change version\n-        pfrom->PushMessage(\"verack\");\n-        pfrom->ssSend.SetVersion(min(pfrom->nVersion, PROTOCOL_VERSION));\n-\n-        if (!pfrom->fInbound)\n-        {\n-            // Advertise our address\n-            if (fListen && !IsInitialBlockDownload())\n-            {\n-                CAddress addr = GetLocalAddress(&pfrom->addr);\n-                if (addr.IsRoutable())\n-                    pfrom->PushAddress(addr);\n-            }\n-\n-            // Get recent addresses\n-            if (pfrom->fOneShot || pfrom->nVersion >= CADDR_TIME_VERSION || addrman.size() < 1000)\n-            {\n-                pfrom->PushMessage(\"getaddr\");\n-                pfrom->fGetAddr = true;\n-            }\n-            addrman.Good(pfrom->addr);\n-        } else {\n-            if (((CNetAddr)pfrom->addr) == (CNetAddr)addrFrom)\n-            {\n-                addrman.Add(addrFrom, addrFrom);\n-                addrman.Good(addrFrom);\n-            }\n-        }\n-\n-        // Relay alerts\n-        {\n-            LOCK(cs_mapAlerts);\n-            BOOST_FOREACH(PAIRTYPE(const uint256, CAlert)& item, mapAlerts)\n-                item.second.RelayTo(pfrom);\n-        }\n-\n-        pfrom->fSuccessfullyConnected = true;\n-\n-        string remoteAddr;\n-        if (fLogIPs)\n-            remoteAddr = \", peeraddr=\" + pfrom->addr.ToString();\n-\n-        LogPrintf(\"receive version message: %s: version %d, blocks=%d, us=%s, peer=%d%s\\n\",\n-                  pfrom->cleanSubVer, pfrom->nVersion,\n-                  pfrom->nStartingHeight, addrMe.ToString(), pfrom->id,\n-                  remoteAddr);\n-\n-        AddTimeData(pfrom->addr, nTime);\n-    }\n-\n-\n-    else if (pfrom->nVersion == 0)\n-    {\n-        // Must have a version message before anything else\n-        Misbehaving(pfrom->GetId(), 1);\n-        return false;\n-    }\n-\n-\n-    else if (strCommand == \"verack\")\n-    {\n-        pfrom->SetRecvVersion(min(pfrom->nVersion, PROTOCOL_VERSION));\n-    }\n-\n-\n-    else if (strCommand == \"addr\")\n-    {\n-        vector<CAddress> vAddr;\n-        vRecv >> vAddr;\n-\n-        // Don't want addr from older versions unless seeding\n-        if (pfrom->nVersion < CADDR_TIME_VERSION && addrman.size() > 1000)\n-            return true;\n-        if (vAddr.size() > 1000)\n-        {\n-            Misbehaving(pfrom->GetId(), 20);\n-            return error(\"message addr size() = %u\", vAddr.size());\n-        }\n-\n-        // Store the new addresses\n-        vector<CAddress> vAddrOk;\n-        int64_t nNow = GetAdjustedTime();\n-        int64_t nSince = nNow - 10 * 60;\n-        BOOST_FOREACH(CAddress& addr, vAddr)\n-        {\n-            boost::this_thread::interruption_point();\n-\n-            if (addr.nTime <= 100000000 || addr.nTime > nNow + 10 * 60)\n-                addr.nTime = nNow - 5 * 24 * 60 * 60;\n-            pfrom->AddAddressKnown(addr);\n-            bool fReachable = IsReachable(addr);\n-            if (addr.nTime > nSince && !pfrom->fGetAddr && vAddr.size() <= 10 && addr.IsRoutable())\n-            {\n-                // Relay to a limited number of other nodes\n-                {\n-                    LOCK(cs_vNodes);\n-                    // Use deterministic randomness to send to the same nodes for 24 hours\n-                    // at a time so the setAddrKnowns of the chosen nodes prevent repeats\n-                    static uint256 hashSalt;\n-                    if (hashSalt == 0)\n-                        hashSalt = GetRandHash();\n-                    uint64_t hashAddr = addr.GetHash();\n-                    uint256 hashRand = hashSalt ^ (hashAddr<<32) ^ ((GetTime()+hashAddr)/(24*60*60));\n-                    hashRand = Hash(BEGIN(hashRand), END(hashRand));\n-                    multimap<uint256, CNode*> mapMix;\n-                    BOOST_FOREACH(CNode* pnode, vNodes)\n-                    {\n-                        if (pnode->nVersion < CADDR_TIME_VERSION)\n-                            continue;\n-                        unsigned int nPointer;\n-                        memcpy(&nPointer, &pnode, sizeof(nPointer));\n-                        uint256 hashKey = hashRand ^ nPointer;\n-                        hashKey = Hash(BEGIN(hashKey), END(hashKey));\n-                        mapMix.insert(make_pair(hashKey, pnode));\n-                    }\n-                    int nRelayNodes = fReachable ? 2 : 1; // limited relaying of addresses outside our network(s)\n-                    for (multimap<uint256, CNode*>::iterator mi = mapMix.begin(); mi != mapMix.end() && nRelayNodes-- > 0; ++mi)\n-                        ((*mi).second)->PushAddress(addr);\n-                }\n-            }\n-            // Do not store addresses outside our network\n-            if (fReachable)\n-                vAddrOk.push_back(addr);\n-        }\n-        addrman.Add(vAddrOk, pfrom->addr, 2 * 60 * 60);\n-        if (vAddr.size() < 1000)\n-            pfrom->fGetAddr = false;\n-        if (pfrom->fOneShot)\n-            pfrom->fDisconnect = true;\n-    }\n-\n-\n-    else if (strCommand == \"inv\")\n-    {\n-        vector<CInv> vInv;\n-        vRecv >> vInv;\n-        if (vInv.size() > MAX_INV_SZ)\n-        {\n-            Misbehaving(pfrom->GetId(), 20);\n-            return error(\"message inv size() = %u\", vInv.size());\n-        }\n-\n-        LOCK(cs_main);\n-\n-        for (unsigned int nInv = 0; nInv < vInv.size(); nInv++)\n-        {\n-            const CInv &inv = vInv[nInv];\n-\n-            boost::this_thread::interruption_point();\n-            pfrom->AddInventoryKnown(inv);\n-\n-            bool fAlreadyHave = AlreadyHave(inv);\n-            LogPrint(\"net\", \"got inv: %s  %s peer=%d\\n\", inv.ToString(), fAlreadyHave ? \"have\" : \"new\", pfrom->id);\n-\n-            if (!fAlreadyHave) {\n-                if (!fImporting && !fReindex) {\n-                    if (inv.type == MSG_BLOCK)\n-                        AddBlockToQueue(pfrom->GetId(), inv.hash);\n-                    else\n-                        pfrom->AskFor(inv);\n-                }\n-            } else if (inv.type == MSG_BLOCK && mapOrphanBlocks.count(inv.hash)) {\n-                PushGetBlocks(pfrom, chainActive.Tip(), GetOrphanRoot(inv.hash));\n-            }\n-\n-            if (inv.type == MSG_BLOCK)\n-                UpdateBlockAvailability(pfrom->GetId(), inv.hash);\n-\n-            // Track requests for our stuff\n-            g_signals.Inventory(inv.hash);\n-        }\n-    }\n-\n-\n-    else if (strCommand == \"getdata\")\n-    {\n-        vector<CInv> vInv;\n-        vRecv >> vInv;\n-        if (vInv.size() > MAX_INV_SZ)\n-        {\n-            Misbehaving(pfrom->GetId(), 20);\n-            return error(\"message getdata size() = %u\", vInv.size());\n-        }\n-\n-        if (fDebug || (vInv.size() != 1))\n-            LogPrint(\"net\", \"received getdata (%u invsz) peer=%d\\n\", vInv.size(), pfrom->id);\n-\n-        if ((fDebug && vInv.size() > 0) || (vInv.size() == 1))\n-            LogPrint(\"net\", \"received getdata for: %s peer=%d\\n\", vInv[0].ToString(), pfrom->id);\n-\n-        pfrom->vRecvGetData.insert(pfrom->vRecvGetData.end(), vInv.begin(), vInv.end());\n-        ProcessGetData(pfrom);\n-    }\n-\n-\n-    else if (strCommand == \"getblocks\")\n-    {\n-        CBlockLocator locator;\n-        uint256 hashStop;\n-        vRecv >> locator >> hashStop;\n-\n-        LOCK(cs_main);\n-\n-        // Find the last block the caller has in the main chain\n-        CBlockIndex* pindex = chainActive.FindFork(locator);\n-\n-        // Send the rest of the chain\n-        if (pindex)\n-            pindex = chainActive.Next(pindex);\n-        int nLimit = 500;\n-        LogPrint(\"net\", \"getblocks %d to %s limit %d from peer=%d\\n\", (pindex ? pindex->nHeight : -1), hashStop==uint256(0) ? \"end\" : hashStop.ToString(), nLimit, pfrom->id);\n-        for (; pindex; pindex = chainActive.Next(pindex))\n-        {\n-            if (pindex->GetBlockHash() == hashStop)\n-            {\n-                LogPrint(\"net\", \"  getblocks stopping at %d %s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString());\n-                break;\n-            }\n-            pfrom->PushInventory(CInv(MSG_BLOCK, pindex->GetBlockHash()));\n-            if (--nLimit <= 0)\n-            {\n-                // When this block is requested, we'll send an inv that'll make them\n-                // getblocks the next batch of inventory.\n-                LogPrint(\"net\", \"  getblocks stopping at limit %d %s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString());\n-                pfrom->hashContinue = pindex->GetBlockHash();\n-                break;\n-            }\n-        }\n-    }\n-\n-\n-    else if (strCommand == \"getheaders\")\n-    {\n-        CBlockLocator locator;\n-        uint256 hashStop;\n-        vRecv >> locator >> hashStop;\n-\n-        LOCK(cs_main);\n-\n-        CBlockIndex* pindex = NULL;\n-        if (locator.IsNull())\n-        {\n-            // If locator is null, return the hashStop block\n-            map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hashStop);\n-            if (mi == mapBlockIndex.end())\n-                return true;\n-            pindex = (*mi).second;\n-        }\n-        else\n-        {\n-            // Find the last block the caller has in the main chain\n-            pindex = chainActive.FindFork(locator);\n-            if (pindex)\n-                pindex = chainActive.Next(pindex);\n-        }\n-\n-        // we must use CBlocks, as CBlockHeaders won't include the 0x00 nTx count at the end\n-        vector<CBlock> vHeaders;\n-        int nLimit = 2000;\n-        LogPrint(\"net\", \"getheaders %d to %s\\n\", (pindex ? pindex->nHeight : -1), hashStop.ToString());\n-        for (; pindex; pindex = chainActive.Next(pindex))\n-        {\n-            vHeaders.push_back(pindex->GetBlockHeader());\n-            if (--nLimit <= 0 || pindex->GetBlockHash() == hashStop)\n-                break;\n-        }\n-        pfrom->PushMessage(\"headers\", vHeaders);\n-    }\n-\n-\n-    else if (strCommand == \"tx\")\n-    {\n-        vector<uint256> vWorkQueue;\n-        vector<uint256> vEraseQueue;\n-        CTransaction tx;\n-        vRecv >> tx;\n-\n-        CInv inv(MSG_TX, tx.GetHash());\n-        pfrom->AddInventoryKnown(inv);\n-\n-        LOCK(cs_main);\n-\n-        bool fMissingInputs = false;\n-        CValidationState state;\n-        if (AcceptToMemoryPool(mempool, state, tx, true, &fMissingInputs))\n-        {\n-            mempool.check(pcoinsTip);\n-            RelayTransaction(tx);\n-            mapAlreadyAskedFor.erase(inv);\n-            vWorkQueue.push_back(inv.hash);\n-            vEraseQueue.push_back(inv.hash);\n-\n-\n-            LogPrint(\"mempool\", \"AcceptToMemoryPool: peer=%d %s : accepted %s (poolsz %u)\\n\",\n-                pfrom->id, pfrom->cleanSubVer,\n-                tx.GetHash().ToString(),\n-                mempool.mapTx.size());\n-\n-            // Recursively process any orphan transactions that depended on this one\n-            for (unsigned int i = 0; i < vWorkQueue.size(); i++)\n-            {\n-                uint256 hashPrev = vWorkQueue[i];\n-                for (set<uint256>::iterator mi = mapOrphanTransactionsByPrev[hashPrev].begin();\n-                     mi != mapOrphanTransactionsByPrev[hashPrev].end();\n-                     ++mi)\n-                {\n-                    const uint256& orphanHash = *mi;\n-                    const CTransaction& orphanTx = mapOrphanTransactions[orphanHash];\n-                    bool fMissingInputs2 = false;\n-                    // Use a dummy CValidationState so someone can't setup nodes to counter-DoS based on orphan\n-                    // resolution (that is, feeding people an invalid transaction based on LegitTxX in order to get\n-                    // anyone relaying LegitTxX banned)\n-                    CValidationState stateDummy;\n-\n-                    if (AcceptToMemoryPool(mempool, stateDummy, orphanTx, true, &fMissingInputs2))\n-                    {\n-                        LogPrint(\"mempool\", \"   accepted orphan tx %s\\n\", orphanHash.ToString());\n-                        RelayTransaction(orphanTx);\n-                        mapAlreadyAskedFor.erase(CInv(MSG_TX, orphanHash));\n-                        vWorkQueue.push_back(orphanHash);\n-                        vEraseQueue.push_back(orphanHash);\n-                    }\n-                    else if (!fMissingInputs2)\n-                    {\n-                        // invalid or too-little-fee orphan\n-                        vEraseQueue.push_back(orphanHash);\n-                        LogPrint(\"mempool\", \"   removed orphan tx %s\\n\", orphanHash.ToString());\n-                    }\n-                    mempool.check(pcoinsTip);\n-                }\n-            }\n-\n-            BOOST_FOREACH(uint256 hash, vEraseQueue)\n-                EraseOrphanTx(hash);\n-        }\n-        else if (fMissingInputs)\n-        {\n-            AddOrphanTx(tx);\n-\n-            // DoS prevention: do not allow mapOrphanTransactions to grow unbounded\n-            unsigned int nEvicted = LimitOrphanTxSize(MAX_ORPHAN_TRANSACTIONS);\n-            if (nEvicted > 0)\n-                LogPrint(\"mempool\", \"mapOrphan overflow, removed %u tx\\n\", nEvicted);\n-        } else if (pfrom->fWhitelisted) {\n-            // Always relay transactions received from whitelisted peers, even\n-            // if they are already in the mempool (allowing the node to function\n-            // as a gateway for nodes hidden behind it).\n-            RelayTransaction(tx);\n-        }\n-        int nDoS = 0;\n-        if (state.IsInvalid(nDoS))\n-        {\n-            LogPrint(\"mempool\", \"%s from peer=%d %s was not accepted into the memory pool: %s\\n\", tx.GetHash().ToString(),\n-                pfrom->id, pfrom->cleanSubVer,\n-                state.GetRejectReason());\n-            pfrom->PushMessage(\"reject\", strCommand, state.GetRejectCode(),\n-                               state.GetRejectReason(), inv.hash);\n-            if (nDoS > 0)\n-                Misbehaving(pfrom->GetId(), nDoS);\n-        }\n-    }\n-\n-\n-    else if (strCommand == \"block\" && !fImporting && !fReindex) // Ignore blocks received while importing\n-    {\n-        CBlock block;\n-        vRecv >> block;\n-\n-        LogPrint(\"net\", \"received block %s peer=%d\\n\", block.GetHash().ToString(), pfrom->id);\n-        // block.print();\n-\n-        CInv inv(MSG_BLOCK, block.GetHash());\n-        pfrom->AddInventoryKnown(inv);\n-\n-        {\n-            LOCK(cs_main);\n-            // Remember who we got this block from.\n-            mapBlockSource[inv.hash] = pfrom->GetId();\n-            MarkBlockAsReceived(inv.hash, pfrom->GetId());\n-        }\n-\n-        CValidationState state;\n-        ProcessBlock(state, pfrom, &block);\n-        int nDoS;\n-        if (state.IsInvalid(nDoS)) {\n-            pfrom->PushMessage(\"reject\", strCommand, state.GetRejectCode(),\n-                               state.GetRejectReason(), inv.hash);\n-            if (nDoS > 0) {\n-                LOCK(cs_main);\n-                Misbehaving(pfrom->GetId(), nDoS);\n-            }\n-        }\n-\n-    }\n-\n-\n-    else if (strCommand == \"getaddr\")\n-    {\n-        pfrom->vAddrToSend.clear();\n-        vector<CAddress> vAddr = addrman.GetAddr();\n-        BOOST_FOREACH(const CAddress &addr, vAddr)\n-            pfrom->PushAddress(addr);\n-    }\n-\n-\n-    else if (strCommand == \"mempool\")\n-    {\n-        LOCK2(cs_main, pfrom->cs_filter);\n-\n-        std::vector<uint256> vtxid;\n-        mempool.queryHashes(vtxid);\n-        vector<CInv> vInv;\n-        BOOST_FOREACH(uint256& hash, vtxid) {\n-            CInv inv(MSG_TX, hash);\n-            CTransaction tx;\n-            bool fInMemPool = mempool.lookup(hash, tx);\n-            if (!fInMemPool) continue; // another thread removed since queryHashes, maybe...\n-            if ((pfrom->pfilter && pfrom->pfilter->IsRelevantAndUpdate(tx)) ||\n-               (!pfrom->pfilter))\n-                vInv.push_back(inv);\n-            if (vInv.size() == MAX_INV_SZ) {\n-                pfrom->PushMessage(\"inv\", vInv);\n-                vInv.clear();\n-            }\n-        }\n-        if (vInv.size() > 0)\n-            pfrom->PushMessage(\"inv\", vInv);\n-    }\n-\n-\n-    else if (strCommand == \"ping\")\n-    {\n-        if (pfrom->nVersion > BIP0031_VERSION)\n-        {\n-            uint64_t nonce = 0;\n-            vRecv >> nonce;\n-            // Echo the message back with the nonce. This allows for two useful features:\n-            //\n-            // 1) A remote node can quickly check if the connection is operational\n-            // 2) Remote nodes can measure the latency of the network thread. If this node\n-            //    is overloaded it won't respond to pings quickly and the remote node can\n-            //    avoid sending us more work, like chain download requests.\n-            //\n-            // The nonce stops the remote getting confused between different pings: without\n-            // it, if the remote node sends a ping once per second and this node takes 5\n-            // seconds to respond to each, the 5th ping the remote sends would appear to\n-            // return very quickly.\n-            pfrom->PushMessage(\"pong\", nonce);\n-        }\n-    }\n-\n-\n-    else if (strCommand == \"pong\")\n-    {\n-        int64_t pingUsecEnd = nTimeReceived;\n-        uint64_t nonce = 0;\n-        size_t nAvail = vRecv.in_avail();\n-        bool bPingFinished = false;\n-        std::string sProblem;\n-\n-        if (nAvail >= sizeof(nonce)) {\n-            vRecv >> nonce;\n-\n-            // Only process pong message if there is an outstanding ping (old ping without nonce should never pong)\n-            if (pfrom->nPingNonceSent != 0) {\n-                if (nonce == pfrom->nPingNonceSent) {\n-                    // Matching pong received, this ping is no longer outstanding\n-                    bPingFinished = true;\n-                    int64_t pingUsecTime = pingUsecEnd - pfrom->nPingUsecStart;\n-                    if (pingUsecTime > 0) {\n-                        // Successful ping time measurement, replace previous\n-                        pfrom->nPingUsecTime = pingUsecTime;\n-                    } else {\n-                        // This should never happen\n-                        sProblem = \"Timing mishap\";\n-                    }\n-                } else {\n-                    // Nonce mismatches are normal when pings are overlapping\n-                    sProblem = \"Nonce mismatch\";\n-                    if (nonce == 0) {\n-                        // This is most likely a bug in another implementation somewhere, cancel this ping\n-                        bPingFinished = true;\n-                        sProblem = \"Nonce zero\";\n-                    }\n-                }\n-            } else {\n-                sProblem = \"Unsolicited pong without ping\";\n-            }\n-        } else {\n-            // This is most likely a bug in another implementation somewhere, cancel this ping\n-            bPingFinished = true;\n-            sProblem = \"Short payload\";\n-        }\n-\n-        if (!(sProblem.empty())) {\n-            LogPrint(\"net\", \"pong peer=%d %s: %s, %x expected, %x received, %u bytes\\n\",\n-                pfrom->id,\n-                pfrom->cleanSubVer,\n-                sProblem,\n-                pfrom->nPingNonceSent,\n-                nonce,\n-                nAvail);\n-        }\n-        if (bPingFinished) {\n-            pfrom->nPingNonceSent = 0;\n-        }\n-    }\n-\n-\n-    else if (strCommand == \"alert\")\n-    {\n-        CAlert alert;\n-        vRecv >> alert;\n-\n-        uint256 alertHash = alert.GetHash();\n-        if (pfrom->setKnown.count(alertHash) == 0)\n-        {\n-            if (alert.ProcessAlert())\n-            {\n-                // Relay\n-                pfrom->setKnown.insert(alertHash);\n-                {\n-                    LOCK(cs_vNodes);\n-                    BOOST_FOREACH(CNode* pnode, vNodes)\n-                        alert.RelayTo(pnode);\n-                }\n-            }\n-            else {\n-                // Small DoS penalty so peers that send us lots of\n-                // duplicate/expired/invalid-signature/whatever alerts\n-                // eventually get banned.\n-                // This isn't a Misbehaving(100) (immediate ban) because the\n-                // peer might be an older or different implementation with\n-                // a different signature key, etc.\n-                Misbehaving(pfrom->GetId(), 10);\n-            }\n-        }\n-    }\n-\n-\n-    else if (strCommand == \"filterload\")\n-    {\n-        CBloomFilter filter;\n-        vRecv >> filter;\n-\n-        if (!filter.IsWithinSizeConstraints())\n-            // There is no excuse for sending a too-large filter\n-            Misbehaving(pfrom->GetId(), 100);\n-        else\n-        {\n-            LOCK(pfrom->cs_filter);\n-            delete pfrom->pfilter;\n-            pfrom->pfilter = new CBloomFilter(filter);\n-            pfrom->pfilter->UpdateEmptyFull();\n-        }\n-        pfrom->fRelayTxes = true;\n-    }\n-\n-\n-    else if (strCommand == \"filteradd\")\n-    {\n-        vector<unsigned char> vData;\n-        vRecv >> vData;\n-\n-        // Nodes must NEVER send a data item > 520 bytes (the max size for a script data object,\n-        // and thus, the maximum size any matched object can have) in a filteradd message\n-        if (vData.size() > MAX_SCRIPT_ELEMENT_SIZE)\n-        {\n-            Misbehaving(pfrom->GetId(), 100);\n-        } else {\n-            LOCK(pfrom->cs_filter);\n-            if (pfrom->pfilter)\n-                pfrom->pfilter->insert(vData);\n-            else\n-                Misbehaving(pfrom->GetId(), 100);\n-        }\n-    }\n-\n-\n-    else if (strCommand == \"filterclear\")\n-    {\n-        LOCK(pfrom->cs_filter);\n-        delete pfrom->pfilter;\n-        pfrom->pfilter = new CBloomFilter();\n-        pfrom->fRelayTxes = true;\n-    }\n-\n-\n-    else if (strCommand == \"reject\")\n-    {\n-        if (fDebug)\n-        {\n-            string strMsg; unsigned char ccode; string strReason;\n-            vRecv >> strMsg >> ccode >> strReason;\n-\n-            ostringstream ss;\n-            ss << strMsg << \" code \" << itostr(ccode) << \": \" << strReason;\n-\n-            if (strMsg == \"block\" || strMsg == \"tx\")\n-            {\n-                uint256 hash;\n-                vRecv >> hash;\n-                ss << \": hash \" << hash.ToString();\n-            }\n-            // Truncate to reasonable length and sanitize before printing:\n-            string s = ss.str();\n-            if (s.size() > 111) s.erase(111, string::npos);\n-            LogPrint(\"net\", \"Reject %s\\n\", SanitizeString(s));\n-        }\n-    }\n-\n-    else\n-    {\n-        // Ignore unknown commands for extensibility\n-        LogPrint(\"net\", \"Unknown command \\\"%s\\\" from peer=%d\\n\", SanitizeString(strCommand), pfrom->id);\n-    }\n-\n-\n-    // Update the last seen time for this node's address\n-    if (pfrom->fNetworkNode)\n-        if (strCommand == \"version\" || strCommand == \"addr\" || strCommand == \"inv\" || strCommand == \"getdata\" || strCommand == \"ping\")\n-            AddressCurrentlyConnected(pfrom->addr);\n-\n-\n-    return true;\n-}\n-\n-// requires LOCK(cs_vRecvMsg)\n-bool ProcessMessages(CNode* pfrom)\n-{\n-    //if (fDebug)\n-    //    LogPrintf(\"ProcessMessages(%u messages)\\n\", pfrom->vRecvMsg.size());\n-\n-    //\n-    // Message format\n-    //  (4) message start\n-    //  (12) command\n-    //  (4) size\n-    //  (4) checksum\n-    //  (x) data\n-    //\n-    bool fOk = true;\n-\n-    if (!pfrom->vRecvGetData.empty())\n-        ProcessGetData(pfrom);\n-\n-    // this maintains the order of responses\n-    if (!pfrom->vRecvGetData.empty()) return fOk;\n-\n-    std::deque<CNetMessage>::iterator it = pfrom->vRecvMsg.begin();\n-    while (!pfrom->fDisconnect && it != pfrom->vRecvMsg.end()) {\n-        // Don't bother if send buffer is too full to respond anyway\n-        if (pfrom->nSendSize >= SendBufferSize())\n-            break;\n-\n-        // get next message\n-        CNetMessage& msg = *it;\n-\n-        //if (fDebug)\n-        //    LogPrintf(\"ProcessMessages(message %u msgsz, %u bytes, complete:%s)\\n\",\n-        //            msg.hdr.nMessageSize, msg.vRecv.size(),\n-        //            msg.complete() ? \"Y\" : \"N\");\n-\n-        // end, if an incomplete message is found\n-        if (!msg.complete())\n-            break;\n-\n-        // at this point, any failure means we can delete the current message\n-        it++;\n-\n-        // Scan for message start\n-        if (memcmp(msg.hdr.pchMessageStart, Params().MessageStart(), MESSAGE_START_SIZE) != 0) {\n-            LogPrintf(\"\\n\\nPROCESSMESSAGE: INVALID MESSAGESTART\\n\\n\");\n-            fOk = false;\n-            break;\n-        }\n-\n-        // Read header\n-        CMessageHeader& hdr = msg.hdr;\n-        if (!hdr.IsValid())\n-        {\n-            LogPrintf(\"\\n\\nPROCESSMESSAGE: ERRORS IN HEADER %s\\n\\n\\n\", hdr.GetCommand());\n-            continue;\n-        }\n-        string strCommand = hdr.GetCommand();\n-\n-        // Message size\n-        unsigned int nMessageSize = hdr.nMessageSize;\n-\n-        // Checksum\n-        CDataStream& vRecv = msg.vRecv;\n-        uint256 hash = Hash(vRecv.begin(), vRecv.begin() + nMessageSize);\n-        unsigned int nChecksum = 0;\n-        memcpy(&nChecksum, &hash, sizeof(nChecksum));\n-        if (nChecksum != hdr.nChecksum)\n-        {\n-            LogPrintf(\"ProcessMessages(%s, %u bytes) : CHECKSUM ERROR nChecksum=%08x hdr.nChecksum=%08x\\n\",\n-               strCommand, nMessageSize, nChecksum, hdr.nChecksum);\n-            continue;\n-        }\n-\n-        // Process message\n-        bool fRet = false;\n-        try\n-        {\n-            fRet = ProcessMessage(pfrom, strCommand, vRecv, msg.nTime);\n-            boost::this_thread::interruption_point();\n-        }\n-        catch (std::ios_base::failure& e)\n-        {\n-            pfrom->PushMessage(\"reject\", strCommand, REJECT_MALFORMED, string(\"error parsing message\"));\n-            if (strstr(e.what(), \"end of data\"))\n-            {\n-                // Allow exceptions from under-length message on vRecv\n-                LogPrintf(\"ProcessMessages(%s, %u bytes) : Exception '%s' caught, normally caused by a message being shorter than its stated length\\n\", strCommand, nMessageSize, e.what());\n-            }\n-            else if (strstr(e.what(), \"size too large\"))\n-            {\n-                // Allow exceptions from over-long size\n-                LogPrintf(\"ProcessMessages(%s, %u bytes) : Exception '%s' caught\\n\", strCommand, nMessageSize, e.what());\n-            }\n-            else\n-            {\n-                PrintExceptionContinue(&e, \"ProcessMessages()\");\n-            }\n-        }\n-        catch (boost::thread_interrupted) {\n-            throw;\n-        }\n-        catch (std::exception& e) {\n-            PrintExceptionContinue(&e, \"ProcessMessages()\");\n-        } catch (...) {\n-            PrintExceptionContinue(NULL, \"ProcessMessages()\");\n-        }\n-\n-        if (!fRet)\n-            LogPrintf(\"ProcessMessage(%s, %u bytes) FAILED peer=%d\\n\", strCommand, nMessageSize, pfrom->id);\n-\n-        break;\n-    }\n-\n-    // In case the connection got shut down, its receive buffer was wiped\n-    if (!pfrom->fDisconnect)\n-        pfrom->vRecvMsg.erase(pfrom->vRecvMsg.begin(), it);\n-\n-    return fOk;\n-}\n-\n-\n-bool SendMessages(CNode* pto, bool fSendTrickle)\n-{\n-    {\n-        // Don't send anything until we get their version message\n-        if (pto->nVersion == 0)\n-            return true;\n-\n-        //\n-        // Message: ping\n-        //\n-        bool pingSend = false;\n-        if (pto->fPingQueued) {\n-            // RPC ping request by user\n-            pingSend = true;\n-        }\n-        if (pto->nPingNonceSent == 0 && pto->nPingUsecStart + PING_INTERVAL * 1000000 < GetTimeMicros()) {\n-            // Ping automatically sent as a latency probe & keepalive.\n-            pingSend = true;\n-        }\n-        if (pingSend) {\n-            uint64_t nonce = 0;\n-            while (nonce == 0) {\n-                GetRandBytes((unsigned char*)&nonce, sizeof(nonce));\n-            }\n-            pto->fPingQueued = false;\n-            pto->nPingUsecStart = GetTimeMicros();\n-            if (pto->nVersion > BIP0031_VERSION) {\n-                pto->nPingNonceSent = nonce;\n-                pto->PushMessage(\"ping\", nonce);\n-            } else {\n-                // Peer is too old to support ping command with nonce, pong will never arrive.\n-                pto->nPingNonceSent = 0;\n-                pto->PushMessage(\"ping\");\n-            }\n-        }\n-\n-        TRY_LOCK(cs_main, lockMain); // Acquire cs_main for IsInitialBlockDownload() and CNodeState()\n-        if (!lockMain)\n-            return true;\n-\n-        // Address refresh broadcast\n-        static int64_t nLastRebroadcast;\n-        if (!IsInitialBlockDownload() && (GetTime() - nLastRebroadcast > 24 * 60 * 60))\n-        {\n-            {\n-                LOCK(cs_vNodes);\n-                BOOST_FOREACH(CNode* pnode, vNodes)\n-                {\n-                    // Periodically clear setAddrKnown to allow refresh broadcasts\n-                    if (nLastRebroadcast)\n-                        pnode->setAddrKnown.clear();\n-\n-                    // Rebroadcast our address\n-                    if (fListen)\n-                    {\n-                        CAddress addr = GetLocalAddress(&pnode->addr);\n-                        if (addr.IsRoutable())\n-                            pnode->PushAddress(addr);\n-                    }\n-                }\n-            }\n-            nLastRebroadcast = GetTime();\n-        }\n-\n-        //\n-        // Message: addr\n-        //\n-        if (fSendTrickle)\n-        {\n-            vector<CAddress> vAddr;\n-            vAddr.reserve(pto->vAddrToSend.size());\n-            BOOST_FOREACH(const CAddress& addr, pto->vAddrToSend)\n-            {\n-                // returns true if wasn't already contained in the set\n-                if (pto->setAddrKnown.insert(addr).second)\n-                {\n-                    vAddr.push_back(addr);\n-                    // receiver rejects addr messages larger than 1000\n-                    if (vAddr.size() >= 1000)\n-                    {\n-                        pto->PushMessage(\"addr\", vAddr);\n-                        vAddr.clear();\n-                    }\n-                }\n-            }\n-            pto->vAddrToSend.clear();\n-            if (!vAddr.empty())\n-                pto->PushMessage(\"addr\", vAddr);\n-        }\n-\n-        CNodeState &state = *State(pto->GetId());\n-        if (state.fShouldBan) {\n-            if (pto->fWhitelisted)\n-                LogPrintf(\"Warning: not punishing whitelisted peer %s!\\n\", pto->addr.ToString());\n-            else {\n-                pto->fDisconnect = true;\n-                if (pto->addr.IsLocal())\n-                    LogPrintf(\"Warning: not banning local peer %s!\\n\", pto->addr.ToString());\n-                else\n-                    CNode::Ban(pto->addr);\n-            }\n-            state.fShouldBan = false;\n-        }\n-\n-        BOOST_FOREACH(const CBlockReject& reject, state.rejects)\n-            pto->PushMessage(\"reject\", (string)\"block\", reject.chRejectCode, reject.strRejectReason, reject.hashBlock);\n-        state.rejects.clear();\n-\n-        // Start block sync\n-        if (pto->fStartSync && !fImporting && !fReindex) {\n-            pto->fStartSync = false;\n-            PushGetBlocks(pto, chainActive.Tip(), uint256(0));\n-        }\n-\n-        // Resend wallet transactions that haven't gotten in a block yet\n-        // Except during reindex, importing and IBD, when old wallet\n-        // transactions become unconfirmed and spams other nodes.\n-        if (!fReindex && !fImporting && !IsInitialBlockDownload())\n-        {\n-            g_signals.Broadcast();\n-        }\n-\n-        //\n-        // Message: inventory\n-        //\n-        vector<CInv> vInv;\n-        vector<CInv> vInvWait;\n-        {\n-            LOCK(pto->cs_inventory);\n-            vInv.reserve(pto->vInventoryToSend.size());\n-            vInvWait.reserve(pto->vInventoryToSend.size());\n-            BOOST_FOREACH(const CInv& inv, pto->vInventoryToSend)\n-            {\n-                if (pto->setInventoryKnown.count(inv))\n-                    continue;\n-\n-                // trickle out tx inv to protect privacy\n-                if (inv.type == MSG_TX && !fSendTrickle)\n-                {\n-                    // 1/4 of tx invs blast to all immediately\n-                    static uint256 hashSalt;\n-                    if (hashSalt == 0)\n-                        hashSalt = GetRandHash();\n-                    uint256 hashRand = inv.hash ^ hashSalt;\n-                    hashRand = Hash(BEGIN(hashRand), END(hashRand));\n-                    bool fTrickleWait = ((hashRand & 3) != 0);\n-\n-                    if (fTrickleWait)\n-                    {\n-                        vInvWait.push_back(inv);\n-                        continue;\n-                    }\n-                }\n-\n-                // returns true if wasn't already contained in the set\n-                if (pto->setInventoryKnown.insert(inv).second)\n-                {\n-                    vInv.push_back(inv);\n-                    if (vInv.size() >= 1000)\n-                    {\n-                        pto->PushMessage(\"inv\", vInv);\n-                        vInv.clear();\n-                    }\n-                }\n-            }\n-            pto->vInventoryToSend = vInvWait;\n-        }\n-        if (!vInv.empty())\n-            pto->PushMessage(\"inv\", vInv);\n-\n-\n-        // Detect stalled peers. Require that blocks are in flight, we haven't\n-        // received a (requested) block in one minute, and that all blocks are\n-        // in flight for over two minutes, since we first had a chance to\n-        // process an incoming block.\n-        int64_t nNow = GetTimeMicros();\n-        if (!pto->fDisconnect && state.nBlocksInFlight &&\n-            state.nLastBlockReceive < state.nLastBlockProcess - BLOCK_DOWNLOAD_TIMEOUT*1000000 &&\n-            state.vBlocksInFlight.front().nTime < state.nLastBlockProcess - 2*BLOCK_DOWNLOAD_TIMEOUT*1000000) {\n-            LogPrintf(\"Peer %s is stalling block download, disconnecting\\n\", state.name.c_str());\n-            pto->fDisconnect = true;\n-        }\n-\n-        // Update knowledge of peer's block availability.\n-        ProcessBlockAvailability(pto->GetId());\n-\n-        //\n-        // Message: getdata (blocks)\n-        //\n-        vector<CInv> vGetData;\n-        while (!pto->fDisconnect && state.nBlocksToDownload && state.nBlocksInFlight < MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n-            uint256 hash = state.vBlocksToDownload.front();\n-            vGetData.push_back(CInv(MSG_BLOCK, hash));\n-            MarkBlockAsInFlight(pto->GetId(), hash);\n-            LogPrint(\"net\", \"Requesting block %s peer=%d\\n\", hash.ToString(), pto->id);\n-            if (vGetData.size() >= 1000)\n-            {\n-                pto->PushMessage(\"getdata\", vGetData);\n-                vGetData.clear();\n-            }\n-        }\n-\n-        //\n-        // Message: getdata (non-blocks)\n-        //\n-        while (!pto->fDisconnect && !pto->mapAskFor.empty() && (*pto->mapAskFor.begin()).first <= nNow)\n-        {\n-            const CInv& inv = (*pto->mapAskFor.begin()).second;\n-            if (!AlreadyHave(inv))\n-            {\n-                if (fDebug)\n-                    LogPrint(\"net\", \"Requesting %s peer=%d\\n\", inv.ToString(), pto->id);\n-                vGetData.push_back(inv);\n-                if (vGetData.size() >= 1000)\n-                {\n-                    pto->PushMessage(\"getdata\", vGetData);\n-                    vGetData.clear();\n-                }\n-            }\n-            pto->mapAskFor.erase(pto->mapAskFor.begin());\n-        }\n-        if (!vGetData.empty())\n-            pto->PushMessage(\"getdata\", vGetData);\n-\n-    }\n-    return true;\n-}\n-\n-\n-\n-\n-\n \n class CMainCleanup\n {"
      },
      {
        "sha": "66daadffc44ab32268a22651b36149ee5407ccb8",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 74,
        "deletions": 0,
        "changes": 74,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c84a55f83977765ba9181184eb0e5be097a869f/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c84a55f83977765ba9181184eb0e5be097a869f/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=8c84a55f83977765ba9181184eb0e5be097a869f",
        "patch": "@@ -23,6 +23,7 @@\n #include <exception>\n #include <map>\n #include <set>\n+#include <list>\n #include <stdint.h>\n #include <string>\n #include <utility>\n@@ -97,6 +98,14 @@ extern bool fIsBareMultisigStd;\n extern unsigned int nCoinCacheSize;\n extern CFeeRate minRelayTxFee;\n \n+struct COrphanBlock {\n+    uint256 hashBlock;\n+    uint256 hashPrev;\n+    std::vector<unsigned char> vchBlock;\n+};\n+extern std::map<uint256, COrphanBlock*> mapOrphanBlocks;\n+extern std::map<uint256, CTransaction> mapOrphanTransactions;\n+\n // Minimum disk space required - used in CheckDiskSpace()\n static const uint64_t nMinDiskSpace = 52428800;\n \n@@ -186,11 +195,76 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n \n \n \n+struct CMainSignals {\n+    // Notifies listeners of updated transaction data (transaction, and optionally the block it is found in.\n+    boost::signals2::signal<void (const CTransaction &, const CBlock *)> SyncTransaction;\n+    // Notifies listeners of an erased transaction (currently disabled, requires transaction replacement).\n+    boost::signals2::signal<void (const uint256 &)> EraseTransaction;\n+    // Notifies listeners of an updated transaction without new data (for now: a coinbase potentially becoming visible).\n+    boost::signals2::signal<void (const uint256 &)> UpdatedTransaction;\n+    // Notifies listeners of a new active block chain.\n+    boost::signals2::signal<void (const CBlockLocator &)> SetBestChain;\n+    // Notifies listeners about an inventory item being seen on the network.\n+    boost::signals2::signal<void (const uint256 &)> Inventory;\n+    // Tells listeners to broadcast their data.\n+    boost::signals2::signal<void ()> Broadcast;\n+};\n+\n+// Blocks that are in flight, and that are in the queue to be downloaded.\n+// Protected by cs_main.\n+struct QueuedBlock {\n+    uint256 hash;\n+    int64_t nTime;  // Time of \"getdata\" request in microseconds.\n+    int nQueuedBefore;  // Number of blocks in flight at the time of request.\n+};\n+\n struct CNodeStateStats {\n     int nMisbehavior;\n     int nSyncHeight;\n };\n \n+struct CBlockReject {\n+    unsigned char chRejectCode;\n+    std::string strRejectReason;\n+    uint256 hashBlock;\n+};\n+\n+// Maintain validation-specific state about nodes, protected by cs_main, instead\n+// by CNode's own locks. This simplifies asynchronous operation, where\n+// processing of incoming data is done after the ProcessMessage call returns,\n+// and we're no longer holding the node's locks.\n+struct CNodeState {\n+    // Accumulated misbehaviour score for this peer.\n+    int nMisbehavior;\n+    // Whether this peer should be disconnected and banned (unless whitelisted).\n+    bool fShouldBan;\n+    // String name of this peer (debugging/logging purposes).\n+    std::string name;\n+    // List of asynchronously-determined block rejections to notify this peer about.\n+    std::vector<CBlockReject> rejects;\n+    // The best known block we know this peer has announced.\n+    CBlockIndex *pindexBestKnownBlock;\n+    // The hash of the last unknown block this peer has announced.\n+    uint256 hashLastUnknownBlock;\n+    std::list<QueuedBlock> vBlocksInFlight;\n+    int nBlocksInFlight;\n+    std::list<uint256> vBlocksToDownload;\n+    int nBlocksToDownload;\n+    int64_t nLastBlockReceive;\n+    int64_t nLastBlockProcess;\n+\n+    CNodeState() {\n+        nMisbehavior = 0;\n+        fShouldBan = false;\n+        pindexBestKnownBlock = NULL;\n+        hashLastUnknownBlock = uint256(0);\n+        nBlocksToDownload = 0;\n+        nBlocksInFlight = 0;\n+        nLastBlockReceive = 0;\n+        nLastBlockProcess = 0;\n+    }\n+};\n+\n struct CDiskBlockPos\n {\n     int nFile;"
      },
      {
        "sha": "29dd42251da9df5f8d8ac06825867a5ecfc28a05",
        "filename": "src/procmsg.cpp",
        "status": "added",
        "additions": 1304,
        "deletions": 0,
        "changes": 1304,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c84a55f83977765ba9181184eb0e5be097a869f/src/procmsg.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c84a55f83977765ba9181184eb0e5be097a869f/src/procmsg.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/procmsg.cpp?ref=8c84a55f83977765ba9181184eb0e5be097a869f",
        "patch": "@@ -0,0 +1,1304 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <map>\n+#include \"core.h\"\n+#include \"checkpoints.h\"\n+#include \"addrman.h\"\n+#include \"alert.h\"\n+#include \"main.h\"\n+\n+using namespace std;\n+\n+map<uint256, set<uint256> > mapOrphanTransactionsByPrev;\n+\n+extern void UpdateBlockAvailability(NodeId nodeid, const uint256 &hash);\n+extern void ProcessBlockAvailability(NodeId nodeid);\n+extern void MarkBlockAsReceived(const uint256 &hash, NodeId nodeFrom = -1);\n+extern bool AddBlockToQueue(NodeId nodeid, const uint256 &hash);\n+extern void MarkBlockAsInFlight(NodeId nodeid, const uint256 &hash);\n+extern CNodeState *State(NodeId pnode);\n+extern map<uint256, NodeId> mapBlockSource;\n+extern uint256 GetOrphanRoot(const uint256& hash);\n+extern struct CMainSignals g_signals;\n+\n+//////////////////////////////////////////////////////////////////////////////\n+//\n+// mapOrphanTransactions\n+//\n+\n+bool AddOrphanTx(const CTransaction& tx)\n+{\n+    uint256 hash = tx.GetHash();\n+    if (mapOrphanTransactions.count(hash))\n+        return false;\n+\n+    // Ignore big transactions, to avoid a\n+    // send-big-orphans memory exhaustion attack. If a peer has a legitimate\n+    // large transaction with a missing parent then we assume\n+    // it will rebroadcast it later, after the parent transaction(s)\n+    // have been mined or received.\n+    // 10,000 orphans, each of which is at most 5,000 bytes big is\n+    // at most 500 megabytes of orphans:\n+    unsigned int sz = tx.GetSerializeSize(SER_NETWORK, CTransaction::CURRENT_VERSION);\n+    if (sz > 5000)\n+    {\n+        LogPrint(\"mempool\", \"ignoring large orphan tx (size: %u, hash: %s)\\n\", sz, hash.ToString());\n+        return false;\n+    }\n+\n+    mapOrphanTransactions[hash] = tx;\n+    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+        mapOrphanTransactionsByPrev[txin.prevout.hash].insert(hash);\n+\n+    LogPrint(\"mempool\", \"stored orphan tx %s (mapsz %u)\\n\", hash.ToString(),\n+        mapOrphanTransactions.size());\n+    return true;\n+}\n+\n+static void EraseOrphanTx(uint256 hash)\n+{\n+    if (!mapOrphanTransactions.count(hash))\n+        return;\n+    const CTransaction& tx = mapOrphanTransactions[hash];\n+    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+    {\n+        mapOrphanTransactionsByPrev[txin.prevout.hash].erase(hash);\n+        if (mapOrphanTransactionsByPrev[txin.prevout.hash].empty())\n+            mapOrphanTransactionsByPrev.erase(txin.prevout.hash);\n+    }\n+    mapOrphanTransactions.erase(hash);\n+}\n+\n+unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans)\n+{\n+    unsigned int nEvicted = 0;\n+    while (mapOrphanTransactions.size() > nMaxOrphans)\n+    {\n+        // Evict a random orphan:\n+        uint256 randomhash = GetRandHash();\n+        map<uint256, CTransaction>::iterator it = mapOrphanTransactions.lower_bound(randomhash);\n+        if (it == mapOrphanTransactions.end())\n+            it = mapOrphanTransactions.begin();\n+        EraseOrphanTx(it->first);\n+        ++nEvicted;\n+    }\n+    return nEvicted;\n+}\n+\n+\n+\n+\n+\n+\n+bool static AlreadyHave(const CInv& inv)\n+{\n+    switch (inv.type)\n+    {\n+    case MSG_TX:\n+        {\n+            bool txInMap = false;\n+            txInMap = mempool.exists(inv.hash);\n+            return txInMap || mapOrphanTransactions.count(inv.hash) ||\n+                pcoinsTip->HaveCoins(inv.hash);\n+        }\n+    case MSG_BLOCK:\n+        return mapBlockIndex.count(inv.hash) ||\n+               mapOrphanBlocks.count(inv.hash);\n+    }\n+    // Don't know what it is, just say we already got one\n+    return true;\n+}\n+\n+\n+void static ProcessGetData(CNode* pfrom)\n+{\n+    std::deque<CInv>::iterator it = pfrom->vRecvGetData.begin();\n+\n+    vector<CInv> vNotFound;\n+\n+    LOCK(cs_main);\n+\n+    while (it != pfrom->vRecvGetData.end()) {\n+        // Don't bother if send buffer is too full to respond anyway\n+        if (pfrom->nSendSize >= SendBufferSize())\n+            break;\n+\n+        const CInv &inv = *it;\n+        {\n+            boost::this_thread::interruption_point();\n+            it++;\n+\n+            if (inv.type == MSG_BLOCK || inv.type == MSG_FILTERED_BLOCK)\n+            {\n+                bool send = false;\n+                map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(inv.hash);\n+                if (mi != mapBlockIndex.end())\n+                {\n+                    // If the requested block is at a height below our last\n+                    // checkpoint, only serve it if it's in the checkpointed chain\n+                    int nHeight = mi->second->nHeight;\n+                    CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint(mapBlockIndex);\n+                    if (pcheckpoint && nHeight < pcheckpoint->nHeight) {\n+                        if (!chainActive.Contains(mi->second))\n+                        {\n+                            LogPrintf(\"ProcessGetData(): ignoring request for old block that isn't in the main chain\\n\");\n+                        } else {\n+                            send = true;\n+                        }\n+                    } else {\n+                        send = true;\n+                    }\n+                }\n+                if (send)\n+                {\n+                    // Send block from disk\n+                    CBlock block;\n+                    if (!ReadBlockFromDisk(block, (*mi).second))\n+                        assert(!\"cannot load block from disk\");\n+                    if (inv.type == MSG_BLOCK)\n+                        pfrom->PushMessage(\"block\", block);\n+                    else // MSG_FILTERED_BLOCK)\n+                    {\n+                        LOCK(pfrom->cs_filter);\n+                        if (pfrom->pfilter)\n+                        {\n+                            CMerkleBlock merkleBlock(block, *pfrom->pfilter);\n+                            pfrom->PushMessage(\"merkleblock\", merkleBlock);\n+                            // CMerkleBlock just contains hashes, so also push any transactions in the block the client did not see\n+                            // This avoids hurting performance by pointlessly requiring a round-trip\n+                            // Note that there is currently no way for a node to request any single transactions we didnt send here -\n+                            // they must either disconnect and retry or request the full block.\n+                            // Thus, the protocol spec specified allows for us to provide duplicate txn here,\n+                            // however we MUST always provide at least what the remote peer needs\n+                            typedef std::pair<unsigned int, uint256> PairType;\n+                            BOOST_FOREACH(PairType& pair, merkleBlock.vMatchedTxn)\n+                                if (!pfrom->setInventoryKnown.count(CInv(MSG_TX, pair.second)))\n+                                    pfrom->PushMessage(\"tx\", block.vtx[pair.first]);\n+                        }\n+                        // else\n+                            // no response\n+                    }\n+\n+                    // Trigger them to send a getblocks request for the next batch of inventory\n+                    if (inv.hash == pfrom->hashContinue)\n+                    {\n+                        // Bypass PushInventory, this must send even if redundant,\n+                        // and we want it right after the last block so they don't\n+                        // wait for other stuff first.\n+                        vector<CInv> vInv;\n+                        vInv.push_back(CInv(MSG_BLOCK, chainActive.Tip()->GetBlockHash()));\n+                        pfrom->PushMessage(\"inv\", vInv);\n+                        pfrom->hashContinue = 0;\n+                    }\n+                }\n+            }\n+            else if (inv.IsKnownType())\n+            {\n+                // Send stream from relay memory\n+                bool pushed = false;\n+                {\n+                    LOCK(cs_mapRelay);\n+                    map<CInv, CDataStream>::iterator mi = mapRelay.find(inv);\n+                    if (mi != mapRelay.end()) {\n+                        pfrom->PushMessage(inv.GetCommand(), (*mi).second);\n+                        pushed = true;\n+                    }\n+                }\n+                if (!pushed && inv.type == MSG_TX) {\n+                    CTransaction tx;\n+                    if (mempool.lookup(inv.hash, tx)) {\n+                        CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n+                        ss.reserve(1000);\n+                        ss << tx;\n+                        pfrom->PushMessage(\"tx\", ss);\n+                        pushed = true;\n+                    }\n+                }\n+                if (!pushed) {\n+                    vNotFound.push_back(inv);\n+                }\n+            }\n+\n+            // Track requests for our stuff.\n+            g_signals.Inventory(inv.hash);\n+\n+            if (inv.type == MSG_BLOCK || inv.type == MSG_FILTERED_BLOCK)\n+                break;\n+        }\n+    }\n+\n+    pfrom->vRecvGetData.erase(pfrom->vRecvGetData.begin(), it);\n+\n+    if (!vNotFound.empty()) {\n+        // Let the peer know that we didn't find what it asked for, so it doesn't\n+        // have to wait around forever. Currently only SPV clients actually care\n+        // about this message: it's needed when they are recursively walking the\n+        // dependencies of relevant unconfirmed transactions. SPV clients want to\n+        // do that because they want to know about (and store and rebroadcast and\n+        // risk analyze) the dependencies of transactions relevant to them, without\n+        // having to download the entire memory pool.\n+        pfrom->PushMessage(\"notfound\", vNotFound);\n+    }\n+}\n+\n+bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv, int64_t nTimeReceived)\n+{\n+    RandAddSeedPerfmon();\n+    LogPrint(\"net\", \"received: %s (%u bytes) peer=%d\\n\", strCommand, vRecv.size(), pfrom->id);\n+    if (mapArgs.count(\"-dropmessagestest\") && GetRand(atoi(mapArgs[\"-dropmessagestest\"])) == 0)\n+    {\n+        LogPrintf(\"dropmessagestest DROPPING RECV MESSAGE\\n\");\n+        return true;\n+    }\n+\n+    {\n+        LOCK(cs_main);\n+        State(pfrom->GetId())->nLastBlockProcess = GetTimeMicros();\n+    }\n+\n+\n+\n+    if (strCommand == \"version\")\n+    {\n+        // Each connection can only send one version message\n+        if (pfrom->nVersion != 0)\n+        {\n+            pfrom->PushMessage(\"reject\", strCommand, REJECT_DUPLICATE, string(\"Duplicate version message\"));\n+            Misbehaving(pfrom->GetId(), 1);\n+            return false;\n+        }\n+\n+        int64_t nTime;\n+        CAddress addrMe;\n+        CAddress addrFrom;\n+        uint64_t nNonce = 1;\n+        vRecv >> pfrom->nVersion >> pfrom->nServices >> nTime >> addrMe;\n+        if (pfrom->nVersion < MIN_PEER_PROTO_VERSION)\n+        {\n+            // disconnect from peers older than this proto version\n+            LogPrintf(\"peer=%d using obsolete version %i; disconnecting\\n\", pfrom->id, pfrom->nVersion);\n+            pfrom->PushMessage(\"reject\", strCommand, REJECT_OBSOLETE,\n+                               strprintf(\"Version must be %d or greater\", MIN_PEER_PROTO_VERSION));\n+            pfrom->fDisconnect = true;\n+            return false;\n+        }\n+\n+        if (pfrom->nVersion == 10300)\n+            pfrom->nVersion = 300;\n+        if (!vRecv.empty())\n+            vRecv >> addrFrom >> nNonce;\n+        if (!vRecv.empty()) {\n+            vRecv >> pfrom->strSubVer;\n+            pfrom->cleanSubVer = SanitizeString(pfrom->strSubVer);\n+        }\n+        if (!vRecv.empty())\n+            vRecv >> pfrom->nStartingHeight;\n+        if (!vRecv.empty())\n+            vRecv >> pfrom->fRelayTxes; // set to true after we get the first filter* message\n+        else\n+            pfrom->fRelayTxes = true;\n+\n+        if (pfrom->fInbound && addrMe.IsRoutable())\n+        {\n+            pfrom->addrLocal = addrMe;\n+            SeenLocal(addrMe);\n+        }\n+\n+        // Disconnect if we connected to ourself\n+        if (nNonce == nLocalHostNonce && nNonce > 1)\n+        {\n+            LogPrintf(\"connected to self at %s, disconnecting\\n\", pfrom->addr.ToString());\n+            pfrom->fDisconnect = true;\n+            return true;\n+        }\n+\n+        // Be shy and don't send version until we hear\n+        if (pfrom->fInbound)\n+            pfrom->PushVersion();\n+\n+        pfrom->fClient = !(pfrom->nServices & NODE_NETWORK);\n+\n+\n+        // Change version\n+        pfrom->PushMessage(\"verack\");\n+        pfrom->ssSend.SetVersion(min(pfrom->nVersion, PROTOCOL_VERSION));\n+\n+        if (!pfrom->fInbound)\n+        {\n+            // Advertise our address\n+            if (fListen && !IsInitialBlockDownload())\n+            {\n+                CAddress addr = GetLocalAddress(&pfrom->addr);\n+                if (addr.IsRoutable())\n+                    pfrom->PushAddress(addr);\n+            }\n+\n+            // Get recent addresses\n+            if (pfrom->fOneShot || pfrom->nVersion >= CADDR_TIME_VERSION || addrman.size() < 1000)\n+            {\n+                pfrom->PushMessage(\"getaddr\");\n+                pfrom->fGetAddr = true;\n+            }\n+            addrman.Good(pfrom->addr);\n+        } else {\n+            if (((CNetAddr)pfrom->addr) == (CNetAddr)addrFrom)\n+            {\n+                addrman.Add(addrFrom, addrFrom);\n+                addrman.Good(addrFrom);\n+            }\n+        }\n+\n+        // Relay alerts\n+        {\n+            LOCK(cs_mapAlerts);\n+            BOOST_FOREACH(PAIRTYPE(const uint256, CAlert)& item, mapAlerts)\n+                item.second.RelayTo(pfrom);\n+        }\n+\n+        pfrom->fSuccessfullyConnected = true;\n+\n+        string remoteAddr;\n+        if (fLogIPs)\n+            remoteAddr = \", peeraddr=\" + pfrom->addr.ToString();\n+\n+        LogPrintf(\"receive version message: %s: version %d, blocks=%d, us=%s, peer=%d%s\\n\",\n+                  pfrom->cleanSubVer, pfrom->nVersion,\n+                  pfrom->nStartingHeight, addrMe.ToString(), pfrom->id,\n+                  remoteAddr);\n+\n+        AddTimeData(pfrom->addr, nTime);\n+    }\n+\n+\n+    else if (pfrom->nVersion == 0)\n+    {\n+        // Must have a version message before anything else\n+        Misbehaving(pfrom->GetId(), 1);\n+        return false;\n+    }\n+\n+\n+    else if (strCommand == \"verack\")\n+    {\n+        pfrom->SetRecvVersion(min(pfrom->nVersion, PROTOCOL_VERSION));\n+    }\n+\n+\n+    else if (strCommand == \"addr\")\n+    {\n+        vector<CAddress> vAddr;\n+        vRecv >> vAddr;\n+\n+        // Don't want addr from older versions unless seeding\n+        if (pfrom->nVersion < CADDR_TIME_VERSION && addrman.size() > 1000)\n+            return true;\n+        if (vAddr.size() > 1000)\n+        {\n+            Misbehaving(pfrom->GetId(), 20);\n+            return error(\"message addr size() = %u\", vAddr.size());\n+        }\n+\n+        // Store the new addresses\n+        vector<CAddress> vAddrOk;\n+        int64_t nNow = GetAdjustedTime();\n+        int64_t nSince = nNow - 10 * 60;\n+        BOOST_FOREACH(CAddress& addr, vAddr)\n+        {\n+            boost::this_thread::interruption_point();\n+\n+            if (addr.nTime <= 100000000 || addr.nTime > nNow + 10 * 60)\n+                addr.nTime = nNow - 5 * 24 * 60 * 60;\n+            pfrom->AddAddressKnown(addr);\n+            bool fReachable = IsReachable(addr);\n+            if (addr.nTime > nSince && !pfrom->fGetAddr && vAddr.size() <= 10 && addr.IsRoutable())\n+            {\n+                // Relay to a limited number of other nodes\n+                {\n+                    LOCK(cs_vNodes);\n+                    // Use deterministic randomness to send to the same nodes for 24 hours\n+                    // at a time so the setAddrKnowns of the chosen nodes prevent repeats\n+                    static uint256 hashSalt;\n+                    if (hashSalt == 0)\n+                        hashSalt = GetRandHash();\n+                    uint64_t hashAddr = addr.GetHash();\n+                    uint256 hashRand = hashSalt ^ (hashAddr<<32) ^ ((GetTime()+hashAddr)/(24*60*60));\n+                    hashRand = Hash(BEGIN(hashRand), END(hashRand));\n+                    multimap<uint256, CNode*> mapMix;\n+                    BOOST_FOREACH(CNode* pnode, vNodes)\n+                    {\n+                        if (pnode->nVersion < CADDR_TIME_VERSION)\n+                            continue;\n+                        unsigned int nPointer;\n+                        memcpy(&nPointer, &pnode, sizeof(nPointer));\n+                        uint256 hashKey = hashRand ^ nPointer;\n+                        hashKey = Hash(BEGIN(hashKey), END(hashKey));\n+                        mapMix.insert(make_pair(hashKey, pnode));\n+                    }\n+                    int nRelayNodes = fReachable ? 2 : 1; // limited relaying of addresses outside our network(s)\n+                    for (multimap<uint256, CNode*>::iterator mi = mapMix.begin(); mi != mapMix.end() && nRelayNodes-- > 0; ++mi)\n+                        ((*mi).second)->PushAddress(addr);\n+                }\n+            }\n+            // Do not store addresses outside our network\n+            if (fReachable)\n+                vAddrOk.push_back(addr);\n+        }\n+        addrman.Add(vAddrOk, pfrom->addr, 2 * 60 * 60);\n+        if (vAddr.size() < 1000)\n+            pfrom->fGetAddr = false;\n+        if (pfrom->fOneShot)\n+            pfrom->fDisconnect = true;\n+    }\n+\n+\n+    else if (strCommand == \"inv\")\n+    {\n+        vector<CInv> vInv;\n+        vRecv >> vInv;\n+        if (vInv.size() > MAX_INV_SZ)\n+        {\n+            Misbehaving(pfrom->GetId(), 20);\n+            return error(\"message inv size() = %u\", vInv.size());\n+        }\n+\n+        LOCK(cs_main);\n+\n+        for (unsigned int nInv = 0; nInv < vInv.size(); nInv++)\n+        {\n+            const CInv &inv = vInv[nInv];\n+\n+            boost::this_thread::interruption_point();\n+            pfrom->AddInventoryKnown(inv);\n+\n+            bool fAlreadyHave = AlreadyHave(inv);\n+            LogPrint(\"net\", \"got inv: %s  %s peer=%d\\n\", inv.ToString(), fAlreadyHave ? \"have\" : \"new\", pfrom->id);\n+\n+            if (!fAlreadyHave) {\n+                if (!fImporting && !fReindex) {\n+                    if (inv.type == MSG_BLOCK)\n+                        AddBlockToQueue(pfrom->GetId(), inv.hash);\n+                    else\n+                        pfrom->AskFor(inv);\n+                }\n+            } else if (inv.type == MSG_BLOCK && mapOrphanBlocks.count(inv.hash)) {\n+                PushGetBlocks(pfrom, chainActive.Tip(), GetOrphanRoot(inv.hash));\n+            }\n+\n+            if (inv.type == MSG_BLOCK)\n+                UpdateBlockAvailability(pfrom->GetId(), inv.hash);\n+\n+            // Track requests for our stuff\n+            g_signals.Inventory(inv.hash);\n+        }\n+    }\n+\n+\n+    else if (strCommand == \"getdata\")\n+    {\n+        vector<CInv> vInv;\n+        vRecv >> vInv;\n+        if (vInv.size() > MAX_INV_SZ)\n+        {\n+            Misbehaving(pfrom->GetId(), 20);\n+            return error(\"message getdata size() = %u\", vInv.size());\n+        }\n+\n+        if (fDebug || (vInv.size() != 1))\n+            LogPrint(\"net\", \"received getdata (%u invsz) peer=%d\\n\", vInv.size(), pfrom->id);\n+\n+        if ((fDebug && vInv.size() > 0) || (vInv.size() == 1))\n+            LogPrint(\"net\", \"received getdata for: %s peer=%d\\n\", vInv[0].ToString(), pfrom->id);\n+\n+        pfrom->vRecvGetData.insert(pfrom->vRecvGetData.end(), vInv.begin(), vInv.end());\n+        ProcessGetData(pfrom);\n+    }\n+\n+\n+    else if (strCommand == \"getblocks\")\n+    {\n+        CBlockLocator locator;\n+        uint256 hashStop;\n+        vRecv >> locator >> hashStop;\n+\n+        LOCK(cs_main);\n+\n+        // Find the last block the caller has in the main chain\n+        CBlockIndex* pindex = chainActive.FindFork(locator);\n+\n+        // Send the rest of the chain\n+        if (pindex)\n+            pindex = chainActive.Next(pindex);\n+        int nLimit = 500;\n+        LogPrint(\"net\", \"getblocks %d to %s limit %d from peer=%d\\n\", (pindex ? pindex->nHeight : -1), hashStop==uint256(0) ? \"end\" : hashStop.ToString(), nLimit, pfrom->id);\n+        for (; pindex; pindex = chainActive.Next(pindex))\n+        {\n+            if (pindex->GetBlockHash() == hashStop)\n+            {\n+                LogPrint(\"net\", \"  getblocks stopping at %d %s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString());\n+                break;\n+            }\n+            pfrom->PushInventory(CInv(MSG_BLOCK, pindex->GetBlockHash()));\n+            if (--nLimit <= 0)\n+            {\n+                // When this block is requested, we'll send an inv that'll make them\n+                // getblocks the next batch of inventory.\n+                LogPrint(\"net\", \"  getblocks stopping at limit %d %s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString());\n+                pfrom->hashContinue = pindex->GetBlockHash();\n+                break;\n+            }\n+        }\n+    }\n+\n+\n+    else if (strCommand == \"getheaders\")\n+    {\n+        CBlockLocator locator;\n+        uint256 hashStop;\n+        vRecv >> locator >> hashStop;\n+\n+        LOCK(cs_main);\n+\n+        CBlockIndex* pindex = NULL;\n+        if (locator.IsNull())\n+        {\n+            // If locator is null, return the hashStop block\n+            map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hashStop);\n+            if (mi == mapBlockIndex.end())\n+                return true;\n+            pindex = (*mi).second;\n+        }\n+        else\n+        {\n+            // Find the last block the caller has in the main chain\n+            pindex = chainActive.FindFork(locator);\n+            if (pindex)\n+                pindex = chainActive.Next(pindex);\n+        }\n+\n+        // we must use CBlocks, as CBlockHeaders won't include the 0x00 nTx count at the end\n+        vector<CBlock> vHeaders;\n+        int nLimit = 2000;\n+        LogPrint(\"net\", \"getheaders %d to %s\\n\", (pindex ? pindex->nHeight : -1), hashStop.ToString());\n+        for (; pindex; pindex = chainActive.Next(pindex))\n+        {\n+            vHeaders.push_back(pindex->GetBlockHeader());\n+            if (--nLimit <= 0 || pindex->GetBlockHash() == hashStop)\n+                break;\n+        }\n+        pfrom->PushMessage(\"headers\", vHeaders);\n+    }\n+\n+\n+    else if (strCommand == \"tx\")\n+    {\n+        vector<uint256> vWorkQueue;\n+        vector<uint256> vEraseQueue;\n+        CTransaction tx;\n+        vRecv >> tx;\n+\n+        CInv inv(MSG_TX, tx.GetHash());\n+        pfrom->AddInventoryKnown(inv);\n+\n+        LOCK(cs_main);\n+\n+        bool fMissingInputs = false;\n+        CValidationState state;\n+        if (AcceptToMemoryPool(mempool, state, tx, true, &fMissingInputs))\n+        {\n+            mempool.check(pcoinsTip);\n+            RelayTransaction(tx);\n+            mapAlreadyAskedFor.erase(inv);\n+            vWorkQueue.push_back(inv.hash);\n+            vEraseQueue.push_back(inv.hash);\n+\n+\n+            LogPrint(\"mempool\", \"AcceptToMemoryPool: peer=%d %s : accepted %s (poolsz %u)\\n\",\n+                pfrom->id, pfrom->cleanSubVer,\n+                tx.GetHash().ToString(),\n+                mempool.mapTx.size());\n+\n+            // Recursively process any orphan transactions that depended on this one\n+            for (unsigned int i = 0; i < vWorkQueue.size(); i++)\n+            {\n+                uint256 hashPrev = vWorkQueue[i];\n+                for (set<uint256>::iterator mi = mapOrphanTransactionsByPrev[hashPrev].begin();\n+                     mi != mapOrphanTransactionsByPrev[hashPrev].end();\n+                     ++mi)\n+                {\n+                    const uint256& orphanHash = *mi;\n+                    const CTransaction& orphanTx = mapOrphanTransactions[orphanHash];\n+                    bool fMissingInputs2 = false;\n+                    // Use a dummy CValidationState so someone can't setup nodes to counter-DoS based on orphan\n+                    // resolution (that is, feeding people an invalid transaction based on LegitTxX in order to get\n+                    // anyone relaying LegitTxX banned)\n+                    CValidationState stateDummy;\n+\n+                    if (AcceptToMemoryPool(mempool, stateDummy, orphanTx, true, &fMissingInputs2))\n+                    {\n+                        LogPrint(\"mempool\", \"   accepted orphan tx %s\\n\", orphanHash.ToString());\n+                        RelayTransaction(orphanTx);\n+                        mapAlreadyAskedFor.erase(CInv(MSG_TX, orphanHash));\n+                        vWorkQueue.push_back(orphanHash);\n+                        vEraseQueue.push_back(orphanHash);\n+                    }\n+                    else if (!fMissingInputs2)\n+                    {\n+                        // invalid or too-little-fee orphan\n+                        vEraseQueue.push_back(orphanHash);\n+                        LogPrint(\"mempool\", \"   removed orphan tx %s\\n\", orphanHash.ToString());\n+                    }\n+                    mempool.check(pcoinsTip);\n+                }\n+            }\n+\n+            BOOST_FOREACH(uint256 hash, vEraseQueue)\n+                EraseOrphanTx(hash);\n+        }\n+        else if (fMissingInputs)\n+        {\n+            AddOrphanTx(tx);\n+\n+            // DoS prevention: do not allow mapOrphanTransactions to grow unbounded\n+            unsigned int nEvicted = LimitOrphanTxSize(MAX_ORPHAN_TRANSACTIONS);\n+            if (nEvicted > 0)\n+                LogPrint(\"mempool\", \"mapOrphan overflow, removed %u tx\\n\", nEvicted);\n+        } else if (pfrom->fWhitelisted) {\n+            // Always relay transactions received from whitelisted peers, even\n+            // if they are already in the mempool (allowing the node to function\n+            // as a gateway for nodes hidden behind it).\n+            RelayTransaction(tx);\n+        }\n+        int nDoS = 0;\n+        if (state.IsInvalid(nDoS))\n+        {\n+            LogPrint(\"mempool\", \"%s from peer=%d %s was not accepted into the memory pool: %s\\n\", tx.GetHash().ToString(),\n+                pfrom->id, pfrom->cleanSubVer,\n+                state.GetRejectReason());\n+            pfrom->PushMessage(\"reject\", strCommand, state.GetRejectCode(),\n+                               state.GetRejectReason(), inv.hash);\n+            if (nDoS > 0)\n+                Misbehaving(pfrom->GetId(), nDoS);\n+        }\n+    }\n+\n+\n+    else if (strCommand == \"block\" && !fImporting && !fReindex) // Ignore blocks received while importing\n+    {\n+        CBlock block;\n+        vRecv >> block;\n+\n+        LogPrint(\"net\", \"received block %s peer=%d\\n\", block.GetHash().ToString(), pfrom->id);\n+        // block.print();\n+\n+        CInv inv(MSG_BLOCK, block.GetHash());\n+        pfrom->AddInventoryKnown(inv);\n+\n+        {\n+            LOCK(cs_main);\n+            // Remember who we got this block from.\n+            mapBlockSource[inv.hash] = pfrom->GetId();\n+            MarkBlockAsReceived(inv.hash, pfrom->GetId());\n+        }\n+\n+        CValidationState state;\n+        ProcessBlock(state, pfrom, &block);\n+        int nDoS;\n+        if (state.IsInvalid(nDoS)) {\n+            pfrom->PushMessage(\"reject\", strCommand, state.GetRejectCode(),\n+                               state.GetRejectReason(), inv.hash);\n+            if (nDoS > 0) {\n+                LOCK(cs_main);\n+                Misbehaving(pfrom->GetId(), nDoS);\n+            }\n+        }\n+\n+    }\n+\n+\n+    else if (strCommand == \"getaddr\")\n+    {\n+        pfrom->vAddrToSend.clear();\n+        vector<CAddress> vAddr = addrman.GetAddr();\n+        BOOST_FOREACH(const CAddress &addr, vAddr)\n+            pfrom->PushAddress(addr);\n+    }\n+\n+\n+    else if (strCommand == \"mempool\")\n+    {\n+        LOCK2(cs_main, pfrom->cs_filter);\n+\n+        std::vector<uint256> vtxid;\n+        mempool.queryHashes(vtxid);\n+        vector<CInv> vInv;\n+        BOOST_FOREACH(uint256& hash, vtxid) {\n+            CInv inv(MSG_TX, hash);\n+            CTransaction tx;\n+            bool fInMemPool = mempool.lookup(hash, tx);\n+            if (!fInMemPool) continue; // another thread removed since queryHashes, maybe...\n+            if ((pfrom->pfilter && pfrom->pfilter->IsRelevantAndUpdate(tx)) ||\n+               (!pfrom->pfilter))\n+                vInv.push_back(inv);\n+            if (vInv.size() == MAX_INV_SZ) {\n+                pfrom->PushMessage(\"inv\", vInv);\n+                vInv.clear();\n+            }\n+        }\n+        if (vInv.size() > 0)\n+            pfrom->PushMessage(\"inv\", vInv);\n+    }\n+\n+\n+    else if (strCommand == \"ping\")\n+    {\n+        if (pfrom->nVersion > BIP0031_VERSION)\n+        {\n+            uint64_t nonce = 0;\n+            vRecv >> nonce;\n+            // Echo the message back with the nonce. This allows for two useful features:\n+            //\n+            // 1) A remote node can quickly check if the connection is operational\n+            // 2) Remote nodes can measure the latency of the network thread. If this node\n+            //    is overloaded it won't respond to pings quickly and the remote node can\n+            //    avoid sending us more work, like chain download requests.\n+            //\n+            // The nonce stops the remote getting confused between different pings: without\n+            // it, if the remote node sends a ping once per second and this node takes 5\n+            // seconds to respond to each, the 5th ping the remote sends would appear to\n+            // return very quickly.\n+            pfrom->PushMessage(\"pong\", nonce);\n+        }\n+    }\n+\n+\n+    else if (strCommand == \"pong\")\n+    {\n+        int64_t pingUsecEnd = nTimeReceived;\n+        uint64_t nonce = 0;\n+        size_t nAvail = vRecv.in_avail();\n+        bool bPingFinished = false;\n+        std::string sProblem;\n+\n+        if (nAvail >= sizeof(nonce)) {\n+            vRecv >> nonce;\n+\n+            // Only process pong message if there is an outstanding ping (old ping without nonce should never pong)\n+            if (pfrom->nPingNonceSent != 0) {\n+                if (nonce == pfrom->nPingNonceSent) {\n+                    // Matching pong received, this ping is no longer outstanding\n+                    bPingFinished = true;\n+                    int64_t pingUsecTime = pingUsecEnd - pfrom->nPingUsecStart;\n+                    if (pingUsecTime > 0) {\n+                        // Successful ping time measurement, replace previous\n+                        pfrom->nPingUsecTime = pingUsecTime;\n+                    } else {\n+                        // This should never happen\n+                        sProblem = \"Timing mishap\";\n+                    }\n+                } else {\n+                    // Nonce mismatches are normal when pings are overlapping\n+                    sProblem = \"Nonce mismatch\";\n+                    if (nonce == 0) {\n+                        // This is most likely a bug in another implementation somewhere, cancel this ping\n+                        bPingFinished = true;\n+                        sProblem = \"Nonce zero\";\n+                    }\n+                }\n+            } else {\n+                sProblem = \"Unsolicited pong without ping\";\n+            }\n+        } else {\n+            // This is most likely a bug in another implementation somewhere, cancel this ping\n+            bPingFinished = true;\n+            sProblem = \"Short payload\";\n+        }\n+\n+        if (!(sProblem.empty())) {\n+            LogPrint(\"net\", \"pong peer=%d %s: %s, %x expected, %x received, %u bytes\\n\",\n+                pfrom->id,\n+                pfrom->cleanSubVer,\n+                sProblem,\n+                pfrom->nPingNonceSent,\n+                nonce,\n+                nAvail);\n+        }\n+        if (bPingFinished) {\n+            pfrom->nPingNonceSent = 0;\n+        }\n+    }\n+\n+\n+    else if (strCommand == \"alert\")\n+    {\n+        CAlert alert;\n+        vRecv >> alert;\n+\n+        uint256 alertHash = alert.GetHash();\n+        if (pfrom->setKnown.count(alertHash) == 0)\n+        {\n+            if (alert.ProcessAlert())\n+            {\n+                // Relay\n+                pfrom->setKnown.insert(alertHash);\n+                {\n+                    LOCK(cs_vNodes);\n+                    BOOST_FOREACH(CNode* pnode, vNodes)\n+                        alert.RelayTo(pnode);\n+                }\n+            }\n+            else {\n+                // Small DoS penalty so peers that send us lots of\n+                // duplicate/expired/invalid-signature/whatever alerts\n+                // eventually get banned.\n+                // This isn't a Misbehaving(100) (immediate ban) because the\n+                // peer might be an older or different implementation with\n+                // a different signature key, etc.\n+                Misbehaving(pfrom->GetId(), 10);\n+            }\n+        }\n+    }\n+\n+\n+    else if (strCommand == \"filterload\")\n+    {\n+        CBloomFilter filter;\n+        vRecv >> filter;\n+\n+        if (!filter.IsWithinSizeConstraints())\n+            // There is no excuse for sending a too-large filter\n+            Misbehaving(pfrom->GetId(), 100);\n+        else\n+        {\n+            LOCK(pfrom->cs_filter);\n+            delete pfrom->pfilter;\n+            pfrom->pfilter = new CBloomFilter(filter);\n+            pfrom->pfilter->UpdateEmptyFull();\n+        }\n+        pfrom->fRelayTxes = true;\n+    }\n+\n+\n+    else if (strCommand == \"filteradd\")\n+    {\n+        vector<unsigned char> vData;\n+        vRecv >> vData;\n+\n+        // Nodes must NEVER send a data item > 520 bytes (the max size for a script data object,\n+        // and thus, the maximum size any matched object can have) in a filteradd message\n+        if (vData.size() > MAX_SCRIPT_ELEMENT_SIZE)\n+        {\n+            Misbehaving(pfrom->GetId(), 100);\n+        } else {\n+            LOCK(pfrom->cs_filter);\n+            if (pfrom->pfilter)\n+                pfrom->pfilter->insert(vData);\n+            else\n+                Misbehaving(pfrom->GetId(), 100);\n+        }\n+    }\n+\n+\n+    else if (strCommand == \"filterclear\")\n+    {\n+        LOCK(pfrom->cs_filter);\n+        delete pfrom->pfilter;\n+        pfrom->pfilter = new CBloomFilter();\n+        pfrom->fRelayTxes = true;\n+    }\n+\n+\n+    else if (strCommand == \"reject\")\n+    {\n+        if (fDebug)\n+        {\n+            string strMsg; unsigned char ccode; string strReason;\n+            vRecv >> strMsg >> ccode >> strReason;\n+\n+            ostringstream ss;\n+            ss << strMsg << \" code \" << itostr(ccode) << \": \" << strReason;\n+\n+            if (strMsg == \"block\" || strMsg == \"tx\")\n+            {\n+                uint256 hash;\n+                vRecv >> hash;\n+                ss << \": hash \" << hash.ToString();\n+            }\n+            // Truncate to reasonable length and sanitize before printing:\n+            string s = ss.str();\n+            if (s.size() > 111) s.erase(111, string::npos);\n+            LogPrint(\"net\", \"Reject %s\\n\", SanitizeString(s));\n+        }\n+    }\n+\n+    else\n+    {\n+        // Ignore unknown commands for extensibility\n+        LogPrint(\"net\", \"Unknown command \\\"%s\\\" from peer=%d\\n\", SanitizeString(strCommand), pfrom->id);\n+    }\n+\n+\n+    // Update the last seen time for this node's address\n+    if (pfrom->fNetworkNode)\n+        if (strCommand == \"version\" || strCommand == \"addr\" || strCommand == \"inv\" || strCommand == \"getdata\" || strCommand == \"ping\")\n+            AddressCurrentlyConnected(pfrom->addr);\n+\n+\n+    return true;\n+}\n+\n+// requires LOCK(cs_vRecvMsg)\n+bool ProcessMessages(CNode* pfrom)\n+{\n+    //if (fDebug)\n+    //    LogPrintf(\"ProcessMessages(%u messages)\\n\", pfrom->vRecvMsg.size());\n+\n+    //\n+    // Message format\n+    //  (4) message start\n+    //  (12) command\n+    //  (4) size\n+    //  (4) checksum\n+    //  (x) data\n+    //\n+    bool fOk = true;\n+\n+    if (!pfrom->vRecvGetData.empty())\n+        ProcessGetData(pfrom);\n+\n+    // this maintains the order of responses\n+    if (!pfrom->vRecvGetData.empty()) return fOk;\n+\n+    std::deque<CNetMessage>::iterator it = pfrom->vRecvMsg.begin();\n+    while (!pfrom->fDisconnect && it != pfrom->vRecvMsg.end()) {\n+        // Don't bother if send buffer is too full to respond anyway\n+        if (pfrom->nSendSize >= SendBufferSize())\n+            break;\n+\n+        // get next message\n+        CNetMessage& msg = *it;\n+\n+        //if (fDebug)\n+        //    LogPrintf(\"ProcessMessages(message %u msgsz, %u bytes, complete:%s)\\n\",\n+        //            msg.hdr.nMessageSize, msg.vRecv.size(),\n+        //            msg.complete() ? \"Y\" : \"N\");\n+\n+        // end, if an incomplete message is found\n+        if (!msg.complete())\n+            break;\n+\n+        // at this point, any failure means we can delete the current message\n+        it++;\n+\n+        // Scan for message start\n+        if (memcmp(msg.hdr.pchMessageStart, Params().MessageStart(), MESSAGE_START_SIZE) != 0) {\n+            LogPrintf(\"\\n\\nPROCESSMESSAGE: INVALID MESSAGESTART\\n\\n\");\n+            fOk = false;\n+            break;\n+        }\n+\n+        // Read header\n+        CMessageHeader& hdr = msg.hdr;\n+        if (!hdr.IsValid())\n+        {\n+            LogPrintf(\"\\n\\nPROCESSMESSAGE: ERRORS IN HEADER %s\\n\\n\\n\", hdr.GetCommand());\n+            continue;\n+        }\n+        string strCommand = hdr.GetCommand();\n+\n+        // Message size\n+        unsigned int nMessageSize = hdr.nMessageSize;\n+\n+        // Checksum\n+        CDataStream& vRecv = msg.vRecv;\n+        uint256 hash = Hash(vRecv.begin(), vRecv.begin() + nMessageSize);\n+        unsigned int nChecksum = 0;\n+        memcpy(&nChecksum, &hash, sizeof(nChecksum));\n+        if (nChecksum != hdr.nChecksum)\n+        {\n+            LogPrintf(\"ProcessMessages(%s, %u bytes) : CHECKSUM ERROR nChecksum=%08x hdr.nChecksum=%08x\\n\",\n+               strCommand, nMessageSize, nChecksum, hdr.nChecksum);\n+            continue;\n+        }\n+\n+        // Process message\n+        bool fRet = false;\n+        try\n+        {\n+            fRet = ProcessMessage(pfrom, strCommand, vRecv, msg.nTime);\n+            boost::this_thread::interruption_point();\n+        }\n+        catch (std::ios_base::failure& e)\n+        {\n+            pfrom->PushMessage(\"reject\", strCommand, REJECT_MALFORMED, string(\"error parsing message\"));\n+            if (strstr(e.what(), \"end of data\"))\n+            {\n+                // Allow exceptions from under-length message on vRecv\n+                LogPrintf(\"ProcessMessages(%s, %u bytes) : Exception '%s' caught, normally caused by a message being shorter than its stated length\\n\", strCommand, nMessageSize, e.what());\n+            }\n+            else if (strstr(e.what(), \"size too large\"))\n+            {\n+                // Allow exceptions from over-long size\n+                LogPrintf(\"ProcessMessages(%s, %u bytes) : Exception '%s' caught\\n\", strCommand, nMessageSize, e.what());\n+            }\n+            else\n+            {\n+                PrintExceptionContinue(&e, \"ProcessMessages()\");\n+            }\n+        }\n+        catch (boost::thread_interrupted) {\n+            throw;\n+        }\n+        catch (std::exception& e) {\n+            PrintExceptionContinue(&e, \"ProcessMessages()\");\n+        } catch (...) {\n+            PrintExceptionContinue(NULL, \"ProcessMessages()\");\n+        }\n+\n+        if (!fRet)\n+            LogPrintf(\"ProcessMessage(%s, %u bytes) FAILED peer=%d\\n\", strCommand, nMessageSize, pfrom->id);\n+\n+        break;\n+    }\n+\n+    // In case the connection got shut down, its receive buffer was wiped\n+    if (!pfrom->fDisconnect)\n+        pfrom->vRecvMsg.erase(pfrom->vRecvMsg.begin(), it);\n+\n+    return fOk;\n+}\n+\n+\n+bool SendMessages(CNode* pto, bool fSendTrickle)\n+{\n+    {\n+        // Don't send anything until we get their version message\n+        if (pto->nVersion == 0)\n+            return true;\n+\n+        //\n+        // Message: ping\n+        //\n+        bool pingSend = false;\n+        if (pto->fPingQueued) {\n+            // RPC ping request by user\n+            pingSend = true;\n+        }\n+        if (pto->nPingNonceSent == 0 && pto->nPingUsecStart + PING_INTERVAL * 1000000 < GetTimeMicros()) {\n+            // Ping automatically sent as a latency probe & keepalive.\n+            pingSend = true;\n+        }\n+        if (pingSend) {\n+            uint64_t nonce = 0;\n+            while (nonce == 0) {\n+                GetRandBytes((unsigned char*)&nonce, sizeof(nonce));\n+            }\n+            pto->fPingQueued = false;\n+            pto->nPingUsecStart = GetTimeMicros();\n+            if (pto->nVersion > BIP0031_VERSION) {\n+                pto->nPingNonceSent = nonce;\n+                pto->PushMessage(\"ping\", nonce);\n+            } else {\n+                // Peer is too old to support ping command with nonce, pong will never arrive.\n+                pto->nPingNonceSent = 0;\n+                pto->PushMessage(\"ping\");\n+            }\n+        }\n+\n+        TRY_LOCK(cs_main, lockMain); // Acquire cs_main for IsInitialBlockDownload() and CNodeState()\n+        if (!lockMain)\n+            return true;\n+\n+        // Address refresh broadcast\n+        static int64_t nLastRebroadcast;\n+        if (!IsInitialBlockDownload() && (GetTime() - nLastRebroadcast > 24 * 60 * 60))\n+        {\n+            {\n+                LOCK(cs_vNodes);\n+                BOOST_FOREACH(CNode* pnode, vNodes)\n+                {\n+                    // Periodically clear setAddrKnown to allow refresh broadcasts\n+                    if (nLastRebroadcast)\n+                        pnode->setAddrKnown.clear();\n+\n+                    // Rebroadcast our address\n+                    if (fListen)\n+                    {\n+                        CAddress addr = GetLocalAddress(&pnode->addr);\n+                        if (addr.IsRoutable())\n+                            pnode->PushAddress(addr);\n+                    }\n+                }\n+            }\n+            nLastRebroadcast = GetTime();\n+        }\n+\n+        //\n+        // Message: addr\n+        //\n+        if (fSendTrickle)\n+        {\n+            vector<CAddress> vAddr;\n+            vAddr.reserve(pto->vAddrToSend.size());\n+            BOOST_FOREACH(const CAddress& addr, pto->vAddrToSend)\n+            {\n+                // returns true if wasn't already contained in the set\n+                if (pto->setAddrKnown.insert(addr).second)\n+                {\n+                    vAddr.push_back(addr);\n+                    // receiver rejects addr messages larger than 1000\n+                    if (vAddr.size() >= 1000)\n+                    {\n+                        pto->PushMessage(\"addr\", vAddr);\n+                        vAddr.clear();\n+                    }\n+                }\n+            }\n+            pto->vAddrToSend.clear();\n+            if (!vAddr.empty())\n+                pto->PushMessage(\"addr\", vAddr);\n+        }\n+\n+        CNodeState &state = *State(pto->GetId());\n+        if (state.fShouldBan) {\n+            if (pto->fWhitelisted)\n+                LogPrintf(\"Warning: not punishing whitelisted peer %s!\\n\", pto->addr.ToString());\n+            else {\n+                pto->fDisconnect = true;\n+                if (pto->addr.IsLocal())\n+                    LogPrintf(\"Warning: not banning local peer %s!\\n\", pto->addr.ToString());\n+                else\n+                    CNode::Ban(pto->addr);\n+            }\n+            state.fShouldBan = false;\n+        }\n+\n+        BOOST_FOREACH(const CBlockReject& reject, state.rejects)\n+            pto->PushMessage(\"reject\", (string)\"block\", reject.chRejectCode, reject.strRejectReason, reject.hashBlock);\n+        state.rejects.clear();\n+\n+        // Start block sync\n+        if (pto->fStartSync && !fImporting && !fReindex) {\n+            pto->fStartSync = false;\n+            PushGetBlocks(pto, chainActive.Tip(), uint256(0));\n+        }\n+\n+        // Resend wallet transactions that haven't gotten in a block yet\n+        // Except during reindex, importing and IBD, when old wallet\n+        // transactions become unconfirmed and spams other nodes.\n+        if (!fReindex && !fImporting && !IsInitialBlockDownload())\n+        {\n+            g_signals.Broadcast();\n+        }\n+\n+        //\n+        // Message: inventory\n+        //\n+        vector<CInv> vInv;\n+        vector<CInv> vInvWait;\n+        {\n+            LOCK(pto->cs_inventory);\n+            vInv.reserve(pto->vInventoryToSend.size());\n+            vInvWait.reserve(pto->vInventoryToSend.size());\n+            BOOST_FOREACH(const CInv& inv, pto->vInventoryToSend)\n+            {\n+                if (pto->setInventoryKnown.count(inv))\n+                    continue;\n+\n+                // trickle out tx inv to protect privacy\n+                if (inv.type == MSG_TX && !fSendTrickle)\n+                {\n+                    // 1/4 of tx invs blast to all immediately\n+                    static uint256 hashSalt;\n+                    if (hashSalt == 0)\n+                        hashSalt = GetRandHash();\n+                    uint256 hashRand = inv.hash ^ hashSalt;\n+                    hashRand = Hash(BEGIN(hashRand), END(hashRand));\n+                    bool fTrickleWait = ((hashRand & 3) != 0);\n+\n+                    if (fTrickleWait)\n+                    {\n+                        vInvWait.push_back(inv);\n+                        continue;\n+                    }\n+                }\n+\n+                // returns true if wasn't already contained in the set\n+                if (pto->setInventoryKnown.insert(inv).second)\n+                {\n+                    vInv.push_back(inv);\n+                    if (vInv.size() >= 1000)\n+                    {\n+                        pto->PushMessage(\"inv\", vInv);\n+                        vInv.clear();\n+                    }\n+                }\n+            }\n+            pto->vInventoryToSend = vInvWait;\n+        }\n+        if (!vInv.empty())\n+            pto->PushMessage(\"inv\", vInv);\n+\n+\n+        // Detect stalled peers. Require that blocks are in flight, we haven't\n+        // received a (requested) block in one minute, and that all blocks are\n+        // in flight for over two minutes, since we first had a chance to\n+        // process an incoming block.\n+        int64_t nNow = GetTimeMicros();\n+        if (!pto->fDisconnect && state.nBlocksInFlight &&\n+            state.nLastBlockReceive < state.nLastBlockProcess - BLOCK_DOWNLOAD_TIMEOUT*1000000 &&\n+            state.vBlocksInFlight.front().nTime < state.nLastBlockProcess - 2*BLOCK_DOWNLOAD_TIMEOUT*1000000) {\n+            LogPrintf(\"Peer %s is stalling block download, disconnecting\\n\", state.name.c_str());\n+            pto->fDisconnect = true;\n+        }\n+\n+        // Update knowledge of peer's block availability.\n+        ProcessBlockAvailability(pto->GetId());\n+\n+        //\n+        // Message: getdata (blocks)\n+        //\n+        vector<CInv> vGetData;\n+        while (!pto->fDisconnect && state.nBlocksToDownload && state.nBlocksInFlight < MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n+            uint256 hash = state.vBlocksToDownload.front();\n+            vGetData.push_back(CInv(MSG_BLOCK, hash));\n+            MarkBlockAsInFlight(pto->GetId(), hash);\n+            LogPrint(\"net\", \"Requesting block %s peer=%d\\n\", hash.ToString(), pto->id);\n+            if (vGetData.size() >= 1000)\n+            {\n+                pto->PushMessage(\"getdata\", vGetData);\n+                vGetData.clear();\n+            }\n+        }\n+\n+        //\n+        // Message: getdata (non-blocks)\n+        //\n+        while (!pto->fDisconnect && !pto->mapAskFor.empty() && (*pto->mapAskFor.begin()).first <= nNow)\n+        {\n+            const CInv& inv = (*pto->mapAskFor.begin()).second;\n+            if (!AlreadyHave(inv))\n+            {\n+                if (fDebug)\n+                    LogPrint(\"net\", \"Requesting %s peer=%d\\n\", inv.ToString(), pto->id);\n+                vGetData.push_back(inv);\n+                if (vGetData.size() >= 1000)\n+                {\n+                    pto->PushMessage(\"getdata\", vGetData);\n+                    vGetData.clear();\n+                }\n+            }\n+            pto->mapAskFor.erase(pto->mapAskFor.begin());\n+        }\n+        if (!vGetData.empty())\n+            pto->PushMessage(\"getdata\", vGetData);\n+\n+    }\n+    return true;\n+}\n+\n+\n+\n+"
      }
    ]
  },
  {
    "sha": "451e44a77b0b9e13d82e1155024d094ceffa9c6f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NTFlNDRhNzdiMGI5ZTEzZDgyZTExNTUwMjRkMDk0Y2VmZmE5YzZm",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jgarzik@bitpay.com",
        "date": "2014-08-07T17:00:14Z"
      },
      "committer": {
        "name": "Jeff Garzik",
        "email": "jgarzik@bitpay.com",
        "date": "2014-08-07T17:00:14Z"
      },
      "message": "Create a MessageEngine wrapper class for message processing",
      "tree": {
        "sha": "136e4ffc99b4565562bdec28fdecb4791583f026",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/136e4ffc99b4565562bdec28fdecb4791583f026"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/451e44a77b0b9e13d82e1155024d094ceffa9c6f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/451e44a77b0b9e13d82e1155024d094ceffa9c6f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/451e44a77b0b9e13d82e1155024d094ceffa9c6f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/451e44a77b0b9e13d82e1155024d094ceffa9c6f/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "8c84a55f83977765ba9181184eb0e5be097a869f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c84a55f83977765ba9181184eb0e5be097a869f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8c84a55f83977765ba9181184eb0e5be097a869f"
      }
    ],
    "stats": {
      "total": 61,
      "additions": 47,
      "deletions": 14
    },
    "files": [
      {
        "sha": "540620522c7e49e61c48e7a6cd8a0f5fc80b2bb8",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/451e44a77b0b9e13d82e1155024d094ceffa9c6f/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/451e44a77b0b9e13d82e1155024d094ceffa9c6f/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=451e44a77b0b9e13d82e1155024d094ceffa9c6f",
        "patch": "@@ -96,6 +96,7 @@ BITCOIN_CORE_H = \\\n   net.h \\\n   noui.h \\\n   pow.h \\\n+  procmsg.h \\\n   protocol.h \\\n   random.h \\\n   rpcclient.h \\"
      },
      {
        "sha": "3aac33eb0c200c8bde6b5730ec90ba656077c88f",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/451e44a77b0b9e13d82e1155024d094ceffa9c6f/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/451e44a77b0b9e13d82e1155024d094ceffa9c6f/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=451e44a77b0b9e13d82e1155024d094ceffa9c6f",
        "patch": "@@ -17,6 +17,7 @@\n #include \"txmempool.h\"\n #include \"ui_interface.h\"\n #include \"util.h\"\n+#include \"procmsg.h\"\n \n #include <sstream>\n \n@@ -292,6 +293,16 @@ bool GetNodeStateStats(NodeId nodeid, CNodeStateStats &stats) {\n     return true;\n }\n \n+static bool SendMessages(CNode* pto, bool fSendTrickle)\n+{\n+    return msgeng.SendMessages(pto, fSendTrickle);\n+}\n+\n+static bool ProcessMessages(CNode* pfrom)\n+{\n+    return msgeng.ProcessMessages(pfrom);\n+}\n+\n void RegisterNodeSignals(CNodeSignals& nodeSignals)\n {\n     nodeSignals.GetHeight.connect(&GetHeight);"
      },
      {
        "sha": "36bbe563c81a73a7a8688fe1b85a32002e2e93c3",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/451e44a77b0b9e13d82e1155024d094ceffa9c6f/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/451e44a77b0b9e13d82e1155024d094ceffa9c6f/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=451e44a77b0b9e13d82e1155024d094ceffa9c6f",
        "patch": "@@ -154,10 +154,6 @@ bool LoadBlockIndex();\n void UnloadBlockIndex();\n /** Print the loaded block tree */\n void PrintBlockTree();\n-/** Process protocol messages received from a given node */\n-bool ProcessMessages(CNode* pfrom);\n-/** Send queued protocol messages to be sent to a give node */\n-bool SendMessages(CNode* pto, bool fSendTrickle);\n /** Run an instance of the script checking thread */\n void ThreadScriptCheck();\n /** Check whether we are doing an initial block download (synchronizing from disk or network) */"
      },
      {
        "sha": "17105d15984e4a9f1c33f000f1a491857c42d4cb",
        "filename": "src/procmsg.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/451e44a77b0b9e13d82e1155024d094ceffa9c6f/src/procmsg.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/451e44a77b0b9e13d82e1155024d094ceffa9c6f/src/procmsg.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/procmsg.cpp?ref=451e44a77b0b9e13d82e1155024d094ceffa9c6f",
        "patch": "@@ -9,9 +9,12 @@\n #include \"addrman.h\"\n #include \"alert.h\"\n #include \"main.h\"\n+#include \"procmsg.h\"\n \n using namespace std;\n \n+class MessageEngine msgeng;\n+\n map<uint256, set<uint256> > mapOrphanTransactionsByPrev;\n \n extern void UpdateBlockAvailability(NodeId nodeid, const uint256 &hash);\n@@ -244,7 +247,7 @@ void static ProcessGetData(CNode* pfrom)\n     }\n }\n \n-bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv, int64_t nTimeReceived)\n+bool MessageEngine::ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv, int64_t nTimeReceived)\n {\n     RandAddSeedPerfmon();\n     LogPrint(\"net\", \"received: %s (%u bytes) peer=%d\\n\", strCommand, vRecv.size(), pfrom->id);\n@@ -950,7 +953,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n }\n \n // requires LOCK(cs_vRecvMsg)\n-bool ProcessMessages(CNode* pfrom)\n+bool MessageEngine::ProcessMessages(CNode* pfrom)\n {\n     //if (fDebug)\n     //    LogPrintf(\"ProcessMessages(%u messages)\\n\", pfrom->vRecvMsg.size());\n@@ -1071,7 +1074,7 @@ bool ProcessMessages(CNode* pfrom)\n }\n \n \n-bool SendMessages(CNode* pto, bool fSendTrickle)\n+bool MessageEngine::SendMessages(CNode* pto, bool fSendTrickle)\n {\n     {\n         // Don't send anything until we get their version message"
      },
      {
        "sha": "2fefd26d2ac4171358a07f2e94bd8b1891540e53",
        "filename": "src/procmsg.h",
        "status": "added",
        "additions": 21,
        "deletions": 0,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/451e44a77b0b9e13d82e1155024d094ceffa9c6f/src/procmsg.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/451e44a77b0b9e13d82e1155024d094ceffa9c6f/src/procmsg.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/procmsg.h?ref=451e44a77b0b9e13d82e1155024d094ceffa9c6f",
        "patch": "@@ -0,0 +1,21 @@\n+#ifndef __BITCOIN_PROCMSG_H__\n+#define __BITCOIN_PROCMSG_H__\n+\n+#include <string>\n+#include <stdint.h>\n+#include \"serialize.h\"\n+\n+class CNode;\n+\n+class MessageEngine {\n+public:\n+    bool ProcessMessages(CNode* pfrom);\n+    bool SendMessages(CNode* pto, bool fSendTrickle);\n+\n+private:\n+    bool ProcessMessage(CNode* pfrom, std::string strCommand, CDataStream& vRecv, int64_t nTimeReceived);\n+};\n+\n+extern class MessageEngine msgeng;\n+\n+#endif // __BITCOIN_PROCMSG_H__"
      },
      {
        "sha": "4142f37d33c0a77e41c3330c78322729d3e98b5e",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 7,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/451e44a77b0b9e13d82e1155024d094ceffa9c6f/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/451e44a77b0b9e13d82e1155024d094ceffa9c6f/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=451e44a77b0b9e13d82e1155024d094ceffa9c6f",
        "patch": "@@ -14,6 +14,7 @@\n #include \"pow.h\"\n #include \"script.h\"\n #include \"serialize.h\"\n+#include \"procmsg.h\"\n \n #include <stdint.h>\n \n@@ -44,19 +45,19 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\n     CNode dummyNode1(INVALID_SOCKET, addr1, \"\", true);\n     dummyNode1.nVersion = 1;\n     Misbehaving(dummyNode1.GetId(), 100); // Should get banned\n-    SendMessages(&dummyNode1, false);\n+    msgeng.SendMessages(&dummyNode1, false);\n     BOOST_CHECK(CNode::IsBanned(addr1));\n     BOOST_CHECK(!CNode::IsBanned(ip(0xa0b0c001|0x0000ff00))); // Different IP, not banned\n \n     CAddress addr2(ip(0xa0b0c002));\n     CNode dummyNode2(INVALID_SOCKET, addr2, \"\", true);\n     dummyNode2.nVersion = 1;\n     Misbehaving(dummyNode2.GetId(), 50);\n-    SendMessages(&dummyNode2, false);\n+    msgeng.SendMessages(&dummyNode2, false);\n     BOOST_CHECK(!CNode::IsBanned(addr2)); // 2 not banned yet...\n     BOOST_CHECK(CNode::IsBanned(addr1));  // ... but 1 still should be\n     Misbehaving(dummyNode2.GetId(), 50);\n-    SendMessages(&dummyNode2, false);\n+    msgeng.SendMessages(&dummyNode2, false);\n     BOOST_CHECK(CNode::IsBanned(addr2));\n }\n \n@@ -68,13 +69,13 @@ BOOST_AUTO_TEST_CASE(DoS_banscore)\n     CNode dummyNode1(INVALID_SOCKET, addr1, \"\", true);\n     dummyNode1.nVersion = 1;\n     Misbehaving(dummyNode1.GetId(), 100);\n-    SendMessages(&dummyNode1, false);\n+    msgeng.SendMessages(&dummyNode1, false);\n     BOOST_CHECK(!CNode::IsBanned(addr1));\n     Misbehaving(dummyNode1.GetId(), 10);\n-    SendMessages(&dummyNode1, false);\n+    msgeng.SendMessages(&dummyNode1, false);\n     BOOST_CHECK(!CNode::IsBanned(addr1));\n     Misbehaving(dummyNode1.GetId(), 1);\n-    SendMessages(&dummyNode1, false);\n+    msgeng.SendMessages(&dummyNode1, false);\n     BOOST_CHECK(CNode::IsBanned(addr1));\n     mapArgs.erase(\"-banscore\");\n }\n@@ -90,7 +91,7 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n     dummyNode.nVersion = 1;\n \n     Misbehaving(dummyNode.GetId(), 100);\n-    SendMessages(&dummyNode, false);\n+    msgeng.SendMessages(&dummyNode, false);\n     BOOST_CHECK(CNode::IsBanned(addr));\n \n     SetMockTime(nStartTime+60*60);"
      }
    ]
  },
  {
    "sha": "78edf5cb8cf65caf38080ac57040469cc9c6957f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3OGVkZjVjYjhjZjY1Y2FmMzgwODBhYzU3MDQwNDY5Y2M5YzY5NTdm",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jgarzik@bitpay.com",
        "date": "2014-08-07T17:31:14Z"
      },
      "committer": {
        "name": "Jeff Garzik",
        "email": "jgarzik@bitpay.com",
        "date": "2014-08-07T17:31:14Z"
      },
      "message": "Split up P2P message processing into MessageEngine methods",
      "tree": {
        "sha": "294125ee1b17a88ee40f558d1979b891fa4b4062",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/294125ee1b17a88ee40f558d1979b891fa4b4062"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/78edf5cb8cf65caf38080ac57040469cc9c6957f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78edf5cb8cf65caf38080ac57040469cc9c6957f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/78edf5cb8cf65caf38080ac57040469cc9c6957f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78edf5cb8cf65caf38080ac57040469cc9c6957f/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "451e44a77b0b9e13d82e1155024d094ceffa9c6f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/451e44a77b0b9e13d82e1155024d094ceffa9c6f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/451e44a77b0b9e13d82e1155024d094ceffa9c6f"
      }
    ],
    "stats": {
      "total": 181,
      "additions": 134,
      "deletions": 47
    },
    "files": [
      {
        "sha": "f4a5d4aa090432adc5b0fcb07aeba89222ef344c",
        "filename": "src/procmsg.cpp",
        "status": "modified",
        "additions": 114,
        "deletions": 47,
        "changes": 161,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/78edf5cb8cf65caf38080ac57040469cc9c6957f/src/procmsg.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/78edf5cb8cf65caf38080ac57040469cc9c6957f/src/procmsg.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/procmsg.cpp?ref=78edf5cb8cf65caf38080ac57040469cc9c6957f",
        "patch": "@@ -262,14 +262,87 @@ bool MessageEngine::ProcessMessage(CNode* pfrom, string strCommand, CDataStream&\n         State(pfrom->GetId())->nLastBlockProcess = GetTimeMicros();\n     }\n \n+    if (strCommand == \"version\") {\n+        if (!MsgVersion(pfrom, vRecv, nTimeReceived))\n+            return false;\n \n+    } else if (pfrom->nVersion == 0) {\n+        // Must have a version message before anything else\n+        Misbehaving(pfrom->GetId(), 1);\n+        return false;\n \n-    if (strCommand == \"version\")\n+    } else if (strCommand == \"verack\") {\n+        if (!MsgVerack(pfrom, vRecv, nTimeReceived))\n+            return false;\n+    } else if (strCommand == \"addr\") {\n+        if (!MsgAddr(pfrom, vRecv, nTimeReceived))\n+            return false;\n+    } else if (strCommand == \"inv\") {\n+        if (!MsgInv(pfrom, vRecv, nTimeReceived))\n+            return false;\n+    } else if (strCommand == \"getdata\") {\n+        if (!MsgGetData(pfrom, vRecv, nTimeReceived))\n+            return false;\n+    } else if (strCommand == \"getblocks\") {\n+        if (!MsgGetBlocks(pfrom, vRecv, nTimeReceived))\n+            return false;\n+    } else if (strCommand == \"getheaders\") {\n+        if (!MsgGetHeaders(pfrom, vRecv, nTimeReceived))\n+            return false;\n+    } else if (strCommand == \"tx\") {\n+        if (!MsgTx(pfrom, vRecv, nTimeReceived))\n+            return false;\n+    } else if (strCommand == \"block\" && !fImporting && !fReindex) { // Ignore blocks received while importing\n+        if (!MsgBlock(pfrom, vRecv, nTimeReceived))\n+            return false;\n+    } else if (strCommand == \"getaddr\") {\n+        if (!MsgGetAddr(pfrom, vRecv, nTimeReceived))\n+            return false;\n+    } else if (strCommand == \"mempool\") {\n+        if (!MsgMempool(pfrom, vRecv, nTimeReceived))\n+            return false;\n+    } else if (strCommand == \"ping\") {\n+        if (!MsgPing(pfrom, vRecv, nTimeReceived))\n+            return false;\n+    } else if (strCommand == \"pong\") {\n+        if (!MsgPong(pfrom, vRecv, nTimeReceived))\n+            return false;\n+    } else if (strCommand == \"alert\") {\n+        if (!MsgAlert(pfrom, vRecv, nTimeReceived))\n+            return false;\n+    } else if (strCommand == \"filterload\") {\n+        if (!MsgFilterLoad(pfrom, vRecv, nTimeReceived))\n+            return false;\n+    } else if (strCommand == \"filteradd\") {\n+        if (!MsgFilterAdd(pfrom, vRecv, nTimeReceived))\n+            return false;\n+    } else if (strCommand == \"filterclear\") {\n+        if (!MsgFilterClear(pfrom, vRecv, nTimeReceived))\n+            return false;\n+    } else if (strCommand == \"reject\") {\n+        if (!MsgReject(pfrom, vRecv, nTimeReceived))\n+            return false;\n+    } else {\n+        // Ignore unknown commands for extensibility\n+        LogPrint(\"net\", \"Unknown command \\\"%s\\\" from peer=%d\\n\", SanitizeString(strCommand), pfrom->id);\n+    }\n+\n+    // Update the last seen time for this node's address\n+    if (pfrom->fNetworkNode)\n+        if (strCommand == \"version\" || strCommand == \"addr\" || strCommand == \"inv\" || strCommand == \"getdata\" || strCommand == \"ping\")\n+            AddressCurrentlyConnected(pfrom->addr);\n+\n+    return true;\n+}\n+\n+\n+\n+bool MessageEngine::MsgVersion(CNode* pfrom, CDataStream& vRecv, int64_t nTimeReceived)\n     {\n         // Each connection can only send one version message\n         if (pfrom->nVersion != 0)\n         {\n-            pfrom->PushMessage(\"reject\", strCommand, REJECT_DUPLICATE, string(\"Duplicate version message\"));\n+            pfrom->PushMessage(\"reject\", (string)\"version\", REJECT_DUPLICATE, string(\"Duplicate version message\"));\n             Misbehaving(pfrom->GetId(), 1);\n             return false;\n         }\n@@ -283,7 +356,7 @@ bool MessageEngine::ProcessMessage(CNode* pfrom, string strCommand, CDataStream&\n         {\n             // disconnect from peers older than this proto version\n             LogPrintf(\"peer=%d using obsolete version %i; disconnecting\\n\", pfrom->id, pfrom->nVersion);\n-            pfrom->PushMessage(\"reject\", strCommand, REJECT_OBSOLETE,\n+            pfrom->PushMessage(\"reject\", (string)\"version\", REJECT_OBSOLETE,\n                                strprintf(\"Version must be %d or greater\", MIN_PEER_PROTO_VERSION));\n             pfrom->fDisconnect = true;\n             return false;\n@@ -373,24 +446,17 @@ bool MessageEngine::ProcessMessage(CNode* pfrom, string strCommand, CDataStream&\n                   remoteAddr);\n \n         AddTimeData(pfrom->addr, nTime);\n+        return true;\n     }\n \n-\n-    else if (pfrom->nVersion == 0)\n-    {\n-        // Must have a version message before anything else\n-        Misbehaving(pfrom->GetId(), 1);\n-        return false;\n-    }\n-\n-\n-    else if (strCommand == \"verack\")\n+bool MessageEngine::MsgVerack(CNode* pfrom, CDataStream& vRecv, int64_t nTimeReceived)\n     {\n         pfrom->SetRecvVersion(min(pfrom->nVersion, PROTOCOL_VERSION));\n+        return true;\n     }\n \n \n-    else if (strCommand == \"addr\")\n+bool MessageEngine::MsgAddr(CNode* pfrom, CDataStream& vRecv, int64_t nTimeReceived)\n     {\n         vector<CAddress> vAddr;\n         vRecv >> vAddr;\n@@ -454,10 +520,11 @@ bool MessageEngine::ProcessMessage(CNode* pfrom, string strCommand, CDataStream&\n             pfrom->fGetAddr = false;\n         if (pfrom->fOneShot)\n             pfrom->fDisconnect = true;\n+        return true;\n     }\n \n \n-    else if (strCommand == \"inv\")\n+bool MessageEngine::MsgInv(CNode* pfrom, CDataStream& vRecv, int64_t nTimeReceived)\n     {\n         vector<CInv> vInv;\n         vRecv >> vInv;\n@@ -496,10 +563,12 @@ bool MessageEngine::ProcessMessage(CNode* pfrom, string strCommand, CDataStream&\n             // Track requests for our stuff\n             g_signals.Inventory(inv.hash);\n         }\n+\n+        return true;\n     }\n \n \n-    else if (strCommand == \"getdata\")\n+bool MessageEngine::MsgGetData(CNode* pfrom, CDataStream& vRecv, int64_t nTimeReceived)\n     {\n         vector<CInv> vInv;\n         vRecv >> vInv;\n@@ -517,10 +586,11 @@ bool MessageEngine::ProcessMessage(CNode* pfrom, string strCommand, CDataStream&\n \n         pfrom->vRecvGetData.insert(pfrom->vRecvGetData.end(), vInv.begin(), vInv.end());\n         ProcessGetData(pfrom);\n+        return true;\n     }\n \n \n-    else if (strCommand == \"getblocks\")\n+bool MessageEngine::MsgGetBlocks(CNode* pfrom, CDataStream& vRecv, int64_t nTimeReceived)\n     {\n         CBlockLocator locator;\n         uint256 hashStop;\n@@ -553,10 +623,11 @@ bool MessageEngine::ProcessMessage(CNode* pfrom, string strCommand, CDataStream&\n                 break;\n             }\n         }\n+        return true;\n     }\n \n \n-    else if (strCommand == \"getheaders\")\n+bool MessageEngine::MsgGetHeaders(CNode* pfrom, CDataStream& vRecv, int64_t nTimeReceived)\n     {\n         CBlockLocator locator;\n         uint256 hashStop;\n@@ -592,10 +663,11 @@ bool MessageEngine::ProcessMessage(CNode* pfrom, string strCommand, CDataStream&\n                 break;\n         }\n         pfrom->PushMessage(\"headers\", vHeaders);\n+        return true;\n     }\n \n \n-    else if (strCommand == \"tx\")\n+bool MessageEngine::MsgTx(CNode* pfrom, CDataStream& vRecv, int64_t nTimeReceived)\n     {\n         vector<uint256> vWorkQueue;\n         vector<uint256> vEraseQueue;\n@@ -680,15 +752,16 @@ bool MessageEngine::ProcessMessage(CNode* pfrom, string strCommand, CDataStream&\n             LogPrint(\"mempool\", \"%s from peer=%d %s was not accepted into the memory pool: %s\\n\", tx.GetHash().ToString(),\n                 pfrom->id, pfrom->cleanSubVer,\n                 state.GetRejectReason());\n-            pfrom->PushMessage(\"reject\", strCommand, state.GetRejectCode(),\n+            pfrom->PushMessage(\"reject\", (string)\"tx\", state.GetRejectCode(),\n                                state.GetRejectReason(), inv.hash);\n             if (nDoS > 0)\n                 Misbehaving(pfrom->GetId(), nDoS);\n         }\n+        return true;\n     }\n \n \n-    else if (strCommand == \"block\" && !fImporting && !fReindex) // Ignore blocks received while importing\n+bool MessageEngine::MsgBlock(CNode* pfrom, CDataStream& vRecv, int64_t nTimeReceived)\n     {\n         CBlock block;\n         vRecv >> block;\n@@ -710,27 +783,29 @@ bool MessageEngine::ProcessMessage(CNode* pfrom, string strCommand, CDataStream&\n         ProcessBlock(state, pfrom, &block);\n         int nDoS;\n         if (state.IsInvalid(nDoS)) {\n-            pfrom->PushMessage(\"reject\", strCommand, state.GetRejectCode(),\n+            pfrom->PushMessage(\"reject\", (string)\"block\", state.GetRejectCode(),\n                                state.GetRejectReason(), inv.hash);\n             if (nDoS > 0) {\n                 LOCK(cs_main);\n                 Misbehaving(pfrom->GetId(), nDoS);\n             }\n         }\n \n+        return true;\n     }\n \n \n-    else if (strCommand == \"getaddr\")\n+bool MessageEngine::MsgGetAddr(CNode* pfrom, CDataStream& vRecv, int64_t nTimeReceived)\n     {\n         pfrom->vAddrToSend.clear();\n         vector<CAddress> vAddr = addrman.GetAddr();\n         BOOST_FOREACH(const CAddress &addr, vAddr)\n             pfrom->PushAddress(addr);\n+        return true;\n     }\n \n \n-    else if (strCommand == \"mempool\")\n+bool MessageEngine::MsgMempool(CNode* pfrom, CDataStream& vRecv, int64_t nTimeReceived)\n     {\n         LOCK2(cs_main, pfrom->cs_filter);\n \n@@ -752,10 +827,11 @@ bool MessageEngine::ProcessMessage(CNode* pfrom, string strCommand, CDataStream&\n         }\n         if (vInv.size() > 0)\n             pfrom->PushMessage(\"inv\", vInv);\n+        return true;\n     }\n \n \n-    else if (strCommand == \"ping\")\n+bool MessageEngine::MsgPing(CNode* pfrom, CDataStream& vRecv, int64_t nTimeReceived)\n     {\n         if (pfrom->nVersion > BIP0031_VERSION)\n         {\n@@ -774,10 +850,11 @@ bool MessageEngine::ProcessMessage(CNode* pfrom, string strCommand, CDataStream&\n             // return very quickly.\n             pfrom->PushMessage(\"pong\", nonce);\n         }\n+        return true;\n     }\n \n \n-    else if (strCommand == \"pong\")\n+bool MessageEngine::MsgPong(CNode* pfrom, CDataStream& vRecv, int64_t nTimeReceived)\n     {\n         int64_t pingUsecEnd = nTimeReceived;\n         uint64_t nonce = 0;\n@@ -831,10 +908,11 @@ bool MessageEngine::ProcessMessage(CNode* pfrom, string strCommand, CDataStream&\n         if (bPingFinished) {\n             pfrom->nPingNonceSent = 0;\n         }\n+        return true;\n     }\n \n \n-    else if (strCommand == \"alert\")\n+bool MessageEngine::MsgAlert(CNode* pfrom, CDataStream& vRecv, int64_t nTimeReceived)\n     {\n         CAlert alert;\n         vRecv >> alert;\n@@ -862,10 +940,11 @@ bool MessageEngine::ProcessMessage(CNode* pfrom, string strCommand, CDataStream&\n                 Misbehaving(pfrom->GetId(), 10);\n             }\n         }\n+        return true;\n     }\n \n \n-    else if (strCommand == \"filterload\")\n+bool MessageEngine::MsgFilterLoad(CNode* pfrom, CDataStream& vRecv, int64_t nTimeReceived)\n     {\n         CBloomFilter filter;\n         vRecv >> filter;\n@@ -881,10 +960,11 @@ bool MessageEngine::ProcessMessage(CNode* pfrom, string strCommand, CDataStream&\n             pfrom->pfilter->UpdateEmptyFull();\n         }\n         pfrom->fRelayTxes = true;\n+        return true;\n     }\n \n \n-    else if (strCommand == \"filteradd\")\n+bool MessageEngine::MsgFilterAdd(CNode* pfrom, CDataStream& vRecv, int64_t nTimeReceived)\n     {\n         vector<unsigned char> vData;\n         vRecv >> vData;\n@@ -901,19 +981,21 @@ bool MessageEngine::ProcessMessage(CNode* pfrom, string strCommand, CDataStream&\n             else\n                 Misbehaving(pfrom->GetId(), 100);\n         }\n+        return true;\n     }\n \n \n-    else if (strCommand == \"filterclear\")\n+bool MessageEngine::MsgFilterClear(CNode* pfrom, CDataStream& vRecv, int64_t nTimeReceived)\n     {\n         LOCK(pfrom->cs_filter);\n         delete pfrom->pfilter;\n         pfrom->pfilter = new CBloomFilter();\n         pfrom->fRelayTxes = true;\n+        return true;\n     }\n \n \n-    else if (strCommand == \"reject\")\n+bool MessageEngine::MsgReject(CNode* pfrom, CDataStream& vRecv, int64_t nTimeReceived)\n     {\n         if (fDebug)\n         {\n@@ -934,24 +1016,9 @@ bool MessageEngine::ProcessMessage(CNode* pfrom, string strCommand, CDataStream&\n             if (s.size() > 111) s.erase(111, string::npos);\n             LogPrint(\"net\", \"Reject %s\\n\", SanitizeString(s));\n         }\n+        return true;\n     }\n \n-    else\n-    {\n-        // Ignore unknown commands for extensibility\n-        LogPrint(\"net\", \"Unknown command \\\"%s\\\" from peer=%d\\n\", SanitizeString(strCommand), pfrom->id);\n-    }\n-\n-\n-    // Update the last seen time for this node's address\n-    if (pfrom->fNetworkNode)\n-        if (strCommand == \"version\" || strCommand == \"addr\" || strCommand == \"inv\" || strCommand == \"getdata\" || strCommand == \"ping\")\n-            AddressCurrentlyConnected(pfrom->addr);\n-\n-\n-    return true;\n-}\n-\n // requires LOCK(cs_vRecvMsg)\n bool MessageEngine::ProcessMessages(CNode* pfrom)\n {"
      },
      {
        "sha": "69078b1bb9a861ed852303c4a7ea9029b3778d3f",
        "filename": "src/procmsg.h",
        "status": "modified",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/78edf5cb8cf65caf38080ac57040469cc9c6957f/src/procmsg.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/78edf5cb8cf65caf38080ac57040469cc9c6957f/src/procmsg.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/procmsg.h?ref=78edf5cb8cf65caf38080ac57040469cc9c6957f",
        "patch": "@@ -14,6 +14,26 @@ class MessageEngine {\n \n private:\n     bool ProcessMessage(CNode* pfrom, std::string strCommand, CDataStream& vRecv, int64_t nTimeReceived);\n+\n+    bool MsgVersion(CNode* pfrom, CDataStream& vRecv, int64_t nTimeReceived);\n+    bool MsgVerack(CNode* pfrom, CDataStream& vRecv, int64_t nTimeReceived);\n+    bool MsgAddr(CNode* pfrom, CDataStream& vRecv, int64_t nTimeReceived);\n+    bool MsgInv(CNode* pfrom, CDataStream& vRecv, int64_t nTimeReceived);\n+    bool MsgGetData(CNode* pfrom, CDataStream& vRecv, int64_t nTimeReceived);\n+    bool MsgGetBlocks(CNode* pfrom, CDataStream& vRecv, int64_t nTimeReceived);\n+    bool MsgGetHeaders(CNode* pfrom, CDataStream& vRecv, int64_t nTimeReceived);\n+    bool MsgTx(CNode* pfrom, CDataStream& vRecv, int64_t nTimeReceived);\n+    bool MsgBlock(CNode* pfrom, CDataStream& vRecv, int64_t nTimeReceived);\n+    bool MsgGetAddr(CNode* pfrom, CDataStream& vRecv, int64_t nTimeReceived);\n+    bool MsgMempool(CNode* pfrom, CDataStream& vRecv, int64_t nTimeReceived);\n+    bool MsgPing(CNode* pfrom, CDataStream& vRecv, int64_t nTimeReceived);\n+    bool MsgPong(CNode* pfrom, CDataStream& vRecv, int64_t nTimeReceived);\n+    bool MsgAlert(CNode* pfrom, CDataStream& vRecv, int64_t nTimeReceived);\n+    bool MsgFilterLoad(CNode* pfrom, CDataStream& vRecv, int64_t nTimeReceived);\n+    bool MsgFilterAdd(CNode* pfrom, CDataStream& vRecv, int64_t nTimeReceived);\n+    bool MsgFilterClear(CNode* pfrom, CDataStream& vRecv, int64_t nTimeReceived);\n+    bool MsgFilterReject(CNode* pfrom, CDataStream& vRecv, int64_t nTimeReceived);\n+    bool MsgReject(CNode* pfrom, CDataStream& vRecv, int64_t nTimeReceived);\n };\n \n extern class MessageEngine msgeng;"
      }
    ]
  },
  {
    "sha": "aa9ad2895e32dcaedba5e1511f5edead4664c029",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYTlhZDI4OTVlMzJkY2FlZGJhNWUxNTExZjVlZGVhZDQ2NjRjMDI5",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jgarzik@bitpay.com",
        "date": "2014-08-07T17:45:23Z"
      },
      "committer": {
        "name": "Jeff Garzik",
        "email": "jgarzik@bitpay.com",
        "date": "2014-08-07T17:45:23Z"
      },
      "message": "procmsg: Un-indent msg processing code one level\n\nCode was left indented for diff-reading purposes in previous commit.",
      "tree": {
        "sha": "cb00bfda7c5af38c8ed8ecf4ab899a3281f79136",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cb00bfda7c5af38c8ed8ecf4ab899a3281f79136"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aa9ad2895e32dcaedba5e1511f5edead4664c029",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa9ad2895e32dcaedba5e1511f5edead4664c029",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aa9ad2895e32dcaedba5e1511f5edead4664c029",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa9ad2895e32dcaedba5e1511f5edead4664c029/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "78edf5cb8cf65caf38080ac57040469cc9c6957f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78edf5cb8cf65caf38080ac57040469cc9c6957f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/78edf5cb8cf65caf38080ac57040469cc9c6957f"
      }
    ],
    "stats": {
      "total": 1060,
      "additions": 530,
      "deletions": 530
    },
    "files": [
      {
        "sha": "334ae0bd8a020a706267bbe9262f55e5a147206e",
        "filename": "src/procmsg.cpp",
        "status": "modified",
        "additions": 530,
        "deletions": 530,
        "changes": 1060,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa9ad2895e32dcaedba5e1511f5edead4664c029/src/procmsg.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa9ad2895e32dcaedba5e1511f5edead4664c029/src/procmsg.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/procmsg.cpp?ref=aa9ad2895e32dcaedba5e1511f5edead4664c029",
        "patch": "@@ -338,686 +338,686 @@ bool MessageEngine::ProcessMessage(CNode* pfrom, string strCommand, CDataStream&\n \n \n bool MessageEngine::MsgVersion(CNode* pfrom, CDataStream& vRecv, int64_t nTimeReceived)\n+{\n+    // Each connection can only send one version message\n+    if (pfrom->nVersion != 0)\n     {\n-        // Each connection can only send one version message\n-        if (pfrom->nVersion != 0)\n-        {\n-            pfrom->PushMessage(\"reject\", (string)\"version\", REJECT_DUPLICATE, string(\"Duplicate version message\"));\n-            Misbehaving(pfrom->GetId(), 1);\n-            return false;\n-        }\n+        pfrom->PushMessage(\"reject\", (string)\"version\", REJECT_DUPLICATE, string(\"Duplicate version message\"));\n+        Misbehaving(pfrom->GetId(), 1);\n+        return false;\n+    }\n \n-        int64_t nTime;\n-        CAddress addrMe;\n-        CAddress addrFrom;\n-        uint64_t nNonce = 1;\n-        vRecv >> pfrom->nVersion >> pfrom->nServices >> nTime >> addrMe;\n-        if (pfrom->nVersion < MIN_PEER_PROTO_VERSION)\n-        {\n-            // disconnect from peers older than this proto version\n-            LogPrintf(\"peer=%d using obsolete version %i; disconnecting\\n\", pfrom->id, pfrom->nVersion);\n-            pfrom->PushMessage(\"reject\", (string)\"version\", REJECT_OBSOLETE,\n-                               strprintf(\"Version must be %d or greater\", MIN_PEER_PROTO_VERSION));\n-            pfrom->fDisconnect = true;\n-            return false;\n-        }\n+    int64_t nTime;\n+    CAddress addrMe;\n+    CAddress addrFrom;\n+    uint64_t nNonce = 1;\n+    vRecv >> pfrom->nVersion >> pfrom->nServices >> nTime >> addrMe;\n+    if (pfrom->nVersion < MIN_PEER_PROTO_VERSION)\n+    {\n+        // disconnect from peers older than this proto version\n+        LogPrintf(\"peer=%d using obsolete version %i; disconnecting\\n\", pfrom->id, pfrom->nVersion);\n+        pfrom->PushMessage(\"reject\", (string)\"version\", REJECT_OBSOLETE,\n+                           strprintf(\"Version must be %d or greater\", MIN_PEER_PROTO_VERSION));\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n \n-        if (pfrom->nVersion == 10300)\n-            pfrom->nVersion = 300;\n-        if (!vRecv.empty())\n-            vRecv >> addrFrom >> nNonce;\n-        if (!vRecv.empty()) {\n-            vRecv >> pfrom->strSubVer;\n-            pfrom->cleanSubVer = SanitizeString(pfrom->strSubVer);\n-        }\n-        if (!vRecv.empty())\n-            vRecv >> pfrom->nStartingHeight;\n-        if (!vRecv.empty())\n-            vRecv >> pfrom->fRelayTxes; // set to true after we get the first filter* message\n-        else\n-            pfrom->fRelayTxes = true;\n+    if (pfrom->nVersion == 10300)\n+        pfrom->nVersion = 300;\n+    if (!vRecv.empty())\n+        vRecv >> addrFrom >> nNonce;\n+    if (!vRecv.empty()) {\n+        vRecv >> pfrom->strSubVer;\n+        pfrom->cleanSubVer = SanitizeString(pfrom->strSubVer);\n+    }\n+    if (!vRecv.empty())\n+        vRecv >> pfrom->nStartingHeight;\n+    if (!vRecv.empty())\n+        vRecv >> pfrom->fRelayTxes; // set to true after we get the first filter* message\n+    else\n+        pfrom->fRelayTxes = true;\n \n-        if (pfrom->fInbound && addrMe.IsRoutable())\n-        {\n-            pfrom->addrLocal = addrMe;\n-            SeenLocal(addrMe);\n-        }\n+    if (pfrom->fInbound && addrMe.IsRoutable())\n+    {\n+        pfrom->addrLocal = addrMe;\n+        SeenLocal(addrMe);\n+    }\n \n-        // Disconnect if we connected to ourself\n-        if (nNonce == nLocalHostNonce && nNonce > 1)\n-        {\n-            LogPrintf(\"connected to self at %s, disconnecting\\n\", pfrom->addr.ToString());\n-            pfrom->fDisconnect = true;\n-            return true;\n-        }\n+    // Disconnect if we connected to ourself\n+    if (nNonce == nLocalHostNonce && nNonce > 1)\n+    {\n+        LogPrintf(\"connected to self at %s, disconnecting\\n\", pfrom->addr.ToString());\n+        pfrom->fDisconnect = true;\n+        return true;\n+    }\n \n-        // Be shy and don't send version until we hear\n-        if (pfrom->fInbound)\n-            pfrom->PushVersion();\n+    // Be shy and don't send version until we hear\n+    if (pfrom->fInbound)\n+        pfrom->PushVersion();\n \n-        pfrom->fClient = !(pfrom->nServices & NODE_NETWORK);\n+    pfrom->fClient = !(pfrom->nServices & NODE_NETWORK);\n \n \n-        // Change version\n-        pfrom->PushMessage(\"verack\");\n-        pfrom->ssSend.SetVersion(min(pfrom->nVersion, PROTOCOL_VERSION));\n+    // Change version\n+    pfrom->PushMessage(\"verack\");\n+    pfrom->ssSend.SetVersion(min(pfrom->nVersion, PROTOCOL_VERSION));\n \n-        if (!pfrom->fInbound)\n+    if (!pfrom->fInbound)\n+    {\n+        // Advertise our address\n+        if (fListen && !IsInitialBlockDownload())\n         {\n-            // Advertise our address\n-            if (fListen && !IsInitialBlockDownload())\n-            {\n-                CAddress addr = GetLocalAddress(&pfrom->addr);\n-                if (addr.IsRoutable())\n-                    pfrom->PushAddress(addr);\n-            }\n-\n-            // Get recent addresses\n-            if (pfrom->fOneShot || pfrom->nVersion >= CADDR_TIME_VERSION || addrman.size() < 1000)\n-            {\n-                pfrom->PushMessage(\"getaddr\");\n-                pfrom->fGetAddr = true;\n-            }\n-            addrman.Good(pfrom->addr);\n-        } else {\n-            if (((CNetAddr)pfrom->addr) == (CNetAddr)addrFrom)\n-            {\n-                addrman.Add(addrFrom, addrFrom);\n-                addrman.Good(addrFrom);\n-            }\n+            CAddress addr = GetLocalAddress(&pfrom->addr);\n+            if (addr.IsRoutable())\n+                pfrom->PushAddress(addr);\n         }\n \n-        // Relay alerts\n+        // Get recent addresses\n+        if (pfrom->fOneShot || pfrom->nVersion >= CADDR_TIME_VERSION || addrman.size() < 1000)\n         {\n-            LOCK(cs_mapAlerts);\n-            BOOST_FOREACH(PAIRTYPE(const uint256, CAlert)& item, mapAlerts)\n-                item.second.RelayTo(pfrom);\n+            pfrom->PushMessage(\"getaddr\");\n+            pfrom->fGetAddr = true;\n         }\n+        addrman.Good(pfrom->addr);\n+    } else {\n+        if (((CNetAddr)pfrom->addr) == (CNetAddr)addrFrom)\n+        {\n+            addrman.Add(addrFrom, addrFrom);\n+            addrman.Good(addrFrom);\n+        }\n+    }\n \n-        pfrom->fSuccessfullyConnected = true;\n+    // Relay alerts\n+    {\n+        LOCK(cs_mapAlerts);\n+        BOOST_FOREACH(PAIRTYPE(const uint256, CAlert)& item, mapAlerts)\n+            item.second.RelayTo(pfrom);\n+    }\n \n-        string remoteAddr;\n-        if (fLogIPs)\n-            remoteAddr = \", peeraddr=\" + pfrom->addr.ToString();\n+    pfrom->fSuccessfullyConnected = true;\n \n-        LogPrintf(\"receive version message: %s: version %d, blocks=%d, us=%s, peer=%d%s\\n\",\n-                  pfrom->cleanSubVer, pfrom->nVersion,\n-                  pfrom->nStartingHeight, addrMe.ToString(), pfrom->id,\n-                  remoteAddr);\n+    string remoteAddr;\n+    if (fLogIPs)\n+        remoteAddr = \", peeraddr=\" + pfrom->addr.ToString();\n \n-        AddTimeData(pfrom->addr, nTime);\n-        return true;\n-    }\n+    LogPrintf(\"receive version message: %s: version %d, blocks=%d, us=%s, peer=%d%s\\n\",\n+              pfrom->cleanSubVer, pfrom->nVersion,\n+              pfrom->nStartingHeight, addrMe.ToString(), pfrom->id,\n+              remoteAddr);\n+\n+    AddTimeData(pfrom->addr, nTime);\n+    return true;\n+}\n \n bool MessageEngine::MsgVerack(CNode* pfrom, CDataStream& vRecv, int64_t nTimeReceived)\n-    {\n-        pfrom->SetRecvVersion(min(pfrom->nVersion, PROTOCOL_VERSION));\n-        return true;\n-    }\n+{\n+    pfrom->SetRecvVersion(min(pfrom->nVersion, PROTOCOL_VERSION));\n+    return true;\n+}\n \n \n bool MessageEngine::MsgAddr(CNode* pfrom, CDataStream& vRecv, int64_t nTimeReceived)\n+{\n+    vector<CAddress> vAddr;\n+    vRecv >> vAddr;\n+\n+    // Don't want addr from older versions unless seeding\n+    if (pfrom->nVersion < CADDR_TIME_VERSION && addrman.size() > 1000)\n+        return true;\n+    if (vAddr.size() > 1000)\n     {\n-        vector<CAddress> vAddr;\n-        vRecv >> vAddr;\n+        Misbehaving(pfrom->GetId(), 20);\n+        return error(\"message addr size() = %u\", vAddr.size());\n+    }\n \n-        // Don't want addr from older versions unless seeding\n-        if (pfrom->nVersion < CADDR_TIME_VERSION && addrman.size() > 1000)\n-            return true;\n-        if (vAddr.size() > 1000)\n-        {\n-            Misbehaving(pfrom->GetId(), 20);\n-            return error(\"message addr size() = %u\", vAddr.size());\n-        }\n+    // Store the new addresses\n+    vector<CAddress> vAddrOk;\n+    int64_t nNow = GetAdjustedTime();\n+    int64_t nSince = nNow - 10 * 60;\n+    BOOST_FOREACH(CAddress& addr, vAddr)\n+    {\n+        boost::this_thread::interruption_point();\n \n-        // Store the new addresses\n-        vector<CAddress> vAddrOk;\n-        int64_t nNow = GetAdjustedTime();\n-        int64_t nSince = nNow - 10 * 60;\n-        BOOST_FOREACH(CAddress& addr, vAddr)\n+        if (addr.nTime <= 100000000 || addr.nTime > nNow + 10 * 60)\n+            addr.nTime = nNow - 5 * 24 * 60 * 60;\n+        pfrom->AddAddressKnown(addr);\n+        bool fReachable = IsReachable(addr);\n+        if (addr.nTime > nSince && !pfrom->fGetAddr && vAddr.size() <= 10 && addr.IsRoutable())\n         {\n-            boost::this_thread::interruption_point();\n-\n-            if (addr.nTime <= 100000000 || addr.nTime > nNow + 10 * 60)\n-                addr.nTime = nNow - 5 * 24 * 60 * 60;\n-            pfrom->AddAddressKnown(addr);\n-            bool fReachable = IsReachable(addr);\n-            if (addr.nTime > nSince && !pfrom->fGetAddr && vAddr.size() <= 10 && addr.IsRoutable())\n+            // Relay to a limited number of other nodes\n             {\n-                // Relay to a limited number of other nodes\n+                LOCK(cs_vNodes);\n+                // Use deterministic randomness to send to the same nodes for 24 hours\n+                // at a time so the setAddrKnowns of the chosen nodes prevent repeats\n+                static uint256 hashSalt;\n+                if (hashSalt == 0)\n+                    hashSalt = GetRandHash();\n+                uint64_t hashAddr = addr.GetHash();\n+                uint256 hashRand = hashSalt ^ (hashAddr<<32) ^ ((GetTime()+hashAddr)/(24*60*60));\n+                hashRand = Hash(BEGIN(hashRand), END(hashRand));\n+                multimap<uint256, CNode*> mapMix;\n+                BOOST_FOREACH(CNode* pnode, vNodes)\n                 {\n-                    LOCK(cs_vNodes);\n-                    // Use deterministic randomness to send to the same nodes for 24 hours\n-                    // at a time so the setAddrKnowns of the chosen nodes prevent repeats\n-                    static uint256 hashSalt;\n-                    if (hashSalt == 0)\n-                        hashSalt = GetRandHash();\n-                    uint64_t hashAddr = addr.GetHash();\n-                    uint256 hashRand = hashSalt ^ (hashAddr<<32) ^ ((GetTime()+hashAddr)/(24*60*60));\n-                    hashRand = Hash(BEGIN(hashRand), END(hashRand));\n-                    multimap<uint256, CNode*> mapMix;\n-                    BOOST_FOREACH(CNode* pnode, vNodes)\n-                    {\n-                        if (pnode->nVersion < CADDR_TIME_VERSION)\n-                            continue;\n-                        unsigned int nPointer;\n-                        memcpy(&nPointer, &pnode, sizeof(nPointer));\n-                        uint256 hashKey = hashRand ^ nPointer;\n-                        hashKey = Hash(BEGIN(hashKey), END(hashKey));\n-                        mapMix.insert(make_pair(hashKey, pnode));\n-                    }\n-                    int nRelayNodes = fReachable ? 2 : 1; // limited relaying of addresses outside our network(s)\n-                    for (multimap<uint256, CNode*>::iterator mi = mapMix.begin(); mi != mapMix.end() && nRelayNodes-- > 0; ++mi)\n-                        ((*mi).second)->PushAddress(addr);\n+                    if (pnode->nVersion < CADDR_TIME_VERSION)\n+                        continue;\n+                    unsigned int nPointer;\n+                    memcpy(&nPointer, &pnode, sizeof(nPointer));\n+                    uint256 hashKey = hashRand ^ nPointer;\n+                    hashKey = Hash(BEGIN(hashKey), END(hashKey));\n+                    mapMix.insert(make_pair(hashKey, pnode));\n                 }\n+                int nRelayNodes = fReachable ? 2 : 1; // limited relaying of addresses outside our network(s)\n+                for (multimap<uint256, CNode*>::iterator mi = mapMix.begin(); mi != mapMix.end() && nRelayNodes-- > 0; ++mi)\n+                    ((*mi).second)->PushAddress(addr);\n             }\n-            // Do not store addresses outside our network\n-            if (fReachable)\n-                vAddrOk.push_back(addr);\n         }\n-        addrman.Add(vAddrOk, pfrom->addr, 2 * 60 * 60);\n-        if (vAddr.size() < 1000)\n-            pfrom->fGetAddr = false;\n-        if (pfrom->fOneShot)\n-            pfrom->fDisconnect = true;\n-        return true;\n+        // Do not store addresses outside our network\n+        if (fReachable)\n+            vAddrOk.push_back(addr);\n     }\n+    addrman.Add(vAddrOk, pfrom->addr, 2 * 60 * 60);\n+    if (vAddr.size() < 1000)\n+        pfrom->fGetAddr = false;\n+    if (pfrom->fOneShot)\n+        pfrom->fDisconnect = true;\n+    return true;\n+}\n \n \n bool MessageEngine::MsgInv(CNode* pfrom, CDataStream& vRecv, int64_t nTimeReceived)\n+{\n+    vector<CInv> vInv;\n+    vRecv >> vInv;\n+    if (vInv.size() > MAX_INV_SZ)\n     {\n-        vector<CInv> vInv;\n-        vRecv >> vInv;\n-        if (vInv.size() > MAX_INV_SZ)\n-        {\n-            Misbehaving(pfrom->GetId(), 20);\n-            return error(\"message inv size() = %u\", vInv.size());\n-        }\n+        Misbehaving(pfrom->GetId(), 20);\n+        return error(\"message inv size() = %u\", vInv.size());\n+    }\n \n-        LOCK(cs_main);\n+    LOCK(cs_main);\n \n-        for (unsigned int nInv = 0; nInv < vInv.size(); nInv++)\n-        {\n-            const CInv &inv = vInv[nInv];\n+    for (unsigned int nInv = 0; nInv < vInv.size(); nInv++)\n+    {\n+        const CInv &inv = vInv[nInv];\n \n-            boost::this_thread::interruption_point();\n-            pfrom->AddInventoryKnown(inv);\n+        boost::this_thread::interruption_point();\n+        pfrom->AddInventoryKnown(inv);\n \n-            bool fAlreadyHave = AlreadyHave(inv);\n-            LogPrint(\"net\", \"got inv: %s  %s peer=%d\\n\", inv.ToString(), fAlreadyHave ? \"have\" : \"new\", pfrom->id);\n+        bool fAlreadyHave = AlreadyHave(inv);\n+        LogPrint(\"net\", \"got inv: %s  %s peer=%d\\n\", inv.ToString(), fAlreadyHave ? \"have\" : \"new\", pfrom->id);\n \n-            if (!fAlreadyHave) {\n-                if (!fImporting && !fReindex) {\n-                    if (inv.type == MSG_BLOCK)\n-                        AddBlockToQueue(pfrom->GetId(), inv.hash);\n-                    else\n-                        pfrom->AskFor(inv);\n-                }\n-            } else if (inv.type == MSG_BLOCK && mapOrphanBlocks.count(inv.hash)) {\n-                PushGetBlocks(pfrom, chainActive.Tip(), GetOrphanRoot(inv.hash));\n+        if (!fAlreadyHave) {\n+            if (!fImporting && !fReindex) {\n+                if (inv.type == MSG_BLOCK)\n+                    AddBlockToQueue(pfrom->GetId(), inv.hash);\n+                else\n+                    pfrom->AskFor(inv);\n             }\n-\n-            if (inv.type == MSG_BLOCK)\n-                UpdateBlockAvailability(pfrom->GetId(), inv.hash);\n-\n-            // Track requests for our stuff\n-            g_signals.Inventory(inv.hash);\n+        } else if (inv.type == MSG_BLOCK && mapOrphanBlocks.count(inv.hash)) {\n+            PushGetBlocks(pfrom, chainActive.Tip(), GetOrphanRoot(inv.hash));\n         }\n \n-        return true;\n+        if (inv.type == MSG_BLOCK)\n+            UpdateBlockAvailability(pfrom->GetId(), inv.hash);\n+\n+        // Track requests for our stuff\n+        g_signals.Inventory(inv.hash);\n     }\n \n+    return true;\n+}\n+\n \n bool MessageEngine::MsgGetData(CNode* pfrom, CDataStream& vRecv, int64_t nTimeReceived)\n+{\n+    vector<CInv> vInv;\n+    vRecv >> vInv;\n+    if (vInv.size() > MAX_INV_SZ)\n     {\n-        vector<CInv> vInv;\n-        vRecv >> vInv;\n-        if (vInv.size() > MAX_INV_SZ)\n-        {\n-            Misbehaving(pfrom->GetId(), 20);\n-            return error(\"message getdata size() = %u\", vInv.size());\n-        }\n+        Misbehaving(pfrom->GetId(), 20);\n+        return error(\"message getdata size() = %u\", vInv.size());\n+    }\n \n-        if (fDebug || (vInv.size() != 1))\n-            LogPrint(\"net\", \"received getdata (%u invsz) peer=%d\\n\", vInv.size(), pfrom->id);\n+    if (fDebug || (vInv.size() != 1))\n+        LogPrint(\"net\", \"received getdata (%u invsz) peer=%d\\n\", vInv.size(), pfrom->id);\n \n-        if ((fDebug && vInv.size() > 0) || (vInv.size() == 1))\n-            LogPrint(\"net\", \"received getdata for: %s peer=%d\\n\", vInv[0].ToString(), pfrom->id);\n+    if ((fDebug && vInv.size() > 0) || (vInv.size() == 1))\n+        LogPrint(\"net\", \"received getdata for: %s peer=%d\\n\", vInv[0].ToString(), pfrom->id);\n \n-        pfrom->vRecvGetData.insert(pfrom->vRecvGetData.end(), vInv.begin(), vInv.end());\n-        ProcessGetData(pfrom);\n-        return true;\n-    }\n+    pfrom->vRecvGetData.insert(pfrom->vRecvGetData.end(), vInv.begin(), vInv.end());\n+    ProcessGetData(pfrom);\n+    return true;\n+}\n \n \n bool MessageEngine::MsgGetBlocks(CNode* pfrom, CDataStream& vRecv, int64_t nTimeReceived)\n-    {\n-        CBlockLocator locator;\n-        uint256 hashStop;\n-        vRecv >> locator >> hashStop;\n+{\n+    CBlockLocator locator;\n+    uint256 hashStop;\n+    vRecv >> locator >> hashStop;\n \n-        LOCK(cs_main);\n+    LOCK(cs_main);\n \n-        // Find the last block the caller has in the main chain\n-        CBlockIndex* pindex = chainActive.FindFork(locator);\n+    // Find the last block the caller has in the main chain\n+    CBlockIndex* pindex = chainActive.FindFork(locator);\n \n-        // Send the rest of the chain\n-        if (pindex)\n-            pindex = chainActive.Next(pindex);\n-        int nLimit = 500;\n-        LogPrint(\"net\", \"getblocks %d to %s limit %d from peer=%d\\n\", (pindex ? pindex->nHeight : -1), hashStop==uint256(0) ? \"end\" : hashStop.ToString(), nLimit, pfrom->id);\n-        for (; pindex; pindex = chainActive.Next(pindex))\n+    // Send the rest of the chain\n+    if (pindex)\n+        pindex = chainActive.Next(pindex);\n+    int nLimit = 500;\n+    LogPrint(\"net\", \"getblocks %d to %s limit %d from peer=%d\\n\", (pindex ? pindex->nHeight : -1), hashStop==uint256(0) ? \"end\" : hashStop.ToString(), nLimit, pfrom->id);\n+    for (; pindex; pindex = chainActive.Next(pindex))\n+    {\n+        if (pindex->GetBlockHash() == hashStop)\n         {\n-            if (pindex->GetBlockHash() == hashStop)\n-            {\n-                LogPrint(\"net\", \"  getblocks stopping at %d %s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString());\n-                break;\n-            }\n-            pfrom->PushInventory(CInv(MSG_BLOCK, pindex->GetBlockHash()));\n-            if (--nLimit <= 0)\n-            {\n-                // When this block is requested, we'll send an inv that'll make them\n-                // getblocks the next batch of inventory.\n-                LogPrint(\"net\", \"  getblocks stopping at limit %d %s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString());\n-                pfrom->hashContinue = pindex->GetBlockHash();\n-                break;\n-            }\n+            LogPrint(\"net\", \"  getblocks stopping at %d %s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString());\n+            break;\n+        }\n+        pfrom->PushInventory(CInv(MSG_BLOCK, pindex->GetBlockHash()));\n+        if (--nLimit <= 0)\n+        {\n+            // When this block is requested, we'll send an inv that'll make them\n+            // getblocks the next batch of inventory.\n+            LogPrint(\"net\", \"  getblocks stopping at limit %d %s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString());\n+            pfrom->hashContinue = pindex->GetBlockHash();\n+            break;\n         }\n-        return true;\n     }\n+    return true;\n+}\n \n \n bool MessageEngine::MsgGetHeaders(CNode* pfrom, CDataStream& vRecv, int64_t nTimeReceived)\n-    {\n-        CBlockLocator locator;\n-        uint256 hashStop;\n-        vRecv >> locator >> hashStop;\n+{\n+    CBlockLocator locator;\n+    uint256 hashStop;\n+    vRecv >> locator >> hashStop;\n \n-        LOCK(cs_main);\n+    LOCK(cs_main);\n \n-        CBlockIndex* pindex = NULL;\n-        if (locator.IsNull())\n-        {\n-            // If locator is null, return the hashStop block\n-            map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hashStop);\n-            if (mi == mapBlockIndex.end())\n-                return true;\n-            pindex = (*mi).second;\n-        }\n-        else\n-        {\n-            // Find the last block the caller has in the main chain\n-            pindex = chainActive.FindFork(locator);\n-            if (pindex)\n-                pindex = chainActive.Next(pindex);\n-        }\n+    CBlockIndex* pindex = NULL;\n+    if (locator.IsNull())\n+    {\n+        // If locator is null, return the hashStop block\n+        map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hashStop);\n+        if (mi == mapBlockIndex.end())\n+            return true;\n+        pindex = (*mi).second;\n+    }\n+    else\n+    {\n+        // Find the last block the caller has in the main chain\n+        pindex = chainActive.FindFork(locator);\n+        if (pindex)\n+            pindex = chainActive.Next(pindex);\n+    }\n \n-        // we must use CBlocks, as CBlockHeaders won't include the 0x00 nTx count at the end\n-        vector<CBlock> vHeaders;\n-        int nLimit = 2000;\n-        LogPrint(\"net\", \"getheaders %d to %s\\n\", (pindex ? pindex->nHeight : -1), hashStop.ToString());\n-        for (; pindex; pindex = chainActive.Next(pindex))\n-        {\n-            vHeaders.push_back(pindex->GetBlockHeader());\n-            if (--nLimit <= 0 || pindex->GetBlockHash() == hashStop)\n-                break;\n-        }\n-        pfrom->PushMessage(\"headers\", vHeaders);\n-        return true;\n+    // we must use CBlocks, as CBlockHeaders won't include the 0x00 nTx count at the end\n+    vector<CBlock> vHeaders;\n+    int nLimit = 2000;\n+    LogPrint(\"net\", \"getheaders %d to %s\\n\", (pindex ? pindex->nHeight : -1), hashStop.ToString());\n+    for (; pindex; pindex = chainActive.Next(pindex))\n+    {\n+        vHeaders.push_back(pindex->GetBlockHeader());\n+        if (--nLimit <= 0 || pindex->GetBlockHash() == hashStop)\n+            break;\n     }\n+    pfrom->PushMessage(\"headers\", vHeaders);\n+    return true;\n+}\n \n \n bool MessageEngine::MsgTx(CNode* pfrom, CDataStream& vRecv, int64_t nTimeReceived)\n-    {\n-        vector<uint256> vWorkQueue;\n-        vector<uint256> vEraseQueue;\n-        CTransaction tx;\n-        vRecv >> tx;\n+{\n+    vector<uint256> vWorkQueue;\n+    vector<uint256> vEraseQueue;\n+    CTransaction tx;\n+    vRecv >> tx;\n \n-        CInv inv(MSG_TX, tx.GetHash());\n-        pfrom->AddInventoryKnown(inv);\n+    CInv inv(MSG_TX, tx.GetHash());\n+    pfrom->AddInventoryKnown(inv);\n \n-        LOCK(cs_main);\n+    LOCK(cs_main);\n \n-        bool fMissingInputs = false;\n-        CValidationState state;\n-        if (AcceptToMemoryPool(mempool, state, tx, true, &fMissingInputs))\n-        {\n-            mempool.check(pcoinsTip);\n-            RelayTransaction(tx);\n-            mapAlreadyAskedFor.erase(inv);\n-            vWorkQueue.push_back(inv.hash);\n-            vEraseQueue.push_back(inv.hash);\n+    bool fMissingInputs = false;\n+    CValidationState state;\n+    if (AcceptToMemoryPool(mempool, state, tx, true, &fMissingInputs))\n+    {\n+        mempool.check(pcoinsTip);\n+        RelayTransaction(tx);\n+        mapAlreadyAskedFor.erase(inv);\n+        vWorkQueue.push_back(inv.hash);\n+        vEraseQueue.push_back(inv.hash);\n \n \n-            LogPrint(\"mempool\", \"AcceptToMemoryPool: peer=%d %s : accepted %s (poolsz %u)\\n\",\n-                pfrom->id, pfrom->cleanSubVer,\n-                tx.GetHash().ToString(),\n-                mempool.mapTx.size());\n+        LogPrint(\"mempool\", \"AcceptToMemoryPool: peer=%d %s : accepted %s (poolsz %u)\\n\",\n+            pfrom->id, pfrom->cleanSubVer,\n+            tx.GetHash().ToString(),\n+            mempool.mapTx.size());\n \n-            // Recursively process any orphan transactions that depended on this one\n-            for (unsigned int i = 0; i < vWorkQueue.size(); i++)\n+        // Recursively process any orphan transactions that depended on this one\n+        for (unsigned int i = 0; i < vWorkQueue.size(); i++)\n+        {\n+            uint256 hashPrev = vWorkQueue[i];\n+            for (set<uint256>::iterator mi = mapOrphanTransactionsByPrev[hashPrev].begin();\n+                 mi != mapOrphanTransactionsByPrev[hashPrev].end();\n+                 ++mi)\n             {\n-                uint256 hashPrev = vWorkQueue[i];\n-                for (set<uint256>::iterator mi = mapOrphanTransactionsByPrev[hashPrev].begin();\n-                     mi != mapOrphanTransactionsByPrev[hashPrev].end();\n-                     ++mi)\n+                const uint256& orphanHash = *mi;\n+                const CTransaction& orphanTx = mapOrphanTransactions[orphanHash];\n+                bool fMissingInputs2 = false;\n+                // Use a dummy CValidationState so someone can't setup nodes to counter-DoS based on orphan\n+                // resolution (that is, feeding people an invalid transaction based on LegitTxX in order to get\n+                // anyone relaying LegitTxX banned)\n+                CValidationState stateDummy;\n+\n+                if (AcceptToMemoryPool(mempool, stateDummy, orphanTx, true, &fMissingInputs2))\n                 {\n-                    const uint256& orphanHash = *mi;\n-                    const CTransaction& orphanTx = mapOrphanTransactions[orphanHash];\n-                    bool fMissingInputs2 = false;\n-                    // Use a dummy CValidationState so someone can't setup nodes to counter-DoS based on orphan\n-                    // resolution (that is, feeding people an invalid transaction based on LegitTxX in order to get\n-                    // anyone relaying LegitTxX banned)\n-                    CValidationState stateDummy;\n-\n-                    if (AcceptToMemoryPool(mempool, stateDummy, orphanTx, true, &fMissingInputs2))\n-                    {\n-                        LogPrint(\"mempool\", \"   accepted orphan tx %s\\n\", orphanHash.ToString());\n-                        RelayTransaction(orphanTx);\n-                        mapAlreadyAskedFor.erase(CInv(MSG_TX, orphanHash));\n-                        vWorkQueue.push_back(orphanHash);\n-                        vEraseQueue.push_back(orphanHash);\n-                    }\n-                    else if (!fMissingInputs2)\n-                    {\n-                        // invalid or too-little-fee orphan\n-                        vEraseQueue.push_back(orphanHash);\n-                        LogPrint(\"mempool\", \"   removed orphan tx %s\\n\", orphanHash.ToString());\n-                    }\n-                    mempool.check(pcoinsTip);\n+                    LogPrint(\"mempool\", \"   accepted orphan tx %s\\n\", orphanHash.ToString());\n+                    RelayTransaction(orphanTx);\n+                    mapAlreadyAskedFor.erase(CInv(MSG_TX, orphanHash));\n+                    vWorkQueue.push_back(orphanHash);\n+                    vEraseQueue.push_back(orphanHash);\n+                }\n+                else if (!fMissingInputs2)\n+                {\n+                    // invalid or too-little-fee orphan\n+                    vEraseQueue.push_back(orphanHash);\n+                    LogPrint(\"mempool\", \"   removed orphan tx %s\\n\", orphanHash.ToString());\n                 }\n+                mempool.check(pcoinsTip);\n             }\n-\n-            BOOST_FOREACH(uint256 hash, vEraseQueue)\n-                EraseOrphanTx(hash);\n-        }\n-        else if (fMissingInputs)\n-        {\n-            AddOrphanTx(tx);\n-\n-            // DoS prevention: do not allow mapOrphanTransactions to grow unbounded\n-            unsigned int nEvicted = LimitOrphanTxSize(MAX_ORPHAN_TRANSACTIONS);\n-            if (nEvicted > 0)\n-                LogPrint(\"mempool\", \"mapOrphan overflow, removed %u tx\\n\", nEvicted);\n-        } else if (pfrom->fWhitelisted) {\n-            // Always relay transactions received from whitelisted peers, even\n-            // if they are already in the mempool (allowing the node to function\n-            // as a gateway for nodes hidden behind it).\n-            RelayTransaction(tx);\n-        }\n-        int nDoS = 0;\n-        if (state.IsInvalid(nDoS))\n-        {\n-            LogPrint(\"mempool\", \"%s from peer=%d %s was not accepted into the memory pool: %s\\n\", tx.GetHash().ToString(),\n-                pfrom->id, pfrom->cleanSubVer,\n-                state.GetRejectReason());\n-            pfrom->PushMessage(\"reject\", (string)\"tx\", state.GetRejectCode(),\n-                               state.GetRejectReason(), inv.hash);\n-            if (nDoS > 0)\n-                Misbehaving(pfrom->GetId(), nDoS);\n         }\n-        return true;\n+\n+        BOOST_FOREACH(uint256 hash, vEraseQueue)\n+            EraseOrphanTx(hash);\n     }\n+    else if (fMissingInputs)\n+    {\n+        AddOrphanTx(tx);\n+\n+        // DoS prevention: do not allow mapOrphanTransactions to grow unbounded\n+        unsigned int nEvicted = LimitOrphanTxSize(MAX_ORPHAN_TRANSACTIONS);\n+        if (nEvicted > 0)\n+            LogPrint(\"mempool\", \"mapOrphan overflow, removed %u tx\\n\", nEvicted);\n+    } else if (pfrom->fWhitelisted) {\n+        // Always relay transactions received from whitelisted peers, even\n+        // if they are already in the mempool (allowing the node to function\n+        // as a gateway for nodes hidden behind it).\n+        RelayTransaction(tx);\n+    }\n+    int nDoS = 0;\n+    if (state.IsInvalid(nDoS))\n+    {\n+        LogPrint(\"mempool\", \"%s from peer=%d %s was not accepted into the memory pool: %s\\n\", tx.GetHash().ToString(),\n+            pfrom->id, pfrom->cleanSubVer,\n+            state.GetRejectReason());\n+        pfrom->PushMessage(\"reject\", (string)\"tx\", state.GetRejectCode(),\n+                           state.GetRejectReason(), inv.hash);\n+        if (nDoS > 0)\n+            Misbehaving(pfrom->GetId(), nDoS);\n+    }\n+    return true;\n+}\n \n \n bool MessageEngine::MsgBlock(CNode* pfrom, CDataStream& vRecv, int64_t nTimeReceived)\n-    {\n-        CBlock block;\n-        vRecv >> block;\n+{\n+    CBlock block;\n+    vRecv >> block;\n \n-        LogPrint(\"net\", \"received block %s peer=%d\\n\", block.GetHash().ToString(), pfrom->id);\n-        // block.print();\n+    LogPrint(\"net\", \"received block %s peer=%d\\n\", block.GetHash().ToString(), pfrom->id);\n+    // block.print();\n \n-        CInv inv(MSG_BLOCK, block.GetHash());\n-        pfrom->AddInventoryKnown(inv);\n+    CInv inv(MSG_BLOCK, block.GetHash());\n+    pfrom->AddInventoryKnown(inv);\n \n-        {\n-            LOCK(cs_main);\n-            // Remember who we got this block from.\n-            mapBlockSource[inv.hash] = pfrom->GetId();\n-            MarkBlockAsReceived(inv.hash, pfrom->GetId());\n-        }\n+    {\n+        LOCK(cs_main);\n+        // Remember who we got this block from.\n+        mapBlockSource[inv.hash] = pfrom->GetId();\n+        MarkBlockAsReceived(inv.hash, pfrom->GetId());\n+    }\n \n-        CValidationState state;\n-        ProcessBlock(state, pfrom, &block);\n-        int nDoS;\n-        if (state.IsInvalid(nDoS)) {\n-            pfrom->PushMessage(\"reject\", (string)\"block\", state.GetRejectCode(),\n-                               state.GetRejectReason(), inv.hash);\n-            if (nDoS > 0) {\n-                LOCK(cs_main);\n-                Misbehaving(pfrom->GetId(), nDoS);\n-            }\n+    CValidationState state;\n+    ProcessBlock(state, pfrom, &block);\n+    int nDoS;\n+    if (state.IsInvalid(nDoS)) {\n+        pfrom->PushMessage(\"reject\", (string)\"block\", state.GetRejectCode(),\n+                           state.GetRejectReason(), inv.hash);\n+        if (nDoS > 0) {\n+            LOCK(cs_main);\n+            Misbehaving(pfrom->GetId(), nDoS);\n         }\n-\n-        return true;\n     }\n \n+    return true;\n+}\n+\n \n bool MessageEngine::MsgGetAddr(CNode* pfrom, CDataStream& vRecv, int64_t nTimeReceived)\n-    {\n-        pfrom->vAddrToSend.clear();\n-        vector<CAddress> vAddr = addrman.GetAddr();\n-        BOOST_FOREACH(const CAddress &addr, vAddr)\n-            pfrom->PushAddress(addr);\n-        return true;\n-    }\n+{\n+    pfrom->vAddrToSend.clear();\n+    vector<CAddress> vAddr = addrman.GetAddr();\n+    BOOST_FOREACH(const CAddress &addr, vAddr)\n+        pfrom->PushAddress(addr);\n+    return true;\n+}\n \n \n bool MessageEngine::MsgMempool(CNode* pfrom, CDataStream& vRecv, int64_t nTimeReceived)\n-    {\n-        LOCK2(cs_main, pfrom->cs_filter);\n+{\n+    LOCK2(cs_main, pfrom->cs_filter);\n \n-        std::vector<uint256> vtxid;\n-        mempool.queryHashes(vtxid);\n-        vector<CInv> vInv;\n-        BOOST_FOREACH(uint256& hash, vtxid) {\n-            CInv inv(MSG_TX, hash);\n-            CTransaction tx;\n-            bool fInMemPool = mempool.lookup(hash, tx);\n-            if (!fInMemPool) continue; // another thread removed since queryHashes, maybe...\n-            if ((pfrom->pfilter && pfrom->pfilter->IsRelevantAndUpdate(tx)) ||\n-               (!pfrom->pfilter))\n-                vInv.push_back(inv);\n-            if (vInv.size() == MAX_INV_SZ) {\n-                pfrom->PushMessage(\"inv\", vInv);\n-                vInv.clear();\n-            }\n-        }\n-        if (vInv.size() > 0)\n+    std::vector<uint256> vtxid;\n+    mempool.queryHashes(vtxid);\n+    vector<CInv> vInv;\n+    BOOST_FOREACH(uint256& hash, vtxid) {\n+        CInv inv(MSG_TX, hash);\n+        CTransaction tx;\n+        bool fInMemPool = mempool.lookup(hash, tx);\n+        if (!fInMemPool) continue; // another thread removed since queryHashes, maybe...\n+        if ((pfrom->pfilter && pfrom->pfilter->IsRelevantAndUpdate(tx)) ||\n+           (!pfrom->pfilter))\n+            vInv.push_back(inv);\n+        if (vInv.size() == MAX_INV_SZ) {\n             pfrom->PushMessage(\"inv\", vInv);\n-        return true;\n+            vInv.clear();\n+        }\n     }\n+    if (vInv.size() > 0)\n+        pfrom->PushMessage(\"inv\", vInv);\n+    return true;\n+}\n \n \n bool MessageEngine::MsgPing(CNode* pfrom, CDataStream& vRecv, int64_t nTimeReceived)\n+{\n+    if (pfrom->nVersion > BIP0031_VERSION)\n     {\n-        if (pfrom->nVersion > BIP0031_VERSION)\n-        {\n-            uint64_t nonce = 0;\n-            vRecv >> nonce;\n-            // Echo the message back with the nonce. This allows for two useful features:\n-            //\n-            // 1) A remote node can quickly check if the connection is operational\n-            // 2) Remote nodes can measure the latency of the network thread. If this node\n-            //    is overloaded it won't respond to pings quickly and the remote node can\n-            //    avoid sending us more work, like chain download requests.\n-            //\n-            // The nonce stops the remote getting confused between different pings: without\n-            // it, if the remote node sends a ping once per second and this node takes 5\n-            // seconds to respond to each, the 5th ping the remote sends would appear to\n-            // return very quickly.\n-            pfrom->PushMessage(\"pong\", nonce);\n-        }\n-        return true;\n+        uint64_t nonce = 0;\n+        vRecv >> nonce;\n+        // Echo the message back with the nonce. This allows for two useful features:\n+        //\n+        // 1) A remote node can quickly check if the connection is operational\n+        // 2) Remote nodes can measure the latency of the network thread. If this node\n+        //    is overloaded it won't respond to pings quickly and the remote node can\n+        //    avoid sending us more work, like chain download requests.\n+        //\n+        // The nonce stops the remote getting confused between different pings: without\n+        // it, if the remote node sends a ping once per second and this node takes 5\n+        // seconds to respond to each, the 5th ping the remote sends would appear to\n+        // return very quickly.\n+        pfrom->PushMessage(\"pong\", nonce);\n     }\n+    return true;\n+}\n \n \n bool MessageEngine::MsgPong(CNode* pfrom, CDataStream& vRecv, int64_t nTimeReceived)\n-    {\n-        int64_t pingUsecEnd = nTimeReceived;\n-        uint64_t nonce = 0;\n-        size_t nAvail = vRecv.in_avail();\n-        bool bPingFinished = false;\n-        std::string sProblem;\n-\n-        if (nAvail >= sizeof(nonce)) {\n-            vRecv >> nonce;\n-\n-            // Only process pong message if there is an outstanding ping (old ping without nonce should never pong)\n-            if (pfrom->nPingNonceSent != 0) {\n-                if (nonce == pfrom->nPingNonceSent) {\n-                    // Matching pong received, this ping is no longer outstanding\n-                    bPingFinished = true;\n-                    int64_t pingUsecTime = pingUsecEnd - pfrom->nPingUsecStart;\n-                    if (pingUsecTime > 0) {\n-                        // Successful ping time measurement, replace previous\n-                        pfrom->nPingUsecTime = pingUsecTime;\n-                    } else {\n-                        // This should never happen\n-                        sProblem = \"Timing mishap\";\n-                    }\n+{\n+    int64_t pingUsecEnd = nTimeReceived;\n+    uint64_t nonce = 0;\n+    size_t nAvail = vRecv.in_avail();\n+    bool bPingFinished = false;\n+    std::string sProblem;\n+\n+    if (nAvail >= sizeof(nonce)) {\n+        vRecv >> nonce;\n+\n+        // Only process pong message if there is an outstanding ping (old ping without nonce should never pong)\n+        if (pfrom->nPingNonceSent != 0) {\n+            if (nonce == pfrom->nPingNonceSent) {\n+                // Matching pong received, this ping is no longer outstanding\n+                bPingFinished = true;\n+                int64_t pingUsecTime = pingUsecEnd - pfrom->nPingUsecStart;\n+                if (pingUsecTime > 0) {\n+                    // Successful ping time measurement, replace previous\n+                    pfrom->nPingUsecTime = pingUsecTime;\n                 } else {\n-                    // Nonce mismatches are normal when pings are overlapping\n-                    sProblem = \"Nonce mismatch\";\n-                    if (nonce == 0) {\n-                        // This is most likely a bug in another implementation somewhere, cancel this ping\n-                        bPingFinished = true;\n-                        sProblem = \"Nonce zero\";\n-                    }\n+                    // This should never happen\n+                    sProblem = \"Timing mishap\";\n                 }\n             } else {\n-                sProblem = \"Unsolicited pong without ping\";\n+                // Nonce mismatches are normal when pings are overlapping\n+                sProblem = \"Nonce mismatch\";\n+                if (nonce == 0) {\n+                    // This is most likely a bug in another implementation somewhere, cancel this ping\n+                    bPingFinished = true;\n+                    sProblem = \"Nonce zero\";\n+                }\n             }\n         } else {\n-            // This is most likely a bug in another implementation somewhere, cancel this ping\n-            bPingFinished = true;\n-            sProblem = \"Short payload\";\n+            sProblem = \"Unsolicited pong without ping\";\n         }\n+    } else {\n+        // This is most likely a bug in another implementation somewhere, cancel this ping\n+        bPingFinished = true;\n+        sProblem = \"Short payload\";\n+    }\n \n-        if (!(sProblem.empty())) {\n-            LogPrint(\"net\", \"pong peer=%d %s: %s, %x expected, %x received, %u bytes\\n\",\n-                pfrom->id,\n-                pfrom->cleanSubVer,\n-                sProblem,\n-                pfrom->nPingNonceSent,\n-                nonce,\n-                nAvail);\n-        }\n-        if (bPingFinished) {\n-            pfrom->nPingNonceSent = 0;\n-        }\n-        return true;\n+    if (!(sProblem.empty())) {\n+        LogPrint(\"net\", \"pong peer=%d %s: %s, %x expected, %x received, %u bytes\\n\",\n+            pfrom->id,\n+            pfrom->cleanSubVer,\n+            sProblem,\n+            pfrom->nPingNonceSent,\n+            nonce,\n+            nAvail);\n     }\n+    if (bPingFinished) {\n+        pfrom->nPingNonceSent = 0;\n+    }\n+    return true;\n+}\n \n \n bool MessageEngine::MsgAlert(CNode* pfrom, CDataStream& vRecv, int64_t nTimeReceived)\n-    {\n-        CAlert alert;\n-        vRecv >> alert;\n+{\n+    CAlert alert;\n+    vRecv >> alert;\n \n-        uint256 alertHash = alert.GetHash();\n-        if (pfrom->setKnown.count(alertHash) == 0)\n+    uint256 alertHash = alert.GetHash();\n+    if (pfrom->setKnown.count(alertHash) == 0)\n+    {\n+        if (alert.ProcessAlert())\n         {\n-            if (alert.ProcessAlert())\n+            // Relay\n+            pfrom->setKnown.insert(alertHash);\n             {\n-                // Relay\n-                pfrom->setKnown.insert(alertHash);\n-                {\n-                    LOCK(cs_vNodes);\n-                    BOOST_FOREACH(CNode* pnode, vNodes)\n-                        alert.RelayTo(pnode);\n-                }\n-            }\n-            else {\n-                // Small DoS penalty so peers that send us lots of\n-                // duplicate/expired/invalid-signature/whatever alerts\n-                // eventually get banned.\n-                // This isn't a Misbehaving(100) (immediate ban) because the\n-                // peer might be an older or different implementation with\n-                // a different signature key, etc.\n-                Misbehaving(pfrom->GetId(), 10);\n+                LOCK(cs_vNodes);\n+                BOOST_FOREACH(CNode* pnode, vNodes)\n+                    alert.RelayTo(pnode);\n             }\n         }\n-        return true;\n+        else {\n+            // Small DoS penalty so peers that send us lots of\n+            // duplicate/expired/invalid-signature/whatever alerts\n+            // eventually get banned.\n+            // This isn't a Misbehaving(100) (immediate ban) because the\n+            // peer might be an older or different implementation with\n+            // a different signature key, etc.\n+            Misbehaving(pfrom->GetId(), 10);\n+        }\n     }\n+    return true;\n+}\n \n \n bool MessageEngine::MsgFilterLoad(CNode* pfrom, CDataStream& vRecv, int64_t nTimeReceived)\n-    {\n-        CBloomFilter filter;\n-        vRecv >> filter;\n+{\n+    CBloomFilter filter;\n+    vRecv >> filter;\n \n-        if (!filter.IsWithinSizeConstraints())\n-            // There is no excuse for sending a too-large filter\n-            Misbehaving(pfrom->GetId(), 100);\n-        else\n-        {\n-            LOCK(pfrom->cs_filter);\n-            delete pfrom->pfilter;\n-            pfrom->pfilter = new CBloomFilter(filter);\n-            pfrom->pfilter->UpdateEmptyFull();\n-        }\n-        pfrom->fRelayTxes = true;\n-        return true;\n+    if (!filter.IsWithinSizeConstraints())\n+        // There is no excuse for sending a too-large filter\n+        Misbehaving(pfrom->GetId(), 100);\n+    else\n+    {\n+        LOCK(pfrom->cs_filter);\n+        delete pfrom->pfilter;\n+        pfrom->pfilter = new CBloomFilter(filter);\n+        pfrom->pfilter->UpdateEmptyFull();\n     }\n+    pfrom->fRelayTxes = true;\n+    return true;\n+}\n \n \n bool MessageEngine::MsgFilterAdd(CNode* pfrom, CDataStream& vRecv, int64_t nTimeReceived)\n-    {\n-        vector<unsigned char> vData;\n-        vRecv >> vData;\n+{\n+    vector<unsigned char> vData;\n+    vRecv >> vData;\n \n-        // Nodes must NEVER send a data item > 520 bytes (the max size for a script data object,\n-        // and thus, the maximum size any matched object can have) in a filteradd message\n-        if (vData.size() > MAX_SCRIPT_ELEMENT_SIZE)\n-        {\n+    // Nodes must NEVER send a data item > 520 bytes (the max size for a script data object,\n+    // and thus, the maximum size any matched object can have) in a filteradd message\n+    if (vData.size() > MAX_SCRIPT_ELEMENT_SIZE)\n+    {\n+        Misbehaving(pfrom->GetId(), 100);\n+    } else {\n+        LOCK(pfrom->cs_filter);\n+        if (pfrom->pfilter)\n+            pfrom->pfilter->insert(vData);\n+        else\n             Misbehaving(pfrom->GetId(), 100);\n-        } else {\n-            LOCK(pfrom->cs_filter);\n-            if (pfrom->pfilter)\n-                pfrom->pfilter->insert(vData);\n-            else\n-                Misbehaving(pfrom->GetId(), 100);\n-        }\n-        return true;\n     }\n+    return true;\n+}\n \n \n bool MessageEngine::MsgFilterClear(CNode* pfrom, CDataStream& vRecv, int64_t nTimeReceived)\n-    {\n-        LOCK(pfrom->cs_filter);\n-        delete pfrom->pfilter;\n-        pfrom->pfilter = new CBloomFilter();\n-        pfrom->fRelayTxes = true;\n-        return true;\n-    }\n+{\n+    LOCK(pfrom->cs_filter);\n+    delete pfrom->pfilter;\n+    pfrom->pfilter = new CBloomFilter();\n+    pfrom->fRelayTxes = true;\n+    return true;\n+}\n \n \n bool MessageEngine::MsgReject(CNode* pfrom, CDataStream& vRecv, int64_t nTimeReceived)\n+{\n+    if (fDebug)\n     {\n-        if (fDebug)\n-        {\n-            string strMsg; unsigned char ccode; string strReason;\n-            vRecv >> strMsg >> ccode >> strReason;\n+        string strMsg; unsigned char ccode; string strReason;\n+        vRecv >> strMsg >> ccode >> strReason;\n \n-            ostringstream ss;\n-            ss << strMsg << \" code \" << itostr(ccode) << \": \" << strReason;\n+        ostringstream ss;\n+        ss << strMsg << \" code \" << itostr(ccode) << \": \" << strReason;\n \n-            if (strMsg == \"block\" || strMsg == \"tx\")\n-            {\n-                uint256 hash;\n-                vRecv >> hash;\n-                ss << \": hash \" << hash.ToString();\n-            }\n-            // Truncate to reasonable length and sanitize before printing:\n-            string s = ss.str();\n-            if (s.size() > 111) s.erase(111, string::npos);\n-            LogPrint(\"net\", \"Reject %s\\n\", SanitizeString(s));\n+        if (strMsg == \"block\" || strMsg == \"tx\")\n+        {\n+            uint256 hash;\n+            vRecv >> hash;\n+            ss << \": hash \" << hash.ToString();\n         }\n-        return true;\n+        // Truncate to reasonable length and sanitize before printing:\n+        string s = ss.str();\n+        if (s.size() > 111) s.erase(111, string::npos);\n+        LogPrint(\"net\", \"Reject %s\\n\", SanitizeString(s));\n     }\n+    return true;\n+}\n \n // requires LOCK(cs_vRecvMsg)\n bool MessageEngine::ProcessMessages(CNode* pfrom)"
      }
    ]
  }
]