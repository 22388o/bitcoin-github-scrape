jgarzik,2014-08-07T17:45:59Z,"Updated such that each message is a method.  It is recommended to review each commit rather than the sum of all commits, as this patch series follows the ""equivalent transformation"" method of refactoring code into a more useful form.\n\nThis should be suitable for updating to use signals or similar (possibly moving back outside of the class if necessary).\n",https://github.com/bitcoin/bitcoin/pull/4646#issuecomment-51506315,51506315,
BitcoinPullTester,2014-08-07T17:58:51Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/p4646_aa9ad2895e32dcaedba5e1511f5edead4664c029/ for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-te",https://github.com/bitcoin/bitcoin/pull/4646#issuecomment-51508028,51508028,
jtimon,2014-09-03T10:42:31Z,"Oh, yes, please!\nuntested and undiffed ACK. The diffed ack will come later. Maybe the last un-indent commit can be replaced with a ""Pass clang to the new files"". Now that we have a way to automatically format the code, it can be useful for after-diff-sensible commits like that one, should be faster to review just by reproducing it locally.\n",https://github.com/bitcoin/bitcoin/pull/4646#issuecomment-54279211,54279211,
sipa,2014-09-03T13:00:06Z,"Idea ACK, but this code is pretty much in flux still (askfor/headersfirst/sendmessages/...); I'd propose to delay this until close to the next major release.\n",https://github.com/bitcoin/bitcoin/pull/4646#issuecomment-54292468,54292468,
jtimon,2014-10-18T18:43:40Z,"After headersfirst has been merged, can we reopen this?\n",https://github.com/bitcoin/bitcoin/pull/4646#issuecomment-59625079,59625079,
sipa,2014-10-19T08:13:54Z,"No objection against just moving things like this, but things like #4831 conflict probably with less, and actually go further, as it actually splits processing up completely, rather than just moving it as a whole.\n",https://github.com/bitcoin/bitcoin/pull/4646#issuecomment-59642865,59642865,
sipa,2014-10-19T08:14:55Z,Things like ping/pong handling and alert handling can probably be split off in a way similar to #4831.\n,https://github.com/bitcoin/bitcoin/pull/4646#issuecomment-59642891,59642891,
Diapolo,2014-10-19T10:47:14Z,Suggestion: Why not let the clang-script fix coding style for this?\n,https://github.com/bitcoin/bitcoin/pull/4646#issuecomment-59645959,59645959,
jtimon,2014-10-23T06:00:16Z,I really like how https://github.com/jgarzik/bitcoin/commit/78edf5cb8cf65caf38080ac57040469cc9c6957f (Split up P2P message processing into MessageEngine methods) improves the readability of the p2p messages.\n,https://github.com/bitcoin/bitcoin/pull/4646#issuecomment-60196006,60196006,
jgarzik,2014-10-23T13:34:36Z,"I felt that this was a good step towards the direction we want to go longer term, which is registering processing methods (signals/hooks), so that the message processing implementation is more de-coupled from network message dispatch.\n\nIt sounded like @sipa did not like this as an intermediate step, though.\n",https://github.com/bitcoin/bitcoin/pull/4646#issuecomment-60238911,60238911,
sipa,2014-10-23T15:37:58Z,I would absolutely be in favor of this as intermediate step if not for the review overhead and the fact that it will break existing pull requests that already go further.\n\nAfterwards I think we can definitely do this for the non-trivial pieces after the trivial ones have been moved out.\n,https://github.com/bitcoin/bitcoin/pull/4646#issuecomment-60258533,60258533,
jtimon,2015-06-21T13:22:10Z,Needs rebase...\nWould this be easier to merge if it only contained one commit equivalent to https://github.com/jgarzik/bitcoin/commit/78edf5cb8cf65caf38080ac57040469cc9c6957f but doing the separation directly in main.cpp and using regular functions instead of method of a new class?\nThey can even be static inline functions in which case the commit should produce an identical build unless I'm miss,https://github.com/bitcoin/bitcoin/pull/4646#issuecomment-113901141,113901141,
jgarzik,2015-07-23T18:01:22Z,"Closing.  I still think this is worth merging and @jtimon seems to agree.  However it has not gained sufficient momentum to get merged for whatever reason.\n\nAs usual, it is easy to re-open a PR if this turns out to be in error, ACKs suddenly appear, etc.  Applying the ""close old PRs, easy to reopen"" pattern.\n\nThis code movement change is too large to continue rebasing if it is not getting merg",https://github.com/bitcoin/bitcoin/pull/4646#issuecomment-124186219,124186219,
jtimon,2015-07-24T01:31:12Z,I really think this kind of PR opens the door to many modularity improvements. And I understand that code movements are a burden to reviewers because they need to keep up to date with them after they're merged. This is a very big move on main.cpp that everybody is touching.\nBut I seriously don't understand why breaking breaking an overly-nested switch into new functions of a too-large function li,https://github.com/bitcoin/bitcoin/pull/4646#issuecomment-124288131,124288131,
jgarzik,2015-07-24T05:20:12Z,"@jtimon I agree.  It is however difficult to produce identical hashes due to minor compiler build differences such as the ones that sipa mentions.\n\nYou could probably perform some #include tricks to accomplish the first file movement step with equivalent hashes, if you keep ProcessMessage() intact.  Once the individual code blocks move to their own functions/methods, the hashes will unavoidably ",https://github.com/bitcoin/bitcoin/pull/4646#issuecomment-124334871,124334871,
sipa,2015-07-24T05:34:07Z,"I have nothing against changes like this, except I think that:\n1) The resulting temporary state is worse than the start due to circular\ndependencies (you don't claim it is, but:)\n2) It does not help anything towards achieving the IMHO correct solution,\nwhich is separate handler modules, like @laanwj's inv/ask transaction\nhandling. In fact, it interferes with it.\n\nI would like to see moving ",https://github.com/bitcoin/bitcoin/pull/4646#issuecomment-124335940,124335940,
jtimon,2015-07-24T13:14:15Z,"> You could probably perform some #include tricks to accomplish the first file movement step with equivalent hashes, if you keep ProcessMessage() intact. \n\nI was talking about doing the equivalent to that commit without moving anything first.\n\n> Once the individual code blocks move to their own functions/methods, the hashes will unavoidably differ.\n\nShouldn't `static inline` be enough to in ",https://github.com/bitcoin/bitcoin/pull/4646#issuecomment-124516158,124516158,
jtimon,2015-07-24T13:48:53Z,"I'm talking about something along this lines: https://github.com/bitcoin/bitcoin/compare/bitcoin:master...jtimon:process-message-0.12.99 \nBut I now realize that for the build to be identical the return true; at the end of every new function should be introduced before that commit. That little preparation would also be trivial to review, but I'm not sure having an identical build commit would be a",https://github.com/bitcoin/bitcoin/pull/4646#issuecomment-124527328,124527328,
sipa,2015-07-24T14:02:57Z,No problem with splitting up processing.\n,https://github.com/bitcoin/bitcoin/pull/4646#issuecomment-124532767,124532767,
jtimon,2015-07-24T15:07:53Z,"@sipa Great, I will eventually open what I started there then, although I believe it would be good to make more things like #6163 first, so that we don't have to work more later (having to add more parameters to the new functions).\n\nThoughts on the identical build? Could https://github.com/bitcoin/bitcoin/commit/d8e5ff46d31680c1b90abb1d04a7580a2ba48888 theoretically produce an identical build? I",https://github.com/bitcoin/bitcoin/pull/4646#issuecomment-124553071,124553071,
sipa,2015-07-24T15:24:47Z,"I think that for refactors like this, you shouldn't aim for identical builds.  \n\nThe only way to achieve that is by forcing the compiler to inline things, which for such large blocks of code is probably a bad idea.\n",https://github.com/bitcoin/bitcoin/pull/4646#issuecomment-124558026,124558026,
jtimon,2015-07-25T22:16:03Z,"Thanks, @sipa that's useful. But I don't see why inlining all those new static functions is a bad idea. First, it is no worse than what we currently have, and second, the inline can be removed in a fixup! commit (to be squashed together after ""testing"", just like the preparation commit).\n\nIn any case, maybe is still not worth it, but what about doing something similar in consensus code, more con",https://github.com/bitcoin/bitcoin/pull/4646#issuecomment-124905673,124905673,
sipa,2015-07-25T22:35:04Z,"@jtimon I mean _forcing_ the compiler to inline things - just putting the 'inline' keyword may not be enough for that (it may need compiler flags, for example), and even then, the order in the binary may end up being different.\n\nJust saying that IMHO that's not a good use of your time, but if you think you can make the build identical, so much the better.\n\nI'm much less concerned about changes",https://github.com/bitcoin/bitcoin/pull/4646#issuecomment-124907691,124907691,
jgarzik,2015-07-26T00:38:18Z,Basically the inlining doesn't produce any value.  It doesn't generate identical hashes.  Might as well make them separate functions/methods.\n,https://github.com/bitcoin/bitcoin/pull/4646#issuecomment-124922017,124922017,
jtimon,2015-07-26T22:14:11Z,"Thank you very much both of you: this is very helpful.\nWhen (if nobody does it before me) I reopen the discussed subset of this PR, I will forget about the identical build. I guess I was too much worried about reusing the IsIdenticalBuild tool for  https://github.com/bitcoin/bitcoin/pull/5153#issuecomment-60885271 , but this seems definitely less risky and more of a priority. \n\nBut, as said, I ",https://github.com/bitcoin/bitcoin/pull/4646#issuecomment-125044361,125044361,
Diapolo,2014-10-19T10:42:30Z,Nit: Alphabetical ordering.\n,https://github.com/bitcoin/bitcoin/pull/4646#discussion_r19059356,19059356,src/main.cpp
Diapolo,2014-10-19T10:43:12Z,Nit: Same here.\n,https://github.com/bitcoin/bitcoin/pull/4646#discussion_r19059363,19059363,src/main.h
Diapolo,2014-10-19T10:44:04Z,Nit: And for this whole block. Also just MIT license.\n,https://github.com/bitcoin/bitcoin/pull/4646#discussion_r19059375,19059375,src/procmsg.cpp
Diapolo,2014-10-19T10:44:34Z,Suggestion: remove the unneeded newlines here.\n,https://github.com/bitcoin/bitcoin/pull/4646#discussion_r19059381,19059381,src/procmsg.cpp
Diapolo,2014-10-19T10:45:00Z,Suggestion: Could be a one line-comment?\n,https://github.com/bitcoin/bitcoin/pull/4646#discussion_r19059385,19059385,src/procmsg.cpp
Diapolo,2014-10-19T10:45:34Z,Nit: Unneeded newline.\n,https://github.com/bitcoin/bitcoin/pull/4646#discussion_r19059390,19059390,src/procmsg.cpp
Diapolo,2014-10-19T10:46:12Z,Misses license header!\n,https://github.com/bitcoin/bitcoin/pull/4646#discussion_r19059396,19059396,src/procmsg.h
Diapolo,2014-10-19T10:46:22Z,Nit: Ordering.\n,https://github.com/bitcoin/bitcoin/pull/4646#discussion_r19059399,19059399,src/procmsg.h
