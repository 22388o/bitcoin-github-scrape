[
  {
    "sha": "90963e53707cf244e6a2a804341e9280628b0c34",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MDk2M2U1MzcwN2NmMjQ0ZTZhMmE4MDQzNDFlOTI4MDYyOGIwYzM0",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2016-05-10T06:23:49Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2016-05-10T08:14:21Z"
      },
      "message": "[doc] Add basic git squash example",
      "tree": {
        "sha": "ffa2bcc98ba6f7313ab529b00c6fd3f9ebc049a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ffa2bcc98ba6f7313ab529b00c6fd3f9ebc049a9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/90963e53707cf244e6a2a804341e9280628b0c34",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJXMZhdAAoJEC7rn1zAlSbBDcAP/jxnZM3u4gJ461UnlFuReWfI\nZTw32au7Wh0XeSVDTA8r4MkEp+jOVSqN2WyfQIn49wD7bB1xUIYbdWTw0FrZTBif\nacAMoD8SwAWV4NM1KlipLa93FlEVRz3OH5YMXcjLPY5veojkJMM3l/1jrtlon47s\nwYSySuOoMDy4e3UiTHlxO19BPZcAuIVHPjqWVUma2LZ0YOH8BzbyCiap8LFmnhmi\nbWXoIA1q3G7emj2ojc2A8Nq5RcodgSoHIKgRQqWjIHsHHK568AM0WuxDaC2IETJq\nABAh2MQ8vKu7guyYng2Mk7opPTzyE80E+JOHEMCk6UD5mWcqc+C518Xhs5fyX47p\nOZC0wEensWjqccFigOYwohEzHhrpQIWDLtgO7aTE5Vminnr7QhkERSeHcgoul/rl\nSbahU9iba4f4DtVQn5hOf2ojG62YJ4OlDT/xlqD/tSzOUjgRb4CNgQpqpP9PHC4c\njjU8+X2AFSo7L064g9LBQnbDlp8MrbPz85xHikskQWB8Erx/ZuGw8dlQWO426fD0\nGJWDr9M28XA9IvaGCvXS4RFnfTa2AwuqKAWPz1OJXGY+ZE6nVLUnALHqKcZ2Tc5P\nX2DzA9g2Vlf20yogYv+ebzXRHWK+n4ScFnu8pablERSyErTQHQzeL/txVYhRI60Z\nuNmxygb4+lsUUPmHhSxX\n=QGLf\n-----END PGP SIGNATURE-----",
        "payload": "tree ffa2bcc98ba6f7313ab529b00c6fd3f9ebc049a9\nparent 4e14afe42fdd468d5de11df8cc13defdcb8e83f8\nauthor fanquake <fanquake@gmail.com> 1462861429 +0800\ncommitter fanquake <fanquake@gmail.com> 1462868061 +0800\n\n[doc] Add basic git squash example\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90963e53707cf244e6a2a804341e9280628b0c34",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/90963e53707cf244e6a2a804341e9280628b0c34",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90963e53707cf244e6a2a804341e9280628b0c34/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4e14afe42fdd468d5de11df8cc13defdcb8e83f8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e14afe42fdd468d5de11df8cc13defdcb8e83f8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4e14afe42fdd468d5de11df8cc13defdcb8e83f8"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 21,
      "deletions": 7
    },
    "files": [
      {
        "sha": "5c1138b812d471475c46874c900a3db138d6495a",
        "filename": "CONTRIBUTING.md",
        "status": "modified",
        "additions": 21,
        "deletions": 7,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90963e53707cf244e6a2a804341e9280628b0c34/CONTRIBUTING.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90963e53707cf244e6a2a804341e9280628b0c34/CONTRIBUTING.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/CONTRIBUTING.md?ref=90963e53707cf244e6a2a804341e9280628b0c34",
        "patch": "@@ -17,13 +17,13 @@ To contribute a patch, the workflow is as follows:\n   - Create topic branch\n   - Commit patches\n \n-The project coding conventions in [doc/developer-notes.md](doc/developer-notes.md) must be adhered to.\n+The project coding conventions in the [developer notes](doc/developer-notes.md) must be adhered to.\n \n In general [commits should be atomic](https://en.wikipedia.org/wiki/Atomic_commit#Atomic_commit_convention) and diffs should be easy to read. For this reason do not mix any formatting fixes or code moves with actual code changes.\n \n Commit messages should be verbose by default consisting of a short subject line (50 chars max), a blank line and detailed explanatory text as separate paragraph(s); unless the title alone is self-explanatory (like \"Corrected typo in main.cpp\") then a single title line is sufficient. Commit messages should be helpful to people reading your code in the future, so explain the reasoning for your decisions. Further explanation [here](http://chris.beams.io/posts/git-commit/).\n \n-If a particular commit references another issue, please add the reference, for example \"refs #1234\", or \"fixes #4321\". Using \"fixes or closes\" keywords will cause the corresponding issue to be closed when the pull request is merged.\n+If a particular commit references another issue, please add the reference, for example `refs #1234`, or `fixes #4321`. Using the `fixes` or `closes` keywords will cause the corresponding issue to be closed when the pull request is merged.\n \n Please refer to the [Git manual](https://git-scm.com/doc) for more information about Git.\n \n@@ -35,13 +35,27 @@ The title of the pull request should be prefixed by the component or area that t\n     Consensus: Add new opcode for BIP-XXXX OP_CHECKAWESOMESIG\n     Net: Automatically create hidden service, listen on Tor\n     Qt: Add feed bump button\n-    Trivial: fix typo\n+    Trivial: Fix typo in main.cpp\n \n-If a pull request is specifically not to be considered for merging (yet) please prefix the title with [WIP] or use [Tasks Lists](https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments) in the body of the pull request to indicate tasks are pending.\n+If a pull request is specifically not to be considered for merging (yet) please prefix the title with [WIP] or use [Tasks Lists](https://help.github.com/articles/basic-writing-and-formatting-syntax/#task-lists) in the body of the pull request to indicate tasks are pending.\n \n The body of the pull request should contain enough description about what the patch does together with any justification/reasoning. You should include references to any discussions (for example other tickets or mailing list discussions).\n \n-At this stage one should expect comments and review from other contributors. You can add more commits to your pull request by committing them locally and pushing to your fork until you have satisfied all feedback. If your pull request is accepted for merging, you may be asked by a maintainer to squash and or rebase your commits before it will be merged. The length of time required for peer review is unpredictable and will vary from patch to patch.\n+At this stage one should expect comments and review from other contributors. You can add more commits to your pull request by committing them locally and pushing to your fork until you have satisfied all feedback.\n+\n+Squashing Commits\n+---------------------------\n+If your pull request is accepted for merging, you may be asked by a maintainer to squash and or [rebase](https://git-scm.com/docs/git-rebase) your commits before it will be merged. The basic squashing workflow is shown below.\n+\n+    git checkout your_branch_name\n+    git rebase -i HEAD~n\n+    # n is normally the number of commits in the pull\n+    # set commits from 'pick' to 'squash', save and quit\n+    # on the next screen, edit/refine commit messages\n+    # save and quit\n+    git push -f # (force push to GitHub)\n+\n+The length of time required for peer review is unpredictable and will vary from pull request to pull request.\n \n \n Pull Request Philosophy\n@@ -61,15 +75,15 @@ Refactoring is a necessary part of any software project's evolution. The followi\n \n There are three categories of refactoring, code only moves, code style fixes, code refactoring. In general refactoring pull requests should not mix these three kinds of activity in order to make refactoring pull requests easy to review and uncontroversial. In all cases, refactoring PRs must not change the behaviour of code within the pull request (bugs must be preserved as is).\n \n-Project maintainers aim for a quick turnaround on refactoring pull requests, so where possible keep them short, uncomplex and easy to verify. \n+Project maintainers aim for a quick turnaround on refactoring pull requests, so where possible keep them short, uncomplex and easy to verify.\n \n \n \"Decision Making\" Process\n -------------------------\n \n The following applies to code changes to the Bitcoin Core project (and related projects such as libsecp256k1), and is not to be confused with overall Bitcoin Network Protocol consensus changes.\n \n-Whether a pull request is merged into Bitcoin Core rests with the project merge maintainers and ultimately the project lead. \n+Whether a pull request is merged into Bitcoin Core rests with the project merge maintainers and ultimately the project lead.\n \n Maintainers will take into consideration if a patch is in line with the general principles of the project; meets the minimum standards for inclusion; and will judge the general consensus of contributors.\n "
      }
    ]
  }
]