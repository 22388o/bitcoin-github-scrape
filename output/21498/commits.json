[
  {
    "sha": "5294f0d5a94cc7beaf692131fba0cad8beec9f13",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1Mjk0ZjBkNWE5NGNjN2JlYWY2OTIxMzFmYmEwY2FkOGJlZWM5ZjEz",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-03-22T03:22:06Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-03-22T03:22:06Z"
      },
      "message": "refactor: return std::nullopt instead of {}\n\nIn #21415 we decided to return `std::optional` rather than `{}` for\nuninitialized values. This PR repalces the two remaining usages of `{}`\nwith `std::nullopt`.\n\nAs a side-effect, this also quells the spurious GCC 10.2.x warning that\nwe've had reported quite a few times. i.e #21318, #21248, #20797.\n\n```bash\ntxmempool.cpp: In member function \u2018CTxMemPool::setEntries CTxMemPool::GetIterSet(const std::set<uint256>&) const\u2019:\ntxmempool.cpp:898:13: warning: \u2018<anonymous>\u2019 may be used uninitialized in this function [-Wmaybe-uninitialized]\n  898 |     return {};\n      |             ^\n```",
      "tree": {
        "sha": "ab68899a7525ad0a6747aaba04762dc98c73e032",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ab68899a7525ad0a6747aaba04762dc98c73e032"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5294f0d5a94cc7beaf692131fba0cad8beec9f13",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmBYDhQACgkQLuufXMCV\nJsEgWg/+LcpOqMcH0l9XNLYB02fVGfCma+TKyFY5052PN7l60cWQm5li5pS5I/5O\n9GjnnnyHVJEZAcbtZUWvj8/Xj3VUhGEKaWlbbuspmIVL5MRAzYF6gzgEHLdk1XaY\ntq5ThfLTyEf+Qjkq6FK6OYuszzCLWdfFw3p6RthDxGonDJfO7XHkowwBfO72UEYW\nYVXMrq/Ujj0VEFJGYte/p74H4RlMs2dLFT767ve949LgLWKKDnr+bQrAQm7vx+dY\nagASOwRs/l6MtfcwLQSVJBUSjOzVhk1fn+P87gz286UhMCCU0ZdPPHy7HHbGaZ8V\ncPKEPSEjhzJjcOt/yueNWt0DgyyqlgdTKWPcMpVArwMHP268OsXJFfjPrPetNbcn\nChiYE60/XK2XwXFs33Wt753ZKgjWAJ9eocuEX+y1vfFwkwFTKyAV5k4l4ASA3CjL\nJAbuZ1ukXV9/NfnUy00zEWI0xMcdSkAnSQSmKQx60iQk2M9M39z8urPfbRsjZYcG\njzi6uVcKmOUpyL/AeSmWm9EkTcx1e+0uisZzIJCSuHrfz6GO08O+YkM7aExVz22l\nUWsBLYQ6ZlNAIZpTXV5HdD/upEeUBWE+qJ6gDQXWVWGy049l1aKewEUXixuwNK7G\nAMgDyQAhpMd0V99YVwKJY8eiucKPYRfjYbh2TH71G93rhJr3rOw=\n=KUl8\n-----END PGP SIGNATURE-----",
        "payload": "tree ab68899a7525ad0a6747aaba04762dc98c73e032\nparent d2a78ee9288e4d3bace9125bcfae6b7747f85982\nauthor fanquake <fanquake@gmail.com> 1616383326 +0800\ncommitter fanquake <fanquake@gmail.com> 1616383326 +0800\n\nrefactor: return std::nullopt instead of {}\n\nIn #21415 we decided to return `std::optional` rather than `{}` for\nuninitialized values. This PR repalces the two remaining usages of `{}`\nwith `std::nullopt`.\n\nAs a side-effect, this also quells the spurious GCC 10.2.x warning that\nwe've had reported quite a few times. i.e #21318, #21248, #20797.\n\n```bash\ntxmempool.cpp: In member function \u2018CTxMemPool::setEntries CTxMemPool::GetIterSet(const std::set<uint256>&) const\u2019:\ntxmempool.cpp:898:13: warning: \u2018<anonymous>\u2019 may be used uninitialized in this function [-Wmaybe-uninitialized]\n  898 |     return {};\n      |             ^\n```\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5294f0d5a94cc7beaf692131fba0cad8beec9f13",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5294f0d5a94cc7beaf692131fba0cad8beec9f13",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5294f0d5a94cc7beaf692131fba0cad8beec9f13/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d2a78ee9288e4d3bace9125bcfae6b7747f85982",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2a78ee9288e4d3bace9125bcfae6b7747f85982",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d2a78ee9288e4d3bace9125bcfae6b7747f85982"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "67549fc13d4de56381a9bbc386fb592b4b4551b7",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5294f0d5a94cc7beaf692131fba0cad8beec9f13/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5294f0d5a94cc7beaf692131fba0cad8beec9f13/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=5294f0d5a94cc7beaf692131fba0cad8beec9f13",
        "patch": "@@ -895,7 +895,7 @@ std::optional<CTxMemPool::txiter> CTxMemPool::GetIter(const uint256& txid) const\n {\n     auto it = mapTx.find(txid);\n     if (it != mapTx.end()) return it;\n-    return {};\n+    return std::nullopt;\n }\n \n CTxMemPool::setEntries CTxMemPool::GetIterSet(const std::set<uint256>& hashes) const"
      },
      {
        "sha": "d1b9efe7bac91c0ebe6cd96bdd51aaf541f84b18",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5294f0d5a94cc7beaf692131fba0cad8beec9f13/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5294f0d5a94cc7beaf692131fba0cad8beec9f13/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=5294f0d5a94cc7beaf692131fba0cad8beec9f13",
        "patch": "@@ -5186,7 +5186,7 @@ std::optional<uint256> ChainstateManager::SnapshotBlockhash() const {\n         // If a snapshot chainstate exists, it will always be our active.\n         return m_active_chainstate->m_from_snapshot_blockhash;\n     }\n-    return {};\n+    return std::nullopt;\n }\n \n std::vector<CChainState*> ChainstateManager::GetAll()"
      }
    ]
  }
]