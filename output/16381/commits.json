[
  {
    "sha": "da8db1d3199f74e6eb60f955e3f8da8a5731c161",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYThkYjFkMzE5OWY3NGU2ZWI2MGY5NTVlM2Y4ZGE4YTU3MzFjMTYx",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-07-13T08:25:09Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-07-31T14:57:58Z"
      },
      "message": "Set minimum required Boost to 1.53.0",
      "tree": {
        "sha": "e75e40cc5bb97f6539bb76f4d03ba8a05ab80c6d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e75e40cc5bb97f6539bb76f4d03ba8a05ab80c6d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/da8db1d3199f74e6eb60f955e3f8da8a5731c161",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl1BrHYACgkQQQEIES5+\nqB/JVA/9FFQPCBHOqhyXKOagEuIv50iJct7lcOowlKnl5IJ8yHeBxT6uhRGZzHef\nsaQbyXIXW+e8vLog0NcuKqFxjMJHnfbEiqD334diEBSE6Pn24BS239PoS2gx1+82\n5B7qIv7qlI+Qq+rhVuiovSnzeo0PDwocswg3AH79OZy+fi53ylE3Fk076wzPJz0E\nv64g56J3dnZOqDuPb5JCXzUrDEg05QscFj1KWfLB+DS524Y32ZZr7kbQncSR0Rlu\nzHG8u6ZoFMVhokBveFjCnj8oQDSgpdU8eIY/325IoM5aZJJXv4vcTL80WDeMXQbL\nV8vQHOOaDhoQB4I25dl9EeORRm98hr94cmAPTMcwOEejtJljOoRPVLzum03MQPEK\nGsTf5IEI0MO7yXZjd2oKhGIcR1rskq6X+hdGq2joF01mKE7n87/wXnTbfrS2XPT9\nihMOl+MUXm/rSDKA7gLQFOYv4GbvHBvTYA/IYDFMBQPqqd/7mPC/Ir2rp4+HDkvD\nO4NtD+pU57zAgqC4lAgayyEtM7ayqfYLm03D8hNIE2AgQZ3ezmOezV7jaUW2Ho6U\n9GgMLGA+EixLoHT51mVgXyF4C/CuwkFdZjCyYMHDBeEifr+DAeegxTzxc2tj2jA5\ntl6HQtc9XDseaR8Ul30CkKSZlb01sxOdYdbTE82L0OPdqfNUnAU=\n=Udss\n-----END PGP SIGNATURE-----",
        "payload": "tree e75e40cc5bb97f6539bb76f4d03ba8a05ab80c6d\nparent 3f288a1c05ebcadd7d7709f81c77921ff9e27ba2\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1563006309 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1564585078 +0300\n\nSet minimum required Boost to 1.53.0\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da8db1d3199f74e6eb60f955e3f8da8a5731c161",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/da8db1d3199f74e6eb60f955e3f8da8a5731c161",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da8db1d3199f74e6eb60f955e3f8da8a5731c161/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3f288a1c05ebcadd7d7709f81c77921ff9e27ba2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f288a1c05ebcadd7d7709f81c77921ff9e27ba2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3f288a1c05ebcadd7d7709f81c77921ff9e27ba2"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "7e379f5ef3c4c3959e78f38b70994c2511d012cf",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da8db1d3199f74e6eb60f955e3f8da8a5731c161/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da8db1d3199f74e6eb60f955e3f8da8a5731c161/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=da8db1d3199f74e6eb60f955e3f8da8a5731c161",
        "patch": "@@ -1025,7 +1025,7 @@ fi\n if test x$use_boost = xyes; then\n \n dnl Minimum required Boost version\n-define(MINIMUM_REQUIRED_BOOST, 1.47.0)\n+define(MINIMUM_REQUIRED_BOOST, 1.53.0)\n \n dnl Check for boost libs\n AX_BOOST_BASE([MINIMUM_REQUIRED_BOOST])"
      },
      {
        "sha": "d7cb2dd19b7991abd547e3150941b63622b5b5e3",
        "filename": "doc/dependencies.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da8db1d3199f74e6eb60f955e3f8da8a5731c161/doc/dependencies.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da8db1d3199f74e6eb60f955e3f8da8a5731c161/doc/dependencies.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/dependencies.md?ref=da8db1d3199f74e6eb60f955e3f8da8a5731c161",
        "patch": "@@ -6,7 +6,7 @@ These are the dependencies currently used by Bitcoin Core. You can find instruct\n | Dependency | Version used | Minimum required | CVEs | Shared | [Bundled Qt library](https://doc.qt.io/qt-5/configure-options.html#third-party-libraries) |\n | --- | --- | --- | --- | --- | --- |\n | Berkeley DB | [4.8.30](https://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html) | 4.8.x | No |  |  |\n-| Boost | [1.70.0](https://www.boost.org/users/download/) | [1.47.0](https://github.com/bitcoin/bitcoin/pull/8920) | No |  |  |\n+| Boost | [1.70.0](https://www.boost.org/users/download/) | [1.53.0](https://github.com/bitcoin/bitcoin/pull/16381) | No |  |  |\n | Clang |  | [3.3+](https://releases.llvm.org/download.html) (C++11 support) |  |  |  |\n | Expat | [2.2.7](https://libexpat.github.io/) |  | No | Yes |  |\n | fontconfig | [2.12.1](https://www.freedesktop.org/software/fontconfig/release/) |  | No | Yes |  |"
      }
    ]
  },
  {
    "sha": "cb8b557afedad0f721d339820bd3032d55fe127f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYjhiNTU3YWZlZGFkMGY3MjFkMzM5ODIwYmQzMDMyZDU1ZmUxMjdm",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-07-13T10:42:34Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-07-31T14:58:06Z"
      },
      "message": "Remove fallbacks for pre-1.53.0 Boost",
      "tree": {
        "sha": "77043d8255aecb8ae8426cf789db42ba8ae8d1dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/77043d8255aecb8ae8426cf789db42ba8ae8d1dd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cb8b557afedad0f721d339820bd3032d55fe127f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl1BrH4ACgkQQQEIES5+\nqB+ZdQ//Z9wMcsKk5ZCPPeYjhmGUJ4YjPzmJ5cFTUaAFfnVnrNQDSzkHTKK/NKg9\nwWBsZ2Cnr0T1yd/Msf7kTlWU1hrnTZHLBJJbc3zgTVKbk8LOpGAYEJoy6NUBTBqt\n/Qvx9ZS7GTvnp/g2HKzXFmcbiLtzNNUkR+ZRIdedFXhCFrmYOWa2JMyNitooqIIa\naGJStTsiI73dTFiv1r5nIVukPPsm7gqqYpTDeI9Q6bAFL1NF1J9abKvv31OKEy2d\nCHM9tuLaHBZZ/7vVU96pcGbZ7uOtSOH9iTnCDYgE4pmGRHu4fsDxQ8XVnbmLqDLz\nD+SlfDnbe5yoL4ZLQcOIVFenCvLsVCraxst19PWVChW4MQIle1NHDEJjUJkBt5Ld\nq4ZIznoujeXc/EkZJ1SSkM4JnM0Q8Gwu1tsMoY5oMuCLKz3QdAe2LHc3QyHHHrS/\nVfLzxbDOtHpUTh0VaHo2wRiKijuYw2QRCHCl+s0oJxMcr3/RUnzqmfiotwRfHRXp\nYmSLfu86kis1W4BwyqwhLaUKJg1g5MnApCfljEEv8m1MqJxwJFDQ99POrd1ElVrW\nWfyloRJMDdF94DkcMkRUIPAHxVO+DFtXb5eJXeqTA0ifT7gWgSVgEbACjlFBtDUB\nGISgBTIwHUwFjOj3c55BGkhvR8FoA6HVMdBAzTt9+bqni5YKSwI=\n=s7Cx\n-----END PGP SIGNATURE-----",
        "payload": "tree 77043d8255aecb8ae8426cf789db42ba8ae8d1dd\nparent da8db1d3199f74e6eb60f955e3f8da8a5731c161\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1563014554 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1564585086 +0300\n\nRemove fallbacks for pre-1.53.0 Boost\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb8b557afedad0f721d339820bd3032d55fe127f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cb8b557afedad0f721d339820bd3032d55fe127f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb8b557afedad0f721d339820bd3032d55fe127f/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "da8db1d3199f74e6eb60f955e3f8da8a5731c161",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da8db1d3199f74e6eb60f955e3f8da8a5731c161",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/da8db1d3199f74e6eb60f955e3f8da8a5731c161"
      }
    ],
    "stats": {
      "total": 123,
      "additions": 4,
      "deletions": 119
    },
    "files": [
      {
        "sha": "ad76e1872515294b4efc57b08870c7d0d6e5f7af",
        "filename": "build_msvc/bitcoin_config.h",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb8b557afedad0f721d339820bd3032d55fe127f/build_msvc/bitcoin_config.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb8b557afedad0f721d339820bd3032d55fe127f/build_msvc/bitcoin_config.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bitcoin_config.h?ref=cb8b557afedad0f721d339820bd3032d55fe127f",
        "patch": "@@ -330,12 +330,6 @@\n /* Define if the visibility attribute is supported. */\n #define HAVE_VISIBILITY_ATTRIBUTE 1\n \n-/* Define this symbol if boost sleep works */\n-/* #undef HAVE_WORKING_BOOST_SLEEP */\n-\n-/* Define this symbol if boost sleep_for works */\n-#define HAVE_WORKING_BOOST_SLEEP_FOR 1\n-\n /* Define to the sub-directory where libtool stores uninstalled libraries. */\n #define LT_OBJDIR \".libs/\"\n "
      },
      {
        "sha": "7cf6975680b98e6e0442a95a92b79c42f240200d",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 2,
        "deletions": 74,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb8b557afedad0f721d339820bd3032d55fe127f/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb8b557afedad0f721d339820bd3032d55fe127f/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=cb8b557afedad0f721d339820bd3032d55fe127f",
        "patch": "@@ -1042,25 +1042,6 @@ dnl counter implementations. In 1.63 and later the std::atomic approach is defau\n m4_pattern_allow(DBOOST_AC_USE_STD_ATOMIC) dnl otherwise it's treated like a macro\n BOOST_CPPFLAGS=\"-DBOOST_SP_USE_STD_ATOMIC -DBOOST_AC_USE_STD_ATOMIC $BOOST_CPPFLAGS\"\n \n-if test x$use_reduce_exports = xyes; then\n-  AC_MSG_CHECKING([for working boost reduced exports])\n-  TEMP_CPPFLAGS=\"$CPPFLAGS\"\n-  CPPFLAGS=\"$BOOST_CPPFLAGS $CPPFLAGS\"\n-  AC_PREPROC_IFELSE([AC_LANG_PROGRAM([[\n-      @%:@include <boost/version.hpp>\n-    ]], [[\n-      #if BOOST_VERSION >= 104900\n-      // Everything is okay\n-      #else\n-      #  error Boost version is too old\n-      #endif\n-    ]])],[\n-      AC_MSG_RESULT(yes)\n-    ],[\n-    AC_MSG_ERROR([boost versions < 1.49 are known to be broken with reduced exports. Use --disable-reduce-exports.])\n-  ])\n-  CPPFLAGS=\"$TEMP_CPPFLAGS\"\n-fi\n fi\n \n if test x$use_reduce_exports = xyes; then\n@@ -1113,7 +1094,6 @@ dnl When building against that installed version using c++11, the headers pick u\n dnl on the native c++11 scoped enum support and enable it, however it will fail to\n dnl link. This can be worked around by disabling c++11 scoped enums if linking will\n dnl fail.\n-dnl BOOST_NO_SCOPED_ENUMS was changed to BOOST_NO_CXX11_SCOPED_ENUMS in 1.51.\n \n TEMP_LIBS=\"$LIBS\"\n LIBS=\"$BOOST_LIBS $LIBS\"\n@@ -1123,8 +1103,7 @@ AC_MSG_CHECKING([for mismatched boost c++11 scoped enums])\n AC_LINK_IFELSE([AC_LANG_PROGRAM([[\n   #include <boost/config.hpp>\n   #include <boost/version.hpp>\n-  #if !defined(BOOST_NO_SCOPED_ENUMS) && !defined(BOOST_NO_CXX11_SCOPED_ENUMS) && BOOST_VERSION < 105700\n-  #define BOOST_NO_SCOPED_ENUMS\n+  #if !defined(BOOST_NO_CXX11_SCOPED_ENUMS) && BOOST_VERSION < 105700\n   #define BOOST_NO_CXX11_SCOPED_ENUMS\n   #define CHECK\n   #endif\n@@ -1136,61 +1115,10 @@ AC_LINK_IFELSE([AC_LANG_PROGRAM([[\n     choke;\n   #endif\n   ]])],\n-  [AC_MSG_RESULT(mismatched); BOOST_CPPFLAGS=\"$BOOST_CPPFLAGS -DBOOST_NO_SCOPED_ENUMS -DBOOST_NO_CXX11_SCOPED_ENUMS\"], [AC_MSG_RESULT(ok)])\n-LIBS=\"$TEMP_LIBS\"\n-CPPFLAGS=\"$TEMP_CPPFLAGS\"\n-\n-dnl Boost >= 1.50 uses sleep_for rather than the now-deprecated sleep, however\n-dnl it was broken from 1.50 to 1.52 when backed by nanosleep. Use sleep_for if\n-dnl a working version is available, else fall back to sleep. sleep was removed\n-dnl after 1.56.\n-dnl If neither is available, abort.\n-TEMP_LIBS=\"$LIBS\"\n-LIBS=\"$BOOST_LIBS $LIBS\"\n-TEMP_CPPFLAGS=\"$CPPFLAGS\"\n-CPPFLAGS=\"$CPPFLAGS $BOOST_CPPFLAGS\"\n-AC_LINK_IFELSE([AC_LANG_PROGRAM([[\n-  #include <boost/thread/thread.hpp>\n-  #include <boost/version.hpp>\n-  ]],[[\n-  #if BOOST_VERSION >= 105000 && (!defined(BOOST_HAS_NANOSLEEP) || BOOST_VERSION >= 105200)\n-      boost::this_thread::sleep_for(boost::chrono::milliseconds(0));\n-  #else\n-   choke me\n-  #endif\n-  ]])],\n-  [boost_sleep=yes;\n-     AC_DEFINE(HAVE_WORKING_BOOST_SLEEP_FOR, 1, [Define this symbol if boost sleep_for works])],\n-  [boost_sleep=no])\n+  [AC_MSG_RESULT(mismatched); BOOST_CPPFLAGS=\"$BOOST_CPPFLAGS -DBOOST_NO_CXX11_SCOPED_ENUMS\"], [AC_MSG_RESULT(ok)])\n LIBS=\"$TEMP_LIBS\"\n CPPFLAGS=\"$TEMP_CPPFLAGS\"\n \n-if test x$boost_sleep != xyes; then\n-TEMP_LIBS=\"$LIBS\"\n-LIBS=\"$BOOST_LIBS $LIBS\"\n-TEMP_CPPFLAGS=\"$CPPFLAGS\"\n-CPPFLAGS=\"$CPPFLAGS $BOOST_CPPFLAGS\"\n-AC_LINK_IFELSE([AC_LANG_PROGRAM([[\n-  #include <boost/version.hpp>\n-  #include <boost/thread.hpp>\n-  #include <boost/date_time/posix_time/posix_time_types.hpp>\n-  ]],[[\n-  #if BOOST_VERSION <= 105600\n-      boost::this_thread::sleep(boost::posix_time::milliseconds(0));\n-  #else\n-   choke me\n-  #endif\n-  ]])],\n-  [boost_sleep=yes; AC_DEFINE(HAVE_WORKING_BOOST_SLEEP, 1, [Define this symbol if boost sleep works])],\n-  [boost_sleep=no])\n-LIBS=\"$TEMP_LIBS\"\n-CPPFLAGS=\"$TEMP_CPPFLAGS\"\n-fi\n-\n-if test x$boost_sleep != xyes; then\n-  AC_MSG_ERROR(No working boost sleep implementation found.)\n-fi\n-\n fi\n \n if test x$use_pkgconfig = xyes; then"
      },
      {
        "sha": "032ef0a97da201006caea0942e5557ed4e5af8f9",
        "filename": "src/scheduler.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 18,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb8b557afedad0f721d339820bd3032d55fe127f/src/scheduler.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb8b557afedad0f721d339820bd3032d55fe127f/src/scheduler.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scheduler.cpp?ref=cb8b557afedad0f721d339820bd3032d55fe127f",
        "patch": "@@ -19,16 +19,6 @@ CScheduler::~CScheduler()\n     assert(nThreadsServicingQueue == 0);\n }\n \n-\n-#if BOOST_VERSION < 105000\n-static boost::system_time toPosixTime(const boost::chrono::system_clock::time_point& t)\n-{\n-    // Creating the posix_time using from_time_t loses sub-second precision. So rather than exporting the time_point to time_t,\n-    // start with a posix_time at the epoch (0) and add the milliseconds that have passed since then.\n-    return boost::posix_time::from_time_t(0) + boost::posix_time::milliseconds(boost::chrono::duration_cast<boost::chrono::milliseconds>(t.time_since_epoch()).count());\n-}\n-#endif\n-\n void CScheduler::serviceQueue()\n {\n     boost::unique_lock<boost::mutex> lock(newTaskMutex);\n@@ -52,21 +42,14 @@ void CScheduler::serviceQueue()\n             // Wait until either there is a new task, or until\n             // the time of the first item on the queue:\n \n-// wait_until needs boost 1.50 or later; older versions have timed_wait:\n-#if BOOST_VERSION < 105000\n-            while (!shouldStop() && !taskQueue.empty() &&\n-                   newTaskScheduled.timed_wait(lock, toPosixTime(taskQueue.begin()->first))) {\n-                // Keep waiting until timeout\n-            }\n-#else\n             // Some boost versions have a conflicting overload of wait_until that returns void.\n             // Explicitly use a template here to avoid hitting that overload.\n             while (!shouldStop() && !taskQueue.empty()) {\n                 boost::chrono::system_clock::time_point timeToWaitFor = taskQueue.begin()->first;\n                 if (newTaskScheduled.wait_until<>(lock, timeToWaitFor) == boost::cv_status::timeout)\n                     break; // Exit loop after timeout, it means we reached the time of the event\n             }\n-#endif\n+\n             // If there are multiple threads, the queue can empty while we're waiting (another\n             // thread may service the task we were waiting on).\n             if (shouldStop() || taskQueue.empty())"
      },
      {
        "sha": "c56be36d66c74b133e4e504b86b4940913efcefc",
        "filename": "src/test/scheduler_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb8b557afedad0f721d339820bd3032d55fe127f/src/test/scheduler_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb8b557afedad0f721d339820bd3032d55fe127f/src/test/scheduler_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/scheduler_tests.cpp?ref=cb8b557afedad0f721d339820bd3032d55fe127f",
        "patch": "@@ -27,14 +27,7 @@ static void microTask(CScheduler& s, boost::mutex& mutex, int& counter, int delt\n \n static void MicroSleep(uint64_t n)\n {\n-#if defined(HAVE_WORKING_BOOST_SLEEP_FOR)\n     boost::this_thread::sleep_for(boost::chrono::microseconds(n));\n-#elif defined(HAVE_WORKING_BOOST_SLEEP)\n-    boost::this_thread::sleep(boost::posix_time::microseconds(n));\n-#else\n-    //should never get here\n-    #error missing boost sleep implementation\n-#endif\n }\n \n BOOST_AUTO_TEST_CASE(manythreads)"
      },
      {
        "sha": "a9866da1344ecd355aa8fb593217bd6c992223ad",
        "filename": "src/util/time.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 13,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb8b557afedad0f721d339820bd3032d55fe127f/src/util/time.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb8b557afedad0f721d339820bd3032d55fe127f/src/util/time.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/time.cpp?ref=cb8b557afedad0f721d339820bd3032d55fe127f",
        "patch": "@@ -74,20 +74,7 @@ int64_t GetSystemTimeInSeconds()\n \n void MilliSleep(int64_t n)\n {\n-\n-/**\n- * Boost's sleep_for was uninterruptible when backed by nanosleep from 1.50\n- * until fixed in 1.52. Use the deprecated sleep method for the broken case.\n- * See: https://svn.boost.org/trac/boost/ticket/7238\n- */\n-#if defined(HAVE_WORKING_BOOST_SLEEP_FOR)\n     boost::this_thread::sleep_for(boost::chrono::milliseconds(n));\n-#elif defined(HAVE_WORKING_BOOST_SLEEP)\n-    boost::this_thread::sleep(boost::posix_time::milliseconds(n));\n-#else\n-//should never get here\n-#error missing boost sleep implementation\n-#endif\n }\n \n std::string FormatISO8601DateTime(int64_t nTime) {"
      },
      {
        "sha": "585cc2b1a15e00b9b8df4eb8636093a655e77034",
        "filename": "test/lint/extended-lint-cppcheck.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb8b557afedad0f721d339820bd3032d55fe127f/test/lint/extended-lint-cppcheck.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb8b557afedad0f721d339820bd3032d55fe127f/test/lint/extended-lint-cppcheck.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/extended-lint-cppcheck.sh?ref=cb8b557afedad0f721d339820bd3032d55fe127f",
        "patch": "@@ -66,7 +66,7 @@ function join_array {\n ENABLED_CHECKS_REGEXP=$(join_array \"|\" \"${ENABLED_CHECKS[@]}\")\n IGNORED_WARNINGS_REGEXP=$(join_array \"|\" \"${IGNORED_WARNINGS[@]}\")\n WARNINGS=$(git ls-files -- \"*.cpp\" \"*.h\" \":(exclude)src/leveldb/\" \":(exclude)src/secp256k1/\" \":(exclude)src/univalue/\" | \\\n-    xargs cppcheck --enable=all -j \"$(getconf _NPROCESSORS_ONLN)\" --language=c++ --std=c++11 --template=gcc -D__cplusplus -DCLIENT_VERSION_BUILD -DCLIENT_VERSION_IS_RELEASE -DCLIENT_VERSION_MAJOR -DCLIENT_VERSION_MINOR -DCLIENT_VERSION_REVISION -DCOPYRIGHT_YEAR -DDEBUG -DHAVE_WORKING_BOOST_SLEEP_FOR -I src/ -q 2>&1 | sort -u | \\\n+    xargs cppcheck --enable=all -j \"$(getconf _NPROCESSORS_ONLN)\" --language=c++ --std=c++11 --template=gcc -D__cplusplus -DCLIENT_VERSION_BUILD -DCLIENT_VERSION_IS_RELEASE -DCLIENT_VERSION_MAJOR -DCLIENT_VERSION_MINOR -DCLIENT_VERSION_REVISION -DCOPYRIGHT_YEAR -DDEBUG -I src/ -q 2>&1 | sort -u | \\\n     grep -E \"${ENABLED_CHECKS_REGEXP}\" | \\\n     grep -vE \"${IGNORED_WARNINGS_REGEXP}\")\n if [[ ${WARNINGS} != \"\" ]]; then"
      }
    ]
  }
]