[
  {
    "sha": "d58a805d931b71afb0a80af7050b36b57cf2bfc9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNThhODA1ZDkzMWI3MWFmYjBhODBhZjcwNTBiMzZiNTdjZjJiZmM5",
    "commit": {
      "author": {
        "name": "Michael R. Torres",
        "email": "mic.ric.tor@gmail.com",
        "date": "2015-04-16T05:52:51Z"
      },
      "committer": {
        "name": "Michael R. Torres",
        "email": "mic.ric.tor@gmail.com",
        "date": "2015-04-16T05:52:51Z"
      },
      "message": "Implement memory locks on passphrase input",
      "tree": {
        "sha": "8bd086c758bb072b17dc37e92ed3d6e4a4aedd15",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8bd086c758bb072b17dc37e92ed3d6e4a4aedd15"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d58a805d931b71afb0a80af7050b36b57cf2bfc9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d58a805d931b71afb0a80af7050b36b57cf2bfc9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d58a805d931b71afb0a80af7050b36b57cf2bfc9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d58a805d931b71afb0a80af7050b36b57cf2bfc9/comments",
    "author": {
      "login": "micrictor",
      "id": 6692889,
      "node_id": "MDQ6VXNlcjY2OTI4ODk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6692889?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/micrictor",
      "html_url": "https://github.com/micrictor",
      "followers_url": "https://api.github.com/users/micrictor/followers",
      "following_url": "https://api.github.com/users/micrictor/following{/other_user}",
      "gists_url": "https://api.github.com/users/micrictor/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/micrictor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/micrictor/subscriptions",
      "organizations_url": "https://api.github.com/users/micrictor/orgs",
      "repos_url": "https://api.github.com/users/micrictor/repos",
      "events_url": "https://api.github.com/users/micrictor/events{/privacy}",
      "received_events_url": "https://api.github.com/users/micrictor/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "micrictor",
      "id": 6692889,
      "node_id": "MDQ6VXNlcjY2OTI4ODk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6692889?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/micrictor",
      "html_url": "https://github.com/micrictor",
      "followers_url": "https://api.github.com/users/micrictor/followers",
      "following_url": "https://api.github.com/users/micrictor/following{/other_user}",
      "gists_url": "https://api.github.com/users/micrictor/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/micrictor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/micrictor/subscriptions",
      "organizations_url": "https://api.github.com/users/micrictor/orgs",
      "repos_url": "https://api.github.com/users/micrictor/repos",
      "events_url": "https://api.github.com/users/micrictor/events{/privacy}",
      "received_events_url": "https://api.github.com/users/micrictor/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2dc679d22f821d26a9f8a7eef6d095ef21d1b27c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2dc679d22f821d26a9f8a7eef6d095ef21d1b27c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2dc679d22f821d26a9f8a7eef6d095ef21d1b27c"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 16,
      "deletions": 11
    },
    "files": [
      {
        "sha": "4d0dc2e8c0ee343aab59d8ccb2fe1016480670ef",
        "filename": "src/qt/askpassphrasedialog.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 2,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d58a805d931b71afb0a80af7050b36b57cf2bfc9/src/qt/askpassphrasedialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d58a805d931b71afb0a80af7050b36b57cf2bfc9/src/qt/askpassphrasedialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/askpassphrasedialog.cpp?ref=d58a805d931b71afb0a80af7050b36b57cf2bfc9",
        "patch": "@@ -36,6 +36,11 @@ AskPassphraseDialog::AskPassphraseDialog(Mode mode, QWidget *parent) :\n     ui->passEdit2->installEventFilter(this);\n     ui->passEdit3->installEventFilter(this);\n \n+    // Lock the memory\n+    LockObject(ui->passEdit1->text());\n+    LockObject(ui->passEdit2->text());\n+    LockObject(ui->passEdit3->text());\n+\n     switch(mode)\n     {\n         case Encrypt: // Ask passphrase x2\n@@ -77,6 +82,10 @@ AskPassphraseDialog::~AskPassphraseDialog()\n     ui->passEdit1->setText(QString(\" \").repeated(ui->passEdit1->text().size()));\n     ui->passEdit2->setText(QString(\" \").repeated(ui->passEdit2->text().size()));\n     ui->passEdit3->setText(QString(\" \").repeated(ui->passEdit3->text().size()));\n+    // Don't cleanse the memory, QString's destructor doesn't like that\n+    UnlockObject(ui->passEdit1->text(), false);\n+    UnlockObject(ui->passEdit2->text(), false);\n+    UnlockObject(ui->passEdit3->text(), false);\n     delete ui;\n }\n \n@@ -93,8 +102,7 @@ void AskPassphraseDialog::accept()\n     oldpass.reserve(MAX_PASSPHRASE_SIZE);\n     newpass1.reserve(MAX_PASSPHRASE_SIZE);\n     newpass2.reserve(MAX_PASSPHRASE_SIZE);\n-    // TODO: get rid of this .c_str() by implementing SecureString::operator=(std::string)\n-    // Alternately, find a way to make this input mlock()'d to begin with.\n+\n     oldpass.assign(ui->passEdit1->text().toStdString().c_str());\n     newpass1.assign(ui->passEdit2->text().toStdString().c_str());\n     newpass2.assign(ui->passEdit3->text().toStdString().c_str());"
      },
      {
        "sha": "34ae688b4cec06173a3742da2204cadc0d400541",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d58a805d931b71afb0a80af7050b36b57cf2bfc9/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d58a805d931b71afb0a80af7050b36b57cf2bfc9/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=d58a805d931b71afb0a80af7050b36b57cf2bfc9",
        "patch": "@@ -872,8 +872,11 @@ static Object JSONRPCExecOne(const Value& req)\n     JSONRequest jreq;\n     try {\n         jreq.parse(req);\n+        LockObject(jreq.params);\n \n         Value result = tableRPC.execute(jreq.strMethod, jreq.params);\n+        UnlockObject(jreq.params);\n+        \n         rpc_result = JSONRPCReplyObj(result, Value::null, jreq.id);\n     }\n     catch (const Object& objError)"
      },
      {
        "sha": "462f1d8b882b791435fecebb3166a0c5d4da9378",
        "filename": "src/support/pagelocker.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d58a805d931b71afb0a80af7050b36b57cf2bfc9/src/support/pagelocker.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d58a805d931b71afb0a80af7050b36b57cf2bfc9/src/support/pagelocker.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/support/pagelocker.h?ref=d58a805d931b71afb0a80af7050b36b57cf2bfc9",
        "patch": "@@ -169,9 +169,10 @@ void LockObject(const T& t)\n }\n \n template <typename T>\n-void UnlockObject(const T& t)\n+void UnlockObject(const T& t, bool cleanse = true)\n {\n-    memory_cleanse((void*)(&t), sizeof(T));\n+    if(cleanse)\n+        memory_cleanse((void*)(&t), sizeof(T));\n     LockedPageManager::Instance().UnlockRange((void*)(&t), sizeof(T));\n }\n "
      },
      {
        "sha": "8e9d2a2ad50b03902bc5014a61b1884096466dc4",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d58a805d931b71afb0a80af7050b36b57cf2bfc9/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d58a805d931b71afb0a80af7050b36b57cf2bfc9/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=d58a805d931b71afb0a80af7050b36b57cf2bfc9",
        "patch": "@@ -1746,11 +1746,8 @@ Value walletpassphrase(const Array& params, bool fHelp)\n     if (!pwalletMain->IsCrypted())\n         throw JSONRPCError(RPC_WALLET_WRONG_ENC_STATE, \"Error: running with an unencrypted wallet, but walletpassphrase was called.\");\n \n-    // Note that the walletpassphrase is stored in params[0] which is not mlock()ed\n     SecureString strWalletPass;\n     strWalletPass.reserve(100);\n-    // TODO: get rid of this .c_str() by implementing SecureString::operator=(std::string)\n-    // Alternately, find a way to make params[0] mlock()'d to begin with.\n     strWalletPass = params[0].get_str().c_str();\n \n     if (strWalletPass.length() > 0)\n@@ -1795,8 +1792,6 @@ Value walletpassphrasechange(const Array& params, bool fHelp)\n     if (!pwalletMain->IsCrypted())\n         throw JSONRPCError(RPC_WALLET_WRONG_ENC_STATE, \"Error: running with an unencrypted wallet, but walletpassphrasechange was called.\");\n \n-    // TODO: get rid of these .c_str() calls by implementing SecureString::operator=(std::string)\n-    // Alternately, find a way to make params[0] mlock()'d to begin with.\n     SecureString strOldWalletPass;\n     strOldWalletPass.reserve(100);\n     strOldWalletPass = params[0].get_str().c_str();\n@@ -1886,8 +1881,6 @@ Value encryptwallet(const Array& params, bool fHelp)\n     if (pwalletMain->IsCrypted())\n         throw JSONRPCError(RPC_WALLET_WRONG_ENC_STATE, \"Error: running with an encrypted wallet, but encryptwallet was called.\");\n \n-    // TODO: get rid of this .c_str() by implementing SecureString::operator=(std::string)\n-    // Alternately, find a way to make params[0] mlock()'d to begin with.\n     SecureString strWalletPass;\n     strWalletPass.reserve(100);\n     strWalletPass = params[0].get_str().c_str();"
      }
    ]
  }
]