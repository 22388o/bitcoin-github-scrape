[
  {
    "sha": "cf82a9e704f56d245cf512d76ba9d0e6b178f3b0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZjgyYTllNzA0ZjU2ZDI0NWNmNTEyZDc2YmE5ZDBlNmIxNzhmM2Iw",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-07-10T18:29:06Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-07-18T15:20:47Z"
      },
      "message": "Do not allow users to get keys from keypool without reserving them\n\nfundrawtransaction allows users to add a change output and then\nnot have it removed from keypool. While it would be nice to have\nusers follow the normal CreateTransaction/CommitTransaction process\nwe use internally, there isnt much benefit in exposing this option,\nespecially with HD wallets, while there is ample room for users to\nmisunderstand or misuse this option.\n\nThis could be particularly nasty in some use-cases (especially\npre-HD-split) - eg a user might fundrawtransaction, then call\ngetnewaddress, hand out the address for someone to pay them, then\nsendrawtransaction. This may result in the user thinking they have\nreceived payment, even though it was really just their own change!\n\nThis could obviously result in needless key-reuse.",
      "tree": {
        "sha": "fa413cbf28fae3f278a28a6ef72582930b9d50c6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fa413cbf28fae3f278a28a6ef72582930b9d50c6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cf82a9e704f56d245cf512d76ba9d0e6b178f3b0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf82a9e704f56d245cf512d76ba9d0e6b178f3b0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cf82a9e704f56d245cf512d76ba9d0e6b178f3b0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf82a9e704f56d245cf512d76ba9d0e6b178f3b0/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7b6e8bc4424006119dc537699c8b3b3121e0b3c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b6e8bc4424006119dc537699c8b3b3121e0b3c3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7b6e8bc4424006119dc537699c8b3b3121e0b3c3"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 13,
      "deletions": 27
    },
    "files": [
      {
        "sha": "26fcfea95cecb663b115a1913e31acec7687a6b1",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 7,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf82a9e704f56d245cf512d76ba9d0e6b178f3b0/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf82a9e704f56d245cf512d76ba9d0e6b178f3b0/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=cf82a9e704f56d245cf512d76ba9d0e6b178f3b0",
        "patch": "@@ -2693,7 +2693,6 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n                             \"     \\\"changePosition\\\"         (numeric, optional, default random) The index of the change output\\n\"\n                             \"     \\\"includeWatching\\\"        (boolean, optional, default false) Also select inputs which are watch only\\n\"\n                             \"     \\\"lockUnspents\\\"           (boolean, optional, default false) Lock selected unspent outputs\\n\"\n-                            \"     \\\"reserveChangeKey\\\"       (boolean, optional, default true) Reserves the change output key from the keypool\\n\"\n                             \"     \\\"feeRate\\\"                (numeric, optional, default not set: makes wallet determine the fee) Set a specific feerate (\" + CURRENCY_UNIT + \" per KB)\\n\"\n                             \"     \\\"subtractFeeFromOutputs\\\" (array, optional) A json array of integers.\\n\"\n                             \"                              The fee will be equally deducted from the amount of each specified output.\\n\"\n@@ -2732,7 +2731,6 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     CCoinControl coinControl;\n     int changePosition = -1;\n     bool lockUnspents = false;\n-    bool reserveChangeKey = true;\n     UniValue subtractFeeFromOutputs;\n     std::set<int> setSubtractFeeFromOutputs;\n \n@@ -2752,7 +2750,7 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n                 {\"changePosition\", UniValueType(UniValue::VNUM)},\n                 {\"includeWatching\", UniValueType(UniValue::VBOOL)},\n                 {\"lockUnspents\", UniValueType(UniValue::VBOOL)},\n-                {\"reserveChangeKey\", UniValueType(UniValue::VBOOL)},\n+                {\"reserveChangeKey\", UniValueType(UniValue::VBOOL)}, // DEPRECATED (and ignored), should be removed in 0.16 or so.\n                 {\"feeRate\", UniValueType()}, // will be checked below\n                 {\"subtractFeeFromOutputs\", UniValueType(UniValue::VARR)},\n                 {\"replaceable\", UniValueType(UniValue::VBOOL)},\n@@ -2779,9 +2777,6 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n         if (options.exists(\"lockUnspents\"))\n             lockUnspents = options[\"lockUnspents\"].get_bool();\n \n-        if (options.exists(\"reserveChangeKey\"))\n-            reserveChangeKey = options[\"reserveChangeKey\"].get_bool();\n-\n         if (options.exists(\"feeRate\"))\n         {\n             coinControl.m_feerate = CFeeRate(AmountFromValue(options[\"feeRate\"]));\n@@ -2830,7 +2825,7 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     CAmount nFeeOut;\n     std::string strFailReason;\n \n-    if (!pwallet->FundTransaction(tx, nFeeOut, changePosition, strFailReason, lockUnspents, setSubtractFeeFromOutputs, coinControl, reserveChangeKey)) {\n+    if (!pwallet->FundTransaction(tx, nFeeOut, changePosition, strFailReason, lockUnspents, setSubtractFeeFromOutputs, coinControl)) {\n         throw JSONRPCError(RPC_WALLET_ERROR, strFailReason);\n     }\n "
      },
      {
        "sha": "c56fd05d7ed0d377d848e136797a17832627c22c",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf82a9e704f56d245cf512d76ba9d0e6b178f3b0/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf82a9e704f56d245cf512d76ba9d0e6b178f3b0/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=cf82a9e704f56d245cf512d76ba9d0e6b178f3b0",
        "patch": "@@ -2471,7 +2471,7 @@ bool CWallet::SignTransaction(CMutableTransaction &tx)\n     return true;\n }\n \n-bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nChangePosInOut, std::string& strFailReason, bool lockUnspents, const std::set<int>& setSubtractFeeFromOutputs, CCoinControl coinControl, bool keepReserveKey)\n+bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nChangePosInOut, std::string& strFailReason, bool lockUnspents, const std::set<int>& setSubtractFeeFromOutputs, CCoinControl coinControl)\n {\n     std::vector<CRecipient> vecSend;\n \n@@ -2493,8 +2493,13 @@ bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nC\n     if (!CreateTransaction(vecSend, wtx, reservekey, nFeeRet, nChangePosInOut, strFailReason, coinControl, false)) {\n         return false;\n     }\n-    if (nChangePosInOut != -1)\n+\n+    if (nChangePosInOut != -1) {\n         tx.vout.insert(tx.vout.begin() + nChangePosInOut, wtx.tx->vout[nChangePosInOut]);\n+        // we dont have the normal Create/Commit cycle, and dont want to risk reusing change,\n+        // so just remove the key from the keypool here.\n+        reservekey.KeepKey();\n+    }\n \n     // Copy output sizes from new transaction; they may have had the fee subtracted from them\n     for (unsigned int idx = 0; idx < tx.vout.size(); idx++)\n@@ -2515,9 +2520,6 @@ bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nC\n         }\n     }\n \n-    // optionally keep the change output key\n-    if (keepReserveKey)\n-        reservekey.KeepKey();\n \n     return true;\n }"
      },
      {
        "sha": "bf09b040f6de3c4209d3f455ec2eb27c218a754b",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf82a9e704f56d245cf512d76ba9d0e6b178f3b0/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf82a9e704f56d245cf512d76ba9d0e6b178f3b0/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=cf82a9e704f56d245cf512d76ba9d0e6b178f3b0",
        "patch": "@@ -949,7 +949,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      * Insert additional inputs into the transaction by\n      * calling CreateTransaction();\n      */\n-    bool FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nChangePosInOut, std::string& strFailReason, bool lockUnspents, const std::set<int>& setSubtractFeeFromOutputs, CCoinControl, bool keepReserveKey = true);\n+    bool FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nChangePosInOut, std::string& strFailReason, bool lockUnspents, const std::set<int>& setSubtractFeeFromOutputs, CCoinControl);\n     bool SignTransaction(CMutableTransaction& tx);\n \n     /**"
      },
      {
        "sha": "e52e773918b01253eba4acbe2791a8eb38bd8633",
        "filename": "test/functional/fundrawtransaction.py",
        "status": "modified",
        "additions": 3,
        "deletions": 14,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf82a9e704f56d245cf512d76ba9d0e6b178f3b0/test/functional/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf82a9e704f56d245cf512d76ba9d0e6b178f3b0/test/functional/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/fundrawtransaction.py?ref=cf82a9e704f56d245cf512d76ba9d0e6b178f3b0",
        "patch": "@@ -636,20 +636,9 @@ def run_test(self):\n         assert_fee_amount(result2['fee'], count_bytes(result2['hex']), 2 * result_fee_rate)\n         assert_fee_amount(result3['fee'], count_bytes(result3['hex']), 10 * result_fee_rate)\n \n-        #############################\n-        # Test address reuse option #\n-        #############################\n-\n-        result3 = self.nodes[3].fundrawtransaction(rawtx, {\"reserveChangeKey\": False})\n-        res_dec = self.nodes[0].decoderawtransaction(result3[\"hex\"])\n-        changeaddress = \"\"\n-        for out in res_dec['vout']:\n-            if out['value'] > 1.0:\n-                changeaddress += out['scriptPubKey']['addresses'][0]\n-        assert(changeaddress != \"\")\n-        nextaddr = self.nodes[3].getrawchangeaddress()\n-        # frt should not have removed the key from the keypool\n-        assert(changeaddress == nextaddr)\n+        ################################\n+        # Test no address reuse occurs #\n+        ################################\n \n         result3 = self.nodes[3].fundrawtransaction(rawtx)\n         res_dec = self.nodes[0].decoderawtransaction(result3[\"hex\"])"
      }
    ]
  }
]