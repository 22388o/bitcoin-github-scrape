[
  {
    "sha": "a2aca207b1ad00ec05d7533dbd75bbff830e1d75",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMmFjYTIwN2IxYWQwMGVjMDVkNzUzM2RiZDc1YmJmZjgzMGUxZDc1",
    "commit": {
      "author": {
        "name": "Sriram",
        "email": "sriramdvt@gmail.com",
        "date": "2021-07-14T09:48:25Z"
      },
      "committer": {
        "name": "Sriram",
        "email": "sriramdvt@gmail.com",
        "date": "2021-07-14T13:15:53Z"
      },
      "message": "Move implementations of non-template fuzz helpers\n\nMoved implementations of `ConsumeTxMemPoolEntry`, `ContainsSpentInput`, `ConsumeNetAddr`, and the methods(open, read, write, seek, close) of FuzzedFileProvider from test/fuzz/util.h to test/fuzz/util.cpp.",
      "tree": {
        "sha": "9e09633afb1fea890b4bc994aae20d91dcd4f442",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9e09633afb1fea890b4bc994aae20d91dcd4f442"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a2aca207b1ad00ec05d7533dbd75bbff830e1d75",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2aca207b1ad00ec05d7533dbd75bbff830e1d75",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a2aca207b1ad00ec05d7533dbd75bbff830e1d75",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2aca207b1ad00ec05d7533dbd75bbff830e1d75/comments",
    "author": {
      "login": "sriramdvt",
      "id": 41079588,
      "node_id": "MDQ6VXNlcjQxMDc5NTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/41079588?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sriramdvt",
      "html_url": "https://github.com/sriramdvt",
      "followers_url": "https://api.github.com/users/sriramdvt/followers",
      "following_url": "https://api.github.com/users/sriramdvt/following{/other_user}",
      "gists_url": "https://api.github.com/users/sriramdvt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sriramdvt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sriramdvt/subscriptions",
      "organizations_url": "https://api.github.com/users/sriramdvt/orgs",
      "repos_url": "https://api.github.com/users/sriramdvt/repos",
      "events_url": "https://api.github.com/users/sriramdvt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sriramdvt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sriramdvt",
      "id": 41079588,
      "node_id": "MDQ6VXNlcjQxMDc5NTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/41079588?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sriramdvt",
      "html_url": "https://github.com/sriramdvt",
      "followers_url": "https://api.github.com/users/sriramdvt/followers",
      "following_url": "https://api.github.com/users/sriramdvt/following{/other_user}",
      "gists_url": "https://api.github.com/users/sriramdvt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sriramdvt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sriramdvt/subscriptions",
      "organizations_url": "https://api.github.com/users/sriramdvt/orgs",
      "repos_url": "https://api.github.com/users/sriramdvt/repos",
      "events_url": "https://api.github.com/users/sriramdvt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sriramdvt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d8f1e1327f9c2f9fcc804468f6a981580acdf30a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8f1e1327f9c2f9fcc804468f6a981580acdf30a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d8f1e1327f9c2f9fcc804468f6a981580acdf30a"
      }
    ],
    "stats": {
      "total": 310,
      "additions": 163,
      "deletions": 147
    },
    "files": [
      {
        "sha": "0d87f687d3a3f6f7f38eded08232d07ed6fb0ae6",
        "filename": "src/test/fuzz/util.cpp",
        "status": "modified",
        "additions": 155,
        "deletions": 0,
        "changes": 155,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a2aca207b1ad00ec05d7533dbd75bbff830e1d75/src/test/fuzz/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a2aca207b1ad00ec05d7533dbd75bbff830e1d75/src/test/fuzz/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.cpp?ref=a2aca207b1ad00ec05d7533dbd75bbff830e1d75",
        "patch": "@@ -343,3 +343,158 @@ CTxDestination ConsumeTxDestination(FuzzedDataProvider& fuzzed_data_provider) no\n     Assert(call_size == std::variant_size_v<CTxDestination>);\n     return tx_destination;\n }\n+\n+CTxMemPoolEntry ConsumeTxMemPoolEntry(FuzzedDataProvider& fuzzed_data_provider, const CTransaction& tx) noexcept\n+{\n+    // Avoid:\n+    // policy/feerate.cpp:28:34: runtime error: signed integer overflow: 34873208148477500 * 1000 cannot be represented in type 'long'\n+    //\n+    // Reproduce using CFeeRate(348732081484775, 10).GetFeePerK()\n+    const CAmount fee = std::min<CAmount>(ConsumeMoney(fuzzed_data_provider), std::numeric_limits<CAmount>::max() / static_cast<CAmount>(100000));\n+    assert(MoneyRange(fee));\n+    const int64_t time = fuzzed_data_provider.ConsumeIntegral<int64_t>();\n+    const unsigned int entry_height = fuzzed_data_provider.ConsumeIntegral<unsigned int>();\n+    const bool spends_coinbase = fuzzed_data_provider.ConsumeBool();\n+    const unsigned int sig_op_cost = fuzzed_data_provider.ConsumeIntegralInRange<unsigned int>(0, MAX_BLOCK_SIGOPS_COST);\n+    return CTxMemPoolEntry{MakeTransactionRef(tx), fee, time, entry_height, spends_coinbase, sig_op_cost, {}};\n+}\n+\n+bool ContainsSpentInput(const CTransaction& tx, const CCoinsViewCache& inputs) noexcept\n+{\n+    for (const CTxIn& tx_in : tx.vin) {\n+        const Coin& coin = inputs.AccessCoin(tx_in.prevout);\n+        if (coin.IsSpent()) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n+\n+CNetAddr ConsumeNetAddr(FuzzedDataProvider& fuzzed_data_provider) noexcept\n+{\n+    const Network network = fuzzed_data_provider.PickValueInArray({Network::NET_IPV4, Network::NET_IPV6, Network::NET_INTERNAL, Network::NET_ONION});\n+    CNetAddr net_addr;\n+    if (network == Network::NET_IPV4) {\n+        in_addr v4_addr = {};\n+        v4_addr.s_addr = fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+        net_addr = CNetAddr{v4_addr};\n+    } else if (network == Network::NET_IPV6) {\n+        if (fuzzed_data_provider.remaining_bytes() >= 16) {\n+            in6_addr v6_addr = {};\n+            memcpy(v6_addr.s6_addr, fuzzed_data_provider.ConsumeBytes<uint8_t>(16).data(), 16);\n+            net_addr = CNetAddr{v6_addr, fuzzed_data_provider.ConsumeIntegral<uint32_t>()};\n+        }\n+    } else if (network == Network::NET_INTERNAL) {\n+        net_addr.SetInternal(fuzzed_data_provider.ConsumeBytesAsString(32));\n+    } else if (network == Network::NET_ONION) {\n+        net_addr.SetSpecial(fuzzed_data_provider.ConsumeBytesAsString(32));\n+    }\n+    return net_addr;\n+}\n+\n+FILE* FuzzedFileProvider::open()\n+{\n+    SetFuzzedErrNo(m_fuzzed_data_provider);\n+    if (m_fuzzed_data_provider.ConsumeBool()) {\n+        return nullptr;\n+    }\n+    std::string mode;\n+    CallOneOf(\n+        m_fuzzed_data_provider,\n+        [&] {\n+            mode = \"r\";\n+        },\n+        [&] {\n+            mode = \"r+\";\n+        },\n+        [&] {\n+            mode = \"w\";\n+        },\n+        [&] {\n+            mode = \"w+\";\n+        },\n+        [&] {\n+            mode = \"a\";\n+        },\n+        [&] {\n+            mode = \"a+\";\n+        });\n+#if defined _GNU_SOURCE && !defined __ANDROID__\n+    const cookie_io_functions_t io_hooks = {\n+        FuzzedFileProvider::read,\n+        FuzzedFileProvider::write,\n+        FuzzedFileProvider::seek,\n+        FuzzedFileProvider::close,\n+    };\n+    return fopencookie(this, mode.c_str(), io_hooks);\n+#else\n+    (void)mode;\n+    return nullptr;\n+#endif\n+}\n+\n+ssize_t FuzzedFileProvider::read(void* cookie, char* buf, size_t size)\n+{\n+    FuzzedFileProvider* fuzzed_file = (FuzzedFileProvider*)cookie;\n+    SetFuzzedErrNo(fuzzed_file->m_fuzzed_data_provider);\n+    if (buf == nullptr || size == 0 || fuzzed_file->m_fuzzed_data_provider.ConsumeBool()) {\n+        return fuzzed_file->m_fuzzed_data_provider.ConsumeBool() ? 0 : -1;\n+    }\n+    const std::vector<uint8_t> random_bytes = fuzzed_file->m_fuzzed_data_provider.ConsumeBytes<uint8_t>(size);\n+    if (random_bytes.empty()) {\n+        return 0;\n+    }\n+    std::memcpy(buf, random_bytes.data(), random_bytes.size());\n+    if (AdditionOverflow(fuzzed_file->m_offset, (int64_t)random_bytes.size())) {\n+        return fuzzed_file->m_fuzzed_data_provider.ConsumeBool() ? 0 : -1;\n+    }\n+    fuzzed_file->m_offset += random_bytes.size();\n+    return random_bytes.size();\n+}\n+\n+ssize_t FuzzedFileProvider::write(void* cookie, const char* buf, size_t size)\n+{\n+    FuzzedFileProvider* fuzzed_file = (FuzzedFileProvider*)cookie;\n+    SetFuzzedErrNo(fuzzed_file->m_fuzzed_data_provider);\n+    const ssize_t n = fuzzed_file->m_fuzzed_data_provider.ConsumeIntegralInRange<ssize_t>(0, size);\n+    if (AdditionOverflow(fuzzed_file->m_offset, (int64_t)n)) {\n+        return fuzzed_file->m_fuzzed_data_provider.ConsumeBool() ? 0 : -1;\n+    }\n+    fuzzed_file->m_offset += n;\n+    return n;\n+}\n+\n+int FuzzedFileProvider::seek(void* cookie, int64_t* offset, int whence)\n+{\n+    assert(whence == SEEK_SET || whence == SEEK_CUR || whence == SEEK_END);\n+    FuzzedFileProvider* fuzzed_file = (FuzzedFileProvider*)cookie;\n+    SetFuzzedErrNo(fuzzed_file->m_fuzzed_data_provider);\n+    int64_t new_offset = 0;\n+    if (whence == SEEK_SET) {\n+        new_offset = *offset;\n+    } else if (whence == SEEK_CUR) {\n+        if (AdditionOverflow(fuzzed_file->m_offset, *offset)) {\n+            return -1;\n+        }\n+        new_offset = fuzzed_file->m_offset + *offset;\n+    } else if (whence == SEEK_END) {\n+        const int64_t n = fuzzed_file->m_fuzzed_data_provider.ConsumeIntegralInRange<int64_t>(0, 4096);\n+        if (AdditionOverflow(n, *offset)) {\n+            return -1;\n+        }\n+        new_offset = n + *offset;\n+    }\n+    if (new_offset < 0) {\n+        return -1;\n+    }\n+    fuzzed_file->m_offset = new_offset;\n+    *offset = new_offset;\n+    return fuzzed_file->m_fuzzed_data_provider.ConsumeIntegralInRange<int>(-1, 0);\n+}\n+\n+int FuzzedFileProvider::close(void* cookie)\n+{\n+    FuzzedFileProvider* fuzzed_file = (FuzzedFileProvider*)cookie;\n+    SetFuzzedErrNo(fuzzed_file->m_fuzzed_data_provider);\n+    return fuzzed_file->m_fuzzed_data_provider.ConsumeIntegralInRange<int>(-1, 0);\n+}"
      },
      {
        "sha": "bb017b3497fb55f1d1539c28e94d91525d3b7352",
        "filename": "src/test/fuzz/util.h",
        "status": "modified",
        "additions": 8,
        "deletions": 147,
        "changes": 155,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a2aca207b1ad00ec05d7533dbd75bbff830e1d75/src/test/fuzz/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a2aca207b1ad00ec05d7533dbd75bbff830e1d75/src/test/fuzz/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.h?ref=a2aca207b1ad00ec05d7533dbd75bbff830e1d75",
        "patch": "@@ -164,20 +164,7 @@ template <typename WeakEnumType, size_t size>\n     return UintToArith256(ConsumeUInt256(fuzzed_data_provider));\n }\n \n-[[nodiscard]] inline CTxMemPoolEntry ConsumeTxMemPoolEntry(FuzzedDataProvider& fuzzed_data_provider, const CTransaction& tx) noexcept\n-{\n-    // Avoid:\n-    // policy/feerate.cpp:28:34: runtime error: signed integer overflow: 34873208148477500 * 1000 cannot be represented in type 'long'\n-    //\n-    // Reproduce using CFeeRate(348732081484775, 10).GetFeePerK()\n-    const CAmount fee = std::min<CAmount>(ConsumeMoney(fuzzed_data_provider), std::numeric_limits<CAmount>::max() / static_cast<CAmount>(100000));\n-    assert(MoneyRange(fee));\n-    const int64_t time = fuzzed_data_provider.ConsumeIntegral<int64_t>();\n-    const unsigned int entry_height = fuzzed_data_provider.ConsumeIntegral<unsigned int>();\n-    const bool spends_coinbase = fuzzed_data_provider.ConsumeBool();\n-    const unsigned int sig_op_cost = fuzzed_data_provider.ConsumeIntegralInRange<unsigned int>(0, MAX_BLOCK_SIGOPS_COST);\n-    return CTxMemPoolEntry{MakeTransactionRef(tx), fee, time, entry_height, spends_coinbase, sig_op_cost, {}};\n-}\n+[[nodiscard]] CTxMemPoolEntry ConsumeTxMemPoolEntry(FuzzedDataProvider& fuzzed_data_provider, const CTransaction& tx) noexcept;\n \n [[nodiscard]] CTxDestination ConsumeTxDestination(FuzzedDataProvider& fuzzed_data_provider) noexcept;\n \n@@ -215,16 +202,7 @@ template <class T>\n     return std::numeric_limits<T>::max() - i < j;\n }\n \n-[[nodiscard]] inline bool ContainsSpentInput(const CTransaction& tx, const CCoinsViewCache& inputs) noexcept\n-{\n-    for (const CTxIn& tx_in : tx.vin) {\n-        const Coin& coin = inputs.AccessCoin(tx_in.prevout);\n-        if (coin.IsSpent()) {\n-            return true;\n-        }\n-    }\n-    return false;\n-}\n+[[nodiscard]] bool ContainsSpentInput(const CTransaction& tx, const CCoinsViewCache& inputs) noexcept;\n \n /**\n  * Sets errno to a value selected from the given std::array `errnos`.\n@@ -259,27 +237,7 @@ inline void SetFuzzedErrNo(FuzzedDataProvider& fuzzed_data_provider) noexcept\n     return result;\n }\n \n-inline CNetAddr ConsumeNetAddr(FuzzedDataProvider& fuzzed_data_provider) noexcept\n-{\n-    const Network network = fuzzed_data_provider.PickValueInArray({Network::NET_IPV4, Network::NET_IPV6, Network::NET_INTERNAL, Network::NET_ONION});\n-    CNetAddr net_addr;\n-    if (network == Network::NET_IPV4) {\n-        in_addr v4_addr = {};\n-        v4_addr.s_addr = fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n-        net_addr = CNetAddr{v4_addr};\n-    } else if (network == Network::NET_IPV6) {\n-        if (fuzzed_data_provider.remaining_bytes() >= 16) {\n-            in6_addr v6_addr = {};\n-            memcpy(v6_addr.s6_addr, fuzzed_data_provider.ConsumeBytes<uint8_t>(16).data(), 16);\n-            net_addr = CNetAddr{v6_addr, fuzzed_data_provider.ConsumeIntegral<uint32_t>()};\n-        }\n-    } else if (network == Network::NET_INTERNAL) {\n-        net_addr.SetInternal(fuzzed_data_provider.ConsumeBytesAsString(32));\n-    } else if (network == Network::NET_ONION) {\n-        net_addr.SetSpecial(fuzzed_data_provider.ConsumeBytesAsString(32));\n-    }\n-    return net_addr;\n-}\n+CNetAddr ConsumeNetAddr(FuzzedDataProvider& fuzzed_data_provider) noexcept;\n \n inline CSubNet ConsumeSubNet(FuzzedDataProvider& fuzzed_data_provider) noexcept\n {\n@@ -329,112 +287,15 @@ class FuzzedFileProvider\n     {\n     }\n \n-    FILE* open()\n-    {\n-        SetFuzzedErrNo(m_fuzzed_data_provider);\n-        if (m_fuzzed_data_provider.ConsumeBool()) {\n-            return nullptr;\n-        }\n-        std::string mode;\n-        CallOneOf(\n-            m_fuzzed_data_provider,\n-            [&] {\n-                mode = \"r\";\n-            },\n-            [&] {\n-                mode = \"r+\";\n-            },\n-            [&] {\n-                mode = \"w\";\n-            },\n-            [&] {\n-                mode = \"w+\";\n-            },\n-            [&] {\n-                mode = \"a\";\n-            },\n-            [&] {\n-                mode = \"a+\";\n-            });\n-#if defined _GNU_SOURCE && !defined __ANDROID__\n-        const cookie_io_functions_t io_hooks = {\n-            FuzzedFileProvider::read,\n-            FuzzedFileProvider::write,\n-            FuzzedFileProvider::seek,\n-            FuzzedFileProvider::close,\n-        };\n-        return fopencookie(this, mode.c_str(), io_hooks);\n-#else\n-        (void)mode;\n-        return nullptr;\n-#endif\n-    }\n+    FILE* open();\n \n-    static ssize_t read(void* cookie, char* buf, size_t size)\n-    {\n-        FuzzedFileProvider* fuzzed_file = (FuzzedFileProvider*)cookie;\n-        SetFuzzedErrNo(fuzzed_file->m_fuzzed_data_provider);\n-        if (buf == nullptr || size == 0 || fuzzed_file->m_fuzzed_data_provider.ConsumeBool()) {\n-            return fuzzed_file->m_fuzzed_data_provider.ConsumeBool() ? 0 : -1;\n-        }\n-        const std::vector<uint8_t> random_bytes = fuzzed_file->m_fuzzed_data_provider.ConsumeBytes<uint8_t>(size);\n-        if (random_bytes.empty()) {\n-            return 0;\n-        }\n-        std::memcpy(buf, random_bytes.data(), random_bytes.size());\n-        if (AdditionOverflow(fuzzed_file->m_offset, (int64_t)random_bytes.size())) {\n-            return fuzzed_file->m_fuzzed_data_provider.ConsumeBool() ? 0 : -1;\n-        }\n-        fuzzed_file->m_offset += random_bytes.size();\n-        return random_bytes.size();\n-    }\n+    static ssize_t read(void* cookie, char* buf, size_t size);\n \n-    static ssize_t write(void* cookie, const char* buf, size_t size)\n-    {\n-        FuzzedFileProvider* fuzzed_file = (FuzzedFileProvider*)cookie;\n-        SetFuzzedErrNo(fuzzed_file->m_fuzzed_data_provider);\n-        const ssize_t n = fuzzed_file->m_fuzzed_data_provider.ConsumeIntegralInRange<ssize_t>(0, size);\n-        if (AdditionOverflow(fuzzed_file->m_offset, (int64_t)n)) {\n-            return fuzzed_file->m_fuzzed_data_provider.ConsumeBool() ? 0 : -1;\n-        }\n-        fuzzed_file->m_offset += n;\n-        return n;\n-    }\n+    static ssize_t write(void* cookie, const char* buf, size_t size);\n \n-    static int seek(void* cookie, int64_t* offset, int whence)\n-    {\n-        assert(whence == SEEK_SET || whence == SEEK_CUR || whence == SEEK_END);\n-        FuzzedFileProvider* fuzzed_file = (FuzzedFileProvider*)cookie;\n-        SetFuzzedErrNo(fuzzed_file->m_fuzzed_data_provider);\n-        int64_t new_offset = 0;\n-        if (whence == SEEK_SET) {\n-            new_offset = *offset;\n-        } else if (whence == SEEK_CUR) {\n-            if (AdditionOverflow(fuzzed_file->m_offset, *offset)) {\n-                return -1;\n-            }\n-            new_offset = fuzzed_file->m_offset + *offset;\n-        } else if (whence == SEEK_END) {\n-            const int64_t n = fuzzed_file->m_fuzzed_data_provider.ConsumeIntegralInRange<int64_t>(0, 4096);\n-            if (AdditionOverflow(n, *offset)) {\n-                return -1;\n-            }\n-            new_offset = n + *offset;\n-        }\n-        if (new_offset < 0) {\n-            return -1;\n-        }\n-        fuzzed_file->m_offset = new_offset;\n-        *offset = new_offset;\n-        return fuzzed_file->m_fuzzed_data_provider.ConsumeIntegralInRange<int>(-1, 0);\n-    }\n+    static int seek(void* cookie, int64_t* offset, int whence);\n \n-    static int close(void* cookie)\n-    {\n-        FuzzedFileProvider* fuzzed_file = (FuzzedFileProvider*)cookie;\n-        SetFuzzedErrNo(fuzzed_file->m_fuzzed_data_provider);\n-        return fuzzed_file->m_fuzzed_data_provider.ConsumeIntegralInRange<int>(-1, 0);\n-    }\n+    static int close(void* cookie);\n };\n \n [[nodiscard]] inline FuzzedFileProvider ConsumeFile(FuzzedDataProvider& fuzzed_data_provider) noexcept"
      }
    ]
  }
]