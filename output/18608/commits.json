[
  {
    "sha": "42d5aefa96c6070c9861cb21d61f9532e6354def",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MmQ1YWVmYTk2YzYwNzBjOTg2MWNiMjFkNjFmOTUzMmU2MzU0ZGVm",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-03-02T12:47:57Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-03-03T14:19:35Z"
      },
      "message": "test: Add gui test for wallet receive requests\n\nMake sure wallet receive requests are saved and deleted correctly by GUI\ncode",
      "tree": {
        "sha": "5b92311fa920c72d5f353cf8511783e3354bb986",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5b92311fa920c72d5f353cf8511783e3354bb986"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/42d5aefa96c6070c9861cb21d61f9532e6354def",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/42d5aefa96c6070c9861cb21d61f9532e6354def",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/42d5aefa96c6070c9861cb21d61f9532e6354def",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/42d5aefa96c6070c9861cb21d61f9532e6354def/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cabe63759ce890a7d39d72f7b8046195b0edb421",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cabe63759ce890a7d39d72f7b8046195b0edb421",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cabe63759ce890a7d39d72f7b8046195b0edb421"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 22,
      "deletions": 0
    },
    "files": [
      {
        "sha": "bb098e1bbb9317d149c0724bef78b30379edac9f",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42d5aefa96c6070c9861cb21d61f9532e6354def/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42d5aefa96c6070c9861cb21d61f9532e6354def/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=42d5aefa96c6070c9861cb21d61f9532e6354def",
        "patch": "@@ -225,6 +225,7 @@ void TestGUI(interfaces::Node& node)\n     int initialRowCount = requestTableModel->rowCount({});\n     QPushButton* requestPaymentButton = receiveCoinsDialog.findChild<QPushButton*>(\"receiveButton\");\n     requestPaymentButton->click();\n+    std::string address;\n     for (QWidget* widget : QApplication::topLevelWidgets()) {\n         if (widget->inherits(\"ReceiveRequestDialog\")) {\n             ReceiveRequestDialog* receiveRequestDialog = qobject_cast<ReceiveRequestDialog*>(widget);\n@@ -233,6 +234,9 @@ void TestGUI(interfaces::Node& node)\n             QString uri = receiveRequestDialog->QObject::findChild<QLabel*>(\"uri_content\")->text();\n             QCOMPARE(uri.count(\"bitcoin:\"), 2);\n             QCOMPARE(receiveRequestDialog->QObject::findChild<QLabel*>(\"address_tag\")->text(), QString(\"Address:\"));\n+            QVERIFY(address.empty());\n+            address = receiveRequestDialog->QObject::findChild<QLabel*>(\"address_content\")->text().toStdString();\n+            QVERIFY(!address.empty());\n \n             QCOMPARE(uri.count(\"amount=0.00000001\"), 2);\n             QCOMPARE(receiveRequestDialog->QObject::findChild<QLabel*>(\"amount_tag\")->text(), QString(\"Amount:\"));\n@@ -259,12 +263,30 @@ void TestGUI(interfaces::Node& node)\n     int currentRowCount = requestTableModel->rowCount({});\n     QCOMPARE(currentRowCount, initialRowCount+1);\n \n+    // Check addition to wallet\n+    std::vector<std::string> requests = walletModel.wallet().getDestValues(\"rr\");\n+    QCOMPARE(requests.size(), size_t{1});\n+    RecentRequestEntry entry;\n+    CDataStream{MakeUCharSpan(requests[0]), SER_DISK, CLIENT_VERSION} >> entry;\n+    QCOMPARE(entry.nVersion, int{1});\n+    QCOMPARE(entry.id, int64_t{1});\n+    QVERIFY(entry.date.isValid());\n+    QCOMPARE(entry.recipient.address, QString::fromStdString(address));\n+    QCOMPARE(entry.recipient.label, QString{\"TEST_LABEL_1\"});\n+    QCOMPARE(entry.recipient.amount, CAmount{1});\n+    QCOMPARE(entry.recipient.message, QString{\"TEST_MESSAGE_1\"});\n+    QCOMPARE(entry.recipient.sPaymentRequest, std::string{});\n+    QCOMPARE(entry.recipient.authenticatedMerchant, QString{});\n+\n     // Check Remove button\n     QTableView* table = receiveCoinsDialog.findChild<QTableView*>(\"recentRequestsView\");\n     table->selectRow(currentRowCount-1);\n     QPushButton* removeRequestButton = receiveCoinsDialog.findChild<QPushButton*>(\"removeRequestButton\");\n     removeRequestButton->click();\n     QCOMPARE(requestTableModel->rowCount({}), currentRowCount-1);\n+\n+    // Check removal from wallet\n+    QCOMPARE(walletModel.wallet().getDestValues(\"rr\").size(), size_t{0});\n }\n \n } // namespace"
      }
    ]
  },
  {
    "sha": "dd8a9d019aa449f3a6c5ad989cb6bdd9f03d1306",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZDhhOWQwMTlhYTQ0OWYzYTZjNWFkOTg5Y2I2YmRkOWYwM2QxMzA2",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-04-12T17:40:43Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-03-03T14:19:35Z"
      },
      "message": "interfaces: Stop exposing wallet destdata to gui\n\nStop giving GUI access to destdata rows in database. Replace with narrow\nAPI just for saving and reading receive request information.\n\nThis simplifies code and should prevent the GUI from interfering with\nother destdata like address-used status.\n\nNote: No user-visible behavior is changing in this commit. New\nCWallet::SetAddressReceiveRequest() implementation avoids a bug in\nCWallet::AddDestData() where a modification would leave the previous\nvalue in memory while writing the new value to disk. But it doesn't\nmatter because the GUI doesn't currently expose the ability to modify\nreceive requests, only to add and erase them.",
      "tree": {
        "sha": "0e30b3cabece3f0f33a42d133036c43e5bb362e8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0e30b3cabece3f0f33a42d133036c43e5bb362e8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dd8a9d019aa449f3a6c5ad989cb6bdd9f03d1306",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd8a9d019aa449f3a6c5ad989cb6bdd9f03d1306",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dd8a9d019aa449f3a6c5ad989cb6bdd9f03d1306",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd8a9d019aa449f3a6c5ad989cb6bdd9f03d1306/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "42d5aefa96c6070c9861cb21d61f9532e6354def",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/42d5aefa96c6070c9861cb21d61f9532e6354def",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/42d5aefa96c6070c9861cb21d61f9532e6354def"
      }
    ],
    "stats": {
      "total": 91,
      "additions": 37,
      "deletions": 54
    },
    "files": [
      {
        "sha": "88f93321f9e52a8c30398fe254613364bc8b414e",
        "filename": "src/interfaces/wallet.h",
        "status": "modified",
        "additions": 4,
        "deletions": 7,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd8a9d019aa449f3a6c5ad989cb6bdd9f03d1306/src/interfaces/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd8a9d019aa449f3a6c5ad989cb6bdd9f03d1306/src/interfaces/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.h?ref=dd8a9d019aa449f3a6c5ad989cb6bdd9f03d1306",
        "patch": "@@ -112,14 +112,11 @@ class Wallet\n     //! Get wallet address list.\n     virtual std::vector<WalletAddress> getAddresses() = 0;\n \n-    //! Add dest data.\n-    virtual bool addDestData(const CTxDestination& dest, const std::string& key, const std::string& value) = 0;\n+    //! Get receive requests.\n+    virtual std::vector<std::string> getAddressReceiveRequests() = 0;\n \n-    //! Erase dest data.\n-    virtual bool eraseDestData(const CTxDestination& dest, const std::string& key) = 0;\n-\n-    //! Get dest values with prefix.\n-    virtual std::vector<std::string> getDestValues(const std::string& prefix) = 0;\n+    //! Save or remove receive request.\n+    virtual bool setAddressReceiveRequest(const CTxDestination& dest, const std::string& id, const std::string& value) = 0;\n \n     //! Lock coin.\n     virtual void lockCoin(const COutPoint& output) = 0;"
      },
      {
        "sha": "c47b34a2b0a746d5a59e946f968f69c1e51353b1",
        "filename": "src/qt/recentrequeststablemodel.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd8a9d019aa449f3a6c5ad989cb6bdd9f03d1306/src/qt/recentrequeststablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd8a9d019aa449f3a6c5ad989cb6bdd9f03d1306/src/qt/recentrequeststablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/recentrequeststablemodel.cpp?ref=dd8a9d019aa449f3a6c5ad989cb6bdd9f03d1306",
        "patch": "@@ -10,18 +10,20 @@\n #include <qt/walletmodel.h>\n \n #include <clientversion.h>\n+#include <interfaces/wallet.h>\n+#include <key_io.h>\n #include <streams.h>\n+#include <util/string.h>\n \n #include <utility>\n \n RecentRequestsTableModel::RecentRequestsTableModel(WalletModel *parent) :\n     QAbstractTableModel(parent), walletModel(parent)\n {\n     // Load entries from wallet\n-    std::vector<std::string> vReceiveRequests;\n-    parent->loadReceiveRequests(vReceiveRequests);\n-    for (const std::string& request : vReceiveRequests)\n+    for (const std::string& request : parent->wallet().getAddressReceiveRequests()) {\n         addNewRequest(request);\n+    }\n \n     /* These columns must match the indices in the ColumnIndex enumeration */\n     columns << tr(\"Date\") << tr(\"Label\") << tr(\"Message\") << getAmountTitle();\n@@ -143,7 +145,7 @@ bool RecentRequestsTableModel::removeRows(int row, int count, const QModelIndex\n         for (int i = 0; i < count; ++i)\n         {\n             const RecentRequestEntry* rec = &list[row+i];\n-            if (!walletModel->saveReceiveRequest(rec->recipient.address.toStdString(), rec->id, \"\"))\n+            if (!walletModel->wallet().setAddressReceiveRequest(DecodeDestination(rec->recipient.address.toStdString()), ToString(rec->id), \"\"))\n                 return false;\n         }\n \n@@ -172,7 +174,7 @@ void RecentRequestsTableModel::addNewRequest(const SendCoinsRecipient &recipient\n     CDataStream ss(SER_DISK, CLIENT_VERSION);\n     ss << newEntry;\n \n-    if (!walletModel->saveReceiveRequest(recipient.address.toStdString(), newEntry.id, ss.str()))\n+    if (!walletModel->wallet().setAddressReceiveRequest(DecodeDestination(recipient.address.toStdString()), ToString(newEntry.id), ss.str()))\n         return;\n \n     addNewRequest(newEntry);"
      },
      {
        "sha": "3acf9d6b240b6045ac139edbefa3c3e6c03badb8",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd8a9d019aa449f3a6c5ad989cb6bdd9f03d1306/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd8a9d019aa449f3a6c5ad989cb6bdd9f03d1306/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=dd8a9d019aa449f3a6c5ad989cb6bdd9f03d1306",
        "patch": "@@ -264,7 +264,7 @@ void TestGUI(interfaces::Node& node)\n     QCOMPARE(currentRowCount, initialRowCount+1);\n \n     // Check addition to wallet\n-    std::vector<std::string> requests = walletModel.wallet().getDestValues(\"rr\");\n+    std::vector<std::string> requests = walletModel.wallet().getAddressReceiveRequests();\n     QCOMPARE(requests.size(), size_t{1});\n     RecentRequestEntry entry;\n     CDataStream{MakeUCharSpan(requests[0]), SER_DISK, CLIENT_VERSION} >> entry;\n@@ -286,7 +286,7 @@ void TestGUI(interfaces::Node& node)\n     QCOMPARE(requestTableModel->rowCount({}), currentRowCount-1);\n \n     // Check removal from wallet\n-    QCOMPARE(walletModel.wallet().getDestValues(\"rr\").size(), size_t{0});\n+    QCOMPARE(walletModel.wallet().getAddressReceiveRequests().size(), size_t{0});\n }\n \n } // namespace"
      },
      {
        "sha": "381d1ce654a50d83ef107d32ba85db2975d94a35",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 19,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd8a9d019aa449f3a6c5ad989cb6bdd9f03d1306/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd8a9d019aa449f3a6c5ad989cb6bdd9f03d1306/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=dd8a9d019aa449f3a6c5ad989cb6bdd9f03d1306",
        "patch": "@@ -463,25 +463,6 @@ void WalletModel::UnlockContext::CopyFrom(UnlockContext&& rhs)\n     rhs.relock = false;\n }\n \n-void WalletModel::loadReceiveRequests(std::vector<std::string>& vReceiveRequests)\n-{\n-    vReceiveRequests = m_wallet->getDestValues(\"rr\"); // receive request\n-}\n-\n-bool WalletModel::saveReceiveRequest(const std::string &sAddress, const int64_t nId, const std::string &sRequest)\n-{\n-    CTxDestination dest = DecodeDestination(sAddress);\n-\n-    std::stringstream ss;\n-    ss << nId;\n-    std::string key = \"rr\" + ss.str(); // \"rr\" prefix = \"receive request\" in destdata\n-\n-    if (sRequest.empty())\n-        return m_wallet->eraseDestData(dest, key);\n-    else\n-        return m_wallet->addDestData(dest, key, sRequest);\n-}\n-\n bool WalletModel::bumpFee(uint256 hash, uint256& new_hash)\n {\n     CCoinControl coin_control;"
      },
      {
        "sha": "72a1671146d24f17534476b954336819d7850980",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd8a9d019aa449f3a6c5ad989cb6bdd9f03d1306/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd8a9d019aa449f3a6c5ad989cb6bdd9f03d1306/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=dd8a9d019aa449f3a6c5ad989cb6bdd9f03d1306",
        "patch": "@@ -135,9 +135,6 @@ class WalletModel : public QObject\n \n     UnlockContext requestUnlock();\n \n-    void loadReceiveRequests(std::vector<std::string>& vReceiveRequests);\n-    bool saveReceiveRequest(const std::string &sAddress, const int64_t nId, const std::string &sRequest);\n-\n     bool bumpFee(uint256 hash, uint256& new_hash);\n \n     static bool isWalletEnabled();"
      },
      {
        "sha": "9a4b077b5ac5ad38ae6710759b038132a3342ad6",
        "filename": "src/wallet/interfaces.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 12,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd8a9d019aa449f3a6c5ad989cb6bdd9f03d1306/src/wallet/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd8a9d019aa449f3a6c5ad989cb6bdd9f03d1306/src/wallet/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/interfaces.cpp?ref=dd8a9d019aa449f3a6c5ad989cb6bdd9f03d1306",
        "patch": "@@ -199,22 +199,14 @@ class WalletImpl : public Wallet\n         }\n         return result;\n     }\n-    bool addDestData(const CTxDestination& dest, const std::string& key, const std::string& value) override\n-    {\n+    std::vector<std::string> getAddressReceiveRequests() override {\n         LOCK(m_wallet->cs_wallet);\n-        WalletBatch batch{m_wallet->GetDatabase()};\n-        return m_wallet->AddDestData(batch, dest, key, value);\n+        return m_wallet->GetAddressReceiveRequests();\n     }\n-    bool eraseDestData(const CTxDestination& dest, const std::string& key) override\n-    {\n+    bool setAddressReceiveRequest(const CTxDestination& dest, const std::string& id, const std::string& value) override {\n         LOCK(m_wallet->cs_wallet);\n         WalletBatch batch{m_wallet->GetDatabase()};\n-        return m_wallet->EraseDestData(batch, dest, key);\n-    }\n-    std::vector<std::string> getDestValues(const std::string& prefix) override\n-    {\n-        LOCK(m_wallet->cs_wallet);\n-        return m_wallet->GetDestValues(prefix);\n+        return m_wallet->SetAddressReceiveRequest(batch, dest, id, value);\n     }\n     void lockCoin(const COutPoint& output) override\n     {"
      },
      {
        "sha": "932a0c2eca3a5d519a41ec523831bbc2953e1f0d",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd8a9d019aa449f3a6c5ad989cb6bdd9f03d1306/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd8a9d019aa449f3a6c5ad989cb6bdd9f03d1306/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=dd8a9d019aa449f3a6c5ad989cb6bdd9f03d1306",
        "patch": "@@ -391,10 +391,10 @@ BOOST_AUTO_TEST_CASE(LoadReceiveRequests)\n     LOCK(m_wallet.cs_wallet);\n     WalletBatch batch{m_wallet.GetDatabase()};\n     m_wallet.AddDestData(batch, dest, \"misc\", \"val_misc\");\n-    m_wallet.AddDestData(batch, dest, \"rr0\", \"val_rr0\");\n-    m_wallet.AddDestData(batch, dest, \"rr1\", \"val_rr1\");\n+    m_wallet.SetAddressReceiveRequest(batch, dest, \"0\", \"val_rr0\");\n+    m_wallet.SetAddressReceiveRequest(batch, dest, \"1\", \"val_rr1\");\n \n-    auto values = m_wallet.GetDestValues(\"rr\");\n+    auto values = m_wallet.GetAddressReceiveRequests();\n     BOOST_CHECK_EQUAL(values.size(), 2U);\n     BOOST_CHECK_EQUAL(values[0], \"val_rr0\");\n     BOOST_CHECK_EQUAL(values[1], \"val_rr1\");"
      },
      {
        "sha": "a1ea5070b336da6176fc0a128046cff5a2cfc185",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 1,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd8a9d019aa449f3a6c5ad989cb6bdd9f03d1306/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd8a9d019aa449f3a6c5ad989cb6bdd9f03d1306/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=dd8a9d019aa449f3a6c5ad989cb6bdd9f03d1306",
        "patch": "@@ -3798,8 +3798,9 @@ bool CWallet::GetDestData(const CTxDestination &dest, const std::string &key, st\n     return false;\n }\n \n-std::vector<std::string> CWallet::GetDestValues(const std::string& prefix) const\n+std::vector<std::string> CWallet::GetAddressReceiveRequests() const\n {\n+    const std::string prefix{\"rr\"};\n     std::vector<std::string> values;\n     for (const auto& address : m_address_book) {\n         for (const auto& data : address.second.destdata) {\n@@ -3811,6 +3812,18 @@ std::vector<std::string> CWallet::GetDestValues(const std::string& prefix) const\n     return values;\n }\n \n+bool CWallet::SetAddressReceiveRequest(WalletBatch& batch, const CTxDestination& dest, const std::string& id, const std::string& value)\n+{\n+    const std::string key{\"rr\" + id}; // \"rr\" prefix = \"receive request\" in destdata\n+    CAddressBookData& data = m_address_book.at(dest);\n+    if (value.empty()) {\n+        return data.destdata.erase(key) && batch.EraseDestData(EncodeDestination(dest), key);\n+    } else {\n+        data.destdata[key] = value;\n+        return batch.WriteDestData(EncodeDestination(dest), key, value);\n+    }\n+}\n+\n std::unique_ptr<WalletDatabase> MakeWalletDatabase(const std::string& name, const DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error_string)\n {\n     // Do some checking on wallet path. It should be either a:"
      },
      {
        "sha": "58538df0af0f48034eb9743e80bf8b1c675607dc",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd8a9d019aa449f3a6c5ad989cb6bdd9f03d1306/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd8a9d019aa449f3a6c5ad989cb6bdd9f03d1306/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=dd8a9d019aa449f3a6c5ad989cb6bdd9f03d1306",
        "patch": "@@ -876,8 +876,6 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     void LoadDestData(const CTxDestination& dest, const std::string& key, const std::string& value) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     //! Look up a destination data tuple in the store, return true if found false otherwise\n     bool GetDestData(const CTxDestination& dest, const std::string& key, std::string* value) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n-    //! Get all destination values matching a prefix.\n-    std::vector<std::string> GetDestValues(const std::string& prefix) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     //! Holds a timestamp at which point the wallet is scheduled (externally) to be relocked. Caller must arrange for actual relocking to occur via Lock().\n     int64_t nRelockTime GUARDED_BY(cs_wallet){0};\n@@ -1084,6 +1082,9 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n \n     bool DelAddressBook(const CTxDestination& address);\n \n+    std::vector<std::string> GetAddressReceiveRequests() const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    bool SetAddressReceiveRequest(WalletBatch& batch, const CTxDestination& dest, const std::string& id, const std::string& value) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+\n     unsigned int GetKeyPoolSize() const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     //! signify that a particular wallet feature is now used."
      }
    ]
  },
  {
    "sha": "53291c71256d7d15347d2ea46c3cd2692b6ef138",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MzI5MWM3MTI1NmQ3ZDE1MzQ3ZDJlYTQ2YzNjZDI2OTJiNmVmMTM4",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-04-12T17:40:43Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-03-03T14:19:35Z"
      },
      "message": "wallet: Add IsAddressUsed / SetAddressUsed methods\n\nThis simplifies code and adds a less cumbersome interface for accessing\naddress used information than CWallet AddDestData / EraseDestData /\nGetDestData methods.\n\nThere is no change in behavior. Lower-level walletdb DestData methods\nare also still available and not affected by this change. If there is\ninterest in consolidating destdata logic more and making it internal to\nwalletdb, #18608 could be considered as a followup.",
      "tree": {
        "sha": "330d806710d2a7af84872126fedca0d131830b6b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/330d806710d2a7af84872126fedca0d131830b6b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/53291c71256d7d15347d2ea46c3cd2692b6ef138",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/53291c71256d7d15347d2ea46c3cd2692b6ef138",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/53291c71256d7d15347d2ea46c3cd2692b6ef138",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/53291c71256d7d15347d2ea46c3cd2692b6ef138/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dd8a9d019aa449f3a6c5ad989cb6bdd9f03d1306",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd8a9d019aa449f3a6c5ad989cb6bdd9f03d1306",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dd8a9d019aa449f3a6c5ad989cb6bdd9f03d1306"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 21,
      "deletions": 29
    },
    "files": [
      {
        "sha": "471ab67b322830524ce7268da6541307e0e014bf",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53291c71256d7d15347d2ea46c3cd2692b6ef138/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53291c71256d7d15347d2ea46c3cd2692b6ef138/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=53291c71256d7d15347d2ea46c3cd2692b6ef138",
        "patch": "@@ -390,7 +390,7 @@ BOOST_AUTO_TEST_CASE(LoadReceiveRequests)\n     CTxDestination dest = PKHash();\n     LOCK(m_wallet.cs_wallet);\n     WalletBatch batch{m_wallet.GetDatabase()};\n-    m_wallet.AddDestData(batch, dest, \"misc\", \"val_misc\");\n+    m_wallet.SetAddressUsed(batch, dest, true);\n     m_wallet.SetAddressReceiveRequest(batch, dest, \"0\", \"val_rr0\");\n     m_wallet.SetAddressReceiveRequest(batch, dest, \"1\", \"val_rr1\");\n "
      },
      {
        "sha": "90e5c7f7d474cf96bb4db8f0d0d7c6d743695947",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 19,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53291c71256d7d15347d2ea46c3cd2692b6ef138/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53291c71256d7d15347d2ea46c3cd2692b6ef138/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=53291c71256d7d15347d2ea46c3cd2692b6ef138",
        "patch": "@@ -813,12 +813,11 @@ void CWallet::SetSpentKeyState(WalletBatch& batch, const uint256& hash, unsigned\n     CTxDestination dst;\n     if (ExtractDestination(srctx->tx->vout[n].scriptPubKey, dst)) {\n         if (IsMine(dst)) {\n-            if (used && !GetDestData(dst, \"used\", nullptr)) {\n-                if (AddDestData(batch, dst, \"used\", \"p\")) { // p for \"present\", opposite of absent (null)\n+            if (used != IsAddressUsed(dst)) {\n+                if (used) {\n                     tx_destinations.insert(dst);\n                 }\n-            } else if (!used && GetDestData(dst, \"used\", nullptr)) {\n-                EraseDestData(batch, dst, \"used\");\n+                SetAddressUsed(batch, dst, used);\n             }\n         }\n     }\n@@ -834,23 +833,23 @@ bool CWallet::IsSpentKey(const uint256& hash, unsigned int n) const\n         if (!ExtractDestination(srctx->tx->vout[n].scriptPubKey, dest)) {\n             return false;\n         }\n-        if (GetDestData(dest, \"used\", nullptr)) {\n+        if (IsAddressUsed(dest)) {\n             return true;\n         }\n         if (IsLegacy()) {\n             LegacyScriptPubKeyMan* spk_man = GetLegacyScriptPubKeyMan();\n             assert(spk_man != nullptr);\n             for (const auto& keyid : GetAffectedKeys(srctx->tx->vout[n].scriptPubKey, *spk_man)) {\n                 WitnessV0KeyHash wpkh_dest(keyid);\n-                if (GetDestData(wpkh_dest, \"used\", nullptr)) {\n+                if (IsAddressUsed(wpkh_dest)) {\n                     return true;\n                 }\n                 ScriptHash sh_wpkh_dest(GetScriptForDestination(wpkh_dest));\n-                if (GetDestData(sh_wpkh_dest, \"used\", nullptr)) {\n+                if (IsAddressUsed(sh_wpkh_dest)) {\n                     return true;\n                 }\n                 PKHash pkh_dest(keyid);\n-                if (GetDestData(pkh_dest, \"used\", nullptr)) {\n+                if (IsAddressUsed(pkh_dest)) {\n                     return true;\n                 }\n             }\n@@ -3761,37 +3760,36 @@ unsigned int CWallet::ComputeTimeSmart(const CWalletTx& wtx) const\n     return nTimeSmart;\n }\n \n-bool CWallet::AddDestData(WalletBatch& batch, const CTxDestination &dest, const std::string &key, const std::string &value)\n+bool CWallet::SetAddressUsed(WalletBatch& batch, const CTxDestination& dest, bool used)\n {\n+    const std::string key{\"used\"};\n     if (std::get_if<CNoDestination>(&dest))\n         return false;\n \n+    if (!used) {\n+        auto* data = util::FindKey(m_address_book, dest);\n+        return data && data->destdata.erase(key) && batch.EraseDestData(EncodeDestination(dest), key);\n+    }\n+\n+    const std::string value{\"1\"};\n     m_address_book[dest].destdata.insert(std::make_pair(key, value));\n     return batch.WriteDestData(EncodeDestination(dest), key, value);\n }\n \n-bool CWallet::EraseDestData(WalletBatch& batch, const CTxDestination &dest, const std::string &key)\n-{\n-    if (!m_address_book[dest].destdata.erase(key))\n-        return false;\n-    return batch.EraseDestData(EncodeDestination(dest), key);\n-}\n-\n void CWallet::LoadDestData(const CTxDestination &dest, const std::string &key, const std::string &value)\n {\n     m_address_book[dest].destdata.insert(std::make_pair(key, value));\n }\n \n-bool CWallet::GetDestData(const CTxDestination &dest, const std::string &key, std::string *value) const\n+bool CWallet::IsAddressUsed(const CTxDestination& dest) const\n {\n+    const std::string key{\"used\"};\n     std::map<CTxDestination, CAddressBookData>::const_iterator i = m_address_book.find(dest);\n     if(i != m_address_book.end())\n     {\n         CAddressBookData::StringMap::const_iterator j = i->second.destdata.find(key);\n         if(j != i->second.destdata.end())\n         {\n-            if(value)\n-                *value = j->second;\n             return true;\n         }\n     }"
      },
      {
        "sha": "798993fa84255b5f51970b44ecfc89c5c2437893",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 9,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53291c71256d7d15347d2ea46c3cd2692b6ef138/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53291c71256d7d15347d2ea46c3cd2692b6ef138/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=53291c71256d7d15347d2ea46c3cd2692b6ef138",
        "patch": "@@ -865,17 +865,8 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n \n     bool LoadMinVersion(int nVersion) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet) { AssertLockHeld(cs_wallet); nWalletVersion = nVersion; return true; }\n \n-    /**\n-     * Adds a destination data tuple to the store, and saves it to disk\n-     * When adding new fields, take care to consider how DelAddressBook should handle it!\n-     */\n-    bool AddDestData(WalletBatch& batch, const CTxDestination& dest, const std::string& key, const std::string& value) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n-    //! Erases a destination data tuple in the store and on disk\n-    bool EraseDestData(WalletBatch& batch, const CTxDestination& dest, const std::string& key) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     //! Adds a destination data tuple to the store, without saving it to disk\n     void LoadDestData(const CTxDestination& dest, const std::string& key, const std::string& value) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n-    //! Look up a destination data tuple in the store, return true if found false otherwise\n-    bool GetDestData(const CTxDestination& dest, const std::string& key, std::string* value) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     //! Holds a timestamp at which point the wallet is scheduled (externally) to be relocked. Caller must arrange for actual relocking to occur via Lock().\n     int64_t nRelockTime GUARDED_BY(cs_wallet){0};\n@@ -1082,6 +1073,9 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n \n     bool DelAddressBook(const CTxDestination& address);\n \n+    bool IsAddressUsed(const CTxDestination& dest) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    bool SetAddressUsed(WalletBatch& batch, const CTxDestination& dest, bool used) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+\n     std::vector<std::string> GetAddressReceiveRequests() const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     bool SetAddressReceiveRequest(WalletBatch& batch, const CTxDestination& dest, const std::string& id, const std::string& value) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n "
      }
    ]
  },
  {
    "sha": "b79a77bf4c7ce29d018e3725c2ec025c6955f5aa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNzlhNzdiZjRjN2NlMjlkMDE4ZTM3MjVjMmVjMDI1YzY5NTVmNWFh",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-03-03T14:19:35Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-03-03T14:19:35Z"
      },
      "message": "Merge remote-tracking branch 'origin/pull/21353/head'",
      "tree": {
        "sha": "330d806710d2a7af84872126fedca0d131830b6b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/330d806710d2a7af84872126fedca0d131830b6b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b79a77bf4c7ce29d018e3725c2ec025c6955f5aa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b79a77bf4c7ce29d018e3725c2ec025c6955f5aa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b79a77bf4c7ce29d018e3725c2ec025c6955f5aa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b79a77bf4c7ce29d018e3725c2ec025c6955f5aa/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cabe63759ce890a7d39d72f7b8046195b0edb421",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cabe63759ce890a7d39d72f7b8046195b0edb421",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cabe63759ce890a7d39d72f7b8046195b0edb421"
      },
      {
        "sha": "53291c71256d7d15347d2ea46c3cd2692b6ef138",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/53291c71256d7d15347d2ea46c3cd2692b6ef138",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/53291c71256d7d15347d2ea46c3cd2692b6ef138"
      }
    ],
    "stats": {
      "total": 159,
      "additions": 78,
      "deletions": 81
    },
    "files": [
      {
        "sha": "88f93321f9e52a8c30398fe254613364bc8b414e",
        "filename": "src/interfaces/wallet.h",
        "status": "modified",
        "additions": 4,
        "deletions": 7,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b79a77bf4c7ce29d018e3725c2ec025c6955f5aa/src/interfaces/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b79a77bf4c7ce29d018e3725c2ec025c6955f5aa/src/interfaces/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.h?ref=b79a77bf4c7ce29d018e3725c2ec025c6955f5aa",
        "patch": "@@ -112,14 +112,11 @@ class Wallet\n     //! Get wallet address list.\n     virtual std::vector<WalletAddress> getAddresses() = 0;\n \n-    //! Add dest data.\n-    virtual bool addDestData(const CTxDestination& dest, const std::string& key, const std::string& value) = 0;\n+    //! Get receive requests.\n+    virtual std::vector<std::string> getAddressReceiveRequests() = 0;\n \n-    //! Erase dest data.\n-    virtual bool eraseDestData(const CTxDestination& dest, const std::string& key) = 0;\n-\n-    //! Get dest values with prefix.\n-    virtual std::vector<std::string> getDestValues(const std::string& prefix) = 0;\n+    //! Save or remove receive request.\n+    virtual bool setAddressReceiveRequest(const CTxDestination& dest, const std::string& id, const std::string& value) = 0;\n \n     //! Lock coin.\n     virtual void lockCoin(const COutPoint& output) = 0;"
      },
      {
        "sha": "c47b34a2b0a746d5a59e946f968f69c1e51353b1",
        "filename": "src/qt/recentrequeststablemodel.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b79a77bf4c7ce29d018e3725c2ec025c6955f5aa/src/qt/recentrequeststablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b79a77bf4c7ce29d018e3725c2ec025c6955f5aa/src/qt/recentrequeststablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/recentrequeststablemodel.cpp?ref=b79a77bf4c7ce29d018e3725c2ec025c6955f5aa",
        "patch": "@@ -10,18 +10,20 @@\n #include <qt/walletmodel.h>\n \n #include <clientversion.h>\n+#include <interfaces/wallet.h>\n+#include <key_io.h>\n #include <streams.h>\n+#include <util/string.h>\n \n #include <utility>\n \n RecentRequestsTableModel::RecentRequestsTableModel(WalletModel *parent) :\n     QAbstractTableModel(parent), walletModel(parent)\n {\n     // Load entries from wallet\n-    std::vector<std::string> vReceiveRequests;\n-    parent->loadReceiveRequests(vReceiveRequests);\n-    for (const std::string& request : vReceiveRequests)\n+    for (const std::string& request : parent->wallet().getAddressReceiveRequests()) {\n         addNewRequest(request);\n+    }\n \n     /* These columns must match the indices in the ColumnIndex enumeration */\n     columns << tr(\"Date\") << tr(\"Label\") << tr(\"Message\") << getAmountTitle();\n@@ -143,7 +145,7 @@ bool RecentRequestsTableModel::removeRows(int row, int count, const QModelIndex\n         for (int i = 0; i < count; ++i)\n         {\n             const RecentRequestEntry* rec = &list[row+i];\n-            if (!walletModel->saveReceiveRequest(rec->recipient.address.toStdString(), rec->id, \"\"))\n+            if (!walletModel->wallet().setAddressReceiveRequest(DecodeDestination(rec->recipient.address.toStdString()), ToString(rec->id), \"\"))\n                 return false;\n         }\n \n@@ -172,7 +174,7 @@ void RecentRequestsTableModel::addNewRequest(const SendCoinsRecipient &recipient\n     CDataStream ss(SER_DISK, CLIENT_VERSION);\n     ss << newEntry;\n \n-    if (!walletModel->saveReceiveRequest(recipient.address.toStdString(), newEntry.id, ss.str()))\n+    if (!walletModel->wallet().setAddressReceiveRequest(DecodeDestination(recipient.address.toStdString()), ToString(newEntry.id), ss.str()))\n         return;\n \n     addNewRequest(newEntry);"
      },
      {
        "sha": "3acf9d6b240b6045ac139edbefa3c3e6c03badb8",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b79a77bf4c7ce29d018e3725c2ec025c6955f5aa/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b79a77bf4c7ce29d018e3725c2ec025c6955f5aa/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=b79a77bf4c7ce29d018e3725c2ec025c6955f5aa",
        "patch": "@@ -225,6 +225,7 @@ void TestGUI(interfaces::Node& node)\n     int initialRowCount = requestTableModel->rowCount({});\n     QPushButton* requestPaymentButton = receiveCoinsDialog.findChild<QPushButton*>(\"receiveButton\");\n     requestPaymentButton->click();\n+    std::string address;\n     for (QWidget* widget : QApplication::topLevelWidgets()) {\n         if (widget->inherits(\"ReceiveRequestDialog\")) {\n             ReceiveRequestDialog* receiveRequestDialog = qobject_cast<ReceiveRequestDialog*>(widget);\n@@ -233,6 +234,9 @@ void TestGUI(interfaces::Node& node)\n             QString uri = receiveRequestDialog->QObject::findChild<QLabel*>(\"uri_content\")->text();\n             QCOMPARE(uri.count(\"bitcoin:\"), 2);\n             QCOMPARE(receiveRequestDialog->QObject::findChild<QLabel*>(\"address_tag\")->text(), QString(\"Address:\"));\n+            QVERIFY(address.empty());\n+            address = receiveRequestDialog->QObject::findChild<QLabel*>(\"address_content\")->text().toStdString();\n+            QVERIFY(!address.empty());\n \n             QCOMPARE(uri.count(\"amount=0.00000001\"), 2);\n             QCOMPARE(receiveRequestDialog->QObject::findChild<QLabel*>(\"amount_tag\")->text(), QString(\"Amount:\"));\n@@ -259,12 +263,30 @@ void TestGUI(interfaces::Node& node)\n     int currentRowCount = requestTableModel->rowCount({});\n     QCOMPARE(currentRowCount, initialRowCount+1);\n \n+    // Check addition to wallet\n+    std::vector<std::string> requests = walletModel.wallet().getAddressReceiveRequests();\n+    QCOMPARE(requests.size(), size_t{1});\n+    RecentRequestEntry entry;\n+    CDataStream{MakeUCharSpan(requests[0]), SER_DISK, CLIENT_VERSION} >> entry;\n+    QCOMPARE(entry.nVersion, int{1});\n+    QCOMPARE(entry.id, int64_t{1});\n+    QVERIFY(entry.date.isValid());\n+    QCOMPARE(entry.recipient.address, QString::fromStdString(address));\n+    QCOMPARE(entry.recipient.label, QString{\"TEST_LABEL_1\"});\n+    QCOMPARE(entry.recipient.amount, CAmount{1});\n+    QCOMPARE(entry.recipient.message, QString{\"TEST_MESSAGE_1\"});\n+    QCOMPARE(entry.recipient.sPaymentRequest, std::string{});\n+    QCOMPARE(entry.recipient.authenticatedMerchant, QString{});\n+\n     // Check Remove button\n     QTableView* table = receiveCoinsDialog.findChild<QTableView*>(\"recentRequestsView\");\n     table->selectRow(currentRowCount-1);\n     QPushButton* removeRequestButton = receiveCoinsDialog.findChild<QPushButton*>(\"removeRequestButton\");\n     removeRequestButton->click();\n     QCOMPARE(requestTableModel->rowCount({}), currentRowCount-1);\n+\n+    // Check removal from wallet\n+    QCOMPARE(walletModel.wallet().getAddressReceiveRequests().size(), size_t{0});\n }\n \n } // namespace"
      },
      {
        "sha": "381d1ce654a50d83ef107d32ba85db2975d94a35",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 19,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b79a77bf4c7ce29d018e3725c2ec025c6955f5aa/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b79a77bf4c7ce29d018e3725c2ec025c6955f5aa/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=b79a77bf4c7ce29d018e3725c2ec025c6955f5aa",
        "patch": "@@ -463,25 +463,6 @@ void WalletModel::UnlockContext::CopyFrom(UnlockContext&& rhs)\n     rhs.relock = false;\n }\n \n-void WalletModel::loadReceiveRequests(std::vector<std::string>& vReceiveRequests)\n-{\n-    vReceiveRequests = m_wallet->getDestValues(\"rr\"); // receive request\n-}\n-\n-bool WalletModel::saveReceiveRequest(const std::string &sAddress, const int64_t nId, const std::string &sRequest)\n-{\n-    CTxDestination dest = DecodeDestination(sAddress);\n-\n-    std::stringstream ss;\n-    ss << nId;\n-    std::string key = \"rr\" + ss.str(); // \"rr\" prefix = \"receive request\" in destdata\n-\n-    if (sRequest.empty())\n-        return m_wallet->eraseDestData(dest, key);\n-    else\n-        return m_wallet->addDestData(dest, key, sRequest);\n-}\n-\n bool WalletModel::bumpFee(uint256 hash, uint256& new_hash)\n {\n     CCoinControl coin_control;"
      },
      {
        "sha": "72a1671146d24f17534476b954336819d7850980",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b79a77bf4c7ce29d018e3725c2ec025c6955f5aa/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b79a77bf4c7ce29d018e3725c2ec025c6955f5aa/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=b79a77bf4c7ce29d018e3725c2ec025c6955f5aa",
        "patch": "@@ -135,9 +135,6 @@ class WalletModel : public QObject\n \n     UnlockContext requestUnlock();\n \n-    void loadReceiveRequests(std::vector<std::string>& vReceiveRequests);\n-    bool saveReceiveRequest(const std::string &sAddress, const int64_t nId, const std::string &sRequest);\n-\n     bool bumpFee(uint256 hash, uint256& new_hash);\n \n     static bool isWalletEnabled();"
      },
      {
        "sha": "9a4b077b5ac5ad38ae6710759b038132a3342ad6",
        "filename": "src/wallet/interfaces.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 12,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b79a77bf4c7ce29d018e3725c2ec025c6955f5aa/src/wallet/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b79a77bf4c7ce29d018e3725c2ec025c6955f5aa/src/wallet/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/interfaces.cpp?ref=b79a77bf4c7ce29d018e3725c2ec025c6955f5aa",
        "patch": "@@ -199,22 +199,14 @@ class WalletImpl : public Wallet\n         }\n         return result;\n     }\n-    bool addDestData(const CTxDestination& dest, const std::string& key, const std::string& value) override\n-    {\n+    std::vector<std::string> getAddressReceiveRequests() override {\n         LOCK(m_wallet->cs_wallet);\n-        WalletBatch batch{m_wallet->GetDatabase()};\n-        return m_wallet->AddDestData(batch, dest, key, value);\n+        return m_wallet->GetAddressReceiveRequests();\n     }\n-    bool eraseDestData(const CTxDestination& dest, const std::string& key) override\n-    {\n+    bool setAddressReceiveRequest(const CTxDestination& dest, const std::string& id, const std::string& value) override {\n         LOCK(m_wallet->cs_wallet);\n         WalletBatch batch{m_wallet->GetDatabase()};\n-        return m_wallet->EraseDestData(batch, dest, key);\n-    }\n-    std::vector<std::string> getDestValues(const std::string& prefix) override\n-    {\n-        LOCK(m_wallet->cs_wallet);\n-        return m_wallet->GetDestValues(prefix);\n+        return m_wallet->SetAddressReceiveRequest(batch, dest, id, value);\n     }\n     void lockCoin(const COutPoint& output) override\n     {"
      },
      {
        "sha": "471ab67b322830524ce7268da6541307e0e014bf",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b79a77bf4c7ce29d018e3725c2ec025c6955f5aa/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b79a77bf4c7ce29d018e3725c2ec025c6955f5aa/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=b79a77bf4c7ce29d018e3725c2ec025c6955f5aa",
        "patch": "@@ -390,11 +390,11 @@ BOOST_AUTO_TEST_CASE(LoadReceiveRequests)\n     CTxDestination dest = PKHash();\n     LOCK(m_wallet.cs_wallet);\n     WalletBatch batch{m_wallet.GetDatabase()};\n-    m_wallet.AddDestData(batch, dest, \"misc\", \"val_misc\");\n-    m_wallet.AddDestData(batch, dest, \"rr0\", \"val_rr0\");\n-    m_wallet.AddDestData(batch, dest, \"rr1\", \"val_rr1\");\n+    m_wallet.SetAddressUsed(batch, dest, true);\n+    m_wallet.SetAddressReceiveRequest(batch, dest, \"0\", \"val_rr0\");\n+    m_wallet.SetAddressReceiveRequest(batch, dest, \"1\", \"val_rr1\");\n \n-    auto values = m_wallet.GetDestValues(\"rr\");\n+    auto values = m_wallet.GetAddressReceiveRequests();\n     BOOST_CHECK_EQUAL(values.size(), 2U);\n     BOOST_CHECK_EQUAL(values[0], \"val_rr0\");\n     BOOST_CHECK_EQUAL(values[1], \"val_rr1\");"
      },
      {
        "sha": "90e5c7f7d474cf96bb4db8f0d0d7c6d743695947",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 20,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b79a77bf4c7ce29d018e3725c2ec025c6955f5aa/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b79a77bf4c7ce29d018e3725c2ec025c6955f5aa/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=b79a77bf4c7ce29d018e3725c2ec025c6955f5aa",
        "patch": "@@ -813,12 +813,11 @@ void CWallet::SetSpentKeyState(WalletBatch& batch, const uint256& hash, unsigned\n     CTxDestination dst;\n     if (ExtractDestination(srctx->tx->vout[n].scriptPubKey, dst)) {\n         if (IsMine(dst)) {\n-            if (used && !GetDestData(dst, \"used\", nullptr)) {\n-                if (AddDestData(batch, dst, \"used\", \"p\")) { // p for \"present\", opposite of absent (null)\n+            if (used != IsAddressUsed(dst)) {\n+                if (used) {\n                     tx_destinations.insert(dst);\n                 }\n-            } else if (!used && GetDestData(dst, \"used\", nullptr)) {\n-                EraseDestData(batch, dst, \"used\");\n+                SetAddressUsed(batch, dst, used);\n             }\n         }\n     }\n@@ -834,23 +833,23 @@ bool CWallet::IsSpentKey(const uint256& hash, unsigned int n) const\n         if (!ExtractDestination(srctx->tx->vout[n].scriptPubKey, dest)) {\n             return false;\n         }\n-        if (GetDestData(dest, \"used\", nullptr)) {\n+        if (IsAddressUsed(dest)) {\n             return true;\n         }\n         if (IsLegacy()) {\n             LegacyScriptPubKeyMan* spk_man = GetLegacyScriptPubKeyMan();\n             assert(spk_man != nullptr);\n             for (const auto& keyid : GetAffectedKeys(srctx->tx->vout[n].scriptPubKey, *spk_man)) {\n                 WitnessV0KeyHash wpkh_dest(keyid);\n-                if (GetDestData(wpkh_dest, \"used\", nullptr)) {\n+                if (IsAddressUsed(wpkh_dest)) {\n                     return true;\n                 }\n                 ScriptHash sh_wpkh_dest(GetScriptForDestination(wpkh_dest));\n-                if (GetDestData(sh_wpkh_dest, \"used\", nullptr)) {\n+                if (IsAddressUsed(sh_wpkh_dest)) {\n                     return true;\n                 }\n                 PKHash pkh_dest(keyid);\n-                if (GetDestData(pkh_dest, \"used\", nullptr)) {\n+                if (IsAddressUsed(pkh_dest)) {\n                     return true;\n                 }\n             }\n@@ -3761,45 +3760,45 @@ unsigned int CWallet::ComputeTimeSmart(const CWalletTx& wtx) const\n     return nTimeSmart;\n }\n \n-bool CWallet::AddDestData(WalletBatch& batch, const CTxDestination &dest, const std::string &key, const std::string &value)\n+bool CWallet::SetAddressUsed(WalletBatch& batch, const CTxDestination& dest, bool used)\n {\n+    const std::string key{\"used\"};\n     if (std::get_if<CNoDestination>(&dest))\n         return false;\n \n+    if (!used) {\n+        auto* data = util::FindKey(m_address_book, dest);\n+        return data && data->destdata.erase(key) && batch.EraseDestData(EncodeDestination(dest), key);\n+    }\n+\n+    const std::string value{\"1\"};\n     m_address_book[dest].destdata.insert(std::make_pair(key, value));\n     return batch.WriteDestData(EncodeDestination(dest), key, value);\n }\n \n-bool CWallet::EraseDestData(WalletBatch& batch, const CTxDestination &dest, const std::string &key)\n-{\n-    if (!m_address_book[dest].destdata.erase(key))\n-        return false;\n-    return batch.EraseDestData(EncodeDestination(dest), key);\n-}\n-\n void CWallet::LoadDestData(const CTxDestination &dest, const std::string &key, const std::string &value)\n {\n     m_address_book[dest].destdata.insert(std::make_pair(key, value));\n }\n \n-bool CWallet::GetDestData(const CTxDestination &dest, const std::string &key, std::string *value) const\n+bool CWallet::IsAddressUsed(const CTxDestination& dest) const\n {\n+    const std::string key{\"used\"};\n     std::map<CTxDestination, CAddressBookData>::const_iterator i = m_address_book.find(dest);\n     if(i != m_address_book.end())\n     {\n         CAddressBookData::StringMap::const_iterator j = i->second.destdata.find(key);\n         if(j != i->second.destdata.end())\n         {\n-            if(value)\n-                *value = j->second;\n             return true;\n         }\n     }\n     return false;\n }\n \n-std::vector<std::string> CWallet::GetDestValues(const std::string& prefix) const\n+std::vector<std::string> CWallet::GetAddressReceiveRequests() const\n {\n+    const std::string prefix{\"rr\"};\n     std::vector<std::string> values;\n     for (const auto& address : m_address_book) {\n         for (const auto& data : address.second.destdata) {\n@@ -3811,6 +3810,18 @@ std::vector<std::string> CWallet::GetDestValues(const std::string& prefix) const\n     return values;\n }\n \n+bool CWallet::SetAddressReceiveRequest(WalletBatch& batch, const CTxDestination& dest, const std::string& id, const std::string& value)\n+{\n+    const std::string key{\"rr\" + id}; // \"rr\" prefix = \"receive request\" in destdata\n+    CAddressBookData& data = m_address_book.at(dest);\n+    if (value.empty()) {\n+        return data.destdata.erase(key) && batch.EraseDestData(EncodeDestination(dest), key);\n+    } else {\n+        data.destdata[key] = value;\n+        return batch.WriteDestData(EncodeDestination(dest), key, value);\n+    }\n+}\n+\n std::unique_ptr<WalletDatabase> MakeWalletDatabase(const std::string& name, const DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error_string)\n {\n     // Do some checking on wallet path. It should be either a:"
      },
      {
        "sha": "798993fa84255b5f51970b44ecfc89c5c2437893",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 6,
        "deletions": 11,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b79a77bf4c7ce29d018e3725c2ec025c6955f5aa/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b79a77bf4c7ce29d018e3725c2ec025c6955f5aa/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=b79a77bf4c7ce29d018e3725c2ec025c6955f5aa",
        "patch": "@@ -865,19 +865,8 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n \n     bool LoadMinVersion(int nVersion) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet) { AssertLockHeld(cs_wallet); nWalletVersion = nVersion; return true; }\n \n-    /**\n-     * Adds a destination data tuple to the store, and saves it to disk\n-     * When adding new fields, take care to consider how DelAddressBook should handle it!\n-     */\n-    bool AddDestData(WalletBatch& batch, const CTxDestination& dest, const std::string& key, const std::string& value) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n-    //! Erases a destination data tuple in the store and on disk\n-    bool EraseDestData(WalletBatch& batch, const CTxDestination& dest, const std::string& key) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     //! Adds a destination data tuple to the store, without saving it to disk\n     void LoadDestData(const CTxDestination& dest, const std::string& key, const std::string& value) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n-    //! Look up a destination data tuple in the store, return true if found false otherwise\n-    bool GetDestData(const CTxDestination& dest, const std::string& key, std::string* value) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n-    //! Get all destination values matching a prefix.\n-    std::vector<std::string> GetDestValues(const std::string& prefix) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     //! Holds a timestamp at which point the wallet is scheduled (externally) to be relocked. Caller must arrange for actual relocking to occur via Lock().\n     int64_t nRelockTime GUARDED_BY(cs_wallet){0};\n@@ -1084,6 +1073,12 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n \n     bool DelAddressBook(const CTxDestination& address);\n \n+    bool IsAddressUsed(const CTxDestination& dest) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    bool SetAddressUsed(WalletBatch& batch, const CTxDestination& dest, bool used) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+\n+    std::vector<std::string> GetAddressReceiveRequests() const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    bool SetAddressReceiveRequest(WalletBatch& batch, const CTxDestination& dest, const std::string& id, const std::string& value) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+\n     unsigned int GetKeyPoolSize() const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     //! signify that a particular wallet feature is now used."
      }
    ]
  },
  {
    "sha": "7a05b1dee2fa68b32bfb19e273fb55a5b3836a3e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YTA1YjFkZWUyZmE2OGIzMmJmYjE5ZTI3M2ZiNTVhNWIzODM2YTNl",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-04-12T17:40:43Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-03-03T14:19:35Z"
      },
      "message": "refactor: Remove CAddressBookData::destdata\n\nThis is cleanup that doesn't change external behavior.\n\n- Removes awkward `StringMap` intermediate representation\n- Deals with receive request \"rr\" keys in walletdb.cpp instead of all over qt, wallet, and interfaces code\n- Deals with destination \"used\" keys in walletdb.cpp instead of all over wallet code\n- Adds test coverage\n- Reduces code (+85/-138 lines)\n- Reduces memory usage\n\nThis PR doesn't change externally observable behavior. Internally, only change in behavior is that EraseDestData deletes directly from database because the `StringMap` is gone. This is more direct and efficient because it uses a single btree lookup and scan instead of multiple lookups\n\nMotivation for this cleanup is making changes like #18550, #18192, #13756 easier to reason about and less likely to result in unintended behavior and bugs",
      "tree": {
        "sha": "4b818cfac2144401ad9b919fa1fac82091354337",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4b818cfac2144401ad9b919fa1fac82091354337"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7a05b1dee2fa68b32bfb19e273fb55a5b3836a3e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a05b1dee2fa68b32bfb19e273fb55a5b3836a3e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7a05b1dee2fa68b32bfb19e273fb55a5b3836a3e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a05b1dee2fa68b32bfb19e273fb55a5b3836a3e/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b79a77bf4c7ce29d018e3725c2ec025c6955f5aa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b79a77bf4c7ce29d018e3725c2ec025c6955f5aa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b79a77bf4c7ce29d018e3725c2ec025c6955f5aa"
      }
    ],
    "stats": {
      "total": 225,
      "additions": 142,
      "deletions": 83
    },
    "files": [
      {
        "sha": "681aadf0e0cf8fa1603ea134b2c1217fba9c3ba3",
        "filename": "src/wallet/bdb.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 1,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a05b1dee2fa68b32bfb19e273fb55a5b3836a3e/src/wallet/bdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a05b1dee2fa68b32bfb19e273fb55a5b3836a3e/src/wallet/bdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.cpp?ref=7a05b1dee2fa68b32bfb19e273fb55a5b3836a3e",
        "patch": "@@ -657,7 +657,7 @@ bool BerkeleyBatch::StartCursor()\n     assert(!m_cursor);\n     if (!pdb)\n         return false;\n-    int ret = pdb->cursor(nullptr, &m_cursor, 0);\n+    int ret = pdb->cursor(activeTxn, &m_cursor, 0);\n     return ret == 0;\n }\n \n@@ -800,6 +800,22 @@ bool BerkeleyBatch::HasKey(CDataStream&& key)\n     return ret == 0;\n }\n \n+bool BerkeleyBatch::ErasePrefix(Span<uint8_t> prefix)\n+{\n+    TxnBegin();\n+    StartCursor();\n+    Dbt prefix_key(prefix.data(), prefix.size()), prefix_value;\n+    int ret = m_cursor->get(&prefix_key, &prefix_value, DB_SET_RANGE);\n+    for (int flag = DB_CURRENT; ret == 0; flag = DB_NEXT) {\n+        SafeDbt key, value;\n+        if ((ret = m_cursor->get(key, value, flag)) != 0 || key.get_size() < prefix.size() || memcmp(key.get_data(), prefix.data(), prefix.size()) != 0) break;\n+        m_cursor->del(0);\n+    }\n+    CloseCursor();\n+    TxnCommit();\n+    return ret == 0 || ret == DB_NOTFOUND;\n+}\n+\n void BerkeleyDatabase::AddRef()\n {\n     LOCK(cs_db);"
      },
      {
        "sha": "4a96eac5dc5e92945efa3cb3b2fcf12d2ca9e558",
        "filename": "src/wallet/bdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a05b1dee2fa68b32bfb19e273fb55a5b3836a3e/src/wallet/bdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a05b1dee2fa68b32bfb19e273fb55a5b3836a3e/src/wallet/bdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.h?ref=7a05b1dee2fa68b32bfb19e273fb55a5b3836a3e",
        "patch": "@@ -192,6 +192,7 @@ class BerkeleyBatch : public DatabaseBatch\n     bool WriteKey(CDataStream&& key, CDataStream&& value, bool overwrite = true) override;\n     bool EraseKey(CDataStream&& key) override;\n     bool HasKey(CDataStream&& key) override;\n+    bool ErasePrefix(Span<uint8_t> prefix) override;\n \n protected:\n     Db* pdb;"
      },
      {
        "sha": "2c811a68b653f284b0d0c311928f80c866c7fa38",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a05b1dee2fa68b32bfb19e273fb55a5b3836a3e/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a05b1dee2fa68b32bfb19e273fb55a5b3836a3e/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=7a05b1dee2fa68b32bfb19e273fb55a5b3836a3e",
        "patch": "@@ -91,6 +91,8 @@ class DatabaseBatch\n         return HasKey(std::move(ssKey));\n     }\n \n+    virtual bool ErasePrefix(Span<uint8_t> prefix) = 0;\n+\n     virtual bool StartCursor() = 0;\n     virtual bool ReadAtCursor(CDataStream& ssKey, CDataStream& ssValue, bool& complete) = 0;\n     virtual void CloseCursor() = 0;\n@@ -163,6 +165,7 @@ class DummyBatch : public DatabaseBatch\n     bool WriteKey(CDataStream&& key, CDataStream&& value, bool overwrite=true) override { return true; }\n     bool EraseKey(CDataStream&& key) override { return true; }\n     bool HasKey(CDataStream&& key) override { return true; }\n+    bool ErasePrefix(Span<uint8_t> prefix) override { return true; }\n \n public:\n     void Flush() override {}"
      },
      {
        "sha": "e2e2fb28236c8328d027ea34c964cb5e3d890aa6",
        "filename": "src/wallet/sqlite.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 8,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a05b1dee2fa68b32bfb19e273fb55a5b3836a3e/src/wallet/sqlite.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a05b1dee2fa68b32bfb19e273fb55a5b3836a3e/src/wallet/sqlite.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/sqlite.cpp?ref=7a05b1dee2fa68b32bfb19e273fb55a5b3836a3e",
        "patch": "@@ -91,6 +91,11 @@ void SQLiteBatch::SetupSQLStatements()\n             throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n         }\n     }\n+    if (!m_delete_prefix_stmt) {\n+        if ((res = sqlite3_prepare_v2(m_database.m_db, \"DELETE FROM main WHERE instr(?, key) = 1\", -1, &m_delete_prefix_stmt, nullptr)) != SQLITE_OK) {\n+            throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements: %s\\n\", sqlite3_errstr(res)));\n+        }\n+    }\n     if (!m_cursor_stmt) {\n         if ((res = sqlite3_prepare_v2(m_database.m_db, \"SELECT key, value FROM main\", -1, &m_cursor_stmt, nullptr)) != SQLITE_OK) {\n             throw std::runtime_error(strprintf(\"SQLiteDatabase: Failed to setup SQL statements : %s\\n\", sqlite3_errstr(res)));\n@@ -370,6 +375,10 @@ void SQLiteBatch::Close()\n     if (ret != SQLITE_OK) {\n         LogPrintf(\"SQLiteBatch: Batch closed but could not finalize delete statement: %s\\n\", sqlite3_errstr(ret));\n     }\n+    ret = sqlite3_finalize(m_delete_prefix_stmt);\n+    if (ret != SQLITE_OK) {\n+        LogPrintf(\"SQLiteBatch: Batch closed but could not finalize delete prefix statement: %s\\n\", sqlite3_errstr(ret));\n+    }\n     ret = sqlite3_finalize(m_cursor_stmt);\n     if (ret != SQLITE_OK) {\n         LogPrintf(\"SQLiteBatch: Batch closed but could not finalize cursor statement: %s\\n\", sqlite3_errstr(ret));\n@@ -378,6 +387,7 @@ void SQLiteBatch::Close()\n     m_insert_stmt = nullptr;\n     m_overwrite_stmt = nullptr;\n     m_delete_stmt = nullptr;\n+    m_delete_prefix_stmt = nullptr;\n     m_cursor_stmt = nullptr;\n }\n \n@@ -453,30 +463,40 @@ bool SQLiteBatch::WriteKey(CDataStream&& key, CDataStream&& value, bool overwrit\n     return res == SQLITE_DONE;\n }\n \n-bool SQLiteBatch::EraseKey(CDataStream&& key)\n+bool SQLiteBatch::ExecStatement(sqlite3_stmt* stmt, Span<const uint8_t> blob)\n {\n     if (!m_database.m_db) return false;\n-    assert(m_delete_stmt);\n+    assert(stmt);\n \n     // Bind: leftmost parameter in statement is index 1\n-    int res = sqlite3_bind_blob(m_delete_stmt, 1, key.data(), key.size(), SQLITE_STATIC);\n+    int res = sqlite3_bind_blob(stmt, 1, blob.data(), blob.size(), SQLITE_STATIC);\n     if (res != SQLITE_OK) {\n         LogPrintf(\"%s: Unable to bind statement: %s\\n\", __func__, sqlite3_errstr(res));\n-        sqlite3_clear_bindings(m_delete_stmt);\n-        sqlite3_reset(m_delete_stmt);\n+        sqlite3_clear_bindings(stmt);\n+        sqlite3_reset(stmt);\n         return false;\n     }\n \n     // Execute\n-    res = sqlite3_step(m_delete_stmt);\n-    sqlite3_clear_bindings(m_delete_stmt);\n-    sqlite3_reset(m_delete_stmt);\n+    res = sqlite3_step(stmt);\n+    sqlite3_clear_bindings(stmt);\n+    sqlite3_reset(stmt);\n     if (res != SQLITE_DONE) {\n         LogPrintf(\"%s: Unable to execute statement: %s\\n\", __func__, sqlite3_errstr(res));\n     }\n     return res == SQLITE_DONE;\n }\n \n+bool SQLiteBatch::EraseKey(CDataStream&& key)\n+{\n+    return ExecStatement(m_delete_stmt, key);\n+}\n+\n+bool SQLiteBatch::ErasePrefix(Span<uint8_t> prefix)\n+{\n+    return ExecStatement(m_delete_prefix_stmt, prefix);\n+}\n+\n bool SQLiteBatch::HasKey(CDataStream&& key)\n {\n     if (!m_database.m_db) return false;"
      },
      {
        "sha": "d927f7d923eab845f8cd7339bd7fbf952df0a327",
        "filename": "src/wallet/sqlite.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a05b1dee2fa68b32bfb19e273fb55a5b3836a3e/src/wallet/sqlite.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a05b1dee2fa68b32bfb19e273fb55a5b3836a3e/src/wallet/sqlite.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/sqlite.h?ref=7a05b1dee2fa68b32bfb19e273fb55a5b3836a3e",
        "patch": "@@ -24,14 +24,17 @@ class SQLiteBatch : public DatabaseBatch\n     sqlite3_stmt* m_insert_stmt{nullptr};\n     sqlite3_stmt* m_overwrite_stmt{nullptr};\n     sqlite3_stmt* m_delete_stmt{nullptr};\n+    sqlite3_stmt* m_delete_prefix_stmt{nullptr};\n     sqlite3_stmt* m_cursor_stmt{nullptr};\n \n     void SetupSQLStatements();\n+    bool ExecStatement(sqlite3_stmt* stmt, Span<const uint8_t> blob);\n \n     bool ReadKey(CDataStream&& key, CDataStream& value) override;\n     bool WriteKey(CDataStream&& key, CDataStream&& value, bool overwrite = true) override;\n     bool EraseKey(CDataStream&& key) override;\n     bool HasKey(CDataStream&& key) override;\n+    bool ErasePrefix(Span<uint8_t> prefix) override;\n \n public:\n     explicit SQLiteBatch(SQLiteDatabase& database);"
      },
      {
        "sha": "667e1b6c2496d63a14abadee94e59805972120ba",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 46,
        "deletions": 12,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a05b1dee2fa68b32bfb19e273fb55a5b3836a3e/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a05b1dee2fa68b32bfb19e273fb55a5b3836a3e/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=7a05b1dee2fa68b32bfb19e273fb55a5b3836a3e",
        "patch": "@@ -385,19 +385,53 @@ BOOST_AUTO_TEST_CASE(ComputeTimeSmart)\n     SetMockTime(0);\n }\n \n-BOOST_AUTO_TEST_CASE(LoadReceiveRequests)\n+void TestLoadWallet(const std::string& name, std::function<void(std::shared_ptr<CWallet>)> f)\n {\n-    CTxDestination dest = PKHash();\n-    LOCK(m_wallet.cs_wallet);\n-    WalletBatch batch{m_wallet.GetDatabase()};\n-    m_wallet.SetAddressUsed(batch, dest, true);\n-    m_wallet.SetAddressReceiveRequest(batch, dest, \"0\", \"val_rr0\");\n-    m_wallet.SetAddressReceiveRequest(batch, dest, \"1\", \"val_rr1\");\n-\n-    auto values = m_wallet.GetAddressReceiveRequests();\n-    BOOST_CHECK_EQUAL(values.size(), 2U);\n-    BOOST_CHECK_EQUAL(values[0], \"val_rr0\");\n-    BOOST_CHECK_EQUAL(values[1], \"val_rr1\");\n+    NodeContext node;\n+    auto chain = interfaces::MakeChain(node);\n+    DatabaseOptions options;\n+    DatabaseStatus status;\n+    bilingual_str error;\n+    std::vector<bilingual_str> warnings;\n+    auto database = MakeWalletDatabase(name, options, status, error);\n+    auto wallet = std::make_shared<CWallet>(chain.get(), \"\", std::move(database));\n+    bool first_run;\n+    wallet->LoadWallet(first_run);\n+    WITH_LOCK(wallet->cs_wallet, f(wallet));\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(LoadReceiveRequests, TestingSetup)\n+{\n+    const std::string& name = \"receive-requests\";\n+    TestLoadWallet(name, [](std::shared_ptr<CWallet> wallet) EXCLUSIVE_LOCKS_REQUIRED(wallet->cs_wallet) {\n+        BOOST_CHECK(!wallet->m_address_book[PKHash()].IsUsed());\n+        WalletBatch batch{wallet->GetDatabase()};\n+        BOOST_CHECK(batch.WriteUsed(PKHash(), true));\n+        BOOST_CHECK(batch.WriteUsed(ScriptHash(), true));\n+        BOOST_CHECK(wallet->SetAddressReceiveRequest(batch, PKHash(), \"0\", \"val_rr00\"));\n+        BOOST_CHECK(wallet->SetAddressReceiveRequest(batch, PKHash(), \"0\", \"\"));\n+        BOOST_CHECK(!wallet->SetAddressReceiveRequest(batch, PKHash(), \"0\", \"\"));\n+        BOOST_CHECK(wallet->SetAddressReceiveRequest(batch, PKHash(), \"1\", \"val_rr10\"));\n+        BOOST_CHECK(wallet->SetAddressReceiveRequest(batch, PKHash(), \"1\", \"val_rr11\"));\n+        BOOST_CHECK(wallet->SetAddressReceiveRequest(batch, ScriptHash(), \"2\", \"val_rr20\"));\n+    });\n+    TestLoadWallet(name, [](std::shared_ptr<CWallet> wallet) EXCLUSIVE_LOCKS_REQUIRED(wallet->cs_wallet) {\n+        BOOST_CHECK(wallet->m_address_book[PKHash()].IsUsed());\n+        BOOST_CHECK(wallet->m_address_book[ScriptHash()].IsUsed());\n+        auto requests = wallet->GetAddressReceiveRequests();\n+        auto erequests = {\"val_rr11\", \"val_rr20\"};\n+        BOOST_CHECK_EQUAL_COLLECTIONS(requests.begin(), requests.end(), std::begin(erequests), std::end(erequests));\n+        WalletBatch batch{wallet->GetDatabase()};\n+        BOOST_CHECK(batch.WriteUsed(PKHash(), false));\n+        BOOST_CHECK(batch.EraseDestData(ScriptHash()));\n+    });\n+    TestLoadWallet(name, [](std::shared_ptr<CWallet> wallet) EXCLUSIVE_LOCKS_REQUIRED(wallet->cs_wallet) {\n+        BOOST_CHECK(!wallet->m_address_book[PKHash()].IsUsed());\n+        BOOST_CHECK(!wallet->m_address_book[ScriptHash()].IsUsed());\n+        auto requests = wallet->GetAddressReceiveRequests();\n+        auto erequests = {\"val_rr11\"};\n+        BOOST_CHECK_EQUAL_COLLECTIONS(requests.begin(), requests.end(), std::begin(erequests), std::end(erequests));\n+    });\n }\n \n // Test some watch-only LegacyScriptPubKeyMan methods by the procedure of loading (LoadWatchOnly),"
      },
      {
        "sha": "5d8a2c839e33610b57b132f3bf94d1cbead21a20",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 50,
        "changes": 61,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a05b1dee2fa68b32bfb19e273fb55a5b3836a3e/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a05b1dee2fa68b32bfb19e273fb55a5b3836a3e/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=7a05b1dee2fa68b32bfb19e273fb55a5b3836a3e",
        "patch": "@@ -3282,12 +3282,7 @@ bool CWallet::DelAddressBook(const CTxDestination& address)\n             return false;\n         }\n         // Delete destdata tuples associated with address\n-        std::string strAddress = EncodeDestination(address);\n-        for (const std::pair<const std::string, std::string> &item : m_address_book[address].destdata)\n-        {\n-            batch.EraseDestData(strAddress, item.first);\n-        }\n-        m_address_book.erase(address);\n+        batch.EraseDestData(address);\n         is_mine = IsMine(address) != ISMINE_NO;\n     }\n \n@@ -3762,64 +3757,30 @@ unsigned int CWallet::ComputeTimeSmart(const CWalletTx& wtx) const\n \n bool CWallet::SetAddressUsed(WalletBatch& batch, const CTxDestination& dest, bool used)\n {\n-    const std::string key{\"used\"};\n-    if (std::get_if<CNoDestination>(&dest))\n-        return false;\n-\n-    if (!used) {\n-        auto* data = util::FindKey(m_address_book, dest);\n-        return data && data->destdata.erase(key) && batch.EraseDestData(EncodeDestination(dest), key);\n-    }\n-\n-    const std::string value{\"1\"};\n-    m_address_book[dest].destdata.insert(std::make_pair(key, value));\n-    return batch.WriteDestData(EncodeDestination(dest), key, value);\n-}\n-\n-void CWallet::LoadDestData(const CTxDestination &dest, const std::string &key, const std::string &value)\n-{\n-    m_address_book[dest].destdata.insert(std::make_pair(key, value));\n+    m_address_book[dest].SetUsed(used);\n+    return batch.WriteUsed(dest, used);\n }\n \n bool CWallet::IsAddressUsed(const CTxDestination& dest) const\n {\n-    const std::string key{\"used\"};\n-    std::map<CTxDestination, CAddressBookData>::const_iterator i = m_address_book.find(dest);\n-    if(i != m_address_book.end())\n-    {\n-        CAddressBookData::StringMap::const_iterator j = i->second.destdata.find(key);\n-        if(j != i->second.destdata.end())\n-        {\n-            return true;\n-        }\n-    }\n-    return false;\n+    auto it = m_address_book.find(dest);\n+    return it != m_address_book.end() && it->second.IsUsed();\n }\n \n std::vector<std::string> CWallet::GetAddressReceiveRequests() const\n {\n-    const std::string prefix{\"rr\"};\n-    std::vector<std::string> values;\n-    for (const auto& address : m_address_book) {\n-        for (const auto& data : address.second.destdata) {\n-            if (!data.first.compare(0, prefix.size(), prefix)) {\n-                values.emplace_back(data.second);\n-            }\n+    std::vector<std::string> requests;\n+    for (const auto& dest : m_address_book) {\n+        for (const auto& request : dest.second.GetReceiveRequests()) {\n+            requests.emplace_back(request.second);\n         }\n     }\n-    return values;\n+    return requests;\n }\n \n bool CWallet::SetAddressReceiveRequest(WalletBatch& batch, const CTxDestination& dest, const std::string& id, const std::string& value)\n {\n-    const std::string key{\"rr\" + id}; // \"rr\" prefix = \"receive request\" in destdata\n-    CAddressBookData& data = m_address_book.at(dest);\n-    if (value.empty()) {\n-        return data.destdata.erase(key) && batch.EraseDestData(EncodeDestination(dest), key);\n-    } else {\n-        data.destdata[key] = value;\n-        return batch.WriteDestData(EncodeDestination(dest), key, value);\n-    }\n+    return m_address_book[dest].SetReceiveRequest(id, value) && batch.WriteReceiveRequest(dest, id, value);\n }\n \n std::unique_ptr<WalletDatabase> MakeWalletDatabase(const std::string& name, const DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error_string)"
      },
      {
        "sha": "175f3c494317abe240e19e9ea7d71a9a1be05b18",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 11,
        "deletions": 3,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a05b1dee2fa68b32bfb19e273fb55a5b3836a3e/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a05b1dee2fa68b32bfb19e273fb55a5b3836a3e/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=7a05b1dee2fa68b32bfb19e273fb55a5b3836a3e",
        "patch": "@@ -190,21 +190,29 @@ class CAddressBookData\n {\n private:\n     bool m_change{true};\n+    bool m_used{false};\n     std::string m_label;\n+    std::map<std::string, std::string> m_receive_requests;\n public:\n     std::string purpose;\n \n     CAddressBookData() : purpose(\"unknown\") {}\n \n-    typedef std::map<std::string, std::string> StringMap;\n-    StringMap destdata;\n-\n     bool IsChange() const { return m_change; }\n+    bool IsUsed() const { return m_used; }\n+    void SetUsed(bool used) { m_used = used;}\n     const std::string& GetLabel() const { return m_label; }\n     void SetLabel(const std::string& label) {\n         m_change = false;\n         m_label = label;\n     }\n+    const std::map<std::string, std::string>& GetReceiveRequests() const { return m_receive_requests; }\n+    bool SetReceiveRequest(const std::string& id, const std::string& value)\n+    {\n+        if (value.empty()) return m_receive_requests.erase(id);\n+        m_receive_requests[id] = value;\n+        return true;\n+    }\n };\n \n struct CRecipient"
      },
      {
        "sha": "bb4216143879db10b5670c25eb7054ec9ffd392f",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 5,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a05b1dee2fa68b32bfb19e273fb55a5b3836a3e/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a05b1dee2fa68b32bfb19e273fb55a5b3836a3e/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=7a05b1dee2fa68b32bfb19e273fb55a5b3836a3e",
        "patch": "@@ -546,7 +546,12 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             ssKey >> strAddress;\n             ssKey >> strKey;\n             ssValue >> strValue;\n-            pwallet->LoadDestData(DecodeDestination(strAddress), strKey, strValue);\n+            CAddressBookData& data = pwallet->m_address_book[DecodeDestination(strAddress)];\n+            if (strKey.compare(\"used\") == 0) {\n+                data.SetUsed(true);\n+            } else if (strKey.compare(0, 2, \"rr\") == 0) {\n+                data.SetReceiveRequest(strKey.substr(2), std::move(strValue));\n+            }\n         } else if (strType == DBKeys::HDCHAIN) {\n             CHDChain chain;\n             ssValue >> chain;\n@@ -968,16 +973,24 @@ void MaybeCompactWalletDB()\n     fOneThread = false;\n }\n \n-bool WalletBatch::WriteDestData(const std::string &address, const std::string &key, const std::string &value)\n+bool WalletBatch::WriteUsed(const CTxDestination& dest, bool used)\n {\n-    return WriteIC(std::make_pair(DBKeys::DESTDATA, std::make_pair(address, key)), value);\n+    auto key = std::make_pair(DBKeys::DESTDATA, std::make_pair(EncodeDestination(dest), std::string(\"used\")));\n+    return used ? WriteIC(key, std::string(\"p\")) : EraseIC(key); // p for \"present\", opposite of absent (null)\n }\n \n-bool WalletBatch::EraseDestData(const std::string &address, const std::string &key)\n+bool WalletBatch::WriteReceiveRequest(const CTxDestination& dest, const std::string& id, const std::string& receive_request)\n {\n-    return EraseIC(std::make_pair(DBKeys::DESTDATA, std::make_pair(address, key)));\n+    auto key = std::make_pair(DBKeys::DESTDATA, std::make_pair(EncodeDestination(dest), \"rr\" + id));\n+    return receive_request.empty() ? EraseIC(key) : WriteIC(key, receive_request);\n }\n \n+bool WalletBatch::EraseDestData(const CTxDestination& dest)\n+{\n+    CDataStream prefix(SER_DISK, CLIENT_VERSION);\n+    prefix << DBKeys::DESTDATA << EncodeDestination(dest);\n+    return m_batch->ErasePrefix(prefix);\n+}\n \n bool WalletBatch::WriteHDChain(const CHDChain& chain)\n {"
      },
      {
        "sha": "babdd88d7bf47710d2d5c36713cc65bd226ac36a",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a05b1dee2fa68b32bfb19e273fb55a5b3836a3e/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a05b1dee2fa68b32bfb19e273fb55a5b3836a3e/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=7a05b1dee2fa68b32bfb19e273fb55a5b3836a3e",
        "patch": "@@ -8,6 +8,7 @@\n \n #include <amount.h>\n #include <script/sign.h>\n+#include <script/standard.h>\n #include <wallet/db.h>\n #include <wallet/walletutil.h>\n #include <key.h>\n@@ -247,10 +248,9 @@ class WalletBatch\n     bool WriteDescriptorDerivedCache(const CExtPubKey& xpub, const uint256& desc_id, uint32_t key_exp_index, uint32_t der_index);\n     bool WriteDescriptorParentCache(const CExtPubKey& xpub, const uint256& desc_id, uint32_t key_exp_index);\n \n-    /// Write destination data key,value tuple to database\n-    bool WriteDestData(const std::string &address, const std::string &key, const std::string &value);\n-    /// Erase destination data tuple from wallet database\n-    bool EraseDestData(const std::string &address, const std::string &key);\n+    bool WriteUsed(const CTxDestination& dest, bool used);\n+    bool WriteReceiveRequest(const CTxDestination& dest, const std::string& id, const std::string& receive_request);\n+    bool EraseDestData(const CTxDestination& dest);\n \n     bool WriteActiveScriptPubKeyMan(uint8_t type, const uint256& id, bool internal);\n "
      }
    ]
  }
]