[
  {
    "sha": "9d4b4b2c2c49774523de740d6492ee5b1ee15e74",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZDRiNGIyYzJjNDk3NzQ1MjNkZTc0MGQ2NDkyZWU1YjFlZTE1ZTc0",
    "commit": {
      "author": {
        "name": "Elle Mouton",
        "email": "elle.mouton@gmail.com",
        "date": "2020-10-20T18:09:55Z"
      },
      "committer": {
        "name": "Elle Mouton",
        "email": "elle.mouton@gmail.com",
        "date": "2020-10-23T12:14:57Z"
      },
      "message": "refactor: Avoid double to int cast for nCheckFrequency\n\nUse a ratio instead of a frequency that requires a double to int cast\nfor determining how often a mempool sanity check should run.",
      "tree": {
        "sha": "017771d3a7b54af87ceccc1003234f3b940f889d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/017771d3a7b54af87ceccc1003234f3b940f889d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9d4b4b2c2c49774523de740d6492ee5b1ee15e74",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d4b4b2c2c49774523de740d6492ee5b1ee15e74",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9d4b4b2c2c49774523de740d6492ee5b1ee15e74",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d4b4b2c2c49774523de740d6492ee5b1ee15e74/comments",
    "author": {
      "login": "ellemouton",
      "id": 25280249,
      "node_id": "MDQ6VXNlcjI1MjgwMjQ5",
      "avatar_url": "https://avatars.githubusercontent.com/u/25280249?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellemouton",
      "html_url": "https://github.com/ellemouton",
      "followers_url": "https://api.github.com/users/ellemouton/followers",
      "following_url": "https://api.github.com/users/ellemouton/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellemouton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellemouton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellemouton/subscriptions",
      "organizations_url": "https://api.github.com/users/ellemouton/orgs",
      "repos_url": "https://api.github.com/users/ellemouton/repos",
      "events_url": "https://api.github.com/users/ellemouton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellemouton/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ellemouton",
      "id": 25280249,
      "node_id": "MDQ6VXNlcjI1MjgwMjQ5",
      "avatar_url": "https://avatars.githubusercontent.com/u/25280249?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellemouton",
      "html_url": "https://github.com/ellemouton",
      "followers_url": "https://api.github.com/users/ellemouton/followers",
      "following_url": "https://api.github.com/users/ellemouton/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellemouton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellemouton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellemouton/subscriptions",
      "organizations_url": "https://api.github.com/users/ellemouton/orgs",
      "repos_url": "https://api.github.com/users/ellemouton/repos",
      "events_url": "https://api.github.com/users/ellemouton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellemouton/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "88271184e82222f556d67511cc64230b0532f40d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88271184e82222f556d67511cc64230b0532f40d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/88271184e82222f556d67511cc64230b0532f40d"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 8,
      "deletions": 12
    },
    "files": [
      {
        "sha": "51a49434780765803c0a46ce2bb2aecf9f0362ad",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d4b4b2c2c49774523de740d6492ee5b1ee15e74/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d4b4b2c2c49774523de740d6492ee5b1ee15e74/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=9d4b4b2c2c49774523de740d6492ee5b1ee15e74",
        "patch": "@@ -1394,10 +1394,8 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n     assert(!node.mempool);\n     node.mempool = MakeUnique<CTxMemPool>(&::feeEstimator);\n     if (node.mempool) {\n-        int ratio = std::min<int>(std::max<int>(args.GetArg(\"-checkmempool\", chainparams.DefaultConsistencyChecks() ? 1 : 0), 0), 1000000);\n-        if (ratio != 0) {\n-            node.mempool->setSanityCheck(1.0 / ratio);\n-        }\n+        int check_ratio = std::min<int>(std::max<int>(args.GetArg(\"-checkmempool\", chainparams.DefaultConsistencyChecks() ? 1 : 0), 0), 1000000);\n+        node.mempool->setSanityCheck(check_ratio);\n     }\n \n     assert(!node.chainman);"
      },
      {
        "sha": "78af3bf833e67cffbc13e23c5b741ce674288b3e",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 6,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d4b4b2c2c49774523de740d6492ee5b1ee15e74/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d4b4b2c2c49774523de740d6492ee5b1ee15e74/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=9d4b4b2c2c49774523de740d6492ee5b1ee15e74",
        "patch": "@@ -339,7 +339,7 @@ CTxMemPool::CTxMemPool(CBlockPolicyEstimator* estimator)\n     // Sanity checks off by default for performance, because otherwise\n     // accepting transactions becomes O(N^2) where N is the number\n     // of transactions in the pool\n-    nCheckFrequency = 0;\n+    m_check_ratio = 0;\n }\n \n bool CTxMemPool::isSpent(const COutPoint& outpoint) const\n@@ -523,7 +523,7 @@ void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMem\n                 if (it2 != mapTx.end())\n                     continue;\n                 const Coin &coin = pcoins->AccessCoin(txin.prevout);\n-                if (nCheckFrequency != 0) assert(!coin.IsSpent());\n+                if (m_check_ratio != 0) assert(!coin.IsSpent());\n                 if (coin.IsSpent() || (coin.IsCoinBase() && ((signed long)nMemPoolHeight) - coin.nHeight < COINBASE_MATURITY)) {\n                     txToRemove.insert(it);\n                     break;\n@@ -620,11 +620,9 @@ static void CheckInputsAndUpdateCoins(const CTransaction& tx, CCoinsViewCache& m\n void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n {\n     LOCK(cs);\n-    if (nCheckFrequency == 0)\n-        return;\n+    if (m_check_ratio == 0) return;\n \n-    if (GetRand(std::numeric_limits<uint32_t>::max()) >= nCheckFrequency)\n-        return;\n+    if (GetRand(m_check_ratio) >= 1) return;\n \n     LogPrint(BCLog::MEMPOOL, \"Checking mempool with %u transactions and %u inputs\\n\", (unsigned int)mapTx.size(), (unsigned int)mapNextTx.size());\n "
      },
      {
        "sha": "38abc65c5dd123b7123c7341c773a4801a98f4b2",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d4b4b2c2c49774523de740d6492ee5b1ee15e74/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d4b4b2c2c49774523de740d6492ee5b1ee15e74/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=9d4b4b2c2c49774523de740d6492ee5b1ee15e74",
        "patch": "@@ -488,7 +488,7 @@ class SaltedTxidHasher\n class CTxMemPool\n {\n private:\n-    uint32_t nCheckFrequency GUARDED_BY(cs); //!< Value n means that n times in 2^32 we check.\n+    uint32_t m_check_ratio GUARDED_BY(cs); //!< Value n means that 1 times in n we check.\n     std::atomic<unsigned int> nTransactionsUpdated; //!< Used by getblocktemplate to trigger CreateNewBlock() invocation\n     CBlockPolicyEstimator* minerPolicyEstimator;\n \n@@ -611,7 +611,7 @@ class CTxMemPool\n      * check does nothing.\n      */\n     void check(const CCoinsViewCache *pcoins) const;\n-    void setSanityCheck(double dFrequency = 1.0) { LOCK(cs); nCheckFrequency = static_cast<uint32_t>(dFrequency * 4294967295.0); }\n+    void setSanityCheck(int check_ratio = 0) { LOCK(cs); m_check_ratio = check_ratio; }\n \n     // addUnchecked must updated state for all ancestors of a given transaction,\n     // to track size/count of descendant transactions.  First version of"
      }
    ]
  },
  {
    "sha": "e3310692d0e9720e960b9785274ce1f0b58b4cd7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMzMxMDY5MmQwZTk3MjBlOTYwYjk3ODUyNzRjZTFmMGI1OGI0Y2Q3",
    "commit": {
      "author": {
        "name": "Elle Mouton",
        "email": "elle.mouton@gmail.com",
        "date": "2020-10-20T18:42:47Z"
      },
      "committer": {
        "name": "Elle Mouton",
        "email": "elle.mouton@gmail.com",
        "date": "2020-10-23T12:41:30Z"
      },
      "message": "refactor: Make CTxMemPool::m_check_ratio a const and a constructor argument\n\nSince m_check_ratio is only set once and since the CTxMemPool object is\nno longer a global variable, m_check_ratio can be passed into the\nconstructor of CTxMemPool. Since it is only read from after\ninitialization, m_check_ratio can also be made a const and hence no\nlonger needs to be guarded by the cs mutex.",
      "tree": {
        "sha": "b110b230110db9e2a9616a83cb8c3b545dbdb01d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b110b230110db9e2a9616a83cb8c3b545dbdb01d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e3310692d0e9720e960b9785274ce1f0b58b4cd7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e3310692d0e9720e960b9785274ce1f0b58b4cd7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e3310692d0e9720e960b9785274ce1f0b58b4cd7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e3310692d0e9720e960b9785274ce1f0b58b4cd7/comments",
    "author": {
      "login": "ellemouton",
      "id": 25280249,
      "node_id": "MDQ6VXNlcjI1MjgwMjQ5",
      "avatar_url": "https://avatars.githubusercontent.com/u/25280249?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellemouton",
      "html_url": "https://github.com/ellemouton",
      "followers_url": "https://api.github.com/users/ellemouton/followers",
      "following_url": "https://api.github.com/users/ellemouton/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellemouton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellemouton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellemouton/subscriptions",
      "organizations_url": "https://api.github.com/users/ellemouton/orgs",
      "repos_url": "https://api.github.com/users/ellemouton/repos",
      "events_url": "https://api.github.com/users/ellemouton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellemouton/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ellemouton",
      "id": 25280249,
      "node_id": "MDQ6VXNlcjI1MjgwMjQ5",
      "avatar_url": "https://avatars.githubusercontent.com/u/25280249?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellemouton",
      "html_url": "https://github.com/ellemouton",
      "followers_url": "https://api.github.com/users/ellemouton/followers",
      "following_url": "https://api.github.com/users/ellemouton/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellemouton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellemouton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellemouton/subscriptions",
      "organizations_url": "https://api.github.com/users/ellemouton/orgs",
      "repos_url": "https://api.github.com/users/ellemouton/repos",
      "events_url": "https://api.github.com/users/ellemouton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellemouton/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9d4b4b2c2c49774523de740d6492ee5b1ee15e74",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d4b4b2c2c49774523de740d6492ee5b1ee15e74",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9d4b4b2c2c49774523de740d6492ee5b1ee15e74"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 14,
      "deletions": 20
    },
    "files": [
      {
        "sha": "1ba34945c24792ce697378d8566ac568347758e3",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 7,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e3310692d0e9720e960b9785274ce1f0b58b4cd7/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e3310692d0e9720e960b9785274ce1f0b58b4cd7/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=e3310692d0e9720e960b9785274ce1f0b58b4cd7",
        "patch": "@@ -1389,14 +1389,9 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n     assert(!node.connman);\n     node.connman = MakeUnique<CConnman>(GetRand(std::numeric_limits<uint64_t>::max()), GetRand(std::numeric_limits<uint64_t>::max()), args.GetBoolArg(\"-networkactive\", true));\n \n-    // Make mempool generally available in the node context. For example the connection manager, wallet, or RPC threads,\n-    // which are all started after this, may use it from the node context.\n     assert(!node.mempool);\n-    node.mempool = MakeUnique<CTxMemPool>(&::feeEstimator);\n-    if (node.mempool) {\n-        int check_ratio = std::min<int>(std::max<int>(args.GetArg(\"-checkmempool\", chainparams.DefaultConsistencyChecks() ? 1 : 0), 0), 1000000);\n-        node.mempool->setSanityCheck(check_ratio);\n-    }\n+    int check_ratio = std::min<int>(std::max<int>(args.GetArg(\"-checkmempool\", chainparams.DefaultConsistencyChecks() ? 1 : 0), 0), 1000000);\n+    node.mempool = MakeUnique<CTxMemPool>(&::feeEstimator, check_ratio);\n \n     assert(!node.chainman);\n     node.chainman = &g_chainman;"
      },
      {
        "sha": "adf597020675495ff92d97042ab5b8189cb31c0f",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e3310692d0e9720e960b9785274ce1f0b58b4cd7/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e3310692d0e9720e960b9785274ce1f0b58b4cd7/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=e3310692d0e9720e960b9785274ce1f0b58b4cd7",
        "patch": "@@ -141,8 +141,7 @@ TestingSetup::TestingSetup(const std::string& chainName, const std::vector<const\n \n     pblocktree.reset(new CBlockTreeDB(1 << 20, true));\n \n-    m_node.mempool = MakeUnique<CTxMemPool>(&::feeEstimator);\n-    m_node.mempool->setSanityCheck(1.0);\n+    m_node.mempool = MakeUnique<CTxMemPool>(&::feeEstimator, 1);\n \n     m_node.chainman = &::g_chainman;\n     m_node.chainman->InitializeChainstate(*m_node.mempool);"
      },
      {
        "sha": "ca7021443e569ee2dca940e723edc03804eebac7",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 8,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e3310692d0e9720e960b9785274ce1f0b58b4cd7/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e3310692d0e9720e960b9785274ce1f0b58b4cd7/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=e3310692d0e9720e960b9785274ce1f0b58b4cd7",
        "patch": "@@ -331,15 +331,10 @@ void CTxMemPoolEntry::UpdateAncestorState(int64_t modifySize, CAmount modifyFee,\n     assert(int(nSigOpCostWithAncestors) >= 0);\n }\n \n-CTxMemPool::CTxMemPool(CBlockPolicyEstimator* estimator)\n-    : nTransactionsUpdated(0), minerPolicyEstimator(estimator), m_epoch(0), m_has_epoch_guard(false)\n+CTxMemPool::CTxMemPool(CBlockPolicyEstimator* estimator, int check_ratio)\n+    : m_check_ratio(check_ratio), nTransactionsUpdated(0), minerPolicyEstimator(estimator), m_epoch(0), m_has_epoch_guard(false)\n {\n     _clear(); //lock free clear\n-\n-    // Sanity checks off by default for performance, because otherwise\n-    // accepting transactions becomes O(N^2) where N is the number\n-    // of transactions in the pool\n-    m_check_ratio = 0;\n }\n \n bool CTxMemPool::isSpent(const COutPoint& outpoint) const\n@@ -619,11 +614,11 @@ static void CheckInputsAndUpdateCoins(const CTransaction& tx, CCoinsViewCache& m\n \n void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n {\n-    LOCK(cs);\n     if (m_check_ratio == 0) return;\n \n     if (GetRand(m_check_ratio) >= 1) return;\n \n+    LOCK(cs);\n     LogPrint(BCLog::MEMPOOL, \"Checking mempool with %u transactions and %u inputs\\n\", (unsigned int)mapTx.size(), (unsigned int)mapNextTx.size());\n \n     uint64_t checkTotal = 0;"
      },
      {
        "sha": "da071576ac3bc4674d39ed56d04c6549d8c3c4dd",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 8,
        "deletions": 3,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e3310692d0e9720e960b9785274ce1f0b58b4cd7/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e3310692d0e9720e960b9785274ce1f0b58b4cd7/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=e3310692d0e9720e960b9785274ce1f0b58b4cd7",
        "patch": "@@ -488,7 +488,7 @@ class SaltedTxidHasher\n class CTxMemPool\n {\n private:\n-    uint32_t m_check_ratio GUARDED_BY(cs); //!< Value n means that 1 times in n we check.\n+    const int m_check_ratio; //!< Value n means that 1 times in n we check.\n     std::atomic<unsigned int> nTransactionsUpdated; //!< Used by getblocktemplate to trigger CreateNewBlock() invocation\n     CBlockPolicyEstimator* minerPolicyEstimator;\n \n@@ -601,8 +601,14 @@ class CTxMemPool\n     std::map<uint256, CAmount> mapDeltas;\n \n     /** Create a new CTxMemPool.\n+     * Sanity checks will be off by default for performance, because otherwise\n+     * accepting transactions becomes O(N^2) where N is the number of transactions\n+     * in the pool.\n+     *\n+     * @param[in] estimator is used to estimate appropriate transaction fees.\n+     * @param[in] check_ratio is the ratio used to determine how often sanity checks will run.\n      */\n-    explicit CTxMemPool(CBlockPolicyEstimator* estimator = nullptr);\n+    explicit CTxMemPool(CBlockPolicyEstimator* estimator = nullptr, int check_ratio = 0);\n \n     /**\n      * If sanity-checking is turned on, check makes sure the pool is\n@@ -611,7 +617,6 @@ class CTxMemPool\n      * check does nothing.\n      */\n     void check(const CCoinsViewCache *pcoins) const;\n-    void setSanityCheck(int check_ratio = 0) { LOCK(cs); m_check_ratio = check_ratio; }\n \n     // addUnchecked must updated state for all ancestors of a given transaction,\n     // to track size/count of descendant transactions.  First version of"
      }
    ]
  },
  {
    "sha": "f15e780b9e57554c723bc02aa41150ecf3e3a8c9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMTVlNzgwYjllNTc1NTRjNzIzYmMwMmFhNDExNTBlY2YzZTNhOGM5",
    "commit": {
      "author": {
        "name": "Elle Mouton",
        "email": "elle.mouton@gmail.com",
        "date": "2020-10-20T19:25:07Z"
      },
      "committer": {
        "name": "Elle Mouton",
        "email": "elle.mouton@gmail.com",
        "date": "2020-10-23T12:41:40Z"
      },
      "message": "refactor: Clean up CTxMemPool initializer list\n\nShorten the CTxMemPool initializer list using default initialization\nfor members that dont depend on the constuctor parameters.",
      "tree": {
        "sha": "7244af9d56b853ba7ebf95fd9dac1675402ad0bf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7244af9d56b853ba7ebf95fd9dac1675402ad0bf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f15e780b9e57554c723bc02aa41150ecf3e3a8c9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f15e780b9e57554c723bc02aa41150ecf3e3a8c9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f15e780b9e57554c723bc02aa41150ecf3e3a8c9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f15e780b9e57554c723bc02aa41150ecf3e3a8c9/comments",
    "author": {
      "login": "ellemouton",
      "id": 25280249,
      "node_id": "MDQ6VXNlcjI1MjgwMjQ5",
      "avatar_url": "https://avatars.githubusercontent.com/u/25280249?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellemouton",
      "html_url": "https://github.com/ellemouton",
      "followers_url": "https://api.github.com/users/ellemouton/followers",
      "following_url": "https://api.github.com/users/ellemouton/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellemouton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellemouton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellemouton/subscriptions",
      "organizations_url": "https://api.github.com/users/ellemouton/orgs",
      "repos_url": "https://api.github.com/users/ellemouton/repos",
      "events_url": "https://api.github.com/users/ellemouton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellemouton/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ellemouton",
      "id": 25280249,
      "node_id": "MDQ6VXNlcjI1MjgwMjQ5",
      "avatar_url": "https://avatars.githubusercontent.com/u/25280249?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellemouton",
      "html_url": "https://github.com/ellemouton",
      "followers_url": "https://api.github.com/users/ellemouton/followers",
      "following_url": "https://api.github.com/users/ellemouton/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellemouton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellemouton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellemouton/subscriptions",
      "organizations_url": "https://api.github.com/users/ellemouton/orgs",
      "repos_url": "https://api.github.com/users/ellemouton/repos",
      "events_url": "https://api.github.com/users/ellemouton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellemouton/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e3310692d0e9720e960b9785274ce1f0b58b4cd7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e3310692d0e9720e960b9785274ce1f0b58b4cd7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e3310692d0e9720e960b9785274ce1f0b58b4cd7"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "d18182c07db6f3005a8964ef97b0c41bc0f0a8cc",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f15e780b9e57554c723bc02aa41150ecf3e3a8c9/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f15e780b9e57554c723bc02aa41150ecf3e3a8c9/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=f15e780b9e57554c723bc02aa41150ecf3e3a8c9",
        "patch": "@@ -332,7 +332,7 @@ void CTxMemPoolEntry::UpdateAncestorState(int64_t modifySize, CAmount modifyFee,\n }\n \n CTxMemPool::CTxMemPool(CBlockPolicyEstimator* estimator, int check_ratio)\n-    : m_check_ratio(check_ratio), nTransactionsUpdated(0), minerPolicyEstimator(estimator), m_epoch(0), m_has_epoch_guard(false)\n+    : m_check_ratio(check_ratio), minerPolicyEstimator(estimator)\n {\n     _clear(); //lock free clear\n }"
      },
      {
        "sha": "78ad62aae66410a8c352118b7fd5d137e32e0a83",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f15e780b9e57554c723bc02aa41150ecf3e3a8c9/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f15e780b9e57554c723bc02aa41150ecf3e3a8c9/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=f15e780b9e57554c723bc02aa41150ecf3e3a8c9",
        "patch": "@@ -489,7 +489,7 @@ class CTxMemPool\n {\n private:\n     const int m_check_ratio; //!< Value n means that 1 times in n we check.\n-    std::atomic<unsigned int> nTransactionsUpdated; //!< Used by getblocktemplate to trigger CreateNewBlock() invocation\n+    std::atomic<unsigned int> nTransactionsUpdated{0}; //!< Used by getblocktemplate to trigger CreateNewBlock() invocation\n     CBlockPolicyEstimator* minerPolicyEstimator;\n \n     uint64_t totalTxSize;      //!< sum of all mempool tx's virtual sizes. Differs from serialized tx size since witness data is discounted. Defined in BIP 141.\n@@ -498,8 +498,8 @@ class CTxMemPool\n     mutable int64_t lastRollingFeeUpdate;\n     mutable bool blockSinceLastRollingFeeBump;\n     mutable double rollingMinimumFeeRate; //!< minimum fee to get into the pool, decreases exponentially\n-    mutable uint64_t m_epoch;\n-    mutable bool m_has_epoch_guard;\n+    mutable uint64_t m_epoch{0};\n+    mutable bool m_has_epoch_guard{false};\n \n     // In-memory counter for external mempool tracking purposes.\n     // This number is incremented once every time a transaction"
      }
    ]
  }
]