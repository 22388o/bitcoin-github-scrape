jnewbery,2020-10-22 17:52:56,"Concept ACK! Removing unnecessary interface functions, making constant values `const`, reducing mutex locking and avoiding casts between int and float types are all excellent improvements :slightly_smiling_face: ",https://github.com/bitcoin/bitcoin/pull/20222#issuecomment-714658194,714658194,
practicalswift,2020-10-22 18:46:40,"Concept ACK\n\nVery nice first-time contribution @ellemouton! Warm welcome as a contributor! :)",https://github.com/bitcoin/bitcoin/pull/20222#issuecomment-714689077,714689077,
DrahtBot,2020-10-22 22:34:34,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18766 (Disable fee estimation in blocksonly mode (by removing the fee estimates global) by darosior)\n* #18017 (txmempool",https://github.com/bitcoin/bitcoin/pull/20222#issuecomment-714799798,714799798,
jnewbery,2020-10-23 12:43:16,utACK f15e780b9e57554c723bc02aa41150ecf3e3a8c9,https://github.com/bitcoin/bitcoin/pull/20222#issuecomment-715317842,715317842,
theStack,2020-10-25 20:26:27,"Concept ACK\nWelcome as a new contributor @ellemouton, very nice first PR! üëç \n\nIt would be very interesting on why the original version of the mempool sanity check (introduced in #6776) used a random range of 2^32, needing rather complicated floating-point logic... I guess back then the motivation was to avoid a (potentially expensive) modulo operation?",https://github.com/bitcoin/bitcoin/pull/20222#issuecomment-716206701,716206701,
ellemouton,2020-10-27 05:40:51,"Thanks @theStack üòÑ \n\nYeah, good question. I will need to look into that a bit!",https://github.com/bitcoin/bitcoin/pull/20222#issuecomment-716997155,716997155,
sipa,2020-10-27 05:44:15,@theStack That's exactly the reason. ,https://github.com/bitcoin/bitcoin/pull/20222#issuecomment-716998343,716998343,
jnewbery,2020-10-27 09:24:43,"> the motivation was to avoid a (potentially expensive) modulo operation?\n\nCorrect me if I'm wrong, but `GetRand()` no longer includes a modulo operation, so we can switch to using `GetRand()` without worrying about that.",https://github.com/bitcoin/bitcoin/pull/20222#issuecomment-717105787,717105787,
ellemouton,2020-10-31 09:59:49,"cool, had a look now and I think @jnewbery is correct, GetRand() used to use a modulo operation but that changed in commit 152146e782d401aa1ce7d989d62306aabc85f22e. ",https://github.com/bitcoin/bitcoin/pull/20222#issuecomment-719911956,719911956,
theStack,2020-11-01 18:16:24,"> \n> \n> > the motivation was to avoid a (potentially expensive) modulo operation?\n> \n> Correct me if I'm wrong, but `GetRand()` no longer includes a modulo operation, so we can switch to using `GetRand()` without worrying about that.\n\nAgreed, `GetRand()` uses `FastRandomContext::randrange()` now, which in turn generates a random number within a specific range by repeatedly generating r",https://github.com/bitcoin/bitcoin/pull/20222#issuecomment-720130123,720130123,
MarcoFalke,2020-12-01 09:01:31,"ACK f15e780b9e57554c723bc02aa41150ecf3e3a8c9 üëò\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nACK f15e780b9e57554c723bc02aa41150ecf3e3a8c9 üëò\n-----BEGIN PGP SIGNATURE-----\n\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUi4bQv7BHwX3R87hsf4rDy4IO4itsm9oYcMsTz6EMYkRFJhiD7Kb6+3Co",https://github.com/bitcoin/bitcoin/pull/20222#issuecomment-736326276,736326276,
glozow,2020-10-23 03:26:38,"I understand this behavior isn't being changed but... default ratio is 0 or 1 (never or always?), unless user gives a value? :O",https://github.com/bitcoin/bitcoin/pull/20222#discussion_r510573169,510573169,src/init.cpp
ellemouton,2020-10-23 04:00:53,Indeed! The default for all chains is 0 except for regtest which has a default of 1.,https://github.com/bitcoin/bitcoin/pull/20222#discussion_r510580707,510580707,src/init.cpp
jnewbery,2020-10-23 08:04:54,You can join the `if (m_check_ratio == 0)` with the `return;` line in the first commit instead of the second commit.,https://github.com/bitcoin/bitcoin/pull/20222#discussion_r510707274,510707274,src/txmempool.cpp
jnewbery,2020-10-23 08:05:07,This can be joined with the line below (in the first commit),https://github.com/bitcoin/bitcoin/pull/20222#discussion_r510707397,510707397,src/txmempool.cpp
ellemouton,2020-10-23 12:18:41,updated üëç ,https://github.com/bitcoin/bitcoin/pull/20222#discussion_r510843327,510843327,src/txmempool.cpp
ellemouton,2020-10-23 12:18:48,updated üëç ,https://github.com/bitcoin/bitcoin/pull/20222#discussion_r510843378,510843378,src/txmempool.cpp
jnewbery,2020-10-23 12:34:17,Oops. You've added this back in your rebase.,https://github.com/bitcoin/bitcoin/pull/20222#discussion_r510851630,510851630,src/txmempool.cpp
ellemouton,2020-10-23 12:37:02,Thanks for catching that! Will fix üëç ,https://github.com/bitcoin/bitcoin/pull/20222#discussion_r510853144,510853144,src/txmempool.cpp
theStack,2020-11-01 18:02:27,Just to get sure: was the removal of this comments intended?,https://github.com/bitcoin/bitcoin/pull/20222#discussion_r515652375,515652375,src/init.cpp
ellemouton,2020-11-03 05:38:22,I think the comment is outdated and refers to making the mempool available in the node context as a raw pointer. But now the mempool is constructed here.,https://github.com/bitcoin/bitcoin/pull/20222#discussion_r516436634,516436634,src/init.cpp
jnewbery,2020-11-03 09:09:22,"Exactly right. This comment should have been removed in the commit here: https://github.com/bitcoin/bitcoin/commit/fafb381af8279b2d2ca768df0bf68d7eb036a2f9#diff-b1e19192258d83199d8adaa5ac31f067af98f63554bfdd679bd8e8073815e69dR1367. Previously, we were taking an existing pointer and making it available in the node context. Now we're constructing a new mempool here.",https://github.com/bitcoin/bitcoin/pull/20222#discussion_r516514810,516514810,src/init.cpp
