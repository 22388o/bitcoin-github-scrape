[
  {
    "sha": "0bc23ef35e71676d762dfdf396e7fe3a01c3da8e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYmMyM2VmMzVlNzE2NzZkNzYyZGZkZjM5NmU3ZmUzYTAxYzNkYThl",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-03T21:30:25Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-10-28T20:48:19Z"
      },
      "message": "Update wallet_importprunedfunds to avoid dumpprivkey\n\nRemoves the use of dumpprivkey so that descriptor wallets can pass on\nthis. Also does a few descriptor wallet specific changes due to\ndifferent IsMine semantics.",
      "tree": {
        "sha": "fd7e0ca95547b661c56eb4d561e54608dca27785",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fd7e0ca95547b661c56eb4d561e54608dca27785"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0bc23ef35e71676d762dfdf396e7fe3a01c3da8e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0bc23ef35e71676d762dfdf396e7fe3a01c3da8e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0bc23ef35e71676d762dfdf396e7fe3a01c3da8e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0bc23ef35e71676d762dfdf396e7fe3a01c3da8e/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3f512f3d563954547061ee743648b57a900cbe04",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f512f3d563954547061ee743648b57a900cbe04",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3f512f3d563954547061ee743648b57a900cbe04"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 33,
      "deletions": 20
    },
    "files": [
      {
        "sha": "d10d8ae1c8106e9a8f62ad1fa3d36f5d8cd3b00e",
        "filename": "test/functional/wallet_importprunedfunds.py",
        "status": "modified",
        "additions": 33,
        "deletions": 20,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0bc23ef35e71676d762dfdf396e7fe3a01c3da8e/test/functional/wallet_importprunedfunds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0bc23ef35e71676d762dfdf396e7fe3a01c3da8e/test/functional/wallet_importprunedfunds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importprunedfunds.py?ref=0bc23ef35e71676d762dfdf396e7fe3a01c3da8e",
        "patch": "@@ -5,11 +5,14 @@\n \"\"\"Test the importprunedfunds and removeprunedfunds RPCs.\"\"\"\n from decimal import Decimal\n \n+from test_framework.address import key_to_p2wpkh\n+from test_framework.key import ECKey\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n     assert_raises_rpc_error,\n )\n+from test_framework.wallet_util import bytes_to_wif\n \n class ImportPrunedFundsTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -30,8 +33,11 @@ def run_test(self):\n         # pubkey\n         address2 = self.nodes[0].getnewaddress()\n         # privkey\n-        address3 = self.nodes[0].getnewaddress()\n-        address3_privkey = self.nodes[0].dumpprivkey(address3)  # Using privkey\n+        eckey = ECKey()\n+        eckey.generate()\n+        address3_privkey = bytes_to_wif(eckey.get_bytes())\n+        address3 = key_to_p2wpkh(eckey.get_pubkey().get_bytes())\n+        self.nodes[0].importprivkey(address3_privkey)\n \n         # Check only one address\n         address_info = self.nodes[0].getaddressinfo(address1)\n@@ -80,37 +86,44 @@ def run_test(self):\n         assert_equal(balance1, Decimal(0))\n \n         # Import with affiliated address with no rescan\n-        self.nodes[1].importaddress(address=address2, rescan=False)\n-        self.nodes[1].importprunedfunds(rawtransaction=rawtxn2, txoutproof=proof2)\n-        assert [tx for tx in self.nodes[1].listtransactions(include_watchonly=True) if tx['txid'] == txnid2]\n+        self.nodes[1].createwallet('wwatch', disable_private_keys=True)\n+        wwatch = self.nodes[1].get_wallet_rpc('wwatch')\n+        wwatch.importaddress(address=address2, rescan=False)\n+        wwatch.importprunedfunds(rawtransaction=rawtxn2, txoutproof=proof2)\n+        assert [tx for tx in wwatch.listtransactions(include_watchonly=True) if tx['txid'] == txnid2]\n \n         # Import with private key with no rescan\n-        self.nodes[1].importprivkey(privkey=address3_privkey, rescan=False)\n-        self.nodes[1].importprunedfunds(rawtxn3, proof3)\n-        assert [tx for tx in self.nodes[1].listtransactions() if tx['txid'] == txnid3]\n-        balance3 = self.nodes[1].getbalance()\n+        w1 = self.nodes[1].get_wallet_rpc(self.default_wallet_name)\n+        w1.importprivkey(privkey=address3_privkey, rescan=False)\n+        w1.importprunedfunds(rawtxn3, proof3)\n+        assert [tx for tx in w1.listtransactions() if tx['txid'] == txnid3]\n+        balance3 = w1.getbalance()\n         assert_equal(balance3, Decimal('0.025'))\n \n         # Addresses Test - after import\n-        address_info = self.nodes[1].getaddressinfo(address1)\n+        address_info = w1.getaddressinfo(address1)\n         assert_equal(address_info['iswatchonly'], False)\n         assert_equal(address_info['ismine'], False)\n-        address_info = self.nodes[1].getaddressinfo(address2)\n-        assert_equal(address_info['iswatchonly'], True)\n-        assert_equal(address_info['ismine'], False)\n-        address_info = self.nodes[1].getaddressinfo(address3)\n+        address_info = wwatch.getaddressinfo(address2)\n+        if self.options.descriptors:\n+            assert_equal(address_info['iswatchonly'], False)\n+            assert_equal(address_info['ismine'], True)\n+        else:\n+            assert_equal(address_info['iswatchonly'], True)\n+            assert_equal(address_info['ismine'], False)\n+        address_info = w1.getaddressinfo(address3)\n         assert_equal(address_info['iswatchonly'], False)\n         assert_equal(address_info['ismine'], True)\n \n         # Remove transactions\n-        assert_raises_rpc_error(-8, \"Transaction does not exist in wallet.\", self.nodes[1].removeprunedfunds, txnid1)\n-        assert not [tx for tx in self.nodes[1].listtransactions(include_watchonly=True) if tx['txid'] == txnid1]\n+        assert_raises_rpc_error(-8, \"Transaction does not exist in wallet.\", w1.removeprunedfunds, txnid1)\n+        assert not [tx for tx in w1.listtransactions(include_watchonly=True) if tx['txid'] == txnid1]\n \n-        self.nodes[1].removeprunedfunds(txnid2)\n-        assert not [tx for tx in self.nodes[1].listtransactions(include_watchonly=True) if tx['txid'] == txnid2]\n+        wwatch.removeprunedfunds(txnid2)\n+        assert not [tx for tx in wwatch.listtransactions(include_watchonly=True) if tx['txid'] == txnid2]\n \n-        self.nodes[1].removeprunedfunds(txnid3)\n-        assert not [tx for tx in self.nodes[1].listtransactions(include_watchonly=True) if tx['txid'] == txnid3]\n+        w1.removeprunedfunds(txnid3)\n+        assert not [tx for tx in w1.listtransactions(include_watchonly=True) if tx['txid'] == txnid3]\n \n if __name__ == '__main__':\n     ImportPrunedFundsTest().main()"
      }
    ]
  },
  {
    "sha": "90dfb1ff1090e719d58c469b5d4ad8994f3432d5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MGRmYjFmZjEwOTBlNzE5ZDU4YzQ2OWI1ZDRhZDg5OTRmMzQzMmQ1",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-04T00:46:23Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-10-28T20:48:19Z"
      },
      "message": "Use a separate watchonly wallet in rpc_fundrawtransaction.py\n\nImport things into a separate watchonly wallet to work with descriptor\nwallets.",
      "tree": {
        "sha": "6977f7bc0c8593f6d4c7c773b5ff7a249bb374cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6977f7bc0c8593f6d4c7c773b5ff7a249bb374cf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/90dfb1ff1090e719d58c469b5d4ad8994f3432d5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90dfb1ff1090e719d58c469b5d4ad8994f3432d5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/90dfb1ff1090e719d58c469b5d4ad8994f3432d5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90dfb1ff1090e719d58c469b5d4ad8994f3432d5/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0bc23ef35e71676d762dfdf396e7fe3a01c3da8e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0bc23ef35e71676d762dfdf396e7fe3a01c3da8e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0bc23ef35e71676d762dfdf396e7fe3a01c3da8e"
      }
    ],
    "stats": {
      "total": 74,
      "additions": 55,
      "deletions": 19
    },
    "files": [
      {
        "sha": "163c26855ae3e8d0b13954e990040fac4cc6044f",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 55,
        "deletions": 19,
        "changes": 74,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90dfb1ff1090e719d58c469b5d4ad8994f3432d5/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90dfb1ff1090e719d58c469b5d4ad8994f3432d5/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=90dfb1ff1090e719d58c469b5d4ad8994f3432d5",
        "patch": "@@ -5,6 +5,7 @@\n \"\"\"Test the fundrawtransaction RPC.\"\"\"\n \n from decimal import Decimal\n+from test_framework.descriptors import descsum_create\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n@@ -100,17 +101,19 @@ def test_change_position(self):\n         rawmatch = self.nodes[2].fundrawtransaction(rawmatch, {\"changePosition\":1, \"subtractFeeFromOutputs\":[0]})\n         assert_equal(rawmatch[\"changepos\"], -1)\n \n+        self.nodes[3].createwallet(wallet_name=\"wwatch\", disable_private_keys=True)\n+        wwatch = self.nodes[3].get_wallet_rpc('wwatch')\n         watchonly_address = self.nodes[0].getnewaddress()\n         watchonly_pubkey = self.nodes[0].getaddressinfo(watchonly_address)[\"pubkey\"]\n         self.watchonly_amount = Decimal(200)\n-        self.nodes[3].importpubkey(watchonly_pubkey, \"\", True)\n+        wwatch.importpubkey(watchonly_pubkey, \"\", True)\n         self.watchonly_txid = self.nodes[0].sendtoaddress(watchonly_address, self.watchonly_amount)\n \n         # Lock UTXO so nodes[0] doesn't accidentally spend it\n         self.watchonly_vout = find_vout_for_address(self.nodes[0], self.watchonly_txid, watchonly_address)\n         self.nodes[0].lockunspent(False, [{\"txid\": self.watchonly_txid, \"vout\": self.watchonly_vout}])\n \n-        self.nodes[0].sendtoaddress(self.nodes[3].getnewaddress(), self.watchonly_amount / 10)\n+        self.nodes[0].sendtoaddress(self.nodes[3].get_wallet_rpc(self.default_wallet_name).getnewaddress(), self.watchonly_amount / 10)\n \n         self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.5)\n         self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.0)\n@@ -119,6 +122,8 @@ def test_change_position(self):\n         self.nodes[0].generate(1)\n         self.sync_all()\n \n+        wwatch.unloadwallet()\n+\n     def test_simple(self):\n         self.log.info(\"Test fundrawtxn\")\n         inputs  = [ ]\n@@ -406,7 +411,7 @@ def test_fee_p2sh(self):\n         addr1Obj = self.nodes[1].getaddressinfo(addr1)\n         addr2Obj = self.nodes[1].getaddressinfo(addr2)\n \n-        mSigObj = self.nodes[1].addmultisigaddress(2, [addr1Obj['pubkey'], addr2Obj['pubkey']])['address']\n+        mSigObj = self.nodes[3].createmultisig(2, [addr1Obj['pubkey'], addr2Obj['pubkey']])['address']\n \n         inputs = []\n         outputs = {mSigObj:1.1}\n@@ -438,7 +443,7 @@ def test_fee_4of5(self):\n         addr4Obj = self.nodes[1].getaddressinfo(addr4)\n         addr5Obj = self.nodes[1].getaddressinfo(addr5)\n \n-        mSigObj = self.nodes[1].addmultisigaddress(\n+        mSigObj = self.nodes[1].createmultisig(\n             4,\n             [\n                 addr1Obj['pubkey'],\n@@ -464,7 +469,7 @@ def test_fee_4of5(self):\n \n     def test_spend_2of2(self):\n         \"\"\"Spend a 2-of-2 multisig transaction over fundraw.\"\"\"\n-        self.log.info(\"Test fundrawtxn spending 2-of-2 multisig\")\n+        self.log.info(\"Test fundpsbt spending 2-of-2 multisig\")\n \n         # Create 2-of-2 addr.\n         addr1 = self.nodes[2].getnewaddress()\n@@ -473,13 +478,18 @@ def test_spend_2of2(self):\n         addr1Obj = self.nodes[2].getaddressinfo(addr1)\n         addr2Obj = self.nodes[2].getaddressinfo(addr2)\n \n-        mSigObj = self.nodes[2].addmultisigaddress(\n+        self.nodes[2].createwallet(wallet_name='wmulti', disable_private_keys=True)\n+        wmulti = self.nodes[2].get_wallet_rpc('wmulti')\n+        w2 = self.nodes[2].get_wallet_rpc(self.default_wallet_name)\n+        mSigObj = wmulti.addmultisigaddress(\n             2,\n             [\n                 addr1Obj['pubkey'],\n                 addr2Obj['pubkey'],\n             ]\n         )['address']\n+        if not self.options.descriptors:\n+            wmulti.importaddress(mSigObj)\n \n         # Send 1.2 BTC to msig addr.\n         self.nodes[0].sendtoaddress(mSigObj, 1.2)\n@@ -489,22 +499,39 @@ def test_spend_2of2(self):\n         oldBalance = self.nodes[1].getbalance()\n         inputs = []\n         outputs = {self.nodes[1].getnewaddress():1.1}\n-        rawtx = self.nodes[2].createrawtransaction(inputs, outputs)\n-        fundedTx = self.nodes[2].fundrawtransaction(rawtx)\n+        funded_psbt = wmulti.walletcreatefundedpsbt(inputs=inputs, outputs=outputs, options={'changeAddress': w2.getrawchangeaddress()})['psbt']\n \n-        signedTx = self.nodes[2].signrawtransactionwithwallet(fundedTx['hex'])\n-        self.nodes[2].sendrawtransaction(signedTx['hex'])\n+        signed_psbt = w2.walletprocesspsbt(funded_psbt)\n+        final_psbt = w2.finalizepsbt(signed_psbt['psbt'])\n+        self.nodes[2].sendrawtransaction(final_psbt['hex'])\n         self.nodes[2].generate(1)\n         self.sync_all()\n \n         # Make sure funds are received at node1.\n         assert_equal(oldBalance+Decimal('1.10000000'), self.nodes[1].getbalance())\n \n+        wmulti.unloadwallet()\n+\n     def test_locked_wallet(self):\n-        self.log.info(\"Test fundrawtxn with locked wallet\")\n+        self.log.info(\"Test fundrawtxn with locked wallet and hardened derivation\")\n \n         self.nodes[1].encryptwallet(\"test\")\n \n+        if self.options.descriptors:\n+            self.nodes[1].walletpassphrase('test', 10)\n+            self.nodes[1].importdescriptors([{\n+                'desc': descsum_create('wpkh(tprv8ZgxMBicQKsPdYeeZbPSKd2KYLmeVKtcFA7kqCxDvDR13MQ6us8HopUR2wLcS2ZKPhLyKsqpDL2FtL73LMHcgoCL7DXsciA8eX8nbjCR2eG/0h/*h)'),\n+                'timestamp': 'now',\n+                'active': True\n+            },\n+            {\n+                'desc': descsum_create('wpkh(tprv8ZgxMBicQKsPdYeeZbPSKd2KYLmeVKtcFA7kqCxDvDR13MQ6us8HopUR2wLcS2ZKPhLyKsqpDL2FtL73LMHcgoCL7DXsciA8eX8nbjCR2eG/1h/*h)'),\n+                'timestamp': 'now',\n+                'active': True,\n+                'internal': True\n+            }])\n+            self.nodes[1].walletlock()\n+\n         # Drain the keypool.\n         self.nodes[1].getnewaddress()\n         self.nodes[1].getrawchangeaddress()\n@@ -621,39 +648,48 @@ def test_watchonly(self):\n         outputs = {self.nodes[2].getnewaddress(): self.watchonly_amount / 2}\n         rawtx = self.nodes[3].createrawtransaction(inputs, outputs)\n \n-        result = self.nodes[3].fundrawtransaction(rawtx, {'includeWatching': True })\n+        self.nodes[3].loadwallet('wwatch')\n+        wwatch = self.nodes[3].get_wallet_rpc('wwatch')\n+        w3 = self.nodes[3].get_wallet_rpc(self.default_wallet_name)\n+        result = wwatch.fundrawtransaction(rawtx, {'includeWatching': True, 'changeAddress': w3.getrawchangeaddress()})\n         res_dec = self.nodes[0].decoderawtransaction(result[\"hex\"])\n         assert_equal(len(res_dec[\"vin\"]), 1)\n         assert_equal(res_dec[\"vin\"][0][\"txid\"], self.watchonly_txid)\n \n         assert \"fee\" in result.keys()\n         assert_greater_than(result[\"changepos\"], -1)\n \n+        wwatch.unloadwallet()\n+\n     def test_all_watched_funds(self):\n         self.log.info(\"Test fundrawtxn using entirety of watched funds\")\n \n         inputs = []\n         outputs = {self.nodes[2].getnewaddress(): self.watchonly_amount}\n         rawtx = self.nodes[3].createrawtransaction(inputs, outputs)\n \n-        # Backward compatibility test (2nd param is includeWatching).\n-        result = self.nodes[3].fundrawtransaction(rawtx, True)\n+        self.nodes[3].loadwallet('wwatch')\n+        wwatch = self.nodes[3].get_wallet_rpc('wwatch')\n+        w3 = self.nodes[3].get_wallet_rpc(self.default_wallet_name)\n+        result = wwatch.fundrawtransaction(rawtx, {'includeWatching': True, 'changeAddress': w3.getrawchangeaddress(), 'subtractFeeFromOutputs': [0]})\n         res_dec = self.nodes[0].decoderawtransaction(result[\"hex\"])\n-        assert_equal(len(res_dec[\"vin\"]), 2)\n-        assert res_dec[\"vin\"][0][\"txid\"] == self.watchonly_txid or res_dec[\"vin\"][1][\"txid\"] == self.watchonly_txid\n+        assert_equal(len(res_dec[\"vin\"]), 1)\n+        assert res_dec[\"vin\"][0][\"txid\"] == self.watchonly_txid\n \n         assert_greater_than(result[\"fee\"], 0)\n-        assert_greater_than(result[\"changepos\"], -1)\n-        assert_equal(result[\"fee\"] + res_dec[\"vout\"][result[\"changepos\"]][\"value\"], self.watchonly_amount / 10)\n+        assert_equal(result[\"changepos\"], -1)\n+        assert_equal(result[\"fee\"] + res_dec[\"vout\"][0][\"value\"], self.watchonly_amount)\n \n-        signedtx = self.nodes[3].signrawtransactionwithwallet(result[\"hex\"])\n+        signedtx = wwatch.signrawtransactionwithwallet(result[\"hex\"])\n         assert not signedtx[\"complete\"]\n         signedtx = self.nodes[0].signrawtransactionwithwallet(signedtx[\"hex\"])\n         assert signedtx[\"complete\"]\n         self.nodes[0].sendrawtransaction(signedtx[\"hex\"])\n         self.nodes[0].generate(1)\n         self.sync_all()\n \n+        wwatch.unloadwallet()\n+\n     def test_option_feerate(self):\n         self.log.info(\"Test fundrawtxn feeRate option\")\n "
      }
    ]
  },
  {
    "sha": "2a1619b1412dbda532a9fd7a0e2f3ac440e89ebc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYTE2MTliMTQxMmRiZGE1MzJhOWZkN2EwZTJmM2FjNDQwZTg5ZWJj",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-06T19:30:49Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-10-28T20:48:19Z"
      },
      "message": "Make import tests in wallet_listtransactions.py legacy wallet only\n\nExisting import* RPCs are disabled for descriptor wallets, so only do\nthese tests for legacy wallets.",
      "tree": {
        "sha": "84a4fa8e08990f0e4581751cec8daf098b107aea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/84a4fa8e08990f0e4581751cec8daf098b107aea"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2a1619b1412dbda532a9fd7a0e2f3ac440e89ebc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a1619b1412dbda532a9fd7a0e2f3ac440e89ebc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2a1619b1412dbda532a9fd7a0e2f3ac440e89ebc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a1619b1412dbda532a9fd7a0e2f3ac440e89ebc/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "90dfb1ff1090e719d58c469b5d4ad8994f3432d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90dfb1ff1090e719d58c469b5d4ad8994f3432d5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/90dfb1ff1090e719d58c469b5d4ad8994f3432d5"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 14,
      "deletions": 12
    },
    "files": [
      {
        "sha": "3e982084316a4cc1392f8157708d3de2d49365b3",
        "filename": "test/functional/wallet_listtransactions.py",
        "status": "modified",
        "additions": 14,
        "deletions": 12,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a1619b1412dbda532a9fd7a0e2f3ac440e89ebc/test/functional/wallet_listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a1619b1412dbda532a9fd7a0e2f3ac440e89ebc/test/functional/wallet_listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listtransactions.py?ref=2a1619b1412dbda532a9fd7a0e2f3ac440e89ebc",
        "patch": "@@ -91,18 +91,20 @@ def run_test(self):\n                             {\"category\": \"receive\", \"amount\": Decimal(\"0.44\")},\n                             {\"txid\": txid})\n \n-        pubkey = self.nodes[1].getaddressinfo(self.nodes[1].getnewaddress())['pubkey']\n-        multisig = self.nodes[1].createmultisig(1, [pubkey])\n-        self.nodes[0].importaddress(multisig[\"redeemScript\"], \"watchonly\", False, True)\n-        txid = self.nodes[1].sendtoaddress(multisig[\"address\"], 0.1)\n-        self.nodes[1].generate(1)\n-        self.sync_all()\n-        assert_equal(len(self.nodes[0].listtransactions(label=\"watchonly\", include_watchonly=True)), 1)\n-        assert_equal(len(self.nodes[0].listtransactions(dummy=\"watchonly\", include_watchonly=True)), 1)\n-        assert len(self.nodes[0].listtransactions(label=\"watchonly\", count=100, include_watchonly=False)) == 0\n-        assert_array_result(self.nodes[0].listtransactions(label=\"watchonly\", count=100, include_watchonly=True),\n-                            {\"category\": \"receive\", \"amount\": Decimal(\"0.1\")},\n-                            {\"txid\": txid, \"label\": \"watchonly\"})\n+        if not self.options.descriptors:\n+            # include_watchonly is a legacy wallet feature, so don't test it for descriptor wallets\n+            pubkey = self.nodes[1].getaddressinfo(self.nodes[1].getnewaddress())['pubkey']\n+            multisig = self.nodes[1].createmultisig(1, [pubkey])\n+            self.nodes[0].importaddress(multisig[\"redeemScript\"], \"watchonly\", False, True)\n+            txid = self.nodes[1].sendtoaddress(multisig[\"address\"], 0.1)\n+            self.nodes[1].generate(1)\n+            self.sync_all()\n+            assert_equal(len(self.nodes[0].listtransactions(label=\"watchonly\", include_watchonly=True)), 1)\n+            assert_equal(len(self.nodes[0].listtransactions(dummy=\"watchonly\", include_watchonly=True)), 1)\n+            assert len(self.nodes[0].listtransactions(label=\"watchonly\", count=100, include_watchonly=False)) == 0\n+            assert_array_result(self.nodes[0].listtransactions(label=\"watchonly\", count=100, include_watchonly=True),\n+                                {\"category\": \"receive\", \"amount\": Decimal(\"0.1\")},\n+                                {\"txid\": txid, \"label\": \"watchonly\"})\n \n         self.run_rbf_opt_in_test()\n "
      }
    ]
  },
  {
    "sha": "f337bd8e51492b5583389bd0c23d45596987179c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMzM3YmQ4ZTUxNDkyYjU1ODMzODliZDBjMjNkNDU1OTY5ODcxNzlj",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-06T19:50:25Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-10-28T20:48:19Z"
      },
      "message": "Avoid dumpprivkey in wallet_listsinceblock.py\n\nGenerate a privkey in the test framework instead of using dumpprivkey so\nthat descriptor wallets work in this test.",
      "tree": {
        "sha": "021eabea07f015b039ebdda91c7fd127a2022dca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/021eabea07f015b039ebdda91c7fd127a2022dca"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f337bd8e51492b5583389bd0c23d45596987179c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f337bd8e51492b5583389bd0c23d45596987179c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f337bd8e51492b5583389bd0c23d45596987179c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f337bd8e51492b5583389bd0c23d45596987179c/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2a1619b1412dbda532a9fd7a0e2f3ac440e89ebc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a1619b1412dbda532a9fd7a0e2f3ac440e89ebc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2a1619b1412dbda532a9fd7a0e2f3ac440e89ebc"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 19,
      "deletions": 5
    },
    "files": [
      {
        "sha": "1f87e93da51f1ee9f3cd45d20f9594a5ebdbb52b",
        "filename": "test/functional/wallet_listsinceblock.py",
        "status": "modified",
        "additions": 19,
        "deletions": 5,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f337bd8e51492b5583389bd0c23d45596987179c/test/functional/wallet_listsinceblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f337bd8e51492b5583389bd0c23d45596987179c/test/functional/wallet_listsinceblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listsinceblock.py?ref=f337bd8e51492b5583389bd0c23d45596987179c",
        "patch": "@@ -4,13 +4,16 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the listsinceblock RPC.\"\"\"\n \n+from test_framework.address import key_to_p2wpkh\n+from test_framework.key import ECKey\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.messages import BIP125_SEQUENCE_NUMBER\n from test_framework.util import (\n     assert_array_result,\n     assert_equal,\n     assert_raises_rpc_error,\n )\n+from test_framework.wallet_util import bytes_to_wif\n \n from decimal import Decimal\n \n@@ -181,15 +184,26 @@ def test_double_spend(self):\n \n         self.sync_all()\n \n-        # Split network into two\n-        self.split_network()\n-\n         # share utxo between nodes[1] and nodes[2]\n+        eckey = ECKey()\n+        eckey.generate()\n+        privkey = bytes_to_wif(eckey.get_bytes())\n+        address = key_to_p2wpkh(eckey.get_pubkey().get_bytes())\n+        self.nodes[2].sendtoaddress(address, 10)\n+        self.nodes[2].generate(6)\n+        self.nodes[2].importprivkey(privkey)\n         utxos = self.nodes[2].listunspent()\n-        utxo = utxos[0]\n-        privkey = self.nodes[2].dumpprivkey(utxo['address'])\n+        utxo = None\n+        for u in utxos:\n+            if u['address'] == address:\n+                utxo = u\n+                break\n+        assert utxo is not None\n         self.nodes[1].importprivkey(privkey)\n \n+        # Split network into two\n+        self.split_network()\n+\n         # send from nodes[1] using utxo to nodes[0]\n         change = '%.8f' % (float(utxo['amount']) - 1.0003)\n         recipient_dict = {"
      }
    ]
  },
  {
    "sha": "93a59c652d7de8f11f6b60febb6f89c5fb39b8a5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5M2E1OWM2NTJkN2RlOGYxMWY2YjYwZmViYjZmODljNWZiMzliOGE1",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-06T20:10:15Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-10-28T20:48:19Z"
      },
      "message": "Use importdescriptors for descriptor wallets in wallet_bumpfee.py\n\nIf using descriptor wallets, use importdescriptors instead of\nimportmulti.",
      "tree": {
        "sha": "589ead2a282c51ae0fbab267104e829244a555fc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/589ead2a282c51ae0fbab267104e829244a555fc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/93a59c652d7de8f11f6b60febb6f89c5fb39b8a5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93a59c652d7de8f11f6b60febb6f89c5fb39b8a5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/93a59c652d7de8f11f6b60febb6f89c5fb39b8a5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93a59c652d7de8f11f6b60febb6f89c5fb39b8a5/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f337bd8e51492b5583389bd0c23d45596987179c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f337bd8e51492b5583389bd0c23d45596987179c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f337bd8e51492b5583389bd0c23d45596987179c"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 17,
      "deletions": 7
    },
    "files": [
      {
        "sha": "9877a9cbd729534c77fda7493ac093382d1a7f9a",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 17,
        "deletions": 7,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93a59c652d7de8f11f6b60febb6f89c5fb39b8a5/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93a59c652d7de8f11f6b60febb6f89c5fb39b8a5/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=93a59c652d7de8f11f6b60febb6f89c5fb39b8a5",
        "patch": "@@ -184,7 +184,7 @@ def test_segwit_bumpfee_succeeds(self, rbf_node, dest_address):\n     # which spends it, and make sure bumpfee can be called on it.\n \n     segwit_in = next(u for u in rbf_node.listunspent() if u[\"amount\"] == Decimal(\"0.001\"))\n-    segwit_out = rbf_node.getaddressinfo(rbf_node.getnewaddress(address_type='p2sh-segwit'))\n+    segwit_out = rbf_node.getaddressinfo(rbf_node.getnewaddress(address_type='bech32'))\n     segwitid = send_to_witness(\n         use_p2wsh=False,\n         node=rbf_node,\n@@ -365,7 +365,7 @@ def test_watchonly_psbt(self, peer_node, rbf_node, dest_address):\n     rbf_node.createwallet(wallet_name=\"signer\", disable_private_keys=False, blank=True)\n     signer = rbf_node.get_wallet_rpc(\"signer\")\n     assert signer.getwalletinfo()['private_keys_enabled']\n-    result = signer.importmulti([{\n+    reqs = [{\n         \"desc\": priv_rec_desc,\n         \"timestamp\": 0,\n         \"range\": [0,1],\n@@ -378,29 +378,39 @@ def test_watchonly_psbt(self, peer_node, rbf_node, dest_address):\n         \"range\": [0, 0],\n         \"internal\": True,\n         \"keypool\": False\n-    }])\n+    }]\n+    if self.options.descriptors:\n+        result = signer.importdescriptors(reqs)\n+    else:\n+        result = signer.importmulti(reqs)\n     assert_equal(result, [{'success': True}, {'success': True}])\n \n     # Create another wallet with just the public keys, which creates PSBTs\n     rbf_node.createwallet(wallet_name=\"watcher\", disable_private_keys=True, blank=True)\n     watcher = rbf_node.get_wallet_rpc(\"watcher\")\n     assert not watcher.getwalletinfo()['private_keys_enabled']\n \n-    result = watcher.importmulti([{\n+    reqs = [{\n         \"desc\": pub_rec_desc,\n         \"timestamp\": 0,\n         \"range\": [0, 10],\n         \"internal\": False,\n         \"keypool\": True,\n-        \"watchonly\": True\n+        \"watchonly\": True,\n+        \"active\": True,\n     }, {\n         \"desc\": pub_change_desc,\n         \"timestamp\": 0,\n         \"range\": [0, 10],\n         \"internal\": True,\n         \"keypool\": True,\n-        \"watchonly\": True\n-    }])\n+        \"watchonly\": True,\n+        \"active\": True,\n+    }]\n+    if self.options.descriptors:\n+        result = watcher.importdescriptors(reqs)\n+    else:\n+        result = watcher.importmulti(reqs)\n     assert_equal(result, [{'success': True}, {'success': True}])\n \n     funding_address1 = watcher.getnewaddress(address_type='bech32')"
      }
    ]
  },
  {
    "sha": "6e0ad0405e02690091b724ad8aed85fed6544a7d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZTBhZDA0MDVlMDI2OTAwOTFiNzI0YWQ4YWVkODVmZWQ2NTQ0YTdk",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-06T21:21:45Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-10-28T20:48:19Z"
      },
      "message": "Move import and watchonly tests to be legacy wallet only in wallet_balance.py\n\nImports and watchonly behavior are legacy wallet only, so make them only\nrun when the test is in legacy wallet mode.",
      "tree": {
        "sha": "eeaafbaac1b8d3ecc2561f9203d6e9c4225010ef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eeaafbaac1b8d3ecc2561f9203d6e9c4225010ef"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6e0ad0405e02690091b724ad8aed85fed6544a7d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e0ad0405e02690091b724ad8aed85fed6544a7d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6e0ad0405e02690091b724ad8aed85fed6544a7d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e0ad0405e02690091b724ad8aed85fed6544a7d/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "93a59c652d7de8f11f6b60febb6f89c5fb39b8a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93a59c652d7de8f11f6b60febb6f89c5fb39b8a5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/93a59c652d7de8f11f6b60febb6f89c5fb39b8a5"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 26,
      "deletions": 16
    },
    "files": [
      {
        "sha": "0e786ca595d8e7dfb1bacdec604879b82b56b1c7",
        "filename": "test/functional/wallet_balance.py",
        "status": "modified",
        "additions": 26,
        "deletions": 16,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e0ad0405e02690091b724ad8aed85fed6544a7d/test/functional/wallet_balance.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e0ad0405e02690091b724ad8aed85fed6544a7d/test/functional/wallet_balance.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_balance.py?ref=6e0ad0405e02690091b724ad8aed85fed6544a7d",
        "patch": "@@ -57,14 +57,16 @@ def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n \n     def run_test(self):\n-        self.nodes[0].importaddress(ADDRESS_WATCHONLY)\n-        # Check that nodes don't own any UTXOs\n-        assert_equal(len(self.nodes[0].listunspent()), 0)\n-        assert_equal(len(self.nodes[1].listunspent()), 0)\n+        if not self.options.descriptors:\n+            # Tests legacy watchonly behavior which is not present (and does not need to be tested) in descriptor wallets\n+            self.nodes[0].importaddress(ADDRESS_WATCHONLY)\n+            # Check that nodes don't own any UTXOs\n+            assert_equal(len(self.nodes[0].listunspent()), 0)\n+            assert_equal(len(self.nodes[1].listunspent()), 0)\n \n-        self.log.info(\"Check that only node 0 is watching an address\")\n-        assert 'watchonly' in self.nodes[0].getbalances()\n-        assert 'watchonly' not in self.nodes[1].getbalances()\n+            self.log.info(\"Check that only node 0 is watching an address\")\n+            assert 'watchonly' in self.nodes[0].getbalances()\n+            assert 'watchonly' not in self.nodes[1].getbalances()\n \n         self.log.info(\"Mining blocks ...\")\n         self.nodes[0].generate(1)\n@@ -73,22 +75,28 @@ def run_test(self):\n         self.nodes[1].generatetoaddress(101, ADDRESS_WATCHONLY)\n         self.sync_all()\n \n-        assert_equal(self.nodes[0].getbalances()['mine']['trusted'], 50)\n-        assert_equal(self.nodes[0].getwalletinfo()['balance'], 50)\n-        assert_equal(self.nodes[1].getbalances()['mine']['trusted'], 50)\n+        if not self.options.descriptors:\n+            # Tests legacy watchonly behavior which is not present (and does not need to be tested) in descriptor wallets\n+            assert_equal(self.nodes[0].getbalances()['mine']['trusted'], 50)\n+            assert_equal(self.nodes[0].getwalletinfo()['balance'], 50)\n+            assert_equal(self.nodes[1].getbalances()['mine']['trusted'], 50)\n \n-        assert_equal(self.nodes[0].getbalances()['watchonly']['immature'], 5000)\n-        assert 'watchonly' not in self.nodes[1].getbalances()\n+            assert_equal(self.nodes[0].getbalances()['watchonly']['immature'], 5000)\n+            assert 'watchonly' not in self.nodes[1].getbalances()\n \n-        assert_equal(self.nodes[0].getbalance(), 50)\n-        assert_equal(self.nodes[1].getbalance(), 50)\n+            assert_equal(self.nodes[0].getbalance(), 50)\n+            assert_equal(self.nodes[1].getbalance(), 50)\n \n         self.log.info(\"Test getbalance with different arguments\")\n         assert_equal(self.nodes[0].getbalance(\"*\"), 50)\n         assert_equal(self.nodes[0].getbalance(\"*\", 1), 50)\n-        assert_equal(self.nodes[0].getbalance(\"*\", 1, True), 100)\n         assert_equal(self.nodes[0].getbalance(minconf=1), 50)\n-        assert_equal(self.nodes[0].getbalance(minconf=0, include_watchonly=True), 100)\n+        if not self.options.descriptors:\n+            assert_equal(self.nodes[0].getbalance(minconf=0, include_watchonly=True), 100)\n+            assert_equal(self.nodes[0].getbalance(\"*\", 1, True), 100)\n+        else:\n+            assert_equal(self.nodes[0].getbalance(minconf=0, include_watchonly=True), 50)\n+            assert_equal(self.nodes[0].getbalance(\"*\", 1, True), 50)\n         assert_equal(self.nodes[1].getbalance(minconf=0, include_watchonly=True), 50)\n \n         # Send 40 BTC from 0 to 1 and 60 BTC from 1 to 0.\n@@ -156,6 +164,8 @@ def test_balances(*, fee_node_1=0):\n             expected_balances_1 = {'mine':      {'immature':          Decimal('0E-8'),\n                                                  'trusted':           Decimal('0E-8'),  # node 1's send had an unsafe input\n                                                  'untrusted_pending': Decimal('30.0') - fee_node_1}}  # Doesn't include output of node 0's send since it was spent\n+            if self.options.descriptors:\n+                del expected_balances_0[\"watchonly\"]\n             assert_equal(self.nodes[0].getbalances(), expected_balances_0)\n             assert_equal(self.nodes[1].getbalances(), expected_balances_1)\n             # getbalance without any arguments includes unconfirmed transactions, but not untrusted transactions"
      }
    ]
  },
  {
    "sha": "11ae325b337aa91c0a84cd94fcbda477a94465a6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMWFlMzI1YjMzN2FhOTFjMGE4NGNkOTRmY2JkYTQ3N2E5NDQ2NWE2",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-06T22:13:46Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-10-28T20:48:19Z"
      },
      "message": "Use separate watchonly wallet for multisig in feature_nulldummy.py\n\nCreate and import the multisig into a separate watchonly wallet so that\nfeature_nulldummy.py works with descriptor wallets.\n\nblocktools.create_raw_transaction is also updated to use multiple nodes\nand wallets and to use PSBT so that this test passes.",
      "tree": {
        "sha": "e4e15fb75c0bb1fe40df3742e8562deb83ff3f3c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e4e15fb75c0bb1fe40df3742e8562deb83ff3f3c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/11ae325b337aa91c0a84cd94fcbda477a94465a6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11ae325b337aa91c0a84cd94fcbda477a94465a6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/11ae325b337aa91c0a84cd94fcbda477a94465a6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11ae325b337aa91c0a84cd94fcbda477a94465a6/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6e0ad0405e02690091b724ad8aed85fed6544a7d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e0ad0405e02690091b724ad8aed85fed6544a7d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6e0ad0405e02690091b724ad8aed85fed6544a7d"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 25,
      "deletions": 14
    },
    "files": [
      {
        "sha": "4141c3f99c23ed55602afe7a9d480f54732e4c4d",
        "filename": "test/functional/feature_nulldummy.py",
        "status": "modified",
        "additions": 12,
        "deletions": 4,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11ae325b337aa91c0a84cd94fcbda477a94465a6/test/functional/feature_nulldummy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11ae325b337aa91c0a84cd94fcbda477a94465a6/test/functional/feature_nulldummy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_nulldummy.py?ref=11ae325b337aa91c0a84cd94fcbda477a94465a6",
        "patch": "@@ -51,10 +51,18 @@ def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n \n     def run_test(self):\n-        self.address = self.nodes[0].getnewaddress()\n-        self.ms_address = self.nodes[0].addmultisigaddress(1, [self.address])['address']\n-        self.wit_address = self.nodes[0].getnewaddress(address_type='p2sh-segwit')\n-        self.wit_ms_address = self.nodes[0].addmultisigaddress(1, [self.address], '', 'p2sh-segwit')['address']\n+        self.nodes[0].createwallet(wallet_name='wmulti', disable_private_keys=True)\n+        wmulti = self.nodes[0].get_wallet_rpc('wmulti')\n+        w0 = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+        self.address = w0.getnewaddress()\n+        self.pubkey = w0.getaddressinfo(self.address)['pubkey']\n+        self.ms_address = wmulti.addmultisigaddress(1, [self.pubkey])['address']\n+        self.wit_address = w0.getnewaddress(address_type='p2sh-segwit')\n+        self.wit_ms_address = wmulti.addmultisigaddress(1, [self.pubkey], '', 'p2sh-segwit')['address']\n+        if not self.options.descriptors:\n+            # Legacy wallets ned to import these so that they are watched by the wallet. This is unnecssary (and does not need to be tested) for descriptor wallets\n+            wmulti.importaddress(self.ms_address)\n+            wmulti.importaddress(self.wit_ms_address)\n \n         self.coinbase_blocks = self.nodes[0].generate(2)  # Block 2\n         coinbase_txid = []"
      },
      {
        "sha": "64bc7e04850a671316678ce06c3733ead1fa7006",
        "filename": "test/functional/test_framework/blocktools.py",
        "status": "modified",
        "additions": 13,
        "deletions": 10,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11ae325b337aa91c0a84cd94fcbda477a94465a6/test/functional/test_framework/blocktools.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11ae325b337aa91c0a84cd94fcbda477a94465a6/test/functional/test_framework/blocktools.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/blocktools.py?ref=11ae325b337aa91c0a84cd94fcbda477a94465a6",
        "patch": "@@ -162,9 +162,8 @@ def create_tx_with_script(prevtx, n, script_sig=b\"\", *, amount, script_pub_key=C\n \n def create_transaction(node, txid, to_address, *, amount):\n     \"\"\" Return signed transaction spending the first output of the\n-        input txid. Note that the node must be able to sign for the\n-        output that is being spent, and the node must not be running\n-        multiple wallets.\n+        input txid. Note that the node must have a wallet that can\n+        sign for the output that is being spent.\n     \"\"\"\n     raw_tx = create_raw_transaction(node, txid, to_address, amount=amount)\n     tx = CTransaction()\n@@ -173,14 +172,18 @@ def create_transaction(node, txid, to_address, *, amount):\n \n def create_raw_transaction(node, txid, to_address, *, amount):\n     \"\"\" Return raw signed transaction spending the first output of the\n-        input txid. Note that the node must be able to sign for the\n-        output that is being spent, and the node must not be running\n-        multiple wallets.\n+        input txid. Note that the node must have a wallet that can sign\n+        for the output that is being spent.\n     \"\"\"\n-    rawtx = node.createrawtransaction(inputs=[{\"txid\": txid, \"vout\": 0}], outputs={to_address: amount})\n-    signresult = node.signrawtransactionwithwallet(rawtx)\n-    assert_equal(signresult[\"complete\"], True)\n-    return signresult['hex']\n+    psbt = node.createpsbt(inputs=[{\"txid\": txid, \"vout\": 0}], outputs={to_address: amount})\n+    for _ in range(2):\n+        for w in node.listwallets():\n+            wrpc = node.get_wallet_rpc(w)\n+            signed_psbt = wrpc.walletprocesspsbt(psbt)\n+            psbt = signed_psbt['psbt']\n+    final_psbt = node.finalizepsbt(psbt)\n+    assert_equal(final_psbt[\"complete\"], True)\n+    return final_psbt['hex']\n \n def get_legacy_sigopcount_block(block, accurate=True):\n     count = 0"
      }
    ]
  },
  {
    "sha": "f27138a342a1fd0bd83b228a0c3b5bd5b1b971ba",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMjcxMzhhMzQyYTFmZDBiZDgzYjIyOGEwYzNiNWJkNWIxYjk3MWJh",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-06T23:23:25Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-10-28T20:48:19Z"
      },
      "message": "Add descriptor wallet output to tool_wallet.py\n\nDescriptor wallets output slightly different information in the wallet\ntool, so check that output when in descriptor wallet mode.",
      "tree": {
        "sha": "de3403ddf45811a478a5f30d6225767ea5bdbfb9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/de3403ddf45811a478a5f30d6225767ea5bdbfb9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f27138a342a1fd0bd83b228a0c3b5bd5b1b971ba",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f27138a342a1fd0bd83b228a0c3b5bd5b1b971ba",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f27138a342a1fd0bd83b228a0c3b5bd5b1b971ba",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f27138a342a1fd0bd83b228a0c3b5bd5b1b971ba/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "11ae325b337aa91c0a84cd94fcbda477a94465a6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11ae325b337aa91c0a84cd94fcbda477a94465a6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/11ae325b337aa91c0a84cd94fcbda477a94465a6"
      }
    ],
    "stats": {
      "total": 81,
      "additions": 56,
      "deletions": 25
    },
    "files": [
      {
        "sha": "d201a4afca1a777794462f5d0896b88fdb9a504d",
        "filename": "test/functional/tool_wallet.py",
        "status": "modified",
        "additions": 56,
        "deletions": 25,
        "changes": 81,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f27138a342a1fd0bd83b228a0c3b5bd5b1b971ba/test/functional/tool_wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f27138a342a1fd0bd83b228a0c3b5bd5b1b971ba/test/functional/tool_wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/tool_wallet.py?ref=f27138a342a1fd0bd83b228a0c3b5bd5b1b971ba",
        "patch": "@@ -71,8 +71,11 @@ def test_invalid_tool_commands_and_args(self):\n         self.assert_raises_tool_error('Error: two methods provided (info and create). Only one method should be provided.', 'info', 'create')\n         self.assert_raises_tool_error('Error parsing command line arguments: Invalid parameter -foo', '-foo')\n         locked_dir = os.path.join(self.options.tmpdir, \"node0\", \"regtest\", \"wallets\")\n+        error = 'Error initializing wallet database environment \"{}\"!'.format(locked_dir)\n+        if self.options.descriptors:\n+            error = \"SQLiteDatabase: Unable to obtain an exclusive lock on the database, is it being used by another bitcoind?\"\n         self.assert_raises_tool_error(\n-            'Error initializing wallet database environment \"{}\"!'.format(locked_dir),\n+            error,\n             '-wallet=' + self.default_wallet_name,\n             'info',\n         )\n@@ -95,19 +98,33 @@ def test_tool_wallet_info(self):\n         # shasum_before = self.wallet_shasum()\n         timestamp_before = self.wallet_timestamp()\n         self.log.debug('Wallet file timestamp before calling info: {}'.format(timestamp_before))\n-        out = textwrap.dedent('''\\\n-            Wallet info\n-            ===========\n-            Name: \\\n+        if self.options.descriptors:\n+            out = textwrap.dedent('''\\\n+                Wallet info\n+                ===========\n+                Name: default_wallet\n+                Format: sqlite\n+                Descriptors: yes\n+                Encrypted: no\n+                HD (hd seed available): yes\n+                Keypool Size: 6\n+                Transactions: 0\n+                Address Book: 1\n+            ''')\n+        else:\n+            out = textwrap.dedent('''\\\n+                Wallet info\n+                ===========\n+                Name: \\\n \n-            Format: bdb\n-            Descriptors: no\n-            Encrypted: no\n-            HD (hd seed available): yes\n-            Keypool Size: 2\n-            Transactions: 0\n-            Address Book: 3\n-        ''')\n+                Format: bdb\n+                Descriptors: no\n+                Encrypted: no\n+                HD (hd seed available): yes\n+                Keypool Size: 2\n+                Transactions: 0\n+                Address Book: 3\n+            ''')\n         self.assert_tool_output(out, '-wallet=' + self.default_wallet_name, 'info')\n         timestamp_after = self.wallet_timestamp()\n         self.log.debug('Wallet file timestamp after calling info: {}'.format(timestamp_after))\n@@ -138,19 +155,33 @@ def test_tool_wallet_info_after_transaction(self):\n         shasum_before = self.wallet_shasum()\n         timestamp_before = self.wallet_timestamp()\n         self.log.debug('Wallet file timestamp before calling info: {}'.format(timestamp_before))\n-        out = textwrap.dedent('''\\\n-            Wallet info\n-            ===========\n-            Name: \\\n+        if self.options.descriptors:\n+            out = textwrap.dedent('''\\\n+                Wallet info\n+                ===========\n+                Name: default_wallet\n+                Format: sqlite\n+                Descriptors: yes\n+                Encrypted: no\n+                HD (hd seed available): yes\n+                Keypool Size: 6\n+                Transactions: 1\n+                Address Book: 1\n+            ''')\n+        else:\n+            out = textwrap.dedent('''\\\n+                Wallet info\n+                ===========\n+                Name: \\\n \n-            Format: bdb\n-            Descriptors: no\n-            Encrypted: no\n-            HD (hd seed available): yes\n-            Keypool Size: 2\n-            Transactions: 1\n-            Address Book: 3\n-        ''')\n+                Format: bdb\n+                Descriptors: no\n+                Encrypted: no\n+                HD (hd seed available): yes\n+                Keypool Size: 2\n+                Transactions: 1\n+                Address Book: 3\n+            ''')\n         self.assert_tool_output(out, '-wallet=' + self.default_wallet_name, 'info')\n         shasum_after = self.wallet_shasum()\n         timestamp_after = self.wallet_timestamp()"
      }
    ]
  },
  {
    "sha": "6b988335be575ea0b959e28c08e851c98cd5b326",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2Yjk4ODMzNWJlNTc1ZWEwYjk1OWUyOGMwOGU4NTFjOThjZDViMzI2",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-07T00:22:06Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-10-28T20:48:19Z"
      },
      "message": "Add script equivalent of functions in address.py",
      "tree": {
        "sha": "ee4fe6a3c62fd7bb5d5a7f85cbde057578272b6c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ee4fe6a3c62fd7bb5d5a7f85cbde057578272b6c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6b988335be575ea0b959e28c08e851c98cd5b326",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b988335be575ea0b959e28c08e851c98cd5b326",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6b988335be575ea0b959e28c08e851c98cd5b326",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b988335be575ea0b959e28c08e851c98cd5b326/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f27138a342a1fd0bd83b228a0c3b5bd5b1b971ba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f27138a342a1fd0bd83b228a0c3b5bd5b1b971ba",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f27138a342a1fd0bd83b228a0c3b5bd5b1b971ba"
      }
    ],
    "stats": {
      "total": 59,
      "additions": 58,
      "deletions": 1
    },
    "files": [
      {
        "sha": "318a43870555ceed814128bfcdc8e6fc10407185",
        "filename": "test/functional/test_framework/script_util.py",
        "status": "modified",
        "additions": 58,
        "deletions": 1,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b988335be575ea0b959e28c08e851c98cd5b326/test/functional/test_framework/script_util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b988335be575ea0b959e28c08e851c98cd5b326/test/functional/test_framework/script_util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/script_util.py?ref=6b988335be575ea0b959e28c08e851c98cd5b326",
        "patch": "@@ -3,7 +3,8 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Useful Script constants and utils.\"\"\"\n-from test_framework.script import CScript\n+from test_framework.script import CScript, hash160, sha256, OP_0, OP_DUP, OP_HASH160, OP_CHECKSIG, OP_EQUAL, OP_EQUALVERIFY\n+from test_framework.util import hex_str_to_bytes\n \n # To prevent a \"tx-size-small\" policy rule error, a transaction has to have a\n # non-witness size of at least 82 bytes (MIN_STANDARD_TX_NONWITNESS_SIZE in\n@@ -24,3 +25,59 @@\n # met.\n DUMMY_P2WPKH_SCRIPT = CScript([b'a' * 21])\n DUMMY_2_P2WPKH_SCRIPT = CScript([b'b' * 21])\n+\n+def keyhash_to_p2pkh_script(hash, main = False):\n+    assert len(hash) == 20\n+    return CScript([OP_DUP, OP_HASH160, hash, OP_EQUALVERIFY, OP_CHECKSIG])\n+\n+def scripthash_to_p2sh_script(hash, main = False):\n+    assert len(hash) == 20\n+    return CScript([OP_HASH160, hash, OP_EQUAL])\n+\n+def key_to_p2pkh_script(key, main = False):\n+    key = check_key(key)\n+    return keyhash_to_p2pkh_script(hash160(key), main)\n+\n+def script_to_p2sh_script(script, main = False):\n+    script = check_script(script)\n+    return scripthash_to_p2sh_script(hash160(script), main)\n+\n+def key_to_p2sh_p2wpkh_script(key, main = False):\n+    key = check_key(key)\n+    p2shscript = CScript([OP_0, hash160(key)])\n+    return script_to_p2sh_script(p2shscript, main)\n+\n+def program_to_witness_script(version, program, main = False):\n+    if isinstance(program, str):\n+        program = hex_str_to_bytes(program)\n+    assert 0 <= version <= 16\n+    assert 2 <= len(program) <= 40\n+    assert version > 0 or len(program) in [20, 32]\n+    return CScript([version, program])\n+\n+def script_to_p2wsh_script(script, main = False):\n+    script = check_script(script)\n+    return program_to_witness_script(0, sha256(script), main)\n+\n+def key_to_p2wpkh_script(key, main = False):\n+    key = check_key(key)\n+    return program_to_witness_script(0, hash160(key), main)\n+\n+def script_to_p2sh_p2wsh_script(script, main = False):\n+    script = check_script(script)\n+    p2shscript = CScript([OP_0, sha256(script)])\n+    return script_to_p2sh_script(p2shscript, main)\n+\n+def check_key(key):\n+    if isinstance(key, str):\n+        key = hex_str_to_bytes(key) # Assuming this is hex string\n+    if isinstance(key, bytes) and (len(key) == 33 or len(key) == 65):\n+        return key\n+    assert False\n+\n+def check_script(script):\n+    if isinstance(script, str):\n+        script = hex_str_to_bytes(script) # Assuming this is hex string\n+    if isinstance(script, bytes) or isinstance(script, CScript):\n+        return script\n+    assert False"
      }
    ]
  },
  {
    "sha": "de5ec3fcd2846dcf8614c61ce8217a0efa6737a0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZTVlYzNmY2QyODQ2ZGNmODYxNGM2MWNlODIxN2EwZWZhNjczN2Ew",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-07T00:22:24Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-10-28T20:48:19Z"
      },
      "message": "Avoid dumpprivkey and watchonly behavior in rpc_signrawtransaction.py\n\ndumpprivkey and watchonly behavior don't work with descriptor wallets.\n\nTest for multisigs is modified to not rely on watchonly behavior for\nthose multisigs. This has a side effect of removing listunspent, but\nthat's not the target of this test, so that's fine.",
      "tree": {
        "sha": "15daba823af0e6e14adc707a18b7d1f2d7e2dc1b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/15daba823af0e6e14adc707a18b7d1f2d7e2dc1b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/de5ec3fcd2846dcf8614c61ce8217a0efa6737a0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de5ec3fcd2846dcf8614c61ce8217a0efa6737a0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/de5ec3fcd2846dcf8614c61ce8217a0efa6737a0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de5ec3fcd2846dcf8614c61ce8217a0efa6737a0/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6b988335be575ea0b959e28c08e851c98cd5b326",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b988335be575ea0b959e28c08e851c98cd5b326",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6b988335be575ea0b959e28c08e851c98cd5b326"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 21,
      "deletions": 13
    },
    "files": [
      {
        "sha": "b962e1c3a552bedb8643a91326c780fbc045496a",
        "filename": "test/functional/rpc_signrawtransaction.py",
        "status": "modified",
        "additions": 21,
        "deletions": 13,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de5ec3fcd2846dcf8614c61ce8217a0efa6737a0/test/functional/rpc_signrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de5ec3fcd2846dcf8614c61ce8217a0efa6737a0/test/functional/rpc_signrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_signrawtransaction.py?ref=de5ec3fcd2846dcf8614c61ce8217a0efa6737a0",
        "patch": "@@ -5,10 +5,13 @@\n \"\"\"Test transaction signing using the signrawtransaction* RPCs.\"\"\"\n \n from test_framework.address import check_script, script_to_p2sh\n+from test_framework.key import ECKey\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal, assert_raises_rpc_error, find_vout_for_address, hex_str_to_bytes\n from test_framework.messages import sha256\n from test_framework.script import CScript, OP_0, OP_CHECKSIG\n+from test_framework.script_util import key_to_p2pkh_script, script_to_p2sh_p2wsh_script, script_to_p2wsh_script\n+from test_framework.wallet_util import bytes_to_wif\n \n from decimal import Decimal\n \n@@ -151,21 +154,24 @@ def script_verification_error_test(self):\n     def witness_script_test(self):\n         self.log.info(\"Test signing transaction to P2SH-P2WSH addresses without wallet\")\n         # Create a new P2SH-P2WSH 1-of-1 multisig address:\n-        embedded_address = self.nodes[1].getaddressinfo(self.nodes[1].getnewaddress())\n-        embedded_privkey = self.nodes[1].dumpprivkey(embedded_address[\"address\"])\n-        p2sh_p2wsh_address = self.nodes[1].addmultisigaddress(1, [embedded_address[\"pubkey\"]], \"\", \"p2sh-segwit\")\n+        eckey = ECKey()\n+        eckey.generate()\n+        embedded_privkey = bytes_to_wif(eckey.get_bytes())\n+        embedded_pubkey = eckey.get_pubkey().get_bytes().hex()\n+        p2sh_p2wsh_address = self.nodes[1].createmultisig(1, [embedded_pubkey], \"p2sh-segwit\")\n         # send transaction to P2SH-P2WSH 1-of-1 multisig address\n         self.nodes[0].generate(101)\n         self.nodes[0].sendtoaddress(p2sh_p2wsh_address[\"address\"], 49.999)\n         self.nodes[0].generate(1)\n         self.sync_all()\n-        # Find the UTXO for the transaction node[1] should have received, check witnessScript matches\n-        unspent_output = self.nodes[1].listunspent(0, 999999, [p2sh_p2wsh_address[\"address\"]])[0]\n-        assert_equal(unspent_output[\"witnessScript\"], p2sh_p2wsh_address[\"redeemScript\"])\n-        p2sh_redeemScript = CScript([OP_0, sha256(hex_str_to_bytes(p2sh_p2wsh_address[\"redeemScript\"]))])\n-        assert_equal(unspent_output[\"redeemScript\"], p2sh_redeemScript.hex())\n+        # Get the UTXO info from scantxoutset\n+        unspent_output = self.nodes[1].scantxoutset('start', [p2sh_p2wsh_address['descriptor']])['unspents'][0]\n+        spk = script_to_p2sh_p2wsh_script(p2sh_p2wsh_address['redeemScript']).hex()\n+        unspent_output['witnessScript'] = p2sh_p2wsh_address['redeemScript']\n+        unspent_output['redeemScript'] = script_to_p2wsh_script(unspent_output['witnessScript']).hex()\n+        assert_equal(spk, unspent_output['scriptPubKey'])\n         # Now create and sign a transaction spending that output on node[0], which doesn't know the scripts or keys\n-        spending_tx = self.nodes[0].createrawtransaction([unspent_output], {self.nodes[1].getnewaddress(): Decimal(\"49.998\")})\n+        spending_tx = self.nodes[0].createrawtransaction([unspent_output], {self.nodes[1].get_wallet_rpc(self.default_wallet_name).getnewaddress(): Decimal(\"49.998\")})\n         spending_tx_signed = self.nodes[0].signrawtransactionwithkey(spending_tx, [embedded_privkey], [unspent_output])\n         # Check the signing completed successfully\n         assert 'complete' in spending_tx_signed\n@@ -177,11 +183,13 @@ def witness_script_test(self):\n \n     def verify_txn_with_witness_script(self, tx_type):\n         self.log.info(\"Test with a {} script as the witnessScript\".format(tx_type))\n-        embedded_addr_info = self.nodes[1].getaddressinfo(self.nodes[1].getnewaddress('', 'legacy'))\n-        embedded_privkey = self.nodes[1].dumpprivkey(embedded_addr_info['address'])\n+        eckey = ECKey()\n+        eckey.generate()\n+        embedded_privkey = bytes_to_wif(eckey.get_bytes())\n+        embedded_pubkey = eckey.get_pubkey().get_bytes().hex()\n         witness_script = {\n-            'P2PKH': embedded_addr_info['scriptPubKey'],\n-            'P2PK': CScript([hex_str_to_bytes(embedded_addr_info['pubkey']), OP_CHECKSIG]).hex()\n+            'P2PKH': key_to_p2pkh_script(embedded_pubkey).hex(),\n+            'P2PK': CScript([hex_str_to_bytes(embedded_pubkey), OP_CHECKSIG]).hex()\n         }.get(tx_type, \"Invalid tx_type\")\n         redeem_script = CScript([OP_0, sha256(check_script(witness_script))]).hex()\n         addr = script_to_p2sh(redeem_script)"
      }
    ]
  },
  {
    "sha": "1d54a4a9fabadcaa5bfd07af8a8af75c50178729",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZDU0YTRhOWZhYmFkY2FhNWJmZDA3YWY4YThhZjc1YzUwMTc4NzI5",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-07T17:51:04Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-10-28T20:48:19Z"
      },
      "message": "Use importdescriptors when in descriptor wallet mode in wallet_createwallet.py\n\nsethdseed and importmulti are not available for descriptor wallets, so\nwhen doing descriptor wallet tests, use importdescriptors instead.\n\nAlso changes some output to match what descriptor wallets will return.",
      "tree": {
        "sha": "a688b0e0c53bebbdb0814b9211f3756fe80d0a8f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a688b0e0c53bebbdb0814b9211f3756fe80d0a8f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1d54a4a9fabadcaa5bfd07af8a8af75c50178729",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d54a4a9fabadcaa5bfd07af8a8af75c50178729",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1d54a4a9fabadcaa5bfd07af8a8af75c50178729",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d54a4a9fabadcaa5bfd07af8a8af75c50178729/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "de5ec3fcd2846dcf8614c61ce8217a0efa6737a0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de5ec3fcd2846dcf8614c61ce8217a0efa6737a0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/de5ec3fcd2846dcf8614c61ce8217a0efa6737a0"
      }
    ],
    "stats": {
      "total": 56,
      "additions": 47,
      "deletions": 9
    },
    "files": [
      {
        "sha": "a982bc89bcae3de8b5045038ebe648bdd122cfc4",
        "filename": "test/functional/wallet_createwallet.py",
        "status": "modified",
        "additions": 47,
        "deletions": 9,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d54a4a9fabadcaa5bfd07af8a8af75c50178729/test/functional/wallet_createwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d54a4a9fabadcaa5bfd07af8a8af75c50178729/test/functional/wallet_createwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_createwallet.py?ref=1d54a4a9fabadcaa5bfd07af8a8af75c50178729",
        "patch": "@@ -5,11 +5,15 @@\n \"\"\"Test createwallet arguments.\n \"\"\"\n \n+from test_framework.address import key_to_p2wpkh\n+from test_framework.descriptors import descsum_create\n+from test_framework.key import ECKey\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n     assert_raises_rpc_error,\n )\n+from test_framework.wallet_util import bytes_to_wif, generate_wif_key\n \n class CreateWalletTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -35,10 +39,14 @@ def run_test(self):\n         w1.importpubkey(w0.getaddressinfo(address1)['pubkey'])\n \n         self.log.info('Test that private keys cannot be imported')\n-        addr = w0.getnewaddress('', 'legacy')\n-        privkey = w0.dumpprivkey(addr)\n+        eckey = ECKey()\n+        eckey.generate()\n+        privkey = bytes_to_wif(eckey.get_bytes())\n         assert_raises_rpc_error(-4, 'Cannot import private keys to a wallet with private keys disabled', w1.importprivkey, privkey)\n-        result = w1.importmulti([{'scriptPubKey': {'address': addr}, 'timestamp': 'now', 'keys': [privkey]}])\n+        if self.options.descriptors:\n+            result = w1.importdescriptors([{'desc': descsum_create('wpkh(' + privkey + ')'), 'timestamp': 'now'}])\n+        else:\n+            result = w1.importmulti([{'scriptPubKey': {'address': key_to_p2wpkh(eckey.get_pubkey().get_bytes())}, 'timestamp': 'now', 'keys': [privkey]}])\n         assert not result[0]['success']\n         assert 'warning' not in result[0]\n         assert_equal(result[0]['error']['code'], -4)\n@@ -58,12 +66,25 @@ def run_test(self):\n         assert_raises_rpc_error(-4, \"Error: This wallet has no available keys\", w3.getnewaddress)\n         assert_raises_rpc_error(-4, \"Error: This wallet has no available keys\", w3.getrawchangeaddress)\n         # Import private key\n-        w3.importprivkey(w0.dumpprivkey(address1))\n+        w3.importprivkey(generate_wif_key())\n         # Imported private keys are currently ignored by the keypool\n         assert_equal(w3.getwalletinfo()['keypoolsize'], 0)\n         assert_raises_rpc_error(-4, \"Error: This wallet has no available keys\", w3.getnewaddress)\n         # Set the seed\n-        w3.sethdseed()\n+        if self.options.descriptors:\n+            w3.importdescriptors([{\n+                'desc': descsum_create('wpkh(tprv8ZgxMBicQKsPcwuZGKp8TeWppSuLMiLe2d9PupB14QpPeQsqoj3LneJLhGHH13xESfvASyd4EFLJvLrG8b7DrLxEuV7hpF9uUc6XruKA1Wq/0h/*)'),\n+                'timestamp': 'now',\n+                'active': True\n+            },\n+            {\n+                'desc': descsum_create('wpkh(tprv8ZgxMBicQKsPcwuZGKp8TeWppSuLMiLe2d9PupB14QpPeQsqoj3LneJLhGHH13xESfvASyd4EFLJvLrG8b7DrLxEuV7hpF9uUc6XruKA1Wq/1h/*)'),\n+                'timestamp': 'now',\n+                'active': True,\n+                'internal': True\n+            }])\n+        else:\n+            w3.sethdseed()\n         assert_equal(w3.getwalletinfo()['keypoolsize'], 1)\n         w3.getnewaddress()\n         w3.getrawchangeaddress()\n@@ -80,7 +101,20 @@ def run_test(self):\n         assert_raises_rpc_error(-4, \"Error: This wallet has no available keys\", w4.getrawchangeaddress)\n         # Now set a seed and it should work. Wallet should also be encrypted\n         w4.walletpassphrase('pass', 60)\n-        w4.sethdseed()\n+        if self.options.descriptors:\n+            w4.importdescriptors([{\n+                'desc': descsum_create('wpkh(tprv8ZgxMBicQKsPcwuZGKp8TeWppSuLMiLe2d9PupB14QpPeQsqoj3LneJLhGHH13xESfvASyd4EFLJvLrG8b7DrLxEuV7hpF9uUc6XruKA1Wq/0h/*)'),\n+                'timestamp': 'now',\n+                'active': True\n+            },\n+            {\n+                'desc': descsum_create('wpkh(tprv8ZgxMBicQKsPcwuZGKp8TeWppSuLMiLe2d9PupB14QpPeQsqoj3LneJLhGHH13xESfvASyd4EFLJvLrG8b7DrLxEuV7hpF9uUc6XruKA1Wq/1h/*)'),\n+                'timestamp': 'now',\n+                'active': True,\n+                'internal': True\n+            }])\n+        else:\n+            w4.sethdseed()\n         w4.getnewaddress()\n         w4.getrawchangeaddress()\n \n@@ -113,11 +147,15 @@ def run_test(self):\n         w6.keypoolrefill(1)\n         # There should only be 1 key\n         walletinfo = w6.getwalletinfo()\n-        assert_equal(walletinfo['keypoolsize'], 1)\n-        assert_equal(walletinfo['keypoolsize_hd_internal'], 1)\n+        if self.options.descriptors:\n+            assert_equal(walletinfo['keypoolsize'], 3)\n+            assert_equal(walletinfo['keypoolsize_hd_internal'], 3)\n+        else:\n+            assert_equal(walletinfo['keypoolsize'], 1)\n+            assert_equal(walletinfo['keypoolsize_hd_internal'], 1)\n         # Allow empty passphrase, but there should be a warning\n         resp = self.nodes[0].createwallet(wallet_name='w7', disable_private_keys=False, blank=False, passphrase='')\n-        assert_equal(resp['warning'], 'Empty string given as passphrase, wallet will not be encrypted.')\n+        assert 'Empty string given as passphrase, wallet will not be encrypted.' in resp['warning']\n         w7 = node.get_wallet_rpc('w7')\n         assert_raises_rpc_error(-15, 'Error: running with an unencrypted wallet, but walletpassphrase was called.', w7.walletpassphrase, '', 60)\n "
      }
    ]
  },
  {
    "sha": "9ece42aa5bda461f58cd84b6fd4c1f064b987c7c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZWNlNDJhYTViZGE0NjFmNThjZDg0YjZmZDRjMWYwNjRiOTg3Yzdj",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-07T22:07:36Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-10-28T20:48:19Z"
      },
      "message": "Do addmultisigaddress tests in legacy wallet mode in wallet_address_types.py\n\naddmultisigaddress is not available in descriptor wallets, so only run\nthese when testing legacy wallets",
      "tree": {
        "sha": "925a1f2215e04dac89544312cb91dcec3ff836d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/925a1f2215e04dac89544312cb91dcec3ff836d5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9ece42aa5bda461f58cd84b6fd4c1f064b987c7c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ece42aa5bda461f58cd84b6fd4c1f064b987c7c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9ece42aa5bda461f58cd84b6fd4c1f064b987c7c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ece42aa5bda461f58cd84b6fd4c1f064b987c7c/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1d54a4a9fabadcaa5bfd07af8a8af75c50178729",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d54a4a9fabadcaa5bfd07af8a8af75c50178729",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1d54a4a9fabadcaa5bfd07af8a8af75c50178729"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 19,
      "deletions": 12
    },
    "files": [
      {
        "sha": "2db5eae33b30b01dcecc9ca32564fd113487d916",
        "filename": "test/functional/wallet_address_types.py",
        "status": "modified",
        "additions": 19,
        "deletions": 12,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ece42aa5bda461f58cd84b6fd4c1f064b987c7c/test/functional/wallet_address_types.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ece42aa5bda461f58cd84b6fd4c1f064b987c7c/test/functional/wallet_address_types.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_address_types.py?ref=9ece42aa5bda461f58cd84b6fd4c1f064b987c7c",
        "patch": "@@ -228,18 +228,25 @@ def run_test(self):\n         compressed_1 = \"0296b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52\"\n         compressed_2 = \"037211a824f55b505228e4c3d5194c1fcfaa15a456abdf37f9b9d97a4040afc073\"\n \n-        # addmultisigaddress with at least 1 uncompressed key should return a legacy address.\n-        for node in range(4):\n-            self.test_address(node, self.nodes[node].addmultisigaddress(2, [uncompressed_1, uncompressed_2])['address'], True, 'legacy')\n-            self.test_address(node, self.nodes[node].addmultisigaddress(2, [compressed_1, uncompressed_2])['address'], True, 'legacy')\n-            self.test_address(node, self.nodes[node].addmultisigaddress(2, [uncompressed_1, compressed_2])['address'], True, 'legacy')\n-        # addmultisigaddress with all compressed keys should return the appropriate address type (even when the keys are not ours).\n-        self.test_address(0, self.nodes[0].addmultisigaddress(2, [compressed_1, compressed_2])['address'], True, 'legacy')\n-        self.test_address(1, self.nodes[1].addmultisigaddress(2, [compressed_1, compressed_2])['address'], True, 'p2sh-segwit')\n-        self.test_address(2, self.nodes[2].addmultisigaddress(2, [compressed_1, compressed_2])['address'], True, 'p2sh-segwit')\n-        self.test_address(3, self.nodes[3].addmultisigaddress(2, [compressed_1, compressed_2])['address'], True, 'bech32')\n-\n-        for explicit_type, multisig, from_node in itertools.product([False, True], [False, True], range(4)):\n+        if not self.options.descriptors:\n+            # Tests for addmultisigaddress's address type behavior is only for legacy wallets.\n+            # Descriptor wallets do not have addmultsigaddress so these tests are not needed for those.\n+            # addmultisigaddress with at least 1 uncompressed key should return a legacy address.\n+            for node in range(4):\n+                self.test_address(node, self.nodes[node].addmultisigaddress(2, [uncompressed_1, uncompressed_2])['address'], True, 'legacy')\n+                self.test_address(node, self.nodes[node].addmultisigaddress(2, [compressed_1, uncompressed_2])['address'], True, 'legacy')\n+                self.test_address(node, self.nodes[node].addmultisigaddress(2, [uncompressed_1, compressed_2])['address'], True, 'legacy')\n+            # addmultisigaddress with all compressed keys should return the appropriate address type (even when the keys are not ours).\n+            self.test_address(0, self.nodes[0].addmultisigaddress(2, [compressed_1, compressed_2])['address'], True, 'legacy')\n+            self.test_address(1, self.nodes[1].addmultisigaddress(2, [compressed_1, compressed_2])['address'], True, 'p2sh-segwit')\n+            self.test_address(2, self.nodes[2].addmultisigaddress(2, [compressed_1, compressed_2])['address'], True, 'p2sh-segwit')\n+            self.test_address(3, self.nodes[3].addmultisigaddress(2, [compressed_1, compressed_2])['address'], True, 'bech32')\n+\n+        do_multisigs = [False]\n+        if not self.options.descriptors:\n+            do_multisigs.append(True)\n+\n+        for explicit_type, multisig, from_node in itertools.product([False, True], do_multisigs, range(4)):\n             address_type = None\n             if explicit_type and not multisig:\n                 if from_node == 1:"
      }
    ]
  },
  {
    "sha": "e83a07688a2551e0d78c02e2abc9363c859ffac8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplODNhMDc2ODhhMjU1MWUwZDc4YzAyZTJhYmM5MzYzYzg1OWZmYWM4",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-08T17:06:57Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-10-28T20:48:19Z"
      },
      "message": "Make raw multisig tests legacy wallet only in rpc_rawtransaction.py\n\nThe traditional multisig workflow doesn't work with descriptor wallets\nso make these tests legacy wallet only.",
      "tree": {
        "sha": "84fc58640fe5cce8a8b33ad70b593a6f60391832",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/84fc58640fe5cce8a8b33ad70b593a6f60391832"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e83a07688a2551e0d78c02e2abc9363c859ffac8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e83a07688a2551e0d78c02e2abc9363c859ffac8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e83a07688a2551e0d78c02e2abc9363c859ffac8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e83a07688a2551e0d78c02e2abc9363c859ffac8/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9ece42aa5bda461f58cd84b6fd4c1f064b987c7c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ece42aa5bda461f58cd84b6fd4c1f064b987c7c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9ece42aa5bda461f58cd84b6fd4c1f064b987c7c"
      }
    ],
    "stats": {
      "total": 247,
      "additions": 131,
      "deletions": 116
    },
    "files": [
      {
        "sha": "554c30c0d24ccad489cac3f0a412c7e793e3a02f",
        "filename": "test/functional/rpc_rawtransaction.py",
        "status": "modified",
        "additions": 131,
        "deletions": 116,
        "changes": 247,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e83a07688a2551e0d78c02e2abc9363c859ffac8/test/functional/rpc_rawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e83a07688a2551e0d78c02e2abc9363c859ffac8/test/functional/rpc_rawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_rawtransaction.py?ref=e83a07688a2551e0d78c02e2abc9363c859ffac8",
        "patch": "@@ -20,6 +20,7 @@\n from test_framework.util import (\n     assert_equal,\n     assert_raises_rpc_error,\n+    find_vout_for_address,\n     hex_str_to_bytes,\n )\n \n@@ -242,121 +243,124 @@ def run_test(self):\n         self.nodes[0].reconsiderblock(block1)\n         assert_equal(self.nodes[0].getbestblockhash(), block2)\n \n-        #########################\n-        # RAW TX MULTISIG TESTS #\n-        #########################\n-        # 2of2 test\n-        addr1 = self.nodes[2].getnewaddress()\n-        addr2 = self.nodes[2].getnewaddress()\n-\n-        addr1Obj = self.nodes[2].getaddressinfo(addr1)\n-        addr2Obj = self.nodes[2].getaddressinfo(addr2)\n-\n-        # Tests for createmultisig and addmultisigaddress\n-        assert_raises_rpc_error(-5, \"Invalid public key\", self.nodes[0].createmultisig, 1, [\"01020304\"])\n-        self.nodes[0].createmultisig(2, [addr1Obj['pubkey'], addr2Obj['pubkey']]) # createmultisig can only take public keys\n-        assert_raises_rpc_error(-5, \"Invalid public key\", self.nodes[0].createmultisig, 2, [addr1Obj['pubkey'], addr1]) # addmultisigaddress can take both pubkeys and addresses so long as they are in the wallet, which is tested here.\n-\n-        mSigObj = self.nodes[2].addmultisigaddress(2, [addr1Obj['pubkey'], addr1])['address']\n-\n-        #use balance deltas instead of absolute values\n-        bal = self.nodes[2].getbalance()\n-\n-        # send 1.2 BTC to msig adr\n-        txId = self.nodes[0].sendtoaddress(mSigObj, 1.2)\n-        self.sync_all()\n-        self.nodes[0].generate(1)\n-        self.sync_all()\n-        assert_equal(self.nodes[2].getbalance(), bal+Decimal('1.20000000')) #node2 has both keys of the 2of2 ms addr., tx should affect the balance\n-\n-\n-        # 2of3 test from different nodes\n-        bal = self.nodes[2].getbalance()\n-        addr1 = self.nodes[1].getnewaddress()\n-        addr2 = self.nodes[2].getnewaddress()\n-        addr3 = self.nodes[2].getnewaddress()\n-\n-        addr1Obj = self.nodes[1].getaddressinfo(addr1)\n-        addr2Obj = self.nodes[2].getaddressinfo(addr2)\n-        addr3Obj = self.nodes[2].getaddressinfo(addr3)\n-\n-        mSigObj = self.nodes[2].addmultisigaddress(2, [addr1Obj['pubkey'], addr2Obj['pubkey'], addr3Obj['pubkey']])['address']\n-\n-        txId = self.nodes[0].sendtoaddress(mSigObj, 2.2)\n-        decTx = self.nodes[0].gettransaction(txId)\n-        rawTx = self.nodes[0].decoderawtransaction(decTx['hex'])\n-        self.sync_all()\n-        self.nodes[0].generate(1)\n-        self.sync_all()\n-\n-        #THIS IS AN INCOMPLETE FEATURE\n-        #NODE2 HAS TWO OF THREE KEY AND THE FUNDS SHOULD BE SPENDABLE AND COUNT AT BALANCE CALCULATION\n-        assert_equal(self.nodes[2].getbalance(), bal) #for now, assume the funds of a 2of3 multisig tx are not marked as spendable\n-\n-        txDetails = self.nodes[0].gettransaction(txId, True)\n-        rawTx = self.nodes[0].decoderawtransaction(txDetails['hex'])\n-        vout = next(o for o in rawTx['vout'] if o['value'] == Decimal('2.20000000'))\n-\n-        bal = self.nodes[0].getbalance()\n-        inputs = [{ \"txid\" : txId, \"vout\" : vout['n'], \"scriptPubKey\" : vout['scriptPubKey']['hex'], \"amount\" : vout['value']}]\n-        outputs = { self.nodes[0].getnewaddress() : 2.19 }\n-        rawTx = self.nodes[2].createrawtransaction(inputs, outputs)\n-        rawTxPartialSigned = self.nodes[1].signrawtransactionwithwallet(rawTx, inputs)\n-        assert_equal(rawTxPartialSigned['complete'], False) #node1 only has one key, can't comp. sign the tx\n-\n-        rawTxSigned = self.nodes[2].signrawtransactionwithwallet(rawTx, inputs)\n-        assert_equal(rawTxSigned['complete'], True) #node2 can sign the tx compl., own two of three keys\n-        self.nodes[2].sendrawtransaction(rawTxSigned['hex'])\n-        rawTx = self.nodes[0].decoderawtransaction(rawTxSigned['hex'])\n-        self.sync_all()\n-        self.nodes[0].generate(1)\n-        self.sync_all()\n-        assert_equal(self.nodes[0].getbalance(), bal+Decimal('50.00000000')+Decimal('2.19000000')) #block reward + tx\n-\n-        # 2of2 test for combining transactions\n-        bal = self.nodes[2].getbalance()\n-        addr1 = self.nodes[1].getnewaddress()\n-        addr2 = self.nodes[2].getnewaddress()\n-\n-        addr1Obj = self.nodes[1].getaddressinfo(addr1)\n-        addr2Obj = self.nodes[2].getaddressinfo(addr2)\n-\n-        self.nodes[1].addmultisigaddress(2, [addr1Obj['pubkey'], addr2Obj['pubkey']])['address']\n-        mSigObj = self.nodes[2].addmultisigaddress(2, [addr1Obj['pubkey'], addr2Obj['pubkey']])['address']\n-        mSigObjValid = self.nodes[2].getaddressinfo(mSigObj)\n-\n-        txId = self.nodes[0].sendtoaddress(mSigObj, 2.2)\n-        decTx = self.nodes[0].gettransaction(txId)\n-        rawTx2 = self.nodes[0].decoderawtransaction(decTx['hex'])\n-        self.sync_all()\n-        self.nodes[0].generate(1)\n-        self.sync_all()\n-\n-        assert_equal(self.nodes[2].getbalance(), bal) # the funds of a 2of2 multisig tx should not be marked as spendable\n-\n-        txDetails = self.nodes[0].gettransaction(txId, True)\n-        rawTx2 = self.nodes[0].decoderawtransaction(txDetails['hex'])\n-        vout = next(o for o in rawTx2['vout'] if o['value'] == Decimal('2.20000000'))\n-\n-        bal = self.nodes[0].getbalance()\n-        inputs = [{ \"txid\" : txId, \"vout\" : vout['n'], \"scriptPubKey\" : vout['scriptPubKey']['hex'], \"redeemScript\" : mSigObjValid['hex'], \"amount\" : vout['value']}]\n-        outputs = { self.nodes[0].getnewaddress() : 2.19 }\n-        rawTx2 = self.nodes[2].createrawtransaction(inputs, outputs)\n-        rawTxPartialSigned1 = self.nodes[1].signrawtransactionwithwallet(rawTx2, inputs)\n-        self.log.debug(rawTxPartialSigned1)\n-        assert_equal(rawTxPartialSigned1['complete'], False) #node1 only has one key, can't comp. sign the tx\n-\n-        rawTxPartialSigned2 = self.nodes[2].signrawtransactionwithwallet(rawTx2, inputs)\n-        self.log.debug(rawTxPartialSigned2)\n-        assert_equal(rawTxPartialSigned2['complete'], False) #node2 only has one key, can't comp. sign the tx\n-        rawTxComb = self.nodes[2].combinerawtransaction([rawTxPartialSigned1['hex'], rawTxPartialSigned2['hex']])\n-        self.log.debug(rawTxComb)\n-        self.nodes[2].sendrawtransaction(rawTxComb)\n-        rawTx2 = self.nodes[0].decoderawtransaction(rawTxComb)\n-        self.sync_all()\n-        self.nodes[0].generate(1)\n-        self.sync_all()\n-        assert_equal(self.nodes[0].getbalance(), bal+Decimal('50.00000000')+Decimal('2.19000000')) #block reward + tx\n+        if not self.options.descriptors:\n+            # The traditional multisig workflow does not work with descriptor wallets so these are legacy only.\n+            # The multisig workflow with descriptor wallets uses PSBTs and is tested elsewhere, no need to do them here.\n+            #########################\n+            # RAW TX MULTISIG TESTS #\n+            #########################\n+            # 2of2 test\n+            addr1 = self.nodes[2].getnewaddress()\n+            addr2 = self.nodes[2].getnewaddress()\n+\n+            addr1Obj = self.nodes[2].getaddressinfo(addr1)\n+            addr2Obj = self.nodes[2].getaddressinfo(addr2)\n+\n+            # Tests for createmultisig and addmultisigaddress\n+            assert_raises_rpc_error(-5, \"Invalid public key\", self.nodes[0].createmultisig, 1, [\"01020304\"])\n+            self.nodes[0].createmultisig(2, [addr1Obj['pubkey'], addr2Obj['pubkey']]) # createmultisig can only take public keys\n+            assert_raises_rpc_error(-5, \"Invalid public key\", self.nodes[0].createmultisig, 2, [addr1Obj['pubkey'], addr1]) # addmultisigaddress can take both pubkeys and addresses so long as they are in the wallet, which is tested here.\n+\n+            mSigObj = self.nodes[2].addmultisigaddress(2, [addr1Obj['pubkey'], addr1])['address']\n+\n+            #use balance deltas instead of absolute values\n+            bal = self.nodes[2].getbalance()\n+\n+            # send 1.2 BTC to msig adr\n+            txId = self.nodes[0].sendtoaddress(mSigObj, 1.2)\n+            self.sync_all()\n+            self.nodes[0].generate(1)\n+            self.sync_all()\n+            assert_equal(self.nodes[2].getbalance(), bal+Decimal('1.20000000')) #node2 has both keys of the 2of2 ms addr., tx should affect the balance\n+\n+\n+            # 2of3 test from different nodes\n+            bal = self.nodes[2].getbalance()\n+            addr1 = self.nodes[1].getnewaddress()\n+            addr2 = self.nodes[2].getnewaddress()\n+            addr3 = self.nodes[2].getnewaddress()\n+\n+            addr1Obj = self.nodes[1].getaddressinfo(addr1)\n+            addr2Obj = self.nodes[2].getaddressinfo(addr2)\n+            addr3Obj = self.nodes[2].getaddressinfo(addr3)\n+\n+            mSigObj = self.nodes[2].addmultisigaddress(2, [addr1Obj['pubkey'], addr2Obj['pubkey'], addr3Obj['pubkey']])['address']\n+\n+            txId = self.nodes[0].sendtoaddress(mSigObj, 2.2)\n+            decTx = self.nodes[0].gettransaction(txId)\n+            rawTx = self.nodes[0].decoderawtransaction(decTx['hex'])\n+            self.sync_all()\n+            self.nodes[0].generate(1)\n+            self.sync_all()\n+\n+            #THIS IS AN INCOMPLETE FEATURE\n+            #NODE2 HAS TWO OF THREE KEY AND THE FUNDS SHOULD BE SPENDABLE AND COUNT AT BALANCE CALCULATION\n+            assert_equal(self.nodes[2].getbalance(), bal) #for now, assume the funds of a 2of3 multisig tx are not marked as spendable\n+\n+            txDetails = self.nodes[0].gettransaction(txId, True)\n+            rawTx = self.nodes[0].decoderawtransaction(txDetails['hex'])\n+            vout = next(o for o in rawTx['vout'] if o['value'] == Decimal('2.20000000'))\n+\n+            bal = self.nodes[0].getbalance()\n+            inputs = [{ \"txid\" : txId, \"vout\" : vout['n'], \"scriptPubKey\" : vout['scriptPubKey']['hex'], \"amount\" : vout['value']}]\n+            outputs = { self.nodes[0].getnewaddress() : 2.19 }\n+            rawTx = self.nodes[2].createrawtransaction(inputs, outputs)\n+            rawTxPartialSigned = self.nodes[1].signrawtransactionwithwallet(rawTx, inputs)\n+            assert_equal(rawTxPartialSigned['complete'], False) #node1 only has one key, can't comp. sign the tx\n+\n+            rawTxSigned = self.nodes[2].signrawtransactionwithwallet(rawTx, inputs)\n+            assert_equal(rawTxSigned['complete'], True) #node2 can sign the tx compl., own two of three keys\n+            self.nodes[2].sendrawtransaction(rawTxSigned['hex'])\n+            rawTx = self.nodes[0].decoderawtransaction(rawTxSigned['hex'])\n+            self.sync_all()\n+            self.nodes[0].generate(1)\n+            self.sync_all()\n+            assert_equal(self.nodes[0].getbalance(), bal+Decimal('50.00000000')+Decimal('2.19000000')) #block reward + tx\n+\n+            # 2of2 test for combining transactions\n+            bal = self.nodes[2].getbalance()\n+            addr1 = self.nodes[1].getnewaddress()\n+            addr2 = self.nodes[2].getnewaddress()\n+\n+            addr1Obj = self.nodes[1].getaddressinfo(addr1)\n+            addr2Obj = self.nodes[2].getaddressinfo(addr2)\n+\n+            self.nodes[1].addmultisigaddress(2, [addr1Obj['pubkey'], addr2Obj['pubkey']])['address']\n+            mSigObj = self.nodes[2].addmultisigaddress(2, [addr1Obj['pubkey'], addr2Obj['pubkey']])['address']\n+            mSigObjValid = self.nodes[2].getaddressinfo(mSigObj)\n+\n+            txId = self.nodes[0].sendtoaddress(mSigObj, 2.2)\n+            decTx = self.nodes[0].gettransaction(txId)\n+            rawTx2 = self.nodes[0].decoderawtransaction(decTx['hex'])\n+            self.sync_all()\n+            self.nodes[0].generate(1)\n+            self.sync_all()\n+\n+            assert_equal(self.nodes[2].getbalance(), bal) # the funds of a 2of2 multisig tx should not be marked as spendable\n+\n+            txDetails = self.nodes[0].gettransaction(txId, True)\n+            rawTx2 = self.nodes[0].decoderawtransaction(txDetails['hex'])\n+            vout = next(o for o in rawTx2['vout'] if o['value'] == Decimal('2.20000000'))\n+\n+            bal = self.nodes[0].getbalance()\n+            inputs = [{ \"txid\" : txId, \"vout\" : vout['n'], \"scriptPubKey\" : vout['scriptPubKey']['hex'], \"redeemScript\" : mSigObjValid['hex'], \"amount\" : vout['value']}]\n+            outputs = { self.nodes[0].getnewaddress() : 2.19 }\n+            rawTx2 = self.nodes[2].createrawtransaction(inputs, outputs)\n+            rawTxPartialSigned1 = self.nodes[1].signrawtransactionwithwallet(rawTx2, inputs)\n+            self.log.debug(rawTxPartialSigned1)\n+            assert_equal(rawTxPartialSigned1['complete'], False) #node1 only has one key, can't comp. sign the tx\n+\n+            rawTxPartialSigned2 = self.nodes[2].signrawtransactionwithwallet(rawTx2, inputs)\n+            self.log.debug(rawTxPartialSigned2)\n+            assert_equal(rawTxPartialSigned2['complete'], False) #node2 only has one key, can't comp. sign the tx\n+            rawTxComb = self.nodes[2].combinerawtransaction([rawTxPartialSigned1['hex'], rawTxPartialSigned2['hex']])\n+            self.log.debug(rawTxComb)\n+            self.nodes[2].sendrawtransaction(rawTxComb)\n+            rawTx2 = self.nodes[0].decoderawtransaction(rawTxComb)\n+            self.sync_all()\n+            self.nodes[0].generate(1)\n+            self.sync_all()\n+            assert_equal(self.nodes[0].getbalance(), bal+Decimal('50.00000000')+Decimal('2.19000000')) #block reward + tx\n \n         # decoderawtransaction tests\n         # witness transaction\n@@ -369,9 +373,20 @@ def run_test(self):\n         decrawtx = self.nodes[0].decoderawtransaction(encrawtx, False) # decode as non-witness transaction\n         assert_equal(decrawtx['vout'][0]['value'], Decimal('1.00000000'))\n \n+        # Basic signrawtransaction test\n+        addr = self.nodes[1].getnewaddress()\n+        txid = self.nodes[0].sendtoaddress(addr, 10)\n+        self.nodes[0].generate(1)\n+        self.sync_all()\n+        vout = find_vout_for_address(self.nodes[1], txid, addr)\n+        rawTx = self.nodes[1].createrawtransaction([{'txid': txid, 'vout': vout}], {self.nodes[1].getnewaddress(): 9.999})\n+        rawTxSigned = self.nodes[1].signrawtransactionwithwallet(rawTx)\n+        txId = self.nodes[1].sendrawtransaction(rawTxSigned['hex'])\n+        self.nodes[0].generate(1)\n+        self.sync_all()\n+\n         # getrawtransaction tests\n         # 1. valid parameters - only supply txid\n-        txId = rawTx[\"txid\"]\n         assert_equal(self.nodes[0].getrawtransaction(txId), rawTxSigned['hex'])\n \n         # 2. valid parameters - supply txid and 0 for non-verbose"
      }
    ]
  },
  {
    "sha": "e4c9e4c7a0387066ccd4234c465db1bae6d2b1e9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNGM5ZTRjN2EwMzg3MDY2Y2NkNDIzNGM0NjVkYjFiYWU2ZDJiMWU5",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-10-21T16:38:05Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-10-28T20:48:19Z"
      },
      "message": "Ensure a legacy wallet for BDB format check",
      "tree": {
        "sha": "12a57a4e0a87d57ec04e43394055751191a572af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/12a57a4e0a87d57ec04e43394055751191a572af"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e4c9e4c7a0387066ccd4234c465db1bae6d2b1e9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4c9e4c7a0387066ccd4234c465db1bae6d2b1e9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e4c9e4c7a0387066ccd4234c465db1bae6d2b1e9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4c9e4c7a0387066ccd4234c465db1bae6d2b1e9/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e83a07688a2551e0d78c02e2abc9363c859ffac8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e83a07688a2551e0d78c02e2abc9363c859ffac8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e83a07688a2551e0d78c02e2abc9363c859ffac8"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 4,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d5b2ad1640bc6ab5ed6016ce8f1800785f83bee1",
        "filename": "test/functional/wallet_descriptor.py",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4c9e4c7a0387066ccd4234c465db1bae6d2b1e9/test/functional/wallet_descriptor.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4c9e4c7a0387066ccd4234c465db1bae6d2b1e9/test/functional/wallet_descriptor.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_descriptor.py?ref=e4c9e4c7a0387066ccd4234c465db1bae6d2b1e9",
        "patch": "@@ -16,18 +16,21 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n         self.extra_args = [['-keypool=100']]\n+        self.wallet_names = []\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n \n     def run_test(self):\n+        # Make a legacy wallet and check it is BDB\n+        self.nodes[0].createwallet(wallet_name=\"legacy1\", descriptors=False)\n         wallet_info = self.nodes[0].getwalletinfo()\n         assert_equal(wallet_info['format'], 'bdb')\n+        self.nodes[0].unloadwallet(\"legacy1\")\n \n         # Make a descriptor wallet\n         self.log.info(\"Making a descriptor wallet\")\n         self.nodes[0].createwallet(wallet_name=\"desc1\", descriptors=True)\n-        self.nodes[0].unloadwallet(self.default_wallet_name)\n \n         # A descriptor wallet should have 100 addresses * 3 types = 300 keys\n         self.log.info(\"Checking wallet info\")"
      }
    ]
  },
  {
    "sha": "39ec3201bf435f4f6e7b8e1a996071ed3209b87a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOWVjMzIwMWJmNDM1ZjRmNmU3YjhlMWE5OTYwNzFlZDMyMDliODdh",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-27T19:38:20Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-10-28T20:48:19Z"
      },
      "message": "tests: Add a --legacy-wallet that is mutually exclusive with --descriptors\n\nAlthough legacy wallet is still the default, for future use, add a\n--legacy-wallet option to the test framework. Additional tests for\ndescriptor wallets have been enabled with the --descriptors option.\nTests that must be legacy wallet only are being started with\n--legacy-wallet. Even though this option does not currently do anything,\nthis will be helpful in the future when descriptor wallets become the\ndefault.",
      "tree": {
        "sha": "da501b559b230c2826a8453bcbf152fb36363d4e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/da501b559b230c2826a8453bcbf152fb36363d4e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/39ec3201bf435f4f6e7b8e1a996071ed3209b87a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/39ec3201bf435f4f6e7b8e1a996071ed3209b87a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/39ec3201bf435f4f6e7b8e1a996071ed3209b87a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/39ec3201bf435f4f6e7b8e1a996071ed3209b87a/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e4c9e4c7a0387066ccd4234c465db1bae6d2b1e9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4c9e4c7a0387066ccd4234c465db1bae6d2b1e9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e4c9e4c7a0387066ccd4234c465db1bae6d2b1e9"
      }
    ],
    "stats": {
      "total": 48,
      "additions": 37,
      "deletions": 11
    },
    "files": [
      {
        "sha": "59cb3ae30998f43fc4da13bf3283ab4ae60cac4e",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/39ec3201bf435f4f6e7b8e1a996071ed3209b87a/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/39ec3201bf435f4f6e7b8e1a996071ed3209b87a/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=39ec3201bf435f4f6e7b8e1a996071ed3209b87a",
        "patch": "@@ -182,9 +182,14 @@ def parse_args(self):\n                             help=\"run nodes under the valgrind memory error detector: expect at least a ~10x slowdown, valgrind 3.14 or later required\")\n         parser.add_argument(\"--randomseed\", type=int,\n                             help=\"set a random seed for deterministically reproducing a previous test run\")\n-        parser.add_argument(\"--descriptors\", default=False, action=\"store_true\",\n-                            help=\"Run test using a descriptor wallet\")\n         parser.add_argument('--timeout-factor', dest=\"timeout_factor\", type=float, default=1.0, help='adjust test timeouts by a factor. Setting it to 0 disables all timeouts')\n+\n+        group = parser.add_mutually_exclusive_group()\n+        group.add_argument(\"--descriptors\", default=False, action=\"store_true\",\n+                            help=\"Run test using a descriptor wallet\", dest='descriptors')\n+        group.add_argument(\"--legacy-wallet\", default=False, action=\"store_false\",\n+                            help=\"Run test using legacy wallets\", dest='descriptors')\n+\n         self.add_options(parser)\n         self.options = parser.parse_args()\n         self.options.previous_releases_path = previous_releases_path"
      },
      {
        "sha": "7de688d1ff1d9e44e681b737ff317dab163ac702",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 30,
        "deletions": 9,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/39ec3201bf435f4f6e7b8e1a996071ed3209b87a/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/39ec3201bf435f4f6e7b8e1a996071ed3209b87a/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=39ec3201bf435f4f6e7b8e1a996071ed3209b87a",
        "patch": "@@ -95,8 +95,9 @@\n     'feature_maxuploadtarget.py',\n     'feature_block.py',\n     'rpc_fundrawtransaction.py',\n+    'rpc_fundrawtransaction.py --descriptors',\n     'p2p_compactblocks.py',\n-    'feature_segwit.py',\n+    'feature_segwit.py --legacy-wallet',\n     # vv Tests less than 2m vv\n     'wallet_basic.py',\n     'wallet_basic.py --descriptors',\n@@ -106,19 +107,24 @@\n     'p2p_timeouts.py',\n     'p2p_tx_download.py',\n     'mempool_updatefromblock.py',\n-    'wallet_dump.py',\n+    'wallet_dump.py --legacy-wallet',\n     'wallet_listtransactions.py',\n+    'wallet_listtransactions.py --descriptors',\n     'feature_taproot.py',\n     # vv Tests less than 60s vv\n     'p2p_sendheaders.py',\n-    'wallet_importmulti.py',\n+    'wallet_importmulti.py --legacy-wallet',\n     'mempool_limit.py',\n     'rpc_txoutproof.py',\n     'wallet_listreceivedby.py',\n+    'wallet_listreceivedby.py --descriptors',\n     'wallet_abandonconflict.py',\n+    'wallet_abandonconflict.py --descriptors',\n     'feature_csv_activation.py',\n     'rpc_rawtransaction.py',\n+    'rpc_rawtransaction.py --descriptors',\n     'wallet_address_types.py',\n+    'wallet_address_types.py --descriptors',\n     'feature_bip68_sequence.py',\n     'p2p_feefilter.py',\n     'feature_reindex.py',\n@@ -132,6 +138,7 @@\n     'mempool_resurrect.py',\n     'wallet_txn_doublespend.py --mineblock',\n     'tool_wallet.py',\n+    'tool_wallet.py --descriptors',\n     'wallet_txn_clone.py',\n     'wallet_txn_clone.py --segwit',\n     'rpc_getchaintips.py',\n@@ -147,8 +154,9 @@\n     'wallet_multiwallet.py --usecli',\n     'wallet_createwallet.py',\n     'wallet_createwallet.py --usecli',\n-    'wallet_watchonly.py',\n-    'wallet_watchonly.py --usecli',\n+    'wallet_createwallet.py --descriptors',\n+    'wallet_watchonly.py --legacy-wallet',\n+    'wallet_watchonly.py --usecli --legacy-wallet',\n     'wallet_reorgsrestore.py',\n     'interface_http.py',\n     'interface_rpc.py',\n@@ -158,20 +166,23 @@\n     'rpc_whitelist.py',\n     'feature_proxy.py',\n     'rpc_signrawtransaction.py',\n+    'rpc_signrawtransaction.py --descriptors',\n     'wallet_groups.py',\n     'p2p_addrv2_relay.py',\n+    'wallet_groups.py --descriptors',\n     'p2p_disconnect_ban.py',\n     'rpc_decodescript.py',\n     'rpc_blockchain.py',\n     'rpc_deprecated.py',\n     'wallet_disable.py',\n+    'wallet_disable.py --descriptors',\n     'p2p_addr_relay.py',\n     'p2p_getaddr_caching.py',\n     'p2p_getdata.py',\n     'rpc_net.py',\n     'wallet_keypool.py',\n     'wallet_keypool.py --descriptors',\n-    'wallet_descriptor.py',\n+    'wallet_descriptor.py --descriptors',\n     'p2p_nobloomfilter_messages.py',\n     'p2p_filter.py',\n     'rpc_setban.py',\n@@ -184,6 +195,7 @@\n     'feature_assumevalid.py',\n     'example_test.py',\n     'wallet_txn_doublespend.py',\n+    'wallet_txn_doublespend.py --descriptors',\n     'feature_backwards_compatibility.py',\n     'wallet_txn_clone.py --mineblock',\n     'feature_notifications.py',\n@@ -197,17 +209,20 @@\n     'feature_versionbits_warning.py',\n     'rpc_preciousblock.py',\n     'wallet_importprunedfunds.py',\n+    'wallet_importprunedfunds.py --descriptors',\n     'p2p_leak_tx.py',\n     'p2p_eviction.py',\n     'rpc_signmessage.py',\n     'rpc_generateblock.py',\n     'rpc_generate.py',\n     'wallet_balance.py',\n+    'wallet_balance.py --descriptors',\n     'feature_nulldummy.py',\n+    'feature_nulldummy.py --descriptors',\n     'mempool_accept.py',\n     'mempool_expiry.py',\n-    'wallet_import_rescan.py',\n-    'wallet_import_with_label.py',\n+    'wallet_import_rescan.py --legacy-wallet',\n+    'wallet_import_with_label.py --legacy-wallet',\n     'wallet_importdescriptors.py',\n     'wallet_upgradewallet.py',\n     'rpc_bind.py --ipv4',\n@@ -216,26 +231,32 @@\n     'mining_basic.py',\n     'feature_signet.py',\n     'wallet_bumpfee.py',\n-    'wallet_implicitsegwit.py',\n+    'wallet_bumpfee.py --descriptors',\n+    'wallet_implicitsegwit.py --legacy-wallet',\n     'rpc_named_arguments.py',\n     'wallet_listsinceblock.py',\n+    'wallet_listsinceblock.py --descriptors',\n     'p2p_leak.py',\n     'wallet_encryption.py',\n     'wallet_encryption.py --descriptors',\n     'feature_dersig.py',\n     'feature_cltv.py',\n     'rpc_uptime.py',\n     'wallet_resendwallettransactions.py',\n+    'wallet_resendwallettransactions.py --descriptors',\n     'wallet_fallbackfee.py',\n+    'wallet_fallbackfee.py --descriptors',\n     'rpc_dumptxoutset.py',\n     'feature_minchainwork.py',\n     'rpc_estimatefee.py',\n     'rpc_getblockstats.py',\n     'wallet_create_tx.py',\n     'wallet_send.py',\n+    'wallet_create_tx.py --descriptors',\n     'p2p_fingerprint.py',\n     'feature_uacomment.py',\n     'wallet_coinbase_category.py',\n+    'wallet_coinbase_category.py --descriptors',\n     'feature_filelock.py',\n     'feature_loadblock.py',\n     'p2p_dos_header_tree.py',"
      }
    ]
  },
  {
    "sha": "e8e49d438474e66e96eafe77e019a587f0556427",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplOGU0OWQ0Mzg0NzRlNjZlOTZlYWZlNzdlMDE5YTU4N2YwNTU2NDI3",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-10-26T19:22:26Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-10-28T20:48:19Z"
      },
      "message": "Update wallet_labels.py to not require descriptors=False",
      "tree": {
        "sha": "38eb365f492bce5c5f0f556c3fd1be76d4e3dbb5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/38eb365f492bce5c5f0f556c3fd1be76d4e3dbb5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e8e49d438474e66e96eafe77e019a587f0556427",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8e49d438474e66e96eafe77e019a587f0556427",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e8e49d438474e66e96eafe77e019a587f0556427",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8e49d438474e66e96eafe77e019a587f0556427/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "39ec3201bf435f4f6e7b8e1a996071ed3209b87a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/39ec3201bf435f4f6e7b8e1a996071ed3209b87a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/39ec3201bf435f4f6e7b8e1a996071ed3209b87a"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "883b97561e7b28f6346d230f3bba91f603a7886b",
        "filename": "test/functional/wallet_labels.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8e49d438474e66e96eafe77e019a587f0556427/test/functional/wallet_labels.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8e49d438474e66e96eafe77e019a587f0556427/test/functional/wallet_labels.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_labels.py?ref=e8e49d438474e66e96eafe77e019a587f0556427",
        "patch": "@@ -135,7 +135,7 @@ def run_test(self):\n         change_label(node, labels[2].addresses[0], labels[2], labels[2])\n \n         self.log.info('Check watchonly labels')\n-        node.createwallet(wallet_name='watch_only', disable_private_keys=True, descriptors=False)\n+        node.createwallet(wallet_name='watch_only', disable_private_keys=True)\n         wallet_watch_only = node.get_wallet_rpc('watch_only')\n         BECH32_VALID = {\n             '\u2714\ufe0f_VER15_PROG40': 'bcrt10qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqn2cjv3',\n@@ -156,7 +156,7 @@ def run_test(self):\n             ad = BECH32_INVALID[l]\n             assert_raises_rpc_error(\n                 -5,\n-                \"Invalid Bitcoin address or script\",\n+                \"Address is not valid\" if self.options.descriptors else \"Invalid Bitcoin address or script\",\n                 lambda: wallet_watch_only.importaddress(label=l, rescan=False, address=ad),\n             )\n "
      }
    ]
  },
  {
    "sha": "1b4999702f2976e01a4d0187ba78bd40549c694d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYjQ5OTk3MDJmMjk3NmUwMWE0ZDAxODdiYTc4YmQ0MDU0OWM2OTRk",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-10-27T18:01:12Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-10-28T20:48:19Z"
      },
      "message": "Disable some tests for tool_wallet when descriptors\n\nSome tests are legacy wallet only (and make legacy wallets) so they\nshouldn't be run when doing descriptor wallet tests.",
      "tree": {
        "sha": "0398d35c0ea714fcbf75f7967e6e50eb01046c25",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0398d35c0ea714fcbf75f7967e6e50eb01046c25"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1b4999702f2976e01a4d0187ba78bd40549c694d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b4999702f2976e01a4d0187ba78bd40549c694d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1b4999702f2976e01a4d0187ba78bd40549c694d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b4999702f2976e01a4d0187ba78bd40549c694d/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e8e49d438474e66e96eafe77e019a587f0556427",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8e49d438474e66e96eafe77e019a587f0556427",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e8e49d438474e66e96eafe77e019a587f0556427"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 6,
      "deletions": 3
    },
    "files": [
      {
        "sha": "cc9b321da802d63cd0c439792328ad827a645520",
        "filename": "test/functional/tool_wallet.py",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b4999702f2976e01a4d0187ba78bd40549c694d/test/functional/tool_wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b4999702f2976e01a4d0187ba78bd40549c694d/test/functional/tool_wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/tool_wallet.py?ref=1b4999702f2976e01a4d0187ba78bd40549c694d",
        "patch": "@@ -260,9 +260,12 @@ def run_test(self):\n         # Warning: The following tests are order-dependent.\n         self.test_tool_wallet_info()\n         self.test_tool_wallet_info_after_transaction()\n-        self.test_tool_wallet_create_on_existing_wallet()\n-        self.test_getwalletinfo_on_different_wallet()\n-        self.test_salvage()\n+        if not self.options.descriptors:\n+            # TODO: Wallet tool needs more create options at which point these can be enabled.\n+            self.test_tool_wallet_create_on_existing_wallet()\n+            self.test_getwalletinfo_on_different_wallet()\n+            # Salvage is a legacy wallet only thing\n+            self.test_salvage()\n \n if __name__ == '__main__':\n     ToolWalletTest().main()"
      }
    ]
  },
  {
    "sha": "57b3bfbf76255cdbb4e86bd8cae287a95eebba03",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1N2IzYmZiZjc2MjU1Y2RiYjRlODZiZDhjYWUyODdhOTVlZWJiYTAz",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-10-27T19:26:55Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-10-28T20:48:19Z"
      },
      "message": "Update feature_backwards_compatibility for descriptor wallets",
      "tree": {
        "sha": "5ccad1fae507fff52133972efd7c8792b538b44b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5ccad1fae507fff52133972efd7c8792b538b44b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/57b3bfbf76255cdbb4e86bd8cae287a95eebba03",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57b3bfbf76255cdbb4e86bd8cae287a95eebba03",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/57b3bfbf76255cdbb4e86bd8cae287a95eebba03",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57b3bfbf76255cdbb4e86bd8cae287a95eebba03/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1b4999702f2976e01a4d0187ba78bd40549c694d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b4999702f2976e01a4d0187ba78bd40549c694d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1b4999702f2976e01a4d0187ba78bd40549c694d"
      }
    ],
    "stats": {
      "total": 184,
      "additions": 102,
      "deletions": 82
    },
    "files": [
      {
        "sha": "d6558576736ef579066795bc22e4ae46f7527013",
        "filename": "test/functional/feature_backwards_compatibility.py",
        "status": "modified",
        "additions": 101,
        "deletions": 82,
        "changes": 183,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57b3bfbf76255cdbb4e86bd8cae287a95eebba03/test/functional/feature_backwards_compatibility.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57b3bfbf76255cdbb4e86bd8cae287a95eebba03/test/functional/feature_backwards_compatibility.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_backwards_compatibility.py?ref=57b3bfbf76255cdbb4e86bd8cae287a95eebba03",
        "patch": "@@ -27,6 +27,7 @@\n \n from test_framework.util import (\n     assert_equal,\n+    assert_raises_rpc_error,\n )\n \n \n@@ -82,7 +83,7 @@ def run_test(self):\n \n         # w1: regular wallet, created on master: update this test when default\n         #     wallets can no longer be opened by older versions.\n-        node_master.rpc.createwallet(wallet_name=\"w1\")\n+        node_master.createwallet(wallet_name=\"w1\")\n         wallet = node_master.get_wallet_rpc(\"w1\")\n         info = wallet.getwalletinfo()\n         assert info['private_keys_enabled']\n@@ -127,7 +128,7 @@ def run_test(self):\n         # w2: wallet with private keys disabled, created on master: update this\n         #     test when default wallets private keys disabled can no longer be\n         #     opened by older versions.\n-        node_master.rpc.createwallet(wallet_name=\"w2\", disable_private_keys=True)\n+        node_master.createwallet(wallet_name=\"w2\", disable_private_keys=True)\n         wallet = node_master.get_wallet_rpc(\"w2\")\n         info = wallet.getwalletinfo()\n         assert info['private_keys_enabled'] == False\n@@ -149,7 +150,7 @@ def run_test(self):\n \n         # w3: blank wallet, created on master: update this\n         #     test when default blank wallets can no longer be opened by older versions.\n-        node_master.rpc.createwallet(wallet_name=\"w3\", blank=True)\n+        node_master.createwallet(wallet_name=\"w3\", blank=True)\n         wallet = node_master.get_wallet_rpc(\"w3\")\n         info = wallet.getwalletinfo()\n         assert info['private_keys_enabled']\n@@ -215,67 +216,89 @@ def run_test(self):\n                 os.path.join(node_v19_wallets_dir, wallet)\n             )\n \n-        # Open the wallets in v0.19\n-        node_v19.loadwallet(\"w1\")\n-        wallet = node_v19.get_wallet_rpc(\"w1\")\n-        info = wallet.getwalletinfo()\n-        assert info['private_keys_enabled']\n-        assert info['keypoolsize'] > 0\n-        txs = wallet.listtransactions()\n-        assert_equal(len(txs), 5)\n-        assert_equal(txs[1][\"txid\"], tx1_id)\n-        assert_equal(txs[2][\"walletconflicts\"], [tx1_id])\n-        assert_equal(txs[1][\"replaced_by_txid\"], tx2_id)\n-        assert not(txs[1][\"abandoned\"])\n-        assert_equal(txs[1][\"confirmations\"], -1)\n-        assert_equal(txs[2][\"blockindex\"], 1)\n-        assert txs[3][\"abandoned\"]\n-        assert_equal(txs[4][\"walletconflicts\"], [tx3_id])\n-        assert_equal(txs[3][\"replaced_by_txid\"], tx4_id)\n-        assert not(hasattr(txs[3], \"blockindex\"))\n-\n-        node_v19.loadwallet(\"w2\")\n-        wallet = node_v19.get_wallet_rpc(\"w2\")\n-        info = wallet.getwalletinfo()\n-        assert info['private_keys_enabled'] == False\n-        assert info['keypoolsize'] == 0\n-\n-        node_v19.loadwallet(\"w3\")\n-        wallet = node_v19.get_wallet_rpc(\"w3\")\n-        info = wallet.getwalletinfo()\n-        assert info['private_keys_enabled']\n-        assert info['keypoolsize'] == 0\n-\n-        # Open the wallets in v0.18\n-        node_v18.loadwallet(\"w1\")\n-        wallet = node_v18.get_wallet_rpc(\"w1\")\n-        info = wallet.getwalletinfo()\n-        assert info['private_keys_enabled']\n-        assert info['keypoolsize'] > 0\n-        txs = wallet.listtransactions()\n-        assert_equal(len(txs), 5)\n-        assert_equal(txs[1][\"txid\"], tx1_id)\n-        assert_equal(txs[2][\"walletconflicts\"], [tx1_id])\n-        assert_equal(txs[1][\"replaced_by_txid\"], tx2_id)\n-        assert not(txs[1][\"abandoned\"])\n-        assert_equal(txs[1][\"confirmations\"], -1)\n-        assert_equal(txs[2][\"blockindex\"], 1)\n-        assert txs[3][\"abandoned\"]\n-        assert_equal(txs[4][\"walletconflicts\"], [tx3_id])\n-        assert_equal(txs[3][\"replaced_by_txid\"], tx4_id)\n-        assert not(hasattr(txs[3], \"blockindex\"))\n-\n-        node_v18.loadwallet(\"w2\")\n-        wallet = node_v18.get_wallet_rpc(\"w2\")\n-        info = wallet.getwalletinfo()\n-        assert info['private_keys_enabled'] == False\n-        assert info['keypoolsize'] == 0\n-\n-        node_v18.loadwallet(\"w3\")\n-        wallet = node_v18.get_wallet_rpc(\"w3\")\n-        info = wallet.getwalletinfo()\n-        assert info['private_keys_enabled']\n-        assert info['keypoolsize'] == 0\n+        if not self.options.descriptors:\n+            # Descriptor wallets break compatibility, only run this test for legacy wallet\n+            # Open the wallets in v0.19\n+            node_v19.loadwallet(\"w1\")\n+            wallet = node_v19.get_wallet_rpc(\"w1\")\n+            info = wallet.getwalletinfo()\n+            assert info['private_keys_enabled']\n+            assert info['keypoolsize'] > 0\n+            txs = wallet.listtransactions()\n+            assert_equal(len(txs), 5)\n+            assert_equal(txs[1][\"txid\"], tx1_id)\n+            assert_equal(txs[2][\"walletconflicts\"], [tx1_id])\n+            assert_equal(txs[1][\"replaced_by_txid\"], tx2_id)\n+            assert not(txs[1][\"abandoned\"])\n+            assert_equal(txs[1][\"confirmations\"], -1)\n+            assert_equal(txs[2][\"blockindex\"], 1)\n+            assert txs[3][\"abandoned\"]\n+            assert_equal(txs[4][\"walletconflicts\"], [tx3_id])\n+            assert_equal(txs[3][\"replaced_by_txid\"], tx4_id)\n+            assert not(hasattr(txs[3], \"blockindex\"))\n+\n+            node_v19.loadwallet(\"w2\")\n+            wallet = node_v19.get_wallet_rpc(\"w2\")\n+            info = wallet.getwalletinfo()\n+            assert info['private_keys_enabled'] == False\n+            assert info['keypoolsize'] == 0\n+\n+            node_v19.loadwallet(\"w3\")\n+            wallet = node_v19.get_wallet_rpc(\"w3\")\n+            info = wallet.getwalletinfo()\n+            assert info['private_keys_enabled']\n+            assert info['keypoolsize'] == 0\n+\n+            # Open the wallets in v0.18\n+            node_v18.loadwallet(\"w1\")\n+            wallet = node_v18.get_wallet_rpc(\"w1\")\n+            info = wallet.getwalletinfo()\n+            assert info['private_keys_enabled']\n+            assert info['keypoolsize'] > 0\n+            txs = wallet.listtransactions()\n+            assert_equal(len(txs), 5)\n+            assert_equal(txs[1][\"txid\"], tx1_id)\n+            assert_equal(txs[2][\"walletconflicts\"], [tx1_id])\n+            assert_equal(txs[1][\"replaced_by_txid\"], tx2_id)\n+            assert not(txs[1][\"abandoned\"])\n+            assert_equal(txs[1][\"confirmations\"], -1)\n+            assert_equal(txs[2][\"blockindex\"], 1)\n+            assert txs[3][\"abandoned\"]\n+            assert_equal(txs[4][\"walletconflicts\"], [tx3_id])\n+            assert_equal(txs[3][\"replaced_by_txid\"], tx4_id)\n+            assert not(hasattr(txs[3], \"blockindex\"))\n+\n+            node_v18.loadwallet(\"w2\")\n+            wallet = node_v18.get_wallet_rpc(\"w2\")\n+            info = wallet.getwalletinfo()\n+            assert info['private_keys_enabled'] == False\n+            assert info['keypoolsize'] == 0\n+\n+            node_v18.loadwallet(\"w3\")\n+            wallet = node_v18.get_wallet_rpc(\"w3\")\n+            info = wallet.getwalletinfo()\n+            assert info['private_keys_enabled']\n+            assert info['keypoolsize'] == 0\n+\n+            node_v17.loadwallet(\"w1\")\n+            wallet = node_v17.get_wallet_rpc(\"w1\")\n+            info = wallet.getwalletinfo()\n+            assert info['private_keys_enabled']\n+            assert info['keypoolsize'] > 0\n+\n+            node_v17.loadwallet(\"w2\")\n+            wallet = node_v17.get_wallet_rpc(\"w2\")\n+            info = wallet.getwalletinfo()\n+            assert info['private_keys_enabled'] == False\n+            assert info['keypoolsize'] == 0\n+        else:\n+            # Descriptor wallets appear to corrupted wallets to old software\n+            assert_raises_rpc_error(-4, \"Wallet file verification failed: wallet.dat corrupt, salvage failed\", node_v19.loadwallet, \"w1\")\n+            assert_raises_rpc_error(-4, \"Wallet file verification failed: wallet.dat corrupt, salvage failed\", node_v19.loadwallet, \"w2\")\n+            assert_raises_rpc_error(-4, \"Wallet file verification failed: wallet.dat corrupt, salvage failed\", node_v19.loadwallet, \"w3\")\n+            assert_raises_rpc_error(-4, \"Wallet file verification failed: wallet.dat corrupt, salvage failed\", node_v18.loadwallet, \"w1\")\n+            assert_raises_rpc_error(-4, \"Wallet file verification failed: wallet.dat corrupt, salvage failed\", node_v18.loadwallet, \"w2\")\n+            assert_raises_rpc_error(-4, \"Wallet file verification failed: wallet.dat corrupt, salvage failed\", node_v18.loadwallet, \"w3\")\n \n         # Open the wallets in v0.17\n         node_v17.loadwallet(\"w1_v18\")\n@@ -284,39 +307,35 @@ def run_test(self):\n         assert info['private_keys_enabled']\n         assert info['keypoolsize'] > 0\n \n-        node_v17.loadwallet(\"w1\")\n-        wallet = node_v17.get_wallet_rpc(\"w1\")\n-        info = wallet.getwalletinfo()\n-        assert info['private_keys_enabled']\n-        assert info['keypoolsize'] > 0\n-\n         node_v17.loadwallet(\"w2_v18\")\n         wallet = node_v17.get_wallet_rpc(\"w2_v18\")\n         info = wallet.getwalletinfo()\n         assert info['private_keys_enabled'] == False\n         assert info['keypoolsize'] == 0\n \n-        node_v17.loadwallet(\"w2\")\n-        wallet = node_v17.get_wallet_rpc(\"w2\")\n-        info = wallet.getwalletinfo()\n-        assert info['private_keys_enabled'] == False\n-        assert info['keypoolsize'] == 0\n-\n         # RPC loadwallet failure causes bitcoind to exit, in addition to the RPC\n         # call failure, so the following test won't work:\n         # assert_raises_rpc_error(-4, \"Wallet loading failed.\", node_v17.loadwallet, 'w3_v18')\n \n         # Instead, we stop node and try to launch it with the wallet:\n         self.stop_node(4)\n         node_v17.assert_start_raises_init_error([\"-wallet=w3_v18\"], \"Error: Error loading w3_v18: Wallet requires newer version of Bitcoin Core\")\n-        node_v17.assert_start_raises_init_error([\"-wallet=w3\"], \"Error: Error loading w3: Wallet requires newer version of Bitcoin Core\")\n+        if self.options.descriptors:\n+            # Descriptor wallets appear to corrupted wallets to old software\n+            node_v17.assert_start_raises_init_error([\"-wallet=w1\"], \"Error: wallet.dat corrupt, salvage failed\")\n+            node_v17.assert_start_raises_init_error([\"-wallet=w2\"], \"Error: wallet.dat corrupt, salvage failed\")\n+            node_v17.assert_start_raises_init_error([\"-wallet=w3\"], \"Error: wallet.dat corrupt, salvage failed\")\n+        else:\n+            node_v17.assert_start_raises_init_error([\"-wallet=w3\"], \"Error: Error loading w3: Wallet requires newer version of Bitcoin Core\")\n         self.start_node(4)\n \n-        # Open most recent wallet in v0.16 (no loadwallet RPC)\n-        self.restart_node(5, extra_args=[\"-wallet=w2\"])\n-        wallet = node_v16.get_wallet_rpc(\"w2\")\n-        info = wallet.getwalletinfo()\n-        assert info['keypoolsize'] == 1\n+        if not self.options.descriptors:\n+            # Descriptor wallets break compatibility, only run this test for legacy wallets\n+            # Open most recent wallet in v0.16 (no loadwallet RPC)\n+            self.restart_node(5, extra_args=[\"-wallet=w2\"])\n+            wallet = node_v16.get_wallet_rpc(\"w2\")\n+            info = wallet.getwalletinfo()\n+            assert info['keypoolsize'] == 1\n \n         # Create upgrade wallet in v0.16\n         self.restart_node(-1, extra_args=[\"-wallet=u1_v16\"])"
      },
      {
        "sha": "da03b559e1dd883a22417c7df8b4982b11bc794b",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57b3bfbf76255cdbb4e86bd8cae287a95eebba03/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57b3bfbf76255cdbb4e86bd8cae287a95eebba03/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=57b3bfbf76255cdbb4e86bd8cae287a95eebba03",
        "patch": "@@ -197,6 +197,7 @@\n     'wallet_txn_doublespend.py',\n     'wallet_txn_doublespend.py --descriptors',\n     'feature_backwards_compatibility.py',\n+    'feature_backwards_compatibility.py --descriptors',\n     'wallet_txn_clone.py --mineblock',\n     'feature_notifications.py',\n     'rpc_getblockfilter.py',"
      }
    ]
  },
  {
    "sha": "20676bf4320b042e982f95acc719696f27dc709b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMDY3NmJmNDMyMGIwNDJlOTgyZjk1YWNjNzE5Njk2ZjI3ZGM3MDli",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-10-27T23:17:20Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-10-28T20:48:19Z"
      },
      "message": "Avoid creating legacy wallets in wallet_importdescriptors.py",
      "tree": {
        "sha": "f995c7d891817b532a14881c58575c59ae45e709",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f995c7d891817b532a14881c58575c59ae45e709"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/20676bf4320b042e982f95acc719696f27dc709b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/20676bf4320b042e982f95acc719696f27dc709b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/20676bf4320b042e982f95acc719696f27dc709b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/20676bf4320b042e982f95acc719696f27dc709b/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "57b3bfbf76255cdbb4e86bd8cae287a95eebba03",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57b3bfbf76255cdbb4e86bd8cae287a95eebba03",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/57b3bfbf76255cdbb4e86bd8cae287a95eebba03"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 3,
      "deletions": 2
    },
    "files": [
      {
        "sha": "5b3db282e15a12c5013567fb8a767192c647fc1f",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/20676bf4320b042e982f95acc719696f27dc709b/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/20676bf4320b042e982f95acc719696f27dc709b/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=20676bf4320b042e982f95acc719696f27dc709b",
        "patch": "@@ -224,7 +224,7 @@\n     'mempool_expiry.py',\n     'wallet_import_rescan.py --legacy-wallet',\n     'wallet_import_with_label.py --legacy-wallet',\n-    'wallet_importdescriptors.py',\n+    'wallet_importdescriptors.py --descriptors',\n     'wallet_upgradewallet.py',\n     'rpc_bind.py --ipv4',\n     'rpc_bind.py --ipv6',"
      },
      {
        "sha": "22740294082b950d24f94d87acc9a72a41fe006e",
        "filename": "test/functional/wallet_importdescriptors.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/20676bf4320b042e982f95acc719696f27dc709b/test/functional/wallet_importdescriptors.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/20676bf4320b042e982f95acc719696f27dc709b/test/functional/wallet_importdescriptors.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importdescriptors.py?ref=20676bf4320b042e982f95acc719696f27dc709b",
        "patch": "@@ -34,6 +34,7 @@ def set_test_params(self):\n                            [\"-addresstype=bech32\", \"-keypool=5\"]\n                           ]\n         self.setup_clean_chain = True\n+        self.wallet_names = []\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n@@ -58,7 +59,7 @@ def test_importdesc(self, req, success, error_code=None, error_message=None, war\n \n     def run_test(self):\n         self.log.info('Setting up wallets')\n-        self.nodes[0].createwallet(wallet_name='w0', disable_private_keys=False)\n+        self.nodes[0].createwallet(wallet_name='w0', disable_private_keys=False, descriptors=True)\n         w0 = self.nodes[0].get_wallet_rpc('w0')\n \n         self.nodes[1].createwallet(wallet_name='w1', disable_private_keys=True, blank=True, descriptors=True)"
      }
    ]
  },
  {
    "sha": "f0d058d2fb58a0223e2a1cea47b7824f650dff38",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMGQwNThkMmZiNThhMDIyM2UyYTFjZWE0N2I3ODI0ZjY1MGRmZjM4",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-10-27T21:40:18Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-10-28T21:10:35Z"
      },
      "message": "Allow direct sqlite db\n\nLike with BDB, we allow users to specify the wallet file directly,\nrather than just a wallet dir name.",
      "tree": {
        "sha": "fe859ffa263f9594ce97ba398359de977e7c3655",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fe859ffa263f9594ce97ba398359de977e7c3655"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f0d058d2fb58a0223e2a1cea47b7824f650dff38",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0d058d2fb58a0223e2a1cea47b7824f650dff38",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f0d058d2fb58a0223e2a1cea47b7824f650dff38",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0d058d2fb58a0223e2a1cea47b7824f650dff38/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "20676bf4320b042e982f95acc719696f27dc709b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/20676bf4320b042e982f95acc719696f27dc709b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/20676bf4320b042e982f95acc719696f27dc709b"
      }
    ],
    "stats": {
      "total": 43,
      "additions": 31,
      "deletions": 12
    },
    "files": [
      {
        "sha": "f5cb36b2aeaf5315237876e24df60a333ebad9c1",
        "filename": "src/wallet/bdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0d058d2fb58a0223e2a1cea47b7824f650dff38/src/wallet/bdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0d058d2fb58a0223e2a1cea47b7824f650dff38/src/wallet/bdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.cpp?ref=f0d058d2fb58a0223e2a1cea47b7824f650dff38",
        "patch": "@@ -62,7 +62,7 @@ bool WalletDatabaseFileId::operator==(const WalletDatabaseFileId& rhs) const\n std::shared_ptr<BerkeleyEnvironment> GetWalletEnv(const fs::path& wallet_path, std::string& database_filename)\n {\n     fs::path env_directory;\n-    SplitWalletPath(wallet_path, env_directory, database_filename);\n+    SplitWalletPath(wallet_path, env_directory, database_filename, \"wallet.dat\");\n     LOCK(cs_db);\n     auto inserted = g_dbenvs.emplace(env_directory.string(), std::weak_ptr<BerkeleyEnvironment>());\n     if (inserted.second) {\n@@ -812,7 +812,7 @@ bool ExistsBerkeleyDatabase(const fs::path& path)\n {\n     fs::path env_directory;\n     std::string data_filename;\n-    SplitWalletPath(path, env_directory, data_filename);\n+    SplitWalletPath(path, env_directory, data_filename, \"wallet.dat\");\n     return IsBDBFile(env_directory / data_filename);\n }\n "
      },
      {
        "sha": "0e058a5299701a7179d0bf6c627154dd713e1ac2",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0d058d2fb58a0223e2a1cea47b7824f650dff38/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0d058d2fb58a0223e2a1cea47b7824f650dff38/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=f0d058d2fb58a0223e2a1cea47b7824f650dff38",
        "patch": "@@ -8,7 +8,7 @@\n \n #include <string>\n \n-void SplitWalletPath(const fs::path& wallet_path, fs::path& env_directory, std::string& database_filename)\n+void SplitWalletPath(const fs::path& wallet_path, fs::path& env_directory, std::string& database_filename, const std::string& default_filename)\n {\n     if (fs::is_regular_file(wallet_path)) {\n         // Special case for backwards compatibility: if wallet path points to an\n@@ -20,6 +20,6 @@ void SplitWalletPath(const fs::path& wallet_path, fs::path& env_directory, std::\n         // Normal case: Interpret wallet path as a directory path containing\n         // data and log files.\n         env_directory = wallet_path;\n-        database_filename = \"wallet.dat\";\n+        database_filename = default_filename;\n     }\n }"
      },
      {
        "sha": "3c8a8ee6fa8c1bedab6a44c44923811b826f0dd4",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0d058d2fb58a0223e2a1cea47b7824f650dff38/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0d058d2fb58a0223e2a1cea47b7824f650dff38/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=f0d058d2fb58a0223e2a1cea47b7824f650dff38",
        "patch": "@@ -19,7 +19,7 @@\n \n struct bilingual_str;\n \n-void SplitWalletPath(const fs::path& wallet_path, fs::path& env_directory, std::string& database_filename);\n+void SplitWalletPath(const fs::path& wallet_path, fs::path& env_directory, std::string& database_filename, const std::string& default_filename);\n \n /** RAII class that provides access to a WalletDatabase */\n class DatabaseBatch"
      },
      {
        "sha": "a7262cc47682e142d9bd1f72aa7185711e1b6efe",
        "filename": "src/wallet/sqlite.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 3,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0d058d2fb58a0223e2a1cea47b7824f650dff38/src/wallet/sqlite.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0d058d2fb58a0223e2a1cea47b7824f650dff38/src/wallet/sqlite.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/sqlite.cpp?ref=f0d058d2fb58a0223e2a1cea47b7824f650dff38",
        "patch": "@@ -568,15 +568,21 @@ bool SQLiteBatch::TxnAbort()\n \n bool ExistsSQLiteDatabase(const fs::path& path)\n {\n-    const fs::path file = path / DATABASE_FILENAME;\n+    fs::path dir;\n+    std::string filename;\n+    SplitWalletPath(path, dir, filename, DATABASE_FILENAME);\n+    const fs::path file = dir / filename;\n     return fs::symlink_status(file).type() == fs::regular_file && IsSQLiteFile(file);\n }\n \n std::unique_ptr<SQLiteDatabase> MakeSQLiteDatabase(const fs::path& path, const DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error)\n {\n-    const fs::path file = path / DATABASE_FILENAME;\n+    fs::path dir;\n+    std::string filename;\n+    SplitWalletPath(path, dir, filename, DATABASE_FILENAME);\n+    const fs::path file = dir / filename;\n     try {\n-        auto db = MakeUnique<SQLiteDatabase>(path, file);\n+        auto db = MakeUnique<SQLiteDatabase>(dir, file);\n         if (options.verify && !db->Verify(error)) {\n             status = DatabaseStatus::FAILED_VERIFY;\n             return nullptr;"
      },
      {
        "sha": "0f916c3e43d8c8766c54a75d3e395efc97883203",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0d058d2fb58a0223e2a1cea47b7824f650dff38/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0d058d2fb58a0223e2a1cea47b7824f650dff38/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=f0d058d2fb58a0223e2a1cea47b7824f650dff38",
        "patch": "@@ -32,6 +32,7 @@\n #include <util/translation.h>\n #include <wallet/coincontrol.h>\n #include <wallet/fees.h>\n+#include <wallet/sqlite.h>\n \n #include <univalue.h>\n \n@@ -3795,7 +3796,8 @@ std::unique_ptr<WalletDatabase> MakeWalletDatabase(const std::string& name, cons\n     fs::file_type path_type = fs::symlink_status(wallet_path).type();\n     if (!(path_type == fs::file_not_found || path_type == fs::directory_file ||\n           (path_type == fs::symlink_file && fs::is_directory(wallet_path)) ||\n-          (path_type == fs::regular_file && fs::path(name).filename() == name))) {\n+          (path_type == fs::regular_file && fs::path(name).filename() == name) ||\n+          (path_type == fs::regular_file && ExistsSQLiteDatabase(wallet_path)))) {\n         error_string = Untranslated(strprintf(\n               \"Invalid -wallet path '%s'. -wallet path should point to a directory where wallet.dat and \"\n               \"database/log.?????????? files can be stored, a location where such a directory could be created, \""
      },
      {
        "sha": "c78412cc65dd4a9fc346e57eba9629611883afeb",
        "filename": "src/wallet/walletutil.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 3,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0d058d2fb58a0223e2a1cea47b7824f650dff38/src/wallet/walletutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0d058d2fb58a0223e2a1cea47b7824f650dff38/src/wallet/walletutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletutil.cpp?ref=f0d058d2fb58a0223e2a1cea47b7824f650dff38",
        "patch": "@@ -10,6 +10,11 @@\n bool ExistsBerkeleyDatabase(const fs::path& path);\n bool ExistsSQLiteDatabase(const fs::path& path);\n \n+static bool ExistsDatabase(const fs::path& path)\n+{\n+    return ExistsBerkeleyDatabase(path) || ExistsSQLiteDatabase(path);\n+}\n+\n fs::path GetWalletDir()\n {\n     fs::path path;\n@@ -49,11 +54,10 @@ std::vector<fs::path> ListWalletDir()\n         // This can be replaced by boost::filesystem::lexically_relative once boost is bumped to 1.60.\n         const fs::path path = it->path().string().substr(offset);\n \n-        if (it->status().type() == fs::directory_file &&\n-            (ExistsBerkeleyDatabase(it->path()) || ExistsSQLiteDatabase(it->path()))) {\n+        if (it->status().type() == fs::directory_file && ExistsDatabase(it->path())) {\n             // Found a directory which contains wallet.dat btree file, add it as a wallet.\n             paths.emplace_back(path);\n-        } else if (it.level() == 0 && it->symlink_status().type() == fs::regular_file && ExistsBerkeleyDatabase(it->path())) {\n+        } else if (it.level() == 0 && it->symlink_status().type() == fs::regular_file && ExistsDatabase(it->path())) {\n             if (it->path().filename() == \"wallet.dat\") {\n                 // Found top-level wallet.dat btree file, add top level directory \"\"\n                 // as a wallet.\n@@ -65,6 +69,13 @@ std::vector<fs::path> ListWalletDir()\n                 // Add it to the list of available wallets.\n                 paths.emplace_back(path);\n             }\n+        } else if (it->symlink_status().type() == fs::regular_file && ExistsSQLiteDatabase(it->path())) {\n+            // Only SQLite wallets will be created nested inside of directories\n+            if (it->path().filename() == \"wallet.dat\") {\n+                // SQLite wallets can also be in the traditional wallet dir structure, so if see one that is like that, ignore it here\n+                continue;\n+            }\n+            paths.emplace_back(path);\n         }\n     }\n "
      }
    ]
  },
  {
    "sha": "26c3376d2d674ddc08aa95c598cc0bd875ec26a8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNmMzMzc2ZDJkNjc0ZGRjMDhhYTk1YzU5OGNjMGJkODc1ZWMyNmE4",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-10-28T18:24:21Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-10-28T21:10:43Z"
      },
      "message": "Add wallet_util functions for checking file magic",
      "tree": {
        "sha": "cda81977f923dbcb698a6f14e9143d6608c34619",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cda81977f923dbcb698a6f14e9143d6608c34619"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/26c3376d2d674ddc08aa95c598cc0bd875ec26a8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26c3376d2d674ddc08aa95c598cc0bd875ec26a8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/26c3376d2d674ddc08aa95c598cc0bd875ec26a8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26c3376d2d674ddc08aa95c598cc0bd875ec26a8/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f0d058d2fb58a0223e2a1cea47b7824f650dff38",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0d058d2fb58a0223e2a1cea47b7824f650dff38",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f0d058d2fb58a0223e2a1cea47b7824f650dff38"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 11,
      "deletions": 0
    },
    "files": [
      {
        "sha": "4559cc28858de651edc24f13daa76ed86469e01b",
        "filename": "test/functional/test_framework/wallet_util.py",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26c3376d2d674ddc08aa95c598cc0bd875ec26a8/test/functional/test_framework/wallet_util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26c3376d2d674ddc08aa95c598cc0bd875ec26a8/test/functional/test_framework/wallet_util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/wallet_util.py?ref=26c3376d2d674ddc08aa95c598cc0bd875ec26a8",
        "patch": "@@ -129,3 +129,14 @@ def generate_wif_key():\n     k = ECKey()\n     k.generate()\n     return bytes_to_wif(k.get_bytes(), k.is_compressed)\n+\n+def is_sqlite_file(filename):\n+    with open(filename, \"rb\") as f:\n+        file_magic = f.read(16)\n+        return file_magic == b\"SQLite format 3\\x00\"\n+\n+def is_bdb_file(filename):\n+    with open(filename, \"rb\") as f:\n+        f.seed(12, 0)\n+        file_magic = f.read(4)\n+        return file_magic == b\"\\x00\\x05\\x31\\x62\" or file_magic == b\"\\x62\\x31\\x05\\x00\""
      }
    ]
  },
  {
    "sha": "154c46ddff6d4ea2a3bb168545b4303763a68112",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNTRjNDZkZGZmNmQ0ZWEyYTNiYjE2ODU0NWI0MzAzNzYzYTY4MTEy",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-10-27T22:29:45Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-10-28T21:10:54Z"
      },
      "message": "tests: have wallet_multiwallet.py actually make the correct wallet types\n\nWhen --dsecriptors, we expect the wallets to be descriptor wallets, and\nthe reverse when not (or --legacy-wallet). So updated\nwallet_multiwallet.py to do that.",
      "tree": {
        "sha": "f3fe893704dbeb2351e1ef79f43f94b57ba28ded",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f3fe893704dbeb2351e1ef79f43f94b57ba28ded"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/154c46ddff6d4ea2a3bb168545b4303763a68112",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/154c46ddff6d4ea2a3bb168545b4303763a68112",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/154c46ddff6d4ea2a3bb168545b4303763a68112",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/154c46ddff6d4ea2a3bb168545b4303763a68112/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "26c3376d2d674ddc08aa95c598cc0bd875ec26a8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26c3376d2d674ddc08aa95c598cc0bd875ec26a8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/26c3376d2d674ddc08aa95c598cc0bd875ec26a8"
      }
    ],
    "stats": {
      "total": 87,
      "additions": 58,
      "deletions": 29
    },
    "files": [
      {
        "sha": "51374ae2f4c337c71108649e1b1cecf1db408cde",
        "filename": "test/functional/wallet_multiwallet.py",
        "status": "modified",
        "additions": 58,
        "deletions": 29,
        "changes": 87,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/154c46ddff6d4ea2a3bb168545b4303763a68112/test/functional/wallet_multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/154c46ddff6d4ea2a3bb168545b4303763a68112/test/functional/wallet_multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_multiwallet.py?ref=154c46ddff6d4ea2a3bb168545b4303763a68112",
        "patch": "@@ -41,6 +41,7 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n         self.rpc_timeout = 120\n+        self.extra_args = [[\"-nowallet\"], []]\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n@@ -60,17 +61,17 @@ def run_test(self):\n         wallet = lambda name: node.get_wallet_rpc(name)\n \n         def wallet_file(name):\n-            if name == self.default_wallet_name:\n+            if name == self.default_wallet_name and not self.options.descriptors:\n                 return wallet_dir(self.default_wallet_name, self.wallet_data_filename)\n             if os.path.isdir(wallet_dir(name)):\n-                return wallet_dir(name, \"wallet.dat\")\n+                return wallet_dir(name, self.wallet_data_filename)\n             return wallet_dir(name)\n \n         assert_equal(self.nodes[0].listwalletdir(), { 'wallets': [{ 'name': self.default_wallet_name }] })\n \n         # check wallet.dat is created\n         self.stop_nodes()\n-        assert_equal(os.path.isfile(wallet_dir(self.default_wallet_name, self.wallet_data_filename)), True)\n+        assert_equal(os.path.isfile(wallet_file(self.default_wallet_name)), True)\n \n         # create symlink to verify wallet directory path can be referenced\n         # through symlink\n@@ -80,17 +81,23 @@ def wallet_file(name):\n         # rename wallet.dat to make sure plain wallet file paths (as opposed to\n         # directory paths) can be loaded\n         # create another dummy wallet for use in testing backups later\n-        self.start_node(0, [\"-nowallet\", \"-wallet=empty\", \"-wallet=plain\"])\n+        self.start_node(0, [\"-nowallet\"])\n+        node.createwallet(\"empty\")\n+        node.createwallet(\"plain\")\n         node.createwallet(\"created\")\n         self.stop_nodes()\n         empty_wallet = os.path.join(self.options.tmpdir, 'empty.dat')\n         os.rename(wallet_file(\"empty\"), empty_wallet)\n-        shutil.rmtree(wallet_dir(\"empty\"))\n         empty_created_wallet = os.path.join(self.options.tmpdir, 'empty.created.dat')\n-        os.rename(wallet_dir(\"created\", self.wallet_data_filename), empty_created_wallet)\n-        shutil.rmtree(wallet_dir(\"created\"))\n+        os.rename(wallet_file(\"created\"), empty_created_wallet)\n         os.rename(wallet_file(\"plain\"), wallet_dir(\"w8\"))\n-        shutil.rmtree(wallet_dir(\"plain\"))\n+\n+        if not self.options.descriptors:\n+            # Descriptor wallets have a single file wallets which get moved during the rename.\n+            # Legacy wallets have wallet dirs, so these need to be deleted\n+            shutil.rmtree(wallet_dir(\"empty\"))\n+            shutil.rmtree(wallet_dir(\"created\"))\n+            shutil.rmtree(wallet_dir(\"plain\"))\n \n         # restart node with a mix of wallet names:\n         #   w1, w2, w3 - to verify new wallets created when non-existing paths specified\n@@ -101,32 +108,40 @@ def wallet_file(name):\n         #   w8         - to verify existing wallet file is loaded correctly\n         #   ''         - to verify default wallet file is created correctly\n         wallet_names = ['w1', 'w2', 'w3', 'w', 'sub/w5', os.path.join(self.options.tmpdir, 'extern/w6'), 'w7_symlink', 'w8', self.default_wallet_name]\n-        extra_args = ['-nowallet'] + ['-wallet={}'.format(n) for n in wallet_names]\n-        self.start_node(0, extra_args)\n+        self.start_node(0)\n+        for wallet_name in wallet_names[:-2]:\n+            self.nodes[0].createwallet(wallet_name)\n+        for wallet_name in wallet_names[-2:]:\n+            self.nodes[0].loadwallet(wallet_name)\n         assert_equal(sorted(map(lambda w: w['name'], self.nodes[0].listwalletdir()['wallets'])), [self.default_wallet_name, os.path.join('sub', 'w5'), 'w', 'w1', 'w2', 'w3', 'w7', 'w7_symlink', 'w8'])\n \n         assert_equal(set(node.listwallets()), set(wallet_names))\n \n+        # should raise rpc error if wallet path can't be created\n+        if self.options.descriptors:\n+            assert_raises_rpc_error(-4, \"boost::filesystem::create_directory:\", self.nodes[0].createwallet, \"w8/bad\")\n+        else:\n+            assert_raises_rpc_error(-1, \"boost::filesystem::create_directory:\", self.nodes[0].createwallet, \"w8/bad\")\n+\n         # check that all requested wallets were created\n         self.stop_node(0)\n         for wallet_name in wallet_names:\n             assert_equal(os.path.isfile(wallet_file(wallet_name)), True)\n \n-        # should not initialize if wallet path can't be created\n-        exp_stderr = \"boost::filesystem::create_directory:\"\n-        self.nodes[0].assert_start_raises_init_error(['-wallet=w8/bad'], exp_stderr, match=ErrorMatch.PARTIAL_REGEX)\n-\n         self.nodes[0].assert_start_raises_init_error(['-walletdir=wallets'], 'Error: Specified -walletdir \"wallets\" does not exist')\n         self.nodes[0].assert_start_raises_init_error(['-walletdir=wallets'], 'Error: Specified -walletdir \"wallets\" is a relative path', cwd=data_dir())\n         self.nodes[0].assert_start_raises_init_error(['-walletdir=debug.log'], 'Error: Specified -walletdir \"debug.log\" is not a directory', cwd=data_dir())\n \n         # should not initialize if there are duplicate wallets\n         self.nodes[0].assert_start_raises_init_error(['-wallet=w1', '-wallet=w1'], 'Error: Error loading wallet w1. Duplicate -wallet filename specified.')\n \n-        # should not initialize if one wallet is a copy of another\n         shutil.copyfile(wallet_dir('w8'), wallet_dir('w8_copy'))\n-        exp_stderr = r\"BerkeleyDatabase: Can't open database w8_copy \\(duplicates fileid \\w+ from w8\\)\"\n-        self.nodes[0].assert_start_raises_init_error(['-wallet=w8', '-wallet=w8_copy'], exp_stderr, match=ErrorMatch.PARTIAL_REGEX)\n+        if not self.options.descriptors:\n+            # Only legacy wallets have a restriction on opening wallet copies due to BDB caching issues.\n+            # While this may be desirable for SQLite wallets in the future, it is not currently an issue.\n+            # should not initialize if one wallet is a copy of another\n+            exp_stderr = r\"BerkeleyDatabase: Can't open database w8_copy \\(duplicates fileid \\w+ from w8\\)\"\n+            self.nodes[0].assert_start_raises_init_error(['-wallet=w8', '-wallet=w8_copy'], exp_stderr, match=ErrorMatch.PARTIAL_REGEX)\n \n         # should not initialize if wallet file is a symlink\n         os.symlink('w8', wallet_dir('w8_symlink'))\n@@ -142,26 +157,36 @@ def wallet_file(name):\n         # if wallets/ doesn't exist, datadir should be the default wallet dir\n         wallet_dir2 = data_dir('walletdir')\n         os.rename(wallet_dir(), wallet_dir2)\n-        self.start_node(0, ['-nowallet', '-wallet=w4', '-wallet=w5'])\n+        self.start_node(0, ['-nowallet'])\n+        self.nodes[0].createwallet('w4')\n+        self.nodes[0].createwallet('w5')\n         assert_equal(set(node.listwallets()), {\"w4\", \"w5\"})\n         w5 = wallet(\"w5\")\n         node.generatetoaddress(nblocks=1, address=w5.getnewaddress())\n \n         # now if wallets/ exists again, but the rootdir is specified as the walletdir, w4 and w5 should still be loaded\n         os.rename(wallet_dir2, wallet_dir())\n-        self.restart_node(0, ['-nowallet', '-wallet=w4', '-wallet=w5', '-walletdir=' + data_dir()])\n+        self.restart_node(0, ['-nowallet', '-walletdir=' + data_dir()])\n+        self.nodes[0].loadwallet('w4')\n+        self.nodes[0].loadwallet('w5')\n         assert_equal(set(node.listwallets()), {\"w4\", \"w5\"})\n         w5 = wallet(\"w5\")\n         w5_info = w5.getwalletinfo()\n         assert_equal(w5_info['immature_balance'], 50)\n \n         competing_wallet_dir = os.path.join(self.options.tmpdir, 'competing_walletdir')\n         os.mkdir(competing_wallet_dir)\n-        self.restart_node(0, ['-walletdir=' + competing_wallet_dir])\n-        exp_stderr = r\"Error: Error initializing wallet database environment \\\"\\S+competing_walletdir\\S*\\\"!\"\n+        self.restart_node(0, ['-nowallet', '-walletdir=' + competing_wallet_dir])\n+        self.nodes[0].createwallet(self.default_wallet_name)\n+        if self.options.descriptors:\n+            exp_stderr = r\"Error: SQLiteDatabase: Unable to obtain an exclusive lock on the database, is it being used by another bitcoind?\"\n+        else:\n+            exp_stderr = r\"Error: Error initializing wallet database environment \\\"\\S+competing_walletdir\\S*\\\"!\"\n         self.nodes[1].assert_start_raises_init_error(['-walletdir=' + competing_wallet_dir], exp_stderr, match=ErrorMatch.PARTIAL_REGEX)\n \n-        self.restart_node(0, extra_args)\n+        self.restart_node(0)\n+        for wallet_name in wallet_names:\n+            self.nodes[0].loadwallet(wallet_name)\n \n         assert_equal(sorted(map(lambda w: w['name'], self.nodes[0].listwalletdir()['wallets'])), [self.default_wallet_name, os.path.join('sub', 'w5'), 'w', 'w1', 'w2', 'w3', 'w7', 'w7_symlink', 'w8', 'w8_copy'])\n \n@@ -254,18 +279,22 @@ def wallet_file(name):\n \n         # Fail to load duplicate wallets\n         path = os.path.join(self.options.tmpdir, \"node0\", \"regtest\", \"wallets\", \"w1\", \"wallet.dat\")\n-        assert_raises_rpc_error(-4, \"Wallet file verification failed. Refusing to load database. Data file '{}' is already loaded.\".format(path), self.nodes[0].loadwallet, wallet_names[0])\n+        if self.options.descriptors:\n+            assert_raises_rpc_error(-4, \"Wallet file verification failed. SQLiteDatabase: Unable to obtain an exclusive lock on the database, is it being used by another bitcoind?\", self.nodes[0].loadwallet, wallet_names[0])\n+        else:\n+            assert_raises_rpc_error(-4, \"Wallet file verification failed. Refusing to load database. Data file '{}' is already loaded.\".format(path), self.nodes[0].loadwallet, wallet_names[0])\n \n-        # Fail to load duplicate wallets by different ways (directory and filepath)\n-        if not self.options.descriptors:\n+            # Fail to load duplicate wallets by different ways (directory and filepath)\n             path = os.path.join(self.options.tmpdir, \"node0\", \"regtest\", \"wallets\", \"wallet.dat\")\n             assert_raises_rpc_error(-4, \"Wallet file verification failed. Refusing to load database. Data file '{}' is already loaded.\".format(path), self.nodes[0].loadwallet, 'wallet.dat')\n \n-        # Fail to load if one wallet is a copy of another\n-        assert_raises_rpc_error(-4, \"BerkeleyDatabase: Can't open database w8_copy (duplicates fileid\", self.nodes[0].loadwallet, 'w8_copy')\n+            # Only legacy wallets have a restriction on opening wallet copies due to BDB caching issues.\n+            # While this may be desirable for SQLite wallets in the future, it is not currently an issue.\n+            # Fail to load if one wallet is a copy of another\n+            assert_raises_rpc_error(-4, \"BerkeleyDatabase: Can't open database w8_copy (duplicates fileid\", self.nodes[0].loadwallet, 'w8_copy')\n \n-        # Fail to load if one wallet is a copy of another, test this twice to make sure that we don't re-introduce #14304\n-        assert_raises_rpc_error(-4, \"BerkeleyDatabase: Can't open database w8_copy (duplicates fileid\", self.nodes[0].loadwallet, 'w8_copy')\n+            # Fail to load if one wallet is a copy of another, test this twice to make sure that we don't re-introduce #14304\n+            assert_raises_rpc_error(-4, \"BerkeleyDatabase: Can't open database w8_copy (duplicates fileid\", self.nodes[0].loadwallet, 'w8_copy')\n \n \n         # Fail to load if wallet file is a symlink"
      }
    ]
  },
  {
    "sha": "b118f2d0526f1514bd88ec93e4afb8475dc7c995",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMTE4ZjJkMDUyNmYxNTE0YmQ4OGVjOTNlNGFmYjg0NzVkYzdjOTk1",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-10-28T18:47:29Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-10-28T21:27:39Z"
      },
      "message": "Update feature_backwards_compatibility.py to handle single sqlite files",
      "tree": {
        "sha": "f50828266f42307164f2af4b59bc897a35f5c0a6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f50828266f42307164f2af4b59bc897a35f5c0a6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b118f2d0526f1514bd88ec93e4afb8475dc7c995",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b118f2d0526f1514bd88ec93e4afb8475dc7c995",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b118f2d0526f1514bd88ec93e4afb8475dc7c995",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b118f2d0526f1514bd88ec93e4afb8475dc7c995/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "154c46ddff6d4ea2a3bb168545b4303763a68112",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/154c46ddff6d4ea2a3bb168545b4303763a68112",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/154c46ddff6d4ea2a3bb168545b4303763a68112"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 27,
      "deletions": 25
    },
    "files": [
      {
        "sha": "b4d6d4f7daf50891049e5b8207fb1f86fa63fa76",
        "filename": "test/functional/feature_backwards_compatibility.py",
        "status": "modified",
        "additions": 27,
        "deletions": 25,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b118f2d0526f1514bd88ec93e4afb8475dc7c995/test/functional/feature_backwards_compatibility.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b118f2d0526f1514bd88ec93e4afb8475dc7c995/test/functional/feature_backwards_compatibility.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_backwards_compatibility.py?ref=b118f2d0526f1514bd88ec93e4afb8475dc7c995",
        "patch": "@@ -29,6 +29,10 @@\n     assert_equal,\n     assert_raises_rpc_error,\n )\n+from test_framework.wallet_util import (\n+    is_bdb_file,\n+    is_sqlite_file,\n+)\n \n \n class BackwardsCompatibilityTest(BitcoinTestFramework):\n@@ -63,6 +67,24 @@ def setup_nodes(self):\n         self.start_nodes()\n         self.import_deterministic_coinbase_privkeys()\n \n+    def copy_wallets(self, dst_wallets_dir, src_wallets_dir):\n+        for wallet in os.listdir(src_wallets_dir):\n+            if self.options.descriptors:\n+                if wallet.endswith(\"-journal\"):\n+                    # Skip SQLite journal files\n+                    continue\n+                wallet_path = os.path.join(src_wallets_dir, wallet)\n+                if os.path.isfile(wallet_path) and is_sqlite_file(wallet_path):\n+                    shutil.copyfile(\n+                        wallet_path,\n+                        os.path.join(dst_wallets_dir, wallet)\n+                    )\n+                    continue\n+            shutil.copytree(\n+                os.path.join(src_wallets_dir, wallet),\n+                os.path.join(dst_wallets_dir, wallet)\n+            )\n+\n     def run_test(self):\n         self.nodes[0].generatetoaddress(101, self.nodes[0].getnewaddress())\n \n@@ -184,37 +206,17 @@ def run_test(self):\n         node_v18.unloadwallet(\"w2_v18\")\n \n         # Copy wallets to v0.16\n-        for wallet in os.listdir(node_master_wallets_dir):\n-            shutil.copytree(\n-                os.path.join(node_master_wallets_dir, wallet),\n-                os.path.join(node_v16_wallets_dir, wallet)\n-            )\n+        self.copy_wallets(node_v16_wallets_dir, node_master_wallets_dir)\n \n         # Copy wallets to v0.17\n-        for wallet in os.listdir(node_master_wallets_dir):\n-            shutil.copytree(\n-                os.path.join(node_master_wallets_dir, wallet),\n-                os.path.join(node_v17_wallets_dir, wallet)\n-            )\n-        for wallet in os.listdir(node_v18_wallets_dir):\n-            shutil.copytree(\n-                os.path.join(node_v18_wallets_dir, wallet),\n-                os.path.join(node_v17_wallets_dir, wallet)\n-            )\n+        self.copy_wallets(node_v17_wallets_dir, node_master_wallets_dir)\n+        self.copy_wallets(node_v17_wallets_dir, node_v18_wallets_dir)\n \n         # Copy wallets to v0.18\n-        for wallet in os.listdir(node_master_wallets_dir):\n-            shutil.copytree(\n-                os.path.join(node_master_wallets_dir, wallet),\n-                os.path.join(node_v18_wallets_dir, wallet)\n-            )\n+        self.copy_wallets(node_v18_wallets_dir, node_master_wallets_dir)\n \n         # Copy wallets to v0.19\n-        for wallet in os.listdir(node_master_wallets_dir):\n-            shutil.copytree(\n-                os.path.join(node_master_wallets_dir, wallet),\n-                os.path.join(node_v19_wallets_dir, wallet)\n-            )\n+        self.copy_wallets(node_v19_wallets_dir, node_master_wallets_dir)\n \n         if not self.options.descriptors:\n             # Descriptor wallets break compatibility, only run this test for legacy wallet"
      }
    ]
  },
  {
    "sha": "80bd5e6e90ba11c3f5bce1292302bc9d2dc0d64c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MGJkNWU2ZTkwYmExMWMzZjViY2UxMjkyMzAyYmM5ZDJkYzBkNjRj",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-10-28T18:54:17Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-10-28T21:32:16Z"
      },
      "message": "Use a helper function to get wallet file paths",
      "tree": {
        "sha": "6c1d71d0f944456dabcf305e99daa18b3287b718",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6c1d71d0f944456dabcf305e99daa18b3287b718"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/80bd5e6e90ba11c3f5bce1292302bc9d2dc0d64c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80bd5e6e90ba11c3f5bce1292302bc9d2dc0d64c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/80bd5e6e90ba11c3f5bce1292302bc9d2dc0d64c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80bd5e6e90ba11c3f5bce1292302bc9d2dc0d64c/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b118f2d0526f1514bd88ec93e4afb8475dc7c995",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b118f2d0526f1514bd88ec93e4afb8475dc7c995",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b118f2d0526f1514bd88ec93e4afb8475dc7c995"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 17,
      "deletions": 12
    },
    "files": [
      {
        "sha": "a9746009146146433ff9b5ba82dfd7332d21676e",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80bd5e6e90ba11c3f5bce1292302bc9d2dc0d64c/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80bd5e6e90ba11c3f5bce1292302bc9d2dc0d64c/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=80bd5e6e90ba11c3f5bce1292302bc9d2dc0d64c",
        "patch": "@@ -644,6 +644,11 @@ def sync_all(self, nodes=None):\n     def wait_until(self, test_function, timeout=60):\n         return wait_until_helper(test_function, timeout=timeout, timeout_factor=self.options.timeout_factor)\n \n+    def get_wallet_file_path(self, wallets_dir, wallet_name):\n+        wallet_path = os.path.join(wallets_dir, wallet_name)\n+        wallet_path = os.path.join(wallet_path, self.wallet_data_filename)\n+        return wallet_path\n+\n     # Private helper methods. These should not be accessed by the subclass test scripts.\n \n     def _start_logging(self):"
      },
      {
        "sha": "ee3744f476eef1abd4e8cccafc609d3701517647",
        "filename": "test/functional/tool_wallet.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80bd5e6e90ba11c3f5bce1292302bc9d2dc0d64c/test/functional/tool_wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80bd5e6e90ba11c3f5bce1292302bc9d2dc0d64c/test/functional/tool_wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/tool_wallet.py?ref=80bd5e6e90ba11c3f5bce1292302bc9d2dc0d64c",
        "patch": "@@ -255,7 +255,7 @@ def test_salvage(self):\n         self.assert_tool_output('', '-wallet=salvage', 'salvage')\n \n     def run_test(self):\n-        self.wallet_path = os.path.join(self.nodes[0].datadir, self.chain, 'wallets', self.default_wallet_name, self.wallet_data_filename)\n+        self.wallet_path = self.get_wallet_file_path(os.path.join(self.nodes[0].datadir, self.chain, 'wallets'), self.default_wallet_name)\n         self.test_invalid_tool_commands_and_args()\n         # Warning: The following tests are order-dependent.\n         self.test_tool_wallet_info()"
      },
      {
        "sha": "6d5953a54edb87a6907d9f7fc9f8700d4f2a1419",
        "filename": "test/functional/wallet_backup.py",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80bd5e6e90ba11c3f5bce1292302bc9d2dc0d64c/test/functional/wallet_backup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80bd5e6e90ba11c3f5bce1292302bc9d2dc0d64c/test/functional/wallet_backup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_backup.py?ref=80bd5e6e90ba11c3f5bce1292302bc9d2dc0d64c",
        "patch": "@@ -106,9 +106,9 @@ def stop_three(self):\n         self.stop_node(2)\n \n     def erase_three(self):\n-        os.remove(os.path.join(self.nodes[0].datadir, self.chain, 'wallets', self.default_wallet_name, self.wallet_data_filename))\n-        os.remove(os.path.join(self.nodes[1].datadir, self.chain, 'wallets', self.default_wallet_name, self.wallet_data_filename))\n-        os.remove(os.path.join(self.nodes[2].datadir, self.chain, 'wallets', self.default_wallet_name, self.wallet_data_filename))\n+        os.remove(self.get_wallet_file_path(os.path.join(self.nodes[0].datadir, self.chain, 'wallets'), self.default_wallet_name))\n+        os.remove(self.get_wallet_file_path(os.path.join(self.nodes[1].datadir, self.chain, 'wallets'), self.default_wallet_name))\n+        os.remove(self.get_wallet_file_path(os.path.join(self.nodes[2].datadir, self.chain, 'wallets'), self.default_wallet_name))\n \n     def run_test(self):\n         self.log.info(\"Generating initial blockchain\")\n@@ -172,9 +172,9 @@ def run_test(self):\n         shutil.rmtree(os.path.join(self.nodes[2].datadir, self.chain, 'chainstate'))\n \n         # Restore wallets from backup\n-        shutil.copyfile(os.path.join(self.nodes[0].datadir, 'wallet.bak'), os.path.join(self.nodes[0].datadir, self.chain, 'wallets', self.default_wallet_name, self.wallet_data_filename))\n-        shutil.copyfile(os.path.join(self.nodes[1].datadir, 'wallet.bak'), os.path.join(self.nodes[1].datadir, self.chain, 'wallets', self.default_wallet_name, self.wallet_data_filename))\n-        shutil.copyfile(os.path.join(self.nodes[2].datadir, 'wallet.bak'), os.path.join(self.nodes[2].datadir, self.chain, 'wallets', self.default_wallet_name, self.wallet_data_filename))\n+        shutil.copyfile(os.path.join(self.nodes[0].datadir, 'wallet.bak'), self.get_wallet_file_path(os.path.join(self.nodes[0].datadir, self.chain, 'wallets'), self.default_wallet_name))\n+        shutil.copyfile(os.path.join(self.nodes[1].datadir, 'wallet.bak'), self.get_wallet_file_path(os.path.join(self.nodes[1].datadir, self.chain, 'wallets'), self.default_wallet_name))\n+        shutil.copyfile(os.path.join(self.nodes[2].datadir, 'wallet.bak'), self.get_wallet_file_path(os.path.join(self.nodes[2].datadir, self.chain, 'wallets'), self.default_wallet_name))\n \n         self.log.info(\"Re-starting nodes\")\n         self.start_three()\n@@ -211,8 +211,8 @@ def run_test(self):\n \n         # Backup to source wallet file must fail\n         sourcePaths = [\n-            os.path.join(self.nodes[0].datadir, self.chain, 'wallets', self.default_wallet_name, self.wallet_data_filename),\n-            os.path.join(self.nodes[0].datadir, self.chain, '.', 'wallets', self.default_wallet_name, self.wallet_data_filename),\n+            self.get_wallet_file_path(os.path.join(self.nodes[0].datadir, self.chain, 'wallets'), self.default_wallet_name),\n+            self.get_wallet_file_path(os.path.join(self.nodes[0].datadir, self.chain, '.', 'wallets'), self.default_wallet_name),\n             os.path.join(self.nodes[0].datadir, self.chain, 'wallets', self.default_wallet_name),\n             os.path.join(self.nodes[0].datadir, self.chain, 'wallets')]\n "
      },
      {
        "sha": "98a6dcdda0769776d60c99e5565223be9d4dda7d",
        "filename": "test/functional/wallet_hd.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80bd5e6e90ba11c3f5bce1292302bc9d2dc0d64c/test/functional/wallet_hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80bd5e6e90ba11c3f5bce1292302bc9d2dc0d64c/test/functional/wallet_hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_hd.py?ref=80bd5e6e90ba11c3f5bce1292302bc9d2dc0d64c",
        "patch": "@@ -83,7 +83,7 @@ def run_test(self):\n         shutil.rmtree(os.path.join(self.nodes[1].datadir, self.chain, \"chainstate\"))\n         shutil.copyfile(\n             os.path.join(self.nodes[1].datadir, \"hd.bak\"),\n-            os.path.join(self.nodes[1].datadir, self.chain, 'wallets', self.default_wallet_name, self.wallet_data_filename),\n+            self.get_wallet_file_path(os.path.join(self.nodes[1].datadir, self.chain, 'wallets'), self.default_wallet_name),\n         )\n         self.start_node(1)\n \n@@ -111,7 +111,7 @@ def run_test(self):\n         shutil.rmtree(os.path.join(self.nodes[1].datadir, self.chain, \"chainstate\"))\n         shutil.copyfile(\n             os.path.join(self.nodes[1].datadir, \"hd.bak\"),\n-            os.path.join(self.nodes[1].datadir, self.chain, \"wallets\", self.default_wallet_name, self.wallet_data_filename),\n+            self.get_wallet_file_path(os.path.join(self.nodes[1].datadir, self.chain, 'wallets'), self.default_wallet_name),\n         )\n         self.start_node(1, extra_args=self.extra_args[1])\n         self.connect_nodes(0, 1)"
      },
      {
        "sha": "dd1409f9bab0cbdc82fe72427b01a3c3be1e094c",
        "filename": "test/functional/wallet_keypool_topup.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80bd5e6e90ba11c3f5bce1292302bc9d2dc0d64c/test/functional/wallet_keypool_topup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80bd5e6e90ba11c3f5bce1292302bc9d2dc0d64c/test/functional/wallet_keypool_topup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_keypool_topup.py?ref=80bd5e6e90ba11c3f5bce1292302bc9d2dc0d64c",
        "patch": "@@ -29,7 +29,7 @@ def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n \n     def run_test(self):\n-        wallet_path = os.path.join(self.nodes[1].datadir, self.chain, \"wallets\", self.default_wallet_name, self.wallet_data_filename)\n+        wallet_path = self.get_wallet_file_path(os.path.join(self.nodes[1].datadir, self.chain, \"wallets\"), self.default_wallet_name)\n         wallet_backup_path = os.path.join(self.nodes[1].datadir, \"wallet.bak\")\n         self.nodes[0].generate(101)\n "
      }
    ]
  },
  {
    "sha": "4b4885403d435038e3ba2694091dd9b9aa916243",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YjQ4ODU0MDNkNDM1MDM4ZTNiYTI2OTQwOTFkZDliOWFhOTE2MjQz",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-10-28T17:45:52Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-10-28T21:34:44Z"
      },
      "message": "Change sqlite wallets to not use wallet directories\n\nIt isn't necessary to have wallet directories for sqlite wallets, so we\nshould just make single files in the wallets dir.",
      "tree": {
        "sha": "a898d8b1e784c3f3f32a067958ea3c0592070dc6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a898d8b1e784c3f3f32a067958ea3c0592070dc6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4b4885403d435038e3ba2694091dd9b9aa916243",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b4885403d435038e3ba2694091dd9b9aa916243",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4b4885403d435038e3ba2694091dd9b9aa916243",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b4885403d435038e3ba2694091dd9b9aa916243/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "80bd5e6e90ba11c3f5bce1292302bc9d2dc0d64c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80bd5e6e90ba11c3f5bce1292302bc9d2dc0d64c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/80bd5e6e90ba11c3f5bce1292302bc9d2dc0d64c"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 18,
      "deletions": 16
    },
    "files": [
      {
        "sha": "b9072966add0e3a13a87feb3bdbfd4be5aec0420",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b4885403d435038e3ba2694091dd9b9aa916243/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b4885403d435038e3ba2694091dd9b9aa916243/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=4b4885403d435038e3ba2694091dd9b9aa916243",
        "patch": "@@ -8,10 +8,11 @@\n \n #include <string>\n \n-void SplitWalletPath(const fs::path& wallet_path, fs::path& env_directory, std::string& database_filename, const std::string& default_filename)\n+void SplitWalletPath(const fs::path& wallet_path, fs::path& env_directory, std::string& database_filename, const std::string& default_filename, bool default_dir)\n {\n-    if (fs::is_regular_file(wallet_path)) {\n-        // Special case for backwards compatibility: if wallet path points to an\n+    if (fs::is_regular_file(wallet_path) || (!fs::exists(wallet_path) && !default_dir)) {\n+        // For newly created SQLite wallets (!exists && !default_dir): Always make a file at wallet_path\n+        // For BDB Special case for backwards compatibility: if wallet path points to an\n         // existing file, treat it as the path to a BDB data file in a parent\n         // directory that also contains BDB log files.\n         env_directory = wallet_path.parent_path();"
      },
      {
        "sha": "c2cd6975d462d40fee59c3fb24d26e0f7462d567",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b4885403d435038e3ba2694091dd9b9aa916243/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b4885403d435038e3ba2694091dd9b9aa916243/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=4b4885403d435038e3ba2694091dd9b9aa916243",
        "patch": "@@ -19,7 +19,7 @@\n \n struct bilingual_str;\n \n-void SplitWalletPath(const fs::path& wallet_path, fs::path& env_directory, std::string& database_filename, const std::string& default_filename);\n+void SplitWalletPath(const fs::path& wallet_path, fs::path& env_directory, std::string& database_filename, const std::string& default_filename, bool default_dir=true);\n \n /** RAII class that provides access to a WalletDatabase */\n class DatabaseBatch"
      },
      {
        "sha": "5d58f49eed0cab182edfeff84ba55bfa8d01c360",
        "filename": "src/wallet/sqlite.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b4885403d435038e3ba2694091dd9b9aa916243/src/wallet/sqlite.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b4885403d435038e3ba2694091dd9b9aa916243/src/wallet/sqlite.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/sqlite.cpp?ref=4b4885403d435038e3ba2694091dd9b9aa916243",
        "patch": "@@ -570,7 +570,7 @@ bool ExistsSQLiteDatabase(const fs::path& path)\n {\n     fs::path dir;\n     std::string filename;\n-    SplitWalletPath(path, dir, filename, DATABASE_FILENAME);\n+    SplitWalletPath(path, dir, filename, DATABASE_FILENAME, false);\n     const fs::path file = dir / filename;\n     return fs::symlink_status(file).type() == fs::regular_file && IsSQLiteFile(file);\n }\n@@ -579,7 +579,7 @@ std::unique_ptr<SQLiteDatabase> MakeSQLiteDatabase(const fs::path& path, const D\n {\n     fs::path dir;\n     std::string filename;\n-    SplitWalletPath(path, dir, filename, DATABASE_FILENAME);\n+    SplitWalletPath(path, dir, filename, DATABASE_FILENAME, false);\n     const fs::path file = dir / filename;\n     try {\n         auto db = MakeUnique<SQLiteDatabase>(dir, file);"
      },
      {
        "sha": "4a86aaf2a2bdff76401b19085c16f3b200f90190",
        "filename": "test/functional/feature_backwards_compatibility.py",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b4885403d435038e3ba2694091dd9b9aa916243/test/functional/feature_backwards_compatibility.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b4885403d435038e3ba2694091dd9b9aa916243/test/functional/feature_backwards_compatibility.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_backwards_compatibility.py?ref=4b4885403d435038e3ba2694091dd9b9aa916243",
        "patch": "@@ -295,12 +295,12 @@ def run_test(self):\n             assert info['keypoolsize'] == 0\n         else:\n             # Descriptor wallets appear to corrupted wallets to old software\n-            assert_raises_rpc_error(-4, \"Wallet file verification failed: wallet.dat corrupt, salvage failed\", node_v19.loadwallet, \"w1\")\n-            assert_raises_rpc_error(-4, \"Wallet file verification failed: wallet.dat corrupt, salvage failed\", node_v19.loadwallet, \"w2\")\n-            assert_raises_rpc_error(-4, \"Wallet file verification failed: wallet.dat corrupt, salvage failed\", node_v19.loadwallet, \"w3\")\n-            assert_raises_rpc_error(-4, \"Wallet file verification failed: wallet.dat corrupt, salvage failed\", node_v18.loadwallet, \"w1\")\n-            assert_raises_rpc_error(-4, \"Wallet file verification failed: wallet.dat corrupt, salvage failed\", node_v18.loadwallet, \"w2\")\n-            assert_raises_rpc_error(-4, \"Wallet file verification failed: wallet.dat corrupt, salvage failed\", node_v18.loadwallet, \"w3\")\n+            assert_raises_rpc_error(-4, \"Wallet file verification failed: w1 corrupt, salvage failed\", node_v19.loadwallet, \"w1\")\n+            assert_raises_rpc_error(-4, \"Wallet file verification failed: w2 corrupt, salvage failed\", node_v19.loadwallet, \"w2\")\n+            assert_raises_rpc_error(-4, \"Wallet file verification failed: w3 corrupt, salvage failed\", node_v19.loadwallet, \"w3\")\n+            assert_raises_rpc_error(-4, \"Wallet file verification failed: w1 corrupt, salvage failed\", node_v18.loadwallet, \"w1\")\n+            assert_raises_rpc_error(-4, \"Wallet file verification failed: w2 corrupt, salvage failed\", node_v18.loadwallet, \"w2\")\n+            assert_raises_rpc_error(-4, \"Wallet file verification failed: w3 corrupt, salvage failed\", node_v18.loadwallet, \"w3\")\n \n         # Open the wallets in v0.17\n         node_v17.loadwallet(\"w1_v18\")\n@@ -324,9 +324,9 @@ def run_test(self):\n         node_v17.assert_start_raises_init_error([\"-wallet=w3_v18\"], \"Error: Error loading w3_v18: Wallet requires newer version of Bitcoin Core\")\n         if self.options.descriptors:\n             # Descriptor wallets appear to corrupted wallets to old software\n-            node_v17.assert_start_raises_init_error([\"-wallet=w1\"], \"Error: wallet.dat corrupt, salvage failed\")\n-            node_v17.assert_start_raises_init_error([\"-wallet=w2\"], \"Error: wallet.dat corrupt, salvage failed\")\n-            node_v17.assert_start_raises_init_error([\"-wallet=w3\"], \"Error: wallet.dat corrupt, salvage failed\")\n+            node_v17.assert_start_raises_init_error([\"-wallet=w1\"], \"Error: w1 corrupt, salvage failed\")\n+            node_v17.assert_start_raises_init_error([\"-wallet=w2\"], \"Error: w2 corrupt, salvage failed\")\n+            node_v17.assert_start_raises_init_error([\"-wallet=w3\"], \"Error: w3 corrupt, salvage failed\")\n         else:\n             node_v17.assert_start_raises_init_error([\"-wallet=w3\"], \"Error: Error loading w3: Wallet requires newer version of Bitcoin Core\")\n         self.start_node(4)"
      },
      {
        "sha": "9ce48bb1b602a1cb6164ce6a9af4b7e3e45282da",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b4885403d435038e3ba2694091dd9b9aa916243/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b4885403d435038e3ba2694091dd9b9aa916243/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=4b4885403d435038e3ba2694091dd9b9aa916243",
        "patch": "@@ -646,7 +646,8 @@ def wait_until(self, test_function, timeout=60):\n \n     def get_wallet_file_path(self, wallets_dir, wallet_name):\n         wallet_path = os.path.join(wallets_dir, wallet_name)\n-        wallet_path = os.path.join(wallet_path, self.wallet_data_filename)\n+        if not self.options.descriptors or os.path.isdir(wallet_path):\n+            wallet_path = os.path.join(wallet_path, self.wallet_data_filename)\n         return wallet_path\n \n     # Private helper methods. These should not be accessed by the subclass test scripts."
      }
    ]
  }
]