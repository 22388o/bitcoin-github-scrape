fanquake,2019-11-30 17:17:13,"Instead of https://github.com/bitcoin/bitcoin/pull/17639/commits/8c6edc2c7d069a3633042c842d74cd6a999c865f, you can cherry-pick from #17568, which already fixes the uninitialized read issue and adds a test.",https://github.com/bitcoin/bitcoin/pull/17639#issuecomment-559998389,559998389,
practicalswift,2019-11-30 17:22:46,@fanquake Done! :),https://github.com/bitcoin/bitcoin/pull/17639#issuecomment-559999289,559999289,
DrahtBot,2019-11-30 18:33:30,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/17639#issuecomment-560009497,560009497,
fjahr,2019-12-17 00:48:33,"Concept ACK\n\nAlso unfortunately not able to test because of valgrind/macOS shenanigans at the moment.",https://github.com/bitcoin/bitcoin/pull/17639#issuecomment-566319827,566319827,
jonatack,2019-12-17 13:23:16,Would someone please add a `Review Club` label to this PR? Thanks :),https://github.com/bitcoin/bitcoin/pull/17639#issuecomment-566539415,566539415,
practicalswift,2019-12-17 15:19:48,"Welcome all review club members! Unfortunately I cannot attend your meeting today but you should know that I'm a huge fan of what you are doing: by reviewing you're helping to make Bitcoin Core harder, better, faster and stronger! :)\n\nLooking forward to reading your reviews/feedback!\n\nRemember: given enough eyeballs all bugs are shallow :)",https://github.com/bitcoin/bitcoin/pull/17639#issuecomment-566587078,566587078,
practicalswift,2019-12-29 16:08:39,@jonatack Thanks for reviewing. Would you mind re-reviewing the updated version? :),https://github.com/bitcoin/bitcoin/pull/17639#issuecomment-569518952,569518952,
practicalswift,2020-01-08 12:35:27,Rebased! :),https://github.com/bitcoin/bitcoin/pull/17639#issuecomment-572029204,572029204,
practicalswift,2020-02-17 14:04:15,@jonatack No longer using `--quiet` as requested. Would you mind re-reviewing? :),https://github.com/bitcoin/bitcoin/pull/17639#issuecomment-587008770,587008770,
practicalswift,2020-02-17 19:27:03,"Updated. Removed usage of `--exit-on-first-error` and thus the requirement of a very recent `valgrind` version.\n\nAfter thinking about it I came to the conclusion that it is better to optimise for maximum number of `valgrind` testers than optimising for the rare case that a memory error is found.\n\nPlease re-review :)",https://github.com/bitcoin/bitcoin/pull/17639#issuecomment-587129784,587129784,
jonatack,2020-02-19 14:23:50,"ACK 61fdd79 -- see https://gist.github.com/jonatack/1c0e0b9324ee4cc6c6bd6044c0b1c366 for output of running `make check-valgrind`.\n\nThanks to the updated valgrind suppressions in PR #18178 (review welcome), this PR now runs for me with no errors related to our dependencies.\n",https://github.com/bitcoin/bitcoin/pull/17639#issuecomment-588258082,588258082,
practicalswift,2020-03-07 13:16:14,"Any chance we can move forward with this PR?\n\nI'll leave it open for a while to allow for ACK:s and close if no interest is shown :)",https://github.com/bitcoin/bitcoin/pull/17639#issuecomment-596087383,596087383,
practicalswift,2020-03-10 08:12:34,Closing due to lack of interest :),https://github.com/bitcoin/bitcoin/pull/17639#issuecomment-596957206,596957206,
fanquake,2019-12-02 13:45:28,What creates the requirement for `3.14+`?,https://github.com/bitcoin/bitcoin/pull/17639#discussion_r352601943,352601943,src/Makefile.test.include
practicalswift,2019-12-02 13:57:22,`--exit-on-first-error` was introduced in Valgrind 3.14.,https://github.com/bitcoin/bitcoin/pull/17639#discussion_r352607751,352607751,src/Makefile.test.include
MarcoFalke,2019-12-03 15:59:59,"I'd rather keep running the tests in parallel, even more so that valgrind causes a slowdown. See https://github.com/bitcoin/bitcoin/blob/master/ci/test/wrap-valgrind.sh",https://github.com/bitcoin/bitcoin/pull/17639#discussion_r353266552,353266552,src/Makefile.test.include
practicalswift,2019-12-05 09:56:19,"I'm not sure how to do run the tests in parallel under Valgrind in a way that a.) prints generated suppressions to the user, and b.) does not potentially introduce false positives due to resource exhaustion. Perhaps introducing parallelism can be tackled in a follow up PR?",https://github.com/bitcoin/bitcoin/pull/17639#discussion_r354206723,354206723,src/Makefile.test.include
jonatack,2019-12-18 12:15:04,"nits noticed while testing on the command line:\n\n- I think ""quite a"" is a bit verbose here and in line 440 -- ""this may take a while"" on its own is fine\n\n- s/while .../while.../\n",https://github.com/bitcoin/bitcoin/pull/17639#discussion_r359311985,359311985,src/Makefile.test.include
jonatack,2019-12-18 12:47:03,"""~50x slowdown"": looking through the manual and SE comments, I see a wide range of perf reports. The manual's [Running your program under Memcheck](http://valgrind.org/docs/manual/quick-start.html#quick-start.mcrun) section states ""Your program will run much slower (eg. 20 to 30 times) than normal, and use a lot more memory."" Replies to [this SE question](https://stackoverflow.com/questions/293656",https://github.com/bitcoin/bitcoin/pull/17639#discussion_r359323950,359323950,src/Makefile.test.include
MarcoFalke,2019-12-18 18:25:10,"a) The suppression should be printed when the test case fails, no?\n\nb) I think we can't prevent OOM in general due to users setting too high `-j` in `make check`. Do you have any hints when this could lead to false positives instead of a killed process or frozen machine?",https://github.com/bitcoin/bitcoin/pull/17639#discussion_r359498943,359498943,src/Makefile.test.include
MarcoFalke,2019-12-18 18:38:20,"Also, note that the same OOM ""protection"" does not exist for the functional tests when run with `--valgrind` or so",https://github.com/bitcoin/bitcoin/pull/17639#discussion_r359504975,359504975,src/Makefile.test.include
practicalswift,2019-12-29 16:02:06,"Yes, that's better. Thanks! Now updated. Please re-review :)",https://github.com/bitcoin/bitcoin/pull/17639#discussion_r361858585,361858585,src/Makefile.test.include
practicalswift,2019-12-29 16:02:22,That's better. Thanks! Now updated. Please re-review :),https://github.com/bitcoin/bitcoin/pull/17639#discussion_r361858598,361858598,src/Makefile.test.include
practicalswift,2019-12-29 16:08:03,I think these things would be nice to have but I'm afraid I won't have time to add that to this PR any time soon. I suggest we go with this simple version to start with and then someone can add parallellism in a follow-up PR. Makes sense? :),https://github.com/bitcoin/bitcoin/pull/17639#discussion_r361858986,361858986,src/Makefile.test.include
jonatack,2019-12-29 16:35:16,"To have valgrind make it through the unit tests, I had to debug rather extensively my suppressions file by running  `valgrind --gen-suppressions=all --verbose --exit-on-first-error=yes --error-exitcode=1 --suppressions=contrib/valgrind.supp src/test/test_bitcoin --log_level=test_suite` and adding suppressions. It takes 60-90 minutes for a run, so it's a long process..\n\n- Is the suppressions fi",https://github.com/bitcoin/bitcoin/pull/17639#discussion_r361860544,361860544,src/Makefile.test.include
practicalswift,2019-12-29 17:07:49,"@jonatack \n\nI don't think you're doing anything wrong: Valgrind is super slow :)\n\n> Is the suppressions file for a project supposed to be portable across platforms, or is it normal for it to be a config adventure for each user?\n\nI think the current set of suppressions has been tested and updated by at least me and @MarcoFalke for various configurations, but more additions are welcome :",https://github.com/bitcoin/bitcoin/pull/17639#discussion_r361862030,361862030,src/Makefile.test.include
jonatack,2020-02-17 13:45:02,"Retested this PR and wonder if it would not be better to remove the --quiet flags... `make check` isn't quiet either, `make check-valgrind` takes a long time (~90 minutes) to run so some output is reassuring, and the additional output is useful:\n```\nUsing the valgrind memory error detector: expect a 10-50x slowdown and ~2x memory usage. valgrind 3.14 or later required.\nRunning test/test_bitc",https://github.com/bitcoin/bitcoin/pull/17639#discussion_r380189460,380189460,src/Makefile.test.include
practicalswift,2020-02-17 14:03:54,Adjusted accordingly :),https://github.com/bitcoin/bitcoin/pull/17639#discussion_r380199512,380199512,src/Makefile.test.include
jonatack,2020-02-17 15:46:07,"nit: lines 629-631 don't appear to be in a conditional, unless I'm misreading; should they be indented?",https://github.com/bitcoin/bitcoin/pull/17639#discussion_r380254712,380254712,src/Makefile.test.include
practicalswift,2020-02-17 19:09:12,This is not indentation due to being a conditional. It is the standard `Makefile` indentation we're following - see `%.cpp.test: %.cpp` indentation below as an example :),https://github.com/bitcoin/bitcoin/pull/17639#discussion_r380334348,380334348,src/Makefile.test.include
