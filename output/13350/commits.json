[
  {
    "sha": "2ce81867b29f96b4f9da88030d9530d255d7b11c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyY2U4MTg2N2IyOWY5NmI0ZjlkYTg4MDMwZDk1MzBkMjU1ZDdiMTFj",
    "commit": {
      "author": {
        "name": "Lowell Manners",
        "email": "lowellmanners@gmail.com",
        "date": "2018-05-30T18:44:20Z"
      },
      "committer": {
        "name": "lmanners",
        "email": "lowellmanners@gmail.com",
        "date": "2018-05-30T19:31:09Z"
      },
      "message": "[tests] Add logging to provide anchor points when debugging failures.\n\nrefs #12453",
      "tree": {
        "sha": "d75a76c83c73b9d1222941accadf26ac11325e9e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d75a76c83c73b9d1222941accadf26ac11325e9e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2ce81867b29f96b4f9da88030d9530d255d7b11c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ce81867b29f96b4f9da88030d9530d255d7b11c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2ce81867b29f96b4f9da88030d9530d255d7b11c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ce81867b29f96b4f9da88030d9530d255d7b11c/comments",
    "author": {
      "login": "lmanners",
      "id": 834253,
      "node_id": "MDQ6VXNlcjgzNDI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/834253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lmanners",
      "html_url": "https://github.com/lmanners",
      "followers_url": "https://api.github.com/users/lmanners/followers",
      "following_url": "https://api.github.com/users/lmanners/following{/other_user}",
      "gists_url": "https://api.github.com/users/lmanners/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lmanners/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lmanners/subscriptions",
      "organizations_url": "https://api.github.com/users/lmanners/orgs",
      "repos_url": "https://api.github.com/users/lmanners/repos",
      "events_url": "https://api.github.com/users/lmanners/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lmanners/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "lmanners",
      "id": 834253,
      "node_id": "MDQ6VXNlcjgzNDI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/834253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lmanners",
      "html_url": "https://github.com/lmanners",
      "followers_url": "https://api.github.com/users/lmanners/followers",
      "following_url": "https://api.github.com/users/lmanners/following{/other_user}",
      "gists_url": "https://api.github.com/users/lmanners/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lmanners/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lmanners/subscriptions",
      "organizations_url": "https://api.github.com/users/lmanners/orgs",
      "repos_url": "https://api.github.com/users/lmanners/repos",
      "events_url": "https://api.github.com/users/lmanners/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lmanners/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6738813bcbb730b5a19e67482b6612d568c22699",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6738813bcbb730b5a19e67482b6612d568c22699",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6738813bcbb730b5a19e67482b6612d568c22699"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 13,
      "deletions": 3
    },
    "files": [
      {
        "sha": "7ee8168e2f00d11d25c163971d0946acc591daec",
        "filename": "test/functional/p2p_sendheaders.py",
        "status": "modified",
        "additions": 13,
        "deletions": 3,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ce81867b29f96b4f9da88030d9530d255d7b11c/test/functional/p2p_sendheaders.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ce81867b29f96b4f9da88030d9530d255d7b11c/test/functional/p2p_sendheaders.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_sendheaders.py?ref=2ce81867b29f96b4f9da88030d9530d255d7b11c",
        "patch": "@@ -288,6 +288,7 @@ def test_nonnull_locators(self, test_node, inv_node):\n         # 1. Mine a block; expect inv announcements each time\n         self.log.info(\"Part 1: headers don't start before sendheaders message...\")\n         for i in range(4):\n+            self.log.debug(\"Part 1.{}: starting...\".format(i))\n             old_tip = tip\n             tip = self.mine_blocks(1)\n             inv_node.check_last_inv_announcement(inv=[tip])\n@@ -335,11 +336,13 @@ def test_nonnull_locators(self, test_node, inv_node):\n         height = self.nodes[0].getblockcount() + 1\n         block_time += 10  # Advance far enough ahead\n         for i in range(10):\n+            self.log.debug(\"Part 2.{}: starting...\".format(i))\n             # Mine i blocks, and alternate announcing either via\n             # inv (of tip) or via headers. After each, new blocks\n             # mined by the node should successfully be announced\n             # with block header, even though the blocks are never requested\n             for j in range(2):\n+                self.log.debug(\"Part 2.{}.{}: starting...\".format(i, j))\n                 blocks = []\n                 for b in range(i + 1):\n                     blocks.append(create_block(tip, create_coinbase(height), block_time))\n@@ -386,6 +389,7 @@ def test_nonnull_locators(self, test_node, inv_node):\n         # PART 3.  Headers announcements can stop after large reorg, and resume after\n         # getheaders or inv from peer.\n         for j in range(2):\n+            self.log.debug(\"Part 3.{}: starting...\".format(j))\n             # First try mining a reorg that can propagate with header announcement\n             new_block_hashes = self.mine_reorg(length=7)\n             tip = new_block_hashes[-1]\n@@ -412,23 +416,28 @@ def test_nonnull_locators(self, test_node, inv_node):\n             test_node.wait_for_block(new_block_hashes[-1])\n \n             for i in range(3):\n+                self.log.debug(\"Part 3.{}.{}: starting...\".format(j, i))\n+\n                 # Mine another block, still should get only an inv\n                 tip = self.mine_blocks(1)\n                 inv_node.check_last_inv_announcement(inv=[tip])\n                 test_node.check_last_inv_announcement(inv=[tip])\n                 if i == 0:\n-                    self.log.debug(\"Just get the data -- shouldn't cause headers announcements to resume\")\n+                    # Just get the data -- shouldn't cause headers announcements to resume\n                     test_node.send_get_data([tip])\n                     test_node.wait_for_block(tip)\n                 elif i == 1:\n-                    self.log.debug(\"Send a getheaders message that shouldn't trigger headers announcements to resume (best header sent will be too old)\")\n+                    # Send a getheaders message that shouldn't trigger headers announcements\n+                    # to resume (best header sent will be too old)\n                     test_node.send_get_headers(locator=[fork_point], hashstop=new_block_hashes[1])\n                     test_node.send_get_data([tip])\n                     test_node.wait_for_block(tip)\n                 elif i == 2:\n+                    # This time, try sending either a getheaders to trigger resumption\n+                    # of headers announcements, or mine a new block and inv it, also\n+                    # triggering resumption of headers announcements.\n                     test_node.send_get_data([tip])\n                     test_node.wait_for_block(tip)\n-                    self.log.debug(\"This time, try sending either a getheaders to trigger resumption of headers announcements, or mine a new block and inv it, also triggering resumption of headers announcements.\")\n                     if j == 0:\n                         test_node.send_get_headers(locator=[tip], hashstop=0)\n                         test_node.sync_with_ping()\n@@ -532,6 +541,7 @@ def test_nonnull_locators(self, test_node, inv_node):\n         # First we test that receipt of an unconnecting header doesn't prevent\n         # chain sync.\n         for i in range(10):\n+            self.log.debug(\"Part 5.{}: starting...\".format(i))\n             test_node.last_message.pop(\"getdata\", None)\n             blocks = []\n             # Create two more blocks."
      }
    ]
  }
]