petertodd,2017-02-27T01:43:09Z,"Given how few lines of code this requires and how easy it is to independently calculate, concept ACK as a quick fix.",https://github.com/bitcoin/bitcoin/pull/9871#issuecomment-282608513,282608513,
da2ce7,2017-02-27T04:10:33Z,"Creating a 'git-sha512-treehashes.txt' file in the root folder of the repo.  That is a list of every sha512 tree hash for every merge commit (in this reop history).\n\nEach new merge commit should append it's sha512-tree-hash to this file.  This would make falsifying sha1 root hash far-harder as modifying any file will update the root-hash from two different locations.",https://github.com/bitcoin/bitcoin/pull/9871#issuecomment-282623859,282623859,
TheBlueMatt,2017-02-27T04:19:21Z,"Hmm, what we really need to do is have a second PGP signature over just this hash in the commit message that can be verified completely independently from git.\n\nOn February 26, 2017 8:31:24 PM EST, Pieter Wuille <notifications@github.com> wrote:\n>This adds a SHA512 hash of the resulting merged tree to merge commit\n>messages. This may or may not make SHA1 collision attacks harder (since\n>the G",https://github.com/bitcoin/bitcoin/pull/9871#issuecomment-282624637,282624637,
petertodd,2017-02-27T04:37:44Z,"@TheBlueMatt The PGP signature on a git commit signs the entire commit object, including the message and thus SHA512 hash. So the SHA512 tree hash can be verified directly; you don't need another PGP signature.",https://github.com/bitcoin/bitcoin/pull/9871#issuecomment-282626312,282626312,
TheBlueMatt,2017-02-27T04:41:43Z,"@petertodd oh? IIRC it just signs a few SHA1 hashes, not the message directly.\n\nOn February 26, 2017 11:37:48 PM EST, Peter Todd <notifications@github.com> wrote:\n>@TheBlueMatt The PGP signature on a git commit signs the entire commit\n>object, including the message and thus SHA512 hash. So the SHA512 tree\n>hash can be verified directly; you don't need another PGP signature.\n>\n>-- \n>You are",https://github.com/bitcoin/bitcoin/pull/9871#issuecomment-282626730,282626730,
petertodd,2017-02-27T04:48:31Z,"@TheBlueMatt Nope, look at my OpenTimestamps code to timestamp git commits: https://github.com/opentimestamps/opentimestamps-client/blob/master/ots-git-gpg-wrapper#L87",https://github.com/bitcoin/bitcoin/pull/9871#issuecomment-282627373,282627373,
sipa,2017-02-27T04:50:47Z,"It signs the SHA1 hash of the entire commit object (excluding the\nsignature, of course).\n",https://github.com/bitcoin/bitcoin/pull/9871#issuecomment-282627584,282627584,
petertodd,2017-02-27T04:53:29Z,"@sipa Nope, that's simply not how git works. The commit object itself is what's piped to GnuPG, not just the hash of that object.",https://github.com/bitcoin/bitcoin/pull/9871#issuecomment-282627842,282627842,
sipa,2017-02-27T04:54:40Z,"@petertodd I'm aware. But GnuPG then takes a SHA1 hash of that. It's hardcoded by git to use SHA1, I believe.",https://github.com/bitcoin/bitcoin/pull/9871#issuecomment-282627972,282627972,
petertodd,2017-02-27T04:55:47Z,"@sipa GnuPG uses whatever hash algorithm you've told it to use; defaults used to be SHA1, but that's both easy to change, and IIRC the default is now SHA256. EDIT: Just checked with 1.4.18, default is now SHA256.",https://github.com/bitcoin/bitcoin/pull/9871#issuecomment-282628067,282628067,
sipa,2017-02-27T04:58:58Z,"@petertodd I don't think so (but I'd be glad to be wrong). Look at the actual data with `git cat-file -p <commit>`. It does not include the otherwise mandatory hash type line, so I assume gpg prepends that before verification. That can't work if it's anything but the default. git does not use detached signatures.",https://github.com/bitcoin/bitcoin/pull/9871#issuecomment-282628375,282628375,
petertodd,2017-02-27T05:00:44Z,@sipa It's missing because it's not a clearsigned signature; it's an ascii encoded detached signature.,https://github.com/bitcoin/bitcoin/pull/9871#issuecomment-282628568,282628568,
sipa,2017-02-27T05:01:55Z,"Hmm, I read conflicting information. I hope I'm wrong.",https://github.com/bitcoin/bitcoin/pull/9871#issuecomment-282628705,282628705,
petertodd,2017-02-27T05:04:05Z,"@sipa Don't worry, you are wrong. :)\n\nLike I said above, look at the git integration code I linked above from the OpenTimestamps client. Notably, the command line flags -bsau are passed to gpg by git when signing, which creates an ascii-encoded detached signature.",https://github.com/bitcoin/bitcoin/pull/9871#issuecomment-282628938,282628938,
dcousens,2017-02-27T05:08:33Z,"Relevant https://stackoverflow.com/questions/23584990/what-data-is-being-signed-when-you-git-commit-gpg-sign-key-id?\n\nIt doesn't look like Git uses detached signatures?",https://github.com/bitcoin/bitcoin/pull/9871#issuecomment-282629375,282629375,
petertodd,2017-02-27T05:20:48Z,@dcousens They're talking about the equivalent of segwit vs how Bitcoin works now; it's not relevant to what we're talking about here.,https://github.com/bitcoin/bitcoin/pull/9871#issuecomment-282630655,282630655,
dcousens,2017-02-27T05:23:32Z,"@petertodd no worries,  did `git` change since that SO question or was your comment noting that the GPG signing process used here (in `bitcoin/bitcoin`) is different?\n\nFWIW,  I also saw https://grimoire.ca/git/detached-sigs",https://github.com/bitcoin/bitcoin/pull/9871#issuecomment-282630932,282630932,
petertodd,2017-02-27T05:25:27Z,"@dcousens The ""detached sigs"" your links are referring to isn't the same thing as the ""detached sigs"" we're talking about above.",https://github.com/bitcoin/bitcoin/pull/9871#issuecomment-282631156,282631156,
sipa,2017-02-27T05:41:29Z,"Cool, so this is much more useful than I thought :)",https://github.com/bitcoin/bitcoin/pull/9871#issuecomment-282632949,282632949,
achow101,2017-02-27T05:44:07Z,"So as long as the merge commit signers use SHA512 (or something like that, maybe SHA256) for GPG this solution is essentially perfect (besides git upgrading to a new hash function).\n\nAnd for those who care, [this is where git calls gpg for signing](https://github.com/git/git/blob/master/gpg-interface.c#L153). ",https://github.com/bitcoin/bitcoin/pull/9871#issuecomment-282633294,282633294,
laanwj,2017-02-27T07:18:54Z,"I'm not sure how this works: `git ls-tree --full-tree -r --name-only HEAD` returns a list of filenames. Is it enough assurance to hash that, you don't need the file contents?\n\nTravis fails are, as usual, unrelated.",https://github.com/bitcoin/bitcoin/pull/9871#issuecomment-282645504,282645504,
sipa,2017-02-27T07:21:35Z,"I read in the actual files, and hash those, and then hash the result as like the result of sha512sum (look at the command line).",https://github.com/bitcoin/bitcoin/pull/9871#issuecomment-282645875,282645875,
achow101,2017-02-27T07:22:57Z,@laanwj it does that command to grab the list of files. Then it opens each file in the list and hashes it.,https://github.com/bitcoin/bitcoin/pull/9871#issuecomment-282646059,282646059,
laanwj,2017-02-27T07:27:16Z,"> I read in the actual files, and hash those, and then hash the result as like the result of sha512sum (look at the command line).\n\nOh, then things are alright again, thanks :)\n\nGoing to test this.\n",https://github.com/bitcoin/bitcoin/pull/9871#issuecomment-282646688,282646688,
laanwj,2017-02-27T07:48:39Z,Tested in: https://github.com/bitcoin/bitcoin/commit/c7e57ce98154bccc0941f078296ba7b2eaf23e90,https://github.com/bitcoin/bitcoin/pull/9871#issuecomment-282649868,282649868,
MarcoFalke,2017-02-27T14:31:06Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/9871#issuecomment-282735901,282735901,
achow101,2017-02-27T16:05:55Z,utACK fa89670,https://github.com/bitcoin/bitcoin/pull/9871#issuecomment-282763971,282763971,
TheBlueMatt,2017-02-27T17:09:41Z,"We should probably have some better handling for symlinks, no?",https://github.com/bitcoin/bitcoin/pull/9871#issuecomment-282784056,282784056,
sipa,2017-02-28T08:40:32Z,"@TheBlueMatt I think that may be overkill, but ok... how would you construct something that's easily shell-verifiable?",https://github.com/bitcoin/bitcoin/pull/9871#issuecomment-282977165,282977165,
laanwj,2017-02-28T10:53:10Z,"> We should probably have some better handling for symlinks, no?\n\nWhat about just rejecting symlinks? We don't use them in this repository and probably shouldn't as not all OSes have that concept.",https://github.com/bitcoin/bitcoin/pull/9871#issuecomment-283007962,283007962,
TheBlueMatt,2017-02-28T14:12:53Z,"@sipa not sure about shell-verifiable, but git-cat has some symlinks options. I'm more than happy to reject them wholesale, however, given the dubious value and obvious annoyance/risk.\n\nOn February 28, 2017 5:53:15 AM EST, ""Wladimir J. van der Laan"" <notifications@github.com> wrote:\n>> We should probably have some better handling for symlinks, no?\n>\n>What about just rejecting symlinks? We don",https://github.com/bitcoin/bitcoin/pull/9871#issuecomment-283049112,283049112,
petertodd,2017-03-01T01:23:44Z,"ACK to rejecting symlinks.\n\nWe don't need to go overkill here and make this a scheme every project could adopt.",https://github.com/bitcoin/bitcoin/pull/9871#issuecomment-283215604,283215604,
laanwj,2017-03-01T09:03:17Z,I'm just going to merge this - this is a nice and simple change that alleviates the direct worries about SHA1 compromise. More advanced things or functionality to reject symlinks can be added to the script later.,https://github.com/bitcoin/bitcoin/pull/9871#issuecomment-283283451,283283451,
kallewoof,2017-02-27T04:31:06Z,"Nit: use `with` instead of `open`/`close`:\n```Python\nwith open(f, 'rb') as fi:\n    while True:\n        piece = fi.read(65536)\n        if piece:\n            intern.update(piece)\n        else:\n            break\n```\n",https://github.com/bitcoin/bitcoin/pull/9871#discussion_r103135285,103135285,contrib/devtools/github-merge.py
MarcoFalke,2017-02-27T14:22:40Z,"Why is the above call to tree_sha512sum() guarded by a try except clause and this one is not?\n\nAnyway, I think the right place to put the second check would be `verify-commits.sh`.",https://github.com/bitcoin/bitcoin/pull/9871#discussion_r103215799,103215799,contrib/devtools/github-merge.py
