sipa,2014-12-04T00:18:27Z,I don't think makes sense without guarantee that even the API remains stable.\n,https://github.com/bitcoin/bitcoin/pull/5416#issuecomment-65517051,65517051,
luke-jr,2014-12-04T05:35:31Z,"@sipa Lots of libraries don't have stable APIs... The only reason this is risky/questionable in our case is the consensus-critical nature of it, but since we maintain libsecp256k1 anyway (unlike LevelDB), that risk is IMO much smaller (the unstable API actually helps for this).\n",https://github.com/bitcoin/bitcoin/pull/5416#issuecomment-65540136,65540136,
jonasschnelli,2014-12-04T06:50:04Z,"IMO: this critical library should not be linked against a system install lib. Security: control your stack.\nEven if sipa/core-devs maintains it, it throws over the whole deterministic build system in case of critical crypto functions.\n",https://github.com/bitcoin/bitcoin/pull/5416#issuecomment-65544835,65544835,
luke-jr,2014-12-04T06:51:49Z,@jonasschnelli Obviously we won't be using this in the deterministic binaries. It's also disabled by default and has a big fat warning label on it.\n,https://github.com/bitcoin/bitcoin/pull/5416#issuecomment-65544940,65544940,
jonasschnelli,2014-12-04T07:02:02Z,"@luke-jr right. My fault. This won't affect the gitian part, right. Oversaw the warning as well. Looks good.\n",https://github.com/bitcoin/bitcoin/pull/5416#issuecomment-65545588,65545588,
laanwj,2014-12-04T13:21:07Z,NACK. Same reasoning as for leveldb but even stronger. The consensus code\nmust stay self-contained.\n,https://github.com/bitcoin/bitcoin/pull/5416#issuecomment-65630311,65630311,
sipa,2014-12-04T13:27:20Z,"@laanwj while I agree about not doing this, currently libsecp256k1 isn't used in consensus code.\n",https://github.com/bitcoin/bitcoin/pull/5416#issuecomment-65630996,65630996,
laanwj,2014-12-04T14:25:02Z,I know. But that was the plan right?\n\nI don't see how that's an argument for this. You want to merge this and than remove it again once it is used for verification/consensus?\n,https://github.com/bitcoin/bitcoin/pull/5416#issuecomment-65638445,65638445,
sipa,2014-12-04T14:30:09Z,"No, I don't want to merge this. I'm just saying that currently the consensus argument is not (yet) valid :)\n",https://github.com/bitcoin/bitcoin/pull/5416#issuecomment-65639171,65639171,
jgarzik,2014-12-04T14:32:57Z,-1  I don't see why this additional option should be supported.\n,https://github.com/bitcoin/bitcoin/pull/5416#issuecomment-65639585,65639585,
paveljanik,2014-12-04T14:36:34Z,I'd also prefer only one: --with-system-libs. This would allow distro packagers to make clean packages. But one such option is enough ;-)\n,https://github.com/bitcoin/bitcoin/pull/5416#issuecomment-65640133,65640133,
jgarzik,2014-12-04T14:42:42Z,"@paveljanik Based on practical experience, that would be dangerous.  Packagers would ignorantly enable that by default, without understanding the consequences.\n",https://github.com/bitcoin/bitcoin/pull/5416#issuecomment-65641025,65641025,
paveljanik,2014-12-04T14:54:38Z,"I think it is better to teach packagers to do it properly than package glibc/openssl/boost inside Bitcoin Core. And of course, they will surely modify our code to use system libs anyway... Thus it is much cleaner to do that even in upstream where they all can share their code/changes.\n",https://github.com/bitcoin/bitcoin/pull/5416#issuecomment-65642847,65642847,
paveljanik,2014-12-04T15:06:31Z,... and we can sanity check the libs at the startup as we already do.\n,https://github.com/bitcoin/bitcoin/pull/5416#issuecomment-65644649,65644649,
laanwj,2014-12-04T15:09:43Z,Forget teaching packagers anything. There are so many distros that we'd have to start a packager training school. Just making it hard to do is a good signal IMO.\n,https://github.com/bitcoin/bitcoin/pull/5416#issuecomment-65645207,65645207,
rebroad,2016-03-01T16:12:34Z,"@luke-jr, when would/should this option be used please?\n",https://github.com/bitcoin/bitcoin/pull/5416#issuecomment-190788771,190788771,
