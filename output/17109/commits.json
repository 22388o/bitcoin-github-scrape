[
  {
    "sha": "575383b3e1361e60ba88738a34d92b1662f915a7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NzUzODNiM2UxMzYxZTYwYmE4ODczOGEzNGQ5MmIxNjYyZjkxNWE3",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-10-02T08:01:27Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-12-06T09:14:03Z"
      },
      "message": "tests: Add corpora suppression (FUZZERS_MISSING_CORPORA) for fuzzers missing in https://github.com/bitcoin-core/qa-assets/tree/master/fuzz_seed_corpus",
      "tree": {
        "sha": "63c069d4ce6b0e23871e2dd6984ecfeb084a8140",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/63c069d4ce6b0e23871e2dd6984ecfeb084a8140"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/575383b3e1361e60ba88738a34d92b1662f915a7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/575383b3e1361e60ba88738a34d92b1662f915a7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/575383b3e1361e60ba88738a34d92b1662f915a7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/575383b3e1361e60ba88738a34d92b1662f915a7/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cb11324a63ef10475bfc4d8e45148d5ae6f3e71e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb11324a63ef10475bfc4d8e45148d5ae6f3e71e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cb11324a63ef10475bfc4d8e45148d5ae6f3e71e"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "080f565f9b80a20d4c10fd63b40b5ed63b5e6546",
        "filename": "test/fuzz/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/575383b3e1361e60ba88738a34d92b1662f915a7/test/fuzz/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/575383b3e1361e60ba88738a34d92b1662f915a7/test/fuzz/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fuzz/test_runner.py?ref=575383b3e1361e60ba88738a34d92b1662f915a7",
        "patch": "@@ -20,6 +20,7 @@\n     \"block_header_and_short_txids_deserialize\",\n     \"fee_rate_deserialize\",\n     \"flat_file_pos_deserialize\",\n+    \"integer\",\n     \"key_origin_info_deserialize\",\n     \"merkle_block_deserialize\",\n     \"out_point_deserialize\","
      }
    ]
  },
  {
    "sha": "597d10ceb9fd2a118c7e551cd6263379691d9295",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1OTdkMTBjZWI5ZmQyYTExOGM3ZTU1MWNkNjI2MzM3OTY5MWQ5Mjk1",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-10-09T15:51:32Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-12-06T09:14:17Z"
      },
      "message": "tests: Add fuzzing harness for various functions consuming only integrals",
      "tree": {
        "sha": "8fcb609fbce9b034427ac85e229e8e802ac8bd77",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8fcb609fbce9b034427ac85e229e8e802ac8bd77"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/597d10ceb9fd2a118c7e551cd6263379691d9295",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/597d10ceb9fd2a118c7e551cd6263379691d9295",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/597d10ceb9fd2a118c7e551cd6263379691d9295",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/597d10ceb9fd2a118c7e551cd6263379691d9295/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "575383b3e1361e60ba88738a34d92b1662f915a7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/575383b3e1361e60ba88738a34d92b1662f915a7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/575383b3e1361e60ba88738a34d92b1662f915a7"
      }
    ],
    "stats": {
      "total": 134,
      "additions": 134,
      "deletions": 0
    },
    "files": [
      {
        "sha": "70b72b5c0e0e7c3669f9e5360516d0642af2bdd1",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/597d10ceb9fd2a118c7e551cd6263379691d9295/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/597d10ceb9fd2a118c7e551cd6263379691d9295/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=597d10ceb9fd2a118c7e551cd6263379691d9295",
        "patch": "@@ -26,6 +26,7 @@ FUZZ_TARGETS = \\\n   test/fuzz/eval_script \\\n   test/fuzz/fee_rate_deserialize \\\n   test/fuzz/flat_file_pos_deserialize \\\n+  test/fuzz/integer \\\n   test/fuzz/inv_deserialize \\\n   test/fuzz/key_origin_info_deserialize \\\n   test/fuzz/merkle_block_deserialize \\\n@@ -365,6 +366,12 @@ test_fuzz_eval_script_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_eval_script_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n test_fuzz_eval_script_LDADD = $(FUZZ_SUITE_LD_COMMON)\n \n+test_fuzz_integer_SOURCES = $(FUZZ_SUITE) test/fuzz/integer.cpp\n+test_fuzz_integer_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_integer_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_integer_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_integer_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+\n test_fuzz_txoutcompressor_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n test_fuzz_txoutcompressor_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DTXOUTCOMPRESSOR_DESERIALIZE=1\n test_fuzz_txoutcompressor_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)"
      },
      {
        "sha": "723938bcdb7b13447ad1470cf59836ed6079f107",
        "filename": "src/test/fuzz/integer.cpp",
        "status": "added",
        "additions": 127,
        "deletions": 0,
        "changes": 127,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/597d10ceb9fd2a118c7e551cd6263379691d9295/src/test/fuzz/integer.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/597d10ceb9fd2a118c7e551cd6263379691d9295/src/test/fuzz/integer.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/integer.cpp?ref=597d10ceb9fd2a118c7e551cd6263379691d9295",
        "patch": "@@ -0,0 +1,127 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <arith_uint256.h>\n+#include <compressor.h>\n+#include <consensus/merkle.h>\n+#include <core_io.h>\n+#include <crypto/common.h>\n+#include <crypto/siphash.h>\n+#include <key_io.h>\n+#include <memusage.h>\n+#include <netbase.h>\n+#include <policy/settings.h>\n+#include <pow.h>\n+#include <pubkey.h>\n+#include <rpc/util.h>\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <serialize.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <uint256.h>\n+#include <util/strencodings.h>\n+#include <util/system.h>\n+#include <util/time.h>\n+\n+#include <cassert>\n+#include <limits>\n+#include <vector>\n+\n+void initialize()\n+{\n+    SelectParams(CBaseChainParams::REGTEST);\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    if (buffer.size() < sizeof(uint256) + sizeof(uint160)) {\n+        return;\n+    }\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const uint256 u256(fuzzed_data_provider.ConsumeBytes<unsigned char>(sizeof(uint256)));\n+    const uint160 u160(fuzzed_data_provider.ConsumeBytes<unsigned char>(sizeof(uint160)));\n+    const uint64_t u64 = fuzzed_data_provider.ConsumeIntegral<uint64_t>();\n+    const int64_t i64 = fuzzed_data_provider.ConsumeIntegral<int64_t>();\n+    const uint32_t u32 = fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+    const int32_t i32 = fuzzed_data_provider.ConsumeIntegral<int32_t>();\n+    const uint16_t u16 = fuzzed_data_provider.ConsumeIntegral<uint16_t>();\n+    const int16_t i16 = fuzzed_data_provider.ConsumeIntegral<int16_t>();\n+    const uint8_t u8 = fuzzed_data_provider.ConsumeIntegral<uint8_t>();\n+    const int8_t i8 = fuzzed_data_provider.ConsumeIntegral<int8_t>();\n+    // We cannot assume a specific value of std::is_signed<char>::value:\n+    // ConsumeIntegral<char>() instead of casting from {u,}int8_t.\n+    const char ch = fuzzed_data_provider.ConsumeIntegral<char>();\n+\n+    const Consensus::Params& consensus_params = Params().GetConsensus();\n+    (void)CheckProofOfWork(u256, u32, consensus_params);\n+    (void)CompressAmount(u64);\n+    static const uint256 u256_min(uint256S(\"0000000000000000000000000000000000000000000000000000000000000000\"));\n+    static const uint256 u256_max(uint256S(\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"));\n+    const std::vector<uint256> v256{u256, u256_min, u256_max};\n+    (void)ComputeMerkleRoot(v256);\n+    (void)CountBits(u64);\n+    (void)DecompressAmount(u64);\n+    (void)FormatISO8601Date(i64);\n+    (void)FormatISO8601DateTime(i64);\n+    (void)GetSizeOfCompactSize(u64);\n+    (void)GetSpecialScriptSize(u32);\n+    // (void)GetVirtualTransactionSize(i64, i64); // function defined only for a subset of int64_t inputs\n+    // (void)GetVirtualTransactionSize(i64, i64, u32); // function defined only for a subset of int64_t/uint32_t inputs\n+    (void)HexDigit(ch);\n+    (void)i64tostr(i64);\n+    (void)IsDigit(ch);\n+    (void)IsSpace(ch);\n+    (void)IsSwitchChar(ch);\n+    (void)itostr(i32);\n+    (void)memusage::DynamicUsage(ch);\n+    (void)memusage::DynamicUsage(i16);\n+    (void)memusage::DynamicUsage(i32);\n+    (void)memusage::DynamicUsage(i64);\n+    (void)memusage::DynamicUsage(i8);\n+    (void)memusage::DynamicUsage(u16);\n+    (void)memusage::DynamicUsage(u32);\n+    (void)memusage::DynamicUsage(u64);\n+    (void)memusage::DynamicUsage(u8);\n+    const unsigned char uch = static_cast<unsigned char>(u8);\n+    (void)memusage::DynamicUsage(uch);\n+    (void)MillisToTimeval(i64);\n+    const double d = ser_uint64_to_double(u64);\n+    assert(ser_double_to_uint64(d) == u64);\n+    const float f = ser_uint32_to_float(u32);\n+    assert(ser_float_to_uint32(f) == u32);\n+    (void)SighashToStr(uch);\n+    (void)SipHashUint256(u64, u64, u256);\n+    (void)SipHashUint256Extra(u64, u64, u256, u32);\n+    (void)ToLower(ch);\n+\n+    const arith_uint256 au256 = UintToArith256(u256);\n+    assert(ArithToUint256(au256) == u256);\n+    assert(uint256S(au256.GetHex()) == u256);\n+    (void)au256.bits();\n+    (void)au256.GetCompact(/* fNegative= */ false);\n+    (void)au256.GetCompact(/* fNegative= */ true);\n+    (void)au256.getdouble();\n+    (void)au256.GetHex();\n+    (void)au256.GetLow64();\n+    (void)au256.size();\n+    (void)au256.ToString();\n+\n+    const CKeyID key_id{u160};\n+    const CScriptID script_id{u160};\n+    // CTxDestination = CNoDestination \u222a PKHash \u222a ScriptHash \u222a WitnessV0ScriptHash \u222a WitnessV0KeyHash \u222a WitnessUnknown\n+    const PKHash pk_hash{u160};\n+    const ScriptHash script_hash{u160};\n+    const WitnessV0KeyHash witness_v0_key_hash{u160};\n+    const WitnessV0ScriptHash witness_v0_script_hash{u256};\n+    const std::vector<CTxDestination> destinations{pk_hash, script_hash, witness_v0_key_hash, witness_v0_script_hash};\n+    const SigningProvider store;\n+    for (const CTxDestination& destination : destinations) {\n+        (void)DescribeAddress(destination);\n+        (void)EncodeDestination(destination);\n+        (void)GetKeyForDestination(store, destination);\n+        (void)GetScriptForDestination(destination);\n+        (void)IsValidDestination(destination);\n+    }\n+}"
      }
    ]
  }
]