sipa,2014-05-05T18:25:42Z,Are the changes to json_spirit necessary? They'll potentially conflicts with changes pulled in from upstream.\n,https://github.com/bitcoin/bitcoin/pull/4129#issuecomment-42220205,42220205,
laanwj,2014-05-05T18:49:09Z,"@sipa I'm afraid they are. json_spirit is the worst offender in using boost::[u]int64_t, I think it's even the source of all of those in the bitcoin source.\n",https://github.com/bitcoin/bitcoin/pull/4129#issuecomment-42223142,42223142,
sipa,2014-05-05T18:50:42Z,"Has anyone tried just using int64_t in our code, and not touching those in json_spirit? Whatever they're typedef'd to, they should be convertible in both directions.\n\nI don't care what json_spirit is doing.\n",https://github.com/bitcoin/bitcoin/pull/4129#issuecomment-42223317,42223317,
sipa,2014-05-05T18:51:33Z,"Alternatively, we can define our own json_spirit configuration type I think, which uses different types than what their code uses by default.\n\nEDIT: nevermind, it seems to be harder than that.\n",https://github.com/bitcoin/bitcoin/pull/4129#issuecomment-42223436,42223436,
laanwj,2014-05-05T18:51:39Z,"Yes, that has been tried, and it doesn't work. The reason all those casts are in RPC code is not for nothing. One of them defines the int64_t as long, the other as long long. Using them interchangeably gives errors on some architectures.\n",https://github.com/bitcoin/bitcoin/pull/4129#issuecomment-42223448,42223448,
sipa,2014-05-05T18:56:49Z,"Ok, sorry - I really hoped to avoiding needing to touch the json_spirit code.\n",https://github.com/bitcoin/bitcoin/pull/4129#issuecomment-42224092,42224092,
laanwj,2014-05-05T19:02:35Z,"I agree it would be preferable!\n\nThough - the last time it has been tried to upgrade json_spirit from upstream it failed and we had to revert, due to rounding-related issues (see #3127, and my comment in #751). So it would have to be done very carefully already (...at least as long as we still use the json numeric for monetary amounts).\n",https://github.com/bitcoin/bitcoin/pull/4129#issuecomment-42224808,42224808,
kdomanski,2014-05-05T19:39:31Z,"Huh, it compiled fine for me. Anyways, this next commit adds missing stdint.h.\n\n**However, I wonder if <cinttypes> wouldn't be just as good.**\n",https://github.com/bitcoin/bitcoin/pull/4129#issuecomment-42229189,42229189,
kdomanski,2014-05-06T13:10:01Z,"I removed what I was confident is unnecessary. Waiting for sanity test.\n\nIn the meantime, here's a peculiar finding. A lot of remaining casts are there, because some important class keys (for example, in the block header) are declared as either **int** or **unsigned int**, whereas [protocol specificatioin](https://en.bitcoin.it/wiki/Protocol_specification) defines them as either **int32_t** or *",https://github.com/bitcoin/bitcoin/pull/4129#issuecomment-42299562,42299562,
sipa,2014-05-06T13:12:28Z,"@kdomanski Fully agree, the fields of protocol classes should have unambiguous length. I think serialize.h should also be converted to only define standard serializations for {int,uint}{8,16,32,64}. But let's do that separately.\n",https://github.com/bitcoin/bitcoin/pull/4129#issuecomment-42299833,42299833,
laanwj,2014-05-06T13:57:14Z,"Agreed, although if you change the serialization and protocol stuff we need to be sure that the resulting code is equivalent.\n\nAs for this pull I think there's still a fair amount of casts that can go; in general the `entry.push_back(Pair(""time"", (int64_t)acentry.nTime));` don't need a cast as the ambiguity should be gone now? Or am I missing something here?\n",https://github.com/bitcoin/bitcoin/pull/4129#issuecomment-42304784,42304784,
kdomanski,2014-05-06T14:16:29Z,"This one could go, because CAccountingEntry has unambiguous type for nTime, but I can't see anything more at this time.\n",https://github.com/bitcoin/bitcoin/pull/4129#issuecomment-42307286,42307286,
laanwj,2014-05-12T14:39:00Z,Can you please split the last commit to another pull request? It's unrelated to the pull request title as it doesn't deal with boost types.\n,https://github.com/bitcoin/bitcoin/pull/4129#issuecomment-42839838,42839838,
BitcoinPullTester,2014-05-13T00:30:35Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/6a8cb3103a7fb11799ef2711e2efc550c835f994 for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/cu",https://github.com/bitcoin/bitcoin/pull/4129#issuecomment-42905075,42905075,
laanwj,2014-05-13T05:35:52Z,ACK\nLooks good to me now.\n,https://github.com/bitcoin/bitcoin/pull/4129#issuecomment-42918857,42918857,
jgarzik,2014-05-13T09:10:00Z,ACK\n,https://github.com/bitcoin/bitcoin/pull/4129#issuecomment-42932966,42932966,
laanwj,2014-05-13T09:38:21Z,I would suggest squashing the three 'removed a few unnecessary casts' commits together :)\n,https://github.com/bitcoin/bitcoin/pull/4129#issuecomment-42935320,42935320,
kdomanski,2014-05-13T09:42:26Z,squashed and rebased against master\n,https://github.com/bitcoin/bitcoin/pull/4129#issuecomment-42935678,42935678,
laanwj,2014-05-06T09:20:36Z,A lot of these casts will not be needed anymore.\nThey were added to quell ambiguity errors between boost::int64_t and system int64_t.\n,https://github.com/bitcoin/bitcoin/pull/4129#discussion_r12316096,12316096,src/rpcwallet.cpp
laanwj,2014-05-12T14:33:04Z,These casts also seem unneeded: `stats.nSendBytes` and `nRecvBytes` are already uint64_t\n,https://github.com/bitcoin/bitcoin/pull/4129#discussion_r12531764,12531764,src/rpcnet.cpp
laanwj,2014-05-12T14:40:37Z,"`nTransactions` ,`nTransactionOutputs`, `nSerializedSize` are uint64_t, so no cast needed\n",https://github.com/bitcoin/bitcoin/pull/4129#discussion_r12532224,12532224,src/rpcblockchain.cpp
