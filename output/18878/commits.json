[
  {
    "sha": "f963a680515eda66429b3d1537a7baf281ab9283",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOTYzYTY4MDUxNWVkYTY2NDI5YjNkMTUzN2E3YmFmMjgxYWI5Mjgz",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-05-05T02:27:19Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-05-05T02:27:19Z"
      },
      "message": "test: Add test for conflicted wallet tx notifications\n\nAdd test coverage for conflicted wallet transaction notifications so we improve\ncurrent behavior and avoid future regressions\n\nhttps://github.com/bitcoin/bitcoin/pull/9240 - accidental break\nhttps://github.com/bitcoin/bitcoin/issues/9479 - bug report\nhttps://github.com/bitcoin/bitcoin/pull/9371 - fix\nhttps://github.com/bitcoin/bitcoin/pull/16624 - accidental break\nhttps://github.com/bitcoin/bitcoin/issues/18325 - bug report\nhttps://github.com/bitcoin/bitcoin/pull/18600 - potential fix",
      "tree": {
        "sha": "e5c30fd10661cfd84b3d0e04643c41ea0f664e7c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e5c30fd10661cfd84b3d0e04643c41ea0f664e7c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f963a680515eda66429b3d1537a7baf281ab9283",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f963a680515eda66429b3d1537a7baf281ab9283",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f963a680515eda66429b3d1537a7baf281ab9283",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f963a680515eda66429b3d1537a7baf281ab9283/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b549cb1bd2cc4c6d7daeccdd06915bec590e90ca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b549cb1bd2cc4c6d7daeccdd06915bec590e90ca",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b549cb1bd2cc4c6d7daeccdd06915bec590e90ca"
      }
    ],
    "stats": {
      "total": 68,
      "additions": 67,
      "deletions": 1
    },
    "files": [
      {
        "sha": "47200b6cc6fa8e4f15dd42716882c45e32240c26",
        "filename": "test/functional/feature_notifications.py",
        "status": "modified",
        "additions": 67,
        "deletions": 1,
        "changes": 68,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f963a680515eda66429b3d1537a7baf281ab9283/test/functional/feature_notifications.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f963a680515eda66429b3d1537a7baf281ab9283/test/functional/feature_notifications.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_notifications.py?ref=f963a680515eda66429b3d1537a7baf281ab9283",
        "patch": "@@ -5,12 +5,14 @@\n \"\"\"Test the -alertnotify, -blocknotify and -walletnotify options.\"\"\"\n import os\n \n-from test_framework.address import ADDRESS_BCRT1_UNSPENDABLE\n+from test_framework.address import ADDRESS_BCRT1_UNSPENDABLE, keyhash_to_p2pkh\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n     wait_until,\n     connect_nodes,\n+    disconnect_nodes,\n+    hex_str_to_bytes,\n )\n \n # Linux allow all characters other than \\x00\n@@ -81,8 +83,72 @@ def run_test(self):\n             # directory content should equal the generated transaction hashes\n             txids_rpc = list(map(lambda t: notify_outputname(self.wallet, t['txid']), self.nodes[1].listtransactions(\"*\", block_count)))\n             assert_equal(sorted(txids_rpc), sorted(os.listdir(self.walletnotify_dir)))\n+            for tx_file in os.listdir(self.walletnotify_dir):\n+                os.remove(os.path.join(self.walletnotify_dir, tx_file))\n+\n+            # Conflicting transactions tests. Give node 0 same wallet seed as\n+            # node 1, generate spends from node 0, and check notifications\n+            # triggered by node 1\n+            self.log.info(\"test -walletnotify with conflicting transactions\")\n+            self.nodes[0].sethdseed(seed=self.nodes[1].dumpprivkey(keyhash_to_p2pkh(hex_str_to_bytes(self.nodes[1].getwalletinfo()['hdseedid'])[::-1])))\n+            self.nodes[0].rescanblockchain()\n+            self.nodes[0].generatetoaddress(100, ADDRESS_BCRT1_UNSPENDABLE)\n+\n+            # Generate transaction on node 0, sync mempools, and check for\n+            # notification on node 1.\n+            tx1 = self.nodes[0].sendtoaddress(address=ADDRESS_BCRT1_UNSPENDABLE, amount=1, replaceable=True)\n+            assert_equal(tx1 in self.nodes[0].getrawmempool(), True)\n+            self.sync_mempools()\n+            self.expect_wallet_notify([tx1])\n+\n+            # Generate bump transaction, sync mempools, and check for bump1\n+            # notification. In the future, per\n+            # https://github.com/bitcoin/bitcoin/pull/9371, it might be better\n+            # to have notifications for both tx1 and bump1.\n+            bump1 = self.nodes[0].bumpfee(tx1)[\"txid\"]\n+            assert_equal(bump1 in self.nodes[0].getrawmempool(), True)\n+            self.sync_mempools()\n+            self.expect_wallet_notify([bump1])\n+\n+            # Add bump1 transaction to new block, checking for a notification\n+            # and the correct number of confirmations.\n+            self.nodes[0].generatetoaddress(1, ADDRESS_BCRT1_UNSPENDABLE)\n+            self.sync_blocks()\n+            self.expect_wallet_notify([bump1])\n+            assert_equal(self.nodes[1].gettransaction(bump1)[\"confirmations\"], 1)\n+\n+            # Generate a second transaction to be bumped.\n+            tx2 = self.nodes[0].sendtoaddress(address=ADDRESS_BCRT1_UNSPENDABLE, amount=1, replaceable=True)\n+            assert_equal(tx2 in self.nodes[0].getrawmempool(), True)\n+            self.sync_mempools()\n+            self.expect_wallet_notify([tx2])\n+\n+            # Bump tx2 as bump2 and generate a block on node 0 while\n+            # disconnected, then reconnect and check for notifications on node 1\n+            # about newly confirmed bump2 and newly conflicted tx2. Currently\n+            # only the bump2 notification is sent. Ideally, notifications would\n+            # be sent both for bump2 and tx2, which was the previous behavior\n+            # before being broken by an accidental change in PR\n+            # https://github.com/bitcoin/bitcoin/pull/16624. The bug is reported\n+            # in issue https://github.com/bitcoin/bitcoin/issues/18325.\n+            disconnect_nodes(self.nodes[0], 1)\n+            bump2 = self.nodes[0].bumpfee(tx2)[\"txid\"]\n+            self.nodes[0].generatetoaddress(1, ADDRESS_BCRT1_UNSPENDABLE)\n+            assert_equal(self.nodes[0].gettransaction(bump2)[\"confirmations\"], 1)\n+            assert_equal(tx2 in self.nodes[1].getrawmempool(), True)\n+            connect_nodes(self.nodes[0], 1)\n+            self.sync_blocks()\n+            self.expect_wallet_notify([bump2])\n+            assert_equal(self.nodes[1].gettransaction(bump2)[\"confirmations\"], 1)\n \n         # TODO: add test for `-alertnotify` large fork notifications\n \n+    def expect_wallet_notify(self, tx_ids):\n+        wait_until(lambda: len(os.listdir(self.walletnotify_dir)) >= len(tx_ids), timeout=10)\n+        assert_equal(sorted(notify_outputname(self.wallet, tx_id) for tx_id in tx_ids), sorted(os.listdir(self.walletnotify_dir)))\n+        for tx_file in os.listdir(self.walletnotify_dir):\n+            os.remove(os.path.join(self.walletnotify_dir, tx_file))\n+\n+\n if __name__ == '__main__':\n     NotificationsTest().main()"
      }
    ]
  }
]