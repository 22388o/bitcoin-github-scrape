[
  {
    "sha": "1bcd44223cdc1b584c0cd0863fe9653f540cf856",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYmNkNDQyMjNjZGMxYjU4NGMwY2QwODYzZmU5NjUzZjU0MGNmODU2",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-06-29T10:57:45Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-08-09T08:44:59Z"
      },
      "message": "Remove the virtual specifier for functions with the override specifier\n\n`override` guarantees that the function is virtual (in addition\nto that the function is overriding a virtual function from a base\nclass).",
      "tree": {
        "sha": "6b8b20abb3a7678c66f5cd68d6a0f075623c2d75",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6b8b20abb3a7678c66f5cd68d6a0f075623c2d75"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1bcd44223cdc1b584c0cd0863fe9653f540cf856",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1bcd44223cdc1b584c0cd0863fe9653f540cf856",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1bcd44223cdc1b584c0cd0863fe9653f540cf856",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1bcd44223cdc1b584c0cd0863fe9653f540cf856/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "929fd7276c0f0c30b9416f61a6f5f35d763d81e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/929fd7276c0f0c30b9416f61a6f5f35d763d81e4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/929fd7276c0f0c30b9416f61a6f5f35d763d81e4"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 8,
      "deletions": 8
    },
    "files": [
      {
        "sha": "750966fd35f9204ef871eb93ccb07fc987347f5a",
        "filename": "src/dbwrapper.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bcd44223cdc1b584c0cd0863fe9653f540cf856/src/dbwrapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bcd44223cdc1b584c0cd0863fe9653f540cf856/src/dbwrapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dbwrapper.cpp?ref=1bcd44223cdc1b584c0cd0863fe9653f540cf856",
        "patch": "@@ -19,7 +19,7 @@ class CBitcoinLevelDBLogger : public leveldb::Logger {\n public:\n     // This code is adapted from posix_logger.h, which is why it is using vsprintf.\n     // Please do not do this in normal code\n-    virtual void Logv(const char * format, va_list ap) override {\n+    void Logv(const char * format, va_list ap) override {\n             if (!LogAcceptCategory(BCLog::LEVELDB)) {\n                 return;\n             }"
      },
      {
        "sha": "528b6e08340dee63a9d71e4a8768071fcd381a80",
        "filename": "src/keystore.h",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bcd44223cdc1b584c0cd0863fe9653f540cf856/src/keystore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bcd44223cdc1b584c0cd0863fe9653f540cf856/src/keystore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.h?ref=1bcd44223cdc1b584c0cd0863fe9653f540cf856",
        "patch": "@@ -97,14 +97,14 @@ class CBasicKeyStore : public CKeyStore\n         }\n         return false;\n     }\n-    virtual bool AddCScript(const CScript& redeemScript) override;\n-    virtual bool HaveCScript(const CScriptID &hash) const override;\n-    virtual bool GetCScript(const CScriptID &hash, CScript& redeemScriptOut) const override;\n+    bool AddCScript(const CScript& redeemScript) override;\n+    bool HaveCScript(const CScriptID &hash) const override;\n+    bool GetCScript(const CScriptID &hash, CScript& redeemScriptOut) const override;\n \n-    virtual bool AddWatchOnly(const CScript &dest) override;\n-    virtual bool RemoveWatchOnly(const CScript &dest) override;\n-    virtual bool HaveWatchOnly(const CScript &dest) const override;\n-    virtual bool HaveWatchOnly() const override;\n+    bool AddWatchOnly(const CScript &dest) override;\n+    bool RemoveWatchOnly(const CScript &dest) override;\n+    bool HaveWatchOnly(const CScript &dest) const override;\n+    bool HaveWatchOnly() const override;\n };\n \n typedef std::vector<unsigned char, secure_allocator<unsigned char> > CKeyingMaterial;"
      }
    ]
  }
]