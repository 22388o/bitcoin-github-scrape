naumenkogs,2020-09-02 14:07:46,Draft until #19724 is merged.,https://github.com/bitcoin/bitcoin/pull/19860#issuecomment-685761138,685761138,
naumenkogs,2020-09-02 14:12:38,"There is an interesting overlap with #19858 (periodic BLOCK_RELAY conns to sync tips).\n\n I think those temporarily BLOCK_RELAY conns probably should be selected similarly to the existent new `BLOCK_RELAY` conns, meaning diversified by both `set_connected_full_relay` and `set_connected_block_relay`. If many of our peers are Sybils, it also would improve the chance of not connecting to the same ",https://github.com/bitcoin/bitcoin/pull/19860#issuecomment-685764141,685764141,
sdaftuar,2020-09-02 15:27:35,"> Prevents BLOCK_RELAY connections from affecting our further full-relay peer selection, because otherwise, an attacker with sufficient ADDR-related capabilities may infer to which netgroups those (supposedly more private) connections belong.\n\nDo you have a way to model what an attacker's capability would need to be in order to deduce something like this?  On the face of it, it seems strange t",https://github.com/bitcoin/bitcoin/pull/19860#issuecomment-685812232,685812232,
DrahtBot,2020-09-02 17:27:14,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/19860#issuecomment-685885260,685885260,
naumenkogs,2020-09-03 07:20:01,"@sdaftuar I agree that immediate diversity is more important than theoretical anti-inference. But since it's easy to get confused here, I want to point out that after the second commit:\n- *new* block relay conns are made with full diversity, same as before\n- *new* full relay conns are made distinct w.r.t. existing full relay conns\n\nThe difference is only that *existing* block relay conns d",https://github.com/bitcoin/bitcoin/pull/19860#issuecomment-686305852,686305852,
naumenkogs,2020-09-03 10:53:38,"Added one more improvement: diversify by MANUAL connections (consider them regular full outbound). The privacy considerations I have for BLOCK_RELAY don't apply here because MANUAL are not particularly private... (since they support full relay)\n\nNot sure whether they should be excluded when considering `count_failure`, similarly to ""Having one persistent outbound peer probably means it's from ",https://github.com/bitcoin/bitcoin/pull/19860#issuecomment-686409962,686409962,
naumenkogs,2020-09-09 07:16:51,"This PR is now updated to be a non-controversial improvement:\n- don't diversify by ADDR_FETCH and FEELER\n- do diversify by MANUAL\n\nI dropped the part about BLOCK_RELAY diversity.",https://github.com/bitcoin/bitcoin/pull/19860#issuecomment-689359226,689359226,
naumenkogs,2021-08-31 15:18:45,"Sorry for being absent, I'll try to rebase it sometime soon.",https://github.com/bitcoin/bitcoin/pull/19860#issuecomment-909334620,909334620,
amitiuttarwar,2021-09-02 22:48:28,"- concept ACK to removing netgroup influence of ADDR_FETCH & FEELER \n- OP says they ""are now not included in `count_failure` consideration (see new documentation)"" << what is this in reference to? is this a relic from a previous version of the PR? \n- unsure about including MANUAL peers for outbound diversity & don't see anything on this PR that explains why. can you share your reasoning?",https://github.com/bitcoin/bitcoin/pull/19860#issuecomment-912111900,912111900,
naumenkogs,2021-09-14 13:07:22,"@amitiuttarwar\n\n>OP says they ""are now not included in count_failure consideration (see new documentation)"" << what is this in reference to? is this a relic from a previous version of the PR?\n\nI don't even remember. Dropped this from the description. A lot of discussion in this PR, maybe worth opening a new one...\n\n>unsure about including MANUAL peers for outbound diversity & don't see",https://github.com/bitcoin/bitcoin/pull/19860#issuecomment-919132802,919132802,
Empact,2020-09-02 16:51:39,nit: Would be a bit clearer IMO to use the `Is` prefix or similar to distinguish between the interrogative and the imperative.,https://github.com/bitcoin/bitcoin/pull/19860#discussion_r482217837,482217837,src/net.h
Empact,2020-09-02 16:58:11,nit: I don't believe the `> >` construction is necessary anymore here. See other uses`<*>>` in the codebase.,https://github.com/bitcoin/bitcoin/pull/19860#discussion_r482222193,482222193,src/net.cpp
naumenkogs,2020-09-03 07:03:40,Not my work: see #19724 this is based on.,https://github.com/bitcoin/bitcoin/pull/19860#discussion_r482751269,482751269,src/net.h
ariard,2020-09-04 14:42:43,"On the threading side, it sounds to me a bit inefficient to recompute those sets for each test membership of a selected addr as we have to lock and iterate `vNodes` each time. A future improvement could be to cache them and only update as we add/drop nodes ?",https://github.com/bitcoin/bitcoin/pull/19860#discussion_r483659033,483659033,src/net.cpp
ariard,2020-09-04 14:54:56,"You can precise further exact caution we should have wrt to inbound netgroup diversity.\n\n""If we enforce some netgroup diversity on our inbound slots in the future we should avoid to intersect this set of pinned netgroups with the outbound one. That way to avoid an attacker restraining diversity of potential outbound connections by already occupying a netgroup as an inbound""",https://github.com/bitcoin/bitcoin/pull/19860#discussion_r483670784,483670784,src/net.cpp
ariard,2020-09-04 14:55:46,You should remove this comment.,https://github.com/bitcoin/bitcoin/pull/19860#discussion_r483671287,483671287,src/net.cpp
naumenkogs,2020-09-07 10:57:01,I would leave this for future improvements.,https://github.com/bitcoin/bitcoin/pull/19860#discussion_r484357785,484357785,src/net.cpp
naumenkogs,2020-09-08 09:18:08,I'd rather not keep comments w.r.t potential future improvements in the codebase.,https://github.com/bitcoin/bitcoin/pull/19860#discussion_r484773801,484773801,src/net.cpp
Zero-1729,2020-09-16 13:47:13,nit: maybe consider rephrasing this to \n\n```\n// Our goal here is to not use multiple limited outbound slots on a single netgroup.\n```,https://github.com/bitcoin/bitcoin/pull/19860#discussion_r489450880,489450880,src/net.cpp
vasild,2021-09-15 08:28:36,"The following two variants are equivalent:\n\n```cpp\nassert(A && B);\n```\nvs\n```cpp\nassert(A);\nassert(B);\n```\n\nHowever if the first variant fails it would be impossible to say which one of `A` or `B` was false just by looking at the message (something like `assertion ""A && B"" failed`). With the second variant it is clear whether `A` or `B` was false.",https://github.com/bitcoin/bitcoin/pull/19860#discussion_r708960012,708960012,src/net.cpp
