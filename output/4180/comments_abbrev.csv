kdomanski,2014-05-12T22:47:06Z,There's actually a significantly greater number of such ambiguities in classes within main.h which are not explicitly described by protocol specs. Apart from the ambiguity they often cause unnecessary casts. I'd like to convert them _en masse_ into (u)int*_t and exterminate the casts but I need an opinion whether or not it's worth doing. I remember some scepticism about this from #bitcoin-dev.\n,https://github.com/bitcoin/bitcoin/pull/4180#issuecomment-42898240,42898240,
brandondahler,2014-05-30T04:14:31Z,"I would be weary of just find-replacing all int's to int32_t's, etc.  \n\nIn my opinion they should only be converted to using {,u}int{8,16,32,64}_t if the data structure is rigidly defined to be that size.  Otherwise int should be considered the default type for numerical values and long used if it would make sense and be convenient to use a 64-bit value if available.\n",https://github.com/bitcoin/bitcoin/pull/4180#issuecomment-44613592,44613592,
laanwj,2014-07-31T07:40:52Z,Rebase needed + verification needs to be done here that the resulting code is exactly the same.\n,https://github.com/bitcoin/bitcoin/pull/4180#issuecomment-50726711,50726711,
kdomanski,2014-07-31T16:48:27Z,I will proceed with this within a few days.\n,https://github.com/bitcoin/bitcoin/pull/4180#issuecomment-50785874,50785874,
petertodd,2014-07-31T21:52:06Z,"> Thus the implementation becomes not only unambiguous, but also more compliant with the protocol specification.\n\nThe protocol specification is _not_ the wiki, it's the sourcecode. If the wiki doesn't match that code, it should be changed - not the other way around.\n\nAnyway, the changes look ok, but you definitely need to check case-by-case that they really cause no changes. I'd suggest writin",https://github.com/bitcoin/bitcoin/pull/4180#issuecomment-50823947,50823947,
kdomanski,2014-07-31T23:51:06Z,"> The protocol specification is not the wiki, it's the sourcecode.\n\nI'll quote you every time someone on #bitcoin-dev says there is no One True Implementation.\n",https://github.com/bitcoin/bitcoin/pull/4180#issuecomment-50833684,50833684,
sipa,2014-07-31T23:57:16Z,"I disagree when it's just about the p2p protocol, as the language that two nodes speak to each other does not impact the network. When it's about the consensus rules, it's more complicated.\n\nAnyway: I think in many places this is the correct thing to do. As is, the serialization framework really only works because of very strict assumptions on data type sizes. I think it's perfectly acceptable t",https://github.com/bitcoin/bitcoin/pull/4180#issuecomment-50834122,50834122,
petertodd,2014-08-01T00:03:07Z,"> I'll quote you every time someone on #bitcoin-dev says there is no One True Implementation.\n\nAs you should. Those people are to a first approximation wrong.\n\n@sipa With serialization at least a change in semantics will usually fail hard and immediately - hashes won't match. What I'd worry about more is subtle changes in semantics, e.g. overflows.\n",https://github.com/bitcoin/bitcoin/pull/4180#issuecomment-50834512,50834512,
sipa,2014-08-01T02:11:09Z,@petertodd And you should worry about that. But replacing types by typedef'ed identical types shouldn't cause problems.\n,https://github.com/bitcoin/bitcoin/pull/4180#issuecomment-50842084,50842084,
laanwj,2014-08-01T07:35:08Z,It's easy enough to verify that the binary stays the same. I'm volunteering to check (for x86_32 and x86_64) once this is rebased.\n,https://github.com/bitcoin/bitcoin/pull/4180#issuecomment-50857232,50857232,
petertodd,2014-08-01T13:04:16Z,"@laanwj Doh! Yeah, that's the right way to do it; satisfies my concerns for sure. \n",https://github.com/bitcoin/bitcoin/pull/4180#issuecomment-50881282,50881282,
kdomanski,2014-08-01T19:02:52Z,"Huh, changing even one ""unsigned int"" to uint64_t (I'm on x86_64) gives me a different binary hash.\n",https://github.com/bitcoin/bitcoin/pull/4180#issuecomment-50922464,50922464,
sipa,2014-08-01T19:12:02Z,"Unsigned int is 32 bit.\n\nAlso, make sure to strip the binary before comparison.\n",https://github.com/bitcoin/bitcoin/pull/4180#issuecomment-50923383,50923383,
brandondahler,2014-08-01T22:49:03Z,@kdomanski you are thinking about long and unsigned long -- they are either 32-bit or 64-bit depending on the architecture being used.  It wont be possible to change variables that are longs without changing the binary.\n,https://github.com/bitcoin/bitcoin/pull/4180#issuecomment-50943240,50943240,
sipa,2014-08-01T22:53:03Z,"Nor is there any need. If there are types being serialized right now whose size depends on the architecture, Bitcoin just wouldn't work already. The purpose of this is to change the types that have an implicitly assumed size to types with that size fixed. It shouldn't change anything for any architecture, but may allow us to port to new architectures in the future for which these assumptions don't",https://github.com/bitcoin/bitcoin/pull/4180#issuecomment-50943498,50943498,
laanwj,2014-08-04T15:47:04Z,"You have to take a few precautions to make sure that executables remain the same:\n- Strip the executable (as said)\n- Provide `-frandom-seed=bitcoin`, to make sure gcc uses a deterministic random seed\n- Possibly define NDEBUG (assertion errors contain line numbers; not that these are expected to change in this case) - yes, bitcoin makes this difficult\n- Empty out CLIENT_BUILD / CLIENT_DATE so t",https://github.com/bitcoin/bitcoin/pull/4180#issuecomment-51077730,51077730,
kdomanski,2014-08-07T13:45:59Z,"@laanwj Done. If something doesn't work out, please post assembly diff.\n",https://github.com/bitcoin/bitcoin/pull/4180#issuecomment-51473093,51473093,
laanwj,2014-08-14T06:30:05Z,"ACK.\n\n## Preparation\n\nCreate the following patch `stripbuildinfo.patch`:\n\n``` patch\ndiff --git a/src/main.cpp b/src/main.cpp\nindex ba521b6..8cc6fb2 100644\n--- a/src/main.cpp\n+++ b/src/main.cpp\n@@ -27,9 +27,9 @@\n using namespace std;\n using namespace boost;\n\n-#if defined(NDEBUG)\n-# error ""Bitcoin cannot be compiled without assertions.""\n-#endif\n+\n+\n+\n\n //\n // Global state\ndif",https://github.com/bitcoin/bitcoin/pull/4180#issuecomment-52148271,52148271,
petertodd,2014-08-14T06:34:37Z,@laanwj Nice work!\n,https://github.com/bitcoin/bitcoin/pull/4180#issuecomment-52148516,52148516,
jgarzik,2014-08-14T12:16:31Z,ACK\n,https://github.com/bitcoin/bitcoin/pull/4180#issuecomment-52175769,52175769,
kdomanski,2014-08-14T16:12:52Z,@laanwj I restored the prototypes.\n,https://github.com/bitcoin/bitcoin/pull/4180#issuecomment-52204875,52204875,
sipa,2014-08-14T18:07:56Z,Untested ACK\n,https://github.com/bitcoin/bitcoin/pull/4180#issuecomment-52219979,52219979,
BitcoinPullTester,2014-08-18T19:28:02Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/p4180_40f841d3e330b83d252e4cc2874256a4cb4c6641/ for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-te",https://github.com/bitcoin/bitcoin/pull/4180#issuecomment-52542124,52542124,
laanwj,2014-08-30T04:28:19Z,Merged via 9f3d476 (fixed trivial conflict: removal of print functions)\n,https://github.com/bitcoin/bitcoin/pull/4180#issuecomment-53948379,53948379,
sipa,2014-05-31T09:52:40Z,Can you fix the indendation of the comments?\n,https://github.com/bitcoin/bitcoin/pull/4180#discussion_r13260395,13260395,src/main.h
sipa,2014-05-31T09:53:10Z,Fix comment indentation.\n,https://github.com/bitcoin/bitcoin/pull/4180#discussion_r13260396,13260396,src/core.h
sipa,2014-05-31T09:56:19Z,No particular reason why nDoS needs to be exactly 32 bits.\n,https://github.com/bitcoin/bitcoin/pull/4180#discussion_r13260402,13260402,src/main.h
laanwj,2014-08-14T14:35:12Z,"Just looked over this for one final time and noticed that here you change the prototype but not the function definition itself (in core.cpp)!\nI'd suggest to change these back to int, as the nIndex parameters for `*MerkleBranch`are not directly associated with fields on the data structure that are serialized.\n",https://github.com/bitcoin/bitcoin/pull/4180#discussion_r16241266,16241266,src/core.h
