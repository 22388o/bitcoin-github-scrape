[
  {
    "sha": "40f841d3e330b83d252e4cc2874256a4cb4c6641",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MGY4NDFkM2UzMzBiODNkMjUyZTRjYzI4NzQyNTZhNGNiNGM2NjQx",
    "commit": {
      "author": {
        "name": "Kamil Domanski",
        "email": "kdomanski@kdemail.net",
        "date": "2014-08-07T13:39:49Z"
      },
      "committer": {
        "name": "Kamil Domanski",
        "email": "kdomanski@kdemail.net",
        "date": "2014-08-14T15:35:22Z"
      },
      "message": "changed field types in some structures to equivalent unambiguous types",
      "tree": {
        "sha": "c154c6790bd13e467c9fcdb67577abf3c62d62b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c154c6790bd13e467c9fcdb67577abf3c62d62b0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/40f841d3e330b83d252e4cc2874256a4cb4c6641",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/40f841d3e330b83d252e4cc2874256a4cb4c6641",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/40f841d3e330b83d252e4cc2874256a4cb4c6641",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/40f841d3e330b83d252e4cc2874256a4cb4c6641/comments",
    "author": {
      "login": "kdomanski",
      "id": 993296,
      "node_id": "MDQ6VXNlcjk5MzI5Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/993296?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kdomanski",
      "html_url": "https://github.com/kdomanski",
      "followers_url": "https://api.github.com/users/kdomanski/followers",
      "following_url": "https://api.github.com/users/kdomanski/following{/other_user}",
      "gists_url": "https://api.github.com/users/kdomanski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kdomanski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kdomanski/subscriptions",
      "organizations_url": "https://api.github.com/users/kdomanski/orgs",
      "repos_url": "https://api.github.com/users/kdomanski/repos",
      "events_url": "https://api.github.com/users/kdomanski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kdomanski/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kdomanski",
      "id": 993296,
      "node_id": "MDQ6VXNlcjk5MzI5Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/993296?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kdomanski",
      "html_url": "https://github.com/kdomanski",
      "followers_url": "https://api.github.com/users/kdomanski/followers",
      "following_url": "https://api.github.com/users/kdomanski/following{/other_user}",
      "gists_url": "https://api.github.com/users/kdomanski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kdomanski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kdomanski/subscriptions",
      "organizations_url": "https://api.github.com/users/kdomanski/orgs",
      "repos_url": "https://api.github.com/users/kdomanski/repos",
      "events_url": "https://api.github.com/users/kdomanski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kdomanski/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "003bbd5f7672d7fd4f40478fd57cc4e03c30f933",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/003bbd5f7672d7fd4f40478fd57cc4e03c30f933",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/003bbd5f7672d7fd4f40478fd57cc4e03c30f933"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 26,
      "deletions": 26
    },
    "files": [
      {
        "sha": "49ad85023cd0671e6c8828c9977e3eb9e7db9575",
        "filename": "src/core.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/40f841d3e330b83d252e4cc2874256a4cb4c6641/src/core.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/40f841d3e330b83d252e4cc2874256a4cb4c6641/src/core.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.cpp?ref=40f841d3e330b83d252e4cc2874256a4cb4c6641",
        "patch": "@@ -17,14 +17,14 @@ void COutPoint::print() const\n     LogPrintf(\"%s\\n\", ToString());\n }\n \n-CTxIn::CTxIn(COutPoint prevoutIn, CScript scriptSigIn, unsigned int nSequenceIn)\n+CTxIn::CTxIn(COutPoint prevoutIn, CScript scriptSigIn, uint32_t nSequenceIn)\n {\n     prevout = prevoutIn;\n     scriptSig = scriptSigIn;\n     nSequence = nSequenceIn;\n }\n \n-CTxIn::CTxIn(uint256 hashPrevTx, unsigned int nOut, CScript scriptSigIn, unsigned int nSequenceIn)\n+CTxIn::CTxIn(uint256 hashPrevTx, uint32_t nOut, CScript scriptSigIn, uint32_t nSequenceIn)\n {\n     prevout = COutPoint(hashPrevTx, nOut);\n     scriptSig = scriptSigIn;"
      },
      {
        "sha": "ae57842dc08c58ddeeeb882b030daf6270804c8f",
        "filename": "src/core.h",
        "status": "modified",
        "additions": 24,
        "deletions": 24,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/40f841d3e330b83d252e4cc2874256a4cb4c6641/src/core.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/40f841d3e330b83d252e4cc2874256a4cb4c6641/src/core.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.h?ref=40f841d3e330b83d252e4cc2874256a4cb4c6641",
        "patch": "@@ -23,13 +23,13 @@ class COutPoint\n {\n public:\n     uint256 hash;\n-    unsigned int n;\n+    uint32_t n;\n \n     COutPoint() { SetNull(); }\n-    COutPoint(uint256 hashIn, unsigned int nIn) { hash = hashIn; n = nIn; }\n+    COutPoint(uint256 hashIn, uint32_t nIn) { hash = hashIn; n = nIn; }\n     IMPLEMENT_SERIALIZE( READWRITE(FLATDATA(*this)); )\n-    void SetNull() { hash = 0; n = (unsigned int) -1; }\n-    bool IsNull() const { return (hash == 0 && n == (unsigned int) -1); }\n+    void SetNull() { hash = 0; n = (uint32_t) -1; }\n+    bool IsNull() const { return (hash == 0 && n == (uint32_t) -1); }\n \n     friend bool operator<(const COutPoint& a, const COutPoint& b)\n     {\n@@ -55,12 +55,12 @@ class CInPoint\n {\n public:\n     const CTransaction* ptx;\n-    unsigned int n;\n+    uint32_t n;\n \n     CInPoint() { SetNull(); }\n-    CInPoint(const CTransaction* ptxIn, unsigned int nIn) { ptx = ptxIn; n = nIn; }\n-    void SetNull() { ptx = NULL; n = (unsigned int) -1; }\n-    bool IsNull() const { return (ptx == NULL && n == (unsigned int) -1); }\n+    CInPoint(const CTransaction* ptxIn, uint32_t nIn) { ptx = ptxIn; n = nIn; }\n+    void SetNull() { ptx = NULL; n = (uint32_t) -1; }\n+    bool IsNull() const { return (ptx == NULL && n == (uint32_t) -1); }\n };\n \n /** An input of a transaction.  It contains the location of the previous\n@@ -72,15 +72,15 @@ class CTxIn\n public:\n     COutPoint prevout;\n     CScript scriptSig;\n-    unsigned int nSequence;\n+    uint32_t nSequence;\n \n     CTxIn()\n     {\n         nSequence = std::numeric_limits<unsigned int>::max();\n     }\n \n-    explicit CTxIn(COutPoint prevoutIn, CScript scriptSigIn=CScript(), unsigned int nSequenceIn=std::numeric_limits<unsigned int>::max());\n-    CTxIn(uint256 hashPrevTx, unsigned int nOut, CScript scriptSigIn=CScript(), unsigned int nSequenceIn=std::numeric_limits<unsigned int>::max());\n+    explicit CTxIn(COutPoint prevoutIn, CScript scriptSigIn=CScript(), uint32_t nSequenceIn=std::numeric_limits<unsigned int>::max());\n+    CTxIn(uint256 hashPrevTx, uint32_t nOut, CScript scriptSigIn=CScript(), uint32_t nSequenceIn=std::numeric_limits<uint32_t>::max());\n \n     IMPLEMENT_SERIALIZE\n     (\n@@ -91,7 +91,7 @@ class CTxIn\n \n     bool IsFinal() const\n     {\n-        return (nSequence == std::numeric_limits<unsigned int>::max());\n+        return (nSequence == std::numeric_limits<uint32_t>::max());\n     }\n \n     friend bool operator==(const CTxIn& a, const CTxIn& b)\n@@ -217,17 +217,17 @@ class CTransaction\n     void UpdateHash() const;\n \n public:\n-    static const int CURRENT_VERSION=1;\n+    static const int32_t CURRENT_VERSION=1;\n \n     // The local variables are made const to prevent unintended modification\n     // without updating the cached hash value. However, CTransaction is not\n     // actually immutable; deserialization and assignment are implemented,\n     // and bypass the constness. This is safe, as they update the entire\n     // structure, including the hash.\n-    const int nVersion;\n+    const int32_t nVersion;\n     const std::vector<CTxIn> vin;\n     const std::vector<CTxOut> vout;\n-    const unsigned int nLockTime;\n+    const uint32_t nLockTime;\n \n     /** Construct a CTransaction that qualifies as IsNull() */\n     CTransaction();\n@@ -238,11 +238,11 @@ class CTransaction\n     CTransaction& operator=(const CTransaction& tx);\n \n     IMPLEMENT_SERIALIZE(\n-        READWRITE(*const_cast<int*>(&this->nVersion));\n+        READWRITE(*const_cast<int32_t*>(&this->nVersion));\n         nVersion = this->nVersion;\n         READWRITE(*const_cast<std::vector<CTxIn>*>(&vin));\n         READWRITE(*const_cast<std::vector<CTxOut>*>(&vout));\n-        READWRITE(*const_cast<unsigned int*>(&nLockTime));\n+        READWRITE(*const_cast<uint32_t*>(&nLockTime));\n         if (fRead)\n             UpdateHash();\n     )\n@@ -285,10 +285,10 @@ class CTransaction\n /** A mutable version of CTransaction. */\n struct CMutableTransaction\n {\n-    int nVersion;\n+    int32_t nVersion;\n     std::vector<CTxIn> vin;\n     std::vector<CTxOut> vout;\n-    unsigned int nLockTime;\n+    uint32_t nLockTime;\n \n     CMutableTransaction();\n     CMutableTransaction(const CTransaction& tx);\n@@ -400,13 +400,13 @@ class CBlockHeader\n {\n public:\n     // header\n-    static const int CURRENT_VERSION=2;\n-    int nVersion;\n+    static const int32_t CURRENT_VERSION=2;\n+    int32_t nVersion;\n     uint256 hashPrevBlock;\n     uint256 hashMerkleRoot;\n-    unsigned int nTime;\n-    unsigned int nBits;\n-    unsigned int nNonce;\n+    uint32_t nTime;\n+    uint32_t nBits;\n+    uint32_t nNonce;\n \n     CBlockHeader()\n     {"
      }
    ]
  }
]