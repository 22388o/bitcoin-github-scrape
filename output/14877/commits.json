[
  {
    "sha": "fa0c24c96e9937f666dcdd83d12145720c7b0329",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTBjMjRjOTZlOTkzN2Y2NjZkY2RkODNkMTIxNDU3MjBjN2IwMzI5",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-12-05T22:07:30Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-12-07T16:53:29Z"
      },
      "message": "rpc: Document default values for optional arguments",
      "tree": {
        "sha": "bf5ce662ac1b0b3f83caed46d5d05a755e03dddd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bf5ce662ac1b0b3f83caed46d5d05a755e03dddd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa0c24c96e9937f666dcdd83d12145720c7b0329",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJcCqWJAAoJEM4rdWl+aaVII1YMALcshQV6XuZV8F4FI3WiOn+v\nWVM8h7AOTndKg7Zwx7OyAlW+qH+anDsb2JpNRWpltHFhzNbtvwf6l9NjsWY/7mpo\nsco3txZ/bdthIO8O5Y4EbF2L4tQbmD6dnZ3y2T2YVkOd5jn0z9ah0w6w84WqArJr\n9RyQ3DgBoAizNf9eFQ7Ko+TIVrNfiOOaL43NOzqK1ygA1Tg2pA6i+fnpfyCE5IWu\n+PI01PWCK3kKcrIoJrv1PrPHJHRmqXVzPsNbaMcGi21w21wnZWHZXqJP4V9RfAnB\nHI6mfhkIJgMguYOrylpIqX1TH8WDsRJStgcl3PbTT1AJ8qmnlz3X2Rmaei/vqbW9\n4qy5tOLiATwGFnf1NtnoUf/t5SClfC0SuZ0eL/mZ0k69CvK65/XC2Gz+Ax/CCy1Q\nYGZeIMiFRZNYCWzXvIjkEINqUqje1s+kH7lhJVwrNIuxjdY6KQVXFh1jEUzbyruz\nvKOjlHUYE42n2kIA/9GETkaJGDv8ckTkkpxkZ8vNhQ==\n=ISV8\n-----END PGP SIGNATURE-----",
        "payload": "tree bf5ce662ac1b0b3f83caed46d5d05a755e03dddd\nparent e2c473ff75f9ec272ab23e0ee30728b72aecd8f2\nauthor MarcoFalke <falke.marco@gmail.com> 1544047650 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1544201609 -0500\n\nrpc: Document default values for optional arguments\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa0c24c96e9937f666dcdd83d12145720c7b0329",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa0c24c96e9937f666dcdd83d12145720c7b0329",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa0c24c96e9937f666dcdd83d12145720c7b0329/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e2c473ff75f9ec272ab23e0ee30728b72aecd8f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2c473ff75f9ec272ab23e0ee30728b72aecd8f2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e2c473ff75f9ec272ab23e0ee30728b72aecd8f2"
      }
    ],
    "stats": {
      "total": 156,
      "additions": 76,
      "deletions": 80
    },
    "files": [
      {
        "sha": "b1654ca8cb7ae532d07a87ef653fe087597481e9",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0c24c96e9937f666dcdd83d12145720c7b0329/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0c24c96e9937f666dcdd83d12145720c7b0329/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=fa0c24c96e9937f666dcdd83d12145720c7b0329",
        "patch": "@@ -212,11 +212,9 @@ static UniValue waitfornewblock(const JSONRPCRequest& request)\n                 \"\\nWaits for a specific new block and returns useful info about it.\\n\"\n                 \"\\nReturns the current block on timeout or exit.\\n\",\n                 {\n-                    {\"timeout\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"\", \"\"},\n+                    {\"timeout\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"0\", \"Time in milliseconds to wait for a response. 0 indicates no timeout.\"},\n                 }}\n                 .ToString() +\n-            \"\\nArguments:\\n\"\n-            \"1. timeout (int, optional, default=0) Time in milliseconds to wait for a response. 0 indicates no timeout.\\n\"\n             \"\\nResult:\\n\"\n             \"{                           (json object)\\n\"\n             \"  \\\"hash\\\" : {       (string) The blockhash\\n\"\n@@ -1609,7 +1607,7 @@ static UniValue getchaintxstats(const JSONRPCRequest& request)\n                 \"\\nCompute statistics about the total number and rate of transactions in the chain.\\n\",\n                 {\n                     {\"nblocks\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"one month\", \"Size of the window in number of blocks\"},\n-                    {\"blockhash\", RPCArg::Type::STR_HEX, /* opt */ true, /* default_val */ \"\", \"The hash of the block that ends the window.\"},\n+                    {\"blockhash\", RPCArg::Type::STR_HEX, /* opt */ true, /* default_val */ \"chain tip\", \"The hash of the block that ends the window.\"},\n                 }}\n                 .ToString() +\n             \"\\nResult:\\n\"\n@@ -1743,7 +1741,7 @@ static UniValue getblockstats(const JSONRPCRequest& request)\n                 \"It won't work without -txindex for utxo_size_inc, *fee or *feerate stats.\\n\",\n                 {\n                     {\"hash_or_height\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"The block hash or height of the target block\", \"\", {\"\", \"string or numeric\"}},\n-                    {\"stats\", RPCArg::Type::ARR, /* opt */ true, /* default_val */ \"\", \"Values to plot, by default all values (see result below)\",\n+                    {\"stats\", RPCArg::Type::ARR, /* opt */ true, /* default_val */ \"all values\", \"Values to plot (see result below)\",\n                         {\n                             {\"height\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"Selected statistic\"},\n                             {\"time\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"Selected statistic\"},"
      },
      {
        "sha": "93fa3a2728772f52bea11bd0635f673d4c91e13f",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0c24c96e9937f666dcdd83d12145720c7b0329/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0c24c96e9937f666dcdd83d12145720c7b0329/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=fa0c24c96e9937f666dcdd83d12145720c7b0329",
        "patch": "@@ -717,7 +717,7 @@ static UniValue submitblock(const JSONRPCRequest& request)\n                 \"See https://en.bitcoin.it/wiki/BIP_0022 for full specification.\\n\",\n                 {\n                     {\"hexdata\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"the hex-encoded block data to submit\"},\n-                    {\"dummy\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"dummy value, for compatibility with BIP22. This value is ignored.\"},\n+                    {\"dummy\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"ignored\", \"dummy value, for compatibility with BIP22. This value is ignored.\"},\n                 }}\n                 .ToString() +\n             \"\\nResult:\\n\"\n@@ -888,9 +888,9 @@ static UniValue estimaterawfee(const JSONRPCRequest& request)\n                 \"defined in BIP 141 (witness data is discounted).\\n\",\n                 {\n                     {\"conf_target\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"Confirmation target in blocks (1 - 1008)\"},\n-                    {\"threshold\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"\", \"The proportion of transactions in a given feerate range that must have been\\n\"\n+                    {\"threshold\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"0.95\", \"The proportion of transactions in a given feerate range that must have been\\n\"\n             \"               confirmed within conf_target in order to consider those feerates as high enough and proceed to check\\n\"\n-            \"               lower buckets.  Default: 0.95\"},\n+            \"               lower buckets.\"},\n                 }}\n                 .ToString() +\n             \"\\nResult:\\n\""
      },
      {
        "sha": "18c867bff32a6bded21e65f2e93315f65564cc64",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0c24c96e9937f666dcdd83d12145720c7b0329/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0c24c96e9937f666dcdd83d12145720c7b0329/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=fa0c24c96e9937f666dcdd83d12145720c7b0329",
        "patch": "@@ -90,7 +90,7 @@ static UniValue createmultisig(const JSONRPCRequest& request)\n                         {\n                             {\"key\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The hex-encoded public key\"},\n                         }},\n-                    {\"address_type\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"The address type to use. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\". Default is legacy.\"},\n+                    {\"address_type\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"legacy\", \"The address type to use. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n                 }}\n                 .ToString() +\n             \"\\nResult:\\n\"\n@@ -311,7 +311,7 @@ static UniValue getmemoryinfo(const JSONRPCRequest& request)\n             RPCHelpMan{\"getmemoryinfo\",\n                 \"Returns an object containing information about memory usage.\\n\",\n                 {\n-                    {\"mode\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"determines what kind of information is returned. This argument is optional, the default mode is \\\"stats\\\".\\n\"\n+                    {\"mode\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\\\"stats\\\"\", \"determines what kind of information is returned.\\n\"\n             \"  - \\\"stats\\\" returns general statistics about memory usage in the daemon.\\n\"\n             \"  - \\\"mallocinfo\\\" returns an XML string describing low-level heap state (only available if compiled with glibc 2.10+).\"},\n                 }}\n@@ -384,11 +384,11 @@ UniValue logging(const JSONRPCRequest& request)\n             \"  - \\\"none\\\", \\\"0\\\" : even if other logging categories are specified, ignore all of them.\\n\"\n             ,\n                 {\n-                    {\"include\", RPCArg::Type::ARR, /* opt */ true, /* default_val */ \"\", \"A json array of categories to add debug logging\",\n+                    {\"include\", RPCArg::Type::ARR, /* opt */ true, /* default_val */ \"null\", \"A json array of categories to add debug logging\",\n                         {\n                             {\"include_category\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"the valid logging category\"},\n                         }},\n-                    {\"exclude\", RPCArg::Type::ARR, /* opt */ true, /* default_val */ \"\", \"A json array of categories to remove debug logging\",\n+                    {\"exclude\", RPCArg::Type::ARR, /* opt */ true, /* default_val */ \"null\", \"A json array of categories to remove debug logging\",\n                         {\n                             {\"exclude_category\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"the valid logging category\"},\n                         }},"
      },
      {
        "sha": "4d6b260cc76e6d054ecbfca2dca12c081735f586",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0c24c96e9937f666dcdd83d12145720c7b0329/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0c24c96e9937f666dcdd83d12145720c7b0329/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=fa0c24c96e9937f666dcdd83d12145720c7b0329",
        "patch": "@@ -255,8 +255,8 @@ static UniValue disconnectnode(const JSONRPCRequest& request)\n                 \"\\nStrictly one out of 'address' and 'nodeid' can be provided to identify the node.\\n\"\n                 \"\\nTo disconnect by nodeid, either set 'address' to the empty string, or call using the named 'nodeid' argument only.\\n\",\n                 {\n-                    {\"address\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"The IP address/port of the node\"},\n-                    {\"nodeid\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"\", \"The node ID (see getpeerinfo for node IDs)\"},\n+                    {\"address\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"fallback to nodeid\", \"The IP address/port of the node\"},\n+                    {\"nodeid\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"fallback to address\", \"The node ID (see getpeerinfo for node IDs)\"},\n                 }}\n                 .ToString() +\n             \"\\nExamples:\\n\"\n@@ -299,7 +299,7 @@ static UniValue getaddednodeinfo(const JSONRPCRequest& request)\n                 \"\\nReturns information about the given added node, or all added nodes\\n\"\n                 \"(note that onetry addnodes are not listed here)\\n\",\n                 {\n-                    {\"node\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"If provided, return information about this specific node, otherwise all nodes are returned.\"},\n+                    {\"node\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"all nodes\", \"If provided, return information about this specific node, otherwise all nodes are returned.\"},\n                 }}\n                 .ToString() +\n             \"\\nResult:\\n\"\n@@ -518,8 +518,8 @@ static UniValue setban(const JSONRPCRequest& request)\n                 {\n                     {\"subnet\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The IP/Subnet (see getpeerinfo for nodes IP) with an optional netmask (default is /32 = single IP)\"},\n                     {\"command\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"'add' to add an IP/Subnet to the list, 'remove' to remove an IP/Subnet from the list\"},\n-                    {\"bantime\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"\", \"time in seconds how long (or until when if [absolute] is set) the IP is banned (0 or empty means using the default time of 24h which can also be overwritten by the -bantime startup argument)\"},\n-                    {\"absolute\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"\", \"If set, the bantime must be an absolute timestamp in seconds since epoch (Jan 1 1970 GMT)\"},\n+                    {\"bantime\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"0\", \"time in seconds how long (or until when if [absolute] is set) the IP is banned (0 or empty means using the default time of 24h which can also be overwritten by the -bantime startup argument)\"},\n+                    {\"absolute\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"If set, the bantime must be an absolute timestamp in seconds since epoch (Jan 1 1970 GMT)\"},\n                 }}\n                 .ToString() +\n                             \"\\nExamples:\\n\""
      },
      {
        "sha": "6f07e121bed83cf0354237287d5f5299ee982585",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0c24c96e9937f666dcdd83d12145720c7b0329/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0c24c96e9937f666dcdd83d12145720c7b0329/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=fa0c24c96e9937f666dcdd83d12145720c7b0329",
        "patch": "@@ -81,7 +81,7 @@ static UniValue getrawtransaction(const JSONRPCRequest& request)\n                 {\n                     {\"txid\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The transaction id\"},\n                     {\"verbose\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"If false, return a string, otherwise return a json object\"},\n-                    {\"blockhash\", RPCArg::Type::STR_HEX, /* opt */ true, /* default_val */ \"\", \"The block in which to look for the transaction\"},\n+                    {\"blockhash\", RPCArg::Type::STR_HEX, /* opt */ true, /* default_val */ \"null\", \"The block in which to look for the transaction\"},\n                 }}\n                 .ToString() +\n             \"\\nResult (if verbose is not set or set to false):\\n\"\n@@ -218,7 +218,7 @@ static UniValue gettxoutproof(const JSONRPCRequest& request)\n                             {\"txid\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"A transaction hash\"},\n                         },\n                         },\n-                    {\"blockhash\", RPCArg::Type::STR_HEX, /* opt */ true, /* default_val */ \"\", \"If specified, looks for txid in the block with this hash\"},\n+                    {\"blockhash\", RPCArg::Type::STR_HEX, /* opt */ true, /* default_val */ \"null\", \"If specified, looks for txid in the block with this hash\"},\n                 }}\n                 .ToString() +\n             \"\\nResult:\\n\"\n@@ -457,11 +457,11 @@ static UniValue createrawtransaction(const JSONRPCRequest& request)\n                 {\n                     {\"inputs\", RPCArg::Type::ARR, /* opt */ false, /* default_val */ \"\", \"A json array of json objects\",\n                         {\n-                            {\"\", RPCArg::Type::OBJ, /* opt */ false, /* default_val */ \"\", \"\",\n+                            {\"\", RPCArg::Type::OBJ, /* opt */ true, /* default_val */ \"\", \"\",\n                                 {\n                                     {\"txid\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The transaction id\"},\n                                     {\"vout\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"The output number\"},\n-                                    {\"sequence\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"\", \"The sequence number\"},\n+                                    {\"sequence\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"depends on the value of the 'replaceable' and 'locktime' arguments\", \"The sequence number\"},\n                                 },\n                                 },\n                         },\n@@ -519,7 +519,7 @@ static UniValue decoderawtransaction(const JSONRPCRequest& request)\n                 \"\\nReturn a JSON object representing the serialized, hex-encoded transaction.\\n\",\n                 {\n                     {\"hexstring\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The transaction hex string\"},\n-                    {\"iswitness\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"\", \"Whether the transaction hex is a serialized witness transaction\\n\"\n+                    {\"iswitness\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"depends on heuristic tests\", \"Whether the transaction hex is a serialized witness transaction\\n\"\n             \"                         If iswitness is not present, heuristic tests will be used in decoding\"},\n                 }}\n                 .ToString() +\n@@ -923,14 +923,14 @@ static UniValue signrawtransactionwithkey(const JSONRPCRequest& request)\n                             {\"privatekey\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"private key in base58-encoding\"},\n                         },\n                         },\n-                    {\"prevtxs\", RPCArg::Type::ARR, /* opt */ true, /* default_val */ \"\", \"A json array of previous dependent transaction outputs\",\n+                    {\"prevtxs\", RPCArg::Type::ARR, /* opt */ true, /* default_val */ \"null\", \"A json array of previous dependent transaction outputs\",\n                         {\n                             {\"\", RPCArg::Type::OBJ, /* opt */ true, /* default_val */ \"\", \"\",\n                                 {\n                                     {\"txid\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The transaction id\"},\n                                     {\"vout\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"The output number\"},\n                                     {\"scriptPubKey\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"script key\"},\n-                                    {\"redeemScript\", RPCArg::Type::STR_HEX, /* opt */ true, /* default_val */ \"\", \"(required for P2SH or P2WSH) redeem script\"},\n+                                    {\"redeemScript\", RPCArg::Type::STR_HEX, /* opt */ true, /* default_val */ \"omitted\", \"(required for P2SH or P2WSH) redeem script\"},\n                                     {\"amount\", RPCArg::Type::AMOUNT, /* opt */ false, /* default_val */ \"\", \"The amount spent\"},\n                                 },\n                                 },\n@@ -1603,7 +1603,7 @@ UniValue createpsbt(const JSONRPCRequest& request)\n                                 {\n                                     {\"txid\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The transaction id\"},\n                                     {\"vout\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"The output number\"},\n-                                    {\"sequence\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"\", \"The sequence number\"},\n+                                    {\"sequence\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"depends on the value of the 'replaceable' and 'locktime' arguments\", \"The sequence number\"},\n                                 },\n                                 },\n                         },\n@@ -1674,7 +1674,7 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n                     {\"hexstring\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The hex string of a raw transaction\"},\n                     {\"permitsigdata\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"If true, any signatures in the input will be discarded and conversion.\\n\"\n                             \"                              will continue. If false, RPC will fail if any signatures are present.\"},\n-                    {\"iswitness\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"\", \"Whether the transaction hex is a serialized witness transaction.\\n\"\n+                    {\"iswitness\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"depends on heuristic tests\", \"Whether the transaction hex is a serialized witness transaction.\\n\"\n                             \"                              If iswitness is not present, heuristic tests will be used in decoding. If true, only witness deserializaion\\n\"\n                             \"                              will be tried. If false, only non-witness deserialization will be tried. Only has an effect if\\n\"\n                             \"                              permitsigdata is true.\"},"
      },
      {
        "sha": "e25cae775bd84c1672370ac3ad814346b21cb567",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0c24c96e9937f666dcdd83d12145720c7b0329/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0c24c96e9937f666dcdd83d12145720c7b0329/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=fa0c24c96e9937f666dcdd83d12145720c7b0329",
        "patch": "@@ -203,7 +203,7 @@ UniValue help(const JSONRPCRequest& jsonRequest)\n             RPCHelpMan{\"help\",\n                 \"\\nList all commands, or get help for a specified command.\\n\",\n                 {\n-                    {\"command\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"The command to get help on\"},\n+                    {\"command\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"all commands\", \"The command to get help on\"},\n                 }}\n                 .ToString() +\n             \"\\nResult:\\n\""
      },
      {
        "sha": "2185c8d52edb754fde36cf54a3f66a30045b8d0f",
        "filename": "src/rpc/util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0c24c96e9937f666dcdd83d12145720c7b0329/src/rpc/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0c24c96e9937f666dcdd83d12145720c7b0329/src/rpc/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.h?ref=fa0c24c96e9937f666dcdd83d12145720c7b0329",
        "patch": "@@ -90,7 +90,7 @@ struct RPCArg {\n \n     /**\n      * Return the type string of the argument.\n-     * Set oneline to allow it to be overrided by a custom oneline type string (m_oneline_description).\n+     * Set oneline to allow it to be overridden by a custom oneline type string (m_oneline_description).\n      */\n     std::string ToString(bool oneline) const;\n     /**"
      },
      {
        "sha": "647af3eb8660a31f0eeba2d728a64ecc76e93e90",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0c24c96e9937f666dcdd83d12145720c7b0329/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0c24c96e9937f666dcdd83d12145720c7b0329/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=fa0c24c96e9937f666dcdd83d12145720c7b0329",
        "patch": "@@ -1120,14 +1120,14 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n         \"                                                              creation time of all keys being imported by the importmulti call will be scanned.\",\n                                         /* oneline_description */ \"\", {\"timestamp | \\\"now\\\"\", \"integer / string\"}\n                                     },\n-                                    {\"redeemscript\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"Allowed only if the scriptPubKey is a P2SH or P2SH-P2WSH address/scriptPubKey\"},\n-                                    {\"witnessscript\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"Allowed only if the scriptPubKey is a P2SH-P2WSH or P2WSH address/scriptPubKey\"},\n-                                    {\"pubkeys\", RPCArg::Type::ARR, /* opt */ true, /* default_val */ \"\", \"Array of strings giving pubkeys that must occur in the output or redeemscript\",\n+                                    {\"redeemscript\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"omitted\", \"Allowed only if the scriptPubKey is a P2SH or P2SH-P2WSH address/scriptPubKey\"},\n+                                    {\"witnessscript\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"omitted\", \"Allowed only if the scriptPubKey is a P2SH-P2WSH or P2WSH address/scriptPubKey\"},\n+                                    {\"pubkeys\", RPCArg::Type::ARR, /* opt */ true, /* default_val */ \"empty array\", \"Array of strings giving pubkeys that must occur in the output or redeemscript\",\n                                         {\n                                             {\"pubKey\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"\"},\n                                         }\n                                     },\n-                                    {\"keys\", RPCArg::Type::ARR, /* opt */ true, /* default_val */ \"\", \"Array of strings giving private keys whose corresponding public keys must occur in the output or redeemscript\",\n+                                    {\"keys\", RPCArg::Type::ARR, /* opt */ true, /* default_val */ \"empty array\", \"Array of strings giving private keys whose corresponding public keys must occur in the output or redeemscript\",\n                                         {\n                                             {\"key\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"\"},\n                                         }\n@@ -1139,7 +1139,7 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n                             },\n                         },\n                         \"\\\"requests\\\"\"},\n-                    {\"options\", RPCArg::Type::OBJ, /* opt */ true, /* default_val */ \"\", \"\",\n+                    {\"options\", RPCArg::Type::OBJ, /* opt */ true, /* default_val */ \"null\", \"\",\n                         {\n                             {\"rescan\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"true\", \"Stating if should rescan the blockchain after all imports\"},\n                         },"
      },
      {
        "sha": "5482c61245e31737ef771990644838a88f43f448",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 45,
        "deletions": 47,
        "changes": 92,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0c24c96e9937f666dcdd83d12145720c7b0329/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0c24c96e9937f666dcdd83d12145720c7b0329/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=fa0c24c96e9937f666dcdd83d12145720c7b0329",
        "patch": "@@ -155,8 +155,8 @@ static UniValue getnewaddress(const JSONRPCRequest& request)\n                 \"If 'label' is specified, it is added to the address book \\n\"\n                 \"so payments received with the address will be associated with 'label'.\\n\",\n                 {\n-                    {\"label\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"The label name for the address to be linked to. If not provided, the default label \\\"\\\" is used. It can also be set to the empty string \\\"\\\" to represent the default label. The label does not need to exist, it will be created if there is no label by the given name.\"},\n-                    {\"address_type\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"The address type to use. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\". Default is set by -addresstype.\"},\n+                    {\"label\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"null\", \"The label name for the address to be linked to. If not provided, the default label \\\"\\\" is used. It can also be set to the empty string \\\"\\\" to represent the default label. The label does not need to exist, it will be created if there is no label by the given name.\"},\n+                    {\"address_type\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"set by -addresstype\", \"The address type to use. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n                 }}\n                 .ToString() +\n             \"\\nResult:\\n\"\n@@ -216,7 +216,7 @@ static UniValue getrawchangeaddress(const JSONRPCRequest& request)\n                 \"\\nReturns a new Bitcoin address, for receiving change.\\n\"\n                 \"This is for use with raw transactions, NOT normal use.\\n\",\n                 {\n-                    {\"address_type\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"The address type to use. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\". Default is set by -changetype.\"},\n+                    {\"address_type\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"set by -changetype\", \"The address type to use. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n                 }}\n                 .ToString() +\n             \"\\nResult:\\n\"\n@@ -356,15 +356,15 @@ static UniValue sendtoaddress(const JSONRPCRequest& request)\n                 {\n                     {\"address\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The bitcoin address to send to.\"},\n                     {\"amount\", RPCArg::Type::AMOUNT, /* opt */ false, /* default_val */ \"\", \"The amount in \" + CURRENCY_UNIT + \" to send. eg 0.1\"},\n-                    {\"comment\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"A comment used to store what the transaction is for.\\n\"\n+                    {\"comment\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"null\", \"A comment used to store what the transaction is for.\\n\"\n             \"                             This is not part of the transaction, just kept in your wallet.\"},\n-                    {\"comment_to\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"A comment to store the name of the person or organization\\n\"\n+                    {\"comment_to\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"null\", \"A comment to store the name of the person or organization\\n\"\n             \"                             to which you're sending the transaction. This is not part of the \\n\"\n             \"                             transaction, just kept in your wallet.\"},\n                     {\"subtractfeefromamount\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"The fee will be deducted from the amount being sent.\\n\"\n             \"                             The recipient will receive less bitcoins than you enter in the amount field.\"},\n-                    {\"replaceable\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"\", \"Allow this transaction to be replaced by a transaction with higher fees via BIP 125\"},\n-                    {\"conf_target\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"\", \"Confirmation target (in blocks)\"},\n+                    {\"replaceable\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"fallback to wallet's default\", \"Allow this transaction to be replaced by a transaction with higher fees via BIP 125\"},\n+                    {\"conf_target\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"fallback to wallet's default\", \"Confirmation target (in blocks)\"},\n                     {\"estimate_mode\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"UNSET\", \"The fee estimate mode, must be one of:\\n\"\n             \"       \\\"UNSET\\\"\\n\"\n             \"       \\\"ECONOMICAL\\\"\\n\"\n@@ -715,7 +715,7 @@ static UniValue getbalance(const JSONRPCRequest& request)\n                 \"The available balance is what the wallet considers currently spendable, and is\\n\"\n                 \"thus affected by options which limit spendability such as -spendzeroconfchange.\\n\",\n                 {\n-                    {\"dummy\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"Remains for backward compatibility. Must be excluded or set to \\\"*\\\".\"},\n+                    {\"dummy\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"null\", \"Remains for backward compatibility. Must be excluded or set to \\\"*\\\".\"},\n                     {\"minconf\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"0\", \"Only include transactions confirmed at least this many times.\"},\n                     {\"include_watchonly\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Also include balance in watch-only addresses (see 'importaddress')\"},\n                 }}\n@@ -804,17 +804,17 @@ static UniValue sendmany(const JSONRPCRequest& request)\n                         },\n                     },\n                     {\"minconf\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"1\", \"Only use the balance confirmed at least this many times.\"},\n-                    {\"comment\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"A comment\"},\n-                    {\"subtractfeefrom\", RPCArg::Type::ARR, /* opt */ true, /* default_val */ \"\", \"A json array with addresses.\\n\"\n+                    {\"comment\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"null\", \"A comment\"},\n+                    {\"subtractfeefrom\", RPCArg::Type::ARR, /* opt */ true, /* default_val */ \"null\", \"A json array with addresses.\\n\"\n             \"                           The fee will be equally deducted from the amount of each selected address.\\n\"\n             \"                           Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n             \"                           If no addresses are specified here, the sender pays the fee.\",\n                         {\n                             {\"address\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"Subtract fee from this address\"},\n                         },\n                     },\n-                    {\"replaceable\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"\", \"Allow this transaction to be replaced by a transaction with higher fees via BIP 125\"},\n-                    {\"conf_target\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"\", \"Confirmation target (in blocks)\"},\n+                    {\"replaceable\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"fallback to wallet's default\", \"Allow this transaction to be replaced by a transaction with higher fees via BIP 125\"},\n+                    {\"conf_target\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"fallback to wallet's default\", \"Confirmation target (in blocks)\"},\n                     {\"estimate_mode\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"UNSET\", \"The fee estimate mode, must be one of:\\n\"\n             \"       \\\"UNSET\\\"\\n\"\n             \"       \\\"ECONOMICAL\\\"\\n\"\n@@ -962,8 +962,8 @@ static UniValue addmultisigaddress(const JSONRPCRequest& request)\n                             {\"key\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"bitcoin address or hex-encoded public key\"},\n                         },\n                         },\n-                    {\"label\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"A label to assign the addresses to.\"},\n-                    {\"address_type\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"The address type to use. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\". Default is set by -addresstype.\"},\n+                    {\"label\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"null\", \"A label to assign the addresses to.\"},\n+                    {\"address_type\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"set by -addresstype\", \"The address type to use. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n                 }}\n                 .ToString() +\n             \"\\nResult:\\n\"\n@@ -1195,7 +1195,7 @@ static UniValue listreceivedbyaddress(const JSONRPCRequest& request)\n                     {\"minconf\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"1\", \"The minimum number of confirmations before payments are included.\"},\n                     {\"include_empty\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Whether to include addresses that haven't received any payments.\"},\n                     {\"include_watchonly\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Whether to include watch-only addresses (see 'importaddress').\"},\n-                    {\"address_filter\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"If present, only return information on this address.\"},\n+                    {\"address_filter\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"null\", \"If present, only return information on this address.\"},\n                 }}\n                 .ToString() +\n             \"\\nResult:\\n\"\n@@ -1386,7 +1386,7 @@ UniValue listtransactions(const JSONRPCRequest& request)\n                 \"\\nIf a label name is provided, this will return only incoming transactions paying to addresses with the specified label.\\n\"\n                 \"\\nReturns up to 'count' most recent transactions skipping the first 'from' transactions.\\n\",\n                 {\n-                    {\"label\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"If set, should be a valid label name to return only incoming transactions\\n\"\n+                    {\"label\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"null\", \"If set, should be a valid label name to return only incoming transactions\\n\"\n             \"              with the specified label, or \\\"*\\\" to disable filtering and return all transactions.\"},\n                     {\"count\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"10\", \"The number of transactions to return\"},\n                     {\"skip\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"0\", \"The number of transactions to skip\"},\n@@ -1516,7 +1516,7 @@ static UniValue listsinceblock(const JSONRPCRequest& request)\n                 \"If \\\"blockhash\\\" is no longer a part of the main chain, transactions from the fork point onward are included.\\n\"\n                 \"Additionally, if include_removed is set, transactions affecting the wallet which were removed are returned in the \\\"removed\\\" array.\\n\",\n                 {\n-                    {\"blockhash\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"The block hash to list transactions since\"},\n+                    {\"blockhash\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"null\", \"If set, the block hash to list transactions since, otherwise list all transactions.\"},\n                     {\"target_confirmations\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"1\", \"Return the nth block hash from the main chain. e.g. 1 would mean the best block hash. Note: this is not used as a filter, but only affects [lastblock] in the return value\"},\n                     {\"include_watchonly\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Include transactions to watch-only addresses (see 'importaddress')\"},\n                     {\"include_removed\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"true\", \"Show transactions that were removed due to a reorg in the \\\"removed\\\" array\\n\"\n@@ -2136,7 +2136,7 @@ static UniValue lockunspent(const JSONRPCRequest& request)\n                 \"Also see the listunspent call\\n\",\n                 {\n                     {\"unlock\", RPCArg::Type::BOOL, /* opt */ false, /* default_val */ \"\", \"Whether to unlock (true) or lock (false) the specified transactions\"},\n-                    {\"transactions\", RPCArg::Type::ARR, /* opt */ true, /* default_val */ \"\", \"A json array of objects. Each object the txid (string) vout (numeric)\",\n+                    {\"transactions\", RPCArg::Type::ARR, /* opt */ true, /* default_val */ \"empty array\", \"A json array of objects. Each object the txid (string) vout (numeric).\",\n                         {\n                             {\"\", RPCArg::Type::OBJ, /* opt */ true, /* default_val */ \"\", \"\",\n                                 {\n@@ -2596,7 +2596,7 @@ static UniValue unloadwallet(const JSONRPCRequest& request)\n                 \"Unloads the wallet referenced by the request endpoint otherwise unloads the wallet specified in the argument.\\n\"\n                 \"Specifying the wallet name on a wallet endpoint is invalid.\",\n                 {\n-                    {\"wallet_name\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"The name of the wallet to unload.\"},\n+                    {\"wallet_name\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"the wallet name from the RPC request\", \"The name of the wallet to unload.\"},\n                 }}\n                 .ToString() +\n             \"\\nExamples:\\n\"\n@@ -2697,14 +2697,14 @@ static UniValue listunspent(const JSONRPCRequest& request)\n                 {\n                     {\"minconf\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"1\", \"The minimum confirmations to filter\"},\n                     {\"maxconf\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"9999999\", \"The maximum confirmations to filter\"},\n-                    {\"addresses\", RPCArg::Type::ARR, /* opt */ true, /* default_val */ \"\", \"A json array of bitcoin addresses to filter\",\n+                    {\"addresses\", RPCArg::Type::ARR, /* opt */ true, /* default_val */ \"empty array\", \"A json array of bitcoin addresses to filter\",\n                         {\n                             {\"address\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"bitcoin address\"},\n                         },\n                     },\n                     {\"include_unsafe\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"true\", \"Include outputs that are not safe to spend\\n\"\n             \"                  See description of \\\"safe\\\" attribute below.\"},\n-                    {\"query_options\", RPCArg::Type::OBJ, /* opt */ true, /* default_val */ \"\", \"JSON with query options\",\n+                    {\"query_options\", RPCArg::Type::OBJ, /* opt */ true, /* default_val */ \"null\", \"JSON with query options\",\n                         {\n                             {\"minimumAmount\", RPCArg::Type::AMOUNT, /* opt */ true, /* default_val */ \"0\", \"Minimum value of each UTXO in \" + CURRENCY_UNIT + \"\"},\n                             {\"maximumAmount\", RPCArg::Type::AMOUNT, /* opt */ true, /* default_val */ \"unlimited\", \"Maximum value of each UTXO in \" + CURRENCY_UNIT + \"\"},\n@@ -2997,33 +2997,32 @@ static UniValue fundrawtransaction(const JSONRPCRequest& request)\n                 \"Only pay-to-pubkey, multisig, and P2SH versions thereof are currently supported for watch-only\\n\",\n                 {\n                     {\"hexstring\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The hex string of the raw transaction\"},\n-                    {\"options\", RPCArg::Type::OBJ, /* opt */ true, /* default_val */ \"\", \"for backward compatibility: passing in a true instead of an object will result in {\\\"includeWatching\\\":true}\",\n+                    {\"options\", RPCArg::Type::OBJ, /* opt */ true, /* default_val */ \"null\", \"for backward compatibility: passing in a true instead of an object will result in {\\\"includeWatching\\\":true}\",\n                         {\n                             {\"changeAddress\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"pool address\", \"The bitcoin address to receive the change\"},\n                             {\"changePosition\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"random\", \"The index of the change output\"},\n-                            {\"change_type\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"The output type to use. Only valid if changeAddress is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\". Default is set by -changetype.\"},\n+                            {\"change_type\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"set by -changetype\", \"The output type to use. Only valid if changeAddress is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n                             {\"includeWatching\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Also select inputs which are watch only\"},\n                             {\"lockUnspents\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Lock selected unspent outputs\"},\n                             {\"feeRate\", RPCArg::Type::AMOUNT, /* opt */ true, /* default_val */ \"not set: makes wallet determine the fee\", \"Set a specific fee rate in \" + CURRENCY_UNIT + \"/kB\"},\n-                            {\"subtractFeeFromOutputs\", RPCArg::Type::ARR, /* opt */ true, /* default_val */ \"\", \"A json array of integers.\\n\"\n+                            {\"subtractFeeFromOutputs\", RPCArg::Type::ARR, /* opt */ true, /* default_val */ \"empty array\", \"A json array of integers.\\n\"\n                             \"                              The fee will be equally deducted from the amount of each specified output.\\n\"\n-                            \"                              The outputs are specified by their zero-based index, before any change output is added.\\n\"\n                             \"                              Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n                             \"                              If no outputs are specified here, the sender pays the fee.\",\n                                 {\n                                     {\"vout_index\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"\", \"The zero-based output index, before a change output is added.\"},\n                                 },\n                             },\n-                            {\"replaceable\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"\", \"Marks this transaction as BIP125 replaceable.\\n\"\n+                            {\"replaceable\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"fallback to wallet's default\", \"Marks this transaction as BIP125 replaceable.\\n\"\n                             \"                              Allows this transaction to be replaced by a transaction with higher fees\"},\n-                            {\"conf_target\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"\", \"Confirmation target (in blocks)\"},\n+                            {\"conf_target\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"fallback to wallet's default\", \"Confirmation target (in blocks)\"},\n                             {\"estimate_mode\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"UNSET\", \"The fee estimate mode, must be one of:\\n\"\n                             \"         \\\"UNSET\\\"\\n\"\n                             \"         \\\"ECONOMICAL\\\"\\n\"\n                             \"         \\\"CONSERVATIVE\\\"\"},\n                         },\n                         \"options\"},\n-                    {\"iswitness\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"\", \"Whether the transaction hex is a serialized witness transaction \\n\"\n+                    {\"iswitness\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"depends on heuristic tests\", \"Whether the transaction hex is a serialized witness transaction \\n\"\n                             \"                              If iswitness is not present, heuristic tests will be used in decoding\"},\n                 }}\n                 .ToString() +\n@@ -3084,14 +3083,14 @@ UniValue signrawtransactionwithwallet(const JSONRPCRequest& request)\n                     HelpRequiringPassphrase(pwallet) + \"\\n\",\n                 {\n                     {\"hexstring\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The transaction hex string\"},\n-                    {\"prevtxs\", RPCArg::Type::ARR, /* opt */ true, /* default_val */ \"\", \"A json array of previous dependent transaction outputs\",\n+                    {\"prevtxs\", RPCArg::Type::ARR, /* opt */ true, /* default_val */ \"null\", \"A json array of previous dependent transaction outputs\",\n                         {\n                             {\"\", RPCArg::Type::OBJ, /* opt */ false, /* default_val */ \"\", \"\",\n                                 {\n                                     {\"txid\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The transaction id\"},\n                                     {\"vout\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"The output number\"},\n                                     {\"scriptPubKey\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"script key\"},\n-                                    {\"redeemScript\", RPCArg::Type::STR_HEX, /* opt */ true, /* default_val */ \"\", \"(required for P2SH or P2WSH)\"},\n+                                    {\"redeemScript\", RPCArg::Type::STR_HEX, /* opt */ true, /* default_val */ \"omitted\", \"(required for P2SH or P2WSH)\"},\n                                     {\"amount\", RPCArg::Type::AMOUNT, /* opt */ false, /* default_val */ \"\", \"The amount spent\"},\n                                 },\n                             },\n@@ -3167,10 +3166,10 @@ static UniValue bumpfee(const JSONRPCRequest& request)\n                 \"returned by getnetworkinfo) to enter the node's mempool.\\n\",\n                 {\n                     {\"txid\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The txid to be bumped\"},\n-                    {\"options\", RPCArg::Type::OBJ, /* opt */ true, /* default_val */ \"\", \"\",\n+                    {\"options\", RPCArg::Type::OBJ, /* opt */ true, /* default_val */ \"null\", \"\",\n                         {\n-                            {\"confTarget\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"\", \"Confirmation target (in blocks)\"},\n-                            {\"totalFee\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"\", \"Total fee (NOT feerate) to pay, in satoshis.\\n\"\n+                            {\"confTarget\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"fallback to wallet's default\", \"Confirmation target (in blocks)\"},\n+                            {\"totalFee\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"fallback to 'confTarget'\", \"Total fee (NOT feerate) to pay, in satoshis.\\n\"\n             \"                         In rare cases, the actual fee paid might be slightly higher than the specified\\n\"\n             \"                         totalFee if the tx change output has to be removed because it is too close to\\n\"\n             \"                         the dust threshold.\"},\n@@ -3312,7 +3311,7 @@ UniValue generate(const JSONRPCRequest& request)\n                 \"\\nMine up to nblocks blocks immediately (before the RPC call returns) to an address in the wallet.\\n\",\n                 {\n                     {\"nblocks\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"How many blocks are generated immediately.\"},\n-                    {\"maxtries\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"\", \"How many iterations to try (default = 1000000).\"},\n+                    {\"maxtries\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"1000000\", \"How many iterations to try.\"},\n                 }}\n                 .ToString() +\n             \"\\nResult:\\n\"\n@@ -3365,8 +3364,8 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n             RPCHelpMan{\"rescanblockchain\",\n                 \"\\nRescan the local blockchain for wallet related transactions.\\n\",\n                 {\n-                    {\"start_height\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"\", \"block height where the rescan should start\"},\n-                    {\"stop_height\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"\", \"the last block height that should be scanned\"},\n+                    {\"start_height\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"0\", \"block height where the rescan should start\"},\n+                    {\"stop_height\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"tip height\", \"the last block height that should be scanned\"},\n                 }}\n                 .ToString() +\n             \"\\nResult:\\n\"\n@@ -3749,7 +3748,7 @@ static UniValue listlabels(const JSONRPCRequest& request)\n             RPCHelpMan{\"listlabels\",\n                 \"\\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\\n\",\n                 {\n-                    {\"purpose\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\"},\n+                    {\"purpose\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"null\", \"Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\"},\n                 }}\n                 .ToString() +\n             \"\\nResult:\\n\"\n@@ -3812,7 +3811,7 @@ UniValue sethdseed(const JSONRPCRequest& request)\n             \"                             If true, the next address from getnewaddress and change address from getrawchangeaddress will be from this new seed.\\n\"\n             \"                             If false, addresses (including change addresses if the wallet already had HD Chain Split enabled) from the existing\\n\"\n             \"                             keypool will be used until it has been depleted.\"},\n-                    {\"seed\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"The WIF private key to use as the new HD seed; if not provided a random seed will be used.\\n\"\n+                    {\"seed\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"random seed\", \"The WIF private key to use as the new HD seed.\\n\"\n             \"                             The seed value can be retrieved using the dumpwallet command. It is the private key marked hdseed=1\"},\n                 }}\n                 .ToString() +\n@@ -4029,38 +4028,37 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n                         {\n                             {\"\", RPCArg::Type::OBJ, /* opt */ true, /* default_val */ \"\", \"\",\n                                 {\n-                                    {\"address\", RPCArg::Type::AMOUNT, /* opt */ true, /* default_val */ \"\", \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                                    {\"address\", RPCArg::Type::AMOUNT, /* opt */ false, /* default_val */ \"\", \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n                                 },\n                                 },\n                             {\"\", RPCArg::Type::OBJ, /* opt */ true, /* default_val */ \"\", \"\",\n                                 {\n-                                    {\"data\", RPCArg::Type::STR_HEX, /* opt */ true, /* default_val */ \"\", \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},\n+                                    {\"data\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},\n                                 },\n                             },\n                         },\n                     },\n                     {\"locktime\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"0\", \"Raw locktime. Non-0 value also locktime-activates inputs\\n\"\n                             \"                             Allows this transaction to be replaced by a transaction with higher fees. If provided, it is an error if explicit sequence numbers are incompatible.\"},\n-                    {\"options\", RPCArg::Type::OBJ, /* opt */ true, /* default_val */ \"\", \"\",\n+                    {\"options\", RPCArg::Type::OBJ, /* opt */ true, /* default_val */ \"null\", \"\",\n                         {\n                             {\"changeAddress\", RPCArg::Type::STR_HEX, /* opt */ true, /* default_val */ \"pool address\", \"The bitcoin address to receive the change\"},\n                             {\"changePosition\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"random\", \"The index of the change output\"},\n-                            {\"change_type\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"The output type to use. Only valid if changeAddress is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\". Default is set by -changetype.\"},\n+                            {\"change_type\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"set by -changetype\", \"The output type to use. Only valid if changeAddress is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n                             {\"includeWatching\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Also select inputs which are watch only\"},\n                             {\"lockUnspents\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Lock selected unspent outputs\"},\n                             {\"feeRate\", RPCArg::Type::AMOUNT, /* opt */ true, /* default_val */ \"not set: makes wallet determine the fee\", \"Set a specific fee rate in \" + CURRENCY_UNIT + \"/kB\"},\n-                            {\"subtractFeeFromOutputs\", RPCArg::Type::ARR, /* opt */ true, /* default_val */ \"\", \"A json array of integers.\\n\"\n+                            {\"subtractFeeFromOutputs\", RPCArg::Type::ARR, /* opt */ true, /* default_val */ \"empty array\", \"A json array of integers.\\n\"\n                             \"                              The fee will be equally deducted from the amount of each specified output.\\n\"\n-                            \"                              The outputs are specified by their zero-based index, before any change output is added.\\n\"\n                             \"                              Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n                             \"                              If no outputs are specified here, the sender pays the fee.\",\n                                 {\n-                                    {\"vout_index\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"\", \"\"},\n+                                    {\"vout_index\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"\", \"The zero-based output index, before a change output is added.\"},\n                                 },\n                             },\n-                            {\"replaceable\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"\", \"Marks this transaction as BIP125 replaceable.\\n\"\n+                            {\"replaceable\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Marks this transaction as BIP125 replaceable.\\n\"\n                             \"                              Allows this transaction to be replaced by a transaction with higher fees\"},\n-                            {\"conf_target\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"\", \"Confirmation target (in blocks)\"},\n+                            {\"conf_target\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"Fallback to wallet's confirmation target\", \"Confirmation target (in blocks)\"},\n                             {\"estimate_mode\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"UNSET\", \"The fee estimate mode, must be one of:\\n\"\n                             \"         \\\"UNSET\\\"\\n\"\n                             \"         \\\"ECONOMICAL\\\"\\n\""
      }
    ]
  }
]