fanquake,2018-04-11T04:28:02Z,"cc @theuni\n@skeees Have you looked through the current work being done to refactor the P2P code? See [here](https://github.com/bitcoin/bitcoin/projects/4) for an overview.",https://github.com/bitcoin/bitcoin/pull/12934#issuecomment-380323422,380323422,
skeees,2018-04-11T13:27:26Z,"Thanks, yes I have looked through those. This is more focused on separation between net_processing (PeerLogicValidation) and validation, whereas those primarily tackle socket handling and other ConnMan stuff. I don't think there's anything here that's redundant or incompatible with those refactors",https://github.com/bitcoin/bitcoin/pull/12934#issuecomment-380451284,380451284,
instagibbs,2018-04-13T02:26:09Z,cc @TheBlueMatt ,https://github.com/bitcoin/bitcoin/pull/12934#issuecomment-381001882,381001882,
skeees,2018-04-23T22:52:16Z,"Thank you for the review - one thing (general design related) to add to the discussion here:\n\nSince I've submitted this request - I happened to stumble upon two race conditions in validation that stem from concurrent calls to ProcessNewBlock (#12988, #13023) \nThis pr should simplify the concurrency model for block validation (a single validation thread pulls a block to validate from the queu",https://github.com/bitcoin/bitcoin/pull/12934#issuecomment-383747761,383747761,
TheBlueMatt,2018-04-28T01:57:33Z,"I do think the general approach is fine. It's not going to be really at all useful until we do a ton of locking cleanups in net_processing (it'll let us run ahead to the next message, which almost always requires cs_main, and we'll end up blocking on validation anyway). It's probably simpler than multiple net_processing threads (with the same cleanups required) which was most of my previous work, ",https://github.com/bitcoin/bitcoin/pull/12934#issuecomment-385131498,385131498,
skeees,2018-06-05T11:54:33Z,"PR updated with latest commits, ready for review\nAlso, for reference, a discussion on high level design for this PR at the IRC meeting a couple weeks ago:\nhttps://bitcoincore.org/en/meetings/2018/05/03/\n",https://github.com/bitcoin/bitcoin/pull/12934#issuecomment-394681515,394681515,
skeees,2018-07-04T13:56:39Z,Thakns @ryanofsky - agree with basically everything you've said re commit 52ac3b5 - going to wait for some more comments to accumulate and address all at once so i don't mess up any other reviews that might be in progress,https://github.com/bitcoin/bitcoin/pull/12934#issuecomment-402486739,402486739,
DrahtBot,2018-08-08T15:07:28Z,<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase,https://github.com/bitcoin/bitcoin/pull/12934#issuecomment-411439716,411439716,
DrahtBot,2018-12-03T16:19:03Z,"<!--5fd3d806e98f4a0ca80977bb178665a0-->There hasn't been much activity lately and the patch still needs rebase, so I am closing this for now. Please let me know when you want to continue working on this, so the pull request can be re-opened.",https://github.com/bitcoin/bitcoin/pull/12934#issuecomment-443769361,443769361,
ryanofsky,2018-04-23T18:44:01Z,I think you could replace this class with `using WorkItem = std::function<void()>;`. Less code and would make queue interface more generic.,https://github.com/bitcoin/bitcoin/pull/12934#discussion_r183498792,183498792,src/core/consumerthread.h
ryanofsky,2018-04-23T18:50:50Z,Could maybe use TraceThread from util.h to make the thread name visible to the os.,https://github.com/bitcoin/bitcoin/pull/12934#discussion_r183500740,183500740,src/core/consumerthread.h
ryanofsky,2018-04-23T18:58:05Z,ShutdownPill seems a little complicated. What advantages does it provide over just adding `bool m_active` to  `ProducerConsumerQueue` with a simple method to set it to false and cancel blocked Pop() calls?,https://github.com/bitcoin/bitcoin/pull/12934#discussion_r183502878,183502878,src/core/consumerthread.h
ryanofsky,2018-04-23T19:09:03Z,"Could use make_shared here, MakeUnique below",https://github.com/bitcoin/bitcoin/pull/12934#discussion_r183505818,183505818,src/validation_layer.h
ryanofsky,2018-04-23T19:13:22Z,Probably should take unique_ptr instead of raw argument to clarify ownership,https://github.com/bitcoin/bitcoin/pull/12934#discussion_r183507013,183507013,src/validation_layer.h
skeees,2018-04-23T23:03:21Z,"Yeah - it is pretty complicated. I didn't want to poke through the queue api just to enable shutdown - you'd have to have `T Pop()` potentially not return a `T` (i.e. throw an exception) - which seemed less desirable and maybe equally complicated.\n\nHaving said that - a lot of the complexity here is introduced to handle:\n- being able to shutdown a specific ConsumerThread without shutting down",https://github.com/bitcoin/bitcoin/pull/12934#discussion_r183562777,183562777,src/core/consumerthread.h
ryanofsky,2018-06-14T17:11:53Z,"In commit ""Implement a thread-safe FIFO (producer/consumer style) queue"" (d8106146e7511837decb4b45de35dec654454b69)\n\nShould probably emplace_back to avoid creating a temporary.",https://github.com/bitcoin/bitcoin/pull/12934#discussion_r195502312,195502312,src/core/producerconsumerqueue.h
ryanofsky,2018-06-19T18:28:51Z,"In commit ""Implement a thread-safe FIFO (producer/consumer style) queue"" (d8106146e7511837decb4b45de35dec654454b69)\n\nI don't think it's a good idea for blocking and nonblocking defaults to be attributes of the Queue data structure, instead of arguments to (or variants of) the push and pop methods. Advantages to dropping these template arguments:\n\n1) Readability. It would be nice to be able",https://github.com/bitcoin/bitcoin/pull/12934#discussion_r196532632,196532632,src/core/producerconsumerqueue.h
ryanofsky,2018-06-19T18:32:02Z,"In commit ""Implement a thread-safe FIFO (producer/consumer style) queue"" (d8106146e7511837decb4b45de35dec654454b69)\n\nCould return std::future\<T> in the case of a non-blocking Pop() to support it instead of having this asymmetry.",https://github.com/bitcoin/bitcoin/pull/12934#discussion_r196533649,196533649,src/core/producerconsumerqueue.h
skeees,2018-07-02T13:59:22Z,not sure i completely understand - data is already constructed when it is passed into the function - thought the most economical thing to do was std::forward which should use the move constructor when possible? is that different from what emplace_back would do?,https://github.com/bitcoin/bitcoin/pull/12934#discussion_r199506587,199506587,src/core/producerconsumerqueue.h
skeees,2018-07-02T14:04:56Z,"Doing that would complicate internal implementation a bit - you'd have to hang on to the promise that satisfies the future internally - and either you'd have too many of those and need to block - or potentially allow your buffer holding promises to grow unbounded - so actually it might not be safely implementable. \n\nAlso I don't really see an immediate use case for this - you'd have to later w",https://github.com/bitcoin/bitcoin/pull/12934#discussion_r199508335,199508335,src/core/producerconsumerqueue.h
skeees,2018-07-02T14:06:33Z,I can see this either way - i wrote it with defaults essentially as constructor args because - at least for the use cases i can imagine you almost always want a default mode of operation for a given queue except for certain edge cases (shutdown is the most apparent one) - and i've seen data structures that handle this sort of initialization both ways (defaults on construction vs with every method ,https://github.com/bitcoin/bitcoin/pull/12934#discussion_r199508852,199508852,src/core/producerconsumerqueue.h
jamesob,2018-07-02T15:03:42Z,"Talked about this offline with @ryanofsky, @skeees; this form is equivalent (in terms of constructor calls) to what @ryanofsky initially suggested so no need to change.",https://github.com/bitcoin/bitcoin/pull/12934#discussion_r199527845,199527845,src/core/producerconsumerqueue.h
ryanofsky,2018-07-03T10:25:19Z,"In commit ""Unit tests for ProducerConsumerQueue"" (52ac3b5469e514f9288683bcb944e58c02606346)\n\nMight be nice to use vector\<unique_ptr\<Q>> to make this code exception safe and avoid need for manual deletion.",https://github.com/bitcoin/bitcoin/pull/12934#discussion_r199757735,199757735,src/test/producerconsumerqueue_tests.cpp
ryanofsky,2018-07-03T11:13:13Z,"In commit ""Unit tests for ProducerConsumerQueue"" (52ac3b5469e514f9288683bcb944e58c02606346)\n\nMaybe give this function a more descriptive name like `PushThenPop`.\n\nMaybe add a summary comment like ""Push \`elements_pushed\` consecutive ints to the \n\`push\` queue, starting from (id * elements_to_values). Then pop \`elements_pushed\` values from the \`recv\` queue and verify all ints in the",https://github.com/bitcoin/bitcoin/pull/12934#discussion_r199768981,199768981,src/test/producerconsumerqueue_tests.cpp
ryanofsky,2018-07-03T11:19:35Z,"In commit ""Unit tests for ProducerConsumerQueue"" (52ac3b5469e514f9288683bcb944e58c02606346)\n\nMaybe give this function a more descriptive name like `PopAndPush`.\n\nMaybe add a summary comment like ""Pop \`elements_pushed\` values from the \`work\` queue. For each value \`w\` received, push value -(w % bucket_size) to the push[w / bucket_size] output queue.""\n",https://github.com/bitcoin/bitcoin/pull/12934#discussion_r199770536,199770536,src/test/producerconsumerqueue_tests.cpp
ryanofsky,2018-07-03T11:28:09Z,"In commit ""Unit tests for ProducerConsumerQueue"" (52ac3b5469e514f9288683bcb944e58c02606346)\n\nIt could be nice to avoid this encoding (and the negative int encoding) by declaring a simple struct like:\n\n```c++\nstruct TestValue { int producer_id; int value; };\n```\n\nand using `ProducerConsumerQueue<TestValue>` in the test.",https://github.com/bitcoin/bitcoin/pull/12934#discussion_r199772365,199772365,src/test/producerconsumerqueue_tests.cpp
ryanofsky,2018-07-03T11:40:15Z,"In commit ""Unit tests for ProducerConsumerQueue"" (52ac3b5469e514f9288683bcb944e58c02606346)\n\nSeems like this could more specifically assert (latest == -1) or (i == latest + 1). But perhaps the current way is more compact or less fragile.",https://github.com/bitcoin/bitcoin/pull/12934#discussion_r199775175,199775175,src/test/producerconsumerqueue_tests.cpp
ryanofsky,2018-07-03T12:05:58Z,"In commit ""Unit tests for ProducerConsumerQueue"" (52ac3b5469e514f9288683bcb944e58c02606346)\n\nMaybe add a simple test description like ""Test simple queue pushes and pops which don't block.""",https://github.com/bitcoin/bitcoin/pull/12934#discussion_r199781485,199781485,src/test/producerconsumerqueue_tests.cpp
ryanofsky,2018-07-03T13:33:17Z,"Re: https://github.com/bitcoin/bitcoin/pull/12934#discussion_r196532632\n\n> I can see this either way - i wrote it with defaults essentially as constructor args because - at least for the use cases i can imagine you almost always want a default mode of operation for a given queue except for certain edge cases (shutdown is the most apparent one) - and i've seen data structures that handle this s",https://github.com/bitcoin/bitcoin/pull/12934#discussion_r199808121,199808121,src/core/producerconsumerqueue.h
ryanofsky,2018-07-03T13:44:35Z,"In commit ""Unit tests for ProducerConsumerQueue"" (52ac3b5469e514f9288683bcb944e58c02606346)\n\nMaybe add a simple test description like ""Generate messages in \`n_producers\` producer threads and push them on to a single \`push\` queue. Pop messages from the queue in \`n_consumers\` consumer threads, and forward them back to the original producer threads through \`n_producers\` different \`pull\`",https://github.com/bitcoin/bitcoin/pull/12934#discussion_r199811991,199811991,src/test/producerconsumerqueue_tests.cpp
ryanofsky,2018-07-03T13:47:13Z,"In commit ""Unit tests for ProducerConsumerQueue"" (52ac3b5469e514f9288683bcb944e58c02606346)\n\nMaybe add a simple test description like ""Run QueueTest with different numbers of messages and threads and different queue capacities.""",https://github.com/bitcoin/bitcoin/pull/12934#discussion_r199812982,199812982,src/test/producerconsumerqueue_tests.cpp
jamesob,2018-07-04T11:14:13Z,Could also assert that items were popped off in the order they were pushed. ,https://github.com/bitcoin/bitcoin/pull/12934#discussion_r200093380,200093380,src/test/producerconsumerqueue_tests.cpp
jamesob,2018-07-04T13:50:23Z,Completely agree. This is pretty hard to follow for me as-is.,https://github.com/bitcoin/bitcoin/pull/12934#discussion_r200132979,200132979,src/test/producerconsumerqueue_tests.cpp
jamesob,2018-07-04T13:56:48Z,Any reason this is `protected` in superclasses but `private` here?,https://github.com/bitcoin/bitcoin/pull/12934#discussion_r200135030,200135030,src/core/consumerthread.h
promag,2018-07-04T22:11:19Z,Why this scope? I think `notify_one()` below can be called while `m_queue_lock` is held. — same in `Pop()`.,https://github.com/bitcoin/bitcoin/pull/12934#discussion_r200205851,200205851,src/core/producerconsumerqueue.h
promag,2018-07-04T22:20:41Z,"nit, could drop `()`. — same in `Pop()`.",https://github.com/bitcoin/bitcoin/pull/12934#discussion_r200206332,200206332,src/core/producerconsumerqueue.h
promag,2018-07-04T22:27:31Z,"> Readability. It would be nice to be able to see if a push or pop call is blocking just by looking at the call\n\nI think this comment is spot on.\n\n>  If you look at other C++ objects that support optional blocking like std::mutex or std::future, the blocking behaviour is determined only by the particular method call\n\n> What about having Push, Pop, TryPush, and TryPop methods and droppi",https://github.com/bitcoin/bitcoin/pull/12934#discussion_r200206716,200206716,src/core/producerconsumerqueue.h
skeees,2018-07-05T07:30:34Z,"You can - but its less efficient to notify on a cv while holding a lock - the thread that you notify will wake up and immediately block again on the lock until you release it. It is safe to call notify without the lock held.\n\nfrom: https://en.cppreference.com/w/cpp/thread/condition_variable/notify_one\n>The notifying thread does not need to hold the lock on the same mutex as the one held by t",https://github.com/bitcoin/bitcoin/pull/12934#discussion_r200255149,200255149,src/core/producerconsumerqueue.h
jamesob,2018-07-13T17:15:26Z,"This thing is pretty complex, and right now it looks like we don't do granular per-thread per-queue shutdowns. The only instance of this being used is shutting down the single thread associated with ValidationQueue. When would a situation arise where we need to shut off some but not all of the threads consuming from a queue? I can't think of a case where that'd be necessary.\n\nCould we just hav",https://github.com/bitcoin/bitcoin/pull/12934#discussion_r202417596,202417596,src/core/consumerthread.h
jamesob,2018-07-13T18:03:49Z,Any reason this doesn't just live on BlockValidationRequest? Could avoid some friendliness that way.,https://github.com/bitcoin/bitcoin/pull/12934#discussion_r202430201,202430201,src/validation_layer.h
jamesob,2018-07-13T18:14:40Z,"Based on the call site, should this be `block_accepted`? ""valid"" is a little ambiguous if you take into account all the different states in `chain.h:BlockStatus`.",https://github.com/bitcoin/bitcoin/pull/12934#discussion_r202432952,202432952,src/validation_layer.h
jamesob,2018-07-13T18:19:32Z,braces,https://github.com/bitcoin/bitcoin/pull/12934#discussion_r202434170,202434170,src/net.cpp
jamesob,2018-07-13T18:24:52Z,Why not just include validation_layer? Circular dep somehow?,https://github.com/bitcoin/bitcoin/pull/12934#discussion_r202435468,202435468,src/net.h
jamesob,2018-07-13T18:27:50Z,Nice cleanup!,https://github.com/bitcoin/bitcoin/pull/12934#discussion_r202436224,202436224,src/net_processing.cpp
jamesob,2018-07-13T18:30:23Z,I'm out of my depth here - should be looked at by someone with lots of net_processing experience.,https://github.com/bitcoin/bitcoin/pull/12934#discussion_r202436928,202436928,src/net_processing.cpp
ryanofsky,2018-08-13T17:43:58Z,"In commit ""Implement a thread-safe FIFO (producer/consumer style) queue"" (c6396d9ac2d01c43fca7f7730b710de4ba86229c)\n\nJust noticed this PR is creating a new `src/core/` subdirectory to hold the queue and thread code. This seems good, but it may also be good to add a short `core/README.md` to say what the directory is supposed to be for. For example, if it's meant to hold utility code that isn't",https://github.com/bitcoin/bitcoin/pull/12934#discussion_r209697684,209697684,src/Makefile.am
ryanofsky,2018-08-13T18:28:40Z,"In commit ""Add ConsumerThread: to consumer and operate on work from a ProducerConsumerQueue"" (7f8a8889564b6509285fbab64825fecb983fca6d)\n\nShould this be marked ""override?""",https://github.com/bitcoin/bitcoin/pull/12934#discussion_r209711909,209711909,src/core/consumerthread.h
ryanofsky,2018-08-13T18:31:04Z,"In commit ""Add ConsumerThread: to consumer and operate on work from a ProducerConsumerQueue"" (7f8a8889564b6509285fbab64825fecb983fca6d)\n\nIt might be a good idea to make this abstract (`= 0`) to trigger a compile error in case a subclass declares this the wrong way and fails to override.",https://github.com/bitcoin/bitcoin/pull/12934#discussion_r209712684,209712684,src/core/consumerthread.h
ryanofsky,2018-08-13T19:10:20Z,"Re: https://github.com/bitcoin/bitcoin/pull/12934#discussion_r196532632\n\nAnother advantage to add to list above:\n\n5. If you make blocking an attribute of push/pop methods rather than an attibutes of the queue you can drop the consumer/producer terminology, which I'm finding confusing now that I'm looking at downstream code. E.g. if I push an item into the queue, that seems like producing f",https://github.com/bitcoin/bitcoin/pull/12934#discussion_r209725014,209725014,src/core/producerconsumerqueue.h
ryanofsky,2018-08-13T19:35:35Z,"In commit ""Add ConsumerThread: to consumer and operate on work from a ProducerConsumerQueue"" (7f8a8889564b6509285fbab64825fecb983fca6d)\n\nCalling this variable PRODUCER_MODE here, but passing it as the `consumer_mode` argument to BlockingConsumerQueue/ProducerConsumerQueue is a little unexpected. Could you maybe note this in a short comment to avoid confusion? Alternately it might be clearer ju",https://github.com/bitcoin/bitcoin/pull/12934#discussion_r209732014,209732014,src/core/consumerthread.h
ryanofsky,2018-08-13T19:39:12Z,"In commit ""Add ConsumerThread: to consumer and operate on work from a ProducerConsumerQueue"" (7f8a8889564b6509285fbab64825fecb983fca6d)\n\nMight be better to std::move(id) to avoid a copy if caller passes a temporary.",https://github.com/bitcoin/bitcoin/pull/12934#discussion_r209733049,209733049,src/core/consumerthread.h
ryanofsky,2018-08-13T19:42:07Z,"In commit ""Add ConsumerThread: to consumer and operate on work from a ProducerConsumerQueue"" (7f8a8889564b6509285fbab64825fecb983fca6d)\n\nCan the comment explain why this is `volatile` rather than `std::atomic` or similar? I thought `volatile` wasn't really meaningful for thread synchronization.\n\nAlso maybe just write `m_active = true` here so no need to initialize it elsewhere and then des",https://github.com/bitcoin/bitcoin/pull/12934#discussion_r209733925,209733925,src/core/consumerthread.h
ryanofsky,2018-08-13T20:04:31Z,"In commit ""ConsumerThread unit tests"" (134d47a263620afae26f9966a74465bf896ff530)\n\nWould it make sense to add tests for WorkerMode::NONBLOCKING? Maybe say one way or the other in a comment here even if it is not worth writing more tests now.",https://github.com/bitcoin/bitcoin/pull/12934#discussion_r209740266,209740266,src/test/consumerthread_tests.cpp
ryanofsky,2018-08-13T20:27:11Z,"In commit ""Add ConsumerThread: to consumer and operate on work from a ProducerConsumerQueue"" (7f8a8889564b6509285fbab64825fecb983fca6d)\n\nWould dropping the mutex and just making `m_active` a `std::atomic` have the same effect? It seems like this would be equivalent and simpler, but maybe you could explain if the mutex is covering something else besides `m_active` in the comment.",https://github.com/bitcoin/bitcoin/pull/12934#discussion_r209747179,209747179,src/core/consumerthread.h
ryanofsky,2018-08-13T20:30:09Z,"In commit ""ConsumerThread unit tests"" (134d47a263620afae26f9966a74465bf896ff530)\n\nMaybe shorten this with MakeUnique (also in Push below).",https://github.com/bitcoin/bitcoin/pull/12934#discussion_r209748096,209748096,src/test/consumerthread_tests.cpp
ryanofsky,2018-08-13T20:40:23Z,"In commit ""ConsumerThread unit tests"" (134d47a263620afae26f9966a74465bf896ff530)\n\nCan you add a comment to say what the yield loop is for? It seems like just calling Sync without yielding beforehand, then then checking size == 0 would be simpler, and also a better check that the `Sync` method works.",https://github.com/bitcoin/bitcoin/pull/12934#discussion_r209751301,209751301,src/test/consumerthread_tests.cpp
ryanofsky,2018-08-13T20:53:59Z,"In commit ""ConsumerThread unit tests"" (134d47a263620afae26f9966a74465bf896ff530)\n\nShould replace foo.",https://github.com/bitcoin/bitcoin/pull/12934#discussion_r209755260,209755260,src/test/consumerthread_tests.cpp
ryanofsky,2018-08-13T20:57:16Z,"In commit ""ConsumerThread unit tests"" (134d47a263620afae26f9966a74465bf896ff530)\n\nI think there is a race here between `work[i]` being assigned and then incremented in the worker thread. You could avoid it by setting `work` values after creating the vector but before creating the queue.",https://github.com/bitcoin/bitcoin/pull/12934#discussion_r209756189,209756189,src/test/consumerthread_tests.cpp
ryanofsky,2018-08-13T21:01:20Z,"In commit ""ConsumerThread unit tests"" (134d47a263620afae26f9966a74465bf896ff530)\n\nMight be good to move this check above Terminate() to make the test more strict.",https://github.com/bitcoin/bitcoin/pull/12934#discussion_r209757443,209757443,src/test/consumerthread_tests.cpp
ryanofsky,2018-08-13T21:27:18Z,"In commit ""Add ConsumerThread: to consumer and operate on work from a ProducerConsumerQueue"" (7f8a8889564b6509285fbab64825fecb983fca6d)\n\nI think I agree with James. Even if you want to support shutting down specific threads, an approach more like ""Everybody wake up, check if you are supposed to exit, and if not go back to sleep again"" might be simpler than ""Random thread wake up, check if you ",https://github.com/bitcoin/bitcoin/pull/12934#discussion_r209765147,209765147,src/core/consumerthread.h
ryanofsky,2018-08-13T21:32:22Z,"In commit ""Add ConsumerThread: to consumer and operate on work from a ProducerConsumerQueue"" (7f8a888)\n\nWhy couldn't the intended thread just be blocked calling Pop() and not terminated or currently processing anything? It seems like this is assuming threads are notified in a circular order.",https://github.com/bitcoin/bitcoin/pull/12934#discussion_r209766415,209766415,src/core/consumerthread.h
ryanofsky,2018-08-14T14:54:22Z,"In commit ""ValidationLayer() - interface for calls into block validation"" (b4717281d43b1e0ff9e52d979a3899220ad11eea)\n\nWould be slightly more efficient to make default on_ready value `nullptr` instead of a no-op lambda.\n\nIt's also kind of unclear what m_ready is supposed to be used for in this context. You might want to move down your other comment from `m_on_ready` about c++11 futures here",https://github.com/bitcoin/bitcoin/pull/12934#discussion_r209983701,209983701,src/validation_layer.h
ryanofsky,2018-08-14T20:20:28Z,"In commit ""ValidationLayer() - interface for calls into block validation"" (b4717281d43b1e0ff9e52d979a3899220ad11eea)\n\nMaybe add the word ""block"" somewhere in here to make it clear what this is validating and obvious this is a block hash.",https://github.com/bitcoin/bitcoin/pull/12934#discussion_r210090068,210090068,src/validation_layer.cpp
ryanofsky,2018-08-14T20:23:46Z,"In commit ""ValidationLayer() - interface for calls into block validation"" (b4717281d43b1e0ff9e52d979a3899220ad11eea):\n\nI think it would be better to just assert `!m_thread` to simplify and be more conservative. If m_thread is allowed to be non-null, then I think you would need to add more synchronization here to make sure join is called before the thread is destroyed to prevent a crash in the ",https://github.com/bitcoin/bitcoin/pull/12934#discussion_r210091043,210091043,src/validation_layer.cpp
ryanofsky,2018-08-14T20:42:38Z,"In commit ""Add ConsumerThread: to consumer and operate on work from a ProducerConsumerQueue"" (7f8a8889564b6509285fbab64825fecb983fca6d)\n\nI think it would be clearer to just say this will block until RequestTerminate() is called. It should be perfectly fine to call RequestTerminate before or after this call and from any thread.",https://github.com/bitcoin/bitcoin/pull/12934#discussion_r210096605,210096605,src/core/consumerthread.h
ryanofsky,2018-08-14T20:45:18Z,"In commit ""ValidationLayer() - interface for calls into block validation"" (b4717281d43b1e0ff9e52d979a3899220ad11eea)\n\nWould be safer / more efficient to use std::make_shared here.",https://github.com/bitcoin/bitcoin/pull/12934#discussion_r210097479,210097479,src/validation_layer.cpp
ryanofsky,2018-08-14T20:54:03Z,"In commit ""ValidationLayer() - interface for calls into block validation"" (b4717281d43b1e0ff9e52d979a3899220ad11eea)\n\nCan this just be a `ValidationThread` instead of a pointer to one? The extra indirection doesn't seem helpful.",https://github.com/bitcoin/bitcoin/pull/12934#discussion_r210100110,210100110,src/validation_layer.h
ryanofsky,2018-08-14T20:57:25Z,"In commit ""ValidationLayer() - interface for calls into block validation"" (b4717281d43b1e0ff9e52d979a3899220ad11eea)\n\nMaybe assert thread is not joinable here, to help debugging in case this is not shut down correctly.",https://github.com/bitcoin/bitcoin/pull/12934#discussion_r210101095,210101095,src/validation_layer.h
ryanofsky,2018-08-15T16:27:47Z,"In commit ""Call ProcessNewBlock() asynchronously in a separate thread from p2p layer"" (1c9f74170f9c35d7bc5ba3e9e079b70aafae4094)\n\nShould this also free `g_validation_layer`? (or have a comment saying why it shouldn't be freed)",https://github.com/bitcoin/bitcoin/pull/12934#discussion_r210326607,210326607,src/init.cpp
ryanofsky,2018-08-15T17:11:58Z,"In commit ""Call ProcessNewBlock() asynchronously in a separate thread from p2p layer"" (1c9f74170f9c35d7bc5ba3e9e079b70aafae4094)\n\nI think this code might be clearer if the IsAwaitingInternalRequest were call were dropped and ProcessInternalRequestResults just returned requested_was_queued directly. It seems awkward how IsAwaitingInternalRequest and ProcessInternalRequestResults are checking so",https://github.com/bitcoin/bitcoin/pull/12934#discussion_r210339230,210339230,src/net.cpp
ryanofsky,2018-08-15T17:21:30Z,"In commit ""Call ProcessNewBlock() asynchronously in a separate thread from p2p layer"" (1c9f74170f9c35d7bc5ba3e9e079b70aafae4094)\n\nProbably remove, doesn't look like this is used right now.",https://github.com/bitcoin/bitcoin/pull/12934#discussion_r210342154,210342154,src/test/test_bitcoin.h
ryanofsky,2018-08-15T17:32:48Z,"In commit ""Call ProcessNewBlock() asynchronously in a separate thread from p2p layer"" (1c9f74170f9c35d7bc5ba3e9e079b70aafae4094)\n\nUnintended indent?",https://github.com/bitcoin/bitcoin/pull/12934#discussion_r210345767,210345767,src/net_processing.cpp
ryanofsky,2018-08-15T17:46:36Z,"In commit ""Call ProcessNewBlock() asynchronously in a separate thread from p2p layer"" (1c9f74170f9c35d7bc5ba3e9e079b70aafae4094)\n\nMaybe drop the !pindex check here, or say in a comment whether this would ever be expected? It seems surprising to treat null pindex like the block is valid.",https://github.com/bitcoin/bitcoin/pull/12934#discussion_r210350141,210350141,src/net_processing.cpp
ryanofsky,2018-08-15T17:49:01Z,"In commit ""Call ProcessNewBlock() asynchronously in a separate thread from p2p layer"" (1c9f74170f9c35d7bc5ba3e9e079b70aafae4094)\n\nThis seems ok, but I wanted to note that previous code in the fBlockReconstructed case updated nLastBlockTime/mapBlockSource before calling MarkBlockAsReceived, instead of after.",https://github.com/bitcoin/bitcoin/pull/12934#discussion_r210350876,210350876,src/net_processing.cpp
ryanofsky,2018-08-15T17:55:49Z,"In commit ""Call ProcessNewBlock() asynchronously in a separate thread from p2p layer"" (1c9f74170f9c35d7bc5ba3e9e079b70aafae4094)\n\nShould s/ProcessNewBlock/SubmitBlock/",https://github.com/bitcoin/bitcoin/pull/12934#discussion_r210353625,210353625,src/net_processing.cpp
ryanofsky,2018-08-15T20:10:11Z,"In commit ""Call ProcessNewBlock() asynchronously in a separate thread from p2p layer"" (1c9f741)\n\nI guess with this line removed, the block will be marked received later, from the worker thread, after it is processed. This seems ok, though I could see why you might want to mark the block received when its received but before it's processed, so it's clearer what ""received"" and ""processed"" actual",https://github.com/bitcoin/bitcoin/pull/12934#discussion_r210392721,210392721,src/net_processing.cpp
ryanofsky,2018-08-16T19:32:49Z,"In commit ""Call ProcessNewBlock() asynchronously in a separate thread from p2p layer"" (1c9f74170f9c35d7bc5ba3e9e079b70aafae4094)\n\nWould it be possible to assert m_block_validating variables are null/invalid here before overwriting them? It seems like it would help debugging if `SetPendingInternalRequest` were called for a new request before the previous request completed.",https://github.com/bitcoin/bitcoin/pull/12934#discussion_r210716022,210716022,src/net.cpp
ryanofsky,2018-08-16T19:40:20Z,"In commit ""Limit available scope of ProcessNewBlock to ValidationLayer (move-only)"" (377873614b3fa143147ecaba5b750f8be1bdd8a4)\n\nIt's unusual that ProcessNewBlock is documented and declared in `validation_layer.cpp` but defined in `src/validation.cpp`. It seems like it will make the documentation hard to find. There are a bunch of other options that seem like they would be better to me:\n\n* ",https://github.com/bitcoin/bitcoin/pull/12934#discussion_r210718059,210718059,src/validation_layer.cpp
ryanofsky,2018-08-16T19:41:03Z,"In commit ""Limit available scope of ProcessNewBlock to ValidationLayer (move-only)"" (377873614b3fa143147ecaba5b750f8be1bdd8a4)\n\nLOCKS_EXCLUDED(cs_main) annotation seems to have been dropped here.",https://github.com/bitcoin/bitcoin/pull/12934#discussion_r210718249,210718249,src/validation_layer.cpp
ryanofsky,2018-08-16T19:56:01Z,"In commit ""Fix whitespace in test_bitcoin.cpp (whitespace,move-only)"" (3d6f03814cde98869ca5b8ad365bb3a0aae522d9)\n\nMaybe drop ""move-only"" from commit description, since this is actually just a whitespace change.",https://github.com/bitcoin/bitcoin/pull/12934#discussion_r210722417,210722417,src/test/test_bitcoin.cpp
practicalswift,2018-09-02T08:09:01Z,Typo found by `codespell`: “theres” should be “there is” :-),https://github.com/bitcoin/bitcoin/pull/12934#discussion_r214532349,214532349,src/core/consumerthread.h
practicalswift,2018-09-02T08:09:18Z,Typo found by `codespell`: “theres” should be “there is” :-),https://github.com/bitcoin/bitcoin/pull/12934#discussion_r214532355,214532355,src/core/producerconsumerqueue.h
practicalswift,2018-09-02T08:09:47Z,Typo found by `codespell`: “thats” should be “that is” :-),https://github.com/bitcoin/bitcoin/pull/12934#discussion_r214532362,214532362,src/core/consumerthread.h
