[
  {
    "sha": "32ef6cfa521b8a0615de3259d7b81383608ab8f3",
    "node_id": "C_kwDOABII59oAKDMyZWY2Y2ZhNTIxYjhhMDYxNWRlMzI1OWQ3YjgxMzgzNjA4YWI4ZjM",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-04-29T19:29:00Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-11-29T16:20:20Z"
      },
      "message": "Unify bitcoin-qt and bitcoind persistent settings\n\nIf a bitcoind setting like pruning, port mapping, or a network proxy is enabled\nin the GUI, it will now be stored in the bitcoin persistent setting file and\nshared with bitcoind, instead of being stored as Qt settings backed by the\nwindows registry or platform specific config files.",
      "tree": {
        "sha": "7a297be8182d530b85feca9ad9308aa6a3c7ad96",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7a297be8182d530b85feca9ad9308aa6a3c7ad96"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/32ef6cfa521b8a0615de3259d7b81383608ab8f3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32ef6cfa521b8a0615de3259d7b81383608ab8f3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/32ef6cfa521b8a0615de3259d7b81383608ab8f3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32ef6cfa521b8a0615de3259d7b81383608ab8f3/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "383d350bd5107bfe00e3b90a00cab9a3c1397c72",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/383d350bd5107bfe00e3b90a00cab9a3c1397c72",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/383d350bd5107bfe00e3b90a00cab9a3c1397c72"
      }
    ],
    "stats": {
      "total": 913,
      "additions": 568,
      "deletions": 345
    },
    "files": [
      {
        "sha": "9b88d55e5088e3763bce1ee3723b1c4cd6cac3d2",
        "filename": "build_msvc/test_bitcoin-qt/test_bitcoin-qt.vcxproj",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32ef6cfa521b8a0615de3259d7b81383608ab8f3/build_msvc/test_bitcoin-qt/test_bitcoin-qt.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32ef6cfa521b8a0615de3259d7b81383608ab8f3/build_msvc/test_bitcoin-qt/test_bitcoin-qt.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/test_bitcoin-qt/test_bitcoin-qt.vcxproj?ref=32ef6cfa521b8a0615de3259d7b81383608ab8f3",
        "patch": "@@ -12,6 +12,7 @@\n     <ClCompile Include=\"..\\..\\src\\test\\util\\setup_common.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\qt\\test\\addressbooktests.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\qt\\test\\apptests.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\qt\\test\\optiontests.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\qt\\test\\rpcnestedtests.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\qt\\test\\test_main.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\qt\\test\\uritests.cpp\" />\n@@ -20,6 +21,7 @@\n     <ClCompile Include=\"..\\..\\src\\wallet\\test\\wallet_test_fixture.cpp\" />\n     <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_addressbooktests.cpp\" />\n     <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_apptests.cpp\" />\n+    <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_optiontests.cpp\" />\n     <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_rpcnestedtests.cpp\" />\n     <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_uritests.cpp\" />\n     <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_wallettests.cpp\" />\n@@ -88,6 +90,7 @@\n   <ItemGroup>\n     <MocTestFiles Include=\"..\\..\\src\\qt\\test\\addressbooktests.h\" />\n     <MocTestFiles Include=\"..\\..\\src\\qt\\test\\apptests.h\" />\n+    <MocTestFiles Include=\"..\\..\\src\\qt\\test\\optiontests.h\" />\n     <MocTestFiles Include=\"..\\..\\src\\qt\\test\\rpcnestedtests.h\" />\n     <MocTestFiles Include=\"..\\..\\src\\qt\\test\\uritests.h\" />\n     <MocTestFiles Include=\"..\\..\\src\\qt\\test\\wallettests.h\" />"
      },
      {
        "sha": "576e153681f6291b6e97f377da453060703608d7",
        "filename": "doc/release-notes-15936.md",
        "status": "added",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32ef6cfa521b8a0615de3259d7b81383608ab8f3/doc/release-notes-15936.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32ef6cfa521b8a0615de3259d7b81383608ab8f3/doc/release-notes-15936.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-15936.md?ref=32ef6cfa521b8a0615de3259d7b81383608ab8f3",
        "patch": "@@ -0,0 +1,8 @@\n+GUI changes\n+-----------\n+\n+Configuration changes made in the bitcoin GUI (such as the pruning setting,\n+proxy settings, UPNP preferences) are now saved to <datadir>/settings.json file\n+rather than to the Qt settings backend (windows registry or unix desktop config\n+files), and the GUI settings will now be used if bitcoind is started in\n+subsequently, rather than ignored."
      },
      {
        "sha": "d22f6bbc3e0fc4f5123854c547fd0bb2717a2a26",
        "filename": "src/Makefile.qttest.include",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32ef6cfa521b8a0615de3259d7b81383608ab8f3/src/Makefile.qttest.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32ef6cfa521b8a0615de3259d7b81383608ab8f3/src/Makefile.qttest.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qttest.include?ref=32ef6cfa521b8a0615de3259d7b81383608ab8f3",
        "patch": "@@ -7,6 +7,7 @@ TESTS += qt/test/test_bitcoin-qt\n \n TEST_QT_MOC_CPP = \\\n   qt/test/moc_apptests.cpp \\\n+  qt/test/moc_optiontests.cpp \\\n   qt/test/moc_rpcnestedtests.cpp \\\n   qt/test/moc_uritests.cpp\n \n@@ -19,6 +20,7 @@ endif # ENABLE_WALLET\n TEST_QT_H = \\\n   qt/test/addressbooktests.h \\\n   qt/test/apptests.h \\\n+  qt/test/optiontests.h \\\n   qt/test/rpcnestedtests.h \\\n   qt/test/uritests.h \\\n   qt/test/util.h \\\n@@ -30,6 +32,7 @@ qt_test_test_bitcoin_qt_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(BITCOIN_\n qt_test_test_bitcoin_qt_SOURCES = \\\n   init/bitcoin-qt.cpp \\\n   qt/test/apptests.cpp \\\n+  qt/test/optiontests.cpp \\\n   qt/test/rpcnestedtests.cpp \\\n   qt/test/test_main.cpp \\\n   qt/test/uritests.cpp \\"
      },
      {
        "sha": "9be9fe5307f6587010518ed94cc7198c04b4446b",
        "filename": "src/interfaces/node.h",
        "status": "modified",
        "additions": 16,
        "deletions": 5,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32ef6cfa521b8a0615de3259d7b81383608ab8f3/src/interfaces/node.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32ef6cfa521b8a0615de3259d7b81383608ab8f3/src/interfaces/node.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.h?ref=32ef6cfa521b8a0615de3259d7b81383608ab8f3",
        "patch": "@@ -5,12 +5,13 @@\n #ifndef BITCOIN_INTERFACES_NODE_H\n #define BITCOIN_INTERFACES_NODE_H\n \n-#include <consensus/amount.h>\n-#include <net.h>        // For NodeId\n-#include <net_types.h>  // For banmap_t\n-#include <netaddress.h> // For Network\n-#include <netbase.h>    // For ConnectionDirection\n+#include <consensus/amount.h>          // For CAmount\n+#include <net.h>                       // For NodeId\n+#include <net_types.h>                 // For banmap_t\n+#include <netaddress.h>                // For Network\n+#include <netbase.h>                   // For ConnectionDirection\n #include <support/allocators/secure.h> // For SecureString\n+#include <util/settings.h>             // For util::SettingsValue\n #include <util/translation.h>\n \n #include <functional>\n@@ -93,6 +94,16 @@ class Node\n     //! Return whether shutdown was requested.\n     virtual bool shutdownRequested() = 0;\n \n+    //! Return whether a particular setting in <datadir>/settings.json is or\n+    //! would be ignored because it is also specified in the command line.\n+    virtual bool isSettingIgnored(const std::string& name) = 0;\n+\n+    //! Return setting value from <datadir>/settings.json or bitcoin.conf.\n+    virtual util::SettingsValue getPersistentSetting(const std::string& name) = 0;\n+\n+    //! Update a setting in <datadir>/settings.json.\n+    virtual void updateSetting(const std::string& name, const util::SettingsValue& value) = 0;\n+\n     //! Map port.\n     virtual void mapPort(bool use_upnp, bool use_natpmp) = 0;\n "
      },
      {
        "sha": "34d00da92b2533cc5e77a7eada0878dbb00df5a4",
        "filename": "src/node/interfaces.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32ef6cfa521b8a0615de3259d7b81383608ab8f3/src/node/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32ef6cfa521b8a0615de3259d7b81383608ab8f3/src/node/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/interfaces.cpp?ref=32ef6cfa521b8a0615de3259d7b81383608ab8f3",
        "patch": "@@ -112,6 +112,28 @@ class NodeImpl : public Node\n         }\n     }\n     bool shutdownRequested() override { return ShutdownRequested(); }\n+    bool isSettingIgnored(const std::string& name) override\n+    {\n+        bool ignored = false;\n+        gArgs.LockSettings([&](util::Settings& settings) {\n+            if (auto* options = util::FindKey(settings.command_line_options, name)) {\n+                ignored = !options->empty();\n+            }\n+        });\n+        return ignored;\n+    }\n+    util::SettingsValue getPersistentSetting(const std::string& name) override { return gArgs.GetPersistentSetting(name); }\n+    void updateSetting(const std::string& name, const util::SettingsValue& value) override\n+    {\n+        gArgs.LockSettings([&](util::Settings& settings) {\n+            if (value.isNull()) {\n+                settings.rw_settings.erase(name);\n+            } else {\n+                settings.rw_settings[name] = value;\n+            }\n+        });\n+        gArgs.WriteSettingsFile();\n+    }\n     void mapPort(bool use_upnp, bool use_natpmp) override { StartMapPort(use_upnp, use_natpmp); }\n     bool getProxy(Network net, proxyType& proxy_info) override { return GetProxy(net, proxy_info); }\n     size_t getNodeCount(ConnectionDirection flags) override"
      },
      {
        "sha": "06932b88c5c4fc052bd7d9a3bca52e5eb4340adb",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32ef6cfa521b8a0615de3259d7b81383608ab8f3/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32ef6cfa521b8a0615de3259d7b81383608ab8f3/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=32ef6cfa521b8a0615de3259d7b81383608ab8f3",
        "patch": "@@ -254,7 +254,7 @@ void BitcoinApplication::createPaymentServer()\n \n void BitcoinApplication::createOptionsModel(bool resetSettings)\n {\n-    optionsModel = new OptionsModel(this, resetSettings);\n+    optionsModel = new OptionsModel(node(), this, resetSettings);\n }\n \n void BitcoinApplication::createWindow(const NetworkStyle *networkStyle)\n@@ -269,7 +269,9 @@ void BitcoinApplication::createWindow(const NetworkStyle *networkStyle)\n void BitcoinApplication::createSplashScreen(const NetworkStyle *networkStyle)\n {\n     assert(!m_splash);\n+    assert(m_node);\n     m_splash = new SplashScreen(networkStyle);\n+    m_splash->setNode(*m_node);\n     // We don't hold a direct pointer to the splash screen after creation, but the splash\n     // screen will take care of deleting itself when finish() happens.\n     m_splash->show();\n@@ -281,8 +283,6 @@ void BitcoinApplication::createNode(interfaces::Init& init)\n {\n     assert(!m_node);\n     m_node = init.makeNode();\n-    if (optionsModel) optionsModel->setNode(*m_node);\n-    if (m_splash) m_splash->setNode(*m_node);\n }\n \n bool BitcoinApplication::baseInitialize()\n@@ -613,6 +613,7 @@ int GuiMain(int argc, char* argv[])\n     app.parameterSetup();\n     GUIUtil::LogQtInfo();\n     // Load GUI settings from QSettings\n+    app.createNode(*init);\n     app.createOptionsModel(gArgs.GetBoolArg(\"-resetguisettings\", false));\n \n     if (did_show_intro) {\n@@ -623,8 +624,6 @@ int GuiMain(int argc, char* argv[])\n     if (gArgs.GetBoolArg(\"-splash\", DEFAULT_SPLASHSCREEN) && !gArgs.GetBoolArg(\"-min\", false))\n         app.createSplashScreen(networkStyle.data());\n \n-    app.createNode(*init);\n-\n     int rv = EXIT_SUCCESS;\n     try\n     {"
      },
      {
        "sha": "ed3a7956841ae18770408d4250ad4608e932b63d",
        "filename": "src/qt/forms/optionsdialog.ui",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32ef6cfa521b8a0615de3259d7b81383608ab8f3/src/qt/forms/optionsdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32ef6cfa521b8a0615de3259d7b81383608ab8f3/src/qt/forms/optionsdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/optionsdialog.ui?ref=32ef6cfa521b8a0615de3259d7b81383608ab8f3",
        "patch": "@@ -886,7 +886,7 @@\n         <item>\n          <widget class=\"QLabel\" name=\"overriddenByCommandLineInfoLabel\">\n           <property name=\"text\">\n-           <string>Options set in this dialog are overridden by the command line or in the configuration file:</string>\n+           <string>Options set in this dialog are overridden by the command line:</string>\n           </property>\n           <property name=\"textFormat\">\n            <enum>Qt::PlainText</enum>"
      },
      {
        "sha": "bf4fd197de51720130d212b2638e74d12f01e9b4",
        "filename": "src/qt/optionsdialog.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32ef6cfa521b8a0615de3259d7b81383608ab8f3/src/qt/optionsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32ef6cfa521b8a0615de3259d7b81383608ab8f3/src/qt/optionsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.cpp?ref=32ef6cfa521b8a0615de3259d7b81383608ab8f3",
        "patch": "@@ -24,7 +24,6 @@\n #include <QIntValidator>\n #include <QLocale>\n #include <QMessageBox>\n-#include <QSettings>\n #include <QSystemTrayIcon>\n #include <QTimer>\n \n@@ -55,8 +54,8 @@ OptionsDialog::OptionsDialog(QWidget *parent, bool enableWallet) :\n     ui->mapPortNatpmp->setEnabled(false);\n #endif\n     connect(this, &QDialog::accepted, [this](){\n-        QSettings settings;\n-        model->node().mapPort(settings.value(\"fUseUPnP\").toBool(), settings.value(\"fUseNatpmp\").toBool());\n+        model->node().mapPort(model->getOption(OptionsModel::MapPortUPnP).toBool(),\n+                              model->getOption(OptionsModel::MapPortNatpmp).toBool());\n     });\n \n     ui->proxyIp->setEnabled(false);"
      },
      {
        "sha": "197f09e74be0bf64e8f2c643e794e417bbff905e",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 376,
        "deletions": 320,
        "changes": 696,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32ef6cfa521b8a0615de3259d7b81383608ab8f3/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32ef6cfa521b8a0615de3259d7b81383608ab8f3/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=32ef6cfa521b8a0615de3259d7b81383608ab8f3",
        "patch": "@@ -25,12 +25,86 @@\n #include <QSettings>\n #include <QStringList>\n \n+#include <univalue.h>\n+\n const char *DEFAULT_GUI_PROXY_HOST = \"127.0.0.1\";\n \n static const QString GetDefaultProxyAddress();\n \n-OptionsModel::OptionsModel(QObject *parent, bool resetSettings) :\n-    QAbstractListModel(parent)\n+//! Convert bitcoin settings value to integer.\n+static int ToInt(const util::SettingsValue& value, int fallback = 0)\n+{\n+    if (value.isNull()) return fallback;\n+    if (value.isBool()) return value.get_bool();\n+    if (value.isNum()) return value.get_int();\n+    return LocaleIndependentAtoi<int>(value.get_str().c_str());\n+}\n+\n+//! Convert bitcoin settings value to QString.\n+static QString ToQString(const util::SettingsValue& value, const QString& fallback = {})\n+{\n+    if (value.isNull()) return fallback;\n+    if (value.isFalse()) return \"\";\n+    return QString::fromStdString(value.get_str());\n+}\n+\n+//! Convert bitcoin setting to QVariant.\n+static QVariant ToQVariant(const util::SettingsValue& value, const QVariant& fallback = {})\n+{\n+    if (value.isNull()) return fallback;\n+    if (value.isBool()) return value.get_bool();\n+    if (value.isNum()) return value.get_int();\n+    return QString::fromStdString(value.get_str());\n+}\n+\n+//! Convert QSettings QVariant value to bitcoin setting.\n+static util::SettingsValue ToSetting(const QVariant& variant, QVariant::Type type, const util::SettingsValue& fallback = {})\n+{\n+    if (!variant.isValid()) return fallback;\n+    if (type == QVariant::Bool) return variant.toBool();\n+    if (type == QVariant::Int) return variant.toInt();\n+    std::string str = variant.toString().toStdString();\n+    if (str.empty()) return false;\n+    return str;\n+}\n+\n+//! Get pruning enabled value to show in GUI from bitcoin -prune setting.\n+static bool PruneEnabled(const util::SettingsValue& prune_setting)\n+{\n+    // -prune=1 setting is manual pruning mode, so disabled for purposes of the gui\n+    return ToInt(prune_setting) > 1;\n+}\n+\n+//! Get pruning size value to show in GUI from bitcoin -prune setting. If\n+//! pruning is not enabled, just show default recommended pruning size (2GB).\n+static int PruneSizeGB(const util::SettingsValue& prune_setting)\n+{\n+    int value = ToInt(prune_setting);\n+    return value > 1 ? PruneMiBtoGB(value) : DEFAULT_PRUNE_TARGET_GB;\n+}\n+\n+//! Convert enabled/size values to bitcoin -prune setting.\n+static util::SettingsValue PruneSetting(bool prune_enabled, int prune_size_gb)\n+{\n+    assert(prune_size_gb >= 1); // PruneSizeGB and ParsePruneSizeGB never return less\n+    return prune_enabled ? PruneGBtoMiB(prune_size_gb) : 0;\n+}\n+\n+//! Interpret pruning size value provided by user in GUI or loaded from a legacy\n+//! QSettings source (windows registry key or qt .conf file). Smallest value\n+//! that the GUI can display is 1 GB, so round up if anything less is parsed.\n+static int ParsePruneSizeGB(const QVariant& prune_size) { return std::max(1, prune_size.toInt()); }\n+\n+struct ProxySetting {\n+    bool is_set;\n+    QString ip;\n+    QString port;\n+};\n+static ProxySetting ParseProxyString(const QString& proxy);\n+static QString ProxyString(bool is_set, QString ip, QString port);\n+\n+OptionsModel::OptionsModel(interfaces::Node& node, QObject *parent, bool resetSettings) :\n+    QAbstractListModel(parent), m_node(&node)\n {\n     Init(resetSettings);\n }\n@@ -46,6 +120,16 @@ void OptionsModel::Init(bool resetSettings)\n     if (resetSettings)\n         Reset();\n \n+    // Initialize display settings from stored settings.\n+    m_prune_size_gb = PruneSizeGB(node().getPersistentSetting(\"prune\"));\n+    ProxySetting proxy = ParseProxyString(ToQString(node().getPersistentSetting(\"proxy\")));\n+    m_proxy_ip = proxy.ip;\n+    m_proxy_port = proxy.port;\n+    ProxySetting onion = ParseProxyString(ToQString(node().getPersistentSetting(\"onion\")));\n+    m_onion_ip = onion.ip;\n+    m_onion_port = onion.port;\n+    language = ToQString(node().getPersistentSetting(\"language\"));\n+\n     checkAndMigrate();\n \n     QSettings settings;\n@@ -85,105 +169,30 @@ void OptionsModel::Init(bool resetSettings)\n \n     // These are shared with the core or have a command-line parameter\n     // and we want command-line parameters to overwrite the GUI settings.\n-    //\n-    // If setting doesn't exist create it with defaults.\n-    //\n-    // If gArgs.SoftSetArg() or gArgs.SoftSetBoolArg() return false we were overridden\n-    // by command-line and show this in the UI.\n-\n-    // Main\n-    if (!settings.contains(\"bPrune\"))\n-        settings.setValue(\"bPrune\", false);\n-    if (!settings.contains(\"nPruneSize\"))\n-        settings.setValue(\"nPruneSize\", DEFAULT_PRUNE_TARGET_GB);\n-    SetPruneEnabled(settings.value(\"bPrune\").toBool());\n-\n-    if (!settings.contains(\"nDatabaseCache\"))\n-        settings.setValue(\"nDatabaseCache\", (qint64)nDefaultDbCache);\n-    if (!gArgs.SoftSetArg(\"-dbcache\", settings.value(\"nDatabaseCache\").toString().toStdString()))\n-        addOverriddenOption(\"-dbcache\");\n-\n-    if (!settings.contains(\"nThreadsScriptVerif\"))\n-        settings.setValue(\"nThreadsScriptVerif\", DEFAULT_SCRIPTCHECK_THREADS);\n-    if (!gArgs.SoftSetArg(\"-par\", settings.value(\"nThreadsScriptVerif\").toString().toStdString()))\n-        addOverriddenOption(\"-par\");\n+    if (node().isSettingIgnored(\"prune\")) addOverriddenOption(\"-prune\");\n+    if (node().isSettingIgnored(\"dbcache\")) addOverriddenOption(\"-dbcache\");\n+    if (node().isSettingIgnored(\"par\")) addOverriddenOption(\"-par\");\n+    if (node().isSettingIgnored(\"spendzeroconfchange\")) addOverriddenOption(\"-spendzeroconfchange\");\n+    if (node().isSettingIgnored(\"signer\")) addOverriddenOption(\"-signer\");\n+    if (node().isSettingIgnored(\"upnp\")) addOverriddenOption(\"-upnp\");\n+    if (node().isSettingIgnored(\"natpmp\")) addOverriddenOption(\"-natpmp\");\n+    if (node().isSettingIgnored(\"listen\")) addOverriddenOption(\"-listen\");\n+    if (node().isSettingIgnored(\"proxy\")) addOverriddenOption(\"-proxy\");\n+    if (node().isSettingIgnored(\"onion\")) addOverriddenOption(\"-onion\");\n+    if (node().isSettingIgnored(\"language\")) addOverriddenOption(\"-language\");\n \n+    // If setting doesn't exist create it with defaults.\n     if (!settings.contains(\"strDataDir\"))\n         settings.setValue(\"strDataDir\", GUIUtil::getDefaultDataDirectory());\n \n     // Wallet\n #ifdef ENABLE_WALLET\n-    if (!settings.contains(\"bSpendZeroConfChange\"))\n-        settings.setValue(\"bSpendZeroConfChange\", true);\n-    if (!gArgs.SoftSetBoolArg(\"-spendzeroconfchange\", settings.value(\"bSpendZeroConfChange\").toBool()))\n-        addOverriddenOption(\"-spendzeroconfchange\");\n-\n-    if (!settings.contains(\"external_signer_path\"))\n-        settings.setValue(\"external_signer_path\", \"\");\n-\n-    if (!gArgs.SoftSetArg(\"-signer\", settings.value(\"external_signer_path\").toString().toStdString())) {\n-        addOverriddenOption(\"-signer\");\n-    }\n-\n     if (!settings.contains(\"SubFeeFromAmount\")) {\n         settings.setValue(\"SubFeeFromAmount\", false);\n     }\n     m_sub_fee_from_amount = settings.value(\"SubFeeFromAmount\", false).toBool();\n #endif\n \n-    // Network\n-    if (!settings.contains(\"fUseUPnP\"))\n-        settings.setValue(\"fUseUPnP\", DEFAULT_UPNP);\n-    if (!gArgs.SoftSetBoolArg(\"-upnp\", settings.value(\"fUseUPnP\").toBool()))\n-        addOverriddenOption(\"-upnp\");\n-\n-    if (!settings.contains(\"fUseNatpmp\")) {\n-        settings.setValue(\"fUseNatpmp\", DEFAULT_NATPMP);\n-    }\n-    if (!gArgs.SoftSetBoolArg(\"-natpmp\", settings.value(\"fUseNatpmp\").toBool())) {\n-        addOverriddenOption(\"-natpmp\");\n-    }\n-\n-    if (!settings.contains(\"fListen\"))\n-        settings.setValue(\"fListen\", DEFAULT_LISTEN);\n-    if (!gArgs.SoftSetBoolArg(\"-listen\", settings.value(\"fListen\").toBool()))\n-        addOverriddenOption(\"-listen\");\n-\n-    if (!settings.contains(\"server\")) {\n-        settings.setValue(\"server\", false);\n-    }\n-    if (!gArgs.SoftSetBoolArg(\"-server\", settings.value(\"server\").toBool())) {\n-        addOverriddenOption(\"-server\");\n-    }\n-\n-    if (!settings.contains(\"fUseProxy\"))\n-        settings.setValue(\"fUseProxy\", false);\n-    if (!settings.contains(\"addrProxy\"))\n-        settings.setValue(\"addrProxy\", GetDefaultProxyAddress());\n-    // Only try to set -proxy, if user has enabled fUseProxy\n-    if ((settings.value(\"fUseProxy\").toBool() && !gArgs.SoftSetArg(\"-proxy\", settings.value(\"addrProxy\").toString().toStdString())))\n-        addOverriddenOption(\"-proxy\");\n-    else if(!settings.value(\"fUseProxy\").toBool() && !gArgs.GetArg(\"-proxy\", \"\").empty())\n-        addOverriddenOption(\"-proxy\");\n-\n-    if (!settings.contains(\"fUseSeparateProxyTor\"))\n-        settings.setValue(\"fUseSeparateProxyTor\", false);\n-    if (!settings.contains(\"addrSeparateProxyTor\"))\n-        settings.setValue(\"addrSeparateProxyTor\", GetDefaultProxyAddress());\n-    // Only try to set -onion, if user has enabled fUseSeparateProxyTor\n-    if ((settings.value(\"fUseSeparateProxyTor\").toBool() && !gArgs.SoftSetArg(\"-onion\", settings.value(\"addrSeparateProxyTor\").toString().toStdString())))\n-        addOverriddenOption(\"-onion\");\n-    else if(!settings.value(\"fUseSeparateProxyTor\").toBool() && !gArgs.GetArg(\"-onion\", \"\").empty())\n-        addOverriddenOption(\"-onion\");\n-\n-    // Display\n-    if (!settings.contains(\"language\"))\n-        settings.setValue(\"language\", \"\");\n-    if (!gArgs.SoftSetArg(\"-lang\", settings.value(\"language\").toString().toStdString()))\n-        addOverriddenOption(\"-lang\");\n-\n-    language = settings.value(\"language\").toString();\n-\n     if (!settings.contains(\"UseEmbeddedMonospacedFont\")) {\n         settings.setValue(\"UseEmbeddedMonospacedFont\", \"true\");\n     }\n@@ -240,31 +249,25 @@ int OptionsModel::rowCount(const QModelIndex & parent) const\n     return OptionIDRowCount;\n }\n \n-struct ProxySetting {\n-    bool is_set;\n-    QString ip;\n-    QString port;\n-};\n-\n-static ProxySetting GetProxySetting(QSettings &settings, const QString &name)\n+static ProxySetting ParseProxyString(const QString& proxy)\n {\n     static const ProxySetting default_val = {false, DEFAULT_GUI_PROXY_HOST, QString(\"%1\").arg(DEFAULT_GUI_PROXY_PORT)};\n     // Handle the case that the setting is not set at all\n-    if (!settings.contains(name)) {\n+    if (proxy.isEmpty()) {\n         return default_val;\n     }\n     // contains IP at index 0 and port at index 1\n-    QStringList ip_port = GUIUtil::SplitSkipEmptyParts(settings.value(name).toString(), \":\");\n+    QStringList ip_port = GUIUtil::SplitSkipEmptyParts(proxy, \":\");\n     if (ip_port.size() == 2) {\n         return {true, ip_port.at(0), ip_port.at(1)};\n     } else { // Invalid: return default\n         return default_val;\n     }\n }\n \n-static void SetProxySetting(QSettings &settings, const QString &name, const ProxySetting &ip_port)\n+static QString ProxyString(bool is_set, QString ip, QString port)\n {\n-    settings.setValue(name, QString{ip_port.ip + QLatin1Char(':') + ip_port.port});\n+    return is_set ? ip + \":\" + port : QString{\"\"};\n }\n \n static const QString GetDefaultProxyAddress()\n@@ -274,16 +277,10 @@ static const QString GetDefaultProxyAddress()\n \n void OptionsModel::SetPruneEnabled(bool prune, bool force)\n {\n-    QSettings settings;\n-    settings.setValue(\"bPrune\", prune);\n-    const int64_t prune_target_mib = PruneGBtoMiB(settings.value(\"nPruneSize\").toInt());\n-    std::string prune_val = prune ? ToString(prune_target_mib) : \"0\";\n     if (force) {\n-        gArgs.ForceSetArg(\"-prune\", prune_val);\n-        return;\n-    }\n-    if (!gArgs.SoftSetArg(\"-prune\", prune_val)) {\n-        addOverriddenOption(\"-prune\");\n+        node().updateSetting(\"prune\", PruneSetting(prune, m_prune_size_gb));\n+    } else {\n+        setOption(Prune, prune);\n     }\n }\n \n@@ -302,254 +299,276 @@ QVariant OptionsModel::data(const QModelIndex & index, int role) const\n {\n     if(role == Qt::EditRole)\n     {\n-        QSettings settings;\n-        switch(index.row())\n-        {\n-        case StartAtStartup:\n-            return GUIUtil::GetStartOnSystemStartup();\n-        case ShowTrayIcon:\n-            return m_show_tray_icon;\n-        case MinimizeToTray:\n-            return fMinimizeToTray;\n-        case MapPortUPnP:\n+        return getOption(OptionID(index.row()));\n+    }\n+    return QVariant();\n+}\n+\n+// write QSettings values\n+bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, int role)\n+{\n+    bool successful = true; /* set to false on parse error */\n+    if(role == Qt::EditRole)\n+    {\n+        successful = setOption(OptionID(index.row()), value);\n+    }\n+\n+    Q_EMIT dataChanged(index, index);\n+\n+    return successful;\n+}\n+\n+QVariant OptionsModel::getOption(OptionID option) const\n+{\n+    QSettings settings;\n+    switch (option) {\n+    case StartAtStartup:\n+        return GUIUtil::GetStartOnSystemStartup();\n+    case ShowTrayIcon:\n+        return m_show_tray_icon;\n+    case MinimizeToTray:\n+        return fMinimizeToTray;\n+    case MapPortUPnP:\n #ifdef USE_UPNP\n-            return settings.value(\"fUseUPnP\");\n+        return settings.value(\"fUseUPnP\");\n #else\n-            return false;\n-#endif // USE_UPNP\n-        case MapPortNatpmp:\n+        return false;\n+#endif\n+    case MapPortNatpmp:\n #ifdef USE_NATPMP\n-            return settings.value(\"fUseNatpmp\");\n+        return settings.value(\"fUseNatpmp\");\n #else\n-            return false;\n+        return false;\n #endif // USE_NATPMP\n-        case MinimizeOnClose:\n-            return fMinimizeOnClose;\n-\n-        // default proxy\n-        case ProxyUse:\n-            return settings.value(\"fUseProxy\", false);\n-        case ProxyIP:\n-            return GetProxySetting(settings, \"addrProxy\").ip;\n-        case ProxyPort:\n-            return GetProxySetting(settings, \"addrProxy\").port;\n-\n-        // separate Tor proxy\n-        case ProxyUseTor:\n-            return settings.value(\"fUseSeparateProxyTor\", false);\n-        case ProxyIPTor:\n-            return GetProxySetting(settings, \"addrSeparateProxyTor\").ip;\n-        case ProxyPortTor:\n-            return GetProxySetting(settings, \"addrSeparateProxyTor\").port;\n+    case MinimizeOnClose:\n+        return fMinimizeOnClose;\n+\n+    // default proxy\n+    case ProxyUse:\n+        return !ToQString(node().getPersistentSetting(\"proxy\")).isEmpty();\n+    case ProxyIP:\n+        return m_proxy_ip;\n+    case ProxyPort:\n+        return m_proxy_port;\n+\n+    // separate Tor proxy\n+    case ProxyUseTor:\n+        return !ToQString(node().getPersistentSetting(\"onion\")).isEmpty();\n+    case ProxyIPTor:\n+        return m_onion_ip;\n+    case ProxyPortTor:\n+        return m_onion_port;\n \n #ifdef ENABLE_WALLET\n-        case SpendZeroConfChange:\n-            return settings.value(\"bSpendZeroConfChange\");\n-        case ExternalSignerPath:\n-            return settings.value(\"external_signer_path\");\n-        case SubFeeFromAmount:\n-            return m_sub_fee_from_amount;\n+    case SpendZeroConfChange:\n+        return ToQVariant(node().getPersistentSetting(\"spendzeroconfchange\"), true);\n+    case ExternalSignerPath:\n+        return ToQVariant(node().getPersistentSetting(\"signer\"), \"\");\n+    case SubFeeFromAmount:\n+        return m_sub_fee_from_amount;\n #endif\n-        case DisplayUnit:\n-            return nDisplayUnit;\n-        case ThirdPartyTxUrls:\n-            return strThirdPartyTxUrls;\n-        case Language:\n-            return settings.value(\"language\");\n-        case UseEmbeddedMonospacedFont:\n-            return m_use_embedded_monospaced_font;\n-        case CoinControlFeatures:\n-            return fCoinControlFeatures;\n-        case Prune:\n-            return settings.value(\"bPrune\");\n-        case PruneSize:\n-            return settings.value(\"nPruneSize\");\n-        case DatabaseCache:\n-            return settings.value(\"nDatabaseCache\");\n-        case ThreadsScriptVerif:\n-            return settings.value(\"nThreadsScriptVerif\");\n-        case Listen:\n-            return settings.value(\"fListen\");\n-        case Server:\n-            return settings.value(\"server\");\n-        default:\n-            return QVariant();\n-        }\n+    case DisplayUnit:\n+        return nDisplayUnit;\n+    case ThirdPartyTxUrls:\n+        return strThirdPartyTxUrls;\n+    case Language:\n+        return ToQVariant(node().getPersistentSetting(\"language\"), \"\");\n+    case UseEmbeddedMonospacedFont:\n+        return m_use_embedded_monospaced_font;\n+    case CoinControlFeatures:\n+        return fCoinControlFeatures;\n+    case Prune:\n+        return PruneEnabled(node().getPersistentSetting(\"prune\"));\n+    case PruneSize:\n+        return m_prune_size_gb;\n+    case DatabaseCache:\n+        return ToQVariant(node().getPersistentSetting(\"dbcache\"), (qint64)nDefaultDbCache);\n+    case ThreadsScriptVerif:\n+        return ToQVariant(node().getPersistentSetting(\"par\"), DEFAULT_SCRIPTCHECK_THREADS);\n+    case Listen:\n+        return ToQVariant(node().getPersistentSetting(\"listen\"), DEFAULT_LISTEN);\n+    case Server:\n+        return ToQVariant(node().getPersistentSetting(\"server\"), false);\n+    default:\n+        return QVariant();\n     }\n-    return QVariant();\n }\n \n-// write QSettings values\n-bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, int role)\n+bool OptionsModel::setOption(OptionID option, const QVariant& value)\n {\n+    auto changed = [&] { return value.isValid() && value != getOption(option); };\n+\n     bool successful = true; /* set to false on parse error */\n-    if(role == Qt::EditRole)\n-    {\n-        QSettings settings;\n-        switch(index.row())\n-        {\n-        case StartAtStartup:\n-            successful = GUIUtil::SetStartOnSystemStartup(value.toBool());\n-            break;\n-        case ShowTrayIcon:\n-            m_show_tray_icon = value.toBool();\n-            settings.setValue(\"fHideTrayIcon\", !m_show_tray_icon);\n-            Q_EMIT showTrayIconChanged(m_show_tray_icon);\n-            break;\n-        case MinimizeToTray:\n-            fMinimizeToTray = value.toBool();\n-            settings.setValue(\"fMinimizeToTray\", fMinimizeToTray);\n-            break;\n-        case MapPortUPnP: // core option - can be changed on-the-fly\n-            settings.setValue(\"fUseUPnP\", value.toBool());\n-            break;\n-        case MapPortNatpmp: // core option - can be changed on-the-fly\n-            settings.setValue(\"fUseNatpmp\", value.toBool());\n-            break;\n-        case MinimizeOnClose:\n-            fMinimizeOnClose = value.toBool();\n-            settings.setValue(\"fMinimizeOnClose\", fMinimizeOnClose);\n-            break;\n-\n-        // default proxy\n-        case ProxyUse:\n-            if (settings.value(\"fUseProxy\") != value) {\n-                settings.setValue(\"fUseProxy\", value.toBool());\n-                setRestartRequired(true);\n-            }\n-            break;\n-        case ProxyIP: {\n-            auto ip_port = GetProxySetting(settings, \"addrProxy\");\n-            if (!ip_port.is_set || ip_port.ip != value.toString()) {\n-                ip_port.ip = value.toString();\n-                SetProxySetting(settings, \"addrProxy\", ip_port);\n+    QSettings settings;\n+\n+    switch (option) {\n+    case StartAtStartup:\n+        successful = GUIUtil::SetStartOnSystemStartup(value.toBool());\n+        break;\n+    case ShowTrayIcon:\n+        m_show_tray_icon = value.toBool();\n+        settings.setValue(\"fHideTrayIcon\", !m_show_tray_icon);\n+        Q_EMIT showTrayIconChanged(m_show_tray_icon);\n+        break;\n+    case MinimizeToTray:\n+        fMinimizeToTray = value.toBool();\n+        settings.setValue(\"fMinimizeToTray\", fMinimizeToTray);\n+        break;\n+    case MapPortUPnP: // core option - can be changed on-the-fly\n+        if (changed()) {\n+            node().updateSetting(\"upnp\", ToSetting(value, QVariant::Bool));\n+            node().mapPort(value.toBool(), getOption(MapPortNatpmp).toBool());\n+        }\n+        break;\n+    case MapPortNatpmp: // core option - can be changed on-the-fly\n+        if (changed()) {\n+            node().updateSetting(\"fUseNatpmp\", ToSetting(value, QVariant::Bool));\n+            node().mapPort(getOption(MapPortUPnP).toBool(), value.toBool());\n+        }\n+        break;\n+    case MinimizeOnClose:\n+        fMinimizeOnClose = value.toBool();\n+        settings.setValue(\"fMinimizeOnClose\", fMinimizeOnClose);\n+        break;\n+\n+    // default proxy\n+    case ProxyUse:\n+        if (changed()) {\n+            node().updateSetting(\"proxy\", ProxyString(value.toBool(), m_proxy_ip, m_proxy_port).toStdString());\n+            setRestartRequired(true);\n+        }\n+        break;\n+    case ProxyIP:\n+        if (changed()) {\n+            m_proxy_ip = value.toString();\n+            if (getOption(ProxyUse).toBool()) {\n+                node().updateSetting(\"proxy\", ProxyString(true, m_proxy_ip, m_proxy_port).toStdString());\n                 setRestartRequired(true);\n             }\n         }\n         break;\n-        case ProxyPort: {\n-            auto ip_port = GetProxySetting(settings, \"addrProxy\");\n-            if (!ip_port.is_set || ip_port.port != value.toString()) {\n-                ip_port.port = value.toString();\n-                SetProxySetting(settings, \"addrProxy\", ip_port);\n+    case ProxyPort:\n+        if (changed()) {\n+            m_proxy_port = value.toString();\n+            if (getOption(ProxyUse).toBool()) {\n+                node().updateSetting(\"proxy\", ProxyString(true, m_proxy_ip, m_proxy_port).toStdString());\n                 setRestartRequired(true);\n             }\n         }\n         break;\n \n-        // separate Tor proxy\n-        case ProxyUseTor:\n-            if (settings.value(\"fUseSeparateProxyTor\") != value) {\n-                settings.setValue(\"fUseSeparateProxyTor\", value.toBool());\n-                setRestartRequired(true);\n-            }\n-            break;\n-        case ProxyIPTor: {\n-            auto ip_port = GetProxySetting(settings, \"addrSeparateProxyTor\");\n-            if (!ip_port.is_set || ip_port.ip != value.toString()) {\n-                ip_port.ip = value.toString();\n-                SetProxySetting(settings, \"addrSeparateProxyTor\", ip_port);\n+    // separate Tor proxy\n+    case ProxyUseTor:\n+        if (changed()) {\n+            node().updateSetting(\"onion\", ProxyString(value.toBool(), m_onion_ip, m_onion_port).toStdString());\n+            setRestartRequired(true);\n+        }\n+        break;\n+    case ProxyIPTor:\n+        if (changed()) {\n+            m_onion_ip = value.toString();\n+            if (getOption(ProxyUseTor).toBool()) {\n+                node().updateSetting(\"onion\", ProxyString(true, m_onion_ip, m_onion_port).toStdString());\n                 setRestartRequired(true);\n             }\n         }\n         break;\n-        case ProxyPortTor: {\n-            auto ip_port = GetProxySetting(settings, \"addrSeparateProxyTor\");\n-            if (!ip_port.is_set || ip_port.port != value.toString()) {\n-                ip_port.port = value.toString();\n-                SetProxySetting(settings, \"addrSeparateProxyTor\", ip_port);\n+    case ProxyPortTor:\n+        if (changed()) {\n+            m_onion_port = value.toString();\n+            if (getOption(ProxyUseTor).toBool()) {\n+                node().updateSetting(\"onion\", ProxyString(true, m_onion_ip, m_onion_port).toStdString());\n                 setRestartRequired(true);\n             }\n         }\n         break;\n \n #ifdef ENABLE_WALLET\n-        case SpendZeroConfChange:\n-            if (settings.value(\"bSpendZeroConfChange\") != value) {\n-                settings.setValue(\"bSpendZeroConfChange\", value);\n-                setRestartRequired(true);\n-            }\n-            break;\n-        case ExternalSignerPath:\n-            if (settings.value(\"external_signer_path\") != value.toString()) {\n-                settings.setValue(\"external_signer_path\", value.toString());\n-                setRestartRequired(true);\n-            }\n-            break;\n-        case SubFeeFromAmount:\n-            m_sub_fee_from_amount = value.toBool();\n-            settings.setValue(\"SubFeeFromAmount\", m_sub_fee_from_amount);\n-            break;\n+    case SpendZeroConfChange:\n+        if (changed()) {\n+            node().updateSetting(\"spendzeroconfchange\", ToSetting(value, QVariant::Bool));\n+            setRestartRequired(true);\n+        }\n+        break;\n+    case ExternalSignerPath:\n+        if (changed()) {\n+            node().updateSetting(\"signer\", ToSetting(value, QVariant::String));\n+            setRestartRequired(true);\n+        }\n+        break;\n+    case SubFeeFromAmount:\n+        m_sub_fee_from_amount = value.toBool();\n+        settings.setValue(\"SubFeeFromAmount\", m_sub_fee_from_amount);\n+        break;\n #endif\n-        case DisplayUnit:\n-            setDisplayUnit(value);\n-            break;\n-        case ThirdPartyTxUrls:\n-            if (strThirdPartyTxUrls != value.toString()) {\n-                strThirdPartyTxUrls = value.toString();\n-                settings.setValue(\"strThirdPartyTxUrls\", strThirdPartyTxUrls);\n-                setRestartRequired(true);\n-            }\n-            break;\n-        case Language:\n-            if (settings.value(\"language\") != value) {\n-                settings.setValue(\"language\", value);\n-                setRestartRequired(true);\n-            }\n-            break;\n-        case UseEmbeddedMonospacedFont:\n-            m_use_embedded_monospaced_font = value.toBool();\n-            settings.setValue(\"UseEmbeddedMonospacedFont\", m_use_embedded_monospaced_font);\n-            Q_EMIT useEmbeddedMonospacedFontChanged(m_use_embedded_monospaced_font);\n-            break;\n-        case CoinControlFeatures:\n-            fCoinControlFeatures = value.toBool();\n-            settings.setValue(\"fCoinControlFeatures\", fCoinControlFeatures);\n-            Q_EMIT coinControlFeaturesChanged(fCoinControlFeatures);\n-            break;\n-        case Prune:\n-            if (settings.value(\"bPrune\") != value) {\n-                settings.setValue(\"bPrune\", value);\n-                setRestartRequired(true);\n-            }\n-            break;\n-        case PruneSize:\n-            if (settings.value(\"nPruneSize\") != value) {\n-                settings.setValue(\"nPruneSize\", value);\n-                setRestartRequired(true);\n-            }\n-            break;\n-        case DatabaseCache:\n-            if (settings.value(\"nDatabaseCache\") != value) {\n-                settings.setValue(\"nDatabaseCache\", value);\n-                setRestartRequired(true);\n-            }\n-            break;\n-        case ThreadsScriptVerif:\n-            if (settings.value(\"nThreadsScriptVerif\") != value) {\n-                settings.setValue(\"nThreadsScriptVerif\", value);\n-                setRestartRequired(true);\n-            }\n-            break;\n-        case Listen:\n-            if (settings.value(\"fListen\") != value) {\n-                settings.setValue(\"fListen\", value);\n-                setRestartRequired(true);\n-            }\n-            break;\n-        case Server:\n-            if (settings.value(\"server\") != value) {\n-                settings.setValue(\"server\", value);\n+    case DisplayUnit:\n+        setDisplayUnit(value);\n+        break;\n+    case ThirdPartyTxUrls:\n+        if (strThirdPartyTxUrls != value.toString()) {\n+            strThirdPartyTxUrls = value.toString();\n+            settings.setValue(\"strThirdPartyTxUrls\", strThirdPartyTxUrls);\n+            setRestartRequired(true);\n+        }\n+        break;\n+    case Language:\n+        if (changed()) {\n+            node().updateSetting(\"lang\", ToSetting(value, QVariant::String));\n+            setRestartRequired(true);\n+        }\n+        break;\n+    case UseEmbeddedMonospacedFont:\n+        m_use_embedded_monospaced_font = value.toBool();\n+        settings.setValue(\"UseEmbeddedMonospacedFont\", m_use_embedded_monospaced_font);\n+        Q_EMIT useEmbeddedMonospacedFontChanged(m_use_embedded_monospaced_font);\n+        break;\n+    case CoinControlFeatures:\n+        fCoinControlFeatures = value.toBool();\n+        settings.setValue(\"fCoinControlFeatures\", fCoinControlFeatures);\n+        Q_EMIT coinControlFeaturesChanged(fCoinControlFeatures);\n+        break;\n+    case Prune:\n+        if (changed()) {\n+            node().updateSetting(\"prune\", PruneSetting(value.toBool(), m_prune_size_gb));\n+            setRestartRequired(true);\n+        }\n+        break;\n+    case PruneSize:\n+        if (changed()) {\n+            m_prune_size_gb = ParsePruneSizeGB(value);\n+            if (getOption(Prune).toBool()) {\n+                node().updateSetting(\"prune\", PruneSetting(true, m_prune_size_gb));\n                 setRestartRequired(true);\n             }\n-            break;\n-        default:\n-            break;\n         }\n+        break;\n+    case DatabaseCache:\n+        if (changed()) {\n+            node().updateSetting(\"dbcache\", ToSetting(value, QVariant::Int));\n+            setRestartRequired(true);\n+        }\n+        break;\n+    case ThreadsScriptVerif:\n+        if (changed()) {\n+            node().updateSetting(\"par\", ToSetting(value, QVariant::Int));\n+            setRestartRequired(true);\n+        }\n+        break;\n+    case Server:\n+        if (changed()) {\n+            node().updateSetting(\"server\", ToSetting(value, QVariant::Bool));\n+            setRestartRequired(true);\n+        }\n+        break;\n+    case Listen:\n+        if (changed()) {\n+            node().updateSetting(\"listen\", ToSetting(value, QVariant::Bool));\n+            setRestartRequired(true);\n+        }\n+        break;\n+    default:\n+        break;\n     }\n-\n-    Q_EMIT dataChanged(index, index);\n-\n     return successful;\n }\n \n@@ -606,4 +625,41 @@ void OptionsModel::checkAndMigrate()\n     if (settings.contains(\"addrSeparateProxyTor\") && settings.value(\"addrSeparateProxyTor\").toString().endsWith(\"%2\")) {\n         settings.setValue(\"addrSeparateProxyTor\", GetDefaultProxyAddress());\n     }\n+\n+    // Migrate and delete legacy GUI settings that have now moved to <datadir>/settings.json.\n+    auto migrate_setting = [&](OptionID option, const QString& qt_name, const std::string& name) {\n+        if (!settings.contains(qt_name)) return;\n+        QVariant value = settings.value(qt_name);\n+        if (node().getPersistentSetting(name).isNull()) {\n+            if (option == ProxyIP) {\n+                ProxySetting parsed = ParseProxyString(value.toString());\n+                setOption(ProxyIP, parsed.ip);\n+                setOption(ProxyPort, parsed.port);\n+            } else if (option == ProxyIPTor) {\n+                ProxySetting parsed = ParseProxyString(value.toString());\n+                setOption(ProxyIPTor, parsed.ip);\n+                setOption(ProxyPortTor, parsed.port);\n+            } else {\n+                setOption(option, value);\n+            }\n+        }\n+        settings.remove(qt_name);\n+    };\n+\n+    migrate_setting(DatabaseCache, \"nDatabaseCache\", \"dbcache\");\n+    migrate_setting(ThreadsScriptVerif, \"nThreadsScriptVerif\", \"par\");\n+#ifdef ENABLE_WALLET\n+    migrate_setting(SpendZeroConfChange, \"bSpendZeroConfChange\", \"spendzeroconfchange\");\n+    migrate_setting(ExternalSignerPath, \"external_signer_path\", \"signer\");\n+#endif\n+    migrate_setting(MapPortUPnP, \"fUseUPnP\", \"upnp\");\n+    migrate_setting(MapPortNatpmp, \"fUseNatpmp\", \"natpmp\");\n+    migrate_setting(Listen, \"fListen\", \"listen\");\n+    migrate_setting(Server, \"server\", \"server\");\n+    migrate_setting(PruneSize, \"nPruneSize\", \"prune\");\n+    migrate_setting(Prune, \"bPrune\", \"prune\");\n+    migrate_setting(ProxyIP, \"addrProxy\", \"proxy\");\n+    migrate_setting(ProxyUse, \"fUseProxy\", \"proxy\");\n+    migrate_setting(ProxyIPTor, \"addrSeparateProxyTor\", \"onion\");\n+    migrate_setting(ProxyUseTor, \"fUseSeparateProxyTor\", \"onion\");\n }"
      },
      {
        "sha": "a1253da1cc509d985b683f55089a654a823da92a",
        "filename": "src/qt/optionsmodel.h",
        "status": "modified",
        "additions": 14,
        "deletions": 4,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32ef6cfa521b8a0615de3259d7b81383608ab8f3/src/qt/optionsmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32ef6cfa521b8a0615de3259d7b81383608ab8f3/src/qt/optionsmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.h?ref=32ef6cfa521b8a0615de3259d7b81383608ab8f3",
        "patch": "@@ -40,7 +40,7 @@ class OptionsModel : public QAbstractListModel\n     Q_OBJECT\n \n public:\n-    explicit OptionsModel(QObject *parent = nullptr, bool resetSettings = false);\n+    explicit OptionsModel(interfaces::Node& node, QObject *parent = nullptr, bool resetSettings = false);\n \n     enum OptionID {\n         StartAtStartup,         // bool\n@@ -78,6 +78,8 @@ class OptionsModel : public QAbstractListModel\n     int rowCount(const QModelIndex & parent = QModelIndex()) const override;\n     QVariant data(const QModelIndex & index, int role = Qt::DisplayRole) const override;\n     bool setData(const QModelIndex & index, const QVariant & value, int role = Qt::EditRole) override;\n+    QVariant getOption(OptionID option) const;\n+    bool setOption(OptionID option, const QVariant &value);\n     /** Updates current unit in memory, settings and emits displayUnitChanged(newUnit) signal */\n     void setDisplayUnit(const QVariant &value);\n \n@@ -93,15 +95,14 @@ class OptionsModel : public QAbstractListModel\n     const QString& getOverriddenByCommandLine() { return strOverriddenByCommandLine; }\n \n     /* Explicit setters */\n-    void SetPruneEnabled(bool prune, bool force = false);\n-    void SetPruneTargetGB(int prune_target_gb, bool force = false);\n+    void SetPruneEnabled(bool prune, bool force);\n+    void SetPruneTargetGB(int prune_target_gb, bool force);\n \n     /* Restart flag helper */\n     void setRestartRequired(bool fRequired);\n     bool isRestartRequired() const;\n \n     interfaces::Node& node() const { assert(m_node); return *m_node; }\n-    void setNode(interfaces::Node& node) { assert(!m_node); m_node = &node; }\n \n private:\n     interfaces::Node* m_node = nullptr;\n@@ -115,6 +116,15 @@ class OptionsModel : public QAbstractListModel\n     bool m_use_embedded_monospaced_font;\n     bool fCoinControlFeatures;\n     bool m_sub_fee_from_amount;\n+    //! In-memory settings for display. These are stored persistently by the\n+    //! bitcoin node but it's also nice to store them in memory to prevent them\n+    //! getting cleared when enable/disable toggles are used in the GUI.\n+    int m_prune_size_gb;\n+    QString m_proxy_ip;\n+    QString m_proxy_port;\n+    QString m_onion_ip;\n+    QString m_onion_port;\n+\n     /* settings that were overridden by command-line */\n     QString strOverriddenByCommandLine;\n "
      },
      {
        "sha": "81d8af0c5b7ac7bbeaa631e23bbccce79e0a1e9a",
        "filename": "src/qt/test/addressbooktests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32ef6cfa521b8a0615de3259d7b81383608ab8f3/src/qt/test/addressbooktests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32ef6cfa521b8a0615de3259d7b81383608ab8f3/src/qt/test/addressbooktests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/addressbooktests.cpp?ref=32ef6cfa521b8a0615de3259d7b81383608ab8f3",
        "patch": "@@ -113,7 +113,7 @@ void TestAddAddressesToSendBook(interfaces::Node& node)\n \n     // Initialize relevant QT models.\n     std::unique_ptr<const PlatformStyle> platformStyle(PlatformStyle::instantiate(\"other\"));\n-    OptionsModel optionsModel;\n+    OptionsModel optionsModel(node);\n     ClientModel clientModel(node, &optionsModel);\n     WalletContext& context = *node.walletClient().context();\n     AddWallet(context, wallet);"
      },
      {
        "sha": "a22af606bcf8ff9446d34452516692670477f16f",
        "filename": "src/qt/test/optiontests.cpp",
        "status": "added",
        "additions": 57,
        "deletions": 0,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32ef6cfa521b8a0615de3259d7b81383608ab8f3/src/qt/test/optiontests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32ef6cfa521b8a0615de3259d7b81383608ab8f3/src/qt/test/optiontests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/optiontests.cpp?ref=32ef6cfa521b8a0615de3259d7b81383608ab8f3",
        "patch": "@@ -0,0 +1,57 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <qt/bitcoin.h>\n+#include <qt/test/optiontests.h>\n+#include <test/util/setup_common.h>\n+#include <util/system.h>\n+\n+#include <QSettings>\n+#include <QTest>\n+\n+#include <univalue.h>\n+\n+//! Entry point for BitcoinApplication tests.\n+void OptionTests::optionTests()\n+{\n+    BasicTestingSetup test{CBaseChainParams::REGTEST};\n+    m_node.setContext(&test.m_node);\n+    m_node.updateSetting(\"wallet\", {}); // Clear setting to be independent of ENABLE_WALLET\n+\n+    QSettings settings;\n+    settings.setValue(\"nDatabaseCache\", 600);\n+    settings.setValue(\"nThreadsScriptVerif\", 12);\n+    settings.setValue(\"fUseUPnP\", false);\n+    settings.setValue(\"fListen\", false);\n+    settings.setValue(\"bPrune\", true);\n+    settings.setValue(\"nPruneSize\", 3);\n+    settings.setValue(\"fUseProxy\", true);\n+    settings.setValue(\"addrProxy\", \"proxy:123\");\n+    settings.setValue(\"fUseSeparateProxyTor\", true);\n+    settings.setValue(\"addrSeparateProxyTor\", \"onion:234\");\n+\n+    settings.sync();\n+\n+    OptionsModel options(m_node);\n+    QVERIFY(!settings.contains(\"nDatabaseCache\"));\n+    QVERIFY(!settings.contains(\"nThreadsScriptVerif\"));\n+    QVERIFY(!settings.contains(\"fUseUPnP\"));\n+    QVERIFY(!settings.contains(\"fListen\"));\n+    QVERIFY(!settings.contains(\"bPrune\"));\n+    QVERIFY(!settings.contains(\"nPruneSize\"));\n+    QVERIFY(!settings.contains(\"fUseProxy\"));\n+    QVERIFY(!settings.contains(\"addrProxy\"));\n+    QVERIFY(!settings.contains(\"fUseSeparateProxyTor\"));\n+    QVERIFY(!settings.contains(\"addrSeparateProxyTor\"));\n+\n+    fsbridge::ifstream file(gArgs.GetDataDirNet() / \"settings.json\");\n+    QCOMPARE(std::string(std::istreambuf_iterator<char>(file), std::istreambuf_iterator<char>()).c_str(), \"{\\n\"\n+        \"    \\\"dbcache\\\": 600,\\n\"\n+        \"    \\\"listen\\\": false,\\n\"\n+        \"    \\\"onion\\\": \\\"onion:234\\\",\\n\"\n+        \"    \\\"par\\\": 12,\\n\"\n+        \"    \\\"proxy\\\": \\\"proxy:123\\\",\\n\"\n+        \"    \\\"prune\\\": 2861\\n\"\n+        \"   }\\n\");\n+}"
      },
      {
        "sha": "779d4cc209a27fccd591382cb7b5a3e845a74a3b",
        "filename": "src/qt/test/optiontests.h",
        "status": "added",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32ef6cfa521b8a0615de3259d7b81383608ab8f3/src/qt/test/optiontests.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32ef6cfa521b8a0615de3259d7b81383608ab8f3/src/qt/test/optiontests.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/optiontests.h?ref=32ef6cfa521b8a0615de3259d7b81383608ab8f3",
        "patch": "@@ -0,0 +1,25 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_QT_TEST_OPTIONTESTS_H\n+#define BITCOIN_QT_TEST_OPTIONTESTS_H\n+\n+#include <qt/optionsmodel.h>\n+\n+#include <QObject>\n+\n+class OptionTests : public QObject\n+{\n+    Q_OBJECT\n+public:\n+    explicit OptionTests(interfaces::Node& node) : m_node(node) {}\n+\n+private Q_SLOTS:\n+    void optionTests();\n+\n+private:\n+    interfaces::Node& m_node;\n+};\n+\n+#endif // BITCOIN_QT_TEST_OPTIONTESTS_H"
      },
      {
        "sha": "ec29d4fbf649e06cab29f80626c6c91f1a3a0e35",
        "filename": "src/qt/test/test_main.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32ef6cfa521b8a0615de3259d7b81383608ab8f3/src/qt/test/test_main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32ef6cfa521b8a0615de3259d7b81383608ab8f3/src/qt/test/test_main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/test_main.cpp?ref=32ef6cfa521b8a0615de3259d7b81383608ab8f3",
        "patch": "@@ -10,6 +10,7 @@\n #include <interfaces/node.h>\n #include <qt/bitcoin.h>\n #include <qt/test/apptests.h>\n+#include <qt/test/optiontests.h>\n #include <qt/test/rpcnestedtests.h>\n #include <qt/test/uritests.h>\n #include <test/util/setup_common.h>\n@@ -82,6 +83,10 @@ int main(int argc, char* argv[])\n     if (QTest::qExec(&app_tests) != 0) {\n         fInvalid = true;\n     }\n+    OptionTests options_tests(app.node());\n+    if (QTest::qExec(&options_tests) != 0) {\n+        fInvalid = true;\n+    }\n     URITests test1;\n     if (QTest::qExec(&test1) != 0) {\n         fInvalid = true;"
      },
      {
        "sha": "4f268f88f78d64d47b9cc1f06d6adab3b96722de",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32ef6cfa521b8a0615de3259d7b81383608ab8f3/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32ef6cfa521b8a0615de3259d7b81383608ab8f3/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=32ef6cfa521b8a0615de3259d7b81383608ab8f3",
        "patch": "@@ -173,7 +173,7 @@ void TestGUI(interfaces::Node& node)\n     std::unique_ptr<const PlatformStyle> platformStyle(PlatformStyle::instantiate(\"other\"));\n     SendCoinsDialog sendCoinsDialog(platformStyle.get());\n     TransactionView transactionView(platformStyle.get());\n-    OptionsModel optionsModel;\n+    OptionsModel optionsModel(node);\n     ClientModel clientModel(node, &optionsModel);\n     WalletContext& context = *node.walletClient().context();\n     AddWallet(context, wallet);"
      },
      {
        "sha": "ffe13ec624c0b53c404d4cb0966ffe527e0acb38",
        "filename": "src/test/settings_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32ef6cfa521b8a0615de3259d7b81383608ab8f3/src/test/settings_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32ef6cfa521b8a0615de3259d7b81383608ab8f3/src/test/settings_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/settings_tests.cpp?ref=32ef6cfa521b8a0615de3259d7b81383608ab8f3",
        "patch": "@@ -99,7 +99,7 @@ BOOST_AUTO_TEST_CASE(ReadWrite)\n //! Check settings struct contents against expected json strings.\n static void CheckValues(const util::Settings& settings, const std::string& single_val, const std::string& list_val)\n {\n-    util::SettingsValue single_value = GetSetting(settings, \"section\", \"name\", false, false);\n+    util::SettingsValue single_value = GetSetting(settings, \"section\", \"name\", false, false, false);\n     util::SettingsValue list_value(util::SettingsValue::VARR);\n     for (const auto& item : GetSettingsList(settings, \"section\", \"name\", false)) {\n         list_value.push_back(item);\n@@ -135,9 +135,9 @@ BOOST_AUTO_TEST_CASE(NullOverride)\n {\n     util::Settings settings;\n     settings.command_line_options[\"name\"].push_back(\"value\");\n-    BOOST_CHECK_EQUAL(R\"(\"value\")\", GetSetting(settings, \"section\", \"name\", false, false).write().c_str());\n+    BOOST_CHECK_EQUAL(R\"(\"value\")\", GetSetting(settings, \"section\", \"name\", false, false, false).write().c_str());\n     settings.forced_settings[\"name\"] = {};\n-    BOOST_CHECK_EQUAL(R\"(null)\", GetSetting(settings, \"section\", \"name\", false, false).write().c_str());\n+    BOOST_CHECK_EQUAL(R\"(null)\", GetSetting(settings, \"section\", \"name\", false, false, false).write().c_str());\n }\n \n // Test different ways settings can be merged, and verify results. This test can\n@@ -218,7 +218,7 @@ BOOST_FIXTURE_TEST_CASE(Merge, MergeTestingSetup)\n         }\n \n         desc += \" || \";\n-        desc += GetSetting(settings, network, name, ignore_default_section_config, /* get_chain_name= */ false).write();\n+        desc += GetSetting(settings, network, name, ignore_default_section_config, /* ignore_nonpersistent= */ false, /* get_chain_name= */ false).write();\n         desc += \" |\";\n         for (const auto& s : GetSettingsList(settings, network, name, ignore_default_section_config)) {\n             desc += \" \";"
      },
      {
        "sha": "6b8432dc8adc54575181ccd5c448bc2867b1e7fa",
        "filename": "src/util/settings.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32ef6cfa521b8a0615de3259d7b81383608ab8f3/src/util/settings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32ef6cfa521b8a0615de3259d7b81383608ab8f3/src/util/settings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/settings.cpp?ref=32ef6cfa521b8a0615de3259d7b81383608ab8f3",
        "patch": "@@ -121,6 +121,7 @@ SettingsValue GetSetting(const Settings& settings,\n     const std::string& section,\n     const std::string& name,\n     bool ignore_default_section_config,\n+    bool ignore_nonpersistent,\n     bool get_chain_name)\n {\n     SettingsValue result;\n@@ -156,6 +157,9 @@ SettingsValue GetSetting(const Settings& settings,\n             return;\n         }\n \n+        // Ignore nonpersistent settings if requested.\n+        if (ignore_nonpersistent && (source == Source::COMMAND_LINE || source == Source::FORCED)) return;\n+\n         // Skip negated command line settings.\n         if (skip_negated_command_line && span.last_negated()) return;\n "
      },
      {
        "sha": "2c648ddd567fe6ab27a2e81d5a7a0ca7efd9fe43",
        "filename": "src/util/settings.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32ef6cfa521b8a0615de3259d7b81383608ab8f3/src/util/settings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32ef6cfa521b8a0615de3259d7b81383608ab8f3/src/util/settings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/settings.h?ref=32ef6cfa521b8a0615de3259d7b81383608ab8f3",
        "patch": "@@ -55,12 +55,18 @@ bool WriteSettings(const fs::path& path,\n //! @param ignore_default_section_config - ignore values in the default section\n //!                                        of the config file (part before any\n //!                                        [section] keywords)\n+//! @param ignore_nonpersistent - ignore non-persistent settings values (forced\n+//!                               settings values and values specified on the\n+//!                               command line). Only return settings in the\n+//!                               read-only config and read-write settings\n+//!                               files.\n //! @param get_chain_name - enable special backwards compatible behavior\n //!                         for GetChainName\n SettingsValue GetSetting(const Settings& settings,\n     const std::string& section,\n     const std::string& name,\n     bool ignore_default_section_config,\n+    bool ignore_nonpersistent,\n     bool get_chain_name);\n \n //! Get combined setting value similar to GetSetting(), except if setting was"
      },
      {
        "sha": "ad975547f00bbc29fe006d8cfda8921f3352498d",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 1,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32ef6cfa521b8a0615de3259d7b81383608ab8f3/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32ef6cfa521b8a0615de3259d7b81383608ab8f3/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=32ef6cfa521b8a0615de3259d7b81383608ab8f3",
        "patch": "@@ -582,6 +582,13 @@ bool ArgsManager::WriteSettingsFile(std::vector<std::string>* errors) const\n     return true;\n }\n \n+util::SettingsValue ArgsManager::GetPersistentSetting(const std::string& name) const\n+{\n+    LOCK(cs_args);\n+    return util::GetSetting(m_settings, m_network, name, !UseDefaultSection(\"-\" + name),\n+        /* ignore_nonpersistent = */ true, /* get_chain_name= */ false);\n+}\n+\n bool ArgsManager::IsArgNegated(const std::string& strArg) const\n {\n     return GetSetting(strArg).isFalse();\n@@ -992,6 +999,7 @@ std::string ArgsManager::GetChainName() const\n         LOCK(cs_args);\n         util::SettingsValue value = util::GetSetting(m_settings, /* section= */ \"\", SettingName(arg),\n             /* ignore_default_section_config= */ false,\n+            /* ignore_nonpersistent= */ false,\n             /* get_chain_name= */ true);\n         return value.isNull() ? false : value.isBool() ? value.get_bool() : InterpretBool(value.get_str());\n     };\n@@ -1024,7 +1032,8 @@ util::SettingsValue ArgsManager::GetSetting(const std::string& arg) const\n {\n     LOCK(cs_args);\n     return util::GetSetting(\n-        m_settings, m_network, SettingName(arg), !UseDefaultSection(arg), /* get_chain_name= */ false);\n+        m_settings, m_network, SettingName(arg), !UseDefaultSection(arg),\n+        /* ignore_nonpersistent= */ false, /* get_chain_name= */ false);\n }\n \n std::vector<util::SettingsValue> ArgsManager::GetSettingsList(const std::string& arg) const"
      },
      {
        "sha": "cf592de29a7a52081deeb838246284aab80b3546",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32ef6cfa521b8a0615de3259d7b81383608ab8f3/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32ef6cfa521b8a0615de3259d7b81383608ab8f3/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=32ef6cfa521b8a0615de3259d7b81383608ab8f3",
        "patch": "@@ -430,6 +430,12 @@ class ArgsManager\n      */\n     bool WriteSettingsFile(std::vector<std::string>* errors = nullptr) const;\n \n+    /**\n+     * Get current setting from config file or read/write settings file,\n+     * ignoring runtime command line or forced argument values.\n+     */\n+    util::SettingsValue GetPersistentSetting(const std::string& name) const;\n+\n     /**\n      * Access settings with lock held.\n      */"
      }
    ]
  }
]