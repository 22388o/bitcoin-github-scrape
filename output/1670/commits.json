[
  {
    "sha": "f3a84c3a6b22cfcf4fdcf187997e87b96a910318",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmM2E4NGMzYTZiMjJjZmNmNGZkY2YxODc5OTdlODdiOTZhOTEwMzE4",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-08-13T07:02:44Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-11-13T21:18:32Z"
      },
      "message": "Abstract block hash substr extraction (for debug.log) into BlockHashStr inline",
      "tree": {
        "sha": "e597626f88495393e88a82ee11cb8fe37046a57e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e597626f88495393e88a82ee11cb8fe37046a57e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f3a84c3a6b22cfcf4fdcf187997e87b96a910318",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3a84c3a6b22cfcf4fdcf187997e87b96a910318",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f3a84c3a6b22cfcf4fdcf187997e87b96a910318",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3a84c3a6b22cfcf4fdcf187997e87b96a910318/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f2b12807d04e981d0a252cbda6ba80c87a809d6e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2b12807d04e981d0a252cbda6ba80c87a809d6e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f2b12807d04e981d0a252cbda6ba80c87a809d6e"
      }
    ],
    "stats": {
      "total": 65,
      "additions": 38,
      "deletions": 27
    },
    "files": [
      {
        "sha": "2bf4efc3034a902b88c77d0bb221e21c82154918",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 17,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3a84c3a6b22cfcf4fdcf187997e87b96a910318/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3a84c3a6b22cfcf4fdcf187997e87b96a910318/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=f3a84c3a6b22cfcf4fdcf187997e87b96a910318",
        "patch": "@@ -1168,11 +1168,11 @@ void static InvalidChainFound(CBlockIndex* pindexNew)\n         uiInterface.NotifyBlocksChanged();\n     }\n     printf(\"InvalidChainFound: invalid block=%s  height=%d  work=%s  date=%s\\n\",\n-      pindexNew->GetBlockHash().ToString().substr(0,20).c_str(), pindexNew->nHeight,\n+      BlockHashStr(pindexNew->GetBlockHash()).c_str(), pindexNew->nHeight,\n       pindexNew->bnChainWork.ToString().c_str(), DateTimeStrFormat(\"%x %H:%M:%S\",\n       pindexNew->GetBlockTime()).c_str());\n     printf(\"InvalidChainFound:  current best=%s  height=%d  work=%s  date=%s\\n\",\n-      hashBestChain.ToString().substr(0,20).c_str(), nBestHeight, bnBestChainWork.ToString().c_str(),\n+      BlockHashStr(hashBestChain).c_str(), nBestHeight, bnBestChainWork.ToString().c_str(),\n       DateTimeStrFormat(\"%x %H:%M:%S\", pindexBest->GetBlockTime()).c_str());\n     if (pindexBest && bnBestInvalidWork > bnBestChainWork + pindexBest->GetBlockWork() * 6)\n         printf(\"InvalidChainFound: Warning: Displayed transactions may not be correct! You may need to upgrade, or other nodes may need to upgrade.\\n\");\n@@ -1693,8 +1693,8 @@ bool SetBestChain(CBlockIndex* pindexNew)\n     reverse(vConnect.begin(), vConnect.end());\n \n     if (vDisconnect.size() > 0) {\n-        printf(\"REORGANIZE: Disconnect %\"PRIszu\" blocks; %s..%s\\n\", vDisconnect.size(), pfork->GetBlockHash().ToString().substr(0,20).c_str(), pindexBest->GetBlockHash().ToString().substr(0,20).c_str());\n-        printf(\"REORGANIZE: Connect %\"PRIszu\" blocks; %s..%s\\n\", vConnect.size(), pfork->GetBlockHash().ToString().substr(0,20).c_str(), pindexNew->GetBlockHash().ToString().substr(0,20).c_str());\n+        printf(\"REORGANIZE: Disconnect %\"PRIszu\" blocks; %s..%s\\n\", vDisconnect.size(), BlockHashStr(pfork->GetBlockHash()).c_str(), BlockHashStr(pindexBest->GetBlockHash()).c_str());\n+        printf(\"REORGANIZE: Connect %\"PRIszu\" blocks; %s..%s\\n\", vConnect.size(), BlockHashStr(pfork->GetBlockHash()).c_str(), BlockHashStr(pindexNew->GetBlockHash()).c_str());\n     }\n \n     // Disconnect shorter branch\n@@ -1705,7 +1705,7 @@ bool SetBestChain(CBlockIndex* pindexNew)\n             return error(\"SetBestBlock() : ReadFromDisk for disconnect failed\");\n         CCoinsViewCache viewTemp(view, true);\n         if (!block.DisconnectBlock(pindex, viewTemp))\n-            return error(\"SetBestBlock() : DisconnectBlock %s failed\", pindex->GetBlockHash().ToString().substr(0,20).c_str());\n+            return error(\"SetBestBlock() : DisconnectBlock %s failed\", BlockHashStr(pindex->GetBlockHash()).c_str());\n         if (!viewTemp.Flush())\n             return error(\"SetBestBlock() : Cache flush failed after disconnect\");\n \n@@ -1725,7 +1725,7 @@ bool SetBestChain(CBlockIndex* pindexNew)\n         if (!block.ConnectBlock(pindex, viewTemp)) {\n             InvalidChainFound(pindexNew);\n             InvalidBlockFound(pindex);\n-            return error(\"SetBestBlock() : ConnectBlock %s failed\", pindex->GetBlockHash().ToString().substr(0,20).c_str());\n+            return error(\"SetBestBlock() : ConnectBlock %s failed\", BlockHashStr(pindex->GetBlockHash()).c_str());\n         }\n         if (!viewTemp.Flush())\n             return error(\"SetBestBlock() : Cache flush failed after connect\");\n@@ -1781,7 +1781,7 @@ bool SetBestChain(CBlockIndex* pindexNew)\n     nTimeBestReceived = GetTime();\n     nTransactionsUpdated++;\n     printf(\"SetBestChain: new best=%s  height=%d  work=%s  tx=%lu  date=%s\\n\",\n-      hashBestChain.ToString().substr(0,20).c_str(), nBestHeight, bnBestChainWork.ToString().c_str(), (unsigned long)pindexNew->nChainTx,\n+      BlockHashStr(hashBestChain).c_str(), nBestHeight, bnBestChainWork.ToString().c_str(), (unsigned long)pindexNew->nChainTx,\n       DateTimeStrFormat(\"%x %H:%M:%S\", pindexBest->GetBlockTime()).c_str());\n \n     // Check the version of the last 100 blocks to see if we need to upgrade:\n@@ -1819,7 +1819,7 @@ bool CBlock::AddToBlockIndex(const CDiskBlockPos &pos)\n     // Check for duplicate\n     uint256 hash = GetHash();\n     if (mapBlockIndex.count(hash))\n-        return error(\"AddToBlockIndex() : %s already exists\", hash.ToString().substr(0,20).c_str());\n+        return error(\"AddToBlockIndex() : %s already exists\", BlockHashStr(hash).c_str());\n \n     // Construct new block index object\n     CBlockIndex* pindexNew = new CBlockIndex(*this);\n@@ -2111,9 +2111,9 @@ bool ProcessBlock(CNode* pfrom, CBlock* pblock, CDiskBlockPos *dbp)\n     // Check for duplicate\n     uint256 hash = pblock->GetHash();\n     if (mapBlockIndex.count(hash))\n-        return error(\"ProcessBlock() : already have block %d %s\", mapBlockIndex[hash]->nHeight, hash.ToString().substr(0,20).c_str());\n+        return error(\"ProcessBlock() : already have block %d %s\", mapBlockIndex[hash]->nHeight, BlockHashStr(hash).c_str());\n     if (mapOrphanBlocks.count(hash))\n-        return error(\"ProcessBlock() : already have block (orphan) %s\", hash.ToString().substr(0,20).c_str());\n+        return error(\"ProcessBlock() : already have block (orphan) %s\", BlockHashStr(hash).c_str());\n \n     // Preliminary checks\n     if (!pblock->CheckBlock())\n@@ -2146,7 +2146,7 @@ bool ProcessBlock(CNode* pfrom, CBlock* pblock, CDiskBlockPos *dbp)\n     // If we don't already have its previous block, shunt it off to holding area until we get it\n     if (pblock->hashPrevBlock != 0 && !mapBlockIndex.count(pblock->hashPrevBlock))\n     {\n-        printf(\"ProcessBlock: ORPHAN BLOCK, prev=%s\\n\", pblock->hashPrevBlock.ToString().substr(0,20).c_str());\n+        printf(\"ProcessBlock: ORPHAN BLOCK, prev=%s\\n\", BlockHashStr(pblock->hashPrevBlock).c_str());\n \n         // Accept orphans as long as there is a node to request its parents from\n         if (pfrom) {\n@@ -2318,7 +2318,7 @@ bool static LoadBlockIndexDB()\n          pindex = pindexPrev;\n     }\n     printf(\"LoadBlockIndex(): hashBestChain=%s  height=%d date=%s\\n\",\n-        hashBestChain.ToString().substr(0,20).c_str(), nBestHeight,\n+        BlockHashStr(hashBestChain).c_str(), nBestHeight,\n         DateTimeStrFormat(\"%x %H:%M:%S\", pindexBest->GetBlockTime()).c_str());\n \n     // Load bnBestInvalidWork, OK if it doesn't exist\n@@ -3028,20 +3028,20 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         if (pindex)\n             pindex = pindex->pnext;\n         int nLimit = 500;\n-        printf(\"getblocks %d to %s limit %d\\n\", (pindex ? pindex->nHeight : -1), hashStop.ToString().substr(0,20).c_str(), nLimit);\n+        printf(\"getblocks %d to %s limit %d\\n\", (pindex ? pindex->nHeight : -1), BlockHashStr(hashStop).c_str(), nLimit);\n         for (; pindex; pindex = pindex->pnext)\n         {\n             if (pindex->GetBlockHash() == hashStop)\n             {\n-                printf(\"  getblocks stopping at %d %s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString().substr(0,20).c_str());\n+                printf(\"  getblocks stopping at %d %s\\n\", pindex->nHeight, BlockHashStr(pindex->GetBlockHash()).c_str());\n                 break;\n             }\n             pfrom->PushInventory(CInv(MSG_BLOCK, pindex->GetBlockHash()));\n             if (--nLimit <= 0)\n             {\n                 // When this block is requested, we'll send an inv that'll make them\n                 // getblocks the next batch of inventory.\n-                printf(\"  getblocks stopping at limit %d %s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString().substr(0,20).c_str());\n+                printf(\"  getblocks stopping at limit %d %s\\n\", pindex->nHeight, BlockHashStr(pindex->GetBlockHash()).c_str());\n                 pfrom->hashContinue = pindex->GetBlockHash();\n                 break;\n             }\n@@ -3074,7 +3074,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n \n         vector<CBlock> vHeaders;\n         int nLimit = 2000;\n-        printf(\"getheaders %d to %s\\n\", (pindex ? pindex->nHeight : -1), hashStop.ToString().substr(0,20).c_str());\n+        printf(\"getheaders %d to %s\\n\", (pindex ? pindex->nHeight : -1), BlockHashStr(hashStop).c_str());\n         for (; pindex; pindex = pindex->pnext)\n         {\n             vHeaders.push_back(pindex->GetBlockHeader());\n@@ -3158,7 +3158,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         CBlock block;\n         vRecv >> block;\n \n-        printf(\"received block %s\\n\", block.GetHash().ToString().substr(0,20).c_str());\n+        printf(\"received block %s\\n\", BlockHashStr(block.GetHash()).c_str());\n         // block.print();\n \n         CInv inv(MSG_BLOCK, block.GetHash());"
      },
      {
        "sha": "7b368ef2b0c1da7e61b731357f65aeba57c4a031",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 9,
        "deletions": 4,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3a84c3a6b22cfcf4fdcf187997e87b96a910318/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3a84c3a6b22cfcf4fdcf187997e87b96a910318/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=f3a84c3a6b22cfcf4fdcf187997e87b96a910318",
        "patch": "@@ -174,6 +174,11 @@ CBlockIndex * InsertBlockIndex(uint256 hash);\n \n \n \n+static inline std::string BlockHashStr(const uint256& hash)\n+{\n+    return hash.ToString().substr(0, 20);\n+}\n+\n bool GetWalletFile(CWallet* pwallet, std::string &strWalletFileOut);\n \n class CDiskBlockPos\n@@ -1257,9 +1262,9 @@ class CBlock\n     void print() const\n     {\n         printf(\"CBlock(hash=%s, ver=%d, hashPrevBlock=%s, hashMerkleRoot=%s, nTime=%u, nBits=%08x, nNonce=%u, vtx=%\"PRIszu\")\\n\",\n-            GetHash().ToString().substr(0,20).c_str(),\n+            BlockHashStr(GetHash()).c_str(),\n             nVersion,\n-            hashPrevBlock.ToString().substr(0,20).c_str(),\n+            BlockHashStr(hashPrevBlock).c_str(),\n             hashMerkleRoot.ToString().substr(0,10).c_str(),\n             nTime, nBits, nNonce,\n             vtx.size());\n@@ -1570,7 +1575,7 @@ class CBlockIndex\n         return strprintf(\"CBlockIndex(pprev=%p, pnext=%p, nHeight=%d, merkle=%s, hashBlock=%s)\",\n             pprev, pnext, nHeight,\n             hashMerkleRoot.ToString().substr(0,10).c_str(),\n-            GetBlockHash().ToString().substr(0,20).c_str());\n+            BlockHashStr(GetBlockHash()).c_str());\n     }\n \n     void print() const\n@@ -1651,7 +1656,7 @@ class CDiskBlockIndex : public CBlockIndex\n         str += CBlockIndex::ToString();\n         str += strprintf(\"\\n                hashBlock=%s, hashPrev=%s)\",\n             GetBlockHash().ToString().c_str(),\n-            hashPrev.ToString().substr(0,20).c_str());\n+            BlockHashStr(hashPrev).c_str());\n         return str;\n     }\n "
      },
      {
        "sha": "c43e438d5a680babeaa2302760bd3038a740d16d",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3a84c3a6b22cfcf4fdcf187997e87b96a910318/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3a84c3a6b22cfcf4fdcf187997e87b96a910318/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=f3a84c3a6b22cfcf4fdcf187997e87b96a910318",
        "patch": "@@ -67,12 +67,6 @@ void SetReachable(enum Network net, bool fFlag = true);\n CAddress GetLocalAddress(const CNetAddr *paddrPeer = NULL);\n \n \n-enum\n-{\n-    MSG_TX = 1,\n-    MSG_BLOCK,\n-};\n-\n /** Thread types */\n enum threadId\n {"
      },
      {
        "sha": "23969e5b97125b59ece731fea3ce9050a219881b",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3a84c3a6b22cfcf4fdcf187997e87b96a910318/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3a84c3a6b22cfcf4fdcf187997e87b96a910318/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=f3a84c3a6b22cfcf4fdcf187997e87b96a910318",
        "patch": "@@ -6,6 +6,7 @@\n #include \"protocol.h\"\n #include \"util.h\"\n #include \"netbase.h\"\n+#include \"main.h\"\n \n #ifndef WIN32\n # include <arpa/inet.h>\n@@ -140,6 +141,11 @@ const char* CInv::GetCommand() const\n \n std::string CInv::ToString() const\n {\n+    if (type == MSG_BLOCK)\n+        return strprintf(\"%s %s\", GetCommand(), BlockHashStr(hash).c_str());\n+    if (type == MSG_TX)\n+        return strprintf(\"%s %s\", GetCommand(), hash.ToString().substr(0,10).c_str());\n+\n     return strprintf(\"%s %s\", GetCommand(), hash.ToString().substr(0,20).c_str());\n }\n "
      },
      {
        "sha": "96fd197ecd76634a54ec4003851f62fbc9173641",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3a84c3a6b22cfcf4fdcf187997e87b96a910318/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3a84c3a6b22cfcf4fdcf187997e87b96a910318/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=f3a84c3a6b22cfcf4fdcf187997e87b96a910318",
        "patch": "@@ -134,4 +134,10 @@ class CInv\n         uint256 hash;\n };\n \n+enum\n+{\n+    MSG_TX = 1,\n+    MSG_BLOCK,\n+};\n+\n #endif // __INCLUDED_PROTOCOL_H__"
      }
    ]
  },
  {
    "sha": "c34a32699ecfb8b5557922d7674db26771cec6ac",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMzRhMzI2OTllY2ZiOGI1NTU3OTIyZDc2NzRkYjI2NzcxY2VjNmFj",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-08-20T19:22:15Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-11-13T21:19:58Z"
      },
      "message": "Change block references in debug.log to full hash instead of just 0..20",
      "tree": {
        "sha": "8460273619520ab5d19f270f353054282028acd9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8460273619520ab5d19f270f353054282028acd9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c34a32699ecfb8b5557922d7674db26771cec6ac",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c34a32699ecfb8b5557922d7674db26771cec6ac",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c34a32699ecfb8b5557922d7674db26771cec6ac",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c34a32699ecfb8b5557922d7674db26771cec6ac/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f3a84c3a6b22cfcf4fdcf187997e87b96a910318",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3a84c3a6b22cfcf4fdcf187997e87b96a910318",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f3a84c3a6b22cfcf4fdcf187997e87b96a910318"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d066586269fdcd25637ae2557f15873fb100c998",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c34a32699ecfb8b5557922d7674db26771cec6ac/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c34a32699ecfb8b5557922d7674db26771cec6ac/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=c34a32699ecfb8b5557922d7674db26771cec6ac",
        "patch": "@@ -176,7 +176,7 @@ CBlockIndex * InsertBlockIndex(uint256 hash);\n \n static inline std::string BlockHashStr(const uint256& hash)\n {\n-    return hash.ToString().substr(0, 20);\n+    return hash.ToString();\n }\n \n bool GetWalletFile(CWallet* pwallet, std::string &strWalletFileOut);"
      }
    ]
  }
]