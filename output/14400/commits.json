[
  {
    "sha": "e4eee7d09df7dc85ae7a0c5e68e1d84f580cc9f7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNGVlZTdkMDlkZjdkYzg1YWU3YTBjNWU2OGUxZDg0ZjU4MGNjOWY3",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "jeremy.l.rubin@gmail.com",
        "date": "2018-10-04T06:09:19Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "jeremy.l.rubin@gmail.com",
        "date": "2018-11-25T01:53:20Z"
      },
      "message": "Add Benchmark to test input de-duplication worst case\n\nFix nits\n\nreplace utiltime?",
      "tree": {
        "sha": "0b18df2a8aa0f5acd229080f1dbc70eb2dc24abc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0b18df2a8aa0f5acd229080f1dbc70eb2dc24abc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e4eee7d09df7dc85ae7a0c5e68e1d84f580cc9f7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4eee7d09df7dc85ae7a0c5e68e1d84f580cc9f7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e4eee7d09df7dc85ae7a0c5e68e1d84f580cc9f7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4eee7d09df7dc85ae7a0c5e68e1d84f580cc9f7/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a7dc03223e915d7afb30498fe5faa12b5402f7d8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7dc03223e915d7afb30498fe5faa12b5402f7d8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a7dc03223e915d7afb30498fe5faa12b5402f7d8"
      }
    ],
    "stats": {
      "total": 101,
      "additions": 101,
      "deletions": 0
    },
    "files": [
      {
        "sha": "5e787ca222a50d43ef4e16c7867b5a0ac0e5f1b8",
        "filename": "src/Makefile.bench.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4eee7d09df7dc85ae7a0c5e68e1d84f580cc9f7/src/Makefile.bench.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4eee7d09df7dc85ae7a0c5e68e1d84f580cc9f7/src/Makefile.bench.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.bench.include?ref=e4eee7d09df7dc85ae7a0c5e68e1d84f580cc9f7",
        "patch": "@@ -18,6 +18,7 @@ bench_bench_bitcoin_SOURCES = \\\n   bench/block_assemble.cpp \\\n   bench/checkblock.cpp \\\n   bench/checkqueue.cpp \\\n+  bench/duplicate_inputs.cpp \\\n   bench/examples.cpp \\\n   bench/rollingbloom.cpp \\\n   bench/crypto_hash.cpp \\"
      },
      {
        "sha": "e0854e2c62cfab029d557770fc07f661ce2902dd",
        "filename": "src/bench/duplicate_inputs.cpp",
        "status": "added",
        "additions": 100,
        "deletions": 0,
        "changes": 100,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4eee7d09df7dc85ae7a0c5e68e1d84f580cc9f7/src/bench/duplicate_inputs.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4eee7d09df7dc85ae7a0c5e68e1d84f580cc9f7/src/bench/duplicate_inputs.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/duplicate_inputs.cpp?ref=e4eee7d09df7dc85ae7a0c5e68e1d84f580cc9f7",
        "patch": "@@ -0,0 +1,100 @@\n+// Copyright (c) 2011-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bench/bench.h>\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <consensus/merkle.h>\n+#include <consensus/validation.h>\n+#include <miner.h>\n+#include <policy/policy.h>\n+#include <pow.h>\n+#include <scheduler.h>\n+#include <txdb.h>\n+#include <txmempool.h>\n+#include <util/time.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+#include <boost/thread.hpp>\n+\n+#include <list>\n+#include <vector>\n+\n+\n+static void DuplicateInputs(benchmark::State& state)\n+{\n+    const CScript SCRIPT_PUB{CScript(OP_TRUE)};\n+\n+    // Switch to regtest so we can mine faster\n+    // Also segwit is active, so we can include witness transactions\n+    SelectParams(CBaseChainParams::REGTEST);\n+\n+    InitScriptExecutionCache();\n+\n+    boost::thread_group thread_group;\n+    CScheduler scheduler;\n+    const CChainParams& chainparams = Params();\n+    {\n+        ::pblocktree.reset(new CBlockTreeDB(1 << 20, true));\n+        ::pcoinsdbview.reset(new CCoinsViewDB(1 << 23, true));\n+        ::pcoinsTip.reset(new CCoinsViewCache(pcoinsdbview.get()));\n+\n+        thread_group.create_thread(std::bind(&CScheduler::serviceQueue, &scheduler));\n+        GetMainSignals().RegisterBackgroundSignalScheduler(scheduler);\n+        LoadGenesisBlock(chainparams);\n+        CValidationState cvstate;\n+        ActivateBestChain(cvstate, chainparams);\n+        assert(::chainActive.Tip() != nullptr);\n+        const bool witness_enabled{IsWitnessEnabled(::chainActive.Tip(), chainparams.GetConsensus())};\n+        assert(witness_enabled);\n+    }\n+\n+    CBlock block{};\n+    CMutableTransaction coinbaseTx{};\n+    CMutableTransaction naughtyTx{};\n+\n+    CBlockIndex* pindexPrev = ::chainActive.Tip();\n+    assert(pindexPrev != nullptr);\n+    block.nBits = GetNextWorkRequired(pindexPrev, &block, chainparams.GetConsensus());\n+    block.nNonce = 0;\n+    auto nHeight = pindexPrev->nHeight + 1;\n+\n+    // Make a coinbase TX\n+    coinbaseTx.vin.resize(1);\n+    coinbaseTx.vin[0].prevout.SetNull();\n+    coinbaseTx.vout.resize(1);\n+    coinbaseTx.vout[0].scriptPubKey = SCRIPT_PUB;\n+    coinbaseTx.vout[0].nValue = GetBlockSubsidy(nHeight, chainparams.GetConsensus());\n+    coinbaseTx.vin[0].scriptSig = CScript() << nHeight << OP_0;\n+\n+\n+    naughtyTx.vout.resize(1);\n+    naughtyTx.vout[0].nValue = 0;\n+    naughtyTx.vout[0].scriptPubKey = SCRIPT_PUB;\n+\n+    uint64_t n_inputs = (((MAX_BLOCK_SERIALIZED_SIZE / WITNESS_SCALE_FACTOR) - (CTransaction(coinbaseTx).GetTotalSize() + CTransaction(naughtyTx).GetTotalSize())) / 41) - 100;\n+    for (uint64_t x = 0; x < (n_inputs - 1); ++x) {\n+        naughtyTx.vin.emplace_back(GetRandHash(), 0, CScript(), 0);\n+    }\n+    naughtyTx.vin.emplace_back(naughtyTx.vin.back());\n+\n+    block.vtx.push_back(MakeTransactionRef(std::move(coinbaseTx)));\n+    block.vtx.push_back(MakeTransactionRef(std::move(naughtyTx)));\n+\n+    block.hashMerkleRoot = BlockMerkleRoot(block);\n+\n+    while (state.KeepRunning()) {\n+        CValidationState cvstate{};\n+        assert(!CheckBlock(block, cvstate, chainparams.GetConsensus(), false, false));\n+        assert(cvstate.GetRejectReason() == \"bad-txns-inputs-duplicate\");\n+    }\n+\n+    thread_group.interrupt_all();\n+    thread_group.join_all();\n+    GetMainSignals().FlushBackgroundCallbacks();\n+    GetMainSignals().UnregisterBackgroundSignalScheduler();\n+}\n+\n+BENCHMARK(DuplicateInputs, 10);"
      }
    ]
  }
]