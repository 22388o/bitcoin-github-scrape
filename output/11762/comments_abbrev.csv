promag,2017-11-27T16:29:52Z,"utACK 9f857d5.\n\nAre these random picks? For instance, `CTxMemPool::CalculateMemPoolAncestors` can assert the lock too right?",https://github.com/bitcoin/bitcoin/pull/11762#issuecomment-347237975,347237975,
MarcoFalke,2017-11-27T17:44:08Z,Why would we need the runtime check when there is a compile time check?,https://github.com/bitcoin/bitcoin/pull/11762#issuecomment-347263671,347263671,
practicalswift,2017-11-27T19:27:52Z,"@promag No, these are not random picks. They were the ones I could find, verify manually and passes both `make check` + `test/functional/test_runner.py` with nothing but trivial changes :-)\n\nThe lock in `CTxMemPool::UpdateTransactionsFromBlock` you suggested could also be removed but that would require more fine grained locking in the corresponding tests. If you have time then please post a di",https://github.com/bitcoin/bitcoin/pull/11762#issuecomment-347298049,347298049,
practicalswift,2017-11-27T19:29:26Z,@MarcoFalke I replaced the `LOCK(…);` with `AssertLockHeld(…);` to make it easy to verify also for reviewers not building with Clang thread safety analysis warnings enabled. Should I remove them? :-),https://github.com/bitcoin/bitcoin/pull/11762#issuecomment-347298583,347298583,
practicalswift,2017-11-27T19:35:13Z,@promag Do you have any additional suggestions beyond `CTxMemPool::CalculateMemPoolAncestors(…)`? :-),https://github.com/bitcoin/bitcoin/pull/11762#issuecomment-347300371,347300371,
MarcoFalke,2017-11-27T19:36:25Z,"I think it is fine to leave them for now, but it seems arbitrary to add run time checks to a subset of methods that already have the compile time check. I know that not everyone compiles with clang, but at least for releases we do and I am sure some developers build with clang, so it should be noticed quickly.",https://github.com/bitcoin/bitcoin/pull/11762#issuecomment-347300814,347300814,
promag,2017-11-27T21:07:06Z,I wasn't suggesting to remove more locks. Maybe these changes are preferable in small PR's.,https://github.com/bitcoin/bitcoin/pull/11762#issuecomment-347328077,347328077,
practicalswift,2017-11-27T22:47:12Z,"Added the `removeConflicts(…) EXCLUSIVE_LOCKS_REQUIRED(…)` annotation to `txmempool.h`. \n\n@promag Would you mind re-reviewing? ",https://github.com/bitcoin/bitcoin/pull/11762#issuecomment-347354676,347354676,
practicalswift,2018-02-22T21:21:41Z,@theuni @promag @MarcoFalke Updated to address feedback. Please re-review :-),https://github.com/bitcoin/bitcoin/pull/11762#issuecomment-367826124,367826124,
MarcoFalke,2018-02-22T21:26:44Z,utACK 96b6899e2c9b4a86698a6ea64460d045fde68c43,https://github.com/bitcoin/bitcoin/pull/11762#issuecomment-367827456,367827456,
sipa,2018-07-21T06:57:09Z,utACK 96b6899e2c9b4a86698a6ea64460d045fde68c43,https://github.com/bitcoin/bitcoin/pull/11762#issuecomment-406775833,406775833,
DrahtBot,2018-07-21T17:29:37Z,"<!--5d09a71f8925f3f132321140b44b946d-->The last travis run for this pull request was 148 days ago and is thus outdated. To trigger a fresh travis build, this pull request should be closed and re-opened.",https://github.com/bitcoin/bitcoin/pull/11762#issuecomment-406811448,406811448,
practicalswift,2018-07-21T17:47:57Z,"@MarcoFalke Now skipping the change to `src/wallet/walletdb.cpp` as suggested.\n\nPlease re-review :-)",https://github.com/bitcoin/bitcoin/pull/11762#issuecomment-406812511,406812511,
theuni,2017-11-28T21:55:35Z,"Adding this only in the .cpp means that the lock requirement will only be enforced for other functions in this file.\n\nI realize that it can't be added in the header as-is due to the circular dependency, but that needs to be fixed somehow.",https://github.com/bitcoin/bitcoin/pull/11762#discussion_r153635124,153635124,src/wallet/walletdb.cpp
theuni,2017-11-28T21:56:36Z,"No need for the dupe here, header is enough.",https://github.com/bitcoin/bitcoin/pull/11762#discussion_r153635363,153635363,src/txmempool.cpp
practicalswift,2017-11-29T20:13:56Z,"@theuni Yes, I'd like to put the annotation in the header file but I need help with resolving the circular dependency. What would be the cleanest way to solve it? :-)",https://github.com/bitcoin/bitcoin/pull/11762#discussion_r153902570,153902570,src/wallet/walletdb.cpp
theuni,2017-12-20T22:22:38Z,I'm afraid I don't see a simple solution :(,https://github.com/bitcoin/bitcoin/pull/11762#discussion_r158151976,158151976,src/wallet/walletdb.cpp
ajtowns,2018-01-11T07:06:53Z,"I don't know if it's a simple solution, but it looks like you can resolve the circular dependency by declaring:\n\n    inline CCriticalSection &CWallet_cs_wallet(CWallet *pwallet) LOCK_RETURNED(pwallet->cs_wallet)\n    {\n        return pwallet->cs_wallet;\n    }\n\nin wallet.h and\n\n    CCriticalSection &CWallet_cs_wallet(CWallet *pwallet);\n    class CWalletDB {\n        DBErrors Loa",https://github.com/bitcoin/bitcoin/pull/11762#discussion_r160877875,160877875,src/wallet/walletdb.cpp
MarcoFalke,2018-07-21T14:59:41Z,"This will no longer compile due to the missing lock annotation in the header.\n\nCould just remove it for now?",https://github.com/bitcoin/bitcoin/pull/11762#discussion_r204212888,204212888,src/wallet/walletdb.cpp
