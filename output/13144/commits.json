[
  {
    "sha": "0f5c476483156217f9344cbf599005be95fc8a58",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZjVjNDc2NDgzMTU2MjE3ZjkzNDRjYmY1OTkwMDViZTk1ZmM4YTU4",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jimpo@coinbase.com",
        "date": "2018-05-01T19:52:14Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2018-07-16T16:27:37Z"
      },
      "message": "RPC: Improve error messages returned by gettxoutproof.\n\nThe error messages now indicate the status of the txindex.",
      "tree": {
        "sha": "2395df2373e725bcab97df2e35123742c6463920",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2395df2373e725bcab97df2e35123742c6463920"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0f5c476483156217f9344cbf599005be95fc8a58",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f5c476483156217f9344cbf599005be95fc8a58",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0f5c476483156217f9344cbf599005be95fc8a58",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f5c476483156217f9344cbf599005be95fc8a58/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "17943f77bda22d515e29662d31c8ac936b85f470",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17943f77bda22d515e29662d31c8ac936b85f470",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/17943f77bda22d515e29662d31c8ac936b85f470"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 18,
      "deletions": 7
    },
    "files": [
      {
        "sha": "0cf4998941d919ea1adb645e21f89efd3975c896",
        "filename": "src/rpc/protocol.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0f5c476483156217f9344cbf599005be95fc8a58/src/rpc/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0f5c476483156217f9344cbf599005be95fc8a58/src/rpc/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/protocol.h?ref=0f5c476483156217f9344cbf599005be95fc8a58",
        "patch": "@@ -57,6 +57,7 @@ enum RPCErrorCode\n     RPC_VERIFY_ALREADY_IN_CHAIN     = -27, //!< Transaction already in chain\n     RPC_IN_WARMUP                   = -28, //!< Client still warming up\n     RPC_METHOD_DEPRECATED           = -32, //!< RPC method is deprecated\n+    RPC_DATA_UNAVAILABLE            = -33, //!< Requested data is unavailable due to application configuration or state\n \n     //! Aliases for backward compatibility\n     RPC_TRANSACTION_ERROR           = RPC_VERIFY_ERROR,"
      },
      {
        "sha": "0c6c9a7d7319290f742cdd6b889987e56c7a4d78",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 4,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0f5c476483156217f9344cbf599005be95fc8a58/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0f5c476483156217f9344cbf599005be95fc8a58/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=0f5c476483156217f9344cbf599005be95fc8a58",
        "patch": "@@ -259,19 +259,29 @@ static UniValue gettxoutproof(const JSONRPCRequest& request)\n         }\n     }\n \n-\n     // Allow txindex to catch up if we need to query it and before we acquire cs_main.\n+    bool txindex_ready = false;\n     if (g_txindex && !pblockindex) {\n-        g_txindex->BlockUntilSyncedToCurrentChain();\n+        txindex_ready = g_txindex->BlockUntilSyncedToCurrentChain();\n     }\n \n     LOCK(cs_main);\n \n     if (pblockindex == nullptr)\n     {\n+        if (!g_txindex) {\n+            throw JSONRPCError(RPC_DATA_UNAVAILABLE,\n+                               \"Use -txindex to enable blockchain transaction queries\");\n+        } else if (!txindex_ready) {\n+            throw JSONRPCError(RPC_DATA_UNAVAILABLE,\n+                               \"Blockchain transactions are still in the process of being indexed\");\n+        }\n+\n         CTransactionRef tx;\n-        if (!GetTransaction(oneTxid, tx, Params().GetConsensus(), hashBlock, false) || hashBlock.IsNull())\n-            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction not yet in block\");\n+        if (!g_txindex->FindTx(oneTxid, hashBlock, tx)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY,\n+                               \"Transaction not found in block: \" + oneTxid.ToString());\n+        }\n         pblockindex = LookupBlockIndex(hashBlock);\n         if (!pblockindex) {\n             throw JSONRPCError(RPC_INTERNAL_ERROR, \"Transaction index corrupt\");"
      },
      {
        "sha": "a86256c6396cc43657f395ed5ad634ca2e380bbe",
        "filename": "test/functional/rpc_txoutproof.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0f5c476483156217f9344cbf599005be95fc8a58/test/functional/rpc_txoutproof.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0f5c476483156217f9344cbf599005be95fc8a58/test/functional/rpc_txoutproof.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_txoutproof.py?ref=0f5c476483156217f9344cbf599005be95fc8a58",
        "patch": "@@ -40,7 +40,7 @@ def run_test(self):\n         tx2 = self.nodes[0].createrawtransaction([node0utxos.pop()], {self.nodes[1].getnewaddress(): 49.99})\n         txid2 = self.nodes[0].sendrawtransaction(self.nodes[0].signrawtransactionwithwallet(tx2)[\"hex\"])\n         # This will raise an exception because the transaction is not yet in a block\n-        assert_raises_rpc_error(-5, \"Transaction not yet in block\", self.nodes[0].gettxoutproof, [txid1])\n+        assert_raises_rpc_error(-5, \"Transaction not found in block\", self.nodes[3].gettxoutproof, [txid1])\n \n         self.nodes[0].generate(1)\n         blockhash = self.nodes[0].getblockhash(chain_height + 1)\n@@ -64,8 +64,8 @@ def run_test(self):\n         txid_spent = txin_spent[\"txid\"]\n         txid_unspent = txid1 if txin_spent[\"txid\"] != txid1 else txid2\n \n-        # We can't find the block from a fully-spent tx\n-        assert_raises_rpc_error(-5, \"Transaction not yet in block\", self.nodes[2].gettxoutproof, [txid_spent])\n+        # We can't find the block from a fully-spent tx without txindex\n+        assert_raises_rpc_error(-33, \"Use -txindex to enable blockchain transaction queries\", self.nodes[2].gettxoutproof, [txid_spent])\n         # We can get the proof if we specify the block\n         assert_equal(self.nodes[2].verifytxoutproof(self.nodes[2].gettxoutproof([txid_spent], blockhash)), [txid_spent])\n         # We can't get the proof if we specify a non-existent block"
      }
    ]
  },
  {
    "sha": "6d787d4c5276dd33ffd4c5d50c7056150cd71a84",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZDc4N2Q0YzUyNzZkZDMzZmZkNGM1ZDUwYzcwNTYxNTBjZDcxYTg0",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jimpo@coinbase.com",
        "date": "2018-05-01T20:14:10Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2018-07-16T16:27:37Z"
      },
      "message": "RPC: Move GetTransaction from validation to rpc/rawtransaction.\n\nThis breaks a circular dependency between validation and txindex.",
      "tree": {
        "sha": "4739e8d94782931fefb1ed8767e4aabcceeb1a94",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4739e8d94782931fefb1ed8767e4aabcceeb1a94"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6d787d4c5276dd33ffd4c5d50c7056150cd71a84",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d787d4c5276dd33ffd4c5d50c7056150cd71a84",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6d787d4c5276dd33ffd4c5d50c7056150cd71a84",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d787d4c5276dd33ffd4c5d50c7056150cd71a84/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0f5c476483156217f9344cbf599005be95fc8a58",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f5c476483156217f9344cbf599005be95fc8a58",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0f5c476483156217f9344cbf599005be95fc8a58"
      }
    ],
    "stats": {
      "total": 107,
      "additions": 54,
      "deletions": 53
    },
    "files": [
      {
        "sha": "4eaa4beed40a62b4177767d116d7ac86e90058f4",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d787d4c5276dd33ffd4c5d50c7056150cd71a84/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d787d4c5276dd33ffd4c5d50c7056150cd71a84/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=6d787d4c5276dd33ffd4c5d50c7056150cd71a84",
        "patch": "@@ -12,6 +12,7 @@\n #include <validation.h>\n #include <httpserver.h>\n #include <rpc/blockchain.h>\n+#include <rpc/rawtransaction.h>\n #include <rpc/server.h>\n #include <streams.h>\n #include <sync.h>\n@@ -357,7 +358,7 @@ static bool rest_tx(HTTPRequest* req, const std::string& strURIPart)\n \n     CTransactionRef tx;\n     uint256 hashBlock = uint256();\n-    if (!GetTransaction(hash, tx, Params().GetConsensus(), hashBlock, true))\n+    if (!GetTransaction(hash, tx, hashBlock, true))\n         return RESTERR(req, HTTP_NOT_FOUND, hashStr + \" not found\");\n \n     CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION | RPCSerializationFlags());"
      },
      {
        "sha": "46664981934c690cff2f335efbc1bc4af06a9418",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d787d4c5276dd33ffd4c5d50c7056150cd71a84/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d787d4c5276dd33ffd4c5d50c7056150cd71a84/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=6d787d4c5276dd33ffd4c5d50c7056150cd71a84",
        "patch": "@@ -16,6 +16,7 @@\n #include <policy/feerate.h>\n #include <policy/policy.h>\n #include <primitives/transaction.h>\n+#include <rpc/rawtransaction.h>\n #include <rpc/server.h>\n #include <streams.h>\n #include <sync.h>\n@@ -1822,7 +1823,7 @@ static UniValue getblockstats(const JSONRPCRequest& request)\n             for (const CTxIn& in : tx->vin) {\n                 CTransactionRef tx_in;\n                 uint256 hashBlock;\n-                if (!GetTransaction(in.prevout.hash, tx_in, Params().GetConsensus(), hashBlock, false)) {\n+                if (!GetTransaction(in.prevout.hash, tx_in, hashBlock, false)) {\n                     throw JSONRPCError(RPC_INTERNAL_ERROR, std::string(\"Unexpected internal error (tx index seems corrupt)\"));\n                 }\n "
      },
      {
        "sha": "bee97cbf05dc1b40d9c14c01abc2324eced5ac9e",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 43,
        "deletions": 1,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d787d4c5276dd33ffd4c5d50c7056150cd71a84/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d787d4c5276dd33ffd4c5d50c7056150cd71a84/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=6d787d4c5276dd33ffd4c5d50c7056150cd71a84",
        "patch": "@@ -35,6 +35,48 @@\n \n #include <univalue.h>\n \n+/**\n+ * Return transaction in txOut, and if it was found inside a block, its hash is placed in hashBlock.\n+ * If blockIndex is provided, the transaction is fetched from the corresponding block.\n+ */\n+bool GetTransaction(const uint256& hash, CTransactionRef& txOut, uint256& hashBlock, bool fAllowSlow, CBlockIndex* blockIndex)\n+{\n+    CBlockIndex* pindexSlow = blockIndex;\n+\n+    LOCK(cs_main);\n+\n+    if (!blockIndex) {\n+        CTransactionRef ptx = mempool.get(hash);\n+        if (ptx) {\n+            txOut = ptx;\n+            return true;\n+        }\n+\n+        if (g_txindex) {\n+            return g_txindex->FindTx(hash, hashBlock, txOut);\n+        }\n+\n+        if (fAllowSlow) { // use coin database to locate block that contains transaction, and scan it\n+            const Coin& coin = AccessByTxid(*pcoinsTip, hash);\n+            if (!coin.IsSpent()) pindexSlow = chainActive[coin.nHeight];\n+        }\n+    }\n+\n+    if (pindexSlow) {\n+        CBlock block;\n+        if (ReadBlockFromDisk(block, pindexSlow, Params().GetConsensus())) {\n+            for (const auto& tx : block.vtx) {\n+                if (tx->GetHash() == hash) {\n+                    txOut = tx;\n+                    hashBlock = pindexSlow->GetBlockHash();\n+                    return true;\n+                }\n+            }\n+        }\n+    }\n+\n+    return false;\n+}\n \n static void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry)\n {\n@@ -175,7 +217,7 @@ static UniValue getrawtransaction(const JSONRPCRequest& request)\n \n     CTransactionRef tx;\n     uint256 hash_block;\n-    if (!GetTransaction(hash, tx, Params().GetConsensus(), hash_block, true, blockindex)) {\n+    if (!GetTransaction(hash, tx, hash_block, true, blockindex)) {\n         std::string errmsg;\n         if (blockindex) {\n             if (!(blockindex->nStatus & BLOCK_HAVE_DATA)) {"
      },
      {
        "sha": "220c4b8c34f0551cd8a92f1136e269294514e3fc",
        "filename": "src/rpc/rawtransaction.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d787d4c5276dd33ffd4c5d50c7056150cd71a84/src/rpc/rawtransaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d787d4c5276dd33ffd4c5d50c7056150cd71a84/src/rpc/rawtransaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.h?ref=6d787d4c5276dd33ffd4c5d50c7056150cd71a84",
        "patch": "@@ -5,11 +5,18 @@\n #ifndef BITCOIN_RPC_RAWTRANSACTION_H\n #define BITCOIN_RPC_RAWTRANSACTION_H\n \n+#include <primitives/transaction.h>\n+#include <uint256.h>\n+\n class CBasicKeyStore;\n+class CBlockIndex;\n struct CMutableTransaction;\n class UniValue;\n \n /** Sign a transaction with the given keystore and previous transactions */\n UniValue SignTransaction(CMutableTransaction& mtx, const UniValue& prevTxs, CBasicKeyStore *keystore, bool tempKeystore, const UniValue& hashType);\n \n+/** Retrieve a transaction (from memory pool, or from disk, if possible) */\n+bool GetTransaction(const uint256& hash, CTransactionRef& tx, uint256& hashBlock, bool fAllowSlow = false, CBlockIndex* blockIndex = nullptr);\n+\n #endif // BITCOIN_RPC_RAWTRANSACTION_H"
      },
      {
        "sha": "906d17ce7c20437d84bcc3cfe10e1c8202180f1a",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 48,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d787d4c5276dd33ffd4c5d50c7056150cd71a84/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d787d4c5276dd33ffd4c5d50c7056150cd71a84/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=6d787d4c5276dd33ffd4c5d50c7056150cd71a84",
        "patch": "@@ -16,7 +16,6 @@\n #include <consensus/validation.h>\n #include <cuckoocache.h>\n #include <hash.h>\n-#include <index/txindex.h>\n #include <policy/fees.h>\n #include <policy/policy.h>\n #include <policy/rbf.h>\n@@ -1017,53 +1016,6 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n     return AcceptToMemoryPoolWithTime(chainparams, pool, state, tx, pfMissingInputs, GetTime(), plTxnReplaced, bypass_limits, nAbsurdFee, test_accept);\n }\n \n-/**\n- * Return transaction in txOut, and if it was found inside a block, its hash is placed in hashBlock.\n- * If blockIndex is provided, the transaction is fetched from the corresponding block.\n- */\n-bool GetTransaction(const uint256& hash, CTransactionRef& txOut, const Consensus::Params& consensusParams, uint256& hashBlock, bool fAllowSlow, CBlockIndex* blockIndex)\n-{\n-    CBlockIndex* pindexSlow = blockIndex;\n-\n-    LOCK(cs_main);\n-\n-    if (!blockIndex) {\n-        CTransactionRef ptx = mempool.get(hash);\n-        if (ptx) {\n-            txOut = ptx;\n-            return true;\n-        }\n-\n-        if (g_txindex) {\n-            return g_txindex->FindTx(hash, hashBlock, txOut);\n-        }\n-\n-        if (fAllowSlow) { // use coin database to locate block that contains transaction, and scan it\n-            const Coin& coin = AccessByTxid(*pcoinsTip, hash);\n-            if (!coin.IsSpent()) pindexSlow = chainActive[coin.nHeight];\n-        }\n-    }\n-\n-    if (pindexSlow) {\n-        CBlock block;\n-        if (ReadBlockFromDisk(block, pindexSlow, consensusParams)) {\n-            for (const auto& tx : block.vtx) {\n-                if (tx->GetHash() == hash) {\n-                    txOut = tx;\n-                    hashBlock = pindexSlow->GetBlockHash();\n-                    return true;\n-                }\n-            }\n-        }\n-    }\n-\n-    return false;\n-}\n-\n-\n-\n-\n-\n \n //////////////////////////////////////////////////////////////////////////////\n //"
      },
      {
        "sha": "ad3307930b53c399c7300ddc138786e24056e977",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d787d4c5276dd33ffd4c5d50c7056150cd71a84/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d787d4c5276dd33ffd4c5d50c7056150cd71a84/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=6d787d4c5276dd33ffd4c5d50c7056150cd71a84",
        "patch": "@@ -278,8 +278,6 @@ void UnloadBlockIndex();\n void ThreadScriptCheck();\n /** Check whether we are doing an initial block download (synchronizing from disk or network) */\n bool IsInitialBlockDownload();\n-/** Retrieve a transaction (from memory pool, or from disk, if possible) */\n-bool GetTransaction(const uint256& hash, CTransactionRef& tx, const Consensus::Params& params, uint256& hashBlock, bool fAllowSlow = false, CBlockIndex* blockIndex = nullptr);\n /**\n  * Find the best known block, and make it the tip of the block chain\n  *"
      }
    ]
  },
  {
    "sha": "ac3535187b2a6c73a5f76e7bf66cc714c3114d57",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYzM1MzUxODdiMmE2YzczYTVmNzZlN2JmNjZjYzcxNGMzMTE0ZDU3",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jimpo@coinbase.com",
        "date": "2018-05-01T20:22:57Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2018-07-16T16:27:37Z"
      },
      "message": "RPC: Refactor GetTransaction helper method.\n\nBreak out GetTransactionInBlock into a separate method.",
      "tree": {
        "sha": "e5d965d08ea7ea47fc12bd31aa314b37123498e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e5d965d08ea7ea47fc12bd31aa314b37123498e2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ac3535187b2a6c73a5f76e7bf66cc714c3114d57",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac3535187b2a6c73a5f76e7bf66cc714c3114d57",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ac3535187b2a6c73a5f76e7bf66cc714c3114d57",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac3535187b2a6c73a5f76e7bf66cc714c3114d57/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6d787d4c5276dd33ffd4c5d50c7056150cd71a84",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d787d4c5276dd33ffd4c5d50c7056150cd71a84",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6d787d4c5276dd33ffd4c5d50c7056150cd71a84"
      }
    ],
    "stats": {
      "total": 124,
      "additions": 81,
      "deletions": 43
    },
    "files": [
      {
        "sha": "6f319ea0f78effb63012097dbf76cea0624427c6",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 55,
        "deletions": 41,
        "changes": 96,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac3535187b2a6c73a5f76e7bf66cc714c3114d57/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac3535187b2a6c73a5f76e7bf66cc714c3114d57/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=ac3535187b2a6c73a5f76e7bf66cc714c3114d57",
        "patch": "@@ -35,43 +35,51 @@\n \n #include <univalue.h>\n \n-/**\n- * Return transaction in txOut, and if it was found inside a block, its hash is placed in hashBlock.\n- * If blockIndex is provided, the transaction is fetched from the corresponding block.\n- */\n-bool GetTransaction(const uint256& hash, CTransactionRef& txOut, uint256& hashBlock, bool fAllowSlow, CBlockIndex* blockIndex)\n+bool GetTransaction(const uint256& tx_hash, CTransactionRef& tx, uint256& block_hash, bool allow_slow)\n {\n-    CBlockIndex* pindexSlow = blockIndex;\n+    // First check for an unconfirmed transaction in the mempool.\n+    if (tx = mempool.get(tx_hash)) {\n+        block_hash.SetNull();\n+        return true;\n+    }\n \n-    LOCK(cs_main);\n+    // Search for transaction in the txindex if it is enabled and up-to-date.\n+    bool f_txindex_ready = g_txindex && g_txindex->BlockUntilSyncedToCurrentChain();\n+    if (f_txindex_ready && g_txindex->FindTx(tx_hash, block_hash, tx)) {\n+        return true;\n+    }\n \n-    if (!blockIndex) {\n-        CTransactionRef ptx = mempool.get(hash);\n-        if (ptx) {\n-            txOut = ptx;\n-            return true;\n+    // If txindex is not available, try a best-effort lookup using the UTXO set cache.\n+    if (!f_txindex_ready && allow_slow) {\n+        const CBlockIndex* block_index = nullptr;\n+        {\n+            LOCK(cs_main);\n+            const Coin& coin = AccessByTxid(*pcoinsTip, tx_hash);\n+            if (!coin.IsSpent()) {\n+                block_index = chainActive[coin.nHeight];\n+            }\n         }\n \n-        if (g_txindex) {\n-            return g_txindex->FindTx(hash, hashBlock, txOut);\n+        if (block_index && GetTransactionInBlock(tx_hash, block_index, tx)) {\n+            block_hash = block_index->GetBlockHash();\n+            return true;\n         }\n+    }\n \n-        if (fAllowSlow) { // use coin database to locate block that contains transaction, and scan it\n-            const Coin& coin = AccessByTxid(*pcoinsTip, hash);\n-            if (!coin.IsSpent()) pindexSlow = chainActive[coin.nHeight];\n-        }\n+    return false;\n+}\n+\n+bool GetTransactionInBlock(const uint256& tx_hash, const CBlockIndex* block_index, CTransactionRef& tx)\n+{\n+    CBlock block;\n+    if (!ReadBlockFromDisk(block, block_index, Params().GetConsensus())) {\n+        return false;\n     }\n \n-    if (pindexSlow) {\n-        CBlock block;\n-        if (ReadBlockFromDisk(block, pindexSlow, Params().GetConsensus())) {\n-            for (const auto& tx : block.vtx) {\n-                if (tx->GetHash() == hash) {\n-                    txOut = tx;\n-                    hashBlock = pindexSlow->GetBlockHash();\n-                    return true;\n-                }\n-            }\n+    for (const auto& block_tx : block.vtx) {\n+        if (block_tx->GetHash() == tx_hash) {\n+            tx = block_tx;\n+            return true;\n         }\n     }\n \n@@ -217,21 +225,27 @@ static UniValue getrawtransaction(const JSONRPCRequest& request)\n \n     CTransactionRef tx;\n     uint256 hash_block;\n-    if (!GetTransaction(hash, tx, hash_block, true, blockindex)) {\n-        std::string errmsg;\n-        if (blockindex) {\n-            if (!(blockindex->nStatus & BLOCK_HAVE_DATA)) {\n-                throw JSONRPCError(RPC_MISC_ERROR, \"Block not available\");\n+    if (blockindex) {\n+        if (GetTransactionInBlock(hash, blockindex, tx)) {\n+            hash_block = blockindex->GetBlockHash();\n+        } else if (!(blockindex->nStatus & BLOCK_HAVE_DATA)) {\n+            throw JSONRPCError(RPC_DATA_UNAVAILABLE, \"Block not available\");\n+         } else {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY,\n+                               \"No such transaction found in the provided block.\");\n+        }\n+    } else {\n+        if (!GetTransaction(hash, tx, hash_block, true)) {\n+            std::string errmsg;\n+            if (!g_txindex) {\n+                errmsg = \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\";\n+            } else if (!f_txindex_ready) {\n+                errmsg = \"No such mempool transaction. Blockchain transactions are still in the process of being indexed\";\n+            } else {\n+                errmsg = \"No such mempool or blockchain transaction\";\n             }\n-            errmsg = \"No such transaction found in the provided block\";\n-        } else if (!g_txindex) {\n-            errmsg = \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\";\n-        } else if (!f_txindex_ready) {\n-            errmsg = \"No such mempool transaction. Blockchain transactions are still in the process of being indexed\";\n-        } else {\n-            errmsg = \"No such mempool or blockchain transaction\";\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, errmsg + \". Use gettransaction for wallet transactions.\");\n         }\n-        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, errmsg + \". Use gettransaction for wallet transactions.\");\n     }\n \n     if (!fVerbose) {"
      },
      {
        "sha": "d2d1f128a4e5d878160d121487ee528b9669be34",
        "filename": "src/rpc/rawtransaction.h",
        "status": "modified",
        "additions": 26,
        "deletions": 2,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac3535187b2a6c73a5f76e7bf66cc714c3114d57/src/rpc/rawtransaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac3535187b2a6c73a5f76e7bf66cc714c3114d57/src/rpc/rawtransaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.h?ref=ac3535187b2a6c73a5f76e7bf66cc714c3114d57",
        "patch": "@@ -16,7 +16,31 @@ class UniValue;\n /** Sign a transaction with the given keystore and previous transactions */\n UniValue SignTransaction(CMutableTransaction& mtx, const UniValue& prevTxs, CBasicKeyStore *keystore, bool tempKeystore, const UniValue& hashType);\n \n-/** Retrieve a transaction (from memory pool, or from disk, if possible) */\n-bool GetTransaction(const uint256& hash, CTransactionRef& tx, uint256& hashBlock, bool fAllowSlow = false, CBlockIndex* blockIndex = nullptr);\n+/**\n+ * Look up a transaction by hash. This checks for transactions in the mempool,\n+ * the tx index if enabled, and the UTXO set cache on a best-effort basis. If\n+ * the transaction is not found, this returns false.\n+ *\n+ * @param[in]   tx_hash  The hash of the transaction to be returned.\n+ * @param[out]  tx  The transaction itself.\n+ * @param[out]  block_hash  The hash of the block the transaction is found in.\n+ * @param[in]   allow_slow  An option to search a slow, unreliable source for transactions.\n+ * @return  true if transaction is found, false otherwise\n+ */\n+bool GetTransaction(const uint256& tx_hash, CTransactionRef& tx, uint256& block_hash,\n+                    bool allow_slow);\n+\n+/**\n+ * Look up a raw transaction by hash within a specified block. This loads the\n+ * block itself from disk and return true if the transaction is contained within\n+ * it.\n+ *\n+ * @param[in]   tx_hash  The hash of the transaction to be returned.\n+ * @param[in]   block_index  The block index of the block to search.\n+ * @param[out]  tx  The raw transaction itself.\n+ * @return  true if transaction is found, false otherwise\n+ */\n+bool GetTransactionInBlock(const uint256& tx_hash, const CBlockIndex* block_index,\n+                           CTransactionRef& tx);\n \n #endif // BITCOIN_RPC_RAWTRANSACTION_H"
      }
    ]
  },
  {
    "sha": "8f3efeb11d2d7dd3a05a24691a63da08a8b885b8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZjNlZmViMTFkMmQ3ZGQzYTA1YTI0NjkxYTYzZGEwOGE4Yjg4NWI4",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jimpo@coinbase.com",
        "date": "2018-05-01T20:52:48Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2018-07-16T16:27:37Z"
      },
      "message": "RPC: Return error message from GetTransaction helper.\n\nSince both the REST and RPC APIs use GetTransaction, there is no need\nto duplicate the error handling logic.",
      "tree": {
        "sha": "34b4aaaeb5e728894a2ebc447268f445e639754a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/34b4aaaeb5e728894a2ebc447268f445e639754a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8f3efeb11d2d7dd3a05a24691a63da08a8b885b8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f3efeb11d2d7dd3a05a24691a63da08a8b885b8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8f3efeb11d2d7dd3a05a24691a63da08a8b885b8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f3efeb11d2d7dd3a05a24691a63da08a8b885b8/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ac3535187b2a6c73a5f76e7bf66cc714c3114d57",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac3535187b2a6c73a5f76e7bf66cc714c3114d57",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ac3535187b2a6c73a5f76e7bf66cc714c3114d57"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 27,
      "deletions": 24
    },
    "files": [
      {
        "sha": "ed9eea7d748c52f655acac2225d593d21e4c3fa9",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f3efeb11d2d7dd3a05a24691a63da08a8b885b8/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f3efeb11d2d7dd3a05a24691a63da08a8b885b8/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=8f3efeb11d2d7dd3a05a24691a63da08a8b885b8",
        "patch": "@@ -352,14 +352,13 @@ static bool rest_tx(HTTPRequest* req, const std::string& strURIPart)\n     if (!ParseHashStr(hashStr, hash))\n         return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + hashStr);\n \n-    if (g_txindex) {\n-        g_txindex->BlockUntilSyncedToCurrentChain();\n-    }\n-\n     CTransactionRef tx;\n     uint256 hashBlock = uint256();\n-    if (!GetTransaction(hash, tx, hashBlock, true))\n-        return RESTERR(req, HTTP_NOT_FOUND, hashStr + \" not found\");\n+    int error_code;\n+    std::string errmsg;\n+    if (!GetTransaction(hash, tx, hashBlock, error_code, errmsg, true)) {\n+        return RESTERR(req, HTTP_NOT_FOUND, errmsg);\n+    }\n \n     CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION | RPCSerializationFlags());\n     ssTx << tx;"
      },
      {
        "sha": "248be85f25975408a3f4aa27e730f3add27644c6",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f3efeb11d2d7dd3a05a24691a63da08a8b885b8/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f3efeb11d2d7dd3a05a24691a63da08a8b885b8/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=8f3efeb11d2d7dd3a05a24691a63da08a8b885b8",
        "patch": "@@ -1823,7 +1823,9 @@ static UniValue getblockstats(const JSONRPCRequest& request)\n             for (const CTxIn& in : tx->vin) {\n                 CTransactionRef tx_in;\n                 uint256 hashBlock;\n-                if (!GetTransaction(in.prevout.hash, tx_in, hashBlock, false)) {\n+                int dummy_error_code;\n+                std::string dummy_errmsg;\n+                if (!GetTransaction(in.prevout.hash, tx_in, hashBlock, dummy_error_code, dummy_errmsg, false)) {\n                     throw JSONRPCError(RPC_INTERNAL_ERROR, std::string(\"Unexpected internal error (tx index seems corrupt)\"));\n                 }\n "
      },
      {
        "sha": "1a019c3ebe290c1927d7baeac39a09db6ef78d8f",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 16,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f3efeb11d2d7dd3a05a24691a63da08a8b885b8/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f3efeb11d2d7dd3a05a24691a63da08a8b885b8/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=8f3efeb11d2d7dd3a05a24691a63da08a8b885b8",
        "patch": "@@ -35,7 +35,8 @@\n \n #include <univalue.h>\n \n-bool GetTransaction(const uint256& tx_hash, CTransactionRef& tx, uint256& block_hash, bool allow_slow)\n+bool GetTransaction(const uint256& tx_hash, CTransactionRef& tx, uint256& block_hash,\n+                    int& error_code, std::string& errmsg, bool allow_slow)\n {\n     // First check for an unconfirmed transaction in the mempool.\n     if (tx = mempool.get(tx_hash)) {\n@@ -66,6 +67,16 @@ bool GetTransaction(const uint256& tx_hash, CTransactionRef& tx, uint256& block_\n         }\n     }\n \n+    if (!g_txindex) {\n+        error_code = RPC_DATA_UNAVAILABLE;\n+        errmsg = \"No such mempool transaction. Use -txindex to enable blockchain transaction queries.\";\n+    } else if (!f_txindex_ready) {\n+        error_code = RPC_DATA_UNAVAILABLE;\n+        errmsg = \"No such mempool transaction. Blockchain transactions are still in the process of being indexed.\";\n+    } else {\n+        error_code = RPC_INVALID_ADDRESS_OR_KEY;\n+        errmsg = \"No such mempool or blockchain transaction.\";\n+    }\n     return false;\n }\n \n@@ -218,11 +229,6 @@ static UniValue getrawtransaction(const JSONRPCRequest& request)\n         in_active_chain = chainActive.Contains(blockindex);\n     }\n \n-    bool f_txindex_ready = false;\n-    if (g_txindex && !blockindex) {\n-        f_txindex_ready = g_txindex->BlockUntilSyncedToCurrentChain();\n-    }\n-\n     CTransactionRef tx;\n     uint256 hash_block;\n     if (blockindex) {\n@@ -235,16 +241,10 @@ static UniValue getrawtransaction(const JSONRPCRequest& request)\n                                \"No such transaction found in the provided block.\");\n         }\n     } else {\n-        if (!GetTransaction(hash, tx, hash_block, true)) {\n-            std::string errmsg;\n-            if (!g_txindex) {\n-                errmsg = \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\";\n-            } else if (!f_txindex_ready) {\n-                errmsg = \"No such mempool transaction. Blockchain transactions are still in the process of being indexed\";\n-            } else {\n-                errmsg = \"No such mempool or blockchain transaction\";\n-            }\n-            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, errmsg + \". Use gettransaction for wallet transactions.\");\n+        int error_code;\n+        std::string errmsg;\n+        if (!GetTransaction(hash, tx, hash_block, error_code, errmsg, true)) {\n+            throw JSONRPCError(error_code, errmsg + \" Use gettransaction for wallet transactions.\");\n         }\n     }\n "
      },
      {
        "sha": "ca9e8ff88e860cb4c2cdaea6f609d5778437aa4f",
        "filename": "src/rpc/rawtransaction.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f3efeb11d2d7dd3a05a24691a63da08a8b885b8/src/rpc/rawtransaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f3efeb11d2d7dd3a05a24691a63da08a8b885b8/src/rpc/rawtransaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.h?ref=8f3efeb11d2d7dd3a05a24691a63da08a8b885b8",
        "patch": "@@ -24,11 +24,13 @@ UniValue SignTransaction(CMutableTransaction& mtx, const UniValue& prevTxs, CBas\n  * @param[in]   tx_hash  The hash of the transaction to be returned.\n  * @param[out]  tx  The transaction itself.\n  * @param[out]  block_hash  The hash of the block the transaction is found in.\n+ * @param[out]  error_code  RPC code explaining why transaction could not be found.\n+ * @param[out]  errmsg  Reason why transaction could not be found.\n  * @param[in]   allow_slow  An option to search a slow, unreliable source for transactions.\n  * @return  true if transaction is found, false otherwise\n  */\n bool GetTransaction(const uint256& tx_hash, CTransactionRef& tx, uint256& block_hash,\n-                    bool allow_slow);\n+                    int& error_code, std::string& errmsg, bool allow_slow);\n \n /**\n  * Look up a raw transaction by hash within a specified block. This loads the"
      }
    ]
  },
  {
    "sha": "12c4386360cd5332cf4300489e1c895d80ba284e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMmM0Mzg2MzYwY2Q1MzMyY2Y0MzAwNDg5ZTFjODk1ZDgwYmEyODRl",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jimpo@coinbase.com",
        "date": "2018-05-01T23:51:35Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2018-07-16T16:27:37Z"
      },
      "message": "test: Test error message on getrawtransaction without txindex.",
      "tree": {
        "sha": "61fe8f55d2394650088e761518e032be8d060234",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/61fe8f55d2394650088e761518e032be8d060234"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/12c4386360cd5332cf4300489e1c895d80ba284e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12c4386360cd5332cf4300489e1c895d80ba284e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/12c4386360cd5332cf4300489e1c895d80ba284e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12c4386360cd5332cf4300489e1c895d80ba284e/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8f3efeb11d2d7dd3a05a24691a63da08a8b885b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f3efeb11d2d7dd3a05a24691a63da08a8b885b8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8f3efeb11d2d7dd3a05a24691a63da08a8b885b8"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 23,
      "deletions": 1
    },
    "files": [
      {
        "sha": "928c391007964cbbfea266f36c2ebdac9c4cc564",
        "filename": "test/functional/rpc_rawtransaction.py",
        "status": "modified",
        "additions": 23,
        "deletions": 1,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12c4386360cd5332cf4300489e1c895d80ba284e/test/functional/rpc_rawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12c4386360cd5332cf4300489e1c895d80ba284e/test/functional/rpc_rawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_rawtransaction.py?ref=12c4386360cd5332cf4300489e1c895d80ba284e",
        "patch": "@@ -41,7 +41,7 @@ class RawTransactionsTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n-        self.extra_args = [[\"-addresstype=legacy\"], [\"-addresstype=legacy\"], [\"-addresstype=legacy\"]]\n+        self.extra_args = [[\"-addresstype=legacy\"], [\"-addresstype=legacy\"], [\"-addresstype=legacy\", \"-txindex\"]]\n \n     def setup_network(self, split=False):\n         super().setup_network()\n@@ -231,6 +231,28 @@ def run_test(self):\n         self.nodes[0].reconsiderblock(block1)\n         assert_equal(self.nodes[0].getbestblockhash(), block2)\n \n+        # Create new transaction and don't broadcast.\n+        to_address = self.nodes[0].getnewaddress()\n+        prevout_index = [i for i, out in enumerate(gottx['vout']) if out['value'] == 1][0]\n+        inputs = [{\"txid\": tx, \"vout\": prevout_index}]\n+        outputs = {to_address: 0.9999}\n+        spending_rawtx = self.nodes[1].createrawtransaction(inputs, outputs)\n+        spending_tx = self.nodes[1].signrawtransactionwithwallet(spending_rawtx)['hex']\n+        spending_txid = bytes_to_hex_str(hash256(hex_str_to_bytes(spending_tx)))\n+\n+        # Searching unknown transaction without -txindex.\n+        assert_raises_rpc_error(-33, \"No such mempool transaction. Use -txindex to enable blockchain transaction queries.\", self.nodes[1].getrawtransaction, spending_txid)\n+\n+        # Searching unknown transaction with txindex.\n+        assert_raises_rpc_error(-5, \"No such mempool or blockchain transaction.\", self.nodes[2].getrawtransaction, spending_txid)\n+\n+        # Broadcast transaction to mempool.\n+        self.nodes[0].sendrawtransaction(spending_tx)\n+        self.sync_all()\n+\n+        gottx = self.nodes[2].getrawtransaction(spending_txid, True)\n+        assert_equal(gottx['txid'], spending_txid)\n+\n         #########################\n         # RAW TX MULTISIG TESTS #\n         #########################"
      }
    ]
  }
]