gmaxwell,2017-08-29T19:42:09Z,"> Additionally, I assume we could skip UpdateMovingAverages() altogether if no entries have ever been added, but it's not obvious to me how to do that without breaking something.\n\nAn optimization like this would be important for IBD.",https://github.com/bitcoin/bitcoin/pull/11194#issuecomment-325777656,325777656,
theuni,2017-08-29T19:51:49Z,"@gmaxwell Indeed. When profiling IBD for the first few hundred thousand blocks, some of my results showed this function alone accounting for ~5-10% of all cpu time spent on the message handling thread.\n\nThis change reduces those percentages to roughly half iirc, but obviously avoiding it entirely when possible would be best.",https://github.com/bitcoin/bitcoin/pull/11194#issuecomment-325780203,325780203,
promag,2017-08-30T22:56:40Z,"> Additionally, I assume we could skip UpdateMovingAverages() altogether if no entries have ever been added, but it's not obvious to me how to do that without breaking something.\n\nHow about not `Record()` it if current tip is too old? In other words, just `Record()` and `UpdateMovingAverages()` when approaching live tip?\n\nEdit: when in IBD.",https://github.com/bitcoin/bitcoin/pull/11194#issuecomment-326142083,326142083,
gmaxwell,2017-08-31T00:56:45Z,"FWIW, I benchmarked a sync completely bypassing CBlockPolicyEstimator::processBlock and it was effectively the same speed (0.5% faster, but that could well be noise).\n",https://github.com/bitcoin/bitcoin/pull/11194#issuecomment-326159138,326159138,
promag,2017-08-31T01:06:01Z,"You mean speed in IBD, not CPU usage right?",https://github.com/bitcoin/bitcoin/pull/11194#issuecomment-326160384,326160384,
gmaxwell,2017-08-31T01:07:42Z,"Yes, though on this host (and in this benchmark) IBD is more or less cpu limited.  I didn't intend to suggest that we shouldn't optimize here, but it's apparently not a huge it in IBD as cfields was initially concerned about it being.",https://github.com/bitcoin/bitcoin/pull/11194#issuecomment-326160611,326160611,
DrahtBot,2018-07-20T19:21:40Z,"<!--5d09a71f8925f3f132321140b44b946d-->The last travis run for this pull request was 324 days ago and is thus outdated. To trigger a fresh travis build, this pull request should be closed and re-opened.",https://github.com/bitcoin/bitcoin/pull/11194#issuecomment-406702595,406702595,
laanwj,2019-01-09T16:31:58Z,"Last activity on this was in 2017, going to close this and add ""up for grabs"". Let me know if you want me to reopen it.",https://github.com/bitcoin/bitcoin/pull/11194#issuecomment-452761124,452761124,
Dllieu,2017-09-04T16:31:37Z,"Would it might be more clear to write the following\n\n```c++\nauto applyDecay = [&decay, &buckets](std::vector<double>& transactions)\n{\n    assert(transactions.size() == buckets.size());\n    for (double& bucket : transactions)\n    {\n        bucket *= decay;\n    }\n};\n\nfor (auto& elem : confAvg)\n{\n    applyDecay(elem);\n}\n\nfor (auto& elem : failAvg)\n{\n    applyDeca",https://github.com/bitcoin/bitcoin/pull/11194#discussion_r136852241,136852241,src/policy/fees.cpp
