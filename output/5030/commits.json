[
  {
    "sha": "f0fd00cb77d91ec9ac729bc4cf35ff7d9f676d8f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMGZkMDBjYjc3ZDkxZWM5YWM3MjliYzRjZjM1ZmY3ZDlmNjc2ZDhm",
    "commit": {
      "author": {
        "name": "SergioDemianLerner",
        "email": "Sergio.d.Lerner@gmail.com",
        "date": "2014-09-04T19:23:42Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-02T11:51:39Z"
      },
      "message": "Switch testing framework from MAIN to new UNITTEST network\n\nUNITTEST inherites from MAIN but allows synamically changing its parameters using the ModifiableParams() interface",
      "tree": {
        "sha": "a7c6249b856c74dd8600c8244ea9e8331d74eb6c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a7c6249b856c74dd8600c8244ea9e8331d74eb6c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f0fd00cb77d91ec9ac729bc4cf35ff7d9f676d8f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0fd00cb77d91ec9ac729bc4cf35ff7d9f676d8f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f0fd00cb77d91ec9ac729bc4cf35ff7d9f676d8f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0fd00cb77d91ec9ac729bc4cf35ff7d9f676d8f/comments",
    "author": {
      "login": "SergioDemianLerner",
      "id": 1752347,
      "node_id": "MDQ6VXNlcjE3NTIzNDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1752347?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SergioDemianLerner",
      "html_url": "https://github.com/SergioDemianLerner",
      "followers_url": "https://api.github.com/users/SergioDemianLerner/followers",
      "following_url": "https://api.github.com/users/SergioDemianLerner/following{/other_user}",
      "gists_url": "https://api.github.com/users/SergioDemianLerner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SergioDemianLerner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SergioDemianLerner/subscriptions",
      "organizations_url": "https://api.github.com/users/SergioDemianLerner/orgs",
      "repos_url": "https://api.github.com/users/SergioDemianLerner/repos",
      "events_url": "https://api.github.com/users/SergioDemianLerner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SergioDemianLerner/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8d132431b4f6a7676482815231cd923d9047d541",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d132431b4f6a7676482815231cd923d9047d541",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8d132431b4f6a7676482815231cd923d9047d541"
      }
    ],
    "stats": {
      "total": 101,
      "additions": 97,
      "deletions": 4
    },
    "files": [
      {
        "sha": "8a00da0bb51fad9055cb4994b85a87e0d84b16dd",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 44,
        "deletions": 0,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0fd00cb77d91ec9ac729bc4cf35ff7d9f676d8f/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0fd00cb77d91ec9ac729bc4cf35ff7d9f676d8f/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=f0fd00cb77d91ec9ac729bc4cf35ff7d9f676d8f",
        "patch": "@@ -214,8 +214,50 @@ class CRegTestParams : public CTestNetParams {\n };\n static CRegTestParams regTestParams;\n \n+//\n+// Unit test\n+//\n+class CUnitTestParams : public CMainParams, public CModifiableParams {\n+public:\n+    CUnitTestParams() {\n+        networkID = CBaseChainParams::UNITTEST;\n+        strNetworkID = \"unittest\";\n+        nDefaultPort = 18445;\n+        vFixedSeeds.clear();\n+        vSeeds.clear();  // Regtest mode doesn't have any DNS seeds.\n+\n+        fRequireRPCPassword = false;\n+        fMiningRequiresPeers = false;\n+        fDefaultCheckMemPool = true;\n+        fAllowMinDifficultyBlocks = false;\n+        fMineBlocksOnDemand = true;\n+        fSkipProofOfWorkCheck = false;\n+    }\n+    virtual bool SkipProofOfWorkCheck() const { return fSkipProofOfWorkCheck; }\n+protected:\n+    bool fSkipProofOfWorkCheck;\n+public:\n+    // Published setters to allow changing values in unit test cases\n+    virtual void setSubsidyHalvingInterval(int anSubsidyHalvingInterval)  { nSubsidyHalvingInterval=anSubsidyHalvingInterval; }\n+    virtual void setEnforceBlockUpgradeMajority(int anEnforceBlockUpgradeMajority)  { nEnforceBlockUpgradeMajority=anEnforceBlockUpgradeMajority; }\n+    virtual void setRejectBlockOutdatedMajority(int anRejectBlockOutdatedMajority)  { nRejectBlockOutdatedMajority=anRejectBlockOutdatedMajority; }\n+    virtual void setToCheckBlockUpgradeMajority(int anToCheckBlockUpgradeMajority)  { nToCheckBlockUpgradeMajority=anToCheckBlockUpgradeMajority; }\n+    virtual void setDefaultCheckMemPool(bool afDefaultCheckMemPool)  { fDefaultCheckMemPool=afDefaultCheckMemPool; }\n+    virtual void setAllowMinDifficultyBlocks(bool afAllowMinDifficultyBlocks) {  fAllowMinDifficultyBlocks=afAllowMinDifficultyBlocks; }\n+    virtual void setSkipProofOfWorkCheck(bool afSkipProofOfWorkCheck) { fSkipProofOfWorkCheck = afSkipProofOfWorkCheck; }\n+};\n+static CUnitTestParams unitTestParams;\n+\n+\n static CChainParams *pCurrentParams = 0;\n \n+CModifiableParams *ModifiableParams()\n+{\n+   assert(pCurrentParams);\n+   assert(pCurrentParams==&unitTestParams);\n+   return (CModifiableParams*)&unitTestParams;\n+}\n+\n const CChainParams &Params() {\n     assert(pCurrentParams);\n     return *pCurrentParams;\n@@ -229,6 +271,8 @@ CChainParams &Params(CBaseChainParams::Network network) {\n             return testNetParams;\n         case CBaseChainParams::REGTEST:\n             return regTestParams;\n+        case CBaseChainParams::UNITTEST:\n+            return unitTestParams;\n         default:\n             assert(false && \"Unimplemented network\");\n             return mainParams;"
      },
      {
        "sha": "171a590a5f37cae1718b4871196077e766c08200",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0fd00cb77d91ec9ac729bc4cf35ff7d9f676d8f/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0fd00cb77d91ec9ac729bc4cf35ff7d9f676d8f/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=f0fd00cb77d91ec9ac729bc4cf35ff7d9f676d8f",
        "patch": "@@ -61,6 +61,8 @@ class CChainParams\n     bool DefaultCheckMemPool() const { return fDefaultCheckMemPool; }\n     /* Allow mining of a min-difficulty block */\n     bool AllowMinDifficultyBlocks() const { return fAllowMinDifficultyBlocks; }\n+    /* Skip proof-of-work check: allow mining of any difficulty block */\n+    virtual bool SkipProofOfWorkCheck() const { return false; }\n     /* Make standard checks */\n     bool RequireStandard() const { return fRequireStandard; }\n     int64_t TargetTimespan() const { return nTargetTimespan; }\n@@ -105,6 +107,24 @@ class CChainParams\n     bool fMineBlocksOnDemand;\n };\n \n+/** Modifiable parameters interface is used by test cases to adapt the parameters in order\n+*** to test specific features more easily. Test cases should always restore the previous\n+*** values after finalization.\n+**/\n+\n+class CModifiableParams {\n+public:\n+    // Published setters to allow changing values in unit test cases\n+    virtual void setSubsidyHalvingInterval(int anSubsidyHalvingInterval) =0;\n+    virtual void setEnforceBlockUpgradeMajority(int anEnforceBlockUpgradeMajority)=0;\n+    virtual void setRejectBlockOutdatedMajority(int anRejectBlockOutdatedMajority)=0;\n+    virtual void setToCheckBlockUpgradeMajority(int anToCheckBlockUpgradeMajority)=0;\n+    virtual void setDefaultCheckMemPool(bool aDefaultCheckMemPool)=0;\n+    virtual void setAllowMinDifficultyBlocks(bool aAllowMinDifficultyBlocks)=0;\n+    virtual void setSkipProofOfWorkCheck(bool aSkipProofOfWorkCheck)=0;\n+};\n+\n+\n /**\n  * Return the currently selected parameters. This won't change after app startup\n  * outside of the unit tests.\n@@ -114,6 +134,9 @@ const CChainParams &Params();\n /** Return parameters for the given network. */\n CChainParams &Params(CBaseChainParams::Network network);\n \n+/** Get modifyable network parameters (UNITTEST only) */\n+CModifiableParams *ModifiableParams();\n+\n /** Sets the params returned by Params() to those for the given network. */\n void SelectParams(CBaseChainParams::Network network);\n "
      },
      {
        "sha": "e9d63197bd398cff251b3f34eb8297640e53eca5",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0fd00cb77d91ec9ac729bc4cf35ff7d9f676d8f/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0fd00cb77d91ec9ac729bc4cf35ff7d9f676d8f/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=f0fd00cb77d91ec9ac729bc4cf35ff7d9f676d8f",
        "patch": "@@ -57,6 +57,20 @@ class CBaseRegTestParams : public CBaseTestNetParams\n };\n static CBaseRegTestParams regTestParams;\n \n+//\n+// Unit test\n+//\n+class CBaseUnitTestParams : public CBaseMainParams\n+{\n+public:\n+    CBaseUnitTestParams()\n+    {\n+        networkID = CBaseChainParams::UNITTEST;\n+        strDataDir = \"unittest\";\n+    }\n+};\n+static CBaseUnitTestParams unitTestParams;\n+\n static CBaseChainParams* pCurrentBaseParams = 0;\n \n const CBaseChainParams& BaseParams()\n@@ -77,6 +91,9 @@ void SelectBaseParams(CBaseChainParams::Network network)\n     case CBaseChainParams::REGTEST:\n         pCurrentBaseParams = &regTestParams;\n         break;\n+    case CBaseChainParams::UNITTEST:\n+        pCurrentBaseParams = &unitTestParams;\n+        break;\n     default:\n         assert(false && \"Unimplemented network\");\n         return;"
      },
      {
        "sha": "cc154cf5012f1147c0c4351aefe0b166ee2f82de",
        "filename": "src/chainparamsbase.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0fd00cb77d91ec9ac729bc4cf35ff7d9f676d8f/src/chainparamsbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0fd00cb77d91ec9ac729bc4cf35ff7d9f676d8f/src/chainparamsbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.h?ref=f0fd00cb77d91ec9ac729bc4cf35ff7d9f676d8f",
        "patch": "@@ -19,6 +19,7 @@ class CBaseChainParams\n         MAIN,\n         TESTNET,\n         REGTEST,\n+        UNITTEST,\n \n         MAX_NETWORK_TYPES\n     };"
      },
      {
        "sha": "9a6bc05e63d916ece811fbbe90ebe2b2ab58bfb3",
        "filename": "src/checkpoints.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0fd00cb77d91ec9ac729bc4cf35ff7d9f676d8f/src/checkpoints.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0fd00cb77d91ec9ac729bc4cf35ff7d9f676d8f/src/checkpoints.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.cpp?ref=f0fd00cb77d91ec9ac729bc4cf35ff7d9f676d8f",
        "patch": "@@ -88,6 +88,8 @@ namespace Checkpoints {\n             return dataTestnet;\n         else if (Params().NetworkID() == CBaseChainParams::MAIN)\n             return data;\n+        else if (Params().NetworkID() == CBaseChainParams::UNITTEST) // UnitTest share the same checkpoints as MAIN\n+            return data;\n         else\n             return dataRegtest;\n     }"
      },
      {
        "sha": "55485c86ff557f0e54bfe1e2691ec90d0979bd96",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0fd00cb77d91ec9ac729bc4cf35ff7d9f676d8f/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0fd00cb77d91ec9ac729bc4cf35ff7d9f676d8f/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=f0fd00cb77d91ec9ac729bc4cf35ff7d9f676d8f",
        "patch": "@@ -2305,7 +2305,8 @@ bool AcceptBlockHeader(CBlockHeader& block, CValidationState& state, CBlockIndex\n         nHeight = pindexPrev->nHeight+1;\n \n         // Check proof of work\n-        if (block.nBits != GetNextWorkRequired(pindexPrev, &block))\n+        if ((!Params().SkipProofOfWorkCheck()) &&\n+           (block.nBits != GetNextWorkRequired(pindexPrev, &block)))\n             return state.DoS(100, error(\"AcceptBlock() : incorrect proof of work\"),\n                              REJECT_INVALID, \"bad-diffbits\");\n "
      },
      {
        "sha": "d50222849cc0c0bc4acfce88a93ecb737b66a462",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0fd00cb77d91ec9ac729bc4cf35ff7d9f676d8f/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0fd00cb77d91ec9ac729bc4cf35ff7d9f676d8f/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=f0fd00cb77d91ec9ac729bc4cf35ff7d9f676d8f",
        "patch": "@@ -81,6 +81,10 @@ bool CheckProofOfWork(uint256 hash, unsigned int nBits)\n     bool fNegative;\n     bool fOverflow;\n     uint256 bnTarget;\n+\n+    if (Params().SkipProofOfWorkCheck())\n+       return true;\n+\n     bnTarget.SetCompact(nBits, &fNegative, &fOverflow);\n \n     // Check range"
      },
      {
        "sha": "c298c805dae375a5c4e0c2edb35374cbaae7706b",
        "filename": "src/test/base58_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0fd00cb77d91ec9ac729bc4cf35ff7d9f676d8f/src/test/base58_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0fd00cb77d91ec9ac729bc4cf35ff7d9f676d8f/src/test/base58_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base58_tests.cpp?ref=f0fd00cb77d91ec9ac729bc4cf35ff7d9f676d8f",
        "patch": "@@ -175,7 +175,7 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_parse)\n             BOOST_CHECK_MESSAGE(!secret.IsValid(), \"IsValid pubkey as privkey:\" + strTest);\n         }\n     }\n-    SelectParams(CBaseChainParams::MAIN);\n+    SelectParams(CBaseChainParams::UNITTEST);\n }\n \n // Goal: check that generated keys match test vectors\n@@ -243,7 +243,7 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_gen)\n     CTxDestination nodest = CNoDestination();\n     BOOST_CHECK(!dummyAddr.Set(nodest));\n \n-    SelectParams(CBaseChainParams::MAIN);\n+    SelectParams(CBaseChainParams::UNITTEST);\n }\n \n // Goal: check that base58 parsing code is robust against a variety of corrupted data"
      },
      {
        "sha": "bad5c13ac2b67541fddfd0d602d00317b404a2bb",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0fd00cb77d91ec9ac729bc4cf35ff7d9f676d8f/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0fd00cb77d91ec9ac729bc4cf35ff7d9f676d8f/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=f0fd00cb77d91ec9ac729bc4cf35ff7d9f676d8f",
        "patch": "@@ -253,6 +253,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n \n     chainActive.Tip()->nHeight--;\n     SetMockTime(0);\n+    mempool.clear();\n \n     BOOST_FOREACH(CTransaction *tx, txFirst)\n         delete tx;"
      },
      {
        "sha": "6e5f0e3facc90bbfbfd8eb76cbbaf6db3dc807a1",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0fd00cb77d91ec9ac729bc4cf35ff7d9f676d8f/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0fd00cb77d91ec9ac729bc4cf35ff7d9f676d8f/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=f0fd00cb77d91ec9ac729bc4cf35ff7d9f676d8f",
        "patch": "@@ -31,7 +31,7 @@ struct TestingSetup {\n \n     TestingSetup() {\n         fPrintToDebugLog = false; // don't want to write to debug.log file\n-        SelectParams(CBaseChainParams::MAIN);\n+        SelectParams(CBaseChainParams::UNITTEST);\n         noui_connect();\n #ifdef ENABLE_WALLET\n         bitdb.MakeMock();"
      }
    ]
  },
  {
    "sha": "fbd36d8fb5245a5511b2db7a35270fb1250e21d5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYmQzNmQ4ZmI1MjQ1YTU1MTFiMmRiN2EzNTI3MGZiMTI1MGUyMWQ1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-29T11:13:47Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-02T11:54:26Z"
      },
      "message": "Avoid introducing a virtual into CChainParams\n\nTreat fSkipProofOfWorkCheck the same as other parameters.",
      "tree": {
        "sha": "dc789112db6935d255a88fd457bd2cb77e65f488",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dc789112db6935d255a88fd457bd2cb77e65f488"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fbd36d8fb5245a5511b2db7a35270fb1250e21d5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJULTzzAAoJEHSBCwEjRsmmjDYH/2i0c7Jv9YAXRv4htelWpS4X\ntglC82YPSJrhYx+MtioTR5bZjboffRlK0a4YI1UaHTy/8/7CcjvQ4HWhOERqcprk\nRYU24SaMFa9bDfJ6PTWZIXtwDCn9Lhgm1N9qtkXWvW5p2axMFvKTLK6DSmSYR4Lc\n7PP+E/PmZiPrXeyZduzS9/SbulxEc9TgFYMf2Lk6uV8Ql2LgUTUcV5HuX5XaGCbX\namZTGsM44Ys6lzRtXRw5UUFsASyHzy4erLCVUSUOO0LsS41oHUJLAh9jsQ8+m4na\nx8m16pUiqTuz1Y3J3IgEmLH2ncorm7YqLF1ouJ9LGj7TcWmggBgwsHGRwB03Vuc=\n=C127\n-----END PGP SIGNATURE-----",
        "payload": "tree dc789112db6935d255a88fd457bd2cb77e65f488\nparent f0fd00cb77d91ec9ac729bc4cf35ff7d9f676d8f\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1411989227 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1412250866 +0200\n\nAvoid introducing a virtual into CChainParams\n\nTreat fSkipProofOfWorkCheck the same as other parameters.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fbd36d8fb5245a5511b2db7a35270fb1250e21d5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fbd36d8fb5245a5511b2db7a35270fb1250e21d5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fbd36d8fb5245a5511b2db7a35270fb1250e21d5/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f0fd00cb77d91ec9ac729bc4cf35ff7d9f676d8f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0fd00cb77d91ec9ac729bc4cf35ff7d9f676d8f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f0fd00cb77d91ec9ac729bc4cf35ff7d9f676d8f"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 3,
      "deletions": 5
    },
    "files": [
      {
        "sha": "31c67715c87fd3c04828299e7fa0a7eae7e0a41b",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fbd36d8fb5245a5511b2db7a35270fb1250e21d5/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fbd36d8fb5245a5511b2db7a35270fb1250e21d5/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=fbd36d8fb5245a5511b2db7a35270fb1250e21d5",
        "patch": "@@ -115,6 +115,7 @@ class CMainParams : public CChainParams {\n         fAllowMinDifficultyBlocks = false;\n         fRequireStandard = true;\n         fMineBlocksOnDemand = false;\n+        fSkipProofOfWorkCheck = false;\n     }\n };\n static CMainParams mainParams;\n@@ -231,11 +232,7 @@ class CUnitTestParams : public CMainParams, public CModifiableParams {\n         fDefaultCheckMemPool = true;\n         fAllowMinDifficultyBlocks = false;\n         fMineBlocksOnDemand = true;\n-        fSkipProofOfWorkCheck = false;\n     }\n-    virtual bool SkipProofOfWorkCheck() const { return fSkipProofOfWorkCheck; }\n-protected:\n-    bool fSkipProofOfWorkCheck;\n public:\n     // Published setters to allow changing values in unit test cases\n     virtual void setSubsidyHalvingInterval(int anSubsidyHalvingInterval)  { nSubsidyHalvingInterval=anSubsidyHalvingInterval; }"
      },
      {
        "sha": "50441a89f3de1868e1657da836e8ad550819e9e1",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fbd36d8fb5245a5511b2db7a35270fb1250e21d5/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fbd36d8fb5245a5511b2db7a35270fb1250e21d5/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=fbd36d8fb5245a5511b2db7a35270fb1250e21d5",
        "patch": "@@ -62,7 +62,7 @@ class CChainParams\n     /* Allow mining of a min-difficulty block */\n     bool AllowMinDifficultyBlocks() const { return fAllowMinDifficultyBlocks; }\n     /* Skip proof-of-work check: allow mining of any difficulty block */\n-    virtual bool SkipProofOfWorkCheck() const { return false; }\n+    bool SkipProofOfWorkCheck() const { return fSkipProofOfWorkCheck; }\n     /* Make standard checks */\n     bool RequireStandard() const { return fRequireStandard; }\n     int64_t TargetTimespan() const { return nTargetTimespan; }\n@@ -105,6 +105,7 @@ class CChainParams\n     bool fAllowMinDifficultyBlocks;\n     bool fRequireStandard;\n     bool fMineBlocksOnDemand;\n+    bool fSkipProofOfWorkCheck;\n };\n \n /** Modifiable parameters interface is used by test cases to adapt the parameters in order"
      }
    ]
  }
]