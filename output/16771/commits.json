[
  {
    "sha": "46c835f46767634710e937167eaff08b8ac40ea6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NmM4MzVmNDY3Njc2MzQ3MTBlOTM3MTY3ZWFmZjA4YjhhYzQwZWE2",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2019-08-31T15:54:51Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2019-10-02T16:05:07Z"
      },
      "message": "Chainparams: Wallet: Decouple DefaultFallbackfee() from IsTestChain()",
      "tree": {
        "sha": "ed63604d18d46c558dbe8b9a19f86cc9f2d8b52a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ed63604d18d46c558dbe8b9a19f86cc9f2d8b52a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/46c835f46767634710e937167eaff08b8ac40ea6",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEIuvzCd8AbOwfprXViGbBjqHJRKIFAl2UyrsACgkQiGbBjqHJ\nRKIawxAAo6XRRzWJDnbWEKhoWsCYfBMvDai6yU6ebd32v2hVrN10k/V6YWDxa3ZE\n073KHG57Ws3rld0m+VEoQ5HG80Jbho+pQc8tPajNyJvAwWH0oUCLu5WQqlvdnIg8\nfb+dOy3ldUKY63jmw+wdQoKBQVC9izggHxBmrF78MLVeOR4CvSeYaj3bCnjjjjny\nJ4HKfGmTGe/IpXHotUMcT4fISbXnjD/8UVoPPd/EZQ8+AYeqXP8ITxW5uS/5aFjM\nBfmKFutWScp7XwJl+Amv5IkCn0ta5evR8hfgTry8EYhIdndxlcEcTY3nzgjxA1k/\n4W1BsErwb76Fk2/6kmWUN0Rj8DQW6Toz5aA0jUxrKiKc4KpzcIVKdisBiaBRd0N6\nm+NfEupIkKswpPaFxkJXlPCYQyge6d4Iq+eq3NNZ7otcZKWV37QXg04SoeyYP+3A\n5AF5Vaq40PCtnz1y/QqCOWgkANAjooIFzqQAjBVfFf09V32eXoLUs/u6m7gnBxgy\ngxwXRVR6dmBAG6Tp9zK+L4WPaCqEMu3STltnydQJLJPo+NwCteTzj1YHmASweAL2\nkjKtnVlbqBdI1AfbUk2TMLUJ/C2qnVweWG/SpO+ALsUyKRE04rXcS3DJfHfqSfCU\nwVt8QbrScCJuArYoDNNnA7eLlKDpt+EsVxcCQrbmRvP8CZj73lA=\n=Rra2\n-----END PGP SIGNATURE-----",
        "payload": "tree ed63604d18d46c558dbe8b9a19f86cc9f2d8b52a\nparent 884f7cc81b478b599ed8d43ebe80578ea9cdb279\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1567266891 +0200\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1570032307 +0200\n\nChainparams: Wallet: Decouple DefaultFallbackfee() from IsTestChain()\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46c835f46767634710e937167eaff08b8ac40ea6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/46c835f46767634710e937167eaff08b8ac40ea6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46c835f46767634710e937167eaff08b8ac40ea6/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "884f7cc81b478b599ed8d43ebe80578ea9cdb279",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/884f7cc81b478b599ed8d43ebe80578ea9cdb279",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/884f7cc81b478b599ed8d43ebe80578ea9cdb279"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 28,
      "deletions": 21
    },
    "files": [
      {
        "sha": "3bbc46147f82b90adbfe9108404484eb03fc5c15",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46c835f46767634710e937167eaff08b8ac40ea6/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46c835f46767634710e937167eaff08b8ac40ea6/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=46c835f46767634710e937167eaff08b8ac40ea6",
        "patch": "@@ -134,6 +134,7 @@ class CMainParams : public CChainParams {\n         fDefaultConsistencyChecks = false;\n         fRequireStandard = true;\n         m_is_test_chain = false;\n+        m_default_fallbackfee = \"0\";\n \n         checkpointData = {\n             {\n@@ -229,7 +230,7 @@ class CTestNetParams : public CChainParams {\n         fDefaultConsistencyChecks = false;\n         fRequireStandard = false;\n         m_is_test_chain = true;\n-\n+        m_default_fallbackfee = \"0.0002\";\n \n         checkpointData = {\n             {\n@@ -300,6 +301,7 @@ class CRegTestParams : public CChainParams {\n         fDefaultConsistencyChecks = true;\n         fRequireStandard = true;\n         m_is_test_chain = true;\n+        m_default_fallbackfee = \"0.0002\";\n \n         checkpointData = {\n             {"
      },
      {
        "sha": "675c870daebc209fd53cd461d48930ccc87f7415",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46c835f46767634710e937167eaff08b8ac40ea6/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46c835f46767634710e937167eaff08b8ac40ea6/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=46c835f46767634710e937167eaff08b8ac40ea6",
        "patch": "@@ -68,6 +68,8 @@ class CChainParams\n     bool RequireStandard() const { return fRequireStandard; }\n     /** If this chain is exclusively used for testing */\n     bool IsTestChain() const { return m_is_test_chain; }\n+    /** The default fallbackfee as a string (in BTC) to be parsed */\n+    std::string DefaultFallbackfee() const { return m_default_fallbackfee; }\n     uint64_t PruneAfterHeight() const { return nPruneAfterHeight; }\n     /** Minimum free space (in GB) needed for data directory */\n     uint64_t AssumedBlockchainSize() const { return m_assumed_blockchain_size; }\n@@ -102,6 +104,7 @@ class CChainParams\n     bool fDefaultConsistencyChecks;\n     bool fRequireStandard;\n     bool m_is_test_chain;\n+    std::string m_default_fallbackfee;\n     CCheckpointData checkpointData;\n     ChainTxData chainTxData;\n };"
      },
      {
        "sha": "fbc0a129a1e321672e2ce07c185c835f5f8cb87b",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46c835f46767634710e937167eaff08b8ac40ea6/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46c835f46767634710e937167eaff08b8ac40ea6/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=46c835f46767634710e937167eaff08b8ac40ea6",
        "patch": "@@ -3,6 +3,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <chainparams.h>\n #include <init.h>\n #include <interfaces/chain.h>\n #include <net.h>\n@@ -34,15 +35,19 @@ const WalletInitInterface& g_wallet_init_interface = WalletInit();\n \n void WalletInit::AddWalletOptions() const\n {\n+    const auto defaultChainParams = CreateChainParams(CBaseChainParams::MAIN);\n+    const auto testnetChainParams = CreateChainParams(CBaseChainParams::TESTNET);\n+    const auto regtestChainParams = CreateChainParams(CBaseChainParams::REGTEST);\n+\n     gArgs.AddArg(\"-addresstype\", strprintf(\"What type of addresses to use (\\\"legacy\\\", \\\"p2sh-segwit\\\", or \\\"bech32\\\", default: \\\"%s\\\")\", FormatOutputType(DEFAULT_ADDRESS_TYPE)), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n     gArgs.AddArg(\"-avoidpartialspends\", strprintf(\"Group outputs by address, selecting all or none, instead of selecting on a per-output basis. Privacy is improved as an address is only used once (unless someone sends to it after spending from it), but may result in slightly higher fees as suboptimal coin selection may result due to the added limitation (default: %u (always enabled for wallets with \\\"avoid_reuse\\\" enabled))\", DEFAULT_AVOIDPARTIALSPENDS), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n     gArgs.AddArg(\"-changetype\", \"What type of change to use (\\\"legacy\\\", \\\"p2sh-segwit\\\", or \\\"bech32\\\"). Default is same as -addresstype, except when -addresstype=p2sh-segwit a native segwit output is used when sending to a native segwit address)\", ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n     gArgs.AddArg(\"-disablewallet\", \"Do not load the wallet and disable wallet RPC calls\", ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n     gArgs.AddArg(\"-discardfee=<amt>\", strprintf(\"The fee rate (in %s/kB) that indicates your tolerance for discarding change by adding it to the fee (default: %s). \"\n                                                                 \"Note: An output is discarded if it is dust at this rate, but we will always discard up to the dust relay fee and a discard fee above that is limited by the fee estimate for the longest target\",\n                                                               CURRENCY_UNIT, FormatMoney(DEFAULT_DISCARD_FEE)), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n-    gArgs.AddArg(\"-fallbackfee=<amt>\", strprintf(\"A fee rate (in %s/kB) that will be used when fee estimation has insufficient data (default: %s)\",\n-                                                               CURRENCY_UNIT, FormatMoney(DEFAULT_FALLBACK_FEE)), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n+    gArgs.AddArg(\"-fallbackfee=<amt>\", strprintf(\"A fee rate (in %s/kB) that will be used when fee estimation has insufficient data. Set to 0 to entirely disable the fallbackfee feature. (default: %s, testnet: %s, regtest: %s)\",\n+        CURRENCY_UNIT, defaultChainParams->DefaultFallbackfee(), testnetChainParams->DefaultFallbackfee(), regtestChainParams->DefaultFallbackfee()), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n     gArgs.AddArg(\"-keypool=<n>\", strprintf(\"Set key pool size to <n> (default: %u)\", DEFAULT_KEYPOOL_SIZE), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n     gArgs.AddArg(\"-maxtxfee=<amt>\", strprintf(\"Maximum total fees (in %s) to use in a single wallet transaction; setting this too low may abort large transactions (default: %s)\",\n         CURRENCY_UNIT, FormatMoney(DEFAULT_TRANSACTION_MAXFEE)), ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);"
      },
      {
        "sha": "d7a9e12d96a7a46d51be0aa86f07f99e9a7b4294",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 13,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46c835f46767634710e937167eaff08b8ac40ea6/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46c835f46767634710e937167eaff08b8ac40ea6/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=46c835f46767634710e937167eaff08b8ac40ea6",
        "patch": "@@ -4420,20 +4420,18 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n         walletInstance->m_min_fee = CFeeRate(n);\n     }\n \n-    walletInstance->m_allow_fallback_fee = Params().IsTestChain();\n-    if (gArgs.IsArgSet(\"-fallbackfee\")) {\n-        CAmount nFeePerK = 0;\n-        if (!ParseMoney(gArgs.GetArg(\"-fallbackfee\", \"\"), nFeePerK)) {\n-            chain.initError(strprintf(_(\"Invalid amount for -fallbackfee=<amount>: '%s'\").translated, gArgs.GetArg(\"-fallbackfee\", \"\")));\n-            return nullptr;\n-        }\n-        if (nFeePerK > HIGH_TX_FEE_PER_KB) {\n-            chain.initWarning(AmountHighWarn(\"-fallbackfee\").translated + \" \" +\n-                              _(\"This is the transaction fee you may pay when fee estimates are not available.\").translated);\n-        }\n-        walletInstance->m_fallback_fee = CFeeRate(nFeePerK);\n-        walletInstance->m_allow_fallback_fee = nFeePerK != 0; //disable fallback fee in case value was set to 0, enable if non-null value\n+    CAmount fee_per_k = 0;\n+    if (!ParseMoney(gArgs.GetArg(\"-fallbackfee\", Params().DefaultFallbackfee()), fee_per_k)) {\n+        chain.initError(strprintf(_(\"Invalid amount for -fallbackfee=<amount>: '%s'\").translated, gArgs.GetArg(\"-fallbackfee\", Params().DefaultFallbackfee())));\n+        return nullptr;\n     }\n+    if (fee_per_k > HIGH_TX_FEE_PER_KB) {\n+        chain.initWarning(AmountHighWarn(\"-fallbackfee\").translated + \" \" +\n+                          _(\"This is the transaction fee you may pay when fee estimates are not available.\").translated);\n+    }\n+    walletInstance->m_fallback_fee = CFeeRate(fee_per_k);\n+    walletInstance->m_allow_fallback_fee = fee_per_k != 0; //disable fallback fee in case value was set to 0, enable if non-null value\n+\n     if (gArgs.IsArgSet(\"-discardfee\")) {\n         CAmount nFeePerK = 0;\n         if (!ParseMoney(gArgs.GetArg(\"-discardfee\", \"\"), nFeePerK)) {"
      },
      {
        "sha": "caee0ad35c261f76f9ae1e1d0c550d1aa1f3f6d7",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46c835f46767634710e937167eaff08b8ac40ea6/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46c835f46767634710e937167eaff08b8ac40ea6/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=46c835f46767634710e937167eaff08b8ac40ea6",
        "patch": "@@ -62,8 +62,6 @@ WalletCreationStatus CreateWallet(interfaces::Chain& chain, const SecureString&\n static const unsigned int DEFAULT_KEYPOOL_SIZE = 1000;\n //! -paytxfee default\n constexpr CAmount DEFAULT_PAY_TX_FEE = 0;\n-//! -fallbackfee default\n-static const CAmount DEFAULT_FALLBACK_FEE = 20000;\n //! -discardfee default\n static const CAmount DEFAULT_DISCARD_FEE = 10000;\n //! -mintxfee default\n@@ -1167,14 +1165,15 @@ class CWallet final : public FillableSigningProvider, private interfaces::Chain:\n     unsigned int m_confirm_target{DEFAULT_TX_CONFIRM_TARGET};\n     bool m_spend_zero_conf_change{DEFAULT_SPEND_ZEROCONF_CHANGE};\n     bool m_signal_rbf{DEFAULT_WALLET_RBF};\n-    bool m_allow_fallback_fee{true}; //!< will be defined via chainparams\n+    bool m_allow_fallback_fee{true}; //!< will be false if -fallbackfee=0\n     CFeeRate m_min_fee{DEFAULT_TRANSACTION_MINFEE}; //!< Override with -mintxfee\n     /**\n      * If fee estimation does not have enough data to provide estimates, use this fee instead.\n-     * Has no effect if not using fee estimation\n+     * Has no effect if not using fee estimation.\n+     * The default will be defined via chainparams.\n      * Override with -fallbackfee\n      */\n-    CFeeRate m_fallback_fee{DEFAULT_FALLBACK_FEE};\n+    CFeeRate m_fallback_fee{0};\n     CFeeRate m_discard_rate{DEFAULT_DISCARD_FEE};\n     OutputType m_default_address_type{DEFAULT_ADDRESS_TYPE};\n     OutputType m_default_change_type{DEFAULT_CHANGE_TYPE};"
      }
    ]
  }
]