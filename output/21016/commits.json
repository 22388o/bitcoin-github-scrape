[
  {
    "sha": "dc8be12510c2fd5a809d9a82d2c14b464b5e5a3f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYzhiZTEyNTEwYzJmZDVhODA5ZDlhODJkMmMxNGI0NjRiNWU1YTNm",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-01-27T07:04:34Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-01-29T07:39:44Z"
      },
      "message": "refactor: remove boost::thread_group usage",
      "tree": {
        "sha": "b255ae159d9080ec67c8898dae20d1f58a8b4fc7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b255ae159d9080ec67c8898dae20d1f58a8b4fc7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dc8be12510c2fd5a809d9a82d2c14b464b5e5a3f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmATu8EACgkQLuufXMCV\nJsG2qA//QGohj/KkBU5O4uBtZrS/73UiphfUnpltXXXGxCGskaO2ynl25nVbrvwk\nocAD//uZ9cbcIaLaOpqSG60drPsLMnRjV08mZ6L0BbVPtlxdAFFOygQSmUCnfAb3\nq7a7hkyerVQNWvNWsk6stU1baaSR3HEPWkMInLYEmdreO2QopRCjYBKtzyje/ss+\nQGZMoljtwZ1VRQ9hf6/5yGMcvgidmPIlUAtDJW9Cq2QYGCNEItzooAg9Z0fa9dS3\nqB9Q/oUyC+cWnsSRplz8VUOgaA25vmG99gMS57HJWhjvE3Jo5C0LZsBWu+nMeQZj\nKexg9Dyy2aB/ziS/sbuXY8a2G5I+gGKY+6V9SYbL5aN1G1mcVJWfxDfHQo1qng54\nUPiyXK5QuAubWF1RLZtPWa/JcH4ZPZfyD/Qu7VRU0aLwaKOTyBhT6YAj26lCxisL\njtNliZj7Ed/Hsl2vND/545uNVoXNFl/FjPYHxvrTNyOf6t4jOO8t1LG35FavSaif\nthR2XwTzM8g24dIkCrcKVbdGHy8ksJ4M/WRxYS+ccsucyroZU7hCaq21qezccJxl\nTyxv9VebYEDaNV9UpbmcCtswcarN19uTC6eEqnsWTn4jiLfPk55gSuEM+S8pudif\nFzm9m5QBQsyb2cmsAcuSVamZGIiItP8HqM5hsoUvEoMNvz01siU=\n=81Mi\n-----END PGP SIGNATURE-----",
        "payload": "tree b255ae159d9080ec67c8898dae20d1f58a8b4fc7\nparent c8b83510f42c6959c2844b8b81a6590dd3a34e65\nauthor fanquake <fanquake@gmail.com> 1611731074 +0800\ncommitter fanquake <fanquake@gmail.com> 1611905984 +0800\n\nrefactor: remove boost::thread_group usage\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc8be12510c2fd5a809d9a82d2c14b464b5e5a3f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dc8be12510c2fd5a809d9a82d2c14b464b5e5a3f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc8be12510c2fd5a809d9a82d2c14b464b5e5a3f/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c8b83510f42c6959c2844b8b81a6590dd3a34e65",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8b83510f42c6959c2844b8b81a6590dd3a34e65",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c8b83510f42c6959c2844b8b81a6590dd3a34e65"
      }
    ],
    "stats": {
      "total": 83,
      "additions": 44,
      "deletions": 39
    },
    "files": [
      {
        "sha": "f91121f156f973bb6d95733c62886bf7f9f2e1f9",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc8be12510c2fd5a809d9a82d2c14b464b5e5a3f/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc8be12510c2fd5a809d9a82d2c14b464b5e5a3f/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=dc8be12510c2fd5a809d9a82d2c14b464b5e5a3f",
        "patch": "@@ -9,6 +9,8 @@\n #include <logging.h>\n #include <serialize.h>\n \n+#include <cmath>\n+\n int CAddrInfo::GetTriedBucket(const uint256& nKey, const std::vector<bool> &asmap) const\n {\n     uint64_t hash1 = (CHashWriter(SER_GETHASH, 0) << nKey << GetKey()).GetCheapHash();"
      },
      {
        "sha": "fa41208a31de6b93fe5ef42c8feef1aadd86463f",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc8be12510c2fd5a809d9a82d2c14b464b5e5a3f/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc8be12510c2fd5a809d9a82d2c14b464b5e5a3f/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=dc8be12510c2fd5a809d9a82d2c14b464b5e5a3f",
        "patch": "@@ -21,6 +21,7 @@\n #include <util/url.h>\n \n #include <algorithm>\n+#include <cmath>\n #include <functional>\n #include <memory>\n #include <stdio.h>"
      },
      {
        "sha": "e01d16e1336dcebdbe8241815edb400e11be82c5",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 7,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc8be12510c2fd5a809d9a82d2c14b464b5e5a3f/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc8be12510c2fd5a809d9a82d2c14b464b5e5a3f/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=dc8be12510c2fd5a809d9a82d2c14b464b5e5a3f",
        "patch": "@@ -68,6 +68,8 @@\n #include <set>\n #include <stdint.h>\n #include <stdio.h>\n+#include <thread>\n+#include <vector>\n \n #ifndef WIN32\n #include <attributes.h>\n@@ -78,7 +80,6 @@\n \n #include <boost/algorithm/string/replace.hpp>\n #include <boost/signals2/signal.hpp>\n-#include <boost/thread/thread.hpp>\n \n #if ENABLE_ZMQ\n #include <zmq/zmqabstractnotifier.h>\n@@ -155,8 +156,6 @@ static std::unique_ptr<ECCVerifyHandle> globalVerifyHandle;\n \n static std::thread g_load_block;\n \n-static boost::thread_group threadGroup;\n-\n void Interrupt(NodeContext& node)\n {\n     InterruptHTTPServer();\n@@ -218,11 +217,9 @@ void Shutdown(NodeContext& node)\n     StopTorControl();\n \n     // After everything has been shut down, but before things get flushed, stop the\n-    // CScheduler/checkqueue, threadGroup and load block thread.\n+    // CScheduler/checkqueue, scheduler and load block thread.\n     if (node.scheduler) node.scheduler->stop();\n     if (g_load_block.joinable()) g_load_block.join();\n-    threadGroup.interrupt_all();\n-    threadGroup.join_all();\n     StopScriptCheckWorkerThreads();\n \n     // After the threads that potentially access these pointers have been stopped,\n@@ -1342,7 +1339,7 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n     node.scheduler = MakeUnique<CScheduler>();\n \n     // Start the lightweight task scheduler thread\n-    threadGroup.create_thread([&] { TraceThread(\"scheduler\", [&] { node.scheduler->serviceQueue(); }); });\n+    node.scheduler->m_service_thread = std::thread([&] { TraceThread(\"scheduler\", [&] { node.scheduler->serviceQueue(); }); });\n \n     // Gather some entropy once per minute.\n     node.scheduler->scheduleEvery([]{"
      },
      {
        "sha": "9eec8c0fa0595d32e5f8d627f8952afcca9e6cca",
        "filename": "src/scheduler.h",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc8be12510c2fd5a809d9a82d2c14b464b5e5a3f/src/scheduler.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc8be12510c2fd5a809d9a82d2c14b464b5e5a3f/src/scheduler.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scheduler.h?ref=dc8be12510c2fd5a809d9a82d2c14b464b5e5a3f",
        "patch": "@@ -9,6 +9,7 @@\n #include <functional>\n #include <list>\n #include <map>\n+#include <thread>\n \n #include <sync.h>\n \n@@ -35,6 +36,8 @@ class CScheduler\n     CScheduler();\n     ~CScheduler();\n \n+    std::thread m_service_thread;\n+\n     typedef std::function<void()> Function;\n \n     /** Call func at/after time t */\n@@ -62,8 +65,7 @@ class CScheduler\n     void MockForward(std::chrono::seconds delta_seconds);\n \n     /**\n-     * Services the queue 'forever'. Should be run in a thread,\n-     * and interrupted using boost::interrupt_thread\n+     * Services the queue 'forever'. Should be run in a thread.\n      */\n     void serviceQueue();\n \n@@ -72,12 +74,14 @@ class CScheduler\n     {\n         WITH_LOCK(newTaskMutex, stopRequested = true);\n         newTaskScheduled.notify_all();\n+        if (m_service_thread.joinable()) m_service_thread.join();\n     }\n     /** Tell any threads running serviceQueue to stop when there is no work left to be done */\n     void StopWhenDrained()\n     {\n         WITH_LOCK(newTaskMutex, stopWhenEmpty = true);\n         newTaskScheduled.notify_all();\n+        if (m_service_thread.joinable()) m_service_thread.join();\n     }\n \n     /**"
      },
      {
        "sha": "cf47d37e709bee381420faef573d2a6bcf70d5a7",
        "filename": "src/script/sigcache.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc8be12510c2fd5a809d9a82d2c14b464b5e5a3f/src/script/sigcache.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc8be12510c2fd5a809d9a82d2c14b464b5e5a3f/src/script/sigcache.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sigcache.cpp?ref=dc8be12510c2fd5a809d9a82d2c14b464b5e5a3f",
        "patch": "@@ -11,6 +11,8 @@\n #include <util/system.h>\n \n #include <cuckoocache.h>\n+\n+#include <boost/thread/lock_types.hpp>\n #include <boost/thread/shared_mutex.hpp>\n \n namespace {"
      },
      {
        "sha": "21921375b3eaeebbdd86e98550bdda14f87be727",
        "filename": "src/test/checkqueue_tests.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 7,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc8be12510c2fd5a809d9a82d2c14b464b5e5a3f/src/test/checkqueue_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc8be12510c2fd5a809d9a82d2c14b464b5e5a3f/src/test/checkqueue_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/checkqueue_tests.cpp?ref=dc8be12510c2fd5a809d9a82d2c14b464b5e5a3f",
        "patch": "@@ -10,7 +10,6 @@\n #include <util/time.h>\n \n #include <boost/test/unit_test.hpp>\n-#include <boost/thread/thread.hpp>\n \n #include <atomic>\n #include <condition_variable>\n@@ -363,11 +362,11 @@ BOOST_AUTO_TEST_CASE(test_CheckQueueControl_Locks)\n {\n     auto queue = MakeUnique<Standard_Queue>(QUEUE_BATCH_SIZE);\n     {\n-        boost::thread_group tg;\n+        std::vector<std::thread> tg;\n         std::atomic<int> nThreads {0};\n         std::atomic<int> fails {0};\n         for (size_t i = 0; i < 3; ++i) {\n-            tg.create_thread(\n+            tg.emplace_back(\n                     [&]{\n                     CCheckQueueControl<FakeCheck> control(queue.get());\n                     // While sleeping, no other thread should execute to this point\n@@ -376,11 +375,13 @@ BOOST_AUTO_TEST_CASE(test_CheckQueueControl_Locks)\n                     fails += observed  != nThreads;\n                     });\n         }\n-        tg.join_all();\n+        for (auto& thread: tg) {\n+            if (thread.joinable()) thread.join();\n+        }\n         BOOST_REQUIRE_EQUAL(fails, 0);\n     }\n     {\n-        boost::thread_group tg;\n+        std::vector<std::thread> tg;\n         std::mutex m;\n         std::condition_variable cv;\n         bool has_lock{false};\n@@ -389,7 +390,7 @@ BOOST_AUTO_TEST_CASE(test_CheckQueueControl_Locks)\n         bool done_ack{false};\n         {\n             std::unique_lock<std::mutex> l(m);\n-            tg.create_thread([&]{\n+            tg.emplace_back([&]{\n                     CCheckQueueControl<FakeCheck> control(queue.get());\n                     std::unique_lock<std::mutex> ll(m);\n                     has_lock = true;\n@@ -415,7 +416,9 @@ BOOST_AUTO_TEST_CASE(test_CheckQueueControl_Locks)\n             cv.notify_one();\n             BOOST_REQUIRE(!fails);\n         }\n-        tg.join_all();\n+        for (auto& thread: tg) {\n+            if (thread.joinable()) thread.join();\n+        }\n     }\n }\n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "75c7e47e641a06e77f92359d09be9d040cf83846",
        "filename": "src/test/cuckoocache_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc8be12510c2fd5a809d9a82d2c14b464b5e5a3f/src/test/cuckoocache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc8be12510c2fd5a809d9a82d2c14b464b5e5a3f/src/test/cuckoocache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/cuckoocache_tests.cpp?ref=dc8be12510c2fd5a809d9a82d2c14b464b5e5a3f",
        "patch": "@@ -2,6 +2,8 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n #include <boost/test/unit_test.hpp>\n+#include <boost/thread/lock_types.hpp>\n+#include <boost/thread/shared_mutex.hpp>\n #include <cuckoocache.h>\n #include <deque>\n #include <random.h>"
      },
      {
        "sha": "d57c000b920153da77b0c47b4f864d7ac10fa884",
        "filename": "src/test/scheduler_tests.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 8,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc8be12510c2fd5a809d9a82d2c14b464b5e5a3f/src/test/scheduler_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc8be12510c2fd5a809d9a82d2c14b464b5e5a3f/src/test/scheduler_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/scheduler_tests.cpp?ref=dc8be12510c2fd5a809d9a82d2c14b464b5e5a3f",
        "patch": "@@ -7,10 +7,11 @@\n #include <util/time.h>\n \n #include <boost/test/unit_test.hpp>\n-#include <boost/thread/thread.hpp>\n \n #include <functional>\n #include <mutex>\n+#include <thread>\n+#include <vector>\n \n BOOST_AUTO_TEST_SUITE(scheduler_tests)\n \n@@ -69,16 +70,16 @@ BOOST_AUTO_TEST_CASE(manythreads)\n     BOOST_CHECK(last > now);\n \n     // As soon as these are created they will start running and servicing the queue\n-    boost::thread_group microThreads;\n+    std::vector<std::thread> microThreads;\n     for (int i = 0; i < 5; i++)\n-        microThreads.create_thread(std::bind(&CScheduler::serviceQueue, &microTasks));\n+        microThreads.emplace_back(std::bind(&CScheduler::serviceQueue, &microTasks));\n \n     UninterruptibleSleep(std::chrono::microseconds{600});\n     now = std::chrono::system_clock::now();\n \n     // More threads and more tasks:\n     for (int i = 0; i < 5; i++)\n-        microThreads.create_thread(std::bind(&CScheduler::serviceQueue, &microTasks));\n+        microThreads.emplace_back(std::bind(&CScheduler::serviceQueue, &microTasks));\n     for (int i = 0; i < 100; i++) {\n         std::chrono::system_clock::time_point t = now + std::chrono::microseconds(randomMsec(rng));\n         std::chrono::system_clock::time_point tReschedule = now + std::chrono::microseconds(500 + randomMsec(rng));\n@@ -91,7 +92,10 @@ BOOST_AUTO_TEST_CASE(manythreads)\n \n     // Drain the task queue then exit threads\n     microTasks.StopWhenDrained();\n-    microThreads.join_all(); // ... wait until all the threads are done\n+    // wait until all the threads are done\n+    for (auto& thread: microThreads) {\n+        if (thread.joinable()) thread.join();\n+    }\n \n     int counterSum = 0;\n     for (int i = 0; i < 10; i++) {\n@@ -131,9 +135,9 @@ BOOST_AUTO_TEST_CASE(singlethreadedscheduler_ordered)\n     // if the queues only permit execution of one task at once then\n     // the extra threads should effectively be doing nothing\n     // if they don't we'll get out of order behaviour\n-    boost::thread_group threads;\n+    std::vector<std::thread> threads;\n     for (int i = 0; i < 5; ++i) {\n-        threads.create_thread(std::bind(&CScheduler::serviceQueue, &scheduler));\n+        threads.emplace_back(std::bind(&CScheduler::serviceQueue, &scheduler));\n     }\n \n     // these are not atomic, if SinglethreadedSchedulerClient prevents\n@@ -157,7 +161,9 @@ BOOST_AUTO_TEST_CASE(singlethreadedscheduler_ordered)\n \n     // finish up\n     scheduler.StopWhenDrained();\n-    threads.join_all();\n+    for (auto& thread: threads) {\n+        if (thread.joinable()) thread.join();\n+    }\n \n     BOOST_CHECK_EQUAL(counter1, 100);\n     BOOST_CHECK_EQUAL(counter2, 100);"
      },
      {
        "sha": "d99d63aac6d697e5c14fa2272677e6e34e4c27eb",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc8be12510c2fd5a809d9a82d2c14b464b5e5a3f/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc8be12510c2fd5a809d9a82d2c14b464b5e5a3f/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=dc8be12510c2fd5a809d9a82d2c14b464b5e5a3f",
        "patch": "@@ -131,7 +131,7 @@ ChainTestingSetup::ChainTestingSetup(const std::string& chainName, const std::ve\n     // We have to run a scheduler thread to prevent ActivateBestChain\n     // from blocking due to queue overrun.\n     m_node.scheduler = MakeUnique<CScheduler>();\n-    threadGroup.create_thread([&] { TraceThread(\"scheduler\", [&] { m_node.scheduler->serviceQueue(); }); });\n+    m_node.scheduler->m_service_thread = std::thread([&] { TraceThread(\"scheduler\", [&] { m_node.scheduler->serviceQueue(); }); });\n     GetMainSignals().RegisterBackgroundSignalScheduler(*m_node.scheduler);\n \n     pblocktree.reset(new CBlockTreeDB(1 << 20, true));\n@@ -150,8 +150,6 @@ ChainTestingSetup::ChainTestingSetup(const std::string& chainName, const std::ve\n ChainTestingSetup::~ChainTestingSetup()\n {\n     if (m_node.scheduler) m_node.scheduler->stop();\n-    threadGroup.interrupt_all();\n-    threadGroup.join_all();\n     StopScriptCheckWorkerThreads();\n     GetMainSignals().FlushBackgroundCallbacks();\n     GetMainSignals().UnregisterBackgroundSignalScheduler();"
      },
      {
        "sha": "331c1235cb5fd7bf713a39896d407693a22a4043",
        "filename": "src/test/util/setup_common.h",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc8be12510c2fd5a809d9a82d2c14b464b5e5a3f/src/test/util/setup_common.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc8be12510c2fd5a809d9a82d2c14b464b5e5a3f/src/test/util/setup_common.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.h?ref=dc8be12510c2fd5a809d9a82d2c14b464b5e5a3f",
        "patch": "@@ -17,8 +17,7 @@\n #include <util/string.h>\n \n #include <type_traits>\n-\n-#include <boost/thread/thread.hpp>\n+#include <vector>\n \n /** This is connected to the logger. Can be used to redirect logs to any other log */\n extern const std::function<void(const std::string&)> G_TEST_LOG_FUN;\n@@ -88,7 +87,6 @@ struct BasicTestingSetup {\n  * initialization behaviour.\n  */\n struct ChainTestingSetup : public BasicTestingSetup {\n-    boost::thread_group threadGroup;\n \n     explicit ChainTestingSetup(const std::string& chainName = CBaseChainParams::MAIN, const std::vector<const char*>& extra_args = {});\n     ~ChainTestingSetup();"
      },
      {
        "sha": "d06c30bfa745a1043f8599dddbf587380daa4a69",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc8be12510c2fd5a809d9a82d2c14b464b5e5a3f/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc8be12510c2fd5a809d9a82d2c14b464b5e5a3f/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=dc8be12510c2fd5a809d9a82d2c14b464b5e5a3f",
        "patch": "@@ -35,8 +35,6 @@\n #include <utility>\n #include <vector>\n \n-#include <boost/thread/condition_variable.hpp> // for boost::thread_interrupted\n-\n class UniValue;\n \n // Application startup time (used for uptime calculation)\n@@ -450,11 +448,6 @@ template <typename Callable> void TraceThread(const char* name,  Callable func)\n         func();\n         LogPrintf(\"%s thread exit\\n\", name);\n     }\n-    catch (const boost::thread_interrupted&)\n-    {\n-        LogPrintf(\"%s thread interrupt\\n\", name);\n-        throw;\n-    }\n     catch (const std::exception& e) {\n         PrintExceptionContinue(&e, name);\n         throw;"
      },
      {
        "sha": "6623f9ce4c212f58ad22ca46a33f51b868a6ff23",
        "filename": "test/lint/lint-includes.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc8be12510c2fd5a809d9a82d2c14b464b5e5a3f/test/lint/lint-includes.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc8be12510c2fd5a809d9a82d2c14b464b5e5a3f/test/lint/lint-includes.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-includes.sh?ref=dc8be12510c2fd5a809d9a82d2c14b464b5e5a3f",
        "patch": "@@ -67,9 +67,8 @@ EXPECTED_BOOST_INCLUDES=(\n     boost/signals2/optional_last_value.hpp\n     boost/signals2/signal.hpp\n     boost/test/unit_test.hpp\n-    boost/thread/condition_variable.hpp\n+    boost/thread/lock_types.hpp\n     boost/thread/shared_mutex.hpp\n-    boost/thread/thread.hpp\n )\n \n for BOOST_INCLUDE in $(git grep '^#include <boost/' -- \"*.cpp\" \"*.h\" | cut -f2 -d: | cut -f2 -d'<' | cut -f1 -d'>' | sort -u); do"
      }
    ]
  }
]