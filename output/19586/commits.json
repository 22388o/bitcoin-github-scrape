[
  {
    "sha": "95ea738e8cb3fb516d28516864eb3250834e4fe3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NWVhNzM4ZThjYjNmYjUxNmQyODUxNjg2NGViMzI1MDgzNGU0ZmUz",
    "commit": {
      "author": {
        "name": "Sanjay K",
        "email": "sanjaykdragon@gmail.com",
        "date": "2020-07-24T21:18:55Z"
      },
      "committer": {
        "name": "Sanjay K",
        "email": "sanjaykdragon@gmail.com",
        "date": "2020-07-24T21:18:55Z"
      },
      "message": "REFACTOR: moved from percent format to proper format for consistency",
      "tree": {
        "sha": "bf625921830b22e9f9f2b3516ed7bb5d829eede4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bf625921830b22e9f9f2b3516ed7bb5d829eede4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/95ea738e8cb3fb516d28516864eb3250834e4fe3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95ea738e8cb3fb516d28516864eb3250834e4fe3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/95ea738e8cb3fb516d28516864eb3250834e4fe3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95ea738e8cb3fb516d28516864eb3250834e4fe3/comments",
    "author": {
      "login": "sanjaykdragon",
      "id": 10261698,
      "node_id": "MDQ6VXNlcjEwMjYxNjk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/10261698?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sanjaykdragon",
      "html_url": "https://github.com/sanjaykdragon",
      "followers_url": "https://api.github.com/users/sanjaykdragon/followers",
      "following_url": "https://api.github.com/users/sanjaykdragon/following{/other_user}",
      "gists_url": "https://api.github.com/users/sanjaykdragon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sanjaykdragon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sanjaykdragon/subscriptions",
      "organizations_url": "https://api.github.com/users/sanjaykdragon/orgs",
      "repos_url": "https://api.github.com/users/sanjaykdragon/repos",
      "events_url": "https://api.github.com/users/sanjaykdragon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sanjaykdragon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sanjaykdragon",
      "id": 10261698,
      "node_id": "MDQ6VXNlcjEwMjYxNjk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/10261698?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sanjaykdragon",
      "html_url": "https://github.com/sanjaykdragon",
      "followers_url": "https://api.github.com/users/sanjaykdragon/followers",
      "following_url": "https://api.github.com/users/sanjaykdragon/following{/other_user}",
      "gists_url": "https://api.github.com/users/sanjaykdragon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sanjaykdragon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sanjaykdragon/subscriptions",
      "organizations_url": "https://api.github.com/users/sanjaykdragon/orgs",
      "repos_url": "https://api.github.com/users/sanjaykdragon/repos",
      "events_url": "https://api.github.com/users/sanjaykdragon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sanjaykdragon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "40a04814d130dfc9131af3f568eb44533e2bcbfc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/40a04814d130dfc9131af3f568eb44533e2bcbfc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/40a04814d130dfc9131af3f568eb44533e2bcbfc"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 16,
      "deletions": 16
    },
    "files": [
      {
        "sha": "3885c6b7edb8faced6b67c8d9b8a310bd65fffb7",
        "filename": "test/lint/check-rpc-mappings.py",
        "status": "modified",
        "additions": 6,
        "deletions": 7,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/95ea738e8cb3fb516d28516864eb3250834e4fe3/test/lint/check-rpc-mappings.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/95ea738e8cb3fb516d28516864eb3250834e4fe3/test/lint/check-rpc-mappings.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/check-rpc-mappings.py?ref=95ea738e8cb3fb516d28516864eb3250834e4fe3",
        "patch": "@@ -55,7 +55,7 @@ def process_commands(fname):\n                     in_rpcs = False\n                 elif '{' in line and '\"' in line:\n                     m = re.search(r'{ *(\"[^\"]*\"), *(\"[^\"]*\"), *&([^,]*), *{([^}]*)} *},', line)\n-                    assert m, 'No match to table expression: %s' % line\n+                    assert m, 'No match to table expression: {}'.format(line)\n                     name = parse_string(m.group(2))\n                     args_str = m.group(4).strip()\n                     if args_str:\n@@ -81,7 +81,7 @@ def process_mapping(fname):\n                     in_rpcs = False\n                 elif '{' in line and '\"' in line:\n                     m = re.search(r'{ *(\"[^\"]*\"), *([0-9]+) *, *(\"[^\"]*\") *},', line)\n-                    assert m, 'No match to table expression: %s' % line\n+                    assert m, 'No match to table expression: {}'.format(line)\n                     name = parse_string(m.group(1))\n                     idx = int(m.group(2))\n                     argname = parse_string(m.group(3))\n@@ -117,11 +117,11 @@ def main():\n         try:\n             rargnames = cmds_by_name[cmdname].args[argidx].names\n         except IndexError:\n-            print('ERROR: %s argument %i (named %s in vRPCConvertParams) is not defined in dispatch table' % (cmdname, argidx, argname))\n+            print('ERROR: {} argument {} (named {} in vRPCConvertParams) is not defined in dispatch table'.format(cmdname, argidx, argname))\n             errors += 1\n             continue\n         if argname not in rargnames:\n-            print('ERROR: %s argument %i is named %s in vRPCConvertParams but %s in dispatch table' % (cmdname, argidx, argname, rargnames), file=sys.stderr)\n+            print('ERROR: {} argument {} is named {} in vRPCConvertParams but {} in dispatch table'.format(cmdname, argidx, argname, rargnames), file=sys.stderr)\n             errors += 1\n \n     # Check for conflicts in vRPCConvertParams conversion\n@@ -132,7 +132,7 @@ def main():\n         for arg in cmd.args:\n             convert = [((cmd.name, arg.idx, argname) in mapping) for argname in arg.names]\n             if any(convert) != all(convert):\n-                print('ERROR: %s argument %s has conflicts in vRPCConvertParams conversion specifier %s' % (cmd.name, arg.names, convert))\n+                print('ERROR: {} argument {} has conflicts in vRPCConvertParams conversion specifier {}'.format(cmd.name, arg.names, convert))\n                 errors += 1\n             arg.convert = all(convert)\n \n@@ -152,8 +152,7 @@ def main():\n             if argname in IGNORE_DUMMY_ARGS:\n                 # these are testing or dummy, don't warn for them\n                 continue\n-            print('WARNING: conversion mismatch for argument named %s (%s)' %\n-                  (argname, list(zip(all_methods_by_argname[argname], converts_by_argname[argname]))))\n+            print('WARNING: conversion mismatch for argument named {} ({})'.format(argname, list(zip(all_methods_by_argname[argname], converts_by_argname[argname]))))\n \n     sys.exit(errors > 0)\n "
      },
      {
        "sha": "0d374fe3e10a84e53c8168189ad80972c8dd14eb",
        "filename": "test/util/bitcoin-util-test.py",
        "status": "modified",
        "additions": 10,
        "deletions": 9,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/95ea738e8cb3fb516d28516864eb3250834e4fe3/test/util/bitcoin-util-test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/95ea738e8cb3fb516d28516864eb3250834e4fe3/test/util/bitcoin-util-test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/util/bitcoin-util-test.py?ref=95ea738e8cb3fb516d28516864eb3250834e4fe3",
        "patch": "@@ -100,15 +100,15 @@ def bctest(testDir, testObj, buildenv):\n             logging.error(\"Output data missing for \" + outputFn)\n             raise Exception\n         if not outputType:\n-            logging.error(\"Output file %s does not have a file extension\" % outputFn)\n+            logging.error(\"Output file {} does not have a file extension\".format(outputFn))\n             raise Exception\n \n     # Run the test\n     proc = subprocess.Popen(execrun, stdin=stdinCfg, stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)\n     try:\n         outs = proc.communicate(input=inputData)\n     except OSError:\n-        logging.error(\"OSError, Failed to execute \" + execprog)\n+        logging.error(\"OSError, Failed to execute {}\".format(execprog))\n         raise\n \n     if outputData:\n@@ -117,20 +117,20 @@ def bctest(testDir, testObj, buildenv):\n         try:\n             a_parsed = parse_output(outs[0], outputType)\n         except Exception as e:\n-            logging.error('Error parsing command output as %s: %s' % (outputType, e))\n+            logging.error('Error parsing command output as {}: {}'.format(outputType, e))\n             raise\n         try:\n             b_parsed = parse_output(outputData, outputType)\n         except Exception as e:\n-            logging.error('Error parsing expected output %s as %s: %s' % (outputFn, outputType, e))\n+            logging.error('Error parsing expected output {} as {}: {}'.format(outputFn, outputType, e))\n             raise\n         # Compare data\n         if a_parsed != b_parsed:\n-            logging.error(\"Output data mismatch for \" + outputFn + \" (format \" + outputType + \")\")\n+            logging.error(\"Output data mismatch for {0} (format {0})\".format(outputType))\n             data_mismatch = True\n         # Compare formatting\n         if outs[0] != outputData:\n-            error_message = \"Output formatting mismatch for \" + outputFn + \":\\n\"\n+            error_message = \"Output formatting mismatch for {}:\\n\".format(outputFn)\n             error_message += \"\".join(difflib.context_diff(outputData.splitlines(True),\n                                                           outs[0].splitlines(True),\n                                                           fromfile=outputFn,\n@@ -145,7 +145,7 @@ def bctest(testDir, testObj, buildenv):\n     if \"return_code\" in testObj:\n         wantRC = testObj['return_code']\n     if proc.returncode != wantRC:\n-        logging.error(\"Return code mismatch for \" + outputFn)\n+        logging.error(\"Return code mismatch for {}\".format(outputFn))\n         raise Exception\n \n     if \"error_txt\" in testObj:\n@@ -157,7 +157,8 @@ def bctest(testDir, testObj, buildenv):\n         # linux through wine. Just assert that the expected error text appears\n         # somewhere in stderr.\n         if want_error not in outs[1]:\n-            logging.error(\"Error mismatch:\\n\" + \"Expected: \" + want_error + \"\\nReceived: \" + outs[1].rstrip())\n+            recv_result = outs[1].rstrip()\n+            logging.error(\"Error mismatch:\\n\" + \"Expected: {}\\nReceived: {}\".format(want_error, recv_result))\n             raise Exception\n \n def parse_output(a, fmt):\n@@ -169,7 +170,7 @@ def parse_output(a, fmt):\n     elif fmt == 'hex':  # hex: parse and compare binary data\n         return binascii.a2b_hex(a.strip())\n     else:\n-        raise NotImplementedError(\"Don't know how to compare %s\" % fmt)\n+        raise NotImplementedError(\"Don't know how to compare {}\".format(fmt))\n \n if __name__ == '__main__':\n     main()"
      }
    ]
  }
]