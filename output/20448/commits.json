[
  {
    "sha": "89bdad5b25ae4ac03a486f729a5b58ae6f21946d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4OWJkYWQ1YjI1YWU0YWMwM2E0ODZmNzI5YTViNThhZTZmMjE5NDZk",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-11-21T18:57:22Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-11-24T05:33:18Z"
      },
      "message": "RPC/Wallet: unloadwallet: Allow specifying wallet_name param matching RPC endpoint",
      "tree": {
        "sha": "eba42cc542d1d060d50013936f0d60930967ef32",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eba42cc542d1d060d50013936f0d60930967ef32"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/89bdad5b25ae4ac03a486f729a5b58ae6f21946d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89bdad5b25ae4ac03a486f729a5b58ae6f21946d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/89bdad5b25ae4ac03a486f729a5b58ae6f21946d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89bdad5b25ae4ac03a486f729a5b58ae6f21946d/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b1f59d55d920d2b35269b474762f94fec87bfb16",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b1f59d55d920d2b35269b474762f94fec87bfb16",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b1f59d55d920d2b35269b474762f94fec87bfb16"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 10,
      "deletions": 5
    },
    "files": [
      {
        "sha": "c35c26a2bb7f0171edb3f2eb1dca3cad2c6dbd0e",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/89bdad5b25ae4ac03a486f729a5b58ae6f21946d/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/89bdad5b25ae4ac03a486f729a5b58ae6f21946d/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=89bdad5b25ae4ac03a486f729a5b58ae6f21946d",
        "patch": "@@ -2792,7 +2792,7 @@ static RPCHelpMan unloadwallet()\n                 \"Unloads the wallet referenced by the request endpoint otherwise unloads the wallet specified in the argument.\\n\"\n                 \"Specifying the wallet name on a wallet endpoint is invalid.\",\n                 {\n-                    {\"wallet_name\", RPCArg::Type::STR, /* default */ \"the wallet name from the RPC endpoint\", \"The name of the wallet to unload. Must be provided in the RPC endpoint or this parameter (but not both).\"},\n+                    {\"wallet_name\", RPCArg::Type::STR, /* default */ \"the wallet name from the RPC endpoint\", \"The name of the wallet to unload. If provided both here and in the RPC endpoint, the two must be identical.\"},\n                     {\"load_on_startup\", RPCArg::Type::BOOL, /* default */ \"null\", \"Save wallet name to persistent settings and load on startup. True to add wallet to startup list, false to remove, null to leave unchanged.\"},\n                 },\n                 RPCResult{RPCResult::Type::OBJ, \"\", \"\", {\n@@ -2806,8 +2806,8 @@ static RPCHelpMan unloadwallet()\n {\n     std::string wallet_name;\n     if (GetWalletNameFromJSONRPCRequest(request, wallet_name)) {\n-        if (!request.params[0].isNull()) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Both the RPC endpoint wallet and wallet_name parameter were provided (only one allowed)\");\n+        if (!(request.params[0].isNull() || request.params[0].get_str() == wallet_name)) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"RPC endpoint wallet and wallet_name parameter specify different wallets\");\n         }\n     } else {\n         wallet_name = request.params[0].get_str();"
      },
      {
        "sha": "eeaa607db715be6a0bb86e4f8aef758644441f46",
        "filename": "test/functional/wallet_multiwallet.py",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/89bdad5b25ae4ac03a486f729a5b58ae6f21946d/test/functional/wallet_multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/89bdad5b25ae4ac03a486f729a5b58ae6f21946d/test/functional/wallet_multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_multiwallet.py?ref=89bdad5b25ae4ac03a486f729a5b58ae6f21946d",
        "patch": "@@ -355,13 +355,18 @@ def wallet_file(name):\n         assert_raises_rpc_error(-1, \"JSON value is not a string as expected\", self.nodes[0].unloadwallet)\n         assert_raises_rpc_error(-18, \"Requested wallet does not exist or is not loaded\", self.nodes[0].unloadwallet, \"dummy\")\n         assert_raises_rpc_error(-18, \"Requested wallet does not exist or is not loaded\", node.get_wallet_rpc(\"dummy\").unloadwallet)\n-        assert_raises_rpc_error(-8, \"Both the RPC endpoint wallet and wallet_name parameter were provided (only one allowed)\", w1.unloadwallet, \"w2\"),\n-        assert_raises_rpc_error(-8, \"Both the RPC endpoint wallet and wallet_name parameter were provided (only one allowed)\", w1.unloadwallet, \"w1\"),\n+        assert_raises_rpc_error(-8, \"RPC endpoint wallet and wallet_name parameter specify different wallets\", w1.unloadwallet, \"w2\"),\n \n         # Successfully unload the specified wallet name\n         self.nodes[0].unloadwallet(\"w1\")\n         assert 'w1' not in self.nodes[0].listwallets()\n \n+        # Unload w1 again, this time providing the wallet name twice\n+        self.nodes[0].loadwallet(\"w1\")\n+        assert 'w1' in self.nodes[0].listwallets()\n+        w1.unloadwallet(\"w1\")\n+        assert 'w1' not in self.nodes[0].listwallets()\n+\n         # Successfully unload the wallet referenced by the request endpoint\n         # Also ensure unload works during walletpassphrase timeout\n         w2.encryptwallet('test')"
      }
    ]
  }
]