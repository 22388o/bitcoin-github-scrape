laanwj,2014-05-28T07:41:26Z,"This change is not correct.\nVC is correct that the vector subscript is out of range, but in this case that is what we want, because we're trying to serialize the entire array.\n",https://github.com/bitcoin/bitcoin/pull/4239#issuecomment-44374685,44374685,
BitcoinPullTester,2014-05-28T07:57:12Z,"Automatic sanity-testing: FAILED BUILD/TEST, see http://jenkins.bluematt.me/pull-tester/34cb1fc5d6c7293b5c135b85c3dd3668e05ac2b8 for binaries and test log.\n\nThis could happen for one of several reasons:\n1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (please tweak those patches in qa/pull-tes",https://github.com/bitcoin/bitcoin/pull/4239#issuecomment-44375878,44375878,
haowang1013,2014-05-28T09:35:34Z,Shouldn't the correct fix be to still use &compr[compr.size()-1] while change CFlatData to use inclusive upper bound?\n\nBy definition compr[compr.size()] is a out of bound read even though it may not cause noticeable errors in certain implementations.\n,https://github.com/bitcoin/bitcoin/pull/4239#issuecomment-44384055,44384055,
laanwj,2014-05-28T09:49:50Z,Inclusive upper bound is incredibly rare in computer science. Would be extremely confusing. It could be considered to pass a pointer and a size though.\n\nNote that _taking the address of_ compr[compr.size()] is not an out-of-bounds access in itself. The memory is never accessed.\n,https://github.com/bitcoin/bitcoin/pull/4239#issuecomment-44385318,44385318,
sipa,2014-05-28T09:52:38Z,Would using compr.end() work? It returns an iterator pointing to the same address as &compr[compr.size()].\n,https://github.com/bitcoin/bitcoin/pull/4239#issuecomment-44385536,44385536,
haowang1013,2014-05-28T10:02:34Z,"Good point, I think compr.end() works the best in terms of satisfying the runtime as well as increasing readability.\n\nI personally don't have preference between inclusive and exclusive upper bounds, none of them is more confusing than the other :)\n",https://github.com/bitcoin/bitcoin/pull/4239#issuecomment-44386372,44386372,
laanwj,2014-05-28T10:26:52Z,The foremost problem with inclusive upper bounds is that they also require a record/type size. An exclusive upper bound is unambiguously the top of the address range encompassing the objects.\n,https://github.com/bitcoin/bitcoin/pull/4239#issuecomment-44388298,44388298,
laanwj,2014-05-29T07:03:35Z,"Using .end() makes sense here. But you'd still need something like `&(*compr.begin())` and `&(*compr.end())` to go from a vector random access iterator to a pointer. That may trigger yet another warning or may even fail in some cases if extra debug checking is compiled in.\n\nSeemingly, getting the beginning and end pointer of a vector is not trivial to do in a way that is guaranteed to be portabl",https://github.com/bitcoin/bitcoin/pull/4239#issuecomment-44500568,44500568,
LongShao007,2014-05-29T10:12:00Z,"ok, i will try!\n",https://github.com/bitcoin/bitcoin/pull/4239#issuecomment-44517699,44517699,
brandondahler,2014-05-30T02:45:59Z,"Why not use pointer arithmetic?  This would prevent all warning messages, produce the same results as it currently is, and look purposeful (since it is).\n\n```\ns << CFlatData(&compr[0], (&compr[0]) + compr.size());\n```\n",https://github.com/bitcoin/bitcoin/pull/4239#issuecomment-44609588,44609588,
laanwj,2014-05-30T06:36:00Z,"@brandondahler Did you check the link I gave? `&compr[0]` won't work portably for empty vectors (you're _still_ referencing out of bounds in that case). That's why I referred to the stackoverflow topic which defines the following, which I think makes sense:\n\n``` c++\ntemplate <class T, class TAl>\ninline T* begin_ptr(std::vector<T,TAl>& v)\n{return  v.empty() ? NULL : &v[0];}\n\ntemplate <class ",https://github.com/bitcoin/bitcoin/pull/4239#issuecomment-44619412,44619412,
