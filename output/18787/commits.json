[
  {
    "sha": "610030d95c60ea526440d801a98ac8bd370eac48",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MTAwMzBkOTVjNjBlYTUyNjQ0MGQ4MDFhOThhYzhiZDM3MGVhYzQ4",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-24T21:55:49Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-05T04:24:00Z"
      },
      "message": "docs: Add release notes for descriptor wallets",
      "tree": {
        "sha": "df556da4653f49cff810cacbe8af5f2d26cbb9ff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/df556da4653f49cff810cacbe8af5f2d26cbb9ff"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/610030d95c60ea526440d801a98ac8bd370eac48",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/610030d95c60ea526440d801a98ac8bd370eac48",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/610030d95c60ea526440d801a98ac8bd370eac48",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/610030d95c60ea526440d801a98ac8bd370eac48/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ec79b5f86b22ad8f77c736f9bb76c2e4d7faeaa4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec79b5f86b22ad8f77c736f9bb76c2e4d7faeaa4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ec79b5f86b22ad8f77c736f9bb76c2e4d7faeaa4"
      }
    ],
    "stats": {
      "total": 120,
      "additions": 120,
      "deletions": 0
    },
    "files": [
      {
        "sha": "0a7a31cc9d0f50422a38ee57b5218b323794b4d2",
        "filename": "doc/release-notes-16528.md",
        "status": "added",
        "additions": 120,
        "deletions": 0,
        "changes": 120,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/610030d95c60ea526440d801a98ac8bd370eac48/doc/release-notes-16528.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/610030d95c60ea526440d801a98ac8bd370eac48/doc/release-notes-16528.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-16528.md?ref=610030d95c60ea526440d801a98ac8bd370eac48",
        "patch": "@@ -0,0 +1,120 @@\n+Wallet\n+------\n+\n+### Experimental Descriptor Wallets\n+\n+Please note that Descriptor Wallets are still experimental and not all expected functionality\n+is available. Additionally there may be some bugs and current functions may change in the future.\n+Bugs and missing functionality can be reported to the [issue tracker](https://github.com/bitcoin/bitcoin/issues).\n+\n+0.21 introduces a new type of wallet - Descriptor Wallets. Descriptor Wallets store\n+scriptPubKey information using descriptors. This is in contrast to the Legacy Wallet\n+structure where keys are used to generate scriptPubKeys and addresses. Because of this\n+shift to being script based instead of key based, many of the confusing things that Legacy\n+Wallets do are not possible with Descriptor Wallets. Descriptor Wallets use a definition\n+of \"mine\" for scripts which is simpler and more intuitive than that used by Legacy Wallets.\n+Descriptor Wallets also uses different semantics for watch-only things and imports.\n+\n+As Descriptor Wallets are a new type of wallet, their introduction does not affect existing wallets.\n+Users who already have a Bitcoin Core wallet can continue to use it as they did before without\n+any change in behavior. Newly created Legacy Wallets (which is the default type of wallet) will\n+behave as they did in previous versions of Bitcoin Core.\n+\n+The differences between Descriptor Wallets and Legacy Wallets are largely limited to non user facing\n+things. They are intended to behave similarly except for the import/export and watchonly functionality\n+as described below.\n+\n+#### Creating Descriptor Wallets\n+\n+Descriptor Wallets are not created by default. They must be explicitly created using the\n+`createwallet` RPC or via the GUI. A `descriptors` option has been added to `createwallet`.\n+Setting `descriptors` to `true` will create a Descriptor Wallet instead of a Legacy Wallet.\n+\n+In the GUI, a checkbox has been added to the Create Wallet Dialog to indicate that a\n+Descriptor Wallet should be created.\n+\n+Without those options being set, a Legacy Wallet will be created instead. Additionally the\n+Default Wallet created upon first startup of Bitcoin Core will be a Legacy Wallet.\n+\n+#### `IsMine` Semantics\n+\n+`IsMine` refers to the function used to determine whether a script belongs to the wallet.\n+This is used to determine whether an output belongs to the wallet. `IsMine` in Legacy Wallets\n+returns true if the wallet would be able to sign an input that spends an output with that script.\n+Since keys can be involved in a variety of different scripts, this definition for `IsMine` can\n+lead to many unexpected scripts being considered part of the wallet.\n+\n+With Descriptor Wallets, descriptors explicitly specify the set of scripts that are owned by\n+the wallet. Since descriptors are deterministic and easily enumerable, users will know exactly\n+what scripts the wallet will consider to belong to it. Additionally the implementation of `IsMine`\n+in Descriptor Wallets is far simpler than for Legacy Wallets. Notably, in Legacy Wallets, `IsMine`\n+allowed for users to take one type of address (e.g. P2PKH), mutate it into another address type\n+(e.g. P2WPKH), and the wallet would still detect outputs sending to the new address type\n+even without that address being requested from the wallet. Descriptor Wallets does not\n+allow for this and will only watch for the addresses that were explicitly requested from the wallet.\n+\n+These changes to `IsMine` will make it easier to reason about what scripts the wallet will\n+actually be watching for in outputs. However for the vast majority of users, this change is\n+largely transparent and will not have noticeable effect.\n+\n+#### Imports and Exports\n+\n+In Legacy Wallets, raw scripts and keys could be imported to the wallet. Those imported scripts\n+and keys are treated separately from the keys generated by the wallet. This complicates the `IsMine`\n+logic as it has to distinguish between spendable and watchonly.\n+\n+Descriptor Wallets handle importing scripts and keys differently. Only complete descriptors can be\n+imported. These descriptors are then added to the wallet as if it were a descriptor generated by\n+the wallet itself. This simplifies the `IsMine` logic so that it no longer has to distinguish\n+between spendable and watchonly. As such, the watchonly model for Descriptor Wallets is also\n+different and described in more detail in the next section.\n+\n+To import into a Descriptor Wallet, a new `importdescriptors` RPC has been added that uses a syntax\n+similar to that of `importmulti`.\n+\n+As Legacy Wallets and Descriptor Wallets use different mechanisms for storing and importing scripts and keys\n+the existing import RPCs have been disabled for descriptor wallets.\n+New export RPCs for Descriptor Wallets have not yet been added.\n+\n+The following RPCs are disabled for Descriptor Wallets:\n+\n+* importprivkey\n+* importpubkey\n+* importaddress\n+* importwallet\n+* dumpprivkey\n+* dumpwallet\n+* importmulti\n+* addmultisigaddress\n+* sethdseed\n+\n+#### Watchonly Wallets\n+\n+A Legacy Wallet contains both private keys and scripts that were being watched.\n+Those watched scripts would not contribute to your normal balance. In order to see the watchonly\n+balance and to use watchonly things in transactions, an `include_watchonly` option was added\n+to many RPCs that would allow users to do that. However it is easy to forget to include this option.\n+\n+Descriptor Wallets move to a per-wallet watchonly model. Instead an entire wallet is considered to be\n+watchonly depending on whether it was created with private keys disabled. This eliminates the need\n+to distinguish between things that are watchonly and things that are not within a wallet itself.\n+\n+This change does have a caveat. If a Descriptor Wallet with private keys *enabled* has\n+a multiple key descriptor without all of the private keys (e.g. `multi(...)` with only one private key),\n+then the wallet will fail to sign and broadcast transactions. Such wallets would need to use the PSBT\n+workflow but the typical GUI Send, `sendtoaddress`, etc. workflows would still be available, just\n+non-functional.\n+\n+This issue is worsened if the wallet contains both single key (e.g. `wpkh(...)`) descriptors and such\n+multiple key descriptors as some transactions could be signed and broadast and others not. This is\n+due to some transactions containing only single key inputs, while others would contain both single\n+key and multiple key inputs, depending on which are available and how the coin selection algorithm\n+selects inputs. However this is not considered to be a supported use case; multisigs\n+should be in their own wallets which do not already have descriptors. Although users cannot export\n+descriptors with private keys for now as explained earlier.\n+\n+#### BIP 44/49/84 Support\n+\n+The change to using descriptors changes the default derivation paths used by Bitcoin Core\n+to adhere to BIP 44/49/84. Descriptors with different derivation paths can be imported without\n+issue."
      }
    ]
  },
  {
    "sha": "b9073c8f13fb0ba94c2ec6365666343e19fd9ddf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiOTA3M2M4ZjEzZmIwYmE5NGMyZWM2MzY1NjY2MzQzZTE5ZmQ5ZGRm",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-24T21:57:37Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-05T04:24:06Z"
      },
      "message": "rpc: createwallet warning that descriptor wallets are experimental",
      "tree": {
        "sha": "7804b8f0337a72ed27fd36a384f5b72bee4fcf1e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7804b8f0337a72ed27fd36a384f5b72bee4fcf1e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b9073c8f13fb0ba94c2ec6365666343e19fd9ddf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9073c8f13fb0ba94c2ec6365666343e19fd9ddf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b9073c8f13fb0ba94c2ec6365666343e19fd9ddf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9073c8f13fb0ba94c2ec6365666343e19fd9ddf/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "610030d95c60ea526440d801a98ac8bd370eac48",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/610030d95c60ea526440d801a98ac8bd370eac48",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/610030d95c60ea526440d801a98ac8bd370eac48"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "deb952d90407fce70c9cf16c66eed9b6ecc84ce0",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9073c8f13fb0ba94c2ec6365666343e19fd9ddf/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9073c8f13fb0ba94c2ec6365666343e19fd9ddf/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=b9073c8f13fb0ba94c2ec6365666343e19fd9ddf",
        "patch": "@@ -2720,6 +2720,7 @@ static UniValue createwallet(const JSONRPCRequest& request)\n     }\n     if (!request.params[5].isNull() && request.params[5].get_bool()) {\n         flags |= WALLET_FLAG_DESCRIPTORS;\n+        warnings.emplace_back(Untranslated(\"Wallet is an experimental descriptor wallet\"));\n     }\n \n     bilingual_str error;"
      }
    ]
  },
  {
    "sha": "89b1ce1140535b4c902a7c5999bed335b9ddfe7c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4OWIxY2UxMTQwNTM1YjRjOTAyYTdjNTk5OWJlZDMzNWI5ZGRmZTdj",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-27T18:26:25Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-05T04:24:06Z"
      },
      "message": "Remove unimplemented SetCrypted from DescriptorScriptPubKeyMan",
      "tree": {
        "sha": "ce735653c362583aeedddb2271c53c77b7066f6a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ce735653c362583aeedddb2271c53c77b7066f6a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/89b1ce1140535b4c902a7c5999bed335b9ddfe7c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89b1ce1140535b4c902a7c5999bed335b9ddfe7c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/89b1ce1140535b4c902a7c5999bed335b9ddfe7c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89b1ce1140535b4c902a7c5999bed335b9ddfe7c/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b9073c8f13fb0ba94c2ec6365666343e19fd9ddf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9073c8f13fb0ba94c2ec6365666343e19fd9ddf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b9073c8f13fb0ba94c2ec6365666343e19fd9ddf"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 0,
      "deletions": 2
    },
    "files": [
      {
        "sha": "5a03eb23c8de55678018e01bd6f16cc874c02a31",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/89b1ce1140535b4c902a7c5999bed335b9ddfe7c/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/89b1ce1140535b4c902a7c5999bed335b9ddfe7c/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=89b1ce1140535b4c902a7c5999bed335b9ddfe7c",
        "patch": "@@ -503,8 +503,6 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n     KeyMap m_map_keys GUARDED_BY(cs_desc_man);\n     CryptedKeyMap m_map_crypted_keys GUARDED_BY(cs_desc_man);\n \n-    bool SetCrypted();\n-\n     //! keeps track of whether Unlock has run a thorough check before\n     bool m_decryption_thoroughly_checked = false;\n "
      }
    ]
  },
  {
    "sha": "ca2a09640fe976b1e74a33d29d9381895e71b347",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYTJhMDk2NDBmZTk3NmIxZTc0YTMzZDI5ZDkzODE4OTVlNzFiMzQ3",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-27T19:27:43Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-05T04:24:46Z"
      },
      "message": "Change SetType to SetInternal and remove m_address_type\n\nm_address_type was used for two things:\n1. Determine the type of descriptor to generate during\n   SetupDescriptorGeneration\n2. Sanity check during GetNewDestination.\n\nThere is no need to have this variable to accomplish those things.\n1. Add a argument to SetupDescriptorGeneration indicating the address\n   type to use\n2. Use Descriptor::GetOutputType for the sanity check.",
      "tree": {
        "sha": "66d30d09368c97caa664139779ade5a1c0c14988",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/66d30d09368c97caa664139779ade5a1c0c14988"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ca2a09640fe976b1e74a33d29d9381895e71b347",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca2a09640fe976b1e74a33d29d9381895e71b347",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ca2a09640fe976b1e74a33d29d9381895e71b347",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca2a09640fe976b1e74a33d29d9381895e71b347/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "89b1ce1140535b4c902a7c5999bed335b9ddfe7c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89b1ce1140535b4c902a7c5999bed335b9ddfe7c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/89b1ce1140535b4c902a7c5999bed335b9ddfe7c"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 16,
      "deletions": 16
    },
    "files": [
      {
        "sha": "b28a2f01df72daff73ae6d7cfec7488d168d495b",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca2a09640fe976b1e74a33d29d9381895e71b347/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca2a09640fe976b1e74a33d29d9381895e71b347/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=ca2a09640fe976b1e74a33d29d9381895e71b347",
        "patch": "@@ -1497,7 +1497,7 @@ std::set<CKeyID> LegacyScriptPubKeyMan::GetKeys() const\n     return set_address;\n }\n \n-void LegacyScriptPubKeyMan::SetType(OutputType type, bool internal) {}\n+void LegacyScriptPubKeyMan::SetInternal(bool internal) {}\n \n bool DescriptorScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error)\n {\n@@ -1509,7 +1509,9 @@ bool DescriptorScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDest\n     {\n         LOCK(cs_desc_man);\n         assert(m_wallet_descriptor.descriptor->IsSingleType()); // This is a combo descriptor which should not be an active descriptor\n-        if (type != m_address_type) {\n+        Optional<OutputType> desc_addr_type = m_wallet_descriptor.descriptor->GetOutputType();\n+        assert(desc_addr_type);\n+        if (type != *desc_addr_type) {\n             throw std::runtime_error(std::string(__func__) + \": Types are inconsistent\");\n         }\n \n@@ -1777,7 +1779,7 @@ bool DescriptorScriptPubKeyMan::AddDescriptorKeyWithDB(WalletBatch& batch, const\n     }\n }\n \n-bool DescriptorScriptPubKeyMan::SetupDescriptorGeneration(const CExtKey& master_key)\n+bool DescriptorScriptPubKeyMan::SetupDescriptorGeneration(const CExtKey& master_key, OutputType addr_type)\n {\n     LOCK(cs_desc_man);\n     assert(m_storage.IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS));\n@@ -1794,7 +1796,7 @@ bool DescriptorScriptPubKeyMan::SetupDescriptorGeneration(const CExtKey& master_\n     // Build descriptor string\n     std::string desc_prefix;\n     std::string desc_suffix = \"/*)\";\n-    switch (m_address_type) {\n+    switch (addr_type) {\n     case OutputType::LEGACY: {\n         desc_prefix = \"pkh(\" + xpub + \"/44'\";\n         break;\n@@ -2076,9 +2078,8 @@ uint256 DescriptorScriptPubKeyMan::GetID() const\n     return id;\n }\n \n-void DescriptorScriptPubKeyMan::SetType(OutputType type, bool internal)\n+void DescriptorScriptPubKeyMan::SetInternal(bool internal)\n {\n-    this->m_address_type = type;\n     this->m_internal = internal;\n }\n "
      },
      {
        "sha": "1d7c33b0265237de4061b58fca912113eb10233b",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 6,
        "deletions": 7,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca2a09640fe976b1e74a33d29d9381895e71b347/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca2a09640fe976b1e74a33d29d9381895e71b347/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=ca2a09640fe976b1e74a33d29d9381895e71b347",
        "patch": "@@ -224,7 +224,7 @@ class ScriptPubKeyMan\n \n     virtual uint256 GetID() const { return uint256(); }\n \n-    virtual void SetType(OutputType type, bool internal) {}\n+    virtual void SetInternal(bool internal) {}\n \n     /** Prepends the wallet name in logging output to ease debugging in multi-wallet use cases */\n     template<typename... Params>\n@@ -370,7 +370,7 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n \n     uint256 GetID() const override;\n \n-    void SetType(OutputType type, bool internal) override;\n+    void SetInternal(bool internal) override;\n \n     // Map from Key ID to key metadata.\n     std::map<CKeyID, CKeyMetadata> mapKeyMetadata GUARDED_BY(cs_KeyStore);\n@@ -497,7 +497,6 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n     PubKeyMap m_map_pubkeys GUARDED_BY(cs_desc_man);\n     int32_t m_max_cached_index = -1;\n \n-    OutputType m_address_type;\n     bool m_internal = false;\n \n     KeyMap m_map_keys GUARDED_BY(cs_desc_man);\n@@ -522,9 +521,9 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n         :   ScriptPubKeyMan(storage),\n             m_wallet_descriptor(descriptor)\n         {}\n-    DescriptorScriptPubKeyMan(WalletStorage& storage, OutputType address_type, bool internal)\n+    DescriptorScriptPubKeyMan(WalletStorage& storage, bool internal)\n         :   ScriptPubKeyMan(storage),\n-            m_address_type(address_type), m_internal(internal)\n+            m_internal(internal)\n         {}\n \n     mutable RecursiveMutex cs_desc_man;\n@@ -549,7 +548,7 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n     bool IsHDEnabled() const override;\n \n     //! Setup descriptors based on the given CExtkey\n-    bool SetupDescriptorGeneration(const CExtKey& master_key);\n+    bool SetupDescriptorGeneration(const CExtKey& master_key, OutputType addr_type);\n \n     bool HavePrivateKeys() const override;\n \n@@ -573,7 +572,7 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n \n     uint256 GetID() const override;\n \n-    void SetType(OutputType type, bool internal) override;\n+    void SetInternal(bool internal) override;\n \n     void SetCache(const DescriptorCache& cache);\n "
      },
      {
        "sha": "210b134e18914964dfed1be20944d373522e5e20",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca2a09640fe976b1e74a33d29d9381895e71b347/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca2a09640fe976b1e74a33d29d9381895e71b347/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=ca2a09640fe976b1e74a33d29d9381895e71b347",
        "patch": "@@ -4369,7 +4369,7 @@ void CWallet::SetupDescriptorScriptPubKeyMans()\n \n     for (bool internal : {false, true}) {\n         for (OutputType t : OUTPUT_TYPES) {\n-            auto spk_manager = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(*this, t, internal));\n+            auto spk_manager = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(*this, internal));\n             if (IsCrypted()) {\n                 if (IsLocked()) {\n                     throw std::runtime_error(std::string(__func__) + \": Wallet is locked, cannot setup new descriptors\");\n@@ -4378,7 +4378,7 @@ void CWallet::SetupDescriptorScriptPubKeyMans()\n                     throw std::runtime_error(std::string(__func__) + \": Could not encrypt new descriptors\");\n                 }\n             }\n-            spk_manager->SetupDescriptorGeneration(master_key);\n+            spk_manager->SetupDescriptorGeneration(master_key, t);\n             uint256 id = spk_manager->GetID();\n             m_spk_managers[id] = std::move(spk_manager);\n             SetActiveScriptPubKeyMan(id, t, internal);\n@@ -4391,7 +4391,7 @@ void CWallet::SetActiveScriptPubKeyMan(uint256 id, OutputType type, bool interna\n     WalletLogPrintf(\"Setting spkMan to active: id = %s, type = %d, internal = %d\\n\", id.ToString(), static_cast<int>(type), static_cast<int>(internal));\n     auto& spk_mans = internal ? m_internal_spk_managers : m_external_spk_managers;\n     auto spk_man = m_spk_managers.at(id).get();\n-    spk_man->SetType(type, internal);\n+    spk_man->SetInternal(internal);\n     spk_mans[type] = spk_man;\n \n     if (!memonly) {"
      }
    ]
  }
]