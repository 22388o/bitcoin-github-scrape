JeremyRubin,2017-02-20T05:23:18Z,"Sorry for the bit of line noise, there was some UB when I removed some of the branches (memset/memcpy/read/write 0 bytes on nullptr/invalid ptr) that was causing one of the builds (with more aggressive runtime checks) to fail. I added them back in and all seems well now.\n",https://github.com/bitcoin/bitcoin/pull/9804#issuecomment-280990910,280990910,
laanwj,2017-02-20T15:49:37Z,"Whoa, good catch. \n\nI'm shocked that &vch[0] use was still so rampant in the code. We'd  introduced `begin_ptr` with the intention to replace those, and phased even that out again with C++11 `.data()`.\n\nAnyhow, concept ACK.",https://github.com/bitcoin/bitcoin/pull/9804#issuecomment-281113538,281113538,
JeremyRubin,2017-02-20T17:14:14Z,"There are still a few more places that were trickier/not possible to correct (where the type passed in is templated, such that it would be a pointer or a vector).\n\nI also didn't fix anything in subdirectories, because I felt this PR was getting a bit large already, and there are a few you can still grep for pretty easily there:\n ```\n‚ùØ grep '\&v[A-z0-9_]*\[0\]' */*.cpp | nl\n     1	qt/sign",https://github.com/bitcoin/bitcoin/pull/9804#issuecomment-281135098,281135098,
gmaxwell,2017-02-21T00:57:51Z,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/9804#issuecomment-281215939,281215939,
practicalswift,2017-02-28T15:53:00Z,Concept ACK! üëç ,https://github.com/bitcoin/bitcoin/pull/9804#issuecomment-283078011,283078011,
JeremyRubin,2017-03-27T17:22:15Z,Rebased. ,https://github.com/bitcoin/bitcoin/pull/9804#issuecomment-289522795,289522795,
JeremyRubin,2017-03-28T15:45:27Z,@ryanofsky feedback addressed.,https://github.com/bitcoin/bitcoin/pull/9804#issuecomment-289813161,289813161,
laanwj,2017-06-26T10:52:16Z,Needs rebase again (sorry).,https://github.com/bitcoin/bitcoin/pull/9804#issuecomment-311026625,311026625,
JeremyRubin,2017-07-08T21:05:24Z,"@laanwj rebased.\n\nThe addrdb commit went away because of https://github.com/bitcoin/bitcoin/commit/cf68a488a4cc78d711ca6e5e3236c6d89d689079",https://github.com/bitcoin/bitcoin/pull/9804#issuecomment-313881004,313881004,
meshcollider,2017-07-11T08:24:25Z,"Looks good to me, utACK ",https://github.com/bitcoin/bitcoin/pull/9804#issuecomment-314371191,314371191,
sipa,2017-07-11T17:42:24Z,utACK 30ac7688e398bbe5400a48ecf0726b679ffb845d,https://github.com/bitcoin/bitcoin/pull/9804#issuecomment-314519370,314519370,
TheBlueMatt,2017-07-11T22:20:17Z,utACK 30ac7688e398bbe5400a48ecf0726b679ffb845d,https://github.com/bitcoin/bitcoin/pull/9804#issuecomment-314588762,314588762,
sipa,2017-07-12T23:23:47Z,utACK 30ac7688e398bbe5400a48ecf0726b679ffb845d,https://github.com/bitcoin/bitcoin/pull/9804#issuecomment-314925542,314925542,
dcousens,2017-02-20T03:39:16Z,`std::string` maybe?,https://github.com/bitcoin/bitcoin/pull/9804#discussion_r101943952,101943952,src/utilstrencodings.cpp
laanwj,2017-02-20T15:53:21Z,"I wonder why we're casting to `(char*)` here iso `(const char*)`, even though these are write operations and the type passed in is `const`.\n\nThere's a couple more of these. Though seems out of scope to fix in this pull.",https://github.com/bitcoin/bitcoin/pull/9804#discussion_r102046393,102046393,src/serialize.h
JeremyRubin,2017-02-20T16:53:24Z,"Yeah that seems obviously incorrect, but I _think_ I understand why it was done (or at least have a theory). Because the methods are all generic w.r.t. the stream type, they probably are made to work with some arbitrary stream that can't accept a `const char *`. Hopefully not the case anymore...\n\nAnyways, probably best to fix those up separately as you suggest.",https://github.com/bitcoin/bitcoin/pull/9804#discussion_r102058371,102058371,src/serialize.h
TheBlueMatt,2017-02-20T23:16:48Z,"AFAICT, this is equivalent to sizeof(C) (std::basic_string\<C\>::value_type is std::basic_string\<C, std::char_traits\<C\>\>::value_type which is std::char_traits\<C\>::char_type, which is C).",https://github.com/bitcoin/bitcoin/pull/9804#discussion_r102106369,102106369,src/serialize.h
TheBlueMatt,2017-02-21T00:20:12Z,"Hmm, based on cppreference I cant tell if this is well-defined with vchRet.size() == 0 or not.",https://github.com/bitcoin/bitcoin/pull/9804#discussion_r102111560,102111560,src/utilstrencodings.cpp
dcousens,2017-02-21T00:48:08Z,"From my understanding (it doesn't seem ambiguous, but, it certainly isn't definitive),  a `len` of `0` is well-defined,  and simply an empty string.  Aka,  equivalent to `std::string()`.\nI don't have a definitive statement from the reference.",https://github.com/bitcoin/bitcoin/pull/9804#discussion_r102113656,102113656,src/utilstrencodings.cpp
laanwj,2017-02-21T13:25:14Z,"Sure, but it would be wrong for a stream write to take a char* i.s.o. const char*, so fixing those just means the const-correctness spreads.",https://github.com/bitcoin/bitcoin/pull/9804#discussion_r102205393,102205393,src/serialize.h
laanwj,2017-02-21T13:26:52Z,"Yes, a string with size 0 is well-defined. Calling `.data()` on a string of size 0 is also defined. This should be ok.",https://github.com/bitcoin/bitcoin/pull/9804#discussion_r102205675,102205675,src/utilstrencodings.cpp
laanwj,2017-02-21T13:28:17Z,@thebluematt is right,https://github.com/bitcoin/bitcoin/pull/9804#discussion_r102205900,102205900,src/serialize.h
sipa,2017-02-21T18:00:45Z,"The question is whether calling `std::string(garbage_pointer, 0)` is well-defined. I can't tell from what cppreference.com says (*The behavior is undefined if s does not point at an array of at least count elements of CharT, including the case when s is a null pointer.*).\n\nAs an alternative, what about `std::string(vchRet.begin(), vchRet.end())`?",https://github.com/bitcoin/bitcoin/pull/9804#discussion_r102274691,102274691,src/utilstrencodings.cpp
laanwj,2017-02-21T18:22:51Z,"I read that as: If the count is 0, it always points at least 0 elements,  thus ""point at an array of at least count elements of CharT"" is always satisfied. \n\nAlternatively: if count is 0 it would be wrong to dereference the  pointer's address at all.\n",https://github.com/bitcoin/bitcoin/pull/9804#discussion_r102279614,102279614,src/utilstrencodings.cpp
sipa,2017-02-21T18:35:06Z,"I'm not convinced that ""a pointer to an array of 0 elements of type T"" can be any pointer. I think it's extremely unlikely to matter, and that every C++ std library effectively is implemented in a way that makes the constructor, when invoked with (pointer, 0) effectively ignore pointer, however.",https://github.com/bitcoin/bitcoin/pull/9804#discussion_r102282566,102282566,src/utilstrencodings.cpp
TheBlueMatt,2017-02-21T19:23:46Z,I mean when cppreference is ambiguous thats probably a good sign that trying to parse a wiki is going to get your an incorrect result...best to go to the standard if in doubt in that case. :/,https://github.com/bitcoin/bitcoin/pull/9804#discussion_r102294018,102294018,src/utilstrencodings.cpp
JeremyRubin,2017-02-22T00:17:39Z,"Yep, I was aware :) I felt that the version I chose was more similar to the existing code (the size of whatever str[0] returns), but if everyone is comfortable with sizeof(C) I can change it.",https://github.com/bitcoin/bitcoin/pull/9804#discussion_r102354092,102354092,src/serialize.h
JeremyRubin,2017-02-22T00:59:40Z,"I don't think it is can be a garbage pointer. vector.data() is guaranteed to return a valid range (even when empty), which I think would require that it have proper alignment.",https://github.com/bitcoin/bitcoin/pull/9804#discussion_r102360084,102360084,src/utilstrencodings.cpp
laanwj,2017-02-22T08:25:32Z,"Just to be complete: this is *not* the same as `std::string(vchRet.begin(), vchRet.end())` in the general case. When creating an iterator range, if the type of vch is different from the type of string, a per-element cast will happen. So `string.size()` will be `vch.size()`. Usual issues with casting between signed and unsigned apply.\n\n`std::string((const char*)vchRet.data(), vchRet.size())` ho",https://github.com/bitcoin/bitcoin/pull/9804#discussion_r102405187,102405187,src/utilstrencodings.cpp
JeremyRubin,2017-02-22T11:09:23Z,üëç fixed,https://github.com/bitcoin/bitcoin/pull/9804#discussion_r102437254,102437254,src/serialize.h
ryanofsky,2017-03-27T22:26:59Z,"In commit: ""Cleanup (safe, it was checked) 0-subscript in MurmurHash3""\n\nCould you drop this (const uint8_t*) cast here? It shouldn't be needed since we already call vDataToHash.data() with no cast above on line 27.",https://github.com/bitcoin/bitcoin/pull/9804#discussion_r108295728,108295728,src/hash.cpp
ryanofsky,2017-03-27T22:38:14Z,"In commit ""Fix 0-subscript in utilstrencodings.cpp""\n\nShould put back std:: prefixes.",https://github.com/bitcoin/bitcoin/pull/9804#discussion_r108297608,108297608,src/utilstrencodings.cpp
ryanofsky,2017-03-27T22:38:33Z,"In commit ""Fix 0-subscript in utilstrencodings.cpp""\n\nBad merge here.",https://github.com/bitcoin/bitcoin/pull/9804#discussion_r108297653,108297653,src/utilstrencodings.cpp
ryanofsky,2017-03-27T22:50:09Z,"In commit ""Fix subscript-0 in streams.h""\n\nIt would seem more direct (and shorter) to write sizeof(*vch.data()).",https://github.com/bitcoin/bitcoin/pull/9804#discussion_r108299412,108299412,src/streams.h
ryanofsky,2017-03-27T22:53:51Z,"In commit ""Remove uneccessary branches in utilstrencodings string constructors.""\n\nSome of the changes in this commit should be squashed into previous commit ""In commit ""Fix 0-subscript in utilstrencodings.cpp.""\n\nAlso missing an n in unnecessary.",https://github.com/bitcoin/bitcoin/pull/9804#discussion_r108299953,108299953,src/utilstrencodings.cpp
