[
  {
    "sha": "693247b82bbccada37f7bc61380ddac799100eb8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2OTMyNDdiODJiYmNjYWRhMzdmN2JjNjEzODBkZGFjNzk5MTAwZWI4",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-05-18T19:37:31Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-05-19T05:28:46Z"
      },
      "message": "[test] Speed up fuzzing by ~200x when using afl-fuzz\n\nEnable the `afl-clang-fast++` features deferred forkserver (`__AFL_INIT`) and persistent mode (`__AFL_LOOP(1000)`).\n\nBefore this patch:\n\n```\n$ afl-fuzz -i input -o output -m512 -- src/test/test_bitcoin_fuzzy\n[*] Validating target binary...\n[!] WARNING: The target binary is pretty slow! See /usr/local/share/doc/afl/perf_tips.txt.\n[+] Here are some useful stats:\n\n    Test case count : 1 favored, 0 variable, 1 total\n       Bitmap range : 1072 to 1072 bits (average: 1072.00 bits)\n        Exec timing : 20.4k to 20.4k us (average: 20.4k us)\n\u2026\nexec speed : 57.58/sec (slow!)\nexec speed : 48.35/sec (slow!)\nexec speed : 53.78/sec (slow!)\n```\n\nAfter this patch:\n\n```\n$ afl-fuzz -i input -o output -m512 -- src/test/test_bitcoin_fuzzy\n[*] Validating target binary...\n[+] Persistent mode binary detected.\n[+] Deferred forkserver binary detected.\n[+] Here are some useful stats:\n\n    Test case count : 1 favored, 0 variable, 1 total\n       Bitmap range : 24 to 24 bits (average: 24.00 bits)\n        Exec timing : 114 to 114 us (average: 114 us)\n\u2026\nexec speed : 15.9k/sec\nexec speed : 13.1k/sec\nexec speed : 15.1k/sec\n```",
      "tree": {
        "sha": "3230dc0129a9ad2ef2a8aa472b1edbf8b737932d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3230dc0129a9ad2ef2a8aa472b1edbf8b737932d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/693247b82bbccada37f7bc61380ddac799100eb8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/693247b82bbccada37f7bc61380ddac799100eb8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/693247b82bbccada37f7bc61380ddac799100eb8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/693247b82bbccada37f7bc61380ddac799100eb8/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "95546c859b71bd73ddd33552ac216086a9adf7c9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95546c859b71bd73ddd33552ac216086a9adf7c9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/95546c859b71bd73ddd33552ac216086a9adf7c9"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 28,
      "deletions": 3
    },
    "files": [
      {
        "sha": "5dedcb51c895e612c6953b99ca3bb532899cb4aa",
        "filename": "doc/fuzzing.md",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/693247b82bbccada37f7bc61380ddac799100eb8/doc/fuzzing.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/693247b82bbccada37f7bc61380ddac799100eb8/doc/fuzzing.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/fuzzing.md?ref=693247b82bbccada37f7bc61380ddac799100eb8",
        "patch": "@@ -32,6 +32,13 @@ We disable ccache because we don't want to pollute the ccache with instrumented\n objects, and similarly don't want to use non-instrumented cached objects linked\n in.\n \n+The fuzzing can be sped up significantly (~200x) by using `afl-clang-fast` and\n+`afl-clang-fast++` in place of `afl-gcc` and `afl-g++` when compiling. When\n+compiling using `afl-clang-fast`/`afl-clang-fast++` the resulting\n+`test_bitcoin_fuzzy` binary will be instrumented in such a way that the AFL\n+features \"persistent mode\" and \"deferred forkserver\" can be used. See\n+https://github.com/mcarpenter/afl/tree/master/llvm_mode for details.\n+\n Preparing fuzzing\n ------------------\n \n@@ -63,4 +70,3 @@ $AFLPATH/afl-fuzz -i ${AFLIN} -o ${AFLOUT} -m52 -- test/test_bitcoin_fuzzy\n \n You may have to change a few kernel parameters to test optimally - `afl-fuzz`\n will print an error and suggestion if so.\n-"
      },
      {
        "sha": "e11e46bb022fe92f9b08d4215bedd9ce00cadab9",
        "filename": "src/test/test_bitcoin_fuzzy.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 2,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/693247b82bbccada37f7bc61380ddac799100eb8/src/test/test_bitcoin_fuzzy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/693247b82bbccada37f7bc61380ddac799100eb8/src/test/test_bitcoin_fuzzy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin_fuzzy.cpp?ref=693247b82bbccada37f7bc61380ddac799100eb8",
        "patch": "@@ -59,9 +59,8 @@ bool read_stdin(std::vector<char> &data) {\n     return length==0;\n }\n \n-int main(int argc, char **argv)\n+int do_fuzz()\n {\n-    ECCVerifyHandle globalVerifyHandle;\n     std::vector<char> buffer;\n     if (!read_stdin(buffer)) return 0;\n \n@@ -256,3 +255,23 @@ int main(int argc, char **argv)\n     return 0;\n }\n \n+int main(int argc, char **argv)\n+{\n+    ECCVerifyHandle globalVerifyHandle;\n+#ifdef __AFL_INIT\n+    // Enable AFL deferred forkserver mode. Requires compilation using\n+    // afl-clang-fast++. See fuzzing.md for details.\n+    __AFL_INIT();\n+#endif\n+\n+#ifdef __AFL_LOOP\n+    // Enable AFL persistent mode. Requires compilation using afl-clang-fast++.\n+    // See fuzzing.md for details.\n+    while (__AFL_LOOP(1000)) {\n+        do_fuzz();\n+    }\n+    return 0;\n+#else\n+    return do_fuzz();\n+#endif\n+}"
      }
    ]
  }
]