[
  {
    "sha": "c8e24ddce31a8de6255b23c19d958c1cd44a8847",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOGUyNGRkY2UzMWE4ZGU2MjU1YjIzYzE5ZDk1OGMxY2Q0NGE4ODQ3",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-10-06T19:13:20Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-02-12T19:20:38Z"
      },
      "message": "[REFACTOR] Abstract out script execution out of VerifyWitnessProgram()\n\nThis removes the unclear reliance on \"falling through\" to get to the\nscript execution part.\n\nAlso fix some code style issues.",
      "tree": {
        "sha": "5c60d7e0fe185c91cdfc08c6ae9a3a34ca56dba4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5c60d7e0fe185c91cdfc08c6ae9a3a34ca56dba4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c8e24ddce31a8de6255b23c19d958c1cd44a8847",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8e24ddce31a8de6255b23c19d958c1cd44a8847",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c8e24ddce31a8de6255b23c19d958c1cd44a8847",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8e24ddce31a8de6255b23c19d958c1cd44a8847/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2bdc476d4d23256d8396bb9051a511f540d87392",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2bdc476d4d23256d8396bb9051a511f540d87392",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2bdc476d4d23256d8396bb9051a511f540d87392"
      }
    ],
    "stats": {
      "total": 48,
      "additions": 25,
      "deletions": 23
    },
    "files": [
      {
        "sha": "e4e86031e661270532ef455e0d3f474498c1d016",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 23,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8e24ddce31a8de6255b23c19d958c1cd44a8847/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8e24ddce31a8de6255b23c19d958c1cd44a8847/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=c8e24ddce31a8de6255b23c19d958c1cd44a8847",
        "patch": "@@ -1414,9 +1414,26 @@ bool GenericTransactionSignatureChecker<T>::CheckSequence(const CScriptNum& nSeq\n template class GenericTransactionSignatureChecker<CTransaction>;\n template class GenericTransactionSignatureChecker<CMutableTransaction>;\n \n+static bool ExecuteWitnessScript(std::vector<valtype>::const_iterator begin, std::vector<valtype>::const_iterator end, const CScript& scriptPubKey, unsigned int flags, SigVersion sigversion, const BaseSignatureChecker& checker, ScriptError* serror)\n+{\n+    std::vector<valtype> stack{begin, end};\n+\n+    // Disallow stack item size > MAX_SCRIPT_ELEMENT_SIZE in witness stack\n+    for (const valtype& elem : stack) {\n+        if (elem.size() > MAX_SCRIPT_ELEMENT_SIZE) return set_error(serror, SCRIPT_ERR_PUSH_SIZE);\n+    }\n+\n+    // Run the script interpreter.\n+    if (!EvalScript(stack, scriptPubKey, flags, checker, sigversion, serror)) return false;\n+\n+    // Scripts inside witness implicitly require cleanstack behaviour\n+    if (stack.size() != 1) return set_error(serror, SCRIPT_ERR_CLEANSTACK);\n+    if (!CastToBool(stack.back())) return set_error(serror, SCRIPT_ERR_EVAL_FALSE);\n+    return true;\n+}\n+\n static bool VerifyWitnessProgram(const CScriptWitness& witness, int witversion, const std::vector<unsigned char>& program, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror)\n {\n-    std::vector<std::vector<unsigned char> > stack;\n     CScript scriptPubKey;\n \n     if (witversion == 0) {\n@@ -1426,45 +1443,30 @@ static bool VerifyWitnessProgram(const CScriptWitness& witness, int witversion,\n                 return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_WITNESS_EMPTY);\n             }\n             scriptPubKey = CScript(witness.stack.back().begin(), witness.stack.back().end());\n-            stack = std::vector<std::vector<unsigned char> >(witness.stack.begin(), witness.stack.end() - 1);\n             uint256 hashScriptPubKey;\n             CSHA256().Write(&scriptPubKey[0], scriptPubKey.size()).Finalize(hashScriptPubKey.begin());\n             if (memcmp(hashScriptPubKey.begin(), program.data(), 32)) {\n                 return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_MISMATCH);\n             }\n+            return ExecuteWitnessScript(witness.stack.begin(), witness.stack.end() - 1, scriptPubKey, flags, SigVersion::WITNESS_V0, checker, serror);\n         } else if (program.size() == WITNESS_V0_KEYHASH_SIZE) {\n             // Special case for pay-to-pubkeyhash; signature + pubkey in witness\n             if (witness.stack.size() != 2) {\n                 return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_MISMATCH); // 2 items in witness\n             }\n             scriptPubKey << OP_DUP << OP_HASH160 << program << OP_EQUALVERIFY << OP_CHECKSIG;\n-            stack = witness.stack;\n+            return ExecuteWitnessScript(witness.stack.begin(), witness.stack.end(), scriptPubKey, flags, SigVersion::WITNESS_V0, checker, serror);\n         } else {\n             return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_WRONG_LENGTH);\n         }\n-    } else if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM) {\n-        return set_error(serror, SCRIPT_ERR_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM);\n     } else {\n+        if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM) {\n+            return set_error(serror, SCRIPT_ERR_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM);\n+        }\n         // Higher version witness scripts return true for future softfork compatibility\n-        return set_success(serror);\n-    }\n-\n-    // Disallow stack item size > MAX_SCRIPT_ELEMENT_SIZE in witness stack\n-    for (unsigned int i = 0; i < stack.size(); i++) {\n-        if (stack.at(i).size() > MAX_SCRIPT_ELEMENT_SIZE)\n-            return set_error(serror, SCRIPT_ERR_PUSH_SIZE);\n-    }\n-\n-    if (!EvalScript(stack, scriptPubKey, flags, checker, SigVersion::WITNESS_V0, serror)) {\n-        return false;\n+        return true;\n     }\n-\n-    // Scripts inside witness implicitly require cleanstack behaviour\n-    if (stack.size() != 1)\n-        return set_error(serror, SCRIPT_ERR_CLEANSTACK);\n-    if (!CastToBool(stack.back()))\n-        return set_error(serror, SCRIPT_ERR_EVAL_FALSE);\n-    return true;\n+    // There is intentionally no return statement here, to be able to use \"control reaches end of non-void function\" warnings to detect gaps in the logic above.\n }\n \n bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CScriptWitness* witness, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror)"
      }
    ]
  }
]