sipa,2020-01-25 21:10:42,A change like this was originally suggested by @JeremyRubin here: https://github.com/sipa/bitcoin/pull/116,https://github.com/bitcoin/bitcoin/pull/18002#issuecomment-578443335,578443335,
DrahtBot,2020-01-26 01:11:25,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18267 (BIP-325: Signet [consensus] by kallewoof)\n* #17977 ([WIP] Implement BIP 340-342 validation (Schnorr/taproot/tapsc",https://github.com/bitcoin/bitcoin/pull/18002#issuecomment-578458898,578458898,
JeremyRubin,2020-01-26 02:27:20,"I'm generally a big fan of cleaning up this consensus logic such that the code is  ""tree-like"" and terminates at leaf branches, rather than having interleaved ""dag-like"" branches that merge into a common exit point. One of the key advantages of code structured in this way is it's much easier to see, at a glance, exactly how many ""versions"" (i.e., combinations of flags) we support. Otherwise, with ",https://github.com/bitcoin/bitcoin/pull/18002#issuecomment-578462602,578462602,
NicolasDorier,2020-01-26 08:04:38,"Code review ACK.\n\nI like the approach of trying to get small refactors onto the codebase that can be independently reviewed to make the taproot PR more reviewable.",https://github.com/bitcoin/bitcoin/pull/18002#issuecomment-578478085,578478085,
Empact,2020-01-30 00:11:09,Code Review ACK https://github.com/bitcoin/bitcoin/pull/18002/commits/1e1e28cdc207b7f12a8dce953e61c7c508c63611,https://github.com/bitcoin/bitcoin/pull/18002#issuecomment-580023477,580023477,
fjahr,2020-02-12 18:15:51,"Code review ACK 139f7ffc71b706df748624e9c41d83a041b9f8b3\n\nVerified the changes are a pure refactor. Also ran test locally. I agree with both of @jnewbery s comments but can also be merged as it is right now.",https://github.com/bitcoin/bitcoin/pull/18002#issuecomment-585342836,585342836,
sipa,2020-02-12 19:38:00,"I've made a few invasive changes here, which will need re-review.",https://github.com/bitcoin/bitcoin/pull/18002#issuecomment-585380689,585380689,
fjahr,2020-02-12 20:31:20,"Re-ACK c8e24ddce31a8de6255b23c19d958c1cd44a8847\n\nNew changes addressed the review comments.",https://github.com/bitcoin/bitcoin/pull/18002#issuecomment-585403662,585403662,
theStack,2020-02-16 18:47:32,"re-ACK https://github.com/bitcoin/bitcoin/commit/c8e24ddce31a8de6255b23c19d958c1cd44a8847\nChecked that since my previous ACK https://github.com/bitcoin/bitcoin/commit/139f7ffc71b706df748624e9c41d83a041b9f8b3 the following changes have been made:\n- s/ExecuteWitnessProgram/ExecuteWitnessScript\n- pass script stack to ExecuteWitnessScript as const_iterator pair (and create local copy) \ninstead",https://github.com/bitcoin/bitcoin/pull/18002#issuecomment-586739286,586739286,
Empact,2020-02-17 20:58:43,"Code Review Re-ACK https://github.com/bitcoin/bitcoin/pull/18002/commits/c8e24ddce31a8de6255b23c19d958c1cd44a8847\n\nnit: could use `cbegin/cend`",https://github.com/bitcoin/bitcoin/pull/18002#issuecomment-587155456,587155456,
ajtowns,2020-02-19 02:34:08,ACK c8e24ddce31a8de6255b23c19d958c1cd44a8847,https://github.com/bitcoin/bitcoin/pull/18002#issuecomment-588004472,588004472,
NicolasDorier,2020-02-19 12:53:47,Code Review reACK,https://github.com/bitcoin/bitcoin/pull/18002#issuecomment-588212705,588212705,
jnewbery,2020-03-13 21:22:20,ACK c8e24ddce31a8de6255b23c19d958c1cd44a8847,https://github.com/bitcoin/bitcoin/pull/18002#issuecomment-598917108,598917108,
NicolasDorier,2020-01-26 07:51:23,"~Before this PR `SCRIPT_ERR_CLEANSTACK` would be enforced even on non version 0 witnessed. This change only enforce it on version 0 witnesses, this is probably a hardfork case?~ (not the case, I missed the `else` clause in the original code)",https://github.com/bitcoin/bitcoin/pull/18002#discussion_r370979869,370979869,src/script/interpreter.cpp
NicolasDorier,2020-01-26 07:58:28,"~EDIT: Actually right now, all non witness 0 script would be rejected by consensus? Because the stack of a non version 0 witness is always empty and this would violate `SCRIPT_ERR_CLEANSTACK`?~  (not the case, I missed the `else` clause in the original code)",https://github.com/bitcoin/bitcoin/pull/18002#discussion_r370980200,370980200,src/script/interpreter.cpp
Empact,2020-01-30 00:03:43,nit: Maybe `stack` passing could be clarified by passing as const reference and instantiating the local within? Or a doc commenting that it's an in var.,https://github.com/bitcoin/bitcoin/pull/18002#discussion_r372697829,372697829,src/script/interpreter.cpp
sipa,2020-01-30 00:05:23,Passing it as const reference would require an unnecessary copy. I'll add a comment.,https://github.com/bitcoin/bitcoin/pull/18002#discussion_r372698278,372698278,src/script/interpreter.cpp
Empact,2020-01-30 00:15:19,Sounds good re comment. Doesn't the copy occur in either case? AFAIK pass by value requires a copy to have a new instance available for modification.,https://github.com/bitcoin/bitcoin/pull/18002#discussion_r372701039,372701039,src/script/interpreter.cpp
sipa,2020-01-30 00:18:43,"Pass by value is a terrible name.\n\nIt's just a variable on the callee side that is constructed in place by the caller. The call sites construct temporaries, so the move constructor will be invoked to construct the parameter.",https://github.com/bitcoin/bitcoin/pull/18002#discussion_r372702063,372702063,src/script/interpreter.cpp
ajtowns,2020-01-30 11:20:06,"Having `if () { ...; } else { ... }` instead of `if () { ...; assert(false); } ...` would let gcc and clang issue a compile-time warning (""control reaches end of non-void function"") if the logic got messed up in future, but I don't think there's any way to get both a compile time warning and a runtime safety check (assert(false) overrules the ""control reaches end..."" warning), so just having the r",https://github.com/bitcoin/bitcoin/pull/18002#discussion_r372892925,372892925,src/script/interpreter.cpp
ajtowns,2020-01-30 11:23:50,`for (const auto& el : stack) { if (el.size() > MAX_SCRIPT_ELEMENT_SIZE) { ...` ? Probably too gratuitous a change to justify. Likewise `++i` vs `i++` :),https://github.com/bitcoin/bitcoin/pull/18002#discussion_r372894416,372894416,src/script/interpreter.cpp
ajtowns,2020-01-31 04:23:33,Everything else is called `Eval` rather than `Execute`,https://github.com/bitcoin/bitcoin/pull/18002#discussion_r373310915,373310915,src/script/interpreter.cpp
sipa,2020-02-03 04:35:05,"I didn't want to call it ...Eval, as it's not just evaluating a script (EvalScript just executes opcodes, and modifies a stack; this function is actually closer to VerifyScript which maps it to a true/false success overall).",https://github.com/bitcoin/bitcoin/pull/18002#discussion_r373919265,373919265,src/script/interpreter.cpp
theStack,2020-02-07 01:09:48,"Concerning the `stack` parameter: would it make sense to declare it as an rvalue parameter (&&) and pass constructed temporaries in both calls (would need to change `witness.stack` to `{witness.stack.begin(), witness.stack.end()}`, to ensure and clarify that the move-constructor is _always_ involved? Just an idea following the ""explicit is better than implicit"" principle.",https://github.com/bitcoin/bitcoin/pull/18002#discussion_r376168256,376168256,src/script/interpreter.cpp
sipa,2020-02-07 03:25:37,"@theStack Ok, better like this?",https://github.com/bitcoin/bitcoin/pull/18002#discussion_r376198451,376198451,src/script/interpreter.cpp
theStack,2020-02-07 11:24:39,"That was more of a suggestion/question than a concrete wish (you probably have way more C++ experience), but personally I'd prefer it, yes. Interestingly enough, on the first call explicitely calling the constructor would not be needed (passing `{witness.stack.begin(), witness.stack.end() - 1}` is sufficient), while on the second call only `{witness.stack}` would lead to an error and an explicit c",https://github.com/bitcoin/bitcoin/pull/18002#discussion_r376342950,376342950,src/script/interpreter.cpp
egp,2020-02-07 16:31:05,"Why not `return EvalScript(stack, scriptPubKey, flags, checker, sigversion, serror));`",https://github.com/bitcoin/bitcoin/pull/18002#discussion_r376486003,376486003,src/script/interpreter.cpp
sipa,2020-02-07 16:32:39,That would be incorrect. The lines below wouldn't be executed anymore.,https://github.com/bitcoin/bitcoin/pull/18002#discussion_r376486793,376486793,src/script/interpreter.cpp
egp,2020-02-07 16:43:20,"Ah, I see. Sorry.\nI missed that because I am used to FP.",https://github.com/bitcoin/bitcoin/pull/18002#discussion_r376492299,376492299,src/script/interpreter.cpp
sipa,2020-02-07 18:49:55,"Yes, I'm aware it wasn't necessary to invoke the constructor explicitly, but it's probably clearer this way (semantically it's equivalent).",https://github.com/bitcoin/bitcoin/pull/18002#discussion_r376549319,376549319,src/script/interpreter.cpp
ajtowns,2020-02-09 20:31:55,"You could do:\n\n```diff\n-static bool ExecuteWitnessProgram(std::vector<std::vector<unsigned char>>&& stack, const CScript& scriptPubKey, unsigned int flags, SigVersion sigversion, const BaseSignatureChecker& checker, ScriptError* serror)\n+static bool ExecuteWitnessProgram(std::vector<valtype>::const_iterator begin, std::vector<valtype>::const_iterator end, const CScript& scriptPubKey, unsig",https://github.com/bitcoin/bitcoin/pull/18002#discussion_r376812933,376812933,src/script/interpreter.cpp
jnewbery,2020-02-11 16:12:40,"Hi ðŸ™‹ I'd also like to bikeshed this function name please.\n\nMy understanding is that the witness program is the 20/32 byte commitment to the spending condition. The 'witness script' is what is actually executed. Does `ExecuteWitnessScript()` makes more sense as a function name? For both P2WPKH and P2WSH, the program is not actually passed in here.",https://github.com/bitcoin/bitcoin/pull/18002#discussion_r377737871,377737871,src/script/interpreter.cpp
jnewbery,2020-02-11 16:17:02,"calling `set_success()` isn't required here. It only needs to be called once, by `VerifyScript()`. Anything further up the stack can just return true.",https://github.com/bitcoin/bitcoin/pull/18002#discussion_r377740655,377740655,src/script/interpreter.cpp
jonatack,2020-02-12 12:36:50,"agree with @ajtowns, this seems nicer\n```diff\n-    for (unsigned int i = 0; i < stack.size(); i++) {\n-        if (stack.at(i).size() > MAX_SCRIPT_ELEMENT_SIZE) {\n+    for (const auto& el : stack) {\n+        if (el.size() > MAX_SCRIPT_ELEMENT_SIZE) {\n```\n",https://github.com/bitcoin/bitcoin/pull/18002#discussion_r378224169,378224169,src/script/interpreter.cpp
jonatack,2020-02-12 12:38:26,"> calling `set_success()` isn't required here. It only needs to be called once, by `VerifyScript()`\n\nagree with @jnewbery here AFAICT",https://github.com/bitcoin/bitcoin/pull/18002#discussion_r378224871,378224871,src/script/interpreter.cpp
sipa,2020-02-12 19:33:26,"Done. I think the compiler can do an equally good job of detecting missing branches, and it avoids an assertion in consensus code.",https://github.com/bitcoin/bitcoin/pull/18002#discussion_r378467589,378467589,src/script/interpreter.cpp
sipa,2020-02-12 19:34:22,"Done, I'm making style improvements anyway.",https://github.com/bitcoin/bitcoin/pull/18002#discussion_r378468106,378468106,src/script/interpreter.cpp
sipa,2020-02-12 19:34:45,Bikeshed accepted.,https://github.com/bitcoin/bitcoin/pull/18002#discussion_r378468284,378468284,src/script/interpreter.cpp
sipa,2020-02-12 19:34:55,Done.,https://github.com/bitcoin/bitcoin/pull/18002#discussion_r378468354,378468354,src/script/interpreter.cpp
sipa,2020-02-12 19:37:10,"Done, as that makes it also more compatible with #13062.",https://github.com/bitcoin/bitcoin/pull/18002#discussion_r378469508,378469508,src/script/interpreter.cpp
jonatack,2020-02-12 23:42:20,"For my understanding, is there a reason why `auto` would not be preferred here?\n```diff\n-    for (const valtype& elem : stack) {\n+    for (const auto& elem : stack) {\n```",https://github.com/bitcoin/bitcoin/pull/18002#discussion_r378576451,378576451,src/script/interpreter.cpp
sipa,2020-02-18 21:42:56,Personal preference.,https://github.com/bitcoin/bitcoin/pull/18002#discussion_r380952434,380952434,src/script/interpreter.cpp
