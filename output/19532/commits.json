[
  {
    "sha": "92b8001022c96eb70c2b10bfe8f459fae8a062c4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MmI4MDAxMDIyYzk2ZWI3MGMyYjEwYmZlOGY0NTlmYWU4YTA2MmM0",
    "commit": {
      "author": {
        "name": "Amir Ghorbanian",
        "email": "deanghorbanian@gatech.edu",
        "date": "2020-07-15T21:53:54Z"
      },
      "committer": {
        "name": "Amir Ghorbanian",
        "email": "deanghorbanian@gatech.edu",
        "date": "2020-07-15T22:20:38Z"
      },
      "message": "ignore zmq import error from mypy",
      "tree": {
        "sha": "b8e5e26cc4e538a33d56ced792ddfc00f29d4e63",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b8e5e26cc4e538a33d56ced792ddfc00f29d4e63"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/92b8001022c96eb70c2b10bfe8f459fae8a062c4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92b8001022c96eb70c2b10bfe8f459fae8a062c4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/92b8001022c96eb70c2b10bfe8f459fae8a062c4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92b8001022c96eb70c2b10bfe8f459fae8a062c4/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "7ebc365047ff526fdeeb4c5c4c9b6dd035a172a0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ebc365047ff526fdeeb4c5c4c9b6dd035a172a0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7ebc365047ff526fdeeb4c5c4c9b6dd035a172a0"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "cf41cdde75bb9628831376ec71d454def25c003c",
        "filename": "test/functional/interface_zmq.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92b8001022c96eb70c2b10bfe8f459fae8a062c4/test/functional/interface_zmq.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92b8001022c96eb70c2b10bfe8f459fae8a062c4/test/functional/interface_zmq.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_zmq.py?ref=92b8001022c96eb70c2b10bfe8f459fae8a062c4",
        "patch": "@@ -21,7 +21,7 @@ def __init__(self, socket, topic):\n         self.socket = socket\n         self.topic = topic\n \n-        import zmq\n+        import zmq # type: ignore\n         self.socket.setsockopt(zmq.SUBSCRIBE, self.topic)\n \n     def receive(self):"
      },
      {
        "sha": "5e14d35b612321f790175fa8a66f7c859a3309c1",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92b8001022c96eb70c2b10bfe8f459fae8a062c4/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92b8001022c96eb70c2b10bfe8f459fae8a062c4/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=92b8001022c96eb70c2b10bfe8f459fae8a062c4",
        "patch": "@@ -714,7 +714,7 @@ def _initialize_chain_clean(self):\n     def skip_if_no_py3_zmq(self):\n         \"\"\"Attempt to import the zmq package and skip the test if the import fails.\"\"\"\n         try:\n-            import zmq  # noqa\n+            import zmq  # type:ignore\n         except ImportError:\n             raise SkipTest(\"python3-zmq module not available.\")\n "
      }
    ]
  },
  {
    "sha": "a86945cb2b081ef0012cf18d0fdf87b49a68cf3d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphODY5NDVjYjJiMDgxZWYwMDEyY2YxOGQwZmRmODdiNDlhNjhjZjNk",
    "commit": {
      "author": {
        "name": "Amir Ghorbanian",
        "email": "deanghorbanian@gatech.edu",
        "date": "2020-07-15T21:56:12Z"
      },
      "committer": {
        "name": "Amir Ghorbanian",
        "email": "deanghorbanian@gatech.edu",
        "date": "2020-07-15T22:21:12Z"
      },
      "message": "add __init__.py file to data directory\n\nThe data package needs this file to be identified as a package directory for import",
      "tree": {
        "sha": "e872f06843ab278b452f80751ba5db970dc0eac1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e872f06843ab278b452f80751ba5db970dc0eac1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a86945cb2b081ef0012cf18d0fdf87b49a68cf3d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a86945cb2b081ef0012cf18d0fdf87b49a68cf3d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a86945cb2b081ef0012cf18d0fdf87b49a68cf3d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a86945cb2b081ef0012cf18d0fdf87b49a68cf3d/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "92b8001022c96eb70c2b10bfe8f459fae8a062c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92b8001022c96eb70c2b10bfe8f459fae8a062c4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/92b8001022c96eb70c2b10bfe8f459fae8a062c4"
      }
    ],
    "stats": {
      "total": 0,
      "additions": 0,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
        "filename": "test/functional/data/__init__.py",
        "status": "added",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a86945cb2b081ef0012cf18d0fdf87b49a68cf3d/test/functional/data/__init__.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a86945cb2b081ef0012cf18d0fdf87b49a68cf3d/test/functional/data/__init__.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/data/__init__.py?ref=a86945cb2b081ef0012cf18d0fdf87b49a68cf3d"
      }
    ]
  },
  {
    "sha": "7f9cba79fc8248e317806611ef10b0a7faefd1b1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZjljYmE3OWZjODI0OGUzMTc4MDY2MTFlZjEwYjBhN2ZhZWZkMWIx",
    "commit": {
      "author": {
        "name": "Amir Ghorbanian",
        "email": "deanghorbanian@gatech.edu",
        "date": "2020-07-15T22:01:53Z"
      },
      "committer": {
        "name": "Amir Ghorbanian",
        "email": "deanghorbanian@gatech.edu",
        "date": "2020-07-15T22:21:14Z"
      },
      "message": "generate stub files for test_framework package\n\nGenerate necessary stub files for mypy checks.",
      "tree": {
        "sha": "d6df622a92585f531fd2372ceeb4d8e034a1c729",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d6df622a92585f531fd2372ceeb4d8e034a1c729"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7f9cba79fc8248e317806611ef10b0a7faefd1b1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f9cba79fc8248e317806611ef10b0a7faefd1b1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7f9cba79fc8248e317806611ef10b0a7faefd1b1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f9cba79fc8248e317806611ef10b0a7faefd1b1/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "a86945cb2b081ef0012cf18d0fdf87b49a68cf3d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a86945cb2b081ef0012cf18d0fdf87b49a68cf3d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a86945cb2b081ef0012cf18d0fdf87b49a68cf3d"
      }
    ],
    "stats": {
      "total": 1271,
      "additions": 1271,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
        "filename": "test/functional/test_framework/stubs/test_framework/__init__.pyi",
        "status": "added",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f9cba79fc8248e317806611ef10b0a7faefd1b1/test/functional/test_framework/stubs/test_framework/__init__.pyi",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f9cba79fc8248e317806611ef10b0a7faefd1b1/test/functional/test_framework/stubs/test_framework/__init__.pyi",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/stubs/test_framework/__init__.pyi?ref=7f9cba79fc8248e317806611ef10b0a7faefd1b1"
      },
      {
        "sha": "88b9ba49787400edf0e75055861d8d6e0855d7d3",
        "filename": "test/functional/test_framework/stubs/test_framework/address.pyi",
        "status": "added",
        "additions": 35,
        "deletions": 0,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f9cba79fc8248e317806611ef10b0a7faefd1b1/test/functional/test_framework/stubs/test_framework/address.pyi",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f9cba79fc8248e317806611ef10b0a7faefd1b1/test/functional/test_framework/stubs/test_framework/address.pyi",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/stubs/test_framework/address.pyi?ref=7f9cba79fc8248e317806611ef10b0a7faefd1b1",
        "patch": "@@ -0,0 +1,35 @@\n+import enum\n+import unittest\n+from . import segwit_addr as segwit_addr\n+from .script import CScript as CScript, OP_0 as OP_0, hash160 as hash160, hash256 as hash256, sha256 as sha256\n+from .util import hex_str_to_bytes as hex_str_to_bytes\n+from test_framework.util import assert_equal as assert_equal\n+from typing import Any\n+\n+ADDRESS_BCRT1_UNSPENDABLE: str\n+ADDRESS_BCRT1_UNSPENDABLE_DESCRIPTOR: str\n+ADDRESS_BCRT1_P2WSH_OP_TRUE: str\n+\n+class AddressType(enum.Enum):\n+    bech32: str = ...\n+    p2sh_segwit: str = ...\n+    legacy: str = ...\n+\n+chars: str\n+\n+def byte_to_base58(b: Any, version: Any): ...\n+def base58_to_byte(s: Any, verify_checksum: bool = ...): ...\n+def keyhash_to_p2pkh(hash: Any, main: bool = ...): ...\n+def scripthash_to_p2sh(hash: Any, main: bool = ...): ...\n+def key_to_p2pkh(key: Any, main: bool = ...): ...\n+def script_to_p2sh(script: Any, main: bool = ...): ...\n+def key_to_p2sh_p2wpkh(key: Any, main: bool = ...): ...\n+def program_to_witness(version: Any, program: Any, main: bool = ...): ...\n+def script_to_p2wsh(script: Any, main: bool = ...): ...\n+def key_to_p2wpkh(key: Any, main: bool = ...): ...\n+def script_to_p2sh_p2wsh(script: Any, main: bool = ...): ...\n+def check_key(key: Any): ...\n+def check_script(script: Any): ...\n+\n+class TestFrameworkScript(unittest.TestCase):\n+    def test_base58encodedecode(self) -> None: ..."
      },
      {
        "sha": "3a669558e2160b7a48f8401463a98f85a39b34cc",
        "filename": "test/functional/test_framework/stubs/test_framework/authproxy.pyi",
        "status": "added",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f9cba79fc8248e317806611ef10b0a7faefd1b1/test/functional/test_framework/stubs/test_framework/authproxy.pyi",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f9cba79fc8248e317806611ef10b0a7faefd1b1/test/functional/test_framework/stubs/test_framework/authproxy.pyi",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/stubs/test_framework/authproxy.pyi?ref=7f9cba79fc8248e317806611ef10b0a7faefd1b1",
        "patch": "@@ -0,0 +1,22 @@\n+from typing import Any, Optional\n+\n+HTTP_TIMEOUT: int\n+USER_AGENT: str\n+log: Any\n+\n+class JSONRPCException(Exception):\n+    error: Any = ...\n+    http_status: Any = ...\n+    def __init__(self, rpc_error: Any, http_status: Optional[Any] = ...) -> None: ...\n+\n+def EncodeDecimal(o: Any): ...\n+\n+class AuthServiceProxy:\n+    ensure_ascii: Any = ...\n+    timeout: Any = ...\n+    def __init__(self, service_url: Any, service_name: Optional[Any] = ..., timeout: Any = ..., connection: Optional[Any] = ..., ensure_ascii: bool = ...) -> None: ...\n+    def __getattr__(self, name: Any): ...\n+    def get_request(self, *args: Any, **argsn: Any): ...\n+    def __call__(self, *args: Any, **argsn: Any): ...\n+    def batch(self, rpc_call_list: Any): ...\n+    def __truediv__(self, relative_uri: Any): ..."
      },
      {
        "sha": "dd0026eb616ef8f0f535c33ca7be202d21d4e5e3",
        "filename": "test/functional/test_framework/stubs/test_framework/blocktools.pyi",
        "status": "added",
        "additions": 27,
        "deletions": 0,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f9cba79fc8248e317806611ef10b0a7faefd1b1/test/functional/test_framework/stubs/test_framework/blocktools.pyi",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f9cba79fc8248e317806611ef10b0a7faefd1b1/test/functional/test_framework/stubs/test_framework/blocktools.pyi",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/stubs/test_framework/blocktools.pyi?ref=7f9cba79fc8248e317806611ef10b0a7faefd1b1",
        "patch": "@@ -0,0 +1,27 @@\n+import unittest\n+from .address import key_to_p2sh_p2wpkh as key_to_p2sh_p2wpkh, key_to_p2wpkh as key_to_p2wpkh, script_to_p2sh_p2wsh as script_to_p2sh_p2wsh, script_to_p2wsh as script_to_p2wsh\n+from .messages import CBlock as CBlock, COIN as COIN, COutPoint as COutPoint, CTransaction as CTransaction, CTxIn as CTxIn, CTxInWitness as CTxInWitness, CTxOut as CTxOut, FromHex as FromHex, ToHex as ToHex, hash256 as hash256, hex_str_to_bytes as hex_str_to_bytes, ser_uint256 as ser_uint256, sha256 as sha256, uint256_from_str as uint256_from_str\n+from .script import CScript as CScript, CScriptNum as CScriptNum, CScriptOp as CScriptOp, OP_0 as OP_0, OP_1 as OP_1, OP_CHECKMULTISIG as OP_CHECKMULTISIG, OP_CHECKSIG as OP_CHECKSIG, OP_RETURN as OP_RETURN, OP_TRUE as OP_TRUE, hash160 as hash160\n+from .util import assert_equal as assert_equal\n+from typing import Any, Optional\n+\n+MAX_BLOCK_SIGOPS: int\n+TIME_GENESIS_BLOCK: int\n+WITNESS_COMMITMENT_HEADER: bytes\n+\n+def create_block(hashprev: Any, coinbase: Any, ntime: Optional[Any] = ..., *, version: int = ...): ...\n+def get_witness_script(witness_root: Any, witness_nonce: Any): ...\n+def add_witness_commitment(block: Any, nonce: int = ...) -> None: ...\n+def script_BIP34_coinbase_height(height: Any): ...\n+def create_coinbase(height: Any, pubkey: Optional[Any] = ...): ...\n+def create_tx_with_script(prevtx: Any, n: Any, script_sig: bytes = ..., amount: Any, *, script_pub_key: Any = ...): ...\n+def create_transaction(node: Any, txid: Any, to_address: Any, amount: Any): ...\n+def create_raw_transaction(node: Any, txid: Any, to_address: Any, amount: Any): ...\n+def get_legacy_sigopcount_block(block: Any, accurate: bool = ...): ...\n+def get_legacy_sigopcount_tx(tx: Any, accurate: bool = ...): ...\n+def witness_script(use_p2wsh: Any, pubkey: Any): ...\n+def create_witness_tx(node: Any, use_p2wsh: Any, utxo: Any, pubkey: Any, encode_p2sh: Any, amount: Any): ...\n+def send_to_witness(use_p2wsh: Any, node: Any, utxo: Any, pubkey: Any, encode_p2sh: Any, amount: Any, sign: bool = ..., insert_redeem_script: str = ...): ...\n+\n+class TestFrameworkBlockTools(unittest.TestCase):\n+    def test_create_coinbase(self) -> None: ..."
      },
      {
        "sha": "982c6133654e892f4018eaad6c54e6958e44b599",
        "filename": "test/functional/test_framework/stubs/test_framework/coverage.pyi",
        "status": "added",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f9cba79fc8248e317806611ef10b0a7faefd1b1/test/functional/test_framework/stubs/test_framework/coverage.pyi",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f9cba79fc8248e317806611ef10b0a7faefd1b1/test/functional/test_framework/stubs/test_framework/coverage.pyi",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/stubs/test_framework/coverage.pyi?ref=7f9cba79fc8248e317806611ef10b0a7faefd1b1",
        "patch": "@@ -0,0 +1,15 @@\n+from typing import Any, Optional\n+\n+REFERENCE_FILENAME: str\n+\n+class AuthServiceProxyWrapper:\n+    auth_service_proxy_instance: Any = ...\n+    coverage_logfile: Any = ...\n+    def __init__(self, auth_service_proxy_instance: Any, coverage_logfile: Optional[Any] = ...) -> None: ...\n+    def __getattr__(self, name: Any): ...\n+    def __call__(self, *args: Any, **kwargs: Any): ...\n+    def __truediv__(self, relative_uri: Any): ...\n+    def get_request(self, *args: Any, **kwargs: Any): ...\n+\n+def get_filename(dirname: Any, n_node: Any): ...\n+def write_all_rpc_commands(dirname: Any, node: Any): ..."
      },
      {
        "sha": "6503ecea23f4c1fa89ddc9ea1b103b9af2fed73d",
        "filename": "test/functional/test_framework/stubs/test_framework/descriptors.pyi",
        "status": "added",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f9cba79fc8248e317806611ef10b0a7faefd1b1/test/functional/test_framework/stubs/test_framework/descriptors.pyi",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f9cba79fc8248e317806611ef10b0a7faefd1b1/test/functional/test_framework/stubs/test_framework/descriptors.pyi",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/stubs/test_framework/descriptors.pyi?ref=7f9cba79fc8248e317806611ef10b0a7faefd1b1",
        "patch": "@@ -0,0 +1,11 @@\n+from typing import Any\n+\n+INPUT_CHARSET: str\n+CHECKSUM_CHARSET: str\n+GENERATOR: Any\n+\n+def descsum_polymod(symbols: Any): ...\n+def descsum_expand(s: Any): ...\n+def descsum_create(s: Any): ...\n+def descsum_check(s: Any, require: bool = ...): ...\n+def drop_origins(s: Any): ..."
      },
      {
        "sha": "d8bffd53a9ade14ccb7677cd56e30fb9b889d4a4",
        "filename": "test/functional/test_framework/stubs/test_framework/key.pyi",
        "status": "added",
        "additions": 53,
        "deletions": 0,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f9cba79fc8248e317806611ef10b0a7faefd1b1/test/functional/test_framework/stubs/test_framework/key.pyi",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f9cba79fc8248e317806611ef10b0a7faefd1b1/test/functional/test_framework/stubs/test_framework/key.pyi",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/stubs/test_framework/key.pyi?ref=7f9cba79fc8248e317806611ef10b0a7faefd1b1",
        "patch": "@@ -0,0 +1,53 @@\n+from typing import Any\n+\n+def modinv(a: Any, n: Any): ...\n+def jacobi_symbol(n: Any, k: Any): ...\n+def modsqrt(a: Any, p: Any): ...\n+\n+class EllipticCurve:\n+    p: Any = ...\n+    a: Any = ...\n+    b: Any = ...\n+    def __init__(self, p: Any, a: Any, b: Any) -> None: ...\n+    def affine(self, p1: Any): ...\n+    def negate(self, p1: Any): ...\n+    def on_curve(self, p1: Any): ...\n+    def is_x_coord(self, x: Any): ...\n+    def lift_x(self, x: Any): ...\n+    def double(self, p1: Any): ...\n+    def add_mixed(self, p1: Any, p2: Any): ...\n+    def add(self, p1: Any, p2: Any): ...\n+    def mul(self, ps: Any): ...\n+\n+SECP256K1: Any\n+SECP256K1_G: Any\n+SECP256K1_ORDER: int\n+SECP256K1_ORDER_HALF: Any\n+\n+class ECPubKey:\n+    valid: bool = ...\n+    def __init__(self) -> None: ...\n+    p: Any = ...\n+    compressed: bool = ...\n+    def set(self, data: Any) -> None: ...\n+    @property\n+    def is_compressed(self): ...\n+    @property\n+    def is_valid(self): ...\n+    def get_bytes(self): ...\n+    def verify_ecdsa(self, sig: Any, msg: Any, low_s: bool = ...): ...\n+\n+class ECKey:\n+    valid: bool = ...\n+    def __init__(self) -> None: ...\n+    secret: Any = ...\n+    compressed: Any = ...\n+    def set(self, secret: Any, compressed: Any) -> None: ...\n+    def generate(self, compressed: bool = ...) -> None: ...\n+    def get_bytes(self): ...\n+    @property\n+    def is_valid(self): ...\n+    @property\n+    def is_compressed(self): ...\n+    def get_pubkey(self): ...\n+    def sign_ecdsa(self, msg: Any, low_s: bool = ...): ..."
      },
      {
        "sha": "137df86227cbd18c84b6473562458b5ab4e518c1",
        "filename": "test/functional/test_framework/stubs/test_framework/messages.pyi",
        "status": "added",
        "additions": 482,
        "deletions": 0,
        "changes": 482,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f9cba79fc8248e317806611ef10b0a7faefd1b1/test/functional/test_framework/stubs/test_framework/messages.pyi",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f9cba79fc8248e317806611ef10b0a7faefd1b1/test/functional/test_framework/stubs/test_framework/messages.pyi",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/stubs/test_framework/messages.pyi?ref=7f9cba79fc8248e317806611ef10b0a7faefd1b1",
        "patch": "@@ -0,0 +1,482 @@\n+from test_framework.siphash import siphash256 as siphash256\n+from test_framework.util import assert_equal as assert_equal, hex_str_to_bytes as hex_str_to_bytes\n+from typing import Any, Optional\n+\n+MIN_VERSION_SUPPORTED: int\n+MY_VERSION: int\n+MY_SUBVERSION: bytes\n+MY_RELAY: int\n+MAX_LOCATOR_SZ: int\n+MAX_BLOCK_BASE_SIZE: int\n+MAX_BLOOM_FILTER_SIZE: int\n+MAX_BLOOM_HASH_FUNCS: int\n+COIN: int\n+MAX_MONEY: Any\n+BIP125_SEQUENCE_NUMBER: int\n+MAX_PROTOCOL_MESSAGE_LENGTH: int\n+MAX_HEADERS_RESULTS: int\n+MAX_INV_SIZE: int\n+NODE_NETWORK: Any\n+NODE_GETUTXO: Any\n+NODE_BLOOM: Any\n+NODE_WITNESS: Any\n+NODE_NETWORK_LIMITED: Any\n+MSG_TX: int\n+MSG_BLOCK: int\n+MSG_FILTERED_BLOCK: int\n+MSG_CMPCT_BLOCK: int\n+MSG_WITNESS_FLAG: Any\n+MSG_TYPE_MASK: Any\n+FILTER_TYPE_BASIC: int\n+\n+def sha256(s: Any): ...\n+def hash256(s: Any): ...\n+def ser_compact_size(l: Any): ...\n+def deser_compact_size(f: Any): ...\n+def deser_string(f: Any): ...\n+def ser_string(s: Any): ...\n+def deser_uint256(f: Any): ...\n+def ser_uint256(u: Any): ...\n+def uint256_from_str(s: Any): ...\n+def uint256_from_compact(c: Any): ...\n+def deser_vector(f: Any, c: Any): ...\n+def ser_vector(l: Any, ser_function_name: Optional[Any] = ...): ...\n+def deser_uint256_vector(f: Any): ...\n+def ser_uint256_vector(l: Any): ...\n+def deser_string_vector(f: Any): ...\n+def ser_string_vector(l: Any): ...\n+def FromHex(obj: Any, hex_string: Any): ...\n+def ToHex(obj: Any): ...\n+\n+class CAddress:\n+    time: int = ...\n+    nServices: int = ...\n+    pchReserved: Any = ...\n+    ip: str = ...\n+    port: int = ...\n+    def __init__(self) -> None: ...\n+    def deserialize(self, f: Any, *, with_time: bool = ...) -> None: ...\n+    def serialize(self, *, with_time: bool = ...): ...\n+\n+class CInv:\n+    typemap: Any = ...\n+    type: Any = ...\n+    hash: Any = ...\n+    def __init__(self, t: int = ..., h: int = ...) -> None: ...\n+    def deserialize(self, f: Any) -> None: ...\n+    def serialize(self): ...\n+\n+class CBlockLocator:\n+    nVersion: Any = ...\n+    vHave: Any = ...\n+    def __init__(self) -> None: ...\n+    def deserialize(self, f: Any) -> None: ...\n+    def serialize(self): ...\n+\n+class COutPoint:\n+    hash: Any = ...\n+    n: Any = ...\n+    def __init__(self, hash: int = ..., n: int = ...) -> None: ...\n+    def deserialize(self, f: Any) -> None: ...\n+    def serialize(self): ...\n+\n+class CTxIn:\n+    prevout: Any = ...\n+    scriptSig: Any = ...\n+    nSequence: Any = ...\n+    def __init__(self, outpoint: Optional[Any] = ..., scriptSig: bytes = ..., nSequence: int = ...) -> None: ...\n+    def deserialize(self, f: Any) -> None: ...\n+    def serialize(self): ...\n+\n+class CTxOut:\n+    nValue: Any = ...\n+    scriptPubKey: Any = ...\n+    def __init__(self, nValue: int = ..., scriptPubKey: bytes = ...) -> None: ...\n+    def deserialize(self, f: Any) -> None: ...\n+    def serialize(self): ...\n+\n+class CScriptWitness:\n+    stack: Any = ...\n+    def __init__(self) -> None: ...\n+    def is_null(self): ...\n+\n+class CTxInWitness:\n+    scriptWitness: Any = ...\n+    def __init__(self) -> None: ...\n+    def deserialize(self, f: Any) -> None: ...\n+    def serialize(self): ...\n+    def is_null(self): ...\n+\n+class CTxWitness:\n+    vtxinwit: Any = ...\n+    def __init__(self) -> None: ...\n+    def deserialize(self, f: Any) -> None: ...\n+    def serialize(self): ...\n+    def is_null(self): ...\n+\n+class CTransaction:\n+    nVersion: int = ...\n+    vin: Any = ...\n+    vout: Any = ...\n+    wit: Any = ...\n+    nLockTime: int = ...\n+    sha256: Any = ...\n+    hash: Any = ...\n+    def __init__(self, tx: Optional[Any] = ...) -> None: ...\n+    def deserialize(self, f: Any) -> None: ...\n+    def serialize_without_witness(self): ...\n+    def serialize_with_witness(self): ...\n+    def serialize(self): ...\n+    def rehash(self): ...\n+    def calc_sha256(self, with_witness: bool = ...): ...\n+    def is_valid(self): ...\n+\n+class CBlockHeader:\n+    nVersion: Any = ...\n+    hashPrevBlock: Any = ...\n+    hashMerkleRoot: Any = ...\n+    nTime: Any = ...\n+    nBits: Any = ...\n+    nNonce: Any = ...\n+    sha256: Any = ...\n+    hash: Any = ...\n+    def __init__(self, header: Optional[Any] = ...) -> None: ...\n+    def set_null(self) -> None: ...\n+    def deserialize(self, f: Any) -> None: ...\n+    def serialize(self): ...\n+    def calc_sha256(self) -> None: ...\n+    def rehash(self): ...\n+\n+BLOCK_HEADER_SIZE: Any\n+\n+class CBlock(CBlockHeader):\n+    vtx: Any = ...\n+    def __init__(self, header: Optional[Any] = ...) -> None: ...\n+    def deserialize(self, f: Any) -> None: ...\n+    def serialize(self, with_witness: bool = ...): ...\n+    @classmethod\n+    def get_merkle_root(cls, hashes: Any): ...\n+    def calc_merkle_root(self): ...\n+    def calc_witness_merkle_root(self): ...\n+    def is_valid(self): ...\n+    def solve(self) -> None: ...\n+\n+class PrefilledTransaction:\n+    index: Any = ...\n+    tx: Any = ...\n+    def __init__(self, index: int = ..., tx: Optional[Any] = ...) -> None: ...\n+    def deserialize(self, f: Any) -> None: ...\n+    def serialize(self, with_witness: bool = ...): ...\n+    def serialize_without_witness(self): ...\n+    def serialize_with_witness(self): ...\n+\n+class P2PHeaderAndShortIDs:\n+    header: Any = ...\n+    nonce: int = ...\n+    shortids_length: int = ...\n+    shortids: Any = ...\n+    prefilled_txn_length: int = ...\n+    prefilled_txn: Any = ...\n+    def __init__(self) -> None: ...\n+    def deserialize(self, f: Any) -> None: ...\n+    def serialize(self, with_witness: bool = ...): ...\n+\n+class P2PHeaderAndShortWitnessIDs(P2PHeaderAndShortIDs):\n+    def serialize(self): ...\n+\n+def calculate_shortid(k0: Any, k1: Any, tx_hash: Any): ...\n+\n+class HeaderAndShortIDs:\n+    header: Any = ...\n+    nonce: int = ...\n+    shortids: Any = ...\n+    prefilled_txn: Any = ...\n+    use_witness: bool = ...\n+    def __init__(self, p2pheaders_and_shortids: Optional[Any] = ...) -> None: ...\n+    def to_p2p(self): ...\n+    def get_siphash_keys(self): ...\n+    def initialize_from_block(self, block: Any, nonce: int = ..., prefill_list: Optional[Any] = ..., use_witness: bool = ...) -> None: ...\n+\n+class BlockTransactionsRequest:\n+    blockhash: Any = ...\n+    indexes: Any = ...\n+    def __init__(self, blockhash: int = ..., indexes: Optional[Any] = ...) -> None: ...\n+    def deserialize(self, f: Any) -> None: ...\n+    def serialize(self): ...\n+    def from_absolute(self, absolute_indexes: Any) -> None: ...\n+    def to_absolute(self): ...\n+\n+class BlockTransactions:\n+    blockhash: Any = ...\n+    transactions: Any = ...\n+    def __init__(self, blockhash: int = ..., transactions: Optional[Any] = ...) -> None: ...\n+    def deserialize(self, f: Any) -> None: ...\n+    def serialize(self, with_witness: bool = ...): ...\n+\n+class CPartialMerkleTree:\n+    nTransactions: int = ...\n+    vHash: Any = ...\n+    vBits: Any = ...\n+    def __init__(self) -> None: ...\n+    def deserialize(self, f: Any) -> None: ...\n+    def serialize(self): ...\n+\n+class CMerkleBlock:\n+    header: Any = ...\n+    txn: Any = ...\n+    def __init__(self) -> None: ...\n+    def deserialize(self, f: Any) -> None: ...\n+    def serialize(self): ...\n+\n+class msg_version:\n+    msgtype: bytes = ...\n+    nVersion: Any = ...\n+    nServices: Any = ...\n+    nTime: Any = ...\n+    addrTo: Any = ...\n+    addrFrom: Any = ...\n+    nNonce: Any = ...\n+    strSubVer: Any = ...\n+    nStartingHeight: int = ...\n+    nRelay: Any = ...\n+    def __init__(self) -> None: ...\n+    def deserialize(self, f: Any) -> None: ...\n+    def serialize(self): ...\n+\n+class msg_verack:\n+    msgtype: bytes = ...\n+    def __init__(self) -> None: ...\n+    def deserialize(self, f: Any) -> None: ...\n+    def serialize(self): ...\n+\n+class msg_addr:\n+    msgtype: bytes = ...\n+    addrs: Any = ...\n+    def __init__(self) -> None: ...\n+    def deserialize(self, f: Any) -> None: ...\n+    def serialize(self): ...\n+\n+class msg_inv:\n+    msgtype: bytes = ...\n+    inv: Any = ...\n+    def __init__(self, inv: Optional[Any] = ...) -> None: ...\n+    def deserialize(self, f: Any) -> None: ...\n+    def serialize(self): ...\n+\n+class msg_getdata:\n+    msgtype: bytes = ...\n+    inv: Any = ...\n+    def __init__(self, inv: Optional[Any] = ...) -> None: ...\n+    def deserialize(self, f: Any) -> None: ...\n+    def serialize(self): ...\n+\n+class msg_getblocks:\n+    msgtype: bytes = ...\n+    locator: Any = ...\n+    hashstop: int = ...\n+    def __init__(self) -> None: ...\n+    def deserialize(self, f: Any) -> None: ...\n+    def serialize(self): ...\n+\n+class msg_tx:\n+    msgtype: bytes = ...\n+    tx: Any = ...\n+    def __init__(self, tx: Any = ...) -> None: ...\n+    def deserialize(self, f: Any) -> None: ...\n+    def serialize(self): ...\n+\n+class msg_no_witness_tx(msg_tx):\n+    def serialize(self): ...\n+\n+class msg_block:\n+    msgtype: bytes = ...\n+    block: Any = ...\n+    def __init__(self, block: Optional[Any] = ...) -> None: ...\n+    def deserialize(self, f: Any) -> None: ...\n+    def serialize(self): ...\n+\n+class msg_generic:\n+    msgtype: Any = ...\n+    data: Any = ...\n+    def __init__(self, msgtype: Any, data: Optional[Any] = ...) -> None: ...\n+    def serialize(self): ...\n+\n+class msg_no_witness_block(msg_block):\n+    def serialize(self): ...\n+\n+class msg_getaddr:\n+    msgtype: bytes = ...\n+    def __init__(self) -> None: ...\n+    def deserialize(self, f: Any) -> None: ...\n+    def serialize(self): ...\n+\n+class msg_ping:\n+    msgtype: bytes = ...\n+    nonce: Any = ...\n+    def __init__(self, nonce: int = ...) -> None: ...\n+    def deserialize(self, f: Any) -> None: ...\n+    def serialize(self): ...\n+\n+class msg_pong:\n+    msgtype: bytes = ...\n+    nonce: Any = ...\n+    def __init__(self, nonce: int = ...) -> None: ...\n+    def deserialize(self, f: Any) -> None: ...\n+    def serialize(self): ...\n+\n+class msg_mempool:\n+    msgtype: bytes = ...\n+    def __init__(self) -> None: ...\n+    def deserialize(self, f: Any) -> None: ...\n+    def serialize(self): ...\n+\n+class msg_notfound:\n+    msgtype: bytes = ...\n+    vec: Any = ...\n+    def __init__(self, vec: Optional[Any] = ...) -> None: ...\n+    def deserialize(self, f: Any) -> None: ...\n+    def serialize(self): ...\n+\n+class msg_sendheaders:\n+    msgtype: bytes = ...\n+    def __init__(self) -> None: ...\n+    def deserialize(self, f: Any) -> None: ...\n+    def serialize(self): ...\n+\n+class msg_getheaders:\n+    msgtype: bytes = ...\n+    locator: Any = ...\n+    hashstop: int = ...\n+    def __init__(self) -> None: ...\n+    def deserialize(self, f: Any) -> None: ...\n+    def serialize(self): ...\n+\n+class msg_headers:\n+    msgtype: bytes = ...\n+    headers: Any = ...\n+    def __init__(self, headers: Optional[Any] = ...) -> None: ...\n+    def deserialize(self, f: Any) -> None: ...\n+    def serialize(self): ...\n+\n+class msg_merkleblock:\n+    msgtype: bytes = ...\n+    merkleblock: Any = ...\n+    def __init__(self, merkleblock: Optional[Any] = ...) -> None: ...\n+    def deserialize(self, f: Any) -> None: ...\n+    def serialize(self): ...\n+\n+class msg_filterload:\n+    msgtype: bytes = ...\n+    data: Any = ...\n+    nHashFuncs: Any = ...\n+    nTweak: Any = ...\n+    nFlags: Any = ...\n+    def __init__(self, data: bytes = ..., nHashFuncs: int = ..., nTweak: int = ..., nFlags: int = ...) -> None: ...\n+    def deserialize(self, f: Any) -> None: ...\n+    def serialize(self): ...\n+\n+class msg_filteradd:\n+    msgtype: bytes = ...\n+    data: Any = ...\n+    def __init__(self, data: Any) -> None: ...\n+    def deserialize(self, f: Any) -> None: ...\n+    def serialize(self): ...\n+\n+class msg_filterclear:\n+    msgtype: bytes = ...\n+    def __init__(self) -> None: ...\n+    def deserialize(self, f: Any) -> None: ...\n+    def serialize(self): ...\n+\n+class msg_feefilter:\n+    msgtype: bytes = ...\n+    feerate: Any = ...\n+    def __init__(self, feerate: int = ...) -> None: ...\n+    def deserialize(self, f: Any) -> None: ...\n+    def serialize(self): ...\n+\n+class msg_sendcmpct:\n+    msgtype: bytes = ...\n+    announce: bool = ...\n+    version: int = ...\n+    def __init__(self) -> None: ...\n+    def deserialize(self, f: Any) -> None: ...\n+    def serialize(self): ...\n+\n+class msg_cmpctblock:\n+    msgtype: bytes = ...\n+    header_and_shortids: Any = ...\n+    def __init__(self, header_and_shortids: Optional[Any] = ...) -> None: ...\n+    def deserialize(self, f: Any) -> None: ...\n+    def serialize(self): ...\n+\n+class msg_getblocktxn:\n+    msgtype: bytes = ...\n+    block_txn_request: Any = ...\n+    def __init__(self) -> None: ...\n+    def deserialize(self, f: Any) -> None: ...\n+    def serialize(self): ...\n+\n+class msg_blocktxn:\n+    msgtype: bytes = ...\n+    block_transactions: Any = ...\n+    def __init__(self) -> None: ...\n+    def deserialize(self, f: Any) -> None: ...\n+    def serialize(self): ...\n+\n+class msg_no_witness_blocktxn(msg_blocktxn):\n+    def serialize(self): ...\n+\n+class msg_getcfilters:\n+    msgtype: bytes = ...\n+    filter_type: Any = ...\n+    start_height: Any = ...\n+    stop_hash: Any = ...\n+    def __init__(self, filter_type: Any, start_height: Any, stop_hash: Any) -> None: ...\n+    def deserialize(self, f: Any) -> None: ...\n+    def serialize(self): ...\n+\n+class msg_cfilter:\n+    msgtype: bytes = ...\n+    filter_type: Any = ...\n+    block_hash: Any = ...\n+    filter_data: Any = ...\n+    def __init__(self, filter_type: Optional[Any] = ..., block_hash: Optional[Any] = ..., filter_data: Optional[Any] = ...) -> None: ...\n+    def deserialize(self, f: Any) -> None: ...\n+    def serialize(self): ...\n+\n+class msg_getcfheaders:\n+    msgtype: bytes = ...\n+    filter_type: Any = ...\n+    start_height: Any = ...\n+    stop_hash: Any = ...\n+    def __init__(self, filter_type: Any, start_height: Any, stop_hash: Any) -> None: ...\n+    def deserialize(self, f: Any) -> None: ...\n+    def serialize(self): ...\n+\n+class msg_cfheaders:\n+    msgtype: bytes = ...\n+    filter_type: Any = ...\n+    stop_hash: Any = ...\n+    prev_header: Any = ...\n+    hashes: Any = ...\n+    def __init__(self, filter_type: Optional[Any] = ..., stop_hash: Optional[Any] = ..., prev_header: Optional[Any] = ..., hashes: Optional[Any] = ...) -> None: ...\n+    def deserialize(self, f: Any) -> None: ...\n+    def serialize(self): ...\n+\n+class msg_getcfcheckpt:\n+    msgtype: bytes = ...\n+    filter_type: Any = ...\n+    stop_hash: Any = ...\n+    def __init__(self, filter_type: Any, stop_hash: Any) -> None: ...\n+    def deserialize(self, f: Any) -> None: ...\n+    def serialize(self): ...\n+\n+class msg_cfcheckpt:\n+    msgtype: bytes = ...\n+    filter_type: Any = ...\n+    stop_hash: Any = ...\n+    headers: Any = ...\n+    def __init__(self, filter_type: Optional[Any] = ..., stop_hash: Optional[Any] = ..., headers: Optional[Any] = ...) -> None: ...\n+    def deserialize(self, f: Any) -> None: ...\n+    def serialize(self): ..."
      },
      {
        "sha": "c0f697a2add2b9ee830dc3f3f8d9e6f8ef29c073",
        "filename": "test/functional/test_framework/stubs/test_framework/mininode.pyi",
        "status": "added",
        "additions": 107,
        "deletions": 0,
        "changes": 107,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f9cba79fc8248e317806611ef10b0a7faefd1b1/test/functional/test_framework/stubs/test_framework/mininode.pyi",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f9cba79fc8248e317806611ef10b0a7faefd1b1/test/functional/test_framework/stubs/test_framework/mininode.pyi",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/stubs/test_framework/mininode.pyi?ref=7f9cba79fc8248e317806611ef10b0a7faefd1b1",
        "patch": "@@ -0,0 +1,107 @@\n+import asyncio\n+import threading\n+from test_framework.messages import CBlockHeader as CBlockHeader, MAX_HEADERS_RESULTS as MAX_HEADERS_RESULTS, MIN_VERSION_SUPPORTED as MIN_VERSION_SUPPORTED, MSG_BLOCK as MSG_BLOCK, MSG_TX as MSG_TX, MSG_TYPE_MASK as MSG_TYPE_MASK, NODE_NETWORK as NODE_NETWORK, NODE_WITNESS as NODE_WITNESS, msg_addr as msg_addr, msg_block as msg_block, msg_blocktxn as msg_blocktxn, msg_cfcheckpt as msg_cfcheckpt, msg_cfheaders as msg_cfheaders, msg_cfilter as msg_cfilter, msg_cmpctblock as msg_cmpctblock, msg_feefilter as msg_feefilter, msg_filteradd as msg_filteradd, msg_filterclear as msg_filterclear, msg_filterload as msg_filterload, msg_getaddr as msg_getaddr, msg_getblocks as msg_getblocks, msg_getblocktxn as msg_getblocktxn, msg_getdata as msg_getdata, msg_getheaders as msg_getheaders, msg_headers as msg_headers, msg_inv as msg_inv, msg_mempool as msg_mempool, msg_merkleblock as msg_merkleblock, msg_notfound as msg_notfound, msg_ping as msg_ping, msg_pong as msg_pong, msg_sendcmpct as msg_sendcmpct, msg_sendheaders as msg_sendheaders, msg_tx as msg_tx, msg_verack as msg_verack, msg_version as msg_version, sha256 as sha256\n+from test_framework.util import wait_until as wait_until\n+from typing import Any, Optional\n+\n+logger: Any\n+MESSAGEMAP: Any\n+MAGIC_BYTES: Any\n+\n+class P2PConnection(asyncio.Protocol):\n+    def __init__(self) -> None: ...\n+    @property\n+    def is_connected(self): ...\n+    timeout_factor: Any = ...\n+    dstaddr: Any = ...\n+    dstport: Any = ...\n+    on_connection_send_msg: Any = ...\n+    recvbuf: bytes = ...\n+    magic_bytes: Any = ...\n+    def peer_connect(self, dstaddr: Any, dstport: Any, net: Any, timeout_factor: Any): ...\n+    def peer_disconnect(self): ...\n+    def connection_made(self, transport: Any) -> None: ...\n+    def connection_lost(self, exc: Any) -> None: ...\n+    def data_received(self, t: Any) -> None: ...\n+    def on_message(self, message: Any) -> None: ...\n+    def send_message(self, message: Any): ...\n+    def send_raw_message(self, raw_message_bytes: Any) -> None: ...\n+    def build_message(self, message: Any): ...\n+\n+class P2PInterface(P2PConnection):\n+    message_count: Any = ...\n+    last_message: Any = ...\n+    ping_counter: int = ...\n+    nServices: int = ...\n+    def __init__(self) -> None: ...\n+    on_connection_send_msg: Any = ...\n+    def peer_connect(self, *args: Any, services: Any = ..., send_version: bool = ..., **kwargs: Any): ...\n+    def on_message(self, message: Any) -> None: ...\n+    def on_open(self) -> None: ...\n+    def on_close(self) -> None: ...\n+    def on_addr(self, message: Any) -> None: ...\n+    def on_block(self, message: Any) -> None: ...\n+    def on_blocktxn(self, message: Any) -> None: ...\n+    def on_cfcheckpt(self, message: Any) -> None: ...\n+    def on_cfheaders(self, message: Any) -> None: ...\n+    def on_cfilter(self, message: Any) -> None: ...\n+    def on_cmpctblock(self, message: Any) -> None: ...\n+    def on_feefilter(self, message: Any) -> None: ...\n+    def on_filteradd(self, message: Any) -> None: ...\n+    def on_filterclear(self, message: Any) -> None: ...\n+    def on_filterload(self, message: Any) -> None: ...\n+    def on_getaddr(self, message: Any) -> None: ...\n+    def on_getblocks(self, message: Any) -> None: ...\n+    def on_getblocktxn(self, message: Any) -> None: ...\n+    def on_getdata(self, message: Any) -> None: ...\n+    def on_getheaders(self, message: Any) -> None: ...\n+    def on_headers(self, message: Any) -> None: ...\n+    def on_mempool(self, message: Any) -> None: ...\n+    def on_merkleblock(self, message: Any) -> None: ...\n+    def on_notfound(self, message: Any) -> None: ...\n+    def on_pong(self, message: Any) -> None: ...\n+    def on_sendcmpct(self, message: Any) -> None: ...\n+    def on_sendheaders(self, message: Any) -> None: ...\n+    def on_tx(self, message: Any) -> None: ...\n+    def on_inv(self, message: Any) -> None: ...\n+    def on_ping(self, message: Any) -> None: ...\n+    def on_verack(self, message: Any) -> None: ...\n+    def on_version(self, message: Any) -> None: ...\n+    def wait_until(self, test_function: Any, timeout: int = ...) -> None: ...\n+    def wait_for_disconnect(self, timeout: int = ...): ...\n+    def wait_for_tx(self, txid: Any, timeout: int = ...): ...\n+    def wait_for_block(self, blockhash: Any, timeout: int = ...): ...\n+    def wait_for_header(self, blockhash: Any, timeout: int = ...): ...\n+    def wait_for_merkleblock(self, blockhash: Any, timeout: int = ...): ...\n+    def wait_for_getdata(self, hash_list: Any, timeout: int = ...): ...\n+    def wait_for_getheaders(self, timeout: int = ...): ...\n+    def wait_for_inv(self, expected_inv: Any, timeout: int = ...): ...\n+    def wait_for_verack(self, timeout: int = ...): ...\n+    def send_and_ping(self, message: Any, timeout: int = ...) -> None: ...\n+    def sync_with_ping(self, timeout: int = ...): ...\n+\n+mininode_lock: Any\n+\n+class NetworkThread(threading.Thread):\n+    network_event_loop: Any = ...\n+    def __init__(self) -> None: ...\n+    def run(self) -> None: ...\n+    def close(self, timeout: int = ...): ...\n+\n+class P2PDataStore(P2PInterface):\n+    block_store: Any = ...\n+    last_block_hash: str = ...\n+    tx_store: Any = ...\n+    getdata_requests: Any = ...\n+    def __init__(self) -> None: ...\n+    def on_getdata(self, message: Any) -> None: ...\n+    def on_getheaders(self, message: Any) -> None: ...\n+    def send_blocks_and_test(self, blocks: Any, node: Any, *, success: bool = ..., force_send: bool = ..., reject_reason: Optional[Any] = ..., expect_disconnect: bool = ..., timeout: int = ...): ...\n+    def send_txs_and_test(self, txs: Any, node: Any, *, success: bool = ..., expect_disconnect: bool = ..., reject_reason: Optional[Any] = ...) -> None: ...\n+\n+class P2PTxInvStore(P2PInterface):\n+    tx_invs_received: Any = ...\n+    def __init__(self) -> None: ...\n+    def on_inv(self, message: Any) -> None: ...\n+    def get_invs(self): ...\n+    def wait_for_broadcast(self, txns: Any, timeout: int = ...): ..."
      },
      {
        "sha": "de1d13a9d9cf149cfcdf141b5b8ae44a44709487",
        "filename": "test/functional/test_framework/stubs/test_framework/netutil.pyi",
        "status": "added",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f9cba79fc8248e317806611ef10b0a7faefd1b1/test/functional/test_framework/stubs/test_framework/netutil.pyi",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f9cba79fc8248e317806611ef10b0a7faefd1b1/test/functional/test_framework/stubs/test_framework/netutil.pyi",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/stubs/test_framework/netutil.pyi?ref=7f9cba79fc8248e317806611ef10b0a7faefd1b1",
        "patch": "@@ -0,0 +1,10 @@\n+from typing import Any\n+\n+STATE_LISTEN: str\n+\n+def get_socket_inodes(pid: Any): ...\n+def netstat(typ: str = ...): ...\n+def get_bind_addrs(pid: Any): ...\n+def all_interfaces(): ...\n+def addr_to_hex(addr: Any): ...\n+def test_ipv6_local(): ..."
      },
      {
        "sha": "0f38ef5f3f7e7c054685873495a81c1bbc05140a",
        "filename": "test/functional/test_framework/stubs/test_framework/script.pyi",
        "status": "added",
        "additions": 172,
        "deletions": 0,
        "changes": 172,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f9cba79fc8248e317806611ef10b0a7faefd1b1/test/functional/test_framework/stubs/test_framework/script.pyi",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f9cba79fc8248e317806611ef10b0a7faefd1b1/test/functional/test_framework/stubs/test_framework/script.pyi",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/stubs/test_framework/script.pyi?ref=7f9cba79fc8248e317806611ef10b0a7faefd1b1",
        "patch": "@@ -0,0 +1,172 @@\n+import unittest\n+from .messages import CTransaction as CTransaction, CTxOut as CTxOut, hash256 as hash256, ser_string as ser_string, ser_uint256 as ser_uint256, sha256 as sha256, uint256_from_str as uint256_from_str\n+from typing import Any, Dict\n+\n+MAX_SCRIPT_ELEMENT_SIZE: int\n+OPCODE_NAMES: Dict[CScriptOp, str]\n+\n+def hash160(s: Any): ...\n+def bn2vch(v: Any): ...\n+\n+class CScriptOp(int):\n+    @staticmethod\n+    def encode_op_pushdata(d: Any): ...\n+    @staticmethod\n+    def encode_op_n(n: Any): ...\n+    def decode_op_n(self): ...\n+    def is_small_int(self): ...\n+    def __new__(cls, n: Any): ...\n+\n+OP_0: Any\n+OP_FALSE = OP_0\n+OP_PUSHDATA1: Any\n+OP_PUSHDATA2: Any\n+OP_PUSHDATA4: Any\n+OP_1NEGATE: Any\n+OP_RESERVED: Any\n+OP_1: Any\n+OP_TRUE = OP_1\n+OP_2: Any\n+OP_3: Any\n+OP_4: Any\n+OP_5: Any\n+OP_6: Any\n+OP_7: Any\n+OP_8: Any\n+OP_9: Any\n+OP_10: Any\n+OP_11: Any\n+OP_12: Any\n+OP_13: Any\n+OP_14: Any\n+OP_15: Any\n+OP_16: Any\n+OP_NOP: Any\n+OP_VER: Any\n+OP_IF: Any\n+OP_NOTIF: Any\n+OP_VERIF: Any\n+OP_VERNOTIF: Any\n+OP_ELSE: Any\n+OP_ENDIF: Any\n+OP_VERIFY: Any\n+OP_RETURN: Any\n+OP_TOALTSTACK: Any\n+OP_FROMALTSTACK: Any\n+OP_2DROP: Any\n+OP_2DUP: Any\n+OP_3DUP: Any\n+OP_2OVER: Any\n+OP_2ROT: Any\n+OP_2SWAP: Any\n+OP_IFDUP: Any\n+OP_DEPTH: Any\n+OP_DROP: Any\n+OP_DUP: Any\n+OP_NIP: Any\n+OP_OVER: Any\n+OP_PICK: Any\n+OP_ROLL: Any\n+OP_ROT: Any\n+OP_SWAP: Any\n+OP_TUCK: Any\n+OP_CAT: Any\n+OP_SUBSTR: Any\n+OP_LEFT: Any\n+OP_RIGHT: Any\n+OP_SIZE: Any\n+OP_INVERT: Any\n+OP_AND: Any\n+OP_OR: Any\n+OP_XOR: Any\n+OP_EQUAL: Any\n+OP_EQUALVERIFY: Any\n+OP_RESERVED1: Any\n+OP_RESERVED2: Any\n+OP_1ADD: Any\n+OP_1SUB: Any\n+OP_2MUL: Any\n+OP_2DIV: Any\n+OP_NEGATE: Any\n+OP_ABS: Any\n+OP_NOT: Any\n+OP_0NOTEQUAL: Any\n+OP_ADD: Any\n+OP_SUB: Any\n+OP_MUL: Any\n+OP_DIV: Any\n+OP_MOD: Any\n+OP_LSHIFT: Any\n+OP_RSHIFT: Any\n+OP_BOOLAND: Any\n+OP_BOOLOR: Any\n+OP_NUMEQUAL: Any\n+OP_NUMEQUALVERIFY: Any\n+OP_NUMNOTEQUAL: Any\n+OP_LESSTHAN: Any\n+OP_GREATERTHAN: Any\n+OP_LESSTHANOREQUAL: Any\n+OP_GREATERTHANOREQUAL: Any\n+OP_MIN: Any\n+OP_MAX: Any\n+OP_WITHIN: Any\n+OP_RIPEMD160: Any\n+OP_SHA1: Any\n+OP_SHA256: Any\n+OP_HASH160: Any\n+OP_HASH256: Any\n+OP_CODESEPARATOR: Any\n+OP_CHECKSIG: Any\n+OP_CHECKSIGVERIFY: Any\n+OP_CHECKMULTISIG: Any\n+OP_CHECKMULTISIGVERIFY: Any\n+OP_NOP1: Any\n+OP_CHECKLOCKTIMEVERIFY: Any\n+OP_CHECKSEQUENCEVERIFY: Any\n+OP_NOP4: Any\n+OP_NOP5: Any\n+OP_NOP6: Any\n+OP_NOP7: Any\n+OP_NOP8: Any\n+OP_NOP9: Any\n+OP_NOP10: Any\n+OP_SMALLINTEGER: Any\n+OP_PUBKEYS: Any\n+OP_PUBKEYHASH: Any\n+OP_PUBKEY: Any\n+OP_INVALIDOPCODE: Any\n+\n+class CScriptInvalidError(Exception): ...\n+\n+class CScriptTruncatedPushDataError(CScriptInvalidError):\n+    data: Any = ...\n+    def __init__(self, msg: Any, data: Any) -> None: ...\n+\n+class CScriptNum:\n+    value: Any = ...\n+    def __init__(self, d: int = ...) -> None: ...\n+    @staticmethod\n+    def encode(obj: Any): ...\n+    @staticmethod\n+    def decode(vch: Any): ...\n+\n+class CScript(bytes):\n+    def __add__(self, other: Any) -> None: ...\n+    def join(self, iterable: Any) -> None: ...\n+    def __new__(cls, value: bytes = ...): ...\n+    def raw_iter(self) -> None: ...\n+    def __iter__(self) -> Any: ...\n+    def GetSigOpCount(self, fAccurate: Any): ...\n+\n+SIGHASH_ALL: int\n+SIGHASH_NONE: int\n+SIGHASH_SINGLE: int\n+SIGHASH_ANYONECANPAY: int\n+\n+def FindAndDelete(script: Any, sig: Any): ...\n+def LegacySignatureHash(script: Any, txTo: Any, inIdx: Any, hashtype: Any): ...\n+def SegwitV0SignatureHash(script: Any, txTo: Any, inIdx: Any, hashtype: Any, amount: Any): ...\n+\n+class TestFrameworkScript(unittest.TestCase):\n+    def test_bn2vch(self) -> None: ...\n+    def test_cscriptnum_encoding(self) -> None: ..."
      },
      {
        "sha": "4e5b2e8e6620d29b4ac14de38dc8cb94a0f6334d",
        "filename": "test/functional/test_framework/stubs/test_framework/script_util.pyi",
        "status": "added",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f9cba79fc8248e317806611ef10b0a7faefd1b1/test/functional/test_framework/stubs/test_framework/script_util.pyi",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f9cba79fc8248e317806611ef10b0a7faefd1b1/test/functional/test_framework/stubs/test_framework/script_util.pyi",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/stubs/test_framework/script_util.pyi?ref=7f9cba79fc8248e317806611ef10b0a7faefd1b1",
        "patch": "@@ -0,0 +1,5 @@\n+from test_framework.script import CScript as CScript\n+from typing import Any\n+\n+DUMMY_P2WPKH_SCRIPT: Any\n+DUMMY_2_P2WPKH_SCRIPT: Any"
      },
      {
        "sha": "643fcdb98d1a1457793f25b8e5e0fbb5e7f3516f",
        "filename": "test/functional/test_framework/stubs/test_framework/segwit_addr.pyi",
        "status": "added",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f9cba79fc8248e317806611ef10b0a7faefd1b1/test/functional/test_framework/stubs/test_framework/segwit_addr.pyi",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f9cba79fc8248e317806611ef10b0a7faefd1b1/test/functional/test_framework/stubs/test_framework/segwit_addr.pyi",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/stubs/test_framework/segwit_addr.pyi?ref=7f9cba79fc8248e317806611ef10b0a7faefd1b1",
        "patch": "@@ -0,0 +1,13 @@\n+from typing import Any\n+\n+CHARSET: str\n+\n+def bech32_polymod(values: Any): ...\n+def bech32_hrp_expand(hrp: Any): ...\n+def bech32_verify_checksum(hrp: Any, data: Any): ...\n+def bech32_create_checksum(hrp: Any, data: Any): ...\n+def bech32_encode(hrp: Any, data: Any): ...\n+def bech32_decode(bech: Any): ...\n+def convertbits(data: Any, frombits: Any, tobits: Any, pad: bool = ...): ...\n+def decode(hrp: Any, addr: Any): ...\n+def encode(hrp: Any, witver: Any, witprog: Any): ..."
      },
      {
        "sha": "13d4bceb35288db6210c7b5f32fb9ffb00524664",
        "filename": "test/functional/test_framework/stubs/test_framework/siphash.pyi",
        "status": "added",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f9cba79fc8248e317806611ef10b0a7faefd1b1/test/functional/test_framework/stubs/test_framework/siphash.pyi",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f9cba79fc8248e317806611ef10b0a7faefd1b1/test/functional/test_framework/stubs/test_framework/siphash.pyi",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/stubs/test_framework/siphash.pyi?ref=7f9cba79fc8248e317806611ef10b0a7faefd1b1",
        "patch": "@@ -0,0 +1,5 @@\n+from typing import Any\n+\n+def rotl64(n: Any, b: Any): ...\n+def siphash_round(v0: Any, v1: Any, v2: Any, v3: Any): ...\n+def siphash256(k0: Any, k1: Any, h: Any): ..."
      },
      {
        "sha": "8068864618f828374816181219d0e39d56f85c2d",
        "filename": "test/functional/test_framework/stubs/test_framework/socks5.pyi",
        "status": "added",
        "additions": 46,
        "deletions": 0,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f9cba79fc8248e317806611ef10b0a7faefd1b1/test/functional/test_framework/stubs/test_framework/socks5.pyi",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f9cba79fc8248e317806611ef10b0a7faefd1b1/test/functional/test_framework/stubs/test_framework/socks5.pyi",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/stubs/test_framework/socks5.pyi?ref=7f9cba79fc8248e317806611ef10b0a7faefd1b1",
        "patch": "@@ -0,0 +1,46 @@\n+from typing import Any\n+\n+logger: Any\n+\n+class Command:\n+    CONNECT: int = ...\n+\n+class AddressType:\n+    IPV4: int = ...\n+    DOMAINNAME: int = ...\n+    IPV6: int = ...\n+\n+def recvall(s: Any, n: Any): ...\n+\n+class Socks5Configuration:\n+    addr: Any = ...\n+    af: Any = ...\n+    unauth: bool = ...\n+    auth: bool = ...\n+    def __init__(self) -> None: ...\n+\n+class Socks5Command:\n+    cmd: Any = ...\n+    atyp: Any = ...\n+    addr: Any = ...\n+    port: Any = ...\n+    username: Any = ...\n+    password: Any = ...\n+    def __init__(self, cmd: Any, atyp: Any, addr: Any, port: Any, username: Any, password: Any) -> None: ...\n+\n+class Socks5Connection:\n+    serv: Any = ...\n+    conn: Any = ...\n+    def __init__(self, serv: Any, conn: Any) -> None: ...\n+    def handle(self) -> None: ...\n+\n+class Socks5Server:\n+    conf: Any = ...\n+    s: Any = ...\n+    running: bool = ...\n+    thread: Any = ...\n+    queue: Any = ...\n+    def __init__(self, conf: Any) -> None: ...\n+    def run(self) -> None: ...\n+    def start(self) -> None: ...\n+    def stop(self) -> None: ..."
      },
      {
        "sha": "b701b73e11f68abbbeed3136dc22394f3618dba1",
        "filename": "test/functional/test_framework/stubs/test_framework/test_framework.pyi",
        "status": "added",
        "additions": 74,
        "deletions": 0,
        "changes": 74,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f9cba79fc8248e317806611ef10b0a7faefd1b1/test/functional/test_framework/stubs/test_framework/test_framework.pyi",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f9cba79fc8248e317806611ef10b0a7faefd1b1/test/functional/test_framework/stubs/test_framework/test_framework.pyi",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/stubs/test_framework/test_framework.pyi?ref=7f9cba79fc8248e317806611ef10b0a7faefd1b1",
        "patch": "@@ -0,0 +1,74 @@\n+from . import coverage as coverage\n+from .authproxy import JSONRPCException as JSONRPCException\n+from .mininode import NetworkThread as NetworkThread\n+from .test_node import TestNode as TestNode\n+from .util import MAX_NODES as MAX_NODES, PortSeed as PortSeed, assert_equal as assert_equal, check_json_precision as check_json_precision, connect_nodes as connect_nodes, disconnect_nodes as disconnect_nodes, get_datadir_path as get_datadir_path, initialize_datadir as initialize_datadir\n+from enum import Enum\n+from typing import Any, Optional\n+\n+class TestStatus(Enum):\n+    PASSED: int = ...\n+    FAILED: int = ...\n+    SKIPPED: int = ...\n+\n+TEST_EXIT_PASSED: int\n+TEST_EXIT_FAILED: int\n+TEST_EXIT_SKIPPED: int\n+TMPDIR_PREFIX: str\n+\n+class SkipTest(Exception):\n+    message: Any = ...\n+    def __init__(self, message: Any) -> None: ...\n+\n+class BitcoinTestMetaClass(type):\n+    def __new__(cls, clsname: Any, bases: Any, dct: Any): ...\n+\n+class BitcoinTestFramework(metaclass=BitcoinTestMetaClass):\n+    chain: str = ...\n+    setup_clean_chain: bool = ...\n+    nodes: Any = ...\n+    network_thread: Any = ...\n+    rpc_timeout: int = ...\n+    supports_cli: bool = ...\n+    bind_to_localhost_only: bool = ...\n+    def __init__(self) -> None: ...\n+    success: Any = ...\n+    def main(self) -> None: ...\n+    options: Any = ...\n+    def parse_args(self) -> None: ...\n+    config: Any = ...\n+    def setup(self) -> None: ...\n+    def shutdown(self): ...\n+    def set_test_params(self) -> None: ...\n+    def add_options(self, parser: Any) -> None: ...\n+    def skip_test_if_missing_module(self) -> None: ...\n+    def setup_chain(self) -> None: ...\n+    def setup_network(self) -> None: ...\n+    def setup_nodes(self) -> None: ...\n+    def import_deterministic_coinbase_privkeys(self) -> None: ...\n+    def run_test(self) -> None: ...\n+    def add_nodes(self, num_nodes: int, extra_args: Any=..., *, rpchost: Any=..., binary: Any=..., binary_cli: Any=..., versions: Any=...) -> Any: ...\n+    def start_node(self, i: Any, *args: Any, **kwargs: Any) -> None: ...\n+    def start_nodes(self, extra_args: Optional[Any] = ..., *args: Any, **kwargs: Any) -> None: ...\n+    def stop_node(self, i: Any, expected_stderr: str = ..., wait: int = ...) -> None: ...\n+    def stop_nodes(self, wait: int = ...) -> None: ...\n+    def restart_node(self, i: Any, extra_args: Optional[Any] = ...) -> None: ...\n+    def wait_for_node_exit(self, i: Any, timeout: Any) -> None: ...\n+    def connect_nodes(self, a: Any, b: Any) -> None: ...\n+    def disconnect_nodes(self, a: Any, b: Any) -> None: ...\n+    def split_network(self) -> None: ...\n+    def join_network(self) -> None: ...\n+    def sync_blocks(self, nodes: Optional[Any] = ..., wait: int = ..., timeout: int = ...) -> None: ...\n+    def sync_mempools(self, nodes: Optional[Any] = ..., wait: int = ..., timeout: int = ..., flush_scheduler: bool = ...) -> None: ...\n+    def sync_all(self, nodes: Optional[Any] = ...) -> None: ...\n+    def skip_if_no_py3_zmq(self) -> None: ...\n+    def skip_if_no_bitcoind_zmq(self) -> None: ...\n+    def skip_if_no_wallet(self) -> None: ...\n+    def skip_if_no_wallet_tool(self) -> None: ...\n+    def skip_if_no_cli(self) -> None: ...\n+    def skip_if_no_previous_releases(self) -> None: ...\n+    def has_previous_releases(self): ...\n+    def is_cli_compiled(self): ...\n+    def is_wallet_compiled(self): ...\n+    def is_wallet_tool_compiled(self): ...\n+    def is_zmq_compiled(self): ..."
      },
      {
        "sha": "a22ccb96bfad0c11f2d1b8b8981f94bc863ccbc3",
        "filename": "test/functional/test_framework/stubs/test_framework/test_node.pyi",
        "status": "added",
        "additions": 105,
        "deletions": 0,
        "changes": 105,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f9cba79fc8248e317806611ef10b0a7faefd1b1/test/functional/test_framework/stubs/test_framework/test_node.pyi",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f9cba79fc8248e317806611ef10b0a7faefd1b1/test/functional/test_framework/stubs/test_framework/test_node.pyi",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/stubs/test_framework/test_node.pyi?ref=7f9cba79fc8248e317806611ef10b0a7faefd1b1",
        "patch": "@@ -0,0 +1,105 @@\n+from .authproxy import JSONRPCException as JSONRPCException\n+from .descriptors import descsum_create as descsum_create\n+from .messages import MY_SUBVERSION as MY_SUBVERSION\n+from .util import EncodeDecimal as EncodeDecimal, MAX_NODES as MAX_NODES, append_config as append_config, delete_cookie_file as delete_cookie_file, get_auth_cookie as get_auth_cookie, get_rpc_proxy as get_rpc_proxy, p2p_port as p2p_port, rpc_url as rpc_url, wait_until as wait_until\n+from collections import namedtuple\n+from enum import Enum\n+from typing import Any, Optional\n+\n+BITCOIND_PROC_WAIT_TIMEOUT: int\n+\n+class FailedToStartError(Exception): ...\n+\n+class ErrorMatch(Enum):\n+    FULL_TEXT: int = ...\n+    FULL_REGEX: int = ...\n+    PARTIAL_REGEX: int = ...\n+\n+class TestNode:\n+    index: Any = ...\n+    datadir: Any = ...\n+    bitcoinconf: Any = ...\n+    stdout_dir: Any = ...\n+    stderr_dir: Any = ...\n+    chain: Any = ...\n+    rpchost: Any = ...\n+    rpc_timeout: Any = ...\n+    binary: Any = ...\n+    coverage_dir: Any = ...\n+    cwd: Any = ...\n+    descriptors: Any = ...\n+    extra_args: Any = ...\n+    version: Any = ...\n+    args: Any = ...\n+    cli: Any = ...\n+    use_cli: Any = ...\n+    start_perf: Any = ...\n+    running: bool = ...\n+    process: Any = ...\n+    rpc_connected: bool = ...\n+    rpc: Any = ...\n+    url: Any = ...\n+    log: Any = ...\n+    cleanup_on_exit: bool = ...\n+    perf_subprocesses: Any = ...\n+    p2ps: Any = ...\n+    timeout_factor: Any = ...\n+    def __init__(self, i: Any, datadir: Any, chain: Any, rpchost: Any, timewait: Any, timeout_factor: Any, bitcoind: Any, bitcoin_cli: Any, coverage_dir: Any, cwd: Any, *, extra_conf: Optional[Any] = ..., extra_args: Optional[Any] = ..., use_cli: bool = ..., start_perf: bool = ..., use_valgrind: bool = ..., version: Optional[Any] = ..., descriptors: bool = ...) -> None: ...\n+\n+    AddressKeyPair = namedtuple('AddressKeyPair', ['address', 'key'])\n+    PRIV_KEYS: Any = ...\n+    def get_deterministic_priv_key(self): ...\n+    def __del__(self) -> None: ...\n+    def __getattr__(self, name: Any): ...\n+    stderr: Any = ...\n+    stdout: Any = ...\n+    def start(self, extra_args: Optional[Any] = ..., *, cwd: Optional[Any] = ..., stdout: Optional[Any] = ..., stderr: Optional[Any] = ..., **kwargs: Any) -> None: ...\n+    def wait_for_rpc_connection(self): ...\n+    def wait_for_cookie_credentials(self) -> None: ...\n+    def generate(self, nblocks: Any, maxtries: int = ...): ...\n+    def get_wallet_rpc(self, wallet_name: Any): ...\n+    def version_is_at_least(self, ver: Any): ...\n+    def stop_node(self, expected_stderr: str = ..., wait: int = ...) -> None: ...\n+    def is_node_stopped(self): ...\n+    def wait_until_stopped(self, timeout: Any = ...) -> None: ...\n+    def assert_debug_log(self, expected_msgs: Any, unexpected_msgs: Optional[Any] = ..., timeout: int = ...) -> None: ...\n+    def profile_with_perf(self, profile_name: Any) -> None: ...\n+    def assert_start_raises_init_error(self, extra_args: Optional[Any] = ..., expected_msg: Optional[Any] = ..., match: Any = ..., *args: Any, **kwargs: Any) -> None: ...\n+    def add_p2p_connection(self, p2p_conn: Any, *, wait_for_verack: bool = ..., **kwargs: Any): ...\n+    @property\n+    def p2p(self): ...\n+    def num_connected_mininodes(self): ...\n+    def disconnect_p2ps(self): ...\n+\n+class TestNodeCLIAttr:\n+    cli: Any = ...\n+    command: Any = ...\n+    def __init__(self, cli: Any, command: Any) -> None: ...\n+    def __call__(self, *args: Any, **kwargs: Any): ...\n+    def get_request(self, *args: Any, **kwargs: Any): ...\n+\n+def arg_to_cli(arg: Any): ...\n+\n+class TestNodeCLI:\n+    options: Any = ...\n+    binary: Any = ...\n+    datadir: Any = ...\n+    input: Any = ...\n+    log: Any = ...\n+    def __init__(self, binary: Any, datadir: Any) -> None: ...\n+    def __call__(self, *options: Any, input: Optional[Any] = ...): ...\n+    def __getattr__(self, command: Any): ...\n+    def batch(self, requests: Any): ...\n+    def send_cli(self, command: Optional[Any] = ..., *args: Any, **kwargs: Any): ...\n+\n+class RPCOverloadWrapper:\n+    rpc: Any = ...\n+    is_cli: Any = ...\n+    descriptors: Any = ...\n+    def __init__(self, rpc: Any, cli: bool = ..., descriptors: bool = ...) -> None: ...\n+    def __getattr__(self, name: Any): ...\n+    def createwallet(self, wallet_name: Any, disable_private_keys: Optional[Any] = ..., blank: Optional[Any] = ..., passphrase: str = ..., avoid_reuse: Optional[Any] = ..., descriptors: Optional[Any] = ...): ...\n+    def importprivkey(self, privkey: Any, label: Optional[Any] = ..., rescan: Optional[Any] = ...): ...\n+    def addmultisigaddress(self, nrequired: Any, keys: Any, label: Optional[Any] = ..., address_type: Optional[Any] = ...): ...\n+    def importpubkey(self, pubkey: Any, label: Optional[Any] = ..., rescan: Optional[Any] = ...): ...\n+    def importaddress(self, address: Any, label: Optional[Any] = ..., rescan: Optional[Any] = ..., p2sh: Optional[Any] = ...): ..."
      },
      {
        "sha": "c5d6bf83193c50285d133a30e42a0e5276450b3d",
        "filename": "test/functional/test_framework/stubs/test_framework/test_shell.pyi",
        "status": "added",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f9cba79fc8248e317806611ef10b0a7faefd1b1/test/functional/test_framework/stubs/test_framework/test_shell.pyi",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f9cba79fc8248e317806611ef10b0a7faefd1b1/test/functional/test_framework/stubs/test_framework/test_shell.pyi",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/stubs/test_framework/test_shell.pyi?ref=7f9cba79fc8248e317806611ef10b0a7faefd1b1",
        "patch": "@@ -0,0 +1,16 @@\n+from test_framework.test_framework import BitcoinTestFramework as BitcoinTestFramework\n+from typing import Any\n+\n+class TestShell:\n+    class __TestShell(BitcoinTestFramework):\n+        def set_test_params(self) -> None: ...\n+        def run_test(self) -> None: ...\n+        num_nodes: int = ...\n+        running: bool = ...\n+        def setup(self, **kwargs: Any): ...\n+        def shutdown(self) -> None: ...\n+        def reset(self) -> None: ...\n+    instance: Any = ...\n+    def __new__(cls): ...\n+    def __getattr__(self, name: Any): ...\n+    def __setattr__(self, name: Any, value: Any): ..."
      },
      {
        "sha": "7ebdfc65c501469bc57b6573f96440601815ec31",
        "filename": "test/functional/test_framework/stubs/test_framework/util.pyi",
        "status": "added",
        "additions": 56,
        "deletions": 0,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f9cba79fc8248e317806611ef10b0a7faefd1b1/test/functional/test_framework/stubs/test_framework/util.pyi",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f9cba79fc8248e317806611ef10b0a7faefd1b1/test/functional/test_framework/stubs/test_framework/util.pyi",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/stubs/test_framework/util.pyi?ref=7f9cba79fc8248e317806611ef10b0a7faefd1b1",
        "patch": "@@ -0,0 +1,56 @@\n+from . import coverage as coverage\n+from .authproxy import AuthServiceProxy as AuthServiceProxy, JSONRPCException as JSONRPCException\n+from typing import Any, Optional\n+\n+logger: Any\n+\n+def assert_approx(v: Any, vexp: Any, vspan: float = ...) -> None: ...\n+def assert_fee_amount(fee: Any, tx_size: Any, fee_per_kB: Any) -> None: ...\n+def assert_equal(thing1: Any, thing2: Any, *args: Any) -> None: ...\n+def assert_greater_than(thing1: Any, thing2: Any) -> None: ...\n+def assert_greater_than_or_equal(thing1: Any, thing2: Any) -> None: ...\n+def assert_raises(exc: Any, fun: Any, *args: Any, **kwds: Any) -> None: ...\n+def assert_raises_message(exc: Any, message: Any, fun: Any, *args: Any, **kwds: Any) -> None: ...\n+def assert_raises_process_error(returncode: Any, output: Any, fun: Any, *args: Any, **kwds: Any) -> None: ...\n+def assert_raises_rpc_error(code: Any, message: Any, fun: Any, *args: Any, **kwds: Any) -> None: ...\n+def try_rpc(code: Any, message: Any, fun: Any, *args: Any, **kwds: Any): ...\n+def assert_is_hex_string(string: Any) -> None: ...\n+def assert_is_hash_string(string: Any, length: int = ...) -> None: ...\n+def assert_array_result(object_array: Any, to_match: Any, expected: Any, should_not_find: bool = ...) -> None: ...\n+def check_json_precision() -> None: ...\n+def EncodeDecimal(o: Any): ...\n+def count_bytes(hex_string: Any): ...\n+def hex_str_to_bytes(hex_str: Any): ...\n+def str_to_b64str(string: Any): ...\n+def satoshi_round(amount: Any): ...\n+def wait_until(predicate: Any, *, attempts: Any = ..., timeout: Any = ..., lock: Optional[Any] = ..., timeout_factor: float = ...) -> None: ...\n+\n+MAX_NODES: int\n+PORT_MIN: Any\n+PORT_RANGE: int\n+\n+class PortSeed:\n+    n: Any = ...\n+\n+def get_rpc_proxy(url: Any, node_number: Any, *, timeout: Optional[Any] = ..., coveragedir: Optional[Any] = ...): ...\n+def p2p_port(n: Any): ...\n+def rpc_port(n: Any): ...\n+def rpc_url(datadir: Any, i: Any, chain: Any, rpchost: Any): ...\n+def initialize_datadir(dirname: Any, n: Any, chain: Any): ...\n+def get_datadir_path(dirname: Any, n: Any): ...\n+def append_config(datadir: Any, options: Any) -> None: ...\n+def get_auth_cookie(datadir: Any, chain: Any): ...\n+def delete_cookie_file(datadir: Any, chain: Any) -> None: ...\n+def softfork_active(node: Any, key: Any): ...\n+def set_node_times(nodes: Any, t: Any) -> None: ...\n+def disconnect_nodes(from_connection: Any, node_num: Any): ...\n+def connect_nodes(from_connection: Any, node_num: Any): ...\n+def find_output(node: Any, txid: Any, amount: Any, *, blockhash: Optional[Any] = ...): ...\n+def gather_inputs(from_node: Any, amount_needed: Any, confirmations_required: int = ...): ...\n+def make_change(from_node: Any, amount_in: Any, amount_out: Any, fee: Any): ...\n+def random_transaction(nodes: Any, amount: Any, min_fee: Any, fee_increment: Any, fee_variants: Any): ...\n+def create_confirmed_utxos(fee: Any, node: Any, count: Any): ...\n+def gen_return_txouts(): ...\n+def create_lots_of_big_transactions(node: Any, txouts: Any, utxos: Any, num: Any, fee: Any): ...\n+def mine_large_block(node: Any, utxos: Optional[Any] = ...) -> None: ...\n+def find_vout_for_address(node: Any, txid: Any, addr: Any): ..."
      },
      {
        "sha": "4957fd7b56eade7d79a5eb20a764d5f41220e94d",
        "filename": "test/functional/test_framework/stubs/test_framework/wallet_util.pyi",
        "status": "added",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f9cba79fc8248e317806611ef10b0a7faefd1b1/test/functional/test_framework/stubs/test_framework/wallet_util.pyi",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f9cba79fc8248e317806611ef10b0a7faefd1b1/test/functional/test_framework/stubs/test_framework/wallet_util.pyi",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/stubs/test_framework/wallet_util.pyi?ref=7f9cba79fc8248e317806611ef10b0a7faefd1b1",
        "patch": "@@ -0,0 +1,17 @@\n+from collections import namedtuple\n+from test_framework.address import byte_to_base58 as byte_to_base58, key_to_p2pkh as key_to_p2pkh, key_to_p2sh_p2wpkh as key_to_p2sh_p2wpkh, key_to_p2wpkh as key_to_p2wpkh, script_to_p2sh as script_to_p2sh, script_to_p2sh_p2wsh as script_to_p2sh_p2wsh, script_to_p2wsh as script_to_p2wsh\n+from test_framework.key import ECKey as ECKey\n+from test_framework.script import CScript as CScript, OP_0 as OP_0, OP_2 as OP_2, OP_3 as OP_3, OP_CHECKMULTISIG as OP_CHECKMULTISIG, OP_CHECKSIG as OP_CHECKSIG, OP_DUP as OP_DUP, OP_EQUAL as OP_EQUAL, OP_EQUALVERIFY as OP_EQUALVERIFY, OP_HASH160 as OP_HASH160, hash160 as hash160, sha256 as sha256\n+from test_framework.util import hex_str_to_bytes as hex_str_to_bytes\n+from typing import Any\n+\n+Key = namedtuple('Key', ['privkey', 'pubkey', 'p2pkh_script', 'p2pkh_addr', 'p2wpkh_script', 'p2wpkh_addr', 'p2sh_p2wpkh_script', 'p2sh_p2wpkh_redeem_script', 'p2sh_p2wpkh_addr'])\n+\n+Multisig = namedtuple('Multisig', ['privkeys', 'pubkeys', 'p2sh_script', 'p2sh_addr', 'redeem_script', 'p2wsh_script', 'p2wsh_addr', 'p2sh_p2wsh_script', 'p2sh_p2wsh_addr'])\n+\n+def get_key(node: Any): ...\n+def get_generate_key(): ...\n+def get_multisig(node: Any): ...\n+def test_address(node: Any, address: Any, **kwargs: Any) -> None: ...\n+def bytes_to_wif(b: Any, compressed: bool = ...): ...\n+def generate_wif_key(): ..."
      }
    ]
  },
  {
    "sha": "14f756e787c8b1d19609c959d02fe4979530c6a2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNGY3NTZlNzg3YzhiMWQxOTYwOWM5NTlkMDJmZTQ5Nzk1MzBjNmEy",
    "commit": {
      "author": {
        "name": "Amir Ghorbanian",
        "email": "deanghorbanian@gatech.edu",
        "date": "2020-07-15T22:02:56Z"
      },
      "committer": {
        "name": "Amir Ghorbanian",
        "email": "deanghorbanian@gatech.edu",
        "date": "2020-07-15T22:21:24Z"
      },
      "message": "generate stub files for data package\n\nGenerate necessary stub files for mypy checks.",
      "tree": {
        "sha": "0049ad3c7ff00cb7bb0a017bc47ddd078be38197",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0049ad3c7ff00cb7bb0a017bc47ddd078be38197"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/14f756e787c8b1d19609c959d02fe4979530c6a2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14f756e787c8b1d19609c959d02fe4979530c6a2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/14f756e787c8b1d19609c959d02fe4979530c6a2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14f756e787c8b1d19609c959d02fe4979530c6a2/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "7f9cba79fc8248e317806611ef10b0a7faefd1b1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f9cba79fc8248e317806611ef10b0a7faefd1b1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7f9cba79fc8248e317806611ef10b0a7faefd1b1"
      }
    ],
    "stats": {
      "total": 86,
      "additions": 86,
      "deletions": 0
    },
    "files": [
      {
        "sha": "71644ad1550eb4654656e967bbe6b1a2fc12e4af",
        "filename": "test/functional/data/stubs/invalid_txs.pyi",
        "status": "added",
        "additions": 86,
        "deletions": 0,
        "changes": 86,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14f756e787c8b1d19609c959d02fe4979530c6a2/test/functional/data/stubs/invalid_txs.pyi",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14f756e787c8b1d19609c959d02fe4979530c6a2/test/functional/data/stubs/invalid_txs.pyi",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/data/stubs/invalid_txs.pyi?ref=14f756e787c8b1d19609c959d02fe4979530c6a2",
        "patch": "@@ -0,0 +1,86 @@\n+import abc\n+from typing import Any, Optional\n+\n+basic_p2sh: Any\n+\n+class BadTxTemplate(metaclass=abc.ABCMeta):\n+    __metaclass__: Any = ...\n+    reject_reason: Optional[str] = ...\n+    block_reject_reason: str = ...\n+    expect_disconnect: bool = ...\n+    valid_in_block: bool = ...\n+    spend_tx: Any = ...\n+    spend_avail: Any = ...\n+    valid_txin: Any = ...\n+    def __init__(self, *, spend_tx: Optional[Any] = ..., spend_block: Optional[Any] = ...) -> None: ...\n+    @abc.abstractmethod\n+    def get_tx(self, *args: Any, **kwargs: Any) -> Any: ...\n+\n+class OutputMissing(BadTxTemplate):\n+    reject_reason: str = ...\n+    expect_disconnect: bool = ...\n+    def get_tx(self): ...\n+\n+class InputMissing(BadTxTemplate):\n+    reject_reason: str = ...\n+    expect_disconnect: bool = ...\n+    def get_tx(self): ...\n+\n+class SizeTooSmall(BadTxTemplate):\n+    reject_reason: str = ...\n+    expect_disconnect: bool = ...\n+    valid_in_block: bool = ...\n+    def get_tx(self): ...\n+\n+class BadInputOutpointIndex(BadTxTemplate):\n+    reject_reason: Any = ...\n+    expect_disconnect: bool = ...\n+    def get_tx(self): ...\n+\n+class DuplicateInput(BadTxTemplate):\n+    reject_reason: str = ...\n+    expect_disconnect: bool = ...\n+    def get_tx(self): ...\n+\n+class NonexistentInput(BadTxTemplate):\n+    reject_reason: Any = ...\n+    expect_disconnect: bool = ...\n+    def get_tx(self): ...\n+\n+class SpendTooMuch(BadTxTemplate):\n+    reject_reason: str = ...\n+    expect_disconnect: bool = ...\n+    def get_tx(self): ...\n+\n+class CreateNegative(BadTxTemplate):\n+    reject_reason: str = ...\n+    expect_disconnect: bool = ...\n+    def get_tx(self): ...\n+\n+class CreateTooLarge(BadTxTemplate):\n+    reject_reason: str = ...\n+    expect_disconnect: bool = ...\n+    def get_tx(self): ...\n+\n+class CreateSumTooLarge(BadTxTemplate):\n+    reject_reason: str = ...\n+    expect_disconnect: bool = ...\n+    def get_tx(self): ...\n+\n+class InvalidOPIFConstruction(BadTxTemplate):\n+    reject_reason: str = ...\n+    expect_disconnect: bool = ...\n+    valid_in_block: bool = ...\n+    def get_tx(self): ...\n+\n+class TooManySigops(BadTxTemplate):\n+    reject_reason: str = ...\n+    block_reject_reason: str = ...\n+    expect_disconnect: bool = ...\n+    def get_tx(self): ...\n+\n+def getDisabledOpcodeTemplate(opcode: Any): ...\n+\n+DisabledOpcodeTemplates: Any\n+\n+def iter_all_templates(): ..."
      }
    ]
  },
  {
    "sha": "e7f433e1e1223a2db05f195d32ef2c0e1537cd9b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplN2Y0MzNlMWUxMjIzYTJkYjA1ZjE5NWQzMmVmMmMwZTE1MzdjZDli",
    "commit": {
      "author": {
        "name": "Amir Ghorbanian",
        "email": "deanghorbanian@gatech.edu",
        "date": "2020-07-15T22:17:43Z"
      },
      "committer": {
        "name": "Amir Ghorbanian",
        "email": "deanghorbanian@gatech.edu",
        "date": "2020-07-15T22:22:05Z"
      },
      "message": "remove missing-imports flag and set stub path\n\nRemove --ignore-missing-imports flag from call to mypy and set MYPYPATH variable for stub file recognition.",
      "tree": {
        "sha": "79e2105f1ac36485586dd63159efd00bf7aee236",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/79e2105f1ac36485586dd63159efd00bf7aee236"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e7f433e1e1223a2db05f195d32ef2c0e1537cd9b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e7f433e1e1223a2db05f195d32ef2c0e1537cd9b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e7f433e1e1223a2db05f195d32ef2c0e1537cd9b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e7f433e1e1223a2db05f195d32ef2c0e1537cd9b/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "14f756e787c8b1d19609c959d02fe4979530c6a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14f756e787c8b1d19609c959d02fe4979530c6a2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/14f756e787c8b1d19609c959d02fe4979530c6a2"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 3,
      "deletions": 1
    },
    "files": [
      {
        "sha": "3f328f985e4bbc69fe86ef5f1ee5884c76ad721d",
        "filename": "test/lint/lint-python.sh",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7f433e1e1223a2db05f195d32ef2c0e1537cd9b/test/lint/lint-python.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7f433e1e1223a2db05f195d32ef2c0e1537cd9b/test/lint/lint-python.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-python.sh?ref=e7f433e1e1223a2db05f195d32ef2c0e1537cd9b",
        "patch": "@@ -101,7 +101,9 @@ if ! PYTHONWARNINGS=\"ignore\" flake8 --ignore=B,C,E,F,I,N,W --select=$(IFS=\",\"; e\n     EXIT_CODE=1\n fi\n \n-if ! mypy --ignore-missing-imports $(git ls-files \"test/functional/*.py\"); then\n+# set MYPYPATH variable to point to directory containing stub files in data and test_functional packages\n+export MYPYPATH=\"${BASE_ROOT_DIR}/test/functional/test_framework/stubs:${BASE_ROOT_DIR}/test/functional/data/stubs\"\n+if ! mypy $(git ls-files \"test/functional/*.py\"); then\n     EXIT_CODE=1\n fi\n "
      }
    ]
  }
]