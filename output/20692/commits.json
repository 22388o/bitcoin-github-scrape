[
  {
    "sha": "11a32722f09f1d81f34bd09b26248ba99f2e7f07",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMWEzMjcyMmYwOWYxZDgxZjM0YmQwOWIyNjI0OGJhOTlmMmU3ZjA3",
    "commit": {
      "author": {
        "name": "Michael Dietz",
        "email": "michael.dietz@waya.ai",
        "date": "2020-12-17T20:57:12Z"
      },
      "committer": {
        "name": "Michael Dietz",
        "email": "michael.dietz@waya.ai",
        "date": "2020-12-18T03:37:07Z"
      },
      "message": "test: run mempool_resurrect.py even with wallet disabled",
      "tree": {
        "sha": "a95d18cb48e5a39ab8764ef8d6406f0876d11d6e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a95d18cb48e5a39ab8764ef8d6406f0876d11d6e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/11a32722f09f1d81f34bd09b26248ba99f2e7f07",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEENKwpEUV32QrrIOeYc3/VzfHRRrkFAl/cI+oACgkQc3/VzfHR\nRrl5Cg/+NO9DHXD6KQXGH85Tzzoawqcwpb9ZJrUSVxzOq52WxeQXd/u+vBwgaA+W\nXwMLEMdSagcFYzGXrr5IaodevNYztNDOQDOcAlPEj0vj7ztQRvemybI5zONdgFnp\ndiHM11Slh413PquZifH0pZZZ26gYnrB3Cvgm4n/plRXrbHlovK+jvDvcs1GuSbzc\ncV7bBu/oTsgPsdiv5RRH1scEm2pN72cMQxEw3YgqsbrmASLptKx4B+dsFUFGHQAZ\nKotOC30DUDWufMQX6e3eurO5RTdCvAa8jM5Mx4j0CnI06hGo6qf0vFM44IJE53YJ\nNaPXSUOddZBHBn3TgGd7KozTQY2VREkJl1CXUeNarzctIj9R6jlqpI49pvSigqb5\nzJgI20jRjPmWCg0I78aIXq7uL2qicy+eNNwDaYi4bEKhoyguWFxE737/mypI1juf\nI0PUpiB47rBV0ucux4oAumO0HQjsb/U4poNKSNaPdW5CdhTff46YahtxERdGf9o3\nDgzuduLkx5sYYrCozQRHfZdCqj4aw5lhFXDHLbGiPcGqZ37aB7J6gvJqt2qRslki\nDZigUaWT8trkni0rjXGQc60+lYip8S+0eyxcRB1AyVVaLHqCyQX9VmEYLyMFUwh0\nToJkcWkylu2ek+ay1WQGl2DTWXz3nMzdk2bpa/ePHIfM7VgxbWs=\n=4oBe\n-----END PGP SIGNATURE-----",
        "payload": "tree a95d18cb48e5a39ab8764ef8d6406f0876d11d6e\nparent 143bd108ed6626405b0361c9939a8e1bf6cfc3d2\nauthor Michael Dietz <michael.dietz@waya.ai> 1608238632 -0600\ncommitter Michael Dietz <michael.dietz@waya.ai> 1608262627 -0600\n\ntest: run mempool_resurrect.py even with wallet disabled\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11a32722f09f1d81f34bd09b26248ba99f2e7f07",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/11a32722f09f1d81f34bd09b26248ba99f2e7f07",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11a32722f09f1d81f34bd09b26248ba99f2e7f07/comments",
    "author": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "143bd108ed6626405b0361c9939a8e1bf6cfc3d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/143bd108ed6626405b0361c9939a8e1bf6cfc3d2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/143bd108ed6626405b0361c9939a8e1bf6cfc3d2"
      }
    ],
    "stats": {
      "total": 61,
      "additions": 27,
      "deletions": 34
    },
    "files": [
      {
        "sha": "3a0db70f66ba40f6cb7e0981ae39bdf491c648a3",
        "filename": "test/functional/mempool_resurrect.py",
        "status": "modified",
        "additions": 27,
        "deletions": 34,
        "changes": 61,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11a32722f09f1d81f34bd09b26248ba99f2e7f07/test/functional/mempool_resurrect.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11a32722f09f1d81f34bd09b26248ba99f2e7f07/test/functional/mempool_resurrect.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_resurrect.py?ref=11a32722f09f1d81f34bd09b26248ba99f2e7f07",
        "patch": "@@ -4,66 +4,59 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test resurrection of mined transactions when the blockchain is re-organized.\"\"\"\n \n-from test_framework.blocktools import create_raw_transaction\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal\n+from test_framework.wallet import MiniWallet\n \n \n class MempoolCoinbaseTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n-\n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n+        self.setup_clean_chain = True\n \n     def run_test(self):\n-        node0_address = self.nodes[0].getnewaddress()\n+        node = self.nodes[0]\n+        wallet = MiniWallet(node)\n+\n+        # Add enough mature utxos to the wallet so that all txs spend confirmed coins\n+        wallet.generate(3)\n+        node.generate(100)\n+\n         # Spend block 1/2/3's coinbase transactions\n-        # Mine a block.\n+        # Mine a block\n         # Create three more transactions, spending the spends\n-        # Mine another block.\n+        # Mine another block\n         # ... make sure all the transactions are confirmed\n         # Invalidate both blocks\n         # ... make sure all the transactions are put back in the mempool\n         # Mine a new block\n-        # ... make sure all the transactions are confirmed again.\n-\n-        b = [self.nodes[0].getblockhash(n) for n in range(1, 4)]\n-        coinbase_txids = [self.nodes[0].getblock(h)['tx'][0] for h in b]\n-        spends1_raw = [create_raw_transaction(self.nodes[0], txid, node0_address, amount=49.99) for txid in coinbase_txids]\n-        spends1_id = [self.nodes[0].sendrawtransaction(tx) for tx in spends1_raw]\n-\n+        # ... make sure all the transactions are confirmed again\n         blocks = []\n-        blocks.extend(self.nodes[0].generate(1))\n-\n-        spends2_raw = [create_raw_transaction(self.nodes[0], txid, node0_address, amount=49.98) for txid in spends1_id]\n-        spends2_id = [self.nodes[0].sendrawtransaction(tx) for tx in spends2_raw]\n+        spends1_ids = [wallet.send_self_transfer(from_node=node)['txid'] for _ in range(3)]\n+        blocks.extend(node.generate(1))\n+        spends2_ids = [wallet.send_self_transfer(from_node=node)['txid'] for _ in range(3)]\n+        blocks.extend(node.generate(1))\n \n-        blocks.extend(self.nodes[0].generate(1))\n+        spends_ids = set(spends1_ids + spends2_ids)\n \n         # mempool should be empty, all txns confirmed\n-        assert_equal(set(self.nodes[0].getrawmempool()), set())\n-        for txid in spends1_id+spends2_id:\n-            tx = self.nodes[0].gettransaction(txid)\n-            assert tx[\"confirmations\"] > 0\n+        assert_equal(set(node.getrawmempool()), set())\n+        confirmed_txns = set(node.getblock(blocks[0])['tx'] + node.getblock(blocks[1])['tx'])\n+        # Checks that all spend txns are contained in the mined blocks\n+        assert(spends_ids < confirmed_txns)\n \n         # Use invalidateblock to re-org back\n-        for node in self.nodes:\n-            node.invalidateblock(blocks[0])\n+        node.invalidateblock(blocks[0])\n \n         # All txns should be back in mempool with 0 confirmations\n-        assert_equal(set(self.nodes[0].getrawmempool()), set(spends1_id+spends2_id))\n-        for txid in spends1_id+spends2_id:\n-            tx = self.nodes[0].gettransaction(txid)\n-            assert tx[\"confirmations\"] == 0\n+        assert_equal(set(node.getrawmempool()), spends_ids)\n \n         # Generate another block, they should all get mined\n-        self.nodes[0].generate(1)\n+        node.generate(1)\n         # mempool should be empty, all txns confirmed\n-        assert_equal(set(self.nodes[0].getrawmempool()), set())\n-        for txid in spends1_id+spends2_id:\n-            tx = self.nodes[0].gettransaction(txid)\n-            assert tx[\"confirmations\"] > 0\n+        assert_equal(set(node.getrawmempool()), set())\n+        confirmed_txns = set(node.getblock(blocks[0])['tx'] + node.getblock(blocks[1])['tx'])\n+        assert(spends_ids < confirmed_txns)\n \n \n if __name__ == '__main__':"
      }
    ]
  }
]