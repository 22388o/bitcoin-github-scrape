evoskuil,2021-03-06 10:21:58,+1,https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-791908084,791908084,
jonatack,2021-03-06 12:06:51,Concept ACK,https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-791925483,791925483,
michaelfolkson,2021-03-06 12:41:32,Concept ACK,https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-791930950,791930950,
roconnor-blockstream,2021-03-06 14:14:14,I take it that this PR doesn't preclude also migrating to BIP8-style height based activation?,https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-791956464,791956464,
benthecarman,2021-03-06 14:56:24,"> I take it that this PR doesn't preclude also migrating to BIP8-style height based activation?\n\nConcept ACK but would much rather have height based activation",https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-791967222,791967222,
JeremyRubin,2021-03-06 16:35:38,"Concept ACK.\n\nIt does seem like there is a preference for height based activation as opposed to time.\n\ni'd further request that -- to the extent this is getting BIP'd, that the activation date must not be within the range of the provided interval or we introduce some other sort of quantization / min interval parameter (e.g., every 3 block-months there is a new-rule activation window and we",https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-791985294,791985294,
michaelfolkson,2021-03-06 16:48:49,"I don't know (though I can guess) why people are trying to refer to BIP 9 now instead of BIP 8, especially as height based activation seems the superior option.\n\nAs a reminder, there have been community IRC meetings (which many Core contributors attended and disclosed their views) where there was broad consensus on using revised BIP 8 e.g. http://gnusha.org/taproot-activation/2021-02-02.log\n",https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-791987546,791987546,
roconnor-blockstream,2021-03-06 16:57:04,"I believe the best way to proceed would be to rebase a BIP8-height PR on top of this PR.  Once this PR is merged, we have the ability to produce an acceptable set of parameters for speedy trial.  If then the subsequent BIP8-height PR is merged afterwards then we get, what I believe to be, a superior set of activation parameters, but if the BIP8-height subsequent PR fails for whatever reason, that ",https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-791989090,791989090,
DrahtBot,2021-03-06 18:35:04,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21401 (Refactor versionbits deployments to avoid potential uninitialized variables by achow101)\n* #19573 (Replace unused",https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-792012294,792012294,
JeremyRubin,2021-03-06 19:36:25,"@roconnor-blockstream that sounds like one reasonable plan of attack -- merging this now is a concrete step, patching to use height can occur independently. I do fear there would not be consensus on a non-height based activation proposal, so it may be important to not rest on laurels for accepting those changes.\n\n\nMaking the case for BIP8 merge first then these changes, the BIP8 code is much",https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-792036920,792036920,
benthecarman,2021-03-06 20:35:03,"> Once this PR is merged, we have the ability to produce an acceptable set of parameters for speedy trial. If then the subsequent BIP8-height PR is merged afterwards\n\nThis seems dangerous as we could have people compile and start running after the activation params are merged, merging a following change to the params could cause people to be running different activation logic (one time based, ",https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-792049634,792049634,
roconnor-blockstream,2021-03-06 20:48:07,"@benthecarman.  Not to worry this PR doesn't have activation parameters in it.  I would expect merger of activation parameters to be delayed until after a BIP8-height PR is done consideration.\n\nThat being said, I've chatted a bit with @achow101 and it may be the case that a BIP8-min-activation-height PR ends up being easier to implement as a stand alone PR rather than on top of this one.  Ther",https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-792052121,792052121,
ajtowns,2021-03-06 22:17:39,"> Making the case for BIP8 merge first then these changes, the BIP8 code is much more reviewed presently (with no code nacks, just conceptual ones?) and it may be a better utilization of developer time to rebase this onto BIP8.\n\nI don't think the BIP8 code is adequately reviewed yet -- we had an off-by-one bug that would have left lot=true and lot=false nodes out of consensus found this past w",https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-792072779,792072779,
michaelfolkson,2021-03-06 22:34:29,"> I don't think the BIP8 code is adequately reviewed yet -- we had an off-by-one bug that would have left lot=true and lot=false nodes out of consensus found this past week, that wasn't discovered by reviewers or the automated tests. \n\n@ajtowns: Are you referring to a bug Sjors [found](https://github.com/bitcoin/bitcoin/pull/21334) in the tests? That is hardly a consensus bug for LOT=true and ",https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-792077708,792077708,
ajtowns,2021-03-06 23:05:04,"@michaelfolkson No, that one [wasn't a bug](https://github.com/bitcoin/bitcoin/pull/19573#discussion_r586323690). I'm referring to [this one](https://github.com/bitcoin/bitcoin/pull/19573#discussion_r584741118).",https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-792104652,792104652,
harding,2021-03-07 05:27:45,"Concept ACK.  Thank you, @ajtowns!  I'm happy to see that the change really is minimal.\n\nDo I understand correctly from reading the code that activation will occur in the first block of the next retarget period after the `activation_time`?  E.g., if the minimum activation time just passed but the height is 1234, the first block where taproot's rules are enforced still won't be until height 201",https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-792220340,792220340,
MaxHillebrand,2021-03-07 14:37:38,concept ACK.,https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-792289266,792289266,
Sjors,2021-03-07 17:19:39,"Concept ACK for speedy trial support. However I'm not convinced we should permanently drop the BIP9 threshold to 90%.\n\n@JeremyRubin wrote:\n\n> merging this now is a concrete step, patching to use height can occur independently\n\nI'm fine with a height based approach too; slightly more code changes, but it seems easier to communicate when things happen. I also agree with Jeremy's point. N",https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-792313943,792313943,
ajtowns,2021-03-08 02:58:15,"> but it does mean that, if it looks like `activation_time` is going to fall near a retarget block, we'll have to communicate that taproot could either happen tomorrow or two weeks from now.\n\nI think it's worse than that -- if `activation_time` falls very near a retarget block, I think you could have the eleven last blocks of the retarget period have timestamps (relative to `activation_time`) ",https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-792425221,792425221,
ajtowns,2021-03-08 03:27:32,Bumped to `min_activation_height` instead of `activation_time`; also helps github notice that #21334 already merged.,https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-792435198,792435198,
Sjors,2021-03-08 09:38:04,Shameless plug for #19013 which adds backwards compatibility testing for v0.21; this should be useful when testing soft fork deployment.,https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-792623013,792623013,
JeremyRubin,2021-03-08 20:28:16,"based on the reasoning here: https://gist.github.com/michaelfolkson/92899f27f1ab30aa2ebee82314f8fe7f#gistcomment-3658078 I have very limited concerns around using start/stop times (could be wrong)\n\n@ajtowns that's a great point -- MTP just has ambiguity baked into it, and we should prefer heights for the activation point.\n",https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-793053309,793053309,
ajtowns,2021-03-09 09:56:18,"Rebased on top of versionbits fuzzing harness changes in #21380 -- this captures a bunch of the ""it's not really bip9 anymore"" refactoring, without getting too hard to read, and should vastly improve test coverage.",https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-793645727,793645727,
Sjors,2021-03-09 12:32:09,"I think a fully height based approach is easier to reason about, so I'm going to review #21392 first.",https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-793818708,793818708,
ajtowns,2021-03-16 14:59:00,"#21380 updated to just provide a fuzz test and not do the refactoring, so this now also avoids refactoring -- it adds support for `min_activation_height`, adds support for the unit and fuzz tests to validate behaviour, and drops the threshold from 95% to 90%.",https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-800333719,800333719,
amitiuttarwar,2021-03-16 21:14:30,"concept ACK, I agree with @harding's line of reasoning:\n\n> As mentioned in my email, I thought basing the proposal on the existing BIP9 code in Bitcoin Core (as done in this PR) would be the smallest change and so fastest to get reviewed, merged, and released. Since the goal of the Speedy Trial proposal is speed (with safety), that seems highly advantageous to me.\n\nCombined with how minima",https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-800610436,800610436,
luke-jr,2021-03-18 19:12:57,Concept NACK to MTP.,https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-802217810,802217810,
michaelfolkson,2021-03-18 22:04:00,"I don't have a strong view but it appears that @achow101 in https://github.com/bitcoin/bitcoin/pull/21392 and just by reading the comments in this PR @luke-jr @benthecarman @JeremyRubin @Sjors @roconnor-blockstream @harding all have a preference for a fully height based approach over any use of MTP.\n\nIf that isn't the case please correct me. And if anyone else has a view on entirely block heig",https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-802336038,802336038,
JeremyRubin,2021-03-18 23:53:52,"I have a preference for fully height based design, correct. But I think that given the code base as it stands today, and comparing the diffs across the PR, and the tight timeline desired from merge to release using MTP really is a decent option, especially since the bulk of the code is already more widely tested. Longer term it makes sense to fully develop and test height based -- whether we do th",https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-802396191,802396191,
ajtowns,2021-03-19 00:41:25,"@JeremyRubin 's comment above pretty much matches my opinion -- heights seem better in the long term, and are much better if there's a risk of a UASF ending up with a minority hashrate and not being abandoned. But neither of those are concerns here; and making a small modification to bip9 seems a lot easier to get right on a tight deadline to me.",https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-802418304,802418304,
ajtowns,2021-03-19 07:40:54,"Rebased for updates to fuzzer, removed redundant override of `MinActivationHeight` for `WarningBitsConditionChecker`.",https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-802622490,802622490,
michaelfolkson,2021-03-19 19:59:50,If we're in agreement (which we appear to be) that a fully height based approach over any use of MTP is superior (and an alternative PR has implemented it) going for the inferior option to meet a deadline doesn't seem optimal to me. We don't have much wiggle room with regards to timings if we want activation pre December but we have enough to ensure the superior option is implemented imo. Especial,https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-803084612,803084612,
jnewbery,2021-03-20 12:57:14,Can you rebase on master to drop the fuzzer commit?,https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-803314548,803314548,
ajtowns,2021-03-21 02:58:56,Rebased now that fuzzer is merged; added fuzzing of min_activation_height even in always/never active cases; added sanity check of settings via unit test; added min_activation_height to getblockchaininfo output.,https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-803503626,803503626,
ajtowns,2021-03-23 02:40:29,"> Ideally, height-based locked_in parameters would be better, as consensus rules around MTP are quite loose. AFAIU, it doesn't prevent a coalition of miners to scale down their mined blocks `nTime` to MTP + 1, thus preventing to reach a bip9 starttime at the expected real-world time\n\nSince it uses median time past, you'd need to be doing that for 6 out of every 11 blocks, which would require >",https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-804539447,804539447,
ajtowns,2021-03-24 06:46:51,Rebased on top of #21489 merge.,https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-805547342,805547342,
michaelfolkson,2021-03-25 20:25:49,"Approach NACK. \n\nWe need to focus review effort on a single Speedy Trial PR at this stage. Although AJ has done as much as anyone to advance Taproot activation with all sorts of contributions (conceptual, code, tests, fuzzing) I am at a loss as to why to choose a PR with a mix of block height and MTP over a [PR](https://github.com/bitcoin/bitcoin/pull/21392) with a consistent use of block heig",https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-807422992,807422992,
JeremyRubin,2021-03-25 21:09:55,Code Review ACK  4c7d858,https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-807493104,807493104,
harding,2021-03-26 01:29:03,"What am I doing wrong that I can't get minimum_activation_height to have any effect on regtest?\n\n<details>\n\n```diff\ndiff --git a/src/chainparams.cpp b/src/chainparams.cpp\nindex 40c58f0e67..73be5d3d6d 100644\n--- a/src/chainparams.cpp\n+++ b/src/chainparams.cpp\n@@ -412,7 +412,7 @@ public:\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].bit = 2;\n         consensus.",https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-807862730,807862730,
ajtowns,2021-03-26 02:50:34,@harding The `-vbparams` setting happens in `UpdateVersionBitsParameters` which sets it back to 0 -- https://github.com/bitcoin/bitcoin/pull/21377/files#diff-ff53e63501a5e89fd650b378c9708274df8ad5d38fcffa6c64be417c4d438b6dR483,https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-807897019,807897019,
ajtowns,2021-03-28 04:45:16,"Changed from ""delayed activation"" to ""delayed lock in"" -- that is, transitions go from STARTED to DELAYED to LOCKED_IN to ACTIVE, with LOCKED_IN not being entered until MTP passes min_lock_in_time. This fixes [the problem noted earlier](https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-792425221) while retaining the ability to know 2016 blocks in advance when activation will occur.\n\nU",https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-808843817,808843817,
achow101,2021-03-28 14:02:39,"Approach NACK\n\nAt this point, it seems like this PR has gotten more complicated due to MTP and reviewing this is going to be more complicated due to the edge cases around MTP. When this used a minimum activation height, I would have agreed that this would be easier and faster to review, but now that it has reverted to using a minimum (lock in) time, I am not comfortable with this approach anym",https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-808901334,808901334,
flack,2021-03-28 14:48:18,"> It would make more sense to refactor the parameter setting and allow for the custom signets to set their own activation parameters, regardless of height or MTP.\n\nwouldn't that mean that you can never bury a deployment again because there could be some signet where it hasn't activated yet? ",https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-808907022,808907022,
harding,2021-03-28 17:51:09,"@ajtowns \n\n> Transitions go from STARTED to DELAYED to LOCKED_IN to ACTIVE, with LOCKED_IN not being entered until MTP passes min_lock_in_time. This fixes the problem noted earlier while retaining] the ability to know 2016 blocks in advance when activation will occur.\n\nI like that.  I think it does a better job of communicating to users what state the deployment is in and, by virtue of `mi",https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-808931894,808931894,
achow101,2021-03-28 21:27:26,"> wouldn't that mean that you can never bury a deployment again because there could be some signet where it hasn't activated yet?\n\nNot necessarily. A deployment can be buried in one chain and not in another. With #19438, I think it would also be trivial to have a deployment buried in one chain and not in another.\n\n> What edge cases does MTP have for a deployment such as this where there's ",https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-808962043,808962043,
ajtowns,2021-03-29 01:49:47,"@flack \n\n> wouldn't that mean that you can never bury a deployment again because there could be some signet where it hasn't activated yet?\n\nThe only plausible way I've come up with for burying deployments on signet is via MTP -- ie, declare that a soft-fork is unconditionally active on signet once the MTP passes some point, probably the MTP at which it activated on mainnet plus some delay;",https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-809011351,809011351,
sipa,2021-03-29 19:22:31,"I believe this is the intended state machine:\n\n\n![states](https://user-images.githubusercontent.com/548488/112888562-596a7380-9089-11eb-8375-4de3bf07c1b5.png)\n\nTo generate:\n\n```sh\n$ dot -Tpng >states.png\ndigraph versionbits {\n    defined [shape=box,label=""DEFINED""];\n    started [shape=box,label=""STARTED""];\n    failed [shape=box,label=""FAILED""];\n    locked [shape=box,label",https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-809646100,809646100,
JeremyRubin,2021-03-29 20:57:48,"When this was updated I was originally a bit frustrated since the addition of the DELAYED state + switch to all MTP invalidates the ACKs on this PR.\n\nHowever, now that I understand @ajtowns reasoning around signet compatibility, I see the merit with this approach and retract my earlier preference for height based ST. With regards to review burden, I still think this is slightly easier to reaso",https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-809708651,809708651,
sipa,2021-03-29 21:12:06,You may also want to rebase to fix the Android ARM build (#21541).,https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-809717610,809717610,
ajtowns,2021-03-30 02:28:34,">  a pure MTP design should make it easier for me to activate taproot for users of my network\n\nNote -- taproot is already active on any signet; activation on signet is only a concern for any future soft forks (eg CTV).",https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-809857392,809857392,
ajtowns,2021-03-30 02:33:09,Bumped for 21541 and addressed review comments.,https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-809858941,809858941,
ajtowns,2021-03-30 02:51:33,"@jnewbery\n\n>  I wonder if those first three commits should be pulled out into a separate PR?\n\nThe could be, but they aren't terribly compatible with #21392 which stops checking ComputeBlockVersion behaviour against mainnet, and has a bunch of other changes to the ComputeBlockVersion test in order to convert from mtp to heights.",https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-809865193,809865193,
michaelfolkson,2021-03-30 15:46:10,"I'd like to rescind my [previous Approach NACK](https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-807422992)\n\nIt was given in the spirit of wanting all review to be focused on a single Speedy Trial PR (something I think should be top priority above all else) rather than two PRs, thinking an alternative PR (#21392) was better placed to be merged and personal preference too.\n\nHoweve",https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-810372505,810372505,
ajtowns,2021-03-31 09:50:33,"> My only critique of the modified design is that it might be nice to accommodate a min number of signal periods (e.g., 6) so that signets with 1 hour block rate would have sufficient time to activate. 1 hour isn't crazy for a signet because [...]\n\nI'm not sure that a 1 hour block rate isn't crazy -- `nPowTargetSpacing` is still 10min, so your difficulty would keep getting automatically lowere",https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-810934977,810934977,
JeremyRubin,2021-03-31 16:50:55,@ajtowns i thought you could set arbitrary block rates for signet?,https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-811247130,811247130,
ajtowns,2021-04-01 12:44:20,"> @ajtowns i thought you could set arbitrary block rates for signet?\n\nThe only signet consensus parameter you can change (without everyone recompiling) is the block challenge. The old miner script used to let you target a block rate, but that would have an impact on difficulty that might be annoying to manage, so the new one lets you target a difficulty (`--nbits`) and adjusts the block rate t",https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-811881601,811881601,
ajtowns,2021-04-01 16:26:51,"> I believe this is the intended state machine:\n\nYeah. It's somewhat more complicted than it could be because it's maintaining some of the complexities of the bip9 state machine. It could be simplified a bit by dropping the DEFINED->FAILED case and not ignoring signalling from the last STARTED period:\n\n![image](https://user-images.githubusercontent.com/127186/113322089-9b303e00-9357-11eb-8",https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-812023131,812023131,
Rspigler,2021-04-02 21:08:20,"I was confused how it would be possible to go directly from `DEFINED`->`FAILED` without passing through `STARTED` in @sipa's state machine here: https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-809646100  Seems only possible if ""end"" is before ""begin""?\n\n@ajtowns drops it here (mentions it is due to BIP9?) https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-812023131\nShould `",https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-812716425,812716425,
MarcoFalke,2021-04-04 12:03:48,"If it is currently not possible to bury/flag-day activate/vb signal at different heights/times in signet, it seems that this should be made possible via command line options, not by preferring MTP over height based vb code (or the other way round).\n\nAlso, I fail to see how MTP solves an issue that height based can't. Let's assume the signet default params for deployment mention a start and end",https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-813021596,813021596,
JeremyRubin,2021-04-04 20:32:27,"the benefit of MTP is not needing to disseminate additional parameters per-signet for activation. If you upgrade to the latest bitcoin-core with a new Soft fork deployment, your existing config file (with whatever signetchallenge) will be able to activate without further configuration.\n\nthis is not possible with height.",https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-813095313,813095313,
luke-jr,2021-04-04 21:08:00,"If Signet is going to become a reason to choose inferior consensus code for mainnet, then we should revert Signet.",https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-813099418,813099418,
JeremyRubin,2021-04-04 21:21:13,it's also true for testnet,https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-813101166,813101166,
Rspigler,2021-04-04 22:06:42,"I don't think signet should be a consideration for MTP vs height, since taproot is already activated on signet, and there's no indication that ST will be used in the future.",https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-813106382,813106382,
MarcoFalke,2021-04-05 06:06:00,"> this is not possible with height.\n\nIs it really that much work to check the place where you copied the signetchallenge to also copy the vbparams? You'll have to do that anyway, otherwise you won't know if your signet picked always active, flag day, or signalling activation.",https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-813208375,813208375,
instagibbs,2021-04-06 05:30:23,"apologies, I just am not going to be awake for a 3am IRC meeting my time, so dropping my feedback here:\n\nI'm unconvinced by the arguments set out here for MTP: the one thing you *do* get is testnet being an activation testing ground for the MTP-based implementation. Other than that it's a wash, or it seems to be a net negative for clarity and testing. \n\nIf signets require a little more con",https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-813833780,813833780,
ajtowns,2021-04-06 07:31:14,"@MarcoFalke\n\n> Also, I fail to see how MTP solves an issue that height based can't. Let's assume the signet default params for deployment mention a start and end parameter for a soft-fork, but someone wants to start a signet with the softfork always active. This can only be fixed by supplying modified source/binaries or by allowing the users/miners to pick the vbparams at runtime. It can't be ",https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-813896241,813896241,
achow101,2021-04-06 23:20:22,"I think that the `min_lock_in_time` should be reverted to `min_activation_height`. As noted on [the mailing list](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-April/018740.html), `min_lock_in_time` adds an additional 14 day uncertainty to the true activation time, whereas predicting the time for `min_activation_height` to be reached only gets better as that height approaches. A goo",https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-814494847,814494847,
JeremyRubin,2021-04-06 23:40:13,"~@achow101 what would you say to at the point of lock_in a height is projected out to estimate a date based on 9.5 minute blocks? Or something like that... it works for signets fine as well, and then you avoid the +/- issue at the actual turn on point?~",https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-814501264,814501264,
JeremyRubin,2021-04-06 23:41:48,"Ah also noting that min_activation_height should be compatible with signet no matter what it is set to (edit: most simply, 0), unlike startheight/stopheight so it doesn't matter that much!",https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-814501789,814501789,
JeremyRubin,2021-04-07 00:36:03,"> Although I think that block heights is technically superior, many of the specific things that it guarantees are still provided by an MTP implementation probabilistically and some changes can be made to provide the same guarantees. With that in mind, I would like to see that the DEFINED->FAILED transition is removed and the unconditional STARTED->FAILED when the timeout is reached. This would mak",https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-814519697,814519697,
achow101,2021-04-07 01:01:06,"> @achow101 would the LAST_CHANCE https://github.com/ajtowns/bitcoin/commits/202103-bip9-uasf solution work for the guaranteed at least 1 signal period?\n\nOriginally this paragraph suggested that, but @ajtowns pointed out that changing these state transitions achieves the same effect. I prefer changing these transitions rather than adding a new state as these were part of BIP 8 and are thus alr",https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-814527139,814527139,
ajtowns,2021-04-07 09:36:42,"Updates as per [achow101's suggestions](https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-814494847) -- switches back from fully-mtp-based to using min_activation_height, and drops bip9's ""fail immediately when timeout passes"" handling (also adds a NEVER_ACTIVE special case, since the lack of an immediate failure mode means you can't just use a super-early timeout for that purpose anymore",https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-814768715,814768715,
michaelfolkson,2021-04-08 12:30:56,"From @maaku on [using block height versus a mix of block height and MTP](https://github.com/bitcoin/bitcoin/pull/21393#issuecomment-815698514). Understandably he doesn't want to be involved. \n\n""Segwit activation exposed a number of problems with the BIP9 activation state machine which was based on MTP windows. These concerns include:\n\nDifficulty of interfacing with in-parallel activation m",https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-815763961,815763961,
JeremyRubin,2021-04-08 18:32:32,"CR-ACK be7d1368d8e98b6f9f692289b7d25ac369bf2984\n\n\nWill put some additional effort into futzing with the fuzzers and regtests and stuff before a tAck. Seems like there are some fuzzing edge cases that need better coverage, but overall looks great (and those can be added  as follow on commits).",https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-816047040,816047040,
Sjors,2021-04-08 19:02:26,It might be useful to adapt the functional tests from #21392 to BIP9. I made a _very_ rudimentary start here: https://github.com/Sjors/bitcoin/commits/2021/04/bip9_speedy_test,https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-816070158,816070158,
ajtowns,2021-04-12 01:57:44,"Updated for feedback, `git diff be7d136..ffe33df ` should be easy to follow if you'd reviewed the previous head.\n\n[EDIT: bumped the final commit with no changes and re-pushed so as to retrigger CI since the incident has apparently finished]",https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-817427972,817427972,
ajtowns,2021-04-12 02:41:32,Note that the comments from maaku [copied above](https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-815763961) have been [responded to](https://github.com/bitcoin/bitcoin/pull/21393#issuecomment-815777324) in the PR where they were originally posted.,https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-817440221,817440221,
instagibbs,2021-04-12 06:54:25,"re-utACK https://github.com/bitcoin/bitcoin/pull/21377/commits/ffe33dfbd4c3b11e3475b022b6c1dd077613de79\n\nAPI changed to return min_height_activation regardless of value, other assorted comments. I'll verify the new test case triggers when mutating logic later today to change to a tACK",https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-817538201,817538201,
instagibbs,2021-04-12 07:10:01,"tACK https://github.com/bitcoin/bitcoin/pull/21377/commits/ffe33dfbd4c3b11e3475b022b6c1dd077613de79\n\nI can't trigger any more mutation false-successful runs.",https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-817547968,817547968,
jnewbery,2021-04-12 07:24:33,"utACK ffe33dfbd4c3b11e3475b022b6c1dd077613de79\n\nVerified range-diff from be7d1368d8\n",https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-817557579,817557579,
MarcoFalke,2021-04-12 09:49:08,"review ACK ffe33dfbd4c3b11e3475b022b6c1dd077613de79 💈\n\nAlso checked that it addresses all my style feedback I left on the other pull ( https://github.com/bitcoin/bitcoin/pull/21392#pullrequestreview-621891984 )\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nreview ACK ffe33dfbd4c3b11e3475b022b6c1dd",https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-817663996,817663996,
JeremyRubin,2021-04-13 01:25:11,re CR-ack based on `git diff be7d136..ffe33df`,https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-818362890,818362890,
michaelfolkson,2021-04-13 13:58:30,"I'm going to try to make this my last comment on this PR because I'm wary of continuously adding noise and disrupting review. I just want to make sure we are all happy with a mix of block height and MTP rather than a consistent use of block height. Personally I just about am but my preference would definitely be a consistent use of block height.\n\nA minor preference for consistent use of block ",https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-818758277,818758277,
ajtowns,2021-04-13 17:13:33,Corresponding spec text at https://github.com/bitcoin/bips/pull/1104,https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-818903602,818903602,
achow101,2021-04-13 20:27:35,re-ACK ffe33dfbd4c3b11e3475b022b6c1dd077613de79,https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-819030908,819030908,
jamesob,2021-04-14 17:14:48,Concept ACK. I'm in the process of reviewing the code.,https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-819682434,819682434,
molxyz,2021-04-14 17:23:04,"Concept ACK.\nApproach ACK.",https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-819687374,819687374,
ProofOfKeags,2021-04-14 17:58:27,Concept ACK. Reviewing the code now.,https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-819720013,819720013,
zndtoshi,2021-04-14 18:04:10,Concept ACK,https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-819723508,819723508,
kastravec,2021-04-14 18:13:43,"Concept ACK\nApproach ACK",https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-819729589,819729589,
Sjors,2021-04-14 18:59:11,"@luke-jr you made [the same comment](https://github.com/bitcoin/bips/pull/1104#pullrequestreview-634969249) on the BIP. As others have asked, can you elaborate on it? The BIP or mailinglist is probably the best place for that. In particular, when you say ""BIP 8"" are you arguing to switch back to #21392 or do you want a full on `LOT=true` BIP 8 implementation?",https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-819758074,819758074,
guerillaV2,2021-04-14 19:13:13,"Concept ACK.\nApproach ACK.",https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-819766540,819766540,
cnavigato,2021-04-14 19:41:41,"Concept ACK.\nApproach ACK.",https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-819783730,819783730,
gmaxwell,2021-04-14 19:56:41,"ACK ffe33dfbd4c3b11e3475b022b6c1dd077613de79\n\nI haven't been a Bitcoin developer for several years now but I am a user and investor with a solid technical background, having materially contributed to I believe every intentional consensus change since Satoshi's last.  I still follow along with some technical developments, including taproot activation related PRs.\n\nI've reviewed the PR and (",https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-819792337,819792337,
luke-jr,2021-04-14 20:47:36,">In particular, when you say ""BIP 8"" are you arguing to switch back to #21392 or do you want a full on LOT=true BIP 8 implementation?\n\nA full BIP8 with LOT=True would be ideal, but #21392 was at least an acceptable compromise considering the lack of consensus around LOT.",https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-819821398,819821398,
prayank23,2021-04-14 21:01:54,"I have few questions and issues:\n\n1. Is this strictly based on BIP 9 or modified version of BIP 9? If modified, what are the changes and reasons for it?\n\n2. What are the trade-offs involved in using ST|BIP9|MTP vs ST|BIP8|Block Height?\n\n3. Use of BIP 9:\n\nQuoting few things from https://medium.com/@elombrozo/forks-signaling-and-activation-d60b6abda49a since I had followed all the th",https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-819829574,819829574,
gmaxwell,2021-04-14 21:19:35,"@prayank23 The activation mechanism is not the same as BIP9.   The spec is at https://github.com/bitcoin/bips/pull/1104  because this is ""speedy trial"" and not BIP9 it has shorter duration, a lower threshold, and a minimum activation point (to give people adequate time to update).\n\nIn terms of preparation-- it is not feasible to prepare when you don't know what you're preparing for and the pre",https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-819839941,819839941,
harding,2021-04-14 22:42:59,"@prayank23 \n\n> 1. Is this strictly based on BIP 9 or modified version of BIP 9? If modified, what are the changes and reasons for it?\n\nIt's modified it two ways.  First, the timeout is only evaluated at the end of a STARTED period after all signaling blocks in that period have been counted.  This prevents miners from skipping over the signaling period altogether; that's mainly a concern fo",https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-819896214,819896214,
hsjoberg,2021-04-15 10:04:49,"Concept ACK\nCode review ACK ffe33df",https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-820302279,820302279,
Ziya-Sadr,2021-04-15 10:44:01,wasn't this supposed to be a BIP8 based ST?,https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-820325634,820325634,
rodasmith,2021-04-15 10:57:31,Concept NACK. BIP9 is a step backward from lessons learned during segwit activation. The user community that I am in wants BIP8 so we can UASF if miners don't cooperate.,https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-820332928,820332928,
viaj3ro,2021-04-15 11:18:44,"> Concept NACK. BIP9 is a step backward from lessons learned during segwit activation. The user community that I am in wants BIP8 so we can UASF if miners don't cooperate.\n\n@rodasmith\nJust NACKing this, without even bothering to read the discussion in this very thread is only going to hurt your reputation. \nYour argument doesn't even make any sense since ST with MTP is absolutely compatibl",https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-820345393,820345393,
harding,2021-04-15 11:46:50,"Post-merge tested ACK ffe33dfbd4c3b11e3475b022b6c1dd077613de79\n\n- Code reviewed diff since my previous review\n- Tested changes to `getblockchaininfo` and the tests since previous review; also performed additional testing on the earlier vbparams changes and ensured `getblocktemplate` returned reasonable-looking results for a regtest deployment\n- Performed extensive testing on the fuzz testi",https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-820360487,820360487,
fanquake,2021-04-16 00:28:49,Being backported in #21701.,https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-820823758,820823758,
jaybny,2021-04-16 03:47:02,ACK - no need for BIP8 at this time ,https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-820885693,820885693,
fjahr,2021-04-17 18:21:47,"Post merge Code Review ACK ffe33dfbd4c3b11e3475b022b6c1dd077613de79\n\nAlso built and ran unit tests locally.",https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-821865855,821865855,
prayank23,2021-03-06 15:47:50,nit: Can we add empty `default` statement which does nothing but avoids compiler warning and possible errors in future?,https://github.com/bitcoin/bitcoin/pull/21377#discussion_r588896840,588896840,src/test/versionbits_tests.cpp
sipa,2021-03-06 17:14:09,"That's exactly what the *lack* of default case here does.\n\nIf a case is missed, the compiler will warn.",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r588906179,588906179,src/test/versionbits_tests.cpp
evoskuil,2021-03-06 20:44:03,"This bothered be too. IMO better to use `default`. Enums are bounded. The default state can reasonably be either `ACTIVE` or `FAILED`. This can be future-proofed by using a `static_asset` on the enum, which documents the assumption and guarantees catching it at compile time. Warnings aren’t nearly as safe. ",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r588928891,588928891,src/test/versionbits_tests.cpp
ajtowns,2021-03-07 09:00:47,"It's already safe as a missing default case will simply cause the `return """"` after the switch to execute. The only time the return value of this function is used is to print a message if a test case is already failing, so the consequences of having an empty string are trivial -- CI is already failing at that point. Additionally, we bump those missing-case warnings to errors (`-Werror=switch`) whe",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r588997369,588997369,src/test/versionbits_tests.cpp
evoskuil,2021-03-07 09:35:06,"No worries, I agree it’s a nit. Just don’t like to rely on comments and warnings.",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r589001603,589001603,src/test/versionbits_tests.cpp
Sjors,2021-03-07 16:47:51,"Note that the first two commits of this PR have already been merged, in #21334.",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r589056828,589056828,src/test/versionbits_tests.cpp
Sjors,2021-03-07 16:51:20,Maybe add a note here to never change this unless all soft forks are burried. Alternatively maybe we should have a separate variable for this speedy trial.,https://github.com/bitcoin/bitcoin/pull/21377#discussion_r589057339,589057339,src/chainparams.cpp
Sjors,2021-03-07 17:25:10,"We could add `reduced_threshold` which, if non-zero, overrides `nRuleChangeActivationThreshold`.\n",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r589061372,589061372,src/consensus/params.h
JeremyRubin,2021-03-08 20:29:51,I think we can worry about genericity if we ever need to add 2 simultaneous vbit releases... which I've heard rumor not too many people think we'd be likely to ever do that (although I think it is fine),https://github.com/bitcoin/bitcoin/pull/21377#discussion_r589726673,589726673,src/consensus/params.h
Sjors,2021-03-09 11:29:00,"IIUC with the latest change, `nRuleChangeActivationThreshold` is only used for the ""the might be an unknown rule change"" warning system. Each deployment now has its own threshold.\n",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r590256395,590256395,src/consensus/params.h
Sjors,2021-03-09 12:27:36,See also https://github.com/bitcoin/bitcoin/pull/21392/commits/9e50401c8a593c569f586786d84554c027fd8e8d which in addition lowers the warning threshold even further.,https://github.com/bitcoin/bitcoin/pull/21377#discussion_r590318601,590318601,src/consensus/params.h
jnewbery,2021-03-20 13:00:14,Would it make sense to always set `min_activation_height` to a retarget boundary (and assert that)?,https://github.com/bitcoin/bitcoin/pull/21377#discussion_r598109083,598109083,src/consensus/params.h
ajtowns,2021-03-20 22:25:50,"If it's not on a retarget boundary, it will be treated as if it were at the next higher retarget boundary; so would be misleading but not actually buggy. Added a sanity check to versionbits_tests.",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r598167203,598167203,src/consensus/params.h
jnewbery,2021-03-22 10:22:12,"Is there a reason that this isn't pure virtual (when the other simple getter functions are)?\n\n```suggestion\n    virtual int MinActivationHeight(const Consensus::Params& params) const =0;\n```",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r598589081,598589081,src/versionbits.h
ariard,2021-03-22 16:47:15,"With this bip9-amended model, there is no such thing as a ""max_activation_height"" ? Either we reach  LOCKED_IN state during the starttime/timeout range and delay activation until a _fixed point_ or we fail back to FAILED ? Fixed point can be time-based or height-based but in anycase this is not an _activation window_ with lower/upper bounds. \n\nTo clear this potential ambiguity, I think this va",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r598896420,598896420,src/consensus/params.h
ariard,2021-03-22 16:51:26,"Note, think to update `getblockchaininfo` documentation around ""height"" in consequence.",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r598900096,598900096,src/rpc/blockchain.cpp
ajtowns,2021-03-23 02:25:11,"None of the others have reasonable defaults, but min activation height does. Also, having min activation height default to zero means the condition checker maintains the same behaviour if left as default, which then allows the tests to be patched independently to test the new behaviours, and also means there's no change needed to the warning checker in validation.",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r599202432,599202432,src/versionbits.h
ajtowns,2021-03-23 02:50:45,"It's a **minimum** activation height, because activation could be later than that if min_activation_height is reached prior to  timeout MTP being reached. With a fast enough increase in hashrate, you could probably reach any reasonable min_activation_height prior to timeout MTP being reached; and of course min_activation_height could be deliberately set in prior to or in the middle of the signalli",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r599222357,599222357,src/consensus/params.h
sipa,2021-03-24 00:49:42,"In commit ""tests: test versionbits delayed activation""\n\nAdd a comment: ""round up to the next strictly larger multiple of 1000""?",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r600070455,600070455,src/test/versionbits_tests.cpp
sipa,2021-03-24 00:57:31,"In commit ""tests: test versionbits delayed activation""\n\nNit: WEirD CapiTAlIZatIoN",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r600075060,600075060,src/test/versionbits_tests.cpp
ajtowns,2021-03-24 06:45:17,Added docs for `min_activation_height` field; the docs for `height` don't need updating?,https://github.com/bitcoin/bitcoin/pull/21377#discussion_r600211411,600211411,src/rpc/blockchain.cpp
ajtowns,2021-03-24 06:45:41,"Added a comment, though not that",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r600211628,600211628,src/test/versionbits_tests.cpp
ajtowns,2021-03-24 06:46:09,"Should've bought the dip while you could, now it's all uppercase.",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r600211807,600211807,src/test/versionbits_tests.cpp
MarcoFalke,2021-03-24 12:20:36,Can be fixed (in a follow-up refactor) with commit 2be730c31de5e1496d893d2fe121af70879ceadf + commit 50eb7f0b28ff1afb816c49870344f0a210b6be6e,https://github.com/bitcoin/bitcoin/pull/21377#discussion_r600425852,600425852,src/chainparams.cpp
ariard,2021-03-24 17:06:08,"> It's a minimum activation height, because activation could be later than that if min_activation_height is reached prior to timeout MTP being reached. With a fast enough increase in hashrate, you could probably reach any reasonable min_activation_height prior to timeout MTP being reached; and of course min_activation_height could be deliberately set in prior to or in the middle of the signalling ",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r600685950,600685950,src/consensus/params.h
JeremyRubin,2021-03-25 20:30:38,"ACK using 1815 as the constant.\n\n1814 has lower error from 90% than 1815, but previously we used 1916 which has greater error from 95% than 1915 but is the smallest exceeds threshold number, so we continue the same precedent (not that it matters much). ",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r601818493,601818493,src/chainparams.cpp
jnewbery,2021-03-29 13:50:58,can be `static`,https://github.com/bitcoin/bitcoin/pull/21377#discussion_r603311737,603311737,src/test/versionbits_tests.cpp
sipa,2021-03-29 17:13:58,"In commit ""tests: test ComputeBlockVersion for all deployments""\n\nNit: comment outdated now",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r603470760,603470760,src/test/versionbits_tests.cpp
jnewbery,2021-03-29 17:20:48,Is there a reason that these are `vDeployments[Consensus::DEPLOYMENT_TESTDUMMY]` and not `vDeployments[dep]`?,https://github.com/bitcoin/bitcoin/pull/21377#discussion_r603475179,603475179,src/test/versionbits_tests.cpp
sipa,2021-03-29 18:03:21,"In commit ""versionbits: Add support for delayed lock in""\n\nWhy do we know min_lock_in_time == 0?",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r603502659,603502659,src/validation.cpp
sipa,2021-03-29 18:06:37,"In commit ""versionbits: Add support for delayed lock in""\n\nVery nitty: use the exact same expression as above here?\n\n```\nstateNext = (pindexPrev->GetMedianTimePast() < min_lock_in_time ? ThresholdState::DELAYED : ThresholdState::LOCKED_IN);\n```\n\nYou could even use switch case fallthrough, but I don't think that contributes to readability...",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r603504786,603504786,src/versionbits.cpp
sipa,2021-03-29 18:11:36,"In commit ""versionbits: Add support for delayed lock in""\n\nMaybe mention that the DELAYED state may be skipped entirely if the threshold is reached after min_lockin_time?",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r603507963,603507963,src/versionbits.h
sipa,2021-03-29 18:33:09,"In commit ""tests: pull ComputeBlockVersion test into its own function""\n\n@jnewbery Indeed, looks like it's only ever testing DEPLOYMENT_TESTDUMMY.",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r603521398,603521398,src/test/versionbits_tests.cpp
sipa,2021-03-29 19:01:35,"In commit ""fuzz: test versionbits delayed lock in""\n\nIn case `case ThresholdState::FAILED` you want to check that `exp_state` isn't `ThresholdState::DELAYED` either (I think the current fuzz code won't prevent a transition DELAYED->FAILED).",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r603539842,603539842,src/test/fuzz/versionbits.cpp
ajtowns,2021-03-30 01:48:53,"Nope, must have missed replacing all those in some rebase/redraft or another.",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r603724066,603724066,src/test/versionbits_tests.cpp
ajtowns,2021-03-30 01:58:15,Because WarningBitsConditionChecker doesn't override MinLockInTime() so uses the default from AbstractThresholdConditionChecker which always returns 0. Will change the comment to refer to MinLockInTime instead of min_lock_in_time.,https://github.com/bitcoin/bitcoin/pull/21377#discussion_r603726994,603726994,src/validation.cpp
ajtowns,2021-03-30 02:25:27,"Ah, I updated that for LAST_CHANCE in https://github.com/ajtowns/bitcoin/commits/202103-bip9-uasf but didn't backfill to here.",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r603735149,603735149,src/test/fuzz/versionbits.cpp
sipa,2021-03-30 04:14:14,µnit: grammar a weird,https://github.com/bitcoin/bitcoin/pull/21377#discussion_r603766900,603766900,src/test/versionbits_tests.cpp
sipa,2021-03-30 04:36:30,"nit: this comment seems to apply to `TestActiveLockedIn`, not `TestLockedInDelayed`.",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r603774698,603774698,src/test/versionbits_tests.cpp
ajtowns,2021-03-30 16:49:58,I couldn't even fit all the words I needed a uint32_t.,https://github.com/bitcoin/bitcoin/pull/21377#discussion_r604268301,604268301,src/test/versionbits_tests.cpp
ariard,2021-04-01 18:50:22,"Should this say median time not a block timestamp (`nTime`) ?\n\nIIUC correctly the problem mentions [here](https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-792425221) is solved for the following rational. If a reorg occurs across a retarget period with new block timestamps rolling back the median time, the LOCKED_IN period serves a safety buffer until ACTIVATION ? If so that would be ",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r605875072,605875072,src/consensus/params.h
benthecarman,2021-04-07 15:21:24,"nit: Might be worth adding a comment saying `pindexPrev->nHeight + 1` is used so we measure the current block height, and not the previous block's height",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r608755079,608755079,src/versionbits.cpp
achow101,2021-04-07 17:54:49,"In aa6a95de12b265cd3dc16b2d1303b89a20331a56 ""versionbits: Add support for delayed activation after lockin""\n\nThis could also check that all of the parameters are valid. That would be `>=0` for all of them and `nStartTime` and `nTimeout` are either `-1` (or `-2` when it is introduced). And that `min_activation_height` falls on a retarget boundary.",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r608871691,608871691,src/chainparams.cpp
achow101,2021-04-07 17:56:53,"In c7008a1a07ae8bd8dfb9c2001a4fdef6e08eb395 ""versionbits: Add explicit NEVER_ACTIVE deployments""\n\nCould add `assert(!never_active_test)` in `case ThresholdState::STARTED`.",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r608873198,608873198,src/test/fuzz/versionbits.cpp
achow101,2021-04-07 18:09:13,"In e94fc819d8a996ce3690274c307c537329dfb95b ""tests: test versionbits delayed activation""\n\nHow come `min_activation_height` is set so high? By my calculation, it only needs to be at least 576.",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r608881332,608881332,src/test/versionbits_tests.cpp
harding,2021-04-07 20:52:26,"In commit ""tests: test ComputeBlockVersion for all deployments""\n\nI don't understand this comment.  (1) in this generalized check for all deployments, the ""bit we're testing happens to be bit 28"" isn't the case; (2) the exact comparison on the next line is run several times prior to here without this comment.  Was there maybe an additional check here that got deleted?",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r609061269,609061269,src/test/versionbits_tests.cpp
ajtowns,2021-04-08 00:31:23,To make sure that it doesn't blow up when a mainnet deployment is configured with a similarly high min_activation_height and it's tested.,https://github.com/bitcoin/bitcoin/pull/21377#discussion_r609160925,609160925,src/test/versionbits_tests.cpp
instagibbs,2021-04-08 02:20:46,"> I'm just concerned about successfully LOCKED_IN then having uasf folks bothered by the backend delay and willingly to fasten activation by tweaking min_activation_height\n\nI don't think there's any community concerns with the backend delay. Making sure economic majority activates is in everyone's interests.",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r609215677,609215677,src/consensus/params.h
ajtowns,2021-04-08 02:21:03,"The `if (never_active_test)` block at the end asserts both `state` and `exp_state` are always FAILED so that's already covered (likewise for `always_active_test`).\n\n(This is just a probably-too-clever way of writing `if (!never_active_test) { assert(MTP >= m_end); }`)",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r609215864,609215864,src/test/fuzz/versionbits.cpp
instagibbs,2021-04-08 02:27:04,why not just return the variable consistently? 0 is fine?,https://github.com/bitcoin/bitcoin/pull/21377#discussion_r609219209,609219209,src/rpc/blockchain.cpp
instagibbs,2021-04-08 02:28:47,"In the context of ""will the next connected block have active X"" the comment seems clear enough to me?",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r609220309,609220309,src/versionbits.cpp
instagibbs,2021-04-08 02:32:58,was `num` never modified before?,https://github.com/bitcoin/bitcoin/pull/21377#discussion_r609222402,609222402,src/test/versionbits_tests.cpp
ajtowns,2021-04-08 03:06:20,There was (and is) a `num++` at the end of `TestState` and `TestStateSinceHeight` ,https://github.com/bitcoin/bitcoin/pull/21377#discussion_r609239397,609239397,src/test/versionbits_tests.cpp
jnewbery,2021-04-08 09:47:05,This comment is a bit stranded. It was previously a comment for the entire function. Perhaps it could be moved up to be a doxygen comment for the function.,https://github.com/bitcoin/bitcoin/pull/21377#discussion_r609518002,609518002,src/test/versionbits_tests.cpp
jnewbery,2021-04-08 09:51:14,"Any reason not to make this more tightly bounded:\n\n```suggestion\n    BOOST_REQUIRE(0 <= bit && bit < 29);\n```\n\nor even:\n\n```suggestion\n    BOOST_REQUIRE(0 <= bit && bit < VERSIONBITS_NUM_BITS);\n```",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r609521864,609521864,src/test/versionbits_tests.cpp
jnewbery,2021-04-08 09:55:04,"`1 << bit` (or `1<<bit`) is used all over this test. Consider making an alias for readability:\n\n```\n    uint32_t deployment_mask{1 << bit};\n```",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r609525131,609525131,src/test/versionbits_tests.cpp
jnewbery,2021-04-08 09:55:37,"If you're touching this:\n\n```suggestion\n    const CBlockIndex* lastBlock = nullptr;\n```",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r609525635,609525635,src/test/versionbits_tests.cpp
jnewbery,2021-04-08 09:58:23,"""the bit we're testing happens to be bit 28.""\n\nNot true!",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r609527793,609527793,src/test/versionbits_tests.cpp
jnewbery,2021-04-08 10:01:17,"Maybe mine up to `params.nMinerConfirmationWindow * 3 - 1` here and verify that we stay in DEFINED, and then the next block (below) transitions us to STARTED.",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r609530120,609530120,src/test/versionbits_tests.cpp
jnewbery,2021-04-08 10:09:40,"It's pretty confusing that this test is using these `VersionBitsTester` objects, which have their own activation parameters, but the thing that's actually being tested is the global `versionbitscache` state. In fact, these `VersionBitsTester` objects are only being used for their `Mine()` method. I think this code would be a lot clearer if that was pulled out into a utility function.",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r609536999,609536999,src/test/versionbits_tests.cpp
jnewbery,2021-04-08 10:37:57,"Perhaps out of scope here, but I find that the bit masking in these checks is a little difficult to read and detracts from the intent of the test by emphasizing the syntax rather than the meaning. May be worth pulling out the checks into a utility:\n\n<details>\n<summary>diff</summary>\n\n```diff\ndiff --git a/src/test/versionbits_tests.cpp b/src/test/versionbits_tests.cpp\nindex 5f53da8aff",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r609557291,609557291,src/test/versionbits_tests.cpp
jnewbery,2021-04-08 10:39:32,Maybe worth splitting this function in two?,https://github.com/bitcoin/bitcoin/pull/21377#discussion_r609558206,609558206,src/test/versionbits_tests.cpp
jnewbery,2021-04-08 10:45:22,"```suggestion\n        // min_activation_height test, even if we're not using that in a\n```",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r609562526,609562526,src/test/versionbits_tests.cpp
jnewbery,2021-04-08 11:14:25,Perhaps explicitly define `MinActivationHeight()` in the base `TestConditionChecker` class?,https://github.com/bitcoin/bitcoin/pull/21377#discussion_r609583897,609583897,src/test/versionbits_tests.cpp
jnewbery,2021-04-08 11:15:36,Maybe clearer to split this into `test_group` and `test_index` rather than have some magic 1000 value.,https://github.com/bitcoin/bitcoin/pull/21377#discussion_r609584779,609584779,src/test/versionbits_tests.cpp
jnewbery,2021-04-08 11:16:00,"If you're touching this, might as well set `num` to have default initialization and remove the empty ctor.",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r609585080,609585080,src/test/versionbits_tests.cpp
jnewbery,2021-04-08 11:25:17,There could be a test here that the bit continues to be signaled for multiple LOCKED_IN periods.,https://github.com/bitcoin/bitcoin/pull/21377#discussion_r609591457,609591457,src/test/versionbits_tests.cpp
jnewbery,2021-04-08 11:53:31,What's the reason for this change (7000->8000)?,https://github.com/bitcoin/bitcoin/pull/21377#discussion_r609613832,609613832,src/test/versionbits_tests.cpp
instagibbs,2021-04-08 13:29:48,tests pass without this change included fwiw,https://github.com/bitcoin/bitcoin/pull/21377#discussion_r609701806,609701806,src/test/versionbits_tests.cpp
ajtowns,2021-04-08 13:39:11,"It's already checked via `BOOST_REQUIRE(((1 << bit) & VERSIONBITS_TOP_MASK) == 0);` -- the ""requires"" are there because the later checks will break if these aren't true; if it were possible for `bit` to be  `NUM_BITS` or greater, but not clash with `TOP_MASK` the other tests would be fine.\n\n(I had also thought `versionbits_sanity` was checking the bit was in `[0, NUM_BITS)` so didn't ""duplicat",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r609711796,609711796,src/test/versionbits_tests.cpp
ajtowns,2021-04-08 13:44:02,"It gives it two periods in FAILED that are signalling instead of one to give it plenty of time to decide to switch to some other state if there's some bug that allows transitions out of FAILED. (If it were to go out of FAILED and back again, the StateSinceHeight check should catch that)",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r609716734,609716734,src/test/versionbits_tests.cpp
ajtowns,2021-04-08 13:46:50,"I think there are plenty of things that could be a lot clearer in versionbits in general, and would like to start doing those refactors later, in PRs that don't have a need to be backported. So intending to leave these more general improvements for then -- please do remind when I forget!",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r609719668,609719668,src/test/versionbits_tests.cpp
harding,2021-04-08 13:55:29,"In commit ccfe854884276fbdd2ddbcc65689dbd3306f6332 ""versionbits: simplify state transitions""\n\nIf I restore the logic to go straight to FAILED here, the unit tests don't complain.  I didn't try with the fuzz tester.  Maybe a chance to expand the tests here?",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r609728435,609728435,src/versionbits.cpp
jnewbery,2021-04-08 14:08:31,I'll commit to reviewing those PRs -- please remind me if I forget to do that :),https://github.com/bitcoin/bitcoin/pull/21377#discussion_r609742049,609742049,src/test/versionbits_tests.cpp
jnewbery,2021-04-08 14:13:09,"Seems reasonable, although it may be worth explicitly commenting that:\n\n```diff\ndiff --git a/src/test/versionbits_tests.cpp b/src/test/versionbits_tests.cpp\nindex 5f53da8aff..19bf3f948f 100644\n--- a/src/test/versionbits_tests.cpp\n+++ b/src/test/versionbits_tests.cpp\n@@ -237,7 +237,8 @@ BOOST_AUTO_TEST_CASE(versionbits_test)\n                            .Mine(5000, TestTime(10000), 0",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r609746692,609746692,src/test/versionbits_tests.cpp
instagibbs,2021-04-08 14:35:17,Yes this needs coverage. I was unable to coax any other phony successful tests by modifying relevant changes in the code.,https://github.com/bitcoin/bitcoin/pull/21377#discussion_r609769760,609769760,src/versionbits.cpp
jnewbery,2021-04-08 15:14:06,"Good catch! I think this oughta do it:\n\n```diff\ndiff --git a/src/test/versionbits_tests.cpp b/src/test/versionbits_tests.cpp\nindex 5f53da8aff..57d9f1bedf 100644\n--- a/src/test/versionbits_tests.cpp\n+++ b/src/test/versionbits_tests.cpp\n@@ -200,6 +200,15 @@ BOOST_AUTO_TEST_CASE(versionbits_test)\n                            .Mine(3000, TestTime(20000), 0).TestFailed().TestStateSinceHe",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r609810008,609810008,src/versionbits.cpp
JeremyRubin,2021-04-08 17:33:55,"I :+1: the sentiment that it's confusing, but think it's clear enough in this case.\n\nIn #21392 there were a lot of examples of `pindexPrev->nHeight + 1 < min_activation_height` which I wanted documented better. Despite being the negation, is a lot harder to understand when the transition was happening because it was in states with multiple possible transitions, and the clause was guarding a st",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r609938756,609938756,src/versionbits.cpp
JeremyRubin,2021-04-08 17:37:17,"Noting that MinActivationHeight=0, even though it is a height, is easily compatible with any Signet MTP configuration activation parameters (it's just disabling the delay between locked-in and active, which is OK for a signet since it is managed by a signer anyways).",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r609941607,609941607,src/versionbits.h
JeremyRubin,2021-04-08 17:52:48,"Noting that this check is required before computing on the bit (https://en.cppreference.com/w/cpp/language/operator_arithmetic):\n\n> In any case, if the value of the right operand is negative or is greater or equal to the number of bits in the promoted left operand, the behavior is undefined. \n\nThis also impacts where, if taken, https://github.com/bitcoin/bitcoin/pull/21377/commits/754ab11f",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r609955206,609955206,src/test/versionbits_tests.cpp
JeremyRubin,2021-04-08 18:04:01,"I think this is also desirable in the future in certain circumstances, and unlikely to be an issue for ST.\n\n1) For ST: The time is *really short*. Backing it up after lock in would be unfair to smaller miners (< 10% total hash) who need more time to upgrade, so it would run counter to norms...\n2) In the future: it would be possible to do a Long-Range-Activation, e.g. a ST but with min_active",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r609964911,609964911,src/consensus/params.h
JeremyRubin,2021-04-08 18:07:21,":+1:  -- may as well always return it rather than having client software infer a value from absence.\n\nThis can be handled in a follow up PR IMO (which cleans up the BIP9 naming too, since we've diverged)",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r609967118,609967118,src/rpc/blockchain.cpp
JeremyRubin,2021-04-08 18:17:40,"Could be done, personally indifferent -- the main difference between why the others are explicit in `TestConditionChecker` and `MinActivationHeight` is not is that `MinActivationHeight` is defined to have a sane default function, whereas the others are not.",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r609976108,609976108,src/test/versionbits_tests.cpp
JeremyRubin,2021-04-08 18:21:24,"Should we not use 700000+? I can't see what would change between the two values, but if the goal is realism (maybe it runs too slowly :) )",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r609979407,609979407,src/test/versionbits_tests.cpp
ajtowns,2021-04-11 22:43:01,"One way to manually run the fuzz tests without running fuzzing is something like this:\n\n```sh\nls ../../../qa-assets/fuzz_seed_corpus/versionbits/* --sort=s -r | \nwhile read a; do \n  if ! FUZZ=versionbits test/fuzz/fuzz < $a; then\n    echo $a;\n    echo 'base64:' $(base64 < $a);\n    break;\n  fi;\ndone\n```\n\n(that runs the versionbits fuzzer using the qa-assets seed corpus, in",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r611256065,611256065,src/versionbits.cpp
harding,2021-04-11 23:11:52,"Oh, I later setup fuzz testing but I didn't come back to check this.  I've done that just now using libFuzz and I can confirm it quickly finds this deliberately-introduced problem.",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r611259210,611259210,src/versionbits.cpp
ajtowns,2021-04-11 23:22:06,"I think that justification is only relevant if ComputeBlockVersion would return LAST_OLD_BLOCK_VERSION when not setting a bit, but that logic was removed before 7575 was even merged; https://github.com/bitcoin/bitcoin/pull/7575#discussion-diff-54153581 and https://github.com/bitcoin/bitcoin/pull/7575#discussion-diff-55125020 are the relevant discussion points, I think. So the comment's never been ",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r611260422,611260422,src/test/versionbits_tests.cpp
ajtowns,2021-04-12 01:18:28,I adapted the old `DEFINED -> FAILED` test case to become `DEFINED -> STARTED after timeout reached -> FAILED` rather than taking the case above.,https://github.com/bitcoin/bitcoin/pull/21377#discussion_r611277377,611277377,src/versionbits.cpp
ajtowns,2021-04-12 01:19:14,Removed this comment. See https://github.com/bitcoin/bitcoin/pull/21377#discussion_r611260422 for reasoning.,https://github.com/bitcoin/bitcoin/pull/21377#discussion_r611277521,611277521,src/test/versionbits_tests.cpp
ajtowns,2021-04-12 01:20:19,"Added 7000 back, bumped 8000 to 24000 as in some of the other cases and added a comment.",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r611277740,611277740,src/test/versionbits_tests.cpp
ajtowns,2021-04-12 01:20:43,Added a test that `min_act_height - 1` still signals.,https://github.com/bitcoin/bitcoin/pull/21377#discussion_r611277821,611277821,src/test/versionbits_tests.cpp
ajtowns,2021-04-12 01:21:01,Done,https://github.com/bitcoin/bitcoin/pull/21377#discussion_r611277882,611277882,src/test/versionbits_tests.cpp
ajtowns,2021-04-12 01:21:28,Removed this comment.,https://github.com/bitcoin/bitcoin/pull/21377#discussion_r611277932,611277932,src/test/versionbits_tests.cpp
ajtowns,2021-04-12 01:21:47,Moved,https://github.com/bitcoin/bitcoin/pull/21377#discussion_r611277975,611277975,src/test/versionbits_tests.cpp
ajtowns,2021-04-12 01:25:20,"576 to 400k is a factor of 700x, 400k to 700k is only an extra 73% -- if the test blows up from 2s to 1400s that's a huge problem, if it goes from 2s to 3.5s, meh. :) So leaving it as is; though you're right, 700k would have been a fine choice.",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r611278599,611278599,src/test/versionbits_tests.cpp
ajtowns,2021-04-12 01:30:44,"Agree with the concept, but leaving this for now -- setting weird values on regtest shouldn't break anything given the fuzz tester already tests most of the weird cases.",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r611279642,611279642,src/chainparams.cpp
ajtowns,2021-04-12 01:34:24,"No longer relevant, but fwiw I was using ""timestamp"" in the sense of ""epoch timestamp, ie seconds since 1970"", not ""block timestamp, ie nTime value"".",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r611280260,611280260,src/consensus/params.h
ajtowns,2021-04-12 01:34:41,Replaced comment,https://github.com/bitcoin/bitcoin/pull/21377#discussion_r611280295,611280295,src/test/versionbits_tests.cpp
ajtowns,2021-04-12 01:48:36,"I think it would be better for the `ConditionChecker` to not be abstract and just decode the `Consensus::Params` structure directly, so that tests just pass in different data, but are running the same chunks of code. Leaving this as-is until later refactoring either way though.",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r611283275,611283275,src/test/versionbits_tests.cpp
ajtowns,2021-04-12 01:50:23,This test is mostly just treating the underlying state as implied rather than matching it explicitly; I think that's something to reconsider more broadly as part of later refactoring (which ideally would also let ComputeBlockVersion be checked via fuzzing),https://github.com/bitcoin/bitcoin/pull/21377#discussion_r611283703,611283703,src/test/versionbits_tests.cpp
MarcoFalke,2021-04-12 10:00:52,"in commit f054f6bcd2c2ce5fea84cf8681013f85a444e7ea:\n\nIt would be nice to check that no bits are re-used (within the same chain). I guess previously there was no test for this because BIP 9 allowed (though discouraged) this. With the changes here this should be disallowed because the transition to FAILED (on timeout) no longer takes precedence over STARTED/LOCKED_IN. So with the changes here al",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r611492633,611492633,src/test/versionbits_tests.cpp
MarcoFalke,2021-04-12 10:02:19,"commit ffe33dfbd4c3b11e3475b022b6c1dd077613de79: While touching this line, maybe also add a link somewhere to the section ""Modified thresholds"" in https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki#support-for-future-changes ?",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r611493576,611493576,src/chainparams.cpp
jonatack,2021-04-12 14:53:22,"63879f0a4760c0c0f784029849cb5d21ee088abb these can all be `const` (and eventually braced initialization to check for narrowing)\n```diff\n-    int64_t bit = params.vDeployments[dep].bit;\n-    int64_t nStartTime = params.vDeployments[dep].nStartTime;\n-    int64_t nTimeout = params.vDeployments[dep].nTimeout;\n+    const int64_t bit{params.vDeployments[dep].bit};\n+    const int64_t nStartTi",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r611701546,611701546,src/test/versionbits_tests.cpp
jonatack,2021-04-12 14:56:20,"63879f0a4760c0c0f784029849cb5d21ee088abb here and 593274445004506c921d5d851361aefb3434d744 lines 355 and 396, prefix iterator\n```suggestion\n        for (uint32_t i = 1; i < params.nMinerConfirmationWindow - 4; ++i) {\n```",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r611704239,611704239,src/test/versionbits_tests.cpp
jonatack,2021-04-12 15:11:36,"593274445004506c921d5d851361aefb3434d744 https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#es49-if-you-must-use-a-cast-use-a-named-cast\n```suggestion\n        for (int i = 0; i < static_cast<int>(Consensus::MAX_VERSION_BITS_DEPLOYMENTS); ++i) {\n```",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r611717732,611717732,src/test/versionbits_tests.cpp
Sjors,2021-04-12 15:14:07,55ac5f568a3b73d6f1ef4654617fb76e8bcbccdf: why not just use `-2` here?,https://github.com/bitcoin/bitcoin/pull/21377#discussion_r611719790,611719790,src/test/versionbits_tests.cpp
Sjors,2021-04-12 15:20:41,"dd85d5411c1702c8ae259610fe55050ba212e21e: why is the timeout set to 2008 here? In 55ac5f568a3b73d6f1ef4654617fb76e8bcbccdf  we don't the start height to `-2` here, so the test won't early-exit, but I think it's more clear to just set a far future timeout date:\n\n```cpp\nargs.ForceSetArg(""-vbparams"", ""testdummy:1199145601:4102441200:403200""); // January 1, 2008 - January 1, 2100, min act height",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r611725388,611725388,src/test/versionbits_tests.cpp
jonatack,2021-04-12 15:42:44,"73d4a706393e6dbd6b6d6b6428f8d3233ac0a2d8 maybe mention ""optional"" in addition to the brackets, as done for e.g, `-rpcbind`\n```suggestion\n    argsman.AddArg(""-vbparams=deployment:start:end[:min_activation_height]"", ""Use given start/end times and optional min_activation_height for specified version bits deployment (regtest-only)"", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r611743831,611743831,src/chainparamsbase.cpp
jonatack,2021-04-12 17:00:46,"dd85d5411c1702c8ae259610fe55050ba212e21e for these four calls to `TestStateSinceHeight(int height, int height_delayed)`\n```suggestion\n                           .Mine(24000, TestTime(40000), 0).TestActive().TestStateSinceHeight(4000, /* height_delayed */ 15000)\n```",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r611802713,611802713,src/test/versionbits_tests.cpp
jonatack,2021-04-12 17:20:09,"dd07e6da48040dc7eae46bc7941db48d98a669fd can be `const`\n```suggestion\n    const int min_activation{fuzzed_data_provider.ConsumeIntegralInRange<int>(0, period * max_periods)};\n```",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r611815503,611815503,src/test/fuzz/versionbits.cpp
ajtowns,2021-04-12 23:57:03,"-2 would be never active, this is to ensure we execute the test code even if all the actual deployments are always active or never active, to avoid the test code bit rotting",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r612026992,612026992,src/test/versionbits_tests.cpp
ajtowns,2021-04-13 00:00:22,"It's duplicating the old testdummy parameters. It's a fake chain so the exact times don't matter. The difference between the times can make a difference, but only if the period's short enough that two periods of 10 minute blocks will cover the entire difference.",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r612028221,612028221,src/test/versionbits_tests.cpp
MarcoFalke,2021-04-13 04:12:05,Maybe add an explicit test for -1/-2 as well?,https://github.com/bitcoin/bitcoin/pull/21377#discussion_r612118083,612118083,src/test/versionbits_tests.cpp
ajtowns,2021-04-13 06:06:23,"Currently taproot on regtest/signet tests the always active (-1) case, and testdummy on mainnet should always test the never active (-2) case, so think this can be left for later cleanup/refactoring.",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r612153280,612153280,src/test/versionbits_tests.cpp
MarcoFalke,2021-04-13 06:12:16,"Sure, no need to force push. I am just dumping ideas.",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r612155621,612155621,src/test/versionbits_tests.cpp
Sjors,2021-04-13 12:34:40,"@ajtowns maybe I'm missing something, but `January 1, 2008 - December 31, 2008` is also never active. Or do we use earlier fake dates in the test?\n\nAh I see: https://github.com/bitcoin/bitcoin/pull/21377#discussion_r612028221 . The casual reader - and me - might understand the test better when using a realistic range, but no need to change things here.",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r612403947,612403947,src/test/versionbits_tests.cpp
ajtowns,2021-04-13 14:09:17,"@Sjors Note that with the updated state machine, it's possible for a real chain (not just a fake one in the unit tests) to become ACTIVE even if starttime/timeout are prior to the genesis block's timestamp: in that case, the first period will be DEFINED, the second STARTED, and the third either LOCKED_IN or FAILED depending on signalling in the second period. Not an issue for chains that are alrea",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r612482362,612482362,src/test/versionbits_tests.cpp
ariard,2021-04-13 20:16:34,"I think this is behavior is an explicit deviation from bip9.\n\nIf the last block of the retarget period is fulfilling the threshold condition but with a MTP past with the timeout, the locked_in takes _precedence_ over the failure transition. This sounds contrary to the bip 9 : ""MTP < timeout AND (threshold reached)"" ?\n\nIf you retouch the branch or as a follow-up, I think it would be worthy ",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r612747285,612747285,src/versionbits.cpp
ProofOfKeags,2021-04-13 20:38:20,"Can that precedent/convention be codified somewhere, code or otherwise? Is it already?",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r612760226,612760226,src/chainparams.cpp
JeremyRubin,2021-04-13 22:11:48,See https://github.com/bitcoin/bips/pull/1104/files,https://github.com/bitcoin/bitcoin/pull/21377#discussion_r612809019,612809019,src/versionbits.cpp
JeremyRubin,2021-04-13 22:13:09,Maybe that doesn't clarify the change -- the point is to ensure at least one signalling period ,https://github.com/bitcoin/bitcoin/pull/21377#discussion_r612809523,612809523,src/versionbits.cpp
JeremyRubin,2021-04-13 22:15:30,"https://github.com/bitcoin/bips/pull/1104#issuecomment-819068299\n\nThat's probably what you want to look at.",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r612810408,612810408,src/versionbits.cpp
sipa,2021-04-13 22:29:39,"I think this is mostly personal style choice, so more as a general suggestion: if you really just want to get shorter aliases for other expressions, this may be even better (guaranteed to have the same type, and will avoid a copy in case it's a nontrivial object).\n\n```c++\nconst auto& bit = params.vDeployments[dep].bit;\n...\n```\n\nEven if the right hand is a nontrivial expression that c",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r612816233,612816233,src/test/versionbits_tests.cpp
MarcoFalke,2021-04-14 15:23:24,"If overlapping deployments are an issue (I don't think they are as long as bits are not re-used for to-be-deployed changes), we could switch to the version of this pull requests that avoids them: https://github.com/bitcoin/bitcoin/pull/21377#pullrequestreview-619480897. (That version also has the min_activation based on height). I liked that version better because it really was a minimal change fr",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r613347485,613347485,src/test/versionbits_tests.cpp
ProofOfKeags,2021-04-14 20:18:07,"nit: Apologies if this is bikeshedding, but the asymmetry of `<` and `>` causes more mental load than the code it replaces since inequality is commutative. It took me a sec to wrap my head around it and I wonder if something like\n```suggestion\n        if (vDeploymentParams.size() != 3 && vDeploymentParams.size() != 4) {\n```\nwould be more readable. Obviously this is not strictly necessary, ",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r613559485,613559485,src/chainparams.cpp
ProofOfKeags,2021-04-14 20:23:43,"nit: Is it possible for the deployment parameters to actually exceed 4? In the above checks it seems that we rule out any case where the deployment params size strictly exceeds 4. It seems that the only permissible cases here are sizes 3 and 4, which imo makes the `>= 4` test misleading, implying it could be 5+. Obviously the semantics here are identical considering the entire block of code as a w",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r613562505,613562505,src/chainparams.cpp
fanquake,2021-04-15 01:49:30,"This can be addressed in a followup:\n```bash\nwarning: comparison of integers of different signs: 'const unsigned int' and 'const int' [-Wsign-compare]\n...\ntest/versionbits_tests.cpp:271:9: note: in instantiation of function template specialization 'boost::test_tools::tt_detail::check_frwd<boost::test_tools::tt_detail::equal_impl_frwd, unsigned int, int>' requested here\n        BOOST_CHEC",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r613702341,613702341,src/test/versionbits_tests.cpp
MarcoFalke,2021-04-15 07:31:17,"I can't reproduce (#19123), but the warning seems correct:\n\n```cpp\n#include <iostream>\n#include <type_traits>\n#include <cstdint>\n \nint main()\n{\n  std::cout << std::boolalpha;\n\n  std::cout << std::is_same_v<int     , decltype(int{1} % unsigned{2})> << '\n'; // false\n  std::cout << std::is_same_v<unsigned, decltype(int{1} % unsigned{2})> << '\n'; // true\n}\n```",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r613824022,613824022,src/test/versionbits_tests.cpp
MarcoFalke,2021-04-15 07:57:54,Added test in #21691,https://github.com/bitcoin/bitcoin/pull/21377#discussion_r613841600,613841600,src/test/versionbits_tests.cpp
MarcoFalke,2021-04-15 07:58:14,Fixed in #21691,https://github.com/bitcoin/bitcoin/pull/21377#discussion_r613841828,613841828,src/test/versionbits_tests.cpp
MarcoFalke,2021-04-15 07:58:36,Fixed in #21691,https://github.com/bitcoin/bitcoin/pull/21377#discussion_r613842051,613842051,src/test/versionbits_tests.cpp
Kixunil,2021-04-18 16:54:42,Hmm? BIP341 says `min_activation_height` should be `709632` but this code contains `0`.,https://github.com/bitcoin/bitcoin/pull/21377#discussion_r615425364,615425364,src/chainparams.cpp
harding,2021-04-18 17:15:42,"@kixunil The activation parameters were add in a separate PR, https://github.com/bitcoin/bitcoin/pull/21686 ",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r615427806,615427806,src/chainparams.cpp
katesalazar,2021-09-30 19:50:24,"The proposed inequality reads naturally.\nYour suggested change is common code, so it's easy to read as well.\nYour suggested change is not more future proof,\nI'd say it's slightly less future proof.\n",https://github.com/bitcoin/bitcoin/pull/21377#discussion_r719711393,719711393,src/chainparams.cpp
