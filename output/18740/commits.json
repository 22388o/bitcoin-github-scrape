[
  {
    "sha": "691c817b340d10e806dc3b1834d2a8fcc5e681fd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2OTFjODE3YjM0MGQxMGU4MDZkYzNiMTgzNGQyYThmY2M1ZTY4MWZk",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-04-17T15:15:55Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-05-13T20:20:13Z"
      },
      "message": "Add util::Ref class as temporary alternative for c++17 std::any\n\nThis commit does not change behavior",
      "tree": {
        "sha": "1488abd285cf8d1026ac735ef03b80311c767326",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1488abd285cf8d1026ac735ef03b80311c767326"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/691c817b340d10e806dc3b1834d2a8fcc5e681fd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/691c817b340d10e806dc3b1834d2a8fcc5e681fd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/691c817b340d10e806dc3b1834d2a8fcc5e681fd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/691c817b340d10e806dc3b1834d2a8fcc5e681fd/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "04c09553d89809cf6328679d7535ecaa0070485d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/04c09553d89809cf6328679d7535ecaa0070485d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/04c09553d89809cf6328679d7535ecaa0070485d"
      }
    ],
    "stats": {
      "total": 77,
      "additions": 77,
      "deletions": 0
    },
    "files": [
      {
        "sha": "d2c7400bbbc37f0a4052bb1ca7d0a64078ee2491",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/691c817b340d10e806dc3b1834d2a8fcc5e681fd/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/691c817b340d10e806dc3b1834d2a8fcc5e681fd/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=691c817b340d10e806dc3b1834d2a8fcc5e681fd",
        "patch": "@@ -223,6 +223,7 @@ BITCOIN_CORE_H = \\\n   util/message.h \\\n   util/moneystr.h \\\n   util/rbf.h \\\n+  util/ref.h \\\n   util/settings.h \\\n   util/string.h \\\n   util/threadnames.h \\"
      },
      {
        "sha": "6ba0e9f2702634df31cfbffa842beccdedaf289c",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/691c817b340d10e806dc3b1834d2a8fcc5e681fd/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/691c817b340d10e806dc3b1834d2a8fcc5e681fd/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=691c817b340d10e806dc3b1834d2a8fcc5e681fd",
        "patch": "@@ -229,6 +229,7 @@ BITCOIN_TESTS =\\\n   test/prevector_tests.cpp \\\n   test/raii_event_tests.cpp \\\n   test/random_tests.cpp \\\n+  test/ref_tests.cpp \\\n   test/reverselock_tests.cpp \\\n   test/rpc_tests.cpp \\\n   test/sanity_tests.cpp \\"
      },
      {
        "sha": "0ec0799fbcbbeb05cb975ae851602ec449a45ed3",
        "filename": "src/test/ref_tests.cpp",
        "status": "added",
        "additions": 33,
        "deletions": 0,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/691c817b340d10e806dc3b1834d2a8fcc5e681fd/src/test/ref_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/691c817b340d10e806dc3b1834d2a8fcc5e681fd/src/test/ref_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/ref_tests.cpp?ref=691c817b340d10e806dc3b1834d2a8fcc5e681fd",
        "patch": "@@ -0,0 +1,33 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/ref.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(ref_tests)\n+\n+BOOST_AUTO_TEST_CASE(ref_test)\n+{\n+    util::Ref ref;\n+    BOOST_CHECK(!ref.Has<int>());\n+    BOOST_CHECK_THROW(ref.Get<int>(), NonFatalCheckError);\n+    int value = 5;\n+    ref.Set(value);\n+    BOOST_CHECK(ref.Has<int>());\n+    BOOST_CHECK_EQUAL(ref.Get<int>(), 5);\n+    ++ref.Get<int>();\n+    BOOST_CHECK_EQUAL(ref.Get<int>(), 6);\n+    BOOST_CHECK_EQUAL(value, 6);\n+    ++value;\n+    BOOST_CHECK_EQUAL(value, 7);\n+    BOOST_CHECK_EQUAL(ref.Get<int>(), 7);\n+    BOOST_CHECK(!ref.Has<bool>());\n+    BOOST_CHECK_THROW(ref.Get<bool>(), NonFatalCheckError);\n+    ref.Clear();\n+    BOOST_CHECK(!ref.Has<int>());\n+    BOOST_CHECK_THROW(ref.Get<int>(), NonFatalCheckError);\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "5c0f32cf519a5829fa49e4b2c59a8448f5e9dc5d",
        "filename": "src/util/check.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/691c817b340d10e806dc3b1834d2a8fcc5e681fd/src/util/check.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/691c817b340d10e806dc3b1834d2a8fcc5e681fd/src/util/check.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/check.h?ref=691c817b340d10e806dc3b1834d2a8fcc5e681fd",
        "patch": "@@ -5,6 +5,10 @@\n #ifndef BITCOIN_UTIL_CHECK_H\n #define BITCOIN_UTIL_CHECK_H\n \n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n #include <tinyformat.h>\n \n #include <stdexcept>"
      },
      {
        "sha": "9685ea9fec0dbedb1030768fb7fa14bd57c770c9",
        "filename": "src/util/ref.h",
        "status": "added",
        "additions": 38,
        "deletions": 0,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/691c817b340d10e806dc3b1834d2a8fcc5e681fd/src/util/ref.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/691c817b340d10e806dc3b1834d2a8fcc5e681fd/src/util/ref.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/ref.h?ref=691c817b340d10e806dc3b1834d2a8fcc5e681fd",
        "patch": "@@ -0,0 +1,38 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_REF_H\n+#define BITCOIN_UTIL_REF_H\n+\n+#include <util/check.h>\n+\n+#include <typeindex>\n+\n+namespace util {\n+\n+/**\n+ * Type-safe dynamic reference.\n+ *\n+ * This implements a small subset of the functionality in C++17's std::any\n+ * class, and can be dropped when the project updates to C++17\n+ * (https://github.com/bitcoin/bitcoin/issues/16684)\n+ */\n+class Ref\n+{\n+public:\n+    Ref() = default;\n+    template<typename T> Ref(T& value) { Set(value); }\n+    template<typename T> T& Get() const { CHECK_NONFATAL(Has<T>()); return *static_cast<T*>(m_value); }\n+    template<typename T> void Set(T& value) { m_value = &value; m_type = std::type_index(typeid(T)); }\n+    template<typename T> bool Has() const { return m_value && m_type == std::type_index(typeid(T)); }\n+    void Clear() { m_value = nullptr; m_type = std::type_index(typeid(void)); }\n+\n+private:\n+    void* m_value = nullptr;\n+    std::type_index m_type = std::type_index(typeid(void));\n+};\n+\n+} // namespace util\n+\n+#endif // BITCOIN_UTIL_REF_H"
      }
    ]
  },
  {
    "sha": "6fca33b2edc09ed62dab2323c780b31585de1750",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZmNhMzNiMmVkYzA5ZWQ2MmRhYjIzMjNjNzgwYjMxNTg1ZGUxNzUw",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-04-17T15:28:45Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-05-13T20:20:13Z"
      },
      "message": "refactor: Pass NodeContext to RPC and REST methods through util::Ref\n\nThis commit does not change behavior",
      "tree": {
        "sha": "32b5eb4a502b676b3d71bbb168095b93871311b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/32b5eb4a502b676b3d71bbb168095b93871311b6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6fca33b2edc09ed62dab2323c780b31585de1750",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6fca33b2edc09ed62dab2323c780b31585de1750",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6fca33b2edc09ed62dab2323c780b31585de1750",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6fca33b2edc09ed62dab2323c780b31585de1750/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "691c817b340d10e806dc3b1834d2a8fcc5e681fd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/691c817b340d10e806dc3b1834d2a8fcc5e681fd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/691c817b340d10e806dc3b1834d2a8fcc5e681fd"
      }
    ],
    "stats": {
      "total": 236,
      "additions": 150,
      "deletions": 86
    },
    "files": [
      {
        "sha": "b8e87178968c7c0da15dcd550b61b23198992856",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6fca33b2edc09ed62dab2323c780b31585de1750/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6fca33b2edc09ed62dab2323c780b31585de1750/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=6fca33b2edc09ed62dab2323c780b31585de1750",
        "patch": "@@ -16,6 +16,7 @@\n #include <noui.h>\n #include <shutdown.h>\n #include <ui_interface.h>\n+#include <util/ref.h>\n #include <util/strencodings.h>\n #include <util/system.h>\n #include <util/threadnames.h>\n@@ -77,6 +78,7 @@ static bool AppInit(int argc, char* argv[])\n         return true;\n     }\n \n+    util::Ref context{node};\n     try\n     {\n         if (!CheckDataDirOption()) {\n@@ -145,7 +147,7 @@ static bool AppInit(int argc, char* argv[])\n             // If locking the data directory failed, exit immediately\n             return false;\n         }\n-        fRet = AppInitMain(node);\n+        fRet = AppInitMain(context, node);\n     }\n     catch (const std::exception& e) {\n         PrintExceptionContinue(&e, \"AppInit()\");"
      },
      {
        "sha": "f03d8c0c2c9085449059d7ffda006284c89f597c",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6fca33b2edc09ed62dab2323c780b31585de1750/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6fca33b2edc09ed62dab2323c780b31585de1750/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=6fca33b2edc09ed62dab2323c780b31585de1750",
        "patch": "@@ -151,7 +151,7 @@ static bool RPCAuthorized(const std::string& strAuth, std::string& strAuthUserna\n     return multiUserAuthorized(strUserPass);\n }\n \n-static bool HTTPReq_JSONRPC(HTTPRequest* req, const std::string &)\n+static bool HTTPReq_JSONRPC(const util::Ref& context, HTTPRequest* req)\n {\n     // JSONRPC handles only POST\n     if (req->GetRequestMethod() != HTTPRequest::POST) {\n@@ -166,7 +166,7 @@ static bool HTTPReq_JSONRPC(HTTPRequest* req, const std::string &)\n         return false;\n     }\n \n-    JSONRPCRequest jreq;\n+    JSONRPCRequest jreq(context);\n     jreq.peerAddr = req->GetPeer().ToString();\n     if (!RPCAuthorized(authHeader.second, jreq.authUser)) {\n         LogPrintf(\"ThreadRPCServer incorrect password attempt from %s\\n\", jreq.peerAddr);\n@@ -288,15 +288,16 @@ static bool InitRPCAuthentication()\n     return true;\n }\n \n-bool StartHTTPRPC()\n+bool StartHTTPRPC(const util::Ref& context)\n {\n     LogPrint(BCLog::RPC, \"Starting HTTP RPC server\\n\");\n     if (!InitRPCAuthentication())\n         return false;\n \n-    RegisterHTTPHandler(\"/\", true, HTTPReq_JSONRPC);\n+    auto handle_rpc = [&context](HTTPRequest* req, const std::string&) { return HTTPReq_JSONRPC(context, req); };\n+    RegisterHTTPHandler(\"/\", true, handle_rpc);\n     if (g_wallet_init_interface.HasWalletSupport()) {\n-        RegisterHTTPHandler(\"/wallet/\", false, HTTPReq_JSONRPC);\n+        RegisterHTTPHandler(\"/wallet/\", false, handle_rpc);\n     }\n     struct event_base* eventBase = EventBase();\n     assert(eventBase);"
      },
      {
        "sha": "a6a38fc95ae8c8b945177f91075b3fe91f82541c",
        "filename": "src/httprpc.h",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6fca33b2edc09ed62dab2323c780b31585de1750/src/httprpc.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6fca33b2edc09ed62dab2323c780b31585de1750/src/httprpc.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.h?ref=6fca33b2edc09ed62dab2323c780b31585de1750",
        "patch": "@@ -5,11 +5,14 @@\n #ifndef BITCOIN_HTTPRPC_H\n #define BITCOIN_HTTPRPC_H\n \n+namespace util {\n+class Ref;\n+} // namespace util\n \n /** Start HTTP RPC subsystem.\n  * Precondition; HTTP and RPC has been started.\n  */\n-bool StartHTTPRPC();\n+bool StartHTTPRPC(const util::Ref& context);\n /** Interrupt HTTP RPC subsystem.\n  */\n void InterruptHTTPRPC();\n@@ -21,7 +24,7 @@ void StopHTTPRPC();\n /** Start HTTP REST subsystem.\n  * Precondition; HTTP and RPC has been started.\n  */\n-void StartREST();\n+void StartREST(const util::Ref& context);\n /** Interrupt RPC REST subsystem.\n  */\n void InterruptREST();"
      },
      {
        "sha": "4a12af22c3436f245e85eb5210b73fc8ce875ac6",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6fca33b2edc09ed62dab2323c780b31585de1750/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6fca33b2edc09ed62dab2323c780b31585de1750/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=6fca33b2edc09ed62dab2323c780b31585de1750",
        "patch": "@@ -783,16 +783,16 @@ static bool InitSanityCheck()\n     return true;\n }\n \n-static bool AppInitServers()\n+static bool AppInitServers(const util::Ref& context)\n {\n     RPCServer::OnStarted(&OnRPCStarted);\n     RPCServer::OnStopped(&OnRPCStopped);\n     if (!InitHTTPServer())\n         return false;\n     StartRPC();\n-    if (!StartHTTPRPC())\n+    if (!StartHTTPRPC(context))\n         return false;\n-    if (gArgs.GetBoolArg(\"-rest\", DEFAULT_REST_ENABLE)) StartREST();\n+    if (gArgs.GetBoolArg(\"-rest\", DEFAULT_REST_ENABLE)) StartREST(context);\n     StartHTTPServer();\n     return true;\n }\n@@ -1237,7 +1237,7 @@ bool AppInitLockDataDirectory()\n     return true;\n }\n \n-bool AppInitMain(NodeContext& node)\n+bool AppInitMain(const util::Ref& context, NodeContext& node)\n {\n     const CChainParams& chainparams = Params();\n     // ********************************************************* Step 4a: application initialization\n@@ -1352,7 +1352,7 @@ bool AppInitMain(NodeContext& node)\n     if (gArgs.GetBoolArg(\"-server\", false))\n     {\n         uiInterface.InitMessage_connect(SetRPCWarmupStatus);\n-        if (!AppInitServers())\n+        if (!AppInitServers(context))\n             return InitError(_(\"Unable to start HTTP server. See debug log for details.\"));\n     }\n "
      },
      {
        "sha": "33fe96e8ea49fa2262e1820e99a961c59baaa9aa",
        "filename": "src/init.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6fca33b2edc09ed62dab2323c780b31585de1750/src/init.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6fca33b2edc09ed62dab2323c780b31585de1750/src/init.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.h?ref=6fca33b2edc09ed62dab2323c780b31585de1750",
        "patch": "@@ -14,6 +14,9 @@ struct NodeContext;\n namespace boost {\n class thread_group;\n } // namespace boost\n+namespace util {\n+class Ref;\n+} // namespace util\n \n /** Interrupt threads */\n void Interrupt(NodeContext& node);\n@@ -51,7 +54,7 @@ bool AppInitLockDataDirectory();\n  * @note This should only be done after daemonization. Call Shutdown() if this function fails.\n  * @pre Parameters should be parsed and config file should be read, AppInitLockDataDirectory should have been called.\n  */\n-bool AppInitMain(NodeContext& node);\n+bool AppInitMain(const util::Ref& context, NodeContext& node);\n \n /**\n  * Register all arguments with the ArgsManager"
      },
      {
        "sha": "cc0f7db5c15ca927f81774b21c9dea39fcc531fc",
        "filename": "src/interfaces/node.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6fca33b2edc09ed62dab2323c780b31585de1750/src/interfaces/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6fca33b2edc09ed62dab2323c780b31585de1750/src/interfaces/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.cpp?ref=6fca33b2edc09ed62dab2323c780b31585de1750",
        "patch": "@@ -27,6 +27,7 @@\n #include <sync.h>\n #include <txmempool.h>\n #include <ui_interface.h>\n+#include <util/ref.h>\n #include <util/system.h>\n #include <util/translation.h>\n #include <validation.h>\n@@ -80,7 +81,7 @@ class NodeImpl : public Node\n     bool appInitMain() override\n     {\n         m_context.chain = MakeChain(m_context);\n-        return AppInitMain(m_context);\n+        return AppInitMain(m_context_ref, m_context);\n     }\n     void appShutdown() override\n     {\n@@ -225,7 +226,7 @@ class NodeImpl : public Node\n     CFeeRate getDustRelayFee() override { return ::dustRelayFee; }\n     UniValue executeRpc(const std::string& command, const UniValue& params, const std::string& uri) override\n     {\n-        JSONRPCRequest req;\n+        JSONRPCRequest req(m_context_ref);\n         req.params = params;\n         req.strMethod = command;\n         req.URI = uri;\n@@ -323,6 +324,7 @@ class NodeImpl : public Node\n     }\n     NodeContext* context() override { return &m_context; }\n     NodeContext m_context;\n+    util::Ref m_context_ref{m_context};\n };\n \n } // namespace"
      },
      {
        "sha": "02b35f92ab40fdc1f477e622934470bdebf88e68",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 20,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6fca33b2edc09ed62dab2323c780b31585de1750/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6fca33b2edc09ed62dab2323c780b31585de1750/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=6fca33b2edc09ed62dab2323c780b31585de1750",
        "patch": "@@ -18,6 +18,7 @@\n #include <sync.h>\n #include <txmempool.h>\n #include <util/check.h>\n+#include <util/ref.h>\n #include <util/strencodings.h>\n #include <validation.h>\n #include <version.h>\n@@ -80,13 +81,14 @@ static bool RESTERR(HTTPRequest* req, enum HTTPStatusCode status, std::string me\n  * @param[in]  req the HTTP request\n  * return pointer to the mempool or nullptr if no mempool found\n  */\n-static CTxMemPool* GetMemPool(HTTPRequest* req)\n+static CTxMemPool* GetMemPool(const util::Ref& context, HTTPRequest* req)\n {\n-    if (!g_rpc_node || !g_rpc_node->mempool) {\n+    NodeContext* node = context.Has<NodeContext>() ? &context.Get<NodeContext>() : nullptr;\n+    if (!node || !node->mempool) {\n         RESTERR(req, HTTP_NOT_FOUND, \"Mempool disabled or instance not found\");\n         return nullptr;\n     }\n-    return g_rpc_node->mempool;\n+    return node->mempool;\n }\n \n static RetFormat ParseDataFormat(std::string& param, const std::string& strReq)\n@@ -134,7 +136,8 @@ static bool CheckWarmup(HTTPRequest* req)\n     return true;\n }\n \n-static bool rest_headers(HTTPRequest* req,\n+static bool rest_headers(const util::Ref& context,\n+                         HTTPRequest* req,\n                          const std::string& strURIPart)\n {\n     if (!CheckWarmup(req))\n@@ -275,20 +278,20 @@ static bool rest_block(HTTPRequest* req,\n     }\n }\n \n-static bool rest_block_extended(HTTPRequest* req, const std::string& strURIPart)\n+static bool rest_block_extended(const util::Ref& context, HTTPRequest* req, const std::string& strURIPart)\n {\n     return rest_block(req, strURIPart, true);\n }\n \n-static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPart)\n+static bool rest_block_notxdetails(const util::Ref& context, HTTPRequest* req, const std::string& strURIPart)\n {\n     return rest_block(req, strURIPart, false);\n }\n \n // A bit of a hack - dependency on a function defined in rpc/blockchain.cpp\n UniValue getblockchaininfo(const JSONRPCRequest& request);\n \n-static bool rest_chaininfo(HTTPRequest* req, const std::string& strURIPart)\n+static bool rest_chaininfo(const util::Ref& context, HTTPRequest* req, const std::string& strURIPart)\n {\n     if (!CheckWarmup(req))\n         return false;\n@@ -297,7 +300,7 @@ static bool rest_chaininfo(HTTPRequest* req, const std::string& strURIPart)\n \n     switch (rf) {\n     case RetFormat::JSON: {\n-        JSONRPCRequest jsonRequest;\n+        JSONRPCRequest jsonRequest(context);\n         jsonRequest.params = UniValue(UniValue::VARR);\n         UniValue chainInfoObject = getblockchaininfo(jsonRequest);\n         std::string strJSON = chainInfoObject.write() + \"\\n\";\n@@ -311,11 +314,11 @@ static bool rest_chaininfo(HTTPRequest* req, const std::string& strURIPart)\n     }\n }\n \n-static bool rest_mempool_info(HTTPRequest* req, const std::string& strURIPart)\n+static bool rest_mempool_info(const util::Ref& context, HTTPRequest* req, const std::string& strURIPart)\n {\n     if (!CheckWarmup(req))\n         return false;\n-    const CTxMemPool* mempool = GetMemPool(req);\n+    const CTxMemPool* mempool = GetMemPool(context, req);\n     if (!mempool) return false;\n     std::string param;\n     const RetFormat rf = ParseDataFormat(param, strURIPart);\n@@ -335,10 +338,10 @@ static bool rest_mempool_info(HTTPRequest* req, const std::string& strURIPart)\n     }\n }\n \n-static bool rest_mempool_contents(HTTPRequest* req, const std::string& strURIPart)\n+static bool rest_mempool_contents(const util::Ref& context, HTTPRequest* req, const std::string& strURIPart)\n {\n     if (!CheckWarmup(req)) return false;\n-    const CTxMemPool* mempool = GetMemPool(req);\n+    const CTxMemPool* mempool = GetMemPool(context, req);\n     if (!mempool) return false;\n     std::string param;\n     const RetFormat rf = ParseDataFormat(param, strURIPart);\n@@ -358,7 +361,7 @@ static bool rest_mempool_contents(HTTPRequest* req, const std::string& strURIPar\n     }\n }\n \n-static bool rest_tx(HTTPRequest* req, const std::string& strURIPart)\n+static bool rest_tx(const util::Ref& context, HTTPRequest* req, const std::string& strURIPart)\n {\n     if (!CheckWarmup(req))\n         return false;\n@@ -414,7 +417,7 @@ static bool rest_tx(HTTPRequest* req, const std::string& strURIPart)\n     }\n }\n \n-static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n+static bool rest_getutxos(const util::Ref& context, HTTPRequest* req, const std::string& strURIPart)\n {\n     if (!CheckWarmup(req))\n         return false;\n@@ -523,7 +526,7 @@ static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n         };\n \n         if (fCheckMemPool) {\n-            const CTxMemPool* mempool = GetMemPool(req);\n+            const CTxMemPool* mempool = GetMemPool(context, req);\n             if (!mempool) return false;\n             // use db+mempool as cache backend in case user likes to query mempool\n             LOCK2(cs_main, mempool->cs);\n@@ -600,7 +603,7 @@ static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n     }\n }\n \n-static bool rest_blockhash_by_height(HTTPRequest* req,\n+static bool rest_blockhash_by_height(const util::Ref& context, HTTPRequest* req,\n                        const std::string& str_uri_part)\n {\n     if (!CheckWarmup(req)) return false;\n@@ -648,7 +651,7 @@ static bool rest_blockhash_by_height(HTTPRequest* req,\n \n static const struct {\n     const char* prefix;\n-    bool (*handler)(HTTPRequest* req, const std::string& strReq);\n+    bool (*handler)(const util::Ref& context, HTTPRequest* req, const std::string& strReq);\n } uri_prefixes[] = {\n       {\"/rest/tx/\", rest_tx},\n       {\"/rest/block/notxdetails/\", rest_block_notxdetails},\n@@ -661,10 +664,12 @@ static const struct {\n       {\"/rest/blockhashbyheight/\", rest_blockhash_by_height},\n };\n \n-void StartREST()\n+void StartREST(const util::Ref& context)\n {\n-    for (unsigned int i = 0; i < ARRAYLEN(uri_prefixes); i++)\n-        RegisterHTTPHandler(uri_prefixes[i].prefix, false, uri_prefixes[i].handler);\n+    for (const auto& up : uri_prefixes) {\n+        auto handler = [&context, up](HTTPRequest* req, const std::string& prefix) { return up.handler(context, req, prefix); };\n+        RegisterHTTPHandler(up.prefix, false, handler);\n+    }\n }\n \n void InterruptREST()"
      },
      {
        "sha": "e5702d77e90467b380853baa55fd0970735d484f",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 11,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6fca33b2edc09ed62dab2323c780b31585de1750/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6fca33b2edc09ed62dab2323c780b31585de1750/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=6fca33b2edc09ed62dab2323c780b31585de1750",
        "patch": "@@ -29,6 +29,7 @@\n #include <txdb.h>\n #include <txmempool.h>\n #include <undo.h>\n+#include <util/ref.h>\n #include <util/strencodings.h>\n #include <util/system.h>\n #include <validation.h>\n@@ -53,13 +54,21 @@ static Mutex cs_blockchange;\n static std::condition_variable cond_blockchange;\n static CUpdatedBlock latestblock;\n \n-CTxMemPool& EnsureMemPool()\n+NodeContext& EnsureNodeContext(const util::Ref& context)\n {\n-    CHECK_NONFATAL(g_rpc_node);\n-    if (!g_rpc_node->mempool) {\n+    if (!context.Has<NodeContext>()) {\n+        throw JSONRPCError(RPC_INTERNAL_ERROR, \"Node context not found\");\n+    }\n+    return context.Get<NodeContext>();\n+}\n+\n+CTxMemPool& EnsureMemPool(const util::Ref& context)\n+{\n+    NodeContext& node = EnsureNodeContext(context);\n+    if (!node.mempool) {\n         throw JSONRPCError(RPC_CLIENT_MEMPOOL_DISABLED, \"Mempool disabled or instance not found\");\n     }\n-    return *g_rpc_node->mempool;\n+    return *node.mempool;\n }\n \n /* Calculate the difficulty for a given block index.\n@@ -519,7 +528,7 @@ static UniValue getrawmempool(const JSONRPCRequest& request)\n     if (!request.params[0].isNull())\n         fVerbose = request.params[0].get_bool();\n \n-    return MempoolToJSON(EnsureMemPool(), fVerbose);\n+    return MempoolToJSON(EnsureMemPool(request.context), fVerbose);\n }\n \n static UniValue getmempoolancestors(const JSONRPCRequest& request)\n@@ -549,7 +558,7 @@ static UniValue getmempoolancestors(const JSONRPCRequest& request)\n \n     uint256 hash = ParseHashV(request.params[0], \"parameter 1\");\n \n-    const CTxMemPool& mempool = EnsureMemPool();\n+    const CTxMemPool& mempool = EnsureMemPool(request.context);\n     LOCK(mempool.cs);\n \n     CTxMemPool::txiter it = mempool.mapTx.find(hash);\n@@ -612,7 +621,7 @@ static UniValue getmempooldescendants(const JSONRPCRequest& request)\n \n     uint256 hash = ParseHashV(request.params[0], \"parameter 1\");\n \n-    const CTxMemPool& mempool = EnsureMemPool();\n+    const CTxMemPool& mempool = EnsureMemPool(request.context);\n     LOCK(mempool.cs);\n \n     CTxMemPool::txiter it = mempool.mapTx.find(hash);\n@@ -662,7 +671,7 @@ static UniValue getmempoolentry(const JSONRPCRequest& request)\n \n     uint256 hash = ParseHashV(request.params[0], \"parameter 1\");\n \n-    const CTxMemPool& mempool = EnsureMemPool();\n+    const CTxMemPool& mempool = EnsureMemPool(request.context);\n     LOCK(mempool.cs);\n \n     CTxMemPool::txiter it = mempool.mapTx.find(hash);\n@@ -1045,7 +1054,7 @@ UniValue gettxout(const JSONRPCRequest& request)\n     CCoinsViewCache* coins_view = &::ChainstateActive().CoinsTip();\n \n     if (fMempool) {\n-        const CTxMemPool& mempool = EnsureMemPool();\n+        const CTxMemPool& mempool = EnsureMemPool(request.context);\n         LOCK(mempool.cs);\n         CCoinsViewMemPool view(coins_view, mempool);\n         if (!view.GetCoin(out, coin) || mempool.isSpent(out)) {\n@@ -1415,7 +1424,7 @@ static UniValue getmempoolinfo(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n-    return MempoolInfoToJSON(EnsureMemPool());\n+    return MempoolInfoToJSON(EnsureMemPool(request.context));\n }\n \n static UniValue preciousblock(const JSONRPCRequest& request)\n@@ -1934,7 +1943,7 @@ static UniValue savemempool(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n-    const CTxMemPool& mempool = EnsureMemPool();\n+    const CTxMemPool& mempool = EnsureMemPool(request.context);\n \n     if (!mempool.IsLoaded()) {\n         throw JSONRPCError(RPC_MISC_ERROR, \"The mempool was not loaded yet\");"
      },
      {
        "sha": "fec9a0d3c5f35c402a76c6c6e7573cc320a5ebb7",
        "filename": "src/rpc/blockchain.h",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6fca33b2edc09ed62dab2323c780b31585de1750/src/rpc/blockchain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6fca33b2edc09ed62dab2323c780b31585de1750/src/rpc/blockchain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.h?ref=6fca33b2edc09ed62dab2323c780b31585de1750",
        "patch": "@@ -18,6 +18,9 @@ class CBlockIndex;\n class CTxMemPool;\n class UniValue;\n struct NodeContext;\n+namespace util {\n+class Ref;\n+} // namespace util\n \n static constexpr int NUM_GETBLOCKSTATS_PERCENTILES = 5;\n \n@@ -52,6 +55,7 @@ void CalculatePercentilesByWeight(CAmount result[NUM_GETBLOCKSTATS_PERCENTILES],\n //! direct way to pass in state to RPC methods without globals.\n extern NodeContext* g_rpc_node;\n \n-CTxMemPool& EnsureMemPool();\n+NodeContext& EnsureNodeContext(const util::Ref& context);\n+CTxMemPool& EnsureMemPool(const util::Ref& context);\n \n #endif"
      },
      {
        "sha": "2404b92ab23491a84fe85999c4c22c3d22f449b2",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 7,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6fca33b2edc09ed62dab2323c780b31585de1750/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6fca33b2edc09ed62dab2323c780b31585de1750/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=6fca33b2edc09ed62dab2323c780b31585de1750",
        "patch": "@@ -227,7 +227,7 @@ static UniValue generatetodescriptor(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, error);\n     }\n \n-    const CTxMemPool& mempool = EnsureMemPool();\n+    const CTxMemPool& mempool = EnsureMemPool(request.context);\n \n     return generateBlocks(mempool, coinbase_script, num_blocks, max_tries);\n }\n@@ -265,7 +265,7 @@ static UniValue generatetoaddress(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Error: Invalid address\");\n     }\n \n-    const CTxMemPool& mempool = EnsureMemPool();\n+    const CTxMemPool& mempool = EnsureMemPool(request.context);\n \n     CScript coinbase_script = GetScriptForDestination(destination);\n \n@@ -311,7 +311,7 @@ static UniValue generateblock(const JSONRPCRequest& request)\n         coinbase_script = GetScriptForDestination(destination);\n     }\n \n-    const CTxMemPool& mempool = EnsureMemPool();\n+    const CTxMemPool& mempool = EnsureMemPool(request.context);\n \n     std::vector<CTransactionRef> txs;\n     const auto raw_txs_or_txids = request.params[1].get_array();\n@@ -403,7 +403,7 @@ static UniValue getmininginfo(const JSONRPCRequest& request)\n             }.Check(request);\n \n     LOCK(cs_main);\n-    const CTxMemPool& mempool = EnsureMemPool();\n+    const CTxMemPool& mempool = EnsureMemPool(request.context);\n \n     UniValue obj(UniValue::VOBJ);\n     obj.pushKV(\"blocks\",           (int)::ChainActive().Height());\n@@ -449,7 +449,7 @@ static UniValue prioritisetransaction(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Priority is no longer supported, dummy argument to prioritisetransaction must be 0.\");\n     }\n \n-    EnsureMemPool().PrioritiseTransaction(hash, nAmount);\n+    EnsureMemPool(request.context).PrioritiseTransaction(hash, nAmount);\n     return true;\n }\n \n@@ -635,7 +635,8 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n     if (strMode != \"template\")\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid mode\");\n \n-    if(!g_rpc_node->connman)\n+    NodeContext& node = EnsureNodeContext(request.context);\n+    if(!node.connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n     if (g_rpc_node->connman->GetNodeCount(CConnman::CONNECTIONS_ALL) == 0)\n@@ -645,7 +646,7 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_CLIENT_IN_INITIAL_DOWNLOAD, PACKAGE_NAME \" is in initial sync and waiting for blocks...\");\n \n     static unsigned int nTransactionsUpdatedLast;\n-    const CTxMemPool& mempool = EnsureMemPool();\n+    const CTxMemPool& mempool = EnsureMemPool(request.context);\n \n     if (!lpval.isNull())\n     {"
      },
      {
        "sha": "ce98a7c937bfb9aca8f425d8d61db4056c35c468",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6fca33b2edc09ed62dab2323c780b31585de1750/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6fca33b2edc09ed62dab2323c780b31585de1750/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=6fca33b2edc09ed62dab2323c780b31585de1750",
        "patch": "@@ -15,6 +15,7 @@\n #include <script/descriptor.h>\n #include <util/check.h>\n #include <util/message.h> // For MessageSign(), MessageVerify()\n+#include <util/ref.h>\n #include <util/strencodings.h>\n #include <util/system.h>\n \n@@ -366,8 +367,8 @@ static UniValue setmocktime(const JSONRPCRequest& request)\n     RPCTypeCheck(request.params, {UniValue::VNUM});\n     int64_t time = request.params[0].get_int64();\n     SetMockTime(time);\n-    if (g_rpc_node) {\n-        for (const auto& chain_client : g_rpc_node->chain_clients) {\n+    if (request.context.Has<NodeContext>()) {\n+        for (const auto& chain_client : request.context.Get<NodeContext>().chain_clients) {\n             chain_client->setMockTime(time);\n         }\n     }\n@@ -398,9 +399,10 @@ static UniValue mockscheduler(const JSONRPCRequest& request)\n     }\n \n     // protect against null pointer dereference\n-    CHECK_NONFATAL(g_rpc_node);\n-    CHECK_NONFATAL(g_rpc_node->scheduler);\n-    g_rpc_node->scheduler->MockForward(std::chrono::seconds(delta_seconds));\n+    CHECK_NONFATAL(request.context.Has<NodeContext>());\n+    NodeContext& node = request.context.Get<NodeContext>();\n+    CHECK_NONFATAL(node.scheduler);\n+    node.scheduler->MockForward(std::chrono::seconds(delta_seconds));\n \n     return NullUniValue;\n }"
      },
      {
        "sha": "657990e8693ae57ad2d2c1d24ae6f01de74ef916",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 13,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6fca33b2edc09ed62dab2323c780b31585de1750/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6fca33b2edc09ed62dab2323c780b31585de1750/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=6fca33b2edc09ed62dab2323c780b31585de1750",
        "patch": "@@ -42,7 +42,8 @@ static UniValue getconnectioncount(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n-    if(!g_rpc_node->connman)\n+    NodeContext& node = EnsureNodeContext(request.context);\n+    if(!node.connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n     return (int)g_rpc_node->connman->GetNodeCount(CConnman::CONNECTIONS_ALL);\n@@ -62,7 +63,8 @@ static UniValue ping(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n-    if(!g_rpc_node->connman)\n+    NodeContext& node = EnsureNodeContext(request.context);\n+    if(!node.connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n     // Request that each node send a ping during next message processing pass\n@@ -139,7 +141,8 @@ static UniValue getpeerinfo(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n-    if(!g_rpc_node->connman)\n+    NodeContext& node = EnsureNodeContext(request.context);\n+    if(!node.connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n     std::vector<CNodeStats> vstats;\n@@ -248,7 +251,8 @@ static UniValue addnode(const JSONRPCRequest& request)\n                 },\n             }.ToString());\n \n-    if(!g_rpc_node->connman)\n+    NodeContext& node = EnsureNodeContext(request.context);\n+    if(!node.connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n     std::string strNode = request.params[0].get_str();\n@@ -293,7 +297,8 @@ static UniValue disconnectnode(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n-    if(!g_rpc_node->connman)\n+    NodeContext& node = EnsureNodeContext(request.context);\n+    if(!node.connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n     bool success;\n@@ -350,7 +355,8 @@ static UniValue getaddednodeinfo(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n-    if(!g_rpc_node->connman)\n+    NodeContext& node = EnsureNodeContext(request.context);\n+    if(!node.connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n     std::vector<AddedNodeInfo> vInfo = g_rpc_node->connman->GetAddedNodeInfo();\n@@ -417,7 +423,8 @@ static UniValue getnettotals(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"getnettotals\", \"\")\n                 },\n             }.Check(request);\n-    if(!g_rpc_node->connman)\n+    NodeContext& node = EnsureNodeContext(request.context);\n+    if(!node.connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n     UniValue obj(UniValue::VOBJ);\n@@ -513,7 +520,8 @@ static UniValue getnetworkinfo(const JSONRPCRequest& request)\n     obj.pushKV(\"version\",       CLIENT_VERSION);\n     obj.pushKV(\"subversion\",    strSubVersion);\n     obj.pushKV(\"protocolversion\",PROTOCOL_VERSION);\n-    if (g_rpc_node->connman) {\n+    NodeContext& node = EnsureNodeContext(request.context);\n+    if (node.connman) {\n         ServiceFlags services = g_rpc_node->connman->GetLocalServices();\n         obj.pushKV(\"localservices\", strprintf(\"%016x\", services));\n         obj.pushKV(\"localservicesnames\", GetServicesNames(services));\n@@ -567,7 +575,8 @@ static UniValue setban(const JSONRPCRequest& request)\n     if (request.fHelp || !help.IsValidNumArgs(request.params.size()) || (strCommand != \"add\" && strCommand != \"remove\")) {\n         throw std::runtime_error(help.ToString());\n     }\n-    if (!g_rpc_node->banman) {\n+    NodeContext& node = EnsureNodeContext(request.context);\n+    if (!node.banman) {\n         throw JSONRPCError(RPC_DATABASE_ERROR, \"Error: Ban database not loaded\");\n     }\n \n@@ -645,7 +654,8 @@ static UniValue listbanned(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n-    if(!g_rpc_node->banman) {\n+    NodeContext& node = EnsureNodeContext(request.context);\n+    if(!node.banman) {\n         throw JSONRPCError(RPC_DATABASE_ERROR, \"Error: Ban database not loaded\");\n     }\n \n@@ -679,7 +689,8 @@ static UniValue clearbanned(const JSONRPCRequest& request)\n                             + HelpExampleRpc(\"clearbanned\", \"\")\n                 },\n             }.Check(request);\n-    if (!g_rpc_node->banman) {\n+    NodeContext& node = EnsureNodeContext(request.context);\n+    if (!node.banman) {\n         throw JSONRPCError(RPC_DATABASE_ERROR, \"Error: Ban database not loaded\");\n     }\n \n@@ -699,7 +710,8 @@ static UniValue setnetworkactive(const JSONRPCRequest& request)\n                 RPCExamples{\"\"},\n             }.Check(request);\n \n-    if (!g_rpc_node->connman) {\n+    NodeContext& node = EnsureNodeContext(request.context);\n+    if (!node.connman) {\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n     }\n \n@@ -732,7 +744,8 @@ static UniValue getnodeaddresses(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"getnodeaddresses\", \"8\")\n                 },\n             }.Check(request);\n-    if (!g_rpc_node->connman) {\n+    NodeContext& node = EnsureNodeContext(request.context);\n+    if (!node.connman) {\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n     }\n "
      },
      {
        "sha": "e14217c30790e1d02047bc52dc4602cea8166028",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6fca33b2edc09ed62dab2323c780b31585de1750/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6fca33b2edc09ed62dab2323c780b31585de1750/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=6fca33b2edc09ed62dab2323c780b31585de1750",
        "patch": "@@ -653,7 +653,7 @@ static UniValue combinerawtransaction(const JSONRPCRequest& request)\n     CCoinsView viewDummy;\n     CCoinsViewCache view(&viewDummy);\n     {\n-        const CTxMemPool& mempool = EnsureMemPool();\n+        const CTxMemPool& mempool = EnsureMemPool(request.context);\n         LOCK(cs_main);\n         LOCK(mempool.cs);\n         CCoinsViewCache &viewChain = ::ChainstateActive().CoinsTip();\n@@ -778,7 +778,8 @@ static UniValue signrawtransactionwithkey(const JSONRPCRequest& request)\n     for (const CTxIn& txin : mtx.vin) {\n         coins[txin.prevout]; // Create empty map entry keyed by prevout.\n     }\n-    FindCoins(*g_rpc_node, coins);\n+    NodeContext& node = EnsureNodeContext(request.context);\n+    FindCoins(node, coins);\n \n     // Parse the prevtxs array\n     ParsePrevouts(request.params[2], &keystore, coins);\n@@ -837,7 +838,8 @@ static UniValue sendrawtransaction(const JSONRPCRequest& request)\n \n     std::string err_string;\n     AssertLockNotHeld(cs_main);\n-    const TransactionError err = BroadcastTransaction(*g_rpc_node, tx, err_string, max_raw_tx_fee, /*relay*/ true, /*wait_callback*/ true);\n+    NodeContext& node = EnsureNodeContext(request.context);\n+    const TransactionError err = BroadcastTransaction(node, tx, err_string, max_raw_tx_fee, /*relay*/ true, /*wait_callback*/ true);\n     if (TransactionError::OK != err) {\n         throw JSONRPCTransactionError(err, err_string);\n     }\n@@ -904,7 +906,7 @@ static UniValue testmempoolaccept(const JSONRPCRequest& request)\n                                              DEFAULT_MAX_RAW_TX_FEE_RATE :\n                                              CFeeRate(AmountFromValue(request.params[1]));\n \n-    CTxMemPool& mempool = EnsureMemPool();\n+    CTxMemPool& mempool = EnsureMemPool(request.context);\n     int64_t virtual_size = GetVirtualTransactionSize(*tx);\n     CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n \n@@ -1555,7 +1557,7 @@ UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n     CCoinsView viewDummy;\n     CCoinsViewCache view(&viewDummy);\n     {\n-        const CTxMemPool& mempool = EnsureMemPool();\n+        const CTxMemPool& mempool = EnsureMemPool(request.context);\n         LOCK2(cs_main, mempool.cs);\n         CCoinsViewCache &viewChain = ::ChainstateActive().CoinsTip();\n         CCoinsViewMemPool viewMempool(&viewChain, mempool);"
      },
      {
        "sha": "0a15b48de480109c80724fb4e2b9798a042a4b5f",
        "filename": "src/rpc/request.h",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6fca33b2edc09ed62dab2323c780b31585de1750/src/rpc/request.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6fca33b2edc09ed62dab2323c780b31585de1750/src/rpc/request.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/request.h?ref=6fca33b2edc09ed62dab2323c780b31585de1750",
        "patch": "@@ -10,6 +10,10 @@\n \n #include <univalue.h>\n \n+namespace util {\n+class Ref;\n+} // namespace util\n+\n UniValue JSONRPCRequestObj(const std::string& strMethod, const UniValue& params, const UniValue& id);\n UniValue JSONRPCReplyObj(const UniValue& result, const UniValue& error, const UniValue& id);\n std::string JSONRPCReply(const UniValue& result, const UniValue& error, const UniValue& id);\n@@ -34,8 +38,9 @@ class JSONRPCRequest\n     std::string URI;\n     std::string authUser;\n     std::string peerAddr;\n+    const util::Ref& context;\n \n-    JSONRPCRequest() : id(NullUniValue), params(NullUniValue), fHelp(false) {}\n+    JSONRPCRequest(const util::Ref& context) : id(NullUniValue), params(NullUniValue), fHelp(false), context(context) {}\n     void parse(const UniValue& valRequest);\n };\n "
      },
      {
        "sha": "b54cbb3f00230faab38bb7fa65ff64cc4bce7cad",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 3,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6fca33b2edc09ed62dab2323c780b31585de1750/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6fca33b2edc09ed62dab2323c780b31585de1750/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=6fca33b2edc09ed62dab2323c780b31585de1750",
        "patch": "@@ -10,6 +10,7 @@\n #include <interfaces/chain.h>\n #include <node/context.h>\n #include <test/util/setup_common.h>\n+#include <util/ref.h>\n #include <util/time.h>\n \n #include <boost/algorithm/string.hpp>\n@@ -19,13 +20,20 @@\n \n #include <rpc/blockchain.h>\n \n-UniValue CallRPC(std::string args)\n+class RPCTestingSetup : public TestingSetup\n+{\n+public:\n+    UniValue CallRPC(std::string args);\n+};\n+\n+UniValue RPCTestingSetup::CallRPC(std::string args)\n {\n     std::vector<std::string> vArgs;\n     boost::split(vArgs, args, boost::is_any_of(\" \\t\"));\n     std::string strMethod = vArgs[0];\n     vArgs.erase(vArgs.begin());\n-    JSONRPCRequest request;\n+    util::Ref context{m_node};\n+    JSONRPCRequest request(context);\n     request.strMethod = strMethod;\n     request.params = RPCConvertValues(strMethod, vArgs);\n     request.fHelp = false;\n@@ -40,7 +48,7 @@ UniValue CallRPC(std::string args)\n }\n \n \n-BOOST_FIXTURE_TEST_SUITE(rpc_tests, TestingSetup)\n+BOOST_FIXTURE_TEST_SUITE(rpc_tests, RPCTestingSetup)\n \n BOOST_AUTO_TEST_CASE(rpc_rawparams)\n {"
      },
      {
        "sha": "8e1c04d3c9f52aae8161c23b8650e1584822bfe6",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6fca33b2edc09ed62dab2323c780b31585de1750/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6fca33b2edc09ed62dab2323c780b31585de1750/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=6fca33b2edc09ed62dab2323c780b31585de1750",
        "patch": "@@ -131,7 +131,7 @@ TestingSetup::TestingSetup(const std::string& chainName, const std::vector<const\n     // We have to run a scheduler thread to prevent ActivateBestChain\n     // from blocking due to queue overrun.\n     threadGroup.create_thread([&]{ m_node.scheduler->serviceQueue(); });\n-    GetMainSignals().RegisterBackgroundSignalScheduler(*g_rpc_node->scheduler);\n+    GetMainSignals().RegisterBackgroundSignalScheduler(*m_node.scheduler);\n \n     pblocktree.reset(new CBlockTreeDB(1 << 20, true));\n "
      },
      {
        "sha": "eff24025f4a9bf2a7dc950d9fa2cabaa4f12e1f8",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6fca33b2edc09ed62dab2323c780b31585de1750/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6fca33b2edc09ed62dab2323c780b31585de1750/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=6fca33b2edc09ed62dab2323c780b31585de1750",
        "patch": "@@ -15,6 +15,7 @@\n #include <rpc/server.h>\n #include <test/util/logging.h>\n #include <test/util/setup_common.h>\n+#include <util/ref.h>\n #include <util/translation.h>\n #include <validation.h>\n #include <wallet/coincontrol.h>\n@@ -208,7 +209,8 @@ BOOST_FIXTURE_TEST_CASE(importmulti_rescan, TestChain100Setup)\n         key.pushKV(\"timestamp\", newTip->GetBlockTimeMax() + TIMESTAMP_WINDOW + 1);\n         key.pushKV(\"internal\", UniValue(true));\n         keys.push_back(key);\n-        JSONRPCRequest request;\n+        util::Ref context;\n+        JSONRPCRequest request(context);\n         request.params.setArray();\n         request.params.push_back(keys);\n \n@@ -262,7 +264,8 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n             AddWallet(wallet);\n             wallet->SetLastBlockProcessed(::ChainActive().Height(), ::ChainActive().Tip()->GetBlockHash());\n         }\n-        JSONRPCRequest request;\n+        util::Ref context;\n+        JSONRPCRequest request(context);\n         request.params.setArray();\n         request.params.push_back(backup_file);\n \n@@ -277,7 +280,8 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n         LOCK(wallet->cs_wallet);\n         wallet->SetupLegacyScriptPubKeyMan();\n \n-        JSONRPCRequest request;\n+        util::Ref context;\n+        JSONRPCRequest request(context);\n         request.params.setArray();\n         request.params.push_back(backup_file);\n         AddWallet(wallet);"
      }
    ]
  },
  {
    "sha": "ccb5059ee89f6e8dc31ba5b82830b384890bb65e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjY2I1MDU5ZWU4OWY2ZThkYzMxYmE1YjgyODMwYjM4NDg5MGJiNjVl",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-04-17T15:32:13Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-05-13T20:20:13Z"
      },
      "message": "scripted-diff: Remove g_rpc_node references\n\nThis commit does not change behavior\n\n-BEGIN VERIFY SCRIPT-\ngit grep -l g_rpc_node | xargs sed -i 's/g_rpc_node->/node./g'\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "9b76c0f915f3914c6b1519970d36cf33bc85e68b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9b76c0f915f3914c6b1519970d36cf33bc85e68b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ccb5059ee89f6e8dc31ba5b82830b384890bb65e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ccb5059ee89f6e8dc31ba5b82830b384890bb65e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ccb5059ee89f6e8dc31ba5b82830b384890bb65e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ccb5059ee89f6e8dc31ba5b82830b384890bb65e/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6fca33b2edc09ed62dab2323c780b31585de1750",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6fca33b2edc09ed62dab2323c780b31585de1750",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6fca33b2edc09ed62dab2323c780b31585de1750"
      }
    ],
    "stats": {
      "total": 70,
      "additions": 35,
      "deletions": 35
    },
    "files": [
      {
        "sha": "28b35828665cc54da98d9f06bafe3546c35dca09",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ccb5059ee89f6e8dc31ba5b82830b384890bb65e/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ccb5059ee89f6e8dc31ba5b82830b384890bb65e/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=ccb5059ee89f6e8dc31ba5b82830b384890bb65e",
        "patch": "@@ -639,7 +639,7 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n     if(!node.connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n-    if (g_rpc_node->connman->GetNodeCount(CConnman::CONNECTIONS_ALL) == 0)\n+    if (node.connman->GetNodeCount(CConnman::CONNECTIONS_ALL) == 0)\n         throw JSONRPCError(RPC_CLIENT_NOT_CONNECTED, PACKAGE_NAME \" is not connected!\");\n \n     if (::ChainstateActive().IsInitialBlockDownload())"
      },
      {
        "sha": "e29aa036956919f72900e43fe5b62aa03afa9adc",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 34,
        "changes": 68,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ccb5059ee89f6e8dc31ba5b82830b384890bb65e/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ccb5059ee89f6e8dc31ba5b82830b384890bb65e/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=ccb5059ee89f6e8dc31ba5b82830b384890bb65e",
        "patch": "@@ -46,7 +46,7 @@ static UniValue getconnectioncount(const JSONRPCRequest& request)\n     if(!node.connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n-    return (int)g_rpc_node->connman->GetNodeCount(CConnman::CONNECTIONS_ALL);\n+    return (int)node.connman->GetNodeCount(CConnman::CONNECTIONS_ALL);\n }\n \n static UniValue ping(const JSONRPCRequest& request)\n@@ -68,7 +68,7 @@ static UniValue ping(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n     // Request that each node send a ping during next message processing pass\n-    g_rpc_node->connman->ForEachNode([](CNode* pnode) {\n+    node.connman->ForEachNode([](CNode* pnode) {\n         pnode->fPingQueued = true;\n     });\n     return NullUniValue;\n@@ -146,7 +146,7 @@ static UniValue getpeerinfo(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n     std::vector<CNodeStats> vstats;\n-    g_rpc_node->connman->GetNodeStats(vstats);\n+    node.connman->GetNodeStats(vstats);\n \n     UniValue ret(UniValue::VARR);\n \n@@ -260,18 +260,18 @@ static UniValue addnode(const JSONRPCRequest& request)\n     if (strCommand == \"onetry\")\n     {\n         CAddress addr;\n-        g_rpc_node->connman->OpenNetworkConnection(addr, false, nullptr, strNode.c_str(), false, false, true);\n+        node.connman->OpenNetworkConnection(addr, false, nullptr, strNode.c_str(), false, false, true);\n         return NullUniValue;\n     }\n \n     if (strCommand == \"add\")\n     {\n-        if(!g_rpc_node->connman->AddNode(strNode))\n+        if(!node.connman->AddNode(strNode))\n             throw JSONRPCError(RPC_CLIENT_NODE_ALREADY_ADDED, \"Error: Node already added\");\n     }\n     else if(strCommand == \"remove\")\n     {\n-        if(!g_rpc_node->connman->RemoveAddedNode(strNode))\n+        if(!node.connman->RemoveAddedNode(strNode))\n             throw JSONRPCError(RPC_CLIENT_NODE_NOT_ADDED, \"Error: Node has not been added.\");\n     }\n \n@@ -307,11 +307,11 @@ static UniValue disconnectnode(const JSONRPCRequest& request)\n \n     if (!address_arg.isNull() && id_arg.isNull()) {\n         /* handle disconnect-by-address */\n-        success = g_rpc_node->connman->DisconnectNode(address_arg.get_str());\n+        success = node.connman->DisconnectNode(address_arg.get_str());\n     } else if (!id_arg.isNull() && (address_arg.isNull() || (address_arg.isStr() && address_arg.get_str().empty()))) {\n         /* handle disconnect-by-id */\n         NodeId nodeid = (NodeId) id_arg.get_int64();\n-        success = g_rpc_node->connman->DisconnectNode(nodeid);\n+        success = node.connman->DisconnectNode(nodeid);\n     } else {\n         throw JSONRPCError(RPC_INVALID_PARAMS, \"Only one of address and nodeid should be provided.\");\n     }\n@@ -359,7 +359,7 @@ static UniValue getaddednodeinfo(const JSONRPCRequest& request)\n     if(!node.connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n-    std::vector<AddedNodeInfo> vInfo = g_rpc_node->connman->GetAddedNodeInfo();\n+    std::vector<AddedNodeInfo> vInfo = node.connman->GetAddedNodeInfo();\n \n     if (!request.params[0].isNull()) {\n         bool found = false;\n@@ -428,17 +428,17 @@ static UniValue getnettotals(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n     UniValue obj(UniValue::VOBJ);\n-    obj.pushKV(\"totalbytesrecv\", g_rpc_node->connman->GetTotalBytesRecv());\n-    obj.pushKV(\"totalbytessent\", g_rpc_node->connman->GetTotalBytesSent());\n+    obj.pushKV(\"totalbytesrecv\", node.connman->GetTotalBytesRecv());\n+    obj.pushKV(\"totalbytessent\", node.connman->GetTotalBytesSent());\n     obj.pushKV(\"timemillis\", GetTimeMillis());\n \n     UniValue outboundLimit(UniValue::VOBJ);\n-    outboundLimit.pushKV(\"timeframe\", g_rpc_node->connman->GetMaxOutboundTimeframe());\n-    outboundLimit.pushKV(\"target\", g_rpc_node->connman->GetMaxOutboundTarget());\n-    outboundLimit.pushKV(\"target_reached\", g_rpc_node->connman->OutboundTargetReached(false));\n-    outboundLimit.pushKV(\"serve_historical_blocks\", !g_rpc_node->connman->OutboundTargetReached(true));\n-    outboundLimit.pushKV(\"bytes_left_in_cycle\", g_rpc_node->connman->GetOutboundTargetBytesLeft());\n-    outboundLimit.pushKV(\"time_left_in_cycle\", g_rpc_node->connman->GetMaxOutboundTimeLeftInCycle());\n+    outboundLimit.pushKV(\"timeframe\", node.connman->GetMaxOutboundTimeframe());\n+    outboundLimit.pushKV(\"target\", node.connman->GetMaxOutboundTarget());\n+    outboundLimit.pushKV(\"target_reached\", node.connman->OutboundTargetReached(false));\n+    outboundLimit.pushKV(\"serve_historical_blocks\", !node.connman->OutboundTargetReached(true));\n+    outboundLimit.pushKV(\"bytes_left_in_cycle\", node.connman->GetOutboundTargetBytesLeft());\n+    outboundLimit.pushKV(\"time_left_in_cycle\", node.connman->GetMaxOutboundTimeLeftInCycle());\n     obj.pushKV(\"uploadtarget\", outboundLimit);\n     return obj;\n }\n@@ -522,15 +522,15 @@ static UniValue getnetworkinfo(const JSONRPCRequest& request)\n     obj.pushKV(\"protocolversion\",PROTOCOL_VERSION);\n     NodeContext& node = EnsureNodeContext(request.context);\n     if (node.connman) {\n-        ServiceFlags services = g_rpc_node->connman->GetLocalServices();\n+        ServiceFlags services = node.connman->GetLocalServices();\n         obj.pushKV(\"localservices\", strprintf(\"%016x\", services));\n         obj.pushKV(\"localservicesnames\", GetServicesNames(services));\n     }\n     obj.pushKV(\"localrelay\", g_relay_txes);\n     obj.pushKV(\"timeoffset\",    GetTimeOffset());\n-    if (g_rpc_node->connman) {\n-        obj.pushKV(\"networkactive\", g_rpc_node->connman->GetNetworkActive());\n-        obj.pushKV(\"connections\",   (int)g_rpc_node->connman->GetNodeCount(CConnman::CONNECTIONS_ALL));\n+    if (node.connman) {\n+        obj.pushKV(\"networkactive\", node.connman->GetNetworkActive());\n+        obj.pushKV(\"connections\",   (int)node.connman->GetNodeCount(CConnman::CONNECTIONS_ALL));\n     }\n     obj.pushKV(\"networks\",      GetNetworksInfo());\n     obj.pushKV(\"relayfee\",      ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n@@ -600,7 +600,7 @@ static UniValue setban(const JSONRPCRequest& request)\n \n     if (strCommand == \"add\")\n     {\n-        if (isSubnet ? g_rpc_node->banman->IsBanned(subNet) : g_rpc_node->banman->IsBanned(netAddr)) {\n+        if (isSubnet ? node.banman->IsBanned(subNet) : node.banman->IsBanned(netAddr)) {\n             throw JSONRPCError(RPC_CLIENT_NODE_ALREADY_ADDED, \"Error: IP/Subnet already banned\");\n         }\n \n@@ -613,20 +613,20 @@ static UniValue setban(const JSONRPCRequest& request)\n             absolute = true;\n \n         if (isSubnet) {\n-            g_rpc_node->banman->Ban(subNet, BanReasonManuallyAdded, banTime, absolute);\n-            if (g_rpc_node->connman) {\n-                g_rpc_node->connman->DisconnectNode(subNet);\n+            node.banman->Ban(subNet, BanReasonManuallyAdded, banTime, absolute);\n+            if (node.connman) {\n+                node.connman->DisconnectNode(subNet);\n             }\n         } else {\n-            g_rpc_node->banman->Ban(netAddr, BanReasonManuallyAdded, banTime, absolute);\n-            if (g_rpc_node->connman) {\n-                g_rpc_node->connman->DisconnectNode(netAddr);\n+            node.banman->Ban(netAddr, BanReasonManuallyAdded, banTime, absolute);\n+            if (node.connman) {\n+                node.connman->DisconnectNode(netAddr);\n             }\n         }\n     }\n     else if(strCommand == \"remove\")\n     {\n-        if (!( isSubnet ? g_rpc_node->banman->Unban(subNet) : g_rpc_node->banman->Unban(netAddr) )) {\n+        if (!( isSubnet ? node.banman->Unban(subNet) : node.banman->Unban(netAddr) )) {\n             throw JSONRPCError(RPC_CLIENT_INVALID_IP_OR_SUBNET, \"Error: Unban failed. Requested address/subnet was not previously banned.\");\n         }\n     }\n@@ -660,7 +660,7 @@ static UniValue listbanned(const JSONRPCRequest& request)\n     }\n \n     banmap_t banMap;\n-    g_rpc_node->banman->GetBanned(banMap);\n+    node.banman->GetBanned(banMap);\n \n     UniValue bannedAddresses(UniValue::VARR);\n     for (const auto& entry : banMap)\n@@ -694,7 +694,7 @@ static UniValue clearbanned(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_DATABASE_ERROR, \"Error: Ban database not loaded\");\n     }\n \n-    g_rpc_node->banman->ClearBanned();\n+    node.banman->ClearBanned();\n \n     return NullUniValue;\n }\n@@ -715,9 +715,9 @@ static UniValue setnetworkactive(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n     }\n \n-    g_rpc_node->connman->SetNetworkActive(request.params[0].get_bool());\n+    node.connman->SetNetworkActive(request.params[0].get_bool());\n \n-    return g_rpc_node->connman->GetNetworkActive();\n+    return node.connman->GetNetworkActive();\n }\n \n static UniValue getnodeaddresses(const JSONRPCRequest& request)\n@@ -757,7 +757,7 @@ static UniValue getnodeaddresses(const JSONRPCRequest& request)\n         }\n     }\n     // returns a shuffled list of CAddress\n-    std::vector<CAddress> vAddr = g_rpc_node->connman->GetAddresses();\n+    std::vector<CAddress> vAddr = node.connman->GetAddresses();\n     UniValue ret(UniValue::VARR);\n \n     int address_return_count = std::min<int>(count, vAddr.size());"
      }
    ]
  },
  {
    "sha": "b3f7f375efb9a9ca9a7a4f2caf41fe3df2262520",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiM2Y3ZjM3NWVmYjlhOWNhOWE3YTRmMmNhZjQxZmUzZGYyMjYyNTIw",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-04-17T15:32:48Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-05-13T20:20:13Z"
      },
      "message": "refactor: Remove g_rpc_node global\n\nThis commit does not change behavior",
      "tree": {
        "sha": "d9fe2ebd8d202502a21a32ee614e6a01f6b880c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d9fe2ebd8d202502a21a32ee614e6a01f6b880c5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b3f7f375efb9a9ca9a7a4f2caf41fe3df2262520",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3f7f375efb9a9ca9a7a4f2caf41fe3df2262520",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b3f7f375efb9a9ca9a7a4f2caf41fe3df2262520",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3f7f375efb9a9ca9a7a4f2caf41fe3df2262520/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ccb5059ee89f6e8dc31ba5b82830b384890bb65e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ccb5059ee89f6e8dc31ba5b82830b384890bb65e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ccb5059ee89f6e8dc31ba5b82830b384890bb65e"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 0,
      "deletions": 10
    },
    "files": [
      {
        "sha": "f01416e136b83749f052d655bf772fb99929c476",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3f7f375efb9a9ca9a7a4f2caf41fe3df2262520/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3f7f375efb9a9ca9a7a4f2caf41fe3df2262520/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=b3f7f375efb9a9ca9a7a4f2caf41fe3df2262520",
        "patch": "@@ -1339,7 +1339,6 @@ bool AppInitMain(const util::Ref& context, NodeContext& node)\n     for (const auto& client : node.chain_clients) {\n         client->registerRpcs();\n     }\n-    g_rpc_node = &node;\n #if ENABLE_ZMQ\n     RegisterZMQRPCCommands(tableRPC);\n #endif"
      },
      {
        "sha": "c04e4fc77b2a61a82e97d986990f830a0b568268",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3f7f375efb9a9ca9a7a4f2caf41fe3df2262520/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3f7f375efb9a9ca9a7a4f2caf41fe3df2262520/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=b3f7f375efb9a9ca9a7a4f2caf41fe3df2262520",
        "patch": "@@ -2394,5 +2394,3 @@ static const CRPCCommand commands[] =\n     for (unsigned int vcidx = 0; vcidx < ARRAYLEN(commands); vcidx++)\n         t.appendCommand(commands[vcidx].name, &commands[vcidx]);\n }\n-\n-NodeContext* g_rpc_node = nullptr;"
      },
      {
        "sha": "2417340d6429d5f712e913501384dd69f5bc72d6",
        "filename": "src/rpc/blockchain.h",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3f7f375efb9a9ca9a7a4f2caf41fe3df2262520/src/rpc/blockchain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3f7f375efb9a9ca9a7a4f2caf41fe3df2262520/src/rpc/blockchain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.h?ref=b3f7f375efb9a9ca9a7a4f2caf41fe3df2262520",
        "patch": "@@ -50,11 +50,6 @@ UniValue blockheaderToJSON(const CBlockIndex* tip, const CBlockIndex* blockindex\n /** Used by getblockstats to get feerates at different percentiles by weight  */\n void CalculatePercentilesByWeight(CAmount result[NUM_GETBLOCKSTATS_PERCENTILES], std::vector<std::pair<CAmount, int64_t>>& scores, int64_t total_weight);\n \n-//! Pointer to node state that needs to be declared as a global to be accessible\n-//! RPC methods. Due to limitations of the RPC framework, there's currently no\n-//! direct way to pass in state to RPC methods without globals.\n-extern NodeContext* g_rpc_node;\n-\n NodeContext& EnsureNodeContext(const util::Ref& context);\n CTxMemPool& EnsureMemPool(const util::Ref& context);\n "
      },
      {
        "sha": "86dac55b2b6c822d5077ac9488c4d0ed3862d5b0",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3f7f375efb9a9ca9a7a4f2caf41fe3df2262520/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3f7f375efb9a9ca9a7a4f2caf41fe3df2262520/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=b3f7f375efb9a9ca9a7a4f2caf41fe3df2262520",
        "patch": "@@ -123,7 +123,6 @@ TestingSetup::TestingSetup(const std::string& chainName, const std::vector<const\n     const CChainParams& chainparams = Params();\n     // Ideally we'd move all the RPC tests to the functional testing framework\n     // instead of unit tests, but for now we need these here.\n-    g_rpc_node = &m_node;\n     RegisterAllCoreRPCCommands(tableRPC);\n \n     m_node.scheduler = MakeUnique<CScheduler>();\n@@ -176,7 +175,6 @@ TestingSetup::~TestingSetup()\n     threadGroup.join_all();\n     GetMainSignals().FlushBackgroundCallbacks();\n     GetMainSignals().UnregisterBackgroundSignalScheduler();\n-    g_rpc_node = nullptr;\n     m_node.connman.reset();\n     m_node.banman.reset();\n     m_node.args = nullptr;"
      }
    ]
  }
]