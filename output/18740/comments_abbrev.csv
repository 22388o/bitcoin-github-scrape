MarcoFalke,2020-04-22 16:26:59,"> Instead [...] void*, which isn't type safe, it uses a small new util::Ref \n\nWhy not `NodeContext*`? That might seem like a layer violation reading the source code, but practically it does the same and the diff would be smaller.",https://github.com/bitcoin/bitcoin/pull/18740#issuecomment-617885783,617885783,
ryanofsky,2020-04-22 16:49:37,"> > Instead [...] void*, which isn't type safe, it uses a small new util::Ref\n> \n> Why not `NodeContext*`? That might seem like a layer violation reading the source code, but practically it does the same and the diff would be smaller.\n\nThis would allow only allow dropping the first commit. The later commits would look basically the same but with `s/util::Ref/NodeContext/`.\n\nThe practic",https://github.com/bitcoin/bitcoin/pull/18740#issuecomment-617899166,617899166,
promag,2020-04-22 17:05:21,"From https://github.com/bitcoin/bitcoin/pull/18647#issuecomment-614059391\n\n> Wallet RPC methods shouldn't have access to NodeContext. At some point we should have WalletContext struct that will hold things like vpwallets and let us get rid of wallet globals, and it would make sense for wallet RPC methods to have access to this. That is why suggestion from #17548 was to just add a new member to",https://github.com/bitcoin/bitcoin/pull/18740#issuecomment-617907818,617907818,
practicalswift,2020-04-22 17:30:37,"Concept ACK\n\nVery happy to see `g_rpc_node` go!\n\nThanks for the great architectural work you are doing.",https://github.com/bitcoin/bitcoin/pull/18740#issuecomment-617921683,617921683,
ryanofsky,2020-04-22 17:48:36,"> How would you implement this? Make context a `map<string, any>`? And do `context[""node""].Has<NodeContext>()`?\n\nNo need for multiple contexts in the same request. `interfaces::WalletClientImpl` can just pass an different context to wallet RPC methods. Passing an `interfaces::Chain` reference would be sufficient enough for `loadwallet` / `createwallet`. But I actually want to introduce a `Wall",https://github.com/bitcoin/bitcoin/pull/18740#issuecomment-617931527,617931527,
ryanofsky,2020-04-22 17:58:05,"Actually @promag, it is a little clumsier than I thought. I should change this PR to pass context to rpc method register calls instead of the StartHTTPRPC call to make this more future-proof (should still be an improvement as is)",https://github.com/bitcoin/bitcoin/pull/18740#issuecomment-617936446,617936446,
DrahtBot,2020-04-22 19:37:48,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19028 (test: Set -logthreadnames in unit tests by MarcoFalke)\n* #19011 (Reduce cs_main lock accumulation during GUI star",https://github.com/bitcoin/bitcoin/pull/18740#issuecomment-617992041,617992041,
ryanofsky,2020-04-29 17:20:11,"Rebased 41d5d651594c6c939add7a58b7e30c97dccdf24a -> 02aa19a8b1a2e7e6b2293ae8512f7c606ca58345 ([`pr/frpc.5`](https://github.com/ryanofsky/bitcoin/commits/pr/frpc.5) -> [`pr/frpc.6`](https://github.com/ryanofsky/bitcoin/commits/pr/frpc.6), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/frpc.5-rebase..pr/frpc.6)) due to conflict with #18785",https://github.com/bitcoin/bitcoin/pull/18740#issuecomment-621349725,621349725,
brakmic,2020-05-01 12:03:04,"ACK 02aa19a8b1a2e7e6b2293ae8512f7c606ca58345\n\nBuilt, run and done some manual RPC testing on macOS Catalina 10.15.4",https://github.com/bitcoin/bitcoin/pull/18740#issuecomment-622361155,622361155,
ryanofsky,2020-05-04 18:29:50,"Rebased 02aa19a8b1a2e7e6b2293ae8512f7c606ca58345 -> 1be6bad7c044981faea55c76730a07eb95c2fd9f ([`pr/frpc.6`](https://github.com/ryanofsky/bitcoin/commits/pr/frpc.6) -> [`pr/frpc.7`](https://github.com/ryanofsky/bitcoin/commits/pr/frpc.7), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/frpc.6-rebase..pr/frpc.7)) due to conflict with #18699",https://github.com/bitcoin/bitcoin/pull/18740#issuecomment-623630419,623630419,
ryanofsky,2020-05-05 04:55:02,"Travis error appears to be unrelated ""`mkdir: cannot create directory â€˜/home/travis/build/bitcoin/bitcoin/ci/scratchâ€™: No space left on device\n`"" in s390x native BE build https://travis-ci.org/github/bitcoin/bitcoin/jobs/683061500#L336. It's reported in #18868",https://github.com/bitcoin/bitcoin/pull/18740#issuecomment-623855960,623855960,
ryanofsky,2020-05-13 22:10:38,"Rebased 1be6bad7c044981faea55c76730a07eb95c2fd9f -> c13af197ce473769303c3bf1bcb38658c5f8de41 ([`pr/frpc.7`](https://github.com/ryanofsky/bitcoin/commits/pr/frpc.7) -> [`pr/frpc.8`](https://github.com/ryanofsky/bitcoin/commits/pr/frpc.8), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/frpc.7-rebase..pr/frpc.8)) due to conflict with #16224",https://github.com/bitcoin/bitcoin/pull/18740#issuecomment-628272144,628272144,
ajtowns,2020-05-19 08:24:33,"> I should change this PR to pass context to rpc method register calls\n\nI found the `std::any` versus explicit `NodeContext` tradeoff confusing, but I think this makes sense of it. With a node/wallet/mempool/whatever context passed to the rpc register calls, this means\n\n * the RPC infra (server, json request) doesn't need to know about bitcoin structures at all\n * the RPC command can jus",https://github.com/bitcoin/bitcoin/pull/18740#issuecomment-630667062,630667062,
ryanofsky,2020-05-19 11:49:47,"> So, Approach ACK. Planning on updating this pr with the register changes, or doing that later?\n\nWas planning on doing it in a followup PR removing g_rpc_chain\n",https://github.com/bitcoin/bitcoin/pull/18740#issuecomment-630767632,630767632,
MarcoFalke,2020-05-21 10:52:51,"re-ACK b3f7f375ef, only change is adding back const and more tests ðŸš¾\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nre-ACK b3f7f375ef, only change is adding back const and more tests ðŸš¾\n-----BEGIN PGP SIGNATURE-----\n\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjEBAv/RaWaCy",https://github.com/bitcoin/bitcoin/pull/18740#issuecomment-632020201,632020201,
hebasto,2021-03-28 00:34:34,"@ryanofsky \n> This uses a hybrid of the approaches suggested in #17548. Instead of using `std::any`, which isn't available in c++11, or `void*`, which isn't type safe, it uses a small new `util::Ref` helper class, which acts like a simplified `std::any` that only holds references, not values.\n\nThe `std::any` requires that a type of a contained object [must](https://en.cppreference.com/w/cpp/",https://github.com/bitcoin/bitcoin/pull/18740#issuecomment-808823397,808823397,
fanquake,2021-03-28 00:36:51,"> So, even with C++17, there are no simple ways to drop util::Ref in favor of std::any, unfortunately.\n\nIt's being dropped for `std::any` in #21366.",https://github.com/bitcoin/bitcoin/pull/18740#issuecomment-808823584,808823584,
promag,2020-04-23 00:45:41,Have you considered `EnsureNodeContext(const JSONRPCRequest& req)` instead? Same for `EnsureMemPool`. Could avoid forward declaration above.,https://github.com/bitcoin/bitcoin/pull/18740#discussion_r413428813,413428813,src/rpc/blockchain.h
MarcoFalke,2020-04-24 18:18:37,"Heh, nice find. Maybe split this up as a separate pull request, since it seems unrelated to the changes here?",https://github.com/bitcoin/bitcoin/pull/18740#discussion_r414772851,414772851,src/rest.cpp
ryanofsky,2020-04-27 19:08:04,"re: https://github.com/bitcoin/bitcoin/pull/18740#discussion_r414772851\n\n> Maybe split this up as a separate pull request, since it seems unrelated to the changes here?\n\nYes it should be basically be unrelated. I created https://github.com/bitcoin/bitcoin/pull/18785, but am also keeping the commit here for now, since it does seem to be needed to avoid travis failing with the other changes ",https://github.com/bitcoin/bitcoin/pull/18740#discussion_r416076255,416076255,src/rest.cpp
ryanofsky,2020-04-27 19:27:35,"re: https://github.com/bitcoin/bitcoin/pull/18740#discussion_r413428813\n\n> Have you considered `EnsureNodeContext(const JSONRPCRequest& req)` instead? Same for `EnsureMemPool`. Could avoid forward declaration above.\n\nProbably considered it, but I don't like this style (along lines of c++ koan https://www.youtube.com/watch?v=Zx_Tjp9WIII&t=15m07s)",https://github.com/bitcoin/bitcoin/pull/18740#discussion_r416088275,416088275,src/rpc/blockchain.h
MarcoFalke,2020-05-19 11:51:58,:eyes: ,https://github.com/bitcoin/bitcoin/pull/18740#discussion_r427241499,427241499,src/rpc/blockchain.cpp
MarcoFalke,2020-05-19 15:01:02,"in the commit that adds ref: Could check that each is an alias for the other? Right now ref could actually be a copy and the test wouldn't fail.\n\n```diff\ndiff --git a/src/test/ref_tests.cpp b/src/test/ref_tests.cpp\nindex ef96a0042a..0ec0799fbc 100644\n--- a/src/test/ref_tests.cpp\n+++ b/src/test/ref_tests.cpp\n@@ -19,6 +19,10 @@ BOOST_AUTO_TEST_CASE(ref_test)\n     BOOST_CHECK_EQUAL(re",https://github.com/bitcoin/bitcoin/pull/18740#discussion_r427373123,427373123,src/test/ref_tests.cpp
ryanofsky,2020-05-20 21:40:44,"In commit ""refactor: Pass NodeContext to RPC and REST methods through util::Ref"" (28941409ac80fe6f8216b4f8fa940b31c270133b)\n\nre: https://github.com/bitcoin/bitcoin/pull/18740#discussion_r427241499\n\n> :eyes:\n\nGood catch! Added const",https://github.com/bitcoin/bitcoin/pull/18740#discussion_r428323475,428323475,src/rpc/blockchain.cpp
ryanofsky,2020-05-20 21:44:58,"In commit ""Add util::Ref class as temporary alternative for c++17 std::any"" (d8c253f26e1dee43e855f376be3f8c204b23ca50)\n\nre: https://github.com/bitcoin/bitcoin/pull/18740#discussion_r427373123\n\n> in the commit that adds ref: Could check that each is an alias for the other? Right now ref could actually be a copy and the test wouldn't fail.\n\nNice, added suggested checks",https://github.com/bitcoin/bitcoin/pull/18740#discussion_r428325456,428325456,src/test/ref_tests.cpp
ajtowns,2020-05-21 00:16:04,"This doesn't seem like a subset of std::any's functionality -- as far as I can tell std::any makes a copy of an object, and [can't be used](https://stackoverflow.com/questions/56613109/is-it-possible-to-store-a-reference-in-a-stdany) for the behaviour `Ref` offers (providing a reference to an arbitrary object). Just a comment nit: implementing copy semantics seems like a waste of time, and moving ",https://github.com/bitcoin/bitcoin/pull/18740#discussion_r428378021,428378021,src/util/ref.h
ajtowns,2020-05-21 00:27:41,"Should just add `context` as a param to `RegisterHTTPHandler()`, and change the definitions of `HTTPRequestHandler` and `HTTPPathHandler` to accept/track the context, rather than have lots of lambdas? Something like https://github.com/ajtowns/bitcoin/commits/202005-pr18740-tweaks",https://github.com/bitcoin/bitcoin/pull/18740#discussion_r428381159,428381159,src/httprpc.cpp
ajtowns,2020-05-21 01:43:17,`EnsureNodeContext` ?,https://github.com/bitcoin/bitcoin/pull/18740#discussion_r428400168,428400168,src/rpc/misc.cpp
ajtowns,2020-05-21 02:32:58,"`Ref& _context` and `context(_context)`? We usually use different names for arguments and members, don't we? ",https://github.com/bitcoin/bitcoin/pull/18740#discussion_r428412255,428412255,src/rpc/request.h
ryanofsky,2020-05-21 03:25:47,"Thanks for the review. std::any can hold pointers and reference wrappers, so there is no problem here. I'm going to mark the style comments resolved because I disagree with them and don't want to create extended off-topic conversations. But if there's anything that should be reconsidered, definitely do follow up. Review suggestions tend to be most useful when they are specific and say something ab",https://github.com/bitcoin/bitcoin/pull/18740#discussion_r428424812,428424812,src/util/ref.h
MarcoFalke,2020-05-21 10:49:29,"This will cause -Wshadow warnings, but luckily we don't have them enabled anymore",https://github.com/bitcoin/bitcoin/pull/18740#discussion_r428580340,428580340,src/rpc/request.h
MarcoFalke,2020-05-21 10:50:04,"I think russ tries to keep the previous structure of the code, but I agree this can be changed in a follow-up",https://github.com/bitcoin/bitcoin/pull/18740#discussion_r428580582,428580582,src/rpc/misc.cpp
MarcoFalke,2020-05-21 10:53:17,This can be fixed up in the follow-up that switches to C++17,https://github.com/bitcoin/bitcoin/pull/18740#discussion_r428581872,428581872,src/rpc/request.h
