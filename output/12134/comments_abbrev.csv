ryanofsky,2018-01-09T20:27:34Z,Can you explain why exactly the patching is needed in this case? It would definitely seem better to test against unpatched previous releases if possible.,https://github.com/bitcoin/bitcoin/pull/12134#issuecomment-356404252,356404252,
Sjors,2018-01-09T20:33:40Z,"@ryanofsky the regtest parameters were changed to activate SegWit at the genesis block, which causes nodes after #11389 to reject blocks created by v0.15.1 and older nodes (and vice versa). Maybe there's a less drastic way to change the regtest consensus params for these older releases?",https://github.com/bitcoin/bitcoin/pull/12134#issuecomment-356405725,356405725,
ryanofsky,2018-01-09T20:42:53Z,"Not sure, but is passing `-vbparams=segwit:0:0` an option?",https://github.com/bitcoin/bitcoin/pull/12134#issuecomment-356407978,356407978,
sdaftuar,2018-01-09T21:16:39Z,"@sjors I've spent some time looking into how feasible it would be to write functional tests that would run against older versions of our software, which I think would be great if we could pull off -- for instance, I thought it would be nice in something like the `p2p-segwit.py` test for us to use an actual old binary in the `upgrade_after_activation` test, rather than mocking it with a current bin",https://github.com/bitcoin/bitcoin/pull/12134#issuecomment-356416607,356416607,
ryanofsky,2018-01-09T21:38:22Z,"> So no test that uses sync_blocks can run on a pre-0.14 version of the code (which is basically every test we have!).\n\nI don't understand why this would matter. I think the goal here is just to be able to write a small test that brings up a specific version of bitcoind (0.15) and tests a few things with it, not to be able to run large swathes of the test framework against arbitrary bitcoin re",https://github.com/bitcoin/bitcoin/pull/12134#issuecomment-356422423,356422423,
sdaftuar,2018-01-09T21:49:36Z,"@ryanofsky Perhaps I phrased that sentence poorly -- my point wasn't that we'd want to run all the tests against older code (I think that would be absurd), just that we take it for granted that we can call `sync_blocks` in all sorts of places, so to not have such a basic utility at your disposal can be surprising and hard to work around.\n\nAnother way to look at it: imagine you wanted to run a ",https://github.com/bitcoin/bitcoin/pull/12134#issuecomment-356425374,356425374,
jnewbery,2018-01-09T22:00:53Z,"This seems possible for small, limited tests which don't use the full range of test framework capabilities (for example, if we just want to test downgrading to v0.15 to test segwit wallets). As Suhas has pointed out, there are lots of reasons why this is difficult in the general case, but I think we can work around them for a targeted test cases:\n\n> sync_blocks() was rewritten to use an rpc ca",https://github.com/bitcoin/bitcoin/pull/12134#issuecomment-356428226,356428226,
sdaftuar,2018-01-09T22:09:39Z,"This is an aside if the goal here is just to make 0.15 work, but:\n\n> We could be careful to not use named arguments in tests where we want to use earlier versions. Or we could add a shim to TestNode to convert named -> positional.\n\nThe change to support named args actually affected RPC invocations that don't use named args -- I think we send an empty dictionary instead of an empty list in ",https://github.com/bitcoin/bitcoin/pull/12134#issuecomment-356430526,356430526,
sdaftuar,2018-01-09T22:12:46Z,"> I expect we'll only want to have tests covering the last one or two releases, so I don't see this as a huge problem.\n\nI don't follow this point though -- in something like the `p2p-segwit.py` test, you'd have to do the upgrade after activation test on an 0.13.0 node or earlier.  So if we'd written the test in such a way as to use an old binary, we'd have to just decommission that test at som",https://github.com/bitcoin/bitcoin/pull/12134#issuecomment-356431281,356431281,
jnewbery,2018-01-09T22:16:35Z,"> in something like the p2p-segwit.py test, you'd have to do the upgrade after activation test on an 0.13.0 node or earlier. So if we'd written the test in such a way as to use an old binary, we'd have to just decommission that test at some point...?\n\nYes - my expectation is that we'd decommission that test at some point. I don't think that testing versions older than a couple of releases is s",https://github.com/bitcoin/bitcoin/pull/12134#issuecomment-356432281,356432281,
Sjors,2018-01-10T16:26:36Z,"@jnewbery compiling from source seems more flexible than fetching binaries, especially if we need to patch things. There might also be configure flags that are optimal for the functional tests. It can be expanded to fetch code from other repositories (on your own test rig). \n\nDownloading binaries would be faster, but it also involves figuring out which OS you're on and checking the checksum, s",https://github.com/bitcoin/bitcoin/pull/12134#issuecomment-356655476,356655476,
jonasschnelli,2018-01-10T19:01:59Z,"Concept ACK, haven't looked at the code.\n\nI think not testing with older versions is the biggest lack in our test env.\nThings like the UTXO migration (now done) or testing how ""older"" nodes act on the (new) p2p network.\nAlso, up- and downgrading wallets is not covered by our tests and could be with something like this.",https://github.com/bitcoin/bitcoin/pull/12134#issuecomment-356702797,356702797,
meshcollider,2018-01-11T09:15:40Z,"Concept ACK, cross version testing will be a very nice addition to the testing suite IMO",https://github.com/bitcoin/bitcoin/pull/12134#issuecomment-356873127,356873127,
Sjors,2018-01-11T10:32:06Z,"@MarcoFalke wrote:\n> we need to run those tests in the pull request travis run\n\nThey ran for this PR, so I assume they'll run on every PR once this is merged?",https://github.com/bitcoin/bitcoin/pull/12134#issuecomment-356893481,356893481,
Sjors,2018-01-12T19:12:01Z,"I found this quite useful in testing the recently merged SegWit wallet changes in WIP #12152.\n\nI didn't need more changes to the build script and Travis configuration for those tests. On other hand in order to swap wallets in a test I'll need more involved changes to the test framework as well as dynamic loading of wallets. So I'll keep the tests in this PR trivial.\n\nWith the above caveats",https://github.com/bitcoin/bitcoin/pull/12134#issuecomment-357327816,357327816,
Sjors,2018-04-11T15:30:15Z,Rebased. I added support for `v0.16.0` and removed `v0.15.1` and `v0.14.2` since they're no longer compatible with the test framework (can perhaps be patched later).,https://github.com/bitcoin/bitcoin/pull/12134#issuecomment-380494934,380494934,
Sjors,2018-05-15T12:49:43Z,Rebased due to small conflict in `travis.yml`.,https://github.com/bitcoin/bitcoin/pull/12134#issuecomment-389154512,389154512,
Sjors,2018-05-23T09:17:45Z,Travis failed after 50 minutes due to a timeout. Preventing that would be an argument in favor of just fetching binaries.,https://github.com/bitcoin/bitcoin/pull/12134#issuecomment-391279543,391279543,
Sjors,2018-07-06T12:45:56Z,"Rebased, and switched the test from v0.16.0 to v0.16.1\n\nGetting another timeout during the build, so I'll add support to just fetch the binaries.",https://github.com/bitcoin/bitcoin/pull/12134#issuecomment-403023578,403023578,
Sjors,2018-07-06T14:01:31Z,"It now fetches the v0.16.1 binary instead of compiling, which should speed up Travis.\n\nUnfortunately now the test framework seems unable to connect to the RPC, at least on my Mac. ",https://github.com/bitcoin/bitcoin/pull/12134#issuecomment-403043284,403043284,
Sjors,2018-07-07T12:48:27Z,Same problem on Travis: test framework can't connect to the v0.16.1 RPC for some reason. @jnewbery any recent changes which could explain that? Or perhaps there's something about the release binaries that gets in the way?,https://github.com/bitcoin/bitcoin/pull/12134#issuecomment-403213510,403213510,
MarcoFalke,2018-07-08T07:42:11Z,@Sjors I believe you could add some prints in `wait_for_rpc_connection` to find out why it fails.,https://github.com/bitcoin/bitcoin/pull/12134#issuecomment-403269334,403269334,
jnewbery,2018-07-09T15:13:36Z,"If you can repro this locally, I'd recommend adding a breakpoint immediately before the call to `wait_for_rpc_connection()` and then seeing if you can connect to the RPC manually. Perhaps your binaries aren't picking up all the correct config and command line arguments?",https://github.com/bitcoin/bitcoin/pull/12134#issuecomment-403514131,403514131,
Sjors,2018-08-26T19:03:41Z,Rebased. I'm just going to wait for the 0.17.0 release rather than try to debug why `v0.16.2` doesn't play nicely. Based on local testing that should work.,https://github.com/bitcoin/bitcoin/pull/12134#issuecomment-416060982,416060982,
Sjors,2018-08-28T15:39:30Z,"Rebased again. Moved to the `x86_64 Linux (no depends, only system libs)` host since that one has less to do.",https://github.com/bitcoin/bitcoin/pull/12134#issuecomment-416634887,416634887,
Sjors,2018-10-14T07:19:19Z,"Now that v0.17.0 binaries are available, this PR works again.\n\nRebased, added double quotes, refactored script to make `rm` a bit safer. The backwards compatibility test is skipped if `build/releases` is absent.\n\nIt runs on Travis machine 7:\n<img width=""489"" alt=""schermafbeelding 2018-10-14 om 16 21 05"" src=""https://user-images.githubusercontent.com/10217/46913702-30df8380-cfcd-11e8-8c64",https://github.com/bitcoin/bitcoin/pull/12134#issuecomment-429602700,429602700,
jnewbery,2018-10-15T13:57:13Z,"I'm not convinced that the extra machinery that this PR introduces is worth the additional test coverage that it provides. At the moment, the test only checks that a v0.17 node can sync with blocks generated on a master branch node. I'd expect an inconsistency that crass would be caught very quickly regardless of this test. On the other hand, extending the test to cover more complex scenarios will",https://github.com/bitcoin/bitcoin/pull/12134#issuecomment-429862475,429862475,
ryanofsky,2018-10-15T16:10:00Z,"This change seems like it'd be useful in order to write tests for wallet upgrade code, where we have some issues to fix like #14422. If we aren't going to merge this, how can we write tests for code that handles upgrades or downgrades?\n",https://github.com/bitcoin/bitcoin/pull/12134#issuecomment-429916070,429916070,
Sjors,2018-10-16T05:38:43Z,"The main use case, which I think is worth some overhead, is testing soft forks before they're deployed. We could have the test craft more interesting transactions and blocks on master.\n\nSome aspects of wallet upgrades can be tested without this, e.g. we can store older wallet payloads in the test folder. This PR lets you test opening wallets on a downgraded node. Node downgrades in general can",https://github.com/bitcoin/bitcoin/pull/12134#issuecomment-430107394,430107394,
jnewbery,2018-10-16T12:58:20Z,"> The main use case, which I think is worth some overhead, is testing soft forks before they're deployed. We could have the test craft more interesting transactions and blocks on master.\n\n> As long as I occasionally rebase this PR it should be useful even if it's not merged.\n\nYes, this sounds reasonable. I don't think the current test case adds much, but if there's a fork in future, a test",https://github.com/bitcoin/bitcoin/pull/12134#issuecomment-430227152,430227152,
DrahtBot,2018-10-20T11:13:02Z,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/12134#issuecomment-431571193,431571193,
jtimon,2018-10-22T16:45:45Z,"Concept ACK, perhaps the python test could optionally take a custom value even if it ""build/releases/v0.17.0/bin/"" as default?\n",https://github.com/bitcoin/bitcoin/pull/12134#issuecomment-431892931,431892931,
Sjors,2018-11-30T11:41:55Z,(I'll rebase and fix above nits  after 0.17.1 final binaries are up),https://github.com/bitcoin/bitcoin/pull/12134#issuecomment-443178984,443178984,
Sjors,2019-01-05T19:20:57Z,"Rebased for v0.17.1\n\nef7c54c1eceb0eb938dd4e8312283c7433fe0c8f added a `wait` argument to `stop` (cc @promag), which causes the v0.17.1 node to fail upon shutdown. I worked around this by adding an optional `version` to `TestNode()`.",https://github.com/bitcoin/bitcoin/pull/12134#issuecomment-451683297,451683297,
jnewbery,2019-01-07T21:38:34Z,"@Sjors - what's your intention for this branch? Do you want it to get merged into master, or are you maintaining it as a separate branch for your own testing? (if so perhaps you could add a [do not merge] tag to the PR title)\n\nThe `version` logic that you've added to `TestNode` is fairly limited now, but I expect that if you want to maintain this branch and have it remain compatible with diffe",https://github.com/bitcoin/bitcoin/pull/12134#issuecomment-452091092,452091092,
Sjors,2019-01-09T13:12:55Z,"@jnewbery I would like it to get merged, but I'm willing to maintain it for the time being even if it doesn't get merged. I think people were worried about maintainability if this is merged. So far it's not too bad in my experience.\n\nI don't think the goal is to support an infinite number of old bitcoind versions, so complexity can probably be kept low by dropping old versions and simplifying ",https://github.com/bitcoin/bitcoin/pull/12134#issuecomment-452691578,452691578,
Sjors,2019-02-02T11:21:02Z,"I'll rebase after 0.18 binaries are up, unless we want to merge this sooner.\n\nI might also add a test for #15226: create a blank wallet in 0.18 and master and check that they can't be opened by 0.17. ",https://github.com/bitcoin/bitcoin/pull/12134#issuecomment-459957235,459957235,
Sjors,2019-02-20T20:44:23Z,"Rebased and prepared for v0.18.0 release (just need to uncomment a few lines after the binaries are up, but it can be merged before that if we want).\n\nI added tests for opening regular, private key disabled and blank wallets in v0.17.1 (cc @achow101, @instagibbs). They work by creating wallets in v0.18.0 and on master, copying and then opening with v0.18.0 and v0.17.1.\n\nI also added a test",https://github.com/bitcoin/bitcoin/pull/12134#issuecomment-465746538,465746538,
Sjors,2019-05-03T13:19:28Z,It now uses v0.18.0 release.,https://github.com/bitcoin/bitcoin/pull/12134#issuecomment-489092329,489092329,
practicalswift,2019-05-03T13:26:47Z,"Concept ACK\n\nNice work!",https://github.com/bitcoin/bitcoin/pull/12134#issuecomment-489094577,489094577,
instagibbs,2019-06-12T15:51:20Z,"> and the test will be busted, and we won't have a good way to fix it\n\nI think this is an argument for keeping the scope reduced but not convincing to keep out entirely. I sincerely hope that the functional suite can support semi-modern versions with respect to block sync checks, for example.\n\nconcept ACK\n\nlack of wallet upgrade tests are some of the most painful points right now",https://github.com/bitcoin/bitcoin/pull/12134#issuecomment-501336358,501336358,
Sjors,2019-08-09T18:57:24Z,Rebased to to support the latest v0.18.1. Added a version conditional for `-logthreadnames` (#15849).,https://github.com/bitcoin/bitcoin/pull/12134#issuecomment-520028157,520028157,
Sjors,2019-08-15T19:47:47Z,"Rebased after #16582, moved Travis machine 8, because machine 7 has `--disable-wallet`. Travis is having a hard time at the moment though; I tried a few restarts of machine 5 and 8 in vain.",https://github.com/bitcoin/bitcoin/pull/12134#issuecomment-521772497,521772497,
Sjors,2019-08-16T10:44:33Z,Expanded wallet tests for #16624.,https://github.com/bitcoin/bitcoin/pull/12134#issuecomment-521968230,521968230,
Sjors,2019-08-16T21:00:27Z,Moving releases to host-specific directory on Travis. Added a check to prevent the test from being silently skipped when it can't find the release binaries.,https://github.com/bitcoin/bitcoin/pull/12134#issuecomment-522149795,522149795,
Sjors,2019-08-17T10:23:29Z,"I'm confused by Travis / Docker file system organization. See e.g. this [log](https://api.travis-ci.org/v3/job/572928725/log.txt).\n\nThe releases are downloaded to `/home/travis/build/bitcoin/bitcoin/build/bitcoin-x86_64-unknown-linux-gnu/releases`, which is cached. I don't know yet if the cache works, because so far my builds have failed so the cache didn't get stored. If it works, you should ",https://github.com/bitcoin/bitcoin/pull/12134#issuecomment-522225215,522225215,
Sjors,2019-08-17T12:19:09Z,Hopefully solved by mounting the releases folder as another Docker volume (moved it to `$TRAVIS_BUILD_DIR/releases/$HOST`).,https://github.com/bitcoin/bitcoin/pull/12134#issuecomment-522232036,522232036,
Sjors,2019-08-17T13:40:33Z,"Getting closer! This time the wallet test actually ran and failed: `Wallet file verification failed: wallet.dat corrupt, salvage failed (-4)` ([log](https://travis-ci.org/bitcoin/bitcoin/jobs/573102685#L7596)). This happens when 0.18 tries to load a (blank) wallet from master. Documented in #16640.",https://github.com/bitcoin/bitcoin/pull/12134#issuecomment-522237855,522237855,
Sjors,2019-10-09T19:11:39Z,Rebased and added tests for v0.19.0 (using release candidate).,https://github.com/bitcoin/bitcoin/pull/12134#issuecomment-540146715,540146715,
Sjors,2019-11-25T19:38:09Z,Rebased again. Now using v0.19.0.1,https://github.com/bitcoin/bitcoin/pull/12134#issuecomment-558308430,558308430,
Sjors,2020-02-11T19:05:54Z,Rebased. Reminder to self: cherry-pick https://github.com/Sjors/bitcoin/commit/bacf55990905c0257c7bc45bbbd2b028716efc7f after #18067 is merged. ,https://github.com/bitcoin/bitcoin/pull/12134#issuecomment-584799463,584799463,
MarcoFalke,2020-02-12T14:19:31Z,"ACK c456145b2c65f580683df03bf10cd39000cf24d5 🔨\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nACK c456145b2c65f580683df03bf10cd39000cf24d5 🔨\n-----BEGIN PGP SIGNATURE-----\n\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUiCZgwAwkfNVLMvxlvocPpi0dT2TM8hPUkhwYfpWFP2GFvo6BDwivVgIg",https://github.com/bitcoin/bitcoin/pull/12134#issuecomment-585226734,585226734,
MarcoFalke,2018-01-10T16:33:10Z,"That cache should be covered by `.ccache`, no?",https://github.com/bitcoin/bitcoin/pull/12134#discussion_r160730632,160730632,.travis.yml
MarcoFalke,2018-01-10T16:46:07Z,Would be nice to be able to pass those paths in. Could overwrite `add_options` in test_framework.,https://github.com/bitcoin/bitcoin/pull/12134#discussion_r160734383,160734383,test/functional/backwards_compatibility.py
MarcoFalke,2018-01-10T16:46:29Z,Comment seems misplaced,https://github.com/bitcoin/bitcoin/pull/12134#discussion_r160734486,160734486,test/functional/backwards_compatibility.py
MarcoFalke,2018-01-10T16:47:35Z,Use named args for those unnamed arguments to provide documentation and robustness against future interface changes.,https://github.com/bitcoin/bitcoin/pull/12134#discussion_r160734818,160734818,test/functional/backwards_compatibility.py
snuggs,2018-01-11T09:52:10Z,Nice nit @MarcoFalke!,https://github.com/bitcoin/bitcoin/pull/12134#discussion_r160906896,160906896,.travis.yml
Sjors,2018-01-11T10:09:59Z,"Do you mean making `--srcdir` accept multiple paths? That's probably a useful PR by itself, I made a note.",https://github.com/bitcoin/bitcoin/pull/12134#discussion_r160911220,160911220,test/functional/backwards_compatibility.py
Sjors,2018-01-11T10:16:19Z,Removed.,https://github.com/bitcoin/bitcoin/pull/12134#discussion_r160912739,160912739,test/functional/backwards_compatibility.py
Sjors,2018-01-11T10:16:26Z,Done.,https://github.com/bitcoin/bitcoin/pull/12134#discussion_r160912766,160912766,test/functional/backwards_compatibility.py
Sjors,2018-01-11T10:17:02Z,- [x] will look into `ccache` behavior.,https://github.com/bitcoin/bitcoin/pull/12134#discussion_r160912890,160912890,.travis.yml
MarcoFalke,2018-01-11T18:15:50Z,"Forget what I said. It is probably better to cache the resulting binary than the individual obj files, since we are building specific tags that don't change. For master or other branch build, the commits often only change parts of the code, so the other obj files can be cached and re-used. For tag builds everything is static, so caching the binaries works as well.",https://github.com/bitcoin/bitcoin/pull/12134#discussion_r161033992,161033992,.travis.yml
MarcoFalke,2018-04-29T15:00:24Z,"Just noting that in case we don't apply local patches to the previous release, we might as well just fetch the gitian result from one of the download sites. That would also save us from having to deal with caching the binaries et al.",https://github.com/bitcoin/bitcoin/pull/12134#discussion_r184885918,184885918,.travis.yml
Sjors,2018-04-30T11:49:06Z,Maybe fetching from a download site could be an optional argument for `previous_release.sh`?,https://github.com/bitcoin/bitcoin/pull/12134#discussion_r184965717,184965717,.travis.yml
Sjors,2018-05-15T12:48:59Z,"I'm worried that if we go for the binary download approach, the compile from source stuff would no longer be maintained. I could remove that entirely, but then some small future change to the test framework might force us to put it back in. I don't know how likely that is, but caching these files doesn't seem like a huge burden either.",https://github.com/bitcoin/bitcoin/pull/12134#discussion_r188273083,188273083,.travis.yml
practicalswift,2018-09-11T14:50:14Z,Looks a bit risky. Can this be done in a safer manner? :-),https://github.com/bitcoin/bitcoin/pull/12134#discussion_r216698816,216698816,contrib/devtools/previous_release.sh
practicalswift,2018-09-11T14:50:36Z,"Double quote to prevent globbing and word splitting. Please fix throughout in this PR :-)\n\nVerify with `shellcheck contrib/devtools/previous_release.sh | grep SC2086`",https://github.com/bitcoin/bitcoin/pull/12134#discussion_r216698961,216698961,contrib/devtools/previous_release.sh
Sjors,2018-09-11T14:59:07Z,I can leave out the `-f`.,https://github.com/bitcoin/bitcoin/pull/12134#discussion_r216702189,216702189,contrib/devtools/previous_release.sh
Sjors,2018-10-14T04:24:32Z,"Fixed, except for `./configure $CONFIG_FLAGS`, but `$CONFIG_FLAGS` itself is created with double quotes.",https://github.com/bitcoin/bitcoin/pull/12134#discussion_r224979072,224979072,contrib/devtools/previous_release.sh
practicalswift,2018-10-16T20:29:54Z,"Should be ""compatibility"" :-)",https://github.com/bitcoin/bitcoin/pull/12134#discussion_r225696746,225696746,test/functional/feature_backwards_compatibility.py
practicalswift,2018-10-16T20:30:10Z,"Should be ""sanity"" :-)",https://github.com/bitcoin/bitcoin/pull/12134#discussion_r225696829,225696829,test/functional/feature_backwards_compatibility.py
practicalswift,2018-11-23T06:11:34Z,"Should be ""BackwardsCompatibilityTest"" :-)",https://github.com/bitcoin/bitcoin/pull/12134#discussion_r235852241,235852241,test/functional/feature_backwards_compatibility.py
practicalswift,2018-11-23T06:11:45Z,Same typo here :-),https://github.com/bitcoin/bitcoin/pull/12134#discussion_r235852256,235852256,test/functional/feature_backwards_compatibility.py
Empact,2019-01-06T06:29:21Z,nit: maybe a comment to indicate the -p is because the dir may already exist (or so I presume)?,https://github.com/bitcoin/bitcoin/pull/12134#discussion_r245497116,245497116,.travis/test_06_script.sh
Empact,2019-01-06T06:31:13Z,nit: whitespace,https://github.com/bitcoin/bitcoin/pull/12134#discussion_r245497150,245497150,contrib/devtools/previous_release.sh
Sjors,2019-01-06T11:23:41Z,I'm indenting pushd so it's more clear what directory the script is in. Or is it another whitespace issue?,https://github.com/bitcoin/bitcoin/pull/12134#discussion_r245504794,245504794,contrib/devtools/previous_release.sh
practicalswift,2019-01-06T11:28:29Z,Please remove the indenting for the `pushd`. It is non-idiomatic :-),https://github.com/bitcoin/bitcoin/pull/12134#discussion_r245504915,245504915,contrib/devtools/previous_release.sh
Sjors,2019-01-06T12:35:01Z,"See also this discussion: https://github.com/mvdan/sh/issues/293\n\nWhat do you think of the indenting with brackets suggestion?\n\n```sh\npushd somewhere || exit 1\n{\n   do something\n}\npopd || exit 1\n```",https://github.com/bitcoin/bitcoin/pull/12134#discussion_r245507001,245507001,contrib/devtools/previous_release.sh
practicalswift,2019-01-06T12:49:47Z,@Sjors Brackets make it clear that the indentation is intentional :-),https://github.com/bitcoin/bitcoin/pull/12134#discussion_r245507488,245507488,contrib/devtools/previous_release.sh
MarcoFalke,2020-02-11T19:34:04Z,I don't think we have anyone interested in tests who can also review bash scripts. Maybe rewrite this in python?,https://github.com/bitcoin/bitcoin/pull/12134#discussion_r377853067,377853067,contrib/devtools/previous_release.sh
MarcoFalke,2020-02-11T19:42:52Z,I think `-b` implies that `-f` is unused. So why pass it?,https://github.com/bitcoin/bitcoin/pull/12134#discussion_r377857657,377857657,ci/test/05_before_script.sh
MarcoFalke,2020-02-11T19:43:54Z,"Not sure if it is worth it to cache this folder. No strong opinion though. If you keep this, please fixup the ci/README.md where it says ""cache directories, such as ...""",https://github.com/bitcoin/bitcoin/pull/12134#discussion_r377858162,377858162,ci/test/04_install.sh
MarcoFalke,2020-02-11T19:46:28Z,I'd rather have both of these an Assertion instead of a silent pass,https://github.com/bitcoin/bitcoin/pull/12134#discussion_r377859554,377859554,test/functional/feature_backwards_compatibility.py
MarcoFalke,2020-02-11T19:47:46Z,"style-nit: \n```suggestion\n        assert info['private_keys_enabled']\n```\n\n(Applies throughout this file)",https://github.com/bitcoin/bitcoin/pull/12134#discussion_r377860242,377860242,test/functional/feature_backwards_compatibility.py
MarcoFalke,2020-02-11T19:48:37Z,"style-nit:\n\n```suggestion\n    def add_nodes(self, num_nodes, extra_args=None, *, rpchost=None, binary=None, binary_cli=None, versions=None):\n```",https://github.com/bitcoin/bitcoin/pull/12134#discussion_r377860692,377860692,test/functional/test_framework/test_framework.py
Sjors,2020-02-11T20:49:00Z,"That seems inconsistent with the way we skip wallet tests, i.e. the test runner calls each test file and each test file decides if needs to be skipped.",https://github.com/bitcoin/bitcoin/pull/12134#discussion_r377889605,377889605,test/functional/feature_backwards_compatibility.py
Sjors,2020-02-11T20:49:07Z,Done,https://github.com/bitcoin/bitcoin/pull/12134#discussion_r377889676,377889676,test/functional/feature_backwards_compatibility.py
Sjors,2020-02-11T20:49:12Z,Done,https://github.com/bitcoin/bitcoin/pull/12134#discussion_r377889723,377889723,test/functional/test_framework/test_framework.py
Sjors,2020-02-11T20:49:38Z,In my experience the release download is pretty slow. I updated the ci/README,https://github.com/bitcoin/bitcoin/pull/12134#discussion_r377889933,377889933,ci/test/04_install.sh
Sjors,2020-02-11T20:50:07Z,It was a left-over from when this PR still compiled from source. Removed. ,https://github.com/bitcoin/bitcoin/pull/12134#discussion_r377890175,377890175,ci/test/05_before_script.sh
Sjors,2020-02-11T20:50:38Z,"Added to my todo list, but equally happy to (see someone else) do this in a followup.",https://github.com/bitcoin/bitcoin/pull/12134#discussion_r377890401,377890401,contrib/devtools/previous_release.sh
