[
  {
    "sha": "d89fbfe89931cf1beaad2e239245c886e3ab17e9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkODlmYmZlODk5MzFjZjFiZWFhZDJlMjM5MjQ1Yzg4NmUzYWIxN2U5",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-11-15T19:41:48Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-04-05T09:53:50Z"
      },
      "message": "[qa] rpc-test: Normalize assert()\n\nGithub-Pull: #7720\nRebased-From: fab3890156c849e6b04309152d7a9bfcfcb98396",
      "tree": {
        "sha": "1edafa6f22befc621aeb352c3d3dbff505e2f330",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1edafa6f22befc621aeb352c3d3dbff505e2f330"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d89fbfe89931cf1beaad2e239245c886e3ab17e9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d89fbfe89931cf1beaad2e239245c886e3ab17e9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d89fbfe89931cf1beaad2e239245c886e3ab17e9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d89fbfe89931cf1beaad2e239245c886e3ab17e9/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e3341aa94e1fec9fb7213b074ba9b23830d0c95e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e3341aa94e1fec9fb7213b074ba9b23830d0c95e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e3341aa94e1fec9fb7213b074ba9b23830d0c95e"
      }
    ],
    "stats": {
      "total": 84,
      "additions": 34,
      "deletions": 50
    },
    "files": [
      {
        "sha": "4458712815c5775c563174afe030f27b096af261",
        "filename": "qa/rpc-tests/fundrawtransaction.py",
        "status": "modified",
        "additions": 15,
        "deletions": 19,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d89fbfe89931cf1beaad2e239245c886e3ab17e9/qa/rpc-tests/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d89fbfe89931cf1beaad2e239245c886e3ab17e9/qa/rpc-tests/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/fundrawtransaction.py?ref=d89fbfe89931cf1beaad2e239245c886e3ab17e9",
        "patch": "@@ -71,7 +71,7 @@ def run_test(self):\n         rawtxfund = self.nodes[2].fundrawtransaction(rawtx)\n         fee = rawtxfund['fee']\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtxfund['hex'])\n-        assert_equal(len(dec_tx['vin']) > 0, True) #test if we have enought inputs\n+        assert(len(dec_tx['vin']) > 0) #test if we have enought inputs\n \n         ##############################\n         # simple test with two coins #\n@@ -84,7 +84,7 @@ def run_test(self):\n         rawtxfund = self.nodes[2].fundrawtransaction(rawtx)\n         fee = rawtxfund['fee']\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtxfund['hex'])\n-        assert_equal(len(dec_tx['vin']) > 0, True) #test if we have enough inputs\n+        assert(len(dec_tx['vin']) > 0) #test if we have enough inputs\n \n         ##############################\n         # simple test with two coins #\n@@ -97,7 +97,7 @@ def run_test(self):\n         rawtxfund = self.nodes[2].fundrawtransaction(rawtx)\n         fee = rawtxfund['fee']\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtxfund['hex'])\n-        assert_equal(len(dec_tx['vin']) > 0, True)\n+        assert(len(dec_tx['vin']) > 0)\n         assert_equal(dec_tx['vin'][0]['scriptSig']['hex'], '')\n \n \n@@ -116,7 +116,7 @@ def run_test(self):\n         for out in dec_tx['vout']:\n             totalOut += out['value']\n \n-        assert_equal(len(dec_tx['vin']) > 0, True)\n+        assert(len(dec_tx['vin']) > 0)\n         assert_equal(dec_tx['vin'][0]['scriptSig']['hex'], '')\n \n \n@@ -130,7 +130,7 @@ def run_test(self):\n                 utx = aUtx\n                 break\n \n-        assert_equal(utx!=False, True)\n+        assert(utx!=False)\n \n         inputs  = [ {'txid' : utx['txid'], 'vout' : utx['vout']}]\n         outputs = { self.nodes[0].getnewaddress() : 1.0 }\n@@ -159,7 +159,7 @@ def run_test(self):\n                 utx = aUtx\n                 break\n \n-        assert_equal(utx!=False, True)\n+        assert(utx!=False)\n \n         inputs  = [ {'txid' : utx['txid'], 'vout' : utx['vout']}]\n         outputs = { self.nodes[0].getnewaddress() : Decimal(5.0) - fee - feeTolerance }\n@@ -189,7 +189,7 @@ def run_test(self):\n                 utx = aUtx\n                 break\n \n-        assert_equal(utx!=False, True)\n+        assert(utx!=False)\n \n         inputs  = [ {'txid' : utx['txid'], 'vout' : utx['vout']}]\n         outputs = { self.nodes[0].getnewaddress() : 1.0 }\n@@ -234,7 +234,7 @@ def run_test(self):\n                 utx2 = aUtx\n \n \n-        assert_equal(utx!=False, True)\n+        assert(utx!=False)\n \n         inputs  = [ {'txid' : utx['txid'], 'vout' : utx['vout']},{'txid' : utx2['txid'], 'vout' : utx2['vout']} ]\n         outputs = { self.nodes[0].getnewaddress() : 6.0 }\n@@ -276,7 +276,7 @@ def run_test(self):\n                 utx2 = aUtx\n \n \n-        assert_equal(utx!=False, True)\n+        assert(utx!=False)\n \n         inputs  = [ {'txid' : utx['txid'], 'vout' : utx['vout']},{'txid' : utx2['txid'], 'vout' : utx2['vout']} ]\n         outputs = { self.nodes[0].getnewaddress() : 6.0, self.nodes[0].getnewaddress() : 1.0 }\n@@ -306,14 +306,11 @@ def run_test(self):\n         rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n \n-        errorString = \"\"\n         try:\n             rawtxfund = self.nodes[2].fundrawtransaction(rawtx)\n+            raise AssertionError(\"Spent more than available\")\n         except JSONRPCException,e:\n-            errorString = e.error['message']\n-\n-        assert(\"Insufficient\" in errorString)\n-\n+            assert(\"Insufficient\" in e.error['message'])\n \n \n         ############################################################\n@@ -462,12 +459,11 @@ def run_test(self):\n         self.is_network_split=False\n         self.sync_all()\n \n-        error = False\n         try:\n             self.nodes[1].sendtoaddress(self.nodes[0].getnewaddress(), 1.2)\n-        except:\n-            error = True\n-        assert(error)\n+            raise AssertionError(\"Wallet unlocked without passphrase\")\n+        except JSONRPCException as e:\n+            assert('walletpassphrase' in e.error['message'])\n \n         oldBalance = self.nodes[0].getbalance()\n \n@@ -580,7 +576,7 @@ def run_test(self):\n         assert_equal(len(res_dec[\"vin\"]), 1)\n         assert_equal(res_dec[\"vin\"][0][\"txid\"], watchonly_txid)\n \n-        assert_equal(\"fee\" in result.keys(), True)\n+        assert(\"fee\" in result.keys())\n         assert_greater_than(result[\"changepos\"], -1)\n \n         ###############################################################"
      },
      {
        "sha": "d2cb4ab8d69b9e4e0331653cc8331f1c2aeceb4f",
        "filename": "qa/rpc-tests/getblocktemplate_proposals.py",
        "status": "modified",
        "additions": 2,
        "deletions": 8,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d89fbfe89931cf1beaad2e239245c886e3ab17e9/qa/rpc-tests/getblocktemplate_proposals.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d89fbfe89931cf1beaad2e239245c886e3ab17e9/qa/rpc-tests/getblocktemplate_proposals.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/getblocktemplate_proposals.py?ref=d89fbfe89931cf1beaad2e239245c886e3ab17e9",
        "patch": "@@ -120,10 +120,7 @@ def run_test(self):\n \n         # Test 3: Truncated final tx\n         lastbyte = txlist[-1].pop()\n-        try:\n-            assert_template(node, tmpl, txlist, 'n/a')\n-        except JSONRPCException:\n-            pass  # Expected\n+        assert_raises(JSONRPCException, assert_template, node, tmpl, txlist, 'n/a')\n         txlist[-1].append(lastbyte)\n \n         # Test 4: Add an invalid tx to the end (duplicate of gen tx)\n@@ -144,10 +141,7 @@ def run_test(self):\n \n         # Test 7: Bad tx count\n         txlist.append(b'')\n-        try:\n-            assert_template(node, tmpl, txlist, 'n/a')\n-        except JSONRPCException:\n-            pass  # Expected\n+        assert_raises(JSONRPCException, assert_template, node, tmpl, txlist, 'n/a')\n         txlist.pop()\n \n         # Test 8: Bad bits"
      },
      {
        "sha": "c231676ec87d70a9d12f5c8b7bd7eadfd322e052",
        "filename": "qa/rpc-tests/httpbasics.py",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d89fbfe89931cf1beaad2e239245c886e3ab17e9/qa/rpc-tests/httpbasics.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d89fbfe89931cf1beaad2e239245c886e3ab17e9/qa/rpc-tests/httpbasics.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/httpbasics.py?ref=d89fbfe89931cf1beaad2e239245c886e3ab17e9",
        "patch": "@@ -37,14 +37,14 @@ def run_test(self):\n         conn.connect()\n         conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         out1 = conn.getresponse().read()\n-        assert_equal('\"error\":null' in out1, True)\n-        assert_equal(conn.sock!=None, True) #according to http/1.1 connection must still be open!\n+        assert('\"error\":null' in out1)\n+        assert(conn.sock!=None) #according to http/1.1 connection must still be open!\n \n         #send 2nd request without closing connection\n         conn.request('POST', '/', '{\"method\": \"getchaintips\"}', headers)\n         out2 = conn.getresponse().read()\n-        assert_equal('\"error\":null' in out1, True) #must also response with a correct json-rpc message\n-        assert_equal(conn.sock!=None, True) #according to http/1.1 connection must still be open!\n+        assert('\"error\":null' in out1) #must also response with a correct json-rpc message\n+        assert(conn.sock!=None) #according to http/1.1 connection must still be open!\n         conn.close()\n \n         #same should be if we add keep-alive because this should be the std. behaviour\n@@ -54,14 +54,14 @@ def run_test(self):\n         conn.connect()\n         conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         out1 = conn.getresponse().read()\n-        assert_equal('\"error\":null' in out1, True)\n-        assert_equal(conn.sock!=None, True) #according to http/1.1 connection must still be open!\n+        assert('\"error\":null' in out1)\n+        assert(conn.sock!=None) #according to http/1.1 connection must still be open!\n \n         #send 2nd request without closing connection\n         conn.request('POST', '/', '{\"method\": \"getchaintips\"}', headers)\n         out2 = conn.getresponse().read()\n-        assert_equal('\"error\":null' in out1, True) #must also response with a correct json-rpc message\n-        assert_equal(conn.sock!=None, True) #according to http/1.1 connection must still be open!\n+        assert('\"error\":null' in out1) #must also response with a correct json-rpc message\n+        assert(conn.sock!=None) #according to http/1.1 connection must still be open!\n         conn.close()\n \n         #now do the same with \"Connection: close\"\n@@ -71,8 +71,8 @@ def run_test(self):\n         conn.connect()\n         conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         out1 = conn.getresponse().read()\n-        assert_equal('\"error\":null' in out1, True)\n-        assert_equal(conn.sock!=None, False) #now the connection must be closed after the response\n+        assert('\"error\":null' in out1)\n+        assert(conn.sock==None) #now the connection must be closed after the response\n \n         #node1 (2nd node) is running with disabled keep-alive option\n         urlNode1 = urlparse.urlparse(self.nodes[1].url)\n@@ -83,7 +83,7 @@ def run_test(self):\n         conn.connect()\n         conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         out1 = conn.getresponse().read()\n-        assert_equal('\"error\":null' in out1, True)\n+        assert('\"error\":null' in out1)\n \n         #node2 (third node) is running with standard keep-alive parameters which means keep-alive is on\n         urlNode2 = urlparse.urlparse(self.nodes[2].url)\n@@ -94,8 +94,8 @@ def run_test(self):\n         conn.connect()\n         conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         out1 = conn.getresponse().read()\n-        assert_equal('\"error\":null' in out1, True)\n-        assert_equal(conn.sock!=None, True) #connection must be closed because bitcoind should use keep-alive by default\n+        assert('\"error\":null' in out1)\n+        assert(conn.sock!=None) #connection must be closed because bitcoind should use keep-alive by default\n \n         # Check excessive request size\n         conn = httplib.HTTPConnection(urlNode2.hostname, urlNode2.port)"
      },
      {
        "sha": "0f125000512151f23fd460130b5647290120763b",
        "filename": "qa/rpc-tests/wallet.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d89fbfe89931cf1beaad2e239245c886e3ab17e9/qa/rpc-tests/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d89fbfe89931cf1beaad2e239245c886e3ab17e9/qa/rpc-tests/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet.py?ref=d89fbfe89931cf1beaad2e239245c886e3ab17e9",
        "patch": "@@ -241,15 +241,15 @@ def run_test (self):\n         except JSONRPCException,e:\n             errorString = e.error['message']\n \n-        assert_equal(\"Invalid amount\" in errorString, True)\n+        assert(\"Invalid amount\" in errorString)\n \n         errorString = \"\"\n         try:\n             self.nodes[0].generate(\"2\") #use a string to as block amount parameter must fail because it's not interpreted as amount\n         except JSONRPCException,e:\n             errorString = e.error['message']\n \n-        assert_equal(\"not an integer\" in errorString, True)\n+        assert(\"not an integer\" in errorString)\n \n         #check if wallet or blochchain maintenance changes the balance\n         self.sync_all()"
      },
      {
        "sha": "1ba4ded249aadf854bd1e3157ec91f50ab2c592d",
        "filename": "qa/rpc-tests/zapwallettxes.py",
        "status": "modified",
        "additions": 2,
        "deletions": 8,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d89fbfe89931cf1beaad2e239245c886e3ab17e9/qa/rpc-tests/zapwallettxes.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d89fbfe89931cf1beaad2e239245c886e3ab17e9/qa/rpc-tests/zapwallettxes.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/zapwallettxes.py?ref=d89fbfe89931cf1beaad2e239245c886e3ab17e9",
        "patch": "@@ -65,14 +65,8 @@ def run_test (self):\n         #restart bitcoind with zapwallettxes\n         self.nodes[0] = start_node(0,self.options.tmpdir, [\"-zapwallettxes=1\"])\n         \n-        aException = False\n-        try:\n-            tx3 = self.nodes[0].gettransaction(txid3)\n-        except JSONRPCException,e:\n-            print e\n-            aException = True\n-        \n-        assert_equal(aException, True) #there must be a expection because the unconfirmed wallettx0 must be gone by now\n+        assert_raises(JSONRPCException, self.nodes[0].gettransaction, [txid3])\n+        #there must be a expection because the unconfirmed wallettx0 must be gone by now\n \n         tx0 = self.nodes[0].gettransaction(txid0)\n         assert_equal(tx0['txid'], txid0) #tx0 (confirmed) must still be available because it was confirmed"
      }
    ]
  },
  {
    "sha": "ad8c743421a9e64fea4ede8072fe07b4d266c1a8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZDhjNzQzNDIxYTllNjRmZWE0ZWRlODA3MmZlMDdiNGQyNjZjMWE4",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-01-19T16:47:55Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-04-05T09:53:50Z"
      },
      "message": "[qa] Extend tests\n\nGithub-Pull: #7684\nRebased-From: fa3a81af18347a1d3fed41aa89ee643cbf0e7abc fad7dc8a6c0ca9c067a249cf8896dd2e64703e48 fad8cfb893ac0ba83c6fc2367ade55bfe4fa75f6",
      "tree": {
        "sha": "204a022a1ed2deaf225d100a7d045a2167f46ade",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/204a022a1ed2deaf225d100a7d045a2167f46ade"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ad8c743421a9e64fea4ede8072fe07b4d266c1a8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad8c743421a9e64fea4ede8072fe07b4d266c1a8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ad8c743421a9e64fea4ede8072fe07b4d266c1a8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad8c743421a9e64fea4ede8072fe07b4d266c1a8/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d89fbfe89931cf1beaad2e239245c886e3ab17e9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d89fbfe89931cf1beaad2e239245c886e3ab17e9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d89fbfe89931cf1beaad2e239245c886e3ab17e9"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 21,
      "deletions": 21
    },
    "files": [
      {
        "sha": "377a35b6872c70d2102d13f51c895b25ceec3c11",
        "filename": "qa/rpc-tests/bip68-sequence.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad8c743421a9e64fea4ede8072fe07b4d266c1a8/qa/rpc-tests/bip68-sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad8c743421a9e64fea4ede8072fe07b4d266c1a8/qa/rpc-tests/bip68-sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip68-sequence.py?ref=ad8c743421a9e64fea4ede8072fe07b4d266c1a8",
        "patch": "@@ -13,7 +13,6 @@\n from test_framework.mininode import *\n from test_framework.blocktools import *\n \n-COIN = 100000000\n SEQUENCE_LOCKTIME_DISABLE_FLAG = (1<<31)\n SEQUENCE_LOCKTIME_TYPE_FLAG = (1<<22) # this means use time (0 means height)\n SEQUENCE_LOCKTIME_GRANULARITY = 9 # this is a bit-shift"
      },
      {
        "sha": "4b8edd380d70892f3ea8d36afd321c24d5c4d832",
        "filename": "qa/rpc-tests/invalidblockrequest.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad8c743421a9e64fea4ede8072fe07b4d266c1a8/qa/rpc-tests/invalidblockrequest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad8c743421a9e64fea4ede8072fe07b4d266c1a8/qa/rpc-tests/invalidblockrequest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/invalidblockrequest.py?ref=ad8c743421a9e64fea4ede8072fe07b4d266c1a8",
        "patch": "@@ -78,8 +78,8 @@ def get_tests(self):\n         self.block_time += 1\n \n         # chr(81) is OP_TRUE\n-        tx1 = create_transaction(self.block1.vtx[0], 0, chr(81), 50*100000000)\n-        tx2 = create_transaction(tx1, 0, chr(81), 50*100000000)\n+        tx1 = create_transaction(self.block1.vtx[0], 0, chr(81), 50 * COIN)\n+        tx2 = create_transaction(tx1, 0, chr(81), 50 * COIN)\n \n         block2.vtx.extend([tx1, tx2])\n         block2.hashMerkleRoot = block2.calc_merkle_root()\n@@ -103,7 +103,7 @@ def get_tests(self):\n         '''\n         block3 = create_block(self.tip, create_coinbase(height), self.block_time)\n         self.block_time += 1\n-        block3.vtx[0].vout[0].nValue = 100*100000000 # Too high!\n+        block3.vtx[0].vout[0].nValue = 100 * COIN # Too high!\n         block3.vtx[0].sha256=None\n         block3.vtx[0].calc_sha256()\n         block3.hashMerkleRoot = block3.calc_merkle_root()"
      },
      {
        "sha": "9834c857611899e58eae092a2cc352df5c927f85",
        "filename": "qa/rpc-tests/invalidtxrequest.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad8c743421a9e64fea4ede8072fe07b4d266c1a8/qa/rpc-tests/invalidtxrequest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad8c743421a9e64fea4ede8072fe07b4d266c1a8/qa/rpc-tests/invalidtxrequest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/invalidtxrequest.py?ref=ad8c743421a9e64fea4ede8072fe07b4d266c1a8",
        "patch": "@@ -63,7 +63,7 @@ def get_tests(self):\n \n         # chr(100) is OP_NOTIF\n         # Transaction will be rejected with code 16 (REJECT_INVALID)\n-        tx1 = create_transaction(self.block1.vtx[0], 0, chr(100), 50*100000000)\n+        tx1 = create_transaction(self.block1.vtx[0], 0, chr(100), 50*COIN)\n         yield TestInstance([[tx1, RejectResult(16, 'mandatory-script-verify-flag-failed')]])\n \n         # TODO: test further transactions..."
      },
      {
        "sha": "059b00ccda52c65de5d5406fc194059e2927f5ee",
        "filename": "qa/rpc-tests/listtransactions.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad8c743421a9e64fea4ede8072fe07b4d266c1a8/qa/rpc-tests/listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad8c743421a9e64fea4ede8072fe07b4d266c1a8/qa/rpc-tests/listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/listtransactions.py?ref=ad8c743421a9e64fea4ede8072fe07b4d266c1a8",
        "patch": "@@ -7,7 +7,7 @@\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n-from test_framework.mininode import CTransaction\n+from test_framework.mininode import CTransaction, COIN\n import cStringIO\n import binascii\n \n@@ -187,7 +187,7 @@ def get_unconfirmed_utxo_entry(node, txid_to_match):\n \n         # Replace tx3, and check that tx4 becomes unknown\n         tx3_b = tx3_modified\n-        tx3_b.vout[0].nValue -= 0.004*100000000 # bump the fee\n+        tx3_b.vout[0].nValue -= 0.004 * COIN # bump the fee\n         tx3_b = binascii.hexlify(tx3_b.serialize()).decode('utf-8')\n         tx3_b_signed = self.nodes[0].signrawtransaction(tx3_b)['hex']\n         txid_3b = self.nodes[0].sendrawtransaction(tx3_b_signed, True)"
      },
      {
        "sha": "2517bed4706ed76609df7945acd9d7659de6f89d",
        "filename": "qa/rpc-tests/maxuploadtarget.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad8c743421a9e64fea4ede8072fe07b4d266c1a8/qa/rpc-tests/maxuploadtarget.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad8c743421a9e64fea4ede8072fe07b4d266c1a8/qa/rpc-tests/maxuploadtarget.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/maxuploadtarget.py?ref=ad8c743421a9e64fea4ede8072fe07b4d266c1a8",
        "patch": "@@ -176,7 +176,7 @@ def run_test(self):\n         getdata_request.inv.append(CInv(2, big_old_block))\n \n         max_bytes_per_day = 200*1024*1024\n-        daily_buffer = 144 * 1000000\n+        daily_buffer = 144 * MAX_BLOCK_SIZE\n         max_bytes_available = max_bytes_per_day - daily_buffer\n         success_count = max_bytes_available / old_block_size\n "
      },
      {
        "sha": "6109cb026ceae33a94a1f92578ad9594bbac80ce",
        "filename": "qa/rpc-tests/mempool_packages.py",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad8c743421a9e64fea4ede8072fe07b4d266c1a8/qa/rpc-tests/mempool_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad8c743421a9e64fea4ede8072fe07b4d266c1a8/qa/rpc-tests/mempool_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/mempool_packages.py?ref=ad8c743421a9e64fea4ede8072fe07b4d266c1a8",
        "patch": "@@ -59,13 +59,12 @@ def run_test(self):\n         descendant_count = 1\n         descendant_fees = 0\n         descendant_size = 0\n-        SATOSHIS = 100000000\n \n         for x in reversed(chain):\n             assert_equal(mempool[x]['descendantcount'], descendant_count)\n             descendant_fees += mempool[x]['fee']\n             assert_equal(mempool[x]['modifiedfee'], mempool[x]['fee'])\n-            assert_equal(mempool[x]['descendantfees'], SATOSHIS*descendant_fees)\n+            assert_equal(mempool[x]['descendantfees'], descendant_fees * COIN)\n             descendant_size += mempool[x]['size']\n             assert_equal(mempool[x]['descendantsize'], descendant_size)\n             descendant_count += 1\n@@ -78,7 +77,7 @@ def run_test(self):\n         descendant_fees = 0\n         for x in reversed(chain):\n             descendant_fees += mempool[x]['fee']\n-            assert_equal(mempool[x]['descendantfees'], SATOSHIS*descendant_fees+1000)\n+            assert_equal(mempool[x]['descendantfees'], descendant_fees * COIN + 1000)\n \n         # Adding one more transaction on to the chain should fail.\n         try:\n@@ -106,7 +105,7 @@ def run_test(self):\n             descendant_fees += mempool[x]['fee']\n             if (x == chain[-1]):\n                 assert_equal(mempool[x]['modifiedfee'], mempool[x]['fee']+satoshi_round(0.00002))\n-            assert_equal(mempool[x]['descendantfees'], SATOSHIS*descendant_fees+2000)\n+            assert_equal(mempool[x]['descendantfees'], descendant_fees * COIN + 2000)\n \n         # TODO: check that node1's mempool is as expected\n "
      },
      {
        "sha": "5064667053857099d0849a4b527134b34d4400bf",
        "filename": "qa/rpc-tests/prioritise_transaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad8c743421a9e64fea4ede8072fe07b4d266c1a8/qa/rpc-tests/prioritise_transaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad8c743421a9e64fea4ede8072fe07b4d266c1a8/qa/rpc-tests/prioritise_transaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/prioritise_transaction.py?ref=ad8c743421a9e64fea4ede8072fe07b4d266c1a8",
        "patch": "@@ -9,8 +9,8 @@\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n+from test_framework.mininode import COIN\n \n-COIN = 100000000\n \n class PrioritiseTransactionTest(BitcoinTestFramework):\n "
      },
      {
        "sha": "eded24f4053953339581258406a1bf8c5d4dc2d8",
        "filename": "qa/rpc-tests/replace-by-fee.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad8c743421a9e64fea4ede8072fe07b4d266c1a8/qa/rpc-tests/replace-by-fee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad8c743421a9e64fea4ede8072fe07b4d266c1a8/qa/rpc-tests/replace-by-fee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/replace-by-fee.py?ref=ad8c743421a9e64fea4ede8072fe07b4d266c1a8",
        "patch": "@@ -13,7 +13,6 @@\n from test_framework.mininode import *\n import binascii\n \n-COIN = 100000000\n MAX_REPLACEMENT_LIMIT = 100\n \n def satoshi_round(amount):"
      },
      {
        "sha": "fff23746692293d792261699379f53e76b094239",
        "filename": "qa/rpc-tests/test_framework/blocktools.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad8c743421a9e64fea4ede8072fe07b4d266c1a8/qa/rpc-tests/test_framework/blocktools.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad8c743421a9e64fea4ede8072fe07b4d266c1a8/qa/rpc-tests/test_framework/blocktools.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/blocktools.py?ref=ad8c743421a9e64fea4ede8072fe07b4d266c1a8",
        "patch": "@@ -45,7 +45,7 @@ def create_coinbase(height, pubkey = None):\n     coinbase.vin.append(CTxIn(COutPoint(0, 0xffffffff), \n                 ser_string(serialize_script_num(height)), 0xffffffff))\n     coinbaseoutput = CTxOut()\n-    coinbaseoutput.nValue = 50*100000000\n+    coinbaseoutput.nValue = 50 * COIN\n     halvings = int(height/150) # regtest\n     coinbaseoutput.nValue >>= halvings\n     if (pubkey != None):"
      },
      {
        "sha": "934d0c7a7557a228db0f5ab92f3b850238a8c10d",
        "filename": "qa/rpc-tests/test_framework/mininode.py",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad8c743421a9e64fea4ede8072fe07b4d266c1a8/qa/rpc-tests/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad8c743421a9e64fea4ede8072fe07b4d266c1a8/qa/rpc-tests/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/mininode.py?ref=ad8c743421a9e64fea4ede8072fe07b4d266c1a8",
        "patch": "@@ -38,6 +38,8 @@\n MAX_INV_SZ = 50000\n MAX_BLOCK_SIZE = 1000000\n \n+COIN = 100000000L # 1 btc in satoshis\n+\n # Keep our own socket map for asyncore, so that we can track disconnects\n # ourselves (to workaround an issue with closing an asyncore socket when \n # using select)\n@@ -377,7 +379,7 @@ def serialize(self):\n \n     def __repr__(self):\n         return \"CTxOut(nValue=%i.%08i scriptPubKey=%s)\" \\\n-            % (self.nValue // 100000000, self.nValue % 100000000,\n+            % (self.nValue // COIN, self.nValue % COIN,\n                binascii.hexlify(self.scriptPubKey))\n \n \n@@ -426,7 +428,7 @@ def calc_sha256(self):\n     def is_valid(self):\n         self.calc_sha256()\n         for tout in self.vout:\n-            if tout.nValue < 0 or tout.nValue > 21000000L * 100000000L:\n+            if tout.nValue < 0 or tout.nValue > 21000000 * COIN:\n                 return False\n         return True\n "
      },
      {
        "sha": "3d4b922ae961fab48953700e2aaa51de1f5323ba",
        "filename": "qa/rpc-tests/wallet.py",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad8c743421a9e64fea4ede8072fe07b4d266c1a8/qa/rpc-tests/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad8c743421a9e64fea4ede8072fe07b4d266c1a8/qa/rpc-tests/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet.py?ref=ad8c743421a9e64fea4ede8072fe07b4d266c1a8",
        "patch": "@@ -268,10 +268,6 @@ def run_test (self):\n             stop_nodes(self.nodes)\n             wait_bitcoinds()\n             self.nodes = start_nodes(3, self.options.tmpdir, [[m]] * 3)\n-            connect_nodes_bi(self.nodes,0,1)\n-            connect_nodes_bi(self.nodes,1,2)\n-            connect_nodes_bi(self.nodes,0,2)\n-            self.sync_all()\n             assert_equal(balance_nodes, [self.nodes[i].getbalance() for i in range(3)])\n \n "
      },
      {
        "sha": "517e6945cf9bc02a38287a791eb826f7908e86da",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad8c743421a9e64fea4ede8072fe07b4d266c1a8/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad8c743421a9e64fea4ede8072fe07b4d266c1a8/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=ad8c743421a9e64fea4ede8072fe07b4d266c1a8",
        "patch": "@@ -196,6 +196,8 @@ BOOST_AUTO_TEST_CASE(util_ParseMoney)\n     BOOST_CHECK_EQUAL(ret, COIN*10);\n     BOOST_CHECK(ParseMoney(\"1.00\", ret));\n     BOOST_CHECK_EQUAL(ret, COIN);\n+    BOOST_CHECK(ParseMoney(\"1\", ret));\n+    BOOST_CHECK_EQUAL(ret, COIN);\n     BOOST_CHECK(ParseMoney(\"0.1\", ret));\n     BOOST_CHECK_EQUAL(ret, COIN/10);\n     BOOST_CHECK(ParseMoney(\"0.01\", ret));\n@@ -215,6 +217,9 @@ BOOST_AUTO_TEST_CASE(util_ParseMoney)\n \n     // Attempted 63 bit overflow should fail\n     BOOST_CHECK(!ParseMoney(\"92233720368.54775808\", ret));\n+\n+    // Parsing negative amounts must fail\n+    BOOST_CHECK(!ParseMoney(\"-1\", ret));\n }\n \n BOOST_AUTO_TEST_CASE(util_IsHex)"
      }
    ]
  },
  {
    "sha": "6aae129a60d1646018c855c067d830d3086693f6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YWFlMTI5YTYwZDE2NDYwMThjODU1YzA2N2Q4MzBkMzA4NjY5M2Y2",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-01-16T22:07:18Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-04-05T09:53:50Z"
      },
      "message": "[qa] wallet: Print maintenance\n\nGithub-Pull: #7372\nRebased-From: facd288c31c387bb3582c32f767a730ece6e408a",
      "tree": {
        "sha": "c54b6d1be12456117232df95a83c3dbfe92e9d72",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c54b6d1be12456117232df95a83c3dbfe92e9d72"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6aae129a60d1646018c855c067d830d3086693f6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6aae129a60d1646018c855c067d830d3086693f6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6aae129a60d1646018c855c067d830d3086693f6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6aae129a60d1646018c855c067d830d3086693f6/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ad8c743421a9e64fea4ede8072fe07b4d266c1a8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad8c743421a9e64fea4ede8072fe07b4d266c1a8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ad8c743421a9e64fea4ede8072fe07b4d266c1a8"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "667c676ec62ed87ee67d1a941f453a37eb966f70",
        "filename": "qa/rpc-tests/wallet.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6aae129a60d1646018c855c067d830d3086693f6/qa/rpc-tests/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6aae129a60d1646018c855c067d830d3086693f6/qa/rpc-tests/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet.py?ref=6aae129a60d1646018c855c067d830d3086693f6",
        "patch": "@@ -3,7 +3,6 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n \n@@ -265,6 +264,7 @@ def run_test (self):\n             '-salvagewallet',\n         ]\n         for m in maintenance:\n+            print \"check \" + m\n             stop_nodes(self.nodes)\n             wait_bitcoinds()\n             self.nodes = start_nodes(3, self.options.tmpdir, [[m]] * 3)"
      }
    ]
  },
  {
    "sha": "331655253ddad5d402896a2031e52008d96569ea",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMzE2NTUyNTNkZGFkNWQ0MDI4OTZhMjAzMWU1MjAwOGQ5NjU2OWVh",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-01-08T12:12:16Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-04-05T09:53:50Z"
      },
      "message": "[qa] Test walletpassphrase timeout\n\nGithub-Pull: #7320\nRebased-From: fa1cb1ae15e74e6149ff7fd8aae6cba216914e4c",
      "tree": {
        "sha": "a0ab2e653f9a3683e153fa8caa8fed111bef0169",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a0ab2e653f9a3683e153fa8caa8fed111bef0169"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/331655253ddad5d402896a2031e52008d96569ea",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/331655253ddad5d402896a2031e52008d96569ea",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/331655253ddad5d402896a2031e52008d96569ea",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/331655253ddad5d402896a2031e52008d96569ea/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6aae129a60d1646018c855c067d830d3086693f6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6aae129a60d1646018c855c067d830d3086693f6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6aae129a60d1646018c855c067d830d3086693f6"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 4,
      "deletions": 2
    },
    "files": [
      {
        "sha": "95d0d6832a91f30b709804c39f08ed05ae85665a",
        "filename": "qa/rpc-tests/keypool.py",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/331655253ddad5d402896a2031e52008d96569ea/qa/rpc-tests/keypool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/331655253ddad5d402896a2031e52008d96569ea/qa/rpc-tests/keypool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/keypool.py?ref=331655253ddad5d402896a2031e52008d96569ea",
        "patch": "@@ -70,9 +70,11 @@ def run_test(self):\n             assert(e.error['code']==-12)\n \n         # refill keypool with three new addresses\n-        nodes[0].walletpassphrase('test', 12000)\n+        nodes[0].walletpassphrase('test', 1)\n         nodes[0].keypoolrefill(3)\n-        nodes[0].walletlock()\n+        # test walletpassphrase timeout\n+        time.sleep(1.1)\n+        assert_equal(nodes[0].getwalletinfo()[\"unlocked_until\"], 0)\n \n         # drain them by mining\n         nodes[0].generate(1)"
      }
    ]
  },
  {
    "sha": "f23cb7c944a89caa383435d82cf1094a68e11e55",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMjNjYjdjOTQ0YTg5Y2FhMzgzNDM1ZDgyY2YxMDk0YTY4ZTExZTU1",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-03-06T17:30:51Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-04-05T09:53:50Z"
      },
      "message": "[qa] Add tests verifychain, lockunspent, getbalance, listsinceblock\n\nGithub-Pull: #7702\nRebased-From: fa4a52254178655f50e73b50153730a60ffafd32",
      "tree": {
        "sha": "1e97adf817276f912bc77c1639881bb8e634566c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1e97adf817276f912bc77c1639881bb8e634566c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f23cb7c944a89caa383435d82cf1094a68e11e55",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f23cb7c944a89caa383435d82cf1094a68e11e55",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f23cb7c944a89caa383435d82cf1094a68e11e55",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f23cb7c944a89caa383435d82cf1094a68e11e55/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "331655253ddad5d402896a2031e52008d96569ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/331655253ddad5d402896a2031e52008d96569ea",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/331655253ddad5d402896a2031e52008d96569ea"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 23,
      "deletions": 2
    },
    "files": [
      {
        "sha": "d2b5f41291cd9fbb345d0ab818066dedc6d8b3da",
        "filename": "qa/rpc-tests/blockchain.py",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f23cb7c944a89caa383435d82cf1094a68e11e55/qa/rpc-tests/blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f23cb7c944a89caa383435d82cf1094a68e11e55/qa/rpc-tests/blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/blockchain.py?ref=f23cb7c944a89caa383435d82cf1094a68e11e55",
        "patch": "@@ -28,6 +28,7 @@ class BlockchainTest(BitcoinTestFramework):\n     Test blockchain-related RPC calls:\n \n         - gettxoutsetinfo\n+        - verifychain\n \n     \"\"\"\n \n@@ -44,6 +45,7 @@ def setup_network(self, split=False):\n     def run_test(self):\n         self._test_gettxoutsetinfo()\n         self._test_getblockheader()\n+        self.nodes[0].verifychain(4, 0)\n \n     def _test_gettxoutsetinfo(self):\n         node = self.nodes[0]"
      },
      {
        "sha": "c19a63c6996d2ee827434dfd5665089afcf72563",
        "filename": "qa/rpc-tests/mempool_limit.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f23cb7c944a89caa383435d82cf1094a68e11e55/qa/rpc-tests/mempool_limit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f23cb7c944a89caa383435d82cf1094a68e11e55/qa/rpc-tests/mempool_limit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/mempool_limit.py?ref=f23cb7c944a89caa383435d82cf1094a68e11e55",
        "patch": "@@ -38,7 +38,6 @@ def run_test(self):\n         self.nodes[0].settxfee(0) # return to automatic fee selection\n         txFS = self.nodes[0].signrawtransaction(txF['hex'])\n         txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n-        self.nodes[0].lockunspent(True, [us0])\n \n         relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n         base_fee = relayfee*100"
      },
      {
        "sha": "bc3f9e051cef1200d0936c0ff15a3e22d3728548",
        "filename": "qa/rpc-tests/mempool_packages.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f23cb7c944a89caa383435d82cf1094a68e11e55/qa/rpc-tests/mempool_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f23cb7c944a89caa383435d82cf1094a68e11e55/qa/rpc-tests/mempool_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/mempool_packages.py?ref=f23cb7c944a89caa383435d82cf1094a68e11e55",
        "patch": "@@ -7,6 +7,7 @@\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n+from test_framework.mininode import COIN\n \n MAX_ANCESTORS = 25\n MAX_DESCENDANTS = 25"
      },
      {
        "sha": "f8636810de9c8e4a1021005fed621f56cace85a9",
        "filename": "qa/rpc-tests/wallet.py",
        "status": "modified",
        "additions": 20,
        "deletions": 1,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f23cb7c944a89caa383435d82cf1094a68e11e55/qa/rpc-tests/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f23cb7c944a89caa383435d82cf1094a68e11e55/qa/rpc-tests/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet.py?ref=f23cb7c944a89caa383435d82cf1094a68e11e55",
        "patch": "@@ -60,6 +60,15 @@ def run_test (self):\n         self.nodes[0].generate(1)\n         self.sync_all()\n \n+        # Exercise locking of unspent outputs\n+        unspent_0 = self.nodes[2].listunspent()[0]\n+        unspent_0 = {\"txid\": unspent_0[\"txid\"], \"vout\": unspent_0[\"vout\"]}\n+        self.nodes[2].lockunspent(False, [unspent_0])\n+        assert_raises(JSONRPCException, self.nodes[2].sendtoaddress, self.nodes[2].getnewaddress(), 20)\n+        assert_equal([unspent_0], self.nodes[2].listlockunspent())\n+        self.nodes[2].lockunspent(True, [unspent_0])\n+        assert_equal(len(self.nodes[2].listlockunspent()), 0)\n+\n         # Have node1 generate 100 blocks (so node0 can recover the fee)\n         self.nodes[1].generate(100)\n         self.sync_all()\n@@ -149,6 +158,10 @@ def run_test (self):\n \n         assert(txid1 in self.nodes[3].getrawmempool())\n \n+        # Exercise balance rpcs\n+        assert_equal(self.nodes[0].getwalletinfo()[\"unconfirmed_balance\"], 1)\n+        assert_equal(self.nodes[0].getunconfirmedbalance(), 1)\n+\n         #check if we can list zero value tx as available coins\n         #1. create rawtx\n         #2. hex-changed one output to 0.0\n@@ -252,7 +265,7 @@ def run_test (self):\n \n         #check if wallet or blochchain maintenance changes the balance\n         self.sync_all()\n-        self.nodes[0].generate(1)\n+        blocks = self.nodes[0].generate(2)\n         self.sync_all()\n         balance_nodes = [self.nodes[i].getbalance() for i in range(3)]\n \n@@ -270,6 +283,12 @@ def run_test (self):\n             self.nodes = start_nodes(3, self.options.tmpdir, [[m]] * 3)\n             assert_equal(balance_nodes, [self.nodes[i].getbalance() for i in range(3)])\n \n+        # Exercise listsinceblock with the last two blocks\n+        coinbase_tx_1 = self.nodes[0].listsinceblock(blocks[0])\n+        assert_equal(coinbase_tx_1[\"lastblock\"], blocks[1])\n+        assert_equal(len(coinbase_tx_1[\"transactions\"]), 1)\n+        assert_equal(coinbase_tx_1[\"transactions\"][0][\"blockhash\"], blocks[1])\n+        assert_equal(len(self.nodes[0].listsinceblock(blocks[1])[\"transactions\"]), 0)\n \n if __name__ == '__main__':\n     WalletTest ().main ()"
      }
    ]
  },
  {
    "sha": "b1dd64bffe6ead5028d3eac510b21b86f642cbba",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMWRkNjRiZmZlNmVhZDUwMjhkM2VhYzUxMGIyMWI4NmY2NDJjYmJh",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-03-28T19:47:13Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-04-05T09:53:51Z"
      },
      "message": "[qa] wallet: Wait for reindex to catch up\n\nGithub-Pull: #7757\nRebased-From: fa3fafc96076afb15fa77e01d5f6aff88a333a7e",
      "tree": {
        "sha": "de852830e63776999a39617bfbbda363001ef40c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/de852830e63776999a39617bfbbda363001ef40c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b1dd64bffe6ead5028d3eac510b21b86f642cbba",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b1dd64bffe6ead5028d3eac510b21b86f642cbba",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b1dd64bffe6ead5028d3eac510b21b86f642cbba",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b1dd64bffe6ead5028d3eac510b21b86f642cbba/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f23cb7c944a89caa383435d82cf1094a68e11e55",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f23cb7c944a89caa383435d82cf1094a68e11e55",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f23cb7c944a89caa383435d82cf1094a68e11e55"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "5442f38ad2567a14ad1bbf1318e67a57a7b570e4",
        "filename": "qa/rpc-tests/wallet.py",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b1dd64bffe6ead5028d3eac510b21b86f642cbba/qa/rpc-tests/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b1dd64bffe6ead5028d3eac510b21b86f642cbba/qa/rpc-tests/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet.py?ref=b1dd64bffe6ead5028d3eac510b21b86f642cbba",
        "patch": "@@ -268,6 +268,7 @@ def run_test (self):\n         blocks = self.nodes[0].generate(2)\n         self.sync_all()\n         balance_nodes = [self.nodes[i].getbalance() for i in range(3)]\n+        block_count = self.nodes[0].getblockcount()\n \n         maintenance = [\n             '-rescan',\n@@ -281,6 +282,9 @@ def run_test (self):\n             stop_nodes(self.nodes)\n             wait_bitcoinds()\n             self.nodes = start_nodes(3, self.options.tmpdir, [[m]] * 3)\n+            while m == '-reindex' and [block_count] * 3 != [self.nodes[i].getblockcount() for i in range(3)]:\n+                # reindex will leave rpc warm up \"early\"; Wait for it to finish\n+                time.sleep(0.1)\n             assert_equal(balance_nodes, [self.nodes[i].getbalance() for i in range(3)])\n \n         # Exercise listsinceblock with the last two blocks"
      }
    ]
  },
  {
    "sha": "ff9b4361632cc93f8ab4b5640ed146b1a2037825",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZjliNDM2MTYzMmNjOTNmOGFiNGI1NjQwZWQxNDZiMWEyMDM3ODI1",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-03-19T20:36:32Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-04-05T09:55:07Z"
      },
      "message": "[qa] Bug fixes and refactor\n\nGithub-Pull: #7778\nRebased-From: fa524d9ddbad0a03f9eb974100fb3b6001045645 fa2cea163b49a97e2a18aa125e41170d60ce59cc faaa3c9b6546d9a64cece4ff0223f0b167feb6ff 444480649f08e6037f8ac178224b30a82e9ad72e",
      "tree": {
        "sha": "d0fe52b2b8c18b3f6d70c4950459722d901357b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d0fe52b2b8c18b3f6d70c4950459722d901357b0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ff9b4361632cc93f8ab4b5640ed146b1a2037825",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff9b4361632cc93f8ab4b5640ed146b1a2037825",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ff9b4361632cc93f8ab4b5640ed146b1a2037825",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff9b4361632cc93f8ab4b5640ed146b1a2037825/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b1dd64bffe6ead5028d3eac510b21b86f642cbba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b1dd64bffe6ead5028d3eac510b21b86f642cbba",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b1dd64bffe6ead5028d3eac510b21b86f642cbba"
      }
    ],
    "stats": {
      "total": 298,
      "additions": 152,
      "deletions": 146
    },
    "files": [
      {
        "sha": "2f287a92650207082b3923b86d4b16b6d6f26f1c",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff9b4361632cc93f8ab4b5640ed146b1a2037825/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff9b4361632cc93f8ab4b5640ed146b1a2037825/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=ff9b4361632cc93f8ab4b5640ed146b1a2037825",
        "patch": "@@ -32,13 +32,13 @@\n from tests_config import *\n \n #If imported values are not defined then set to zero (or disabled)\n-if not vars().has_key('ENABLE_WALLET'):\n+if 'ENABLE_WALLET' not in vars():\n     ENABLE_WALLET=0\n-if not vars().has_key('ENABLE_BITCOIND'):\n+if 'ENABLE_BITCOIND' not in vars():\n     ENABLE_BITCOIND=0\n-if not vars().has_key('ENABLE_UTILS'):\n+if 'ENABLE_UTILS' not in vars():\n     ENABLE_UTILS=0\n-if not vars().has_key('ENABLE_ZMQ'):\n+if 'ENABLE_ZMQ' not in vars():\n     ENABLE_ZMQ=0\n \n ENABLE_COVERAGE=0"
      },
      {
        "sha": "b7ad03631bd25c16ef83abd9b8e3e4bcc0b9d801",
        "filename": "qa/rpc-tests/bip65-cltv-p2p.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff9b4361632cc93f8ab4b5640ed146b1a2037825/qa/rpc-tests/bip65-cltv-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff9b4361632cc93f8ab4b5640ed146b1a2037825/qa/rpc-tests/bip65-cltv-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip65-cltv-p2p.py?ref=ff9b4361632cc93f8ab4b5640ed146b1a2037825",
        "patch": "@@ -11,7 +11,7 @@\n from test_framework.comptool import TestInstance, TestManager\n from test_framework.script import CScript, OP_1NEGATE, OP_CHECKLOCKTIMEVERIFY, OP_DROP\n from binascii import unhexlify\n-import cStringIO\n+from io import BytesIO\n import time\n \n def cltv_invalidate(tx):\n@@ -60,7 +60,7 @@ def create_transaction(self, node, coinbase, to_address, amount):\n         rawtx = node.createrawtransaction(inputs, outputs)\n         signresult = node.signrawtransaction(rawtx)\n         tx = CTransaction()\n-        f = cStringIO.StringIO(unhexlify(signresult['hex']))\n+        f = BytesIO(unhexlify(signresult['hex']))\n         tx.deserialize(f)\n         return tx\n \n@@ -70,7 +70,7 @@ def get_tests(self):\n         height = 3  # height of the next block to build\n         self.tip = int (\"0x\" + self.nodes[0].getbestblockhash() + \"L\", 0)\n         self.nodeaddress = self.nodes[0].getnewaddress()\n-        self.last_block_time = time.time()\n+        self.last_block_time = int(time.time())\n \n         ''' 98 more version 3 blocks '''\n         test_blocks = []"
      },
      {
        "sha": "f391cb0b7aab46aaddd97c2cf51cc60bf4572a11",
        "filename": "qa/rpc-tests/bip68-112-113-p2p.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff9b4361632cc93f8ab4b5640ed146b1a2037825/qa/rpc-tests/bip68-112-113-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff9b4361632cc93f8ab4b5640ed146b1a2037825/qa/rpc-tests/bip68-112-113-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip68-112-113-p2p.py?ref=ff9b4361632cc93f8ab4b5640ed146b1a2037825",
        "patch": "@@ -11,7 +11,7 @@\n from test_framework.comptool import TestInstance, TestManager\n from test_framework.script import *\n from binascii import unhexlify\n-import cStringIO\n+from io import BytesIO\n import time\n \n '''\n@@ -119,15 +119,15 @@ def create_transaction(self, node, txid, to_address, amount):\n         outputs = { to_address : amount }\n         rawtx = node.createrawtransaction(inputs, outputs)\n         tx = CTransaction()\n-        f = cStringIO.StringIO(unhexlify(rawtx))\n+        f = BytesIO(unhexlify(rawtx))\n         tx.deserialize(f)\n         return tx\n \n     def sign_transaction(self, node, unsignedtx):\n         rawtx = ToHex(unsignedtx)\n         signresult = node.signrawtransaction(rawtx)\n         tx = CTransaction()\n-        f = cStringIO.StringIO(unhexlify(signresult['hex']))\n+        f = BytesIO(unhexlify(signresult['hex']))\n         tx.deserialize(f)\n         return tx\n "
      },
      {
        "sha": "98975e719335c4d6027e241c801e247eeca71e5f",
        "filename": "qa/rpc-tests/bip9-softforks.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff9b4361632cc93f8ab4b5640ed146b1a2037825/qa/rpc-tests/bip9-softforks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff9b4361632cc93f8ab4b5640ed146b1a2037825/qa/rpc-tests/bip9-softforks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip9-softforks.py?ref=ff9b4361632cc93f8ab4b5640ed146b1a2037825",
        "patch": "@@ -11,7 +11,7 @@\n from test_framework.comptool import TestInstance, TestManager\n from test_framework.script import CScript, OP_1NEGATE, OP_NOP3, OP_DROP\n from binascii import hexlify, unhexlify\n-import cStringIO\n+from io import BytesIO\n import time\n import itertools\n \n@@ -53,15 +53,15 @@ def create_transaction(self, node, coinbase, to_address, amount):\n         outputs = { to_address : amount }\n         rawtx = node.createrawtransaction(inputs, outputs)\n         tx = CTransaction()\n-        f = cStringIO.StringIO(unhexlify(rawtx))\n+        f = BytesIO(unhexlify(rawtx))\n         tx.deserialize(f)\n         tx.nVersion = 2\n         return tx\n \n     def sign_transaction(self, node, tx):\n         signresult = node.signrawtransaction(hexlify(tx.serialize()))\n         tx = CTransaction()\n-        f = cStringIO.StringIO(unhexlify(signresult['hex']))\n+        f = BytesIO(unhexlify(signresult['hex']))\n         tx.deserialize(f)\n         return tx\n \n@@ -217,4 +217,4 @@ def mtp_invalidate(self, tx):\n         tx.nLockTime = self.last_block_time\n \n if __name__ == '__main__':\n-    BIP9SoftForksTest().main()\n\\ No newline at end of file\n+    BIP9SoftForksTest().main()"
      },
      {
        "sha": "01b64871b8fd02223b9b596f53be81cfc3735d7e",
        "filename": "qa/rpc-tests/bipdersig-p2p.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff9b4361632cc93f8ab4b5640ed146b1a2037825/qa/rpc-tests/bipdersig-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff9b4361632cc93f8ab4b5640ed146b1a2037825/qa/rpc-tests/bipdersig-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bipdersig-p2p.py?ref=ff9b4361632cc93f8ab4b5640ed146b1a2037825",
        "patch": "@@ -11,7 +11,7 @@\n from test_framework.comptool import TestInstance, TestManager\n from test_framework.script import CScript\n from binascii import unhexlify\n-import cStringIO\n+from io import BytesIO\n import time\n \n # A canonical signature consists of: \n@@ -68,7 +68,7 @@ def create_transaction(self, node, coinbase, to_address, amount):\n         rawtx = node.createrawtransaction(inputs, outputs)\n         signresult = node.signrawtransaction(rawtx)\n         tx = CTransaction()\n-        f = cStringIO.StringIO(unhexlify(signresult['hex']))\n+        f = BytesIO(unhexlify(signresult['hex']))\n         tx.deserialize(f)\n         return tx\n \n@@ -78,7 +78,7 @@ def get_tests(self):\n         height = 3  # height of the next block to build\n         self.tip = int (\"0x\" + self.nodes[0].getbestblockhash() + \"L\", 0)\n         self.nodeaddress = self.nodes[0].getnewaddress()\n-        self.last_block_time = time.time()\n+        self.last_block_time = int(time.time())\n \n         ''' 98 more version 2 blocks '''\n         test_blocks = []"
      },
      {
        "sha": "2dfafac2fc1805074ca27f3a57f8732bce1fd685",
        "filename": "qa/rpc-tests/decodescript.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff9b4361632cc93f8ab4b5640ed146b1a2037825/qa/rpc-tests/decodescript.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff9b4361632cc93f8ab4b5640ed146b1a2037825/qa/rpc-tests/decodescript.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/decodescript.py?ref=ff9b4361632cc93f8ab4b5640ed146b1a2037825",
        "patch": "@@ -7,7 +7,7 @@\n from test_framework.util import *\n from test_framework.mininode import *\n from binascii import hexlify, unhexlify\n-from cStringIO import StringIO\n+from io import BytesIO\n \n class DecodeScriptTest(BitcoinTestFramework):\n     \"\"\"Tests decoding scripts via RPC command \"decodescript\".\"\"\"\n@@ -131,7 +131,7 @@ def decoderawtransaction_asm_sighashtype(self):\n         assert_equal('OP_DUP OP_HASH160 dc863734a218bfe83ef770ee9d41a27f824a6e56 OP_EQUALVERIFY OP_CHECKSIG', rpc_result['vout'][0]['scriptPubKey']['asm'])\n         assert_equal('OP_HASH160 2a5edea39971049a540474c6a99edf0aa4074c58 OP_EQUAL', rpc_result['vout'][1]['scriptPubKey']['asm'])\n         txSave = CTransaction()\n-        txSave.deserialize(StringIO(unhexlify(tx)))\n+        txSave.deserialize(BytesIO(unhexlify(tx)))\n \n         # make sure that a specifically crafted op_return value will not pass all the IsDERSignature checks and then get decoded as a sighash type\n         tx = '01000000015ded05872fdbda629c7d3d02b194763ce3b9b1535ea884e3c8e765d42e316724020000006b48304502204c10d4064885c42638cbff3585915b322de33762598321145ba033fc796971e2022100bb153ad3baa8b757e30a2175bd32852d2e1cb9080f84d7e32fcdfd667934ef1b012103163c0ff73511ea1743fb5b98384a2ff09dd06949488028fd819f4d83f56264efffffffff0200000000000000000b6a0930060201000201000180380100000000001976a9141cabd296e753837c086da7a45a6c2fe0d49d7b7b88ac00000000'"
      },
      {
        "sha": "82c9e48a497356262b95f37312dffff6546221d1",
        "filename": "qa/rpc-tests/fundrawtransaction.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff9b4361632cc93f8ab4b5640ed146b1a2037825/qa/rpc-tests/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff9b4361632cc93f8ab4b5640ed146b1a2037825/qa/rpc-tests/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/fundrawtransaction.py?ref=ff9b4361632cc93f8ab4b5640ed146b1a2037825",
        "patch": "@@ -48,7 +48,7 @@ def run_test(self):\n \n         watchonly_address = self.nodes[0].getnewaddress()\n         watchonly_pubkey = self.nodes[0].validateaddress(watchonly_address)[\"pubkey\"]\n-        watchonly_amount = 200\n+        watchonly_amount = Decimal(200)\n         self.nodes[3].importpubkey(watchonly_pubkey, \"\", True)\n         watchonly_txid = self.nodes[0].sendtoaddress(watchonly_address, watchonly_amount)\n         self.nodes[0].sendtoaddress(self.nodes[3].getnewaddress(), watchonly_amount / 10)\n@@ -209,7 +209,7 @@ def run_test(self):\n         matchingOuts = 0\n         for i, out in enumerate(dec_tx['vout']):\n             totalOut += out['value']\n-            if outputs.has_key(out['scriptPubKey']['addresses'][0]):\n+            if out['scriptPubKey']['addresses'][0] in outputs:\n                 matchingOuts+=1\n             else:\n                 assert_equal(i, rawtxfund['changepos'])\n@@ -249,7 +249,7 @@ def run_test(self):\n         matchingOuts = 0\n         for out in dec_tx['vout']:\n             totalOut += out['value']\n-            if outputs.has_key(out['scriptPubKey']['addresses'][0]):\n+            if out['scriptPubKey']['addresses'][0] in outputs:\n                 matchingOuts+=1\n \n         assert_equal(matchingOuts, 1)\n@@ -291,7 +291,7 @@ def run_test(self):\n         matchingOuts = 0\n         for out in dec_tx['vout']:\n             totalOut += out['value']\n-            if outputs.has_key(out['scriptPubKey']['addresses'][0]):\n+            if out['scriptPubKey']['addresses'][0] in outputs:\n                 matchingOuts+=1\n \n         assert_equal(matchingOuts, 2)\n@@ -309,7 +309,7 @@ def run_test(self):\n         try:\n             rawtxfund = self.nodes[2].fundrawtransaction(rawtx)\n             raise AssertionError(\"Spent more than available\")\n-        except JSONRPCException,e:\n+        except JSONRPCException as e:\n             assert(\"Insufficient\" in e.error['message'])\n \n "
      },
      {
        "sha": "5253d49c308f758497413a746b8a8e937c0251d9",
        "filename": "qa/rpc-tests/keypool.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff9b4361632cc93f8ab4b5640ed146b1a2037825/qa/rpc-tests/keypool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff9b4361632cc93f8ab4b5640ed146b1a2037825/qa/rpc-tests/keypool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/keypool.py?ref=ff9b4361632cc93f8ab4b5640ed146b1a2037825",
        "patch": "@@ -46,7 +46,7 @@ def run_test(self):\n         try:\n             addr = nodes[0].getnewaddress()\n             raise AssertionError('Keypool should be exhausted after one address')\n-        except JSONRPCException,e:\n+        except JSONRPCException as e:\n             assert(e.error['code']==-12)\n \n         # put three new keys in the keypool\n@@ -66,7 +66,7 @@ def run_test(self):\n         try:\n             addr = nodes[0].getrawchangeaddress()\n             raise AssertionError('Keypool should be exhausted after three addresses')\n-        except JSONRPCException,e:\n+        except JSONRPCException as e:\n             assert(e.error['code']==-12)\n \n         # refill keypool with three new addresses\n@@ -84,7 +84,7 @@ def run_test(self):\n         try:\n             nodes[0].generate(1)\n             raise AssertionError('Keypool should be exhausted after three addesses')\n-        except JSONRPCException,e:\n+        except JSONRPCException as e:\n             assert(e.error['code']==-12)\n \n     def setup_chain(self):"
      },
      {
        "sha": "40bf8565def5d0552fa7fd1c52603def987aa13c",
        "filename": "qa/rpc-tests/listtransactions.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff9b4361632cc93f8ab4b5640ed146b1a2037825/qa/rpc-tests/listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff9b4361632cc93f8ab4b5640ed146b1a2037825/qa/rpc-tests/listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/listtransactions.py?ref=ff9b4361632cc93f8ab4b5640ed146b1a2037825",
        "patch": "@@ -8,12 +8,12 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n from test_framework.mininode import CTransaction, COIN\n-import cStringIO\n+from io import BytesIO\n import binascii\n \n def txFromHex(hexstring):\n     tx = CTransaction()\n-    f = cStringIO.StringIO(binascii.unhexlify(hexstring))\n+    f = BytesIO(binascii.unhexlify(hexstring))\n     tx.deserialize(f)\n     return tx\n \n@@ -187,7 +187,7 @@ def get_unconfirmed_utxo_entry(node, txid_to_match):\n \n         # Replace tx3, and check that tx4 becomes unknown\n         tx3_b = tx3_modified\n-        tx3_b.vout[0].nValue -= 0.004 * COIN # bump the fee\n+        tx3_b.vout[0].nValue -= int(Decimal(\"0.004\") * COIN) # bump the fee\n         tx3_b = binascii.hexlify(tx3_b.serialize()).decode('utf-8')\n         tx3_b_signed = self.nodes[0].signrawtransaction(tx3_b)['hex']\n         txid_3b = self.nodes[0].sendrawtransaction(tx3_b_signed, True)"
      },
      {
        "sha": "584b528a69318e5e88757a3ac81fb191fd178292",
        "filename": "qa/rpc-tests/maxuploadtarget.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff9b4361632cc93f8ab4b5640ed146b1a2037825/qa/rpc-tests/maxuploadtarget.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff9b4361632cc93f8ab4b5640ed146b1a2037825/qa/rpc-tests/maxuploadtarget.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/maxuploadtarget.py?ref=ff9b4361632cc93f8ab4b5640ed146b1a2037825",
        "patch": "@@ -178,7 +178,7 @@ def run_test(self):\n         max_bytes_per_day = 200*1024*1024\n         daily_buffer = 144 * MAX_BLOCK_SIZE\n         max_bytes_available = max_bytes_per_day - daily_buffer\n-        success_count = max_bytes_available / old_block_size\n+        success_count = max_bytes_available // old_block_size\n \n         # 144MB will be reserved for relaying new blocks, so expect this to\n         # succeed for ~70 tries."
      },
      {
        "sha": "3b569b29caef937993d2bb3d89ff2a1c1f0fff14",
        "filename": "qa/rpc-tests/p2p-acceptblock.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff9b4361632cc93f8ab4b5640ed146b1a2037825/qa/rpc-tests/p2p-acceptblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff9b4361632cc93f8ab4b5640ed146b1a2037825/qa/rpc-tests/p2p-acceptblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-acceptblock.py?ref=ff9b4361632cc93f8ab4b5640ed146b1a2037825",
        "patch": "@@ -150,7 +150,7 @@ def run_test(self):\n         # 2. Send one block that builds on each tip.\n         # This should be accepted.\n         blocks_h2 = []  # the height 2 blocks on each node's chain\n-        block_time = time.time() + 1\n+        block_time = int(time.time()) + 1\n         for i in xrange(2):\n             blocks_h2.append(create_block(tips[i], create_coinbase(2), block_time))\n             blocks_h2[i].solve()"
      },
      {
        "sha": "e03b35d89c82e4c8a88b6934c6f06382c8cf0719",
        "filename": "qa/rpc-tests/p2p-fullblocktest.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff9b4361632cc93f8ab4b5640ed146b1a2037825/qa/rpc-tests/p2p-fullblocktest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff9b4361632cc93f8ab4b5640ed146b1a2037825/qa/rpc-tests/p2p-fullblocktest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-fullblocktest.py?ref=ff9b4361632cc93f8ab4b5640ed146b1a2037825",
        "patch": "@@ -270,15 +270,15 @@ def update_block(block_number, new_transactions):\n         #                      \\-> b3 (1) -> b4 (2)\n         \n         # Test that a block with a lot of checksigs is okay\n-        lots_of_checksigs = CScript([OP_CHECKSIG] * (1000000 / 50 - 1))\n+        lots_of_checksigs = CScript([OP_CHECKSIG] * (1000000 // 50 - 1))\n         tip(13)\n         block(15, spend=out5, script=lots_of_checksigs)\n         yield accepted()\n \n \n         # Test that a block with too many checksigs is rejected\n         out6 = get_spendable_output()\n-        too_many_checksigs = CScript([OP_CHECKSIG] * (1000000 / 50))\n+        too_many_checksigs = CScript([OP_CHECKSIG] * (1000000 // 50))\n         block(16, spend=out6, script=too_many_checksigs)\n         yield rejected(RejectResult(16, 'bad-blk-sigops'))\n "
      },
      {
        "sha": "dd2adea950f2329876af79256dcd49e47699a5a0",
        "filename": "qa/rpc-tests/pruning.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff9b4361632cc93f8ab4b5640ed146b1a2037825/qa/rpc-tests/pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff9b4361632cc93f8ab4b5640ed146b1a2037825/qa/rpc-tests/pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/pruning.py?ref=ff9b4361632cc93f8ab4b5640ed146b1a2037825",
        "patch": "@@ -15,7 +15,7 @@\n from test_framework.util import *\n \n def calc_usage(blockdir):\n-    return sum(os.path.getsize(blockdir+f) for f in os.listdir(blockdir) if os.path.isfile(blockdir+f))/(1024*1024)\n+    return sum(os.path.getsize(blockdir+f) for f in os.listdir(blockdir) if os.path.isfile(blockdir+f)) / (1024. * 1024.)\n \n class PruneTest(BitcoinTestFramework):\n \n@@ -56,7 +56,7 @@ def create_big_chain(self):\n         self.nodes[1].generate(200)\n         sync_blocks(self.nodes[0:2])\n         self.nodes[0].generate(150)\n-        # Then mine enough full blocks to create more than 550MB of data\n+        # Then mine enough full blocks to create more than 550MiB of data\n         for i in xrange(645):\n             self.mine_full_block(self.nodes[0], self.address[0])\n \n@@ -66,7 +66,7 @@ def test_height_min(self):\n         if not os.path.isfile(self.prunedir+\"blk00000.dat\"):\n             raise AssertionError(\"blk00000.dat is missing, pruning too early\")\n         print \"Success\"\n-        print \"Though we're already using more than 550MB, current usage:\", calc_usage(self.prunedir)\n+        print \"Though we're already using more than 550MiB, current usage:\", calc_usage(self.prunedir)\n         print \"Mining 25 more blocks should cause the first block file to be pruned\"\n         # Pruning doesn't run until we're allocating another chunk, 20 full blocks past the height cutoff will ensure this\n         for i in xrange(25):"
      },
      {
        "sha": "9f660c8bdadeb279bdb79c17bf2101ba0c0983e7",
        "filename": "qa/rpc-tests/rawtransactions.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff9b4361632cc93f8ab4b5640ed146b1a2037825/qa/rpc-tests/rawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff9b4361632cc93f8ab4b5640ed146b1a2037825/qa/rpc-tests/rawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rawtransactions.py?ref=ff9b4361632cc93f8ab4b5640ed146b1a2037825",
        "patch": "@@ -59,7 +59,7 @@ def run_test(self):\n         errorString = \"\"\n         try:\n             rawtx   = self.nodes[2].sendrawtransaction(rawtx['hex'])\n-        except JSONRPCException,e:\n+        except JSONRPCException as e:\n             errorString = e.error['message']\n \n         assert(\"Missing inputs\" in errorString)"
      },
      {
        "sha": "b951900c4dbd94cd4481ddbddbe7d20dfbdaaf59",
        "filename": "qa/rpc-tests/replace-by-fee.py",
        "status": "modified",
        "additions": 25,
        "deletions": 25,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff9b4361632cc93f8ab4b5640ed146b1a2037825/qa/rpc-tests/replace-by-fee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff9b4361632cc93f8ab4b5640ed146b1a2037825/qa/rpc-tests/replace-by-fee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/replace-by-fee.py?ref=ff9b4361632cc93f8ab4b5640ed146b1a2037825",
        "patch": "@@ -119,7 +119,7 @@ def run_test(self):\n \n     def test_simple_doublespend(self):\n         \"\"\"Simple doublespend\"\"\"\n-        tx0_outpoint = make_utxo(self.nodes[0], 1.1*COIN)\n+        tx0_outpoint = make_utxo(self.nodes[0], int(1.1*COIN))\n \n         tx1a = CTransaction()\n         tx1a.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n@@ -143,7 +143,7 @@ def test_simple_doublespend(self):\n         # Extra 0.1 BTC fee\n         tx1b = CTransaction()\n         tx1b.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n-        tx1b.vout = [CTxOut(0.9*COIN, CScript([b'b']))]\n+        tx1b.vout = [CTxOut(int(0.9*COIN), CScript([b'b']))]\n         tx1b_hex = txToHex(tx1b)\n         tx1b_txid = self.nodes[0].sendrawtransaction(tx1b_hex, True)\n \n@@ -235,7 +235,7 @@ def branch(prevout, initial_value, max_txs, tree_width=5, fee=0.0001*COIN, _tota\n                                   _total_txs=_total_txs):\n                     yield x\n \n-        fee = 0.0001*COIN\n+        fee = int(0.0001*COIN)\n         n = MAX_REPLACEMENT_LIMIT\n         tree_txs = list(branch(tx0_outpoint, initial_nValue, n, fee=fee))\n         assert_equal(len(tree_txs), n)\n@@ -268,7 +268,7 @@ def branch(prevout, initial_value, max_txs, tree_width=5, fee=0.0001*COIN, _tota\n         # Try again, but with more total transactions than the \"max txs\n         # double-spent at once\" anti-DoS limit.\n         for n in (MAX_REPLACEMENT_LIMIT+1, MAX_REPLACEMENT_LIMIT*2):\n-            fee = 0.0001*COIN\n+            fee = int(0.0001*COIN)\n             tx0_outpoint = make_utxo(self.nodes[0], initial_nValue)\n             tree_txs = list(branch(tx0_outpoint, initial_nValue, n, fee=fee))\n             assert_equal(len(tree_txs), n)\n@@ -291,7 +291,7 @@ def branch(prevout, initial_value, max_txs, tree_width=5, fee=0.0001*COIN, _tota\n \n     def test_replacement_feeperkb(self):\n         \"\"\"Replacement requires fee-per-KB to be higher\"\"\"\n-        tx0_outpoint = make_utxo(self.nodes[0], 1.1*COIN)\n+        tx0_outpoint = make_utxo(self.nodes[0], int(1.1*COIN))\n \n         tx1a = CTransaction()\n         tx1a.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n@@ -303,7 +303,7 @@ def test_replacement_feeperkb(self):\n         # rejected.\n         tx1b = CTransaction()\n         tx1b.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n-        tx1b.vout = [CTxOut(0.001*COIN, CScript([b'a'*999000]))]\n+        tx1b.vout = [CTxOut(int(0.001*COIN), CScript([b'a'*999000]))]\n         tx1b_hex = txToHex(tx1b)\n \n         try:\n@@ -315,12 +315,12 @@ def test_replacement_feeperkb(self):\n \n     def test_spends_of_conflicting_outputs(self):\n         \"\"\"Replacements that spend conflicting tx outputs are rejected\"\"\"\n-        utxo1 = make_utxo(self.nodes[0], 1.2*COIN)\n-        utxo2 = make_utxo(self.nodes[0], 3.0*COIN)\n+        utxo1 = make_utxo(self.nodes[0], int(1.2*COIN))\n+        utxo2 = make_utxo(self.nodes[0], 3*COIN)\n \n         tx1a = CTransaction()\n         tx1a.vin = [CTxIn(utxo1, nSequence=0)]\n-        tx1a.vout = [CTxOut(1.1*COIN, CScript([b'a']))]\n+        tx1a.vout = [CTxOut(int(1.1*COIN), CScript([b'a']))]\n         tx1a_hex = txToHex(tx1a)\n         tx1a_txid = self.nodes[0].sendrawtransaction(tx1a_hex, True)\n \n@@ -343,7 +343,7 @@ def test_spends_of_conflicting_outputs(self):\n         # Spend tx1a's output to test the indirect case.\n         tx1b = CTransaction()\n         tx1b.vin = [CTxIn(COutPoint(tx1a_txid, 0), nSequence=0)]\n-        tx1b.vout = [CTxOut(1.0*COIN, CScript([b'a']))]\n+        tx1b.vout = [CTxOut(1*COIN, CScript([b'a']))]\n         tx1b_hex = txToHex(tx1b)\n         tx1b_txid = self.nodes[0].sendrawtransaction(tx1b_hex, True)\n         tx1b_txid = int(tx1b_txid, 16)\n@@ -363,12 +363,12 @@ def test_spends_of_conflicting_outputs(self):\n \n     def test_new_unconfirmed_inputs(self):\n         \"\"\"Replacements that add new unconfirmed inputs are rejected\"\"\"\n-        confirmed_utxo = make_utxo(self.nodes[0], 1.1*COIN)\n-        unconfirmed_utxo = make_utxo(self.nodes[0], 0.1*COIN, False)\n+        confirmed_utxo = make_utxo(self.nodes[0], int(1.1*COIN))\n+        unconfirmed_utxo = make_utxo(self.nodes[0], int(0.1*COIN), False)\n \n         tx1 = CTransaction()\n         tx1.vin = [CTxIn(confirmed_utxo)]\n-        tx1.vout = [CTxOut(1.0*COIN, CScript([b'a']))]\n+        tx1.vout = [CTxOut(1*COIN, CScript([b'a']))]\n         tx1_hex = txToHex(tx1)\n         tx1_txid = self.nodes[0].sendrawtransaction(tx1_hex, True)\n \n@@ -392,7 +392,7 @@ def test_too_many_replacements(self):\n         # Start by creating a single transaction with many outputs\n         initial_nValue = 10*COIN\n         utxo = make_utxo(self.nodes[0], initial_nValue)\n-        fee = 0.0001*COIN\n+        fee = int(0.0001*COIN)\n         split_value = int((initial_nValue-fee)/(MAX_REPLACEMENT_LIMIT+1))\n         actual_fee = initial_nValue - split_value*(MAX_REPLACEMENT_LIMIT+1)\n \n@@ -445,7 +445,7 @@ def test_too_many_replacements(self):\n \n     def test_opt_in(self):\n         \"\"\" Replacing should only work if orig tx opted in \"\"\"\n-        tx0_outpoint = make_utxo(self.nodes[0], 1.1*COIN)\n+        tx0_outpoint = make_utxo(self.nodes[0], int(1.1*COIN))\n \n         # Create a non-opting in transaction\n         tx1a = CTransaction()\n@@ -457,7 +457,7 @@ def test_opt_in(self):\n         # Shouldn't be able to double-spend\n         tx1b = CTransaction()\n         tx1b.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n-        tx1b.vout = [CTxOut(0.9*COIN, CScript([b'b']))]\n+        tx1b.vout = [CTxOut(int(0.9*COIN), CScript([b'b']))]\n         tx1b_hex = txToHex(tx1b)\n \n         try:\n@@ -468,7 +468,7 @@ def test_opt_in(self):\n             print tx1b_txid\n             assert(False)\n \n-        tx1_outpoint = make_utxo(self.nodes[0], 1.1*COIN)\n+        tx1_outpoint = make_utxo(self.nodes[0], int(1.1*COIN))\n \n         # Create a different non-opting in transaction\n         tx2a = CTransaction()\n@@ -480,7 +480,7 @@ def test_opt_in(self):\n         # Still shouldn't be able to double-spend\n         tx2b = CTransaction()\n         tx2b.vin = [CTxIn(tx1_outpoint, nSequence=0)]\n-        tx2b.vout = [CTxOut(0.9*COIN, CScript([b'b']))]\n+        tx2b.vout = [CTxOut(int(0.9*COIN), CScript([b'b']))]\n         tx2b_hex = txToHex(tx2b)\n \n         try:\n@@ -500,19 +500,19 @@ def test_opt_in(self):\n         tx3a = CTransaction()\n         tx3a.vin = [CTxIn(COutPoint(tx1a_txid, 0), nSequence=0xffffffff),\n                     CTxIn(COutPoint(tx2a_txid, 0), nSequence=0xfffffffd)]\n-        tx3a.vout = [CTxOut(0.9*COIN, CScript([b'c'])), CTxOut(0.9*COIN, CScript([b'd']))]\n+        tx3a.vout = [CTxOut(int(0.9*COIN), CScript([b'c'])), CTxOut(int(0.9*COIN), CScript([b'd']))]\n         tx3a_hex = txToHex(tx3a)\n \n         self.nodes[0].sendrawtransaction(tx3a_hex, True)\n \n         tx3b = CTransaction()\n         tx3b.vin = [CTxIn(COutPoint(tx1a_txid, 0), nSequence=0)]\n-        tx3b.vout = [CTxOut(0.5*COIN, CScript([b'e']))]\n+        tx3b.vout = [CTxOut(int(0.5*COIN), CScript([b'e']))]\n         tx3b_hex = txToHex(tx3b)\n \n         tx3c = CTransaction()\n         tx3c.vin = [CTxIn(COutPoint(tx2a_txid, 0), nSequence=0)]\n-        tx3c.vout = [CTxOut(0.5*COIN, CScript([b'f']))]\n+        tx3c.vout = [CTxOut(int(0.5*COIN), CScript([b'f']))]\n         tx3c_hex = txToHex(tx3c)\n \n         self.nodes[0].sendrawtransaction(tx3b_hex, True)\n@@ -525,7 +525,7 @@ def test_prioritised_transactions(self):\n         # correctly used by replacement logic\n \n         # 1. Check that feeperkb uses modified fees\n-        tx0_outpoint = make_utxo(self.nodes[0], 1.1*COIN)\n+        tx0_outpoint = make_utxo(self.nodes[0], int(1.1*COIN))\n \n         tx1a = CTransaction()\n         tx1a.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n@@ -536,7 +536,7 @@ def test_prioritised_transactions(self):\n         # Higher fee, but the actual fee per KB is much lower.\n         tx1b = CTransaction()\n         tx1b.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n-        tx1b.vout = [CTxOut(0.001*COIN, CScript([b'a'*740000]))]\n+        tx1b.vout = [CTxOut(int(0.001*COIN), CScript([b'a'*740000]))]\n         tx1b_hex = txToHex(tx1b)\n \n         # Verify tx1b cannot replace tx1a.\n@@ -556,7 +556,7 @@ def test_prioritised_transactions(self):\n         assert(tx1b_txid in self.nodes[0].getrawmempool())\n \n         # 2. Check that absolute fee checks use modified fee.\n-        tx1_outpoint = make_utxo(self.nodes[0], 1.1*COIN)\n+        tx1_outpoint = make_utxo(self.nodes[0], int(1.1*COIN))\n \n         tx2a = CTransaction()\n         tx2a.vin = [CTxIn(tx1_outpoint, nSequence=0)]\n@@ -567,7 +567,7 @@ def test_prioritised_transactions(self):\n         # Lower fee, but we'll prioritise it\n         tx2b = CTransaction()\n         tx2b.vin = [CTxIn(tx1_outpoint, nSequence=0)]\n-        tx2b.vout = [CTxOut(1.01*COIN, CScript([b'a']))]\n+        tx2b.vout = [CTxOut(int(1.01*COIN), CScript([b'a']))]\n         tx2b.rehash()\n         tx2b_hex = txToHex(tx2b)\n "
      },
      {
        "sha": "3c8a405bdd044f19616d8bc87ab2634a0cc1d801",
        "filename": "qa/rpc-tests/rest.py",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff9b4361632cc93f8ab4b5640ed146b1a2037825/qa/rpc-tests/rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff9b4361632cc93f8ab4b5640ed146b1a2037825/qa/rpc-tests/rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rest.py?ref=ff9b4361632cc93f8ab4b5640ed146b1a2037825",
        "patch": "@@ -11,8 +11,9 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n from struct import *\n+from io import BytesIO\n+from codecs import encode\n import binascii\n-import StringIO\n \n try:\n     import http.client as httplib\n@@ -146,7 +147,7 @@ def run_test(self):\n         binaryRequest += pack(\"i\", 0)\n \n         bin_response = http_post_call(url.hostname, url.port, '/rest/getutxos'+self.FORMAT_SEPARATOR+'bin', binaryRequest)\n-        output = StringIO.StringIO()\n+        output = BytesIO()\n         output.write(bin_response)\n         output.seek(0)\n         chainHeight = unpack(\"i\", output.read(4))[0]\n@@ -233,15 +234,15 @@ def run_test(self):\n         assert_equal(response_hex.status, 200)\n         assert_greater_than(int(response_hex.getheader('content-length')), 160)\n         response_hex_str = response_hex.read()\n-        assert_equal(response_str.encode(\"hex\")[0:160], response_hex_str[0:160])\n+        assert_equal(encode(response_str, \"hex\")[0:160], response_hex_str[0:160])\n \n         # compare with hex block header\n         response_header_hex = http_get_call(url.hostname, url.port, '/rest/headers/1/'+bb_hash+self.FORMAT_SEPARATOR+\"hex\", True)\n         assert_equal(response_header_hex.status, 200)\n         assert_greater_than(int(response_header_hex.getheader('content-length')), 160)\n         response_header_hex_str = response_header_hex.read()\n         assert_equal(response_hex_str[0:160], response_header_hex_str[0:160])\n-        assert_equal(response_header_str.encode(\"hex\")[0:160], response_header_hex_str[0:160])\n+        assert_equal(encode(response_header_str, \"hex\")[0:160], response_header_hex_str[0:160])\n \n         # check json format\n         block_json_string = http_get_call(url.hostname, url.port, '/rest/block/'+bb_hash+self.FORMAT_SEPARATOR+'json')"
      },
      {
        "sha": "2c064ad8a03a954c848ca4930cff1d8107ca4900",
        "filename": "qa/rpc-tests/smartfees.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff9b4361632cc93f8ab4b5640ed146b1a2037825/qa/rpc-tests/smartfees.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff9b4361632cc93f8ab4b5640ed146b1a2037825/qa/rpc-tests/smartfees.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/smartfees.py?ref=ff9b4361632cc93f8ab4b5640ed146b1a2037825",
        "patch": "@@ -105,7 +105,7 @@ def check_estimates(node, fees_seen, max_invalid, print_estimates = True):\n         print([str(all_estimates[e-1]) for e in [1,2,3,6,15,25]])\n     delta = 1.0e-6 # account for rounding error\n     last_e = max(fees_seen)\n-    for e in filter(lambda x: x >= 0, all_estimates):\n+    for e in [x for x in all_estimates if x >= 0]:\n         # Estimates should be within the bounds of what transactions fees actually were:\n         if float(e)+delta < min(fees_seen) or float(e)-delta > max(fees_seen):\n             raise AssertionError(\"Estimated fee (%f) out of range (%f,%f)\"\n@@ -219,7 +219,7 @@ def transact_and_mine(self, numblocks, mining_node):\n                 from_index = random.randint(1,2)\n                 (txhex, fee) = small_txpuzzle_randfee(self.nodes[from_index], self.confutxo,\n                                                       self.memutxo, Decimal(\"0.005\"), min_fee, min_fee)\n-                tx_kbytes = (len(txhex)/2)/1000.0\n+                tx_kbytes = (len(txhex) // 2) / 1000.0\n                 self.fees_per_kb.append(float(fee)/tx_kbytes)\n             sync_mempools(self.nodes[0:3],.1)\n             mined = mining_node.getblock(mining_node.generate(1)[0],True)[\"tx\"]"
      },
      {
        "sha": "73d9ffbb2fe0523696fe7f25cf31f433c4343d00",
        "filename": "qa/rpc-tests/test_framework/blockstore.py",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff9b4361632cc93f8ab4b5640ed146b1a2037825/qa/rpc-tests/test_framework/blockstore.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff9b4361632cc93f8ab4b5640ed146b1a2037825/qa/rpc-tests/test_framework/blockstore.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/blockstore.py?ref=ff9b4361632cc93f8ab4b5640ed146b1a2037825",
        "patch": "@@ -3,8 +3,9 @@\n #             and for constructing a getheaders message\n #\n \n-from mininode import *\n+from .mininode import *\n import dbm\n+from io import BytesIO\n \n class BlockStore(object):\n     def __init__(self, datadir):\n@@ -21,7 +22,7 @@ def get(self, blockhash):\n             serialized_block = self.blockDB[repr(blockhash)]\n         except KeyError:\n             return None\n-        f = cStringIO.StringIO(serialized_block)\n+        f = BytesIO(serialized_block)\n         ret = CBlock()\n         ret.deserialize(f)\n         ret.calc_sha256()\n@@ -115,7 +116,7 @@ def get(self, txhash):\n             serialized_tx = self.txDB[repr(txhash)]\n         except KeyError:\n             return None\n-        f = cStringIO.StringIO(serialized_tx)\n+        f = BytesIO(serialized_tx)\n         ret = CTransaction()\n         ret.deserialize(f)\n         ret.calc_sha256()"
      },
      {
        "sha": "50c2a3214a3ef304327bb3368778e1464c202bd4",
        "filename": "qa/rpc-tests/test_framework/blocktools.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff9b4361632cc93f8ab4b5640ed146b1a2037825/qa/rpc-tests/test_framework/blocktools.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff9b4361632cc93f8ab4b5640ed146b1a2037825/qa/rpc-tests/test_framework/blocktools.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/blocktools.py?ref=ff9b4361632cc93f8ab4b5640ed146b1a2037825",
        "patch": "@@ -4,8 +4,8 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n #\n \n-from mininode import *\n-from script import CScript, OP_TRUE, OP_CHECKSIG\n+from .mininode import *\n+from .script import CScript, OP_TRUE, OP_CHECKSIG\n \n # Create a block (with regtest difficulty)\n def create_block(hashprev, coinbase, nTime=None):\n@@ -29,7 +29,7 @@ def serialize_script_num(value):\n     neg = value < 0\n     absvalue = -value if neg else value\n     while (absvalue):\n-        r.append(chr(absvalue & 0xff))\n+        r.append(int(absvalue & 0xff))\n         absvalue >>= 8\n     if r[-1] & 0x80:\n         r.append(0x80 if neg else 0)"
      },
      {
        "sha": "bb9fccb140f3db9e55dcdc2a0da58d747a32ca4e",
        "filename": "qa/rpc-tests/test_framework/comptool.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff9b4361632cc93f8ab4b5640ed146b1a2037825/qa/rpc-tests/test_framework/comptool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff9b4361632cc93f8ab4b5640ed146b1a2037825/qa/rpc-tests/test_framework/comptool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/comptool.py?ref=ff9b4361632cc93f8ab4b5640ed146b1a2037825",
        "patch": "@@ -4,9 +4,9 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n #\n \n-from mininode import *\n-from blockstore import BlockStore, TxStore\n-from util import p2p_port\n+from .mininode import *\n+from .blockstore import BlockStore, TxStore\n+from .util import p2p_port\n \n '''\n This is a tool for comparing two or more bitcoinds to each other"
      },
      {
        "sha": "f55bd7235304066145081845f01f343ca8f70afa",
        "filename": "qa/rpc-tests/test_framework/mininode.py",
        "status": "modified",
        "additions": 66,
        "deletions": 62,
        "changes": 128,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff9b4361632cc93f8ab4b5640ed146b1a2037825/qa/rpc-tests/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff9b4361632cc93f8ab4b5640ed146b1a2037825/qa/rpc-tests/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/mininode.py?ref=ff9b4361632cc93f8ab4b5640ed146b1a2037825",
        "patch": "@@ -24,7 +24,8 @@\n import time\n import sys\n import random\n-import cStringIO\n+from io import BytesIO\n+from codecs import encode\n import hashlib\n from threading import RLock\n from threading import Thread\n@@ -75,12 +76,12 @@ def deser_string(f):\n \n def ser_string(s):\n     if len(s) < 253:\n-        return chr(len(s)) + s\n+        return struct.pack(\"B\", len(s)) + s\n     elif len(s) < 0x10000:\n-        return chr(253) + struct.pack(\"<H\", len(s)) + s\n+        return struct.pack(\"<BH\", 253, len(s)) + s\n     elif len(s) < 0x100000000L:\n-        return chr(254) + struct.pack(\"<I\", len(s)) + s\n-    return chr(255) + struct.pack(\"<Q\", len(s)) + s\n+        return struct.pack(\"<BI\", 254, len(s)) + s\n+    return struct.pack(\"<BQ\", 255, len(s)) + s\n \n \n def deser_uint256(f):\n@@ -132,13 +133,13 @@ def deser_vector(f, c):\n def ser_vector(l):\n     r = \"\"\n     if len(l) < 253:\n-        r = chr(len(l))\n+        r = struct.pack(\"B\", len(l))\n     elif len(l) < 0x10000:\n-        r = chr(253) + struct.pack(\"<H\", len(l))\n+        r = struct.pack(\"<BH\", 253, len(l))\n     elif len(l) < 0x100000000L:\n-        r = chr(254) + struct.pack(\"<I\", len(l))\n+        r = struct.pack(\"<BI\", 254, len(l))\n     else:\n-        r = chr(255) + struct.pack(\"<Q\", len(l))\n+        r = struct.pack(\"<BQ\", 255, len(l))\n     for i in l:\n         r += i.serialize()\n     return r\n@@ -162,13 +163,13 @@ def deser_uint256_vector(f):\n def ser_uint256_vector(l):\n     r = \"\"\n     if len(l) < 253:\n-        r = chr(len(l))\n+        r = struct.pack(\"B\", len(l))\n     elif len(l) < 0x10000:\n-        r = chr(253) + struct.pack(\"<H\", len(l))\n+        r = struct.pack(\"<BH\", 253, len(l))\n     elif len(l) < 0x100000000L:\n-        r = chr(254) + struct.pack(\"<I\", len(l))\n+        r = struct.pack(\"<BI\", 254, len(l))\n     else:\n-        r = chr(255) + struct.pack(\"<Q\", len(l))\n+        r = struct.pack(\"<BQ\", 255, len(l))\n     for i in l:\n         r += ser_uint256(i)\n     return r\n@@ -192,13 +193,13 @@ def deser_string_vector(f):\n def ser_string_vector(l):\n     r = \"\"\n     if len(l) < 253:\n-        r = chr(len(l))\n+        r = struct.pack(\"B\", len(l))\n     elif len(l) < 0x10000:\n-        r = chr(253) + struct.pack(\"<H\", len(l))\n+        r = struct.pack(\"<BH\", 253, len(l))\n     elif len(l) < 0x100000000L:\n-        r = chr(254) + struct.pack(\"<I\", len(l))\n+        r = struct.pack(\"<BI\", 254, len(l))\n     else:\n-        r = chr(255) + struct.pack(\"<Q\", len(l))\n+        r = struct.pack(\"<BQ\", 255, len(l))\n     for sv in l:\n         r += ser_string(sv)\n     return r\n@@ -222,20 +223,20 @@ def deser_int_vector(f):\n def ser_int_vector(l):\n     r = \"\"\n     if len(l) < 253:\n-        r = chr(len(l))\n+        r = struct.pack(\"B\", len(l))\n     elif len(l) < 0x10000:\n-        r = chr(253) + struct.pack(\"<H\", len(l))\n+        r = struct.pack(\"<BH\", 253, len(l))\n     elif len(l) < 0x100000000L:\n-        r = chr(254) + struct.pack(\"<I\", len(l))\n+        r = struct.pack(\"<BI\", 254, len(l))\n     else:\n-        r = chr(255) + struct.pack(\"<Q\", len(l))\n+        r = struct.pack(\"<BQ\", 255, len(l))\n     for i in l:\n         r += struct.pack(\"<i\", i)\n     return r\n \n # Deserialize from a hex string representation (eg from RPC)\n def FromHex(obj, hex_string):\n-    obj.deserialize(cStringIO.StringIO(binascii.unhexlify(hex_string)))\n+    obj.deserialize(BytesIO(binascii.unhexlify(hex_string)))\n     return obj\n \n # Convert a binary-serializable object to hex (eg for submission via RPC)\n@@ -423,7 +424,7 @@ def rehash(self):\n     def calc_sha256(self):\n         if self.sha256 is None:\n             self.sha256 = uint256_from_str(hash256(self.serialize()))\n-        self.hash = hash256(self.serialize())[::-1].encode('hex_codec')\n+        self.hash = encode(hash256(self.serialize())[::-1], 'hex')\n \n     def is_valid(self):\n         self.calc_sha256()\n@@ -492,7 +493,7 @@ def calc_sha256(self):\n             r += struct.pack(\"<I\", self.nBits)\n             r += struct.pack(\"<I\", self.nNonce)\n             self.sha256 = uint256_from_str(hash256(r))\n-            self.hash = hash256(r)[::-1].encode('hex_codec')\n+            self.hash = encode(hash256(r)[::-1], 'hex')\n \n     def rehash(self):\n         self.sha256 = None\n@@ -640,7 +641,7 @@ class msg_version(object):\n     def __init__(self):\n         self.nVersion = MY_VERSION\n         self.nServices = 1\n-        self.nTime = time.time()\n+        self.nTime = int(time.time())\n         self.addrTo = CAddress()\n         self.addrFrom = CAddress()\n         self.nNonce = random.getrandbits(64)\n@@ -985,7 +986,7 @@ class msg_reject(object):\n \n     def __init__(self):\n         self.message = \"\"\n-        self.code = \"\"\n+        self.code = 0\n         self.reason = \"\"\n         self.data = 0L\n \n@@ -1192,43 +1193,46 @@ def handle_write(self):\n             self.sendbuf = self.sendbuf[sent:]\n \n     def got_data(self):\n-        while True:\n-            if len(self.recvbuf) < 4:\n-                return\n-            if self.recvbuf[:4] != self.MAGIC_BYTES[self.network]:\n-                raise ValueError(\"got garbage %s\" % repr(self.recvbuf))\n-            if self.ver_recv < 209:\n-                if len(self.recvbuf) < 4 + 12 + 4:\n-                    return\n-                command = self.recvbuf[4:4+12].split(\"\\x00\", 1)[0]\n-                msglen = struct.unpack(\"<i\", self.recvbuf[4+12:4+12+4])[0]\n-                checksum = None\n-                if len(self.recvbuf) < 4 + 12 + 4 + msglen:\n-                    return\n-                msg = self.recvbuf[4+12+4:4+12+4+msglen]\n-                self.recvbuf = self.recvbuf[4+12+4+msglen:]\n-            else:\n-                if len(self.recvbuf) < 4 + 12 + 4 + 4:\n-                    return\n-                command = self.recvbuf[4:4+12].split(\"\\x00\", 1)[0]\n-                msglen = struct.unpack(\"<i\", self.recvbuf[4+12:4+12+4])[0]\n-                checksum = self.recvbuf[4+12+4:4+12+4+4]\n-                if len(self.recvbuf) < 4 + 12 + 4 + 4 + msglen:\n+        try:\n+            while True:\n+                if len(self.recvbuf) < 4:\n                     return\n-                msg = self.recvbuf[4+12+4+4:4+12+4+4+msglen]\n-                th = sha256(msg)\n-                h = sha256(th)\n-                if checksum != h[:4]:\n-                    raise ValueError(\"got bad checksum \" + repr(self.recvbuf))\n-                self.recvbuf = self.recvbuf[4+12+4+4+msglen:]\n-            if command in self.messagemap:\n-                f = cStringIO.StringIO(msg)\n-                t = self.messagemap[command]()\n-                t.deserialize(f)\n-                self.got_message(t)\n-            else:\n-                self.show_debug_msg(\"Unknown command: '\" + command + \"' \" +\n-                                    repr(msg))\n+                if self.recvbuf[:4] != self.MAGIC_BYTES[self.network]:\n+                    raise ValueError(\"got garbage %s\" % repr(self.recvbuf))\n+                if self.ver_recv < 209:\n+                    if len(self.recvbuf) < 4 + 12 + 4:\n+                        return\n+                    command = self.recvbuf[4:4+12].split(\"\\x00\", 1)[0]\n+                    msglen = struct.unpack(\"<i\", self.recvbuf[4+12:4+12+4])[0]\n+                    checksum = None\n+                    if len(self.recvbuf) < 4 + 12 + 4 + msglen:\n+                        return\n+                    msg = self.recvbuf[4+12+4:4+12+4+msglen]\n+                    self.recvbuf = self.recvbuf[4+12+4+msglen:]\n+                else:\n+                    if len(self.recvbuf) < 4 + 12 + 4 + 4:\n+                        return\n+                    command = self.recvbuf[4:4+12].split(\"\\x00\", 1)[0]\n+                    msglen = struct.unpack(\"<i\", self.recvbuf[4+12:4+12+4])[0]\n+                    checksum = self.recvbuf[4+12+4:4+12+4+4]\n+                    if len(self.recvbuf) < 4 + 12 + 4 + 4 + msglen:\n+                        return\n+                    msg = self.recvbuf[4+12+4+4:4+12+4+4+msglen]\n+                    th = sha256(msg)\n+                    h = sha256(th)\n+                    if checksum != h[:4]:\n+                        raise ValueError(\"got bad checksum \" + repr(self.recvbuf))\n+                    self.recvbuf = self.recvbuf[4+12+4+4+msglen:]\n+                if command in self.messagemap:\n+                    f = BytesIO(msg)\n+                    t = self.messagemap[command]()\n+                    t.deserialize(f)\n+                    self.got_message(t)\n+                else:\n+                    self.show_debug_msg(\"Unknown command: '\" + command + \"' \" +\n+                                        repr(msg))\n+        except Exception as e:\n+            print 'got_data:', repr(e)\n \n     def send_message(self, message, pushbuf=False):\n         if self.state != \"connected\" and not pushbuf:"
      },
      {
        "sha": "4e4c81d3971997f1bc0d77228b1d638c3d4e8a23",
        "filename": "qa/rpc-tests/test_framework/netutil.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff9b4361632cc93f8ab4b5640ed146b1a2037825/qa/rpc-tests/test_framework/netutil.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff9b4361632cc93f8ab4b5640ed146b1a2037825/qa/rpc-tests/test_framework/netutil.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/netutil.py?ref=ff9b4361632cc93f8ab4b5640ed146b1a2037825",
        "patch": "@@ -45,7 +45,7 @@ def _convert_ip_port(array):\n     # convert host from mangled-per-four-bytes form as used by kernel\n     host = binascii.unhexlify(host)\n     host_out = ''\n-    for x in range(0, len(host)/4):\n+    for x in range(0, len(host) // 4):\n         (val,) = struct.unpack('=I', host[x*4:(x+1)*4])\n         host_out += '%08x' % val\n "
      },
      {
        "sha": "12327a6c5f4a9fb3e7e43e9778d5501828c1c33d",
        "filename": "qa/rpc-tests/test_framework/socks5.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff9b4361632cc93f8ab4b5640ed146b1a2037825/qa/rpc-tests/test_framework/socks5.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff9b4361632cc93f8ab4b5640ed146b1a2037825/qa/rpc-tests/test_framework/socks5.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/socks5.py?ref=ff9b4361632cc93f8ab4b5640ed146b1a2037825",
        "patch": "@@ -117,7 +117,7 @@ def handle(self):\n             self.serv.queue.put(cmdin)\n             print('Proxy: ', cmdin)\n             # Fall through to disconnect\n-        except Exception,e:\n+        except Exception as e:\n             traceback.print_exc(file=sys.stderr)\n             self.serv.queue.put(e)\n         finally:"
      },
      {
        "sha": "19ee4726093de4b2770b082abc39a503d7253399",
        "filename": "qa/rpc-tests/test_framework/test_framework.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff9b4361632cc93f8ab4b5640ed146b1a2037825/qa/rpc-tests/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff9b4361632cc93f8ab4b5640ed146b1a2037825/qa/rpc-tests/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/test_framework.py?ref=ff9b4361632cc93f8ab4b5640ed146b1a2037825",
        "patch": "@@ -26,7 +26,7 @@\n     check_json_precision,\n     initialize_chain_clean,\n )\n-from authproxy import AuthServiceProxy, JSONRPCException\n+from .authproxy import AuthServiceProxy, JSONRPCException\n \n \n class BitcoinTestFramework(object):\n@@ -140,7 +140,7 @@ def main(self):\n             print(\"JSONRPC error: \"+e.error['message'])\n             traceback.print_tb(sys.exc_info()[2])\n         except AssertionError as e:\n-            print(\"Assertion failed: \"+e.message)\n+            print(\"Assertion failed: \"+ str(e))\n             traceback.print_tb(sys.exc_info()[2])\n         except Exception as e:\n             print(\"Unexpected exception caught during testing: \"+str(e))"
      },
      {
        "sha": "e9748208cee6148a9c01252dc8f6f7522b6fbfb9",
        "filename": "qa/rpc-tests/wallet.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff9b4361632cc93f8ab4b5640ed146b1a2037825/qa/rpc-tests/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff9b4361632cc93f8ab4b5640ed146b1a2037825/qa/rpc-tests/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet.py?ref=ff9b4361632cc93f8ab4b5640ed146b1a2037825",
        "patch": "@@ -250,15 +250,15 @@ def run_test (self):\n         errorString = \"\"\n         try:\n             txId  = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), \"1f-4\")\n-        except JSONRPCException,e:\n+        except JSONRPCException as e:\n             errorString = e.error['message']\n \n         assert(\"Invalid amount\" in errorString)\n \n         errorString = \"\"\n         try:\n             self.nodes[0].generate(\"2\") #use a string to as block amount parameter must fail because it's not interpreted as amount\n-        except JSONRPCException,e:\n+        except JSONRPCException as e:\n             errorString = e.error['message']\n \n         assert(\"not an integer\" in errorString)"
      }
    ]
  },
  {
    "sha": "c0d9e31611c57ba5ebabc33dbe9bf7edbfff561e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMGQ5ZTMxNjExYzU3YmE1ZWJhYmMzM2RiZTliZjdlZGJmZmY1NjFl",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2016-03-01T14:28:16Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-04-10T09:46:16Z"
      },
      "message": "Tests: make prioritise_transaction.py more robust\n\nGithub-Pull: #7697\nRebased-From: ec143391ef791c15c0d4520befb8863b61bfc2ea",
      "tree": {
        "sha": "f0e57266fec37b678564cee4e12e18c8f8e7eada",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f0e57266fec37b678564cee4e12e18c8f8e7eada"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c0d9e31611c57ba5ebabc33dbe9bf7edbfff561e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0d9e31611c57ba5ebabc33dbe9bf7edbfff561e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c0d9e31611c57ba5ebabc33dbe9bf7edbfff561e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0d9e31611c57ba5ebabc33dbe9bf7edbfff561e/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ff9b4361632cc93f8ab4b5640ed146b1a2037825",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff9b4361632cc93f8ab4b5640ed146b1a2037825",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ff9b4361632cc93f8ab4b5640ed146b1a2037825"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 39,
      "deletions": 8
    },
    "files": [
      {
        "sha": "f8d9063b4ebc0d767bd02ce360006a68b96bf891",
        "filename": "qa/rpc-tests/prioritise_transaction.py",
        "status": "modified",
        "additions": 25,
        "deletions": 8,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0d9e31611c57ba5ebabc33dbe9bf7edbfff561e/qa/rpc-tests/prioritise_transaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0d9e31611c57ba5ebabc33dbe9bf7edbfff561e/qa/rpc-tests/prioritise_transaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/prioritise_transaction.py?ref=c0d9e31611c57ba5ebabc33dbe9bf7edbfff561e",
        "patch": "@@ -9,8 +9,7 @@\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n-from test_framework.mininode import COIN\n-\n+from test_framework.mininode import COIN, MAX_BLOCK_SIZE\n \n class PrioritiseTransactionTest(BitcoinTestFramework):\n \n@@ -29,14 +28,29 @@ def setup_network(self):\n         self.relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n \n     def run_test(self):\n-        utxos = create_confirmed_utxos(self.relayfee, self.nodes[0], 90)\n+        utxo_count = 90\n+        utxos = create_confirmed_utxos(self.relayfee, self.nodes[0], utxo_count)\n         base_fee = self.relayfee*100 # our transactions are smaller than 100kb\n         txids = []\n \n         # Create 3 batches of transactions at 3 different fee rate levels\n+        range_size = utxo_count // 3\n         for i in xrange(3):\n             txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], self.txouts, utxos[30*i:30*i+30], (i+1)*base_fee)\n+            start_range = i * range_size\n+            end_range = start_range + range_size\n+            txids[i] = create_lots_of_big_transactions(self.nodes[0], self.txouts, utxos[start_range:end_range], (i+1)*base_fee)\n+\n+        # Make sure that the size of each group of transactions exceeds\n+        # MAX_BLOCK_SIZE -- otherwise the test needs to be revised to create\n+        # more transactions.\n+        mempool = self.nodes[0].getrawmempool(True)\n+        sizes = [0, 0, 0]\n+        for i in xrange(3):\n+            for j in txids[i]:\n+                assert(j in mempool)\n+                sizes[i] += mempool[j]['size']\n+            assert(sizes[i] > MAX_BLOCK_SIZE) # Fail => raise utxo_count\n \n         # add a fee delta to something in the cheapest bucket and make sure it gets mined\n         # also check that a different entry in the cheapest bucket is NOT mined (lower\n@@ -47,7 +61,7 @@ def run_test(self):\n         self.nodes[0].generate(1)\n \n         mempool = self.nodes[0].getrawmempool()\n-        print \"Assert that prioritised transasction was mined\"\n+        print \"Assert that prioritised transaction was mined\"\n         assert(txids[0][0] not in mempool)\n         assert(txids[0][1] in mempool)\n \n@@ -60,7 +74,7 @@ def run_test(self):\n         assert(high_fee_tx != None)\n \n         # Add a prioritisation before a tx is in the mempool (de-prioritising a\n-        # high-fee transaction).\n+        # high-fee transaction so that it's now low fee).\n         self.nodes[0].prioritisetransaction(high_fee_tx, -1e15, -int(2*base_fee*COIN))\n \n         # Add everything back to mempool\n@@ -70,8 +84,11 @@ def run_test(self):\n         mempool = self.nodes[0].getrawmempool()\n         assert(high_fee_tx in mempool)\n \n-        # Now verify the high feerate transaction isn't mined.\n-        self.nodes[0].generate(5)\n+        # Now verify the modified-high feerate transaction isn't mined before\n+        # the other high fee transactions. Keep mining until our mempool has\n+        # decreased by all the high fee size that we calculated above.\n+        while (self.nodes[0].getmempoolinfo()['bytes'] > sizes[0] + sizes[1]):\n+            self.nodes[0].generate(1)\n \n         # High fee transaction should not have been mined, but other high fee rate\n         # transactions should have been."
      },
      {
        "sha": "5b9ce890ba754136c5f2602f7d56ae913bf60666",
        "filename": "qa/rpc-tests/test_framework/util.py",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0d9e31611c57ba5ebabc33dbe9bf7edbfff561e/qa/rpc-tests/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0d9e31611c57ba5ebabc33dbe9bf7edbfff561e/qa/rpc-tests/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/util.py?ref=c0d9e31611c57ba5ebabc33dbe9bf7edbfff561e",
        "patch": "@@ -427,6 +427,8 @@ def assert_is_hash_string(string, length=64):\n def satoshi_round(amount):\n     return  Decimal(amount).quantize(Decimal('0.00000001'), rounding=ROUND_DOWN)\n \n+# Helper to create at least \"count\" utxos\n+# Pass in a fee that is sufficient for relay and mining new transactions.\n def create_confirmed_utxos(fee, node, count):\n     node.generate(int(0.5*count)+101)\n     utxos = node.listunspent()\n@@ -454,6 +456,8 @@ def create_confirmed_utxos(fee, node, count):\n     assert(len(utxos) >= count)\n     return utxos\n \n+# Create large OP_RETURN txouts that can be appended to a transaction\n+# to make it large (helper for constructing large transactions).\n def gen_return_txouts():\n     # Some pre-processing to create a bunch of OP_RETURN txouts to insert into transactions we create\n     # So we have big transactions (and therefore can't fit very many into each block)\n@@ -472,6 +476,16 @@ def gen_return_txouts():\n         txouts = txouts + script_pubkey\n     return txouts\n \n+def create_tx(node, coinbase, to_address, amount):\n+    inputs = [{ \"txid\" : coinbase, \"vout\" : 0}]\n+    outputs = { to_address : amount }\n+    rawtx = node.createrawtransaction(inputs, outputs)\n+    signresult = node.signrawtransaction(rawtx)\n+    assert_equal(signresult[\"complete\"], True)\n+    return signresult[\"hex\"]\n+\n+# Create a spend of each passed-in utxo, splicing in \"txouts\" to each raw\n+# transaction to make it large.  See gen_return_txouts() above.\n def create_lots_of_big_transactions(node, txouts, utxos, fee):\n     addr = node.getnewaddress()\n     txids = []"
      }
    ]
  },
  {
    "sha": "f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMWYxYjgyMDMzMjcxZTFmOGFhM2Q4NGY4ZTRmOGNjYzk4N2U2NTUz",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-04-10T14:54:28Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-04-15T07:55:12Z"
      },
      "message": "[qa] py2: Unfiddle strings into bytes explicitly\n\nGithub-Pull: #7853\nRebased-From: faa41ee204124da19dcf1e5b8a3aef1e216bf5e6, fa7abe0a00464e6aa88d55c63dba40878bbe5b79\n\n Conflicts:\n\tqa/rpc-tests/invalidtxrequest.py\n\tqa/rpc-tests/p2p-feefilter.py\n\tqa/rpc-tests/proxy_test.py\n\tqa/rpc-tests/test_framework/mininode.py\n\tqa/rpc-tests/test_framework/netutil.py\n\tsrc/test/bctest.py",
      "tree": {
        "sha": "ea8a2d220e76c9765c7b6a9917cffbf9a13db660",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ea8a2d220e76c9765c7b6a9917cffbf9a13db660"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c0d9e31611c57ba5ebabc33dbe9bf7edbfff561e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0d9e31611c57ba5ebabc33dbe9bf7edbfff561e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c0d9e31611c57ba5ebabc33dbe9bf7edbfff561e"
      }
    ],
    "stats": {
      "total": 409,
      "additions": 200,
      "deletions": 209
    },
    "files": [
      {
        "sha": "5cb78e7a404ee833d3b89bb722c021e1fff9354e",
        "filename": "qa/rpc-tests/bip65-cltv-p2p.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553/qa/rpc-tests/bip65-cltv-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553/qa/rpc-tests/bip65-cltv-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip65-cltv-p2p.py?ref=f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553",
        "patch": "@@ -10,7 +10,6 @@\n from test_framework.blocktools import create_coinbase, create_block\n from test_framework.comptool import TestInstance, TestManager\n from test_framework.script import CScript, OP_1NEGATE, OP_CHECKLOCKTIMEVERIFY, OP_DROP\n-from binascii import unhexlify\n from io import BytesIO\n import time\n \n@@ -60,7 +59,7 @@ def create_transaction(self, node, coinbase, to_address, amount):\n         rawtx = node.createrawtransaction(inputs, outputs)\n         signresult = node.signrawtransaction(rawtx)\n         tx = CTransaction()\n-        f = BytesIO(unhexlify(signresult['hex']))\n+        f = BytesIO(hex_str_to_bytes(signresult['hex']))\n         tx.deserialize(f)\n         return tx\n "
      },
      {
        "sha": "bcd44012f536f56b42c32f23a5185a206e79738f",
        "filename": "qa/rpc-tests/bip68-112-113-p2p.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553/qa/rpc-tests/bip68-112-113-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553/qa/rpc-tests/bip68-112-113-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip68-112-113-p2p.py?ref=f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553",
        "patch": "@@ -10,7 +10,6 @@\n from test_framework.blocktools import create_coinbase, create_block\n from test_framework.comptool import TestInstance, TestManager\n from test_framework.script import *\n-from binascii import unhexlify\n from io import BytesIO\n import time\n \n@@ -119,15 +118,15 @@ def create_transaction(self, node, txid, to_address, amount):\n         outputs = { to_address : amount }\n         rawtx = node.createrawtransaction(inputs, outputs)\n         tx = CTransaction()\n-        f = BytesIO(unhexlify(rawtx))\n+        f = BytesIO(hex_str_to_bytes(rawtx))\n         tx.deserialize(f)\n         return tx\n \n     def sign_transaction(self, node, unsignedtx):\n         rawtx = ToHex(unsignedtx)\n         signresult = node.signrawtransaction(rawtx)\n         tx = CTransaction()\n-        f = BytesIO(unhexlify(signresult['hex']))\n+        f = BytesIO(hex_str_to_bytes(signresult['hex']))\n         tx.deserialize(f)\n         return tx\n "
      },
      {
        "sha": "d131eed92dc147dc514d0f591150296cec82f8e2",
        "filename": "qa/rpc-tests/bip9-softforks.py",
        "status": "modified",
        "additions": 3,
        "deletions": 6,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553/qa/rpc-tests/bip9-softforks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553/qa/rpc-tests/bip9-softforks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip9-softforks.py?ref=f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553",
        "patch": "@@ -10,7 +10,6 @@\n from test_framework.blocktools import create_coinbase, create_block\n from test_framework.comptool import TestInstance, TestManager\n from test_framework.script import CScript, OP_1NEGATE, OP_NOP3, OP_DROP\n-from binascii import hexlify, unhexlify\n from io import BytesIO\n import time\n import itertools\n@@ -30,7 +29,6 @@\n '''\n \n \n-\n class BIP9SoftForksTest(ComparisonTestFramework):\n \n     def __init__(self):\n@@ -53,15 +51,15 @@ def create_transaction(self, node, coinbase, to_address, amount):\n         outputs = { to_address : amount }\n         rawtx = node.createrawtransaction(inputs, outputs)\n         tx = CTransaction()\n-        f = BytesIO(unhexlify(rawtx))\n+        f = BytesIO(hex_str_to_bytes(rawtx))\n         tx.deserialize(f)\n         tx.nVersion = 2\n         return tx\n \n     def sign_transaction(self, node, tx):\n-        signresult = node.signrawtransaction(hexlify(tx.serialize()))\n+        signresult = node.signrawtransaction(bytes_to_hex_str(tx.serialize()))\n         tx = CTransaction()\n-        f = BytesIO(unhexlify(signresult['hex']))\n+        f = BytesIO(hex_str_to_bytes(signresult['hex']))\n         tx.deserialize(f)\n         return tx\n \n@@ -184,7 +182,6 @@ def test_BIP(self, bipName, activated_version, invalidate, invalidatePostSignatu\n         NetworkThread().start() # Start up network handling in another thread\n \n \n-\n     def get_tests(self):\n         for test in itertools.chain(\n                 self.test_BIP('csv', 536870913, self.sequence_lock_invalidate, self.donothing),"
      },
      {
        "sha": "b1db5ba4afb57c12ca305fa6d5818dc8c6a84270",
        "filename": "qa/rpc-tests/bipdersig-p2p.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553/qa/rpc-tests/bipdersig-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553/qa/rpc-tests/bipdersig-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bipdersig-p2p.py?ref=f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553",
        "patch": "@@ -10,7 +10,6 @@\n from test_framework.blocktools import create_coinbase, create_block\n from test_framework.comptool import TestInstance, TestManager\n from test_framework.script import CScript\n-from binascii import unhexlify\n from io import BytesIO\n import time\n \n@@ -25,7 +24,7 @@ def unDERify(tx):\n     newscript = []\n     for i in scriptSig:\n         if (len(newscript) == 0):\n-            newscript.append(i[0:-1] + '\\0' + i[-1])\n+            newscript.append(i[0:-1] + b'\\0' + i[-1:])\n         else:\n             newscript.append(i)\n     tx.vin[0].scriptSig = CScript(newscript)\n@@ -68,7 +67,7 @@ def create_transaction(self, node, coinbase, to_address, amount):\n         rawtx = node.createrawtransaction(inputs, outputs)\n         signresult = node.signrawtransaction(rawtx)\n         tx = CTransaction()\n-        f = BytesIO(unhexlify(signresult['hex']))\n+        f = BytesIO(hex_str_to_bytes(signresult['hex']))\n         tx.deserialize(f)\n         return tx\n "
      },
      {
        "sha": "578844f2c5bb0a238ad55dec7a9f36da5154f0ef",
        "filename": "qa/rpc-tests/decodescript.py",
        "status": "modified",
        "additions": 10,
        "deletions": 12,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553/qa/rpc-tests/decodescript.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553/qa/rpc-tests/decodescript.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/decodescript.py?ref=f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553",
        "patch": "@@ -6,7 +6,6 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n from test_framework.mininode import *\n-from binascii import hexlify, unhexlify\n from io import BytesIO\n \n class DecodeScriptTest(BitcoinTestFramework):\n@@ -131,7 +130,7 @@ def decoderawtransaction_asm_sighashtype(self):\n         assert_equal('OP_DUP OP_HASH160 dc863734a218bfe83ef770ee9d41a27f824a6e56 OP_EQUALVERIFY OP_CHECKSIG', rpc_result['vout'][0]['scriptPubKey']['asm'])\n         assert_equal('OP_HASH160 2a5edea39971049a540474c6a99edf0aa4074c58 OP_EQUAL', rpc_result['vout'][1]['scriptPubKey']['asm'])\n         txSave = CTransaction()\n-        txSave.deserialize(BytesIO(unhexlify(tx)))\n+        txSave.deserialize(BytesIO(hex_str_to_bytes(tx)))\n \n         # make sure that a specifically crafted op_return value will not pass all the IsDERSignature checks and then get decoded as a sighash type\n         tx = '01000000015ded05872fdbda629c7d3d02b194763ce3b9b1535ea884e3c8e765d42e316724020000006b48304502204c10d4064885c42638cbff3585915b322de33762598321145ba033fc796971e2022100bb153ad3baa8b757e30a2175bd32852d2e1cb9080f84d7e32fcdfd667934ef1b012103163c0ff73511ea1743fb5b98384a2ff09dd06949488028fd819f4d83f56264efffffffff0200000000000000000b6a0930060201000201000180380100000000001976a9141cabd296e753837c086da7a45a6c2fe0d49d7b7b88ac00000000'\n@@ -147,7 +146,7 @@ def decoderawtransaction_asm_sighashtype(self):\n         # some more full transaction tests of varying specific scriptSigs. used instead of\n         # tests in decodescript_script_sig because the decodescript RPC is specifically\n         # for working on scriptPubKeys (argh!).\n-        push_signature = hexlify(txSave.vin[0].scriptSig)[2:(0x48*2+4)]\n+        push_signature = bytes_to_hex_str(txSave.vin[0].scriptSig)[2:(0x48*2+4)]\n         signature = push_signature[2:]\n         der_signature = signature[:-2]\n         signature_sighash_decoded = der_signature + '[ALL]'\n@@ -156,25 +155,24 @@ def decoderawtransaction_asm_sighashtype(self):\n         signature_2_sighash_decoded = der_signature + '[NONE|ANYONECANPAY]'\n \n         # 1) P2PK scriptSig\n-        txSave.vin[0].scriptSig = unhexlify(push_signature)\n-        rpc_result = self.nodes[0].decoderawtransaction(hexlify(txSave.serialize()))\n+        txSave.vin[0].scriptSig = hex_str_to_bytes(push_signature)\n+        rpc_result = self.nodes[0].decoderawtransaction(bytes_to_hex_str(txSave.serialize()))\n         assert_equal(signature_sighash_decoded, rpc_result['vin'][0]['scriptSig']['asm'])\n \n         # make sure that the sighash decodes come out correctly for a more complex / lesser used case.\n-        txSave.vin[0].scriptSig = unhexlify(push_signature_2)\n-        rpc_result = self.nodes[0].decoderawtransaction(hexlify(txSave.serialize()))\n+        txSave.vin[0].scriptSig = hex_str_to_bytes(push_signature_2)\n+        rpc_result = self.nodes[0].decoderawtransaction(bytes_to_hex_str(txSave.serialize()))\n         assert_equal(signature_2_sighash_decoded, rpc_result['vin'][0]['scriptSig']['asm'])\n \n         # 2) multisig scriptSig\n-        txSave.vin[0].scriptSig = unhexlify('00' + push_signature + push_signature_2)\n-        rpc_result = self.nodes[0].decoderawtransaction(hexlify(txSave.serialize()))\n+        txSave.vin[0].scriptSig = hex_str_to_bytes('00' + push_signature + push_signature_2)\n+        rpc_result = self.nodes[0].decoderawtransaction(bytes_to_hex_str(txSave.serialize()))\n         assert_equal('0 ' + signature_sighash_decoded + ' ' + signature_2_sighash_decoded, rpc_result['vin'][0]['scriptSig']['asm'])\n \n         # 3) test a scriptSig that contains more than push operations.\n         # in fact, it contains an OP_RETURN with data specially crafted to cause improper decode if the code does not catch it.\n-        txSave.vin[0].scriptSig = unhexlify('6a143011020701010101010101020601010101010101')\n-        rpc_result = self.nodes[0].decoderawtransaction(hexlify(txSave.serialize()))\n-        print(hexlify('636174'))\n+        txSave.vin[0].scriptSig = hex_str_to_bytes('6a143011020701010101010101020601010101010101')\n+        rpc_result = self.nodes[0].decoderawtransaction(bytes_to_hex_str(txSave.serialize()))\n         assert_equal('OP_RETURN 3011020701010101010101020601010101010101', rpc_result['vin'][0]['scriptSig']['asm'])\n \n     def run_test(self):"
      },
      {
        "sha": "4492ea398f4bad40c1f8cbe15f35e9b59776ee6f",
        "filename": "qa/rpc-tests/fundrawtransaction.py",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553/qa/rpc-tests/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553/qa/rpc-tests/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/fundrawtransaction.py?ref=f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553",
        "patch": "@@ -148,7 +148,6 @@ def run_test(self):\n         assert_equal(fee + totalOut, utx['amount']) #compare vin total and totalout+fee\n \n \n-\n         #####################################################################\n         # test a fundrawtransaction with which will not get a change output #\n         #####################################################################\n@@ -178,7 +177,6 @@ def run_test(self):\n         assert_equal(fee + totalOut, utx['amount']) #compare vin total and totalout+fee\n \n \n-\n         #########################################################################\n         # test a fundrawtransaction with a VIN smaller than the required amount #\n         #########################################################################\n@@ -484,7 +482,6 @@ def run_test(self):\n         assert_equal(oldBalance+Decimal('51.10000000'), self.nodes[0].getbalance())\n \n \n-\n         ###############################################\n         # multiple (~19) inputs tx test | Compare fee #\n         ###############################################"
      },
      {
        "sha": "07bfe69c6d869a0e0760b930419c602cd72b0323",
        "filename": "qa/rpc-tests/getblocktemplate_proposals.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553/qa/rpc-tests/getblocktemplate_proposals.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553/qa/rpc-tests/getblocktemplate_proposals.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/getblocktemplate_proposals.py?ref=f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553",
        "patch": "@@ -130,7 +130,7 @@ def run_test(self):\n \n         # Test 5: Add an invalid tx to the end (non-duplicate)\n         txlist.append(bytearray(txlist[0]))\n-        txlist[-1][4+1] = b'\\xff'\n+        txlist[-1][4+1] = 0xff\n         assert_template(node, tmpl, txlist, 'bad-txns-inputs-missingorspent')\n         txlist.pop()\n "
      },
      {
        "sha": "ce62fef46b8d4c2ef4c78ac55c4ac7e26a8277e1",
        "filename": "qa/rpc-tests/httpbasics.py",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553/qa/rpc-tests/httpbasics.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553/qa/rpc-tests/httpbasics.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/httpbasics.py?ref=f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553",
        "patch": "@@ -9,7 +9,6 @@\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n-import base64\n \n try:\n     import http.client as httplib\n@@ -31,7 +30,7 @@ def run_test(self):\n         #################################################\n         url = urlparse.urlparse(self.nodes[0].url)\n         authpair = url.username + ':' + url.password\n-        headers = {\"Authorization\": \"Basic \" + base64.b64encode(authpair)}\n+        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpair)}\n \n         conn = httplib.HTTPConnection(url.hostname, url.port)\n         conn.connect()\n@@ -48,7 +47,7 @@ def run_test(self):\n         conn.close()\n \n         #same should be if we add keep-alive because this should be the std. behaviour\n-        headers = {\"Authorization\": \"Basic \" + base64.b64encode(authpair), \"Connection\": \"keep-alive\"}\n+        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpair), \"Connection\": \"keep-alive\"}\n \n         conn = httplib.HTTPConnection(url.hostname, url.port)\n         conn.connect()\n@@ -65,7 +64,7 @@ def run_test(self):\n         conn.close()\n \n         #now do the same with \"Connection: close\"\n-        headers = {\"Authorization\": \"Basic \" + base64.b64encode(authpair), \"Connection\":\"close\"}\n+        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpair), \"Connection\":\"close\"}\n \n         conn = httplib.HTTPConnection(url.hostname, url.port)\n         conn.connect()\n@@ -77,7 +76,7 @@ def run_test(self):\n         #node1 (2nd node) is running with disabled keep-alive option\n         urlNode1 = urlparse.urlparse(self.nodes[1].url)\n         authpair = urlNode1.username + ':' + urlNode1.password\n-        headers = {\"Authorization\": \"Basic \" + base64.b64encode(authpair)}\n+        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpair)}\n \n         conn = httplib.HTTPConnection(urlNode1.hostname, urlNode1.port)\n         conn.connect()\n@@ -88,7 +87,7 @@ def run_test(self):\n         #node2 (third node) is running with standard keep-alive parameters which means keep-alive is on\n         urlNode2 = urlparse.urlparse(self.nodes[2].url)\n         authpair = urlNode2.username + ':' + urlNode2.password\n-        headers = {\"Authorization\": \"Basic \" + base64.b64encode(authpair)}\n+        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpair)}\n \n         conn = httplib.HTTPConnection(urlNode2.hostname, urlNode2.port)\n         conn.connect()"
      },
      {
        "sha": "63fe5eae98b4f987f3d3c65ba4601b8af3cdf595",
        "filename": "qa/rpc-tests/invalidblockrequest.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553/qa/rpc-tests/invalidblockrequest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553/qa/rpc-tests/invalidblockrequest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/invalidblockrequest.py?ref=f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553",
        "patch": "@@ -77,9 +77,9 @@ def get_tests(self):\n         block2 = create_block(self.tip, create_coinbase(height), self.block_time)\n         self.block_time += 1\n \n-        # chr(81) is OP_TRUE\n-        tx1 = create_transaction(self.block1.vtx[0], 0, chr(81), 50 * COIN)\n-        tx2 = create_transaction(tx1, 0, chr(81), 50 * COIN)\n+        # b'0x51' is OP_TRUE\n+        tx1 = create_transaction(self.block1.vtx[0], 0, b'\\x51', 50 * COIN)\n+        tx2 = create_transaction(tx1, 0, b'\\x51', 50 * COIN)\n \n         block2.vtx.extend([tx1, tx2])\n         block2.hashMerkleRoot = block2.calc_merkle_root()\n@@ -95,7 +95,7 @@ def get_tests(self):\n         assert(block2_orig.vtx != block2.vtx)\n \n         self.tip = block2.sha256\n-        yield TestInstance([[block2, RejectResult(16,'bad-txns-duplicate')], [block2_orig, True]])\n+        yield TestInstance([[block2, RejectResult(16, b'bad-txns-duplicate')], [block2_orig, True]])\n         height += 1\n \n         '''\n@@ -110,7 +110,7 @@ def get_tests(self):\n         block3.rehash()\n         block3.solve()\n \n-        yield TestInstance([[block3, RejectResult(16,'bad-cb-amount')]])\n+        yield TestInstance([[block3, RejectResult(16, b'bad-cb-amount')]])\n \n \n if __name__ == '__main__':"
      },
      {
        "sha": "45ae78a48db5af49524a3283bd348e85508a5439",
        "filename": "qa/rpc-tests/invalidtxrequest.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553/qa/rpc-tests/invalidtxrequest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553/qa/rpc-tests/invalidtxrequest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/invalidtxrequest.py?ref=f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553",
        "patch": "@@ -61,10 +61,10 @@ def get_tests(self):\n             height += 1\n         yield test\n \n-        # chr(100) is OP_NOTIF\n+        # b'\\x64' is OP_NOTIF\n         # Transaction will be rejected with code 16 (REJECT_INVALID)\n-        tx1 = create_transaction(self.block1.vtx[0], 0, chr(100), 50*COIN)\n-        yield TestInstance([[tx1, RejectResult(16, 'mandatory-script-verify-flag-failed')]])\n+        tx1 = create_transaction(self.block1.vtx[0], 0, b'\\x64', 50 * COIN)\n+        yield TestInstance([[tx1, RejectResult(16, b'mandatory-script-verify-flag-failed')]])\n \n         # TODO: test further transactions...\n "
      },
      {
        "sha": "d0e0f25a13522bebc5e919c857ebc68e6f543050",
        "filename": "qa/rpc-tests/listtransactions.py",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553/qa/rpc-tests/listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553/qa/rpc-tests/listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/listtransactions.py?ref=f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553",
        "patch": "@@ -9,11 +9,10 @@\n from test_framework.util import *\n from test_framework.mininode import CTransaction, COIN\n from io import BytesIO\n-import binascii\n \n def txFromHex(hexstring):\n     tx = CTransaction()\n-    f = BytesIO(binascii.unhexlify(hexstring))\n+    f = BytesIO(hex_str_to_bytes(hexstring))\n     tx.deserialize(f)\n     return tx\n \n@@ -162,7 +161,7 @@ def get_unconfirmed_utxo_entry(node, txid_to_match):\n         tx3 = self.nodes[0].createrawtransaction(inputs, outputs)\n         tx3_modified = txFromHex(tx3)\n         tx3_modified.vin[0].nSequence = 0\n-        tx3 = binascii.hexlify(tx3_modified.serialize()).decode('utf-8')\n+        tx3 = bytes_to_hex_str(tx3_modified.serialize())\n         tx3_signed = self.nodes[0].signrawtransaction(tx3)['hex']\n         txid_3 = self.nodes[0].sendrawtransaction(tx3_signed)\n \n@@ -188,7 +187,7 @@ def get_unconfirmed_utxo_entry(node, txid_to_match):\n         # Replace tx3, and check that tx4 becomes unknown\n         tx3_b = tx3_modified\n         tx3_b.vout[0].nValue -= int(Decimal(\"0.004\") * COIN) # bump the fee\n-        tx3_b = binascii.hexlify(tx3_b.serialize()).decode('utf-8')\n+        tx3_b = bytes_to_hex_str(tx3_b.serialize())\n         tx3_b_signed = self.nodes[0].signrawtransaction(tx3_b)['hex']\n         txid_3b = self.nodes[0].sendrawtransaction(tx3_b_signed, True)\n         assert(is_opt_in(self.nodes[0], txid_3b))"
      },
      {
        "sha": "afb18cf3da20db7c850e0b361e98e298d0218a22",
        "filename": "qa/rpc-tests/multi_rpc.py",
        "status": "modified",
        "additions": 6,
        "deletions": 7,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553/qa/rpc-tests/multi_rpc.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553/qa/rpc-tests/multi_rpc.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/multi_rpc.py?ref=f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553",
        "patch": "@@ -53,7 +53,7 @@ def run_test(self):\n         password2 = \"8/F3uMDw4KSEbw96U3CA1C4X05dkHDN2BPFjTgZW4KI=\"\n         authpairnew = \"rt:\"+password\n \n-        headers = {\"Authorization\": \"Basic \" + base64.b64encode(authpair)}\n+        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpair)}\n \n         conn = httplib.HTTPConnection(url.hostname, url.port)\n         conn.connect()\n@@ -63,7 +63,7 @@ def run_test(self):\n         conn.close()\n         \n         #Use new authpair to confirm both work\n-        headers = {\"Authorization\": \"Basic \" + base64.b64encode(authpairnew)}\n+        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n \n         conn = httplib.HTTPConnection(url.hostname, url.port)\n         conn.connect()\n@@ -74,7 +74,7 @@ def run_test(self):\n \n         #Wrong login name with rt's password\n         authpairnew = \"rtwrong:\"+password\n-        headers = {\"Authorization\": \"Basic \" + base64.b64encode(authpairnew)}\n+        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n \n         conn = httplib.HTTPConnection(url.hostname, url.port)\n         conn.connect()\n@@ -85,7 +85,7 @@ def run_test(self):\n \n         #Wrong password for rt\n         authpairnew = \"rt:\"+password+\"wrong\"\n-        headers = {\"Authorization\": \"Basic \" + base64.b64encode(authpairnew)}\n+        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n \n         conn = httplib.HTTPConnection(url.hostname, url.port)\n         conn.connect()\n@@ -96,7 +96,7 @@ def run_test(self):\n \n         #Correct for rt2\n         authpairnew = \"rt2:\"+password2\n-        headers = {\"Authorization\": \"Basic \" + base64.b64encode(authpairnew)}\n+        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n \n         conn = httplib.HTTPConnection(url.hostname, url.port)\n         conn.connect()\n@@ -107,7 +107,7 @@ def run_test(self):\n \n         #Wrong password for rt2\n         authpairnew = \"rt2:\"+password2+\"wrong\"\n-        headers = {\"Authorization\": \"Basic \" + base64.b64encode(authpairnew)}\n+        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n \n         conn = httplib.HTTPConnection(url.hostname, url.port)\n         conn.connect()\n@@ -117,6 +117,5 @@ def run_test(self):\n         conn.close()\n \n \n-\n if __name__ == '__main__':\n     HTTPBasicsTest ().main ()"
      },
      {
        "sha": "f3ed806053100a40486edd15de3c0f7d13fdc63a",
        "filename": "qa/rpc-tests/p2p-fullblocktest.py",
        "status": "modified",
        "additions": 16,
        "deletions": 16,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553/qa/rpc-tests/p2p-fullblocktest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553/qa/rpc-tests/p2p-fullblocktest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-fullblocktest.py?ref=f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553",
        "patch": "@@ -34,7 +34,7 @@ def __init__(self):\n         self.num_nodes = 1\n         self.block_heights = {}\n         self.coinbase_key = CECKey()\n-        self.coinbase_key.set_secretbytes(bytes(\"horsebattery\"))\n+        self.coinbase_key.set_secretbytes(b\"horsebattery\")\n         self.coinbase_pubkey = self.coinbase_key.get_pubkey()\n         self.block_time = int(time.time())+1\n         self.tip = None\n@@ -71,7 +71,7 @@ def next_block(self, number, spend=None, additional_coinbase_value=0, script=Non\n         block = create_block(base_block_hash, coinbase, self.block_time)\n         if (spend != None):\n             tx = CTransaction()\n-            tx.vin.append(CTxIn(COutPoint(spend.tx.sha256, spend.n), \"\", 0xffffffff))  # no signature yet\n+            tx.vin.append(CTxIn(COutPoint(spend.tx.sha256, spend.n), b\"\", 0xffffffff))  # no signature yet\n             # This copies the java comparison tool testing behavior: the first\n             # txout has a garbage scriptPubKey, \"to make sure we're not\n             # pre-verifying too much\" (?)\n@@ -81,7 +81,7 @@ def next_block(self, number, spend=None, additional_coinbase_value=0, script=Non\n             else:\n                 tx.vout.append(CTxOut(1, script))\n             # Now sign it if necessary\n-            scriptSig = \"\"\n+            scriptSig = b\"\"\n             scriptPubKey = bytearray(spend.tx.vout[spend.n].scriptPubKey)\n             if (scriptPubKey[0] == OP_TRUE):  # looks like an anyone-can-spend\n                 scriptSig = CScript([OP_TRUE])\n@@ -226,7 +226,7 @@ def update_block(block_number, new_transactions):\n         #                      \\-> b3 (1) -> b4 (2)\n         tip(6)\n         block(9, spend=out4, additional_coinbase_value=1)\n-        yield rejected(RejectResult(16, 'bad-cb-amount'))\n+        yield rejected(RejectResult(16, b'bad-cb-amount'))\n \n         \n         # Create a fork that ends in a block with too much fee (the one that causes the reorg)\n@@ -238,7 +238,7 @@ def update_block(block_number, new_transactions):\n         yield rejected()\n \n         block(11, spend=out4, additional_coinbase_value=1)\n-        yield rejected(RejectResult(16, 'bad-cb-amount'))\n+        yield rejected(RejectResult(16, b'bad-cb-amount'))\n \n \n         # Try again, but with a valid fork first\n@@ -280,7 +280,7 @@ def update_block(block_number, new_transactions):\n         out6 = get_spendable_output()\n         too_many_checksigs = CScript([OP_CHECKSIG] * (1000000 // 50))\n         block(16, spend=out6, script=too_many_checksigs)\n-        yield rejected(RejectResult(16, 'bad-blk-sigops'))\n+        yield rejected(RejectResult(16, b'bad-blk-sigops'))\n \n \n         # Attempt to spend a transaction created on a different fork\n@@ -289,7 +289,7 @@ def update_block(block_number, new_transactions):\n         #                      \\-> b3 (1) -> b4 (2)\n         tip(15)\n         block(17, spend=txout_b3)\n-        yield rejected(RejectResult(16, 'bad-txns-inputs-missingorspent'))\n+        yield rejected(RejectResult(16, b'bad-txns-inputs-missingorspent'))\n \n         # Attempt to spend a transaction created on a different fork (on a fork this time)\n         #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6  (3)\n@@ -310,7 +310,7 @@ def update_block(block_number, new_transactions):\n         tip(15)\n         out7 = get_spendable_output()\n         block(20, spend=out7)\n-        yield rejected(RejectResult(16, 'bad-txns-premature-spend-of-coinbase'))\n+        yield rejected(RejectResult(16, b'bad-txns-premature-spend-of-coinbase'))\n \n         # Attempt to spend a coinbase at depth too low (on a fork this time)\n         #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6  (3)\n@@ -334,7 +334,7 @@ def update_block(block_number, new_transactions):\n         old_hash = b23.sha256\n         tx = CTransaction()\n         script_length = MAX_BLOCK_SIZE - len(b23.serialize()) - 69\n-        script_output = CScript([chr(0)*script_length])\n+        script_output = CScript([b'\\x00' * script_length])\n         tx.vout.append(CTxOut(0, script_output))\n         tx.vin.append(CTxIn(COutPoint(b23.vtx[1].sha256, 1)))\n         b23 = update_block(23, [tx])\n@@ -346,11 +346,11 @@ def update_block(block_number, new_transactions):\n         tip(15)\n         b24 = block(24, spend=out6)\n         script_length = MAX_BLOCK_SIZE - len(b24.serialize()) - 69\n-        script_output = CScript([chr(0)*(script_length+1)])\n+        script_output = CScript([b'\\x00' * (script_length+1)])\n         tx.vout = [CTxOut(0, script_output)]\n         b24 = update_block(24, [tx])\n         assert_equal(len(b24.serialize()), MAX_BLOCK_SIZE+1)\n-        yield rejected(RejectResult(16, 'bad-blk-length'))\n+        yield rejected(RejectResult(16, b'bad-blk-length'))\n \n         b25 = block(25, spend=out7)\n         yield rejected()\n@@ -362,12 +362,12 @@ def update_block(block_number, new_transactions):\n         #                      \\-> b3 (1) -> b4 (2)\n         tip(15)\n         b26 = block(26, spend=out6)\n-        b26.vtx[0].vin[0].scriptSig = chr(0)\n+        b26.vtx[0].vin[0].scriptSig = b'\\x00'\n         b26.vtx[0].rehash()\n         # update_block causes the merkle root to get updated, even with no new\n         # transactions, and updates the required state.\n         b26 = update_block(26, [])\n-        yield rejected(RejectResult(16, 'bad-cb-length'))\n+        yield rejected(RejectResult(16, b'bad-cb-length'))\n \n         # Extend the b26 chain to make sure bitcoind isn't accepting b26\n         b27 = block(27, spend=out7)\n@@ -376,10 +376,10 @@ def update_block(block_number, new_transactions):\n         # Now try a too-large-coinbase script\n         tip(15)\n         b28 = block(28, spend=out6)\n-        b28.vtx[0].vin[0].scriptSig = chr(0)*101\n+        b28.vtx[0].vin[0].scriptSig = b'\\x00' * 101\n         b28.vtx[0].rehash()\n         b28 = update_block(28, [])\n-        yield rejected(RejectResult(16, 'bad-cb-length'))\n+        yield rejected(RejectResult(16, b'bad-cb-length'))\n \n         # Extend the b28 chain to make sure bitcoind isn't accepted b28\n         b29 = block(29, spend=out7)\n@@ -391,7 +391,7 @@ def update_block(block_number, new_transactions):\n         # b30 has a max-sized coinbase scriptSig.\n         tip(23)\n         b30 = block(30)\n-        b30.vtx[0].vin[0].scriptSig = chr(0)*100\n+        b30.vtx[0].vin[0].scriptSig = b'\\x00' * 100\n         b30.vtx[0].rehash()\n         b30 = update_block(30, [])\n         yield accepted()"
      },
      {
        "sha": "e94111ac79cf9bae2e9f42020b74cd1839d4f82a",
        "filename": "qa/rpc-tests/proxy_test.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553/qa/rpc-tests/proxy_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553/qa/rpc-tests/proxy_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/proxy_test.py?ref=f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553",
        "patch": "@@ -77,7 +77,7 @@ def node_test(self, node, proxies, auth, test_onion=True):\n         assert(isinstance(cmd, Socks5Command))\n         # Note: bitcoind's SOCKS5 implementation only sends atyp DOMAINNAME, even if connecting directly to IPv4/IPv6\n         assert_equal(cmd.atyp, AddressType.DOMAINNAME)\n-        assert_equal(cmd.addr, \"15.61.23.23\")\n+        assert_equal(cmd.addr, b\"15.61.23.23\")\n         assert_equal(cmd.port, 1234)\n         if not auth:\n             assert_equal(cmd.username, None)\n@@ -90,7 +90,7 @@ def node_test(self, node, proxies, auth, test_onion=True):\n         assert(isinstance(cmd, Socks5Command))\n         # Note: bitcoind's SOCKS5 implementation only sends atyp DOMAINNAME, even if connecting directly to IPv4/IPv6\n         assert_equal(cmd.atyp, AddressType.DOMAINNAME)\n-        assert_equal(cmd.addr, \"1233:3432:2434:2343:3234:2345:6546:4534\")\n+        assert_equal(cmd.addr, b\"1233:3432:2434:2343:3234:2345:6546:4534\")\n         assert_equal(cmd.port, 5443)\n         if not auth:\n             assert_equal(cmd.username, None)\n@@ -103,7 +103,7 @@ def node_test(self, node, proxies, auth, test_onion=True):\n             cmd = proxies[2].queue.get()\n             assert(isinstance(cmd, Socks5Command))\n             assert_equal(cmd.atyp, AddressType.DOMAINNAME)\n-            assert_equal(cmd.addr, \"bitcoinostk4e4re.onion\")\n+            assert_equal(cmd.addr, b\"bitcoinostk4e4re.onion\")\n             assert_equal(cmd.port, 8333)\n             if not auth:\n                 assert_equal(cmd.username, None)\n@@ -115,7 +115,7 @@ def node_test(self, node, proxies, auth, test_onion=True):\n         cmd = proxies[3].queue.get()\n         assert(isinstance(cmd, Socks5Command))\n         assert_equal(cmd.atyp, AddressType.DOMAINNAME)\n-        assert_equal(cmd.addr, \"node.noumenon\")\n+        assert_equal(cmd.addr, b\"node.noumenon\")\n         assert_equal(cmd.port, 8333)\n         if not auth:\n             assert_equal(cmd.username, None)"
      },
      {
        "sha": "eccd157e5c085e77a2c3e5c555bc52e942012d7e",
        "filename": "qa/rpc-tests/pruning.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553/qa/rpc-tests/pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553/qa/rpc-tests/pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/pruning.py?ref=f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553",
        "patch": "@@ -311,7 +311,7 @@ def run_test(self):\n         #                   \\                 \\\n         #                    ++...++(1044)     ..\n         #\n-        # N0    ********************(1032) @@...@@@(1552) \n+        # N0    ********************(1032) @@...@@@(1552)\n         #                                 \\\n         #                                  *...**(1320)\n "
      },
      {
        "sha": "b76cc1f580ea951006fb481ba512e071e771e43f",
        "filename": "qa/rpc-tests/rawtransactions.py",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553/qa/rpc-tests/rawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553/qa/rpc-tests/rawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rawtransactions.py?ref=f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553",
        "patch": "@@ -88,8 +88,6 @@ def run_test(self):\n         assert_equal(self.nodes[2].getbalance(), bal+Decimal('1.20000000')) #node2 has both keys of the 2of2 ms addr., tx should affect the balance\n \n \n-\n-\n         # 2of3 test from different nodes\n         bal = self.nodes[2].getbalance()\n         addr1 = self.nodes[1].getnewaddress()"
      },
      {
        "sha": "4c8ef6de26eb2a58faa20a42f1bbf05f84b10133",
        "filename": "qa/rpc-tests/replace-by-fee.py",
        "status": "modified",
        "additions": 2,
        "deletions": 8,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553/qa/rpc-tests/replace-by-fee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553/qa/rpc-tests/replace-by-fee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/replace-by-fee.py?ref=f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553",
        "patch": "@@ -11,15 +11,11 @@\n from test_framework.util import *\n from test_framework.script import *\n from test_framework.mininode import *\n-import binascii\n \n MAX_REPLACEMENT_LIMIT = 100\n \n-def satoshi_round(amount):\n-    return Decimal(amount).quantize(Decimal('0.00000001'), rounding=ROUND_DOWN)\n-\n def txToHex(tx):\n-    return binascii.hexlify(tx.serialize()).decode('utf-8')\n+    return bytes_to_hex_str(tx.serialize())\n \n def make_utxo(node, amount, confirmed=True, scriptPubKey=CScript([1])):\n     \"\"\"Create a txout with a given amount and scriptPubKey\n@@ -53,9 +49,7 @@ def make_utxo(node, amount, confirmed=True, scriptPubKey=CScript([1])):\n     tx2.vout = [CTxOut(amount, scriptPubKey)]\n     tx2.rehash()\n \n-    binascii.hexlify(tx2.serialize()).decode('utf-8')\n-\n-    signed_tx = node.signrawtransaction(binascii.hexlify(tx2.serialize()).decode('utf-8'))\n+    signed_tx = node.signrawtransaction(txToHex(tx2))\n \n     txid = node.sendrawtransaction(signed_tx['hex'], True)\n "
      },
      {
        "sha": "359f9239fb3700493e3f25501fd5b3b6b57bab05",
        "filename": "qa/rpc-tests/rest.py",
        "status": "modified",
        "additions": 7,
        "deletions": 8,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553/qa/rpc-tests/rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553/qa/rpc-tests/rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rest.py?ref=f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553",
        "patch": "@@ -39,7 +39,7 @@ def http_get_call(host, port, path, response_object = 0):\n     if response_object:\n         return conn.getresponse()\n \n-    return conn.getresponse().read()\n+    return conn.getresponse().read().decode('utf-8')\n \n #allows simple http post calls with a request body\n def http_post_call(host, port, path, requestdata = '', response_object = 0):\n@@ -141,9 +141,9 @@ def run_test(self):\n         bb_hash = self.nodes[0].getbestblockhash()\n \n         binaryRequest = b'\\x01\\x02'\n-        binaryRequest += binascii.unhexlify(txid)\n+        binaryRequest += hex_str_to_bytes(txid)\n         binaryRequest += pack(\"i\", n)\n-        binaryRequest += binascii.unhexlify(vintx)\n+        binaryRequest += hex_str_to_bytes(vintx)\n         binaryRequest += pack(\"i\", 0)\n \n         bin_response = http_post_call(url.hostname, url.port, '/rest/getutxos'+self.FORMAT_SEPARATOR+'bin', binaryRequest)\n@@ -234,15 +234,15 @@ def run_test(self):\n         assert_equal(response_hex.status, 200)\n         assert_greater_than(int(response_hex.getheader('content-length')), 160)\n         response_hex_str = response_hex.read()\n-        assert_equal(encode(response_str, \"hex\")[0:160], response_hex_str[0:160])\n+        assert_equal(encode(response_str, \"hex_codec\")[0:160], response_hex_str[0:160])\n \n         # compare with hex block header\n         response_header_hex = http_get_call(url.hostname, url.port, '/rest/headers/1/'+bb_hash+self.FORMAT_SEPARATOR+\"hex\", True)\n         assert_equal(response_header_hex.status, 200)\n         assert_greater_than(int(response_header_hex.getheader('content-length')), 160)\n         response_header_hex_str = response_header_hex.read()\n         assert_equal(response_hex_str[0:160], response_header_hex_str[0:160])\n-        assert_equal(encode(response_header_str, \"hex\")[0:160], response_header_hex_str[0:160])\n+        assert_equal(encode(response_header_str, \"hex_codec\")[0:160], response_header_hex_str[0:160])\n \n         # check json format\n         block_json_string = http_get_call(url.hostname, url.port, '/rest/block/'+bb_hash+self.FORMAT_SEPARATOR+'json')\n@@ -252,7 +252,7 @@ def run_test(self):\n         # compare with json block header\n         response_header_json = http_get_call(url.hostname, url.port, '/rest/headers/1/'+bb_hash+self.FORMAT_SEPARATOR+\"json\", True)\n         assert_equal(response_header_json.status, 200)\n-        response_header_json_str = response_header_json.read()\n+        response_header_json_str = response_header_json.read().decode('utf-8')\n         json_obj = json.loads(response_header_json_str, parse_float=Decimal)\n         assert_equal(len(json_obj), 1) #ensure that there is one header in the json response\n         assert_equal(json_obj[0]['hash'], bb_hash) #request/response hash should be the same\n@@ -276,7 +276,7 @@ def run_test(self):\n         self.sync_all()\n         response_header_json = http_get_call(url.hostname, url.port, '/rest/headers/5/'+bb_hash+self.FORMAT_SEPARATOR+\"json\", True)\n         assert_equal(response_header_json.status, 200)\n-        response_header_json_str = response_header_json.read()\n+        response_header_json_str = response_header_json.read().decode('utf-8')\n         json_obj = json.loads(response_header_json_str)\n         assert_equal(len(json_obj), 5) #now we should have 5 header objects\n \n@@ -292,7 +292,6 @@ def run_test(self):\n         assert_greater_than(int(response.getheader('content-length')), 10)\n \n \n-\n         # check block tx details\n         # let's make 3 tx and mine them on node 1\n         txs = []"
      },
      {
        "sha": "f8861c627426ecd0cdd36e6544946d2c753f2681",
        "filename": "qa/rpc-tests/test_framework/blocktools.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553/qa/rpc-tests/test_framework/blocktools.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553/qa/rpc-tests/test_framework/blocktools.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/blocktools.py?ref=f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553",
        "patch": "@@ -62,6 +62,6 @@ def create_transaction(prevtx, n, sig, value):\n     tx = CTransaction()\n     assert(n < len(prevtx.vout))\n     tx.vin.append(CTxIn(COutPoint(prevtx.sha256, n), sig, 0xffffffff))\n-    tx.vout.append(CTxOut(value, \"\"))\n+    tx.vout.append(CTxOut(value, b\"\"))\n     tx.calc_sha256()\n     return tx"
      },
      {
        "sha": "74aabdd01b5c1f2e8d123b34b539274f45143513",
        "filename": "qa/rpc-tests/test_framework/comptool.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553/qa/rpc-tests/test_framework/comptool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553/qa/rpc-tests/test_framework/comptool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/comptool.py?ref=f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553",
        "patch": "@@ -45,7 +45,7 @@ class RejectResult(object):\n     '''\n     Outcome that expects rejection of a transaction or block.\n     '''\n-    def __init__(self, code, reason=''):\n+    def __init__(self, code, reason=b''):\n         self.code = code\n         self.reason = reason\n     def match(self, other):\n@@ -111,9 +111,9 @@ def on_pong(self, conn, message):\n             raise AssertionError(\"Got pong for unknown ping [%s]\" % repr(message))\n \n     def on_reject(self, conn, message):\n-        if message.message == 'tx':\n+        if message.message == b'tx':\n             self.tx_reject_map[message.data] = RejectResult(message.code, message.reason)\n-        if message.message == 'block':\n+        if message.message == b'block':\n             self.block_reject_map[message.data] = RejectResult(message.code, message.reason)\n \n     def send_inv(self, obj):"
      },
      {
        "sha": "3198620ca2f9e95d8140484b7723d1e36e14380d",
        "filename": "qa/rpc-tests/test_framework/mininode.py",
        "status": "modified",
        "additions": 90,
        "deletions": 91,
        "changes": 181,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553/qa/rpc-tests/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553/qa/rpc-tests/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/mininode.py?ref=f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553",
        "patch": "@@ -20,10 +20,10 @@\n import struct\n import socket\n import asyncore\n-import binascii\n import time\n import sys\n import random\n+from binascii import hexlify, unhexlify\n from io import BytesIO\n from codecs import encode\n import hashlib\n@@ -34,7 +34,7 @@\n \n BIP0031_VERSION = 60000\n MY_VERSION = 60001  # past bip-31 for ping/pong\n-MY_SUBVERSION = \"/python-mininode-tester:0.0.1/\"\n+MY_SUBVERSION = b\"/python-mininode-tester:0.0.2/\"\n \n MAX_INV_SZ = 50000\n MAX_BLOCK_SIZE = 1000000\n@@ -131,7 +131,7 @@ def deser_vector(f, c):\n \n \n def ser_vector(l):\n-    r = \"\"\n+    r = b\"\"\n     if len(l) < 253:\n         r = struct.pack(\"B\", len(l))\n     elif len(l) < 0x10000:\n@@ -161,7 +161,7 @@ def deser_uint256_vector(f):\n \n \n def ser_uint256_vector(l):\n-    r = \"\"\n+    r = b\"\"\n     if len(l) < 253:\n         r = struct.pack(\"B\", len(l))\n     elif len(l) < 0x10000:\n@@ -221,7 +221,7 @@ def deser_int_vector(f):\n \n \n def ser_int_vector(l):\n-    r = \"\"\n+    r = b\"\"\n     if len(l) < 253:\n         r = struct.pack(\"B\", len(l))\n     elif len(l) < 0x10000:\n@@ -236,19 +236,19 @@ def ser_int_vector(l):\n \n # Deserialize from a hex string representation (eg from RPC)\n def FromHex(obj, hex_string):\n-    obj.deserialize(BytesIO(binascii.unhexlify(hex_string)))\n+    obj.deserialize(BytesIO(unhexlify(hex_string.encode('ascii'))))\n     return obj\n \n # Convert a binary-serializable object to hex (eg for submission via RPC)\n def ToHex(obj):\n-    return binascii.hexlify(obj.serialize()).decode('utf-8')\n+    return hexlify(obj.serialize()).decode('ascii')\n \n # Objects that map to bitcoind objects, which can be serialized/deserialized\n \n class CAddress(object):\n     def __init__(self):\n         self.nServices = 1\n-        self.pchReserved = \"\\x00\" * 10 + \"\\xff\" * 2\n+        self.pchReserved = b\"\\x00\" * 10 + b\"\\xff\" * 2\n         self.ip = \"0.0.0.0\"\n         self.port = 0\n \n@@ -259,7 +259,7 @@ def deserialize(self, f):\n         self.port = struct.unpack(\">H\", f.read(2))[0]\n \n     def serialize(self):\n-        r = \"\"\n+        r = b\"\"\n         r += struct.pack(\"<Q\", self.nServices)\n         r += self.pchReserved\n         r += socket.inet_aton(self.ip)\n@@ -286,7 +286,7 @@ def deserialize(self, f):\n         self.hash = deser_uint256(f)\n \n     def serialize(self):\n-        r = \"\"\n+        r = b\"\"\n         r += struct.pack(\"<i\", self.type)\n         r += ser_uint256(self.hash)\n         return r\n@@ -306,7 +306,7 @@ def deserialize(self, f):\n         self.vHave = deser_uint256_vector(f)\n \n     def serialize(self):\n-        r = \"\"\n+        r = b\"\"\n         r += struct.pack(\"<i\", self.nVersion)\n         r += ser_uint256_vector(self.vHave)\n         return r\n@@ -326,7 +326,7 @@ def deserialize(self, f):\n         self.n = struct.unpack(\"<I\", f.read(4))[0]\n \n     def serialize(self):\n-        r = \"\"\n+        r = b\"\"\n         r += ser_uint256(self.hash)\n         r += struct.pack(\"<I\", self.n)\n         return r\n@@ -336,7 +336,7 @@ def __repr__(self):\n \n \n class CTxIn(object):\n-    def __init__(self, outpoint=None, scriptSig=\"\", nSequence=0):\n+    def __init__(self, outpoint=None, scriptSig=b\"\", nSequence=0):\n         if outpoint is None:\n             self.prevout = COutPoint()\n         else:\n@@ -351,20 +351,20 @@ def deserialize(self, f):\n         self.nSequence = struct.unpack(\"<I\", f.read(4))[0]\n \n     def serialize(self):\n-        r = \"\"\n+        r = b\"\"\n         r += self.prevout.serialize()\n         r += ser_string(self.scriptSig)\n         r += struct.pack(\"<I\", self.nSequence)\n         return r\n \n     def __repr__(self):\n         return \"CTxIn(prevout=%s scriptSig=%s nSequence=%i)\" \\\n-            % (repr(self.prevout), binascii.hexlify(self.scriptSig),\n+            % (repr(self.prevout), hexlify(self.scriptSig),\n                self.nSequence)\n \n \n class CTxOut(object):\n-    def __init__(self, nValue=0, scriptPubKey=\"\"):\n+    def __init__(self, nValue=0, scriptPubKey=b\"\"):\n         self.nValue = nValue\n         self.scriptPubKey = scriptPubKey\n \n@@ -373,15 +373,15 @@ def deserialize(self, f):\n         self.scriptPubKey = deser_string(f)\n \n     def serialize(self):\n-        r = \"\"\n+        r = b\"\"\n         r += struct.pack(\"<q\", self.nValue)\n         r += ser_string(self.scriptPubKey)\n         return r\n \n     def __repr__(self):\n         return \"CTxOut(nValue=%i.%08i scriptPubKey=%s)\" \\\n             % (self.nValue // COIN, self.nValue % COIN,\n-               binascii.hexlify(self.scriptPubKey))\n+               hexlify(self.scriptPubKey))\n \n \n class CTransaction(object):\n@@ -410,7 +410,7 @@ def deserialize(self, f):\n         self.hash = None\n \n     def serialize(self):\n-        r = \"\"\n+        r = b\"\"\n         r += struct.pack(\"<i\", self.nVersion)\n         r += ser_vector(self.vin)\n         r += ser_vector(self.vout)\n@@ -424,7 +424,7 @@ def rehash(self):\n     def calc_sha256(self):\n         if self.sha256 is None:\n             self.sha256 = uint256_from_str(hash256(self.serialize()))\n-        self.hash = encode(hash256(self.serialize())[::-1], 'hex')\n+        self.hash = encode(hash256(self.serialize())[::-1], 'hex_codec').decode('ascii')\n \n     def is_valid(self):\n         self.calc_sha256()\n@@ -474,7 +474,7 @@ def deserialize(self, f):\n         self.hash = None\n \n     def serialize(self):\n-        r = \"\"\n+        r = b\"\"\n         r += struct.pack(\"<i\", self.nVersion)\n         r += ser_uint256(self.hashPrevBlock)\n         r += ser_uint256(self.hashMerkleRoot)\n@@ -485,15 +485,15 @@ def serialize(self):\n \n     def calc_sha256(self):\n         if self.sha256 is None:\n-            r = \"\"\n+            r = b\"\"\n             r += struct.pack(\"<i\", self.nVersion)\n             r += ser_uint256(self.hashPrevBlock)\n             r += ser_uint256(self.hashMerkleRoot)\n             r += struct.pack(\"<I\", self.nTime)\n             r += struct.pack(\"<I\", self.nBits)\n             r += struct.pack(\"<I\", self.nNonce)\n             self.sha256 = uint256_from_str(hash256(r))\n-            self.hash = encode(hash256(r)[::-1], 'hex')\n+            self.hash = encode(hash256(r)[::-1], 'hex_codec').decode('ascii')\n \n     def rehash(self):\n         self.sha256 = None\n@@ -516,7 +516,7 @@ def deserialize(self, f):\n         self.vtx = deser_vector(f, CTransaction)\n \n     def serialize(self):\n-        r = \"\"\n+        r = b\"\"\n         r += super(CBlock, self).serialize()\n         r += ser_vector(self.vtx)\n         return r\n@@ -571,9 +571,9 @@ def __init__(self):\n         self.nMaxVer = 0\n         self.setSubVer = []\n         self.nPriority = 0\n-        self.strComment = \"\"\n-        self.strStatusBar = \"\"\n-        self.strReserved = \"\"\n+        self.strComment = b\"\"\n+        self.strStatusBar = b\"\"\n+        self.strReserved = b\"\"\n \n     def deserialize(self, f):\n         self.nVersion = struct.unpack(\"<i\", f.read(4))[0]\n@@ -591,7 +591,7 @@ def deserialize(self, f):\n         self.strReserved = deser_string(f)\n \n     def serialize(self):\n-        r = \"\"\n+        r = b\"\"\n         r += struct.pack(\"<i\", self.nVersion)\n         r += struct.pack(\"<q\", self.nRelayUntil)\n         r += struct.pack(\"<q\", self.nExpiration)\n@@ -616,8 +616,8 @@ def __repr__(self):\n \n class CAlert(object):\n     def __init__(self):\n-        self.vchMsg = \"\"\n-        self.vchSig = \"\"\n+        self.vchMsg = b\"\"\n+        self.vchSig = b\"\"\n \n     def deserialize(self, f):\n         self.vchMsg = deser_string(f)\n@@ -636,7 +636,7 @@ def __repr__(self):\n \n # Objects that correspond to messages on the wire\n class msg_version(object):\n-    command = \"version\"\n+    command = b\"version\"\n \n     def __init__(self):\n         self.nVersion = MY_VERSION\n@@ -672,7 +672,7 @@ def deserialize(self, f):\n             self.nStartingHeight = None\n \n     def serialize(self):\n-        r = \"\"\n+        r = b\"\"\n         r += struct.pack(\"<i\", self.nVersion)\n         r += struct.pack(\"<Q\", self.nServices)\n         r += struct.pack(\"<q\", self.nTime)\n@@ -691,7 +691,7 @@ def __repr__(self):\n \n \n class msg_verack(object):\n-    command = \"verack\"\n+    command = b\"verack\"\n \n     def __init__(self):\n         pass\n@@ -700,14 +700,14 @@ def deserialize(self, f):\n         pass\n \n     def serialize(self):\n-        return \"\"\n+        return b\"\"\n \n     def __repr__(self):\n         return \"msg_verack()\"\n \n \n class msg_addr(object):\n-    command = \"addr\"\n+    command = b\"addr\"\n \n     def __init__(self):\n         self.addrs = []\n@@ -723,7 +723,7 @@ def __repr__(self):\n \n \n class msg_alert(object):\n-    command = \"alert\"\n+    command = b\"alert\"\n \n     def __init__(self):\n         self.alert = CAlert()\n@@ -733,7 +733,7 @@ def deserialize(self, f):\n         self.alert.deserialize(f)\n \n     def serialize(self):\n-        r = \"\"\n+        r = b\"\"\n         r += self.alert.serialize()\n         return r\n \n@@ -742,7 +742,7 @@ def __repr__(self):\n \n \n class msg_inv(object):\n-    command = \"inv\"\n+    command = b\"inv\"\n \n     def __init__(self, inv=None):\n         if inv is None:\n@@ -761,7 +761,7 @@ def __repr__(self):\n \n \n class msg_getdata(object):\n-    command = \"getdata\"\n+    command = b\"getdata\"\n \n     def __init__(self, inv=None):\n         self.inv = inv if inv != None else []\n@@ -777,7 +777,7 @@ def __repr__(self):\n \n \n class msg_getblocks(object):\n-    command = \"getblocks\"\n+    command = b\"getblocks\"\n \n     def __init__(self):\n         self.locator = CBlockLocator()\n@@ -789,7 +789,7 @@ def deserialize(self, f):\n         self.hashstop = deser_uint256(f)\n \n     def serialize(self):\n-        r = \"\"\n+        r = b\"\"\n         r += self.locator.serialize()\n         r += ser_uint256(self.hashstop)\n         return r\n@@ -800,7 +800,7 @@ def __repr__(self):\n \n \n class msg_tx(object):\n-    command = \"tx\"\n+    command = b\"tx\"\n \n     def __init__(self, tx=CTransaction()):\n         self.tx = tx\n@@ -816,7 +816,7 @@ def __repr__(self):\n \n \n class msg_block(object):\n-    command = \"block\"\n+    command = b\"block\"\n \n     def __init__(self, block=None):\n         if block is None:\n@@ -835,7 +835,7 @@ def __repr__(self):\n \n \n class msg_getaddr(object):\n-    command = \"getaddr\"\n+    command = b\"getaddr\"\n \n     def __init__(self):\n         pass\n@@ -844,14 +844,14 @@ def deserialize(self, f):\n         pass\n \n     def serialize(self):\n-        return \"\"\n+        return b\"\"\n \n     def __repr__(self):\n         return \"msg_getaddr()\"\n \n \n class msg_ping_prebip31(object):\n-    command = \"ping\"\n+    command = b\"ping\"\n \n     def __init__(self):\n         pass\n@@ -860,14 +860,14 @@ def deserialize(self, f):\n         pass\n \n     def serialize(self):\n-        return \"\"\n+        return b\"\"\n \n     def __repr__(self):\n         return \"msg_ping() (pre-bip31)\"\n \n \n class msg_ping(object):\n-    command = \"ping\"\n+    command = b\"ping\"\n \n     def __init__(self, nonce=0L):\n         self.nonce = nonce\n@@ -876,7 +876,7 @@ def deserialize(self, f):\n         self.nonce = struct.unpack(\"<Q\", f.read(8))[0]\n \n     def serialize(self):\n-        r = \"\"\n+        r = b\"\"\n         r += struct.pack(\"<Q\", self.nonce)\n         return r\n \n@@ -885,16 +885,16 @@ def __repr__(self):\n \n \n class msg_pong(object):\n-    command = \"pong\"\n+    command = b\"pong\"\n \n-    def __init__(self, nonce=0L):\n+    def __init__(self, nonce=0):\n         self.nonce = nonce\n \n     def deserialize(self, f):\n         self.nonce = struct.unpack(\"<Q\", f.read(8))[0]\n \n     def serialize(self):\n-        r = \"\"\n+        r = b\"\"\n         r += struct.pack(\"<Q\", self.nonce)\n         return r\n \n@@ -903,7 +903,7 @@ def __repr__(self):\n \n \n class msg_mempool(object):\n-    command = \"mempool\"\n+    command = b\"mempool\"\n \n     def __init__(self):\n         pass\n@@ -912,13 +912,13 @@ def deserialize(self, f):\n         pass\n \n     def serialize(self):\n-        return \"\"\n+        return b\"\"\n \n     def __repr__(self):\n         return \"msg_mempool()\"\n \n class msg_sendheaders(object):\n-    command = \"sendheaders\"\n+    command = b\"sendheaders\"\n \n     def __init__(self):\n         pass\n@@ -927,7 +927,7 @@ def deserialize(self, f):\n         pass\n \n     def serialize(self):\n-        return \"\"\n+        return b\"\"\n \n     def __repr__(self):\n         return \"msg_sendheaders()\"\n@@ -937,7 +937,7 @@ def __repr__(self):\n # vector of hashes\n # hash_stop (hash of last desired block header, 0 to get as many as possible)\n class msg_getheaders(object):\n-    command = \"getheaders\"\n+    command = b\"getheaders\"\n \n     def __init__(self):\n         self.locator = CBlockLocator()\n@@ -949,7 +949,7 @@ def deserialize(self, f):\n         self.hashstop = deser_uint256(f)\n \n     def serialize(self):\n-        r = \"\"\n+        r = b\"\"\n         r += self.locator.serialize()\n         r += ser_uint256(self.hashstop)\n         return r\n@@ -962,7 +962,7 @@ def __repr__(self):\n # headers message has\n # <count> <vector of block headers>\n class msg_headers(object):\n-    command = \"headers\"\n+    command = b\"headers\"\n \n     def __init__(self):\n         self.headers = []\n@@ -982,10 +982,10 @@ def __repr__(self):\n \n \n class msg_reject(object):\n-    command = \"reject\"\n+    command = b\"reject\"\n \n     def __init__(self):\n-        self.message = \"\"\n+        self.message = b\"\"\n         self.code = 0\n         self.reason = \"\"\n         self.data = 0L\n@@ -1009,7 +1009,6 @@ def __repr__(self):\n         return \"msg_reject: %s %d %s [%064x]\" \\\n             % (self.message, self.code, self.reason, self.data)\n \n-\n # This is what a callback should look like for NodeConn\n # Reimplement the on_* functions to provide handling for events\n class NodeConnCB(object):\n@@ -1091,27 +1090,27 @@ def on_pong(self, conn, message): pass\n # This class provides an interface for a p2p connection to a specified node\n class NodeConn(asyncore.dispatcher):\n     messagemap = {\n-        \"version\": msg_version,\n-        \"verack\": msg_verack,\n-        \"addr\": msg_addr,\n-        \"alert\": msg_alert,\n-        \"inv\": msg_inv,\n-        \"getdata\": msg_getdata,\n-        \"getblocks\": msg_getblocks,\n-        \"tx\": msg_tx,\n-        \"block\": msg_block,\n-        \"getaddr\": msg_getaddr,\n-        \"ping\": msg_ping,\n-        \"pong\": msg_pong,\n-        \"headers\": msg_headers,\n-        \"getheaders\": msg_getheaders,\n-        \"reject\": msg_reject,\n-        \"mempool\": msg_mempool\n+        b\"version\": msg_version,\n+        b\"verack\": msg_verack,\n+        b\"addr\": msg_addr,\n+        b\"alert\": msg_alert,\n+        b\"inv\": msg_inv,\n+        b\"getdata\": msg_getdata,\n+        b\"getblocks\": msg_getblocks,\n+        b\"tx\": msg_tx,\n+        b\"block\": msg_block,\n+        b\"getaddr\": msg_getaddr,\n+        b\"ping\": msg_ping,\n+        b\"pong\": msg_pong,\n+        b\"headers\": msg_headers,\n+        b\"getheaders\": msg_getheaders,\n+        b\"reject\": msg_reject,\n+        b\"mempool\": msg_mempool,\n     }\n     MAGIC_BYTES = {\n-        \"mainnet\": \"\\xf9\\xbe\\xb4\\xd9\",   # mainnet\n-        \"testnet3\": \"\\x0b\\x11\\x09\\x07\",  # testnet3\n-        \"regtest\": \"\\xfa\\xbf\\xb5\\xda\"    # regtest\n+        \"mainnet\": b\"\\xf9\\xbe\\xb4\\xd9\",   # mainnet\n+        \"testnet3\": b\"\\x0b\\x11\\x09\\x07\",  # testnet3\n+        \"regtest\": b\"\\xfa\\xbf\\xb5\\xda\"    # regtest\n     }\n \n     def __init__(self, dstaddr, dstport, rpc, callback, net=\"regtest\", services=1):\n@@ -1120,8 +1119,8 @@ def __init__(self, dstaddr, dstport, rpc, callback, net=\"regtest\", services=1):\n         self.dstaddr = dstaddr\n         self.dstport = dstport\n         self.create_socket(socket.AF_INET, socket.SOCK_STREAM)\n-        self.sendbuf = \"\"\n-        self.recvbuf = \"\"\n+        self.sendbuf = b\"\"\n+        self.recvbuf = b\"\"\n         self.ver_send = 209\n         self.ver_recv = 209\n         self.last_sent = 0\n@@ -1158,8 +1157,8 @@ def handle_close(self):\n         self.show_debug_msg(\"MiniNode: Closing Connection to %s:%d... \"\n                             % (self.dstaddr, self.dstport))\n         self.state = \"closed\"\n-        self.recvbuf = \"\"\n-        self.sendbuf = \"\"\n+        self.recvbuf = b\"\"\n+        self.sendbuf = b\"\"\n         try:\n             self.close()\n         except:\n@@ -1202,7 +1201,7 @@ def got_data(self):\n                 if self.ver_recv < 209:\n                     if len(self.recvbuf) < 4 + 12 + 4:\n                         return\n-                    command = self.recvbuf[4:4+12].split(\"\\x00\", 1)[0]\n+                    command = self.recvbuf[4:4+12].split(b\"\\x00\", 1)[0]\n                     msglen = struct.unpack(\"<i\", self.recvbuf[4+12:4+12+4])[0]\n                     checksum = None\n                     if len(self.recvbuf) < 4 + 12 + 4 + msglen:\n@@ -1212,7 +1211,7 @@ def got_data(self):\n                 else:\n                     if len(self.recvbuf) < 4 + 12 + 4 + 4:\n                         return\n-                    command = self.recvbuf[4:4+12].split(\"\\x00\", 1)[0]\n+                    command = self.recvbuf[4:4+12].split(b\"\\x00\", 1)[0]\n                     msglen = struct.unpack(\"<i\", self.recvbuf[4+12:4+12+4])[0]\n                     checksum = self.recvbuf[4+12+4:4+12+4+4]\n                     if len(self.recvbuf) < 4 + 12 + 4 + 4 + msglen:\n@@ -1242,7 +1241,7 @@ def send_message(self, message, pushbuf=False):\n         data = message.serialize()\n         tmsg = self.MAGIC_BYTES[self.network]\n         tmsg += command\n-        tmsg += \"\\x00\" * (12 - len(command))\n+        tmsg += b\"\\x00\" * (12 - len(command))\n         tmsg += struct.pack(\"<I\", len(data))\n         if self.ver_send >= 209:\n             th = sha256(data)\n@@ -1254,11 +1253,11 @@ def send_message(self, message, pushbuf=False):\n             self.last_sent = time.time()\n \n     def got_message(self, message):\n-        if message.command == \"version\":\n+        if message.command == b\"version\":\n             if message.nVersion <= BIP0031_VERSION:\n-                self.messagemap['ping'] = msg_ping_prebip31\n+                self.messagemap[b'ping'] = msg_ping_prebip31\n         if self.last_sent + 30 * 60 < time.time():\n-            self.send_message(self.messagemap['ping']())\n+            self.send_message(self.messagemap[b'ping']())\n         self.show_debug_msg(\"Recv %s\" % repr(message))\n         self.cb.deliver(self, message)\n "
      },
      {
        "sha": "c76de93429f507da9bb846cdda2ab88128834f3f",
        "filename": "qa/rpc-tests/test_framework/netutil.py",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553/qa/rpc-tests/test_framework/netutil.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553/qa/rpc-tests/test_framework/netutil.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/netutil.py?ref=f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553",
        "patch": "@@ -4,13 +4,14 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n # Linux network utilities\n+\n import sys\n import socket\n import fcntl\n import struct\n import array\n import os\n-import binascii\n+from binascii import unhexlify, hexlify\n \n # Roughly based on http://voorloopnul.com/blog/a-python-netstat-in-less-than-100-lines-of-code/ by Ricardo Pascal\n STATE_ESTABLISHED = '01'\n@@ -43,7 +44,7 @@ def _remove_empty(array):\n def _convert_ip_port(array):\n     host,port = array.split(':')\n     # convert host from mangled-per-four-bytes form as used by kernel\n-    host = binascii.unhexlify(host)\n+    host = unhexlify(host)\n     host_out = ''\n     for x in range(0, len(host) // 4):\n         (val,) = struct.unpack('=I', host[x*4:(x+1)*4])\n@@ -94,7 +95,7 @@ def all_interfaces():\n     max_possible = 8 # initial value\n     while True:\n         bytes = max_possible * struct_size\n-        names = array.array('B', '\\0' * bytes)\n+        names = array.array('B', b'\\0' * bytes)\n         outbytes = struct.unpack('iL', fcntl.ioctl(\n             s.fileno(),\n             0x8912,  # SIOCGIFCONF\n@@ -105,7 +106,7 @@ def all_interfaces():\n         else:\n             break\n     namestr = names.tostring()\n-    return [(namestr[i:i+16].split('\\0', 1)[0],\n+    return [(namestr[i:i+16].split(b'\\0', 1)[0],\n              socket.inet_ntoa(namestr[i+20:i+24]))\n             for i in range(0, outbytes, struct_size)]\n \n@@ -136,4 +137,4 @@ def addr_to_hex(addr):\n         addr = sub[0] + ([0] * nullbytes) + sub[1]\n     else:\n         raise ValueError('Could not parse address %s' % addr)\n-    return binascii.hexlify(bytearray(addr))\n+    return hexlify(bytearray(addr)).decode('ascii')"
      },
      {
        "sha": "5fb5758f81fa3a34555367569151cd1d6b25fb9e",
        "filename": "qa/rpc-tests/test_framework/script.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553/qa/rpc-tests/test_framework/script.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553/qa/rpc-tests/test_framework/script.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/script.py?ref=f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553",
        "patch": "@@ -629,7 +629,7 @@ def encode(obj):\n         neg = obj.value < 0\n         absvalue = -obj.value if neg else obj.value\n         while (absvalue):\n-            r.append(chr(absvalue & 0xff))\n+            r.append(absvalue & 0xff)\n             absvalue >>= 8\n         if r[-1] & 0x80:\n             r.append(0x80 if neg else 0)\n@@ -777,7 +777,7 @@ def __repr__(self):\n         # need to change\n         def _repr(o):\n             if isinstance(o, bytes):\n-                return \"x('%s')\" % hexlify(o).decode('utf8')\n+                return b\"x('%s')\" % hexlify(o).decode('ascii')\n             else:\n                 return repr(o)\n "
      },
      {
        "sha": "f725d9770174732322b6fe8380b521e22d1f1a54",
        "filename": "qa/rpc-tests/test_framework/socks5.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553/qa/rpc-tests/test_framework/socks5.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553/qa/rpc-tests/test_framework/socks5.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/socks5.py?ref=f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553",
        "patch": "@@ -102,7 +102,7 @@ def handle(self):\n                 addr = recvall(self.conn, 4)\n             elif atyp == AddressType.DOMAINNAME:\n                 n = recvall(self.conn, 1)[0]\n-                addr = str(recvall(self.conn, n))\n+                addr = recvall(self.conn, n)\n             elif atyp == AddressType.IPV6:\n                 addr = recvall(self.conn, 16)\n             else:"
      },
      {
        "sha": "eb29fea3129f9576f39d7076f75a20b333d688c8",
        "filename": "qa/rpc-tests/test_framework/util.py",
        "status": "modified",
        "additions": 14,
        "deletions": 1,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553/qa/rpc-tests/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553/qa/rpc-tests/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/util.py?ref=f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553",
        "patch": "@@ -1,6 +1,8 @@\n # Copyright (c) 2014-2015 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\n #\n # Helpful routines for regression testing\n #\n@@ -9,6 +11,8 @@\n import os\n import sys\n \n+from binascii import hexlify, unhexlify\n+from base64 import b64encode\n from decimal import Decimal, ROUND_DOWN\n import json\n import random\n@@ -70,6 +74,15 @@ def check_json_precision():\n def count_bytes(hex_string):\n     return len(bytearray.fromhex(hex_string))\n \n+def bytes_to_hex_str(byte_str):\n+    return hexlify(byte_str).decode('ascii')\n+\n+def hex_str_to_bytes(hex_str):\n+    return unhexlify(hex_str.encode('ascii'))\n+\n+def str_to_b64str(string):\n+    return b64encode(string.encode('utf-8')).decode('ascii')\n+\n def sync_blocks(rpc_connections, wait=1):\n     \"\"\"\n     Wait until everybody has the same block count\n@@ -425,7 +438,7 @@ def assert_is_hash_string(string, length=64):\n             \"String %r contains invalid characters for a hash.\" % string)\n \n def satoshi_round(amount):\n-    return  Decimal(amount).quantize(Decimal('0.00000001'), rounding=ROUND_DOWN)\n+    return Decimal(amount).quantize(Decimal('0.00000001'), rounding=ROUND_DOWN)\n \n # Helper to create at least \"count\" utxos\n # Pass in a fee that is sufficient for relay and mining new transactions."
      },
      {
        "sha": "3a8d62ef2eddc7d0688b1aa514f58b2a147eb556",
        "filename": "qa/rpc-tests/zmq_test.py",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553/qa/rpc-tests/zmq_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553/qa/rpc-tests/zmq_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/zmq_test.py?ref=f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553",
        "patch": "@@ -28,8 +28,8 @@ class ZMQTest (BitcoinTestFramework):\n     def setup_nodes(self):\n         self.zmqContext = zmq.Context()\n         self.zmqSubSocket = self.zmqContext.socket(zmq.SUB)\n-        self.zmqSubSocket.setsockopt(zmq.SUBSCRIBE, \"hashblock\")\n-        self.zmqSubSocket.setsockopt(zmq.SUBSCRIBE, \"hashtx\")\n+        self.zmqSubSocket.setsockopt(zmq.SUBSCRIBE, b\"hashblock\")\n+        self.zmqSubSocket.setsockopt(zmq.SUBSCRIBE, b\"hashtx\")\n         self.zmqSubSocket.connect(\"tcp://127.0.0.1:%i\" % self.port)\n         return start_nodes(4, self.options.tmpdir, extra_args=[\n             ['-zmqpubhashtx=tcp://127.0.0.1:'+str(self.port), '-zmqpubhashblock=tcp://127.0.0.1:'+str(self.port)],\n@@ -46,13 +46,13 @@ def run_test(self):\n \n         print \"listen...\"\n         msg = self.zmqSubSocket.recv_multipart()\n-        topic = str(msg[0])\n+        topic = msg[0]\n         body = msg[1]\n \n         msg = self.zmqSubSocket.recv_multipart()\n-        topic = str(msg[0])\n+        topic = msg[0]\n         body = msg[1]\n-        blkhash = binascii.hexlify(body)\n+        blkhash = bytes_to_hex_str(body)\n \n         assert_equal(genhashes[0], blkhash) #blockhash from generate must be equal to the hash received over zmq\n \n@@ -63,10 +63,10 @@ def run_test(self):\n         zmqHashes = []\n         for x in range(0,n*2):\n             msg = self.zmqSubSocket.recv_multipart()\n-            topic = str(msg[0])\n+            topic = msg[0]\n             body = msg[1]\n-            if topic == \"hashblock\":\n-                zmqHashes.append(binascii.hexlify(body))\n+            if topic == b\"hashblock\":\n+                zmqHashes.append(bytes_to_hex_str(body))\n \n         for x in range(0,n):\n             assert_equal(genhashes[x], zmqHashes[x]) #blockhash from generate must be equal to the hash received over zmq\n@@ -77,11 +77,11 @@ def run_test(self):\n \n         # now we should receive a zmq msg because the tx was broadcast\n         msg = self.zmqSubSocket.recv_multipart()\n-        topic = str(msg[0])\n+        topic = msg[0]\n         body = msg[1]\n         hashZMQ = \"\"\n-        if topic == \"hashtx\":\n-            hashZMQ = binascii.hexlify(body)\n+        if topic == b\"hashtx\":\n+            hashZMQ = bytes_to_hex_str(body)\n \n         assert_equal(hashRPC, hashZMQ) #blockhash from generate must be equal to the hash received over zmq\n "
      },
      {
        "sha": "ae958cfe38f356fce3061f70df5fa002c18571f2",
        "filename": "src/test/bctest.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553/src/test/bctest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553/src/test/bctest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bctest.py?ref=f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553",
        "patch": "@@ -2,6 +2,7 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+from __future__ import division,print_function,unicode_literals\n import subprocess\n import os\n import json"
      }
    ]
  },
  {
    "sha": "28ba22c20209c88a6a903729d3935e836ed0cf1a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOGJhMjJjMjAyMDljODhhNmE5MDM3MjlkMzkzNWU4MzZlZDBjZjFh",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-04-03T19:20:14Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-04-19T14:36:41Z"
      },
      "message": "[qa] Remove misleading \"errorString syntax\"\n\nGithub-Pull: #7801\nRebased-From: ffff866da83209dcaa463d8b9539d3f539f83a97",
      "tree": {
        "sha": "6357e3db5c8dc9d06fb24bfacc07aecb0b6fa740",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6357e3db5c8dc9d06fb24bfacc07aecb0b6fa740"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/28ba22c20209c88a6a903729d3935e836ed0cf1a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28ba22c20209c88a6a903729d3935e836ed0cf1a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/28ba22c20209c88a6a903729d3935e836ed0cf1a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28ba22c20209c88a6a903729d3935e836ed0cf1a/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f1f1b82033271e1f8aa3d84f8e4f8ccc987e6553"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 9,
      "deletions": 11
    },
    "files": [
      {
        "sha": "e38ef6c8b10713b76173f595b208ca2820bdec21",
        "filename": "qa/rpc-tests/rawtransactions.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28ba22c20209c88a6a903729d3935e836ed0cf1a/qa/rpc-tests/rawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28ba22c20209c88a6a903729d3935e836ed0cf1a/qa/rpc-tests/rawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rawtransactions.py?ref=28ba22c20209c88a6a903729d3935e836ed0cf1a",
        "patch": "@@ -56,13 +56,13 @@ def run_test(self):\n         rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n         rawtx   = self.nodes[2].signrawtransaction(rawtx)\n \n-        errorString = \"\"\n         try:\n             rawtx   = self.nodes[2].sendrawtransaction(rawtx['hex'])\n         except JSONRPCException as e:\n-            errorString = e.error['message']\n+            assert(\"Missing inputs\" in e.error['message'])\n+        else:\n+            assert(False)\n \n-        assert(\"Missing inputs\" in errorString)\n \n         #########################\n         # RAW TX MULTISIG TESTS #"
      },
      {
        "sha": "3cf0261f1306ae2c15a097735d0a52fac79743b2",
        "filename": "qa/rpc-tests/wallet.py",
        "status": "modified",
        "additions": 6,
        "deletions": 8,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28ba22c20209c88a6a903729d3935e836ed0cf1a/qa/rpc-tests/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28ba22c20209c88a6a903729d3935e836ed0cf1a/qa/rpc-tests/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet.py?ref=28ba22c20209c88a6a903729d3935e836ed0cf1a",
        "patch": "@@ -246,22 +246,20 @@ def run_test (self):\n         txObj = self.nodes[0].gettransaction(txId)\n         assert_equal(txObj['amount'], Decimal('-0.0001'))\n \n-        #this should fail\n-        errorString = \"\"\n         try:\n             txId  = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), \"1f-4\")\n         except JSONRPCException as e:\n-            errorString = e.error['message']\n+            assert(\"Invalid amount\" in e.error['message'])\n+        else:\n+            raise AssertionError(\"Must not parse invalid amounts\")\n \n-        assert(\"Invalid amount\" in errorString)\n \n-        errorString = \"\"\n         try:\n-            self.nodes[0].generate(\"2\") #use a string to as block amount parameter must fail because it's not interpreted as amount\n+            self.nodes[0].generate(\"2\")\n+            raise AssertionError(\"Must not accept strings as numeric\")\n         except JSONRPCException as e:\n-            errorString = e.error['message']\n+            assert(\"not an integer\" in e.error['message'])\n \n-        assert(\"not an integer\" in errorString)\n \n         #check if wallet or blochchain maintenance changes the balance\n         self.sync_all()"
      }
    ]
  },
  {
    "sha": "6862627ce6bc04e68801f026629932987c3ab424",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ODYyNjI3Y2U2YmMwNGU2ODgwMWYwMjY2Mjk5MzI5ODdjM2FiNDI0",
    "commit": {
      "author": {
        "name": "Joao Fonseca",
        "email": "jpdf.fonseca@gmail.com",
        "date": "2016-04-19T11:22:11Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-04-19T14:37:14Z"
      },
      "message": "Add listunspent() test for spendable/unspendable UTXO\n\nGithub-Pull: #7822\nRebased-From: fa942c755ab513829dcab27487ba1e7ab5a806ee 5d217decc1145823a3c126658c82c60cf7dbfec8",
      "tree": {
        "sha": "cbac56de6ad52eebe40e23048a8e3293c6f2ad9d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cbac56de6ad52eebe40e23048a8e3293c6f2ad9d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6862627ce6bc04e68801f026629932987c3ab424",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6862627ce6bc04e68801f026629932987c3ab424",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6862627ce6bc04e68801f026629932987c3ab424",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6862627ce6bc04e68801f026629932987c3ab424/comments",
    "author": {
      "login": "joaopaulofonseca",
      "id": 16206754,
      "node_id": "MDQ6VXNlcjE2MjA2NzU0",
      "avatar_url": "https://avatars.githubusercontent.com/u/16206754?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/joaopaulofonseca",
      "html_url": "https://github.com/joaopaulofonseca",
      "followers_url": "https://api.github.com/users/joaopaulofonseca/followers",
      "following_url": "https://api.github.com/users/joaopaulofonseca/following{/other_user}",
      "gists_url": "https://api.github.com/users/joaopaulofonseca/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/joaopaulofonseca/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/joaopaulofonseca/subscriptions",
      "organizations_url": "https://api.github.com/users/joaopaulofonseca/orgs",
      "repos_url": "https://api.github.com/users/joaopaulofonseca/repos",
      "events_url": "https://api.github.com/users/joaopaulofonseca/events{/privacy}",
      "received_events_url": "https://api.github.com/users/joaopaulofonseca/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "28ba22c20209c88a6a903729d3935e836ed0cf1a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28ba22c20209c88a6a903729d3935e836ed0cf1a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/28ba22c20209c88a6a903729d3935e836ed0cf1a"
      }
    ],
    "stats": {
      "total": 243,
      "additions": 98,
      "deletions": 145
    },
    "files": [
      {
        "sha": "e2a839f71892474ceb07f90b380db2bf0d761dab",
        "filename": "qa/rpc-tests/getblocktemplate_longpoll.py",
        "status": "modified",
        "additions": 0,
        "deletions": 22,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6862627ce6bc04e68801f026629932987c3ab424/qa/rpc-tests/getblocktemplate_longpoll.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6862627ce6bc04e68801f026629932987c3ab424/qa/rpc-tests/getblocktemplate_longpoll.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/getblocktemplate_longpoll.py?ref=6862627ce6bc04e68801f026629932987c3ab424",
        "patch": "@@ -6,28 +6,6 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n \n-\n-def check_array_result(object_array, to_match, expected):\n-    \"\"\"\n-    Pass in array of JSON objects, a dictionary with key/value pairs\n-    to match against, and another dictionary with expected key/value\n-    pairs.\n-    \"\"\"\n-    num_matched = 0\n-    for item in object_array:\n-        all_match = True\n-        for key,value in to_match.items():\n-            if item[key] != value:\n-                all_match = False\n-        if not all_match:\n-            continue\n-        for key,value in expected.items():\n-            if item[key] != value:\n-                raise AssertionError(\"%s : expected %s=%s\"%(str(item), str(key), str(value)))\n-            num_matched = num_matched+1\n-    if num_matched == 0:\n-        raise AssertionError(\"No objects matched %s\"%(str(to_match)))\n-\n import threading\n \n class LongpollThread(threading.Thread):"
      },
      {
        "sha": "be119031baf0b46086d0b4cf4fc4f9e54b96528e",
        "filename": "qa/rpc-tests/getblocktemplate_proposals.py",
        "status": "modified",
        "additions": 0,
        "deletions": 22,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6862627ce6bc04e68801f026629932987c3ab424/qa/rpc-tests/getblocktemplate_proposals.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6862627ce6bc04e68801f026629932987c3ab424/qa/rpc-tests/getblocktemplate_proposals.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/getblocktemplate_proposals.py?ref=6862627ce6bc04e68801f026629932987c3ab424",
        "patch": "@@ -10,28 +10,6 @@\n from hashlib import sha256\n from struct import pack\n \n-\n-def check_array_result(object_array, to_match, expected):\n-    \"\"\"\n-    Pass in array of JSON objects, a dictionary with key/value pairs\n-    to match against, and another dictionary with expected key/value\n-    pairs.\n-    \"\"\"\n-    num_matched = 0\n-    for item in object_array:\n-        all_match = True\n-        for key,value in to_match.items():\n-            if item[key] != value:\n-                all_match = False\n-        if not all_match:\n-            continue\n-        for key,value in expected.items():\n-            if item[key] != value:\n-                raise AssertionError(\"%s : expected %s=%s\"%(str(item), str(key), str(value)))\n-            num_matched = num_matched+1\n-    if num_matched == 0:\n-        raise AssertionError(\"No objects matched %s\"%(str(to_match)))\n-\n def b2x(b):\n     return b2a_hex(b).decode('ascii')\n "
      },
      {
        "sha": "b86c085e0009e2a2c401dbbca5d5393a2ff3817d",
        "filename": "qa/rpc-tests/keypool.py",
        "status": "modified",
        "additions": 0,
        "deletions": 22,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6862627ce6bc04e68801f026629932987c3ab424/qa/rpc-tests/keypool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6862627ce6bc04e68801f026629932987c3ab424/qa/rpc-tests/keypool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/keypool.py?ref=6862627ce6bc04e68801f026629932987c3ab424",
        "patch": "@@ -10,28 +10,6 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n \n-\n-def check_array_result(object_array, to_match, expected):\n-    \"\"\"\n-    Pass in array of JSON objects, a dictionary with key/value pairs\n-    to match against, and another dictionary with expected key/value\n-    pairs.\n-    \"\"\"\n-    num_matched = 0\n-    for item in object_array:\n-        all_match = True\n-        for key,value in to_match.items():\n-            if item[key] != value:\n-                all_match = False\n-        if not all_match:\n-            continue\n-        for key,value in expected.items():\n-            if item[key] != value:\n-                raise AssertionError(\"%s : expected %s=%s\"%(str(item), str(key), str(value)))\n-            num_matched = num_matched+1\n-    if num_matched == 0:\n-        raise AssertionError(\"No objects matched %s\"%(str(to_match)))\n-\n class KeyPoolTest(BitcoinTestFramework):\n \n     def run_test(self):"
      },
      {
        "sha": "51a29b48e3c92949f05ea5d1e496ef1dbfdc640f",
        "filename": "qa/rpc-tests/listtransactions.py",
        "status": "modified",
        "additions": 25,
        "deletions": 46,
        "changes": 71,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6862627ce6bc04e68801f026629932987c3ab424/qa/rpc-tests/listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6862627ce6bc04e68801f026629932987c3ab424/qa/rpc-tests/listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/listtransactions.py?ref=6862627ce6bc04e68801f026629932987c3ab424",
        "patch": "@@ -16,55 +16,34 @@ def txFromHex(hexstring):\n     tx.deserialize(f)\n     return tx\n \n-def check_array_result(object_array, to_match, expected):\n-    \"\"\"\n-    Pass in array of JSON objects, a dictionary with key/value pairs\n-    to match against, and another dictionary with expected key/value\n-    pairs.\n-    \"\"\"\n-    num_matched = 0\n-    for item in object_array:\n-        all_match = True\n-        for key,value in to_match.items():\n-            if item[key] != value:\n-                all_match = False\n-        if not all_match:\n-            continue\n-        for key,value in expected.items():\n-            if item[key] != value:\n-                raise AssertionError(\"%s : expected %s=%s\"%(str(item), str(key), str(value)))\n-            num_matched = num_matched+1\n-    if num_matched == 0:\n-        raise AssertionError(\"No objects matched %s\"%(str(to_match)))\n-\n class ListTransactionsTest(BitcoinTestFramework):\n \n     def run_test(self):\n         # Simple send, 0 to 1:\n         txid = self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 0.1)\n         self.sync_all()\n-        check_array_result(self.nodes[0].listtransactions(),\n+        assert_array_result(self.nodes[0].listtransactions(),\n                            {\"txid\":txid},\n                            {\"category\":\"send\",\"account\":\"\",\"amount\":Decimal(\"-0.1\"),\"confirmations\":0})\n-        check_array_result(self.nodes[1].listtransactions(),\n+        assert_array_result(self.nodes[1].listtransactions(),\n                            {\"txid\":txid},\n                            {\"category\":\"receive\",\"account\":\"\",\"amount\":Decimal(\"0.1\"),\"confirmations\":0})\n         # mine a block, confirmations should change:\n         self.nodes[0].generate(1)\n         self.sync_all()\n-        check_array_result(self.nodes[0].listtransactions(),\n+        assert_array_result(self.nodes[0].listtransactions(),\n                            {\"txid\":txid},\n                            {\"category\":\"send\",\"account\":\"\",\"amount\":Decimal(\"-0.1\"),\"confirmations\":1})\n-        check_array_result(self.nodes[1].listtransactions(),\n+        assert_array_result(self.nodes[1].listtransactions(),\n                            {\"txid\":txid},\n                            {\"category\":\"receive\",\"account\":\"\",\"amount\":Decimal(\"0.1\"),\"confirmations\":1})\n \n         # send-to-self:\n         txid = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 0.2)\n-        check_array_result(self.nodes[0].listtransactions(),\n+        assert_array_result(self.nodes[0].listtransactions(),\n                            {\"txid\":txid, \"category\":\"send\"},\n                            {\"amount\":Decimal(\"-0.2\")})\n-        check_array_result(self.nodes[0].listtransactions(),\n+        assert_array_result(self.nodes[0].listtransactions(),\n                            {\"txid\":txid, \"category\":\"receive\"},\n                            {\"amount\":Decimal(\"0.2\")})\n \n@@ -75,28 +54,28 @@ def run_test(self):\n                     self.nodes[1].getaccountaddress(\"toself\") : 0.44 }\n         txid = self.nodes[1].sendmany(\"\", send_to)\n         self.sync_all()\n-        check_array_result(self.nodes[1].listtransactions(),\n+        assert_array_result(self.nodes[1].listtransactions(),\n                            {\"category\":\"send\",\"amount\":Decimal(\"-0.11\")},\n                            {\"txid\":txid} )\n-        check_array_result(self.nodes[0].listtransactions(),\n+        assert_array_result(self.nodes[0].listtransactions(),\n                            {\"category\":\"receive\",\"amount\":Decimal(\"0.11\")},\n                            {\"txid\":txid} )\n-        check_array_result(self.nodes[1].listtransactions(),\n+        assert_array_result(self.nodes[1].listtransactions(),\n                            {\"category\":\"send\",\"amount\":Decimal(\"-0.22\")},\n                            {\"txid\":txid} )\n-        check_array_result(self.nodes[1].listtransactions(),\n+        assert_array_result(self.nodes[1].listtransactions(),\n                            {\"category\":\"receive\",\"amount\":Decimal(\"0.22\")},\n                            {\"txid\":txid} )\n-        check_array_result(self.nodes[1].listtransactions(),\n+        assert_array_result(self.nodes[1].listtransactions(),\n                            {\"category\":\"send\",\"amount\":Decimal(\"-0.33\")},\n                            {\"txid\":txid} )\n-        check_array_result(self.nodes[0].listtransactions(),\n+        assert_array_result(self.nodes[0].listtransactions(),\n                            {\"category\":\"receive\",\"amount\":Decimal(\"0.33\")},\n                            {\"txid\":txid, \"account\" : \"from1\"} )\n-        check_array_result(self.nodes[1].listtransactions(),\n+        assert_array_result(self.nodes[1].listtransactions(),\n                            {\"category\":\"send\",\"amount\":Decimal(\"-0.44\")},\n                            {\"txid\":txid, \"account\" : \"\"} )\n-        check_array_result(self.nodes[1].listtransactions(),\n+        assert_array_result(self.nodes[1].listtransactions(),\n                            {\"category\":\"receive\",\"amount\":Decimal(\"0.44\")},\n                            {\"txid\":txid, \"account\" : \"toself\"} )\n \n@@ -106,7 +85,7 @@ def run_test(self):\n         self.nodes[1].generate(1)\n         self.sync_all()\n         assert(len(self.nodes[0].listtransactions(\"watchonly\", 100, 0, False)) == 0)\n-        check_array_result(self.nodes[0].listtransactions(\"watchonly\", 100, 0, True),\n+        assert_array_result(self.nodes[0].listtransactions(\"watchonly\", 100, 0, True),\n                            {\"category\":\"receive\",\"amount\":Decimal(\"0.1\")},\n                            {\"txid\":txid, \"account\" : \"watchonly\"} )\n \n@@ -134,9 +113,9 @@ def get_unconfirmed_utxo_entry(node, txid_to_match):\n         # 1. Chain a few transactions that don't opt-in.\n         txid_1 = self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n         assert(not is_opt_in(self.nodes[0], txid_1))\n-        check_array_result(self.nodes[0].listtransactions(), {\"txid\": txid_1}, {\"bip125-replaceable\":\"no\"})\n+        assert_array_result(self.nodes[0].listtransactions(), {\"txid\": txid_1}, {\"bip125-replaceable\":\"no\"})\n         sync_mempools(self.nodes)\n-        check_array_result(self.nodes[1].listtransactions(), {\"txid\": txid_1}, {\"bip125-replaceable\":\"no\"})\n+        assert_array_result(self.nodes[1].listtransactions(), {\"txid\": txid_1}, {\"bip125-replaceable\":\"no\"})\n \n         # Tx2 will build off txid_1, still not opting in to RBF.\n         utxo_to_use = get_unconfirmed_utxo_entry(self.nodes[1], txid_1)\n@@ -150,9 +129,9 @@ def get_unconfirmed_utxo_entry(node, txid_to_match):\n \n         # ...and check the result\n         assert(not is_opt_in(self.nodes[1], txid_2))\n-        check_array_result(self.nodes[1].listtransactions(), {\"txid\": txid_2}, {\"bip125-replaceable\":\"no\"})\n+        assert_array_result(self.nodes[1].listtransactions(), {\"txid\": txid_2}, {\"bip125-replaceable\":\"no\"})\n         sync_mempools(self.nodes)\n-        check_array_result(self.nodes[0].listtransactions(), {\"txid\": txid_2}, {\"bip125-replaceable\":\"no\"})\n+        assert_array_result(self.nodes[0].listtransactions(), {\"txid\": txid_2}, {\"bip125-replaceable\":\"no\"})\n \n         # Tx3 will opt-in to RBF\n         utxo_to_use = get_unconfirmed_utxo_entry(self.nodes[0], txid_2)\n@@ -166,9 +145,9 @@ def get_unconfirmed_utxo_entry(node, txid_to_match):\n         txid_3 = self.nodes[0].sendrawtransaction(tx3_signed)\n \n         assert(is_opt_in(self.nodes[0], txid_3))\n-        check_array_result(self.nodes[0].listtransactions(), {\"txid\": txid_3}, {\"bip125-replaceable\":\"yes\"})\n+        assert_array_result(self.nodes[0].listtransactions(), {\"txid\": txid_3}, {\"bip125-replaceable\":\"yes\"})\n         sync_mempools(self.nodes)\n-        check_array_result(self.nodes[1].listtransactions(), {\"txid\": txid_3}, {\"bip125-replaceable\":\"yes\"})\n+        assert_array_result(self.nodes[1].listtransactions(), {\"txid\": txid_3}, {\"bip125-replaceable\":\"yes\"})\n \n         # Tx4 will chain off tx3.  Doesn't signal itself, but depends on one\n         # that does.\n@@ -180,9 +159,9 @@ def get_unconfirmed_utxo_entry(node, txid_to_match):\n         txid_4 = self.nodes[1].sendrawtransaction(tx4_signed)\n \n         assert(not is_opt_in(self.nodes[1], txid_4))\n-        check_array_result(self.nodes[1].listtransactions(), {\"txid\": txid_4}, {\"bip125-replaceable\":\"yes\"})\n+        assert_array_result(self.nodes[1].listtransactions(), {\"txid\": txid_4}, {\"bip125-replaceable\":\"yes\"})\n         sync_mempools(self.nodes)\n-        check_array_result(self.nodes[0].listtransactions(), {\"txid\": txid_4}, {\"bip125-replaceable\":\"yes\"})\n+        assert_array_result(self.nodes[0].listtransactions(), {\"txid\": txid_4}, {\"bip125-replaceable\":\"yes\"})\n \n         # Replace tx3, and check that tx4 becomes unknown\n         tx3_b = tx3_modified\n@@ -192,9 +171,9 @@ def get_unconfirmed_utxo_entry(node, txid_to_match):\n         txid_3b = self.nodes[0].sendrawtransaction(tx3_b_signed, True)\n         assert(is_opt_in(self.nodes[0], txid_3b))\n \n-        check_array_result(self.nodes[0].listtransactions(), {\"txid\": txid_4}, {\"bip125-replaceable\":\"unknown\"})\n+        assert_array_result(self.nodes[0].listtransactions(), {\"txid\": txid_4}, {\"bip125-replaceable\":\"unknown\"})\n         sync_mempools(self.nodes)\n-        check_array_result(self.nodes[1].listtransactions(), {\"txid\": txid_4}, {\"bip125-replaceable\":\"unknown\"})\n+        assert_array_result(self.nodes[1].listtransactions(), {\"txid\": txid_4}, {\"bip125-replaceable\":\"unknown\"})\n \n         # Check gettransaction as well:\n         for n in self.nodes[0:2]:"
      },
      {
        "sha": "15ef71a589e1231608bc950626cb3abc5fb98d0d",
        "filename": "qa/rpc-tests/receivedby.py",
        "status": "modified",
        "additions": 7,
        "deletions": 33,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6862627ce6bc04e68801f026629932987c3ab424/qa/rpc-tests/receivedby.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6862627ce6bc04e68801f026629932987c3ab424/qa/rpc-tests/receivedby.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/receivedby.py?ref=6862627ce6bc04e68801f026629932987c3ab424",
        "patch": "@@ -25,32 +25,6 @@ def get_sub_array_from_array(object_array, to_match):\n         return item\n     return []\n \n-def check_array_result(object_array, to_match, expected, should_not_find = False):\n-    \"\"\"\n-        Pass in array of JSON objects, a dictionary with key/value pairs\n-        to match against, and another dictionary with expected key/value\n-        pairs.\n-        If the should_not_find flag is true, to_match should not be found in object_array\n-        \"\"\"\n-    if should_not_find == True:\n-        expected = { }\n-    num_matched = 0\n-    for item in object_array:\n-        all_match = True\n-        for key,value in to_match.items():\n-            if item[key] != value:\n-                all_match = False\n-        if not all_match:\n-            continue\n-        for key,value in expected.items():\n-            if item[key] != value:\n-                raise AssertionError(\"%s : expected %s=%s\"%(str(item), str(key), str(value)))\n-            num_matched = num_matched+1\n-    if num_matched == 0 and should_not_find != True:\n-        raise AssertionError(\"No objects matched %s\"%(str(to_match)))\n-    if num_matched > 0 and should_not_find == True:\n-        raise AssertionError(\"Objects was matched %s\"%(str(to_match)))\n-\n class ReceivedByTest(BitcoinTestFramework):\n \n     def run_test(self):\n@@ -63,26 +37,26 @@ def run_test(self):\n         self.sync_all()\n \n         #Check not listed in listreceivedbyaddress because has 0 confirmations\n-        check_array_result(self.nodes[1].listreceivedbyaddress(),\n+        assert_array_result(self.nodes[1].listreceivedbyaddress(),\n                            {\"address\":addr},\n                            { },\n                            True)\n         #Bury Tx under 10 block so it will be returned by listreceivedbyaddress\n         self.nodes[1].generate(10)\n         self.sync_all()\n-        check_array_result(self.nodes[1].listreceivedbyaddress(),\n+        assert_array_result(self.nodes[1].listreceivedbyaddress(),\n                            {\"address\":addr},\n                            {\"address\":addr, \"account\":\"\", \"amount\":Decimal(\"0.1\"), \"confirmations\":10, \"txids\":[txid,]})\n         #With min confidence < 10\n-        check_array_result(self.nodes[1].listreceivedbyaddress(5),\n+        assert_array_result(self.nodes[1].listreceivedbyaddress(5),\n                            {\"address\":addr},\n                            {\"address\":addr, \"account\":\"\", \"amount\":Decimal(\"0.1\"), \"confirmations\":10, \"txids\":[txid,]})\n         #With min confidence > 10, should not find Tx\n-        check_array_result(self.nodes[1].listreceivedbyaddress(11),{\"address\":addr},{ },True)\n+        assert_array_result(self.nodes[1].listreceivedbyaddress(11),{\"address\":addr},{ },True)\n \n         #Empty Tx\n         addr = self.nodes[1].getnewaddress()\n-        check_array_result(self.nodes[1].listreceivedbyaddress(0,True),\n+        assert_array_result(self.nodes[1].listreceivedbyaddress(0,True),\n                            {\"address\":addr},\n                            {\"address\":addr, \"account\":\"\", \"amount\":0, \"confirmations\":0, \"txids\":[]})\n \n@@ -126,7 +100,7 @@ def run_test(self):\n         self.sync_all()\n \n         # listreceivedbyaccount should return received_by_account_json because of 0 confirmations\n-        check_array_result(self.nodes[1].listreceivedbyaccount(),\n+        assert_array_result(self.nodes[1].listreceivedbyaccount(),\n                            {\"account\":account},\n                            received_by_account_json)\n \n@@ -138,7 +112,7 @@ def run_test(self):\n         self.nodes[1].generate(10)\n         self.sync_all()\n         # listreceivedbyaccount should return updated account balance\n-        check_array_result(self.nodes[1].listreceivedbyaccount(),\n+        assert_array_result(self.nodes[1].listreceivedbyaccount(),\n                            {\"account\":account},\n                            {\"account\":received_by_account_json[\"account\"], \"amount\":(received_by_account_json[\"amount\"] + Decimal(\"0.1\"))})\n "
      },
      {
        "sha": "51e7e021f75cdb81954c01ea3fa60a345f6f3721",
        "filename": "qa/rpc-tests/test_framework/util.py",
        "status": "modified",
        "additions": 29,
        "deletions": 0,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6862627ce6bc04e68801f026629932987c3ab424/qa/rpc-tests/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6862627ce6bc04e68801f026629932987c3ab424/qa/rpc-tests/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/util.py?ref=6862627ce6bc04e68801f026629932987c3ab424",
        "patch": "@@ -437,6 +437,35 @@ def assert_is_hash_string(string, length=64):\n         raise AssertionError(\n             \"String %r contains invalid characters for a hash.\" % string)\n \n+def assert_array_result(object_array, to_match, expected, should_not_find = False):\n+    \"\"\"\n+        Pass in array of JSON objects, a dictionary with key/value pairs\n+        to match against, and another dictionary with expected key/value\n+        pairs.\n+        If the should_not_find flag is true, to_match should not be found\n+        in object_array\n+        \"\"\"\n+    if should_not_find == True:\n+        expected = { }\n+    num_matched = 0\n+    for item in object_array:\n+        all_match = True\n+        for key,value in to_match.items():\n+            if item[key] != value:\n+                all_match = False\n+        if not all_match:\n+            continue\n+        elif should_not_find == True:\n+            num_matched = num_matched+1\n+        for key,value in expected.items():\n+            if item[key] != value:\n+                raise AssertionError(\"%s : expected %s=%s\"%(str(item), str(key), str(value)))\n+            num_matched = num_matched+1\n+    if num_matched == 0 and should_not_find != True:\n+        raise AssertionError(\"No objects matched %s\"%(str(to_match)))\n+    if num_matched > 0 and should_not_find == True:\n+        raise AssertionError(\"Objects were found %s\"%(str(to_match)))\n+\n def satoshi_round(amount):\n     return Decimal(amount).quantize(Decimal('0.00000001'), rounding=ROUND_DOWN)\n "
      },
      {
        "sha": "fd28651678be78fe901a5714209f794793191c3e",
        "filename": "qa/rpc-tests/wallet.py",
        "status": "modified",
        "additions": 37,
        "deletions": 0,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6862627ce6bc04e68801f026629932987c3ab424/qa/rpc-tests/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6862627ce6bc04e68801f026629932987c3ab424/qa/rpc-tests/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet.py?ref=6862627ce6bc04e68801f026629932987c3ab424",
        "patch": "@@ -32,6 +32,12 @@ def setup_network(self, split=False):\n         self.sync_all()\n \n     def run_test (self):\n+\n+        # Check that there's no UTXO on none of the nodes\n+        assert_equal(len(self.nodes[0].listunspent()), 0)\n+        assert_equal(len(self.nodes[1].listunspent()), 0)\n+        assert_equal(len(self.nodes[2].listunspent()), 0)\n+\n         print \"Mining blocks...\"\n \n         self.nodes[0].generate(1)\n@@ -48,6 +54,11 @@ def run_test (self):\n         assert_equal(self.nodes[1].getbalance(), 50)\n         assert_equal(self.nodes[2].getbalance(), 0)\n \n+        # Check that only first and second nodes have UTXOs\n+        assert_equal(len(self.nodes[0].listunspent()), 1)\n+        assert_equal(len(self.nodes[1].listunspent()), 1)\n+        assert_equal(len(self.nodes[2].listunspent()), 0)\n+\n         # Send 21 BTC from 0 to 2 using sendtoaddress call.\n         # Second transaction will be child of first, and will require a fee\n         self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 11)\n@@ -260,6 +271,32 @@ def run_test (self):\n         except JSONRPCException as e:\n             assert(\"not an integer\" in e.error['message'])\n \n+        # Import address and private key to check correct behavior of spendable unspents\n+        # 1. Send some coins to generate new UTXO\n+        address_to_import = self.nodes[2].getnewaddress()\n+        txid = self.nodes[0].sendtoaddress(address_to_import, 1)\n+        self.nodes[0].generate(1)\n+        self.sync_all()\n+\n+        # 2. Import address from node2 to node1\n+        self.nodes[1].importaddress(address_to_import)\n+\n+        # 3. Validate that the imported address is watch-only on node1\n+        assert(self.nodes[1].validateaddress(address_to_import)[\"iswatchonly\"])\n+\n+        # 4. Check that the unspents after import are not spendable\n+        assert_array_result(self.nodes[1].listunspent(),\n+                           {\"address\": address_to_import},\n+                           {\"spendable\": False})\n+\n+        # 5. Import private key of the previously imported address on node1\n+        priv_key = self.nodes[2].dumpprivkey(address_to_import)\n+        self.nodes[1].importprivkey(priv_key)\n+\n+        # 6. Check that the unspents are now spendable on node1\n+        assert_array_result(self.nodes[1].listunspent(),\n+                           {\"address\": address_to_import},\n+                           {\"spendable\": True})\n \n         #check if wallet or blochchain maintenance changes the balance\n         self.sync_all()"
      }
    ]
  }
]