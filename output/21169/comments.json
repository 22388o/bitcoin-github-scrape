[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/783166677",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21169#issuecomment-783166677",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21169",
    "id": 783166677,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4MzE2NjY3Nw==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-22T07:49:30Z",
    "updated_at": "2021-04-09T16:57:00Z",
    "author_association": "MEMBER",
    "body": "I am not sure if this is worth it. This needs a lot of maintenance (adding or removing rpcs, marking them unsafe, ...) and I am sceptical that this will find any actual issues.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/783166677/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/827747428",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21169#issuecomment-827747428",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21169",
    "id": 827747428,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyNzc0NzQyOA==",
    "user": {
      "login": "adamjonas",
      "id": 755825,
      "node_id": "MDQ6VXNlcjc1NTgyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/755825?u=fc2e6f106f98731d49e9787f9cbfe86a17447c23&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adamjonas",
      "html_url": "https://github.com/adamjonas",
      "followers_url": "https://api.github.com/users/adamjonas/followers",
      "following_url": "https://api.github.com/users/adamjonas/following{/other_user}",
      "gists_url": "https://api.github.com/users/adamjonas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adamjonas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adamjonas/subscriptions",
      "organizations_url": "https://api.github.com/users/adamjonas/orgs",
      "repos_url": "https://api.github.com/users/adamjonas/repos",
      "events_url": "https://api.github.com/users/adamjonas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adamjonas/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-27T16:35:19Z",
    "updated_at": "2021-04-27T16:35:19Z",
    "author_association": "MEMBER",
    "body": "@MarcoFalke to clarify, are you a NACK on this?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/827747428/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/827874086",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21169#issuecomment-827874086",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21169",
    "id": 827874086,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyNzg3NDA4Ng==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-27T19:42:33Z",
    "updated_at": "2021-04-27T20:09:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "@adamjonas\r\n\r\nGood question and thanks for asking it explicitly! :)\r\n\r\nI should probably have stated that more clearly in the PR description, but it should be noted that this fuzzing harness is by far is the \"most covering\" harness in the repo.\r\n\r\nIncluding this harness in the existing set of fuzzing harnesses adds coverage to five(!) percent of the code base that is currently uncovered by fuzz testing. The total fuzzing coverage increases from 65% to 70%.\r\n\r\nThe opportunities to achieve such extreme coverage jumps from adding a single harness are _extremely_ rare at the relatively high levels of fuzzing coverage we've reached. TBH it would feel a bit disappointing if we had to pass on the excellent coverage opportunity that RPC fuzzing brings :)\r\n\r\n@MarcoFalke, if we can find a way to reduce/mitigate the potential maintenance work you predict in https://github.com/bitcoin/bitcoin/pull/21169#issuecomment-783166677 would you be willing to reconsider your position? :)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/827874086/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/828229380",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21169#issuecomment-828229380",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21169",
    "id": 828229380,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyODIyOTM4MA==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-28T07:45:13Z",
    "updated_at": "2021-04-28T07:45:13Z",
    "author_association": "MEMBER",
    "body": "Concept ACK 545404e7e1c72985557ccffe865cea269143e5dd\r\n\r\nIf this is leading to too much (maintenance) hassle, it can be reverted.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/828229380/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/575675324",
    "pull_request_review_id": 589972631,
    "id": 575675324,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTY3NTMyNA==",
    "diff_hunk": "@@ -0,0 +1,381 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <base58.h>\n+#include <chainparamsbase.h>\n+#include <core_io.h>\n+#include <interfaces/chain.h>\n+#include <key.h>\n+#include <key_io.h>\n+#include <node/context.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <psbt.h>\n+#include <rpc/blockchain.h>\n+#include <rpc/client.h>\n+#include <rpc/request.h>\n+#include <rpc/server.h>\n+#include <rpc/util.h>\n+#include <span.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+#include <tinyformat.h>\n+#include <univalue.h>\n+#include <util/ref.h>\n+#include <util/strencodings.h>\n+#include <util/string.h>\n+#include <util/time.h>\n+\n+#include <cstdint>\n+#include <iostream>\n+#include <memory>\n+#include <optional>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+struct RPCFuzzTestingSetup : public TestingSetup {\n+    RPCFuzzTestingSetup(const std::string& chain_name, const std::vector<const char*>& extra_args) : TestingSetup{chain_name, extra_args}\n+    {\n+    }\n+\n+    UniValue CallRPC(const std::string rpc_method, const std::vector<std::string>& arguments)",
    "path": "src/test/fuzz/rpc.cpp",
    "position": null,
    "original_position": 47,
    "commit_id": "545404e7e1c72985557ccffe865cea269143e5dd",
    "original_commit_id": "e4e3b56d30587c18e6e8dec0ef88bec2207e8735",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```suggestion\r\n    UniValue CallRPC(const std::string& rpc_method, const std::vector<std::string>& arguments)\r\n```",
    "created_at": "2021-02-13T14:52:14Z",
    "updated_at": "2021-04-28T06:38:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21169#discussion_r575675324",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21169",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/575675324"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21169#discussion_r575675324"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21169"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/575675324/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 47,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/576402952",
    "pull_request_review_id": 590731477,
    "id": 576402952,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjQwMjk1Mg==",
    "diff_hunk": "@@ -0,0 +1,381 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <base58.h>\n+#include <chainparamsbase.h>\n+#include <core_io.h>\n+#include <interfaces/chain.h>\n+#include <key.h>\n+#include <key_io.h>\n+#include <node/context.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <psbt.h>\n+#include <rpc/blockchain.h>\n+#include <rpc/client.h>\n+#include <rpc/request.h>\n+#include <rpc/server.h>\n+#include <rpc/util.h>\n+#include <span.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+#include <tinyformat.h>\n+#include <univalue.h>\n+#include <util/ref.h>\n+#include <util/strencodings.h>\n+#include <util/string.h>\n+#include <util/time.h>\n+\n+#include <cstdint>\n+#include <iostream>\n+#include <memory>\n+#include <optional>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+struct RPCFuzzTestingSetup : public TestingSetup {\n+    RPCFuzzTestingSetup(const std::string& chain_name, const std::vector<const char*>& extra_args) : TestingSetup{chain_name, extra_args}\n+    {\n+    }\n+\n+    UniValue CallRPC(const std::string rpc_method, const std::vector<std::string>& arguments)",
    "path": "src/test/fuzz/rpc.cpp",
    "position": null,
    "original_position": 47,
    "commit_id": "545404e7e1c72985557ccffe865cea269143e5dd",
    "original_commit_id": "e4e3b56d30587c18e6e8dec0ef88bec2207e8735",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "First code review LGTM otherwise.",
    "created_at": "2021-02-15T20:10:17Z",
    "updated_at": "2021-04-28T06:38:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21169#discussion_r576402952",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21169",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/576402952"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21169#discussion_r576402952"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21169"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/576402952/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 47,
    "side": "RIGHT",
    "in_reply_to_id": 575675324
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/580039685",
    "pull_request_review_id": 595076304,
    "id": 580039685,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDAzOTY4NQ==",
    "diff_hunk": "@@ -0,0 +1,381 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <base58.h>\n+#include <chainparamsbase.h>\n+#include <core_io.h>\n+#include <interfaces/chain.h>\n+#include <key.h>\n+#include <key_io.h>\n+#include <node/context.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <psbt.h>\n+#include <rpc/blockchain.h>\n+#include <rpc/client.h>\n+#include <rpc/request.h>\n+#include <rpc/server.h>\n+#include <rpc/util.h>\n+#include <span.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+#include <tinyformat.h>\n+#include <univalue.h>\n+#include <util/ref.h>\n+#include <util/strencodings.h>\n+#include <util/string.h>\n+#include <util/time.h>\n+\n+#include <cstdint>\n+#include <iostream>\n+#include <memory>\n+#include <optional>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+struct RPCFuzzTestingSetup : public TestingSetup {\n+    RPCFuzzTestingSetup(const std::string& chain_name, const std::vector<const char*>& extra_args) : TestingSetup{chain_name, extra_args}\n+    {\n+    }\n+\n+    UniValue CallRPC(const std::string rpc_method, const std::vector<std::string>& arguments)\n+    {\n+        util::Ref context{m_node};\n+        JSONRPCRequest request{context};\n+        request.fHelp = false;\n+        request.params = RPCConvertValues(rpc_method, arguments);\n+        request.strMethod = rpc_method;\n+        return tableRPC.execute(request);\n+    }\n+\n+    std::vector<std::string> GetRPCCommands() const\n+    {\n+        return tableRPC.listCommands();\n+    }\n+};\n+\n+RPCFuzzTestingSetup* rpc_testing_setup = nullptr;\n+std::string limit_to_rpc_command;\n+\n+// RPC commands which are not appropriate for fuzzing: such as RPC commands\n+// reading or writing to a filename passed as an RPC parameter, RPC commands\n+// resulting in network activity, etc.\n+const std::vector<std::string> RPC_COMMANDS_NOT_SAFE_FOR_FUZZING{\n+    \"addconnection\",         // avoid DNS lookups\n+    \"addnode\",               // avoid DNS lookups\n+    \"addpeeraddress\",        // avoid DNS lookups\n+    \"analyzepsbt\",           // avoid signed integer overflow in CFeeRate::GetFee(unsigned long) (https://github.com/bitcoin/bitcoin/issues/20607)\n+    \"decoderawtransaction\",  // avoid signed integer overflow in ValueFromAmount(long const&) (https://github.com/bitcoin/bitcoin/pull/20406)\n+    \"dumptxoutset\",          // avoid writing to disk\n+#ifdef ENABLE_WALLET\n+    \"dumpwallet\",            // avoid writing to disk\n+#endif\n+    \"generatetoaddress\",     // avoid timeout\n+    \"gettxoutproof\",         // avoid slow execution\n+#ifdef ENABLE_WALLET\n+    \"importwallet\",          // avoid reading from disk\n+#endif\n+    \"invalidateblock\",       // avoid nullptr dereference in CBlockIndexWorkComparator::operator() (https://github.com/bitcoin/bitcoin/issues/20914)\n+#ifdef ENABLE_WALLET\n+    \"loadwallet\",            // avoid reading from disk\n+#endif\n+    \"mockscheduler\",         // avoid assertion failure (Assertion `delta_seconds.count() > 0 && delta_seconds < std::chrono::hours{1}' failed.)\n+    \"prioritisetransaction\", // avoid signed integer overflow in CTxMemPool::PrioritiseTransaction(uint256 const&, long const&) (https://github.com/bitcoin/bitcoin/issues/20626)\n+    \"setban\",                // avoid DNS lookups\n+    \"stop\",                  // avoid shutdown state\n+};\n+\n+// RPC commands which are safe for fuzzing.\n+const std::vector<std::string> RPC_COMMANDS_SAFE_FOR_FUZZING{\n+    \"clearbanned\",\n+    \"combinepsbt\",\n+    \"combinerawtransaction\",\n+    \"converttopsbt\",\n+    \"createmultisig\",\n+    \"createpsbt\",\n+    \"createrawtransaction\",\n+    \"decodepsbt\",\n+    \"decodescript\",\n+    \"deriveaddresses\",\n+    \"disconnectnode\",\n+    \"echo\",\n+    \"echojson\",\n+    \"estimaterawfee\",\n+    \"estimatesmartfee\",\n+    \"finalizepsbt\",\n+    \"generate\",\n+    \"generateblock\",\n+    \"generatetodescriptor\",\n+    \"getaddednodeinfo\",\n+    \"getbestblockhash\",\n+    \"getblock\",\n+    \"getblockchaininfo\",\n+    \"getblockcount\",\n+    \"getblockfilter\",\n+    \"getblockhash\",\n+    \"getblockheader\",\n+    \"getblockstats\",\n+    \"getblocktemplate\",\n+    \"getchaintips\",\n+    \"getchaintxstats\",\n+    \"getconnectioncount\",\n+    \"getdescriptorinfo\",\n+    \"getdifficulty\",\n+    \"getindexinfo\",\n+    \"getmemoryinfo\",\n+    \"getmempoolancestors\",\n+    \"getmempooldescendants\",\n+    \"getmempoolentry\",\n+    \"getmempoolinfo\",\n+    \"getmininginfo\",\n+    \"getnettotals\",\n+    \"getnetworkhashps\",\n+    \"getnetworkinfo\",\n+    \"getnodeaddresses\",\n+    \"getpeerinfo\",\n+    \"getrawmempool\",\n+    \"getrawtransaction\",\n+    \"getrpcinfo\",\n+    \"gettxout\",\n+    \"gettxoutsetinfo\",\n+    \"help\",\n+    \"joinpsbts\",\n+    \"listbanned\",\n+    \"logging\",\n+    \"ping\",\n+    \"preciousblock\",\n+    \"pruneblockchain\",\n+    \"reconsiderblock\",\n+    \"savemempool\",\n+    \"scantxoutset\",\n+    \"sendrawtransaction\",\n+    \"setmocktime\",\n+    \"setnetworkactive\",\n+    \"signmessagewithprivkey\",\n+    \"signrawtransactionwithkey\",\n+    \"submitblock\",\n+    \"submitheader\",\n+    \"syncwithvalidationinterfacequeue\",\n+    \"testmempoolaccept\",\n+    \"uptime\",\n+    \"utxoupdatepsbt\",\n+    \"validateaddress\",\n+    \"verifychain\",\n+    \"verifymessage\",\n+    \"verifytxoutproof\",\n+    \"waitforblock\",\n+    \"waitforblockheight\",\n+    \"waitfornewblock\",\n+};\n+\n+std::string ConsumeScalarRPCArgument(FuzzedDataProvider& fuzzed_data_provider)\n+{\n+    const size_t max_string_length = 4096;\n+    std::string r;\n+    CallOneOf(\n+        fuzzed_data_provider,\n+        [&] {\n+            // string argument\n+            r = fuzzed_data_provider.ConsumeRandomLengthString(max_string_length);\n+        },\n+        [&] {\n+            // base64 argument\n+            r = EncodeBase64(fuzzed_data_provider.ConsumeRandomLengthString(max_string_length));\n+        },\n+        [&] {\n+            // hex argument\n+            r = HexStr(fuzzed_data_provider.ConsumeRandomLengthString(max_string_length));\n+        },\n+        [&] {\n+            // bool argument\n+            r = fuzzed_data_provider.ConsumeBool() ? \"true\" : \"false\";\n+        },\n+        [&] {\n+            // range argument\n+            r = \"[\" + ToString(fuzzed_data_provider.ConsumeIntegral<int64_t>()) + \",\" + ToString(fuzzed_data_provider.ConsumeIntegral<int64_t>()) + \"]\";\n+        },\n+        [&] {\n+            // integral argument (int64_t)\n+            r = ToString(fuzzed_data_provider.ConsumeIntegral<int64_t>());\n+        },\n+        [&] {\n+            // integral argument (uint64_t)\n+            r = ToString(fuzzed_data_provider.ConsumeIntegral<uint64_t>());\n+        },\n+        [&] {\n+            // floating point argument\n+            r = strprintf(\"%f\", fuzzed_data_provider.ConsumeFloatingPoint<double>());\n+        },\n+        [&] {\n+            // tx destination argument\n+            r = EncodeDestination(ConsumeTxDestination(fuzzed_data_provider));\n+        },\n+        [&] {\n+            // uint160 argument\n+            r = ConsumeUInt160(fuzzed_data_provider).ToString();\n+        },\n+        [&] {\n+            // uint256 argument\n+            r = ConsumeUInt256(fuzzed_data_provider).ToString();\n+        },\n+        [&] {\n+            // base32 argument\n+            r = EncodeBase32(fuzzed_data_provider.ConsumeRandomLengthString(max_string_length));\n+        },\n+        [&] {\n+            // base58 argument\n+            r = EncodeBase58(MakeUCharSpan(fuzzed_data_provider.ConsumeRandomLengthString(max_string_length)));\n+        },\n+        [&] {\n+            // base58 argument with checksum\n+            r = EncodeBase58Check(MakeUCharSpan(fuzzed_data_provider.ConsumeRandomLengthString(max_string_length)));\n+        },\n+        [&] {\n+            // hex encoded block\n+            std::optional<CBlock> opt_block = ConsumeDeserializable<CBlock>(fuzzed_data_provider);\n+            if (!opt_block) {\n+                return;\n+            }\n+            CDataStream data_stream{SER_NETWORK, PROTOCOL_VERSION};\n+            data_stream << *opt_block;\n+            r = HexStr(data_stream);\n+        },\n+        [&] {\n+            // hex encoded block header\n+            std::optional<CBlockHeader> opt_block_header = ConsumeDeserializable<CBlockHeader>(fuzzed_data_provider);\n+            if (!opt_block_header) {\n+                return;\n+            }\n+            CDataStream data_stream{SER_NETWORK, PROTOCOL_VERSION};\n+            data_stream << *opt_block_header;\n+            r = HexStr(data_stream);\n+        },\n+        [&] {\n+            // hex encoded tx\n+            std::optional<CMutableTransaction> opt_tx = ConsumeDeserializable<CMutableTransaction>(fuzzed_data_provider);\n+            if (!opt_tx) {\n+                return;\n+            }\n+            CDataStream data_stream{SER_NETWORK, fuzzed_data_provider.ConsumeBool() ? PROTOCOL_VERSION : (PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS)};\n+            data_stream << *opt_tx;\n+            r = HexStr(data_stream);\n+        },\n+        [&] {\n+            // base64 encoded psbt\n+            std::optional<PartiallySignedTransaction> opt_psbt = ConsumeDeserializable<PartiallySignedTransaction>(fuzzed_data_provider);\n+            if (!opt_psbt) {\n+                return;\n+            }\n+            CDataStream data_stream{SER_NETWORK, PROTOCOL_VERSION};\n+            data_stream << *opt_psbt;\n+            r = EncodeBase64({data_stream.begin(), data_stream.end()});\n+        },\n+        [&] {\n+            // base58 encoded key\n+            const std::vector<uint8_t> random_bytes = fuzzed_data_provider.ConsumeBytes<uint8_t>(32);\n+            CKey key;\n+            key.Set(random_bytes.begin(), random_bytes.end(), fuzzed_data_provider.ConsumeBool());\n+            if (!key.IsValid()) {\n+                return;\n+            }\n+            r = EncodeSecret(key);\n+        },\n+        [&] {\n+            // hex encoded pubkey\n+            const std::vector<uint8_t> random_bytes = fuzzed_data_provider.ConsumeBytes<uint8_t>(32);\n+            CKey key;\n+            key.Set(random_bytes.begin(), random_bytes.end(), fuzzed_data_provider.ConsumeBool());\n+            if (!key.IsValid()) {\n+                return;\n+            }\n+            r = HexStr(key.GetPubKey());\n+        });\n+    return r;\n+}\n+\n+std::string ConsumeArrayRPCArgument(FuzzedDataProvider& fuzzed_data_provider)\n+{\n+    std::vector<std::string> scalar_arguments;\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        scalar_arguments.push_back(ConsumeScalarRPCArgument(fuzzed_data_provider));\n+    }\n+    return \"[\\\"\" + Join(scalar_arguments, \"\\\",\\\"\") + \"\\\"]\";\n+}\n+\n+std::string ConsumeRPCArgument(FuzzedDataProvider& fuzzed_data_provider)\n+{\n+    return fuzzed_data_provider.ConsumeBool() ? ConsumeScalarRPCArgument(fuzzed_data_provider) : ConsumeArrayRPCArgument(fuzzed_data_provider);\n+}\n+\n+RPCFuzzTestingSetup* InitializeRPCFuzzTestingSetup()\n+{\n+    static std::unique_ptr<RPCFuzzTestingSetup> setup = std::make_unique<RPCFuzzTestingSetup>(CBaseChainParams::REGTEST, std::vector<const char*>{\"-nodebuglogfile\"});",
    "path": "src/test/fuzz/rpc.cpp",
    "position": null,
    "original_position": 318,
    "commit_id": "545404e7e1c72985557ccffe865cea269143e5dd",
    "original_commit_id": "e4e3b56d30587c18e6e8dec0ef88bec2207e8735",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Should use MakeNoLogFileContext?",
    "created_at": "2021-02-22T07:47:42Z",
    "updated_at": "2021-04-28T06:38:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21169#discussion_r580039685",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21169",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/580039685"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21169#discussion_r580039685"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21169"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/580039685/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 318,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621602312",
    "pull_request_review_id": 646361286,
    "id": 621602312,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMTYwMjMxMg==",
    "diff_hunk": "@@ -0,0 +1,381 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <base58.h>\n+#include <chainparamsbase.h>\n+#include <core_io.h>\n+#include <interfaces/chain.h>\n+#include <key.h>\n+#include <key_io.h>\n+#include <node/context.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <psbt.h>\n+#include <rpc/blockchain.h>\n+#include <rpc/client.h>\n+#include <rpc/request.h>\n+#include <rpc/server.h>\n+#include <rpc/util.h>\n+#include <span.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+#include <tinyformat.h>\n+#include <univalue.h>\n+#include <util/ref.h>\n+#include <util/strencodings.h>\n+#include <util/string.h>\n+#include <util/time.h>\n+\n+#include <cstdint>\n+#include <iostream>\n+#include <memory>\n+#include <optional>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+struct RPCFuzzTestingSetup : public TestingSetup {\n+    RPCFuzzTestingSetup(const std::string& chain_name, const std::vector<const char*>& extra_args) : TestingSetup{chain_name, extra_args}\n+    {\n+    }\n+\n+    UniValue CallRPC(const std::string rpc_method, const std::vector<std::string>& arguments)\n+    {\n+        util::Ref context{m_node};\n+        JSONRPCRequest request{context};\n+        request.fHelp = false;\n+        request.params = RPCConvertValues(rpc_method, arguments);\n+        request.strMethod = rpc_method;\n+        return tableRPC.execute(request);\n+    }\n+\n+    std::vector<std::string> GetRPCCommands() const\n+    {\n+        return tableRPC.listCommands();\n+    }\n+};\n+\n+RPCFuzzTestingSetup* rpc_testing_setup = nullptr;\n+std::string limit_to_rpc_command;\n+\n+// RPC commands which are not appropriate for fuzzing: such as RPC commands\n+// reading or writing to a filename passed as an RPC parameter, RPC commands\n+// resulting in network activity, etc.\n+const std::vector<std::string> RPC_COMMANDS_NOT_SAFE_FOR_FUZZING{\n+    \"addconnection\",         // avoid DNS lookups\n+    \"addnode\",               // avoid DNS lookups\n+    \"addpeeraddress\",        // avoid DNS lookups\n+    \"analyzepsbt\",           // avoid signed integer overflow in CFeeRate::GetFee(unsigned long) (https://github.com/bitcoin/bitcoin/issues/20607)\n+    \"decoderawtransaction\",  // avoid signed integer overflow in ValueFromAmount(long const&) (https://github.com/bitcoin/bitcoin/pull/20406)\n+    \"dumptxoutset\",          // avoid writing to disk\n+#ifdef ENABLE_WALLET\n+    \"dumpwallet\",            // avoid writing to disk\n+#endif\n+    \"generatetoaddress\",     // avoid timeout\n+    \"gettxoutproof\",         // avoid slow execution\n+#ifdef ENABLE_WALLET\n+    \"importwallet\",          // avoid reading from disk\n+#endif\n+    \"invalidateblock\",       // avoid nullptr dereference in CBlockIndexWorkComparator::operator() (https://github.com/bitcoin/bitcoin/issues/20914)\n+#ifdef ENABLE_WALLET\n+    \"loadwallet\",            // avoid reading from disk\n+#endif\n+    \"mockscheduler\",         // avoid assertion failure (Assertion `delta_seconds.count() > 0 && delta_seconds < std::chrono::hours{1}' failed.)\n+    \"prioritisetransaction\", // avoid signed integer overflow in CTxMemPool::PrioritiseTransaction(uint256 const&, long const&) (https://github.com/bitcoin/bitcoin/issues/20626)\n+    \"setban\",                // avoid DNS lookups\n+    \"stop\",                  // avoid shutdown state\n+};\n+\n+// RPC commands which are safe for fuzzing.\n+const std::vector<std::string> RPC_COMMANDS_SAFE_FOR_FUZZING{\n+    \"clearbanned\",\n+    \"combinepsbt\",\n+    \"combinerawtransaction\",\n+    \"converttopsbt\",\n+    \"createmultisig\",\n+    \"createpsbt\",\n+    \"createrawtransaction\",\n+    \"decodepsbt\",\n+    \"decodescript\",\n+    \"deriveaddresses\",\n+    \"disconnectnode\",\n+    \"echo\",\n+    \"echojson\",\n+    \"estimaterawfee\",\n+    \"estimatesmartfee\",\n+    \"finalizepsbt\",\n+    \"generate\",\n+    \"generateblock\",\n+    \"generatetodescriptor\",\n+    \"getaddednodeinfo\",\n+    \"getbestblockhash\",\n+    \"getblock\",\n+    \"getblockchaininfo\",\n+    \"getblockcount\",\n+    \"getblockfilter\",\n+    \"getblockhash\",\n+    \"getblockheader\",\n+    \"getblockstats\",\n+    \"getblocktemplate\",\n+    \"getchaintips\",\n+    \"getchaintxstats\",\n+    \"getconnectioncount\",\n+    \"getdescriptorinfo\",\n+    \"getdifficulty\",\n+    \"getindexinfo\",\n+    \"getmemoryinfo\",\n+    \"getmempoolancestors\",\n+    \"getmempooldescendants\",\n+    \"getmempoolentry\",\n+    \"getmempoolinfo\",\n+    \"getmininginfo\",\n+    \"getnettotals\",\n+    \"getnetworkhashps\",\n+    \"getnetworkinfo\",\n+    \"getnodeaddresses\",\n+    \"getpeerinfo\",\n+    \"getrawmempool\",\n+    \"getrawtransaction\",\n+    \"getrpcinfo\",\n+    \"gettxout\",\n+    \"gettxoutsetinfo\",\n+    \"help\",\n+    \"joinpsbts\",\n+    \"listbanned\",\n+    \"logging\",\n+    \"ping\",\n+    \"preciousblock\",\n+    \"pruneblockchain\",\n+    \"reconsiderblock\",\n+    \"savemempool\",\n+    \"scantxoutset\",\n+    \"sendrawtransaction\",\n+    \"setmocktime\",\n+    \"setnetworkactive\",\n+    \"signmessagewithprivkey\",\n+    \"signrawtransactionwithkey\",\n+    \"submitblock\",\n+    \"submitheader\",\n+    \"syncwithvalidationinterfacequeue\",\n+    \"testmempoolaccept\",\n+    \"uptime\",\n+    \"utxoupdatepsbt\",\n+    \"validateaddress\",\n+    \"verifychain\",\n+    \"verifymessage\",\n+    \"verifytxoutproof\",\n+    \"waitforblock\",\n+    \"waitforblockheight\",\n+    \"waitfornewblock\",\n+};\n+\n+std::string ConsumeScalarRPCArgument(FuzzedDataProvider& fuzzed_data_provider)\n+{\n+    const size_t max_string_length = 4096;\n+    std::string r;\n+    CallOneOf(\n+        fuzzed_data_provider,\n+        [&] {\n+            // string argument\n+            r = fuzzed_data_provider.ConsumeRandomLengthString(max_string_length);\n+        },\n+        [&] {\n+            // base64 argument\n+            r = EncodeBase64(fuzzed_data_provider.ConsumeRandomLengthString(max_string_length));\n+        },\n+        [&] {\n+            // hex argument\n+            r = HexStr(fuzzed_data_provider.ConsumeRandomLengthString(max_string_length));\n+        },\n+        [&] {\n+            // bool argument\n+            r = fuzzed_data_provider.ConsumeBool() ? \"true\" : \"false\";\n+        },\n+        [&] {\n+            // range argument\n+            r = \"[\" + ToString(fuzzed_data_provider.ConsumeIntegral<int64_t>()) + \",\" + ToString(fuzzed_data_provider.ConsumeIntegral<int64_t>()) + \"]\";\n+        },\n+        [&] {\n+            // integral argument (int64_t)\n+            r = ToString(fuzzed_data_provider.ConsumeIntegral<int64_t>());\n+        },\n+        [&] {\n+            // integral argument (uint64_t)\n+            r = ToString(fuzzed_data_provider.ConsumeIntegral<uint64_t>());\n+        },\n+        [&] {\n+            // floating point argument\n+            r = strprintf(\"%f\", fuzzed_data_provider.ConsumeFloatingPoint<double>());\n+        },\n+        [&] {\n+            // tx destination argument\n+            r = EncodeDestination(ConsumeTxDestination(fuzzed_data_provider));\n+        },\n+        [&] {\n+            // uint160 argument\n+            r = ConsumeUInt160(fuzzed_data_provider).ToString();\n+        },\n+        [&] {\n+            // uint256 argument\n+            r = ConsumeUInt256(fuzzed_data_provider).ToString();\n+        },\n+        [&] {\n+            // base32 argument\n+            r = EncodeBase32(fuzzed_data_provider.ConsumeRandomLengthString(max_string_length));\n+        },\n+        [&] {\n+            // base58 argument\n+            r = EncodeBase58(MakeUCharSpan(fuzzed_data_provider.ConsumeRandomLengthString(max_string_length)));\n+        },\n+        [&] {\n+            // base58 argument with checksum\n+            r = EncodeBase58Check(MakeUCharSpan(fuzzed_data_provider.ConsumeRandomLengthString(max_string_length)));\n+        },\n+        [&] {\n+            // hex encoded block\n+            std::optional<CBlock> opt_block = ConsumeDeserializable<CBlock>(fuzzed_data_provider);\n+            if (!opt_block) {\n+                return;\n+            }\n+            CDataStream data_stream{SER_NETWORK, PROTOCOL_VERSION};\n+            data_stream << *opt_block;\n+            r = HexStr(data_stream);\n+        },\n+        [&] {\n+            // hex encoded block header\n+            std::optional<CBlockHeader> opt_block_header = ConsumeDeserializable<CBlockHeader>(fuzzed_data_provider);\n+            if (!opt_block_header) {\n+                return;\n+            }\n+            CDataStream data_stream{SER_NETWORK, PROTOCOL_VERSION};\n+            data_stream << *opt_block_header;\n+            r = HexStr(data_stream);\n+        },\n+        [&] {\n+            // hex encoded tx\n+            std::optional<CMutableTransaction> opt_tx = ConsumeDeserializable<CMutableTransaction>(fuzzed_data_provider);\n+            if (!opt_tx) {\n+                return;\n+            }\n+            CDataStream data_stream{SER_NETWORK, fuzzed_data_provider.ConsumeBool() ? PROTOCOL_VERSION : (PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS)};\n+            data_stream << *opt_tx;\n+            r = HexStr(data_stream);\n+        },\n+        [&] {\n+            // base64 encoded psbt\n+            std::optional<PartiallySignedTransaction> opt_psbt = ConsumeDeserializable<PartiallySignedTransaction>(fuzzed_data_provider);\n+            if (!opt_psbt) {\n+                return;\n+            }\n+            CDataStream data_stream{SER_NETWORK, PROTOCOL_VERSION};\n+            data_stream << *opt_psbt;\n+            r = EncodeBase64({data_stream.begin(), data_stream.end()});\n+        },\n+        [&] {\n+            // base58 encoded key\n+            const std::vector<uint8_t> random_bytes = fuzzed_data_provider.ConsumeBytes<uint8_t>(32);\n+            CKey key;\n+            key.Set(random_bytes.begin(), random_bytes.end(), fuzzed_data_provider.ConsumeBool());\n+            if (!key.IsValid()) {\n+                return;\n+            }\n+            r = EncodeSecret(key);\n+        },\n+        [&] {\n+            // hex encoded pubkey\n+            const std::vector<uint8_t> random_bytes = fuzzed_data_provider.ConsumeBytes<uint8_t>(32);\n+            CKey key;\n+            key.Set(random_bytes.begin(), random_bytes.end(), fuzzed_data_provider.ConsumeBool());\n+            if (!key.IsValid()) {\n+                return;\n+            }\n+            r = HexStr(key.GetPubKey());\n+        });\n+    return r;\n+}\n+\n+std::string ConsumeArrayRPCArgument(FuzzedDataProvider& fuzzed_data_provider)\n+{\n+    std::vector<std::string> scalar_arguments;\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        scalar_arguments.push_back(ConsumeScalarRPCArgument(fuzzed_data_provider));\n+    }\n+    return \"[\\\"\" + Join(scalar_arguments, \"\\\",\\\"\") + \"\\\"]\";\n+}\n+\n+std::string ConsumeRPCArgument(FuzzedDataProvider& fuzzed_data_provider)\n+{\n+    return fuzzed_data_provider.ConsumeBool() ? ConsumeScalarRPCArgument(fuzzed_data_provider) : ConsumeArrayRPCArgument(fuzzed_data_provider);\n+}\n+\n+RPCFuzzTestingSetup* InitializeRPCFuzzTestingSetup()\n+{\n+    static std::unique_ptr<RPCFuzzTestingSetup> setup = std::make_unique<RPCFuzzTestingSetup>(CBaseChainParams::REGTEST, std::vector<const char*>{\"-nodebuglogfile\"});",
    "path": "src/test/fuzz/rpc.cpp",
    "position": null,
    "original_position": 318,
    "commit_id": "545404e7e1c72985557ccffe865cea269143e5dd",
    "original_commit_id": "e4e3b56d30587c18e6e8dec0ef88bec2207e8735",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Good point! Done!",
    "created_at": "2021-04-27T21:09:02Z",
    "updated_at": "2021-04-28T06:38:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21169#discussion_r621602312",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21169",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621602312"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21169#discussion_r621602312"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21169"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621602312/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 318,
    "side": "RIGHT",
    "in_reply_to_id": 580039685
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621607064",
    "pull_request_review_id": 646367092,
    "id": 621607064,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMTYwNzA2NA==",
    "diff_hunk": "@@ -0,0 +1,381 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <base58.h>\n+#include <chainparamsbase.h>\n+#include <core_io.h>\n+#include <interfaces/chain.h>\n+#include <key.h>\n+#include <key_io.h>\n+#include <node/context.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <psbt.h>\n+#include <rpc/blockchain.h>\n+#include <rpc/client.h>\n+#include <rpc/request.h>\n+#include <rpc/server.h>\n+#include <rpc/util.h>\n+#include <span.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+#include <tinyformat.h>\n+#include <univalue.h>\n+#include <util/ref.h>\n+#include <util/strencodings.h>\n+#include <util/string.h>\n+#include <util/time.h>\n+\n+#include <cstdint>\n+#include <iostream>\n+#include <memory>\n+#include <optional>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+struct RPCFuzzTestingSetup : public TestingSetup {\n+    RPCFuzzTestingSetup(const std::string& chain_name, const std::vector<const char*>& extra_args) : TestingSetup{chain_name, extra_args}\n+    {\n+    }\n+\n+    UniValue CallRPC(const std::string rpc_method, const std::vector<std::string>& arguments)",
    "path": "src/test/fuzz/rpc.cpp",
    "position": null,
    "original_position": 47,
    "commit_id": "545404e7e1c72985557ccffe865cea269143e5dd",
    "original_commit_id": "e4e3b56d30587c18e6e8dec0ef88bec2207e8735",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Addressed!",
    "created_at": "2021-04-27T21:17:03Z",
    "updated_at": "2021-04-28T06:38:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21169#discussion_r621607064",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21169",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621607064"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21169#discussion_r621607064"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21169"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621607064/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 47,
    "side": "RIGHT",
    "in_reply_to_id": 575675324
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621833653",
    "pull_request_review_id": 646616471,
    "id": 621833653,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMTgzMzY1Mw==",
    "diff_hunk": "@@ -0,0 +1,380 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <base58.h>\n+#include <chainparamsbase.h>\n+#include <core_io.h>\n+#include <interfaces/chain.h>\n+#include <key.h>\n+#include <key_io.h>\n+#include <node/context.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <psbt.h>\n+#include <rpc/blockchain.h>\n+#include <rpc/client.h>\n+#include <rpc/request.h>\n+#include <rpc/server.h>\n+#include <rpc/util.h>\n+#include <span.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+#include <tinyformat.h>\n+#include <univalue.h>\n+#include <util/strencodings.h>\n+#include <util/string.h>\n+#include <util/time.h>\n+\n+#include <cstdint>\n+#include <iostream>\n+#include <memory>\n+#include <optional>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+struct RPCFuzzTestingSetup : public TestingSetup {\n+    RPCFuzzTestingSetup(const std::string& chain_name, const std::vector<const char*>& extra_args) : TestingSetup{chain_name, extra_args}\n+    {\n+    }\n+\n+    UniValue CallRPC(const std::string& rpc_method, const std::vector<std::string>& arguments)\n+    {\n+        JSONRPCRequest request;\n+        request.context = &m_node;\n+        request.strMethod = rpc_method;\n+        request.params = RPCConvertValues(rpc_method, arguments);\n+        return tableRPC.execute(request);\n+    }\n+\n+    std::vector<std::string> GetRPCCommands() const\n+    {\n+        return tableRPC.listCommands();\n+    }\n+};\n+\n+RPCFuzzTestingSetup* rpc_testing_setup = nullptr;\n+std::string limit_to_rpc_command;\n+\n+// RPC commands which are not appropriate for fuzzing: such as RPC commands\n+// reading or writing to a filename passed as an RPC parameter, RPC commands\n+// resulting in network activity, etc.\n+const std::vector<std::string> RPC_COMMANDS_NOT_SAFE_FOR_FUZZING{\n+    \"addconnection\",        // avoid DNS lookups\n+    \"addnode\",              // avoid DNS lookups\n+    \"addpeeraddress\",       // avoid DNS lookups\n+    \"analyzepsbt\",          // avoid signed integer overflow in CFeeRate::GetFee(unsigned long) (https://github.com/bitcoin/bitcoin/issues/20607)\n+    \"decoderawtransaction\", // avoid signed integer overflow in ValueFromAmount(long const&) (https://github.com/bitcoin/bitcoin/pull/20406)",
    "path": "src/test/fuzz/rpc.cpp",
    "position": null,
    "original_position": 72,
    "commit_id": "545404e7e1c72985557ccffe865cea269143e5dd",
    "original_commit_id": "555556e2fe864c0644de4e3e75d1833d43b6eb19",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "fixed?",
    "created_at": "2021-04-28T05:49:47Z",
    "updated_at": "2021-04-28T06:38:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21169#discussion_r621833653",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21169",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621833653"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21169#discussion_r621833653"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21169"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621833653/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 72,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621836878",
    "pull_request_review_id": 646616471,
    "id": 621836878,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMTgzNjg3OA==",
    "diff_hunk": "@@ -0,0 +1,380 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <base58.h>\n+#include <chainparamsbase.h>\n+#include <core_io.h>\n+#include <interfaces/chain.h>\n+#include <key.h>\n+#include <key_io.h>\n+#include <node/context.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <psbt.h>\n+#include <rpc/blockchain.h>\n+#include <rpc/client.h>\n+#include <rpc/request.h>\n+#include <rpc/server.h>\n+#include <rpc/util.h>\n+#include <span.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+#include <tinyformat.h>\n+#include <univalue.h>\n+#include <util/strencodings.h>\n+#include <util/string.h>\n+#include <util/time.h>\n+\n+#include <cstdint>\n+#include <iostream>\n+#include <memory>\n+#include <optional>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+struct RPCFuzzTestingSetup : public TestingSetup {\n+    RPCFuzzTestingSetup(const std::string& chain_name, const std::vector<const char*>& extra_args) : TestingSetup{chain_name, extra_args}\n+    {\n+    }\n+\n+    UniValue CallRPC(const std::string& rpc_method, const std::vector<std::string>& arguments)\n+    {\n+        JSONRPCRequest request;\n+        request.context = &m_node;\n+        request.strMethod = rpc_method;\n+        request.params = RPCConvertValues(rpc_method, arguments);\n+        return tableRPC.execute(request);\n+    }\n+\n+    std::vector<std::string> GetRPCCommands() const\n+    {\n+        return tableRPC.listCommands();\n+    }\n+};\n+\n+RPCFuzzTestingSetup* rpc_testing_setup = nullptr;\n+std::string limit_to_rpc_command;\n+\n+// RPC commands which are not appropriate for fuzzing: such as RPC commands\n+// reading or writing to a filename passed as an RPC parameter, RPC commands\n+// resulting in network activity, etc.\n+const std::vector<std::string> RPC_COMMANDS_NOT_SAFE_FOR_FUZZING{\n+    \"addconnection\",        // avoid DNS lookups\n+    \"addnode\",              // avoid DNS lookups\n+    \"addpeeraddress\",       // avoid DNS lookups\n+    \"analyzepsbt\",          // avoid signed integer overflow in CFeeRate::GetFee(unsigned long) (https://github.com/bitcoin/bitcoin/issues/20607)\n+    \"decoderawtransaction\", // avoid signed integer overflow in ValueFromAmount(long const&) (https://github.com/bitcoin/bitcoin/pull/20406)\n+    \"dumptxoutset\",         // avoid writing to disk\n+#ifdef ENABLE_WALLET\n+    \"dumpwallet\", // avoid writing to disk\n+#endif\n+    \"echoipc\",           // avoid assertion failure (Assertion `\"EnsureAnyNodeContext(request.context).init\" && check' failed.)\n+    \"generatetoaddress\", // avoid timeout\n+    \"gettxoutproof\",     // avoid slow execution\n+#ifdef ENABLE_WALLET\n+    \"importwallet\", // avoid reading from disk\n+#endif\n+    \"invalidateblock\", // avoid nullptr dereference in CBlockIndexWorkComparator::operator() (https://github.com/bitcoin/bitcoin/issues/20914)\n+#ifdef ENABLE_WALLET\n+    \"loadwallet\", // avoid reading from disk\n+#endif\n+    \"mockscheduler\",         // avoid assertion failure (Assertion `delta_seconds.count() > 0 && delta_seconds < std::chrono::hours{1}' failed.)\n+    \"prioritisetransaction\", // avoid signed integer overflow in CTxMemPool::PrioritiseTransaction(uint256 const&, long const&) (https://github.com/bitcoin/bitcoin/issues/20626)\n+    \"setban\",                // avoid DNS lookups\n+    \"stop\",                  // avoid shutdown state\n+};\n+\n+// RPC commands which are safe for fuzzing.\n+const std::vector<std::string> RPC_COMMANDS_SAFE_FOR_FUZZING{\n+    \"clearbanned\",\n+    \"combinepsbt\",\n+    \"combinerawtransaction\",\n+    \"converttopsbt\",\n+    \"createmultisig\",\n+    \"createpsbt\",\n+    \"createrawtransaction\",\n+    \"decodepsbt\",\n+    \"decodescript\",\n+    \"deriveaddresses\",\n+    \"disconnectnode\",\n+    \"echo\",\n+    \"echojson\",\n+    \"estimaterawfee\",\n+    \"estimatesmartfee\",\n+    \"finalizepsbt\",\n+    \"generate\",\n+    \"generateblock\",\n+    \"generatetodescriptor\",\n+    \"getaddednodeinfo\",\n+    \"getbestblockhash\",\n+    \"getblock\",\n+    \"getblockchaininfo\",\n+    \"getblockcount\",\n+    \"getblockfilter\",\n+    \"getblockhash\",\n+    \"getblockheader\",\n+    \"getblockstats\",\n+    \"getblocktemplate\",\n+    \"getchaintips\",\n+    \"getchaintxstats\",\n+    \"getconnectioncount\",\n+    \"getdescriptorinfo\",\n+    \"getdifficulty\",\n+    \"getindexinfo\",\n+    \"getmemoryinfo\",\n+    \"getmempoolancestors\",\n+    \"getmempooldescendants\",\n+    \"getmempoolentry\",\n+    \"getmempoolinfo\",\n+    \"getmininginfo\",\n+    \"getnettotals\",\n+    \"getnetworkhashps\",\n+    \"getnetworkinfo\",\n+    \"getnodeaddresses\",\n+    \"getpeerinfo\",\n+    \"getrawmempool\",\n+    \"getrawtransaction\",\n+    \"getrpcinfo\",\n+    \"gettxout\",\n+    \"gettxoutsetinfo\",\n+    \"help\",\n+    \"joinpsbts\",\n+    \"listbanned\",\n+    \"logging\",\n+    \"ping\",\n+    \"preciousblock\",\n+    \"pruneblockchain\",\n+    \"reconsiderblock\",\n+    \"savemempool\",\n+    \"scantxoutset\",\n+    \"sendrawtransaction\",\n+    \"setmocktime\",\n+    \"setnetworkactive\",\n+    \"signmessagewithprivkey\",\n+    \"signrawtransactionwithkey\",\n+    \"submitblock\",\n+    \"submitheader\",\n+    \"syncwithvalidationinterfacequeue\",\n+    \"testmempoolaccept\",\n+    \"uptime\",\n+    \"utxoupdatepsbt\",\n+    \"validateaddress\",\n+    \"verifychain\",\n+    \"verifymessage\",\n+    \"verifytxoutproof\",\n+    \"waitforblock\",\n+    \"waitforblockheight\",\n+    \"waitfornewblock\",\n+};\n+\n+std::string ConsumeScalarRPCArgument(FuzzedDataProvider& fuzzed_data_provider)\n+{\n+    const size_t max_string_length = 4096;\n+    std::string r;\n+    CallOneOf(\n+        fuzzed_data_provider,\n+        [&] {\n+            // string argument\n+            r = fuzzed_data_provider.ConsumeRandomLengthString(max_string_length);\n+        },\n+        [&] {\n+            // base64 argument\n+            r = EncodeBase64(fuzzed_data_provider.ConsumeRandomLengthString(max_string_length));\n+        },\n+        [&] {\n+            // hex argument\n+            r = HexStr(fuzzed_data_provider.ConsumeRandomLengthString(max_string_length));\n+        },\n+        [&] {\n+            // bool argument\n+            r = fuzzed_data_provider.ConsumeBool() ? \"true\" : \"false\";\n+        },\n+        [&] {\n+            // range argument\n+            r = \"[\" + ToString(fuzzed_data_provider.ConsumeIntegral<int64_t>()) + \",\" + ToString(fuzzed_data_provider.ConsumeIntegral<int64_t>()) + \"]\";\n+        },\n+        [&] {\n+            // integral argument (int64_t)\n+            r = ToString(fuzzed_data_provider.ConsumeIntegral<int64_t>());\n+        },\n+        [&] {\n+            // integral argument (uint64_t)\n+            r = ToString(fuzzed_data_provider.ConsumeIntegral<uint64_t>());\n+        },\n+        [&] {\n+            // floating point argument\n+            r = strprintf(\"%f\", fuzzed_data_provider.ConsumeFloatingPoint<double>());\n+        },\n+        [&] {\n+            // tx destination argument\n+            r = EncodeDestination(ConsumeTxDestination(fuzzed_data_provider));\n+        },\n+        [&] {\n+            // uint160 argument\n+            r = ConsumeUInt160(fuzzed_data_provider).ToString();\n+        },\n+        [&] {\n+            // uint256 argument\n+            r = ConsumeUInt256(fuzzed_data_provider).ToString();\n+        },\n+        [&] {\n+            // base32 argument\n+            r = EncodeBase32(fuzzed_data_provider.ConsumeRandomLengthString(max_string_length));\n+        },\n+        [&] {\n+            // base58 argument\n+            r = EncodeBase58(MakeUCharSpan(fuzzed_data_provider.ConsumeRandomLengthString(max_string_length)));\n+        },\n+        [&] {\n+            // base58 argument with checksum\n+            r = EncodeBase58Check(MakeUCharSpan(fuzzed_data_provider.ConsumeRandomLengthString(max_string_length)));\n+        },\n+        [&] {\n+            // hex encoded block\n+            std::optional<CBlock> opt_block = ConsumeDeserializable<CBlock>(fuzzed_data_provider);\n+            if (!opt_block) {\n+                return;\n+            }\n+            CDataStream data_stream{SER_NETWORK, PROTOCOL_VERSION};\n+            data_stream << *opt_block;\n+            r = HexStr(data_stream);\n+        },\n+        [&] {\n+            // hex encoded block header\n+            std::optional<CBlockHeader> opt_block_header = ConsumeDeserializable<CBlockHeader>(fuzzed_data_provider);\n+            if (!opt_block_header) {\n+                return;\n+            }\n+            CDataStream data_stream{SER_NETWORK, PROTOCOL_VERSION};\n+            data_stream << *opt_block_header;\n+            r = HexStr(data_stream);\n+        },\n+        [&] {\n+            // hex encoded tx\n+            std::optional<CMutableTransaction> opt_tx = ConsumeDeserializable<CMutableTransaction>(fuzzed_data_provider);\n+            if (!opt_tx) {\n+                return;\n+            }\n+            CDataStream data_stream{SER_NETWORK, fuzzed_data_provider.ConsumeBool() ? PROTOCOL_VERSION : (PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS)};\n+            data_stream << *opt_tx;\n+            r = HexStr(data_stream);\n+        },\n+        [&] {\n+            // base64 encoded psbt\n+            std::optional<PartiallySignedTransaction> opt_psbt = ConsumeDeserializable<PartiallySignedTransaction>(fuzzed_data_provider);\n+            if (!opt_psbt) {\n+                return;\n+            }\n+            CDataStream data_stream{SER_NETWORK, PROTOCOL_VERSION};\n+            data_stream << *opt_psbt;\n+            r = EncodeBase64({data_stream.begin(), data_stream.end()});\n+        },\n+        [&] {\n+            // base58 encoded key\n+            const std::vector<uint8_t> random_bytes = fuzzed_data_provider.ConsumeBytes<uint8_t>(32);\n+            CKey key;\n+            key.Set(random_bytes.begin(), random_bytes.end(), fuzzed_data_provider.ConsumeBool());\n+            if (!key.IsValid()) {\n+                return;\n+            }\n+            r = EncodeSecret(key);\n+        },\n+        [&] {\n+            // hex encoded pubkey\n+            const std::vector<uint8_t> random_bytes = fuzzed_data_provider.ConsumeBytes<uint8_t>(32);\n+            CKey key;\n+            key.Set(random_bytes.begin(), random_bytes.end(), fuzzed_data_provider.ConsumeBool());\n+            if (!key.IsValid()) {\n+                return;\n+            }\n+            r = HexStr(key.GetPubKey());\n+        });\n+    return r;\n+}\n+\n+std::string ConsumeArrayRPCArgument(FuzzedDataProvider& fuzzed_data_provider)\n+{\n+    std::vector<std::string> scalar_arguments;\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        scalar_arguments.push_back(ConsumeScalarRPCArgument(fuzzed_data_provider));\n+    }\n+    return \"[\\\"\" + Join(scalar_arguments, \"\\\",\\\"\") + \"\\\"]\";\n+}\n+\n+std::string ConsumeRPCArgument(FuzzedDataProvider& fuzzed_data_provider)\n+{\n+    return fuzzed_data_provider.ConsumeBool() ? ConsumeScalarRPCArgument(fuzzed_data_provider) : ConsumeArrayRPCArgument(fuzzed_data_provider);\n+}\n+\n+RPCFuzzTestingSetup* InitializeRPCFuzzTestingSetup()\n+{\n+    static const auto setup = MakeNoLogFileContext<RPCFuzzTestingSetup>();\n+    SetRPCWarmupFinished();\n+    return setup.get();\n+}\n+}; // namespace\n+\n+void initialize_rpc()\n+{\n+    rpc_testing_setup = InitializeRPCFuzzTestingSetup();\n+    const std::vector<std::string> supported_rpc_commands = rpc_testing_setup->GetRPCCommands();\n+    for (const std::string& rpc_command : supported_rpc_commands) {\n+        const bool safe_for_fuzzing = std::find(RPC_COMMANDS_SAFE_FOR_FUZZING.begin(), RPC_COMMANDS_SAFE_FOR_FUZZING.end(), rpc_command) != RPC_COMMANDS_SAFE_FOR_FUZZING.end();\n+        const bool not_safe_for_fuzzing = std::find(RPC_COMMANDS_NOT_SAFE_FOR_FUZZING.begin(), RPC_COMMANDS_NOT_SAFE_FOR_FUZZING.end(), rpc_command) != RPC_COMMANDS_NOT_SAFE_FOR_FUZZING.end();\n+        if (!(safe_for_fuzzing || not_safe_for_fuzzing)) {\n+            std::cerr << \"Error: RPC command \\\"\" << rpc_command << \"\\\" not found in RPC_COMMANDS_SAFE_FOR_FUZZING or RPC_COMMANDS_NOT_SAFE_FOR_FUZZING. Please update \" << __FILE__ << \".\\n\";\n+            std::terminate();\n+        }\n+        if (safe_for_fuzzing && not_safe_for_fuzzing) {\n+            std::cerr << \"Error: RPC command \\\"\" << rpc_command << \"\\\" found in *both* RPC_COMMANDS_SAFE_FOR_FUZZING and RPC_COMMANDS_NOT_SAFE_FOR_FUZZING. Please update \" << __FILE__ << \".\\n\";\n+            std::terminate();\n+        }\n+    }\n+    for (const std::string& rpc_command : RPC_COMMANDS_SAFE_FOR_FUZZING) {\n+        const bool supported_rpc_command = std::find(supported_rpc_commands.begin(), supported_rpc_commands.end(), rpc_command) != supported_rpc_commands.end();\n+        if (!supported_rpc_command) {\n+            std::cerr << \"Error: Unknown RPC command \\\"\" << rpc_command << \"\\\" found in RPC_COMMANDS_SAFE_FOR_FUZZING. Please update \" << __FILE__ << \".\\n\";\n+            std::terminate();\n+        }\n+    }\n+    for (const std::string& rpc_command : RPC_COMMANDS_NOT_SAFE_FOR_FUZZING) {\n+        const bool supported_rpc_command = std::find(supported_rpc_commands.begin(), supported_rpc_commands.end(), rpc_command) != supported_rpc_commands.end();\n+        if (!supported_rpc_command) {\n+            std::cerr << \"Error: Unknown RPC command \\\"\" << rpc_command << \"\\\" found in RPC_COMMANDS_NOT_SAFE_FOR_FUZZING. Please update \" << __FILE__ << \".\\n\";\n+            std::terminate();\n+        }\n+    }\n+    const char* limit_to_rpc_command_env = getenv(\"LIMIT_TO_RPC_COMMAND\");",
    "path": "src/test/fuzz/rpc.cpp",
    "position": null,
    "original_position": 353,
    "commit_id": "545404e7e1c72985557ccffe865cea269143e5dd",
    "original_commit_id": "555556e2fe864c0644de4e3e75d1833d43b6eb19",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```suggestion\r\n    const char* limit_to_rpc_command_env = std::getenv(\"LIMIT_TO_RPC_COMMAND\");\r\n```",
    "created_at": "2021-04-28T05:57:25Z",
    "updated_at": "2021-04-28T06:38:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21169#discussion_r621836878",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21169",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621836878"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21169#discussion_r621836878"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21169"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621836878/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 353,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621837799",
    "pull_request_review_id": 646616471,
    "id": 621837799,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMTgzNzc5OQ==",
    "diff_hunk": "@@ -0,0 +1,380 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <base58.h>\n+#include <chainparamsbase.h>\n+#include <core_io.h>\n+#include <interfaces/chain.h>\n+#include <key.h>\n+#include <key_io.h>\n+#include <node/context.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <psbt.h>\n+#include <rpc/blockchain.h>\n+#include <rpc/client.h>\n+#include <rpc/request.h>\n+#include <rpc/server.h>\n+#include <rpc/util.h>\n+#include <span.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+#include <tinyformat.h>\n+#include <univalue.h>\n+#include <util/strencodings.h>\n+#include <util/string.h>\n+#include <util/time.h>\n+\n+#include <cstdint>\n+#include <iostream>\n+#include <memory>\n+#include <optional>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+struct RPCFuzzTestingSetup : public TestingSetup {\n+    RPCFuzzTestingSetup(const std::string& chain_name, const std::vector<const char*>& extra_args) : TestingSetup{chain_name, extra_args}\n+    {\n+    }\n+\n+    UniValue CallRPC(const std::string& rpc_method, const std::vector<std::string>& arguments)\n+    {\n+        JSONRPCRequest request;\n+        request.context = &m_node;\n+        request.strMethod = rpc_method;\n+        request.params = RPCConvertValues(rpc_method, arguments);\n+        return tableRPC.execute(request);\n+    }\n+\n+    std::vector<std::string> GetRPCCommands() const\n+    {\n+        return tableRPC.listCommands();\n+    }\n+};\n+\n+RPCFuzzTestingSetup* rpc_testing_setup = nullptr;\n+std::string limit_to_rpc_command;",
    "path": "src/test/fuzz/rpc.cpp",
    "position": null,
    "original_position": 62,
    "commit_id": "545404e7e1c72985557ccffe865cea269143e5dd",
    "original_commit_id": "555556e2fe864c0644de4e3e75d1833d43b6eb19",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```suggestion\r\nstd::string g_limit_to_rpc_command;\r\n```",
    "created_at": "2021-04-28T05:59:31Z",
    "updated_at": "2021-04-28T06:38:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21169#discussion_r621837799",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21169",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621837799"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21169#discussion_r621837799"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21169"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621837799/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 62,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621839108",
    "pull_request_review_id": 646622591,
    "id": 621839108,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMTgzOTEwOA==",
    "diff_hunk": "@@ -0,0 +1,380 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <base58.h>\n+#include <chainparamsbase.h>\n+#include <core_io.h>\n+#include <interfaces/chain.h>\n+#include <key.h>\n+#include <key_io.h>\n+#include <node/context.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <psbt.h>\n+#include <rpc/blockchain.h>\n+#include <rpc/client.h>\n+#include <rpc/request.h>\n+#include <rpc/server.h>\n+#include <rpc/util.h>\n+#include <span.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+#include <tinyformat.h>\n+#include <univalue.h>\n+#include <util/strencodings.h>\n+#include <util/string.h>\n+#include <util/time.h>\n+\n+#include <cstdint>\n+#include <iostream>\n+#include <memory>\n+#include <optional>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+struct RPCFuzzTestingSetup : public TestingSetup {\n+    RPCFuzzTestingSetup(const std::string& chain_name, const std::vector<const char*>& extra_args) : TestingSetup{chain_name, extra_args}\n+    {\n+    }\n+\n+    UniValue CallRPC(const std::string& rpc_method, const std::vector<std::string>& arguments)\n+    {\n+        JSONRPCRequest request;\n+        request.context = &m_node;\n+        request.strMethod = rpc_method;\n+        request.params = RPCConvertValues(rpc_method, arguments);\n+        return tableRPC.execute(request);\n+    }\n+\n+    std::vector<std::string> GetRPCCommands() const\n+    {\n+        return tableRPC.listCommands();\n+    }\n+};\n+\n+RPCFuzzTestingSetup* rpc_testing_setup = nullptr;\n+std::string limit_to_rpc_command;\n+\n+// RPC commands which are not appropriate for fuzzing: such as RPC commands\n+// reading or writing to a filename passed as an RPC parameter, RPC commands\n+// resulting in network activity, etc.\n+const std::vector<std::string> RPC_COMMANDS_NOT_SAFE_FOR_FUZZING{\n+    \"addconnection\",        // avoid DNS lookups\n+    \"addnode\",              // avoid DNS lookups\n+    \"addpeeraddress\",       // avoid DNS lookups\n+    \"analyzepsbt\",          // avoid signed integer overflow in CFeeRate::GetFee(unsigned long) (https://github.com/bitcoin/bitcoin/issues/20607)\n+    \"decoderawtransaction\", // avoid signed integer overflow in ValueFromAmount(long const&) (https://github.com/bitcoin/bitcoin/pull/20406)\n+    \"dumptxoutset\",         // avoid writing to disk\n+#ifdef ENABLE_WALLET\n+    \"dumpwallet\", // avoid writing to disk\n+#endif\n+    \"echoipc\",           // avoid assertion failure (Assertion `\"EnsureAnyNodeContext(request.context).init\" && check' failed.)\n+    \"generatetoaddress\", // avoid timeout\n+    \"gettxoutproof\",     // avoid slow execution\n+#ifdef ENABLE_WALLET\n+    \"importwallet\", // avoid reading from disk\n+#endif\n+    \"invalidateblock\", // avoid nullptr dereference in CBlockIndexWorkComparator::operator() (https://github.com/bitcoin/bitcoin/issues/20914)",
    "path": "src/test/fuzz/rpc.cpp",
    "position": null,
    "original_position": 83,
    "commit_id": "545404e7e1c72985557ccffe865cea269143e5dd",
    "original_commit_id": "555556e2fe864c0644de4e3e75d1833d43b6eb19",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "fixed",
    "created_at": "2021-04-28T06:02:35Z",
    "updated_at": "2021-04-28T06:38:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21169#discussion_r621839108",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21169",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621839108"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21169#discussion_r621839108"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21169"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621839108/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 83,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621857715",
    "pull_request_review_id": 646643949,
    "id": 621857715,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMTg1NzcxNQ==",
    "diff_hunk": "@@ -0,0 +1,380 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <base58.h>\n+#include <chainparamsbase.h>\n+#include <core_io.h>\n+#include <interfaces/chain.h>\n+#include <key.h>\n+#include <key_io.h>\n+#include <node/context.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <psbt.h>\n+#include <rpc/blockchain.h>\n+#include <rpc/client.h>\n+#include <rpc/request.h>\n+#include <rpc/server.h>\n+#include <rpc/util.h>\n+#include <span.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+#include <tinyformat.h>\n+#include <univalue.h>\n+#include <util/strencodings.h>\n+#include <util/string.h>\n+#include <util/time.h>\n+\n+#include <cstdint>\n+#include <iostream>\n+#include <memory>\n+#include <optional>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+struct RPCFuzzTestingSetup : public TestingSetup {\n+    RPCFuzzTestingSetup(const std::string& chain_name, const std::vector<const char*>& extra_args) : TestingSetup{chain_name, extra_args}\n+    {\n+    }\n+\n+    UniValue CallRPC(const std::string& rpc_method, const std::vector<std::string>& arguments)\n+    {\n+        JSONRPCRequest request;\n+        request.context = &m_node;\n+        request.strMethod = rpc_method;\n+        request.params = RPCConvertValues(rpc_method, arguments);\n+        return tableRPC.execute(request);\n+    }\n+\n+    std::vector<std::string> GetRPCCommands() const\n+    {\n+        return tableRPC.listCommands();\n+    }\n+};\n+\n+RPCFuzzTestingSetup* rpc_testing_setup = nullptr;\n+std::string limit_to_rpc_command;\n+\n+// RPC commands which are not appropriate for fuzzing: such as RPC commands\n+// reading or writing to a filename passed as an RPC parameter, RPC commands\n+// resulting in network activity, etc.\n+const std::vector<std::string> RPC_COMMANDS_NOT_SAFE_FOR_FUZZING{\n+    \"addconnection\",        // avoid DNS lookups\n+    \"addnode\",              // avoid DNS lookups\n+    \"addpeeraddress\",       // avoid DNS lookups\n+    \"analyzepsbt\",          // avoid signed integer overflow in CFeeRate::GetFee(unsigned long) (https://github.com/bitcoin/bitcoin/issues/20607)\n+    \"decoderawtransaction\", // avoid signed integer overflow in ValueFromAmount(long const&) (https://github.com/bitcoin/bitcoin/pull/20406)\n+    \"dumptxoutset\",         // avoid writing to disk\n+#ifdef ENABLE_WALLET\n+    \"dumpwallet\", // avoid writing to disk\n+#endif\n+    \"echoipc\",           // avoid assertion failure (Assertion `\"EnsureAnyNodeContext(request.context).init\" && check' failed.)\n+    \"generatetoaddress\", // avoid timeout\n+    \"gettxoutproof\",     // avoid slow execution\n+#ifdef ENABLE_WALLET\n+    \"importwallet\", // avoid reading from disk\n+#endif\n+    \"invalidateblock\", // avoid nullptr dereference in CBlockIndexWorkComparator::operator() (https://github.com/bitcoin/bitcoin/issues/20914)",
    "path": "src/test/fuzz/rpc.cpp",
    "position": null,
    "original_position": 83,
    "commit_id": "545404e7e1c72985557ccffe865cea269143e5dd",
    "original_commit_id": "555556e2fe864c0644de4e3e75d1833d43b6eb19",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Fixed! Thanks!",
    "created_at": "2021-04-28T06:39:17Z",
    "updated_at": "2021-04-28T06:39:18Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21169#discussion_r621857715",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21169",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621857715"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21169#discussion_r621857715"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21169"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621857715/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 83,
    "side": "RIGHT",
    "in_reply_to_id": 621839108
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621857792",
    "pull_request_review_id": 646644023,
    "id": 621857792,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMTg1Nzc5Mg==",
    "diff_hunk": "@@ -0,0 +1,380 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <base58.h>\n+#include <chainparamsbase.h>\n+#include <core_io.h>\n+#include <interfaces/chain.h>\n+#include <key.h>\n+#include <key_io.h>\n+#include <node/context.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <psbt.h>\n+#include <rpc/blockchain.h>\n+#include <rpc/client.h>\n+#include <rpc/request.h>\n+#include <rpc/server.h>\n+#include <rpc/util.h>\n+#include <span.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+#include <tinyformat.h>\n+#include <univalue.h>\n+#include <util/strencodings.h>\n+#include <util/string.h>\n+#include <util/time.h>\n+\n+#include <cstdint>\n+#include <iostream>\n+#include <memory>\n+#include <optional>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+struct RPCFuzzTestingSetup : public TestingSetup {\n+    RPCFuzzTestingSetup(const std::string& chain_name, const std::vector<const char*>& extra_args) : TestingSetup{chain_name, extra_args}\n+    {\n+    }\n+\n+    UniValue CallRPC(const std::string& rpc_method, const std::vector<std::string>& arguments)\n+    {\n+        JSONRPCRequest request;\n+        request.context = &m_node;\n+        request.strMethod = rpc_method;\n+        request.params = RPCConvertValues(rpc_method, arguments);\n+        return tableRPC.execute(request);\n+    }\n+\n+    std::vector<std::string> GetRPCCommands() const\n+    {\n+        return tableRPC.listCommands();\n+    }\n+};\n+\n+RPCFuzzTestingSetup* rpc_testing_setup = nullptr;\n+std::string limit_to_rpc_command;\n+\n+// RPC commands which are not appropriate for fuzzing: such as RPC commands\n+// reading or writing to a filename passed as an RPC parameter, RPC commands\n+// resulting in network activity, etc.\n+const std::vector<std::string> RPC_COMMANDS_NOT_SAFE_FOR_FUZZING{\n+    \"addconnection\",        // avoid DNS lookups\n+    \"addnode\",              // avoid DNS lookups\n+    \"addpeeraddress\",       // avoid DNS lookups\n+    \"analyzepsbt\",          // avoid signed integer overflow in CFeeRate::GetFee(unsigned long) (https://github.com/bitcoin/bitcoin/issues/20607)\n+    \"decoderawtransaction\", // avoid signed integer overflow in ValueFromAmount(long const&) (https://github.com/bitcoin/bitcoin/pull/20406)",
    "path": "src/test/fuzz/rpc.cpp",
    "position": null,
    "original_position": 72,
    "commit_id": "545404e7e1c72985557ccffe865cea269143e5dd",
    "original_commit_id": "555556e2fe864c0644de4e3e75d1833d43b6eb19",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Fixed! Thanks!",
    "created_at": "2021-04-28T06:39:25Z",
    "updated_at": "2021-04-28T06:39:25Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21169#discussion_r621857792",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21169",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621857792"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21169#discussion_r621857792"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21169"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621857792/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 72,
    "side": "RIGHT",
    "in_reply_to_id": 621833653
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621857947",
    "pull_request_review_id": 646644243,
    "id": 621857947,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMTg1Nzk0Nw==",
    "diff_hunk": "@@ -0,0 +1,380 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <base58.h>\n+#include <chainparamsbase.h>\n+#include <core_io.h>\n+#include <interfaces/chain.h>\n+#include <key.h>\n+#include <key_io.h>\n+#include <node/context.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <psbt.h>\n+#include <rpc/blockchain.h>\n+#include <rpc/client.h>\n+#include <rpc/request.h>\n+#include <rpc/server.h>\n+#include <rpc/util.h>\n+#include <span.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+#include <tinyformat.h>\n+#include <univalue.h>\n+#include <util/strencodings.h>\n+#include <util/string.h>\n+#include <util/time.h>\n+\n+#include <cstdint>\n+#include <iostream>\n+#include <memory>\n+#include <optional>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+struct RPCFuzzTestingSetup : public TestingSetup {\n+    RPCFuzzTestingSetup(const std::string& chain_name, const std::vector<const char*>& extra_args) : TestingSetup{chain_name, extra_args}\n+    {\n+    }\n+\n+    UniValue CallRPC(const std::string& rpc_method, const std::vector<std::string>& arguments)\n+    {\n+        JSONRPCRequest request;\n+        request.context = &m_node;\n+        request.strMethod = rpc_method;\n+        request.params = RPCConvertValues(rpc_method, arguments);\n+        return tableRPC.execute(request);\n+    }\n+\n+    std::vector<std::string> GetRPCCommands() const\n+    {\n+        return tableRPC.listCommands();\n+    }\n+};\n+\n+RPCFuzzTestingSetup* rpc_testing_setup = nullptr;\n+std::string limit_to_rpc_command;\n+\n+// RPC commands which are not appropriate for fuzzing: such as RPC commands\n+// reading or writing to a filename passed as an RPC parameter, RPC commands\n+// resulting in network activity, etc.\n+const std::vector<std::string> RPC_COMMANDS_NOT_SAFE_FOR_FUZZING{\n+    \"addconnection\",        // avoid DNS lookups\n+    \"addnode\",              // avoid DNS lookups\n+    \"addpeeraddress\",       // avoid DNS lookups\n+    \"analyzepsbt\",          // avoid signed integer overflow in CFeeRate::GetFee(unsigned long) (https://github.com/bitcoin/bitcoin/issues/20607)\n+    \"decoderawtransaction\", // avoid signed integer overflow in ValueFromAmount(long const&) (https://github.com/bitcoin/bitcoin/pull/20406)\n+    \"dumptxoutset\",         // avoid writing to disk\n+#ifdef ENABLE_WALLET\n+    \"dumpwallet\", // avoid writing to disk\n+#endif\n+    \"echoipc\",           // avoid assertion failure (Assertion `\"EnsureAnyNodeContext(request.context).init\" && check' failed.)\n+    \"generatetoaddress\", // avoid timeout\n+    \"gettxoutproof\",     // avoid slow execution\n+#ifdef ENABLE_WALLET\n+    \"importwallet\", // avoid reading from disk\n+#endif\n+    \"invalidateblock\", // avoid nullptr dereference in CBlockIndexWorkComparator::operator() (https://github.com/bitcoin/bitcoin/issues/20914)\n+#ifdef ENABLE_WALLET\n+    \"loadwallet\", // avoid reading from disk\n+#endif\n+    \"mockscheduler\",         // avoid assertion failure (Assertion `delta_seconds.count() > 0 && delta_seconds < std::chrono::hours{1}' failed.)\n+    \"prioritisetransaction\", // avoid signed integer overflow in CTxMemPool::PrioritiseTransaction(uint256 const&, long const&) (https://github.com/bitcoin/bitcoin/issues/20626)\n+    \"setban\",                // avoid DNS lookups\n+    \"stop\",                  // avoid shutdown state\n+};\n+\n+// RPC commands which are safe for fuzzing.\n+const std::vector<std::string> RPC_COMMANDS_SAFE_FOR_FUZZING{\n+    \"clearbanned\",\n+    \"combinepsbt\",\n+    \"combinerawtransaction\",\n+    \"converttopsbt\",\n+    \"createmultisig\",\n+    \"createpsbt\",\n+    \"createrawtransaction\",\n+    \"decodepsbt\",\n+    \"decodescript\",\n+    \"deriveaddresses\",\n+    \"disconnectnode\",\n+    \"echo\",\n+    \"echojson\",\n+    \"estimaterawfee\",\n+    \"estimatesmartfee\",\n+    \"finalizepsbt\",\n+    \"generate\",\n+    \"generateblock\",\n+    \"generatetodescriptor\",\n+    \"getaddednodeinfo\",\n+    \"getbestblockhash\",\n+    \"getblock\",\n+    \"getblockchaininfo\",\n+    \"getblockcount\",\n+    \"getblockfilter\",\n+    \"getblockhash\",\n+    \"getblockheader\",\n+    \"getblockstats\",\n+    \"getblocktemplate\",\n+    \"getchaintips\",\n+    \"getchaintxstats\",\n+    \"getconnectioncount\",\n+    \"getdescriptorinfo\",\n+    \"getdifficulty\",\n+    \"getindexinfo\",\n+    \"getmemoryinfo\",\n+    \"getmempoolancestors\",\n+    \"getmempooldescendants\",\n+    \"getmempoolentry\",\n+    \"getmempoolinfo\",\n+    \"getmininginfo\",\n+    \"getnettotals\",\n+    \"getnetworkhashps\",\n+    \"getnetworkinfo\",\n+    \"getnodeaddresses\",\n+    \"getpeerinfo\",\n+    \"getrawmempool\",\n+    \"getrawtransaction\",\n+    \"getrpcinfo\",\n+    \"gettxout\",\n+    \"gettxoutsetinfo\",\n+    \"help\",\n+    \"joinpsbts\",\n+    \"listbanned\",\n+    \"logging\",\n+    \"ping\",\n+    \"preciousblock\",\n+    \"pruneblockchain\",\n+    \"reconsiderblock\",\n+    \"savemempool\",\n+    \"scantxoutset\",\n+    \"sendrawtransaction\",\n+    \"setmocktime\",\n+    \"setnetworkactive\",\n+    \"signmessagewithprivkey\",\n+    \"signrawtransactionwithkey\",\n+    \"submitblock\",\n+    \"submitheader\",\n+    \"syncwithvalidationinterfacequeue\",\n+    \"testmempoolaccept\",\n+    \"uptime\",\n+    \"utxoupdatepsbt\",\n+    \"validateaddress\",\n+    \"verifychain\",\n+    \"verifymessage\",\n+    \"verifytxoutproof\",\n+    \"waitforblock\",\n+    \"waitforblockheight\",\n+    \"waitfornewblock\",\n+};\n+\n+std::string ConsumeScalarRPCArgument(FuzzedDataProvider& fuzzed_data_provider)\n+{\n+    const size_t max_string_length = 4096;\n+    std::string r;\n+    CallOneOf(\n+        fuzzed_data_provider,\n+        [&] {\n+            // string argument\n+            r = fuzzed_data_provider.ConsumeRandomLengthString(max_string_length);\n+        },\n+        [&] {\n+            // base64 argument\n+            r = EncodeBase64(fuzzed_data_provider.ConsumeRandomLengthString(max_string_length));\n+        },\n+        [&] {\n+            // hex argument\n+            r = HexStr(fuzzed_data_provider.ConsumeRandomLengthString(max_string_length));\n+        },\n+        [&] {\n+            // bool argument\n+            r = fuzzed_data_provider.ConsumeBool() ? \"true\" : \"false\";\n+        },\n+        [&] {\n+            // range argument\n+            r = \"[\" + ToString(fuzzed_data_provider.ConsumeIntegral<int64_t>()) + \",\" + ToString(fuzzed_data_provider.ConsumeIntegral<int64_t>()) + \"]\";\n+        },\n+        [&] {\n+            // integral argument (int64_t)\n+            r = ToString(fuzzed_data_provider.ConsumeIntegral<int64_t>());\n+        },\n+        [&] {\n+            // integral argument (uint64_t)\n+            r = ToString(fuzzed_data_provider.ConsumeIntegral<uint64_t>());\n+        },\n+        [&] {\n+            // floating point argument\n+            r = strprintf(\"%f\", fuzzed_data_provider.ConsumeFloatingPoint<double>());\n+        },\n+        [&] {\n+            // tx destination argument\n+            r = EncodeDestination(ConsumeTxDestination(fuzzed_data_provider));\n+        },\n+        [&] {\n+            // uint160 argument\n+            r = ConsumeUInt160(fuzzed_data_provider).ToString();\n+        },\n+        [&] {\n+            // uint256 argument\n+            r = ConsumeUInt256(fuzzed_data_provider).ToString();\n+        },\n+        [&] {\n+            // base32 argument\n+            r = EncodeBase32(fuzzed_data_provider.ConsumeRandomLengthString(max_string_length));\n+        },\n+        [&] {\n+            // base58 argument\n+            r = EncodeBase58(MakeUCharSpan(fuzzed_data_provider.ConsumeRandomLengthString(max_string_length)));\n+        },\n+        [&] {\n+            // base58 argument with checksum\n+            r = EncodeBase58Check(MakeUCharSpan(fuzzed_data_provider.ConsumeRandomLengthString(max_string_length)));\n+        },\n+        [&] {\n+            // hex encoded block\n+            std::optional<CBlock> opt_block = ConsumeDeserializable<CBlock>(fuzzed_data_provider);\n+            if (!opt_block) {\n+                return;\n+            }\n+            CDataStream data_stream{SER_NETWORK, PROTOCOL_VERSION};\n+            data_stream << *opt_block;\n+            r = HexStr(data_stream);\n+        },\n+        [&] {\n+            // hex encoded block header\n+            std::optional<CBlockHeader> opt_block_header = ConsumeDeserializable<CBlockHeader>(fuzzed_data_provider);\n+            if (!opt_block_header) {\n+                return;\n+            }\n+            CDataStream data_stream{SER_NETWORK, PROTOCOL_VERSION};\n+            data_stream << *opt_block_header;\n+            r = HexStr(data_stream);\n+        },\n+        [&] {\n+            // hex encoded tx\n+            std::optional<CMutableTransaction> opt_tx = ConsumeDeserializable<CMutableTransaction>(fuzzed_data_provider);\n+            if (!opt_tx) {\n+                return;\n+            }\n+            CDataStream data_stream{SER_NETWORK, fuzzed_data_provider.ConsumeBool() ? PROTOCOL_VERSION : (PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS)};\n+            data_stream << *opt_tx;\n+            r = HexStr(data_stream);\n+        },\n+        [&] {\n+            // base64 encoded psbt\n+            std::optional<PartiallySignedTransaction> opt_psbt = ConsumeDeserializable<PartiallySignedTransaction>(fuzzed_data_provider);\n+            if (!opt_psbt) {\n+                return;\n+            }\n+            CDataStream data_stream{SER_NETWORK, PROTOCOL_VERSION};\n+            data_stream << *opt_psbt;\n+            r = EncodeBase64({data_stream.begin(), data_stream.end()});\n+        },\n+        [&] {\n+            // base58 encoded key\n+            const std::vector<uint8_t> random_bytes = fuzzed_data_provider.ConsumeBytes<uint8_t>(32);\n+            CKey key;\n+            key.Set(random_bytes.begin(), random_bytes.end(), fuzzed_data_provider.ConsumeBool());\n+            if (!key.IsValid()) {\n+                return;\n+            }\n+            r = EncodeSecret(key);\n+        },\n+        [&] {\n+            // hex encoded pubkey\n+            const std::vector<uint8_t> random_bytes = fuzzed_data_provider.ConsumeBytes<uint8_t>(32);\n+            CKey key;\n+            key.Set(random_bytes.begin(), random_bytes.end(), fuzzed_data_provider.ConsumeBool());\n+            if (!key.IsValid()) {\n+                return;\n+            }\n+            r = HexStr(key.GetPubKey());\n+        });\n+    return r;\n+}\n+\n+std::string ConsumeArrayRPCArgument(FuzzedDataProvider& fuzzed_data_provider)\n+{\n+    std::vector<std::string> scalar_arguments;\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        scalar_arguments.push_back(ConsumeScalarRPCArgument(fuzzed_data_provider));\n+    }\n+    return \"[\\\"\" + Join(scalar_arguments, \"\\\",\\\"\") + \"\\\"]\";\n+}\n+\n+std::string ConsumeRPCArgument(FuzzedDataProvider& fuzzed_data_provider)\n+{\n+    return fuzzed_data_provider.ConsumeBool() ? ConsumeScalarRPCArgument(fuzzed_data_provider) : ConsumeArrayRPCArgument(fuzzed_data_provider);\n+}\n+\n+RPCFuzzTestingSetup* InitializeRPCFuzzTestingSetup()\n+{\n+    static const auto setup = MakeNoLogFileContext<RPCFuzzTestingSetup>();\n+    SetRPCWarmupFinished();\n+    return setup.get();\n+}\n+}; // namespace\n+\n+void initialize_rpc()\n+{\n+    rpc_testing_setup = InitializeRPCFuzzTestingSetup();\n+    const std::vector<std::string> supported_rpc_commands = rpc_testing_setup->GetRPCCommands();\n+    for (const std::string& rpc_command : supported_rpc_commands) {\n+        const bool safe_for_fuzzing = std::find(RPC_COMMANDS_SAFE_FOR_FUZZING.begin(), RPC_COMMANDS_SAFE_FOR_FUZZING.end(), rpc_command) != RPC_COMMANDS_SAFE_FOR_FUZZING.end();\n+        const bool not_safe_for_fuzzing = std::find(RPC_COMMANDS_NOT_SAFE_FOR_FUZZING.begin(), RPC_COMMANDS_NOT_SAFE_FOR_FUZZING.end(), rpc_command) != RPC_COMMANDS_NOT_SAFE_FOR_FUZZING.end();\n+        if (!(safe_for_fuzzing || not_safe_for_fuzzing)) {\n+            std::cerr << \"Error: RPC command \\\"\" << rpc_command << \"\\\" not found in RPC_COMMANDS_SAFE_FOR_FUZZING or RPC_COMMANDS_NOT_SAFE_FOR_FUZZING. Please update \" << __FILE__ << \".\\n\";\n+            std::terminate();\n+        }\n+        if (safe_for_fuzzing && not_safe_for_fuzzing) {\n+            std::cerr << \"Error: RPC command \\\"\" << rpc_command << \"\\\" found in *both* RPC_COMMANDS_SAFE_FOR_FUZZING and RPC_COMMANDS_NOT_SAFE_FOR_FUZZING. Please update \" << __FILE__ << \".\\n\";\n+            std::terminate();\n+        }\n+    }\n+    for (const std::string& rpc_command : RPC_COMMANDS_SAFE_FOR_FUZZING) {\n+        const bool supported_rpc_command = std::find(supported_rpc_commands.begin(), supported_rpc_commands.end(), rpc_command) != supported_rpc_commands.end();\n+        if (!supported_rpc_command) {\n+            std::cerr << \"Error: Unknown RPC command \\\"\" << rpc_command << \"\\\" found in RPC_COMMANDS_SAFE_FOR_FUZZING. Please update \" << __FILE__ << \".\\n\";\n+            std::terminate();\n+        }\n+    }\n+    for (const std::string& rpc_command : RPC_COMMANDS_NOT_SAFE_FOR_FUZZING) {\n+        const bool supported_rpc_command = std::find(supported_rpc_commands.begin(), supported_rpc_commands.end(), rpc_command) != supported_rpc_commands.end();\n+        if (!supported_rpc_command) {\n+            std::cerr << \"Error: Unknown RPC command \\\"\" << rpc_command << \"\\\" found in RPC_COMMANDS_NOT_SAFE_FOR_FUZZING. Please update \" << __FILE__ << \".\\n\";\n+            std::terminate();\n+        }\n+    }\n+    const char* limit_to_rpc_command_env = getenv(\"LIMIT_TO_RPC_COMMAND\");",
    "path": "src/test/fuzz/rpc.cpp",
    "position": null,
    "original_position": 353,
    "commit_id": "545404e7e1c72985557ccffe865cea269143e5dd",
    "original_commit_id": "555556e2fe864c0644de4e3e75d1833d43b6eb19",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Addressed. Thanks!",
    "created_at": "2021-04-28T06:39:43Z",
    "updated_at": "2021-04-28T06:39:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21169#discussion_r621857947",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21169",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621857947"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21169#discussion_r621857947"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21169"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621857947/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 353,
    "side": "RIGHT",
    "in_reply_to_id": 621836878
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621858008",
    "pull_request_review_id": 646644313,
    "id": 621858008,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMTg1ODAwOA==",
    "diff_hunk": "@@ -0,0 +1,380 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <base58.h>\n+#include <chainparamsbase.h>\n+#include <core_io.h>\n+#include <interfaces/chain.h>\n+#include <key.h>\n+#include <key_io.h>\n+#include <node/context.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <psbt.h>\n+#include <rpc/blockchain.h>\n+#include <rpc/client.h>\n+#include <rpc/request.h>\n+#include <rpc/server.h>\n+#include <rpc/util.h>\n+#include <span.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+#include <tinyformat.h>\n+#include <univalue.h>\n+#include <util/strencodings.h>\n+#include <util/string.h>\n+#include <util/time.h>\n+\n+#include <cstdint>\n+#include <iostream>\n+#include <memory>\n+#include <optional>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+struct RPCFuzzTestingSetup : public TestingSetup {\n+    RPCFuzzTestingSetup(const std::string& chain_name, const std::vector<const char*>& extra_args) : TestingSetup{chain_name, extra_args}\n+    {\n+    }\n+\n+    UniValue CallRPC(const std::string& rpc_method, const std::vector<std::string>& arguments)\n+    {\n+        JSONRPCRequest request;\n+        request.context = &m_node;\n+        request.strMethod = rpc_method;\n+        request.params = RPCConvertValues(rpc_method, arguments);\n+        return tableRPC.execute(request);\n+    }\n+\n+    std::vector<std::string> GetRPCCommands() const\n+    {\n+        return tableRPC.listCommands();\n+    }\n+};\n+\n+RPCFuzzTestingSetup* rpc_testing_setup = nullptr;\n+std::string limit_to_rpc_command;",
    "path": "src/test/fuzz/rpc.cpp",
    "position": null,
    "original_position": 62,
    "commit_id": "545404e7e1c72985557ccffe865cea269143e5dd",
    "original_commit_id": "555556e2fe864c0644de4e3e75d1833d43b6eb19",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Addressed. Thanks!",
    "created_at": "2021-04-28T06:39:50Z",
    "updated_at": "2021-04-28T06:39:50Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21169#discussion_r621858008",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21169",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621858008"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21169#discussion_r621858008"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21169"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621858008/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 62,
    "side": "RIGHT",
    "in_reply_to_id": 621837799
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621920004",
    "pull_request_review_id": 646723483,
    "id": 621920004,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMTkyMDAwNA==",
    "diff_hunk": "@@ -0,0 +1,378 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <base58.h>\n+#include <chainparamsbase.h>\n+#include <core_io.h>\n+#include <interfaces/chain.h>\n+#include <key.h>\n+#include <key_io.h>\n+#include <node/context.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <psbt.h>\n+#include <rpc/blockchain.h>\n+#include <rpc/client.h>\n+#include <rpc/request.h>\n+#include <rpc/server.h>\n+#include <rpc/util.h>\n+#include <span.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+#include <tinyformat.h>\n+#include <univalue.h>\n+#include <util/strencodings.h>\n+#include <util/string.h>\n+#include <util/time.h>\n+\n+#include <cstdint>\n+#include <iostream>\n+#include <memory>\n+#include <optional>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+struct RPCFuzzTestingSetup : public TestingSetup {\n+    RPCFuzzTestingSetup(const std::string& chain_name, const std::vector<const char*>& extra_args) : TestingSetup{chain_name, extra_args}\n+    {\n+    }\n+\n+    UniValue CallRPC(const std::string& rpc_method, const std::vector<std::string>& arguments)\n+    {\n+        JSONRPCRequest request;\n+        request.context = &m_node;\n+        request.strMethod = rpc_method;\n+        request.params = RPCConvertValues(rpc_method, arguments);\n+        return tableRPC.execute(request);\n+    }\n+\n+    std::vector<std::string> GetRPCCommands() const\n+    {\n+        return tableRPC.listCommands();\n+    }\n+};\n+\n+RPCFuzzTestingSetup* rpc_testing_setup = nullptr;\n+std::string g_limit_to_rpc_command;\n+\n+// RPC commands which are not appropriate for fuzzing: such as RPC commands\n+// reading or writing to a filename passed as an RPC parameter, RPC commands\n+// resulting in network activity, etc.\n+const std::vector<std::string> RPC_COMMANDS_NOT_SAFE_FOR_FUZZING{\n+    \"addconnection\",  // avoid DNS lookups\n+    \"addnode\",        // avoid DNS lookups\n+    \"addpeeraddress\", // avoid DNS lookups\n+    \"analyzepsbt\",    // avoid signed integer overflow in CFeeRate::GetFee(unsigned long) (https://github.com/bitcoin/bitcoin/issues/20607)\n+    \"dumptxoutset\",   // avoid writing to disk\n+#ifdef ENABLE_WALLET\n+    \"dumpwallet\", // avoid writing to disk\n+#endif\n+    \"echoipc\",           // avoid assertion failure (Assertion `\"EnsureAnyNodeContext(request.context).init\" && check' failed.)\n+    \"generatetoaddress\", // avoid timeout",
    "path": "src/test/fuzz/rpc.cpp",
    "position": 77,
    "original_position": 77,
    "commit_id": "545404e7e1c72985557ccffe865cea269143e5dd",
    "original_commit_id": "545404e7e1c72985557ccffe865cea269143e5dd",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "why is this unsafe, but the other generate* calls are safe?",
    "created_at": "2021-04-28T08:10:05Z",
    "updated_at": "2021-04-28T08:19:54Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21169#discussion_r621920004",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21169",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621920004"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21169#discussion_r621920004"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21169"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621920004/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 77,
    "original_line": 77,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621920136",
    "pull_request_review_id": 646723483,
    "id": 621920136,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMTkyMDEzNg==",
    "diff_hunk": "@@ -0,0 +1,378 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <base58.h>\n+#include <chainparamsbase.h>",
    "path": "src/test/fuzz/rpc.cpp",
    "position": 6,
    "original_position": 6,
    "commit_id": "545404e7e1c72985557ccffe865cea269143e5dd",
    "original_commit_id": "545404e7e1c72985557ccffe865cea269143e5dd",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "unused?",
    "created_at": "2021-04-28T08:10:14Z",
    "updated_at": "2021-04-28T08:19:54Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21169#discussion_r621920136",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21169",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621920136"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21169#discussion_r621920136"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21169"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621920136/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 6,
    "original_line": 6,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621920483",
    "pull_request_review_id": 646723483,
    "id": 621920483,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMTkyMDQ4Mw==",
    "diff_hunk": "@@ -0,0 +1,378 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <base58.h>\n+#include <chainparamsbase.h>\n+#include <core_io.h>\n+#include <interfaces/chain.h>",
    "path": "src/test/fuzz/rpc.cpp",
    "position": 8,
    "original_position": 8,
    "commit_id": "545404e7e1c72985557ccffe865cea269143e5dd",
    "original_commit_id": "545404e7e1c72985557ccffe865cea269143e5dd",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "unused?",
    "created_at": "2021-04-28T08:10:41Z",
    "updated_at": "2021-04-28T08:19:54Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21169#discussion_r621920483",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21169",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621920483"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21169#discussion_r621920483"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21169"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621920483/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 8,
    "original_line": 8,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621920578",
    "pull_request_review_id": 646723483,
    "id": 621920578,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMTkyMDU3OA==",
    "diff_hunk": "@@ -0,0 +1,378 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <base58.h>\n+#include <chainparamsbase.h>\n+#include <core_io.h>\n+#include <interfaces/chain.h>\n+#include <key.h>\n+#include <key_io.h>\n+#include <node/context.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <psbt.h>\n+#include <rpc/blockchain.h>\n+#include <rpc/client.h>\n+#include <rpc/request.h>\n+#include <rpc/server.h>\n+#include <rpc/util.h>\n+#include <span.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+#include <tinyformat.h>\n+#include <univalue.h>\n+#include <util/strencodings.h>\n+#include <util/string.h>\n+#include <util/time.h>\n+\n+#include <cstdint>\n+#include <iostream>\n+#include <memory>\n+#include <optional>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+struct RPCFuzzTestingSetup : public TestingSetup {\n+    RPCFuzzTestingSetup(const std::string& chain_name, const std::vector<const char*>& extra_args) : TestingSetup{chain_name, extra_args}\n+    {\n+    }\n+\n+    UniValue CallRPC(const std::string& rpc_method, const std::vector<std::string>& arguments)\n+    {\n+        JSONRPCRequest request;\n+        request.context = &m_node;\n+        request.strMethod = rpc_method;\n+        request.params = RPCConvertValues(rpc_method, arguments);\n+        return tableRPC.execute(request);\n+    }\n+\n+    std::vector<std::string> GetRPCCommands() const\n+    {\n+        return tableRPC.listCommands();\n+    }\n+};\n+\n+RPCFuzzTestingSetup* rpc_testing_setup = nullptr;\n+std::string g_limit_to_rpc_command;\n+\n+// RPC commands which are not appropriate for fuzzing: such as RPC commands\n+// reading or writing to a filename passed as an RPC parameter, RPC commands\n+// resulting in network activity, etc.\n+const std::vector<std::string> RPC_COMMANDS_NOT_SAFE_FOR_FUZZING{\n+    \"addconnection\",  // avoid DNS lookups\n+    \"addnode\",        // avoid DNS lookups\n+    \"addpeeraddress\", // avoid DNS lookups\n+    \"analyzepsbt\",    // avoid signed integer overflow in CFeeRate::GetFee(unsigned long) (https://github.com/bitcoin/bitcoin/issues/20607)\n+    \"dumptxoutset\",   // avoid writing to disk\n+#ifdef ENABLE_WALLET\n+    \"dumpwallet\", // avoid writing to disk\n+#endif\n+    \"echoipc\",           // avoid assertion failure (Assertion `\"EnsureAnyNodeContext(request.context).init\" && check' failed.)\n+    \"generatetoaddress\", // avoid timeout\n+    \"gettxoutproof\",     // avoid slow execution\n+#ifdef ENABLE_WALLET\n+    \"importwallet\", // avoid reading from disk\n+    \"loadwallet\",   // avoid reading from disk\n+#endif\n+    \"mockscheduler\",         // avoid assertion failure (Assertion `delta_seconds.count() > 0 && delta_seconds < std::chrono::hours{1}' failed.)",
    "path": "src/test/fuzz/rpc.cpp",
    "position": 83,
    "original_position": 83,
    "commit_id": "545404e7e1c72985557ccffe865cea269143e5dd",
    "original_commit_id": "545404e7e1c72985557ccffe865cea269143e5dd",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "fixed?",
    "created_at": "2021-04-28T08:10:48Z",
    "updated_at": "2021-04-28T08:19:54Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21169#discussion_r621920578",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21169",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621920578"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21169#discussion_r621920578"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21169"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621920578/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 83,
    "original_line": 83,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621927784",
    "pull_request_review_id": 646723483,
    "id": 621927784,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMTkyNzc4NA==",
    "diff_hunk": "@@ -0,0 +1,378 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <base58.h>\n+#include <chainparamsbase.h>\n+#include <core_io.h>\n+#include <interfaces/chain.h>\n+#include <key.h>\n+#include <key_io.h>\n+#include <node/context.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <psbt.h>\n+#include <rpc/blockchain.h>\n+#include <rpc/client.h>\n+#include <rpc/request.h>\n+#include <rpc/server.h>\n+#include <rpc/util.h>\n+#include <span.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+#include <tinyformat.h>\n+#include <univalue.h>\n+#include <util/strencodings.h>\n+#include <util/string.h>\n+#include <util/time.h>\n+\n+#include <cstdint>\n+#include <iostream>\n+#include <memory>\n+#include <optional>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+struct RPCFuzzTestingSetup : public TestingSetup {\n+    RPCFuzzTestingSetup(const std::string& chain_name, const std::vector<const char*>& extra_args) : TestingSetup{chain_name, extra_args}\n+    {\n+    }\n+\n+    UniValue CallRPC(const std::string& rpc_method, const std::vector<std::string>& arguments)\n+    {\n+        JSONRPCRequest request;\n+        request.context = &m_node;\n+        request.strMethod = rpc_method;\n+        request.params = RPCConvertValues(rpc_method, arguments);\n+        return tableRPC.execute(request);\n+    }\n+\n+    std::vector<std::string> GetRPCCommands() const\n+    {\n+        return tableRPC.listCommands();\n+    }\n+};\n+\n+RPCFuzzTestingSetup* rpc_testing_setup = nullptr;\n+std::string g_limit_to_rpc_command;\n+\n+// RPC commands which are not appropriate for fuzzing: such as RPC commands\n+// reading or writing to a filename passed as an RPC parameter, RPC commands\n+// resulting in network activity, etc.\n+const std::vector<std::string> RPC_COMMANDS_NOT_SAFE_FOR_FUZZING{\n+    \"addconnection\",  // avoid DNS lookups\n+    \"addnode\",        // avoid DNS lookups\n+    \"addpeeraddress\", // avoid DNS lookups\n+    \"analyzepsbt\",    // avoid signed integer overflow in CFeeRate::GetFee(unsigned long) (https://github.com/bitcoin/bitcoin/issues/20607)\n+    \"dumptxoutset\",   // avoid writing to disk\n+#ifdef ENABLE_WALLET\n+    \"dumpwallet\", // avoid writing to disk\n+#endif\n+    \"echoipc\",           // avoid assertion failure (Assertion `\"EnsureAnyNodeContext(request.context).init\" && check' failed.)\n+    \"generatetoaddress\", // avoid timeout\n+    \"gettxoutproof\",     // avoid slow execution\n+#ifdef ENABLE_WALLET\n+    \"importwallet\", // avoid reading from disk\n+    \"loadwallet\",   // avoid reading from disk\n+#endif\n+    \"mockscheduler\",         // avoid assertion failure (Assertion `delta_seconds.count() > 0 && delta_seconds < std::chrono::hours{1}' failed.)\n+    \"prioritisetransaction\", // avoid signed integer overflow in CTxMemPool::PrioritiseTransaction(uint256 const&, long const&) (https://github.com/bitcoin/bitcoin/issues/20626)\n+    \"setban\",                // avoid DNS lookups\n+    \"stop\",                  // avoid shutdown state\n+};\n+\n+// RPC commands which are safe for fuzzing.\n+const std::vector<std::string> RPC_COMMANDS_SAFE_FOR_FUZZING{\n+    \"clearbanned\",\n+    \"combinepsbt\",\n+    \"combinerawtransaction\",\n+    \"converttopsbt\",\n+    \"createmultisig\",\n+    \"createpsbt\",\n+    \"createrawtransaction\",\n+    \"decodepsbt\",\n+    \"decoderawtransaction\",\n+    \"decodescript\",\n+    \"deriveaddresses\",\n+    \"disconnectnode\",\n+    \"echo\",\n+    \"echojson\",\n+    \"estimaterawfee\",\n+    \"estimatesmartfee\",\n+    \"finalizepsbt\",\n+    \"generate\",\n+    \"generateblock\",\n+    \"generatetodescriptor\",\n+    \"getaddednodeinfo\",\n+    \"getbestblockhash\",\n+    \"getblock\",\n+    \"getblockchaininfo\",\n+    \"getblockcount\",\n+    \"getblockfilter\",\n+    \"getblockhash\",\n+    \"getblockheader\",\n+    \"getblockstats\",\n+    \"getblocktemplate\",\n+    \"getchaintips\",\n+    \"getchaintxstats\",\n+    \"getconnectioncount\",\n+    \"getdescriptorinfo\",\n+    \"getdifficulty\",\n+    \"getindexinfo\",\n+    \"getmemoryinfo\",\n+    \"getmempoolancestors\",\n+    \"getmempooldescendants\",\n+    \"getmempoolentry\",\n+    \"getmempoolinfo\",\n+    \"getmininginfo\",\n+    \"getnettotals\",\n+    \"getnetworkhashps\",\n+    \"getnetworkinfo\",\n+    \"getnodeaddresses\",\n+    \"getpeerinfo\",\n+    \"getrawmempool\",\n+    \"getrawtransaction\",\n+    \"getrpcinfo\",\n+    \"gettxout\",\n+    \"gettxoutsetinfo\",\n+    \"help\",\n+    \"invalidateblock\",\n+    \"joinpsbts\",\n+    \"listbanned\",\n+    \"logging\",\n+    \"ping\",\n+    \"preciousblock\",\n+    \"pruneblockchain\",\n+    \"reconsiderblock\",\n+    \"savemempool\",",
    "path": "src/test/fuzz/rpc.cpp",
    "position": 152,
    "original_position": 152,
    "commit_id": "545404e7e1c72985557ccffe865cea269143e5dd",
    "original_commit_id": "545404e7e1c72985557ccffe865cea269143e5dd",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This seems dangerous. If the rpc is ever changed to take a file path, how would we know to adjust this line?",
    "created_at": "2021-04-28T08:19:39Z",
    "updated_at": "2021-04-28T08:19:54Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21169#discussion_r621927784",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21169",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621927784"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21169#discussion_r621927784"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21169"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621927784/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 152,
    "original_line": 152,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/623306715",
    "pull_request_review_id": 648541424,
    "id": 623306715,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMzMwNjcxNQ==",
    "diff_hunk": "@@ -0,0 +1,378 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <base58.h>\n+#include <chainparamsbase.h>\n+#include <core_io.h>\n+#include <interfaces/chain.h>\n+#include <key.h>\n+#include <key_io.h>\n+#include <node/context.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <psbt.h>\n+#include <rpc/blockchain.h>\n+#include <rpc/client.h>\n+#include <rpc/request.h>\n+#include <rpc/server.h>\n+#include <rpc/util.h>\n+#include <span.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+#include <tinyformat.h>\n+#include <univalue.h>\n+#include <util/strencodings.h>\n+#include <util/string.h>\n+#include <util/time.h>\n+\n+#include <cstdint>\n+#include <iostream>\n+#include <memory>\n+#include <optional>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+struct RPCFuzzTestingSetup : public TestingSetup {\n+    RPCFuzzTestingSetup(const std::string& chain_name, const std::vector<const char*>& extra_args) : TestingSetup{chain_name, extra_args}\n+    {\n+    }\n+\n+    UniValue CallRPC(const std::string& rpc_method, const std::vector<std::string>& arguments)\n+    {\n+        JSONRPCRequest request;\n+        request.context = &m_node;\n+        request.strMethod = rpc_method;\n+        request.params = RPCConvertValues(rpc_method, arguments);\n+        return tableRPC.execute(request);\n+    }\n+\n+    std::vector<std::string> GetRPCCommands() const\n+    {\n+        return tableRPC.listCommands();\n+    }\n+};\n+\n+RPCFuzzTestingSetup* rpc_testing_setup = nullptr;\n+std::string g_limit_to_rpc_command;\n+\n+// RPC commands which are not appropriate for fuzzing: such as RPC commands\n+// reading or writing to a filename passed as an RPC parameter, RPC commands\n+// resulting in network activity, etc.\n+const std::vector<std::string> RPC_COMMANDS_NOT_SAFE_FOR_FUZZING{\n+    \"addconnection\",  // avoid DNS lookups\n+    \"addnode\",        // avoid DNS lookups\n+    \"addpeeraddress\", // avoid DNS lookups\n+    \"analyzepsbt\",    // avoid signed integer overflow in CFeeRate::GetFee(unsigned long) (https://github.com/bitcoin/bitcoin/issues/20607)\n+    \"dumptxoutset\",   // avoid writing to disk\n+#ifdef ENABLE_WALLET\n+    \"dumpwallet\", // avoid writing to disk\n+#endif\n+    \"echoipc\",           // avoid assertion failure (Assertion `\"EnsureAnyNodeContext(request.context).init\" && check' failed.)\n+    \"generatetoaddress\", // avoid timeout",
    "path": "src/test/fuzz/rpc.cpp",
    "position": 77,
    "original_position": 77,
    "commit_id": "545404e7e1c72985557ccffe865cea269143e5dd",
    "original_commit_id": "545404e7e1c72985557ccffe865cea269143e5dd",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Thanks! Addressed in #21810:\r\n\r\n```\r\n    \"generatetoaddress\",    // avoid prohibitively slow execution (when `num_blocks` is large)\r\n    \"generatetodescriptor\", // avoid prohibitively slow execution (when `nblocks` is large)\r\n```",
    "created_at": "2021-04-29T18:48:52Z",
    "updated_at": "2021-04-29T18:48:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21169#discussion_r623306715",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21169",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/623306715"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21169#discussion_r623306715"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21169"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/623306715/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 77,
    "original_line": 77,
    "side": "RIGHT",
    "in_reply_to_id": 621920004
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/623311399",
    "pull_request_review_id": 648547448,
    "id": 623311399,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMzMxMTM5OQ==",
    "diff_hunk": "@@ -0,0 +1,378 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <base58.h>\n+#include <chainparamsbase.h>\n+#include <core_io.h>\n+#include <interfaces/chain.h>\n+#include <key.h>\n+#include <key_io.h>\n+#include <node/context.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <psbt.h>\n+#include <rpc/blockchain.h>\n+#include <rpc/client.h>\n+#include <rpc/request.h>\n+#include <rpc/server.h>\n+#include <rpc/util.h>\n+#include <span.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+#include <tinyformat.h>\n+#include <univalue.h>\n+#include <util/strencodings.h>\n+#include <util/string.h>\n+#include <util/time.h>\n+\n+#include <cstdint>\n+#include <iostream>\n+#include <memory>\n+#include <optional>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+struct RPCFuzzTestingSetup : public TestingSetup {\n+    RPCFuzzTestingSetup(const std::string& chain_name, const std::vector<const char*>& extra_args) : TestingSetup{chain_name, extra_args}\n+    {\n+    }\n+\n+    UniValue CallRPC(const std::string& rpc_method, const std::vector<std::string>& arguments)\n+    {\n+        JSONRPCRequest request;\n+        request.context = &m_node;\n+        request.strMethod = rpc_method;\n+        request.params = RPCConvertValues(rpc_method, arguments);\n+        return tableRPC.execute(request);\n+    }\n+\n+    std::vector<std::string> GetRPCCommands() const\n+    {\n+        return tableRPC.listCommands();\n+    }\n+};\n+\n+RPCFuzzTestingSetup* rpc_testing_setup = nullptr;\n+std::string g_limit_to_rpc_command;\n+\n+// RPC commands which are not appropriate for fuzzing: such as RPC commands\n+// reading or writing to a filename passed as an RPC parameter, RPC commands\n+// resulting in network activity, etc.\n+const std::vector<std::string> RPC_COMMANDS_NOT_SAFE_FOR_FUZZING{\n+    \"addconnection\",  // avoid DNS lookups\n+    \"addnode\",        // avoid DNS lookups\n+    \"addpeeraddress\", // avoid DNS lookups\n+    \"analyzepsbt\",    // avoid signed integer overflow in CFeeRate::GetFee(unsigned long) (https://github.com/bitcoin/bitcoin/issues/20607)\n+    \"dumptxoutset\",   // avoid writing to disk\n+#ifdef ENABLE_WALLET\n+    \"dumpwallet\", // avoid writing to disk\n+#endif\n+    \"echoipc\",           // avoid assertion failure (Assertion `\"EnsureAnyNodeContext(request.context).init\" && check' failed.)\n+    \"generatetoaddress\", // avoid timeout\n+    \"gettxoutproof\",     // avoid slow execution\n+#ifdef ENABLE_WALLET\n+    \"importwallet\", // avoid reading from disk\n+    \"loadwallet\",   // avoid reading from disk\n+#endif\n+    \"mockscheduler\",         // avoid assertion failure (Assertion `delta_seconds.count() > 0 && delta_seconds < std::chrono::hours{1}' failed.)\n+    \"prioritisetransaction\", // avoid signed integer overflow in CTxMemPool::PrioritiseTransaction(uint256 const&, long const&) (https://github.com/bitcoin/bitcoin/issues/20626)\n+    \"setban\",                // avoid DNS lookups\n+    \"stop\",                  // avoid shutdown state\n+};\n+\n+// RPC commands which are safe for fuzzing.\n+const std::vector<std::string> RPC_COMMANDS_SAFE_FOR_FUZZING{\n+    \"clearbanned\",\n+    \"combinepsbt\",\n+    \"combinerawtransaction\",\n+    \"converttopsbt\",\n+    \"createmultisig\",\n+    \"createpsbt\",\n+    \"createrawtransaction\",\n+    \"decodepsbt\",\n+    \"decoderawtransaction\",\n+    \"decodescript\",\n+    \"deriveaddresses\",\n+    \"disconnectnode\",\n+    \"echo\",\n+    \"echojson\",\n+    \"estimaterawfee\",\n+    \"estimatesmartfee\",\n+    \"finalizepsbt\",\n+    \"generate\",\n+    \"generateblock\",\n+    \"generatetodescriptor\",\n+    \"getaddednodeinfo\",\n+    \"getbestblockhash\",\n+    \"getblock\",\n+    \"getblockchaininfo\",\n+    \"getblockcount\",\n+    \"getblockfilter\",\n+    \"getblockhash\",\n+    \"getblockheader\",\n+    \"getblockstats\",\n+    \"getblocktemplate\",\n+    \"getchaintips\",\n+    \"getchaintxstats\",\n+    \"getconnectioncount\",\n+    \"getdescriptorinfo\",\n+    \"getdifficulty\",\n+    \"getindexinfo\",\n+    \"getmemoryinfo\",\n+    \"getmempoolancestors\",\n+    \"getmempooldescendants\",\n+    \"getmempoolentry\",\n+    \"getmempoolinfo\",\n+    \"getmininginfo\",\n+    \"getnettotals\",\n+    \"getnetworkhashps\",\n+    \"getnetworkinfo\",\n+    \"getnodeaddresses\",\n+    \"getpeerinfo\",\n+    \"getrawmempool\",\n+    \"getrawtransaction\",\n+    \"getrpcinfo\",\n+    \"gettxout\",\n+    \"gettxoutsetinfo\",\n+    \"help\",\n+    \"invalidateblock\",\n+    \"joinpsbts\",\n+    \"listbanned\",\n+    \"logging\",\n+    \"ping\",\n+    \"preciousblock\",\n+    \"pruneblockchain\",\n+    \"reconsiderblock\",\n+    \"savemempool\",",
    "path": "src/test/fuzz/rpc.cpp",
    "position": 152,
    "original_position": 152,
    "commit_id": "545404e7e1c72985557ccffe865cea269143e5dd",
    "original_commit_id": "545404e7e1c72985557ccffe865cea269143e5dd",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Good point. Disabled as a precautionary measure in #21810.\r\n\r\n`dump*`, `save*`, `import*` and `load*` commands should probably not be part of `RPC_COMMANDS_SAFE_FOR_FUZZING`.\r\n\r\nLonger term we could perhaps also find a clever way to annotate/auto-detect RPC commands with file path arguments and have them automatically removed from `RPC_COMMANDS_SAFE_FOR_FUZZING` if they are incorrectly included there for some reason. Belts and suspenders! :)",
    "created_at": "2021-04-29T18:56:17Z",
    "updated_at": "2021-04-29T19:05:49Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21169#discussion_r623311399",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21169",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/623311399"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21169#discussion_r623311399"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21169"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/623311399/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 152,
    "original_line": 152,
    "side": "RIGHT",
    "in_reply_to_id": 621927784
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/623316981",
    "pull_request_review_id": 648554651,
    "id": 623316981,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMzMxNjk4MQ==",
    "diff_hunk": "@@ -0,0 +1,378 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <base58.h>\n+#include <chainparamsbase.h>",
    "path": "src/test/fuzz/rpc.cpp",
    "position": 6,
    "original_position": 6,
    "commit_id": "545404e7e1c72985557ccffe865cea269143e5dd",
    "original_commit_id": "545404e7e1c72985557ccffe865cea269143e5dd",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Thanks! Addressed in follow-up.",
    "created_at": "2021-04-29T19:05:04Z",
    "updated_at": "2021-04-29T19:05:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21169#discussion_r623316981",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21169",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/623316981"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21169#discussion_r623316981"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21169"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/623316981/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 6,
    "original_line": 6,
    "side": "RIGHT",
    "in_reply_to_id": 621920136
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/623317017",
    "pull_request_review_id": 648554709,
    "id": 623317017,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMzMxNzAxNw==",
    "diff_hunk": "@@ -0,0 +1,378 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <base58.h>\n+#include <chainparamsbase.h>\n+#include <core_io.h>\n+#include <interfaces/chain.h>",
    "path": "src/test/fuzz/rpc.cpp",
    "position": 8,
    "original_position": 8,
    "commit_id": "545404e7e1c72985557ccffe865cea269143e5dd",
    "original_commit_id": "545404e7e1c72985557ccffe865cea269143e5dd",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Thanks! Addressed in follow-up.",
    "created_at": "2021-04-29T19:05:08Z",
    "updated_at": "2021-04-29T19:05:08Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21169#discussion_r623317017",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21169",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/623317017"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21169#discussion_r623317017"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21169"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/623317017/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 8,
    "original_line": 8,
    "side": "RIGHT",
    "in_reply_to_id": 621920483
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/623317211",
    "pull_request_review_id": 648554979,
    "id": 623317211,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMzMxNzIxMQ==",
    "diff_hunk": "@@ -0,0 +1,378 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <base58.h>\n+#include <chainparamsbase.h>\n+#include <core_io.h>\n+#include <interfaces/chain.h>\n+#include <key.h>\n+#include <key_io.h>\n+#include <node/context.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <psbt.h>\n+#include <rpc/blockchain.h>\n+#include <rpc/client.h>\n+#include <rpc/request.h>\n+#include <rpc/server.h>\n+#include <rpc/util.h>\n+#include <span.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+#include <tinyformat.h>\n+#include <univalue.h>\n+#include <util/strencodings.h>\n+#include <util/string.h>\n+#include <util/time.h>\n+\n+#include <cstdint>\n+#include <iostream>\n+#include <memory>\n+#include <optional>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+struct RPCFuzzTestingSetup : public TestingSetup {\n+    RPCFuzzTestingSetup(const std::string& chain_name, const std::vector<const char*>& extra_args) : TestingSetup{chain_name, extra_args}\n+    {\n+    }\n+\n+    UniValue CallRPC(const std::string& rpc_method, const std::vector<std::string>& arguments)\n+    {\n+        JSONRPCRequest request;\n+        request.context = &m_node;\n+        request.strMethod = rpc_method;\n+        request.params = RPCConvertValues(rpc_method, arguments);\n+        return tableRPC.execute(request);\n+    }\n+\n+    std::vector<std::string> GetRPCCommands() const\n+    {\n+        return tableRPC.listCommands();\n+    }\n+};\n+\n+RPCFuzzTestingSetup* rpc_testing_setup = nullptr;\n+std::string g_limit_to_rpc_command;\n+\n+// RPC commands which are not appropriate for fuzzing: such as RPC commands\n+// reading or writing to a filename passed as an RPC parameter, RPC commands\n+// resulting in network activity, etc.\n+const std::vector<std::string> RPC_COMMANDS_NOT_SAFE_FOR_FUZZING{\n+    \"addconnection\",  // avoid DNS lookups\n+    \"addnode\",        // avoid DNS lookups\n+    \"addpeeraddress\", // avoid DNS lookups\n+    \"analyzepsbt\",    // avoid signed integer overflow in CFeeRate::GetFee(unsigned long) (https://github.com/bitcoin/bitcoin/issues/20607)\n+    \"dumptxoutset\",   // avoid writing to disk\n+#ifdef ENABLE_WALLET\n+    \"dumpwallet\", // avoid writing to disk\n+#endif\n+    \"echoipc\",           // avoid assertion failure (Assertion `\"EnsureAnyNodeContext(request.context).init\" && check' failed.)\n+    \"generatetoaddress\", // avoid timeout\n+    \"gettxoutproof\",     // avoid slow execution\n+#ifdef ENABLE_WALLET\n+    \"importwallet\", // avoid reading from disk\n+    \"loadwallet\",   // avoid reading from disk\n+#endif\n+    \"mockscheduler\",         // avoid assertion failure (Assertion `delta_seconds.count() > 0 && delta_seconds < std::chrono::hours{1}' failed.)",
    "path": "src/test/fuzz/rpc.cpp",
    "position": 83,
    "original_position": 83,
    "commit_id": "545404e7e1c72985557ccffe865cea269143e5dd",
    "original_commit_id": "545404e7e1c72985557ccffe865cea269143e5dd",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Seems so! Thanks! Re-enabled in follow-up.",
    "created_at": "2021-04-29T19:05:27Z",
    "updated_at": "2021-04-29T19:05:28Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21169#discussion_r623317211",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21169",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/623317211"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21169#discussion_r623317211"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21169"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/623317211/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 83,
    "original_line": 83,
    "side": "RIGHT",
    "in_reply_to_id": 621920578
  }
]