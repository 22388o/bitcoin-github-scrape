emilengler,2019-08-17 21:42:05,"Concept ACK 5b2bb0f\nSee 385-386 in src/psbt.h and 12-13 in src/psbt.cpp",https://github.com/bitcoin/bitcoin/pull/16641#issuecomment-522272627,522272627,
practicalswift,2019-08-18 06:32:53,@hebasto Is this change complete in the sense that it addresses all instances of redundant copy constructors in our code base? :-),https://github.com/bitcoin/bitcoin/pull/16641#issuecomment-522295455,522295455,
hebasto,2019-08-18 07:46:54,"@practicalswift \n> Is this change complete in the sense that it addresses all instances of redundant copy constructors in our code base? :-)\n\nI don't know ((\nWhat tool could be helpful to check our codebase? It seems GCC 9 compiler do this work, right?",https://github.com/bitcoin/bitcoin/pull/16641#issuecomment-522299622,522299622,
practicalswift,2019-08-18 11:09:26,@hebasto Isn't it `-Wdeprecated-copy` in `gcc` and `-Wdeprecated` in `clang`? :-),https://github.com/bitcoin/bitcoin/pull/16641#issuecomment-522312183,522312183,
hebasto,2019-08-18 15:03:23,"@practicalswift on master:\n```\n$ gcc --version | grep gcc\ngcc (GCC) 9.1.1 20190503 (Red Hat 9.1.1-1)\n\n$ make 2>&1 | grep -e ""-Wdeprecated-copy"" | grep -vE '(^/usr|leveldb)'\npsbt.cpp:335:19: warning: implicitly-declared ‘PartiallySignedTransaction& PartiallySignedTransaction::operator=(const PartiallySignedTransaction&)’ is deprecated [-Wdeprecated-copy]\n```",https://github.com/bitcoin/bitcoin/pull/16641#issuecomment-522329397,522329397,
promag,2019-08-18 23:51:33,"ACK 5b2bb0fd3af34463bb382b473cc8b6dee65c0920. Being complete is nice, disallowing more of these would be great.",https://github.com/bitcoin/bitcoin/pull/16641#issuecomment-522369786,522369786,
fanquake,2019-08-21 08:19:30,"I'm seeing more of these warnings when compiling using Apple Clang with `-Wdeprecated`:\n```bash\n./psbt.h:398:5: warning: definition of implicit copy assignment operator for 'PartiallySignedTransaction' is deprecated because it has a user-declared copy constructor [-Wdeprecated]\n./script/signingprovider.h:21:13: warning: definition of implicit copy assignment operator for 'SigningProvider' is",https://github.com/bitcoin/bitcoin/pull/16641#issuecomment-523350938,523350938,
DrahtBot,2019-08-24 05:47:42,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/16641#issuecomment-524522953,524522953,
hebasto,2019-09-03 19:17:08,"@fanquake \n> I'm seeing more of these warnings when compiling using Apple Clang with `-Wdeprecated`...\n\nWith the latest push:\n```sh\n$ clang --version | grep version\nApple LLVM version 10.0.1 (clang-1001.0.46.4)\n$ ./configure CXXFLAGS=""-Wdeprecated""\n...\n$ make 2>&1 | grep -e ""\[-Wdeprecated\]"" | grep -vE '^/usr|leveldb|univalue'\n```\nthe output has no mentioned warnings.",https://github.com/bitcoin/bitcoin/pull/16641#issuecomment-527600166,527600166,
hebasto,2019-09-03 19:57:38,The PR description has been updated.,https://github.com/bitcoin/bitcoin/pull/16641#issuecomment-527614462,527614462,
hebasto,2019-10-05 09:40:55,@practicalswift Would you mind review this PR?,https://github.com/bitcoin/bitcoin/pull/16641#issuecomment-538634496,538634496,
hebasto,2019-11-04 15:55:32,Rebased on top of #17349.,https://github.com/bitcoin/bitcoin/pull/16641#issuecomment-549418726,549418726,
hebasto,2019-11-04 20:20:05,@practicalswift Would you mind reviewing and testing this PR?,https://github.com/bitcoin/bitcoin/pull/16641#issuecomment-549529601,549529601,
MarcoFalke,2019-11-04 16:14:23,why is this needed?,https://github.com/bitcoin/bitcoin/pull/16641#discussion_r342135608,342135608,src/test/checkqueue_tests.cpp
hebasto,2019-11-04 17:04:39,The default ctor is required at least here: https://github.com/bitcoin/bitcoin/blob/94a26b192f187cb50bf1ac1775b23f2b03f772b1/src/checkqueue.h#L150,https://github.com/bitcoin/bitcoin/pull/16641#discussion_r342162757,342162757,src/test/checkqueue_tests.cpp
practicalswift,2019-11-04 17:21:21,"Unrelated, but is there any reason we're doing the extra move here (`push_back` instead of `emplace_back`)?",https://github.com/bitcoin/bitcoin/pull/16641#discussion_r342170697,342170697,src/test/checkqueue_tests.cpp
MarcoFalke,2019-11-04 17:40:37,"> The default ctor is required at least here: \n\nYeah, but how is the manually defined ctor different from the compiler generated? ",https://github.com/bitcoin/bitcoin/pull/16641#discussion_r342179845,342179845,src/test/checkqueue_tests.cpp
hebasto,2019-11-04 17:50:55,"https://en.cppreference.com/w/cpp/language/default_constructor\n\n> If no user-declared constructors of any kind are provided for a class type (struct, class, or union), the compiler will always declare a default constructor as an inline public member of its class.\n\nBut we have a copy ctor with this PR, so the compiler will not generate a default ctor.",https://github.com/bitcoin/bitcoin/pull/16641#discussion_r342184390,342184390,src/test/checkqueue_tests.cpp
MarcoFalke,2019-11-04 17:59:20,So why do you provide the copy ctor? How is it different from the compiler generated one?,https://github.com/bitcoin/bitcoin/pull/16641#discussion_r342188264,342188264,src/test/checkqueue_tests.cpp
MarcoFalke,2019-11-04 18:00:10,Does providing a dtor make the compiler generated ctors go away?,https://github.com/bitcoin/bitcoin/pull/16641#discussion_r342188654,342188654,src/test/checkqueue_tests.cpp
hebasto,2019-11-04 18:10:16,"> Does providing a dtor make the compiler generated ctors go away?\n\nNo, providing a destructor does not make the compiler generated constructors go away.\nBut the user-defined copy constructor (with this PR) makes the compiler generated default constructor go away.\n\nMy GCC fails to compile this PR without the default constructor.\nIt needs `FrozenCleanupCheck() {}` or `FrozenCleanupCheck",https://github.com/bitcoin/bitcoin/pull/16641#discussion_r342192776,342192776,src/test/checkqueue_tests.cpp
MarcoFalke,2019-11-04 18:12:37,Idk. It passed for me after I removed all ctors,https://github.com/bitcoin/bitcoin/pull/16641#discussion_r342193791,342193791,src/test/checkqueue_tests.cpp
hebasto,2019-11-04 18:22:59,"> ... I removed all ctors\n\nThat is the point ;)\n\nDid Clang 10 fire any warning with passed `-Wdeprecated` ?",https://github.com/bitcoin/bitcoin/pull/16641#discussion_r342198580,342198580,src/test/checkqueue_tests.cpp
MarcoFalke,2019-11-04 18:27:41,"I don't have clang 10, and it seems to be in development. I don't think we fix compiler warnings of compilers that are in alpha stage.",https://github.com/bitcoin/bitcoin/pull/16641#discussion_r342200766,342200766,src/test/checkqueue_tests.cpp
hebasto,2019-11-04 18:43:54,"> I don't have clang 10, and it seems to be in development.\n\nmacOS 10.14 Mojave, XCode 10.0:\n```\n$ clang --version | grep version\nApple LLVM version 10.0.1 (clang-1001.0.46.4)\n```\n\n\n\n",https://github.com/bitcoin/bitcoin/pull/16641#discussion_r342207869,342207869,src/test/checkqueue_tests.cpp
fanquake,2019-11-04 18:46:56,"> Apple LLVM version 10.0.1 (clang-1001.0.46.4)\n\nThis version of Apple Clang is likely based off of ~ upstream Clang 6.0.1.",https://github.com/bitcoin/bitcoin/pull/16641#discussion_r342209234,342209234,src/test/checkqueue_tests.cpp
hebasto,2019-11-04 18:56:35,"> Did Clang 10 fire any warning with passed `-Wdeprecated` ?\n\nSo, I mean a compiler on macOS 10.14+ ;)",https://github.com/bitcoin/bitcoin/pull/16641#discussion_r342213929,342213929,src/test/checkqueue_tests.cpp
MarcoFalke,2019-11-04 19:28:08,"Well, thank god I don't have macOS, which is horribly broken in every thinkable way",https://github.com/bitcoin/bitcoin/pull/16641#discussion_r342228517,342228517,src/test/checkqueue_tests.cpp
