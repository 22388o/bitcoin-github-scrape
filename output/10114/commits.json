[
  {
    "sha": "6426716a9940eea0e4d6e53c55282de5de473784",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NDI2NzE2YTk5NDBlZWEwZTRkNmU1M2M1NTI4MmRlNWRlNDczNzg0",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-03-29T18:16:42Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-03-30T12:39:12Z"
      },
      "message": "Add send_await_disconnect() method to p2p-compactblocks.py\n\np2p-compactblocks was incorrectly using sync_with_ping() when sending in\ninvalid block. The node would disconnect us and never respond to the\nping, so the sync_with_ping would just time out after 30 seconds and\ncontinue with the test.\n\nThis commit adds a send_await_disconnect() method that sends the\nmessage, and then waits for the node to disconnect us. In this commit\nI've added the method to p2p-compactblocks.py, but a future commit could\nmove it to mininode since it could be useful more generally.\n\nThis commit reduces the p2p-compactblock runtime by 30 seconds.",
      "tree": {
        "sha": "5a20532130210807955ce88f71cf6d529f04789c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5a20532130210807955ce88f71cf6d529f04789c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6426716a9940eea0e4d6e53c55282de5de473784",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6426716a9940eea0e4d6e53c55282de5de473784",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6426716a9940eea0e4d6e53c55282de5de473784",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6426716a9940eea0e4d6e53c55282de5de473784/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8ac80412867118172dc4172494304e19969e9489",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ac80412867118172dc4172494304e19969e9489",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8ac80412867118172dc4172494304e19969e9489"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 21,
      "deletions": 2
    },
    "files": [
      {
        "sha": "bf8d113767ece6883fe489608169a715e54350b8",
        "filename": "test/functional/p2p-compactblocks.py",
        "status": "modified",
        "additions": 21,
        "deletions": 2,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6426716a9940eea0e4d6e53c55282de5de473784/test/functional/p2p-compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6426716a9940eea0e4d6e53c55282de5de473784/test/functional/p2p-compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-compactblocks.py?ref=6426716a9940eea0e4d6e53c55282de5de473784",
        "patch": "@@ -32,6 +32,13 @@ def __init__(self):\n         # This is for synchronizing the p2p message traffic,\n         # so we can eg wait until a particular block is announced.\n         self.set_announced_blockhashes = set()\n+        self.connected = False\n+\n+    def on_open(self, conn):\n+        self.connected = True\n+\n+    def on_close(self, conn):\n+        self.connected = False\n \n     def on_sendcmpct(self, conn, message):\n         self.last_sendcmpct.append(message)\n@@ -107,6 +114,18 @@ def received_hash():\n             return (block_hash in self.set_announced_blockhashes)\n         return wait_until(received_hash, timeout=timeout)\n \n+    def send_await_disconnect(self, message, timeout=30):\n+        \"\"\"Sends a message to the node and wait for disconnect.\n+\n+        This is used when we want to send a message into the node that we expect\n+        will get us disconnected, eg an invalid block.\"\"\"\n+        self.send_message(message)\n+        success = wait_until(lambda: not self.connected, timeout=timeout)\n+        if not success:\n+            logger.error(\"send_await_disconnect failed!\")\n+            raise AssertionError(\"send_await_disconnect failed!\")\n+        return success\n+\n class CompactBlocksTest(BitcoinTestFramework):\n     def __init__(self):\n         super().__init__()\n@@ -274,8 +293,8 @@ def test_invalid_cmpctblock_message(self):\n         # This index will be too high\n         prefilled_txn = PrefilledTransaction(1, block.vtx[0])\n         cmpct_block.prefilled_txn = [prefilled_txn]\n-        self.test_node.send_and_ping(msg_cmpctblock(cmpct_block))\n-        assert(int(self.nodes[0].getbestblockhash(), 16) == block.hashPrevBlock)\n+        self.test_node.send_await_disconnect(msg_cmpctblock(cmpct_block))\n+        assert_equal(int(self.nodes[0].getbestblockhash(), 16), block.hashPrevBlock)\n \n     # Compare the generated shortids to what we expect based on BIP 152, given\n     # bitcoind's choice of nonce."
      }
    ]
  },
  {
    "sha": "6a18bb9a3603839160dd77b671d5f59d12bd2666",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YTE4YmI5YTM2MDM4MzkxNjBkZDc3YjY3MWQ1ZjU5ZDEyYmQyNjY2",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-03-29T15:37:00Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-03-30T12:39:12Z"
      },
      "message": "[tests] sync_with_ping should assert that ping hasn't timed out\n\nsync_with_ping currently returns false if the timeout expires, and it is\nthe caller's responsibility to fail the test. However, none of the tests\ncurrently assert on sync_with_ping()'s return code. This commit adds an\nassert to sync_with_ping so the test will fail if the timeout expires.\n\nThis commit also removes all the duplicate implementations of\nsync_with_ping() from the individual tests.",
      "tree": {
        "sha": "922efd5af9afe0ea440d5e1d949eea6253ba29dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/922efd5af9afe0ea440d5e1d949eea6253ba29dd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6a18bb9a3603839160dd77b671d5f59d12bd2666",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a18bb9a3603839160dd77b671d5f59d12bd2666",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6a18bb9a3603839160dd77b671d5f59d12bd2666",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a18bb9a3603839160dd77b671d5f59d12bd2666/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6426716a9940eea0e4d6e53c55282de5de473784",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6426716a9940eea0e4d6e53c55282de5de473784",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6426716a9940eea0e4d6e53c55282de5de473784"
      }
    ],
    "stats": {
      "total": 77,
      "additions": 13,
      "deletions": 64
    },
    "files": [
      {
        "sha": "8e301c4379222d9133df072c857d17b00650c90c",
        "filename": "test/functional/assumevalid.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a18bb9a3603839160dd77b671d5f59d12bd2666/test/functional/assumevalid.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a18bb9a3603839160dd77b671d5f59d12bd2666/test/functional/assumevalid.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/assumevalid.py?ref=6a18bb9a3603839160dd77b671d5f59d12bd2666",
        "patch": "@@ -190,7 +190,8 @@ def run_test(self):\n         # Send all blocks to node1. All blocks will be accepted.\n         for i in range(2202):\n             node1.send_message(msg_block(self.blocks[i]))\n-        node1.sync_with_ping()  # make sure the most recent block is synced\n+        # Syncing 2200 blocks can take a while on slow systems. Give it plenty of time to sync.\n+        node1.sync_with_ping(120)\n         assert_equal(self.nodes[1].getblock(self.nodes[1].getbestblockhash())['height'], 2202)\n \n         # Send blocks to node2. Block 102 will be rejected."
      },
      {
        "sha": "9b42bf276ceb048af6a8d845e42bb41087c93484",
        "filename": "test/functional/maxuploadtarget.py",
        "status": "modified",
        "additions": 0,
        "deletions": 9,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a18bb9a3603839160dd77b671d5f59d12bd2666/test/functional/maxuploadtarget.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a18bb9a3603839160dd77b671d5f59d12bd2666/test/functional/maxuploadtarget.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/maxuploadtarget.py?ref=6a18bb9a3603839160dd77b671d5f59d12bd2666",
        "patch": "@@ -68,15 +68,6 @@ def on_pong(self, conn, message):\n     def on_close(self, conn):\n         self.peer_disconnected = True\n \n-    # Sync up with the node after delivery of a block\n-    def sync_with_ping(self, timeout=30):\n-        def received_pong():\n-            return (self.last_pong.nonce == self.ping_counter)\n-        self.connection.send_message(msg_ping(nonce=self.ping_counter))\n-        success = wait_until(received_pong, timeout=timeout)\n-        self.ping_counter += 1\n-        return success\n-\n class MaxUploadTest(BitcoinTestFramework):\n  \n     def __init__(self):"
      },
      {
        "sha": "c09945baa657dfba651eb3321e1a811dde17b94e",
        "filename": "test/functional/p2p-acceptblock.py",
        "status": "modified",
        "additions": 0,
        "deletions": 15,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a18bb9a3603839160dd77b671d5f59d12bd2666/test/functional/p2p-acceptblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a18bb9a3603839160dd77b671d5f59d12bd2666/test/functional/p2p-acceptblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-acceptblock.py?ref=6a18bb9a3603839160dd77b671d5f59d12bd2666",
        "patch": "@@ -88,21 +88,6 @@ def send_message(self, message):\n     def on_pong(self, conn, message):\n         self.last_pong = message\n \n-    # Sync up with the node after delivery of a block\n-    def sync_with_ping(self, timeout=30):\n-        self.connection.send_message(msg_ping(nonce=self.ping_counter))\n-        received_pong = False\n-        sleep_time = 0.05\n-        while not received_pong and timeout > 0:\n-            time.sleep(sleep_time)\n-            timeout -= sleep_time\n-            with mininode_lock:\n-                if self.last_pong.nonce == self.ping_counter:\n-                    received_pong = True\n-        self.ping_counter += 1\n-        return received_pong\n-\n-\n class AcceptBlockTest(BitcoinTestFramework):\n     def add_options(self, parser):\n         parser.add_option(\"--testbinary\", dest=\"testbinary\","
      },
      {
        "sha": "5064ce74aab0c74ada8c661241a2bab63f4fd001",
        "filename": "test/functional/p2p-mempool.py",
        "status": "modified",
        "additions": 0,
        "deletions": 9,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a18bb9a3603839160dd77b671d5f59d12bd2666/test/functional/p2p-mempool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a18bb9a3603839160dd77b671d5f59d12bd2666/test/functional/p2p-mempool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-mempool.py?ref=6a18bb9a3603839160dd77b671d5f59d12bd2666",
        "patch": "@@ -62,15 +62,6 @@ def on_pong(self, conn, message):\n     def on_close(self, conn):\n         self.peer_disconnected = True\n \n-    # Sync up with the node after delivery of a block\n-    def sync_with_ping(self, timeout=30):\n-        def received_pong():\n-            return (self.last_pong.nonce == self.ping_counter)\n-        self.connection.send_message(msg_ping(nonce=self.ping_counter))\n-        success = wait_until(received_pong, timeout=timeout)\n-        self.ping_counter += 1\n-        return success\n-\n     def send_mempool(self):\n         self.lastInv = []\n         self.send_message(msg_mempool())"
      },
      {
        "sha": "cd7b788eb42c6ae476edd943409f6d11e1eb8e6c",
        "filename": "test/functional/p2p-segwit.py",
        "status": "modified",
        "additions": 7,
        "deletions": 14,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a18bb9a3603839160dd77b671d5f59d12bd2666/test/functional/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a18bb9a3603839160dd77b671d5f59d12bd2666/test/functional/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-segwit.py?ref=6a18bb9a3603839160dd77b671d5f59d12bd2666",
        "patch": "@@ -80,13 +80,6 @@ def sync(self, test_function, timeout=60):\n             timeout -= self.sleep_time\n         raise AssertionError(\"Sync failed to complete\")\n         \n-    def sync_with_ping(self, timeout=60):\n-        self.send_message(msg_ping(nonce=self.ping_counter))\n-        test_function = lambda: self.last_pong.nonce == self.ping_counter\n-        self.sync(test_function, timeout)\n-        self.ping_counter += 1\n-        return\n-\n     def wait_for_block(self, blockhash, timeout=60):\n         test_function = lambda: self.last_block != None and self.last_block.sha256 == blockhash\n         self.sync(test_function, timeout)\n@@ -148,7 +141,7 @@ def test_transaction_acceptance(self, tx, with_witness, accepted, reason=None):\n         if with_witness:\n             tx_message = msg_witness_tx(tx)\n         self.send_message(tx_message)\n-        self.sync_with_ping()\n+        self.sync_with_ping(60)\n         assert_equal(tx.hash in self.connection.rpc.getrawmempool(), accepted)\n         if (reason != None and not accepted):\n             # Check the rejection reason as well.\n@@ -161,7 +154,7 @@ def test_witness_block(self, block, accepted, with_witness=True):\n             self.send_message(msg_witness_block(block))\n         else:\n             self.send_message(msg_block(block))\n-        self.sync_with_ping()\n+        self.sync_with_ping(60)\n         assert_equal(self.connection.rpc.getbestblockhash() == block.hash, accepted)\n \n \n@@ -235,7 +228,7 @@ def test_non_witness_transaction(self):\n         block = self.build_next_block(nVersion=1)\n         block.solve()\n         self.test_node.send_message(msg_block(block))\n-        self.test_node.sync_with_ping() # make sure the block was processed\n+        self.test_node.sync_with_ping(60) # make sure the block was processed\n         txid = block.vtx[0].sha256\n \n         self.nodes[0].generate(99) # let the block mature\n@@ -251,7 +244,7 @@ def test_non_witness_transaction(self):\n         assert_equal(msg_tx(tx).serialize(), msg_witness_tx(tx).serialize())\n \n         self.test_node.send_message(msg_witness_tx(tx))\n-        self.test_node.sync_with_ping() # make sure the tx was processed\n+        self.test_node.sync_with_ping(60) # make sure the tx was processed\n         assert(tx.hash in self.nodes[0].getrawmempool())\n         # Save this transaction for later\n         self.utxo.append(UTXO(tx.sha256, 0, 49*100000000))\n@@ -291,7 +284,7 @@ def test_unnecessary_witness_before_segwit_activation(self):\n         # But it should not be permanently marked bad...\n         # Resend without witness information.\n         self.test_node.send_message(msg_block(block))\n-        self.test_node.sync_with_ping()\n+        self.test_node.sync_with_ping(60)\n         assert_equal(self.nodes[0].getbestblockhash(), block.hash)\n \n         sync_blocks(self.nodes)\n@@ -1257,7 +1250,7 @@ def test_segwit_versions(self):\n         # Spending a higher version witness output is not allowed by policy,\n         # even with fRequireStandard=false.\n         self.test_node.test_transaction_acceptance(tx3, with_witness=True, accepted=False)\n-        self.test_node.sync_with_ping()\n+        self.test_node.sync_with_ping(60)\n         with mininode_lock:\n             assert(b\"reserved for soft-fork upgrades\" in self.test_node.last_reject.reason)\n \n@@ -1387,7 +1380,7 @@ def test_signature_version_1(self):\n         for i in range(NUM_TESTS):\n             # Ping regularly to keep the connection alive\n             if (not i % 100):\n-                self.test_node.sync_with_ping()\n+                self.test_node.sync_with_ping(60)\n             # Choose random number of inputs to use.\n             num_inputs = random.randint(1, 10)\n             # Create a slight bias for producing more utxos"
      },
      {
        "sha": "da960e2d804c216a4856cee22b108831a1797d9f",
        "filename": "test/functional/p2p-versionbits-warning.py",
        "status": "modified",
        "additions": 0,
        "deletions": 15,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a18bb9a3603839160dd77b671d5f59d12bd2666/test/functional/p2p-versionbits-warning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a18bb9a3603839160dd77b671d5f59d12bd2666/test/functional/p2p-versionbits-warning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-versionbits-warning.py?ref=6a18bb9a3603839160dd77b671d5f59d12bd2666",
        "patch": "@@ -46,21 +46,6 @@ def send_message(self, message):\n     def on_pong(self, conn, message):\n         self.last_pong = message\n \n-    # Sync up with the node after delivery of a block\n-    def sync_with_ping(self, timeout=30):\n-        self.connection.send_message(msg_ping(nonce=self.ping_counter))\n-        received_pong = False\n-        sleep_time = 0.05\n-        while not received_pong and timeout > 0:\n-            time.sleep(sleep_time)\n-            timeout -= sleep_time\n-            with mininode_lock:\n-                if self.last_pong.nonce == self.ping_counter:\n-                    received_pong = True\n-        self.ping_counter += 1\n-        return received_pong\n-\n-\n class VersionBitsWarningTest(BitcoinTestFramework):\n     def __init__(self):\n         super().__init__()"
      },
      {
        "sha": "ebb846a2379a47216eab5d3735e98dcff40a2696",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a18bb9a3603839160dd77b671d5f59d12bd2666/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a18bb9a3603839160dd77b671d5f59d12bd2666/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=6a18bb9a3603839160dd77b671d5f59d12bd2666",
        "patch": "@@ -1563,11 +1563,14 @@ def send_and_ping(self, message):\n         self.sync_with_ping()\n \n     # Sync up with the node\n-    def sync_with_ping(self, timeout=30):\n+    def sync_with_ping(self, timeout=60):\n         def received_pong():\n             return (self.last_pong.nonce == self.ping_counter)\n         self.send_message(msg_ping(nonce=self.ping_counter))\n         success = wait_until(received_pong, timeout=timeout)\n+        if not success:\n+            logger.error(\"sync_with_ping failed!\")\n+            raise AssertionError(\"sync_with_ping failed!\")\n         self.ping_counter += 1\n \n         return success"
      }
    ]
  }
]