[
  {
    "sha": "7a2670692e7cf455899fdb3dafdff734ce2a794b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YTI2NzA2OTJlN2NmNDU1ODk5ZmRiM2RhZmRmZjczNGNlMmE3OTRi",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2012-05-30T00:27:32Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2012-07-03T13:07:49Z"
      },
      "message": "Show more significant bytes of block hashes.",
      "tree": {
        "sha": "2a288d5bcb4f44e6c975347a149037b14d5ca4d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2a288d5bcb4f44e6c975347a149037b14d5ca4d0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7a2670692e7cf455899fdb3dafdff734ce2a794b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a2670692e7cf455899fdb3dafdff734ce2a794b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7a2670692e7cf455899fdb3dafdff734ce2a794b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a2670692e7cf455899fdb3dafdff734ce2a794b/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e75acc006e8bc5c44d1d6e6c3b027fe28d8c743b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e75acc006e8bc5c44d1d6e6c3b027fe28d8c743b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e75acc006e8bc5c44d1d6e6c3b027fe28d8c743b"
      }
    ],
    "stats": {
      "total": 68,
      "additions": 38,
      "deletions": 30
    },
    "files": [
      {
        "sha": "b596481a95284fa31f10264781adab44a4c566a9",
        "filename": "src/db.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a2670692e7cf455899fdb3dafdff734ce2a794b/src/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a2670692e7cf455899fdb3dafdff734ce2a794b/src/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.cpp?ref=7a2670692e7cf455899fdb3dafdff734ce2a794b",
        "patch": "@@ -510,7 +510,7 @@ bool CTxDB::LoadBlockIndex()\n     pindexBest = mapBlockIndex[hashBestChain];\n     nBestHeight = pindexBest->nHeight;\n     bnBestChainWork = pindexBest->bnChainWork;\n-    printf(\"LoadBlockIndex(): hashBestChain=%s  height=%d\\n\", hashBestChain.ToString().substr(0,20).c_str(), nBestHeight);\n+    printf(\"LoadBlockIndex(): hashBestChain=%s  height=%d\\n\", hashBestChain.ToString().substr(BLOCKSUBSTR).c_str(), nBestHeight);\n \n     // Load bnBestInvalidWork, OK if it doesn't exist\n     ReadBestInvalidWork(bnBestInvalidWork);"
      },
      {
        "sha": "708e9191d488276de3b0c740e97f3ae1c0b3af02",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 17,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a2670692e7cf455899fdb3dafdff734ce2a794b/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a2670692e7cf455899fdb3dafdff734ce2a794b/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=7a2670692e7cf455899fdb3dafdff734ce2a794b",
        "patch": "@@ -970,8 +970,8 @@ void static InvalidChainFound(CBlockIndex* pindexNew)\n         CTxDB().WriteBestInvalidWork(bnBestInvalidWork);\n         uiInterface.NotifyBlocksChanged();\n     }\n-    printf(\"InvalidChainFound: invalid block=%s  height=%d  work=%s\\n\", pindexNew->GetBlockHash().ToString().substr(0,20).c_str(), pindexNew->nHeight, pindexNew->bnChainWork.ToString().c_str());\n-    printf(\"InvalidChainFound:  current best=%s  height=%d  work=%s\\n\", hashBestChain.ToString().substr(0,20).c_str(), nBestHeight, bnBestChainWork.ToString().c_str());\n+    printf(\"InvalidChainFound: invalid block=%s  height=%d  work=%s\\n\", pindexNew->GetBlockHash().ToString().substr(BLOCKSUBSTR).c_str(), pindexNew->nHeight, pindexNew->bnChainWork.ToString().c_str());\n+    printf(\"InvalidChainFound:  current best=%s  height=%d  work=%s\\n\", hashBestChain.ToString().substr(BLOCKSUBSTR).c_str(), nBestHeight, bnBestChainWork.ToString().c_str());\n     if (pindexBest && bnBestInvalidWork > bnBestChainWork + pindexBest->GetBlockWork() * 6)\n         printf(\"InvalidChainFound: WARNING: Displayed transactions may not be correct!  You may need to upgrade, or other nodes may need to upgrade.\\n\");\n }\n@@ -1440,8 +1440,8 @@ bool static Reorganize(CTxDB& txdb, CBlockIndex* pindexNew)\n         vConnect.push_back(pindex);\n     reverse(vConnect.begin(), vConnect.end());\n \n-    printf(\"REORGANIZE: Disconnect %i blocks; %s..%s\\n\", vDisconnect.size(), pfork->GetBlockHash().ToString().substr(0,20).c_str(), pindexBest->GetBlockHash().ToString().substr(0,20).c_str());\n-    printf(\"REORGANIZE: Connect %i blocks; %s..%s\\n\", vConnect.size(), pfork->GetBlockHash().ToString().substr(0,20).c_str(), pindexNew->GetBlockHash().ToString().substr(0,20).c_str());\n+    printf(\"REORGANIZE: Disconnect %i blocks; %s..%s\\n\", vDisconnect.size(), pfork->GetBlockHash().ToString().substr(BLOCKSUBSTR).c_str(), pindexBest->GetBlockHash().ToString().substr(BLOCKSUBSTR).c_str());\n+    printf(\"REORGANIZE: Connect %i blocks; %s..%s\\n\", vConnect.size(), pfork->GetBlockHash().ToString().substr(BLOCKSUBSTR).c_str(), pindexNew->GetBlockHash().ToString().substr(BLOCKSUBSTR).c_str());\n \n     // Disconnect shorter branch\n     vector<CTransaction> vResurrect;\n@@ -1451,7 +1451,7 @@ bool static Reorganize(CTxDB& txdb, CBlockIndex* pindexNew)\n         if (!block.ReadFromDisk(pindex))\n             return error(\"Reorganize() : ReadFromDisk for disconnect failed\");\n         if (!block.DisconnectBlock(txdb, pindex))\n-            return error(\"Reorganize() : DisconnectBlock %s failed\", pindex->GetBlockHash().ToString().substr(0,20).c_str());\n+            return error(\"Reorganize() : DisconnectBlock %s failed\", pindex->GetBlockHash().ToString().substr(BLOCKSUBSTR).c_str());\n \n         // Queue memory transactions to resurrect\n         BOOST_FOREACH(const CTransaction& tx, block.vtx)\n@@ -1470,7 +1470,7 @@ bool static Reorganize(CTxDB& txdb, CBlockIndex* pindexNew)\n         if (!block.ConnectBlock(txdb, pindex))\n         {\n             // Invalid block\n-            return error(\"Reorganize() : ConnectBlock %s failed\", pindex->GetBlockHash().ToString().substr(0,20).c_str());\n+            return error(\"Reorganize() : ConnectBlock %s failed\", pindex->GetBlockHash().ToString().substr(BLOCKSUBSTR).c_str());\n         }\n \n         // Queue memory transactions to delete\n@@ -1613,7 +1613,7 @@ bool CBlock::SetBestChain(CTxDB& txdb, CBlockIndex* pindexNew)\n     bnBestChainWork = pindexNew->bnChainWork;\n     nTimeBestReceived = GetTime();\n     nTransactionsUpdated++;\n-    printf(\"SetBestChain: new best=%s  height=%d  work=%s\\n\", hashBestChain.ToString().substr(0,20).c_str(), nBestHeight, bnBestChainWork.ToString().c_str());\n+    printf(\"SetBestChain: new best=%s  height=%d  work=%s\\n\", hashBestChain.ToString().substr(BLOCKSUBSTR).c_str(), nBestHeight, bnBestChainWork.ToString().c_str());\n \n     std::string strCmd = GetArg(\"-blocknotify\", \"\");\n \n@@ -1632,7 +1632,7 @@ bool CBlock::AddToBlockIndex(unsigned int nFile, unsigned int nBlockPos)\n     // Check for duplicate\n     uint256 hash = GetHash();\n     if (mapBlockIndex.count(hash))\n-        return error(\"AddToBlockIndex() : %s already exists\", hash.ToString().substr(0,20).c_str());\n+        return error(\"AddToBlockIndex() : %s already exists\", hash.ToString().substr(BLOCKSUBSTR).c_str());\n \n     // Construct new block index object\n     CBlockIndex* pindexNew = new CBlockIndex(nFile, nBlockPos, *this);\n@@ -1790,9 +1790,9 @@ bool ProcessBlock(CNode* pfrom, CBlock* pblock)\n     // Check for duplicate\n     uint256 hash = pblock->GetHash();\n     if (mapBlockIndex.count(hash))\n-        return error(\"ProcessBlock() : already have block %d %s\", mapBlockIndex[hash]->nHeight, hash.ToString().substr(0,20).c_str());\n+        return error(\"ProcessBlock() : already have block %d %s\", mapBlockIndex[hash]->nHeight, hash.ToString().substr(BLOCKSUBSTR).c_str());\n     if (mapOrphanBlocks.count(hash))\n-        return error(\"ProcessBlock() : already have block (orphan) %s\", hash.ToString().substr(0,20).c_str());\n+        return error(\"ProcessBlock() : already have block (orphan) %s\", hash.ToString().substr(BLOCKSUBSTR).c_str());\n \n     // Preliminary checks\n     if (!pblock->CheckBlock())\n@@ -1825,7 +1825,7 @@ bool ProcessBlock(CNode* pfrom, CBlock* pblock)\n     // If don't already have its previous block, shunt it off to holding area until we get it\n     if (!mapBlockIndex.count(pblock->hashPrevBlock))\n     {\n-        printf(\"ProcessBlock: ORPHAN BLOCK, prev=%s\\n\", pblock->hashPrevBlock.ToString().substr(0,20).c_str());\n+        printf(\"ProcessBlock: ORPHAN BLOCK, prev=%s\\n\", pblock->hashPrevBlock.ToString().substr(BLOCKSUBSTR).c_str());\n         CBlock* pblock2 = new CBlock(*pblock);\n         mapOrphanBlocks.insert(make_pair(hash, pblock2));\n         mapOrphanBlocksByPrev.insert(make_pair(pblock2->hashPrevBlock, pblock2));\n@@ -2057,7 +2057,7 @@ void PrintBlockTree()\n             pindex->nHeight,\n             pindex->nFile,\n             pindex->nBlockPos,\n-            block.GetHash().ToString().substr(0,20).c_str(),\n+            block.GetHash().ToString().substr(BLOCKSUBSTR).c_str(),\n             DateTimeStrFormat(\"%x %H:%M:%S\", block.GetBlockTime()).c_str(),\n             block.vtx.size());\n \n@@ -2637,20 +2637,20 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         if (pindex)\n             pindex = pindex->pnext;\n         int nLimit = 500;\n-        printf(\"getblocks %d to %s limit %d\\n\", (pindex ? pindex->nHeight : -1), hashStop.ToString().substr(0,20).c_str(), nLimit);\n+        printf(\"getblocks %d to %s limit %d\\n\", (pindex ? pindex->nHeight : -1), hashStop.ToString().substr(BLOCKSUBSTR).c_str(), nLimit);\n         for (; pindex; pindex = pindex->pnext)\n         {\n             if (pindex->GetBlockHash() == hashStop)\n             {\n-                printf(\"  getblocks stopping at %d %s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString().substr(0,20).c_str());\n+                printf(\"  getblocks stopping at %d %s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString().substr(BLOCKSUBSTR).c_str());\n                 break;\n             }\n             pfrom->PushInventory(CInv(MSG_BLOCK, pindex->GetBlockHash()));\n             if (--nLimit <= 0)\n             {\n                 // When this block is requested, we'll send an inv that'll make them\n                 // getblocks the next batch of inventory.\n-                printf(\"  getblocks stopping at limit %d %s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString().substr(0,20).c_str());\n+                printf(\"  getblocks stopping at limit %d %s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString().substr(BLOCKSUBSTR).c_str());\n                 pfrom->hashContinue = pindex->GetBlockHash();\n                 break;\n             }\n@@ -2683,7 +2683,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n \n         vector<CBlock> vHeaders;\n         int nLimit = 2000;\n-        printf(\"getheaders %d to %s\\n\", (pindex ? pindex->nHeight : -1), hashStop.ToString().substr(0,20).c_str());\n+        printf(\"getheaders %d to %s\\n\", (pindex ? pindex->nHeight : -1), hashStop.ToString().substr(BLOCKSUBSTR).c_str());\n         for (; pindex; pindex = pindex->pnext)\n         {\n             vHeaders.push_back(pindex->GetBlockHeader());\n@@ -2768,7 +2768,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         CBlock block;\n         vRecv >> block;\n \n-        printf(\"received block %s\\n\", block.GetHash().ToString().substr(0,20).c_str());\n+        printf(\"received block %s\\n\", block.GetHash().ToString().substr(BLOCKSUBSTR).c_str());\n         // block.print();\n \n         CInv inv(MSG_BLOCK, block.GetHash());"
      },
      {
        "sha": "4f4de2d35e7d9094872932325932dccedb0a4c56",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a2670692e7cf455899fdb3dafdff734ce2a794b/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a2670692e7cf455899fdb3dafdff734ce2a794b/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=7a2670692e7cf455899fdb3dafdff734ce2a794b",
        "patch": "@@ -5,6 +5,8 @@\n #ifndef BITCOIN_MAIN_H\n #define BITCOIN_MAIN_H\n \n+#define BLOCKSUBSTR 48\n+\n #include \"bignum.h\"\n #include \"sync.h\"\n #include \"net.h\"\n@@ -995,9 +997,9 @@ class CBlock\n     void print() const\n     {\n         printf(\"CBlock(hash=%s, ver=%d, hashPrevBlock=%s, hashMerkleRoot=%s, nTime=%u, nBits=%08x, nNonce=%u, vtx=%d)\\n\",\n-            GetHash().ToString().substr(0,20).c_str(),\n+            GetHash().ToString().substr(BLOCKSUBSTR).c_str(),\n             nVersion,\n-            hashPrevBlock.ToString().substr(0,20).c_str(),\n+            hashPrevBlock.ToString().substr(BLOCKSUBSTR).c_str(),\n             hashMerkleRoot.ToString().substr(0,10).c_str(),\n             nTime, nBits, nNonce,\n             vtx.size());\n@@ -1167,7 +1169,7 @@ class CBlockIndex\n         return strprintf(\"CBlockIndex(nprev=%08x, pnext=%08x, nFile=%d, nBlockPos=%-6d nHeight=%d, merkle=%s, hashBlock=%s)\",\n             pprev, pnext, nFile, nBlockPos, nHeight,\n             hashMerkleRoot.ToString().substr(0,10).c_str(),\n-            GetBlockHash().ToString().substr(0,20).c_str());\n+            GetBlockHash().ToString().substr(BLOCKSUBSTR).c_str());\n     }\n \n     void print() const\n@@ -1235,8 +1237,8 @@ class CDiskBlockIndex : public CBlockIndex\n         str += CBlockIndex::ToString();\n         str += strprintf(\"\\n                hashBlock=%s, hashPrev=%s, hashNext=%s)\",\n             GetBlockHash().ToString().c_str(),\n-            hashPrev.ToString().substr(0,20).c_str(),\n-            hashNext.ToString().substr(0,20).c_str());\n+            hashPrev.ToString().substr(BLOCKSUBSTR).c_str(),\n+            hashNext.ToString().substr(BLOCKSUBSTR).c_str());\n         return str;\n     }\n "
      },
      {
        "sha": "327d582dfef38de73ab337a2f51485fcce332dee",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a2670692e7cf455899fdb3dafdff734ce2a794b/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a2670692e7cf455899fdb3dafdff734ce2a794b/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=7a2670692e7cf455899fdb3dafdff734ce2a794b",
        "patch": "@@ -68,12 +68,6 @@ void SetReachable(enum Network net, bool fFlag = true);\n CAddress GetLocalAddress(const CNetAddr *paddrPeer = NULL);\n \n \n-enum\n-{\n-    MSG_TX = 1,\n-    MSG_BLOCK,\n-};\n-\n class CRequestTracker\n {\n public:"
      },
      {
        "sha": "113b4ce6746267c1d97986188c27b6ca5a1e4c61",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a2670692e7cf455899fdb3dafdff734ce2a794b/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a2670692e7cf455899fdb3dafdff734ce2a794b/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=7a2670692e7cf455899fdb3dafdff734ce2a794b",
        "patch": "@@ -6,6 +6,7 @@\n #include \"protocol.h\"\n #include \"util.h\"\n #include \"netbase.h\"\n+#include \"main.h\"\n \n #ifndef WIN32\n # include <arpa/inet.h>\n@@ -140,6 +141,11 @@ const char* CInv::GetCommand() const\n \n std::string CInv::ToString() const\n {\n+    if (type == MSG_BLOCK)\n+        return strprintf(\"%s %s\", GetCommand(), hash.ToString().substr(BLOCKSUBSTR).c_str());\n+    if (type == MSG_TX)\n+        return strprintf(\"%s %s\", GetCommand(), hash.ToString().substr(0,10).c_str());\n+\n     return strprintf(\"%s %s\", GetCommand(), hash.ToString().substr(0,20).c_str());\n }\n "
      },
      {
        "sha": "dab4e694421f6fb1c258591ba90a1f665b6b35b2",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a2670692e7cf455899fdb3dafdff734ce2a794b/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a2670692e7cf455899fdb3dafdff734ce2a794b/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=7a2670692e7cf455899fdb3dafdff734ce2a794b",
        "patch": "@@ -126,4 +126,10 @@ class CInv\n         uint256 hash;\n };\n \n+enum\n+{\n+    MSG_TX = 1,\n+    MSG_BLOCK,\n+};\n+\n #endif // __INCLUDED_PROTOCOL_H__"
      },
      {
        "sha": "decdc26d867b9be6969f64f93ab299c5178fbff4",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a2670692e7cf455899fdb3dafdff734ce2a794b/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a2670692e7cf455899fdb3dafdff734ce2a794b/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=7a2670692e7cf455899fdb3dafdff734ce2a794b",
        "patch": "@@ -188,7 +188,7 @@ int CWalletDB::LoadWallet(CWallet* pwallet)\n                 //printf(\" %12\"PRI64d\"  %s  %s  %s\\n\",\n                 //    wtx.vout[0].nValue,\n                 //    DateTimeStrFormat(\"%x %H:%M:%S\", wtx.GetBlockTime()).c_str(),\n-                //    wtx.hashBlock.ToString().substr(0,20).c_str(),\n+                //    wtx.hashBlock.ToString().substr(BLOCKSUBSTR).c_str(),\n                 //    wtx.mapValue[\"message\"].c_str());\n             }\n             else if (strType == \"acentry\")"
      }
    ]
  }
]