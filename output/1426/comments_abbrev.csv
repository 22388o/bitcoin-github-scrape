TheBlueMatt,2012-06-05T23:03:29Z,"I'd like to keep one leading 0 on diff-1 blocks, instead of removing all the 0s, which would leave only 6 0s on current-diff blocks, which IMHO is acceptable, but ACK on the idea.\n",https://github.com/bitcoin/bitcoin/pull/1426#issuecomment-6139208,6139208,
gavinandresen,2012-06-06T00:09:20Z,I like the at-least-one leading 0 on min-difficulty blocks idea; I've spent a lot of time staring at min difficulty testnet block hashes.\n,https://github.com/bitcoin/bitcoin/pull/1426#issuecomment-6140186,6140186,
gavinandresen,2012-06-06T00:11:04Z,"One downside of this change:  it might break blockexplorer.com's block lookup (please test, I know it works with the existing lots-of-leading-zeroes format).\n",https://github.com/bitcoin/bitcoin/pull/1426#issuecomment-6140210,6140210,
rebroad,2012-06-06T08:51:27Z,I see what you mean re testnet. Perhaps I should code it so that it's one leading zero whatever the situation...?\n,https://github.com/bitcoin/bitcoin/pull/1426#issuecomment-6145819,6145819,
sipa,2012-06-08T14:12:41Z,"Solution: use the low bits of block hashes to identify them, instead of high bits which contain several zeroes?\n",https://github.com/bitcoin/bitcoin/pull/1426#issuecomment-6203715,6203715,
luke-jr,2012-06-08T22:13:58Z,I definitely prefer showing the low bits over high ones.\n,https://github.com/bitcoin/bitcoin/pull/1426#issuecomment-6214268,6214268,
TheBlueMatt,2012-06-09T13:39:10Z,"Agreed, as long as someone pings theymos et al to get bbe/blockchain.info updated to support low bit-searching implemented before release.\n",https://github.com/bitcoin/bitcoin/pull/1426#issuecomment-6219802,6219802,
luke-jr,2012-06-09T16:22:41Z,BBE doesn't care which bits you use. Blockchain.info doesn't accept partial matches/searches at all.\n,https://github.com/bitcoin/bitcoin/pull/1426#issuecomment-6221169,6221169,
TheBlueMatt,2012-06-09T17:55:48Z,"Ah, well then I guess we should just switch to low bits.\n",https://github.com/bitcoin/bitcoin/pull/1426#issuecomment-6222128,6222128,
sipa,2012-06-14T15:54:39Z,Using the 14 lowest hex characters of a block as identifier should suffice for 100 years (0.2% chance for a collision after 5.46 million blocks). So I'd say use the 16 lowest ones.\n,https://github.com/bitcoin/bitcoin/pull/1426#issuecomment-6332615,6332615,
gmaxwell,2012-06-14T16:51:35Z,"I'd somewhat prefer to show the full values, because thats what the getblock rpc needs. If we're concerned about space we should create rotation that doesn't stink.\n",https://github.com/bitcoin/bitcoin/pull/1426#issuecomment-6334207,6334207,
rebroad,2012-06-14T23:24:08Z,"@sipa it's just a debug.log. I doubt anyone will have a debug.log file as long as 100 years, so 14 characters would be an extreme overkill.\n\n@gmaxwell it doesn't currently show full values and never has. The current requirement seems to be that the numbers don't want to be duplicated within the entirity of the debug.log file. For that, the last 14 hex characters are more than sufficient (as sipa",https://github.com/bitcoin/bitcoin/pull/1426#issuecomment-6346104,6346104,
luke-jr,2012-06-18T22:24:12Z,@rebroad Are you going to update this to show the least-significant (end/tail) N?\n,https://github.com/bitcoin/bitcoin/pull/1426#issuecomment-6411056,6411056,
rebroad,2012-06-21T18:34:35Z,"Yes, very likely, when i next get access to a computer (next week sometime).\n",https://github.com/bitcoin/bitcoin/pull/1426#issuecomment-6490750,6490750,
rebroad,2012-07-02T21:05:41Z,@luke-jr can I ask your opinion - is it better to hardcode the substr numbers or instead do it in a way that uses the length of the string?\n,https://github.com/bitcoin/bitcoin/pull/1426#issuecomment-6719744,6719744,
luke-jr,2012-07-02T21:13:45Z,I'd just go with substr(504)\n,https://github.com/bitcoin/bitcoin/pull/1426#issuecomment-6719926,6719926,
rebroad,2012-07-02T23:37:33Z,@luke-jr modified (not yet tested - compiling)\n,https://github.com/bitcoin/bitcoin/pull/1426#issuecomment-6722622,6722622,
sipa,2012-07-03T00:14:36Z,wth? 504? hex hashes are only 64 characters long.\n,https://github.com/bitcoin/bitcoin/pull/1426#issuecomment-6723154,6723154,
sipa,2012-07-03T00:16:37Z,"@rebroad I prefer the reported hashes in the debug file to be globally and near-forever usable as unique identifiers. I'd just use the low 64 bits of the hash (i.e., the last 16 hex characters). .substr(48) i suppose.\n",https://github.com/bitcoin/bitcoin/pull/1426#issuecomment-6723181,6723181,
luke-jr,2012-07-03T00:22:54Z,"... yeah, not sure how I got 504 (except I know I forgot to divide by 8)... long day :(\n\nI meant .substr(56), but I don't mind 48\n",https://github.com/bitcoin/bitcoin/pull/1426#issuecomment-6723281,6723281,
gmaxwell,2012-07-03T01:03:18Z,"@rebroad I know it doesn't currently show full values.\n\n@sipa  I still think it should show the full value.  The partial values are almost useless because there is no way to getblock by them. I don't think carrying another index for partial block values names sense, nor do I think precluding hash tables that require exact lookups makes sense.  Reducing them by 1/4th while breaking lookup with ge",https://github.com/bitcoin/bitcoin/pull/1426#issuecomment-6723796,6723796,
rebroad,2012-07-03T13:09:11Z,updated. now substr(48) (effectively). Next.. shall we shorten the work= field....?!\n,https://github.com/bitcoin/bitcoin/pull/1426#issuecomment-6733760,6733760,
sipa,2012-07-03T13:19:15Z,How about using the unit GHy? (gigahash year). We're currently at around 11874.5 GHy.\n,https://github.com/bitcoin/bitcoin/pull/1426#issuecomment-6733977,6733977,
rebroad,2012-07-03T22:02:07Z,@sipa how do you turn the current value into GHy?\n,https://github.com/bitcoin/bitcoin/pull/1426#issuecomment-6747803,6747803,
sipa,2012-07-04T00:21:36Z,Divide the bnWork number by 31556926000000000 (1 billion times the number of seconds in a year).\n,https://github.com/bitcoin/bitcoin/pull/1426#issuecomment-6750076,6750076,
rebroad,2012-07-04T18:30:08Z,"@sipa Shall I add that change to this pull, or a separate pull (which would need to go in after this one?)\n",https://github.com/bitcoin/bitcoin/pull/1426#issuecomment-6765569,6765569,
midnightmagic,2012-07-26T19:21:30Z,"Currently there is no way for a user to go from the entries in the debug.log, using bitcoind calls only, to useful information. Is there no intention of correcting the api calls so they accept whatever it is we're dumping into debug.log? This way we can do investigation without writing our own extensive tools or being forced to visit a website? How is it that you guys debug problematic blocks? Do ",https://github.com/bitcoin/bitcoin/pull/1426#issuecomment-7287607,7287607,
jgarzik,2012-08-01T16:54:13Z,"Weak ACK, mostly don't care.\n\nBLOCKSUBSTR should be in a separate, zero-behavior-change commit.\n",https://github.com/bitcoin/bitcoin/pull/1426#issuecomment-7432867,7432867,
Diapolo,2012-08-01T17:54:48Z,BLOCKSUBSTR could take a little comment IMHO.\n,https://github.com/bitcoin/bitcoin/pull/1426#issuecomment-7434641,7434641,
luke-jr,2012-08-01T17:57:25Z,"While we're fence-painting, it seems to me hash.ToString().substr(BLOCKSUBSTR).c_str() could be reduced to hash.BlockSubstr().c_str()\n",https://github.com/bitcoin/bitcoin/pull/1426#issuecomment-7434729,7434729,
BitcoinPullTester,2012-08-10T01:40:54Z,"Automatic sanity-testing: FAILED MERGE, see http://jenkins.bluematt.me/pull-tester/7a2670692e7cf455899fdb3dafdff734ce2a794b for test log.\n\nThis pull does not merge cleanly onto current master\n",https://github.com/bitcoin/bitcoin/pull/1426#issuecomment-7632127,7632127,
laanwj,2012-08-20T19:06:18Z,Closing this in favor of #1670\n,https://github.com/bitcoin/bitcoin/pull/1426#issuecomment-7879870,7879870,
