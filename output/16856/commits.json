[
  {
    "sha": "2a4e60b48261d3f0ec3d85f97af998ef989134e0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYTRlNjBiNDgyNjFkM2YwZWMzZDg1Zjk3YWY5OThlZjk4OTEzNGUw",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2019-09-10T17:58:41Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2019-09-10T18:54:50Z"
      },
      "message": "Fix block index inconsistency in InvalidateBlock()\n\nPreviously, we could release cs_main while leaving the block index in a state\nthat would fail CheckBlockIndex, because setBlockIndexCandidates was not being\nfully populated before releasing cs_main.",
      "tree": {
        "sha": "9c80a637185174eef64b1c77d1004dc926d5e0ad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9c80a637185174eef64b1c77d1004dc926d5e0ad"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2a4e60b48261d3f0ec3d85f97af998ef989134e0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a4e60b48261d3f0ec3d85f97af998ef989134e0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2a4e60b48261d3f0ec3d85f97af998ef989134e0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a4e60b48261d3f0ec3d85f97af998ef989134e0/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1985c4efda56b48f6f9c04f39d69268ee8f0b40a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1985c4efda56b48f6f9c04f39d69268ee8f0b40a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1985c4efda56b48f6f9c04f39d69268ee8f0b40a"
      }
    ],
    "stats": {
      "total": 54,
      "additions": 52,
      "deletions": 2
    },
    "files": [
      {
        "sha": "62de023e2de6a1368437221a03aa94a96e8a9fc8",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 52,
        "deletions": 2,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a4e60b48261d3f0ec3d85f97af998ef989134e0/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a4e60b48261d3f0ec3d85f97af998ef989134e0/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=2a4e60b48261d3f0ec3d85f97af998ef989134e0",
        "patch": "@@ -2778,6 +2778,38 @@ bool CChainState::InvalidateBlock(CValidationState& state, const CChainParams& c\n     bool pindex_was_in_chain = false;\n     int disconnected = 0;\n \n+    // We do not allow ActivateBestChain() to run while InvalidateBlock() is\n+    // running, as that could cause the tip to change while we disconnect\n+    // blocks.\n+    LOCK(m_cs_chainstate);\n+\n+    // We'll be acquiring and releasing cs_main below, to allow the validation\n+    // callbacks to run. However, we should keep the block index in a\n+    // consistent state as we disconnect blocks -- in particular we need to\n+    // add equal-work blocks to setBlockIndexCandidates as we disconnect.\n+    // To avoid walking the block index repeatedly in search of candidates,\n+    // build a map once so that we can look up candidate blocks by chain\n+    // work as we go.\n+    std::multimap<const arith_uint256, CBlockIndex *> candidate_blocks_by_work;\n+\n+    {\n+        LOCK(cs_main);\n+        for (const auto& entry : m_blockman.m_block_index) {\n+            CBlockIndex *candidate = entry.second;\n+            // We don't need to put anything in our active chain into the\n+            // multimap, because those candidates will be found and considered\n+            // as we disconnect.\n+            // Instead, consider only non-active-chain blocks that have at\n+            // least as much work as where we expect the new tip to end up.\n+            if (!m_chain.Contains(candidate) &&\n+                    !CBlockIndexWorkComparator()(candidate, pindex->pprev) &&\n+                    candidate->IsValid(BLOCK_VALID_TRANSACTIONS) &&\n+                    candidate->HaveTxsDownloaded()) {\n+                candidate_blocks_by_work.insert(std::make_pair(candidate->nChainWork, candidate));\n+            }\n+        }\n+    }\n+\n     // Disconnect (descendants of) pindex, and mark them invalid.\n     while (true) {\n         if (ShutdownRequested()) break;\n@@ -2820,11 +2852,24 @@ bool CChainState::InvalidateBlock(CValidationState& state, const CChainParams& c\n             setDirtyBlockIndex.insert(to_mark_failed);\n         }\n \n+        // Add any equal or more work headers to setBlockIndexCandidates\n+        auto candidate_it = candidate_blocks_by_work.lower_bound(invalid_walk_tip->pprev->nChainWork);\n+        while (candidate_it != candidate_blocks_by_work.end()) {\n+            if (!CBlockIndexWorkComparator()(candidate_it->second, invalid_walk_tip->pprev)) {\n+                setBlockIndexCandidates.insert(candidate_it->second);\n+                candidate_it = candidate_blocks_by_work.erase(candidate_it);\n+            } else {\n+                ++candidate_it;\n+            }\n+        }\n+\n         // Track the last disconnected block, so we can correct its BLOCK_FAILED_CHILD status in future\n         // iterations, or, if it's the last one, call InvalidChainFound on it.\n         to_mark_failed = invalid_walk_tip;\n     }\n \n+    CheckBlockIndex(chainparams.GetConsensus());\n+\n     {\n         LOCK(cs_main);\n         if (m_chain.Contains(to_mark_failed)) {\n@@ -2838,8 +2883,13 @@ bool CChainState::InvalidateBlock(CValidationState& state, const CChainParams& c\n         setBlockIndexCandidates.erase(to_mark_failed);\n         m_blockman.m_failed_blocks.insert(to_mark_failed);\n \n-        // The resulting new best tip may not be in setBlockIndexCandidates anymore, so\n-        // add it again.\n+        // If any new blocks somehow arrived while we were disconnecting\n+        // (above), then the pre-calculation of what should go into\n+        // setBlockIndexCandidates may have missed entries. This would\n+        // technically be an inconsistency in the block index, but if we clean\n+        // it up here, this should be an essentially unobservable error.\n+        // Loop back over all block index entries and add any missing entries\n+        // to setBlockIndexCandidates.\n         BlockMap::iterator it = m_blockman.m_block_index.begin();\n         while (it != m_blockman.m_block_index.end()) {\n             if (it->second->IsValid(BLOCK_VALID_TRANSACTIONS) && it->second->HaveTxsDownloaded() && !setBlockIndexCandidates.value_comp()(it->second, m_chain.Tip())) {"
      }
    ]
  },
  {
    "sha": "2075bd7774ab3d51c625b13f3361af58ccd1fc89",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMDc1YmQ3Nzc0YWIzZDUxYzYyNWIxM2YzMzYxYWY1OGNjZDFmYzg5",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2019-09-11T21:07:24Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2019-09-11T21:07:24Z"
      },
      "message": "Fix invalid_walk_tip comparison in InvalidateBlock",
      "tree": {
        "sha": "531689b74e19b041cf5b91b4e5ecedf92a17f393",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/531689b74e19b041cf5b91b4e5ecedf92a17f393"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2075bd7774ab3d51c625b13f3361af58ccd1fc89",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2075bd7774ab3d51c625b13f3361af58ccd1fc89",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2075bd7774ab3d51c625b13f3361af58ccd1fc89",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2075bd7774ab3d51c625b13f3361af58ccd1fc89/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2a4e60b48261d3f0ec3d85f97af998ef989134e0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a4e60b48261d3f0ec3d85f97af998ef989134e0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2a4e60b48261d3f0ec3d85f97af998ef989134e0"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "85af43cbfc1151f37e995631a05559317d7a6af0",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2075bd7774ab3d51c625b13f3361af58ccd1fc89/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2075bd7774ab3d51c625b13f3361af58ccd1fc89/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=2075bd7774ab3d51c625b13f3361af58ccd1fc89",
        "patch": "@@ -2845,7 +2845,7 @@ bool CChainState::InvalidateBlock(CValidationState& state, const CChainParams& c\n         setDirtyBlockIndex.insert(invalid_walk_tip);\n         setBlockIndexCandidates.erase(invalid_walk_tip);\n         setBlockIndexCandidates.insert(invalid_walk_tip->pprev);\n-        if (invalid_walk_tip->pprev == to_mark_failed && (to_mark_failed->nStatus & BLOCK_FAILED_VALID)) {\n+        if (invalid_walk_tip == to_mark_failed->pprev && (to_mark_failed->nStatus & BLOCK_FAILED_VALID)) {\n             // We only want to mark the last disconnected block as BLOCK_FAILED_VALID; its children\n             // need to be BLOCK_FAILED_CHILD instead.\n             to_mark_failed->nStatus = (to_mark_failed->nStatus ^ BLOCK_FAILED_VALID) | BLOCK_FAILED_CHILD;"
      }
    ]
  },
  {
    "sha": "f043ca0100ab46dc27a96ae7f082ad11c2e76e41",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMDQzY2EwMTAwYWI0NmRjMjdhOTZhZTdmMDgyYWQxMWMyZTc2ZTQx",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2019-09-11T21:08:03Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2019-09-11T21:08:03Z"
      },
      "message": "Clarify the final |= BLOCK_FAILED_VALID in InvalidateBlock\n\nThis has no functional affect, as the any CBlockIndex*s which\nto_mark_failed is set to will already have been marked failed.",
      "tree": {
        "sha": "067cd99066e050a4abc7233f919dc780c1b45481",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/067cd99066e050a4abc7233f919dc780c1b45481"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f043ca0100ab46dc27a96ae7f082ad11c2e76e41",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f043ca0100ab46dc27a96ae7f082ad11c2e76e41",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f043ca0100ab46dc27a96ae7f082ad11c2e76e41",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f043ca0100ab46dc27a96ae7f082ad11c2e76e41/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2075bd7774ab3d51c625b13f3361af58ccd1fc89",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2075bd7774ab3d51c625b13f3361af58ccd1fc89",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2075bd7774ab3d51c625b13f3361af58ccd1fc89"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 7,
      "deletions": 5
    },
    "files": [
      {
        "sha": "d2234c84c1f63e3aa7ae4fd21ce089bcde3205c0",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f043ca0100ab46dc27a96ae7f082ad11c2e76e41/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f043ca0100ab46dc27a96ae7f082ad11c2e76e41/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=f043ca0100ab46dc27a96ae7f082ad11c2e76e41",
        "patch": "@@ -2877,11 +2877,13 @@ bool CChainState::InvalidateBlock(CValidationState& state, const CChainParams& c\n             return false;\n         }\n \n-        // Mark pindex (or the last disconnected block) as invalid, even when it never was in the main chain\n-        to_mark_failed->nStatus |= BLOCK_FAILED_VALID;\n-        setDirtyBlockIndex.insert(to_mark_failed);\n-        setBlockIndexCandidates.erase(to_mark_failed);\n-        m_blockman.m_failed_blocks.insert(to_mark_failed);\n+        // Mark pindex as invalid if it never was in the main chain\n+        if (!pindex_was_in_chain && !(pindex->nStatus & BLOCK_FAILED_MASK)) {\n+            pindex->nStatus |= BLOCK_FAILED_VALID;\n+            setDirtyBlockIndex.insert(pindex);\n+            setBlockIndexCandidates.erase(pindex);\n+            m_blockman.m_failed_blocks.insert(pindex);\n+        }\n \n         // If any new blocks somehow arrived while we were disconnecting\n         // (above), then the pre-calculation of what should go into"
      }
    ]
  },
  {
    "sha": "0ae728197ca5a8e3649f0453548c68bd0cac1402",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYWU3MjgxOTdjYTVhOGUzNjQ5ZjA0NTM1NDhjNjhiZDBjYWMxNDAy",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2019-09-11T21:09:29Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2019-09-11T21:09:29Z"
      },
      "message": "Add a checkfor the previous invalid comparison of invalid_walk_tip\n\nThis adds a new test in CheckBlockIndex which tests that any\ndescendants of a block marked BLOCK_FAILED_VALID will not be marked\nBLOCK_FAILED_VALID as they should never have been connected in the\nfirst place.\n\nNote that this check requires further changes in InvalidateBlock as\nif you iteratively call InvalidateBlock to walk the chain backwards\n(instead of calling InvalidateBlock on an old block and allowing it\nto do the walking), the later-in-the-chain blocks will violate this.",
      "tree": {
        "sha": "af85277bf5222da1fc55c0809d0f982bc906ea04",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/af85277bf5222da1fc55c0809d0f982bc906ea04"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0ae728197ca5a8e3649f0453548c68bd0cac1402",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ae728197ca5a8e3649f0453548c68bd0cac1402",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0ae728197ca5a8e3649f0453548c68bd0cac1402",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ae728197ca5a8e3649f0453548c68bd0cac1402/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f043ca0100ab46dc27a96ae7f082ad11c2e76e41",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f043ca0100ab46dc27a96ae7f082ad11c2e76e41",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f043ca0100ab46dc27a96ae7f082ad11c2e76e41"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 22,
      "deletions": 5
    },
    "files": [
      {
        "sha": "bc387e7a49e93f1eccb213da7aa10ce4f6626475",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 5,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ae728197ca5a8e3649f0453548c68bd0cac1402/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ae728197ca5a8e3649f0453548c68bd0cac1402/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=0ae728197ca5a8e3649f0453548c68bd0cac1402",
        "patch": "@@ -2792,6 +2792,8 @@ bool CChainState::InvalidateBlock(CValidationState& state, const CChainParams& c\n     // work as we go.\n     std::multimap<const arith_uint256, CBlockIndex *> candidate_blocks_by_work;\n \n+    std::set<CBlockIndex *> failed_valid_descendants;\n+\n     {\n         LOCK(cs_main);\n         for (const auto& entry : m_blockman.m_block_index) {\n@@ -2801,11 +2803,12 @@ bool CChainState::InvalidateBlock(CValidationState& state, const CChainParams& c\n             // as we disconnect.\n             // Instead, consider only non-active-chain blocks that have at\n             // least as much work as where we expect the new tip to end up.\n-            if (!m_chain.Contains(candidate) &&\n-                    !CBlockIndexWorkComparator()(candidate, pindex->pprev) &&\n-                    candidate->IsValid(BLOCK_VALID_TRANSACTIONS) &&\n-                    candidate->HaveTxsDownloaded()) {\n-                candidate_blocks_by_work.insert(std::make_pair(candidate->nChainWork, candidate));\n+            if (!m_chain.Contains(candidate) && !CBlockIndexWorkComparator()(candidate, pindex->pprev)) {\n+                if (candidate->IsValid(BLOCK_VALID_TRANSACTIONS) && candidate->HaveTxsDownloaded()) {\n+                    candidate_blocks_by_work.insert(std::make_pair(candidate->nChainWork, candidate));\n+                } else if ((candidate->nStatus & BLOCK_FAILED_VALID) && candidate->GetAncestor(pindex->nHeight) == pindex) {\n+                    failed_valid_descendants.insert(candidate);\n+                }\n             }\n         }\n     }\n@@ -2863,6 +2866,15 @@ bool CChainState::InvalidateBlock(CValidationState& state, const CChainParams& c\n             }\n         }\n \n+        for (auto candidate_descendant_it = failed_valid_descendants.begin(); candidate_descendant_it != failed_valid_descendants.end(); ) {\n+            if ((*candidate_descendant_it)->nHeight > invalid_walk_tip->nHeight && (*candidate_descendant_it)->GetAncestor(invalid_walk_tip->nHeight) == invalid_walk_tip) {\n+                (*candidate_descendant_it)->nStatus = ((*candidate_descendant_it)->nStatus ^ BLOCK_FAILED_VALID) | BLOCK_FAILED_CHILD;\n+                candidate_descendant_it = failed_valid_descendants.erase(candidate_descendant_it);\n+            } else {\n+                ++candidate_descendant_it;\n+            }\n+        }\n+\n         // Track the last disconnected block, so we can correct its BLOCK_FAILED_CHILD status in future\n         // iterations, or, if it's the last one, call InvalidChainFound on it.\n         to_mark_failed = invalid_walk_tip;\n@@ -4652,6 +4664,11 @@ void CChainState::CheckBlockIndex(const Consensus::Params& consensusParams)\n         if (pindexFirstInvalid == nullptr) {\n             // Checks for not-invalid blocks.\n             assert((pindex->nStatus & BLOCK_FAILED_MASK) == 0); // The failed mask cannot be set for blocks without invalid parents.\n+        } else if (pindexFirstInvalid != pindex) {\n+            // If a parent is invalid, we may be BLOCK_FAILED_CHILD (though no guarantee thereof),\n+            // but we must not be BLOCK_FAILED_VALID (as we shouldn't have attempted to connect\n+            // this block in the first place).\n+            assert((pindex->nStatus & BLOCK_FAILED_VALID) == 0);\n         }\n         if (!CBlockIndexWorkComparator()(pindex, m_chain.Tip()) && pindexFirstNeverProcessed == nullptr) {\n             if (pindexFirstInvalid == nullptr) {"
      }
    ]
  }
]