[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/917420738",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22950#issuecomment-917420738",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22950",
    "id": 917420738,
    "node_id": "IC_kwDOABII5842rrrC",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-11T14:56:14Z",
    "updated_at": "2021-10-05T15:42:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#23140](https://github.com/bitcoin/bitcoin/pull/23140) (Make CAddrman::Select_ select buckets, not positions, first by sipa)\n* [#23035](https://github.com/bitcoin/bitcoin/pull/23035) (p2p, rpc, test: expose tried and refcount in getnodeaddresses, update/improve tests by jonatack)\n* [#22937](https://github.com/bitcoin/bitcoin/pull/22937) (refactor: Forbid calling unsafe fs::path(std::string) constructor and fs::path::string() method by ryanofsky)\n* [#22872](https://github.com/bitcoin/bitcoin/pull/22872) (log: improve checkaddrman logging with duration in milliseconds by jonatack)\n* [#22839](https://github.com/bitcoin/bitcoin/pull/22839) (log: improve addrman logging by mzumsande)\n* [#22508](https://github.com/bitcoin/bitcoin/pull/22508) (fuzz: replace every fuzzer-controlled while loop with a macro by apoelstra)\n* [#20295](https://github.com/bitcoin/bitcoin/pull/20295) (rpc: getblockfrompeer by Sjors)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/917420738/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/918643347",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22950#issuecomment-918643347",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22950",
    "id": 918643347,
    "node_id": "IC_kwDOABII5842wWKT",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?u=f0ef8142342bcda68fe46c952d3c653456811ed4&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-13T22:57:33Z",
    "updated_at": "2021-09-16T16:35:19Z",
    "author_association": "MEMBER",
    "body": "Fixed the [lint failure](https://cirrus-ci.com/task/5301111516037120) that was caused by the circular dependencies check ~with 95a066efff8c63b7d81d93977c1980e019708fa9. The check treated `file_name.h` and `file_name.cpp` as the same module, so the import pattern here of `addrman.h` <- `addrman_impl.h` <- `addrman.cpp` was perceived as a circular dependency. I fixed this by telling it to also treat `file_name_impl.h` as part of the same module.~\r\n\r\nMore info about updated fix here: https://github.com/bitcoin/bitcoin/pull/22950#issuecomment-921056093",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/918643347/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/919092484",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22950#issuecomment-919092484",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22950",
    "id": 919092484,
    "node_id": "IC_kwDOABII5842yD0E",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-14T12:14:26Z",
    "updated_at": "2021-09-14T12:14:26Z",
    "author_association": "MEMBER",
    "body": "Concept ACK. I'm a big fan of compilation firewall patterns. From Herb Sutter:\r\n\r\n> One big advantage of this idiom is that it breaks compile-time dependencies. First, system builds run faster because using a Pimpl can eliminate extra #includes. I have worked on projects where converting just a few widely-visible classes to use Pimpls has halved the system\u2019s build time. Second, it localizes the build impact of code changes because the parts of a class that reside in the Pimpl can be freely changed \u2013 that is, members can be freely added or removed \u2013 without recompiling client code. Because it\u2019s so good at eliminating compilation cascades due to changes in only the now-hidden members, it\u2019s often dubbed a \u201ccompilation firewall.\u201d\r\n\r\n(https://herbsutter.com/gotw/_100/)\r\n\r\nBoth are relevant here. addrman.h is eventually included by just about everything, so minimizing its compilation time is potentially a big win. There's also a plan to rework its implementation. If we first make addrman into a pimpl, that could theoretically be done without any impact on the rest of the codebase.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/919092484/reactions",
      "total_count": 5,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 3,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/920249059",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22950#issuecomment-920249059",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22950",
    "id": 920249059,
    "node_id": "IC_kwDOABII58422eLj",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-15T17:59:25Z",
    "updated_at": "2021-09-15T19:34:11Z",
    "author_association": "MEMBER",
    "body": "Concept ACK on improved separation and shorter build times. Debug build clean. Just read through pages 147-156 of Scott Meyers' \"Effective Modern C++\" about the (unique) pointer to implementation idiom and started looking at the commit organisation, particularly the choices in the second (\"Introduce CAddrMan::Impl to encapsulate addrman implementation\") and third (\"Remove external dependencies on CAddrInfo objects\") commits where the action appears to be.\r\n\r\nEdit, noting for myself, also:\r\n- Scott Meyers, \"Effective C++\", item 31\r\n- Herb Sutter, \"Exceptional C++\", items 26-30",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/920249059/reactions",
      "total_count": 2,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 2,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/921048350",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22950#issuecomment-921048350",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22950",
    "id": 921048350,
    "node_id": "IC_kwDOABII58425hUe",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-16T16:24:00Z",
    "updated_at": "2021-09-16T16:24:00Z",
    "author_association": "MEMBER",
    "body": "Concept ACK\r\n\r\n> Both are relevant here. addrman.h is eventually included by just about everything, so minimizing its compilation time is potentially a big win.\r\n\r\nYes, at some point there was discussion about doing this for `txmempool.h` too, as it's included a fair bit and includes all these boost `multi_index` structures, which i'm sure slow down compilation quite a bit.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/921048350/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 1,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/921056093",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22950#issuecomment-921056093",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22950",
    "id": 921056093,
    "node_id": "IC_kwDOABII58425jNd",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?u=f0ef8142342bcda68fe46c952d3c653456811ed4&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-16T16:34:37Z",
    "updated_at": "2021-09-16T16:34:37Z",
    "author_association": "MEMBER",
    "body": "adopted a different fix to the detected circular dependency- I made the impl a stand-alone class, so it's now `AddrManImpl` instead of `AddrMan::Impl`. this means `addrman_impl.h` does not need to import `addrman.h`, and the linter script does not need to be updated :) ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/921056093/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/923583452",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22950#issuecomment-923583452",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22950",
    "id": 923583452,
    "node_id": "IC_kwDOABII5843DMPc",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?u=8cdd8653982252593843d7369ecfebe432b89768&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-21T03:29:46Z",
    "updated_at": "2021-09-21T03:29:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "concept ack!",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/923583452/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 1,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/924415628",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22950#issuecomment-924415628",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22950",
    "id": 924415628,
    "node_id": "IC_kwDOABII5843GXaM",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?u=f0ef8142342bcda68fe46c952d3c653456811ed4&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-21T21:55:20Z",
    "updated_at": "2021-09-21T21:55:20Z",
    "author_association": "MEMBER",
    "body": "thanks for the concept ACKs! rebased to incorporate the recent addrman changes. ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/924415628/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/924488565",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22950#issuecomment-924488565",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22950",
    "id": 924488565,
    "node_id": "IC_kwDOABII5843GpN1",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?u=f0ef8142342bcda68fe46c952d3c653456811ed4&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-22T00:35:19Z",
    "updated_at": "2021-09-22T00:35:19Z",
    "author_association": "MEMBER",
    "body": "I had missed a silent merge conflict, fixed now and ready for review \ud83c\udf88",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/924488565/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/925372937",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22950#issuecomment-925372937",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22950",
    "id": 925372937,
    "node_id": "IC_kwDOABII5843KBIJ",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?u=f0ef8142342bcda68fe46c952d3c653456811ed4&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-22T22:24:29Z",
    "updated_at": "2021-09-22T22:24:29Z",
    "author_association": "MEMBER",
    "body": "thanks for the review @jnewbery. I took all your suggestions except for this one that I have a question about-\r\n\r\n> In commit scripted-diff: Rename CAddrMan to AddrMan, is there a reason not to use git grep -l CAddrMan?\r\n\r\nI was trying this out, but am unsure how to exclude release notes. This is what I have so far, any suggestions? `git grep -l CAddrMan | xargs sed -i 's/CAddrMan/AddrMan/g'`\r\n\r\nalso, thank you for the feedback about commit breakdown. I hope its all straightened out now :) ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/925372937/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/925404222",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22950#issuecomment-925404222",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22950",
    "id": 925404222,
    "node_id": "IC_kwDOABII5843KIw-",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-22T23:39:25Z",
    "updated_at": "2021-09-22T23:39:25Z",
    "author_association": "MEMBER",
    "body": "If this is being done in the name of compilation performance, do you have any measurements justifying the change?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/925404222/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/925534009",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22950#issuecomment-925534009",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22950",
    "id": 925534009,
    "node_id": "IC_kwDOABII5843Koc5",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-23T06:18:22Z",
    "updated_at": "2021-09-23T06:18:22Z",
    "author_association": "MEMBER",
    "body": "> I was trying this out, but am unsure how to exclude release notes. \r\n\r\n`git grep -l \"foo_bar\" ./src`",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/925534009/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 1,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/925715583",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22950#issuecomment-925715583",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22950",
    "id": 925715583,
    "node_id": "IC_kwDOABII5843LUx_",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-23T11:11:25Z",
    "updated_at": "2021-09-23T11:11:25Z",
    "author_association": "MEMBER",
    "body": "> If this is being done in the name of compilation performance, do you have any measurements justifying the change?\r\n\r\n@jamesob - the most significant impact would be on _recompilation_ times. By totally separating the implementation from the interface, we can make changes to the implementation without any impact on client code that calls into this component. For example, on this branch, making the following change:\r\n\r\n<details>\r\n<summary>Code change</summary>\r\n\r\n```diff\r\ndiff --git a/src/addrman.cpp b/src/addrman.cpp\r\nindex ac2635249c..1257a7503f 100644\r\n--- a/src/addrman.cpp\r\n+++ b/src/addrman.cpp\r\n@@ -1015,7 +1015,7 @@ bool AddrManImpl::Add(const std::vector<CAddress>& vAddr, const CNetAddr& source\r\n         nAdd += Add_(*it, source, nTimePenalty) ? 1 : 0;\r\n     Check();\r\n     if (nAdd) {\r\n-        LogPrint(BCLog::ADDRMAN, \"Added %i addresses from %s: %i tried, %i new\\n\", nAdd, source.ToString(), nTried, nNew);\r\n+        LogPrint(BCLog::ADDRMAN, \"Added %i addresses from %s: %i tried, %i new, %i collisions\\n\", nAdd, source.ToString(), nTried, nNew, m_tried_collisions.size());\r\n     }\r\n     return nAdd > 0;\r\n }\r\n```\r\n</details>\r\n\r\nRecompiles for me in about 35s:\r\n\r\n<details>\r\n<summary>Build</summary>\r\n\r\n```\r\n\u2192 time make\r\nMaking all in src\r\nmake[1]: Entering directory '/home/vagrant/bitcoin/src'\r\nmake[2]: Entering directory '/home/vagrant/bitcoin/src'\r\nmake[3]: Entering directory '/home/vagrant/bitcoin'\r\nmake[3]: Leaving directory '/home/vagrant/bitcoin'\r\n  CXX      libbitcoin_server_a-addrman.o\r\n  AR       libbitcoin_server.a\r\n  CXXLD    bitcoind\r\n  CXXLD    test/test_bitcoin\r\n  CXXLD    bench/bench_bitcoin\r\n  CXXLD    test/fuzz/fuzz\r\nmake[2]: Leaving directory '/home/vagrant/bitcoin/src'\r\nmake[1]: Leaving directory '/home/vagrant/bitcoin/src'\r\nMaking all in doc/man\r\nmake[1]: Entering directory '/home/vagrant/bitcoin/doc/man'\r\nmake[1]: Nothing to be done for 'all'.\r\nmake[1]: Leaving directory '/home/vagrant/bitcoin/doc/man'\r\nmake[1]: Entering directory '/home/vagrant/bitcoin'\r\nmake[1]: Nothing to be done for 'all-am'.\r\nmake[1]: Leaving directory '/home/vagrant/bitcoin'\r\n\r\nreal    0m35.758s\r\nuser    0m26.836s\r\nsys     0m7.951s\r\n```\r\n\r\n</details>\r\n\r\nOn master, making the equivalent change:\r\n\r\n<details>\r\n<summary>Code change</summary>\r\n\r\n```diff\r\ndiff --git a/src/addrman.h b/src/addrman.h\r\nindex 7dd8528bef..08f158f6c6 100644\r\n--- a/src/addrman.h\r\n+++ b/src/addrman.h\r\n@@ -174,7 +174,7 @@ public:\r\n             nAdd += Add_(*it, source, nTimePenalty) ? 1 : 0;\r\n         Check();\r\n         if (nAdd) {\r\n-            LogPrint(BCLog::ADDRMAN, \"Added %i addresses from %s: %i tried, %i new\\n\", nAdd, source.ToString(), nTried, nNew);\r\n+            LogPrint(BCLog::ADDRMAN, \"Added %i addresses from %s: %i tried, %i new, %i collisions\\n\", nAdd, source.ToString(), nTried, nNew, m_tried_collisions.size());\r\n         }\r\n         return nAdd > 0;\r\n     }\r\n```\r\n\r\n</details>\r\n\r\nresults in a very long build of 9m29s, since those changes get included in many other translation units:\r\n\r\n<details>\r\n<summary>Build</summary>\r\n\r\n```\r\n\u2192 time make\r\nMaking all in src\r\nmake[1]: Entering directory '/home/vagrant/bitcoin/src'\r\nmake[2]: Entering directory '/home/vagrant/bitcoin/src'\r\nmake[3]: Entering directory '/home/vagrant/bitcoin'\r\nmake[3]: Leaving directory '/home/vagrant/bitcoin'\r\n  CXX      init/bitcoind-bitcoind.o\r\n  CXX      libbitcoin_server_a-addrdb.o\r\n  CXX      libbitcoin_server_a-addrman.o\r\n  CXX      libbitcoin_server_a-init.o\r\n  CXX      libbitcoin_server_a-mapport.o\r\n  CXX      libbitcoin_server_a-net.o\r\n  CXX      libbitcoin_server_a-net_processing.o\r\n  CXX      node/libbitcoin_server_a-context.o\r\n  CXX      node/libbitcoin_server_a-interfaces.o\r\n  CXX      node/libbitcoin_server_a-transaction.o\r\n  CXX      rpc/libbitcoin_server_a-mining.o\r\n  CXX      rpc/libbitcoin_server_a-net.o\r\n  CXX      libbitcoin_server_a-torcontrol.o\r\n  CXX      libbitcoin_server_a-txorphanage.o\r\n  CXX      libbitcoin_server_a-txrequest.o\r\n  CXX      wallet/libbitcoin_server_a-init.o\r\n  AR       libbitcoin_server.a\r\n  CXX      interfaces/libbitcoin_util_a-init.o\r\n  AR       libbitcoin_util.a\r\n  CXXLD    bitcoind\r\n  CXXLD    bitcoin-cli\r\n  CXXLD    bitcoin-tx\r\n  CXXLD    bitcoin-wallet\r\n  CXXLD    bitcoin-util\r\n  CXX      test/test_bitcoin-addrman_tests.o\r\n  CXX      test/test_bitcoin-denialofservice_tests.o\r\n  CXX      test/test_bitcoin-i2p_tests.o\r\n  CXX      test/test_bitcoin-validation_tests.o\r\n  CXX      test/test_bitcoin-net_peer_eviction_tests.o\r\n  CXX      test/test_bitcoin-net_tests.o\r\n  CXX      test/test_bitcoin-txrequest_tests.o\r\n  CXX      test/util/libtest_util_a-net.o\r\n  CXX      test/util/libtest_util_a-setup_common.o\r\n  AR       libtest_util.a\r\n  CXXLD    test/test_bitcoin\r\n  CXX      test/fuzz/fuzz-addition_overflow.o\r\n  CXX      test/fuzz/fuzz-addrman.o\r\n  CXX      test/fuzz/fuzz-autofile.o\r\n  CXX      test/fuzz/fuzz-banman.o\r\n  CXX      test/fuzz/fuzz-block_header.o\r\n  CXX      test/fuzz/fuzz-blockfilter.o\r\n  CXX      test/fuzz/fuzz-bloom_filter.o\r\n  CXX      test/fuzz/fuzz-buffered_file.o\r\n  CXX      test/fuzz/fuzz-chain.o\r\n  CXX      test/fuzz/fuzz-checkqueue.o\r\n  CXX      test/fuzz/fuzz-coins_view.o\r\n  CXX      test/fuzz/fuzz-connman.o\r\n  CXX      test/fuzz/fuzz-crypto.o\r\n  CXX      test/fuzz/fuzz-crypto_aes256.o\r\n  CXX      test/fuzz/fuzz-crypto_aes256cbc.o\r\n  CXX      test/fuzz/fuzz-crypto_chacha20.o\r\n  CXX      test/fuzz/fuzz-crypto_chacha20_poly1305_aead.o\r\n  CXX      test/fuzz/fuzz-crypto_common.o\r\n  CXX      test/fuzz/fuzz-crypto_hkdf_hmac_sha256_l32.o\r\n  CXX      test/fuzz/fuzz-crypto_poly1305.o\r\n  CXX      test/fuzz/fuzz-cuckoocache.o\r\n  CXX      test/fuzz/fuzz-deserialize.o\r\n  CXX      test/fuzz/fuzz-fee_rate.o\r\n  CXX      test/fuzz/fuzz-fees.o\r\n  CXX      test/fuzz/fuzz-flatfile.o\r\n  CXX      test/fuzz/fuzz-float.o\r\ntest/fuzz/float.cpp: In function \u2018void float_fuzz_target(FuzzBufferType)\u2019:\r\ntest/fuzz/float.cpp:60:30: warning: \u2018tmp\u2019 may be used uninitialized in this function [-Wmaybe-uninitialized]\r\n   60 |         assert(std::isnan(d) || d == d_deserialized);\r\n      |                              ^~\r\n  CXX      test/fuzz/fuzz-golomb_rice.o\r\n  CXX      test/fuzz/fuzz-http_request.o\r\n  CXX      test/fuzz/fuzz-i2p.o\r\n  CXX      test/fuzz/fuzz-integer.o\r\n  CXX      test/fuzz/fuzz-kitchen_sink.o\r\n  CXX      test/fuzz/fuzz-load_external_block_file.o\r\n  CXX      test/fuzz/fuzz-merkleblock.o\r\n  CXX      test/fuzz/fuzz-message.o\r\n  CXX      test/fuzz/fuzz-muhash.o\r\n  CXX      test/fuzz/fuzz-multiplication_overflow.o\r\n  CXX      test/fuzz/fuzz-net.o\r\n  CXX      test/fuzz/fuzz-net_permissions.o\r\n  CXX      test/fuzz/fuzz-netaddress.o\r\n  CXX      test/fuzz/fuzz-netbase_dns_lookup.o\r\n  CXX      test/fuzz/fuzz-node_eviction.o\r\n  CXX      test/fuzz/fuzz-p2p_transport_serialization.o\r\n  CXX      test/fuzz/fuzz-parse_hd_keypath.o\r\n  CXX      test/fuzz/fuzz-policy_estimator.o\r\n  CXX      test/fuzz/fuzz-policy_estimator_io.o\r\n  CXX      test/fuzz/fuzz-pow.o\r\n  CXX      test/fuzz/fuzz-primitives_transaction.o\r\n  CXX      test/fuzz/fuzz-process_message.o\r\n  CXX      test/fuzz/fuzz-process_messages.o\r\n  CXX      test/fuzz/fuzz-protocol.o\r\n  CXX      test/fuzz/fuzz-random.o\r\n  CXX      test/fuzz/fuzz-rbf.o\r\n  CXX      test/fuzz/fuzz-rolling_bloom_filter.o\r\n  CXX      test/fuzz/fuzz-rpc.o\r\n  CXX      test/fuzz/fuzz-script.o\r\n  CXX      test/fuzz/fuzz-script_bitcoin_consensus.o\r\n  CXX      test/fuzz/fuzz-script_descriptor_cache.o\r\n  CXX      test/fuzz/fuzz-script_interpreter.o\r\n  CXX      test/fuzz/fuzz-script_ops.o\r\n  CXX      test/fuzz/fuzz-script_sigcache.o\r\n  CXX      test/fuzz/fuzz-script_sign.o\r\n  CXX      test/fuzz/fuzz-scriptnum_ops.o\r\n  CXX      test/fuzz/fuzz-secp256k1_ec_seckey_import_export_der.o\r\n  CXX      test/fuzz/fuzz-secp256k1_ecdsa_signature_parse_der_lax.o\r\n  CXX      test/fuzz/fuzz-signature_checker.o\r\n  CXX      test/fuzz/fuzz-signet.o\r\n  CXX      test/fuzz/fuzz-socks5.o\r\n  CXX      test/fuzz/fuzz-span.o\r\n  CXX      test/fuzz/fuzz-string.o\r\n  CXX      test/fuzz/fuzz-strprintf.o\r\n  CXX      test/fuzz/fuzz-system.o\r\n  CXX      test/fuzz/fuzz-timedata.o\r\n  CXX      test/fuzz/fuzz-torcontrol.o\r\n  CXX      test/fuzz/fuzz-tx_pool.o\r\n  CXX      test/fuzz/fuzz-txrequest.o\r\n  CXX      test/fuzz/fuzz-utxo_snapshot.o\r\n  CXX      test/fuzz/fuzz-validation_load_mempool.o\r\n  CXX      test/fuzz/fuzz-versionbits.o\r\n  CXX      test/fuzz/libtest_fuzz_a-util.o\r\n  AR       libtest_fuzz.a\r\n  CXXLD    test/fuzz/fuzz\r\nmake[2]: Leaving directory '/home/vagrant/bitcoin/src'\r\nmake[1]: Leaving directory '/home/vagrant/bitcoin/src'\r\nMaking all in doc/man\r\nmake[1]: Entering directory '/home/vagrant/bitcoin/doc/man'\r\nmake[1]: Nothing to be done for 'all'.\r\nmake[1]: Leaving directory '/home/vagrant/bitcoin/doc/man'\r\nmake[1]: Entering directory '/home/vagrant/bitcoin'\r\nmake[1]: Nothing to be done for 'all-am'.\r\nmake[1]: Leaving directory '/home/vagrant/bitcoin'\r\n\r\nreal\t9m29.276s\r\nuser\t8m34.052s\r\nsys\t0m51.490s\r\n\r\n```\r\n\r\n</details>\r\n\r\n(gui and bench were disabled for all builds - I expect the difference would be even more pronounced with those components also enabled).\r\n\r\nThere may be a marginal speed up in compiling from scratch since the header is slimmed down, but I expect it'd be a small improvement.\r\n\r\nHowever, for me the improved recompilation time is **not** the main motivation for this change. There are two motivations which I think are more important:\r\n\r\n1. Slimming down the header file to just well-documented interface methods makes it much easier for people writing client code that relies on addrman to very quickly understand the class's responsibilities and contracts without having to concern themselves with the internal implementation details.\r\n2. The upcoming rework of addrman (https://github.com/sipa/bitcoin/tree/202106_multiindex_addrman) can be achieved with _just_ changes to addrman.cpp, leaving the interface and header file the same. That makes it much easier to review, verify that there are no functional changes, and test conformance between the old and new implementations.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/925715583/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/926920984",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22950#issuecomment-926920984",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22950",
    "id": 926920984,
    "node_id": "IC_kwDOABII5843P7EY",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?u=f0ef8142342bcda68fe46c952d3c653456811ed4&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-24T21:09:39Z",
    "updated_at": "2021-09-24T21:09:39Z",
    "author_association": "MEMBER",
    "body": "latest push: \r\n- rebased to address a small conflict with #23025 \r\n- updated the scripted diffs to use `grep` to generate the file names \r\n- split up the first commit into two parts as suggested in https://github.com/bitcoin/bitcoin/pull/22950#pullrequestreview-761829604\r\n- moved around some code to address review comments ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/926920984/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/927696951",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22950#issuecomment-927696951",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22950",
    "id": 927696951,
    "node_id": "IC_kwDOABII5843S4g3",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-27T09:37:26Z",
    "updated_at": "2021-09-27T09:37:26Z",
    "author_association": "MEMBER",
    "body": "> One general point: I wonder whether the pattern AddrManImpl::Function() and AddrManImpl::Function_() should still exist in the context of the PImpl, because now there are already two sets of functions that mostly just pass things along. With the recent changes to Check() allowing much more flexibility when and how often to call the checks, maybe it is not necessary anymore and the Check() calls could be merged into the Function_() ? (Changing this shouldn't be part of this PR, just wanted to bring up the idea).\r\n\r\n@mzumsande - I agree that this would be nice. Once this PR has been merged, that kind of change can be made without touching the header file and recompiling anything.\r\n\r\nDo you think it would be overkill to have a variadic template `CheckExecuteCheck()` function that implements the pattern of locking `cs`, running `Check()`, calling the internal function, then running `Check()` again?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/927696951/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/927736344",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22950#issuecomment-927736344",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22950",
    "id": 927736344,
    "node_id": "IC_kwDOABII5843TCIY",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-27T10:31:01Z",
    "updated_at": "2021-09-27T10:31:01Z",
    "author_association": "MEMBER",
    "body": "utACK 0cc7031002079b35953bac1e9d4268b6321893c7\r\n\r\nIf you retouch again, you could move the function bodies of `CAddrMan::~CAddrMan()` and `CAddrMan::GetAsmap()` into addrman.cpp in the first commit (_[move-only] Move CAddrMan function definitions to cpp_) to make the second commit cleaner.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/927736344/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/928405824",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22950#issuecomment-928405824",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22950",
    "id": 928405824,
    "node_id": "IC_kwDOABII5843VllA",
    "user": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-27T22:59:40Z",
    "updated_at": "2021-09-27T23:02:28Z",
    "author_association": "MEMBER",
    "body": "utACK. Needs rebase.\r\n\r\nOnly skimmed the move-only and scripted-diff commits. Reviewed in-order and each commit is well-explained. +1 to the contained interface.\r\n\r\nAgree with @mzumsande about cleaning up the internal functions as a next step, but not as a part of this PR.\r\n\r\nIt would be nice if we had a time type so it'd be obvious what the second member of the pair was in the return values from `Select` and friends, but that's not worth addressing here.\r\n\r\nMy only other nit has already been pointed out here: https://github.com/bitcoin/bitcoin/pull/22950#discussion_r716101195 . ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/928405824/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/929797999",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22950#issuecomment-929797999",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22950",
    "id": 929797999,
    "node_id": "IC_kwDOABII5843a5dv",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?u=f0ef8142342bcda68fe46c952d3c653456811ed4&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-29T03:28:44Z",
    "updated_at": "2021-09-29T13:56:27Z",
    "author_association": "MEMBER",
    "body": "Thank you for the thoughtful reviews @mzumsande, @martinus, @jnewbery & @theuni !! I believe I've incorporated all the review comments. \r\n\r\n### A note on the latest push:\r\n\r\nMostly I rebased & addressed comments, but in doing so I added another commit- f2e5f38f09ee40933f752680fe7d75ee8e529fae. I generally attempted to get the grouping / ordering of functions to be consistent, between the declarations & definitions in AddrMan & AddrManImpl. Since (for now) the functions are repeated a few times, having predictable ordering seems valuable for making the file easier for human parsing.\r\n\r\n### Thoughts on future work:\r\n\r\n**1. Reduce the redundancy of having all interface functions defined 3 times.** \r\n\r\n@mzumsande, @jnewbery, @theuni \r\n> With the recent changes to Check() allowing much more flexibility when and how often to call the checks, maybe it is not necessary anymore and the Check() calls could be merged into the Function_() ?\r\n\r\n> Do you think it would be overkill to have a variadic template CheckExecuteCheck() function that implements the pattern of locking cs, running Check(), calling the internal function, then running Check() again?\r\n\r\n> Agree with @mzumsande about cleaning up the internal functions as a next step,\r\n\r\nHehe, I've been meaning to play out the variadic template and take a look, it seems very appealing to reduce the boilerplate code. That said, I think incorporating `Check()` into `Function_()` would also be an improvement. One of these improvements should come next. \r\n\r\n**2. Improving the interface of `Select` & `SelectTriedCollision`**\r\n\r\n@theuni \r\n> It would be nice if we had a time type so it'd be obvious what the second member of the pair was in the return values from Select and friends\r\n\r\nI agree, it's unfortunate that this PR made things slightly worse because addrman's interface now exposes an `int64_t` to represent time. I opted for this solution over making it a chrono in an attempt to keep the changes of this PR more mechanical. \r\n\r\nBoth of these functions are exclusively used by `CConnman::ThreadOpenConnections`, and I think the best solution would be to simplify the interfaces. When connman identifies that it is time to open a feeler, I think it should simply ask addrman for the top priority address. The concept of prioritizing tried collisions over a random connection should be internal to addrman. \r\n\r\nMaking the code change is not difficult, but we'd have to make the change with care because it would logically change the handling of repeated failures [here](https://github.com/bitcoin/bitcoin/blob/3c776fdcec176ffaa2056633fa2b4e737cda29ce/src/net.cpp#L2049). So, this is a long winded way of saying, I hope returning a pair is a temporary thing. \r\n\r\n**3. Improving doxygen comments of `AddrMan` functions** - there are a few `AddrMan` interface functions that could benefit from improved comments. ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/929797999/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/929962270",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22950#issuecomment-929962270",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22950",
    "id": 929962270,
    "node_id": "IC_kwDOABII5843bhke",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-29T08:36:02Z",
    "updated_at": "2021-09-29T08:36:02Z",
    "author_association": "MEMBER",
    "body": "ACK 021f86953e8a1dff8ecc768186368d345c865cc2\r\n\r\nThe incremental commits make this really easy to review. Thank you!",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/929962270/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/930483887",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22950#issuecomment-930483887",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22950",
    "id": 930483887,
    "node_id": "IC_kwDOABII5843dg6v",
    "user": {
      "login": "GeneFerneau",
      "id": 80422284,
      "node_id": "MDQ6VXNlcjgwNDIyMjg0",
      "avatar_url": "https://avatars.githubusercontent.com/u/80422284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/GeneFerneau",
      "html_url": "https://github.com/GeneFerneau",
      "followers_url": "https://api.github.com/users/GeneFerneau/followers",
      "following_url": "https://api.github.com/users/GeneFerneau/following{/other_user}",
      "gists_url": "https://api.github.com/users/GeneFerneau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/GeneFerneau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/GeneFerneau/subscriptions",
      "organizations_url": "https://api.github.com/users/GeneFerneau/orgs",
      "repos_url": "https://api.github.com/users/GeneFerneau/repos",
      "events_url": "https://api.github.com/users/GeneFerneau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/GeneFerneau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-29T19:37:19Z",
    "updated_at": "2021-09-29T19:37:19Z",
    "author_association": "NONE",
    "body": "utACK [021f869](https://github.com/bitcoin/bitcoin/pull/22950/commits/021f86953e8a1dff8ecc768186368d345c865cc2)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/930483887/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/932818456",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22950#issuecomment-932818456",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22950",
    "id": 932818456,
    "node_id": "IC_kwDOABII5843ma4Y",
    "user": {
      "login": "mzumsande",
      "id": 48763452,
      "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mzumsande",
      "html_url": "https://github.com/mzumsande",
      "followers_url": "https://api.github.com/users/mzumsande/followers",
      "following_url": "https://api.github.com/users/mzumsande/following{/other_user}",
      "gists_url": "https://api.github.com/users/mzumsande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
      "organizations_url": "https://api.github.com/users/mzumsande/orgs",
      "repos_url": "https://api.github.com/users/mzumsande/repos",
      "events_url": "https://api.github.com/users/mzumsande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mzumsande/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-02T20:48:40Z",
    "updated_at": "2021-10-02T20:48:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "ACK 021f86953e8a1dff8ecc768186368d345c865cc2\r\n\r\nReviewed the code and did some sanity checks running this for a while on mainnet with `-checkaddrman=1`, but no testing beyond that.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/932818456/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/713849263",
    "pull_request_review_id": 760789697,
    "id": 713849263,
    "node_id": "PRRC_kwDOABII584qjHmv",
    "diff_hunk": "@@ -123,290 +48,63 @@ class CAddrInfo : public CAddress\n  *    * Several indexes are kept for high performance. Setting m_consistency_check_ratio with the -checkaddrman\n  *      configuration option will introduce (expensive) consistency checks for the entire data structure.\n  */\n-\n-/** Total number of buckets for tried addresses */\n-static constexpr int32_t ADDRMAN_TRIED_BUCKET_COUNT_LOG2{8};\n-static constexpr int ADDRMAN_TRIED_BUCKET_COUNT{1 << ADDRMAN_TRIED_BUCKET_COUNT_LOG2};\n-\n-/** Total number of buckets for new addresses */\n-static constexpr int32_t ADDRMAN_NEW_BUCKET_COUNT_LOG2{10};\n-static constexpr int ADDRMAN_NEW_BUCKET_COUNT{1 << ADDRMAN_NEW_BUCKET_COUNT_LOG2};\n-\n-/** Maximum allowed number of entries in buckets for new and tried addresses */\n-static constexpr int32_t ADDRMAN_BUCKET_SIZE_LOG2{6};\n-static constexpr int ADDRMAN_BUCKET_SIZE{1 << ADDRMAN_BUCKET_SIZE_LOG2};\n-\n-/**\n- * Stochastical (IP) address manager\n- */\n-class CAddrMan\n+class AddrManImpl;",
    "path": "src/addrman.h",
    "position": null,
    "original_position": 118,
    "commit_id": "021f86953e8a1dff8ecc768186368d345c865cc2",
    "original_commit_id": "11926b09935f491c33b611f1a112a800377a481a",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This is a forward declaration, so the usual place for it would be at the top of the file. I think placing it here would also means that the doxygen comment would be associated with `AddrManImpl` instead of `AddrMan`.",
    "created_at": "2021-09-22T11:33:17Z",
    "updated_at": "2021-09-22T12:49:00Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r713849263",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/713849263"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r713849263"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/713849263/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 51,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/713887633",
    "pull_request_review_id": 760789697,
    "id": 713887633,
    "node_id": "PRRC_kwDOABII584qjQ-R",
    "diff_hunk": "@@ -1004,16 +984,187 @@ CAddrInfo CAddrMan::SelectTriedCollision_()\n     // If id_new not found in mapInfo remove it from m_tried_collisions\n     if (mapInfo.count(id_new) != 1) {\n         m_tried_collisions.erase(it);\n-        return CAddrInfo();\n+        return {};\n     }\n \n-    const CAddrInfo& newInfo = mapInfo[id_new];\n+    const AddrInfo& newInfo = mapInfo[id_new];\n \n     // which tried bucket to move the entry to\n     int tried_bucket = newInfo.GetTriedBucket(nKey, m_asmap);\n     int tried_bucket_pos = newInfo.GetBucketPosition(nKey, false, tried_bucket);\n \n-    int id_old = vvTried[tried_bucket][tried_bucket_pos];\n+    auto info_old = mapInfo[vvTried[tried_bucket][tried_bucket_pos]];\n+    return {info_old, info_old.nLastTry};\n+}\n+\n+// explicit instantiation\n+template void AddrMan::Serialize(CHashWriter& s) const;\n+template void AddrMan::Serialize(CAutoFile& s) const;\n+template void AddrMan::Serialize(CDataStream& s) const;\n+template void AddrMan::Unserialize(CAutoFile& s);\n+template void AddrMan::Unserialize(CHashVerifier<CAutoFile>& s);\n+template void AddrMan::Unserialize(CDataStream& s);\n+template void AddrMan::Unserialize(CHashVerifier<CDataStream>& s);\n+\n+template <typename Stream>\n+void AddrMan::Serialize(Stream& s_) const",
    "path": "src/addrman.cpp",
    "position": null,
    "original_position": 546,
    "commit_id": "021f86953e8a1dff8ecc768186368d345c865cc2",
    "original_commit_id": "11926b09935f491c33b611f1a112a800377a481a",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This may just be personal preference, but I think this file would be tidier/easier to read if all of these `AddrMan` boilerplate forwarding functions were collected at the bottom (as is done in txrequest.cpp), rather than interleaved with `AddrManImpl` functions.",
    "created_at": "2021-09-22T12:26:22Z",
    "updated_at": "2021-09-22T12:49:00Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r713887633",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/713887633"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r713887633"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/713887633/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1010,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/713891466",
    "pull_request_review_id": 760789697,
    "id": 713891466,
    "node_id": "PRRC_kwDOABII584qjR6K",
    "diff_hunk": "@@ -0,0 +1,287 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_ADDRMAN_IMPL_H\n+#define BITCOIN_ADDRMAN_IMPL_H\n+\n+#include <logging.h>\n+\n+#include <sync.h>\n+#include <unordered_map>\n+#include <unordered_set>\n+\n+/** Total number of buckets for tried addresses */\n+static constexpr int32_t ADDRMAN_TRIED_BUCKET_COUNT_LOG2{8};\n+static constexpr int ADDRMAN_TRIED_BUCKET_COUNT{1 << ADDRMAN_TRIED_BUCKET_COUNT_LOG2};\n+/** Total number of buckets for new addresses */\n+static constexpr int32_t ADDRMAN_NEW_BUCKET_COUNT_LOG2{10};\n+static constexpr int ADDRMAN_NEW_BUCKET_COUNT{1 << ADDRMAN_NEW_BUCKET_COUNT_LOG2};\n+/** Maximum allowed number of entries in buckets for new and tried addresses */\n+static constexpr int32_t ADDRMAN_BUCKET_SIZE_LOG2{6};\n+static constexpr int ADDRMAN_BUCKET_SIZE{1 << ADDRMAN_BUCKET_SIZE_LOG2};\n+\n+/**\n+ * Extended statistics about a CAddress\n+ */\n+class AddrInfo : public CAddress\n+{\n+public:\n+    //! last try whatsoever by us (memory only)\n+    int64_t nLastTry{0};\n+\n+    //! last counted attempt (memory only)\n+    int64_t nLastCountAttempt{0};\n+\n+    //! where knowledge about this address first came from\n+    CNetAddr source;\n+\n+    //! last successful connection by us\n+    int64_t nLastSuccess{0};\n+\n+    //! connection attempts since last successful attempt\n+    int nAttempts{0};\n+\n+    //! reference count in new sets (memory only)\n+    int nRefCount{0};\n+\n+    //! in tried set? (memory only)\n+    bool fInTried{false};\n+\n+    //! position in vRandom\n+    mutable int nRandomPos{-1};\n+\n+    SERIALIZE_METHODS(AddrInfo, obj)\n+    {\n+        READWRITEAS(CAddress, obj);\n+        READWRITE(obj.source, obj.nLastSuccess, obj.nAttempts);\n+    }\n+\n+    AddrInfo(const CAddress& addrIn, const CNetAddr& addrSource) : CAddress(addrIn), source(addrSource)\n+    {\n+    }\n+\n+    AddrInfo() : CAddress(), source()\n+    {\n+    }\n+\n+    //! Calculate in which \"tried\" bucket this entry belongs\n+    int GetTriedBucket(const uint256& nKey, const std::vector<bool>& asmap) const;\n+\n+    //! Calculate in which \"new\" bucket this entry belongs, given a certain source\n+    int GetNewBucket(const uint256& nKey, const CNetAddr& src, const std::vector<bool>& asmap) const;\n+\n+    //! Calculate in which \"new\" bucket this entry belongs, using its default source\n+    int GetNewBucket(const uint256& nKey, const std::vector<bool>& asmap) const\n+    {\n+        return GetNewBucket(nKey, source, asmap);\n+    }\n+\n+    //! Calculate in which position of a bucket to store this entry.\n+    int GetBucketPosition(const uint256& nKey, bool fNew, int nBucket) const;\n+\n+    //! Determine whether the statistics about this entry are bad enough so that it can just be deleted\n+    bool IsTerrible(int64_t nNow = GetAdjustedTime()) const;\n+\n+    //! Calculate the relative chance this entry should be given when selecting nodes to connect to\n+    double GetChance(int64_t nNow = GetAdjustedTime()) const;\n+};\n+\n+class AddrManImpl\n+{\n+public:\n+    AddrManImpl(std::vector<bool>&& asmap, bool deterministic, int32_t consistency_check_ratio)\n+        : insecure_rand{deterministic}\n+        , nKey{deterministic ? uint256{1} : insecure_rand.rand256()}\n+        , m_consistency_check_ratio{consistency_check_ratio}\n+        , m_asmap{std::move(asmap)}\n+    {\n+        for (auto& bucket : vvNew) {\n+            for (auto& entry : bucket) {\n+                entry = -1;\n+            }\n+        }\n+        for (auto& bucket : vvTried) {\n+            for (auto& entry : bucket) {\n+                entry = -1;\n+            }\n+        }\n+    }\n+\n+    ~AddrManImpl()\n+    {\n+        nKey.SetNull();\n+    }\n+\n+\n+    template <typename Stream>\n+    void Serialize(Stream& s_) const EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    template <typename Stream>\n+    void Unserialize(Stream& s_) EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    size_t size() const EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    bool Add(const std::vector<CAddress>& vAddr, const CNetAddr& source, int64_t nTimePenalty = 0)\n+        EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    void Good(const CService& addr, int64_t nTime = GetAdjustedTime())\n+        EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    void Attempt(const CService& addr, bool fCountFailure, int64_t nTime = GetAdjustedTime())\n+        EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    void ResolveCollisions() EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    std::pair<CAddress, int64_t> SelectTriedCollision() EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    std::pair<CAddress, int64_t> Select(bool newOnly = false) const\n+        EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    std::vector<CAddress> GetAddr(size_t max_addresses, size_t max_pct, std::optional<Network> network) const\n+        EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    void Connected(const CService& addr, int64_t nTime = GetAdjustedTime())\n+        EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    void SetServices(const CService& addr, ServiceFlags nServices)\n+        EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    const std::vector<bool>& GetAsmap() const;\n+\n+    friend class AddrManTest;\n+    friend class AddrManDeterministic;\n+\n+private:\n+    //! A mutex to protect the inner data structures.\n+    mutable Mutex cs;\n+\n+    //! Source of random numbers for randomization in inner loops\n+    mutable FastRandomContext insecure_rand GUARDED_BY(cs);\n+\n+    //! secret key to randomize bucket select with\n+    uint256 nKey;\n+\n+    //! Serialization versions.\n+    enum Format : uint8_t {\n+        V0_HISTORICAL = 0,    //!< historic format, before commit e6b343d88\n+        V1_DETERMINISTIC = 1, //!< for pre-asmap files\n+        V2_ASMAP = 2,         //!< for files including asmap version\n+        V3_BIP155 = 3,        //!< same as V2_ASMAP plus addresses are in BIP155 format\n+    };\n+\n+    //! The maximum format this software knows it can unserialize. Also, we always serialize\n+    //! in this format.\n+    //! The format (first byte in the serialized stream) can be higher than this and\n+    //! still this software may be able to unserialize the file - if the second byte\n+    //! (see `lowest_compatible` in `Unserialize()`) is less or equal to this.\n+    static constexpr Format FILE_FORMAT = Format::V3_BIP155;\n+\n+    //! The initial value of a field that is incremented every time an incompatible format\n+    //! change is made (such that old software versions would not be able to parse and\n+    //! understand the new file format). This is 32 because we overtook the \"key size\"\n+    //! field which was 32 historically.\n+    //! @note Don't increment this. Increment `lowest_compatible` in `Serialize()` instead.\n+    static constexpr uint8_t INCOMPATIBILITY_BASE = 32;\n+\n+    //! last used nId\n+    int nIdCount GUARDED_BY(cs){0};\n+\n+    //! table with information about all nIds\n+    std::unordered_map<int, AddrInfo> mapInfo GUARDED_BY(cs);\n+\n+    //! find an nId based on its network address\n+    std::unordered_map<CNetAddr, int, CNetAddrHash> mapAddr GUARDED_BY(cs);\n+\n+    //! randomly-ordered vector of all nIds\n+    //! This is mutable because it is unobservable outside the class, so any\n+    //! changes to it (even in const methods) are also unobservable.\n+    mutable std::vector<int> vRandom GUARDED_BY(cs);\n+\n+    // number of \"tried\" entries\n+    int nTried GUARDED_BY(cs){0};\n+\n+    //! list of \"tried\" buckets\n+    int vvTried[ADDRMAN_TRIED_BUCKET_COUNT][ADDRMAN_BUCKET_SIZE] GUARDED_BY(cs);\n+\n+    //! number of (unique) \"new\" entries\n+    int nNew GUARDED_BY(cs){0};\n+\n+    //! list of \"new\" buckets\n+    int vvNew[ADDRMAN_NEW_BUCKET_COUNT][ADDRMAN_BUCKET_SIZE] GUARDED_BY(cs);\n+\n+    //! last time Good was called (memory only). Initially set to 1 so that \"never\" is strictly worse.\n+    int64_t nLastGood GUARDED_BY(cs){1};\n+\n+    //! Holds addrs inserted into tried table that collide with existing entries. Test-before-evict discipline used to resolve these collisions.\n+    std::set<int> m_tried_collisions;\n+\n+    /** Perform consistency checks every m_consistency_check_ratio operations (if non-zero). */\n+    const int32_t m_consistency_check_ratio;\n+\n+    // Compressed IP->ASN mapping, loaded from a file when a node starts.\n+    // Should be always empty if no file was provided.\n+    // This mapping is then used for bucketing nodes in Addrman.\n+    //\n+    // If asmap is provided, nodes will be bucketed by\n+    // AS they belong to, in order to make impossible for a node\n+    // to connect to several nodes hosted in a single AS.\n+    // This is done in response to Erebus attack, but also to generally\n+    // diversify the connections every node creates,\n+    // especially useful when a large fraction of nodes\n+    // operate under a couple of cloud providers.\n+    //\n+    // If a new asmap was provided, the existing records\n+    // would be re-bucketed accordingly.\n+    const std::vector<bool> m_asmap;\n+\n+    //! Find an entry.\n+    AddrInfo* Find(const CNetAddr& addr, int* pnId = nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    //! Create a new entry and add it to the internal data structures mapInfo, mapAddr and vRandom.\n+    AddrInfo* Create(const CAddress& addr, const CNetAddr& addrSource, int* pnId = nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    //! Swap two elements in vRandom.\n+    void SwapRandom(unsigned int nRandomPos1, unsigned int nRandomPos2) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    //! Move an entry from the \"new\" table(s) to the \"tried\" table\n+    void MakeTried(AddrInfo& info, int nId) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    //! Delete an entry. It must not be in tried, and have refcount 0.\n+    void Delete(int nId) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    //! Clear a position in a \"new\" table. This is the only place where entries are actually deleted.\n+    void ClearNew(int nUBucket, int nUBucketPos) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    void Good_(const CService& addr, bool test_before_evict, int64_t time) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    bool Add_(const CAddress& addr, const CNetAddr& source, int64_t nTimePenalty) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    void Attempt_(const CService& addr, bool fCountFailure, int64_t nTime) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    std::pair<CAddress, int64_t> Select_(bool newOnly) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    void ResolveCollisions_() EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    std::pair<CAddress, int64_t> SelectTriedCollision_() EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    //! Consistency check, taking into account m_consistency_check_ratio. Will std::abort if an inconsistency is detected.\n+    void Check() const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    //! Perform consistency check, regardless of m_consistency_check_ratio.\n+    //! @returns an error code or zero.\n+    int ForceCheckAddrman() const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    /**\n+     * This internal function adds one parameter to the GetAddr wrapper.\n+     *\n+     * @param[out] vAddr         Vector of randomly selected addresses from vRandom.\n+     */",
    "path": "src/addrman_impl.h",
    "position": null,
    "original_position": 279,
    "commit_id": "021f86953e8a1dff8ecc768186368d345c865cc2",
    "original_commit_id": "11926b09935f491c33b611f1a112a800377a481a",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Maybe we should just update the internal `GetAddr_()` function to return a `std::vector<CAddress>` instead of introducing this comment?",
    "created_at": "2021-09-22T12:31:02Z",
    "updated_at": "2021-09-22T12:49:00Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r713891466",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/713891466"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r713891466"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/713891466/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 276,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 279,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/713892970",
    "pull_request_review_id": 760789697,
    "id": 713892970,
    "node_id": "PRRC_kwDOABII584qjSRq",
    "diff_hunk": "@@ -0,0 +1,287 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_ADDRMAN_IMPL_H\n+#define BITCOIN_ADDRMAN_IMPL_H\n+\n+#include <logging.h>\n+\n+#include <sync.h>",
    "path": "src/addrman_impl.h",
    "position": 12,
    "original_position": 10,
    "commit_id": "021f86953e8a1dff8ecc768186368d345c865cc2",
    "original_commit_id": "11926b09935f491c33b611f1a112a800377a481a",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Should be grouped above with logging.h, since sync.h is a project header and not a stl header.",
    "created_at": "2021-09-22T12:32:55Z",
    "updated_at": "2021-09-22T12:49:00Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r713892970",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/713892970"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r713892970"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/713892970/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 12,
    "original_line": 12,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/713897836",
    "pull_request_review_id": 760789697,
    "id": 713897836,
    "node_id": "PRRC_kwDOABII584qjTds",
    "diff_hunk": "@@ -0,0 +1,287 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_ADDRMAN_IMPL_H\n+#define BITCOIN_ADDRMAN_IMPL_H\n+\n+#include <logging.h>\n+\n+#include <sync.h>\n+#include <unordered_map>\n+#include <unordered_set>",
    "path": "src/addrman_impl.h",
    "position": 19,
    "original_position": 12,
    "commit_id": "021f86953e8a1dff8ecc768186368d345c865cc2",
    "original_commit_id": "11926b09935f491c33b611f1a112a800377a481a",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Also include:\r\n\r\n- cstdint (for fixed width integer types)\r\n- netaddress.h (for CNetAddr)\r\n- serialize.h (for serialization functions)\r\n- protocol.h (for CAddress)\r\n- uint256.h (for uint256)\r\n- vector (for std::vector)\r\n- utility (for std::pair)\r\n- set (for std::set)\r\n- optional (for std::optional)",
    "created_at": "2021-09-22T12:38:44Z",
    "updated_at": "2021-09-22T12:49:00Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r713897836",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/713897836"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r713897836"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/713897836/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 19,
    "original_line": 19,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/713899748",
    "pull_request_review_id": 760789697,
    "id": 713899748,
    "node_id": "PRRC_kwDOABII584qjT7k",
    "diff_hunk": "@@ -6,94 +6,19 @@\n #ifndef BITCOIN_ADDRMAN_H\n #define BITCOIN_ADDRMAN_H\n \n-#include <fs.h>\n-#include <logging.h>\n #include <netaddress.h>\n #include <protocol.h>\n-#include <sync.h>\n #include <timedata.h>",
    "path": "src/addrman.h",
    "position": 10,
    "original_position": 9,
    "commit_id": "021f86953e8a1dff8ecc768186368d345c865cc2",
    "original_commit_id": "11926b09935f491c33b611f1a112a800377a481a",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Also include streams.h",
    "created_at": "2021-09-22T12:41:01Z",
    "updated_at": "2021-09-22T12:49:00Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r713899748",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/713899748"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r713899748"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/713899748/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 12,
    "original_line": 12,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/714350992",
    "pull_request_review_id": 761457568,
    "id": 714350992,
    "node_id": "PRRC_kwDOABII584qlCGQ",
    "diff_hunk": "@@ -123,290 +48,63 @@ class CAddrInfo : public CAddress\n  *    * Several indexes are kept for high performance. Setting m_consistency_check_ratio with the -checkaddrman\n  *      configuration option will introduce (expensive) consistency checks for the entire data structure.\n  */\n-\n-/** Total number of buckets for tried addresses */\n-static constexpr int32_t ADDRMAN_TRIED_BUCKET_COUNT_LOG2{8};\n-static constexpr int ADDRMAN_TRIED_BUCKET_COUNT{1 << ADDRMAN_TRIED_BUCKET_COUNT_LOG2};\n-\n-/** Total number of buckets for new addresses */\n-static constexpr int32_t ADDRMAN_NEW_BUCKET_COUNT_LOG2{10};\n-static constexpr int ADDRMAN_NEW_BUCKET_COUNT{1 << ADDRMAN_NEW_BUCKET_COUNT_LOG2};\n-\n-/** Maximum allowed number of entries in buckets for new and tried addresses */\n-static constexpr int32_t ADDRMAN_BUCKET_SIZE_LOG2{6};\n-static constexpr int ADDRMAN_BUCKET_SIZE{1 << ADDRMAN_BUCKET_SIZE_LOG2};\n-\n-/**\n- * Stochastical (IP) address manager\n- */\n-class CAddrMan\n+class AddrManImpl;",
    "path": "src/addrman.h",
    "position": null,
    "original_position": 118,
    "commit_id": "021f86953e8a1dff8ecc768186368d345c865cc2",
    "original_commit_id": "11926b09935f491c33b611f1a112a800377a481a",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "fixed",
    "created_at": "2021-09-22T22:20:48Z",
    "updated_at": "2021-09-22T22:20:48Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r714350992",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/714350992"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r714350992"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/714350992/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 51,
    "side": "RIGHT",
    "in_reply_to_id": 713849263
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/714351114",
    "pull_request_review_id": 761457672,
    "id": 714351114,
    "node_id": "PRRC_kwDOABII584qlCIK",
    "diff_hunk": "@@ -1004,16 +984,187 @@ CAddrInfo CAddrMan::SelectTriedCollision_()\n     // If id_new not found in mapInfo remove it from m_tried_collisions\n     if (mapInfo.count(id_new) != 1) {\n         m_tried_collisions.erase(it);\n-        return CAddrInfo();\n+        return {};\n     }\n \n-    const CAddrInfo& newInfo = mapInfo[id_new];\n+    const AddrInfo& newInfo = mapInfo[id_new];\n \n     // which tried bucket to move the entry to\n     int tried_bucket = newInfo.GetTriedBucket(nKey, m_asmap);\n     int tried_bucket_pos = newInfo.GetBucketPosition(nKey, false, tried_bucket);\n \n-    int id_old = vvTried[tried_bucket][tried_bucket_pos];\n+    auto info_old = mapInfo[vvTried[tried_bucket][tried_bucket_pos]];\n+    return {info_old, info_old.nLastTry};\n+}\n+\n+// explicit instantiation\n+template void AddrMan::Serialize(CHashWriter& s) const;\n+template void AddrMan::Serialize(CAutoFile& s) const;\n+template void AddrMan::Serialize(CDataStream& s) const;\n+template void AddrMan::Unserialize(CAutoFile& s);\n+template void AddrMan::Unserialize(CHashVerifier<CAutoFile>& s);\n+template void AddrMan::Unserialize(CDataStream& s);\n+template void AddrMan::Unserialize(CHashVerifier<CDataStream>& s);\n+\n+template <typename Stream>\n+void AddrMan::Serialize(Stream& s_) const",
    "path": "src/addrman.cpp",
    "position": null,
    "original_position": 546,
    "commit_id": "021f86953e8a1dff8ecc768186368d345c865cc2",
    "original_commit_id": "11926b09935f491c33b611f1a112a800377a481a",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I agree, updated",
    "created_at": "2021-09-22T22:21:01Z",
    "updated_at": "2021-09-22T22:21:01Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r714351114",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/714351114"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r714351114"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/714351114/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1010,
    "side": "RIGHT",
    "in_reply_to_id": 713887633
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/714351625",
    "pull_request_review_id": 761458297,
    "id": 714351625,
    "node_id": "PRRC_kwDOABII584qlCQJ",
    "diff_hunk": "@@ -0,0 +1,287 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_ADDRMAN_IMPL_H\n+#define BITCOIN_ADDRMAN_IMPL_H\n+\n+#include <logging.h>\n+\n+#include <sync.h>\n+#include <unordered_map>\n+#include <unordered_set>\n+\n+/** Total number of buckets for tried addresses */\n+static constexpr int32_t ADDRMAN_TRIED_BUCKET_COUNT_LOG2{8};\n+static constexpr int ADDRMAN_TRIED_BUCKET_COUNT{1 << ADDRMAN_TRIED_BUCKET_COUNT_LOG2};\n+/** Total number of buckets for new addresses */\n+static constexpr int32_t ADDRMAN_NEW_BUCKET_COUNT_LOG2{10};\n+static constexpr int ADDRMAN_NEW_BUCKET_COUNT{1 << ADDRMAN_NEW_BUCKET_COUNT_LOG2};\n+/** Maximum allowed number of entries in buckets for new and tried addresses */\n+static constexpr int32_t ADDRMAN_BUCKET_SIZE_LOG2{6};\n+static constexpr int ADDRMAN_BUCKET_SIZE{1 << ADDRMAN_BUCKET_SIZE_LOG2};\n+\n+/**\n+ * Extended statistics about a CAddress\n+ */\n+class AddrInfo : public CAddress\n+{\n+public:\n+    //! last try whatsoever by us (memory only)\n+    int64_t nLastTry{0};\n+\n+    //! last counted attempt (memory only)\n+    int64_t nLastCountAttempt{0};\n+\n+    //! where knowledge about this address first came from\n+    CNetAddr source;\n+\n+    //! last successful connection by us\n+    int64_t nLastSuccess{0};\n+\n+    //! connection attempts since last successful attempt\n+    int nAttempts{0};\n+\n+    //! reference count in new sets (memory only)\n+    int nRefCount{0};\n+\n+    //! in tried set? (memory only)\n+    bool fInTried{false};\n+\n+    //! position in vRandom\n+    mutable int nRandomPos{-1};\n+\n+    SERIALIZE_METHODS(AddrInfo, obj)\n+    {\n+        READWRITEAS(CAddress, obj);\n+        READWRITE(obj.source, obj.nLastSuccess, obj.nAttempts);\n+    }\n+\n+    AddrInfo(const CAddress& addrIn, const CNetAddr& addrSource) : CAddress(addrIn), source(addrSource)\n+    {\n+    }\n+\n+    AddrInfo() : CAddress(), source()\n+    {\n+    }\n+\n+    //! Calculate in which \"tried\" bucket this entry belongs\n+    int GetTriedBucket(const uint256& nKey, const std::vector<bool>& asmap) const;\n+\n+    //! Calculate in which \"new\" bucket this entry belongs, given a certain source\n+    int GetNewBucket(const uint256& nKey, const CNetAddr& src, const std::vector<bool>& asmap) const;\n+\n+    //! Calculate in which \"new\" bucket this entry belongs, using its default source\n+    int GetNewBucket(const uint256& nKey, const std::vector<bool>& asmap) const\n+    {\n+        return GetNewBucket(nKey, source, asmap);\n+    }\n+\n+    //! Calculate in which position of a bucket to store this entry.\n+    int GetBucketPosition(const uint256& nKey, bool fNew, int nBucket) const;\n+\n+    //! Determine whether the statistics about this entry are bad enough so that it can just be deleted\n+    bool IsTerrible(int64_t nNow = GetAdjustedTime()) const;\n+\n+    //! Calculate the relative chance this entry should be given when selecting nodes to connect to\n+    double GetChance(int64_t nNow = GetAdjustedTime()) const;\n+};\n+\n+class AddrManImpl\n+{\n+public:\n+    AddrManImpl(std::vector<bool>&& asmap, bool deterministic, int32_t consistency_check_ratio)\n+        : insecure_rand{deterministic}\n+        , nKey{deterministic ? uint256{1} : insecure_rand.rand256()}\n+        , m_consistency_check_ratio{consistency_check_ratio}\n+        , m_asmap{std::move(asmap)}\n+    {\n+        for (auto& bucket : vvNew) {\n+            for (auto& entry : bucket) {\n+                entry = -1;\n+            }\n+        }\n+        for (auto& bucket : vvTried) {\n+            for (auto& entry : bucket) {\n+                entry = -1;\n+            }\n+        }\n+    }\n+\n+    ~AddrManImpl()\n+    {\n+        nKey.SetNull();\n+    }\n+\n+\n+    template <typename Stream>\n+    void Serialize(Stream& s_) const EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    template <typename Stream>\n+    void Unserialize(Stream& s_) EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    size_t size() const EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    bool Add(const std::vector<CAddress>& vAddr, const CNetAddr& source, int64_t nTimePenalty = 0)\n+        EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    void Good(const CService& addr, int64_t nTime = GetAdjustedTime())\n+        EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    void Attempt(const CService& addr, bool fCountFailure, int64_t nTime = GetAdjustedTime())\n+        EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    void ResolveCollisions() EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    std::pair<CAddress, int64_t> SelectTriedCollision() EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    std::pair<CAddress, int64_t> Select(bool newOnly = false) const\n+        EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    std::vector<CAddress> GetAddr(size_t max_addresses, size_t max_pct, std::optional<Network> network) const\n+        EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    void Connected(const CService& addr, int64_t nTime = GetAdjustedTime())\n+        EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    void SetServices(const CService& addr, ServiceFlags nServices)\n+        EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    const std::vector<bool>& GetAsmap() const;\n+\n+    friend class AddrManTest;\n+    friend class AddrManDeterministic;\n+\n+private:\n+    //! A mutex to protect the inner data structures.\n+    mutable Mutex cs;\n+\n+    //! Source of random numbers for randomization in inner loops\n+    mutable FastRandomContext insecure_rand GUARDED_BY(cs);\n+\n+    //! secret key to randomize bucket select with\n+    uint256 nKey;\n+\n+    //! Serialization versions.\n+    enum Format : uint8_t {\n+        V0_HISTORICAL = 0,    //!< historic format, before commit e6b343d88\n+        V1_DETERMINISTIC = 1, //!< for pre-asmap files\n+        V2_ASMAP = 2,         //!< for files including asmap version\n+        V3_BIP155 = 3,        //!< same as V2_ASMAP plus addresses are in BIP155 format\n+    };\n+\n+    //! The maximum format this software knows it can unserialize. Also, we always serialize\n+    //! in this format.\n+    //! The format (first byte in the serialized stream) can be higher than this and\n+    //! still this software may be able to unserialize the file - if the second byte\n+    //! (see `lowest_compatible` in `Unserialize()`) is less or equal to this.\n+    static constexpr Format FILE_FORMAT = Format::V3_BIP155;\n+\n+    //! The initial value of a field that is incremented every time an incompatible format\n+    //! change is made (such that old software versions would not be able to parse and\n+    //! understand the new file format). This is 32 because we overtook the \"key size\"\n+    //! field which was 32 historically.\n+    //! @note Don't increment this. Increment `lowest_compatible` in `Serialize()` instead.\n+    static constexpr uint8_t INCOMPATIBILITY_BASE = 32;\n+\n+    //! last used nId\n+    int nIdCount GUARDED_BY(cs){0};\n+\n+    //! table with information about all nIds\n+    std::unordered_map<int, AddrInfo> mapInfo GUARDED_BY(cs);\n+\n+    //! find an nId based on its network address\n+    std::unordered_map<CNetAddr, int, CNetAddrHash> mapAddr GUARDED_BY(cs);\n+\n+    //! randomly-ordered vector of all nIds\n+    //! This is mutable because it is unobservable outside the class, so any\n+    //! changes to it (even in const methods) are also unobservable.\n+    mutable std::vector<int> vRandom GUARDED_BY(cs);\n+\n+    // number of \"tried\" entries\n+    int nTried GUARDED_BY(cs){0};\n+\n+    //! list of \"tried\" buckets\n+    int vvTried[ADDRMAN_TRIED_BUCKET_COUNT][ADDRMAN_BUCKET_SIZE] GUARDED_BY(cs);\n+\n+    //! number of (unique) \"new\" entries\n+    int nNew GUARDED_BY(cs){0};\n+\n+    //! list of \"new\" buckets\n+    int vvNew[ADDRMAN_NEW_BUCKET_COUNT][ADDRMAN_BUCKET_SIZE] GUARDED_BY(cs);\n+\n+    //! last time Good was called (memory only). Initially set to 1 so that \"never\" is strictly worse.\n+    int64_t nLastGood GUARDED_BY(cs){1};\n+\n+    //! Holds addrs inserted into tried table that collide with existing entries. Test-before-evict discipline used to resolve these collisions.\n+    std::set<int> m_tried_collisions;\n+\n+    /** Perform consistency checks every m_consistency_check_ratio operations (if non-zero). */\n+    const int32_t m_consistency_check_ratio;\n+\n+    // Compressed IP->ASN mapping, loaded from a file when a node starts.\n+    // Should be always empty if no file was provided.\n+    // This mapping is then used for bucketing nodes in Addrman.\n+    //\n+    // If asmap is provided, nodes will be bucketed by\n+    // AS they belong to, in order to make impossible for a node\n+    // to connect to several nodes hosted in a single AS.\n+    // This is done in response to Erebus attack, but also to generally\n+    // diversify the connections every node creates,\n+    // especially useful when a large fraction of nodes\n+    // operate under a couple of cloud providers.\n+    //\n+    // If a new asmap was provided, the existing records\n+    // would be re-bucketed accordingly.\n+    const std::vector<bool> m_asmap;\n+\n+    //! Find an entry.\n+    AddrInfo* Find(const CNetAddr& addr, int* pnId = nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    //! Create a new entry and add it to the internal data structures mapInfo, mapAddr and vRandom.\n+    AddrInfo* Create(const CAddress& addr, const CNetAddr& addrSource, int* pnId = nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    //! Swap two elements in vRandom.\n+    void SwapRandom(unsigned int nRandomPos1, unsigned int nRandomPos2) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    //! Move an entry from the \"new\" table(s) to the \"tried\" table\n+    void MakeTried(AddrInfo& info, int nId) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    //! Delete an entry. It must not be in tried, and have refcount 0.\n+    void Delete(int nId) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    //! Clear a position in a \"new\" table. This is the only place where entries are actually deleted.\n+    void ClearNew(int nUBucket, int nUBucketPos) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    void Good_(const CService& addr, bool test_before_evict, int64_t time) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    bool Add_(const CAddress& addr, const CNetAddr& source, int64_t nTimePenalty) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    void Attempt_(const CService& addr, bool fCountFailure, int64_t nTime) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    std::pair<CAddress, int64_t> Select_(bool newOnly) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    void ResolveCollisions_() EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    std::pair<CAddress, int64_t> SelectTriedCollision_() EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    //! Consistency check, taking into account m_consistency_check_ratio. Will std::abort if an inconsistency is detected.\n+    void Check() const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    //! Perform consistency check, regardless of m_consistency_check_ratio.\n+    //! @returns an error code or zero.\n+    int ForceCheckAddrman() const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    /**\n+     * This internal function adds one parameter to the GetAddr wrapper.\n+     *\n+     * @param[out] vAddr         Vector of randomly selected addresses from vRandom.\n+     */",
    "path": "src/addrman_impl.h",
    "position": null,
    "original_position": 279,
    "commit_id": "021f86953e8a1dff8ecc768186368d345c865cc2",
    "original_commit_id": "11926b09935f491c33b611f1a112a800377a481a",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "sounds good, added commit 5a8415750cdc93b719a8e4c18ee245e236b93006 to handle that ",
    "created_at": "2021-09-22T22:22:17Z",
    "updated_at": "2021-09-22T22:22:17Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r714351625",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/714351625"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r714351625"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/714351625/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 276,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 279,
    "side": "RIGHT",
    "in_reply_to_id": 713891466
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/714351782",
    "pull_request_review_id": 761458475,
    "id": 714351782,
    "node_id": "PRRC_kwDOABII584qlCSm",
    "diff_hunk": "@@ -0,0 +1,287 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_ADDRMAN_IMPL_H\n+#define BITCOIN_ADDRMAN_IMPL_H\n+\n+#include <logging.h>\n+\n+#include <sync.h>",
    "path": "src/addrman_impl.h",
    "position": 12,
    "original_position": 10,
    "commit_id": "021f86953e8a1dff8ecc768186368d345c865cc2",
    "original_commit_id": "11926b09935f491c33b611f1a112a800377a481a",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "done",
    "created_at": "2021-09-22T22:22:35Z",
    "updated_at": "2021-09-22T22:22:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r714351782",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/714351782"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r714351782"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/714351782/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 12,
    "original_line": 12,
    "side": "RIGHT",
    "in_reply_to_id": 713892970
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/714352065",
    "pull_request_review_id": 761458913,
    "id": 714352065,
    "node_id": "PRRC_kwDOABII584qlCXB",
    "diff_hunk": "@@ -0,0 +1,287 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_ADDRMAN_IMPL_H\n+#define BITCOIN_ADDRMAN_IMPL_H\n+\n+#include <logging.h>\n+\n+#include <sync.h>\n+#include <unordered_map>\n+#include <unordered_set>",
    "path": "src/addrman_impl.h",
    "position": 19,
    "original_position": 12,
    "commit_id": "021f86953e8a1dff8ecc768186368d345c865cc2",
    "original_commit_id": "11926b09935f491c33b611f1a112a800377a481a",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "done",
    "created_at": "2021-09-22T22:23:27Z",
    "updated_at": "2021-09-22T22:23:27Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r714352065",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/714352065"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r714352065"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/714352065/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 19,
    "original_line": 19,
    "side": "RIGHT",
    "in_reply_to_id": 713897836
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/714352157",
    "pull_request_review_id": 761459023,
    "id": 714352157,
    "node_id": "PRRC_kwDOABII584qlCYd",
    "diff_hunk": "@@ -6,94 +6,19 @@\n #ifndef BITCOIN_ADDRMAN_H\n #define BITCOIN_ADDRMAN_H\n \n-#include <fs.h>\n-#include <logging.h>\n #include <netaddress.h>\n #include <protocol.h>\n-#include <sync.h>\n #include <timedata.h>",
    "path": "src/addrman.h",
    "position": 10,
    "original_position": 9,
    "commit_id": "021f86953e8a1dff8ecc768186368d345c865cc2",
    "original_commit_id": "11926b09935f491c33b611f1a112a800377a481a",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "done",
    "created_at": "2021-09-22T22:23:40Z",
    "updated_at": "2021-09-22T22:23:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r714352157",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/714352157"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r714352157"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/714352157/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 12,
    "original_line": 12,
    "side": "RIGHT",
    "in_reply_to_id": 713899748
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/714655994",
    "pull_request_review_id": 761829604,
    "id": 714655994,
    "node_id": "PRRC_kwDOABII584qmMj6",
    "diff_hunk": "@@ -0,0 +1,291 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_ADDRMAN_IMPL_H\n+#define BITCOIN_ADDRMAN_IMPL_H\n+\n+#include <logging.h>\n+#include <netaddress.h>\n+#include <protocol.h>\n+#include <serialize.h>\n+#include <sync.h>\n+#include <uint256.h>\n+\n+#include <cstdint>\n+#include <set>\n+#include <optional>\n+#include <unordered_map>\n+#include <unordered_set>\n+#include <utility>\n+#include <vector>\n+\n+/** Total number of buckets for tried addresses */\n+static constexpr int32_t ADDRMAN_TRIED_BUCKET_COUNT_LOG2{8};\n+static constexpr int ADDRMAN_TRIED_BUCKET_COUNT{1 << ADDRMAN_TRIED_BUCKET_COUNT_LOG2};\n+/** Total number of buckets for new addresses */\n+static constexpr int32_t ADDRMAN_NEW_BUCKET_COUNT_LOG2{10};\n+static constexpr int ADDRMAN_NEW_BUCKET_COUNT{1 << ADDRMAN_NEW_BUCKET_COUNT_LOG2};\n+/** Maximum allowed number of entries in buckets for new and tried addresses */\n+static constexpr int32_t ADDRMAN_BUCKET_SIZE_LOG2{6};\n+static constexpr int ADDRMAN_BUCKET_SIZE{1 << ADDRMAN_BUCKET_SIZE_LOG2};\n+\n+/**\n+ * Extended statistics about a CAddress\n+ */\n+class AddrInfo : public CAddress\n+{\n+public:\n+    //! last try whatsoever by us (memory only)\n+    int64_t nLastTry{0};\n+\n+    //! last counted attempt (memory only)\n+    int64_t nLastCountAttempt{0};\n+\n+    //! where knowledge about this address first came from\n+    CNetAddr source;\n+\n+    //! last successful connection by us\n+    int64_t nLastSuccess{0};\n+\n+    //! connection attempts since last successful attempt\n+    int nAttempts{0};\n+\n+    //! reference count in new sets (memory only)\n+    int nRefCount{0};\n+\n+    //! in tried set? (memory only)\n+    bool fInTried{false};\n+\n+    //! position in vRandom\n+    mutable int nRandomPos{-1};\n+\n+    SERIALIZE_METHODS(AddrInfo, obj)\n+    {\n+        READWRITEAS(CAddress, obj);\n+        READWRITE(obj.source, obj.nLastSuccess, obj.nAttempts);\n+    }\n+\n+    AddrInfo(const CAddress& addrIn, const CNetAddr& addrSource) : CAddress(addrIn), source(addrSource)\n+    {\n+    }\n+\n+    AddrInfo() : CAddress(), source()\n+    {\n+    }\n+\n+    //! Calculate in which \"tried\" bucket this entry belongs\n+    int GetTriedBucket(const uint256& nKey, const std::vector<bool>& asmap) const;\n+\n+    //! Calculate in which \"new\" bucket this entry belongs, given a certain source\n+    int GetNewBucket(const uint256& nKey, const CNetAddr& src, const std::vector<bool>& asmap) const;\n+\n+    //! Calculate in which \"new\" bucket this entry belongs, using its default source\n+    int GetNewBucket(const uint256& nKey, const std::vector<bool>& asmap) const\n+    {\n+        return GetNewBucket(nKey, source, asmap);\n+    }\n+\n+    //! Calculate in which position of a bucket to store this entry.\n+    int GetBucketPosition(const uint256& nKey, bool fNew, int nBucket) const;\n+\n+    //! Determine whether the statistics about this entry are bad enough so that it can just be deleted\n+    bool IsTerrible(int64_t nNow = GetAdjustedTime()) const;\n+\n+    //! Calculate the relative chance this entry should be given when selecting nodes to connect to\n+    double GetChance(int64_t nNow = GetAdjustedTime()) const;\n+};\n+\n+class AddrManImpl\n+{\n+public:\n+    AddrManImpl(std::vector<bool>&& asmap, bool deterministic, int32_t consistency_check_ratio)",
    "path": "src/addrman_impl.h",
    "position": null,
    "original_position": 102,
    "commit_id": "021f86953e8a1dff8ecc768186368d345c865cc2",
    "original_commit_id": "bb22a365c85f76537aba61c36277fa49d68d5c9f",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "What do you think about having the ctor and dtor function bodies in addrman.cpp, so that addrman_impl.h only contains the function declarations?",
    "created_at": "2021-09-23T10:14:48Z",
    "updated_at": "2021-09-23T10:41:13Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r714655994",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/714655994"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r714655994"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/714655994/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 102,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/714656686",
    "pull_request_review_id": 761829604,
    "id": 714656686,
    "node_id": "PRRC_kwDOABII584qmMuu",
    "diff_hunk": "@@ -1004,16 +987,184 @@ CAddrInfo CAddrMan::SelectTriedCollision_()\n     // If id_new not found in mapInfo remove it from m_tried_collisions\n     if (mapInfo.count(id_new) != 1) {\n         m_tried_collisions.erase(it);\n-        return CAddrInfo();\n+        return {};\n     }\n \n-    const CAddrInfo& newInfo = mapInfo[id_new];\n+    const AddrInfo& newInfo = mapInfo[id_new];\n \n     // which tried bucket to move the entry to\n     int tried_bucket = newInfo.GetTriedBucket(nKey, m_asmap);\n     int tried_bucket_pos = newInfo.GetBucketPosition(nKey, false, tried_bucket);\n \n-    int id_old = vvTried[tried_bucket][tried_bucket_pos];\n+    auto info_old = mapInfo[vvTried[tried_bucket][tried_bucket_pos]];\n+    return {info_old, info_old.nLastTry};\n+}\n+\n+size_t AddrManImpl::size() const\n+{\n+    LOCK(cs); // TODO: Cache this in an atomic to avoid this overhead\n+    return vRandom.size();\n+}\n+\n+bool AddrManImpl::Add(const std::vector<CAddress>& vAddr, const CNetAddr& source, int64_t nTimePenalty)\n+{\n+    LOCK(cs);\n+    int nAdd = 0;\n+    Check();\n+    for (std::vector<CAddress>::const_iterator it = vAddr.begin(); it != vAddr.end(); it++)\n+        nAdd += Add_(*it, source, nTimePenalty) ? 1 : 0;\n+    Check();\n+    if (nAdd) {\n+        LogPrint(BCLog::ADDRMAN, \"Added %i addresses from %s: %i tried, %i new\\n\", nAdd, source.ToString(), nTried, nNew);\n+    }\n+    return nAdd > 0;\n+}\n+\n+void AddrManImpl::Good(const CService& addr, int64_t nTime)\n+{\n+    LOCK(cs);\n+    Check();\n+    Good_(addr, /* test_before_evict */ true, nTime);\n+    Check();\n+}\n+\n+void AddrManImpl::Attempt(const CService& addr, bool fCountFailure, int64_t nTime)\n+{\n+    LOCK(cs);\n+    Check();\n+    Attempt_(addr, fCountFailure, nTime);\n+    Check();\n+}\n+\n+void AddrManImpl::ResolveCollisions()\n+{\n+    LOCK(cs);\n+    Check();\n+    ResolveCollisions_();\n+    Check();\n+}\n+\n+std::pair<CAddress, int64_t> AddrManImpl::SelectTriedCollision()\n+{\n+    LOCK(cs);\n+    Check();\n+    const auto ret = SelectTriedCollision_();\n+    Check();\n+    return ret;\n+}\n+\n+std::pair<CAddress, int64_t> AddrManImpl::Select(bool newOnly) const\n+{\n+    LOCK(cs);\n+    Check();\n+    const auto addrRet = Select_(newOnly);\n+    Check();\n+    return addrRet;\n+}\n+\n+std::vector<CAddress> AddrManImpl::GetAddr(size_t max_addresses, size_t max_pct, std::optional<Network> network) const\n+{\n+    LOCK(cs);\n+    Check();\n+    const auto addresses = GetAddr_(max_addresses, max_pct, network);\n+    Check();\n+    return addresses;\n+}\n+\n+void AddrManImpl::Connected(const CService& addr, int64_t nTime)\n+{\n+    LOCK(cs);\n+    Check();\n+    Connected_(addr, nTime);\n+    Check();\n+}\n+\n+void AddrManImpl::SetServices(const CService& addr, ServiceFlags nServices)\n+{\n+    LOCK(cs);\n+    Check();\n+    SetServices_(addr, nServices);\n+    Check();\n+}\n+\n+const std::vector<bool>& AddrManImpl::GetAsmap() const\n+{\n+    return m_asmap;\n+}\n+\n+// explicit instantiation",
    "path": "src/addrman.cpp",
    "position": null,
    "original_position": 646,
    "commit_id": "021f86953e8a1dff8ecc768186368d345c865cc2",
    "original_commit_id": "bb22a365c85f76537aba61c36277fa49d68d5c9f",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "It seems more natural to have these instantiations below the function definitions for `Serialize()` and `Unserialize()`.",
    "created_at": "2021-09-23T10:15:50Z",
    "updated_at": "2021-09-23T10:41:13Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r714656686",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/714656686"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r714656686"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/714656686/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1118,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/714662483",
    "pull_request_review_id": 761829604,
    "id": 714662483,
    "node_id": "PRRC_kwDOABII584qmOJT",
    "diff_hunk": "@@ -101,26 +103,13 @@ double CAddrInfo::GetChance(int64_t nNow) const\n     return fChance;\n }\n \n-CAddrMan::CAddrMan(std::vector<bool> asmap, bool deterministic, int32_t consistency_check_ratio)\n-    : insecure_rand{deterministic}\n-    , nKey{deterministic ? uint256{1} : insecure_rand.rand256()}\n-    , m_consistency_check_ratio{consistency_check_ratio}\n-    , m_asmap{std::move(asmap)}\n-{\n-    for (auto& bucket : vvNew) {\n-        for (auto& entry : bucket) {\n-            entry = -1;\n-        }\n-    }\n-    for (auto& bucket : vvTried) {\n-        for (auto& entry : bucket) {\n-            entry = -1;\n-        }\n-    }\n-}\n+AddrMan::AddrMan(std::vector<bool> asmap, bool deterministic, int32_t consistency_check_ratio)",
    "path": "src/addrman.cpp",
    "position": null,
    "original_position": 97,
    "commit_id": "021f86953e8a1dff8ecc768186368d345c865cc2",
    "original_commit_id": "bb22a365c85f76537aba61c36277fa49d68d5c9f",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Could these `AddrMan` ctor and dtor methods also be moved to the bottom, below the `AddrManImpl` methods?",
    "created_at": "2021-09-23T10:25:14Z",
    "updated_at": "2021-09-23T10:41:13Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r714662483",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/714662483"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r714662483"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/714662483/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 106,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/714665818",
    "pull_request_review_id": 761829604,
    "id": 714665818,
    "node_id": "PRRC_kwDOABII584qmO9a",
    "diff_hunk": "@@ -0,0 +1,291 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_ADDRMAN_IMPL_H\n+#define BITCOIN_ADDRMAN_IMPL_H\n+\n+#include <logging.h>\n+#include <netaddress.h>\n+#include <protocol.h>\n+#include <serialize.h>\n+#include <sync.h>\n+#include <uint256.h>\n+\n+#include <cstdint>\n+#include <set>\n+#include <optional>\n+#include <unordered_map>\n+#include <unordered_set>\n+#include <utility>\n+#include <vector>\n+\n+/** Total number of buckets for tried addresses */\n+static constexpr int32_t ADDRMAN_TRIED_BUCKET_COUNT_LOG2{8};\n+static constexpr int ADDRMAN_TRIED_BUCKET_COUNT{1 << ADDRMAN_TRIED_BUCKET_COUNT_LOG2};\n+/** Total number of buckets for new addresses */\n+static constexpr int32_t ADDRMAN_NEW_BUCKET_COUNT_LOG2{10};\n+static constexpr int ADDRMAN_NEW_BUCKET_COUNT{1 << ADDRMAN_NEW_BUCKET_COUNT_LOG2};\n+/** Maximum allowed number of entries in buckets for new and tried addresses */\n+static constexpr int32_t ADDRMAN_BUCKET_SIZE_LOG2{6};\n+static constexpr int ADDRMAN_BUCKET_SIZE{1 << ADDRMAN_BUCKET_SIZE_LOG2};\n+\n+/**\n+ * Extended statistics about a CAddress\n+ */\n+class AddrInfo : public CAddress\n+{\n+public:\n+    //! last try whatsoever by us (memory only)\n+    int64_t nLastTry{0};\n+\n+    //! last counted attempt (memory only)\n+    int64_t nLastCountAttempt{0};\n+\n+    //! where knowledge about this address first came from\n+    CNetAddr source;\n+\n+    //! last successful connection by us\n+    int64_t nLastSuccess{0};\n+\n+    //! connection attempts since last successful attempt\n+    int nAttempts{0};\n+\n+    //! reference count in new sets (memory only)\n+    int nRefCount{0};\n+\n+    //! in tried set? (memory only)\n+    bool fInTried{false};\n+\n+    //! position in vRandom\n+    mutable int nRandomPos{-1};\n+\n+    SERIALIZE_METHODS(AddrInfo, obj)\n+    {\n+        READWRITEAS(CAddress, obj);\n+        READWRITE(obj.source, obj.nLastSuccess, obj.nAttempts);\n+    }\n+\n+    AddrInfo(const CAddress& addrIn, const CNetAddr& addrSource) : CAddress(addrIn), source(addrSource)\n+    {\n+    }\n+\n+    AddrInfo() : CAddress(), source()\n+    {\n+    }\n+\n+    //! Calculate in which \"tried\" bucket this entry belongs\n+    int GetTriedBucket(const uint256& nKey, const std::vector<bool>& asmap) const;\n+\n+    //! Calculate in which \"new\" bucket this entry belongs, given a certain source\n+    int GetNewBucket(const uint256& nKey, const CNetAddr& src, const std::vector<bool>& asmap) const;\n+\n+    //! Calculate in which \"new\" bucket this entry belongs, using its default source\n+    int GetNewBucket(const uint256& nKey, const std::vector<bool>& asmap) const\n+    {\n+        return GetNewBucket(nKey, source, asmap);\n+    }\n+\n+    //! Calculate in which position of a bucket to store this entry.\n+    int GetBucketPosition(const uint256& nKey, bool fNew, int nBucket) const;\n+\n+    //! Determine whether the statistics about this entry are bad enough so that it can just be deleted\n+    bool IsTerrible(int64_t nNow = GetAdjustedTime()) const;\n+\n+    //! Calculate the relative chance this entry should be given when selecting nodes to connect to\n+    double GetChance(int64_t nNow = GetAdjustedTime()) const;\n+};\n+\n+class AddrManImpl\n+{\n+public:\n+    AddrManImpl(std::vector<bool>&& asmap, bool deterministic, int32_t consistency_check_ratio)\n+        : insecure_rand{deterministic}\n+        , nKey{deterministic ? uint256{1} : insecure_rand.rand256()}\n+        , m_consistency_check_ratio{consistency_check_ratio}\n+        , m_asmap{std::move(asmap)}\n+    {\n+        for (auto& bucket : vvNew) {\n+            for (auto& entry : bucket) {\n+                entry = -1;\n+            }\n+        }\n+        for (auto& bucket : vvTried) {\n+            for (auto& entry : bucket) {\n+                entry = -1;\n+            }\n+        }\n+    }\n+\n+    ~AddrManImpl()\n+    {\n+        nKey.SetNull();\n+    }\n+\n+\n+    template <typename Stream>\n+    void Serialize(Stream& s_) const EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    template <typename Stream>\n+    void Unserialize(Stream& s_) EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    size_t size() const EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    bool Add(const std::vector<CAddress>& vAddr, const CNetAddr& source, int64_t nTimePenalty = 0)\n+        EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    void Good(const CService& addr, int64_t nTime = GetAdjustedTime())\n+        EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    void Attempt(const CService& addr, bool fCountFailure, int64_t nTime = GetAdjustedTime())\n+        EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    void ResolveCollisions() EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    std::pair<CAddress, int64_t> SelectTriedCollision() EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    std::pair<CAddress, int64_t> Select(bool newOnly = false) const\n+        EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    std::vector<CAddress> GetAddr(size_t max_addresses, size_t max_pct, std::optional<Network> network) const\n+        EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    void Connected(const CService& addr, int64_t nTime = GetAdjustedTime())\n+        EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    void SetServices(const CService& addr, ServiceFlags nServices)\n+        EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    const std::vector<bool>& GetAsmap() const;\n+\n+    friend class AddrManTest;\n+    friend class AddrManDeterministic;\n+\n+private:\n+    //! A mutex to protect the inner data structures.\n+    mutable Mutex cs;\n+\n+    //! Source of random numbers for randomization in inner loops\n+    mutable FastRandomContext insecure_rand GUARDED_BY(cs);\n+\n+    //! secret key to randomize bucket select with\n+    uint256 nKey;\n+\n+    //! Serialization versions.\n+    enum Format : uint8_t {\n+        V0_HISTORICAL = 0,    //!< historic format, before commit e6b343d88\n+        V1_DETERMINISTIC = 1, //!< for pre-asmap files\n+        V2_ASMAP = 2,         //!< for files including asmap version\n+        V3_BIP155 = 3,        //!< same as V2_ASMAP plus addresses are in BIP155 format\n+    };\n+\n+    //! The maximum format this software knows it can unserialize. Also, we always serialize\n+    //! in this format.\n+    //! The format (first byte in the serialized stream) can be higher than this and\n+    //! still this software may be able to unserialize the file - if the second byte\n+    //! (see `lowest_compatible` in `Unserialize()`) is less or equal to this.\n+    static constexpr Format FILE_FORMAT = Format::V3_BIP155;\n+\n+    //! The initial value of a field that is incremented every time an incompatible format\n+    //! change is made (such that old software versions would not be able to parse and\n+    //! understand the new file format). This is 32 because we overtook the \"key size\"\n+    //! field which was 32 historically.\n+    //! @note Don't increment this. Increment `lowest_compatible` in `Serialize()` instead.\n+    static constexpr uint8_t INCOMPATIBILITY_BASE = 32;\n+\n+    //! last used nId\n+    int nIdCount GUARDED_BY(cs){0};\n+\n+    //! table with information about all nIds\n+    std::unordered_map<int, AddrInfo> mapInfo GUARDED_BY(cs);\n+\n+    //! find an nId based on its network address\n+    std::unordered_map<CNetAddr, int, CNetAddrHash> mapAddr GUARDED_BY(cs);\n+\n+    //! randomly-ordered vector of all nIds\n+    //! This is mutable because it is unobservable outside the class, so any\n+    //! changes to it (even in const methods) are also unobservable.\n+    mutable std::vector<int> vRandom GUARDED_BY(cs);\n+\n+    // number of \"tried\" entries\n+    int nTried GUARDED_BY(cs){0};\n+\n+    //! list of \"tried\" buckets\n+    int vvTried[ADDRMAN_TRIED_BUCKET_COUNT][ADDRMAN_BUCKET_SIZE] GUARDED_BY(cs);\n+\n+    //! number of (unique) \"new\" entries\n+    int nNew GUARDED_BY(cs){0};\n+\n+    //! list of \"new\" buckets\n+    int vvNew[ADDRMAN_NEW_BUCKET_COUNT][ADDRMAN_BUCKET_SIZE] GUARDED_BY(cs);\n+\n+    //! last time Good was called (memory only). Initially set to 1 so that \"never\" is strictly worse.\n+    int64_t nLastGood GUARDED_BY(cs){1};\n+\n+    //! Holds addrs inserted into tried table that collide with existing entries. Test-before-evict discipline used to resolve these collisions.\n+    std::set<int> m_tried_collisions;\n+\n+    /** Perform consistency checks every m_consistency_check_ratio operations (if non-zero). */\n+    const int32_t m_consistency_check_ratio;\n+\n+    // Compressed IP->ASN mapping, loaded from a file when a node starts.\n+    // Should be always empty if no file was provided.\n+    // This mapping is then used for bucketing nodes in Addrman.\n+    //\n+    // If asmap is provided, nodes will be bucketed by\n+    // AS they belong to, in order to make impossible for a node\n+    // to connect to several nodes hosted in a single AS.\n+    // This is done in response to Erebus attack, but also to generally\n+    // diversify the connections every node creates,\n+    // especially useful when a large fraction of nodes\n+    // operate under a couple of cloud providers.\n+    //\n+    // If a new asmap was provided, the existing records\n+    // would be re-bucketed accordingly.\n+    const std::vector<bool> m_asmap;\n+\n+    //! Find an entry.\n+    AddrInfo* Find(const CNetAddr& addr, int* pnId = nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    //! Create a new entry and add it to the internal data structures mapInfo, mapAddr and vRandom.\n+    AddrInfo* Create(const CAddress& addr, const CNetAddr& addrSource, int* pnId = nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    //! Swap two elements in vRandom.\n+    void SwapRandom(unsigned int nRandomPos1, unsigned int nRandomPos2) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    //! Move an entry from the \"new\" table(s) to the \"tried\" table\n+    void MakeTried(AddrInfo& info, int nId) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    //! Delete an entry. It must not be in tried, and have refcount 0.\n+    void Delete(int nId) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    //! Clear a position in a \"new\" table. This is the only place where entries are actually deleted.\n+    void ClearNew(int nUBucket, int nUBucketPos) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    void Good_(const CService& addr, bool test_before_evict, int64_t time) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    bool Add_(const CAddress& addr, const CNetAddr& source, int64_t nTimePenalty) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    void Attempt_(const CService& addr, bool fCountFailure, int64_t nTime) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    std::pair<CAddress, int64_t> Select_(bool newOnly) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    void ResolveCollisions_() EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    std::pair<CAddress, int64_t> SelectTriedCollision_() EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    //! Consistency check, taking into account m_consistency_check_ratio. Will std::abort if an inconsistency is detected.\n+    void Check() const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    //! Perform consistency check, regardless of m_consistency_check_ratio.\n+    //! @returns an error code or zero.\n+    int ForceCheckAddrman() const EXCLUSIVE_LOCKS_REQUIRED(cs);",
    "path": "src/addrman_impl.h",
    "position": 268,
    "original_position": 282,
    "commit_id": "021f86953e8a1dff8ecc768186368d345c865cc2",
    "original_commit_id": "bb22a365c85f76537aba61c36277fa49d68d5c9f",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Perhaps these two methods should be moved above `Good_`, so that all the underscore internal functions are grouped together.",
    "created_at": "2021-09-23T10:30:18Z",
    "updated_at": "2021-09-23T10:41:13Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r714665818",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/714665818"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r714665818"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/714665818/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": 263,
    "original_start_line": 277,
    "start_side": "RIGHT",
    "line": 268,
    "original_line": 268,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/715892071",
    "pull_request_review_id": 763459559,
    "id": 715892071,
    "node_id": "PRRC_kwDOABII584qq6Vn",
    "diff_hunk": "@@ -1004,16 +987,184 @@ CAddrInfo CAddrMan::SelectTriedCollision_()\n     // If id_new not found in mapInfo remove it from m_tried_collisions\n     if (mapInfo.count(id_new) != 1) {\n         m_tried_collisions.erase(it);\n-        return CAddrInfo();\n+        return {};\n     }\n \n-    const CAddrInfo& newInfo = mapInfo[id_new];\n+    const AddrInfo& newInfo = mapInfo[id_new];\n \n     // which tried bucket to move the entry to\n     int tried_bucket = newInfo.GetTriedBucket(nKey, m_asmap);\n     int tried_bucket_pos = newInfo.GetBucketPosition(nKey, false, tried_bucket);\n \n-    int id_old = vvTried[tried_bucket][tried_bucket_pos];\n+    auto info_old = mapInfo[vvTried[tried_bucket][tried_bucket_pos]];\n+    return {info_old, info_old.nLastTry};\n+}\n+\n+size_t AddrManImpl::size() const\n+{\n+    LOCK(cs); // TODO: Cache this in an atomic to avoid this overhead\n+    return vRandom.size();\n+}\n+\n+bool AddrManImpl::Add(const std::vector<CAddress>& vAddr, const CNetAddr& source, int64_t nTimePenalty)\n+{\n+    LOCK(cs);\n+    int nAdd = 0;\n+    Check();\n+    for (std::vector<CAddress>::const_iterator it = vAddr.begin(); it != vAddr.end(); it++)\n+        nAdd += Add_(*it, source, nTimePenalty) ? 1 : 0;\n+    Check();\n+    if (nAdd) {\n+        LogPrint(BCLog::ADDRMAN, \"Added %i addresses from %s: %i tried, %i new\\n\", nAdd, source.ToString(), nTried, nNew);\n+    }\n+    return nAdd > 0;\n+}\n+\n+void AddrManImpl::Good(const CService& addr, int64_t nTime)\n+{\n+    LOCK(cs);\n+    Check();\n+    Good_(addr, /* test_before_evict */ true, nTime);\n+    Check();\n+}\n+\n+void AddrManImpl::Attempt(const CService& addr, bool fCountFailure, int64_t nTime)\n+{\n+    LOCK(cs);\n+    Check();\n+    Attempt_(addr, fCountFailure, nTime);\n+    Check();\n+}\n+\n+void AddrManImpl::ResolveCollisions()\n+{\n+    LOCK(cs);\n+    Check();\n+    ResolveCollisions_();\n+    Check();\n+}\n+\n+std::pair<CAddress, int64_t> AddrManImpl::SelectTriedCollision()\n+{\n+    LOCK(cs);\n+    Check();\n+    const auto ret = SelectTriedCollision_();\n+    Check();\n+    return ret;\n+}\n+\n+std::pair<CAddress, int64_t> AddrManImpl::Select(bool newOnly) const\n+{\n+    LOCK(cs);\n+    Check();\n+    const auto addrRet = Select_(newOnly);\n+    Check();\n+    return addrRet;\n+}\n+\n+std::vector<CAddress> AddrManImpl::GetAddr(size_t max_addresses, size_t max_pct, std::optional<Network> network) const\n+{\n+    LOCK(cs);\n+    Check();\n+    const auto addresses = GetAddr_(max_addresses, max_pct, network);\n+    Check();\n+    return addresses;\n+}\n+\n+void AddrManImpl::Connected(const CService& addr, int64_t nTime)\n+{\n+    LOCK(cs);\n+    Check();\n+    Connected_(addr, nTime);\n+    Check();\n+}\n+\n+void AddrManImpl::SetServices(const CService& addr, ServiceFlags nServices)\n+{\n+    LOCK(cs);\n+    Check();\n+    SetServices_(addr, nServices);\n+    Check();\n+}\n+\n+const std::vector<bool>& AddrManImpl::GetAsmap() const\n+{\n+    return m_asmap;\n+}\n+\n+// explicit instantiation",
    "path": "src/addrman.cpp",
    "position": null,
    "original_position": 646,
    "commit_id": "021f86953e8a1dff8ecc768186368d345c865cc2",
    "original_commit_id": "bb22a365c85f76537aba61c36277fa49d68d5c9f",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "to make sure I understand correctly, is this the order you're suggesting? \r\n- `AddrManImpl::Serialize`\r\n- `AddrManImpl::Unserialize`\r\n- explicit instantiations\r\n- `AddrManImpl` [ other functions ]\r\n- `AddrMan::Serialize`\r\n- `AddrMan::Unserialize`\r\n\r\nThe reason I think the current order makes more sense is because the explicit instantiations are for the `AddrMan` template, not the impl template.",
    "created_at": "2021-09-24T20:40:47Z",
    "updated_at": "2021-09-24T20:40:47Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r715892071",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/715892071"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r715892071"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/715892071/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1118,
    "side": "RIGHT",
    "in_reply_to_id": 714656686
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/715897043",
    "pull_request_review_id": 763466037,
    "id": 715897043,
    "node_id": "PRRC_kwDOABII584qq7jT",
    "diff_hunk": "@@ -0,0 +1,291 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_ADDRMAN_IMPL_H\n+#define BITCOIN_ADDRMAN_IMPL_H\n+\n+#include <logging.h>\n+#include <netaddress.h>\n+#include <protocol.h>\n+#include <serialize.h>\n+#include <sync.h>\n+#include <uint256.h>\n+\n+#include <cstdint>\n+#include <set>\n+#include <optional>\n+#include <unordered_map>\n+#include <unordered_set>\n+#include <utility>\n+#include <vector>\n+\n+/** Total number of buckets for tried addresses */\n+static constexpr int32_t ADDRMAN_TRIED_BUCKET_COUNT_LOG2{8};\n+static constexpr int ADDRMAN_TRIED_BUCKET_COUNT{1 << ADDRMAN_TRIED_BUCKET_COUNT_LOG2};\n+/** Total number of buckets for new addresses */\n+static constexpr int32_t ADDRMAN_NEW_BUCKET_COUNT_LOG2{10};\n+static constexpr int ADDRMAN_NEW_BUCKET_COUNT{1 << ADDRMAN_NEW_BUCKET_COUNT_LOG2};\n+/** Maximum allowed number of entries in buckets for new and tried addresses */\n+static constexpr int32_t ADDRMAN_BUCKET_SIZE_LOG2{6};\n+static constexpr int ADDRMAN_BUCKET_SIZE{1 << ADDRMAN_BUCKET_SIZE_LOG2};\n+\n+/**\n+ * Extended statistics about a CAddress\n+ */\n+class AddrInfo : public CAddress\n+{\n+public:\n+    //! last try whatsoever by us (memory only)\n+    int64_t nLastTry{0};\n+\n+    //! last counted attempt (memory only)\n+    int64_t nLastCountAttempt{0};\n+\n+    //! where knowledge about this address first came from\n+    CNetAddr source;\n+\n+    //! last successful connection by us\n+    int64_t nLastSuccess{0};\n+\n+    //! connection attempts since last successful attempt\n+    int nAttempts{0};\n+\n+    //! reference count in new sets (memory only)\n+    int nRefCount{0};\n+\n+    //! in tried set? (memory only)\n+    bool fInTried{false};\n+\n+    //! position in vRandom\n+    mutable int nRandomPos{-1};\n+\n+    SERIALIZE_METHODS(AddrInfo, obj)\n+    {\n+        READWRITEAS(CAddress, obj);\n+        READWRITE(obj.source, obj.nLastSuccess, obj.nAttempts);\n+    }\n+\n+    AddrInfo(const CAddress& addrIn, const CNetAddr& addrSource) : CAddress(addrIn), source(addrSource)\n+    {\n+    }\n+\n+    AddrInfo() : CAddress(), source()\n+    {\n+    }\n+\n+    //! Calculate in which \"tried\" bucket this entry belongs\n+    int GetTriedBucket(const uint256& nKey, const std::vector<bool>& asmap) const;\n+\n+    //! Calculate in which \"new\" bucket this entry belongs, given a certain source\n+    int GetNewBucket(const uint256& nKey, const CNetAddr& src, const std::vector<bool>& asmap) const;\n+\n+    //! Calculate in which \"new\" bucket this entry belongs, using its default source\n+    int GetNewBucket(const uint256& nKey, const std::vector<bool>& asmap) const\n+    {\n+        return GetNewBucket(nKey, source, asmap);\n+    }\n+\n+    //! Calculate in which position of a bucket to store this entry.\n+    int GetBucketPosition(const uint256& nKey, bool fNew, int nBucket) const;\n+\n+    //! Determine whether the statistics about this entry are bad enough so that it can just be deleted\n+    bool IsTerrible(int64_t nNow = GetAdjustedTime()) const;\n+\n+    //! Calculate the relative chance this entry should be given when selecting nodes to connect to\n+    double GetChance(int64_t nNow = GetAdjustedTime()) const;\n+};\n+\n+class AddrManImpl\n+{\n+public:\n+    AddrManImpl(std::vector<bool>&& asmap, bool deterministic, int32_t consistency_check_ratio)\n+        : insecure_rand{deterministic}\n+        , nKey{deterministic ? uint256{1} : insecure_rand.rand256()}\n+        , m_consistency_check_ratio{consistency_check_ratio}\n+        , m_asmap{std::move(asmap)}\n+    {\n+        for (auto& bucket : vvNew) {\n+            for (auto& entry : bucket) {\n+                entry = -1;\n+            }\n+        }\n+        for (auto& bucket : vvTried) {\n+            for (auto& entry : bucket) {\n+                entry = -1;\n+            }\n+        }\n+    }\n+\n+    ~AddrManImpl()\n+    {\n+        nKey.SetNull();\n+    }\n+\n+\n+    template <typename Stream>\n+    void Serialize(Stream& s_) const EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    template <typename Stream>\n+    void Unserialize(Stream& s_) EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    size_t size() const EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    bool Add(const std::vector<CAddress>& vAddr, const CNetAddr& source, int64_t nTimePenalty = 0)\n+        EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    void Good(const CService& addr, int64_t nTime = GetAdjustedTime())\n+        EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    void Attempt(const CService& addr, bool fCountFailure, int64_t nTime = GetAdjustedTime())\n+        EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    void ResolveCollisions() EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    std::pair<CAddress, int64_t> SelectTriedCollision() EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    std::pair<CAddress, int64_t> Select(bool newOnly = false) const\n+        EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    std::vector<CAddress> GetAddr(size_t max_addresses, size_t max_pct, std::optional<Network> network) const\n+        EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    void Connected(const CService& addr, int64_t nTime = GetAdjustedTime())\n+        EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    void SetServices(const CService& addr, ServiceFlags nServices)\n+        EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    const std::vector<bool>& GetAsmap() const;\n+\n+    friend class AddrManTest;\n+    friend class AddrManDeterministic;\n+\n+private:\n+    //! A mutex to protect the inner data structures.\n+    mutable Mutex cs;\n+\n+    //! Source of random numbers for randomization in inner loops\n+    mutable FastRandomContext insecure_rand GUARDED_BY(cs);\n+\n+    //! secret key to randomize bucket select with\n+    uint256 nKey;\n+\n+    //! Serialization versions.\n+    enum Format : uint8_t {\n+        V0_HISTORICAL = 0,    //!< historic format, before commit e6b343d88\n+        V1_DETERMINISTIC = 1, //!< for pre-asmap files\n+        V2_ASMAP = 2,         //!< for files including asmap version\n+        V3_BIP155 = 3,        //!< same as V2_ASMAP plus addresses are in BIP155 format\n+    };\n+\n+    //! The maximum format this software knows it can unserialize. Also, we always serialize\n+    //! in this format.\n+    //! The format (first byte in the serialized stream) can be higher than this and\n+    //! still this software may be able to unserialize the file - if the second byte\n+    //! (see `lowest_compatible` in `Unserialize()`) is less or equal to this.\n+    static constexpr Format FILE_FORMAT = Format::V3_BIP155;\n+\n+    //! The initial value of a field that is incremented every time an incompatible format\n+    //! change is made (such that old software versions would not be able to parse and\n+    //! understand the new file format). This is 32 because we overtook the \"key size\"\n+    //! field which was 32 historically.\n+    //! @note Don't increment this. Increment `lowest_compatible` in `Serialize()` instead.\n+    static constexpr uint8_t INCOMPATIBILITY_BASE = 32;\n+\n+    //! last used nId\n+    int nIdCount GUARDED_BY(cs){0};\n+\n+    //! table with information about all nIds\n+    std::unordered_map<int, AddrInfo> mapInfo GUARDED_BY(cs);\n+\n+    //! find an nId based on its network address\n+    std::unordered_map<CNetAddr, int, CNetAddrHash> mapAddr GUARDED_BY(cs);\n+\n+    //! randomly-ordered vector of all nIds\n+    //! This is mutable because it is unobservable outside the class, so any\n+    //! changes to it (even in const methods) are also unobservable.\n+    mutable std::vector<int> vRandom GUARDED_BY(cs);\n+\n+    // number of \"tried\" entries\n+    int nTried GUARDED_BY(cs){0};\n+\n+    //! list of \"tried\" buckets\n+    int vvTried[ADDRMAN_TRIED_BUCKET_COUNT][ADDRMAN_BUCKET_SIZE] GUARDED_BY(cs);\n+\n+    //! number of (unique) \"new\" entries\n+    int nNew GUARDED_BY(cs){0};\n+\n+    //! list of \"new\" buckets\n+    int vvNew[ADDRMAN_NEW_BUCKET_COUNT][ADDRMAN_BUCKET_SIZE] GUARDED_BY(cs);\n+\n+    //! last time Good was called (memory only). Initially set to 1 so that \"never\" is strictly worse.\n+    int64_t nLastGood GUARDED_BY(cs){1};\n+\n+    //! Holds addrs inserted into tried table that collide with existing entries. Test-before-evict discipline used to resolve these collisions.\n+    std::set<int> m_tried_collisions;\n+\n+    /** Perform consistency checks every m_consistency_check_ratio operations (if non-zero). */\n+    const int32_t m_consistency_check_ratio;\n+\n+    // Compressed IP->ASN mapping, loaded from a file when a node starts.\n+    // Should be always empty if no file was provided.\n+    // This mapping is then used for bucketing nodes in Addrman.\n+    //\n+    // If asmap is provided, nodes will be bucketed by\n+    // AS they belong to, in order to make impossible for a node\n+    // to connect to several nodes hosted in a single AS.\n+    // This is done in response to Erebus attack, but also to generally\n+    // diversify the connections every node creates,\n+    // especially useful when a large fraction of nodes\n+    // operate under a couple of cloud providers.\n+    //\n+    // If a new asmap was provided, the existing records\n+    // would be re-bucketed accordingly.\n+    const std::vector<bool> m_asmap;\n+\n+    //! Find an entry.\n+    AddrInfo* Find(const CNetAddr& addr, int* pnId = nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    //! Create a new entry and add it to the internal data structures mapInfo, mapAddr and vRandom.\n+    AddrInfo* Create(const CAddress& addr, const CNetAddr& addrSource, int* pnId = nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    //! Swap two elements in vRandom.\n+    void SwapRandom(unsigned int nRandomPos1, unsigned int nRandomPos2) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    //! Move an entry from the \"new\" table(s) to the \"tried\" table\n+    void MakeTried(AddrInfo& info, int nId) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    //! Delete an entry. It must not be in tried, and have refcount 0.\n+    void Delete(int nId) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    //! Clear a position in a \"new\" table. This is the only place where entries are actually deleted.\n+    void ClearNew(int nUBucket, int nUBucketPos) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    void Good_(const CService& addr, bool test_before_evict, int64_t time) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    bool Add_(const CAddress& addr, const CNetAddr& source, int64_t nTimePenalty) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    void Attempt_(const CService& addr, bool fCountFailure, int64_t nTime) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    std::pair<CAddress, int64_t> Select_(bool newOnly) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    void ResolveCollisions_() EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    std::pair<CAddress, int64_t> SelectTriedCollision_() EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    //! Consistency check, taking into account m_consistency_check_ratio. Will std::abort if an inconsistency is detected.\n+    void Check() const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    //! Perform consistency check, regardless of m_consistency_check_ratio.\n+    //! @returns an error code or zero.\n+    int ForceCheckAddrman() const EXCLUSIVE_LOCKS_REQUIRED(cs);",
    "path": "src/addrman_impl.h",
    "position": 268,
    "original_position": 282,
    "commit_id": "021f86953e8a1dff8ecc768186368d345c865cc2",
    "original_commit_id": "bb22a365c85f76537aba61c36277fa49d68d5c9f",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "hm, but they are still internal functions? ",
    "created_at": "2021-09-24T20:51:00Z",
    "updated_at": "2021-09-24T20:51:00Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r715897043",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/715897043"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r715897043"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/715897043/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": 263,
    "original_start_line": 277,
    "start_side": "RIGHT",
    "line": 268,
    "original_line": 268,
    "side": "RIGHT",
    "in_reply_to_id": 714665818
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/715905721",
    "pull_request_review_id": 763477577,
    "id": 715905721,
    "node_id": "PRRC_kwDOABII584qq9q5",
    "diff_hunk": "@@ -101,26 +103,13 @@ double CAddrInfo::GetChance(int64_t nNow) const\n     return fChance;\n }\n \n-CAddrMan::CAddrMan(std::vector<bool> asmap, bool deterministic, int32_t consistency_check_ratio)\n-    : insecure_rand{deterministic}\n-    , nKey{deterministic ? uint256{1} : insecure_rand.rand256()}\n-    , m_consistency_check_ratio{consistency_check_ratio}\n-    , m_asmap{std::move(asmap)}\n-{\n-    for (auto& bucket : vvNew) {\n-        for (auto& entry : bucket) {\n-            entry = -1;\n-        }\n-    }\n-    for (auto& bucket : vvTried) {\n-        for (auto& entry : bucket) {\n-            entry = -1;\n-        }\n-    }\n-}\n+AddrMan::AddrMan(std::vector<bool> asmap, bool deterministic, int32_t consistency_check_ratio)",
    "path": "src/addrman.cpp",
    "position": null,
    "original_position": 97,
    "commit_id": "021f86953e8a1dff8ecc768186368d345c865cc2",
    "original_commit_id": "bb22a365c85f76537aba61c36277fa49d68d5c9f",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "done",
    "created_at": "2021-09-24T21:10:06Z",
    "updated_at": "2021-09-24T21:10:06Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r715905721",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/715905721"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r715905721"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/715905721/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 106,
    "side": "RIGHT",
    "in_reply_to_id": 714662483
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/715905837",
    "pull_request_review_id": 763477689,
    "id": 715905837,
    "node_id": "PRRC_kwDOABII584qq9st",
    "diff_hunk": "@@ -0,0 +1,291 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_ADDRMAN_IMPL_H\n+#define BITCOIN_ADDRMAN_IMPL_H\n+\n+#include <logging.h>\n+#include <netaddress.h>\n+#include <protocol.h>\n+#include <serialize.h>\n+#include <sync.h>\n+#include <uint256.h>\n+\n+#include <cstdint>\n+#include <set>\n+#include <optional>\n+#include <unordered_map>\n+#include <unordered_set>\n+#include <utility>\n+#include <vector>\n+\n+/** Total number of buckets for tried addresses */\n+static constexpr int32_t ADDRMAN_TRIED_BUCKET_COUNT_LOG2{8};\n+static constexpr int ADDRMAN_TRIED_BUCKET_COUNT{1 << ADDRMAN_TRIED_BUCKET_COUNT_LOG2};\n+/** Total number of buckets for new addresses */\n+static constexpr int32_t ADDRMAN_NEW_BUCKET_COUNT_LOG2{10};\n+static constexpr int ADDRMAN_NEW_BUCKET_COUNT{1 << ADDRMAN_NEW_BUCKET_COUNT_LOG2};\n+/** Maximum allowed number of entries in buckets for new and tried addresses */\n+static constexpr int32_t ADDRMAN_BUCKET_SIZE_LOG2{6};\n+static constexpr int ADDRMAN_BUCKET_SIZE{1 << ADDRMAN_BUCKET_SIZE_LOG2};\n+\n+/**\n+ * Extended statistics about a CAddress\n+ */\n+class AddrInfo : public CAddress\n+{\n+public:\n+    //! last try whatsoever by us (memory only)\n+    int64_t nLastTry{0};\n+\n+    //! last counted attempt (memory only)\n+    int64_t nLastCountAttempt{0};\n+\n+    //! where knowledge about this address first came from\n+    CNetAddr source;\n+\n+    //! last successful connection by us\n+    int64_t nLastSuccess{0};\n+\n+    //! connection attempts since last successful attempt\n+    int nAttempts{0};\n+\n+    //! reference count in new sets (memory only)\n+    int nRefCount{0};\n+\n+    //! in tried set? (memory only)\n+    bool fInTried{false};\n+\n+    //! position in vRandom\n+    mutable int nRandomPos{-1};\n+\n+    SERIALIZE_METHODS(AddrInfo, obj)\n+    {\n+        READWRITEAS(CAddress, obj);\n+        READWRITE(obj.source, obj.nLastSuccess, obj.nAttempts);\n+    }\n+\n+    AddrInfo(const CAddress& addrIn, const CNetAddr& addrSource) : CAddress(addrIn), source(addrSource)\n+    {\n+    }\n+\n+    AddrInfo() : CAddress(), source()\n+    {\n+    }\n+\n+    //! Calculate in which \"tried\" bucket this entry belongs\n+    int GetTriedBucket(const uint256& nKey, const std::vector<bool>& asmap) const;\n+\n+    //! Calculate in which \"new\" bucket this entry belongs, given a certain source\n+    int GetNewBucket(const uint256& nKey, const CNetAddr& src, const std::vector<bool>& asmap) const;\n+\n+    //! Calculate in which \"new\" bucket this entry belongs, using its default source\n+    int GetNewBucket(const uint256& nKey, const std::vector<bool>& asmap) const\n+    {\n+        return GetNewBucket(nKey, source, asmap);\n+    }\n+\n+    //! Calculate in which position of a bucket to store this entry.\n+    int GetBucketPosition(const uint256& nKey, bool fNew, int nBucket) const;\n+\n+    //! Determine whether the statistics about this entry are bad enough so that it can just be deleted\n+    bool IsTerrible(int64_t nNow = GetAdjustedTime()) const;\n+\n+    //! Calculate the relative chance this entry should be given when selecting nodes to connect to\n+    double GetChance(int64_t nNow = GetAdjustedTime()) const;\n+};\n+\n+class AddrManImpl\n+{\n+public:\n+    AddrManImpl(std::vector<bool>&& asmap, bool deterministic, int32_t consistency_check_ratio)",
    "path": "src/addrman_impl.h",
    "position": null,
    "original_position": 102,
    "commit_id": "021f86953e8a1dff8ecc768186368d345c865cc2",
    "original_commit_id": "bb22a365c85f76537aba61c36277fa49d68d5c9f",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "done",
    "created_at": "2021-09-24T21:10:18Z",
    "updated_at": "2021-09-24T21:10:18Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r715905837",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/715905837"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r715905837"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/715905837/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 102,
    "side": "RIGHT",
    "in_reply_to_id": 714655994
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/716097906",
    "pull_request_review_id": 763630048,
    "id": 716097906,
    "node_id": "PRRC_kwDOABII584qrsly",
    "diff_hunk": "@@ -1010,9 +1010,8 @@ CAddrInfo AddrManImpl::SelectTriedCollision_()\n     int tried_bucket = newInfo.GetTriedBucket(nKey, m_asmap);\n     int tried_bucket_pos = newInfo.GetBucketPosition(nKey, false, tried_bucket);\n \n-    int id_old = vvTried[tried_bucket][tried_bucket_pos];\n-\n-    return mapInfo[id_old];\n+    auto info_old = mapInfo[vvTried[tried_bucket][tried_bucket_pos]];",
    "path": "src/addrman.cpp",
    "position": null,
    "original_position": 73,
    "commit_id": "021f86953e8a1dff8ecc768186368d345c865cc2",
    "original_commit_id": "21481fe2fe44c56fbf5dcfed69ec382a842f43a2",
    "user": {
      "login": "mzumsande",
      "id": 48763452,
      "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mzumsande",
      "html_url": "https://github.com/mzumsande",
      "followers_url": "https://api.github.com/users/mzumsande/followers",
      "following_url": "https://api.github.com/users/mzumsande/following{/other_user}",
      "gists_url": "https://api.github.com/users/mzumsande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
      "organizations_url": "https://api.github.com/users/mzumsande/orgs",
      "repos_url": "https://api.github.com/users/mzumsande/repos",
      "events_url": "https://api.github.com/users/mzumsande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mzumsande/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: I think using `AddrInfo&` instead of `auto` would make it clearer that it gets sliced to `CAddress` in the next line.",
    "created_at": "2021-09-25T21:05:04Z",
    "updated_at": "2021-09-26T11:50:42Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r716097906",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/716097906"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r716097906"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/716097906/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1013,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/716099416",
    "pull_request_review_id": 763630048,
    "id": 716099416,
    "node_id": "PRRC_kwDOABII584qrs9Y",
    "diff_hunk": "@@ -694,15 +694,13 @@ void AddrManImpl::Attempt_(const CService& addr, bool fCountFailure, int64_t nTi\n     }\n }\n \n-CAddrInfo AddrManImpl::Select_(bool newOnly) const\n+std::pair<CAddress, int64_t> AddrManImpl::Select_(bool newOnly) const\n {\n     AssertLockHeld(cs);\n \n-    if (vRandom.empty())\n-        return CAddrInfo();\n+    if (vRandom.empty()) return {};",
    "path": "src/addrman.cpp",
    "position": 346,
    "original_position": 11,
    "commit_id": "021f86953e8a1dff8ecc768186368d345c865cc2",
    "original_commit_id": "21481fe2fe44c56fbf5dcfed69ec382a842f43a2",
    "user": {
      "login": "mzumsande",
      "id": 48763452,
      "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mzumsande",
      "html_url": "https://github.com/mzumsande",
      "followers_url": "https://api.github.com/users/mzumsande/followers",
      "following_url": "https://api.github.com/users/mzumsande/following{/other_user}",
      "gists_url": "https://api.github.com/users/mzumsande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
      "organizations_url": "https://api.github.com/users/mzumsande/orgs",
      "repos_url": "https://api.github.com/users/mzumsande/repos",
      "events_url": "https://api.github.com/users/mzumsande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mzumsande/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Since this wasn't obvious to me immediately, just noting that this works because the [default constructor](https://en.cppreference.com/w/cpp/utility/pair/pair) of `std::pair` value-initializes both elements (i.e. this returns a pair with a default-initialized `CAddress` and 0 for int64_t).",
    "created_at": "2021-09-25T21:20:13Z",
    "updated_at": "2021-09-26T11:50:42Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r716099416",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/716099416"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r716099416"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/716099416/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 702,
    "original_line": 702,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/716101195",
    "pull_request_review_id": 763630048,
    "id": 716101195,
    "node_id": "PRRC_kwDOABII584qrtZL",
    "diff_hunk": "@@ -5,6 +5,77 @@\n #ifndef BITCOIN_ADDRMAN_IMPL_H\n #define BITCOIN_ADDRMAN_IMPL_H\n \n+/**\n+ * Extended statistics about a CAddress\n+ */\n+class CAddrInfo : public CAddress\n+{\n+private:\n+    //! last try whatsoever by us (memory only)\n+    int64_t nLastTry{0};",
    "path": "src/addrman_impl.h",
    "position": 40,
    "original_position": 11,
    "commit_id": "021f86953e8a1dff8ecc768186368d345c865cc2",
    "original_commit_id": "f113b09d8ea31bc2e1cf6a5178b3d1d93a1c9bb2",
    "user": {
      "login": "mzumsande",
      "id": 48763452,
      "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mzumsande",
      "html_url": "https://github.com/mzumsande",
      "followers_url": "https://api.github.com/users/mzumsande/followers",
      "following_url": "https://api.github.com/users/mzumsande/following{/other_user}",
      "gists_url": "https://api.github.com/users/mzumsande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
      "organizations_url": "https://api.github.com/users/mzumsande/orgs",
      "repos_url": "https://api.github.com/users/mzumsande/repos",
      "events_url": "https://api.github.com/users/mzumsande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mzumsande/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "The move-only commit f113b09d8ea31bc2e1cf6a5178b3d1d93a1c9bb2 makes `nLastTry` and `nLastCountAttempt` private for one commit.",
    "created_at": "2021-09-25T21:38:58Z",
    "updated_at": "2021-09-26T11:50:42Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r716101195",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/716101195"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r716101195"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/716101195/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 40,
    "original_line": 40,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/716499594",
    "pull_request_review_id": 764020359,
    "id": 716499594,
    "node_id": "PRRC_kwDOABII584qtOqK",
    "diff_hunk": "@@ -0,0 +1,206 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_ADDRMAN_IMPL_H\n+#define BITCOIN_ADDRMAN_IMPL_H\n+\n+class AddrManImpl\n+{\n+public:\n+    AddrManImpl(std::vector<bool>&& asmap, bool deterministic, int32_t consistency_check_ratio);\n+\n+    ~AddrManImpl();\n+\n+    template <typename Stream>\n+    void Serialize(Stream& s_) const EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    template <typename Stream>\n+    void Unserialize(Stream& s_) EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    size_t size() const EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    bool Add(const std::vector<CAddress> &vAddr, const CNetAddr& source, int64_t nTimePenalty = 0)",
    "path": "src/addrman_impl.h",
    "position": null,
    "original_position": 23,
    "commit_id": "021f86953e8a1dff8ecc768186368d345c865cc2",
    "original_commit_id": "527cbd168acb776eb03e4506f186afb5e0a85d90",
    "user": {
      "login": "martinus",
      "id": 14386,
      "node_id": "MDQ6VXNlcjE0Mzg2",
      "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/martinus",
      "html_url": "https://github.com/martinus",
      "followers_url": "https://api.github.com/users/martinus/followers",
      "following_url": "https://api.github.com/users/martinus/following{/other_user}",
      "gists_url": "https://api.github.com/users/martinus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/martinus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
      "organizations_url": "https://api.github.com/users/martinus/orgs",
      "repos_url": "https://api.github.com/users/martinus/repos",
      "events_url": "https://api.github.com/users/martinus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/martinus/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: I'd remove all the default arguments in AddrManImpl, at least in the public interface. Having defaults in both `AddrMan` and `AddrManImpl` can be a source of error when not both are updated",
    "created_at": "2021-09-27T09:06:12Z",
    "updated_at": "2021-09-27T09:07:12Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r716499594",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/716499594"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r716499594"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/716499594/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 23,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/716532315",
    "pull_request_review_id": 764062920,
    "id": 716532315,
    "node_id": "PRRC_kwDOABII584qtWpb",
    "diff_hunk": "@@ -1004,16 +987,184 @@ CAddrInfo CAddrMan::SelectTriedCollision_()\n     // If id_new not found in mapInfo remove it from m_tried_collisions\n     if (mapInfo.count(id_new) != 1) {\n         m_tried_collisions.erase(it);\n-        return CAddrInfo();\n+        return {};\n     }\n \n-    const CAddrInfo& newInfo = mapInfo[id_new];\n+    const AddrInfo& newInfo = mapInfo[id_new];\n \n     // which tried bucket to move the entry to\n     int tried_bucket = newInfo.GetTriedBucket(nKey, m_asmap);\n     int tried_bucket_pos = newInfo.GetBucketPosition(nKey, false, tried_bucket);\n \n-    int id_old = vvTried[tried_bucket][tried_bucket_pos];\n+    auto info_old = mapInfo[vvTried[tried_bucket][tried_bucket_pos]];\n+    return {info_old, info_old.nLastTry};\n+}\n+\n+size_t AddrManImpl::size() const\n+{\n+    LOCK(cs); // TODO: Cache this in an atomic to avoid this overhead\n+    return vRandom.size();\n+}\n+\n+bool AddrManImpl::Add(const std::vector<CAddress>& vAddr, const CNetAddr& source, int64_t nTimePenalty)\n+{\n+    LOCK(cs);\n+    int nAdd = 0;\n+    Check();\n+    for (std::vector<CAddress>::const_iterator it = vAddr.begin(); it != vAddr.end(); it++)\n+        nAdd += Add_(*it, source, nTimePenalty) ? 1 : 0;\n+    Check();\n+    if (nAdd) {\n+        LogPrint(BCLog::ADDRMAN, \"Added %i addresses from %s: %i tried, %i new\\n\", nAdd, source.ToString(), nTried, nNew);\n+    }\n+    return nAdd > 0;\n+}\n+\n+void AddrManImpl::Good(const CService& addr, int64_t nTime)\n+{\n+    LOCK(cs);\n+    Check();\n+    Good_(addr, /* test_before_evict */ true, nTime);\n+    Check();\n+}\n+\n+void AddrManImpl::Attempt(const CService& addr, bool fCountFailure, int64_t nTime)\n+{\n+    LOCK(cs);\n+    Check();\n+    Attempt_(addr, fCountFailure, nTime);\n+    Check();\n+}\n+\n+void AddrManImpl::ResolveCollisions()\n+{\n+    LOCK(cs);\n+    Check();\n+    ResolveCollisions_();\n+    Check();\n+}\n+\n+std::pair<CAddress, int64_t> AddrManImpl::SelectTriedCollision()\n+{\n+    LOCK(cs);\n+    Check();\n+    const auto ret = SelectTriedCollision_();\n+    Check();\n+    return ret;\n+}\n+\n+std::pair<CAddress, int64_t> AddrManImpl::Select(bool newOnly) const\n+{\n+    LOCK(cs);\n+    Check();\n+    const auto addrRet = Select_(newOnly);\n+    Check();\n+    return addrRet;\n+}\n+\n+std::vector<CAddress> AddrManImpl::GetAddr(size_t max_addresses, size_t max_pct, std::optional<Network> network) const\n+{\n+    LOCK(cs);\n+    Check();\n+    const auto addresses = GetAddr_(max_addresses, max_pct, network);\n+    Check();\n+    return addresses;\n+}\n+\n+void AddrManImpl::Connected(const CService& addr, int64_t nTime)\n+{\n+    LOCK(cs);\n+    Check();\n+    Connected_(addr, nTime);\n+    Check();\n+}\n+\n+void AddrManImpl::SetServices(const CService& addr, ServiceFlags nServices)\n+{\n+    LOCK(cs);\n+    Check();\n+    SetServices_(addr, nServices);\n+    Check();\n+}\n+\n+const std::vector<bool>& AddrManImpl::GetAsmap() const\n+{\n+    return m_asmap;\n+}\n+\n+// explicit instantiation",
    "path": "src/addrman.cpp",
    "position": null,
    "original_position": 646,
    "commit_id": "021f86953e8a1dff8ecc768186368d345c865cc2",
    "original_commit_id": "bb22a365c85f76537aba61c36277fa49d68d5c9f",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I mean that these instantiations of `AddrMan::Serialize()` and `AddrMan::Unserialize()` should be below the template function definitions for `AddrMan::Serialize()` and `AddrMan::Unserialize()` (i.e. just move them down 10 lines).",
    "created_at": "2021-09-27T09:47:43Z",
    "updated_at": "2021-09-27T09:47:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r716532315",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/716532315"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r716532315"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/716532315/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1118,
    "side": "RIGHT",
    "in_reply_to_id": 714656686
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/716534699",
    "pull_request_review_id": 764065760,
    "id": 716534699,
    "node_id": "PRRC_kwDOABII584qtXOr",
    "diff_hunk": "@@ -0,0 +1,291 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_ADDRMAN_IMPL_H\n+#define BITCOIN_ADDRMAN_IMPL_H\n+\n+#include <logging.h>\n+#include <netaddress.h>\n+#include <protocol.h>\n+#include <serialize.h>\n+#include <sync.h>\n+#include <uint256.h>\n+\n+#include <cstdint>\n+#include <set>\n+#include <optional>\n+#include <unordered_map>\n+#include <unordered_set>\n+#include <utility>\n+#include <vector>\n+\n+/** Total number of buckets for tried addresses */\n+static constexpr int32_t ADDRMAN_TRIED_BUCKET_COUNT_LOG2{8};\n+static constexpr int ADDRMAN_TRIED_BUCKET_COUNT{1 << ADDRMAN_TRIED_BUCKET_COUNT_LOG2};\n+/** Total number of buckets for new addresses */\n+static constexpr int32_t ADDRMAN_NEW_BUCKET_COUNT_LOG2{10};\n+static constexpr int ADDRMAN_NEW_BUCKET_COUNT{1 << ADDRMAN_NEW_BUCKET_COUNT_LOG2};\n+/** Maximum allowed number of entries in buckets for new and tried addresses */\n+static constexpr int32_t ADDRMAN_BUCKET_SIZE_LOG2{6};\n+static constexpr int ADDRMAN_BUCKET_SIZE{1 << ADDRMAN_BUCKET_SIZE_LOG2};\n+\n+/**\n+ * Extended statistics about a CAddress\n+ */\n+class AddrInfo : public CAddress\n+{\n+public:\n+    //! last try whatsoever by us (memory only)\n+    int64_t nLastTry{0};\n+\n+    //! last counted attempt (memory only)\n+    int64_t nLastCountAttempt{0};\n+\n+    //! where knowledge about this address first came from\n+    CNetAddr source;\n+\n+    //! last successful connection by us\n+    int64_t nLastSuccess{0};\n+\n+    //! connection attempts since last successful attempt\n+    int nAttempts{0};\n+\n+    //! reference count in new sets (memory only)\n+    int nRefCount{0};\n+\n+    //! in tried set? (memory only)\n+    bool fInTried{false};\n+\n+    //! position in vRandom\n+    mutable int nRandomPos{-1};\n+\n+    SERIALIZE_METHODS(AddrInfo, obj)\n+    {\n+        READWRITEAS(CAddress, obj);\n+        READWRITE(obj.source, obj.nLastSuccess, obj.nAttempts);\n+    }\n+\n+    AddrInfo(const CAddress& addrIn, const CNetAddr& addrSource) : CAddress(addrIn), source(addrSource)\n+    {\n+    }\n+\n+    AddrInfo() : CAddress(), source()\n+    {\n+    }\n+\n+    //! Calculate in which \"tried\" bucket this entry belongs\n+    int GetTriedBucket(const uint256& nKey, const std::vector<bool>& asmap) const;\n+\n+    //! Calculate in which \"new\" bucket this entry belongs, given a certain source\n+    int GetNewBucket(const uint256& nKey, const CNetAddr& src, const std::vector<bool>& asmap) const;\n+\n+    //! Calculate in which \"new\" bucket this entry belongs, using its default source\n+    int GetNewBucket(const uint256& nKey, const std::vector<bool>& asmap) const\n+    {\n+        return GetNewBucket(nKey, source, asmap);\n+    }\n+\n+    //! Calculate in which position of a bucket to store this entry.\n+    int GetBucketPosition(const uint256& nKey, bool fNew, int nBucket) const;\n+\n+    //! Determine whether the statistics about this entry are bad enough so that it can just be deleted\n+    bool IsTerrible(int64_t nNow = GetAdjustedTime()) const;\n+\n+    //! Calculate the relative chance this entry should be given when selecting nodes to connect to\n+    double GetChance(int64_t nNow = GetAdjustedTime()) const;\n+};\n+\n+class AddrManImpl\n+{\n+public:\n+    AddrManImpl(std::vector<bool>&& asmap, bool deterministic, int32_t consistency_check_ratio)\n+        : insecure_rand{deterministic}\n+        , nKey{deterministic ? uint256{1} : insecure_rand.rand256()}\n+        , m_consistency_check_ratio{consistency_check_ratio}\n+        , m_asmap{std::move(asmap)}\n+    {\n+        for (auto& bucket : vvNew) {\n+            for (auto& entry : bucket) {\n+                entry = -1;\n+            }\n+        }\n+        for (auto& bucket : vvTried) {\n+            for (auto& entry : bucket) {\n+                entry = -1;\n+            }\n+        }\n+    }\n+\n+    ~AddrManImpl()\n+    {\n+        nKey.SetNull();\n+    }\n+\n+\n+    template <typename Stream>\n+    void Serialize(Stream& s_) const EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    template <typename Stream>\n+    void Unserialize(Stream& s_) EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    size_t size() const EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    bool Add(const std::vector<CAddress>& vAddr, const CNetAddr& source, int64_t nTimePenalty = 0)\n+        EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    void Good(const CService& addr, int64_t nTime = GetAdjustedTime())\n+        EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    void Attempt(const CService& addr, bool fCountFailure, int64_t nTime = GetAdjustedTime())\n+        EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    void ResolveCollisions() EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    std::pair<CAddress, int64_t> SelectTriedCollision() EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    std::pair<CAddress, int64_t> Select(bool newOnly = false) const\n+        EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    std::vector<CAddress> GetAddr(size_t max_addresses, size_t max_pct, std::optional<Network> network) const\n+        EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    void Connected(const CService& addr, int64_t nTime = GetAdjustedTime())\n+        EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    void SetServices(const CService& addr, ServiceFlags nServices)\n+        EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    const std::vector<bool>& GetAsmap() const;\n+\n+    friend class AddrManTest;\n+    friend class AddrManDeterministic;\n+\n+private:\n+    //! A mutex to protect the inner data structures.\n+    mutable Mutex cs;\n+\n+    //! Source of random numbers for randomization in inner loops\n+    mutable FastRandomContext insecure_rand GUARDED_BY(cs);\n+\n+    //! secret key to randomize bucket select with\n+    uint256 nKey;\n+\n+    //! Serialization versions.\n+    enum Format : uint8_t {\n+        V0_HISTORICAL = 0,    //!< historic format, before commit e6b343d88\n+        V1_DETERMINISTIC = 1, //!< for pre-asmap files\n+        V2_ASMAP = 2,         //!< for files including asmap version\n+        V3_BIP155 = 3,        //!< same as V2_ASMAP plus addresses are in BIP155 format\n+    };\n+\n+    //! The maximum format this software knows it can unserialize. Also, we always serialize\n+    //! in this format.\n+    //! The format (first byte in the serialized stream) can be higher than this and\n+    //! still this software may be able to unserialize the file - if the second byte\n+    //! (see `lowest_compatible` in `Unserialize()`) is less or equal to this.\n+    static constexpr Format FILE_FORMAT = Format::V3_BIP155;\n+\n+    //! The initial value of a field that is incremented every time an incompatible format\n+    //! change is made (such that old software versions would not be able to parse and\n+    //! understand the new file format). This is 32 because we overtook the \"key size\"\n+    //! field which was 32 historically.\n+    //! @note Don't increment this. Increment `lowest_compatible` in `Serialize()` instead.\n+    static constexpr uint8_t INCOMPATIBILITY_BASE = 32;\n+\n+    //! last used nId\n+    int nIdCount GUARDED_BY(cs){0};\n+\n+    //! table with information about all nIds\n+    std::unordered_map<int, AddrInfo> mapInfo GUARDED_BY(cs);\n+\n+    //! find an nId based on its network address\n+    std::unordered_map<CNetAddr, int, CNetAddrHash> mapAddr GUARDED_BY(cs);\n+\n+    //! randomly-ordered vector of all nIds\n+    //! This is mutable because it is unobservable outside the class, so any\n+    //! changes to it (even in const methods) are also unobservable.\n+    mutable std::vector<int> vRandom GUARDED_BY(cs);\n+\n+    // number of \"tried\" entries\n+    int nTried GUARDED_BY(cs){0};\n+\n+    //! list of \"tried\" buckets\n+    int vvTried[ADDRMAN_TRIED_BUCKET_COUNT][ADDRMAN_BUCKET_SIZE] GUARDED_BY(cs);\n+\n+    //! number of (unique) \"new\" entries\n+    int nNew GUARDED_BY(cs){0};\n+\n+    //! list of \"new\" buckets\n+    int vvNew[ADDRMAN_NEW_BUCKET_COUNT][ADDRMAN_BUCKET_SIZE] GUARDED_BY(cs);\n+\n+    //! last time Good was called (memory only). Initially set to 1 so that \"never\" is strictly worse.\n+    int64_t nLastGood GUARDED_BY(cs){1};\n+\n+    //! Holds addrs inserted into tried table that collide with existing entries. Test-before-evict discipline used to resolve these collisions.\n+    std::set<int> m_tried_collisions;\n+\n+    /** Perform consistency checks every m_consistency_check_ratio operations (if non-zero). */\n+    const int32_t m_consistency_check_ratio;\n+\n+    // Compressed IP->ASN mapping, loaded from a file when a node starts.\n+    // Should be always empty if no file was provided.\n+    // This mapping is then used for bucketing nodes in Addrman.\n+    //\n+    // If asmap is provided, nodes will be bucketed by\n+    // AS they belong to, in order to make impossible for a node\n+    // to connect to several nodes hosted in a single AS.\n+    // This is done in response to Erebus attack, but also to generally\n+    // diversify the connections every node creates,\n+    // especially useful when a large fraction of nodes\n+    // operate under a couple of cloud providers.\n+    //\n+    // If a new asmap was provided, the existing records\n+    // would be re-bucketed accordingly.\n+    const std::vector<bool> m_asmap;\n+\n+    //! Find an entry.\n+    AddrInfo* Find(const CNetAddr& addr, int* pnId = nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    //! Create a new entry and add it to the internal data structures mapInfo, mapAddr and vRandom.\n+    AddrInfo* Create(const CAddress& addr, const CNetAddr& addrSource, int* pnId = nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    //! Swap two elements in vRandom.\n+    void SwapRandom(unsigned int nRandomPos1, unsigned int nRandomPos2) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    //! Move an entry from the \"new\" table(s) to the \"tried\" table\n+    void MakeTried(AddrInfo& info, int nId) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    //! Delete an entry. It must not be in tried, and have refcount 0.\n+    void Delete(int nId) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    //! Clear a position in a \"new\" table. This is the only place where entries are actually deleted.\n+    void ClearNew(int nUBucket, int nUBucketPos) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    void Good_(const CService& addr, bool test_before_evict, int64_t time) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    bool Add_(const CAddress& addr, const CNetAddr& source, int64_t nTimePenalty) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    void Attempt_(const CService& addr, bool fCountFailure, int64_t nTime) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    std::pair<CAddress, int64_t> Select_(bool newOnly) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    void ResolveCollisions_() EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    std::pair<CAddress, int64_t> SelectTriedCollision_() EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    //! Consistency check, taking into account m_consistency_check_ratio. Will std::abort if an inconsistency is detected.\n+    void Check() const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    //! Perform consistency check, regardless of m_consistency_check_ratio.\n+    //! @returns an error code or zero.\n+    int ForceCheckAddrman() const EXCLUSIVE_LOCKS_REQUIRED(cs);",
    "path": "src/addrman_impl.h",
    "position": 268,
    "original_position": 282,
    "commit_id": "021f86953e8a1dff8ecc768186368d345c865cc2",
    "original_commit_id": "bb22a365c85f76537aba61c36277fa49d68d5c9f",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "By \"internal functions\", I mean private functions that are called by the public \"outer functions\". There's a pattern that the public `Good()` function calls private `Good_()`, public `Add()` calls private `Add_()`, etc. It makes sense to group all of the `FunctionName_()` functions together.",
    "created_at": "2021-09-27T09:50:31Z",
    "updated_at": "2021-09-27T09:50:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r716534699",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/716534699"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r716534699"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/716534699/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": 263,
    "original_start_line": 277,
    "start_side": "RIGHT",
    "line": 268,
    "original_line": 268,
    "side": "RIGHT",
    "in_reply_to_id": 714665818
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/717088501",
    "pull_request_review_id": 764763599,
    "id": 717088501,
    "node_id": "PRRC_kwDOABII584qveb1",
    "diff_hunk": "@@ -1080,10 +1083,9 @@ std::vector<CAddress> AddrManImpl::GetAddr(size_t max_addresses, size_t max_pct,\n {\n     LOCK(cs);\n     Check();\n-    std::vector<CAddress> vAddr;\n-    GetAddr_(vAddr, max_addresses, max_pct, network);\n+    const auto addresses = GetAddr_(max_addresses, max_pct, network);",
    "path": "src/addrman.cpp",
    "position": 792,
    "original_position": 38,
    "commit_id": "021f86953e8a1dff8ecc768186368d345c865cc2",
    "original_commit_id": "29252f3f60e22030e6f3f798df2e38c12d2314f4",
    "user": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "~Nit: If the compiler doesn't elide this, the const will force an extra copy: https://stackoverflow.com/questions/25784544/will-returning-a-const-object-from-a-function-prevent-move-construction-from-out/25786015~\r\n\r\nEdit: TIL. Looks like this is \"permitted\" to be elided according to the [c++17 final working draft](http://open-std.org/jtc1/sc22/wg21/docs/papers/2017/n4659.pdf): (emphasis mine)\r\n\r\n> This elision of copy/move operations, called copy elision, is **permitted** in the following circumstances (which may be combined to eliminate multiple copies):\r\n> - (1.1) in a return statement in a function with a class return type, when the expression is the name of a non-volatile automatic object (other than a function parameter or a variable introduced by the exception-declaration of a handler (18.3)) with the same type (**ignoring cv-qualification**) as the function return type, the copy/move operation can be omitted by constructing the automatic object directly into the function call\u2019s return object\r\n\r\nBut \"required\" [according to cppreference](https://en.cppreference.com/w/cpp/language/copy_elision):\r\n\r\n> Under the following circumstances, the compilers are **required** to omit the copy and move construction of class objects, even if the copy/move constructor and the destructor have observable side-effects. The objects are constructed directly into the storage where they would otherwise be copied/moved to. The copy/move constructors need not be present or accessible:\r\n> \r\n> - In a return statement, when the operand is a prvalue of the same class type (**_ignoring cv-qualification_**) as the function return type\r\n\r\nSo.. \ud83e\udd37\r\n\r\nMaybe that draft wasn't final wrt elision or maybe cppreference is wrong. It really doesn't matter either way :)",
    "created_at": "2021-09-27T22:26:28Z",
    "updated_at": "2021-09-28T00:07:21Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r717088501",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/717088501"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r717088501"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/717088501/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1087,
    "original_line": 1087,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/718108877",
    "pull_request_review_id": 766149763,
    "id": 718108877,
    "node_id": "PRRC_kwDOABII584qzXjN",
    "diff_hunk": "@@ -1004,16 +987,184 @@ CAddrInfo CAddrMan::SelectTriedCollision_()\n     // If id_new not found in mapInfo remove it from m_tried_collisions\n     if (mapInfo.count(id_new) != 1) {\n         m_tried_collisions.erase(it);\n-        return CAddrInfo();\n+        return {};\n     }\n \n-    const CAddrInfo& newInfo = mapInfo[id_new];\n+    const AddrInfo& newInfo = mapInfo[id_new];\n \n     // which tried bucket to move the entry to\n     int tried_bucket = newInfo.GetTriedBucket(nKey, m_asmap);\n     int tried_bucket_pos = newInfo.GetBucketPosition(nKey, false, tried_bucket);\n \n-    int id_old = vvTried[tried_bucket][tried_bucket_pos];\n+    auto info_old = mapInfo[vvTried[tried_bucket][tried_bucket_pos]];\n+    return {info_old, info_old.nLastTry};\n+}\n+\n+size_t AddrManImpl::size() const\n+{\n+    LOCK(cs); // TODO: Cache this in an atomic to avoid this overhead\n+    return vRandom.size();\n+}\n+\n+bool AddrManImpl::Add(const std::vector<CAddress>& vAddr, const CNetAddr& source, int64_t nTimePenalty)\n+{\n+    LOCK(cs);\n+    int nAdd = 0;\n+    Check();\n+    for (std::vector<CAddress>::const_iterator it = vAddr.begin(); it != vAddr.end(); it++)\n+        nAdd += Add_(*it, source, nTimePenalty) ? 1 : 0;\n+    Check();\n+    if (nAdd) {\n+        LogPrint(BCLog::ADDRMAN, \"Added %i addresses from %s: %i tried, %i new\\n\", nAdd, source.ToString(), nTried, nNew);\n+    }\n+    return nAdd > 0;\n+}\n+\n+void AddrManImpl::Good(const CService& addr, int64_t nTime)\n+{\n+    LOCK(cs);\n+    Check();\n+    Good_(addr, /* test_before_evict */ true, nTime);\n+    Check();\n+}\n+\n+void AddrManImpl::Attempt(const CService& addr, bool fCountFailure, int64_t nTime)\n+{\n+    LOCK(cs);\n+    Check();\n+    Attempt_(addr, fCountFailure, nTime);\n+    Check();\n+}\n+\n+void AddrManImpl::ResolveCollisions()\n+{\n+    LOCK(cs);\n+    Check();\n+    ResolveCollisions_();\n+    Check();\n+}\n+\n+std::pair<CAddress, int64_t> AddrManImpl::SelectTriedCollision()\n+{\n+    LOCK(cs);\n+    Check();\n+    const auto ret = SelectTriedCollision_();\n+    Check();\n+    return ret;\n+}\n+\n+std::pair<CAddress, int64_t> AddrManImpl::Select(bool newOnly) const\n+{\n+    LOCK(cs);\n+    Check();\n+    const auto addrRet = Select_(newOnly);\n+    Check();\n+    return addrRet;\n+}\n+\n+std::vector<CAddress> AddrManImpl::GetAddr(size_t max_addresses, size_t max_pct, std::optional<Network> network) const\n+{\n+    LOCK(cs);\n+    Check();\n+    const auto addresses = GetAddr_(max_addresses, max_pct, network);\n+    Check();\n+    return addresses;\n+}\n+\n+void AddrManImpl::Connected(const CService& addr, int64_t nTime)\n+{\n+    LOCK(cs);\n+    Check();\n+    Connected_(addr, nTime);\n+    Check();\n+}\n+\n+void AddrManImpl::SetServices(const CService& addr, ServiceFlags nServices)\n+{\n+    LOCK(cs);\n+    Check();\n+    SetServices_(addr, nServices);\n+    Check();\n+}\n+\n+const std::vector<bool>& AddrManImpl::GetAsmap() const\n+{\n+    return m_asmap;\n+}\n+\n+// explicit instantiation",
    "path": "src/addrman.cpp",
    "position": null,
    "original_position": 646,
    "commit_id": "021f86953e8a1dff8ecc768186368d345c865cc2",
    "original_commit_id": "bb22a365c85f76537aba61c36277fa49d68d5c9f",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "ahhhh, that makes more sense. done",
    "created_at": "2021-09-29T02:40:07Z",
    "updated_at": "2021-09-29T02:40:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r718108877",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/718108877"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r718108877"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/718108877/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1118,
    "side": "RIGHT",
    "in_reply_to_id": 714656686
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/718109877",
    "pull_request_review_id": 766150874,
    "id": 718109877,
    "node_id": "PRRC_kwDOABII584qzXy1",
    "diff_hunk": "@@ -0,0 +1,291 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_ADDRMAN_IMPL_H\n+#define BITCOIN_ADDRMAN_IMPL_H\n+\n+#include <logging.h>\n+#include <netaddress.h>\n+#include <protocol.h>\n+#include <serialize.h>\n+#include <sync.h>\n+#include <uint256.h>\n+\n+#include <cstdint>\n+#include <set>\n+#include <optional>\n+#include <unordered_map>\n+#include <unordered_set>\n+#include <utility>\n+#include <vector>\n+\n+/** Total number of buckets for tried addresses */\n+static constexpr int32_t ADDRMAN_TRIED_BUCKET_COUNT_LOG2{8};\n+static constexpr int ADDRMAN_TRIED_BUCKET_COUNT{1 << ADDRMAN_TRIED_BUCKET_COUNT_LOG2};\n+/** Total number of buckets for new addresses */\n+static constexpr int32_t ADDRMAN_NEW_BUCKET_COUNT_LOG2{10};\n+static constexpr int ADDRMAN_NEW_BUCKET_COUNT{1 << ADDRMAN_NEW_BUCKET_COUNT_LOG2};\n+/** Maximum allowed number of entries in buckets for new and tried addresses */\n+static constexpr int32_t ADDRMAN_BUCKET_SIZE_LOG2{6};\n+static constexpr int ADDRMAN_BUCKET_SIZE{1 << ADDRMAN_BUCKET_SIZE_LOG2};\n+\n+/**\n+ * Extended statistics about a CAddress\n+ */\n+class AddrInfo : public CAddress\n+{\n+public:\n+    //! last try whatsoever by us (memory only)\n+    int64_t nLastTry{0};\n+\n+    //! last counted attempt (memory only)\n+    int64_t nLastCountAttempt{0};\n+\n+    //! where knowledge about this address first came from\n+    CNetAddr source;\n+\n+    //! last successful connection by us\n+    int64_t nLastSuccess{0};\n+\n+    //! connection attempts since last successful attempt\n+    int nAttempts{0};\n+\n+    //! reference count in new sets (memory only)\n+    int nRefCount{0};\n+\n+    //! in tried set? (memory only)\n+    bool fInTried{false};\n+\n+    //! position in vRandom\n+    mutable int nRandomPos{-1};\n+\n+    SERIALIZE_METHODS(AddrInfo, obj)\n+    {\n+        READWRITEAS(CAddress, obj);\n+        READWRITE(obj.source, obj.nLastSuccess, obj.nAttempts);\n+    }\n+\n+    AddrInfo(const CAddress& addrIn, const CNetAddr& addrSource) : CAddress(addrIn), source(addrSource)\n+    {\n+    }\n+\n+    AddrInfo() : CAddress(), source()\n+    {\n+    }\n+\n+    //! Calculate in which \"tried\" bucket this entry belongs\n+    int GetTriedBucket(const uint256& nKey, const std::vector<bool>& asmap) const;\n+\n+    //! Calculate in which \"new\" bucket this entry belongs, given a certain source\n+    int GetNewBucket(const uint256& nKey, const CNetAddr& src, const std::vector<bool>& asmap) const;\n+\n+    //! Calculate in which \"new\" bucket this entry belongs, using its default source\n+    int GetNewBucket(const uint256& nKey, const std::vector<bool>& asmap) const\n+    {\n+        return GetNewBucket(nKey, source, asmap);\n+    }\n+\n+    //! Calculate in which position of a bucket to store this entry.\n+    int GetBucketPosition(const uint256& nKey, bool fNew, int nBucket) const;\n+\n+    //! Determine whether the statistics about this entry are bad enough so that it can just be deleted\n+    bool IsTerrible(int64_t nNow = GetAdjustedTime()) const;\n+\n+    //! Calculate the relative chance this entry should be given when selecting nodes to connect to\n+    double GetChance(int64_t nNow = GetAdjustedTime()) const;\n+};\n+\n+class AddrManImpl\n+{\n+public:\n+    AddrManImpl(std::vector<bool>&& asmap, bool deterministic, int32_t consistency_check_ratio)\n+        : insecure_rand{deterministic}\n+        , nKey{deterministic ? uint256{1} : insecure_rand.rand256()}\n+        , m_consistency_check_ratio{consistency_check_ratio}\n+        , m_asmap{std::move(asmap)}\n+    {\n+        for (auto& bucket : vvNew) {\n+            for (auto& entry : bucket) {\n+                entry = -1;\n+            }\n+        }\n+        for (auto& bucket : vvTried) {\n+            for (auto& entry : bucket) {\n+                entry = -1;\n+            }\n+        }\n+    }\n+\n+    ~AddrManImpl()\n+    {\n+        nKey.SetNull();\n+    }\n+\n+\n+    template <typename Stream>\n+    void Serialize(Stream& s_) const EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    template <typename Stream>\n+    void Unserialize(Stream& s_) EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    size_t size() const EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    bool Add(const std::vector<CAddress>& vAddr, const CNetAddr& source, int64_t nTimePenalty = 0)\n+        EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    void Good(const CService& addr, int64_t nTime = GetAdjustedTime())\n+        EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    void Attempt(const CService& addr, bool fCountFailure, int64_t nTime = GetAdjustedTime())\n+        EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    void ResolveCollisions() EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    std::pair<CAddress, int64_t> SelectTriedCollision() EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    std::pair<CAddress, int64_t> Select(bool newOnly = false) const\n+        EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    std::vector<CAddress> GetAddr(size_t max_addresses, size_t max_pct, std::optional<Network> network) const\n+        EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    void Connected(const CService& addr, int64_t nTime = GetAdjustedTime())\n+        EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    void SetServices(const CService& addr, ServiceFlags nServices)\n+        EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    const std::vector<bool>& GetAsmap() const;\n+\n+    friend class AddrManTest;\n+    friend class AddrManDeterministic;\n+\n+private:\n+    //! A mutex to protect the inner data structures.\n+    mutable Mutex cs;\n+\n+    //! Source of random numbers for randomization in inner loops\n+    mutable FastRandomContext insecure_rand GUARDED_BY(cs);\n+\n+    //! secret key to randomize bucket select with\n+    uint256 nKey;\n+\n+    //! Serialization versions.\n+    enum Format : uint8_t {\n+        V0_HISTORICAL = 0,    //!< historic format, before commit e6b343d88\n+        V1_DETERMINISTIC = 1, //!< for pre-asmap files\n+        V2_ASMAP = 2,         //!< for files including asmap version\n+        V3_BIP155 = 3,        //!< same as V2_ASMAP plus addresses are in BIP155 format\n+    };\n+\n+    //! The maximum format this software knows it can unserialize. Also, we always serialize\n+    //! in this format.\n+    //! The format (first byte in the serialized stream) can be higher than this and\n+    //! still this software may be able to unserialize the file - if the second byte\n+    //! (see `lowest_compatible` in `Unserialize()`) is less or equal to this.\n+    static constexpr Format FILE_FORMAT = Format::V3_BIP155;\n+\n+    //! The initial value of a field that is incremented every time an incompatible format\n+    //! change is made (such that old software versions would not be able to parse and\n+    //! understand the new file format). This is 32 because we overtook the \"key size\"\n+    //! field which was 32 historically.\n+    //! @note Don't increment this. Increment `lowest_compatible` in `Serialize()` instead.\n+    static constexpr uint8_t INCOMPATIBILITY_BASE = 32;\n+\n+    //! last used nId\n+    int nIdCount GUARDED_BY(cs){0};\n+\n+    //! table with information about all nIds\n+    std::unordered_map<int, AddrInfo> mapInfo GUARDED_BY(cs);\n+\n+    //! find an nId based on its network address\n+    std::unordered_map<CNetAddr, int, CNetAddrHash> mapAddr GUARDED_BY(cs);\n+\n+    //! randomly-ordered vector of all nIds\n+    //! This is mutable because it is unobservable outside the class, so any\n+    //! changes to it (even in const methods) are also unobservable.\n+    mutable std::vector<int> vRandom GUARDED_BY(cs);\n+\n+    // number of \"tried\" entries\n+    int nTried GUARDED_BY(cs){0};\n+\n+    //! list of \"tried\" buckets\n+    int vvTried[ADDRMAN_TRIED_BUCKET_COUNT][ADDRMAN_BUCKET_SIZE] GUARDED_BY(cs);\n+\n+    //! number of (unique) \"new\" entries\n+    int nNew GUARDED_BY(cs){0};\n+\n+    //! list of \"new\" buckets\n+    int vvNew[ADDRMAN_NEW_BUCKET_COUNT][ADDRMAN_BUCKET_SIZE] GUARDED_BY(cs);\n+\n+    //! last time Good was called (memory only). Initially set to 1 so that \"never\" is strictly worse.\n+    int64_t nLastGood GUARDED_BY(cs){1};\n+\n+    //! Holds addrs inserted into tried table that collide with existing entries. Test-before-evict discipline used to resolve these collisions.\n+    std::set<int> m_tried_collisions;\n+\n+    /** Perform consistency checks every m_consistency_check_ratio operations (if non-zero). */\n+    const int32_t m_consistency_check_ratio;\n+\n+    // Compressed IP->ASN mapping, loaded from a file when a node starts.\n+    // Should be always empty if no file was provided.\n+    // This mapping is then used for bucketing nodes in Addrman.\n+    //\n+    // If asmap is provided, nodes will be bucketed by\n+    // AS they belong to, in order to make impossible for a node\n+    // to connect to several nodes hosted in a single AS.\n+    // This is done in response to Erebus attack, but also to generally\n+    // diversify the connections every node creates,\n+    // especially useful when a large fraction of nodes\n+    // operate under a couple of cloud providers.\n+    //\n+    // If a new asmap was provided, the existing records\n+    // would be re-bucketed accordingly.\n+    const std::vector<bool> m_asmap;\n+\n+    //! Find an entry.\n+    AddrInfo* Find(const CNetAddr& addr, int* pnId = nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    //! Create a new entry and add it to the internal data structures mapInfo, mapAddr and vRandom.\n+    AddrInfo* Create(const CAddress& addr, const CNetAddr& addrSource, int* pnId = nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    //! Swap two elements in vRandom.\n+    void SwapRandom(unsigned int nRandomPos1, unsigned int nRandomPos2) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    //! Move an entry from the \"new\" table(s) to the \"tried\" table\n+    void MakeTried(AddrInfo& info, int nId) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    //! Delete an entry. It must not be in tried, and have refcount 0.\n+    void Delete(int nId) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    //! Clear a position in a \"new\" table. This is the only place where entries are actually deleted.\n+    void ClearNew(int nUBucket, int nUBucketPos) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    void Good_(const CService& addr, bool test_before_evict, int64_t time) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    bool Add_(const CAddress& addr, const CNetAddr& source, int64_t nTimePenalty) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    void Attempt_(const CService& addr, bool fCountFailure, int64_t nTime) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    std::pair<CAddress, int64_t> Select_(bool newOnly) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    void ResolveCollisions_() EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    std::pair<CAddress, int64_t> SelectTriedCollision_() EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    //! Consistency check, taking into account m_consistency_check_ratio. Will std::abort if an inconsistency is detected.\n+    void Check() const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    //! Perform consistency check, regardless of m_consistency_check_ratio.\n+    //! @returns an error code or zero.\n+    int ForceCheckAddrman() const EXCLUSIVE_LOCKS_REQUIRED(cs);",
    "path": "src/addrman_impl.h",
    "position": 268,
    "original_position": 282,
    "commit_id": "021f86953e8a1dff8ecc768186368d345c865cc2",
    "original_commit_id": "bb22a365c85f76537aba61c36277fa49d68d5c9f",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "okay, I introduced this new commit: https://github.com/bitcoin/bitcoin/pull/22950. I moved `Check` and `ForceCheck` to be after all the `Function_`. And I moved some additional stuff around to be consistently ordered in declarations & definitions.",
    "created_at": "2021-09-29T02:42:52Z",
    "updated_at": "2021-09-29T02:42:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r718109877",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/718109877"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r718109877"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/718109877/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": 263,
    "original_start_line": 277,
    "start_side": "RIGHT",
    "line": 268,
    "original_line": 268,
    "side": "RIGHT",
    "in_reply_to_id": 714665818
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/718110336",
    "pull_request_review_id": 766151454,
    "id": 718110336,
    "node_id": "PRRC_kwDOABII584qzX6A",
    "diff_hunk": "@@ -1010,9 +1010,8 @@ CAddrInfo AddrManImpl::SelectTriedCollision_()\n     int tried_bucket = newInfo.GetTriedBucket(nKey, m_asmap);\n     int tried_bucket_pos = newInfo.GetBucketPosition(nKey, false, tried_bucket);\n \n-    int id_old = vvTried[tried_bucket][tried_bucket_pos];\n-\n-    return mapInfo[id_old];\n+    auto info_old = mapInfo[vvTried[tried_bucket][tried_bucket_pos]];",
    "path": "src/addrman.cpp",
    "position": null,
    "original_position": 73,
    "commit_id": "021f86953e8a1dff8ecc768186368d345c865cc2",
    "original_commit_id": "21481fe2fe44c56fbf5dcfed69ec382a842f43a2",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "makes sense, done",
    "created_at": "2021-09-29T02:44:16Z",
    "updated_at": "2021-09-29T02:44:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r718110336",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/718110336"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r718110336"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/718110336/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1013,
    "side": "RIGHT",
    "in_reply_to_id": 716097906
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/718110459",
    "pull_request_review_id": 766151626,
    "id": 718110459,
    "node_id": "PRRC_kwDOABII584qzX77",
    "diff_hunk": "@@ -694,15 +694,13 @@ void AddrManImpl::Attempt_(const CService& addr, bool fCountFailure, int64_t nTi\n     }\n }\n \n-CAddrInfo AddrManImpl::Select_(bool newOnly) const\n+std::pair<CAddress, int64_t> AddrManImpl::Select_(bool newOnly) const\n {\n     AssertLockHeld(cs);\n \n-    if (vRandom.empty())\n-        return CAddrInfo();\n+    if (vRandom.empty()) return {};",
    "path": "src/addrman.cpp",
    "position": 346,
    "original_position": 11,
    "commit_id": "021f86953e8a1dff8ecc768186368d345c865cc2",
    "original_commit_id": "21481fe2fe44c56fbf5dcfed69ec382a842f43a2",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "great point, thanks for verifying & sharing!",
    "created_at": "2021-09-29T02:44:41Z",
    "updated_at": "2021-09-29T02:44:41Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r718110459",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/718110459"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r718110459"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/718110459/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 702,
    "original_line": 702,
    "side": "RIGHT",
    "in_reply_to_id": 716099416
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/718110618",
    "pull_request_review_id": 766151780,
    "id": 718110618,
    "node_id": "PRRC_kwDOABII584qzX-a",
    "diff_hunk": "@@ -5,6 +5,77 @@\n #ifndef BITCOIN_ADDRMAN_IMPL_H\n #define BITCOIN_ADDRMAN_IMPL_H\n \n+/**\n+ * Extended statistics about a CAddress\n+ */\n+class CAddrInfo : public CAddress\n+{\n+private:\n+    //! last try whatsoever by us (memory only)\n+    int64_t nLastTry{0};",
    "path": "src/addrman_impl.h",
    "position": 40,
    "original_position": 11,
    "commit_id": "021f86953e8a1dff8ecc768186368d345c865cc2",
    "original_commit_id": "f113b09d8ea31bc2e1cf6a5178b3d1d93a1c9bb2",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "fixed it",
    "created_at": "2021-09-29T02:45:04Z",
    "updated_at": "2021-09-29T02:45:05Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r718110618",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/718110618"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r718110618"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/718110618/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 40,
    "original_line": 40,
    "side": "RIGHT",
    "in_reply_to_id": 716101195
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/718111106",
    "pull_request_review_id": 766152988,
    "id": 718111106,
    "node_id": "PRRC_kwDOABII584qzYGC",
    "diff_hunk": "@@ -0,0 +1,206 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_ADDRMAN_IMPL_H\n+#define BITCOIN_ADDRMAN_IMPL_H\n+\n+class AddrManImpl\n+{\n+public:\n+    AddrManImpl(std::vector<bool>&& asmap, bool deterministic, int32_t consistency_check_ratio);\n+\n+    ~AddrManImpl();\n+\n+    template <typename Stream>\n+    void Serialize(Stream& s_) const EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    template <typename Stream>\n+    void Unserialize(Stream& s_) EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    size_t size() const EXCLUSIVE_LOCKS_REQUIRED(!cs);\n+\n+    bool Add(const std::vector<CAddress> &vAddr, const CNetAddr& source, int64_t nTimePenalty = 0)",
    "path": "src/addrman_impl.h",
    "position": null,
    "original_position": 23,
    "commit_id": "021f86953e8a1dff8ecc768186368d345c865cc2",
    "original_commit_id": "527cbd168acb776eb03e4506f186afb5e0a85d90",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "definitely agree with this feedback! disagree with classifying it as a nit :)\r\n\r\nI believe I removed all the defaults from the public interface, but I left them on the private functions because they aren't redundant in that situation.\r\n\r\nthank you!",
    "created_at": "2021-09-29T02:46:21Z",
    "updated_at": "2021-09-29T02:46:33Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r718111106",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/718111106"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r718111106"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/718111106/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 23,
    "side": "RIGHT",
    "in_reply_to_id": 716499594
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/718112615",
    "pull_request_review_id": 766154658,
    "id": 718112615,
    "node_id": "PRRC_kwDOABII584qzYdn",
    "diff_hunk": "@@ -1080,10 +1083,9 @@ std::vector<CAddress> AddrManImpl::GetAddr(size_t max_addresses, size_t max_pct,\n {\n     LOCK(cs);\n     Check();\n-    std::vector<CAddress> vAddr;\n-    GetAddr_(vAddr, max_addresses, max_pct, network);\n+    const auto addresses = GetAddr_(max_addresses, max_pct, network);",
    "path": "src/addrman.cpp",
    "position": 792,
    "original_position": 38,
    "commit_id": "021f86953e8a1dff8ecc768186368d345c865cc2",
    "original_commit_id": "29252f3f60e22030e6f3f798df2e38c12d2314f4",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "that's so interesting, I hadn't thought about the correlation between copy elision and temporary const variables. thanks for digging in! \r\n\r\nnext question is how I get my hands on the spec..",
    "created_at": "2021-09-29T02:50:26Z",
    "updated_at": "2021-09-29T02:50:27Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r718112615",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/718112615"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r718112615"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/718112615/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1087,
    "original_line": 1087,
    "side": "RIGHT",
    "in_reply_to_id": 717088501
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/718120827",
    "pull_request_review_id": 766164370,
    "id": 718120827,
    "node_id": "PRRC_kwDOABII584qzad7",
    "diff_hunk": "@@ -1080,10 +1083,9 @@ std::vector<CAddress> AddrManImpl::GetAddr(size_t max_addresses, size_t max_pct,\n {\n     LOCK(cs);\n     Check();\n-    std::vector<CAddress> vAddr;\n-    GetAddr_(vAddr, max_addresses, max_pct, network);\n+    const auto addresses = GetAddr_(max_addresses, max_pct, network);",
    "path": "src/addrman.cpp",
    "position": 792,
    "original_position": 38,
    "commit_id": "021f86953e8a1dff8ecc768186368d345c865cc2",
    "original_commit_id": "29252f3f60e22030e6f3f798df2e38c12d2314f4",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "It certainly looks like in practice the const doesn't prevent elision: https://godbolt.org/z/Go8xhGP1b",
    "created_at": "2021-09-29T03:15:18Z",
    "updated_at": "2021-09-29T03:15:18Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r718120827",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/718120827"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r718120827"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/718120827/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1087,
    "original_line": 1087,
    "side": "RIGHT",
    "in_reply_to_id": 717088501
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/718513693",
    "pull_request_review_id": 766684894,
    "id": 718513693,
    "node_id": "PRRC_kwDOABII584q06Yd",
    "diff_hunk": "@@ -797,7 +797,7 @@ class CConnman\n         m_onion_binds = connOptions.onion_binds;\n     }\n \n-    CConnman(uint64_t seed0, uint64_t seed1, CAddrMan& addrman, bool network_active = true);\n+    CConnman(uint64_t seed0, uint64_t seed1, AddrMan& addrman, bool network_active = true);",
    "path": "src/net.h",
    "position": 5,
    "original_position": 5,
    "commit_id": "021f86953e8a1dff8ecc768186368d345c865cc2",
    "original_commit_id": "021f86953e8a1dff8ecc768186368d345c865cc2",
    "user": {
      "login": "rajarshimaitra",
      "id": 36541669,
      "node_id": "MDQ6VXNlcjM2NTQxNjY5",
      "avatar_url": "https://avatars.githubusercontent.com/u/36541669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rajarshimaitra",
      "html_url": "https://github.com/rajarshimaitra",
      "followers_url": "https://api.github.com/users/rajarshimaitra/followers",
      "following_url": "https://api.github.com/users/rajarshimaitra/following{/other_user}",
      "gists_url": "https://api.github.com/users/rajarshimaitra/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rajarshimaitra/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rajarshimaitra/subscriptions",
      "organizations_url": "https://api.github.com/users/rajarshimaitra/orgs",
      "repos_url": "https://api.github.com/users/rajarshimaitra/repos",
      "events_url": "https://api.github.com/users/rajarshimaitra/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rajarshimaitra/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "As we are dropping the `C` from `AddrMan` and `AddrInfo`, is that a convention that will be applied elsewhere in the codebase from now on too? \r\n\r\nMy understanding was the `C` before these structures indicated they are a `class`. Are we deciding to drop that indication from now on? \r\n\r\nJust trying to understand the rationale of name changes in https://github.com/bitcoin/bitcoin/pull/22950/commits/dd8f7f250095e58bbf4cd4effb481b52143bd1ed and https://github.com/bitcoin/bitcoin/pull/22950/commits/375750387e35ed751d1f5ab48860bdec93977f64",
    "created_at": "2021-09-29T13:28:46Z",
    "updated_at": "2021-09-29T13:29:29Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r718513693",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/718513693"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r718513693"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/718513693/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 800,
    "original_line": 800,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/718522015",
    "pull_request_review_id": 766696199,
    "id": 718522015,
    "node_id": "PRRC_kwDOABII584q08af",
    "diff_hunk": "@@ -797,7 +797,7 @@ class CConnman\n         m_onion_binds = connOptions.onion_binds;\n     }\n \n-    CConnman(uint64_t seed0, uint64_t seed1, CAddrMan& addrman, bool network_active = true);\n+    CConnman(uint64_t seed0, uint64_t seed1, AddrMan& addrman, bool network_active = true);",
    "path": "src/net.h",
    "position": 5,
    "original_position": 5,
    "commit_id": "021f86953e8a1dff8ecc768186368d345c865cc2",
    "original_commit_id": "021f86953e8a1dff8ecc768186368d345c865cc2",
    "user": {
      "login": "martinus",
      "id": 14386,
      "node_id": "MDQ6VXNlcjE0Mzg2",
      "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/martinus",
      "html_url": "https://github.com/martinus",
      "followers_url": "https://api.github.com/users/martinus/followers",
      "following_url": "https://api.github.com/users/martinus/following{/other_user}",
      "gists_url": "https://api.github.com/users/martinus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/martinus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
      "organizations_url": "https://api.github.com/users/martinus/orgs",
      "repos_url": "https://api.github.com/users/martinus/repos",
      "events_url": "https://api.github.com/users/martinus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/martinus/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Since https://github.com/bitcoin/bitcoin/pull/10461 the `developer-notes.md` states \"Do not prefix class names with `C`\"",
    "created_at": "2021-09-29T13:37:17Z",
    "updated_at": "2021-09-29T13:37:18Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r718522015",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/718522015"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r718522015"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/718522015/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 800,
    "original_line": 800,
    "side": "RIGHT",
    "in_reply_to_id": 718513693
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/718585836",
    "pull_request_review_id": 766787826,
    "id": 718585836,
    "node_id": "PRRC_kwDOABII584q1L_s",
    "diff_hunk": "@@ -797,7 +797,7 @@ class CConnman\n         m_onion_binds = connOptions.onion_binds;\n     }\n \n-    CConnman(uint64_t seed0, uint64_t seed1, CAddrMan& addrman, bool network_active = true);\n+    CConnman(uint64_t seed0, uint64_t seed1, AddrMan& addrman, bool network_active = true);",
    "path": "src/net.h",
    "position": 5,
    "original_position": 5,
    "commit_id": "021f86953e8a1dff8ecc768186368d345c865cc2",
    "original_commit_id": "021f86953e8a1dff8ecc768186368d345c865cc2",
    "user": {
      "login": "michaelfolkson",
      "id": 16323900,
      "node_id": "MDQ6VXNlcjE2MzIzOTAw",
      "avatar_url": "https://avatars.githubusercontent.com/u/16323900?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/michaelfolkson",
      "html_url": "https://github.com/michaelfolkson",
      "followers_url": "https://api.github.com/users/michaelfolkson/followers",
      "following_url": "https://api.github.com/users/michaelfolkson/following{/other_user}",
      "gists_url": "https://api.github.com/users/michaelfolkson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/michaelfolkson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/michaelfolkson/subscriptions",
      "organizations_url": "https://api.github.com/users/michaelfolkson/orgs",
      "repos_url": "https://api.github.com/users/michaelfolkson/repos",
      "events_url": "https://api.github.com/users/michaelfolkson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/michaelfolkson/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "@rajarshimaitra: See https://bitcoin.stackexchange.com/questions/106558/what-do-the-classes-chainstatemanager-cchainstate-cchain-and-blockmanager-do-i or the Core PR review club that links to. New classes shouldn't have C in front of them but old ones aren't being renamed.",
    "created_at": "2021-09-29T14:36:21Z",
    "updated_at": "2021-09-29T14:36:21Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r718585836",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/718585836"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r718585836"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/718585836/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 800,
    "original_line": 800,
    "side": "RIGHT",
    "in_reply_to_id": 718513693
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/718625074",
    "pull_request_review_id": 766842275,
    "id": 718625074,
    "node_id": "PRRC_kwDOABII584q1Vky",
    "diff_hunk": "@@ -797,7 +797,7 @@ class CConnman\n         m_onion_binds = connOptions.onion_binds;\n     }\n \n-    CConnman(uint64_t seed0, uint64_t seed1, CAddrMan& addrman, bool network_active = true);\n+    CConnman(uint64_t seed0, uint64_t seed1, AddrMan& addrman, bool network_active = true);",
    "path": "src/net.h",
    "position": 5,
    "original_position": 5,
    "commit_id": "021f86953e8a1dff8ecc768186368d345c865cc2",
    "original_commit_id": "021f86953e8a1dff8ecc768186368d345c865cc2",
    "user": {
      "login": "rajarshimaitra",
      "id": 36541669,
      "node_id": "MDQ6VXNlcjM2NTQxNjY5",
      "avatar_url": "https://avatars.githubusercontent.com/u/36541669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rajarshimaitra",
      "html_url": "https://github.com/rajarshimaitra",
      "followers_url": "https://api.github.com/users/rajarshimaitra/followers",
      "following_url": "https://api.github.com/users/rajarshimaitra/following{/other_user}",
      "gists_url": "https://api.github.com/users/rajarshimaitra/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rajarshimaitra/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rajarshimaitra/subscriptions",
      "organizations_url": "https://api.github.com/users/rajarshimaitra/orgs",
      "repos_url": "https://api.github.com/users/rajarshimaitra/repos",
      "events_url": "https://api.github.com/users/rajarshimaitra/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rajarshimaitra/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Oh ok.. Thanks for the clarification. \r\n@michaelfolkson  Just to understand further, its ok for old ones to drop the `C` in later PRs if they are being touched right? Just like the case here with `AddrMan` and `AddrInfo`?\r\n\r\nSo eventually the goal is to remove \"C for classes\" everywhere?   ",
    "created_at": "2021-09-29T15:15:35Z",
    "updated_at": "2021-09-29T15:17:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r718625074",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/718625074"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r718625074"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/718625074/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 800,
    "original_line": 800,
    "side": "RIGHT",
    "in_reply_to_id": 718513693
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/718626849",
    "pull_request_review_id": 766844610,
    "id": 718626849,
    "node_id": "PRRC_kwDOABII584q1WAh",
    "diff_hunk": "@@ -797,7 +797,7 @@ class CConnman\n         m_onion_binds = connOptions.onion_binds;\n     }\n \n-    CConnman(uint64_t seed0, uint64_t seed1, CAddrMan& addrman, bool network_active = true);\n+    CConnman(uint64_t seed0, uint64_t seed1, AddrMan& addrman, bool network_active = true);",
    "path": "src/net.h",
    "position": 5,
    "original_position": 5,
    "commit_id": "021f86953e8a1dff8ecc768186368d345c865cc2",
    "original_commit_id": "021f86953e8a1dff8ecc768186368d345c865cc2",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "New code should follow the style described in the developer notes. If you're substantially changing a piece of code, it makes sense to also update it to follow that convention. This isn't just the case for the \"C\" prefix but also variable naming, bracing, ...",
    "created_at": "2021-09-29T15:17:21Z",
    "updated_at": "2021-09-29T15:17:42Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r718626849",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/718626849"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r718626849"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/718626849/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 800,
    "original_line": 800,
    "side": "RIGHT",
    "in_reply_to_id": 718513693
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/722282643",
    "pull_request_review_id": 771504264,
    "id": 722282643,
    "node_id": "PRRC_kwDOABII584rDSiT",
    "diff_hunk": "@@ -759,8 +759,9 @@ void AddrManImpl::GetAddr_(std::vector<CAddress>& vAddr, size_t max_addresses, s\n \n     // gather a list of random nodes, skipping those of low quality\n     const int64_t now{GetAdjustedTime()};\n+    std::vector<CAddress> addresses;",
    "path": "src/addrman.cpp",
    "position": 496,
    "original_position": 13,
    "commit_id": "021f86953e8a1dff8ecc768186368d345c865cc2",
    "original_commit_id": "14f9e000d05f82b364d5a142cafc70b10406b660",
    "user": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Tiny nit for one of the refactor PRs: `addresses.reserve(std::min(vRandom.size(), nNodes));`",
    "created_at": "2021-10-05T14:11:15Z",
    "updated_at": "2021-10-05T14:37:17Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r722282643",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/722282643"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22950#discussion_r722282643"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22950"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/722282643/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 763,
    "original_line": 762,
    "side": "RIGHT"
  }
]