DrahtBot,2021-09-11 14:56:14,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#23140](https://github.com/bitcoin/bitcoin/pull/23140) (Make CAddrman::Select_ select buckets, not positions, first by si",https://github.com/bitcoin/bitcoin/pull/22950#issuecomment-917420738,917420738,
amitiuttarwar,2021-09-13 22:57:33,"Fixed the [lint failure](https://cirrus-ci.com/task/5301111516037120) that was caused by the circular dependencies check ~with 95a066efff8c63b7d81d93977c1980e019708fa9. The check treated `file_name.h` and `file_name.cpp` as the same module, so the import pattern here of `addrman.h` <- `addrman_impl.h` <- `addrman.cpp` was perceived as a circular dependency. I fixed this by telling it to also treat",https://github.com/bitcoin/bitcoin/pull/22950#issuecomment-918643347,918643347,
jnewbery,2021-09-14 12:14:26,"Concept ACK. I'm a big fan of compilation firewall patterns. From Herb Sutter:\n\n> One big advantage of this idiom is that it breaks compile-time dependencies. First, system builds run faster because using a Pimpl can eliminate extra #includes. I have worked on projects where converting just a few widely-visible classes to use Pimpls has halved the systemâ€™s build time. Second, it localizes the ",https://github.com/bitcoin/bitcoin/pull/22950#issuecomment-919092484,919092484,
jonatack,2021-09-15 17:59:25,"Concept ACK on improved separation and shorter build times. Debug build clean. Just read through pages 147-156 of Scott Meyers' ""Effective Modern C++"" about the (unique) pointer to implementation idiom and started looking at the commit organisation, particularly the choices in the second (""Introduce CAddrMan::Impl to encapsulate addrman implementation"") and third (""Remove external dependencies on ",https://github.com/bitcoin/bitcoin/pull/22950#issuecomment-920249059,920249059,
laanwj,2021-09-16 16:24:00,"Concept ACK\n\n> Both are relevant here. addrman.h is eventually included by just about everything, so minimizing its compilation time is potentially a big win.\n\nYes, at some point there was discussion about doing this for `txmempool.h` too, as it's included a fair bit and includes all these boost `multi_index` structures, which i'm sure slow down compilation quite a bit.\n",https://github.com/bitcoin/bitcoin/pull/22950#issuecomment-921048350,921048350,
amitiuttarwar,2021-09-16 16:34:37,"adopted a different fix to the detected circular dependency- I made the impl a stand-alone class, so it's now `AddrManImpl` instead of `AddrMan::Impl`. this means `addrman_impl.h` does not need to import `addrman.h`, and the linter script does not need to be updated :) ",https://github.com/bitcoin/bitcoin/pull/22950#issuecomment-921056093,921056093,
JeremyRubin,2021-09-21 03:29:46,concept ack!,https://github.com/bitcoin/bitcoin/pull/22950#issuecomment-923583452,923583452,
amitiuttarwar,2021-09-21 21:55:20,thanks for the concept ACKs! rebased to incorporate the recent addrman changes. ,https://github.com/bitcoin/bitcoin/pull/22950#issuecomment-924415628,924415628,
amitiuttarwar,2021-09-22 00:35:19,"I had missed a silent merge conflict, fixed now and ready for review ðŸŽˆ",https://github.com/bitcoin/bitcoin/pull/22950#issuecomment-924488565,924488565,
amitiuttarwar,2021-09-22 22:24:29,"thanks for the review @jnewbery. I took all your suggestions except for this one that I have a question about-\n\n> In commit scripted-diff: Rename CAddrMan to AddrMan, is there a reason not to use git grep -l CAddrMan?\n\nI was trying this out, but am unsure how to exclude release notes. This is what I have so far, any suggestions? `git grep -l CAddrMan | xargs sed -i 's/CAddrMan/AddrMan/g'`",https://github.com/bitcoin/bitcoin/pull/22950#issuecomment-925372937,925372937,
jamesob,2021-09-22 23:39:25,"If this is being done in the name of compilation performance, do you have any measurements justifying the change?",https://github.com/bitcoin/bitcoin/pull/22950#issuecomment-925404222,925404222,
MarcoFalke,2021-09-23 06:18:22,"> I was trying this out, but am unsure how to exclude release notes. \n\n`git grep -l ""foo_bar"" ./src`",https://github.com/bitcoin/bitcoin/pull/22950#issuecomment-925534009,925534009,
jnewbery,2021-09-23 11:11:25,"> If this is being done in the name of compilation performance, do you have any measurements justifying the change?\n\n@jamesob - the most significant impact would be on _recompilation_ times. By totally separating the implementation from the interface, we can make changes to the implementation without any impact on client code that calls into this component. For example, on this branch, making ",https://github.com/bitcoin/bitcoin/pull/22950#issuecomment-925715583,925715583,
amitiuttarwar,2021-09-24 21:09:39,"latest push: \n- rebased to address a small conflict with #23025 \n- updated the scripted diffs to use `grep` to generate the file names \n- split up the first commit into two parts as suggested in https://github.com/bitcoin/bitcoin/pull/22950#pullrequestreview-761829604\n- moved around some code to address review comments ",https://github.com/bitcoin/bitcoin/pull/22950#issuecomment-926920984,926920984,
jnewbery,2021-09-27 09:37:26,"> One general point: I wonder whether the pattern AddrManImpl::Function() and AddrManImpl::Function_() should still exist in the context of the PImpl, because now there are already two sets of functions that mostly just pass things along. With the recent changes to Check() allowing much more flexibility when and how often to call the checks, maybe it is not necessary anymore and the Check() calls ",https://github.com/bitcoin/bitcoin/pull/22950#issuecomment-927696951,927696951,
jnewbery,2021-09-27 10:31:01,"utACK 0cc7031002079b35953bac1e9d4268b6321893c7\n\nIf you retouch again, you could move the function bodies of `CAddrMan::~CAddrMan()` and `CAddrMan::GetAsmap()` into addrman.cpp in the first commit (_[move-only] Move CAddrMan function definitions to cpp_) to make the second commit cleaner.",https://github.com/bitcoin/bitcoin/pull/22950#issuecomment-927736344,927736344,
theuni,2021-09-27 22:59:40,"utACK. Needs rebase.\n\nOnly skimmed the move-only and scripted-diff commits. Reviewed in-order and each commit is well-explained. +1 to the contained interface.\n\nAgree with @mzumsande about cleaning up the internal functions as a next step, but not as a part of this PR.\n\nIt would be nice if we had a time type so it'd be obvious what the second member of the pair was in the return values",https://github.com/bitcoin/bitcoin/pull/22950#issuecomment-928405824,928405824,
amitiuttarwar,2021-09-29 03:28:44,"Thank you for the thoughtful reviews @mzumsande, @martinus, @jnewbery & @theuni !! I believe I've incorporated all the review comments. \n\n### A note on the latest push:\n\nMostly I rebased & addressed comments, but in doing so I added another commit- f2e5f38f09ee40933f752680fe7d75ee8e529fae. I generally attempted to get the grouping / ordering of functions to be consistent, between the decla",https://github.com/bitcoin/bitcoin/pull/22950#issuecomment-929797999,929797999,
jnewbery,2021-09-29 08:36:02,"ACK 021f86953e8a1dff8ecc768186368d345c865cc2\n\nThe incremental commits make this really easy to review. Thank you!",https://github.com/bitcoin/bitcoin/pull/22950#issuecomment-929962270,929962270,
GeneFerneau,2021-09-29 19:37:19,utACK [021f869](https://github.com/bitcoin/bitcoin/pull/22950/commits/021f86953e8a1dff8ecc768186368d345c865cc2),https://github.com/bitcoin/bitcoin/pull/22950#issuecomment-930483887,930483887,
mzumsande,2021-10-02 20:48:40,"ACK 021f86953e8a1dff8ecc768186368d345c865cc2\n\nReviewed the code and did some sanity checks running this for a while on mainnet with `-checkaddrman=1`, but no testing beyond that.",https://github.com/bitcoin/bitcoin/pull/22950#issuecomment-932818456,932818456,
jnewbery,2021-09-22 11:33:17,"This is a forward declaration, so the usual place for it would be at the top of the file. I think placing it here would also means that the doxygen comment would be associated with `AddrManImpl` instead of `AddrMan`.",https://github.com/bitcoin/bitcoin/pull/22950#discussion_r713849263,713849263,src/addrman.h
jnewbery,2021-09-22 12:26:22,"This may just be personal preference, but I think this file would be tidier/easier to read if all of these `AddrMan` boilerplate forwarding functions were collected at the bottom (as is done in txrequest.cpp), rather than interleaved with `AddrManImpl` functions.",https://github.com/bitcoin/bitcoin/pull/22950#discussion_r713887633,713887633,src/addrman.cpp
jnewbery,2021-09-22 12:31:02,Maybe we should just update the internal `GetAddr_()` function to return a `std::vector<CAddress>` instead of introducing this comment?,https://github.com/bitcoin/bitcoin/pull/22950#discussion_r713891466,713891466,src/addrman_impl.h
jnewbery,2021-09-22 12:32:55,"Should be grouped above with logging.h, since sync.h is a project header and not a stl header.",https://github.com/bitcoin/bitcoin/pull/22950#discussion_r713892970,713892970,src/addrman_impl.h
jnewbery,2021-09-22 12:38:44,"Also include:\n\n- cstdint (for fixed width integer types)\n- netaddress.h (for CNetAddr)\n- serialize.h (for serialization functions)\n- protocol.h (for CAddress)\n- uint256.h (for uint256)\n- vector (for std::vector)\n- utility (for std::pair)\n- set (for std::set)\n- optional (for std::optional)",https://github.com/bitcoin/bitcoin/pull/22950#discussion_r713897836,713897836,src/addrman_impl.h
jnewbery,2021-09-22 12:41:01,Also include streams.h,https://github.com/bitcoin/bitcoin/pull/22950#discussion_r713899748,713899748,src/addrman.h
amitiuttarwar,2021-09-22 22:20:48,fixed,https://github.com/bitcoin/bitcoin/pull/22950#discussion_r714350992,714350992,src/addrman.h
amitiuttarwar,2021-09-22 22:21:01,"I agree, updated",https://github.com/bitcoin/bitcoin/pull/22950#discussion_r714351114,714351114,src/addrman.cpp
amitiuttarwar,2021-09-22 22:22:17,"sounds good, added commit 5a8415750cdc93b719a8e4c18ee245e236b93006 to handle that ",https://github.com/bitcoin/bitcoin/pull/22950#discussion_r714351625,714351625,src/addrman_impl.h
amitiuttarwar,2021-09-22 22:22:35,done,https://github.com/bitcoin/bitcoin/pull/22950#discussion_r714351782,714351782,src/addrman_impl.h
amitiuttarwar,2021-09-22 22:23:27,done,https://github.com/bitcoin/bitcoin/pull/22950#discussion_r714352065,714352065,src/addrman_impl.h
amitiuttarwar,2021-09-22 22:23:40,done,https://github.com/bitcoin/bitcoin/pull/22950#discussion_r714352157,714352157,src/addrman.h
jnewbery,2021-09-23 10:14:48,"What do you think about having the ctor and dtor function bodies in addrman.cpp, so that addrman_impl.h only contains the function declarations?",https://github.com/bitcoin/bitcoin/pull/22950#discussion_r714655994,714655994,src/addrman_impl.h
jnewbery,2021-09-23 10:15:50,It seems more natural to have these instantiations below the function definitions for `Serialize()` and `Unserialize()`.,https://github.com/bitcoin/bitcoin/pull/22950#discussion_r714656686,714656686,src/addrman.cpp
jnewbery,2021-09-23 10:25:14,"Could these `AddrMan` ctor and dtor methods also be moved to the bottom, below the `AddrManImpl` methods?",https://github.com/bitcoin/bitcoin/pull/22950#discussion_r714662483,714662483,src/addrman.cpp
jnewbery,2021-09-23 10:30:18,"Perhaps these two methods should be moved above `Good_`, so that all the underscore internal functions are grouped together.",https://github.com/bitcoin/bitcoin/pull/22950#discussion_r714665818,714665818,src/addrman_impl.h
amitiuttarwar,2021-09-24 20:40:47,"to make sure I understand correctly, is this the order you're suggesting? \n- `AddrManImpl::Serialize`\n- `AddrManImpl::Unserialize`\n- explicit instantiations\n- `AddrManImpl` [ other functions ]\n- `AddrMan::Serialize`\n- `AddrMan::Unserialize`\n\nThe reason I think the current order makes more sense is because the explicit instantiations are for the `AddrMan` template, not the impl temp",https://github.com/bitcoin/bitcoin/pull/22950#discussion_r715892071,715892071,src/addrman.cpp
amitiuttarwar,2021-09-24 20:51:00,"hm, but they are still internal functions? ",https://github.com/bitcoin/bitcoin/pull/22950#discussion_r715897043,715897043,src/addrman_impl.h
amitiuttarwar,2021-09-24 21:10:06,done,https://github.com/bitcoin/bitcoin/pull/22950#discussion_r715905721,715905721,src/addrman.cpp
amitiuttarwar,2021-09-24 21:10:18,done,https://github.com/bitcoin/bitcoin/pull/22950#discussion_r715905837,715905837,src/addrman_impl.h
mzumsande,2021-09-25 21:05:04,nit: I think using `AddrInfo&` instead of `auto` would make it clearer that it gets sliced to `CAddress` in the next line.,https://github.com/bitcoin/bitcoin/pull/22950#discussion_r716097906,716097906,src/addrman.cpp
mzumsande,2021-09-25 21:20:13,"Since this wasn't obvious to me immediately, just noting that this works because the [default constructor](https://en.cppreference.com/w/cpp/utility/pair/pair) of `std::pair` value-initializes both elements (i.e. this returns a pair with a default-initialized `CAddress` and 0 for int64_t).",https://github.com/bitcoin/bitcoin/pull/22950#discussion_r716099416,716099416,src/addrman.cpp
mzumsande,2021-09-25 21:38:58,The move-only commit f113b09d8ea31bc2e1cf6a5178b3d1d93a1c9bb2 makes `nLastTry` and `nLastCountAttempt` private for one commit.,https://github.com/bitcoin/bitcoin/pull/22950#discussion_r716101195,716101195,src/addrman_impl.h
martinus,2021-09-27 09:06:12,"nit: I'd remove all the default arguments in AddrManImpl, at least in the public interface. Having defaults in both `AddrMan` and `AddrManImpl` can be a source of error when not both are updated",https://github.com/bitcoin/bitcoin/pull/22950#discussion_r716499594,716499594,src/addrman_impl.h
jnewbery,2021-09-27 09:47:43,I mean that these instantiations of `AddrMan::Serialize()` and `AddrMan::Unserialize()` should be below the template function definitions for `AddrMan::Serialize()` and `AddrMan::Unserialize()` (i.e. just move them down 10 lines).,https://github.com/bitcoin/bitcoin/pull/22950#discussion_r716532315,716532315,src/addrman.cpp
jnewbery,2021-09-27 09:50:31,"By ""internal functions"", I mean private functions that are called by the public ""outer functions"". There's a pattern that the public `Good()` function calls private `Good_()`, public `Add()` calls private `Add_()`, etc. It makes sense to group all of the `FunctionName_()` functions together.",https://github.com/bitcoin/bitcoin/pull/22950#discussion_r716534699,716534699,src/addrman_impl.h
theuni,2021-09-27 22:26:28,"~Nit: If the compiler doesn't elide this, the const will force an extra copy: https://stackoverflow.com/questions/25784544/will-returning-a-const-object-from-a-function-prevent-move-construction-from-out/25786015~\n\nEdit: TIL. Looks like this is ""permitted"" to be elided according to the [c++17 final working draft](http://open-std.org/jtc1/sc22/wg21/docs/papers/2017/n4659.pdf): (emphasis mine)\",https://github.com/bitcoin/bitcoin/pull/22950#discussion_r717088501,717088501,src/addrman.cpp
amitiuttarwar,2021-09-29 02:40:07,"ahhhh, that makes more sense. done",https://github.com/bitcoin/bitcoin/pull/22950#discussion_r718108877,718108877,src/addrman.cpp
amitiuttarwar,2021-09-29 02:42:52,"okay, I introduced this new commit: https://github.com/bitcoin/bitcoin/pull/22950. I moved `Check` and `ForceCheck` to be after all the `Function_`. And I moved some additional stuff around to be consistently ordered in declarations & definitions.",https://github.com/bitcoin/bitcoin/pull/22950#discussion_r718109877,718109877,src/addrman_impl.h
amitiuttarwar,2021-09-29 02:44:16,"makes sense, done",https://github.com/bitcoin/bitcoin/pull/22950#discussion_r718110336,718110336,src/addrman.cpp
amitiuttarwar,2021-09-29 02:44:41,"great point, thanks for verifying & sharing!",https://github.com/bitcoin/bitcoin/pull/22950#discussion_r718110459,718110459,src/addrman.cpp
amitiuttarwar,2021-09-29 02:45:04,fixed it,https://github.com/bitcoin/bitcoin/pull/22950#discussion_r718110618,718110618,src/addrman_impl.h
amitiuttarwar,2021-09-29 02:46:21,"definitely agree with this feedback! disagree with classifying it as a nit :)\n\nI believe I removed all the defaults from the public interface, but I left them on the private functions because they aren't redundant in that situation.\n\nthank you!",https://github.com/bitcoin/bitcoin/pull/22950#discussion_r718111106,718111106,src/addrman_impl.h
amitiuttarwar,2021-09-29 02:50:26,"that's so interesting, I hadn't thought about the correlation between copy elision and temporary const variables. thanks for digging in! \n\nnext question is how I get my hands on the spec..",https://github.com/bitcoin/bitcoin/pull/22950#discussion_r718112615,718112615,src/addrman.cpp
sipa,2021-09-29 03:15:18,It certainly looks like in practice the const doesn't prevent elision: https://godbolt.org/z/Go8xhGP1b,https://github.com/bitcoin/bitcoin/pull/22950#discussion_r718120827,718120827,src/addrman.cpp
rajarshimaitra,2021-09-29 13:28:46,"As we are dropping the `C` from `AddrMan` and `AddrInfo`, is that a convention that will be applied elsewhere in the codebase from now on too? \n\nMy understanding was the `C` before these structures indicated they are a `class`. Are we deciding to drop that indication from now on? \n\nJust trying to understand the rationale of name changes in https://github.com/bitcoin/bitcoin/pull/22950/comm",https://github.com/bitcoin/bitcoin/pull/22950#discussion_r718513693,718513693,src/net.h
martinus,2021-09-29 13:37:17,"Since https://github.com/bitcoin/bitcoin/pull/10461 the `developer-notes.md` states ""Do not prefix class names with `C`""",https://github.com/bitcoin/bitcoin/pull/22950#discussion_r718522015,718522015,src/net.h
michaelfolkson,2021-09-29 14:36:21,@rajarshimaitra: See https://bitcoin.stackexchange.com/questions/106558/what-do-the-classes-chainstatemanager-cchainstate-cchain-and-blockmanager-do-i or the Core PR review club that links to. New classes shouldn't have C in front of them but old ones aren't being renamed.,https://github.com/bitcoin/bitcoin/pull/22950#discussion_r718585836,718585836,src/net.h
rajarshimaitra,2021-09-29 15:15:35,"Oh ok.. Thanks for the clarification. \n@michaelfolkson  Just to understand further, its ok for old ones to drop the `C` in later PRs if they are being touched right? Just like the case here with `AddrMan` and `AddrInfo`?\n\nSo eventually the goal is to remove ""C for classes"" everywhere?   ",https://github.com/bitcoin/bitcoin/pull/22950#discussion_r718625074,718625074,src/net.h
sipa,2021-09-29 15:17:21,"New code should follow the style described in the developer notes. If you're substantially changing a piece of code, it makes sense to also update it to follow that convention. This isn't just the case for the ""C"" prefix but also variable naming, bracing, ...",https://github.com/bitcoin/bitcoin/pull/22950#discussion_r718626849,718626849,src/net.h
theuni,2021-10-05 14:11:15,"Tiny nit for one of the refactor PRs: `addresses.reserve(std::min(vRandom.size(), nNodes));`",https://github.com/bitcoin/bitcoin/pull/22950#discussion_r722282643,722282643,src/addrman.cpp
