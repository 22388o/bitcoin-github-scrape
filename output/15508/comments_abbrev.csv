fanquake,2019-03-01T08:42:07Z,"[Travis](https://travis-ci.org/bitcoin/bitcoin/jobs/500229801):\n```\nA new circular dependency in the form of ""core_io -> psbt -> core_io"" appears to have been introduced.\n^---- failure generated from test/lint/lint-circular-dependencies.sh\n```",https://github.com/bitcoin/bitcoin/pull/15508#issuecomment-468588433,468588433,
gwillen,2019-03-01T19:50:33Z,"Hmm, that's not great, is it. I guess I forgot to run lint-all, sorry. (I have to raise the file descriptor limit before running, or it crashes on my mac, so it's easy to forget...)\n\nI am a little confused about this lint, because it appears I didn't introduce a circular header dependency -- rather, core_io.h (the interface) depends on psbt.h, but psbt._cpp_ (the implementation) depends on cor",https://github.com/bitcoin/bitcoin/pull/15508#issuecomment-468789900,468789900,
gwillen,2019-03-01T19:54:59Z,"... but apparently the dependency was no longer needed anyway, so I don't need to litigate this. ;-) Fixed!",https://github.com/bitcoin/bitcoin/pull/15508#issuecomment-468791189,468791189,
gwillen,2019-03-04T08:48:45Z,"Hmm, I seem to have introduced a linker problem that does not happen on OS X. I will get around to looking at it in a Linux VM, but if someone could look at it and go ""oh, I know what you did wrong"", I'm sure it would save me a bunch of time. ;-)",https://github.com/bitcoin/bitcoin/pull/15508#issuecomment-469167491,469167491,
sipa,2019-03-04T08:58:52Z,"psbt.cpp is in libbitcoin_common, and consensus/tx_verify.cpp is in libbitcoin_server. libbitcoin_common in linked into `bitcoin-tx`, but libbitcoin_server isn't.",https://github.com/bitcoin/bitcoin/pull/15508#issuecomment-469170746,469170746,
gwillen,2019-03-06T03:11:02Z,"Thanks @sipa.\n\nThe easiest solution seems -- after whipping out a linux machine and doing a lot of repeatedly fiddling with Makefile.am and rebuilding everything from scratch -- to be moving psbt.cpp from libbitcoin_common to libbitcoin_server. LMK what you think of that plan.\n\nUnfortunately the tree of dependencies from AnalyzePSBT into libbitcoin_server runs very deep. The chain of depen",https://github.com/bitcoin/bitcoin/pull/15508#issuecomment-469950688,469950688,
DrahtBot,2019-03-09T07:10:52Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#15638](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15638.html) (Move-only: Pull wallet code out of libbitco",https://github.com/bitcoin/bitcoin/pull/15508#issuecomment-471153340,471153340,
gwillen,2019-03-12T23:52:22Z,"Ok, added documentation, and did the refactor requested by @promag. Sorry @ryanofsky, if you wouldn't mind glancing at the minor code change and re-acking. I am convinced it does not change behavior.\n\nOh, and rebased -- I picked up @sipa 's fix from #15582 .",https://github.com/bitcoin/bitcoin/pull/15508#issuecomment-472225300,472225300,
gwillen,2019-03-13T00:14:27Z,"Travis failure is weird:\n\n```Downloading archive: https://language-archives.travis-ci.com/python/binaries/ubuntu/16.04/x86_64/python-3.5.tar.bz2\n0.20s$ curl -sSf -o python-3.5.tar.bz2 ${archive_url}\ncurl: (22) The requested URL returned error: 403 Forbidden\nUnable to download 3.5 archive. The archive may not exist. Please consider a different version.\n```",https://github.com/bitcoin/bitcoin/pull/15508#issuecomment-472230102,472230102,
sipa,2019-03-13T00:21:20Z,"It's really unfortunate that the PSBT code needs to be in libbitcoin_server. I'm thinking of creating a separate PSBT signer tool using the signer/psbt source code, but with it in libbitcoin_server, that tool will need to include the whole networking, RPC, and validation logic.\n\nIs it depending on anything more than `GetVirtualTransactionSize`? If not, I would suggest just moving `GetTransacti",https://github.com/bitcoin/bitcoin/pull/15508#issuecomment-472231368,472231368,
gwillen,2019-03-13T01:39:24Z,"@sipa I'm happy to give it a shot.\n\nFrom my notes, there were two offenders:\n- GetVirtualTransactionSize, as noted, which lives in policy.cpp\n- GetTransactionSigOpCost, which lives in consensus/tx_verify.cpp\n\nThe former seems easy to deal with -- it's just a small amount of math involving a couple of constants. \n\nThe latter might also be relatively standalone -- the file it's in ha",https://github.com/bitcoin/bitcoin/pull/15508#issuecomment-472245896,472245896,
gwillen,2019-03-13T01:39:55Z,"(The other option would be to remove the size and feerate calculations from AnalyzePSBT, or move just those elsewhere. They're pretty standalone.)",https://github.com/bitcoin/bitcoin/pull/15508#issuecomment-472245975,472245975,
sipa,2019-03-13T01:52:52Z,"I have a simpler solution: replace the `GetTransactionSigOpCost()` call with `0` (which means the whole call can just become `GetVirtualTransactionSize(ctx)`, and only that function needs to move elsewhere).\n\nTo explain why this is safe: reason why GetVirtualTransactionSize takes in a sigop count as argument is because in the mempool/feerate/mining code we use vsize = max(actual_vsize(tx), sig",https://github.com/bitcoin/bitcoin/pull/15508#issuecomment-472248294,472248294,
gwillen,2019-03-14T00:29:06Z,"ok, my apologies to @ryanofsky and I appreciate your patience, this version has exactly two changes:\n\n- Rebase over #15559, which changes the format of the estimated feerate from a string to an integer in the RPC output (does not affect the output of the AnalyzePSBT function itself, only how it's formatted in the wrapper in rpc/rawtransaction.cpp)\n- Per @sipa 's request, revert the move into",https://github.com/bitcoin/bitcoin/pull/15508#issuecomment-472657865,472657865,
gwillen,2019-03-20T01:41:23Z,"Definitely hoping to get this merged soon. @sipa  or @promag, maybe take a look and see if you have anything further? :-)",https://github.com/bitcoin/bitcoin/pull/15508#issuecomment-474650347,474650347,
gwillen,2019-03-27T00:46:29Z,"@sipa Thanks, all your comments addressed.",https://github.com/bitcoin/bitcoin/pull/15508#issuecomment-476914376,476914376,
sipa,2019-03-28T01:27:20Z,utACK 892eff05f115c0b002d0e0b6ffc3ab418480d25c,https://github.com/bitcoin/bitcoin/pull/15508#issuecomment-477407964,477407964,
sipa,2019-03-28T22:29:05Z,"Feel like reviewing, @achow101?",https://github.com/bitcoin/bitcoin/pull/15508#issuecomment-477794441,477794441,
achow101,2019-04-02T22:00:43Z,utACK 892eff05f115c0b002d0e0b6ffc3ab418480d25c,https://github.com/bitcoin/bitcoin/pull/15508#issuecomment-479223582,479223582,
practicalswift,2019-03-02T16:26:20Z,"The scope of `input` could be reduced here without any change in behaviour, right?",https://github.com/bitcoin/bitcoin/pull/15508#discussion_r261832564,261832564,src/psbt.cpp
gwillen,2019-03-02T22:42:17Z,"Yes, that's true -- would you prefer I did? I normally agree about ""less scope is better"", but here that instinct is clashing with my instinct to keep parallel things together, and definitions at the top of the relevant block.",https://github.com/bitcoin/bitcoin/pull/15508#discussion_r261844857,261844857,src/psbt.cpp
practicalswift,2019-03-03T09:28:28Z,Thanks for the explanation. Makes sense!,https://github.com/bitcoin/bitcoin/pull/15508#discussion_r261858584,261858584,src/psbt.cpp
promag,2019-03-03T16:10:09Z,`const PartiallySignedTransaction& psbtx`?,https://github.com/bitcoin/bitcoin/pull/15508#discussion_r261874030,261874030,src/psbt.h
promag,2019-03-03T16:12:25Z,Could move this after `GetInputUTXO()`?,https://github.com/bitcoin/bitcoin/pull/15508#discussion_r261874105,261874105,src/psbt.cpp
promag,2019-03-03T16:15:57Z,"I think we align `case` with `switch`. nit, I'd ignore `return`s alignment.",https://github.com/bitcoin/bitcoin/pull/15508#discussion_r261874253,261874253,src/psbt.cpp
gwillen,2019-03-04T08:45:53Z,"I tried, but I had to back it out, because of the pattern of using ""SignPSBTInput(DUMMY_SIGNING_PROVIDER, ...)"" to get signature data without modifying the PSBT. So we either have to take the psbt by value, or by non-const reference.\n\nWe could get around this with a const cast, but I'm against it unless we think the cost of copying a PartiallySignedTransaction is truly unacceptable.",https://github.com/bitcoin/bitcoin/pull/15508#discussion_r261962916,261962916,src/psbt.h
gwillen,2019-03-06T03:18:38Z,"I'd be happy to, but I'm not sure I understand why? Can you elaborate?",https://github.com/bitcoin/bitcoin/pull/15508#discussion_r262779087,262779087,src/psbt.cpp
gwillen,2019-03-06T03:36:49Z,Done.,https://github.com/bitcoin/bitcoin/pull/15508#discussion_r262781610,262781610,src/psbt.cpp
promag,2019-03-07T01:24:41Z,"consider nit, just one loop exit:\n```cpp\nif (!SignPSBTInput(...) || !psbtx.GetInputUTXO(...)) {\n     success = false\n     break;\n}\n```",https://github.com/bitcoin/bitcoin/pull/15508#discussion_r263205743,263205743,src/psbt.cpp
promag,2019-03-07T15:45:20Z,Makes sense to keep by value. The code could be refactored but at the end each input would have to be copied to be able to call `FillSignatureData()` and `FromSignatureData`.,https://github.com/bitcoin/bitcoin/pull/15508#discussion_r263441412,263441412,src/psbt.h
ryanofsky,2019-03-12T19:15:37Z,"It'd be nice to have some documentation for these structs. There could be a comment saying struct fields correspond to fields returned by the `analyzepsbt` method, if you didn't want to just copy the documentation from `analyzepsbt`",https://github.com/bitcoin/bitcoin/pull/15508#discussion_r264843308,264843308,src/psbt.h
gwillen,2019-03-12T23:07:36Z,"Nah, thanks, this is a good point, I may as well document them properly.",https://github.com/bitcoin/bitcoin/pull/15508#discussion_r264919438,264919438,src/psbt.h
gwillen,2019-03-12T23:07:58Z,Done.,https://github.com/bitcoin/bitcoin/pull/15508#discussion_r264919526,264919526,src/psbt.cpp
promag,2019-03-13T00:03:41Z,"nit, could drop `else {` block or invert conditions:\n```cpp\nfor (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n    PSBTInput& input = psbtx.inputs[i];\n    Coin newcoin;\n\n    if (SignPSBTInput(DUMMY_SIGNING_PROVIDER, psbtx, i, 1, nullptr, true) && psbtx.GetInputUTXO(newcoin.out, i)) {\n        mtx.vin[i].scriptSig = input.final_script_sig;\n        mtx.vin[i].scriptWitness = in",https://github.com/bitcoin/bitcoin/pull/15508#discussion_r264931650,264931650,src/psbt.cpp
gwillen,2019-03-13T00:13:37Z,At this point I think I better leave it as Future Work.,https://github.com/bitcoin/bitcoin/pull/15508#discussion_r264933519,264933519,src/psbt.cpp
sipa,2019-03-26T22:24:32Z,I think this means you can remove the `#include <psbt.h>` from this file.,https://github.com/bitcoin/bitcoin/pull/15508#discussion_r269340219,269340219,src/core_read.cpp
sipa,2019-03-26T22:25:00Z,I think this means you can remove the `struct PartiallySignedBitcoinTransaction` forward declare from this file.,https://github.com/bitcoin/bitcoin/pull/15508#discussion_r269340343,269340343,src/core_io.h
sipa,2019-03-26T22:26:48Z,`const auto& input` to avoid copies.,https://github.com/bitcoin/bitcoin/pull/15508#discussion_r269340830,269340830,src/rpc/rawtransaction.cpp
sipa,2019-03-26T22:30:40Z,Is this int cast necessary?,https://github.com/bitcoin/bitcoin/pull/15508#discussion_r269341847,269341847,src/rpc/rawtransaction.cpp
gwillen,2019-03-27T00:33:13Z,"According to the compiler, some cast is required:\n\n```\nrpc/rawtransaction.cpp:1938:16: error: call to member function 'pushKV' is ambiguous\n        result.pushKV(""estimated_vsize"", *psbta.estimated_vsize);\n        ~~~~~~~^~~~~~\n./univalue/include/univalue.h:124:10: note: candidate function\n    bool pushKV(const std::string& key, int64_t val_) {\n         ^\n./univalue/include/univa",https://github.com/bitcoin/bitcoin/pull/15508#discussion_r269367894,269367894,src/rpc/rawtransaction.cpp
gwillen,2019-03-27T00:46:35Z,done,https://github.com/bitcoin/bitcoin/pull/15508#discussion_r269370237,269370237,src/rpc/rawtransaction.cpp
gwillen,2019-03-27T00:46:40Z,"yep, done",https://github.com/bitcoin/bitcoin/pull/15508#discussion_r269370251,269370251,src/core_io.h
gwillen,2019-03-27T00:46:44Z,"yep, done",https://github.com/bitcoin/bitcoin/pull/15508#discussion_r269370261,269370261,src/core_read.cpp
sipa,2019-03-28T00:34:42Z,Looks like it's needed in that case.,https://github.com/bitcoin/bitcoin/pull/15508#discussion_r269821652,269821652,src/rpc/rawtransaction.cpp
