[
  {
    "sha": "afd20a25f2937fee8d992c279631fa26cde4a7c8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZmQyMGEyNWYyOTM3ZmVlOGQ5OTJjMjc5NjMxZmEyNmNkZTRhN2M4",
    "commit": {
      "author": {
        "name": "Glenn Willen",
        "email": "gwillen@nerdnet.org",
        "date": "2019-03-06T02:55:40Z"
      },
      "committer": {
        "name": "Glenn Willen",
        "email": "gwillen@nerdnet.org",
        "date": "2019-03-27T00:38:00Z"
      },
      "message": "Move PSBT decoding functions from core_io to psbt.cpp\n\nMove PSBT decoding functions from core_io.h/core_read.cpp to psbt.h/psbt.cpp,\nto deal with a linker issue.",
      "tree": {
        "sha": "38e654a027437a32296fd432b0fa6069624aace5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/38e654a027437a32296fd432b0fa6069624aace5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/afd20a25f2937fee8d992c279631fa26cde4a7c8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/afd20a25f2937fee8d992c279631fa26cde4a7c8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/afd20a25f2937fee8d992c279631fa26cde4a7c8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/afd20a25f2937fee8d992c279631fa26cde4a7c8/comments",
    "author": {
      "login": "gwillen",
      "id": 458997,
      "node_id": "MDQ6VXNlcjQ1ODk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/458997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gwillen",
      "html_url": "https://github.com/gwillen",
      "followers_url": "https://api.github.com/users/gwillen/followers",
      "following_url": "https://api.github.com/users/gwillen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gwillen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gwillen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gwillen/subscriptions",
      "organizations_url": "https://api.github.com/users/gwillen/orgs",
      "repos_url": "https://api.github.com/users/gwillen/repos",
      "events_url": "https://api.github.com/users/gwillen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gwillen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gwillen",
      "id": 458997,
      "node_id": "MDQ6VXNlcjQ1ODk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/458997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gwillen",
      "html_url": "https://github.com/gwillen",
      "followers_url": "https://api.github.com/users/gwillen/followers",
      "following_url": "https://api.github.com/users/gwillen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gwillen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gwillen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gwillen/subscriptions",
      "organizations_url": "https://api.github.com/users/gwillen/orgs",
      "repos_url": "https://api.github.com/users/gwillen/repos",
      "events_url": "https://api.github.com/users/gwillen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gwillen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8e1704c01537d1750555de23bfae00efa5864b3e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e1704c01537d1750555de23bfae00efa5864b3e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8e1704c01537d1750555de23bfae00efa5864b3e"
      }
    ],
    "stats": {
      "total": 68,
      "additions": 33,
      "deletions": 35
    },
    "files": [
      {
        "sha": "8d4fbba4fb0623940d877c2320d9b0345b4cb2c2",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/afd20a25f2937fee8d992c279631fa26cde4a7c8/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/afd20a25f2937fee8d992c279631fa26cde4a7c8/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=afd20a25f2937fee8d992c279631fa26cde4a7c8",
        "patch": "@@ -430,8 +430,8 @@ libbitcoin_common_a_SOURCES = \\\n   netaddress.cpp \\\n   netbase.cpp \\\n   policy/feerate.cpp \\\n-  psbt.cpp \\\n   protocol.cpp \\\n+  psbt.cpp \\\n   scheduler.cpp \\\n   script/descriptor.cpp \\\n   script/ismine.cpp \\"
      },
      {
        "sha": "19fb7b29f67f778be404f22474516ae62756df86",
        "filename": "src/core_io.h",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/afd20a25f2937fee8d992c279631fa26cde4a7c8/src/core_io.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/afd20a25f2937fee8d992c279631fa26cde4a7c8/src/core_io.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_io.h?ref=afd20a25f2937fee8d992c279631fa26cde4a7c8",
        "patch": "@@ -16,7 +16,6 @@ class CBlockHeader;\n class CScript;\n class CTransaction;\n struct CMutableTransaction;\n-struct PartiallySignedTransaction;\n class uint256;\n class UniValue;\n \n@@ -37,11 +36,6 @@ bool DecodeHexBlockHeader(CBlockHeader&, const std::string& hex_header);\n  */\n bool ParseHashStr(const std::string& strHex, uint256& result);\n std::vector<unsigned char> ParseHexUV(const UniValue& v, const std::string& strName);\n-\n-//! Decode a base64ed PSBT into a PartiallySignedTransaction\n-NODISCARD bool DecodeBase64PSBT(PartiallySignedTransaction& decoded_psbt, const std::string& base64_psbt, std::string& error);\n-//! Decode a raw (binary blob) PSBT into a PartiallySignedTransaction\n-NODISCARD bool DecodeRawPSBT(PartiallySignedTransaction& decoded_psbt, const std::string& raw_psbt, std::string& error);\n int ParseSighashString(const UniValue& sighash);\n \n // core_write.cpp"
      },
      {
        "sha": "a879a375cef4a38dc97de40068555fd318515613",
        "filename": "src/core_read.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 28,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/afd20a25f2937fee8d992c279631fa26cde4a7c8/src/core_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/afd20a25f2937fee8d992c279631fa26cde4a7c8/src/core_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_read.cpp?ref=afd20a25f2937fee8d992c279631fa26cde4a7c8",
        "patch": "@@ -4,7 +4,6 @@\n \n #include <core_io.h>\n \n-#include <psbt.h>\n #include <primitives/block.h>\n #include <primitives/transaction.h>\n #include <script/script.h>\n@@ -177,33 +176,6 @@ bool DecodeHexBlk(CBlock& block, const std::string& strHexBlk)\n     return true;\n }\n \n-bool DecodeBase64PSBT(PartiallySignedTransaction& psbt, const std::string& base64_tx, std::string& error)\n-{\n-    bool invalid;\n-    std::string tx_data = DecodeBase64(base64_tx, &invalid);\n-    if (invalid) {\n-        error = \"invalid base64\";\n-        return false;\n-    }\n-    return DecodeRawPSBT(psbt, tx_data, error);\n-}\n-\n-bool DecodeRawPSBT(PartiallySignedTransaction& psbt, const std::string& tx_data, std::string& error)\n-{\n-    CDataStream ss_data(tx_data.data(), tx_data.data() + tx_data.size(), SER_NETWORK, PROTOCOL_VERSION);\n-    try {\n-        ss_data >> psbt;\n-        if (!ss_data.empty()) {\n-            error = \"extra data after PSBT\";\n-            return false;\n-        }\n-    } catch (const std::exception& e) {\n-        error = e.what();\n-        return false;\n-    }\n-    return true;\n-}\n-\n bool ParseHashStr(const std::string& strHex, uint256& result)\n {\n     if ((strHex.size() != 64) || !IsHex(strHex))"
      },
      {
        "sha": "734e7897ecb1acbc5813803105d7b365681926f0",
        "filename": "src/psbt.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 0,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/afd20a25f2937fee8d992c279631fa26cde4a7c8/src/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/afd20a25f2937fee8d992c279631fa26cde4a7c8/src/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.cpp?ref=afd20a25f2937fee8d992c279631fa26cde4a7c8",
        "patch": "@@ -325,3 +325,30 @@ TransactionError CombinePSBTs(PartiallySignedTransaction& out, const std::vector\n \n     return TransactionError::OK;\n }\n+\n+bool DecodeBase64PSBT(PartiallySignedTransaction& psbt, const std::string& base64_tx, std::string& error)\n+{\n+    bool invalid;\n+    std::string tx_data = DecodeBase64(base64_tx, &invalid);\n+    if (invalid) {\n+        error = \"invalid base64\";\n+        return false;\n+    }\n+    return DecodeRawPSBT(psbt, tx_data, error);\n+}\n+\n+bool DecodeRawPSBT(PartiallySignedTransaction& psbt, const std::string& tx_data, std::string& error)\n+{\n+    CDataStream ss_data(tx_data.data(), tx_data.data() + tx_data.size(), SER_NETWORK, PROTOCOL_VERSION);\n+    try {\n+        ss_data >> psbt;\n+        if (!ss_data.empty()) {\n+            error = \"extra data after PSBT\";\n+            return false;\n+        }\n+    } catch (const std::exception& e) {\n+        error = e.what();\n+        return false;\n+    }\n+    return true;\n+}"
      },
      {
        "sha": "d89fd68c21ba3c180adaf13aabff192fd8724d5b",
        "filename": "src/psbt.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/afd20a25f2937fee8d992c279631fa26cde4a7c8/src/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/afd20a25f2937fee8d992c279631fa26cde4a7c8/src/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.h?ref=afd20a25f2937fee8d992c279631fa26cde4a7c8",
        "patch": "@@ -580,4 +580,9 @@ bool FinalizeAndExtractPSBT(PartiallySignedTransaction& psbtx, CMutableTransacti\n  */\n NODISCARD TransactionError CombinePSBTs(PartiallySignedTransaction& out, const std::vector<PartiallySignedTransaction>& psbtxs);\n \n+//! Decode a base64ed PSBT into a PartiallySignedTransaction\n+NODISCARD bool DecodeBase64PSBT(PartiallySignedTransaction& decoded_psbt, const std::string& base64_psbt, std::string& error);\n+//! Decode a raw (binary blob) PSBT into a PartiallySignedTransaction\n+NODISCARD bool DecodeRawPSBT(PartiallySignedTransaction& decoded_psbt, const std::string& raw_psbt, std::string& error);\n+\n #endif // BITCOIN_PSBT_H"
      }
    ]
  },
  {
    "sha": "ef22fe8c1f331b4f13f21a54d12030b92e83fbe7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZjIyZmU4YzFmMzMxYjRmMTNmMjFhNTRkMTIwMzBiOTJlODNmYmU3",
    "commit": {
      "author": {
        "name": "Glenn Willen",
        "email": "gwillen@nerdnet.org",
        "date": "2019-03-01T08:25:10Z"
      },
      "committer": {
        "name": "Glenn Willen",
        "email": "gwillen@nerdnet.org",
        "date": "2019-03-27T00:38:00Z"
      },
      "message": "Refactor analyzepsbt for use outside RPC code\n\nRefactor the analyzepsbt RPC into (1) an AnalyzePSBT function, which returns\nits output as a new strongly-typed PSBTAnalysis struct, and (2) a thin wrapper\nwhich converts the struct into a UniValue for RPC use.",
      "tree": {
        "sha": "4aef4053e59dc759ffbb3b0a18ad21b7af6fece6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4aef4053e59dc759ffbb3b0a18ad21b7af6fece6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ef22fe8c1f331b4f13f21a54d12030b92e83fbe7",
      "comment_count": 11,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef22fe8c1f331b4f13f21a54d12030b92e83fbe7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ef22fe8c1f331b4f13f21a54d12030b92e83fbe7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef22fe8c1f331b4f13f21a54d12030b92e83fbe7/comments",
    "author": {
      "login": "gwillen",
      "id": 458997,
      "node_id": "MDQ6VXNlcjQ1ODk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/458997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gwillen",
      "html_url": "https://github.com/gwillen",
      "followers_url": "https://api.github.com/users/gwillen/followers",
      "following_url": "https://api.github.com/users/gwillen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gwillen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gwillen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gwillen/subscriptions",
      "organizations_url": "https://api.github.com/users/gwillen/orgs",
      "repos_url": "https://api.github.com/users/gwillen/repos",
      "events_url": "https://api.github.com/users/gwillen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gwillen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gwillen",
      "id": 458997,
      "node_id": "MDQ6VXNlcjQ1ODk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/458997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gwillen",
      "html_url": "https://github.com/gwillen",
      "followers_url": "https://api.github.com/users/gwillen/followers",
      "following_url": "https://api.github.com/users/gwillen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gwillen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gwillen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gwillen/subscriptions",
      "organizations_url": "https://api.github.com/users/gwillen/orgs",
      "repos_url": "https://api.github.com/users/gwillen/repos",
      "events_url": "https://api.github.com/users/gwillen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gwillen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "afd20a25f2937fee8d992c279631fa26cde4a7c8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/afd20a25f2937fee8d992c279631fa26cde4a7c8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/afd20a25f2937fee8d992c279631fa26cde4a7c8"
      }
    ],
    "stats": {
      "total": 343,
      "additions": 213,
      "deletions": 130
    },
    "files": [
      {
        "sha": "184129e330be3b423dcba60618026990d79fe8ff",
        "filename": "src/psbt.cpp",
        "status": "modified",
        "additions": 138,
        "deletions": 1,
        "changes": 139,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ef22fe8c1f331b4f13f21a54d12030b92e83fbe7/src/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ef22fe8c1f331b4f13f21a54d12030b92e83fbe7/src/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.cpp?ref=ef22fe8c1f331b4f13f21a54d12030b92e83fbe7",
        "patch": "@@ -2,9 +2,14 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <coins.h>\n+#include <consensus/tx_verify.h>\n+#include <policy/policy.h>\n #include <psbt.h>\n #include <util/strencodings.h>\n \n+#include <numeric>\n+\n PartiallySignedTransaction::PartiallySignedTransaction(const CMutableTransaction& tx) : tx(tx)\n {\n     inputs.resize(tx.vin.size());\n@@ -205,7 +210,7 @@ void PSBTOutput::Merge(const PSBTOutput& output)\n     if (redeem_script.empty() && !output.redeem_script.empty()) redeem_script = output.redeem_script;\n     if (witness_script.empty() && !output.witness_script.empty()) witness_script = output.witness_script;\n }\n-bool PSBTInputSigned(PSBTInput& input)\n+bool PSBTInputSigned(const PSBTInput& input)\n {\n     return !input.final_script_sig.empty() || !input.final_script_witness.IsNull();\n }\n@@ -326,6 +331,138 @@ TransactionError CombinePSBTs(PartiallySignedTransaction& out, const std::vector\n     return TransactionError::OK;\n }\n \n+std::string PSBTRoleName(PSBTRole role) {\n+    switch (role) {\n+    case PSBTRole::UPDATER: return \"updater\";\n+    case PSBTRole::SIGNER: return \"signer\";\n+    case PSBTRole::FINALIZER: return \"finalizer\";\n+    case PSBTRole::EXTRACTOR: return \"extractor\";\n+    }\n+}\n+\n+PSBTAnalysis AnalyzePSBT(PartiallySignedTransaction psbtx)\n+{\n+    // Go through each input and build status\n+    PSBTAnalysis result;\n+\n+    bool calc_fee = true;\n+    bool all_final = true;\n+    bool only_missing_sigs = true;\n+    bool only_missing_final = false;\n+    CAmount in_amt = 0;\n+\n+    result.inputs.resize(psbtx.tx->vin.size());\n+\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        PSBTInput& input = psbtx.inputs[i];\n+        PSBTInputAnalysis& input_analysis = result.inputs[i];\n+\n+        // Check for a UTXO\n+        CTxOut utxo;\n+        if (psbtx.GetInputUTXO(utxo, i)) {\n+            in_amt += utxo.nValue;\n+            input_analysis.has_utxo = true;\n+        } else {\n+            input_analysis.has_utxo = false;\n+            input_analysis.is_final = false;\n+            input_analysis.next = PSBTRole::UPDATER;\n+            calc_fee = false;\n+        }\n+\n+        // Check if it is final\n+        if (!utxo.IsNull() && !PSBTInputSigned(input)) {\n+            input_analysis.is_final = false;\n+            all_final = false;\n+\n+            // Figure out what is missing\n+            SignatureData outdata;\n+            bool complete = SignPSBTInput(DUMMY_SIGNING_PROVIDER, psbtx, i, 1, &outdata);\n+\n+            // Things are missing\n+            if (!complete) {\n+                input_analysis.missing_pubkeys = outdata.missing_pubkeys;\n+                input_analysis.missing_redeem_script = outdata.missing_redeem_script;\n+                input_analysis.missing_witness_script = outdata.missing_witness_script;\n+                input_analysis.missing_sigs = outdata.missing_sigs;\n+\n+                // If we are only missing signatures and nothing else, then next is signer\n+                if (outdata.missing_pubkeys.empty() && outdata.missing_redeem_script.IsNull() && outdata.missing_witness_script.IsNull() && !outdata.missing_sigs.empty()) {\n+                    input_analysis.next = PSBTRole::SIGNER;\n+                } else {\n+                    only_missing_sigs = false;\n+                    input_analysis.next = PSBTRole::UPDATER;\n+                }\n+            } else {\n+                only_missing_final = true;\n+                input_analysis.next = PSBTRole::FINALIZER;\n+            }\n+        } else if (!utxo.IsNull()){\n+            input_analysis.is_final = true;\n+        }\n+    }\n+\n+    if (all_final) {\n+        only_missing_sigs = false;\n+        result.next = PSBTRole::EXTRACTOR;\n+    }\n+    if (calc_fee) {\n+        // Get the output amount\n+        CAmount out_amt = std::accumulate(psbtx.tx->vout.begin(), psbtx.tx->vout.end(), CAmount(0),\n+            [](CAmount a, const CTxOut& b) {\n+                return a += b.nValue;\n+            }\n+        );\n+\n+        // Get the fee\n+        CAmount fee = in_amt - out_amt;\n+        result.fee = fee;\n+\n+        // Estimate the size\n+        CMutableTransaction mtx(*psbtx.tx);\n+        CCoinsView view_dummy;\n+        CCoinsViewCache view(&view_dummy);\n+        bool success = true;\n+\n+        for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+            PSBTInput& input = psbtx.inputs[i];\n+            Coin newcoin;\n+\n+            if (!SignPSBTInput(DUMMY_SIGNING_PROVIDER, psbtx, i, 1, nullptr, true) || !psbtx.GetInputUTXO(newcoin.out, i)) {\n+                success = false;\n+                break;\n+            } else {\n+                mtx.vin[i].scriptSig = input.final_script_sig;\n+                mtx.vin[i].scriptWitness = input.final_script_witness;\n+                newcoin.nHeight = 1;\n+                view.AddCoin(psbtx.tx->vin[i].prevout, std::move(newcoin), true);\n+            }\n+        }\n+\n+        if (success) {\n+            CTransaction ctx = CTransaction(mtx);\n+            size_t size = GetVirtualTransactionSize(ctx, GetTransactionSigOpCost(ctx, view, STANDARD_SCRIPT_VERIFY_FLAGS));\n+            result.estimated_vsize = size;\n+            // Estimate fee rate\n+            CFeeRate feerate(fee, size);\n+            result.estimated_feerate = feerate;\n+        }\n+\n+        if (only_missing_sigs) {\n+            result.next = PSBTRole::SIGNER;\n+        } else if (only_missing_final) {\n+            result.next = PSBTRole::FINALIZER;\n+        } else if (all_final) {\n+            result.next = PSBTRole::EXTRACTOR;\n+        } else {\n+            result.next = PSBTRole::UPDATER;\n+        }\n+    } else {\n+        result.next = PSBTRole::UPDATER;\n+    }\n+\n+    return result;\n+}\n+\n bool DecodeBase64PSBT(PartiallySignedTransaction& psbt, const std::string& base64_tx, std::string& error)\n {\n     bool invalid;"
      },
      {
        "sha": "0f17a71a4434458ba00f5dcc13782034f687691d",
        "filename": "src/psbt.h",
        "status": "modified",
        "additions": 39,
        "deletions": 1,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ef22fe8c1f331b4f13f21a54d12030b92e83fbe7/src/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ef22fe8c1f331b4f13f21a54d12030b92e83fbe7/src/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.h?ref=ef22fe8c1f331b4f13f21a54d12030b92e83fbe7",
        "patch": "@@ -7,6 +7,8 @@\n \n #include <attributes.h>\n #include <node/transaction.h>\n+#include <optional.h>\n+#include <policy/feerate.h>\n #include <primitives/transaction.h>\n #include <pubkey.h>\n #include <script/sign.h>\n@@ -548,8 +550,36 @@ struct PartiallySignedTransaction\n     }\n };\n \n+enum class PSBTRole {\n+    UPDATER,\n+    SIGNER,\n+    FINALIZER,\n+    EXTRACTOR\n+};\n+\n+struct PSBTInputAnalysis {\n+    bool has_utxo;\n+    bool is_final;\n+    PSBTRole next;\n+\n+    std::vector<CKeyID> missing_pubkeys;\n+    std::vector<CKeyID> missing_sigs;\n+    uint160 missing_redeem_script;\n+    uint256 missing_witness_script;\n+};\n+\n+struct PSBTAnalysis {\n+    Optional<size_t> estimated_vsize;\n+    Optional<CFeeRate> estimated_feerate;\n+    Optional<CAmount> fee;\n+    std::vector<PSBTInputAnalysis> inputs;\n+    PSBTRole next;\n+};\n+\n+std::string PSBTRoleName(PSBTRole role);\n+\n /** Checks whether a PSBTInput is already signed. */\n-bool PSBTInputSigned(PSBTInput& input);\n+bool PSBTInputSigned(const PSBTInput& input);\n \n /** Signs a PSBTInput, verifying that all provided data matches what is being signed. */\n bool SignPSBTInput(const SigningProvider& provider, PartiallySignedTransaction& psbt, int index, int sighash = SIGHASH_ALL, SignatureData* out_sigdata = nullptr, bool use_dummy = false);\n@@ -580,6 +610,14 @@ bool FinalizeAndExtractPSBT(PartiallySignedTransaction& psbtx, CMutableTransacti\n  */\n NODISCARD TransactionError CombinePSBTs(PartiallySignedTransaction& out, const std::vector<PartiallySignedTransaction>& psbtxs);\n \n+/**\n+ * Provides helpful miscellaneous information about where a PSBT is in the signing workflow.\n+ *\n+ * @param[in] psbtx the PSBT to analyze\n+ * @return A PSBTAnalysis with information about the provided PSBT.\n+ */\n+PSBTAnalysis AnalyzePSBT(PartiallySignedTransaction psbtx);\n+\n //! Decode a base64ed PSBT into a PartiallySignedTransaction\n NODISCARD bool DecodeBase64PSBT(PartiallySignedTransaction& decoded_psbt, const std::string& base64_psbt, std::string& error);\n //! Decode a raw (binary blob) PSBT into a PartiallySignedTransaction"
      },
      {
        "sha": "7dd8abc19318f2c19e788e00335c86e77b2ce089",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 128,
        "changes": 164,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ef22fe8c1f331b4f13f21a54d12030b92e83fbe7/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ef22fe8c1f331b4f13f21a54d12030b92e83fbe7/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=ef22fe8c1f331b4f13f21a54d12030b92e83fbe7",
        "patch": "@@ -1895,148 +1895,56 @@ UniValue analyzepsbt(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n     }\n \n-    // Go through each input and build status\n+    PSBTAnalysis psbta = AnalyzePSBT(psbtx);\n+\n     UniValue result(UniValue::VOBJ);\n     UniValue inputs_result(UniValue::VARR);\n-    bool calc_fee = true;\n-    bool all_final = true;\n-    bool only_missing_sigs = true;\n-    bool only_missing_final = false;\n-    CAmount in_amt = 0;\n-    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n-        PSBTInput& input = psbtx.inputs[i];\n+    for (const auto& input : psbta.inputs) {\n         UniValue input_univ(UniValue::VOBJ);\n         UniValue missing(UniValue::VOBJ);\n \n-        // Check for a UTXO\n-        CTxOut utxo;\n-        if (psbtx.GetInputUTXO(utxo, i)) {\n-            in_amt += utxo.nValue;\n-            input_univ.pushKV(\"has_utxo\", true);\n-        } else {\n-            input_univ.pushKV(\"has_utxo\", false);\n-            input_univ.pushKV(\"is_final\", false);\n-            input_univ.pushKV(\"next\", \"updater\");\n-            calc_fee = false;\n-        }\n+        input_univ.pushKV(\"has_utxo\", input.has_utxo);\n+        input_univ.pushKV(\"is_final\", input.is_final);\n+        input_univ.pushKV(\"next\", PSBTRoleName(input.next));\n \n-        // Check if it is final\n-        if (!utxo.IsNull() && !PSBTInputSigned(input)) {\n-            input_univ.pushKV(\"is_final\", false);\n-            all_final = false;\n-\n-            // Figure out what is missing\n-            SignatureData outdata;\n-            bool complete = SignPSBTInput(DUMMY_SIGNING_PROVIDER, psbtx, i, 1, &outdata);\n-\n-            // Things are missing\n-            if (!complete) {\n-                if (!outdata.missing_pubkeys.empty()) {\n-                    // Missing pubkeys\n-                    UniValue missing_pubkeys_univ(UniValue::VARR);\n-                    for (const CKeyID& pubkey : outdata.missing_pubkeys) {\n-                        missing_pubkeys_univ.push_back(HexStr(pubkey));\n-                    }\n-                    missing.pushKV(\"pubkeys\", missing_pubkeys_univ);\n-                }\n-                if (!outdata.missing_redeem_script.IsNull()) {\n-                    // Missing redeemScript\n-                    missing.pushKV(\"redeemscript\", HexStr(outdata.missing_redeem_script));\n-                }\n-                if (!outdata.missing_witness_script.IsNull()) {\n-                    // Missing witnessScript\n-                    missing.pushKV(\"witnessscript\", HexStr(outdata.missing_witness_script));\n-                }\n-                if (!outdata.missing_sigs.empty()) {\n-                    // Missing sigs\n-                    UniValue missing_sigs_univ(UniValue::VARR);\n-                    for (const CKeyID& pubkey : outdata.missing_sigs) {\n-                        missing_sigs_univ.push_back(HexStr(pubkey));\n-                    }\n-                    missing.pushKV(\"signatures\", missing_sigs_univ);\n-                }\n-                input_univ.pushKV(\"missing\", missing);\n-\n-                // If we are only missing signatures and nothing else, then next is signer\n-                if (outdata.missing_pubkeys.empty() && outdata.missing_redeem_script.IsNull() && outdata.missing_witness_script.IsNull() && !outdata.missing_sigs.empty()) {\n-                    input_univ.pushKV(\"next\", \"signer\");\n-                } else {\n-                    only_missing_sigs = false;\n-                    input_univ.pushKV(\"next\", \"updater\");\n-                }\n-            } else {\n-                only_missing_final = true;\n-                input_univ.pushKV(\"next\", \"finalizer\");\n+        if (!input.missing_pubkeys.empty()) {\n+            UniValue missing_pubkeys_univ(UniValue::VARR);\n+            for (const CKeyID& pubkey : input.missing_pubkeys) {\n+                missing_pubkeys_univ.push_back(HexStr(pubkey));\n             }\n-        } else if (!utxo.IsNull()){\n-            input_univ.pushKV(\"is_final\", true);\n+            missing.pushKV(\"pubkeys\", missing_pubkeys_univ);\n+        }\n+        if (!input.missing_redeem_script.IsNull()) {\n+            missing.pushKV(\"redeemscript\", HexStr(input.missing_redeem_script));\n+        }\n+        if (!input.missing_witness_script.IsNull()) {\n+            missing.pushKV(\"witnessscript\", HexStr(input.missing_witness_script));\n+        }\n+        if (!input.missing_sigs.empty()) {\n+            UniValue missing_sigs_univ(UniValue::VARR);\n+            for (const CKeyID& pubkey : input.missing_sigs) {\n+                missing_sigs_univ.push_back(HexStr(pubkey));\n+            }\n+            missing.pushKV(\"signatures\", missing_sigs_univ);\n+        }\n+        if (!missing.getKeys().empty()) {\n+            input_univ.pushKV(\"missing\", missing);\n         }\n         inputs_result.push_back(input_univ);\n     }\n     result.pushKV(\"inputs\", inputs_result);\n \n-    if (all_final) {\n-        only_missing_sigs = false;\n-        result.pushKV(\"next\", \"extractor\");\n+    if (psbta.estimated_vsize != nullopt) {\n+        result.pushKV(\"estimated_vsize\", (int)*psbta.estimated_vsize);\n     }\n-    if (calc_fee) {\n-        // Get the output amount\n-        CAmount out_amt = std::accumulate(psbtx.tx->vout.begin(), psbtx.tx->vout.end(), CAmount(0),\n-            [](CAmount a, const CTxOut& b) {\n-                return a += b.nValue;\n-            }\n-        );\n-\n-        // Get the fee\n-        CAmount fee = in_amt - out_amt;\n-\n-        // Estimate the size\n-        CMutableTransaction mtx(*psbtx.tx);\n-        CCoinsView view_dummy;\n-        CCoinsViewCache view(&view_dummy);\n-        bool success = true;\n-\n-        for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n-            PSBTInput& input = psbtx.inputs[i];\n-            if (SignPSBTInput(DUMMY_SIGNING_PROVIDER, psbtx, i, 1, nullptr, true)) {\n-                mtx.vin[i].scriptSig = input.final_script_sig;\n-                mtx.vin[i].scriptWitness = input.final_script_witness;\n-\n-                Coin newcoin;\n-                if (!psbtx.GetInputUTXO(newcoin.out, i)) {\n-                    success = false;\n-                    break;\n-                }\n-                newcoin.nHeight = 1;\n-                view.AddCoin(psbtx.tx->vin[i].prevout, std::move(newcoin), true);\n-            } else {\n-                success = false;\n-                break;\n-            }\n-        }\n-\n-        if (success) {\n-            CTransaction ctx = CTransaction(mtx);\n-            size_t size = GetVirtualTransactionSize(ctx, GetTransactionSigOpCost(ctx, view, STANDARD_SCRIPT_VERIFY_FLAGS));\n-            result.pushKV(\"estimated_vsize\", (int)size);\n-            // Estimate fee rate\n-            CFeeRate feerate(fee, size);\n-            result.pushKV(\"estimated_feerate\", ValueFromAmount(feerate.GetFeePerK()));\n-        }\n-        result.pushKV(\"fee\", ValueFromAmount(fee));\n-\n-        if (only_missing_sigs) {\n-            result.pushKV(\"next\", \"signer\");\n-        } else if (only_missing_final) {\n-            result.pushKV(\"next\", \"finalizer\");\n-        } else if (all_final) {\n-            result.pushKV(\"next\", \"extractor\");\n-        } else {\n-            result.pushKV(\"next\", \"updater\");\n-        }\n-    } else {\n-        result.pushKV(\"next\", \"updater\");\n+    if (psbta.estimated_feerate != nullopt) {\n+        result.pushKV(\"estimated_feerate\", ValueFromAmount(psbta.estimated_feerate->GetFeePerK()));\n     }\n+    if (psbta.fee != nullopt) {\n+        result.pushKV(\"fee\", ValueFromAmount(*psbta.fee));\n+    }\n+    result.pushKV(\"next\", PSBTRoleName(psbta.next));\n+\n     return result;\n }\n "
      }
    ]
  },
  {
    "sha": "892eff05f115c0b002d0e0b6ffc3ab418480d25c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4OTJlZmYwNWYxMTVjMGIwMDJkMGUwYjZmZmMzYWI0MTg0ODBkMjVj",
    "commit": {
      "author": {
        "name": "Glenn Willen",
        "email": "gwillen@nerdnet.org",
        "date": "2019-03-12T23:08:35Z"
      },
      "committer": {
        "name": "Glenn Willen",
        "email": "gwillen@nerdnet.org",
        "date": "2019-03-27T00:38:00Z"
      },
      "message": "Add documentation of struct PSBTAnalysis et al",
      "tree": {
        "sha": "452dd0a9acdfedd386e6884bfa65c2c740b6e25d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/452dd0a9acdfedd386e6884bfa65c2c740b6e25d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/892eff05f115c0b002d0e0b6ffc3ab418480d25c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/892eff05f115c0b002d0e0b6ffc3ab418480d25c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/892eff05f115c0b002d0e0b6ffc3ab418480d25c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/892eff05f115c0b002d0e0b6ffc3ab418480d25c/comments",
    "author": {
      "login": "gwillen",
      "id": 458997,
      "node_id": "MDQ6VXNlcjQ1ODk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/458997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gwillen",
      "html_url": "https://github.com/gwillen",
      "followers_url": "https://api.github.com/users/gwillen/followers",
      "following_url": "https://api.github.com/users/gwillen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gwillen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gwillen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gwillen/subscriptions",
      "organizations_url": "https://api.github.com/users/gwillen/orgs",
      "repos_url": "https://api.github.com/users/gwillen/repos",
      "events_url": "https://api.github.com/users/gwillen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gwillen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gwillen",
      "id": 458997,
      "node_id": "MDQ6VXNlcjQ1ODk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/458997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gwillen",
      "html_url": "https://github.com/gwillen",
      "followers_url": "https://api.github.com/users/gwillen/followers",
      "following_url": "https://api.github.com/users/gwillen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gwillen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gwillen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gwillen/subscriptions",
      "organizations_url": "https://api.github.com/users/gwillen/orgs",
      "repos_url": "https://api.github.com/users/gwillen/repos",
      "events_url": "https://api.github.com/users/gwillen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gwillen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ef22fe8c1f331b4f13f21a54d12030b92e83fbe7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef22fe8c1f331b4f13f21a54d12030b92e83fbe7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ef22fe8c1f331b4f13f21a54d12030b92e83fbe7"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 19,
      "deletions": 13
    },
    "files": [
      {
        "sha": "fcb3337a537f9ac116f1cda3ec5ec11129fa902d",
        "filename": "src/psbt.h",
        "status": "modified",
        "additions": 19,
        "deletions": 13,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/892eff05f115c0b002d0e0b6ffc3ab418480d25c/src/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/892eff05f115c0b002d0e0b6ffc3ab418480d25c/src/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.h?ref=892eff05f115c0b002d0e0b6ffc3ab418480d25c",
        "patch": "@@ -557,23 +557,29 @@ enum class PSBTRole {\n     EXTRACTOR\n };\n \n+/**\n+ * Holds an analysis of one input from a PSBT\n+ */\n struct PSBTInputAnalysis {\n-    bool has_utxo;\n-    bool is_final;\n-    PSBTRole next;\n-\n-    std::vector<CKeyID> missing_pubkeys;\n-    std::vector<CKeyID> missing_sigs;\n-    uint160 missing_redeem_script;\n-    uint256 missing_witness_script;\n+    bool has_utxo; //!< Whether we have UTXO information for this input\n+    bool is_final; //!< Whether the input has all required information including signatures\n+    PSBTRole next; //!< Which of the BIP 174 roles needs to handle this input next\n+\n+    std::vector<CKeyID> missing_pubkeys; //!< Pubkeys whose BIP32 derivation path is missing\n+    std::vector<CKeyID> missing_sigs;    //!< Pubkeys whose signatures are missing\n+    uint160 missing_redeem_script;       //!< Hash160 of redeem script, if missing\n+    uint256 missing_witness_script;      //!< SHA256 of witness script, if missing\n };\n \n+/**\n+ * Holds the results of AnalyzePSBT (miscellaneous information about a PSBT)\n+ */\n struct PSBTAnalysis {\n-    Optional<size_t> estimated_vsize;\n-    Optional<CFeeRate> estimated_feerate;\n-    Optional<CAmount> fee;\n-    std::vector<PSBTInputAnalysis> inputs;\n-    PSBTRole next;\n+    Optional<size_t> estimated_vsize;      //!< Estimated weight of the transaction\n+    Optional<CFeeRate> estimated_feerate;  //!< Estimated feerate (fee / weight) of the transaction\n+    Optional<CAmount> fee;                 //!< Amount of fee being paid by the transaction\n+    std::vector<PSBTInputAnalysis> inputs; //!< More information about the individual inputs of the transaction\n+    PSBTRole next;                         //!< Which of the BIP 174 roles needs to handle the transaction next\n };\n \n std::string PSBTRoleName(PSBTRole role);"
      }
    ]
  }
]