[
  {
    "sha": "d37756f380b27d259a7818078ddf02caa0a4578a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMzc3NTZmMzgwYjI3ZDI1OWE3ODE4MDc4ZGRmMDJjYWEwYTQ1Nzhh",
    "commit": {
      "author": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-09-04T20:04:45Z"
      },
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-09-18T19:24:12Z"
      },
      "message": "rpc, wallet: Ensure wallet has synced with mempool on startup\n\nThis is used to prevent race conditions when using wallet RPCs right after starting a node. A wallet that is not synced with the mempool could temporarily report false balances because it's own transactions with change outputs do not appear to be in the mempool and are not trusted because of that.",
      "tree": {
        "sha": "874bf79d697cbca019b30ac4a4beaed8c718f46b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/874bf79d697cbca019b30ac4a4beaed8c718f46b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d37756f380b27d259a7818078ddf02caa0a4578a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAl9lCV4VHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jNL4QP/3lUO9YcSjR4fB67u47QhXCbomcj\nWsEsA+3dHwkLuWMB3r5DNaXH7QJz2k+PuXMYsP61n4J8erXI+i78O2JULXvbHd1v\nzatvoAB5N5HBafz0e9JzsQlP4pG0vKYXVtlINoHo+arzqQ88ZSuU69d/a9OINWg7\ny+3NdZ3lY1BAy2DTXmU1o36fM2f/pqn3YqnGSnTb5xF2bF7MpOyWZmfSGx1rZRQm\nEJ0TNSCbBKqTejuGAqRAhlPSVyeFX84ptkE8Qa5Tu7E5FOsyh00X+o+anPWpcGs9\nQKqeXoiPVLcueDEWFdUuLMSoJw4+qEr/rhQPEHLpnVITcMyFLhch3OBexUbSQJXY\njyajAnYOeS5IY9KbBc5DIkJ6yaqLz5NVfouwigCWwgd02YLikojfUGfNva7Inkzs\nUPeNI5tvV3JnwrDnytrvQpeyVvqee4URXgQpsQgLTRlzOIrkVWs7ja9lB6XkxsCf\nLz+Bxg/iS+2UMxcO++ytZRSXflu36+6TL26GTbYSPC0FMv61eZzM0R+R6wTwaG/4\nli5b9qbR6OIssJU9rfjXNd4Fz7pH+21y2S0CztsJFBrwcBdSOHdlWFO92Hyfz2VB\ng00QMED/IYchxqxg8jMXE1JeFUY0PmELF8V1bT2T6Qq+8NA7frsBM78Iw7jWr8j6\nMhro7nW26qadyT2S\n=IQUJ\n-----END PGP SIGNATURE-----",
        "payload": "tree 874bf79d697cbca019b30ac4a4beaed8c718f46b\nparent 652c45fdbbd55bde95c8c6cf08a5feb6055ac112\nauthor Fabian Jahr <fjahr@protonmail.com> 1599249885 +0200\ncommitter Fabian Jahr <fjahr@protonmail.com> 1600457052 +0200\n\nrpc, wallet: Ensure wallet has synced with mempool on startup\n\nThis is used to prevent race conditions when using wallet RPCs right after starting a node. A wallet that is not synced with the mempool could temporarily report false balances because it's own transactions with change outputs do not appear to be in the mempool and are not trusted because of that.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d37756f380b27d259a7818078ddf02caa0a4578a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d37756f380b27d259a7818078ddf02caa0a4578a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d37756f380b27d259a7818078ddf02caa0a4578a/comments",
    "author": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "652c45fdbbd55bde95c8c6cf08a5feb6055ac112",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/652c45fdbbd55bde95c8c6cf08a5feb6055ac112",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/652c45fdbbd55bde95c8c6cf08a5feb6055ac112"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 34,
      "deletions": 5
    },
    "files": [
      {
        "sha": "33e82c56c2c42eb99d47411d2b3f24499c9f4cc1",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 5,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d37756f380b27d259a7818078ddf02caa0a4578a/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d37756f380b27d259a7818078ddf02caa0a4578a/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=d37756f380b27d259a7818078ddf02caa0a4578a",
        "patch": "@@ -77,6 +77,20 @@ static bool ParseIncludeWatchonly(const UniValue& include_watchonly, const CWall\n }\n \n \n+static CWallet* GetReadyWallet(std::shared_ptr<CWallet> const wallet) {\n+    CWallet* const pwallet = wallet.get();\n+\n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    pwallet->BlockUntilSyncedToCurrentChain();\n+\n+    // Ensure that the mempool has been synced at least once on startup\n+    if (!pwallet->mempoolSynced()) pwallet->syncMempool();\n+\n+    return pwallet;\n+}\n+\n+\n /** Checks if a CKey is in the given CWallet compressed or otherwise*/\n bool HaveKey(const SigningProvider& wallet, const CKey& key)\n {\n@@ -757,11 +771,7 @@ static UniValue getbalance(const JSONRPCRequest& request)\n \n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n-    const CWallet* const pwallet = wallet.get();\n-\n-    // Make sure the results are valid at least up to the most recent block\n-    // the user could have gotten from another RPC command prior to now\n-    pwallet->BlockUntilSyncedToCurrentChain();\n+    const CWallet* const pwallet = GetReadyWallet(wallet);\n \n     LOCK(pwallet->cs_wallet);\n "
      },
      {
        "sha": "6167d450731fc3ffffb70223302b238afffee77a",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d37756f380b27d259a7818078ddf02caa0a4578a/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d37756f380b27d259a7818078ddf02caa0a4578a/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=d37756f380b27d259a7818078ddf02caa0a4578a",
        "patch": "@@ -4151,6 +4151,10 @@ bool CWallet::UpgradeWallet(int version, bilingual_str& error, std::vector<bilin\n \n void CWallet::postInitProcess()\n {\n+    syncMempool();\n+}\n+\n+void CWallet::syncMempool() {\n     LOCK(cs_wallet);\n \n     // Add wallet transactions that aren't already in a block to mempool\n@@ -4159,6 +4163,10 @@ void CWallet::postInitProcess()\n \n     // Update wallet transactions with current mempool transactions.\n     chain().requestMempoolTransactions(*this);\n+\n+    // After running the initial process the wallet is ready to\n+    // respond to typical requests like balances etc.\n+    setMempoolSynced();\n }\n \n bool CWallet::BackupWallet(const std::string& strDest) const"
      },
      {
        "sha": "850bd85a33028ab6f29fe5d8d370af46d3c95dd6",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d37756f380b27d259a7818078ddf02caa0a4578a/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d37756f380b27d259a7818078ddf02caa0a4578a/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=d37756f380b27d259a7818078ddf02caa0a4578a",
        "patch": "@@ -725,13 +725,22 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n \n     bool CreateTransactionInternal(const std::vector<CRecipient>& vecSend, CTransactionRef& tx, CAmount& nFeeRet, int& nChangePosInOut, bilingual_str& error, const CCoinControl& coin_control, bool sign);\n \n+    /** Wallet was initially synced with the mempool. */\n+    bool m_mempool_synced{false};\n+\n public:\n     /*\n      * Main wallet lock.\n      * This lock protects all the fields added by CWallet.\n      */\n     mutable RecursiveMutex cs_wallet;\n \n+    /** Indicated the wallet was initially synced with the mempool. */\n+    void setMempoolSynced() { m_mempool_synced = true; };\n+\n+    /** True if the wallet was initially synced with the mempool. */\n+    bool mempoolSynced() const { return m_mempool_synced; };\n+\n     /** Get database handle used by this wallet. Ideally this function would\n      * not be necessary.\n      */\n@@ -1154,6 +1163,8 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n      */\n     void postInitProcess();\n \n+    void syncMempool();\n+\n     bool BackupWallet(const std::string& strDest) const;\n \n     /* Returns true if HD is enabled */"
      }
    ]
  },
  {
    "sha": "40433cbf778803d43dc1e56ef8c1d447a570acb4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MDQzM2NiZjc3ODgwM2Q0M2RjMWU1NmVmOGMxZDQ0N2E1NzBhY2I0",
    "commit": {
      "author": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-09-18T15:55:07Z"
      },
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-09-18T19:24:14Z"
      },
      "message": "test: Remove obsolete calls to syncwithvalidationinterfacequeue",
      "tree": {
        "sha": "91f89d882e526c587bfca64956b46c8a2e67f4b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/91f89d882e526c587bfca64956b46c8a2e67f4b6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/40433cbf778803d43dc1e56ef8c1d447a570acb4",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAl9lCV4VHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jNnk4P/i+SEudcXG72tTKT2J1AiTpzc+xT\nhi6Dhryul0Iugow6Akk0wIdch5KKwQtIZvfiWvtguAS7RCVw705mk3EtitFHV552\nxFJT98AFmZXsvNOdsihYrSpo7AJH2C6GdBJozpoBqVZQ8J4gsIn4W576nqROIRoz\n7CBfNlm+zGlNeCJtMQEt52X13AUCofQJhUSao3NZGoBpxBvoc60OdDyO/6OmUwG+\nOhzfuFP3hY881cFzLUMVVC0kHuFq9yLdSQgmtEV5gjn1pGnbZTDTrTJq3YZPzCCV\n/AYdzWB7mjaIftplXoWPJkrUnASb8RT5y3B5EXb1ylQFKDUgxy66/3oU9+vyYfqP\nSexgp0HPq6ULRmqd3Zm8IM/m8yxCMrTHkZzOsT53wDntkMGg1XDxnOkIs9Mb2p9u\n2NnYLR/etaM4Z2ynwpgX3Fg3cWvLH5T1JuRGR4FtOwf8c6iSaEL0RPChjv2Usezh\n5HrDvlOKReko3zUmXZ6bV+YDXJGa5o3Uh9nln27CY5aAJGn5ztdvzEO6aUpiPeLv\nhEbthnJvjiKZ3TsXDog9ONwm57sZbFK/HzJYh465hYOmGChNnkyqz+JBYm8Nc0Q9\nTayINTp2ssewx4x2ewZeh1eDrjaMoEGsW+cgIMePmbGOT6LdY0Zp8tIH0O2f11Kf\nh5pXkfl8A9OY3uyt\n=rgoe\n-----END PGP SIGNATURE-----",
        "payload": "tree 91f89d882e526c587bfca64956b46c8a2e67f4b6\nparent d37756f380b27d259a7818078ddf02caa0a4578a\nauthor Fabian Jahr <fjahr@protonmail.com> 1600444507 +0200\ncommitter Fabian Jahr <fjahr@protonmail.com> 1600457054 +0200\n\ntest: Remove obsolete calls to syncwithvalidationinterfacequeue\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/40433cbf778803d43dc1e56ef8c1d447a570acb4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/40433cbf778803d43dc1e56ef8c1d447a570acb4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/40433cbf778803d43dc1e56ef8c1d447a570acb4/comments",
    "author": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d37756f380b27d259a7818078ddf02caa0a4578a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d37756f380b27d259a7818078ddf02caa0a4578a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d37756f380b27d259a7818078ddf02caa0a4578a"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 0,
      "deletions": 4
    },
    "files": [
      {
        "sha": "b61e412a2d573ccde056ba35c460d46360151c2f",
        "filename": "test/functional/mempool_persist.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/40433cbf778803d43dc1e56ef8c1d447a570acb4/test/functional/mempool_persist.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/40433cbf778803d43dc1e56ef8c1d447a570acb4/test/functional/mempool_persist.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_persist.py?ref=40433cbf778803d43dc1e56ef8c1d447a570acb4",
        "patch": "@@ -111,7 +111,6 @@ def run_test(self):\n         assert_equal(tx_creation_time, self.nodes[0].getmempoolentry(txid=last_txid)['time'])\n \n         # Verify accounting of mempool transactions after restart is correct\n-        self.nodes[2].syncwithvalidationinterfacequeue()  # Flush mempool to wallet\n         assert_equal(node2_balance, self.nodes[2].getbalance())\n \n         # start node0 with wallet disabled so wallet transactions don't get resubmitted"
      },
      {
        "sha": "147c43f2f7c541204f88fda720fd2e420930c7fe",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/40433cbf778803d43dc1e56ef8c1d447a570acb4/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/40433cbf778803d43dc1e56ef8c1d447a570acb4/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=40433cbf778803d43dc1e56ef8c1d447a570acb4",
        "patch": "@@ -596,9 +596,6 @@ def run_test(self):\n         # wait until the wallet has submitted all transactions to the mempool\n         self.wait_until(lambda: len(self.nodes[0].getrawmempool()) == chainlimit * 2)\n \n-        # Prevent potential race condition when calling wallet RPCs right after restart\n-        self.nodes[0].syncwithvalidationinterfacequeue()\n-\n         node0_balance = self.nodes[0].getbalance()\n         # With walletrejectlongchains we will not create the tx and store it in our wallet.\n         assert_raises_rpc_error(-6, \"Transaction has too long of a mempool chain\", self.nodes[0].sendtoaddress, sending_addr, node0_balance - Decimal('0.01'))"
      }
    ]
  },
  {
    "sha": "c34dd415ca1c5efefd4b4459867c5a096b629484",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMzRkZDQxNWNhMWM1ZWZlZmQ0YjQ0NTk4NjdjNWEwOTZiNjI5NDg0",
    "commit": {
      "author": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-09-18T16:22:25Z"
      },
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-09-18T19:24:14Z"
      },
      "message": "rpc, wallet: Use EnsureWalletIsReady in all wallet RPCs",
      "tree": {
        "sha": "93153f01756d1f75141ac95a57f0929cff3c8222",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/93153f01756d1f75141ac95a57f0929cff3c8222"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c34dd415ca1c5efefd4b4459867c5a096b629484",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAl9lCV4VHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jN50IQAJYe/Y/Muafmml4xBw/pBLvqOqWc\nggz4v2nBSh5MPH+paZqRHTQv/kxMZ4YhgMLkMiiO8ICLHT8WVgtTJSajoZPuDETA\neN+Kn0R8ORwjsVcUjOppTTj8oQGv6xo7Rpbkv2FCSSRzD8TqFpuB48rj+pZLbXCG\nSlNpr8fhGn4ptZdb9Poho9FC6rCo0n/1rMBZlUxLnoJkCPyqyrOcZMWCTUhA8tJx\nZIj4xIrx5K0UAxTRoNbgtSNvJc4H0JxKi9vmChPXKJrIWGadpTe4fmoOyUaSG9Rv\n+LzsTk5UxTham10oL+PFd58791v6QWx54Aoan+Iqsz1iu+nJSiUkEtMI8TFH4b+y\n1ejlmm6e4ItVdNzzIXhkNtKjejkJgPE9UhIC2HyAcGyINn2UbqOmxEuTV9nEf7um\nCfs9EaFnnF9y83qVg101T4aDN76O6ASpoo1aq5gvrqf4HHHo2kKiySsdgql2u8R/\nMbxg963bYT+ybjwUtAl45Vw+HzOw/IHJwiybVnZinH4NQwMenzCVye5OqpK9RM5v\nEG7468JyAKRu+4g5K8jiD7avI7/BGEiAxr27DGR0WrBUlmPKjLRn4yv96APBJaZZ\nLvFLW2/taO/MKoC14vCoopVPiKor7JOKNX7Xi6aA+FaMHjOspPXHpKZ7YxiaGITx\n/jxTbdt8TXyFiMAb\n=6fhG\n-----END PGP SIGNATURE-----",
        "payload": "tree 93153f01756d1f75141ac95a57f0929cff3c8222\nparent 40433cbf778803d43dc1e56ef8c1d447a570acb4\nauthor Fabian Jahr <fjahr@protonmail.com> 1600446145 +0200\ncommitter Fabian Jahr <fjahr@protonmail.com> 1600457054 +0200\n\nrpc, wallet: Use EnsureWalletIsReady in all wallet RPCs\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c34dd415ca1c5efefd4b4459867c5a096b629484",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c34dd415ca1c5efefd4b4459867c5a096b629484",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c34dd415ca1c5efefd4b4459867c5a096b629484/comments",
    "author": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "40433cbf778803d43dc1e56ef8c1d447a570acb4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/40433cbf778803d43dc1e56ef8c1d447a570acb4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/40433cbf778803d43dc1e56ef8c1d447a570acb4"
      }
    ],
    "stats": {
      "total": 119,
      "additions": 22,
      "deletions": 97
    },
    "files": [
      {
        "sha": "cb0ff2caaa734ff061a000c89173c86b9625fe92",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 97,
        "changes": 119,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c34dd415ca1c5efefd4b4459867c5a096b629484/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c34dd415ca1c5efefd4b4459867c5a096b629484/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=c34dd415ca1c5efefd4b4459867c5a096b629484",
        "patch": "@@ -462,11 +462,7 @@ static UniValue sendtoaddress(const JSONRPCRequest& request)\n \n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n-    CWallet* const pwallet = wallet.get();\n-\n-    // Make sure the results are valid at least up to the most recent block\n-    // the user could have gotten from another RPC command prior to now\n-    pwallet->BlockUntilSyncedToCurrentChain();\n+    CWallet* const pwallet = GetReadyWallet(wallet);\n \n     LOCK(pwallet->cs_wallet);\n \n@@ -538,11 +534,7 @@ static UniValue listaddressgroupings(const JSONRPCRequest& request)\n \n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n-    const CWallet* const pwallet = wallet.get();\n-\n-    // Make sure the results are valid at least up to the most recent block\n-    // the user could have gotten from another RPC command prior to now\n-    pwallet->BlockUntilSyncedToCurrentChain();\n+    const CWallet* const pwallet = GetReadyWallet(wallet);\n \n     LOCK(pwallet->cs_wallet);\n \n@@ -594,7 +586,7 @@ static UniValue signmessage(const JSONRPCRequest& request)\n \n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n-    const CWallet* const pwallet = wallet.get();\n+    const CWallet* const pwallet = GetReadyWallet(wallet);\n \n     LOCK(pwallet->cs_wallet);\n \n@@ -695,11 +687,7 @@ static UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n \n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n-    const CWallet* const pwallet = wallet.get();\n-\n-    // Make sure the results are valid at least up to the most recent block\n-    // the user could have gotten from another RPC command prior to now\n-    pwallet->BlockUntilSyncedToCurrentChain();\n+    const CWallet* const pwallet = GetReadyWallet(wallet);\n \n     LOCK(pwallet->cs_wallet);\n \n@@ -732,11 +720,7 @@ static UniValue getreceivedbylabel(const JSONRPCRequest& request)\n \n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n-    const CWallet* const pwallet = wallet.get();\n-\n-    // Make sure the results are valid at least up to the most recent block\n-    // the user could have gotten from another RPC command prior to now\n-    pwallet->BlockUntilSyncedToCurrentChain();\n+    const CWallet* const pwallet = GetReadyWallet(wallet);\n \n     LOCK(pwallet->cs_wallet);\n \n@@ -805,11 +789,7 @@ static UniValue getunconfirmedbalance(const JSONRPCRequest &request)\n \n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n-    const CWallet* const pwallet = wallet.get();\n-\n-    // Make sure the results are valid at least up to the most recent block\n-    // the user could have gotten from another RPC command prior to now\n-    pwallet->BlockUntilSyncedToCurrentChain();\n+    const CWallet* const pwallet = GetReadyWallet(wallet);\n \n     LOCK(pwallet->cs_wallet);\n \n@@ -862,11 +842,7 @@ static UniValue sendmany(const JSONRPCRequest& request)\n \n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n-    CWallet* const pwallet = wallet.get();\n-\n-    // Make sure the results are valid at least up to the most recent block\n-    // the user could have gotten from another RPC command prior to now\n-    pwallet->BlockUntilSyncedToCurrentChain();\n+    CWallet* const pwallet = GetReadyWallet(wallet);\n \n     LOCK(pwallet->cs_wallet);\n \n@@ -1172,11 +1148,7 @@ static UniValue listreceivedbyaddress(const JSONRPCRequest& request)\n \n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n-    const CWallet* const pwallet = wallet.get();\n-\n-    // Make sure the results are valid at least up to the most recent block\n-    // the user could have gotten from another RPC command prior to now\n-    pwallet->BlockUntilSyncedToCurrentChain();\n+    const CWallet* const pwallet = GetReadyWallet(wallet);\n \n     LOCK(pwallet->cs_wallet);\n \n@@ -1213,11 +1185,7 @@ static UniValue listreceivedbylabel(const JSONRPCRequest& request)\n \n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n-    const CWallet* const pwallet = wallet.get();\n-\n-    // Make sure the results are valid at least up to the most recent block\n-    // the user could have gotten from another RPC command prior to now\n-    pwallet->BlockUntilSyncedToCurrentChain();\n+    const CWallet* const pwallet = GetReadyWallet(wallet);\n \n     LOCK(pwallet->cs_wallet);\n \n@@ -1392,11 +1360,7 @@ UniValue listtransactions(const JSONRPCRequest& request)\n \n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n-    const CWallet* const pwallet = wallet.get();\n-\n-    // Make sure the results are valid at least up to the most recent block\n-    // the user could have gotten from another RPC command prior to now\n-    pwallet->BlockUntilSyncedToCurrentChain();\n+    const CWallet* const pwallet = GetReadyWallet(wallet);\n \n     const std::string* filter_label = nullptr;\n     if (!request.params[0].isNull() && request.params[0].get_str() != \"*\") {\n@@ -1509,10 +1473,7 @@ static UniValue listsinceblock(const JSONRPCRequest& request)\n     std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n     if (!pwallet) return NullUniValue;\n \n-    const CWallet& wallet = *pwallet;\n-    // Make sure the results are valid at least up to the most recent block\n-    // the user could have gotten from another RPC command prior to now\n-    wallet.BlockUntilSyncedToCurrentChain();\n+    const CWallet& wallet = *GetReadyWallet(pwallet);\n \n     LOCK(wallet.cs_wallet);\n \n@@ -1648,11 +1609,7 @@ static UniValue gettransaction(const JSONRPCRequest& request)\n \n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n-    const CWallet* const pwallet = wallet.get();\n-\n-    // Make sure the results are valid at least up to the most recent block\n-    // the user could have gotten from another RPC command prior to now\n-    pwallet->BlockUntilSyncedToCurrentChain();\n+    const CWallet* const pwallet = GetReadyWallet(wallet);\n \n     LOCK(pwallet->cs_wallet);\n \n@@ -1720,11 +1677,7 @@ static UniValue abandontransaction(const JSONRPCRequest& request)\n \n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n-    CWallet* const pwallet = wallet.get();\n-\n-    // Make sure the results are valid at least up to the most recent block\n-    // the user could have gotten from another RPC command prior to now\n-    pwallet->BlockUntilSyncedToCurrentChain();\n+    CWallet* const pwallet = GetReadyWallet(wallet);\n \n     LOCK(pwallet->cs_wallet);\n \n@@ -1757,11 +1710,7 @@ static UniValue backupwallet(const JSONRPCRequest& request)\n \n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n-    const CWallet* const pwallet = wallet.get();\n-\n-    // Make sure the results are valid at least up to the most recent block\n-    // the user could have gotten from another RPC command prior to now\n-    pwallet->BlockUntilSyncedToCurrentChain();\n+    const CWallet* const pwallet = GetReadyWallet(wallet);\n \n     LOCK(pwallet->cs_wallet);\n \n@@ -2096,11 +2045,7 @@ static UniValue lockunspent(const JSONRPCRequest& request)\n \n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n-    CWallet* const pwallet = wallet.get();\n-\n-    // Make sure the results are valid at least up to the most recent block\n-    // the user could have gotten from another RPC command prior to now\n-    pwallet->BlockUntilSyncedToCurrentChain();\n+    CWallet* const pwallet = GetReadyWallet(wallet);\n \n     LOCK(pwallet->cs_wallet);\n \n@@ -2300,11 +2245,7 @@ static UniValue getbalances(const JSONRPCRequest& request)\n \n     std::shared_ptr<CWallet> const rpc_wallet = GetWalletForJSONRPCRequest(request);\n     if (!rpc_wallet) return NullUniValue;\n-    CWallet& wallet = *rpc_wallet;\n-\n-    // Make sure the results are valid at least up to the most recent block\n-    // the user could have gotten from another RPC command prior to now\n-    wallet.BlockUntilSyncedToCurrentChain();\n+    CWallet& wallet = *GetReadyWallet(rpc_wallet);\n \n     LOCK(wallet.cs_wallet);\n \n@@ -2373,11 +2314,7 @@ static UniValue getwalletinfo(const JSONRPCRequest& request)\n \n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n-    const CWallet* const pwallet = wallet.get();\n-\n-    // Make sure the results are valid at least up to the most recent block\n-    // the user could have gotten from another RPC command prior to now\n-    pwallet->BlockUntilSyncedToCurrentChain();\n+    const CWallet* const pwallet = GetReadyWallet(wallet);\n \n     LOCK(pwallet->cs_wallet);\n \n@@ -2785,7 +2722,7 @@ static UniValue listunspent(const JSONRPCRequest& request)\n \n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n-    const CWallet* const pwallet = wallet.get();\n+    const CWallet* const pwallet = GetReadyWallet(wallet);\n \n     int nMinDepth = 1;\n     if (!request.params[0].isNull()) {\n@@ -2851,10 +2788,6 @@ static UniValue listunspent(const JSONRPCRequest& request)\n             nMaximumCount = options[\"maximumCount\"].get_int64();\n     }\n \n-    // Make sure the results are valid at least up to the most recent block\n-    // the user could have gotten from another RPC command prior to now\n-    pwallet->BlockUntilSyncedToCurrentChain();\n-\n     UniValue results(UniValue::VARR);\n     std::vector<COutput> vecOutputs;\n     {\n@@ -2947,10 +2880,6 @@ static UniValue listunspent(const JSONRPCRequest& request)\n \n void FundTransaction(CWallet* const pwallet, CMutableTransaction& tx, CAmount& fee_out, int& change_position, UniValue options, CCoinControl& coinControl)\n {\n-    // Make sure the results are valid at least up to the most recent block\n-    // the user could have gotten from another RPC command prior to now\n-    pwallet->BlockUntilSyncedToCurrentChain();\n-\n     change_position = -1;\n     bool lockUnspents = false;\n     UniValue subtractFeeFromOutputs;\n@@ -3146,7 +3075,7 @@ static UniValue fundrawtransaction(const JSONRPCRequest& request)\n \n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n-    CWallet* const pwallet = wallet.get();\n+    CWallet* const pwallet = GetReadyWallet(wallet);\n \n     RPCTypeCheck(request.params, {UniValue::VSTR, UniValueType(), UniValue::VBOOL});\n \n@@ -3324,7 +3253,7 @@ static UniValue bumpfee(const JSONRPCRequest& request)\n \n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n-    CWallet* const pwallet = wallet.get();\n+    CWallet* const pwallet = GetReadyWallet(wallet);\n \n     if (pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) && !want_psbt) {\n         if (!pwallet->chain().rpcEnableDeprecated(\"bumpfee\")) {\n@@ -3378,10 +3307,6 @@ static UniValue bumpfee(const JSONRPCRequest& request)\n         SetFeeEstimateMode(pwallet, coin_control, options[\"estimate_mode\"], conf_target);\n     }\n \n-    // Make sure the results are valid at least up to the most recent block\n-    // the user could have gotten from another RPC command prior to now\n-    pwallet->BlockUntilSyncedToCurrentChain();\n-\n     LOCK(pwallet->cs_wallet);\n     EnsureWalletIsUnlocked(pwallet);\n \n@@ -3968,7 +3893,7 @@ static RPCHelpMan send()\n \n             std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n             if (!wallet) return NullUniValue;\n-            CWallet* const pwallet = wallet.get();\n+            CWallet* const pwallet = GetReadyWallet(wallet);\n \n             UniValue options = request.params[3];\n             if (options.exists(\"feeRate\") || options.exists(\"fee_rate\") || options.exists(\"estimate_mode\") || options.exists(\"conf_target\")) {\n@@ -4271,7 +4196,7 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n \n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n-    CWallet* const pwallet = wallet.get();\n+    CWallet* const pwallet = GetReadyWallet(wallet);\n \n     RPCTypeCheck(request.params, {\n         UniValue::VARR,"
      }
    ]
  }
]