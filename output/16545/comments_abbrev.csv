ryanofsky,2019-08-04 14:14:53,"FYI @hebasto, this adds error checking for the flags from #16097",https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-518007182,518007182,
DrahtBot,2019-08-04 14:59:06,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-518010518,518010518,
hebasto,2019-08-04 15:21:27,"It seems that not providing a new `InterpretNegated()` function has some benefits:\n- no need for `key_name` local variables\n- diff gets much smaller",https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-518012293,518012293,
promag,2019-08-07 10:58:55,"Side note, I find `FlagsOfKnownArg` confusing because it also returns for unknown arguments and it doesn't tell if it's known or not. I'd reword to `GetArgFlags`.",https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-519048000,519048000,
hebasto,2019-08-10 16:09:28,"Concept ACK 01ca54a2411ff8f39fa10974327e882141140739\n\n@promag \n> Side note, I find `FlagsOfKnownArg` confusing because it also returns for unknown arguments and it doesn't tell if it's known or not. I'd reword to `GetArgFlags`.\n\nFor unknown arguments it returns `ArgsManager::NONE`.\n\n@ryanofsky \n> Both seem good to me, but get `GetArgFlags` does seem a little more standard, so I'll ",https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-520160573,520160573,
laanwj,2019-10-23 10:58:53,"Concept ACK, consistent argument error checking is good.",https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-545388679,545388679,
hebasto,2020-01-06 12:04:48,Is @MarcoFalke's [suggestion](https://github.com/bitcoin/bitcoin/pull/17473#discussion_r360386173) still relevant?,https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-571114833,571114833,
hebasto,2020-01-07 22:28:53,"A note for future: it seems worth adding a functional test for ""Warning: parsed potentially confusing double-negative ..."" in the `debug.log`.\n\nnm - it is already, see #17893 ",https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-571802700,571802700,
ajtowns,2020-01-09 05:28:04,"Rather than changing `foo=` from being `foo=0` to becoming `foo=<whatever foo's default was>` it might be clearer to write `reset-foo` for that behaviour (like `-nofoo`), so that it can be consistent no matter what the type of the setting is?",https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-572394418,572394418,
ryanofsky,2020-01-09 19:24:40,"Thanks for looking at this!\n\n> Rather than changing `foo=` from being `foo=0` to becoming `foo=<whatever foo's default was>`\n\nI don't think that's really an accurate description. `-foo=""""` is currently interpreted as `true` for boolean arguments, `0` for integer arguments, and all kinds of random ways for string arguments. The PR doesn't change this, or affect any existing behavior.\n\nW",https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-572714990,572714990,
ajtowns,2020-01-23 16:15:18,"> What the PR does is implement flags that let the `GetArg` family of functions retrieve settings in a consistent way,\n\nThe way I think of args at the moment is that `ArgsManager` stores a convenient representation of the config file (so it parses out the ""-nofoo"" stuff, but otherwise just stores strings) before it's converted into typed info, and then the GetArg functions do that conversion s",https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-577752833,577752833,
ryanofsky,2020-01-23 19:02:34,"> > What the PR does is implement flags that let the `GetArg` family of functions retrieve settings in a consistent way,\n> \n> The way I think of args at the moment is that `ArgsManager` stores a convenient representation of the config file (so it parses out the ""-nofoo"" stuff, but otherwise just stores strings) before it's converted into typed info, and then the GetArg functions do that conver",https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-577826251,577826251,
ajtowns,2020-01-24 09:04:59,"> > https://github.com/ajtowns/bitcoin/commits/202001-argsmanflag \n> \n> Can you give a specific example of how this is an improvement?\n\nIt's not so much meant as an improvement, but more as ""your PR is X=A+B+C, the A+B parts make sense to me, but the C part doesn't and even seems like a step in the wrong direction, and A+B alone seems to do what the PR was aiming to do -- ie, implement mis",https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-578047805,578047805,
ryanofsky,2020-01-24 12:50:15,"AJ, this critique does not seem substantive because it is too general. **Would it be possible for you to cite a specific deficiency in my design, or in any of my PRs, or in any of my wallet flag porting commits that lead to bad user behavior, or an unergnonomic API for developers?** I'd be more than happy to adopt suggestions for improvement. Or if we disagree about a specific design decision, I c",https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-578117815,578117815,
ajtowns,2020-01-28 04:02:05,"> Would it be possible for you to cite a specific deficiency in my design, or in any of my PRs, or in any of my wallet flag porting commits that lead to bad user behavior, or an unergnonomic API for developers?\n\nI don't know if I can cite a problem you'll accept, your PRs are no-ops (""this change has no effect"") because you're modifying dead code, and you seem to be rejecting criticisms that o",https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-579068737,579068737,
ryanofsky,2021-08-19 01:26:19,"Rebased 2772948473df34181535558f6b105ca413730053 -> 0a4ded27b7613656f423a07d889a9648b72200e7 ([`pr/argcheck.22`](https://github.com/ryanofsky/bitcoin/commits/pr/argcheck.22) -> [`pr/argcheck.23`](https://github.com/ryanofsky/bitcoin/commits/pr/argcheck.23), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/argcheck.22-rebase..pr/argcheck.23)) adding a scripted-diff commit to actually ensur",https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-901538026,901538026,
ryanofsky,2021-08-19 18:42:34,(deleted comment meant for other PR https://github.com/bitcoin/bitcoin/pull/19827#issuecomment-902152599),https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-902152223,902152223,
MarcoFalke,2021-08-19 18:44:59,"I looks like the scripted-diff *does* change behavior, given that at least `ALLOW_INT` has some additional checks attached?",https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-902153817,902153817,
ryanofsky,2021-08-19 18:48:21,"> I looks like the scripted-diff _does_ change behavior, given that at least `ALLOW_INT` has some additional checks attached?\n\nYeah, it's been a while I forgot this had dropped the ""negating is meaningless"" check in some cases. I'll update the comment to say it avoids breaking existing configs, not that it avoids changing behavior entirely.",https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-902156069,902156069,
ajtowns,2021-08-20 05:28:29,"Approach NACK aa3dec078fc464d7ea2b46088c789bfd4a7e2637\n\n> re: [#16545 (comment)](https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-579068737)\n> > * making `-value=` reset things to defaults changes the meaning of existing configs\n> No, there is impact no impact on existing settings,\n\nThere is no impact on existing settings because ALLOW_BOOL, ALLOW_INT, ALLOW_STRING and ALLOW_",https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-902442106,902442106,
ajtowns,2021-09-01 07:00:32,"> I don't think this NACK is justified.\n\nTo summarise: 1) This PR doesn't improve behaviour (in this case, actually issuing errors/warnings when people make mistakes in the config, or removing any of the footguns for any existing option), and we should be prioritising patches that do improve things. For example, an earlier version of this API has already spent over a year merged without gettin",https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-909979400,909979400,
ryanofsky,2021-11-01 19:27:25,"Rebased aa3dec078fc464d7ea2b46088c789bfd4a7e2637 -> 9349a02cc41ea537873dd20636aff51e23870cbe ([`pr/argcheck.24`](https://github.com/ryanofsky/bitcoin/commits/pr/argcheck.24) -> [`pr/argcheck.25`](https://github.com/ryanofsky/bitcoin/commits/pr/argcheck.25), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/argcheck.24-rebase..pr/argcheck.25)) due to conflict with #22217, on top of new base",https://github.com/bitcoin/bitcoin/pull/16545#issuecomment-956523589,956523589,
hebasto,2019-08-04 14:52:04,Nice to see `ALLOW_NEGATED` flag [again](https://github.com/bitcoin/bitcoin/pull/16097#issuecomment-514627823) ;),https://github.com/bitcoin/bitcoin/pull/16545#discussion_r310390632,310390632,src/util/system.h
hebasto,2019-08-04 14:54:39,Could we drop `ALLOW_NEGATED` for `TYPE_INT` now or in the future?,https://github.com/bitcoin/bitcoin/pull/16545#discussion_r310390769,310390769,src/util/system.h
promag,2019-08-06 23:32:49,"00973301f6a1efb6aa2232544a49b080ac0c6c50\n\nLooks like this should be an assertion?\n```c++\n        if (flags) assert(flags & require_any);\n```",https://github.com/bitcoin/bitcoin/pull/16545#discussion_r311316763,311316763,src/util/system.cpp
promag,2019-08-06 23:59:13,"1efb9ee41ab228a73d293603838951af6fb0f59c\n\nIt would be nice to see a commit elsewhere using these ""types"".",https://github.com/bitcoin/bitcoin/pull/16545#discussion_r311321892,311321892,src/util/system.h
ryanofsky,2019-08-07 08:55:14,"re: https://github.com/bitcoin/bitcoin/pull/16545#discussion_r310390632\n\n> Nice to see ALLOW_NEGATED flag again ;)\n\nIt is ok to have this, but like the comment above it says, it should only be used in rare cases, where a negated setting needs to be treated differently than a false/0/empty bool/int/string setting. Normal code for normal options should never have to use ALLOW_NEGATED or IsAr",https://github.com/bitcoin/bitcoin/pull/16545#discussion_r311440418,311440418,src/util/system.h
ryanofsky,2019-08-07 08:55:19,"https://github.com/bitcoin/bitcoin/pull/16545#discussion_r310390769\n\n> Could we drop ALLOW_NEGATED for TYPE_INT now or in the future?\n\nThis seems like a bad thing to provide as a shortcut. If an option is an integer, treating `-nonumber` exactly the same as `-number=0` provides a simple interface to users consistent with what we've always provided in the past. Treating these the same is al",https://github.com/bitcoin/bitcoin/pull/16545#discussion_r311440447,311440447,src/util/system.h
ryanofsky,2019-08-07 08:55:33,"re: https://github.com/bitcoin/bitcoin/pull/16545#discussion_r311316763\n\n> Looks like this should be an assertion?\n\nI know you didn't check the tests yet, but the main reason for this being a logic_error instead of an assert is so the test can require and check this logic so it won't be accidentally broken in the future. The other reason this is a logic_error is to provide clearer feedback",https://github.com/bitcoin/bitcoin/pull/16545#discussion_r311440561,311440561,src/util/system.cpp
ryanofsky,2019-08-07 08:55:41,"re: https://github.com/bitcoin/bitcoin/pull/16545#discussion_r311321892\n\n> It would be nice to see a commit elsewhere using these ""types"".\n\nThis is a good idea. I can open a draft PR applying these to some wallet flags, since I know hebasto already has good work on node flags like -datadir, -blocksdir, -pid etc that I don't want to interfere with. I do think any PR actually using flags sho",https://github.com/bitcoin/bitcoin/pull/16545#discussion_r311440627,311440627,src/util/system.h
promag,2019-08-07 10:53:36,"Actually I did check and ran the tests with my change and I understand the idea of testing the exception, which wouldn't make sense if it was an assertion.\n\n> Also this case really can and should be a compile error\n\nAgree.",https://github.com/bitcoin/bitcoin/pull/16545#discussion_r311490205,311490205,src/util/system.cpp
promag,2019-08-07 10:54:33,Maybe a brief example in the PR description then?,https://github.com/bitcoin/bitcoin/pull/16545#discussion_r311490504,311490504,src/util/system.h
ryanofsky,2019-08-08 13:34:34,"> Maybe a brief example in the PR description then?\n\nAnother really good idea! Will add this.",https://github.com/bitcoin/bitcoin/pull/16545#discussion_r312037476,312037476,src/util/system.h
hebasto,2019-08-10 15:48:16,"> If an option is an integer, treating `-nonumber` exactly the same as `-number=0` provides a simple interface to users...\n\nSuch practice is a bad habit, IMO.\n\n> ... consistent with what we've always provided in the past. Treating these the same is also less error prone for developers than treating them differently.\n\nAgree. It is important.",https://github.com/bitcoin/bitcoin/pull/16545#discussion_r312707098,312707098,src/util/system.h
hebasto,2019-08-10 16:56:16,"Could the underlying type be specified?\n```suggestion\n     enum Flags : unsigned int {\n```\nRef: https://github.com/bitcoin/bitcoin/pull/16097#discussion_r310193132",https://github.com/bitcoin/bitcoin/pull/16545#discussion_r312709327,312709327,src/util/system.h
ryanofsky,2019-08-14 16:40:33,"> Could the underlying type be specified?\n\nDone in 9a1e20eef36b9dfff9de7780b0edd30b8ae92487",https://github.com/bitcoin/bitcoin/pull/16545#discussion_r313973773,313973773,src/util/system.h
ryanofsky,2019-11-14 05:01:07,"In commit ""Implement missing error checking for ArgsManager flags"" (4b8149b5aae874cffe81423a2d4529c6f5b6e944)\n\nNote: comment describing this function is in the header file shown below on github",https://github.com/bitcoin/bitcoin/pull/16545#discussion_r346127792,346127792,src/util/system.cpp
promag,2019-12-22 22:30:02,"nit, comma before `false`?",https://github.com/bitcoin/bitcoin/pull/16545#discussion_r360732832,360732832,src/util/system.h
promag,2019-12-22 23:42:50,"nit, I've changed this to `Optional<string>`, see https://github.com/promag/bitcoin/commit/71da58bc9437b977e56029bd8d2516bcf61cb823.",https://github.com/bitcoin/bitcoin/pull/16545#discussion_r360736266,360736266,src/util/system.cpp
promag,2019-12-22 23:43:47,`AddArg` could disallow any other flag when this one is used?,https://github.com/bitcoin/bitcoin/pull/16545#discussion_r360736303,360736303,src/util/system.h
hebasto,2020-01-03 16:34:15,"```suggestion\n     * integer, or boolean depending on ALLOW_{BOOL|INT|STRING} flags if a ""-setting=value""\n```",https://github.com/bitcoin/bitcoin/pull/16545#discussion_r362874240,362874240,src/util/system.h
ryanofsky,2020-01-06 22:17:16,"re: https://github.com/bitcoin/bitcoin/pull/16545#discussion_r360736266\n\n> nit, I've changed this to `Optional<string>`, see [promag@71da58b](https://github.com/promag/bitcoin/commit/71da58bc9437b977e56029bd8d2516bcf61cb823).\n\nUsing an optional wrapper instead of a simple const pointer seems a little worse to me (less efficient, more verbose), but I wouldn't object if there's an advantage ",https://github.com/bitcoin/bitcoin/pull/16545#discussion_r363509730,363509730,src/util/system.cpp
ryanofsky,2020-01-06 22:17:34,"re: https://github.com/bitcoin/bitcoin/pull/16545#discussion_r360736303\n\n> `AddArg` could disallow any other flag when this one is used?\n\nThanks, added checks for useless flag combinations in `AddArg` and tests for the checks in `util_CheckBadFlagCombinations`",https://github.com/bitcoin/bitcoin/pull/16545#discussion_r363509851,363509851,src/util/system.h
ryanofsky,2020-01-06 22:17:44,"re: https://github.com/bitcoin/bitcoin/pull/16545#discussion_r360732832\n\n> nit, comma before `false`?\n\nThanks, fixed",https://github.com/bitcoin/bitcoin/pull/16545#discussion_r363509906,363509906,src/util/system.h
ryanofsky,2020-01-06 22:18:06,"re: https://github.com/bitcoin/bitcoin/pull/16545#discussion_r362874240\n\nThanks, included suggestion",https://github.com/bitcoin/bitcoin/pull/16545#discussion_r363510017,363510017,src/util/system.h
hebasto,2020-01-07 20:48:09,assiging  ==> assigning,https://github.com/bitcoin/bitcoin/pull/16545#discussion_r363943771,363943771,src/test/util_tests.cpp
ryanofsky,2020-01-07 21:50:22,"re: https://github.com/bitcoin/bitcoin/pull/16545#discussion_r363943771\n\n> assiging ==> assigning\n\nThanks, fixed",https://github.com/bitcoin/bitcoin/pull/16545#discussion_r363968221,363968221,src/test/util_tests.cpp
promag,2020-01-09 16:45:39,Yeah don't bother,https://github.com/bitcoin/bitcoin/pull/16545#discussion_r364847093,364847093,src/util/system.cpp
ajtowns,2020-01-23 14:35:20,"Seems like you might as well have a check for:\n\n```c++\nif ((flags & (ALLOW_BOOL | ALLOW_INT | ALLOW_STRING)) && (flags & ALLOW_LIST)) \n```\n\nhere as well -- if you add LIST, you can't use GetArg to query for a string or int, or GetBoolArg to query for a bool value?",https://github.com/bitcoin/bitcoin/pull/16545#discussion_r370152855,370152855,src/util/system.cpp
ajtowns,2020-01-23 14:36:25,Seems like this should have `/* forbid= */ ALLOW_LIST` to match `GetBoolArg` ?,https://github.com/bitcoin/bitcoin/pull/16545#discussion_r370153489,370153489,src/util/system.cpp
ryanofsky,2020-01-24 20:02:17,"re: https://github.com/bitcoin/bitcoin/pull/16545#discussion_r370153489\n\n> Seems like this should have `/* forbid= */ ALLOW_LIST` to match `GetBoolArg` ?\n\nAdded suggested restriction",https://github.com/bitcoin/bitcoin/pull/16545#discussion_r370818419,370818419,src/util/system.cpp
ryanofsky,2020-01-24 20:02:26,"re: https://github.com/bitcoin/bitcoin/pull/16545#discussion_r370152855\n\n> Seems like you might as well have a check for:\n> \n> ```c++\n> if ((flags & (ALLOW_BOOL | ALLOW_INT | ALLOW_STRING)) && (flags & ALLOW_LIST)) \n> ```\n> \n> here as well -- if you add LIST, you can't use GetArg to query for a string or int, or GetBoolArg to query for a bool value?\n\nIf the suggestion is make i",https://github.com/bitcoin/bitcoin/pull/16545#discussion_r370818484,370818484,src/util/system.cpp
ajtowns,2020-01-28 03:42:36,"If you want to support lists of bools or ints later, then it's easy to remove the restriction then; if lists of bools or ints is supported now, it should be tested along with the other cases in util_tests.cpp -- but it doesn't seem like it makes sense to say that it's supported now when we've only got `std::vector<std::string> GetArgs()` to query it.",https://github.com/bitcoin/bitcoin/pull/16545#discussion_r371597025,371597025,src/util/system.cpp
ajtowns,2020-01-28 04:04:51,"This seems very strange; I don't see how having ""value=1"", `GetBoolArg(""-value"", false)==false` for an arg that's meant to accept a bool or a string could possibly make sense (likewise for value=0, with `GetBoolArg(""-value"", true)==true`).",https://github.com/bitcoin/bitcoin/pull/16545#discussion_r371600794,371600794,src/test/util_tests.cpp
ryanofsky,2020-09-01 23:47:21,"re: https://github.com/bitcoin/bitcoin/pull/16545#discussion_r371600794\n\n> This seems very strange; I don't see how having ""value=1"", `GetBoolArg(""-value"", false)==false` for an arg that's meant to accept a bool or a string could possibly make sense (likewise for value=0, with `GetBoolArg(""-value"", true)==true`).\n\nI think this is just strange if you are not thinking about use cases. The us",https://github.com/bitcoin/bitcoin/pull/16545#discussion_r481492984,481492984,src/test/util_tests.cpp
ryanofsky,2020-09-01 23:47:50,"re: https://github.com/bitcoin/bitcoin/pull/16545#discussion_r371597025\n\n> If you want to support lists of bools or ints later, then it's easy to remove the restriction then; if lists of bools or ints is supported now, it should be tested along with the other cases in util_tests.cpp -- but it doesn't seem like it makes sense to say that it's supported now when we've only got `std::vector<std::",https://github.com/bitcoin/bitcoin/pull/16545#discussion_r481493139,481493139,src/util/system.cpp
fanquake,2021-03-15 02:04:29,Please [use `std::optional` in new code](https://github.com/bitcoin/bitcoin/blob/master/src/optional.h#L12).,https://github.com/bitcoin/bitcoin/pull/16545#discussion_r594006161,594006161,src/util/system.cpp
ajtowns,2021-08-20 03:12:51,"`-bind` and `-connect` both support multiple options (require=STRING+LIST for GetArgs) but this is forbidden for GetBoolArg (forbid=LIST); `-reindex`, `-reindexchainstate`, and `-rescan` all don't seem to be used as anything but a bool as far as I can see. The comments also mention `-listen` which also seems to be only used as a boolean arg.  That does leave `-upgradewallet` (presuming that's what",https://github.com/bitcoin/bitcoin/pull/16545#discussion_r692627400,692627400,src/test/util_tests.cpp
ryanofsky,2021-08-21 19:39:53,"re: https://github.com/bitcoin/bitcoin/pull/16545#discussion_r692627400\n\n> `-bind` and `-connect`\n\nWe can go down a rabbit hole about these individual cases, but this is nitpicking which I do not think is relevant to the point I am making about imperative options (which trigger behavior and don't require but can accept string values) being useful to handle differently from string options w",https://github.com/bitcoin/bitcoin/pull/16545#discussion_r693393118,693393118,src/test/util_tests.cpp
ajtowns,2021-09-01 07:10:00,"> We can go down a rabbit hole about these individual cases, but this is nitpicking which I do not think is relevant to the point I am making about imperative options (which trigger behavior and don't require but can accept string values)\n\nI went through all the examples I could find of potential ""imperative options"", and none of them fit your definition, except for the one that's been removed",https://github.com/bitcoin/bitcoin/pull/16545#discussion_r699936341,699936341,src/test/util_tests.cpp
