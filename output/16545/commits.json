[
  {
    "sha": "3345e119b07e6052ea0a6a0cfcc0186e6ddd3a06",
    "node_id": "C_kwDOABII59oAKDMzNDVlMTE5YjA3ZTYwNTJlYTBhNmEwY2ZjYzAxODZlNmRkZDNhMDY",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-08-04T13:36:04Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-11-01T13:24:22Z"
      },
      "message": "refactor: Implement missing error checking for ArgsManager flags\n\nTrigger startup errors if bitcoin is configured with bad setting values\naccording to flags. Also raise internal errors if settings are registered and\nretrieved with inconsistent flags.\n\nThis change has no effect on behavior because ArgsManager flags were recently\nadded in #16097 and aren't used anywhere yet.",
      "tree": {
        "sha": "a18ccae03ce0565ac393b4c335c94f399c1770ca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a18ccae03ce0565ac393b4c335c94f399c1770ca"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3345e119b07e6052ea0a6a0cfcc0186e6ddd3a06",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3345e119b07e6052ea0a6a0cfcc0186e6ddd3a06",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3345e119b07e6052ea0a6a0cfcc0186e6ddd3a06",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3345e119b07e6052ea0a6a0cfcc0186e6ddd3a06/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5adc5c02800f00d1e6e8812a2b0559b1800e82e9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5adc5c02800f00d1e6e8812a2b0559b1800e82e9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5adc5c02800f00d1e6e8812a2b0559b1800e82e9"
      }
    ],
    "stats": {
      "total": 354,
      "additions": 309,
      "deletions": 45
    },
    "files": [
      {
        "sha": "afd9964a6f022b94ef7a439bbed64538b3295391",
        "filename": "src/test/fuzz/system.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 7,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3345e119b07e6052ea0a6a0cfcc0186e6ddd3a06/src/test/fuzz/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3345e119b07e6052ea0a6a0cfcc0186e6ddd3a06/src/test/fuzz/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/system.cpp?ref=3345e119b07e6052ea0a6a0cfcc0186e6ddd3a06",
        "patch": "@@ -44,13 +44,21 @@ FUZZ_TARGET_INIT(system, initialize_system)\n                 args_manager.SelectConfigNetwork(fuzzed_data_provider.ConsumeRandomLengthString(16));\n             },\n             [&] {\n-                args_manager.SoftSetArg(fuzzed_data_provider.ConsumeRandomLengthString(16), fuzzed_data_provider.ConsumeRandomLengthString(16));\n+                // Avoid Can't call SoftSetArg on arg registered with flags 0x8d8d8d00 (requires 0x2, disallows 0x10)\n+                try {\n+                    args_manager.SoftSetArg(fuzzed_data_provider.ConsumeRandomLengthString(16), fuzzed_data_provider.ConsumeRandomLengthString(16));\n+                } catch (const std::logic_error&) {\n+                }\n             },\n             [&] {\n                 args_manager.ForceSetArg(fuzzed_data_provider.ConsumeRandomLengthString(16), fuzzed_data_provider.ConsumeRandomLengthString(16));\n             },\n             [&] {\n-                args_manager.SoftSetBoolArg(fuzzed_data_provider.ConsumeRandomLengthString(16), fuzzed_data_provider.ConsumeBool());\n+                // Avoid Can't call SoftSetBoolArg on arg registered with flags 0x8d8d8d00 (requires 0x2, disallows 0x10)\n+                try {\n+                    args_manager.SoftSetBoolArg(fuzzed_data_provider.ConsumeRandomLengthString(16), fuzzed_data_provider.ConsumeBool());\n+                } catch (const std::logic_error&) {\n+                }\n             },\n             [&] {\n                 const OptionsCategory options_category = fuzzed_data_provider.PickValueInArray<OptionsCategory>({OptionsCategory::OPTIONS, OptionsCategory::CONNECTION, OptionsCategory::WALLET, OptionsCategory::WALLET_DEBUG_TEST, OptionsCategory::ZMQ, OptionsCategory::DEBUG_TEST, OptionsCategory::CHAINPARAMS, OptionsCategory::NODE_RELAY, OptionsCategory::BLOCK_CREATION, OptionsCategory::RPC, OptionsCategory::GUI, OptionsCategory::COMMANDS, OptionsCategory::REGISTER_COMMANDS, OptionsCategory::HIDDEN});\n@@ -60,7 +68,16 @@ FUZZ_TARGET_INIT(system, initialize_system)\n                 if (args_manager.GetArgFlags(argument_name) != std::nullopt) {\n                     return;\n                 }\n-                args_manager.AddArg(argument_name, fuzzed_data_provider.ConsumeRandomLengthString(16), fuzzed_data_provider.ConsumeIntegral<unsigned int>() & ~ArgsManager::COMMAND, options_category);\n+                unsigned int flags = fuzzed_data_provider.ConsumeIntegral<unsigned int>();\n+                // Avoid hitting \"ALLOW_{BOOL|INT|STRING} flags would have no effect with ALLOW_ANY present (ALLOW_ANY disables validation)\"\n+                if (flags & ArgsManager::ALLOW_ANY) {\n+                    flags &= ~(ArgsManager::ALLOW_BOOL | ArgsManager::ALLOW_INT | ArgsManager::ALLOW_STRING);\n+                }\n+                // Avoid hitting \"ALLOW_INT would have no effect with ALLOW_STRING present (any valid integer is also a valid string)\"\n+                if (flags & ArgsManager::ALLOW_STRING) {\n+                    flags &= ~ArgsManager::ALLOW_INT;\n+                }\n+                args_manager.AddArg(argument_name, fuzzed_data_provider.ConsumeRandomLengthString(16), flags & ~ArgsManager::COMMAND, options_category);\n             },\n             [&] {\n                 // Avoid hitting:\n@@ -102,11 +119,23 @@ FUZZ_TARGET_INIT(system, initialize_system)\n     const int64_t i64 = fuzzed_data_provider.ConsumeIntegral<int64_t>();\n     const bool b = fuzzed_data_provider.ConsumeBool();\n \n-    (void)args_manager.GetIntArg(s1, i64);\n-    (void)args_manager.GetArg(s1, s2);\n+    try {\n+        (void)args_manager.GetIntArg(s1, i64);\n+    } catch (const std::logic_error&) {\n+    }\n+    try {\n+        (void)args_manager.GetArg(s1, s2);\n+    } catch (const std::logic_error&) {\n+    }\n     (void)args_manager.GetArgFlags(s1);\n-    (void)args_manager.GetArgs(s1);\n-    (void)args_manager.GetBoolArg(s1, b);\n+    try {\n+        (void)args_manager.GetArgs(s1);\n+    } catch (const std::logic_error&) {\n+    }\n+    try {\n+        (void)args_manager.GetBoolArg(s1, b);\n+    } catch (const std::logic_error&) {\n+    }\n     try {\n         (void)args_manager.GetChainName();\n     } catch (const std::runtime_error&) {"
      },
      {
        "sha": "30ab50984779bf6880dbf334efd66d8778371200",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 140,
        "deletions": 9,
        "changes": 149,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3345e119b07e6052ea0a6a0cfcc0186e6ddd3a06/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3345e119b07e6052ea0a6a0cfcc0186e6ddd3a06/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=3345e119b07e6052ea0a6a0cfcc0186e6ddd3a06",
        "patch": "@@ -285,7 +285,7 @@ class CheckValueTest : public TestChain100Setup\n \n         if (expect.error) {\n             BOOST_CHECK(!success);\n-            BOOST_CHECK_NE(error.find(expect.error), std::string::npos);\n+            BOOST_CHECK_EQUAL(error, expect.error);\n         } else {\n             BOOST_CHECK(success);\n             BOOST_CHECK_EQUAL(error, \"\");\n@@ -295,16 +295,16 @@ class CheckValueTest : public TestChain100Setup\n             BOOST_CHECK_EQUAL(test.GetArg(\"-value\", \"zzzzz\"), \"zzzzz\");\n         } else if (expect.string_value) {\n             BOOST_CHECK_EQUAL(test.GetArg(\"-value\", \"zzzzz\"), expect.string_value);\n-        } else {\n-            BOOST_CHECK(!success);\n+        } else if (success) {\n+            BOOST_CHECK_THROW(test.GetArg(\"-value\", \"zzzzz\"), std::logic_error);\n         }\n \n         if (expect.default_int) {\n             BOOST_CHECK_EQUAL(test.GetIntArg(\"-value\", 99999), 99999);\n         } else if (expect.int_value) {\n             BOOST_CHECK_EQUAL(test.GetIntArg(\"-value\", 99999), *expect.int_value);\n-        } else {\n-            BOOST_CHECK(!success);\n+        } else if (success) {\n+            BOOST_CHECK_THROW(test.GetIntArg(\"-value\", 99999), std::logic_error);\n         }\n \n         if (expect.default_bool) {\n@@ -313,15 +313,16 @@ class CheckValueTest : public TestChain100Setup\n         } else if (expect.bool_value) {\n             BOOST_CHECK_EQUAL(test.GetBoolArg(\"-value\", false), *expect.bool_value);\n             BOOST_CHECK_EQUAL(test.GetBoolArg(\"-value\", true), *expect.bool_value);\n-        } else {\n-            BOOST_CHECK(!success);\n+        } else if (success) {\n+            BOOST_CHECK_THROW(test.GetBoolArg(\"-value\", false), std::logic_error);\n+            BOOST_CHECK_THROW(test.GetBoolArg(\"-value\", true), std::logic_error);\n         }\n \n         if (expect.list_value) {\n             auto l = test.GetArgs(\"-value\");\n             BOOST_CHECK_EQUAL_COLLECTIONS(l.begin(), l.end(), expect.list_value->begin(), expect.list_value->end());\n-        } else {\n-            BOOST_CHECK(!success);\n+        } else if (success) {\n+            BOOST_CHECK_THROW(test.GetArgs(\"-value\"), std::logic_error);\n         }\n     }\n };\n@@ -343,6 +344,136 @@ BOOST_FIXTURE_TEST_CASE(util_CheckValue, CheckValueTest)\n     CheckValue(M::ALLOW_ANY, \"-value=1\", Expect{\"1\"}.String(\"1\").Int(1).Bool(true).List({\"1\"}));\n     CheckValue(M::ALLOW_ANY, \"-value=2\", Expect{\"2\"}.String(\"2\").Int(2).Bool(true).List({\"2\"}));\n     CheckValue(M::ALLOW_ANY, \"-value=abc\", Expect{\"abc\"}.String(\"abc\").Int(0).Bool(false).List({\"abc\"}));\n+\n+    CheckValue(M::ALLOW_BOOL, nullptr, Expect{{}}.DefaultBool());\n+    CheckValue(M::ALLOW_BOOL, \"-novalue\", Expect{false}.Bool(false));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=1\", Expect{false}.Bool(false));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-value\", Expect{true}.Bool(true));\n+    CheckValue(M::ALLOW_BOOL, \"-value=\", Expect{\"\"}.DefaultBool());\n+    CheckValue(M::ALLOW_BOOL, \"-value=0\", Expect{false}.Bool(false));\n+    CheckValue(M::ALLOW_BOOL, \"-value=1\", Expect{true}.Bool(true));\n+    CheckValue(M::ALLOW_BOOL, \"-value=2\", Expect{{}}.Error(\"Can not set -value value to '2'. It must be set to 0 or 1.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-value=abc\", Expect{{}}.Error(\"Can not set -value value to 'abc'. It must be set to 0 or 1.\"));\n+\n+    CheckValue(M::ALLOW_INT, nullptr, Expect{{}}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT, \"-novalue\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_INT, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_INT, \"-novalue=1\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_INT, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_INT, \"-value\", Expect{{}}.Error(\"Can not set -value with no value. It must be set to an integer.\"));\n+    CheckValue(M::ALLOW_INT, \"-value=\", Expect{\"\"}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT, \"-value=0\", Expect{0}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT, \"-value=1\", Expect{1}.Int(1).Bool(true));\n+    CheckValue(M::ALLOW_INT, \"-value=2\", Expect{2}.Int(2).Bool(true));\n+    CheckValue(M::ALLOW_INT, \"-value=abc\", Expect{{}}.Error(\"Can not set -value value to 'abc'. It must be set to an integer.\"));\n+\n+    CheckValue(M::ALLOW_STRING, nullptr, Expect{{}}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-novalue\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=1\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_STRING, \"-value\", Expect{{}}.Error(\"Can not set -value with no value. It must be set to a string.\"));\n+    CheckValue(M::ALLOW_STRING, \"-value=\", Expect{\"\"}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-value=0\", Expect{\"0\"}.String(\"0\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-value=1\", Expect{\"1\"}.String(\"1\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-value=2\", Expect{\"2\"}.String(\"2\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-value=abc\", Expect{\"abc\"}.String(\"abc\").DefaultBool());\n+\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, nullptr, Expect{{}}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=1\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value\", Expect{true}.Int(1).Bool(true));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=\", Expect{\"\"}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=0\", Expect{0}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=1\", Expect{1}.Int(1).Bool(true));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=2\", Expect{2}.Int(2).Bool(true));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=abc\", Expect{{}}.Error(\"Can not set -value value to 'abc'. It must be set to an integer.\"));\n+\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, nullptr, Expect{{}}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=1\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value\", Expect{true}.DefaultString().Bool(true));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=\", Expect{\"\"}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=0\", Expect{\"0\"}.String(\"0\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=1\", Expect{\"1\"}.String(\"1\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=2\", Expect{\"2\"}.String(\"2\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=abc\", Expect{\"abc\"}.String(\"abc\").DefaultBool());\n+\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, nullptr, Expect{{}}.List({}));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-novalue\", Expect{false}.List({}));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-novalue=1\", Expect{false}.List({}));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-value\", Expect{{}}.Error(\"Can not set -value with no value. It must be set to a string.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-value=\", Expect{\"\"}.List({\"\"}));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-value=0\", Expect{\"0\"}.List({\"0\"}));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-value=1\", Expect{\"1\"}.List({\"1\"}));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-value=2\", Expect{\"2\"}.List({\"2\"}));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-value=abc\", Expect{\"abc\"}.List({\"abc\"}));\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(util_CheckBoolStringsNotSpecial, CheckValueTest)\n+{\n+    using M = ArgsManager;\n+\n+    // Check that \"true\" and \"false\" strings are rejected for ALLOW_BOOL\n+    // arguments. We might want to change this behavior in the future and\n+    // interpret strings like \"true\" as true, and strings like \"false\" as false.\n+    // But because it would be confusing to interpret \"true\" as true for\n+    // ALLOW_BOOL arguments but false for ALLOW_ANY arguments (because\n+    // atoi(\"true\")==0), for now it is safer to just disallow strings like\n+    // \"true\" and \"false\" for ALLOW_BOOL arguments as long as there are still\n+    // other boolean arguments interpreted with ALLOW_ANY.\n+    CheckValue(M::ALLOW_BOOL, \"-value=true\", Expect{{}}.Error(\"Can not set -value value to 'true'. It must be set to 0 or 1.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-value=false\", Expect{{}}.Error(\"Can not set -value value to 'false'. It must be set to 0 or 1.\"));\n+\n+    // Similarly, check \"true\" and \"false\" are not treated specially when\n+    // ALLOW_BOOL is combined with ALLOW_INT and ALLOW_STRING. (The only\n+    // difference ALLOW_BOOL makes for int and string arguments is that it\n+    // enables \"-foo\" syntax with no equal sign assigning explicit int or string\n+    // values. This is useful for arguments like \"-upgradewallet\" or \"-listen\"\n+    // that primarily toggle features on and off, but also accept optional int\n+    // or string values to influence behavior.)\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=true\", Expect{{}}.Error(\"Can not set -value value to 'true'. It must be set to an integer.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=false\", Expect{{}}.Error(\"Can not set -value value to 'false'. It must be set to an integer.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=true\", Expect{\"true\"}.String(\"true\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=false\", Expect{\"false\"}.String(\"false\").DefaultBool());\n+}\n+\n+BOOST_AUTO_TEST_CASE(util_CheckSingleValue)\n+{\n+    TestArgsManager test;\n+    test.SetupArgs({{\"-single\", ArgsManager::ALLOW_INT}});\n+    std::istringstream stream(\"single=1\\nsingle=2\\n\");\n+    std::string error;\n+    BOOST_CHECK(!test.ReadConfigStream(stream, \"file.conf\", error));\n+    BOOST_CHECK_EQUAL(error, \"Multiple values specified for -single in same section of config file.\");\n+}\n+\n+BOOST_AUTO_TEST_CASE(util_CheckBadFlagCombinations)\n+{\n+    TestArgsManager test;\n+    using M = ArgsManager;\n+    BOOST_CHECK_THROW(test.AddArg(\"-arg1\", \"name\", M::ALLOW_INT | M::ALLOW_ANY, OptionsCategory::OPTIONS), std::logic_error);\n+    BOOST_CHECK_THROW(test.AddArg(\"-arg2\", \"name\", M::ALLOW_INT | M::ALLOW_STRING, OptionsCategory::OPTIONS), std::logic_error);\n }\n \n struct NoIncludeConfTest {"
      },
      {
        "sha": "b97431a15b536b3fd63571ddb8e22832aa4540aa",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 123,
        "deletions": 22,
        "changes": 145,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3345e119b07e6052ea0a6a0cfcc0186e6ddd3a06/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3345e119b07e6052ea0a6a0cfcc0186e6ddd3a06/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=3345e119b07e6052ea0a6a0cfcc0186e6ddd3a06",
        "patch": "@@ -225,7 +225,7 @@ KeyInfo InterpretKey(std::string key)\n  * @return parsed settings value if it is valid, otherwise nullopt accompanied\n  * by a descriptive error string\n  */\n-static std::optional<util::SettingsValue> InterpretValue(const KeyInfo& key, const std::string& value,\n+static std::optional<util::SettingsValue> InterpretValue(const KeyInfo& key, const std::string* value,\n                                                          unsigned int flags, std::string& error)\n {\n     // Return negated settings as false values.\n@@ -234,14 +234,77 @@ static std::optional<util::SettingsValue> InterpretValue(const KeyInfo& key, con\n             error = strprintf(\"Negating of -%s is meaningless and therefore forbidden\", key.name);\n             return std::nullopt;\n         }\n-        // Double negatives like -nofoo=0 are supported (but discouraged)\n-        if (!InterpretBool(value)) {\n-            LogPrintf(\"Warning: parsed potentially confusing double-negative -%s=%s\\n\", key.name, value);\n-            return true;\n+        if (flags & ArgsManager::ALLOW_ANY) {\n+            // Double negatives like -nokey=0 are supported (but discouraged)\n+            if (value && !InterpretBool(*value)) {\n+                LogPrintf(\"Warning: parsed potentially confusing double-negative -%s=%s\\n\", key.name, *value);\n+                return true;\n+            }\n+        } else if (value && *value != \"1\") {\n+            error = strprintf(\"Can not negate -%s at the same time as setting value '%s'.\", key.name, *value);\n+            return std::nullopt;\n         }\n         return false;\n     }\n-    return value;\n+\n+    // If validation was disabled with ALLOW_ANY, handle negation above, but\n+    // otherwise always return the value as a string.\n+    if (flags & ArgsManager::ALLOW_ANY) {\n+        return value ? *value : \"\";\n+    }\n+\n+    // Allow -key=\"\" settings. These are useful on the command line to reset\n+    // settings specified in the config file back to default values.\n+    if (value && value->empty()) return util::SettingsValue{\"\"};\n+\n+    // Return parsed bool, int, and string values if allowed by flags.\n+    int64_t parsed_int;\n+    if ((flags & ArgsManager::ALLOW_STRING) && value) return util::SettingsValue{*value};\n+    if ((flags & ArgsManager::ALLOW_INT) && value && ParseInt64(*value, &parsed_int)) return util::SettingsValue{parsed_int};\n+    if ((flags & ArgsManager::ALLOW_BOOL) && value && *value == \"0\") return util::SettingsValue{false};\n+    if ((flags & ArgsManager::ALLOW_BOOL) && (!value || *value == \"1\")) return util::SettingsValue{true};\n+\n+    // If didn't return above, settings value is not valid for this key.\n+    if (value) {\n+        error = strprintf(\"Can not set -%s value to '%s'\", key.name, *value);\n+    } else {\n+        error = strprintf(\"Can not set -%s with no value\", key.name);\n+    }\n+    error = strprintf(\"%s. %s\", error,\n+                      (flags & ArgsManager::ALLOW_STRING) ? \"It must be set to a string.\" :\n+                      (flags & ArgsManager::ALLOW_INT) ? \"It must be set to an integer.\" :\n+                      (flags & ArgsManager::ALLOW_BOOL) ? \"It must be set to 0 or 1.\" :\n+                      \"It must be left unset.\");\n+    return std::nullopt;\n+}\n+\n+//! Return bool if setting is a bool or number, otherwise return default_value.\n+//! Optionally coerce strings settings as well.\n+static inline bool ValueToBool(const util::SettingsValue& value, bool default_value, bool coerce)\n+{\n+    if (coerce && value.isStr()) return InterpretBool(value.get_str());\n+    return value.isBool() ? value.get_bool() : value.isNum() ? value.get_int64() != 0 : default_value;\n+}\n+\n+//! Return int64 if setting is a number or bool, otherwise return default_value.\n+//! Optionally coerce string settings as well.\n+static inline int64_t ValueToInt64(const util::SettingsValue& value, int64_t default_value, bool coerce)\n+{\n+    if (coerce && value.isStr()) return LocaleIndependentAtoi<int64_t>(value.get_str());\n+    return value.isNum() ? value.get_int64() : value.isFalse() ? 0 : value.isTrue() ? 1 : default_value;\n+}\n+\n+//! Return string if setting is a nonempty string (-setting=abc), \"\" if setting\n+//! is false (-nosetting), otherwise return default_value. Optionally coerce\n+//! bool and number settings to strings as well.\n+static inline std::string ValueToString(const util::SettingsValue& value,\n+    const std::string& default_value,\n+    bool coerce)\n+{\n+    if (coerce && value.isBool()) return value.get_bool() ? \"1\" : \"0\";\n+    if (coerce && value.isNum()) return value.getValStr();\n+    if (coerce && value.isStr()) return value.get_str();\n+    return value.isStr() && !value.get_str().empty() ? value.get_str() : value.isFalse() ? \"\" : default_value;\n }\n \n namespace {\n@@ -322,7 +385,7 @@ bool ArgsManager::ParseParameters(int argc, const char* const argv[], std::strin\n #endif\n \n         if (key == \"-\") break; //bitcoin-tx using stdin\n-        std::string val;\n+        std::optional<std::string> val;\n         size_t is_index = key.find('=');\n         if (is_index != std::string::npos) {\n             val = key.substr(is_index + 1);\n@@ -368,7 +431,7 @@ bool ArgsManager::ParseParameters(int argc, const char* const argv[], std::strin\n             return false;\n         }\n \n-        std::optional<util::SettingsValue> value = InterpretValue(keyinfo, val, *flags, error);\n+        std::optional<util::SettingsValue> value = InterpretValue(keyinfo, val ? &*val : nullptr, *flags, error);\n         if (!value) return false;\n \n         m_settings.command_line_options[keyinfo.name].push_back(*value);\n@@ -398,6 +461,29 @@ std::optional<unsigned int> ArgsManager::GetArgFlags(const std::string& name) co\n     return std::nullopt;\n }\n \n+/**\n+ * Check that arg has the right flags for use in a given context. Raises\n+ * logic_error if this isn't the case, indicating the argument was registered\n+ * with bad AddArg flags.\n+ *\n+ * Returns true if the arg is registered and has checking enabled. Returns false\n+ * if the arg was never registered or checking was disabled with ALLOW_ANY.\n+ */\n+bool ArgsManager::CheckArgFlags(const std::string& name,\n+    unsigned int require,\n+    unsigned int forbid,\n+    const char* context) const\n+{\n+    std::optional<unsigned int> flags = GetArgFlags(name);\n+    if (!flags || *flags & ArgsManager::ALLOW_ANY) return false;\n+    if ((*flags & require) != require || (*flags & forbid) != 0) {\n+        throw std::logic_error(\n+            strprintf(\"Bug: Can't call %s on arg %s registered with flags 0x%08x (requires 0x%x, disallows 0x%x)\",\n+                context, name, *flags, require, forbid));\n+    }\n+    return true;\n+}\n+\n const fs::path& ArgsManager::GetBlocksDirPath() const\n {\n     LOCK(cs_args);\n@@ -486,9 +572,10 @@ std::optional<const ArgsManager::Command> ArgsManager::GetCommand() const\n \n std::vector<std::string> ArgsManager::GetArgs(const std::string& strArg) const\n {\n+    bool coerce = !CheckArgFlags(strArg, /* require= */ ALLOW_STRING | ALLOW_LIST, /* forbid= */ 0, __func__);\n     std::vector<std::string> result;\n     for (const util::SettingsValue& value : GetSettingsList(strArg)) {\n-        result.push_back(value.isFalse() ? \"0\" : value.isTrue() ? \"1\" : value.get_str());\n+        result.push_back(ValueToString(value, \"\", coerce));\n     }\n     return result;\n }\n@@ -589,20 +676,20 @@ bool ArgsManager::IsArgNegated(const std::string& strArg) const\n \n std::string ArgsManager::GetArg(const std::string& strArg, const std::string& strDefault) const\n {\n-    const util::SettingsValue value = GetSetting(strArg);\n-    return value.isNull() ? strDefault : value.isFalse() ? \"0\" : value.isTrue() ? \"1\" : value.get_str();\n+    bool coerce = !CheckArgFlags(strArg, /* require= */ ALLOW_STRING, /* forbid= */ ALLOW_LIST, __func__);\n+    return ValueToString(GetSetting(strArg), strDefault, coerce);\n }\n \n int64_t ArgsManager::GetIntArg(const std::string& strArg, int64_t nDefault) const\n {\n-    const util::SettingsValue value = GetSetting(strArg);\n-    return value.isNull() ? nDefault : value.isFalse() ? 0 : value.isTrue() ? 1 : value.isNum() ? value.get_int64() : LocaleIndependentAtoi<int64_t>(value.get_str());\n+    bool coerce = !CheckArgFlags(strArg, /* require= */ ALLOW_INT, /* forbid= */ ALLOW_LIST, __func__);\n+    return ValueToInt64(GetSetting(strArg), nDefault, coerce);\n }\n \n bool ArgsManager::GetBoolArg(const std::string& strArg, bool fDefault) const\n {\n-    const util::SettingsValue value = GetSetting(strArg);\n-    return value.isNull() ? fDefault : value.isBool() ? value.get_bool() : InterpretBool(value.get_str());\n+    bool coerce = !CheckArgFlags(strArg, /* require= */ 0, /* forbid= */ ALLOW_LIST, __func__);\n+    return ValueToBool(GetSetting(strArg), fDefault, coerce);\n }\n \n bool ArgsManager::SoftSetArg(const std::string& strArg, const std::string& strValue)\n@@ -615,15 +702,17 @@ bool ArgsManager::SoftSetArg(const std::string& strArg, const std::string& strVa\n \n bool ArgsManager::SoftSetBoolArg(const std::string& strArg, bool fValue)\n {\n-    if (fValue)\n-        return SoftSetArg(strArg, std::string(\"1\"));\n-    else\n-        return SoftSetArg(strArg, std::string(\"0\"));\n+    LOCK(cs_args);\n+    CheckArgFlags(strArg, /* require= */ ALLOW_BOOL, /* forbid= */ ALLOW_LIST, __func__);\n+    if (IsArgSet(strArg)) return false;\n+    m_settings.forced_settings[SettingName(strArg)] = fValue;\n+    return true;\n }\n \n void ArgsManager::ForceSetArg(const std::string& strArg, const std::string& strValue)\n {\n     LOCK(cs_args);\n+    CheckArgFlags(strArg, /* require= */ ALLOW_STRING, /* forbid= */ 0, __func__);\n     m_settings.forced_settings[SettingName(strArg)] = strValue;\n }\n \n@@ -658,6 +747,16 @@ void ArgsManager::AddArg(const std::string& name, const std::string& help, unsig\n     if (flags & ArgsManager::NETWORK_ONLY) {\n         m_network_only_args.emplace(arg_name);\n     }\n+\n+    if ((flags & (ALLOW_BOOL | ALLOW_INT | ALLOW_STRING)) && (flags & ALLOW_ANY)) {\n+        throw std::logic_error(strprintf(\"Bug: bad %s flags. ALLOW_{BOOL|INT|STRING} flags would have no effect with \"\n+                                         \"ALLOW_ANY present (ALLOW_ANY disables validation)\", arg_name));\n+    }\n+\n+    if ((flags & ALLOW_INT) && (flags & ALLOW_STRING)) {\n+        throw std::logic_error(strprintf(\"Bug: bad %s flags. ALLOW_INT would have no effect with ALLOW_STRING present \"\n+                                         \"(any valid integer is also a valid string)\", arg_name));\n+    }\n }\n \n void ArgsManager::AddHiddenArgs(const std::vector<std::string>& names)\n@@ -877,10 +976,12 @@ bool ArgsManager::ReadConfigStream(std::istream& stream, const std::string& file\n         KeyInfo key = InterpretKey(option.first);\n         std::optional<unsigned int> flags = GetArgFlags('-' + key.name);\n         if (flags) {\n-            std::optional<util::SettingsValue> value = InterpretValue(key, option.second, *flags, error);\n-            if (!value) {\n+            if (!(*flags & (ALLOW_ANY | ALLOW_LIST)) && m_settings.ro_config[key.section].count(key.name)) {\n+                error = strprintf(\"Multiple values specified for -%s in same section of config file.\", key.name);\n                 return false;\n             }\n+            std::optional<util::SettingsValue> value = InterpretValue(key, &option.second, *flags, error);\n+            if (!value) return false;\n             m_settings.ro_config[key.section][key.name].push_back(*value);\n         } else {\n             if (ignore_invalid_keys) {\n@@ -993,7 +1094,7 @@ std::string ArgsManager::GetChainName() const\n         util::SettingsValue value = util::GetSetting(m_settings, /* section= */ \"\", SettingName(arg),\n             /* ignore_default_section_config= */ false,\n             /* get_chain_name= */ true);\n-        return value.isNull() ? false : value.isBool() ? value.get_bool() : InterpretBool(value.get_str());\n+        return ValueToBool(value, /* default= */ false, /* coerce= */ true);\n     };\n \n     const bool fRegTest = get_net(\"-regtest\");"
      },
      {
        "sha": "afc2f01e5ffaab90411dcc26c05cf5ac4b55929f",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 10,
        "deletions": 7,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3345e119b07e6052ea0a6a0cfcc0186e6ddd3a06/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3345e119b07e6052ea0a6a0cfcc0186e6ddd3a06/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=3345e119b07e6052ea0a6a0cfcc0186e6ddd3a06",
        "patch": "@@ -164,10 +164,10 @@ class ArgsManager\n      */\n     enum Flags : uint32_t {\n         ALLOW_ANY = 0x01,         //!< disable validation\n-        // ALLOW_BOOL = 0x02,     //!< unimplemented, draft implementation in #16545\n-        // ALLOW_INT = 0x04,      //!< unimplemented, draft implementation in #16545\n-        // ALLOW_STRING = 0x08,   //!< unimplemented, draft implementation in #16545\n-        // ALLOW_LIST = 0x10,     //!< unimplemented, draft implementation in #16545\n+        ALLOW_BOOL = 0x02,        //!< allow -foo=1, -foo=0, -foo, -nofoo, -nofoo=1, and -foo=\n+        ALLOW_INT = 0x04,         //!< allow -foo=123, -nofoo, -nofoo=1, and -foo=\n+        ALLOW_STRING = 0x08,      //!< allow -foo=abc, -nofoo, -nofoo=1, and -foo=\n+        ALLOW_LIST = 0x10,        //!< allow multiple -foo=bar -foo=baz values\n         DISALLOW_NEGATION = 0x20, //!< disallow -nofoo syntax\n \n         DEBUG_ONLY = 0x100,\n@@ -202,6 +202,8 @@ class ArgsManager\n     mutable fs::path m_cached_datadir_path GUARDED_BY(cs_args);\n     mutable fs::path m_cached_network_datadir_path GUARDED_BY(cs_args);\n \n+    bool CheckArgFlags(const std::string& name, unsigned int require, unsigned int forbid, const char* context) const;\n+\n     [[nodiscard]] bool ReadConfigStream(std::istream& stream, const std::string& filepath, std::string& error, bool ignore_invalid_keys = false);\n \n     /**\n@@ -215,9 +217,10 @@ class ArgsManager\n     /**\n      * Get setting value.\n      *\n-     * Result will be null if setting was unset, true if \"-setting\" argument was passed\n-     * false if \"-nosetting\" argument was passed, and a string if a \"-setting=value\"\n-     * argument was passed.\n+     * Result will be null if setting was unset, true if \"-setting\" argument was\n+     * passed, false if \"-nosetting\" argument was passed, and a string, integer,\n+     * or boolean depending on ALLOW_{BOOL|INT|STRING} flags if a\n+     * \"-setting=value\" argument was passed.\n      */\n     util::SettingsValue GetSetting(const std::string& arg) const;\n "
      }
    ]
  }
]