[
  {
    "sha": "e1825ec2232bb05525d7009a442528387640c0f5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMTgyNWVjMjIzMmJiMDU1MjVkNzAwOWE0NDI1MjgzODc2NDBjMGY1",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-12-16T09:01:17Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-01-02T14:31:25Z"
      },
      "message": "Add CAuxiliaryBlockRequest, a class to handle auxiliary blocks downloads\n\nThis is required for features that need to download and process block higher/further-away then the current validation depth",
      "tree": {
        "sha": "341aff9b327fe21ff0578476ee9c1f265acd1731",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/341aff9b327fe21ff0578476ee9c1f265acd1731"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e1825ec2232bb05525d7009a442528387640c0f5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEMu5cTD+hXMrbRqvlKdS8tkFvU+wFAlhqZD8ACgkQKdS8tkFv\nU+zDKw//TqtDz2eEXklUF+G1nLZHaiBaF7yxvU+0zHwew89ucp9u/m8FuYNq9yML\nZv3g2aOC4hiNwPyn+Xgth+GJNokFYNHfz8JH3baskHXoxFSCzaKpdHfY0y+qReiW\nweM8frvGUHqi3eTqMggjj5KCGvUWrwS4B9zAWT5DW7hJn6bJf4V/knpxyzLTRUQz\nXZKzHfZ4KuLNgBITaHaPMREVHMl/IcD1twAkrpBcp8OqG36eIrP8+43/8D19cgc4\nYkrdBLr+lxTGSWLC9y7xbd7ViSBdWMhQX1kbcvd4XmMVD4EqoHHLwrGweHe3xQjx\nU+WREUHfpcwGiJbeDd46LNvPQxcuUrcKSaJOZjbNIpfoRfvDrhc3FEHBZtG6lsYD\nuN3x+Uj9zS+gdOpjL2RjdiW/+uIctA+uITzEQ2JUx6o2E47Vc4XYSs7/KZQgqoRE\nH5Ojdrb+7TmnCZe/j4iWWpmZeOoOley2KFTf30Ghek4S2EerV7dXJ24kv90JqkMn\nCqKGB0/rQVE2pJyuvomJ5UvuNO5ZT8lHUZIScoB/n2R2/2xxh+5PI+xA0PmDECOx\nAmjky+XPCV8JidRzwYvp7J9IPB6jaVW0jU7EdeuPyoXaWMp9ogevqg3WCXDaCFl2\nbAXQlTWIt5NeYugIfXchr6jaFOtcchwjHMJblg1FX7xV+g9ss70=\n=ap1l\n-----END PGP SIGNATURE-----",
        "payload": "tree 341aff9b327fe21ff0578476ee9c1f265acd1731\nparent 7f72568e6b15fc139323fb200591a50762f6df0b\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1481878877 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1483367485 +0100\n\nAdd CAuxiliaryBlockRequest, a class to handle auxiliary blocks downloads\n\nThis is required for features that need to download and process block higher/further-away then the current validation depth\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1825ec2232bb05525d7009a442528387640c0f5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e1825ec2232bb05525d7009a442528387640c0f5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1825ec2232bb05525d7009a442528387640c0f5/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7f72568e6b15fc139323fb200591a50762f6df0b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f72568e6b15fc139323fb200591a50762f6df0b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7f72568e6b15fc139323fb200591a50762f6df0b"
      }
    ],
    "stats": {
      "total": 325,
      "additions": 275,
      "deletions": 50
    },
    "files": [
      {
        "sha": "4ad68bffd5b29172b1e00006e43714ae9549130d",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1825ec2232bb05525d7009a442528387640c0f5/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1825ec2232bb05525d7009a442528387640c0f5/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=e1825ec2232bb05525d7009a442528387640c0f5",
        "patch": "@@ -78,6 +78,7 @@ endif\n BITCOIN_CORE_H = \\\n   addrdb.h \\\n   addrman.h \\\n+  auxiliaryblockrequest.h \\\n   base58.h \\\n   bloom.h \\\n   blockencodings.h \\\n@@ -174,6 +175,7 @@ libbitcoin_server_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n libbitcoin_server_a_SOURCES = \\\n   addrman.cpp \\\n   addrdb.cpp \\\n+  auxiliaryblockrequest.cpp \\\n   bloom.cpp \\\n   blockencodings.cpp \\\n   chain.cpp \\"
      },
      {
        "sha": "dd9f86553bab558dbbe4e4f68321ece32550927d",
        "filename": "src/auxiliaryblockrequest.cpp",
        "status": "added",
        "additions": 126,
        "deletions": 0,
        "changes": 126,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1825ec2232bb05525d7009a442528387640c0f5/src/auxiliaryblockrequest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1825ec2232bb05525d7009a442528387640c0f5/src/auxiliaryblockrequest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/auxiliaryblockrequest.cpp?ref=e1825ec2232bb05525d7009a442528387640c0f5",
        "patch": "@@ -0,0 +1,126 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"auxiliaryblockrequest.h\"\n+\n+#include \"chainparams.h\"\n+#include \"validation.h\"\n+#include \"validationinterface.h\"\n+\n+#include <exception>\n+\n+static const unsigned int MAX_BLOCK_TO_PROCESS_PER_ITERATION = 5;\n+\n+std::shared_ptr<CAuxiliaryBlockRequest> currentBlockRequest; //thread-safe pointer (CAuxiliaryBlockRequest, the object, is also lock-free)\n+\n+CAuxiliaryBlockRequest::CAuxiliaryBlockRequest(std::vector<CBlockIndex*> vBlocksToDownloadIn, int64_t createdIn, const std::function<bool(std::shared_ptr<CAuxiliaryBlockRequest>, CBlockIndex *pindex)> progressCallbackIn) : vBlocksToDownload(vBlocksToDownloadIn), created(createdIn), progressCallback(progressCallbackIn)\n+{\n+    fCancelled = false;\n+    requestedUpToSize = 0;\n+    processedUpToSize = 0;\n+}\n+\n+void CAuxiliaryBlockRequest::processWithPossibleBlock(const std::shared_ptr<const CBlock> pblock, CBlockIndex *pindex)\n+{\n+    // don't process anything if the request was cancled\n+    if (this->fCancelled)\n+        return;\n+\n+    for (unsigned int i = this->processedUpToSize; i < this->vBlocksToDownload.size() ; i++) {\n+        CBlockIndex *pindexRequest = this->vBlocksToDownload[i];\n+        std::shared_ptr<const CBlock> currentBlock;\n+\n+        // if a block has been passed, check if is the next item in the sequence\n+        if (pindex && pblock && pindex == pindexRequest)\n+            currentBlock = pblock;\n+        else if (pindexRequest->nStatus & BLOCK_HAVE_DATA) {\n+            CBlock loadBlock;\n+            // we should already have this block on disk, process it\n+            if (!ReadBlockFromDisk(loadBlock, pindexRequest, Params().GetConsensus()))\n+                throw std::runtime_error(std::string(__func__) + \"Can't read block from disk\");\n+            currentBlock = std::make_shared<const CBlock>(loadBlock);\n+        } else {\n+            break;\n+        }\n+\n+        // fire signal with txns\n+        unsigned int cnt = 0;\n+        for(const auto& tx : currentBlock->vtx)\n+        {\n+            GetMainSignals().SyncTransaction(*tx, pindexRequest, cnt);\n+            cnt++;\n+        }\n+        this->processedUpToSize++;\n+\n+        // log some info\n+        LogPrint(\"net\", \"BlockRequest: proccessed up to %ld of total requested %ld blocks\\n\", this->processedUpToSize, this->vBlocksToDownload.size());\n+\n+        if (progressCallback)\n+            if (!progressCallback(shared_from_this(), pindexRequest))\n+                this->cancel();\n+\n+        // release global block request pointer if request has been completed\n+        if (this->processedUpToSize == this->vBlocksToDownload.size())\n+            currentBlockRequest = nullptr;\n+\n+        if (i-this->processedUpToSize >= MAX_BLOCK_TO_PROCESS_PER_ITERATION)\n+            break;\n+    }\n+}\n+\n+void CAuxiliaryBlockRequest::cancel()\n+{\n+    fCancelled = true;\n+    if (currentBlockRequest.get() == this) {\n+        // release shared pointer\n+        currentBlockRequest = nullptr;\n+    }\n+}\n+\n+bool CAuxiliaryBlockRequest::isCancelled()\n+{\n+    return fCancelled;\n+}\n+\n+void CAuxiliaryBlockRequest::setAsCurrentRequest()\n+{\n+    // if there is an existing block request, cancle it\n+    if (currentBlockRequest != nullptr)\n+        currentBlockRequest->fCancelled = true;\n+\n+    currentBlockRequest = shared_from_this();\n+}\n+\n+void CAuxiliaryBlockRequest::fillInNextBlocks(std::vector<CBlockIndex*>& vBlocks, unsigned int count, std::function<bool(CBlockIndex*)> filterBlocksCallback)\n+{\n+    for (unsigned int i = this->processedUpToSize; i < this->vBlocksToDownload.size() ; i++) {\n+        CBlockIndex *pindex = this->vBlocksToDownload[i];\n+        if ( filterBlocksCallback(pindex) && !(pindex->nStatus & BLOCK_HAVE_DATA)) {\n+            // the block was accepted by the filter, add it to the download queue\n+            vBlocks.push_back(pindex);\n+            if (vBlocks.size() == count) {\n+                break;\n+            }\n+        }\n+    }\n+\n+    //try to process already available blocks through the signal\n+    this->processWithPossibleBlock(NULL, NULL);\n+}\n+\n+unsigned int CAuxiliaryBlockRequest::amountOfBlocksLoaded()\n+{\n+    unsigned int haveData = 0;\n+    for (unsigned int i = 0; i < this->vBlocksToDownload.size() ; i++) {\n+        CBlockIndex *pindex = this->vBlocksToDownload[i];\n+        if (pindex->nStatus & BLOCK_HAVE_DATA)\n+            haveData++;\n+    }\n+    return haveData;\n+}\n+\n+std::shared_ptr<CAuxiliaryBlockRequest> CAuxiliaryBlockRequest::GetCurrentRequest()\n+{\n+    return currentBlockRequest;\n+}"
      },
      {
        "sha": "24e426dcaec6a5559f944c46e28e43558eaeba15",
        "filename": "src/auxiliaryblockrequest.h",
        "status": "added",
        "additions": 55,
        "deletions": 0,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1825ec2232bb05525d7009a442528387640c0f5/src/auxiliaryblockrequest.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1825ec2232bb05525d7009a442528387640c0f5/src/auxiliaryblockrequest.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/auxiliaryblockrequest.h?ref=e1825ec2232bb05525d7009a442528387640c0f5",
        "patch": "@@ -0,0 +1,55 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_AUXILIARYBLOCKREQUEST_H\n+#define BITCOIN_AUXILIARYBLOCKREQUEST_H\n+\n+#include <atomic>\n+#include \"chain.h\"\n+#include \"consensus/consensus.h\"\n+#include \"net.h\"\n+#include <stdint.h>\n+#include <vector>\n+\n+// \"Lock free\" auxiliary block request\n+class CAuxiliaryBlockRequest : public std::enable_shared_from_this<CAuxiliaryBlockRequest> {\n+public:\n+    std::atomic<size_t> requestedUpToSize; //requested up to this index in vBlocksToDownload\n+    std::atomic<size_t> processedUpToSize; //processed up to this index in vBlocksToDownload\n+\n+    const std::vector<CBlockIndex*> vBlocksToDownload;\n+    const int64_t created; //!timestamp when the block request was created\n+\n+    /** Constructor of the lock free CAuxiliaryBlockRequest, vBlocksToDownloadIn remains constant */\n+    CAuxiliaryBlockRequest(std::vector<CBlockIndex*> vBlocksToDownloadIn, int64_t created, const std::function<bool(std::shared_ptr<CAuxiliaryBlockRequest>, CBlockIndex *pindex)> progressCallbackIn);\n+\n+    /** Process the request, check if there are blocks available to \"stream\"\n+        over the SyncTransaction signal \n+        Allow to provide an optional block to avoid disk re-loading\n+     */\n+    void processWithPossibleBlock(const std::shared_ptr<const CBlock> pblock = nullptr, CBlockIndex *pindex = NULL);\n+\n+    /** Cancel the block request */\n+    void cancel();\n+    bool isCancelled();\n+\n+    /** Set as the current block request, invalidate/cancle the current one */\n+    void setAsCurrentRequest();\n+\n+    /** Fill next available, not already requested blocks into vBlocks\n+        allow to provide a function to check if block is already in flight somewhere */\n+    void fillInNextBlocks(std::vector<CBlockIndex*>& vBlocks, unsigned int count, std::function<bool(CBlockIndex*)> filterBlocksCallback);\n+\n+    /** returns the amount of already loaded/local-stored blocks from this blockrequest */\n+    unsigned int amountOfBlocksLoaded();\n+\n+    /** Get the current main blockrequest, thread_safe */\n+    static std::shared_ptr<CAuxiliaryBlockRequest> GetCurrentRequest();\n+\n+private:\n+    const std::function<bool(std::shared_ptr<CAuxiliaryBlockRequest>, CBlockIndex *pindex)> progressCallback; //! progress callback, with optional cancle mechanism (return false == cancel)\n+    std::atomic<bool> fCancelled;\n+};\n+\n+#endif // BITCOIN_AUXILIARYBLOCKREQUEST_H"
      },
      {
        "sha": "8a83614acf4f40c82462b269e7d03b46b419e2dd",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 42,
        "deletions": 11,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1825ec2232bb05525d7009a442528387640c0f5/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1825ec2232bb05525d7009a442528387640c0f5/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=e1825ec2232bb05525d7009a442528387640c0f5",
        "patch": "@@ -7,6 +7,7 @@\n \n #include \"addrman.h\"\n #include \"arith_uint256.h\"\n+#include \"auxiliaryblockrequest.h\"\n #include \"blockencodings.h\"\n #include \"chainparams.h\"\n #include \"consensus/validation.h\"\n@@ -104,6 +105,7 @@ namespace {\n         CBlockIndex* pindex;                                     //!< Optional.\n         bool fValidatedHeaders;                                  //!< Whether this block has validated headers at the time of request.\n         std::unique_ptr<PartiallyDownloadedBlock> partialBlock;  //!< Optional, used for CMPCTBLOCK downloads\n+        std::shared_ptr<CAuxiliaryBlockRequest> blockRequest;             //!< Optional, used for auxiliary block downloads\n     };\n     map<uint256, pair<NodeId, list<QueuedBlock>::iterator> > mapBlocksInFlight;\n \n@@ -306,7 +308,13 @@ void FinalizeNode(NodeId nodeid, bool& fUpdateConnectionTime) {\n // Requires cs_main.\n // Returns a bool indicating whether we requested this block.\n // Also used if a block was /not/ received and timed out or started with another peer\n-bool MarkBlockAsReceived(const uint256& hash) {\n+\n+struct MarkBlockAsReceivedResult {\n+    bool fRequested;\n+    std::shared_ptr<CAuxiliaryBlockRequest> blockRequest;\n+};\n+\n+const MarkBlockAsReceivedResult MarkBlockAsReceived(const uint256& hash) {\n     map<uint256, pair<NodeId, list<QueuedBlock>::iterator> >::iterator itInFlight = mapBlocksInFlight.find(hash);\n     if (itInFlight != mapBlocksInFlight.end()) {\n         CNodeState *state = State(itInFlight->second.first);\n@@ -319,19 +327,20 @@ bool MarkBlockAsReceived(const uint256& hash) {\n             // First block on the queue was received, update the start download time for the next one\n             state->nDownloadingSince = std::max(state->nDownloadingSince, GetTimeMicros());\n         }\n+        std::shared_ptr<CAuxiliaryBlockRequest> blockRequest = itInFlight->second.second->blockRequest;\n         state->vBlocksInFlight.erase(itInFlight->second.second);\n         state->nBlocksInFlight--;\n         state->nStallingSince = 0;\n         mapBlocksInFlight.erase(itInFlight);\n-        return true;\n+        return {true, blockRequest};\n     }\n-    return false;\n+    return {false, nullptr};\n }\n \n // Requires cs_main.\n // returns false, still setting pit, if the block was already in flight from the same peer\n // pit will only be valid as long as the same cs_main lock is being held\n-bool MarkBlockAsInFlight(NodeId nodeid, const uint256& hash, const Consensus::Params& consensusParams, CBlockIndex *pindex = NULL, list<QueuedBlock>::iterator **pit = NULL) {\n+bool MarkBlockAsInFlight(NodeId nodeid, const uint256& hash, const Consensus::Params& consensusParams, CBlockIndex *pindex = NULL, list<QueuedBlock>::iterator **pit = NULL, std::shared_ptr<CAuxiliaryBlockRequest> blockRequest = {}) {\n     CNodeState *state = State(nodeid);\n     assert(state != NULL);\n \n@@ -346,7 +355,7 @@ bool MarkBlockAsInFlight(NodeId nodeid, const uint256& hash, const Consensus::Pa\n     MarkBlockAsReceived(hash);\n \n     list<QueuedBlock>::iterator it = state->vBlocksInFlight.insert(state->vBlocksInFlight.end(),\n-            {hash, pindex, pindex != NULL, std::unique_ptr<PartiallyDownloadedBlock>(pit ? new PartiallyDownloadedBlock(&mempool) : NULL)});\n+            {hash, pindex, pindex != NULL, std::unique_ptr<PartiallyDownloadedBlock>(pit ? new PartiallyDownloadedBlock(&mempool) : NULL), blockRequest});\n     state->nBlocksInFlight++;\n     state->nBlocksInFlightValidHeaders += it->fValidatedHeaders;\n     if (state->nBlocksInFlight == 1) {\n@@ -462,7 +471,7 @@ CBlockIndex* LastCommonAncestor(CBlockIndex* pa, CBlockIndex* pb) {\n \n /** Update pindexLastCommonBlock and add not-in-flight missing successors to vBlocks, until it has\n  *  at most count entries. */\n-void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vector<CBlockIndex*>& vBlocks, NodeId& nodeStaller, const Consensus::Params& consensusParams) {\n+void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vector<CBlockIndex*>& vBlocks, NodeId& nodeStaller, const Consensus::Params& consensusParams, std::shared_ptr<CAuxiliaryBlockRequest> blockRequest) {\n     if (count == 0)\n         return;\n \n@@ -473,6 +482,23 @@ void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vector<CBl\n     // Make sure pindexBestKnownBlock is up to date, we'll need it.\n     ProcessBlockAvailability(nodeid);\n \n+    // if there is an open CAuxiliaryBlockRequest (out-of-band/specific block donwload), privileg it\n+    if (blockRequest && !blockRequest->isCancelled()) {\n+        // fill in next blocks to download, pass in a filter function to check mapBlocksInFlight\n+        blockRequest->fillInNextBlocks(vBlocks, count, [state](CBlockIndex *pIndexCheck) -> bool {\n+            // make sure the remote node has this block\n+            // we have already verified the chainWork through the headers-sync\n+            // lets just compare heights\n+            // missing blocks will lead to a time-out/missbehave and re-request (from different peer) (TODO: check)\n+            if (state->pindexBestKnownBlock == NULL || state->pindexBestKnownBlock->nHeight < pIndexCheck->nHeight)\n+                return false;\n+            return (mapBlocksInFlight.count(pIndexCheck->GetBlockHash()) == 0);\n+        });\n+\n+        // if we haven't completed the individual CAuxiliaryBlockRequest, we wont continue with \"normal\" IBD\n+        return;\n+    }\n+\n     if (state->pindexBestKnownBlock == NULL || state->pindexBestKnownBlock->nChainWork < chainActive.Tip()->nChainWork) {\n         // This peer has nothing interesting.\n         return;\n@@ -2168,18 +2194,22 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         // Such an unrequested block may still be processed, subject to the\n         // conditions in AcceptBlock().\n         bool forceProcessing = pfrom->fWhitelisted && !IsInitialBlockDownload();\n+        std::shared_ptr<CAuxiliaryBlockRequest> blockRequest = nullptr;\n         const uint256 hash(pblock->GetHash());\n         {\n             LOCK(cs_main);\n             // Also always process if we requested the block explicitly, as we may\n             // need it even though it is not a candidate for a new best tip.\n-            forceProcessing |= MarkBlockAsReceived(hash);\n+            MarkBlockAsReceivedResult result;\n+            result = MarkBlockAsReceived(hash);\n+            forceProcessing |= result.fRequested;\n+            blockRequest = result.blockRequest;\n             // mapBlockSource is only used for sending reject messages and DoS scores,\n             // so the race between here and cs_main in ProcessNewBlock is fine.\n             mapBlockSource.emplace(hash, std::make_pair(pfrom->GetId(), true));\n         }\n         bool fNewBlock = false;\n-        ProcessNewBlock(chainparams, pblock, forceProcessing, &fNewBlock);\n+        ProcessNewBlock(chainparams, pblock, forceProcessing, &fNewBlock, blockRequest);\n         if (fNewBlock)\n             pfrom->nLastBlockTime = GetTime();\n     }\n@@ -2992,12 +3022,13 @@ bool SendMessages(CNode* pto, CConnman& connman)\n         if (!pto->fClient && (fFetch || !IsInitialBlockDownload()) && state.nBlocksInFlight < MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n             vector<CBlockIndex*> vToDownload;\n             NodeId staller = -1;\n-            FindNextBlocksToDownload(pto->GetId(), MAX_BLOCKS_IN_TRANSIT_PER_PEER - state.nBlocksInFlight, vToDownload, staller, consensusParams);\n+            std::shared_ptr<CAuxiliaryBlockRequest> blockRequest = CAuxiliaryBlockRequest::GetCurrentRequest();\n+            FindNextBlocksToDownload(pto->GetId(), MAX_BLOCKS_IN_TRANSIT_PER_PEER - state.nBlocksInFlight, vToDownload, staller, consensusParams, blockRequest);\n             BOOST_FOREACH(CBlockIndex *pindex, vToDownload) {\n                 uint32_t nFetchFlags = GetFetchFlags(pto, pindex->pprev, consensusParams);\n                 vGetData.push_back(CInv(MSG_BLOCK | nFetchFlags, pindex->GetBlockHash()));\n-                MarkBlockAsInFlight(pto->GetId(), pindex->GetBlockHash(), consensusParams, pindex);\n-                LogPrint(\"net\", \"Requesting block %s (%d) peer=%d\\n\", pindex->GetBlockHash().ToString(),\n+                MarkBlockAsInFlight(pto->GetId(), pindex->GetBlockHash(), consensusParams, pindex, NULL, blockRequest);\n+                LogPrint(\"net\", \"Requesting%s block %s (%d) peer=%d\\n\", (blockRequest ? \" (auxiliary/SPV)\" : \" \"), pindex->GetBlockHash().ToString(),\n                     pindex->nHeight, pto->id);\n             }\n             if (state.nBlocksInFlight == 0 && staller != -1) {"
      },
      {
        "sha": "c6dc274827c2f06b3dda89af1821e4b527bb841c",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 48,
        "deletions": 38,
        "changes": 86,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1825ec2232bb05525d7009a442528387640c0f5/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1825ec2232bb05525d7009a442528387640c0f5/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=e1825ec2232bb05525d7009a442528387640c0f5",
        "patch": "@@ -3045,7 +3045,7 @@ bool ProcessNewBlockHeaders(const std::vector<CBlockHeader>& headers, CValidatio\n }\n \n /** Store block on disk. If dbp is non-NULL, the file is known to already reside on disk */\n-static bool AcceptBlock(const CBlock& block, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const CDiskBlockPos* dbp, bool* fNewBlock)\n+static bool AcceptBlock(const CBlock& block, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const CDiskBlockPos* dbp, bool* fNewBlock, bool onlyHeaderCheck = false)\n {\n     if (fNewBlock) *fNewBlock = false;\n     AssertLockHeld(cs_main);\n@@ -3056,40 +3056,47 @@ static bool AcceptBlock(const CBlock& block, CValidationState& state, const CCha\n     if (!AcceptBlockHeader(block, state, chainparams, &pindex))\n         return false;\n \n-    // Try to process all requested blocks that we don't have, but only\n-    // process an unrequested block if it's new and has enough work to\n-    // advance our tip, and isn't too many blocks ahead.\n-    bool fAlreadyHave = pindex->nStatus & BLOCK_HAVE_DATA;\n-    bool fHasMoreWork = (chainActive.Tip() ? pindex->nChainWork > chainActive.Tip()->nChainWork : true);\n-    // Blocks that are too out-of-order needlessly limit the effectiveness of\n-    // pruning, because pruning will not delete block files that contain any\n-    // blocks which are too close in height to the tip.  Apply this test\n-    // regardless of whether pruning is enabled; it should generally be safe to\n-    // not process unrequested blocks.\n-    bool fTooFarAhead = (pindex->nHeight > int(chainActive.Height() + MIN_BLOCKS_TO_KEEP));\n-\n-    // TODO: Decouple this function from the block download logic by removing fRequested\n-    // This requires some new chain datastructure to efficiently look up if a\n-    // block is in a chain leading to a candidate for best tip, despite not\n-    // being such a candidate itself.\n-\n-    // TODO: deal better with return value and error conditions for duplicate\n-    // and unrequested blocks.\n-    if (fAlreadyHave) return true;\n-    if (!fRequested) {  // If we didn't ask for it:\n-        if (pindex->nTx != 0) return true;  // This is a previously-processed block that was pruned\n-        if (!fHasMoreWork) return true;     // Don't process less-work chains\n-        if (fTooFarAhead) return true;      // Block height is too high\n-    }\n-    if (fNewBlock) *fNewBlock = true;\n-\n-    if (!CheckBlock(block, state, chainparams.GetConsensus(), GetAdjustedTime()) ||\n-        !ContextualCheckBlock(block, state, chainparams.GetConsensus(), pindex->pprev)) {\n-        if (state.IsInvalid() && !state.CorruptionPossible()) {\n-            pindex->nStatus |= BLOCK_FAILED_VALID;\n-            setDirtyBlockIndex.insert(pindex);\n+    // don't validate the block if we fetch it with a auxiliary CAuxiliaryBlockRequest\n+    if (onlyHeaderCheck) {\n+        LogPrint(\"net\", \"Accept specific block %s (%d)\\n\", pindex->GetBlockHash().ToString(), pindex->nHeight);\n+    }\n+    else\n+    {\n+        // Try to process all requested blocks that we don't have, but only\n+        // process an unrequested block if it's new and has enough work to\n+        // advance our tip, and isn't too many blocks ahead.\n+        bool fAlreadyHave = pindex->nStatus & BLOCK_HAVE_DATA;\n+        bool fHasMoreWork = (chainActive.Tip() ? pindex->nChainWork > chainActive.Tip()->nChainWork : true);\n+        // Blocks that are too out-of-order needlessly limit the effectiveness of\n+        // pruning, because pruning will not delete block files that contain any\n+        // blocks which are too close in height to the tip.  Apply this test\n+        // regardless of whether pruning is enabled; it should generally be safe to\n+        // not process unrequested blocks.\n+        bool fTooFarAhead = (pindex->nHeight > int(chainActive.Height() + MIN_BLOCKS_TO_KEEP));\n+\n+        // TODO: Decouple this function from the block download logic by removing fRequested\n+        // This requires some new chain datastructure to efficiently look up if a\n+        // block is in a chain leading to a candidate for best tip, despite not\n+        // being such a candidate itself.\n+\n+        // TODO: deal better with return value and error conditions for duplicate\n+        // and unrequested blocks.\n+        if (fAlreadyHave) return true;\n+        if (!fRequested) {  // If we didn't ask for it:\n+            if (pindex->nTx != 0) return true;  // This is a previously-processed block that was pruned\n+            if (!fHasMoreWork) return true;     // Don't process less-work chains\n+            if (fTooFarAhead) return true;      // Block height is too high\n+        }\n+        if (fNewBlock) *fNewBlock = true;\n+\n+        if (!CheckBlock(block, state, chainparams.GetConsensus(), GetAdjustedTime()) ||\n+            !ContextualCheckBlock(block, state, chainparams.GetConsensus(), pindex->pprev)) {\n+            if (state.IsInvalid() && !state.CorruptionPossible()) {\n+                pindex->nStatus |= BLOCK_FAILED_VALID;\n+                setDirtyBlockIndex.insert(pindex);\n+            }\n+            return error(\"%s: %s\", __func__, FormatStateMessage(state));\n         }\n-        return error(\"%s: %s\", __func__, FormatStateMessage(state));\n     }\n \n     int nHeight = pindex->nHeight;\n@@ -3117,27 +3124,30 @@ static bool AcceptBlock(const CBlock& block, CValidationState& state, const CCha\n     return true;\n }\n \n-bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, bool *fNewBlock)\n+bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, bool *fNewBlock, std::shared_ptr<CAuxiliaryBlockRequest> blockRequest)\n {\n+    CBlockIndex *pindex = NULL;\n     {\n         LOCK(cs_main);\n \n         // Store to disk\n-        CBlockIndex *pindex = NULL;\n         if (fNewBlock) *fNewBlock = false;\n         CValidationState state;\n-        bool ret = AcceptBlock(*pblock, state, chainparams, &pindex, fForceProcessing, NULL, fNewBlock);\n+        bool ret = AcceptBlock(*pblock, state, chainparams, &pindex, fForceProcessing, NULL, fNewBlock, (blockRequest != nullptr));\n         CheckBlockIndex(chainparams.GetConsensus());\n         if (!ret) {\n             GetMainSignals().BlockChecked(*pblock, state);\n             return error(\"%s: AcceptBlock FAILED\", __func__);\n         }\n     }\n \n+    if (blockRequest)\n+        blockRequest->processWithPossibleBlock(pblock, pindex);\n+\n     NotifyHeaderTip();\n \n     CValidationState state; // Only used to report errors, not invalidity - ignore it\n-    if (!ActivateBestChain(state, chainparams, pblock))\n+    if (!blockRequest && !ActivateBestChain(state, chainparams, pblock))\n         return error(\"%s: ActivateBestChain failed\", __func__);\n \n     return true;"
      },
      {
        "sha": "90f90a50204899d77a1bf33d9b7b23c0acd58b72",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1825ec2232bb05525d7009a442528387640c0f5/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1825ec2232bb05525d7009a442528387640c0f5/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=e1825ec2232bb05525d7009a442528387640c0f5",
        "patch": "@@ -11,6 +11,7 @@\n #endif\n \n #include \"amount.h\"\n+#include \"auxiliaryblockrequest.h\"\n #include \"chain.h\"\n #include \"coins.h\"\n #include \"protocol.h\" // For CMessageHeader::MessageStartChars\n@@ -231,7 +232,7 @@ static const uint64_t MIN_DISK_SPACE_FOR_BLOCK_FILES = 550 * 1024 * 1024;\n  * @param[out]  fNewBlock A boolean which is set to indicate if the block was first received via this call\n  * @return True if state.IsValid()\n  */\n-bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, bool* fNewBlock);\n+bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, bool* fNewBlock, std::shared_ptr<CAuxiliaryBlockRequest> blockRequest = nullptr);\n \n /**\n  * Process incoming block headers."
      }
    ]
  },
  {
    "sha": "81c6001d44a5992cda39458317a4aa63f691be39",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MWM2MDAxZDQ0YTU5OTJjZGEzOTQ1ODMxN2E0YWE2M2Y2OTFiZTM5",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-11-15T16:27:32Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-01-02T14:31:31Z"
      },
      "message": "Pass CBlockRequest blocks through SyncTransaction signal\n\n+ Adds a validate=true|false to the SyncTransaction signal",
      "tree": {
        "sha": "3e7a6fc049a94b9cd8716c076bf89221b95ed26c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3e7a6fc049a94b9cd8716c076bf89221b95ed26c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/81c6001d44a5992cda39458317a4aa63f691be39",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEMu5cTD+hXMrbRqvlKdS8tkFvU+wFAlhqZEMACgkQKdS8tkFv\nU+yT/xAAmY83tsld4kRbejhoBktvVvDJ+w1OygmJT4EXoi/05eclE0/n9CPA1iZI\noRQ8hEamj2PZM9aTPzaRjeyweqYE2mKAEcMnuLLqVYaydX1rVKIRtaBipGaNh77K\nTt/VCNfn+duoO12IJ0gCdiPVJaeotOxKumM0cUyf+nNvc2SPp0h726rpQzKD3dey\nx9+1isod14F7+FoiE/J7SRk7xjdFm7mSbhrNAsy44wNPKtQ51BQDcmFu24Fhylfb\nKe+K/xMf5jnjrzSnQ0o8sPWJkybF5uceink6nWSKnw3rXQ2U+hTRNYyUz8U0Wxvs\nFmBEwLXMekLAClUpVIsGpn17AKoToIWIknfWwqFe+RiN26MWjusyKfqVTrsMSZN8\nDcb6RjFgouManztNipmcaZubDKU73rzYmkR+wdoZjwWBBOHnD4lZkZMs6aYcYRZq\ngZRGBfV7UsEDiKlaBb1GtzjO66J3K0IwaiM8tgjV/2s1RTxXbJJTuo5vYVQsL73N\nTIWBnOoA5p5XCx22KoZKt5LmQ20XUDtoOHqtueXK6SQaKjAM8wOFMoxIdbi5M2Gs\n3HSlAl5joW1aThQQQrBnLEDSKQnsJKxDwcX4HRdy7bKR80/0iw5MMtHRK+yg30fB\n/6Mb3r6fWirJ79925asGjxhZGYP41aJ4DCrSonISAghZ7VUUUWc=\n=GCIP\n-----END PGP SIGNATURE-----",
        "payload": "tree 3e7a6fc049a94b9cd8716c076bf89221b95ed26c\nparent e1825ec2232bb05525d7009a442528387640c0f5\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1479227252 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1483367491 +0100\n\nPass CBlockRequest blocks through SyncTransaction signal\n\n+ Adds a validate=true|false to the SyncTransaction signal\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/81c6001d44a5992cda39458317a4aa63f691be39",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/81c6001d44a5992cda39458317a4aa63f691be39",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/81c6001d44a5992cda39458317a4aa63f691be39/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e1825ec2232bb05525d7009a442528387640c0f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1825ec2232bb05525d7009a442528387640c0f5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e1825ec2232bb05525d7009a442528387640c0f5"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 20,
      "deletions": 15
    },
    "files": [
      {
        "sha": "ba03359a01ecf33af263974f4bc43ee4a84fae89",
        "filename": "src/auxiliaryblockrequest.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81c6001d44a5992cda39458317a4aa63f691be39/src/auxiliaryblockrequest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81c6001d44a5992cda39458317a4aa63f691be39/src/auxiliaryblockrequest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/auxiliaryblockrequest.cpp?ref=81c6001d44a5992cda39458317a4aa63f691be39",
        "patch": "@@ -48,7 +48,8 @@ void CAuxiliaryBlockRequest::processWithPossibleBlock(const std::shared_ptr<cons\n         unsigned int cnt = 0;\n         for(const auto& tx : currentBlock->vtx)\n         {\n-            GetMainSignals().SyncTransaction(*tx, pindexRequest, cnt);\n+            bool valid = ((pindexRequest->nStatus & BLOCK_VALID_MASK) == BLOCK_VALID_MASK);\n+            GetMainSignals().SyncTransaction(*tx, pindexRequest, cnt, valid);\n             cnt++;\n         }\n         this->processedUpToSize++;"
      },
      {
        "sha": "4095675c12c2757832915e25afbcc4dd0f815618",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81c6001d44a5992cda39458317a4aa63f691be39/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81c6001d44a5992cda39458317a4aa63f691be39/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=81c6001d44a5992cda39458317a4aa63f691be39",
        "patch": "@@ -750,8 +750,8 @@ PeerLogicValidation::PeerLogicValidation(CConnman* connmanIn) : connman(connmanI\n     recentRejects.reset(new CRollingBloomFilter(120000, 0.000001));\n }\n \n-void PeerLogicValidation::SyncTransaction(const CTransaction& tx, const CBlockIndex* pindex, int nPosInBlock) {\n-    if (nPosInBlock == CMainSignals::SYNC_TRANSACTION_NOT_IN_BLOCK)\n+void PeerLogicValidation::SyncTransaction(const CTransaction& tx, const CBlockIndex* pindex, int nPosInBlock, bool validated) {\n+    if (nPosInBlock == CMainSignals::SYNC_TRANSACTION_NOT_IN_BLOCK || !validated)\n         return;\n \n     LOCK(cs_main);"
      },
      {
        "sha": "199524fe060560ea75d7000d787ad726fb81af52",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81c6001d44a5992cda39458317a4aa63f691be39/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81c6001d44a5992cda39458317a4aa63f691be39/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=81c6001d44a5992cda39458317a4aa63f691be39",
        "patch": "@@ -21,7 +21,7 @@ class PeerLogicValidation : public CValidationInterface {\n public:\n     PeerLogicValidation(CConnman* connmanIn);\n \n-    virtual void SyncTransaction(const CTransaction& tx, const CBlockIndex* pindex, int nPosInBlock);\n+    virtual void SyncTransaction(const CTransaction& tx, const CBlockIndex* pindex, int nPosInBlock, bool validated);\n     virtual void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload);\n     virtual void BlockChecked(const CBlock& block, const CValidationState& state);\n };"
      },
      {
        "sha": "3200ad12217ea06a29a5851a3005830ed8513f46",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81c6001d44a5992cda39458317a4aa63f691be39/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81c6001d44a5992cda39458317a4aa63f691be39/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=81c6001d44a5992cda39458317a4aa63f691be39",
        "patch": "@@ -950,7 +950,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n         }\n     }\n \n-    GetMainSignals().SyncTransaction(tx, NULL, CMainSignals::SYNC_TRANSACTION_NOT_IN_BLOCK);\n+    GetMainSignals().SyncTransaction(tx, NULL, CMainSignals::SYNC_TRANSACTION_NOT_IN_BLOCK, true);\n \n     return true;\n }\n@@ -2135,7 +2135,7 @@ bool static DisconnectTip(CValidationState& state, const CChainParams& chainpara\n     // Let wallets know transactions went from 1-confirmed to\n     // 0-confirmed or conflicted:\n     for (const auto& tx : block.vtx) {\n-        GetMainSignals().SyncTransaction(*tx, pindexDelete->pprev, CMainSignals::SYNC_TRANSACTION_NOT_IN_BLOCK);\n+        GetMainSignals().SyncTransaction(*tx, pindexDelete->pprev, CMainSignals::SYNC_TRANSACTION_NOT_IN_BLOCK, true);\n     }\n     return true;\n }\n@@ -2431,7 +2431,7 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n             assert(pair.second);\n             const CBlock& block = *(pair.second);\n             for (unsigned int i = 0; i < block.vtx.size(); i++)\n-                GetMainSignals().SyncTransaction(*block.vtx[i], pair.first, i);\n+                GetMainSignals().SyncTransaction(*block.vtx[i], pair.first, i, true);\n         }\n \n         // Notify external listeners about the new tip."
      },
      {
        "sha": "4c1a560dda08ae82d6c0d50db246b5b51d18acce",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81c6001d44a5992cda39458317a4aa63f691be39/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81c6001d44a5992cda39458317a4aa63f691be39/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=81c6001d44a5992cda39458317a4aa63f691be39",
        "patch": "@@ -14,7 +14,7 @@ CMainSignals& GetMainSignals()\n \n void RegisterValidationInterface(CValidationInterface* pwalletIn) {\n     g_signals.UpdatedBlockTip.connect(boost::bind(&CValidationInterface::UpdatedBlockTip, pwalletIn, _1, _2, _3));\n-    g_signals.SyncTransaction.connect(boost::bind(&CValidationInterface::SyncTransaction, pwalletIn, _1, _2, _3));\n+    g_signals.SyncTransaction.connect(boost::bind(&CValidationInterface::SyncTransaction, pwalletIn, _1, _2, _3, _4));\n     g_signals.UpdatedTransaction.connect(boost::bind(&CValidationInterface::UpdatedTransaction, pwalletIn, _1));\n     g_signals.SetBestChain.connect(boost::bind(&CValidationInterface::SetBestChain, pwalletIn, _1));\n     g_signals.Inventory.connect(boost::bind(&CValidationInterface::Inventory, pwalletIn, _1));\n@@ -32,7 +32,7 @@ void UnregisterValidationInterface(CValidationInterface* pwalletIn) {\n     g_signals.Inventory.disconnect(boost::bind(&CValidationInterface::Inventory, pwalletIn, _1));\n     g_signals.SetBestChain.disconnect(boost::bind(&CValidationInterface::SetBestChain, pwalletIn, _1));\n     g_signals.UpdatedTransaction.disconnect(boost::bind(&CValidationInterface::UpdatedTransaction, pwalletIn, _1));\n-    g_signals.SyncTransaction.disconnect(boost::bind(&CValidationInterface::SyncTransaction, pwalletIn, _1, _2, _3));\n+    g_signals.SyncTransaction.disconnect(boost::bind(&CValidationInterface::SyncTransaction, pwalletIn, _1, _2, _3, _4));\n     g_signals.UpdatedBlockTip.disconnect(boost::bind(&CValidationInterface::UpdatedBlockTip, pwalletIn, _1, _2, _3));\n }\n "
      },
      {
        "sha": "7c7d6bda4382daacff5c6a3c7f7a39885c70d032",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81c6001d44a5992cda39458317a4aa63f691be39/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81c6001d44a5992cda39458317a4aa63f691be39/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=81c6001d44a5992cda39458317a4aa63f691be39",
        "patch": "@@ -32,7 +32,7 @@ void UnregisterAllValidationInterfaces();\n class CValidationInterface {\n protected:\n     virtual void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {}\n-    virtual void SyncTransaction(const CTransaction &tx, const CBlockIndex *pindex, int posInBlock) {}\n+    virtual void SyncTransaction(const CTransaction &tx, const CBlockIndex *pindex, int posInBlock, bool validated = true) {}\n     virtual void SetBestChain(const CBlockLocator &locator) {}\n     virtual void UpdatedTransaction(const uint256 &hash) {}\n     virtual void Inventory(const uint256 &hash) {}\n@@ -51,7 +51,7 @@ struct CMainSignals {\n     /** A posInBlock value for SyncTransaction which indicates the transaction was conflicted, disconnected, or not in a block */\n     static const int SYNC_TRANSACTION_NOT_IN_BLOCK = -1;\n     /** Notifies listeners of updated transaction data (transaction, and optionally the block it is found in. */\n-    boost::signals2::signal<void (const CTransaction &, const CBlockIndex *pindex, int posInBlock)> SyncTransaction;\n+    boost::signals2::signal<void (const CTransaction &, const CBlockIndex *pindex, int posInBlock, bool validated)> SyncTransaction;\n     /** Notifies listeners of an updated transaction without new data (for now: a coinbase potentially becoming visible). */\n     boost::signals2::signal<void (const uint256 &)> UpdatedTransaction;\n     /** Notifies listeners of a new active block chain. */"
      },
      {
        "sha": "0ab1b78e9a1bc13c149fd9369cbfd74a0975280e",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81c6001d44a5992cda39458317a4aa63f691be39/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81c6001d44a5992cda39458317a4aa63f691be39/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=81c6001d44a5992cda39458317a4aa63f691be39",
        "patch": "@@ -1121,7 +1121,7 @@ void CWallet::MarkConflicted(const uint256& hashBlock, const uint256& hashTx)\n     }\n }\n \n-void CWallet::SyncTransaction(const CTransaction& tx, const CBlockIndex *pindex, int posInBlock)\n+void CWallet::SyncTransaction(const CTransaction& tx, const CBlockIndex *pindex, int posInBlock, bool validated)\n {\n     LOCK2(cs_main, cs_wallet);\n "
      },
      {
        "sha": "7051694ffca03ef6668b9965abba2019c0c55b6a",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81c6001d44a5992cda39458317a4aa63f691be39/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81c6001d44a5992cda39458317a4aa63f691be39/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=81c6001d44a5992cda39458317a4aa63f691be39",
        "patch": "@@ -755,8 +755,8 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     void MarkDirty();\n     bool AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose=true);\n     bool LoadToWallet(const CWalletTx& wtxIn);\n-    void SyncTransaction(const CTransaction& tx, const CBlockIndex *pindex, int posInBlock);\n     bool AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlockIndex* pIndex, int posInBlock, bool fUpdate);\n+    void SyncTransaction(const CTransaction& tx, const CBlockIndex *pindex, int posInBlock, bool validated);\n     int ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate = false);\n     void ReacceptWalletTransactions();\n     void ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman);"
      },
      {
        "sha": "1305e278702eedf4e43fbe0e6c8971c7294a35af",
        "filename": "src/zmq/zmqnotificationinterface.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81c6001d44a5992cda39458317a4aa63f691be39/src/zmq/zmqnotificationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81c6001d44a5992cda39458317a4aa63f691be39/src/zmq/zmqnotificationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqnotificationinterface.cpp?ref=81c6001d44a5992cda39458317a4aa63f691be39",
        "patch": "@@ -144,8 +144,12 @@ void CZMQNotificationInterface::UpdatedBlockTip(const CBlockIndex *pindexNew, co\n     }\n }\n \n-void CZMQNotificationInterface::SyncTransaction(const CTransaction& tx, const CBlockIndex* pindex, int posInBlock)\n+void CZMQNotificationInterface::SyncTransaction(const CTransaction& tx, const CBlockIndex* pindex, int posInBlock, bool validated)\n {\n+    // don't post non-validated tx for now\n+    if (!validated)\n+        return;\n+\n     for (std::list<CZMQAbstractNotifier*>::iterator i = notifiers.begin(); i!=notifiers.end(); )\n     {\n         CZMQAbstractNotifier *notifier = *i;"
      },
      {
        "sha": "8a3ed36086116314f31f18666a2b8c6a58c8467b",
        "filename": "src/zmq/zmqnotificationinterface.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81c6001d44a5992cda39458317a4aa63f691be39/src/zmq/zmqnotificationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81c6001d44a5992cda39458317a4aa63f691be39/src/zmq/zmqnotificationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqnotificationinterface.h?ref=81c6001d44a5992cda39458317a4aa63f691be39",
        "patch": "@@ -24,7 +24,7 @@ class CZMQNotificationInterface : public CValidationInterface\n     void Shutdown();\n \n     // CValidationInterface\n-    void SyncTransaction(const CTransaction& tx, const CBlockIndex *pindex, int posInBlock);\n+    void SyncTransaction(const CTransaction& tx, const CBlockIndex *pindex, int posInBlock, bool validated);\n     void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload);\n \n private:"
      }
    ]
  },
  {
    "sha": "87f62504be8da9a5ab3f750e1bcda6ceb0e2985d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4N2Y2MjUwNGJlOGRhOWE1YWIzZjc1MGUxYmNkYTZjZWIwZTI5ODVk",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-11-16T07:56:44Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-01-02T14:31:31Z"
      },
      "message": "CBlockRequest: make SyncTransaction() optional",
      "tree": {
        "sha": "1fc95f076b7bac7eac287f4f0875e9d3968229c9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1fc95f076b7bac7eac287f4f0875e9d3968229c9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/87f62504be8da9a5ab3f750e1bcda6ceb0e2985d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEMu5cTD+hXMrbRqvlKdS8tkFvU+wFAlhqZEMACgkQKdS8tkFv\nU+xJkQ/+NSi0dd2+Q4u8ZLOBiEnSlKXwbdRdZmym2aMLsGxKwEk+GcA/V4jKH7fk\nQ3EOxBFjzfBiGsbx81ralBZs7+L5ucKZ96TUkeymt88VVD91kgyKzeHMWfFLexal\nfSKLfdtAOrdDJ6MvPkGR4fWFQfcSC3LUm0vD0Q3PwqIuGyu9YT9Rv7GR4CyJGq+F\nqXgnJzzHFsZTbVZc/b5HoRdmlo1b8wKvccRsgPzRjGAKQMMwy0uGN3LJadvmIiZS\ne9EjycWI1XZcWcniVHnSSLps7X8BdDX+d5uvxZxlVw1yPFxtfUjfW7+5KZtjEhED\nylktTKA4+wrjTT5Bcvs5hF0IhBn9/q1CKpr7eMS/5mBJf21f9Rzjx5R34erkRS25\nkuzp96iZME2u23JfmVG2RCOWYOTpVu0hnSEWoehOPxXuNFszOQIteH5f/bwy+SPe\nvGJ7ANIxioAb+8jXN//fT0gTTLuRCje07NF8B5wBB7ngd8a+OgPu7PPc5f5pXBJX\n40B0H+hiwHosN/73f5iWN71Gj35xHStlKUdznj3UxHgEW9YrXu/nqjtMNLXlCBw1\nHlvrrXnKzU0BD2wYiSotqkw/BsNuAnccp2j/brYKuZyhZmAAI0hggsZewE4V5yN6\noW52sd7OBECJbGtX+1qlOpgZekzGNSkQBFLmKqHFNaxte/KcVas=\n=zwMd\n-----END PGP SIGNATURE-----",
        "payload": "tree 1fc95f076b7bac7eac287f4f0875e9d3968229c9\nparent 81c6001d44a5992cda39458317a4aa63f691be39\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1479283004 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1483367491 +0100\n\nCBlockRequest: make SyncTransaction() optional\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87f62504be8da9a5ab3f750e1bcda6ceb0e2985d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/87f62504be8da9a5ab3f750e1bcda6ceb0e2985d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87f62504be8da9a5ab3f750e1bcda6ceb0e2985d/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "81c6001d44a5992cda39458317a4aa63f691be39",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/81c6001d44a5992cda39458317a4aa63f691be39",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/81c6001d44a5992cda39458317a4aa63f691be39"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 11,
      "deletions": 8
    },
    "files": [
      {
        "sha": "3d21026a59c831723c4fd245f7650dbfd6bc7305",
        "filename": "src/auxiliaryblockrequest.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 7,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87f62504be8da9a5ab3f750e1bcda6ceb0e2985d/src/auxiliaryblockrequest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87f62504be8da9a5ab3f750e1bcda6ceb0e2985d/src/auxiliaryblockrequest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/auxiliaryblockrequest.cpp?ref=87f62504be8da9a5ab3f750e1bcda6ceb0e2985d",
        "patch": "@@ -14,7 +14,7 @@ static const unsigned int MAX_BLOCK_TO_PROCESS_PER_ITERATION = 5;\n \n std::shared_ptr<CAuxiliaryBlockRequest> currentBlockRequest; //thread-safe pointer (CAuxiliaryBlockRequest, the object, is also lock-free)\n \n-CAuxiliaryBlockRequest::CAuxiliaryBlockRequest(std::vector<CBlockIndex*> vBlocksToDownloadIn, int64_t createdIn, const std::function<bool(std::shared_ptr<CAuxiliaryBlockRequest>, CBlockIndex *pindex)> progressCallbackIn) : vBlocksToDownload(vBlocksToDownloadIn), created(createdIn), progressCallback(progressCallbackIn)\n+CAuxiliaryBlockRequest::CAuxiliaryBlockRequest(std::vector<CBlockIndex*> vBlocksToDownloadIn, int64_t createdIn, bool passThroughSignalsIn, const std::function<bool(std::shared_ptr<CAuxiliaryBlockRequest>, CBlockIndex *pindex)> progressCallbackIn) : vBlocksToDownload(vBlocksToDownloadIn), created(createdIn), passThroughSignals(passThroughSignalsIn), progressCallback(progressCallbackIn)\n {\n     fCancelled = false;\n     requestedUpToSize = 0;\n@@ -45,12 +45,14 @@ void CAuxiliaryBlockRequest::processWithPossibleBlock(const std::shared_ptr<cons\n         }\n \n         // fire signal with txns\n-        unsigned int cnt = 0;\n-        for(const auto& tx : currentBlock->vtx)\n-        {\n-            bool valid = ((pindexRequest->nStatus & BLOCK_VALID_MASK) == BLOCK_VALID_MASK);\n-            GetMainSignals().SyncTransaction(*tx, pindexRequest, cnt, valid);\n-            cnt++;\n+        if (passThroughSignals) {\n+            unsigned int cnt = 0;\n+            for(const auto& tx : currentBlock->vtx)\n+            {\n+                bool valid = ((pindexRequest->nStatus & BLOCK_VALID_MASK) == BLOCK_VALID_MASK);\n+                GetMainSignals().SyncTransaction(*tx, pindexRequest, cnt, valid);\n+                cnt++;\n+            }\n         }\n         this->processedUpToSize++;\n "
      },
      {
        "sha": "a616bb7621c1d3d470f680f0f402feeb69b57de3",
        "filename": "src/auxiliaryblockrequest.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87f62504be8da9a5ab3f750e1bcda6ceb0e2985d/src/auxiliaryblockrequest.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87f62504be8da9a5ab3f750e1bcda6ceb0e2985d/src/auxiliaryblockrequest.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/auxiliaryblockrequest.h?ref=87f62504be8da9a5ab3f750e1bcda6ceb0e2985d",
        "patch": "@@ -20,9 +20,10 @@ class CAuxiliaryBlockRequest : public std::enable_shared_from_this<CAuxiliaryBlo\n \n     const std::vector<CBlockIndex*> vBlocksToDownload;\n     const int64_t created; //!timestamp when the block request was created\n+    const bool passThroughSignals; //!if passThroughSignals is set, the received blocks transaction will be passed through the SyncTransaction signal */\n \n     /** Constructor of the lock free CAuxiliaryBlockRequest, vBlocksToDownloadIn remains constant */\n-    CAuxiliaryBlockRequest(std::vector<CBlockIndex*> vBlocksToDownloadIn, int64_t created, const std::function<bool(std::shared_ptr<CAuxiliaryBlockRequest>, CBlockIndex *pindex)> progressCallbackIn);\n+    CAuxiliaryBlockRequest(std::vector<CBlockIndex*> vBlocksToDownloadIn, int64_t created, bool passThroughSignalsIn, const std::function<bool(std::shared_ptr<CAuxiliaryBlockRequest>, CBlockIndex *pindex)> progressCallbackIn);\n \n     /** Process the request, check if there are blocks available to \"stream\"\n         over the SyncTransaction signal "
      }
    ]
  },
  {
    "sha": "a41ead7df37af0e07d884c13c94948ebab97f331",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNDFlYWQ3ZGYzN2FmMGUwN2Q4ODRjMTNjOTQ5NDhlYmFiOTdmMzMx",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-11-16T08:12:27Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-01-02T14:31:31Z"
      },
      "message": "Add requestblocks - request out-of-band blocks download - RPC call",
      "tree": {
        "sha": "bd3b03885f97b25bafbbd1dc563e165aa22e7c62",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bd3b03885f97b25bafbbd1dc563e165aa22e7c62"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a41ead7df37af0e07d884c13c94948ebab97f331",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEMu5cTD+hXMrbRqvlKdS8tkFvU+wFAlhqZEMACgkQKdS8tkFv\nU+x0ew/+NQj3nBii/YhYCfv7SlgAW7QVRUj4eZuXv4vhUfu+iMAM9MfW2mfnr2c+\nyNcaRFh8dYwcSK/Rj1Eo0hedjaLILzDIONs2TgatKHsumFNfRJw3pGm1l29lWJqK\ngdXJuVv17PybneX4i8MJ6Oxgq/8UL8cORh3eIalTkMl3LLg00JSvhTj8sIoyruRw\nDQXbsSmlA6g1jdygEj+rnWKNctGtTRV+dA1w42PtmBad3riDp67GFu8pvaKqqm1U\nbRt0R1WRbTRJjiwwgiBMDhnx0yAaEgXXvcGvsEWaPaeM6+4CnNVhx0tyV+GfdzRj\nHjDXvvYI2ffKAFCXCclnqDONT7UjY6WJamwwJMPmFZ0a7JramL3lkqaQAUUoXAxy\ntiUUbJ6IrXyvzWYY8Mv01tSflzA3PdvMkkjPqXfxs+HQ16M1J4o4IIjePvezQ57/\nMP7EgAzDs/DRhRIuI9Tqi/i5Ecqr2SuYJ1G+iSZZWyBdbZD4HvRu+UD+IhmEGfq8\ncUdpDp98czMzrRn/7/XcjYr/P0fkQi7rAh8CotDS5or4Jlju3pIgWL3rdtBxPivW\nh9xQXdaIH1K0wAxuPdrdBIlLMfYAd90sgoGKGbQ3XlafSb7ZNu5TiEbOssmH+5s4\nOrIwdBkvg/zgHWyOVtBIKbTiRA/XH+ANXzMiGJEPUc7EtOrcJp8=\n=Svd6\n-----END PGP SIGNATURE-----",
        "payload": "tree bd3b03885f97b25bafbbd1dc563e165aa22e7c62\nparent 87f62504be8da9a5ab3f750e1bcda6ceb0e2985d\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1479283947 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1483367491 +0100\n\nAdd requestblocks - request out-of-band blocks download - RPC call\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a41ead7df37af0e07d884c13c94948ebab97f331",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a41ead7df37af0e07d884c13c94948ebab97f331",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a41ead7df37af0e07d884c13c94948ebab97f331/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "87f62504be8da9a5ab3f750e1bcda6ceb0e2985d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87f62504be8da9a5ab3f750e1bcda6ceb0e2985d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/87f62504be8da9a5ab3f750e1bcda6ceb0e2985d"
      }
    ],
    "stats": {
      "total": 102,
      "additions": 101,
      "deletions": 1
    },
    "files": [
      {
        "sha": "7fd8150c689926954f2e708cd965150b1a082019",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 99,
        "deletions": 1,
        "changes": 100,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a41ead7df37af0e07d884c13c94948ebab97f331/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a41ead7df37af0e07d884c13c94948ebab97f331/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=a41ead7df37af0e07d884c13c94948ebab97f331",
        "patch": "@@ -4,6 +4,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"amount.h\"\n+#include \"auxiliaryblockrequest.h\"\n #include \"chain.h\"\n #include \"chainparams.h\"\n #include \"checkpoints.h\"\n@@ -25,6 +26,7 @@\n #include <univalue.h>\n \n #include <boost/thread/thread.hpp> // boost::thread::interrupt\n+#include <boost/assign/list_of.hpp>\n \n #include <mutex>\n #include <condition_variable>\n@@ -82,6 +84,8 @@ UniValue blockheaderToJSON(const CBlockIndex* blockindex)\n     // Only report confirmations if the block is on the main chain\n     if (chainActive.Contains(blockindex))\n         confirmations = chainActive.Height() - blockindex->nHeight + 1;\n+\n+    result.push_back(Pair(\"validated\", ((blockindex->nStatus & BLOCK_VALID_MASK) >= BLOCK_VALID_SCRIPTS)));\n     result.push_back(Pair(\"confirmations\", confirmations));\n     result.push_back(Pair(\"height\", blockindex->nHeight));\n     result.push_back(Pair(\"version\", blockindex->nVersion));\n@@ -110,6 +114,7 @@ UniValue blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool tx\n     // Only report confirmations if the block is on the main chain\n     if (chainActive.Contains(blockindex))\n         confirmations = chainActive.Height() - blockindex->nHeight + 1;\n+    result.push_back(Pair(\"validated\", (blockindex->nStatus & BLOCK_VALID_MASK) >= BLOCK_VALID_SCRIPTS));\n     result.push_back(Pair(\"confirmations\", confirmations));\n     result.push_back(Pair(\"strippedsize\", (int)::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS)));\n     result.push_back(Pair(\"size\", (int)::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION)));\n@@ -642,6 +647,7 @@ UniValue getblockheader(const JSONRPCRequest& request)\n             \"{\\n\"\n             \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n             \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n+            \"  \\\"validated\\\" : n,       (boolean) True if the block has been validated (for auxiliary block requests)\\n\"\n             \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n             \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n             \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n@@ -1366,6 +1372,98 @@ UniValue reconsiderblock(const JSONRPCRequest& request)\n     return NullUniValue;\n }\n \n+UniValue requestblocks(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 3)\n+        throw runtime_error(\n+                            \"requestblocks (start|cancel|status) ([\\\"hash_0\\\", \\\"hash_1\\\", ...]) (<pass-internally>)\\n\"\n+                            \"\\nRequests blocks (auxiliary) by eventually downloading them.\\n\"\n+                            \"\\nDownload of the requested blocks will be priorized.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. action            (string, required) the action to execute\\n\"\n+                            \"                                        start  = start a new block request (overwrite existing one)\\n\"\n+                            \"                                        cancel = stop current block request\\n\"\n+                            \"                                        status = get info about current request\\n\"\n+                            \"2. array of hashes   (array, optional) the hashes of the blocks to download\\n\"\n+                            \"2. pass-internally   (boolean, optional, default = false) If set, the transactions of the requested blocks get passed into the wallet/ZMQ/etc.\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"   cancel: <true|false> (\\\"true\\\" if a blockrequest was present)\\n\"\n+                            \"   start: {\\\"overwrite\\\": <true|false>} (if the new blocksrequest has overwritten an already existign one\\n\"\n+                            \"   status: {\\n\"\n+                            \"              \\\"created\\\": <timestamp> (block request was created at this timestamp)\\n\"\n+                            \"              \\\"is_cancled\\\": <true|false> (set if blockrequest is cancled)\\n\"\n+                            \"              \\\"requested_blocks\\\": <number> (amount of requestes blocks)\\n\"\n+                            \"              \\\"loaded_blocks\\\": <number> (amount of blocks already available on disk)\\n\"\n+                            \"              \\\"processed_blocks\\\": <number> (amount of already processed blocks)\\n\"\n+                            \"           }\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"requestblocks\", \"\\\"'[\\\"<blockhash>\\\"]'\\\"\")\n+                            + HelpExampleRpc(\"requestblocks\", \"\\\"'[\\\"<blockhash>\\\"]'\\\"\")\n+                            );\n+\n+    if (request.params[0].get_str() == \"cancel\")\n+    {\n+        if (CAuxiliaryBlockRequest::GetCurrentRequest()) {\n+            CAuxiliaryBlockRequest::GetCurrentRequest()->cancel();\n+            return UniValue(true);\n+        }\n+        else\n+            return UniValue(false);\n+    }\n+    if (request.params[0].get_str() == \"status\")\n+    {\n+        std::shared_ptr<CAuxiliaryBlockRequest> blockRequest = CAuxiliaryBlockRequest::GetCurrentRequest();\n+        UniValue ret(UniValue::VOBJ);\n+        ret.pushKV(\"request_present\", (bool)blockRequest);\n+        if (blockRequest) {\n+            ret.pushKV(\"created\", UniValue(blockRequest->created));\n+            ret.pushKV(\"is_cancled\", UniValue(blockRequest->isCancelled()));\n+            ret.pushKV(\"requested_blocks\", (int64_t)blockRequest->vBlocksToDownload.size());\n+            ret.pushKV(\"loaded_blocks\", (int)blockRequest->amountOfBlocksLoaded());\n+            ret.pushKV(\"processed_blocks\", (int64_t)blockRequest->processedUpToSize);\n+        }\n+        return ret;\n+    }\n+    if (request.params[0].get_str() == \"start\")\n+    {\n+        if (request.params.size() < 2)\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Missing blocks array\");\n+        UniValue hash_Uarray = request.params[1].get_array();\n+        if (!hash_Uarray.isArray())\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Second parameter must be an array\");\n+\n+        std::vector<CBlockIndex*> blocksToDownload;\n+        {\n+            LOCK(cs_main); //mapBlockIndex\n+            for (UniValue strHashU : hash_Uarray.getValues())\n+            {\n+                uint256 hash(uint256S(strHashU.get_str()));\n+                BlockMap::iterator mi = mapBlockIndex.find(hash);\n+                if (mi == mapBlockIndex.end())\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+                blocksToDownload.push_back((*mi).second);\n+            }\n+        }\n+\n+        bool passThroughSignals = false;\n+        if (request.params.size() == 3 && request.params[2].isBool())\n+            passThroughSignals = request.params[2].get_bool();\n+\n+        std::shared_ptr<CAuxiliaryBlockRequest> blockRequest(new CAuxiliaryBlockRequest(blocksToDownload, GetAdjustedTime(), passThroughSignals, [](std::shared_ptr<CAuxiliaryBlockRequest> cb_spvRequest, CBlockIndex *pindex) -> bool {\n+            return true;\n+        }));\n+        bool overwrite = (CAuxiliaryBlockRequest::GetCurrentRequest() != nullptr);\n+        // set the global SPV Request\n+        blockRequest->setAsCurrentRequest();\n+\n+        UniValue ret(UniValue::VOBJ);\n+        ret.pushKV(\"overwrite\", UniValue(overwrite));\n+        return ret;\n+    }\n+    else\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Unkown action\");\n+}\n+\n static const CRPCCommand commands[] =\n { //  category              name                      actor (function)         okSafeMode\n   //  --------------------- ------------------------  -----------------------  ----------\n@@ -1385,8 +1483,8 @@ static const CRPCCommand commands[] =\n     { \"blockchain\",         \"gettxout\",               &gettxout,               true  },\n     { \"blockchain\",         \"gettxoutsetinfo\",        &gettxoutsetinfo,        true  },\n     { \"blockchain\",         \"verifychain\",            &verifychain,            true  },\n-\n     { \"blockchain\",         \"preciousblock\",          &preciousblock,          true  },\n+    { \"blockchain\",         \"requestblocks\",          &requestblocks,          true  },\n \n     /* Not shown in help */\n     { \"hidden\",             \"invalidateblock\",        &invalidateblock,        true  },"
      },
      {
        "sha": "98de6a827fdfbcad6f39611f48fea767555d6fef",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a41ead7df37af0e07d884c13c94948ebab97f331/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a41ead7df37af0e07d884c13c94948ebab97f331/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=a41ead7df37af0e07d884c13c94948ebab97f331",
        "patch": "@@ -112,6 +112,8 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"setnetworkactive\", 0 },\n     { \"getmempoolancestors\", 1 },\n     { \"getmempooldescendants\", 1 },\n+    { \"requestblocks\", 1 },\n+    { \"requestblocks\", 2 },\n };\n \n class CRPCConvertTable"
      }
    ]
  },
  {
    "sha": "7c2e134446c2300b60c45d034d5b24d59d0da42b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YzJlMTM0NDQ2YzIzMDBiNjBjNDVkMDM0ZDViMjRkNTlkMGRhNDJi",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-12-16T15:04:42Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-01-02T14:31:31Z"
      },
      "message": "[Wallet] don't consume non-validated transactions",
      "tree": {
        "sha": "8b4008a9a487faf1b55f6fbb669901e3ed325f77",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8b4008a9a487faf1b55f6fbb669901e3ed325f77"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7c2e134446c2300b60c45d034d5b24d59d0da42b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEMu5cTD+hXMrbRqvlKdS8tkFvU+wFAlhqZEMACgkQKdS8tkFv\nU+w0nRAAqSffFShoPngR0t1CMxxEpSL3JZBIzsA8QQ6XcHmhDhpLK16mDHr9ksxm\naH/GyBtP71cJptF5PeAhoCSqks227gmjllPXf5MKNiaG97In+63bgsWfV2cWVrya\nBhfKn5Caev3yY/NOFI4c6sjsf5l0mqL9CPhbNQs8FfJc61rS0222Dq6bCuLqxU6K\na1ZDyD28na/LWler1c66Yp/tQf3ZqdkTnEOJaaGXBG4jVIRNuFd888D6stjT+IMz\nzS4wWqPw+MIKsbcLwHv41oxHP1rR3MSmFLEQ4qMqo1GmQyjfwlKCXZUNs/sAdyuT\nwK8Z47MtwwOkYZ5/dPQgoKjbOyvYC3ySqjTHzSrSwzfCk20/SNITmzpCm3mvJObf\nLZMroDRt7jpWQ2V+2Pjmqhg9zRQLaCVnSs/TLyBAB/qPPDnDMAuEI4OAfolAKt8E\nICjlRmz8cAu0mvLdSow+Jn08Xo2sRdD4rHCtY1EXTdNMtOHAN/q88BhVGvb9WoBZ\nYuuhIz7fu9DVyRN5tyn++i0WbVhT8IznA2KzVHMJWw0ZCpjys+E3TD33s/VcOKlE\nc8d1VU62Apq69YB0TpTH4EzaJYSTmu+SYCqdb4VDroYDmxpzLyfe9LSQrWds6spg\nvtdY8+KBK08zMPwIv1PgzhWJDCLi2zDFZwslJ8380fbFzdyxyUY=\n=SSC1\n-----END PGP SIGNATURE-----",
        "payload": "tree 8b4008a9a487faf1b55f6fbb669901e3ed325f77\nparent a41ead7df37af0e07d884c13c94948ebab97f331\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1481900682 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1483367491 +0100\n\n[Wallet] don't consume non-validated transactions\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c2e134446c2300b60c45d034d5b24d59d0da42b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7c2e134446c2300b60c45d034d5b24d59d0da42b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c2e134446c2300b60c45d034d5b24d59d0da42b/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a41ead7df37af0e07d884c13c94948ebab97f331",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a41ead7df37af0e07d884c13c94948ebab97f331",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a41ead7df37af0e07d884c13c94948ebab97f331"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ccd305f75cc19a28edac99231d0da0d79e49ccaa",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c2e134446c2300b60c45d034d5b24d59d0da42b/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c2e134446c2300b60c45d034d5b24d59d0da42b/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=7c2e134446c2300b60c45d034d5b24d59d0da42b",
        "patch": "@@ -1125,6 +1125,9 @@ void CWallet::SyncTransaction(const CTransaction& tx, const CBlockIndex *pindex,\n {\n     LOCK2(cs_main, cs_wallet);\n \n+    if (!validated)\n+        return;\n+\n     if (!AddToWalletIfInvolvingMe(tx, pindex, posInBlock, true))\n         return; // Not one of ours\n "
      }
    ]
  },
  {
    "sha": "6b60e7e7e1e61a84276174189ad4ed6af6356dbd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YjYwZTdlN2UxZTYxYTg0Mjc2MTc0MTg5YWQ0ZWQ2YWY2MzU2ZGJk",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-12-19T09:53:54Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-01-02T14:31:32Z"
      },
      "message": "Add -autorequestblocks debug option and setautorequestblocks hidden RPC call\n\nThis allows efficient testing of auxiliary block requests",
      "tree": {
        "sha": "6578fac2b871ff364fb0969af5b94809216ef203",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6578fac2b871ff364fb0969af5b94809216ef203"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6b60e7e7e1e61a84276174189ad4ed6af6356dbd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEMu5cTD+hXMrbRqvlKdS8tkFvU+wFAlhqZEQACgkQKdS8tkFv\nU+zbaw/+MKkK5qzT10XID2mHVtXY+9Iyd+2oTDoj2SV8ySNPkamtNxGFX5t303bJ\nAQSmnI0QGN3cVAFg6PRCfh5QACuzta5X7kw8ovDtsRKtNUixeQjz3b+K7JVIHsgp\nQh2jNMNobhJ89f5NhhpuuX90cu4TRTqGhdimUge0rvW3Fm7pGT0uoGTjF/+FU9KC\nSzYxbGB1OTkuq2IQxJA7Npplh3MCSCA5Ge8lQY/Amlq6MXmr0Gz7FAqY2VRCk0Jg\nYcstLBiSz5JeEtsP/+0SErTmSI746pa5IYD1KcDdEMV5x3H1DFtyKTOv8Rr4TUwS\nQARmu9pFfCS9aXJFH41IlamLI5Zf/KQ44VXR/W7Cgs9ZGCVh/VV+XTyCdDPXtmIB\nTnhkj9V5mx9dH5y9auWqHy4sO1NQWDu8XR6wiKpHVLHtn8sO3Drk6wqELHeDQcTf\nwpc9jyhTW1IH0YOQ89Gp32kH+KsgKLw+AvXRMg0M4wAmdZujj4NUgTaz9IlnEcIo\nRrKNZdY6ycxCadl+g4x6tMlZyl6O9TQWOPtIh1zgWz5qqk1T9jNAMNjq35U1PFVX\ntsk0txMXw9MdbmsUSdFs6/QinE6d8uRudnHZGBgj7fpu7oFky4oALFzz2fm1KXMz\neVp6v8BCzdroNV14cKPbxHKFRSZbD8AzLXZZJkOl/dTNDBysw/A=\n=GEEa\n-----END PGP SIGNATURE-----",
        "payload": "tree 6578fac2b871ff364fb0969af5b94809216ef203\nparent 7c2e134446c2300b60c45d034d5b24d59d0da42b\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1482141234 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1483367492 +0100\n\nAdd -autorequestblocks debug option and setautorequestblocks hidden RPC call\n\nThis allows efficient testing of auxiliary block requests\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b60e7e7e1e61a84276174189ad4ed6af6356dbd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6b60e7e7e1e61a84276174189ad4ed6af6356dbd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b60e7e7e1e61a84276174189ad4ed6af6356dbd/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7c2e134446c2300b60c45d034d5b24d59d0da42b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c2e134446c2300b60c45d034d5b24d59d0da42b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7c2e134446c2300b60c45d034d5b24d59d0da42b"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 39,
      "deletions": 0
    },
    "files": [
      {
        "sha": "6f0201a7aec04cefa4e6d6dc4315d38d10bc5ae6",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b60e7e7e1e61a84276174189ad4ed6af6356dbd/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b60e7e7e1e61a84276174189ad4ed6af6356dbd/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=6b60e7e7e1e61a84276174189ad4ed6af6356dbd",
        "patch": "@@ -429,6 +429,7 @@ std::string HelpMessage(HelpMessageMode mode)\n         strUsage += HelpMessageOpt(\"-limitdescendantcount=<n>\", strprintf(\"Do not accept transactions if any ancestor would have <n> or more in-mempool descendants (default: %u)\", DEFAULT_DESCENDANT_LIMIT));\n         strUsage += HelpMessageOpt(\"-limitdescendantsize=<n>\", strprintf(\"Do not accept transactions if any ancestor would have more than <n> kilobytes of in-mempool descendants (default: %u).\", DEFAULT_DESCENDANT_SIZE_LIMIT));\n         strUsage += HelpMessageOpt(\"-bip9params=deployment:start:end\", \"Use given start/end times for specified BIP9 deployment (regtest-only)\");\n+        strUsage += HelpMessageOpt(\"-autorequestblocks\", strprintf(\"Automatic block request, if disabled, blocks will not be requested in IBD/sync-up (default: %u)\", DEFAULT_AUTOMATIC_BLOCK_REQUESTS));\n     }\n     string debugCategories = \"addrman, alert, bench, cmpctblock, coindb, db, http, libevent, lock, mempool, mempoolrej, net, proxy, prune, rand, reindex, rpc, selectcoins, tor, zmq\"; // Don't translate these and qt below\n     if (mode == HMM_BITCOIN_QT)\n@@ -912,6 +913,7 @@ bool AppInitParameterInteraction()\n     }\n     fCheckBlockIndex = GetBoolArg(\"-checkblockindex\", chainparams.DefaultConsistencyChecks());\n     fCheckpointsEnabled = GetBoolArg(\"-checkpoints\", DEFAULT_CHECKPOINTS_ENABLED);\n+    fAutoRequestBlocks = GetBoolArg(\"-autorequestblocks\", DEFAULT_AUTOMATIC_BLOCK_REQUESTS);\n \n     // mempool limits\n     int64_t nMempoolSizeMax = GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;"
      },
      {
        "sha": "a28da51adcaa6db39f134d9f8f8a4d15aa28c7f2",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b60e7e7e1e61a84276174189ad4ed6af6356dbd/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b60e7e7e1e61a84276174189ad4ed6af6356dbd/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=6b60e7e7e1e61a84276174189ad4ed6af6356dbd",
        "patch": "@@ -62,6 +62,8 @@ void EraseOrphansFor(NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n static const uint64_t RANDOMIZER_ID_ADDRESS_RELAY = 0x3cac0035b5866b90ULL; // SHA256(\"main address relay\")[0:8]\n \n+std::atomic<bool> fAutoRequestBlocks(DEFAULT_AUTOMATIC_BLOCK_REQUESTS);\n+\n // Internal stuff\n namespace {\n     /** Number of nodes with fSyncStarted. */\n@@ -499,6 +501,10 @@ void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vector<CBl\n         return;\n     }\n \n+    // don't request any other blocks if we are in non autorequest mode (usefull for non-validation mode)\n+    if (!fAutoRequestBlocks)\n+        return;\n+\n     if (state->pindexBestKnownBlock == NULL || state->pindexBestKnownBlock->nChainWork < chainActive.Tip()->nChainWork) {\n         // This peer has nothing interesting.\n         return;"
      },
      {
        "sha": "74eb2c6fb843342f7f1cfd255e34fbd7fb93873a",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b60e7e7e1e61a84276174189ad4ed6af6356dbd/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b60e7e7e1e61a84276174189ad4ed6af6356dbd/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=6b60e7e7e1e61a84276174189ad4ed6af6356dbd",
        "patch": "@@ -14,6 +14,10 @@ void RegisterNodeSignals(CNodeSignals& nodeSignals);\n /** Unregister a network node */\n void UnregisterNodeSignals(CNodeSignals& nodeSignals);\n \n+/** if disabled, blocks will not be requested automatically, usefull for non-validation mode */\n+static const bool DEFAULT_AUTOMATIC_BLOCK_REQUESTS = true;\n+extern std::atomic<bool> fAutoRequestBlocks;\n+\n class PeerLogicValidation : public CValidationInterface {\n private:\n     CConnman* connman;"
      },
      {
        "sha": "b78120a98268b329d28d5b2b820499861a264031",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b60e7e7e1e61a84276174189ad4ed6af6356dbd/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b60e7e7e1e61a84276174189ad4ed6af6356dbd/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=6b60e7e7e1e61a84276174189ad4ed6af6356dbd",
        "patch": "@@ -11,6 +11,7 @@\n #include \"coins.h\"\n #include \"consensus/validation.h\"\n #include \"validation.h\"\n+#include \"net_processing.h\"\n #include \"policy/policy.h\"\n #include \"primitives/transaction.h\"\n #include \"rpc/server.h\"\n@@ -1464,6 +1465,30 @@ UniValue requestblocks(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Unkown action\");\n }\n \n+UniValue setautorequestblocks(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() > 1)\n+        throw runtime_error(\n+                            \"setautorequestblocks (true|false)\\n\"\n+                            \"\\nIf set to false, blocks will no longer be requested automatically\\n\"\n+                            \"Useful for a pure non-validation mode in conjunction with requestblocks.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. state             (boolean, optional) enables or disables the automatic block download\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"   status: <true|false> (\\\"true\\\" if a automatic blockdownloads are enabled)\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"setautorequestblocks\", \"\\\"false\\\"\")\n+                            + HelpExampleRpc(\"setautorequestblocks\", \"\\\"false\\\"\")\n+                            );\n+\n+    if (request.params.size() == 1)\n+        fAutoRequestBlocks = request.params[0].get_bool();\n+\n+    UniValue ret(UniValue::VOBJ);\n+    ret.pushKV(\"status\", UniValue(fAutoRequestBlocks));\n+    return ret;\n+}\n+\n static const CRPCCommand commands[] =\n { //  category              name                      actor (function)         okSafeMode\n   //  --------------------- ------------------------  -----------------------  ----------\n@@ -1492,6 +1517,7 @@ static const CRPCCommand commands[] =\n     { \"hidden\",             \"waitfornewblock\",        &waitfornewblock,        true  },\n     { \"hidden\",             \"waitforblock\",           &waitforblock,           true  },\n     { \"hidden\",             \"waitforblockheight\",     &waitforblockheight,     true  },\n+    { \"hidden\",             \"setautorequestblocks\",   &setautorequestblocks,   true  },\n };\n \n void RegisterBlockchainRPCCommands(CRPCTable &t)"
      },
      {
        "sha": "9e05fb681b9e040933465b518f312ee07c2d42ae",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b60e7e7e1e61a84276174189ad4ed6af6356dbd/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b60e7e7e1e61a84276174189ad4ed6af6356dbd/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=6b60e7e7e1e61a84276174189ad4ed6af6356dbd",
        "patch": "@@ -114,6 +114,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"getmempooldescendants\", 1 },\n     { \"requestblocks\", 1 },\n     { \"requestblocks\", 2 },\n+    { \"setautorequestblocks\", 0 },\n };\n \n class CRPCConvertTable"
      }
    ]
  },
  {
    "sha": "9a43921ec042edd7ae512169df8cbde4157e6fd2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YTQzOTIxZWMwNDJlZGQ3YWU1MTIxNjlkZjhjYmRlNDE1N2U2ZmQy",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-12-19T10:28:13Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-01-02T14:31:32Z"
      },
      "message": "[QA] Add auxiliary block request test",
      "tree": {
        "sha": "0c13459b62063d1c5092d0ad23e42f78bcbdad21",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0c13459b62063d1c5092d0ad23e42f78bcbdad21"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9a43921ec042edd7ae512169df8cbde4157e6fd2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEMu5cTD+hXMrbRqvlKdS8tkFvU+wFAlhqZEQACgkQKdS8tkFv\nU+wRLw/9F0bNce2ti2K+tm2iSC32iEFCRbguQQmp6ZcwSBGjpHZ0f1ufvSLCuivO\nbr5f70vzrbl0L/oKRvtIg35eEUOkiKnBdeejnUOEFkZFwSucukbp46ICrSsJN3/Q\n0/1Ca/Lr3lXhzWqYbZB/QLdqV+EJd5c0CCHZHv70SV+W6mQ3+UxD1rqhakeL5n5C\nC3aRWhDxhQ051jj22pK25tsy4LaXjL9IqK7VQCdJc8JXpUo/OzbjOVL2nhOvWVb5\nh+pyhAshq+me11HvUSQZomOkDlZK62jaNJPKXYgb13gVIAlcCWs+xNKK8nFHsqXa\ndnvW8Oy9YEipbJKXMsSKbwxJhPGQRSZLGhLHu2anhxVoIHoU66nXiBETogGqApOe\nm91ol+GDXD1NkTRsBo63jIaK6/P0rNLanYP8w27YB/9Ci7jUfDNZ+pY6w0MOFo5H\n7CSNirj4SluyDQGrDWp5Ub5JnWbAN7yku/VNZMpeSsfZkErz2kc9MhAPo/FESm0N\n+f6rbqzzOdNGidg0LaJRciNlQdH3ayiDWvypLQ1TO7JVRsgefWUNXRJ26br9kNYd\n8X78ONHnSXfug35JmxOlsNGGBbOF2raqDpls8rGGHIJlmmoLklV9hmxxxBg9fwv4\n/58wMrNfiAJWf7Eq1tZiLmOD9pypOrlKHGSaGYdvnEo14EEqEzU=\n=F0rH\n-----END PGP SIGNATURE-----",
        "payload": "tree 0c13459b62063d1c5092d0ad23e42f78bcbdad21\nparent 6b60e7e7e1e61a84276174189ad4ed6af6356dbd\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1482143293 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1483367492 +0100\n\n[QA] Add auxiliary block request test\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a43921ec042edd7ae512169df8cbde4157e6fd2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9a43921ec042edd7ae512169df8cbde4157e6fd2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a43921ec042edd7ae512169df8cbde4157e6fd2/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6b60e7e7e1e61a84276174189ad4ed6af6356dbd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b60e7e7e1e61a84276174189ad4ed6af6356dbd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6b60e7e7e1e61a84276174189ad4ed6af6356dbd"
      }
    ],
    "stats": {
      "total": 82,
      "additions": 82,
      "deletions": 0
    },
    "files": [
      {
        "sha": "a402cae597764fe2d8611de0eae778857c1363f5",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a43921ec042edd7ae512169df8cbde4157e6fd2/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a43921ec042edd7ae512169df8cbde4157e6fd2/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=9a43921ec042edd7ae512169df8cbde4157e6fd2",
        "patch": "@@ -151,6 +151,7 @@\n     'signmessages.py',\n     'nulldummy.py',\n     'import-rescan.py',\n+    'auxiliaryblockrequests.py',\n ]\n if ENABLE_ZMQ:\n     testScripts.append('zmq_test.py')"
      },
      {
        "sha": "9b9296a647fa0202e237efc9fb4f95400062193f",
        "filename": "qa/rpc-tests/auxiliaryblockrequests.py",
        "status": "added",
        "additions": 81,
        "deletions": 0,
        "changes": 81,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a43921ec042edd7ae512169df8cbde4157e6fd2/qa/rpc-tests/auxiliaryblockrequests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a43921ec042edd7ae512169df8cbde4157e6fd2/qa/rpc-tests/auxiliaryblockrequests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/auxiliaryblockrequests.py?ref=9a43921ec042edd7ae512169df8cbde4157e6fd2",
        "patch": "@@ -0,0 +1,81 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+\n+class AuxiliaryBlockRequestTest (BitcoinTestFramework):\n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 2\n+\n+    def setup_network(self):\n+        self.nodes = []\n+        self.nodes.append(start_node(0, self.options.tmpdir, []))\n+        self.nodes.append(start_node(1, self.options.tmpdir, [\"-autorequestblocks=0\"]))\n+        connect_nodes(self.nodes[0], 1)\n+\n+    def run_test(self):\n+        print(\"Mining blocks...\")\n+        self.nodes[0].generate(101)\n+        self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n+        time.sleep(5)\n+        ctps = self.nodes[1].getchaintips()\n+        headersheight = -1\n+        chaintipheight = -1\n+        for ct in ctps:\n+            if ct['status'] == \"headers-only\":\n+                headersheight = ct['height']\n+            if ct['status'] == \"active\":\n+                chaintipheight = ct['height']\n+        assert(headersheight == 101)\n+        assert(chaintipheight == 0)\n+\n+        node0bbhash = self.nodes[0].getbestblockhash()\n+        # best block should not be validated, header must be available\n+        bh = self.nodes[1].getblockheader(node0bbhash, True)\n+        assert(bh['validated'] == False)\n+        # block must not be available\n+        try:\n+            bh = self.nodes[1].getblock(node0bbhash, True)\n+            raise AssertionError('Block must not be available')\n+        except JSONRPCException as e:\n+            assert(e.error['code']==-32603)\n+\n+        # request best block (auxiliary)\n+        self.nodes[1].requestblocks(\"start\", [node0bbhash])\n+        timeout = 20\n+        while timeout > 0:\n+            if self.nodes[1].requestblocks(\"status\")['request_present'] == 0:\n+                break;\n+            time.sleep(1)\n+            timeout-=1\n+        assert(timeout>0)\n+\n+        # block must now be available\n+        block = self.nodes[1].getblock(node0bbhash, True)\n+        assert(block['hash'] == node0bbhash)\n+        assert(block['validated'] == False)\n+\n+        # enable auto-request of blocks\n+        self.nodes[1].setautorequestblocks(True)\n+        sync_blocks(self.nodes)\n+\n+        ctps = self.nodes[1].getchaintips()\n+        # same block must now be available with mode validated=true\n+        block = self.nodes[1].getblock(node0bbhash, True)\n+        assert(block['hash'] == node0bbhash)\n+        assert(block['validated'] == True)\n+\n+        chaintipheight = -1\n+        for ct in ctps:\n+            if ct['status'] == \"active\":\n+                chaintipheight = ct['height']\n+        assert(chaintipheight == 101)\n+        \n+if __name__ == '__main__':\n+    AuxiliaryBlockRequestTest ().main ()"
      }
    ]
  },
  {
    "sha": "5598be6f25a9ab5dfcc5d66f523e2df7c925c555",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NTk4YmU2ZjI1YTlhYjVkZmNjNWQ2NmY1MjNlMmRmN2M5MjVjNTU1",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-01-01T19:50:45Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-01-04T08:23:25Z"
      },
      "message": "Little CAuxiliaryBlockRequest refactor",
      "tree": {
        "sha": "be7c176c2b35f5818729bab67a18679f70fb4c6c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/be7c176c2b35f5818729bab67a18679f70fb4c6c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5598be6f25a9ab5dfcc5d66f523e2df7c925c555",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEMu5cTD+hXMrbRqvlKdS8tkFvU+wFAlhssP8ACgkQKdS8tkFv\nU+y5ug//Z2siU4bU8wMt6LVznQAANrQv5vTJDVqmkNpF1/KXXLXyaV1JOJtCYLDZ\n8rajykA6GU6m9zBbzFG480uvMTYeNVWa+4EMU/ZlTN7aLCt/bB/3smx7gx+Py2ko\nxBCYY1d6cV9zLLEBtFddcZcR8ydYn9GZQ0mYsqHpwWcN23TIntXgG16RZqfTITN8\n3XGdzo6VUHHtQBXkUlIPEDyRHgodN/U0+J+5kGNpZIADvHegYI76sHA5t+X7EZo4\nqtl+t7Gz6LzTE4EufPkyfIfLb52zQJ6V8j3mk5HEgnxOU9IXnDnw8gw73kWLGYYI\nUImmWfC5cgwKgY02u1n10CuNcrwtq7bB9H50SaSZMmn+w98zuuYGnITKwEtN8qRc\njZTVGQXuGFt9ubPUTziMP5qtc2lvZ7qVOez+v7P40CalQUXoXHufKf2akIBZu1Je\nsdS34Ikv7LoVYCt4yGayvQF8s7t/uJhATAGYBP1SPXV0eR2Tk1DWTysy8NR8Djuv\nIUR9cFfjfIGObwm5FEZEy9VyPLRgOTKCgVFvwVGvF8GiKAH/EUPthtsigSQinpwv\nY79RFVjGCTLe4QTWqFJYD+NNWYOzMk7a6WuB460pX+YWzHrS6BKDybFZia5eLYaJ\nT1hXox6FyytOiJ/mLZclIb5ZGsrYTO0UUX+zUBcZE4QkfzxjzIA=\n=2fx/\n-----END PGP SIGNATURE-----",
        "payload": "tree be7c176c2b35f5818729bab67a18679f70fb4c6c\nparent 9a43921ec042edd7ae512169df8cbde4157e6fd2\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1483300245 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1483518205 +0100\n\nLittle CAuxiliaryBlockRequest refactor\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5598be6f25a9ab5dfcc5d66f523e2df7c925c555",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5598be6f25a9ab5dfcc5d66f523e2df7c925c555",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5598be6f25a9ab5dfcc5d66f523e2df7c925c555/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9a43921ec042edd7ae512169df8cbde4157e6fd2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a43921ec042edd7ae512169df8cbde4157e6fd2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9a43921ec042edd7ae512169df8cbde4157e6fd2"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 10,
      "deletions": 2
    },
    "files": [
      {
        "sha": "0f71a3643950b70335f01e5b2e35ac713a5b7f32",
        "filename": "src/auxiliaryblockrequest.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5598be6f25a9ab5dfcc5d66f523e2df7c925c555/src/auxiliaryblockrequest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5598be6f25a9ab5dfcc5d66f523e2df7c925c555/src/auxiliaryblockrequest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/auxiliaryblockrequest.cpp?ref=5598be6f25a9ab5dfcc5d66f523e2df7c925c555",
        "patch": "@@ -31,7 +31,7 @@ void CAuxiliaryBlockRequest::processWithPossibleBlock(const std::shared_ptr<cons\n         CBlockIndex *pindexRequest = this->vBlocksToDownload[i];\n         std::shared_ptr<const CBlock> currentBlock;\n \n-        // if a block has been passed, check if is the next item in the sequence\n+        // if a block has been passed, check if it's the next item in the sequence\n         if (pindex && pblock && pindex == pindexRequest)\n             currentBlock = pblock;\n         else if (pindexRequest->nStatus & BLOCK_HAVE_DATA) {\n@@ -64,7 +64,7 @@ void CAuxiliaryBlockRequest::processWithPossibleBlock(const std::shared_ptr<cons\n                 this->cancel();\n \n         // release global block request pointer if request has been completed\n-        if (this->processedUpToSize == this->vBlocksToDownload.size())\n+        if (currentBlockRequest == shared_from_this() && isCompleted())\n             currentBlockRequest = nullptr;\n \n         if (i-this->processedUpToSize >= MAX_BLOCK_TO_PROCESS_PER_ITERATION)\n@@ -123,6 +123,11 @@ unsigned int CAuxiliaryBlockRequest::amountOfBlocksLoaded()\n     return haveData;\n }\n \n+bool CAuxiliaryBlockRequest::isCompleted()\n+{\n+    return (this->processedUpToSize == this->vBlocksToDownload.size());\n+}\n+\n std::shared_ptr<CAuxiliaryBlockRequest> CAuxiliaryBlockRequest::GetCurrentRequest()\n {\n     return currentBlockRequest;"
      },
      {
        "sha": "8036b77419897d81828a3a07ce7126ea9b695e72",
        "filename": "src/auxiliaryblockrequest.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5598be6f25a9ab5dfcc5d66f523e2df7c925c555/src/auxiliaryblockrequest.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5598be6f25a9ab5dfcc5d66f523e2df7c925c555/src/auxiliaryblockrequest.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/auxiliaryblockrequest.h?ref=5598be6f25a9ab5dfcc5d66f523e2df7c925c555",
        "patch": "@@ -45,6 +45,9 @@ class CAuxiliaryBlockRequest : public std::enable_shared_from_this<CAuxiliaryBlo\n     /** returns the amount of already loaded/local-stored blocks from this blockrequest */\n     unsigned int amountOfBlocksLoaded();\n \n+    /** returns true if all blocks have been downloaded & processed */\n+    bool isCompleted();\n+\n     /** Get the current main blockrequest, thread_safe */\n     static std::shared_ptr<CAuxiliaryBlockRequest> GetCurrentRequest();\n "
      }
    ]
  }
]