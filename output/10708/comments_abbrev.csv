jonasschnelli,2017-06-29T20:13:33Z,"Concept ACK (not looked to closely at the code yet).\n10 blocks seems to be little... maybe it should be configurable (most memory consuming processes are configurable right now).\n",https://github.com/bitcoin/bitcoin/pull/10708#issuecomment-312090907,312090907,
gmaxwell,2017-06-29T20:22:31Z,"why would ten be too little?  If it made the code simpler I would have expected it to just do one, reading them isn't free but it's not that expensive-- shouldn't be the limiting factor in reorg performance.",https://github.com/bitcoin/bitcoin/pull/10708#issuecomment-312093114,312093114,
jonasschnelli,2017-06-29T20:40:48Z,"> why would ten be too little?\n\nI kinda followed the assumption that some users want to reorg as fast as possible (I's probably often a tiny difference) regardless of the depth of the reorganisation. I guess those users do not care about using 200MB+ for tracing the blocks in mem during a reorg. But it's a wild assumptions and maybe I'm wrong.",https://github.com/bitcoin/bitcoin/pull/10708#issuecomment-312099655,312099655,
TheBlueMatt,2017-06-29T20:56:46Z,Well I'm not sure how many users are really focused on how long a 20 block reorg will take...should be sufficiently rare that a user spending a lot of time thinking about it is probably less than useful.,https://github.com/bitcoin/bitcoin/pull/10708#issuecomment-312106389,312106389,
gmaxwell,2017-06-29T21:09:46Z,"@jonasschnelli reorgs are slow but for reasons that have nothing to do with reading blocks from the disk.  it can easily take many seconds to reorg 20 blocks, reading them will take a few milliseconds.  Making reorgs faster is great but I think this is the wrong place to optimize for that. ",https://github.com/bitcoin/bitcoin/pull/10708#issuecomment-312109412,312109412,
sipa,2017-06-29T23:14:34Z,It seems the `prune` flag is implied by `mode != FLUSH_STATE_IS_NEEDED`.,https://github.com/bitcoin/bitcoin/pull/10708#discussion_r124933618,124933618,src/validation.cpp
narula,2017-07-03T19:57:48Z,"Yes, you're right.  But is it reasonable to rely on that for prune's semantics?",https://github.com/bitcoin/bitcoin/pull/10708#discussion_r125350355,125350355,src/validation.cpp
JeremyRubin,2017-07-27T20:27:50Z,Why not preserve the default args?,https://github.com/bitcoin/bitcoin/pull/10708#discussion_r129950449,129950449,src/validation.cpp
JeremyRubin,2017-07-27T20:36:11Z,could collapse this with branch below?,https://github.com/bitcoin/bitcoin/pull/10708#discussion_r129952430,129952430,src/validation.cpp
JeremyRubin,2017-07-27T20:40:58Z,"better to just call `reset()` explicitly, should the ptr ever be made non-smart.",https://github.com/bitcoin/bitcoin/pull/10708#discussion_r129953542,129953542,src/validation.cpp
JeremyRubin,2017-07-28T07:12:35Z,"slight preference for \n\n```c++\n++num_connected;\nif (num_connected >= MAX_CONNECT_TRACE_BLOCKS_IN_MEMORY)\n```",https://github.com/bitcoin/bitcoin/pull/10708#discussion_r130026179,130026179,src/validation.cpp
JeremyRubin,2017-07-28T07:15:26Z,"probably a bit cleaner to just do:\n```c++\nstd::shared_ptr<const CBlock> pthisBlock(trace.pblock);\nif (!pThisBlock) {\n\n}\n```",https://github.com/bitcoin/bitcoin/pull/10708#discussion_r130026605,130026605,src/validation.cpp
JeremyRubin,2017-07-28T07:16:56Z,probably no need to make pblockNew? Can just assign directly with make_shared to pthisBlock.,https://github.com/bitcoin/bitcoin/pull/10708#discussion_r130026819,130026819,src/validation.cpp
