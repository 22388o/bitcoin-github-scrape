[
  {
    "sha": "c0e4575aa65597f2250b4ecba537f15fe2bb2315",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMGU0NTc1YWE2NTU5N2YyMjUwYjRlY2JhNTM3ZjE1ZmUyYmIyMzE1",
    "commit": {
      "author": {
        "name": "Neha Narula",
        "email": "narula@gmail.com",
        "date": "2017-06-29T18:15:40Z"
      },
      "committer": {
        "name": "Neha Narula",
        "email": "narula@gmail.com",
        "date": "2017-06-29T20:01:34Z"
      },
      "message": "Only keep a few (10) ConnectTrace blocks in memory during a reorg.\n\nDuring a large reorg, the number of blocks kept in memory could grow\nto be very large.  This change makes it so that only the last 10\nblocks are kept in memory, and if necessary, older blocks are re-read\nfrom disk.",
      "tree": {
        "sha": "9b083870aa15d73b2eac559ed0eb758ebfe70ff8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9b083870aa15d73b2eac559ed0eb758ebfe70ff8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c0e4575aa65597f2250b4ecba537f15fe2bb2315",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0e4575aa65597f2250b4ecba537f15fe2bb2315",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c0e4575aa65597f2250b4ecba537f15fe2bb2315",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0e4575aa65597f2250b4ecba537f15fe2bb2315/comments",
    "author": {
      "login": "narula",
      "id": 177646,
      "node_id": "MDQ6VXNlcjE3NzY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/177646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/narula",
      "html_url": "https://github.com/narula",
      "followers_url": "https://api.github.com/users/narula/followers",
      "following_url": "https://api.github.com/users/narula/following{/other_user}",
      "gists_url": "https://api.github.com/users/narula/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/narula/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/narula/subscriptions",
      "organizations_url": "https://api.github.com/users/narula/orgs",
      "repos_url": "https://api.github.com/users/narula/repos",
      "events_url": "https://api.github.com/users/narula/events{/privacy}",
      "received_events_url": "https://api.github.com/users/narula/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "narula",
      "id": 177646,
      "node_id": "MDQ6VXNlcjE3NzY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/177646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/narula",
      "html_url": "https://github.com/narula",
      "followers_url": "https://api.github.com/users/narula/followers",
      "following_url": "https://api.github.com/users/narula/following{/other_user}",
      "gists_url": "https://api.github.com/users/narula/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/narula/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/narula/subscriptions",
      "organizations_url": "https://api.github.com/users/narula/orgs",
      "repos_url": "https://api.github.com/users/narula/repos",
      "events_url": "https://api.github.com/users/narula/events{/privacy}",
      "received_events_url": "https://api.github.com/users/narula/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "65cc7aacfbfc7b747926375280a1d839e88d576b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65cc7aacfbfc7b747926375280a1d839e88d576b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/65cc7aacfbfc7b747926375280a1d839e88d576b"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 22,
      "deletions": 3
    },
    "files": [
      {
        "sha": "711003034d3f29d31e2527a56bf692afb9228df2",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 3,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0e4575aa65597f2250b4ecba537f15fe2bb2315/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0e4575aa65597f2250b4ecba537f15fe2bb2315/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=c0e4575aa65597f2250b4ecba537f15fe2bb2315",
        "patch": "@@ -2013,9 +2013,10 @@ class ConnectTrace {\n private:\n     std::vector<PerBlockConnectTrace> blocksConnected;\n     CTxMemPool &pool;\n+    int num_connected;\n \n public:\n-    ConnectTrace(CTxMemPool &_pool) : blocksConnected(1), pool(_pool) {\n+    ConnectTrace(CTxMemPool &_pool) : blocksConnected(1), pool(_pool), num_connected(0) {\n         pool.NotifyEntryRemoved.connect(boost::bind(&ConnectTrace::NotifyEntryRemoved, this, _1, _2));\n     }\n \n@@ -2029,6 +2030,12 @@ class ConnectTrace {\n         assert(pblock);\n         blocksConnected.back().pindex = pindex;\n         blocksConnected.back().pblock = std::move(pblock);\n+        if (++num_connected >= MAX_CONNECT_TRACE_BLOCKS_IN_MEMORY) {\n+            // Clear out a block\n+            int idx = blocksConnected.size() - num_connected;\n+            assert(idx >= 0);\n+            blocksConnected.at(idx).pblock = NULL;\n+        }\n         blocksConnected.emplace_back();\n     }\n \n@@ -2336,8 +2343,18 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n             fInitialDownload = IsInitialBlockDownload();\n \n             for (const PerBlockConnectTrace& trace : connectTrace.GetBlocksConnected()) {\n-                assert(trace.pblock && trace.pindex);\n-                GetMainSignals().BlockConnected(trace.pblock, trace.pindex, *trace.conflictedTxs);\n+                assert(trace.pindex);\n+                std::shared_ptr<const CBlock> pthisBlock;\n+                if (trace.pblock == NULL) {\n+                    std::shared_ptr<CBlock> pblockNew = std::make_shared<CBlock>();\n+                    if (!ReadBlockFromDisk(*pblockNew, trace.pindex, chainparams.GetConsensus()))\n+                        return AbortNode(state, \"Failed to re-read block from disk for wallet callback\");\n+                    pthisBlock = pblockNew;\n+                } else {\n+                    pthisBlock = trace.pblock;\n+                }\n+                assert(pthisBlock);\n+                GetMainSignals().BlockConnected(pthisBlock, trace.pindex, *trace.conflictedTxs);\n             }\n         }\n         // When we reach this point, we switched to a new tip (stored in pindexNewTip)."
      },
      {
        "sha": "3f867f23f87d0f2bbee0b77b04608e4b532205d7",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0e4575aa65597f2250b4ecba537f15fe2bb2315/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0e4575aa65597f2250b4ecba537f15fe2bb2315/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=c0e4575aa65597f2250b4ecba537f15fe2bb2315",
        "patch": "@@ -67,6 +67,8 @@ static const unsigned int DEFAULT_DESCENDANT_LIMIT = 25;\n static const unsigned int DEFAULT_DESCENDANT_SIZE_LIMIT = 101;\n /** Default for -mempoolexpiry, expiration time for mempool transactions in hours */\n static const unsigned int DEFAULT_MEMPOOL_EXPIRY = 336;\n+/** Number of blocks that will be kept in memory during a reorg via the ConnectTrace datastructure */\n+static const int MAX_CONNECT_TRACE_BLOCKS_IN_MEMORY = 10;\n /** Maximum kilobytes for transactions to store for processing during reorg */\n static const unsigned int MAX_DISCONNECTED_TX_POOL_SIZE = 20000;\n /** The maximum size of a blk?????.dat file (since 0.8) */"
      }
    ]
  },
  {
    "sha": "b7077bd98e218983d81be893195733c07efb62a6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNzA3N2JkOThlMjE4OTgzZDgxYmU4OTMxOTU3MzNjMDdlZmI2MmE2",
    "commit": {
      "author": {
        "name": "Neha Narula",
        "email": "narula@gmail.com",
        "date": "2017-06-29T19:55:34Z"
      },
      "committer": {
        "name": "Neha Narula",
        "email": "narula@gmail.com",
        "date": "2017-06-29T20:01:34Z"
      },
      "message": "Don't prune blocks while using a ConnectTrace.\n\nIntroduce a parameter to FlushStateToDisk to ensure that we do not try\nto prune during the life of a ConnectTrace, because we might need to\nre-read the block from disk.",
      "tree": {
        "sha": "f3e3b787d4a3617c877b2679a0262893b6cc640a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f3e3b787d4a3617c877b2679a0262893b6cc640a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b7077bd98e218983d81be893195733c07efb62a6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7077bd98e218983d81be893195733c07efb62a6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b7077bd98e218983d81be893195733c07efb62a6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7077bd98e218983d81be893195733c07efb62a6/comments",
    "author": {
      "login": "narula",
      "id": 177646,
      "node_id": "MDQ6VXNlcjE3NzY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/177646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/narula",
      "html_url": "https://github.com/narula",
      "followers_url": "https://api.github.com/users/narula/followers",
      "following_url": "https://api.github.com/users/narula/following{/other_user}",
      "gists_url": "https://api.github.com/users/narula/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/narula/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/narula/subscriptions",
      "organizations_url": "https://api.github.com/users/narula/orgs",
      "repos_url": "https://api.github.com/users/narula/repos",
      "events_url": "https://api.github.com/users/narula/events{/privacy}",
      "received_events_url": "https://api.github.com/users/narula/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "narula",
      "id": 177646,
      "node_id": "MDQ6VXNlcjE3NzY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/177646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/narula",
      "html_url": "https://github.com/narula",
      "followers_url": "https://api.github.com/users/narula/followers",
      "following_url": "https://api.github.com/users/narula/following{/other_user}",
      "gists_url": "https://api.github.com/users/narula/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/narula/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/narula/subscriptions",
      "organizations_url": "https://api.github.com/users/narula/orgs",
      "repos_url": "https://api.github.com/users/narula/repos",
      "events_url": "https://api.github.com/users/narula/events{/privacy}",
      "received_events_url": "https://api.github.com/users/narula/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c0e4575aa65597f2250b4ecba537f15fe2bb2315",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0e4575aa65597f2250b4ecba537f15fe2bb2315",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c0e4575aa65597f2250b4ecba537f15fe2bb2315"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 27,
      "deletions": 25
    },
    "files": [
      {
        "sha": "52db104ba28bd1ca33def0ad8f3d004f2cef8088",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 25,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7077bd98e218983d81be893195733c07efb62a6/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7077bd98e218983d81be893195733c07efb62a6/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=b7077bd98e218983d81be893195733c07efb62a6",
        "patch": "@@ -186,7 +186,7 @@ enum FlushStateMode {\n };\n \n // See definition for documentation\n-static bool FlushStateToDisk(const CChainParams& chainParams, CValidationState &state, FlushStateMode mode, int nManualPruneHeight=0);\n+static bool FlushStateToDisk(const CChainParams& chainParams, CValidationState &state, FlushStateMode mode, int nManualPruneHeight, bool prune);\n static void FindFilesToPruneManual(std::set<int>& setFilesToPrune, int nManualPruneHeight);\n static void FindFilesToPrune(std::set<int>& setFilesToPrune, uint64_t nPruneAfterHeight);\n static bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &inputs, bool fScriptChecks, unsigned int flags, bool cacheStore, PrecomputedTransactionData& txdata, std::vector<CScriptCheck> *pvChecks = NULL);\n@@ -827,7 +827,7 @@ static bool AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPo\n     }\n     // After we've (potentially) uncached entries, ensure our coins cache is still within its size limits\n     CValidationState stateDummy;\n-    FlushStateToDisk(chainparams, stateDummy, FLUSH_STATE_PERIODIC);\n+    FlushStateToDisk(chainparams, stateDummy, FLUSH_STATE_PERIODIC, 0, true);\n     return res;\n }\n \n@@ -1746,7 +1746,7 @@ static bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockInd\n  * if they're too large, if it's been a while since the last write,\n  * or always and in all cases if we're in prune mode and are deleting files.\n  */\n-bool static FlushStateToDisk(const CChainParams& chainparams, CValidationState &state, FlushStateMode mode, int nManualPruneHeight) {\n+bool static FlushStateToDisk(const CChainParams& chainparams, CValidationState &state, FlushStateMode mode, int nManualPruneHeight, bool prune) {\n     int64_t nMempoolUsage = mempool.DynamicMemoryUsage();\n     LOCK2(cs_main, cs_LastBlockFile);\n     static int64_t nLastWrite = 0;\n@@ -1755,18 +1755,20 @@ bool static FlushStateToDisk(const CChainParams& chainparams, CValidationState &\n     std::set<int> setFilesToPrune;\n     bool fFlushForPrune = false;\n     try {\n-    if (fPruneMode && (fCheckForPruning || nManualPruneHeight > 0) && !fReindex) {\n-        if (nManualPruneHeight > 0) {\n-            FindFilesToPruneManual(setFilesToPrune, nManualPruneHeight);\n-        } else {\n-            FindFilesToPrune(setFilesToPrune, chainparams.PruneAfterHeight());\n-            fCheckForPruning = false;\n-        }\n-        if (!setFilesToPrune.empty()) {\n-            fFlushForPrune = true;\n-            if (!fHavePruned) {\n-                pblocktree->WriteFlag(\"prunedblockfiles\", true);\n-                fHavePruned = true;\n+    if (prune) {\n+        if (fPruneMode && (fCheckForPruning || nManualPruneHeight > 0) && !fReindex) {\n+            if (nManualPruneHeight > 0) {\n+                FindFilesToPruneManual(setFilesToPrune, nManualPruneHeight);\n+            } else {\n+                FindFilesToPrune(setFilesToPrune, chainparams.PruneAfterHeight());\n+                fCheckForPruning = false;\n+            }\n+            if (!setFilesToPrune.empty()) {\n+                fFlushForPrune = true;\n+                if (!fHavePruned) {\n+                    pblocktree->WriteFlag(\"prunedblockfiles\", true);\n+                    fHavePruned = true;\n+                }\n             }\n         }\n     }\n@@ -1820,7 +1822,7 @@ bool static FlushStateToDisk(const CChainParams& chainparams, CValidationState &\n             }\n         }\n         // Finally remove any pruned files\n-        if (fFlushForPrune)\n+        if (fFlushForPrune && prune)\n             UnlinkPrunedFiles(setFilesToPrune);\n         nLastWrite = nNow;\n     }\n@@ -1852,14 +1854,14 @@ bool static FlushStateToDisk(const CChainParams& chainparams, CValidationState &\n void FlushStateToDisk() {\n     CValidationState state;\n     const CChainParams& chainparams = Params();\n-    FlushStateToDisk(chainparams, state, FLUSH_STATE_ALWAYS);\n+    FlushStateToDisk(chainparams, state, FLUSH_STATE_ALWAYS, 0, true);\n }\n \n void PruneAndFlush() {\n     CValidationState state;\n     fCheckForPruning = true;\n     const CChainParams& chainparams = Params();\n-    FlushStateToDisk(chainparams, state, FLUSH_STATE_NONE);\n+    FlushStateToDisk(chainparams, state, FLUSH_STATE_NONE, 0, true);\n }\n \n static void DoWarning(const std::string& strWarning)\n@@ -1957,7 +1959,7 @@ bool static DisconnectTip(CValidationState& state, const CChainParams& chainpara\n     }\n     LogPrint(BCLog::BENCH, \"- Disconnect block: %.2fms\\n\", (GetTimeMicros() - nStart) * 0.001);\n     // Write the chain state to disk, if necessary.\n-    if (!FlushStateToDisk(chainparams, state, FLUSH_STATE_IF_NEEDED))\n+    if (!FlushStateToDisk(chainparams, state, FLUSH_STATE_IF_NEEDED, 0, false))\n         return false;\n \n     if (disconnectpool) {\n@@ -2101,7 +2103,7 @@ bool static ConnectTip(CValidationState& state, const CChainParams& chainparams,\n     int64_t nTime4 = GetTimeMicros(); nTimeFlush += nTime4 - nTime3;\n     LogPrint(BCLog::BENCH, \"  - Flush: %.2fms [%.2fs]\\n\", (nTime4 - nTime3) * 0.001, nTimeFlush * 0.000001);\n     // Write the chain state to disk, if necessary.\n-    if (!FlushStateToDisk(chainparams, state, FLUSH_STATE_IF_NEEDED))\n+    if (!FlushStateToDisk(chainparams, state, FLUSH_STATE_IF_NEEDED, 0, false))\n         return false;\n     int64_t nTime5 = GetTimeMicros(); nTimeChainState += nTime5 - nTime4;\n     LogPrint(BCLog::BENCH, \"  - Writing chainstate: %.2fms [%.2fs]\\n\", (nTime5 - nTime4) * 0.001, nTimeChainState * 0.000001);\n@@ -2374,7 +2376,7 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n     CheckBlockIndex(chainparams.GetConsensus());\n \n     // Write changes periodically to disk, after relay.\n-    if (!FlushStateToDisk(chainparams, state, FLUSH_STATE_PERIODIC)) {\n+    if (!FlushStateToDisk(chainparams, state, FLUSH_STATE_PERIODIC, 0, true)) {\n         return false;\n     }\n \n@@ -3064,7 +3066,7 @@ static bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidation\n     }\n \n     if (fCheckForPruning)\n-        FlushStateToDisk(chainparams, state, FLUSH_STATE_NONE); // we just allocated more disk space for block files\n+        FlushStateToDisk(chainparams, state, FLUSH_STATE_NONE, 0, true); // we just allocated more disk space for block files\n \n     return true;\n }\n@@ -3211,7 +3213,7 @@ void PruneBlockFilesManual(int nManualPruneHeight)\n {\n     CValidationState state;\n     const CChainParams& chainparams = Params();\n-    FlushStateToDisk(chainparams, state, FLUSH_STATE_NONE, nManualPruneHeight);\n+    FlushStateToDisk(chainparams, state, FLUSH_STATE_NONE, nManualPruneHeight, true);\n }\n \n /**\n@@ -3679,7 +3681,7 @@ bool RewindBlockIndex(const CChainParams& params)\n             return error(\"RewindBlockIndex: unable to disconnect block at height %i\", pindex->nHeight);\n         }\n         // Occasionally flush state to disk.\n-        if (!FlushStateToDisk(params, state, FLUSH_STATE_PERIODIC))\n+        if (!FlushStateToDisk(params, state, FLUSH_STATE_PERIODIC, 0, true))\n             return false;\n     }\n \n@@ -3728,7 +3730,7 @@ bool RewindBlockIndex(const CChainParams& params)\n \n     CheckBlockIndex(params.GetConsensus());\n \n-    if (!FlushStateToDisk(params, state, FLUSH_STATE_ALWAYS)) {\n+    if (!FlushStateToDisk(params, state, FLUSH_STATE_ALWAYS, 0, true)) {\n         return false;\n     }\n "
      }
    ]
  }
]