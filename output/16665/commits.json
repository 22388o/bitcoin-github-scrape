[
  {
    "sha": "3d50fe2c1fb566501257fc16d4606e06f518a0bb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZDUwZmUyYzFmYjU2NjUwMTI1N2ZjMTZkNDYwNmUwNmY1MThhMGJi",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-08-20T03:14:00Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-08-20T03:14:00Z"
      },
      "message": "scripts: move update-translations.py to maintainer-tools repo",
      "tree": {
        "sha": "df69663de3cfb886b32da6ecde3c7eb0ad5aa800",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/df69663de3cfb886b32da6ecde3c7eb0ad5aa800"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3d50fe2c1fb566501257fc16d4606e06f518a0bb",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl1bZXgACgkQLuufXMCV\nJsFtrRAAjnJICKqV6eKC5WujgPnxXB7WYLxH62BPXVabI1JPSeHhvzw76Jk7yHoQ\nDkggGSroI2hVKYK+XPbA1CLTXHUfYRwFZn1nHkYTiu5qSYPG65lX9drj4XVUrNEu\nWnJwbRbMy4PSkXRAUnJfSCJ/2K4voIB+0W+DJQjaVR2sKAsJg7DnNYhv/lpJfv25\nImNHfAYW1LprST1XIfD8gx8LgdbA+15juE2UZTEYBTED56ZIp80EtJEfk5039p1h\n7REZhZgDTPmOxprgpdCx0zTht9uOrYQf1VTmbeIlLzdLo0g7WD07jc5bT7xNd/VL\nGW+QO7uNL4oAlkwfJbsuaaBSFJupcIv2s5hqpQ0AnYiLtw+ej11XUoju32D24FHd\nqFv4cN1cVl+n8kyW2dPSSjJEFp4VTnOwwM/3mcHUJ9Lv+2u9HNckz16uRwhHn1Da\no5D8v3eSq37rJ1GATATjG6JX55/xQJm1irkGBNr/BGaML0mMJt74z/wQFilMGcMA\nFU4TfH89N77rqKd7HxfZHvx18QLcOLIxYltyrKRuyNScP8i9ExS7JkcNXdUvoTHD\n0hruiMzD5Q7TNTHZbcL8/2doUDjG2jOnuG7nrlLMjTLYkX10c2cabZItUwLaEQWg\n1WjReevYMmsmidOzFQ0vPz47dm0hTrxt3lOCzSJazxyxa1G1lI0=\n=xgu3\n-----END PGP SIGNATURE-----",
        "payload": "tree df69663de3cfb886b32da6ecde3c7eb0ad5aa800\nparent e00ecb3d7aaee463643e486ca03c318e192b8058\nauthor fanquake <fanquake@gmail.com> 1566270840 +0800\ncommitter fanquake <fanquake@gmail.com> 1566270840 +0800\n\nscripts: move update-translations.py to maintainer-tools repo\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d50fe2c1fb566501257fc16d4606e06f518a0bb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3d50fe2c1fb566501257fc16d4606e06f518a0bb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d50fe2c1fb566501257fc16d4606e06f518a0bb/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e00ecb3d7aaee463643e486ca03c318e192b8058",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e00ecb3d7aaee463643e486ca03c318e192b8058",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e00ecb3d7aaee463643e486ca03c318e192b8058"
      }
    ],
    "stats": {
      "total": 231,
      "additions": 2,
      "deletions": 229
    },
    "files": [
      {
        "sha": "04fa02484f558830a8e8b846aaedb4cc93f80503",
        "filename": "contrib/devtools/README.md",
        "status": "modified",
        "additions": 0,
        "deletions": 12,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d50fe2c1fb566501257fc16d4606e06f518a0bb/contrib/devtools/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d50fe2c1fb566501257fc16d4606e06f518a0bb/contrib/devtools/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/README.md?ref=3d50fe2c1fb566501257fc16d4606e06f518a0bb",
        "patch": "@@ -120,18 +120,6 @@ If there are 'unsupported' symbols, the return value will be 1 a list like this\n     .../64/test_bitcoin: symbol std::out_of_range::~out_of_range() from unsupported version GLIBCXX_3.4.15\n     .../64/test_bitcoin: symbol _ZNSt8__detail15_List_nod from unsupported version GLIBCXX_3.4.15\n \n-update-translations.py\n-======================\n-\n-Run this script from the root of the repository to update all translations from transifex.\n-It will do the following automatically:\n-\n-- fetch all translations\n-- post-process them into valid and committable format\n-- add missing translations to the build system (TODO)\n-\n-See doc/translation-process.md for more information.\n-\n circular-dependencies.py\n ========================\n "
      },
      {
        "sha": "1b9d3a4c279d4b91778068591de5b0962e105876",
        "filename": "contrib/devtools/update-translations.py",
        "status": "removed",
        "additions": 0,
        "deletions": 215,
        "changes": 215,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e00ecb3d7aaee463643e486ca03c318e192b8058/contrib/devtools/update-translations.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e00ecb3d7aaee463643e486ca03c318e192b8058/contrib/devtools/update-translations.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/update-translations.py?ref=e00ecb3d7aaee463643e486ca03c318e192b8058",
        "patch": "@@ -1,215 +0,0 @@\n-#!/usr/bin/env python3\n-# Copyright (c) 2014 Wladimir J. van der Laan\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-'''\n-Run this script from the root of the repository to update all translations from\n-transifex.\n-It will do the following automatically:\n-\n-- fetch all translations using the tx tool\n-- post-process them into valid and committable format\n-  - remove invalid control characters\n-  - remove location tags (makes diffs less noisy)\n-\n-TODO:\n-- auto-add new translations to the build system according to the translation process\n-'''\n-import subprocess\n-import re\n-import sys\n-import os\n-import io\n-import xml.etree.ElementTree as ET\n-\n-# Name of transifex tool\n-TX = 'tx'\n-# Name of source language file\n-SOURCE_LANG = 'bitcoin_en.ts'\n-# Directory with locale files\n-LOCALE_DIR = 'src/qt/locale'\n-# Minimum number of messages for translation to be considered at all\n-MIN_NUM_MESSAGES = 10\n-# Regexp to check for Bitcoin addresses\n-ADDRESS_REGEXP = re.compile('([13]|bc1)[a-zA-Z0-9]{30,}')\n-\n-def check_at_repository_root():\n-    if not os.path.exists('.git'):\n-        print('No .git directory found')\n-        print('Execute this script at the root of the repository', file=sys.stderr)\n-        sys.exit(1)\n-\n-def fetch_all_translations():\n-    if subprocess.call([TX, 'pull', '-f', '-a']):\n-        print('Error while fetching translations', file=sys.stderr)\n-        sys.exit(1)\n-\n-def find_format_specifiers(s):\n-    '''Find all format specifiers in a string.'''\n-    pos = 0\n-    specifiers = []\n-    while True:\n-        percent = s.find('%', pos)\n-        if percent < 0:\n-            break\n-        specifiers.append(s[percent+1])\n-        pos = percent+2\n-    return specifiers\n-\n-def split_format_specifiers(specifiers):\n-    '''Split format specifiers between numeric (Qt) and others (strprintf)'''\n-    numeric = []\n-    other = []\n-    for s in specifiers:\n-        if s in {'1','2','3','4','5','6','7','8','9'}:\n-            numeric.append(s)\n-        else:\n-            other.append(s)\n-\n-    # If both numeric format specifiers and \"others\" are used, assume we're dealing\n-    # with a Qt-formatted message. In the case of Qt formatting (see https://doc.qt.io/qt-5/qstring.html#arg)\n-    # only numeric formats are replaced at all. This means \"(percentage: %1%)\" is valid, without needing\n-    # any kind of escaping that would be necessary for strprintf. Without this, this function\n-    # would wrongly detect '%)' as a printf format specifier.\n-    if numeric:\n-        other = []\n-\n-    # numeric (Qt) can be present in any order, others (strprintf) must be in specified order\n-    return set(numeric),other\n-\n-def sanitize_string(s):\n-    '''Sanitize string for printing'''\n-    return s.replace('\\n',' ')\n-\n-def check_format_specifiers(source, translation, errors, numerus):\n-    source_f = split_format_specifiers(find_format_specifiers(source))\n-    # assert that no source messages contain both Qt and strprintf format specifiers\n-    # if this fails, go change the source as this is hacky and confusing!\n-    assert(not(source_f[0] and source_f[1]))\n-    try:\n-        translation_f = split_format_specifiers(find_format_specifiers(translation))\n-    except IndexError:\n-        errors.append(\"Parse error in translation for '%s': '%s'\" % (sanitize_string(source), sanitize_string(translation)))\n-        return False\n-    else:\n-        if source_f != translation_f:\n-            if numerus and source_f == (set(), ['n']) and translation_f == (set(), []) and translation.find('%') == -1:\n-                # Allow numerus translations to omit %n specifier (usually when it only has one possible value)\n-                return True\n-            errors.append(\"Mismatch between '%s' and '%s'\" % (sanitize_string(source), sanitize_string(translation)))\n-            return False\n-    return True\n-\n-def all_ts_files(suffix=''):\n-    for filename in os.listdir(LOCALE_DIR):\n-        # process only language files, and do not process source language\n-        if not filename.endswith('.ts'+suffix) or filename == SOURCE_LANG+suffix:\n-            continue\n-        if suffix: # remove provided suffix\n-            filename = filename[0:-len(suffix)]\n-        filepath = os.path.join(LOCALE_DIR, filename)\n-        yield(filename, filepath)\n-\n-FIX_RE = re.compile(b'[\\x00-\\x09\\x0b\\x0c\\x0e-\\x1f]')\n-def remove_invalid_characters(s):\n-    '''Remove invalid characters from translation string'''\n-    return FIX_RE.sub(b'', s)\n-\n-# Override cdata escape function to make our output match Qt's (optional, just for cleaner diffs for\n-# comparison, disable by default)\n-_orig_escape_cdata = None\n-def escape_cdata(text):\n-    text = _orig_escape_cdata(text)\n-    text = text.replace(\"'\", '&apos;')\n-    text = text.replace('\"', '&quot;')\n-    return text\n-\n-def contains_bitcoin_addr(text, errors):\n-    if text is not None and ADDRESS_REGEXP.search(text) is not None:\n-        errors.append('Translation \"%s\" contains a bitcoin address. This will be removed.' % (text))\n-        return True\n-    return False\n-\n-def postprocess_translations(reduce_diff_hacks=False):\n-    print('Checking and postprocessing...')\n-\n-    if reduce_diff_hacks:\n-        global _orig_escape_cdata\n-        _orig_escape_cdata = ET._escape_cdata\n-        ET._escape_cdata = escape_cdata\n-\n-    for (filename,filepath) in all_ts_files():\n-        os.rename(filepath, filepath+'.orig')\n-\n-    have_errors = False\n-    for (filename,filepath) in all_ts_files('.orig'):\n-        # pre-fixups to cope with transifex output\n-        parser = ET.XMLParser(encoding='utf-8') # need to override encoding because 'utf8' is not understood only 'utf-8'\n-        with open(filepath + '.orig', 'rb') as f:\n-            data = f.read()\n-        # remove control characters; this must be done over the entire file otherwise the XML parser will fail\n-        data = remove_invalid_characters(data)\n-        tree = ET.parse(io.BytesIO(data), parser=parser)\n-\n-        # iterate over all messages in file\n-        root = tree.getroot()\n-        for context in root.findall('context'):\n-            for message in context.findall('message'):\n-                numerus = message.get('numerus') == 'yes'\n-                source = message.find('source').text\n-                translation_node = message.find('translation')\n-                # pick all numerusforms\n-                if numerus:\n-                    translations = [i.text for i in translation_node.findall('numerusform')]\n-                else:\n-                    translations = [translation_node.text]\n-\n-                for translation in translations:\n-                    if translation is None:\n-                        continue\n-                    errors = []\n-                    valid = check_format_specifiers(source, translation, errors, numerus) and not contains_bitcoin_addr(translation, errors)\n-\n-                    for error in errors:\n-                        print('%s: %s' % (filename, error))\n-\n-                    if not valid: # set type to unfinished and clear string if invalid\n-                        translation_node.clear()\n-                        translation_node.set('type', 'unfinished')\n-                        have_errors = True\n-\n-                # Remove location tags\n-                for location in message.findall('location'):\n-                    message.remove(location)\n-\n-                # Remove entire message if it is an unfinished translation\n-                if translation_node.get('type') == 'unfinished':\n-                    context.remove(message)\n-\n-        # check if document is (virtually) empty, and remove it if so\n-        num_messages = 0\n-        for context in root.findall('context'):\n-            for message in context.findall('message'):\n-                num_messages += 1\n-        if num_messages < MIN_NUM_MESSAGES:\n-            print('Removing %s, as it contains only %i messages' % (filepath, num_messages))\n-            continue\n-\n-        # write fixed-up tree\n-        # if diff reduction requested, replace some XML to 'sanitize' to qt formatting\n-        if reduce_diff_hacks:\n-            out = io.BytesIO()\n-            tree.write(out, encoding='utf-8')\n-            out = out.getvalue()\n-            out = out.replace(b' />', b'/>')\n-            with open(filepath, 'wb') as f:\n-                f.write(out)\n-        else:\n-            tree.write(filepath, encoding='utf-8')\n-    return have_errors\n-\n-if __name__ == '__main__':\n-    check_at_repository_root()\n-    fetch_all_translations()\n-    postprocess_translations()\n-"
      },
      {
        "sha": "7212105f35805cf8c2b2dd54cea257593bb8eeb6",
        "filename": "doc/translation_process.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d50fe2c1fb566501257fc16d4606e06f518a0bb/doc/translation_process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d50fe2c1fb566501257fc16d4606e06f518a0bb/doc/translation_process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/translation_process.md?ref=3d50fe2c1fb566501257fc16d4606e06f518a0bb",
        "patch": "@@ -65,9 +65,9 @@ username = USERNAME\n The Transifex Bitcoin project config file is included as part of the repo. It can be found at `.tx/config`, however you shouldn\u2019t need to change anything.\n \n ### Synchronising translations\n-To assist in updating translations, we have created a script to help.\n+To assist in updating translations, a helper script is available in the [maintainer-tools repo](https://github.com/bitcoin-core/bitcoin-maintainer-tools).\n \n-1. `python contrib/devtools/update-translations.py`\n+1. `python3 ../bitcoin-maintainer-tools/update-translations.py`\n 2. `git add` new translations from `src/qt/locale/`\n 3. Update `src/qt/bitcoin_locale.qrc` manually or via\n ```bash"
      }
    ]
  }
]