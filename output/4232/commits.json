[
  {
    "sha": "b750cf1fb9b6529ab1761b22947677ca78a2c626",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNzUwY2YxZmI5YjY1MjlhYjE3NjFiMjI5NDc2NzdjYTc4YTJjNjI2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-05-26T09:38:44Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-06-15T13:38:22Z"
      },
      "message": "Remove cli functionality from bitcoind\n\nAs it says on the tin. It was deprecated in version 0.9, and\nat some point it should be removed.\n\nRemoves the dependency of bitcoind on libbitcoin-cli.a. Move\nsome functions that used to be shared but are now only used in\nbitcoin-cli.cpp to that file.\n\nAfter this change, an error is printed (and exit code 1 is returned)\nwhen the user tries to send RPC commands using bitcoind.",
      "tree": {
        "sha": "d0afe7a6b7f4a33be306f259af83fa871c29146b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d0afe7a6b7f4a33be306f259af83fa871c29146b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b750cf1fb9b6529ab1761b22947677ca78a2c626",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJTnaHoAAoJEHSBCwEjRsmmkawIAMne78siOuYPwf6Iq+lSFRke\nS/I/EiGu3iVzS7OPK6uaHn9YBHr34eAsDBfjWOi12SlhlbDCrN542ixlGFKVKeKt\nWrn/aLJzxdfcyaRnu4SxlcQDSfW1dqNdgJc5El0GZf/05pfa5awbGkT7lPr8vkHI\nxtGb+ThOSQy3atuVTAobXsvC5Vpp+lR8HvUfWGeabHdvNc0R+iBZH8YkxkYNerly\n1Si3Mo23gj9yHaefbY56MVe1Ltfwl4iwD7l8DAIp8mp4qvkcbPQBzua3aT4clBil\n1owFnHn8k+JSbFZolKinjhUC6rFctpHRCiSCeX9rPkkFeqlBR0SuzjK8CkVZedI=\n=Jx3v\n-----END PGP SIGNATURE-----",
        "payload": "tree d0afe7a6b7f4a33be306f259af83fa871c29146b\nparent 0cafb630254c6459ea02f6fc47e1c37bb81a1238\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1401097124 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1402839502 +0200\n\nRemove cli functionality from bitcoind\n\nAs it says on the tin. It was deprecated in version 0.9, and\nat some point it should be removed.\n\nRemoves the dependency of bitcoind on libbitcoin-cli.a. Move\nsome functions that used to be shared but are now only used in\nbitcoin-cli.cpp to that file.\n\nAfter this change, an error is printed (and exit code 1 is returned)\nwhen the user tries to send RPC commands using bitcoind.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b750cf1fb9b6529ab1761b22947677ca78a2c626",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b750cf1fb9b6529ab1761b22947677ca78a2c626",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b750cf1fb9b6529ab1761b22947677ca78a2c626/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0cafb630254c6459ea02f6fc47e1c37bb81a1238",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0cafb630254c6459ea02f6fc47e1c37bb81a1238",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0cafb630254c6459ea02f6fc47e1c37bb81a1238"
      }
    ],
    "stats": {
      "total": 356,
      "additions": 160,
      "deletions": 196
    },
    "files": [
      {
        "sha": "0a76829197d494a74bafab826f6be3de00b0beec",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b750cf1fb9b6529ab1761b22947677ca78a2c626/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b750cf1fb9b6529ab1761b22947677ca78a2c626/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=b750cf1fb9b6529ab1761b22947677ca78a2c626",
        "patch": "@@ -171,7 +171,6 @@ nodist_libbitcoin_common_a_SOURCES = $(srcdir)/obj/build.h\n # bitcoind binary #\n bitcoind_LDADD = \\\n   libbitcoin_server.a \\\n-  libbitcoin_cli.a \\\n   libbitcoin_common.a \\\n   $(LIBLEVELDB) \\\n   $(LIBMEMENV)"
      },
      {
        "sha": "c7327fd7c9335411006c98e7314c5706b622daf2",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 157,
        "deletions": 1,
        "changes": 158,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b750cf1fb9b6529ab1761b22947677ca78a2c626/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b750cf1fb9b6529ab1761b22947677ca78a2c626/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=b750cf1fb9b6529ab1761b22947677ca78a2c626",
        "patch": "@@ -12,6 +12,32 @@\n \n #include <boost/filesystem/operations.hpp>\n \n+using namespace boost;\n+using namespace boost::asio;\n+using namespace json_spirit;\n+\n+std::string HelpMessageCli()\n+{\n+    string strUsage;\n+    strUsage += _(\"Options:\") + \"\\n\";\n+    strUsage += \"  -?                     \" + _(\"This help message\") + \"\\n\";\n+    strUsage += \"  -conf=<file>           \" + _(\"Specify configuration file (default: bitcoin.conf)\") + \"\\n\";\n+    strUsage += \"  -datadir=<dir>         \" + _(\"Specify data directory\") + \"\\n\";\n+    strUsage += \"  -testnet               \" + _(\"Use the test network\") + \"\\n\";\n+    strUsage += \"  -regtest               \" + _(\"Enter regression test mode, which uses a special chain in which blocks can be \"\n+                                                \"solved instantly. This is intended for regression testing tools and app development.\") + \"\\n\";\n+    strUsage += \"  -rpcconnect=<ip>       \" + _(\"Send commands to node running on <ip> (default: 127.0.0.1)\") + \"\\n\";\n+    strUsage += \"  -rpcport=<port>        \" + _(\"Connect to JSON-RPC on <port> (default: 8332 or testnet: 18332)\") + \"\\n\";\n+    strUsage += \"  -rpcwait               \" + _(\"Wait for RPC server to start\") + \"\\n\";\n+    strUsage += \"  -rpcuser=<user>        \" + _(\"Username for JSON-RPC connections\") + \"\\n\";\n+    strUsage += \"  -rpcpassword=<pw>      \" + _(\"Password for JSON-RPC connections\") + \"\\n\";\n+\n+    strUsage += \"\\n\" + _(\"SSL options: (see the Bitcoin Wiki for SSL setup instructions)\") + \"\\n\";\n+    strUsage += \"  -rpcssl                \" + _(\"Use OpenSSL (https) for JSON-RPC connections\") + \"\\n\";\n+\n+    return strUsage;\n+}\n+\n //////////////////////////////////////////////////////////////////////////////\n //\n // Start\n@@ -49,7 +75,7 @@ static bool AppInitRPC(int argc, char* argv[])\n                   \"  bitcoin-cli [options] help                \" + _(\"List commands\") + \"\\n\" +\n                   \"  bitcoin-cli [options] help <command>      \" + _(\"Get help for a command\") + \"\\n\";\n \n-            strUsage += \"\\n\" + HelpMessageCli(true);\n+            strUsage += \"\\n\" + HelpMessageCli();\n         }\n \n         fprintf(stdout, \"%s\", strUsage.c_str());\n@@ -58,6 +84,136 @@ static bool AppInitRPC(int argc, char* argv[])\n     return true;\n }\n \n+Object CallRPC(const string& strMethod, const Array& params)\n+{\n+    if (mapArgs[\"-rpcuser\"] == \"\" && mapArgs[\"-rpcpassword\"] == \"\")\n+        throw runtime_error(strprintf(\n+            _(\"You must set rpcpassword=<password> in the configuration file:\\n%s\\n\"\n+              \"If the file does not exist, create it with owner-readable-only file permissions.\"),\n+                GetConfigFile().string().c_str()));\n+\n+    // Connect to localhost\n+    bool fUseSSL = GetBoolArg(\"-rpcssl\", false);\n+    asio::io_service io_service;\n+    ssl::context context(io_service, ssl::context::sslv23);\n+    context.set_options(ssl::context::no_sslv2);\n+    asio::ssl::stream<asio::ip::tcp::socket> sslStream(io_service, context);\n+    SSLIOStreamDevice<asio::ip::tcp> d(sslStream, fUseSSL);\n+    iostreams::stream< SSLIOStreamDevice<asio::ip::tcp> > stream(d);\n+\n+    bool fWait = GetBoolArg(\"-rpcwait\", false); // -rpcwait means try until server has started\n+    do {\n+        bool fConnected = d.connect(GetArg(\"-rpcconnect\", \"127.0.0.1\"), GetArg(\"-rpcport\", itostr(Params().RPCPort())));\n+        if (fConnected) break;\n+        if (fWait)\n+            MilliSleep(1000);\n+        else\n+            throw runtime_error(\"couldn't connect to server\");\n+    } while (fWait);\n+\n+    // HTTP basic authentication\n+    string strUserPass64 = EncodeBase64(mapArgs[\"-rpcuser\"] + \":\" + mapArgs[\"-rpcpassword\"]);\n+    map<string, string> mapRequestHeaders;\n+    mapRequestHeaders[\"Authorization\"] = string(\"Basic \") + strUserPass64;\n+\n+    // Send request\n+    string strRequest = JSONRPCRequest(strMethod, params, 1);\n+    string strPost = HTTPPost(strRequest, mapRequestHeaders);\n+    stream << strPost << std::flush;\n+\n+    // Receive HTTP reply status\n+    int nProto = 0;\n+    int nStatus = ReadHTTPStatus(stream, nProto);\n+\n+    // Receive HTTP reply message headers and body\n+    map<string, string> mapHeaders;\n+    string strReply;\n+    ReadHTTPMessage(stream, mapHeaders, strReply, nProto);\n+\n+    if (nStatus == HTTP_UNAUTHORIZED)\n+        throw runtime_error(\"incorrect rpcuser or rpcpassword (authorization failed)\");\n+    else if (nStatus >= 400 && nStatus != HTTP_BAD_REQUEST && nStatus != HTTP_NOT_FOUND && nStatus != HTTP_INTERNAL_SERVER_ERROR)\n+        throw runtime_error(strprintf(\"server returned HTTP error %d\", nStatus));\n+    else if (strReply.empty())\n+        throw runtime_error(\"no response from server\");\n+\n+    // Parse reply\n+    Value valReply;\n+    if (!read_string(strReply, valReply))\n+        throw runtime_error(\"couldn't parse reply from server\");\n+    const Object& reply = valReply.get_obj();\n+    if (reply.empty())\n+        throw runtime_error(\"expected reply to have result, error and id properties\");\n+\n+    return reply;\n+}\n+\n+int CommandLineRPC(int argc, char *argv[])\n+{\n+    string strPrint;\n+    int nRet = 0;\n+    try\n+    {\n+        // Skip switches\n+        while (argc > 1 && IsSwitchChar(argv[1][0]))\n+        {\n+            argc--;\n+            argv++;\n+        }\n+\n+        // Method\n+        if (argc < 2)\n+            throw runtime_error(\"too few parameters\");\n+        string strMethod = argv[1];\n+\n+        // Parameters default to strings\n+        std::vector<std::string> strParams(&argv[2], &argv[argc]);\n+        Array params = RPCConvertValues(strMethod, strParams);\n+\n+        // Execute\n+        Object reply = CallRPC(strMethod, params);\n+\n+        // Parse reply\n+        const Value& result = find_value(reply, \"result\");\n+        const Value& error  = find_value(reply, \"error\");\n+\n+        if (error.type() != null_type)\n+        {\n+            // Error\n+            strPrint = \"error: \" + write_string(error, false);\n+            int code = find_value(error.get_obj(), \"code\").get_int();\n+            nRet = abs(code);\n+        }\n+        else\n+        {\n+            // Result\n+            if (result.type() == null_type)\n+                strPrint = \"\";\n+            else if (result.type() == str_type)\n+                strPrint = result.get_str();\n+            else\n+                strPrint = write_string(result, true);\n+        }\n+    }\n+    catch (boost::thread_interrupted) {\n+        throw;\n+    }\n+    catch (std::exception& e) {\n+        strPrint = string(\"error: \") + e.what();\n+        nRet = EXIT_FAILURE;\n+    }\n+    catch (...) {\n+        PrintExceptionContinue(NULL, \"CommandLineRPC()\");\n+        throw;\n+    }\n+\n+    if (strPrint != \"\")\n+    {\n+        fprintf((nRet == 0 ? stdout : stderr), \"%s\\n\", strPrint.c_str());\n+    }\n+    return nRet;\n+}\n+\n int main(int argc, char* argv[])\n {\n     SetupEnvironment();"
      },
      {
        "sha": "880955481b0e041fae5adeceef99ace9b9826d3d",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 9,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b750cf1fb9b6529ab1761b22947677ca78a2c626/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b750cf1fb9b6529ab1761b22947677ca78a2c626/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=b750cf1fb9b6529ab1761b22947677ca78a2c626",
        "patch": "@@ -4,7 +4,6 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"rpcserver.h\"\n-#include \"rpcclient.h\"\n #include \"init.h\"\n #include \"main.h\"\n #include \"noui.h\"\n@@ -94,14 +93,9 @@ bool AppInit(int argc, char* argv[])\n             else\n             {\n                 strUsage += \"\\n\" + _(\"Usage:\") + \"\\n\" +\n-                      \"  bitcoind [options]                     \" + _(\"Start Bitcoin Core Daemon\") + \"\\n\" +\n-                    _(\"Usage (deprecated, use bitcoin-cli):\") + \"\\n\" +\n-                      \"  bitcoind [options] <command> [params]  \" + _(\"Send command to Bitcoin Core\") + \"\\n\" +\n-                      \"  bitcoind [options] help                \" + _(\"List commands\") + \"\\n\" +\n-                      \"  bitcoind [options] help <command>      \" + _(\"Get help for a command\") + \"\\n\";\n+                      \"  bitcoind [options]                     \" + _(\"Start Bitcoin Core Daemon\") + \"\\n\";\n \n                 strUsage += \"\\n\" + HelpMessage(HMM_BITCOIND);\n-                strUsage += \"\\n\" + HelpMessageCli(false);\n             }\n \n             fprintf(stdout, \"%s\", strUsage.c_str());\n@@ -116,8 +110,8 @@ bool AppInit(int argc, char* argv[])\n \n         if (fCommandLine)\n         {\n-            int ret = CommandLineRPC(argc, argv);\n-            exit(ret);\n+            fprintf(stderr, \"Error: There is no RPC client functionality in bitcoind anymore. Use the bitcoin-cli utility instead.\\n\");\n+            exit(1);\n         }\n #ifndef WIN32\n         fDaemon = GetBoolArg(\"-daemon\", false);"
      },
      {
        "sha": "3a06e330162e2d35af8f7c1c6053894c1f9a5946",
        "filename": "src/rpcclient.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 175,
        "changes": 175,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b750cf1fb9b6529ab1761b22947677ca78a2c626/src/rpcclient.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b750cf1fb9b6529ab1761b22947677ca78a2c626/src/rpcclient.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcclient.cpp?ref=b750cf1fb9b6529ab1761b22947677ca78a2c626",
        "patch": "@@ -12,86 +12,9 @@\n \n #include <stdint.h>\n \n-#include <boost/algorithm/string.hpp>\n-#include <boost/asio.hpp>\n-#include <boost/asio/ssl.hpp>\n-#include <boost/bind.hpp>\n-#include <boost/filesystem.hpp>\n-#include <boost/foreach.hpp>\n-#include <boost/iostreams/concepts.hpp>\n-#include <boost/iostreams/stream.hpp>\n-#include <boost/shared_ptr.hpp>\n-#include \"json/json_spirit_writer_template.h\"\n-\n using namespace std;\n-using namespace boost;\n-using namespace boost::asio;\n using namespace json_spirit;\n \n-Object CallRPC(const string& strMethod, const Array& params)\n-{\n-    if (mapArgs[\"-rpcuser\"] == \"\" && mapArgs[\"-rpcpassword\"] == \"\")\n-        throw runtime_error(strprintf(\n-            _(\"You must set rpcpassword=<password> in the configuration file:\\n%s\\n\"\n-              \"If the file does not exist, create it with owner-readable-only file permissions.\"),\n-                GetConfigFile().string().c_str()));\n-\n-    // Connect to localhost\n-    bool fUseSSL = GetBoolArg(\"-rpcssl\", false);\n-    asio::io_service io_service;\n-    ssl::context context(io_service, ssl::context::sslv23);\n-    context.set_options(ssl::context::no_sslv2);\n-    asio::ssl::stream<asio::ip::tcp::socket> sslStream(io_service, context);\n-    SSLIOStreamDevice<asio::ip::tcp> d(sslStream, fUseSSL);\n-    iostreams::stream< SSLIOStreamDevice<asio::ip::tcp> > stream(d);\n-\n-    bool fWait = GetBoolArg(\"-rpcwait\", false); // -rpcwait means try until server has started\n-    do {\n-        bool fConnected = d.connect(GetArg(\"-rpcconnect\", \"127.0.0.1\"), GetArg(\"-rpcport\", itostr(Params().RPCPort())));\n-        if (fConnected) break;\n-        if (fWait)\n-            MilliSleep(1000);\n-        else\n-            throw runtime_error(\"couldn't connect to server\");\n-    } while (fWait);\n-\n-    // HTTP basic authentication\n-    string strUserPass64 = EncodeBase64(mapArgs[\"-rpcuser\"] + \":\" + mapArgs[\"-rpcpassword\"]);\n-    map<string, string> mapRequestHeaders;\n-    mapRequestHeaders[\"Authorization\"] = string(\"Basic \") + strUserPass64;\n-\n-    // Send request\n-    string strRequest = JSONRPCRequest(strMethod, params, 1);\n-    string strPost = HTTPPost(strRequest, mapRequestHeaders);\n-    stream << strPost << std::flush;\n-\n-    // Receive HTTP reply status\n-    int nProto = 0;\n-    int nStatus = ReadHTTPStatus(stream, nProto);\n-\n-    // Receive HTTP reply message headers and body\n-    map<string, string> mapHeaders;\n-    string strReply;\n-    ReadHTTPMessage(stream, mapHeaders, strReply, nProto);\n-\n-    if (nStatus == HTTP_UNAUTHORIZED)\n-        throw runtime_error(\"incorrect rpcuser or rpcpassword (authorization failed)\");\n-    else if (nStatus >= 400 && nStatus != HTTP_BAD_REQUEST && nStatus != HTTP_NOT_FOUND && nStatus != HTTP_INTERNAL_SERVER_ERROR)\n-        throw runtime_error(strprintf(\"server returned HTTP error %d\", nStatus));\n-    else if (strReply.empty())\n-        throw runtime_error(\"no response from server\");\n-\n-    // Parse reply\n-    Value valReply;\n-    if (!read_string(strReply, valReply))\n-        throw runtime_error(\"couldn't parse reply from server\");\n-    const Object& reply = valReply.get_obj();\n-    if (reply.empty())\n-        throw runtime_error(\"expected reply to have result, error and id properties\");\n-\n-    return reply;\n-}\n-\n template<typename T>\n void ConvertTo(Value& value, bool fAllowNull=false)\n {\n@@ -182,101 +105,3 @@ Array RPCConvertValues(const std::string &strMethod, const std::vector<std::stri\n     return params;\n }\n \n-int CommandLineRPC(int argc, char *argv[])\n-{\n-    string strPrint;\n-    int nRet = 0;\n-    try\n-    {\n-        // Skip switches\n-        while (argc > 1 && IsSwitchChar(argv[1][0]))\n-        {\n-            argc--;\n-            argv++;\n-        }\n-\n-        // Method\n-        if (argc < 2)\n-            throw runtime_error(\"too few parameters\");\n-        string strMethod = argv[1];\n-\n-        // Parameters default to strings\n-        std::vector<std::string> strParams(&argv[2], &argv[argc]);\n-        Array params = RPCConvertValues(strMethod, strParams);\n-\n-        // Execute\n-        Object reply = CallRPC(strMethod, params);\n-\n-        // Parse reply\n-        const Value& result = find_value(reply, \"result\");\n-        const Value& error  = find_value(reply, \"error\");\n-\n-        if (error.type() != null_type)\n-        {\n-            // Error\n-            strPrint = \"error: \" + write_string(error, false);\n-            int code = find_value(error.get_obj(), \"code\").get_int();\n-            nRet = abs(code);\n-        }\n-        else\n-        {\n-            // Result\n-            if (result.type() == null_type)\n-                strPrint = \"\";\n-            else if (result.type() == str_type)\n-                strPrint = result.get_str();\n-            else\n-                strPrint = write_string(result, true);\n-        }\n-    }\n-    catch (boost::thread_interrupted) {\n-        throw;\n-    }\n-    catch (std::exception& e) {\n-        strPrint = string(\"error: \") + e.what();\n-        nRet = EXIT_FAILURE;\n-    }\n-    catch (...) {\n-        PrintExceptionContinue(NULL, \"CommandLineRPC()\");\n-        throw;\n-    }\n-\n-    if (strPrint != \"\")\n-    {\n-        fprintf((nRet == 0 ? stdout : stderr), \"%s\\n\", strPrint.c_str());\n-    }\n-    return nRet;\n-}\n-\n-std::string HelpMessageCli(bool mainProgram)\n-{\n-    string strUsage;\n-    if(mainProgram)\n-    {\n-        strUsage += _(\"Options:\") + \"\\n\";\n-        strUsage += \"  -?                     \" + _(\"This help message\") + \"\\n\";\n-        strUsage += \"  -conf=<file>           \" + _(\"Specify configuration file (default: bitcoin.conf)\") + \"\\n\";\n-        strUsage += \"  -datadir=<dir>         \" + _(\"Specify data directory\") + \"\\n\";\n-        strUsage += \"  -testnet               \" + _(\"Use the test network\") + \"\\n\";\n-        strUsage += \"  -regtest               \" + _(\"Enter regression test mode, which uses a special chain in which blocks can be \"\n-                                                    \"solved instantly. This is intended for regression testing tools and app development.\") + \"\\n\";\n-    } else {\n-        strUsage += _(\"RPC client options:\") + \"\\n\";\n-    }\n-\n-    strUsage += \"  -rpcconnect=<ip>       \" + _(\"Send commands to node running on <ip> (default: 127.0.0.1)\") + \"\\n\";\n-    strUsage += \"  -rpcport=<port>        \" + _(\"Connect to JSON-RPC on <port> (default: 8332 or testnet: 18332)\") + \"\\n\";\n-    strUsage += \"  -rpcwait               \" + _(\"Wait for RPC server to start\") + \"\\n\";\n-\n-    if(mainProgram)\n-    {\n-        strUsage += \"  -rpcuser=<user>        \" + _(\"Username for JSON-RPC connections\") + \"\\n\";\n-        strUsage += \"  -rpcpassword=<pw>      \" + _(\"Password for JSON-RPC connections\") + \"\\n\";\n-\n-        strUsage += \"\\n\" + _(\"SSL options: (see the Bitcoin Wiki for SSL setup instructions)\") + \"\\n\";\n-        strUsage += \"  -rpcssl                \" + _(\"Use OpenSSL (https) for JSON-RPC connections\") + \"\\n\";\n-    }\n-\n-    return strUsage;\n-}\n-"
      },
      {
        "sha": "840890e34b404364afbab1dbf5ee12b0acfbe194",
        "filename": "src/rpcclient.h",
        "status": "modified",
        "additions": 0,
        "deletions": 10,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b750cf1fb9b6529ab1761b22947677ca78a2c626/src/rpcclient.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b750cf1fb9b6529ab1761b22947677ca78a2c626/src/rpcclient.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcclient.h?ref=b750cf1fb9b6529ab1761b22947677ca78a2c626",
        "patch": "@@ -10,16 +10,6 @@\n #include \"json/json_spirit_utils.h\"\n #include \"json/json_spirit_writer_template.h\"\n \n-int CommandLineRPC(int argc, char *argv[]);\n-\n json_spirit::Array RPCConvertValues(const std::string &strMethod, const std::vector<std::string> &strParams);\n \n-/** Show help message for bitcoin-cli.\n- * The mainProgram argument is used to determine whether to show this message as main program\n- * (and include some common options) or as sub-header of another help message.\n- *\n- * @note the argument can be removed once bitcoin-cli functionality is removed from bitcoind\n- */\n-std::string HelpMessageCli(bool mainProgram);\n-\n #endif"
      }
    ]
  }
]