[
  {
    "sha": "a38a4e8f039dfabfd9435f3a63f1a9b56de086d6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMzhhNGU4ZjAzOWRmYWJmZDk0MzVmM2E2M2YxYTliNTZkZTA4NmQ2",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-01-27T22:05:13Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-03-04T10:22:42Z"
      },
      "message": "[net processing] Move RelayTransaction into PeerManager\n\nWe don't mark RelayTransaction as const. Even though it doesn't mutate\nPeerManagerImpl state, it _is_ mutating the internal state of a CNode\nobject, by updating setInventoryTxToSend. In a subsequent commit, that\nfield will be moved to the Peer object, which is owned by\nPeerMangerImpl.\n\nThis requires PeerManagerImpl::ReattemptInitialBroadcast() to no longer\nbe const.",
      "tree": {
        "sha": "9f87f4c3a904001bb1b5326b4de3333c78c2c330",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9f87f4c3a904001bb1b5326b4de3333c78c2c330"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a38a4e8f039dfabfd9435f3a63f1a9b56de086d6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a38a4e8f039dfabfd9435f3a63f1a9b56de086d6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a38a4e8f039dfabfd9435f3a63f1a9b56de086d6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a38a4e8f039dfabfd9435f3a63f1a9b56de086d6/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "92b7efcf54d3154e4b31c9a6eae60f27e349f45e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92b7efcf54d3154e4b31c9a6eae60f27e349f45e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/92b7efcf54d3154e4b31c9a6eae60f27e349f45e"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 10,
      "deletions": 7
    },
    "files": [
      {
        "sha": "f9aa63b199fc82cd612093229c66ea557413a231",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a38a4e8f039dfabfd9435f3a63f1a9b56de086d6/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a38a4e8f039dfabfd9435f3a63f1a9b56de086d6/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=a38a4e8f039dfabfd9435f3a63f1a9b56de086d6",
        "patch": "@@ -242,6 +242,7 @@ class PeerManagerImpl final : public PeerManager\n     bool GetNodeStateStats(NodeId nodeid, CNodeStateStats& stats) override;\n     bool IgnoresIncomingTxs() override { return m_ignore_incoming_txs; }\n     void SendPings() override;\n+    void RelayTransaction(const uint256& txid, const uint256& wtxid, const CConnman& connman) override;\n     void SetBestHeight(int height) override { m_best_height = height; };\n     void Misbehaving(const NodeId pnode, const int howmuch, const std::string& message) override;\n     void ProcessMessage(CNode& pfrom, const std::string& msg_type, CDataStream& vRecv,\n@@ -255,7 +256,7 @@ class PeerManagerImpl final : public PeerManager\n     void EvictExtraOutboundPeers(int64_t time_in_seconds) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n     /** Retrieve unbroadcast transactions from the mempool and reattempt sending to peers */\n-    void ReattemptInitialBroadcast(CScheduler& scheduler) const;\n+    void ReattemptInitialBroadcast(CScheduler& scheduler);\n \n     /** Get a shared pointer to the Peer object.\n      *  May return an empty shared_ptr if the Peer object can't be found. */\n@@ -954,7 +955,7 @@ void PeerManagerImpl::InitializeNode(CNode *pnode)\n     }\n }\n \n-void PeerManagerImpl::ReattemptInitialBroadcast(CScheduler& scheduler) const\n+void PeerManagerImpl::ReattemptInitialBroadcast(CScheduler& scheduler)\n {\n     std::set<uint256> unbroadcast_txids = m_mempool.GetUnbroadcastTxs();\n \n@@ -1464,7 +1465,7 @@ void PeerManagerImpl::SendPings()\n     for(auto& it : m_peer_map) it.second->m_ping_queued = true;\n }\n \n-void RelayTransaction(const uint256& txid, const uint256& wtxid, const CConnman& connman)\n+void PeerManagerImpl::RelayTransaction(const uint256& txid, const uint256& wtxid, const CConnman& connman)\n {\n     connman.ForEachNode([&txid, &wtxid](CNode* pnode) EXCLUSIVE_LOCKS_REQUIRED(::cs_main) {\n         AssertLockHeld(::cs_main);"
      },
      {
        "sha": "f47594400cd30856eaa8df46be0c109673dfbec0",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a38a4e8f039dfabfd9435f3a63f1a9b56de086d6/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a38a4e8f039dfabfd9435f3a63f1a9b56de086d6/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=a38a4e8f039dfabfd9435f3a63f1a9b56de086d6",
        "patch": "@@ -47,6 +47,10 @@ class PeerManager : public CValidationInterface, public NetEventsInterface\n     /** Whether this node ignores txs received over p2p. */\n     virtual bool IgnoresIncomingTxs() = 0;\n \n+    /** Relay transaction to all peers. */\n+    virtual void RelayTransaction(const uint256& txid, const uint256& wtxid, const CConnman& connman)\n+        EXCLUSIVE_LOCKS_REQUIRED(cs_main) = 0;\n+\n     /** Send ping message to all peers */\n     virtual void SendPings() = 0;\n \n@@ -71,7 +75,4 @@ class PeerManager : public CValidationInterface, public NetEventsInterface\n                                 const std::chrono::microseconds time_received, const std::atomic<bool>& interruptMsgProc) = 0;\n };\n \n-/** Relay transaction to every node */\n-void RelayTransaction(const uint256& txid, const uint256& wtxid, const CConnman& connman) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n-\n #endif // BITCOIN_NET_PROCESSING_H"
      },
      {
        "sha": "b01381411ab00bd4400ba7182766f141905c73d8",
        "filename": "src/node/transaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a38a4e8f039dfabfd9435f3a63f1a9b56de086d6/src/node/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a38a4e8f039dfabfd9435f3a63f1a9b56de086d6/src/node/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/transaction.cpp?ref=a38a4e8f039dfabfd9435f3a63f1a9b56de086d6",
        "patch": "@@ -32,6 +32,7 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n     // node.connman is assigned both before chain clients and before RPC server is accepting calls,\n     // and reset after chain clients and RPC sever are stopped. node.connman should never be null here.\n     assert(node.connman);\n+    assert(node.peerman);\n     assert(node.mempool);\n     std::promise<void> promise;\n     uint256 hashTx = tx->GetHash();\n@@ -100,7 +101,7 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n         node.mempool->AddUnbroadcastTx(hashTx);\n \n         LOCK(cs_main);\n-        RelayTransaction(hashTx, tx->GetWitnessHash(), *node.connman);\n+        node.peerman->RelayTransaction(hashTx, tx->GetWitnessHash(), *node.connman);\n     }\n \n     return TransactionError::OK;"
      }
    ]
  },
  {
    "sha": "680eb56d828ce358b4e000c140f5b247ff5e6179",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ODBlYjU2ZDgyOGNlMzU4YjRlMDAwYzE0MGY1YjI0N2ZmNWU2MTc5",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-01-27T22:18:52Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-03-04T10:22:57Z"
      },
      "message": "[net processing] Don't pass CConnman to RelayTransactions\n\nUse the local m_connman instead",
      "tree": {
        "sha": "c32f273b910fc8a3857107793889b2df0d62c5a1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c32f273b910fc8a3857107793889b2df0d62c5a1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/680eb56d828ce358b4e000c140f5b247ff5e6179",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/680eb56d828ce358b4e000c140f5b247ff5e6179",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/680eb56d828ce358b4e000c140f5b247ff5e6179",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/680eb56d828ce358b4e000c140f5b247ff5e6179/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a38a4e8f039dfabfd9435f3a63f1a9b56de086d6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a38a4e8f039dfabfd9435f3a63f1a9b56de086d6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a38a4e8f039dfabfd9435f3a63f1a9b56de086d6"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 11,
      "deletions": 12
    },
    "files": [
      {
        "sha": "107c4da61bb13140ec02aec0ac8e4992cfba05ba",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/680eb56d828ce358b4e000c140f5b247ff5e6179/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/680eb56d828ce358b4e000c140f5b247ff5e6179/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=680eb56d828ce358b4e000c140f5b247ff5e6179",
        "patch": "@@ -242,7 +242,7 @@ class PeerManagerImpl final : public PeerManager\n     bool GetNodeStateStats(NodeId nodeid, CNodeStateStats& stats) override;\n     bool IgnoresIncomingTxs() override { return m_ignore_incoming_txs; }\n     void SendPings() override;\n-    void RelayTransaction(const uint256& txid, const uint256& wtxid, const CConnman& connman) override;\n+    void RelayTransaction(const uint256& txid, const uint256& wtxid) override;\n     void SetBestHeight(int height) override { m_best_height = height; };\n     void Misbehaving(const NodeId pnode, const int howmuch, const std::string& message) override;\n     void ProcessMessage(CNode& pfrom, const std::string& msg_type, CDataStream& vRecv,\n@@ -964,7 +964,7 @@ void PeerManagerImpl::ReattemptInitialBroadcast(CScheduler& scheduler)\n \n         if (tx != nullptr) {\n             LOCK(cs_main);\n-            RelayTransaction(txid, tx->GetWitnessHash(), m_connman);\n+            RelayTransaction(txid, tx->GetWitnessHash());\n         } else {\n             m_mempool.RemoveUnbroadcastTx(txid, true);\n         }\n@@ -1465,9 +1465,9 @@ void PeerManagerImpl::SendPings()\n     for(auto& it : m_peer_map) it.second->m_ping_queued = true;\n }\n \n-void PeerManagerImpl::RelayTransaction(const uint256& txid, const uint256& wtxid, const CConnman& connman)\n+void PeerManagerImpl::RelayTransaction(const uint256& txid, const uint256& wtxid)\n {\n-    connman.ForEachNode([&txid, &wtxid](CNode* pnode) EXCLUSIVE_LOCKS_REQUIRED(::cs_main) {\n+    m_connman.ForEachNode([&txid, &wtxid](CNode* pnode) EXCLUSIVE_LOCKS_REQUIRED(::cs_main) {\n         AssertLockHeld(::cs_main);\n \n         CNodeState* state = State(pnode->GetId());\n@@ -2047,7 +2047,7 @@ void PeerManagerImpl::ProcessOrphanTx(std::set<uint256>& orphan_work_set)\n \n         if (result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n             LogPrint(BCLog::MEMPOOL, \"   accepted orphan tx %s\\n\", orphanHash.ToString());\n-            RelayTransaction(orphanHash, porphanTx->GetWitnessHash(), m_connman);\n+            RelayTransaction(orphanHash, porphanTx->GetWitnessHash());\n             m_orphanage.AddChildrenToWorkSet(*porphanTx, orphan_work_set);\n             m_orphanage.EraseTx(orphanHash);\n             for (const CTransactionRef& removedTx : result.m_replaced_transactions.value()) {\n@@ -3051,7 +3051,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n                     LogPrintf(\"Not relaying non-mempool transaction %s from forcerelay peer=%d\\n\", tx.GetHash().ToString(), pfrom.GetId());\n                 } else {\n                     LogPrintf(\"Force relaying tx %s from peer=%d\\n\", tx.GetHash().ToString(), pfrom.GetId());\n-                    RelayTransaction(tx.GetHash(), tx.GetWitnessHash(), m_connman);\n+                    RelayTransaction(tx.GetHash(), tx.GetWitnessHash());\n                 }\n             }\n             return;\n@@ -3066,7 +3066,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n             // requests for it.\n             m_txrequest.ForgetTxHash(tx.GetHash());\n             m_txrequest.ForgetTxHash(tx.GetWitnessHash());\n-            RelayTransaction(tx.GetHash(), tx.GetWitnessHash(), m_connman);\n+            RelayTransaction(tx.GetHash(), tx.GetWitnessHash());\n             m_orphanage.AddChildrenToWorkSet(tx, peer->m_orphan_work_set);\n \n             pfrom.nLastTXTime = GetTime();"
      },
      {
        "sha": "c44bae60d73d9225d03d687ab674f9cb5d01f865",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/680eb56d828ce358b4e000c140f5b247ff5e6179/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/680eb56d828ce358b4e000c140f5b247ff5e6179/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=680eb56d828ce358b4e000c140f5b247ff5e6179",
        "patch": "@@ -48,7 +48,7 @@ class PeerManager : public CValidationInterface, public NetEventsInterface\n     virtual bool IgnoresIncomingTxs() = 0;\n \n     /** Relay transaction to all peers. */\n-    virtual void RelayTransaction(const uint256& txid, const uint256& wtxid, const CConnman& connman)\n+    virtual void RelayTransaction(const uint256& txid, const uint256& wtxid)\n         EXCLUSIVE_LOCKS_REQUIRED(cs_main) = 0;\n \n     /** Send ping message to all peers */"
      },
      {
        "sha": "a46446f3179db28460f9b44c10ab48cd7da07b5e",
        "filename": "src/node/transaction.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/680eb56d828ce358b4e000c140f5b247ff5e6179/src/node/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/680eb56d828ce358b4e000c140f5b247ff5e6179/src/node/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/transaction.cpp?ref=680eb56d828ce358b4e000c140f5b247ff5e6179",
        "patch": "@@ -29,9 +29,8 @@ static TransactionError HandleATMPError(const TxValidationState& state, std::str\n TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef tx, std::string& err_string, const CAmount& max_tx_fee, bool relay, bool wait_callback)\n {\n     // BroadcastTransaction can be called by either sendrawtransaction RPC or wallet RPCs.\n-    // node.connman is assigned both before chain clients and before RPC server is accepting calls,\n-    // and reset after chain clients and RPC sever are stopped. node.connman should never be null here.\n-    assert(node.connman);\n+    // node.peerman is assigned both before chain clients and before RPC server is accepting calls,\n+    // and reset after chain clients and RPC sever are stopped. node.peerman should never be null here.\n     assert(node.peerman);\n     assert(node.mempool);\n     std::promise<void> promise;\n@@ -101,7 +100,7 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n         node.mempool->AddUnbroadcastTx(hashTx);\n \n         LOCK(cs_main);\n-        node.peerman->RelayTransaction(hashTx, tx->GetWitnessHash(), *node.connman);\n+        node.peerman->RelayTransaction(hashTx, tx->GetWitnessHash());\n     }\n \n     return TransactionError::OK;"
      }
    ]
  }
]