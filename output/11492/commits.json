[
  {
    "sha": "7104de8b1f3a31d3a60009b5dc376adbedac6a9c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MTA0ZGU4YjFmM2EzMWQzYTYwMDA5YjVkYzM3NmFkYmVkYWM2YTlj",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2017-10-12T22:14:46Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2017-10-14T22:59:46Z"
      },
      "message": "[wallet] Fix leak in CDB constructor\n\nNow using a std::unique_ptr, the Db instance is correctly released\nwhen CDB initialization fails.\nThe internal CDB state and mapFileUseCount are only mutated when\nthe CDB initialization succeeds.",
      "tree": {
        "sha": "827a41ec17d3d3e887f236848f122fcf3cdb7832",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/827a41ec17d3d3e887f236848f122fcf3cdb7832"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7104de8b1f3a31d3a60009b5dc376adbedac6a9c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7104de8b1f3a31d3a60009b5dc376adbedac6a9c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7104de8b1f3a31d3a60009b5dc376adbedac6a9c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7104de8b1f3a31d3a60009b5dc376adbedac6a9c/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "326a5652e0d25fdb60c337ef4f1c98a63e0748f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/326a5652e0d25fdb60c337ef4f1c98a63e0748f0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/326a5652e0d25fdb60c337ef4f1c98a63e0748f0"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 16,
      "deletions": 18
    },
    "files": [
      {
        "sha": "5e881d9acc08cfced2ef00c666d4e9b22d95c371",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 18,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7104de8b1f3a31d3a60009b5dc376adbedac6a9c/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7104de8b1f3a31d3a60009b5dc376adbedac6a9c/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=7104de8b1f3a31d3a60009b5dc376adbedac6a9c",
        "patch": "@@ -379,45 +379,43 @@ CDB::CDB(CWalletDBWrapper& dbw, const char* pszMode, bool fFlushOnCloseIn) : pdb\n         if (!env->Open(GetDataDir()))\n             throw std::runtime_error(\"CDB: Failed to open database environment.\");\n \n-        strFile = strFilename;\n-        ++env->mapFileUseCount[strFile];\n-        pdb = env->mapDb[strFile];\n+        pdb = env->mapDb[strFilename];\n         if (pdb == nullptr) {\n             int ret;\n-            pdb = new Db(env->dbenv, 0);\n+            std::unique_ptr<Db> pdb_temp(new Db(env->dbenv, 0));\n \n             bool fMockDb = env->IsMock();\n             if (fMockDb) {\n-                DbMpoolFile* mpf = pdb->get_mpf();\n+                DbMpoolFile* mpf = pdb_temp->get_mpf();\n                 ret = mpf->set_flags(DB_MPOOL_NOFILE, 1);\n-                if (ret != 0)\n-                    throw std::runtime_error(strprintf(\"CDB: Failed to configure for no temp file backing for database %s\", strFile));\n+                if (ret != 0) {\n+                    throw std::runtime_error(strprintf(\"CDB: Failed to configure for no temp file backing for database %s\", strFilename));\n+                }\n             }\n \n-            ret = pdb->open(nullptr,                               // Txn pointer\n-                            fMockDb ? nullptr : strFile.c_str(),   // Filename\n-                            fMockDb ? strFile.c_str() : \"main\", // Logical db name\n-                            DB_BTREE,                           // Database type\n-                            nFlags,                             // Flags\n+            ret = pdb_temp->open(nullptr,                             // Txn pointer\n+                            fMockDb ? nullptr : strFilename.c_str(),  // Filename\n+                            fMockDb ? strFilename.c_str() : \"main\",   // Logical db name\n+                            DB_BTREE,                                 // Database type\n+                            nFlags,                                   // Flags\n                             0);\n \n             if (ret != 0) {\n-                delete pdb;\n-                pdb = nullptr;\n-                --env->mapFileUseCount[strFile];\n-                strFile = \"\";\n                 throw std::runtime_error(strprintf(\"CDB: Error %d, can't open database %s\", ret, strFilename));\n             }\n \n+            pdb = pdb_temp.release();\n+            env->mapDb[strFilename] = pdb;\n+\n             if (fCreate && !Exists(std::string(\"version\"))) {\n                 bool fTmp = fReadOnly;\n                 fReadOnly = false;\n                 WriteVersion(CLIENT_VERSION);\n                 fReadOnly = fTmp;\n             }\n-\n-            env->mapDb[strFile] = pdb;\n         }\n+        ++env->mapFileUseCount[strFilename];\n+        strFile = strFilename;\n     }\n }\n "
      }
    ]
  }
]