MarcoFalke,2018-03-08T15:31:57Z,Needs rebase to fix travis (sorry),https://github.com/bitcoin/bitcoin/pull/12639#issuecomment-371522501,371522501,
promag,2018-03-11T22:26:14Z,Rebased.,https://github.com/bitcoin/bitcoin/pull/12639#issuecomment-372155201,372155201,
conscott,2018-03-17T04:40:07Z,"Nice. \n\nTest ACK efbc070c5cb176b0f79801e9e6d5f5a52578edc1",https://github.com/bitcoin/bitcoin/pull/12639#issuecomment-373893957,373893957,
jonasschnelli,2018-03-19T03:05:53Z,"General Concept ACK.\nThere is tiny risk that bitcoind spits out utxos that are already spent due the unlocking between `AvailableCoins` and the return output generation.... okay IMO.",https://github.com/bitcoin/bitcoin/pull/12639#issuecomment-374088320,374088320,
promag,2018-03-19T10:48:35Z,"@jonasschnelli yeah, the same can happen between the user receives the response and tries to use an unspent that was spent in between.",https://github.com/bitcoin/bitcoin/pull/12639#issuecomment-374171410,374171410,
sipa,2018-03-22T21:40:21Z,"Concept ACK, needs rebase.",https://github.com/bitcoin/bitcoin/pull/12639#issuecomment-375466730,375466730,
promag,2018-03-22T23:35:37Z,Rebased and replaced 3 `mapAddressBook` lookups with 1 lookup.,https://github.com/bitcoin/bitcoin/pull/12639#issuecomment-375491987,375491987,
promag,2018-05-03T11:53:41Z,Rebased and split in 2 commits: the change in locks and the lookup refactor.,https://github.com/bitcoin/bitcoin/pull/12639#issuecomment-386270094,386270094,
laanwj,2018-05-03T13:36:44Z,utACK a59dac35abf64d5af4d499bc3397b3369eb76eda,https://github.com/bitcoin/bitcoin/pull/12639#issuecomment-386297879,386297879,
promag,2018-03-22T23:37:15Z,I thought taking a copy of the address book in the above block to avoid locking the wallet bellow. Thoughts?,https://github.com/bitcoin/bitcoin/pull/12639#discussion_r176604070,176604070,src/wallet/rpcwallet.cpp
laanwj,2018-04-17T14:30:29Z,"As it contains an entry for every key, the address book can be quite a big data structure. I don't think making a copy is a good trade-off.",https://github.com/bitcoin/bitcoin/pull/12639#discussion_r182093759,182093759,src/wallet/rpcwallet.cpp
promag,2018-04-17T14:34:49Z,Agree.,https://github.com/bitcoin/bitcoin/pull/12639#discussion_r182095297,182095297,src/wallet/rpcwallet.cpp
promag,2018-04-17T14:35:31Z,@laanwj how about locking `cs_wallet` (not `cs_main`) for the whole loop?,https://github.com/bitcoin/bitcoin/pull/12639#discussion_r182095547,182095547,src/wallet/rpcwallet.cpp
laanwj,2018-04-17T14:39:36Z,"Depends on the relative overhead of locking/unlocking for every look-up here. If that is negligible, it's preferable to lock/unlock with the small granularity like you have now.",https://github.com/bitcoin/bitcoin/pull/12639#discussion_r182097162,182097162,src/wallet/rpcwallet.cpp
promag,2018-04-17T14:51:11Z,"This PR aims to reduce `cs_main` and that is already accomplished.\n\nKeeping the wallet locked for the whole loop is no worse than the previous implementation. Overhead aside, this implementation is more susceptible to an unspent being spent, so I would say to lock the whole loop to minimise that.",https://github.com/bitcoin/bitcoin/pull/12639#discussion_r182101454,182101454,src/wallet/rpcwallet.cpp
promag,2018-05-03T11:52:57Z,"> Keeping the wallet locked for the whole loop \n\n@laanwj changed to this.",https://github.com/bitcoin/bitcoin/pull/12639#discussion_r185772348,185772348,src/wallet/rpcwallet.cpp
