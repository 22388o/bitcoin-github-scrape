[
  {
    "sha": "36b1b63f20cc718084971d2cadd04497a9b72634",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNmIxYjYzZjIwY2M3MTgwODQ5NzFkMmNhZGQwNDQ5N2E5YjcyNjM0",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-06-04T22:22:58Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-08-13T18:27:40Z"
      },
      "message": "rpc: Expose ProcessNewBlockHeaders",
      "tree": {
        "sha": "adf46bfa148f35463305f2c5e3175df147db2fb1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/adf46bfa148f35463305f2c5e3175df147db2fb1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/36b1b63f20cc718084971d2cadd04497a9b72634",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36b1b63f20cc718084971d2cadd04497a9b72634",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/36b1b63f20cc718084971d2cadd04497a9b72634",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36b1b63f20cc718084971d2cadd04497a9b72634/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3bd25c010c5cd19a8d68869ac9dab1f2fa40bd50",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3bd25c010c5cd19a8d68869ac9dab1f2fa40bd50",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3bd25c010c5cd19a8d68869ac9dab1f2fa40bd50"
      }
    ],
    "stats": {
      "total": 55,
      "additions": 54,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d53a45c0cb80d473db2ef7a95ec918be70f77995",
        "filename": "src/core_io.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36b1b63f20cc718084971d2cadd04497a9b72634/src/core_io.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36b1b63f20cc718084971d2cadd04497a9b72634/src/core_io.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_io.h?ref=36b1b63f20cc718084971d2cadd04497a9b72634",
        "patch": "@@ -11,6 +11,7 @@\n #include <vector>\n \n class CBlock;\n+class CBlockHeader;\n class CScript;\n class CTransaction;\n struct CMutableTransaction;\n@@ -23,6 +24,7 @@ CScript ParseScript(const std::string& s);\n std::string ScriptToAsmStr(const CScript& script, const bool fAttemptSighashDecode = false);\n bool DecodeHexTx(CMutableTransaction& tx, const std::string& hex_tx, bool try_no_witness = false, bool try_witness = true);\n bool DecodeHexBlk(CBlock&, const std::string& strHexBlk);\n+bool DecodeHexBlockHeader(CBlockHeader&, const std::string& hex_header);\n uint256 ParseHashStr(const std::string&, const std::string& strName);\n std::vector<unsigned char> ParseHexUV(const UniValue& v, const std::string& strName);\n bool DecodePSBT(PartiallySignedTransaction& psbt, const std::string& base64_tx, std::string& error);"
      },
      {
        "sha": "b02016c014da1ae6786fc6d4d8f07dee9cd6b577",
        "filename": "src/core_read.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36b1b63f20cc718084971d2cadd04497a9b72634/src/core_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36b1b63f20cc718084971d2cadd04497a9b72634/src/core_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_read.cpp?ref=36b1b63f20cc718084971d2cadd04497a9b72634",
        "patch": "@@ -145,6 +145,20 @@ bool DecodeHexTx(CMutableTransaction& tx, const std::string& hex_tx, bool try_no\n     return false;\n }\n \n+bool DecodeHexBlockHeader(CBlockHeader& header, const std::string& hex_header)\n+{\n+    if (!IsHex(hex_header)) return false;\n+\n+    const std::vector<unsigned char> header_data{ParseHex(hex_header)};\n+    CDataStream ser_header(header_data, SER_NETWORK, PROTOCOL_VERSION);\n+    try {\n+        ser_header >> header;\n+    } catch (const std::exception&) {\n+        return false;\n+    }\n+    return true;\n+}\n+\n bool DecodeHexBlk(CBlock& block, const std::string& strHexBlk)\n {\n     if (!IsHex(strHexBlk))"
      },
      {
        "sha": "623b0bd86aaca11fea3eb7fa24d95b5afdb0cb3e",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 38,
        "deletions": 1,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36b1b63f20cc718084971d2cadd04497a9b72634/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36b1b63f20cc718084971d2cadd04497a9b72634/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=36b1b63f20cc718084971d2cadd04497a9b72634",
        "patch": "@@ -10,7 +10,6 @@\n #include <consensus/params.h>\n #include <consensus/validation.h>\n #include <core_io.h>\n-#include <validation.h>\n #include <key_io.h>\n #include <miner.h>\n #include <net.h>\n@@ -23,6 +22,7 @@\n #include <txmempool.h>\n #include <util.h>\n #include <utilstrencodings.h>\n+#include <validation.h>\n #include <validationinterface.h>\n #include <warnings.h>\n \n@@ -763,6 +763,42 @@ static UniValue submitblock(const JSONRPCRequest& request)\n     return BIP22ValidationResult(sc.state);\n }\n \n+static UniValue submitheader(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1) {\n+        throw std::runtime_error(\n+            \"submitheader \\\"hexdata\\\"\\n\"\n+            \"\\nDecode the given hexdata as a header and submit it as a candidate chain tip if valid.\"\n+            \"\\nThrows when the header is invalid.\\n\"\n+            \"\\nArguments\\n\"\n+            \"1. \\\"hexdata\\\"        (string, required) the hex-encoded block header data\\n\"\n+            \"\\nResult:\\n\"\n+            \"None\"\n+            \"\\nExamples:\\n\" +\n+            HelpExampleCli(\"submitheader\", \"\\\"aabbcc\\\"\") +\n+            HelpExampleRpc(\"submitheader\", \"\\\"aabbcc\\\"\"));\n+    }\n+\n+    CBlockHeader h;\n+    if (!DecodeHexBlockHeader(h, request.params[0].get_str())) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"Block header decode failed\");\n+    }\n+    {\n+        LOCK(cs_main);\n+        if (!LookupBlockIndex(h.hashPrevBlock)) {\n+            throw JSONRPCError(RPC_VERIFY_ERROR, \"Must submit previous header (\" + h.hashPrevBlock.GetHex() + \") first\");\n+        }\n+    }\n+\n+    CValidationState state;\n+    ProcessNewBlockHeaders({h}, state, Params(), /* ppindex */ nullptr, /* first_invalid */ nullptr);\n+    if (state.IsValid()) return NullUniValue;\n+    if (state.IsError()) {\n+        throw JSONRPCError(RPC_VERIFY_ERROR, FormatStateMessage(state));\n+    }\n+    throw JSONRPCError(RPC_VERIFY_ERROR, state.GetRejectReason());\n+}\n+\n static UniValue estimatefee(const JSONRPCRequest& request)\n {\n     throw JSONRPCError(RPC_METHOD_DEPRECATED, \"estimatefee was removed in v0.17.\\n\"\n@@ -940,6 +976,7 @@ static const CRPCCommand commands[] =\n     { \"mining\",             \"prioritisetransaction\",  &prioritisetransaction,  {\"txid\",\"dummy\",\"fee_delta\"} },\n     { \"mining\",             \"getblocktemplate\",       &getblocktemplate,       {\"template_request\"} },\n     { \"mining\",             \"submitblock\",            &submitblock,            {\"hexdata\",\"dummy\"} },\n+    { \"mining\",             \"submitheader\",           &submitheader,           {\"hexdata\"} },\n \n \n     { \"generating\",         \"generatetoaddress\",      &generatetoaddress,      {\"nblocks\",\"address\",\"maxtries\"} },"
      }
    ]
  },
  {
    "sha": "fa091b001605c4481fb4eca415929a98d3478549",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTA5MWIwMDE2MDVjNDQ4MWZiNGVjYTQxNTkyOWE5OGQzNDc4NTQ5",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-06-05T00:27:08Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-08-13T18:30:44Z"
      },
      "message": "qa: Add tests for submitheader",
      "tree": {
        "sha": "24d7bb3a076281c9c912829568e85762853af6f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/24d7bb3a076281c9c912829568e85762853af6f5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa091b001605c4481fb4eca415929a98d3478549",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJbcc5UAAoJEM4rdWl+aaVIi6UL/2in/3ZC1vWHcaLpHuh+tA8Q\nyk+nxfYdOr7+Jhezp17aKLFtHnsOp+MJ4LkzRNdTE1G6NLQhrvpx9ZaMxICm85xR\nEp8gOEjCm4KjIv+e+A2+qkEKzPzyfqzoN+9WZJRQDHS2QpIpezSmNYoan9lBvTxu\ncnKwT/1qsLnQwWlFdLqloG45cyyOMSoIxht3ukLCk5QZx/tRV28q8HNd1sX26W2H\nTY6lm28xFos5sxQk7/6NzVamYHc/TBJJJOr7Oj9GsWsLin1XI6kIfNoB63dEE/G7\n/cq+eAo7r/voMYktwliHp4svlIdcyefrhBPHPhGrdSy7CsoMIJDAj4VLbhT0KoJo\nU1qZLhJ9XuEbEOATLX5BmKIt/5HRGfMwmTSwr+ORU3NZQ789G+J3B3j6KAFXywMs\nEWw2yiob+JS/RBENFaH66TsxGUg1bAo/jnGkMq4mkLLwFyhx05mW3YV6yjtYAMuY\n9Kvi7NF4rqrhWpYfyQ6qjGdthxhNcOw1jSkGk6z/Hw==\n=4fvJ\n-----END PGP SIGNATURE-----",
        "payload": "tree 24d7bb3a076281c9c912829568e85762853af6f5\nparent 36b1b63f20cc718084971d2cadd04497a9b72634\nauthor MarcoFalke <falke.marco@gmail.com> 1528158428 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1534185044 -0400\n\nqa: Add tests for submitheader\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa091b001605c4481fb4eca415929a98d3478549",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa091b001605c4481fb4eca415929a98d3478549",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa091b001605c4481fb4eca415929a98d3478549/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "36b1b63f20cc718084971d2cadd04497a9b72634",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36b1b63f20cc718084971d2cadd04497a9b72634",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/36b1b63f20cc718084971d2cadd04497a9b72634"
      }
    ],
    "stats": {
      "total": 79,
      "additions": 74,
      "deletions": 5
    },
    "files": [
      {
        "sha": "15b2d7f7578b2855488acf00b9f5e1e9e9aa6861",
        "filename": "test/functional/mining_basic.py",
        "status": "modified",
        "additions": 74,
        "deletions": 5,
        "changes": 79,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa091b001605c4481fb4eca415929a98d3478549/test/functional/mining_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa091b001605c4481fb4eca415929a98d3478549/test/functional/mining_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_basic.py?ref=fa091b001605c4481fb4eca415929a98d3478549",
        "patch": "@@ -9,16 +9,23 @@\n - submitblock\"\"\"\n \n import copy\n-from binascii import b2a_hex\n from decimal import Decimal\n \n from test_framework.blocktools import create_coinbase\n-from test_framework.messages import CBlock\n+from test_framework.messages import (\n+    CBlock,\n+    CBlockHeader,\n+)\n+from test_framework.mininode import (\n+    P2PDataStore,\n+)\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_raises_rpc_error\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+    bytes_to_hex_str as b2x,\n+)\n \n-def b2x(b):\n-    return b2a_hex(b).decode('ascii')\n \n def assert_template(node, block, expect, rehash=True):\n     if rehash:\n@@ -131,5 +138,67 @@ def run_test(self):\n         bad_block.hashPrevBlock = 123\n         assert_template(node, bad_block, 'inconclusive-not-best-prevblk')\n \n+        self.log.info('submitheader tests')\n+        assert_raises_rpc_error(-22, 'Block header decode failed', lambda: node.submitheader(hexdata='xx' * 80))\n+        assert_raises_rpc_error(-22, 'Block header decode failed', lambda: node.submitheader(hexdata='ff' * 78))\n+        assert_raises_rpc_error(-25, 'Must submit previous header', lambda: node.submitheader(hexdata='ff' * 80))\n+\n+        block.solve()\n+\n+        def chain_tip(b_hash, *, status='headers-only', branchlen=1):\n+            return {'hash': b_hash, 'height': 202, 'branchlen': branchlen, 'status': status}\n+\n+        assert chain_tip(block.hash) not in node.getchaintips()\n+        node.submitheader(hexdata=b2x(block.serialize()))\n+        assert chain_tip(block.hash) in node.getchaintips()\n+        node.submitheader(hexdata=b2x(CBlockHeader(block).serialize()))  # Noop\n+        assert chain_tip(block.hash) in node.getchaintips()\n+\n+        bad_block_root = copy.deepcopy(block)\n+        bad_block_root.hashMerkleRoot += 2\n+        bad_block_root.solve()\n+        assert chain_tip(bad_block_root.hash) not in node.getchaintips()\n+        node.submitheader(hexdata=b2x(CBlockHeader(bad_block_root).serialize()))\n+        assert chain_tip(bad_block_root.hash) in node.getchaintips()\n+        # Should still reject invalid blocks, even if we have the header:\n+        assert_equal(node.submitblock(hexdata=b2x(bad_block_root.serialize())), 'invalid')\n+        assert chain_tip(bad_block_root.hash) in node.getchaintips()\n+        # We know the header for this invalid block, so should just return early without error:\n+        node.submitheader(hexdata=b2x(CBlockHeader(bad_block_root).serialize()))\n+        assert chain_tip(bad_block_root.hash) in node.getchaintips()\n+\n+        bad_block_lock = copy.deepcopy(block)\n+        bad_block_lock.vtx[0].nLockTime = 2**32 - 1\n+        bad_block_lock.vtx[0].rehash()\n+        bad_block_lock.hashMerkleRoot = bad_block_lock.calc_merkle_root()\n+        bad_block_lock.solve()\n+        assert_equal(node.submitblock(hexdata=b2x(bad_block_lock.serialize())), 'invalid')\n+        # Build a \"good\" block on top of the submitted bad block\n+        bad_block2 = copy.deepcopy(block)\n+        bad_block2.hashPrevBlock = bad_block_lock.sha256\n+        bad_block2.solve()\n+        assert_raises_rpc_error(-25, 'bad-prevblk', lambda: node.submitheader(hexdata=b2x(CBlockHeader(bad_block2).serialize())))\n+\n+        # Should reject invalid header right away\n+        bad_block_time = copy.deepcopy(block)\n+        bad_block_time.nTime = 1\n+        bad_block_time.solve()\n+        assert_raises_rpc_error(-25, 'time-too-old', lambda: node.submitheader(hexdata=b2x(CBlockHeader(bad_block_time).serialize())))\n+\n+        # Should ask for the block from a p2p node, if they announce the header as well:\n+        node.add_p2p_connection(P2PDataStore())\n+        node.p2p.wait_for_getheaders(timeout=5)  # Drop the first getheaders\n+        node.p2p.send_blocks_and_test(blocks=[block], rpc=node)\n+        # Must be active now:\n+        assert chain_tip(block.hash, status='active', branchlen=0) in node.getchaintips()\n+\n+        # Building a few blocks should give the same results\n+        node.generate(10)\n+        assert_raises_rpc_error(-25, 'time-too-old', lambda: node.submitheader(hexdata=b2x(CBlockHeader(bad_block_time).serialize())))\n+        assert_raises_rpc_error(-25, 'bad-prevblk', lambda: node.submitheader(hexdata=b2x(CBlockHeader(bad_block2).serialize())))\n+        node.submitheader(hexdata=b2x(CBlockHeader(block).serialize()))\n+        node.submitheader(hexdata=b2x(CBlockHeader(bad_block_root).serialize()))\n+\n+\n if __name__ == '__main__':\n     MiningTest().main()"
      }
    ]
  }
]