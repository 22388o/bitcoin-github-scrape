[
  {
    "sha": "8bf1540cc235fb8fb5330a7ae8ab638247ceb177",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YmYxNTQwY2MyMzVmYjhmYjUzMzBhN2FlOGFiNjM4MjQ3Y2ViMTc3",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-04-30T08:40:25Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-05-07T07:44:56Z"
      },
      "message": "build: remove fdelt_chk backwards compatibility code\n\nNow that we require glibc 2.17 or later, we no longer need to check for\ndifferent return types in fdelt_chk. It was changed from unsigned long\nint to long int in glibc 2.16 . See this commit:\nhttps://sourceware.org/git/?p=glibc.git;a=commit;h=ceb9e56b3d1f8c1922e0526c2e841373843460e2\nand related issue:\nhttps://sourceware.org/bugzilla/show_bug.cgi?id=14210.",
      "tree": {
        "sha": "d4b8fd34f04a3a8f6349b13e566f310a591b525d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d4b8fd34f04a3a8f6349b13e566f310a591b525d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8bf1540cc235fb8fb5330a7ae8ab638247ceb177",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl6zvIUACgkQLuufXMCV\nJsFLZQ/6A08pi9NJQQePaPkVrl+cz8ExE2v/XTjhxSTpwrhP4kkGuvldWZ1dZCdN\nyqaEia3veHH4efHxwd2AnOaj6W+JPzNaTt2w3EPg2L57M8yDwhMWA5MxrZj04eQZ\nveABHMHaQgYmrSMvh9Irr2IEILY96vxGM1gZIu0jF3qqM2NlG/AL1Ys268UGCfSi\nnbVJWKxyOeW2siYm0bnQnTFmjM6Rx/QqCpuCv9Zrbd2xC2gaz1peiZYrV4nJc6OM\nVKyhT8pEwWuvTU0YyC/eiN3oF9EFSjBLLqPsU7mmiz2xd2xxw3KA36zEATQ/g4D7\nN5OfYK2i5TpjhLplcr7iGY5p1kh3U5ggAPhhLB/GI2QOE75JnqIl9+8faWhr6Y99\naUifefeSIRpZCgLtUpnkTg3Tua2flZy5RV4Ce89lTdoKP2MgfdVWziEgCEztssFc\nw50M9z13vbuYEmr8rxmdffGB0Ah396HQOrkeNqD0lDs653ae+syBzbfRukdAeQwL\nBa7GJ3HDcsCdSL3cG7x+jULlv+q7kRtT+PwrELiRF+kpMg7HQh5/Rw3AlQZD64u0\nj5BXwmO7ql6RVI7z5d9UjZ6rLWSIngSXCDcYaKenANJMA7sRUy6zhYHNgwsaVDcu\nptukCxZSC/HwGDUjA3+aTqbTXr8NElTT+1BuJ/YaDWleHFsmhP8=\n=zmsF\n-----END PGP SIGNATURE-----",
        "payload": "tree d4b8fd34f04a3a8f6349b13e566f310a591b525d\nparent 3b1e289248dcda896aaa1c84995ee9c6077601e6\nauthor fanquake <fanquake@gmail.com> 1588236025 +0800\ncommitter fanquake <fanquake@gmail.com> 1588837496 +0800\n\nbuild: remove fdelt_chk backwards compatibility code\n\nNow that we require glibc 2.17 or later, we no longer need to check for\ndifferent return types in fdelt_chk. It was changed from unsigned long\nint to long int in glibc 2.16 . See this commit:\nhttps://sourceware.org/git/?p=glibc.git;a=commit;h=ceb9e56b3d1f8c1922e0526c2e841373843460e2\nand related issue:\nhttps://sourceware.org/bugzilla/show_bug.cgi?id=14210.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8bf1540cc235fb8fb5330a7ae8ab638247ceb177",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8bf1540cc235fb8fb5330a7ae8ab638247ceb177",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8bf1540cc235fb8fb5330a7ae8ab638247ceb177/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3b1e289248dcda896aaa1c84995ee9c6077601e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b1e289248dcda896aaa1c84995ee9c6077601e6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3b1e289248dcda896aaa1c84995ee9c6077601e6"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 2,
      "deletions": 32
    },
    "files": [
      {
        "sha": "35ba8425b3255aebd140c535d1ae2e618baee4c9",
        "filename": "build_msvc/bitcoin_config.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8bf1540cc235fb8fb5330a7ae8ab638247ceb177/build_msvc/bitcoin_config.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8bf1540cc235fb8fb5330a7ae8ab638247ceb177/build_msvc/bitcoin_config.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bitcoin_config.h?ref=8bf1540cc235fb8fb5330a7ae8ab638247ceb177",
        "patch": "@@ -41,9 +41,6 @@\n /* Define to 1 to enable ZMQ functions */\n #define ENABLE_ZMQ 1\n \n-/* parameter and return value type for __fdelt_chk */\n-/* #undef FDELT_TYPE */\n-\n /* define if the Boost library is available */\n #define HAVE_BOOST /**/\n "
      },
      {
        "sha": "de351899eb1fe9af4d1ca9fc372feb7d8e602bdb",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 2,
        "deletions": 16,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8bf1540cc235fb8fb5330a7ae8ab638247ceb177/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8bf1540cc235fb8fb5330a7ae8ab638247ceb177/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=8bf1540cc235fb8fb5330a7ae8ab638247ceb177",
        "patch": "@@ -717,22 +717,8 @@ AX_GCC_FUNC_ATTRIBUTE([dllexport])\n AX_GCC_FUNC_ATTRIBUTE([dllimport])\n \n if test x$use_glibc_compat != xno; then\n-\n-  dnl __fdelt_chk's params and return type have changed from long unsigned int to long int.\n-  dnl See which one is present here.\n-  AC_MSG_CHECKING(__fdelt_chk type)\n-  AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#ifdef _FORTIFY_SOURCE\n-                    #undef _FORTIFY_SOURCE\n-                  #endif\n-                  #define _FORTIFY_SOURCE 2\n-                  #include <sys/select.h>\n-     extern \"C\" long unsigned int __fdelt_warn(long unsigned int);]],[[]])],\n-    [ fdelt_type=\"long unsigned int\"],\n-    [ fdelt_type=\"long int\"])\n-  AC_MSG_RESULT($fdelt_type)\n-  AC_DEFINE_UNQUOTED(FDELT_TYPE, $fdelt_type,[parameter and return value type for __fdelt_chk])\n-  AX_CHECK_LINK_FLAG([[-Wl,--wrap=__divmoddi4]], [COMPAT_LDFLAGS=\"$COMPAT_LDFLAGS -Wl,--wrap=__divmoddi4\"],, [[$LDFLAG_WERROR]])\n-  AX_CHECK_LINK_FLAG([[-Wl,--wrap=log2f]], [COMPAT_LDFLAGS=\"$COMPAT_LDFLAGS -Wl,--wrap=log2f\"],, [[$LDFLAG_WERROR]])\n+  AX_CHECK_LINK_FLAG([[-Wl,--wrap=__divmoddi4]], [COMPAT_LDFLAGS=\"$COMPAT_LDFLAGS -Wl,--wrap=__divmoddi4\"])\n+  AX_CHECK_LINK_FLAG([[-Wl,--wrap=log2f]], [COMPAT_LDFLAGS=\"$COMPAT_LDFLAGS -Wl,--wrap=log2f\"])\n else\n   AC_SEARCH_LIBS([clock_gettime],[rt])\n fi"
      },
      {
        "sha": "d17de33e86b48505db08ca3df6bbe0b39aaf36d0",
        "filename": "src/compat/glibc_compat.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 13,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8bf1540cc235fb8fb5330a7ae8ab638247ceb177/src/compat/glibc_compat.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8bf1540cc235fb8fb5330a7ae8ab638247ceb177/src/compat/glibc_compat.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/glibc_compat.cpp?ref=8bf1540cc235fb8fb5330a7ae8ab638247ceb177",
        "patch": "@@ -9,26 +9,13 @@\n #include <cstddef>\n #include <cstdint>\n \n-#if defined(HAVE_SYS_SELECT_H)\n-#include <sys/select.h>\n-#endif\n-\n // Prior to GLIBC_2.14, memcpy was aliased to memmove.\n extern \"C\" void* memmove(void* a, const void* b, size_t c);\n extern \"C\" void* memcpy(void* a, const void* b, size_t c)\n {\n     return memmove(a, b, c);\n }\n \n-extern \"C\" void __chk_fail(void) __attribute__((__noreturn__));\n-extern \"C\" FDELT_TYPE __fdelt_warn(FDELT_TYPE a)\n-{\n-    if (a >= FD_SETSIZE)\n-        __chk_fail();\n-    return a / __NFDBITS;\n-}\n-extern \"C\" FDELT_TYPE __fdelt_chk(FDELT_TYPE) __attribute__((weak, alias(\"__fdelt_warn\")));\n-\n #if defined(__i386__) || defined(__arm__)\n \n extern \"C\" int64_t __udivmoddi4(uint64_t u, uint64_t v, uint64_t* rp);"
      }
    ]
  },
  {
    "sha": "df6bde031b24112abf3a94337a2c096698acde6e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZjZiZGUwMzFiMjQxMTJhYmYzYTk0MzM3YTJjMDk2Njk4YWNkZTZl",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-05-04T00:19:44Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-05-07T07:45:09Z"
      },
      "message": "test: remove glibc fdelt sanity check\n\nAs is, this sanity check doesn't seem to be testing fdelt_chk, because\npassing a value of \"0\" to FD_SET wont cause the compiler to insert any\ncalls to fdelt_chk().\n\nThe documentation is a little misleading. If we actually triggered fdelt_chk\nat runtime, bitcoind would abort. I think this check would be better replaced\n(if possible) by additional checks in security-check.py.\n\nThe compiler may insert a call to fdelt_warn() (aliased with fdelt_chk\nin glibc) at compile time if it can determine that an invalid value is\nbeing passed to FD_SET.\n\nThese checks are essentially; value < 0 or value >= FD_SETSIZE along\nwith a check for wether the value is a compile time constant.\n\nIf the compiler can determine an invalid value is being passed, a call\nto fdelt_warn will be inserted. Passing 0 should never cause a call to\nbe inserted.\n\nYou can check this after compiling:\n```bash\nobjdump -dC bitcoind | grep sanity_fdelt\n...\n0000000000399d20 <sanity_test_fdelt()>:\n  399d20:\t48 81 ec 98 00 00 00 \tsub    $0x98,%rsp\n  399d27:\tb9 10 00 00 00       \tmov    $0x10,%ecx\n  399d2c:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n  399d33:\t00 00\n  399d35:\t48 89 84 24 88 00 00 \tmov    %rax,0x88(%rsp)\n  399d3c:\t00\n  399d3d:\t31 c0                \txor    %eax,%eax\n  399d3f:\t48 89 e7             \tmov    %rsp,%rdi\n  399d42:\tfc                   \tcld\n  399d43:\tf3 48 ab             \trep stos %rax,%es:(%rdi)\n  399d46:\t48 8b 84 24 88 00 00 \tmov    0x88(%rsp),%rax\n  399d4d:\t00\n  399d4e:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n  399d55:\t00 00\n  399d57:\t75 0d                \tjne    399d66 <sanity_test_fdelt()+0x46>\n  399d59:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  399d5e:\t48 81 c4 98 00 00 00 \tadd    $0x98,%rsp\n  399d65:\tc3                   \tretq\n  399d66:\te8 85 df c8 ff       \tcallq  27cf0 <__stack_chk_fail@plt>\n  399d6b:\t0f 1f 44 00 00       \tnopl   0x0(%rax,%rax,1)\n\n```\n\nTo test, you could modify this test to pass -1 to FD_SET, and check\nthat a call to fdelt_warn() is inserted, and that running bitcoind\nfails. i.e:\n\n```bash\n0000000000399d20 <sanity_test_fdelt()>:\n  399d20:\t48 81 ec 98 00 00 00 \tsub    $0x98,%rsp\n  399d27:\tb9 10 00 00 00       \tmov    $0x10,%ecx\n  399d2c:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n  399d33:\t00 00\n  399d35:\t48 89 84 24 88 00 00 \tmov    %rax,0x88(%rsp)\n  399d3c:\t00\n  399d3d:\t31 c0                \txor    %eax,%eax\n  399d3f:\t48 89 e7             \tmov    %rsp,%rdi\n  399d42:\tfc                   \tcld\n  399d43:\tf3 48 ab             \trep stos %rax,%es:(%rdi)\n  399d46:\t48 c7 c7 ff ff ff ff \tmov    $0xffffffffffffffff,%rdi\n  399d4d:\te8 3e ff ff ff       \tcallq  399c90 <__fdelt_warn>\n  399d52:\t0f b6 04 24          \tmovzbl (%rsp),%eax\n  399d56:\t83 e0 01             \tand    $0x1,%eax\n  399d59:\t48 8b 94 24 88 00 00 \tmov    0x88(%rsp),%rdx\n  399d60:\t00\n  399d61:\t64 48 33 14 25 28 00 \txor    %fs:0x28,%rdx\n  399d68:\t00 00\n  399d6a:\t75 08                \tjne    399d74 <sanity_test_fdelt()+0x54>\n  399d6c:\t48 81 c4 98 00 00 00 \tadd    $0x98,%rsp\n  399d73:\tc3                   \tretq\n  399d74:\te8 77 df c8 ff       \tcallq  27cf0 <__stack_chk_fail@plt>\n  399d79:\t0f 1f 80 00 00 00 00 \tnopl   0x0(%rax)\n\n```\n\n```bash\n./src/bitcoind\n*** buffer overflow detected ***: src/bitcoind terminated\nAborted\n```",
      "tree": {
        "sha": "29357cb3c4e262ab4d188694f764ef5e9535c6b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/29357cb3c4e262ab4d188694f764ef5e9535c6b6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/df6bde031b24112abf3a94337a2c096698acde6e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl6zvIUACgkQLuufXMCV\nJsE3PA//Rw+ft01Ad9nuMogJwWu5B064y0GxTCIu9XTgM/XuZVA24bLRm5L++sae\nfIHFu5SR2tVOk5qhztdCqb3G/3CI05Gw4qjHLoHQATQvcnbyOk9dFzOlDk9VpkdW\nNArPkPmDNKImxu5Wl9jXjaBcF9PcX2PvwkW/mZAy9Hw5ytAWSRVL2c8QAQ79FXrK\nhYZbwrZi7bw4IhNwqGozmHgGmgR9n7AzeJv5iqEgnWPnKk7fHsSV2eEMl4VMNMs4\n3AkgPVGOPNmua9a2ARXp/TbUCQjsvyw8MkuHBIyrIov2I+Kpitt9lTLVwx9SeyL6\nbElFvqxQq03MKeApoddtg8UCiPVIAo5NPBq93xsmqBFHPdp2upcGHNtlAuVuyYfS\nWp+9hKVESJd66nn6P1hwpRw7i61bpVUWZwSeqZwnB44ZvzbYnAItE7ETnyPuzGTd\n6UOtS5bNEpzBRRLypWXVZ5X5TFtPmQaWc1WYNs1BPeVYmnCMgpZdgEJP0xLZehm8\nRwiwVVpAUmk5hOCPYPeGio7vJajO6NHWQrE94Me9JRMlO3LuzaBlA/s/QEGzfARC\nQLFGTV2mM+uYzGl58v7k6QSDI/QSDfNSLJx5KcihmM8KxTB4Ip1Q3j0SSOyti8mH\nBTMO83wVNAlYLFprqqyTc/XoqyBGNRRaHRwghXpwdH0KSuuUG8U=\n=qW0q\n-----END PGP SIGNATURE-----",
        "payload": "tree 29357cb3c4e262ab4d188694f764ef5e9535c6b6\nparent 8bf1540cc235fb8fb5330a7ae8ab638247ceb177\nauthor fanquake <fanquake@gmail.com> 1588551584 +0800\ncommitter fanquake <fanquake@gmail.com> 1588837509 +0800\n\ntest: remove glibc fdelt sanity check\n\nAs is, this sanity check doesn't seem to be testing fdelt_chk, because\npassing a value of \"0\" to FD_SET wont cause the compiler to insert any\ncalls to fdelt_chk().\n\nThe documentation is a little misleading. If we actually triggered fdelt_chk\nat runtime, bitcoind would abort. I think this check would be better replaced\n(if possible) by additional checks in security-check.py.\n\nThe compiler may insert a call to fdelt_warn() (aliased with fdelt_chk\nin glibc) at compile time if it can determine that an invalid value is\nbeing passed to FD_SET.\n\nThese checks are essentially; value < 0 or value >= FD_SETSIZE along\nwith a check for wether the value is a compile time constant.\n\nIf the compiler can determine an invalid value is being passed, a call\nto fdelt_warn will be inserted. Passing 0 should never cause a call to\nbe inserted.\n\nYou can check this after compiling:\n```bash\nobjdump -dC bitcoind | grep sanity_fdelt\n...\n0000000000399d20 <sanity_test_fdelt()>:\n  399d20:\t48 81 ec 98 00 00 00 \tsub    $0x98,%rsp\n  399d27:\tb9 10 00 00 00       \tmov    $0x10,%ecx\n  399d2c:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n  399d33:\t00 00\n  399d35:\t48 89 84 24 88 00 00 \tmov    %rax,0x88(%rsp)\n  399d3c:\t00\n  399d3d:\t31 c0                \txor    %eax,%eax\n  399d3f:\t48 89 e7             \tmov    %rsp,%rdi\n  399d42:\tfc                   \tcld\n  399d43:\tf3 48 ab             \trep stos %rax,%es:(%rdi)\n  399d46:\t48 8b 84 24 88 00 00 \tmov    0x88(%rsp),%rax\n  399d4d:\t00\n  399d4e:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n  399d55:\t00 00\n  399d57:\t75 0d                \tjne    399d66 <sanity_test_fdelt()+0x46>\n  399d59:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  399d5e:\t48 81 c4 98 00 00 00 \tadd    $0x98,%rsp\n  399d65:\tc3                   \tretq\n  399d66:\te8 85 df c8 ff       \tcallq  27cf0 <__stack_chk_fail@plt>\n  399d6b:\t0f 1f 44 00 00       \tnopl   0x0(%rax,%rax,1)\n\n```\n\nTo test, you could modify this test to pass -1 to FD_SET, and check\nthat a call to fdelt_warn() is inserted, and that running bitcoind\nfails. i.e:\n\n```bash\n0000000000399d20 <sanity_test_fdelt()>:\n  399d20:\t48 81 ec 98 00 00 00 \tsub    $0x98,%rsp\n  399d27:\tb9 10 00 00 00       \tmov    $0x10,%ecx\n  399d2c:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n  399d33:\t00 00\n  399d35:\t48 89 84 24 88 00 00 \tmov    %rax,0x88(%rsp)\n  399d3c:\t00\n  399d3d:\t31 c0                \txor    %eax,%eax\n  399d3f:\t48 89 e7             \tmov    %rsp,%rdi\n  399d42:\tfc                   \tcld\n  399d43:\tf3 48 ab             \trep stos %rax,%es:(%rdi)\n  399d46:\t48 c7 c7 ff ff ff ff \tmov    $0xffffffffffffffff,%rdi\n  399d4d:\te8 3e ff ff ff       \tcallq  399c90 <__fdelt_warn>\n  399d52:\t0f b6 04 24          \tmovzbl (%rsp),%eax\n  399d56:\t83 e0 01             \tand    $0x1,%eax\n  399d59:\t48 8b 94 24 88 00 00 \tmov    0x88(%rsp),%rdx\n  399d60:\t00\n  399d61:\t64 48 33 14 25 28 00 \txor    %fs:0x28,%rdx\n  399d68:\t00 00\n  399d6a:\t75 08                \tjne    399d74 <sanity_test_fdelt()+0x54>\n  399d6c:\t48 81 c4 98 00 00 00 \tadd    $0x98,%rsp\n  399d73:\tc3                   \tretq\n  399d74:\te8 77 df c8 ff       \tcallq  27cf0 <__stack_chk_fail@plt>\n  399d79:\t0f 1f 80 00 00 00 00 \tnopl   0x0(%rax)\n\n```\n\n```bash\n./src/bitcoind\n*** buffer overflow detected ***: src/bitcoind terminated\nAborted\n```\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df6bde031b24112abf3a94337a2c096698acde6e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/df6bde031b24112abf3a94337a2c096698acde6e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df6bde031b24112abf3a94337a2c096698acde6e/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8bf1540cc235fb8fb5330a7ae8ab638247ceb177",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8bf1540cc235fb8fb5330a7ae8ab638247ceb177",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8bf1540cc235fb8fb5330a7ae8ab638247ceb177"
      }
    ],
    "stats": {
      "total": 68,
      "additions": 0,
      "deletions": 68
    },
    "files": [
      {
        "sha": "22a3bc1c21855b0d3630798b8cc3966ca13055ec",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 0,
        "deletions": 33,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df6bde031b24112abf3a94337a2c096698acde6e/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df6bde031b24112abf3a94337a2c096698acde6e/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=df6bde031b24112abf3a94337a2c096698acde6e",
        "patch": "@@ -797,39 +797,6 @@ fi\n \n AC_CHECK_HEADERS([endian.h sys/endian.h byteswap.h stdio.h stdlib.h unistd.h strings.h sys/types.h sys/stat.h sys/select.h sys/prctl.h sys/sysctl.h vm/vm_param.h sys/vmmeter.h sys/resources.h])\n \n-dnl FD_ZERO may be dependent on a declaration of memcpy, e.g. in SmartOS\n-dnl check that it fails to build without memcpy, then that it builds with\n-AC_MSG_CHECKING(FD_ZERO memcpy dependence)\n-AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n-    #include <cstddef>\n-    #if HAVE_SYS_SELECT_H\n-    #include <sys/select.h>\n-    #endif\n-  ]],[[\n-    #if HAVE_SYS_SELECT_H\n-    fd_set fds;\n-    FD_ZERO(&fds);\n-    #endif\n-  ]])],\n-  [ AC_MSG_RESULT(no) ],\n-  [\n-      AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n-          #include <cstring>\n-          #if HAVE_SYS_SELECT_H\n-          #include <sys/select.h>\n-          #endif\n-        ]], [[\n-          #if HAVE_SYS_SELECT_H\n-          fd_set fds;\n-          FD_ZERO(&fds);\n-          #endif\n-        ]])],\n-        [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_CSTRING_DEPENDENT_FD_ZERO, 1, [Define this symbol if FD_ZERO is dependent of a memcpy declaration being available]) ],\n-        [ AC_MSG_ERROR(failed with cstring include) ]\n-      )\n-  ]\n-)\n-\n AC_CHECK_DECLS([getifaddrs, freeifaddrs],,,\n     [#include <sys/types.h>\n     #include <ifaddrs.h>]"
      },
      {
        "sha": "13812de0e7db91f7d964d6887270af8b32e09edf",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df6bde031b24112abf3a94337a2c096698acde6e/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df6bde031b24112abf3a94337a2c096698acde6e/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=df6bde031b24112abf3a94337a2c096698acde6e",
        "patch": "@@ -496,7 +496,6 @@ libbitcoin_util_a_SOURCES = \\\n   support/lockedpool.cpp \\\n   chainparamsbase.cpp \\\n   clientversion.cpp \\\n-  compat/glibc_sanity_fdelt.cpp \\\n   compat/glibc_sanity.cpp \\\n   compat/glibcxx_sanity.cpp \\\n   compat/strnlen.cpp \\"
      },
      {
        "sha": "0367b9a53f02ea272a7c0dbd27d0e2b59e01440e",
        "filename": "src/compat/glibc_sanity.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df6bde031b24112abf3a94337a2c096698acde6e/src/compat/glibc_sanity.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df6bde031b24112abf3a94337a2c096698acde6e/src/compat/glibc_sanity.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/glibc_sanity.cpp?ref=df6bde031b24112abf3a94337a2c096698acde6e",
        "patch": "@@ -8,10 +8,6 @@\n \n #include <cstddef>\n \n-#if defined(HAVE_SYS_SELECT_H)\n-bool sanity_test_fdelt();\n-#endif\n-\n extern \"C\" void* memcpy(void* a, const void* b, size_t c);\n void* memcpy_int(void* a, const void* b, size_t c)\n {\n@@ -45,9 +41,5 @@ bool sanity_test_memcpy()\n \n bool glibc_sanity_test()\n {\n-#if defined(HAVE_SYS_SELECT_H)\n-    if (!sanity_test_fdelt())\n-        return false;\n-#endif\n     return sanity_test_memcpy<1025>();\n }"
      },
      {
        "sha": "87140d0c714dc5c261d678a48ba329d2f68b8643",
        "filename": "src/compat/glibc_sanity_fdelt.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 26,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8bf1540cc235fb8fb5330a7ae8ab638247ceb177/src/compat/glibc_sanity_fdelt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8bf1540cc235fb8fb5330a7ae8ab638247ceb177/src/compat/glibc_sanity_fdelt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/glibc_sanity_fdelt.cpp?ref=8bf1540cc235fb8fb5330a7ae8ab638247ceb177",
        "patch": "@@ -1,26 +0,0 @@\n-// Copyright (c) 2009-2019 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#if defined(HAVE_CONFIG_H)\n-#include <config/bitcoin-config.h>\n-#endif\n-\n-#if defined(HAVE_SYS_SELECT_H)\n-#ifdef HAVE_CSTRING_DEPENDENT_FD_ZERO\n-#include <cstring>\n-#endif\n-#include <sys/select.h>\n-\n-// trigger: Call FD_SET to trigger __fdelt_chk. FORTIFY_SOURCE must be defined\n-//   as >0 and optimizations must be set to at least -O2.\n-// test: Add a file descriptor to an empty fd_set. Verify that it has been\n-//   correctly added.\n-bool sanity_test_fdelt()\n-{\n-    fd_set fds;\n-    FD_ZERO(&fds);\n-    FD_SET(0, &fds);\n-    return FD_ISSET(0, &fds);\n-}\n-#endif"
      }
    ]
  }
]