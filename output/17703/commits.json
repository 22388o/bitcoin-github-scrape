[
  {
    "sha": "8ddcbb4e41fa91e7f80efe6d9c4d5e9bb1355036",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZGRjYmI0ZTQxZmE5MWU3ZjgwZWZlNmQ5YzRkNWU5YmIxMzU1MDM2",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-12-10T13:35:10Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-12-10T13:35:10Z"
      },
      "message": "build: Remove backticks from configure.ac",
      "tree": {
        "sha": "631571eed31b85a86926ae11c997ce1a99e995d8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/631571eed31b85a86926ae11c997ce1a99e995d8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8ddcbb4e41fa91e7f80efe6d9c4d5e9bb1355036",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl3vnw4ACgkQLuufXMCV\nJsF8WRAApKiLFz+DER5huWfMSjTj8mq2n9OlSaH19z4v3Eif3/FjN2ohUlho34/9\nFvELHU0JbeexHpKP5mKX3Zz50DlMcQachpVq6gaGG4GGMAPuxMoKMhB69Wz7vb95\npilgaFOi+IoOtPrYu11KBShiP0ZE9S7WMY3Qjeq1B9ETFG2bDWSohJcYHgnXF33g\nMfX1Gzk6SLZkTUyic956bD7LWDJwQDKQTpR/9Q2+x9bK2H6L7uV/i4y+w3MO+zAv\nYIBmPMl02pXuVcwUzE3sJZahocLkVPATM+3use0/G7yNH8dLddisif+WHzRrLQ++\ndWJA5jbfRQC7/YFFmlU0UvqcrVCdJPQzNim7YjpVa057yBQOuJKlpzcg+xjckl/T\njMC63spYQ9DlUbYNu6KHyv/aXK9W7QRNbpTlO5lo+30LZYK4dzbZvCIncwf12Fu5\nc6lvDElEj4Z/dYnHzY98z14NNeriB8mLGao2aOlHtDfZslh5017uKT4EJfb5eoon\nTZi13acljzoJaLCjyyy0AEGbyiD9PDtmCuktIvc+oWlJD8k4hdPWyKKDKoOvbAys\nHgA7Gtgg2SBSYV55Bx/3F9TxSjmVVe31DClUhQBuRFZJqkPMR6wbo2kIHU0Gvx71\nortudqca0L0RyJlbdGpyV8IK9P/VMhWMTheCZXRF+BZtvCMDhFc=\n=P36E\n-----END PGP SIGNATURE-----",
        "payload": "tree 631571eed31b85a86926ae11c997ce1a99e995d8\nparent 1189b6acab115a7fe7bd67f8b4c6e3f55e53274e\nauthor fanquake <fanquake@gmail.com> 1575984910 -0500\ncommitter fanquake <fanquake@gmail.com> 1575984910 -0500\n\nbuild: Remove backticks from configure.ac\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ddcbb4e41fa91e7f80efe6d9c4d5e9bb1355036",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8ddcbb4e41fa91e7f80efe6d9c4d5e9bb1355036",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ddcbb4e41fa91e7f80efe6d9c4d5e9bb1355036/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1189b6acab115a7fe7bd67f8b4c6e3f55e53274e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1189b6acab115a7fe7bd67f8b4c6e3f55e53274e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1189b6acab115a7fe7bd67f8b4c6e3f55e53274e"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 4,
      "deletions": 5
    },
    "files": [
      {
        "sha": "e3acf6511087906d6afa9e204b69f4b0adf56155",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ddcbb4e41fa91e7f80efe6d9c4d5e9bb1355036/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ddcbb4e41fa91e7f80efe6d9c4d5e9bb1355036/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=8ddcbb4e41fa91e7f80efe6d9c4d5e9bb1355036",
        "patch": "@@ -555,8 +555,8 @@ case $host in\n          dnl It's safe to add these paths even if the functionality is disabled by\n          dnl the user (--without-wallet or --without-gui for example).\n \n-         bdb_prefix=`$BREW --prefix berkeley-db4 2>/dev/null`\n-         qt5_prefix=`$BREW --prefix qt5 2>/dev/null`\n+         bdb_prefix=$($BREW --prefix berkeley-db4 2>/dev/null)\n+         qt5_prefix=$($BREW --prefix qt5 2>/dev/null)\n          if test x$bdb_prefix != x; then\n            CPPFLAGS=\"$CPPFLAGS -I$bdb_prefix/include\"\n            LIBS=\"$LIBS -L$bdb_prefix/lib\"\n@@ -987,7 +987,7 @@ AC_LINK_IFELSE(\n         [[ #include <cstdlib> ]],\n         [[ int nErr = std::system(\"\"); ]]\n     )],\n-    [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_STD__SYSTEM, 1, Define to 1 if you have the `std::system' function.)],\n+    [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_STD__SYSTEM, 1, Define to 1 if std::system is available.)],\n     [ AC_MSG_RESULT(no) ]\n )\n \n@@ -997,11 +997,10 @@ AC_LINK_IFELSE(\n         [[ ]],\n         [[ int nErr = ::_wsystem(\"\"); ]]\n     )],\n-    [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_WSYSTEM, 1, Define to 1 if you have the `::wsystem' function.)],\n+    [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_WSYSTEM, 1, Define to 1 if ::wsystem is available.)],\n     [ AC_MSG_RESULT(no) ]\n )\n \n-# Define to 1 if std::system or ::wsystem (Windows) is available\n AC_DEFINE([HAVE_SYSTEM], [HAVE_STD__SYSTEM || HAVE_WSYSTEM], [std::system or ::wsystem])\n \n LEVELDB_CPPFLAGS="
      }
    ]
  },
  {
    "sha": "3ab18246254019896132d1cdb8af2dcdb213ec3b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYWIxODI0NjI1NDAxOTg5NjEzMmQxY2RiOGFmMmRjZGIyMTNlYzNi",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-12-10T13:35:33Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-12-10T13:35:33Z"
      },
      "message": "build: Use dnl for all comments in configure.ac, rather than #",
      "tree": {
        "sha": "9968697113fc1d7e7f8160a574012d03dede7622",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9968697113fc1d7e7f8160a574012d03dede7622"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3ab18246254019896132d1cdb8af2dcdb213ec3b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl3vnyUACgkQLuufXMCV\nJsFrYQ//YtioG/e7FFHbfubznrE+A2zmU+yKJ2aJdZUaFsLCCaRhQhyNB+TLoFfL\nI1bHKkLVJOxHkcKHxKX9KfsDcG0yt3Mwf7LhZAiXGl+1p0gQmwpsmkWcgjr1bHov\neKw8uC1DSVtqpwwpD2faeVz4u1TfPaXCYCEPihX3XVDMdYA48kJPflrNF8nBjltr\nG7aO+gOA6+S2jsrKxdxA8HCX9qpjtKcSYVUcUBfGgvZXaq8HbJlrxeZuzJfM84KK\nbH3kxZVlbzQgYWeb7DwWljMEIFohC84a5CzBtlRzZIANWuGLvUBz+lQ7bhPLVfUz\nOvLSMbN1Cnu1zeJAAQ9nFEfpGeybWAfFzw5mxqZMmBGsblr8Xsw9fGiCUvQ1xyOd\nB+Mth5dXWLqd/TrSUmxsB5ONYtn5AxhEEsRW8ZXr1Ll1z6JaazK7s7hP3yGtmsuq\n3Xmo3KuqTILkgyct0oUoQgF7NDGqL9OSGPXPSX50u0j9+MMfNcjPpkAQ0gSaDLEu\noG4VmN+a05+1eXQYbaXKEHpnQN1+cXl+LKVf6eiqsKD8VBqRnCk2nb+3OTzyGLZR\nsqXwa9kvNKbs82JyJMmYj8OQEJyDyT0p0rggjYQSrG7zVP7icFTL6i4+v4O7qCiY\ndyGxK+Nba1X+xXCBdR0S/hrL0bMIkBb8RGbAm1b+FVR7nEFOoYU=\n=V50N\n-----END PGP SIGNATURE-----",
        "payload": "tree 9968697113fc1d7e7f8160a574012d03dede7622\nparent 8ddcbb4e41fa91e7f80efe6d9c4d5e9bb1355036\nauthor fanquake <fanquake@gmail.com> 1575984933 -0500\ncommitter fanquake <fanquake@gmail.com> 1575984933 -0500\n\nbuild: Use dnl for all comments in configure.ac, rather than #\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ab18246254019896132d1cdb8af2dcdb213ec3b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3ab18246254019896132d1cdb8af2dcdb213ec3b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ab18246254019896132d1cdb8af2dcdb213ec3b/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8ddcbb4e41fa91e7f80efe6d9c4d5e9bb1355036",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ddcbb4e41fa91e7f80efe6d9c4d5e9bb1355036",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8ddcbb4e41fa91e7f80efe6d9c4d5e9bb1355036"
      }
    ],
    "stats": {
      "total": 100,
      "additions": 50,
      "deletions": 50
    },
    "files": [
      {
        "sha": "e7d14202a7f14ce88279661684027d3215bc075f",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 50,
        "deletions": 50,
        "changes": 100,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ab18246254019896132d1cdb8af2dcdb213ec3b/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ab18246254019896132d1cdb8af2dcdb213ec3b/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=3ab18246254019896132d1cdb8af2dcdb213ec3b",
        "patch": "@@ -243,27 +243,27 @@ AC_ARG_ENABLE(man,\n     enable_man=yes)\n AM_CONDITIONAL(ENABLE_MAN, test \"$enable_man\" != no)\n \n-# Enable debug\n+dnl Enable debug\n AC_ARG_ENABLE([debug],\n     [AS_HELP_STRING([--enable-debug],\n                     [use compiler flags and macros suited for debugging (default is no)])],\n     [enable_debug=$enableval],\n     [enable_debug=no])\n \n-# Enable different -fsanitize options\n+dnl Enable different -fsanitize options\n AC_ARG_WITH([sanitizers],\n     [AS_HELP_STRING([--with-sanitizers],\n                     [comma separated list of extra sanitizers to build with (default is none enabled)])],\n     [use_sanitizers=$withval])\n \n-# Enable gprof profiling\n+dnl Enable gprof profiling\n AC_ARG_ENABLE([gprof],\n     [AS_HELP_STRING([--enable-gprof],\n                     [use gprof profiling compiler flags (default is no)])],\n     [enable_gprof=$enableval],\n     [enable_gprof=no])\n \n-# Turn warnings into errors\n+dnl Turn warnings into errors\n AC_ARG_ENABLE([werror],\n     [AS_HELP_STRING([--enable-werror],\n                     [Treat certain compiler warnings as errors (default is no)])],\n@@ -274,15 +274,15 @@ AC_LANG_PUSH([C++])\n AX_CHECK_COMPILE_FLAG([-Werror],[CXXFLAG_WERROR=\"-Werror\"],[CXXFLAG_WERROR=\"\"])\n \n if test \"x$enable_debug\" = xyes; then\n-  # Clear default -g -O2 flags\n+  dnl Clear default -g -O2 flags\n   if test \"x$CXXFLAGS_overridden\" = xno; then\n \tCXXFLAGS=\"\"\n   fi\n \n-  # Disable all optimizations\n+  dnl Disable all optimizations\n   AX_CHECK_COMPILE_FLAG([-O0], [[DEBUG_CXXFLAGS=\"$DEBUG_CXXFLAGS -O0\"]],,[[$CXXFLAG_WERROR]])\n \n-  # Prefer -g3, fall back to -g if that is unavailable.\n+  dnl Prefer -g3, fall back to -g if that is unavailable.\n   AX_CHECK_COMPILE_FLAG(\n     [-g3],\n     [[DEBUG_CXXFLAGS=\"$DEBUG_CXXFLAGS -g3\"]],\n@@ -295,19 +295,19 @@ if test \"x$enable_debug\" = xyes; then\n fi\n \n if test x$use_sanitizers != x; then\n-  # First check if the compiler accepts flags. If an incompatible pair like\n-  # -fsanitize=address,thread is used here, this check will fail. This will also\n-  # fail if a bad argument is passed, e.g. -fsanitize=undfeined\n+  dnl First check if the compiler accepts flags. If an incompatible pair like\n+  dnl -fsanitize=address,thread is used here, this check will fail. This will also\n+  dnl fail if a bad argument is passed, e.g. -fsanitize=undfeined\n   AX_CHECK_COMPILE_FLAG(\n     [[-fsanitize=$use_sanitizers]],\n     [[SANITIZER_CXXFLAGS=-fsanitize=$use_sanitizers]],\n     [AC_MSG_ERROR([compiler did not accept requested flags])])\n \n-  # Some compilers (e.g. GCC) require additional libraries like libasan,\n-  # libtsan, libubsan, etc. Make sure linking still works with the sanitize\n-  # flag. This is a separate check so we can give a better error message when\n-  # the sanitize flags are supported by the compiler but the actual sanitizer\n-  # libs are missing.\n+  dnl Some compilers (e.g. GCC) require additional libraries like libasan,\n+  dnl libtsan, libubsan, etc. Make sure linking still works with the sanitize\n+  dnl flag. This is a separate check so we can give a better error message when\n+  dnl the sanitize flags are supported by the compiler but the actual sanitizer\n+  dnl libs are missing.\n   AX_CHECK_LINK_FLAG(\n     [[-fsanitize=$use_sanitizers]],\n     [[SANITIZER_LDFLAGS=-fsanitize=$use_sanitizers]],\n@@ -344,9 +344,9 @@ if test \"x$CXXFLAGS_overridden\" = \"xno\"; then\n   AX_CHECK_COMPILE_FLAG([-Wredundant-decls],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wredundant-decls\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Wunused-variable],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wunused-variable\"],,[[$CXXFLAG_WERROR]])\n \n-  ## Some compilers (gcc) ignore unknown -Wno-* options, but warn about all\n-  ## unknown options if any other warning is produced. Test the -Wfoo case, and\n-  ## set the -Wno-foo case if it works.\n+  dnl Some compilers (gcc) ignore unknown -Wno-* options, but warn about all\n+  dnl unknown options if any other warning is produced. Test the -Wfoo case, and\n+  dnl set the -Wno-foo case if it works.\n   AX_CHECK_COMPILE_FLAG([-Wunused-parameter],[NOWARN_CXXFLAGS=\"$NOWARN_CXXFLAGS -Wno-unused-parameter\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Wself-assign],[NOWARN_CXXFLAGS=\"$NOWARN_CXXFLAGS -Wno-self-assign\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Wunused-local-typedef],[NOWARN_CXXFLAGS=\"$NOWARN_CXXFLAGS -Wno-unused-local-typedef\"],,[[$CXXFLAG_WERROR]])\n@@ -361,9 +361,9 @@ enable_shani=no\n \n if test \"x$use_asm\" = \"xyes\"; then\n \n-# Check for optional instruction set support. Enabling these does _not_ imply that all code will\n-# be compiled with them, rather that specific objects/libs may use them after checking for runtime\n-# compatibility.\n+dnl Check for optional instruction set support. Enabling these does _not_ imply that all code will\n+dnl be compiled with them, rather that specific objects/libs may use them after checking for runtime\n+dnl compatibility.\n AX_CHECK_COMPILE_FLAG([-msse4.2],[[SSE42_CXXFLAGS=\"-msse4.2\"]],,[[$CXXFLAG_WERROR]])\n AX_CHECK_COMPILE_FLAG([-msse4.1],[[SSE41_CXXFLAGS=\"-msse4.1\"]],,[[$CXXFLAG_WERROR]])\n AX_CHECK_COMPILE_FLAG([-mavx -mavx2],[[AVX2_CXXFLAGS=\"-mavx -mavx2\"]],,[[$CXXFLAG_WERROR]])\n@@ -506,8 +506,8 @@ case $host in\n      AC_CHECK_LIB([iphlpapi],      [main],, AC_MSG_ERROR(libiphlpapi missing))\n      AC_CHECK_LIB([crypt32],      [main],, AC_MSG_ERROR(libcrypt32 missing))\n \n-     # -static is interpreted by libtool, where it has a different meaning.\n-     # In libtool-speak, it's -all-static.\n+     dnl -static is interpreted by libtool, where it has a different meaning.\n+     dnl In libtool-speak, it's -all-static.\n      AX_CHECK_LINK_FLAG([[-static]],[LIBTOOL_APP_LDFLAGS=\"$LIBTOOL_APP_LDFLAGS -all-static\"])\n \n      AC_PATH_PROG([MAKENSIS], [makensis], none)\n@@ -673,11 +673,11 @@ AC_C_BIGENDIAN\n dnl Check for pthread compile/link requirements\n AX_PTHREAD\n \n-# The following macro will add the necessary defines to bitcoin-config.h, but\n-# they also need to be passed down to any subprojects. Pull the results out of\n-# the cache and add them to CPPFLAGS.\n+dnl The following macro will add the necessary defines to bitcoin-config.h, but\n+dnl they also need to be passed down to any subprojects. Pull the results out of\n+dnl the cache and add them to CPPFLAGS.\n AC_SYS_LARGEFILE\n-# detect POSIX or GNU variant of strerror_r\n+dnl detect POSIX or GNU variant of strerror_r\n AC_FUNC_STRERROR_R\n \n if test x$ac_cv_sys_file_offset_bits != x &&\n@@ -700,12 +700,12 @@ AX_GCC_FUNC_ATTRIBUTE([dllimport])\n \n if test x$use_glibc_compat != xno; then\n \n-  #glibc absorbed clock_gettime in 2.17. librt (its previous location) is safe to link\n-  #in anyway for back-compat.\n+  dnl glibc absorbed clock_gettime in 2.17. librt (its previous location) is safe to link\n+  dnl in anyway for back-compat.\n   AC_CHECK_LIB([rt],[clock_gettime],, AC_MSG_ERROR(librt missing))\n \n-  #__fdelt_chk's params and return type have changed from long unsigned int to long int.\n-  # See which one is present here.\n+  dnl __fdelt_chk's params and return type have changed from long unsigned int to long int.\n+  dnl See which one is present here.\n   AC_MSG_CHECKING(__fdelt_chk type)\n   AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#ifdef _FORTIFY_SOURCE\n                     #undef _FORTIFY_SOURCE\n@@ -741,22 +741,22 @@ if test \"x$enable_gprof\" = xyes; then\n fi\n \n if test x$TARGET_OS != xwindows; then\n-  # All windows code is PIC, forcing it on just adds useless compile warnings\n+  dnl All windows code is PIC, forcing it on just adds useless compile warnings\n   AX_CHECK_COMPILE_FLAG([-fPIC],[PIC_FLAGS=\"-fPIC\"])\n fi\n \n-# All versions of gcc that we commonly use for building are subject to bug\n-# https://gcc.gnu.org/bugzilla/show_bug.cgi?id=90348. To work around that, set\n-# -fstack-reuse=none for all gcc builds. (Only gcc understands this flag)\n+dnl All versions of gcc that we commonly use for building are subject to bug\n+dnl https://gcc.gnu.org/bugzilla/show_bug.cgi?id=90348. To work around that, set\n+dnl -fstack-reuse=none for all gcc builds. (Only gcc understands this flag)\n AX_CHECK_COMPILE_FLAG([-fstack-reuse=none],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fstack-reuse=none\"])\n if test x$use_hardening != xno; then\n   use_hardening=yes\n   AX_CHECK_COMPILE_FLAG([-Wstack-protector],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -Wstack-protector\"])\n   AX_CHECK_COMPILE_FLAG([-fstack-protector-all],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fstack-protector-all\"])\n \n-  # When enable_debug is yes, all optimizations are disabled.\n-  # However, FORTIFY_SOURCE requires that there is some level of optimization, otherwise it does nothing and just creates a compiler warning.\n-  # Since FORTIFY_SOURCE is a no-op without optimizations, do not enable it when enable_debug is yes.\n+  dnl When enable_debug is yes, all optimizations are disabled.\n+  dnl However, FORTIFY_SOURCE requires that there is some level of optimization, otherwise it does nothing and just creates a compiler warning.\n+  dnl Since FORTIFY_SOURCE is a no-op without optimizations, do not enable it when enable_debug is yes.\n   if test x$enable_debug != xyes; then\n     AX_CHECK_PREPROC_FLAG([-D_FORTIFY_SOURCE=2],[\n       AX_CHECK_PREPROC_FLAG([-U_FORTIFY_SOURCE],[\n@@ -788,8 +788,8 @@ fi\n \n AC_CHECK_HEADERS([endian.h sys/endian.h byteswap.h stdio.h stdlib.h unistd.h strings.h sys/types.h sys/stat.h sys/select.h sys/prctl.h sys/sysctl.h vm/vm_param.h sys/vmmeter.h sys/resources.h])\n \n-# FD_ZERO may be dependent on a declaration of memcpy, e.g. in SmartOS\n-# check that it fails to build without memcpy, then that it builds with\n+dnl FD_ZERO may be dependent on a declaration of memcpy, e.g. in SmartOS\n+dnl check that it fails to build without memcpy, then that it builds with\n AC_MSG_CHECKING(FD_ZERO memcpy dependence)\n AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n     #include <cstddef>\n@@ -827,7 +827,7 @@ AC_CHECK_DECLS([getifaddrs, freeifaddrs],,,\n )\n AC_CHECK_DECLS([strnlen])\n \n-# Check for daemon(3), unrelated to --with-daemon (although used by it)\n+dnl Check for daemon(3), unrelated to --with-daemon (although used by it)\n AC_CHECK_DECLS([daemon])\n \n AC_CHECK_DECLS([le16toh, le32toh, le64toh, htole16, htole32, htole64, be16toh, be32toh, be64toh, htobe16, htobe32, htobe64],,,\n@@ -893,19 +893,19 @@ if test \"x$use_thread_local\" = xyes || { test \"x$use_thread_local\" = xauto && te\n     [\n      case $host in\n        *mingw*)\n-          # mingw32's implementation of thread_local has also been shown to behave\n-          # erroneously under concurrent usage; see:\n-          # https://gist.github.com/jamesob/fe9a872051a88b2025b1aa37bfa98605\n+          dnl mingw32's implementation of thread_local has also been shown to behave\n+          dnl erroneously under concurrent usage; see:\n+          dnl https://gist.github.com/jamesob/fe9a872051a88b2025b1aa37bfa98605\n           AC_MSG_RESULT(no)\n           ;;\n         *darwin*)\n-          # TODO enable thread_local on later versions of Darwin where it is\n-          # supported (per https://stackoverflow.com/a/29929949)\n+          dnl TODO enable thread_local on later versions of Darwin where it is\n+          dnl supported (per https://stackoverflow.com/a/29929949)\n           AC_MSG_RESULT(no)\n           ;;\n         *freebsd*)\n-          # FreeBSD's implementation of thread_local is also buggy (per\n-          # https://groups.google.com/d/msg/bsdmailinglist/22ncTZAbDp4/Dii_pII5AwAJ)\n+          dnl FreeBSD's implementation of thread_local is also buggy (per\n+          dnl https://groups.google.com/d/msg/bsdmailinglist/22ncTZAbDp4/Dii_pII5AwAJ)\n           AC_MSG_RESULT(no)\n           ;;\n         *)\n@@ -921,7 +921,7 @@ if test \"x$use_thread_local\" = xyes || { test \"x$use_thread_local\" = xauto && te\n   LDFLAGS=\"$TEMP_LDFLAGS\"\n fi\n \n-# Check for different ways of gathering OS randomness\n+dnl Check for different ways of gathering OS randomness\n AC_MSG_CHECKING(for Linux getrandom syscall)\n AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <unistd.h>\n   #include <sys/syscall.h>\n@@ -975,7 +975,7 @@ AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <stdint.h>\n  [ AC_MSG_RESULT(no)]\n )\n \n-# Check for reduced exports\n+dnl Check for reduced exports\n if test x$use_reduce_exports = xyes; then\n   AX_CHECK_COMPILE_FLAG([-fvisibility=hidden],[RE_CXXFLAGS=\"-fvisibility=hidden\"],\n   [AC_MSG_ERROR([Cannot set default symbol visibility. Use --disable-reduce-exports.])])"
      }
    ]
  }
]