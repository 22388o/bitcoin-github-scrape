[
  {
    "sha": "d87b198b7334317952ca6a1377e25b5c859a1767",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkODdiMTk4YjczMzQzMTc5NTJjYTZhMTM3N2UyNWI1Yzg1OWExNzY3",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2016-04-20T19:38:19Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2016-05-16T04:10:06Z"
      },
      "message": "Remove unneeded feerate param from RelayTransaction/AcceptToMemoryPool.",
      "tree": {
        "sha": "29d9f99f470ad78cd2da6ce4673a6837642336ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/29d9f99f470ad78cd2da6ce4673a6837642336ab"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d87b198b7334317952ca6a1377e25b5c859a1767",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d87b198b7334317952ca6a1377e25b5c859a1767",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d87b198b7334317952ca6a1377e25b5c859a1767",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d87b198b7334317952ca6a1377e25b5c859a1767/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "169d379c98357a17e634f34b5e72033c69f9a7cb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/169d379c98357a17e634f34b5e72033c69f9a7cb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/169d379c98357a17e634f34b5e72033c69f9a7cb"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 17,
      "deletions": 25
    },
    "files": [
      {
        "sha": "09f82312a9b9effdd82ca20586e56b6062628f7c",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 14,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d87b198b7334317952ca6a1377e25b5c859a1767/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d87b198b7334317952ca6a1377e25b5c859a1767/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=d87b198b7334317952ca6a1377e25b5c859a1767",
        "patch": "@@ -1005,7 +1005,7 @@ std::string FormatStateMessage(const CValidationState &state)\n }\n \n bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const CTransaction& tx, bool fLimitFree,\n-                              bool* pfMissingInputs, CFeeRate* txFeeRate, bool fOverrideMempoolLimit, const CAmount& nAbsurdFee,\n+                              bool* pfMissingInputs, bool fOverrideMempoolLimit, const CAmount& nAbsurdFee,\n                               std::vector<uint256>& vHashTxnToUncache)\n {\n     const uint256 hash = tx.GetHash();\n@@ -1170,9 +1170,6 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n \n         CTxMemPoolEntry entry(tx, nFees, GetTime(), dPriority, chainActive.Height(), pool.HasNoInputsOf(tx), inChainInputValue, fSpendsCoinbase, nSigOps, lp);\n         unsigned int nSize = entry.GetTxSize();\n-        if (txFeeRate) {\n-            *txFeeRate = CFeeRate(nFees, nSize);\n-        }\n \n         // Check that the transaction doesn't have an excessive number of\n         // sigops, making it impossible to mine. Since the coinbase transaction\n@@ -1421,10 +1418,10 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n }\n \n bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransaction &tx, bool fLimitFree,\n-                        bool* pfMissingInputs, CFeeRate* txFeeRate, bool fOverrideMempoolLimit, const CAmount nAbsurdFee)\n+                        bool* pfMissingInputs, bool fOverrideMempoolLimit, const CAmount nAbsurdFee)\n {\n     std::vector<uint256> vHashTxToUncache;\n-    bool res = AcceptToMemoryPoolWorker(pool, state, tx, fLimitFree, pfMissingInputs, txFeeRate, fOverrideMempoolLimit, nAbsurdFee, vHashTxToUncache);\n+    bool res = AcceptToMemoryPoolWorker(pool, state, tx, fLimitFree, pfMissingInputs, fOverrideMempoolLimit, nAbsurdFee, vHashTxToUncache);\n     if (!res) {\n         BOOST_FOREACH(const uint256& hashTx, vHashTxToUncache)\n             pcoinsTip->Uncache(hashTx);\n@@ -2651,7 +2648,7 @@ bool static DisconnectTip(CValidationState& state, const CChainParams& chainpara\n         // ignore validation errors in resurrected transactions\n         list<CTransaction> removed;\n         CValidationState stateDummy;\n-        if (tx.IsCoinBase() || !AcceptToMemoryPool(mempool, stateDummy, tx, false, NULL, NULL, true)) {\n+        if (tx.IsCoinBase() || !AcceptToMemoryPool(mempool, stateDummy, tx, false, NULL, true)) {\n             mempool.removeRecursive(tx, removed);\n         } else if (mempool.exists(tx.GetHash())) {\n             vHashUpdate.push_back(tx.GetHash());\n@@ -4956,10 +4953,9 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         pfrom->setAskFor.erase(inv.hash);\n         mapAlreadyAskedFor.erase(inv.hash);\n \n-        CFeeRate txFeeRate = CFeeRate(0);\n-        if (!AlreadyHave(inv) && AcceptToMemoryPool(mempool, state, tx, true, &fMissingInputs, &txFeeRate)) {\n+        if (!AlreadyHave(inv) && AcceptToMemoryPool(mempool, state, tx, true, &fMissingInputs)) {\n             mempool.check(pcoinsTip);\n-            RelayTransaction(tx, txFeeRate);\n+            RelayTransaction(tx);\n             vWorkQueue.push_back(inv.hash);\n \n             LogPrint(\"mempool\", \"AcceptToMemoryPool: peer=%d: accepted %s (poolsz %u txn, %u kB)\\n\",\n@@ -4990,10 +4986,9 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n                     if (setMisbehaving.count(fromPeer))\n                         continue;\n-                    CFeeRate orphanFeeRate = CFeeRate(0);\n-                    if (AcceptToMemoryPool(mempool, stateDummy, orphanTx, true, &fMissingInputs2, &orphanFeeRate)) {\n+                    if (AcceptToMemoryPool(mempool, stateDummy, orphanTx, true, &fMissingInputs2)) {\n                         LogPrint(\"mempool\", \"   accepted orphan tx %s\\n\", orphanHash.ToString());\n-                        RelayTransaction(orphanTx, orphanFeeRate);\n+                        RelayTransaction(orphanTx);\n                         vWorkQueue.push_back(orphanHash);\n                         vEraseQueue.push_back(orphanHash);\n                     }\n@@ -5046,7 +5041,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                 int nDoS = 0;\n                 if (!state.IsInvalid(nDoS) || nDoS == 0) {\n                     LogPrintf(\"Force relaying tx %s from whitelisted peer=%d\\n\", tx.GetHash().ToString(), pfrom->id);\n-                    RelayTransaction(tx, txFeeRate);\n+                    RelayTransaction(tx);\n                 } else {\n                     LogPrintf(\"Not relaying invalid transaction %s from whitelisted peer=%d (%s)\\n\", tx.GetHash().ToString(), pfrom->id, FormatStateMessage(state));\n                 }"
      },
      {
        "sha": "576f73b5f2ba7b8a73362940971d2af74b582c39",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d87b198b7334317952ca6a1377e25b5c859a1767/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d87b198b7334317952ca6a1377e25b5c859a1767/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=d87b198b7334317952ca6a1377e25b5c859a1767",
        "patch": "@@ -295,7 +295,7 @@ void PruneAndFlush();\n \n /** (try to) add transaction to memory pool **/\n bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransaction &tx, bool fLimitFree,\n-                        bool* pfMissingInputs, CFeeRate* txFeeRate, bool fOverrideMempoolLimit=false, const CAmount nAbsurdFee=0);\n+                        bool* pfMissingInputs, bool fOverrideMempoolLimit=false, const CAmount nAbsurdFee=0);\n \n /** Convert CValidationState to a human-readable message for logging */\n std::string FormatStateMessage(const CValidationState &state);"
      },
      {
        "sha": "aa5b47340a3409b9661845d64aba26c500473ff3",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d87b198b7334317952ca6a1377e25b5c859a1767/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d87b198b7334317952ca6a1377e25b5c859a1767/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=d87b198b7334317952ca6a1377e25b5c859a1767",
        "patch": "@@ -2069,7 +2069,7 @@ class CNetCleanup\n instance_of_cnetcleanup;\n \n \n-void RelayTransaction(const CTransaction& tx, CFeeRate feerate)\n+void RelayTransaction(const CTransaction& tx)\n {\n     CInv inv(MSG_TX, tx.GetHash());\n     {"
      },
      {
        "sha": "fd80056c6b8b7f78806d563c58fcf5f36630de79",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d87b198b7334317952ca6a1377e25b5c859a1767/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d87b198b7334317952ca6a1377e25b5c859a1767/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=d87b198b7334317952ca6a1377e25b5c859a1767",
        "patch": "@@ -783,7 +783,7 @@ class CNode\n \n \n class CTransaction;\n-void RelayTransaction(const CTransaction& tx, CFeeRate feerate);\n+void RelayTransaction(const CTransaction& tx);\n \n /** Access to the (IP) address database (peers.dat) */\n class CAddrDB"
      },
      {
        "sha": "bec7ebe55f636e962508702b8ec23c40c11bf77e",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d87b198b7334317952ca6a1377e25b5c859a1767/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d87b198b7334317952ca6a1377e25b5c859a1767/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=d87b198b7334317952ca6a1377e25b5c859a1767",
        "patch": "@@ -819,12 +819,11 @@ UniValue sendrawtransaction(const UniValue& params, bool fHelp)\n     const CCoins* existingCoins = view.AccessCoins(hashTx);\n     bool fHaveMempool = mempool.exists(hashTx);\n     bool fHaveChain = existingCoins && existingCoins->nHeight < 1000000000;\n-    CFeeRate txFeeRate = CFeeRate(0);\n     if (!fHaveMempool && !fHaveChain) {\n         // push to local node and sync with wallets\n         CValidationState state;\n         bool fMissingInputs;\n-        if (!AcceptToMemoryPool(mempool, state, tx, false, &fMissingInputs, &txFeeRate, false, nMaxRawTxFee)) {\n+        if (!AcceptToMemoryPool(mempool, state, tx, false, &fMissingInputs, false, nMaxRawTxFee)) {\n             if (state.IsInvalid()) {\n                 throw JSONRPCError(RPC_TRANSACTION_REJECTED, strprintf(\"%i: %s\", state.GetRejectCode(), state.GetRejectReason()));\n             } else {\n@@ -837,7 +836,7 @@ UniValue sendrawtransaction(const UniValue& params, bool fHelp)\n     } else if (fHaveChain) {\n         throw JSONRPCError(RPC_TRANSACTION_ALREADY_IN_CHAIN, \"transaction already in block chain\");\n     }\n-    RelayTransaction(tx, txFeeRate);\n+    RelayTransaction(tx);\n \n     return hashTx.GetHex();\n }"
      },
      {
        "sha": "c29e30792a2a97343a5b0aafb2407bf2e21f5265",
        "filename": "src/test/txvalidationcache_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d87b198b7334317952ca6a1377e25b5c859a1767/src/test/txvalidationcache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d87b198b7334317952ca6a1377e25b5c859a1767/src/test/txvalidationcache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidationcache_tests.cpp?ref=d87b198b7334317952ca6a1377e25b5c859a1767",
        "patch": "@@ -23,7 +23,7 @@ ToMemPool(CMutableTransaction& tx)\n     LOCK(cs_main);\n \n     CValidationState state;\n-    return AcceptToMemoryPool(mempool, state, tx, false, NULL, NULL, true, 0);\n+    return AcceptToMemoryPool(mempool, state, tx, false, NULL, true, 0);\n }\n \n BOOST_FIXTURE_TEST_CASE(tx_mempool_block_doublespend, TestChain100Setup)"
      },
      {
        "sha": "6b942e29d76c41275c6b22bb27a50615814cdc28",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d87b198b7334317952ca6a1377e25b5c859a1767/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d87b198b7334317952ca6a1377e25b5c859a1767/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=d87b198b7334317952ca6a1377e25b5c859a1767",
        "patch": "@@ -1272,9 +1272,7 @@ bool CWalletTx::RelayWalletTransaction()\n     {\n         if (GetDepthInMainChain() == 0 && !isAbandoned() && InMempool()) {\n             LogPrintf(\"Relaying wtx %s\\n\", GetHash().ToString());\n-            CFeeRate feeRate;\n-            mempool.lookupFeeRate(GetHash(), feeRate);\n-            RelayTransaction((CTransaction)*this, feeRate);\n+            RelayTransaction((CTransaction)*this);\n             return true;\n         }\n     }\n@@ -3331,5 +3329,5 @@ int CMerkleTx::GetBlocksToMaturity() const\n bool CMerkleTx::AcceptToMemoryPool(bool fLimitFree, CAmount nAbsurdFee)\n {\n     CValidationState state;\n-    return ::AcceptToMemoryPool(mempool, state, *this, fLimitFree, NULL, NULL, false, nAbsurdFee);\n+    return ::AcceptToMemoryPool(mempool, state, *this, fLimitFree, NULL, false, nAbsurdFee);\n }"
      }
    ]
  }
]