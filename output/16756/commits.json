[
  {
    "sha": "45eff751c6d07007dabc365dc4c0e6c63e3fe5cf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NWVmZjc1MWM2ZDA3MDA3ZGFiYzM2NWRjNGMwZTZjNjNlM2ZlNWNm",
    "commit": {
      "author": {
        "name": "Martin Zumsande",
        "email": "mzumsande@gmail.com",
        "date": "2019-08-22T17:10:40Z"
      },
      "committer": {
        "name": "Martin Zumsande",
        "email": "mzumsande@gmail.com",
        "date": "2020-06-06T20:30:29Z"
      },
      "message": "Add functional test for P2P eviction logic of inbound peers",
      "tree": {
        "sha": "15e0979586dbffa20d633cd50316a40965546230",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/15e0979586dbffa20d633cd50316a40965546230"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/45eff751c6d07007dabc365dc4c0e6c63e3fe5cf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45eff751c6d07007dabc365dc4c0e6c63e3fe5cf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/45eff751c6d07007dabc365dc4c0e6c63e3fe5cf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45eff751c6d07007dabc365dc4c0e6c63e3fe5cf/comments",
    "author": {
      "login": "mzumsande",
      "id": 48763452,
      "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mzumsande",
      "html_url": "https://github.com/mzumsande",
      "followers_url": "https://api.github.com/users/mzumsande/followers",
      "following_url": "https://api.github.com/users/mzumsande/following{/other_user}",
      "gists_url": "https://api.github.com/users/mzumsande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
      "organizations_url": "https://api.github.com/users/mzumsande/orgs",
      "repos_url": "https://api.github.com/users/mzumsande/repos",
      "events_url": "https://api.github.com/users/mzumsande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mzumsande/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "mzumsande",
      "id": 48763452,
      "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mzumsande",
      "html_url": "https://github.com/mzumsande",
      "followers_url": "https://api.github.com/users/mzumsande/followers",
      "following_url": "https://api.github.com/users/mzumsande/following{/other_user}",
      "gists_url": "https://api.github.com/users/mzumsande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
      "organizations_url": "https://api.github.com/users/mzumsande/orgs",
      "repos_url": "https://api.github.com/users/mzumsande/repos",
      "events_url": "https://api.github.com/users/mzumsande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mzumsande/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4af01b37d40246cd1fdb54719855927e36a36b46",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4af01b37d40246cd1fdb54719855927e36a36b46",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4af01b37d40246cd1fdb54719855927e36a36b46"
      }
    ],
    "stats": {
      "total": 130,
      "additions": 130,
      "deletions": 0
    },
    "files": [
      {
        "sha": "b2b3a89aab303074746febee268efea13a784eaf",
        "filename": "test/functional/p2p_eviction.py",
        "status": "added",
        "additions": 129,
        "deletions": 0,
        "changes": 129,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45eff751c6d07007dabc365dc4c0e6c63e3fe5cf/test/functional/p2p_eviction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45eff751c6d07007dabc365dc4c0e6c63e3fe5cf/test/functional/p2p_eviction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_eviction.py?ref=45eff751c6d07007dabc365dc4c0e6c63e3fe5cf",
        "patch": "@@ -0,0 +1,129 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\" Test node eviction logic\n+\n+When the number of peers has reached the limit of maximum connections,\n+the next connecting inbound peer will trigger the eviction mechanism.\n+We cannot currently test the parts of the eviction logic that are based on\n+address/netgroup since in the current framework, all peers are connecting from\n+the same local address. See Issue #14210 for more info.\n+Therefore, this test is limited to the remaining protection criteria.\n+\"\"\"\n+\n+import time\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mininode import P2PInterface, P2PDataStore\n+from test_framework.util import assert_equal, wait_until\n+from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.messages import CTransaction, FromHex, msg_pong, msg_tx\n+\n+\n+class SlowP2PDataStore(P2PDataStore):\n+    def on_ping(self, message):\n+        time.sleep(0.1)\n+        self.send_message(msg_pong(message.nonce))\n+\n+class SlowP2PInterface(P2PInterface):\n+    def on_ping(self, message):\n+        time.sleep(0.1)\n+        self.send_message(msg_pong(message.nonce))\n+\n+class P2PEvict(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        # The choice of maxconnections=32 results in a maximum of 21 inbound connections\n+        # (32 - 10 outbound - 1 feeler). 20 inbound peers are protected from eviction:\n+        # 4 by netgroup, 4 that sent us blocks, 4 that sent us transactions and 8 via lowest ping time\n+        self.extra_args = [['-maxconnections=32']]\n+\n+    def run_test(self):\n+        protected_peers = set()  # peers that we expect to be protected from eviction\n+        current_peer = -1\n+        node = self.nodes[0]\n+        node.generatetoaddress(101, node.get_deterministic_priv_key().address)\n+\n+        self.log.info(\"Create 4 peers and protect them from eviction by sending us a block\")\n+        for _ in range(4):\n+            block_peer = node.add_p2p_connection(SlowP2PDataStore())\n+            current_peer += 1\n+            block_peer.sync_with_ping()\n+            best_block = node.getbestblockhash()\n+            tip = int(best_block, 16)\n+            best_block_time = node.getblock(best_block)['time']\n+            block = create_block(tip, create_coinbase(node.getblockcount() + 1), best_block_time + 1)\n+            block.solve()\n+            block_peer.send_blocks_and_test([block], node, success=True)\n+            protected_peers.add(current_peer)\n+\n+        self.log.info(\"Create 5 slow-pinging peers, making them eviction candidates\")\n+        for _ in range(5):\n+            node.add_p2p_connection(SlowP2PInterface())\n+            current_peer += 1\n+\n+        self.log.info(\"Create 4 peers and protect them from eviction by sending us a tx\")\n+        for i in range(4):\n+            txpeer = node.add_p2p_connection(SlowP2PInterface())\n+            current_peer += 1\n+            txpeer.sync_with_ping()\n+\n+            prevtx = node.getblock(node.getblockhash(i + 1), 2)['tx'][0]\n+            rawtx = node.createrawtransaction(\n+                inputs=[{'txid': prevtx['txid'], 'vout': 0}],\n+                outputs=[{node.get_deterministic_priv_key().address: 50 - 0.00125}],\n+            )\n+            sigtx = node.signrawtransactionwithkey(\n+                hexstring=rawtx,\n+                privkeys=[node.get_deterministic_priv_key().key],\n+                prevtxs=[{\n+                    'txid': prevtx['txid'],\n+                    'vout': 0,\n+                    'scriptPubKey': prevtx['vout'][0]['scriptPubKey']['hex'],\n+                }],\n+            )['hex']\n+            txpeer.send_message(msg_tx(FromHex(CTransaction(), sigtx)))\n+            protected_peers.add(current_peer)\n+\n+        self.log.info(\"Create 8 peers and protect them from eviction by having faster pings\")\n+        for _ in range(8):\n+            fastpeer = node.add_p2p_connection(P2PInterface())\n+            current_peer += 1\n+            wait_until(lambda: \"ping\" in fastpeer.last_message, timeout=10)\n+\n+        # Make sure by asking the node what the actual min pings are\n+        peerinfo = node.getpeerinfo()\n+        pings = {}\n+        for i in range(len(peerinfo)):\n+            pings[i] = peerinfo[i]['minping'] if 'minping' in peerinfo[i] else 1000000\n+        sorted_pings = sorted(pings.items(), key=lambda x: x[1])\n+\n+        # Usually the 8 fast peers are protected. In rare case of unreliable pings,\n+        # one of the slower peers might have a faster min ping though.\n+        for i in range(8):\n+            protected_peers.add(sorted_pings[i][0])\n+\n+        self.log.info(\"Create peer that triggers the eviction mechanism\")\n+        node.add_p2p_connection(SlowP2PInterface())\n+\n+        # One of the non-protected peers must be evicted. We can't be sure which one because\n+        # 4 peers are protected via netgroup, which is identical for all peers,\n+        # and the eviction mechanism doesn't preserve the order of identical elements.\n+        evicted_peers = []\n+        for i in range(len(node.p2ps)):\n+            if not node.p2ps[i].is_connected:\n+                evicted_peers.append(i)\n+\n+        self.log.info(\"Test that one peer was evicted\")\n+        self.log.debug(\"{} evicted peer: {}\".format(len(evicted_peers), set(evicted_peers)))\n+        assert_equal(len(evicted_peers), 1)\n+\n+        self.log.info(\"Test that no peer expected to be protected was evicted\")\n+        self.log.debug(\"{} protected peers: {}\".format(len(protected_peers), protected_peers))\n+        assert evicted_peers[0] not in protected_peers\n+\n+if __name__ == '__main__':\n+    P2PEvict().main()"
      },
      {
        "sha": "2053d9132102a665f182c91abec173c91670218c",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45eff751c6d07007dabc365dc4c0e6c63e3fe5cf/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45eff751c6d07007dabc365dc4c0e6c63e3fe5cf/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=45eff751c6d07007dabc365dc4c0e6c63e3fe5cf",
        "patch": "@@ -188,6 +188,7 @@\n     'rpc_preciousblock.py',\n     'wallet_importprunedfunds.py',\n     'p2p_leak_tx.py',\n+    'p2p_eviction.py',\n     'rpc_signmessage.py',\n     'rpc_generateblock.py',\n     'wallet_balance.py',"
      }
    ]
  }
]