DrahtBot,2019-08-29 16:24:23,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #17335 (Add test for syncing blocks generated after invalidateblock. by TheBlueMatt)\n\nIf you consider this pull request ",https://github.com/bitcoin/bitcoin/pull/16756#issuecomment-526261271,526261271,
instagibbs,2019-08-30 17:38:51,"TSan build timing out with last output being:\n```\nRemaining jobs: [feature_block.py, p2p_permissions.py]\n```",https://github.com/bitcoin/bitcoin/pull/16756#issuecomment-526687084,526687084,
mzumsande,2019-08-30 18:14:25,"Hmm, do you think this is caused by my changes? I didn't change the tests that timed out and the changes to `net` were meant to only expose the eviction helper functions for testing (that shouldn't be called in these tests because the code had no previous test coverage).",https://github.com/bitcoin/bitcoin/pull/16756#issuecomment-526698298,526698298,
jamesob,2019-08-30 18:18:32,"Concept ACK, will review soon",https://github.com/bitcoin/bitcoin/pull/16756#issuecomment-526699589,526699589,
instagibbs,2019-08-30 18:22:02,"@mzumsande I'll let someone else weigh in on that, I just didn't want to blow away that result in case it was interesting. Restarted that build.",https://github.com/bitcoin/bitcoin/pull/16756#issuecomment-526700754,526700754,
mzumsande,2019-08-30 19:05:44,"@instagibbs Thanks! It happened again, so it does seem to be caused by the changes here. Will look into it and try to reproduce.",https://github.com/bitcoin/bitcoin/pull/16756#issuecomment-526714260,526714260,
practicalswift,2019-08-30 19:12:45,"Concept ACK\n\nThanks for working on this!",https://github.com/bitcoin/bitcoin/pull/16756#issuecomment-526716282,526716282,
mzumsande,2019-08-30 21:01:43,"Found a few recent travis runs from merges where the TSan build timed out in the same way as here:\nhttps://travis-ci.org/bitcoin/bitcoin/builds/578612449\nhttps://travis-ci.org/bitcoin/bitcoin/builds/578444718\nhttps://travis-ci.org/bitcoin/bitcoin/builds/577975853",https://github.com/bitcoin/bitcoin/pull/16756#issuecomment-526748925,526748925,
naumenkogs,2019-09-03 16:22:37,Tested ACK 42a01bf1c15eeb625abdc8bbc0ef9a7852a2b1af,https://github.com/bitcoin/bitcoin/pull/16756#issuecomment-527533192,527533192,
mzumsande,2019-09-03 19:09:19,"Thanks for the review!\nBy the way, the functional test will need a small update once #15759 is merged because of the 2 extra outbound connections:\n`self.extra_args = [['-maxconnections=32']]` instead of `30`",https://github.com/bitcoin/bitcoin/pull/16756#issuecomment-527597221,527597221,
mzumsande,2019-09-07 21:54:13,Rebased and adjusted maxconnections after the merge of #15759 as explained above.,https://github.com/bitcoin/bitcoin/pull/16756#issuecomment-529149843,529149843,
mzumsande,2019-09-07 23:09:58,"The AppVeyor build failed - there seem to be intermittent failures with the new functional test. I can't reproduce so far, but will look into it.",https://github.com/bitcoin/bitcoin/pull/16756#issuecomment-529153912,529153912,
mzumsande,2019-09-17 01:08:34,"I think that my assumption that the artificially slowed down peers never have the lowest minimum ping can be wrong, leading to the intermittent failure. I changed the functional test to use `getpeerinfo` RPC to determine what the 8 nodes with the lowest minimum ping actually are. This should hopefully fix this issue.",https://github.com/bitcoin/bitcoin/pull/16756#issuecomment-532015992,532015992,
mzumsande,2019-09-18 17:03:36," I added those commits temporarily, because the AppVeyor build was failing and I couldn't reproduce this locally and wanted look at the debug.log, which AppVeyor currently doesnt' show due to #16894. I have removed the commits and fixed my mistake (not giving enough time for ping after adding a new peer).\nWill update the PR text as suggested.",https://github.com/bitcoin/bitcoin/pull/16756#issuecomment-532775969,532775969,
jonatack,2019-09-18 18:20:13,"Thanks, I figured the timing of my review wasn't ideal. Looking forward to reviewing this.",https://github.com/bitcoin/bitcoin/pull/16756#issuecomment-532805669,532805669,
laanwj,2019-10-03 05:24:06,"Concept ACK, but I dislike moving internal functionality to `net.h` just for testing.",https://github.com/bitcoin/bitcoin/pull/16756#issuecomment-537792263,537792263,
mzumsande,2019-10-03 17:10:37,"I don't really see a practical way to avoid that.\nI haven't seen any discussions about this in this project, but did some research and the overall consensus on the internet seems to be that internal functionality should not be subject to unit tests (e.g. private members should not be made public just for that).\n\nSo would you or others advise that I should just drop the commit with the unit t",https://github.com/bitcoin/bitcoin/pull/16756#issuecomment-538037704,538037704,
MarcoFalke,2019-10-17 13:09:58,"> So would you or others advise that I should just drop the commit with the unit test?\n\n@sdaftuar Any conceptual thoughts on this or this pull in general?",https://github.com/bitcoin/bitcoin/pull/16756#issuecomment-543167162,543167162,
sdaftuar,2019-10-22 16:49:06,I'm a concept ACK on the p2p test -- that seems great!  However I don't really have an opinion either way on the unit test.,https://github.com/bitcoin/bitcoin/pull/16756#issuecomment-545053626,545053626,
MarcoFalke,2019-10-22 17:22:52,"@mzumsande Can you split up the functional test, please?",https://github.com/bitcoin/bitcoin/pull/16756#issuecomment-545067016,545067016,
mzumsande,2019-10-23 12:43:33,"Ok, I removed the unit test from this PR and edited the PR description accordingly. ",https://github.com/bitcoin/bitcoin/pull/16756#issuecomment-545425176,545425176,
naumenkogs,2020-05-19 00:40:58,tested ACK a0780c5ff6818a0a59afd7657bb98c4954ab06b3,https://github.com/bitcoin/bitcoin/pull/16756#issuecomment-630507897,630507897,
MarcoFalke,2020-05-19 15:55:52,Open-Close to re-run ci. See https://github.com/bitcoin/bitcoin/issues/15847#issuecomment-487591130,https://github.com/bitcoin/bitcoin/pull/16756#issuecomment-630913829,630913829,
mzumsande,2020-05-20 20:06:40,Thanks for the reviews and the suggestions! @jonatack I'll take a close look/push an update early next week!,https://github.com/bitcoin/bitcoin/pull/16756#issuecomment-631697656,631697656,
jonatack,2020-05-21 06:45:41,"No worries, feel free to ignore :)\n\nI wonder if `protected_peers` is a good name, perhaps just `connected_peers`.",https://github.com/bitcoin/bitcoin/pull/16756#issuecomment-631915629,631915629,
naumenkogs,2020-05-22 06:54:31,">I wonder if protected_peers is a good name, perhaps just connected_peers.\n\nI would say all peers by default are connected, so this is not very helpful. Protected is a subset of connected. In addition, protected terminology was used for a long time, so I'd leave it as is.",https://github.com/bitcoin/bitcoin/pull/16756#issuecomment-632523688,632523688,
jonatack,2020-05-22 07:15:04,"> protected terminology was used for a long time\n\nThanks @naumenkogs, TIL!\n\n",https://github.com/bitcoin/bitcoin/pull/16756#issuecomment-632534110,632534110,
mzumsande,2020-05-28 22:44:39,"@jonatack Thanks again - I took several of your suggestions (some slightly adapted) and pushed an update (just preferred not to split the asserts/logging from the rest)\n\nYes, `protected_peers` are the subset of peers that are expected not to be evicted by our node (because they sent us a block, tx, have fast pings) - otherwise the test would fail.",https://github.com/bitcoin/bitcoin/pull/16756#issuecomment-635647232,635647232,
naumenkogs,2020-05-29 13:46:15,Tested ACK 3758af7,https://github.com/bitcoin/bitcoin/pull/16756#issuecomment-635981115,635981115,
jnewbery,2020-05-29 14:00:11,We'll cover this in review club on 2020-06-03: https://bitcoincore.reviews/16756.html,https://github.com/bitcoin/bitcoin/pull/16756#issuecomment-635987984,635987984,
andrewtoth,2020-06-02 16:58:52,Tested ACK 3758af78564e9a0e059f38c11e941d68be192fb6,https://github.com/bitcoin/bitcoin/pull/16756#issuecomment-637681306,637681306,
rajarshimaitra,2020-06-03 06:36:52,"Not specific to this PR, but related to the eviction logic code.\nhttps://github.com/bitcoin/bitcoin/blob/657b82cef0e8e8695fc189d013a4353bdbebb041/src/net.cpp#L932-L935\nThe `naMostConnections` is storing the netgroup key with most number of connections. Why the variable name is like that? First i thought its a typo, but then it seems the `a` is simply added to distinguish it from `nMostConnecti",https://github.com/bitcoin/bitcoin/pull/16756#issuecomment-637988397,637988397,
instagibbs,2020-06-03 14:57:43,@rajarshimaitra feel free to open a PR on that if you have ideas on making the code more self-explanatory :+1: ,https://github.com/bitcoin/bitcoin/pull/16756#issuecomment-638253322,638253322,
jonatack,2020-06-03 15:30:57,"ACK 3758af78564e9a0e059f38c11e941d68be192fb6 thanks for adding useful test coverage. Reviewed/tested, re-checked the coherence with `CConnman::AttemptToEvictConnection()`, printed the peers at each step, and added additional assertions. I reckon the code could be shorter, but it's fine for now.\n\nThanks also for your patience and taking into consideration all the feedback.",https://github.com/bitcoin/bitcoin/pull/16756#issuecomment-638273644,638273644,
jnewbery,2020-06-03 15:43:03,"I have a few style nits which I won't leave inline in order not to distract this PR from functional review:\n\n- L49: at least 2 spaces before inline comments (https://www.python.org/dev/peps/pep-0008/#inline-comments)\n- L78: spaces around operators (https://www.python.org/dev/peps/pep-0008/#other-recommendations)\n- L114: no spaces around keyword argument (https://www.python.org/dev/peps/pep",https://github.com/bitcoin/bitcoin/pull/16756#issuecomment-638281076,638281076,
jonatack,2020-06-03 15:53:52,"Building on John's style points, from `test/functional/README.md`: *When calling RPCs with several arguments, consider using named keyword arguments instead of positional arguments to make the intent of the call clear to readers.*\n\nThe variables used as positional args in this test are sufficiently well-named that I didn't bring it up, but it's good to know.",https://github.com/bitcoin/bitcoin/pull/16756#issuecomment-638287545,638287545,
mzumsande,2020-06-06 20:33:13,I just pushed an update that should address all outstanding suggestions from review.,https://github.com/bitcoin/bitcoin/pull/16756#issuecomment-640114700,640114700,
jonatack,2020-06-07 10:06:59,"Looking at it again, this test can be much simpler. One example: the `current_peer` counter and the `protected_peers` set building can all be removed in favor of just checking that the evicted peer is one of the slow-pinging peers. (After all this review, I may propose the simplifications as a follow-up.)\n\nACK 45eff751c6d07007dabc365dc4c0e6c63e3fe5cf",https://github.com/bitcoin/bitcoin/pull/16756#issuecomment-640190229,640190229,
naumenkogs,2020-06-09 15:09:55,Tested ACK 45eff75,https://github.com/bitcoin/bitcoin/pull/16756#issuecomment-641360134,641360134,
fjahr,2020-06-12 13:09:21,"re-ACK 45eff751c6d07007dabc365dc4c0e6c63e3fe5cf\n\nChanges since my last reviews were minor improvements addressing nit review comments. ",https://github.com/bitcoin/bitcoin/pull/16756#issuecomment-643261745,643261745,
andrewtoth,2020-06-12 15:21:14,re-ACK 45eff751c6d07007dabc365dc4c0e6c63e3fe5cf,https://github.com/bitcoin/bitcoin/pull/16756#issuecomment-643331593,643331593,
practicalswift,2019-09-29 15:09:27,"Should be ""mechanism"" :)",https://github.com/bitcoin/bitcoin/pull/16756#discussion_r329357386,329357386,test/functional/p2p_eviction.py
practicalswift,2019-09-29 15:09:59,"Should be ""ordered"" :)",https://github.com/bitcoin/bitcoin/pull/16756#discussion_r329357407,329357407,src/test/net_tests.cpp
mzumsande,2019-09-30 16:56:37,"Thanks, fixed both typos.",https://github.com/bitcoin/bitcoin/pull/16756#discussion_r329683447,329683447,src/test/net_tests.cpp
naumenkogs,2020-05-18 22:51:55,"Although I understand how it works, this construction takes a little bit of cognitive effort.\n\nFine for this one, but I suggest using something explicit for the next PRs. Simple `i` would work here, and below, well, you'd have to introduce `i + N(4) + M(5)` or something, but I think it would be easier to comprehend.",https://github.com/bitcoin/bitcoin/pull/16756#discussion_r426934352,426934352,test/functional/p2p_eviction.py
glozow,2020-05-20 01:23:13,After #18638 can this use `setmocktime` instead of `sleep`?,https://github.com/bitcoin/bitcoin/pull/16756#discussion_r427689277,427689277,test/functional/p2p_eviction.py
naumenkogs,2020-05-20 01:33:19,"I don't think so. Logically this sleep should happen on the mininode side (of couple particular mininodes, not all).\nUsing mock time would sleep for *all* mininodes, but that doesn't satisfy the goal of the test.\n\nUnless the mininodes in the test are created in a very particular order, which would probably complicate things.",https://github.com/bitcoin/bitcoin/pull/16756#discussion_r427692165,427692165,test/functional/p2p_eviction.py
glozow,2020-05-20 01:37:52,"Ah, thanks for the info!",https://github.com/bitcoin/bitcoin/pull/16756#discussion_r427693372,427693372,test/functional/p2p_eviction.py
mzumsande,2020-05-28 22:24:25,"I introduced a variable `current_peer`, hopefully that makes it easier to read.",https://github.com/bitcoin/bitcoin/pull/16756#discussion_r432157593,432157593,test/functional/p2p_eviction.py
rajarshimaitra,2020-06-02 09:36:15,Is it possible to combine `pings` initialization with the actual filling of the list with `minping` data (happening few lines later) together? Any specific reason why they are separated by the `add_p2p_connection`? ,https://github.com/bitcoin/bitcoin/pull/16756#discussion_r433748047,433748047,test/functional/p2p_eviction.py
rajarshimaitra,2020-06-02 10:08:42,"At this stage, the total number of `protected_peers` is coming out to be 15, which actually should be 16 (4 blocks, 4 txs, 8 fast ping)?\nThis is probably happening because the previous `protected_peers.add(current_peer)` added the peers with `index + 1`, (`current_peer` is `1` for peer `0`), and `protected_peers.add(sorted_pings[i][0])` is adding them by peer index. This is causing an overlap of",https://github.com/bitcoin/bitcoin/pull/16756#discussion_r433766480,433766480,test/functional/p2p_eviction.py
rajarshimaitra,2020-06-02 10:24:08,"""20 inbounds peers are protected from eviction."" I am not being able to figure the rationale behind this number 20. ",https://github.com/bitcoin/bitcoin/pull/16756#discussion_r433774397,433774397,test/functional/p2p_eviction.py
rajarshimaitra,2020-06-02 10:32:32,"This is coming a little confusing for me, which 4 peers are protected via netgroup? If i understand correctly for functional testing all the peers are from same netgroup. So there's no way to differentiate between them via IP addresses. Is this what this comment is trying to convey? ",https://github.com/bitcoin/bitcoin/pull/16756#discussion_r433778562,433778562,test/functional/p2p_eviction.py
fjahr,2020-06-02 12:20:24,nit: double new-line,https://github.com/bitcoin/bitcoin/pull/16756#discussion_r433832438,433832438,test/functional/p2p_eviction.py
jonatack,2020-06-02 13:03:34,"style nit: assertion here is about exclusion, not equality; I think the idiomatic assertion in the tests codebase would be\n```suggestion\n        assert self.evicted_peers[0] not in self.protected_peers\n```",https://github.com/bitcoin/bitcoin/pull/16756#discussion_r433857615,433857615,test/functional/p2p_eviction.py
jonatack,2020-06-02 13:05:19,"In case of assertion failure, these debug logs would be helpful to see. I'd suggest placing them before the assertions here and line 133.",https://github.com/bitcoin/bitcoin/pull/16756#discussion_r433858693,433858693,test/functional/p2p_eviction.py
jonatack,2020-06-02 13:10:16,"Is this needed?\n```diff\n-    def setup_network(self):\n-        self.setup_nodes()\n-\n```",https://github.com/bitcoin/bitcoin/pull/16756#discussion_r433861797,433861797,test/functional/p2p_eviction.py
jonatack,2020-06-02 13:14:45,"I think it would be good to separate the lengthy setup from the tests, per https://github.com/jonatack/bitcoin/commit/c9e96a1, and/or at least add logging at the start of the setup:\n```diff\n    def run_test(self):\n+        self.log.info(""Set up test peer network"")\n+        self.setup_test_peers()\n```\nThe test takes a bit of time to get started, and logging provides useful feedback on h",https://github.com/bitcoin/bitcoin/pull/16756#discussion_r433864763,433864763,test/functional/p2p_eviction.py
andrewtoth,2020-06-02 16:34:13,"These single line comments above each `for` block might be more helpful as logs. Rationale https://github.com/bitcoin/bitcoin/blob/master/test/functional/README.md#general-test-writing-advice\n```suggestion\n        self.log.info(""Create the first 4 peers and protect them from eviction by sending us a block."")\n```",https://github.com/bitcoin/bitcoin/pull/16756#discussion_r434016124,434016124,test/functional/p2p_eviction.py
andrewtoth,2020-06-02 16:42:32,"I believe the 20 that are protected are:\n4 - netgroup (cannot be tested in this framework)\n4 - sent us blocks first\n4 - sent us transactions first\n8 - lowest ping time\n________________\n20 - total protected",https://github.com/bitcoin/bitcoin/pull/16756#discussion_r434021531,434021531,test/functional/p2p_eviction.py
andrewtoth,2020-06-02 16:46:57,Perhaps this would be helpful to clarify in the comments.,https://github.com/bitcoin/bitcoin/pull/16756#discussion_r434024208,434024208,test/functional/p2p_eviction.py
andrewtoth,2020-06-02 16:53:36,I believe these comments above try to convey this behaviour https://github.com/bitcoin/bitcoin/pull/16756/files#diff-96b7763a95e093580bd4507bce07ff22R10-R12,https://github.com/bitcoin/bitcoin/pull/16756#discussion_r434028341,434028341,test/functional/p2p_eviction.py
mzumsande,2020-06-02 17:32:51,"I think it is impossible to say which peers are protected via netgroup because it can vary from run to run! \nSince A) this is the first check in `AttemptToEvictConnection()`  B) all test nodes have identical netgroup and C) `std::sort` does not guarantee to preserve the order of identical elements, this step should protect 4 arbitrary peers in the test. \nIf, for example, all 4 block-sending pe",https://github.com/bitcoin/bitcoin/pull/16756#discussion_r434051903,434051903,test/functional/p2p_eviction.py
mzumsande,2020-06-02 17:36:13,"Nice catch, I introduced this bug in the last push! Will fix later today.",https://github.com/bitcoin/bitcoin/pull/16756#discussion_r434053946,434053946,test/functional/p2p_eviction.py
mzumsande,2020-06-02 22:13:15,"This is probably not material, but the reason is that I wanted to trigger the eviction mechanism immediately after the `getpeerinfo` call, so that the node does not get time to exchange additional pings with its peers while the test does other things. ",https://github.com/bitcoin/bitcoin/pull/16756#discussion_r434204327,434204327,test/functional/p2p_eviction.py
mzumsande,2020-06-02 23:57:23,done,https://github.com/bitcoin/bitcoin/pull/16756#discussion_r434237203,434237203,test/functional/p2p_eviction.py
mzumsande,2020-06-02 23:57:34,done.,https://github.com/bitcoin/bitcoin/pull/16756#discussion_r434237232,434237232,test/functional/p2p_eviction.py
mzumsande,2020-06-02 23:59:37,"The `setup_network` override is not needed imo, removed - thanks!\n\nI added several logging messages for the initial phase (as also suggested below).\n \nI am still a bit hesitant with respect to the setup network / test separation, because I don't really view most of it as network setup - in the network setup phase, one node is created, and then in the second phase, we simulate inbound peers",https://github.com/bitcoin/bitcoin/pull/16756#discussion_r434237802,434237802,test/functional/p2p_eviction.py
mzumsande,2020-06-02 23:59:49,"Done, thanks!",https://github.com/bitcoin/bitcoin/pull/16756#discussion_r434237836,434237836,test/functional/p2p_eviction.py
mzumsande,2020-06-03 00:08:00,fixed.,https://github.com/bitcoin/bitcoin/pull/16756#discussion_r434240038,434240038,test/functional/p2p_eviction.py
mzumsande,2020-06-03 00:12:12,I fixed the initialization of `current_peer`  (so that  having `current_peer=0` for peer `0`).,https://github.com/bitcoin/bitcoin/pull/16756#discussion_r434241153,434241153,test/functional/p2p_eviction.py
mzumsande,2020-06-03 00:13:56,"Done, I expanded that comment.",https://github.com/bitcoin/bitcoin/pull/16756#discussion_r434241604,434241604,test/functional/p2p_eviction.py
rajarshimaitra,2020-06-03 05:27:35,"Thanks @andrewtoth, that helped a lot. ",https://github.com/bitcoin/bitcoin/pull/16756#discussion_r434315745,434315745,test/functional/p2p_eviction.py
jonatack,2020-06-03 14:35:21,"Thanks for adding the additional logging; it's great.\n\nI'm unsure but suspect one would see `connect_node` statements in the tests if the override was needed.\n\nIf you prefer to keep the setup and the assertions all in one block, then no need for `self.protected_peers` and `self.evicted_peers` to be class variables; that was done in order to separate the network setup from the tests/asserti",https://github.com/bitcoin/bitcoin/pull/16756#discussion_r434616055,434616055,test/functional/p2p_eviction.py
jonatack,2020-06-03 14:41:39,"For reference, see `CConnman::AttemptToEvictConnection()` in `src/net.cpp`.",https://github.com/bitcoin/bitcoin/pull/16756#discussion_r434620675,434620675,test/functional/p2p_eviction.py
jonatack,2020-06-03 14:45:28,"Yes, the only certainty we have regarding the evicted peers in this test is that it will be one of the zero-indexed peers in the set of {4, 5, 6, 7, 8} e.g. the slow-pinging ones.",https://github.com/bitcoin/bitcoin/pull/16756#discussion_r434623394,434623394,test/functional/p2p_eviction.py
jnewbery,2020-06-03 15:59:43,"nit: `protected_peers` can be a local variable rather than a class member, since it's only ever used in this function.",https://github.com/bitcoin/bitcoin/pull/16756#discussion_r434678043,434678043,test/functional/p2p_eviction.py
jnewbery,2020-06-03 16:02:25,nit: no need for custom timeout here.,https://github.com/bitcoin/bitcoin/pull/16756#discussion_r434680681,434680681,test/functional/p2p_eviction.py
jnewbery,2020-06-03 16:04:10,"nit: as above, no need for custom timeout",https://github.com/bitcoin/bitcoin/pull/16756#discussion_r434682439,434682439,test/functional/p2p_eviction.py
jnewbery,2020-06-03 23:43:37,"I wondered the same thing. It's confusing that you do some of the processing before adding the new peer (`pings = [[...`) and some after  (`for i in range(...`). I think you should do all the processing before adding the new connection, since it'll take very little time, and the chance of there being another ping in between is ~zero.\n\nIf you do keep this ordering, I think it's worth a comment ",https://github.com/bitcoin/bitcoin/pull/16756#discussion_r434915566,434915566,test/functional/p2p_eviction.py
jnewbery,2020-06-03 23:45:30,"Using a list of lists like this is a slightly confusing structure. Consider using a dictionary, and then sorting the `dict.items()` items by value.",https://github.com/bitcoin/bitcoin/pull/16756#discussion_r434916042,434916042,test/functional/p2p_eviction.py
jnewbery,2020-06-03 23:49:10,"Consider removing these criteria from the file-level doc string and just relying on the comments below. If the criteria ever change, it's likely that this docstring will not get updated and will become outdated.",https://github.com/bitcoin/bitcoin/pull/16756#discussion_r434917055,434917055,test/functional/p2p_eviction.py
mzumsande,2020-06-06 20:17:15,I changed the ordering since the probability of furthers pings is extremely low.,https://github.com/bitcoin/bitcoin/pull/16756#discussion_r436297654,436297654,test/functional/p2p_eviction.py
mzumsande,2020-06-06 20:18:56,"Done, made them local again.",https://github.com/bitcoin/bitcoin/pull/16756#discussion_r436297761,436297761,test/functional/p2p_eviction.py
mzumsande,2020-06-06 20:20:16,done,https://github.com/bitcoin/bitcoin/pull/16756#discussion_r436297837,436297837,test/functional/p2p_eviction.py
mzumsande,2020-06-06 20:36:17,Changed it to a dictionary.,https://github.com/bitcoin/bitcoin/pull/16756#discussion_r436298858,436298858,test/functional/p2p_eviction.py
andrewtoth,2020-06-12 15:20:29,"nit\n```suggestion\n# Copyright (c) 2020 The Bitcoin Core developers\n```",https://github.com/bitcoin/bitcoin/pull/16756#discussion_r439484111,439484111,test/functional/p2p_eviction.py
