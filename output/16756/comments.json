[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/526261271",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#issuecomment-526261271",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16756",
    "id": 526261271,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyNjI2MTI3MQ==",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-29T16:24:23Z",
    "updated_at": "2020-02-11T22:26:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #17335 (Add test for syncing blocks generated after invalidateblock. by TheBlueMatt)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/526261271/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/526687084",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#issuecomment-526687084",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16756",
    "id": 526687084,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyNjY4NzA4NA==",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-30T17:38:51Z",
    "updated_at": "2019-08-30T17:38:51Z",
    "author_association": "MEMBER",
    "body": "TSan build timing out with last output being:\r\n```\r\nRemaining jobs: [feature_block.py, p2p_permissions.py]\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/526687084/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/526698298",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#issuecomment-526698298",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16756",
    "id": 526698298,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyNjY5ODI5OA==",
    "user": {
      "login": "mzumsande",
      "id": 48763452,
      "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mzumsande",
      "html_url": "https://github.com/mzumsande",
      "followers_url": "https://api.github.com/users/mzumsande/followers",
      "following_url": "https://api.github.com/users/mzumsande/following{/other_user}",
      "gists_url": "https://api.github.com/users/mzumsande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
      "organizations_url": "https://api.github.com/users/mzumsande/orgs",
      "repos_url": "https://api.github.com/users/mzumsande/repos",
      "events_url": "https://api.github.com/users/mzumsande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mzumsande/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-30T18:14:25Z",
    "updated_at": "2019-08-30T18:14:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hmm, do you think this is caused by my changes? I didn't change the tests that timed out and the changes to `net` were meant to only expose the eviction helper functions for testing (that shouldn't be called in these tests because the code had no previous test coverage).",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/526698298/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/526699589",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#issuecomment-526699589",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16756",
    "id": 526699589,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyNjY5OTU4OQ==",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-30T18:18:32Z",
    "updated_at": "2019-08-30T18:18:32Z",
    "author_association": "MEMBER",
    "body": "Concept ACK, will review soon",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/526699589/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/526700754",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#issuecomment-526700754",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16756",
    "id": 526700754,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyNjcwMDc1NA==",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-30T18:22:02Z",
    "updated_at": "2019-08-30T18:22:02Z",
    "author_association": "MEMBER",
    "body": "@mzumsande I'll let someone else weigh in on that, I just didn't want to blow away that result in case it was interesting. Restarted that build.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/526700754/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/526714260",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#issuecomment-526714260",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16756",
    "id": 526714260,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyNjcxNDI2MA==",
    "user": {
      "login": "mzumsande",
      "id": 48763452,
      "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mzumsande",
      "html_url": "https://github.com/mzumsande",
      "followers_url": "https://api.github.com/users/mzumsande/followers",
      "following_url": "https://api.github.com/users/mzumsande/following{/other_user}",
      "gists_url": "https://api.github.com/users/mzumsande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
      "organizations_url": "https://api.github.com/users/mzumsande/orgs",
      "repos_url": "https://api.github.com/users/mzumsande/repos",
      "events_url": "https://api.github.com/users/mzumsande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mzumsande/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-30T19:05:44Z",
    "updated_at": "2019-08-30T19:05:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "@instagibbs Thanks! It happened again, so it does seem to be caused by the changes here. Will look into it and try to reproduce.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/526714260/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/526716282",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#issuecomment-526716282",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16756",
    "id": 526716282,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyNjcxNjI4Mg==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-30T19:12:45Z",
    "updated_at": "2019-08-30T19:12:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "Concept ACK\r\n\r\nThanks for working on this!",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/526716282/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/526748925",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#issuecomment-526748925",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16756",
    "id": 526748925,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyNjc0ODkyNQ==",
    "user": {
      "login": "mzumsande",
      "id": 48763452,
      "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mzumsande",
      "html_url": "https://github.com/mzumsande",
      "followers_url": "https://api.github.com/users/mzumsande/followers",
      "following_url": "https://api.github.com/users/mzumsande/following{/other_user}",
      "gists_url": "https://api.github.com/users/mzumsande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
      "organizations_url": "https://api.github.com/users/mzumsande/orgs",
      "repos_url": "https://api.github.com/users/mzumsande/repos",
      "events_url": "https://api.github.com/users/mzumsande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mzumsande/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-30T21:01:43Z",
    "updated_at": "2019-08-30T21:01:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "Found a few recent travis runs from merges where the TSan build timed out in the same way as here:\r\nhttps://travis-ci.org/bitcoin/bitcoin/builds/578612449\r\nhttps://travis-ci.org/bitcoin/bitcoin/builds/578444718\r\nhttps://travis-ci.org/bitcoin/bitcoin/builds/577975853",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/526748925/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/527533192",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#issuecomment-527533192",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16756",
    "id": 527533192,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyNzUzMzE5Mg==",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?u=06eb9ae4f9b3f954056098860decccbf1340e40f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-03T16:22:37Z",
    "updated_at": "2019-09-03T16:22:37Z",
    "author_association": "MEMBER",
    "body": "Tested ACK 42a01bf1c15eeb625abdc8bbc0ef9a7852a2b1af",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/527533192/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/527597221",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#issuecomment-527597221",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16756",
    "id": 527597221,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyNzU5NzIyMQ==",
    "user": {
      "login": "mzumsande",
      "id": 48763452,
      "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mzumsande",
      "html_url": "https://github.com/mzumsande",
      "followers_url": "https://api.github.com/users/mzumsande/followers",
      "following_url": "https://api.github.com/users/mzumsande/following{/other_user}",
      "gists_url": "https://api.github.com/users/mzumsande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
      "organizations_url": "https://api.github.com/users/mzumsande/orgs",
      "repos_url": "https://api.github.com/users/mzumsande/repos",
      "events_url": "https://api.github.com/users/mzumsande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mzumsande/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-03T19:09:19Z",
    "updated_at": "2019-09-03T19:09:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for the review!\r\nBy the way, the functional test will need a small update once #15759 is merged because of the 2 extra outbound connections:\r\n`self.extra_args = [['-maxconnections=32']]` instead of `30`",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/527597221/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/529149843",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#issuecomment-529149843",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16756",
    "id": 529149843,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyOTE0OTg0Mw==",
    "user": {
      "login": "mzumsande",
      "id": 48763452,
      "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mzumsande",
      "html_url": "https://github.com/mzumsande",
      "followers_url": "https://api.github.com/users/mzumsande/followers",
      "following_url": "https://api.github.com/users/mzumsande/following{/other_user}",
      "gists_url": "https://api.github.com/users/mzumsande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
      "organizations_url": "https://api.github.com/users/mzumsande/orgs",
      "repos_url": "https://api.github.com/users/mzumsande/repos",
      "events_url": "https://api.github.com/users/mzumsande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mzumsande/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-07T21:54:13Z",
    "updated_at": "2019-09-07T21:54:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "Rebased and adjusted maxconnections after the merge of #15759 as explained above.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/529149843/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/529153912",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#issuecomment-529153912",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16756",
    "id": 529153912,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyOTE1MzkxMg==",
    "user": {
      "login": "mzumsande",
      "id": 48763452,
      "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mzumsande",
      "html_url": "https://github.com/mzumsande",
      "followers_url": "https://api.github.com/users/mzumsande/followers",
      "following_url": "https://api.github.com/users/mzumsande/following{/other_user}",
      "gists_url": "https://api.github.com/users/mzumsande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
      "organizations_url": "https://api.github.com/users/mzumsande/orgs",
      "repos_url": "https://api.github.com/users/mzumsande/repos",
      "events_url": "https://api.github.com/users/mzumsande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mzumsande/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-07T23:09:58Z",
    "updated_at": "2019-09-07T23:09:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "The AppVeyor build failed - there seem to be intermittent failures with the new functional test. I can't reproduce so far, but will look into it.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/529153912/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/532015992",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#issuecomment-532015992",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16756",
    "id": 532015992,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzMjAxNTk5Mg==",
    "user": {
      "login": "mzumsande",
      "id": 48763452,
      "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mzumsande",
      "html_url": "https://github.com/mzumsande",
      "followers_url": "https://api.github.com/users/mzumsande/followers",
      "following_url": "https://api.github.com/users/mzumsande/following{/other_user}",
      "gists_url": "https://api.github.com/users/mzumsande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
      "organizations_url": "https://api.github.com/users/mzumsande/orgs",
      "repos_url": "https://api.github.com/users/mzumsande/repos",
      "events_url": "https://api.github.com/users/mzumsande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mzumsande/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-17T01:08:34Z",
    "updated_at": "2019-09-17T01:09:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think that my assumption that the artificially slowed down peers never have the lowest minimum ping can be wrong, leading to the intermittent failure. I changed the functional test to use `getpeerinfo` RPC to determine what the 8 nodes with the lowest minimum ping actually are. This should hopefully fix this issue.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/532015992/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/532775969",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#issuecomment-532775969",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16756",
    "id": 532775969,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzMjc3NTk2OQ==",
    "user": {
      "login": "mzumsande",
      "id": 48763452,
      "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mzumsande",
      "html_url": "https://github.com/mzumsande",
      "followers_url": "https://api.github.com/users/mzumsande/followers",
      "following_url": "https://api.github.com/users/mzumsande/following{/other_user}",
      "gists_url": "https://api.github.com/users/mzumsande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
      "organizations_url": "https://api.github.com/users/mzumsande/orgs",
      "repos_url": "https://api.github.com/users/mzumsande/repos",
      "events_url": "https://api.github.com/users/mzumsande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mzumsande/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-18T17:03:36Z",
    "updated_at": "2019-09-18T17:03:36Z",
    "author_association": "CONTRIBUTOR",
    "body": " I added those commits temporarily, because the AppVeyor build was failing and I couldn't reproduce this locally and wanted look at the debug.log, which AppVeyor currently doesnt' show due to #16894. I have removed the commits and fixed my mistake (not giving enough time for ping after adding a new peer).\r\nWill update the PR text as suggested.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/532775969/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/532805669",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#issuecomment-532805669",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16756",
    "id": 532805669,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzMjgwNTY2OQ==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-18T18:20:13Z",
    "updated_at": "2019-09-18T18:20:13Z",
    "author_association": "MEMBER",
    "body": "Thanks, I figured the timing of my review wasn't ideal. Looking forward to reviewing this.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/532805669/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/537792263",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#issuecomment-537792263",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16756",
    "id": 537792263,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzNzc5MjI2Mw==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-03T05:24:06Z",
    "updated_at": "2019-10-03T05:24:06Z",
    "author_association": "MEMBER",
    "body": "Concept ACK, but I dislike moving internal functionality to `net.h` just for testing.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/537792263/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/538037704",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#issuecomment-538037704",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16756",
    "id": 538037704,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzODAzNzcwNA==",
    "user": {
      "login": "mzumsande",
      "id": 48763452,
      "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mzumsande",
      "html_url": "https://github.com/mzumsande",
      "followers_url": "https://api.github.com/users/mzumsande/followers",
      "following_url": "https://api.github.com/users/mzumsande/following{/other_user}",
      "gists_url": "https://api.github.com/users/mzumsande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
      "organizations_url": "https://api.github.com/users/mzumsande/orgs",
      "repos_url": "https://api.github.com/users/mzumsande/repos",
      "events_url": "https://api.github.com/users/mzumsande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mzumsande/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-03T17:10:37Z",
    "updated_at": "2019-10-03T17:10:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "I don't really see a practical way to avoid that.\r\nI haven't seen any discussions about this in this project, but did some research and the overall consensus on the internet seems to be that internal functionality should not be subject to unit tests (e.g. private members should not be made public just for that).\r\n\r\nSo would you or others advise that I should just drop the commit with the unit test?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/538037704/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/543167162",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#issuecomment-543167162",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16756",
    "id": 543167162,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0MzE2NzE2Mg==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-17T13:09:58Z",
    "updated_at": "2019-10-17T13:09:58Z",
    "author_association": "MEMBER",
    "body": "> So would you or others advise that I should just drop the commit with the unit test?\r\n\r\n@sdaftuar Any conceptual thoughts on this or this pull in general?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/543167162/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/545053626",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#issuecomment-545053626",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16756",
    "id": 545053626,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0NTA1MzYyNg==",
    "user": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-22T16:49:06Z",
    "updated_at": "2019-10-22T16:49:06Z",
    "author_association": "MEMBER",
    "body": "I'm a concept ACK on the p2p test -- that seems great!  However I don't really have an opinion either way on the unit test.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/545053626/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/545067016",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#issuecomment-545067016",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16756",
    "id": 545067016,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0NTA2NzAxNg==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-22T17:22:52Z",
    "updated_at": "2019-10-22T17:22:52Z",
    "author_association": "MEMBER",
    "body": "@mzumsande Can you split up the functional test, please?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/545067016/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/545425176",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#issuecomment-545425176",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16756",
    "id": 545425176,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0NTQyNTE3Ng==",
    "user": {
      "login": "mzumsande",
      "id": 48763452,
      "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mzumsande",
      "html_url": "https://github.com/mzumsande",
      "followers_url": "https://api.github.com/users/mzumsande/followers",
      "following_url": "https://api.github.com/users/mzumsande/following{/other_user}",
      "gists_url": "https://api.github.com/users/mzumsande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
      "organizations_url": "https://api.github.com/users/mzumsande/orgs",
      "repos_url": "https://api.github.com/users/mzumsande/repos",
      "events_url": "https://api.github.com/users/mzumsande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mzumsande/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-23T12:43:33Z",
    "updated_at": "2019-10-23T12:43:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "Ok, I removed the unit test from this PR and edited the PR description accordingly. ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/545425176/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/630507897",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#issuecomment-630507897",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16756",
    "id": 630507897,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMDUwNzg5Nw==",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?u=06eb9ae4f9b3f954056098860decccbf1340e40f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-19T00:40:58Z",
    "updated_at": "2020-05-19T00:40:58Z",
    "author_association": "MEMBER",
    "body": "tested ACK a0780c5ff6818a0a59afd7657bb98c4954ab06b3",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/630507897/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/630913829",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#issuecomment-630913829",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16756",
    "id": 630913829,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMDkxMzgyOQ==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-19T15:55:52Z",
    "updated_at": "2020-05-19T15:55:52Z",
    "author_association": "MEMBER",
    "body": "Open-Close to re-run ci. See https://github.com/bitcoin/bitcoin/issues/15847#issuecomment-487591130",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/630913829/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/631697656",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#issuecomment-631697656",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16756",
    "id": 631697656,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMTY5NzY1Ng==",
    "user": {
      "login": "mzumsande",
      "id": 48763452,
      "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mzumsande",
      "html_url": "https://github.com/mzumsande",
      "followers_url": "https://api.github.com/users/mzumsande/followers",
      "following_url": "https://api.github.com/users/mzumsande/following{/other_user}",
      "gists_url": "https://api.github.com/users/mzumsande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
      "organizations_url": "https://api.github.com/users/mzumsande/orgs",
      "repos_url": "https://api.github.com/users/mzumsande/repos",
      "events_url": "https://api.github.com/users/mzumsande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mzumsande/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-20T20:06:40Z",
    "updated_at": "2020-05-20T20:06:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for the reviews and the suggestions! @jonatack I'll take a close look/push an update early next week!",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/631697656/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/631915629",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#issuecomment-631915629",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16756",
    "id": 631915629,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMTkxNTYyOQ==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-21T06:45:41Z",
    "updated_at": "2020-05-21T06:45:41Z",
    "author_association": "MEMBER",
    "body": "No worries, feel free to ignore :)\r\n\r\nI wonder if `protected_peers` is a good name, perhaps just `connected_peers`.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/631915629/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/632523688",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#issuecomment-632523688",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16756",
    "id": 632523688,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMjUyMzY4OA==",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?u=06eb9ae4f9b3f954056098860decccbf1340e40f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-22T06:54:31Z",
    "updated_at": "2020-05-22T06:54:31Z",
    "author_association": "MEMBER",
    "body": ">I wonder if protected_peers is a good name, perhaps just connected_peers.\r\n\r\nI would say all peers by default are connected, so this is not very helpful. Protected is a subset of connected. In addition, protected terminology was used for a long time, so I'd leave it as is.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/632523688/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/632534110",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#issuecomment-632534110",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16756",
    "id": 632534110,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMjUzNDExMA==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-22T07:15:04Z",
    "updated_at": "2020-05-22T07:15:04Z",
    "author_association": "MEMBER",
    "body": "> protected terminology was used for a long time\r\n\r\nThanks @naumenkogs, TIL!\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/632534110/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/635647232",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#issuecomment-635647232",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16756",
    "id": 635647232,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzNTY0NzIzMg==",
    "user": {
      "login": "mzumsande",
      "id": 48763452,
      "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mzumsande",
      "html_url": "https://github.com/mzumsande",
      "followers_url": "https://api.github.com/users/mzumsande/followers",
      "following_url": "https://api.github.com/users/mzumsande/following{/other_user}",
      "gists_url": "https://api.github.com/users/mzumsande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
      "organizations_url": "https://api.github.com/users/mzumsande/orgs",
      "repos_url": "https://api.github.com/users/mzumsande/repos",
      "events_url": "https://api.github.com/users/mzumsande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mzumsande/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-28T22:44:39Z",
    "updated_at": "2020-05-28T22:44:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jonatack Thanks again - I took several of your suggestions (some slightly adapted) and pushed an update (just preferred not to split the asserts/logging from the rest)\r\n\r\nYes, `protected_peers` are the subset of peers that are expected not to be evicted by our node (because they sent us a block, tx, have fast pings) - otherwise the test would fail.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/635647232/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/635981115",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#issuecomment-635981115",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16756",
    "id": 635981115,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzNTk4MTExNQ==",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?u=06eb9ae4f9b3f954056098860decccbf1340e40f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-29T13:46:15Z",
    "updated_at": "2020-05-29T13:46:15Z",
    "author_association": "MEMBER",
    "body": "Tested ACK 3758af7",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/635981115/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/635987984",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#issuecomment-635987984",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16756",
    "id": 635987984,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzNTk4Nzk4NA==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-29T14:00:11Z",
    "updated_at": "2020-05-29T14:00:11Z",
    "author_association": "MEMBER",
    "body": "We'll cover this in review club on 2020-06-03: https://bitcoincore.reviews/16756.html",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/635987984/reactions",
      "total_count": 2,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 1,
      "eyes": 1
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/637681306",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#issuecomment-637681306",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16756",
    "id": 637681306,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzNzY4MTMwNg==",
    "user": {
      "login": "andrewtoth",
      "id": 237213,
      "node_id": "MDQ6VXNlcjIzNzIxMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/andrewtoth",
      "html_url": "https://github.com/andrewtoth",
      "followers_url": "https://api.github.com/users/andrewtoth/followers",
      "following_url": "https://api.github.com/users/andrewtoth/following{/other_user}",
      "gists_url": "https://api.github.com/users/andrewtoth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/andrewtoth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
      "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
      "repos_url": "https://api.github.com/users/andrewtoth/repos",
      "events_url": "https://api.github.com/users/andrewtoth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-02T16:58:52Z",
    "updated_at": "2020-06-02T16:58:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "Tested ACK 3758af78564e9a0e059f38c11e941d68be192fb6",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/637681306/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/637988397",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#issuecomment-637988397",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16756",
    "id": 637988397,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzNzk4ODM5Nw==",
    "user": {
      "login": "rajarshimaitra",
      "id": 36541669,
      "node_id": "MDQ6VXNlcjM2NTQxNjY5",
      "avatar_url": "https://avatars.githubusercontent.com/u/36541669?u=3bb306a343c601258749dbbd03dbe66d0e9d82b4&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rajarshimaitra",
      "html_url": "https://github.com/rajarshimaitra",
      "followers_url": "https://api.github.com/users/rajarshimaitra/followers",
      "following_url": "https://api.github.com/users/rajarshimaitra/following{/other_user}",
      "gists_url": "https://api.github.com/users/rajarshimaitra/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rajarshimaitra/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rajarshimaitra/subscriptions",
      "organizations_url": "https://api.github.com/users/rajarshimaitra/orgs",
      "repos_url": "https://api.github.com/users/rajarshimaitra/repos",
      "events_url": "https://api.github.com/users/rajarshimaitra/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rajarshimaitra/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-03T06:36:52Z",
    "updated_at": "2020-06-03T06:36:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "Not specific to this PR, but related to the eviction logic code.\r\nhttps://github.com/bitcoin/bitcoin/blob/657b82cef0e8e8695fc189d013a4353bdbebb041/src/net.cpp#L932-L935\r\nThe `naMostConnections` is storing the netgroup key with most number of connections. Why the variable name is like that? First i thought its a typo, but then it seems the `a` is simply added to distinguish it from `nMostConnections`, or is there a specific meaning to it? IMO feels like not so appropriate name to give to a variable which is not storing number of connections.\r\n  ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/637988397/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/638253322",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#issuecomment-638253322",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16756",
    "id": 638253322,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzODI1MzMyMg==",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-03T14:57:43Z",
    "updated_at": "2020-06-03T14:57:43Z",
    "author_association": "MEMBER",
    "body": "@rajarshimaitra feel free to open a PR on that if you have ideas on making the code more self-explanatory :+1: ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/638253322/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/638273644",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#issuecomment-638273644",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16756",
    "id": 638273644,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzODI3MzY0NA==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-03T15:30:57Z",
    "updated_at": "2020-06-07T09:27:41Z",
    "author_association": "MEMBER",
    "body": "ACK 3758af78564e9a0e059f38c11e941d68be192fb6 thanks for adding useful test coverage. Reviewed/tested, re-checked the coherence with `CConnman::AttemptToEvictConnection()`, printed the peers at each step, and added additional assertions. I reckon the code could be shorter, but it's fine for now.\r\n\r\nThanks also for your patience and taking into consideration all the feedback.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/638273644/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/638281076",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#issuecomment-638281076",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16756",
    "id": 638281076,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzODI4MTA3Ng==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-03T15:43:03Z",
    "updated_at": "2020-06-03T15:43:03Z",
    "author_association": "MEMBER",
    "body": "I have a few style nits which I won't leave inline in order not to distract this PR from functional review:\r\n\r\n- L49: at least 2 spaces before inline comments (https://www.python.org/dev/peps/pep-0008/#inline-comments)\r\n- L78: spaces around operators (https://www.python.org/dev/peps/pep-0008/#other-recommendations)\r\n- L114: no spaces around keyword argument (https://www.python.org/dev/peps/pep-0008/#other-recommendations)\r\n- L114: space after colon (https://www.python.org/dev/peps/pep-0008/#pet-peeves)\r\n- L124: prefer `if not expression` over `if expression == false` (https://www.python.org/dev/peps/pep-0008/#programming-recommendations)\r\n\r\nConsider installing a python linter like flake8 or black to apply these automatically.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/638281076/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/638287545",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#issuecomment-638287545",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16756",
    "id": 638287545,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzODI4NzU0NQ==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-03T15:53:52Z",
    "updated_at": "2020-06-03T15:53:52Z",
    "author_association": "MEMBER",
    "body": "Building on John's style points, from `test/functional/README.md`: *When calling RPCs with several arguments, consider using named keyword arguments instead of positional arguments to make the intent of the call clear to readers.*\r\n\r\nThe variables used as positional args in this test are sufficiently well-named that I didn't bring it up, but it's good to know.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/638287545/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/640114700",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#issuecomment-640114700",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16756",
    "id": 640114700,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0MDExNDcwMA==",
    "user": {
      "login": "mzumsande",
      "id": 48763452,
      "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mzumsande",
      "html_url": "https://github.com/mzumsande",
      "followers_url": "https://api.github.com/users/mzumsande/followers",
      "following_url": "https://api.github.com/users/mzumsande/following{/other_user}",
      "gists_url": "https://api.github.com/users/mzumsande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
      "organizations_url": "https://api.github.com/users/mzumsande/orgs",
      "repos_url": "https://api.github.com/users/mzumsande/repos",
      "events_url": "https://api.github.com/users/mzumsande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mzumsande/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-06T20:33:13Z",
    "updated_at": "2020-06-06T20:33:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "I just pushed an update that should address all outstanding suggestions from review.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/640114700/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/640190229",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#issuecomment-640190229",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16756",
    "id": 640190229,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0MDE5MDIyOQ==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-07T10:06:59Z",
    "updated_at": "2020-06-07T10:06:59Z",
    "author_association": "MEMBER",
    "body": "Looking at it again, this test can be much simpler. One example: the `current_peer` counter and the `protected_peers` set building can all be removed in favor of just checking that the evicted peer is one of the slow-pinging peers. (After all this review, I may propose the simplifications as a follow-up.)\r\n\r\nACK 45eff751c6d07007dabc365dc4c0e6c63e3fe5cf",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/640190229/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/641360134",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#issuecomment-641360134",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16756",
    "id": 641360134,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0MTM2MDEzNA==",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?u=06eb9ae4f9b3f954056098860decccbf1340e40f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-09T15:09:55Z",
    "updated_at": "2020-06-09T15:09:55Z",
    "author_association": "MEMBER",
    "body": "Tested ACK 45eff75",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/641360134/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/643261745",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#issuecomment-643261745",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16756",
    "id": 643261745,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0MzI2MTc0NQ==",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?u=348c27f90b6fff8fd72fa27232272651436a2ff0&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-12T13:09:21Z",
    "updated_at": "2020-06-12T13:09:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "re-ACK 45eff751c6d07007dabc365dc4c0e6c63e3fe5cf\r\n\r\nChanges since my last reviews were minor improvements addressing nit review comments. ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/643261745/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/643331593",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#issuecomment-643331593",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16756",
    "id": 643331593,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0MzMzMTU5Mw==",
    "user": {
      "login": "andrewtoth",
      "id": 237213,
      "node_id": "MDQ6VXNlcjIzNzIxMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/andrewtoth",
      "html_url": "https://github.com/andrewtoth",
      "followers_url": "https://api.github.com/users/andrewtoth/followers",
      "following_url": "https://api.github.com/users/andrewtoth/following{/other_user}",
      "gists_url": "https://api.github.com/users/andrewtoth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/andrewtoth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
      "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
      "repos_url": "https://api.github.com/users/andrewtoth/repos",
      "events_url": "https://api.github.com/users/andrewtoth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-12T15:21:14Z",
    "updated_at": "2020-06-12T15:21:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "re-ACK 45eff751c6d07007dabc365dc4c0e6c63e3fe5cf",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/643331593/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/329357386",
    "pull_request_review_id": 294688110,
    "id": 329357386,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyOTM1NzM4Ng==",
    "diff_hunk": "@@ -0,0 +1,135 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mininode import P2PInterface, P2PDataStore\n+from test_framework.util import assert_equal, wait_until\n+from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.messages import CTransaction, FromHex, msg_pong, msg_tx\n+\n+import time\n+\n+\n+\"\"\" Test node eviction logic\n+\n+When the number of peers has reached the limit of maximum connections,\n+the next connecting inbound peer will trigger the eviction mechanis.",
    "path": "test/functional/p2p_eviction.py",
    "position": null,
    "original_position": 18,
    "commit_id": "45eff751c6d07007dabc365dc4c0e6c63e3fe5cf",
    "original_commit_id": "92a73f8af9352f7e30575ed7c52a77ebca694b36",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Should be \"mechanism\" :)",
    "created_at": "2019-09-29T15:09:27Z",
    "updated_at": "2020-06-06T20:31:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r329357386",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/329357386"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r329357386"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/329357386/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 18,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/329357407",
    "pull_request_review_id": 294688132,
    "id": 329357407,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyOTM1NzQwNw==",
    "diff_hunk": "@@ -304,4 +305,60 @@ BOOST_AUTO_TEST_CASE(LocalAddress_BasicLifecycle)\n }\n \n \n+BOOST_AUTO_TEST_CASE(Peer_Eviction)\n+{\n+    std::vector<NodeEvictionCandidate> vCandidates, vTestCandidates;\n+    CService serv = CService(UtilBuildAddress(0x002, 0x001, 0x001, 0x001), 1000); // 2.1.1.1:1000\n+    CAddress addr = CAddress(serv, NODE_NETWORK);\n+\n+    // struct NodeEvictionCandidate members:\n+    // id, nTimeConnected, nMinPingUsecTime, nLastBlockTime, nLastTXTime, fRelevantServices, fRelayTxes, fBloomFilter, addr, nKeyedNetGroup, prefer_evict\n+    NodeEvictionCandidate c1 = {1, 10, 100, 1000, 10000, true, false, true, addr, 100000, false};\n+    NodeEvictionCandidate c2 = {2, 20, 200, 1000, 10000, false, false, false, addr, 200000, false};\n+    NodeEvictionCandidate c3 = {3, 30, 300, 1000, 10000, true, false, true, addr, 300000, false};\n+    NodeEvictionCandidate c4 = {4, 99, 400, 4000, 10000, true, true, true, addr, 400000, false};\n+    NodeEvictionCandidate c5 = {5, 50, 500, 1000, 20000, true, true, true, addr, 500000, false};\n+    vCandidates.push_back(c1);\n+    vCandidates.push_back(c2);\n+    vCandidates.push_back(c3);\n+    vCandidates.push_back(c4);\n+    vCandidates.push_back(c5);\n+\n+    // CompareNetGroupKeyed: erase nodes with largest nKeyedNetGroup\n+    vTestCandidates = vCandidates;\n+    EraseLastKElements(vTestCandidates, CompareNetGroupKeyed, 4);\n+    BOOST_CHECK_EQUAL(vTestCandidates.size(), 1);\n+    BOOST_CHECK_EQUAL(vTestCandidates[0].id, 1);\n+\n+    // ReverseCompareNodeMinPingTime: erase nodes with smallest nMinPingUsecTime\n+    vTestCandidates = vCandidates;\n+    EraseLastKElements(vTestCandidates, ReverseCompareNodeMinPingTime, 4);\n+    BOOST_CHECK_EQUAL(vTestCandidates.size(), 1);\n+    BOOST_CHECK_EQUAL(vTestCandidates[0].id, 5);\n+\n+    // ReverseCompareNodeTimeConnected: erase nodes with smallest nTimeConnected\n+    vTestCandidates = vCandidates;\n+    EraseLastKElements(vTestCandidates, ReverseCompareNodeTimeConnected, 4);\n+    BOOST_CHECK_EQUAL(vTestCandidates.size(), 1);\n+    BOOST_CHECK_EQUAL(vTestCandidates[0].id, 4);\n+\n+    // CompareNodeTXTime: erase node with largest nLastTXTime (c5)\n+    // in case of a tie, erase node that has fRelayTxes set (c4)\n+    // then erase node with fBloomFilter unset (c2)\n+    // remaining items are orderes by smallest time connected",
    "path": "src/test/net_tests.cpp",
    "position": null,
    "original_position": 52,
    "commit_id": "45eff751c6d07007dabc365dc4c0e6c63e3fe5cf",
    "original_commit_id": "92a73f8af9352f7e30575ed7c52a77ebca694b36",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Should be \"ordered\" :)",
    "created_at": "2019-09-29T15:09:59Z",
    "updated_at": "2020-06-06T20:31:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r329357407",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/329357407"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r329357407"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/329357407/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 348,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/329683447",
    "pull_request_review_id": 295115356,
    "id": 329683447,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyOTY4MzQ0Nw==",
    "diff_hunk": "@@ -304,4 +305,60 @@ BOOST_AUTO_TEST_CASE(LocalAddress_BasicLifecycle)\n }\n \n \n+BOOST_AUTO_TEST_CASE(Peer_Eviction)\n+{\n+    std::vector<NodeEvictionCandidate> vCandidates, vTestCandidates;\n+    CService serv = CService(UtilBuildAddress(0x002, 0x001, 0x001, 0x001), 1000); // 2.1.1.1:1000\n+    CAddress addr = CAddress(serv, NODE_NETWORK);\n+\n+    // struct NodeEvictionCandidate members:\n+    // id, nTimeConnected, nMinPingUsecTime, nLastBlockTime, nLastTXTime, fRelevantServices, fRelayTxes, fBloomFilter, addr, nKeyedNetGroup, prefer_evict\n+    NodeEvictionCandidate c1 = {1, 10, 100, 1000, 10000, true, false, true, addr, 100000, false};\n+    NodeEvictionCandidate c2 = {2, 20, 200, 1000, 10000, false, false, false, addr, 200000, false};\n+    NodeEvictionCandidate c3 = {3, 30, 300, 1000, 10000, true, false, true, addr, 300000, false};\n+    NodeEvictionCandidate c4 = {4, 99, 400, 4000, 10000, true, true, true, addr, 400000, false};\n+    NodeEvictionCandidate c5 = {5, 50, 500, 1000, 20000, true, true, true, addr, 500000, false};\n+    vCandidates.push_back(c1);\n+    vCandidates.push_back(c2);\n+    vCandidates.push_back(c3);\n+    vCandidates.push_back(c4);\n+    vCandidates.push_back(c5);\n+\n+    // CompareNetGroupKeyed: erase nodes with largest nKeyedNetGroup\n+    vTestCandidates = vCandidates;\n+    EraseLastKElements(vTestCandidates, CompareNetGroupKeyed, 4);\n+    BOOST_CHECK_EQUAL(vTestCandidates.size(), 1);\n+    BOOST_CHECK_EQUAL(vTestCandidates[0].id, 1);\n+\n+    // ReverseCompareNodeMinPingTime: erase nodes with smallest nMinPingUsecTime\n+    vTestCandidates = vCandidates;\n+    EraseLastKElements(vTestCandidates, ReverseCompareNodeMinPingTime, 4);\n+    BOOST_CHECK_EQUAL(vTestCandidates.size(), 1);\n+    BOOST_CHECK_EQUAL(vTestCandidates[0].id, 5);\n+\n+    // ReverseCompareNodeTimeConnected: erase nodes with smallest nTimeConnected\n+    vTestCandidates = vCandidates;\n+    EraseLastKElements(vTestCandidates, ReverseCompareNodeTimeConnected, 4);\n+    BOOST_CHECK_EQUAL(vTestCandidates.size(), 1);\n+    BOOST_CHECK_EQUAL(vTestCandidates[0].id, 4);\n+\n+    // CompareNodeTXTime: erase node with largest nLastTXTime (c5)\n+    // in case of a tie, erase node that has fRelayTxes set (c4)\n+    // then erase node with fBloomFilter unset (c2)\n+    // remaining items are orderes by smallest time connected",
    "path": "src/test/net_tests.cpp",
    "position": null,
    "original_position": 52,
    "commit_id": "45eff751c6d07007dabc365dc4c0e6c63e3fe5cf",
    "original_commit_id": "92a73f8af9352f7e30575ed7c52a77ebca694b36",
    "user": {
      "login": "mzumsande",
      "id": 48763452,
      "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mzumsande",
      "html_url": "https://github.com/mzumsande",
      "followers_url": "https://api.github.com/users/mzumsande/followers",
      "following_url": "https://api.github.com/users/mzumsande/following{/other_user}",
      "gists_url": "https://api.github.com/users/mzumsande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
      "organizations_url": "https://api.github.com/users/mzumsande/orgs",
      "repos_url": "https://api.github.com/users/mzumsande/repos",
      "events_url": "https://api.github.com/users/mzumsande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mzumsande/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Thanks, fixed both typos.",
    "created_at": "2019-09-30T16:56:37Z",
    "updated_at": "2020-06-06T20:31:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r329683447",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/329683447"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r329683447"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/329683447/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 348,
    "side": "RIGHT",
    "in_reply_to_id": 329357407
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426934352",
    "pull_request_review_id": 413989556,
    "id": 426934352,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkzNDM1Mg==",
    "diff_hunk": "@@ -0,0 +1,135 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mininode import P2PInterface, P2PDataStore\n+from test_framework.util import assert_equal, wait_until\n+from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.messages import CTransaction, FromHex, msg_pong, msg_tx\n+\n+import time\n+\n+\n+\"\"\" Test node eviction logic\n+\n+When the number of peers has reached the limit of maximum connections,\n+the next connecting inbound peer will trigger the eviction mechanism.\n+We cannot currently test the parts of the eviction logic that are based on\n+address/netgroup since in the current framework, all peers are connecting from\n+the same local address. See Issue #14210 for more info.\n+\n+Therefore, this test is limited to the remaining protection criteria:\n+1.) Protect 4 nodes having sent us a block most recently\n+2.) Protect 4 nodes having sent us a transaction most recently\n+3.) Protect 8 nodes with the smallest minimum ping\n+\"\"\"\n+\n+class SlowP2PDataStore(P2PDataStore):\n+    def on_ping(self, message):\n+        time.sleep(0.1)\n+        self.send_message(msg_pong(message.nonce))\n+\n+class SlowP2PInterface(P2PInterface):\n+    def on_ping(self, message):\n+        time.sleep(0.1)\n+        self.send_message(msg_pong(message.nonce))\n+\n+\n+class P2PEvict(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        # The choice of maxconnections results in a maximum of 21 inbound connections\n+        # (32 - 10 outbound - 1 feeler). 20 inbounds peers are protected from eviction.\n+        self.extra_args = [['-maxconnections=32']]\n+\n+    def setup_network(self):\n+        self.setup_nodes()\n+\n+    def run_test(self):\n+        protected = set()\n+        node = self.nodes[0]\n+        node.generatetoaddress(101, node.get_deterministic_priv_key().address)\n+\n+        #The first 4 peers send us a block, protecting them from eviction\n+        for i in range(4):\n+            blockpeer = node.add_p2p_connection(SlowP2PDataStore())\n+            blockpeer.sync_with_ping(timeout=5)\n+            best_block = node.getbestblockhash()\n+            tip = int(best_block, 16)\n+            best_block_time = node.getblock(best_block)['time']\n+            block = create_block(tip, create_coinbase(node.getblockcount() + 1), best_block_time + 1)\n+            block.solve()\n+            blockpeer.send_blocks_and_test([block], node, success=True)\n+            protected.add(len(node.p2ps))",
    "path": "test/functional/p2p_eviction.py",
    "position": null,
    "original_position": 66,
    "commit_id": "45eff751c6d07007dabc365dc4c0e6c63e3fe5cf",
    "original_commit_id": "a0780c5ff6818a0a59afd7657bb98c4954ab06b3",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Although I understand how it works, this construction takes a little bit of cognitive effort.\r\n\r\nFine for this one, but I suggest using something explicit for the next PRs. Simple `i` would work here, and below, well, you'd have to introduce `i + N(4) + M(5)` or something, but I think it would be easier to comprehend.",
    "created_at": "2020-05-18T22:51:55Z",
    "updated_at": "2020-06-06T20:31:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r426934352",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426934352"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r426934352"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426934352/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 66,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427689277",
    "pull_request_review_id": 414930217,
    "id": 427689277,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY4OTI3Nw==",
    "diff_hunk": "@@ -0,0 +1,135 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mininode import P2PInterface, P2PDataStore\n+from test_framework.util import assert_equal, wait_until\n+from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.messages import CTransaction, FromHex, msg_pong, msg_tx\n+\n+import time\n+\n+\n+\"\"\" Test node eviction logic\n+\n+When the number of peers has reached the limit of maximum connections,\n+the next connecting inbound peer will trigger the eviction mechanism.\n+We cannot currently test the parts of the eviction logic that are based on\n+address/netgroup since in the current framework, all peers are connecting from\n+the same local address. See Issue #14210 for more info.\n+\n+Therefore, this test is limited to the remaining protection criteria:\n+1.) Protect 4 nodes having sent us a block most recently\n+2.) Protect 4 nodes having sent us a transaction most recently\n+3.) Protect 8 nodes with the smallest minimum ping\n+\"\"\"\n+\n+class SlowP2PDataStore(P2PDataStore):\n+    def on_ping(self, message):\n+        time.sleep(0.1)",
    "path": "test/functional/p2p_eviction.py",
    "position": 27,
    "original_position": 31,
    "commit_id": "45eff751c6d07007dabc365dc4c0e6c63e3fe5cf",
    "original_commit_id": "a0780c5ff6818a0a59afd7657bb98c4954ab06b3",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "After #18638 can this use `setmocktime` instead of `sleep`?",
    "created_at": "2020-05-20T01:23:13Z",
    "updated_at": "2020-06-06T20:31:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r427689277",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427689277"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r427689277"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427689277/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 27,
    "original_line": 27,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427692165",
    "pull_request_review_id": 414933354,
    "id": 427692165,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY5MjE2NQ==",
    "diff_hunk": "@@ -0,0 +1,135 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mininode import P2PInterface, P2PDataStore\n+from test_framework.util import assert_equal, wait_until\n+from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.messages import CTransaction, FromHex, msg_pong, msg_tx\n+\n+import time\n+\n+\n+\"\"\" Test node eviction logic\n+\n+When the number of peers has reached the limit of maximum connections,\n+the next connecting inbound peer will trigger the eviction mechanism.\n+We cannot currently test the parts of the eviction logic that are based on\n+address/netgroup since in the current framework, all peers are connecting from\n+the same local address. See Issue #14210 for more info.\n+\n+Therefore, this test is limited to the remaining protection criteria:\n+1.) Protect 4 nodes having sent us a block most recently\n+2.) Protect 4 nodes having sent us a transaction most recently\n+3.) Protect 8 nodes with the smallest minimum ping\n+\"\"\"\n+\n+class SlowP2PDataStore(P2PDataStore):\n+    def on_ping(self, message):\n+        time.sleep(0.1)",
    "path": "test/functional/p2p_eviction.py",
    "position": 27,
    "original_position": 31,
    "commit_id": "45eff751c6d07007dabc365dc4c0e6c63e3fe5cf",
    "original_commit_id": "a0780c5ff6818a0a59afd7657bb98c4954ab06b3",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I don't think so. Logically this sleep should happen on the mininode side (of couple particular mininodes, not all).\r\nUsing mock time would sleep for *all* mininodes, but that doesn't satisfy the goal of the test.\r\n\r\nUnless the mininodes in the test are created in a very particular order, which would probably complicate things.",
    "created_at": "2020-05-20T01:33:19Z",
    "updated_at": "2020-06-06T20:31:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r427692165",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427692165"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r427692165"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427692165/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 27,
    "original_line": 27,
    "side": "RIGHT",
    "in_reply_to_id": 427689277
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427693372",
    "pull_request_review_id": 414934706,
    "id": 427693372,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY5MzM3Mg==",
    "diff_hunk": "@@ -0,0 +1,135 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mininode import P2PInterface, P2PDataStore\n+from test_framework.util import assert_equal, wait_until\n+from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.messages import CTransaction, FromHex, msg_pong, msg_tx\n+\n+import time\n+\n+\n+\"\"\" Test node eviction logic\n+\n+When the number of peers has reached the limit of maximum connections,\n+the next connecting inbound peer will trigger the eviction mechanism.\n+We cannot currently test the parts of the eviction logic that are based on\n+address/netgroup since in the current framework, all peers are connecting from\n+the same local address. See Issue #14210 for more info.\n+\n+Therefore, this test is limited to the remaining protection criteria:\n+1.) Protect 4 nodes having sent us a block most recently\n+2.) Protect 4 nodes having sent us a transaction most recently\n+3.) Protect 8 nodes with the smallest minimum ping\n+\"\"\"\n+\n+class SlowP2PDataStore(P2PDataStore):\n+    def on_ping(self, message):\n+        time.sleep(0.1)",
    "path": "test/functional/p2p_eviction.py",
    "position": 27,
    "original_position": 31,
    "commit_id": "45eff751c6d07007dabc365dc4c0e6c63e3fe5cf",
    "original_commit_id": "a0780c5ff6818a0a59afd7657bb98c4954ab06b3",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Ah, thanks for the info!",
    "created_at": "2020-05-20T01:37:52Z",
    "updated_at": "2020-06-06T20:31:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r427693372",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427693372"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r427693372"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427693372/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 27,
    "original_line": 27,
    "side": "RIGHT",
    "in_reply_to_id": 427689277
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432157593",
    "pull_request_review_id": 420534549,
    "id": 432157593,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE1NzU5Mw==",
    "diff_hunk": "@@ -0,0 +1,135 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mininode import P2PInterface, P2PDataStore\n+from test_framework.util import assert_equal, wait_until\n+from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.messages import CTransaction, FromHex, msg_pong, msg_tx\n+\n+import time\n+\n+\n+\"\"\" Test node eviction logic\n+\n+When the number of peers has reached the limit of maximum connections,\n+the next connecting inbound peer will trigger the eviction mechanism.\n+We cannot currently test the parts of the eviction logic that are based on\n+address/netgroup since in the current framework, all peers are connecting from\n+the same local address. See Issue #14210 for more info.\n+\n+Therefore, this test is limited to the remaining protection criteria:\n+1.) Protect 4 nodes having sent us a block most recently\n+2.) Protect 4 nodes having sent us a transaction most recently\n+3.) Protect 8 nodes with the smallest minimum ping\n+\"\"\"\n+\n+class SlowP2PDataStore(P2PDataStore):\n+    def on_ping(self, message):\n+        time.sleep(0.1)\n+        self.send_message(msg_pong(message.nonce))\n+\n+class SlowP2PInterface(P2PInterface):\n+    def on_ping(self, message):\n+        time.sleep(0.1)\n+        self.send_message(msg_pong(message.nonce))\n+\n+\n+class P2PEvict(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        # The choice of maxconnections results in a maximum of 21 inbound connections\n+        # (32 - 10 outbound - 1 feeler). 20 inbounds peers are protected from eviction.\n+        self.extra_args = [['-maxconnections=32']]\n+\n+    def setup_network(self):\n+        self.setup_nodes()\n+\n+    def run_test(self):\n+        protected = set()\n+        node = self.nodes[0]\n+        node.generatetoaddress(101, node.get_deterministic_priv_key().address)\n+\n+        #The first 4 peers send us a block, protecting them from eviction\n+        for i in range(4):\n+            blockpeer = node.add_p2p_connection(SlowP2PDataStore())\n+            blockpeer.sync_with_ping(timeout=5)\n+            best_block = node.getbestblockhash()\n+            tip = int(best_block, 16)\n+            best_block_time = node.getblock(best_block)['time']\n+            block = create_block(tip, create_coinbase(node.getblockcount() + 1), best_block_time + 1)\n+            block.solve()\n+            blockpeer.send_blocks_and_test([block], node, success=True)\n+            protected.add(len(node.p2ps))",
    "path": "test/functional/p2p_eviction.py",
    "position": null,
    "original_position": 66,
    "commit_id": "45eff751c6d07007dabc365dc4c0e6c63e3fe5cf",
    "original_commit_id": "a0780c5ff6818a0a59afd7657bb98c4954ab06b3",
    "user": {
      "login": "mzumsande",
      "id": 48763452,
      "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mzumsande",
      "html_url": "https://github.com/mzumsande",
      "followers_url": "https://api.github.com/users/mzumsande/followers",
      "following_url": "https://api.github.com/users/mzumsande/following{/other_user}",
      "gists_url": "https://api.github.com/users/mzumsande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
      "organizations_url": "https://api.github.com/users/mzumsande/orgs",
      "repos_url": "https://api.github.com/users/mzumsande/repos",
      "events_url": "https://api.github.com/users/mzumsande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mzumsande/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I introduced a variable `current_peer`, hopefully that makes it easier to read.",
    "created_at": "2020-05-28T22:24:25Z",
    "updated_at": "2020-06-06T20:31:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r432157593",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432157593"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r432157593"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432157593/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 66,
    "side": "RIGHT",
    "in_reply_to_id": 426934352
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/433748047",
    "pull_request_review_id": 422508204,
    "id": 433748047,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc0ODA0Nw==",
    "diff_hunk": "@@ -0,0 +1,141 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\" Test node eviction logic\n+\n+When the number of peers has reached the limit of maximum connections,\n+the next connecting inbound peer will trigger the eviction mechanism.\n+We cannot currently test the parts of the eviction logic that are based on\n+address/netgroup since in the current framework, all peers are connecting from\n+the same local address. See Issue #14210 for more info.\n+\n+Therefore, this test is limited to the remaining protection criteria:\n+1.) Protect 4 nodes having sent us a block most recently\n+2.) Protect 4 nodes having sent us a transaction most recently\n+3.) Protect 8 nodes with the smallest minimum ping\n+\"\"\"\n+\n+import time\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mininode import P2PInterface, P2PDataStore\n+from test_framework.util import assert_equal, wait_until\n+from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.messages import CTransaction, FromHex, msg_pong, msg_tx\n+\n+\n+class SlowP2PDataStore(P2PDataStore):\n+    def on_ping(self, message):\n+        time.sleep(0.1)\n+        self.send_message(msg_pong(message.nonce))\n+\n+class SlowP2PInterface(P2PInterface):\n+    def on_ping(self, message):\n+        time.sleep(0.1)\n+        self.send_message(msg_pong(message.nonce))\n+\n+\n+class P2PEvict(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        # The choice of 32 maxconnections results in a maximum of 21 inbound connections\n+        # (32 - 10 outbound - 1 feeler). 20 inbounds peers are protected from eviction.\n+        self.extra_args = [['-maxconnections=32']]\n+\n+    def setup_network(self):\n+        self.setup_nodes()\n+\n+    def run_test(self):\n+        self.protected_peers = set() # peers that we expect to be protected from eviction\n+        current_peer = 0\n+        node = self.nodes[0]\n+        node.generatetoaddress(101, node.get_deterministic_priv_key().address)\n+\n+        # The first 4 peers send us a block, protecting them from eviction.\n+        for _ in range(4):\n+            block_peer = node.add_p2p_connection(SlowP2PDataStore())\n+            current_peer += 1\n+            block_peer.sync_with_ping(timeout=5)\n+            best_block = node.getbestblockhash()\n+            tip = int(best_block, 16)\n+            best_block_time = node.getblock(best_block)['time']\n+            block = create_block(tip, create_coinbase(node.getblockcount() + 1), best_block_time + 1)\n+            block.solve()\n+            block_peer.send_blocks_and_test([block], node, success=True)\n+            self.protected_peers.add(current_peer)\n+\n+        # The next 5 nodes are slow-pinging peers, making them eviction candidates.\n+        for _ in range(5):\n+            node.add_p2p_connection(SlowP2PInterface())\n+            current_peer += 1\n+\n+\n+        #The next 4 peers send us a tx, protecting them from eviction\n+        for i in range(4):\n+            txpeer = node.add_p2p_connection(SlowP2PInterface())\n+            current_peer += 1\n+            txpeer.sync_with_ping(timeout=5)\n+\n+            prevtx = node.getblock(node.getblockhash(i+1), 2)['tx'][0]\n+            rawtx = node.createrawtransaction(\n+                inputs=[{'txid': prevtx['txid'], 'vout': 0}],\n+                outputs=[{node.get_deterministic_priv_key().address: 50 - 0.00125}],\n+            )\n+            sigtx = node.signrawtransactionwithkey(\n+                hexstring=rawtx,\n+                privkeys=[node.get_deterministic_priv_key().key],\n+                prevtxs=[{\n+                    'txid': prevtx['txid'],\n+                    'vout': 0,\n+                    'scriptPubKey': prevtx['vout'][0]['scriptPubKey']['hex'],\n+                }],\n+            )['hex']\n+            txpeer.send_message(msg_tx(FromHex(CTransaction(), sigtx)))\n+            self.protected_peers.add(current_peer)\n+\n+        # The next 8 peers have faster pings, which will usually protect them from eviction.\n+        for _ in range(8):\n+            fastpeer = node.add_p2p_connection(P2PInterface())\n+            current_peer += 1\n+            wait_until(lambda: \"ping\" in fastpeer.last_message, timeout=10)\n+\n+        # Make sure by asking the node what the actual min pings are\n+        peerinfo = node.getpeerinfo()\n+        pings = [[0 for i in range(2)] for j in range(len(node.p2ps))]",
    "path": "test/functional/p2p_eviction.py",
    "position": null,
    "original_position": 107,
    "commit_id": "45eff751c6d07007dabc365dc4c0e6c63e3fe5cf",
    "original_commit_id": "3758af78564e9a0e059f38c11e941d68be192fb6",
    "user": {
      "login": "rajarshimaitra",
      "id": 36541669,
      "node_id": "MDQ6VXNlcjM2NTQxNjY5",
      "avatar_url": "https://avatars.githubusercontent.com/u/36541669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rajarshimaitra",
      "html_url": "https://github.com/rajarshimaitra",
      "followers_url": "https://api.github.com/users/rajarshimaitra/followers",
      "following_url": "https://api.github.com/users/rajarshimaitra/following{/other_user}",
      "gists_url": "https://api.github.com/users/rajarshimaitra/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rajarshimaitra/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rajarshimaitra/subscriptions",
      "organizations_url": "https://api.github.com/users/rajarshimaitra/orgs",
      "repos_url": "https://api.github.com/users/rajarshimaitra/repos",
      "events_url": "https://api.github.com/users/rajarshimaitra/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rajarshimaitra/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Is it possible to combine `pings` initialization with the actual filling of the list with `minping` data (happening few lines later) together? Any specific reason why they are separated by the `add_p2p_connection`? ",
    "created_at": "2020-06-02T09:36:15Z",
    "updated_at": "2020-06-06T20:31:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r433748047",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/433748047"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r433748047"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/433748047/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 105,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 103,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/433766480",
    "pull_request_review_id": 422508204,
    "id": 433766480,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc2NjQ4MA==",
    "diff_hunk": "@@ -0,0 +1,141 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\" Test node eviction logic\n+\n+When the number of peers has reached the limit of maximum connections,\n+the next connecting inbound peer will trigger the eviction mechanism.\n+We cannot currently test the parts of the eviction logic that are based on\n+address/netgroup since in the current framework, all peers are connecting from\n+the same local address. See Issue #14210 for more info.\n+\n+Therefore, this test is limited to the remaining protection criteria:\n+1.) Protect 4 nodes having sent us a block most recently\n+2.) Protect 4 nodes having sent us a transaction most recently\n+3.) Protect 8 nodes with the smallest minimum ping\n+\"\"\"\n+\n+import time\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mininode import P2PInterface, P2PDataStore\n+from test_framework.util import assert_equal, wait_until\n+from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.messages import CTransaction, FromHex, msg_pong, msg_tx\n+\n+\n+class SlowP2PDataStore(P2PDataStore):\n+    def on_ping(self, message):\n+        time.sleep(0.1)\n+        self.send_message(msg_pong(message.nonce))\n+\n+class SlowP2PInterface(P2PInterface):\n+    def on_ping(self, message):\n+        time.sleep(0.1)\n+        self.send_message(msg_pong(message.nonce))\n+\n+\n+class P2PEvict(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        # The choice of 32 maxconnections results in a maximum of 21 inbound connections\n+        # (32 - 10 outbound - 1 feeler). 20 inbounds peers are protected from eviction.\n+        self.extra_args = [['-maxconnections=32']]\n+\n+    def setup_network(self):\n+        self.setup_nodes()\n+\n+    def run_test(self):\n+        self.protected_peers = set() # peers that we expect to be protected from eviction\n+        current_peer = 0\n+        node = self.nodes[0]\n+        node.generatetoaddress(101, node.get_deterministic_priv_key().address)\n+\n+        # The first 4 peers send us a block, protecting them from eviction.\n+        for _ in range(4):\n+            block_peer = node.add_p2p_connection(SlowP2PDataStore())\n+            current_peer += 1\n+            block_peer.sync_with_ping(timeout=5)\n+            best_block = node.getbestblockhash()\n+            tip = int(best_block, 16)\n+            best_block_time = node.getblock(best_block)['time']\n+            block = create_block(tip, create_coinbase(node.getblockcount() + 1), best_block_time + 1)\n+            block.solve()\n+            block_peer.send_blocks_and_test([block], node, success=True)\n+            self.protected_peers.add(current_peer)\n+\n+        # The next 5 nodes are slow-pinging peers, making them eviction candidates.\n+        for _ in range(5):\n+            node.add_p2p_connection(SlowP2PInterface())\n+            current_peer += 1\n+\n+\n+        #The next 4 peers send us a tx, protecting them from eviction\n+        for i in range(4):\n+            txpeer = node.add_p2p_connection(SlowP2PInterface())\n+            current_peer += 1\n+            txpeer.sync_with_ping(timeout=5)\n+\n+            prevtx = node.getblock(node.getblockhash(i+1), 2)['tx'][0]\n+            rawtx = node.createrawtransaction(\n+                inputs=[{'txid': prevtx['txid'], 'vout': 0}],\n+                outputs=[{node.get_deterministic_priv_key().address: 50 - 0.00125}],\n+            )\n+            sigtx = node.signrawtransactionwithkey(\n+                hexstring=rawtx,\n+                privkeys=[node.get_deterministic_priv_key().key],\n+                prevtxs=[{\n+                    'txid': prevtx['txid'],\n+                    'vout': 0,\n+                    'scriptPubKey': prevtx['vout'][0]['scriptPubKey']['hex'],\n+                }],\n+            )['hex']\n+            txpeer.send_message(msg_tx(FromHex(CTransaction(), sigtx)))\n+            self.protected_peers.add(current_peer)\n+\n+        # The next 8 peers have faster pings, which will usually protect them from eviction.\n+        for _ in range(8):\n+            fastpeer = node.add_p2p_connection(P2PInterface())\n+            current_peer += 1\n+            wait_until(lambda: \"ping\" in fastpeer.last_message, timeout=10)\n+\n+        # Make sure by asking the node what the actual min pings are\n+        peerinfo = node.getpeerinfo()\n+        pings = [[0 for i in range(2)] for j in range(len(node.p2ps))]\n+\n+        # After adding 21 peers, the next one hits the maxconnection limit and triggers the eviction mechanism.\n+        node.add_p2p_connection(SlowP2PInterface())\n+\n+        # Usually the 8 fast peers are protected. In rare case of unreliable pings,\n+        # one of the slower peers might have a faster min ping though.\n+        for i in range(len(peerinfo)):\n+            pings[i][0] = i\n+            pings[i][1] = peerinfo[i]['minping'] if 'minping' in peerinfo[i] else 1000000\n+\n+        sorted_pings = sorted(pings, key = lambda x:x[1])\n+\n+        for i in range(8):\n+            self.protected_peers.add(sorted_pings[i][0])",
    "path": "test/functional/p2p_eviction.py",
    "position": null,
    "original_position": 121,
    "commit_id": "45eff751c6d07007dabc365dc4c0e6c63e3fe5cf",
    "original_commit_id": "3758af78564e9a0e059f38c11e941d68be192fb6",
    "user": {
      "login": "rajarshimaitra",
      "id": 36541669,
      "node_id": "MDQ6VXNlcjM2NTQxNjY5",
      "avatar_url": "https://avatars.githubusercontent.com/u/36541669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rajarshimaitra",
      "html_url": "https://github.com/rajarshimaitra",
      "followers_url": "https://api.github.com/users/rajarshimaitra/followers",
      "following_url": "https://api.github.com/users/rajarshimaitra/following{/other_user}",
      "gists_url": "https://api.github.com/users/rajarshimaitra/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rajarshimaitra/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rajarshimaitra/subscriptions",
      "organizations_url": "https://api.github.com/users/rajarshimaitra/orgs",
      "repos_url": "https://api.github.com/users/rajarshimaitra/repos",
      "events_url": "https://api.github.com/users/rajarshimaitra/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rajarshimaitra/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "At this stage, the total number of `protected_peers` is coming out to be 15, which actually should be 16 (4 blocks, 4 txs, 8 fast ping)?\r\nThis is probably happening because the previous `protected_peers.add(current_peer)` added the peers with `index + 1`, (`current_peer` is `1` for peer `0`), and `protected_peers.add(sorted_pings[i][0])` is adding them by peer index. This is causing an overlap of the set items and thus one less peer is added to the set. \r\n\r\nOr I might be completely wrong and this is intended behavior. ",
    "created_at": "2020-06-02T10:08:42Z",
    "updated_at": "2020-06-06T20:31:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r433766480",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/433766480"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r433766480"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/433766480/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 117,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/433774397",
    "pull_request_review_id": 422508204,
    "id": 433774397,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc3NDM5Nw==",
    "diff_hunk": "@@ -0,0 +1,141 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\" Test node eviction logic\n+\n+When the number of peers has reached the limit of maximum connections,\n+the next connecting inbound peer will trigger the eviction mechanism.\n+We cannot currently test the parts of the eviction logic that are based on\n+address/netgroup since in the current framework, all peers are connecting from\n+the same local address. See Issue #14210 for more info.\n+\n+Therefore, this test is limited to the remaining protection criteria:\n+1.) Protect 4 nodes having sent us a block most recently\n+2.) Protect 4 nodes having sent us a transaction most recently\n+3.) Protect 8 nodes with the smallest minimum ping\n+\"\"\"\n+\n+import time\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mininode import P2PInterface, P2PDataStore\n+from test_framework.util import assert_equal, wait_until\n+from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.messages import CTransaction, FromHex, msg_pong, msg_tx\n+\n+\n+class SlowP2PDataStore(P2PDataStore):\n+    def on_ping(self, message):\n+        time.sleep(0.1)\n+        self.send_message(msg_pong(message.nonce))\n+\n+class SlowP2PInterface(P2PInterface):\n+    def on_ping(self, message):\n+        time.sleep(0.1)\n+        self.send_message(msg_pong(message.nonce))\n+\n+\n+class P2PEvict(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        # The choice of 32 maxconnections results in a maximum of 21 inbound connections\n+        # (32 - 10 outbound - 1 feeler). 20 inbounds peers are protected from eviction.",
    "path": "test/functional/p2p_eviction.py",
    "position": null,
    "original_position": 45,
    "commit_id": "45eff751c6d07007dabc365dc4c0e6c63e3fe5cf",
    "original_commit_id": "3758af78564e9a0e059f38c11e941d68be192fb6",
    "user": {
      "login": "rajarshimaitra",
      "id": 36541669,
      "node_id": "MDQ6VXNlcjM2NTQxNjY5",
      "avatar_url": "https://avatars.githubusercontent.com/u/36541669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rajarshimaitra",
      "html_url": "https://github.com/rajarshimaitra",
      "followers_url": "https://api.github.com/users/rajarshimaitra/followers",
      "following_url": "https://api.github.com/users/rajarshimaitra/following{/other_user}",
      "gists_url": "https://api.github.com/users/rajarshimaitra/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rajarshimaitra/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rajarshimaitra/subscriptions",
      "organizations_url": "https://api.github.com/users/rajarshimaitra/orgs",
      "repos_url": "https://api.github.com/users/rajarshimaitra/repos",
      "events_url": "https://api.github.com/users/rajarshimaitra/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rajarshimaitra/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "\"20 inbounds peers are protected from eviction.\" I am not being able to figure the rationale behind this number 20. ",
    "created_at": "2020-06-02T10:24:08Z",
    "updated_at": "2020-06-06T20:31:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r433774397",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/433774397"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r433774397"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/433774397/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 45,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/433778562",
    "pull_request_review_id": 422508204,
    "id": 433778562,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc3ODU2Mg==",
    "diff_hunk": "@@ -0,0 +1,141 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\" Test node eviction logic\n+\n+When the number of peers has reached the limit of maximum connections,\n+the next connecting inbound peer will trigger the eviction mechanism.\n+We cannot currently test the parts of the eviction logic that are based on\n+address/netgroup since in the current framework, all peers are connecting from\n+the same local address. See Issue #14210 for more info.\n+\n+Therefore, this test is limited to the remaining protection criteria:\n+1.) Protect 4 nodes having sent us a block most recently\n+2.) Protect 4 nodes having sent us a transaction most recently\n+3.) Protect 8 nodes with the smallest minimum ping\n+\"\"\"\n+\n+import time\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mininode import P2PInterface, P2PDataStore\n+from test_framework.util import assert_equal, wait_until\n+from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.messages import CTransaction, FromHex, msg_pong, msg_tx\n+\n+\n+class SlowP2PDataStore(P2PDataStore):\n+    def on_ping(self, message):\n+        time.sleep(0.1)\n+        self.send_message(msg_pong(message.nonce))\n+\n+class SlowP2PInterface(P2PInterface):\n+    def on_ping(self, message):\n+        time.sleep(0.1)\n+        self.send_message(msg_pong(message.nonce))\n+\n+\n+class P2PEvict(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        # The choice of 32 maxconnections results in a maximum of 21 inbound connections\n+        # (32 - 10 outbound - 1 feeler). 20 inbounds peers are protected from eviction.\n+        self.extra_args = [['-maxconnections=32']]\n+\n+    def setup_network(self):\n+        self.setup_nodes()\n+\n+    def run_test(self):\n+        self.protected_peers = set() # peers that we expect to be protected from eviction\n+        current_peer = 0\n+        node = self.nodes[0]\n+        node.generatetoaddress(101, node.get_deterministic_priv_key().address)\n+\n+        # The first 4 peers send us a block, protecting them from eviction.\n+        for _ in range(4):\n+            block_peer = node.add_p2p_connection(SlowP2PDataStore())\n+            current_peer += 1\n+            block_peer.sync_with_ping(timeout=5)\n+            best_block = node.getbestblockhash()\n+            tip = int(best_block, 16)\n+            best_block_time = node.getblock(best_block)['time']\n+            block = create_block(tip, create_coinbase(node.getblockcount() + 1), best_block_time + 1)\n+            block.solve()\n+            block_peer.send_blocks_and_test([block], node, success=True)\n+            self.protected_peers.add(current_peer)\n+\n+        # The next 5 nodes are slow-pinging peers, making them eviction candidates.\n+        for _ in range(5):\n+            node.add_p2p_connection(SlowP2PInterface())\n+            current_peer += 1\n+\n+\n+        #The next 4 peers send us a tx, protecting them from eviction\n+        for i in range(4):\n+            txpeer = node.add_p2p_connection(SlowP2PInterface())\n+            current_peer += 1\n+            txpeer.sync_with_ping(timeout=5)\n+\n+            prevtx = node.getblock(node.getblockhash(i+1), 2)['tx'][0]\n+            rawtx = node.createrawtransaction(\n+                inputs=[{'txid': prevtx['txid'], 'vout': 0}],\n+                outputs=[{node.get_deterministic_priv_key().address: 50 - 0.00125}],\n+            )\n+            sigtx = node.signrawtransactionwithkey(\n+                hexstring=rawtx,\n+                privkeys=[node.get_deterministic_priv_key().key],\n+                prevtxs=[{\n+                    'txid': prevtx['txid'],\n+                    'vout': 0,\n+                    'scriptPubKey': prevtx['vout'][0]['scriptPubKey']['hex'],\n+                }],\n+            )['hex']\n+            txpeer.send_message(msg_tx(FromHex(CTransaction(), sigtx)))\n+            self.protected_peers.add(current_peer)\n+\n+        # The next 8 peers have faster pings, which will usually protect them from eviction.\n+        for _ in range(8):\n+            fastpeer = node.add_p2p_connection(P2PInterface())\n+            current_peer += 1\n+            wait_until(lambda: \"ping\" in fastpeer.last_message, timeout=10)\n+\n+        # Make sure by asking the node what the actual min pings are\n+        peerinfo = node.getpeerinfo()\n+        pings = [[0 for i in range(2)] for j in range(len(node.p2ps))]\n+\n+        # After adding 21 peers, the next one hits the maxconnection limit and triggers the eviction mechanism.\n+        node.add_p2p_connection(SlowP2PInterface())\n+\n+        # Usually the 8 fast peers are protected. In rare case of unreliable pings,\n+        # one of the slower peers might have a faster min ping though.\n+        for i in range(len(peerinfo)):\n+            pings[i][0] = i\n+            pings[i][1] = peerinfo[i]['minping'] if 'minping' in peerinfo[i] else 1000000\n+\n+        sorted_pings = sorted(pings, key = lambda x:x[1])\n+\n+        for i in range(8):\n+            self.protected_peers.add(sorted_pings[i][0])\n+\n+        # One of the non-protected peers must be evicted. We can't be sure which one because\n+        # 4 peers are protected via netgroup, which is identical for all peers,",
    "path": "test/functional/p2p_eviction.py",
    "position": 113,
    "original_position": 124,
    "commit_id": "45eff751c6d07007dabc365dc4c0e6c63e3fe5cf",
    "original_commit_id": "3758af78564e9a0e059f38c11e941d68be192fb6",
    "user": {
      "login": "rajarshimaitra",
      "id": 36541669,
      "node_id": "MDQ6VXNlcjM2NTQxNjY5",
      "avatar_url": "https://avatars.githubusercontent.com/u/36541669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rajarshimaitra",
      "html_url": "https://github.com/rajarshimaitra",
      "followers_url": "https://api.github.com/users/rajarshimaitra/followers",
      "following_url": "https://api.github.com/users/rajarshimaitra/following{/other_user}",
      "gists_url": "https://api.github.com/users/rajarshimaitra/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rajarshimaitra/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rajarshimaitra/subscriptions",
      "organizations_url": "https://api.github.com/users/rajarshimaitra/orgs",
      "repos_url": "https://api.github.com/users/rajarshimaitra/repos",
      "events_url": "https://api.github.com/users/rajarshimaitra/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rajarshimaitra/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This is coming a little confusing for me, which 4 peers are protected via netgroup? If i understand correctly for functional testing all the peers are from same netgroup. So there's no way to differentiate between them via IP addresses. Is this what this comment is trying to convey? ",
    "created_at": "2020-06-02T10:32:32Z",
    "updated_at": "2020-06-06T20:31:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r433778562",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/433778562"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r433778562"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/433778562/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 113,
    "original_line": 113,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/433832438",
    "pull_request_review_id": 422618758,
    "id": 433832438,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzgzMjQzOA==",
    "diff_hunk": "@@ -0,0 +1,141 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\" Test node eviction logic\n+\n+When the number of peers has reached the limit of maximum connections,\n+the next connecting inbound peer will trigger the eviction mechanism.\n+We cannot currently test the parts of the eviction logic that are based on\n+address/netgroup since in the current framework, all peers are connecting from\n+the same local address. See Issue #14210 for more info.\n+\n+Therefore, this test is limited to the remaining protection criteria:\n+1.) Protect 4 nodes having sent us a block most recently\n+2.) Protect 4 nodes having sent us a transaction most recently\n+3.) Protect 8 nodes with the smallest minimum ping\n+\"\"\"\n+\n+import time\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mininode import P2PInterface, P2PDataStore\n+from test_framework.util import assert_equal, wait_until\n+from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.messages import CTransaction, FromHex, msg_pong, msg_tx\n+\n+\n+class SlowP2PDataStore(P2PDataStore):\n+    def on_ping(self, message):\n+        time.sleep(0.1)\n+        self.send_message(msg_pong(message.nonce))\n+\n+class SlowP2PInterface(P2PInterface):\n+    def on_ping(self, message):\n+        time.sleep(0.1)\n+        self.send_message(msg_pong(message.nonce))\n+\n+\n+class P2PEvict(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        # The choice of 32 maxconnections results in a maximum of 21 inbound connections\n+        # (32 - 10 outbound - 1 feeler). 20 inbounds peers are protected from eviction.\n+        self.extra_args = [['-maxconnections=32']]\n+\n+    def setup_network(self):\n+        self.setup_nodes()\n+\n+    def run_test(self):\n+        self.protected_peers = set() # peers that we expect to be protected from eviction\n+        current_peer = 0\n+        node = self.nodes[0]\n+        node.generatetoaddress(101, node.get_deterministic_priv_key().address)\n+\n+        # The first 4 peers send us a block, protecting them from eviction.\n+        for _ in range(4):\n+            block_peer = node.add_p2p_connection(SlowP2PDataStore())\n+            current_peer += 1\n+            block_peer.sync_with_ping(timeout=5)\n+            best_block = node.getbestblockhash()\n+            tip = int(best_block, 16)\n+            best_block_time = node.getblock(best_block)['time']\n+            block = create_block(tip, create_coinbase(node.getblockcount() + 1), best_block_time + 1)\n+            block.solve()\n+            block_peer.send_blocks_and_test([block], node, success=True)\n+            self.protected_peers.add(current_peer)\n+\n+        # The next 5 nodes are slow-pinging peers, making them eviction candidates.\n+        for _ in range(5):\n+            node.add_p2p_connection(SlowP2PInterface())\n+            current_peer += 1\n+",
    "path": "test/functional/p2p_eviction.py",
    "position": 67,
    "original_position": 74,
    "commit_id": "45eff751c6d07007dabc365dc4c0e6c63e3fe5cf",
    "original_commit_id": "3758af78564e9a0e059f38c11e941d68be192fb6",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: double new-line",
    "created_at": "2020-06-02T12:20:24Z",
    "updated_at": "2020-06-06T20:31:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r433832438",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/433832438"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r433832438"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/433832438/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 67,
    "original_line": 67,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/433857615",
    "pull_request_review_id": 422652909,
    "id": 433857615,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg1NzYxNQ==",
    "diff_hunk": "@@ -0,0 +1,141 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\" Test node eviction logic\n+\n+When the number of peers has reached the limit of maximum connections,\n+the next connecting inbound peer will trigger the eviction mechanism.\n+We cannot currently test the parts of the eviction logic that are based on\n+address/netgroup since in the current framework, all peers are connecting from\n+the same local address. See Issue #14210 for more info.\n+\n+Therefore, this test is limited to the remaining protection criteria:\n+1.) Protect 4 nodes having sent us a block most recently\n+2.) Protect 4 nodes having sent us a transaction most recently\n+3.) Protect 8 nodes with the smallest minimum ping\n+\"\"\"\n+\n+import time\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mininode import P2PInterface, P2PDataStore\n+from test_framework.util import assert_equal, wait_until\n+from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.messages import CTransaction, FromHex, msg_pong, msg_tx\n+\n+\n+class SlowP2PDataStore(P2PDataStore):\n+    def on_ping(self, message):\n+        time.sleep(0.1)\n+        self.send_message(msg_pong(message.nonce))\n+\n+class SlowP2PInterface(P2PInterface):\n+    def on_ping(self, message):\n+        time.sleep(0.1)\n+        self.send_message(msg_pong(message.nonce))\n+\n+\n+class P2PEvict(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        # The choice of 32 maxconnections results in a maximum of 21 inbound connections\n+        # (32 - 10 outbound - 1 feeler). 20 inbounds peers are protected from eviction.\n+        self.extra_args = [['-maxconnections=32']]\n+\n+    def setup_network(self):\n+        self.setup_nodes()\n+\n+    def run_test(self):\n+        self.protected_peers = set() # peers that we expect to be protected from eviction\n+        current_peer = 0\n+        node = self.nodes[0]\n+        node.generatetoaddress(101, node.get_deterministic_priv_key().address)\n+\n+        # The first 4 peers send us a block, protecting them from eviction.\n+        for _ in range(4):\n+            block_peer = node.add_p2p_connection(SlowP2PDataStore())\n+            current_peer += 1\n+            block_peer.sync_with_ping(timeout=5)\n+            best_block = node.getbestblockhash()\n+            tip = int(best_block, 16)\n+            best_block_time = node.getblock(best_block)['time']\n+            block = create_block(tip, create_coinbase(node.getblockcount() + 1), best_block_time + 1)\n+            block.solve()\n+            block_peer.send_blocks_and_test([block], node, success=True)\n+            self.protected_peers.add(current_peer)\n+\n+        # The next 5 nodes are slow-pinging peers, making them eviction candidates.\n+        for _ in range(5):\n+            node.add_p2p_connection(SlowP2PInterface())\n+            current_peer += 1\n+\n+\n+        #The next 4 peers send us a tx, protecting them from eviction\n+        for i in range(4):\n+            txpeer = node.add_p2p_connection(SlowP2PInterface())\n+            current_peer += 1\n+            txpeer.sync_with_ping(timeout=5)\n+\n+            prevtx = node.getblock(node.getblockhash(i+1), 2)['tx'][0]\n+            rawtx = node.createrawtransaction(\n+                inputs=[{'txid': prevtx['txid'], 'vout': 0}],\n+                outputs=[{node.get_deterministic_priv_key().address: 50 - 0.00125}],\n+            )\n+            sigtx = node.signrawtransactionwithkey(\n+                hexstring=rawtx,\n+                privkeys=[node.get_deterministic_priv_key().key],\n+                prevtxs=[{\n+                    'txid': prevtx['txid'],\n+                    'vout': 0,\n+                    'scriptPubKey': prevtx['vout'][0]['scriptPubKey']['hex'],\n+                }],\n+            )['hex']\n+            txpeer.send_message(msg_tx(FromHex(CTransaction(), sigtx)))\n+            self.protected_peers.add(current_peer)\n+\n+        # The next 8 peers have faster pings, which will usually protect them from eviction.\n+        for _ in range(8):\n+            fastpeer = node.add_p2p_connection(P2PInterface())\n+            current_peer += 1\n+            wait_until(lambda: \"ping\" in fastpeer.last_message, timeout=10)\n+\n+        # Make sure by asking the node what the actual min pings are\n+        peerinfo = node.getpeerinfo()\n+        pings = [[0 for i in range(2)] for j in range(len(node.p2ps))]\n+\n+        # After adding 21 peers, the next one hits the maxconnection limit and triggers the eviction mechanism.\n+        node.add_p2p_connection(SlowP2PInterface())\n+\n+        # Usually the 8 fast peers are protected. In rare case of unreliable pings,\n+        # one of the slower peers might have a faster min ping though.\n+        for i in range(len(peerinfo)):\n+            pings[i][0] = i\n+            pings[i][1] = peerinfo[i]['minping'] if 'minping' in peerinfo[i] else 1000000\n+\n+        sorted_pings = sorted(pings, key = lambda x:x[1])\n+\n+        for i in range(8):\n+            self.protected_peers.add(sorted_pings[i][0])\n+\n+        # One of the non-protected peers must be evicted. We can't be sure which one because\n+        # 4 peers are protected via netgroup, which is identical for all peers,\n+        # and the eviction mechanism doesn't preserve the order of identical elements.\n+        self.evicted_peers = []\n+        for i in range(len(node.p2ps)):\n+            if(node.p2ps[i].is_connected == False ) :\n+                self.evicted_peers.append(i)\n+\n+        self.log.info(\"Test that one peer was evicted\")\n+        assert_equal(len(self.evicted_peers), 1)\n+        self.log.debug(\"{} evicted peer: {}\".format(len(self.evicted_peers), set(self.evicted_peers)))\n+\n+        self.log.info(\"Test that no peer expected to be protected was evicted\")\n+        assert_equal(self.evicted_peers[0] in self.protected_peers, False)",
    "path": "test/functional/p2p_eviction.py",
    "position": null,
    "original_position": 136,
    "commit_id": "45eff751c6d07007dabc365dc4c0e6c63e3fe5cf",
    "original_commit_id": "3758af78564e9a0e059f38c11e941d68be192fb6",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "style nit: assertion here is about exclusion, not equality; I think the idiomatic assertion in the tests codebase would be\r\n```suggestion\r\n        assert self.evicted_peers[0] not in self.protected_peers\r\n```",
    "created_at": "2020-06-02T13:03:34Z",
    "updated_at": "2020-06-06T20:31:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r433857615",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/433857615"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r433857615"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/433857615/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 136,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/433858693",
    "pull_request_review_id": 422652909,
    "id": 433858693,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg1ODY5Mw==",
    "diff_hunk": "@@ -0,0 +1,141 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\" Test node eviction logic\n+\n+When the number of peers has reached the limit of maximum connections,\n+the next connecting inbound peer will trigger the eviction mechanism.\n+We cannot currently test the parts of the eviction logic that are based on\n+address/netgroup since in the current framework, all peers are connecting from\n+the same local address. See Issue #14210 for more info.\n+\n+Therefore, this test is limited to the remaining protection criteria:\n+1.) Protect 4 nodes having sent us a block most recently\n+2.) Protect 4 nodes having sent us a transaction most recently\n+3.) Protect 8 nodes with the smallest minimum ping\n+\"\"\"\n+\n+import time\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mininode import P2PInterface, P2PDataStore\n+from test_framework.util import assert_equal, wait_until\n+from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.messages import CTransaction, FromHex, msg_pong, msg_tx\n+\n+\n+class SlowP2PDataStore(P2PDataStore):\n+    def on_ping(self, message):\n+        time.sleep(0.1)\n+        self.send_message(msg_pong(message.nonce))\n+\n+class SlowP2PInterface(P2PInterface):\n+    def on_ping(self, message):\n+        time.sleep(0.1)\n+        self.send_message(msg_pong(message.nonce))\n+\n+\n+class P2PEvict(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        # The choice of 32 maxconnections results in a maximum of 21 inbound connections\n+        # (32 - 10 outbound - 1 feeler). 20 inbounds peers are protected from eviction.\n+        self.extra_args = [['-maxconnections=32']]\n+\n+    def setup_network(self):\n+        self.setup_nodes()\n+\n+    def run_test(self):\n+        self.protected_peers = set() # peers that we expect to be protected from eviction\n+        current_peer = 0\n+        node = self.nodes[0]\n+        node.generatetoaddress(101, node.get_deterministic_priv_key().address)\n+\n+        # The first 4 peers send us a block, protecting them from eviction.\n+        for _ in range(4):\n+            block_peer = node.add_p2p_connection(SlowP2PDataStore())\n+            current_peer += 1\n+            block_peer.sync_with_ping(timeout=5)\n+            best_block = node.getbestblockhash()\n+            tip = int(best_block, 16)\n+            best_block_time = node.getblock(best_block)['time']\n+            block = create_block(tip, create_coinbase(node.getblockcount() + 1), best_block_time + 1)\n+            block.solve()\n+            block_peer.send_blocks_and_test([block], node, success=True)\n+            self.protected_peers.add(current_peer)\n+\n+        # The next 5 nodes are slow-pinging peers, making them eviction candidates.\n+        for _ in range(5):\n+            node.add_p2p_connection(SlowP2PInterface())\n+            current_peer += 1\n+\n+\n+        #The next 4 peers send us a tx, protecting them from eviction\n+        for i in range(4):\n+            txpeer = node.add_p2p_connection(SlowP2PInterface())\n+            current_peer += 1\n+            txpeer.sync_with_ping(timeout=5)\n+\n+            prevtx = node.getblock(node.getblockhash(i+1), 2)['tx'][0]\n+            rawtx = node.createrawtransaction(\n+                inputs=[{'txid': prevtx['txid'], 'vout': 0}],\n+                outputs=[{node.get_deterministic_priv_key().address: 50 - 0.00125}],\n+            )\n+            sigtx = node.signrawtransactionwithkey(\n+                hexstring=rawtx,\n+                privkeys=[node.get_deterministic_priv_key().key],\n+                prevtxs=[{\n+                    'txid': prevtx['txid'],\n+                    'vout': 0,\n+                    'scriptPubKey': prevtx['vout'][0]['scriptPubKey']['hex'],\n+                }],\n+            )['hex']\n+            txpeer.send_message(msg_tx(FromHex(CTransaction(), sigtx)))\n+            self.protected_peers.add(current_peer)\n+\n+        # The next 8 peers have faster pings, which will usually protect them from eviction.\n+        for _ in range(8):\n+            fastpeer = node.add_p2p_connection(P2PInterface())\n+            current_peer += 1\n+            wait_until(lambda: \"ping\" in fastpeer.last_message, timeout=10)\n+\n+        # Make sure by asking the node what the actual min pings are\n+        peerinfo = node.getpeerinfo()\n+        pings = [[0 for i in range(2)] for j in range(len(node.p2ps))]\n+\n+        # After adding 21 peers, the next one hits the maxconnection limit and triggers the eviction mechanism.\n+        node.add_p2p_connection(SlowP2PInterface())\n+\n+        # Usually the 8 fast peers are protected. In rare case of unreliable pings,\n+        # one of the slower peers might have a faster min ping though.\n+        for i in range(len(peerinfo)):\n+            pings[i][0] = i\n+            pings[i][1] = peerinfo[i]['minping'] if 'minping' in peerinfo[i] else 1000000\n+\n+        sorted_pings = sorted(pings, key = lambda x:x[1])\n+\n+        for i in range(8):\n+            self.protected_peers.add(sorted_pings[i][0])\n+\n+        # One of the non-protected peers must be evicted. We can't be sure which one because\n+        # 4 peers are protected via netgroup, which is identical for all peers,\n+        # and the eviction mechanism doesn't preserve the order of identical elements.\n+        self.evicted_peers = []\n+        for i in range(len(node.p2ps)):\n+            if(node.p2ps[i].is_connected == False ) :\n+                self.evicted_peers.append(i)\n+\n+        self.log.info(\"Test that one peer was evicted\")\n+        assert_equal(len(self.evicted_peers), 1)\n+        self.log.debug(\"{} evicted peer: {}\".format(len(self.evicted_peers), set(self.evicted_peers)))\n+\n+        self.log.info(\"Test that no peer expected to be protected was evicted\")\n+        assert_equal(self.evicted_peers[0] in self.protected_peers, False)\n+        self.log.debug(\"{} protected peers: {}\".format(len(self.protected_peers), self.protected_peers))",
    "path": "test/functional/p2p_eviction.py",
    "position": null,
    "original_position": 137,
    "commit_id": "45eff751c6d07007dabc365dc4c0e6c63e3fe5cf",
    "original_commit_id": "3758af78564e9a0e059f38c11e941d68be192fb6",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In case of assertion failure, these debug logs would be helpful to see. I'd suggest placing them before the assertions here and line 133.",
    "created_at": "2020-06-02T13:05:19Z",
    "updated_at": "2020-06-06T20:31:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r433858693",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/433858693"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r433858693"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/433858693/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 132,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/433861797",
    "pull_request_review_id": 422652909,
    "id": 433861797,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg2MTc5Nw==",
    "diff_hunk": "@@ -0,0 +1,141 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\" Test node eviction logic\n+\n+When the number of peers has reached the limit of maximum connections,\n+the next connecting inbound peer will trigger the eviction mechanism.\n+We cannot currently test the parts of the eviction logic that are based on\n+address/netgroup since in the current framework, all peers are connecting from\n+the same local address. See Issue #14210 for more info.\n+\n+Therefore, this test is limited to the remaining protection criteria:\n+1.) Protect 4 nodes having sent us a block most recently\n+2.) Protect 4 nodes having sent us a transaction most recently\n+3.) Protect 8 nodes with the smallest minimum ping\n+\"\"\"\n+\n+import time\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mininode import P2PInterface, P2PDataStore\n+from test_framework.util import assert_equal, wait_until\n+from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.messages import CTransaction, FromHex, msg_pong, msg_tx\n+\n+\n+class SlowP2PDataStore(P2PDataStore):\n+    def on_ping(self, message):\n+        time.sleep(0.1)\n+        self.send_message(msg_pong(message.nonce))\n+\n+class SlowP2PInterface(P2PInterface):\n+    def on_ping(self, message):\n+        time.sleep(0.1)\n+        self.send_message(msg_pong(message.nonce))\n+\n+\n+class P2PEvict(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        # The choice of 32 maxconnections results in a maximum of 21 inbound connections\n+        # (32 - 10 outbound - 1 feeler). 20 inbounds peers are protected from eviction.\n+        self.extra_args = [['-maxconnections=32']]\n+\n+    def setup_network(self):\n+        self.setup_nodes()\n+",
    "path": "test/functional/p2p_eviction.py",
    "position": null,
    "original_position": 50,
    "commit_id": "45eff751c6d07007dabc365dc4c0e6c63e3fe5cf",
    "original_commit_id": "3758af78564e9a0e059f38c11e941d68be192fb6",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Is this needed?\r\n```diff\r\n-    def setup_network(self):\r\n-        self.setup_nodes()\r\n-\r\n```",
    "created_at": "2020-06-02T13:10:16Z",
    "updated_at": "2020-06-06T20:31:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r433861797",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/433861797"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r433861797"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/433861797/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 50,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/433864763",
    "pull_request_review_id": 422652909,
    "id": 433864763,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg2NDc2Mw==",
    "diff_hunk": "@@ -0,0 +1,141 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\" Test node eviction logic\n+\n+When the number of peers has reached the limit of maximum connections,\n+the next connecting inbound peer will trigger the eviction mechanism.\n+We cannot currently test the parts of the eviction logic that are based on\n+address/netgroup since in the current framework, all peers are connecting from\n+the same local address. See Issue #14210 for more info.\n+\n+Therefore, this test is limited to the remaining protection criteria:\n+1.) Protect 4 nodes having sent us a block most recently\n+2.) Protect 4 nodes having sent us a transaction most recently\n+3.) Protect 8 nodes with the smallest minimum ping\n+\"\"\"\n+\n+import time\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mininode import P2PInterface, P2PDataStore\n+from test_framework.util import assert_equal, wait_until\n+from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.messages import CTransaction, FromHex, msg_pong, msg_tx\n+\n+\n+class SlowP2PDataStore(P2PDataStore):\n+    def on_ping(self, message):\n+        time.sleep(0.1)\n+        self.send_message(msg_pong(message.nonce))\n+\n+class SlowP2PInterface(P2PInterface):\n+    def on_ping(self, message):\n+        time.sleep(0.1)\n+        self.send_message(msg_pong(message.nonce))\n+\n+\n+class P2PEvict(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        # The choice of 32 maxconnections results in a maximum of 21 inbound connections\n+        # (32 - 10 outbound - 1 feeler). 20 inbounds peers are protected from eviction.\n+        self.extra_args = [['-maxconnections=32']]\n+\n+    def setup_network(self):\n+        self.setup_nodes()\n+",
    "path": "test/functional/p2p_eviction.py",
    "position": null,
    "original_position": 50,
    "commit_id": "45eff751c6d07007dabc365dc4c0e6c63e3fe5cf",
    "original_commit_id": "3758af78564e9a0e059f38c11e941d68be192fb6",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think it would be good to separate the lengthy setup from the tests, per https://github.com/jonatack/bitcoin/commit/c9e96a1, and/or at least add logging at the start of the setup:\r\n```diff\r\n    def run_test(self):\r\n+        self.log.info(\"Set up test peer network\")\r\n+        self.setup_test_peers()\r\n```\r\nThe test takes a bit of time to get started, and logging provides useful feedback on how much time is spent in your custom setup (adding the logging shows the custom setup takes ~5 seconds on my laptop) which can also potentially help optimise it.",
    "created_at": "2020-06-02T13:14:45Z",
    "updated_at": "2020-06-06T20:31:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r433864763",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/433864763"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r433864763"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/433864763/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 50,
    "side": "RIGHT",
    "in_reply_to_id": 433861797
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434016124",
    "pull_request_review_id": 422858395,
    "id": 434016124,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAxNjEyNA==",
    "diff_hunk": "@@ -0,0 +1,141 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\" Test node eviction logic\n+\n+When the number of peers has reached the limit of maximum connections,\n+the next connecting inbound peer will trigger the eviction mechanism.\n+We cannot currently test the parts of the eviction logic that are based on\n+address/netgroup since in the current framework, all peers are connecting from\n+the same local address. See Issue #14210 for more info.\n+\n+Therefore, this test is limited to the remaining protection criteria:\n+1.) Protect 4 nodes having sent us a block most recently\n+2.) Protect 4 nodes having sent us a transaction most recently\n+3.) Protect 8 nodes with the smallest minimum ping\n+\"\"\"\n+\n+import time\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mininode import P2PInterface, P2PDataStore\n+from test_framework.util import assert_equal, wait_until\n+from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.messages import CTransaction, FromHex, msg_pong, msg_tx\n+\n+\n+class SlowP2PDataStore(P2PDataStore):\n+    def on_ping(self, message):\n+        time.sleep(0.1)\n+        self.send_message(msg_pong(message.nonce))\n+\n+class SlowP2PInterface(P2PInterface):\n+    def on_ping(self, message):\n+        time.sleep(0.1)\n+        self.send_message(msg_pong(message.nonce))\n+\n+\n+class P2PEvict(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        # The choice of 32 maxconnections results in a maximum of 21 inbound connections\n+        # (32 - 10 outbound - 1 feeler). 20 inbounds peers are protected from eviction.\n+        self.extra_args = [['-maxconnections=32']]\n+\n+    def setup_network(self):\n+        self.setup_nodes()\n+\n+    def run_test(self):\n+        self.protected_peers = set() # peers that we expect to be protected from eviction\n+        current_peer = 0\n+        node = self.nodes[0]\n+        node.generatetoaddress(101, node.get_deterministic_priv_key().address)\n+\n+        # The first 4 peers send us a block, protecting them from eviction.",
    "path": "test/functional/p2p_eviction.py",
    "position": null,
    "original_position": 57,
    "commit_id": "45eff751c6d07007dabc365dc4c0e6c63e3fe5cf",
    "original_commit_id": "3758af78564e9a0e059f38c11e941d68be192fb6",
    "user": {
      "login": "andrewtoth",
      "id": 237213,
      "node_id": "MDQ6VXNlcjIzNzIxMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/andrewtoth",
      "html_url": "https://github.com/andrewtoth",
      "followers_url": "https://api.github.com/users/andrewtoth/followers",
      "following_url": "https://api.github.com/users/andrewtoth/following{/other_user}",
      "gists_url": "https://api.github.com/users/andrewtoth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/andrewtoth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
      "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
      "repos_url": "https://api.github.com/users/andrewtoth/repos",
      "events_url": "https://api.github.com/users/andrewtoth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "These single line comments above each `for` block might be more helpful as logs. Rationale https://github.com/bitcoin/bitcoin/blob/master/test/functional/README.md#general-test-writing-advice\r\n```suggestion\r\n        self.log.info(\"Create the first 4 peers and protect them from eviction by sending us a block.\")\r\n```",
    "created_at": "2020-06-02T16:34:13Z",
    "updated_at": "2020-06-06T20:31:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r434016124",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434016124"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r434016124"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434016124/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 57,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434021531",
    "pull_request_review_id": 422865250,
    "id": 434021531,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAyMTUzMQ==",
    "diff_hunk": "@@ -0,0 +1,141 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\" Test node eviction logic\n+\n+When the number of peers has reached the limit of maximum connections,\n+the next connecting inbound peer will trigger the eviction mechanism.\n+We cannot currently test the parts of the eviction logic that are based on\n+address/netgroup since in the current framework, all peers are connecting from\n+the same local address. See Issue #14210 for more info.\n+\n+Therefore, this test is limited to the remaining protection criteria:\n+1.) Protect 4 nodes having sent us a block most recently\n+2.) Protect 4 nodes having sent us a transaction most recently\n+3.) Protect 8 nodes with the smallest minimum ping\n+\"\"\"\n+\n+import time\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mininode import P2PInterface, P2PDataStore\n+from test_framework.util import assert_equal, wait_until\n+from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.messages import CTransaction, FromHex, msg_pong, msg_tx\n+\n+\n+class SlowP2PDataStore(P2PDataStore):\n+    def on_ping(self, message):\n+        time.sleep(0.1)\n+        self.send_message(msg_pong(message.nonce))\n+\n+class SlowP2PInterface(P2PInterface):\n+    def on_ping(self, message):\n+        time.sleep(0.1)\n+        self.send_message(msg_pong(message.nonce))\n+\n+\n+class P2PEvict(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        # The choice of 32 maxconnections results in a maximum of 21 inbound connections\n+        # (32 - 10 outbound - 1 feeler). 20 inbounds peers are protected from eviction.",
    "path": "test/functional/p2p_eviction.py",
    "position": null,
    "original_position": 45,
    "commit_id": "45eff751c6d07007dabc365dc4c0e6c63e3fe5cf",
    "original_commit_id": "3758af78564e9a0e059f38c11e941d68be192fb6",
    "user": {
      "login": "andrewtoth",
      "id": 237213,
      "node_id": "MDQ6VXNlcjIzNzIxMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/andrewtoth",
      "html_url": "https://github.com/andrewtoth",
      "followers_url": "https://api.github.com/users/andrewtoth/followers",
      "following_url": "https://api.github.com/users/andrewtoth/following{/other_user}",
      "gists_url": "https://api.github.com/users/andrewtoth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/andrewtoth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
      "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
      "repos_url": "https://api.github.com/users/andrewtoth/repos",
      "events_url": "https://api.github.com/users/andrewtoth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I believe the 20 that are protected are:\r\n4 - netgroup (cannot be tested in this framework)\r\n4 - sent us blocks first\r\n4 - sent us transactions first\r\n8 - lowest ping time\r\n________________\r\n20 - total protected",
    "created_at": "2020-06-02T16:42:32Z",
    "updated_at": "2020-06-06T20:31:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r434021531",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434021531"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r434021531"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434021531/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 45,
    "side": "RIGHT",
    "in_reply_to_id": 433774397
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434024208",
    "pull_request_review_id": 422868728,
    "id": 434024208,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAyNDIwOA==",
    "diff_hunk": "@@ -0,0 +1,141 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\" Test node eviction logic\n+\n+When the number of peers has reached the limit of maximum connections,\n+the next connecting inbound peer will trigger the eviction mechanism.\n+We cannot currently test the parts of the eviction logic that are based on\n+address/netgroup since in the current framework, all peers are connecting from\n+the same local address. See Issue #14210 for more info.\n+\n+Therefore, this test is limited to the remaining protection criteria:\n+1.) Protect 4 nodes having sent us a block most recently\n+2.) Protect 4 nodes having sent us a transaction most recently\n+3.) Protect 8 nodes with the smallest minimum ping\n+\"\"\"\n+\n+import time\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mininode import P2PInterface, P2PDataStore\n+from test_framework.util import assert_equal, wait_until\n+from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.messages import CTransaction, FromHex, msg_pong, msg_tx\n+\n+\n+class SlowP2PDataStore(P2PDataStore):\n+    def on_ping(self, message):\n+        time.sleep(0.1)\n+        self.send_message(msg_pong(message.nonce))\n+\n+class SlowP2PInterface(P2PInterface):\n+    def on_ping(self, message):\n+        time.sleep(0.1)\n+        self.send_message(msg_pong(message.nonce))\n+\n+\n+class P2PEvict(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        # The choice of 32 maxconnections results in a maximum of 21 inbound connections\n+        # (32 - 10 outbound - 1 feeler). 20 inbounds peers are protected from eviction.",
    "path": "test/functional/p2p_eviction.py",
    "position": null,
    "original_position": 45,
    "commit_id": "45eff751c6d07007dabc365dc4c0e6c63e3fe5cf",
    "original_commit_id": "3758af78564e9a0e059f38c11e941d68be192fb6",
    "user": {
      "login": "andrewtoth",
      "id": 237213,
      "node_id": "MDQ6VXNlcjIzNzIxMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/andrewtoth",
      "html_url": "https://github.com/andrewtoth",
      "followers_url": "https://api.github.com/users/andrewtoth/followers",
      "following_url": "https://api.github.com/users/andrewtoth/following{/other_user}",
      "gists_url": "https://api.github.com/users/andrewtoth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/andrewtoth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
      "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
      "repos_url": "https://api.github.com/users/andrewtoth/repos",
      "events_url": "https://api.github.com/users/andrewtoth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Perhaps this would be helpful to clarify in the comments.",
    "created_at": "2020-06-02T16:46:57Z",
    "updated_at": "2020-06-06T20:31:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r434024208",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434024208"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r434024208"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434024208/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 45,
    "side": "RIGHT",
    "in_reply_to_id": 433774397
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434028341",
    "pull_request_review_id": 422874014,
    "id": 434028341,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAyODM0MQ==",
    "diff_hunk": "@@ -0,0 +1,141 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\" Test node eviction logic\n+\n+When the number of peers has reached the limit of maximum connections,\n+the next connecting inbound peer will trigger the eviction mechanism.\n+We cannot currently test the parts of the eviction logic that are based on\n+address/netgroup since in the current framework, all peers are connecting from\n+the same local address. See Issue #14210 for more info.\n+\n+Therefore, this test is limited to the remaining protection criteria:\n+1.) Protect 4 nodes having sent us a block most recently\n+2.) Protect 4 nodes having sent us a transaction most recently\n+3.) Protect 8 nodes with the smallest minimum ping\n+\"\"\"\n+\n+import time\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mininode import P2PInterface, P2PDataStore\n+from test_framework.util import assert_equal, wait_until\n+from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.messages import CTransaction, FromHex, msg_pong, msg_tx\n+\n+\n+class SlowP2PDataStore(P2PDataStore):\n+    def on_ping(self, message):\n+        time.sleep(0.1)\n+        self.send_message(msg_pong(message.nonce))\n+\n+class SlowP2PInterface(P2PInterface):\n+    def on_ping(self, message):\n+        time.sleep(0.1)\n+        self.send_message(msg_pong(message.nonce))\n+\n+\n+class P2PEvict(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        # The choice of 32 maxconnections results in a maximum of 21 inbound connections\n+        # (32 - 10 outbound - 1 feeler). 20 inbounds peers are protected from eviction.\n+        self.extra_args = [['-maxconnections=32']]\n+\n+    def setup_network(self):\n+        self.setup_nodes()\n+\n+    def run_test(self):\n+        self.protected_peers = set() # peers that we expect to be protected from eviction\n+        current_peer = 0\n+        node = self.nodes[0]\n+        node.generatetoaddress(101, node.get_deterministic_priv_key().address)\n+\n+        # The first 4 peers send us a block, protecting them from eviction.\n+        for _ in range(4):\n+            block_peer = node.add_p2p_connection(SlowP2PDataStore())\n+            current_peer += 1\n+            block_peer.sync_with_ping(timeout=5)\n+            best_block = node.getbestblockhash()\n+            tip = int(best_block, 16)\n+            best_block_time = node.getblock(best_block)['time']\n+            block = create_block(tip, create_coinbase(node.getblockcount() + 1), best_block_time + 1)\n+            block.solve()\n+            block_peer.send_blocks_and_test([block], node, success=True)\n+            self.protected_peers.add(current_peer)\n+\n+        # The next 5 nodes are slow-pinging peers, making them eviction candidates.\n+        for _ in range(5):\n+            node.add_p2p_connection(SlowP2PInterface())\n+            current_peer += 1\n+\n+\n+        #The next 4 peers send us a tx, protecting them from eviction\n+        for i in range(4):\n+            txpeer = node.add_p2p_connection(SlowP2PInterface())\n+            current_peer += 1\n+            txpeer.sync_with_ping(timeout=5)\n+\n+            prevtx = node.getblock(node.getblockhash(i+1), 2)['tx'][0]\n+            rawtx = node.createrawtransaction(\n+                inputs=[{'txid': prevtx['txid'], 'vout': 0}],\n+                outputs=[{node.get_deterministic_priv_key().address: 50 - 0.00125}],\n+            )\n+            sigtx = node.signrawtransactionwithkey(\n+                hexstring=rawtx,\n+                privkeys=[node.get_deterministic_priv_key().key],\n+                prevtxs=[{\n+                    'txid': prevtx['txid'],\n+                    'vout': 0,\n+                    'scriptPubKey': prevtx['vout'][0]['scriptPubKey']['hex'],\n+                }],\n+            )['hex']\n+            txpeer.send_message(msg_tx(FromHex(CTransaction(), sigtx)))\n+            self.protected_peers.add(current_peer)\n+\n+        # The next 8 peers have faster pings, which will usually protect them from eviction.\n+        for _ in range(8):\n+            fastpeer = node.add_p2p_connection(P2PInterface())\n+            current_peer += 1\n+            wait_until(lambda: \"ping\" in fastpeer.last_message, timeout=10)\n+\n+        # Make sure by asking the node what the actual min pings are\n+        peerinfo = node.getpeerinfo()\n+        pings = [[0 for i in range(2)] for j in range(len(node.p2ps))]\n+\n+        # After adding 21 peers, the next one hits the maxconnection limit and triggers the eviction mechanism.\n+        node.add_p2p_connection(SlowP2PInterface())\n+\n+        # Usually the 8 fast peers are protected. In rare case of unreliable pings,\n+        # one of the slower peers might have a faster min ping though.\n+        for i in range(len(peerinfo)):\n+            pings[i][0] = i\n+            pings[i][1] = peerinfo[i]['minping'] if 'minping' in peerinfo[i] else 1000000\n+\n+        sorted_pings = sorted(pings, key = lambda x:x[1])\n+\n+        for i in range(8):\n+            self.protected_peers.add(sorted_pings[i][0])\n+\n+        # One of the non-protected peers must be evicted. We can't be sure which one because\n+        # 4 peers are protected via netgroup, which is identical for all peers,",
    "path": "test/functional/p2p_eviction.py",
    "position": 113,
    "original_position": 124,
    "commit_id": "45eff751c6d07007dabc365dc4c0e6c63e3fe5cf",
    "original_commit_id": "3758af78564e9a0e059f38c11e941d68be192fb6",
    "user": {
      "login": "andrewtoth",
      "id": 237213,
      "node_id": "MDQ6VXNlcjIzNzIxMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/andrewtoth",
      "html_url": "https://github.com/andrewtoth",
      "followers_url": "https://api.github.com/users/andrewtoth/followers",
      "following_url": "https://api.github.com/users/andrewtoth/following{/other_user}",
      "gists_url": "https://api.github.com/users/andrewtoth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/andrewtoth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
      "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
      "repos_url": "https://api.github.com/users/andrewtoth/repos",
      "events_url": "https://api.github.com/users/andrewtoth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I believe these comments above try to convey this behaviour https://github.com/bitcoin/bitcoin/pull/16756/files#diff-96b7763a95e093580bd4507bce07ff22R10-R12",
    "created_at": "2020-06-02T16:53:36Z",
    "updated_at": "2020-06-06T20:31:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r434028341",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434028341"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r434028341"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434028341/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 113,
    "original_line": 113,
    "side": "RIGHT",
    "in_reply_to_id": 433778562
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434051903",
    "pull_request_review_id": 422903936,
    "id": 434051903,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA1MTkwMw==",
    "diff_hunk": "@@ -0,0 +1,141 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\" Test node eviction logic\n+\n+When the number of peers has reached the limit of maximum connections,\n+the next connecting inbound peer will trigger the eviction mechanism.\n+We cannot currently test the parts of the eviction logic that are based on\n+address/netgroup since in the current framework, all peers are connecting from\n+the same local address. See Issue #14210 for more info.\n+\n+Therefore, this test is limited to the remaining protection criteria:\n+1.) Protect 4 nodes having sent us a block most recently\n+2.) Protect 4 nodes having sent us a transaction most recently\n+3.) Protect 8 nodes with the smallest minimum ping\n+\"\"\"\n+\n+import time\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mininode import P2PInterface, P2PDataStore\n+from test_framework.util import assert_equal, wait_until\n+from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.messages import CTransaction, FromHex, msg_pong, msg_tx\n+\n+\n+class SlowP2PDataStore(P2PDataStore):\n+    def on_ping(self, message):\n+        time.sleep(0.1)\n+        self.send_message(msg_pong(message.nonce))\n+\n+class SlowP2PInterface(P2PInterface):\n+    def on_ping(self, message):\n+        time.sleep(0.1)\n+        self.send_message(msg_pong(message.nonce))\n+\n+\n+class P2PEvict(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        # The choice of 32 maxconnections results in a maximum of 21 inbound connections\n+        # (32 - 10 outbound - 1 feeler). 20 inbounds peers are protected from eviction.\n+        self.extra_args = [['-maxconnections=32']]\n+\n+    def setup_network(self):\n+        self.setup_nodes()\n+\n+    def run_test(self):\n+        self.protected_peers = set() # peers that we expect to be protected from eviction\n+        current_peer = 0\n+        node = self.nodes[0]\n+        node.generatetoaddress(101, node.get_deterministic_priv_key().address)\n+\n+        # The first 4 peers send us a block, protecting them from eviction.\n+        for _ in range(4):\n+            block_peer = node.add_p2p_connection(SlowP2PDataStore())\n+            current_peer += 1\n+            block_peer.sync_with_ping(timeout=5)\n+            best_block = node.getbestblockhash()\n+            tip = int(best_block, 16)\n+            best_block_time = node.getblock(best_block)['time']\n+            block = create_block(tip, create_coinbase(node.getblockcount() + 1), best_block_time + 1)\n+            block.solve()\n+            block_peer.send_blocks_and_test([block], node, success=True)\n+            self.protected_peers.add(current_peer)\n+\n+        # The next 5 nodes are slow-pinging peers, making them eviction candidates.\n+        for _ in range(5):\n+            node.add_p2p_connection(SlowP2PInterface())\n+            current_peer += 1\n+\n+\n+        #The next 4 peers send us a tx, protecting them from eviction\n+        for i in range(4):\n+            txpeer = node.add_p2p_connection(SlowP2PInterface())\n+            current_peer += 1\n+            txpeer.sync_with_ping(timeout=5)\n+\n+            prevtx = node.getblock(node.getblockhash(i+1), 2)['tx'][0]\n+            rawtx = node.createrawtransaction(\n+                inputs=[{'txid': prevtx['txid'], 'vout': 0}],\n+                outputs=[{node.get_deterministic_priv_key().address: 50 - 0.00125}],\n+            )\n+            sigtx = node.signrawtransactionwithkey(\n+                hexstring=rawtx,\n+                privkeys=[node.get_deterministic_priv_key().key],\n+                prevtxs=[{\n+                    'txid': prevtx['txid'],\n+                    'vout': 0,\n+                    'scriptPubKey': prevtx['vout'][0]['scriptPubKey']['hex'],\n+                }],\n+            )['hex']\n+            txpeer.send_message(msg_tx(FromHex(CTransaction(), sigtx)))\n+            self.protected_peers.add(current_peer)\n+\n+        # The next 8 peers have faster pings, which will usually protect them from eviction.\n+        for _ in range(8):\n+            fastpeer = node.add_p2p_connection(P2PInterface())\n+            current_peer += 1\n+            wait_until(lambda: \"ping\" in fastpeer.last_message, timeout=10)\n+\n+        # Make sure by asking the node what the actual min pings are\n+        peerinfo = node.getpeerinfo()\n+        pings = [[0 for i in range(2)] for j in range(len(node.p2ps))]\n+\n+        # After adding 21 peers, the next one hits the maxconnection limit and triggers the eviction mechanism.\n+        node.add_p2p_connection(SlowP2PInterface())\n+\n+        # Usually the 8 fast peers are protected. In rare case of unreliable pings,\n+        # one of the slower peers might have a faster min ping though.\n+        for i in range(len(peerinfo)):\n+            pings[i][0] = i\n+            pings[i][1] = peerinfo[i]['minping'] if 'minping' in peerinfo[i] else 1000000\n+\n+        sorted_pings = sorted(pings, key = lambda x:x[1])\n+\n+        for i in range(8):\n+            self.protected_peers.add(sorted_pings[i][0])\n+\n+        # One of the non-protected peers must be evicted. We can't be sure which one because\n+        # 4 peers are protected via netgroup, which is identical for all peers,",
    "path": "test/functional/p2p_eviction.py",
    "position": 113,
    "original_position": 124,
    "commit_id": "45eff751c6d07007dabc365dc4c0e6c63e3fe5cf",
    "original_commit_id": "3758af78564e9a0e059f38c11e941d68be192fb6",
    "user": {
      "login": "mzumsande",
      "id": 48763452,
      "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mzumsande",
      "html_url": "https://github.com/mzumsande",
      "followers_url": "https://api.github.com/users/mzumsande/followers",
      "following_url": "https://api.github.com/users/mzumsande/following{/other_user}",
      "gists_url": "https://api.github.com/users/mzumsande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
      "organizations_url": "https://api.github.com/users/mzumsande/orgs",
      "repos_url": "https://api.github.com/users/mzumsande/repos",
      "events_url": "https://api.github.com/users/mzumsande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mzumsande/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think it is impossible to say which peers are protected via netgroup because it can vary from run to run! \r\nSince A) this is the first check in `AttemptToEvictConnection()`  B) all test nodes have identical netgroup and C) `std::sort` does not guarantee to preserve the order of identical elements, this step should protect 4 arbitrary peers in the test. \r\nIf, for example, all 4 block-sending peers would be protected by  chance, then the later `EraseLastKElements` with `CompareNodeBlockTime` would operate on identical elements and erase 4 random peers from `vEvictionCandidates` (protecting them). \r\nThe assertion at the end only tests that no peer assumed to be protected will be evicted. Its protection might happen in the `EraseLastKElements` specific to its unique feature, or earlier by chance.",
    "created_at": "2020-06-02T17:32:51Z",
    "updated_at": "2020-06-06T20:31:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r434051903",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434051903"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r434051903"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434051903/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 113,
    "original_line": 113,
    "side": "RIGHT",
    "in_reply_to_id": 433778562
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434053946",
    "pull_request_review_id": 422906427,
    "id": 434053946,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA1Mzk0Ng==",
    "diff_hunk": "@@ -0,0 +1,141 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\" Test node eviction logic\n+\n+When the number of peers has reached the limit of maximum connections,\n+the next connecting inbound peer will trigger the eviction mechanism.\n+We cannot currently test the parts of the eviction logic that are based on\n+address/netgroup since in the current framework, all peers are connecting from\n+the same local address. See Issue #14210 for more info.\n+\n+Therefore, this test is limited to the remaining protection criteria:\n+1.) Protect 4 nodes having sent us a block most recently\n+2.) Protect 4 nodes having sent us a transaction most recently\n+3.) Protect 8 nodes with the smallest minimum ping\n+\"\"\"\n+\n+import time\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mininode import P2PInterface, P2PDataStore\n+from test_framework.util import assert_equal, wait_until\n+from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.messages import CTransaction, FromHex, msg_pong, msg_tx\n+\n+\n+class SlowP2PDataStore(P2PDataStore):\n+    def on_ping(self, message):\n+        time.sleep(0.1)\n+        self.send_message(msg_pong(message.nonce))\n+\n+class SlowP2PInterface(P2PInterface):\n+    def on_ping(self, message):\n+        time.sleep(0.1)\n+        self.send_message(msg_pong(message.nonce))\n+\n+\n+class P2PEvict(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        # The choice of 32 maxconnections results in a maximum of 21 inbound connections\n+        # (32 - 10 outbound - 1 feeler). 20 inbounds peers are protected from eviction.\n+        self.extra_args = [['-maxconnections=32']]\n+\n+    def setup_network(self):\n+        self.setup_nodes()\n+\n+    def run_test(self):\n+        self.protected_peers = set() # peers that we expect to be protected from eviction\n+        current_peer = 0\n+        node = self.nodes[0]\n+        node.generatetoaddress(101, node.get_deterministic_priv_key().address)\n+\n+        # The first 4 peers send us a block, protecting them from eviction.\n+        for _ in range(4):\n+            block_peer = node.add_p2p_connection(SlowP2PDataStore())\n+            current_peer += 1\n+            block_peer.sync_with_ping(timeout=5)\n+            best_block = node.getbestblockhash()\n+            tip = int(best_block, 16)\n+            best_block_time = node.getblock(best_block)['time']\n+            block = create_block(tip, create_coinbase(node.getblockcount() + 1), best_block_time + 1)\n+            block.solve()\n+            block_peer.send_blocks_and_test([block], node, success=True)\n+            self.protected_peers.add(current_peer)\n+\n+        # The next 5 nodes are slow-pinging peers, making them eviction candidates.\n+        for _ in range(5):\n+            node.add_p2p_connection(SlowP2PInterface())\n+            current_peer += 1\n+\n+\n+        #The next 4 peers send us a tx, protecting them from eviction\n+        for i in range(4):\n+            txpeer = node.add_p2p_connection(SlowP2PInterface())\n+            current_peer += 1\n+            txpeer.sync_with_ping(timeout=5)\n+\n+            prevtx = node.getblock(node.getblockhash(i+1), 2)['tx'][0]\n+            rawtx = node.createrawtransaction(\n+                inputs=[{'txid': prevtx['txid'], 'vout': 0}],\n+                outputs=[{node.get_deterministic_priv_key().address: 50 - 0.00125}],\n+            )\n+            sigtx = node.signrawtransactionwithkey(\n+                hexstring=rawtx,\n+                privkeys=[node.get_deterministic_priv_key().key],\n+                prevtxs=[{\n+                    'txid': prevtx['txid'],\n+                    'vout': 0,\n+                    'scriptPubKey': prevtx['vout'][0]['scriptPubKey']['hex'],\n+                }],\n+            )['hex']\n+            txpeer.send_message(msg_tx(FromHex(CTransaction(), sigtx)))\n+            self.protected_peers.add(current_peer)\n+\n+        # The next 8 peers have faster pings, which will usually protect them from eviction.\n+        for _ in range(8):\n+            fastpeer = node.add_p2p_connection(P2PInterface())\n+            current_peer += 1\n+            wait_until(lambda: \"ping\" in fastpeer.last_message, timeout=10)\n+\n+        # Make sure by asking the node what the actual min pings are\n+        peerinfo = node.getpeerinfo()\n+        pings = [[0 for i in range(2)] for j in range(len(node.p2ps))]\n+\n+        # After adding 21 peers, the next one hits the maxconnection limit and triggers the eviction mechanism.\n+        node.add_p2p_connection(SlowP2PInterface())\n+\n+        # Usually the 8 fast peers are protected. In rare case of unreliable pings,\n+        # one of the slower peers might have a faster min ping though.\n+        for i in range(len(peerinfo)):\n+            pings[i][0] = i\n+            pings[i][1] = peerinfo[i]['minping'] if 'minping' in peerinfo[i] else 1000000\n+\n+        sorted_pings = sorted(pings, key = lambda x:x[1])\n+\n+        for i in range(8):\n+            self.protected_peers.add(sorted_pings[i][0])",
    "path": "test/functional/p2p_eviction.py",
    "position": null,
    "original_position": 121,
    "commit_id": "45eff751c6d07007dabc365dc4c0e6c63e3fe5cf",
    "original_commit_id": "3758af78564e9a0e059f38c11e941d68be192fb6",
    "user": {
      "login": "mzumsande",
      "id": 48763452,
      "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mzumsande",
      "html_url": "https://github.com/mzumsande",
      "followers_url": "https://api.github.com/users/mzumsande/followers",
      "following_url": "https://api.github.com/users/mzumsande/following{/other_user}",
      "gists_url": "https://api.github.com/users/mzumsande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
      "organizations_url": "https://api.github.com/users/mzumsande/orgs",
      "repos_url": "https://api.github.com/users/mzumsande/repos",
      "events_url": "https://api.github.com/users/mzumsande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mzumsande/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Nice catch, I introduced this bug in the last push! Will fix later today.",
    "created_at": "2020-06-02T17:36:13Z",
    "updated_at": "2020-06-06T20:31:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r434053946",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434053946"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r434053946"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434053946/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 117,
    "side": "RIGHT",
    "in_reply_to_id": 433766480
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434204327",
    "pull_request_review_id": 423093612,
    "id": 434204327,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIwNDMyNw==",
    "diff_hunk": "@@ -0,0 +1,141 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\" Test node eviction logic\n+\n+When the number of peers has reached the limit of maximum connections,\n+the next connecting inbound peer will trigger the eviction mechanism.\n+We cannot currently test the parts of the eviction logic that are based on\n+address/netgroup since in the current framework, all peers are connecting from\n+the same local address. See Issue #14210 for more info.\n+\n+Therefore, this test is limited to the remaining protection criteria:\n+1.) Protect 4 nodes having sent us a block most recently\n+2.) Protect 4 nodes having sent us a transaction most recently\n+3.) Protect 8 nodes with the smallest minimum ping\n+\"\"\"\n+\n+import time\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mininode import P2PInterface, P2PDataStore\n+from test_framework.util import assert_equal, wait_until\n+from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.messages import CTransaction, FromHex, msg_pong, msg_tx\n+\n+\n+class SlowP2PDataStore(P2PDataStore):\n+    def on_ping(self, message):\n+        time.sleep(0.1)\n+        self.send_message(msg_pong(message.nonce))\n+\n+class SlowP2PInterface(P2PInterface):\n+    def on_ping(self, message):\n+        time.sleep(0.1)\n+        self.send_message(msg_pong(message.nonce))\n+\n+\n+class P2PEvict(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        # The choice of 32 maxconnections results in a maximum of 21 inbound connections\n+        # (32 - 10 outbound - 1 feeler). 20 inbounds peers are protected from eviction.\n+        self.extra_args = [['-maxconnections=32']]\n+\n+    def setup_network(self):\n+        self.setup_nodes()\n+\n+    def run_test(self):\n+        self.protected_peers = set() # peers that we expect to be protected from eviction\n+        current_peer = 0\n+        node = self.nodes[0]\n+        node.generatetoaddress(101, node.get_deterministic_priv_key().address)\n+\n+        # The first 4 peers send us a block, protecting them from eviction.\n+        for _ in range(4):\n+            block_peer = node.add_p2p_connection(SlowP2PDataStore())\n+            current_peer += 1\n+            block_peer.sync_with_ping(timeout=5)\n+            best_block = node.getbestblockhash()\n+            tip = int(best_block, 16)\n+            best_block_time = node.getblock(best_block)['time']\n+            block = create_block(tip, create_coinbase(node.getblockcount() + 1), best_block_time + 1)\n+            block.solve()\n+            block_peer.send_blocks_and_test([block], node, success=True)\n+            self.protected_peers.add(current_peer)\n+\n+        # The next 5 nodes are slow-pinging peers, making them eviction candidates.\n+        for _ in range(5):\n+            node.add_p2p_connection(SlowP2PInterface())\n+            current_peer += 1\n+\n+\n+        #The next 4 peers send us a tx, protecting them from eviction\n+        for i in range(4):\n+            txpeer = node.add_p2p_connection(SlowP2PInterface())\n+            current_peer += 1\n+            txpeer.sync_with_ping(timeout=5)\n+\n+            prevtx = node.getblock(node.getblockhash(i+1), 2)['tx'][0]\n+            rawtx = node.createrawtransaction(\n+                inputs=[{'txid': prevtx['txid'], 'vout': 0}],\n+                outputs=[{node.get_deterministic_priv_key().address: 50 - 0.00125}],\n+            )\n+            sigtx = node.signrawtransactionwithkey(\n+                hexstring=rawtx,\n+                privkeys=[node.get_deterministic_priv_key().key],\n+                prevtxs=[{\n+                    'txid': prevtx['txid'],\n+                    'vout': 0,\n+                    'scriptPubKey': prevtx['vout'][0]['scriptPubKey']['hex'],\n+                }],\n+            )['hex']\n+            txpeer.send_message(msg_tx(FromHex(CTransaction(), sigtx)))\n+            self.protected_peers.add(current_peer)\n+\n+        # The next 8 peers have faster pings, which will usually protect them from eviction.\n+        for _ in range(8):\n+            fastpeer = node.add_p2p_connection(P2PInterface())\n+            current_peer += 1\n+            wait_until(lambda: \"ping\" in fastpeer.last_message, timeout=10)\n+\n+        # Make sure by asking the node what the actual min pings are\n+        peerinfo = node.getpeerinfo()\n+        pings = [[0 for i in range(2)] for j in range(len(node.p2ps))]",
    "path": "test/functional/p2p_eviction.py",
    "position": null,
    "original_position": 107,
    "commit_id": "45eff751c6d07007dabc365dc4c0e6c63e3fe5cf",
    "original_commit_id": "3758af78564e9a0e059f38c11e941d68be192fb6",
    "user": {
      "login": "mzumsande",
      "id": 48763452,
      "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mzumsande",
      "html_url": "https://github.com/mzumsande",
      "followers_url": "https://api.github.com/users/mzumsande/followers",
      "following_url": "https://api.github.com/users/mzumsande/following{/other_user}",
      "gists_url": "https://api.github.com/users/mzumsande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
      "organizations_url": "https://api.github.com/users/mzumsande/orgs",
      "repos_url": "https://api.github.com/users/mzumsande/repos",
      "events_url": "https://api.github.com/users/mzumsande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mzumsande/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This is probably not material, but the reason is that I wanted to trigger the eviction mechanism immediately after the `getpeerinfo` call, so that the node does not get time to exchange additional pings with its peers while the test does other things. ",
    "created_at": "2020-06-02T22:13:15Z",
    "updated_at": "2020-06-06T20:31:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r434204327",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434204327"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r434204327"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434204327/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 105,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 103,
    "side": "RIGHT",
    "in_reply_to_id": 433748047
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434237203",
    "pull_request_review_id": 423132972,
    "id": 434237203,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIzNzIwMw==",
    "diff_hunk": "@@ -0,0 +1,141 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\" Test node eviction logic\n+\n+When the number of peers has reached the limit of maximum connections,\n+the next connecting inbound peer will trigger the eviction mechanism.\n+We cannot currently test the parts of the eviction logic that are based on\n+address/netgroup since in the current framework, all peers are connecting from\n+the same local address. See Issue #14210 for more info.\n+\n+Therefore, this test is limited to the remaining protection criteria:\n+1.) Protect 4 nodes having sent us a block most recently\n+2.) Protect 4 nodes having sent us a transaction most recently\n+3.) Protect 8 nodes with the smallest minimum ping\n+\"\"\"\n+\n+import time\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mininode import P2PInterface, P2PDataStore\n+from test_framework.util import assert_equal, wait_until\n+from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.messages import CTransaction, FromHex, msg_pong, msg_tx\n+\n+\n+class SlowP2PDataStore(P2PDataStore):\n+    def on_ping(self, message):\n+        time.sleep(0.1)\n+        self.send_message(msg_pong(message.nonce))\n+\n+class SlowP2PInterface(P2PInterface):\n+    def on_ping(self, message):\n+        time.sleep(0.1)\n+        self.send_message(msg_pong(message.nonce))\n+\n+\n+class P2PEvict(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        # The choice of 32 maxconnections results in a maximum of 21 inbound connections\n+        # (32 - 10 outbound - 1 feeler). 20 inbounds peers are protected from eviction.\n+        self.extra_args = [['-maxconnections=32']]\n+\n+    def setup_network(self):\n+        self.setup_nodes()\n+\n+    def run_test(self):\n+        self.protected_peers = set() # peers that we expect to be protected from eviction\n+        current_peer = 0\n+        node = self.nodes[0]\n+        node.generatetoaddress(101, node.get_deterministic_priv_key().address)\n+\n+        # The first 4 peers send us a block, protecting them from eviction.\n+        for _ in range(4):\n+            block_peer = node.add_p2p_connection(SlowP2PDataStore())\n+            current_peer += 1\n+            block_peer.sync_with_ping(timeout=5)\n+            best_block = node.getbestblockhash()\n+            tip = int(best_block, 16)\n+            best_block_time = node.getblock(best_block)['time']\n+            block = create_block(tip, create_coinbase(node.getblockcount() + 1), best_block_time + 1)\n+            block.solve()\n+            block_peer.send_blocks_and_test([block], node, success=True)\n+            self.protected_peers.add(current_peer)\n+\n+        # The next 5 nodes are slow-pinging peers, making them eviction candidates.\n+        for _ in range(5):\n+            node.add_p2p_connection(SlowP2PInterface())\n+            current_peer += 1\n+\n+\n+        #The next 4 peers send us a tx, protecting them from eviction\n+        for i in range(4):\n+            txpeer = node.add_p2p_connection(SlowP2PInterface())\n+            current_peer += 1\n+            txpeer.sync_with_ping(timeout=5)\n+\n+            prevtx = node.getblock(node.getblockhash(i+1), 2)['tx'][0]\n+            rawtx = node.createrawtransaction(\n+                inputs=[{'txid': prevtx['txid'], 'vout': 0}],\n+                outputs=[{node.get_deterministic_priv_key().address: 50 - 0.00125}],\n+            )\n+            sigtx = node.signrawtransactionwithkey(\n+                hexstring=rawtx,\n+                privkeys=[node.get_deterministic_priv_key().key],\n+                prevtxs=[{\n+                    'txid': prevtx['txid'],\n+                    'vout': 0,\n+                    'scriptPubKey': prevtx['vout'][0]['scriptPubKey']['hex'],\n+                }],\n+            )['hex']\n+            txpeer.send_message(msg_tx(FromHex(CTransaction(), sigtx)))\n+            self.protected_peers.add(current_peer)\n+\n+        # The next 8 peers have faster pings, which will usually protect them from eviction.\n+        for _ in range(8):\n+            fastpeer = node.add_p2p_connection(P2PInterface())\n+            current_peer += 1\n+            wait_until(lambda: \"ping\" in fastpeer.last_message, timeout=10)\n+\n+        # Make sure by asking the node what the actual min pings are\n+        peerinfo = node.getpeerinfo()\n+        pings = [[0 for i in range(2)] for j in range(len(node.p2ps))]\n+\n+        # After adding 21 peers, the next one hits the maxconnection limit and triggers the eviction mechanism.\n+        node.add_p2p_connection(SlowP2PInterface())\n+\n+        # Usually the 8 fast peers are protected. In rare case of unreliable pings,\n+        # one of the slower peers might have a faster min ping though.\n+        for i in range(len(peerinfo)):\n+            pings[i][0] = i\n+            pings[i][1] = peerinfo[i]['minping'] if 'minping' in peerinfo[i] else 1000000\n+\n+        sorted_pings = sorted(pings, key = lambda x:x[1])\n+\n+        for i in range(8):\n+            self.protected_peers.add(sorted_pings[i][0])\n+\n+        # One of the non-protected peers must be evicted. We can't be sure which one because\n+        # 4 peers are protected via netgroup, which is identical for all peers,\n+        # and the eviction mechanism doesn't preserve the order of identical elements.\n+        self.evicted_peers = []\n+        for i in range(len(node.p2ps)):\n+            if(node.p2ps[i].is_connected == False ) :\n+                self.evicted_peers.append(i)\n+\n+        self.log.info(\"Test that one peer was evicted\")\n+        assert_equal(len(self.evicted_peers), 1)\n+        self.log.debug(\"{} evicted peer: {}\".format(len(self.evicted_peers), set(self.evicted_peers)))\n+\n+        self.log.info(\"Test that no peer expected to be protected was evicted\")\n+        assert_equal(self.evicted_peers[0] in self.protected_peers, False)\n+        self.log.debug(\"{} protected peers: {}\".format(len(self.protected_peers), self.protected_peers))",
    "path": "test/functional/p2p_eviction.py",
    "position": null,
    "original_position": 137,
    "commit_id": "45eff751c6d07007dabc365dc4c0e6c63e3fe5cf",
    "original_commit_id": "3758af78564e9a0e059f38c11e941d68be192fb6",
    "user": {
      "login": "mzumsande",
      "id": 48763452,
      "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mzumsande",
      "html_url": "https://github.com/mzumsande",
      "followers_url": "https://api.github.com/users/mzumsande/followers",
      "following_url": "https://api.github.com/users/mzumsande/following{/other_user}",
      "gists_url": "https://api.github.com/users/mzumsande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
      "organizations_url": "https://api.github.com/users/mzumsande/orgs",
      "repos_url": "https://api.github.com/users/mzumsande/repos",
      "events_url": "https://api.github.com/users/mzumsande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mzumsande/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "done",
    "created_at": "2020-06-02T23:57:23Z",
    "updated_at": "2020-06-06T20:31:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r434237203",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434237203"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r434237203"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434237203/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 132,
    "side": "RIGHT",
    "in_reply_to_id": 433858693
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434237232",
    "pull_request_review_id": 423133009,
    "id": 434237232,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIzNzIzMg==",
    "diff_hunk": "@@ -0,0 +1,141 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\" Test node eviction logic\n+\n+When the number of peers has reached the limit of maximum connections,\n+the next connecting inbound peer will trigger the eviction mechanism.\n+We cannot currently test the parts of the eviction logic that are based on\n+address/netgroup since in the current framework, all peers are connecting from\n+the same local address. See Issue #14210 for more info.\n+\n+Therefore, this test is limited to the remaining protection criteria:\n+1.) Protect 4 nodes having sent us a block most recently\n+2.) Protect 4 nodes having sent us a transaction most recently\n+3.) Protect 8 nodes with the smallest minimum ping\n+\"\"\"\n+\n+import time\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mininode import P2PInterface, P2PDataStore\n+from test_framework.util import assert_equal, wait_until\n+from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.messages import CTransaction, FromHex, msg_pong, msg_tx\n+\n+\n+class SlowP2PDataStore(P2PDataStore):\n+    def on_ping(self, message):\n+        time.sleep(0.1)\n+        self.send_message(msg_pong(message.nonce))\n+\n+class SlowP2PInterface(P2PInterface):\n+    def on_ping(self, message):\n+        time.sleep(0.1)\n+        self.send_message(msg_pong(message.nonce))\n+\n+\n+class P2PEvict(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        # The choice of 32 maxconnections results in a maximum of 21 inbound connections\n+        # (32 - 10 outbound - 1 feeler). 20 inbounds peers are protected from eviction.\n+        self.extra_args = [['-maxconnections=32']]\n+\n+    def setup_network(self):\n+        self.setup_nodes()\n+\n+    def run_test(self):\n+        self.protected_peers = set() # peers that we expect to be protected from eviction\n+        current_peer = 0\n+        node = self.nodes[0]\n+        node.generatetoaddress(101, node.get_deterministic_priv_key().address)\n+\n+        # The first 4 peers send us a block, protecting them from eviction.\n+        for _ in range(4):\n+            block_peer = node.add_p2p_connection(SlowP2PDataStore())\n+            current_peer += 1\n+            block_peer.sync_with_ping(timeout=5)\n+            best_block = node.getbestblockhash()\n+            tip = int(best_block, 16)\n+            best_block_time = node.getblock(best_block)['time']\n+            block = create_block(tip, create_coinbase(node.getblockcount() + 1), best_block_time + 1)\n+            block.solve()\n+            block_peer.send_blocks_and_test([block], node, success=True)\n+            self.protected_peers.add(current_peer)\n+\n+        # The next 5 nodes are slow-pinging peers, making them eviction candidates.\n+        for _ in range(5):\n+            node.add_p2p_connection(SlowP2PInterface())\n+            current_peer += 1\n+\n+\n+        #The next 4 peers send us a tx, protecting them from eviction\n+        for i in range(4):\n+            txpeer = node.add_p2p_connection(SlowP2PInterface())\n+            current_peer += 1\n+            txpeer.sync_with_ping(timeout=5)\n+\n+            prevtx = node.getblock(node.getblockhash(i+1), 2)['tx'][0]\n+            rawtx = node.createrawtransaction(\n+                inputs=[{'txid': prevtx['txid'], 'vout': 0}],\n+                outputs=[{node.get_deterministic_priv_key().address: 50 - 0.00125}],\n+            )\n+            sigtx = node.signrawtransactionwithkey(\n+                hexstring=rawtx,\n+                privkeys=[node.get_deterministic_priv_key().key],\n+                prevtxs=[{\n+                    'txid': prevtx['txid'],\n+                    'vout': 0,\n+                    'scriptPubKey': prevtx['vout'][0]['scriptPubKey']['hex'],\n+                }],\n+            )['hex']\n+            txpeer.send_message(msg_tx(FromHex(CTransaction(), sigtx)))\n+            self.protected_peers.add(current_peer)\n+\n+        # The next 8 peers have faster pings, which will usually protect them from eviction.\n+        for _ in range(8):\n+            fastpeer = node.add_p2p_connection(P2PInterface())\n+            current_peer += 1\n+            wait_until(lambda: \"ping\" in fastpeer.last_message, timeout=10)\n+\n+        # Make sure by asking the node what the actual min pings are\n+        peerinfo = node.getpeerinfo()\n+        pings = [[0 for i in range(2)] for j in range(len(node.p2ps))]\n+\n+        # After adding 21 peers, the next one hits the maxconnection limit and triggers the eviction mechanism.\n+        node.add_p2p_connection(SlowP2PInterface())\n+\n+        # Usually the 8 fast peers are protected. In rare case of unreliable pings,\n+        # one of the slower peers might have a faster min ping though.\n+        for i in range(len(peerinfo)):\n+            pings[i][0] = i\n+            pings[i][1] = peerinfo[i]['minping'] if 'minping' in peerinfo[i] else 1000000\n+\n+        sorted_pings = sorted(pings, key = lambda x:x[1])\n+\n+        for i in range(8):\n+            self.protected_peers.add(sorted_pings[i][0])\n+\n+        # One of the non-protected peers must be evicted. We can't be sure which one because\n+        # 4 peers are protected via netgroup, which is identical for all peers,\n+        # and the eviction mechanism doesn't preserve the order of identical elements.\n+        self.evicted_peers = []\n+        for i in range(len(node.p2ps)):\n+            if(node.p2ps[i].is_connected == False ) :\n+                self.evicted_peers.append(i)\n+\n+        self.log.info(\"Test that one peer was evicted\")\n+        assert_equal(len(self.evicted_peers), 1)\n+        self.log.debug(\"{} evicted peer: {}\".format(len(self.evicted_peers), set(self.evicted_peers)))\n+\n+        self.log.info(\"Test that no peer expected to be protected was evicted\")\n+        assert_equal(self.evicted_peers[0] in self.protected_peers, False)",
    "path": "test/functional/p2p_eviction.py",
    "position": null,
    "original_position": 136,
    "commit_id": "45eff751c6d07007dabc365dc4c0e6c63e3fe5cf",
    "original_commit_id": "3758af78564e9a0e059f38c11e941d68be192fb6",
    "user": {
      "login": "mzumsande",
      "id": 48763452,
      "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mzumsande",
      "html_url": "https://github.com/mzumsande",
      "followers_url": "https://api.github.com/users/mzumsande/followers",
      "following_url": "https://api.github.com/users/mzumsande/following{/other_user}",
      "gists_url": "https://api.github.com/users/mzumsande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
      "organizations_url": "https://api.github.com/users/mzumsande/orgs",
      "repos_url": "https://api.github.com/users/mzumsande/repos",
      "events_url": "https://api.github.com/users/mzumsande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mzumsande/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "done.",
    "created_at": "2020-06-02T23:57:34Z",
    "updated_at": "2020-06-06T20:31:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r434237232",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434237232"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r434237232"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434237232/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 136,
    "side": "RIGHT",
    "in_reply_to_id": 433857615
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434237802",
    "pull_request_review_id": 423133669,
    "id": 434237802,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIzNzgwMg==",
    "diff_hunk": "@@ -0,0 +1,141 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\" Test node eviction logic\n+\n+When the number of peers has reached the limit of maximum connections,\n+the next connecting inbound peer will trigger the eviction mechanism.\n+We cannot currently test the parts of the eviction logic that are based on\n+address/netgroup since in the current framework, all peers are connecting from\n+the same local address. See Issue #14210 for more info.\n+\n+Therefore, this test is limited to the remaining protection criteria:\n+1.) Protect 4 nodes having sent us a block most recently\n+2.) Protect 4 nodes having sent us a transaction most recently\n+3.) Protect 8 nodes with the smallest minimum ping\n+\"\"\"\n+\n+import time\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mininode import P2PInterface, P2PDataStore\n+from test_framework.util import assert_equal, wait_until\n+from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.messages import CTransaction, FromHex, msg_pong, msg_tx\n+\n+\n+class SlowP2PDataStore(P2PDataStore):\n+    def on_ping(self, message):\n+        time.sleep(0.1)\n+        self.send_message(msg_pong(message.nonce))\n+\n+class SlowP2PInterface(P2PInterface):\n+    def on_ping(self, message):\n+        time.sleep(0.1)\n+        self.send_message(msg_pong(message.nonce))\n+\n+\n+class P2PEvict(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        # The choice of 32 maxconnections results in a maximum of 21 inbound connections\n+        # (32 - 10 outbound - 1 feeler). 20 inbounds peers are protected from eviction.\n+        self.extra_args = [['-maxconnections=32']]\n+\n+    def setup_network(self):\n+        self.setup_nodes()\n+",
    "path": "test/functional/p2p_eviction.py",
    "position": null,
    "original_position": 50,
    "commit_id": "45eff751c6d07007dabc365dc4c0e6c63e3fe5cf",
    "original_commit_id": "3758af78564e9a0e059f38c11e941d68be192fb6",
    "user": {
      "login": "mzumsande",
      "id": 48763452,
      "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mzumsande",
      "html_url": "https://github.com/mzumsande",
      "followers_url": "https://api.github.com/users/mzumsande/followers",
      "following_url": "https://api.github.com/users/mzumsande/following{/other_user}",
      "gists_url": "https://api.github.com/users/mzumsande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
      "organizations_url": "https://api.github.com/users/mzumsande/orgs",
      "repos_url": "https://api.github.com/users/mzumsande/repos",
      "events_url": "https://api.github.com/users/mzumsande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mzumsande/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "The `setup_network` override is not needed imo, removed - thanks!\r\n\r\nI added several logging messages for the initial phase (as also suggested below).\r\n \r\nI am still a bit hesitant with respect to the setup network / test separation, because I don't really view most of it as network setup - in the network setup phase, one node is created, and then in the second phase, we simulate inbound peers connecting to it, sending blocks and transactions, until all slots are taken and a peer gets evicted.\r\nBut I will change it if others also think that this is preferable!",
    "created_at": "2020-06-02T23:59:37Z",
    "updated_at": "2020-06-06T20:31:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r434237802",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434237802"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r434237802"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434237802/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 50,
    "side": "RIGHT",
    "in_reply_to_id": 433861797
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434237836",
    "pull_request_review_id": 423133725,
    "id": 434237836,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIzNzgzNg==",
    "diff_hunk": "@@ -0,0 +1,141 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\" Test node eviction logic\n+\n+When the number of peers has reached the limit of maximum connections,\n+the next connecting inbound peer will trigger the eviction mechanism.\n+We cannot currently test the parts of the eviction logic that are based on\n+address/netgroup since in the current framework, all peers are connecting from\n+the same local address. See Issue #14210 for more info.\n+\n+Therefore, this test is limited to the remaining protection criteria:\n+1.) Protect 4 nodes having sent us a block most recently\n+2.) Protect 4 nodes having sent us a transaction most recently\n+3.) Protect 8 nodes with the smallest minimum ping\n+\"\"\"\n+\n+import time\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mininode import P2PInterface, P2PDataStore\n+from test_framework.util import assert_equal, wait_until\n+from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.messages import CTransaction, FromHex, msg_pong, msg_tx\n+\n+\n+class SlowP2PDataStore(P2PDataStore):\n+    def on_ping(self, message):\n+        time.sleep(0.1)\n+        self.send_message(msg_pong(message.nonce))\n+\n+class SlowP2PInterface(P2PInterface):\n+    def on_ping(self, message):\n+        time.sleep(0.1)\n+        self.send_message(msg_pong(message.nonce))\n+\n+\n+class P2PEvict(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        # The choice of 32 maxconnections results in a maximum of 21 inbound connections\n+        # (32 - 10 outbound - 1 feeler). 20 inbounds peers are protected from eviction.\n+        self.extra_args = [['-maxconnections=32']]\n+\n+    def setup_network(self):\n+        self.setup_nodes()\n+\n+    def run_test(self):\n+        self.protected_peers = set() # peers that we expect to be protected from eviction\n+        current_peer = 0\n+        node = self.nodes[0]\n+        node.generatetoaddress(101, node.get_deterministic_priv_key().address)\n+\n+        # The first 4 peers send us a block, protecting them from eviction.",
    "path": "test/functional/p2p_eviction.py",
    "position": null,
    "original_position": 57,
    "commit_id": "45eff751c6d07007dabc365dc4c0e6c63e3fe5cf",
    "original_commit_id": "3758af78564e9a0e059f38c11e941d68be192fb6",
    "user": {
      "login": "mzumsande",
      "id": 48763452,
      "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mzumsande",
      "html_url": "https://github.com/mzumsande",
      "followers_url": "https://api.github.com/users/mzumsande/followers",
      "following_url": "https://api.github.com/users/mzumsande/following{/other_user}",
      "gists_url": "https://api.github.com/users/mzumsande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
      "organizations_url": "https://api.github.com/users/mzumsande/orgs",
      "repos_url": "https://api.github.com/users/mzumsande/repos",
      "events_url": "https://api.github.com/users/mzumsande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mzumsande/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done, thanks!",
    "created_at": "2020-06-02T23:59:49Z",
    "updated_at": "2020-06-06T20:31:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r434237836",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434237836"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r434237836"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434237836/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 57,
    "side": "RIGHT",
    "in_reply_to_id": 434016124
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434240038",
    "pull_request_review_id": 423136305,
    "id": 434240038,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI0MDAzOA==",
    "diff_hunk": "@@ -0,0 +1,141 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\" Test node eviction logic\n+\n+When the number of peers has reached the limit of maximum connections,\n+the next connecting inbound peer will trigger the eviction mechanism.\n+We cannot currently test the parts of the eviction logic that are based on\n+address/netgroup since in the current framework, all peers are connecting from\n+the same local address. See Issue #14210 for more info.\n+\n+Therefore, this test is limited to the remaining protection criteria:\n+1.) Protect 4 nodes having sent us a block most recently\n+2.) Protect 4 nodes having sent us a transaction most recently\n+3.) Protect 8 nodes with the smallest minimum ping\n+\"\"\"\n+\n+import time\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mininode import P2PInterface, P2PDataStore\n+from test_framework.util import assert_equal, wait_until\n+from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.messages import CTransaction, FromHex, msg_pong, msg_tx\n+\n+\n+class SlowP2PDataStore(P2PDataStore):\n+    def on_ping(self, message):\n+        time.sleep(0.1)\n+        self.send_message(msg_pong(message.nonce))\n+\n+class SlowP2PInterface(P2PInterface):\n+    def on_ping(self, message):\n+        time.sleep(0.1)\n+        self.send_message(msg_pong(message.nonce))\n+\n+\n+class P2PEvict(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        # The choice of 32 maxconnections results in a maximum of 21 inbound connections\n+        # (32 - 10 outbound - 1 feeler). 20 inbounds peers are protected from eviction.\n+        self.extra_args = [['-maxconnections=32']]\n+\n+    def setup_network(self):\n+        self.setup_nodes()\n+\n+    def run_test(self):\n+        self.protected_peers = set() # peers that we expect to be protected from eviction\n+        current_peer = 0\n+        node = self.nodes[0]\n+        node.generatetoaddress(101, node.get_deterministic_priv_key().address)\n+\n+        # The first 4 peers send us a block, protecting them from eviction.\n+        for _ in range(4):\n+            block_peer = node.add_p2p_connection(SlowP2PDataStore())\n+            current_peer += 1\n+            block_peer.sync_with_ping(timeout=5)\n+            best_block = node.getbestblockhash()\n+            tip = int(best_block, 16)\n+            best_block_time = node.getblock(best_block)['time']\n+            block = create_block(tip, create_coinbase(node.getblockcount() + 1), best_block_time + 1)\n+            block.solve()\n+            block_peer.send_blocks_and_test([block], node, success=True)\n+            self.protected_peers.add(current_peer)\n+\n+        # The next 5 nodes are slow-pinging peers, making them eviction candidates.\n+        for _ in range(5):\n+            node.add_p2p_connection(SlowP2PInterface())\n+            current_peer += 1\n+",
    "path": "test/functional/p2p_eviction.py",
    "position": 67,
    "original_position": 74,
    "commit_id": "45eff751c6d07007dabc365dc4c0e6c63e3fe5cf",
    "original_commit_id": "3758af78564e9a0e059f38c11e941d68be192fb6",
    "user": {
      "login": "mzumsande",
      "id": 48763452,
      "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mzumsande",
      "html_url": "https://github.com/mzumsande",
      "followers_url": "https://api.github.com/users/mzumsande/followers",
      "following_url": "https://api.github.com/users/mzumsande/following{/other_user}",
      "gists_url": "https://api.github.com/users/mzumsande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
      "organizations_url": "https://api.github.com/users/mzumsande/orgs",
      "repos_url": "https://api.github.com/users/mzumsande/repos",
      "events_url": "https://api.github.com/users/mzumsande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mzumsande/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "fixed.",
    "created_at": "2020-06-03T00:08:00Z",
    "updated_at": "2020-06-06T20:31:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r434240038",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434240038"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r434240038"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434240038/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 67,
    "original_line": 67,
    "side": "RIGHT",
    "in_reply_to_id": 433832438
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434241153",
    "pull_request_review_id": 423137628,
    "id": 434241153,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI0MTE1Mw==",
    "diff_hunk": "@@ -0,0 +1,141 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\" Test node eviction logic\n+\n+When the number of peers has reached the limit of maximum connections,\n+the next connecting inbound peer will trigger the eviction mechanism.\n+We cannot currently test the parts of the eviction logic that are based on\n+address/netgroup since in the current framework, all peers are connecting from\n+the same local address. See Issue #14210 for more info.\n+\n+Therefore, this test is limited to the remaining protection criteria:\n+1.) Protect 4 nodes having sent us a block most recently\n+2.) Protect 4 nodes having sent us a transaction most recently\n+3.) Protect 8 nodes with the smallest minimum ping\n+\"\"\"\n+\n+import time\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mininode import P2PInterface, P2PDataStore\n+from test_framework.util import assert_equal, wait_until\n+from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.messages import CTransaction, FromHex, msg_pong, msg_tx\n+\n+\n+class SlowP2PDataStore(P2PDataStore):\n+    def on_ping(self, message):\n+        time.sleep(0.1)\n+        self.send_message(msg_pong(message.nonce))\n+\n+class SlowP2PInterface(P2PInterface):\n+    def on_ping(self, message):\n+        time.sleep(0.1)\n+        self.send_message(msg_pong(message.nonce))\n+\n+\n+class P2PEvict(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        # The choice of 32 maxconnections results in a maximum of 21 inbound connections\n+        # (32 - 10 outbound - 1 feeler). 20 inbounds peers are protected from eviction.\n+        self.extra_args = [['-maxconnections=32']]\n+\n+    def setup_network(self):\n+        self.setup_nodes()\n+\n+    def run_test(self):\n+        self.protected_peers = set() # peers that we expect to be protected from eviction\n+        current_peer = 0\n+        node = self.nodes[0]\n+        node.generatetoaddress(101, node.get_deterministic_priv_key().address)\n+\n+        # The first 4 peers send us a block, protecting them from eviction.\n+        for _ in range(4):\n+            block_peer = node.add_p2p_connection(SlowP2PDataStore())\n+            current_peer += 1\n+            block_peer.sync_with_ping(timeout=5)\n+            best_block = node.getbestblockhash()\n+            tip = int(best_block, 16)\n+            best_block_time = node.getblock(best_block)['time']\n+            block = create_block(tip, create_coinbase(node.getblockcount() + 1), best_block_time + 1)\n+            block.solve()\n+            block_peer.send_blocks_and_test([block], node, success=True)\n+            self.protected_peers.add(current_peer)\n+\n+        # The next 5 nodes are slow-pinging peers, making them eviction candidates.\n+        for _ in range(5):\n+            node.add_p2p_connection(SlowP2PInterface())\n+            current_peer += 1\n+\n+\n+        #The next 4 peers send us a tx, protecting them from eviction\n+        for i in range(4):\n+            txpeer = node.add_p2p_connection(SlowP2PInterface())\n+            current_peer += 1\n+            txpeer.sync_with_ping(timeout=5)\n+\n+            prevtx = node.getblock(node.getblockhash(i+1), 2)['tx'][0]\n+            rawtx = node.createrawtransaction(\n+                inputs=[{'txid': prevtx['txid'], 'vout': 0}],\n+                outputs=[{node.get_deterministic_priv_key().address: 50 - 0.00125}],\n+            )\n+            sigtx = node.signrawtransactionwithkey(\n+                hexstring=rawtx,\n+                privkeys=[node.get_deterministic_priv_key().key],\n+                prevtxs=[{\n+                    'txid': prevtx['txid'],\n+                    'vout': 0,\n+                    'scriptPubKey': prevtx['vout'][0]['scriptPubKey']['hex'],\n+                }],\n+            )['hex']\n+            txpeer.send_message(msg_tx(FromHex(CTransaction(), sigtx)))\n+            self.protected_peers.add(current_peer)\n+\n+        # The next 8 peers have faster pings, which will usually protect them from eviction.\n+        for _ in range(8):\n+            fastpeer = node.add_p2p_connection(P2PInterface())\n+            current_peer += 1\n+            wait_until(lambda: \"ping\" in fastpeer.last_message, timeout=10)\n+\n+        # Make sure by asking the node what the actual min pings are\n+        peerinfo = node.getpeerinfo()\n+        pings = [[0 for i in range(2)] for j in range(len(node.p2ps))]\n+\n+        # After adding 21 peers, the next one hits the maxconnection limit and triggers the eviction mechanism.\n+        node.add_p2p_connection(SlowP2PInterface())\n+\n+        # Usually the 8 fast peers are protected. In rare case of unreliable pings,\n+        # one of the slower peers might have a faster min ping though.\n+        for i in range(len(peerinfo)):\n+            pings[i][0] = i\n+            pings[i][1] = peerinfo[i]['minping'] if 'minping' in peerinfo[i] else 1000000\n+\n+        sorted_pings = sorted(pings, key = lambda x:x[1])\n+\n+        for i in range(8):\n+            self.protected_peers.add(sorted_pings[i][0])",
    "path": "test/functional/p2p_eviction.py",
    "position": null,
    "original_position": 121,
    "commit_id": "45eff751c6d07007dabc365dc4c0e6c63e3fe5cf",
    "original_commit_id": "3758af78564e9a0e059f38c11e941d68be192fb6",
    "user": {
      "login": "mzumsande",
      "id": 48763452,
      "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mzumsande",
      "html_url": "https://github.com/mzumsande",
      "followers_url": "https://api.github.com/users/mzumsande/followers",
      "following_url": "https://api.github.com/users/mzumsande/following{/other_user}",
      "gists_url": "https://api.github.com/users/mzumsande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
      "organizations_url": "https://api.github.com/users/mzumsande/orgs",
      "repos_url": "https://api.github.com/users/mzumsande/repos",
      "events_url": "https://api.github.com/users/mzumsande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mzumsande/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I fixed the initialization of `current_peer`  (so that  having `current_peer=0` for peer `0`).",
    "created_at": "2020-06-03T00:12:12Z",
    "updated_at": "2020-06-06T20:31:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r434241153",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434241153"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r434241153"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434241153/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 117,
    "side": "RIGHT",
    "in_reply_to_id": 433766480
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434241604",
    "pull_request_review_id": 423138175,
    "id": 434241604,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI0MTYwNA==",
    "diff_hunk": "@@ -0,0 +1,141 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\" Test node eviction logic\n+\n+When the number of peers has reached the limit of maximum connections,\n+the next connecting inbound peer will trigger the eviction mechanism.\n+We cannot currently test the parts of the eviction logic that are based on\n+address/netgroup since in the current framework, all peers are connecting from\n+the same local address. See Issue #14210 for more info.\n+\n+Therefore, this test is limited to the remaining protection criteria:\n+1.) Protect 4 nodes having sent us a block most recently\n+2.) Protect 4 nodes having sent us a transaction most recently\n+3.) Protect 8 nodes with the smallest minimum ping\n+\"\"\"\n+\n+import time\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mininode import P2PInterface, P2PDataStore\n+from test_framework.util import assert_equal, wait_until\n+from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.messages import CTransaction, FromHex, msg_pong, msg_tx\n+\n+\n+class SlowP2PDataStore(P2PDataStore):\n+    def on_ping(self, message):\n+        time.sleep(0.1)\n+        self.send_message(msg_pong(message.nonce))\n+\n+class SlowP2PInterface(P2PInterface):\n+    def on_ping(self, message):\n+        time.sleep(0.1)\n+        self.send_message(msg_pong(message.nonce))\n+\n+\n+class P2PEvict(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        # The choice of 32 maxconnections results in a maximum of 21 inbound connections\n+        # (32 - 10 outbound - 1 feeler). 20 inbounds peers are protected from eviction.",
    "path": "test/functional/p2p_eviction.py",
    "position": null,
    "original_position": 45,
    "commit_id": "45eff751c6d07007dabc365dc4c0e6c63e3fe5cf",
    "original_commit_id": "3758af78564e9a0e059f38c11e941d68be192fb6",
    "user": {
      "login": "mzumsande",
      "id": 48763452,
      "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mzumsande",
      "html_url": "https://github.com/mzumsande",
      "followers_url": "https://api.github.com/users/mzumsande/followers",
      "following_url": "https://api.github.com/users/mzumsande/following{/other_user}",
      "gists_url": "https://api.github.com/users/mzumsande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
      "organizations_url": "https://api.github.com/users/mzumsande/orgs",
      "repos_url": "https://api.github.com/users/mzumsande/repos",
      "events_url": "https://api.github.com/users/mzumsande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mzumsande/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done, I expanded that comment.",
    "created_at": "2020-06-03T00:13:56Z",
    "updated_at": "2020-06-06T20:31:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r434241604",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434241604"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r434241604"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434241604/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 45,
    "side": "RIGHT",
    "in_reply_to_id": 433774397
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434315745",
    "pull_request_review_id": 423227624,
    "id": 434315745,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMxNTc0NQ==",
    "diff_hunk": "@@ -0,0 +1,141 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\" Test node eviction logic\n+\n+When the number of peers has reached the limit of maximum connections,\n+the next connecting inbound peer will trigger the eviction mechanism.\n+We cannot currently test the parts of the eviction logic that are based on\n+address/netgroup since in the current framework, all peers are connecting from\n+the same local address. See Issue #14210 for more info.\n+\n+Therefore, this test is limited to the remaining protection criteria:\n+1.) Protect 4 nodes having sent us a block most recently\n+2.) Protect 4 nodes having sent us a transaction most recently\n+3.) Protect 8 nodes with the smallest minimum ping\n+\"\"\"\n+\n+import time\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mininode import P2PInterface, P2PDataStore\n+from test_framework.util import assert_equal, wait_until\n+from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.messages import CTransaction, FromHex, msg_pong, msg_tx\n+\n+\n+class SlowP2PDataStore(P2PDataStore):\n+    def on_ping(self, message):\n+        time.sleep(0.1)\n+        self.send_message(msg_pong(message.nonce))\n+\n+class SlowP2PInterface(P2PInterface):\n+    def on_ping(self, message):\n+        time.sleep(0.1)\n+        self.send_message(msg_pong(message.nonce))\n+\n+\n+class P2PEvict(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        # The choice of 32 maxconnections results in a maximum of 21 inbound connections\n+        # (32 - 10 outbound - 1 feeler). 20 inbounds peers are protected from eviction.",
    "path": "test/functional/p2p_eviction.py",
    "position": null,
    "original_position": 45,
    "commit_id": "45eff751c6d07007dabc365dc4c0e6c63e3fe5cf",
    "original_commit_id": "3758af78564e9a0e059f38c11e941d68be192fb6",
    "user": {
      "login": "rajarshimaitra",
      "id": 36541669,
      "node_id": "MDQ6VXNlcjM2NTQxNjY5",
      "avatar_url": "https://avatars.githubusercontent.com/u/36541669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rajarshimaitra",
      "html_url": "https://github.com/rajarshimaitra",
      "followers_url": "https://api.github.com/users/rajarshimaitra/followers",
      "following_url": "https://api.github.com/users/rajarshimaitra/following{/other_user}",
      "gists_url": "https://api.github.com/users/rajarshimaitra/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rajarshimaitra/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rajarshimaitra/subscriptions",
      "organizations_url": "https://api.github.com/users/rajarshimaitra/orgs",
      "repos_url": "https://api.github.com/users/rajarshimaitra/repos",
      "events_url": "https://api.github.com/users/rajarshimaitra/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rajarshimaitra/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Thanks @andrewtoth, that helped a lot. ",
    "created_at": "2020-06-03T05:27:35Z",
    "updated_at": "2020-06-06T20:31:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r434315745",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434315745"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r434315745"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434315745/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 45,
    "side": "RIGHT",
    "in_reply_to_id": 433774397
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434616055",
    "pull_request_review_id": 423618295,
    "id": 434616055,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYxNjA1NQ==",
    "diff_hunk": "@@ -0,0 +1,141 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\" Test node eviction logic\n+\n+When the number of peers has reached the limit of maximum connections,\n+the next connecting inbound peer will trigger the eviction mechanism.\n+We cannot currently test the parts of the eviction logic that are based on\n+address/netgroup since in the current framework, all peers are connecting from\n+the same local address. See Issue #14210 for more info.\n+\n+Therefore, this test is limited to the remaining protection criteria:\n+1.) Protect 4 nodes having sent us a block most recently\n+2.) Protect 4 nodes having sent us a transaction most recently\n+3.) Protect 8 nodes with the smallest minimum ping\n+\"\"\"\n+\n+import time\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mininode import P2PInterface, P2PDataStore\n+from test_framework.util import assert_equal, wait_until\n+from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.messages import CTransaction, FromHex, msg_pong, msg_tx\n+\n+\n+class SlowP2PDataStore(P2PDataStore):\n+    def on_ping(self, message):\n+        time.sleep(0.1)\n+        self.send_message(msg_pong(message.nonce))\n+\n+class SlowP2PInterface(P2PInterface):\n+    def on_ping(self, message):\n+        time.sleep(0.1)\n+        self.send_message(msg_pong(message.nonce))\n+\n+\n+class P2PEvict(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        # The choice of 32 maxconnections results in a maximum of 21 inbound connections\n+        # (32 - 10 outbound - 1 feeler). 20 inbounds peers are protected from eviction.\n+        self.extra_args = [['-maxconnections=32']]\n+\n+    def setup_network(self):\n+        self.setup_nodes()\n+",
    "path": "test/functional/p2p_eviction.py",
    "position": null,
    "original_position": 50,
    "commit_id": "45eff751c6d07007dabc365dc4c0e6c63e3fe5cf",
    "original_commit_id": "3758af78564e9a0e059f38c11e941d68be192fb6",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Thanks for adding the additional logging; it's great.\r\n\r\nI'm unsure but suspect one would see `connect_node` statements in the tests if the override was needed.\r\n\r\nIf you prefer to keep the setup and the assertions all in one block, then no need for `self.protected_peers` and `self.evicted_peers` to be class variables; that was done in order to separate the network setup from the tests/assertions.",
    "created_at": "2020-06-03T14:35:21Z",
    "updated_at": "2020-06-06T20:31:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r434616055",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434616055"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r434616055"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434616055/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 50,
    "side": "RIGHT",
    "in_reply_to_id": 433861797
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434620675",
    "pull_request_review_id": 423624521,
    "id": 434620675,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYyMDY3NQ==",
    "diff_hunk": "@@ -0,0 +1,141 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\" Test node eviction logic\n+\n+When the number of peers has reached the limit of maximum connections,\n+the next connecting inbound peer will trigger the eviction mechanism.\n+We cannot currently test the parts of the eviction logic that are based on\n+address/netgroup since in the current framework, all peers are connecting from\n+the same local address. See Issue #14210 for more info.\n+\n+Therefore, this test is limited to the remaining protection criteria:\n+1.) Protect 4 nodes having sent us a block most recently\n+2.) Protect 4 nodes having sent us a transaction most recently\n+3.) Protect 8 nodes with the smallest minimum ping\n+\"\"\"\n+\n+import time\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mininode import P2PInterface, P2PDataStore\n+from test_framework.util import assert_equal, wait_until\n+from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.messages import CTransaction, FromHex, msg_pong, msg_tx\n+\n+\n+class SlowP2PDataStore(P2PDataStore):\n+    def on_ping(self, message):\n+        time.sleep(0.1)\n+        self.send_message(msg_pong(message.nonce))\n+\n+class SlowP2PInterface(P2PInterface):\n+    def on_ping(self, message):\n+        time.sleep(0.1)\n+        self.send_message(msg_pong(message.nonce))\n+\n+\n+class P2PEvict(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        # The choice of 32 maxconnections results in a maximum of 21 inbound connections\n+        # (32 - 10 outbound - 1 feeler). 20 inbounds peers are protected from eviction.",
    "path": "test/functional/p2p_eviction.py",
    "position": null,
    "original_position": 45,
    "commit_id": "45eff751c6d07007dabc365dc4c0e6c63e3fe5cf",
    "original_commit_id": "3758af78564e9a0e059f38c11e941d68be192fb6",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "For reference, see `CConnman::AttemptToEvictConnection()` in `src/net.cpp`.",
    "created_at": "2020-06-03T14:41:39Z",
    "updated_at": "2020-06-06T20:31:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r434620675",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434620675"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r434620675"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434620675/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 45,
    "side": "RIGHT",
    "in_reply_to_id": 433774397
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434623394",
    "pull_request_review_id": 423628148,
    "id": 434623394,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYyMzM5NA==",
    "diff_hunk": "@@ -0,0 +1,141 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\" Test node eviction logic\n+\n+When the number of peers has reached the limit of maximum connections,\n+the next connecting inbound peer will trigger the eviction mechanism.\n+We cannot currently test the parts of the eviction logic that are based on\n+address/netgroup since in the current framework, all peers are connecting from\n+the same local address. See Issue #14210 for more info.\n+\n+Therefore, this test is limited to the remaining protection criteria:\n+1.) Protect 4 nodes having sent us a block most recently\n+2.) Protect 4 nodes having sent us a transaction most recently\n+3.) Protect 8 nodes with the smallest minimum ping\n+\"\"\"\n+\n+import time\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mininode import P2PInterface, P2PDataStore\n+from test_framework.util import assert_equal, wait_until\n+from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.messages import CTransaction, FromHex, msg_pong, msg_tx\n+\n+\n+class SlowP2PDataStore(P2PDataStore):\n+    def on_ping(self, message):\n+        time.sleep(0.1)\n+        self.send_message(msg_pong(message.nonce))\n+\n+class SlowP2PInterface(P2PInterface):\n+    def on_ping(self, message):\n+        time.sleep(0.1)\n+        self.send_message(msg_pong(message.nonce))\n+\n+\n+class P2PEvict(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        # The choice of 32 maxconnections results in a maximum of 21 inbound connections\n+        # (32 - 10 outbound - 1 feeler). 20 inbounds peers are protected from eviction.\n+        self.extra_args = [['-maxconnections=32']]\n+\n+    def setup_network(self):\n+        self.setup_nodes()\n+\n+    def run_test(self):\n+        self.protected_peers = set() # peers that we expect to be protected from eviction\n+        current_peer = 0\n+        node = self.nodes[0]\n+        node.generatetoaddress(101, node.get_deterministic_priv_key().address)\n+\n+        # The first 4 peers send us a block, protecting them from eviction.\n+        for _ in range(4):\n+            block_peer = node.add_p2p_connection(SlowP2PDataStore())\n+            current_peer += 1\n+            block_peer.sync_with_ping(timeout=5)\n+            best_block = node.getbestblockhash()\n+            tip = int(best_block, 16)\n+            best_block_time = node.getblock(best_block)['time']\n+            block = create_block(tip, create_coinbase(node.getblockcount() + 1), best_block_time + 1)\n+            block.solve()\n+            block_peer.send_blocks_and_test([block], node, success=True)\n+            self.protected_peers.add(current_peer)\n+\n+        # The next 5 nodes are slow-pinging peers, making them eviction candidates.\n+        for _ in range(5):\n+            node.add_p2p_connection(SlowP2PInterface())\n+            current_peer += 1\n+\n+\n+        #The next 4 peers send us a tx, protecting them from eviction\n+        for i in range(4):\n+            txpeer = node.add_p2p_connection(SlowP2PInterface())\n+            current_peer += 1\n+            txpeer.sync_with_ping(timeout=5)\n+\n+            prevtx = node.getblock(node.getblockhash(i+1), 2)['tx'][0]\n+            rawtx = node.createrawtransaction(\n+                inputs=[{'txid': prevtx['txid'], 'vout': 0}],\n+                outputs=[{node.get_deterministic_priv_key().address: 50 - 0.00125}],\n+            )\n+            sigtx = node.signrawtransactionwithkey(\n+                hexstring=rawtx,\n+                privkeys=[node.get_deterministic_priv_key().key],\n+                prevtxs=[{\n+                    'txid': prevtx['txid'],\n+                    'vout': 0,\n+                    'scriptPubKey': prevtx['vout'][0]['scriptPubKey']['hex'],\n+                }],\n+            )['hex']\n+            txpeer.send_message(msg_tx(FromHex(CTransaction(), sigtx)))\n+            self.protected_peers.add(current_peer)\n+\n+        # The next 8 peers have faster pings, which will usually protect them from eviction.\n+        for _ in range(8):\n+            fastpeer = node.add_p2p_connection(P2PInterface())\n+            current_peer += 1\n+            wait_until(lambda: \"ping\" in fastpeer.last_message, timeout=10)\n+\n+        # Make sure by asking the node what the actual min pings are\n+        peerinfo = node.getpeerinfo()\n+        pings = [[0 for i in range(2)] for j in range(len(node.p2ps))]\n+\n+        # After adding 21 peers, the next one hits the maxconnection limit and triggers the eviction mechanism.\n+        node.add_p2p_connection(SlowP2PInterface())\n+\n+        # Usually the 8 fast peers are protected. In rare case of unreliable pings,\n+        # one of the slower peers might have a faster min ping though.\n+        for i in range(len(peerinfo)):\n+            pings[i][0] = i\n+            pings[i][1] = peerinfo[i]['minping'] if 'minping' in peerinfo[i] else 1000000\n+\n+        sorted_pings = sorted(pings, key = lambda x:x[1])\n+\n+        for i in range(8):\n+            self.protected_peers.add(sorted_pings[i][0])\n+\n+        # One of the non-protected peers must be evicted. We can't be sure which one because\n+        # 4 peers are protected via netgroup, which is identical for all peers,",
    "path": "test/functional/p2p_eviction.py",
    "position": 113,
    "original_position": 124,
    "commit_id": "45eff751c6d07007dabc365dc4c0e6c63e3fe5cf",
    "original_commit_id": "3758af78564e9a0e059f38c11e941d68be192fb6",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yes, the only certainty we have regarding the evicted peers in this test is that it will be one of the zero-indexed peers in the set of {4, 5, 6, 7, 8} e.g. the slow-pinging ones.",
    "created_at": "2020-06-03T14:45:28Z",
    "updated_at": "2020-06-06T20:31:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r434623394",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434623394"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r434623394"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434623394/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 113,
    "original_line": 113,
    "side": "RIGHT",
    "in_reply_to_id": 433778562
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434678043",
    "pull_request_review_id": 423705241,
    "id": 434678043,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY3ODA0Mw==",
    "diff_hunk": "@@ -0,0 +1,136 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\" Test node eviction logic\n+\n+When the number of peers has reached the limit of maximum connections,\n+the next connecting inbound peer will trigger the eviction mechanism.\n+We cannot currently test the parts of the eviction logic that are based on\n+address/netgroup since in the current framework, all peers are connecting from\n+the same local address. See Issue #14210 for more info.\n+\n+Therefore, this test is limited to the remaining protection criteria:\n+1.) Protect 4 nodes having sent us a block most recently\n+2.) Protect 4 nodes having sent us a transaction most recently\n+3.) Protect 8 nodes with the smallest minimum ping\n+\"\"\"\n+\n+import time\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mininode import P2PInterface, P2PDataStore\n+from test_framework.util import assert_equal, wait_until\n+from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.messages import CTransaction, FromHex, msg_pong, msg_tx\n+\n+\n+class SlowP2PDataStore(P2PDataStore):\n+    def on_ping(self, message):\n+        time.sleep(0.1)\n+        self.send_message(msg_pong(message.nonce))\n+\n+class SlowP2PInterface(P2PInterface):\n+    def on_ping(self, message):\n+        time.sleep(0.1)\n+        self.send_message(msg_pong(message.nonce))\n+\n+class P2PEvict(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        # The choice of maxconnections=32 results in a maximum of 21 inbound connections\n+        # (32 - 10 outbound - 1 feeler). 20 inbound peers are protected from eviction:\n+        # 4 by netgroup, 4 that sent us blocks, 4 that sent us transactions and 8 via lowest ping time\n+        self.extra_args = [['-maxconnections=32']]\n+\n+    def run_test(self):\n+        self.protected_peers = set() # peers that we expect to be protected from eviction",
    "path": "test/functional/p2p_eviction.py",
    "position": null,
    "original_position": 49,
    "commit_id": "45eff751c6d07007dabc365dc4c0e6c63e3fe5cf",
    "original_commit_id": "32c6ce0be31ce5ad8d56be7ea39c13eff003d938",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: `protected_peers` can be a local variable rather than a class member, since it's only ever used in this function.",
    "created_at": "2020-06-03T15:59:43Z",
    "updated_at": "2020-06-06T20:31:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r434678043",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434678043"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r434678043"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434678043/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 49,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434680681",
    "pull_request_review_id": 423705241,
    "id": 434680681,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY4MDY4MQ==",
    "diff_hunk": "@@ -0,0 +1,136 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\" Test node eviction logic\n+\n+When the number of peers has reached the limit of maximum connections,\n+the next connecting inbound peer will trigger the eviction mechanism.\n+We cannot currently test the parts of the eviction logic that are based on\n+address/netgroup since in the current framework, all peers are connecting from\n+the same local address. See Issue #14210 for more info.\n+\n+Therefore, this test is limited to the remaining protection criteria:\n+1.) Protect 4 nodes having sent us a block most recently\n+2.) Protect 4 nodes having sent us a transaction most recently\n+3.) Protect 8 nodes with the smallest minimum ping\n+\"\"\"\n+\n+import time\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mininode import P2PInterface, P2PDataStore\n+from test_framework.util import assert_equal, wait_until\n+from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.messages import CTransaction, FromHex, msg_pong, msg_tx\n+\n+\n+class SlowP2PDataStore(P2PDataStore):\n+    def on_ping(self, message):\n+        time.sleep(0.1)\n+        self.send_message(msg_pong(message.nonce))\n+\n+class SlowP2PInterface(P2PInterface):\n+    def on_ping(self, message):\n+        time.sleep(0.1)\n+        self.send_message(msg_pong(message.nonce))\n+\n+class P2PEvict(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        # The choice of maxconnections=32 results in a maximum of 21 inbound connections\n+        # (32 - 10 outbound - 1 feeler). 20 inbound peers are protected from eviction:\n+        # 4 by netgroup, 4 that sent us blocks, 4 that sent us transactions and 8 via lowest ping time\n+        self.extra_args = [['-maxconnections=32']]\n+\n+    def run_test(self):\n+        self.protected_peers = set() # peers that we expect to be protected from eviction\n+        current_peer = -1\n+        node = self.nodes[0]\n+        node.generatetoaddress(101, node.get_deterministic_priv_key().address)\n+\n+        self.log.info(\"Create 4 peers and protect them from eviction by sending us a block\")\n+        for _ in range(4):\n+            block_peer = node.add_p2p_connection(SlowP2PDataStore())\n+            current_peer += 1\n+            block_peer.sync_with_ping(timeout=5)",
    "path": "test/functional/p2p_eviction.py",
    "position": null,
    "original_position": 58,
    "commit_id": "45eff751c6d07007dabc365dc4c0e6c63e3fe5cf",
    "original_commit_id": "32c6ce0be31ce5ad8d56be7ea39c13eff003d938",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: no need for custom timeout here.",
    "created_at": "2020-06-03T16:02:25Z",
    "updated_at": "2020-06-06T20:31:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r434680681",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434680681"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r434680681"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434680681/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 58,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434682439",
    "pull_request_review_id": 423705241,
    "id": 434682439,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY4MjQzOQ==",
    "diff_hunk": "@@ -0,0 +1,136 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\" Test node eviction logic\n+\n+When the number of peers has reached the limit of maximum connections,\n+the next connecting inbound peer will trigger the eviction mechanism.\n+We cannot currently test the parts of the eviction logic that are based on\n+address/netgroup since in the current framework, all peers are connecting from\n+the same local address. See Issue #14210 for more info.\n+\n+Therefore, this test is limited to the remaining protection criteria:\n+1.) Protect 4 nodes having sent us a block most recently\n+2.) Protect 4 nodes having sent us a transaction most recently\n+3.) Protect 8 nodes with the smallest minimum ping\n+\"\"\"\n+\n+import time\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mininode import P2PInterface, P2PDataStore\n+from test_framework.util import assert_equal, wait_until\n+from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.messages import CTransaction, FromHex, msg_pong, msg_tx\n+\n+\n+class SlowP2PDataStore(P2PDataStore):\n+    def on_ping(self, message):\n+        time.sleep(0.1)\n+        self.send_message(msg_pong(message.nonce))\n+\n+class SlowP2PInterface(P2PInterface):\n+    def on_ping(self, message):\n+        time.sleep(0.1)\n+        self.send_message(msg_pong(message.nonce))\n+\n+class P2PEvict(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        # The choice of maxconnections=32 results in a maximum of 21 inbound connections\n+        # (32 - 10 outbound - 1 feeler). 20 inbound peers are protected from eviction:\n+        # 4 by netgroup, 4 that sent us blocks, 4 that sent us transactions and 8 via lowest ping time\n+        self.extra_args = [['-maxconnections=32']]\n+\n+    def run_test(self):\n+        self.protected_peers = set() # peers that we expect to be protected from eviction\n+        current_peer = -1\n+        node = self.nodes[0]\n+        node.generatetoaddress(101, node.get_deterministic_priv_key().address)\n+\n+        self.log.info(\"Create 4 peers and protect them from eviction by sending us a block\")\n+        for _ in range(4):\n+            block_peer = node.add_p2p_connection(SlowP2PDataStore())\n+            current_peer += 1\n+            block_peer.sync_with_ping(timeout=5)\n+            best_block = node.getbestblockhash()\n+            tip = int(best_block, 16)\n+            best_block_time = node.getblock(best_block)['time']\n+            block = create_block(tip, create_coinbase(node.getblockcount() + 1), best_block_time + 1)\n+            block.solve()\n+            block_peer.send_blocks_and_test([block], node, success=True)\n+            self.protected_peers.add(current_peer)\n+\n+        self.log.info(\"Create 5 slow-pinging peers, making them eviction candidates\")\n+        for _ in range(5):\n+            node.add_p2p_connection(SlowP2PInterface())\n+            current_peer += 1\n+\n+        self.log.info(\"Create 4 peers and protect them from eviction by sending us a tx\")\n+        for i in range(4):\n+            txpeer = node.add_p2p_connection(SlowP2PInterface())\n+            current_peer += 1\n+            txpeer.sync_with_ping(timeout=5)",
    "path": "test/functional/p2p_eviction.py",
    "position": null,
    "original_position": 76,
    "commit_id": "45eff751c6d07007dabc365dc4c0e6c63e3fe5cf",
    "original_commit_id": "32c6ce0be31ce5ad8d56be7ea39c13eff003d938",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: as above, no need for custom timeout",
    "created_at": "2020-06-03T16:04:10Z",
    "updated_at": "2020-06-06T20:31:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r434682439",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434682439"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r434682439"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434682439/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 76,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434915566",
    "pull_request_review_id": 423705241,
    "id": 434915566,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkxNTU2Ng==",
    "diff_hunk": "@@ -0,0 +1,141 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\" Test node eviction logic\n+\n+When the number of peers has reached the limit of maximum connections,\n+the next connecting inbound peer will trigger the eviction mechanism.\n+We cannot currently test the parts of the eviction logic that are based on\n+address/netgroup since in the current framework, all peers are connecting from\n+the same local address. See Issue #14210 for more info.\n+\n+Therefore, this test is limited to the remaining protection criteria:\n+1.) Protect 4 nodes having sent us a block most recently\n+2.) Protect 4 nodes having sent us a transaction most recently\n+3.) Protect 8 nodes with the smallest minimum ping\n+\"\"\"\n+\n+import time\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mininode import P2PInterface, P2PDataStore\n+from test_framework.util import assert_equal, wait_until\n+from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.messages import CTransaction, FromHex, msg_pong, msg_tx\n+\n+\n+class SlowP2PDataStore(P2PDataStore):\n+    def on_ping(self, message):\n+        time.sleep(0.1)\n+        self.send_message(msg_pong(message.nonce))\n+\n+class SlowP2PInterface(P2PInterface):\n+    def on_ping(self, message):\n+        time.sleep(0.1)\n+        self.send_message(msg_pong(message.nonce))\n+\n+\n+class P2PEvict(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        # The choice of 32 maxconnections results in a maximum of 21 inbound connections\n+        # (32 - 10 outbound - 1 feeler). 20 inbounds peers are protected from eviction.\n+        self.extra_args = [['-maxconnections=32']]\n+\n+    def setup_network(self):\n+        self.setup_nodes()\n+\n+    def run_test(self):\n+        self.protected_peers = set() # peers that we expect to be protected from eviction\n+        current_peer = 0\n+        node = self.nodes[0]\n+        node.generatetoaddress(101, node.get_deterministic_priv_key().address)\n+\n+        # The first 4 peers send us a block, protecting them from eviction.\n+        for _ in range(4):\n+            block_peer = node.add_p2p_connection(SlowP2PDataStore())\n+            current_peer += 1\n+            block_peer.sync_with_ping(timeout=5)\n+            best_block = node.getbestblockhash()\n+            tip = int(best_block, 16)\n+            best_block_time = node.getblock(best_block)['time']\n+            block = create_block(tip, create_coinbase(node.getblockcount() + 1), best_block_time + 1)\n+            block.solve()\n+            block_peer.send_blocks_and_test([block], node, success=True)\n+            self.protected_peers.add(current_peer)\n+\n+        # The next 5 nodes are slow-pinging peers, making them eviction candidates.\n+        for _ in range(5):\n+            node.add_p2p_connection(SlowP2PInterface())\n+            current_peer += 1\n+\n+\n+        #The next 4 peers send us a tx, protecting them from eviction\n+        for i in range(4):\n+            txpeer = node.add_p2p_connection(SlowP2PInterface())\n+            current_peer += 1\n+            txpeer.sync_with_ping(timeout=5)\n+\n+            prevtx = node.getblock(node.getblockhash(i+1), 2)['tx'][0]\n+            rawtx = node.createrawtransaction(\n+                inputs=[{'txid': prevtx['txid'], 'vout': 0}],\n+                outputs=[{node.get_deterministic_priv_key().address: 50 - 0.00125}],\n+            )\n+            sigtx = node.signrawtransactionwithkey(\n+                hexstring=rawtx,\n+                privkeys=[node.get_deterministic_priv_key().key],\n+                prevtxs=[{\n+                    'txid': prevtx['txid'],\n+                    'vout': 0,\n+                    'scriptPubKey': prevtx['vout'][0]['scriptPubKey']['hex'],\n+                }],\n+            )['hex']\n+            txpeer.send_message(msg_tx(FromHex(CTransaction(), sigtx)))\n+            self.protected_peers.add(current_peer)\n+\n+        # The next 8 peers have faster pings, which will usually protect them from eviction.\n+        for _ in range(8):\n+            fastpeer = node.add_p2p_connection(P2PInterface())\n+            current_peer += 1\n+            wait_until(lambda: \"ping\" in fastpeer.last_message, timeout=10)\n+\n+        # Make sure by asking the node what the actual min pings are\n+        peerinfo = node.getpeerinfo()\n+        pings = [[0 for i in range(2)] for j in range(len(node.p2ps))]",
    "path": "test/functional/p2p_eviction.py",
    "position": null,
    "original_position": 107,
    "commit_id": "45eff751c6d07007dabc365dc4c0e6c63e3fe5cf",
    "original_commit_id": "3758af78564e9a0e059f38c11e941d68be192fb6",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I wondered the same thing. It's confusing that you do some of the processing before adding the new peer (`pings = [[...`) and some after  (`for i in range(...`). I think you should do all the processing before adding the new connection, since it'll take very little time, and the chance of there being another ping in between is ~zero.\r\n\r\nIf you do keep this ordering, I think it's worth a comment to say why you're doing it.",
    "created_at": "2020-06-03T23:43:37Z",
    "updated_at": "2020-06-06T20:31:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r434915566",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434915566"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r434915566"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434915566/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 105,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 103,
    "side": "RIGHT",
    "in_reply_to_id": 433748047
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434916042",
    "pull_request_review_id": 423705241,
    "id": 434916042,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkxNjA0Mg==",
    "diff_hunk": "@@ -0,0 +1,136 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\" Test node eviction logic\n+\n+When the number of peers has reached the limit of maximum connections,\n+the next connecting inbound peer will trigger the eviction mechanism.\n+We cannot currently test the parts of the eviction logic that are based on\n+address/netgroup since in the current framework, all peers are connecting from\n+the same local address. See Issue #14210 for more info.\n+\n+Therefore, this test is limited to the remaining protection criteria:\n+1.) Protect 4 nodes having sent us a block most recently\n+2.) Protect 4 nodes having sent us a transaction most recently\n+3.) Protect 8 nodes with the smallest minimum ping\n+\"\"\"\n+\n+import time\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mininode import P2PInterface, P2PDataStore\n+from test_framework.util import assert_equal, wait_until\n+from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.messages import CTransaction, FromHex, msg_pong, msg_tx\n+\n+\n+class SlowP2PDataStore(P2PDataStore):\n+    def on_ping(self, message):\n+        time.sleep(0.1)\n+        self.send_message(msg_pong(message.nonce))\n+\n+class SlowP2PInterface(P2PInterface):\n+    def on_ping(self, message):\n+        time.sleep(0.1)\n+        self.send_message(msg_pong(message.nonce))\n+\n+class P2PEvict(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        # The choice of maxconnections=32 results in a maximum of 21 inbound connections\n+        # (32 - 10 outbound - 1 feeler). 20 inbound peers are protected from eviction:\n+        # 4 by netgroup, 4 that sent us blocks, 4 that sent us transactions and 8 via lowest ping time\n+        self.extra_args = [['-maxconnections=32']]\n+\n+    def run_test(self):\n+        self.protected_peers = set() # peers that we expect to be protected from eviction\n+        current_peer = -1\n+        node = self.nodes[0]\n+        node.generatetoaddress(101, node.get_deterministic_priv_key().address)\n+\n+        self.log.info(\"Create 4 peers and protect them from eviction by sending us a block\")\n+        for _ in range(4):\n+            block_peer = node.add_p2p_connection(SlowP2PDataStore())\n+            current_peer += 1\n+            block_peer.sync_with_ping(timeout=5)\n+            best_block = node.getbestblockhash()\n+            tip = int(best_block, 16)\n+            best_block_time = node.getblock(best_block)['time']\n+            block = create_block(tip, create_coinbase(node.getblockcount() + 1), best_block_time + 1)\n+            block.solve()\n+            block_peer.send_blocks_and_test([block], node, success=True)\n+            self.protected_peers.add(current_peer)\n+\n+        self.log.info(\"Create 5 slow-pinging peers, making them eviction candidates\")\n+        for _ in range(5):\n+            node.add_p2p_connection(SlowP2PInterface())\n+            current_peer += 1\n+\n+        self.log.info(\"Create 4 peers and protect them from eviction by sending us a tx\")\n+        for i in range(4):\n+            txpeer = node.add_p2p_connection(SlowP2PInterface())\n+            current_peer += 1\n+            txpeer.sync_with_ping(timeout=5)\n+\n+            prevtx = node.getblock(node.getblockhash(i+1), 2)['tx'][0]\n+            rawtx = node.createrawtransaction(\n+                inputs=[{'txid': prevtx['txid'], 'vout': 0}],\n+                outputs=[{node.get_deterministic_priv_key().address: 50 - 0.00125}],\n+            )\n+            sigtx = node.signrawtransactionwithkey(\n+                hexstring=rawtx,\n+                privkeys=[node.get_deterministic_priv_key().key],\n+                prevtxs=[{\n+                    'txid': prevtx['txid'],\n+                    'vout': 0,\n+                    'scriptPubKey': prevtx['vout'][0]['scriptPubKey']['hex'],\n+                }],\n+            )['hex']\n+            txpeer.send_message(msg_tx(FromHex(CTransaction(), sigtx)))\n+            self.protected_peers.add(current_peer)\n+\n+        self.log.info(\"Create 8 peers and protect them from eviction by having faster pings\")\n+        for _ in range(8):\n+            fastpeer = node.add_p2p_connection(P2PInterface())\n+            current_peer += 1\n+            wait_until(lambda: \"ping\" in fastpeer.last_message, timeout=10)\n+\n+        # Make sure by asking the node what the actual min pings are\n+        peerinfo = node.getpeerinfo()\n+        pings = [[0 for i in range(2)] for j in range(len(node.p2ps))]",
    "path": "test/functional/p2p_eviction.py",
    "position": null,
    "original_position": 103,
    "commit_id": "45eff751c6d07007dabc365dc4c0e6c63e3fe5cf",
    "original_commit_id": "32c6ce0be31ce5ad8d56be7ea39c13eff003d938",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Using a list of lists like this is a slightly confusing structure. Consider using a dictionary, and then sorting the `dict.items()` items by value.",
    "created_at": "2020-06-03T23:45:30Z",
    "updated_at": "2020-06-06T20:31:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r434916042",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434916042"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r434916042"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434916042/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 103,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434917055",
    "pull_request_review_id": 423705241,
    "id": 434917055,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkxNzA1NQ==",
    "diff_hunk": "@@ -0,0 +1,136 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\" Test node eviction logic\n+\n+When the number of peers has reached the limit of maximum connections,\n+the next connecting inbound peer will trigger the eviction mechanism.\n+We cannot currently test the parts of the eviction logic that are based on\n+address/netgroup since in the current framework, all peers are connecting from\n+the same local address. See Issue #14210 for more info.\n+\n+Therefore, this test is limited to the remaining protection criteria:\n+1.) Protect 4 nodes having sent us a block most recently",
    "path": "test/functional/p2p_eviction.py",
    "position": null,
    "original_position": 15,
    "commit_id": "45eff751c6d07007dabc365dc4c0e6c63e3fe5cf",
    "original_commit_id": "32c6ce0be31ce5ad8d56be7ea39c13eff003d938",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Consider removing these criteria from the file-level doc string and just relying on the comments below. If the criteria ever change, it's likely that this docstring will not get updated and will become outdated.",
    "created_at": "2020-06-03T23:49:10Z",
    "updated_at": "2020-06-06T20:31:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r434917055",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434917055"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r434917055"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/434917055/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 15,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/436297654",
    "pull_request_review_id": 425766107,
    "id": 436297654,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI5NzY1NA==",
    "diff_hunk": "@@ -0,0 +1,141 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\" Test node eviction logic\n+\n+When the number of peers has reached the limit of maximum connections,\n+the next connecting inbound peer will trigger the eviction mechanism.\n+We cannot currently test the parts of the eviction logic that are based on\n+address/netgroup since in the current framework, all peers are connecting from\n+the same local address. See Issue #14210 for more info.\n+\n+Therefore, this test is limited to the remaining protection criteria:\n+1.) Protect 4 nodes having sent us a block most recently\n+2.) Protect 4 nodes having sent us a transaction most recently\n+3.) Protect 8 nodes with the smallest minimum ping\n+\"\"\"\n+\n+import time\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mininode import P2PInterface, P2PDataStore\n+from test_framework.util import assert_equal, wait_until\n+from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.messages import CTransaction, FromHex, msg_pong, msg_tx\n+\n+\n+class SlowP2PDataStore(P2PDataStore):\n+    def on_ping(self, message):\n+        time.sleep(0.1)\n+        self.send_message(msg_pong(message.nonce))\n+\n+class SlowP2PInterface(P2PInterface):\n+    def on_ping(self, message):\n+        time.sleep(0.1)\n+        self.send_message(msg_pong(message.nonce))\n+\n+\n+class P2PEvict(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        # The choice of 32 maxconnections results in a maximum of 21 inbound connections\n+        # (32 - 10 outbound - 1 feeler). 20 inbounds peers are protected from eviction.\n+        self.extra_args = [['-maxconnections=32']]\n+\n+    def setup_network(self):\n+        self.setup_nodes()\n+\n+    def run_test(self):\n+        self.protected_peers = set() # peers that we expect to be protected from eviction\n+        current_peer = 0\n+        node = self.nodes[0]\n+        node.generatetoaddress(101, node.get_deterministic_priv_key().address)\n+\n+        # The first 4 peers send us a block, protecting them from eviction.\n+        for _ in range(4):\n+            block_peer = node.add_p2p_connection(SlowP2PDataStore())\n+            current_peer += 1\n+            block_peer.sync_with_ping(timeout=5)\n+            best_block = node.getbestblockhash()\n+            tip = int(best_block, 16)\n+            best_block_time = node.getblock(best_block)['time']\n+            block = create_block(tip, create_coinbase(node.getblockcount() + 1), best_block_time + 1)\n+            block.solve()\n+            block_peer.send_blocks_and_test([block], node, success=True)\n+            self.protected_peers.add(current_peer)\n+\n+        # The next 5 nodes are slow-pinging peers, making them eviction candidates.\n+        for _ in range(5):\n+            node.add_p2p_connection(SlowP2PInterface())\n+            current_peer += 1\n+\n+\n+        #The next 4 peers send us a tx, protecting them from eviction\n+        for i in range(4):\n+            txpeer = node.add_p2p_connection(SlowP2PInterface())\n+            current_peer += 1\n+            txpeer.sync_with_ping(timeout=5)\n+\n+            prevtx = node.getblock(node.getblockhash(i+1), 2)['tx'][0]\n+            rawtx = node.createrawtransaction(\n+                inputs=[{'txid': prevtx['txid'], 'vout': 0}],\n+                outputs=[{node.get_deterministic_priv_key().address: 50 - 0.00125}],\n+            )\n+            sigtx = node.signrawtransactionwithkey(\n+                hexstring=rawtx,\n+                privkeys=[node.get_deterministic_priv_key().key],\n+                prevtxs=[{\n+                    'txid': prevtx['txid'],\n+                    'vout': 0,\n+                    'scriptPubKey': prevtx['vout'][0]['scriptPubKey']['hex'],\n+                }],\n+            )['hex']\n+            txpeer.send_message(msg_tx(FromHex(CTransaction(), sigtx)))\n+            self.protected_peers.add(current_peer)\n+\n+        # The next 8 peers have faster pings, which will usually protect them from eviction.\n+        for _ in range(8):\n+            fastpeer = node.add_p2p_connection(P2PInterface())\n+            current_peer += 1\n+            wait_until(lambda: \"ping\" in fastpeer.last_message, timeout=10)\n+\n+        # Make sure by asking the node what the actual min pings are\n+        peerinfo = node.getpeerinfo()\n+        pings = [[0 for i in range(2)] for j in range(len(node.p2ps))]",
    "path": "test/functional/p2p_eviction.py",
    "position": null,
    "original_position": 107,
    "commit_id": "45eff751c6d07007dabc365dc4c0e6c63e3fe5cf",
    "original_commit_id": "3758af78564e9a0e059f38c11e941d68be192fb6",
    "user": {
      "login": "mzumsande",
      "id": 48763452,
      "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mzumsande",
      "html_url": "https://github.com/mzumsande",
      "followers_url": "https://api.github.com/users/mzumsande/followers",
      "following_url": "https://api.github.com/users/mzumsande/following{/other_user}",
      "gists_url": "https://api.github.com/users/mzumsande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
      "organizations_url": "https://api.github.com/users/mzumsande/orgs",
      "repos_url": "https://api.github.com/users/mzumsande/repos",
      "events_url": "https://api.github.com/users/mzumsande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mzumsande/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I changed the ordering since the probability of furthers pings is extremely low.",
    "created_at": "2020-06-06T20:17:15Z",
    "updated_at": "2020-06-06T20:31:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r436297654",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/436297654"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r436297654"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/436297654/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 105,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 103,
    "side": "RIGHT",
    "in_reply_to_id": 433748047
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/436297761",
    "pull_request_review_id": 425766249,
    "id": 436297761,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI5Nzc2MQ==",
    "diff_hunk": "@@ -0,0 +1,141 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\" Test node eviction logic\n+\n+When the number of peers has reached the limit of maximum connections,\n+the next connecting inbound peer will trigger the eviction mechanism.\n+We cannot currently test the parts of the eviction logic that are based on\n+address/netgroup since in the current framework, all peers are connecting from\n+the same local address. See Issue #14210 for more info.\n+\n+Therefore, this test is limited to the remaining protection criteria:\n+1.) Protect 4 nodes having sent us a block most recently\n+2.) Protect 4 nodes having sent us a transaction most recently\n+3.) Protect 8 nodes with the smallest minimum ping\n+\"\"\"\n+\n+import time\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mininode import P2PInterface, P2PDataStore\n+from test_framework.util import assert_equal, wait_until\n+from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.messages import CTransaction, FromHex, msg_pong, msg_tx\n+\n+\n+class SlowP2PDataStore(P2PDataStore):\n+    def on_ping(self, message):\n+        time.sleep(0.1)\n+        self.send_message(msg_pong(message.nonce))\n+\n+class SlowP2PInterface(P2PInterface):\n+    def on_ping(self, message):\n+        time.sleep(0.1)\n+        self.send_message(msg_pong(message.nonce))\n+\n+\n+class P2PEvict(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        # The choice of 32 maxconnections results in a maximum of 21 inbound connections\n+        # (32 - 10 outbound - 1 feeler). 20 inbounds peers are protected from eviction.\n+        self.extra_args = [['-maxconnections=32']]\n+\n+    def setup_network(self):\n+        self.setup_nodes()\n+",
    "path": "test/functional/p2p_eviction.py",
    "position": null,
    "original_position": 50,
    "commit_id": "45eff751c6d07007dabc365dc4c0e6c63e3fe5cf",
    "original_commit_id": "3758af78564e9a0e059f38c11e941d68be192fb6",
    "user": {
      "login": "mzumsande",
      "id": 48763452,
      "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mzumsande",
      "html_url": "https://github.com/mzumsande",
      "followers_url": "https://api.github.com/users/mzumsande/followers",
      "following_url": "https://api.github.com/users/mzumsande/following{/other_user}",
      "gists_url": "https://api.github.com/users/mzumsande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
      "organizations_url": "https://api.github.com/users/mzumsande/orgs",
      "repos_url": "https://api.github.com/users/mzumsande/repos",
      "events_url": "https://api.github.com/users/mzumsande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mzumsande/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done, made them local again.",
    "created_at": "2020-06-06T20:18:56Z",
    "updated_at": "2020-06-06T20:31:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r436297761",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/436297761"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r436297761"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/436297761/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 50,
    "side": "RIGHT",
    "in_reply_to_id": 433861797
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/436297837",
    "pull_request_review_id": 425766343,
    "id": 436297837,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI5NzgzNw==",
    "diff_hunk": "@@ -0,0 +1,136 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\" Test node eviction logic\n+\n+When the number of peers has reached the limit of maximum connections,\n+the next connecting inbound peer will trigger the eviction mechanism.\n+We cannot currently test the parts of the eviction logic that are based on\n+address/netgroup since in the current framework, all peers are connecting from\n+the same local address. See Issue #14210 for more info.\n+\n+Therefore, this test is limited to the remaining protection criteria:\n+1.) Protect 4 nodes having sent us a block most recently",
    "path": "test/functional/p2p_eviction.py",
    "position": null,
    "original_position": 15,
    "commit_id": "45eff751c6d07007dabc365dc4c0e6c63e3fe5cf",
    "original_commit_id": "32c6ce0be31ce5ad8d56be7ea39c13eff003d938",
    "user": {
      "login": "mzumsande",
      "id": 48763452,
      "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mzumsande",
      "html_url": "https://github.com/mzumsande",
      "followers_url": "https://api.github.com/users/mzumsande/followers",
      "following_url": "https://api.github.com/users/mzumsande/following{/other_user}",
      "gists_url": "https://api.github.com/users/mzumsande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
      "organizations_url": "https://api.github.com/users/mzumsande/orgs",
      "repos_url": "https://api.github.com/users/mzumsande/repos",
      "events_url": "https://api.github.com/users/mzumsande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mzumsande/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "done",
    "created_at": "2020-06-06T20:20:16Z",
    "updated_at": "2020-06-06T20:31:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r436297837",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/436297837"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r436297837"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/436297837/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 15,
    "side": "RIGHT",
    "in_reply_to_id": 434917055
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/436298858",
    "pull_request_review_id": 425767300,
    "id": 436298858,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI5ODg1OA==",
    "diff_hunk": "@@ -0,0 +1,136 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\" Test node eviction logic\n+\n+When the number of peers has reached the limit of maximum connections,\n+the next connecting inbound peer will trigger the eviction mechanism.\n+We cannot currently test the parts of the eviction logic that are based on\n+address/netgroup since in the current framework, all peers are connecting from\n+the same local address. See Issue #14210 for more info.\n+\n+Therefore, this test is limited to the remaining protection criteria:\n+1.) Protect 4 nodes having sent us a block most recently\n+2.) Protect 4 nodes having sent us a transaction most recently\n+3.) Protect 8 nodes with the smallest minimum ping\n+\"\"\"\n+\n+import time\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mininode import P2PInterface, P2PDataStore\n+from test_framework.util import assert_equal, wait_until\n+from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.messages import CTransaction, FromHex, msg_pong, msg_tx\n+\n+\n+class SlowP2PDataStore(P2PDataStore):\n+    def on_ping(self, message):\n+        time.sleep(0.1)\n+        self.send_message(msg_pong(message.nonce))\n+\n+class SlowP2PInterface(P2PInterface):\n+    def on_ping(self, message):\n+        time.sleep(0.1)\n+        self.send_message(msg_pong(message.nonce))\n+\n+class P2PEvict(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        # The choice of maxconnections=32 results in a maximum of 21 inbound connections\n+        # (32 - 10 outbound - 1 feeler). 20 inbound peers are protected from eviction:\n+        # 4 by netgroup, 4 that sent us blocks, 4 that sent us transactions and 8 via lowest ping time\n+        self.extra_args = [['-maxconnections=32']]\n+\n+    def run_test(self):\n+        self.protected_peers = set() # peers that we expect to be protected from eviction\n+        current_peer = -1\n+        node = self.nodes[0]\n+        node.generatetoaddress(101, node.get_deterministic_priv_key().address)\n+\n+        self.log.info(\"Create 4 peers and protect them from eviction by sending us a block\")\n+        for _ in range(4):\n+            block_peer = node.add_p2p_connection(SlowP2PDataStore())\n+            current_peer += 1\n+            block_peer.sync_with_ping(timeout=5)\n+            best_block = node.getbestblockhash()\n+            tip = int(best_block, 16)\n+            best_block_time = node.getblock(best_block)['time']\n+            block = create_block(tip, create_coinbase(node.getblockcount() + 1), best_block_time + 1)\n+            block.solve()\n+            block_peer.send_blocks_and_test([block], node, success=True)\n+            self.protected_peers.add(current_peer)\n+\n+        self.log.info(\"Create 5 slow-pinging peers, making them eviction candidates\")\n+        for _ in range(5):\n+            node.add_p2p_connection(SlowP2PInterface())\n+            current_peer += 1\n+\n+        self.log.info(\"Create 4 peers and protect them from eviction by sending us a tx\")\n+        for i in range(4):\n+            txpeer = node.add_p2p_connection(SlowP2PInterface())\n+            current_peer += 1\n+            txpeer.sync_with_ping(timeout=5)\n+\n+            prevtx = node.getblock(node.getblockhash(i+1), 2)['tx'][0]\n+            rawtx = node.createrawtransaction(\n+                inputs=[{'txid': prevtx['txid'], 'vout': 0}],\n+                outputs=[{node.get_deterministic_priv_key().address: 50 - 0.00125}],\n+            )\n+            sigtx = node.signrawtransactionwithkey(\n+                hexstring=rawtx,\n+                privkeys=[node.get_deterministic_priv_key().key],\n+                prevtxs=[{\n+                    'txid': prevtx['txid'],\n+                    'vout': 0,\n+                    'scriptPubKey': prevtx['vout'][0]['scriptPubKey']['hex'],\n+                }],\n+            )['hex']\n+            txpeer.send_message(msg_tx(FromHex(CTransaction(), sigtx)))\n+            self.protected_peers.add(current_peer)\n+\n+        self.log.info(\"Create 8 peers and protect them from eviction by having faster pings\")\n+        for _ in range(8):\n+            fastpeer = node.add_p2p_connection(P2PInterface())\n+            current_peer += 1\n+            wait_until(lambda: \"ping\" in fastpeer.last_message, timeout=10)\n+\n+        # Make sure by asking the node what the actual min pings are\n+        peerinfo = node.getpeerinfo()\n+        pings = [[0 for i in range(2)] for j in range(len(node.p2ps))]",
    "path": "test/functional/p2p_eviction.py",
    "position": null,
    "original_position": 103,
    "commit_id": "45eff751c6d07007dabc365dc4c0e6c63e3fe5cf",
    "original_commit_id": "32c6ce0be31ce5ad8d56be7ea39c13eff003d938",
    "user": {
      "login": "mzumsande",
      "id": 48763452,
      "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mzumsande",
      "html_url": "https://github.com/mzumsande",
      "followers_url": "https://api.github.com/users/mzumsande/followers",
      "following_url": "https://api.github.com/users/mzumsande/following{/other_user}",
      "gists_url": "https://api.github.com/users/mzumsande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
      "organizations_url": "https://api.github.com/users/mzumsande/orgs",
      "repos_url": "https://api.github.com/users/mzumsande/repos",
      "events_url": "https://api.github.com/users/mzumsande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mzumsande/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Changed it to a dictionary.",
    "created_at": "2020-06-06T20:36:17Z",
    "updated_at": "2020-06-06T20:36:17Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r436298858",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/436298858"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r436298858"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/436298858/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 103,
    "side": "RIGHT",
    "in_reply_to_id": 434916042
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/439484111",
    "pull_request_review_id": 429829737,
    "id": 439484111,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ4NDExMQ==",
    "diff_hunk": "@@ -0,0 +1,129 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers",
    "path": "test/functional/p2p_eviction.py",
    "position": 2,
    "original_position": 2,
    "commit_id": "45eff751c6d07007dabc365dc4c0e6c63e3fe5cf",
    "original_commit_id": "45eff751c6d07007dabc365dc4c0e6c63e3fe5cf",
    "user": {
      "login": "andrewtoth",
      "id": 237213,
      "node_id": "MDQ6VXNlcjIzNzIxMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/andrewtoth",
      "html_url": "https://github.com/andrewtoth",
      "followers_url": "https://api.github.com/users/andrewtoth/followers",
      "following_url": "https://api.github.com/users/andrewtoth/following{/other_user}",
      "gists_url": "https://api.github.com/users/andrewtoth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/andrewtoth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
      "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
      "repos_url": "https://api.github.com/users/andrewtoth/repos",
      "events_url": "https://api.github.com/users/andrewtoth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit\r\n```suggestion\r\n# Copyright (c) 2020 The Bitcoin Core developers\r\n```",
    "created_at": "2020-06-12T15:20:29Z",
    "updated_at": "2020-06-12T15:20:30Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r439484111",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/439484111"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16756#discussion_r439484111"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16756"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/439484111/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 2,
    "original_line": 2,
    "side": "RIGHT"
  }
]