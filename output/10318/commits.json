[
  {
    "sha": "3e3c22f09d37169fa88327323c3755be6dbd9a62",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZTNjMjJmMDlkMzcxNjlmYTg4MzI3MzIzYzM3NTViZTZkYmQ5YTYy",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-05-02T20:34:44Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-05-03T13:08:29Z"
      },
      "message": "[tests] fix wait_for_inv()",
      "tree": {
        "sha": "632303ea2e62d6a2f8a797ef0bf21e149c9f921a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/632303ea2e62d6a2f8a797ef0bf21e149c9f921a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3e3c22f09d37169fa88327323c3755be6dbd9a62",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e3c22f09d37169fa88327323c3755be6dbd9a62",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3e3c22f09d37169fa88327323c3755be6dbd9a62",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e3c22f09d37169fa88327323c3755be6dbd9a62/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dc8fc0c73bebbc1c48ac5540026030c9cc00ec23",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc8fc0c73bebbc1c48ac5540026030c9cc00ec23",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dc8fc0c73bebbc1c48ac5540026030c9cc00ec23"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 8,
      "deletions": 3
    },
    "files": [
      {
        "sha": "1499ca525f82b82b63c5cff9a6f5b0bad55ee7bb",
        "filename": "test/functional/p2p-segwit.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e3c22f09d37169fa88327323c3755be6dbd9a62/test/functional/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e3c22f09d37169fa88327323c3755be6dbd9a62/test/functional/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-segwit.py?ref=3e3c22f09d37169fa88327323c3755be6dbd9a62",
        "patch": "@@ -926,9 +926,9 @@ def test_tx_relay_after_segwit_activation(self):\n         tx3.wit.vtxinwit[0].scriptWitness.stack = [ witness_program ]\n         # Also check that old_node gets a tx announcement, even though this is\n         # a witness transaction.\n-        self.old_node.wait_for_inv(CInv(1, tx2.sha256)) # wait until tx2 was inv'ed\n+        self.old_node.wait_for_inv([CInv(1, tx2.sha256)]) # wait until tx2 was inv'ed\n         self.test_node.test_transaction_acceptance(tx3, with_witness=True, accepted=True)\n-        self.old_node.wait_for_inv(CInv(1, tx3.sha256))\n+        self.old_node.wait_for_inv([CInv(1, tx3.sha256)])\n \n         # Test that getrawtransaction returns correct witness information\n         # hash, size, vsize"
      },
      {
        "sha": "70bba566c76c313b3bd88d4415de185bf81e2938",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e3c22f09d37169fa88327323c3755be6dbd9a62/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e3c22f09d37169fa88327323c3755be6dbd9a62/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=3e3c22f09d37169fa88327323c3755be6dbd9a62",
        "patch": "@@ -1604,7 +1604,12 @@ def wait_for_getheaders(self, timeout=60):\n         assert wait_until(test_function, timeout=timeout)\n \n     def wait_for_inv(self, expected_inv, timeout=60):\n-        test_function = lambda: self.last_message.get(\"inv\") and self.last_message[\"inv\"] != expected_inv\n+        \"\"\"Waits for an INV message and checks that the first inv object in the message was as expected.\"\"\"\n+        if len(expected_inv) > 1:\n+            raise NotImplementedError(\"wait_for_inv() will only verify the first inv object\")\n+        test_function = lambda: self.last_message.get(\"inv\") and \\\n+                                self.last_message[\"inv\"].inv[0].type == expected_inv[0].type and \\\n+                                self.last_message[\"inv\"].inv[0].hash == expected_inv[0].hash\n         assert wait_until(test_function, timeout=timeout)\n \n     def wait_for_verack(self, timeout=60):"
      }
    ]
  }
]