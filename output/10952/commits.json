[
  {
    "sha": "e53615b443894fb96d5eb885b3812776c1b1033b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNTM2MTViNDQzODk0ZmI5NmQ1ZWI4ODViMzgxMjc3NmMxYjEwMzNi",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2017-07-29T00:00:49Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2017-08-15T22:05:53Z"
      },
      "message": "Remove vchDefaultKey and have better first run detection\n\nRemoves vchDefaultKey which was only used for first run detection.\nImproves wallet first run detection by checking to see if any keys\nwere read from the database.\n\nThis will now also check for a valid defaultkey for backwards\ncompatibility reasons and to check for any corruption.\n\nKeys will stil be generated on the first one, but there won't be\nany shown in the address book as was previously done.",
      "tree": {
        "sha": "c2f5789ec8e1a840161d58698f9014c81e3b24d3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c2f5789ec8e1a840161d58698f9014c81e3b24d3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e53615b443894fb96d5eb885b3812776c1b1033b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e53615b443894fb96d5eb885b3812776c1b1033b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e53615b443894fb96d5eb885b3812776c1b1033b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e53615b443894fb96d5eb885b3812776c1b1033b/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ae47724687a78572daba5bc113d99d03b7ab01d6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae47724687a78572daba5bc113d99d03b7ab01d6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ae47724687a78572daba5bc113d99d03b7ab01d6"
      }
    ],
    "stats": {
      "total": 61,
      "additions": 23,
      "deletions": 38
    },
    "files": [
      {
        "sha": "f1e8a256507010c001fc6635ac89bb3bfdcde2c4",
        "filename": "src/wallet/crypter.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e53615b443894fb96d5eb885b3812776c1b1033b/src/wallet/crypter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e53615b443894fb96d5eb885b3812776c1b1033b/src/wallet/crypter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.h?ref=e53615b443894fb96d5eb885b3812776c1b1033b",
        "patch": "@@ -113,7 +113,6 @@ friend class wallet_crypto::TestCrypter; // for test access to chKey/chIV\n class CCryptoKeyStore : public CBasicKeyStore\n {\n private:\n-    CryptedKeyMap mapCryptedKeys;\n \n     CKeyingMaterial vMasterKey;\n \n@@ -131,6 +130,7 @@ class CCryptoKeyStore : public CBasicKeyStore\n     bool EncryptKeys(CKeyingMaterial& vMasterKeyIn);\n \n     bool Unlock(const CKeyingMaterial& vMasterKeyIn);\n+    CryptedKeyMap mapCryptedKeys;\n \n public:\n     CCryptoKeyStore() : fUseCrypto(false), fDecryptionThoroughlyChecked(false)"
      },
      {
        "sha": "ea436b4136e016ccbeb440d9f186724444995445",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 18,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e53615b443894fb96d5eb885b3812776c1b1033b/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e53615b443894fb96d5eb885b3812776c1b1033b/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=e53615b443894fb96d5eb885b3812776c1b1033b",
        "patch": "@@ -3114,9 +3114,11 @@ DBErrors CWallet::LoadWallet(bool& fFirstRunRet)\n         }\n     }\n \n+    // This wallet is in its first run if all of these are empty\n+    fFirstRunRet = mapKeys.empty() && mapCryptedKeys.empty() && mapWatchKeys.empty() && setWatchOnly.empty() && mapScripts.empty();\n+\n     if (nLoadWalletRet != DB_LOAD_OK)\n         return nLoadWalletRet;\n-    fFirstRunRet = !vchDefaultKey.IsValid();\n \n     uiInterface.LoadWallet(this);\n \n@@ -3126,7 +3128,6 @@ DBErrors CWallet::LoadWallet(bool& fFirstRunRet)\n DBErrors CWallet::ZapSelectTx(std::vector<uint256>& vHashIn, std::vector<uint256>& vHashOut)\n {\n     AssertLockHeld(cs_wallet); // mapWallet\n-    vchDefaultKey = CPubKey();\n     DBErrors nZapSelectTxRet = CWalletDB(*dbw,\"cr+\").ZapSelectTx(vHashIn, vHashOut);\n     for (uint256 hash : vHashOut)\n         mapWallet.erase(hash);\n@@ -3155,7 +3156,6 @@ DBErrors CWallet::ZapSelectTx(std::vector<uint256>& vHashIn, std::vector<uint256\n \n DBErrors CWallet::ZapWalletTx(std::vector<CWalletTx>& vWtx)\n {\n-    vchDefaultKey = CPubKey();\n     DBErrors nZapWalletTxRet = CWalletDB(*dbw,\"cr+\").ZapWalletTx(vWtx);\n     if (nZapWalletTxRet == DB_NEED_REWRITE)\n     {\n@@ -3231,14 +3231,6 @@ const std::string& CWallet::GetAccountName(const CScript& scriptPubKey) const\n     return DEFAULT_ACCOUNT_NAME;\n }\n \n-bool CWallet::SetDefaultKey(const CPubKey &vchPubKey)\n-{\n-    if (!CWalletDB(*dbw).WriteDefaultKey(vchPubKey))\n-        return false;\n-    vchDefaultKey = vchPubKey;\n-    return true;\n-}\n-\n /**\n  * Mark old keypool keys as used,\n  * and generate all new keys\n@@ -4014,13 +4006,11 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n             if (!walletInstance->SetHDMasterKey(masterPubKey))\n                 throw std::runtime_error(std::string(__func__) + \": Storing master key failed\");\n         }\n-        CPubKey newDefaultKey;\n-        if (walletInstance->GetKeyFromPool(newDefaultKey, false)) {\n-            walletInstance->SetDefaultKey(newDefaultKey);\n-            if (!walletInstance->SetAddressBook(walletInstance->vchDefaultKey.GetID(), \"\", \"receive\")) {\n-                InitError(_(\"Cannot write default address\") += \"\\n\");\n-                return nullptr;\n-            }\n+\n+        // Top up the keypool\n+        if (!walletInstance->TopUpKeyPool()) {\n+            InitError(_(\"Unable to generate initial keys\") += \"\\n\");\n+            return NULL;\n         }\n \n         walletInstance->SetBestChain(chainActive.GetLocator());"
      },
      {
        "sha": "d79edbb1133cf58889e89eb8b3d68b16b7f8a345",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e53615b443894fb96d5eb885b3812776c1b1033b/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e53615b443894fb96d5eb885b3812776c1b1033b/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=e53615b443894fb96d5eb885b3812776c1b1033b",
        "patch": "@@ -807,8 +807,6 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n \n     std::map<CTxDestination, CAddressBookData> mapAddressBook;\n \n-    CPubKey vchDefaultKey;\n-\n     std::set<COutPoint> setLockedCoins;\n \n     const CWalletTx* GetWalletTx(const uint256& hash) const;\n@@ -1040,8 +1038,6 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n         return setInternalKeyPool.size() + setExternalKeyPool.size();\n     }\n \n-    bool SetDefaultKey(const CPubKey &vchPubKey);\n-\n     //! signify that a particular wallet feature is now used. this may change nWalletVersion and nWalletMaxVersion if those are lower\n     bool SetMinVersion(enum WalletFeature, CWalletDB* pwalletdbIn = nullptr, bool fExplicit = false);\n "
      },
      {
        "sha": "102f3d3a08eafd323a2b0a94647e91499b1078cf",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 8,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e53615b443894fb96d5eb885b3812776c1b1033b/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e53615b443894fb96d5eb885b3812776c1b1033b/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=e53615b443894fb96d5eb885b3812776c1b1033b",
        "patch": "@@ -130,11 +130,6 @@ bool CWalletDB::WriteOrderPosNext(int64_t nOrderPosNext)\n     return WriteIC(std::string(\"orderposnext\"), nOrderPosNext);\n }\n \n-bool CWalletDB::WriteDefaultKey(const CPubKey& vchPubKey)\n-{\n-    return WriteIC(std::string(\"defaultkey\"), vchPubKey);\n-}\n-\n bool CWalletDB::ReadPool(int64_t nPool, CKeyPool& keypool)\n {\n     return batch.Read(std::make_pair(std::string(\"pool\"), nPool), keypool);\n@@ -452,7 +447,14 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n         }\n         else if (strType == \"defaultkey\")\n         {\n-            ssValue >> pwallet->vchDefaultKey;\n+            // We don't want or need the default key, but if there is one set,\n+            // we want to make sure that it is valid so that we can detect corruption\n+            CPubKey vchPubKey;\n+            ssValue >> vchPubKey;\n+            if (!vchPubKey.IsValid()) {\n+                strErr = \"Error reading wallet database: Default Key corrupt\";\n+                return false;\n+            }\n         }\n         else if (strType == \"pool\")\n         {\n@@ -522,7 +524,6 @@ bool CWalletDB::IsKeyType(const std::string& strType)\n \n DBErrors CWalletDB::LoadWallet(CWallet* pwallet)\n {\n-    pwallet->vchDefaultKey = CPubKey();\n     CWalletScanState wss;\n     bool fNoncriticalErrors = false;\n     DBErrors result = DB_LOAD_OK;\n@@ -565,7 +566,7 @@ DBErrors CWalletDB::LoadWallet(CWallet* pwallet)\n             {\n                 // losing keys is considered a catastrophic error, anything else\n                 // we assume the user can live with:\n-                if (IsKeyType(strType))\n+                if (IsKeyType(strType) || strType == \"defaultkey\")\n                     result = DB_CORRUPT;\n                 else\n                 {"
      },
      {
        "sha": "4e22143c751ca5d88b858b7fe2e8857b6bca09f5",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e53615b443894fb96d5eb885b3812776c1b1033b/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e53615b443894fb96d5eb885b3812776c1b1033b/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=e53615b443894fb96d5eb885b3812776c1b1033b",
        "patch": "@@ -191,8 +191,6 @@ class CWalletDB\n \n     bool WriteOrderPosNext(int64_t nOrderPosNext);\n \n-    bool WriteDefaultKey(const CPubKey& vchPubKey);\n-\n     bool ReadPool(int64_t nPool, CKeyPool& keypool);\n     bool WritePool(int64_t nPool, const CKeyPool& keypool);\n     bool ErasePool(int64_t nPool);"
      },
      {
        "sha": "da29f697e3db3f212d41cfebf353883cca92515d",
        "filename": "test/functional/keypool-topup.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e53615b443894fb96d5eb885b3812776c1b1033b/test/functional/keypool-topup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e53615b443894fb96d5eb885b3812776c1b1033b/test/functional/keypool-topup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/keypool-topup.py?ref=e53615b443894fb96d5eb885b3812776c1b1033b",
        "patch": "@@ -69,7 +69,7 @@ def run_test(self):\n         assert_equal(self.nodes[1].listtransactions()[0]['category'], \"receive\")\n \n         # Check that we have marked all keys up to the used keypool key as used\n-        assert_equal(self.nodes[1].validateaddress(self.nodes[1].getnewaddress())['hdkeypath'], \"m/0'/0'/111'\")\n+        assert_equal(self.nodes[1].validateaddress(self.nodes[1].getnewaddress())['hdkeypath'], \"m/0'/0'/110'\")\n \n if __name__ == '__main__':\n     KeypoolRestoreTest().main()"
      },
      {
        "sha": "751512301ef23865b63df0780537b14169c3ddb2",
        "filename": "test/functional/wallet-hd.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e53615b443894fb96d5eb885b3812776c1b1033b/test/functional/wallet-hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e53615b443894fb96d5eb885b3812776c1b1033b/test/functional/wallet-hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-hd.py?ref=e53615b443894fb96d5eb885b3812776c1b1033b",
        "patch": "@@ -42,7 +42,7 @@ def run_test (self):\n         non_hd_add = self.nodes[0].getnewaddress()\n         self.nodes[1].importprivkey(self.nodes[0].dumpprivkey(non_hd_add))\n \n-        # This should be enough to keep the master key and the non-HD key \n+        # This should be enough to keep the master key and the non-HD key\n         self.nodes[1].backupwallet(tmpdir + \"/hd.bak\")\n         #self.nodes[1].dumpwallet(tmpdir + \"/hd.dump\")\n \n@@ -54,7 +54,7 @@ def run_test (self):\n         for i in range(num_hd_adds):\n             hd_add = self.nodes[1].getnewaddress()\n             hd_info = self.nodes[1].validateaddress(hd_add)\n-            assert_equal(hd_info[\"hdkeypath\"], \"m/0'/0'/\"+str(i+1)+\"'\")\n+            assert_equal(hd_info[\"hdkeypath\"], \"m/0'/0'/\"+str(i)+\"'\")\n             assert_equal(hd_info[\"hdmasterkeyid\"], masterkeyid)\n             self.nodes[0].sendtoaddress(hd_add, 1)\n             self.nodes[0].generate(1)\n@@ -83,7 +83,7 @@ def run_test (self):\n         for _ in range(num_hd_adds):\n             hd_add_2 = self.nodes[1].getnewaddress()\n             hd_info_2 = self.nodes[1].validateaddress(hd_add_2)\n-            assert_equal(hd_info_2[\"hdkeypath\"], \"m/0'/0'/\"+str(_+1)+\"'\")\n+            assert_equal(hd_info_2[\"hdkeypath\"], \"m/0'/0'/\"+str(_)+\"'\")\n             assert_equal(hd_info_2[\"hdmasterkeyid\"], masterkeyid)\n         assert_equal(hd_add, hd_add_2)\n         connect_nodes_bi(self.nodes, 0, 1)\n@@ -101,7 +101,7 @@ def run_test (self):\n         for out in outs:\n             if out['value'] != 1:\n                 keypath = self.nodes[1].validateaddress(out['scriptPubKey']['addresses'][0])['hdkeypath']\n-        \n+\n         assert_equal(keypath[0:7], \"m/0'/1'\")\n \n if __name__ == '__main__':"
      }
    ]
  }
]