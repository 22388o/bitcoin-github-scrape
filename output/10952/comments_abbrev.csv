gmaxwell,2017-07-29T21:37:01Z,"So you still need to write a default key unless we're going to bump the wallet version again for this, because otherwise you'll make it backwards incompatible with software without this patch.\n\nOtherwise, Concept ACK!",https://github.com/bitcoin/bitcoin/pull/10952#issuecomment-318861268,318861268,
achow101,2017-07-29T21:56:17Z,"How about bump the wallet version again? If there are any other wallet changes that need a version bump, we could do them all at the same time.",https://github.com/bitcoin/bitcoin/pull/10952#issuecomment-318862222,318862222,
gmaxwell,2017-07-30T00:41:58Z,I would be fine with that but I think it might be easier to get this bugfix merged without it.,https://github.com/bitcoin/bitcoin/pull/10952#issuecomment-318869295,318869295,
TheBlueMatt,2017-07-30T14:36:30Z,"Sounds like maybe something that we should look into for 15, then, though I'd really like to look into the source of the corruption here, rather than patching over it.",https://github.com/bitcoin/bitcoin/pull/10952#issuecomment-318905869,318905869,
achow101,2017-07-31T18:18:37Z,@gmaxwell I added `WriteDefaultKey` back in so that a default key will be written to maintain backwards compatibility. The key will not be read in.,https://github.com/bitcoin/bitcoin/pull/10952#issuecomment-319152439,319152439,
TheBlueMatt,2017-08-03T16:15:36Z,"I really dont think this is the right way to fix this issue. Can we instead ensure that, if the wallet has keys but vchDefaultKey is invalid, an error is printed like ""your wallet is corrupted, seems you disk is silently corrupting things"", and then make sure -salvagewallet is able to properly recover from this state?",https://github.com/bitcoin/bitcoin/pull/10952#issuecomment-320017634,320017634,
achow101,2017-08-03T23:44:34Z,"I have updated this with a few changes.\n\nI removed the defaultkey writing again. New wallets will no longer have a default key. If a defaultkey is found in the wallet, it must be valid, otherwise it will exit with a wallet corruption error.\n\nIt turns out that `-salvagewallet` may have been the cause of all of these issues. `-salvagewallet` apparently does not write a default key to the wal",https://github.com/bitcoin/bitcoin/pull/10952#issuecomment-320118820,320118820,
MarcoFalke,2017-08-04T06:17:38Z,"AssertionError in wallet-hd:\n\n```py\nAssertionError: not(m/0'/0'/0' == m/0'/0'/1')",https://github.com/bitcoin/bitcoin/pull/10952#issuecomment-320166041,320166041,
achow101,2017-08-04T23:42:14Z,Can this be tagged for 0.15.0? It's a bug fix for a problem with `-salvagewallet` which would result in further corruption and unusability of people's wallets.,https://github.com/bitcoin/bitcoin/pull/10952#issuecomment-320375371,320375371,
sipa,2017-08-05T02:26:52Z,"Tagged for 0.15, as it fixes a bug when using `-savagewallet` with encrypted wallets.",https://github.com/bitcoin/bitcoin/pull/10952#issuecomment-320389495,320389495,
TheBlueMatt,2017-08-06T20:56:26Z,"Because one of the two cases of corruption in the wild was that the default key was simply deleted, can you also add a if(wallet version < x && !have_default_key)... in the load?\n\nOn August 4, 2017 2:17:43 AM EDT, MarcoFalke <notifications@github.com> wrote:\n>AssertionError in wallet-hd:\n>\n>```py\n>AssertionError: not(m/0'/0'/0' == m/0'/0'/1')\n>\n>-- \n>You are receiving this because you com",https://github.com/bitcoin/bitcoin/pull/10952#issuecomment-320532162,320532162,
achow101,2017-08-07T00:18:10Z,@TheBlueMatt What for?,https://github.com/bitcoin/bitcoin/pull/10952#issuecomment-320542271,320542271,
TheBlueMatt,2017-08-07T01:09:24Z,@achow101 because its a trivial check and its a type of corruption we've seen in wallets on the wild...it costs nothing to add a check for it.,https://github.com/bitcoin/bitcoin/pull/10952#issuecomment-320545613,320545613,
sipa,2017-08-07T01:16:32Z,"@TheBlueMatt The current code requires that if a default key is present, it must be valid. Do you think an extra check is needed to verify that it hasn't been accidentally deleted?",https://github.com/bitcoin/bitcoin/pull/10952#issuecomment-320546207,320546207,
TheBlueMatt,2017-08-07T01:20:15Z,"Considering that we've seen it in the wild and its clear indication that\nthere is something wrong with your hardware/wallet storage, I'd say it\nwould be prudent.\n\nOn 08/06/17 21:16, Pieter Wuille wrote:\n> @TheBlueMatt <https://github.com/thebluematt> The current code requires\n> that if a default key is present, it must be valid. Do you think an\n> extra check is needed to verify that it hasn",https://github.com/bitcoin/bitcoin/pull/10952#issuecomment-320546526,320546526,
achow101,2017-08-07T01:36:17Z,"@TheBlueMatt I meant what do you want it to check for and error on and why do that check? That below a certain version number you must have a valid default key? If that is the case, that isn't possible since this PR does not change the version number, thus all wallets will have to have a valid default key.\n\nFurthermore, I believe the corruption that we are seeing in the wild is a result of `-s",https://github.com/bitcoin/bitcoin/pull/10952#issuecomment-320548013,320548013,
TheBlueMatt,2017-08-07T01:44:26Z,"Ahh, OK, I missed the salvagewallet-possible-culprit. PR looks good\nas-is to me.\n\nOn 08/06/17 21:36, Andrew Chow wrote:\n> @TheBlueMatt <https://github.com/thebluematt> I meant what do you want\n> it to check for and error on? That below a certain version number you\n> must have a valid default key? If that is the case, that isn't possible\n> since this PR does not change the version number, th",https://github.com/bitcoin/bitcoin/pull/10952#issuecomment-320548896,320548896,
laanwj,2017-08-07T08:20:10Z,"Nit: please also remove the `""defaultkey""` parsing in `walletdb.cpp` `ReadKeyValue`\n\nutACK otherwise",https://github.com/bitcoin/bitcoin/pull/10952#issuecomment-320600282,320600282,
achow101,2017-08-07T08:40:56Z,"@laanwj That was left in due address @TheBlueMatt's concerns about warning users about possible corruption. It was modified so that the default key must either exist and be valid or not exist at all. The reason for this is that if it exists and is not valid, then corruption has occurred and the user will be warned accordingly. ",https://github.com/bitcoin/bitcoin/pull/10952#issuecomment-320604893,320604893,
laanwj,2017-08-07T08:42:58Z,"That's true, could have used a comment, it now looks a bit silly just throwing away the result. But I agree.",https://github.com/bitcoin/bitcoin/pull/10952#issuecomment-320605366,320605366,
laanwj,2017-08-07T10:40:57Z,"I tested this with an old wallet and got ""Error: Error loading wallet.dat: Wallet corrupted"", will check why.\nEdit: Log output is:\n```\n2017-08-07 11:42:25 init message: Loading wallet...\n2017-08-07 11:42:25 Error: Error loading wallet.dat: Wallet corrupted\nError: Error loading wallet.dat: Wallet corrupted\n```\nLooks like with this wallet, the `IsKeyType(strType) || strType == ""default",https://github.com/bitcoin/bitcoin/pull/10952#issuecomment-320630763,320630763,
jnewbery,2017-08-07T17:27:47Z,"Intuitively for me, the logic for determining whether this is a first run should remain in the `CWallet::LoadWallet()` function. It makes sense for me that `CWalletDB` remains as a modifier object for the wallet, and simply reads/writes data to the wallet database. Is it possible to leave the first_run logic in `CWallet::LoadWallet()` (by checking that `mapKeys` is empty or similar)?\n\nI'm not ",https://github.com/bitcoin/bitcoin/pull/10952#issuecomment-320727433,320727433,
achow101,2017-08-07T17:56:28Z,">  Is it possible to leave the first_run logic in CWallet::LoadWallet() (by checking that mapKeys is empty or similar)?\n\nThat would probably be better to do.\n\n> I also don't think this necessarily needs to go into v0.15 if we don't have time to fully review it. The problems with `salvagewallet` are long-standing and not made any worse in v0.15.\n\n0.13 broke `salvagewallet` with HD walle",https://github.com/bitcoin/bitcoin/pull/10952#issuecomment-320734664,320734664,
jnewbery,2017-08-07T18:23:38Z,"> 0.13 broke salvagewallet with HD wallets.\n\nTo be clear, I'm not arguing against this PR - it's obviously good and we should do it. My point is that we don't need to rush it for v0.15. The number of users who haven't yet upgraded to v0.13, but will upgrade to v0.15 before we release v0.15.1 is going to be ~ zero. Not including the fix in v0.15 doesn't make the problem any worse.",https://github.com/bitcoin/bitcoin/pull/10952#issuecomment-320741776,320741776,
laanwj,2017-08-08T09:05:23Z,"> Intuitively for me, the logic for determining whether this is a first run should remain in the CWallet::LoadWallet() function.\n\nI thought about this too and came to the opposite conclusion: wouldn't the database layer be the foremost authority on whether it just created a new database file, or opened an existing one? I think this PR goes the right direction.",https://github.com/bitcoin/bitcoin/pull/10952#issuecomment-320896978,320896978,
jnewbery,2017-08-08T09:59:44Z,"I guess it depends on what we mean by 'first run'. If it's 'the first time we create a file', then yes I agree that the database layer is the authority. If it's 'a wallet without any of these objects', then I would have thought the right place would be at the wallet layer.\n\nBut that's just my intuition. You know this code better than I do, so if you think this is the right direction, I won't o",https://github.com/bitcoin/bitcoin/pull/10952#issuecomment-320910432,320910432,
laanwj,2017-08-08T10:08:13Z,"> I guess it depends on what we mean by 'first run'. If it's 'the first time we create a file', then yes I agree that the database layer is the authority. If it's 'a wallet without any of these objects', then I would have thought the right place would be at the wallet layer.\n\nCWalletDB is not just the low-level database though - it also manages the format. After all it iterates over applicatio",https://github.com/bitcoin/bitcoin/pull/10952#issuecomment-320912412,320912412,
laanwj,2017-08-08T10:14:25Z,">To be clear, I'm not arguing against this PR - it's obviously good and we should do it. My point is that we don't need to rush it for v0.15. \n\nI'd prefer to drop it for 0.15.0 too, to be honest. It's not clear that the risk is acceptable to merge this into rc1 last minute.",https://github.com/bitcoin/bitcoin/pull/10952#issuecomment-320913746,320913746,
achow101,2017-08-08T16:17:50Z,"I changed the detection back to `CWallet::LoadWallet()` since I think it is more logical to be there. That was my original plan, I just couldn't figure out how since I forgot that it has access to `mapKeys`, etc.",https://github.com/bitcoin/bitcoin/pull/10952#issuecomment-321006417,321006417,
jnewbery,2017-08-14T19:10:34Z,Looks good. Tested ACK b8aa9729a5dbeb883857b14918aa6c6d2b71eea4 (although needs rebase),https://github.com/bitcoin/bitcoin/pull/10952#issuecomment-322281250,322281250,
jonasschnelli,2017-08-15T19:27:57Z,Needs rebase.,https://github.com/bitcoin/bitcoin/pull/10952#issuecomment-322564356,322564356,
achow101,2017-08-15T21:07:42Z,rebased,https://github.com/bitcoin/bitcoin/pull/10952#issuecomment-322589499,322589499,
jnewbery,2017-08-15T21:26:27Z,utACK 1a7bc5aac60a37b6f9f0632546467d716a3fd5e4,https://github.com/bitcoin/bitcoin/pull/10952#issuecomment-322594492,322594492,
sipa,2017-08-15T21:45:33Z,There seems to be a problem in `keypool_topup.py`.,https://github.com/bitcoin/bitcoin/pull/10952#issuecomment-322598719,322598719,
achow101,2017-08-15T22:06:33Z,Fixed that I think. It's an off-by-one since default key is no longer created and consuming a key from the keypool.,https://github.com/bitcoin/bitcoin/pull/10952#issuecomment-322603097,322603097,
laanwj,2017-08-16T08:06:45Z,"> since default key is no longer created and consuming a key from the keypool.\n\nFinally :-)",https://github.com/bitcoin/bitcoin/pull/10952#issuecomment-322697234,322697234,
jonasschnelli,2017-08-18T15:21:41Z,"Great to see the default key vanish...\nutACK e53615b443894fb96d5eb885b3812776c1b1033b",https://github.com/bitcoin/bitcoin/pull/10952#issuecomment-323383176,323383176,
laanwj,2017-09-05T22:26:48Z,"Removing 0.15.1 milestone, as it can create problems at the moment when opening a new wallet with older versions.",https://github.com/bitcoin/bitcoin/pull/10952#issuecomment-327321256,327321256,
sipa,2017-08-04T02:30:17Z,Can you call `walletInstance->TopUpKeyPool();` here instead of this entire section? No need to waste a key and an address book entry for this.,https://github.com/bitcoin/bitcoin/pull/10952#discussion_r131300813,131300813,src/wallet/wallet.cpp
sipa,2017-08-04T02:36:50Z,"""defaultkey"" is not part of `IsKeyType`, so this failure will just be a non-critical warning upon loading. I assume that's intentional?",https://github.com/bitcoin/bitcoin/pull/10952#discussion_r131301391,131301391,src/wallet/walletdb.cpp
sipa,2017-08-04T02:37:09Z,Code style nit: `{` on the same like as `if`.,https://github.com/bitcoin/bitcoin/pull/10952#discussion_r131301415,131301415,src/wallet/walletdb.cpp
achow101,2017-08-04T03:27:01Z,Done,https://github.com/bitcoin/bitcoin/pull/10952#discussion_r131305282,131305282,src/wallet/wallet.cpp
achow101,2017-08-04T03:27:07Z,Done,https://github.com/bitcoin/bitcoin/pull/10952#discussion_r131305293,131305293,src/wallet/walletdb.cpp
achow101,2017-08-04T03:28:59Z,It should be a critical warning and exit with an error. I have fixed this.,https://github.com/bitcoin/bitcoin/pull/10952#discussion_r131305419,131305419,src/wallet/walletdb.cpp
laanwj,2017-08-07T12:06:05Z,"This should be `ssValue >> vchPubKey`. Otherwise this will fail for every wallet with a default key record!\n(when you change this, please add a comment too why we're parsing here and throwing away the result)",https://github.com/bitcoin/bitcoin/pull/10952#discussion_r131637416,131637416,src/wallet/walletdb.cpp
achow101,2017-08-07T17:30:32Z,Oops. Fixed.,https://github.com/bitcoin/bitcoin/pull/10952#discussion_r131715684,131715684,src/wallet/walletdb.cpp
