DrahtBot,2020-08-31 14:47:48,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19954 (tor: make a TORv3 hidden service instead of TORv2 by vasild)\n* #19031 (Implement ADDRv2 support (part of BIP155) ",https://github.com/bitcoin/bitcoin/pull/19845#issuecomment-683826463,683826463,
vasild,2020-09-01 10:25:41,If https://github.com/bitcoin/bitcoin/pull/19503 gets merged then it could be used to configure the stream to (un)ser in V2 format instead of the currently used `ADDRV2_FORMAT` flag that is ORed into the stream version.,https://github.com/bitcoin/bitcoin/pull/19845#issuecomment-684742011,684742011,
jonatack,2020-09-01 13:46:42,"Concept ACK. First read-through looks promising and happy to see the additional unit test coverage. \n\nEdit: noting here for myself that local debug build is clean and unit tests are green.",https://github.com/bitcoin/bitcoin/pull/19845#issuecomment-684865867,684865867,
vasild,2020-09-02 08:03:21,"This PR now contains #19841, needed for the `SHA3_256` implementation.",https://github.com/bitcoin/bitcoin/pull/19845#issuecomment-685427804,685427804,
MarcoFalke,2020-09-05 13:03:57,Would it make sense to benchmark how fast addr2 messages are deserialized? Maybe we should even benchmark every message type?,https://github.com/bitcoin/bitcoin/pull/19845#issuecomment-687608367,687608367,
vasild,2020-09-07 13:38:07,"> Would it make sense to benchmark how fast addr2 messages are deserialized? Maybe we should even benchmark every message type?\n\n<details>\n<summary>benchmark</summary>\n\n```diff\ndiff --git i/src/bench/addrman.cpp w/src/bench/addrman.cpp\nindex ebdad5a4b..db6b1c9fa 100644\n--- i/src/bench/addrman.cpp\n+++ w/src/bench/addrman.cpp\n@@ -1,20 +1,24 @@\n // Copyright (c) 2020-2020 The Bi",https://github.com/bitcoin/bitcoin/pull/19845#issuecomment-688332202,688332202,
vasild,2020-09-10 18:45:50,Rebased now that the SHA3_256 implementation is in `master`.,https://github.com/bitcoin/bitcoin/pull/19845#issuecomment-690614950,690614950,
vasild,2020-09-11 13:44:54,Addressed review suggestions and added TORv3 address parsing with some tests.,https://github.com/bitcoin/bitcoin/pull/19845#issuecomment-691104139,691104139,
sipa,2020-09-11 18:01:24,"As a test I created a TORv3 bitcoin service, and connected to it with this branch:\n\n```\n\n$ ./src/bitcoin-cli getpeerinfo\n[\n  {\n    ""id"": 1,\n    ""addr"": ""kpgvmscirrdqpekbqjsvw5teanhatztpp2gl6eee4zkowvwfxwenqaid.onion"",\n```\n\n",https://github.com/bitcoin/bitcoin/pull/19845#issuecomment-691235868,691235868,
jonatack,2020-09-11 18:48:01,"Connected to @sipa from my tor v2 address.\n\n```\n2020-09-11T18:44:21Z New outbound peer connected: version: 70016, blocks=647799, peer=5, peeraddr=kpgvmscirrdqpekbqjsvw5teanhatztpp2gl6eee4zkowvwfxwenqaid.onion:8333 (full-relay)\n```\ngetpeerinfo:\n```\n  {\n    ""id"": 5,\n    ""addr"": ""kpgvmscirrdqpekbqjsvw5teanhatztpp2gl6eee4zkowvwfxwenqaid.onion"",\n    ""addrbind"": ""127.0.0.1:36454"",\n",https://github.com/bitcoin/bitcoin/pull/19845#issuecomment-691256306,691256306,
sipa,2020-09-11 20:33:53,"> from my tor v2 address.\n\nTor hidden service connections don't have a ""from"" address ;)",https://github.com/bitcoin/bitcoin/pull/19845#issuecomment-691299573,691299573,
vasild,2020-09-12 08:00:06,"Ignored embedded IPv4 and TORv2 in IPv6 when unserializing in V2 format, as per BIP155 + tests to confirm they render as invalid.",https://github.com/bitcoin/bitcoin/pull/19845#issuecomment-691439676,691439676,
jonatack,2020-09-16 08:13:44,Code review re-ACK per `git diff 8d2b60c 3eef1e6`,https://github.com/bitcoin/bitcoin/pull/19845#issuecomment-693249494,693249494,
pinheadmz,2020-09-16 16:35:06,"concept ACK, tested ACK: Built and tested unit and functional on OSX 10.14\nWas able to `addnode` onionV3 addresses and connect after launching with `-proxy=127.0.0.1:9050  -onlynet=onion`.\nReviewing code next...",https://github.com/bitcoin/bitcoin/pull/19845#issuecomment-693522705,693522705,
vasild,2020-09-17 12:58:59,"> Note that the `ADDRV2_FORMAT` constant may be replaced with another mechanism, but that can easily be done in a followup PR.\n\nDo you mean this one: https://github.com/bitcoin/bitcoin/pull/19845#issuecomment-684742011 or something else?",https://github.com/bitcoin/bitcoin/pull/19845#issuecomment-694214035,694214035,
vasild,2020-09-17 14:32:45,"[Filtered code coverage report](https://people.freebsd.org/~vd/pr19845_65a8d3199_coverage/) (files not modified by this PR are omitted and not modified lines in files that are otherwise modified are dimmed).\n\n[List of modified and not covered lines](https://people.freebsd.org/~vd/pr19845_65a8d3199_coverage/modified_and_not_covered.html).",https://github.com/bitcoin/bitcoin/pull/19845#issuecomment-694276899,694276899,
jonatack,2020-09-17 18:09:21,"re-ACK 65a8d31 per `git diff 3eef1e6 65a8d31` modulo doc fix\n\nChanged all the bogus length tests to test the bounds values of 0, (address size - 1), and (address size + 1) to check behavior; it was the same.",https://github.com/bitcoin/bitcoin/pull/19845#issuecomment-694407882,694407882,
vasild,2020-09-18 08:49:02,Should be all good for re-review.,https://github.com/bitcoin/bitcoin/pull/19845#issuecomment-694742633,694742633,
jonatack,2020-09-18 09:52:42,re-ACK b9c46e0a935a14063913f0c999922f8e22bce61d per `git diff 65a8d31 b9c46e0`,https://github.com/bitcoin/bitcoin/pull/19845#issuecomment-694772999,694772999,
vasild,2020-09-21 08:19:50,"Added no-padding tests for `EncodeBase32()` by @eriknylund and a simplification around `torv3::VERSION` suggested by @sipa.\n\nThanks!",https://github.com/bitcoin/bitcoin/pull/19845#issuecomment-695971663,695971663,
Sjors,2020-09-21 14:45:03,re-tACK 7be6ff61875a8d5d2335bff5d1f16ba40557adb0 ,https://github.com/bitcoin/bitcoin/pull/19845#issuecomment-696162703,696162703,
sipa,2020-09-26 02:47:36,re-utACK 7be6ff61875a8d5d2335bff5d1f16ba40557adb0,https://github.com/bitcoin/bitcoin/pull/19845#issuecomment-699282486,699282486,
sipa,2020-09-28 19:28:22,@hebasto I edited your ACK comment above to avoid having the `@jonatack` highlight and your onion address in the merge commit.,https://github.com/bitcoin/bitcoin/pull/19845#issuecomment-700235164,700235164,
sipa,2020-09-10 22:32:17,"Just a nit, feel free to leave as is.\n\nNo real reason why this needs to be in netaddress.h or restricted to `CNetAddr`. Maybe it can move to one of the util/*.h files or even a new one. It's probably useful elsewhere.",https://github.com/bitcoin/bitcoin/pull/19845#discussion_r486669845,486669845,src/netaddress.h
sipa,2020-09-10 22:35:57,"That's not technically true; EOF can be reached in ADDRv1 mode.\n\nI don't think this comment adds much; every deserializer can always fail.",https://github.com/bitcoin/bitcoin/pull/19845#discussion_r486671228,486671228,src/netaddress.h
sipa,2020-09-10 22:40:32,"Nit: you're using both ""Bip155"" and ""BIP155"" is this commit. I prefer ""BIP155"".",https://github.com/bitcoin/bitcoin/pull/19845#discussion_r486672929,486672929,src/netaddress.h
sipa,2020-09-10 22:44:46,"Comment is wrong here, I think (I2P, not TORv2).",https://github.com/bitcoin/bitcoin/pull/19845#discussion_r486674423,486674423,src/test/net_tests.cpp
jonatack,2020-09-11 10:19:09,9eb5b089 s/I2P/CJDNS/,https://github.com/bitcoin/bitcoin/pull/19845#discussion_r486952064,486952064,src/test/net_tests.cpp
jonatack,2020-09-11 10:19:43,9eb5b089 s/TORv2/CJDNS/,https://github.com/bitcoin/bitcoin/pull/19845#discussion_r486952355,486952355,src/test/net_tests.cpp
jonatack,2020-09-11 10:39:49,"Would it make sense to have `NET_ONION_V2` and `NET_ONION_V3`, with associated `IsOnionV2()` and `IsOnionV3()` bool helpers as subsets of `IsTor()/IsOnion()`?\n\nDoing so might also clean up `GetBip155Network()`, `SetIP()`, and `ToStringIP()` by removing the size checks to a better place.",https://github.com/bitcoin/bitcoin/pull/19845#discussion_r486961774,486961774,src/netaddress.h
jonatack,2020-09-11 11:06:05,"Semi-related, at some point it might be helpful to be able to expose network types in `getpeerinfo`, rather than clients trying to guess like we currently have to do in #19643.",https://github.com/bitcoin/bitcoin/pull/19845#discussion_r486973456,486973456,src/netaddress.h
vasild,2020-09-11 11:43:01,"Yes, I did consider making it more visible but refrained because of the wretched `std::array` argument (which was imposed by gcc 4.8) - I think it is not very friendly like this.\n\nMoved now to `util/string.h` since you mention this. Once support for gcc 4.8 is dropped we can improve it to take some more generic argument.",https://github.com/bitcoin/bitcoin/pull/19845#discussion_r486989858,486989858,src/netaddress.h
vasild,2020-09-11 11:48:15,"Changed to ""BIP155"", that way its also more consistent with the rest of the code.",https://github.com/bitcoin/bitcoin/pull/19845#discussion_r486992188,486992188,src/netaddress.h
vasild,2020-09-11 11:51:06,Fixed.,https://github.com/bitcoin/bitcoin/pull/19845#discussion_r486993463,486993463,src/test/net_tests.cpp
vasild,2020-09-11 11:51:55,Fixed.,https://github.com/bitcoin/bitcoin/pull/19845#discussion_r486993794,486993794,src/test/net_tests.cpp
vasild,2020-09-11 11:52:48,Fixed.,https://github.com/bitcoin/bitcoin/pull/19845#discussion_r486994154,486994154,src/test/net_tests.cpp
vasild,2020-09-11 12:00:08,Removed.,https://github.com/bitcoin/bitcoin/pull/19845#discussion_r486997592,486997592,src/netaddress.h
vasild,2020-09-11 13:43:40,"I did consider this but did not make them separate because:\n\n* Intrinsically, TORv2 and TORv3 addresses belong to the same network - the TOR network. It is more like odd and even IPv4 addresses, not so much as IPv4 and IPv6 addresses.\n* Given that TORv2 is going to be dropped soon, we would have to clean up our code and remove any remains from it which would be easier if this is kept just as",https://github.com/bitcoin/bitcoin/pull/19845#discussion_r487054042,487054042,src/netaddress.h
sipa,2020-09-11 17:59:44,"I considered suggesting this too, but outside of netaddress.*, the distinction probably doesn't matter (e.g. the decision whether to use a proxy and which one doesn't need to distinguish between TorV2 and TorV3), so this approach allows keeping the changes more local.",https://github.com/bitcoin/bitcoin/pull/19845#discussion_r487203263,487203263,src/netaddress.h
sipa,2020-09-11 18:32:36,"Why do this for NET_INTERNAL, but not for IPv4 or TORv2?",https://github.com/bitcoin/bitcoin/pull/19845#discussion_r487219577,487219577,src/netaddress.h
vasild,2020-09-11 19:26:34,"Because IPv4 and TORv2 have their own BIP155 network ids and should not be disguised as IPv6.\n\n`NET_INTERNAL` is not gossiped, but addrman may keep such addresses as ""source"" of other addresses and thus end up (un)serializing them when saving its database to disk in a V2 stream (not in this PR).\n\nIn this PR we may end up having some TORv3 addresses in addrman and try to serialize them in V",https://github.com/bitcoin/bitcoin/pull/19845#discussion_r487246685,487246685,src/netaddress.h
vasild,2020-09-11 20:38:07,Following an [IRC discussion](http://www.erisian.com.au/bitcoin-core-dev/log-2020-09-11.html#l-406) - I changed it to recognize and ignore (unserialize as invalid) embedded IPv4 and TORv2 in IPv6 (when in addrv2 message).,https://github.com/bitcoin/bitcoin/pull/19845#discussion_r487279246,487279246,src/netaddress.h
jonatack,2020-09-14 12:24:19,8036a267 Perhaps call this function `SetBIP155Network` as it sets `m_net` whereas `GetBIP155Network` reads it.,https://github.com/bitcoin/bitcoin/pull/19845#discussion_r487869783,487869783,src/netaddress.cpp
jonatack,2020-09-14 12:27:26,"8036a267 These two ""Deduce"" words make the two functions seem similar, whereas one function reads `m_net` and the other sets `m_net`.",https://github.com/bitcoin/bitcoin/pull/19845#discussion_r487871749,487871749,src/netaddress.h
jonatack,2020-09-14 12:41:34,"8036a267 nit, perhaps s/object/IPV6 object/",https://github.com/bitcoin/bitcoin/pull/19845#discussion_r487880342,487880342,src/netaddress.h
jonatack,2020-09-14 12:53:16,8036a267 suggest s/Sneak/Bitwise-OR the/ (here and line 348) as this operation isn't covert or sneaky :),https://github.com/bitcoin/bitcoin/pull/19845#discussion_r487887872,487887872,src/test/net_tests.cpp
jonatack,2020-09-14 13:46:08,"1046e17c perhaps\n```diff\n-    static const char* suffix = "".onion"";\n-    static constexpr size_t suffix_len = 6;\n+    static const std::string suffix{"".onion""};\n+    static const size_t suffix_len{suffix.size()};\n```\n",https://github.com/bitcoin/bitcoin/pull/19845#discussion_r487930052,487930052,src/netaddress.cpp
jonatack,2020-09-14 13:57:04,"1046e17 the previous code used `c_str()`, but maybe use `data()` while retouching this \n\n-----\n\nDeveloper notes on `c_str()` just in case (ignore if this is noise):\n\n- Use `.c_str()` sparingly. Its only valid use is to pass C++ strings to C functions that take NULL-terminated\n  strings.\n\n  - Do not use it when passing a sized array (so along with `.size()`). Use `.data()` instead",https://github.com/bitcoin/bitcoin/pull/19845#discussion_r487941591,487941591,src/netaddress.cpp
jonatack,2020-09-14 14:16:21,"1046e17c nit, this might be more readable with one element per line:\n```diff\n-                     a[0] << 8 | a[1], a[2] << 8 | a[3],\n-                     a[4] << 8 | a[5], a[6] << 8 | a[7],\n-                     a[8] << 8 | a[9], a[10] << 8 | a[11],\n-                     a[12] << 8 | a[13], a[14] << 8 | a[15]);\n+                      a[0] << 8 | a[1],\n+                      a[2] <",https://github.com/bitcoin/bitcoin/pull/19845#discussion_r487964378,487964378,src/netaddress.cpp
jonatack,2020-09-14 14:17:53,1046e17c nit suggestion if you retouch: s/onion_address/tor v3 onion address/,https://github.com/bitcoin/bitcoin/pull/19845#discussion_r487966148,487966148,src/netaddress.cpp
jonatack,2020-09-14 14:19:02,1046e17c nit suggestion if you retouch: s/CHECKSUM/tor v3 checksum/,https://github.com/bitcoin/bitcoin/pull/19845#discussion_r487967348,487967348,src/netaddress.cpp
jonatack,2020-09-14 14:31:58,1046e17c `IsCJDNS()`...should CJDNS IP strings be in IPv4 dotted-quad or IPv6 colon-hexadecimal notation?,https://github.com/bitcoin/bitcoin/pull/19845#discussion_r487979053,487979053,src/netaddress.cpp
jonatack,2020-09-14 14:37:31,"1046e17c would be good to add an explanation of why `pad` is needed, maybe in a doxygen doc for the function in the header file `strencodings.h`",https://github.com/bitcoin/bitcoin/pull/19845#discussion_r487983214,487983214,src/util/strencodings.cpp
vasild,2020-09-15 14:10:17,"`SetBIP155Network` would be incorrect because `m_net`, which is being set, is of type `Network`, not `BIP155Network`.\n\nRenamed to this function to `SetNetFromBIP155Network()` to imply ""set m_net from variable of type BIP155Network"".",https://github.com/bitcoin/bitcoin/pull/19845#discussion_r488699095,488699095,src/netaddress.cpp
vasild,2020-09-15 14:10:55,Reworded.,https://github.com/bitcoin/bitcoin/pull/19845#discussion_r488699524,488699524,src/netaddress.h
vasild,2020-09-15 14:11:47,"Changed to ""default-constructed CNetAddr object"".",https://github.com/bitcoin/bitcoin/pull/19845#discussion_r488700181,488700181,src/netaddress.h
vasild,2020-09-15 14:12:13,"Changed to just ""Add ADDRV2_FORMAT ...""",https://github.com/bitcoin/bitcoin/pull/19845#discussion_r488700491,488700491,src/test/net_tests.cpp
vasild,2020-09-15 14:12:29,Changed.,https://github.com/bitcoin/bitcoin/pull/19845#discussion_r488700691,488700691,src/netaddress.cpp
vasild,2020-09-15 14:16:25,"Hmm, both `c_str()` and `data()` return the same thing. I kept it to `c_str()` because `DecodeBase32()` expects a nul-terminated string and `c_str()` has always been returning such string, whereas `data()` does so only after C++11. I.e. `c_str()` is more widely known to return a nul-terminated string.\n\nAnyway, I added a check whether the string contains an embedded `'\0'` plus a test for it.",https://github.com/bitcoin/bitcoin/pull/19845#discussion_r488703662,488703662,src/netaddress.cpp
vasild,2020-09-15 14:17:40,"I copied that verbatim from https://gitweb.torproject.org/torspec.git/tree/rend-spec-v3.txt#n2135, but anyway - I now prefixed it with ""TORv3"".",https://github.com/bitcoin/bitcoin/pull/19845#discussion_r488704636,488704636,src/netaddress.cpp
vasild,2020-09-15 14:17:52,"I copied that verbatim from https://gitweb.torproject.org/torspec.git/tree/rend-spec-v3.txt#n2135, but anyway - I now prefixed it with ""TORv3"".",https://github.com/bitcoin/bitcoin/pull/19845#discussion_r488704804,488704804,src/netaddress.cpp
vasild,2020-09-15 14:18:43,"To my understanding CJDNS addresses have the same representation as IPv6, just different meaning.",https://github.com/bitcoin/bitcoin/pull/19845#discussion_r488705470,488705470,src/netaddress.cpp
vasild,2020-09-15 14:19:25,I don't know why the padding is needed! :) But I added a comment on what the newly added parameter does.,https://github.com/bitcoin/bitcoin/pull/19845#discussion_r488706011,488706011,src/util/strencodings.cpp
vasild,2020-09-15 14:20:43,"Changed to `ReadBE16()`, must be more readable now.",https://github.com/bitcoin/bitcoin/pull/19845#discussion_r488707063,488707063,src/netaddress.cpp
jonatack,2020-09-15 14:56:43,"80c77c31 nit, indenting is off by one for the NET_IPV4, NET_IPV6, and NET_ONION cases",https://github.com/bitcoin/bitcoin/pull/19845#discussion_r488735488,488735488,src/netaddress.cpp
jonatack,2020-09-15 14:58:03,"8d2b60cb nit, while touching this line\n```suggestion\nbool CNetAddr::SetSpecial(const std::string& str)\n```",https://github.com/bitcoin/bitcoin/pull/19845#discussion_r488736535,488736535,src/netaddress.cpp
jonatack,2020-09-15 15:04:36,"8d2b60cb nit, clang format\n```diff\n-static std::string IPv6ToString(Span<const uint8_t> a) {\n+static std::string IPv6ToString(Span<const uint8_t> a)\n+{\n```",https://github.com/bitcoin/bitcoin/pull/19845#discussion_r488741844,488741844,src/netaddress.cpp
jonatack,2020-09-15 15:07:04,"8d2b60cb nit, clang format while touching this\n```diff\n-uint32_t CNetAddr::GetNetClass() const {\n+uint32_t CNetAddr::GetNetClass() const\n+{\n```",https://github.com/bitcoin/bitcoin/pull/19845#discussion_r488743740,488743740,src/netaddress.cpp
jonatack,2020-09-15 15:12:12,8d2b60cb With clang-format-12 these two `clang-format` declarations don't seem needed for me; ignore me if they are needed for other versions.,https://github.com/bitcoin/bitcoin/pull/19845#discussion_r488747663,488747663,src/netaddress.cpp
jonatack,2020-09-15 15:22:05,"Heh, I recognize that address ;)",https://github.com/bitcoin/bitcoin/pull/19845#discussion_r488755139,488755139,src/test/net_tests.cpp
jonatack,2020-09-15 15:47:02,"80c77c31 \n```suggestion\n            if (IsInternal()) {\n```",https://github.com/bitcoin/bitcoin/pull/19845#discussion_r488773437,488773437,src/netaddress.h
jonatack,2020-09-15 15:59:10,Thanks.,https://github.com/bitcoin/bitcoin/pull/19845#discussion_r488782076,488782076,src/util/strencodings.cpp
jonatack,2020-09-15 15:59:29,SGTM.,https://github.com/bitcoin/bitcoin/pull/19845#discussion_r488782327,488782327,src/netaddress.cpp
jonatack,2020-09-15 16:01:19,"My comment wasn't about the syntax, but rather why not use std::string and size().",https://github.com/bitcoin/bitcoin/pull/19845#discussion_r488783575,488783575,src/netaddress.cpp
vasild,2020-09-15 19:38:25,clang-format 12 puts everything in one line for me.,https://github.com/bitcoin/bitcoin/pull/19845#discussion_r488925305,488925305,src/netaddress.cpp
vasild,2020-09-15 19:41:16,Fixed.,https://github.com/bitcoin/bitcoin/pull/19845#discussion_r488927739,488927739,src/netaddress.cpp
vasild,2020-09-15 19:41:38,Done.,https://github.com/bitcoin/bitcoin/pull/19845#discussion_r488928062,488928062,src/netaddress.cpp
vasild,2020-09-15 19:41:49,Done.,https://github.com/bitcoin/bitcoin/pull/19845#discussion_r488928234,488928234,src/netaddress.cpp
vasild,2020-09-15 19:42:06,Done.,https://github.com/bitcoin/bitcoin/pull/19845#discussion_r488928476,488928476,src/netaddress.h
vasild,2020-09-15 19:42:31,Fixed.,https://github.com/bitcoin/bitcoin/pull/19845#discussion_r488928831,488928831,src/netaddress.cpp
vasild,2020-09-16 11:45:44,"Ah, now I see `std::string` instead of `char*`. There is no need to create a `std::string` object.",https://github.com/bitcoin/bitcoin/pull/19845#discussion_r489373250,489373250,src/netaddress.cpp
Sjors,2020-09-16 13:17:32,"The word ""deduce"" in the doc here is still confusing. Suggestion:\n> Set `m_net` after validating the serialised address. This currently checks if the address length matches what is expected for the serialised BIP155 id.",https://github.com/bitcoin/bitcoin/pull/19845#discussion_r489428777,489428777,src/netaddress.h
Sjors,2020-09-16 13:19:48,"Maybe add:\n> returns false for unrecognised (future) network ids, which must be ignored (BIP155).",https://github.com/bitcoin/bitcoin/pull/19845#discussion_r489430515,489430515,src/netaddress.h
Sjors,2020-09-16 14:27:35,Maybe add a test where `address` is shorter than the announced `address length` (which itself is valid). Is this code covered by fuzzing?,https://github.com/bitcoin/bitcoin/pull/19845#discussion_r489481220,489481220,src/test/net_tests.cpp
Sjors,2020-09-16 14:34:51,Suggest adding a test for unknown with reasonable length.,https://github.com/bitcoin/bitcoin/pull/19845#discussion_r489486995,489486995,src/test/net_tests.cpp
Sjors,2020-09-16 14:42:45,"I get that:\n1. `0210` indicates IPv6 (in which the internal is embedded)\n2. `0xFD + sha256(""bitcoin"")[0:5]` is the prefix for internal, which explains `fd6b88c08724`\n\nBut how is the rest (`ca978112ca1bbdcafac2`) generated? Might be worth a comment. Either way, it matches the pre-existing v1 test.",https://github.com/bitcoin/bitcoin/pull/19845#discussion_r489493199,489493199,src/test/net_tests.cpp
Sjors,2020-09-16 14:50:23,"This needs a strong warning:\n```\n// length should have been checked before calling this function\n```",https://github.com/bitcoin/bitcoin/pull/19845#discussion_r489499300,489499300,src/netaddress.cpp
fjahr,2020-09-16 20:39:31,nit: `HasReason` is a class but the commit message is talking about moving a function.,https://github.com/bitcoin/bitcoin/pull/19845#discussion_r489740694,489740694,src/test/util/setup_common.h
fjahr,2020-09-16 20:54:52,"nit\n```suggestion\nbool CNetAddr::SetNetFromBIP155Network(const uint8_t possible_bip155_net, const size_t address_size)\n```",https://github.com/bitcoin/bitcoin/pull/19845#discussion_r489748399,489748399,src/netaddress.cpp
fjahr,2020-09-16 21:28:12,"nit: same with the string one below\n```suggestion\nstd::string EncodeBase32(Span<const unsigned char> input, const bool pad)\n```",https://github.com/bitcoin/bitcoin/pull/19845#discussion_r489764805,489764805,src/util/strencodings.cpp
jonatack,2020-09-16 21:54:38,"I think this and https://github.com/bitcoin/bitcoin/pull/19845#discussion_r489764805 below are  following these two guidelines:\n\n- https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#S-const\n```cpp\nvoid g(const int i);        // pedantic\n```\n- https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rf-in",https://github.com/bitcoin/bitcoin/pull/19845#discussion_r489776345,489776345,src/netaddress.cpp
fjahr,2020-09-16 23:23:42,"Then I disagree with that guideline :) Using const in function arguments unlocks potential compiler optimizations and clarifies the code of that function. Not doing it just to ensure that people are not confused when they afterward encounter another function that does not follow that practice seems backward. We are also already using const in function args in many places of the codebase, so ""rarel",https://github.com/bitcoin/bitcoin/pull/19845#discussion_r489806866,489806866,src/netaddress.cpp
fjahr,2020-09-16 23:37:19,"Anyway, it's just a nit so feel free to ignore obviously.",https://github.com/bitcoin/bitcoin/pull/19845#discussion_r489811092,489811092,src/netaddress.cpp
jonatack,2020-09-17 05:04:45,"Yes, fair points. Curious what people think.",https://github.com/bitcoin/bitcoin/pull/19845#discussion_r489972622,489972622,src/netaddress.cpp
vasild,2020-09-17 13:23:31,[reworded a little](https://github.com/bitcoin/bitcoin/compare/3eef1e65c2ac6cbbddd734f3b192861d9e73ecfd..65a8d3199d3b40da679a3cf225f37e80965f7615#diff-76d15e11a95be7a4aee1eb89de6098caR267),https://github.com/bitcoin/bitcoin/pull/19845#discussion_r490240329,490240329,src/netaddress.h
vasild,2020-09-17 13:30:26,"Added [a new test](https://github.com/bitcoin/bitcoin/compare/3eef1e65c2ac6cbbddd734f3b192861d9e73ecfd..65a8d3199d3b40da679a3cf225f37e80965f7615#diff-03fc2f333374fd229824451793c40462R385).\n\nYes, it is fuzzed:\nhttps://github.com/bitcoin/bitcoin/blob/master/src/test/fuzz/deserialize.cpp#L185",https://github.com/bitcoin/bitcoin/pull/19845#discussion_r490246733,490246733,src/test/net_tests.cpp
vasild,2020-09-17 13:32:15,[Added new test](https://github.com/bitcoin/bitcoin/compare/3eef1e65c2ac6cbbddd734f3b192861d9e73ecfd..65a8d3199d3b40da679a3cf225f37e80965f7615#diff-03fc2f333374fd229824451793c40462R550),https://github.com/bitcoin/bitcoin/pull/19845#discussion_r490248299,490248299,src/test/net_tests.cpp
vasild,2020-09-17 13:34:17,Added some comments: https://github.com/bitcoin/bitcoin/compare/3eef1e65c2ac6cbbddd734f3b192861d9e73ecfd..65a8d3199d3b40da679a3cf225f37e80965f7615#diff-03fc2f333374fd229824451793c40462R425,https://github.com/bitcoin/bitcoin/pull/19845#discussion_r490250124,490250124,src/test/net_tests.cpp
vasild,2020-09-17 14:06:33,The length cannot be something else than `ADDR_TORV2_SIZE` or `ADDR_TORV3_SIZE`. There is no code path that would lead to such scenario and if it happens it means some memory corruption or some future bug. It is the same as `m_net` being equal to `NET_MAX` for example.,https://github.com/bitcoin/bitcoin/pull/19845#discussion_r490274796,490274796,src/netaddress.cpp
vasild,2020-09-17 14:07:02,Fixed!,https://github.com/bitcoin/bitcoin/pull/19845#discussion_r490275161,490275161,src/test/util/setup_common.h
vasild,2020-09-17 14:24:50,"My take is the same as the isocpp guidelines - no `const` for function arguments that are passed by value.\n\nWhenever I see `void func(const int x);` my reaction is ""Huh!? Did the author realize that no matter what the function body is it cannot modify the caller's variable given as an argument? Or did the author mean `const int* x` or `const int& x`?\n\nYes, the compiler may do some optimiza",https://github.com/bitcoin/bitcoin/pull/19845#discussion_r490289235,490289235,src/netaddress.cpp
vasild,2020-09-17 14:25:17,Lets have the conversation in just one place: https://github.com/bitcoin/bitcoin/pull/19845#discussion_r489748399,https://github.com/bitcoin/bitcoin/pull/19845#discussion_r490289645,490289645,src/util/strencodings.cpp
jonatack,2020-09-17 16:14:48,"""not unrecognised"" -> ""not recognised"" or ""unrecognised""",https://github.com/bitcoin/bitcoin/pull/19845#discussion_r490380216,490380216,src/netaddress.h
vasild,2020-09-17 20:17:41,Fixed.,https://github.com/bitcoin/bitcoin/pull/19845#discussion_r490536683,490536683,src/netaddress.h
sipa,2020-09-18 17:24:43,"I agree with @vasild; using `const` for by-value arguments looks strange.\n\nI would be very surprised if it enables any optimization in common cases. In the SSA transformation every assignment is treated as a new constant value, regardless of the variables that hold it or their types. This works especially well for small values, which tend to be the ones that are passed around by value.\n\nAl",https://github.com/bitcoin/bitcoin/pull/19845#discussion_r491089742,491089742,src/netaddress.cpp
sipa,2020-09-18 18:58:45,"Nit: If you write this as `= {3};` instead, the write below can become `hasher.Write(VERSION);`.\n\nYou could even do something similar with `prefix`, writing the initializer as `= {'.', 'o', 'n', 'i', 'o', 'n', ' ', ...`, but that looks kind of ugly.",https://github.com/bitcoin/bitcoin/pull/19845#discussion_r491135795,491135795,src/netaddress.cpp
eriknylund,2020-09-18 19:50:17,"I don't see the `scopeId` variable being used in this block, could it be removed? Or is it required to be set here for something else down the line?",https://github.com/bitcoin/bitcoin/pull/19845#discussion_r491158657,491158657,src/netaddress.h
sipa,2020-09-18 20:00:35,"It's a member variable of `CNetAddr`, so yes, it is used later.",https://github.com/bitcoin/bitcoin/pull/19845#discussion_r491163005,491163005,src/netaddress.h
sipa,2020-09-18 20:13:48,"> // length should have been checked before calling this function\n\nI disagree; length is part of the `CNetAddr` objects, so this precondition is just restating an implicit ""can only be called on a valid `CNetAddr` object"".",https://github.com/bitcoin/bitcoin/pull/19845#discussion_r491168611,491168611,src/netaddress.cpp
eriknylund,2020-09-18 21:12:20,"To my (limited) understanding the use of namespaces are rare in the project, is there a specific reason it has to be used here?",https://github.com/bitcoin/bitcoin/pull/19845#discussion_r491192996,491192996,src/netaddress.cpp
eriknylund,2020-09-18 21:36:35,I have improved the test for this method to cover both branches. Is that something worth having in this PR already? Here's the diff and I'm happy to adjust if there's a better way to test it https://gist.github.com/eriknylund/cd2bcaf9c3b4ada8a304001c2df0bfbd,https://github.com/bitcoin/bitcoin/pull/19845#discussion_r491201418,491201418,src/util/strencodings.cpp
vasild,2020-09-21 08:16:38,"Added the test, thanks!",https://github.com/bitcoin/bitcoin/pull/19845#discussion_r491862766,491862766,src/util/strencodings.cpp
vasild,2020-09-21 08:23:28,"Changed to `{3}`, this also made it possible to remove the `VERSION_LEN` variable.\n\nYeah, `{'.', 'o', ...` makes it too weird. Given that `Write(MakeSpan(prefix).first(prefix_len))` (which could have been simplified to `Write(prefix)`) is used in just one place, I left it as is.",https://github.com/bitcoin/bitcoin/pull/19845#discussion_r491866446,491866446,src/netaddress.cpp
vasild,2020-09-21 08:36:24,"The primary reason to use a namespace - things belong together.\n\nEvery time I spot myself prefixing symbols with a common prefix I ask myself whether I am implementing a poor man's namespace. In this case, without a namespace, I would have had to prefix all the symbols with a `torv3_` prefix. E.g. `TORV3_CHECKSUM_LEN`, `TORV3_VERSION`, `Torv3Checksum()`.",https://github.com/bitcoin/bitcoin/pull/19845#discussion_r491873688,491873688,src/netaddress.cpp
eriknylund,2020-09-21 09:15:50,"I completely agree, I think it makes things more contained, well structured and easier to comprehend. It seems to me a lot of new code would benefit from namespacing and perhaps worth considering when touching old code as well?",https://github.com/bitcoin/bitcoin/pull/19845#discussion_r491896287,491896287,src/netaddress.cpp
jonatack,2020-09-24 15:00:59,"Sanity-checked that the new test fails with\n```diff\n-        strEnc = EncodeBase32(vstrIn[i], false);\n+        strEnc = EncodeBase32(vstrIn[i], true);\n```\n",https://github.com/bitcoin/bitcoin/pull/19845#discussion_r494391140,494391140,src/test/base32_tests.cpp
hebasto,2020-09-26 19:16:37,"fe42411b4b07b99c591855f5f00ad45dfeec8e30\n\nnanonit -- clang-format suggests:\n```suggestion\nclass HasReason\n{\npublic:\n    explicit HasReason(const std::string& reason) : m_reason(reason) {}\n    template <typename E>\n    bool operator()(const E& e) const\n    {\n        return std::string(e.what()).find(m_reason) != std::string::npos;\n    };\n\nprivate:\n    const std::string",https://github.com/bitcoin/bitcoin/pull/19845#discussion_r495486760,495486760,src/test/util/setup_common.h
hebasto,2020-09-26 19:22:51,"fe42411b4b07b99c591855f5f00ad45dfeec8e30\n\nWhy introduce a template in ""move"" commit?\nThis pull compiles with the previous `std::runtime_error` parameter.",https://github.com/bitcoin/bitcoin/pull/19845#discussion_r495487234,495487234,src/test/util/setup_common.h
hebasto,2020-09-26 19:32:37,"e0d73573a37bf4b519f6f61e5678572d48a64517\n\nnit:\n```suggestion\nstatic constexpr int ADDRV2_FORMAT = 0x20000000;\n```",https://github.com/bitcoin/bitcoin/pull/19845#discussion_r495488051,495488051,src/netaddress.h
vasild,2020-09-28 07:09:01,We are now passing `std::ios_base::failure` as well. Now that you say it compiles with `std::runtime_error` I realized that the [former inherits the latter](https://en.cppreference.com/w/cpp/io/ios_base/failure) in C++11.,https://github.com/bitcoin/bitcoin/pull/19845#discussion_r495730125,495730125,src/test/util/setup_common.h
vasild,2020-09-28 07:10:53,"Right, I should deploy some automatic pre-push clang-format here. Not worth invalidating ACKs though.",https://github.com/bitcoin/bitcoin/pull/19845#discussion_r495730990,495730990,src/test/util/setup_common.h
vasild,2020-09-28 07:12:49,"Right! But I will leave it as is, because of the amount of ACKs it is buried under.",https://github.com/bitcoin/bitcoin/pull/19845#discussion_r495731892,495731892,src/netaddress.h
vasild,2020-09-29 10:17:17,Addressed in https://github.com/bitcoin/bitcoin/pull/20033,https://github.com/bitcoin/bitcoin/pull/19845#discussion_r496603855,496603855,src/test/util/setup_common.h
vasild,2020-09-29 10:17:26,Addressed in https://github.com/bitcoin/bitcoin/pull/20033,https://github.com/bitcoin/bitcoin/pull/19845#discussion_r496603941,496603941,src/netaddress.h
