sipa,2021-04-05 22:20:11,utACK 34d84f3dd70d83dd19db1ebd99aa1ed6b4cad03b,https://github.com/bitcoin/bitcoin/pull/21594#issuecomment-813683123,813683123,
jonatack,2021-04-06 07:46:01,Thanks everyone. Dropped the named casts change and added a release note into the first commit.,https://github.com/bitcoin/bitcoin/pull/21594#issuecomment-813905728,813905728,
DrahtBot,2021-04-06 12:49:55,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #20550 (RPC: Tolerate invalid rpcauth options by luke-jr)\n\nIf you consider this pull request important, please also help",https://github.com/bitcoin/bitcoin/pull/21594#issuecomment-814093496,814093496,
jonatack,2021-04-07 11:03:06,"> Concept ACK.\n> \n> nit, could squash [79d3e8f](https://github.com/bitcoin/bitcoin/commit/79d3e8f8ae9525a6404e56f83ce9351678da1ca3) in 1st.\n\nDone, squashed.\n\nWith ACKs by @jarolrod, @sipa and @theStack, this is hopefully ready for final ACKs or merge.\n",https://github.com/bitcoin/bitcoin/pull/21594#issuecomment-814819981,814819981,
laanwj,2021-04-07 13:55:01,"Hah great idea, I had been thinking about doing this myself. Concept ACK.",https://github.com/bitcoin/bitcoin/pull/21594#issuecomment-814934636,814934636,
laanwj,2021-04-07 16:54:19,"Tested ACK 5c446784b10b168a6f649469a6627ac231eb1de2\nAll supported address types are reflected correctly. I've checked that TorV2 and V3 appear as ""onion"".\n```json\n  {\n    ""time"": 1617800381,\n    ""services"": 1032,\n    ""address"": ""X.X.X.X"",\n    ""port"": 8333,\n    ""network"": ""ipv4""\n  },\n  {\n    ""time"": 1617793195,\n    ""services"": 1037,\n    ""address"": ""X:X:X:X:X:X:X:X"",\n    ",https://github.com/bitcoin/bitcoin/pull/21594#issuecomment-815069656,815069656,
kiminuo,2021-04-05 11:20:09,"Just out of curiosity: Is `ipv6` returned for both `NET_CJDNS` and `NET_IPV6`?\n\n",https://github.com/bitcoin/bitcoin/pull/21594#discussion_r607040383,607040383,src/rpc/net.cpp
jonatack,2021-04-05 11:47:02,It shouldn't. This essentially returns the stringified `CNetAddr::m_net`. See `CNetAddr::SetNetFromBIP155Network()` in `netaddress.cpp`. (We also don't yet support CJDNS.),https://github.com/bitcoin/bitcoin/pull/21594#discussion_r607048735,607048735,src/rpc/net.cpp
kiminuo,2021-04-05 11:52:55,"Ah, so that's the reason it is not mentioned in the help in your OP. Thanks.\n\n> ""network"" : ""str""     (string) The network (ipv4, ipv6, onion, i2p) the node connected through",https://github.com/bitcoin/bitcoin/pull/21594#discussion_r607050581,607050581,src/rpc/net.cpp
jonatack,2021-04-05 15:29:50,"Yes, `GetNetworkNames()` doesn't return `cjdns` because of this line:\n```cpp\nif (network == NET_UNROUTABLE || network == NET_CJDNS || network == NET_INTERNAL) continue;\n```\nWhen cjdns support is added, that line will need to be updated.",https://github.com/bitcoin/bitcoin/pull/21594#discussion_r607153314,607153314,src/rpc/net.cpp
sipa,2021-04-05 22:18:00,"Hmm, I think we generally use C-style casts for primitive types (as they are syntactically simpler, and for those types they're all identical in semantics anyway). No problem using these in new code you write yourself of course, but mostly a matter of personal taste.",https://github.com/bitcoin/bitcoin/pull/21594#discussion_r607366519,607366519,src/rpc/net.cpp
MarcoFalke,2021-04-06 06:40:13,"Ideally there'd be no casts here, but I suspect that will require some changes in univalue",https://github.com/bitcoin/bitcoin/pull/21594#discussion_r607561499,607561499,src/rpc/net.cpp
MarcoFalke,2021-04-06 06:41:40,"```suggestion\n        obj.pushKV(""services"", uint64_t{addr.nServices});\n```\n\nnit: I keep forgetting if this works for service flags, but C++11 casts are preferred over static_casts ;)\n\n\n(Obviously don't force push unless you have to for other reasons)",https://github.com/bitcoin/bitcoin/pull/21594#discussion_r607562630,607562630,src/rpc/net.cpp
jonatack,2021-04-06 07:31:22,"That does work.\n\nI wonder why we don't print the same services output(s) as for getpeerinfo and getnetworkinfo?",https://github.com/bitcoin/bitcoin/pull/21594#discussion_r607598993,607598993,src/rpc/net.cpp
jonatack,2021-04-06 07:40:33,"Dropped the casts commit. Definitely an optional change.\n\n(https://github.com/bitcoin/bitcoin/pull/20965#issuecomment-770375623 summarizes why I tended to use named casts even for primitives.)",https://github.com/bitcoin/bitcoin/pull/21594#discussion_r607605897,607605897,src/rpc/net.cpp
promag,2021-04-07 08:03:34,"1f24a27a4c80f182b275a75afdb4777ec792fd91\n\nFWIW #20017 makes this more simple.",https://github.com/bitcoin/bitcoin/pull/21594#discussion_r608430035,608430035,src/rpc/net.cpp
jonatack,2021-04-07 10:51:03,"TIL about that pull, thanks! (One line as done here is pretty simple though?) Resolving as not actionable ATM in this patch.",https://github.com/bitcoin/bitcoin/pull/21594#discussion_r608546049,608546049,src/rpc/net.cpp
