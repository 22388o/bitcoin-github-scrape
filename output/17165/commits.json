[
  {
    "sha": "67328bb7ca57fa0df867ec73dbeeb97d61450a4e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NzMyOGJiN2NhNTdmYTBkZjg2N2VjNzNkYmVlYjk3ZDYxNDUwYTRl",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-10-12T15:48:17Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-10-24T20:01:42Z"
      },
      "message": "build: remove protobuf from depends",
      "tree": {
        "sha": "ade9fe1fab14c992d593978d6a7ea914b2613733",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ade9fe1fab14c992d593978d6a7ea914b2613733"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/67328bb7ca57fa0df867ec73dbeeb97d61450a4e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl2yAyYACgkQLuufXMCV\nJsGXXBAAiu0IMzQEs+tY6LbLbJf3vkCqzAgFDFSp+LMAufRgltKCMfV93O2lP0W3\nXKhjokqNp5vk1eg7quHLyu+wExcW9bjmc50AwcFJPL1Bw/2df5coH9BBQdVi6V+o\naHc/yXSrhDNURAYjwhKn8YYaIU/TJs6yVSoE0LnY/Ha1TQYcg5/840nBLs60r0oi\nUyfEKSPcRvG29avCw1v/17pvfevQrrEpLABHCirpf1ZfzB/WXafDb9k36DIrYKp5\n/CnMUi4NX+tvk65+4zpFBKYB1+nJU+6jK2ZgdAvCHrDjqENKR5glvy8PLzqFxb7V\n1g2N3NCILDu+p4r5+5L/J3kmhMGJmbOwcjTAlPrSmcKw3h/LwEIhaAgYXLn0xpE7\nE/Kmp4U4sQmHGGICpyWTduGe4DIzej0YGjl7qbUUjHYh6bszlYy/mkautkQhXNP7\nwBzrjJ4I/KulRNl5NhZ8ldsxIo3xmui9GfidTjXBHEdKiK0Ypizb9DOMT3z2QCrM\nL8NuDrn4eAG7gTijzcGsFxrlFyLKG4VwgWDab0u+s0YSdO0HoidaURTkfV9ccgmo\ncuM/Di0yHxJxT9utAJ+DOjbos8IrXwID1+QVe5zbwvv0Ajka56AD147KBHYHntoN\nNzvoq4+IrviWCAqCAFuNsLVtuqjlRtNUXqvHr3HSPrPJhuT55Ik=\n=TF4U\n-----END PGP SIGNATURE-----",
        "payload": "tree ade9fe1fab14c992d593978d6a7ea914b2613733\nparent 4af04471695297e59fb0c855ab8fe6f6c618f8f2\nauthor fanquake <fanquake@gmail.com> 1570895297 -0400\ncommitter fanquake <fanquake@gmail.com> 1571947302 -0400\n\nbuild: remove protobuf from depends\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67328bb7ca57fa0df867ec73dbeeb97d61450a4e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/67328bb7ca57fa0df867ec73dbeeb97d61450a4e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67328bb7ca57fa0df867ec73dbeeb97d61450a4e/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4af04471695297e59fb0c855ab8fe6f6c618f8f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4af04471695297e59fb0c855ab8fe6f6c618f8f2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4af04471695297e59fb0c855ab8fe6f6c618f8f2"
      }
    ],
    "stats": {
      "total": 84,
      "additions": 2,
      "deletions": 82
    },
    "files": [
      {
        "sha": "cdffce6bd5d5cc23d67a61d03078abdcbf3032cf",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67328bb7ca57fa0df867ec73dbeeb97d61450a4e/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67328bb7ca57fa0df867ec73dbeeb97d61450a4e/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=67328bb7ca57fa0df867ec73dbeeb97d61450a4e",
        "patch": "@@ -104,7 +104,7 @@ jobs:\n         FILE_ENV=\"./ci/test/00_setup_env_win64.sh\"\n \n     - stage: test\n-      name: '32-bit + dash  [GOAL: install]  [GUI: BIP70 enabled]'\n+      name: '32-bit + dash  [GOAL: install]  [gui]'\n       env: >-\n         FILE_ENV=\"./ci/test/00_setup_env_i686.sh\"\n "
      },
      {
        "sha": "6df65dd4a0525296e7223efe02a2ea86bcac6cbe",
        "filename": "ci/test/00_setup_env_i686.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67328bb7ca57fa0df867ec73dbeeb97d61450a4e/ci/test/00_setup_env_i686.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67328bb7ca57fa0df867ec73dbeeb97d61450a4e/ci/test/00_setup_env_i686.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_i686.sh?ref=67328bb7ca57fa0df867ec73dbeeb97d61450a4e",
        "patch": "@@ -7,8 +7,7 @@\n export LC_ALL=C.UTF-8\n \n export HOST=i686-pc-linux-gnu\n-export DEP_OPTS=\"PROTOBUF=1\"\n export PACKAGES=\"g++-multilib python3-zmq\"\n export GOAL=\"install\"\n-export BITCOIN_CONFIG=\"--enable-zmq --with-gui=qt5 --enable-bip70 --enable-glibc-back-compat --enable-reduce-exports LDFLAGS=-static-libstdc++\"\n+export BITCOIN_CONFIG=\"--enable-zmq --with-gui=qt5 --enable-glibc-back-compat --enable-reduce-exports LDFLAGS=-static-libstdc++\"\n export CONFIG_SHELL=\"/bin/dash\""
      },
      {
        "sha": "80df0e46f8fa06996d3f17bd09b52293e37ac6b5",
        "filename": "depends/Makefile",
        "status": "modified",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67328bb7ca57fa0df867ec73dbeeb97d61450a4e/depends/Makefile",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67328bb7ca57fa0df867ec73dbeeb97d61450a4e/depends/Makefile",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/Makefile?ref=67328bb7ca57fa0df867ec73dbeeb97d61450a4e",
        "patch": "@@ -9,7 +9,6 @@ WORK_PATH = $(BASEDIR)/work\n BASE_CACHE ?= $(BASEDIR)/built\n SDK_PATH ?= $(BASEDIR)/SDKs\n NO_QT ?=\n-PROTOBUF ?=\n RAPIDCHECK ?=\n NO_WALLET ?=\n NO_ZMQ ?=\n@@ -101,17 +100,11 @@ wallet_packages_$(NO_WALLET) = $(wallet_packages)\n upnp_packages_$(NO_UPNP) = $(upnp_packages)\n zmq_packages_$(NO_ZMQ) = $(zmq_packages)\n \n-protobuf_packages_$(PROTOBUF) = $(protobuf_packages)\n rapidcheck_packages_$(RAPIDCHECK) = $(rapidcheck_packages)\n \n packages += $($(host_arch)_$(host_os)_packages) $($(host_os)_packages) $(qt_packages_) $(wallet_packages_) $(upnp_packages_)\n native_packages += $($(host_arch)_$(host_os)_native_packages) $($(host_os)_native_packages)\n \n-ifeq ($(protobuf_packages_),)\n-native_packages += $(protobuf_native_packages)\n-packages += $(protobuf_packages)\n-endif\n-\n ifneq ($(zmq_packages_),)\n packages += $(zmq_packages)\n endif\n@@ -157,7 +150,6 @@ $(host_prefix)/share/config.site : config.site.in $(host_prefix)/.stamp_$(final_\n             -e 's|@allow_host_packages@|$(ALLOW_HOST_PACKAGES)|' \\\n             -e 's|@no_qt@|$(NO_QT)|' \\\n             -e 's|@no_zmq@|$(NO_ZMQ)|' \\\n-            -e 's|@enable_bip70@|$(PROTOBUF)|' \\\n             -e 's|@no_wallet@|$(NO_WALLET)|' \\\n             -e 's|@no_upnp@|$(NO_UPNP)|' \\\n             -e 's|@debug@|$(DEBUG)|' \\"
      },
      {
        "sha": "ca542be13f28f0bf3ab14bf850c5228235143838",
        "filename": "depends/README.md",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67328bb7ca57fa0df867ec73dbeeb97d61450a4e/depends/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67328bb7ca57fa0df867ec73dbeeb97d61450a4e/depends/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/README.md?ref=67328bb7ca57fa0df867ec73dbeeb97d61450a4e",
        "patch": "@@ -77,7 +77,6 @@ The following can be set when running make: make FOO=bar\n     NO_UPNP: Don't download/build/cache packages needed for enabling upnp\n     DEBUG: disable some optimizations and enable more runtime checking\n     RAPIDCHECK: build rapidcheck (experimental, requires cmake)\n-    PROTOBUF: build protobuf (used for deprecated BIP70 support)\n     HOST_ID_SALT: Optional salt to use when generating host package ids\n     BUILD_ID_SALT: Optional salt to use when generating build package ids\n "
      },
      {
        "sha": "dee568bc254ec81b24c684824a47e70e444bccdd",
        "filename": "depends/config.site.in",
        "status": "modified",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67328bb7ca57fa0df867ec73dbeeb97d61450a4e/depends/config.site.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67328bb7ca57fa0df867ec73dbeeb97d61450a4e/depends/config.site.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/config.site.in?ref=67328bb7ca57fa0df867ec73dbeeb97d61450a4e",
        "patch": "@@ -16,10 +16,6 @@ fi\n if test -z $with_qt_bindir && test -z \"@no_qt@\"; then\n   with_qt_bindir=$depends_prefix/native/bin\n fi\n-if test -z $with_protoc_bindir && test -z \"@no_qt@\"; then\n-  with_protoc_bindir=$depends_prefix/native/bin\n-fi\n-\n \n if test -z $enable_wallet && test -n \"@no_wallet@\"; then\n   enable_wallet=no\n@@ -37,10 +33,6 @@ if test -z $enable_zmq && test -n \"@no_zmq@\"; then\n   enable_zmq=no\n fi\n \n-if test -n $enable_bip70 && test -n \"@enable_bip70@\"; then\n-  enable_bip70=yes\n-fi\n-\n if test x@host_os@ = xdarwin; then\n   BREW=no\n   PORT=no"
      },
      {
        "sha": "1de8c37d362aa9f01bfd9631ce3d22aa77b35b8e",
        "filename": "depends/packages/native_protobuf.mk",
        "status": "removed",
        "additions": 0,
        "deletions": 25,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4af04471695297e59fb0c855ab8fe6f6c618f8f2/depends/packages/native_protobuf.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4af04471695297e59fb0c855ab8fe6f6c618f8f2/depends/packages/native_protobuf.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_protobuf.mk?ref=4af04471695297e59fb0c855ab8fe6f6c618f8f2",
        "patch": "@@ -1,25 +0,0 @@\n-package=native_protobuf\n-$(package)_version=2.6.1\n-$(package)_download_path=https://github.com/google/protobuf/releases/download/v$($(package)_version)\n-$(package)_file_name=protobuf-$($(package)_version).tar.bz2\n-$(package)_sha256_hash=ee445612d544d885ae240ffbcbf9267faa9f593b7b101f21d58beceb92661910\n-\n-define $(package)_set_vars\n-$(package)_config_opts=--disable-shared --without-zlib\n-endef\n-\n-define $(package)_config_cmds\n-  $($(package)_autoconf)\n-endef\n-\n-define $(package)_build_cmds\n-  $(MAKE) -C src protoc\n-endef\n-\n-define $(package)_stage_cmds\n-  $(MAKE) -C src DESTDIR=$($(package)_staging_dir) install-strip\n-endef\n-\n-define $(package)_postprocess_cmds\n-  rm -rf lib include\n-endef"
      },
      {
        "sha": "35f8b829db3bc0a303dfd34e9dc8101103ee57dd",
        "filename": "depends/packages/packages.mk",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67328bb7ca57fa0df867ec73dbeeb97d61450a4e/depends/packages/packages.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67328bb7ca57fa0df867ec73dbeeb97d61450a4e/depends/packages/packages.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/packages.mk?ref=67328bb7ca57fa0df867ec73dbeeb97d61450a4e",
        "patch": "@@ -1,8 +1,5 @@\n packages:=boost openssl libevent\n \n-protobuf_native_packages = native_protobuf\n-protobuf_packages = protobuf\n-\n qt_packages = qrencode zlib\n \n qt_linux_packages:=qt expat libxcb xcb_proto libXau xproto freetype fontconfig"
      },
      {
        "sha": "3661a16631e266fa3e57c9e52eafd4b890124191",
        "filename": "depends/packages/protobuf.mk",
        "status": "removed",
        "additions": 0,
        "deletions": 34,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4af04471695297e59fb0c855ab8fe6f6c618f8f2/depends/packages/protobuf.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4af04471695297e59fb0c855ab8fe6f6c618f8f2/depends/packages/protobuf.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/protobuf.mk?ref=4af04471695297e59fb0c855ab8fe6f6c618f8f2",
        "patch": "@@ -1,34 +0,0 @@\n-package=protobuf\n-$(package)_version=$(native_$(package)_version)\n-$(package)_download_path=$(native_$(package)_download_path)\n-$(package)_file_name=$(native_$(package)_file_name)\n-$(package)_sha256_hash=$(native_$(package)_sha256_hash)\n-$(package)_dependencies=native_$(package)\n-$(package)_cxxflags=-std=c++11\n-\n-define $(package)_set_vars\n-  $(package)_config_opts=--disable-shared --with-protoc=$(build_prefix)/bin/protoc --disable-dependency-tracking\n-  $(package)_config_opts_linux=--with-pic\n-endef\n-\n-define $(package)_preprocess_cmds\n-   cp -f $(BASEDIR)/config.guess $(BASEDIR)/config.sub . &&\\\n-   cp -f $(BASEDIR)/config.guess $(BASEDIR)/config.sub gtest/build-aux\n-endef\n-\n-define $(package)_config_cmds\n-  $($(package)_autoconf)\n-endef\n-\n-define $(package)_build_cmds\n-  $(MAKE) -C src libprotobuf.la\n-endef\n-\n-define $(package)_stage_cmds\n-  $(MAKE) DESTDIR=$($(package)_staging_dir) -C src install-libLTLIBRARIES install-nobase_includeHEADERS &&\\\n-  $(MAKE) DESTDIR=$($(package)_staging_dir) install-pkgconfigDATA\n-endef\n-\n-define $(package)_postprocess_cmds\n-  rm lib/libprotoc.a lib/*.la\n-endef"
      }
    ]
  },
  {
    "sha": "1cb9a4e28cccd3056e2b8d9cdabc45bf3e4dd2a6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxY2I5YTRlMjhjY2NkMzA1NmUyYjhkOWNkYWJjNDViZjNlNGRkMmE2",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-10-12T15:50:13Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-10-24T20:01:42Z"
      },
      "message": "docs: remove protobuf from docs",
      "tree": {
        "sha": "6c6bd5a1f3b6dec2dd382e0084a1c460998c6d5e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6c6bd5a1f3b6dec2dd382e0084a1c460998c6d5e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1cb9a4e28cccd3056e2b8d9cdabc45bf3e4dd2a6",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl2yAyYACgkQLuufXMCV\nJsHd/g/+KjexDUoviA5Y2DuCFviV3/QH6W0e/6cEok0jhPi+TBAngZLDEMSvDnt7\nGZHGMT+EGn2l3hO/0o6TxoYjmaNIMtTgDT+71jsSHbBARwKGbOiAAEdyR7yumFFA\ntskPqhw1dnUC89fdZ19K9FwNTBvVb+JG2v+SHeDg+OEqcZdhM/HMGGyTfkZmAlq1\nDk0QNGbpDB2m7kJPSHTsO0zyBpBncmm7FyBFxd9Rqll1iIg7H7mCKWe+CcdUwWsH\nolBkH6caDpXxvCc988LPnMrjbjRsz6sO+MqpEJ4/Z8fOouwJfPOEqw74bV98qmAH\njojnrqatKhHUSBNNUj0qEg4YuYvLV88KWFDhqqdmmVPUpOSmBcbCqGlKFhEMb2Xk\n1EZ3A6w1ax8LyE46b+krhqjgyeB+FULHDKvD8gGRR3IqQwB8jK8uqe2ubDoPnFZo\nQSb5fw9XM+jZabywzS2xaB8L4a0rBZiovK23exH9y30gg0Lb74UKkeaHekOANWDM\nMEAlqxHloVo+cP/2Qfy7CTUQBXiFz8XR15AR4OUZYS4CIPzDonRp4FgldQqM9ZAW\nKKLXXfS2dPtIxnroadqm3sRN3Gt9STKH5+AqD11MVkHHNtoA4hAZCS2fbrXyqd72\nqyoKzp0gddHiUa+8InpAw8M1fgMZkSueJiI+/wz5F/ojzdDKBew=\n=vu+O\n-----END PGP SIGNATURE-----",
        "payload": "tree 6c6bd5a1f3b6dec2dd382e0084a1c460998c6d5e\nparent 67328bb7ca57fa0df867ec73dbeeb97d61450a4e\nauthor fanquake <fanquake@gmail.com> 1570895413 -0400\ncommitter fanquake <fanquake@gmail.com> 1571947302 -0400\n\ndocs: remove protobuf from docs\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1cb9a4e28cccd3056e2b8d9cdabc45bf3e4dd2a6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1cb9a4e28cccd3056e2b8d9cdabc45bf3e4dd2a6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1cb9a4e28cccd3056e2b8d9cdabc45bf3e4dd2a6/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "67328bb7ca57fa0df867ec73dbeeb97d61450a4e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67328bb7ca57fa0df867ec73dbeeb97d61450a4e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/67328bb7ca57fa0df867ec73dbeeb97d61450a4e"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 1,
      "deletions": 13
    },
    "files": [
      {
        "sha": "d048bdeff567ee0dd91e7fd29f0b555b8cc00abd",
        "filename": "doc/build-unix.md",
        "status": "modified",
        "additions": 0,
        "deletions": 9,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1cb9a4e28cccd3056e2b8d9cdabc45bf3e4dd2a6/doc/build-unix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1cb9a4e28cccd3056e2b8d9cdabc45bf3e4dd2a6/doc/build-unix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-unix.md?ref=1cb9a4e28cccd3056e2b8d9cdabc45bf3e4dd2a6",
        "patch": "@@ -44,7 +44,6 @@ Optional dependencies:\n  miniupnpc   | UPnP Support     | Firewall-jumping support\n  libdb4.8    | Berkeley DB      | Wallet storage (only needed when wallet enabled)\n  qt          | GUI              | GUI toolkit (only needed when GUI enabled)\n- protobuf    | Payments in GUI  | Data interchange format used for payment protocol (only needed when BIP70 enabled)\n  libqrencode | QR codes in GUI  | Optional for generating QR codes (only needed when GUI enabled)\n  univalue    | Utility          | JSON parsing and encoding (bundled version will be used unless --with-system-univalue passed to configure)\n  libzmq3     | ZMQ notification | Optional, allows generating ZMQ notifications (requires ZMQ version >= 4.0.0)\n@@ -118,10 +117,6 @@ libqrencode (optional) can be installed with:\n \n     sudo apt-get install libqrencode-dev\n \n-protobuf (optional) can be installed with:\n-\n-    sudo apt-get install libprotobuf-dev protobuf-compiler\n-\n Once these are installed, they will be found by configure and a bitcoin-qt executable will be\n built by default.\n \n@@ -150,10 +145,6 @@ libqrencode (optional) can be installed with:\n \n     sudo dnf install qrencode-devel\n \n-protobuf (optional) can be installed with:\n-\n-    sudo dnf install protobuf-devel\n-\n Notes\n -----\n The release is built with GCC and then \"strip bitcoind\" to strip the debug"
      },
      {
        "sha": "f8095f6a6548686f238799dd50b8db2cd1958db6",
        "filename": "doc/build-windows.md",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1cb9a4e28cccd3056e2b8d9cdabc45bf3e4dd2a6/doc/build-windows.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1cb9a4e28cccd3056e2b8d9cdabc45bf3e4dd2a6/doc/build-windows.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-windows.md?ref=1cb9a4e28cccd3056e2b8d9cdabc45bf3e4dd2a6",
        "patch": "@@ -62,8 +62,7 @@ First, install the general dependencies:\n     sudo apt install build-essential libtool autotools-dev automake pkg-config bsdmainutils curl git\n \n A host toolchain (`build-essential`) is necessary because some dependency\n-packages (such as `protobuf`) need to build host utilities that are used in the\n-build process.\n+packages need to build host utilities that are used in the build process.\n \n See [dependencies.md](dependencies.md) for a complete overview.\n "
      },
      {
        "sha": "dc8862676192ceabcf77fa9e7764611c76b3c026",
        "filename": "doc/dependencies.md",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1cb9a4e28cccd3056e2b8d9cdabc45bf3e4dd2a6/doc/dependencies.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1cb9a4e28cccd3056e2b8d9cdabc45bf3e4dd2a6/doc/dependencies.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/dependencies.md?ref=1cb9a4e28cccd3056e2b8d9cdabc45bf3e4dd2a6",
        "patch": "@@ -19,7 +19,6 @@ These are the dependencies currently used by Bitcoin Core. You can find instruct\n | MiniUPnPc | [2.0.20180203](http://miniupnp.free.fr/files) |  | No |  |  |\n | OpenSSL | [1.0.1k](https://www.openssl.org/source) |  | Yes |  |  |\n | PCRE |  |  |  |  | [Yes](https://github.com/bitcoin/bitcoin/blob/master/depends/packages/qt.mk) |\n-| protobuf | [2.6.1](https://github.com/google/protobuf/releases) |  | No |  |  |\n | Python (tests) |  | [3.5](https://www.python.org/downloads) |  |  |  |\n | qrencode | [3.4.4](https://fukuchi.org/works/qrencode) |  | No |  |  |\n | Qt | [5.9.7](https://download.qt.io/official_releases/qt/) | [5.5.1](https://github.com/bitcoin/bitcoin/issues/13478) | No |  |  |\n@@ -35,7 +34,6 @@ Some dependencies are not needed in all configurations. The following are some f\n #### Options passed to `./configure`\n * MiniUPnPc is not needed with  `--with-miniupnpc=no`.\n * Berkeley DB is not needed with `--disable-wallet`.\n-* protobuf is only needed with `--enable-bip70`.\n * Qt is not needed with `--without-gui`.\n * If the qrencode dependency is absent, QR support won't be added. To force an error when that happens, pass `--with-qrencode`.\n * ZeroMQ is needed only with the `--with-zmq` option."
      }
    ]
  },
  {
    "sha": "3548e4aac72e9148d41b440052a89d89328f7661",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNTQ4ZTRhYWM3MmU5MTQ4ZDQxYjQ0MDA1MmE4OWQ4OTMyOGY3NjYx",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-10-12T16:49:29Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-10-24T20:01:43Z"
      },
      "message": "Remove BIP70 Support",
      "tree": {
        "sha": "23c26a5a60cd802e1fdd92dc2349331ad9e08a0d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/23c26a5a60cd802e1fdd92dc2349331ad9e08a0d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3548e4aac72e9148d41b440052a89d89328f7661",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl2yAycACgkQLuufXMCV\nJsGEsQ//ROLvIz+Zjh8FWFX1QN8PyebLYAyfmetooCM1wgvB8uEeHbMWT9N6O8D3\nXuc+akg3DcS81kfy9rJA320G5FiO6+/OTA/E3v+ULGIjBN4O5Vc/fNFAzQtTisAS\nNx9ez67MUb/taVL/92qkJ6rZyKAqxivI24s0uWAkObuP2tv5iMZwqfelzloEr4R9\n2Ar6nAMjGniCioqAD4O1buRumg51xUUkgH6VL3Kb++179I/YLiQlOAUshSNFqjI8\nFZFGDTjh8rs8d2YeIOrMlyCTE/qRt91hsx7nH9uAI8ibVYnLyIhFwEt2rR/cCYBv\nKmVo4PZpVKYWdSZ54ftFACWVVkZAK3aOoQIV7iTGY4oTDfvKTTEc8ffzMZ682YUV\nWgFBNcIsBd8y+jRiaTq/rsOFz9K+9OBQviR/Yw4AWb8vFon9H3VW0cymAU/PaQQS\nP9Vd+x7tfl+Kp9koCgSrI81Ad0OmV8FFABkf+vdHNhv3vfUGY3b+NDlPvnkb7reM\nMcUi0Reql3oydqBTpEYXgEl79R5h1b8HJYtkifbPAlcYG+4/WEH0J70r4e/4vDYn\ntGgMNH+RRXNP7vqXX/oqBe1BwE80e8PxDjN7KAzpJfOPfx7z5c736nzMAKxZxOOp\n7QsCLFG6EBxyCqBtInhS5BHKxHky19zKyC+tyq+FJfWvKPYZ/DA=\n=/Fr2\n-----END PGP SIGNATURE-----",
        "payload": "tree 23c26a5a60cd802e1fdd92dc2349331ad9e08a0d\nparent 1cb9a4e28cccd3056e2b8d9cdabc45bf3e4dd2a6\nauthor fanquake <fanquake@gmail.com> 1570898969 -0400\ncommitter fanquake <fanquake@gmail.com> 1571947303 -0400\n\nRemove BIP70 Support\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3548e4aac72e9148d41b440052a89d89328f7661",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3548e4aac72e9148d41b440052a89d89328f7661",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3548e4aac72e9148d41b440052a89d89328f7661/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1cb9a4e28cccd3056e2b8d9cdabc45bf3e4dd2a6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1cb9a4e28cccd3056e2b8d9cdabc45bf3e4dd2a6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1cb9a4e28cccd3056e2b8d9cdabc45bf3e4dd2a6"
      }
    ],
    "stats": {
      "total": 1939,
      "additions": 24,
      "deletions": 1915
    },
    "files": [
      {
        "sha": "3ddafda6d25e10688c28d2b79d9ceb4fa07c5827",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3548e4aac72e9148d41b440052a89d89328f7661/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3548e4aac72e9148d41b440052a89d89328f7661/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=3548e4aac72e9148d41b440052a89d89328f7661",
        "patch": "@@ -145,7 +145,7 @@ jobs:\n         FILE_ENV=\"./ci/test/00_setup_env_mac.sh\"\n \n     - stage: test\n-      name: 'macOS 10.14 native [GOAL: install] [GUI: BIP70 enabled] [no depends]'\n+      name: 'macOS 10.14 native [GOAL: install] [GUI] [no depends]'\n       os: osx\n       # Use the most recent version:\n       # Xcode 11, macOS 10.14, JDK 12.0.1"
      },
      {
        "sha": "aa68a5700e2aaa43091be6bd09bd3f116e6837ca",
        "filename": "ci/test/00_setup_env_mac_host.sh",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3548e4aac72e9148d41b440052a89d89328f7661/ci/test/00_setup_env_mac_host.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3548e4aac72e9148d41b440052a89d89328f7661/ci/test/00_setup_env_mac_host.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_mac_host.sh?ref=3548e4aac72e9148d41b440052a89d89328f7661",
        "patch": "@@ -7,13 +7,13 @@\n export LC_ALL=C.UTF-8\n \n export HOST=x86_64-apple-darwin14\n-export BREW_PACKAGES=\"automake berkeley-db4 libtool boost miniupnpc pkg-config protobuf qt qrencode python3 ccache zeromq\"\n+export BREW_PACKAGES=\"automake berkeley-db4 libtool boost miniupnpc pkg-config qt qrencode python3 ccache zeromq\"\n export PIP_PACKAGES=\"zmq\"\n export RUN_CI_ON_HOST=true\n export RUN_UNIT_TESTS=true\n export RUN_FUNCTIONAL_TESTS=false\n export GOAL=\"install\"\n-export BITCOIN_CONFIG=\"--enable-gui --enable-bip70 --enable-reduce-exports --enable-werror\"\n+export BITCOIN_CONFIG=\"--enable-gui --enable-reduce-exports --enable-werror\"\n # Run without depends\n export NO_DEPENDS=1\n export OSX_SDK=\"\""
      },
      {
        "sha": "6e9fd55d1757ba0e1ef616e8d1e29eaad1da6844",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 5,
        "deletions": 34,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3548e4aac72e9148d41b440052a89d89328f7661/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3548e4aac72e9148d41b440052a89d89328f7661/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=3548e4aac72e9148d41b440052a89d89328f7661",
        "patch": "@@ -226,13 +226,16 @@ AC_ARG_ENABLE([zmq],\n   [disable ZMQ notifications])],\n   [use_zmq=$enableval],\n   [use_zmq=yes])\n+\n AC_ARG_ENABLE([bip70],\n   [AS_HELP_STRING([--enable-bip70],\n-  [enable BIP70 (payment protocol) support in the GUI (default is to disable)])],\n+  [BIP70 (payment protocol) support in the GUI (no longer supported)])],\n   [enable_bip70=$enableval],\n   [enable_bip70=no])\n \n-AC_ARG_WITH([protoc-bindir],[AS_HELP_STRING([--with-protoc-bindir=BIN_DIR],[specify protoc bin path])], [protoc_bin_path=$withval], [])\n+if test x$enable_bip70 != xno; then\n+  AC_MSG_ERROR([BIP70 is no longer supported!])\n+fi\n \n AC_ARG_ENABLE(man,\n     [AS_HELP_STRING([--disable-man],\n@@ -1239,9 +1242,6 @@ if test x$use_pkgconfig = xyes; then\n     [\n       PKG_CHECK_MODULES([SSL], [libssl],, [AC_MSG_ERROR(openssl not found.)])\n       PKG_CHECK_MODULES([CRYPTO], [libcrypto],,[AC_MSG_ERROR(libcrypto not found.)])\n-      if test x$enable_bip70 != xno; then\n-        BITCOIN_QT_CHECK([PKG_CHECK_MODULES([PROTOBUF], [protobuf], [have_protobuf=yes], [have_protobuf=no])])\n-      fi\n       if test x$use_qr != xno; then\n         BITCOIN_QT_CHECK([PKG_CHECK_MODULES([QR], [libqrencode], [have_qrencode=yes], [have_qrencode=no])])\n       fi\n@@ -1301,9 +1301,6 @@ else\n     esac\n   fi\n \n-  if test x$enable_bip70 != xno; then\n-    BITCOIN_QT_CHECK(AC_CHECK_LIB([protobuf] ,[main],[PROTOBUF_LIBS=-lprotobuf], [have_protobuf=no]))\n-  fi\n   if test x$use_qr != xno; then\n     BITCOIN_QT_CHECK([AC_CHECK_LIB([qrencode], [main],[QR_LIBS=-lqrencode], [have_qrencode=no])])\n     BITCOIN_QT_CHECK([AC_CHECK_HEADER([qrencode.h],, have_qrencode=no)])\n@@ -1381,12 +1378,6 @@ AM_CONDITIONAL([EMBEDDED_UNIVALUE],[test x$need_bundled_univalue = xyes])\n AC_SUBST(UNIVALUE_CFLAGS)\n AC_SUBST(UNIVALUE_LIBS)\n \n-\n-if test x$have_protobuf != xno &&\n-   test x$enable_bip70 != xno; then\n-  BITCOIN_QT_PATH_PROGS([PROTOC], [protoc],$protoc_bin_path)\n-fi\n-\n AC_MSG_CHECKING([whether to build bitcoind])\n AM_CONDITIONAL([BUILD_BITCOIND], [test x$build_bitcoind = xyes])\n AC_MSG_RESULT($build_bitcoind)\n@@ -1508,23 +1499,6 @@ if test x$bitcoin_enable_qt != xno; then\n   else\n     AC_MSG_RESULT([no])\n   fi\n-\n-  AC_MSG_CHECKING([whether to build BIP70 support])\n-  if test x$have_protobuf = xno; then\n-    if test x$enable_bip70 = xyes; then\n-      AC_MSG_ERROR(protobuf missing)\n-    fi\n-    enable_bip70=no\n-    AC_MSG_RESULT(no)\n-  else\n-    if test x$enable_bip70 != xno; then\n-      AC_DEFINE([ENABLE_BIP70],[1],[Define if BIP70 support should be compiled in])\n-      enable_bip70=yes\n-      AC_MSG_RESULT([yes])\n-    else\n-      AC_MSG_RESULT([no])\n-    fi\n-  fi\n fi\n \n AM_CONDITIONAL([ENABLE_ZMQ], [test \"x$use_zmq\" = \"xyes\"])\n@@ -1557,7 +1531,6 @@ AM_CONDITIONAL([ENABLE_TESTS],[test x$BUILD_TEST = xyes])\n AM_CONDITIONAL([ENABLE_FUZZ],[test x$enable_fuzz = xyes])\n AM_CONDITIONAL([ENABLE_QT],[test x$bitcoin_enable_qt = xyes])\n AM_CONDITIONAL([ENABLE_QT_TESTS],[test x$BUILD_TEST_QT = xyes])\n-AM_CONDITIONAL([ENABLE_BIP70],[test x$enable_bip70 = xyes])\n AM_CONDITIONAL([ENABLE_BENCH],[test x$use_bench = xyes])\n AM_CONDITIONAL([USE_QRCODE], [test x$use_qr = xyes])\n AM_CONDITIONAL([USE_LCOV],[test x$use_lcov = xyes])\n@@ -1627,7 +1600,6 @@ AC_SUBST(SSL_LIBS)\n AC_SUBST(EVENT_LIBS)\n AC_SUBST(EVENT_PTHREADS_LIBS)\n AC_SUBST(ZMQ_LIBS)\n-AC_SUBST(PROTOBUF_LIBS)\n AC_SUBST(QR_LIBS)\n AC_CONFIG_FILES([Makefile src/Makefile doc/man/Makefile share/setup.nsi share/qt/Info.plist test/config.ini])\n AC_CONFIG_FILES([contrib/devtools/split-debug.sh],[chmod +x contrib/devtools/split-debug.sh])\n@@ -1682,7 +1654,6 @@ echo \"Options used to compile and link:\"\n echo \"  with wallet   = $enable_wallet\"\n echo \"  with gui / qt = $bitcoin_enable_qt\"\n if test x$bitcoin_enable_qt != xno; then\n-    echo \"    with bip70  = $enable_bip70\"\n     echo \"    with qr     = $use_qr\"\n fi\n echo \"  with zmq      = $use_zmq\""
      },
      {
        "sha": "da869fa2c3c458e47962a74eef0cfcb7b2d03e65",
        "filename": "contrib/bitcoind.bash-completion",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3548e4aac72e9148d41b440052a89d89328f7661/contrib/bitcoind.bash-completion",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3548e4aac72e9148d41b440052a89d89328f7661/contrib/bitcoind.bash-completion",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/bitcoind.bash-completion?ref=3548e4aac72e9148d41b440052a89d89328f7661",
        "patch": "@@ -15,7 +15,7 @@ _bitcoind() {\n     _get_comp_words_by_ref -n = cur prev words cword\n \n     case \"$cur\" in\n-        -conf=*|-pid=*|-loadblock=*|-rootcertificates=*|-rpccookiefile=*|-wallet=*)\n+        -conf=*|-pid=*|-loadblock=*|-rpccookiefile=*|-wallet=*)\n             cur=\"${cur#*=}\"\n             _filedir\n             return 0"
      },
      {
        "sha": "ac1768914a926294033bd7677f18b8a8b5483ee3",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3548e4aac72e9148d41b440052a89d89328f7661/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3548e4aac72e9148d41b440052a89d89328f7661/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=3548e4aac72e9148d41b440052a89d89328f7661",
        "patch": "@@ -701,12 +701,6 @@ if HARDEN\n \t$(AM_V_at) READELF=$(READELF) OBJDUMP=$(OBJDUMP) $(PYTHON) $(top_srcdir)/contrib/devtools/security-check.py < $(bin_PROGRAMS)\n endif\n \n-if ENABLE_BIP70\n-%.pb.cc %.pb.h: %.proto\n-\t@test -f $(PROTOC)\n-\t$(AM_V_GEN) $(PROTOC) --cpp_out=$(@D) --proto_path=$(<D) $<\n-endif\n-\n if EMBEDDED_LEVELDB\n include Makefile.leveldb.include\n endif"
      },
      {
        "sha": "13b1470b58ea46db23dc2b8336c10c3ff97aeb0d",
        "filename": "src/Makefile.qt.include",
        "status": "modified",
        "additions": 6,
        "deletions": 36,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3548e4aac72e9148d41b440052a89d89328f7661/src/Makefile.qt.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3548e4aac72e9148d41b440052a89d89328f7661/src/Makefile.qt.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qt.include?ref=3548e4aac72e9148d41b440052a89d89328f7661",
        "patch": "@@ -95,16 +95,6 @@ QT_QRC = qt/bitcoin.qrc\n QT_QRC_LOCALE_CPP = qt/qrc_bitcoin_locale.cpp\n QT_QRC_LOCALE = qt/bitcoin_locale.qrc\n \n-if ENABLE_BIP70\n-PROTOBUF_CC = qt/paymentrequest.pb.cc\n-PROTOBUF_H = qt/paymentrequest.pb.h\n-PROTOBUF_PROTO = qt/paymentrequest.proto\n-else\n-PROTOBUF_CC =\n-PROTOBUF_H =\n-PROTOBUF_PROTO =\n-endif\n-\n BITCOIN_QT_H = \\\n   qt/addressbookpage.h \\\n   qt/addresstablemodel.h \\\n@@ -134,7 +124,6 @@ BITCOIN_QT_H = \\\n   qt/optionsdialog.h \\\n   qt/optionsmodel.h \\\n   qt/overviewpage.h \\\n-  qt/paymentrequestplus.h \\\n   qt/paymentserver.h \\\n   qt/peertablemodel.h \\\n   qt/platformstyle.h \\\n@@ -269,18 +258,12 @@ BITCOIN_QT_WALLET_CPP = \\\n   qt/walletmodeltransaction.cpp \\\n   qt/walletview.cpp\n \n-BITCOIN_QT_WALLET_BIP70_CPP = \\\n-  qt/paymentrequestplus.cpp\n-\n BITCOIN_QT_CPP = $(BITCOIN_QT_BASE_CPP)\n if TARGET_WINDOWS\n BITCOIN_QT_CPP += $(BITCOIN_QT_WINDOWS_CPP)\n endif\n if ENABLE_WALLET\n BITCOIN_QT_CPP += $(BITCOIN_QT_WALLET_CPP)\n-if ENABLE_BIP70\n-BITCOIN_QT_CPP += $(BITCOIN_QT_WALLET_BIP70_CPP)\n-endif # ENABLE_BIP70\n endif # ENABLE_WALLET\n \n RES_IMAGES =\n@@ -292,18 +275,17 @@ BITCOIN_RC = qt/res/bitcoin-qt-res.rc\n BITCOIN_QT_INCLUDES = -DQT_NO_KEYWORDS\n \n qt_libbitcoinqt_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(BITCOIN_QT_INCLUDES) \\\n-  $(QT_INCLUDES) $(QT_DBUS_INCLUDES) $(PROTOBUF_CFLAGS) $(QR_CFLAGS)\n+  $(QT_INCLUDES) $(QT_DBUS_INCLUDES) $(QR_CFLAGS)\n qt_libbitcoinqt_a_CXXFLAGS = $(AM_CXXFLAGS) $(QT_PIE_FLAGS)\n qt_libbitcoinqt_a_OBJCXXFLAGS = $(AM_OBJCXXFLAGS) $(QT_PIE_FLAGS)\n \n qt_libbitcoinqt_a_SOURCES = $(BITCOIN_QT_CPP) $(BITCOIN_QT_H) $(QT_FORMS_UI) \\\n-  $(QT_QRC) $(QT_QRC_LOCALE) $(QT_TS) $(PROTOBUF_PROTO) $(RES_ICONS) $(RES_IMAGES) $(RES_MOVIES)\n+  $(QT_QRC) $(QT_QRC_LOCALE) $(QT_TS) $(RES_ICONS) $(RES_IMAGES) $(RES_MOVIES)\n if TARGET_DARWIN\n   qt_libbitcoinqt_a_SOURCES += $(BITCOIN_MM)\n endif\n \n-nodist_qt_libbitcoinqt_a_SOURCES = $(QT_MOC_CPP) $(QT_MOC) $(PROTOBUF_CC) \\\n-  $(PROTOBUF_H) $(QT_QRC_CPP) $(QT_QRC_LOCALE_CPP)\n+nodist_qt_libbitcoinqt_a_SOURCES = $(QT_MOC_CPP) $(QT_MOC) $(QT_QRC_CPP) $(QT_QRC_LOCALE_CPP)\n \n # forms/foo.h -> forms/ui_foo.h\n QT_FORMS_H=$(join $(dir $(QT_FORMS_UI)),$(addprefix ui_, $(notdir $(QT_FORMS_UI:.ui=.h))))\n@@ -313,14 +295,9 @@ QT_FORMS_H=$(join $(dir $(QT_FORMS_UI)),$(addprefix ui_, $(notdir $(QT_FORMS_UI:\n $(QT_MOC): $(QT_FORMS_H)\n $(qt_libbitcoinqt_a_OBJECTS) $(qt_bitcoin_qt_OBJECTS) : | $(QT_MOC)\n \n-#Generating these with a half-written protobuf header leads to wacky results.\n-#This makes sure it's done.\n-$(QT_MOC): $(PROTOBUF_H)\n-$(QT_MOC_CPP): $(PROTOBUF_H)\n-\n # bitcoin-qt binary #\n qt_bitcoin_qt_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(BITCOIN_QT_INCLUDES) \\\n-  $(QT_INCLUDES) $(PROTOBUF_CFLAGS) $(QR_CFLAGS)\n+  $(QT_INCLUDES) $(QR_CFLAGS)\n qt_bitcoin_qt_CXXFLAGS = $(AM_CXXFLAGS) $(QT_PIE_FLAGS)\n \n qt_bitcoin_qt_SOURCES = qt/main.cpp\n@@ -335,15 +312,8 @@ if ENABLE_ZMQ\n qt_bitcoin_qt_LDADD += $(LIBBITCOIN_ZMQ) $(ZMQ_LIBS)\n endif\n qt_bitcoin_qt_LDADD += $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CONSENSUS) $(LIBBITCOIN_CRYPTO) $(LIBUNIVALUE) $(LIBLEVELDB) $(LIBLEVELDB_SSE42) $(LIBMEMENV) \\\n-  $(BOOST_LIBS) $(QT_LIBS) $(QT_DBUS_LIBS) $(QR_LIBS) $(PROTOBUF_LIBS) $(BDB_LIBS) $(MINIUPNPC_LIBS) $(LIBSECP256K1) \\\n+  $(BOOST_LIBS) $(QT_LIBS) $(QT_DBUS_LIBS) $(QR_LIBS) $(BDB_LIBS) $(MINIUPNPC_LIBS) $(LIBSECP256K1) \\\n   $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS)\n-if ENABLE_BIP70\n-qt_bitcoin_qt_LDADD += $(SSL_LIBS)\n-else\n-if TARGET_WINDOWS\n-qt_bitcoin_qt_LDADD += $(SSL_LIBS)\n-endif\n-endif\n qt_bitcoin_qt_LDADD += $(CRYPTO_LIBS)\n qt_bitcoin_qt_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(QT_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n qt_bitcoin_qt_LIBTOOLFLAGS = $(AM_LIBTOOLFLAGS) --tag CXX\n@@ -368,7 +338,7 @@ $(QT_QRC_LOCALE_CPP): $(QT_QRC_LOCALE) $(QT_QM)\n \t  $(SED) -e '/^\\*\\*.*Created:/d' -e '/^\\*\\*.*by:/d' > $@\n \t@rm $(@D)/temp_$(<F)\n \n-$(QT_QRC_CPP): $(QT_QRC) $(QT_FORMS_H) $(RES_ICONS) $(RES_IMAGES) $(RES_MOVIES) $(PROTOBUF_H)\n+$(QT_QRC_CPP): $(QT_QRC) $(QT_FORMS_H) $(RES_ICONS) $(RES_IMAGES) $(RES_MOVIES)\n \t@test -f $(RCC)\n \t$(AM_V_GEN) QT_SELECT=$(QT_SELECT) $(RCC) -name bitcoin $< | \\\n \t  $(SED) -e '/^\\*\\*.*Created:/d' -e '/^\\*\\*.*by:/d' > $@"
      },
      {
        "sha": "c309340fd77714b1657c2779527296040efb055f",
        "filename": "src/Makefile.qttest.include",
        "status": "modified",
        "additions": 2,
        "deletions": 12,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3548e4aac72e9148d41b440052a89d89328f7661/src/Makefile.qttest.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3548e4aac72e9148d41b440052a89d89328f7661/src/Makefile.qttest.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qttest.include?ref=3548e4aac72e9148d41b440052a89d89328f7661",
        "patch": "@@ -15,10 +15,6 @@ if ENABLE_WALLET\n TEST_QT_MOC_CPP += \\\n   qt/test/moc_addressbooktests.cpp \\\n   qt/test/moc_wallettests.cpp\n-if ENABLE_BIP70\n-TEST_QT_MOC_CPP += \\\n-  qt/test/moc_paymentservertests.cpp\n-endif # ENABLE_BIP70\n endif # ENABLE_WALLET\n \n TEST_QT_H = \\\n@@ -28,8 +24,6 @@ TEST_QT_H = \\\n   qt/test/rpcnestedtests.h \\\n   qt/test/uritests.h \\\n   qt/test/util.h \\\n-  qt/test/paymentrequestdata.h \\\n-  qt/test/paymentservertests.h \\\n   qt/test/wallettests.h\n \n TEST_BITCOIN_CPP = \\\n@@ -39,7 +33,7 @@ TEST_BITCOIN_H = \\\n   test/setup_common.h\n \n qt_test_test_bitcoin_qt_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(BITCOIN_QT_INCLUDES) \\\n-  $(QT_INCLUDES) $(QT_TEST_INCLUDES) $(PROTOBUF_CFLAGS)\n+  $(QT_INCLUDES) $(QT_TEST_INCLUDES)\n \n qt_test_test_bitcoin_qt_SOURCES = \\\n   qt/test/apptests.cpp \\\n@@ -56,10 +50,6 @@ qt_test_test_bitcoin_qt_SOURCES += \\\n   qt/test/addressbooktests.cpp \\\n   qt/test/wallettests.cpp \\\n   wallet/test/wallet_test_fixture.cpp\n-if ENABLE_BIP70\n-qt_test_test_bitcoin_qt_SOURCES += \\\n-  qt/test/paymentservertests.cpp\n-endif # ENABLE_BIP70\n endif # ENABLE_WALLET\n \n nodist_qt_test_test_bitcoin_qt_SOURCES = $(TEST_QT_MOC_CPP)\n@@ -73,7 +63,7 @@ qt_test_test_bitcoin_qt_LDADD += $(LIBBITCOIN_ZMQ) $(ZMQ_LIBS)\n endif\n qt_test_test_bitcoin_qt_LDADD += $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CONSENSUS) $(LIBBITCOIN_CRYPTO) $(LIBUNIVALUE) $(LIBLEVELDB) \\\n   $(LIBLEVELDB_SSE42) $(LIBMEMENV) $(BOOST_LIBS) $(QT_DBUS_LIBS) $(QT_TEST_LIBS) $(QT_LIBS) \\\n-  $(QR_LIBS) $(PROTOBUF_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS) $(LIBSECP256K1) \\\n+  $(QR_LIBS) $(BDB_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS) $(LIBSECP256K1) \\\n   $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS)\n qt_test_test_bitcoin_qt_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(QT_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n qt_test_test_bitcoin_qt_CXXFLAGS = $(AM_CXXFLAGS) $(QT_PIE_FLAGS)"
      },
      {
        "sha": "da4d32266967d0756dcd316a42e907a5ffdc8ed3",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3548e4aac72e9148d41b440052a89d89328f7661/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3548e4aac72e9148d41b440052a89d89328f7661/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=3548e4aac72e9148d41b440052a89d89328f7661",
        "patch": "@@ -354,7 +354,7 @@ void SetupServerArgs()\n     std::vector<std::string> hidden_args = {\n         \"-dbcrashratio\", \"-forcecompactdb\",\n         // GUI args. These will be overwritten by SetupUIArgs for the GUI\n-        \"-allowselfsignedrootcertificates\", \"-choosedatadir\", \"-lang=<lang>\", \"-min\", \"-resetguisettings\", \"-rootcertificates=<file>\", \"-splash\", \"-uiplatform\"};\n+        \"-choosedatadir\", \"-lang=<lang>\", \"-min\", \"-resetguisettings\", \"-splash\", \"-uiplatform\"};\n \n     gArgs.AddArg(\"-version\", \"Print version and exit\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n #if HAVE_SYSTEM"
      },
      {
        "sha": "30c68db15b4e264bd843ee513bc5392340b62f25",
        "filename": "src/qt/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3548e4aac72e9148d41b440052a89d89328f7661/src/qt/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3548e4aac72e9148d41b440052a89d89328f7661/src/qt/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/README.md?ref=3548e4aac72e9148d41b440052a89d89328f7661",
        "patch": "@@ -50,7 +50,7 @@ Various dialogs, e.g. to open a URL. Inherit from [QDialog](https://doc.qt.io/qt\n \n ### paymentserver.(h/cpp)\n \n-Used to process BIP21 and BIP70 (see https://github.com/bitcoin/bitcoin/pull/11622) payment URI / requests. Also handles URI based application switching (e.g. when following a bitcoin:... link from a browser).\n+Used to process BIP21 payment URI requests. Also handles URI based application switching (e.g. when following a bitcoin:... link from a browser).\n \n ### walletview.(h/cpp)\n "
      },
      {
        "sha": "02a2a01bdda65fe1987033ce5f0b49e9d4991c86",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3548e4aac72e9148d41b440052a89d89328f7661/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3548e4aac72e9148d41b440052a89d89328f7661/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=3548e4aac72e9148d41b440052a89d89328f7661",
        "patch": "@@ -337,10 +337,6 @@ void BitcoinApplication::initializeResult(bool success)\n             window->setWalletController(m_wallet_controller);\n             if (paymentServer) {\n                 paymentServer->setOptionsModel(optionsModel);\n-#ifdef ENABLE_BIP70\n-                PaymentServer::LoadRootCAs();\n-                connect(m_wallet_controller, &WalletController::coinsSent, paymentServer, &PaymentServer::fetchPaymentACK);\n-#endif\n             }\n         }\n #endif // ENABLE_WALLET\n@@ -396,14 +392,10 @@ WId BitcoinApplication::getMainWinId() const\n \n static void SetupUIArgs()\n {\n-#if defined(ENABLE_WALLET) && defined(ENABLE_BIP70)\n-    gArgs.AddArg(\"-allowselfsignedrootcertificates\", strprintf(\"Allow self signed root certificates (default: %u)\", DEFAULT_SELFSIGNED_ROOTCERTS), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::GUI);\n-#endif\n     gArgs.AddArg(\"-choosedatadir\", strprintf(\"Choose data directory on startup (default: %u)\", DEFAULT_CHOOSE_DATADIR), ArgsManager::ALLOW_ANY, OptionsCategory::GUI);\n     gArgs.AddArg(\"-lang=<lang>\", \"Set language, for example \\\"de_DE\\\" (default: system locale)\", ArgsManager::ALLOW_ANY, OptionsCategory::GUI);\n     gArgs.AddArg(\"-min\", \"Start minimized\", ArgsManager::ALLOW_ANY, OptionsCategory::GUI);\n     gArgs.AddArg(\"-resetguisettings\", \"Reset all settings changed in the GUI\", ArgsManager::ALLOW_ANY, OptionsCategory::GUI);\n-    gArgs.AddArg(\"-rootcertificates=<file>\", \"Set SSL root certificates for payment request (default: -system-)\", ArgsManager::ALLOW_ANY, OptionsCategory::GUI);\n     gArgs.AddArg(\"-splash\", strprintf(\"Show splash screen on startup (default: %u)\", DEFAULT_SPLASHSCREEN), ArgsManager::ALLOW_ANY, OptionsCategory::GUI);\n     gArgs.AddArg(\"-uiplatform\", strprintf(\"Select platform to customize UI for (one of windows, macosx, other; default: %s)\", BitcoinGUI::DEFAULT_UIPLATFORM), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::GUI);\n }"
      },
      {
        "sha": "d74d0dbfebe2c6c330b43c252bf27e50be3e517b",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 19,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3548e4aac72e9148d41b440052a89d89328f7661/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3548e4aac72e9148d41b440052a89d89328f7661/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=3548e4aac72e9148d41b440052a89d89328f7661",
        "patch": "@@ -18,7 +18,7 @@\n #include <netbase.h>\n #include <txdb.h> // for -dbcache defaults\n \n-#include <QNetworkProxy>\n+#include <QDebug>\n #include <QSettings>\n #include <QStringList>\n \n@@ -483,24 +483,6 @@ void OptionsModel::setDisplayUnit(const QVariant &value)\n     }\n }\n \n-bool OptionsModel::getProxySettings(QNetworkProxy& proxy) const\n-{\n-    // Directly query current base proxy, because\n-    // GUI settings can be overridden with -proxy.\n-    proxyType curProxy;\n-    if (m_node.getProxy(NET_IPV4, curProxy)) {\n-        proxy.setType(QNetworkProxy::Socks5Proxy);\n-        proxy.setHostName(QString::fromStdString(curProxy.proxy.ToStringIP()));\n-        proxy.setPort(curProxy.proxy.GetPort());\n-\n-        return true;\n-    }\n-    else\n-        proxy.setType(QNetworkProxy::NoProxy);\n-\n-    return false;\n-}\n-\n void OptionsModel::setRestartRequired(bool fRequired)\n {\n     QSettings settings;"
      },
      {
        "sha": "5791b47f2834581b61deb2ae726bc78aac9a5226",
        "filename": "src/qt/optionsmodel.h",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3548e4aac72e9148d41b440052a89d89328f7661/src/qt/optionsmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3548e4aac72e9148d41b440052a89d89328f7661/src/qt/optionsmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.h?ref=3548e4aac72e9148d41b440052a89d89328f7661",
        "patch": "@@ -13,10 +13,6 @@ namespace interfaces {\n class Node;\n }\n \n-QT_BEGIN_NAMESPACE\n-class QNetworkProxy;\n-QT_END_NAMESPACE\n-\n extern const char *DEFAULT_GUI_PROXY_HOST;\n static constexpr unsigned short DEFAULT_GUI_PROXY_PORT = 9050;\n \n@@ -73,7 +69,6 @@ class OptionsModel : public QAbstractListModel\n     bool getMinimizeOnClose() const { return fMinimizeOnClose; }\n     int getDisplayUnit() const { return nDisplayUnit; }\n     QString getThirdPartyTxUrls() const { return strThirdPartyTxUrls; }\n-    bool getProxySettings(QNetworkProxy& proxy) const;\n     bool getCoinControlFeatures() const { return fCoinControlFeatures; }\n     const QString& getOverriddenByCommandLine() { return strOverriddenByCommandLine; }\n "
      },
      {
        "sha": "d2721a34bde8f696417ecc2e46914980383c5712",
        "filename": "src/qt/paymentrequest.proto",
        "status": "removed",
        "additions": 0,
        "deletions": 48,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1cb9a4e28cccd3056e2b8d9cdabc45bf3e4dd2a6/src/qt/paymentrequest.proto",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1cb9a4e28cccd3056e2b8d9cdabc45bf3e4dd2a6/src/qt/paymentrequest.proto",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentrequest.proto?ref=1cb9a4e28cccd3056e2b8d9cdabc45bf3e4dd2a6",
        "patch": "@@ -1,48 +0,0 @@\n-//\n-// Simple Bitcoin Payment Protocol messages\n-//\n-// Use fields 100+ for extensions;\n-// to avoid conflicts, register extensions at:\n-// https://en.bitcoin.it/wiki/Payment_Request\n-//\n-\n-syntax = \"proto2\";\n-\n-package payments;\n-option java_package = \"org.bitcoin.protocols.payments\";\n-option java_outer_classname = \"Protos\";\n-\n-// Generalized form of \"send payment to this/these bitcoin addresses\"\n-message Output {\n-\toptional uint64 amount = 1 [default = 0]; // amount is integer-number-of-satoshis\n-\trequired bytes script = 2; // usually one of the standard Script forms\n-}\n-message PaymentDetails {\n-        optional string network = 1 [default = \"main\"]; // \"main\" or \"test\"\n-        repeated Output outputs = 2;        // Where payment should be sent\n-        required uint64 time = 3;           // Timestamp; when payment request created\n-        optional uint64 expires = 4;        // Timestamp; when this request should be considered invalid\n-        optional string memo = 5;           // Human-readable description of request for the customer\n-        optional string payment_url = 6;    // URL to send Payment and get PaymentACK\n-        optional bytes merchant_data = 7;   // Arbitrary data to include in the Payment message\n-}\n-message PaymentRequest {\n-        optional uint32 payment_details_version = 1 [default = 1];\n-        optional string pki_type = 2 [default = \"none\"];  // none / x509+sha256 / x509+sha1\n-        optional bytes pki_data = 3;                      // depends on pki_type\n-        required bytes serialized_payment_details = 4;    // PaymentDetails\n-        optional bytes signature = 5;                     // pki-dependent signature\n-}\n-message X509Certificates {\n-        repeated bytes certificate = 1;    // DER-encoded X.509 certificate chain\n-}\n-message Payment {\n-        optional bytes merchant_data = 1;  // From PaymentDetails.merchant_data\n-        repeated bytes transactions = 2;   // Signed transactions that satisfy PaymentDetails.outputs\n-        repeated Output refund_to = 3;     // Where to send refunds, if a refund is necessary\n-        optional string memo = 4;          // Human-readable message for the merchant\n-}\n-message PaymentACK {\n-        required Payment payment = 1;      // Payment message that triggered this ACK\n-        optional string memo = 2;          // human-readable message for customer\n-}"
      },
      {
        "sha": "b962ab1ef210b1145da6651bec8abda0f59ff44a",
        "filename": "src/qt/paymentrequestplus.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 213,
        "changes": 213,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1cb9a4e28cccd3056e2b8d9cdabc45bf3e4dd2a6/src/qt/paymentrequestplus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1cb9a4e28cccd3056e2b8d9cdabc45bf3e4dd2a6/src/qt/paymentrequestplus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentrequestplus.cpp?ref=1cb9a4e28cccd3056e2b8d9cdabc45bf3e4dd2a6",
        "patch": "@@ -1,213 +0,0 @@\n-// Copyright (c) 2011-2018 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-//\n-// Wraps dumb protocol buffer paymentRequest\n-// with some extra methods\n-//\n-\n-#include <qt/paymentrequestplus.h>\n-\n-#include <util/system.h>\n-\n-#include <stdexcept>\n-\n-#include <openssl/x509_vfy.h>\n-\n-#include <QDateTime>\n-#include <QDebug>\n-#include <QSslCertificate>\n-\n-class SSLVerifyError : public std::runtime_error\n-{\n-public:\n-    explicit SSLVerifyError(std::string err) : std::runtime_error(err) { }\n-};\n-\n-bool PaymentRequestPlus::parse(const QByteArray& data)\n-{\n-    bool parseOK = paymentRequest.ParseFromArray(data.data(), data.size());\n-    if (!parseOK) {\n-        qWarning() << \"PaymentRequestPlus::parse: Error parsing payment request\";\n-        return false;\n-    }\n-    if (paymentRequest.payment_details_version() > 1) {\n-        qWarning() << \"PaymentRequestPlus::parse: Received up-version payment details, version=\" << paymentRequest.payment_details_version();\n-        return false;\n-    }\n-\n-    parseOK = details.ParseFromString(paymentRequest.serialized_payment_details());\n-    if (!parseOK)\n-    {\n-        qWarning() << \"PaymentRequestPlus::parse: Error parsing payment details\";\n-        paymentRequest.Clear();\n-        return false;\n-    }\n-    return true;\n-}\n-\n-bool PaymentRequestPlus::SerializeToString(std::string* output) const\n-{\n-    return paymentRequest.SerializeToString(output);\n-}\n-\n-bool PaymentRequestPlus::IsInitialized() const\n-{\n-    return paymentRequest.IsInitialized();\n-}\n-\n-bool PaymentRequestPlus::getMerchant(X509_STORE* certStore, QString& merchant) const\n-{\n-    merchant.clear();\n-\n-    if (!IsInitialized())\n-        return false;\n-\n-    // One day we'll support more PKI types, but just\n-    // x509 for now:\n-    const EVP_MD* digestAlgorithm = nullptr;\n-    if (paymentRequest.pki_type() == \"x509+sha256\") {\n-        digestAlgorithm = EVP_sha256();\n-    }\n-    else if (paymentRequest.pki_type() == \"x509+sha1\") {\n-        digestAlgorithm = EVP_sha1();\n-    }\n-    else if (paymentRequest.pki_type() == \"none\") {\n-        qWarning() << \"PaymentRequestPlus::getMerchant: Payment request: pki_type == none\";\n-        return false;\n-    }\n-    else {\n-        qWarning() << \"PaymentRequestPlus::getMerchant: Payment request: unknown pki_type \" << QString::fromStdString(paymentRequest.pki_type());\n-        return false;\n-    }\n-\n-    payments::X509Certificates certChain;\n-    if (!certChain.ParseFromString(paymentRequest.pki_data())) {\n-        qWarning() << \"PaymentRequestPlus::getMerchant: Payment request: error parsing pki_data\";\n-        return false;\n-    }\n-\n-    std::vector<X509*> certs;\n-    const QDateTime currentTime = QDateTime::currentDateTime();\n-    for (int i = 0; i < certChain.certificate_size(); i++) {\n-        QByteArray certData(certChain.certificate(i).data(), certChain.certificate(i).size());\n-        QSslCertificate qCert(certData, QSsl::Der);\n-        if (currentTime < qCert.effectiveDate() || currentTime > qCert.expiryDate()) {\n-            qWarning() << \"PaymentRequestPlus::getMerchant: Payment request: certificate expired or not yet active: \" << qCert;\n-            return false;\n-        }\n-        if (qCert.isBlacklisted()) {\n-            qWarning() << \"PaymentRequestPlus::getMerchant: Payment request: certificate blacklisted: \" << qCert;\n-            return false;\n-        }\n-        const unsigned char *data = (const unsigned char *)certChain.certificate(i).data();\n-        X509 *cert = d2i_X509(nullptr, &data, certChain.certificate(i).size());\n-        if (cert)\n-            certs.push_back(cert);\n-    }\n-    if (certs.empty()) {\n-        qWarning() << \"PaymentRequestPlus::getMerchant: Payment request: empty certificate chain\";\n-        return false;\n-    }\n-\n-    // The first cert is the signing cert, the rest are untrusted certs that chain\n-    // to a valid root authority. OpenSSL needs them separately.\n-    STACK_OF(X509) *chain = sk_X509_new_null();\n-    for (int i = certs.size() - 1; i > 0; i--) {\n-        sk_X509_push(chain, certs[i]);\n-    }\n-    X509 *signing_cert = certs[0];\n-\n-    // Now create a \"store context\", which is a single use object for checking,\n-    // load the signing cert into it and verify.\n-    X509_STORE_CTX *store_ctx = X509_STORE_CTX_new();\n-    if (!store_ctx) {\n-        qWarning() << \"PaymentRequestPlus::getMerchant: Payment request: error creating X509_STORE_CTX\";\n-        return false;\n-    }\n-\n-    char *website = nullptr;\n-    bool fResult = true;\n-    try\n-    {\n-        if (!X509_STORE_CTX_init(store_ctx, certStore, signing_cert, chain))\n-        {\n-            int error = X509_STORE_CTX_get_error(store_ctx);\n-            throw SSLVerifyError(X509_verify_cert_error_string(error));\n-        }\n-\n-        // Now do the verification!\n-        int result = X509_verify_cert(store_ctx);\n-        if (result != 1) {\n-            int error = X509_STORE_CTX_get_error(store_ctx);\n-            // For testing payment requests, we allow self signed root certs!\n-            if (!(error == X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT && gArgs.GetBoolArg(\"-allowselfsignedrootcertificates\", DEFAULT_SELFSIGNED_ROOTCERTS))) {\n-                throw SSLVerifyError(X509_verify_cert_error_string(error));\n-            } else {\n-               qDebug() << \"PaymentRequestPlus::getMerchant: Allowing self signed root certificate, because -allowselfsignedrootcertificates is true.\";\n-            }\n-        }\n-        X509_NAME *certname = X509_get_subject_name(signing_cert);\n-\n-        // Valid cert; check signature:\n-        payments::PaymentRequest rcopy(paymentRequest); // Copy\n-        rcopy.set_signature(std::string(\"\"));\n-        std::string data_to_verify;                     // Everything but the signature\n-        rcopy.SerializeToString(&data_to_verify);\n-\n-#if HAVE_DECL_EVP_MD_CTX_NEW\n-        EVP_MD_CTX *ctx = EVP_MD_CTX_new();\n-        if (!ctx) throw SSLVerifyError(\"Error allocating OpenSSL context.\");\n-#else\n-        EVP_MD_CTX _ctx;\n-        EVP_MD_CTX *ctx;\n-        ctx = &_ctx;\n-#endif\n-        EVP_PKEY *pubkey = X509_get_pubkey(signing_cert);\n-        EVP_MD_CTX_init(ctx);\n-        if (!EVP_VerifyInit_ex(ctx, digestAlgorithm, nullptr) ||\n-            !EVP_VerifyUpdate(ctx, data_to_verify.data(), data_to_verify.size()) ||\n-            !EVP_VerifyFinal(ctx, (const unsigned char*)paymentRequest.signature().data(), (unsigned int)paymentRequest.signature().size(), pubkey)) {\n-            throw SSLVerifyError(\"Bad signature, invalid payment request.\");\n-        }\n-#if HAVE_DECL_EVP_MD_CTX_NEW\n-        EVP_MD_CTX_free(ctx);\n-#endif\n-\n-        // OpenSSL API for getting human printable strings from certs is baroque.\n-        int textlen = X509_NAME_get_text_by_NID(certname, NID_commonName, nullptr, 0);\n-        website = new char[textlen + 1];\n-        if (X509_NAME_get_text_by_NID(certname, NID_commonName, website, textlen + 1) == textlen && textlen > 0) {\n-            merchant = website;\n-        }\n-        else {\n-            throw SSLVerifyError(\"Bad certificate, missing common name.\");\n-        }\n-        // TODO: detect EV certificates and set merchant = business name instead of unfriendly NID_commonName ?\n-    }\n-    catch (const SSLVerifyError& err) {\n-        fResult = false;\n-        qWarning() << \"PaymentRequestPlus::getMerchant: SSL error: \" << err.what();\n-    }\n-\n-    delete[] website;\n-    X509_STORE_CTX_free(store_ctx);\n-    for (unsigned int i = 0; i < certs.size(); i++)\n-        X509_free(certs[i]);\n-\n-    return fResult;\n-}\n-\n-QList<std::pair<CScript,CAmount> > PaymentRequestPlus::getPayTo() const\n-{\n-    QList<std::pair<CScript,CAmount> > result;\n-    for (int i = 0; i < details.outputs_size(); i++)\n-    {\n-        const unsigned char* scriptStr = (const unsigned char*)details.outputs(i).script().data();\n-        CScript s(scriptStr, scriptStr+details.outputs(i).script().size());\n-\n-        result.append(std::make_pair(s, details.outputs(i).amount()));\n-    }\n-    return result;\n-}"
      },
      {
        "sha": "30146288070e9a4e0bb910db370d503a6fce5a1a",
        "filename": "src/qt/paymentrequestplus.h",
        "status": "removed",
        "additions": 0,
        "deletions": 52,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1cb9a4e28cccd3056e2b8d9cdabc45bf3e4dd2a6/src/qt/paymentrequestplus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1cb9a4e28cccd3056e2b8d9cdabc45bf3e4dd2a6/src/qt/paymentrequestplus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentrequestplus.h?ref=1cb9a4e28cccd3056e2b8d9cdabc45bf3e4dd2a6",
        "patch": "@@ -1,52 +0,0 @@\n-// Copyright (c) 2011-2018 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#ifndef BITCOIN_QT_PAYMENTREQUESTPLUS_H\n-#define BITCOIN_QT_PAYMENTREQUESTPLUS_H\n-\n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wdeprecated-declarations\"\n-#include <qt/paymentrequest.pb.h>\n-#pragma GCC diagnostic pop\n-\n-#include <amount.h>\n-#include <script/script.h>\n-\n-#include <openssl/x509.h>\n-\n-#include <QByteArray>\n-#include <QList>\n-#include <QString>\n-\n-static const bool DEFAULT_SELFSIGNED_ROOTCERTS = false;\n-\n-//\n-// Wraps dumb protocol buffer paymentRequest\n-// with extra methods\n-//\n-\n-class PaymentRequestPlus\n-{\n-public:\n-    PaymentRequestPlus() { }\n-\n-    bool parse(const QByteArray& data);\n-    bool SerializeToString(std::string* output) const;\n-\n-    bool IsInitialized() const;\n-    // Returns true if merchant's identity is authenticated, and\n-    // returns human-readable merchant identity in merchant\n-    bool getMerchant(X509_STORE* certStore, QString& merchant) const;\n-\n-    // Returns list of outputs, amount\n-    QList<std::pair<CScript,CAmount> > getPayTo() const;\n-\n-    const payments::PaymentDetails& getDetails() const { return details; }\n-\n-private:\n-    payments::PaymentRequest paymentRequest;\n-    payments::PaymentDetails details;\n-};\n-\n-#endif // BITCOIN_QT_PAYMENTREQUESTPLUS_H"
      },
      {
        "sha": "64fb3d60601ae3a3ef3114fe0f3c5c6dd4e408e6",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 545,
        "changes": 545,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3548e4aac72e9148d41b440052a89d89328f7661/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3548e4aac72e9148d41b440052a89d89328f7661/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=3548e4aac72e9148d41b440052a89d89328f7661",
        "patch": "@@ -23,8 +23,6 @@\n #include <cstdlib>\n #include <memory>\n \n-#include <openssl/x509_vfy.h>\n-\n #include <QApplication>\n #include <QByteArray>\n #include <QDataStream>\n@@ -36,28 +34,11 @@\n #include <QList>\n #include <QLocalServer>\n #include <QLocalSocket>\n-#include <QNetworkAccessManager>\n-#include <QNetworkProxy>\n-#include <QNetworkReply>\n-#include <QNetworkRequest>\n-#include <QSslCertificate>\n-#include <QSslConfiguration>\n-#include <QSslError>\n #include <QStringList>\n-#include <QTextDocument>\n #include <QUrlQuery>\n \n const int BITCOIN_IPC_CONNECT_TIMEOUT = 1000; // milliseconds\n const QString BITCOIN_IPC_PREFIX(\"bitcoin:\");\n-#ifdef ENABLE_BIP70\n-// BIP70 payment protocol messages\n-const char* BIP70_MESSAGE_PAYMENTACK = \"PaymentACK\";\n-const char* BIP70_MESSAGE_PAYMENTREQUEST = \"PaymentRequest\";\n-// BIP71 payment protocol media types\n-const char* BIP71_MIMETYPE_PAYMENT = \"application/bitcoin-payment\";\n-const char* BIP71_MIMETYPE_PAYMENTACK = \"application/bitcoin-paymentack\";\n-const char* BIP71_MIMETYPE_PAYMENTREQUEST = \"application/bitcoin-paymentrequest\";\n-#endif\n \n //\n // Create a name that is unique for:\n@@ -125,32 +106,6 @@ void PaymentServer::ipcParseCommandLine(interfaces::Node& node, int argc, char*\n                 }\n             }\n         }\n-#ifdef ENABLE_BIP70\n-        else if (QFile::exists(arg)) // Filename\n-        {\n-            if (savedPaymentRequests.contains(arg)) continue;\n-            savedPaymentRequests.insert(arg);\n-\n-            PaymentRequestPlus request;\n-            if (readPaymentRequestFromFile(arg, request))\n-            {\n-                if (request.getDetails().network() == \"main\")\n-                {\n-                    node.selectParams(CBaseChainParams::MAIN);\n-                }\n-                else if (request.getDetails().network() == \"test\")\n-                {\n-                    node.selectParams(CBaseChainParams::TESTNET);\n-                }\n-            }\n-        }\n-        else\n-        {\n-            // Printing to debug.log is about the best we can do here, the\n-            // GUI hasn't started yet so we can't pop up a message box.\n-            qWarning() << \"PaymentServer::ipcSendCommandLine: Payment request file does not exist: \" << arg;\n-        }\n-#endif\n     }\n }\n \n@@ -198,16 +153,7 @@ PaymentServer::PaymentServer(QObject* parent, bool startLocalServer) :\n     saveURIs(true),\n     uriServer(nullptr),\n     optionsModel(nullptr)\n-#ifdef ENABLE_BIP70\n-    ,netManager(nullptr)\n-#endif\n {\n-#ifdef ENABLE_BIP70\n-    // Verify that the version of the library that we linked against is\n-    // compatible with the version of the headers we compiled against.\n-    GOOGLE_PROTOBUF_VERIFY_VERSION;\n-#endif\n-\n     // Install global event filter to catch QFileOpenEvents\n     // on Mac: sent when you click bitcoin: links\n     // other OSes: helpful when dealing with payment request files\n@@ -230,18 +176,12 @@ PaymentServer::PaymentServer(QObject* parent, bool startLocalServer) :\n         }\n         else {\n             connect(uriServer, &QLocalServer::newConnection, this, &PaymentServer::handleURIConnection);\n-#ifdef ENABLE_BIP70\n-            connect(this, &PaymentServer::receivedPaymentACK, this, &PaymentServer::handlePaymentACK);\n-#endif\n         }\n     }\n }\n \n PaymentServer::~PaymentServer()\n {\n-#ifdef ENABLE_BIP70\n-    google::protobuf::ShutdownProtobufLibrary();\n-#endif\n }\n \n //\n@@ -266,10 +206,6 @@ bool PaymentServer::eventFilter(QObject *object, QEvent *event)\n \n void PaymentServer::uiReady()\n {\n-#ifdef ENABLE_BIP70\n-    initNetManager();\n-#endif\n-\n     saveURIs = false;\n     for (const QString& s : savedPaymentRequests)\n     {\n@@ -294,48 +230,19 @@ void PaymentServer::handleURIOrFile(const QString& s)\n     else if (s.startsWith(BITCOIN_IPC_PREFIX, Qt::CaseInsensitive)) // bitcoin: URI\n     {\n         QUrlQuery uri((QUrl(s)));\n-#ifdef ENABLE_BIP70\n-        if (uri.hasQueryItem(\"r\")) // payment request URI\n-        {\n-            Q_EMIT message(tr(\"URI handling\"),\n-                tr(\"You are using a BIP70 URL which will be unsupported in the future.\"),\n-                CClientUIInterface::ICON_WARNING);\n-            QByteArray temp;\n-            temp.append(uri.queryItemValue(\"r\"));\n-            QString decoded = QUrl::fromPercentEncoding(temp);\n-            QUrl fetchUrl(decoded, QUrl::StrictMode);\n-\n-            if (fetchUrl.isValid())\n-            {\n-                qDebug() << \"PaymentServer::handleURIOrFile: fetchRequest(\" << fetchUrl << \")\";\n-                fetchRequest(fetchUrl);\n-            }\n-            else\n-            {\n-                qWarning() << \"PaymentServer::handleURIOrFile: Invalid URL: \" << fetchUrl;\n-                Q_EMIT message(tr(\"URI handling\"),\n-                    tr(\"Payment request fetch URL is invalid: %1\").arg(fetchUrl.toString()),\n-                    CClientUIInterface::ICON_WARNING);\n-            }\n-            return;\n-        }\n-        else\n-#endif\n         // normal URI\n         {\n             SendCoinsRecipient recipient;\n             if (GUIUtil::parseBitcoinURI(s, &recipient))\n             {\n                 if (!IsValidDestinationString(recipient.address.toStdString())) {\n-#ifndef ENABLE_BIP70\n                     if (uri.hasQueryItem(\"r\")) {  // payment request\n                         Q_EMIT message(tr(\"URI handling\"),\n                             tr(\"Cannot process payment request because BIP70 support was not compiled in.\")+\n                             tr(\"Due to widespread security flaws in BIP70 it's strongly recommended that any merchant instructions to switch wallets be ignored.\")+\n                             tr(\"If you are receiving this error you should request the merchant provide a BIP21 compatible URI.\"),\n                             CClientUIInterface::ICON_WARNING);\n                     }\n-#endif\n                     Q_EMIT message(tr(\"URI handling\"), tr(\"Invalid payment address %1\").arg(recipient.address),\n                         CClientUIInterface::MSG_ERROR);\n                 }\n@@ -353,26 +260,11 @@ void PaymentServer::handleURIOrFile(const QString& s)\n \n     if (QFile::exists(s)) // payment request file\n     {\n-#ifdef ENABLE_BIP70\n-        PaymentRequestPlus request;\n-        SendCoinsRecipient recipient;\n-        if (!readPaymentRequestFromFile(s, request))\n-        {\n-            Q_EMIT message(tr(\"Payment request file handling\"),\n-                tr(\"Payment request file cannot be read! This can be caused by an invalid payment request file.\"),\n-                CClientUIInterface::ICON_WARNING);\n-        }\n-        else if (processPaymentRequest(request, recipient))\n-            Q_EMIT receivedPaymentRequest(recipient);\n-\n-        return;\n-#else\n         Q_EMIT message(tr(\"Payment request file handling\"),\n             tr(\"Cannot process payment request because BIP70 support was not compiled in.\")+\n             tr(\"Due to widespread security flaws in BIP70 it's strongly recommended that any merchant instructions to switch wallets be ignored.\")+\n             tr(\"If you are receiving this error you should request the merchant provide a BIP21 compatible URI.\"),\n             CClientUIInterface::ICON_WARNING);\n-#endif\n     }\n }\n \n@@ -400,440 +292,3 @@ void PaymentServer::setOptionsModel(OptionsModel *_optionsModel)\n {\n     this->optionsModel = _optionsModel;\n }\n-\n-#ifdef ENABLE_BIP70\n-struct X509StoreDeleter {\n-      void operator()(X509_STORE* b) {\n-          X509_STORE_free(b);\n-      }\n-};\n-\n-struct X509Deleter {\n-      void operator()(X509* b) { X509_free(b); }\n-};\n-\n-namespace // Anon namespace\n-{\n-    std::unique_ptr<X509_STORE, X509StoreDeleter> certStore;\n-}\n-\n-static void ReportInvalidCertificate(const QSslCertificate& cert)\n-{\n-    qDebug() << QString(\"%1: Payment server found an invalid certificate: \").arg(__func__) << cert.serialNumber() << cert.subjectInfo(QSslCertificate::CommonName) << cert.subjectInfo(QSslCertificate::DistinguishedNameQualifier) << cert.subjectInfo(QSslCertificate::OrganizationalUnitName);\n-}\n-\n-//\n-// Load OpenSSL's list of root certificate authorities\n-//\n-void PaymentServer::LoadRootCAs(X509_STORE* _store)\n-{\n-    // Unit tests mostly use this, to pass in fake root CAs:\n-    if (_store)\n-    {\n-        certStore.reset(_store);\n-        return;\n-    }\n-\n-    // Normal execution, use either -rootcertificates or system certs:\n-    certStore.reset(X509_STORE_new());\n-\n-    // Note: use \"-system-\" default here so that users can pass -rootcertificates=\"\"\n-    // and get 'I don't like X.509 certificates, don't trust anybody' behavior:\n-    QString certFile = QString::fromStdString(gArgs.GetArg(\"-rootcertificates\", \"-system-\"));\n-\n-    // Empty store\n-    if (certFile.isEmpty()) {\n-        qDebug() << QString(\"PaymentServer::%1: Payment request authentication via X.509 certificates disabled.\").arg(__func__);\n-        return;\n-    }\n-\n-    QList<QSslCertificate> certList;\n-\n-    if (certFile != \"-system-\") {\n-            qDebug() << QString(\"PaymentServer::%1: Using \\\"%2\\\" as trusted root certificate.\").arg(__func__).arg(certFile);\n-\n-        certList = QSslCertificate::fromPath(certFile);\n-        // Use those certificates when fetching payment requests, too:\n-        QSslConfiguration::defaultConfiguration().setCaCertificates(certList);\n-    } else\n-        certList = QSslConfiguration::systemCaCertificates();\n-\n-    int nRootCerts = 0;\n-    const QDateTime currentTime = QDateTime::currentDateTime();\n-\n-    for (const QSslCertificate& cert : certList) {\n-        // Don't log NULL certificates\n-        if (cert.isNull())\n-            continue;\n-\n-        // Not yet active/valid, or expired certificate\n-        if (currentTime < cert.effectiveDate() || currentTime > cert.expiryDate()) {\n-            ReportInvalidCertificate(cert);\n-            continue;\n-        }\n-\n-        // Blacklisted certificate\n-        if (cert.isBlacklisted()) {\n-            ReportInvalidCertificate(cert);\n-            continue;\n-        }\n-\n-        QByteArray certData = cert.toDer();\n-        const unsigned char *data = (const unsigned char *)certData.data();\n-\n-        std::unique_ptr<X509, X509Deleter> x509(d2i_X509(0, &data, certData.size()));\n-        if (x509 && X509_STORE_add_cert(certStore.get(), x509.get()))\n-        {\n-            // Note: X509_STORE increases the reference count to the X509 object,\n-            // we still have to release our reference to it.\n-            ++nRootCerts;\n-        }\n-        else\n-        {\n-            ReportInvalidCertificate(cert);\n-            continue;\n-        }\n-    }\n-    qInfo() << \"PaymentServer::LoadRootCAs: Loaded \" << nRootCerts << \" root certificates\";\n-\n-    // Project for another day:\n-    // Fetch certificate revocation lists, and add them to certStore.\n-    // Issues to consider:\n-    //   performance (start a thread to fetch in background?)\n-    //   privacy (fetch through tor/proxy so IP address isn't revealed)\n-    //   would it be easier to just use a compiled-in blacklist?\n-    //    or use Qt's blacklist?\n-    //   \"certificate stapling\" with server-side caching is more efficient\n-}\n-\n-void PaymentServer::initNetManager()\n-{\n-    if (!optionsModel)\n-        return;\n-    delete netManager;\n-\n-    // netManager is used to fetch paymentrequests given in bitcoin: URIs\n-    netManager = new QNetworkAccessManager(this);\n-\n-    QNetworkProxy proxy;\n-\n-    // Query active SOCKS5 proxy\n-    if (optionsModel->getProxySettings(proxy)) {\n-        netManager->setProxy(proxy);\n-\n-        qDebug() << \"PaymentServer::initNetManager: Using SOCKS5 proxy\" << proxy.hostName() << \":\" << proxy.port();\n-    }\n-    else\n-        qDebug() << \"PaymentServer::initNetManager: No active proxy server found.\";\n-\n-    connect(netManager, &QNetworkAccessManager::finished, this, &PaymentServer::netRequestFinished);\n-    connect(netManager, &QNetworkAccessManager::sslErrors, this, &PaymentServer::reportSslErrors);\n-}\n-\n-//\n-// Warning: readPaymentRequestFromFile() is used in ipcSendCommandLine()\n-// so don't use \"Q_EMIT message()\", but \"QMessageBox::\"!\n-//\n-bool PaymentServer::readPaymentRequestFromFile(const QString& filename, PaymentRequestPlus& request)\n-{\n-    QFile f(filename);\n-    if (!f.open(QIODevice::ReadOnly)) {\n-        qWarning() << QString(\"PaymentServer::%1: Failed to open %2\").arg(__func__).arg(filename);\n-        return false;\n-    }\n-\n-    // BIP70 DoS protection\n-    if (!verifySize(f.size())) {\n-        return false;\n-    }\n-\n-    QByteArray data = f.readAll();\n-\n-    return request.parse(data);\n-}\n-\n-bool PaymentServer::processPaymentRequest(const PaymentRequestPlus& request, SendCoinsRecipient& recipient)\n-{\n-    if (!optionsModel)\n-        return false;\n-\n-    if (request.IsInitialized()) {\n-        // Payment request network matches client network?\n-        if (!verifyNetwork(optionsModel->node(), request.getDetails())) {\n-            Q_EMIT message(tr(\"Payment request rejected\"), tr(\"Payment request network doesn't match client network.\"),\n-                CClientUIInterface::MSG_ERROR);\n-\n-            return false;\n-        }\n-\n-        // Make sure any payment requests involved are still valid.\n-        // This is re-checked just before sending coins in WalletModel::sendCoins().\n-        if (verifyExpired(request.getDetails())) {\n-            Q_EMIT message(tr(\"Payment request rejected\"), tr(\"Payment request expired.\"),\n-                CClientUIInterface::MSG_ERROR);\n-\n-            return false;\n-        }\n-    } else {\n-        Q_EMIT message(tr(\"Payment request error\"), tr(\"Payment request is not initialized.\"),\n-            CClientUIInterface::MSG_ERROR);\n-\n-        return false;\n-    }\n-\n-    recipient.paymentRequest = request;\n-    recipient.message = GUIUtil::HtmlEscape(request.getDetails().memo());\n-\n-    request.getMerchant(certStore.get(), recipient.authenticatedMerchant);\n-\n-    QList<std::pair<CScript, CAmount> > sendingTos = request.getPayTo();\n-    QStringList addresses;\n-\n-    for (const std::pair<CScript, CAmount>& sendingTo : sendingTos) {\n-        // Extract and check destination addresses\n-        CTxDestination dest;\n-        if (ExtractDestination(sendingTo.first, dest)) {\n-            // Append destination address\n-            addresses.append(QString::fromStdString(EncodeDestination(dest)));\n-        }\n-        else if (!recipient.authenticatedMerchant.isEmpty()) {\n-            // Unauthenticated payment requests to custom bitcoin addresses are not supported\n-            // (there is no good way to tell the user where they are paying in a way they'd\n-            // have a chance of understanding).\n-            Q_EMIT message(tr(\"Payment request rejected\"),\n-                tr(\"Unverified payment requests to custom payment scripts are unsupported.\"),\n-                CClientUIInterface::MSG_ERROR);\n-            return false;\n-        }\n-\n-        // Bitcoin amounts are stored as (optional) uint64 in the protobuf messages (see paymentrequest.proto),\n-        // but CAmount is defined as int64_t. Because of that we need to verify that amounts are in a valid range\n-        // and no overflow has happened.\n-        if (!verifyAmount(sendingTo.second)) {\n-            Q_EMIT message(tr(\"Payment request rejected\"), tr(\"Invalid payment request.\"), CClientUIInterface::MSG_ERROR);\n-            return false;\n-        }\n-\n-        // Extract and check amounts\n-        CTxOut txOut(sendingTo.second, sendingTo.first);\n-        if (IsDust(txOut, optionsModel->node().getDustRelayFee())) {\n-            Q_EMIT message(tr(\"Payment request error\"), tr(\"Requested payment amount of %1 is too small (considered dust).\")\n-                .arg(BitcoinUnits::formatWithUnit(optionsModel->getDisplayUnit(), sendingTo.second)),\n-                CClientUIInterface::MSG_ERROR);\n-\n-            return false;\n-        }\n-\n-        recipient.amount += sendingTo.second;\n-        // Also verify that the final amount is still in a valid range after adding additional amounts.\n-        if (!verifyAmount(recipient.amount)) {\n-            Q_EMIT message(tr(\"Payment request rejected\"), tr(\"Invalid payment request.\"), CClientUIInterface::MSG_ERROR);\n-            return false;\n-        }\n-    }\n-    // Store addresses and format them to fit nicely into the GUI\n-    recipient.address = addresses.join(\"<br />\");\n-\n-    if (!recipient.authenticatedMerchant.isEmpty()) {\n-        qDebug() << \"PaymentServer::processPaymentRequest: Secure payment request from \" << recipient.authenticatedMerchant;\n-    }\n-    else {\n-        qDebug() << \"PaymentServer::processPaymentRequest: Insecure payment request to \" << addresses.join(\", \");\n-    }\n-\n-    return true;\n-}\n-\n-void PaymentServer::fetchRequest(const QUrl& url)\n-{\n-    QNetworkRequest netRequest;\n-    netRequest.setAttribute(QNetworkRequest::User, BIP70_MESSAGE_PAYMENTREQUEST);\n-    netRequest.setUrl(url);\n-    netRequest.setRawHeader(\"User-Agent\", CLIENT_NAME.c_str());\n-    netRequest.setRawHeader(\"Accept\", BIP71_MIMETYPE_PAYMENTREQUEST);\n-    netManager->get(netRequest);\n-}\n-\n-void PaymentServer::fetchPaymentACK(WalletModel* walletModel, const SendCoinsRecipient& recipient, QByteArray transaction)\n-{\n-    const payments::PaymentDetails& details = recipient.paymentRequest.getDetails();\n-    if (!details.has_payment_url())\n-        return;\n-\n-    QNetworkRequest netRequest;\n-    netRequest.setAttribute(QNetworkRequest::User, BIP70_MESSAGE_PAYMENTACK);\n-    netRequest.setUrl(QString::fromStdString(details.payment_url()));\n-    netRequest.setHeader(QNetworkRequest::ContentTypeHeader, BIP71_MIMETYPE_PAYMENT);\n-    netRequest.setRawHeader(\"User-Agent\", CLIENT_NAME.c_str());\n-    netRequest.setRawHeader(\"Accept\", BIP71_MIMETYPE_PAYMENTACK);\n-\n-    payments::Payment payment;\n-    payment.set_merchant_data(details.merchant_data());\n-    payment.add_transactions(transaction.data(), transaction.size());\n-\n-    // Create a new refund address, or re-use:\n-    CTxDestination dest;\n-    const OutputType change_type = walletModel->wallet().getDefaultChangeType() != OutputType::CHANGE_AUTO ? walletModel->wallet().getDefaultChangeType() : walletModel->wallet().getDefaultAddressType();\n-    if (walletModel->wallet().getNewDestination(change_type, \"\", dest)) {\n-        // BIP70 requests encode the scriptPubKey directly, so we are not restricted to address\n-        // types supported by the receiver. As a result, we choose the address format we also\n-        // use for change. Despite an actual payment and not change, this is a close match:\n-        // it's the output type we use subject to privacy issues, but not restricted by what\n-        // other software supports.\n-        std::string label = tr(\"Refund from %1\").arg(recipient.authenticatedMerchant).toStdString();\n-        walletModel->wallet().setAddressBook(dest, label, \"refund\");\n-\n-        CScript s = GetScriptForDestination(dest);\n-        payments::Output* refund_to = payment.add_refund_to();\n-        refund_to->set_script(&s[0], s.size());\n-    } else {\n-        // This should never happen, because sending coins should have\n-        // just unlocked the wallet and refilled the keypool.\n-        qWarning() << \"PaymentServer::fetchPaymentACK: Error getting refund key, refund_to not set\";\n-    }\n-\n-    int length = payment.ByteSize();\n-    netRequest.setHeader(QNetworkRequest::ContentLengthHeader, length);\n-    QByteArray serData(length, '\\0');\n-    if (payment.SerializeToArray(serData.data(), length)) {\n-        netManager->post(netRequest, serData);\n-    }\n-    else {\n-        // This should never happen, either.\n-        qWarning() << \"PaymentServer::fetchPaymentACK: Error serializing payment message\";\n-    }\n-}\n-\n-void PaymentServer::netRequestFinished(QNetworkReply* reply)\n-{\n-    reply->deleteLater();\n-\n-    // BIP70 DoS protection\n-    if (!verifySize(reply->size())) {\n-        Q_EMIT message(tr(\"Payment request rejected\"),\n-            tr(\"Payment request %1 is too large (%2 bytes, allowed %3 bytes).\")\n-                .arg(reply->request().url().toString())\n-                .arg(reply->size())\n-                .arg(BIP70_MAX_PAYMENTREQUEST_SIZE),\n-            CClientUIInterface::MSG_ERROR);\n-        return;\n-    }\n-\n-    if (reply->error() != QNetworkReply::NoError) {\n-        QString msg = tr(\"Error communicating with %1: %2\")\n-            .arg(reply->request().url().toString())\n-            .arg(reply->errorString());\n-\n-        qWarning() << \"PaymentServer::netRequestFinished: \" << msg;\n-        Q_EMIT message(tr(\"Payment request error\"), msg, CClientUIInterface::MSG_ERROR);\n-        return;\n-    }\n-\n-    QByteArray data = reply->readAll();\n-\n-    QString requestType = reply->request().attribute(QNetworkRequest::User).toString();\n-    if (requestType == BIP70_MESSAGE_PAYMENTREQUEST)\n-    {\n-        PaymentRequestPlus request;\n-        SendCoinsRecipient recipient;\n-        if (!request.parse(data))\n-        {\n-            qWarning() << \"PaymentServer::netRequestFinished: Error parsing payment request\";\n-            Q_EMIT message(tr(\"Payment request error\"),\n-                tr(\"Payment request cannot be parsed!\"),\n-                CClientUIInterface::MSG_ERROR);\n-        }\n-        else if (processPaymentRequest(request, recipient))\n-            Q_EMIT receivedPaymentRequest(recipient);\n-\n-        return;\n-    }\n-    else if (requestType == BIP70_MESSAGE_PAYMENTACK)\n-    {\n-        payments::PaymentACK paymentACK;\n-        if (!paymentACK.ParseFromArray(data.data(), data.size()))\n-        {\n-            QString msg = tr(\"Bad response from server %1\")\n-                .arg(reply->request().url().toString());\n-\n-            qWarning() << \"PaymentServer::netRequestFinished: \" << msg;\n-            Q_EMIT message(tr(\"Payment request error\"), msg, CClientUIInterface::MSG_ERROR);\n-        }\n-        else\n-        {\n-            Q_EMIT receivedPaymentACK(GUIUtil::HtmlEscape(paymentACK.memo()));\n-        }\n-    }\n-}\n-\n-void PaymentServer::reportSslErrors(QNetworkReply* reply, const QList<QSslError> &errs)\n-{\n-    Q_UNUSED(reply);\n-\n-    QString errString;\n-    for (const QSslError& err : errs) {\n-        qWarning() << \"PaymentServer::reportSslErrors: \" << err;\n-        errString += err.errorString() + \"\\n\";\n-    }\n-    Q_EMIT message(tr(\"Network request error\"), errString, CClientUIInterface::MSG_ERROR);\n-}\n-\n-void PaymentServer::handlePaymentACK(const QString& paymentACKMsg)\n-{\n-    // currently we don't further process or store the paymentACK message\n-    Q_EMIT message(tr(\"Payment acknowledged\"), paymentACKMsg, CClientUIInterface::ICON_INFORMATION | CClientUIInterface::MODAL);\n-}\n-\n-bool PaymentServer::verifyNetwork(interfaces::Node& node, const payments::PaymentDetails& requestDetails)\n-{\n-    bool fVerified = requestDetails.network() == node.getNetwork();\n-    if (!fVerified) {\n-        qWarning() << QString(\"PaymentServer::%1: Payment request network \\\"%2\\\" doesn't match client network \\\"%3\\\".\")\n-            .arg(__func__)\n-            .arg(QString::fromStdString(requestDetails.network()))\n-            .arg(QString::fromStdString(node.getNetwork()));\n-    }\n-    return fVerified;\n-}\n-\n-bool PaymentServer::verifyExpired(const payments::PaymentDetails& requestDetails)\n-{\n-    bool fVerified = (requestDetails.has_expires() && (int64_t)requestDetails.expires() < GetTime());\n-    if (fVerified) {\n-        const QString requestExpires = QString::fromStdString(FormatISO8601DateTime((int64_t)requestDetails.expires()));\n-        qWarning() << QString(\"PaymentServer::%1: Payment request expired \\\"%2\\\".\")\n-            .arg(__func__)\n-            .arg(requestExpires);\n-    }\n-    return fVerified;\n-}\n-\n-bool PaymentServer::verifySize(qint64 requestSize)\n-{\n-    bool fVerified = (requestSize <= BIP70_MAX_PAYMENTREQUEST_SIZE);\n-    if (!fVerified) {\n-        qWarning() << QString(\"PaymentServer::%1: Payment request too large (%2 bytes, allowed %3 bytes).\")\n-            .arg(__func__)\n-            .arg(requestSize)\n-            .arg(BIP70_MAX_PAYMENTREQUEST_SIZE);\n-    }\n-    return fVerified;\n-}\n-\n-bool PaymentServer::verifyAmount(const CAmount& requestAmount)\n-{\n-    bool fVerified = MoneyRange(requestAmount);\n-    if (!fVerified) {\n-        qWarning() << QString(\"PaymentServer::%1: Payment request amount out of allowed range (%2, allowed 0 - %3).\")\n-            .arg(__func__)\n-            .arg(requestAmount)\n-            .arg(MAX_MONEY);\n-    }\n-    return fVerified;\n-}\n-\n-X509_STORE* PaymentServer::getCertStore()\n-{\n-    return certStore.get();\n-}\n-#endif"
      },
      {
        "sha": "8b2533508d800c48383ca3530a31a4056ed1be66",
        "filename": "src/qt/paymentserver.h",
        "status": "modified",
        "additions": 0,
        "deletions": 55,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3548e4aac72e9148d41b440052a89d89328f7661/src/qt/paymentserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3548e4aac72e9148d41b440052a89d89328f7661/src/qt/paymentserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.h?ref=3548e4aac72e9148d41b440052a89d89328f7661",
        "patch": "@@ -36,9 +36,6 @@\n #include <config/bitcoin-config.h>\n #endif\n \n-#ifdef ENABLE_BIP70\n-#include <qt/paymentrequestplus.h>\n-#endif\n #include <qt/walletmodel.h>\n \n #include <QObject>\n@@ -50,15 +47,9 @@ QT_BEGIN_NAMESPACE\n class QApplication;\n class QByteArray;\n class QLocalServer;\n-class QNetworkAccessManager;\n-class QNetworkReply;\n-class QSslError;\n class QUrl;\n QT_END_NAMESPACE\n \n-// BIP70 max payment request size in bytes (DoS protection)\n-static const qint64 BIP70_MAX_PAYMENTREQUEST_SIZE = 50000;\n-\n class PaymentServer : public QObject\n {\n     Q_OBJECT\n@@ -82,39 +73,13 @@ class PaymentServer : public QObject\n     // OptionsModel is used for getting proxy settings and display unit\n     void setOptionsModel(OptionsModel *optionsModel);\n \n-#ifdef ENABLE_BIP70\n-    // Load root certificate authorities. Pass nullptr (default)\n-    // to read from the file specified in the -rootcertificates setting,\n-    // or, if that's not set, to use the system default root certificates.\n-    // If you pass in a store, you should not X509_STORE_free it: it will be\n-    // freed either at exit or when another set of CAs are loaded.\n-    static void LoadRootCAs(X509_STORE* store = nullptr);\n-\n-    // Return certificate store\n-    static X509_STORE* getCertStore();\n-\n-    // Verify that the payment request network matches the client network\n-    static bool verifyNetwork(interfaces::Node& node, const payments::PaymentDetails& requestDetails);\n-    // Verify if the payment request is expired\n-    static bool verifyExpired(const payments::PaymentDetails& requestDetails);\n-    // Verify the payment request size is valid as per BIP70\n-    static bool verifySize(qint64 requestSize);\n-    // Verify the payment request amount is valid\n-    static bool verifyAmount(const CAmount& requestAmount);\n-#endif\n-\n Q_SIGNALS:\n     // Fired when a valid payment request is received\n     void receivedPaymentRequest(SendCoinsRecipient);\n \n     // Fired when a message should be reported to the user\n     void message(const QString &title, const QString &message, unsigned int style);\n \n-#ifdef ENABLE_BIP70\n-    // Fired when a valid PaymentACK is received\n-    void receivedPaymentACK(const QString &paymentACKMsg);\n-#endif\n-\n public Q_SLOTS:\n     // Signal this when the main window's UI is ready\n     // to display payment requests to the user\n@@ -123,18 +88,8 @@ public Q_SLOTS:\n     // Handle an incoming URI, URI with local file scheme or file\n     void handleURIOrFile(const QString& s);\n \n-#ifdef ENABLE_BIP70\n-    // Submit Payment message to a merchant, get back PaymentACK:\n-    void fetchPaymentACK(WalletModel* walletModel, const SendCoinsRecipient& recipient, QByteArray transaction);\n-#endif\n-\n private Q_SLOTS:\n     void handleURIConnection();\n-#ifdef ENABLE_BIP70\n-    void netRequestFinished(QNetworkReply*);\n-    void reportSslErrors(QNetworkReply*, const QList<QSslError> &);\n-    void handlePaymentACK(const QString& paymentACKMsg);\n-#endif\n \n protected:\n     // Constructor registers this on the parent QApplication to\n@@ -145,16 +100,6 @@ private Q_SLOTS:\n     bool saveURIs;                      // true during startup\n     QLocalServer* uriServer;\n     OptionsModel *optionsModel;\n-\n-#ifdef ENABLE_BIP70\n-    static bool readPaymentRequestFromFile(const QString& filename, PaymentRequestPlus& request);\n-    bool processPaymentRequest(const PaymentRequestPlus& request, SendCoinsRecipient& recipient);\n-    void fetchRequest(const QUrl& url);\n-\n-    // Setup networking\n-    void initNetManager();\n-    QNetworkAccessManager* netManager;  // Used to fetch payment requests\n-#endif\n };\n \n #endif // BITCOIN_QT_PAYMENTSERVER_H"
      },
      {
        "sha": "8edcca684d0b183065367299dde11ec22c2cbfdd",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 14,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3548e4aac72e9148d41b440052a89d89328f7661/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3548e4aac72e9148d41b440052a89d89328f7661/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=3548e4aac72e9148d41b440052a89d89328f7661",
        "patch": "@@ -291,9 +291,6 @@ void SendCoinsDialog::on_sendButton_clicked()\n \n         QString recipientElement;\n \n-#ifdef ENABLE_BIP70\n-        if (!rcp.paymentRequest.IsInitialized()) // normal payment\n-#endif\n         {\n             if(rcp.label.length() > 0) // label with address\n             {\n@@ -305,17 +302,6 @@ void SendCoinsDialog::on_sendButton_clicked()\n                 recipientElement.append(tr(\"%1 to %2\").arg(amount, address));\n             }\n         }\n-#ifdef ENABLE_BIP70\n-        else if(!rcp.authenticatedMerchant.isEmpty()) // authenticated payment request\n-        {\n-            recipientElement.append(tr(\"%1 to '%2'\").arg(amount, rcp.authenticatedMerchant));\n-        }\n-        else // unauthenticated payment request\n-        {\n-            recipientElement.append(tr(\"%1 to %2\").arg(amount, address));\n-        }\n-#endif\n-\n         formatted.append(recipientElement);\n     }\n "
      },
      {
        "sha": "be417655b4139c1688621a2460d3c901cedfc016",
        "filename": "src/qt/sendcoinsentry.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 36,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3548e4aac72e9148d41b440052a89d89328f7661/src/qt/sendcoinsentry.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3548e4aac72e9148d41b440052a89d89328f7661/src/qt/sendcoinsentry.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsentry.cpp?ref=3548e4aac72e9148d41b440052a89d89328f7661",
        "patch": "@@ -137,12 +137,6 @@ bool SendCoinsEntry::validate(interfaces::Node& node)\n     // Check input validity\n     bool retval = true;\n \n-#ifdef ENABLE_BIP70\n-    // Skip checks for payment request\n-    if (recipient.paymentRequest.IsInitialized())\n-        return retval;\n-#endif\n-\n     if (!model->validateAddress(ui->payTo->text()))\n     {\n         ui->payTo->setValid(false);\n@@ -172,13 +166,6 @@ bool SendCoinsEntry::validate(interfaces::Node& node)\n \n SendCoinsRecipient SendCoinsEntry::getValue()\n {\n-#ifdef ENABLE_BIP70\n-    // Payment request\n-    if (recipient.paymentRequest.IsInitialized())\n-        return recipient;\n-#endif\n-\n-    // Normal payment\n     recipient.address = ui->payTo->text();\n     recipient.label = ui->addAsLabel->text();\n     recipient.amount = ui->payAmount->value();\n@@ -203,29 +190,6 @@ QWidget *SendCoinsEntry::setupTabChain(QWidget *prev)\n void SendCoinsEntry::setValue(const SendCoinsRecipient &value)\n {\n     recipient = value;\n-\n-#ifdef ENABLE_BIP70\n-    if (recipient.paymentRequest.IsInitialized()) // payment request\n-    {\n-        if (recipient.authenticatedMerchant.isEmpty()) // unauthenticated\n-        {\n-            ui->payTo_is->setText(recipient.address);\n-            ui->memoTextLabel_is->setText(recipient.message);\n-            ui->payAmount_is->setValue(recipient.amount);\n-            ui->payAmount_is->setReadOnly(true);\n-            setCurrentWidget(ui->SendCoins_UnauthenticatedPaymentRequest);\n-        }\n-        else // authenticated\n-        {\n-            ui->payTo_s->setText(recipient.authenticatedMerchant);\n-            ui->memoTextLabel_s->setText(recipient.message);\n-            ui->payAmount_s->setValue(recipient.amount);\n-            ui->payAmount_s->setReadOnly(true);\n-            setCurrentWidget(ui->SendCoins_AuthenticatedPaymentRequest);\n-        }\n-    }\n-    else // normal payment\n-#endif\n     {\n         // message\n         ui->messageTextLabel->setText(recipient.message);"
      },
      {
        "sha": "cf86a5bc1eaed699c905e597b1bd5e099438279b",
        "filename": "src/qt/test/compattests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3548e4aac72e9148d41b440052a89d89328f7661/src/qt/test/compattests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3548e4aac72e9148d41b440052a89d89328f7661/src/qt/test/compattests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/compattests.cpp?ref=3548e4aac72e9148d41b440052a89d89328f7661",
        "patch": "@@ -6,10 +6,6 @@\n #include <config/bitcoin-config.h>\n #endif\n \n-#if defined(ENABLE_WALLET) && defined(ENABLE_BIP70)\n-#include <qt/paymentrequestplus.h> // this includes protobuf's port.h which defines its own bswap macos\n-#endif\n-\n #include <qt/test/compattests.h>\n \n #include <compat/byteswap.h>"
      },
      {
        "sha": "7f45d30973a4f15757824d46a31f4831fc34b5b9",
        "filename": "src/qt/test/paymentrequestdata.h",
        "status": "removed",
        "additions": 0,
        "deletions": 465,
        "changes": 465,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1cb9a4e28cccd3056e2b8d9cdabc45bf3e4dd2a6/src/qt/test/paymentrequestdata.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1cb9a4e28cccd3056e2b8d9cdabc45bf3e4dd2a6/src/qt/test/paymentrequestdata.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/paymentrequestdata.h?ref=1cb9a4e28cccd3056e2b8d9cdabc45bf3e4dd2a6",
        "patch": "@@ -1,465 +0,0 @@\n-// Copyright (c) 2009-2018 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#ifndef BITCOIN_QT_TEST_PAYMENTREQUESTDATA_H\n-#define BITCOIN_QT_TEST_PAYMENTREQUESTDATA_H\n-\n-//\n-// Data for paymentservertests.cpp\n-//\n-\n-// Base64/DER-encoded fake certificate authority certificates.\n-// Convert pem to base64/der with:\n-// openssl x509 -in cert.pem -inform PEM -outform DER | openssl enc -base64\n-\n-// Serial Number: 10302349811211485352 (0x8ef94c91b112c0a8)\n-// Issuer: CN=PaymentRequest Test CA\n-// Subject: CN=PaymentRequest Test CA\n-// Not Valid After : Dec  8 16:37:24 2022 GMT\n-//\n-const char* caCert1_BASE64 =\n-\"\\\n-MIIB0DCCATmgAwIBAgIJAI75TJGxEsCoMA0GCSqGSIb3DQEBCwUAMCExHzAdBgNV\\\n-BAMTFlBheW1lbnRSZXF1ZXN0IFRlc3QgQ0EwHhcNMTIxMjEwMTYzNzI0WhcNMjIx\\\n-MjA4MTYzNzI0WjAhMR8wHQYDVQQDExZQYXltZW50UmVxdWVzdCBUZXN0IENBMIGf\\\n-MA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCvua59nX9radoqDYyplcns5qdVDTN1\\\n-7tmcGixmMYOYU3UYMU55VSsJs0dWKnMm3COQDY+N63c0XSbRqarBcsLTkaNASuPX\\\n-FCv1VWuEKSyy5xe4zeoDU7CVSzlxtQD9wbZW/s3ISjgaXBpwn6eVmntb0JwYxxPc\\\n-M1u/hrMD8BDbSQIDAQABoxAwDjAMBgNVHRMEBTADAQH/MA0GCSqGSIb3DQEBCwUA\\\n-A4GBADSaRgK5xe47XxycXBhHhr0Wgl4pAsFsufqA9aB9r8KNEHJ0yUvvbD/jaJJM\\\n-RtQcf0AJ9olzUMY4syehxbzUJP6aeXhZEYiMvdvcv9D55clq6+WLLlNT3jBgAaVn\\\n-p3waRjPD4bUX3nv+ojz5s4puw7Qq5QUZlhGsMzPvwDGCmZkL\\\n-\";\n-\n-// Serial Number: f0:da:97:e4:38:d7:64:16\n-// Issuer: CN=PaymentRequest Test CA\n-// Subject: CN=PaymentRequest Test CA\n-// Not Valid After : Jan  8 18:21:06 2025 GMT\n-//\n-const char* caCert2_BASE64 =\n-\"\\\n-MIIC1TCCAb2gAwIBAgIJAPDal+Q412QWMA0GCSqGSIb3DQEBCwUAMCExHzAdBgNV\\\n-BAMMFlBheW1lbnRSZXF1ZXN0IFRlc3QgQ0EwHhcNMTUwMTExMTgyMTA2WhcNMjUw\\\n-MTA4MTgyMTA2WjAhMR8wHQYDVQQDDBZQYXltZW50UmVxdWVzdCBUZXN0IENBMIIB\\\n-IjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA1S9wVLfTplJuT/1OaaBgl/Mb\\\n-I392v8S9kHbzYz7B4OTMslaO7piz0v3SO3TKMh0dswjiRdHrIgpO7XdIUQiU/ugg\\\n-xDw0kuNehfz1ycaGedlFFtFHTNXqLyIUF3dlwHhQwaomM6RXoJmxLny5BhYHEcmk\\\n-yWwr3Cdjd9gAZpblugVJB9C1e40uyL8ao4PHdLzOqO27iSe6riP8SwwisJZEbMaz\\\n-AZpgNEEMbIXPJEFvm5HTRXSMtQCOTSZYMFF0M2yrtmlECnz7hWP19b9bcoDzZQB4\\\n-ylIsFG/7q2jV7MC/e2STZv+niJiHL08RUdoFpAgzaxMgqj63C7B55HgNDNHJYQID\\\n-AQABoxAwDjAMBgNVHRMEBTADAQH/MA0GCSqGSIb3DQEBCwUAA4IBAQBGejPxLxj9\\\n-+crv6gUeEBMZPiUx7pUgcI22Wm5yymP96B4fwI3Y0DBehq20d76vbWGPN17Z6pH3\\\n-ge7PVY1SYqXtS6hXTo4olCm/BZADli+2Bs2xCiaa+Ltve4ufVej+bKJXN/YnrhvO\\\n-Kq+klQkuuHywU+GJV/NQeBqToIrSOBgi477NgLFCCCmmx2QWsxHoCFGfuRCBVseT\\\n-z2k/tMuALCDXGeZBRPTsGHu1y4cj84swAeoDK5QSQcI+Ub7GKc+zkoj02sdDLiMo\\\n-3wokYPcIy47oclhmb4xubHc+y7nF610yZBoC/zgbhbawnZ65hDDWkdQ/SVAnWZD7\\\n-9PFfmNnYPTQH\\\n-\";\n-\n-//\n-// This payment request validates directly against the\n-// caCert1 certificate authority.\n-//\n-const char* paymentrequest1_cert1_BASE64 =\n-\"\\\n-Egt4NTA5K3NoYTI1NhrxAwruAzCCAeowggFToAMCAQICAQEwDQYJKoZIhvcNAQEL\\\n-BQAwITEfMB0GA1UEAxMWUGF5bWVudFJlcXVlc3QgVGVzdCBDQTAeFw0xMjEyMTAx\\\n-NjM3MjRaFw0yMjEyMDgxNjM3MjRaMEMxGTAXBgNVBAMMEHRlc3RtZXJjaGFudC5v\\\n-cmcxJjAkBgNVBAoMHVBheW1lbnQgUmVxdWVzdCBUZXN0IE1lcmNoYW50MIGfMA0G\\\n-CSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHkMy8W1u6HsWlSqdWTmMKf54gICxNfxbY\\\n-+rcMtAftr62hCYx2d2QiSRd1pCUzmo12IiSX3WxSHwaTnT3MFD6jRx6+zM6XdGar\\\n-I2zpYle11ANzu4gAthN17uRQHV2O5QxVtzNaMdKeJLXT2L9tfEdyL++9ZUqoQmdA\\\n-YG9ix330hQIDAQABoxAwDjAMBgNVHRMEBTADAQH/MA0GCSqGSIb3DQEBCwUAA4GB\\\n-AIkyO99KC68bi9PFRyQQ7nvn5GlQEb3Ca1bRG5+AKN9N5vc8rZ9G2hejtM8wEXni\\\n-eGBP+chVMsbTPEHKLrwREn7IvcyCcbAStaklPC3w0B/2idQSHskb6P3X13OR2bTH\\\n-a2+6wuhsOZRUrVNr24rM95DKx/eCC6JN1VW+qRPU6fqzIjQSHwiw2wYSGXapFJVg\\\n-igPI+6XpExtNLO/i1WFV8ZmoiKwYsuHFiwUqC1VuaXRUZXN0T25lKoABS0j59iMU\\\n-Uc9MdIfwsO1BskIET0eJSGNZ7eXb9N62u+qf831PMpEHkmlGpk8rHy92nPcgua/U\\\n-Yt8oZMn3QaTZ5A6HjJbc3A73eLylp1a0SwCl+KDMEvDQhqMn1jAVu2v92AH3uB7n\\\n-SiWVbw0tX/68iSQEGGfh9n6ee/8Myb3ICdw=\\\n-\";\n-\n-//\n-// Signed, but expired, merchant cert in the request\n-//\n-const char* paymentrequest2_cert1_BASE64 =\n-\"\\\n-Egt4NTA5K3NoYTI1NhrsAwrpAzCCAeUwggFOoAMCAQICAQMwDQYJKoZIhvcNAQEL\\\n-BQAwITEfMB0GA1UEAxMWUGF5bWVudFJlcXVlc3QgVGVzdCBDQTAeFw0xMzAyMjMy\\\n-MTI2NDNaFw0xMzAyMjQyMTI2NDNaMD4xHDAaBgNVBAMME2V4cGlyZWRtZXJjaGFu\\\n-dC5vcmcxHjAcBgNVBAoMFUV4cGlyZWQgVGVzdCBNZXJjaGFudDCBnzANBgkqhkiG\\\n-9w0BAQEFAAOBjQAwgYkCgYEAx5DMvFtbuh7FpUqnVk5jCn+eICAsTX8W2Pq3DLQH\\\n-7a+toQmMdndkIkkXdaQlM5qNdiIkl91sUh8Gk509zBQ+o0cevszOl3RmqyNs6WJX\\\n-tdQDc7uIALYTde7kUB1djuUMVbczWjHSniS109i/bXxHci/vvWVKqEJnQGBvYsd9\\\n-9IUCAwEAAaMQMA4wDAYDVR0TBAUwAwEB/zANBgkqhkiG9w0BAQsFAAOBgQAaU137\\\n-j53rvSjlmYZpZ4RWTP7EdD6fl5ZxBeXHytN6DQL33H0eD7OFHt+ofc7E6D7keubl\\\n-UfCu+jOvt/MvvPUmtCI9yXZ0dNC4sjyETv+wQpxO0UNZwOM4uegdCzlo6Bi3pD4/\\\n-KKLdMkWuUfuPBmoammny74lZaOVr5deKXztTuCI0Eh8IsNsGEhl2qRSVYIoDyPul\\\n-6RMbTSzv4tVhVfGZqIisGLLhxYsFKgtVbml0VGVzdFR3byqAAXHuo4nZEPniLpkd\\\n-y30TkwBxVgprWJ18a9z/7Py35Qss/JMbOXbnBhJtmJCdIowHRI0aa+zqt3KKKAXi\\\n-mm+V4seMgxTcxMS+eDDkiTcB/RtWWSyRcS2ANjFeY0T4SLMwiCL9qWPi03hr8j96\\\n-tejrSPOBNSJ3Mi/q5u2Yl4gJZY2b\\\n-\";\n-\n-//\n-// 10-long certificate chain, all intermediates valid\n-//\n-const char* paymentrequest3_cert1_BASE64 =\n-\"\\\n-Egt4NTA5K3NoYTI1Nhq8JAr/AzCCAfswggFkoAMCAQICAQEwDQYJKoZIhvcNAQEL\\\n-BQAwPzEUMBIGA1UEAwwLdGVzdGNhOC5vcmcxJzAlBgNVBAoMHlBheW1lbnQgUmVx\\\n-dWVzdCBJbnRlcm1lZGlhdGUgODAeFw0xMzAyMjMyMjQyMzFaFw0yMzAyMjEyMjQy\\\n-MzFaMDYxGjAYBgNVBAMMEXRlc3RtZXJjaGFudDgub3JnMRgwFgYDVQQKDA9UZXN0\\\n-IE1lcmNoYW50IDgwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAMMCHA3hiHbS\\\n-TKZ5K9jHRwE8NxkGp3IOx56PDB2diNkldG8XweTcRq7bBm7pdiBt4IVggtfs+6hE\\\n-hDYIOecyoAnVzPFTdvQ7KQdQ/fD9YLe6lk+o0edOqutPMyrxLFjSluXxEQyk7fdt\\\n-URloMMYfp3p1/hFCboA1rAsQ2RW38hR5AgMBAAGjEDAOMAwGA1UdEwQFMAMBAf8w\\\n-DQYJKoZIhvcNAQELBQADgYEAPsdFatnc2RJSpvZsw+nCiPVsllycw5ELglq9vfJz\\\n-nJJucRxgzmqI2iuas1ugwbXn0BEIRLK7vMF/qBzQR6M/nTxttah+KEu+okjps9vJ\\\n-cIyhfTyGPC5xkHaHZ7sG+UHOFhPw0/kXn0x+pbVgBZ5315axqcp1R+DTSj/whMAr\\\n-n0AKiAQwggIEMIIBbaADAgECAgECMA0GCSqGSIb3DQEBCwUAMD8xFDASBgNVBAMM\\\n-C3Rlc3RjYTcub3JnMScwJQYDVQQKDB5QYXltZW50IFJlcXVlc3QgSW50ZXJtZWRp\\\n-YXRlIDcwHhcNMTMwMjIzMjI0MjMxWhcNMjMwMjIxMjI0MjMxWjA/MRQwEgYDVQQD\\\n-DAt0ZXN0Y2E4Lm9yZzEnMCUGA1UECgweUGF5bWVudCBSZXF1ZXN0IEludGVybWVk\\\n-aWF0ZSA4MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDexUFfxb1sThvabp7u\\\n-dZz59ciThGmmAW0nP4tjrgEACgvWIInr2dZpTHbiQNF34ycsk0le1JD93D7Qb8rd\\\n-25OrpaO8XS2Li2zjR9cleixXjSLwV/zv8zJ8yPl/27XL++PDTKBXVpJ8/Syp+9Ty\\\n-plV1BqDhqtIHb/QSHEkTQXjeYQIDAQABoxAwDjAMBgNVHRMEBTADAQH/MA0GCSqG\\\n-SIb3DQEBCwUAA4GBACMooQVbkbIZ2DaPwHDc4ULwguG3VI2Kzj50UdExmHtzm2S4\\\n-MQei+n+HEPjtJAx5OY520+10nfuP+12H2DRLQmWmdvDpeQ/Cv0yavlw4ZRejRFo7\\\n-KS83C0wo5rd+qTvvOmAN4UTArWkzYcEUulPdiXnRamb0WQHTeVdIbHVkMormCogE\\\n-MIICBDCCAW2gAwIBAgIBAjANBgkqhkiG9w0BAQsFADA/MRQwEgYDVQQDDAt0ZXN0\\\n-Y2E2Lm9yZzEnMCUGA1UECgweUGF5bWVudCBSZXF1ZXN0IEludGVybWVkaWF0ZSA2\\\n-MB4XDTEzMDIyMzIyNDIzMVoXDTIzMDIyMTIyNDIzMVowPzEUMBIGA1UEAwwLdGVz\\\n-dGNhNy5vcmcxJzAlBgNVBAoMHlBheW1lbnQgUmVxdWVzdCBJbnRlcm1lZGlhdGUg\\\n-NzCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEAtjBRazrkebXAhXsbjimrMIRm\\\n-W/f9SwAHwXfc042keNtl0t2z6XE6UPcR2v/KrssXuCZgodeYxz6IM6lWosCM1xot\\\n-C3ChKKFBfVO30reuKBRUxXfKAFqxaG0YOAEzdZkkY9AGhqWloeSmgxpIfhInU0EF\\\n-JjCwrJ6IkijBatGoAAECAwEAAaMQMA4wDAYDVR0TBAUwAwEB/zANBgkqhkiG9w0B\\\n-AQsFAAOBgQDBRTi1MolmOA0niHYX0A2lN5QWHkCfX0A7GwyoMA3dvM45m/NYd4WB\\\n-X+HwfnfYcI6X9jOgNo5OWmc4GGsld0HlxwMYEKISBS9PbSHPBrb3TBOlw5ztQpXZ\\\n-91+bOhLux52Fr03sK7v9qExmBM12M8UR2ltpzAMiUgLLMHyPfiWkvQqIBDCCAgQw\\\n-ggFtoAMCAQICAQIwDQYJKoZIhvcNAQELBQAwPzEUMBIGA1UEAwwLdGVzdGNhNS5v\\\n-cmcxJzAlBgNVBAoMHlBheW1lbnQgUmVxdWVzdCBJbnRlcm1lZGlhdGUgNTAeFw0x\\\n-MzAyMjMyMjQyMzBaFw0yMzAyMjEyMjQyMzBaMD8xFDASBgNVBAMMC3Rlc3RjYTYu\\\n-b3JnMScwJQYDVQQKDB5QYXltZW50IFJlcXVlc3QgSW50ZXJtZWRpYXRlIDYwgZ8w\\\n-DQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBANJSH3xivX1t9olIdHsznI1aE9SD7t9i\\\n-SZJsIB0otoETHZRVv9M9LvyzBNK98ZV+kTOlST7PJgC0d9BQM9sgYApSRq5oqKDM\\\n-9FXbOm/yaReAbU3mkFNFw5roTlJ5ThEy0yOGT/DS0YBRaGIvRPRj2DiqDVdCZZ+w\\\n-4jo1IYHkZt4FAgMBAAGjEDAOMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQELBQAD\\\n-gYEATm6+J1OmbrothO60xALKonWMBKr6hudb4amkFBqKbA9wMeM3jl+I/yKfz/Uf\\\n-xWuJ071IhiNv6Gxx5YwNvhUe1xMhUqHv0gpyK1Z47bD+kYS2se5sWNPNo3Y9qZDG\\\n-IXiGQxwHmrzaFk79Uy1xsmvsEz42w6hr25Yaw7HkIgrFveoKiAQwggIEMIIBbaAD\\\n-AgECAgECMA0GCSqGSIb3DQEBCwUAMD8xFDASBgNVBAMMC3Rlc3RjYTQub3JnMScw\\\n-JQYDVQQKDB5QYXltZW50IFJlcXVlc3QgSW50ZXJtZWRpYXRlIDQwHhcNMTMwMjIz\\\n-MjI0MjMwWhcNMjMwMjIxMjI0MjMwWjA/MRQwEgYDVQQDDAt0ZXN0Y2E1Lm9yZzEn\\\n-MCUGA1UECgweUGF5bWVudCBSZXF1ZXN0IEludGVybWVkaWF0ZSA1MIGfMA0GCSqG\\\n-SIb3DQEBAQUAA4GNADCBiQKBgQC7vVUFpxHzz2Tr/xij3k58s8d/BPA0R6D5RXTV\\\n-vmhAzc1Zuin4zUKRFs/aCj/0yED8Wu/COfNGF4tVlRNMdl9EcFsxa8XGEL4eAZa+\\\n-H/rOHH+7/1EINrrVWhZlUecyhilN8jmCZmqEM3ecuD0NAViqyMrgmaiFmsLoQZpE\\\n-GepDUQIDAQABoxAwDjAMBgNVHRMEBTADAQH/MA0GCSqGSIb3DQEBCwUAA4GBAEdJ\\\n-Ss8jWiooja3WZzHXeF95QkBJNjIlpDLGcpl4opOYLSuEl9Uxp//LaQQiXuzpj4/I\\\n-pkWGQmMy5HOyH1lqDyiMgXpcG8PE0jEQAoEUGZ0QEqB1mZ6BCrYvmUuf/5aSVd8Y\\\n-6lKMR3WzFDYU9Zy0nzuHB/3nvp6MeDRQeRMtYvz4CogEMIICBDCCAW2gAwIBAgIB\\\n-AjANBgkqhkiG9w0BAQsFADA/MRQwEgYDVQQDDAt0ZXN0Y2EzLm9yZzEnMCUGA1UE\\\n-CgweUGF5bWVudCBSZXF1ZXN0IEludGVybWVkaWF0ZSAzMB4XDTEzMDIyMzIyNDIy\\\n-OVoXDTIzMDIyMTIyNDIyOVowPzEUMBIGA1UEAwwLdGVzdGNhNC5vcmcxJzAlBgNV\\\n-BAoMHlBheW1lbnQgUmVxdWVzdCBJbnRlcm1lZGlhdGUgNDCBnzANBgkqhkiG9w0B\\\n-AQEFAAOBjQAwgYkCgYEAxYYo3w2UXiYg6O8b4QgwN/vgreTkiW122Ep/z2TiDrhV\\\n-MhfOOiKdwYESPflfnXnVaQQzCGexYTQqsvqvzHSyna5hL0zPTRJxSKmTVrXRsWtp\\\n-dCRhjxCGipS3tlQBDi7vb+7SNRIBK4dBjjGzALNk7gMCpy+yM8f6I043jTlmGb0C\\\n-AwEAAaMQMA4wDAYDVR0TBAUwAwEB/zANBgkqhkiG9w0BAQsFAAOBgQDU+IQxt3Oh\\\n-KqaUYWC23+cB2gekvWqwMBnrCNrX/Dp+kjoJKUoR2Fs3qw53raHES4SIhpGT9l9l\\\n-rppNQgFe/JMHeYqOZMZO+6kuU0olJanBJ14tPIc7zlMTQ9OfmZ6v07IpyFbsQDtR\\\n-hpe80DpuvSFPfJ4fh0WrQf6kn3KDVpGDnAqIBDCCAgQwggFtoAMCAQICAQIwDQYJ\\\n-KoZIhvcNAQELBQAwPzEUMBIGA1UEAwwLdGVzdGNhMi5vcmcxJzAlBgNVBAoMHlBh\\\n-eW1lbnQgUmVxdWVzdCBJbnRlcm1lZGlhdGUgMjAeFw0xMzAyMjMyMjQyMjlaFw0y\\\n-MzAyMjEyMjQyMjlaMD8xFDASBgNVBAMMC3Rlc3RjYTMub3JnMScwJQYDVQQKDB5Q\\\n-YXltZW50IFJlcXVlc3QgSW50ZXJtZWRpYXRlIDMwgZ8wDQYJKoZIhvcNAQEBBQAD\\\n-gY0AMIGJAoGBANzgVP99Qg98e6NsKEz1v5KqRB7NTBRRsYnBvb/TSWipvMQaCYuE\\\n-yk1xG57x++QuASKeR3QHRQJOoAhQaj9JLUhSSv9GQ5PrFLLsOFv7L1tpzXHh2dOB\\\n-IW92X2yFRW2s39q+Q21yvN+N8uoKdqXhzRA+dDoXh3cavaVeHX1G+IrlAgMBAAGj\\\n-EDAOMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQELBQADgYEASTwg84cX+1UhOG9s\\\n-ejFV3m34QuI1hPZ+qhqVJlRYUtego8Wng1BburDSwqVAv4ch2wi3c2s4e8J7AXyL\\\n-tzSbSQG4RN0oZi0mR8EtTTN+Mix/hBIk79dMZg85+I29uFA6Zj2d9oAhQv2qkHhc\\\n-6tcaheNvkQRlCyH68k3iF1Fqf+4KiAQwggIEMIIBbaADAgECAgECMA0GCSqGSIb3\\\n-DQEBCwUAMD8xFDASBgNVBAMMC3Rlc3RjYTEub3JnMScwJQYDVQQKDB5QYXltZW50\\\n-IFJlcXVlc3QgSW50ZXJtZWRpYXRlIDEwHhcNMTMwMjIzMjI0MjI5WhcNMjMwMjIx\\\n-MjI0MjI5WjA/MRQwEgYDVQQDDAt0ZXN0Y2EyLm9yZzEnMCUGA1UECgweUGF5bWVu\\\n-dCBSZXF1ZXN0IEludGVybWVkaWF0ZSAyMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCB\\\n-iQKBgQDaV8zhfyQuSf/f+fauMfgs3g/RnWy9yxxUkvQneQQPH3uZzCyk3A6q72ip\\\n-TtwNqiibG9455L9A7SaUjGtnpUz0NKT/VWUdqbfCl1PqXjEZbDobbAQ5hxLGOTyL\\\n-RQhLIcgeq2/BnmeCqHsC4md04nUp+nBo1HwKyygvK+9sMbCp/wIDAQABoxAwDjAM\\\n-BgNVHRMEBTADAQH/MA0GCSqGSIb3DQEBCwUAA4GBACvYyE+PPmWFkbjyRu9LAt8D\\\n-crtyYYLRClKSg6tVvutwukLG2l//kDOohYkJtgTqr6LnCIIIwYdXN+4wxugmw4cn\\\n-PIZmP6kovxjhhVM95okilor1zniTAo3RN7JDIfTGNgxLdGu1btt7DOFL4zTbeSJM\\\n-b8M1JpPftehH+x/VLyuUCuoDMIIB5jCCAU+gAwIBAgIBBTANBgkqhkiG9w0BAQsF\\\n-ADAhMR8wHQYDVQQDExZQYXltZW50UmVxdWVzdCBUZXN0IENBMB4XDTEzMDIyMzIy\\\n-NDIyOFoXDTIzMDIyMTIyNDIyOFowPzEUMBIGA1UEAwwLdGVzdGNhMS5vcmcxJzAl\\\n-BgNVBAoMHlBheW1lbnQgUmVxdWVzdCBJbnRlcm1lZGlhdGUgMTCBnzANBgkqhkiG\\\n-9w0BAQEFAAOBjQAwgYkCgYEAo5Vy9H3nA/OOkF5Ap89yfVNSiTay/LYCaB0eALpc\\\n-U690U75O9Q3w2M+2AN8wpbbHsJHZMIjEeBRoQfjlYXW1ucQTxWKyT+liu0D25mGX\\\n-X27CBXBd4iXTxVII/iX+u3lcjORjoHOBy7QgeIDIIS9y0vYu8eArpjh7m4thrVgI\\\n-RtMCAwEAAaMQMA4wDAYDVR0TBAUwAwEB/zANBgkqhkiG9w0BAQsFAAOBgQB9LKcV\\\n-JK9sjASNzpQlpUp7nCiw5FSjVY+XMRIKK/kavzlKjZ+InsmmyRVGjDoZi9GrqG9P\\\n-VHgLBxi2VtVjmokZoNPqao3OfhqORAubC+JR/JLepM7aDaxDdTHVhSUk4lgNAvi2\\\n-6dGY7nZMsnHlPQ2tPp/HvRRiMq1oDjlylc8VTCI2Eh8IsNsGEhl2qRSVYIoDyPul\\\n-6RMbTSzv4tVhVfGZqIisGLLhxYsFKg1Vbml0VGVzdFRocmVlKoABn2HTsUQtMNI4\\\n-yNvkfkFNka3pRvTUTydJrvyfmEeLzImfM1BWddZjnywku9RToNFZZNgow5QnljmF\\\n-chhR/aHOuEMTxmc12K4rNlgYtHCsxLP9zd+6u0cva3TucZ6EzS8PKEib/+r12/52\\\n-664NuWA9WtsK7QCFrK2K95PnVCRmWl0=\\\n-\";\n-\n-//\n-// Long certificate chain, with an expired certificate in the middle\n-//\n-const char* paymentrequest4_cert1_BASE64 =\n-\"\\\n-Egt4NTA5K3NoYTI1NhqeJAr/AzCCAfswggFkoAMCAQICAQEwDQYJKoZIhvcNAQEL\\\n-BQAwPzEUMBIGA1UEAwwLdGVzdGNhOC5vcmcxJzAlBgNVBAoMHlBheW1lbnQgUmVx\\\n-dWVzdCBJbnRlcm1lZGlhdGUgODAeFw0xMzAyMjMyMjQyMzFaFw0yMzAyMjEyMjQy\\\n-MzFaMDYxGjAYBgNVBAMMEXRlc3RtZXJjaGFudDgub3JnMRgwFgYDVQQKDA9UZXN0\\\n-IE1lcmNoYW50IDgwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAMMCHA3hiHbS\\\n-TKZ5K9jHRwE8NxkGp3IOx56PDB2diNkldG8XweTcRq7bBm7pdiBt4IVggtfs+6hE\\\n-hDYIOecyoAnVzPFTdvQ7KQdQ/fD9YLe6lk+o0edOqutPMyrxLFjSluXxEQyk7fdt\\\n-URloMMYfp3p1/hFCboA1rAsQ2RW38hR5AgMBAAGjEDAOMAwGA1UdEwQFMAMBAf8w\\\n-DQYJKoZIhvcNAQELBQADgYEAPsdFatnc2RJSpvZsw+nCiPVsllycw5ELglq9vfJz\\\n-nJJucRxgzmqI2iuas1ugwbXn0BEIRLK7vMF/qBzQR6M/nTxttah+KEu+okjps9vJ\\\n-cIyhfTyGPC5xkHaHZ7sG+UHOFhPw0/kXn0x+pbVgBZ5315axqcp1R+DTSj/whMAr\\\n-n0AKiAQwggIEMIIBbaADAgECAgECMA0GCSqGSIb3DQEBCwUAMD8xFDASBgNVBAMM\\\n-C3Rlc3RjYTcub3JnMScwJQYDVQQKDB5QYXltZW50IFJlcXVlc3QgSW50ZXJtZWRp\\\n-YXRlIDcwHhcNMTMwMjIzMjI0MjMxWhcNMjMwMjIxMjI0MjMxWjA/MRQwEgYDVQQD\\\n-DAt0ZXN0Y2E4Lm9yZzEnMCUGA1UECgweUGF5bWVudCBSZXF1ZXN0IEludGVybWVk\\\n-aWF0ZSA4MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDexUFfxb1sThvabp7u\\\n-dZz59ciThGmmAW0nP4tjrgEACgvWIInr2dZpTHbiQNF34ycsk0le1JD93D7Qb8rd\\\n-25OrpaO8XS2Li2zjR9cleixXjSLwV/zv8zJ8yPl/27XL++PDTKBXVpJ8/Syp+9Ty\\\n-plV1BqDhqtIHb/QSHEkTQXjeYQIDAQABoxAwDjAMBgNVHRMEBTADAQH/MA0GCSqG\\\n-SIb3DQEBCwUAA4GBACMooQVbkbIZ2DaPwHDc4ULwguG3VI2Kzj50UdExmHtzm2S4\\\n-MQei+n+HEPjtJAx5OY520+10nfuP+12H2DRLQmWmdvDpeQ/Cv0yavlw4ZRejRFo7\\\n-KS83C0wo5rd+qTvvOmAN4UTArWkzYcEUulPdiXnRamb0WQHTeVdIbHVkMormCogE\\\n-MIICBDCCAW2gAwIBAgIBAjANBgkqhkiG9w0BAQsFADA/MRQwEgYDVQQDDAt0ZXN0\\\n-Y2E2Lm9yZzEnMCUGA1UECgweUGF5bWVudCBSZXF1ZXN0IEludGVybWVkaWF0ZSA2\\\n-MB4XDTEzMDIyMzIyNDIzMVoXDTIzMDIyMTIyNDIzMVowPzEUMBIGA1UEAwwLdGVz\\\n-dGNhNy5vcmcxJzAlBgNVBAoMHlBheW1lbnQgUmVxdWVzdCBJbnRlcm1lZGlhdGUg\\\n-NzCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEAtjBRazrkebXAhXsbjimrMIRm\\\n-W/f9SwAHwXfc042keNtl0t2z6XE6UPcR2v/KrssXuCZgodeYxz6IM6lWosCM1xot\\\n-C3ChKKFBfVO30reuKBRUxXfKAFqxaG0YOAEzdZkkY9AGhqWloeSmgxpIfhInU0EF\\\n-JjCwrJ6IkijBatGoAAECAwEAAaMQMA4wDAYDVR0TBAUwAwEB/zANBgkqhkiG9w0B\\\n-AQsFAAOBgQDBRTi1MolmOA0niHYX0A2lN5QWHkCfX0A7GwyoMA3dvM45m/NYd4WB\\\n-X+HwfnfYcI6X9jOgNo5OWmc4GGsld0HlxwMYEKISBS9PbSHPBrb3TBOlw5ztQpXZ\\\n-91+bOhLux52Fr03sK7v9qExmBM12M8UR2ltpzAMiUgLLMHyPfiWkvQqIBDCCAgQw\\\n-ggFtoAMCAQICAQIwDQYJKoZIhvcNAQELBQAwPzEUMBIGA1UEAwwLdGVzdGNhNS5v\\\n-cmcxJzAlBgNVBAoMHlBheW1lbnQgUmVxdWVzdCBJbnRlcm1lZGlhdGUgNTAeFw0x\\\n-MzAyMjMyMjQyMzBaFw0yMzAyMjEyMjQyMzBaMD8xFDASBgNVBAMMC3Rlc3RjYTYu\\\n-b3JnMScwJQYDVQQKDB5QYXltZW50IFJlcXVlc3QgSW50ZXJtZWRpYXRlIDYwgZ8w\\\n-DQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBANJSH3xivX1t9olIdHsznI1aE9SD7t9i\\\n-SZJsIB0otoETHZRVv9M9LvyzBNK98ZV+kTOlST7PJgC0d9BQM9sgYApSRq5oqKDM\\\n-9FXbOm/yaReAbU3mkFNFw5roTlJ5ThEy0yOGT/DS0YBRaGIvRPRj2DiqDVdCZZ+w\\\n-4jo1IYHkZt4FAgMBAAGjEDAOMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQELBQAD\\\n-gYEATm6+J1OmbrothO60xALKonWMBKr6hudb4amkFBqKbA9wMeM3jl+I/yKfz/Uf\\\n-xWuJ071IhiNv6Gxx5YwNvhUe1xMhUqHv0gpyK1Z47bD+kYS2se5sWNPNo3Y9qZDG\\\n-IXiGQxwHmrzaFk79Uy1xsmvsEz42w6hr25Yaw7HkIgrFveoK6gMwggHmMIIBT6AD\\\n-AgECAgEGMA0GCSqGSIb3DQEBCwUAMCExHzAdBgNVBAMTFlBheW1lbnRSZXF1ZXN0\\\n-IFRlc3QgQ0EwHhcNMTMwMjIzMjI1OTUxWhcNMTMwMjI0MjI1OTUxWjA/MRQwEgYD\\\n-VQQDDAt0ZXN0Y2E1Lm9yZzEnMCUGA1UECgweUGF5bWVudCBSZXF1ZXN0IEludGVy\\\n-bWVkaWF0ZSA1MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC7vVUFpxHzz2Tr\\\n-/xij3k58s8d/BPA0R6D5RXTVvmhAzc1Zuin4zUKRFs/aCj/0yED8Wu/COfNGF4tV\\\n-lRNMdl9EcFsxa8XGEL4eAZa+H/rOHH+7/1EINrrVWhZlUecyhilN8jmCZmqEM3ec\\\n-uD0NAViqyMrgmaiFmsLoQZpEGepDUQIDAQABoxAwDjAMBgNVHRMEBTADAQH/MA0G\\\n-CSqGSIb3DQEBCwUAA4GBAEmcUEnhua/oiXy1fwScLgMqt+jk9mHRpE6SVsIop23Q\\\n-CY2JfpG6RxhMMzzzhGklEGN6cxG0HCi6B3HJx6PYrFEfTB0rW4K6m0Tvx3WpS9mN\\\n-uoEuJHLy18ausI/sYAPDHCL+SfBVcqorpaIG2sSpZouRBjRHAyqFAYlwlW87uq5n\\\n-CogEMIICBDCCAW2gAwIBAgIBAjANBgkqhkiG9w0BAQsFADA/MRQwEgYDVQQDDAt0\\\n-ZXN0Y2EzLm9yZzEnMCUGA1UECgweUGF5bWVudCBSZXF1ZXN0IEludGVybWVkaWF0\\\n-ZSAzMB4XDTEzMDIyMzIyNDIyOVoXDTIzMDIyMTIyNDIyOVowPzEUMBIGA1UEAwwL\\\n-dGVzdGNhNC5vcmcxJzAlBgNVBAoMHlBheW1lbnQgUmVxdWVzdCBJbnRlcm1lZGlh\\\n-dGUgNDCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEAxYYo3w2UXiYg6O8b4Qgw\\\n-N/vgreTkiW122Ep/z2TiDrhVMhfOOiKdwYESPflfnXnVaQQzCGexYTQqsvqvzHSy\\\n-na5hL0zPTRJxSKmTVrXRsWtpdCRhjxCGipS3tlQBDi7vb+7SNRIBK4dBjjGzALNk\\\n-7gMCpy+yM8f6I043jTlmGb0CAwEAAaMQMA4wDAYDVR0TBAUwAwEB/zANBgkqhkiG\\\n-9w0BAQsFAAOBgQDU+IQxt3OhKqaUYWC23+cB2gekvWqwMBnrCNrX/Dp+kjoJKUoR\\\n-2Fs3qw53raHES4SIhpGT9l9lrppNQgFe/JMHeYqOZMZO+6kuU0olJanBJ14tPIc7\\\n-zlMTQ9OfmZ6v07IpyFbsQDtRhpe80DpuvSFPfJ4fh0WrQf6kn3KDVpGDnAqIBDCC\\\n-AgQwggFtoAMCAQICAQIwDQYJKoZIhvcNAQELBQAwPzEUMBIGA1UEAwwLdGVzdGNh\\\n-Mi5vcmcxJzAlBgNVBAoMHlBheW1lbnQgUmVxdWVzdCBJbnRlcm1lZGlhdGUgMjAe\\\n-Fw0xMzAyMjMyMjQyMjlaFw0yMzAyMjEyMjQyMjlaMD8xFDASBgNVBAMMC3Rlc3Rj\\\n-YTMub3JnMScwJQYDVQQKDB5QYXltZW50IFJlcXVlc3QgSW50ZXJtZWRpYXRlIDMw\\\n-gZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBANzgVP99Qg98e6NsKEz1v5KqRB7N\\\n-TBRRsYnBvb/TSWipvMQaCYuEyk1xG57x++QuASKeR3QHRQJOoAhQaj9JLUhSSv9G\\\n-Q5PrFLLsOFv7L1tpzXHh2dOBIW92X2yFRW2s39q+Q21yvN+N8uoKdqXhzRA+dDoX\\\n-h3cavaVeHX1G+IrlAgMBAAGjEDAOMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQEL\\\n-BQADgYEASTwg84cX+1UhOG9sejFV3m34QuI1hPZ+qhqVJlRYUtego8Wng1BburDS\\\n-wqVAv4ch2wi3c2s4e8J7AXyLtzSbSQG4RN0oZi0mR8EtTTN+Mix/hBIk79dMZg85\\\n-+I29uFA6Zj2d9oAhQv2qkHhc6tcaheNvkQRlCyH68k3iF1Fqf+4KiAQwggIEMIIB\\\n-baADAgECAgECMA0GCSqGSIb3DQEBCwUAMD8xFDASBgNVBAMMC3Rlc3RjYTEub3Jn\\\n-MScwJQYDVQQKDB5QYXltZW50IFJlcXVlc3QgSW50ZXJtZWRpYXRlIDEwHhcNMTMw\\\n-MjIzMjI0MjI5WhcNMjMwMjIxMjI0MjI5WjA/MRQwEgYDVQQDDAt0ZXN0Y2EyLm9y\\\n-ZzEnMCUGA1UECgweUGF5bWVudCBSZXF1ZXN0IEludGVybWVkaWF0ZSAyMIGfMA0G\\\n-CSqGSIb3DQEBAQUAA4GNADCBiQKBgQDaV8zhfyQuSf/f+fauMfgs3g/RnWy9yxxU\\\n-kvQneQQPH3uZzCyk3A6q72ipTtwNqiibG9455L9A7SaUjGtnpUz0NKT/VWUdqbfC\\\n-l1PqXjEZbDobbAQ5hxLGOTyLRQhLIcgeq2/BnmeCqHsC4md04nUp+nBo1HwKyygv\\\n-K+9sMbCp/wIDAQABoxAwDjAMBgNVHRMEBTADAQH/MA0GCSqGSIb3DQEBCwUAA4GB\\\n-ACvYyE+PPmWFkbjyRu9LAt8DcrtyYYLRClKSg6tVvutwukLG2l//kDOohYkJtgTq\\\n-r6LnCIIIwYdXN+4wxugmw4cnPIZmP6kovxjhhVM95okilor1zniTAo3RN7JDIfTG\\\n-NgxLdGu1btt7DOFL4zTbeSJMb8M1JpPftehH+x/VLyuUCuoDMIIB5jCCAU+gAwIB\\\n-AgIBBTANBgkqhkiG9w0BAQsFADAhMR8wHQYDVQQDExZQYXltZW50UmVxdWVzdCBU\\\n-ZXN0IENBMB4XDTEzMDIyMzIyNDIyOFoXDTIzMDIyMTIyNDIyOFowPzEUMBIGA1UE\\\n-AwwLdGVzdGNhMS5vcmcxJzAlBgNVBAoMHlBheW1lbnQgUmVxdWVzdCBJbnRlcm1l\\\n-ZGlhdGUgMTCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEAo5Vy9H3nA/OOkF5A\\\n-p89yfVNSiTay/LYCaB0eALpcU690U75O9Q3w2M+2AN8wpbbHsJHZMIjEeBRoQfjl\\\n-YXW1ucQTxWKyT+liu0D25mGXX27CBXBd4iXTxVII/iX+u3lcjORjoHOBy7QgeIDI\\\n-IS9y0vYu8eArpjh7m4thrVgIRtMCAwEAAaMQMA4wDAYDVR0TBAUwAwEB/zANBgkq\\\n-hkiG9w0BAQsFAAOBgQB9LKcVJK9sjASNzpQlpUp7nCiw5FSjVY+XMRIKK/kavzlK\\\n-jZ+InsmmyRVGjDoZi9GrqG9PVHgLBxi2VtVjmokZoNPqao3OfhqORAubC+JR/JLe\\\n-pM7aDaxDdTHVhSUk4lgNAvi26dGY7nZMsnHlPQ2tPp/HvRRiMq1oDjlylc8VTCI1\\\n-Eh8IsNsGEhl2qRSVYIoDyPul6RMbTSzv4tVhVfGZqIisGLLhxYsFKgxVbml0VGVz\\\n-dEZvdXIqgAEBE1PP93Tkpif35F+dYmXn9kLA/1djcPjCs2o2rwRMM4Uk356O5dgu\\\n-HXQjsfdR58qZQS9CS5DAtRUf0R8+43/wijO/hb49VNaNXmY+/cPHMkahP2aV3tZi\\\n-FAyZblLik9A7ZvF+UsjeFQiHB5wzWQvbqk5wQ4yabHIXoYv/E0q+eQ==\\\n-\";\n-\n-//\n-// Validly signed, but by a CA not in our root CA list\n-//\n-const char* paymentrequest5_cert1_BASE64 =\n-\"\\\n-Egt4NTA5K3NoYTI1NhrxAwruAzCCAeowggFToAMCAQICAQEwDQYJKoZIhvcNAQEL\\\n-BQAwITEfMB0GA1UEAxMWUGF5bWVudFJlcXVlc3QgVGVzdCBDQTAeFw0xMzA0MTkx\\\n-NzIwMDZaFw0yMzA0MTcxNzIwMDZaMEMxGTAXBgNVBAMMEHRlc3RtZXJjaGFudC5v\\\n-cmcxJjAkBgNVBAoMHVBheW1lbnQgUmVxdWVzdCBUZXN0IE1lcmNoYW50MIGfMA0G\\\n-CSqGSIb3DQEBAQUAA4GNADCBiQKBgQDhV6Yn47aEEmbl50YLvXoqGEJA51I/40wr\\\n-Z6VQGdXYaRqYktagrWDlgYY9h0JQ1bQhm8HgW7ju0R4NaDTXUqxg4HjprF0z3Mfm\\\n-/6mmebkLOOptfkVD7ceAteNI7cyuqWGIAZA7D9mV97mXoCAtTlBUycvkmoiClCCS\\\n-h0EpF/UTaQIDAQABoxAwDjAMBgNVHRMEBTADAQH/MA0GCSqGSIb3DQEBCwUAA4GB\\\n-AGIRwW7I0QvLga+RnJoJSZNZQbtu4rQW3xmoz8WfZMBYXX3QBYg5ftycbdK+/IbP\\\n-qozfjGW2AS6DNArvpveSPDTK9+GJBNo1paiNtVqwXkC3Ddscv5AIms1eZGiIOQNC\\\n-mUvdLkpoXo48WAer3EGsZ3B15GyNEELc0q9W5yUebba1IjUSHwiw2wYSGXapFJVg\\\n-igPI+6XpExtNLO/i1WFV8ZmoiKwYuPvFiwUqDFVuaXRUZXN0Rml2ZSqAAXdsMgdG\\\n-ssymvca1S/1KeM3n8Ydi2fi1JUzAAr59xPvNJRUeqCLP9upHn5z7br3P12Oz9A20\\\n-5/4wL4ClPRPVnOHgij0bEg+y0tGESqmF1rfOfXDszlo2U92wCxS07kq79YAZJ1Zo\\\n-XYh860/Q4wvc7lfiTe+dXBzPKAKhMy91yETY\\\n-\";\n-\n-//\n-// Contains a testnet paytoaddress, so payment request network doesn't match client network\n-//\n-const char* paymentrequest1_cert2_BASE64 =\n-\"\\\n-Egt4NTA5K3NoYTI1NhrQBArNBDCCAkkwggExoAMCAQICAQEwDQYJKoZIhvcNAQEL\\\n-BQAwITEfMB0GA1UEAwwWUGF5bWVudFJlcXVlc3QgVGVzdCBDQTAeFw0xNTAxMTEx\\\n-ODIxMDhaFw0yNTAxMDgxODIxMDhaMCExHzAdBgNVBAMMFlBheW1lbnRSZXF1ZXN0\\\n-IFRlc3QgQ0EwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAMsZqzkzeBGo+i2N\\\n-mUak3Ciodr1V7S062VOy7N0OQYNDQHYkgDFAUET7cEb5VJaHPv5m3ppTBpU9xBcf\\\n-wbHHUt4VjA+mhRmYrl1khjvZM+X8kEqvWn20BtcM9R6r0yIYec8UERDDHBleL/P8\\\n-RkxEnVLjYTV9zigCXfMsgYb3EQShAgMBAAGjEDAOMAwGA1UdEwQFMAMBAf8wDQYJ\\\n-KoZIhvcNAQELBQADggEBABUJpl3QCqsoDSxAsQdV6zKT4VGV76AzoGj7etQsQY+r\\\n-+S26VfWh/fMobEzuxFChr0USgLJ6FoK78hAtoZvt1lrye9yqFv/ig3WLWsJKWHHb\\\n-3RT6oR03CIwZXFSUasi08QDVLxafwsU5OMcPLucF3a1lRL1ccYrNgVCCx1+X7Bos\\\n-tIgDGRQQ4AyoHTcfVd2hEGeUv7k14mOxFsAp6851yosHq9Q2kwmdH+rHEJbjof87\\\n-yyKLagc4owyXBZYkQmkeHWCNqnuRmO5vUsfVb0UUrkD64o7Th/NjwooA7SCiUXl6\\\n-dfygT1b7ggpx7GC+sP2DsIM47IAZ55drjqX5u2f+Ba0iPQoEdGVzdBIhCIDWwowE\\\n-Ehl2qRQErGqUUwSsaMpDvWIaGnJGNQqi8oisGNeMy6UFKgxKdXN0IFRlc3Rpbmcq\\\n-gAFwThsozZxkZxzCn4R8WxNiLFV6m0ye9fEtSbolfaW+EjBMpO03lr/dwNnrclhg\\\n-ew+A05xfZztrAt16XKEY7qKJ/eY2nLd0fVAIu/nIt+7/VYVXT83zLrWc150aRS7W\\\n-AdJbL3JOJLs6Eyp5zrPbfI8faRttFAdONKDrJgIpuW1E3g==\\\n-\";\n-\n-//\n-// Expired payment request (expires is set to 1 = 1970-01-01 00:00:01)\n-//\n-const char* paymentrequest2_cert2_BASE64 =\n-\"\\\n-Egt4NTA5K3NoYTI1NhrQBArNBDCCAkkwggExoAMCAQICAQEwDQYJKoZIhvcNAQEL\\\n-BQAwITEfMB0GA1UEAwwWUGF5bWVudFJlcXVlc3QgVGVzdCBDQTAeFw0xNTAxMTEx\\\n-ODIxMDhaFw0yNTAxMDgxODIxMDhaMCExHzAdBgNVBAMMFlBheW1lbnRSZXF1ZXN0\\\n-IFRlc3QgQ0EwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAMsZqzkzeBGo+i2N\\\n-mUak3Ciodr1V7S062VOy7N0OQYNDQHYkgDFAUET7cEb5VJaHPv5m3ppTBpU9xBcf\\\n-wbHHUt4VjA+mhRmYrl1khjvZM+X8kEqvWn20BtcM9R6r0yIYec8UERDDHBleL/P8\\\n-RkxEnVLjYTV9zigCXfMsgYb3EQShAgMBAAGjEDAOMAwGA1UdEwQFMAMBAf8wDQYJ\\\n-KoZIhvcNAQELBQADggEBABUJpl3QCqsoDSxAsQdV6zKT4VGV76AzoGj7etQsQY+r\\\n-+S26VfWh/fMobEzuxFChr0USgLJ6FoK78hAtoZvt1lrye9yqFv/ig3WLWsJKWHHb\\\n-3RT6oR03CIwZXFSUasi08QDVLxafwsU5OMcPLucF3a1lRL1ccYrNgVCCx1+X7Bos\\\n-tIgDGRQQ4AyoHTcfVd2hEGeUv7k14mOxFsAp6851yosHq9Q2kwmdH+rHEJbjof87\\\n-yyKLagc4owyXBZYkQmkeHWCNqnuRmO5vUsfVb0UUrkD64o7Th/NjwooA7SCiUXl6\\\n-dfygT1b7ggpx7GC+sP2DsIM47IAZ55drjqX5u2f+Ba0iQgoEdGVzdBIgCICt4gQS\\\n-GXapFASsapRTBKxoykO9YhoackY1CqLyiKwYiNLUpQUgASoQVGVzdGluZyB0ZXN0\\\n-bmV0ISqAATXq9A5nmJgtmee/bQTeHeif4w1YYFPBlKghwx6qbVgXTWnwBJtOQhhV\\\n-sZdzbTl95ENR7/Y7VJupW9kDWobCK7zUUhLAzUlwmLlcx6itHw8LTUF5HK+AwsZm\\\n-Zs85lISGvOS0NZW/ENa6l+oQRnL87oqVZr/EDGiuqjz6T0ThQi0l\\\n-\";\n-\n-//\n-// Unexpired payment request (expires is set to 0x7FFFFFFFFFFFFFFF = max. int64_t)\n-//\n-const char* paymentrequest3_cert2_BASE64 =\n-\"\\\n-Egt4NTA5K3NoYTI1NhrQBArNBDCCAkkwggExoAMCAQICAQEwDQYJKoZIhvcNAQEL\\\n-BQAwITEfMB0GA1UEAwwWUGF5bWVudFJlcXVlc3QgVGVzdCBDQTAeFw0xNTAxMTEx\\\n-ODIxMDhaFw0yNTAxMDgxODIxMDhaMCExHzAdBgNVBAMMFlBheW1lbnRSZXF1ZXN0\\\n-IFRlc3QgQ0EwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAMsZqzkzeBGo+i2N\\\n-mUak3Ciodr1V7S062VOy7N0OQYNDQHYkgDFAUET7cEb5VJaHPv5m3ppTBpU9xBcf\\\n-wbHHUt4VjA+mhRmYrl1khjvZM+X8kEqvWn20BtcM9R6r0yIYec8UERDDHBleL/P8\\\n-RkxEnVLjYTV9zigCXfMsgYb3EQShAgMBAAGjEDAOMAwGA1UdEwQFMAMBAf8wDQYJ\\\n-KoZIhvcNAQELBQADggEBABUJpl3QCqsoDSxAsQdV6zKT4VGV76AzoGj7etQsQY+r\\\n-+S26VfWh/fMobEzuxFChr0USgLJ6FoK78hAtoZvt1lrye9yqFv/ig3WLWsJKWHHb\\\n-3RT6oR03CIwZXFSUasi08QDVLxafwsU5OMcPLucF3a1lRL1ccYrNgVCCx1+X7Bos\\\n-tIgDGRQQ4AyoHTcfVd2hEGeUv7k14mOxFsAp6851yosHq9Q2kwmdH+rHEJbjof87\\\n-yyKLagc4owyXBZYkQmkeHWCNqnuRmO5vUsfVb0UUrkD64o7Th/NjwooA7SCiUXl6\\\n-dfygT1b7ggpx7GC+sP2DsIM47IAZ55drjqX5u2f+Ba0iSgoEdGVzdBIgCICt4gQS\\\n-GXapFASsapRTBKxoykO9YhoackY1CqLyiKwYyNfZpQUg//////////9/KhBUZXN0\\\n-aW5nIHRlc3RuZXQhKoABNwi8WnMW4aMvbmvorTiiWJLFhofLFnsoWCJnj3rWLnLh\\\n-n3w6q/fZ26p50ERL/noxdTUfeFsKnlECkUu/fOcOrqyYDiwvxI0SZ034DleVyFU1\\\n-Z3T+X0zcL8oe7bX01Yf+s2V+5JXQXarKnKBrZCGgv2ARjFNSZe7E7vGg5K4Q6Q8=\\\n-\";\n-\n-//\n-// Unexpired payment request (expires is set to 0x8000000000000000 > max. int64_t, allowed uint64)\n-//\n-const char* paymentrequest4_cert2_BASE64 =\n-\"\\\n-Egt4NTA5K3NoYTI1NhrQBArNBDCCAkkwggExoAMCAQICAQEwDQYJKoZIhvcNAQEL\\\n-BQAwITEfMB0GA1UEAwwWUGF5bWVudFJlcXVlc3QgVGVzdCBDQTAeFw0xNTAxMTEx\\\n-ODIxMDhaFw0yNTAxMDgxODIxMDhaMCExHzAdBgNVBAMMFlBheW1lbnRSZXF1ZXN0\\\n-IFRlc3QgQ0EwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAMsZqzkzeBGo+i2N\\\n-mUak3Ciodr1V7S062VOy7N0OQYNDQHYkgDFAUET7cEb5VJaHPv5m3ppTBpU9xBcf\\\n-wbHHUt4VjA+mhRmYrl1khjvZM+X8kEqvWn20BtcM9R6r0yIYec8UERDDHBleL/P8\\\n-RkxEnVLjYTV9zigCXfMsgYb3EQShAgMBAAGjEDAOMAwGA1UdEwQFMAMBAf8wDQYJ\\\n-KoZIhvcNAQELBQADggEBABUJpl3QCqsoDSxAsQdV6zKT4VGV76AzoGj7etQsQY+r\\\n-+S26VfWh/fMobEzuxFChr0USgLJ6FoK78hAtoZvt1lrye9yqFv/ig3WLWsJKWHHb\\\n-3RT6oR03CIwZXFSUasi08QDVLxafwsU5OMcPLucF3a1lRL1ccYrNgVCCx1+X7Bos\\\n-tIgDGRQQ4AyoHTcfVd2hEGeUv7k14mOxFsAp6851yosHq9Q2kwmdH+rHEJbjof87\\\n-yyKLagc4owyXBZYkQmkeHWCNqnuRmO5vUsfVb0UUrkD64o7Th/NjwooA7SCiUXl6\\\n-dfygT1b7ggpx7GC+sP2DsIM47IAZ55drjqX5u2f+Ba0iSwoEdGVzdBIgCICt4gQS\\\n-GXapFASsapRTBKxoykO9YhoackY1CqLyiKwYt+HZpQUggICAgICAgICAASoQVGVz\\\n-dGluZyB0ZXN0bmV0ISqAAXSQG8+GFA18VaKarlYrOz293rNMIub0swKGcQm8jAGX\\\n-HSLaRgHfUDeEPr4hydy4dtfu59KNwe2xsHOHu/SpO4L8SrA4Dm9A7SlNBVWdcLbw\\\n-d2hj739GDLz0b5KuJ2SG6VknMRQM976w/m2qlq0ccVGaaZ2zMIGfpzL3p6adwx/5\\\n-\";\n-\n-//\n-// Payment request with amount overflow (amount is set to 21000001 BTC)\n-//\n-const char* paymentrequest5_cert2_BASE64 =\n-\"\\\n-Egt4NTA5K3NoYTI1NhrQBArNBDCCAkkwggExoAMCAQICAQEwDQYJKoZIhvcNAQEL\\\n-BQAwITEfMB0GA1UEAwwWUGF5bWVudFJlcXVlc3QgVGVzdCBDQTAeFw0xNTAxMTEx\\\n-ODIxMDhaFw0yNTAxMDgxODIxMDhaMCExHzAdBgNVBAMMFlBheW1lbnRSZXF1ZXN0\\\n-IFRlc3QgQ0EwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAMsZqzkzeBGo+i2N\\\n-mUak3Ciodr1V7S062VOy7N0OQYNDQHYkgDFAUET7cEb5VJaHPv5m3ppTBpU9xBcf\\\n-wbHHUt4VjA+mhRmYrl1khjvZM+X8kEqvWn20BtcM9R6r0yIYec8UERDDHBleL/P8\\\n-RkxEnVLjYTV9zigCXfMsgYb3EQShAgMBAAGjEDAOMAwGA1UdEwQFMAMBAf8wDQYJ\\\n-KoZIhvcNAQELBQADggEBABUJpl3QCqsoDSxAsQdV6zKT4VGV76AzoGj7etQsQY+r\\\n-+S26VfWh/fMobEzuxFChr0USgLJ6FoK78hAtoZvt1lrye9yqFv/ig3WLWsJKWHHb\\\n-3RT6oR03CIwZXFSUasi08QDVLxafwsU5OMcPLucF3a1lRL1ccYrNgVCCx1+X7Bos\\\n-tIgDGRQQ4AyoHTcfVd2hEGeUv7k14mOxFsAp6851yosHq9Q2kwmdH+rHEJbjof87\\\n-yyKLagc4owyXBZYkQmkeHWCNqnuRmO5vUsfVb0UUrkD64o7Th/NjwooA7SCiUXl6\\\n-dfygT1b7ggpx7GC+sP2DsIM47IAZ55drjqX5u2f+Ba0iTAoEdGVzdBIkCIDC9P+F\\\n-vt0DEhl2qRQErGqUUwSsaMpDvWIaGnJGNQqi8oisGLzcrKYFKhhUZXN0aW5nIGFt\\\n-b3VudCBvdmVyZmxvdyEqgAG8S7WEDUC6tCL6q2CTBjop/AitgEy31RL9IqYruytR\\\n-iEBFUrBDJZU+UEezGwr7/zoECjo5ZY3PmtZcM2sILNjyweJF6XVzGqTxUw6pN6sW\\\n-XR2T3Gy2LzRvhVA25QgGqpz0/juS2BtmNbsZPkN9gMMwKimgzc+PuCzmEKwPK9cQ\\\n-YQ==\\\n-\";\n-\n-#endif // BITCOIN_QT_TEST_PAYMENTREQUESTDATA_H"
      },
      {
        "sha": "ef0808054de75a5e87159d4bc299ea36a89dfb45",
        "filename": "src/qt/test/paymentservertests.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 215,
        "changes": 215,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1cb9a4e28cccd3056e2b8d9cdabc45bf3e4dd2a6/src/qt/test/paymentservertests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1cb9a4e28cccd3056e2b8d9cdabc45bf3e4dd2a6/src/qt/test/paymentservertests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/paymentservertests.cpp?ref=1cb9a4e28cccd3056e2b8d9cdabc45bf3e4dd2a6",
        "patch": "@@ -1,215 +0,0 @@\n-// Copyright (c) 2009-2018 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#include <qt/test/paymentservertests.h>\n-\n-#include <qt/optionsmodel.h>\n-#include <qt/test/paymentrequestdata.h>\n-\n-#include <amount.h>\n-#include <interfaces/node.h>\n-#include <random.h>\n-#include <script/script.h>\n-#include <script/standard.h>\n-#include <test/setup_common.h>\n-#include <util/strencodings.h>\n-\n-#include <openssl/ssl.h>\n-#include <openssl/x509.h>\n-#include <openssl/x509_vfy.h>\n-\n-#include <QFileOpenEvent>\n-#include <QTemporaryFile>\n-\n-X509 *parse_b64der_cert(const char* cert_data)\n-{\n-    std::vector<unsigned char> data = DecodeBase64(cert_data);\n-    assert(data.size() > 0);\n-    const unsigned char* dptr = data.data();\n-    X509 *cert = d2i_X509(nullptr, &dptr, data.size());\n-    assert(cert);\n-    return cert;\n-}\n-\n-//\n-// Test payment request handling\n-//\n-\n-static SendCoinsRecipient handleRequest(PaymentServer* server, std::vector<unsigned char>& data)\n-{\n-    RecipientCatcher sigCatcher;\n-    QObject::connect(server, &PaymentServer::receivedPaymentRequest,\n-        &sigCatcher, &RecipientCatcher::getRecipient);\n-\n-    // Write data to a temp file:\n-    QTemporaryFile f;\n-    f.open();\n-    f.write((const char*)data.data(), data.size());\n-    f.close();\n-\n-    // Create a QObject, install event filter from PaymentServer\n-    // and send a file open event to the object\n-    QObject object;\n-    object.installEventFilter(server);\n-    QFileOpenEvent event(f.fileName());\n-    // If sending the event fails, this will cause sigCatcher to be empty,\n-    // which will lead to a test failure anyway.\n-    QCoreApplication::sendEvent(&object, &event);\n-\n-    QObject::disconnect(server, &PaymentServer::receivedPaymentRequest,\n-        &sigCatcher, &RecipientCatcher::getRecipient);\n-\n-    // Return results from sigCatcher\n-    return sigCatcher.recipient;\n-}\n-\n-void PaymentServerTests::paymentServerTests()\n-{\n-    SSL_library_init();\n-    BasicTestingSetup testing_setup(CBaseChainParams::MAIN);\n-    auto node = interfaces::MakeNode();\n-    OptionsModel optionsModel(*node);\n-    PaymentServer* server = new PaymentServer(nullptr, false);\n-    X509_STORE* caStore = X509_STORE_new();\n-    X509_STORE_add_cert(caStore, parse_b64der_cert(caCert1_BASE64));\n-    PaymentServer::LoadRootCAs(caStore);\n-    server->setOptionsModel(&optionsModel);\n-    server->uiReady();\n-\n-    std::vector<unsigned char> data;\n-    SendCoinsRecipient r;\n-    QString merchant;\n-\n-    // Now feed PaymentRequests to server, and observe signals it produces\n-\n-    // This payment request validates directly against the\n-    // caCert1 certificate authority:\n-    data = DecodeBase64(paymentrequest1_cert1_BASE64);\n-    r = handleRequest(server, data);\n-    r.paymentRequest.getMerchant(caStore, merchant);\n-    QCOMPARE(merchant, QString(\"testmerchant.org\"));\n-\n-    // Signed, but expired, merchant cert in the request:\n-    data = DecodeBase64(paymentrequest2_cert1_BASE64);\n-    r = handleRequest(server, data);\n-    r.paymentRequest.getMerchant(caStore, merchant);\n-    QCOMPARE(merchant, QString(\"\"));\n-\n-    // 10-long certificate chain, all intermediates valid:\n-    data = DecodeBase64(paymentrequest3_cert1_BASE64);\n-    r = handleRequest(server, data);\n-    r.paymentRequest.getMerchant(caStore, merchant);\n-    QCOMPARE(merchant, QString(\"testmerchant8.org\"));\n-\n-    // Long certificate chain, with an expired certificate in the middle:\n-    data = DecodeBase64(paymentrequest4_cert1_BASE64);\n-    r = handleRequest(server, data);\n-    r.paymentRequest.getMerchant(caStore, merchant);\n-    QCOMPARE(merchant, QString(\"\"));\n-\n-    // Validly signed, but by a CA not in our root CA list:\n-    data = DecodeBase64(paymentrequest5_cert1_BASE64);\n-    r = handleRequest(server, data);\n-    r.paymentRequest.getMerchant(caStore, merchant);\n-    QCOMPARE(merchant, QString(\"\"));\n-\n-    // Try again with no root CA's, verifiedMerchant should be empty:\n-    caStore = X509_STORE_new();\n-    PaymentServer::LoadRootCAs(caStore);\n-    data = DecodeBase64(paymentrequest1_cert1_BASE64);\n-    r = handleRequest(server, data);\n-    r.paymentRequest.getMerchant(caStore, merchant);\n-    QCOMPARE(merchant, QString(\"\"));\n-\n-    // Load second root certificate\n-    caStore = X509_STORE_new();\n-    X509_STORE_add_cert(caStore, parse_b64der_cert(caCert2_BASE64));\n-    PaymentServer::LoadRootCAs(caStore);\n-\n-    QByteArray byteArray;\n-\n-    // For the tests below we just need the payment request data from\n-    // paymentrequestdata.h parsed + stored in r.paymentRequest.\n-    //\n-    // These tests require us to bypass the following normal client execution flow\n-    // shown below to be able to explicitly just trigger a certain condition!\n-    //\n-    // handleRequest()\n-    // -> PaymentServer::eventFilter()\n-    //   -> PaymentServer::handleURIOrFile()\n-    //     -> PaymentServer::readPaymentRequestFromFile()\n-    //       -> PaymentServer::processPaymentRequest()\n-\n-    // Contains a testnet paytoaddress, so payment request network doesn't match client network:\n-    data = DecodeBase64(paymentrequest1_cert2_BASE64);\n-    byteArray = QByteArray((const char*)data.data(), data.size());\n-    r.paymentRequest.parse(byteArray);\n-    // Ensure the request is initialized, because network \"main\" is default, even for\n-    // uninitialized payment requests and that will fail our test here.\n-    QVERIFY(r.paymentRequest.IsInitialized());\n-    QCOMPARE(PaymentServer::verifyNetwork(*node, r.paymentRequest.getDetails()), false);\n-\n-    // Expired payment request (expires is set to 1 = 1970-01-01 00:00:01):\n-    data = DecodeBase64(paymentrequest2_cert2_BASE64);\n-    byteArray = QByteArray((const char*)data.data(), data.size());\n-    r.paymentRequest.parse(byteArray);\n-    // Ensure the request is initialized\n-    QVERIFY(r.paymentRequest.IsInitialized());\n-    // compares 1 < GetTime() == false (treated as expired payment request)\n-    QCOMPARE(PaymentServer::verifyExpired(r.paymentRequest.getDetails()), true);\n-\n-    // Unexpired payment request (expires is set to 0x7FFFFFFFFFFFFFFF = max. int64_t):\n-    // 9223372036854775807 (uint64), 9223372036854775807 (int64_t) and -1 (int32_t)\n-    // -1 is 1969-12-31 23:59:59 (for a 32 bit time values)\n-    data = DecodeBase64(paymentrequest3_cert2_BASE64);\n-    byteArray = QByteArray((const char*)data.data(), data.size());\n-    r.paymentRequest.parse(byteArray);\n-    // Ensure the request is initialized\n-    QVERIFY(r.paymentRequest.IsInitialized());\n-    // compares 9223372036854775807 < GetTime() == false (treated as unexpired payment request)\n-    QCOMPARE(PaymentServer::verifyExpired(r.paymentRequest.getDetails()), false);\n-\n-    // Unexpired payment request (expires is set to 0x8000000000000000 > max. int64_t, allowed uint64):\n-    // 9223372036854775808 (uint64), -9223372036854775808 (int64_t) and 0 (int32_t)\n-    // 0 is 1970-01-01 00:00:00 (for a 32 bit time values)\n-    data = DecodeBase64(paymentrequest4_cert2_BASE64);\n-    byteArray = QByteArray((const char*)data.data(), data.size());\n-    r.paymentRequest.parse(byteArray);\n-    // Ensure the request is initialized\n-    QVERIFY(r.paymentRequest.IsInitialized());\n-    // compares -9223372036854775808 < GetTime() == true (treated as expired payment request)\n-    QCOMPARE(PaymentServer::verifyExpired(r.paymentRequest.getDetails()), true);\n-\n-    // Test BIP70 DoS protection:\n-    auto randdata = FastRandomContext().randbytes(BIP70_MAX_PAYMENTREQUEST_SIZE + 1);\n-\n-    // Write data to a temp file:\n-    QTemporaryFile tempFile;\n-    tempFile.open();\n-    tempFile.write((const char*)randdata.data(), randdata.size());\n-    tempFile.close();\n-    // compares 50001 <= BIP70_MAX_PAYMENTREQUEST_SIZE == false\n-    QCOMPARE(PaymentServer::verifySize(tempFile.size()), false);\n-\n-    // Payment request with amount overflow (amount is set to 21000001 BTC):\n-    data = DecodeBase64(paymentrequest5_cert2_BASE64);\n-    byteArray = QByteArray((const char*)data.data(), data.size());\n-    r.paymentRequest.parse(byteArray);\n-    // Ensure the request is initialized\n-    QVERIFY(r.paymentRequest.IsInitialized());\n-    // Extract address and amount from the request\n-    QList<std::pair<CScript, CAmount> > sendingTos = r.paymentRequest.getPayTo();\n-    for (const std::pair<CScript, CAmount>& sendingTo : sendingTos) {\n-        CTxDestination dest;\n-        if (ExtractDestination(sendingTo.first, dest))\n-            QCOMPARE(PaymentServer::verifyAmount(sendingTo.second), false);\n-    }\n-\n-    delete server;\n-}\n-\n-void RecipientCatcher::getRecipient(const SendCoinsRecipient& r)\n-{\n-    recipient = r;\n-}"
      },
      {
        "sha": "7ef7a0a6411e112c7d00623970d2fd64b9f3c048",
        "filename": "src/qt/test/paymentservertests.h",
        "status": "removed",
        "additions": 0,
        "deletions": 35,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1cb9a4e28cccd3056e2b8d9cdabc45bf3e4dd2a6/src/qt/test/paymentservertests.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1cb9a4e28cccd3056e2b8d9cdabc45bf3e4dd2a6/src/qt/test/paymentservertests.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/paymentservertests.h?ref=1cb9a4e28cccd3056e2b8d9cdabc45bf3e4dd2a6",
        "patch": "@@ -1,35 +0,0 @@\n-// Copyright (c) 2009-2018 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#ifndef BITCOIN_QT_TEST_PAYMENTSERVERTESTS_H\n-#define BITCOIN_QT_TEST_PAYMENTSERVERTESTS_H\n-\n-#include <qt/paymentserver.h>\n-\n-#include <QObject>\n-#include <QTest>\n-\n-class PaymentServerTests : public QObject\n-{\n-    Q_OBJECT\n-\n-private Q_SLOTS:\n-    void paymentServerTests();\n-};\n-\n-// Dummy class to receive paymentserver signals.\n-// If SendCoinsRecipient was a proper QObject, then\n-// we could use QSignalSpy... but it's not.\n-class RecipientCatcher : public QObject\n-{\n-    Q_OBJECT\n-\n-public Q_SLOTS:\n-    void getRecipient(const SendCoinsRecipient& r);\n-\n-public:\n-    SendCoinsRecipient recipient;\n-};\n-\n-#endif // BITCOIN_QT_TEST_PAYMENTSERVERTESTS_H"
      },
      {
        "sha": "f272627f96748af341f9ccc06c20c9ecf66269ff",
        "filename": "src/qt/test/test_main.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 9,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3548e4aac72e9148d41b440052a89d89328f7661/src/qt/test/test_main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3548e4aac72e9148d41b440052a89d89328f7661/src/qt/test/test_main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/test_main.cpp?ref=3548e4aac72e9148d41b440052a89d89328f7661",
        "patch": "@@ -16,9 +16,6 @@\n \n #ifdef ENABLE_WALLET\n #include <qt/test/addressbooktests.h>\n-#ifdef ENABLE_BIP70\n-#include <qt/test/paymentservertests.h>\n-#endif // ENABLE_BIP70\n #include <qt/test/wallettests.h>\n #endif // ENABLE_WALLET\n \n@@ -79,12 +76,6 @@ int main(int argc, char *argv[])\n     if (QTest::qExec(&test1) != 0) {\n         fInvalid = true;\n     }\n-#if defined(ENABLE_WALLET) && defined(ENABLE_BIP70)\n-    PaymentServerTests test2;\n-    if (QTest::qExec(&test2) != 0) {\n-        fInvalid = true;\n-    }\n-#endif\n     RPCNestedTests test3;\n     if (QTest::qExec(&test3) != 0) {\n         fInvalid = true;"
      },
      {
        "sha": "318b0756c790c26089e49af9a8e108b3d0544403",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 10,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3548e4aac72e9148d41b440052a89d89328f7661/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3548e4aac72e9148d41b440052a89d89328f7661/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=3548e4aac72e9148d41b440052a89d89328f7661",
        "patch": "@@ -48,7 +48,6 @@ QString TransactionDesc::FormatTxStatus(const interfaces::WalletTx& wtx, const i\n     }\n }\n \n-#ifndef ENABLE_BIP70\n // Takes an encoded PaymentRequest as a string and tries to find the Common Name of the X.509 certificate\n // used to sign the PaymentRequest.\n bool GetPaymentRequestMerchant(const std::string& pr, QString& merchant)\n@@ -76,7 +75,6 @@ bool GetPaymentRequestMerchant(const std::string& pr, QString& merchant)\n     }\n     return false;\n }\n-#endif\n \n QString TransactionDesc::toHTML(interfaces::Node& node, interfaces::Wallet& wallet, TransactionRecord *rec, int unit)\n {\n@@ -294,19 +292,11 @@ QString TransactionDesc::toHTML(interfaces::Node& node, interfaces::Wallet& wall\n         if (r.first == \"PaymentRequest\")\n         {\n             QString merchant;\n-#ifdef ENABLE_BIP70\n-            PaymentRequestPlus req;\n-            req.parse(QByteArray::fromRawData(r.second.data(), r.second.size()));\n-            if (!req.getMerchant(PaymentServer::getCertStore(), merchant)) {\n-                merchant.clear();\n-            }\n-#else\n             if (!GetPaymentRequestMerchant(r.second, merchant)) {\n                 merchant.clear();\n             } else {\n                 merchant += tr(\" (Certificate was not verified)\");\n             }\n-#endif\n             if (!merchant.isNull()) {\n                 strHTML += \"<b>\" + tr(\"Merchant\") + \":</b> \" + GUIUtil::HtmlEscape(merchant) + \"<br>\";\n             }"
      },
      {
        "sha": "095c98d26f7d1b85b3e9b70ffd565ce2b81118e6",
        "filename": "src/qt/utilitydialog.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3548e4aac72e9148d41b440052a89d89328f7661/src/qt/utilitydialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3548e4aac72e9148d41b440052a89d89328f7661/src/qt/utilitydialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/utilitydialog.cpp?ref=3548e4aac72e9148d41b440052a89d89328f7661",
        "patch": "@@ -11,9 +11,6 @@\n #include <qt/forms/ui_helpmessagedialog.h>\n \n #include <qt/bitcoingui.h>\n-#ifdef ENABLE_BIP70\n-#include <qt/paymentrequestplus.h>\n-#endif\n \n #include <clientversion.h>\n #include <init.h>"
      },
      {
        "sha": "08ea1c2409722b54d8e075bbc31d43b3f28f313e",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 44,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3548e4aac72e9148d41b440052a89d89328f7661/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3548e4aac72e9148d41b440052a89d89328f7661/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=3548e4aac72e9148d41b440052a89d89328f7661",
        "patch": "@@ -143,31 +143,6 @@ WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransact\n     {\n         if (rcp.fSubtractFeeFromAmount)\n             fSubtractFeeFromAmount = true;\n-\n-#ifdef ENABLE_BIP70\n-        if (rcp.paymentRequest.IsInitialized())\n-        {   // PaymentRequest...\n-            CAmount subtotal = 0;\n-            const payments::PaymentDetails& details = rcp.paymentRequest.getDetails();\n-            for (int i = 0; i < details.outputs_size(); i++)\n-            {\n-                const payments::Output& out = details.outputs(i);\n-                if (out.amount() <= 0) continue;\n-                subtotal += out.amount();\n-                const unsigned char* scriptStr = (const unsigned char*)out.script().data();\n-                CScript scriptPubKey(scriptStr, scriptStr+out.script().size());\n-                CAmount nAmount = out.amount();\n-                CRecipient recipient = {scriptPubKey, nAmount, rcp.fSubtractFeeFromAmount};\n-                vecSend.push_back(recipient);\n-            }\n-            if (subtotal <= 0)\n-            {\n-                return InvalidAmount;\n-            }\n-            total += subtotal;\n-        }\n-        else\n-#endif\n         {   // User-entered bitcoin address / amount:\n             if(!validateAddress(rcp.address))\n             {\n@@ -240,21 +215,6 @@ WalletModel::SendCoinsReturn WalletModel::sendCoins(WalletModelTransaction &tran\n         std::vector<std::pair<std::string, std::string>> vOrderForm;\n         for (const SendCoinsRecipient &rcp : transaction.getRecipients())\n         {\n-#ifdef ENABLE_BIP70\n-            if (rcp.paymentRequest.IsInitialized())\n-            {\n-                // Make sure any payment requests involved are still valid.\n-                if (PaymentServer::verifyExpired(rcp.paymentRequest.getDetails())) {\n-                    return PaymentRequestExpired;\n-                }\n-\n-                // Store PaymentRequests in wtx.vOrderForm in wallet.\n-                std::string value;\n-                rcp.paymentRequest.SerializeToString(&value);\n-                vOrderForm.emplace_back(\"PaymentRequest\", std::move(value));\n-            }\n-            else\n-#endif\n             if (!rcp.message.isEmpty()) // Message from normal bitcoin:URI (bitcoin:123...?message=example)\n                 vOrderForm.emplace_back(\"Message\", rcp.message.toStdString());\n         }\n@@ -271,10 +231,6 @@ WalletModel::SendCoinsReturn WalletModel::sendCoins(WalletModelTransaction &tran\n     // and emit coinsSent signal for each recipient\n     for (const SendCoinsRecipient &rcp : transaction.getRecipients())\n     {\n-        // Don't touch the address book when we have a payment request\n-#ifdef ENABLE_BIP70\n-        if (!rcp.paymentRequest.IsInitialized())\n-#endif\n         {\n             std::string strAddress = rcp.address.toStdString();\n             CTxDestination dest = DecodeDestination(strAddress);"
      },
      {
        "sha": "5181d1c83bf5acc1832b9365b51eb07fbc2c2757",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 4,
        "deletions": 22,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3548e4aac72e9148d41b440052a89d89328f7661/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3548e4aac72e9148d41b440052a89d89328f7661/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=3548e4aac72e9148d41b440052a89d89328f7661",
        "patch": "@@ -5,18 +5,15 @@\n #ifndef BITCOIN_QT_WALLETMODEL_H\n #define BITCOIN_QT_WALLETMODEL_H\n \n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n #include <amount.h>\n #include <key.h>\n #include <serialize.h>\n #include <script/standard.h>\n \n-#if defined(HAVE_CONFIG_H)\n-#include <config/bitcoin-config.h>\n-#endif\n-\n-#ifdef ENABLE_BIP70\n-#include <qt/paymentrequestplus.h>\n-#endif\n #include <qt/walletmodeltransaction.h>\n \n #include <interfaces/wallet.h>\n@@ -67,15 +64,9 @@ class SendCoinsRecipient\n     CAmount amount;\n     // If from a payment request, this is used for storing the memo\n     QString message;\n-\n-#ifdef ENABLE_BIP70\n-    // If from a payment request, paymentRequest.IsInitialized() will be true\n-    PaymentRequestPlus paymentRequest;\n-#else\n     // If building with BIP70 is disabled, keep the payment request around as\n     // serialized string to ensure load/store is lossless\n     std::string sPaymentRequest;\n-#endif\n     // Empty if no authentication or invalid signature/cert/etc.\n     QString authenticatedMerchant;\n \n@@ -91,11 +82,6 @@ class SendCoinsRecipient\n         std::string sAddress = address.toStdString();\n         std::string sLabel = label.toStdString();\n         std::string sMessage = message.toStdString();\n-#ifdef ENABLE_BIP70\n-        std::string sPaymentRequest;\n-        if (!ser_action.ForRead() && paymentRequest.IsInitialized())\n-            paymentRequest.SerializeToString(&sPaymentRequest);\n-#endif\n         std::string sAuthenticatedMerchant = authenticatedMerchant.toStdString();\n \n         READWRITE(this->nVersion);\n@@ -111,10 +97,6 @@ class SendCoinsRecipient\n             address = QString::fromStdString(sAddress);\n             label = QString::fromStdString(sLabel);\n             message = QString::fromStdString(sMessage);\n-#ifdef ENABLE_BIP70\n-            if (!sPaymentRequest.empty())\n-                paymentRequest.parse(QByteArray::fromRawData(sPaymentRequest.data(), sPaymentRequest.size()));\n-#endif\n             authenticatedMerchant = QString::fromStdString(sAuthenticatedMerchant);\n         }\n     }"
      },
      {
        "sha": "eba95bd27c2645707e4e14c3cd153370d7e3a821",
        "filename": "src/qt/walletmodeltransaction.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 19,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3548e4aac72e9148d41b440052a89d89328f7661/src/qt/walletmodeltransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3548e4aac72e9148d41b440052a89d89328f7661/src/qt/walletmodeltransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodeltransaction.cpp?ref=3548e4aac72e9148d41b440052a89d89328f7661",
        "patch": "@@ -48,25 +48,6 @@ void WalletModelTransaction::reassignAmounts(int nChangePosRet)\n     for (QList<SendCoinsRecipient>::iterator it = recipients.begin(); it != recipients.end(); ++it)\n     {\n         SendCoinsRecipient& rcp = (*it);\n-\n-#ifdef ENABLE_BIP70\n-        if (rcp.paymentRequest.IsInitialized())\n-        {\n-            CAmount subtotal = 0;\n-            const payments::PaymentDetails& details = rcp.paymentRequest.getDetails();\n-            for (int j = 0; j < details.outputs_size(); j++)\n-            {\n-                const payments::Output& out = details.outputs(j);\n-                if (out.amount() <= 0) continue;\n-                if (i == nChangePosRet)\n-                    i++;\n-                subtotal += walletTransaction->vout[i].nValue;\n-                i++;\n-            }\n-            rcp.amount = subtotal;\n-        }\n-        else // normal recipient (no payment request)\n-#endif\n         {\n             if (i == nChangePosRet)\n                 i++;"
      }
    ]
  },
  {
    "sha": "72fe13a58d5894afbaf1bb6789ee9b9b6576f20f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MmZlMTNhNThkNTg5NGFmYmFmMWJiNjc4OWVlOWI5YjY1NzZmMjBm",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-10-18T12:35:17Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-10-24T20:01:43Z"
      },
      "message": "gui: remove payment request file handling from OpenURI dialog",
      "tree": {
        "sha": "ba6ddf657f63eeb9119ba3a071945ac84a5ff002",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ba6ddf657f63eeb9119ba3a071945ac84a5ff002"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/72fe13a58d5894afbaf1bb6789ee9b9b6576f20f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl2yAycACgkQLuufXMCV\nJsFJCRAAr1GnAaykZfBY46Dpl+zgiby3mxgYNGOXu7msFFEi4m+25twZtAdN62a4\nQssOf9dZoTwQLLNvrAWoYL61Co20tL1aVx08tGQ1EZtx5h+Hw2rwA11/DPs3lkQs\nnMIvO9kxd1Hg6gzr4OzIJgyO7tSRqixzeAwXIhdE6SrW4N4Gk6NR3eFCQ/N5A06T\nydPmcR0i7y7vHT8SolkQTgDfpAMjJlCAvvT5DkXHymcE3MexfWDfV6KsYndoJfYj\n77bL5MVQB7dLFi5CL/oRiDMJ4DupJe1pgDSEQ5slnzWFvj9OZX3pxVEtNBGqyQyz\nGR5LREEHxFFpmTBN4nO4mO/L7rSxkrBdGnK/L8RM1OKh6RaczrBIu4mwWnkSeqQW\nqPWvJfdvRFMDURXBSUgVIG5NPFw8dtLDNkLi0M+q0boudJTXD5i5A+C4TPZM3Mt4\nO27FazZereb6KhHnL2/rH0TKrdqE8x4AXtJzJBf/VGXG3jVc1Xul/V1Z9nlP5LiI\nJcfPUTWwb7tewxCPsvXbJ1OXcXuvloZtjOyF8jhTwvScvlBhpWXmO62jLoPeABUD\nl79iQ2Da9cA9MUGA7FwzpGimDeagcZLfF+Y6YijsaaZnxk79JMJjJdglWICwlbco\n8N32cCbFmoH37FSWVeGCAAdNUGmnSafTA7ERdD/nSwERCKnULYU=\n=9/vW\n-----END PGP SIGNATURE-----",
        "payload": "tree ba6ddf657f63eeb9119ba3a071945ac84a5ff002\nparent 3548e4aac72e9148d41b440052a89d89328f7661\nauthor fanquake <fanquake@gmail.com> 1571402117 -0400\ncommitter fanquake <fanquake@gmail.com> 1571947303 -0400\n\ngui: remove payment request file handling from OpenURI dialog\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/72fe13a58d5894afbaf1bb6789ee9b9b6576f20f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/72fe13a58d5894afbaf1bb6789ee9b9b6576f20f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/72fe13a58d5894afbaf1bb6789ee9b9b6576f20f/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3548e4aac72e9148d41b440052a89d89328f7661",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3548e4aac72e9148d41b440052a89d89328f7661",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3548e4aac72e9148d41b440052a89d89328f7661"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 3,
      "deletions": 37
    },
    "files": [
      {
        "sha": "2aeba6d82c336712883656c25ecb53d6dc44f4e0",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/72fe13a58d5894afbaf1bb6789ee9b9b6576f20f/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/72fe13a58d5894afbaf1bb6789ee9b9b6576f20f/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=72fe13a58d5894afbaf1bb6789ee9b9b6576f20f",
        "patch": "@@ -330,7 +330,7 @@ void BitcoinGUI::createActions()\n     usedReceivingAddressesAction->setStatusTip(tr(\"Show the list of used receiving addresses and labels\"));\n \n     openAction = new QAction(tr(\"Open &URI...\"), this);\n-    openAction->setStatusTip(tr(\"Open a bitcoin: URI or payment request\"));\n+    openAction->setStatusTip(tr(\"Open a bitcoin: URI\"));\n \n     m_open_wallet_action = new QAction(tr(\"Open Wallet\"), this);\n     m_open_wallet_action->setEnabled(false);"
      },
      {
        "sha": "2acec314fd093a146cabca7b34ae4768a26e7b28",
        "filename": "src/qt/forms/openuridialog.ui",
        "status": "modified",
        "additions": 1,
        "deletions": 21,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/72fe13a58d5894afbaf1bb6789ee9b9b6576f20f/src/qt/forms/openuridialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/72fe13a58d5894afbaf1bb6789ee9b9b6576f20f/src/qt/forms/openuridialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/openuridialog.ui?ref=72fe13a58d5894afbaf1bb6789ee9b9b6576f20f",
        "patch": "@@ -11,16 +11,9 @@\n    </rect>\n   </property>\n   <property name=\"windowTitle\">\n-   <string>Open URI</string>\n+   <string>Open bitcoin URI</string>\n   </property>\n   <layout class=\"QVBoxLayout\" name=\"verticalLayout\">\n-   <item>\n-    <widget class=\"QLabel\" name=\"label_2\">\n-     <property name=\"text\">\n-      <string>Open payment request from URI or file</string>\n-     </property>\n-    </widget>\n-   </item>\n    <item>\n     <layout class=\"QHBoxLayout\" name=\"horizontalLayout\">\n      <item>\n@@ -33,19 +26,6 @@\n      <item>\n       <widget class=\"QValidatedLineEdit\" name=\"uriEdit\"/>\n      </item>\n-     <item>\n-      <widget class=\"QPushButton\" name=\"selectFileButton\">\n-       <property name=\"toolTip\">\n-        <string>Select payment request file</string>\n-       </property>\n-       <property name=\"text\">\n-        <string notr=\"true\">\u2026</string>\n-       </property>\n-       <property name=\"autoDefault\">\n-        <bool>false</bool>\n-       </property>\n-      </widget>\n-     </item>\n     </layout>\n    </item>\n    <item>"
      },
      {
        "sha": "199804f84d7ef8dd383153a7d51ea61a44bc2db9",
        "filename": "src/qt/openuridialog.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 9,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/72fe13a58d5894afbaf1bb6789ee9b9b6576f20f/src/qt/openuridialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/72fe13a58d5894afbaf1bb6789ee9b9b6576f20f/src/qt/openuridialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/openuridialog.cpp?ref=72fe13a58d5894afbaf1bb6789ee9b9b6576f20f",
        "patch": "@@ -39,12 +39,3 @@ void OpenURIDialog::accept()\n         ui->uriEdit->setValid(false);\n     }\n }\n-\n-void OpenURIDialog::on_selectFileButton_clicked()\n-{\n-    QString filename = GUIUtil::getOpenFileName(this, tr(\"Select payment request file to open\"), \"\", \"\", nullptr);\n-    if(filename.isEmpty())\n-        return;\n-    QUrl fileUri = QUrl::fromLocalFile(filename);\n-    ui->uriEdit->setText(\"bitcoin:?r=\" + QUrl::toPercentEncoding(fileUri.toString()));\n-}"
      },
      {
        "sha": "8438f22bd772f2fff20b07fcc8d9f2cb4145a288",
        "filename": "src/qt/openuridialog.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/72fe13a58d5894afbaf1bb6789ee9b9b6576f20f/src/qt/openuridialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/72fe13a58d5894afbaf1bb6789ee9b9b6576f20f/src/qt/openuridialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/openuridialog.h?ref=72fe13a58d5894afbaf1bb6789ee9b9b6576f20f",
        "patch": "@@ -24,9 +24,6 @@ class OpenURIDialog : public QDialog\n protected Q_SLOTS:\n     void accept();\n \n-private Q_SLOTS:\n-    void on_selectFileButton_clicked();\n-\n private:\n     Ui::OpenURIDialog *ui;\n };"
      },
      {
        "sha": "d8d3e2ac14365e4d9420e2b1a8268fb254ecd835",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/72fe13a58d5894afbaf1bb6789ee9b9b6576f20f/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/72fe13a58d5894afbaf1bb6789ee9b9b6576f20f/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=72fe13a58d5894afbaf1bb6789ee9b9b6576f20f",
        "patch": "@@ -185,9 +185,7 @@ PaymentServer::~PaymentServer()\n }\n \n //\n-// OSX-specific way of handling bitcoin: URIs and PaymentRequest mime types.\n-// Also used by paymentservertests.cpp and when opening a payment request file\n-// via \"Open URI...\" menu entry.\n+// OSX-specific way of handling bitcoin: URIs\n //\n bool PaymentServer::eventFilter(QObject *object, QEvent *event)\n {"
      }
    ]
  },
  {
    "sha": "a3e810326d7e70a774ece9e9aa0c571cc9216aab",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphM2U4MTAzMjZkN2U3MGE3NzRlY2U5ZTlhYTBjNTcxY2M5MjE2YWFi",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-10-17T15:49:01Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-10-24T20:01:43Z"
      },
      "message": "build: remove BIP70 entries from macOS Info.plist",
      "tree": {
        "sha": "27330366572283f9ce2c6b1b0e5d4209d6f5f02c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/27330366572283f9ce2c6b1b0e5d4209d6f5f02c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a3e810326d7e70a774ece9e9aa0c571cc9216aab",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl2yAycACgkQLuufXMCV\nJsHuig//dNF1iN3oqkFuETSZVp8hvFps8DfTGYG8SL80EKOejLKGwYA8dlO92a6J\n3DuXGz3g+j8D7zFZHBQ4InVYTlKtl9n3kkUBbhGRlwbVmTGUZ+vW2EQY9gWZLRO2\nQMwlGlwqSIcoq1Izvj2ra6W/rw5KRCXIu44eeuEoy12CdJFeo0h4AUrbodVb6BkW\ngDgZQJILYhbXv6Q2ZmuP3yaPOpCxA/vKjMixstD7qWGlssa6oHy1UUwIxwA4/eIY\nqISaDhL4VcsEDPXHI+47io1tz32uxGW+WhfmNSb1iwhbomZKSaojvGS6zZIuF/lG\nLW7IYzn89Es3xbG3cNpcUoBsOPJUmd0vJfVbDRoK0oSJ1YJyz6IVc09euTJVRaSj\nUCD1BMIlyd2nkwhrT5qOnN4XD/NoEsI5jrk87zqkWFCMOVWBqjj/neDKHiK9+PXP\nSS29TIYZj7pE0WpYDSsQ8WxY7f3tPTZFIqH3Sv90Zb7aYA79jkztkrLi7btCWbbQ\nDyRBev9m5EZqMnRX66Hzz5LI6CBJL2IQH3M0DCgu85FhgXh2HB5l8NMhPcmr0wsx\nbrn/iP1VxMivaT+EviuNipGVOre6s1sAs2OJTEX8GHnH8K+GdC149ChNDdh4oKJd\nn0eEGuDpIPUtiQdNxzyKXm3Rlwkmp/2dCQrIltld7Tw1pcHhPcs=\n=pk7j\n-----END PGP SIGNATURE-----",
        "payload": "tree 27330366572283f9ce2c6b1b0e5d4209d6f5f02c\nparent 72fe13a58d5894afbaf1bb6789ee9b9b6576f20f\nauthor fanquake <fanquake@gmail.com> 1571327341 -0400\ncommitter fanquake <fanquake@gmail.com> 1571947303 -0400\n\nbuild: remove BIP70 entries from macOS Info.plist\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3e810326d7e70a774ece9e9aa0c571cc9216aab",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a3e810326d7e70a774ece9e9aa0c571cc9216aab",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3e810326d7e70a774ece9e9aa0c571cc9216aab/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "72fe13a58d5894afbaf1bb6789ee9b9b6576f20f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/72fe13a58d5894afbaf1bb6789ee9b9b6576f20f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/72fe13a58d5894afbaf1bb6789ee9b9b6576f20f"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 0,
      "deletions": 37
    },
    "files": [
      {
        "sha": "ffa001bb7f22f20d00aa1a51bf1740a38e4c1dd8",
        "filename": "share/qt/Info.plist.in",
        "status": "modified",
        "additions": 0,
        "deletions": 37,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a3e810326d7e70a774ece9e9aa0c571cc9216aab/share/qt/Info.plist.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a3e810326d7e70a774ece9e9aa0c571cc9216aab/share/qt/Info.plist.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/qt/Info.plist.in?ref=a3e810326d7e70a774ece9e9aa0c571cc9216aab",
        "patch": "@@ -54,43 +54,6 @@\n     </dict>\n   </array>\n \n-  <key>UTExportedTypeDeclarations</key>\n-  <array>\n-    <dict>\n-      <key>UTTypeIdentifier</key>\n-      <string>org.bitcoin.paymentrequest</string>\n-      <key>UTTypeDescription</key>\n-      <string>Bitcoin payment request</string>\n-      <key>UTTypeConformsTo</key>\n-      <array>\n-        <string>public.data</string>\n-      </array>\n-      <key>UTTypeTagSpecification</key>\n-      <dict>\n-        <key>public.mime-type</key>\n-        <string>application/x-bitcoin-payment-request</string>\n-        <key>public.filename-extension</key>\n-        <array>\n-          <string>bitcoinpaymentrequest</string>\n-        </array>\n-      </dict>\n-    </dict>\n-  </array>\n-\n-  <key>CFBundleDocumentTypes</key>\n-  <array>\n-    <dict>\n-      <key>CFBundleTypeRole</key>\n-      <string>Editor</string>\n-      <key>LSItemContentTypes</key>\n-      <array>\n-        <string>org.bitcoin.paymentrequest</string>\n-      </array>\n-      <key>LSHandlerRank</key>\n-      <string>Owner</string>\n-    </dict>\n-  </array>\n-\n   <key>NSPrincipalClass</key>\n     <string>NSApplication</string>\n "
      }
    ]
  },
  {
    "sha": "c7f30dbca8034f70488cb494b4d1736c961301b9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjN2YzMGRiY2E4MDM0ZjcwNDg4Y2I0OTRiNGQxNzM2Yzk2MTMwMWI5",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-10-12T16:56:25Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-10-24T20:01:43Z"
      },
      "message": "gui: Update BIP70 support message",
      "tree": {
        "sha": "940b78029a2a6632bc920892a6d5ca6f35d78895",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/940b78029a2a6632bc920892a6d5ca6f35d78895"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c7f30dbca8034f70488cb494b4d1736c961301b9",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl2yAycACgkQLuufXMCV\nJsFt0xAAjReV4r8w9Eak/934xOxY1k83BXEnp6Y5brWnRDJG1/mFadonwXfuyfao\naEwZPYuJ9MhYy01EAR44uOCwVYQJy57ML+0d9dOWv7NEmeKofAZV9PmVnln39C03\nnjSS9RaOKvSqoDA8ZQiS+IveH82AXKLJ6ONgRB2gzLrF3HDlJH+kyJil2APmx/1G\nleDRc52zs+nch37l+9wqIz12fZOF5yzPVcrnpPA0eamQjqUqURkxHMdbDIU7bamj\nDVfVk/vwrtYp2yHFRvvO/tBCO5wTO96d5B8DTNinNpytB/N/g3b74EuP43xt+uc/\nmHpkLJ3VgRZEngSoE3M5X7RDJh6yGgX+7Q+jaw1izjQ/emhI7gbBLuQlgQh6Q7IR\n1dkqYAt0LjN6DTB7Z/+eIL8R7EVaLYJCE23ccJiO27Eidb5UE/0VkgkfUb92DER/\nualogKsW9QKkRQeYtQIaWxXOfRnXUjhGeIz4ip2HAnhtmHkZzthg0SsljcAuK3b6\n8gc9BGGszL5BRiHmMKMumDCaroRK09n85b1nFRhWr9XyLB3Wbnepn5mn9hnNnqjT\nRFkWpsNzKBJFIUPuEr6ab3OgabdnndLxbDaNXDcm1NLatHGF7dDsie9IVvpm8ONW\n10FFeLqgRdqMgP1uFToWcrOWQQdfmLA1hdUGtJVbNbfpKNBOZb0=\n=0RxQ\n-----END PGP SIGNATURE-----",
        "payload": "tree 940b78029a2a6632bc920892a6d5ca6f35d78895\nparent a3e810326d7e70a774ece9e9aa0c571cc9216aab\nauthor fanquake <fanquake@gmail.com> 1570899385 -0400\ncommitter fanquake <fanquake@gmail.com> 1571947303 -0400\n\ngui: Update BIP70 support message\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7f30dbca8034f70488cb494b4d1736c961301b9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c7f30dbca8034f70488cb494b4d1736c961301b9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7f30dbca8034f70488cb494b4d1736c961301b9/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a3e810326d7e70a774ece9e9aa0c571cc9216aab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3e810326d7e70a774ece9e9aa0c571cc9216aab",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a3e810326d7e70a774ece9e9aa0c571cc9216aab"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "6ad219ca2d9ae4fe713df27c69bc7c19d41702b9",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7f30dbca8034f70488cb494b4d1736c961301b9/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7f30dbca8034f70488cb494b4d1736c961301b9/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=c7f30dbca8034f70488cb494b4d1736c961301b9",
        "patch": "@@ -236,7 +236,7 @@ void PaymentServer::handleURIOrFile(const QString& s)\n                 if (!IsValidDestinationString(recipient.address.toStdString())) {\n                     if (uri.hasQueryItem(\"r\")) {  // payment request\n                         Q_EMIT message(tr(\"URI handling\"),\n-                            tr(\"Cannot process payment request because BIP70 support was not compiled in.\")+\n+                            tr(\"Cannot process payment request because BIP70 is not supported.\")+\n                             tr(\"Due to widespread security flaws in BIP70 it's strongly recommended that any merchant instructions to switch wallets be ignored.\")+\n                             tr(\"If you are receiving this error you should request the merchant provide a BIP21 compatible URI.\"),\n                             CClientUIInterface::ICON_WARNING);\n@@ -259,7 +259,7 @@ void PaymentServer::handleURIOrFile(const QString& s)\n     if (QFile::exists(s)) // payment request file\n     {\n         Q_EMIT message(tr(\"Payment request file handling\"),\n-            tr(\"Cannot process payment request because BIP70 support was not compiled in.\")+\n+            tr(\"Cannot process payment request because BIP70 is not supported.\")+\n             tr(\"Due to widespread security flaws in BIP70 it's strongly recommended that any merchant instructions to switch wallets be ignored.\")+\n             tr(\"If you are receiving this error you should request the merchant provide a BIP21 compatible URI.\"),\n             CClientUIInterface::ICON_WARNING);"
      }
    ]
  },
  {
    "sha": "fcee10c2d028cba11416d902f5abf13fea7a65f4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmY2VlMTBjMmQwMjhjYmExMTQxNmQ5MDJmNWFiZjEzZmVhN2E2NWY0",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-10-16T17:43:16Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-10-24T20:01:43Z"
      },
      "message": "build: remove SSL lib detection",
      "tree": {
        "sha": "a6eb82e9a21ac31cf26c07ddbf5636b13a3373f7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a6eb82e9a21ac31cf26c07ddbf5636b13a3373f7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fcee10c2d028cba11416d902f5abf13fea7a65f4",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl2yAycACgkQLuufXMCV\nJsHF0Q//StNt9JLAvV0b18EvIAq1mSOxahzbncQJTDZxQyLH8NqwHR8karAYDd/Z\n16muk19KuexPuAlyvVWJUwBBWIqHwGYgZEf8MQWW6pIFyodAojf08cu5nLMjmzSg\nbyojS3zsaMmFMeWuQ4jpgGEvcihH94pJfF5d2DwfdpAIJky+ckR8NWZVx16g+AtQ\nU4c4JPQTxOCl8L/5LdM6YEK1w8DV/JGeaUSG+quG1Ywa4ukId9T9O//8qV7q3/Uk\nRACTANlXrmj9NVFSjhc/gCNCIyX2xBZaTlT/6M0SmPtPF4uDhgMztEASFtB9BxvH\nTnAZTOxhn3twBcR7APKQbPEeir1yxDC15Qy7Xl+Gg5mHy946WCcgCp2L/srM9S3L\n6ZbSVEWRk2etRJCXrOzctk1UEmfG9k701oQ8Ugt0Rl3TYToRLyjra4MIcGVpMGel\nqQyzdpN6eEj03QJwhN8hh6COJnIXBuCk69lQNoReKggpSi7K8TbO19/vafgXQIsv\nbOpNGqfI8MfcSNkPqkauu0XLJTRq+SUrjDrjWIWh78Gj3S8jdOZ0EpFFyySRpNuX\nszzeNNmja/H/BH5VlFMCmSpQEGEW0nFjDTK3WFZlkB/OCEIazLr8KQNQi578/RUg\nrxq39pdlgVSds6zUCz7kDyfsOQX7HEHUVojP28KGOLOUrestPz0=\n=/ueP\n-----END PGP SIGNATURE-----",
        "payload": "tree a6eb82e9a21ac31cf26c07ddbf5636b13a3373f7\nparent c7f30dbca8034f70488cb494b4d1736c961301b9\nauthor fanquake <fanquake@gmail.com> 1571247796 -0400\ncommitter fanquake <fanquake@gmail.com> 1571947303 -0400\n\nbuild: remove SSL lib detection\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fcee10c2d028cba11416d902f5abf13fea7a65f4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fcee10c2d028cba11416d902f5abf13fea7a65f4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fcee10c2d028cba11416d902f5abf13fea7a65f4/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c7f30dbca8034f70488cb494b4d1736c961301b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7f30dbca8034f70488cb494b4d1736c961301b9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c7f30dbca8034f70488cb494b4d1736c961301b9"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 1,
      "deletions": 6
    },
    "files": [
      {
        "sha": "860329022a8f7d174dfe5f23cf0db118c2391a61",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fcee10c2d028cba11416d902f5abf13fea7a65f4/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fcee10c2d028cba11416d902f5abf13fea7a65f4/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=fcee10c2d028cba11416d902f5abf13fea7a65f4",
        "patch": "@@ -1240,7 +1240,6 @@ if test x$use_pkgconfig = xyes; then\n   m4_ifdef(\n     [PKG_CHECK_MODULES],\n     [\n-      PKG_CHECK_MODULES([SSL], [libssl],, [AC_MSG_ERROR(openssl not found.)])\n       PKG_CHECK_MODULES([CRYPTO], [libcrypto],,[AC_MSG_ERROR(libcrypto not found.)])\n       if test x$use_qr != xno; then\n         BITCOIN_QT_CHECK([PKG_CHECK_MODULES([QR], [libqrencode], [have_qrencode=yes], [have_qrencode=no])])\n@@ -1267,9 +1266,6 @@ else\n   AC_CHECK_HEADER([openssl/crypto.h],,AC_MSG_ERROR(libcrypto headers missing))\n   AC_CHECK_LIB([crypto],      [main],CRYPTO_LIBS=-lcrypto, AC_MSG_ERROR(libcrypto missing))\n \n-  AC_CHECK_HEADER([openssl/ssl.h],, AC_MSG_ERROR(libssl headers missing),)\n-  AC_CHECK_LIB([ssl],         [main],SSL_LIBS=-lssl, AC_MSG_ERROR(libssl missing))\n-\n   if test x$build_bitcoin_cli$build_bitcoind$bitcoin_enable_qt$use_tests != xnononono; then\n     AC_CHECK_HEADER([event2/event.h],, AC_MSG_ERROR(libevent headers missing),)\n     AC_CHECK_LIB([event],[main],EVENT_LIBS=-levent,AC_MSG_ERROR(libevent missing))\n@@ -1596,7 +1592,6 @@ AC_SUBST(LEVELDB_TARGET_FLAGS)\n AC_SUBST(MINIUPNPC_CPPFLAGS)\n AC_SUBST(MINIUPNPC_LIBS)\n AC_SUBST(CRYPTO_LIBS)\n-AC_SUBST(SSL_LIBS)\n AC_SUBST(EVENT_LIBS)\n AC_SUBST(EVENT_PTHREADS_LIBS)\n AC_SUBST(ZMQ_LIBS)"
      },
      {
        "sha": "2093ed15e2904611f172d3f7afd75d508e641870",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fcee10c2d028cba11416d902f5abf13fea7a65f4/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fcee10c2d028cba11416d902f5abf13fea7a65f4/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=fcee10c2d028cba11416d902f5abf13fea7a65f4",
        "patch": "@@ -19,7 +19,7 @@ else\n LIBUNIVALUE = $(UNIVALUE_LIBS)\n endif\n \n-BITCOIN_INCLUDES=-I$(builddir) $(BDB_CPPFLAGS) $(BOOST_CPPFLAGS) $(LEVELDB_CPPFLAGS) $(CRYPTO_CFLAGS) $(SSL_CFLAGS)\n+BITCOIN_INCLUDES=-I$(builddir) $(BDB_CPPFLAGS) $(BOOST_CPPFLAGS) $(LEVELDB_CPPFLAGS) $(CRYPTO_CFLAGS)\n \n BITCOIN_INCLUDES += -I$(srcdir)/secp256k1/include\n BITCOIN_INCLUDES += $(UNIVALUE_CFLAGS)"
      }
    ]
  },
  {
    "sha": "befbc40eb5928ac20a85fd3446946895cd2e66cb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZWZiYzQwZWI1OTI4YWMyMGE4NWZkMzQ0Njk0Njg5NWNkMmU2NmNi",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-10-12T16:54:13Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-10-24T20:01:43Z"
      },
      "message": "build: remove EVP_MD_CTX_new detection\n\nThis was added in #9475 to fix LibreSSL compatibility for\nBIP70, so is no longer required.",
      "tree": {
        "sha": "fe7011a4d33e4ab802af557a222fb9037a241429",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fe7011a4d33e4ab802af557a222fb9037a241429"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/befbc40eb5928ac20a85fd3446946895cd2e66cb",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl2yAycACgkQLuufXMCV\nJsGU6BAAqEJpHkPBCvzuKpD4j/n35uN8rWh1Tk9p3rqdMwqmrxVkXojEjO8AeTPw\nbeAM8IZdcuh+XcfPkCUMqNDSGgGzLVeHV81Pr/JmMfv0mEbNEqAyrgann7I+z4c0\n42/I6hs6c4zJggBcGvX4rQtTSpZZrJuYZcYe2IjTO11MfJiAuRk3yWaB71MEdVLa\nH0vczTGbAaQ7hg0WjpQ7rsQSstP7eZB+yxDzlUcCQEO2HfK6dQRbCZmpeggKm6HB\nHr9lLW/Rqt0U20MFxewxvRtshGAaL3MK+t+KA/XK+3TP0YI6AoglpxcqOBlZexcI\nH9VaXqIbkbgF8y+rJYkT0n1/3iEb4AElfu9lr7e7Qjwy1tG3xS+BMlI3EzMbQ+vc\n0JxnsmQYRdBF8n863iEHEHG3fBGROotbd1bWL+HPwFXhE893/xizoSs6m3sYGd3U\nTlLXZbfXORxtUIKOyBnaukRewn3QETRCDJSLn5WREd/uGEdefJfI90vqkK42cfFh\nqXAdcMo2bapmt4H1deWEJbYOABg1pFfl8+dEiHb99ToxGuhu2UydpI7byHmCYg37\n+VFAIdy4feAvaZg5M2X67hrzv1cP29uazA1teiigYrGBBWYiLDcv8816QTLhaYTB\nAInI16s0HI37rZthGpHpZlsTetG8iIzmgJnLhm7qQd8HASCEM+8=\n=PeT2\n-----END PGP SIGNATURE-----",
        "payload": "tree fe7011a4d33e4ab802af557a222fb9037a241429\nparent fcee10c2d028cba11416d902f5abf13fea7a65f4\nauthor fanquake <fanquake@gmail.com> 1570899253 -0400\ncommitter fanquake <fanquake@gmail.com> 1571947303 -0400\n\nbuild: remove EVP_MD_CTX_new detection\n\nThis was added in #9475 to fix LibreSSL compatibility for\nBIP70, so is no longer required.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/befbc40eb5928ac20a85fd3446946895cd2e66cb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/befbc40eb5928ac20a85fd3446946895cd2e66cb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/befbc40eb5928ac20a85fd3446946895cd2e66cb/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fcee10c2d028cba11416d902f5abf13fea7a65f4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fcee10c2d028cba11416d902f5abf13fea7a65f4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fcee10c2d028cba11416d902f5abf13fea7a65f4"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 0,
      "deletions": 11
    },
    "files": [
      {
        "sha": "e892765fdecddcb03802c839a8b31f8bd66edd88",
        "filename": "build_msvc/bitcoin_config.h",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/befbc40eb5928ac20a85fd3446946895cd2e66cb/build_msvc/bitcoin_config.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/befbc40eb5928ac20a85fd3446946895cd2e66cb/build_msvc/bitcoin_config.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bitcoin_config.h?ref=befbc40eb5928ac20a85fd3446946895cd2e66cb",
        "patch": "@@ -98,10 +98,6 @@\n    */\n #define HAVE_DECL_DAEMON 0\n \n-/* Define to 1 if you have the declaration of `EVP_MD_CTX_new', and to 0 if\n-   you don't. */\n-//#define HAVE_DECL_EVP_MD_CTX_NEW 1\n-\n /* Define to 1 if you have the declaration of `htobe16', and to 0 if you\n    don't. */\n #define HAVE_DECL_HTOBE16 0"
      },
      {
        "sha": "9f2942dc9ffd1990c0a8ffad22b6fa3e56b34494",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/befbc40eb5928ac20a85fd3446946895cd2e66cb/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/befbc40eb5928ac20a85fd3446946895cd2e66cb/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=befbc40eb5928ac20a85fd3446946895cd2e66cb",
        "patch": "@@ -1303,13 +1303,6 @@ else\n   fi\n fi\n \n-save_CXXFLAGS=\"${CXXFLAGS}\"\n-CXXFLAGS=\"${CXXFLAGS} ${CRYPTO_CFLAGS} ${SSL_CFLAGS}\"\n-AC_CHECK_DECLS([EVP_MD_CTX_new],,,[AC_INCLUDES_DEFAULT\n-#include <openssl/x509_vfy.h>\n-])\n-CXXFLAGS=\"${save_CXXFLAGS}\"\n-\n dnl RapidCheck property-based testing\n \n enable_property_tests=no"
      }
    ]
  },
  {
    "sha": "45a2d3c5526551c279b624e111fe83d1f30b10db",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NWEyZDNjNTUyNjU1MWMyNzliNjI0ZTExMWZlODNkMWYzMGIxMGRi",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-10-15T21:10:32Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-10-24T20:01:44Z"
      },
      "message": "build: remove OpenSSL from Qt build\n\nMore info available from:\nhttps://doc.qt.io/qt-5/ssl.html#enabling-and-disabling-ssl-support",
      "tree": {
        "sha": "6415c2e2983e04b6d5bdab53e0427bf47af8b070",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6415c2e2983e04b6d5bdab53e0427bf47af8b070"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/45a2d3c5526551c279b624e111fe83d1f30b10db",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl2yAygACgkQLuufXMCV\nJsGx/w//bB7V54q7ReDeKi3fAnFmVFjBYYqQ4nr+Vz9HhqLQQOq157REd/QI/3M5\nCdkb7uXweAs/UbInnmUiuD+nbj55tOjiKJ4saMH9kOhKMTsSUk44ROF6FbYYmAgL\ngv7PaWtKf/qZgXb0C5pKiIygUFV4KFDGRWv2h8oSdBG8rZ4XlvD7CLGauuY8ma19\n8bfnu6weKnr2L1eQ7OxKXRWqaLqxJNmZhysbjYqS3rqkjo8XCzsLel4/WxLyqoD+\nZh6ZGYtGqjcevnfwGN4a+Mfynq1Op8vs1CAvoVJvn1vgenfopewQVHSdJgQbdaKP\nATEePk4WK80yv5ssjV0WwQK0xUvqGoU9cy2ucq8y2uQiZBlO34CK85M9YoiqYj5v\nczMQEiRXhHR2El7mnX97bKUH9RiU0nW303V442aI5xAP2pebhjTSBcw3ukUEwYhM\nfwLOdazSocmgZjlN9whh42I/cdj/At8eMo0TI6R7iep5gxtOfIxtHS9yQXmtyYbg\nQDgBL7N8Wmlvke5F5/PW02MQvLZGjQ3j8Mz6EEiwmUQQateTWZyjpZfEWiibswfi\nLQUzZSZdobrrKM8UfBNvmyj1lN2lv1se9twDSPkNx9eFyD+5W+vwLW3qT5DICRBn\nXH+7xGK+DfdbLshSedWnwUZx5dBZ55ES9gdqXkT0MA3LtfX4E5U=\n=7/4h\n-----END PGP SIGNATURE-----",
        "payload": "tree 6415c2e2983e04b6d5bdab53e0427bf47af8b070\nparent befbc40eb5928ac20a85fd3446946895cd2e66cb\nauthor fanquake <fanquake@gmail.com> 1571173832 -0400\ncommitter fanquake <fanquake@gmail.com> 1571947304 -0400\n\nbuild: remove OpenSSL from Qt build\n\nMore info available from:\nhttps://doc.qt.io/qt-5/ssl.html#enabling-and-disabling-ssl-support\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45a2d3c5526551c279b624e111fe83d1f30b10db",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/45a2d3c5526551c279b624e111fe83d1f30b10db",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45a2d3c5526551c279b624e111fe83d1f30b10db/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "befbc40eb5928ac20a85fd3446946895cd2e66cb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/befbc40eb5928ac20a85fd3446946895cd2e66cb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/befbc40eb5928ac20a85fd3446946895cd2e66cb"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 3,
      "deletions": 2
    },
    "files": [
      {
        "sha": "0685eb2da229268ed9666f244e401f94e331c793",
        "filename": "depends/packages/qt.mk",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45a2d3c5526551c279b624e111fe83d1f30b10db/depends/packages/qt.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45a2d3c5526551c279b624e111fe83d1f30b10db/depends/packages/qt.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/qt.mk?ref=45a2d3c5526551c279b624e111fe83d1f30b10db",
        "patch": "@@ -4,7 +4,7 @@ $(package)_download_path=https://download.qt.io/official_releases/qt/5.9/$($(pac\n $(package)_suffix=opensource-src-$($(package)_version).tar.xz\n $(package)_file_name=qtbase-$($(package)_suffix)\n $(package)_sha256_hash=9b9dec1f67df1f94bce2955c5604de992d529dde72050239154c56352da0907d\n-$(package)_dependencies=openssl zlib\n+$(package)_dependencies=zlib\n $(package)_linux_dependencies=freetype fontconfig libxcb\n $(package)_build_subdir=qtbase\n $(package)_qt_libs=corelib network widgets gui plugins testlib\n@@ -42,9 +42,11 @@ $(package)_config_opts += -no-linuxfb\n $(package)_config_opts += -no-libjpeg\n $(package)_config_opts += -no-libudev\n $(package)_config_opts += -no-mtdev\n+$(package)_config_opts += -no-openssl\n $(package)_config_opts += -no-openvg\n $(package)_config_opts += -no-reduce-relocations\n $(package)_config_opts += -no-qml-debug\n+$(package)_config_opts += -no-securetransport\n $(package)_config_opts += -no-sql-db2\n $(package)_config_opts += -no-sql-ibase\n $(package)_config_opts += -no-sql-oci\n@@ -59,7 +61,6 @@ $(package)_config_opts += -no-xinput2\n $(package)_config_opts += -nomake examples\n $(package)_config_opts += -nomake tests\n $(package)_config_opts += -opensource\n-$(package)_config_opts += -openssl-linked\n $(package)_config_opts += -optimized-qmake\n $(package)_config_opts += -pch\n $(package)_config_opts += -pkg-config"
      }
    ]
  },
  {
    "sha": "2cba35ab38b492768e85bd77442a566dda169466",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyY2JhMzVhYjM4YjQ5Mjc2OGU4NWJkNzc0NDJhNTY2ZGRhMTY5NDY2",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-10-19T16:06:47Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-10-24T20:01:44Z"
      },
      "message": "build: skip building OpenSSL lib_ssl",
      "tree": {
        "sha": "92f6b1b24676f211b6592002feba8b3b7bfc0e50",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/92f6b1b24676f211b6592002feba8b3b7bfc0e50"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2cba35ab38b492768e85bd77442a566dda169466",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl2yAygACgkQLuufXMCV\nJsEfXg/+IuKt98fpSnE8cTKu/bjEPFjid+vYO1AM4ljEIDN9LcFqOlz7jl96eS3V\ngMFjQ93ohIQ0dwxtnW9srkQ0LBr5RnC5XJsR2PcawWx9pQvj082B3qGcFBZLFEK6\nZX6cvJWl503oxpJ6f0YzXyv8UInzb2Tqgb4xhiVouYYIy1VujO3/BaXqtbnD6NPC\nYLBCs9Hdh2yZrIEFOrQbU0HVTxOYieAhyMH3xX5hsG2/7GI0TPmzAGWMnaHiwXxV\nVxPk0RP44GhrX6c9PjmRKDpMCt9sKBbpGpK8eu716lVAharTXP19jrQ07n2VatK9\nPbzktD0Zy0p8rn57+bwQ0USkmOfDU5qRDEmHCTrgftXMhyXBCy/Qjm4O1YeM57Ez\nluXgl6azO/HsPlKfAw4bOSpQRXw4seWv/yn+JuvCTppw12iJI8ueM6in9LE0XYgF\nW/KrqAjcjKMKIbG+zOspKy5nt3rc2/VG0hO4xebOQfioT6EhlAQVbO6H+LpQb28Z\nWp6pxbzslftPK1rHd8l4iKqHtuaeZhDCvFKk8NjWMviHamhoPQ5MGSV7h+aXxtcn\nb5VojpmGp0tua16LfLcukejghgyyaA6N/0zJvU5+BCrt6YwOsmEpygjZl51+BDKd\n9wEZMQzeseZmDIhzGXkFAoyNs12TqeCFeZzES8wHgw1GDZ51Tuw=\n=Imsc\n-----END PGP SIGNATURE-----",
        "payload": "tree 92f6b1b24676f211b6592002feba8b3b7bfc0e50\nparent 45a2d3c5526551c279b624e111fe83d1f30b10db\nauthor fanquake <fanquake@gmail.com> 1571501207 -0400\ncommitter fanquake <fanquake@gmail.com> 1571947304 -0400\n\nbuild: skip building OpenSSL lib_ssl\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2cba35ab38b492768e85bd77442a566dda169466",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2cba35ab38b492768e85bd77442a566dda169466",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2cba35ab38b492768e85bd77442a566dda169466/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "45a2d3c5526551c279b624e111fe83d1f30b10db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45a2d3c5526551c279b624e111fe83d1f30b10db",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/45a2d3c5526551c279b624e111fe83d1f30b10db"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "3498a3f6ee339b826837522b38ba0270f4ba3170",
        "filename": "depends/packages/openssl.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2cba35ab38b492768e85bd77442a566dda169466/depends/packages/openssl.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2cba35ab38b492768e85bd77442a566dda169466/depends/packages/openssl.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/openssl.mk?ref=2cba35ab38b492768e85bd77442a566dda169466",
        "patch": "@@ -71,7 +71,7 @@ define $(package)_config_cmds\n endef\n \n define $(package)_build_cmds\n-  $(MAKE) -j1 build_libs libcrypto.pc libssl.pc openssl.pc\n+  $(MAKE) -j1 build_crypto libcrypto.pc libssl.pc openssl.pc\n endef\n \n define $(package)_stage_cmds"
      }
    ]
  },
  {
    "sha": "8c6081a884cd0969160955ce8687d4d4ed074db3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YzYwODFhODg0Y2QwOTY5MTYwOTU1Y2U4Njg3ZDRkNGVkMDc0ZGIz",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-10-19T17:45:36Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-10-24T20:01:44Z"
      },
      "message": "compat: remove bswap_* check on macOS\n\nThis was originally added in #9366 to fix the gui build, as\nProtobuf would also define these macros. Now that we're no-longer\nusing Protobuf, remove the additional check.",
      "tree": {
        "sha": "6ce4d70261c22574a3bf51c64af96f9e1615a1ca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6ce4d70261c22574a3bf51c64af96f9e1615a1ca"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8c6081a884cd0969160955ce8687d4d4ed074db3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl2yAygACgkQLuufXMCV\nJsG6Tg/9G9rzAj650gkvXPOwYUAWtChRR8ZkGztcEjPT+UHJR+Pj6z1zngpRejbR\nqq6joS2a1S9xTMYzi0tjgqDZuNOpwvHJQEIU3VhMXMh4sFfrf8DoF6ob4N7A8Lrh\nuXGQVnyyrKcyxaU/rdAyjljY60gWsJRqI5G34n60kARRgQv/JGDKMTzLB/NJjC7p\nhKrhViAd/Fe3jHyPOW2VpAj2xYuPmI2aiD7igILGpeutaED77npwCXxoj03qXH89\n0RVZH4YWXFHNYzxB3DI+W4eb6ZRchpBpKHNvSu+UX24XVOJsjWNiObSJVDXAW6uh\nhm+kiTGfLD1xnleQv12AMUtfMiQSshLpN5ZAsM2fI229PJzvtR1wKY62ibxN0sJx\n56J5iQ4fOQde3kCmFaXAKiIe9KnJwxFo7oiVzUuoeGP9fxksUsXkQNsiIyap7Jm1\ncxejYQrUKFKkgZyLwsD0DgBoF+TLLQCVX6k4pEnV89UGGZdmXVV7RTBqIfiW6yHq\n+Uv2UJerSXJOx8Tr6hUMxqKUsgYIMgz1qm2Wn2Nj+B8ZNbSJOfcE7i/32uR6ZX5f\nNA6m1TDJ5mZU00oK8mo1PIc7dXViLwrmdNvlE5e0YyxsOooH4GxGUuTLCvII8pNf\nakkFa7c6v3745kf94rjv5hg6o8XTwvKVssT9oNsaFEC+QHuIU/I=\n=SwSD\n-----END PGP SIGNATURE-----",
        "payload": "tree 6ce4d70261c22574a3bf51c64af96f9e1615a1ca\nparent 2cba35ab38b492768e85bd77442a566dda169466\nauthor fanquake <fanquake@gmail.com> 1571507136 -0400\ncommitter fanquake <fanquake@gmail.com> 1571947304 -0400\n\ncompat: remove bswap_* check on macOS\n\nThis was originally added in #9366 to fix the gui build, as\nProtobuf would also define these macros. Now that we're no-longer\nusing Protobuf, remove the additional check.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c6081a884cd0969160955ce8687d4d4ed074db3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8c6081a884cd0969160955ce8687d4d4ed074db3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c6081a884cd0969160955ce8687d4d4ed074db3/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2cba35ab38b492768e85bd77442a566dda169466",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2cba35ab38b492768e85bd77442a566dda169466",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2cba35ab38b492768e85bd77442a566dda169466"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 1,
      "deletions": 8
    },
    "files": [
      {
        "sha": "c254fe7cbf3b8f4ced893a5575d3485802a56513",
        "filename": "src/compat/byteswap.h",
        "status": "modified",
        "additions": 1,
        "deletions": 8,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c6081a884cd0969160955ce8687d4d4ed074db3/src/compat/byteswap.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c6081a884cd0969160955ce8687d4d4ed074db3/src/compat/byteswap.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/byteswap.h?ref=8c6081a884cd0969160955ce8687d4d4ed074db3",
        "patch": "@@ -17,20 +17,13 @@\n \n #if defined(MAC_OSX)\n \n-#if !defined(bswap_16)\n-\n-// Mac OS X / Darwin features; we include a check for bswap_16 because if it is already defined, protobuf has\n-// defined these macros for us already; if it isn't, we do it ourselves. In either case, we get the exact same\n-// result regardless which path was taken\n #include <libkern/OSByteOrder.h>\n #define bswap_16(x) OSSwapInt16(x)\n #define bswap_32(x) OSSwapInt32(x)\n #define bswap_64(x) OSSwapInt64(x)\n \n-#endif // !defined(bswap_16)\n-\n #else\n-// Non-Mac OS X / non-Darwin\n+// Non-MacOS / non-Darwin\n \n #if HAVE_DECL_BSWAP_16 == 0\n inline uint16_t bswap_16(uint16_t x)"
      }
    ]
  }
]