[
  {
    "sha": "92617b7a758c0425330fba4b886296730567927c",
    "node_id": "C_kwDOABII59oAKDkyNjE3YjdhNzU4YzA0MjUzMzBmYmE0Yjg4NjI5NjczMDU2NzkyN2M",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-10-05T20:13:41Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-10-22T16:06:36Z"
      },
      "message": "Make AddrMan support multiple ports per IP",
      "tree": {
        "sha": "4a377242223309d1f0aca1fefb0544b99d42044c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4a377242223309d1f0aca1fefb0544b99d42044c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/92617b7a758c0425330fba4b886296730567927c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92617b7a758c0425330fba4b886296730567927c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/92617b7a758c0425330fba4b886296730567927c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92617b7a758c0425330fba4b886296730567927c/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ff65b696f3c6f6e17a790c6646249163ddb39eda",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff65b696f3c6f6e17a790c6646249163ddb39eda",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ff65b696f3c6f6e17a790c6646249163ddb39eda"
      }
    ],
    "stats": {
      "total": 115,
      "additions": 53,
      "deletions": 62
    },
    "files": [
      {
        "sha": "92937abcb5ae0ccc4d9baf50f5192a51f7eb4a7c",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 17,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92617b7a758c0425330fba4b886296730567927c/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92617b7a758c0425330fba4b886296730567927c/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=92617b7a758c0425330fba4b886296730567927c",
        "patch": "@@ -401,7 +401,7 @@ void AddrManImpl::Unserialize(Stream& s_)\n     }\n }\n \n-AddrInfo* AddrManImpl::Find(const CNetAddr& addr, int* pnId)\n+AddrInfo* AddrManImpl::Find(const CService& addr, int* pnId)\n {\n     AssertLockHeld(cs);\n \n@@ -556,10 +556,6 @@ void AddrManImpl::Good_(const CService& addr, bool test_before_evict, int64_t nT\n \n     AddrInfo& info = *pinfo;\n \n-    // check whether we are talking about the exact same CService (including same port)\n-    if (info != addr)\n-        return;\n-\n     // update info\n     info.nLastSuccess = nTime;\n     info.nLastTry = nTime;\n@@ -683,10 +679,6 @@ void AddrManImpl::Attempt_(const CService& addr, bool fCountFailure, int64_t nTi\n \n     AddrInfo& info = *pinfo;\n \n-    // check whether we are talking about the exact same CService (including same port)\n-    if (info != addr)\n-        return;\n-\n     // update info\n     info.nLastTry = nTime;\n     if (fCountFailure && info.nLastCountAttempt < nLastGood) {\n@@ -796,10 +788,6 @@ void AddrManImpl::Connected_(const CService& addr, int64_t nTime)\n \n     AddrInfo& info = *pinfo;\n \n-    // check whether we are talking about the exact same CService (including same port)\n-    if (info != addr)\n-        return;\n-\n     // update info\n     int64_t nUpdateInterval = 20 * 60;\n     if (nTime - info.nTime > nUpdateInterval)\n@@ -818,10 +806,6 @@ void AddrManImpl::SetServices_(const CService& addr, ServiceFlags nServices)\n \n     AddrInfo& info = *pinfo;\n \n-    // check whether we are talking about the exact same CService (including same port)\n-    if (info != addr)\n-        return;\n-\n     // update info\n     info.nServices = nServices;\n }"
      },
      {
        "sha": "f8191d6b852c313c6e5b2e97c898e8706159a36b",
        "filename": "src/addrman_impl.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92617b7a758c0425330fba4b886296730567927c/src/addrman_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92617b7a758c0425330fba4b886296730567927c/src/addrman_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman_impl.h?ref=92617b7a758c0425330fba4b886296730567927c",
        "patch": "@@ -179,8 +179,8 @@ class AddrManImpl\n     //! table with information about all nIds\n     std::unordered_map<int, AddrInfo> mapInfo GUARDED_BY(cs);\n \n-    //! find an nId based on its network address\n-    std::unordered_map<CNetAddr, int, CNetAddrHash> mapAddr GUARDED_BY(cs);\n+    //! find an nId based on its network address and port.\n+    std::unordered_map<CService, int, CServiceHash> mapAddr GUARDED_BY(cs);\n \n     //! randomly-ordered vector of all nIds\n     //! This is mutable because it is unobservable outside the class, so any\n@@ -225,7 +225,7 @@ class AddrManImpl\n     const std::vector<bool> m_asmap;\n \n     //! Find an entry.\n-    AddrInfo* Find(const CNetAddr& addr, int* pnId = nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    AddrInfo* Find(const CService& addr, int* pnId = nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n     //! Create a new entry and add it to the internal data structures mapInfo, mapAddr and vRandom.\n     AddrInfo* Create(const CAddress& addr, const CNetAddr& addrSource, int* pnId = nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs);"
      },
      {
        "sha": "57eb8bc72f7897f01c230c0398683dd24f91c22a",
        "filename": "src/netaddress.h",
        "status": "modified",
        "additions": 19,
        "deletions": 17,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92617b7a758c0425330fba4b886296730567927c/src/netaddress.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92617b7a758c0425330fba4b886296730567927c/src/netaddress.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.h?ref=92617b7a758c0425330fba4b886296730567927c",
        "patch": "@@ -253,7 +253,6 @@ class CNetAddr\n         }\n     }\n \n-    friend class CNetAddrHash;\n     friend class CSubNet;\n \n private:\n@@ -467,22 +466,6 @@ class CNetAddr\n     }\n };\n \n-class CNetAddrHash\n-{\n-public:\n-    size_t operator()(const CNetAddr& a) const noexcept\n-    {\n-        CSipHasher hasher(m_salt_k0, m_salt_k1);\n-        hasher.Write(a.m_net);\n-        hasher.Write(a.m_addr.data(), a.m_addr.size());\n-        return static_cast<size_t>(hasher.Finalize());\n-    }\n-\n-private:\n-    const uint64_t m_salt_k0 = GetRand(std::numeric_limits<uint64_t>::max());\n-    const uint64_t m_salt_k1 = GetRand(std::numeric_limits<uint64_t>::max());\n-};\n-\n class CSubNet\n {\n protected:\n@@ -565,6 +548,25 @@ class CService : public CNetAddr\n         READWRITEAS(CNetAddr, obj);\n         READWRITE(Using<BigEndianFormatter<2>>(obj.port));\n     }\n+\n+    friend class CServiceHash;\n+};\n+\n+class CServiceHash\n+{\n+public:\n+    size_t operator()(const CService& a) const noexcept\n+    {\n+        CSipHasher hasher(m_salt_k0, m_salt_k1);\n+        hasher.Write(a.m_net);\n+        hasher.Write(a.port);\n+        hasher.Write(a.m_addr.data(), a.m_addr.size());\n+        return static_cast<size_t>(hasher.Finalize());\n+    }\n+\n+private:\n+    const uint64_t m_salt_k0 = GetRand(std::numeric_limits<uint64_t>::max());\n+    const uint64_t m_salt_k1 = GetRand(std::numeric_limits<uint64_t>::max());\n };\n \n #endif // BITCOIN_NETADDRESS_H"
      },
      {
        "sha": "991bfa5efc78bd3f362565efe60ce6137b99210e",
        "filename": "src/test/addrman_tests.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92617b7a758c0425330fba4b886296730567927c/src/test/addrman_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92617b7a758c0425330fba4b886296730567927c/src/test/addrman_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/addrman_tests.cpp?ref=92617b7a758c0425330fba4b886296730567927c",
        "patch": "@@ -89,7 +89,7 @@ class AddrManTest : public AddrMan\n         deterministic = makeDeterministic;\n     }\n \n-    AddrInfo* Find(const CNetAddr& addr, int* pnId = nullptr)\n+    AddrInfo* Find(const CService& addr, int* pnId = nullptr)\n     {\n         LOCK(m_impl->cs);\n         return m_impl->Find(addr, pnId);\n@@ -222,15 +222,15 @@ BOOST_AUTO_TEST_CASE(addrman_ports)\n     BOOST_CHECK_EQUAL(addrman.size(), 1U);\n \n     CService addr1_port = ResolveService(\"250.1.1.1\", 8334);\n-    BOOST_CHECK(!addrman.Add({CAddress(addr1_port, NODE_NONE)}, source));\n-    BOOST_CHECK_EQUAL(addrman.size(), 1U);\n+    BOOST_CHECK(addrman.Add({CAddress(addr1_port, NODE_NONE)}, source));\n+    BOOST_CHECK_EQUAL(addrman.size(), 2U);\n     auto addr_ret2 = addrman.Select().first;\n-    BOOST_CHECK_EQUAL(addr_ret2.ToString(), \"250.1.1.1:8333\");\n+    BOOST_CHECK(addr_ret2.ToString() == \"250.1.1.1:8333\" || addr_ret2.ToString() == \"250.1.1.1:8334\");\n \n-    // Test: Add same IP but diff port to tried table, it doesn't get added.\n-    //  Perhaps this is not ideal behavior but it is the current behavior.\n+    // Test: Add same IP but diff port to tried table; this converts the entry with\n+    // the specified port to tried, but not the other.\n     addrman.Good(CAddress(addr1_port, NODE_NONE));\n-    BOOST_CHECK_EQUAL(addrman.size(), 1U);\n+    BOOST_CHECK_EQUAL(addrman.size(), 2U);\n     bool newOnly = true;\n     auto addr_ret3 = addrman.Select(newOnly).first;\n     BOOST_CHECK_EQUAL(addr_ret3.ToString(), \"250.1.1.1:8333\");\n@@ -369,18 +369,18 @@ BOOST_AUTO_TEST_CASE(addrman_find)\n     CNetAddr source2 = ResolveIP(\"250.1.2.2\");\n \n     BOOST_CHECK(addrman.Add({addr1}, source1));\n-    BOOST_CHECK(!addrman.Add({addr2}, source2));\n+    BOOST_CHECK(addrman.Add({addr2}, source2));\n     BOOST_CHECK(addrman.Add({addr3}, source1));\n \n-    // Test: ensure Find returns an IP matching what we searched on.\n+    // Test: ensure Find returns an IP/port matching what we searched on.\n     AddrInfo* info1 = addrman.Find(addr1);\n     BOOST_REQUIRE(info1);\n     BOOST_CHECK_EQUAL(info1->ToString(), \"250.1.2.1:8333\");\n \n-    // Test 18; Find does not discriminate by port number.\n+    // Test; Find discriminates by port number.\n     AddrInfo* info2 = addrman.Find(addr2);\n     BOOST_REQUIRE(info2);\n-    BOOST_CHECK_EQUAL(info2->ToString(), info1->ToString());\n+    BOOST_CHECK_EQUAL(info2->ToString(), \"250.1.2.1:9999\");\n \n     // Test: Find returns another IP matching what we searched on.\n     AddrInfo* info3 = addrman.Find(addr3);"
      },
      {
        "sha": "c6df6a0e6185e35967094de6a54fbde727157341",
        "filename": "src/test/fuzz/addrman.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 14,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92617b7a758c0425330fba4b886296730567927c/src/test/fuzz/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92617b7a758c0425330fba4b886296730567927c/src/test/fuzz/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/addrman.cpp?ref=92617b7a758c0425330fba4b886296730567927c",
        "patch": "@@ -137,24 +137,29 @@ class AddrManDeterministic : public AddrMan\n         // Check that all values in `mapInfo` are equal to all values in `other.mapInfo`.\n         // Keys may be different.\n \n-        using AddrInfoHasher = std::function<size_t(const AddrInfo&)>;\n-        using AddrInfoEq = std::function<bool(const AddrInfo&, const AddrInfo&)>;\n-\n-        CNetAddrHash netaddr_hasher;\n-\n-        AddrInfoHasher addrinfo_hasher = [&netaddr_hasher](const AddrInfo& a) {\n-            return netaddr_hasher(static_cast<CNetAddr>(a)) ^ netaddr_hasher(a.source) ^\n-                   a.nLastSuccess ^ a.nAttempts ^ a.nRefCount ^ a.fInTried;\n+        auto addrinfo_hasher = [](const AddrInfo& a) {\n+            CSipHasher hasher(0, 0);\n+            auto addr_key = a.GetKey();\n+            auto source_key = a.source.GetAddrBytes();\n+            hasher.Write(a.nLastSuccess);\n+            hasher.Write(a.nAttempts);\n+            hasher.Write(a.nRefCount);\n+            hasher.Write(a.fInTried);\n+            hasher.Write(a.GetNetwork());\n+            hasher.Write(a.source.GetNetwork());\n+            hasher.Write(addr_key.size());\n+            hasher.Write(source_key.size());\n+            hasher.Write(addr_key.data(), addr_key.size());\n+            hasher.Write(source_key.data(), source_key.size());\n+            return (size_t)hasher.Finalize();\n         };\n \n-        AddrInfoEq addrinfo_eq = [](const AddrInfo& lhs, const AddrInfo& rhs) {\n-            return static_cast<CNetAddr>(lhs) == static_cast<CNetAddr>(rhs) &&\n-                   lhs.source == rhs.source && lhs.nLastSuccess == rhs.nLastSuccess &&\n-                   lhs.nAttempts == rhs.nAttempts && lhs.nRefCount == rhs.nRefCount &&\n-                   lhs.fInTried == rhs.fInTried;\n+        auto addrinfo_eq = [](const AddrInfo& lhs, const AddrInfo& rhs) {\n+            return std::tie(static_cast<const CService&>(lhs), lhs.source, lhs.nLastSuccess, lhs.nAttempts, lhs.nRefCount, lhs.fInTried) ==\n+                   std::tie(static_cast<const CService&>(rhs), rhs.source, rhs.nLastSuccess, rhs.nAttempts, rhs.nRefCount, rhs.fInTried);\n         };\n \n-        using Addresses = std::unordered_set<AddrInfo, AddrInfoHasher, AddrInfoEq>;\n+        using Addresses = std::unordered_set<AddrInfo, decltype(addrinfo_hasher), decltype(addrinfo_eq)>;\n \n         const size_t num_addresses{m_impl->mapInfo.size()};\n "
      }
    ]
  }
]