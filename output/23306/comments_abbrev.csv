DrahtBot,2021-10-19 08:26:19,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#23077](https://github.com/bitcoin/bitcoin/pull/23077) (Full CJDNS support by vasild)\n\nIf you consider this pull reques",https://github.com/bitcoin/bitcoin/pull/23306#issuecomment-946479992,946479992,
prayank23,2021-10-19 09:15:36,"> For a long part of Bitcoin's history, this codebase has aggressively avoided making automatic connections to anything but nodes running on port 8333. I'd like to propose changing that, and this is a first PR necessary for that.\n\nConcept ACK for allowing automatic connections to nodes which are not using default ports\n\n> This concern is (a) no different than what is possible with IPv6 (wh",https://github.com/bitcoin/bitcoin/pull/23306#issuecomment-946520083,946520083,
dhruv,2021-10-19 14:32:05,"Concept ACK\n\n> For a long part of Bitcoin's history, this codebase has aggressively avoided making automatic connections to anything but nodes running on port 8333. I'd like to propose changing that, and this is a first PR necessary for that.\n\nPort 8333 is the cheapest fingerprint for a Bitcoin node. The _possibility_ of port randomization is quite exciting as we will be able to use the ra",https://github.com/bitcoin/bitcoin/pull/23306#issuecomment-946785776,946785776,
jamesob,2021-10-19 18:04:25,Concept ACK. Changes look pretty straightforward.,https://github.com/bitcoin/bitcoin/pull/23306#issuecomment-946971010,946971010,
practicalswift,2021-10-20 10:01:51,"> The folklore justification (eventually actually added as a comment to the codebase in #20668) is that this is to prevent the Bitcoin P2P network from being leveraged to perform a DoS attack on other services, if their IP/port would get rumoured. […]  Another possible justification would be a risk that treating different IP:port combinations separately would help perform Eclipse attacks (by an at",https://github.com/bitcoin/bitcoin/pull/23306#issuecomment-947516736,947516736,
naumenkogs,2021-10-21 12:13:55,"Concept ACK.\nInterested in addressing the [point](https://github.com/bitcoin/bitcoin/pull/23306#issuecomment-947516736) by practicalswift (either dismissing or accepting, but with rationale).\n\nOtherwise, I agree this change is beneficial and I don't see any real harm.",https://github.com/bitcoin/bitcoin/pull/23306#issuecomment-948553223,948553223,
sipa,2021-10-21 20:49:18,"@practicalswift That's a reasonable concern. I think as a first step, the policy could e.g. still maintain the deprioritization of connections to ports numbered < 1024.",https://github.com/bitcoin/bitcoin/pull/23306#issuecomment-948991979,948991979,
vasild,2021-10-22 07:58:30,"I like the idea of ""bad ports"", especially if popular softwares like Firefox and Chromium agree on what is a ""bad port"". Trying to open http://bitcoin.org:22/ in Firefox gives me ""This address is restricted"" error.\n\nThis discussion belongs to the next PR, which removes the 8333 preference:\n\nhttps://github.com/bitcoin/bitcoin/blob/9469ffcb17f0018b61f85f835cc8b49370d26d1f/src/net.cpp#L2070\",https://github.com/bitcoin/bitcoin/pull/23306#issuecomment-949381508,949381508,
laanwj,2021-10-22 12:55:28,"Concept ACK, I think this makes sense. More flexibility with regard to ports is better, allows people to accept incoming connections on their node even if they can't bind to specific port 8333 (e.g. on a shared router). Also, it allows to route around the dumbest kind of ISP firewall blocking.\n\n> @practicalswift That's a reasonable concern. I think as a first step, the policy could e.g. still ",https://github.com/bitcoin/bitcoin/pull/23306#issuecomment-949605491,949605491,
practicalswift,2021-10-22 15:20:02,"@sipa \n\n> > A third concern (which I think can be addressed: see below) could be that Bitcoin Core users would risk having to deal with bogus complaints along the lines of ""why am I seeing a failed SSH-login to my server on port 22 from your IP-address `w.x.y.z`?"" if we allowed for automatic outgoing connections on _all_ ports by default.\n\n> @practicalswift That's a reasonable concern. I t",https://github.com/bitcoin/bitcoin/pull/23306#issuecomment-949728023,949728023,
vasild,2021-10-22 15:30:03,"There are good ports <1024 (e.g. 80, 443) and bad ports >1024 (e.g. 6000). I think that if we are going to do `if (port < 1024 && port != 80 && port != 443)` (poor man bad ports approximation) we might as well do the proper `if (port == 1 || port == 7 || ...)` (or the `switch` from [above](https://github.com/bitcoin/bitcoin/pull/23306#issuecomment-949381508)).",https://github.com/bitcoin/bitcoin/pull/23306#issuecomment-949736271,949736271,
jnewbery,2021-10-22 17:22:26,Code review ACK 92617b7a758c0425330fba4b886296730567927c,https://github.com/bitcoin/bitcoin/pull/23306#issuecomment-949825570,949825570,
sipa,2021-10-22 18:49:20,"There is plenty to discuss still on exactly how the relax the peer port preference policy practically, which is probably best left for an actual PR that implements that. ",https://github.com/bitcoin/bitcoin/pull/23306#issuecomment-949883540,949883540,
naumenkogs,2021-10-25 07:21:15,ACK 92617b7a758c0425330fba4b886296730567927c,https://github.com/bitcoin/bitcoin/pull/23306#issuecomment-950604021,950604021,
ajtowns,2021-10-25 14:41:05,"ACK 92617b7a758c0425330fba4b886296730567927c\n\nIf I'm reading it right, it seems like ~5% of addresses in my addrman use non-default ports (and none of them seem to be bad ports like ssh or ircd), so moving towards more egalitarian treatment of those nodes seems like a good thing to me. I agree we should have some check for bad ports as part of the next PR that moves towards enabling that.",https://github.com/bitcoin/bitcoin/pull/23306#issuecomment-950999045,950999045,
sipa,2021-10-25 14:44:58,"Mental note: investigate what happens when downgrading, and you have a peers.dat with multiple entries for the same IP?",https://github.com/bitcoin/bitcoin/pull/23306#issuecomment-951002472,951002472,
MarcoFalke,2021-10-25 15:05:38,"Looks like a downgrade will fail with:\n\n`Error: Invalid or corrupt peers.dat (Corrupt data. Consistency check failed with code -5: iostream error). If you believe this is a bug, please report it to https://github.com/bitcoin/bitcoin/issues. As a workaround, you can move the file (""/tmp/regtest/peers.dat"") out of the way (rename, move, or delete) to have a new one created on the next start.`\n",https://github.com/bitcoin/bitcoin/pull/23306#issuecomment-951022051,951022051,
vasild,2021-10-28 14:46:37,"> Looks like a downgrade will fail with:\n> \n> `Error: Invalid or corrupt peers.dat (Corrupt data. Consistency check failed with code -5: iostream error). If you believe this is a bug, please report it to https://github.com/bitcoin/bitcoin/issues. As a workaround, you can move the file (""/tmp/regtest/peers.dat"") out of the way (rename, move, or delete) to have a new one created on the next star",https://github.com/bitcoin/bitcoin/pull/23306#issuecomment-953919089,953919089,
vasild,2021-11-18 10:17:50,"A followup to this, that removes the strong preference for 8333 is in https://github.com/bitcoin/bitcoin/pull/23542.",https://github.com/bitcoin/bitcoin/pull/23306#issuecomment-972727530,972727530,
vasild,2021-10-20 10:01:38,Why cast to reference? Is that not the same as `static_cast<const CService>(...)`?,https://github.com/bitcoin/bitcoin/pull/23306#discussion_r732613976,732613976,src/test/fuzz/addrman.cpp
vasild,2021-10-20 10:08:17,"This does not take into account `CNetAddr::m_net`. So, two addresses from different networks with the same address bytes would hash the same. I think this is fine coz IPv4 and IPv6 have different length of the address. It could happen that a Tor address hashes the same as I2P address if they have identical 32 bytes :eyes:. I think this is ok for tests.",https://github.com/bitcoin/bitcoin/pull/23306#discussion_r732619057,732619057,src/test/fuzz/addrman.cpp
vasild,2021-10-20 10:08:52,Why write the size? Is it not unnecessary given that we also write the data?,https://github.com/bitcoin/bitcoin/pull/23306#discussion_r732619501,732619501,src/test/fuzz/addrman.cpp
vasild,2021-10-20 12:10:13,"```suggestion\n    //! find an nId based on its network address and port\n```",https://github.com/bitcoin/bitcoin/pull/23306#discussion_r732708382,732708382,src/addrman_impl.h
mzumsande,2021-10-20 22:16:32,"comment is outdated, it does get added because the IP will now make it to new, and then to tried",https://github.com/bitcoin/bitcoin/pull/23306#discussion_r733185755,733185755,src/test/addrman_tests.cpp
sipa,2021-10-21 12:32:49,`static_cast<const CService>` constructs a new `CService` object which is a copy of the `CService` inside the `AddrInfo`. `static_cast<const CService&>` just constructs a reference to that `CService` object.,https://github.com/bitcoin/bitcoin/pull/23306#discussion_r733627448,733627448,src/test/fuzz/addrman.cpp
jnewbery,2021-10-22 09:40:21,"```suggestion\n    // Test: ensure Find returns an IP/port matching what we searched on.\n```",https://github.com/bitcoin/bitcoin/pull/23306#discussion_r734390747,734390747,src/test/addrman_tests.cpp
jnewbery,2021-10-22 09:41:18,"```suggestion\n    // Test: Find discriminates by port number.\n```",https://github.com/bitcoin/bitcoin/pull/23306#discussion_r734391435,734391435,src/test/addrman_tests.cpp
jnewbery,2021-10-22 09:47:14,"Maybe clearer (or maybe not):\n\n```\n            return std::tie(static_cast<const CService&>(lhs), lhs.source, lhs.nLastSuccess, lhs.nAttempts, lhs.nRefCount, lhs.fInTried) ==\n                   std::tie(static_cast<const CService&>(rhs), rhs.source, rhs.nLastSuccess, rhs.nAttempts, rhs.nRefCount, rhs.fInTried);\n```",https://github.com/bitcoin/bitcoin/pull/23306#discussion_r734395617,734395617,src/test/fuzz/addrman.cpp
sipa,2021-10-22 16:09:00,@jnewbery I like that; done.,https://github.com/bitcoin/bitcoin/pull/23306#discussion_r734673274,734673274,src/test/fuzz/addrman.cpp
sipa,2021-10-22 16:09:21,Fixed; I added a `GetNetwork` call to both the address and the source.,https://github.com/bitcoin/bitcoin/pull/23306#discussion_r734673553,734673553,src/test/fuzz/addrman.cpp
sipa,2021-10-22 16:11:08,"Just a general principle: when serializing data, always do it in a way that would be deserializable (even if it is being fed to a hasher where that doesn't matter). This avoids the situation where you have multiple variant-length fields, and you get collisions between (shorter+longer) and (longer+shorter). One way of accomplishing that is also encoding the length of every variable-length piece of ",https://github.com/bitcoin/bitcoin/pull/23306#discussion_r734674839,734674839,src/test/fuzz/addrman.cpp
sipa,2021-10-22 16:11:16,Fixed.,https://github.com/bitcoin/bitcoin/pull/23306#discussion_r734674925,734674925,src/addrman_impl.h
sipa,2021-10-22 16:11:44,Fixed.,https://github.com/bitcoin/bitcoin/pull/23306#discussion_r734675227,734675227,src/test/addrman_tests.cpp
sipa,2021-10-22 16:11:54,Fixed.,https://github.com/bitcoin/bitcoin/pull/23306#discussion_r734675327,734675327,src/test/addrman_tests.cpp
sipa,2021-10-22 16:12:01,Done.,https://github.com/bitcoin/bitcoin/pull/23306#discussion_r734675399,734675399,src/test/addrman_tests.cpp
