[
  {
    "sha": "77aa9e59ea0e6a000a0aea5dec4ef9585356147d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3N2FhOWU1OWVhMGU2YTAwMGEwYWVhNWRlYzRlZjk1ODUzNTYxNDdk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-07-06T13:01:27Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-09-07T20:34:18Z"
      },
      "message": "test: Check RPC argument mapping\n\nParse the dispatch tables from the server implementation files,\nand the conversion table from the client.\n\nPerform the following consistency checks:\n\n- Arguments defined in conversion table, must be present in dispatch\n  table. If not, it was probably forgotten to add them to the\n  dispatch table, and they will not work.\n\n- Arguments defined in conversion table must have the same names as\n  in the dispatch table. If not, they will not work.\n\n- All aliases for an argument must either be present in the\n  conversion table, or not. Anything in between means an oversight\n  and some aliases won't work.\n\nAny of these results in an error.\n\nIt also performs a consistency check to see if the same\nnamed argument is sometimes converted, and sometimes not. E.g.\none RPC call might have a 'verbose' argument that is converted,\nanother RPC call might have one that is not converted. This is not\nnecessarily wrong, but points at a possible error (as well as\nmakes the API harder to memorize) - so it is emitted as a warning\n(could upgrade this to error).",
      "tree": {
        "sha": "5d1e65a047e37711c584d46c1dba3908c406f3f7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5d1e65a047e37711c584d46c1dba3908c406f3f7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/77aa9e59ea0e6a000a0aea5dec4ef9585356147d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77aa9e59ea0e6a000a0aea5dec4ef9585356147d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/77aa9e59ea0e6a000a0aea5dec4ef9585356147d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77aa9e59ea0e6a000a0aea5dec4ef9585356147d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "52f8877525d5238f3440e73710507be889d14127",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/52f8877525d5238f3440e73710507be889d14127",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/52f8877525d5238f3440e73710507be889d14127"
      }
    ],
    "stats": {
      "total": 159,
      "additions": 159,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e81d1a7278e287c82b644c52ffdf6f027c4f1978",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77aa9e59ea0e6a000a0aea5dec4ef9585356147d/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77aa9e59ea0e6a000a0aea5dec4ef9585356147d/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=77aa9e59ea0e6a000a0aea5dec4ef9585356147d",
        "patch": "@@ -45,6 +45,7 @@ install:\n before_script:\n     - if [ \"$CHECK_DOC\" = 1 -a \"$TRAVIS_EVENT_TYPE\" = \"pull_request\" ]; then contrib/devtools/commit-script-check.sh $TRAVIS_COMMIT_RANGE; fi\n     - if [ \"$CHECK_DOC\" = 1 ]; then contrib/devtools/check-doc.py; fi\n+    - if [ \"$CHECK_DOC\" = 1 ]; then contrib/devtools/check-rpc-mappings.py .; fi\n     - unset CC; unset CXX\n     - mkdir -p depends/SDKs depends/sdk-sources\n     - if [ -n \"$OSX_SDK\" -a ! -f depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz ]; then curl --location --fail $SDK_URL/MacOSX${OSX_SDK}.sdk.tar.gz -o depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz; fi"
      },
      {
        "sha": "d2698de041b75133b349e8783fe21f678ee3d2e6",
        "filename": "contrib/devtools/check-rpc-mappings.py",
        "status": "added",
        "additions": 158,
        "deletions": 0,
        "changes": 158,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77aa9e59ea0e6a000a0aea5dec4ef9585356147d/contrib/devtools/check-rpc-mappings.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77aa9e59ea0e6a000a0aea5dec4ef9585356147d/contrib/devtools/check-rpc-mappings.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/check-rpc-mappings.py?ref=77aa9e59ea0e6a000a0aea5dec4ef9585356147d",
        "patch": "@@ -0,0 +1,158 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Check RPC argument consistency.\"\"\"\n+\n+from collections import defaultdict\n+import os\n+import re\n+import sys\n+\n+# Source files (relative to root) to scan for dispatch tables\n+SOURCES = [\n+    \"src/rpc/server.cpp\",\n+    \"src/rpc/blockchain.cpp\",\n+    \"src/rpc/mining.cpp\",\n+    \"src/rpc/misc.cpp\",\n+    \"src/rpc/net.cpp\",\n+    \"src/rpc/rawtransaction.cpp\",\n+    \"src/wallet/rpcwallet.cpp\",\n+]\n+# Source file (relative to root) containing conversion mapping\n+SOURCE_CLIENT = 'src/rpc/client.cpp'\n+# Argument names that should be ignored in consistency checks\n+IGNORE_DUMMY_ARGS = {'dummy', 'arg0', 'arg1', 'arg2', 'arg3', 'arg4', 'arg5', 'arg6', 'arg7', 'arg8', 'arg9'}\n+\n+class RPCCommand:\n+    def __init__(self, name, args):\n+        self.name = name\n+        self.args = args\n+\n+class RPCArgument:\n+    def __init__(self, names, idx):\n+        self.names = names\n+        self.idx = idx\n+        self.convert = False\n+\n+def parse_string(s):\n+    assert s[0] == '\"'\n+    assert s[-1] == '\"'\n+    return s[1:-1]\n+\n+def process_commands(fname):\n+    \"\"\"Find and parse dispatch table in implementation file `fname`.\"\"\"\n+    cmds = []\n+    in_rpcs = False\n+    with open(fname, \"r\") as f:\n+        for line in f:\n+            line = line.rstrip()\n+            if not in_rpcs:\n+                if re.match(\"static const CRPCCommand .*\\[\\] =\", line):\n+                    in_rpcs = True\n+            else:\n+                if line.startswith('};'):\n+                    in_rpcs = False\n+                elif '{' in line and '\"' in line:\n+                    m = re.search('{ *(\"[^\"]*\"), *(\"[^\"]*\"), *&([^,]*), *{([^}]*)} *},', line)\n+                    assert m, 'No match to table expression: %s' % line\n+                    name = parse_string(m.group(2))\n+                    args_str = m.group(4).strip()\n+                    if args_str:\n+                        args = [RPCArgument(parse_string(x.strip()).split('|'), idx) for idx, x in enumerate(args_str.split(','))]\n+                    else:\n+                        args = []\n+                    cmds.append(RPCCommand(name, args))\n+    assert not in_rpcs, \"Something went wrong with parsing the C++ file: update the regexps\"\n+    return cmds\n+\n+def process_mapping(fname):\n+    \"\"\"Find and parse conversion table in implementation file `fname`.\"\"\"\n+    cmds = []\n+    in_rpcs = False\n+    with open(fname, \"r\") as f:\n+        for line in f:\n+            line = line.rstrip()\n+            if not in_rpcs:\n+                if line == 'static const CRPCConvertParam vRPCConvertParams[] =':\n+                    in_rpcs = True\n+            else:\n+                if line.startswith('};'):\n+                    in_rpcs = False\n+                elif '{' in line and '\"' in line:\n+                    m = re.search('{ *(\"[^\"]*\"), *([0-9]+) *, *(\"[^\"]*\") *},', line)\n+                    assert m, 'No match to table expression: %s' % line\n+                    name = parse_string(m.group(1))\n+                    idx = int(m.group(2))\n+                    argname = parse_string(m.group(3))\n+                    cmds.append((name, idx, argname))\n+    assert not in_rpcs\n+    return cmds\n+\n+def main():\n+    root = sys.argv[1]\n+\n+    # Get all commands from dispatch tables\n+    cmds = []\n+    for fname in SOURCES:\n+        cmds += process_commands(os.path.join(root, fname))\n+\n+    cmds_by_name = {}\n+    for cmd in cmds:\n+        cmds_by_name[cmd.name] = cmd\n+\n+    # Get current convert mapping for client\n+    client = SOURCE_CLIENT\n+    mapping = set(process_mapping(os.path.join(root, client)))\n+\n+    print('* Checking consistency between dispatch tables and vRPCConvertParams')\n+\n+    # Check mapping consistency\n+    errors = 0\n+    for (cmdname, argidx, argname) in mapping:\n+        try:\n+            rargnames = cmds_by_name[cmdname].args[argidx].names\n+        except IndexError:\n+            print('ERROR: %s argument %i (named %s in vRPCConvertParams) is not defined in dispatch table' % (cmdname, argidx, argname))\n+            errors += 1\n+            continue\n+        if argname not in rargnames:\n+            print('ERROR: %s argument %i is named %s in vRPCConvertParams but %s in dispatch table' % (cmdname, argidx, argname, rargnames), file=sys.stderr)\n+            errors += 1\n+\n+    # Check for conflicts in vRPCConvertParams conversion\n+    # All aliases for an argument must either be present in the\n+    # conversion table, or not. Anything in between means an oversight\n+    # and some aliases won't work.\n+    for cmd in cmds:\n+        for arg in cmd.args:\n+            convert = [((cmd.name, arg.idx, argname) in mapping) for argname in arg.names]\n+            if any(convert) != all(convert):\n+                print('ERROR: %s argument %s has conflicts in vRPCConvertParams conversion specifier %s' % (cmd.name, arg.names, convert))\n+                errors += 1\n+            arg.convert = all(convert)\n+\n+    # Check for conversion difference by argument name.\n+    # It is preferable for API consistency that arguments with the same name\n+    # have the same conversion, so bin by argument name.\n+    all_methods_by_argname = defaultdict(list)\n+    converts_by_argname = defaultdict(list)\n+    for cmd in cmds:\n+        for arg in cmd.args:\n+            for argname in arg.names:\n+                all_methods_by_argname[argname].append(cmd.name)\n+                converts_by_argname[argname].append(arg.convert)\n+\n+    for argname, convert in converts_by_argname.items():\n+        if all(convert) != any(convert):\n+            if argname in IGNORE_DUMMY_ARGS:\n+                # these are testing or dummy, don't warn for them\n+                continue\n+            print('WARNING: conversion mismatch for argument named %s (%s)' %\n+                  (argname, list(zip(all_methods_by_argname[argname], converts_by_argname[argname]))))\n+\n+    sys.exit(errors > 0)\n+\n+\n+if __name__ == '__main__':\n+    main()"
      }
    ]
  }
]