[
  {
    "sha": "be8c3b4d6f86064914fd2151720bd5f80932a442",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZThjM2I0ZDZmODYwNjQ5MTRmZDIxNTE3MjBiZDVmODA5MzJhNDQy",
    "commit": {
      "author": {
        "name": "William Casarin",
        "email": "jb55@jb55.com",
        "date": "2020-05-02T03:03:43Z"
      },
      "committer": {
        "name": "William Casarin",
        "email": "jb55@jb55.com",
        "date": "2021-04-28T19:11:02Z"
      },
      "message": "bloom: use Span instead of std::vector for `insert` and `contains`\n\nWe can avoid many unnecessary std::vector allocations by changing\nCBloomFilter to take Spans instead of std::vector's for the `insert`\nand `contains` operations.\n\nCBloomFilter currently converts types such as CDataStream and uint256\nto std::vector on `insert` and `contains`. This is unnecessary because\nCDataStreams and uint256 are already std::vectors internally. We just\nneed a way to point to the right data within those types. Span gives\nus this ability.\n\nSigned-off-by: William Casarin <jb55@jb55.com>",
      "tree": {
        "sha": "436bd1bf38ee3a78d6a0eff5c1043686273ac0b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/436bd1bf38ee3a78d6a0eff5c1043686273ac0b9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/be8c3b4d6f86064914fd2151720bd5f80932a442",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be8c3b4d6f86064914fd2151720bd5f80932a442",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/be8c3b4d6f86064914fd2151720bd5f80932a442",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be8c3b4d6f86064914fd2151720bd5f80932a442/comments",
    "author": {
      "login": "jb55",
      "id": 45598,
      "node_id": "MDQ6VXNlcjQ1NTk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/45598?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jb55",
      "html_url": "https://github.com/jb55",
      "followers_url": "https://api.github.com/users/jb55/followers",
      "following_url": "https://api.github.com/users/jb55/following{/other_user}",
      "gists_url": "https://api.github.com/users/jb55/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jb55/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jb55/subscriptions",
      "organizations_url": "https://api.github.com/users/jb55/orgs",
      "repos_url": "https://api.github.com/users/jb55/repos",
      "events_url": "https://api.github.com/users/jb55/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jb55/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jb55",
      "id": 45598,
      "node_id": "MDQ6VXNlcjQ1NTk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/45598?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jb55",
      "html_url": "https://github.com/jb55",
      "followers_url": "https://api.github.com/users/jb55/followers",
      "following_url": "https://api.github.com/users/jb55/following{/other_user}",
      "gists_url": "https://api.github.com/users/jb55/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jb55/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jb55/subscriptions",
      "organizations_url": "https://api.github.com/users/jb55/orgs",
      "repos_url": "https://api.github.com/users/jb55/repos",
      "events_url": "https://api.github.com/users/jb55/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jb55/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "328da3355787e76184d6bb16e6cf04eca760cbc6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/328da3355787e76184d6bb16e6cf04eca760cbc6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/328da3355787e76184d6bb16e6cf04eca760cbc6"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 20,
      "deletions": 24
    },
    "files": [
      {
        "sha": "f04f3c933422116dd77bf0a95a6876c23ebc2ebe",
        "filename": "src/bloom.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 18,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be8c3b4d6f86064914fd2151720bd5f80932a442/src/bloom.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be8c3b4d6f86064914fd2151720bd5f80932a442/src/bloom.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.cpp?ref=be8c3b4d6f86064914fd2151720bd5f80932a442",
        "patch": "@@ -37,13 +37,13 @@ CBloomFilter::CBloomFilter(const unsigned int nElements, const double nFPRate, c\n {\n }\n \n-inline unsigned int CBloomFilter::Hash(unsigned int nHashNum, const std::vector<unsigned char>& vDataToHash) const\n+inline unsigned int CBloomFilter::Hash(unsigned int nHashNum, Span<const unsigned char> vDataToHash) const\n {\n     // 0xFBA4C795 chosen as it guarantees a reasonable bit difference between nHashNum values.\n     return MurmurHash3(nHashNum * 0xFBA4C795 + nTweak, vDataToHash) % (vData.size() * 8);\n }\n \n-void CBloomFilter::insert(const std::vector<unsigned char>& vKey)\n+void CBloomFilter::insert(Span<const unsigned char> vKey)\n {\n     if (vData.empty()) // Avoid divide-by-zero (CVE-2013-5700)\n         return;\n@@ -59,17 +59,15 @@ void CBloomFilter::insert(const COutPoint& outpoint)\n {\n     CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n     stream << outpoint;\n-    std::vector<unsigned char> data(stream.begin(), stream.end());\n-    insert(data);\n+    insert(MakeUCharSpan(stream));\n }\n \n void CBloomFilter::insert(const uint256& hash)\n {\n-    std::vector<unsigned char> data(hash.begin(), hash.end());\n-    insert(data);\n+    insert(MakeUCharSpan(hash));\n }\n \n-bool CBloomFilter::contains(const std::vector<unsigned char>& vKey) const\n+bool CBloomFilter::contains(Span<const unsigned char> vKey) const\n {\n     if (vData.empty()) // Avoid divide-by-zero (CVE-2013-5700)\n         return true;\n@@ -87,14 +85,12 @@ bool CBloomFilter::contains(const COutPoint& outpoint) const\n {\n     CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n     stream << outpoint;\n-    std::vector<unsigned char> data(stream.begin(), stream.end());\n-    return contains(data);\n+    return contains(MakeUCharSpan(stream));\n }\n \n bool CBloomFilter::contains(const uint256& hash) const\n {\n-    std::vector<unsigned char> data(hash.begin(), hash.end());\n-    return contains(data);\n+    return contains(MakeUCharSpan(hash));\n }\n \n bool CBloomFilter::IsWithinSizeConstraints() const\n@@ -198,7 +194,8 @@ CRollingBloomFilter::CRollingBloomFilter(const unsigned int nElements, const dou\n }\n \n /* Similar to CBloomFilter::Hash */\n-static inline uint32_t RollingBloomHash(unsigned int nHashNum, uint32_t nTweak, const std::vector<unsigned char>& vDataToHash) {\n+static inline uint32_t RollingBloomHash(unsigned int nHashNum, uint32_t nTweak, Span<const unsigned char> vDataToHash)\n+{\n     return MurmurHash3(nHashNum * 0xFBA4C795 + nTweak, vDataToHash);\n }\n \n@@ -210,7 +207,7 @@ static inline uint32_t FastMod(uint32_t x, size_t n) {\n     return ((uint64_t)x * (uint64_t)n) >> 32;\n }\n \n-void CRollingBloomFilter::insert(const std::vector<unsigned char>& vKey)\n+void CRollingBloomFilter::insert(Span<const unsigned char> vKey)\n {\n     if (nEntriesThisGeneration == nEntriesPerGeneration) {\n         nEntriesThisGeneration = 0;\n@@ -243,11 +240,10 @@ void CRollingBloomFilter::insert(const std::vector<unsigned char>& vKey)\n \n void CRollingBloomFilter::insert(const uint256& hash)\n {\n-    std::vector<unsigned char> vData(hash.begin(), hash.end());\n-    insert(vData);\n+    insert(MakeUCharSpan(hash));\n }\n \n-bool CRollingBloomFilter::contains(const std::vector<unsigned char>& vKey) const\n+bool CRollingBloomFilter::contains(Span<const unsigned char> vKey) const\n {\n     for (int n = 0; n < nHashFuncs; n++) {\n         uint32_t h = RollingBloomHash(n, nTweak, vKey);\n@@ -263,8 +259,7 @@ bool CRollingBloomFilter::contains(const std::vector<unsigned char>& vKey) const\n \n bool CRollingBloomFilter::contains(const uint256& hash) const\n {\n-    std::vector<unsigned char> vData(hash.begin(), hash.end());\n-    return contains(vData);\n+    return contains(MakeUCharSpan(hash));\n }\n \n void CRollingBloomFilter::reset()"
      },
      {
        "sha": "b5aeefce4aeb8a7e329a4ae802d9c27fa86c1103",
        "filename": "src/bloom.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be8c3b4d6f86064914fd2151720bd5f80932a442/src/bloom.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be8c3b4d6f86064914fd2151720bd5f80932a442/src/bloom.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.h?ref=be8c3b4d6f86064914fd2151720bd5f80932a442",
        "patch": "@@ -49,7 +49,7 @@ class CBloomFilter\n     unsigned int nTweak;\n     unsigned char nFlags;\n \n-    unsigned int Hash(unsigned int nHashNum, const std::vector<unsigned char>& vDataToHash) const;\n+    unsigned int Hash(unsigned int nHashNum, Span<const unsigned char> vDataToHash) const;\n \n public:\n     /**\n@@ -66,11 +66,11 @@ class CBloomFilter\n \n     SERIALIZE_METHODS(CBloomFilter, obj) { READWRITE(obj.vData, obj.nHashFuncs, obj.nTweak, obj.nFlags); }\n \n-    void insert(const std::vector<unsigned char>& vKey);\n+    void insert(Span<const unsigned char> vKey);\n     void insert(const COutPoint& outpoint);\n     void insert(const uint256& hash);\n \n-    bool contains(const std::vector<unsigned char>& vKey) const;\n+    bool contains(Span<const unsigned char> vKey) const;\n     bool contains(const COutPoint& outpoint) const;\n     bool contains(const uint256& hash) const;\n \n@@ -112,9 +112,9 @@ class CRollingBloomFilter\n public:\n     CRollingBloomFilter(const unsigned int nElements, const double nFPRate);\n \n-    void insert(const std::vector<unsigned char>& vKey);\n+    void insert(Span<const unsigned char> vKey);\n     void insert(const uint256& hash);\n-    bool contains(const std::vector<unsigned char>& vKey) const;\n+    bool contains(Span<const unsigned char> vKey) const;\n     bool contains(const uint256& hash) const;\n \n     void reset();"
      },
      {
        "sha": "4901d2d97f1daba16055107a7445c312a9f1cdf7",
        "filename": "src/hash.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be8c3b4d6f86064914fd2151720bd5f80932a442/src/hash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be8c3b4d6f86064914fd2151720bd5f80932a442/src/hash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.cpp?ref=be8c3b4d6f86064914fd2151720bd5f80932a442",
        "patch": "@@ -3,6 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <hash.h>\n+#include <span.h>\n #include <crypto/common.h>\n #include <crypto/hmac_sha512.h>\n "
      },
      {
        "sha": "bd33173e39cf5570b92e033728b44a76b417803c",
        "filename": "src/test/bloom_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be8c3b4d6f86064914fd2151720bd5f80932a442/src/test/bloom_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be8c3b4d6f86064914fd2151720bd5f80932a442/src/test/bloom_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bloom_tests.cpp?ref=be8c3b4d6f86064914fd2151720bd5f80932a442",
        "patch": "@@ -83,7 +83,7 @@ BOOST_AUTO_TEST_CASE(bloom_create_insert_key)\n     CBloomFilter filter(2, 0.001, 0, BLOOM_UPDATE_ALL);\n     filter.insert(vchPubKey);\n     uint160 hash = pubkey.GetID();\n-    filter.insert(std::vector<unsigned char>(hash.begin(), hash.end()));\n+    filter.insert(MakeUCharSpan(hash));\n \n     CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n     stream << filter;"
      }
    ]
  }
]