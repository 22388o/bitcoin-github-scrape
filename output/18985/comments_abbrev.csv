practicalswift,2020-05-16 06:05:50,Do you have a good way to quantify the impact of this change? That would be interesting to see :),https://github.com/bitcoin/bitcoin/pull/18985#issuecomment-629594527,629594527,
DrahtBot,2020-05-16 08:32:36,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/18985#issuecomment-629609551,629609551,
jb55,2020-05-16 14:24:43,"@practicalswift this is something I want to do once I figure out how to use the benchmarking suite. This one might be nontrivial though since it's networking code. I might just do the benchmarking in #18849 to start.\n\nOne piece of data that I can show here is the number of allocations before and after which I'll do",https://github.com/bitcoin/bitcoin/pull/18985#issuecomment-629653971,629653971,
sipa,2020-05-16 20:48:37,"Concept ACK, I think this is the right approach. In general I think that most functions that take either a const vector/prevector as input, or begin/end pointer, or a begin pointer + size, should be replaced with versions that just take in a Span.\n\nIt would be worthwhile to make `uint256` amendable to the range Span constructor. I think all you'd need is rename the data field to m_data, and th",https://github.com/bitcoin/bitcoin/pull/18985#issuecomment-629703864,629703864,
practicalswift,2020-05-16 22:13:24,"I've noticed that we consistently pass `Span` by const-ref instead of by value in the project (this PR follows that convention): is that an intentional choice? Just curious :)\n\n```\n$ git grep -E '\([^(]*Span<.*>[^)]*\)' "":(exclude)src/span.h""\nsrc/script/descriptor.cpp:std::string DescriptorChecksum(const Span<const char>& span)\nsrc/script/descriptor.cpp:NODISCARD bool ParseKeyPath(const ",https://github.com/bitcoin/bitcoin/pull/18985#issuecomment-629712670,629712670,
theStack,2020-08-11 21:44:16,"Concept ACK. Will review as soon as this is rebased.\n\n> I've noticed that we consistently pass Span by const-ref instead of by value in the project (this PR follows that convention): is that an intentional choice? Just curious :)\n\n@practicalswift: Good point. I guess seen from a performance perspective it doesn't really make a difference, considering how lightweight spans are. In any case ",https://github.com/bitcoin/bitcoin/pull/18985#issuecomment-672294728,672294728,
jb55,2020-08-11 23:22:12,Sebastian Falbesoner <notifications@github.com> writes:\n> Concept ACK. Will review as soon as this is rebased.\n>\n>> I've noticed that we consistently pass Span by const-ref instead of\n>> by value in the project (this PR follows that convention): is that an\n>> intentional choice? Just curious :)\n>\n> @practicalswift: Good point. I guess seen from a performance\n> perspective it doesn't really,https://github.com/bitcoin/bitcoin/pull/18985#issuecomment-672351980,672351980,
practicalswift,2020-08-12 09:41:49,"@theStack @jb55 FWIW, throughout the C++ Core Guidelines `span` is consistently passed by value, and the following is said about it:\n\n> Note: A `span<T>` object does not own its elements and is so small that it can be passed by value.\nPassing a `span` object as an argument is exactly as efficient as passing a pair of pointer arguments or passing a pointer and an integer count. ([F.24](https:",https://github.com/bitcoin/bitcoin/pull/18985#issuecomment-672769541,672769541,
jb55,2020-08-14 16:18:59,rebased and switched from `const Span<const unsigned char>&` style to `Span<const unsigned char>`,https://github.com/bitcoin/bitcoin/pull/18985#issuecomment-674152101,674152101,
jb55,2020-08-17 00:37:27,"Sebastian Falbesoner <notifications@github.com> writes:\n> Could simply use the recently introduced `MakeUCharSpan()` helper here and on other occurences of the commit.\n\noh nice, I didn't know that was a thing. I'll do that.\n",https://github.com/bitcoin/bitcoin/pull/18985#issuecomment-674601507,674601507,
jb55,2020-08-17 15:21:51,"pushed 897f5be28c072c700a55a511bf0a88efc3b71602\n\n`git diff 1466b656625b3896176d3aa6f794d1d8d0f7c3e0 897f5be28c072c700a55a511bf0a88efc3b71602`\n\nmuch cleaner ü§©\n\n```diff\ndiff --git a/src/bloom.cpp b/src/bloom.cpp\nindex 436e913aa5..c19d6e7d7d 100644\n--- a/src/bloom.cpp\n+++ b/src/bloom.cpp\n@@ -59,12 +59,12 @@ void CBloomFilter::insert(const COutPoint& outpoint)\n {\n     CDataSt",https://github.com/bitcoin/bitcoin/pull/18985#issuecomment-674945434,674945434,
theStack,2020-08-24 18:10:11,"LGTM now üëç \nOnly the include change in `net.h` is a bit confusing... there is no direct part in `net.h` that needs a Span as far as I can see. Wouldn't it be more obvious to simply include <span.h> in `bloom.h` as it is used there in this PR?",https://github.com/bitcoin/bitcoin/pull/18985#issuecomment-679283465,679283465,
jb55,2021-04-28 21:27:40,rebased\n,https://github.com/bitcoin/bitcoin/pull/18985#issuecomment-828791503,828791503,
jb55,2021-05-05 17:49:22,"On Tue, May 04, 2021 at 03:28:59PM -0700, Vincenzo Palazzo wrote:\n>Theoretically, this could be a good improvement because it removes the smart pointer from the game, but I never use it in practice the span and I'm curious to see how much improvement brings this game.\n\nSee my comment here:\n\n> This code came up as a place where many allocations occur. Mainly due to allocations of CService::Get",https://github.com/bitcoin/bitcoin/pull/18985#issuecomment-832887494,832887494,
0xB10C,2021-08-03 13:51:03,Concept ACK. Have you figured out a way to benchmark this?,https://github.com/bitcoin/bitcoin/pull/18985#issuecomment-891864160,891864160,
laanwj,2021-08-16 14:43:35,"> MarcoFalke added Waiting for author Needs rebase labels 3 hours ago\n> DrahtBot removed the Needs rebase label 2 hours ago \n\nI think DrahtBot screwed up here. No rebase happened in between.",https://github.com/bitcoin/bitcoin/pull/18985#issuecomment-899568609,899568609,
sipa,2021-09-20 17:54:40,:(,https://github.com/bitcoin/bitcoin/pull/18985#issuecomment-923148025,923148025,
laanwj,2021-09-20 19:40:15,Any specific reason for closing?,https://github.com/bitcoin/bitcoin/pull/18985#issuecomment-923238431,923238431,
jb55,2021-09-20 21:19:13,lost interest. It's fine with me if someone else wants to pick it up.,https://github.com/bitcoin/bitcoin/pull/18985#issuecomment-923320535,923320535,
vincenzopalazzo,2021-09-20 23:00:31,"@jb55, I can be interested in it. \n\nI love your optimization, and maybe can be also a good starting point to push some code on bitcoin :-) ",https://github.com/bitcoin/bitcoin/pull/18985#issuecomment-923415363,923415363,
fanquake,2021-09-28 07:39:49,"Rebased, with comments addressed in #23115.",https://github.com/bitcoin/bitcoin/pull/18985#issuecomment-928936874,928936874,
theStack,2020-08-15 12:51:58,Could simply use the recently introduced `MakeUCharSpan()` helper here and on other occurences of the commit.,https://github.com/bitcoin/bitcoin/pull/18985#discussion_r470974869,470974869,src/bloom.cpp
MarcoFalke,2021-08-05 15:52:50,you can remove this method now,https://github.com/bitcoin/bitcoin/pull/18985#discussion_r683582348,683582348,src/bloom.h
MarcoFalke,2021-08-05 15:52:57,same,https://github.com/bitcoin/bitcoin/pull/18985#discussion_r683582437,683582437,src/bloom.h
martinus,2021-08-16 09:17:38,"No need for `MakeUCharSpan`, `filter.insert(hash);` works now too",https://github.com/bitcoin/bitcoin/pull/18985#discussion_r689371351,689371351,src/test/bloom_tests.cpp
martinus,2021-08-16 09:18:46,No need for `MakeUCharSpan`,https://github.com/bitcoin/bitcoin/pull/18985#discussion_r689372096,689372096,src/bloom.cpp
