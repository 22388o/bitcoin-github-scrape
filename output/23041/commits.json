[
  {
    "sha": "faa81f948663a7155335986b028fb2ce19049a79",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWE4MWY5NDg2NjNhNzE1NTMzNTk4NmIwMjhmYjJjZTE5MDQ5YTc5",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-09-20T07:07:57Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-09-20T07:07:44Z"
      },
      "message": "test: Add addrman deserialization error tests",
      "tree": {
        "sha": "39bfad03c1a79529521fbbd4d6df6ef72b592b01",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/39bfad03c1a79529521fbbd4d6df6ef72b592b01"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faa81f948663a7155335986b028fb2ce19049a79",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgh5gwArBldMeHHMi2ms2s+fQfwq2WqSbj7yCXacGbzpixedxCUUWJcD+6np7HX\nS3kbxz9qmhcX00JJAlblFsHd6G+rVkkdS2CQGAhFST865tczARcvrxiTZ5ROUAi+\nC1S1IXXjAfz335AB/DR27fDO35Z7doPtfCg/AVBBCpWwEmjOAsJofjzI6mnOOjE+\nUq1ZDmHdvoJB9HWXE4dxHk18+Bkj0mdj+lK57to19qhFsxrDbiGcuh0MEnxwN/kw\n8lI0gFwq4OzCewZboKZmXi40iLOTdWnU/uZRkWmb4e9ng2uOMaBeqQQdCG/tAFwO\nSFuSszUeE8Uk/+ibzShsOcDxbBgJs7namhwV8ye5OqiYUxcKSXXMfkUrcwXmOn1p\nRL/5m+c7NY/SGe5mxOoNZZf/BGtzE3O+zEN8HnSdfLuGRho4OpLvs664DKcsOnc7\n1dCyuDoZKWK717N8bcETIx8nh4l9xOvxrfj2Lb489M07JgWSAAtexF44T8JPumI+\nrunJbjkF\n=v8A1\n-----END PGP SIGNATURE-----",
        "payload": "tree 39bfad03c1a79529521fbbd4d6df6ef72b592b01\nparent 226731ac1144886d693d3508b331f98727ab883c\nauthor MarcoFalke <falke.marco@gmail.com> 1632121677 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1632121664 +0200\n\ntest: Add addrman deserialization error tests\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faa81f948663a7155335986b028fb2ce19049a79",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faa81f948663a7155335986b028fb2ce19049a79",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faa81f948663a7155335986b028fb2ce19049a79/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "226731ac1144886d693d3508b331f98727ab883c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/226731ac1144886d693d3508b331f98727ab883c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/226731ac1144886d693d3508b331f98727ab883c"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 46,
      "deletions": 6
    },
    "files": [
      {
        "sha": "42afd74ac9ff06c2a479f6dce00958b7f34586e6",
        "filename": "test/functional/feature_addrman.py",
        "status": "modified",
        "additions": 46,
        "deletions": 6,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa81f948663a7155335986b028fb2ce19049a79/test/functional/feature_addrman.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa81f948663a7155335986b028fb2ce19049a79/test/functional/feature_addrman.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_addrman.py?ref=faa81f948663a7155335986b028fb2ce19049a79",
        "patch": "@@ -14,22 +14,30 @@\n from test_framework.util import assert_equal\n \n \n-def serialize_addrman(*, format=1, lowest_compatible=3):\n+def serialize_addrman(\n+    *,\n+    format=1,\n+    lowest_compatible=3,\n+    net_magic=\"regtest\",\n+    len_new=None,\n+    len_tried=None,\n+    mock_checksum=None,\n+):\n     new = []\n     tried = []\n     INCOMPATIBILITY_BASE = 32\n-    r = MAGIC_BYTES[\"regtest\"]\n+    r = MAGIC_BYTES[net_magic]\n     r += struct.pack(\"B\", format)\n     r += struct.pack(\"B\", INCOMPATIBILITY_BASE + lowest_compatible)\n     r += ser_uint256(1)\n-    r += struct.pack(\"i\", len(new))\n-    r += struct.pack(\"i\", len(tried))\n+    r += struct.pack(\"i\", len_new or len(new))\n+    r += struct.pack(\"i\", len_tried or len(tried))\n     ADDRMAN_NEW_BUCKET_COUNT = 1 << 10\n     r += struct.pack(\"i\", ADDRMAN_NEW_BUCKET_COUNT ^ (1 << 30))\n     for _ in range(ADDRMAN_NEW_BUCKET_COUNT):\n         r += struct.pack(\"i\", 0)\n     checksum = hash256(r)\n-    r += checksum\n+    r += mock_checksum or checksum\n     return r\n \n \n@@ -70,7 +78,7 @@ def run_test(self):\n             match=ErrorMatch.FULL_REGEX,\n         )\n \n-        self.log.info(\"Check that corrupt addrman cannot be read\")\n+        self.log.info(\"Check that corrupt addrman cannot be read (EOF)\")\n         self.stop_node(0)\n         with open(peers_dat, \"wb\") as f:\n             f.write(serialize_addrman()[:-1])\n@@ -79,6 +87,38 @@ def run_test(self):\n             match=ErrorMatch.FULL_REGEX,\n         )\n \n+        self.log.info(\"Check that corrupt addrman cannot be read (magic)\")\n+        self.stop_node(0)\n+        write_addrman(peers_dat, net_magic=\"signet\")\n+        self.nodes[0].assert_start_raises_init_error(\n+            expected_msg=init_error(\"Invalid network magic number\"),\n+            match=ErrorMatch.FULL_REGEX,\n+        )\n+\n+        self.log.info(\"Check that corrupt addrman cannot be read (checksum)\")\n+        self.stop_node(0)\n+        write_addrman(peers_dat, mock_checksum=b\"ab\" * 32)\n+        self.nodes[0].assert_start_raises_init_error(\n+            expected_msg=init_error(\"Checksum mismatch, data corrupted\"),\n+            match=ErrorMatch.FULL_REGEX,\n+        )\n+\n+        self.log.info(\"Check that corrupt addrman cannot be read (len_tried)\")\n+        self.stop_node(0)\n+        write_addrman(peers_dat, len_tried=-1)\n+        self.nodes[0].assert_start_raises_init_error(\n+            expected_msg=init_error(\"Corrupt CAddrMan serialization: nTried=-1, should be in \\\\[0, 16384\\\\]:.*\"),\n+            match=ErrorMatch.FULL_REGEX,\n+        )\n+\n+        self.log.info(\"Check that corrupt addrman cannot be read (len_new)\")\n+        self.stop_node(0)\n+        write_addrman(peers_dat, len_new=-1)\n+        self.nodes[0].assert_start_raises_init_error(\n+            expected_msg=init_error(\"Corrupt CAddrMan serialization: nNew=-1, should be in \\\\[0, 65536\\\\]:.*\"),\n+            match=ErrorMatch.FULL_REGEX,\n+        )\n+\n         self.log.info(\"Check that missing addrman is recreated\")\n         self.stop_node(0)\n         os.remove(peers_dat)"
      }
    ]
  }
]