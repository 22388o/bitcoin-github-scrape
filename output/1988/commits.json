[
  {
    "sha": "5350ea4171be69d16a94e6f40c5e7fa41e00ac13",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MzUwZWE0MTcxYmU2OWQxNmE5NGU2ZjQwYzVlN2ZhNDFlMDBhYzEz",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2012-11-05T07:04:21Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2012-11-26T12:32:31Z"
      },
      "message": "update CClientUIInterface and remove orphan Wx stuff\n\n- fix ThreadSafeMessageBox always displays error icon\n- allow to specify MSG_ERROR / MSG_WARNING or MSG_INFORMATION without a\n  custom caption / title\n- allow to specify CClientUIInterface::ICON_ERROR / ICON_WARNING and\n  ICON_INFORMATION (which is default) as message box icon\n- remove CClientUIInterface::OK from ThreadSafeMessageBox-calls, as\n  the OK button will be set as default, if none is specified\n- prepend \"Bitcoin - \" to used captions\n- rename BitcoinGUI::error() -> BitcoinGUI::message() and add function\n  documentation\n- change all style parameters and enum flags to unsigned\n- update code to use that new API\n\n- update Client- and WalletModel to use new BitcoinGUI::message() and\n  rename the classes error() method into message()\n- include the possibility to supply the wanted icon for messages from\n  Client- and WalletModel via \"style\" parameter",
      "tree": {
        "sha": "26a9051543b64ff568c8f880c2ac75753af4870a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/26a9051543b64ff568c8f880c2ac75753af4870a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5350ea4171be69d16a94e6f40c5e7fa41e00ac13",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5350ea4171be69d16a94e6f40c5e7fa41e00ac13",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5350ea4171be69d16a94e6f40c5e7fa41e00ac13",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5350ea4171be69d16a94e6f40c5e7fa41e00ac13/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "3ed1ccb0898b22353e9fcc942b43df98c9a3bf4c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ed1ccb0898b22353e9fcc942b43df98c9a3bf4c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3ed1ccb0898b22353e9fcc942b43df98c9a3bf4c"
      }
    ],
    "stats": {
      "total": 199,
      "additions": 133,
      "deletions": 66
    },
    "files": [
      {
        "sha": "481ceb9f40e73584de73a9de99cd62832f7e767a",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5350ea4171be69d16a94e6f40c5e7fa41e00ac13/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5350ea4171be69d16a94e6f40c5e7fa41e00ac13/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=5350ea4171be69d16a94e6f40c5e7fa41e00ac13",
        "patch": "@@ -769,7 +769,7 @@ void ThreadRPCServer2(void* parg)\n                 strWhatAmI.c_str(),\n                 GetConfigFile().string().c_str(),\n                 EncodeBase58(&rand_pwd[0],&rand_pwd[0]+32).c_str()),\n-            _(\"Error\"), CClientUIInterface::OK | CClientUIInterface::MODAL);\n+                \"\", CClientUIInterface::MSG_ERROR);\n         StartShutdown();\n         return;\n     }\n@@ -860,7 +860,7 @@ void ThreadRPCServer2(void* parg)\n     }\n \n     if (!fListening) {\n-        uiInterface.ThreadSafeMessageBox(strerr, _(\"Error\"), CClientUIInterface::OK | CClientUIInterface::MODAL);\n+        uiInterface.ThreadSafeMessageBox(strerr, \"\", CClientUIInterface::MSG_ERROR);\n         StartShutdown();\n         return;\n     }"
      },
      {
        "sha": "e0fbb3133858e3b2ec47fa9663467586c25f5517",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5350ea4171be69d16a94e6f40c5e7fa41e00ac13/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5350ea4171be69d16a94e6f40c5e7fa41e00ac13/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=5350ea4171be69d16a94e6f40c5e7fa41e00ac13",
        "patch": "@@ -2,13 +2,15 @@\n // Copyright (c) 2009-2012 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n #include \"txdb.h\"\n #include \"walletdb.h\"\n #include \"bitcoinrpc.h\"\n #include \"net.h\"\n #include \"init.h\"\n #include \"util.h\"\n #include \"ui_interface.h\"\n+\n #include <boost/filesystem.hpp>\n #include <boost/filesystem/fstream.hpp>\n #include <boost/filesystem/convenience.hpp>\n@@ -209,17 +211,16 @@ int main(int argc, char* argv[])\n \n bool static InitError(const std::string &str)\n {\n-    uiInterface.ThreadSafeMessageBox(str, _(\"Bitcoin\"), CClientUIInterface::OK | CClientUIInterface::MODAL);\n+    uiInterface.ThreadSafeMessageBox(str, \"\", CClientUIInterface::MSG_ERROR);\n     return false;\n }\n \n bool static InitWarning(const std::string &str)\n {\n-    uiInterface.ThreadSafeMessageBox(str, _(\"Bitcoin\"), CClientUIInterface::OK | CClientUIInterface::ICON_EXCLAMATION | CClientUIInterface::MODAL);\n+    uiInterface.ThreadSafeMessageBox(str, \"\", CClientUIInterface::MSG_WARNING);\n     return true;\n }\n \n-\n bool static Bind(const CService &addr, unsigned int flags) {\n     if (!(flags & BF_EXPLICIT) && IsLimited(addr))\n         return false;\n@@ -608,7 +609,7 @@ bool AppInit2()\n                                      \" Original wallet.dat saved as wallet.{timestamp}.bak in %s; if\"\n                                      \" your balance or transactions are incorrect you should\"\n                                      \" restore from a backup.\"), strDataDir.c_str());\n-            uiInterface.ThreadSafeMessageBox(msg, _(\"Bitcoin\"), CClientUIInterface::OK | CClientUIInterface::ICON_EXCLAMATION | CClientUIInterface::MODAL);\n+            InitWarning(msg);\n         }\n         if (r == CDBEnv::RECOVER_FAIL)\n             return InitError(_(\"wallet.dat corrupt, salvage failed\"));\n@@ -808,7 +809,7 @@ bool AppInit2()\n         {\n             string msg(_(\"Warning: error reading wallet.dat! All keys read correctly, but transaction data\"\n                          \" or address book entries might be missing or incorrect.\"));\n-            uiInterface.ThreadSafeMessageBox(msg, _(\"Bitcoin\"), CClientUIInterface::OK | CClientUIInterface::ICON_EXCLAMATION | CClientUIInterface::MODAL);\n+            InitWarning(msg);\n         }\n         else if (nLoadWalletRet == DB_TOO_NEW)\n             strErrors << _(\"Error loading wallet.dat: Wallet requires newer version of Bitcoin\") << \"\\n\";\n@@ -914,7 +915,7 @@ bool AppInit2()\n \n     //// debug print\n     printf(\"mapBlockIndex.size() = %\"PRIszu\"\\n\",   mapBlockIndex.size());\n-    printf(\"nBestHeight = %d\\n\",            nBestHeight);\n+    printf(\"nBestHeight = %d\\n\",                   nBestHeight);\n     printf(\"setKeyPool.size() = %\"PRIszu\"\\n\",      pwalletMain->setKeyPool.size());\n     printf(\"mapWallet.size() = %\"PRIszu\"\\n\",       pwalletMain->mapWallet.size());\n     printf(\"mapAddressBook.size() = %\"PRIszu\"\\n\",  pwalletMain->mapAddressBook.size());"
      },
      {
        "sha": "8279924a3c5d49732a5fae56639d957c34e6e372",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5350ea4171be69d16a94e6f40c5e7fa41e00ac13/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5350ea4171be69d16a94e6f40c5e7fa41e00ac13/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=5350ea4171be69d16a94e6f40c5e7fa41e00ac13",
        "patch": "@@ -2197,10 +2197,10 @@ bool CheckDiskSpace(uint64 nAdditionalBytes)\n     if (nFreeBytesAvailable < nMinDiskSpace + nAdditionalBytes)\n     {\n         fShutdown = true;\n-        string strMessage = _(\"Warning: Disk space is low!\");\n+        string strMessage = _(\"Error: Disk space is low!\");\n         strMiscWarning = strMessage;\n         printf(\"*** %s\\n\", strMessage.c_str());\n-        uiInterface.ThreadSafeMessageBox(strMessage, \"Bitcoin\", CClientUIInterface::OK | CClientUIInterface::ICON_EXCLAMATION | CClientUIInterface::MODAL);\n+        uiInterface.ThreadSafeMessageBox(strMessage, \"\", CClientUIInterface::MSG_ERROR);\n         StartShutdown();\n         return false;\n     }\n@@ -3681,7 +3681,6 @@ class TxPriorityCompare\n \n CBlock* CreateNewBlock(CReserveKey& reservekey)\n {\n-\n     // Create new block\n     auto_ptr<CBlock> pblock(new CBlock());\n     if (!pblock.get())"
      },
      {
        "sha": "ba2b1aab4df4c66b305c227594f0316e5ea4a011",
        "filename": "src/noui.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 2,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5350ea4171be69d16a94e6f40c5e7fa41e00ac13/src/noui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5350ea4171be69d16a94e6f40c5e7fa41e00ac13/src/noui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/noui.cpp?ref=5350ea4171be69d16a94e6f40c5e7fa41e00ac13",
        "patch": "@@ -2,16 +2,33 @@\n // Copyright (c) 2009-2012 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n #include \"ui_interface.h\"\n #include \"init.h\"\n #include \"bitcoinrpc.h\"\n \n #include <string>\n \n-static int noui_ThreadSafeMessageBox(const std::string& message, const std::string& caption, int style)\n+static int noui_ThreadSafeMessageBox(const std::string& message, const std::string& caption, unsigned int style)\n {\n+    std::string strCaption;\n+    // Check for usage of predefined caption\n+    switch (style) {\n+    case CClientUIInterface::MSG_ERROR:\n+        strCaption += _(\"Error\");\n+        break;\n+    case CClientUIInterface::MSG_WARNING:\n+        strCaption += _(\"Warning\");\n+        break;\n+    case CClientUIInterface::MSG_INFORMATION:\n+        strCaption += _(\"Information\");\n+        break;\n+    default:\n+        strCaption += caption; // Use supplied caption\n+    }\n+\n     printf(\"%s: %s\\n\", caption.c_str(), message.c_str());\n-    fprintf(stderr, \"%s: %s\\n\", caption.c_str(), message.c_str());\n+    fprintf(stderr, \"%s: %s\\n\", strCaption.c_str(), message.c_str());\n     return 4;\n }\n "
      },
      {
        "sha": "d64114e1315507750aa1084d57fddb71f72a42f2",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5350ea4171be69d16a94e6f40c5e7fa41e00ac13/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5350ea4171be69d16a94e6f40c5e7fa41e00ac13/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=5350ea4171be69d16a94e6f40c5e7fa41e00ac13",
        "patch": "@@ -7,7 +7,6 @@\n #include \"optionsmodel.h\"\n #include \"guiutil.h\"\n #include \"guiconstants.h\"\n-\n #include \"init.h\"\n #include \"ui_interface.h\"\n #include \"qtipcserver.h\"\n@@ -35,18 +34,19 @@ Q_IMPORT_PLUGIN(qtaccessiblewidgets)\n static BitcoinGUI *guiref;\n static QSplashScreen *splashref;\n \n-static void ThreadSafeMessageBox(const std::string& message, const std::string& caption, int style)\n+static void ThreadSafeMessageBox(const std::string& message, const std::string& caption, unsigned int style)\n {\n     // Message from network thread\n     if(guiref)\n     {\n         bool modal = (style & CClientUIInterface::MODAL);\n-        // in case of modal message, use blocking connection to wait for user to click OK\n-        QMetaObject::invokeMethod(guiref, \"error\",\n+        // In case of modal message, use blocking connection to wait for user to click a button\n+        QMetaObject::invokeMethod(guiref, \"message\",\n                                    modal ? GUIUtil::blockingGUIThreadConnection() : Qt::QueuedConnection,\n                                    Q_ARG(QString, QString::fromStdString(caption)),\n                                    Q_ARG(QString, QString::fromStdString(message)),\n-                                   Q_ARG(bool, modal));\n+                                   Q_ARG(bool, modal),\n+                                   Q_ARG(unsigned int, style));\n     }\n     else\n     {"
      },
      {
        "sha": "e2350c09eedc8c415c433704939b22d4990d58bd",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 47,
        "deletions": 11,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5350ea4171be69d16a94e6f40c5e7fa41e00ac13/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5350ea4171be69d16a94e6f40c5e7fa41e00ac13/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=5350ea4171be69d16a94e6f40c5e7fa41e00ac13",
        "patch": "@@ -25,6 +25,7 @@\n #include \"notificator.h\"\n #include \"guiutil.h\"\n #include \"rpcconsole.h\"\n+#include \"ui_interface.h\"\n \n #ifdef Q_OS_MAC\n #include \"macdockiconhandler.h\"\n@@ -366,8 +367,8 @@ void BitcoinGUI::setClientModel(ClientModel *clientModel)\n         setNumBlocks(clientModel->getNumBlocks(), clientModel->getNumBlocksOfPeers());\n         connect(clientModel, SIGNAL(numBlocksChanged(int,int)), this, SLOT(setNumBlocks(int,int)));\n \n-        // Report errors from network/worker thread\n-        connect(clientModel, SIGNAL(error(QString,QString,bool)), this, SLOT(error(QString,QString,bool)));\n+        // Receive and report messages from network/worker thread\n+        connect(clientModel, SIGNAL(message(QString,QString,bool,unsigned int)), this, SLOT(message(QString,QString,bool,unsigned int)));\n \n         overviewPage->setClientModel(clientModel);\n         rpcConsole->setClientModel(clientModel);\n@@ -381,8 +382,8 @@ void BitcoinGUI::setWalletModel(WalletModel *walletModel)\n     this->walletModel = walletModel;\n     if(walletModel)\n     {\n-        // Report errors from wallet thread\n-        connect(walletModel, SIGNAL(error(QString,QString,bool)), this, SLOT(error(QString,QString,bool)));\n+        // Receive and report messages from wallet thread\n+        connect(walletModel, SIGNAL(message(QString,QString,bool,unsigned int)), this, SLOT(message(QString,QString,bool,unsigned int)));\n \n         // Put transaction list in tabs\n         transactionView->setModel(walletModel);\n@@ -592,15 +593,50 @@ void BitcoinGUI::setNumBlocks(int count, int nTotalBlocks)\n     progressBar->setToolTip(tooltip);\n }\n \n-void BitcoinGUI::error(const QString &title, const QString &message, bool modal)\n+void BitcoinGUI::message(const QString &title, const QString &message, bool modal, unsigned int style)\n {\n-    // Report errors from network/worker thread\n-    if(modal)\n-    {\n-        QMessageBox::critical(this, title, message, QMessageBox::Ok, QMessageBox::Ok);\n-    } else {\n-        notificator->notify(Notificator::Critical, title, message);\n+    QString strTitle = tr(\"Bitcoin\") + \" - \";\n+    // Default to information icon\n+    int nMBoxIcon = QMessageBox::Information;\n+    int nNotifyIcon = Notificator::Information;\n+\n+    // Check for usage of predefined title\n+    switch (style) {\n+    case CClientUIInterface::MSG_ERROR:\n+        strTitle += tr(\"Error\");\n+        break;\n+    case CClientUIInterface::MSG_WARNING:\n+        strTitle += tr(\"Warning\");\n+        break;\n+    case CClientUIInterface::MSG_INFORMATION:\n+        strTitle += tr(\"Information\");\n+        break;\n+    default:\n+        strTitle += title; // Use supplied title\n+    }\n+\n+    // Check for error/warning icon\n+    if (style & CClientUIInterface::ICON_ERROR) {\n+        nMBoxIcon = QMessageBox::Critical;\n+        nNotifyIcon = Notificator::Critical;\n+    }\n+    else if (style & CClientUIInterface::ICON_WARNING) {\n+        nMBoxIcon = QMessageBox::Warning;\n+        nNotifyIcon = Notificator::Warning;\n+    }\n+\n+    // Display message\n+    if (modal) {\n+        // Check for buttons, use OK as default, if none was supplied\n+        QMessageBox::StandardButton buttons;\n+        if (!(buttons = (QMessageBox::StandardButton)(style & CClientUIInterface::BTN_MASK)))\n+            buttons = QMessageBox::Ok;\n+\n+        QMessageBox mBox((QMessageBox::Icon)nMBoxIcon, strTitle, message, buttons);\n+        mBox.exec();\n     }\n+    else\n+        notificator->notify((Notificator::Class)nNotifyIcon, strTitle, message);\n }\n \n void BitcoinGUI::changeEvent(QEvent *e)"
      },
      {
        "sha": "151b108be722964c0a00f979d0be47f8fa392537",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5350ea4171be69d16a94e6f40c5e7fa41e00ac13/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5350ea4171be69d16a94e6f40c5e7fa41e00ac13/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=5350ea4171be69d16a94e6f40c5e7fa41e00ac13",
        "patch": "@@ -119,8 +119,14 @@ public slots:\n     */\n     void setEncryptionStatus(int status);\n \n-    /** Notify the user of an error in the network or transaction handling code. */\n-    void error(const QString &title, const QString &message, bool modal);\n+    /** Notify the user of an event from the core network or transaction handling code.\n+       @param[in] title     the message box / notification title\n+       @param[in] message   the displayed text\n+       @param[in] modal     true to use a message box, false to use a notification\n+       @param[in] style     style definitions (icon and used buttons - buttons only for message boxes)\n+                            @see CClientUIInterface::MessageBoxFlags\n+    */\n+    void message(const QString &title, const QString &message, bool modal, unsigned int style);\n     /** Asks the user whether to pay the transaction fee or to cancel the transaction.\n        It is currently not possible to pass a return value to another thread through\n        BlockingQueuedConnection, so an indirected pointer is used."
      },
      {
        "sha": "f8fa4120199ffd75b5af44efb9d1140a3f6f600c",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5350ea4171be69d16a94e6f40c5e7fa41e00ac13/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5350ea4171be69d16a94e6f40c5e7fa41e00ac13/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=5350ea4171be69d16a94e6f40c5e7fa41e00ac13",
        "patch": "@@ -84,7 +84,7 @@ void ClientModel::updateAlert(const QString &hash, int status)\n         CAlert alert = CAlert::getAlertByHash(hash_256);\n         if(!alert.IsNull())\n         {\n-            emit error(tr(\"Network Alert\"), QString::fromStdString(alert.strStatusBar), false);\n+            emit message(tr(\"Network Alert\"), QString::fromStdString(alert.strStatusBar), false, CClientUIInterface::ICON_ERROR);\n         }\n     }\n "
      },
      {
        "sha": "b16b2d50041e9d4f23c6c1b7c8381eb4f65341e3",
        "filename": "src/qt/clientmodel.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5350ea4171be69d16a94e6f40c5e7fa41e00ac13/src/qt/clientmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5350ea4171be69d16a94e6f40c5e7fa41e00ac13/src/qt/clientmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.h?ref=5350ea4171be69d16a94e6f40c5e7fa41e00ac13",
        "patch": "@@ -70,8 +70,8 @@ class ClientModel : public QObject\n     void numBlocksChanged(int count, int countOfPeers);\n     void alertsChanged(const QString &warnings);\n \n-    //! Asynchronous error notification\n-    void error(const QString &title, const QString &message, bool modal);\n+    //! Asynchronous message notification\n+    void message(const QString &title, const QString &message, bool modal, unsigned int style);\n \n public slots:\n     void updateTimer();"
      },
      {
        "sha": "3c8d5903b007e7c56e0e0297be416917d417f86f",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5350ea4171be69d16a94e6f40c5e7fa41e00ac13/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5350ea4171be69d16a94e6f40c5e7fa41e00ac13/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=5350ea4171be69d16a94e6f40c5e7fa41e00ac13",
        "patch": "@@ -147,8 +147,8 @@ class WalletModel : public QObject\n     // this means that the unlocking failed or was cancelled.\n     void requireUnlock();\n \n-    // Asynchronous error notification\n-    void error(const QString &title, const QString &message, bool modal);\n+    // Asynchronous message notification\n+    void message(const QString &title, const QString &message, bool modal, unsigned int style);\n \n public slots:\n     /* Wallet status might have changed */"
      },
      {
        "sha": "693411aa6dc95c3b29ee1bdef9a15f83ae94ee24",
        "filename": "src/ui_interface.h",
        "status": "modified",
        "additions": 37,
        "deletions": 29,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5350ea4171be69d16a94e6f40c5e7fa41e00ac13/src/ui_interface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5350ea4171be69d16a94e6f40c5e7fa41e00ac13/src/ui_interface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ui_interface.h?ref=5350ea4171be69d16a94e6f40c5e7fa41e00ac13",
        "patch": "@@ -29,38 +29,46 @@ class CClientUIInterface\n     /** Flags for CClientUIInterface::ThreadSafeMessageBox */\n     enum MessageBoxFlags\n     {\n-        YES                   = 0x00000002,\n-        OK                    = 0x00000004,\n-        NO                    = 0x00000008,\n-        YES_NO                = (YES|NO),\n-        CANCEL                = 0x00000010,\n-        APPLY                 = 0x00000020,\n-        CLOSE                 = 0x00000040,\n-        OK_DEFAULT            = 0x00000000,\n-        YES_DEFAULT           = 0x00000000,\n-        NO_DEFAULT            = 0x00000080,\n-        CANCEL_DEFAULT        = 0x80000000,\n-        ICON_EXCLAMATION      = 0x00000100,\n-        ICON_HAND             = 0x00000200,\n-        ICON_WARNING          = ICON_EXCLAMATION,\n-        ICON_ERROR            = ICON_HAND,\n-        ICON_QUESTION         = 0x00000400,\n-        ICON_INFORMATION      = 0x00000800,\n-        ICON_STOP             = ICON_HAND,\n-        ICON_ASTERISK         = ICON_INFORMATION,\n-        ICON_MASK             = (0x00000100|0x00000200|0x00000400|0x00000800),\n-        FORWARD               = 0x00001000,\n-        BACKWARD              = 0x00002000,\n-        RESET                 = 0x00004000,\n-        HELP                  = 0x00008000,\n-        MORE                  = 0x00010000,\n-        SETUP                 = 0x00020000,\n-        // Force blocking, modal message box dialog (not just OS notification)\n-        MODAL                 = 0x00040000\n+        ICON_INFORMATION    = 0,\n+        ICON_WARNING        = (1U << 0),\n+        ICON_ERROR          = (1U << 1),\n+        /**\n+         * Mask of all available icons in CClientUIInterface::MessageBoxFlags\n+         * This needs to be updated, when icons are changed there!\n+         */\n+        ICON_MASK = (ICON_INFORMATION | ICON_WARNING | ICON_ERROR),\n+\n+        /** These values are taken from qmessagebox.h \"enum StandardButton\" to be directly usable */\n+        BTN_OK      = 0x00000400U, // QMessageBox::Ok\n+        BTN_YES     = 0x00004000U, // QMessageBox::Yes\n+        BTN_NO      = 0x00010000U, // QMessageBox::No\n+        BTN_ABORT   = 0x00040000U, // QMessageBox::Abort\n+        BTN_RETRY   = 0x00080000U, // QMessageBox::Retry\n+        BTN_IGNORE  = 0x00100000U, // QMessageBox::Ignore\n+        BTN_CLOSE   = 0x00200000U, // QMessageBox::Close\n+        BTN_CANCEL  = 0x00400000U, // QMessageBox::Cancel\n+        BTN_DISCARD = 0x00800000U, // QMessageBox::Discard\n+        BTN_HELP    = 0x01000000U, // QMessageBox::Help\n+        BTN_APPLY   = 0x02000000U, // QMessageBox::Apply\n+        BTN_RESET   = 0x04000000U, // QMessageBox::Reset\n+        /**\n+         * Mask of all available buttons in CClientUIInterface::MessageBoxFlags\n+         * This needs to be updated, when buttons are changed there!\n+         */\n+        BTN_MASK = (BTN_OK | BTN_YES | BTN_NO | BTN_ABORT | BTN_RETRY | BTN_IGNORE |\n+                    BTN_CLOSE | BTN_CANCEL | BTN_DISCARD | BTN_HELP | BTN_APPLY | BTN_RESET),\n+\n+        /** Force blocking, modal message box dialog (not just OS notification) */\n+        MODAL               = 0x10000000U,\n+\n+        /** Predefined combinations for certain default usage cases */\n+        MSG_INFORMATION = (ICON_INFORMATION | BTN_OK),\n+        MSG_WARNING = (ICON_WARNING | BTN_OK | MODAL),\n+        MSG_ERROR = (ICON_ERROR | BTN_OK | MODAL)\n     };\n \n     /** Show message box. */\n-    boost::signals2::signal<void (const std::string& message, const std::string& caption, int style)> ThreadSafeMessageBox;\n+    boost::signals2::signal<void (const std::string& message, const std::string& caption, unsigned int style)> ThreadSafeMessageBox;\n \n     /** Ask the user whether they want to pay a fee or not. */\n     boost::signals2::signal<bool (int64 nFeeRequired, const std::string& strCaption), boost::signals2::last_value<bool> > ThreadSafeAskFee;"
      },
      {
        "sha": "2f36c66067c540905306f613c71aa2f26d83e29c",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5350ea4171be69d16a94e6f40c5e7fa41e00ac13/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5350ea4171be69d16a94e6f40c5e7fa41e00ac13/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=5350ea4171be69d16a94e6f40c5e7fa41e00ac13",
        "patch": "@@ -1248,7 +1248,7 @@ void AddTimeData(const CNetAddr& ip, int64 nTime)\n                     string strMessage = _(\"Warning: Please check that your computer's date and time are correct! If your clock is wrong Bitcoin will not work properly.\");\n                     strMiscWarning = strMessage;\n                     printf(\"*** %s\\n\", strMessage.c_str());\n-                    uiInterface.ThreadSafeMessageBox(strMessage+\" \", string(\"Bitcoin\"), CClientUIInterface::OK | CClientUIInterface::ICON_EXCLAMATION);\n+                    uiInterface.ThreadSafeMessageBox(strMessage, \"\", CClientUIInterface::MSG_WARNING);\n                 }\n             }\n         }"
      }
    ]
  }
]