DrahtBot,2021-01-29 02:30:11,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #20685 (Add I2P support using I2P SAM by vasild)\n* #19415 (net: Make DNS lookup mockable, add fuzzing harness by practica",https://github.com/bitcoin/bitcoin/pull/20965#issuecomment-769531982,769531982,
jonatack,2021-01-29 15:07:34,Updated per review feedback by @MarcoFalke and @theStack and added an optional commit to use named casts (can be dropped if preferred).,https://github.com/bitcoin/bitcoin/pull/20965#issuecomment-769860320,769860320,
jonatack,2021-01-30 20:58:20,"@theStack thanks for having a look--I asked myself the same question and decided to start with proposing dynamic generation because returning the help doc isn't a perf hotspot and, unlike the two existing cases, this one can be generated automatically (the functional tests enforce a sanity check on any upstream updates).",https://github.com/bitcoin/bitcoin/pull/20965#issuecomment-770279543,770279543,
MarcoFalke,2021-01-31 08:24:05,"> replacing C-style casts with named casts is a good idea to enable compile time checks\n\nWhat is an example for a compile time check that is enabled when using those for numeric types? I am only aware of compile time checks that are enabled for pointers. Static casts for numeric values are just overly verbose for no reason and I'd prefer not to change existing code.",https://github.com/bitcoin/bitcoin/pull/20965#issuecomment-770345838,770345838,
theStack,2021-01-31 12:34:50,"> What is an example for a compile time check that is enabled when using those for numeric types?\n\nIf the destination type is numeric, the named cast asserts at compile time that also the source type is numeric, while a c-style cast doesn't in all cases:\n```\nlong foo = (long)some_pointer; // compiles happily\nlong bar = static_cast<long>some_pointer; // ""error: invalid ‘static_cast’ from ",https://github.com/bitcoin/bitcoin/pull/20965#issuecomment-770375623,770375623,
jonatack,2021-01-31 19:56:16,"Yup, dropped the last commit, it's not related to this change and can be done later when the relevant lines are touched. Thanks for reviewing!",https://github.com/bitcoin/bitcoin/pull/20965#issuecomment-770440803,770440803,
jonatack,2021-02-01 11:26:55,Updated per `git diff 23299de bbb07d1` for @MarcoFalke's feedback (thanks!),https://github.com/bitcoin/bitcoin/pull/20965#issuecomment-770786077,770786077,
jonatack,2021-02-01 23:21:50,"Realized that `-onlynet` in `src/init.cpp` should use `GetNetworkNames()` too. Rebased, as `-onlynet` was just changed, and updated.",https://github.com/bitcoin/bitcoin/pull/20965#issuecomment-771229977,771229977,
jonatack,2021-02-12 23:08:12,"> Note that the exact string listing in parantheses changes slightly now, as the ""or"" part is not there anymore, but I think we can perfectly live with that.\n\nIndeed. I hesitated to do something like\n```cpp\nnames.emplace_back(""or "" + GetNetworkName(NET_UNROUTABLE));\n```",https://github.com/bitcoin/bitcoin/pull/20965#issuecomment-778504830,778504830,
jonatack,2021-02-15 17:51:39,"@shesek done, per your original IRC issue getpeerinfo's network field returns (and documents in the help) the `Network::NET_UNROUTABLE` type as ""not_publicly_routable"" (master/v22.0)",https://github.com/bitcoin/bitcoin/pull/20965#issuecomment-779373428,779373428,
MarcoFalke,2021-01-28 17:48:19,unrelated nit: Could return a list of all networks in netbase and call `Join(...)` here? Would simplify future review if a network is added or the list added to another place.,https://github.com/bitcoin/bitcoin/pull/20965#discussion_r566288957,566288957,src/rpc/net.cpp
jonatack,2021-01-29 02:35:22,"done, it works but not sure if it's kosher to iterate over the enum instead of using a static, manually updated array",https://github.com/bitcoin/bitcoin/pull/20965#discussion_r566540957,566540957,src/rpc/net.cpp
jonatack,2021-01-29 12:06:33,added regression coverage for the generated help,https://github.com/bitcoin/bitcoin/pull/20965#discussion_r566777028,566777028,src/rpc/net.cpp
jonatack,2021-01-29 12:10:30,"(it seems ok to iterate over the enum per the doc in `src/netaddress.h`)\n```\n * Keep these sequential starting from 0 and `NET_MAX` as the last entry.\n * We have loops like `for (int i = 0; i < NET_MAX; i++)` that expect to iterate\n * over all enum values and also `GetExtNetwork()` ""extends"" this enum by\n * introducing standalone constants starting from `NET_MAX`.\n */\nenum Network\n",https://github.com/bitcoin/bitcoin/pull/20965#discussion_r566778995,566778995,src/rpc/net.cpp
theStack,2021-01-29 12:51:26,"nit: I'd slightly prefer a more generic approach here for the loop that doesn't make any assumptions about the position of concrete enums:\n\n```suggestion\n    for (int n = 0; n < Network::NET_MAX; ++n) {\n        enum Network network = static_cast<enum Network>(n);\n        if (network == Network::NET_UNROUTABLE || network == Network::NET_INTERNAL) continue;\n        names.emplace_back(Get",https://github.com/bitcoin/bitcoin/pull/20965#discussion_r566799825,566799825,src/netbase.cpp
jonatack,2021-01-29 13:01:42,"Yes, that's better. Thanks!",https://github.com/bitcoin/bitcoin/pull/20965#discussion_r566805301,566805301,src/netbase.cpp
jonatack,2021-01-29 15:06:04,"Done, and moved it next to GetNetworksInfo() as the 2 functions are similar.",https://github.com/bitcoin/bitcoin/pull/20965#discussion_r566884760,566884760,src/netbase.cpp
MarcoFalke,2021-01-31 12:42:33,Still not convinced that it is worth it to change existing code that is being removed in #21015  ,https://github.com/bitcoin/bitcoin/pull/20965#discussion_r567420528,567420528,src/rpc/net.cpp
MarcoFalke,2021-02-01 09:36:57,"Generally, it might be better to use C++11 non-narrowing casts, or ideally no cast at all.",https://github.com/bitcoin/bitcoin/pull/20965#discussion_r567680311,567680311,src/rpc/net.cpp
MarcoFalke,2021-02-01 09:38:09,"I don't think getnetworkinfo returns an object for unroutable networks? Also, i2p, etc aren't implemented yet.",https://github.com/bitcoin/bitcoin/pull/20965#discussion_r567681174,567681174,src/rpc/net.cpp
MarcoFalke,2021-02-01 09:39:31,"Any reason to add `enum` in this move-only? The compiler, as well as the dev already know this is an enum",https://github.com/bitcoin/bitcoin/pull/20965#discussion_r567682090,567682090,src/rpc/net.cpp
MarcoFalke,2021-02-01 09:40:44,"Oh, nvm you added `const`, not `enum`.",https://github.com/bitcoin/bitcoin/pull/20965#discussion_r567682918,567682918,src/rpc/net.cpp
jonatack,2021-02-01 11:16:50,"Good catch about getnetworkinfo! (and I should have remembered that, too). Fixed both.",https://github.com/bitcoin/bitcoin/pull/20965#discussion_r567745483,567745483,src/rpc/net.cpp
jonatack,2021-02-15 14:45:35,@vasild you may want to update this line to remove `NET_I2P` (and add it to the rpc_net.py tests) in #20685 (if you're inclined to do it there),https://github.com/bitcoin/bitcoin/pull/20965#discussion_r576240822,576240822,src/netbase.cpp
vasild,2021-02-15 15:59:45,"Done in 433d9a9f1e416c5518f832b4ca9402c8807877bc `net: Do not skip the I2P network from GetNetworkNames()`, thanks for the notice!",https://github.com/bitcoin/bitcoin/pull/20965#discussion_r576290360,576290360,src/netbase.cpp
