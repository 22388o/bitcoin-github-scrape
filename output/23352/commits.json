[
  {
    "sha": "fa5e125d3c88aa1bbd6e0599c78bf10e8a119d6f",
    "node_id": "C_kwDOABII59oAKGZhNWUxMjVkM2M4OGFhMWJiZDZlMDU5OWM3OGJmMTBlOGExMTlkNmY",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-03-29T20:34:53Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-11-29T09:49:37Z"
      },
      "message": "test: Limit scope of id global which is shared between subtests\n\nThis is needed to use ASSERT_DEBUG_LOG, which may include a fixed node\nnumber",
      "tree": {
        "sha": "b79253d34ee814305faa91faaada825eb2043311",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b79253d34ee814305faa91faaada825eb2043311"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa5e125d3c88aa1bbd6e0599c78bf10e8a119d6f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhtBgv/fKuzhXxRMvvM4hmo+xhPMoT/wrkQb5cOyLBXWbmlxLEFbNEwXCiG0H9c\nIErXmKlYEVJv37dj+w4ZM3KUOdgtfQviIYq5yzSbmnQmL4D1uoWCNaN5LBviTsAz\nxKon+SWc6xnrpj/5mSf8rNzK0qAOJF4gjSCnD716qwoVUpQNNf7tewCahBymqtSy\nWL3Rbn0fhvWANk7GOP2wlPXjNBj58hCiZkYyyJbnPivRrmR+KsmXattpN0MOsp3e\nWNT7YNiPvZR/qxklBymaYuBWWHwHnaxPVyKAM4nymtxnVDOhDMoZZHmKyOcAnVdx\ndplntvBdr6CAJ9iS+DkWCmjoZ2uwPl/2nOz55Knj6tUNfsfw1CS1zTP3GelK7/6b\nn4heJaLPcBj6WJqq8/Ubz3dSzpN8nE4snQ7P95tssRxgtGJ/RmeTCSvyVBaBCJti\nGGiji859zF54sidiglCuZrOjC1Jr5S1gbm1hFHhNXaSroO05IiDF/Ktx2Dw/Usrk\nuCwWLVGb\n=tsA6\n-----END PGP SIGNATURE-----",
        "payload": "tree b79253d34ee814305faa91faaada825eb2043311\nparent 16d698cdcf3c4ef34bae4ccd616d0ddc4a7165d4\nauthor MarcoFalke <falke.marco@gmail.com> 1585514093 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1638179377 +0100\n\ntest: Limit scope of id global which is shared between subtests\n\nThis is needed to use ASSERT_DEBUG_LOG, which may include a fixed node\nnumber\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa5e125d3c88aa1bbd6e0599c78bf10e8a119d6f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa5e125d3c88aa1bbd6e0599c78bf10e8a119d6f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa5e125d3c88aa1bbd6e0599c78bf10e8a119d6f/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "16d698cdcf3c4ef34bae4ccd616d0ddc4a7165d4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16d698cdcf3c4ef34bae4ccd616d0ddc4a7165d4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/16d698cdcf3c4ef34bae4ccd616d0ddc4a7165d4"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 4,
      "deletions": 2
    },
    "files": [
      {
        "sha": "30723eb1cf18f0d85f32b902eaf375cf87535869",
        "filename": "src/test/denialofservice_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5e125d3c88aa1bbd6e0599c78bf10e8a119d6f/src/test/denialofservice_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5e125d3c88aa1bbd6e0599c78bf10e8a119d6f/src/test/denialofservice_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/denialofservice_tests.cpp?ref=fa5e125d3c88aa1bbd6e0599c78bf10e8a119d6f",
        "patch": "@@ -34,8 +34,6 @@ static CService ip(uint32_t i)\n     return CService(CNetAddr(s), Params().GetDefaultPort());\n }\n \n-static NodeId id = 0;\n-\n void UpdateLastBlockAnnounceTime(NodeId node, int64_t time_in_seconds);\n \n BOOST_FIXTURE_TEST_SUITE(denialofservice_tests, TestingSetup)\n@@ -59,6 +57,7 @@ BOOST_AUTO_TEST_CASE(outbound_slow_chain_eviction)\n \n     // Mock an outbound peer\n     CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n+    static NodeId id = 0;\n     CNode dummyNode1(id++, ServiceFlags(NODE_NETWORK | NODE_WITNESS), INVALID_SOCKET, addr1, /*nKeyedNetGroupIn=*/0, /*nLocalHostNonceIn=*/0, CAddress(), /*addrNameIn=*/\"\", ConnectionType::OUTBOUND_FULL_RELAY, /*inbound_onion=*/false);\n     dummyNode1.SetCommonVersion(PROTOCOL_VERSION);\n \n@@ -108,6 +107,7 @@ BOOST_AUTO_TEST_CASE(outbound_slow_chain_eviction)\n static void AddRandomOutboundPeer(std::vector<CNode*>& vNodes, PeerManager& peerLogic, ConnmanTestMsg& connman)\n {\n     CAddress addr(ip(g_insecure_rand_ctx.randbits(32)), NODE_NONE);\n+    static NodeId id = 0;\n     vNodes.emplace_back(new CNode(id++, ServiceFlags(NODE_NETWORK | NODE_WITNESS), INVALID_SOCKET, addr, /*nKeyedNetGroupIn=*/0, /*nLocalHostNonceIn=*/0, CAddress(), /*addrNameIn=*/\"\", ConnectionType::OUTBOUND_FULL_RELAY, /*inbound_onion=*/false));\n     CNode &node = *vNodes.back();\n     node.SetCommonVersion(PROTOCOL_VERSION);\n@@ -212,6 +212,7 @@ BOOST_AUTO_TEST_CASE(peer_discouragement)\n     std::array<CNode*, 3> nodes;\n \n     banman->ClearBanned();\n+    static NodeId id = 0;\n     nodes[0] = new CNode{id++, NODE_NETWORK, INVALID_SOCKET, addr[0], /*nKeyedNetGroupIn=*/0,\n                          /*nLocalHostNonceIn */ 0, CAddress(), /*addrNameIn=*/\"\",\n                          ConnectionType::INBOUND, /*inbound_onion=*/false};\n@@ -297,6 +298,7 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n     SetMockTime(nStartTime); // Overrides future calls to GetTime()\n \n     CAddress addr(ip(0xa0b0c001), NODE_NONE);\n+    static NodeId id = 0;\n     CNode dummyNode(id++, NODE_NETWORK, INVALID_SOCKET, addr, /*nKeyedNetGroupIn=*/4, /*nLocalHostNonceIn=*/4, CAddress(), /*addrNameIn=*/\"\", ConnectionType::INBOUND, /*inbound_onion=*/false);\n     dummyNode.SetCommonVersion(PROTOCOL_VERSION);\n     peerLogic->InitializeNode(&dummyNode);"
      }
    ]
  },
  {
    "sha": "fa5b90f5e22e13b515e919f88cacbbb654114e7e",
    "node_id": "C_kwDOABII59oAKGZhNWI5MGY1ZTIyZTEzYjUxNWU5MTlmODhjYWNiYmI2NTQxMTRlN2U",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-10-25T10:29:33Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-11-29T09:50:29Z"
      },
      "message": "test: Extend stale_tip_peer_management test",
      "tree": {
        "sha": "397ae007c36a0042dc8e276fb7a99f8f2d4d3cc1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/397ae007c36a0042dc8e276fb7a99f8f2d4d3cc1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa5b90f5e22e13b515e919f88cacbbb654114e7e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgfmQwApH0CCTwsVyEGsiFIP4loIS0x/0gbxLGDWs9esn7jF9O3r9KApm2GTOrs\nlHHNLc3kcgJcm88GodJLb3tBjWJpQA1Xq0wkzD+0rBtwkBNoofzySzR6P58B4KPp\n5b7XykFNvB442iS6aOpTvs3RYAY/JmpVnXSo59RVBOoZ7+U96wHASeICOVK5L9BX\naWOxSt/h8grr2i1XDtbPqw3eYtRP170pQtWiPAi7RRCSbwhu08hHogrrgXptkKlL\ns6mp7j28wodr19o0HLAFRTNl5bsYYjZsdKCRvLiRkvf7dnl5Uxa8ZSU2wrrEUJMc\nXPrHRy0GiS1lgKKVNo/vbD6/M/410zy63uRhr0IbjHAt8XsNF8UPjtRh/lO964SN\np5r1bFMEpP7Hy67bRMRPIa+dre1xeHG3D4oUir6HATGpUy2sg+84G5BUfRWU/tn7\nsje/hnVrrlTSKMIr7vG5PskQpus/N//7EvJtMI0epiOs+ufynn4nAficmADVbNGh\n1aHbI5Wc\n=1qKC\n-----END PGP SIGNATURE-----",
        "payload": "tree 397ae007c36a0042dc8e276fb7a99f8f2d4d3cc1\nparent fa5e125d3c88aa1bbd6e0599c78bf10e8a119d6f\nauthor MarcoFalke <falke.marco@gmail.com> 1635157773 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1638179429 +0100\n\ntest: Extend stale_tip_peer_management test\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa5b90f5e22e13b515e919f88cacbbb654114e7e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa5b90f5e22e13b515e919f88cacbbb654114e7e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa5b90f5e22e13b515e919f88cacbbb654114e7e/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa5e125d3c88aa1bbd6e0599c78bf10e8a119d6f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa5e125d3c88aa1bbd6e0599c78bf10e8a119d6f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa5e125d3c88aa1bbd6e0599c78bf10e8a119d6f"
      }
    ],
    "stats": {
      "total": 108,
      "additions": 97,
      "deletions": 11
    },
    "files": [
      {
        "sha": "f6a5fded9f98a88364a538273cb6a427cd724ca9",
        "filename": "src/test/denialofservice_tests.cpp",
        "status": "modified",
        "additions": 70,
        "deletions": 5,
        "changes": 75,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5b90f5e22e13b515e919f88cacbbb654114e7e/src/test/denialofservice_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5b90f5e22e13b515e919f88cacbbb654114e7e/src/test/denialofservice_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/denialofservice_tests.cpp?ref=fa5b90f5e22e13b515e919f88cacbbb654114e7e",
        "patch": "@@ -9,13 +9,18 @@\n #include <chainparams.h>\n #include <net.h>\n #include <net_processing.h>\n+#include <netmessagemaker.h>\n+#include <pow.h>\n #include <pubkey.h>\n #include <script/sign.h>\n #include <script/signingprovider.h>\n #include <script/standard.h>\n #include <serialize.h>\n+#include <test/util/logging.h>\n+#include <test/util/mining.h>\n #include <test/util/net.h>\n #include <test/util/setup_common.h>\n+#include <test/util/wallet.h>\n #include <txorphanage.h>\n #include <util/string.h>\n #include <util/system.h>\n@@ -36,7 +41,7 @@ static CService ip(uint32_t i)\n \n void UpdateLastBlockAnnounceTime(NodeId node, int64_t time_in_seconds);\n \n-BOOST_FIXTURE_TEST_SUITE(denialofservice_tests, TestingSetup)\n+BOOST_FIXTURE_TEST_SUITE(denialofservice_tests, RegTestingSetup)\n \n // Test eviction of an outbound peer whose chain never advances\n // Mock a node connection, and use mocktime to simulate a peer\n@@ -130,6 +135,7 @@ BOOST_AUTO_TEST_CASE(stale_tip_peer_management)\n     options.nMaxConnections = DEFAULT_MAX_PEER_CONNECTIONS;\n     options.m_max_outbound_full_relay = max_outbound_full_relay;\n     options.nMaxFeeler = MAX_FEELER_CONNECTIONS;\n+    options.m_msgproc = peerLogic.get();\n \n     connman->Init(options);\n     std::vector<CNode *> vNodes;\n@@ -146,11 +152,16 @@ BOOST_AUTO_TEST_CASE(stale_tip_peer_management)\n         BOOST_CHECK(node->fDisconnect == false);\n     }\n \n-    SetMockTime(GetTime() + 3 * chainparams.GetConsensus().nPowTargetSpacing + 1);\n+    auto mocked_time = GetTime() + 3 * chainparams.GetConsensus().nPowTargetSpacing + 1;\n+    SetMockTime(mocked_time);\n \n     // Now tip should definitely be stale, and we should look for an extra\n     // outbound peer\n-    peerLogic->CheckForStaleTipAndEvictPeers();\n+    {\n+        ASSERT_DEBUG_LOG(\"Potential stale tip detected, will try using extra outbound peer (last tip update: 1801 seconds ago)\");\n+        ASSERT_DEBUG_LOG(\"net: setting try another outbound peer=true\");\n+        peerLogic->CheckForStaleTipAndEvictPeers();\n+    }\n     BOOST_CHECK(connman->GetTryNewOutboundPeer());\n \n     // Still no peers should be marked for disconnection\n@@ -163,7 +174,11 @@ BOOST_AUTO_TEST_CASE(stale_tip_peer_management)\n     // required time connected check should be satisfied).\n     AddRandomOutboundPeer(vNodes, *peerLogic, *connman);\n \n-    peerLogic->CheckForStaleTipAndEvictPeers();\n+    {\n+        ASSERT_DEBUG_LOG(\"disconnecting extra outbound peer=8 (last block announcement received at time 0)\");\n+        ASSERT_DEBUG_LOG(\"net: setting try another outbound peer=false\");\n+        peerLogic->CheckForStaleTipAndEvictPeers();\n+    }\n     for (int i = 0; i < max_outbound_full_relay; ++i) {\n         BOOST_CHECK(vNodes[i]->fDisconnect == false);\n     }\n@@ -176,13 +191,63 @@ BOOST_AUTO_TEST_CASE(stale_tip_peer_management)\n     // peer, and check that the next newest node gets evicted.\n     UpdateLastBlockAnnounceTime(vNodes.back()->GetId(), GetTime());\n \n-    peerLogic->CheckForStaleTipAndEvictPeers();\n+    {\n+        ASSERT_DEBUG_LOG(\"disconnecting extra outbound peer=7 (last block announcement received at time 0)\");\n+        ASSERT_DEBUG_LOG(\"net: setting try another outbound peer=false\");\n+        peerLogic->CheckForStaleTipAndEvictPeers();\n+    }\n     for (int i = 0; i < max_outbound_full_relay - 1; ++i) {\n         BOOST_CHECK(vNodes[i]->fDisconnect == false);\n     }\n     BOOST_CHECK(vNodes[max_outbound_full_relay-1]->fDisconnect == true);\n     BOOST_CHECK(vNodes.back()->fDisconnect == false);\n \n+    vNodes[max_outbound_full_relay-1]->fDisconnect = false;\n+    UpdateLastBlockAnnounceTime(vNodes.back()->GetId(), 0);\n+\n+    // Set CanDirectFetch() to true by generating a block\n+    {\n+        auto block = PrepareBlock(m_node, CScript{OP_TRUE});\n+        block->nTime = mocked_time;\n+        SolvePow(*block);\n+        m_node.chainman->ProcessNewBlock(chainparams, block, true, nullptr);\n+    }\n+    // Last node pretends to send a block\n+    std::vector<CBlock> headers;\n+    {\n+        {\n+            LOCK(cs_main);\n+            const auto tip = m_node.chainman->ActiveChain().Tip();\n+            CBlock dummy{tip->GetBlockHeader()};\n+            dummy.hashPrevBlock = tip->GetBlockHash();\n+            dummy.nTime = mocked_time + 1;\n+            SolvePow(dummy);\n+\n+            headers.emplace_back(dummy);\n+        }\n+\n+        connman->ReceiveMsgFrom(*vNodes.back(), NetMsgType::HEADERS, headers);\n+\n+        vNodes.back()->fPauseSend = false;\n+        vNodes.back()->nVersion = PROTOCOL_VERSION;\n+    }\n+    {\n+        LogPrintTest(\"Check that node is protected when it pretends to have a block\");\n+        LOCK(vNodes.back()->cs_sendProcessing);\n+        ASSERT_DEBUG_LOG(\"received: headers (82 bytes) peer=8\");\n+        ASSERT_DEBUG_LOG(\"Protecting outbound peer=8 from eviction\");\n+        connman->ProcessMessagesOnce(*vNodes.back());\n+    }\n+    {\n+        ASSERT_DEBUG_LOG(\"disconnecting extra outbound peer=7 (last block announcement received at time 0)\");\n+        ASSERT_DEBUG_LOG(\"net: setting try another outbound peer=false\");\n+        peerLogic->CheckForStaleTipAndEvictPeers();\n+    }\n+    for (int i = 0; i < max_outbound_full_relay; ++i) {\n+        const bool is_8th{i == 7};\n+        BOOST_CHECK(vNodes[i]->fDisconnect == is_8th);\n+    }\n+\n     for (const CNode *node : vNodes) {\n         peerLogic->FinalizeNode(*node);\n     }"
      },
      {
        "sha": "b653099015f8587631f1683b5d8b6ecbde418299",
        "filename": "src/test/util/logging.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5b90f5e22e13b515e919f88cacbbb654114e7e/src/test/util/logging.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5b90f5e22e13b515e919f88cacbbb654114e7e/src/test/util/logging.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/logging.cpp?ref=fa5b90f5e22e13b515e919f88cacbbb654114e7e",
        "patch": "@@ -10,6 +10,8 @@\n \n #include <stdexcept>\n \n+void LogPrintTest(const std::string& info) { LogPrintf(\"[test] %s\\n\", info); }\n+\n DebugLogHelper::DebugLogHelper(std::string message, MatchFn match)\n     : m_message{std::move(message)}, m_match(std::move(match))\n {"
      },
      {
        "sha": "06e9518169ad95c33fe4d34e11a1811ee4d04021",
        "filename": "src/test/util/logging.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5b90f5e22e13b515e919f88cacbbb654114e7e/src/test/util/logging.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5b90f5e22e13b515e919f88cacbbb654114e7e/src/test/util/logging.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/logging.h?ref=fa5b90f5e22e13b515e919f88cacbbb654114e7e",
        "patch": "@@ -11,6 +11,9 @@\n #include <list>\n #include <string>\n \n+/** Insert log from a test */\n+void LogPrintTest(const std::string& info);\n+\n class DebugLogHelper\n {\n     const std::string m_message;"
      },
      {
        "sha": "a8cad274e59e1ac1fb4539653984ab39665e7939",
        "filename": "src/test/util/mining.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 6,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5b90f5e22e13b515e919f88cacbbb654114e7e/src/test/util/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5b90f5e22e13b515e919f88cacbbb654114e7e/src/test/util/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/mining.cpp?ref=fa5b90f5e22e13b515e919f88cacbbb654114e7e",
        "patch": "@@ -56,15 +56,18 @@ std::vector<std::shared_ptr<CBlock>> CreateBlockChain(size_t total_height, const\n     return ret;\n }\n \n-CTxIn MineBlock(const NodeContext& node, const CScript& coinbase_scriptPubKey)\n+void SolvePow(CBlock& block)\n {\n-    auto block = PrepareBlock(node, coinbase_scriptPubKey);\n-\n-    while (!CheckProofOfWork(block->GetHash(), block->nBits, Params().GetConsensus())) {\n-        ++block->nNonce;\n-        assert(block->nNonce);\n+    while (!CheckProofOfWork(block.GetHash(), block.nBits, Params().GetConsensus())) {\n+        ++block.nNonce;\n+        assert(block.nNonce);\n     }\n+}\n \n+CTxIn MineBlock(const NodeContext& node, const CScript& coinbase_scriptPubKey)\n+{\n+    auto block = PrepareBlock(node, coinbase_scriptPubKey);\n+    SolvePow(*block);\n     bool processed{Assert(node.chainman)->ProcessNewBlock(Params(), block, true, nullptr)};\n     assert(processed);\n "
      },
      {
        "sha": "7e7ab9be2e674f91b69eeebe296513513e6f336a",
        "filename": "src/test/util/mining.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5b90f5e22e13b515e919f88cacbbb654114e7e/src/test/util/mining.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5b90f5e22e13b515e919f88cacbbb654114e7e/src/test/util/mining.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/mining.h?ref=fa5b90f5e22e13b515e919f88cacbbb654114e7e",
        "patch": "@@ -18,6 +18,9 @@ struct NodeContext;\n /** Create a blockchain, starting from genesis */\n std::vector<std::shared_ptr<CBlock>> CreateBlockChain(size_t total_height, const CChainParams& params);\n \n+/** Work on the proof-of-work puzzle */\n+void SolvePow(CBlock& block);\n+\n /** Returns the generated coin */\n CTxIn MineBlock(const NodeContext&, const CScript& coinbase_scriptPubKey);\n "
      },
      {
        "sha": "ccb205e83ca761ead4c43e5e9b8c9dc75425aa55",
        "filename": "src/test/util/net.h",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5b90f5e22e13b515e919f88cacbbb654114e7e/src/test/util/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5b90f5e22e13b515e919f88cacbbb654114e7e/src/test/util/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/net.h?ref=fa5b90f5e22e13b515e919f88cacbbb654114e7e",
        "patch": "@@ -9,6 +9,7 @@\n #include <netaddress.h>\n #include <net.h>\n #include <util/sock.h>\n+#include <netmessagemaker.h>\n \n #include <array>\n #include <cassert>\n@@ -42,6 +43,15 @@ struct ConnmanTestMsg : public CConnman {\n     void NodeReceiveMsgBytes(CNode& node, Span<const uint8_t> msg_bytes, bool& complete) const;\n \n     bool ReceiveMsgFrom(CNode& node, CSerializedNetMsg& ser_msg) const;\n+\n+    template <typename P>\n+    void ReceiveMsgFrom(CNode& node, const std::string& type, const P& payload)\n+    {\n+        const CNetMsgMaker msg_maker(PROTOCOL_VERSION);\n+        CSerializedNetMsg m_ser = msg_maker.Make(type.c_str(), payload);\n+\n+        assert(ReceiveMsgFrom(node, m_ser));\n+    }\n };\n \n constexpr ServiceFlags ALL_SERVICE_FLAGS[]{"
      }
    ]
  }
]