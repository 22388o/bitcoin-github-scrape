[
  {
    "sha": "37767fd46f673a06864df6e14d3030622b1cb2c9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNzc2N2ZkNDZmNjczYTA2ODY0ZGY2ZTE0ZDMwMzA2MjJiMWNiMmM5",
    "commit": {
      "author": {
        "name": "jloughry",
        "email": "joe.loughry@gmail.com",
        "date": "2016-02-12T18:35:32Z"
      },
      "committer": {
        "name": "jloughry",
        "email": "joe.loughry@gmail.com",
        "date": "2016-02-12T19:51:54Z"
      },
      "message": "fix spelling of advertise in src and doc",
      "tree": {
        "sha": "0d7af548f6da69f26498aeb00a9bfdeeb887a6b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0d7af548f6da69f26498aeb00a9bfdeeb887a6b6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/37767fd46f673a06864df6e14d3030622b1cb2c9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37767fd46f673a06864df6e14d3030622b1cb2c9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/37767fd46f673a06864df6e14d3030622b1cb2c9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37767fd46f673a06864df6e14d3030622b1cb2c9/comments",
    "author": {
      "login": "jloughry",
      "id": 1759745,
      "node_id": "MDQ6VXNlcjE3NTk3NDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1759745?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jloughry",
      "html_url": "https://github.com/jloughry",
      "followers_url": "https://api.github.com/users/jloughry/followers",
      "following_url": "https://api.github.com/users/jloughry/following{/other_user}",
      "gists_url": "https://api.github.com/users/jloughry/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jloughry/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jloughry/subscriptions",
      "organizations_url": "https://api.github.com/users/jloughry/orgs",
      "repos_url": "https://api.github.com/users/jloughry/repos",
      "events_url": "https://api.github.com/users/jloughry/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jloughry/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jloughry",
      "id": 1759745,
      "node_id": "MDQ6VXNlcjE3NTk3NDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1759745?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jloughry",
      "html_url": "https://github.com/jloughry",
      "followers_url": "https://api.github.com/users/jloughry/followers",
      "following_url": "https://api.github.com/users/jloughry/following{/other_user}",
      "gists_url": "https://api.github.com/users/jloughry/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jloughry/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jloughry/subscriptions",
      "organizations_url": "https://api.github.com/users/jloughry/orgs",
      "repos_url": "https://api.github.com/users/jloughry/repos",
      "events_url": "https://api.github.com/users/jloughry/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jloughry/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "80d1f2e48364f05b2cdf44239b3a1faa0277e58e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80d1f2e48364f05b2cdf44239b3a1faa0277e58e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/80d1f2e48364f05b2cdf44239b3a1faa0277e58e"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 10,
      "deletions": 10
    },
    "files": [
      {
        "sha": "be4125544986dd3226ce9bb4a26bc32f7ac9f428",
        "filename": "doc/tor.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37767fd46f673a06864df6e14d3030622b1cb2c9/doc/tor.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37767fd46f673a06864df6e14d3030622b1cb2c9/doc/tor.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/tor.md?ref=37767fd46f673a06864df6e14d3030622b1cb2c9",
        "patch": "@@ -52,7 +52,7 @@ your bitcoind's P2P listen port (8333 by default).\n \t                this option, and this can be a .onion address. Given the above\n \t                configuration, you can find your onion address in\n \t                /var/lib/tor/bitcoin-service/hostname. Onion addresses are given\n-\t                preference for your node to advertize itself with, for connections\n+\t                preference for your node to advertise itself with, for connections\n \t                coming from unroutable addresses (such as 127.0.0.1, where the\n \t                Tor proxy typically runs).\n "
      },
      {
        "sha": "23429ea2cc66a1b8b3f2d29d549ccede8f7d0739",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37767fd46f673a06864df6e14d3030622b1cb2c9/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37767fd46f673a06864df6e14d3030622b1cb2c9/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=37767fd46f673a06864df6e14d3030622b1cb2c9",
        "patch": "@@ -376,7 +376,7 @@ void MarkBlockAsInFlight(NodeId nodeid, const uint256& hash, const Consensus::Pa\n     mapBlocksInFlight[hash] = std::make_pair(nodeid, it);\n }\n \n-/** Check whether the last unknown block a peer advertized is not yet known. */\n+/** Check whether the last unknown block a peer advertised is not yet known. */\n void ProcessBlockAvailability(NodeId nodeid) {\n     CNodeState *state = State(nodeid);\n     assert(state != NULL);\n@@ -4456,11 +4456,11 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                 CAddress addr = GetLocalAddress(&pfrom->addr);\n                 if (addr.IsRoutable())\n                 {\n-                    LogPrintf(\"ProcessMessages: advertizing address %s\\n\", addr.ToString());\n+                    LogPrintf(\"ProcessMessages: advertising address %s\\n\", addr.ToString());\n                     pfrom->PushAddress(addr);\n                 } else if (IsPeerAddrLocalGood(pfrom)) {\n                     addr.SetIP(pfrom->addrLocal);\n-                    LogPrintf(\"ProcessMessages: advertizing address %s\\n\", addr.ToString());\n+                    LogPrintf(\"ProcessMessages: advertising address %s\\n\", addr.ToString());\n                     pfrom->PushAddress(addr);\n                 }\n             }\n@@ -5469,7 +5469,7 @@ bool SendMessages(CNode* pto)\n         // Address refresh broadcast\n         int64_t nNow = GetTimeMicros();\n         if (!IsInitialBlockDownload() && pto->nNextLocalAddrSend < nNow) {\n-            AdvertizeLocal(pto);\n+            AdvertiseLocal(pto);\n             pto->nNextLocalAddrSend = PoissonNextSend(nNow, AVG_LOCAL_ADDRESS_BROADCAST_INTERVAL);\n         }\n "
      },
      {
        "sha": "e06e5255d6affdf1db09acf1ae636973032c8ef0",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37767fd46f673a06864df6e14d3030622b1cb2c9/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37767fd46f673a06864df6e14d3030622b1cb2c9/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=37767fd46f673a06864df6e14d3030622b1cb2c9",
        "patch": "@@ -205,7 +205,7 @@ bool IsPeerAddrLocalGood(CNode *pnode)\n }\n \n // pushes our own address to a peer\n-void AdvertizeLocal(CNode *pnode)\n+void AdvertiseLocal(CNode *pnode)\n {\n     if (fListen && pnode->fSuccessfullyConnected)\n     {\n@@ -220,7 +220,7 @@ void AdvertizeLocal(CNode *pnode)\n         }\n         if (addrLocal.IsRoutable())\n         {\n-            LogPrintf(\"AdvertizeLocal: advertizing address %s\\n\", addrLocal.ToString());\n+            LogPrintf(\"AdvertiseLocal: advertising address %s\\n\", addrLocal.ToString());\n             pnode->PushAddress(addrLocal);\n         }\n     }"
      },
      {
        "sha": "d939ef55af6e118bb1e7adb5ac1808b677d9778f",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37767fd46f673a06864df6e14d3030622b1cb2c9/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37767fd46f673a06864df6e14d3030622b1cb2c9/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=37767fd46f673a06864df6e14d3030622b1cb2c9",
        "patch": "@@ -134,7 +134,7 @@ enum\n };\n \n bool IsPeerAddrLocalGood(CNode *pnode);\n-void AdvertizeLocal(CNode *pnode);\n+void AdvertiseLocal(CNode *pnode);\n void SetLimited(enum Network net, bool fLimited = true);\n bool IsLimited(enum Network net);\n bool IsLimited(const CNetAddr& addr);"
      },
      {
        "sha": "10170dbceab97e24cf84e44b75b03f54575d0168",
        "filename": "src/torcontrol.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37767fd46f673a06864df6e14d3030622b1cb2c9/src/torcontrol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37767fd46f673a06864df6e14d3030622b1cb2c9/src/torcontrol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/torcontrol.cpp?ref=37767fd46f673a06864df6e14d3030622b1cb2c9",
        "patch": "@@ -434,7 +434,7 @@ void TorController::add_onion_cb(TorControlConnection& conn, const TorControlRep\n         }\n \n         service = CService(service_id+\".onion\", GetListenPort(), false);\n-        LogPrintf(\"tor: Got service ID %s, advertizing service %s\\n\", service_id, service.ToString());\n+        LogPrintf(\"tor: Got service ID %s, advertising service %s\\n\", service_id, service.ToString());\n         if (WriteBinaryFile(GetPrivateKeyFile(), private_key)) {\n             LogPrint(\"tor\", \"tor: Cached service private key to %s\\n\", GetPrivateKeyFile());\n         } else {\n@@ -615,7 +615,7 @@ void TorController::connected_cb(TorControlConnection& conn)\n \n void TorController::disconnected_cb(TorControlConnection& conn)\n {\n-    // Stop advertizing service when disconnected\n+    // Stop advertising service when disconnected\n     if (service.IsValid())\n         RemoveLocal(service);\n     service = CService();"
      }
    ]
  }
]