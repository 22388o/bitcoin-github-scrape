petertodd,2015-06-30T21:37:45Z,"FWIW a decent chunk of the hashing power has disabled the priority space, and more are likely to follow. Further priority work is probably a wasted effort.\n",https://github.com/bitcoin/bitcoin/pull/6357#issuecomment-117352788,117352788,
coinx-ltc,2015-07-01T00:09:33Z,"@petertodd Majority still accepts free transactions (at least BitFury, Antpool and BTCChina). But I agree this will change soon (reaching 1mb cap).\n",https://github.com/bitcoin/bitcoin/pull/6357#issuecomment-117376192,117376192,
morcos,2015-07-01T20:06:42Z,"(pushed and squashed a bug fix)\n\n@petertodd I completely agree.  However I would really like to see #6331 merged, and I don't want that to be held up debating whether priority should be removed, so in the meantime, if we want priority to be calculated correctly, I think this does it.\n",https://github.com/bitcoin/bitcoin/pull/6357#issuecomment-117810296,117810296,
sipa,2015-07-09T16:18:50Z,"Can you add a consistency check for verifying that the (re)computed priorities match freshly computed ones, in CTxMempool::check()?\n",https://github.com/bitcoin/bitcoin/pull/6357#issuecomment-120055691,120055691,
morcos,2015-07-09T21:41:36Z,"Thanks for the review @sipa.  I commented on IRC, but I think the updateDependentPriorities is correct, I don't think its doing any redundant work.  \nHowever in trying to implement your consistency check I definitely uncovered several bugs.  Will push a fix hopefully tomorrow.\n",https://github.com/bitcoin/bitcoin/pull/6357#issuecomment-120151366,120151366,
morcos,2015-07-10T16:14:27Z,"OK, fixed some bugs brought out by the consistency check and added said check.\n",https://github.com/bitcoin/bitcoin/pull/6357#issuecomment-120448782,120448782,
petertodd,2015-07-11T13:34:17Z,"So, let's assume that all blocks contain 30KB of priority txs. At 1cent/KB we'd be looking at $16k/year of tx fees avoided due to priority.\n\nMeanwhile, if we screw this we just need to lose 2.2 blocks to wipe out all these savings, which comes out of miners' pockets anyway.\n\nI'm with @jgarzik here: better to remove priority and simplify the codebase, particularly when other than Bitcoin Core n",https://github.com/bitcoin/bitcoin/pull/6357#issuecomment-120618330,120618330,
morcos,2015-11-03T02:25:35Z,"This has been rebased.  \nIt's important to have a quick priority calculation for running CreateNewBlock.\nIf we want to use the current definition of priority, then I think logic like that in this pull is important to make calculating priority on the fly not require looking up inputs.\n",https://github.com/bitcoin/bitcoin/pull/6357#issuecomment-153219655,153219655,
morcos,2015-11-05T20:09:51Z,An alternative to this pull would be to redefine priority to only consist of coins that were in-chain at the time a tx was received in the mempool.  That's basically just a subset of this pull without the UpdateDependentPriorities and UpdateCachedPriority functionality.\n,https://github.com/bitcoin/bitcoin/pull/6357#issuecomment-154176129,154176129,
dcousens,2015-11-05T22:19:51Z,@morcos could you please elaborate on:\n\n> But this should fix the CTxMemPoolEntry::GetPriority calculation\n,https://github.com/bitcoin/bitcoin/pull/6357#issuecomment-154213333,154213333,
jtimon,2015-11-11T16:09:15Z,"Concept ACK, although I agree it would be much simpler to just remove the reserved space and all its logic. I believe that would simplify many mempool limiting, RBF or policy-encapsulation related patches. If a competitor PR that removes the reserved space is created, I will try to utACK that.\n",https://github.com/bitcoin/bitcoin/pull/6357#issuecomment-155829381,155829381,
morcos,2015-11-12T20:35:58Z,"@dcousens See #6292.  The existing calculation in CTxMemPoolEntry is broken.  It assumes all coins the tx is spending are aging, even unconfirmed ones.\n",https://github.com/bitcoin/bitcoin/pull/6357#issuecomment-156226431,156226431,
jtoomim,2015-11-12T22:46:40Z,"@morcos I was working on a patch to CNB that appears to be very similar to this one except written for BitcoinXT, and consequently without all of the new mempool refactoring stuff that you guys have been done (which is great (except for the eviction policy), and which I intended to sort through and pull eventually). I haven't had a chance to review this in detail, but I have a few comments which a",https://github.com/bitcoin/bitcoin/pull/6357#issuecomment-156261324,156261324,
morcos,2015-11-14T19:02:08Z,Rebased this off of #7008 so it is easier to make decisions on them independently.\n,https://github.com/bitcoin/bitcoin/pull/6357#issuecomment-156734245,156734245,
sipa,2015-07-09T16:17:01Z,"If a block contains transactions that depend on other transactions in the same block, won't this cause recalcPriority to be called multiple times for them?\n",https://github.com/bitcoin/bitcoin/pull/6357#discussion_r34272784,34272784,src/txmempool.cpp
sipa,2015-07-09T16:17:42Z,"I think you need to pass in a queue of transactions to update, and call this function once for the whole block.\n",https://github.com/bitcoin/bitcoin/pull/6357#discussion_r34272849,34272849,src/txmempool.cpp
jtimon,2015-11-11T15:44:40Z,Style nit: https://github.com/bitcoin/bitcoin/blob/master/src/.clang-format#L41\n,https://github.com/bitcoin/bitcoin/pull/6357#discussion_r44546370,44546370,src/coins.cpp
sipa,2015-11-12T23:05:42Z,Style nit :)\n,https://github.com/bitcoin/bitcoin/pull/6357#discussion_r44728833,44728833,src/txmempool.h
