[
  {
    "sha": "58e444ee5e773847a22a3c0cabd226efa08d46d2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1OGU0NDRlZTVlNzczODQ3YTIyYTNjMGNhYmQyMjZlZmEwOGQ0NmQy",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-11-17T21:00:19Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-11-17T21:00:19Z"
      },
      "message": "Remove default arguments for CTxMemPoolEntry()",
      "tree": {
        "sha": "39c49727e621a10aa5e6c4f3bfed8c1db6d06712",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/39c49727e621a10aa5e6c4f3bfed8c1db6d06712"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/58e444ee5e773847a22a3c0cabd226efa08d46d2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/58e444ee5e773847a22a3c0cabd226efa08d46d2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/58e444ee5e773847a22a3c0cabd226efa08d46d2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/58e444ee5e773847a22a3c0cabd226efa08d46d2/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e8df8a5077df673f1914f4a40bf54b126d13de1c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8df8a5077df673f1914f4a40bf54b126d13de1c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e8df8a5077df673f1914f4a40bf54b126d13de1c"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d90ef821f09b445e0fd6de6274dfa93dcd00f61f",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58e444ee5e773847a22a3c0cabd226efa08d46d2/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58e444ee5e773847a22a3c0cabd226efa08d46d2/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=58e444ee5e773847a22a3c0cabd226efa08d46d2",
        "patch": "@@ -78,7 +78,7 @@ class CTxMemPoolEntry\n \n public:\n     CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n-                    int64_t _nTime, double _dPriority, unsigned int _nHeight, bool poolHasNoInputsOf = false);\n+                    int64_t _nTime, double _dPriority, unsigned int _nHeight, bool poolHasNoInputsOf);\n     CTxMemPoolEntry(const CTxMemPoolEntry& other);\n \n     const CTransaction& GetTx() const { return this->tx; }"
      }
    ]
  },
  {
    "sha": "4cac8a533306d7e84138bd1fcd17da735b0e7c25",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0Y2FjOGE1MzMzMDZkN2U4NDEzOGJkMWZjZDE3ZGE3MzViMGU3YzI1",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-06-30T15:14:24Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-11-17T21:02:00Z"
      },
      "message": "Modify variable names for entry height and priority",
      "tree": {
        "sha": "3ab60b728a792390129c20d010404eef8efdef4b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3ab60b728a792390129c20d010404eef8efdef4b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4cac8a533306d7e84138bd1fcd17da735b0e7c25",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4cac8a533306d7e84138bd1fcd17da735b0e7c25",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4cac8a533306d7e84138bd1fcd17da735b0e7c25",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4cac8a533306d7e84138bd1fcd17da735b0e7c25/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "58e444ee5e773847a22a3c0cabd226efa08d46d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/58e444ee5e773847a22a3c0cabd226efa08d46d2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/58e444ee5e773847a22a3c0cabd226efa08d46d2"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 9,
      "deletions": 9
    },
    "files": [
      {
        "sha": "e403fa82d2e2f430c6b27a9254cd3b7fcd7adc81",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4cac8a533306d7e84138bd1fcd17da735b0e7c25/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4cac8a533306d7e84138bd1fcd17da735b0e7c25/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=4cac8a533306d7e84138bd1fcd17da735b0e7c25",
        "patch": "@@ -19,9 +19,9 @@\n using namespace std;\n \n CTxMemPoolEntry::CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n-                                 int64_t _nTime, double _dPriority,\n-                                 unsigned int _nHeight, bool poolHasNoInputsOf):\n-    tx(_tx), nFee(_nFee), nTime(_nTime), dPriority(_dPriority), nHeight(_nHeight),\n+                                 int64_t _nTime, double _entryPriority,\n+                                 unsigned int _entryHeight, bool poolHasNoInputsOf):\n+    tx(_tx), nFee(_nFee), nTime(_nTime), entryPriority(_entryPriority), entryHeight(_entryHeight),\n     hadNoDependencies(poolHasNoInputsOf)\n {\n     nTxSize = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n@@ -42,8 +42,8 @@ double\n CTxMemPoolEntry::GetPriority(unsigned int currentHeight) const\n {\n     CAmount nValueIn = tx.GetValueOut()+nFee;\n-    double deltaPriority = ((double)(currentHeight-nHeight)*nValueIn)/nModSize;\n-    double dResult = dPriority + deltaPriority;\n+    double deltaPriority = ((double)(currentHeight-entryHeight)*nValueIn)/nModSize;\n+    double dResult = entryPriority + deltaPriority;\n     return dResult;\n }\n "
      },
      {
        "sha": "45b1270a4f175d7b44f1a5ce05f2cb6ccbfa1ff3",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4cac8a533306d7e84138bd1fcd17da735b0e7c25/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4cac8a533306d7e84138bd1fcd17da735b0e7c25/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=4cac8a533306d7e84138bd1fcd17da735b0e7c25",
        "patch": "@@ -63,8 +63,8 @@ class CTxMemPoolEntry\n     size_t nModSize; //! ... and modified size for priority\n     size_t nUsageSize; //! ... and total memory usage\n     int64_t nTime; //! Local time when entering the mempool\n-    double dPriority; //! Priority when entering the mempool\n-    unsigned int nHeight; //! Chain height when entering the mempool\n+    double entryPriority; //! Priority when entering the mempool\n+    unsigned int entryHeight; //! Chain height when entering the mempool\n     bool hadNoDependencies; //! Not dependent on any other txs when it entered the mempool\n \n     // Information about descendants of this transaction that are in the\n@@ -78,15 +78,15 @@ class CTxMemPoolEntry\n \n public:\n     CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n-                    int64_t _nTime, double _dPriority, unsigned int _nHeight, bool poolHasNoInputsOf);\n+                    int64_t _nTime, double _entryPriority, unsigned int _entryHeight, bool poolHasNoInputsOf);\n     CTxMemPoolEntry(const CTxMemPoolEntry& other);\n \n     const CTransaction& GetTx() const { return this->tx; }\n     double GetPriority(unsigned int currentHeight) const;\n     const CAmount& GetFee() const { return nFee; }\n     size_t GetTxSize() const { return nTxSize; }\n     int64_t GetTime() const { return nTime; }\n-    unsigned int GetHeight() const { return nHeight; }\n+    unsigned int GetHeight() const { return entryHeight; }\n     bool WasClearAtEntry() const { return hadNoDependencies; }\n     size_t DynamicMemoryUsage() const { return nUsageSize; }\n "
      }
    ]
  },
  {
    "sha": "bea369e0ede5b3a8957ceb09368dfaacb88c932e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZWEzNjllMGVkZTViM2E4OTU3Y2ViMDkzNjhkZmFhY2I4OGM5MzJl",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-11-13T15:05:21Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-11-17T21:42:34Z"
      },
      "message": "Change GetPriority calculation.\n\nCompute the value of inputs that already are in the chain at time of mempool entry and only increase priority due to aging for those inputs.  This effectively changes the CTxMemPoolEntry's GetPriority calculation from an upper bound to a lower bound.",
      "tree": {
        "sha": "cdff846e2521d68a439b42fca9590c367899f6da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cdff846e2521d68a439b42fca9590c367899f6da"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bea369e0ede5b3a8957ceb09368dfaacb88c932e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bea369e0ede5b3a8957ceb09368dfaacb88c932e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bea369e0ede5b3a8957ceb09368dfaacb88c932e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bea369e0ede5b3a8957ceb09368dfaacb88c932e/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4cac8a533306d7e84138bd1fcd17da735b0e7c25",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4cac8a533306d7e84138bd1fcd17da735b0e7c25",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4cac8a533306d7e84138bd1fcd17da735b0e7c25"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 36,
      "deletions": 15
    },
    "files": [
      {
        "sha": "eff9751b4e73675652d81b9ab10485c446cc3a78",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bea369e0ede5b3a8957ceb09368dfaacb88c932e/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bea369e0ede5b3a8957ceb09368dfaacb88c932e/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=bea369e0ede5b3a8957ceb09368dfaacb88c932e",
        "patch": "@@ -229,8 +229,9 @@ bool CCoinsViewCache::HaveInputs(const CTransaction& tx) const\n     return true;\n }\n \n-double CCoinsViewCache::GetPriority(const CTransaction &tx, int nHeight) const\n+double CCoinsViewCache::GetPriority(const CTransaction &tx, int nHeight, CAmount &inChainInputValue) const\n {\n+    inChainInputValue = 0;\n     if (tx.IsCoinBase())\n         return 0.0;\n     double dResult = 0.0;\n@@ -239,8 +240,9 @@ double CCoinsViewCache::GetPriority(const CTransaction &tx, int nHeight) const\n         const CCoins* coins = AccessCoins(txin.prevout.hash);\n         assert(coins);\n         if (!coins->IsAvailable(txin.prevout.n)) continue;\n-        if (coins->nHeight < nHeight) {\n+        if (coins->nHeight <= nHeight) {\n             dResult += coins->vout[txin.prevout.n].nValue * (nHeight-coins->nHeight);\n+            inChainInputValue += coins->vout[txin.prevout.n].nValue;\n         }\n     }\n     return tx.ComputePriority(dResult);"
      },
      {
        "sha": "d33bbcd8c3856931b7feaca7342e8e8c33bf8193",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bea369e0ede5b3a8957ceb09368dfaacb88c932e/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bea369e0ede5b3a8957ceb09368dfaacb88c932e/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=bea369e0ede5b3a8957ceb09368dfaacb88c932e",
        "patch": "@@ -445,8 +445,12 @@ class CCoinsViewCache : public CCoinsViewBacked\n     //! Check whether all prevouts of the transaction are present in the UTXO set represented by this view\n     bool HaveInputs(const CTransaction& tx) const;\n \n-    //! Return priority of tx at height nHeight\n-    double GetPriority(const CTransaction &tx, int nHeight) const;\n+    /**\n+     * Return priority of tx at height nHeight. Also calculate the sum of the values of the inputs\n+     * that are already in the chain.  These are the inputs that will age and increase priority as\n+     * new blocks are added to the chain.\n+     */\n+    double GetPriority(const CTransaction &tx, int nHeight, CAmount &inChainInputValue) const;\n \n     const CTxOut &GetOutputFor(const CTxIn& input) const;\n "
      },
      {
        "sha": "d486f5d98a2fbe5893a285e957a003cc47048e23",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bea369e0ede5b3a8957ceb09368dfaacb88c932e/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bea369e0ede5b3a8957ceb09368dfaacb88c932e/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=bea369e0ede5b3a8957ceb09368dfaacb88c932e",
        "patch": "@@ -899,9 +899,10 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n \n         CAmount nValueOut = tx.GetValueOut();\n         CAmount nFees = nValueIn-nValueOut;\n-        double dPriority = view.GetPriority(tx, chainActive.Height());\n+        CAmount inChainInputValue;\n+        double dPriority = view.GetPriority(tx, chainActive.Height(), inChainInputValue);\n \n-        CTxMemPoolEntry entry(tx, nFees, GetTime(), dPriority, chainActive.Height(), pool.HasNoInputsOf(tx));\n+        CTxMemPoolEntry entry(tx, nFees, GetTime(), dPriority, chainActive.Height(), pool.HasNoInputsOf(tx), inChainInputValue);\n         unsigned int nSize = entry.GetTxSize();\n \n         // Don't accept it if it can't get into a block\n@@ -913,7 +914,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         CAmount mempoolRejectFee = pool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFee(nSize);\n         if (mempoolRejectFee > 0 && nFees < mempoolRejectFee) {\n             return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool min fee not met\", false, strprintf(\"%d < %d\", nFees, mempoolRejectFee));\n-        } else if (GetBoolArg(\"-relaypriority\", true) && nFees < ::minRelayTxFee.GetFee(nSize) && !AllowFree(view.GetPriority(tx, chainActive.Height() + 1))) {\n+        } else if (GetBoolArg(\"-relaypriority\", true) && nFees < ::minRelayTxFee.GetFee(nSize) && !AllowFree(entry.GetPriority(chainActive.Height() + 1))) {\n             // Require that free transactions have sufficient priority to be mined in the next block.\n             return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"insufficient priority\");\n         }"
      },
      {
        "sha": "820aa72883e3b6c1c03d149546b97d2cd64ffb8b",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bea369e0ede5b3a8957ceb09368dfaacb88c932e/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bea369e0ede5b3a8957ceb09368dfaacb88c932e/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=bea369e0ede5b3a8957ceb09368dfaacb88c932e",
        "patch": "@@ -143,8 +143,13 @@ TestChain100Setup::~TestChain100Setup()\n \n \n CTxMemPoolEntry TestMemPoolEntryHelper::FromTx(CMutableTransaction &tx, CTxMemPool *pool) {\n-    return CTxMemPoolEntry(tx, nFee, nTime, dPriority, nHeight,\n-                           pool ? pool->HasNoInputsOf(tx) : hadNoDependencies);\n+    CTransaction txn(tx);\n+    bool hasNoDependencies = pool ? pool->HasNoInputsOf(tx) : hadNoDependencies;\n+    // Hack to assume either its completely dependent on other mempool txs or not at all\n+    CAmount inChainValue = hasNoDependencies ? txn.GetValueOut() : 0;\n+\n+    return CTxMemPoolEntry(txn, nFee, nTime, dPriority, nHeight,\n+                           hasNoDependencies, inChainValue);\n }\n \n void Shutdown(void* parg)"
      },
      {
        "sha": "d3e04c78cc176122866b217755ce8b90c7c5629c",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 5,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bea369e0ede5b3a8957ceb09368dfaacb88c932e/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bea369e0ede5b3a8957ceb09368dfaacb88c932e/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=bea369e0ede5b3a8957ceb09368dfaacb88c932e",
        "patch": "@@ -19,10 +19,10 @@\n using namespace std;\n \n CTxMemPoolEntry::CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n-                                 int64_t _nTime, double _entryPriority,\n-                                 unsigned int _entryHeight, bool poolHasNoInputsOf):\n+                                 int64_t _nTime, double _entryPriority, unsigned int _entryHeight,\n+                                 bool poolHasNoInputsOf, CAmount _inChainInputValue):\n     tx(_tx), nFee(_nFee), nTime(_nTime), entryPriority(_entryPriority), entryHeight(_entryHeight),\n-    hadNoDependencies(poolHasNoInputsOf)\n+    hadNoDependencies(poolHasNoInputsOf), inChainInputValue(_inChainInputValue)\n {\n     nTxSize = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n     nModSize = tx.CalculateModifiedSize(nTxSize);\n@@ -31,6 +31,8 @@ CTxMemPoolEntry::CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n     nCountWithDescendants = 1;\n     nSizeWithDescendants = nTxSize;\n     nFeesWithDescendants = nFee;\n+    CAmount nValueIn = tx.GetValueOut()+nFee;\n+    assert(inChainInputValue <= nValueIn);\n }\n \n CTxMemPoolEntry::CTxMemPoolEntry(const CTxMemPoolEntry& other)\n@@ -41,9 +43,10 @@ CTxMemPoolEntry::CTxMemPoolEntry(const CTxMemPoolEntry& other)\n double\n CTxMemPoolEntry::GetPriority(unsigned int currentHeight) const\n {\n-    CAmount nValueIn = tx.GetValueOut()+nFee;\n-    double deltaPriority = ((double)(currentHeight-entryHeight)*nValueIn)/nModSize;\n+    double deltaPriority = ((double)(currentHeight-entryHeight)*inChainInputValue)/nModSize;\n     double dResult = entryPriority + deltaPriority;\n+    if (dResult < 0) // This should only happen if it was called with a height below entry height\n+        dResult = 0;\n     return dResult;\n }\n "
      },
      {
        "sha": "6a6d87db6a09017963d82ed9c5b4dff3dae92d8a",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bea369e0ede5b3a8957ceb09368dfaacb88c932e/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bea369e0ede5b3a8957ceb09368dfaacb88c932e/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=bea369e0ede5b3a8957ceb09368dfaacb88c932e",
        "patch": "@@ -66,6 +66,7 @@ class CTxMemPoolEntry\n     double entryPriority; //! Priority when entering the mempool\n     unsigned int entryHeight; //! Chain height when entering the mempool\n     bool hadNoDependencies; //! Not dependent on any other txs when it entered the mempool\n+    CAmount inChainInputValue; //! Sum of all txin values that are already in blockchain\n \n     // Information about descendants of this transaction that are in the\n     // mempool; if we remove this transaction we must remove all of these\n@@ -78,10 +79,15 @@ class CTxMemPoolEntry\n \n public:\n     CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n-                    int64_t _nTime, double _entryPriority, unsigned int _entryHeight, bool poolHasNoInputsOf);\n+                    int64_t _nTime, double _entryPriority, unsigned int _entryHeight,\n+                    bool poolHasNoInputsOf, CAmount _inChainInputValue);\n     CTxMemPoolEntry(const CTxMemPoolEntry& other);\n \n     const CTransaction& GetTx() const { return this->tx; }\n+    /**\n+     * Fast calculation of lower bound of current priority as update\n+     * from entry priority.  Only originally in-chain inputs will age\n+     */\n     double GetPriority(unsigned int currentHeight) const;\n     const CAmount& GetFee() const { return nFee; }\n     size_t GetTxSize() const { return nTxSize; }"
      }
    ]
  },
  {
    "sha": "90898ac8344a99cd1a50338240c70f99a67b2ab9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MDg5OGFjODM0NGE5OWNkMWE1MDMzODI0MGM3MGY5OWE2N2IyYWI5",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-06-30T17:24:57Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-11-18T03:10:40Z"
      },
      "message": "Change GetPriority calculation to dynamically update\n\nTrack the value of inputs that get confirmed in the chain and keep a cached value of priority at a given height and return current priority by only assuming these in chain inputs are aging.",
      "tree": {
        "sha": "9113aef6011fdad3d119fd2d1d2b444502af3135",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9113aef6011fdad3d119fd2d1d2b444502af3135"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/90898ac8344a99cd1a50338240c70f99a67b2ab9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90898ac8344a99cd1a50338240c70f99a67b2ab9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/90898ac8344a99cd1a50338240c70f99a67b2ab9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90898ac8344a99cd1a50338240c70f99a67b2ab9/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bea369e0ede5b3a8957ceb09368dfaacb88c932e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bea369e0ede5b3a8957ceb09368dfaacb88c932e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bea369e0ede5b3a8957ceb09368dfaacb88c932e"
      }
    ],
    "stats": {
      "total": 71,
      "additions": 65,
      "deletions": 6
    },
    "files": [
      {
        "sha": "09b222967154eb33362f40a179d857cbdf425905",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90898ac8344a99cd1a50338240c70f99a67b2ab9/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90898ac8344a99cd1a50338240c70f99a67b2ab9/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=90898ac8344a99cd1a50338240c70f99a67b2ab9",
        "patch": "@@ -2111,6 +2111,7 @@ bool static DisconnectTip(CValidationState& state, const Consensus::Params& cons\n     // Resurrect mempool transactions from the disconnected block.\n     std::vector<uint256> vHashUpdate;\n     BOOST_FOREACH(const CTransaction &tx, block.vtx) {\n+        mempool.UpdateDependentPriorities(tx, pindexDelete->nHeight, false);\n         // ignore validation errors in resurrected transactions\n         list<CTransaction> removed;\n         CValidationState stateDummy;"
      },
      {
        "sha": "d51e042c68e4b35f700587e9852eab94f1e2858f",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90898ac8344a99cd1a50338240c70f99a67b2ab9/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90898ac8344a99cd1a50338240c70f99a67b2ab9/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=90898ac8344a99cd1a50338240c70f99a67b2ab9",
        "patch": "@@ -189,7 +189,7 @@ UniValue mempoolToJSON(bool fVerbose = false)\n             info.push_back(Pair(\"fee\", ValueFromAmount(e.GetFee())));\n             info.push_back(Pair(\"time\", e.GetTime()));\n             info.push_back(Pair(\"height\", (int)e.GetHeight()));\n-            info.push_back(Pair(\"startingpriority\", e.GetPriority(e.GetHeight())));\n+            info.push_back(Pair(\"startingpriority\", e.GetStartingPriority()));\n             info.push_back(Pair(\"currentpriority\", e.GetPriority(chainActive.Height())));\n             info.push_back(Pair(\"descendantcount\", e.GetCountWithDescendants()));\n             info.push_back(Pair(\"descendantsize\", e.GetSizeWithDescendants()));"
      },
      {
        "sha": "6c9dd17961e2a048bf59bfa2ef764c03cf1da067",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 3,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90898ac8344a99cd1a50338240c70f99a67b2ab9/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90898ac8344a99cd1a50338240c70f99a67b2ab9/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=90898ac8344a99cd1a50338240c70f99a67b2ab9",
        "patch": "@@ -33,6 +33,8 @@ CTxMemPoolEntry::CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n     nFeesWithDescendants = nFee;\n     CAmount nValueIn = tx.GetValueOut()+nFee;\n     assert(inChainInputValue <= nValueIn);\n+    cachedHeight = entryHeight;\n+    cachedPriority = entryPriority;\n }\n \n CTxMemPoolEntry::CTxMemPoolEntry(const CTxMemPoolEntry& other)\n@@ -43,9 +45,13 @@ CTxMemPoolEntry::CTxMemPoolEntry(const CTxMemPoolEntry& other)\n double\n CTxMemPoolEntry::GetPriority(unsigned int currentHeight) const\n {\n-    double deltaPriority = ((double)(currentHeight-entryHeight)*inChainInputValue)/nModSize;\n-    double dResult = entryPriority + deltaPriority;\n-    if (dResult < 0) // This should only happen if it was called with a height below entry height\n+    // This will only return accurate results when currentHeight >= the heights\n+    // at which all the in-chain inputs of the tx were included in blocks.\n+    // Typical usage of GetPriority with chainActive.Height() will ensure this.\n+    int heightDiff = currentHeight - cachedHeight;\n+    double deltaPriority = ((double)heightDiff*inChainInputValue)/nModSize;\n+    double dResult = cachedPriority + deltaPriority;\n+    if (dResult < 0) // This should only happen if it was called with an invalid height\n         dResult = 0;\n     return dResult;\n }\n@@ -309,6 +315,16 @@ void CTxMemPoolEntry::UpdateState(int64_t modifySize, CAmount modifyFee, int64_t\n     }\n }\n \n+void CTxMemPoolEntry::UpdateCachedPriority(unsigned int currentHeight, CAmount valueInCurrentBlock)\n+{\n+    int heightDiff = currentHeight - cachedHeight;\n+    double deltaPriority = ((double)heightDiff*inChainInputValue)/nModSize;\n+    cachedPriority += deltaPriority;\n+    cachedHeight = currentHeight;\n+    inChainInputValue += valueInCurrentBlock;\n+    assert(MoneyRange(inChainInputValue));\n+}\n+\n CTxMemPool::CTxMemPool(const CFeeRate& _minReasonableRelayFee) :\n     nTransactionsUpdated(0)\n {\n@@ -521,6 +537,19 @@ void CTxMemPool::removeConflicts(const CTransaction &tx, std::list<CTransaction>\n     }\n }\n \n+void CTxMemPool::UpdateDependentPriorities(const CTransaction &tx, unsigned int nBlockHeight, bool addToChain)\n+{\n+    LOCK(cs);\n+    for (unsigned int i = 0; i < tx.vout.size(); i++) {\n+        std::map<COutPoint, CInPoint>::iterator it = mapNextTx.find(COutPoint(tx.GetHash(), i));\n+        if (it == mapNextTx.end())\n+            continue;\n+        uint256 hash = it->second.ptx->GetHash();\n+        txiter iter = mapTx.find(hash);\n+        mapTx.modify(iter, update_priority(nBlockHeight, addToChain ? tx.vout[i].nValue : -tx.vout[i].nValue));\n+    }\n+}\n+\n /**\n  * Called when a block is connected. Removes from mempool and updates the miner fee estimator.\n  */\n@@ -539,6 +568,7 @@ void CTxMemPool::removeForBlock(const std::vector<CTransaction>& vtx, unsigned i\n     }\n     BOOST_FOREACH(const CTransaction& tx, vtx)\n     {\n+        UpdateDependentPriorities(tx, nBlockHeight, true);\n         std::list<CTransaction> dummy;\n         remove(tx, dummy, false);\n         removeConflicts(tx, conflicts);"
      },
      {
        "sha": "e640b117d559ac950cbd9dceb1959364d21fe13f",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 30,
        "deletions": 2,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90898ac8344a99cd1a50338240c70f99a67b2ab9/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90898ac8344a99cd1a50338240c70f99a67b2ab9/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=90898ac8344a99cd1a50338240c70f99a67b2ab9",
        "patch": "@@ -65,6 +65,8 @@ class CTxMemPoolEntry\n     int64_t nTime; //! Local time when entering the mempool\n     double entryPriority; //! Priority when entering the mempool\n     unsigned int entryHeight; //! Chain height when entering the mempool\n+    double cachedPriority; //! Last calculated priority\n+    unsigned int cachedHeight; //! Height at which priority was last calculated\n     bool hadNoDependencies; //! Not dependent on any other txs when it entered the mempool\n     CAmount inChainInputValue; //! Sum of all txin values that are already in blockchain\n \n@@ -84,11 +86,17 @@ class CTxMemPoolEntry\n     CTxMemPoolEntry(const CTxMemPoolEntry& other);\n \n     const CTransaction& GetTx() const { return this->tx; }\n+    double GetStartingPriority() const {return entryPriority; }\n     /**\n-     * Fast calculation of lower bound of current priority as update\n-     * from entry priority.  Only originally in-chain inputs will age\n+     * Fast calculation of priority as update from cached value, but only valid if\n+     * currentHeight is greater than last height it was recalculated.\n      */\n     double GetPriority(unsigned int currentHeight) const;\n+    /**\n+     * Recalculate the cached priority as of currentHeight and adjust inChainInputValue by\n+     * valueInCurrentBlock which represents input that was just added to or removed from the blockchain.\n+     */\n+    void UpdateCachedPriority(unsigned int currentHeight, CAmount valueInCurrentBlock);\n     const CAmount& GetFee() const { return nFee; }\n     size_t GetTxSize() const { return nTxSize; }\n     int64_t GetTime() const { return nTime; }\n@@ -133,6 +141,20 @@ struct set_dirty\n         { e.SetDirty(); }\n };\n \n+struct update_priority\n+{\n+    update_priority(unsigned int _height, CAmount _value) :\n+        height(_height), value(_value)\n+    {}\n+\n+    void operator() (CTxMemPoolEntry &e)\n+    { e.UpdateCachedPriority(height, value); }\n+\n+    private:\n+        unsigned int height;\n+        CAmount value;\n+};\n+\n // extracts a TxMemPoolEntry's transaction hash\n struct mempoolentry_txid\n {\n@@ -391,6 +413,12 @@ class CTxMemPool\n      * the tx is not dependent on other mempool transactions to be included in a block.\n      */\n     bool HasNoInputsOf(const CTransaction& tx) const;\n+    /**\n+     * Update all transactions in the mempool which depend on tx to recalculate their priority\n+     * and adjust the input value that will age to reflect that the inputs from this transaction have\n+     * either just been added to the chain or just been removed.\n+     */\n+    void UpdateDependentPriorities(const CTransaction &tx, unsigned int nBlockHeight, bool addToChain);\n \n     /** Affect CreateNewBlock prioritisation of transactions */\n     void PrioritiseTransaction(const uint256 hash, const std::string strHash, double dPriorityDelta, const CAmount& nFeeDelta);"
      }
    ]
  },
  {
    "sha": "848d623b4e08e681c99b0f02ee2a8b92bb3875a4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NDhkNjIzYjRlMDhlNjgxYzk5YjBmMDJlZTJhOGI5MmJiMzg3NWE0",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-07-10T14:36:29Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-11-18T03:10:40Z"
      },
      "message": "Add consistency check for on the fly priority calculations",
      "tree": {
        "sha": "e6960fd947af354bf12b22fa7d6e3c5dd3deb44b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e6960fd947af354bf12b22fa7d6e3c5dd3deb44b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/848d623b4e08e681c99b0f02ee2a8b92bb3875a4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/848d623b4e08e681c99b0f02ee2a8b92bb3875a4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/848d623b4e08e681c99b0f02ee2a8b92bb3875a4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/848d623b4e08e681c99b0f02ee2a8b92bb3875a4/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "90898ac8344a99cd1a50338240c70f99a67b2ab9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90898ac8344a99cd1a50338240c70f99a67b2ab9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/90898ac8344a99cd1a50338240c70f99a67b2ab9"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 20,
      "deletions": 11
    },
    "files": [
      {
        "sha": "6ace3c90e408f9deeaf2787335884ee7082b6066",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/848d623b4e08e681c99b0f02ee2a8b92bb3875a4/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/848d623b4e08e681c99b0f02ee2a8b92bb3875a4/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=848d623b4e08e681c99b0f02ee2a8b92bb3875a4",
        "patch": "@@ -2091,7 +2091,7 @@ bool static DisconnectTip(CValidationState& state, const Consensus::Params& cons\n {\n     CBlockIndex *pindexDelete = chainActive.Tip();\n     assert(pindexDelete);\n-    mempool.check(pcoinsTip);\n+    mempool.check(pcoinsTip, chainActive.Height());\n     // Read block from disk.\n     CBlock block;\n     if (!ReadBlockFromDisk(block, pindexDelete, consensusParams))\n@@ -2128,7 +2128,7 @@ bool static DisconnectTip(CValidationState& state, const Consensus::Params& cons\n     // block that were added back and cleans up the mempool state.\n     mempool.UpdateTransactionsFromBlock(vHashUpdate);\n     mempool.removeCoinbaseSpends(pcoinsTip, pindexDelete->nHeight);\n-    mempool.check(pcoinsTip);\n+    mempool.check(pcoinsTip, pindexDelete->pprev->nHeight);\n     // Update chainActive and related variables.\n     UpdateTip(pindexDelete->pprev);\n     // Let wallets know transactions went from 1-confirmed to\n@@ -2152,7 +2152,7 @@ static int64_t nTimePostConnect = 0;\n bool static ConnectTip(CValidationState &state, CBlockIndex *pindexNew, const CBlock *pblock) {\n     const CChainParams& chainparams = Params();\n     assert(pindexNew->pprev == chainActive.Tip());\n-    mempool.check(pcoinsTip);\n+    mempool.check(pcoinsTip, chainActive.Height());\n     // Read block from disk.\n     int64_t nTime1 = GetTimeMicros();\n     CBlock block;\n@@ -2189,7 +2189,7 @@ bool static ConnectTip(CValidationState &state, CBlockIndex *pindexNew, const CB\n     // Remove conflicting transactions from the mempool.\n     list<CTransaction> txConflicted;\n     mempool.removeForBlock(pblock->vtx, pindexNew->nHeight, txConflicted, !IsInitialBlockDownload());\n-    mempool.check(pcoinsTip);\n+    mempool.check(pcoinsTip, pindexNew->nHeight);\n     // Update chainActive & related variables.\n     UpdateTip(pindexNew);\n     // Tell wallet about transactions that went from mempool\n@@ -4390,7 +4390,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n         if (AcceptToMemoryPool(mempool, state, tx, true, &fMissingInputs))\n         {\n-            mempool.check(pcoinsTip);\n+            mempool.check(pcoinsTip, chainActive.Height());\n             RelayTransaction(tx);\n             vWorkQueue.push_back(inv.hash);\n \n@@ -4446,7 +4446,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                         assert(recentRejects);\n                         recentRejects->insert(orphanHash);\n                     }\n-                    mempool.check(pcoinsTip);\n+                    mempool.check(pcoinsTip, chainActive.Height());\n                 }\n             }\n "
      },
      {
        "sha": "543b697964fdfb6800a6c930c2aa46e82985a6e9",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 2,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/848d623b4e08e681c99b0f02ee2a8b92bb3875a4/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/848d623b4e08e681c99b0f02ee2a8b92bb3875a4/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=848d623b4e08e681c99b0f02ee2a8b92bb3875a4",
        "patch": "@@ -599,7 +599,7 @@ void CTxMemPool::clear()\n     _clear();\n }\n \n-void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n+void CTxMemPool::check(const CCoinsViewCache *pcoins, unsigned int nBlockHeight) const\n {\n     if (nCheckFrequency == 0)\n         return;\n@@ -615,10 +615,19 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n     CCoinsViewCache mempoolDuplicate(const_cast<CCoinsViewCache*>(pcoins));\n \n     LOCK(cs);\n+    CCoinsViewMemPool viewMemPool(pcoinsTip, *this);\n+    CCoinsViewCache view(&viewMemPool);\n     list<const CTxMemPoolEntry*> waitingOnDependants;\n     for (indexed_transaction_set::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n         unsigned int i = 0;\n         checkTotal += it->GetTxSize();\n+        CAmount dummyValue;\n+        double freshPriority = view.GetPriority(it->GetTx(), nBlockHeight, dummyValue);\n+        double cachePriority = it->GetPriority(nBlockHeight);\n+        double priDiff = cachePriority > freshPriority ? cachePriority - freshPriority : freshPriority - cachePriority;\n+        // Verify that the difference between the on the fly calculation and a fresh calculation\n+        // is small enough to be a result of double imprecision.\n+        assert(priDiff < .0001 * freshPriority + 1);\n         innerUsage += it->DynamicMemoryUsage();\n         const CTransaction& tx = it->GetTx();\n         txlinksMap::const_iterator linksiter = mapLinks.find(it);\n@@ -811,7 +820,7 @@ bool CTxMemPool::HasNoInputsOf(const CTransaction &tx) const\n     return true;\n }\n \n-CCoinsViewMemPool::CCoinsViewMemPool(CCoinsView *baseIn, CTxMemPool &mempoolIn) : CCoinsViewBacked(baseIn), mempool(mempoolIn) { }\n+CCoinsViewMemPool::CCoinsViewMemPool(CCoinsView *baseIn, const CTxMemPool &mempoolIn) : CCoinsViewBacked(baseIn), mempool(mempoolIn) { }\n \n bool CCoinsViewMemPool::GetCoins(const uint256 &txid, CCoins &coins) const {\n     // If an entry in the mempool exists, always return that one, as it's guaranteed to never"
      },
      {
        "sha": "0b5c494f493403e88fdd7e6a105bfe0a404ebccb",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/848d623b4e08e681c99b0f02ee2a8b92bb3875a4/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/848d623b4e08e681c99b0f02ee2a8b92bb3875a4/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=848d623b4e08e681c99b0f02ee2a8b92bb3875a4",
        "patch": "@@ -387,7 +387,7 @@ class CTxMemPool\n      * all inputs are in the mapNextTx array). If sanity-checking is turned off,\n      * check does nothing.\n      */\n-    void check(const CCoinsViewCache *pcoins) const;\n+    void check(const CCoinsViewCache *pcoins, unsigned int nBlockHeight) const;\n     void setSanityCheck(double dFrequency = 1.0) { nCheckFrequency = dFrequency * 4294967295.0; }\n \n     // addUnchecked must updated state for all ancestors of a given transaction,\n@@ -550,10 +550,10 @@ class CTxMemPool\n class CCoinsViewMemPool : public CCoinsViewBacked\n {\n protected:\n-    CTxMemPool &mempool;\n+    const CTxMemPool &mempool;\n \n public:\n-    CCoinsViewMemPool(CCoinsView *baseIn, CTxMemPool &mempoolIn);\n+    CCoinsViewMemPool(CCoinsView *baseIn, const CTxMemPool &mempoolIn);\n     bool GetCoins(const uint256 &txid, CCoins &coins) const;\n     bool HaveCoins(const uint256 &txid) const;\n };"
      }
    ]
  }
]