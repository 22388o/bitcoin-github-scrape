[
  {
    "sha": "8cac2923f57ac33848ff41b74c3be520b75936df",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4Y2FjMjkyM2Y1N2FjMzM4NDhmZjQxYjc0YzNiZTUyMGI3NTkzNmRm",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-02-23T14:55:59Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-03-31T13:14:26Z"
      },
      "message": "[test] remove invalid test from tx_valid.json\n\nThis exact test is also already in tx_invalid.json#L29\nIt will also test with no-P2SH flags, so duplicating with\ndifferent flags is not necessary.",
      "tree": {
        "sha": "f49208e09bff5d2e0c040aaea183037cc412f663",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f49208e09bff5d2e0c040aaea183037cc412f663"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8cac2923f57ac33848ff41b74c3be520b75936df",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8cac2923f57ac33848ff41b74c3be520b75936df",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8cac2923f57ac33848ff41b74c3be520b75936df",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8cac2923f57ac33848ff41b74c3be520b75936df/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b14462083f82aeaa9a376978f210db5538db296f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b14462083f82aeaa9a376978f210db5538db296f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b14462083f82aeaa9a376978f210db5538db296f"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 0,
      "deletions": 4
    },
    "files": [
      {
        "sha": "b874f6f26ca776f1e644e56637389d5d07ebe580",
        "filename": "src/test/data/tx_valid.json",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8cac2923f57ac33848ff41b74c3be520b75936df/src/test/data/tx_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8cac2923f57ac33848ff41b74c3be520b75936df/src/test/data/tx_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_valid.json?ref=8cac2923f57ac33848ff41b74c3be520b75936df",
        "patch": "@@ -62,10 +62,6 @@\n   [\"c76168ef1a272a4f176e55e73157ecfce040cfad16a5272f6296eb7089dca846\", 1, \"DUP HASH160 0x14 0x34fea2c5a75414fd945273ae2d029ce1f28dafcf EQUALVERIFY CHECKSIG\"]],\n \"010000000390d31c6107013d754529d8818eff285fe40a3e7635f6930fec5d12eb02107a43010000006b483045022100f40815ae3c81a0dd851cc8d376d6fd226c88416671346a9033468cca2cdcc6c202204f764623903e6c4bed1b734b75d82c40f1725e4471a55ad4f51218f86130ac038321033d710ab45bb54ac99618ad23b3c1da661631aa25f23bfe9d22b41876f1d46e4effffffff3ff04a68e22bdd52e7c8cb848156d2d158bd5515b3c50adabc87d0ca2cd3482d010000006a4730440220598d263c107004008e9e26baa1e770be30fd31ee55ded1898f7c00da05a75977022045536bead322ca246779698b9c3df3003377090f41afeca7fb2ce9e328ec4af2832102b738b531def73020bd637f32935924cc88549c8206976226d968edd3a42fc2d7ffffffff46a8dc8970eb96622f27a516adcf40e0fcec5731e7556e174f2a271aef6861c7010000006b483045022100c5b90a777a9fdc90c208dbef7290d1fc1be651f47151ee4ccff646872a454cf90220640cfbc4550446968fbbe9d12528f3adf7d87b31541569c59e790db8a220482583210391332546e22bbe8fe3af54addfad6f8b83d05fa4f5e047593d4c07ae938795beffffffff028036be26000000001976a914ddfb29efad43a667465ac59ff14dc6442a1adfca88ac3d5cba01000000001976a914b64dde7a505a13ca986c40e86e984a8dc81368b688ac00000000\", \"NONE\"],\n \n-[\"An invalid P2SH Transaction\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"HASH160 0x14 0x7a052c840ba73af26755de42cf01cc9e0a49fef0 EQUAL\"]],\n-\"010000000100010000000000000000000000000000000000000000000000000000000000000000000009085768617420697320ffffffff010000000000000000015100000000\", \"P2SH,CLEANSTACK,WITNESS\"],\n-\n [\"A valid P2SH Transaction using the standard transaction type put forth in BIP 16\"],\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"HASH160 0x14 0x8febbed40483661de6958d957412f82deed8e2f7 EQUAL\"]],\n \"01000000010001000000000000000000000000000000000000000000000000000000000000000000006e493046022100c66c9cdf4c43609586d15424c54707156e316d88b0a1534c9e6b0d4f311406310221009c0fe51dbc9c4ab7cc25d3fdbeccf6679fe6827f08edf2b4a9f16ee3eb0e438a0123210338e8034509af564c62644c07691942e0c056752008a173c89f60ab2a88ac2ebfacffffffff010000000000000000015100000000\", \"LOW_S\"],"
      }
    ]
  },
  {
    "sha": "8a365df5586b36d1772c78069f9d93c56a81df6f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YTM2NWRmNTU4NmIzNmQxNzcyYzc4MDY5ZjlkOTNjNTZhODFkZjZm",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-02-23T14:56:34Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-04-08T02:00:17Z"
      },
      "message": "[test] fix bug in ExcludeIndividualFlags\n\nPR #19168 introduced this function but it always returns an empty vector.",
      "tree": {
        "sha": "0fafacf5b38e3c6c5ae648139f3d6fe8477b6e88",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0fafacf5b38e3c6c5ae648139f3d6fe8477b6e88"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8a365df5586b36d1772c78069f9d93c56a81df6f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a365df5586b36d1772c78069f9d93c56a81df6f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8a365df5586b36d1772c78069f9d93c56a81df6f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a365df5586b36d1772c78069f9d93c56a81df6f/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8cac2923f57ac33848ff41b74c3be520b75936df",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8cac2923f57ac33848ff41b74c3be520b75936df",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8cac2923f57ac33848ff41b74c3be520b75936df"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 10,
      "deletions": 7
    },
    "files": [
      {
        "sha": "f87779a478032308010bac60902e82d65cf470dc",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 7,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a365df5586b36d1772c78069f9d93c56a81df6f/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a365df5586b36d1772c78069f9d93c56a81df6f/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=8a365df5586b36d1772c78069f9d93c56a81df6f",
        "patch": "@@ -152,14 +152,17 @@ unsigned int FillFlags(unsigned int flags)\n     return flags;\n }\n \n-// Return valid flags that are all except one flag for each flag\n-std::vector<unsigned int> ExcludeIndividualFlags(unsigned int flags)\n+// Exclude each possible script verify flag from flags. Returns a set of these flag combinations\n+// that are valid and without duplicates. For example: if flags=1111 and the 4 possible flags are\n+// 0001, 0010, 0100, and 1000, this should return the set {0111, 1011, 1101, 1110}.\n+// Assumes that mapFlagNames contains all script verify flags.\n+std::set<unsigned int> ExcludeIndividualFlags(unsigned int flags)\n {\n-    std::vector<unsigned int> flags_combos;\n-    for (unsigned int i = 0; i < mapFlagNames.size(); ++i) {\n-        const unsigned int flags_excluding_i = TrimFlags(flags & ~(1U << i));\n-        if (flags != flags_excluding_i && std::find(flags_combos.begin(), flags_combos.end(), flags_excluding_i) != flags_combos.end()) {\n-            flags_combos.push_back(flags_excluding_i);\n+    std::set<unsigned int> flags_combos;\n+    for (const auto& pair : mapFlagNames) {\n+        const unsigned int flags_excluding_one = TrimFlags(flags & ~(pair.second));\n+        if (flags != flags_excluding_one) {\n+            flags_combos.insert(flags_excluding_one);\n         }\n     }\n     return flags_combos;"
      }
    ]
  },
  {
    "sha": "5aee73d1759bcc0d1e951776942e616843934af1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YWVlNzNkMTc1OWJjYzBkMWU5NTE3NzY5NDJlNjE2ODQzOTM0YWYx",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-02-23T15:04:51Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-04-08T02:00:17Z"
      },
      "message": "[test] minor improvements / followups\n\nAdd missing script verify flags to mapFlagNames.\niterate through mapFlagNames values instead of bits.\n\nBOOST_CHECK_MESSAGE better reports which test failed exactly, whereas\nBOOST_ERROR was just incrementing the error counter.",
      "tree": {
        "sha": "3c28eddd8929ff37c0ff300bf7f1a4ac5b991880",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3c28eddd8929ff37c0ff300bf7f1a4ac5b991880"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5aee73d1759bcc0d1e951776942e616843934af1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5aee73d1759bcc0d1e951776942e616843934af1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5aee73d1759bcc0d1e951776942e616843934af1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5aee73d1759bcc0d1e951776942e616843934af1/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8a365df5586b36d1772c78069f9d93c56a81df6f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a365df5586b36d1772c78069f9d93c56a81df6f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8a365df5586b36d1772c78069f9d93c56a81df6f"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 24,
      "deletions": 15
    },
    "files": [
      {
        "sha": "35d8fe129f797f839025d89b7abe64d41b00762e",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 15,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5aee73d1759bcc0d1e951776942e616843934af1/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5aee73d1759bcc0d1e951776942e616843934af1/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=5aee73d1759bcc0d1e951776942e616843934af1",
        "patch": "@@ -20,6 +20,7 @@\n #include <script/signingprovider.h>\n #include <script/standard.h>\n #include <streams.h>\n+#include <test/util/script.h>\n #include <test/util/transaction_utils.h>\n #include <util/strencodings.h>\n #include <util/string.h>\n@@ -59,6 +60,9 @@ static std::map<std::string, unsigned int> mapFlagNames = {\n     {std::string(\"WITNESS_PUBKEYTYPE\"), (unsigned int)SCRIPT_VERIFY_WITNESS_PUBKEYTYPE},\n     {std::string(\"CONST_SCRIPTCODE\"), (unsigned int)SCRIPT_VERIFY_CONST_SCRIPTCODE},\n     {std::string(\"TAPROOT\"), (unsigned int)SCRIPT_VERIFY_TAPROOT},\n+    {std::string(\"DISCOURAGE_UPGRADABLE_PUBKEYTYPE\"), (unsigned int)SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_PUBKEYTYPE},\n+    {std::string(\"DISCOURAGE_OP_SUCCESS\"), (unsigned int)SCRIPT_VERIFY_DISCOURAGE_OP_SUCCESS},\n+    {std::string(\"DISCOURAGE_UPGRADABLE_TAPROOT_VERSION\"), (unsigned int)SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_TAPROOT_VERSION},\n };\n \n unsigned int ParseScriptFlags(std::string strFlags)\n@@ -139,6 +143,7 @@ unsigned int TrimFlags(unsigned int flags)\n \n     // CLEANSTACK requires WITNESS (and transitively CLEANSTACK requires P2SH)\n     if (!(flags & SCRIPT_VERIFY_WITNESS)) flags &= ~(unsigned int)SCRIPT_VERIFY_CLEANSTACK;\n+    Assert(IsValidFlagCombination(flags));\n     return flags;\n }\n \n@@ -149,6 +154,7 @@ unsigned int FillFlags(unsigned int flags)\n \n     // WITNESS implies P2SH (and transitively CLEANSTACK implies P2SH)\n     if (flags & SCRIPT_VERIFY_WITNESS) flags |= SCRIPT_VERIFY_P2SH;\n+    Assert(IsValidFlagCombination(flags));\n     return flags;\n }\n \n@@ -231,16 +237,15 @@ BOOST_AUTO_TEST_CASE(tx_valid)\n                 BOOST_ERROR(\"Bad test flags: \" << strTest);\n             }\n \n-            if (!CheckTxScripts(tx, mapprevOutScriptPubKeys, mapprevOutValues, ~verify_flags, txdata, strTest, /* expect_valid */ true)) {\n-                BOOST_ERROR(\"Tx unexpectedly failed: \" << strTest);\n-            }\n+            BOOST_CHECK_MESSAGE(CheckTxScripts(tx, mapprevOutScriptPubKeys, mapprevOutValues, ~verify_flags, txdata, strTest, /* expect_valid */ true),\n+                                \"Tx unexpectedly failed: \" << strTest);\n \n             // Backwards compatibility of script verification flags: Removing any flag(s) should not invalidate a valid transaction\n-            for (size_t i = 0; i < mapFlagNames.size(); ++i) {\n+            for (const auto& [name, flag] : mapFlagNames) {\n                 // Removing individual flags\n-                unsigned int flags = TrimFlags(~(verify_flags | (1U << i)));\n+                unsigned int flags = TrimFlags(~(verify_flags | flag));\n                 if (!CheckTxScripts(tx, mapprevOutScriptPubKeys, mapprevOutValues, flags, txdata, strTest, /* expect_valid */ true)) {\n-                    BOOST_ERROR(\"Tx unexpectedly failed with flag \" << ToString(i) << \" unset: \" << strTest);\n+                    BOOST_ERROR(\"Tx unexpectedly failed with flag \" << name << \" unset: \" << strTest);\n                 }\n                 // Removing random combinations of flags\n                 flags = TrimFlags(~(verify_flags | (unsigned int)InsecureRandBits(mapFlagNames.size())));\n@@ -250,7 +255,7 @@ BOOST_AUTO_TEST_CASE(tx_valid)\n             }\n \n             // Check that flags are maximal: transaction should fail if any unset flags are set.\n-            for (auto flags_excluding_one: ExcludeIndividualFlags(verify_flags)) {\n+            for (auto flags_excluding_one : ExcludeIndividualFlags(verify_flags)) {\n                 if (!CheckTxScripts(tx, mapprevOutScriptPubKeys, mapprevOutValues, ~flags_excluding_one, txdata, strTest, /* expect_valid */ false)) {\n                     BOOST_ERROR(\"Too many flags unset: \" << strTest);\n                 }\n@@ -317,27 +322,31 @@ BOOST_AUTO_TEST_CASE(tx_invalid)\n             PrecomputedTransactionData txdata(tx);\n             unsigned int verify_flags = ParseScriptFlags(test[2].get_str());\n \n-            // Not using FillFlags() in the main test, in order to detect invalid verifyFlags combination\n-            if (!CheckTxScripts(tx, mapprevOutScriptPubKeys, mapprevOutValues, verify_flags, txdata, strTest, /* expect_valid */ false)) {\n-                BOOST_ERROR(\"Tx unexpectedly passed: \" << strTest);\n+            // Check that the test gives a valid combination of flags (otherwise VerifyScript will throw). Don't edit the flags.\n+            if (verify_flags != FillFlags(verify_flags)) {\n+                BOOST_ERROR(\"Bad test flags: \" << strTest);\n             }\n \n+            // Not using FillFlags() in the main test, in order to detect invalid verifyFlags combination\n+            BOOST_CHECK_MESSAGE(CheckTxScripts(tx, mapprevOutScriptPubKeys, mapprevOutValues, verify_flags, txdata, strTest, /* expect_valid */ false),\n+                                \"Tx unexpectedly passed: \" << strTest);\n+\n             // Backwards compatibility of script verification flags: Adding any flag(s) should not validate an invalid transaction\n-            for (size_t i = 0; i < mapFlagNames.size(); i++) {\n-                unsigned int flags = FillFlags(verify_flags | (1U << i));\n+            for (const auto& [name, flag] : mapFlagNames) {\n+                unsigned int flags = FillFlags(verify_flags | flag);\n                 // Adding individual flags\n                 if (!CheckTxScripts(tx, mapprevOutScriptPubKeys, mapprevOutValues, flags, txdata, strTest, /* expect_valid */ false)) {\n-                    BOOST_ERROR(\"Tx unexpectedly passed with flag \" << ToString(i) << \" set: \" << strTest);\n+                    BOOST_ERROR(\"Tx unexpectedly passed with flag \" << name << \" set: \" << strTest);\n                 }\n                 // Adding random combinations of flags\n                 flags = FillFlags(verify_flags | (unsigned int)InsecureRandBits(mapFlagNames.size()));\n                 if (!CheckTxScripts(tx, mapprevOutScriptPubKeys, mapprevOutValues, flags, txdata, strTest, /* expect_valid */ false)) {\n-                    BOOST_ERROR(\"Tx unexpectedly passed with random flags \" << ToString(flags) << \": \" << strTest);\n+                    BOOST_ERROR(\"Tx unexpectedly passed with random flags \" << name << \": \" << strTest);\n                 }\n             }\n \n             // Check that flags are minimal: transaction should succeed if any set flags are unset.\n-            for (auto flags_excluding_one: ExcludeIndividualFlags(verify_flags)) {\n+            for (auto flags_excluding_one : ExcludeIndividualFlags(verify_flags)) {\n                 if (!CheckTxScripts(tx, mapprevOutScriptPubKeys, mapprevOutValues, flags_excluding_one, txdata, strTest, /* expect_valid */ true)) {\n                     BOOST_ERROR(\"Too many flags set: \" << strTest);\n                 }"
      }
    ]
  },
  {
    "sha": "5d3ced72f9b5f36db1a76bd8bc918d11b87dfd72",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZDNjZWQ3MmY5YjVmMzZkYjFhNzZiZDhiYzkxOGQxMWI4N2RmZDcy",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-02-23T15:35:55Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-04-08T02:00:17Z"
      },
      "message": "[test] remove unnecessary OP_1s from invalid tests\n\nSimilar to 19db590d044efe7d474a16720e5b56e7b55db54c, which removed these\nfor the valid tests. Not removing ones that cause a false/empty stack\nerror because these tests should fail due to being invalid with CSV/CLTV",
      "tree": {
        "sha": "9113509d907cf515da0bcf4b58988058f5e7afaf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9113509d907cf515da0bcf4b58988058f5e7afaf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5d3ced72f9b5f36db1a76bd8bc918d11b87dfd72",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d3ced72f9b5f36db1a76bd8bc918d11b87dfd72",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5d3ced72f9b5f36db1a76bd8bc918d11b87dfd72",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d3ced72f9b5f36db1a76bd8bc918d11b87dfd72/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5aee73d1759bcc0d1e951776942e616843934af1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5aee73d1759bcc0d1e951776942e616843934af1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5aee73d1759bcc0d1e951776942e616843934af1"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 21,
      "deletions": 21
    },
    "files": [
      {
        "sha": "41bebab2a039a704dc700046c4a9b63bfcac4944",
        "filename": "src/test/data/tx_invalid.json",
        "status": "modified",
        "additions": 21,
        "deletions": 21,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d3ced72f9b5f36db1a76bd8bc918d11b87dfd72/src/test/data/tx_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d3ced72f9b5f36db1a76bd8bc918d11b87dfd72/src/test/data/tx_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_invalid.json?ref=5d3ced72f9b5f36db1a76bd8bc918d11b87dfd72",
        "patch": "@@ -124,15 +124,15 @@\n [\"CHECKLOCKTIMEVERIFY tests\"],\n \n [\"By-height locks, with argument just beyond tx nLockTime\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"1 CHECKLOCKTIMEVERIFY 1\"]],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"1 CHECKLOCKTIMEVERIFY\"]],\n \"010000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"CHECKLOCKTIMEVERIFY\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"499999999 CHECKLOCKTIMEVERIFY 1\"]],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"499999999 CHECKLOCKTIMEVERIFY\"]],\n \"0100000001000100000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000fe64cd1d\", \"CHECKLOCKTIMEVERIFY\"],\n \n [\"By-time locks, with argument just beyond tx nLockTime (but within numerical boundaries)\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"500000001 CHECKLOCKTIMEVERIFY 1\"]],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"500000001 CHECKLOCKTIMEVERIFY\"]],\n \"01000000010001000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000065cd1d\", \"CHECKLOCKTIMEVERIFY\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4294967295 CHECKLOCKTIMEVERIFY 1\"]],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4294967295 CHECKLOCKTIMEVERIFY\"]],\n \"0100000001000100000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000feffffff\", \"CHECKLOCKTIMEVERIFY\"],\n \n [\"Argument missing\"],\n@@ -142,11 +142,11 @@\n \"010000000100010000000000000000000000000000000000000000000000000000000000000000000001b1010000000100000000000000000000000000\", \"CHECKLOCKTIMEVERIFY\"],\n \n [\"Argument negative with by-blockheight nLockTime=0\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"-1 CHECKLOCKTIMEVERIFY 1\"]],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"-1 CHECKLOCKTIMEVERIFY\"]],\n \"010000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"CHECKLOCKTIMEVERIFY\"],\n \n [\"Argument negative with by-blocktime nLockTime=500,000,000\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"-1 CHECKLOCKTIMEVERIFY 1\"]],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"-1 CHECKLOCKTIMEVERIFY\"]],\n \"01000000010001000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000065cd1d\", \"CHECKLOCKTIMEVERIFY\"],\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"1\"]],\n \"010000000100010000000000000000000000000000000000000000000000000000000000000000000004005194b1010000000100000000000000000002000000\", \"CHECKLOCKTIMEVERIFY\"],\n@@ -167,19 +167,19 @@\n \"01000000010001000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000065cd1d\", \"CHECKLOCKTIMEVERIFY\"],\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0\"]],\n \"01000000010001000000000000000000000000000000000000000000000000000000000000000000000251b100000000010000000000000000000065cd1d\", \"NONE\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"499999999 CHECKLOCKTIMEVERIFY 1\"]],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"499999999 CHECKLOCKTIMEVERIFY\"]],\n \"01000000010001000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000065cd1d\", \"CHECKLOCKTIMEVERIFY\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"500000000 CHECKLOCKTIMEVERIFY 1\"]],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"500000000 CHECKLOCKTIMEVERIFY\"]],\n \"010000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"CHECKLOCKTIMEVERIFY\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"500000000 CHECKLOCKTIMEVERIFY 1\"]],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"500000000 CHECKLOCKTIMEVERIFY\"]],\n \"0100000001000100000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000ff64cd1d\", \"CHECKLOCKTIMEVERIFY\"],\n \n [\"Argument 2^32 with nLockTime=2^32-1\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x050000000001 CHECKLOCKTIMEVERIFY 1\"]],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x050000000001 CHECKLOCKTIMEVERIFY\"]],\n \"0100000001000100000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000ffffffff\", \"CHECKLOCKTIMEVERIFY\"],\n \n [\"Same, but with nLockTime=2^31-1\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"2147483648 CHECKLOCKTIMEVERIFY 1\"]],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"2147483648 CHECKLOCKTIMEVERIFY\"]],\n \"0100000001000100000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000ffffff7f\", \"CHECKLOCKTIMEVERIFY\"],\n \n [\"6 byte non-minimally-encoded arguments are invalid even if their contents are valid\"],\n@@ -201,37 +201,37 @@\n [\"CHECKSEQUENCEVERIFY tests\"],\n \n [\"By-height locks, with argument just beyond txin.nSequence\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"1 CHECKSEQUENCEVERIFY 1\"]],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"1 CHECKSEQUENCEVERIFY\"]],\n \"020000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"CHECKSEQUENCEVERIFY\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4259839 CHECKSEQUENCEVERIFY 1\"]],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4259839 CHECKSEQUENCEVERIFY\"]],\n \"020000000100010000000000000000000000000000000000000000000000000000000000000000000000feff40000100000000000000000000000000\", \"CHECKSEQUENCEVERIFY\"],\n \n [\"By-time locks, with argument just beyond txin.nSequence (but within numerical boundaries)\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4194305 CHECKSEQUENCEVERIFY 1\"]],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4194305 CHECKSEQUENCEVERIFY\"]],\n \"020000000100010000000000000000000000000000000000000000000000000000000000000000000000000040000100000000000000000000000000\", \"CHECKSEQUENCEVERIFY\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4259839 CHECKSEQUENCEVERIFY 1\"]],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4259839 CHECKSEQUENCEVERIFY\"]],\n \"020000000100010000000000000000000000000000000000000000000000000000000000000000000000feff40000100000000000000000000000000\", \"CHECKSEQUENCEVERIFY\"],\n \n [\"Argument missing\"],\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"CHECKSEQUENCEVERIFY 1\"]],\n \"020000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"CHECKSEQUENCEVERIFY\"],\n \n [\"Argument negative with by-blockheight txin.nSequence=0\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"-1 CHECKSEQUENCEVERIFY 1\"]],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"-1 CHECKSEQUENCEVERIFY\"]],\n \"020000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"CHECKSEQUENCEVERIFY\"],\n \n [\"Argument negative with by-blocktime txin.nSequence=CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"-1 CHECKSEQUENCEVERIFY 1\"]],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"-1 CHECKSEQUENCEVERIFY\"]],\n \"020000000100010000000000000000000000000000000000000000000000000000000000000000000000000040000100000000000000000000000000\", \"CHECKSEQUENCEVERIFY\"],\n \n [\"Argument/tx height/time mismatch, both versions\"],\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0 CHECKSEQUENCEVERIFY 1\"]],\n \"020000000100010000000000000000000000000000000000000000000000000000000000000000000000000040000100000000000000000000000000\", \"CHECKSEQUENCEVERIFY\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"65535 CHECKSEQUENCEVERIFY 1\"]],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"65535 CHECKSEQUENCEVERIFY\"]],\n \"020000000100010000000000000000000000000000000000000000000000000000000000000000000000000040000100000000000000000000000000\", \"CHECKSEQUENCEVERIFY\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4194304 CHECKSEQUENCEVERIFY 1\"]],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4194304 CHECKSEQUENCEVERIFY\"]],\n \"020000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"CHECKSEQUENCEVERIFY\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4259839 CHECKSEQUENCEVERIFY 1\"]],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4259839 CHECKSEQUENCEVERIFY\"]],\n \"020000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"CHECKSEQUENCEVERIFY\"],\n \n [\"6 byte non-minimally-encoded arguments are invalid even if their contents are valid\"],\n@@ -249,7 +249,7 @@\n [\"Failure due to insufficient tx.nVersion (<2)\"],\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0 CHECKSEQUENCEVERIFY 1\"]],\n \"010000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"CHECKSEQUENCEVERIFY\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4194304 CHECKSEQUENCEVERIFY 1\"]],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4194304 CHECKSEQUENCEVERIFY\"]],\n \"010000000100010000000000000000000000000000000000000000000000000000000000000000000000000040000100000000000000000000000000\", \"CHECKSEQUENCEVERIFY\"],\n \n [\"Unknown witness program version (with DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM)\"],"
      }
    ]
  },
  {
    "sha": "b109bde46a8730afbc09c107b802a2c321293f4b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMTA5YmRlNDZhODczMGFmYmMwOWMxMDdiODAyYTJjMzIxMjkzZjRi",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-04-05T16:41:25Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-04-08T02:00:23Z"
      },
      "message": "[test] check that mapFlagNames is up to date\n\nThere is no way to iterate through all script verification flags, and\nit's not guaranteed that every power of 2 is used. Just make sure that\nall flags in STANDARD_SCRIPT_VERIFY_FLAGS are present in mapFlagNames;\nthis covers all consensus and policy flags. If mapFlagNames has more\nflags than STANDARD_SCRIPT_VERIFY_FLAGS, that's okay. Nonexistent flags\nwill be caught by the compiler.",
      "tree": {
        "sha": "b11a2625730027be1f9760c88c2e2938bb6fdfe9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b11a2625730027be1f9760c88c2e2938bb6fdfe9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b109bde46a8730afbc09c107b802a2c321293f4b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b109bde46a8730afbc09c107b802a2c321293f4b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b109bde46a8730afbc09c107b802a2c321293f4b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b109bde46a8730afbc09c107b802a2c321293f4b/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5d3ced72f9b5f36db1a76bd8bc918d11b87dfd72",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d3ced72f9b5f36db1a76bd8bc918d11b87dfd72",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5d3ced72f9b5f36db1a76bd8bc918d11b87dfd72"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 11,
      "deletions": 0
    },
    "files": [
      {
        "sha": "a7c0d8b2c0931c9c0f1e8b0fe4b3aa10ddb16637",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b109bde46a8730afbc09c107b802a2c321293f4b/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b109bde46a8730afbc09c107b802a2c321293f4b/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=b109bde46a8730afbc09c107b802a2c321293f4b",
        "patch": "@@ -82,6 +82,16 @@ unsigned int ParseScriptFlags(std::string strFlags)\n     return flags;\n }\n \n+// Check that all flags in STANDARD_SCRIPT_VERIFY_FLAGS are present in mapFlagNames.\n+bool CheckMapFlagNames()\n+{\n+    unsigned int standard_flags_missing{STANDARD_SCRIPT_VERIFY_FLAGS};\n+    for (const auto& pair : mapFlagNames) {\n+        standard_flags_missing &= ~(pair.second);\n+    }\n+    return standard_flags_missing == 0;\n+}\n+\n std::string FormatScriptFlags(unsigned int flags)\n {\n     if (flags == 0) {\n@@ -178,6 +188,7 @@ BOOST_FIXTURE_TEST_SUITE(transaction_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(tx_valid)\n {\n+    BOOST_CHECK_MESSAGE(CheckMapFlagNames(), \"mapFlagNames is missing a script verification flag\");\n     // Read tests from test/data/tx_valid.json\n     UniValue tests = read_json(std::string(json_tests::tx_valid, json_tests::tx_valid + sizeof(json_tests::tx_valid)));\n "
      }
    ]
  }
]