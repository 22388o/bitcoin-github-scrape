[
  {
    "sha": "fa98f99b6ca4759159b4996b6e7a90416570db9c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTk4Zjk5YjZjYTQ3NTkxNTliNDk5NmI2ZTdhOTA0MTY1NzBkYjlj",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-03-19T20:30:46Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-03-19T22:57:13Z"
      },
      "message": "[qa] Use python2/3 syntax",
      "tree": {
        "sha": "ead9031cd7ecf631a8d9e0771b4729d9e20645ad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ead9031cd7ecf631a8d9e0771b4729d9e20645ad"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa98f99b6ca4759159b4996b6e7a90416570db9c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa98f99b6ca4759159b4996b6e7a90416570db9c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa98f99b6ca4759159b4996b6e7a90416570db9c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa98f99b6ca4759159b4996b6e7a90416570db9c/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "29e1131c4642459349a0ed4737121fb1902f8a47",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29e1131c4642459349a0ed4737121fb1902f8a47",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/29e1131c4642459349a0ed4737121fb1902f8a47"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 23,
      "deletions": 23
    },
    "files": [
      {
        "sha": "f73bf84f7b108c2b4e790a116d624357c87f67ec",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa98f99b6ca4759159b4996b6e7a90416570db9c/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa98f99b6ca4759159b4996b6e7a90416570db9c/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=fa98f99b6ca4759159b4996b6e7a90416570db9c",
        "patch": "@@ -32,13 +32,13 @@\n from tests_config import *\n \n #If imported values are not defined then set to zero (or disabled)\n-if not vars().has_key('ENABLE_WALLET'):\n+if 'ENABLE_WALLET' not in vars():\n     ENABLE_WALLET=0\n-if not vars().has_key('ENABLE_BITCOIND'):\n+if 'ENABLE_BITCOIND' not in vars():\n     ENABLE_BITCOIND=0\n-if not vars().has_key('ENABLE_UTILS'):\n+if 'ENABLE_UTILS' not in vars():\n     ENABLE_UTILS=0\n-if not vars().has_key('ENABLE_ZMQ'):\n+if 'ENABLE_ZMQ' not in vars():\n     ENABLE_ZMQ=0\n     \n # python-zmq may not be installed. Handle this gracefully and with some helpful info"
      },
      {
        "sha": "bcbe2e741531effb085dbf9cdaa3a0add26210bf",
        "filename": "qa/rpc-tests/fundrawtransaction.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa98f99b6ca4759159b4996b6e7a90416570db9c/qa/rpc-tests/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa98f99b6ca4759159b4996b6e7a90416570db9c/qa/rpc-tests/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/fundrawtransaction.py?ref=fa98f99b6ca4759159b4996b6e7a90416570db9c",
        "patch": "@@ -209,7 +209,7 @@ def run_test(self):\n         matchingOuts = 0\n         for i, out in enumerate(dec_tx['vout']):\n             totalOut += out['value']\n-            if outputs.has_key(out['scriptPubKey']['addresses'][0]):\n+            if out['scriptPubKey']['addresses'][0] in outputs:\n                 matchingOuts+=1\n             else:\n                 assert_equal(i, rawtxfund['changepos'])\n@@ -249,7 +249,7 @@ def run_test(self):\n         matchingOuts = 0\n         for out in dec_tx['vout']:\n             totalOut += out['value']\n-            if outputs.has_key(out['scriptPubKey']['addresses'][0]):\n+            if out['scriptPubKey']['addresses'][0] in outputs:\n                 matchingOuts+=1\n \n         assert_equal(matchingOuts, 1)\n@@ -291,7 +291,7 @@ def run_test(self):\n         matchingOuts = 0\n         for out in dec_tx['vout']:\n             totalOut += out['value']\n-            if outputs.has_key(out['scriptPubKey']['addresses'][0]):\n+            if out['scriptPubKey']['addresses'][0] in outputs:\n                 matchingOuts+=1\n \n         assert_equal(matchingOuts, 2)\n@@ -309,7 +309,7 @@ def run_test(self):\n         errorString = \"\"\n         try:\n             rawtxfund = self.nodes[2].fundrawtransaction(rawtx)\n-        except JSONRPCException,e:\n+        except JSONRPCException as e:\n             errorString = e.error['message']\n \n         assert(\"Insufficient\" in errorString)"
      },
      {
        "sha": "5253d49c308f758497413a746b8a8e937c0251d9",
        "filename": "qa/rpc-tests/keypool.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa98f99b6ca4759159b4996b6e7a90416570db9c/qa/rpc-tests/keypool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa98f99b6ca4759159b4996b6e7a90416570db9c/qa/rpc-tests/keypool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/keypool.py?ref=fa98f99b6ca4759159b4996b6e7a90416570db9c",
        "patch": "@@ -46,7 +46,7 @@ def run_test(self):\n         try:\n             addr = nodes[0].getnewaddress()\n             raise AssertionError('Keypool should be exhausted after one address')\n-        except JSONRPCException,e:\n+        except JSONRPCException as e:\n             assert(e.error['code']==-12)\n \n         # put three new keys in the keypool\n@@ -66,7 +66,7 @@ def run_test(self):\n         try:\n             addr = nodes[0].getrawchangeaddress()\n             raise AssertionError('Keypool should be exhausted after three addresses')\n-        except JSONRPCException,e:\n+        except JSONRPCException as e:\n             assert(e.error['code']==-12)\n \n         # refill keypool with three new addresses\n@@ -84,7 +84,7 @@ def run_test(self):\n         try:\n             nodes[0].generate(1)\n             raise AssertionError('Keypool should be exhausted after three addesses')\n-        except JSONRPCException,e:\n+        except JSONRPCException as e:\n             assert(e.error['code']==-12)\n \n     def setup_chain(self):"
      },
      {
        "sha": "9f660c8bdadeb279bdb79c17bf2101ba0c0983e7",
        "filename": "qa/rpc-tests/rawtransactions.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa98f99b6ca4759159b4996b6e7a90416570db9c/qa/rpc-tests/rawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa98f99b6ca4759159b4996b6e7a90416570db9c/qa/rpc-tests/rawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rawtransactions.py?ref=fa98f99b6ca4759159b4996b6e7a90416570db9c",
        "patch": "@@ -59,7 +59,7 @@ def run_test(self):\n         errorString = \"\"\n         try:\n             rawtx   = self.nodes[2].sendrawtransaction(rawtx['hex'])\n-        except JSONRPCException,e:\n+        except JSONRPCException as e:\n             errorString = e.error['message']\n \n         assert(\"Missing inputs\" in errorString)"
      },
      {
        "sha": "6274cd05301e63a6d63d70586dfa56132bff872b",
        "filename": "qa/rpc-tests/smartfees.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa98f99b6ca4759159b4996b6e7a90416570db9c/qa/rpc-tests/smartfees.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa98f99b6ca4759159b4996b6e7a90416570db9c/qa/rpc-tests/smartfees.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/smartfees.py?ref=fa98f99b6ca4759159b4996b6e7a90416570db9c",
        "patch": "@@ -105,7 +105,7 @@ def check_estimates(node, fees_seen, max_invalid, print_estimates = True):\n         print([str(all_estimates[e-1]) for e in [1,2,3,6,15,25]])\n     delta = 1.0e-6 # account for rounding error\n     last_e = max(fees_seen)\n-    for e in filter(lambda x: x >= 0, all_estimates):\n+    for e in [x for x in all_estimates if x >= 0]:\n         # Estimates should be within the bounds of what transactions fees actually were:\n         if float(e)+delta < min(fees_seen) or float(e)-delta > max(fees_seen):\n             raise AssertionError(\"Estimated fee (%f) out of range (%f,%f)\""
      },
      {
        "sha": "0b8bfca2ca9352aab19c7c262506ded9021237bf",
        "filename": "qa/rpc-tests/test_framework/blockstore.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa98f99b6ca4759159b4996b6e7a90416570db9c/qa/rpc-tests/test_framework/blockstore.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa98f99b6ca4759159b4996b6e7a90416570db9c/qa/rpc-tests/test_framework/blockstore.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/blockstore.py?ref=fa98f99b6ca4759159b4996b6e7a90416570db9c",
        "patch": "@@ -3,7 +3,7 @@\n #             and for constructing a getheaders message\n #\n \n-from mininode import *\n+from .mininode import *\n import dbm\n \n class BlockStore(object):"
      },
      {
        "sha": "425e6dcdde419b62de6ea25bcaf33e460204bfaf",
        "filename": "qa/rpc-tests/test_framework/blocktools.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa98f99b6ca4759159b4996b6e7a90416570db9c/qa/rpc-tests/test_framework/blocktools.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa98f99b6ca4759159b4996b6e7a90416570db9c/qa/rpc-tests/test_framework/blocktools.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/blocktools.py?ref=fa98f99b6ca4759159b4996b6e7a90416570db9c",
        "patch": "@@ -4,8 +4,8 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n #\n \n-from mininode import *\n-from script import CScript, OP_TRUE, OP_CHECKSIG\n+from .mininode import *\n+from .script import CScript, OP_TRUE, OP_CHECKSIG\n \n # Create a block (with regtest difficulty)\n def create_block(hashprev, coinbase, nTime=None):"
      },
      {
        "sha": "76b61803b9cadd11f53196064e6bd7a1c44f0e55",
        "filename": "qa/rpc-tests/test_framework/comptool.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa98f99b6ca4759159b4996b6e7a90416570db9c/qa/rpc-tests/test_framework/comptool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa98f99b6ca4759159b4996b6e7a90416570db9c/qa/rpc-tests/test_framework/comptool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/comptool.py?ref=fa98f99b6ca4759159b4996b6e7a90416570db9c",
        "patch": "@@ -4,9 +4,9 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n #\n \n-from mininode import *\n-from blockstore import BlockStore, TxStore\n-from util import p2p_port\n+from .mininode import *\n+from .blockstore import BlockStore, TxStore\n+from .util import p2p_port\n \n '''\n This is a tool for comparing two or more bitcoinds to each other"
      },
      {
        "sha": "12327a6c5f4a9fb3e7e43e9778d5501828c1c33d",
        "filename": "qa/rpc-tests/test_framework/socks5.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa98f99b6ca4759159b4996b6e7a90416570db9c/qa/rpc-tests/test_framework/socks5.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa98f99b6ca4759159b4996b6e7a90416570db9c/qa/rpc-tests/test_framework/socks5.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/socks5.py?ref=fa98f99b6ca4759159b4996b6e7a90416570db9c",
        "patch": "@@ -117,7 +117,7 @@ def handle(self):\n             self.serv.queue.put(cmdin)\n             print('Proxy: ', cmdin)\n             # Fall through to disconnect\n-        except Exception,e:\n+        except Exception as e:\n             traceback.print_exc(file=sys.stderr)\n             self.serv.queue.put(e)\n         finally:"
      },
      {
        "sha": "f5ab1fcc81d8d190650459f5006cd556fcf9de25",
        "filename": "qa/rpc-tests/test_framework/test_framework.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa98f99b6ca4759159b4996b6e7a90416570db9c/qa/rpc-tests/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa98f99b6ca4759159b4996b6e7a90416570db9c/qa/rpc-tests/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/test_framework.py?ref=fa98f99b6ca4759159b4996b6e7a90416570db9c",
        "patch": "@@ -26,7 +26,7 @@\n     check_json_precision,\n     initialize_chain_clean,\n )\n-from authproxy import AuthServiceProxy, JSONRPCException\n+from .authproxy import AuthServiceProxy, JSONRPCException\n \n \n class BitcoinTestFramework(object):"
      },
      {
        "sha": "f3ddeb6ae692f247272fc49e037763e095a5bf55",
        "filename": "qa/rpc-tests/wallet.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa98f99b6ca4759159b4996b6e7a90416570db9c/qa/rpc-tests/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa98f99b6ca4759159b4996b6e7a90416570db9c/qa/rpc-tests/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet.py?ref=fa98f99b6ca4759159b4996b6e7a90416570db9c",
        "patch": "@@ -249,15 +249,15 @@ def run_test (self):\n         errorString = \"\"\n         try:\n             txId  = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), \"1f-4\")\n-        except JSONRPCException,e:\n+        except JSONRPCException as e:\n             errorString = e.error['message']\n \n         assert_equal(\"Invalid amount\" in errorString, True)\n \n         errorString = \"\"\n         try:\n             self.nodes[0].generate(\"2\") #use a string to as block amount parameter must fail because it's not interpreted as amount\n-        except JSONRPCException,e:\n+        except JSONRPCException as e:\n             errorString = e.error['message']\n \n         assert_equal(\"not an integer\" in errorString, True)"
      }
    ]
  },
  {
    "sha": "fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTUyYTZlNTBjMGJmZGNhZjVmM2EwN2IxZTgzYzdkNDdmMzgxNTNk",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-03-19T19:48:11Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-03-20T19:09:35Z"
      },
      "message": "[qa] Use print() in rpc tests",
      "tree": {
        "sha": "bb2c8086fad4122fb3d3ef8751e842fb28f1030f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bb2c8086fad4122fb3d3ef8751e842fb28f1030f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa98f99b6ca4759159b4996b6e7a90416570db9c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa98f99b6ca4759159b4996b6e7a90416570db9c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa98f99b6ca4759159b4996b6e7a90416570db9c"
      }
    ],
    "stats": {
      "total": 236,
      "additions": 119,
      "deletions": 117
    },
    "files": [
      {
        "sha": "cd86872223cb6d9ccb5a5b2384f54517d2ffb3d1",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d",
        "patch": "@@ -78,7 +78,7 @@\n \n #Disable Windows tests by default\n if EXEEXT == \".exe\" and \"-win\" not in opts:\n-    print \"Win tests currently disabled.  Use -win option to enable\"\n+    print(\"Win tests currently disabled.  Use -win option to enable\")\n     sys.exit(0)\n \n #Tests\n@@ -197,7 +197,7 @@ def runtests():\n             coverage.cleanup()\n \n     else:\n-        print \"No rpc tests to run. Wallet, utils, and bitcoind must all be enabled\"\n+        print(\"No rpc tests to run. Wallet, utils, and bitcoind must all be enabled\")\n \n \n class RPCCoverage(object):"
      },
      {
        "sha": "47312e1812715381801f386b12c7e1d4edf8f98a",
        "filename": "qa/rpc-tests/abandonconflict.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d/qa/rpc-tests/abandonconflict.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d/qa/rpc-tests/abandonconflict.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/abandonconflict.py?ref=fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d",
        "patch": "@@ -145,9 +145,9 @@ def run_test(self):\n         self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n         newbalance = self.nodes[0].getbalance()\n         #assert(newbalance == balance - Decimal(\"10\"))\n-        print \"If balance has not declined after invalidateblock then out of mempool wallet tx which is no longer\"\n-        print \"conflicted has not resumed causing its inputs to be seen as spent.  See Issue #7315\"\n-        print balance , \" -> \" , newbalance , \" ?\"\n+        print(\"If balance has not declined after invalidateblock then out of mempool wallet tx which is no longer\")\n+        print(\"conflicted has not resumed causing its inputs to be seen as spent.  See Issue #7315\")\n+        print(str(balance) + \" -> \" + str(newbalance) + \" ?\")\n \n if __name__ == '__main__':\n     AbandonConflictTest().main()"
      },
      {
        "sha": "6d1c4e0bc4a9e466adf190063518059d8fe1e60f",
        "filename": "qa/rpc-tests/bip68-sequence.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d/qa/rpc-tests/bip68-sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d/qa/rpc-tests/bip68-sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip68-sequence.py?ref=fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d",
        "patch": "@@ -33,20 +33,20 @@ def run_test(self):\n         # Generate some coins\n         self.nodes[0].generate(110)\n \n-        print \"Running test disable flag\"\n+        print(\"Running test disable flag\")\n         self.test_disable_flag()\n \n-        print \"Running test sequence-lock-confirmed-inputs\"\n+        print(\"Running test sequence-lock-confirmed-inputs\")\n         self.test_sequence_lock_confirmed_inputs()\n \n-        print \"Running test sequence-lock-unconfirmed-inputs\"\n+        print(\"Running test sequence-lock-unconfirmed-inputs\")\n         self.test_sequence_lock_unconfirmed_inputs()\n \n         # This test needs to change when BIP68 becomes consensus\n-        print \"Running test BIP68 not consensus\"\n+        print(\"Running test BIP68 not consensus\")\n         self.test_bip68_not_consensus()\n \n-        print \"Passed\\n\"\n+        print(\"Passed\\n\")\n \n     # Test that BIP68 is not in effect if tx version is 1, or if\n     # the first sequence bit is set."
      },
      {
        "sha": "daf76bca28caf300b1e26b366b7b865322ac4401",
        "filename": "qa/rpc-tests/fundrawtransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d/qa/rpc-tests/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d/qa/rpc-tests/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/fundrawtransaction.py?ref=fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d",
        "patch": "@@ -25,7 +25,7 @@ def setup_network(self, split=False):\n         self.sync_all()\n \n     def run_test(self):\n-        print \"Mining blocks...\"\n+        print(\"Mining blocks...\")\n \n         min_relay_tx_fee = self.nodes[0].getnetworkinfo()['relayfee']\n         # This test is not meant to test fee estimation and we'd like"
      },
      {
        "sha": "0b26b26c9ce2bcd056efdd9f55f60b95971d49de",
        "filename": "qa/rpc-tests/getblocktemplate_longpoll.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d/qa/rpc-tests/getblocktemplate_longpoll.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d/qa/rpc-tests/getblocktemplate_longpoll.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/getblocktemplate_longpoll.py?ref=fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d",
        "patch": "@@ -49,7 +49,7 @@ class GetBlockTemplateLPTest(BitcoinTestFramework):\n     '''\n \n     def run_test(self):\n-        print \"Warning: this test will take about 70 seconds in the best case. Be patient.\"\n+        print(\"Warning: this test will take about 70 seconds in the best case. Be patient.\")\n         self.nodes[0].generate(10)\n         templat = self.nodes[0].getblocktemplate()\n         longpollid = templat['longpollid']"
      },
      {
        "sha": "690b471406c45a4f417878a2bf73218eb895cf28",
        "filename": "qa/rpc-tests/invalidateblock.py",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d/qa/rpc-tests/invalidateblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d/qa/rpc-tests/invalidateblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/invalidateblock.py?ref=fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d",
        "patch": "@@ -25,46 +25,46 @@ def setup_network(self):\n         self.nodes.append(start_node(2, self.options.tmpdir, [\"-debug\"]))\n         \n     def run_test(self):\n-        print \"Make sure we repopulate setBlockIndexCandidates after InvalidateBlock:\"\n-        print \"Mine 4 blocks on Node 0\"\n+        print(\"Make sure we repopulate setBlockIndexCandidates after InvalidateBlock:\")\n+        print(\"Mine 4 blocks on Node 0\")\n         self.nodes[0].generate(4)\n         assert(self.nodes[0].getblockcount() == 4)\n         besthash = self.nodes[0].getbestblockhash()\n \n-        print \"Mine competing 6 blocks on Node 1\"\n+        print(\"Mine competing 6 blocks on Node 1\")\n         self.nodes[1].generate(6)\n         assert(self.nodes[1].getblockcount() == 6)\n \n-        print \"Connect nodes to force a reorg\"\n+        print(\"Connect nodes to force a reorg\")\n         connect_nodes_bi(self.nodes,0,1)\n         sync_blocks(self.nodes[0:2])\n         assert(self.nodes[0].getblockcount() == 6)\n         badhash = self.nodes[1].getblockhash(2)\n \n-        print \"Invalidate block 2 on node 0 and verify we reorg to node 0's original chain\"\n+        print(\"Invalidate block 2 on node 0 and verify we reorg to node 0's original chain\")\n         self.nodes[0].invalidateblock(badhash)\n         newheight = self.nodes[0].getblockcount()\n         newhash = self.nodes[0].getbestblockhash()\n         if (newheight != 4 or newhash != besthash):\n             raise AssertionError(\"Wrong tip for node0, hash %s, height %d\"%(newhash,newheight))\n \n-        print \"\\nMake sure we won't reorg to a lower work chain:\"\n+        print(\"\\nMake sure we won't reorg to a lower work chain:\")\n         connect_nodes_bi(self.nodes,1,2)\n-        print \"Sync node 2 to node 1 so both have 6 blocks\"\n+        print(\"Sync node 2 to node 1 so both have 6 blocks\")\n         sync_blocks(self.nodes[1:3])\n         assert(self.nodes[2].getblockcount() == 6)\n-        print \"Invalidate block 5 on node 1 so its tip is now at 4\"\n+        print(\"Invalidate block 5 on node 1 so its tip is now at 4\")\n         self.nodes[1].invalidateblock(self.nodes[1].getblockhash(5))\n         assert(self.nodes[1].getblockcount() == 4)\n-        print \"Invalidate block 3 on node 2, so its tip is now 2\"\n+        print(\"Invalidate block 3 on node 2, so its tip is now 2\")\n         self.nodes[2].invalidateblock(self.nodes[2].getblockhash(3))\n         assert(self.nodes[2].getblockcount() == 2)\n-        print \"..and then mine a block\"\n+        print(\"..and then mine a block\")\n         self.nodes[2].generate(1)\n-        print \"Verify all nodes are at the right height\"\n+        print(\"Verify all nodes are at the right height\")\n         time.sleep(5)\n         for i in xrange(3):\n-            print i,self.nodes[i].getblockcount()\n+            print(i,self.nodes[i].getblockcount())\n         assert(self.nodes[2].getblockcount() == 3)\n         assert(self.nodes[0].getblockcount() == 4)\n         node1height = self.nodes[1].getblockcount()"
      },
      {
        "sha": "7de6b78792f95578b7b6093db23da670a8ff3bc0",
        "filename": "qa/rpc-tests/maxblocksinflight.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d/qa/rpc-tests/maxblocksinflight.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d/qa/rpc-tests/maxblocksinflight.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/maxblocksinflight.py?ref=fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d",
        "patch": "@@ -67,9 +67,9 @@ def run(self):\n                             raise AssertionError(\"Error, test failed: block %064x requested more than once\" % key)\n                 if total_requests > MAX_REQUESTS:\n                     raise AssertionError(\"Error, too many blocks (%d) requested\" % total_requests)\n-                print \"Round %d: success (total requests: %d)\" % (count, total_requests)\n+                print(\"Round %d: success (total requests: %d)\" % (count, total_requests))\n         except AssertionError as e:\n-            print \"TEST FAILED: \", e.args\n+            print(\"TEST FAILED: \", e.args)\n \n         self.disconnectOkay = True\n         self.connection.disconnect_node()\n@@ -82,7 +82,7 @@ def add_options(self, parser):\n                           help=\"Binary to test max block requests behavior\")\n \n     def setup_chain(self):\n-        print \"Initializing test directory \"+self.options.tmpdir\n+        print(\"Initializing test directory \"+self.options.tmpdir)\n         initialize_chain_clean(self.options.tmpdir, 1)\n \n     def setup_network(self):"
      },
      {
        "sha": "25aefe2288bd5369f1e617e96a772532454e3110",
        "filename": "qa/rpc-tests/maxuploadtarget.py",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d/qa/rpc-tests/maxuploadtarget.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d/qa/rpc-tests/maxuploadtarget.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/maxuploadtarget.py?ref=fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d",
        "patch": "@@ -194,7 +194,7 @@ def run_test(self):\n             test_nodes[0].send_message(getdata_request)\n         test_nodes[0].wait_for_disconnect()\n         assert_equal(len(self.nodes[0].getpeerinfo()), 2)\n-        print \"Peer 0 disconnected after downloading old block too many times\"\n+        print(\"Peer 0 disconnected after downloading old block too many times\")\n \n         # Requesting the current block on test_nodes[1] should succeed indefinitely,\n         # even when over the max upload target.\n@@ -205,17 +205,17 @@ def run_test(self):\n             test_nodes[1].sync_with_ping()\n             assert_equal(test_nodes[1].block_receive_map[big_new_block], i+1)\n \n-        print \"Peer 1 able to repeatedly download new block\"\n+        print(\"Peer 1 able to repeatedly download new block\")\n \n         # But if test_nodes[1] tries for an old block, it gets disconnected too.\n         getdata_request.inv = [CInv(2, big_old_block)]\n         test_nodes[1].send_message(getdata_request)\n         test_nodes[1].wait_for_disconnect()\n         assert_equal(len(self.nodes[0].getpeerinfo()), 1)\n \n-        print \"Peer 1 disconnected after trying to download old block\"\n+        print(\"Peer 1 disconnected after trying to download old block\")\n \n-        print \"Advancing system time on node to clear counters...\"\n+        print(\"Advancing system time on node to clear counters...\")\n \n         # If we advance the time by 24 hours, then the counters should reset,\n         # and test_nodes[2] should be able to retrieve the old block.\n@@ -225,12 +225,12 @@ def run_test(self):\n         test_nodes[2].sync_with_ping()\n         assert_equal(test_nodes[2].block_receive_map[big_old_block], 1)\n \n-        print \"Peer 2 able to download old block\"\n+        print(\"Peer 2 able to download old block\")\n \n         [c.disconnect_node() for c in connections]\n \n         #stop and start node 0 with 1MB maxuploadtarget, whitelist 127.0.0.1\n-        print \"Restarting nodes with -whitelist=127.0.0.1\"\n+        print(\"Restarting nodes with -whitelist=127.0.0.1\")\n         stop_node(self.nodes[0], 0)\n         self.nodes[0] = start_node(0, self.options.tmpdir, [\"-debug\", \"-whitelist=127.0.0.1\", \"-maxuploadtarget=1\", \"-blockmaxsize=999000\"])\n \n@@ -258,7 +258,7 @@ def run_test(self):\n         test_nodes[1].wait_for_disconnect()\n         assert_equal(len(self.nodes[0].getpeerinfo()), 3) #node is still connected because of the whitelist\n \n-        print \"Peer 1 still connected after trying to download old block (whitelisted)\"\n+        print(\"Peer 1 still connected after trying to download old block (whitelisted)\")\n \n         [c.disconnect_node() for c in connections]\n "
      },
      {
        "sha": "157ef26eaae64d694dbbf05847e1347bd58c15a8",
        "filename": "qa/rpc-tests/mempool_packages.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d/qa/rpc-tests/mempool_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d/qa/rpc-tests/mempool_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/mempool_packages.py?ref=fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d",
        "patch": "@@ -84,7 +84,7 @@ def run_test(self):\n         try:\n             self.chain_transaction(self.nodes[0], txid, vout, value, fee, 1)\n         except JSONRPCException as e:\n-            print \"too-long-ancestor-chain successfully rejected\"\n+            print(\"too-long-ancestor-chain successfully rejected\")\n \n         # Check that prioritising a tx before it's added to the mempool works\n         # First clear the mempool by mining a block.\n@@ -134,9 +134,9 @@ def run_test(self):\n                     mempool = self.nodes[0].getrawmempool(True)\n                     assert_equal(mempool[parent_transaction]['descendantcount'], MAX_DESCENDANTS)\n             except JSONRPCException as e:\n-                print e.error['message']\n+                print(e.error['message'])\n                 assert_equal(i, MAX_DESCENDANTS - 1)\n-                print \"tx that would create too large descendant package successfully rejected\"\n+                print(\"tx that would create too large descendant package successfully rejected\")\n \n         # TODO: check that node1's mempool is as expected\n "
      },
      {
        "sha": "9bff555613cdd6d5ccf32e86e4085a83a519284b",
        "filename": "qa/rpc-tests/merkle_blocks.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d/qa/rpc-tests/merkle_blocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d/qa/rpc-tests/merkle_blocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/merkle_blocks.py?ref=fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d",
        "patch": "@@ -32,7 +32,7 @@ def setup_network(self):\n         self.sync_all()\n \n     def run_test(self):\n-        print \"Mining blocks...\"\n+        print(\"Mining blocks...\")\n         self.nodes[0].generate(105)\n         self.sync_all()\n "
      },
      {
        "sha": "0603f0dc3bf513f7620d3d0bcb57a4157b10d559",
        "filename": "qa/rpc-tests/p2p-acceptblock.py",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d/qa/rpc-tests/p2p-acceptblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d/qa/rpc-tests/p2p-acceptblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-acceptblock.py?ref=fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d",
        "patch": "@@ -161,7 +161,7 @@ def run_test(self):\n         [ x.sync_with_ping() for x in [test_node, white_node] ]\n         assert_equal(self.nodes[0].getblockcount(), 2)\n         assert_equal(self.nodes[1].getblockcount(), 2)\n-        print \"First height 2 block accepted by both nodes\"\n+        print(\"First height 2 block accepted by both nodes\")\n \n         # 3. Send another block that builds on the original tip.\n         blocks_h2f = []  # Blocks at height 2 that fork off the main chain\n@@ -180,7 +180,7 @@ def run_test(self):\n             if x['hash'] == blocks_h2f[1].hash:\n                 assert_equal(x['status'], \"valid-headers\")\n \n-        print \"Second height 2 block accepted only from whitelisted peer\"\n+        print(\"Second height 2 block accepted only from whitelisted peer\")\n \n         # 4. Now send another block that builds on the forking chain.\n         blocks_h3 = []\n@@ -200,13 +200,13 @@ def run_test(self):\n         # But this block should be accepted by node0 since it has more work.\n         try:\n             self.nodes[0].getblock(blocks_h3[0].hash)\n-            print \"Unrequested more-work block accepted from non-whitelisted peer\"\n+            print(\"Unrequested more-work block accepted from non-whitelisted peer\")\n         except:\n             raise AssertionError(\"Unrequested more work block was not processed\")\n \n         # Node1 should have accepted and reorged.\n         assert_equal(self.nodes[1].getblockcount(), 3)\n-        print \"Successfully reorged to length 3 chain from whitelisted peer\"\n+        print(\"Successfully reorged to length 3 chain from whitelisted peer\")\n \n         # 4b. Now mine 288 more blocks and deliver; all should be processed but\n         # the last (height-too-high) on node0.  Node1 should process the tip if\n@@ -233,7 +233,7 @@ def run_test(self):\n                     raise AssertionError(\"Unrequested block too far-ahead should have been ignored\")\n             except:\n                 if x == all_blocks[287]:\n-                    print \"Unrequested block too far-ahead not processed\"\n+                    print(\"Unrequested block too far-ahead not processed\")\n                 else:\n                     raise AssertionError(\"Unrequested block with more work should have been accepted\")\n \n@@ -243,7 +243,7 @@ def run_test(self):\n         try:\n             white_node.sync_with_ping()\n             self.nodes[1].getblock(tips[1].hash)\n-            print \"Unrequested block far ahead of tip accepted from whitelisted peer\"\n+            print(\"Unrequested block far ahead of tip accepted from whitelisted peer\")\n         except:\n             raise AssertionError(\"Unrequested block from whitelisted peer not accepted\")\n \n@@ -259,7 +259,7 @@ def run_test(self):\n         # a getdata request for this block.\n         test_node.sync_with_ping()\n         assert_equal(self.nodes[0].getblockcount(), 2)\n-        print \"Unrequested block that would complete more-work chain was ignored\"\n+        print(\"Unrequested block that would complete more-work chain was ignored\")\n \n         # 6. Try to get node to request the missing block.\n         # Poke the node with an inv for block at height 3 and see if that\n@@ -275,14 +275,14 @@ def run_test(self):\n \n         # Check that the getdata includes the right block\n         assert_equal(getdata.inv[0].hash, blocks_h2f[0].sha256)\n-        print \"Inv at tip triggered getdata for unprocessed block\"\n+        print(\"Inv at tip triggered getdata for unprocessed block\")\n \n         # 7. Send the missing block for the third time (now it is requested)\n         test_node.send_message(msg_block(blocks_h2f[0]))\n \n         test_node.sync_with_ping()\n         assert_equal(self.nodes[0].getblockcount(), 290)\n-        print \"Successfully reorged to longer chain from non-whitelisted peer\"\n+        print(\"Successfully reorged to longer chain from non-whitelisted peer\")\n \n         [ c.disconnect_node() for c in connections ]\n "
      },
      {
        "sha": "e72d65dc7138d6960d131c9445fa0241a818a51d",
        "filename": "qa/rpc-tests/prioritise_transaction.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d/qa/rpc-tests/prioritise_transaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d/qa/rpc-tests/prioritise_transaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/prioritise_transaction.py?ref=fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d",
        "patch": "@@ -61,7 +61,7 @@ def run_test(self):\n         self.nodes[0].generate(1)\n \n         mempool = self.nodes[0].getrawmempool()\n-        print \"Assert that prioritised transaction was mined\"\n+        print(\"Assert that prioritised transaction was mined\")\n         assert(txids[0][0] not in mempool)\n         assert(txids[0][1] in mempool)\n \n@@ -93,7 +93,7 @@ def run_test(self):\n         # High fee transaction should not have been mined, but other high fee rate\n         # transactions should have been.\n         mempool = self.nodes[0].getrawmempool()\n-        print \"Assert that de-prioritised transaction is still in mempool\"\n+        print(\"Assert that de-prioritised transaction is still in mempool\")\n         assert(high_fee_tx in mempool)\n         for x in txids[2]:\n             if (x != high_fee_tx):\n@@ -135,7 +135,7 @@ def run_test(self):\n         # accepted.\n         self.nodes[0].prioritisetransaction(tx2_id, 0, int(self.relayfee*COIN))\n \n-        print \"Assert that prioritised free transaction is accepted to mempool\"\n+        print(\"Assert that prioritised free transaction is accepted to mempool\")\n         assert_equal(self.nodes[0].sendrawtransaction(tx2_hex), tx2_id)\n         assert(tx2_id in self.nodes[0].getrawmempool())\n "
      },
      {
        "sha": "12520be5a2c0199a74ea1999be583b289d5550ae",
        "filename": "qa/rpc-tests/pruning.py",
        "status": "modified",
        "additions": 28,
        "deletions": 26,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d/qa/rpc-tests/pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d/qa/rpc-tests/pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/pruning.py?ref=fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d",
        "patch": "@@ -11,6 +11,8 @@\n # This test takes 30 mins or more (up to 2 hours)\n # ********\n \n+from __future__ import print_function\n+\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n \n@@ -65,9 +67,9 @@ def create_big_chain(self):\n     def test_height_min(self):\n         if not os.path.isfile(self.prunedir+\"blk00000.dat\"):\n             raise AssertionError(\"blk00000.dat is missing, pruning too early\")\n-        print \"Success\"\n-        print \"Though we're already using more than 550MB, current usage:\", calc_usage(self.prunedir)\n-        print \"Mining 25 more blocks should cause the first block file to be pruned\"\n+        print(\"Success\")\n+        print(\"Though we're already using more than 550MB, current usage:\", calc_usage(self.prunedir))\n+        print(\"Mining 25 more blocks should cause the first block file to be pruned\")\n         # Pruning doesn't run until we're allocating another chunk, 20 full blocks past the height cutoff will ensure this\n         for i in xrange(25):\n             self.mine_full_block(self.nodes[0],self.address[0])\n@@ -78,15 +80,15 @@ def test_height_min(self):\n             if time.time() - waitstart > 10:\n                 raise AssertionError(\"blk00000.dat not pruned when it should be\")\n \n-        print \"Success\"\n+        print(\"Success\")\n         usage = calc_usage(self.prunedir)\n-        print \"Usage should be below target:\", usage\n+        print(\"Usage should be below target:\", usage)\n         if (usage > 550):\n             raise AssertionError(\"Pruning target not being met\")\n \n     def create_chain_with_staleblocks(self):\n         # Create stale blocks in manageable sized chunks\n-        print \"Mine 24 (stale) blocks on Node 1, followed by 25 (main chain) block reorg from Node 0, for 12 rounds\"\n+        print(\"Mine 24 (stale) blocks on Node 1, followed by 25 (main chain) block reorg from Node 0, for 12 rounds\")\n \n         for j in xrange(12):\n             # Disconnect node 0 so it can mine a longer reorg chain without knowing about node 1's soon-to-be-stale chain\n@@ -112,7 +114,7 @@ def create_chain_with_staleblocks(self):\n             connect_nodes(self.nodes[2], 0)\n             sync_blocks(self.nodes[0:3])\n \n-        print \"Usage can be over target because of high stale rate:\", calc_usage(self.prunedir)\n+        print(\"Usage can be over target because of high stale rate:\", calc_usage(self.prunedir))\n \n     def reorg_test(self):\n         # Node 1 will mine a 300 block chain starting 287 blocks back from Node 0 and Node 2's tip\n@@ -123,11 +125,11 @@ def reorg_test(self):\n         self.nodes[1]=start_node(1, self.options.tmpdir, [\"-debug\",\"-maxreceivebuffer=20000\",\"-blockmaxsize=5000\", \"-checkblocks=5\", \"-disablesafemode\"], timewait=900)\n \n         height = self.nodes[1].getblockcount()\n-        print \"Current block height:\", height\n+        print(\"Current block height:\", height)\n \n         invalidheight = height-287\n         badhash = self.nodes[1].getblockhash(invalidheight)\n-        print \"Invalidating block at height:\",invalidheight,badhash\n+        print(\"Invalidating block at height:\",invalidheight,badhash)\n         self.nodes[1].invalidateblock(badhash)\n \n         # We've now switched to our previously mined-24 block fork on node 1, but thats not what we want\n@@ -139,29 +141,29 @@ def reorg_test(self):\n             curhash = self.nodes[1].getblockhash(invalidheight - 1)\n \n         assert(self.nodes[1].getblockcount() == invalidheight - 1)\n-        print \"New best height\", self.nodes[1].getblockcount()\n+        print(\"New best height\", self.nodes[1].getblockcount())\n \n         # Reboot node1 to clear those giant tx's from mempool\n         stop_node(self.nodes[1],1)\n         self.nodes[1]=start_node(1, self.options.tmpdir, [\"-debug\",\"-maxreceivebuffer=20000\",\"-blockmaxsize=5000\", \"-checkblocks=5\", \"-disablesafemode\"], timewait=900)\n \n-        print \"Generating new longer chain of 300 more blocks\"\n+        print(\"Generating new longer chain of 300 more blocks\")\n         self.nodes[1].generate(300)\n \n-        print \"Reconnect nodes\"\n+        print(\"Reconnect nodes\")\n         connect_nodes(self.nodes[0], 1)\n         connect_nodes(self.nodes[2], 1)\n         sync_blocks(self.nodes[0:3])\n \n-        print \"Verify height on node 2:\",self.nodes[2].getblockcount()\n-        print \"Usage possibly still high bc of stale blocks in block files:\", calc_usage(self.prunedir)\n+        print(\"Verify height on node 2:\",self.nodes[2].getblockcount())\n+        print(\"Usage possibly still high bc of stale blocks in block files:\", calc_usage(self.prunedir))\n \n-        print \"Mine 220 more blocks so we have requisite history (some blocks will be big and cause pruning of previous chain)\"\n+        print(\"Mine 220 more blocks so we have requisite history (some blocks will be big and cause pruning of previous chain)\")\n         self.nodes[0].generate(220) #node 0 has many large tx's in its mempool from the disconnects\n         sync_blocks(self.nodes[0:3])\n \n         usage = calc_usage(self.prunedir)\n-        print \"Usage should be below target:\", usage\n+        print(\"Usage should be below target:\", usage)\n         if (usage > 550):\n             raise AssertionError(\"Pruning target not being met\")\n \n@@ -173,7 +175,7 @@ def reorg_back(self):\n             self.nodes[2].getblock(self.forkhash)\n             raise AssertionError(\"Old block wasn't pruned so can't test redownload\")\n         except JSONRPCException as e:\n-            print \"Will need to redownload block\",self.forkheight\n+            print(\"Will need to redownload block\",self.forkheight)\n \n         # Verify that we have enough history to reorg back to the fork point\n         # Although this is more than 288 blocks, because this chain was written more recently\n@@ -197,14 +199,14 @@ def reorg_back(self):\n         # At this point node 2 is within 288 blocks of the fork point so it will preserve its ability to reorg\n         if self.nodes[2].getblockcount() < self.mainchainheight:\n             blocks_to_mine = first_reorg_height + 1 - self.mainchainheight\n-            print \"Rewind node 0 to prev main chain to mine longer chain to trigger redownload. Blocks needed:\", blocks_to_mine\n+            print(\"Rewind node 0 to prev main chain to mine longer chain to trigger redownload. Blocks needed:\", blocks_to_mine)\n             self.nodes[0].invalidateblock(curchainhash)\n             assert(self.nodes[0].getblockcount() == self.mainchainheight)\n             assert(self.nodes[0].getbestblockhash() == self.mainchainhash2)\n             goalbesthash = self.nodes[0].generate(blocks_to_mine)[-1]\n             goalbestheight = first_reorg_height + 1\n \n-        print \"Verify node 2 reorged back to the main chain, some blocks of which it had to redownload\"\n+        print(\"Verify node 2 reorged back to the main chain, some blocks of which it had to redownload\")\n         waitstart = time.time()\n         while self.nodes[2].getblockcount() < goalbestheight:\n             time.sleep(0.1)\n@@ -241,8 +243,8 @@ def mine_full_block(self, node, address):\n \n \n     def run_test(self):\n-        print \"Warning! This test requires 4GB of disk space and takes over 30 mins (up to 2 hours)\"\n-        print \"Mining a big blockchain of 995 blocks\"\n+        print(\"Warning! This test requires 4GB of disk space and takes over 30 mins (up to 2 hours)\")\n+        print(\"Mining a big blockchain of 995 blocks\")\n         self.create_big_chain()\n         # Chain diagram key:\n         # *   blocks on main chain\n@@ -253,12 +255,12 @@ def run_test(self):\n         # Start by mining a simple chain that all nodes have\n         # N0=N1=N2 **...*(995)\n \n-        print \"Check that we haven't started pruning yet because we're below PruneAfterHeight\"\n+        print(\"Check that we haven't started pruning yet because we're below PruneAfterHeight\")\n         self.test_height_min()\n         # Extend this chain past the PruneAfterHeight\n         # N0=N1=N2 **...*(1020)\n \n-        print \"Check that we'll exceed disk space target if we have a very high stale block rate\"\n+        print(\"Check that we'll exceed disk space target if we have a very high stale block rate\")\n         self.create_chain_with_staleblocks()\n         # Disconnect N0\n         # And mine a 24 block chain on N1 and a separate 25 block chain on N0\n@@ -282,7 +284,7 @@ def run_test(self):\n         self.mainchainheight = self.nodes[2].getblockcount()   #1320\n         self.mainchainhash2 = self.nodes[2].getblockhash(self.mainchainheight)\n \n-        print \"Check that we can survive a 288 block reorg still\"\n+        print(\"Check that we can survive a 288 block reorg still\")\n         (self.forkheight,self.forkhash) = self.reorg_test() #(1033, )\n         # Now create a 288 block reorg by mining a longer chain on N1\n         # First disconnect N1\n@@ -315,7 +317,7 @@ def run_test(self):\n         #                                 \\\n         #                                  *...**(1320)\n \n-        print \"Test that we can rerequest a block we previously pruned if needed for a reorg\"\n+        print(\"Test that we can rerequest a block we previously pruned if needed for a reorg\")\n         self.reorg_back()\n         # Verify that N2 still has block 1033 on current chain (@), but not on main chain (*)\n         # Invalidate 1033 on current chain (@) on N2 and we should be able to reorg to\n@@ -335,7 +337,7 @@ def run_test(self):\n         #\n         # N1 doesn't change because 1033 on main chain (*) is invalid\n \n-        print \"Done\"\n+        print(\"Done\")\n \n if __name__ == '__main__':\n     PruneTest().main()"
      },
      {
        "sha": "6664feb6adce4baa31fc4863f135273ea4e27300",
        "filename": "qa/rpc-tests/reindex.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d/qa/rpc-tests/reindex.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d/qa/rpc-tests/reindex.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/reindex.py?ref=fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d",
        "patch": "@@ -26,7 +26,7 @@ def run_test(self):\n         wait_bitcoinds()\n         self.nodes[0]=start_node(0, self.options.tmpdir, [\"-debug\", \"-reindex\", \"-checkblockindex=1\"])\n         assert_equal(self.nodes[0].getblockcount(), 3)\n-        print \"Success\"\n+        print(\"Success\")\n \n if __name__ == '__main__':\n     ReindexTest().main()"
      },
      {
        "sha": "f7e1266cef1950dbe26dc1b3d3bad46f08d830f3",
        "filename": "qa/rpc-tests/replace-by-fee.py",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d/qa/rpc-tests/replace-by-fee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d/qa/rpc-tests/replace-by-fee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/replace-by-fee.py?ref=fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d",
        "patch": "@@ -88,34 +88,34 @@ def setup_network(self):\n     def run_test(self):\n         make_utxo(self.nodes[0], 1*COIN)\n \n-        print \"Running test simple doublespend...\"\n+        print(\"Running test simple doublespend...\")\n         self.test_simple_doublespend()\n \n-        print \"Running test doublespend chain...\"\n+        print(\"Running test doublespend chain...\")\n         self.test_doublespend_chain()\n \n-        print \"Running test doublespend tree...\"\n+        print(\"Running test doublespend tree...\")\n         self.test_doublespend_tree()\n \n-        print \"Running test replacement feeperkb...\"\n+        print(\"Running test replacement feeperkb...\")\n         self.test_replacement_feeperkb()\n \n-        print \"Running test spends of conflicting outputs...\"\n+        print(\"Running test spends of conflicting outputs...\")\n         self.test_spends_of_conflicting_outputs()\n \n-        print \"Running test new unconfirmed inputs...\"\n+        print(\"Running test new unconfirmed inputs...\")\n         self.test_new_unconfirmed_inputs()\n \n-        print \"Running test too many replacements...\"\n+        print(\"Running test too many replacements...\")\n         self.test_too_many_replacements()\n \n-        print \"Running test opt-in...\"\n+        print(\"Running test opt-in...\")\n         self.test_opt_in()\n \n-        print \"Running test prioritised transactions...\"\n+        print(\"Running test prioritised transactions...\")\n         self.test_prioritised_transactions()\n \n-        print \"Passed\\n\"\n+        print(\"Passed\\n\")\n \n     def test_simple_doublespend(self):\n         \"\"\"Simple doublespend\"\"\"\n@@ -465,7 +465,7 @@ def test_opt_in(self):\n         except JSONRPCException as exp:\n             assert_equal(exp.error['code'], -26)\n         else:\n-            print tx1b_txid\n+            print(tx1b_txid)\n             assert(False)\n \n         tx1_outpoint = make_utxo(self.nodes[0], 1.1*COIN)"
      },
      {
        "sha": "814da5526f0c595d7f1adbd5a731713cbad7d1e3",
        "filename": "qa/rpc-tests/rest.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d/qa/rpc-tests/rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d/qa/rpc-tests/rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rest.py?ref=fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d",
        "patch": "@@ -67,7 +67,7 @@ def setup_network(self, split=False):\n \n     def run_test(self):\n         url = urlparse.urlparse(self.nodes[0].url)\n-        print \"Mining blocks...\"\n+        print(\"Mining blocks...\")\n \n         self.nodes[0].generate(1)\n         self.sync_all()"
      },
      {
        "sha": "d1958a5e344eea503095b765deac18dd6db4b065",
        "filename": "qa/rpc-tests/sendheaders.py",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d/qa/rpc-tests/sendheaders.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d/qa/rpc-tests/sendheaders.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/sendheaders.py?ref=fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d",
        "patch": "@@ -266,7 +266,7 @@ def run_test(self):\n \n         # PART 1\n         # 1. Mine a block; expect inv announcements each time\n-        print \"Part 1: headers don't start before sendheaders message...\"\n+        print(\"Part 1: headers don't start before sendheaders message...\")\n         for i in xrange(4):\n             old_tip = tip\n             tip = self.mine_blocks(1)\n@@ -297,8 +297,8 @@ def run_test(self):\n                 inv_node.clear_last_announcement()\n                 test_node.clear_last_announcement()\n \n-        print \"Part 1: success!\"\n-        print \"Part 2: announce blocks with headers after sendheaders message...\"\n+        print(\"Part 1: success!\")\n+        print(\"Part 2: announce blocks with headers after sendheaders message...\")\n         # PART 2\n         # 2. Send a sendheaders message and test that headers announcements\n         # commence and keep working.\n@@ -360,9 +360,9 @@ def run_test(self):\n                 height += 1\n                 block_time += 1\n \n-        print \"Part 2: success!\"\n+        print(\"Part 2: success!\")\n \n-        print \"Part 3: headers announcements can stop after large reorg, and resume after headers/inv from peer...\"\n+        print(\"Part 3: headers announcements can stop after large reorg, and resume after headers/inv from peer...\")\n \n         # PART 3.  Headers announcements can stop after large reorg, and resume after\n         # getheaders or inv from peer.\n@@ -424,9 +424,9 @@ def run_test(self):\n             assert_equal(inv_node.check_last_announcement(inv=[tip]), True)\n             assert_equal(test_node.check_last_announcement(headers=[tip]), True)\n \n-        print \"Part 3: success!\"\n+        print(\"Part 3: success!\")\n \n-        print \"Part 4: Testing direct fetch behavior...\"\n+        print(\"Part 4: Testing direct fetch behavior...\")\n         tip = self.mine_blocks(1)\n         height = self.nodes[0].getblockcount() + 1\n         last_time = self.nodes[0].getblock(self.nodes[0].getbestblockhash())['time']\n@@ -507,7 +507,7 @@ def run_test(self):\n         with mininode_lock:\n             assert_equal(test_node.last_getdata, None)\n \n-        print \"Part 4: success!\"\n+        print(\"Part 4: success!\")\n \n         # Finally, check that the inv node never received a getdata request,\n         # throughout the test"
      },
      {
        "sha": "b7d4cdce7ae1a4e6f871c1d0d774d7c2a0c9b90f",
        "filename": "qa/rpc-tests/test_framework/blockstore.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d/qa/rpc-tests/test_framework/blockstore.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d/qa/rpc-tests/test_framework/blockstore.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/blockstore.py?ref=fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d",
        "patch": "@@ -66,7 +66,7 @@ def add_block(self, block):\n         try:\n             self.blockDB[repr(block.sha256)] = bytes(block.serialize())\n         except TypeError as e:\n-            print \"Unexpected error: \", sys.exc_info()[0], e.args\n+            print(\"Unexpected error: \", sys.exc_info()[0], e.args)\n         self.currentBlock = block.sha256\n         self.headers_map[block.sha256] = CBlockHeader(block)\n \n@@ -126,7 +126,7 @@ def add_transaction(self, tx):\n         try:\n             self.txDB[repr(tx.sha256)] = bytes(tx.serialize())\n         except TypeError as e:\n-            print \"Unexpected error: \", sys.exc_info()[0], e.args\n+            print(\"Unexpected error: \", sys.exc_info()[0], e.args)\n \n     def get_transactions(self, inv):\n         responses = []"
      },
      {
        "sha": "19fecd16c9160377c082f51a1cf246d58b55daba",
        "filename": "qa/rpc-tests/test_framework/comptool.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d/qa/rpc-tests/test_framework/comptool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d/qa/rpc-tests/test_framework/comptool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/comptool.py?ref=fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d",
        "patch": "@@ -269,10 +269,10 @@ def check_results(self, blockhash, outcome):\n                     if c.cb.bestblockhash == blockhash:\n                         return False\n                     if blockhash not in c.cb.block_reject_map:\n-                        print 'Block not in reject map: %064x' % (blockhash)\n+                        print('Block not in reject map: %064x' % (blockhash))\n                         return False\n                     if not outcome.match(c.cb.block_reject_map[blockhash]):\n-                        print 'Block rejected with %s instead of expected %s: %064x' % (c.cb.block_reject_map[blockhash], outcome, blockhash)\n+                        print('Block rejected with %s instead of expected %s: %064x' % (c.cb.block_reject_map[blockhash], outcome, blockhash))\n                         return False\n                 elif ((c.cb.bestblockhash == blockhash) != outcome):\n                     # print c.cb.bestblockhash, blockhash, outcome\n@@ -297,10 +297,10 @@ def check_mempool(self, txhash, outcome):\n                     if txhash in c.cb.lastInv:\n                         return False\n                     if txhash not in c.cb.tx_reject_map:\n-                        print 'Tx not in reject map: %064x' % (txhash)\n+                        print('Tx not in reject map: %064x' % (txhash))\n                         return False\n                     if not outcome.match(c.cb.tx_reject_map[txhash]):\n-                        print 'Tx rejected with %s instead of expected %s: %064x' % (c.cb.tx_reject_map[txhash], outcome, txhash)\n+                        print('Tx rejected with %s instead of expected %s: %064x' % (c.cb.tx_reject_map[txhash], outcome, txhash))\n                         return False\n                 elif ((txhash in c.cb.lastInv) != outcome):\n                     # print c.rpc.getrawmempool(), c.cb.lastInv\n@@ -403,7 +403,7 @@ def run(self):\n                 if (not self.check_mempool(tx.sha256, tx_outcome)):\n                     raise AssertionError(\"Mempool test failed at test %d\" % test_number)\n \n-            print \"Test %d: PASS\" % test_number, [ c.rpc.getblockcount() for c in self.connections ]\n+            print(\"Test %d: PASS\" % test_number, [ c.rpc.getblockcount() for c in self.connections ])\n             test_number += 1\n \n         [ c.disconnect_node() for c in self.connections ]"
      },
      {
        "sha": "b73f8d9055c4bd1e519cc5f0d75756db97fdfca8",
        "filename": "qa/rpc-tests/test_framework/mininode.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d/qa/rpc-tests/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d/qa/rpc-tests/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/mininode.py?ref=fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d",
        "patch": "@@ -1046,8 +1046,8 @@ def deliver(self, conn, message):\n             try:\n                 getattr(self, 'on_' + message.command)(conn, message)\n             except:\n-                print \"ERROR delivering %s (%s)\" % (repr(message),\n-                                                    sys.exc_info()[0])\n+                print(\"ERROR delivering %s (%s)\" % (repr(message),\n+                                                    sys.exc_info()[0]))\n \n     def on_version(self, conn, message):\n         if message.nVersion >= 209:\n@@ -1137,8 +1137,8 @@ def __init__(self, dstaddr, dstport, rpc, callback, net=\"regtest\", services=1):\n         vt.addrFrom.ip = \"0.0.0.0\"\n         vt.addrFrom.port = 0\n         self.send_message(vt, True)\n-        print 'MiniNode: Connecting to Bitcoin Node IP # ' + dstaddr + ':' \\\n-            + str(dstport)\n+        print('MiniNode: Connecting to Bitcoin Node IP # ' + dstaddr + ':' \\\n+            + str(dstport))\n \n         try:\n             self.connect((dstaddr, dstport))"
      },
      {
        "sha": "e7ff3c8b37b3ef7fe55f636a2401e7af306933c0",
        "filename": "qa/rpc-tests/test_framework/test_framework.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d/qa/rpc-tests/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d/qa/rpc-tests/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/test_framework.py?ref=fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d",
        "patch": "@@ -186,7 +186,7 @@ def add_options(self, parser):\n                           help=\"bitcoind binary to use for reference nodes (if any)\")\n \n     def setup_chain(self):\n-        print \"Initializing test directory \"+self.options.tmpdir\n+        print(\"Initializing test directory \"+self.options.tmpdir)\n         initialize_chain_clean(self.options.tmpdir, self.num_nodes)\n \n     def setup_network(self):"
      },
      {
        "sha": "035df3d3c7c067a1c0ba7b928d1d8c2702174181",
        "filename": "qa/rpc-tests/test_framework/util.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d/qa/rpc-tests/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d/qa/rpc-tests/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/util.py?ref=fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d",
        "patch": "@@ -156,11 +156,11 @@ def initialize_chain(test_dir):\n                 args.append(\"-connect=127.0.0.1:\"+str(p2p_port(0)))\n             bitcoind_processes[i] = subprocess.Popen(args)\n             if os.getenv(\"PYTHON_DEBUG\", \"\"):\n-                print \"initialize_chain: bitcoind started, calling bitcoin-cli -rpcwait getblockcount\"\n+                print(\"initialize_chain: bitcoind started, calling bitcoin-cli -rpcwait getblockcount\")\n             subprocess.check_call([ os.getenv(\"BITCOINCLI\", \"bitcoin-cli\"), \"-datadir=\"+datadir,\n                                     \"-rpcwait\", \"getblockcount\"], stdout=devnull)\n             if os.getenv(\"PYTHON_DEBUG\", \"\"):\n-                print \"initialize_chain: bitcoin-cli -rpcwait getblockcount completed\"\n+                print(\"initialize_chain: bitcoin-cli -rpcwait getblockcount completed\")\n         devnull.close()\n \n         rpcs = []\n@@ -245,12 +245,12 @@ def start_node(i, dirname, extra_args=None, rpchost=None, timewait=None, binary=\n     bitcoind_processes[i] = subprocess.Popen(args)\n     devnull = open(os.devnull, \"w\")\n     if os.getenv(\"PYTHON_DEBUG\", \"\"):\n-        print \"start_node: bitcoind started, calling bitcoin-cli -rpcwait getblockcount\"\n+        print(\"start_node: bitcoind started, calling bitcoin-cli -rpcwait getblockcount\")\n     subprocess.check_call([ os.getenv(\"BITCOINCLI\", \"bitcoin-cli\"), \"-datadir=\"+datadir] +\n                           _rpchost_to_args(rpchost)  +\n                           [\"-rpcwait\", \"getblockcount\"], stdout=devnull)\n     if os.getenv(\"PYTHON_DEBUG\", \"\"):\n-        print \"start_node: calling bitcoin-cli -rpcwait getblockcount returned\"\n+        print(\"start_node: calling bitcoin-cli -rpcwait getblockcount returned\")\n     devnull.close()\n     url = \"http://rt:rt@%s:%d\" % (rpchost or '127.0.0.1', rpc_port(i))\n "
      },
      {
        "sha": "31ea34c8b2c18e8bcdc185f4a248ba187f272083",
        "filename": "qa/rpc-tests/wallet.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d/qa/rpc-tests/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d/qa/rpc-tests/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet.py?ref=fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d",
        "patch": "@@ -32,7 +32,7 @@ def setup_network(self, split=False):\n         self.sync_all()\n \n     def run_test (self):\n-        print \"Mining blocks...\"\n+        print(\"Mining blocks...\")\n \n         self.nodes[0].generate(1)\n \n@@ -276,7 +276,7 @@ def run_test (self):\n             '-salvagewallet',\n         ]\n         for m in maintenance:\n-            print \"check \" + m\n+            print(\"check \" + m)\n             stop_nodes(self.nodes)\n             wait_bitcoinds()\n             self.nodes = start_nodes(3, self.options.tmpdir, [[m]] * 3)"
      },
      {
        "sha": "10c8f508f689384ad3c4d6bd2bf648acd0bced22",
        "filename": "qa/rpc-tests/zapwallettxes.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d/qa/rpc-tests/zapwallettxes.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d/qa/rpc-tests/zapwallettxes.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/zapwallettxes.py?ref=fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d",
        "patch": "@@ -22,7 +22,7 @@ def setup_network(self, split=False):\n         self.sync_all()\n \n     def run_test (self):\n-        print \"Mining blocks...\"\n+        print(\"Mining blocks...\")\n         self.nodes[0].generate(1)\n         self.sync_all()\n         self.nodes[1].generate(101)"
      },
      {
        "sha": "8937f0a3bd508b466e0af2cf040de8a211796307",
        "filename": "qa/rpc-tests/zmq_test.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d/qa/rpc-tests/zmq_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d/qa/rpc-tests/zmq_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/zmq_test.py?ref=fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d",
        "patch": "@@ -44,7 +44,7 @@ def run_test(self):\n         genhashes = self.nodes[0].generate(1)\n         self.sync_all()\n \n-        print \"listen...\"\n+        print(\"listen...\")\n         msg = self.zmqSubSocket.recv_multipart()\n         topic = str(msg[0])\n         body = msg[1]"
      }
    ]
  },
  {
    "sha": "dddd401168ae23986f87d65260e527f393b8297e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZGRkNDAxMTY4YWUyMzk4NmY4N2Q2NTI2MGU1MjdmMzkzYjgyOTdl",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-03-20T17:12:15Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-03-20T19:09:52Z"
      },
      "message": "[qa] rpc-tests: Properly use integer/float division",
      "tree": {
        "sha": "cd9b1248cc71aa8210527e5e892d3d6e680b0887",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cd9b1248cc71aa8210527e5e892d3d6e680b0887"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dddd401168ae23986f87d65260e527f393b8297e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dddd401168ae23986f87d65260e527f393b8297e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dddd401168ae23986f87d65260e527f393b8297e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dddd401168ae23986f87d65260e527f393b8297e/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa52a6e50c0bfdcaf5f3a07b1e83c7d47f38153d"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 8,
      "deletions": 8
    },
    "files": [
      {
        "sha": "1f776409e5971a6e27eb80a36e0286643868c309",
        "filename": "qa/rpc-tests/fundrawtransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dddd401168ae23986f87d65260e527f393b8297e/qa/rpc-tests/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dddd401168ae23986f87d65260e527f393b8297e/qa/rpc-tests/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/fundrawtransaction.py?ref=dddd401168ae23986f87d65260e527f393b8297e",
        "patch": "@@ -48,7 +48,7 @@ def run_test(self):\n \n         watchonly_address = self.nodes[0].getnewaddress()\n         watchonly_pubkey = self.nodes[0].validateaddress(watchonly_address)[\"pubkey\"]\n-        watchonly_amount = 200\n+        watchonly_amount = Decimal(200)\n         self.nodes[3].importpubkey(watchonly_pubkey, \"\", True)\n         watchonly_txid = self.nodes[0].sendtoaddress(watchonly_address, watchonly_amount)\n         self.nodes[0].sendtoaddress(self.nodes[3].getnewaddress(), watchonly_amount / 10)"
      },
      {
        "sha": "957f875a9ce764d33f27edd3116fcd0f561759d0",
        "filename": "qa/rpc-tests/maxuploadtarget.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dddd401168ae23986f87d65260e527f393b8297e/qa/rpc-tests/maxuploadtarget.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dddd401168ae23986f87d65260e527f393b8297e/qa/rpc-tests/maxuploadtarget.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/maxuploadtarget.py?ref=dddd401168ae23986f87d65260e527f393b8297e",
        "patch": "@@ -178,7 +178,7 @@ def run_test(self):\n         max_bytes_per_day = 200*1024*1024\n         daily_buffer = 144 * MAX_BLOCK_SIZE\n         max_bytes_available = max_bytes_per_day - daily_buffer\n-        success_count = max_bytes_available / old_block_size\n+        success_count = max_bytes_available // old_block_size\n \n         # 144MB will be reserved for relaying new blocks, so expect this to\n         # succeed for ~70 tries."
      },
      {
        "sha": "131350c98ddf04626d85de8414661b8837c40849",
        "filename": "qa/rpc-tests/p2p-fullblocktest.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dddd401168ae23986f87d65260e527f393b8297e/qa/rpc-tests/p2p-fullblocktest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dddd401168ae23986f87d65260e527f393b8297e/qa/rpc-tests/p2p-fullblocktest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-fullblocktest.py?ref=dddd401168ae23986f87d65260e527f393b8297e",
        "patch": "@@ -269,15 +269,15 @@ def update_block(block_number, new_transactions):\n         #                      \\-> b3 (1) -> b4 (2)\n         \n         # Test that a block with a lot of checksigs is okay\n-        lots_of_checksigs = CScript([OP_CHECKSIG] * (1000000 / 50 - 1))\n+        lots_of_checksigs = CScript([OP_CHECKSIG] * (1000000 // 50 - 1))\n         tip(13)\n         block(15, spend=out5, script=lots_of_checksigs)\n         yield accepted()\n \n \n         # Test that a block with too many checksigs is rejected\n         out6 = get_spendable_output()\n-        too_many_checksigs = CScript([OP_CHECKSIG] * (1000000 / 50))\n+        too_many_checksigs = CScript([OP_CHECKSIG] * (1000000 // 50))\n         block(16, spend=out6, script=too_many_checksigs)\n         yield rejected(RejectResult(16, 'bad-blk-sigops'))\n "
      },
      {
        "sha": "f06f929442d6b8d94db9fe793ed4874f0b38ae6e",
        "filename": "qa/rpc-tests/pruning.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dddd401168ae23986f87d65260e527f393b8297e/qa/rpc-tests/pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dddd401168ae23986f87d65260e527f393b8297e/qa/rpc-tests/pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/pruning.py?ref=dddd401168ae23986f87d65260e527f393b8297e",
        "patch": "@@ -17,7 +17,7 @@\n from test_framework.util import *\n \n def calc_usage(blockdir):\n-    return sum(os.path.getsize(blockdir+f) for f in os.listdir(blockdir) if os.path.isfile(blockdir+f))/(1024*1024)\n+    return sum(os.path.getsize(blockdir+f) for f in os.listdir(blockdir) if os.path.isfile(blockdir+f)) / (1024. * 1024.)\n \n class PruneTest(BitcoinTestFramework):\n \n@@ -58,7 +58,7 @@ def create_big_chain(self):\n         self.nodes[1].generate(200)\n         sync_blocks(self.nodes[0:2])\n         self.nodes[0].generate(150)\n-        # Then mine enough full blocks to create more than 550MB of data\n+        # Then mine enough full blocks to create more than 550MiB of data\n         for i in xrange(645):\n             self.mine_full_block(self.nodes[0], self.address[0])\n \n@@ -68,7 +68,7 @@ def test_height_min(self):\n         if not os.path.isfile(self.prunedir+\"blk00000.dat\"):\n             raise AssertionError(\"blk00000.dat is missing, pruning too early\")\n         print(\"Success\")\n-        print(\"Though we're already using more than 550MB, current usage:\", calc_usage(self.prunedir))\n+        print(\"Though we're already using more than 550MiB, current usage:\", calc_usage(self.prunedir))\n         print(\"Mining 25 more blocks should cause the first block file to be pruned\")\n         # Pruning doesn't run until we're allocating another chunk, 20 full blocks past the height cutoff will ensure this\n         for i in xrange(25):"
      },
      {
        "sha": "4e4c81d3971997f1bc0d77228b1d638c3d4e8a23",
        "filename": "qa/rpc-tests/test_framework/netutil.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dddd401168ae23986f87d65260e527f393b8297e/qa/rpc-tests/test_framework/netutil.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dddd401168ae23986f87d65260e527f393b8297e/qa/rpc-tests/test_framework/netutil.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/netutil.py?ref=dddd401168ae23986f87d65260e527f393b8297e",
        "patch": "@@ -45,7 +45,7 @@ def _convert_ip_port(array):\n     # convert host from mangled-per-four-bytes form as used by kernel\n     host = binascii.unhexlify(host)\n     host_out = ''\n-    for x in range(0, len(host)/4):\n+    for x in range(0, len(host) // 4):\n         (val,) = struct.unpack('=I', host[x*4:(x+1)*4])\n         host_out += '%08x' % val\n "
      }
    ]
  },
  {
    "sha": "fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYThlMmNkYzk1ZmZjMmI3YTY2YTYxODc1NWZhYjI1MmFlNWQ2NWNm",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-03-21T11:38:56Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-03-21T14:33:51Z"
      },
      "message": "[qa] Use division and print from __future__",
      "tree": {
        "sha": "f5d33191be465a8e9c4fa9c176a7bc7f886fcf83",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f5d33191be465a8e9c4fa9c176a7bc7f886fcf83"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dddd401168ae23986f87d65260e527f393b8297e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dddd401168ae23986f87d65260e527f393b8297e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dddd401168ae23986f87d65260e527f393b8297e"
      }
    ],
    "stats": {
      "total": 255,
      "additions": 180,
      "deletions": 75
    },
    "files": [
      {
        "sha": "ee475e6e2df8feb1fed52f3bb994ae6cf0cc0070",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf",
        "patch": "@@ -1,8 +1,10 @@\n #!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+from __future__ import division,print_function\n+\n \"\"\"\n Run Regression Test Suite\n "
      },
      {
        "sha": "c65ce692073f5fd2d8b3d5a8ddceb9ab54439bf9",
        "filename": "qa/rpc-tests/abandonconflict.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/abandonconflict.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/abandonconflict.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/abandonconflict.py?ref=fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf",
        "patch": "@@ -1,8 +1,10 @@\n #!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+from __future__ import division,print_function\n+\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *"
      },
      {
        "sha": "adb6c09a33d1c221e0ee309ae93c4496cd92fb14",
        "filename": "qa/rpc-tests/bip65-cltv-p2p.py",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/bip65-cltv-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/bip65-cltv-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip65-cltv-p2p.py?ref=fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf",
        "patch": "@@ -1,8 +1,9 @@\n #!/usr/bin/env python2\n-# Copyright (c) 2015 The Bitcoin Core developers\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT/X11 software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-#\n+\n+from __future__ import division,print_function\n \n from test_framework.test_framework import ComparisonTestFramework\n from test_framework.util import *"
      },
      {
        "sha": "99943305a5d297ce01f19ca860bfef30507e8616",
        "filename": "qa/rpc-tests/bip65-cltv.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/bip65-cltv.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/bip65-cltv.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip65-cltv.py?ref=fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf",
        "patch": "@@ -1,8 +1,10 @@\n #!/usr/bin/env python2\n-# Copyright (c) 2015 The Bitcoin Core developers\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+from __future__ import division,print_function\n+\n #\n # Test the CHECKLOCKTIMEVERIFY (BIP65) soft-fork logic\n #"
      },
      {
        "sha": "19b414087f06da62f9e12bb5336ee3c3f242246b",
        "filename": "qa/rpc-tests/bip68-sequence.py",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/bip68-sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/bip68-sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip68-sequence.py?ref=fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf",
        "patch": "@@ -1,8 +1,10 @@\n #!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+from __future__ import division,print_function\n+\n #\n # Test BIP68 implementation (mempool only)\n #\n@@ -179,7 +181,7 @@ def test_sequence_lock_confirmed_inputs(self):\n                 tx.vin.append(CTxIn(COutPoint(int(utxos[j][\"txid\"], 16), utxos[j][\"vout\"]), nSequence=sequence_value))\n                 value += utxos[j][\"amount\"]*COIN\n             # Overestimate the size of the tx - signatures should be less than 120 bytes, and leave 50 for the output\n-            tx_size = len(ToHex(tx))/2 + 120*num_inputs + 50\n+            tx_size = len(ToHex(tx))//2 + 120*num_inputs + 50\n             tx.vout.append(CTxOut(value-self.relayfee*tx_size*COIN/1000, CScript([b'a'])))\n             rawtx = self.nodes[0].signrawtransaction(ToHex(tx))[\"hex\"]\n "
      },
      {
        "sha": "5461a9704429b37b509ff2cf26ca7a3f10ae5e48",
        "filename": "qa/rpc-tests/bipdersig-p2p.py",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/bipdersig-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/bipdersig-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bipdersig-p2p.py?ref=fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf",
        "patch": "@@ -1,8 +1,9 @@\n #!/usr/bin/env python2\n-# Copyright (c) 2015 The Bitcoin Core developers\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT/X11 software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-#\n+\n+from __future__ import division,print_function\n \n from test_framework.test_framework import ComparisonTestFramework\n from test_framework.util import *"
      },
      {
        "sha": "098839a8c7a32621317cec58d1722a8aea66a2f3",
        "filename": "qa/rpc-tests/bipdersig.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/bipdersig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/bipdersig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bipdersig.py?ref=fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf",
        "patch": "@@ -1,8 +1,10 @@\n #!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+from __future__ import division,print_function\n+\n #\n # Test the BIP66 changeover logic\n #"
      },
      {
        "sha": "9971eaf8838ceb0861ac2a8866259bfce7e13740",
        "filename": "qa/rpc-tests/blockchain.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/blockchain.py?ref=fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf",
        "patch": "@@ -1,8 +1,10 @@\n #!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+from __future__ import division,print_function\n+\n #\n # Test RPC calls related to blockchain state. Tests correspond to code in\n # rpc/blockchain.cpp."
      },
      {
        "sha": "7d449fc2c4b29a67291a9f5094446d4b2a71696f",
        "filename": "qa/rpc-tests/decodescript.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/decodescript.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/decodescript.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/decodescript.py?ref=fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf",
        "patch": "@@ -1,8 +1,10 @@\n #!/usr/bin/env python2\n-# Copyright (c) 2015 The Bitcoin Core developers\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+from __future__ import division,print_function\n+\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n from test_framework.mininode import *"
      },
      {
        "sha": "fbe57709382eaf8691c0bf5759d561a503c3efcf",
        "filename": "qa/rpc-tests/disablewallet.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/disablewallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/disablewallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/disablewallet.py?ref=fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf",
        "patch": "@@ -1,8 +1,10 @@\n #!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+from __future__ import division,print_function\n+\n #\n # Exercise API with -disablewallet.\n #"
      },
      {
        "sha": "8de1887edefa37c5ca101788fb729215688459cb",
        "filename": "qa/rpc-tests/forknotify.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/forknotify.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/forknotify.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/forknotify.py?ref=fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf",
        "patch": "@@ -1,8 +1,10 @@\n #!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+from __future__ import division,print_function\n+\n #\n # Test -alertnotify \n #"
      },
      {
        "sha": "4fe45c44a721fcadfe5425fc590e5152e94bc07c",
        "filename": "qa/rpc-tests/fundrawtransaction.py",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/fundrawtransaction.py?ref=fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf",
        "patch": "@@ -1,8 +1,10 @@\n #!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+from __future__ import division,print_function\n+\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n \n@@ -309,7 +311,7 @@ def run_test(self):\n         errorString = \"\"\n         try:\n             rawtxfund = self.nodes[2].fundrawtransaction(rawtx)\n-        except JSONRPCException as e:\n+        except JSONRPCException,e:\n             errorString = e.error['message']\n \n         assert(\"Insufficient\" in errorString)"
      },
      {
        "sha": "99874195d1066e66aa419aa5f3913234684a284b",
        "filename": "qa/rpc-tests/getblocktemplate_longpoll.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/getblocktemplate_longpoll.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/getblocktemplate_longpoll.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/getblocktemplate_longpoll.py?ref=fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf",
        "patch": "@@ -1,8 +1,10 @@\n #!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+from __future__ import division,print_function\n+\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n "
      },
      {
        "sha": "d2463382ef9862e0f094b31159c6c0bc72e7306a",
        "filename": "qa/rpc-tests/getblocktemplate_proposals.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/getblocktemplate_proposals.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/getblocktemplate_proposals.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/getblocktemplate_proposals.py?ref=fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf",
        "patch": "@@ -1,8 +1,10 @@\n #!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+from __future__ import division,print_function\n+\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n "
      },
      {
        "sha": "1df38325bfaf8b6e67f29314ffa55cc15f4c67a8",
        "filename": "qa/rpc-tests/getchaintips.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/getchaintips.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/getchaintips.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/getchaintips.py?ref=fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf",
        "patch": "@@ -1,8 +1,10 @@\n #!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+from __future__ import division,print_function\n+\n # Exercise the getchaintips API.  We introduce a network split, work\n # on chains of different lengths, and join the network together again.\n # This gives us two tips, verify that it works."
      },
      {
        "sha": "41547981f0cd9c195788573f25e8c7bc45d7dc51",
        "filename": "qa/rpc-tests/httpbasics.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/httpbasics.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/httpbasics.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/httpbasics.py?ref=fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf",
        "patch": "@@ -1,8 +1,10 @@\n #!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+from __future__ import division,print_function\n+\n #\n # Test rpc http basics\n #"
      },
      {
        "sha": "8319d48e4b2445fd7576df98e85928a5d77217c8",
        "filename": "qa/rpc-tests/invalidateblock.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/invalidateblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/invalidateblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/invalidateblock.py?ref=fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf",
        "patch": "@@ -1,8 +1,10 @@\n #!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+from __future__ import division,print_function\n+\n #\n # Test InvalidateBlock code\n #"
      },
      {
        "sha": "91474aed32538f7a771ec160e4e9b572d9aa033a",
        "filename": "qa/rpc-tests/invalidblockrequest.py",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/invalidblockrequest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/invalidblockrequest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/invalidblockrequest.py?ref=fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf",
        "patch": "@@ -1,8 +1,9 @@\n #!/usr/bin/env python2\n-# Copyright (c) 2015 The Bitcoin Core developers\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT/X11 software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-#\n+\n+from __future__ import division,print_function\n \n from test_framework.test_framework import ComparisonTestFramework\n from test_framework.util import *"
      },
      {
        "sha": "e67dfd1971c36753d5e150a4d1cb233199da0d81",
        "filename": "qa/rpc-tests/invalidtxrequest.py",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/invalidtxrequest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/invalidtxrequest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/invalidtxrequest.py?ref=fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf",
        "patch": "@@ -1,8 +1,9 @@\n #!/usr/bin/env python2\n-# Copyright (c) 2015 The Bitcoin Core developers\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT/X11 software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-#\n+\n+from __future__ import division,print_function\n \n from test_framework.test_framework import ComparisonTestFramework\n from test_framework.comptool import TestManager, TestInstance, RejectResult"
      },
      {
        "sha": "39f7b5bd5fe8dd78dd4eb7ed261663c2eaa5e774",
        "filename": "qa/rpc-tests/keypool.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/keypool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/keypool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/keypool.py?ref=fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf",
        "patch": "@@ -1,8 +1,10 @@\n #!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+from __future__ import division,print_function\n+\n # Exercise the wallet keypool, and interaction with wallet encryption/locking\n \n # Add python-bitcoinrpc to module search path:"
      },
      {
        "sha": "97557381a7b9f9fa4d2e991ea70b259061a6d69a",
        "filename": "qa/rpc-tests/listtransactions.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/listtransactions.py?ref=fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf",
        "patch": "@@ -1,8 +1,10 @@\n #!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+from __future__ import division,print_function\n+\n # Exercise the listtransactions API\n \n from test_framework.test_framework import BitcoinTestFramework"
      },
      {
        "sha": "a3b5b9fec819b0cd94700562c93e528fd53cdaf6",
        "filename": "qa/rpc-tests/maxblocksinflight.py",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/maxblocksinflight.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/maxblocksinflight.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/maxblocksinflight.py?ref=fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf",
        "patch": "@@ -1,8 +1,9 @@\n #!/usr/bin/env python2\n-# Copyright (c) 2015 The Bitcoin Core developers\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT/X11 software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-#\n+\n+from __future__ import division,print_function\n \n from test_framework.mininode import *\n from test_framework.test_framework import BitcoinTestFramework"
      },
      {
        "sha": "864703f99b48f92877ff408ee1312a5e792886bb",
        "filename": "qa/rpc-tests/maxuploadtarget.py",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/maxuploadtarget.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/maxuploadtarget.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/maxuploadtarget.py?ref=fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf",
        "patch": "@@ -1,8 +1,9 @@\n #!/usr/bin/env python2\n-#\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT/X11 software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-#\n+\n+from __future__ import division,print_function\n \n from test_framework.mininode import *\n from test_framework.test_framework import BitcoinTestFramework"
      },
      {
        "sha": "d74e1847a72d7d38abd1cbdcfbdb16f883ef731e",
        "filename": "qa/rpc-tests/mempool_limit.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/mempool_limit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/mempool_limit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/mempool_limit.py?ref=fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf",
        "patch": "@@ -1,8 +1,10 @@\n #!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+from __future__ import division,print_function\n+\n # Test mempool limiting together/eviction with the wallet\n \n from test_framework.test_framework import BitcoinTestFramework"
      },
      {
        "sha": "ce65b2af78a06513b87509ccdfdfcb9579b7d723",
        "filename": "qa/rpc-tests/mempool_packages.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/mempool_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/mempool_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/mempool_packages.py?ref=fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf",
        "patch": "@@ -1,8 +1,10 @@\n #!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+from __future__ import division,print_function\n+\n # Test descendant package tracking code\n \n from test_framework.test_framework import BitcoinTestFramework"
      },
      {
        "sha": "2f6cdcd786fbe5d14958dfcd854c2db9af901c5f",
        "filename": "qa/rpc-tests/mempool_reorg.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/mempool_reorg.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/mempool_reorg.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/mempool_reorg.py?ref=fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf",
        "patch": "@@ -1,8 +1,10 @@\n #!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+from __future__ import division,print_function\n+\n #\n # Test re-org scenarios with a mempool that contains transactions\n # that spend (directly or indirectly) coinbase transactions."
      },
      {
        "sha": "dab9679702700ed43d027462ae6ad6f313eaaf71",
        "filename": "qa/rpc-tests/mempool_resurrect_test.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/mempool_resurrect_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/mempool_resurrect_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/mempool_resurrect_test.py?ref=fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf",
        "patch": "@@ -1,8 +1,10 @@\n #!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+from __future__ import division,print_function\n+\n #\n # Test resurrection of mined transactions when\n # the blockchain is re-organized."
      },
      {
        "sha": "712b10b3cdb5848941dd5e17c3a89ee43e5dfe4a",
        "filename": "qa/rpc-tests/mempool_spendcoinbase.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/mempool_spendcoinbase.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/mempool_spendcoinbase.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/mempool_spendcoinbase.py?ref=fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf",
        "patch": "@@ -1,8 +1,10 @@\n #!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+from __future__ import division,print_function\n+\n #\n # Test spending coinbase transactions.\n # The coinbase transaction in block N can appear in block"
      },
      {
        "sha": "ef97453bcaf3eafbe971e70b562ee5aa715e066c",
        "filename": "qa/rpc-tests/merkle_blocks.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/merkle_blocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/merkle_blocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/merkle_blocks.py?ref=fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf",
        "patch": "@@ -1,8 +1,10 @@\n #!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+from __future__ import division,print_function\n+\n #\n # Test merkleblock fetch/validation\n #"
      },
      {
        "sha": "466c137ae6511a05d229193d6878789eb92a5c55",
        "filename": "qa/rpc-tests/multi_rpc.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/multi_rpc.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/multi_rpc.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/multi_rpc.py?ref=fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf",
        "patch": "@@ -1,8 +1,10 @@\n #!/usr/bin/env python2\n-# Copyright (c) 2015 The Bitcoin Core developers\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+from __future__ import division,print_function\n+\n #\n # Test mulitple rpc user config option rpcauth\n #"
      },
      {
        "sha": "3995763d285fba288228cbba9e7633ddfb88afa3",
        "filename": "qa/rpc-tests/nodehandling.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/nodehandling.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/nodehandling.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/nodehandling.py?ref=fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf",
        "patch": "@@ -1,8 +1,10 @@\n #!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+from __future__ import division,print_function\n+\n #\n # Test node handling\n #"
      },
      {
        "sha": "7b1cbea1814413d0f47c58bf799810300ef7b8b6",
        "filename": "qa/rpc-tests/p2p-acceptblock.py",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/p2p-acceptblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/p2p-acceptblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-acceptblock.py?ref=fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf",
        "patch": "@@ -1,8 +1,9 @@\n #!/usr/bin/env python2\n-# Copyright (c) 2015 The Bitcoin Core developers\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT/X11 software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-#\n+\n+from __future__ import division,print_function\n \n from test_framework.mininode import *\n from test_framework.test_framework import BitcoinTestFramework"
      },
      {
        "sha": "e049b6be3fe65a25dc21b853728fe0a0a9d950a0",
        "filename": "qa/rpc-tests/p2p-fullblocktest.py",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/p2p-fullblocktest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/p2p-fullblocktest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-fullblocktest.py?ref=fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf",
        "patch": "@@ -1,8 +1,9 @@\n #!/usr/bin/env python2\n-# Copyright (c) 2015 The Bitcoin Core developers\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT/X11 software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-#\n+\n+from __future__ import division,print_function\n \n from test_framework.test_framework import ComparisonTestFramework\n from test_framework.util import *"
      },
      {
        "sha": "b355f1d3351dc12e60dc7f5eb8a972806370c087",
        "filename": "qa/rpc-tests/p2p-versionbits-warning.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/p2p-versionbits-warning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/p2p-versionbits-warning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-versionbits-warning.py?ref=fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf",
        "patch": "@@ -2,7 +2,8 @@\n # Copyright (c) 2016 The Bitcoin Core developers\n # Distributed under the MIT/X11 software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-#\n+\n+from __future__ import division,print_function\n \n from test_framework.mininode import *\n from test_framework.test_framework import BitcoinTestFramework"
      },
      {
        "sha": "a1060810f07c3e9987ab427ff3f2cb79780cb057",
        "filename": "qa/rpc-tests/prioritise_transaction.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/prioritise_transaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/prioritise_transaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/prioritise_transaction.py?ref=fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf",
        "patch": "@@ -1,8 +1,10 @@\n #!/usr/bin/env python2\n-# Copyright (c) 2015 The Bitcoin Core developers\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+from __future__ import division,print_function\n+\n #\n # Test PrioritiseTransaction code\n #"
      },
      {
        "sha": "cdea3a41d648dbb8ccf7902c5f306e7ed638551b",
        "filename": "qa/rpc-tests/proxy_test.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/proxy_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/proxy_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/proxy_test.py?ref=fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf",
        "patch": "@@ -1,7 +1,9 @@\n #!/usr/bin/env python2\n-# Copyright (c) 2015 The Bitcoin Core developers\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from __future__ import division,print_function\n import socket\n \n from test_framework.socks5 import Socks5Configuration, Socks5Command, Socks5Server, AddressType"
      },
      {
        "sha": "e4ab5e6353012520cd1ede139b18dfdef69925f7",
        "filename": "qa/rpc-tests/pruning.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/pruning.py?ref=fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -11,7 +11,7 @@\n # This test takes 30 mins or more (up to 2 hours)\n # ********\n \n-from __future__ import print_function\n+from __future__ import division,print_function\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *"
      },
      {
        "sha": "d3db835d8ec5f910aadd138954611e187a2c98fb",
        "filename": "qa/rpc-tests/rawtransactions.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/rawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/rawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rawtransactions.py?ref=fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf",
        "patch": "@@ -1,8 +1,10 @@\n #!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+from __future__ import division,print_function\n+\n #\n # Test re-org scenarios with a mempool that contains transactions\n # that spend (directly or indirectly) coinbase transactions."
      },
      {
        "sha": "004b543a0d8b8c28a53328d86ec116eb74aa2aa9",
        "filename": "qa/rpc-tests/receivedby.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/receivedby.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/receivedby.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/receivedby.py?ref=fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf",
        "patch": "@@ -1,8 +1,10 @@\n #!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+from __future__ import division,print_function\n+\n # Exercise the listreceivedbyaddress API\n \n from test_framework.test_framework import BitcoinTestFramework"
      },
      {
        "sha": "7e33bf323068a8fe358c570e3d149fb7f1b5808c",
        "filename": "qa/rpc-tests/reindex.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/reindex.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/reindex.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/reindex.py?ref=fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf",
        "patch": "@@ -1,8 +1,10 @@\n #!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+from __future__ import division,print_function\n+\n #\n # Test -reindex with CheckBlockIndex\n #"
      },
      {
        "sha": "1251e4a3fa3510585d4c21632424d0d6d9c286ae",
        "filename": "qa/rpc-tests/replace-by-fee.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/replace-by-fee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/replace-by-fee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/replace-by-fee.py?ref=fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf",
        "patch": "@@ -1,8 +1,10 @@\n #!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+from __future__ import division,print_function\n+\n #\n # Test replace by fee code\n #"
      },
      {
        "sha": "501cc6971e313c399b20a11dbe69585bd6a6cc57",
        "filename": "qa/rpc-tests/rest.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rest.py?ref=fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf",
        "patch": "@@ -1,8 +1,10 @@\n #!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+from __future__ import division,print_function\n+\n #\n # Test REST interface\n #"
      },
      {
        "sha": "251b228e143c696cc969e746ce0c38826f3906bf",
        "filename": "qa/rpc-tests/rpcbind_test.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/rpcbind_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/rpcbind_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rpcbind_test.py?ref=fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf",
        "patch": "@@ -1,8 +1,10 @@\n #!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+from __future__ import division,print_function\n+\n # Test for -rpcbind, as well as -rpcallowip and -rpcconnect\n \n # TODO extend this test from the test framework (like all other tests)"
      },
      {
        "sha": "3359421f89b0772e32c598fc81b7d371774b31f3",
        "filename": "qa/rpc-tests/sendheaders.py",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/sendheaders.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/sendheaders.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/sendheaders.py?ref=fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf",
        "patch": "@@ -1,8 +1,9 @@\n #!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT/X11 software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-#\n+\n+from __future__ import division,print_function\n \n from test_framework.mininode import *\n from test_framework.test_framework import BitcoinTestFramework"
      },
      {
        "sha": "e88eef4efcf49b211c6f7fdd697302bb7321e846",
        "filename": "qa/rpc-tests/signrawtransactions.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/signrawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/signrawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/signrawtransactions.py?ref=fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf",
        "patch": "@@ -1,8 +1,10 @@\n #!/usr/bin/env python2\n-# Copyright (c) 2015 The Bitcoin Core developers\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+from __future__ import division,print_function\n+\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n "
      },
      {
        "sha": "5a1c115b6c4f85dcb3ba4faf17e5363bec626e16",
        "filename": "qa/rpc-tests/smartfees.py",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/smartfees.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/smartfees.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/smartfees.py?ref=fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf",
        "patch": "@@ -1,8 +1,10 @@\n #!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+from __future__ import division,print_function\n+\n #\n # Test fee estimation code\n #\n@@ -219,7 +221,7 @@ def transact_and_mine(self, numblocks, mining_node):\n                 from_index = random.randint(1,2)\n                 (txhex, fee) = small_txpuzzle_randfee(self.nodes[from_index], self.confutxo,\n                                                       self.memutxo, Decimal(\"0.005\"), min_fee, min_fee)\n-                tx_kbytes = (len(txhex)/2)/1000.0\n+                tx_kbytes = (len(txhex) // 2) / 1000.0\n                 self.fees_per_kb.append(float(fee)/tx_kbytes)\n             sync_mempools(self.nodes[0:3],.1)\n             mined = mining_node.getblock(mining_node.generate(1)[0],True)[\"tx\"]"
      },
      {
        "sha": "be9d58569530199ce9cc4ed9ad2566b03829cbd6",
        "filename": "qa/rpc-tests/test_framework/blockstore.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/test_framework/blockstore.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/test_framework/blockstore.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/blockstore.py?ref=fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf",
        "patch": "@@ -3,6 +3,7 @@\n #             and for constructing a getheaders message\n #\n \n+from __future__ import division, print_function\n from .mininode import *\n import dbm\n "
      },
      {
        "sha": "b97ee660fec5a404bc11047203cecf544d7bfebe",
        "filename": "qa/rpc-tests/test_framework/blocktools.py",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/test_framework/blocktools.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/test_framework/blocktools.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/blocktools.py?ref=fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf",
        "patch": "@@ -1,8 +1,9 @@\n # blocktools.py - utilities for manipulating blocks and transactions\n-# Copyright (c) 2015 The Bitcoin Core developers\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT/X11 software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-#\n+\n+from __future__ import division,print_function\n \n from .mininode import *\n from .script import CScript, OP_TRUE, OP_CHECKSIG"
      },
      {
        "sha": "165cad88744cd84d6041121de55036643c02ab70",
        "filename": "qa/rpc-tests/test_framework/comptool.py",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/test_framework/comptool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/test_framework/comptool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/comptool.py?ref=fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf",
        "patch": "@@ -1,8 +1,9 @@\n #!/usr/bin/env python2\n-# Copyright (c) 2015 The Bitcoin Core developers\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT/X11 software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-#\n+\n+from __future__ import division,print_function\n \n from .mininode import *\n from .blockstore import BlockStore, TxStore"
      },
      {
        "sha": "5fcd8849ae493f80445e06f57ecc3b75a7b265ac",
        "filename": "qa/rpc-tests/test_framework/coverage.py",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/test_framework/coverage.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/test_framework/coverage.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/coverage.py?ref=fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf",
        "patch": "@@ -1,8 +1,9 @@\n #!/usr/bin/env python2\n-# Copyright (c) 2015 The Bitcoin Core developers\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT/X11 software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-#\n+\n+from __future__ import division,print_function\n \n \"\"\"\n This module contains utilities for doing coverage analysis on the RPC"
      },
      {
        "sha": "2b14eb162db35e37e48567f8b11dd9ec2762d4ca",
        "filename": "qa/rpc-tests/test_framework/key.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/test_framework/key.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/test_framework/key.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/key.py?ref=fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf",
        "patch": "@@ -11,6 +11,7 @@\n disk in swap! Use with caution!\n \"\"\"\n \n+from __future__ import division, print_function\n import ctypes\n import ctypes.util\n import hashlib"
      },
      {
        "sha": "e91f4be8eb1bdd9c0c4ba70021fcd7cbed905730",
        "filename": "qa/rpc-tests/test_framework/mininode.py",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/mininode.py?ref=fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf",
        "patch": "@@ -2,6 +2,8 @@\n #\n # Distributed under the MIT/X11 software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from __future__ import division,print_function\n #\n # This python code was modified from ArtForz' public domain  half-a-node, as\n # found in the mini-node branch of http://github.com/jgarzik/pynode."
      },
      {
        "sha": "e9c306610c3a61f335fe450b830ccbbdb2862a7b",
        "filename": "qa/rpc-tests/test_framework/netutil.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/test_framework/netutil.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/test_framework/netutil.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/netutil.py?ref=fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf",
        "patch": "@@ -1,8 +1,10 @@\n #!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+from __future__ import division,print_function\n+\n # Linux network utilities\n import sys\n import socket"
      },
      {
        "sha": "9db708746b8601d5eed6c9231c5c4a44907cd3b4",
        "filename": "qa/rpc-tests/test_framework/socks5.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/test_framework/socks5.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/test_framework/socks5.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/socks5.py?ref=fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf",
        "patch": "@@ -1,4 +1,4 @@\n-# Copyright (c) 2015 The Bitcoin Core developers\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n '''"
      },
      {
        "sha": "c91d24491c1a7ce1c2fe57604a2e475b91551e18",
        "filename": "qa/rpc-tests/test_framework/test_framework.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/test_framework.py?ref=fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf",
        "patch": "@@ -1,8 +1,10 @@\n #!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+from __future__ import division,print_function\n+\n # Base class for RPC testing\n \n # Add python-bitcoinrpc to module search path:"
      },
      {
        "sha": "80f51b6eaf7b0795b6b84a18089e7f1e3e91fdd9",
        "filename": "qa/rpc-tests/test_framework/util.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/util.py?ref=fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf",
        "patch": "@@ -1,6 +1,8 @@\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from __future__ import division,print_function\n #\n # Helpful routines for regression testing\n #"
      },
      {
        "sha": "ec50e9b51042e71767723f4770f5713fda684d0a",
        "filename": "qa/rpc-tests/txn_clone.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/txn_clone.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/txn_clone.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/txn_clone.py?ref=fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf",
        "patch": "@@ -1,8 +1,10 @@\n #!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+from __future__ import division,print_function\n+\n #\n # Test proper accounting with an equivalent malleability clone\n #"
      },
      {
        "sha": "94c516d90499b2300acf1ff0580e3fd6afc9a0b3",
        "filename": "qa/rpc-tests/txn_doublespend.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/txn_doublespend.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/txn_doublespend.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/txn_doublespend.py?ref=fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf",
        "patch": "@@ -1,8 +1,10 @@\n #!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+from __future__ import division,print_function\n+\n #\n # Test proper accounting with a double-spend conflict\n #"
      },
      {
        "sha": "93c87665c3fe0438284074b19ea00ccaf03a59d0",
        "filename": "qa/rpc-tests/wallet.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet.py?ref=fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf",
        "patch": "@@ -1,8 +1,10 @@\n #!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+from __future__ import division,print_function\n+\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n "
      },
      {
        "sha": "63eefeb9025dca033580b943346db31441b64ab9",
        "filename": "qa/rpc-tests/walletbackup.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/walletbackup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/walletbackup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/walletbackup.py?ref=fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf",
        "patch": "@@ -1,8 +1,10 @@\n #!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+from __future__ import division,print_function\n+\n \"\"\"\n Exercise the wallet backup code.  Ported from walletbackup.sh.\n "
      },
      {
        "sha": "0a5a14eec658a465d579f933c7fd999566100ccf",
        "filename": "qa/rpc-tests/zapwallettxes.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/zapwallettxes.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/zapwallettxes.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/zapwallettxes.py?ref=fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf",
        "patch": "@@ -1,8 +1,10 @@\n #!/usr/bin/env python2\n-# Copyright (c) 2014-2015 The Bitcoin Core developers\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+from __future__ import division,print_function\n+\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n "
      },
      {
        "sha": "f09ae95a8476a9bcbaf521c954b1c3108576ceb9",
        "filename": "qa/rpc-tests/zmq_test.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/zmq_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf/qa/rpc-tests/zmq_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/zmq_test.py?ref=fa8e2cdc95ffc2b7a66a618755fab252ae5d65cf",
        "patch": "@@ -1,8 +1,10 @@\n #!/usr/bin/env python2\n-# Copyright (c) 2015 The Bitcoin Core developers\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+from __future__ import division,print_function\n+\n #\n # Test ZMQ interface\n #"
      }
    ]
  }
]