jnewbery,2020-08-24 21:54:57,concept ACK,https://github.com/bitcoin/bitcoin/pull/19794#issuecomment-679386340,679386340,
DrahtBot,2020-08-25 07:20:56,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #17785 (p2p: Unify Send and Receive protocol versions by hebasto)\n\nIf you consider this pull request important, please a",https://github.com/bitcoin/bitcoin/pull/19794#issuecomment-679851573,679851573,
mzumsande,2020-08-25 20:32:23,"Thanks for the review! I pushed an update, implementing both style suggestions and copying the PR description into the commit message.",https://github.com/bitcoin/bitcoin/pull/19794#issuecomment-680254918,680254918,
naumenkogs,2020-08-26 11:56:58,"ACK ef9855580098654cdfc5844f8922518e6602878f.\n\nIt's good to get rid of the useless code. Even though it's only a couple lines, the burden of this variable is massive: I spent 10 minutes figuring what does it do, even after reading the PR description.\n\nI tried to make sure we don't miss any corner cases, and I think this PR works correctly.\n\nRegarding your commit message:\n>2.) If the ",https://github.com/bitcoin/bitcoin/pull/19794#issuecomment-680833892,680833892,
mzumsande,2020-08-26 22:22:38,"> I'm not sure it's a bug in master. I always thought of <=10 check as something to limit the forwarding of unsolicited ADDRs. Now it may also forward a solicited ADDR. May it leak privacy somehow? I guess not, because we don't send them out immediately anyway.\n\nI just wanted to note that it is a small change in behaviour, not sure if it is a bug. In any case, I don't think that this will occu",https://github.com/bitcoin/bitcoin/pull/19794#issuecomment-681154335,681154335,
laanwj,2020-08-27 11:36:06,"Though I had an idea what it was for, I don't think I've ever thoroughly understood this flag. Thanks for the explanation and ACK on removing it.\nACK ef9855580098654cdfc5844f8922518e6602878f",https://github.com/bitcoin/bitcoin/pull/19794#issuecomment-681893374,681893374,
jnewbery,2020-09-01 08:47:51,"ACK the code changes in ef9855580098654cdfc5844f8922518e6602878f\n\nIf you touch this again, could you line-wrap the body of your commit log at 80 chars? (also no need to credit me in the commit log - this is your work!)",https://github.com/bitcoin/bitcoin/pull/19794#issuecomment-684594748,684594748,
amitiuttarwar,2020-09-03 15:21:17,strong concept ACK! thank you! that variable is a distraction.,https://github.com/bitcoin/bitcoin/pull/19794#issuecomment-686565903,686565903,
mzumsande,2020-09-03 18:51:25,Rebased and reformatted the commit message as suggested by @jnewbery .,https://github.com/bitcoin/bitcoin/pull/19794#issuecomment-686693103,686693103,
naumenkogs,2020-09-04 06:55:15,"ACK d3eaaf40541d1ef7b64bdc354c5ac23c3ad9c9e2\n\n---------------\n\nAnother behavior change, or rather an elaboration over ""If the response to GETADDR is small (<=10 addresses), it will be relayed to peers just as any other ADDR message of that size.""\n\n1. We just connected to the peer and send them a `GETADDR`\n2. Before getting `GETADDR`, they schedule their self-announcement for us by ad",https://github.com/bitcoin/bitcoin/pull/19794#issuecomment-686953704,686953704,
jnewbery,2020-09-04 07:39:08,ACK d3eaaf40541d1ef7b64bdc354c5ac23c3ad9c9e2,https://github.com/bitcoin/bitcoin/pull/19794#issuecomment-686973215,686973215,
amitiuttarwar,2020-09-04 23:23:56,"ACK d3eaaf4054 \n\nCI failures look unrelated. ",https://github.com/bitcoin/bitcoin/pull/19794#issuecomment-687463182,687463182,
sdaftuar,2020-09-04 23:49:19,"> since #5419, we do not get more than one ADDR message in response to GETADDR because vAddrToSend cannot have more than 1000 elements.\n\nIf I'm understanding you correctly, you're saying that we can't get more than one ADDR message in response because our own software wouldn't do it.  But what about other software on the network?\n\nAt any rate, I think the reason we have this variable is to",https://github.com/bitcoin/bitcoin/pull/19794#issuecomment-687476649,687476649,
amitiuttarwar,2020-09-05 00:28:47,"@sdaftuar hmm interesting, I'm trying to evaluate this concern, do I have the scenario right: \n- Node A starts up, connects to Node B \n- When Node A receives the `VERSION` message, it sends a `GETADDR` message to Node B \n- Node B has an addrman with < 43 addresses, fulfills the request, sends back 9 addresses randomly selected from its addrman (based on 23 percent calculation)\n- Node A rec",https://github.com/bitcoin/bitcoin/pull/19794#issuecomment-687490594,687490594,
mzumsande,2020-09-05 07:02:22,"I just realized that `fGetAddr` seems to be completely broken/ineffective after setting up a node with extra logging for `fGetAddr` on mainnet with current master:\n\nThe problem is that the first ADDR we receive in the lifetime of a typical connection is the initial self-announcement of our peer! After receiving this ADDR message of size 1, `fGetAddr` will be cleared - it wasn't active a single",https://github.com/bitcoin/bitcoin/pull/19794#issuecomment-687563344,687563344,
jnewbery,2020-09-05 09:38:37,"> I just realized that fGetAddr seems to be completely broken/ineffective after setting up a node with extra logging for fGetAddr on mainnet with current master...\n\nWow, good observation. So, this flag doesn't even do what it was introduced for. Strong ACK on improving the comments/logic here, but I also still think removing it entirely is fine. Our ""don't relay getaddr responses"" logic is enf",https://github.com/bitcoin/bitcoin/pull/19794#issuecomment-687580019,687580019,
mzumsande,2020-09-06 22:02:11,"To elaborate on my last comment: The typical behavior seems to be that in the first `SendMessages()` loop after being successfully connected, our peer will self-advertise (because `m_next_local_addr_send == 0`  initially) and send us an ADDR without further delay  (because `m_next_addr_send == 0` initially), sending the GETADDR response later. It probably depends on the timing of when the VERACK v",https://github.com/bitcoin/bitcoin/pull/19794#issuecomment-687913615,687913615,
jnewbery,2020-09-07 09:07:29,ACK 628812a34ea0d6ac6ed17abaa06fb8e4758c4c5f,https://github.com/bitcoin/bitcoin/pull/19794#issuecomment-688184042,688184042,
naumenkogs,2020-09-08 07:53:01,"So there are 2 issues pointed out by sdaftuar, I'd consider them separately:\n\n1. Privacy of a Bitcoin Core node with few AddrMan records making a new connection to a Bitcoin Core node.\nI agree with the concern, but according to mzumsande experiments above, the `fGetAddr` flag is ineffective here, so we already have this problem. The problem probably should be addressed in a different PR. If ",https://github.com/bitcoin/bitcoin/pull/19794#issuecomment-688689687,688689687,
naumenkogs,2020-09-08 09:53:00,"Actually, `fGetAddr` as currently working (set to `false` after initial peer's self-ad) are protecting the initial self-ad from the privacy leak I've pointed out [here](https://github.com/bitcoin/bitcoin/pull/19794#issuecomment-686953704). But I'd repeat that this feature should be made explicit in a follow-up rather than a random side-effect.",https://github.com/bitcoin/bitcoin/pull/19794#issuecomment-688757750,688757750,
jnewbery,2020-09-08 10:37:44,"@naumenkogs , I don't understand this:\n\n> 4. We receive their self-announcement containing only 1 addr and keep fGetAddr=true\n\nWhy would fGetAddr stay as true? I think it's flipped to false in this scenario.",https://github.com/bitcoin/bitcoin/pull/19794#issuecomment-688781562,688781562,
naumenkogs,2020-09-08 10:50:48,"@jnewbery this was a mistake (see I updated it), but the example remains valid. ",https://github.com/bitcoin/bitcoin/pull/19794#issuecomment-688788045,688788045,
sdaftuar,2020-09-10 23:20:07,"Rather than remove the `fGetAddr` flag, what do you think about improving our behavior instead on the other end, eg by my suggestion [here](https://github.com/bitcoin/bitcoin/issues/19694#issuecomment-671438244) to delay the initial addr message we send out to inbound peers in order to mitigate the ambiguity between the response to an initial `getaddr` and the advertising of the peer's own address",https://github.com/bitcoin/bitcoin/pull/19794#issuecomment-690781832,690781832,
naumenkogs,2020-09-11 13:57:24,"@sdaftuar \n>Rather than remove the fGetAddr flag, what do you think about improving our behavior instead on the other end, eg by my suggestion here to delay the initial addr message we send out to inbound peers in order to mitigate the ambiguity between the response to an initial getaddr and the advertising of the peer's own address?\n\nI'm not 100% persuaded that `fGetAddr` better stays (the ",https://github.com/bitcoin/bitcoin/pull/19794#issuecomment-691110899,691110899,
sdaftuar,2020-09-11 16:10:01,"> I'm not 100% persuaded that fGetAddr better stays (the only valid justification I see at the moment is potentially breaking other software?), but I think this idea would make the flag work as intended.\n\nIt seems like it should be a reasonably good guess that if you send someone a `getaddr`, the next `addr` you get is probably in response.  However, since we send out a `getaddr` to outbound p",https://github.com/bitcoin/bitcoin/pull/19794#issuecomment-691184578,691184578,
mzumsande,2020-09-11 17:32:29,"> Rather than remove the fGetAddr flag, what do you think about improving our behavior instead on the other end.\n\nIn this case, I think that we should change the `if (vAddr.size() < 1000) pfrom.fGetAddr = false;` condition which, in the typical case of receiving a single GETADDR answer of size 1000, prevents us from relaying the next ADDR message of our peer, even though this one would not be ",https://github.com/bitcoin/bitcoin/pull/19794#issuecomment-691222888,691222888,
sdaftuar,2020-09-11 17:47:51,"> In this case, I think that we should change the if (vAddr.size() < 1000) pfrom.fGetAddr = false; condition which, in the typical case of receiving a single GETADDR answer of size 1000, prevents us from relaying the next ADDR message of our peer, even though this one would not be related to the GETADDR interaction at all.\n\nYes, I agree that makes sense and better matches what we typically are",https://github.com/bitcoin/bitcoin/pull/19794#issuecomment-691229674,691229674,
mzumsande,2020-09-15 19:02:51,"Ok - I will open a PR in the next days for that. Will close this one and link it from the new one, because it would become a bit  confusing with another change in the PR description and discussion referring to old versions.",https://github.com/bitcoin/bitcoin/pull/19794#issuecomment-692916364,692916364,
sipa,2020-09-15 19:04:35,"There is some more discussion here, BTW: https://github.com/bitcoin/bips/pull/907",https://github.com/bitcoin/bitcoin/pull/19794#issuecomment-692917320,692917320,
jnewbery,2020-08-25 10:21:26,"This is unrelated to this PR, but could you replace this with a blank line instead of deleting the line. The `MarkAddressGood()` call below is unrelated to getting recent addresses, so should be visually separated from the line above.",https://github.com/bitcoin/bitcoin/pull/19794#discussion_r476341627,476341627,src/net_processing.cpp
jnewbery,2020-08-25 10:21:49,"since you're touching this line, join it with the line below to have the opening brace on the same line.",https://github.com/bitcoin/bitcoin/pull/19794#discussion_r476341817,476341817,src/net_processing.cpp
