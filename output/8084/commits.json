[
  {
    "sha": "5d0ca81f7422b7eac0a5129c6fbccad77e36b85d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZDBjYTgxZjc0MjJiN2VhYzBhNTEyOWM2ZmJjY2FkNzdlMzZiODVk",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2016-05-22T05:55:15Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2016-06-15T20:19:07Z"
      },
      "message": "Add recently accepted blocks and txn to AttemptToEvictConnection.\n\nThis protects any not-already-protected peers who were the most\n recent four to relay transactions and most recent four to send\n blocks to us.",
      "tree": {
        "sha": "e8ed6f0511a9b837e047b5343f7fabf7ca2f3592",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e8ed6f0511a9b837e047b5343f7fabf7ca2f3592"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5d0ca81f7422b7eac0a5129c6fbccad77e36b85d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d0ca81f7422b7eac0a5129c6fbccad77e36b85d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5d0ca81f7422b7eac0a5129c6fbccad77e36b85d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d0ca81f7422b7eac0a5129c6fbccad77e36b85d/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "32b7294177e50cba8aa26ae0689d4b24f3c10df3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32b7294177e50cba8aa26ae0689d4b24f3c10df3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/32b7294177e50cba8aa26ae0689d4b24f3c10df3"
      }
    ],
    "stats": {
      "total": 71,
      "additions": 61,
      "deletions": 10
    },
    "files": [
      {
        "sha": "24ae61b74de2d4c0c3ab0d0ad11e55ca0d6b77ba",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 5,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d0ca81f7422b7eac0a5129c6fbccad77e36b85d/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d0ca81f7422b7eac0a5129c6fbccad77e36b85d/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=5d0ca81f7422b7eac0a5129c6fbccad77e36b85d",
        "patch": "@@ -3449,8 +3449,9 @@ static bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state\n }\n \n /** Store block on disk. If dbp is non-NULL, the file is known to already reside on disk */\n-static bool AcceptBlock(const CBlock& block, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const CDiskBlockPos* dbp)\n+static bool AcceptBlock(const CBlock& block, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const CDiskBlockPos* dbp, bool* fNewBlock)\n {\n+    if (fNewBlock) *fNewBlock = false;\n     AssertLockHeld(cs_main);\n \n     CBlockIndex *pindexDummy = NULL;\n@@ -3479,6 +3480,7 @@ static bool AcceptBlock(const CBlock& block, CValidationState& state, const CCha\n         if (!fHasMoreWork) return true;     // Don't process less-work chains\n         if (fTooFarAhead) return true;      // Block height is too high\n     }\n+    if (fNewBlock) *fNewBlock = true;\n \n     if ((!CheckBlock(block, state, chainparams.GetConsensus(), GetAdjustedTime())) || !ContextualCheckBlock(block, state, pindex->pprev)) {\n         if (state.IsInvalid() && !state.CorruptionPossible()) {\n@@ -3526,7 +3528,7 @@ static bool IsSuperMajority(int minVersion, const CBlockIndex* pstart, unsigned\n }\n \n \n-bool ProcessNewBlock(CValidationState& state, const CChainParams& chainparams, const CNode* pfrom, const CBlock* pblock, bool fForceProcessing, const CDiskBlockPos* dbp)\n+bool ProcessNewBlock(CValidationState& state, const CChainParams& chainparams, CNode* pfrom, const CBlock* pblock, bool fForceProcessing, const CDiskBlockPos* dbp)\n {\n     {\n         LOCK(cs_main);\n@@ -3535,9 +3537,11 @@ bool ProcessNewBlock(CValidationState& state, const CChainParams& chainparams, c\n \n         // Store to disk\n         CBlockIndex *pindex = NULL;\n-        bool ret = AcceptBlock(*pblock, state, chainparams, &pindex, fRequested, dbp);\n+        bool fNewBlock = false;\n+        bool ret = AcceptBlock(*pblock, state, chainparams, &pindex, fRequested, dbp, &fNewBlock);\n         if (pindex && pfrom) {\n             mapBlockSource[pindex->GetBlockHash()] = pfrom->GetId();\n+            if (fNewBlock) pfrom->nLastBlockTime = GetTime();\n         }\n         CheckBlockIndex(chainparams.GetConsensus());\n         if (!ret)\n@@ -4107,7 +4111,7 @@ bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskB\n                 if (mapBlockIndex.count(hash) == 0 || (mapBlockIndex[hash]->nStatus & BLOCK_HAVE_DATA) == 0) {\n                     LOCK(cs_main);\n                     CValidationState state;\n-                    if (AcceptBlock(block, state, chainparams, NULL, true, dbp))\n+                    if (AcceptBlock(block, state, chainparams, NULL, true, dbp, NULL))\n                         nLoaded++;\n                     if (state.IsError())\n                         break;\n@@ -4140,7 +4144,7 @@ bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskB\n                                     head.ToString());\n                             LOCK(cs_main);\n                             CValidationState dummy;\n-                            if (AcceptBlock(block, dummy, chainparams, NULL, true, &it->second))\n+                            if (AcceptBlock(block, dummy, chainparams, NULL, true, &it->second, NULL))\n                             {\n                                 nLoaded++;\n                                 queue.push_back(block.GetHash());\n@@ -5040,6 +5044,8 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             RelayTransaction(tx);\n             vWorkQueue.push_back(inv.hash);\n \n+            pfrom->nLastTXTime = GetTime();\n+\n             LogPrint(\"mempool\", \"AcceptToMemoryPool: peer=%d: accepted %s (poolsz %u txn, %u kB)\\n\",\n                 pfrom->id,\n                 tx.GetHash().ToString(),"
      },
      {
        "sha": "e2bfdfdf6ee36dbe4b9c2e0a3740456776a1e119",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d0ca81f7422b7eac0a5129c6fbccad77e36b85d/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d0ca81f7422b7eac0a5129c6fbccad77e36b85d/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=5d0ca81f7422b7eac0a5129c6fbccad77e36b85d",
        "patch": "@@ -215,7 +215,7 @@ void UnregisterNodeSignals(CNodeSignals& nodeSignals);\n  * @param[out]  dbp     The already known disk position of pblock, or NULL if not yet stored.\n  * @return True if state.IsValid()\n  */\n-bool ProcessNewBlock(CValidationState& state, const CChainParams& chainparams, const CNode* pfrom, const CBlock* pblock, bool fForceProcessing, const CDiskBlockPos* dbp);\n+bool ProcessNewBlock(CValidationState& state, const CChainParams& chainparams, CNode* pfrom, const CBlock* pblock, bool fForceProcessing, const CDiskBlockPos* dbp);\n /** Check whether enough disk space is available for an incoming block */\n bool CheckDiskSpace(uint64_t nAdditionalBytes = 0);\n /** Open a block file (blk?????.dat) */"
      },
      {
        "sha": "ec547e8c998eb4fd5a29bfa98285779c93d4e9f4",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 44,
        "deletions": 4,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d0ca81f7422b7eac0a5129c6fbccad77e36b85d/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d0ca81f7422b7eac0a5129c6fbccad77e36b85d/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=5d0ca81f7422b7eac0a5129c6fbccad77e36b85d",
        "patch": "@@ -838,6 +838,11 @@ struct NodeEvictionCandidate\n     NodeId id;\n     int64_t nTimeConnected;\n     int64_t nMinPingUsecTime;\n+    int64_t nLastBlockTime;\n+    int64_t nLastTXTime;\n+    bool fNetworkNode;\n+    bool fRelayTxes;\n+    bool fBloomFilter;\n     CAddress addr;\n     uint64_t nKeyedNetGroup;\n };\n@@ -854,7 +859,24 @@ static bool ReverseCompareNodeTimeConnected(const NodeEvictionCandidate &a, cons\n \n static bool CompareNetGroupKeyed(const NodeEvictionCandidate &a, const NodeEvictionCandidate &b) {\n     return a.nKeyedNetGroup < b.nKeyedNetGroup;\n-};\n+}\n+\n+static bool CompareNodeBlockTime(const NodeEvictionCandidate &a, const NodeEvictionCandidate &b)\n+{\n+    // There is a fall-through here because it is common for a node to have many peers which have not yet relayed a block.\n+    if (a.nLastBlockTime != b.nLastBlockTime) return a.nLastBlockTime < b.nLastBlockTime;\n+    if (a.fNetworkNode != b.fNetworkNode) return b.fNetworkNode;\n+    return a.nTimeConnected > b.nTimeConnected;\n+}\n+\n+static bool CompareNodeTXTime(const NodeEvictionCandidate &a, const NodeEvictionCandidate &b)\n+{\n+    // There is a fall-through here because it is common for a node to have more than a few peers that have not yet relayed txn.\n+    if (a.nLastTXTime != b.nLastTXTime) return a.nLastTXTime < b.nLastTXTime;\n+    if (a.fRelayTxes != b.fRelayTxes) return b.fRelayTxes;\n+    if (a.fBloomFilter != b.fBloomFilter) return a.fBloomFilter;\n+    return a.nTimeConnected > b.nTimeConnected;\n+}\n \n /** Try to find a connection to evict when the node is full.\n  *  Extreme care must be taken to avoid opening the node to attacker\n@@ -864,7 +886,7 @@ static bool CompareNetGroupKeyed(const NodeEvictionCandidate &a, const NodeEvict\n  *   to forge.  In order to partition a node the attacker must be\n  *   simultaneously better at all of them than honest peers.\n  */\n-static bool AttemptToEvictConnection(bool fPreferNewConnection) {\n+static bool AttemptToEvictConnection() {\n     std::vector<NodeEvictionCandidate> vEvictionCandidates;\n     {\n         LOCK(cs_vNodes);\n@@ -876,7 +898,9 @@ static bool AttemptToEvictConnection(bool fPreferNewConnection) {\n                 continue;\n             if (node->fDisconnect)\n                 continue;\n-            NodeEvictionCandidate candidate = {node->id, node->nTimeConnected, node->nMinPingUsecTime, node->addr, node->nKeyedNetGroup};\n+            NodeEvictionCandidate candidate = {node->id, node->nTimeConnected, node->nMinPingUsecTime,\n+                                               node->nLastBlockTime, node->nLastTXTime, node->fNetworkNode,\n+                                               node->fRelayTxes, node->pfilter != NULL, node->addr, node->nKeyedNetGroup};\n             vEvictionCandidates.push_back(candidate);\n         }\n     }\n@@ -899,6 +923,20 @@ static bool AttemptToEvictConnection(bool fPreferNewConnection) {\n \n     if (vEvictionCandidates.empty()) return false;\n \n+    // Protect 4 nodes that most recently sent us transactions.\n+    // An attacker cannot manipulate this metric without performing useful work.\n+    std::sort(vEvictionCandidates.begin(), vEvictionCandidates.end(), CompareNodeTXTime);\n+    vEvictionCandidates.erase(vEvictionCandidates.end() - std::min(4, static_cast<int>(vEvictionCandidates.size())), vEvictionCandidates.end());\n+\n+    if (vEvictionCandidates.empty()) return false;\n+\n+    // Protect 4 nodes that most recently sent us blocks.\n+    // An attacker cannot manipulate this metric without performing useful work.\n+    std::sort(vEvictionCandidates.begin(), vEvictionCandidates.end(), CompareNodeBlockTime);\n+    vEvictionCandidates.erase(vEvictionCandidates.end() - std::min(4, static_cast<int>(vEvictionCandidates.size())), vEvictionCandidates.end());\n+\n+    if (vEvictionCandidates.empty()) return false;\n+\n     // Protect the half of the remaining nodes which have been connected the longest.\n     // This replicates the non-eviction implicit behavior, and precludes attacks that start later.\n     std::sort(vEvictionCandidates.begin(), vEvictionCandidates.end(), ReverseCompareNodeTimeConnected);\n@@ -999,7 +1037,7 @@ static void AcceptConnection(const ListenSocket& hListenSocket) {\n \n     if (nInbound >= nMaxInbound)\n     {\n-        if (!AttemptToEvictConnection(whitelisted)) {\n+        if (!AttemptToEvictConnection()) {\n             // No connection to evict, disconnect the new connection\n             LogPrint(\"net\", \"failed to find an eviction candidate - connection dropped (full)\\n\");\n             CloseSocket(hSocket);\n@@ -2358,6 +2396,8 @@ CNode::CNode(SOCKET hSocketIn, const CAddress& addrIn, const std::string& addrNa\n     fSentAddr = false;\n     pfilter = new CBloomFilter();\n     timeLastMempoolReq = 0;\n+    nLastBlockTime = 0;\n+    nLastTXTime = 0;\n     nPingNonceSent = 0;\n     nPingUsecStart = 0;\n     nPingUsecTime = 0;"
      },
      {
        "sha": "2f96c58e305d4e93279a8f676987c7ad7c00513b",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d0ca81f7422b7eac0a5129c6fbccad77e36b85d/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d0ca81f7422b7eac0a5129c6fbccad77e36b85d/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=5d0ca81f7422b7eac0a5129c6fbccad77e36b85d",
        "patch": "@@ -416,6 +416,11 @@ class CNode\n \n     // Last time a \"MEMPOOL\" request was serviced.\n     std::atomic<int64_t> timeLastMempoolReq;\n+\n+    // Block and TXN accept times\n+    std::atomic<int64_t> nLastBlockTime;\n+    std::atomic<int64_t> nLastTXTime;\n+\n     // Ping time measurement:\n     // The pong reply we're expecting, or 0 if no pong expected.\n     uint64_t nPingNonceSent;"
      }
    ]
  },
  {
    "sha": "6ee7f05622c32431a9815a96b31a6a65a821fdcc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZWU3ZjA1NjIyYzMyNDMxYTk4MTVhOTZiMzFhNmE2NWE4MjFmZGNj",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2016-06-10T03:02:01Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2016-06-15T20:19:13Z"
      },
      "message": "Allow disconnecting a netgroup with only one member in eviction.\n\nWith the latest additions there are enough protective measures that\n we can take the training wheels off.",
      "tree": {
        "sha": "062e452009692f2062d50ed0b57e2ea5b193f902",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/062e452009692f2062d50ed0b57e2ea5b193f902"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6ee7f05622c32431a9815a96b31a6a65a821fdcc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ee7f05622c32431a9815a96b31a6a65a821fdcc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6ee7f05622c32431a9815a96b31a6a65a821fdcc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ee7f05622c32431a9815a96b31a6a65a821fdcc/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5d0ca81f7422b7eac0a5129c6fbccad77e36b85d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d0ca81f7422b7eac0a5129c6fbccad77e36b85d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5d0ca81f7422b7eac0a5129c6fbccad77e36b85d"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 0,
      "deletions": 7
    },
    "files": [
      {
        "sha": "89eb55ae94f1b19e0b9620dcd20a2da56d5484c4",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ee7f05622c32431a9815a96b31a6a65a821fdcc/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ee7f05622c32431a9815a96b31a6a65a821fdcc/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=6ee7f05622c32431a9815a96b31a6a65a821fdcc",
        "patch": "@@ -965,13 +965,6 @@ static bool AttemptToEvictConnection() {\n     // Reduce to the network group with the most connections\n     vEvictionCandidates = std::move(mapAddrCounts[naMostConnections]);\n \n-    // Do not disconnect peers if there is only one unprotected connection from their network group.\n-    // This step excessively favors netgroup diversity, and should be removed once more protective criteria are established.\n-    if (vEvictionCandidates.size() <= 1)\n-        // unless we prefer the new connection (for whitelisted peers)\n-        if (!fPreferNewConnection)\n-            return false;\n-\n     // Disconnect from the network group with the most connections\n     NodeId evicted = vEvictionCandidates.front().id;\n     LOCK(cs_vNodes);"
      }
    ]
  }
]