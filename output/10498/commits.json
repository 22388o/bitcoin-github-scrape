[
  {
    "sha": "9ad6746ccd6dc31141fd0144686b641e31bf626b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YWQ2NzQ2Y2NkNmRjMzExNDFmZDAxNDQ2ODZiNjQxZTMxYmY2MjZi",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-06-01T14:13:35Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-22T12:59:27Z"
      },
      "message": "Use static_cast instead of C-style casts for non-fundamental types\n\nA C-style cast is equivalent to try casting in the following order:\n\n1. const_cast(...)\n2. static_cast(...)\n3. const_cast(static_cast(...))\n4. reinterpret_cast(...)\n5. const_cast(reinterpret_cast(...))\n\nBy using static_cast<T>(...) explicitly we avoid the possibility\nof an unintentional and dangerous reinterpret_cast. Furthermore\nstatic_cast<T>(...) allows for easier grepping of casts.",
      "tree": {
        "sha": "a5f2a33bef9eae6fde623ba8fd9233f1bb9942a4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a5f2a33bef9eae6fde623ba8fd9233f1bb9942a4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9ad6746ccd6dc31141fd0144686b641e31bf626b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ad6746ccd6dc31141fd0144686b641e31bf626b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9ad6746ccd6dc31141fd0144686b641e31bf626b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ad6746ccd6dc31141fd0144686b641e31bf626b/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "98212745c8acb5cc4e688bbb3979bfd46b25f98a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/98212745c8acb5cc4e688bbb3979bfd46b25f98a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/98212745c8acb5cc4e688bbb3979bfd46b25f98a"
      }
    ],
    "stats": {
      "total": 88,
      "additions": 44,
      "deletions": 44
    },
    "files": [
      {
        "sha": "2775b13b275e71697211b07b0e7e83fda17c66ef",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=9ad6746ccd6dc31141fd0144686b641e31bf626b",
        "patch": "@@ -59,7 +59,7 @@ class CAddrInfo : public CAddress\n \n     template <typename Stream, typename Operation>\n     inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(*(CAddress*)this);\n+        READWRITE(*static_cast<CAddress*>(this));\n         READWRITE(source);\n         READWRITE(nLastSuccess);\n         READWRITE(nAttempts);"
      },
      {
        "sha": "dc29fac0d1dd002828f802a0e912cca64af27ed6",
        "filename": "src/core_read.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/core_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/core_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_read.cpp?ref=9ad6746ccd6dc31141fd0144686b641e31bf626b",
        "patch": "@@ -33,14 +33,14 @@ CScript ParseScript(const std::string& s)\n             if (op < OP_NOP && op != OP_RESERVED)\n                 continue;\n \n-            const char* name = GetOpName((opcodetype)op);\n+            const char* name = GetOpName(static_cast<opcodetype>(op));\n             if (strcmp(name, \"OP_UNKNOWN\") == 0)\n                 continue;\n             std::string strName(name);\n-            mapOpNames[strName] = (opcodetype)op;\n+            mapOpNames[strName] = static_cast<opcodetype>(op);\n             // Convenience: OP_ADD and just ADD are both recognized:\n             boost::algorithm::replace_first(strName, \"OP_\", \"\");\n-            mapOpNames[strName] = (opcodetype)op;\n+            mapOpNames[strName] = static_cast<opcodetype>(op);\n         }\n     }\n "
      },
      {
        "sha": "80183c620f79c45257ca9bef442923280f325af6",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=9ad6746ccd6dc31141fd0144686b641e31bf626b",
        "patch": "@@ -512,7 +512,7 @@ struct event_base* EventBase()\n static void httpevent_callback_fn(evutil_socket_t, short, void* data)\n {\n     // Static handler: simply call inner handler\n-    HTTPEvent *self = ((HTTPEvent*)data);\n+    HTTPEvent *self = static_cast<HTTPEvent*>(data);\n     self->handler();\n     if (self->deleteWhenTriggered)\n         delete self;"
      },
      {
        "sha": "f0ab6a29538a9f1828066efec3febc7bb84a63c3",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=9ad6746ccd6dc31141fd0144686b641e31bf626b",
        "patch": "@@ -299,7 +299,7 @@ CNode* CConnman::FindNode(const CNetAddr& ip)\n {\n     LOCK(cs_vNodes);\n     for (CNode* pnode : vNodes) {\n-        if ((CNetAddr)pnode->addr == ip) {\n+      if (static_cast<CNetAddr>(pnode->addr) == ip) {\n             return pnode;\n         }\n     }\n@@ -310,7 +310,7 @@ CNode* CConnman::FindNode(const CSubNet& subNet)\n {\n     LOCK(cs_vNodes);\n     for (CNode* pnode : vNodes) {\n-        if (subNet.Match((CNetAddr)pnode->addr)) {\n+        if (subNet.Match(static_cast<CNetAddr>(pnode->addr))) {\n             return pnode;\n         }\n     }\n@@ -332,7 +332,7 @@ CNode* CConnman::FindNode(const CService& addr)\n {\n     LOCK(cs_vNodes);\n     for (CNode* pnode : vNodes) {\n-        if ((CService)pnode->addr == addr) {\n+        if (static_cast<CService>(pnode->addr) == addr) {\n             return pnode;\n         }\n     }\n@@ -372,7 +372,7 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n             return nullptr;\n \n         // Look for an existing connection\n-        CNode* pnode = FindNode((CService)addrConnect);\n+        CNode* pnode = FindNode(static_cast<CService>(addrConnect));\n         if (pnode)\n         {\n             LogPrintf(\"Failed to open new connection, already connected\\n\");\n@@ -403,7 +403,7 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n             // Also store the name we used to connect in that CNode, so that future FindNode() calls to that\n             // name catch this early.\n             LOCK(cs_vNodes);\n-            CNode* pnode = FindNode((CService)addrConnect);\n+            CNode* pnode = FindNode(static_cast<CService>(addrConnect));\n             if (pnode)\n             {\n                 pnode->MaybeSetAddrName(std::string(pszDest));\n@@ -533,7 +533,7 @@ void CConnman::Ban(const CSubNet& subNet, const BanReason &banReason, int64_t ba\n     {\n         LOCK(cs_vNodes);\n         for (CNode* pnode : vNodes) {\n-            if (subNet.Match((CNetAddr)pnode->addr))\n+            if (subNet.Match(static_cast<CNetAddr>(pnode->addr)))\n                 pnode->fDisconnect = true;\n         }\n     }\n@@ -1946,7 +1946,7 @@ bool CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFai\n     }\n     if (!pszDest) {\n         if (IsLocal(addrConnect) ||\n-            FindNode((CNetAddr)addrConnect) || IsBanned(addrConnect) ||\n+            FindNode(static_cast<CNetAddr>(addrConnect)) || IsBanned(addrConnect) ||\n             FindNode(addrConnect.ToStringIPPort()))\n             return false;\n     } else if (FindNode(std::string(pszDest)))"
      },
      {
        "sha": "a5efba1ae1dd611a01cac387d859200b01095ab9",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=9ad6746ccd6dc31141fd0144686b641e31bf626b",
        "patch": "@@ -2616,7 +2616,7 @@ static bool SendRejectsAndCheckIfBanned(CNode* pnode, CConnman* connman)\n     CNodeState &state = *State(pnode->GetId());\n \n     for (const CBlockReject& reject : state.rejects) {\n-        connman->PushMessage(pnode, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, (std::string)NetMsgType::BLOCK, reject.chRejectCode, reject.strRejectReason, reject.hashBlock));\n+        connman->PushMessage(pnode, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, std::string(NetMsgType::BLOCK), reject.chRejectCode, reject.strRejectReason, reject.hashBlock));\n     }\n     state.rejects.clear();\n "
      },
      {
        "sha": "1547d9bcac829fa2ade76a697aec264b662ffa26",
        "filename": "src/netaddress.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/netaddress.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/netaddress.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.cpp?ref=9ad6746ccd6dc31141fd0144686b641e31bf626b",
        "patch": "@@ -526,17 +526,17 @@ unsigned short CService::GetPort() const\n \n bool operator==(const CService& a, const CService& b)\n {\n-    return (CNetAddr)a == (CNetAddr)b && a.port == b.port;\n+    return static_cast<CNetAddr>(a) == static_cast<CNetAddr>(b) && a.port == b.port;\n }\n \n bool operator!=(const CService& a, const CService& b)\n {\n-    return (CNetAddr)a != (CNetAddr)b || a.port != b.port;\n+    return static_cast<CNetAddr>(a) != static_cast<CNetAddr>(b) || a.port != b.port;\n }\n \n bool operator<(const CService& a, const CService& b)\n {\n-    return (CNetAddr)a < (CNetAddr)b || ((CNetAddr)a == (CNetAddr)b && a.port < b.port);\n+    return static_cast<CNetAddr>(a) < static_cast<CNetAddr>(b) || (static_cast<CNetAddr>(a) == static_cast<CNetAddr>(b) && a.port < b.port);\n }\n \n bool CService::GetSockAddr(struct sockaddr* paddr, socklen_t *addrlen) const"
      },
      {
        "sha": "aad3e5cf3a8f76d2aa9bf5754c8d04cd1c065fc2",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=9ad6746ccd6dc31141fd0144686b641e31bf626b",
        "patch": "@@ -528,7 +528,7 @@ bool HaveNameProxy() {\n bool IsProxy(const CNetAddr &addr) {\n     LOCK(cs_proxyInfos);\n     for (int i = 0; i < NET_MAX; i++) {\n-        if (addr == (CNetAddr)proxyInfo[i].proxy)\n+        if (addr == static_cast<CNetAddr>(proxyInfo[i].proxy))\n             return true;\n     }\n     return false;"
      },
      {
        "sha": "ed97c5d4ea3e64954743321a4a363d030c7c9ceb",
        "filename": "src/primitives/block.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/primitives/block.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/primitives/block.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.h?ref=9ad6746ccd6dc31141fd0144686b641e31bf626b",
        "patch": "@@ -86,14 +86,14 @@ class CBlock : public CBlockHeader\n     CBlock(const CBlockHeader &header)\n     {\n         SetNull();\n-        *((CBlockHeader*)this) = header;\n+        *(static_cast<CBlockHeader*>(this)) = header;\n     }\n \n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n     inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(*(CBlockHeader*)this);\n+        READWRITE(*static_cast<CBlockHeader*>(this));\n         READWRITE(vtx);\n     }\n "
      },
      {
        "sha": "8e974c372a62852572b849efd6399886ea5e523f",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=9ad6746ccd6dc31141fd0144686b641e31bf626b",
        "patch": "@@ -301,8 +301,8 @@ class CAddress : public CService\n             READWRITE(nTime);\n         uint64_t nServicesInt = nServices;\n         READWRITE(nServicesInt);\n-        nServices = (ServiceFlags)nServicesInt;\n-        READWRITE(*(CService*)this);\n+        nServices = static_cast<ServiceFlags>(nServicesInt);\n+        READWRITE(*static_cast<CService*>(this));\n     }\n \n     // TODO: make private (improves encapsulation)"
      },
      {
        "sha": "7ac440c0993620c01b1deb5d68d33c8c00d429e2",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=9ad6746ccd6dc31141fd0144686b641e31bf626b",
        "patch": "@@ -709,7 +709,7 @@ int main(int argc, char *argv[])\n         if (BitcoinCore::baseInitialize()) {\n             app.requestInitialize();\n #if defined(Q_OS_WIN) && QT_VERSION >= 0x050000\n-            WinShutdownMonitor::registerShutdownBlockReason(QObject::tr(\"%1 didn't yet exit safely...\").arg(QObject::tr(PACKAGE_NAME)), (HWND)app.getMainWinId());\n+            WinShutdownMonitor::registerShutdownBlockReason(QObject::tr(\"%1 didn't yet exit safely...\").arg(QObject::tr(PACKAGE_NAME)), static_cast<HWND>(app.getMainWinId()));\n #endif\n             app.exec();\n             app.requestShutdown();"
      },
      {
        "sha": "c86a3d731a0b1a420506632f1b096744c721e7d9",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=9ad6746ccd6dc31141fd0144686b641e31bf626b",
        "patch": "@@ -598,7 +598,7 @@ void BitcoinGUI::createTrayIconMenu()\n #else\n     // Note: On Mac, the dock icon is used to provide the tray's functionality.\n     MacDockIconHandler *dockIconHandler = MacDockIconHandler::instance();\n-    dockIconHandler->setMainWindow((QMainWindow *)this);\n+    dockIconHandler->setMainWindow(static_cast<QMainWindow*>(this));\n     trayIconMenu = dockIconHandler->dockMenu();\n #endif\n \n@@ -921,13 +921,13 @@ void BitcoinGUI::message(const QString &title, const QString &message, unsigned\n             buttons = QMessageBox::Ok;\n \n         showNormalIfMinimized();\n-        QMessageBox mBox((QMessageBox::Icon)nMBoxIcon, strTitle, message, buttons, this);\n+        QMessageBox mBox(static_cast<QMessageBox::Icon>(nMBoxIcon), strTitle, message, buttons, this);\n         int r = mBox.exec();\n         if (ret != nullptr)\n             *ret = r == QMessageBox::Ok;\n     }\n     else\n-        notificator->notify((Notificator::Class)nNotifyIcon, strTitle, message);\n+        notificator->notify(static_cast<Notificator::Class>(nNotifyIcon), strTitle, message);\n }\n \n void BitcoinGUI::changeEvent(QEvent *e)"
      },
      {
        "sha": "b098a2ec92d8055a576d2d5465b41ffef7e0914d",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=9ad6746ccd6dc31141fd0144686b641e31bf626b",
        "patch": "@@ -145,7 +145,7 @@ CoinControlDialog::CoinControlDialog(const PlatformStyle *_platformStyle, QWidge\n     if (settings.contains(\"nCoinControlMode\") && !settings.value(\"nCoinControlMode\").toBool())\n         ui->radioTreeMode->click();\n     if (settings.contains(\"nCoinControlSortColumn\") && settings.contains(\"nCoinControlSortOrder\"))\n-        sortView(settings.value(\"nCoinControlSortColumn\").toInt(), ((Qt::SortOrder)settings.value(\"nCoinControlSortOrder\").toInt()));\n+        sortView(settings.value(\"nCoinControlSortColumn\").toInt(), (static_cast<Qt::SortOrder>(settings.value(\"nCoinControlSortOrder\").toInt())));\n }\n \n CoinControlDialog::~CoinControlDialog()\n@@ -431,7 +431,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n \n         if (amount > 0)\n         {\n-            CTxOut txout(amount, (CScript)std::vector<unsigned char>(24, 0));\n+            CTxOut txout(amount, static_cast<CScript>(std::vector<unsigned char>(24, 0)));\n             txDummy.vout.push_back(txout);\n             fDust |= IsDust(txout, ::dustRelayFee);\n         }\n@@ -522,7 +522,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n             // Never create dust outputs; if we would, just add the dust to the fee.\n             if (nChange > 0 && nChange < MIN_CHANGE)\n             {\n-                CTxOut txout(nChange, (CScript)std::vector<unsigned char>(24, 0));\n+                CTxOut txout(nChange, static_cast<CScript>(std::vector<unsigned char>(24, 0)));\n                 if (IsDust(txout, ::dustRelayFee))\n                 {\n                     nPayFee += nChange;"
      },
      {
        "sha": "31f4739c66c4a2718d7ace32749f834356586ec0",
        "filename": "src/qt/coincontroltreewidget.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/qt/coincontroltreewidget.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/qt/coincontroltreewidget.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroltreewidget.cpp?ref=9ad6746ccd6dc31141fd0144686b641e31bf626b",
        "patch": "@@ -24,7 +24,7 @@ void CoinControlTreeWidget::keyPressEvent(QKeyEvent *event)\n     else if (event->key() == Qt::Key_Escape) // press esc -> close dialog\n     {\n         event->ignore();\n-        CoinControlDialog *coinControlDialog = (CoinControlDialog*)this->parentWidget();\n+        CoinControlDialog *coinControlDialog = static_cast<CoinControlDialog*>(this->parentWidget());\n         coinControlDialog->done(QDialog::Accepted);\n     }\n     else"
      },
      {
        "sha": "90f3ab26adc4a591746fe7f4d1bb41df3d9898b5",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=9ad6746ccd6dc31141fd0144686b641e31bf626b",
        "patch": "@@ -352,7 +352,7 @@ void SendCoinsDialog::on_sendButton_clicked()\n     SendConfirmationDialog confirmationDialog(tr(\"Confirm send coins\"),\n         questionString.arg(formatted.join(\"<br />\")), SEND_CONFIRM_DELAY, this);\n     confirmationDialog.exec();\n-    QMessageBox::StandardButton retval = (QMessageBox::StandardButton)confirmationDialog.result();\n+    QMessageBox::StandardButton retval = static_cast<QMessageBox::StandardButton>(confirmationDialog.result());\n \n     if(retval != QMessageBox::Yes)\n     {"
      },
      {
        "sha": "4686361605a5f134294d40ad99132d77ae5a20bd",
        "filename": "src/qt/splashscreen.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/qt/splashscreen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/qt/splashscreen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.cpp?ref=9ad6746ccd6dc31141fd0144686b641e31bf626b",
        "patch": "@@ -38,7 +38,7 @@ SplashScreen::SplashScreen(Qt::WindowFlags f, const NetworkStyle *networkStyle)\n     float fontFactor            = 1.0;\n     float devicePixelRatio      = 1.0;\n #if QT_VERSION > 0x050100\n-    devicePixelRatio = ((QGuiApplication*)QCoreApplication::instance())->devicePixelRatio();\n+    devicePixelRatio = static_cast<QGuiApplication*>(QCoreApplication::instance())->devicePixelRatio();\n #endif\n \n     // define text to place"
      },
      {
        "sha": "7e771c428770f2838ff2e27cde351b0b010f03a6",
        "filename": "src/qt/transactionview.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/qt/transactionview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/qt/transactionview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.cpp?ref=9ad6746ccd6dc31141fd0144686b641e31bf626b",
        "patch": "@@ -309,7 +309,7 @@ void TransactionView::chooseWatchonly(int idx)\n     if(!transactionProxyModel)\n         return;\n     transactionProxyModel->setWatchOnlyFilter(\n-        (TransactionFilterProxy::WatchOnlyFilter)watchOnlyWidget->itemData(idx).toInt());\n+        static_cast<TransactionFilterProxy::WatchOnlyFilter>(watchOnlyWidget->itemData(idx).toInt()));\n }\n \n void TransactionView::changedPrefix(const QString &prefix)"
      },
      {
        "sha": "f5ea65db72f1a097f6ebb94a537df266367312d8",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=9ad6746ccd6dc31141fd0144686b641e31bf626b",
        "patch": "@@ -701,7 +701,7 @@ bool WalletModel::bumpFee(uint256 hash)\n     questionString.append(\"</td></tr></table>\");\n     SendConfirmationDialog confirmationDialog(tr(\"Confirm fee bump\"), questionString);\n     confirmationDialog.exec();\n-    QMessageBox::StandardButton retval = (QMessageBox::StandardButton)confirmationDialog.result();\n+    QMessageBox::StandardButton retval = static_cast<QMessageBox::StandardButton>(confirmationDialog.result());\n \n     // cancel sign&broadcast if users doesn't want to bump the fee\n     if (retval != QMessageBox::Yes) {"
      },
      {
        "sha": "23e0bf72763eaef7dc89755008b9201f1dc82632",
        "filename": "src/qt/winshutdownmonitor.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/qt/winshutdownmonitor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/qt/winshutdownmonitor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/winshutdownmonitor.cpp?ref=9ad6746ccd6dc31141fd0144686b641e31bf626b",
        "patch": "@@ -56,7 +56,7 @@ bool WinShutdownMonitor::nativeEventFilter(const QByteArray &eventType, void *pM\n void WinShutdownMonitor::registerShutdownBlockReason(const QString& strReason, const HWND& mainWinId)\n {\n     typedef BOOL (WINAPI *PSHUTDOWNBRCREATE)(HWND, LPCWSTR);\n-    PSHUTDOWNBRCREATE shutdownBRCreate = (PSHUTDOWNBRCREATE)GetProcAddress(GetModuleHandleA(\"User32.dll\"), \"ShutdownBlockReasonCreate\");\n+    PSHUTDOWNBRCREATE shutdownBRCreate = static_cast<PSHUTDOWNBRCREATE>(GetProcAddress(GetModuleHandleA(\"User32.dll\"), \"ShutdownBlockReasonCreate\"));\n     if (shutdownBRCreate == nullptr) {\n         qWarning() << \"registerShutdownBlockReason: GetProcAddress for ShutdownBlockReasonCreate failed\";\n         return;"
      },
      {
        "sha": "ca1212fb808825231d8e9035bed5060f0779e8fe",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=9ad6746ccd6dc31141fd0144686b641e31bf626b",
        "patch": "@@ -567,7 +567,7 @@ class CScript : public CScriptBase\n             pc += nSize;\n         }\n \n-        opcodeRet = (opcodetype)opcode;\n+        opcodeRet = static_cast<opcodetype>(opcode);\n         return true;\n     }\n "
      },
      {
        "sha": "9239bb95167d1a4f30a61d557a32de377ad82955",
        "filename": "src/test/versionbits_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/test/versionbits_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/test/versionbits_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/versionbits_tests.cpp?ref=9ad6746ccd6dc31141fd0144686b641e31bf626b",
        "patch": "@@ -211,7 +211,7 @@ BOOST_AUTO_TEST_CASE(versionbits_test)\n     const auto chainParams = CreateChainParams(CBaseChainParams::MAIN);\n     const Consensus::Params &mainnetParams = chainParams->GetConsensus();\n     for (int i=0; i<(int) Consensus::MAX_VERSION_BITS_DEPLOYMENTS; i++) {\n-        uint32_t bitmask = VersionBitsMask(mainnetParams, (Consensus::DeploymentPos)i);\n+        uint32_t bitmask = VersionBitsMask(mainnetParams, static_cast<Consensus::DeploymentPos>(i));\n         // Make sure that no deployment tries to set an invalid bit.\n         BOOST_CHECK_EQUAL(bitmask & ~(uint32_t)VERSIONBITS_TOP_MASK, bitmask);\n \n@@ -223,7 +223,7 @@ BOOST_AUTO_TEST_CASE(versionbits_test)\n         // activated soft fork could be later changed to be earlier to avoid\n         // overlap.)\n         for (int j=i+1; j<(int) Consensus::MAX_VERSION_BITS_DEPLOYMENTS; j++) {\n-            if (VersionBitsMask(mainnetParams, (Consensus::DeploymentPos)j) == bitmask) {\n+            if (VersionBitsMask(mainnetParams, static_cast<Consensus::DeploymentPos>(j)) == bitmask) {\n                 BOOST_CHECK(mainnetParams.vDeployments[j].nStartTime > mainnetParams.vDeployments[i].nTimeout ||\n                         mainnetParams.vDeployments[i].nStartTime > mainnetParams.vDeployments[j].nTimeout);\n             }"
      },
      {
        "sha": "86237cd62c69724018401fadbaf44800e8b669bc",
        "filename": "src/torcontrol.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/torcontrol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/torcontrol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/torcontrol.cpp?ref=9ad6746ccd6dc31141fd0144686b641e31bf626b",
        "patch": "@@ -133,7 +133,7 @@ TorControlConnection::~TorControlConnection()\n \n void TorControlConnection::readcb(struct bufferevent *bev, void *ctx)\n {\n-    TorControlConnection *self = (TorControlConnection*)ctx;\n+    TorControlConnection *self = static_cast<TorControlConnection*>(ctx);\n     struct evbuffer *input = bufferevent_get_input(bev);\n     size_t n_read_out = 0;\n     char *line;\n@@ -178,7 +178,7 @@ void TorControlConnection::readcb(struct bufferevent *bev, void *ctx)\n \n void TorControlConnection::eventcb(struct bufferevent *bev, short what, void *ctx)\n {\n-    TorControlConnection *self = (TorControlConnection*)ctx;\n+    TorControlConnection *self = static_cast<TorControlConnection*>(ctx);\n     if (what & BEV_EVENT_CONNECTED) {\n         LogPrint(BCLog::TOR, \"tor: Successfully connected!\\n\");\n         self->connected(*self);\n@@ -725,7 +725,7 @@ fs::path TorController::GetPrivateKeyFile()\n \n void TorController::reconnect_cb(evutil_socket_t fd, short what, void *arg)\n {\n-    TorController *self = (TorController*)arg;\n+    TorController *self = static_cast<TorController*>(arg);\n     self->Reconnect();\n }\n "
      },
      {
        "sha": "ec7513f9db6a6599722f5be278f6fe6d8f753b7d",
        "filename": "src/txdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/txdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/txdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.h?ref=9ad6746ccd6dc31141fd0144686b641e31bf626b",
        "patch": "@@ -46,7 +46,7 @@ struct CDiskTxPos : public CDiskBlockPos\n \n     template <typename Stream, typename Operation>\n     inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(*(CDiskBlockPos*)this);\n+        READWRITE(*static_cast<CDiskBlockPos*>(this));\n         READWRITE(VARINT(nTxOffset));\n     }\n "
      },
      {
        "sha": "c79804074324fe846ac3c01ef5bf584c79424484",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=9ad6746ccd6dc31141fd0144686b641e31bf626b",
        "patch": "@@ -1549,9 +1549,9 @@ int32_t ComputeBlockVersion(const CBlockIndex* pindexPrev, const Consensus::Para\n     int32_t nVersion = VERSIONBITS_TOP_BITS;\n \n     for (int i = 0; i < (int)Consensus::MAX_VERSION_BITS_DEPLOYMENTS; i++) {\n-        ThresholdState state = VersionBitsState(pindexPrev, params, (Consensus::DeploymentPos)i, versionbitscache);\n+        ThresholdState state = VersionBitsState(pindexPrev, params, static_cast<Consensus::DeploymentPos>(i), versionbitscache);\n         if (state == THRESHOLD_LOCKED_IN || state == THRESHOLD_STARTED) {\n-            nVersion |= VersionBitsMask(params, (Consensus::DeploymentPos)i);\n+            nVersion |= VersionBitsMask(params, static_cast<Consensus::DeploymentPos>(i));\n         }\n     }\n "
      },
      {
        "sha": "cd38d279ed28c97e8ce6f88fe9a54fa0dd8ed454",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=9ad6746ccd6dc31141fd0144686b641e31bf626b",
        "patch": "@@ -399,7 +399,7 @@ class CWalletTx : public CMerkleTx\n                 mapValue[\"timesmart\"] = strprintf(\"%u\", nTimeSmart);\n         }\n \n-        READWRITE(*(CMerkleTx*)this);\n+        READWRITE(*static_cast<CMerkleTx*>(this));\n         std::vector<CMerkleTx> vUnused; //!< Used to be vtxPrev\n         READWRITE(vUnused);\n         READWRITE(mapValue);"
      }
    ]
  }
]