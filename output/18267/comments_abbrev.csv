DrahtBot,2020-03-05 15:30:02,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19937 (signet mining utility by ajtowns)\n* #19438 (Introduce deploymentstatus by ajtowns)\n\nIf you consider this pull r",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-595290205,595290205,
practicalswift,2020-03-05 21:43:30,Concept ACK,https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-595462480,595462480,
jonatack,2020-03-22 20:34:24,"Concept ACK. Local build and tests green, will review shortly.",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-602268095,602268095,
instagibbs,2020-04-08 14:18:21,"> bitcoin-qt: qt/bitcoin.cpp:528: int GuiMain(int, char**): Assertion `!networkStyle.isNull()' failed.\n\noops",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-610986949,610986949,
kallewoof,2020-04-09 03:42:59,"> > bitcoin-qt: qt/bitcoin.cpp:528: int GuiMain(int, char**): Assertion `!networkStyle.isNull()' failed.\n> \n> oops\n\nOh.. Yeah I wanted to keep this ultra minimal, but I should probably not crash QT, yeah... :)",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-611311289,611311289,
kallewoof,2020-04-09 04:19:35,"> concept ACK, scope ACK, if I can actually connect to signet(still waiting for connections from DNS response)\n\nWeird. I just now started a fresh instance with a new datadir and it instantly connected and started syncing blocks..",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-611319221,611319221,
jonatack,2020-04-27 18:26:29,Signet worked perfectly the first try :100: ...following the instructions at https://gist.github.com/kallewoof/98b6d8dbe126d2b6f47da0ddccd2aa5a... now reviewing,https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-620154768,620154768,
jonatack,2020-04-28 12:18:23,"Er, I was excited (e.g. ""this is so cool"") and should have been more specific.\n\n<details>\n<summary>Here is what I did after building this PR branch... :memo:</summary>\n<p>\n\n```bash\ncd src\nmkdir signet\necho ""signet=1"" > signet/bitcoin.conf\n\n./bitcoind -datadir=signet  # in a separate terminal buffer to watch the debug log\n\n./bitcoin-cli -datadir=signet -getinfo\n\n./bitc",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-620569419,620569419,
jonatack,2020-04-29 15:54:17,Made a few signet transactions using the GUI. Works well.,https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-621302081,621302081,
kallewoof,2020-04-29 17:13:15,"Thanks a lot @jonatack and @fjahr for your feedback. I've addressed all of your comments (let me know if I ignored something), so please re-review!",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-621345945,621345945,
fjahr,2020-04-29 17:27:27,"> First a conceptual question: I might be missing something and this might have been discussed previously but as a participant in the network (not the signer) what prevents me from taking the last block, mining a higher POW for it and then sending it out to replace the original block from the signer? If I understand it correctly, this is possible but attacks with this are probably not feasible bec",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-621353486,621353486,
kallewoof,2020-04-30 03:33:59,"@fjahr Indeed, sorry about that!\n\n> First a conceptual question: I might be missing something and this might have been discussed previously but as a participant in the network (not the signer) what prevents me from taking the last block, mining a higher POW for it and then sending it out to replace the original block from the signer? If I understand it correctly, this is possible but attacks w",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-621592585,621592585,
fjahr,2020-04-30 14:57:11,"Needs another rebase, but ACK 27619339eb4dc348a32aa68b517be5b49df3d6a3. Reviewed code including latest changes and synced a node and tested sending and receiving txs and some other basic functionalities, mostly info calls.\n\nOne thing I noticed is that the progress during sync currently doesn't work (shows 1.0 from the start) because there is no `chainTxData` for Signet, I guess that is somethi",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-621907454,621907454,
brakmic,2020-04-30 18:11:20,"ACK 27619339eb4dc348a32aa68b517be5b49df3d6a3\n\nBuilt, run and tested on macOS Catalina 10.15.4\n\n**Unit tests** executed successfully.\n\nDone **manual tests** with `bitcoind` and bitcoin.conf that contained `signet=1` flag.\n\n**Examples**:\n\n* Query daemon info\n\n`./bitcoin-cli -datadir=signet -getinfo`\n\n```shell\n{\n  ""version"": 209900,\n  ""blocks"": 2875,\n  ""headers"": 8",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-622016262,622016262,
kallewoof,2020-05-01 08:43:19,"@fjahr \n\nThanks for the re-review; rebased!\n\n> One thing I noticed is that the progress during sync currently doesn't work (shows 1.0 from the start) because there is no chainTxData for Signet, I guess that is something that gets added by maintainers? EDIT: Yes it is. https://github.com/bitcoin/bitcoin/blob/master/doc/release-process.md#before-branch-off\n\nYeah, I think there's discussi",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-622303723,622303723,
brakmic,2020-05-01 08:54:05," > @brakmic Thanks a lot for the detailed review. Would love a re-ACK now that it's been rebased :)\n\nYou're welcome!\n\nI've recompiled your latest code as soon as it was available...on my **Raspberry Pi4** :) \n\n```shell\nuname -a\nLinux lnd 4.19.105-v8+ #1296 SMP PREEMPT Thu Feb 20 16:34:11 GMT 2020 aarch64 GNU/Linux\n```\nJust wanted to know how it works there. And I am keeping it ",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-622307198,622307198,
fjahr,2020-05-01 13:15:09,"re-ACK 483fbce2b87de171112a0f304095797a6b5d3d08\n\nOnly changes since last review were rebase and movement + usage of `MINIMUM_WITNESS_COMMITMENT` constant.\n\n> Yeah, I think there's discussion to actually only display this for specific networks (mainnet, and testnet I guess). Since you can spin up custom signets, it seems not worthwhile to add checkpoints and such, but it's up to the contrib",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-622383322,622383322,
kallewoof,2020-05-02 06:06:08,Removed `inline`; also replaced two `Returns -1 if ...` with `Returns NO_WITNESS_COMMITMENT if ...`.,https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-622690128,622690128,
kallewoof,2020-05-04 06:13:04,"After feedback, I've restored `GetWitnessCommitmentIndex` into `validation.cpp`.\n\nThis also introduces the transaction-based variant which is used by the signet code.\n\nI.e.\n\n* the ""move GWCI from validation into primitives/block"" commit is gone\n* in its stead is a new ""add tx based GWCI variants"" commit\n* the remainder of the witness commitment section code has been moved into `sig",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-623276883,623276883,
kallewoof,2020-05-06 04:28:26,Addressed @jonatack nits.,https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-624435366,624435366,
kallewoof,2020-05-07 06:20:04,"~Fixed documentation for `-signet_hrp` (said `suffix`, meant `prefix`).~\n\nRemoved `-signet_hrp` (see https://github.com/bitcoin/bitcoin/pull/18267#discussion_r420017940)",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-625053105,625053105,
brakmic,2020-05-07 11:44:53,"re-ACK 647c10fe82adcd5c4721424718afc67ce51b6c83\n\nBtw., I created a simple bash script for automatic building & running of Signet binaries on my 64bit Raspberry Pi. Should be able to run on other Linux systems as well.\n\nhttps://gist.github.com/brakmic/37c7618ad6e8bb33c6a271fe682e38a3\n\nCould maybe help to get more people to install and run Bitcoin Signet. :)\n\n*The script also asks fo",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-625204514,625204514,
kallewoof,2020-05-07 18:26:33,"@brakmic Wow, very nice! Also, thanks for the heads up on 502 error. Investigating that.",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-625422076,625422076,
kallewoof,2020-05-07 18:41:09,"@brakmic Tried that script on a MacBook, but it doesn't like some of the arguments (see below). Still, very cool :)\n\n(And the faucet is back up.)\n\n```\n$ bash ./runsignet.sh\ntr: Illegal byte sequence\ntr: Illegal byte sequence\nCreating backup datadir /Users/me/Downloads/signet/data/signet_datadir_backup\nmkdir: /Users/me/Downloads/signet/data: No such file or directory\nmkdir: /Use",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-625429274,625429274,
brakmic,2020-05-07 18:43:38,"> @brakmic Tried that script on a MacBook, but it doesn't like some of the arguments (see below). Still, very cool :)\n> \n\nOh, I didn't test it on a Mac. But as I luckily have one, I'll investigate it and come back to you (with a hopefully updated version) :)\n\n> (And the faucet is back up.)\n> \n\nAwesome! Thanks! Now I can test the last few commands from the script.\n\n",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-625430464,625430464,
brakmic,2020-05-07 22:42:21,"> @brakmic Tried that script on a MacBook, but it doesn't like some of the arguments (see below). Still, very cool :)\n> \n> ```\n> $ bash ./runsignet.sh\n> tr: Illegal byte sequence\n> tr: Illegal byte sequence\n\nHave fixed it. The problem was in random password/username generation sequence.\n\n**tr** on macOS doesn't like [certain byte sequences](https://unix.stackexchange.com/a/45406)",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-625533405,625533405,
kallewoof,2020-05-08 06:20:27,"@brakmic Works better now! The rpcpassword ended up with a '#' in it, though, so this happened:\n```\nError: Error reading configuration file: parse error on line 8, using # in rpcpassword can be ambiguous and should be avoided\n```\n",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-625654711,625654711,
brakmic,2020-05-08 06:33:27,"> @brakmic Works better now! The rpcpassword ended up with a '#' in it, though, so this happened:\n> \n> ```\n> Error: Error reading configuration file: parse error on line 8, using # in rpcpassword can be ambiguous and should be avoided\n> ```\n\nAh, yes, I was too generous with available random chars for user/pwd. Fixed now. Thanks!",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-625659336,625659336,
kallewoof,2020-05-08 06:49:22,"Works better this time; though it needs to wait for the node to finish starting up before it continues (am seeing a bunch of\n```\nerror code: -28\nerror message:\nLoading wallet...\n```\nnow).",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-625665271,625665271,
brakmic,2020-05-08 07:37:00,"> Works better this time; though it needs to wait for the node to finish starting up before it continues (am seeing a bunch of\n> \n> ```\n> error code: -28\n> error message:\n> Loading wallet...\n> ```\n> \n> now).\n\nI think it's because the script was too fast for the IBD. Have put a simple ""sleep 10s"", just to let it download a few blocks.\n\nAlso, on macOS there is no manual BDB4 ",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-625683484,625683484,
kallewoof,2020-05-08 07:50:15,"@brakmic Check out https://gist.github.com/carnhofdaki/60edef577f637ef2dbf4d244e4e279c2 by @carnhofdaki -- it does some fancy stuff to hold until the server is up. (I think that script is outdated now, but not sure. See https://github.com/bitcoin/bitcoin/pull/16411#issuecomment-547558988 for context.)",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-625689157,625689157,
brakmic,2020-05-08 07:53:09,"> @brakmic Check out https://gist.github.com/carnhofdaki/60edef577f637ef2dbf4d244e4e279c2 by @carnhofdaki -- it does some fancy stuff to hold until the server is up. (I think that script is outdated now, but not sure. See [#16411 (comment)](https://github.com/bitcoin/bitcoin/pull/16411#issuecomment-547558988) for context.)\n\nThanks. I was wrong: the address got generated. The message ""missing a",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-625690363,625690363,
brakmic,2020-05-08 08:21:25,"@kallewoof \n\nBegging for coins from your faucet works now :)\n\n![coin_faucet](https://raw.githubusercontent.com/brakmic/bazaar/master/images/random/signet_script_finish.png)",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-625701760,625701760,
fjahr,2020-05-08 15:24:03,"re-ACK 647c10fe82adcd5c4721424718afc67ce51b6c83\n\nDid full review of earlier commits and checked later ones for no significant changes. Most notable changes:\n\n- rebased\n- reverted move of `GetWitnessCommitmentIndex`\n- moved `GetWitnessCommitmentSection` to signet.cpp\n- removed RPC `-signet_hrp`\n- introduced `g_signet_blockscript`\n- more nits addressed\n\nTests passed locally.",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-625868867,625868867,
jonatack,2020-05-10 17:17:08,"> I think it's because the script was too fast for the IBD. Have put a simple ""sleep 10s"", just to let it download a few blocks.\n\nEven simpler, add `-rpcwait` to the CLI command?",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-626360101,626360101,
jonatack,2020-05-10 17:28:58,"Code review re-ACK 647c10f only change since previous review is removal of the `-signet_hrp` ""human-readable part"" user option, per git diff d4e204b 647c10f\n\n<details><summary><code>git diff d4e204b 647c10f</code></summary><p>\n\n```diff\n$ git diff d4e204b 647c10f\ndiff --git a/src/chainparams.cpp b/src/chainparams.cpp\nindex 797b22fbe9..669010c53e 100644\n--- a/src/chainparams.cpp\n++",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-626361626,626361626,
kallewoof,2020-05-11 06:18:08,"There are some really nice patches on top of this PR at https://github.com/ajtowns/bitcoin/commits/202005-signet-tweaks by @ajtowns -- hopefully those can be in a follow-up PR, as I think this PR is close to merge-ready (if not, I guess I can merge them in here; we'll see).",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-626494619,626494619,
MarcoFalke,2020-05-11 11:53:36,"@kallewoof I think for consensus changes the bar is a bit higher than for wallet changes (or other changes) and we should aim to get them right the first time with as little back-and-forth on the way there.\n\nThe non-wip commits seem to get rid of quite a few chunks of code (and globals), so I wouldn't mind having them squashed (with the appropriate Co-Author tag) into the commits here before m",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-626655676,626655676,
kallewoof,2020-05-12 10:40:12,Merged all except WIP commit into current branch.,https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-627261658,627261658,
fjahr,2020-05-23 16:09:48,"re-ACK ae117d836a3371d294b03f73dff33604d1112702\n\nOnly changes since my last review were replacing the blockscript global with the signet challenge in the consensus params and getting rid of the `CheckBlockSolution` function. ",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-633084510,633084510,
fjahr,2020-06-01 19:59:06,"re-ACK 03ac167829d555de456d684f6580c6429253c7f0\n\nChanges since my last review only addressed various review comments that came up in between. ",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-637071356,637071356,
pinheadmz,2020-07-02 14:48:55,"Concept ACK\n\nBuild OK (OSX), Tests pass locally OK functional + unit.\n\nThis is all very cool, going to run a node in a second but I have some general questions:\n\n1. Should there be additional test cases for address and key strings for signet in `src/test/data/key_io_valid.json` ?\n2. I'm unclear what the outcome would be if the challenge script had `CSV` or `CLTV` -- does the method f",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-653051326,653051326,
instagibbs,2020-07-02 14:56:36,">  I wonder if the private key you set should be revealed? \n\nThis would turn into testnet with mining essentially. Private key being secret is important.",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-653055802,653055802,
pinheadmz,2020-07-02 15:02:35,"Running on signet now. I noticed in the log all blocks during IBD were reported as `progress=1.000000`\n\nI wonder if it makes sense to add logic in `GuessVerificationProgress()` that just compares current wall-clock time to the timestamp in the chain tip (I think this is how we used to do it before hard coding an estimated TX/s into chainparams)\n\nOr maybe there's a value equivalent to ""1 tx",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-653059667,653059667,
instagibbs,2020-07-02 15:04:19,"Might want to look how Elements(Liquid nodes) does it. Should be directly\nusable?\n\nOn Thu, Jul 2, 2020, 11:02 AM Matthew Zipkin <notifications@github.com>\nwrote:\n\n> Running on signet now. I noticed in the log all blocks during IBD were\n> reported as progress=1.000000\n>\n> I wonder if it makes sense to add logic in GuessVerificationProgress()\n> that just compares current wall-clock time to",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-653060753,653060753,
pinheadmz,2020-07-02 15:16:45,"> > I wonder if the private key you set should be revealed?\n> \n> This would turn into testnet with mining essentially. Private key being secret is important.\n\nOK - so this PR represents one single signet that everyone will use instead of testnet? If so then I understand keeping the key private, except that it could be a burden on the single ""host"".\n\nMy impression is that groups of deve",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-653067954,653067954,
pinheadmz,2020-07-02 16:06:47,"Connected to signet, got coins from faucet, did a sendmany to a dozen internal wallet addresses - all good! Had to set `fallbackfee` for this network to send.\n\nAlso tried starting a signet with ` -signet_blockscript=51` (`OP_TRUE`) and still got `block solution missing` when attempting to generate. This branch doesn't have the mining code yet but I thought I could trick it by using an ""anyone ",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-653095871,653095871,
kallewoof,2020-07-13 04:17:11,"@pinheadmz \n\n> OK - so this PR represents one single signet that everyone will use instead of testnet? If so then I understand keeping the key private, except that it could be a burden on the single ""host"".\n> \n> My impression is that groups of developers will launch their own signets with custom parameters for various reasons, and this PR just defines a generic framework. I guess it just l",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-657349391,657349391,
kallewoof,2020-07-13 04:25:22,"@practicalswift @ajtowns @pinheadmz and others, thanks a lot for review, and sorry about delay in responding. I've pushed two to-squash commits. Feedback welcome!",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-657350987,657350987,
pinheadmz,2020-07-14 15:22:23,"@instagibbs \n> Might want to look how Elements(Liquid nodes) does it. Should be directly usable?\n\nLooks like since Liquid has ""guaranteed"" block time (signet will too, right?) IBD progress is computed from the timestamp of the chain tip and current time.\n\nhttps://github.com/Blockstream/liquid/commit/5652022f4b21c8dd6bb595ede4c35e8ec62d5765#diff-24efdb00bfbe56b140fb006b562cc70bR5321-R5326",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-658243537,658243537,
pinheadmz,2020-07-14 16:00:20,"Confirmed recent rebase is minimal (just added 2 commits, not sure why other commit hashes changed or why github identified it as a force-push?)\n\nStill builds OK on OSX, unit tests pass. Synced to signet OK.\n\nJust waiting to hear more opinions on the commitment location before ACKing: https://github.com/bitcoin/bitcoin/pull/18267/commits/9fd83904dd745be7ffaf51262e344e6c3dcf07cc#r453420748",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-658264426,658264426,
kallewoof,2020-07-14 23:10:33,"@pinheadmz \n\nThanks for the re-review!\n\n> Looks like since Liquid has ""guaranteed"" block time (signet will too, right?) IBD progress is computed from the timestamp of the chain tip and current time.\n\nSignet will be using proof of work as well, so it's not guaranteed per se, but it should be very unusual to see big discrepancies in block times due to the limited difficulty (currently pl",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-658456829,658456829,
adamjonas,2020-07-15 00:51:07,"For what it's worth, I ran the functional tests for wallet_basic.py and wallet_address_types.py four times against 9fd83904d and didn't get any failures.",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-658483596,658483596,
kallewoof,2020-07-30 03:14:51,"This pull request has been updated to reflect the changes in https://github.com/bitcoin/bips/pull/947 -- see https://github.com/ajtowns/bitcoin/commits/202007-signet for details on what changed (note: some commits were out of scope for this PR, such as generation, and have not been cherry-picked/merged here).",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-666066277,666066277,
kallewoof,2020-08-03 03:34:18,Addressed nits in to-squashies.,https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-667784979,667784979,
kallewoof,2020-08-11 02:25:56,"* Updated to use new 1-of-2 key for the new Signet network (new 2nd key maintained by @ajtowns).\n* Trimmed down `consensus/validation.h` stuff, removing the transaction based `GetWitnessCommitmentIndex` variant\n* Squashed to-squashies (including the new stuff)",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-671686673,671686673,
kallewoof,2020-08-12 03:32:13,"Test network was restarted (Signet Global Test Net V) along with below services:\n* Faucet https://signet.bc-2.jp/\n* Explorer https://explorer.bc-2.jp/\n",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-672551050,672551050,
JeremyRubin,2020-08-12 05:07:15,"CR-Ack -- looked over, everything looks fine. Doesn't seem to interfere with any non-signet code paths.",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-672575995,672575995,
NicolasDorier,2020-08-13 06:09:39,"That's better than before. ACK 96e3d1e .\nI wish we can get signet soon, it will help to test taproot for example.",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-673282533,673282533,
NicolasDorier,2020-08-13 08:40:38,"@kallewoof there is one thing I don't like, but feel free to ignore my remark:\n\nIf there is for example a new signet for taproot. People who wants to use it, need to get 3 command line parameters right.\n\nIt would be great if it was all in one parameter say\n\n`-signet=ab63bc...&signet.node.com` such that people creating signet can just share a single string with everthing needed instead ",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-673346135,673346135,
kallewoof,2020-08-13 09:05:00,"@NicolasDorier I think that makes perfect sense, but it can easily be a follow-up addition. (One that I will personally write, if nobody beats me to it!)",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-673358532,673358532,
jonatack,2020-08-13 09:19:23,"Built and manually retested following my steps in https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-620569419 -- the latest version still works as advertised.\n\nNow reviewing the code changes since my 4th review on May 10 at https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-626361626.\n\nEdit: ugh, looks like a total re-review is needed.",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-673365884,673365884,
kallewoof,2020-08-13 09:25:46,"@jonatack Sorry about that. >< The changes are improvements, FWIW!",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-673369040,673369040,
kallewoof,2020-08-17 01:02:42,"@fjahr Thanks for review! Adapted your bad-replacement with some modifications. I addressed most other things, but kept the cidx stuff as is for now.",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-674605860,674605860,
kallewoof,2020-08-17 09:44:09,@jonatack I won't rebase/squash anything until you give me the go ahead.,https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-674778009,674778009,
jonatack,2020-08-17 09:50:11,"@kallewoof Thanks, good for now. My only substantive feedback at this point would be to make the commits hygienic by fixing up (or merging the unit test changes into the commits that require them), as the commits starting from 6920af6 fail the unit tests until the last commit. <strike>Functional tests to sanity check the conf options handling would be good as well; I'll propose a commit later toda",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-674781195,674781195,
jonatack,2020-08-17 18:18:42,Unit tests `util_tests` still failing starting from 18e18820bb.,https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-675035794,675035794,
kallewoof,2020-08-18 03:47:42,"@jonatack Sorry, forgot about that comment. Checking now.",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-675232466,675232466,
kallewoof,2020-08-18 05:28:59,@jonatack Every commit should now compile and unit tests should succeed.,https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-675259421,675259421,
jonatack,2020-08-18 07:32:07,"> @jonatack Every commit should now compile and unit tests should succeed.\n\nYes, verified all commits at 05115cd. Oops, just rebased again, but looks like no change per `git range-diff e6e277f9 05115cd 15a2608`.",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-675309799,675309799,
kallewoof,2020-08-18 07:32:51,"Yeah, sorry, wallet_groups CI failure.",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-675310202,675310202,
michaelfolkson,2020-08-18 12:37:42,"Unit tests, functional tests passing on MacOS Catalina. Received Bitcoin from the Signet [faucet](https://signet.bc-2.jp/), verified my balance locally, sent Signet coins to another address with fee set (Fee estimation failed without fee set) ",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-675452690,675452690,
kallewoof,2020-08-19 00:39:16,"@pinheadmz Sent. (DM me on Twitter with your IP number (or write last half of it or something here, if you don't mind) and I'll look.)",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-675786581,675786581,
pinheadmz,2020-08-19 13:44:21,"Got some coins from @kallewoof and sent transactions to all 3 address types available from `getnewaddress` using `sendmany`.I repeated the send until I got too-long-mempool chain errors. Wallet balances all looked good so all the address types worked.\n\nThen something kinda interesting:\n\n```\n2020-08-19T12:58:27Z ERROR: ConnectBlock(): coinbase pays too much (actual=5000113810 vs limit=500",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-676381900,676381900,
kallewoof,2020-08-19 13:48:14,"@pinheadmz Yep! The block generation script had a cap at 20 txs, but getblocktemplate happily included more, resulting in a block with more subsidy than were accounted for in fees. Good catch, and this has been fixed!",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-676387834,676387834,
fjahr,2020-08-21 13:34:56,"tested ACK 15a26087a3405903c562fce8c8d7682731b807c8\n\nReviewed changes since my last review per `git range-diff a4a279b4f368661ea7d2507dd963469f432f916c..96e3d1e45157cb8f2c7ecae8366fe076cc913742 e6e277f9ed4da7aff9b7b39a7838bada0c3e572a..15a26087a3405903c562fce8c8d7682731b807c8`. Changes address feedback and include the new fuzzer.\n\nResynced global signet, got some coins from the faucet, and",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-678293654,678293654,
kallewoof,2020-08-24 09:27:05,Addressed @MarcoFalke comments and squashed.,https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-679016011,679016011,
MarcoFalke,2020-08-24 09:41:35,"Approach ACK 2e539c8fce 🔵\n\nChanges since last review:\n* First commit is a bit more move-only now (--color-moved=dimmed-zebra)\n* Various renamed symbols\n* Removed two checks that appeared redundant\n* Replaced error() with logging to category when checking blocks from p2p. Added error() when checking blocks from local disk\n\n<details><summary>Show signature and timestamp</summary>\n",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-679024361,679024361,
instagibbs,2020-08-24 13:27:22,"utACK https://github.com/bitcoin/bitcoin/pull/18267/commits/2e539c8fceeed72730528639176a88690731cfd0\n\nI have some meta-thoughts: Under what circumstances would signet be rebooted? I presume any time there is suspected key theft/loss? Should nets just have a limited lifespan? ",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-679125591,679125591,
michaelfolkson,2020-08-24 13:48:51,Opened an [issue](https://github.com/bitcoin/bitcoin/issues/19787) for meta discussion of Signet,https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-679137469,679137469,
fjahr,2020-08-24 15:35:26,"tested ACK 2e539c8fceeed72730528639176a88690731cfd0\n\nReviewed changes since last review per `git range-diff e6e277f9ed4da7aff9b7b39a7838bada0c3e572a..15a26087a3405903c562fce8c8d7682731b807c8 e6e277f9ed4da7aff9b7b39a7838bada0c3e572a..2e539c8fceeed72730528639176a88690731cfd0`. Resynced global signet and performend test transactions.\n\nSide-note: This time the faucet txs did not end up in my m",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-679201258,679201258,
kallewoof,2020-08-25 03:15:59,"@fjahr Thanks for re-review!\n\n> Side-note: This time the faucet txs did not end up in my mempool which is different from my test 3 days ago. I could not find out why that is yet. All other behavior was the same, I could see the txs in the block explorer right away. Did anything change in the faucet node by any chance?\n\nWeird. It was probably a case of bad connectivity. There are so few nod",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-679499977,679499977,
jonatack,2020-08-25 04:02:16,"re-ACK 2e539c8fceeed727305 reviewed diff since last review per `git diff 15a2608 2e539c8`, re-reviewed the code in the changed areas, tested running and using signet via the cli.",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-679561065,679561065,
jonatack,2020-08-25 04:07:40,"> Weird. It was probably a case of bad connectivity. There are so few nodes right now that you may have not connected to the ""right"" ones. If it happens again check getconnectioncount and getpeerinfo and see if you see anything odd there?\n\nWorked for me just now.",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-679568110,679568110,
JeremyRubin,2020-08-27 05:03:28,"Can you give some instructions for testing this?\n\nI'm following along with https://en.bitcoin.it/wiki/Signet, but since contrib isn't in this PR how can I test the block generation stuff?",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-681477552,681477552,
kallewoof,2020-08-27 05:22:40,"@JeremyRubin This is only the consensus stuff, so it doesn't have any of the mining related things. I think @ajtowns is opening a PR with the miner stuff soon, if he hasn't already.",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-681525469,681525469,
sipa,2020-08-27 19:40:24,"Perhaps I'm missing some discussion, but I'm not really comfortable with merging this, as it doesn't seem there are any tests included that exercise the signet code at all.\n\nIdeally I'd say there should be a functional test that builds a 2-node signet and does some basic interactions. If signing blocks is complicated, it could be something with just a trivial script even, but just something wo",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-682152237,682152237,
instagibbs,2020-08-27 19:49:23,transaction-style signing should make test-writing with non-OP_TRUE pretty simple I'd hope.,https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-682156205,682156205,
JeremyRubin,2020-08-27 19:52:48,"FWIW I think it's OK-ish if the tests are in a follow up PR on this exact commit that is opened before this is merged, because people want to bikeshed that part. No need to IMO write brand new code if you have code for launching one already, but it should be possible to test it manually (although automated testing is of course preferred).",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-682157821,682157821,
kallewoof,2020-08-28 01:42:49,"@sipa It's a bit of a chicken/egg problem. This PR tries to be minimal and focus on consensus stuff only, which means mining functionality is not present yet. In the original PR (which is referenced in the OP) there are mining tests for signet (although outdated currently).",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-682277458,682277458,
sipa,2020-08-28 01:45:57,@kallewoof To be clear: I'm not asking for full support for mining or the ability to build your own signet or anything like that here; just that the code which is introduced in this PR has tests. For example that could just be a slow Python implementation in the test framework that can construct signet blocks for a dummy OP_TRUE challenge script or so...,https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-682278243,682278243,
kallewoof,2020-08-28 01:52:22,@sipa Got you. I'll look into that now.,https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-682279942,682279942,
kallewoof,2020-08-28 04:39:16,"The `test: basic signet tests` commit now has a bunch of tests.\n\nAlso changed:\n* `chainparams.cpp`:\n   * `gArgs` → `args`\n   * The `powLimit` has been modified to exactly match the compact variant (in genesis) (this is not a hard fork)\n* `signet.cpp`:\n   * An `OP_TRUE` challenge is now accepted as a valid challenge/solution (used in the first part of the new `feature_signet.py` tests",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-682320558,682320558,
kallewoof,2020-08-28 09:45:26,Renamed `-signet_blockscript` to `-signet_challenge` to match the BIP.,https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-682434128,682434128,
kallewoof,2020-08-29 13:39:07,Removed the additional check that the commitment is not empty; we now allow empty commitments for `OP_TRUE` challenge networks. This has been reflected in the BIP update PR https://github.com/bitcoin/bips/pull/983 as well.,https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-683291400,683291400,
kallewoof,2020-09-08 03:57:45,"Changes:\n* Skipping length for missing witness data is no longer allowed, as per the BIP changes; this means less corner cases for other software to track\n* Minimum POW difficulty was too low, resulting in overflow at first retargeting; to avoid undefined/unexpected stuff, a decision was made to address this, even though it results in yet another reset (hopefully the last one!)\n* Some clean-",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-688604116,688604116,
kallewoof,2020-09-10 04:28:44,"Addressed comment by jnewbery. No changes planned at this point, please re-review so we can get this in!",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-689972448,689972448,
michaelfolkson,2020-09-10 09:31:50,"ACK dbeea65aec1cc8ff4c3a6ba84950794498fdaae3\n\nStill seems rough around the edges but for Jon's (and other's) sanity probably best we get this merged and then look at follow up PRs.",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-690112575,690112575,
jonatack,2020-09-10 13:27:47,"Thanks @michaelfolkson. (If by any chance you are referring to my comment [here](https://bitcoincore.reviews/18267#l-547), I take it back. It was (a) issues with peers still running the previous genesis block code, and (b) I mistakenly blew out my signet conf file while resetting the signet dir.)",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-690288603,690288603,
michaelfolkson,2020-09-10 14:40:36,"Normally (especially for a consensus change) we would want to get a period of sustained review on a stable iteration, be confident there won't be any material future changes and I wouldn't ACK it. \n\nHowever, the consensus part is small, it has gone through a number of different iterations, I'm personally broadly happy with the decisions made in the latest iteration, it seems to work fine. Ther",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-690334738,690334738,
fjahr,2020-09-10 22:23:48,"re-tACK dbeea65aec1cc8ff4c3a6ba84950794498fdaae3\n\nCode reviewed changes in commits from last review per `git range-diff e6e277f9ed4da7aff9b7b39a7838bada0c3e572a..2e539c8fceeed72730528639176a88690731cfd0 15886b08aa5f05194633eba063d7412d0e4fd036..dbeea65aec1cc8ff4c3a6ba84950794498fdaae3` and did fresh review on the new last two test-only commits. Manually tested with a fresh sync and making some",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-690763925,690763925,
kallewoof,2020-09-11 03:48:39,"@michaelfolkson \n\n> Normally (especially for a consensus change) we would want to get a period of sustained review on a stable iteration, be confident there won't be any material future changes and I wouldn't ACK it.\n\nWhile it is a consensus change, it is effectively a ""testnet consensus change"", with fairly straightforward logic indicating that it only applies to a signet enabled chain. I",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-690856866,690856866,
eriknylund,2020-09-12 19:17:37,"tACK dbeea65aec1cc8ff4c3a6ba84950794498fdaae3 built on macOS Catalina 10.15.6 ran tests and functional tests, did not run fuzzer.\n\nI performed the following tests before RTFM (aka https://gist.github.com/kallewoof/98b6d8dbe126d2b6f47da0ddccd2aa5a):\n\nDid not configure `bitcoin.conf`, rather started bitcoind with `-signet`, so IBD worked but daemon commands not. Synced up to block 2925, whic",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-691533796,691533796,
kallewoof,2020-09-13 03:27:57,"@eriknylund Thanks a lot for testing! The faucet will say ""Nuh-uh"" if you've already used it once that day, but maybe something got screwed up. I've sent you some coins, though.\n\n> Did not configure `bitcoin.conf`, rather started bitcoind with `-signet`, so IBD worked but daemon commands not. Synced up to block 2925, which was the tip at that point.\n\nThe reason is that you did not include ",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-691602634,691602634,
ajtowns,2020-09-13 03:49:33,">  there seem to be an issue with `-chain=signet`\n> Invalid combination of -regtest, -signet, -testnet and -chain. Can use at most one.\n\nIf you've got `signet=1` in your conf, specifying `-chain=anything` on the commandline will error. The assertion failure in addition to the error is pretty lame, but is present in master (`bitcoind -testnet -chain=test`) too.",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-691605198,691605198,
eriknylund,2020-09-13 07:17:53,"> @eriknylund Thanks a lot for testing! The faucet will say ""Nuh-uh"" if you've already used it once that day, but maybe something got screwed up. I've sent you some coins, though.\n\nThanks for the coins. I think it was a case of PEBCAK. I tried it again today and the faucet worked as intended:\n\n`Payment of 10.00000000 BTC sent with txid 70eb286708b2d680628647599a363495b983bce081af489f73715e",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-691625342,691625342,
eriknylund,2020-09-13 08:20:13,"I redid my tests per instructions from @kallewoof and @ajtowns and can confirm it works as I initially imagined to run it - with bitcoind in the foreground and then running bitcoin-cli with the `-signet` argument in a separate window thus skipping the _bitcoin.conf_ step:\n```\nmdkir -p /tmp/cli-args-only\n./bitcoind -datadir=/tmp/cli-args-only -signet\n2020-09-13T08:10:16Z UpdateTip: new best",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-691633947,691633947,
kallewoof,2020-09-13 14:33:02,@MarcoFalke You have a change-request state right now. Mind re-reviewing?,https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-691679053,691679053,
kallewoof,2020-09-18 01:22:02,Updated to rename `-signet_*` to `-signet*`.,https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-694593031,694593031,
kallewoof,2020-09-18 07:03:23,I have no idea why `feature_pruning` is failing in that one test in Travis. It works on my mac and linux machines.,https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-694695772,694695772,
jonatack,2020-09-18 09:45:09,"> I have no idea why `feature_pruning` is failing in that one test in Travis. It works on my mac and linux machines.\n\nI think the CI job failure `Method not found (wallet method is disabled because no wallet is loaded) (-32601)` is from #15454 merged yesterday.",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-694769539,694769539,
jonatack,2020-09-18 09:47:06,"re-ACK 8258c4c0076bb5f27efdc117a04b27fcd6dd00b per `git diff dbeea65 8258c4c`, only change since last review is updated `-signet*` config option naming.\n\nUpdated config options and help:\n```\n((HEAD detached from origin/pr/18267))$ ./src/bitcoind -signet -help | grep -A2 signet\n  -signet\n       Use the signet chain. Note that the network is defined by the\n       -signetchallenge param",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-694770431,694770431,
fjahr,2020-09-18 10:45:27,"re-ACK 8258c4c\n\nThe only change was the renaming of the `-signet*` args.",https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-694796568,694796568,
kallewoof,2020-09-19 08:49:57,Travis now passes after wallet PR fix. Please re-review.,https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-695186025,695186025,
laanwj,2020-09-21 20:31:45,ACK 8258c4c0076bb5f27efdc117a04b27fcd6dd00b2,https://github.com/bitcoin/bitcoin/pull/18267#issuecomment-696357656,696357656,
instagibbs,2020-04-08 13:58:37,"shouldn't we at least assert that the length of the script is > 0?\n\na normal `script.GetOp` and checking the result seems more self-explanatory and safe to me",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r405546360,405546360,src/primitives/block.cpp
kallewoof,2020-04-09 03:46:08,"I don't think it's strictly necessary as the witness commitment index search requires an OP_RETURN, but I don't think it hurts either so will switch.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r405939735,405939735,src/primitives/block.cpp
jonatack,2020-04-28 13:46:09,"in 63b5d7a, if #18780 is merged, can replace `38` with `MINIMUM_WITNESS_COMMITMENT`",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r416625974,416625974,src/primitives/block.h
jonatack,2020-04-28 13:56:02,in 63b5d7a3a7e6081e perhaps replace the four `-1` commitment index values in `block.h/.cpp` with a static constant whose name could also make their meaning explicit,https://github.com/bitcoin/bitcoin/pull/18267#discussion_r416633644,416633644,src/primitives/block.h
fjahr,2020-04-28 14:52:50,nit: s/signet/SigNet/,https://github.com/bitcoin/bitcoin/pull/18267#discussion_r416679361,416679361,src/chainparams.cpp
jonatack,2020-04-28 20:22:22,"in d55bcb17844e6e68 perhaps cache the args in a localvar\n```diff\n-            if (args.GetArgs(""-signet_blockscript"").size() != 1) {\n+            const auto sbs = args.GetArgs(""-signet_blockscript"");\n+            if (sbs.size() != 1) {\n                 throw std::runtime_error(strprintf(""%s: -signet_blockscript cannot be multiple values."", __func__));\n             }\n-            bin ",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r416897762,416897762,src/chainparams.cpp
jonatack,2020-04-28 20:36:05,"In d55bcb1, how did you arrive at this `powLimit` value?",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r416905437,416905437,src/chainparams.cpp
jonatack,2020-04-28 20:45:35,"d55bcb1 do we need any of these additional params to be set in `SigNetParams`? (values tba). Some of them may have been added since this PR was made.\n```diff\n+        // The best chain should have at least this much work.\n+        consensus.nMinimumChainWork = uint256S(""0x0000000000000000000000000000000000000000000001495c1d5a01e2af8a23"");\n+\n+        // By default assume that the signatur",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r416910629,416910629,src/chainparams.cpp
jonatack,2020-04-28 22:54:38,"d55bcb1 I like the readability of snakecased config options, but is the current convention that they be without separators? e.g. -signetblockscript, -signethrp, -signetseednode",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r416972019,416972019,src/chainparamsbase.cpp
jonatack,2020-04-28 22:57:09,d55bcb1 nit: s/Human readable/Human-readable/,https://github.com/bitcoin/bitcoin/pull/18267#discussion_r416972958,416972958,src/chainparamsbase.cpp
jonatack,2020-04-28 23:05:55,"In d55bcb1, maintain the same sort (main/testnet/signet/regtest) here as in `chainparamsbase.h`?\n```diff\n-    else if (chain == CBaseChainParams::REGTEST)\n-        return MakeUnique<CBaseChainParams>(""regtest"", 18443);\n     else if (chain == CBaseChainParams::SIGNET)\n         return MakeUnique<CBaseChainParams>(""signet"", 38332);\n+    else if (chain == CBaseChainParams::REGTEST)\n+    ",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r416976162,416976162,src/chainparamsbase.cpp
jonatack,2020-04-29 12:13:34,d55bcb1 perhaps maintain the same sort (main/testnet/signet/regtest) here (and in general wherever the four chains are enumerated)?,https://github.com/bitcoin/bitcoin/pull/18267#discussion_r417267584,417267584,src/chainparams.cpp
jonatack,2020-04-29 13:06:24,db73201 istm a comment here and at line 3300 below would be helpful (the neighbouring code is commented as well),https://github.com/bitcoin/bitcoin/pull/18267#discussion_r417298730,417298730,src/validation.cpp
jonatack,2020-04-29 13:29:46,"63b5d7a3a7e6081e3b42a78ad1f nit: would it be better to construct rather than copy?\n```diff\n-    result.push_back(*pc++);\n+    result.emplace_back(*pc++);\n```",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r417314418,417314418,src/primitives/block.cpp
fjahr,2020-04-29 13:52:13,"Not knowing this test, I was confused why this is needed until I dumped the file. So a little better explanation would be nice in the commit message. Suggestion: ""Even though the test is not changed, error messages for missing/invalid parameter combinations now include -signet. This is why the hash changes.""",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r417331044,417331044,src/test/util_tests.cpp
fjahr,2020-04-29 14:21:03,I think there could be an additional comment for these CommitmentSection functions that they are specific for SigNet,https://github.com/bitcoin/bitcoin/pull/18267#discussion_r417353416,417353416,src/primitives/block.h
fjahr,2020-04-29 14:28:21,"Agree, I was even going to suggest pulling the whole SigNet header into a named constant and then work with that.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r417359282,417359282,src/primitives/block.h
fjahr,2020-04-29 14:34:06,"super nit\n```suggestion\n/** A low level signature checker. Note that it does not verify that the hash passed in relates to a known message (unlike for the other signature checkers). */\n```",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r417363952,417363952,src/script/interpreter.h
fjahr,2020-04-29 15:11:10,nit s/signet/SigNet/,https://github.com/bitcoin/bitcoin/pull/18267#discussion_r417392936,417392936,src/chainparams.cpp
fjahr,2020-04-29 15:13:40,s/signet/SigNet/,https://github.com/bitcoin/bitcoin/pull/18267#discussion_r417394889,417394889,src/chainparamsbase.cpp
fjahr,2020-04-29 15:14:10,s/signet/SigNet/,https://github.com/bitcoin/bitcoin/pull/18267#discussion_r417395253,417395253,src/chainparamsbase.cpp
fjahr,2020-04-29 16:22:04,nit: I guess starting a custom signet without a seed node only makes sense if the user is running the seed node themselves. It might be worth a warning or a log message in case people wonder why nothing is happening if they forget this.,https://github.com/bitcoin/bitcoin/pull/18267#discussion_r417444593,417444593,src/chainparams.cpp
kallewoof,2020-04-29 16:23:46,"I was wondering about whether anyone would knee-jerk if we `#include <script/script.h>`'d, but then I realized this is already happening (evidenced by the fact `OP_RETURN` does not give a compile error here) via `primitives/transaction.h`, so it should be fine.\n\nSwitching to this, thanks!",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r417445644,417445644,src/primitives/block.h
kallewoof,2020-04-29 16:28:27,Makes sense; also switching the couple of places in validation.cpp where `-1` is used.,https://github.com/bitcoin/bitcoin/pull/18267#discussion_r417448693,417448693,src/primitives/block.h
kallewoof,2020-04-29 16:31:27,Sounds good!,https://github.com/bitcoin/bitcoin/pull/18267#discussion_r417450702,417450702,src/chainparams.cpp
jonatack,2020-04-29 16:32:50,ISTM the first version is correct?,https://github.com/bitcoin/bitcoin/pull/18267#discussion_r417451540,417451540,src/script/interpreter.h
kallewoof,2020-04-29 16:33:14,"I grinded a block for a short while and picked the lowest resulting value. It is a bit more random than it needs to be, but doesn't seem harmful so I kept it as is.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r417451806,417451806,src/chainparams.cpp
jonatack,2020-04-29 16:33:58,"I was wondering this, too.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r417452296,417452296,src/test/util_tests.cpp
kallewoof,2020-04-29 16:34:45,"I didn't notice these additions, thanks. Adding. Edit: well, the first ones are from before; I was simply not including a minimum chain work or default assume valid.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r417452794,417452794,src/chainparams.cpp
fjahr,2020-04-29 16:36:54,"> ISTM the first version is correct?\n\nThat's why it's a nit.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r417454170,417454170,src/script/interpreter.h
fjahr,2020-04-29 16:38:25,There is a double space and it assumes that the caller has to do something which is why I like my version a bit better.,https://github.com/bitcoin/bitcoin/pull/18267#discussion_r417455144,417455144,src/script/interpreter.h
jonatack,2020-04-29 16:38:35,"Yes, I mean that I think the first version is better.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r417455255,417455255,src/script/interpreter.h
kallewoof,2020-04-29 16:38:36,Both seem to be acceptable. E.g. https://en.wikipedia.org/wiki/Human-readable_medium has as an example the sentence `Human readable protocols greatly reduce the cost of debugging.[1]`.,https://github.com/bitcoin/bitcoin/pull/18267#discussion_r417455264,417455264,src/chainparamsbase.cpp
kallewoof,2020-04-29 16:39:30,"I haven't heard of such a convention for options. I'll keep this until someone else yells at me, as it's spread around a bit. (Will change if it's important though!)",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r417455856,417455856,src/chainparamsbase.cpp
fjahr,2020-04-29 16:42:12,"> Yes, I mean that I think the first version is better.\n\nHow can you be sure that the caller always has to do this whenever this function is used?",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r417457480,417457480,src/script/interpreter.h
kallewoof,2020-04-29 16:42:20,"Swapped; I don't see the point keeping the else as every if case returns, and it seems more clear to be explicit, but I can see the argument for minimal diffs...",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r417457574,417457574,src/chainparamsbase.cpp
jonatack,2020-04-29 16:45:49,Maybe have a look at #18780 that looks like it's about to be merged to see if you want to pull in some of the changes.,https://github.com/bitcoin/bitcoin/pull/18267#discussion_r417459940,417459940,src/primitives/block.h
kallewoof,2020-04-29 16:46:04,Switched to `emplace_back`,https://github.com/bitcoin/bitcoin/pull/18267#discussion_r417460090,417460090,src/primitives/block.cpp
jonatack,2020-04-29 16:49:40,"> There is a double space and it assumes that the caller has to do something which is why I like my version a bit better.\n\nDouble space is grammatically correct and the warning to the caller seems preferable IMO.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r417462467,417462467,src/script/interpreter.h
fjahr,2020-04-29 16:53:46,"That's my point: ""must"" is not a warning, it's a requirement.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r417465360,417465360,src/script/interpreter.h
kallewoof,2020-04-29 17:02:11,"I don't think we call any of the other nets RegTest or TestNet, so signet seems OK here. I did a regexp search for `""([^""]*)testnet` and all instances I found used lowercase except for start-of-sentence-uppercasing.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r417470956,417470956,src/chainparams.cpp
kallewoof,2020-04-29 17:03:16,"Apologies; I don't actually expect this commit to make it through in the end. I should mark it as such. I believe this is something @laanwj wants to double check and commit when appropriate, but I may be off here.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r417471567,417471567,src/test/util_tests.cpp
kallewoof,2020-04-29 17:05:00,"Technically they're not; this code simply adds support for a feature that segwit always supported, which is the extension of the witness commitment to add arbitrary/additional data. This adds a framework to find/modify such extensions, and includes a header for each one, so they are distinguishable.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r417472690,417472690,src/primitives/block.h
kallewoof,2020-04-29 17:08:04,"I think it will be fairly common to start a node and then manually `addnode=` peers to build a network real quick. Having a seed node is only really meant for super permanent signets (like the default one) where you want people to just be able to start and go. I'm not sure how this will all pan out, but that's how I envision it right now.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r417474643,417474643,src/chainparams.cpp
jonatack,2020-04-29 17:08:22,:+1: on signet,https://github.com/bitcoin/bitcoin/pull/18267#discussion_r417474840,417474840,src/chainparams.cpp
jonatack,2020-04-29 17:10:48,"I read it as ""the caller is responsible for verifying"" which is more defensively paranoid, in a good way, I think, than ""it does not verify"".",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r417476362,417476362,src/script/interpreter.h
kallewoof,2020-04-29 17:10:54,"Will check out #18780 for sure, thanks.\n\nAlso, @fjahr this is not signet stuff, this is segwit stuff (the 38 + OP_RET + etc). It's the witness commitment header. Or are you referring to something else when you say ""the whole SigNet header into a named constant""?",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r417476433,417476433,src/primitives/block.h
fjahr,2020-04-29 17:12:11,"Ok, then it's just inconsistent because I saw `SigNet` as well in comments and log messages.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r417477253,417477253,src/chainparams.cpp
kallewoof,2020-04-29 17:12:13,"The current version seems a tiny bit more clear on the fact that if you use this thing, you (the caller) have to check this stuff yourself, so keeping as is.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r417477271,417477271,src/script/interpreter.h
fjahr,2020-04-29 19:49:41,s/SigNet/Signet/,https://github.com/bitcoin/bitcoin/pull/18267#discussion_r417569922,417569922,src/chainparams.cpp
fjahr,2020-04-29 19:50:09,s/SigNet/Signet/,https://github.com/bitcoin/bitcoin/pull/18267#discussion_r417570226,417570226,src/chainparams.cpp
kallewoof,2020-04-30 03:34:59,"A-ha! Thanks, my consistency is admirable... Fixed.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r417734749,417734749,src/chainparams.cpp
kallewoof,2020-04-30 03:43:44,"Update: I looked closer into this (my initial impression was that this was a maintainer thing, but it actually looks like the contributors are supposed to deal with it), and have updated the commit message to explain why the hash changed.\n\nAlso, a recent addition to tests resulted in another hash changing; these were combined in one commit.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r417736702,417736702,src/test/util_tests.cpp
kallewoof,2020-05-01 08:44:34,"Yep, sorry about that. Fixed.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r418465059,418465059,src/chainparams.cpp
MarcoFalke,2020-05-01 14:47:59,"I still don't understand why this is moved https://github.com/bitcoin/bitcoin/pull/16411#discussion_r335017902\n\n* GetWitnessCommitmentIndex is a member function, but doesn't access any member variables. This is confusing and makes it hard to write clean code.\n* `src/primitives` only contains data structures, and no validation logic. If this becomes the new place for validation, we might as w",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r418574248,418574248,src/primitives/block.h
MarcoFalke,2020-05-01 14:49:19,"style-nit: member functions are already inline, same goes for `template<>`s. No need to specify it twice.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r418574836,418574836,src/primitives/block.h
kallewoof,2020-05-02 05:58:09,"I hear you on the ""only data structure"" part... perhaps this belongs in validation.cpp in the end. It's bloated and I didn't wanna bloat it more with the new witness commitment section stuff, though.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r418917924,418917924,src/primitives/block.h
kallewoof,2020-05-02 06:03:47,"On the other hand, it could be argued that this is in fact data structure *stuff* and not validation. I mean, there's no validation done here, it simply locates and returns the index of the witness commitment, if any.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r418918363,418918363,src/primitives/block.h
MarcoFalke,2020-05-02 20:41:07,"`GetWitnessCommitmentIndex` has been added to validation in commit 8b49040854be2e26b66366aeae1cba4716f93d93. Generally we don't move stuff around unless there is a reason to. Maybe @sipa can give more insights. Though, if no one else complains about this, I will close this conversation as resolved.\n\nHowever, making this a member function of CBlock, whereas it doesn't read any of the member var",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r419005415,419005415,src/primitives/block.h
sipa,2020-05-02 20:43:53,"I strongly prefer keeping this in validation. Not every piece of code that uses transactions (e.g. wallets, P2P layer things, ...) needs to depend on something that only matters to validation.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r419005700,419005700,src/primitives/block.h
kallewoof,2020-05-04 06:12:04,"I've restored it to validation.cpp, and added a variant that takes a transaction rather than a block. The block-based one (original) is converted into a wrapper calling the variant.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r419228261,419228261,src/primitives/block.h
kallewoof,2020-05-05 05:32:48,"This comment should use the new constant, not `-1`. Will fix at next rebase.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r419872121,419872121,src/validation.h
MarcoFalke,2020-05-05 10:44:54,Mind to explain the use case for `signet_hrp` being a run-time option?,https://github.com/bitcoin/bitcoin/pull/18267#discussion_r420017940,420017940,src/chainparamsbase.cpp
jonatack,2020-05-05 15:22:05,"fd10dd5f and 6209c21 pico-nit: if you retouch, here and a couple other places in the changeset, `++s` is preferred over `s++` per developer-notes.md::L94",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r420194254,420194254,src/signet.cpp
jonatack,2020-05-05 15:48:54,"fd10dd5f If you retouch, perhaps add comments to document the byte values:\n\n```diff\n-            vout.scriptPubKey[1] == 0x24 &&\n-            vout.scriptPubKey[2] == 0xaa &&\n+            vout.scriptPubKey[1] == 0x24 &&  // Push the following 36 bytes\n+            vout.scriptPubKey[2] == 0xaa &&  // BIP141 SegWit commitment header (4 bytes: 0xaa21a9ed)\n```",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r420214083,420214083,src/validation.cpp
jonatack,2020-05-05 17:07:30,c1144b86 These 3 lines can use `emplace_back` like the other vSeeds.emplace_back operations in this file.,https://github.com/bitcoin/bitcoin/pull/18267#discussion_r420269434,420269434,src/chainparams.cpp
jonatack,2020-05-05 17:11:02,"c1144b86 `-signet_seednode` appears to only take effect if `-signet_blockscript` is also passed. If so, perhaps say so in the `-signet_seednode` help in chainparamsbase.cpp.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r420271626,420271626,src/chainparams.cpp
jonatack,2020-05-05 17:17:52,"What is the difference between the `-signet_seednode` chainparams option, and the `-seednode` connection option in init.cpp?\n\nPerhaps (pulling in some ideas from the `-seednode` help):\n```diff\n-    gArgs.AddArg(""-signet_seednode"", ""Specify a seed node for the signet network (may be used multiple times to specify multiple seed nodes)"", ArgsManager::ALLOW_STRING, OptionsCategory::CHAINPARAMS",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r420275966,420275966,src/chainparamsbase.cpp
jonatack,2020-05-05 17:35:22,"> Mind to explain the use case for `signet_hrp` being a run-time option?\n\nAgree; I don't know how this is to be used.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r420287152,420287152,src/chainparamsbase.cpp
kallewoof,2020-05-06 04:14:28,"This became useful when I was running a taproot signet there for awhile, as it allowed correctly configured nodes to distinguish between addresses for the two networks.\n\nI think we are leaning more and more towards having ""one"" signet most of the time, but having this feature still seems like a good idea. I don't have a strong opinion, and can drop this out for later consideration if you guys ",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r420535779,420535779,src/chainparamsbase.cpp
kallewoof,2020-05-06 04:16:50,"If you do `?w=1` suffix on the view all changes page [ https://github.com/bitcoin/bitcoin/pull/18267/files?w=1#diff-24efdb00bfbe56b140fb006b562cc70b ], you will note that I'm only indenting these lines, so I think I'll skip touching them for now.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r420536312,420536312,src/validation.cpp
kallewoof,2020-05-06 04:17:44,"I don't think that's a good logic, actually. I'm going to change it to always take seeds, thanks.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r420536454,420536454,src/chainparams.cpp
kallewoof,2020-05-06 04:20:47,"I'm not entirely sure; it seems the -seednode flag is used to set up `CConnman` options in `init.cpp`, but I can't see that using the chain parameter stuff, so... yeah, not sure.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r420537098,420537098,src/chainparamsbase.cpp
brakmic,2020-05-06 08:01:52,"This line causes compilation errors, because of undeclared *blockscript* variable.\n\n```shell\nchainparams.cpp: In constructor ‘SigNetParams::SigNetParams(const ArgsManager&)’:\nchainparams.cpp:284:52: error: ‘blockscript’ was not declared in this scope\n         LogPrintf(""Signet with block script %s\n"", blockscript[0]);\n                                                    ^~~~~~~~~~~\nma",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r420610372,420610372,src/chainparams.cpp
kallewoof,2020-05-06 08:51:15,"Thanks, yeah I failed at a rebase. Fixed now.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r420637114,420637114,src/chainparams.cpp
MarcoFalke,2020-05-06 10:55:37,"> it allowed correctly configured nodes ...\n\nThat assumes correct configuration. In converse, incorrect configuration will reject addresses of the own network. Leaving this option out will configure all nodes correctly and I don't see a risk where mixing up addresses could lead to an issue. It could even make sense to call it `tb`, see here #12314 ",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r420703244,420703244,src/chainparamsbase.cpp
jonatack,2020-05-06 12:45:07,ok,https://github.com/bitcoin/bitcoin/pull/18267#discussion_r420760682,420760682,src/validation.cpp
jonatack,2020-05-06 13:48:04,"It may still be good to change the output if `-seednode` is passed and echo it rather than only ""Using default signet network""",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r420804460,420804460,src/chainparams.cpp
jonatack,2020-05-06 13:54:05,"s/suffixed/prefixed/?\n\nMaybe add a usage example.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r420809318,420809318,src/chainparamsbase.cpp
MarcoFalke,2020-05-06 15:14:52,"It seems that this also changes the network magic, so this is a switch to run a different signet?",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r420872951,420872951,src/chainparamsbase.cpp
kallewoof,2020-05-07 06:17:38,"Yep, the blockscript defines the network magic.\n\nhttps://github.com/bitcoin/bips/blob/master/bip-0325.mediawiki#message-start\n\nEdit: to clarify, each blockscript is considered its own signet, which is why the network magic depends on the blockscript.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r421263518,421263518,src/chainparamsbase.cpp
kallewoof,2020-05-07 06:26:32,"I don't know about calling it `tb`, but I've seen enough friction to warrant removing this option in the first iteration/PR, so I'm removing this parameter for now.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r421266858,421266858,src/chainparamsbase.cpp
MarcoFalke,2020-05-07 13:26:21,"Wasn't the point of signet to be a single network and everyone could choose their keys to decide which reorg to ""follow""?\n\nE.g. there are different keys like:\n\n* no_regorgs_key: signs every block, advancing height by 1 every 10 min, never decreasing height. This is the ""true"" signet chain\n* 10_reorg_key: reorgs 10 blocks every 20 blocks, then reorgs back to to the ""true"" chain\n* 101_re",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r421501655,421501655,src/chainparamsbase.cpp
kallewoof,2020-05-07 18:24:58,"That's on the map, for sure, but it adds complexity I'm trying to avoid in the initial release.\n\nAs for the single network, yes! The thing is, people are unpredictable, and I can imagine we will end up switching networks on rare occasions; in the end, we may have some form of org handling the privkeys to sign blocks, but initially at least, it will probably be me volunteering to do it, and if ",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r421705685,421705685,src/chainparamsbase.cpp
MarcoFalke,2020-05-23 21:40:04,"In commit 7168395ea63d33075a60369f5778eb635208beba\n\nAre all these includes really needed? I've removed all non-std-lib includes and everything compiles fine with this diff:\n\n```diff\ndiff --git a/src/signet.h b/src/signet.h\nindex b9946f950a..679df85c5d 100644\n--- a/src/signet.h\n+++ b/src/signet.h\n@@ -5,18 +5,16 @@\n #ifndef BITCOIN_SIGNET_H\n #define BITCOIN_SIGNET_H\n \n-#if ",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r429580302,429580302,src/signet.h
MarcoFalke,2020-05-23 21:41:27,"in commit 7168395ea63d33075a60369f5778eb635208beba\n\nI think the ignored return value should be documented\n\n```suggestion\n        (void)SetWitnessCommitmentSection(mtx, SIGNET_HEADER, std::vector<uint8_t>{});\n```",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r429580400,429580400,src/signet.cpp
MarcoFalke,2020-05-23 21:48:10,"In commit 7168395ea63d33075a60369f5778eb635208beba\n\nI don't think we solve circular dependencies by copy pasting parts of the dependencies into each other. Doing so slightly defeats the purpose of having separate modules. There are at least two options:\n\n* Ignore the circular dependency for now (and document it as an exception in the linter)\n* Move the witness commitment stuff to a new """,https://github.com/bitcoin/bitcoin/pull/18267#discussion_r429580797,429580797,src/signet.cpp
kallewoof,2020-05-25 08:21:36,"Not sure about the namespace/struct part, but otherwise sounds reasonable. Updated to this.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r429800129,429800129,src/signet.h
kallewoof,2020-05-25 08:21:44,"Moving to avoid duplicate makes sense; honestly not sure what I was thinking here.\n\nI'm not sure it warrants a new module, so I've put it in `consensus/validation.h` for now. If you really do think it should be in a separate file, I'll move it.\n",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r429800204,429800204,src/signet.cpp
MarcoFalke,2020-05-26 11:13:23,"Same for those two as well, obviously ;)",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r430335345,430335345,src/signet.cpp
kallewoof,2020-05-27 04:45:50,"Oh... yeah, okay. I moved the declarations as well (from `src/validation.h`).",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r430854321,430854321,src/signet.cpp
instagibbs,2020-05-29 13:19:17,"`scriptCode` unused ever, maybe drop a comment saying it's just there due to inheritance? ",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r432476733,432476733,src/script/interpreter.cpp
instagibbs,2020-05-29 13:39:33,"Have you given thought to the other script verification flags? People can malleate the witness to make it larger.\n\nAlternative is to cap the signature size by consensus param.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r432488802,432488802,src/signet.cpp
instagibbs,2020-05-29 13:44:38,could return an explicit `state.Invalid` line for better debugging?,https://github.com/bitcoin/bitcoin/pull/18267#discussion_r432491910,432491910,src/validation.cpp
instagibbs,2020-05-29 13:53:59,"Maybe too late but: Turning this into a witness stack + adding some validation flags would allow new scripts to be deployed on new networks without any additional work. We do this in Elements which means you can deploy segwit-style scripts, taproot etc.\n\nOk there's one catch in that the witnessScript has to be known by the blocksigner to fill out the witness stack, but relatively small burden.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r432497862,432497862,src/signet.cpp
kallewoof,2020-05-31 05:22:52,"Do we usually do that? I know e.g. in other languages unused parameters are marked by giving them an underscore prefix, but I don't think I've seen this in Bitcoin Core.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r432911042,432911042,src/script/interpreter.cpp
kallewoof,2020-05-31 05:36:58,"People can already kind of malleate blocks by changing the nonce, since it isn't committed to in the signet hash, so it feels like going for the same level of restrictions as in the block checks is sensible, I think. Thoughts @ajtowns ?",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r432911752,432911752,src/signet.cpp
kallewoof,2020-05-31 05:39:07,Sounds good!,https://github.com/bitcoin/bitcoin/pull/18267#discussion_r432911875,432911875,src/validation.cpp
kallewoof,2020-05-31 05:40:15,"I think @ajtowns is working on a patch to Signet to do precisely this, but I think I'm leaning towards keeping it simple for now. I mean, taproot in signet blocks doesn't really make any sense, or open up any possibilities, AFAICT.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r432911959,432911959,src/signet.cpp
MarcoFalke,2020-05-31 10:49:25,"In some places we omit unused args (like `scriptCode`), in others we mark it unused like `/* scriptCode */`. In both cases only the type is kept, which indicates that the value can not be used and is unused. Not sure if there is a guideline.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r432933933,432933933,src/script/interpreter.cpp
kallewoof,2020-06-01 04:49:27,I updated the code to exclude the name (`scriptCode`) in declaration/definition.,https://github.com/bitcoin/bitcoin/pull/18267#discussion_r433039843,433039843,src/script/interpreter.cpp
pinheadmz,2020-07-02 12:58:35,"This may be out of scope for this PR, but as long as we're here - should the word ""mainnet"" actually be replaced by the name of the network selected in the for loop? `chain.NetworkIDString()`",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r448982216,448982216,src/test/key_io_tests.cpp
pinheadmz,2020-07-02 13:03:56,Do you think it would be helpful to print the decoded ASM of the script as well?,https://github.com/bitcoin/bitcoin/pull/18267#discussion_r448985621,448985621,src/chainparams.cpp
pinheadmz,2020-07-02 13:04:26,"`OP_1 03ad5e0edad18cb1f0fc0d28a3d4f1f3e445640337489abb10404f2d1e086be430 OP_1 OP_CHECKMULTISIG`\n\nWhy did you choose 1-of-1 multisig instead of a single `OP_CHECKSIG` ?",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r448985929,448985929,src/chainparams.cpp
pinheadmz,2020-07-02 13:19:05,"This may be more of a note on BIP325 in general, but on mainnet currently it is not invalid to produce a block with no transactions and therefore no witness commitment in the coinbase tx.\n\nI found a recent example: https://blockstream.info/block/0000000000000000000e77c9c81498be9a4aa226d4be35a19a0fb11d99331d6a\n\nWhy does the spec depend on a witness commitment instead of new `OP_RETURN` for ",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r448995439,448995439,src/signet.cpp
practicalswift,2020-07-02 14:39:06,"Array-to-pointer safety nit: What about `const std::array<uint8_t, 4>` (instead of `const uint8_t header[4]`) and giving `SIGNET_HEADER` the same treatment?",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r449050474,449050474,src/signet.h
pinheadmz,2020-07-02 15:45:09,Why require standard for signet? This is `false` for testnet. Is the idea just to be more mainnet-like?,https://github.com/bitcoin/bitcoin/pull/18267#discussion_r449105201,449105201,src/chainparams.cpp
ajtowns,2020-07-02 19:35:18,I think if you're moving these functions into consensus/ then they should either be inline (which seems reasonable enough) or should be in a new consensus/validation.cpp as otherwise libconsensus won't be self-contained.,https://github.com/bitcoin/bitcoin/pull/18267#discussion_r449228243,449228243,src/consensus/validation.h
ajtowns,2020-07-08 23:08:46,I think using a span here would work even better.,https://github.com/bitcoin/bitcoin/pull/18267#discussion_r451873501,451873501,src/signet.h
kallewoof,2020-07-13 03:44:47,"That's a good point, yeah. I think it deserves a dedicated PR though, even if a one liner.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r453419296,453419296,src/test/key_io_tests.cpp
kallewoof,2020-07-13 03:46:06,"From personal experience, this is a check point to ensure you're not accidentally running on the wrong signet, in which case the ASM won't really help any.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r453419619,453419619,src/chainparams.cpp
kallewoof,2020-07-13 03:47:19,"Mostly as I expect there to be backup signers and such, so having it on a multisig setup from the start seems sensible.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r453419873,453419873,src/chainparams.cpp
kallewoof,2020-07-13 03:51:40,"That's a good point, but then again, it IS allowed to put a witness commitment in a block with no transactions (as evidenced by most of the signet blocks right now), so it doesn't feel like a huge deal in the end. After all, the signet blocks will ""suffer"" from the extra overhead with empty blocks, but that seems like an acceptable trade-off.\n\nThe question is if it's simpler to do an OP_RETURN",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r453420748,453420748,src/signet.cpp
kallewoof,2020-07-13 04:09:56,"Trying to switch the `SIGNET_HEADER` declaration into a `Span`, I end up with this ugly beast. Anything I can do to improve that? Going to go with @practicalswift's suggestion for now. :)\n\n```C++\nconst Span<const uint8_t> SIGNET_HEADER =\n  MakeSpan(\n    (const std::vector<const uint8_t>)std::vector<const uint8_t>{0xec, 0xc7, 0xda, 0xa2}\n  );\n```\n",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r453424499,453424499,src/signet.h
kallewoof,2020-07-13 04:12:29,"Yeah, one of the design goals with signet is to be as close to mainnet as possible. The further it deviates, the less useful it is for people who want to make sure their stuff works.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r453425026,453425026,src/chainparams.cpp
sipa,2020-07-13 04:16:27,"No, Span does not store any data. Doing that would be illegal (it's creating a vector, storing a pointer to its data in a Span, and then throwing the vector away).\n\nJust do this:\n\n```c++\nconst uint8_t SIGNET_HEADER[4] = {0xec, 0xc7, 0xda, 0xa2};\n```\n(or `std::array`, or `std::vector`, or whatever container you prefer...)\n\nAnd make `GetWitnessCommitmentSection` accept a `Span<cons",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r453425899,453425899,src/signet.h
kallewoof,2020-07-13 04:22:53,"Experimenting with making these inline and contained in `consensus/validation.h`.\n",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r453427204,453427204,src/consensus/validation.h
kallewoof,2020-07-13 04:32:59,Gotcha! Thanks.,https://github.com/bitcoin/bitcoin/pull/18267#discussion_r453429312,453429312,src/signet.h
ajtowns,2020-07-20 03:08:22,"Since you can already malleate the nonce to get a different block, and can't build on the block without being able to do a valid signature, I guess malleation isn't really a concern, but I think extra flags would make sense. I wonder if exporting  `validation.cpp:GetBlockScriptFlags` and calling it with the genesis block (or making it accept pindexPrev and calling it with nullptr) to get the scrip",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r457006827,457006827,src/signet.cpp
ajtowns,2020-07-20 03:17:28,I've done a proposal to change from a special signature checker to reusing transaction signature checking at https://github.com/bitcoin/bips/pull/947 . @sdaftuar I think this might resolve your concern from https://github.com/bitcoin/bitcoin/pull/16653#issuecomment-523495761,https://github.com/bitcoin/bitcoin/pull/18267#discussion_r457010234,457010234,src/script/interpreter.h
promag,2020-08-01 23:23:13,"359badf294c8fa632b7df479a3e146cf28658f6b\n\nnit, args can have the same name as members.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r464010088,464010088,src/signet.h
promag,2020-08-01 23:33:54,"359badf294c8fa632b7df479a3e146cf28658f6b\n\nnit, just noting `signet_blocks` is only used in the next commit.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r464010767,464010767,src/consensus/params.h
promag,2020-08-01 23:37:58,"359badf294c8fa632b7df479a3e146cf28658f6b\n\nWhy have this separated? Could be in the to the constructor?",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r464011050,464011050,src/signet.h
promag,2020-08-01 23:39:07,"359badf294c8fa632b7df479a3e146cf28658f6b\n\nThese could be const?",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r464011118,464011118,src/signet.h
promag,2020-08-01 23:52:09,"359badf294c8fa632b7df479a3e146cf28658f6b\n\nCan't find a reason for this block. Is this a leftover?",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r464011952,464011952,src/signet.cpp
ajtowns,2020-08-02 00:21:22,"The member vars are CTransactions rather than CMutableTransactions, and are effectively const, so have to be list initialized, so the actual logic has to be moved elsewhere. (At least as far as I can see)",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r464013798,464013798,src/signet.h
ajtowns,2020-08-02 00:31:20,"Yeah, it was making it possible to free up some data at one point, but now there's nothing going on afterwards anymore.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r464014430,464014430,src/signet.cpp
promag,2020-08-02 00:53:07,Thanks for the explanation 👍 ,https://github.com/bitcoin/bitcoin/pull/18267#discussion_r464015795,464015795,src/signet.h
kallewoof,2020-08-03 03:29:25,"I personally find that confusing. I think renaming the instance vars to `m_*` is worthwhile, though, so will do that.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r464176423,464176423,src/signet.h
ajtowns,2020-08-13 04:08:11,Any reason not to move the `block.GetHash() != consensusParams.hashGenesisBlock` check into `CheckBlockSolution`?,https://github.com/bitcoin/bitcoin/pull/18267#discussion_r469684620,469684620,src/validation.cpp
kallewoof,2020-08-13 05:44:47,"There was, but not any more -- fixed, thanks!",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r469709732,469709732,src/validation.cpp
maaku,2020-08-13 05:57:20,Why are these prefix values different from testnet/regtest?,https://github.com/bitcoin/bitcoin/pull/18267#discussion_r469713812,469713812,src/chainparams.cpp
kallewoof,2020-08-13 06:12:18,"Having them be the same might cause confusion when someone tries to use test/signet to transact on sig/testnet.. no biggie for regtest, which I assume is why (reg)test(net) share prefixes.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r469718546,469718546,src/chainparams.cpp
fjahr,2020-08-15 15:12:19,nit: Could add reference to BIP325 here,https://github.com/bitcoin/bitcoin/pull/18267#discussion_r470999292,470999292,src/consensus/params.h
fjahr,2020-08-15 16:14:09,"```suggestion\n        return error(""CheckBlockSolution: Errors in block (no witness commitment)"");\n```",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r471010081,471010081,src/signet.cpp
fjahr,2020-08-15 16:23:48,"nit: to consider if you feel like improving this a little more since it's not strictly move-only anyway (github doesn't highlight changes here, which is annoying. This drops the `commitpos` variable and changes for loop increment to conform with the style guide.)\n\n```suggestion\n    if (!block.vtx.empty()) {\n        for (size_t o = 0; o < block.vtx[0]->vout.size(); ++o) {\n            cons",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r471010900,471010900,src/consensus/validation.h
fjahr,2020-08-15 19:32:03,"nit: can be shortened (or make `cidx` const).\n```suggestion\n    if (GetWitnessCommitmentIndex(block) == NO_WITNESS_COMMITMENT) {\n```",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r471026715,471026715,src/signet.cpp
fjahr,2020-08-15 19:34:53,"```suggestion\n    const int cidx = GetWitnessCommitmentIndex(block);\n```",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r471026891,471026891,src/signet.cpp
kallewoof,2020-08-17 00:45:12,"I wanted to do even more (e.g. loop from end and break on first encounter, rather than always going through all of them), but I refrained as I wanted minimal changes. ~~[Edit: I think I'm misremembering something, because this code doesn't do what I said (anymore?)]~~ [Edit 2: your changes actually change the behavior. See the Segwit BIP on witness commitment.] Chicken-egg issue though, as we tend",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r471182577,471182577,src/consensus/validation.h
jonatack,2020-08-17 06:59:16,"9d19caf nit: sort ;) or just run clang-format on signet.h/signet.cpp\n```diff\n #include <consensus/params.h>\n-#include <primitives/transaction.h>\n #include <primitives/block.h>\n+#include <primitives/transaction.h>\n #include <uint256.h>\n \n+#include <array>\n #include <cstdint>\n #include <vector>\n-#include <array>\n```",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r471267630,471267630,src/signet.h
jonatack,2020-08-17 08:27:22,"6920af6 nit, consistent order\n```suggestion\n        throw std::runtime_error(""Invalid combination of -regtest, -signet, -testnet and -chain. Can use at most one."");\n```",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r471321602,471321602,src/util/system.cpp
jonatack,2020-08-17 08:32:06,"6920af6 nit: while here, it would be nice to add brackets to these successive conditionals\n\nedit: idem in `CreateChainParams`, line 485 ",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r471324349,471324349,src/chainparamsbase.cpp
jonatack,2020-08-17 08:34:53,"6920af6 for node operators, perhaps state the accepted format and/or give an example for the seednode and/or blockscript",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r471325983,471325983,src/chainparamsbase.cpp
practicalswift,2020-08-17 09:26:15,"When fuzzing the signet code I noticed that the `block.vtx.empty()` isn't handled here. What about handling it by returning invalid, or alternatively asserting that `!block.vtx.empty()`?",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r471353926,471353926,src/signet.cpp
kallewoof,2020-08-17 09:43:21,Good catch! Done. Also added a commit with your fuzzer (under your name).,https://github.com/bitcoin/bitcoin/pull/18267#discussion_r471363273,471363273,src/signet.cpp
fjahr,2020-08-17 17:16:41,"in ad33fd5b5f74bb8ff56ffe901f5a1825e73ecf44\n\nnit: The help info on the args could be updated to reflect the defaults to the global signet. Right now it's not obvious that blockscript and seednode are optional.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r471632336,471632336,src/chainparams.cpp
fjahr,2020-08-17 17:20:30,Otherwise all the changes look good to me!,https://github.com/bitcoin/bitcoin/pull/18267#discussion_r471636977,471636977,src/chainparams.cpp
instagibbs,2020-08-21 16:54:19,"""script"" is really not self-documenting.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r474815018,474815018,src/signet.cpp
instagibbs,2020-08-21 17:03:52,`s/ExtractCommitmentSection/ExtractCommitmentSectionAndModifyCB/` ?,https://github.com/bitcoin/bitcoin/pull/18267#discussion_r474819686,474819686,src/signet.cpp
instagibbs,2020-08-21 17:04:29,"Could you please re-order the arguments so they are all const first, then non-const, or vice versa?",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r474819953,474819953,src/signet.cpp
instagibbs,2020-08-21 17:05:50,`s/script/witness_commitment_script_to_replace/` or something? really would like this more self-documenting,https://github.com/bitcoin/bitcoin/pull/18267#discussion_r474820565,474820565,src/signet.cpp
instagibbs,2020-08-21 17:10:04,`s/found/found_header/`,https://github.com/bitcoin/bitcoin/pull/18267#discussion_r474822582,474822582,src/signet.cpp
instagibbs,2020-08-21 17:11:46,"please move this to the top of the function, weird to only clear when successfully finding data",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r474823457,474823457,src/signet.cpp
instagibbs,2020-08-21 17:36:25,`s/cb/modified_cb/` ? ,https://github.com/bitcoin/bitcoin/pull/18267#discussion_r474835423,474835423,src/signet.cpp
instagibbs,2020-08-21 17:37:03,`s/data/witness_data/`,https://github.com/bitcoin/bitcoin/pull/18267#discussion_r474835734,474835734,src/signet.cpp
instagibbs,2020-08-21 17:38:59,Just make a new vector named `to_spend_data`,https://github.com/bitcoin/bitcoin/pull/18267#discussion_r474836607,474836607,src/signet.cpp
MarcoFalke,2020-08-22 13:34:03,"in commit ""validation: move GetWitnessCommitmentIndex to consensus/validation"":\n\nAny reason to add a `static` in a header file? Also, why is the docstring changed in a move-only commit?",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r475091870,475091870,src/consensus/validation.h
MarcoFalke,2020-08-22 14:19:12,"in commit 0855e12485848b578bd2796d24d5a16cbb763b72:\n\nAre any of the includes here used in the header? (Except for the first three)",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r475095527,475095527,src/signet.h
MarcoFalke,2020-08-22 15:08:42,"> ""script"" is really not self-documenting.\n\n\n`witness_commitment` seems a better name",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r475099766,475099766,src/signet.cpp
MarcoFalke,2020-08-22 15:13:44,">  s/data/witness_data/\n\n\ndata includes both the scritptSig and scriptWitness, so instead of witness_data, what about `signet_solution` (the BIP also calls it that way)",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r475100199,475100199,src/signet.cpp
MarcoFalke,2020-08-22 15:19:33,"> Just make a new vector named to_spend_data\n\n\nor `block_data` (as it is called in the BIP)",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r475100672,475100672,src/signet.cpp
MarcoFalke,2020-08-22 16:01:04,"Please don't use local system errors for remote peer misbehaviour. If you want to log the reject reason, please use a log category (probably VALIDATION?).",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r475104288,475104288,src/signet.cpp
MarcoFalke,2020-08-22 16:03:26,"Also, it seems this check can be removed (if the assert in `Create` is replaced with a `return`)",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r475104486,475104486,src/signet.cpp
MarcoFalke,2020-08-22 18:06:19,"Any reason for this check? Unless I am mistaken, a challenge that allows both to be empty and still be valid also allows the solution to be non-empty and thus mutable. Allowing mutable solutions is probably no less than a footgun that allows empty solutions.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r475115595,475115595,src/signet.cpp
MarcoFalke,2020-08-22 18:36:24,Any reason to add this here? I think the test only wants to test mainnet vs non-mainnet behavior and not specific chain behavior,https://github.com/bitcoin/bitcoin/pull/18267#discussion_r475118311,475118311,src/test/util_tests.cpp
kallewoof,2020-08-24 05:08:57,Renamed `FetchAndClearCommitmentSection`.,https://github.com/bitcoin/bitcoin/pull/18267#discussion_r475345512,475345512,src/signet.cpp
kallewoof,2020-08-24 05:27:34,"The `static inline` seems to be useful in some cases, unless I'm misreading https://stackoverflow.com/questions/47819719/static-inline-functions-in-a-header-file . No strong opinion though (and it seems to compile without `static`).\n\nDocstring change was a leftover from when I modified this to take a transaction -- thanks for pointing it out! Reverting.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r475350377,475350377,src/consensus/validation.h
kallewoof,2020-08-24 05:29:57,They weren't -- moved to `signet.cpp`.,https://github.com/bitcoin/bitcoin/pull/18267#discussion_r475350981,475350981,src/signet.h
sipa,2020-08-24 05:34:51,"`static` means that if the function gets inlined in every call site, it won't be materialized as a separate function in the object file. However, if they can't be inlined, every compilation unit will get its own copy.\n\nWithout `static`, there will be exactly one copy in the binary, shared by all non-inlined callsites.\n\nBoth will work, but the resulting binary is slightly differently layed out.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r475352136,475352136,src/consensus/validation.h
kallewoof,2020-08-24 06:11:14,"E.g. in `ReadBlockFromDisk`, this isn't remote peer misbehavior, is it? Either way, it uses `error()` when errors in the block is encountered, and depends on `CheckBlockSolution` to do so as well. I could remove that dependency and just put a generic error in `ReadBlockFromDisk`, but not sure it's necessary.\n\nThe `error()` result is unused in `CheckBlock()`.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r475362739,475362739,src/signet.cpp
kallewoof,2020-08-24 06:14:11,Good point; removing this check.,https://github.com/bitcoin/bitcoin/pull/18267#discussion_r475363668,475363668,src/signet.cpp
kallewoof,2020-08-24 06:17:19,"It seems not unreasonable to test signet behavior in this manner as well, so keeping this for now. No strong opinion though, so will remove if you or someone insist.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r475364747,475364747,src/test/util_tests.cpp
MarcoFalke,2020-08-24 06:23:06,"What I meant to say is that `error()` will unconditionally log to disk (something that should happen on local system errors, e.g. ironically out-of-disk). Reject reasons that originate from messages sent by remote peers should be logged with a log category, which can be turned on or off.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r475366669,475366669,src/signet.cpp
MarcoFalke,2020-08-24 06:26:03,no need for a new line here,https://github.com/bitcoin/bitcoin/pull/18267#discussion_r475367730,475367730,src/signet.cpp
kallewoof,2020-08-24 06:54:08,"Makes sense, thank you. Dropping `static`.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r475378136,475378136,src/consensus/validation.h
kallewoof,2020-08-24 07:00:30,"I'm confused. The other `error()` calls e.g. in `ReadBlockFromDisk` are exactly of the same type. If you mean that these are invalid and should (eventually) be fixed, then I'm completely on board.\n\nThe end result, in this case, will still be a log to disk, since `ReadBlockFromDisk` calls `error()` -- it will just be less detailed/helpful.\n\nI could break the current pattern, i.e. not call `",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r475380835,475380835,src/signet.cpp
sipa,2020-08-24 07:05:10,"error() is for system errors, situations where something is wrong with your computer locally, rather than something wrong with the block itself.\n\nThis here looks like a consensus rule violation instead. ",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r475382791,475382791,src/signet.cpp
kallewoof,2020-08-24 07:13:59,"OK, I think L1164 is similar, but I can sort of get the difference. Changing to logging.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r475386718,475386718,src/signet.cpp
MarcoFalke,2020-08-24 07:42:16,"This check seems duplicate and can be removed. The ` if (!signet_txs.m_valid) {` in the next line already checks for missing witness commitment, missing signet header in the commitment, or incorrect size of the signet_solution",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r475400527,475400527,src/signet.cpp
MarcoFalke,2020-08-24 07:50:16,"nit: Maybe also rename this to `CheckSignetBlockSolution` to be extra verbose. Also, could add a `if (!consensusparams.signet_blocks) return false;` or `assert(false);`",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r475404918,475404918,src/signet.cpp
kallewoof,2020-08-24 09:20:47,"Oh, you're right. Removing.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r475455815,475455815,src/signet.cpp
kallewoof,2020-08-24 09:22:27,"Yeah, misleadingly named. Renaming.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r475456743,475456743,src/signet.cpp
kallewoof,2020-08-24 09:27:57,Reordered alphabetically and split into 'C++ stuff' and 'Bitcoin Core stuff'.,https://github.com/bitcoin/bitcoin/pull/18267#discussion_r475462743,475462743,src/signet.cpp
sipa,2020-08-25 03:41:29,"@kallewoof Just to make sure this is clear: L1164 isn't part of the consensus rules, but just a disk-sanity check.\n\nThe reason is that we don't store blocks with invalid PoW on disk, as it's verified before that point is reached (it's verified in `CheckBlockHeader`). In `ReadBlockFromDisk` the check is redundant for that reason, but it's used as a simple (but rather expensive) checksum that th",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r476124017,476124017,src/signet.cpp
kallewoof,2020-08-25 05:47:42,"Good point, yep!",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r476192151,476192151,src/signet.cpp
MarcoFalke,2020-08-25 06:01:46,I think this has been correctly solved in the latest force push (Thus I resolved the discussion here),https://github.com/bitcoin/bitcoin/pull/18267#discussion_r476196808,476196808,src/signet.cpp
ajtowns,2020-08-27 23:14:06,nit: `args` not `gArgs`,https://github.com/bitcoin/bitcoin/pull/18267#discussion_r478745564,478745564,src/chainparams.cpp
MarcoFalke,2020-08-28 05:59:41,why is this needed?,https://github.com/bitcoin/bitcoin/pull/18267#discussion_r478847575,478847575,test/functional/test_framework/test_framework.py
MarcoFalke,2020-08-28 06:00:09,why is this needed when setup_clean_chain is set to true?,https://github.com/bitcoin/bitcoin/pull/18267#discussion_r478847732,478847732,test/functional/test_framework/test_framework.py
MarcoFalke,2020-08-28 06:01:05,Could use `assert_raises` or a specific exception to avoid catching a keyboard interrupt ,https://github.com/bitcoin/bitcoin/pull/18267#discussion_r478848058,478848058,test/functional/feature_signet.py
MarcoFalke,2020-08-28 06:01:41,why is this set?,https://github.com/bitcoin/bitcoin/pull/18267#discussion_r478848224,478848224,test/functional/feature_signet.py
MarcoFalke,2020-08-28 06:03:59,why 6 nodes when only 3 are queried?,https://github.com/bitcoin/bitcoin/pull/18267#discussion_r478848834,478848834,test/functional/feature_signet.py
MarcoFalke,2020-08-28 06:07:26,why create a block that is unused?,https://github.com/bitcoin/bitcoin/pull/18267#discussion_r478849922,478849922,test/functional/feature_signet.py
kallewoof,2020-08-28 06:33:57,Because the privkeys cannot be imported due to signet having a different prefix. (`Invalid private key encoding (-5)`),https://github.com/bitcoin/bitcoin/pull/18267#discussion_r478859676,478859676,test/functional/test_framework/test_framework.py
kallewoof,2020-08-28 06:34:51,"Because `cache_node` is perhaps unable to generate any blocks at all, due to lacking the privkeys to properly sign them.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r478859993,478859993,test/functional/test_framework/test_framework.py
kallewoof,2020-08-28 06:38:52,"Actually, that code is broken; the submitblock call does not raise anything, but returns an error string. Fixed though.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r478861480,478861480,test/functional/feature_signet.py
kallewoof,2020-08-28 06:39:29,"Left-over, removed. (I wanted to sync and check that peer(s) were at the right heights)",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r478861698,478861698,test/functional/feature_signet.py
kallewoof,2020-08-28 06:40:15,"I originally intended to pair-wise ensure that the nodes shared blocks, but this was flakey so I removed those checks.\n\nMore importantly though, `getblocktemplate` requires at least 1 peer or it errors.\n\nEdit: to clarify, there are 3 separate networks, even though they're all clumped together as I don't want to make 3 separate files and classes; nodes 0-1 are on a challenge = OP_TRUE netwo",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r478862000,478862000,test/functional/feature_signet.py
MarcoFalke,2020-08-28 06:42:28,"Probably another reason why it would be better to have the same prefix. See also:\n\n* https://github.com/bitcoin/bitcoin/pull/18267#discussion_r469713812\n* #12314 ",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r478862811,478862811,test/functional/test_framework/test_framework.py
kallewoof,2020-08-28 06:42:34,"I think something went missing from the import. The original code does nothing with it either, so removing for now. (Would be good to test a manually crafted block, but I don't think that's easy without mining stuff.)",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r478862849,478862849,test/functional/feature_signet.py
MarcoFalke,2020-08-28 06:52:36,I don't like this change either. Just because the challenge doesn't require a signature shouldn't mean the header can simply be omitted completely,https://github.com/bitcoin/bitcoin/pull/18267#discussion_r478866619,478866619,src/signet.cpp
kallewoof,2020-08-28 07:03:35,Switched to using testnet prefixes (including bech32 one).,https://github.com/bitcoin/bitcoin/pull/18267#discussion_r478871058,478871058,test/functional/test_framework/test_framework.py
kallewoof,2020-08-28 07:03:41,Switched to using testnet prefixes (including bech32 one).,https://github.com/bitcoin/bitcoin/pull/18267#discussion_r478871089,478871089,src/chainparams.cpp
MarcoFalke,2020-08-28 07:14:39,locally it is passing for me. What is the error message you get? This code path should only be executed when `setup_clean_chain==False`,https://github.com/bitcoin/bitcoin/pull/18267#discussion_r478875978,478875978,test/functional/test_framework/test_framework.py
kallewoof,2020-08-28 07:25:08,"Ahh I see what you're saying. Removing this part, thanks!",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r478881190,478881190,test/functional/test_framework/test_framework.py
MarcoFalke,2020-08-28 07:33:20,unused?,https://github.com/bitcoin/bitcoin/pull/18267#discussion_r478888089,478888089,test/functional/feature_signet.py
kallewoof,2020-08-28 07:41:14,"It does enable `generate*` for `OP_TRUE` signets, though, which is handy.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r478894582,478894582,src/signet.cpp
kallewoof,2020-08-28 07:55:00,After switching I noticed that `rust-bitcoin` relies on bech32 prefixes to be unique per network. This change breaks that assumption.,https://github.com/bitcoin/bitcoin/pull/18267#discussion_r478906453,478906453,test/functional/test_framework/test_framework.py
kallewoof,2020-08-28 07:57:42,"It also breaks the assumption that each prefix (pubkey etc) maps to a specific network. Maybe I need to revert this change..\n\nEdit: it seems to be the case for regtest as well, so I'm patching it up in the hopes that it will ""just work"".\n\nEdit 2: I've updated the explorer (which relies on rust-bitcoin) and it seems to be running without problems.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r478908941,478908941,test/functional/test_framework/test_framework.py
MarcoFalke,2020-08-28 08:00:38,"Changing consensus code to return early to avoid having to write tests for it seems backward. I'd rather have no tests than a test that requires changing consensus code. Also, this will need to be changed in the BIP first.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r478911601,478911601,src/signet.cpp
kallewoof,2020-08-28 08:37:24,"Honestly, I always assumed that an OP_TRUE challenge with an empty solution was implicitly accepted, even with the BIP as it stands now.\n\nI read this code as ""if it is able to fetch the signet commitment, deserialize it into the scriptSig/witness of the spending tx vin[0]"", i.e. it doesn't actually return early, it just doesn't deserialize. The actual validation (i.e. call to `VerifyScript(...",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r478947960,478947960,src/signet.cpp
ajtowns,2020-08-28 08:52:51,"I think having ""no block solution"" encoded as no signet commitment rather than an empty signet commitment seems slightly better; and it makes it possible for signet with ""pushdata(non-zero)"" as the challenge act like a unique (as far as magic is concerned), pow-enforcing regtest without needing any additional mining code. I'm not sure that's useful, but I don't think it's worse -- you can have an ",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r478963010,478963010,src/signet.cpp
kallewoof,2020-08-28 09:19:51,"I like challenge/solution, but `-signet_blockchallenge` looks really long to me...",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r479006569,479006569,src/signet.cpp
MarcoFalke,2020-08-28 09:22:34,"The BIP refers to it as `signet_challenge`, not block challenge?! Am I reading the wrong doc?",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r479010878,479010878,src/signet.cpp
kallewoof,2020-08-28 09:33:19,BIP revision proposal: https://github.com/bitcoin/bips/pull/983,https://github.com/bitcoin/bitcoin/pull/18267#discussion_r479025663,479025663,src/signet.cpp
kallewoof,2020-08-28 09:36:06,"Ahh, yeah it does call it `signet_challenge` in the new version.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r479028919,479028919,src/signet.cpp
MarcoFalke,2020-08-29 10:24:56,"Again, I don't understand what this is trying to achieve. See also https://github.com/bitcoin/bitcoin/pull/18267#discussion_r475115595",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r479635027,479635027,src/signet.cpp
kallewoof,2020-08-29 13:32:22,"Yeah, I don't think this is necessary. Removing.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r479650275,479650275,src/signet.cpp
MarcoFalke,2020-08-29 13:59:37,"why wait? `generatetoaddress` is blocking, so the assertion can be evaluated immediately after it returns",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r479652603,479652603,test/functional/feature_signet.py
MarcoFalke,2020-08-29 14:00:33,why is this even overwritten?,https://github.com/bitcoin/bitcoin/pull/18267#discussion_r479652706,479652706,test/functional/feature_signet.py
MarcoFalke,2020-08-29 14:02:18,I'd prefer to simply write out the node index. This might even be shorter,https://github.com/bitcoin/bitcoin/pull/18267#discussion_r479652869,479652869,test/functional/feature_signet.py
kallewoof,2020-08-30 22:27:23,"I saw intermittent failures; you're right, this is blocking, so this solution is not correct; reverting.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r479823721,479823721,test/functional/feature_signet.py
kallewoof,2020-08-30 22:32:58,"It originally did block signing/grinding and such, but you're right, it's not needed at this stage; removing.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r479824201,479824201,test/functional/feature_signet.py
kallewoof,2020-08-30 22:33:50,That is fine by me.,https://github.com/bitcoin/bitcoin/pull/18267#discussion_r479824262,479824262,test/functional/feature_signet.py
ajtowns,2020-09-04 08:12:59,"`math.log2(0x00002adc28000000000000000000000000000000000000000000000000000000 * (14*24*60*60))` gives `257.62...` that is in `pow.cpp:CalculateNextWorkRequired`, if you're at minimum work and aren't getting to the next retarget period in less than the target timespan, you'll overflow the `arith_uint256` when trying to work out the next difficulty and get a weird answer. For current signet, that's ",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r483460766,483460766,src/chainparams.cpp
kallewoof,2020-09-06 13:15:43,"I would like to avoid deviating from mainnet parameters as much as possible, permanently. It sucks, but another reset may be worth it here.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r484069009,484069009,src/chainparams.cpp
ajtowns,2020-09-08 08:15:29,"Note that the `fRequireStandard` is in validation.cpp and initialised in init.cpp based on `-acceptnonstdtxn` -- so users can individually override this setting if they want. [ie, the value that actually controls whether non std txs get into the mempool is in validation.cpp, the setting here changes the member variable in chainparams which is just used as a default for initialising the global from",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r484734516,484734516,src/chainparams.cpp
jnewbery,2020-09-09 16:45:45,We usually put constant declarations at the top of the file for visibility. These symbols are included in other translation units.,https://github.com/bitcoin/bitcoin/pull/18267#discussion_r485766059,485766059,src/consensus/validation.h
kallewoof,2020-09-10 01:44:11,"Thanks, moved.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r486013306,486013306,src/consensus/validation.h
sipa,2020-09-13 19:33:32,"In commit ""consensus: add signet validation"":\n\nIs this necessary? If a block is corrupted on disk, the PoW check above will already catch it.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r487568141,487568141,src/validation.cpp
sipa,2020-09-13 20:09:03,"In commit ""add signet basic support (signet.cpp)"":\n\nIt looks like this is actually just implying a spending transaction with empty scriptSig/witness stack, not one that contains OP_TRUE. Is the comment outdated?",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r487571772,487571772,src/signet.cpp
sipa,2020-09-13 20:12:59,"In commit ""add signet chain and accompanying parameters"":\n\nThere doesn't seem to be a default signet test network challenge in this commit.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r487572143,487572143,src/chainparamsbase.cpp
ajtowns,2020-09-13 23:21:19,"Your observation is accurate; it's not outdated per se, it was always just a non-exclusive list of things allowed... (this is why I don't write comments :)\n\nAnother interesting challenge is something like `DEPTH IF DROP ENDIF DEPTH IF DROP ENDIF DEPTH IF DROP ENDIF TRUE` which (ignoring magic) would follow the most work chain from any signet whose block solutions weren't witness based and cont",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r487590530,487590530,src/signet.cpp
kallewoof,2020-09-14 04:26:04,"Edit: I see what you're saying now. Yeah, it's chronologically problematic. If I end up rebasing I will tweak this to appear in the commit along with the defaults.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r487644510,487644510,src/chainparamsbase.cpp
kallewoof,2020-09-14 04:28:09,"That assumes that the signet validation has been done for all blocks that are written to disk, which may be the case now, but perhaps not always.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r487644961,487644961,src/validation.cpp
laanwj,2020-09-15 16:49:54,"BTW: this is the first command line argument with ` _`, or any kind of separator—for that matter— in it. We might want to discuss what we like to see here. Personally, I'd expect `-signet-challenge`. Or just `-signetchallenge` to be consistent with say, `-segwitheight`.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r488814952,488814952,src/chainparamsbase.cpp
sipa,2020-09-15 16:55:57,"Very vaguely related, I just saw this: https://twitter.com/koenvervloesem/status/1305911670083067904",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r488818585,488818585,src/chainparamsbase.cpp
kallewoof,2020-09-16 05:26:51,"I don't have a strong opinion on it, other than it feels like a good idea to clearly separate signet stuff from the rest. I believe we will have several more parameters in the future, e.g. for selecting soft forks or to define alternative challenges (opt-in reorg chain, if we end up going that route).",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r489171178,489171178,src/chainparamsbase.cpp
laanwj,2020-09-17 18:44:02,"Sure, agree on that, but starting the options with `signet` should already be enough to keep them separate from the rest.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r490477948,490477948,src/chainparamsbase.cpp
kallewoof,2020-09-18 00:37:26,Switching to `-signet<suffix>`.,https://github.com/bitcoin/bitcoin/pull/18267#discussion_r490635685,490635685,src/chainparamsbase.cpp
kallewoof,2020-09-18 01:20:58,"Also addressed original note that there is no default signet at this point; this line is now modified in the ""hard coded default signet"" commit to add in the note about default network.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r490646738,490646738,src/chainparamsbase.cpp
dr-orlovsky,2020-09-18 19:31:31,"Why we do use ""tb"" instead of ""sb"" here?\n\nIn c-lightning PR we had ""sb"" here: https://github.com/ElementsProject/lightning/pull/2816/files#diff-53092192708008b1de0d997128c58d37R54\n\nAnd BIP-325 and BIP-173 are being silent in this regard: not even a PR",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r491150895,491150895,src/chainparams.cpp
kallewoof,2020-09-19 08:49:16,People thinks that the test networks should use the same prefixes so it was changed to match testnet.,https://github.com/bitcoin/bitcoin/pull/18267#discussion_r491335681,491335681,src/chainparams.cpp
dr-orlovsky,2020-09-19 09:26:33,"Alright, probably we have another thing to update in c-lightning then, additionally to new nonce.\n\nAlso, noticed that BIP-235 still has outdated nonce info",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r491348734,491348734,src/chainparams.cpp
MarcoFalke,2020-09-20 11:03:29,"might be good to rename m_valid to has_txs or similar, since the sigcheck validation hasn't been run at this point, so it is unknown whether the txs are valid.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r491680141,491680141,src/signet.cpp
MarcoFalke,2020-09-20 11:14:19,why is this check needed? This will limit coverage,https://github.com/bitcoin/bitcoin/pull/18267#discussion_r491681013,491681013,src/test/fuzz/signet.cpp
MarcoFalke,2020-09-20 11:16:45,"How is this different from just\n\n```suggestion\n        self.nodes[0].generate(1)\n```\n\nIdeally, we could run the tests without wallet",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r491681205,491681205,test/functional/feature_signet.py
MarcoFalke,2020-09-20 11:17:58,"style nit\n\n```suggestion\n            height += 1\n```",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r491681291,491681291,test/functional/feature_signet.py
ajtowns,2020-09-21 06:17:03,"Filed https://github.com/bitcoin/bips/pull/1000 to update the bip for the genesis block. FWIW, #12314 has related discussion about reusing testnet addresses in regtest.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r491811682,491811682,src/chainparams.cpp
ajtowns,2020-09-21 06:23:21,Could invert it and call it `m_parse_failure`. Could even add `bool operator!() const { return m_parse_failure; }` so the test is just `if (!signet_txs)`. Seems very nit-y though.,https://github.com/bitcoin/bitcoin/pull/18267#discussion_r491813670,491813670,src/signet.cpp
kallewoof,2020-09-21 09:46:33,@practicalswift ^,https://github.com/bitcoin/bitcoin/pull/18267#discussion_r491914906,491914906,src/test/fuzz/signet.cpp
kallewoof,2020-09-21 09:47:18,"I think this can wait until after merge, unless I need to rebase again.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r491915528,491915528,test/functional/feature_signet.py
kallewoof,2020-09-21 09:47:33,I think this can wait too; will do if I end up requiring a rebase.,https://github.com/bitcoin/bitcoin/pull/18267#discussion_r491915814,491915814,test/functional/feature_signet.py
kallewoof,2020-09-21 09:49:08,"I think this is nit-ty enough that it's worth leaving as is, if it means retaining tACKs.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r491917224,491917224,src/signet.cpp
kallewoof,2020-09-21 09:51:09,"Thanks for pointing that out, @dr-orlovsky -- I thought I had already updated the BIP but I had apparently forgotten to actually make it into a pull request.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r491918380,491918380,src/chainparams.cpp
Sjors,2020-09-22 10:19:42,"It's a bit weird that this shows up as ""Loading addresses from DNS seed"", but that's out of scope for this PR.",https://github.com/bitcoin/bitcoin/pull/18267#discussion_r492625296,492625296,src/chainparams.cpp
MarcoFalke,2020-09-22 14:03:16,Agree the style nit was non-blocking. Fixed in #19993,https://github.com/bitcoin/bitcoin/pull/18267#discussion_r492760297,492760297,test/functional/feature_signet.py
MarcoFalke,2020-09-22 14:03:30,Agree this was non-blocking. Fixed in #19993,https://github.com/bitcoin/bitcoin/pull/18267#discussion_r492760524,492760524,test/functional/feature_signet.py
MarcoFalke,2020-09-22 14:03:51,Fixed in #19993,https://github.com/bitcoin/bitcoin/pull/18267#discussion_r492760826,492760826,src/test/fuzz/signet.cpp
MarcoFalke,2020-09-22 14:03:56,Fixed in #19993,https://github.com/bitcoin/bitcoin/pull/18267#discussion_r492760873,492760873,src/signet.cpp
