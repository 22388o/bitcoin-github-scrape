[
  {
    "sha": "a2147d7dadec1febcd9c2b8ebbbf78dce6d0556b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMjE0N2Q3ZGFkZWMxZmViY2Q5YzJiOGViYmJmNzhkY2U2ZDA1NTZi",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-04-30T03:25:45Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-09-10T01:47:40Z"
      },
      "message": "validation: move GetWitnessCommitmentIndex to consensus/validation",
      "tree": {
        "sha": "880bea2c07142cb1baed308558de38111079df77",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/880bea2c07142cb1baed308558de38111079df77"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a2147d7dadec1febcd9c2b8ebbbf78dce6d0556b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAl9ZhbwACgkQV692LbM1\nMyKCDhAAnkyX6NgvhKLlWrG11B/ikctD+efJQOpewoeHb2m700ZSBnPpg5+CRp+k\nomkO41IKsUyPPNlz9zwl7ZYtZf57HzwIG/6mUyD9R4J9M8rU8VQirNRixwQVxZnL\nUoms9uw3XjqSwJ/BfPQxemX7JEGKPEPiHlT+bzawXRfjzzXJbbEDDQ+XqEYh5Wju\nvvL+snt+RZeTquuRJiTQ39WdldvPxRuwMQyvV1m7aFCVrjib2xLzEgJBsKwiBmEs\nDmP7NR0GJL6UcgDpUIV7gurzcdCmbZqsTkLJlt2GQN49B7wjvEsEdx/+UtBEs2re\ntOtXsm9alWJ8BJ5fduuyYbGxA+OjqcaWzrhX2jBl2ht14qowNKd9lgN1Y1Wis+C6\no7XKYsiP3wfuSHdOast2KfvzLSeElxRmSt51wX9jTWCg4/jVKFVbuJJWJOhFyTga\nPqvd46QLmpOPVYdCmmfHTi23Ww5uGmO2cnfARc9saOhrJYwv3DeBaqcfk0vSV/js\nGzxf9QrXvsrF4X/VbHzHf27Op/BIpIM2O7uLvo0/EKfmhiYBTp+zR4jNFN5+Pyqh\nGlXu6nceIPBxe8sXN0sqfwFy75RYwwTP55+DAo0sotRgm4IY4HMtdBZh4tJGkmry\nHTEb7GEGwPnTlPhpXVpHEGSTHr/W63GI2udXrTCy7FkqSZsp6GE=\n=mt/R\n-----END PGP SIGNATURE-----",
        "payload": "tree 880bea2c07142cb1baed308558de38111079df77\nparent 15886b08aa5f05194633eba063d7412d0e4fd036\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1588217145 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1599702460 +0900\n\nvalidation: move GetWitnessCommitmentIndex to consensus/validation\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2147d7dadec1febcd9c2b8ebbbf78dce6d0556b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a2147d7dadec1febcd9c2b8ebbbf78dce6d0556b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2147d7dadec1febcd9c2b8ebbbf78dce6d0556b/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "15886b08aa5f05194633eba063d7412d0e4fd036",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/15886b08aa5f05194633eba063d7412d0e4fd036",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/15886b08aa5f05194633eba063d7412d0e4fd036"
      }
    ],
    "stats": {
      "total": 58,
      "additions": 30,
      "deletions": 28
    },
    "files": [
      {
        "sha": "e007c481df4a942529119ab78a1adf3538a2d466",
        "filename": "src/consensus/validation.h",
        "status": "modified",
        "additions": 27,
        "deletions": 0,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a2147d7dadec1febcd9c2b8ebbbf78dce6d0556b/src/consensus/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a2147d7dadec1febcd9c2b8ebbbf78dce6d0556b/src/consensus/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/validation.h?ref=a2147d7dadec1febcd9c2b8ebbbf78dce6d0556b",
        "patch": "@@ -12,6 +12,12 @@\n #include <primitives/transaction.h>\n #include <primitives/block.h>\n \n+/** Index marker for when no witness commitment is present in a coinbase transaction. */\n+static constexpr int NO_WITNESS_COMMITMENT{-1};\n+\n+/** Minimum size of a witness commitment structure. Defined in BIP 141. **/\n+static constexpr size_t MINIMUM_WITNESS_COMMITMENT{38};\n+\n /** A \"reason\" why a transaction was invalid, suitable for determining whether the\n   * provider of the transaction should be banned/ignored/disconnected/etc.\n   */\n@@ -151,4 +157,25 @@ static inline int64_t GetTransactionInputWeight(const CTxIn& txin)\n     return ::GetSerializeSize(txin, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * (WITNESS_SCALE_FACTOR - 1) + ::GetSerializeSize(txin, PROTOCOL_VERSION) + ::GetSerializeSize(txin.scriptWitness.stack, PROTOCOL_VERSION);\n }\n \n+/** Compute at which vout of the block's coinbase transaction the witness commitment occurs, or -1 if not found */\n+inline int GetWitnessCommitmentIndex(const CBlock& block)\n+{\n+    int commitpos = NO_WITNESS_COMMITMENT;\n+    if (!block.vtx.empty()) {\n+        for (size_t o = 0; o < block.vtx[0]->vout.size(); o++) {\n+            const CTxOut& vout = block.vtx[0]->vout[o];\n+            if (vout.scriptPubKey.size() >= MINIMUM_WITNESS_COMMITMENT &&\n+                vout.scriptPubKey[0] == OP_RETURN &&\n+                vout.scriptPubKey[1] == 0x24 &&\n+                vout.scriptPubKey[2] == 0xaa &&\n+                vout.scriptPubKey[3] == 0x21 &&\n+                vout.scriptPubKey[4] == 0xa9 &&\n+                vout.scriptPubKey[5] == 0xed) {\n+                commitpos = o;\n+            }\n+        }\n+    }\n+    return commitpos;\n+}\n+\n #endif // BITCOIN_CONSENSUS_VALIDATION_H"
      },
      {
        "sha": "be1374e8105fed8262d7501f271d343ebb0dd6c8",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 23,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a2147d7dadec1febcd9c2b8ebbbf78dce6d0556b/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a2147d7dadec1febcd9c2b8ebbbf78dce6d0556b/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=a2147d7dadec1febcd9c2b8ebbbf78dce6d0556b",
        "patch": "@@ -3395,31 +3395,11 @@ bool IsWitnessEnabled(const CBlockIndex* pindexPrev, const Consensus::Params& pa\n     return (height >= params.SegwitHeight);\n }\n \n-int GetWitnessCommitmentIndex(const CBlock& block)\n-{\n-    int commitpos = -1;\n-    if (!block.vtx.empty()) {\n-        for (size_t o = 0; o < block.vtx[0]->vout.size(); o++) {\n-            const CTxOut& vout = block.vtx[0]->vout[o];\n-            if (vout.scriptPubKey.size() >= MINIMUM_WITNESS_COMMITMENT &&\n-                vout.scriptPubKey[0] == OP_RETURN &&\n-                vout.scriptPubKey[1] == 0x24 &&\n-                vout.scriptPubKey[2] == 0xaa &&\n-                vout.scriptPubKey[3] == 0x21 &&\n-                vout.scriptPubKey[4] == 0xa9 &&\n-                vout.scriptPubKey[5] == 0xed) {\n-                commitpos = o;\n-            }\n-        }\n-    }\n-    return commitpos;\n-}\n-\n void UpdateUncommittedBlockStructures(CBlock& block, const CBlockIndex* pindexPrev, const Consensus::Params& consensusParams)\n {\n     int commitpos = GetWitnessCommitmentIndex(block);\n     static const std::vector<unsigned char> nonce(32, 0x00);\n-    if (commitpos != -1 && IsWitnessEnabled(pindexPrev, consensusParams) && !block.vtx[0]->HasWitness()) {\n+    if (commitpos != NO_WITNESS_COMMITMENT && IsWitnessEnabled(pindexPrev, consensusParams) && !block.vtx[0]->HasWitness()) {\n         CMutableTransaction tx(*block.vtx[0]);\n         tx.vin[0].scriptWitness.stack.resize(1);\n         tx.vin[0].scriptWitness.stack[0] = nonce;\n@@ -3433,7 +3413,7 @@ std::vector<unsigned char> GenerateCoinbaseCommitment(CBlock& block, const CBloc\n     int commitpos = GetWitnessCommitmentIndex(block);\n     std::vector<unsigned char> ret(32, 0x00);\n     if (consensusParams.SegwitHeight != std::numeric_limits<int>::max()) {\n-        if (commitpos == -1) {\n+        if (commitpos == NO_WITNESS_COMMITMENT) {\n             uint256 witnessroot = BlockWitnessMerkleRoot(block, nullptr);\n             CHash256().Write(witnessroot).Write(ret).Finalize(witnessroot);\n             CTxOut out;\n@@ -3571,7 +3551,7 @@ static bool ContextualCheckBlock(const CBlock& block, BlockValidationState& stat\n     bool fHaveWitness = false;\n     if (nHeight >= consensusParams.SegwitHeight) {\n         int commitpos = GetWitnessCommitmentIndex(block);\n-        if (commitpos != -1) {\n+        if (commitpos != NO_WITNESS_COMMITMENT) {\n             bool malleated = false;\n             uint256 hashWitness = BlockWitnessMerkleRoot(block, &malleated);\n             // The malleation check is ignored; as the transaction tree itself"
      },
      {
        "sha": "f3738a49ec907bad6ad93888ba4927b814775019",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a2147d7dadec1febcd9c2b8ebbbf78dce6d0556b/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a2147d7dadec1febcd9c2b8ebbbf78dce6d0556b/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=a2147d7dadec1febcd9c2b8ebbbf78dce6d0556b",
        "patch": "@@ -93,8 +93,6 @@ static const unsigned int DEFAULT_CHECKLEVEL = 3;\n // one 128MB block file + added 15% undo data = 147MB greater for a total of 545MB\n // Setting the target to >= 550 MiB will make it likely we can respect the target.\n static const uint64_t MIN_DISK_SPACE_FOR_BLOCK_FILES = 550 * 1024 * 1024;\n-/** Minimum size of a witness commitment structure. Defined in BIP 141. **/\n-static constexpr size_t MINIMUM_WITNESS_COMMITMENT{38};\n \n struct BlockHasher\n {\n@@ -306,9 +304,6 @@ bool TestBlockValidity(BlockValidationState& state, const CChainParams& chainpar\n  *  Note that transaction witness validation rules are always enforced when P2SH is enforced. */\n bool IsWitnessEnabled(const CBlockIndex* pindexPrev, const Consensus::Params& params);\n \n-/** Compute at which vout of the block's coinbase transaction the witness commitment occurs, or -1 if not found */\n-int GetWitnessCommitmentIndex(const CBlock& block);\n-\n /** Update uncommitted block structures (currently: only the witness reserved value). This is safe for submitted blocks. */\n void UpdateUncommittedBlockStructures(CBlock& block, const CBlockIndex* pindexPrev, const Consensus::Params& consensusParams);\n "
      }
    ]
  },
  {
    "sha": "404682b7cdb54494e7c98f0ba0cac8b51f379750",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MDQ2ODJiN2NkYjU0NDk0ZTdjOThmMGJhMGNhYzhiNTFmMzc5NzUw",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2019-07-17T08:41:32Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-09-10T01:47:40Z"
      },
      "message": "add signet basic support (signet.cpp)\n\nCo-authored-by: Anthony Towns <aj@erisian.com.au>",
      "tree": {
        "sha": "efbf6c2ab88f7392185efefb5f77006c2db2cecc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/efbf6c2ab88f7392185efefb5f77006c2db2cecc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/404682b7cdb54494e7c98f0ba0cac8b51f379750",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAl9ZhbwACgkQV692LbM1\nMyKP6A//YtBpDifIsmPyCIPbA49MYWjjf+B183ETMdWfthwUvK5B4G4Qwrpe+OjE\nYaAMoPrcA8AmSuv0tQ3mObAhIu4QV7I0x/bb+52XwatDl4Q+1O7tNwurJQ/vC/jU\nwem0DHJNym8fsJbfRGWJixzUInr3PGYi43qWpVGNANZ77hjbCdsn+mI6+TvMuv0+\n5CaG46A3Yx+I3P/1tR91ws080dr//PBVk7KLYUgIhmpcquaB+aM0WeK1/2s+c+SL\nhk5PZ9OA1sKDs1MJKmt02t10x/oRw8IOH+luecwvywg0gAKapzHFM4huKNseP8np\n6alVF29cg2965CF7An7Pk6fQYHEbUMFleyE/Hd16hX8BMrCVus1skZZCKeKIBZsh\nQQeQbkXoZhBLkgNBHMeQismtkLMuxNU2v7zJZyBTx6PFTCz/1E68XApDiorOB0AS\n2QL+FRqj45amDUk9vmX/p3B3HdxF9BEIVqwpryjgPu0591CV0uz6dkoY+QPFJnuA\nOC/O2dxL5p3Hn6OBF3pULhy2ASL+FlHthbfsUALH5iQtEaKm8NxLb+8FwwPFdTsy\nhlHCxt3KzZ7QQd68kM5qcIM8nCJEtWU+S5cuGtFwZvZtVdsRPo4a+O1PiKBHXNEv\nPKVlGnaJ2s0gRSv27KBAH8E6rogO6V5DU5Ra5LPE4SPTHrQZj4I=\n=wmUM\n-----END PGP SIGNATURE-----",
        "payload": "tree efbf6c2ab88f7392185efefb5f77006c2db2cecc\nparent a2147d7dadec1febcd9c2b8ebbbf78dce6d0556b\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1563352892 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1599702460 +0900\n\nadd signet basic support (signet.cpp)\n\nCo-authored-by: Anthony Towns <aj@erisian.com.au>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/404682b7cdb54494e7c98f0ba0cac8b51f379750",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/404682b7cdb54494e7c98f0ba0cac8b51f379750",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/404682b7cdb54494e7c98f0ba0cac8b51f379750/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a2147d7dadec1febcd9c2b8ebbbf78dce6d0556b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2147d7dadec1febcd9c2b8ebbbf78dce6d0556b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a2147d7dadec1febcd9c2b8ebbbf78dce6d0556b"
      }
    ],
    "stats": {
      "total": 200,
      "additions": 200,
      "deletions": 0
    },
    "files": [
      {
        "sha": "53ad03d41f83226ece847bd0ffe2be55ad65a4c2",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/404682b7cdb54494e7c98f0ba0cac8b51f379750/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/404682b7cdb54494e7c98f0ba0cac8b51f379750/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=404682b7cdb54494e7c98f0ba0cac8b51f379750",
        "patch": "@@ -201,6 +201,7 @@ BITCOIN_CORE_H = \\\n   script/signingprovider.h \\\n   script/standard.h \\\n   shutdown.h \\\n+  signet.h \\\n   streams.h \\\n   support/allocators/secure.h \\\n   support/allocators/zeroafterfree.h \\\n@@ -321,6 +322,7 @@ libbitcoin_server_a_SOURCES = \\\n   rpc/server.cpp \\\n   script/sigcache.cpp \\\n   shutdown.cpp \\\n+  signet.cpp \\\n   timedata.cpp \\\n   torcontrol.cpp \\\n   txdb.cpp \\"
      },
      {
        "sha": "85ab3f61ef59505d9f32f37bb0253893bdb4f9de",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/404682b7cdb54494e7c98f0ba0cac8b51f379750/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/404682b7cdb54494e7c98f0ba0cac8b51f379750/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=404682b7cdb54494e7c98f0ba0cac8b51f379750",
        "patch": "@@ -80,6 +80,13 @@ struct Params {\n     int64_t DifficultyAdjustmentInterval() const { return nPowTargetTimespan / nPowTargetSpacing; }\n     uint256 nMinimumChainWork;\n     uint256 defaultAssumeValid;\n+\n+    /**\n+     * If true, witness commitments contain a payload equal to a Bitcoin Script solution\n+     * to the signet challenge. See BIP325.\n+     */\n+    bool signet_blocks{false};\n+    std::vector<uint8_t> signet_challenge;\n };\n } // namespace Consensus\n "
      },
      {
        "sha": "a29f89b58e7b9c773dcd20aa78c2f6a3d9baa2f1",
        "filename": "src/signet.cpp",
        "status": "added",
        "additions": 149,
        "deletions": 0,
        "changes": 149,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/404682b7cdb54494e7c98f0ba0cac8b51f379750/src/signet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/404682b7cdb54494e7c98f0ba0cac8b51f379750/src/signet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/signet.cpp?ref=404682b7cdb54494e7c98f0ba0cac8b51f379750",
        "patch": "@@ -0,0 +1,149 @@\n+// Copyright (c) 2019-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <signet.h>\n+\n+#include <array>\n+#include <cstdint>\n+#include <vector>\n+\n+#include <consensus/merkle.h>\n+#include <consensus/params.h>\n+#include <consensus/validation.h>\n+#include <core_io.h>\n+#include <hash.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <span.h>\n+#include <script/interpreter.h>\n+#include <script/standard.h>\n+#include <streams.h>\n+#include <util/strencodings.h>\n+#include <util/system.h>\n+#include <uint256.h>\n+\n+static constexpr uint8_t SIGNET_HEADER[4] = {0xec, 0xc7, 0xda, 0xa2};\n+\n+static constexpr unsigned int BLOCK_SCRIPT_VERIFY_FLAGS = SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_DERSIG | SCRIPT_VERIFY_NULLDUMMY;\n+\n+static bool FetchAndClearCommitmentSection(const Span<const uint8_t> header, CScript& witness_commitment, std::vector<uint8_t>& result)\n+{\n+    CScript replacement;\n+    bool found_header = false;\n+    result.clear();\n+\n+    opcodetype opcode;\n+    CScript::const_iterator pc = witness_commitment.begin();\n+    std::vector<uint8_t> pushdata;\n+    while (witness_commitment.GetOp(pc, opcode, pushdata)) {\n+        if (pushdata.size() > 0) {\n+            if (!found_header && pushdata.size() > (size_t) header.size() && Span<const uint8_t>(pushdata.data(), header.size()) == header) {\n+                // pushdata only counts if it has the header _and_ some data\n+                result.insert(result.end(), pushdata.begin() + header.size(), pushdata.end());\n+                pushdata.erase(pushdata.begin() + header.size(), pushdata.end());\n+                found_header = true;\n+            }\n+            replacement << pushdata;\n+        } else {\n+            replacement << opcode;\n+        }\n+    }\n+\n+    if (found_header) witness_commitment = replacement;\n+    return found_header;\n+}\n+\n+static uint256 ComputeModifiedMerkleRoot(const CMutableTransaction& cb, const CBlock& block)\n+{\n+    std::vector<uint256> leaves;\n+    leaves.resize(block.vtx.size());\n+    leaves[0] = cb.GetHash();\n+    for (size_t s = 1; s < block.vtx.size(); ++s) {\n+        leaves[s] = block.vtx[s]->GetHash();\n+    }\n+    return ComputeMerkleRoot(std::move(leaves));\n+}\n+\n+SignetTxs SignetTxs::Create(const CBlock& block, const CScript& challenge)\n+{\n+    CMutableTransaction tx_to_spend;\n+    tx_to_spend.nVersion = 0;\n+    tx_to_spend.nLockTime = 0;\n+    tx_to_spend.vin.emplace_back(COutPoint(), CScript(OP_0), 0);\n+    tx_to_spend.vout.emplace_back(0, challenge);\n+\n+    CMutableTransaction tx_spending;\n+    tx_spending.nVersion = 0;\n+    tx_spending.nLockTime = 0;\n+    tx_spending.vin.emplace_back(COutPoint(), CScript(), 0);\n+    tx_spending.vout.emplace_back(0, CScript(OP_RETURN));\n+\n+    // can't fill any other fields before extracting signet\n+    // responses from block coinbase tx\n+\n+    // find and delete signet signature\n+    if (block.vtx.empty()) return invalid(); // no coinbase tx in block; invalid\n+    CMutableTransaction modified_cb(*block.vtx.at(0));\n+\n+    const int cidx = GetWitnessCommitmentIndex(block);\n+    if (cidx == NO_WITNESS_COMMITMENT) {\n+        return invalid(); // require a witness commitment\n+    }\n+\n+    CScript& witness_commitment = modified_cb.vout.at(cidx).scriptPubKey;\n+\n+    std::vector<uint8_t> signet_solution;\n+    if (!FetchAndClearCommitmentSection(SIGNET_HEADER, witness_commitment, signet_solution)) {\n+        // no signet solution -- allow this to support OP_TRUE as trivial block challenge\n+    } else {\n+        try {\n+            VectorReader v(SER_NETWORK, INIT_PROTO_VERSION, signet_solution, 0);\n+            v >> tx_spending.vin[0].scriptSig;\n+            v >> tx_spending.vin[0].scriptWitness.stack;\n+            if (!v.empty()) return invalid(); // extraneous data encountered\n+        } catch (const std::exception&) {\n+            return invalid(); // parsing error\n+        }\n+    }\n+    uint256 signet_merkle = ComputeModifiedMerkleRoot(modified_cb, block);\n+\n+    std::vector<uint8_t> block_data;\n+    CVectorWriter writer(SER_NETWORK, INIT_PROTO_VERSION, block_data, 0);\n+    writer << block.nVersion;\n+    writer << block.hashPrevBlock;\n+    writer << signet_merkle;\n+    writer << block.nTime;\n+    tx_to_spend.vin[0].scriptSig << block_data;\n+    tx_spending.vin[0].prevout = COutPoint(tx_to_spend.GetHash(), 0);\n+\n+    return {tx_to_spend, tx_spending};\n+}\n+\n+// Signet block solution checker\n+bool CheckSignetBlockSolution(const CBlock& block, const Consensus::Params& consensusParams)\n+{\n+    if (block.GetHash() == consensusParams.hashGenesisBlock) {\n+        // genesis block solution is always valid\n+        return true;\n+    }\n+\n+    const CScript challenge(consensusParams.signet_challenge.begin(), consensusParams.signet_challenge.end());\n+    const SignetTxs signet_txs(block, challenge);\n+\n+    if (!signet_txs.m_valid) {\n+        LogPrint(BCLog::VALIDATION, \"CheckSignetBlockSolution: Errors in block (block solution parse failure)\\n\");\n+        return false;\n+    }\n+\n+    const CScript& scriptSig = signet_txs.m_to_sign.vin[0].scriptSig;\n+    const CScriptWitness& witness = signet_txs.m_to_sign.vin[0].scriptWitness;\n+\n+    TransactionSignatureChecker sigcheck(&signet_txs.m_to_sign, /*nIn=*/ 0, /*amount=*/ signet_txs.m_to_spend.vout[0].nValue);\n+\n+    if (!VerifyScript(scriptSig, signet_txs.m_to_spend.vout[0].scriptPubKey, &witness, BLOCK_SCRIPT_VERIFY_FLAGS, sigcheck)) {\n+        LogPrint(BCLog::VALIDATION, \"CheckSignetBlockSolution: Errors in block (block solution invalid)\\n\");\n+        return false;\n+    }\n+    return true;\n+}"
      },
      {
        "sha": "5694716fb610e83a5c20a4ecfe0a2dec77173347",
        "filename": "src/signet.h",
        "status": "added",
        "additions": 42,
        "deletions": 0,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/404682b7cdb54494e7c98f0ba0cac8b51f379750/src/signet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/404682b7cdb54494e7c98f0ba0cac8b51f379750/src/signet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/signet.h?ref=404682b7cdb54494e7c98f0ba0cac8b51f379750",
        "patch": "@@ -0,0 +1,42 @@\n+// Copyright (c) 2019-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SIGNET_H\n+#define BITCOIN_SIGNET_H\n+\n+#include <consensus/params.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+\n+/**\n+ * Extract signature and check whether a block has a valid solution\n+ */\n+bool CheckSignetBlockSolution(const CBlock& block, const Consensus::Params& consensusParams);\n+\n+/**\n+ * Generate the signet tx corresponding to the given block\n+ *\n+ * The signet tx commits to everything in the block except:\n+ * 1. It hashes a modified merkle root with the signet signature removed.\n+ * 2. It skips the nonce.\n+ */\n+class SignetTxs {\n+private:\n+    struct invalid {};\n+    SignetTxs(invalid i) : m_to_spend(), m_to_sign(), m_valid(false) { }\n+\n+    template<class T1, class T2>\n+    SignetTxs(const T1& to_spend, const T2& to_sign) : m_to_spend{to_spend}, m_to_sign{to_sign}, m_valid(true) { }\n+\n+    static SignetTxs Create(const CBlock& block, const CScript& challenge);\n+\n+public:\n+    SignetTxs(const CBlock& block, const CScript& challenge) : SignetTxs(Create(block, challenge)) { }\n+\n+    const CTransaction m_to_spend;\n+    const CTransaction m_to_sign;\n+    const bool m_valid;\n+};\n+\n+#endif // BITCOIN_SIGNET_H"
      }
    ]
  },
  {
    "sha": "e8990f121405af8cd539b904ef082439261e6c93",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplODk5MGYxMjE0MDVhZjhjZDUzOWI5MDRlZjA4MjQzOTI2MWU2Yzkz",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-03-05T06:58:30Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-09-18T00:37:57Z"
      },
      "message": "add signet chain and accompanying parameters\n\nCo-authored-by: Anthony Towns <aj@erisian.com.au>",
      "tree": {
        "sha": "894930d7f74f876800c1073af5930d1c0e68b71c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/894930d7f74f876800c1073af5930d1c0e68b71c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e8990f121405af8cd539b904ef082439261e6c93",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAl9kAWUACgkQV692LbM1\nMyKdrw/9EmvunHn4ihSrLCECeSc0u38fvKmZ6DVECCiEcw06vkllmBw+asZig40K\nslXWAcVMZfwRxZCwGC37JBoSehM9bAwr9FFd1+auN52Q5yQJuenSLfwSoSxgE3zH\n0a7ExyqU5r4Bc1y1PnY+hoSiPu6NE1qE+wYx1mtguiNPQP5Y9KmVGhkErf1Yk1E/\nfiIpveKtrXHGaDhBh8NYaBJ5kAp3EQBY2WwEeTthcTkJE4dN/2vII73uZOKtIpKn\nhnlYCAIOcoYgvzV1v5Vu+CG2XReQn3/7OwrwdWdxlHn7LIL9aTcfOB8VZVwDzlWQ\nkY7wZ3lBh24pXFqPppnP3xCvJrGyL3Xiq2S399riLlP0WSTuJ+GywyQdv5Sb1Ldh\nkE9ruG8AynI75130vibR6vBDklcTzy2i6RhFywnV9+Nzb0rui4kAeHID32QfxbbZ\nnU7UMCKVB0p0eE80K+B6k6ByU0ngEm0peiHrULdI8aSwXEsnWd7gFXErS5xJuqsp\nizLFJGRv6bpmSy3ZO5yCnHw0UTQwQbhYOxzLn6ZFVFBtR+JRsmO1uuT0/19mjsHO\n1afH9l3G/60kWbbpTLGDV8+PcTUgM2TR9q7fY6NS/lTZkItgwl36Mj9dzCjygKl1\nByzq+x/vZH5s5vMu5ugS+jsVwhnZJQR0RXJmkdkrgAJTdKHxPHc=\n=4xhj\n-----END PGP SIGNATURE-----",
        "payload": "tree 894930d7f74f876800c1073af5930d1c0e68b71c\nparent 404682b7cdb54494e7c98f0ba0cac8b51f379750\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1583391510 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1600389477 +0900\n\nadd signet chain and accompanying parameters\n\nCo-authored-by: Anthony Towns <aj@erisian.com.au>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8990f121405af8cd539b904ef082439261e6c93",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e8990f121405af8cd539b904ef082439261e6c93",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8990f121405af8cd539b904ef082439261e6c93/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "404682b7cdb54494e7c98f0ba0cac8b51f379750",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/404682b7cdb54494e7c98f0ba0cac8b51f379750",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/404682b7cdb54494e7c98f0ba0cac8b51f379750"
      }
    ],
    "stats": {
      "total": 128,
      "additions": 117,
      "deletions": 11
    },
    "files": [
      {
        "sha": "0f947df63ca18fad7c609e0db9e1f9e513db3e8b",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 96,
        "deletions": 3,
        "changes": 99,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8990f121405af8cd539b904ef082439261e6c93/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8990f121405af8cd539b904ef082439261e6c93/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=e8990f121405af8cd539b904ef082439261e6c93",
        "patch": "@@ -7,6 +7,7 @@\n \n #include <chainparamsseeds.h>\n #include <consensus/merkle.h>\n+#include <hash.h> // for signet block challenge hash\n #include <tinyformat.h>\n #include <util/system.h>\n #include <util/strencodings.h>\n@@ -63,6 +64,8 @@ class CMainParams : public CChainParams {\n public:\n     CMainParams() {\n         strNetworkID = CBaseChainParams::MAIN;\n+        consensus.signet_blocks = false;\n+        consensus.signet_challenge.clear();\n         consensus.nSubsidyHalvingInterval = 210000;\n         consensus.BIP16Exception = uint256S(\"0x00000000000002dc756eebf4f49723ed8d30cc28a5f108eb94b1ba88ac4f9c22\");\n         consensus.BIP34Height = 227931;\n@@ -172,6 +175,8 @@ class CTestNetParams : public CChainParams {\n public:\n     CTestNetParams() {\n         strNetworkID = CBaseChainParams::TESTNET;\n+        consensus.signet_blocks = false;\n+        consensus.signet_challenge.clear();\n         consensus.nSubsidyHalvingInterval = 210000;\n         consensus.BIP16Exception = uint256S(\"0x00000000dd30457c001f4095d208cc1296b0eed002427aa599874af7a432b105\");\n         consensus.BIP34Height = 21111;\n@@ -250,13 +255,98 @@ class CTestNetParams : public CChainParams {\n     }\n };\n \n+/**\n+ * Signet\n+ */\n+class SigNetParams : public CChainParams {\n+public:\n+    explicit SigNetParams(const ArgsManager& args) {\n+        std::vector<uint8_t> bin;\n+        vSeeds.clear();\n+\n+        if (!args.IsArgSet(\"-signetchallenge\")) {\n+            throw std::runtime_error(strprintf(\"%s: -signetchallenge is mandatory for signet networks\", __func__));\n+        }\n+        const auto signet_challenge = args.GetArgs(\"-signetchallenge\");\n+        if (signet_challenge.size() != 1) {\n+            throw std::runtime_error(strprintf(\"%s: -signetchallenge cannot be multiple values.\", __func__));\n+        }\n+        bin = ParseHex(signet_challenge[0]);\n+        if (args.IsArgSet(\"-signetseednode\")) {\n+            vSeeds = args.GetArgs(\"-signetseednode\");\n+        }\n+\n+        LogPrintf(\"Signet with challenge %s\\n\", signet_challenge[0]);\n+\n+        strNetworkID = CBaseChainParams::SIGNET;\n+        consensus.signet_blocks = true;\n+        consensus.signet_challenge.assign(bin.begin(), bin.end());\n+        consensus.nSubsidyHalvingInterval = 210000;\n+        consensus.BIP34Height = 1;\n+        consensus.BIP65Height = 1;\n+        consensus.BIP66Height = 1;\n+        consensus.CSVHeight = 1;\n+        consensus.SegwitHeight = 1;\n+        consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n+        consensus.nPowTargetSpacing = 10 * 60;\n+        consensus.fPowAllowMinDifficultyBlocks = false;\n+        consensus.fPowNoRetargeting = false;\n+        consensus.nRuleChangeActivationThreshold = 1916;\n+        consensus.nMinerConfirmationWindow = 2016;\n+        consensus.powLimit = uint256S(\"00000377ae000000000000000000000000000000000000000000000000000000\");\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 1199145601; // January 1, 2008\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 1230767999; // December 31, 2008\n+\n+        // message start is defined as the first 4 bytes of the sha256d of the block script\n+        CHashWriter h(SER_DISK, 0);\n+        h << consensus.signet_challenge;\n+        uint256 hash = h.GetHash();\n+        memcpy(pchMessageStart, hash.begin(), 4);\n+        LogPrintf(\"Signet derived magic (message start): %s\\n\", HexStr({pchMessageStart, pchMessageStart + 4}));\n+\n+        nDefaultPort = 38333;\n+        nPruneAfterHeight = 1000;\n+        m_assumed_blockchain_size = 0;\n+        m_assumed_chain_state_size = 0;\n+\n+        genesis = CreateGenesisBlock(1598918400, 52613770, 0x1e0377ae, 1, 50 * COIN);\n+        consensus.hashGenesisBlock = genesis.GetHash();\n+        assert(consensus.hashGenesisBlock == uint256S(\"0x00000008819873e925422c1ff0f99f7cc9bbb232af63a077a480a3633bee1ef6\"));\n+        assert(genesis.hashMerkleRoot == uint256S(\"0x4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b\"));\n+\n+        vFixedSeeds.clear();\n+\n+        base58Prefixes[PUBKEY_ADDRESS] = std::vector<unsigned char>(1,111);\n+        base58Prefixes[SCRIPT_ADDRESS] = std::vector<unsigned char>(1,196);\n+        base58Prefixes[SECRET_KEY] =     std::vector<unsigned char>(1,239);\n+        base58Prefixes[EXT_PUBLIC_KEY] = {0x04, 0x35, 0x87, 0xCF};\n+        base58Prefixes[EXT_SECRET_KEY] = {0x04, 0x35, 0x83, 0x94};\n+\n+        bech32_hrp = \"tb\";\n+\n+        fDefaultConsistencyChecks = false;\n+        fRequireStandard = true;\n+        m_is_test_chain = true;\n+        m_is_mockable_chain = false;\n+\n+        chainTxData = ChainTxData{\n+            0,\n+            0,\n+            0\n+        };\n+    }\n+};\n+\n /**\n  * Regression test\n  */\n class CRegTestParams : public CChainParams {\n public:\n     explicit CRegTestParams(const ArgsManager& args) {\n         strNetworkID =  CBaseChainParams::REGTEST;\n+        consensus.signet_blocks = false;\n+        consensus.signet_challenge.clear();\n         consensus.nSubsidyHalvingInterval = 150;\n         consensus.BIP16Exception = uint256();\n         consensus.BIP34Height = 500; // BIP34 activated on regtest (Used in functional tests)\n@@ -391,12 +481,15 @@ const CChainParams &Params() {\n \n std::unique_ptr<const CChainParams> CreateChainParams(const std::string& chain)\n {\n-    if (chain == CBaseChainParams::MAIN)\n+    if (chain == CBaseChainParams::MAIN) {\n         return std::unique_ptr<CChainParams>(new CMainParams());\n-    else if (chain == CBaseChainParams::TESTNET)\n+    } else if (chain == CBaseChainParams::TESTNET) {\n         return std::unique_ptr<CChainParams>(new CTestNetParams());\n-    else if (chain == CBaseChainParams::REGTEST)\n+    } else if (chain == CBaseChainParams::SIGNET) {\n+        return std::unique_ptr<CChainParams>(new SigNetParams(gArgs));\n+    } else if (chain == CBaseChainParams::REGTEST) {\n         return std::unique_ptr<CChainParams>(new CRegTestParams(gArgs));\n+    }\n     throw std::runtime_error(strprintf(\"%s: Unknown chain %s.\", __func__, chain));\n }\n "
      },
      {
        "sha": "1027e390ef0e8bd68834cde39bc121eca8b6bc29",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 5,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8990f121405af8cd539b904ef082439261e6c93/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8990f121405af8cd539b904ef082439261e6c93/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=e8990f121405af8cd539b904ef082439261e6c93",
        "patch": "@@ -13,6 +13,7 @@\n \n const std::string CBaseChainParams::MAIN = \"main\";\n const std::string CBaseChainParams::TESTNET = \"test\";\n+const std::string CBaseChainParams::SIGNET = \"signet\";\n const std::string CBaseChainParams::REGTEST = \"regtest\";\n \n void SetupChainParamsBaseOptions(ArgsManager& argsman)\n@@ -23,6 +24,9 @@ void SetupChainParamsBaseOptions(ArgsManager& argsman)\n     argsman.AddArg(\"-segwitheight=<n>\", \"Set the activation height of segwit. -1 to disable. (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-testnet\", \"Use the test chain. Equivalent to -chain=test.\", ArgsManager::ALLOW_ANY, OptionsCategory::CHAINPARAMS);\n     argsman.AddArg(\"-vbparams=deployment:start:end\", \"Use given start/end times for specified version bits deployment (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n+    argsman.AddArg(\"-signet\", \"Use the signet chain. Note that the network is defined by the -signetchallenge parameter\", ArgsManager::ALLOW_ANY, OptionsCategory::CHAINPARAMS);\n+    argsman.AddArg(\"-signetchallenge\", \"Blocks must satisfy the given script to be considered valid (only for signet networks)\", ArgsManager::ALLOW_STRING, OptionsCategory::CHAINPARAMS);\n+    argsman.AddArg(\"-signetseednode\", \"Specify a seed node for the signet network, in the hostname[:port] format, e.g. sig.net:1234 (may be used multiple times to specify multiple seed nodes)\", ArgsManager::ALLOW_STRING, OptionsCategory::CHAINPARAMS);\n }\n \n static std::unique_ptr<CBaseChainParams> globalChainBaseParams;\n@@ -35,14 +39,16 @@ const CBaseChainParams& BaseParams()\n \n std::unique_ptr<CBaseChainParams> CreateBaseChainParams(const std::string& chain)\n {\n-    if (chain == CBaseChainParams::MAIN)\n+    if (chain == CBaseChainParams::MAIN) {\n         return MakeUnique<CBaseChainParams>(\"\", 8332);\n-    else if (chain == CBaseChainParams::TESTNET)\n+    } else if (chain == CBaseChainParams::TESTNET) {\n         return MakeUnique<CBaseChainParams>(\"testnet3\", 18332);\n-    else if (chain == CBaseChainParams::REGTEST)\n+    } else if (chain == CBaseChainParams::SIGNET) {\n+        return MakeUnique<CBaseChainParams>(\"signet\", 38332);\n+    } else if (chain == CBaseChainParams::REGTEST) {\n         return MakeUnique<CBaseChainParams>(\"regtest\", 18443);\n-    else\n-        throw std::runtime_error(strprintf(\"%s: Unknown chain %s.\", __func__, chain));\n+    }\n+    throw std::runtime_error(strprintf(\"%s: Unknown chain %s.\", __func__, chain));\n }\n \n void SelectBaseParams(const std::string& chain)"
      },
      {
        "sha": "9852446b3c34338a1acb50925f91f5aa494d0f16",
        "filename": "src/chainparamsbase.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8990f121405af8cd539b904ef082439261e6c93/src/chainparamsbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8990f121405af8cd539b904ef082439261e6c93/src/chainparamsbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.h?ref=e8990f121405af8cd539b904ef082439261e6c93",
        "patch": "@@ -21,6 +21,7 @@ class CBaseChainParams\n     /** Chain name strings */\n     static const std::string MAIN;\n     static const std::string TESTNET;\n+    static const std::string SIGNET;\n     static const std::string REGTEST;\n     ///@}\n "
      },
      {
        "sha": "c59f6c8e075aaf089ba4930b15c37c2d6c543021",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8990f121405af8cd539b904ef082439261e6c93/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8990f121405af8cd539b904ef082439261e6c93/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=e8990f121405af8cd539b904ef082439261e6c93",
        "patch": "@@ -1106,7 +1106,7 @@ BOOST_FIXTURE_TEST_CASE(util_ChainMerge, ChainMergeTestingSetup)\n     // Results file is formatted like:\n     //\n     //   <input> || <output>\n-    BOOST_CHECK_EQUAL(out_sha_hex, \"f0b3a3c29869edc765d579c928f7f1690a71fbb673b49ccf39cbc4de18156a0d\");\n+    BOOST_CHECK_EQUAL(out_sha_hex, \"f263493e300023b6509963887444c41386f44b63bc30047eb8402e8c1144854c\");\n }\n \n BOOST_AUTO_TEST_CASE(util_ReadWriteSettings)"
      },
      {
        "sha": "6c7903044a095e633d6fd766fbcda7631fb73eb1",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8990f121405af8cd539b904ef082439261e6c93/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8990f121405af8cd539b904ef082439261e6c93/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=e8990f121405af8cd539b904ef082439261e6c93",
        "patch": "@@ -263,6 +263,7 @@ const std::list<SectionInfo> ArgsManager::GetUnrecognizedSections() const\n     // Section names to be recognized in the config file.\n     static const std::set<std::string> available_sections{\n         CBaseChainParams::REGTEST,\n+        CBaseChainParams::SIGNET,\n         CBaseChainParams::TESTNET,\n         CBaseChainParams::MAIN\n     };\n@@ -916,16 +917,21 @@ std::string ArgsManager::GetChainName() const\n     };\n \n     const bool fRegTest = get_net(\"-regtest\");\n+    const bool fSigNet  = get_net(\"-signet\");\n     const bool fTestNet = get_net(\"-testnet\");\n     const bool is_chain_arg_set = IsArgSet(\"-chain\");\n \n-    if ((int)is_chain_arg_set + (int)fRegTest + (int)fTestNet > 1) {\n-        throw std::runtime_error(\"Invalid combination of -regtest, -testnet and -chain. Can use at most one.\");\n+    if ((int)is_chain_arg_set + (int)fRegTest + (int)fSigNet + (int)fTestNet > 1) {\n+        throw std::runtime_error(\"Invalid combination of -regtest, -signet, -testnet and -chain. Can use at most one.\");\n     }\n     if (fRegTest)\n         return CBaseChainParams::REGTEST;\n+    if (fSigNet) {\n+        return CBaseChainParams::SIGNET;\n+    }\n     if (fTestNet)\n         return CBaseChainParams::TESTNET;\n+\n     return GetArg(\"-chain\", CBaseChainParams::MAIN);\n }\n "
      }
    ]
  },
  {
    "sha": "a8de47a1c9033fac3355590f1fe2158a95011bb3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOGRlNDdhMWM5MDMzZmFjMzM1NTU5MGYxZmUyMTU4YTk1MDExYmIz",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2019-07-17T09:40:34Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-09-18T00:37:57Z"
      },
      "message": "consensus: add signet validation",
      "tree": {
        "sha": "f75c49126205ad5223bcef9998fa41d4457b372c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f75c49126205ad5223bcef9998fa41d4457b372c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a8de47a1c9033fac3355590f1fe2158a95011bb3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAl9kAWUACgkQV692LbM1\nMyLEvxAAlZyUSz1Jyg4Gcihedwu3lAYuwR7Tk5yuhRVnolYnFijkWzaac8AxF4A8\nWF05TsUN+zTIwzpDZRwR7SbzhSEqXuc3+Nn+KRuEnElLvFrZrVJlM0qwHKuhxdfZ\nFThG1uAK0QDlLnh5M10e7Jaa+gktvncH3Wgs+VakwAfMpleqd31LQJv4q/NDRxXL\nyxQAA7HJunXo1B1SFfw1E5zY8vjNTOO08zFMxsbqqgCPpZniJi6U4lTCISCi/xTj\nUkAnJ2f7Q3T8fKq+Ml1z5+pbh1ToE01wl5mGf1KCvirg4h1uOvn/pBGu7S+2XyWE\nQQ4NF22POOacCqTj4bS7clxCCPEF+8jj1/OFLQcwuSts1SG8NYyjVUq8VNHuoeGT\nQJXKUm7E6rFwFAkWS6QcUcwmjyZ5HL2A2glIDQpQoyZd8kTEWKOib5H1vVGFC5Qs\nVXj/lvet/rBcKyYU9Hx6SM+KkymSuDgE3mb8OW0r1EcJL2N9oZLbrTUMyAzHqjtK\nobTNoKVVGQS+wL3N6p5Ng8PfwfaybzACf/VYtmcb4pYZHCG1t4Q/2awonaXcgMGq\nvTvLQAHg1FCrJZR/U3TeuIhNdDbvJIDQct4L926z26AerDOyChevqZ7P05+JoYWZ\n8LQ2ZHOmieenwxF9IZ8CTQyFOx3uf7YU7XOGrKFp/i07C1gf0tk=\n=dH1I\n-----END PGP SIGNATURE-----",
        "payload": "tree f75c49126205ad5223bcef9998fa41d4457b372c\nparent e8990f121405af8cd539b904ef082439261e6c93\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1563356434 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1600389477 +0900\n\nconsensus: add signet validation\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8de47a1c9033fac3355590f1fe2158a95011bb3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a8de47a1c9033fac3355590f1fe2158a95011bb3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8de47a1c9033fac3355590f1fe2158a95011bb3/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e8990f121405af8cd539b904ef082439261e6c93",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8990f121405af8cd539b904ef082439261e6c93",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e8990f121405af8cd539b904ef082439261e6c93"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 11,
      "deletions": 0
    },
    "files": [
      {
        "sha": "adf9198b52c9c3b487d8ab33c274dc87e8cb142d",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a8de47a1c9033fac3355590f1fe2158a95011bb3/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a8de47a1c9033fac3355590f1fe2158a95011bb3/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=a8de47a1c9033fac3355590f1fe2158a95011bb3",
        "patch": "@@ -33,6 +33,7 @@\n #include <script/script.h>\n #include <script/sigcache.h>\n #include <shutdown.h>\n+#include <signet.h>\n #include <timedata.h>\n #include <tinyformat.h>\n #include <txdb.h>\n@@ -1163,6 +1164,11 @@ bool ReadBlockFromDisk(CBlock& block, const FlatFilePos& pos, const Consensus::P\n     if (!CheckProofOfWork(block.GetHash(), block.nBits, consensusParams))\n         return error(\"ReadBlockFromDisk: Errors in block header at %s\", pos.ToString());\n \n+    // Signet only: check block solution\n+    if (consensusParams.signet_blocks && !CheckSignetBlockSolution(block, consensusParams)) {\n+        return error(\"ReadBlockFromDisk: Errors in block solution at %s\", pos.ToString());\n+    }\n+\n     return true;\n }\n \n@@ -3332,6 +3338,11 @@ bool CheckBlock(const CBlock& block, BlockValidationState& state, const Consensu\n     if (!CheckBlockHeader(block, state, consensusParams, fCheckPOW))\n         return false;\n \n+    // Signet only: check block solution\n+    if (consensusParams.signet_blocks && fCheckPOW && !CheckSignetBlockSolution(block, consensusParams)) {\n+        return state.Invalid(BlockValidationResult::BLOCK_CONSENSUS, \"bad-signet-blksig\", \"signet block signature validation failure\");\n+    }\n+\n     // Check the merkle root.\n     if (fCheckMerkleRoot) {\n         bool mutated;"
      }
    ]
  },
  {
    "sha": "c7898bca4e1ccbc6edafd3b72eaf80df38e3af32",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNzg5OGJjYTRlMWNjYmM2ZWRhZmQzYjcyZWFmODBkZjM4ZTNhZjMy",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2019-07-17T08:55:13Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-09-18T00:37:57Z"
      },
      "message": "qt: update QT to support signet network",
      "tree": {
        "sha": "40d3d4b697d72febb69cc975a53d2811a4d9885e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/40d3d4b697d72febb69cc975a53d2811a4d9885e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c7898bca4e1ccbc6edafd3b72eaf80df38e3af32",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAl9kAWUACgkQV692LbM1\nMyKF7Q//VwKHfM9sCHu3P4UCRHWY0EdTrrUT7cwg520eQlFZA558SWO0YR8PagKn\nW748zBgPirHOHXjPB4lVBNl3zyfDuGrVkd4bb8vjbe2HqhZsZ6DhNF/8QkWYViQy\nF+ybYp/jitofrUqSGbbeRVfGuaNJWeJ2KEg8s4gp3BSovYZYXenEg+aNWBb3ap2K\nbOK3tsSNtycnlRRAp/igMuu7rSbu7EVlPKX7fRXczUvQlX9OPrNrJvM9uafJwNLU\n1UnOC7ksxsL2IVNtB7WRJeYSGucW10he2h1HvrQZgp7waJZKUzVJ9lmemU4SwX1V\nJ2KO8qkdxUG1UzF0xnmKEerJ+XS5uMenQFX6TCF8hDhCkFqis68ALaMCvlrYXttf\npvusv08yRfD/gxVfVGwG/RHRerGiOLqhwbYS/hH07MuglkofW/L07MY+Fqcc4NdT\nTvdv4LmiohRgeA72CxIyIw+djUiyQ20NQtAyQN0qpr2et2O6kHFOO1GY3+DxoRog\nVjD9Nv7HvnRhaGSxvKDUC4z+AN+Afqh8tfzTEvvhLAOASFxrJ0PCat1TUECWy2Ck\no3n+l4o0mwtLo43M0zP0vDSPRpeenf4EeNAMDPXFAt8q1Wr0jUld5bx0gCFtH5kN\nmV2oS/UenksxP1jvoT2z7vMjpMt8zkkCY0vCkaVQrGSZjTtYMPE=\n=llhD\n-----END PGP SIGNATURE-----",
        "payload": "tree 40d3d4b697d72febb69cc975a53d2811a4d9885e\nparent a8de47a1c9033fac3355590f1fe2158a95011bb3\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1563353713 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1600389477 +0900\n\nqt: update QT to support signet network\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7898bca4e1ccbc6edafd3b72eaf80df38e3af32",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c7898bca4e1ccbc6edafd3b72eaf80df38e3af32",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7898bca4e1ccbc6edafd3b72eaf80df38e3af32/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a8de47a1c9033fac3355590f1fe2158a95011bb3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8de47a1c9033fac3355590f1fe2158a95011bb3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a8de47a1c9033fac3355590f1fe2158a95011bb3"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 3,
      "deletions": 1
    },
    "files": [
      {
        "sha": "882d2c8f52d9802013b8633a7a88d5d0fdfcf6b4",
        "filename": "src/qt/guiconstants.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7898bca4e1ccbc6edafd3b72eaf80df38e3af32/src/qt/guiconstants.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7898bca4e1ccbc6edafd3b72eaf80df38e3af32/src/qt/guiconstants.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiconstants.h?ref=c7898bca4e1ccbc6edafd3b72eaf80df38e3af32",
        "patch": "@@ -46,6 +46,7 @@ static const int TOOLTIP_WRAP_THRESHOLD = 80;\n #define QAPP_ORG_DOMAIN \"bitcoin.org\"\n #define QAPP_APP_NAME_DEFAULT \"Bitcoin-Qt\"\n #define QAPP_APP_NAME_TESTNET \"Bitcoin-Qt-testnet\"\n+#define QAPP_APP_NAME_SIGNET \"Bitcoin-Qt-signet\"\n #define QAPP_APP_NAME_REGTEST \"Bitcoin-Qt-regtest\"\n \n /* One gigabyte (GB) in bytes */"
      },
      {
        "sha": "b1081f6aee8c8c7100635b852e2cdbbe5bb25db8",
        "filename": "src/qt/networkstyle.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7898bca4e1ccbc6edafd3b72eaf80df38e3af32/src/qt/networkstyle.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7898bca4e1ccbc6edafd3b72eaf80df38e3af32/src/qt/networkstyle.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/networkstyle.cpp?ref=c7898bca4e1ccbc6edafd3b72eaf80df38e3af32",
        "patch": "@@ -19,7 +19,8 @@ static const struct {\n } network_styles[] = {\n     {\"main\", QAPP_APP_NAME_DEFAULT, 0, 0},\n     {\"test\", QAPP_APP_NAME_TESTNET, 70, 30},\n-    {\"regtest\", QAPP_APP_NAME_REGTEST, 160, 30}\n+    {\"signet\", QAPP_APP_NAME_SIGNET, 35, 15},\n+    {\"regtest\", QAPP_APP_NAME_REGTEST, 160, 30},\n };\n static const unsigned network_styles_count = sizeof(network_styles)/sizeof(*network_styles);\n "
      }
    ]
  },
  {
    "sha": "3efe298dccb248f25d6b01ab6a80b1cd6c9e1a1e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZWZlMjk4ZGNjYjI0OGYyNWQ2YjAxYWI2YTgwYjFjZDZjOWUxYTFl",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-03-05T07:51:00Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-09-18T01:19:42Z"
      },
      "message": "signet: hard-coded parameters for Signet Global Network VI (2020-09-07)\n\nCo-authored-by: Anthony Towns <aj@erisian.com.au>",
      "tree": {
        "sha": "f60a9445082f37a4d617482173ed2a92578db49d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f60a9445082f37a4d617482173ed2a92578db49d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3efe298dccb248f25d6b01ab6a80b1cd6c9e1a1e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAl9kCy4ACgkQV692LbM1\nMyIVVA/+N9MRdimEqXmSdVRJuCepdOJ03hw0TWBM+CZnPhR5UAfVBX1S2T4d5aIB\ntpoXqlFNR4wBrLxPu57rtjyBY0y9sx1c2UZo9maOQdqlNYj7gzDr6ICQF5D9O3nd\nt+EBkM4nSsnQwEXdVq2mZzpy1Fg8Jux2VR7M+lyjs881874+/lXHp0pmUrRz7iFJ\no2luHnY6y8q4kJDM4kwpfsQOuiZs5Oazf16plo+iX+EleoYTVNxQfy5vEUvBH51J\nKNqR4zvh5+jxIPPNBnlTAaRi1vNZQIcgHmE96a6+AFpmoCGX7XCEcp/aQqx//QMs\nyIg9P06g49GEkDjvrFw4OJTO+OTOFeXeBCnEm60XbZiRYoPQYX/F419vbIuk4m/v\n7SWslKzEHShIgKDxufiEn8fgRFyOUuQpxvYtW8bLuXXtBO7xiZvtnXqmjKpENfgW\nvbAxhZHv32oCb/tLV/4mLH5PWnxdhNV9R29ww6KNMJSqrWoFipqIK6A5M3sNRiCk\nIqaSbmkLbp5rKg21IxDKwoa8yHVnfueyoUWm1WXwZYQPjviJpZzMCNRDngBrujuN\nRkFz9S0BWgTRdpwyHOeF8g0zi3OXM0alhTYohCCHCKD5xlGw9aFctVD3bDyXUrhF\ncZmMUNCgCZjbDVCMWEuc2nl+7a+dA3CTiMsx7flJWIe41hnqy/I=\n=WKT5\n-----END PGP SIGNATURE-----",
        "payload": "tree f60a9445082f37a4d617482173ed2a92578db49d\nparent c7898bca4e1ccbc6edafd3b72eaf80df38e3af32\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1583394660 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1600391982 +0900\n\nsignet: hard-coded parameters for Signet Global Network VI (2020-09-07)\n\nCo-authored-by: Anthony Towns <aj@erisian.com.au>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3efe298dccb248f25d6b01ab6a80b1cd6c9e1a1e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3efe298dccb248f25d6b01ab6a80b1cd6c9e1a1e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3efe298dccb248f25d6b01ab6a80b1cd6c9e1a1e/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c7898bca4e1ccbc6edafd3b72eaf80df38e3af32",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7898bca4e1ccbc6edafd3b72eaf80df38e3af32",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c7898bca4e1ccbc6edafd3b72eaf80df38e3af32"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 16,
      "deletions": 10
    },
    "files": [
      {
        "sha": "d7f7888ef3e78e6d3b89db0197dcb4eeab7987b4",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 8,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3efe298dccb248f25d6b01ab6a80b1cd6c9e1a1e/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3efe298dccb248f25d6b01ab6a80b1cd6c9e1a1e/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=3efe298dccb248f25d6b01ab6a80b1cd6c9e1a1e",
        "patch": "@@ -265,19 +265,25 @@ class SigNetParams : public CChainParams {\n         vSeeds.clear();\n \n         if (!args.IsArgSet(\"-signetchallenge\")) {\n-            throw std::runtime_error(strprintf(\"%s: -signetchallenge is mandatory for signet networks\", __func__));\n-        }\n-        const auto signet_challenge = args.GetArgs(\"-signetchallenge\");\n-        if (signet_challenge.size() != 1) {\n-            throw std::runtime_error(strprintf(\"%s: -signetchallenge cannot be multiple values.\", __func__));\n+            LogPrintf(\"Using default signet network\\n\");\n+            bin = ParseHex(\"512103ad5e0edad18cb1f0fc0d28a3d4f1f3e445640337489abb10404f2d1e086be430210359ef5021964fe22d6f8e05b2463c9540ce96883fe3b278760f048f5189f2e6c452ae\");\n+            vSeeds.emplace_back(\"178.128.221.177\");\n+            vSeeds.emplace_back(\"2a01:7c8:d005:390::5\");\n+            vSeeds.emplace_back(\"ntv3mtqw5wt63red.onion:38333\");\n+        } else {\n+            const auto signet_challenge = args.GetArgs(\"-signetchallenge\");\n+            if (signet_challenge.size() != 1) {\n+                throw std::runtime_error(strprintf(\"%s: -signetchallenge cannot be multiple values.\", __func__));\n+            }\n+            bin = ParseHex(signet_challenge[0]);\n+\n+            LogPrintf(\"Signet with challenge %s\\n\", signet_challenge[0]);\n         }\n-        bin = ParseHex(signet_challenge[0]);\n+\n         if (args.IsArgSet(\"-signetseednode\")) {\n             vSeeds = args.GetArgs(\"-signetseednode\");\n         }\n \n-        LogPrintf(\"Signet with challenge %s\\n\", signet_challenge[0]);\n-\n         strNetworkID = CBaseChainParams::SIGNET;\n         consensus.signet_blocks = true;\n         consensus.signet_challenge.assign(bin.begin(), bin.end());"
      },
      {
        "sha": "034e897ca6c00b7872743b15ef5e40b37cfc9556",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3efe298dccb248f25d6b01ab6a80b1cd6c9e1a1e/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3efe298dccb248f25d6b01ab6a80b1cd6c9e1a1e/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=3efe298dccb248f25d6b01ab6a80b1cd6c9e1a1e",
        "patch": "@@ -25,8 +25,8 @@ void SetupChainParamsBaseOptions(ArgsManager& argsman)\n     argsman.AddArg(\"-testnet\", \"Use the test chain. Equivalent to -chain=test.\", ArgsManager::ALLOW_ANY, OptionsCategory::CHAINPARAMS);\n     argsman.AddArg(\"-vbparams=deployment:start:end\", \"Use given start/end times for specified version bits deployment (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n     argsman.AddArg(\"-signet\", \"Use the signet chain. Note that the network is defined by the -signetchallenge parameter\", ArgsManager::ALLOW_ANY, OptionsCategory::CHAINPARAMS);\n-    argsman.AddArg(\"-signetchallenge\", \"Blocks must satisfy the given script to be considered valid (only for signet networks)\", ArgsManager::ALLOW_STRING, OptionsCategory::CHAINPARAMS);\n-    argsman.AddArg(\"-signetseednode\", \"Specify a seed node for the signet network, in the hostname[:port] format, e.g. sig.net:1234 (may be used multiple times to specify multiple seed nodes)\", ArgsManager::ALLOW_STRING, OptionsCategory::CHAINPARAMS);\n+    argsman.AddArg(\"-signetchallenge\", \"Blocks must satisfy the given script to be considered valid (only for signet networks; defaults to the global default signet test network challenge)\", ArgsManager::ALLOW_STRING, OptionsCategory::CHAINPARAMS);\n+    argsman.AddArg(\"-signetseednode\", \"Specify a seed node for the signet network, in the hostname[:port] format, e.g. sig.net:1234 (may be used multiple times to specify multiple seed nodes; defaults to the global default signet test network seed node(s))\", ArgsManager::ALLOW_STRING, OptionsCategory::CHAINPARAMS);\n }\n \n static std::unique_ptr<CBaseChainParams> globalChainBaseParams;"
      }
    ]
  },
  {
    "sha": "ec9b25d046793be50da1c11ba61d1b4b13b295b0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYzliMjVkMDQ2NzkzYmU1MGRhMWMxMWJhNjFkMWI0YjEzYjI5NWIw",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-04-30T03:08:26Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-09-18T01:19:42Z"
      },
      "message": "test: signet network selection tests",
      "tree": {
        "sha": "2d6a438a2ede8de9f6ed614cc4d75e4f714b5cf2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2d6a438a2ede8de9f6ed614cc4d75e4f714b5cf2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ec9b25d046793be50da1c11ba61d1b4b13b295b0",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAl9kCy4ACgkQV692LbM1\nMyIPpw/8C2c5ZjSTJoBJKwaDmYtU8qqMjlNSAC8lStlO9u2DS/7+QufzKA1FwctT\nr1cmEQhyoL4u1nfxN1R9H2U0ktVMqsJDTZX6g3KDNHIFLzVZiajfr2t/fzvEhbD6\nlnxP1/7UO0cwMhHkekygI5zwbcNvZu+HQvxHDWkg5QufpHLKTYofiwk5wSS3k8WI\nLbRJuJITRkMX3cd8rfwFg9msGPd1JERwL7WpS80mT4mgmJ53u1s82U64BIeFDMxv\nl0kN5XDMnLPyBmSUo2Lc9OFyftXVmQ1H3KbqvLdhmiN2eMU/JvSQtBTsWlVtRtrH\niNI1HF17zA+/CEcy71pI2Dl5lu905UTWgDhvPjOrpsdxi70d9yDyPaHPAlzML5ev\n+GiMJtcjMTl94i5p551XV+EPj1FKHXKqjYl9Kk1TLyjFf8/UlZ6cTXqQt643lsH1\nUxeePy2HnoFhIuL8Wv4Kfl3587gv9jKahlVLM2TcAR1xL+ISyacPXdUrpcaMnxP+\nFZzgigGDFpZdQ9dX1essY91y5ycDNFT42EOBkf95hwy1h9z+HuLy8fThwEyuFGiz\nxojTmYaSCMVrTwgraRphUIL8Bf0vUdamHwaqpBIa/DfwcVWGkKegh4zEfBr82OAA\nxyALoI/U69FEZJrWe6wB8OWcr9oAnRpiVOOEUNHbrQyitblVWgA=\n=T+jq\n-----END PGP SIGNATURE-----",
        "payload": "tree 2d6a438a2ede8de9f6ed614cc4d75e4f714b5cf2\nparent 3efe298dccb248f25d6b01ab6a80b1cd6c9e1a1e\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1588216106 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1600391982 +0900\n\ntest: signet network selection tests\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec9b25d046793be50da1c11ba61d1b4b13b295b0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ec9b25d046793be50da1c11ba61d1b4b13b295b0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec9b25d046793be50da1c11ba61d1b4b13b295b0/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3efe298dccb248f25d6b01ab6a80b1cd6c9e1a1e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3efe298dccb248f25d6b01ab6a80b1cd6c9e1a1e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3efe298dccb248f25d6b01ab6a80b1cd6c9e1a1e"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "611e9f262335a3a05c66c8fe0b2e4788a0379d67",
        "filename": "src/test/key_io_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec9b25d046793be50da1c11ba61d1b4b13b295b0/src/test/key_io_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec9b25d046793be50da1c11ba61d1b4b13b295b0/src/test/key_io_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/key_io_tests.cpp?ref=ec9b25d046793be50da1c11ba61d1b4b13b295b0",
        "patch": "@@ -136,7 +136,7 @@ BOOST_AUTO_TEST_CASE(key_io_invalid)\n         std::string exp_base58string = test[0].get_str();\n \n         // must be invalid as public and as private key\n-        for (const auto& chain : { CBaseChainParams::MAIN, CBaseChainParams::TESTNET, CBaseChainParams::REGTEST }) {\n+        for (const auto& chain : { CBaseChainParams::MAIN, CBaseChainParams::TESTNET, CBaseChainParams::SIGNET, CBaseChainParams::REGTEST }) {\n             SelectParams(chain);\n             destination = DecodeDestination(exp_base58string);\n             BOOST_CHECK_MESSAGE(!IsValidDestination(destination), \"IsValid pubkey in mainnet:\" + strTest);"
      },
      {
        "sha": "241c56934e502d503a2e1512ccba2f19ed3646e7",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec9b25d046793be50da1c11ba61d1b4b13b295b0/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec9b25d046793be50da1c11ba61d1b4b13b295b0/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=ec9b25d046793be50da1c11ba61d1b4b13b295b0",
        "patch": "@@ -848,8 +848,8 @@ struct ArgsMergeTestingSetup : public BasicTestingSetup {\n             ForEachNoDup(conf_actions, SET, SECTION_NEGATE, [&] {\n                 for (bool soft_set : {false, true}) {\n                     for (bool force_set : {false, true}) {\n-                        for (const std::string& section : {CBaseChainParams::MAIN, CBaseChainParams::TESTNET}) {\n-                            for (const std::string& network : {CBaseChainParams::MAIN, CBaseChainParams::TESTNET}) {\n+                        for (const std::string& section : {CBaseChainParams::MAIN, CBaseChainParams::TESTNET, CBaseChainParams::SIGNET}) {\n+                            for (const std::string& network : {CBaseChainParams::MAIN, CBaseChainParams::TESTNET, CBaseChainParams::SIGNET}) {\n                                 for (bool net_specific : {false, true}) {\n                                     fn(arg_actions, conf_actions, soft_set, force_set, section, network, net_specific);\n                                 }\n@@ -1003,7 +1003,7 @@ BOOST_FIXTURE_TEST_CASE(util_ArgsMerge, ArgsMergeTestingSetup)\n     // Results file is formatted like:\n     //\n     //   <input> || <IsArgSet/IsArgNegated/GetArg output> | <GetArgs output> | <GetUnsuitable output>\n-    BOOST_CHECK_EQUAL(out_sha_hex, \"8fd4877bb8bf337badca950ede6c917441901962f160e52514e06a60dea46cde\");\n+    BOOST_CHECK_EQUAL(out_sha_hex, \"d1e436c1cd510d0ec44d5205d4b4e3bee6387d316e0075c58206cb16603f3d82\");\n }\n \n // Similar test as above, but for ArgsManager::GetChainName function."
      }
    ]
  },
  {
    "sha": "4c189abdc452f08dfa758564b5381bc78c42d481",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YzE4OWFiZGM0NTJmMDhkZmE3NTg1NjRiNTM4MWJjNzhjNDJkNDgx",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-08-17T09:41:37Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-09-18T01:19:42Z"
      },
      "message": "test: add small signet fuzzer",
      "tree": {
        "sha": "729ebcfd19d8d0cca09ef09f56762b8cdd80071a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/729ebcfd19d8d0cca09ef09f56762b8cdd80071a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4c189abdc452f08dfa758564b5381bc78c42d481",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAl9kCy4ACgkQV692LbM1\nMyJUHw//Rnmdr0dwat90RSBxdQA4USjzOI8y+xaaeoQ5IpPGU/7UUmo+AMSif4SX\nAbUJC+0nIdGcBW10+eyqxseBqSv5VEJ5ULURofM82VEFXOQh/A2fuAakmfdSF1Gu\n2qCF5/rGzGmuqjY9RHb4X5tEXDgmO0gBcnqGJaeSmbugZhstkdE/ckJ8sI5J/3T8\nVT9P6+m0ztghTRBElH8WnGMRsNrv0t7bFCG0z7O+RH9anpVBVOMmkhT+hcaSfve8\n1OVePD/Ajw7qW4sMtTvcrgEjEMhYpeUfL14aPtpmsQSlfnNFtY7K9npxOiqGCgZl\nebAerO1X/EQgF2ScLdJgaI2x9jmxq7f62bClRytFWrngsmjrSzrLzB7h/jReGRGk\n+QyLqlCMPvPPLCH14ECWU6G0CLsggyEBPu7Nh+DiTswo/NRJ0viwt/zvP83LAKIk\niXTK1wBq2XokUBELiFaZ4Bo8nHPzzO6QcgwwoJ1PSyKeN1dKHor8sBb6OB7T2m2S\nRPYQWQgdR+gRdKVWZ3vW1zEYmV0OYTg8dNpiug9vnWXPQKz0kZACdYALzGtZqUlw\nTPzodo6avz8oTYTtt4YxOH1yZ+OyklQyFc5elzFHDh9OubtlY/LvPi8TqwhxvcMi\n6ACaWQ9QgxFeAuf78oK7dUkfbQn0keoRFB5PQ29GUhYk905u9es=\n=0yMs\n-----END PGP SIGNATURE-----",
        "payload": "tree 729ebcfd19d8d0cca09ef09f56762b8cdd80071a\nparent ec9b25d046793be50da1c11ba61d1b4b13b295b0\nauthor practicalswift <practicalswift@users.noreply.github.com> 1597657297 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1600391982 +0900\n\ntest: add small signet fuzzer\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c189abdc452f08dfa758564b5381bc78c42d481",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4c189abdc452f08dfa758564b5381bc78c42d481",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c189abdc452f08dfa758564b5381bc78c42d481/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ec9b25d046793be50da1c11ba61d1b4b13b295b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec9b25d046793be50da1c11ba61d1b4b13b295b0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ec9b25d046793be50da1c11ba61d1b4b13b295b0"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 41,
      "deletions": 0
    },
    "files": [
      {
        "sha": "8eb417cbe41fa1aa667fe1db530e6dff35065fb7",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c189abdc452f08dfa758564b5381bc78c42d481/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c189abdc452f08dfa758564b5381bc78c42d481/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=4c189abdc452f08dfa758564b5381bc78c42d481",
        "patch": "@@ -134,6 +134,7 @@ FUZZ_TARGETS = \\\n   test/fuzz/scriptnum_ops \\\n   test/fuzz/service_deserialize \\\n   test/fuzz/signature_checker \\\n+  test/fuzz/signet \\\n   test/fuzz/snapshotmetadata_deserialize \\\n   test/fuzz/span \\\n   test/fuzz/spanparsing \\\n@@ -1106,6 +1107,12 @@ test_fuzz_signature_checker_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_signature_checker_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n test_fuzz_signature_checker_SOURCES = test/fuzz/signature_checker.cpp\n \n+test_fuzz_signet_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_signet_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_signet_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_signet_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_signet_SOURCES = test/fuzz/signet.cpp\n+\n test_fuzz_snapshotmetadata_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DSNAPSHOTMETADATA_DESERIALIZE=1\n test_fuzz_snapshotmetadata_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_snapshotmetadata_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)"
      },
      {
        "sha": "4736ae27f531d0f36dfb5e8b67aef41619fda0a0",
        "filename": "src/test/fuzz/signet.cpp",
        "status": "added",
        "additions": 34,
        "deletions": 0,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c189abdc452f08dfa758564b5381bc78c42d481/src/test/fuzz/signet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c189abdc452f08dfa758564b5381bc78c42d481/src/test/fuzz/signet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/signet.cpp?ref=4c189abdc452f08dfa758564b5381bc78c42d481",
        "patch": "@@ -0,0 +1,34 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <consensus/validation.h>\n+#include <primitives/block.h>\n+#include <signet.h>\n+#include <streams.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cstdint>\n+#include <optional>\n+#include <vector>\n+\n+void initialize()\n+{\n+    InitializeFuzzingContext(CBaseChainParams::SIGNET);\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    const std::optional<CBlock> block = ConsumeDeserializable<CBlock>(fuzzed_data_provider);\n+    if (!block) {\n+        return;\n+    }\n+    (void)CheckSignetBlockSolution(*block, Params().GetConsensus());\n+    if (GetWitnessCommitmentIndex(*block) != NO_WITNESS_COMMITMENT) {\n+        (void)SignetTxs(*block, ConsumeScript(fuzzed_data_provider));\n+    }\n+}"
      }
    ]
  },
  {
    "sha": "e47ad375bf17557f805bd206e789b8db78c6338a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNDdhZDM3NWJmMTc1NTdmODA1YmQyMDZlNzg5YjhkYjc4YzYzMzhh",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2019-08-05T15:01:54Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-09-18T01:19:43Z"
      },
      "message": "test: basic signet tests",
      "tree": {
        "sha": "882307bc4f62f5a3377a0643f7539d63b00348b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/882307bc4f62f5a3377a0643f7539d63b00348b9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e47ad375bf17557f805bd206e789b8db78c6338a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAl9kCy8ACgkQV692LbM1\nMyJhcQ//SZQW9y/RtwVDuX+OKrhSiG88vRVJicko3V3KsoqUtyPxjwCaGBgh4SCx\nlC2af9cywqNaWev81EiFZPYLwwTon5P3QWbViDWQsr8Pl3SqlRGdtAjDz1qIXjUr\nFtNPE7Z6wuDGgmdDePQk7EVCmBYNtOSEkyg76QI+rEdC/Yl3i6wGjHvqbGOv1s54\njsqy4s9kCW35z8+uKO6gn3HBF2GUAkxZWg9vizN12oyh7SHVbNDA+s08yXTUChap\nyjIppy6K7ADoekgcHiIdGpq1ev3XPOmYf6berS1hvTE3mQHY7fSIHeFUgBmS2P1h\naYuRzk+oAJJuXuEWUKYPL6Mo/IKdu7/QdN8htybQuS3l8e9tMYZPAIpSR94cHu3F\nlBqYl6H97eWjQhHr2x3ySd9tncF3R6+oL+TtJatsa9AUdTeF6yj+khkE56SL0nsk\nO80lT8Hv8bNKQ469PczNEeil2SMioYow3Lh6LbAsXlCex7Rt06RH3rx2zyE3h5qm\nze2OCWAIlBbbyFKgwcgezq3Ws0MlAbpdxDBZ5bST2LyMfNDDcKJeSfD86rSYGhUC\nodGTNd4dat7saXdYYvSnnAOCIXBtZ7WTzHyrHCLES4LKcEUgfNQs4bHLieooED75\nh5Qm3TODFeInc110LWw2ecNJ5Xol9eXQxdFsIwgPnou9o/7C3mc=\n=MR2B\n-----END PGP SIGNATURE-----",
        "payload": "tree 882307bc4f62f5a3377a0643f7539d63b00348b9\nparent 4c189abdc452f08dfa758564b5381bc78c42d481\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1565017314 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1600391983 +0900\n\ntest: basic signet tests\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e47ad375bf17557f805bd206e789b8db78c6338a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e47ad375bf17557f805bd206e789b8db78c6338a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e47ad375bf17557f805bd206e789b8db78c6338a/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4c189abdc452f08dfa758564b5381bc78c42d481",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c189abdc452f08dfa758564b5381bc78c42d481",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4c189abdc452f08dfa758564b5381bc78c42d481"
      }
    ],
    "stats": {
      "total": 73,
      "additions": 73,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f85431148d2243098120c41b011c96431bacc722",
        "filename": "test/functional/feature_signet.py",
        "status": "added",
        "additions": 71,
        "deletions": 0,
        "changes": 71,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e47ad375bf17557f805bd206e789b8db78c6338a/test/functional/feature_signet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e47ad375bf17557f805bd206e789b8db78c6338a/test/functional/feature_signet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_signet.py?ref=e47ad375bf17557f805bd206e789b8db78c6338a",
        "patch": "@@ -0,0 +1,71 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019-2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test basic signet functionality\"\"\"\n+\n+from decimal import Decimal\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+signet_blocks = [\n+    '00000020f61eee3b63a380a477a063af32b2bbc97c9ff9f01f2c4225e973988108000000f575c83235984e7dc4afc1f30944c170462e84437ab6f2d52e16878a79e4678bd1914d5fae77031eccf4070001010000000001010000000000000000000000000000000000000000000000000000000000000000ffffffff025151feffffff0200f2052a010000001600149243f727dd5343293eb83174324019ec16c2630f0000000000000000776a24aa21a9ede2f61c3f71d1defd3fa999dfa36953755c690689799962b48bebd836974e8cf94c4fecc7daa2490047304402205e423a8754336ca99dbe16509b877ef1bf98d008836c725005b3c787c41ebe46022047246e4467ad7cc7f1ad98662afcaf14c115e0095a227c7b05c5182591c23e7e01000120000000000000000000000000000000000000000000000000000000000000000000000000',\n+    '00000020533b53ded9bff4adc94101d32400a144c54edc5ed492a3b26c63b2d686000000b38fef50592017cfafbcab88eb3d9cf50b2c801711cad8299495d26df5e54812e7914d5fae77031ecfdd0b0001010000000001010000000000000000000000000000000000000000000000000000000000000000ffffffff025251feffffff0200f2052a01000000160014fd09839740f0e0b4fc6d5e2527e4022aa9b89dfa0000000000000000776a24aa21a9ede2f61c3f71d1defd3fa999dfa36953755c690689799962b48bebd836974e8cf94c4fecc7daa24900473044022031d64a1692cdad1fc0ced69838169fe19ae01be524d831b95fcf5ea4e6541c3c02204f9dea0801df8b4d0cd0857c62ab35c6c25cc47c930630dc7fe723531daa3e9b01000120000000000000000000000000000000000000000000000000000000000000000000000000',\n+    '000000202960f3752f0bfa8858a3e333294aedc7808025e868c9dc03e71d88bb320000007765fcd3d5b4966beb338bba2675dc2cf2ad28d4ad1d83bdb6f286e7e27ac1f807924d5fae77031e81d60b0001010000000001010000000000000000000000000000000000000000000000000000000000000000ffffffff025351feffffff0200f2052a010000001600141e5fb426042692ae0e87c070e78c39307a5661c20000000000000000776a24aa21a9ede2f61c3f71d1defd3fa999dfa36953755c690689799962b48bebd836974e8cf94c4fecc7daa2490047304402205de93694763a42954865bcf1540cb82958bc62d0ec4eee02070fb7937cd037f4022067f333753bce47b10bc25eb6e1f311482e994c862a7e0b2d41ab1c8679fd1b1101000120000000000000000000000000000000000000000000000000000000000000000000000000',\n+    '00000020b06443a13ae1d3d50faef5ecad38c6818194dc46abca3e972e2aacdae800000069a5829097e80fee00ac49a56ea9f82d741a6af84d32b3bc455cf31871e2a8ac27924d5fae77031e9c91050001010000000001010000000000000000000000000000000000000000000000000000000000000000ffffffff025451feffffff0200f2052a0100000016001430db2f8225dcf7751361ab38735de08190318cb70000000000000000776a24aa21a9ede2f61c3f71d1defd3fa999dfa36953755c690689799962b48bebd836974e8cf94c4fecc7daa2490047304402200936f5f9872f6df5dd242026ad52241a68423f7f682e79169a8d85a374eab9b802202cd2979c48b321b3453e65e8f92460db3fca93cbea8539b450c959f4fbe630c601000120000000000000000000000000000000000000000000000000000000000000000000000000',\n+    '000000207ed403758a4f228a1939418a155e2ebd4ae6b26e5ffd0ae433123f7694010000542e80b609c5bc58af5bdf492e26d4f60cd43a3966c2e063c50444c29b3757a636924d5fae77031ee8601d0001010000000001010000000000000000000000000000000000000000000000000000000000000000ffffffff025551feffffff0200f2052a01000000160014edc207e014df34fa3885dff97d1129d356e1186a0000000000000000776a24aa21a9ede2f61c3f71d1defd3fa999dfa36953755c690689799962b48bebd836974e8cf94c4fecc7daa24900473044022021a3656609f85a66a2c5672ed9322c2158d57251040d2716ed202a1fe14f0c12022057d68bc6611f7a9424a7e00bbf3e27e6ae6b096f60bac624a094bc97a59aa1ff01000120000000000000000000000000000000000000000000000000000000000000000000000000',\n+    '000000205bea0a88d1422c3df08d766ad72df95084d0700e6f873b75dd4e986c7703000002b57516d33ed60c2bdd9f93d6d5614083324c837e68e5ba6e04287a7285633585924d5fae77031ed171960001010000000001010000000000000000000000000000000000000000000000000000000000000000ffffffff025651feffffff0200f2052a010000001600143ae612599cf96f2442ce572633e0251116eaa52f0000000000000000776a24aa21a9ede2f61c3f71d1defd3fa999dfa36953755c690689799962b48bebd836974e8cf94c4fecc7daa24900473044022059a7c54de76bfdbb1dd44c78ea2dbd2bb4e97f4abad38965f41e76433e56423c022054bf17f04fe17415c0141f60eebd2b839200f574d8ad8d55a0917b92b0eb913401000120000000000000000000000000000000000000000000000000000000000000000000000000',\n+    '00000020daf3b60d374b19476461f97540498dcfa2eb7016238ec6b1d022f82fb60100007a7ae65b53cb988c2ec92d2384996713821d5645ffe61c9acea60da75cd5edfa1a944d5fae77031e9dbb050001010000000001010000000000000000000000000000000000000000000000000000000000000000ffffffff025751feffffff0200f2052a01000000160014ef2dceae02e35f8137de76768ae3345d99ca68860000000000000000776a24aa21a9ede2f61c3f71d1defd3fa999dfa36953755c690689799962b48bebd836974e8cf94c4fecc7daa2490047304402202b3f946d6447f9bf17d00f3696cede7ee70b785495e5498274ee682a493befd5022045fc0bcf9332243168b5d35507175f9f374a8eba2336873885d12aada67ea5f601000120000000000000000000000000000000000000000000000000000000000000000000000000',\n+    '00000020457cc5f3c2e1a5655bc20e20e48d33e1b7ea68786c614032b5c518f0b6000000541f36942d82c6e7248275ff15c8933487fbe1819c67a9ecc0f4b70bb7e6cf672a944d5fae77031e8f39860001010000000001010000000000000000000000000000000000000000000000000000000000000000ffffffff025851feffffff0200f2052a0100000016001472a27906947c06d034b38ba2fa13c6391a4832790000000000000000776a24aa21a9ede2f61c3f71d1defd3fa999dfa36953755c690689799962b48bebd836974e8cf94c4fecc7daa2490047304402202d62805ce60cbd60591f97f949b5ea5bd7e2307bcde343e6ea8394da92758e72022053a25370b0aa20da100189b7899a8f8675a0fdc60e38ece6b8a4f98edd94569e01000120000000000000000000000000000000000000000000000000000000000000000000000000',\n+    '00000020a2eb61eb4f3831baa3a3363e1b42db4462663f756f07423e81ed30322102000077224de7dea0f8d0ec22b1d2e2e255f0a987b96fe7200e1a2e6373f48a2f5b7894954d5fae77031e36867e0001010000000001010000000000000000000000000000000000000000000000000000000000000000ffffffff025951feffffff0200f2052a01000000160014aa0ad9f26801258382e0734dceec03a4a75f60240000000000000000776a24aa21a9ede2f61c3f71d1defd3fa999dfa36953755c690689799962b48bebd836974e8cf94c4fecc7daa2490047304402206fa0d59990eed369bd7375767c9a6c9369fae209152b8674e520da270605528c0220749eed3b12dbe3f583f505d21803e4aef59c8e24c5831951eafa4f15a8f92c4e01000120000000000000000000000000000000000000000000000000000000000000000000000000',\n+    '00000020a868e8514be5e46dabd6a122132f423f36a43b716a40c394e2a8d063e1010000f4c6c717e99d800c699c25a2006a75a0c5c09f432a936f385e6fce139cdbd1a5e9964d5fae77031e7d026e0001010000000001010000000000000000000000000000000000000000000000000000000000000000ffffffff025a51feffffff0200f2052a01000000160014aaa671c82b138e3b8f510cd801e5f2bd0aa305940000000000000000776a24aa21a9ede2f61c3f71d1defd3fa999dfa36953755c690689799962b48bebd836974e8cf94c4fecc7daa24900473044022042309f4c3c7a1a2ac8c24f890f962df1c0086cec10be0868087cfc427520cb2702201dafee8911c269b7e786e242045bb57cef3f5b0f177010c6159abae42f646cc501000120000000000000000000000000000000000000000000000000000000000000000000000000',\n+]\n+\n+class SignetBasicTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.chain = \"signet\"\n+        self.num_nodes = 6\n+        self.setup_clean_chain = True\n+        shared_args1 = [\"-signetchallenge=51\"] # OP_TRUE\n+        shared_args2 = []                         # default challenge\n+        # we use the exact same challenge except we do it as a 2-of-2, which means it should fail\n+        shared_args3 = [\"-signetchallenge=522103ad5e0edad18cb1f0fc0d28a3d4f1f3e445640337489abb10404f2d1e086be430210359ef5021964fe22d6f8e05b2463c9540ce96883fe3b278760f048f5189f2e6c452ae\"]\n+\n+        self.extra_args = [\n+            shared_args1, shared_args1,\n+            shared_args2, shared_args2,\n+            shared_args3, shared_args3,\n+        ]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.log.info(\"basic tests using OP_TRUE challenge\")\n+\n+        self.log.info('getmininginfo')\n+        mining_info = self.nodes[0].getmininginfo()\n+        assert_equal(mining_info['blocks'], 0)\n+        assert_equal(mining_info['chain'], 'signet')\n+        assert 'currentblocktx' not in mining_info\n+        assert 'currentblockweight' not in mining_info\n+        assert_equal(mining_info['networkhashps'], Decimal('0'))\n+        assert_equal(mining_info['pooledtx'], 0)\n+\n+        self.nodes[0].generatetoaddress(1, self.nodes[0].getnewaddress())\n+\n+        self.log.info(\"pregenerated signet blocks check\")\n+\n+        height = 0\n+        for block in signet_blocks:\n+            assert_equal(self.nodes[2].submitblock(block), None)\n+            height = height + 1\n+            assert_equal(self.nodes[2].getblockcount(), height)\n+\n+        self.log.info(\"pregenerated signet blocks check (incompatible solution)\")\n+\n+        assert_equal(self.nodes[4].submitblock(signet_blocks[0]), 'bad-signet-blksig')\n+\n+if __name__ == '__main__':\n+    SignetBasicTest().main()"
      },
      {
        "sha": "cf97e1e2e7d884bb047b5ac1b26a8c9e1964df5f",
        "filename": "test/functional/test_framework/p2p.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e47ad375bf17557f805bd206e789b8db78c6338a/test/functional/test_framework/p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e47ad375bf17557f805bd206e789b8db78c6338a/test/functional/test_framework/p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/p2p.py?ref=e47ad375bf17557f805bd206e789b8db78c6338a",
        "patch": "@@ -109,6 +109,7 @@\n     \"mainnet\": b\"\\xf9\\xbe\\xb4\\xd9\",   # mainnet\n     \"testnet3\": b\"\\x0b\\x11\\x09\\x07\",  # testnet3\n     \"regtest\": b\"\\xfa\\xbf\\xb5\\xda\",   # regtest\n+    \"signet\": b\"\\x0a\\x03\\xcf\\x40\",    # signet\n }\n \n "
      },
      {
        "sha": "96db2f726447a21c1b6c5738b0656008fcf66c63",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e47ad375bf17557f805bd206e789b8db78c6338a/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e47ad375bf17557f805bd206e789b8db78c6338a/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=e47ad375bf17557f805bd206e789b8db78c6338a",
        "patch": "@@ -207,6 +207,7 @@\n     'rpc_bind.py --ipv6',\n     'rpc_bind.py --nonloopback',\n     'mining_basic.py',\n+    'feature_signet.py',\n     'wallet_bumpfee.py',\n     'wallet_implicitsegwit.py',\n     'rpc_named_arguments.py',"
      }
    ]
  },
  {
    "sha": "8258c4c0076bb5f27efdc117a04b27fcd6dd00b2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MjU4YzRjMDA3NmJiNWYyN2VmZGMxMTdhMDRiMjdmY2Q2ZGQwMGIy",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2020-09-08T01:55:40Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-09-18T01:19:43Z"
      },
      "message": "test: some sanity checks for consensus logic",
      "tree": {
        "sha": "401d5ec56e7dfe28a8c7e58a3ae3a373c44c55f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/401d5ec56e7dfe28a8c7e58a3ae3a373c44c55f5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8258c4c0076bb5f27efdc117a04b27fcd6dd00b2",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAl9kCy8ACgkQV692LbM1\nMyIN5Q/9G2vis6XEMnj64MCi4ivGHHHOGdTh4VCzkoy22CT6WdyXh1fqSIVlfkC3\nv4Hs3ErDMchPOlK6iBBV7zV1IaAinBV7CtOaFU3d/08zyvuixiST5CUuLNM4E8HM\n2H2velDShNh2zFsfmRIQ2/iGHkk6J7E5ReED96JnByzq8KoOhCqxzgrugplYnBJB\nmmMC15wONNY5InPj74JY6GcIUnpU/prHZqjb8UqWhRfa/nYt0I7QlqlyIKawOkaF\nNTOVofg5VSwN2TJpu1sbTKsLfJEoJWsf+qvCRXBEmn8QDWG0UU7nMLbcitKlRHvE\nYcX0otl9E6cD2dDyJzlvS1zW1snxQ7ilARQXHnCRjtugCexasgxItx4zIdWL26N+\n1LZC71t1NiC+mF5zJn8hpSAnekwWl4XsDLu0P9z/lOBO1zYW0ROgw71dAaGL6YVV\n6yWQSWupwWyV890vQmyx9lG3Cxzz73aUNkWY3Am2xQgsbrlw1kxhlh/3edLFy6gm\nt/kP+ZpoGv2iOWdEQTyeNy2s9j/1jOPrqCz1PPk98xkW+PKwQvjCKdDQcN0nRopp\nxOxtlSOJ8qBVigFQqKfKPOe7rRMiLZKeD99rSvRMg7uaiOXx5kFPgjXrXwc1oLr8\nOl5xjzqria+UGiJAgevgHLgMWA8PnDkWuJP19FOK8W1qqi3Ono0=\n=XCeG\n-----END PGP SIGNATURE-----",
        "payload": "tree 401d5ec56e7dfe28a8c7e58a3ae3a373c44c55f5\nparent e47ad375bf17557f805bd206e789b8db78c6338a\nauthor Anthony Towns <aj@erisian.com.au> 1599530140 +1000\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1600391983 +0900\n\ntest: some sanity checks for consensus logic\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8258c4c0076bb5f27efdc117a04b27fcd6dd00b2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8258c4c0076bb5f27efdc117a04b27fcd6dd00b2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8258c4c0076bb5f27efdc117a04b27fcd6dd00b2/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e47ad375bf17557f805bd206e789b8db78c6338a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e47ad375bf17557f805bd206e789b8db78c6338a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e47ad375bf17557f805bd206e789b8db78c6338a"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 47,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ca49b89ad84ace6a4f2c5dc7ff0af342915fe9d1",
        "filename": "src/test/pow_tests.cpp",
        "status": "modified",
        "additions": 47,
        "deletions": 0,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8258c4c0076bb5f27efdc117a04b27fcd6dd00b2/src/test/pow_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8258c4c0076bb5f27efdc117a04b27fcd6dd00b2/src/test/pow_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/pow_tests.cpp?ref=8258c4c0076bb5f27efdc117a04b27fcd6dd00b2",
        "patch": "@@ -135,4 +135,51 @@ BOOST_AUTO_TEST_CASE(GetBlockProofEquivalentTime_test)\n     }\n }\n \n+void sanity_check_chainparams(std::string chainName)\n+{\n+    const auto chainParams = CreateChainParams(chainName);\n+    const auto consensus = chainParams->GetConsensus();\n+\n+    // hash genesis is correct\n+    BOOST_CHECK_EQUAL(consensus.hashGenesisBlock, chainParams->GenesisBlock().GetHash());\n+\n+    // target timespan is an even multiple of spacing\n+    BOOST_CHECK_EQUAL(consensus.nPowTargetTimespan % consensus.nPowTargetSpacing, 0);\n+\n+    // genesis nBits is positive, doesn't overflow and is lower than powLimit\n+    arith_uint256 pow_compact;\n+    bool neg, over;\n+    pow_compact.SetCompact(chainParams->GenesisBlock().nBits, &neg, &over);\n+    BOOST_CHECK(!neg && pow_compact != 0);\n+    BOOST_CHECK(!over);\n+    BOOST_CHECK(UintToArith256(consensus.powLimit) >= pow_compact);\n+\n+    // check max target * 4*nPowTargetTimespan doesn't overflow -- see pow.cpp:CalculateNextWorkRequired()\n+    if (!consensus.fPowNoRetargeting) {\n+        arith_uint256 targ_max(\"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\");\n+        targ_max /= consensus.nPowTargetTimespan*4;\n+        BOOST_CHECK(UintToArith256(consensus.powLimit) < targ_max);\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE(ChainParams_MAIN_sanity)\n+{\n+    sanity_check_chainparams(CBaseChainParams::MAIN);\n+}\n+\n+BOOST_AUTO_TEST_CASE(ChainParams_REGTEST_sanity)\n+{\n+    sanity_check_chainparams(CBaseChainParams::REGTEST);\n+}\n+\n+BOOST_AUTO_TEST_CASE(ChainParams_TESTNET_sanity)\n+{\n+    sanity_check_chainparams(CBaseChainParams::TESTNET);\n+}\n+\n+BOOST_AUTO_TEST_CASE(ChainParams_SIGNET_sanity)\n+{\n+    sanity_check_chainparams(CBaseChainParams::SIGNET);\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  }
]