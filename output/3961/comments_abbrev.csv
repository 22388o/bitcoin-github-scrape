laanwj,2014-03-25T16:07:54Z,"Trivial example Makefile for building bitcoind outside of the repository, using the provided pkg-configs:\n\n``` makefile\nLIBS='bitcoincore_cli bitcoincore_server bitcoincore_wallet'\nCXXFLAGS=-pthread $(shell pkg-config --cflags ${LIBS})\nLDFLAGS=-pthread $(shell pkg-config --libs ${LIBS})\n\nbitcoind: bitcoind.o\n        $(CXX) -o $@ $^ $(LDFLAGS)\n```\n",https://github.com/bitcoin/bitcoin/pull/3961#issuecomment-38584175,38584175,
laanwj,2014-03-25T16:23:18Z,"TODO to make the library more useful, but this can/should be done in later commits:\n- Rename `-DHAVE_CONFIG_H` to `-DHAVE_BITCOIN_CONFIG_H` to avoid it colliding with a project local `config.h`\n- Make `libbitcoincore_server` library independent on setting of `--enable/disable-wallet` used to compile\n  - Untangles `libbitcoincore_wallet` and `libbitcoincore_server`, there is now a sort of circul",https://github.com/bitcoin/bitcoin/pull/3961#issuecomment-38586441,38586441,
BitcoinPullTester,2014-03-25T16:55:59Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/235345d0cdf9ad50ebb9411080f54ebba59c27d0 for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/cu",https://github.com/bitcoin/bitcoin/pull/3961#issuecomment-38590663,38590663,
theuni,2014-03-25T23:57:45Z,"(Haven't looked deeply into the changes yet).\n\nDoes it make sense to do this before defining a stable external API? I certainly +1 the idea in general, but the current headers are very much entangled. I'm nervous that if applications start building against these, we're locked in to a very suboptimal api?\n\nI'm currently working on breaking out the scripting into a clean external api as discusse",https://github.com/bitcoin/bitcoin/pull/3961#issuecomment-38636097,38636097,
luke-jr,2014-03-26T00:07:09Z,libtool versioning allows breaking ABI and API compatibility safely.\n,https://github.com/bitcoin/bitcoin/pull/3961#issuecomment-38636692,38636692,
theuni,2014-03-26T00:15:40Z,"Libtool versioning allows breaking external ABI compatibility safely. We have no external API/ABI.\n\nSay this is merged as-is. Now I want to write an application watches for transactions (or anything, just a quick example). I have to use all internal headers and structures.\n\nWith the next version of libbitcoincore_server, those structures and functions may change in any random way. How do I, as",https://github.com/bitcoin/bitcoin/pull/3961#issuecomment-38637183,38637183,
laanwj,2014-03-26T06:49:03Z,"@theuni Please... I don't want to propose this as something to application developers. As I mention several times this is just a first step. As mentioned this is completely harmless to the normal build.\n\nEven without installing headers (which are the external ""interface"") this can be useful, it's possible to save a bit of space this way: GUI, cli and daemon can share code.\n\nDo you know of any ",https://github.com/bitcoin/bitcoin/pull/3961#issuecomment-38654412,38654412,
theuni,2014-03-26T07:07:00Z,@laanwj sounds like you're looking for noinst_LTLIBRARIES. That allows for intermediate project linkage without actually installing anything (the way we currently do our .a's). The real libraries would then wrap an external api around those for installing shared libs and headers.\n,https://github.com/bitcoin/bitcoin/pull/3961#issuecomment-38655213,38655213,
laanwj,2014-03-26T07:10:36Z,"That doesn't work. I've tried that: noinst_ doesn't work for shared libraries, which makes sense, as they're needed at run time.\n\nAnyway I'll change it to not install the headers and pkgtool files. It won't be used for application development. Is it OK then?\n",https://github.com/bitcoin/bitcoin/pull/3961#issuecomment-38655366,38655366,
theuni,2014-03-26T07:17:04Z,"Please re-read the above. noinst would be the libtool substitute for our current .a targets. The real libs would be LTLIBRARIES, which combine the (internal) noinst with the (external) interface files.\n\nMy argument is that if shared libs are installed, people _will_ use them. I think that's a very worthy goal, but the interfaces really need to be established first.\n\nIf the short-term goal is i",https://github.com/bitcoin/bitcoin/pull/3961#issuecomment-38655645,38655645,
laanwj,2014-03-26T07:27:32Z,"...but that would mean that our executables don't use the shared libraries themselves, ruining the 'shared code' aspect.\n\nDefining an external interface for general application usage will take years, or may even never happen. Sure, the current interface is a bit of a mess but it is useable if you're used to developing on the project itself.\n\nClosing this, I'll use some other solution. I guess ",https://github.com/bitcoin/bitcoin/pull/3961#issuecomment-38656189,38656189,
luke-jr,2014-03-26T07:35:26Z,It's better than nothing... Lack of a sane way to link scripting is what is holding me back from trying to put together a GUI Script debugger... :/\n,https://github.com/bitcoin/bitcoin/pull/3961#issuecomment-38656536,38656536,
theuni,2014-03-26T07:40:09Z,@luke-jr I'm working on breaking out scripting as a standalone lib as discussed with @sipa. I'll ping you when there's something to play with.\n,https://github.com/bitcoin/bitcoin/pull/3961#issuecomment-38656770,38656770,
luke-jr,2014-03-26T07:45:17Z,@theuni Thanks\n,https://github.com/bitcoin/bitcoin/pull/3961#issuecomment-38657043,38657043,
laanwj,2014-03-26T08:26:06Z,"@theuni will that also include transaction (de)serialization, or really just the scripting?\n",https://github.com/bitcoin/bitcoin/pull/3961#issuecomment-38659408,38659408,
theuni,2014-03-26T08:32:09Z,@laanwj transactions are a separate project that is almost finished up. This is just scripting. I'm just breaking down the classes to reduce dependencies until it's self-contained.\n,https://github.com/bitcoin/bitcoin/pull/3961#issuecomment-38659818,38659818,
jgarzik,2014-03-26T12:47:54Z,"Having experience with this, getting the in-tree build correct while similar libs and headers exist on the system is a real bear.  You can build bitcoind with shared lib just fine, after much configury modification, but you must take care to make sure it is the in-tree shared lib and not the system shared lib.\n",https://github.com/bitcoin/bitcoin/pull/3961#issuecomment-38678888,38678888,
laanwj,2014-03-26T12:58:16Z,"For now, I'm just copying from bitcoin core what I need instead of bothering with libraries.\n",https://github.com/bitcoin/bitcoin/pull/3961#issuecomment-38679816,38679816,
jgarzik,2014-03-26T15:23:58Z,"That's what I do, when I build small command-line tools that need knowledge of bitcoin binary data structures.\n\nAnother development option is more expensive, but potentially useful long term:  Maintain a parallel tree, where (a) a select set of files are maintained in a cross-platform, library style yet (b) separate build systems and other source code files will differ.\n\nOver the course of 1-2",https://github.com/bitcoin/bitcoin/pull/3961#issuecomment-38697122,38697122,
