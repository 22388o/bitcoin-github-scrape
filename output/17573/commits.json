[
  {
    "sha": "02d8c56a18b9a2960888d6ec1209955105bae847",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMmQ4YzU2YTE4YjlhMjk2MDg4OGQ2ZWMxMjA5OTU1MTA1YmFlODQ3",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2019-11-23T16:42:23Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2019-11-23T21:06:34Z"
      },
      "message": "Seed RNG with precision timestamps on receipt of net messages.",
      "tree": {
        "sha": "9013a23918ed55059a39fa56ae93ef6951456607",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9013a23918ed55059a39fa56ae93ef6951456607"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/02d8c56a18b9a2960888d6ec1209955105bae847",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02d8c56a18b9a2960888d6ec1209955105bae847",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/02d8c56a18b9a2960888d6ec1209955105bae847",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02d8c56a18b9a2960888d6ec1209955105bae847/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "33c103e2fe67e32e9f4e783fa243dd2bba6b1682",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33c103e2fe67e32e9f4e783fa243dd2bba6b1682",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/33c103e2fe67e32e9f4e783fa243dd2bba6b1682"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 51,
      "deletions": 0
    },
    "files": [
      {
        "sha": "99dae88bab7155d2043b8a218c377e91e1765a2e",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02d8c56a18b9a2960888d6ec1209955105bae847/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02d8c56a18b9a2960888d6ec1209955105bae847/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=02d8c56a18b9a2960888d6ec1209955105bae847",
        "patch": "@@ -16,6 +16,7 @@\n #include <crypto/sha256.h>\n #include <netbase.h>\n #include <net_permissions.h>\n+#include <random.h>\n #include <scheduler.h>\n #include <ui_interface.h>\n #include <util/strencodings.h>\n@@ -445,6 +446,9 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n     CNode* pnode = new CNode(id, nLocalServices, GetBestHeight(), hSocket, addrConnect, CalculateKeyedNetGroup(addrConnect), nonce, addr_bind, pszDest ? pszDest : \"\", false, block_relay_only);\n     pnode->AddRef();\n \n+    // We're making a new connection, harvest entropy from the time (and our peer count)\n+    RandAddEvent((uint32_t)id);\n+\n     return pnode;\n }\n \n@@ -693,6 +697,9 @@ CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n     msg.m_message_size = hdr.nMessageSize;\n     msg.m_raw_message_size = hdr.nMessageSize + CMessageHeader::HEADER_SIZE;\n \n+    // We just received a message off the wire, harvest entropy from the time (and the message checksum)\n+    RandAddEvent(ReadLE32(hash.begin()));\n+\n     msg.m_valid_checksum = (memcmp(hash.begin(), hdr.pchChecksum, CMessageHeader::CHECKSUM_SIZE) == 0);\n     if (!msg.m_valid_checksum) {\n         LogPrint(BCLog::NET, \"CHECKSUM ERROR (%s, %u bytes), expected %s was %s\\n\",\n@@ -1017,6 +1024,9 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n         LOCK(cs_vNodes);\n         vNodes.push_back(pnode);\n     }\n+\n+    // We received a new connection, harvest entropy from the time (and our peer count)\n+    RandAddEvent((uint32_t)id);\n }\n \n void CConnman::DisconnectNodes()"
      },
      {
        "sha": "09777237c20758367edec6fcba8c621f04de2f81",
        "filename": "src/random.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 0,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02d8c56a18b9a2960888d6ec1209955105bae847/src/random.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02d8c56a18b9a2960888d6ec1209955105bae847/src/random.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.cpp?ref=02d8c56a18b9a2960888d6ec1209955105bae847",
        "patch": "@@ -6,6 +6,7 @@\n #include <random.h>\n \n #include <compat/cpuid.h>\n+#include <crypto/sha256.h>\n #include <crypto/sha512.h>\n #include <support/cleanse.h>\n #ifdef WIN32\n@@ -449,6 +450,23 @@ static void SeedFast(CSHA512& hasher) noexcept\n     SeedTimestamp(hasher);\n }\n \n+// We use only SHA256 for the events hashing to get the ASM speedups we have for SHA256,\n+// since we want it to be fast as network peers may be able to trigger it repeatedly.\n+static Mutex events_mutex;\n+static CSHA256 events_hasher;\n+static void SeedEvents(CSHA512& hasher)\n+{\n+    LOCK(events_mutex);\n+\n+    unsigned char events_hash[32];\n+    events_hasher.Finalize(events_hash);\n+    hasher.Write(events_hash, 32);\n+\n+    // Re-initialize the hasher with the finalized state to use later.\n+    events_hasher.Reset();\n+    events_hasher.Write(events_hash, 32);\n+}\n+\n static void SeedSlow(CSHA512& hasher) noexcept\n {\n     unsigned char buffer[32];\n@@ -460,6 +478,9 @@ static void SeedSlow(CSHA512& hasher) noexcept\n     GetOSRand(buffer);\n     hasher.Write(buffer, sizeof(buffer));\n \n+    // Add the events hasher into the mix\n+    SeedEvents(hasher);\n+\n     // High-precision timestamp.\n     //\n     // Note that we also commit to a timestamp in the Fast seeder, so we indirectly commit to a\n@@ -485,6 +506,9 @@ static void SeedPeriodic(CSHA512& hasher, RNGState& rng)\n     // High-precision timestamp\n     SeedTimestamp(hasher);\n \n+    // Add the events hasher into the mix\n+    SeedEvents(hasher);\n+\n     // Dynamic environment data (performance monitoring, ...)\n     auto old_size = hasher.Size();\n     RandAddDynamicEnv(hasher);\n@@ -553,6 +577,15 @@ void GetRandBytes(unsigned char* buf, int num) noexcept { ProcRand(buf, num, RNG\n void GetStrongRandBytes(unsigned char* buf, int num) noexcept { ProcRand(buf, num, RNGLevel::SLOW); }\n void RandAddPeriodic() { ProcRand(nullptr, 0, RNGLevel::PERIODIC); }\n \n+void RandAddEvent(const uint32_t event_info) {\n+    LOCK(events_mutex);\n+    events_hasher.Write((const unsigned char *)&event_info, sizeof(event_info));\n+    // Get the low four bytes of the performance counter. This translates to roughly the\n+    // subsecond part.\n+    uint32_t perfcounter = (GetPerformanceCounter() & 0xffffffff);\n+    events_hasher.Write((const unsigned char*)&perfcounter, sizeof(perfcounter));\n+}\n+\n bool g_mock_deterministic_tests{false};\n \n uint64_t GetRand(uint64_t nMax) noexcept"
      },
      {
        "sha": "b6e70fcb1fc6774416b136bd84d95b9cb0e2e16e",
        "filename": "src/random.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02d8c56a18b9a2960888d6ec1209955105bae847/src/random.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02d8c56a18b9a2960888d6ec1209955105bae847/src/random.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.h?ref=02d8c56a18b9a2960888d6ec1209955105bae847",
        "patch": "@@ -89,6 +89,14 @@ void GetStrongRandBytes(unsigned char* buf, int num) noexcept;\n  */\n void RandAddPeriodic();\n \n+/**\n+ * Gathers entropy from the low bits of the time at which events occur. Should\n+ * be called with a uint32_t describing the event at the time an event occurs.\n+ *\n+ * Thread-safe.\n+ */\n+void RandAddEvent(const uint32_t event_info);\n+\n /**\n  * Fast randomness source. This is seeded once with secure random data, but\n  * is completely deterministic and does not gather more entropy after that."
      }
    ]
  }
]