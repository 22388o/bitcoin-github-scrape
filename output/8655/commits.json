[
  {
    "sha": "4731cab8fbff51a8178c85d572e2482040278616",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NzMxY2FiOGZiZmY1MWE4MTc4Yzg1ZDU3MmUyNDgyMDQwMjc4NjE2",
    "commit": {
      "author": {
        "name": "Pavel Jan\u00edk",
        "email": "Pavel@Janik.cz",
        "date": "2016-09-02T16:19:01Z"
      },
      "committer": {
        "name": "Pavel Jan\u00edk",
        "email": "Pavel@Janik.cz",
        "date": "2016-09-27T07:25:15Z"
      },
      "message": "Do not shadow variables",
      "tree": {
        "sha": "09ba06a320b4876f9318a5b9ff086e5cae9c48fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/09ba06a320b4876f9318a5b9ff086e5cae9c48fe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4731cab8fbff51a8178c85d572e2482040278616",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4731cab8fbff51a8178c85d572e2482040278616",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4731cab8fbff51a8178c85d572e2482040278616",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4731cab8fbff51a8178c85d572e2482040278616/comments",
    "author": {
      "login": "paveljanik",
      "id": 6848764,
      "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paveljanik",
      "html_url": "https://github.com/paveljanik",
      "followers_url": "https://api.github.com/users/paveljanik/followers",
      "following_url": "https://api.github.com/users/paveljanik/following{/other_user}",
      "gists_url": "https://api.github.com/users/paveljanik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
      "organizations_url": "https://api.github.com/users/paveljanik/orgs",
      "repos_url": "https://api.github.com/users/paveljanik/repos",
      "events_url": "https://api.github.com/users/paveljanik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paveljanik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "paveljanik",
      "id": 6848764,
      "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paveljanik",
      "html_url": "https://github.com/paveljanik",
      "followers_url": "https://api.github.com/users/paveljanik/followers",
      "following_url": "https://api.github.com/users/paveljanik/following{/other_user}",
      "gists_url": "https://api.github.com/users/paveljanik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
      "organizations_url": "https://api.github.com/users/paveljanik/orgs",
      "repos_url": "https://api.github.com/users/paveljanik/repos",
      "events_url": "https://api.github.com/users/paveljanik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paveljanik/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2f71490d21796594ca6f55e375558944de9db5a0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f71490d21796594ca6f55e375558944de9db5a0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2f71490d21796594ca6f55e375558944de9db5a0"
      }
    ],
    "stats": {
      "total": 178,
      "additions": 89,
      "deletions": 89
    },
    "files": [
      {
        "sha": "2677652ada2ce12054363216ee7eb2e33b4bf464",
        "filename": "src/bloom.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4731cab8fbff51a8178c85d572e2482040278616/src/bloom.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4731cab8fbff51a8178c85d572e2482040278616/src/bloom.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.cpp?ref=4731cab8fbff51a8178c85d572e2482040278616",
        "patch": "@@ -280,8 +280,8 @@ void CRollingBloomFilter::insert(const std::vector<unsigned char>& vKey)\n \n void CRollingBloomFilter::insert(const uint256& hash)\n {\n-    vector<unsigned char> data(hash.begin(), hash.end());\n-    insert(data);\n+    vector<unsigned char> vData(hash.begin(), hash.end());\n+    insert(vData);\n }\n \n bool CRollingBloomFilter::contains(const std::vector<unsigned char>& vKey) const\n@@ -300,8 +300,8 @@ bool CRollingBloomFilter::contains(const std::vector<unsigned char>& vKey) const\n \n bool CRollingBloomFilter::contains(const uint256& hash) const\n {\n-    vector<unsigned char> data(hash.begin(), hash.end());\n-    return contains(data);\n+    vector<unsigned char> vData(hash.begin(), hash.end());\n+    return contains(vData);\n }\n \n void CRollingBloomFilter::reset()"
      },
      {
        "sha": "aae9b042ac6db6dc77de36bb789fce91c8184aa5",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4731cab8fbff51a8178c85d572e2482040278616/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4731cab8fbff51a8178c85d572e2482040278616/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=4731cab8fbff51a8178c85d572e2482040278616",
        "patch": "@@ -243,12 +243,12 @@ bool CKey::Derive(CKey& keyChild, ChainCode &ccChild, unsigned int nChild, const\n     return ret;\n }\n \n-bool CExtKey::Derive(CExtKey &out, unsigned int nChild) const {\n+bool CExtKey::Derive(CExtKey &out, unsigned int _nChild) const {\n     out.nDepth = nDepth + 1;\n     CKeyID id = key.GetPubKey().GetID();\n     memcpy(&out.vchFingerprint[0], &id, 4);\n-    out.nChild = nChild;\n-    return key.Derive(out.key, out.chaincode, nChild, chaincode);\n+    out.nChild = _nChild;\n+    return key.Derive(out.key, out.chaincode, _nChild, chaincode);\n }\n \n void CExtKey::SetMaster(const unsigned char *seed, unsigned int nSeedLen) {"
      },
      {
        "sha": "c33b41ac4eb759e2d634dd97697efd19a02c95df",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4731cab8fbff51a8178c85d572e2482040278616/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4731cab8fbff51a8178c85d572e2482040278616/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=4731cab8fbff51a8178c85d572e2482040278616",
        "patch": "@@ -1185,9 +1185,9 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n                 bool fReplacementOptOut = true;\n                 if (fEnableReplacement)\n                 {\n-                    BOOST_FOREACH(const CTxIn &txin, ptxConflicting->vin)\n+                    BOOST_FOREACH(const CTxIn &_txin, ptxConflicting->vin)\n                     {\n-                        if (txin.nSequence < std::numeric_limits<unsigned int>::max()-1)\n+                        if (_txin.nSequence < std::numeric_limits<unsigned int>::max()-1)\n                         {\n                             fReplacementOptOut = false;\n                             break;\n@@ -2499,14 +2499,14 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n     if (pindex->GetUndoPos().IsNull() || !pindex->IsValid(BLOCK_VALID_SCRIPTS))\n     {\n         if (pindex->GetUndoPos().IsNull()) {\n-            CDiskBlockPos pos;\n-            if (!FindUndoPos(state, pindex->nFile, pos, ::GetSerializeSize(blockundo, SER_DISK, CLIENT_VERSION) + 40))\n+            CDiskBlockPos _pos;\n+            if (!FindUndoPos(state, pindex->nFile, _pos, ::GetSerializeSize(blockundo, SER_DISK, CLIENT_VERSION) + 40))\n                 return error(\"ConnectBlock(): FindUndoPos failed\");\n-            if (!UndoWriteToDisk(blockundo, pos, pindex->pprev->GetBlockHash(), chainparams.MessageStart()))\n+            if (!UndoWriteToDisk(blockundo, _pos, pindex->pprev->GetBlockHash(), chainparams.MessageStart()))\n                 return AbortNode(state, \"Failed to write undo data\");\n \n             // update nUndoPos in block index\n-            pindex->nUndoPos = pos.nPos;\n+            pindex->nUndoPos = _pos.nPos;\n             pindex->nStatus |= BLOCK_HAVE_UNDO;\n         }\n \n@@ -3819,10 +3819,10 @@ void PruneOneBlockFile(const int fileNumber)\n             // mapBlocksUnlinked or setBlockIndexCandidates.\n             std::pair<std::multimap<CBlockIndex*, CBlockIndex*>::iterator, std::multimap<CBlockIndex*, CBlockIndex*>::iterator> range = mapBlocksUnlinked.equal_range(pindex->pprev);\n             while (range.first != range.second) {\n-                std::multimap<CBlockIndex *, CBlockIndex *>::iterator it = range.first;\n+                std::multimap<CBlockIndex *, CBlockIndex *>::iterator _it = range.first;\n                 range.first++;\n-                if (it->second == pindex) {\n-                    mapBlocksUnlinked.erase(it);\n+                if (_it->second == pindex) {\n+                    mapBlocksUnlinked.erase(_it);\n                 }\n             }\n         }\n@@ -5550,9 +5550,9 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             }\n             if (!fRejectedParents) {\n                 BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n-                    CInv inv(MSG_TX, txin.prevout.hash);\n-                    pfrom->AddInventoryKnown(inv);\n-                    if (!AlreadyHave(inv)) pfrom->AskFor(inv);\n+                    CInv _inv(MSG_TX, txin.prevout.hash);\n+                    pfrom->AddInventoryKnown(_inv);\n+                    if (!AlreadyHave(_inv)) pfrom->AskFor(_inv);\n                 }\n                 AddOrphanTx(tx, pfrom->GetId());\n \n@@ -6317,9 +6317,9 @@ class CompareInvMempoolOrder\n {\n     CTxMemPool *mp;\n public:\n-    CompareInvMempoolOrder(CTxMemPool *mempool)\n+    CompareInvMempoolOrder(CTxMemPool *_mempool)\n     {\n-        mp = mempool;\n+        mp = _mempool;\n     }\n \n     bool operator()(std::set<uint256>::iterator a, std::set<uint256>::iterator b)"
      },
      {
        "sha": "91a657593a4a6020a0cda262490f9659b3bb92ab",
        "filename": "src/pubkey.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4731cab8fbff51a8178c85d572e2482040278616/src/pubkey.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4731cab8fbff51a8178c85d572e2482040278616/src/pubkey.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.cpp?ref=4731cab8fbff51a8178c85d572e2482040278616",
        "patch": "@@ -264,12 +264,12 @@ void CExtPubKey::Decode(const unsigned char code[BIP32_EXTKEY_SIZE]) {\n     pubkey.Set(code+41, code+BIP32_EXTKEY_SIZE);\n }\n \n-bool CExtPubKey::Derive(CExtPubKey &out, unsigned int nChild) const {\n+bool CExtPubKey::Derive(CExtPubKey &out, unsigned int _nChild) const {\n     out.nDepth = nDepth + 1;\n     CKeyID id = pubkey.GetID();\n     memcpy(&out.vchFingerprint[0], &id, 4);\n-    out.nChild = nChild;\n-    return pubkey.Derive(out.pubkey, out.chaincode, nChild, chaincode);\n+    out.nChild = _nChild;\n+    return pubkey.Derive(out.pubkey, out.chaincode, _nChild, chaincode);\n }\n \n /* static */ bool CPubKey::CheckLowS(const std::vector<unsigned char>& vchSig) {"
      },
      {
        "sha": "3a554877f80002d9fc290a38fbb1ca1e61488039",
        "filename": "src/pubkey.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4731cab8fbff51a8178c85d572e2482040278616/src/pubkey.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4731cab8fbff51a8178c85d572e2482040278616/src/pubkey.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.h?ref=4731cab8fbff51a8178c85d572e2482040278616",
        "patch": "@@ -88,9 +88,9 @@ class CPubKey\n     }\n \n     //! Construct a public key from a byte vector.\n-    CPubKey(const std::vector<unsigned char>& vch)\n+    CPubKey(const std::vector<unsigned char>& _vch)\n     {\n-        Set(vch.begin(), vch.end());\n+        Set(_vch.begin(), _vch.end());\n     }\n \n     //! Simple read-only vector-like interface to the pubkey data."
      },
      {
        "sha": "1fd8de5d80747ed9333af6778613576680051a04",
        "filename": "src/reverselock.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4731cab8fbff51a8178c85d572e2482040278616/src/reverselock.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4731cab8fbff51a8178c85d572e2482040278616/src/reverselock.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/reverselock.h?ref=4731cab8fbff51a8178c85d572e2482040278616",
        "patch": "@@ -13,9 +13,9 @@ class reverse_lock\n {\n public:\n \n-    explicit reverse_lock(Lock& lock) : lock(lock) {\n-        lock.unlock();\n-        lock.swap(templock);\n+    explicit reverse_lock(Lock& _lock) : lock(_lock) {\n+        _lock.unlock();\n+        _lock.swap(templock);\n     }\n \n     ~reverse_lock() {"
      },
      {
        "sha": "91d3197cd0a26c97b595cb7a3bfa88db86111547",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4731cab8fbff51a8178c85d572e2482040278616/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4731cab8fbff51a8178c85d572e2482040278616/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=4731cab8fbff51a8178c85d572e2482040278616",
        "patch": "@@ -497,10 +497,10 @@ UniValue getmempoolancestors(const UniValue& params, bool fHelp)\n         UniValue o(UniValue::VOBJ);\n         BOOST_FOREACH(CTxMemPool::txiter ancestorIt, setAncestors) {\n             const CTxMemPoolEntry &e = *ancestorIt;\n-            const uint256& hash = e.GetTx().GetHash();\n+            const uint256& _hash = e.GetTx().GetHash();\n             UniValue info(UniValue::VOBJ);\n             entryToJSON(info, e);\n-            o.push_back(Pair(hash.ToString(), info));\n+            o.push_back(Pair(_hash.ToString(), info));\n         }\n         return o;\n     }\n@@ -561,10 +561,10 @@ UniValue getmempooldescendants(const UniValue& params, bool fHelp)\n         UniValue o(UniValue::VOBJ);\n         BOOST_FOREACH(CTxMemPool::txiter descendantIt, setDescendants) {\n             const CTxMemPoolEntry &e = *descendantIt;\n-            const uint256& hash = e.GetTx().GetHash();\n+            const uint256& _hash = e.GetTx().GetHash();\n             UniValue info(UniValue::VOBJ);\n             entryToJSON(info, e);\n-            o.push_back(Pair(hash.ToString(), info));\n+            o.push_back(Pair(_hash.ToString(), info));\n         }\n         return o;\n     }"
      },
      {
        "sha": "6b13aa5bab02ac108d431d21b6b666f2bce8ba02",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4731cab8fbff51a8178c85d572e2482040278616/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4731cab8fbff51a8178c85d572e2482040278616/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=4731cab8fbff51a8178c85d572e2482040278616",
        "patch": "@@ -607,8 +607,8 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n \n     UniValue aRules(UniValue::VARR);\n     UniValue vbavailable(UniValue::VOBJ);\n-    for (int i = 0; i < (int)Consensus::MAX_VERSION_BITS_DEPLOYMENTS; ++i) {\n-        Consensus::DeploymentPos pos = Consensus::DeploymentPos(i);\n+    for (int j = 0; j < (int)Consensus::MAX_VERSION_BITS_DEPLOYMENTS; ++j) {\n+        Consensus::DeploymentPos pos = Consensus::DeploymentPos(j);\n         ThresholdState state = VersionBitsState(pindexPrev, consensusParams, pos, versionbitscache);\n         switch (state) {\n             case THRESHOLD_DEFINED:"
      },
      {
        "sha": "538bf39453e39b2c2be787cac724baa74379369b",
        "filename": "src/support/pagelocker.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4731cab8fbff51a8178c85d572e2482040278616/src/support/pagelocker.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4731cab8fbff51a8178c85d572e2482040278616/src/support/pagelocker.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/support/pagelocker.h?ref=4731cab8fbff51a8178c85d572e2482040278616",
        "patch": "@@ -28,11 +28,11 @@ template <class Locker>\n class LockedPageManagerBase\n {\n public:\n-    LockedPageManagerBase(size_t page_size) : page_size(page_size)\n+    LockedPageManagerBase(size_t _page_size) : page_size(_page_size)\n     {\n         // Determine bitmask for extracting page from address\n-        assert(!(page_size & (page_size - 1))); // size must be power of two\n-        page_mask = ~(page_size - 1);\n+        assert(!(_page_size & (_page_size - 1))); // size must be power of two\n+        page_mask = ~(_page_size - 1);\n     }\n \n     ~LockedPageManagerBase()"
      },
      {
        "sha": "ff0adae1d22b7e7d55afb9fd1c54daef82c4bd00",
        "filename": "src/test/crypto_tests.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4731cab8fbff51a8178c85d572e2482040278616/src/test/crypto_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4731cab8fbff51a8178c85d572e2482040278616/src/test/crypto_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/crypto_tests.cpp?ref=4731cab8fbff51a8178c85d572e2482040278616",
        "patch": "@@ -133,13 +133,13 @@ void TestAES128CBC(const std::string &hexkey, const std::string &hexiv, bool pad\n     {\n         std::vector<unsigned char> sub(i, in.end());\n         std::vector<unsigned char> subout(sub.size() + AES_BLOCKSIZE);\n-        int size = enc.Encrypt(&sub[0], sub.size(), &subout[0]);\n-        if (size != 0)\n+        int _size = enc.Encrypt(&sub[0], sub.size(), &subout[0]);\n+        if (_size != 0)\n         {\n-            subout.resize(size);\n+            subout.resize(_size);\n             std::vector<unsigned char> subdecrypted(subout.size());\n-            size = dec.Decrypt(&subout[0], subout.size(), &subdecrypted[0]);\n-            subdecrypted.resize(size);\n+            _size = dec.Decrypt(&subout[0], subout.size(), &subdecrypted[0]);\n+            subdecrypted.resize(_size);\n             BOOST_CHECK(decrypted.size() == in.size());\n             BOOST_CHECK_MESSAGE(subdecrypted == sub, HexStr(subdecrypted) + std::string(\" != \") + HexStr(sub));\n         }\n@@ -174,13 +174,13 @@ void TestAES256CBC(const std::string &hexkey, const std::string &hexiv, bool pad\n     {\n         std::vector<unsigned char> sub(i, in.end());\n         std::vector<unsigned char> subout(sub.size() + AES_BLOCKSIZE);\n-        int size = enc.Encrypt(&sub[0], sub.size(), &subout[0]);\n-        if (size != 0)\n+        int _size = enc.Encrypt(&sub[0], sub.size(), &subout[0]);\n+        if (_size != 0)\n         {\n-            subout.resize(size);\n+            subout.resize(_size);\n             std::vector<unsigned char> subdecrypted(subout.size());\n-            size = dec.Decrypt(&subout[0], subout.size(), &subdecrypted[0]);\n-            subdecrypted.resize(size);\n+            _size = dec.Decrypt(&subout[0], subout.size(), &subdecrypted[0]);\n+            subdecrypted.resize(_size);\n             BOOST_CHECK(decrypted.size() == in.size());\n             BOOST_CHECK_MESSAGE(subdecrypted == sub, HexStr(subdecrypted) + std::string(\" != \") + HexStr(sub));\n         }"
      },
      {
        "sha": "4a7d6e778f5dce8d8e2b6a629db3ca1040988c24",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4731cab8fbff51a8178c85d572e2482040278616/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4731cab8fbff51a8178c85d572e2482040278616/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=4731cab8fbff51a8178c85d572e2482040278616",
        "patch": "@@ -62,11 +62,11 @@ class CAddrManCorrupted : public CAddrManSerializationMock\n     }\n };\n \n-CDataStream AddrmanToStream(CAddrManSerializationMock& addrman)\n+CDataStream AddrmanToStream(CAddrManSerializationMock& _addrman)\n {\n     CDataStream ssPeersIn(SER_DISK, CLIENT_VERSION);\n     ssPeersIn << FLATDATA(Params().MessageStart());\n-    ssPeersIn << addrman;\n+    ssPeersIn << _addrman;\n     std::string str = ssPeersIn.str();\n     vector<unsigned char> vchData(str.begin(), str.end());\n     return CDataStream(vchData, SER_DISK, CLIENT_VERSION);"
      },
      {
        "sha": "dad82baed5cda368e4e062524d72bfdf9b268fce",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4731cab8fbff51a8178c85d572e2482040278616/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4731cab8fbff51a8178c85d572e2482040278616/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=4731cab8fbff51a8178c85d572e2482040278616",
        "patch": "@@ -323,10 +323,10 @@ class TestBuilder\n         return *this;\n     }\n \n-    TestBuilder& Add(const CScript& script)\n+    TestBuilder& Add(const CScript& _script)\n     {\n         DoPush();\n-        spendTx.vin[0].scriptSig += script;\n+        spendTx.vin[0].scriptSig += _script;\n         return *this;\n     }\n \n@@ -343,8 +343,8 @@ class TestBuilder\n         return *this;\n     }\n \n-    TestBuilder& Push(const CScript& script) {\n-         DoPush(std::vector<unsigned char>(script.begin(), script.end()));\n+    TestBuilder& Push(const CScript& _script) {\n+         DoPush(std::vector<unsigned char>(_script.begin(), _script.end()));\n         return *this;\n     }\n "
      },
      {
        "sha": "1ca6b4656661e92b2267a51c8fb4ac0c4dc58de6",
        "filename": "src/torcontrol.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 23,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4731cab8fbff51a8178c85d572e2482040278616/src/torcontrol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4731cab8fbff51a8178c85d572e2482040278616/src/torcontrol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/torcontrol.cpp?ref=4731cab8fbff51a8178c85d572e2482040278616",
        "patch": "@@ -122,8 +122,8 @@ class TorControlConnection\n     static void eventcb(struct bufferevent *bev, short what, void *ctx);\n };\n \n-TorControlConnection::TorControlConnection(struct event_base *base):\n-    base(base), b_conn(0)\n+TorControlConnection::TorControlConnection(struct event_base *_base):\n+    base(_base), b_conn(0)\n {\n }\n \n@@ -194,7 +194,7 @@ void TorControlConnection::eventcb(struct bufferevent *bev, short what, void *ct\n     }\n }\n \n-bool TorControlConnection::Connect(const std::string &target, const ConnectionCB& connected, const ConnectionCB& disconnected)\n+bool TorControlConnection::Connect(const std::string &target, const ConnectionCB& _connected, const ConnectionCB&  _disconnected)\n {\n     if (b_conn)\n         Disconnect();\n@@ -213,8 +213,8 @@ bool TorControlConnection::Connect(const std::string &target, const ConnectionCB\n         return false;\n     bufferevent_setcb(b_conn, TorControlConnection::readcb, NULL, TorControlConnection::eventcb, this);\n     bufferevent_enable(b_conn, EV_READ|EV_WRITE);\n-    this->connected = connected;\n-    this->disconnected = disconnected;\n+    this->connected = _connected;\n+    this->disconnected = _disconnected;\n \n     // Finally, connect to target\n     if (bufferevent_socket_connect(b_conn, (struct sockaddr*)&connect_to_addr, connect_to_addrlen) < 0) {\n@@ -394,18 +394,18 @@ class TorController\n     static void reconnect_cb(evutil_socket_t fd, short what, void *arg);\n };\n \n-TorController::TorController(struct event_base* baseIn, const std::string& target):\n-    base(baseIn),\n-    target(target), conn(base), reconnect(true), reconnect_ev(0),\n+TorController::TorController(struct event_base* _base, const std::string& _target):\n+    base(_base),\n+    target(_target), conn(base), reconnect(true), reconnect_ev(0),\n     reconnect_timeout(RECONNECT_TIMEOUT_START)\n {\n     reconnect_ev = event_new(base, -1, 0, reconnect_cb, this);\n     if (!reconnect_ev)\n         LogPrintf(\"tor: Failed to create event for reconnection: out of memory?\\n\");\n     // Start connection attempts immediately\n-    if (!conn.Connect(target, boost::bind(&TorController::connected_cb, this, _1),\n+    if (!conn.Connect(_target, boost::bind(&TorController::connected_cb, this, _1),\n          boost::bind(&TorController::disconnected_cb, this, _1) )) {\n-        LogPrintf(\"tor: Initiating connection to Tor control port %s failed\\n\", target);\n+        LogPrintf(\"tor: Initiating connection to Tor control port %s failed\\n\", _target);\n     }\n     // Read service private key if cached\n     std::pair<bool,std::string> pkf = ReadBinaryFile(GetPrivateKeyFile());\n@@ -426,7 +426,7 @@ TorController::~TorController()\n     }\n }\n \n-void TorController::add_onion_cb(TorControlConnection& conn, const TorControlReply& reply)\n+void TorController::add_onion_cb(TorControlConnection& _conn, const TorControlReply& reply)\n {\n     if (reply.code == 250) {\n         LogPrint(\"tor\", \"tor: ADD_ONION successful\\n\");\n@@ -454,7 +454,7 @@ void TorController::add_onion_cb(TorControlConnection& conn, const TorControlRep\n     }\n }\n \n-void TorController::auth_cb(TorControlConnection& conn, const TorControlReply& reply)\n+void TorController::auth_cb(TorControlConnection& _conn, const TorControlReply& reply)\n {\n     if (reply.code == 250) {\n         LogPrint(\"tor\", \"tor: Authentication successful\\n\");\n@@ -474,7 +474,7 @@ void TorController::auth_cb(TorControlConnection& conn, const TorControlReply& r\n         // Request hidden service, redirect port.\n         // Note that the 'virtual' port doesn't have to be the same as our internal port, but this is just a convenient\n         // choice.  TODO; refactor the shutdown sequence some day.\n-        conn.Command(strprintf(\"ADD_ONION %s Port=%i,127.0.0.1:%i\", private_key, GetListenPort(), GetListenPort()),\n+        _conn.Command(strprintf(\"ADD_ONION %s Port=%i,127.0.0.1:%i\", private_key, GetListenPort(), GetListenPort()),\n             boost::bind(&TorController::add_onion_cb, this, _1, _2));\n     } else {\n         LogPrintf(\"tor: Authentication failed\\n\");\n@@ -508,7 +508,7 @@ static std::vector<uint8_t> ComputeResponse(const std::string &key, const std::v\n     return computedHash;\n }\n \n-void TorController::authchallenge_cb(TorControlConnection& conn, const TorControlReply& reply)\n+void TorController::authchallenge_cb(TorControlConnection& _conn, const TorControlReply& reply)\n {\n     if (reply.code == 250) {\n         LogPrint(\"tor\", \"tor: SAFECOOKIE authentication challenge successful\\n\");\n@@ -530,7 +530,7 @@ void TorController::authchallenge_cb(TorControlConnection& conn, const TorContro\n             }\n \n             std::vector<uint8_t> computedClientHash = ComputeResponse(TOR_SAFE_CLIENTKEY, cookie, clientNonce, serverNonce);\n-            conn.Command(\"AUTHENTICATE \" + HexStr(computedClientHash), boost::bind(&TorController::auth_cb, this, _1, _2));\n+            _conn.Command(\"AUTHENTICATE \" + HexStr(computedClientHash), boost::bind(&TorController::auth_cb, this, _1, _2));\n         } else {\n             LogPrintf(\"tor: Invalid reply to AUTHCHALLENGE\\n\");\n         }\n@@ -539,7 +539,7 @@ void TorController::authchallenge_cb(TorControlConnection& conn, const TorContro\n     }\n }\n \n-void TorController::protocolinfo_cb(TorControlConnection& conn, const TorControlReply& reply)\n+void TorController::protocolinfo_cb(TorControlConnection& _conn, const TorControlReply& reply)\n {\n     if (reply.code == 250) {\n         std::set<std::string> methods;\n@@ -579,23 +579,23 @@ void TorController::protocolinfo_cb(TorControlConnection& conn, const TorControl\n             if (methods.count(\"HASHEDPASSWORD\")) {\n                 LogPrint(\"tor\", \"tor: Using HASHEDPASSWORD authentication\\n\");\n                 boost::replace_all(torpassword, \"\\\"\", \"\\\\\\\"\");\n-                conn.Command(\"AUTHENTICATE \\\"\" + torpassword + \"\\\"\", boost::bind(&TorController::auth_cb, this, _1, _2));\n+                _conn.Command(\"AUTHENTICATE \\\"\" + torpassword + \"\\\"\", boost::bind(&TorController::auth_cb, this, _1, _2));\n             } else {\n                 LogPrintf(\"tor: Password provided with -torpassword, but HASHEDPASSWORD authentication is not available\\n\");\n             }\n         } else if (methods.count(\"NULL\")) {\n             LogPrint(\"tor\", \"tor: Using NULL authentication\\n\");\n-            conn.Command(\"AUTHENTICATE\", boost::bind(&TorController::auth_cb, this, _1, _2));\n+            _conn.Command(\"AUTHENTICATE\", boost::bind(&TorController::auth_cb, this, _1, _2));\n         } else if (methods.count(\"SAFECOOKIE\")) {\n             // Cookie: hexdump -e '32/1 \"%02x\"\"\\n\"'  ~/.tor/control_auth_cookie\n             LogPrint(\"tor\", \"tor: Using SAFECOOKIE authentication, reading cookie authentication from %s\\n\", cookiefile);\n             std::pair<bool,std::string> status_cookie = ReadBinaryFile(cookiefile, TOR_COOKIE_SIZE);\n             if (status_cookie.first && status_cookie.second.size() == TOR_COOKIE_SIZE) {\n-                // conn.Command(\"AUTHENTICATE \" + HexStr(status_cookie.second), boost::bind(&TorController::auth_cb, this, _1, _2));\n+                // _conn.Command(\"AUTHENTICATE \" + HexStr(status_cookie.second), boost::bind(&TorController::auth_cb, this, _1, _2));\n                 cookie = std::vector<uint8_t>(status_cookie.second.begin(), status_cookie.second.end());\n                 clientNonce = std::vector<uint8_t>(TOR_NONCE_SIZE, 0);\n                 GetRandBytes(&clientNonce[0], TOR_NONCE_SIZE);\n-                conn.Command(\"AUTHCHALLENGE SAFECOOKIE \" + HexStr(clientNonce), boost::bind(&TorController::authchallenge_cb, this, _1, _2));\n+                _conn.Command(\"AUTHCHALLENGE SAFECOOKIE \" + HexStr(clientNonce), boost::bind(&TorController::authchallenge_cb, this, _1, _2));\n             } else {\n                 if (status_cookie.first) {\n                     LogPrintf(\"tor: Authentication cookie %s is not exactly %i bytes, as is required by the spec\\n\", cookiefile, TOR_COOKIE_SIZE);\n@@ -613,15 +613,15 @@ void TorController::protocolinfo_cb(TorControlConnection& conn, const TorControl\n     }\n }\n \n-void TorController::connected_cb(TorControlConnection& conn)\n+void TorController::connected_cb(TorControlConnection& _conn)\n {\n     reconnect_timeout = RECONNECT_TIMEOUT_START;\n     // First send a PROTOCOLINFO command to figure out what authentication is expected\n-    if (!conn.Command(\"PROTOCOLINFO 1\", boost::bind(&TorController::protocolinfo_cb, this, _1, _2)))\n+    if (!_conn.Command(\"PROTOCOLINFO 1\", boost::bind(&TorController::protocolinfo_cb, this, _1, _2)))\n         LogPrintf(\"tor: Error sending initial protocolinfo command\\n\");\n }\n \n-void TorController::disconnected_cb(TorControlConnection& conn)\n+void TorController::disconnected_cb(TorControlConnection& _conn)\n {\n     // Stop advertising service when disconnected\n     if (service.IsValid())"
      },
      {
        "sha": "3586123d3e00dd48539fe839c6116233c154a322",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4731cab8fbff51a8178c85d572e2482040278616/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4731cab8fbff51a8178c85d572e2482040278616/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=4731cab8fbff51a8178c85d572e2482040278616",
        "patch": "@@ -1116,17 +1116,17 @@ void CTxMemPool::TrimToSize(size_t sizelimit, std::vector<uint256>* pvNoSpendsRe\n         std::vector<CTransaction> txn;\n         if (pvNoSpendsRemaining) {\n             txn.reserve(stage.size());\n-            BOOST_FOREACH(txiter it, stage)\n-                txn.push_back(it->GetTx());\n+            BOOST_FOREACH(txiter iter, stage)\n+                txn.push_back(iter->GetTx());\n         }\n         RemoveStaged(stage, false);\n         if (pvNoSpendsRemaining) {\n             BOOST_FOREACH(const CTransaction& tx, txn) {\n                 BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n                     if (exists(txin.prevout.hash))\n                         continue;\n-                    auto it = mapNextTx.lower_bound(COutPoint(txin.prevout.hash, 0));\n-                    if (it == mapNextTx.end() || it->first->hash != txin.prevout.hash)\n+                    auto iter = mapNextTx.lower_bound(COutPoint(txin.prevout.hash, 0));\n+                    if (iter == mapNextTx.end() || iter->first->hash != txin.prevout.hash)\n                         pvNoSpendsRemaining->push_back(txin.prevout.hash);\n                 }\n             }"
      },
      {
        "sha": "85219c24c8d78e6f69ca4a62151bb3d5865428f4",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4731cab8fbff51a8178c85d572e2482040278616/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4731cab8fbff51a8178c85d572e2482040278616/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=4731cab8fbff51a8178c85d572e2482040278616",
        "patch": "@@ -401,8 +401,8 @@ set<uint256> CWallet::GetConflicts(const uint256& txid) const\n         if (mapTxSpends.count(txin.prevout) <= 1)\n             continue;  // No conflict if zero or one spends\n         range = mapTxSpends.equal_range(txin.prevout);\n-        for (TxSpends::const_iterator it = range.first; it != range.second; ++it)\n-            result.insert(it->second);\n+        for (TxSpends::const_iterator _it = range.first; _it != range.second; ++_it)\n+            result.insert(_it->second);\n     }\n     return result;\n }\n@@ -1281,9 +1281,9 @@ int CWalletTx::GetRequestCount() const\n                 // How about the block it's in?\n                 if (nRequests == 0 && !hashUnset())\n                 {\n-                    map<uint256, int>::const_iterator mi = pwallet->mapRequestCount.find(hashBlock);\n-                    if (mi != pwallet->mapRequestCount.end())\n-                        nRequests = (*mi).second;\n+                    map<uint256, int>::const_iterator _mi = pwallet->mapRequestCount.find(hashBlock);\n+                    if (_mi != pwallet->mapRequestCount.end())\n+                        nRequests = (*_mi).second;\n                     else\n                         nRequests = 1; // If it's in someone else's block it must have got out\n                 }\n@@ -2938,17 +2938,17 @@ set< set<CTxDestination> > CWallet::GetAddressGroupings()\n \n     set< set<CTxDestination>* > uniqueGroupings; // a set of pointers to groups of addresses\n     map< CTxDestination, set<CTxDestination>* > setmap;  // map addresses to the unique group containing it\n-    BOOST_FOREACH(set<CTxDestination> grouping, groupings)\n+    BOOST_FOREACH(set<CTxDestination> _grouping, groupings)\n     {\n         // make a set of all the groups hit by this new group\n         set< set<CTxDestination>* > hits;\n         map< CTxDestination, set<CTxDestination>* >::iterator it;\n-        BOOST_FOREACH(CTxDestination address, grouping)\n+        BOOST_FOREACH(CTxDestination address, _grouping)\n             if ((it = setmap.find(address)) != setmap.end())\n                 hits.insert((*it).second);\n \n         // merge all hit groups into a new single group and delete old groups\n-        set<CTxDestination>* merged = new set<CTxDestination>(grouping);\n+        set<CTxDestination>* merged = new set<CTxDestination>(_grouping);\n         BOOST_FOREACH(set<CTxDestination>* hit, hits)\n         {\n             merged->insert(hit->begin(), hit->end());"
      }
    ]
  }
]