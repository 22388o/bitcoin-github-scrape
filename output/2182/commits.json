[
  {
    "sha": "ce99358f4aa4182d6983fde3e33a8fdbe1dfe4c3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZTk5MzU4ZjRhYTQxODJkNjk4M2ZkZTNlMzNhOGZkYmUxZGZlNGMz",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-01-14T21:52:33Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-01-15T14:10:22Z"
      },
      "message": "Remove IsFromMe() check in CTxMemPool::accept()\n\nFixes issue #2178 : attacker could penny-flood with invalid-signature\ntransactions to deduce which addresses belonged to your node.\n\nI'm committing this early for code review; I still need to write up\na test plan.\n\nExecutive summary of fix: check all transactions received from the network\nfor penny-flood rate-limiting before adding to the memory pool. But do NOT\nratelimit transactions added to the memory pool:\n  - because of blockchain reorgs\n  - stored in the wallet and added at startup\n  - sent from the GUI or one of the send* RPC commands (CWallet::CommitTransaction)\n\nThe limit-free-transactions code really should be a method on CNode, with\ncounters per-peer. But that is a bigger change for another day.",
      "tree": {
        "sha": "3e7e864daea2f64627df70e7413dd82cd3be0de9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3e7e864daea2f64627df70e7413dd82cd3be0de9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ce99358f4aa4182d6983fde3e33a8fdbe1dfe4c3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce99358f4aa4182d6983fde3e33a8fdbe1dfe4c3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ce99358f4aa4182d6983fde3e33a8fdbe1dfe4c3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce99358f4aa4182d6983fde3e33a8fdbe1dfe4c3/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c83c3cbe9740cee7c168a93e26d6448f78170595",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c83c3cbe9740cee7c168a93e26d6448f78170595",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c83c3cbe9740cee7c168a93e26d6448f78170595"
      }
    ],
    "stats": {
      "total": 63,
      "additions": 31,
      "deletions": 32
    },
    "files": [
      {
        "sha": "f0e7ac13711a56dab9240b89d72718818a0b8f14",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 27,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ce99358f4aa4182d6983fde3e33a8fdbe1dfe4c3/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ce99358f4aa4182d6983fde3e33a8fdbe1dfe4c3/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=ce99358f4aa4182d6983fde3e33a8fdbe1dfe4c3",
        "patch": "@@ -627,7 +627,7 @@ void CTxMemPool::pruneSpent(const uint256 &hashTx, CCoins &coins)\n     }\n }\n \n-bool CTxMemPool::accept(CTransaction &tx, bool fCheckInputs,\n+bool CTxMemPool::accept(CTransaction &tx, bool fCheckInputs, bool fLimitFree,\n                         bool* pfMissingInputs)\n {\n     if (pfMissingInputs)\n@@ -733,33 +733,32 @@ bool CTxMemPool::accept(CTransaction &tx, bool fCheckInputs,\n \n         // Don't accept it if it can't get into a block\n         int64 txMinFee = tx.GetMinFee(1000, true, GMF_RELAY);\n-        if (nFees < txMinFee)\n+        if (fLimitFree && nFees < txMinFee)\n             return error(\"CTxMemPool::accept() : not enough fees %s, %\"PRI64d\" < %\"PRI64d,\n                          hash.ToString().c_str(),\n                          nFees, txMinFee);\n \n         // Continuously rate-limit free transactions\n         // This mitigates 'penny-flooding' -- sending thousands of free transactions just to\n         // be annoying or make others' transactions take longer to confirm.\n-        if (nFees < MIN_RELAY_TX_FEE)\n+        if (fLimitFree && nFees < MIN_RELAY_TX_FEE)\n         {\n-            static CCriticalSection cs;\n             static double dFreeCount;\n             static int64 nLastTime;\n             int64 nNow = GetTime();\n \n-            {\n-                // Use an exponentially decaying ~10-minute window:\n-                dFreeCount *= pow(1.0 - 1.0/600.0, (double)(nNow - nLastTime));\n-                nLastTime = nNow;\n-                // -limitfreerelay unit is thousand-bytes-per-minute\n-                // At default rate it would take over a month to fill 1GB\n-                if (dFreeCount > GetArg(\"-limitfreerelay\", 15)*10*1000 && !IsFromMe(tx))\n-                    return error(\"CTxMemPool::accept() : free transaction rejected by rate limiter\");\n-                if (fDebug)\n-                    printf(\"Rate limit dFreeCount: %g => %g\\n\", dFreeCount, dFreeCount+nSize);\n-                dFreeCount += nSize;\n-            }\n+            LOCK(cs);\n+\n+            // Use an exponentially decaying ~10-minute window:\n+            dFreeCount *= pow(1.0 - 1.0/600.0, (double)(nNow - nLastTime));\n+            nLastTime = nNow;\n+            // -limitfreerelay unit is thousand-bytes-per-minute\n+            // At default rate it would take over a month to fill 1GB\n+            if (dFreeCount > GetArg(\"-limitfreerelay\", 15)*10*1000)\n+                return error(\"CTxMemPool::accept() : free transaction rejected by rate limiter\");\n+            if (fDebug)\n+                printf(\"Rate limit dFreeCount: %g => %g\\n\", dFreeCount, dFreeCount+nSize);\n+            dFreeCount += nSize;\n         }\n \n         // Check against previous transactions\n@@ -792,9 +791,9 @@ bool CTxMemPool::accept(CTransaction &tx, bool fCheckInputs,\n     return true;\n }\n \n-bool CTransaction::AcceptToMemoryPool(bool fCheckInputs, bool* pfMissingInputs)\n+bool CTransaction::AcceptToMemoryPool(bool fCheckInputs, bool fLimitFree, bool* pfMissingInputs)\n {\n-    return mempool.accept(*this, fCheckInputs, pfMissingInputs);\n+    return mempool.accept(*this, fCheckInputs, fLimitFree, pfMissingInputs);\n }\n \n bool CTxMemPool::addUnchecked(const uint256& hash, CTransaction &tx)\n@@ -905,9 +904,9 @@ int CMerkleTx::GetBlocksToMaturity() const\n }\n \n \n-bool CMerkleTx::AcceptToMemoryPool(bool fCheckInputs)\n+bool CMerkleTx::AcceptToMemoryPool(bool fCheckInputs, bool fLimitFree)\n {\n-    return CTransaction::AcceptToMemoryPool(fCheckInputs);\n+    return CTransaction::AcceptToMemoryPool(fCheckInputs, fLimitFree);\n }\n \n \n@@ -923,10 +922,10 @@ bool CWalletTx::AcceptWalletTransaction(bool fCheckInputs)\n             {\n                 uint256 hash = tx.GetHash();\n                 if (!mempool.exists(hash) && pcoinsTip->HaveCoins(hash))\n-                    tx.AcceptToMemoryPool(fCheckInputs);\n+                    tx.AcceptToMemoryPool(fCheckInputs, false);\n             }\n         }\n-        return AcceptToMemoryPool(fCheckInputs);\n+        return AcceptToMemoryPool(fCheckInputs, false);\n     }\n     return false;\n }\n@@ -1797,7 +1796,7 @@ bool SetBestChain(CBlockIndex* pindexNew)\n \n     // Resurrect memory transactions that were in the disconnected branch\n     BOOST_FOREACH(CTransaction& tx, vResurrect)\n-        tx.AcceptToMemoryPool();\n+        tx.AcceptToMemoryPool(true, false);\n \n     // Delete redundant memory transactions that are in the connected branch\n     BOOST_FOREACH(CTransaction& tx, vDelete) {\n@@ -3181,7 +3180,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         pfrom->AddInventoryKnown(inv);\n \n         bool fMissingInputs = false;\n-        if (tx.AcceptToMemoryPool(true, &fMissingInputs))\n+        if (tx.AcceptToMemoryPool(true, true, &fMissingInputs))\n         {\n             SyncWithWallets(inv.hash, tx, NULL, true);\n             RelayMessage(inv, vMsg);\n@@ -3203,7 +3202,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n                     CInv inv(MSG_TX, tx.GetHash());\n                     bool fMissingInputs2 = false;\n \n-                    if (tx.AcceptToMemoryPool(true, &fMissingInputs2))\n+                    if (tx.AcceptToMemoryPool(true, true, &fMissingInputs2))\n                     {\n                         printf(\"   accepted orphan tx %s\\n\", inv.hash.ToString().substr(0,10).c_str());\n                         SyncWithWallets(inv.hash, tx, NULL, true);\n@@ -3214,9 +3213,9 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n                     }\n                     else if (!fMissingInputs2)\n                     {\n-                        // invalid orphan\n+                        // invalid or too-little-fee orphan\n                         vEraseQueue.push_back(inv.hash);\n-                        printf(\"   removed invalid orphan tx %s\\n\", inv.hash.ToString().substr(0,10).c_str());\n+                        printf(\"   removed orphan tx %s\\n\", inv.hash.ToString().substr(0,10).c_str());\n                     }\n                 }\n             }"
      },
      {
        "sha": "44fa5c1de3567970f20fa9bc37a8722afe02124c",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ce99358f4aa4182d6983fde3e33a8fdbe1dfe4c3/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ce99358f4aa4182d6983fde3e33a8fdbe1dfe4c3/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=ce99358f4aa4182d6983fde3e33a8fdbe1dfe4c3",
        "patch": "@@ -649,7 +649,7 @@ class CTransaction\n     bool CheckTransaction() const;\n \n     // Try to accept this transaction into the memory pool\n-    bool AcceptToMemoryPool(bool fCheckInputs=true, bool* pfMissingInputs=NULL);\n+    bool AcceptToMemoryPool(bool fCheckInputs=true, bool fLimitFree = true, bool* pfMissingInputs=NULL);\n \n protected:\n     static const CTxOut &GetOutputFor(const CTxIn& input, CCoinsViewCache& mapInputs);\n@@ -1103,7 +1103,7 @@ class CMerkleTx : public CTransaction\n     int GetDepthInMainChain() const { CBlockIndex *pindexRet; return GetDepthInMainChain(pindexRet); }\n     bool IsInMainChain() const { return GetDepthInMainChain() > 0; }\n     int GetBlocksToMaturity() const;\n-    bool AcceptToMemoryPool(bool fCheckInputs=true);\n+    bool AcceptToMemoryPool(bool fCheckInputs=true, bool fLimitFree=true);\n };\n \n \n@@ -1882,7 +1882,7 @@ class CTxMemPool\n     std::map<uint256, CTransaction> mapTx;\n     std::map<COutPoint, CInPoint> mapNextTx;\n \n-    bool accept(CTransaction &tx, bool fCheckInputs, bool* pfMissingInputs);\n+    bool accept(CTransaction &tx, bool fCheckInputs, bool fLimitFree, bool* pfMissingInputs);\n     bool addUnchecked(const uint256& hash, CTransaction &tx);\n     bool remove(const CTransaction &tx, bool fRecursive = false);\n     bool removeConflicts(const CTransaction &tx);"
      },
      {
        "sha": "8117a1ff469be204343c2479c767ea14ad5a3c58",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ce99358f4aa4182d6983fde3e33a8fdbe1dfe4c3/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ce99358f4aa4182d6983fde3e33a8fdbe1dfe4c3/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=ce99358f4aa4182d6983fde3e33a8fdbe1dfe4c3",
        "patch": "@@ -546,7 +546,7 @@ Value sendrawtransaction(const Array& params, bool fHelp)\n         fHave = view.GetCoins(hashTx, existingCoins);\n         if (!fHave) {\n             // push to local node\n-            if (!tx.AcceptToMemoryPool())\n+            if (!tx.AcceptToMemoryPool(true, false))\n                 throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX rejected\");\n         }\n     }"
      },
      {
        "sha": "0a320b6f8e42f31b0b7818fef1886c79b9b204d9",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ce99358f4aa4182d6983fde3e33a8fdbe1dfe4c3/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ce99358f4aa4182d6983fde3e33a8fdbe1dfe4c3/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=ce99358f4aa4182d6983fde3e33a8fdbe1dfe4c3",
        "patch": "@@ -1279,7 +1279,7 @@ bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey)\n         mapRequestCount[wtxNew.GetHash()] = 0;\n \n         // Broadcast\n-        if (!wtxNew.AcceptToMemoryPool())\n+        if (!wtxNew.AcceptToMemoryPool(true, false))\n         {\n             // This must not fail. The transaction has already been signed and recorded.\n             printf(\"CommitTransaction() : Error: Transaction not valid\");"
      }
    ]
  },
  {
    "sha": "9c9f5c1303dff0c010e9e68ba7b5619330edfb68",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YzlmNWMxMzAzZGZmMGMwMTBlOWU2OGJhN2I1NjE5MzMwZWRmYjY4",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-01-24T01:24:10Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-01-24T01:24:10Z"
      },
      "message": "Let limitfreerelay=0 reject ALL free transactions",
      "tree": {
        "sha": "8efd80076c690e597ee8b07f8597e6846d0b3ebb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8efd80076c690e597ee8b07f8597e6846d0b3ebb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9c9f5c1303dff0c010e9e68ba7b5619330edfb68",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c9f5c1303dff0c010e9e68ba7b5619330edfb68",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9c9f5c1303dff0c010e9e68ba7b5619330edfb68",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c9f5c1303dff0c010e9e68ba7b5619330edfb68/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ce99358f4aa4182d6983fde3e33a8fdbe1dfe4c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce99358f4aa4182d6983fde3e33a8fdbe1dfe4c3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ce99358f4aa4182d6983fde3e33a8fdbe1dfe4c3"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "e519332da60f2d8957de4c0307386a4313171957",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c9f5c1303dff0c010e9e68ba7b5619330edfb68/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c9f5c1303dff0c010e9e68ba7b5619330edfb68/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=9c9f5c1303dff0c010e9e68ba7b5619330edfb68",
        "patch": "@@ -754,7 +754,7 @@ bool CTxMemPool::accept(CTransaction &tx, bool fCheckInputs, bool fLimitFree,\n             nLastTime = nNow;\n             // -limitfreerelay unit is thousand-bytes-per-minute\n             // At default rate it would take over a month to fill 1GB\n-            if (dFreeCount > GetArg(\"-limitfreerelay\", 15)*10*1000)\n+            if (dFreeCount >= GetArg(\"-limitfreerelay\", 15)*10*1000)\n                 return error(\"CTxMemPool::accept() : free transaction rejected by rate limiter\");\n             if (fDebug)\n                 printf(\"Rate limit dFreeCount: %g => %g\\n\", dFreeCount, dFreeCount+nSize);"
      }
    ]
  }
]