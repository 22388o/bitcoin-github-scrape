sipa,2020-12-07 22:55:09,"@instagibbs @ajtowns Ping, it seems this may be fixing a regression caused by #17775 (see #20579).",https://github.com/bitcoin/bitcoin/pull/20595#issuecomment-740230600,740230600,
instagibbs,2020-12-08 02:29:43,"Can you grab the example in the issue(or generate one) as a regression test?\n\nOn Tue, Dec 8, 2020, 7:37 AM Pieter Wuille <notifications@github.com> wrote:\n\n> *@sipa* commented on this pull request.\n> ------------------------------\n>\n> In src/core_read.cpp\n> <https://github.com/bitcoin/bitcoin/pull/20595#discussion_r537917709>:\n>\n> >          } catch (const std::exception&) {\n>          ",https://github.com/bitcoin/bitcoin/pull/20595#issuecomment-740319838,740319838,
MarcoFalke,2020-12-08 14:31:58,It might be possible to harvest seeds from the decode_tx fuzz test which has good coverage for this: https://drahtbot.space/host_reports/DrahtBot/reports/coverage_fuzz/sipa/bitcoin/451556858a23d81f/fuzz.coverage/src/core_read.cpp.gcov.html,https://github.com/bitcoin/bitcoin/pull/20595#issuecomment-740654420,740654420,
sipa,2020-12-08 21:23:58,"Restructured the code a bit, and added comments. Also added a regression test based on the example from #20579.\n\n@MarcoFalke I wrote a fuzzer to find transactions that decode incorrectly (see https://github.com/sipa/bitcoin/tree/202012_fancy_tx_hex_decode_fuzz). Turns out it's not very hard if you feed it a few real transactions as seeds, but they all look very weird. Using this we could proba",https://github.com/bitcoin/bitcoin/pull/20595#issuecomment-741055296,741055296,
achow101,2020-12-09 16:40:06,Code review ACK 0f949cde3dff15170db7930b0f7345ff995c267d,https://github.com/bitcoin/bitcoin/pull/20595#issuecomment-741894238,741894238,
jonatack,2020-12-10 00:13:05,"Tested ACK 0f949cde3dff15170db7930b0f7345ff995c267d\n\nThe new naming, comments, and code organisation are much improved.\n\n<details><summary>Toyed with placing the <code>CheckTxScriptsSanity</code> calls right after setting each <code>ok_{extended,legacy}</code> but it's less readable.</summary><p>\n\n```diff\ndiff --git a/src/core_read.cpp b/src/core_read.cpp\nindex 7687a86185..fe64b7b9",https://github.com/bitcoin/bitcoin/pull/20595#issuecomment-742144823,742144823,
laanwj,2020-12-10 10:18:09,"Code review ACK 0f949cde3dff15170db7930b0f7345ff995c267d\n\n> The new naming, comments, and code organisation are much improved.\n\nYes the comments definitely help clarify why the function is like this.",https://github.com/bitcoin/bitcoin/pull/20595#issuecomment-742425892,742425892,
MarcoFalke,2020-12-10 10:50:16,Backported in #20612,https://github.com/bitcoin/bitcoin/pull/20595#issuecomment-742443335,742443335,
jonatack,2020-12-07 23:07:16,"naming nit: not sure if this is better, but maybe `wtx`, `tx`, `wtx_ok`, `tx_ok`",https://github.com/bitcoin/bitcoin/pull/20595#discussion_r537901446,537901446,src/core_read.cpp
jonatack,2020-12-07 23:14:28,"nit, ""successfully"" (also line 132)",https://github.com/bitcoin/bitcoin/pull/20595#discussion_r537904852,537904852,src/core_read.cpp
sipa,2020-12-07 23:37:29,"I've renamed everything to {tx,ok}_{extended,legacy}, because extended serialization doesn't imply the result actually is a segwit transaction - it just means prefer the interpretation of extended serialization when there is ambiguity.",https://github.com/bitcoin/bitcoin/pull/20595#discussion_r537917643,537917643,src/core_read.cpp
sipa,2020-12-07 23:37:37,Fixed.,https://github.com/bitcoin/bitcoin/pull/20595#discussion_r537917709,537917709,src/core_read.cpp
ajtowns,2020-12-08 06:25:35,"The following `if` statement also handles the case where both deserializations succeeded but neither passed sanity, which the comments skip.\n\nMaybe\n\n```c++\n// If both deserializations succeeded, prefer the one for which CheckTxScriptsSanity returns true.\n// If that's the case for both ** or neither **, prefer the extended one\n// If only one deserialization succeeded, use that one.\n",https://github.com/bitcoin/bitcoin/pull/20595#discussion_r538066861,538066861,src/core_read.cpp
ajtowns,2020-12-08 06:28:40,"This potentially doubles the memory usage of `DecodeTx` (previously, up to 4MB for each of `tx`, `tx_data`; now an additional 4MB for each of `tx_extended` and `tx_legacy`). Is that a potential problem anywhere? (I don't think it is, but...)",https://github.com/bitcoin/bitcoin/pull/20595#discussion_r538068126,538068126,src/core_read.cpp
MarcoFalke,2020-12-08 07:03:47,"The comment implies that only one deserialization has succeeded if this line is reached, which is not true\n\n```suggestion\n    // If both deserializations succeeded, prefer the extended one. Otherwise use the one that succeeded deserialization.\n```",https://github.com/bitcoin/bitcoin/pull/20595#discussion_r538084403,538084403,src/core_read.cpp
MarcoFalke,2020-12-08 07:11:24,"It is only called by the user. It would be a bug if the legacy encoding was tried for any ""real"" transactions.",https://github.com/bitcoin/bitcoin/pull/20595#discussion_r538087794,538087794,src/core_read.cpp
MarcoFalke,2020-12-08 08:54:21,"For code-readability I prefer the version of how the pr is currently written. The first two options are too nested to be readable.\nIf the goal is to skip a useless decoding in the early-return case (`Sanity(tx_ext)`), I prefer your third option.",https://github.com/bitcoin/bitcoin/pull/20595#discussion_r538150517,538150517,src/core_read.cpp
sipa,2020-12-08 21:14:20,"I've added a number of comments, and restructured a bit along the lines of the 3rd option.",https://github.com/bitcoin/bitcoin/pull/20595#discussion_r538812110,538812110,src/core_read.cpp
sipa,2020-12-08 21:14:47,"Yeah, I don't think this is a concern. This function is only used when doing hex decoding.",https://github.com/bitcoin/bitcoin/pull/20595#discussion_r538812333,538812333,src/core_read.cpp
sipa,2020-12-08 21:15:02,Rewrote the comments.,https://github.com/bitcoin/bitcoin/pull/20595#discussion_r538812505,538812505,src/core_read.cpp
