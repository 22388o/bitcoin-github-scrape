[
  {
    "sha": "39c42c442044aef611d03ee7053d2dd6df63deb7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOWM0MmM0NDIwNDRhZWY2MTFkMDNlZTcwNTNkMmRkNmRmNjNkZWI3",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-12-07T22:37:09Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-12-08T18:11:02Z"
      },
      "message": "Improve heuristic hex transaction decoding\n\nWhenever both encodings are permitted, try both, and if only one succeeds,\nreturn that one. Otherwise prefer the one for which the heuristic sanity\ncheck passes. If that is the case for neither or for both, return the\nextended-permitting deserialization.",
      "tree": {
        "sha": "bd0eb7fb7fe8730b69f6faff979dd7023effcd52",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bd0eb7fb7fe8730b69f6faff979dd7023effcd52"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/39c42c442044aef611d03ee7053d2dd6df63deb7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/39c42c442044aef611d03ee7053d2dd6df63deb7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/39c42c442044aef611d03ee7053d2dd6df63deb7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/39c42c442044aef611d03ee7053d2dd6df63deb7/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e98d1d674091681f88c5872f3e3923e37ce81b00",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e98d1d674091681f88c5872f3e3923e37ce81b00",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e98d1d674091681f88c5872f3e3923e37ce81b00"
      }
    ],
    "stats": {
      "total": 59,
      "additions": 50,
      "deletions": 9
    },
    "files": [
      {
        "sha": "7687a86185ab16c5c0564bad655871f154e32fd4",
        "filename": "src/core_read.cpp",
        "status": "modified",
        "additions": 50,
        "deletions": 9,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/39c42c442044aef611d03ee7053d2dd6df63deb7/src/core_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/39c42c442044aef611d03ee7053d2dd6df63deb7/src/core_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_read.cpp?ref=39c42c442044aef611d03ee7053d2dd6df63deb7",
        "patch": "@@ -126,31 +126,72 @@ static bool CheckTxScriptsSanity(const CMutableTransaction& tx)\n \n static bool DecodeTx(CMutableTransaction& tx, const std::vector<unsigned char>& tx_data, bool try_no_witness, bool try_witness)\n {\n+    // General strategy:\n+    // - Decode both with extended serialization (which interprets the 0x0001 tag as a marker for\n+    //   the presense of witnesses) and with legacy serialization (which interprets the tag as a\n+    //   0-input 1-output incomplete transaction).\n+    //   - Restricted by try_no_witness (which disables legacy if false) and try_witness (which\n+    //     disables extended if false).\n+    //   - Ignore serializations that do not fully consume the hex string.\n+    // - If neither succeeds, fail.\n+    // - If only one succeeds, return that one.\n+    // - If both decode attempts succeed:\n+    //   - If only one passes the CheckTxScriptsSanity check, return that one.\n+    //   - If neither or both pass CheckTxScriptsSanity, return the extended one.\n+\n+    CMutableTransaction tx_extended, tx_legacy;\n+    bool ok_extended = false, ok_legacy = false;\n+\n+    // Try decoding with extended serialization support, and remember if the result successfully\n+    // consumes the entire input.\n     if (try_witness) {\n         CDataStream ssData(tx_data, SER_NETWORK, PROTOCOL_VERSION);\n         try {\n-            ssData >> tx;\n-            // If transaction looks sane, we don't try other mode even if requested\n-            if (ssData.empty() && (!try_no_witness || CheckTxScriptsSanity(tx))) {\n-                return true;\n-            }\n+            ssData >> tx_extended;\n+            if (ssData.empty()) ok_extended = true;\n         } catch (const std::exception&) {\n             // Fall through.\n         }\n     }\n \n+    // Optimization: if extended decoding succeeded and the result passes CheckTxScriptsSanity,\n+    // don't bother decoding the other way.\n+    if (ok_extended && CheckTxScriptsSanity(tx_extended)) {\n+        tx = std::move(tx_extended);\n+        return true;\n+    }\n+\n+    // Try decoding with legacy serialization, and remember if the result successfully consumes the entire input.\n     if (try_no_witness) {\n         CDataStream ssData(tx_data, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS);\n         try {\n-            ssData >> tx;\n-            if (ssData.empty()) {\n-                return true;\n-            }\n+            ssData >> tx_legacy;\n+            if (ssData.empty()) ok_legacy = true;\n         } catch (const std::exception&) {\n             // Fall through.\n         }\n     }\n \n+    // If legacy decoding succeeded and passes CheckTxScriptsSanity, that's our answer, as we know\n+    // at this point that extended decoding either failed or doesn't pass the sanity check.\n+    if (ok_legacy && CheckTxScriptsSanity(tx_legacy)) {\n+        tx = std::move(tx_legacy);\n+        return true;\n+    }\n+\n+    // If extended decoding succeeded, and neither decoding passes sanity, return the extended one.\n+    if (ok_extended) {\n+        tx = std::move(tx_extended);\n+        return true;\n+    }\n+\n+    // If legacy decoding succeeded and extended didn't, return the legacy one.\n+    if (ok_legacy) {\n+        tx = std::move(tx_legacy);\n+        return true;\n+    }\n+\n+    // If none succeeded, we failed.\n     return false;\n }\n "
      }
    ]
  },
  {
    "sha": "0f949cde3dff15170db7930b0f7345ff995c267d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZjk0OWNkZTNkZmYxNTE3MGRiNzkzMGIwZjczNDVmZjk5NWMyNjdk",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-12-08T21:13:40Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-12-08T21:13:40Z"
      },
      "message": "Add regression test for incorrect decoding",
      "tree": {
        "sha": "fb77b9efd5500286ce6b9744a238c9aa4f328602",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fb77b9efd5500286ce6b9744a238c9aa4f328602"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0f949cde3dff15170db7930b0f7345ff995c267d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f949cde3dff15170db7930b0f7345ff995c267d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0f949cde3dff15170db7930b0f7345ff995c267d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f949cde3dff15170db7930b0f7345ff995c267d/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "39c42c442044aef611d03ee7053d2dd6df63deb7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/39c42c442044aef611d03ee7053d2dd6df63deb7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/39c42c442044aef611d03ee7053d2dd6df63deb7"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 7,
      "deletions": 0
    },
    "files": [
      {
        "sha": "60e66a27c9d319b2c92951f6f35594a4e18c99a1",
        "filename": "test/functional/rpc_rawtransaction.py",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0f949cde3dff15170db7930b0f7345ff995c267d/test/functional/rpc_rawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0f949cde3dff15170db7930b0f7345ff995c267d/test/functional/rpc_rawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_rawtransaction.py?ref=0f949cde3dff15170db7930b0f7345ff995c267d",
        "patch": "@@ -372,6 +372,13 @@ def run_test(self):\n         encrawtx = \"01000000010000000000000072c1a6a246ae63f74f931e8365e15a089c68d61900000000000000000000ffffffff0100e1f505000000000000000000\"\n         decrawtx = self.nodes[0].decoderawtransaction(encrawtx, False) # decode as non-witness transaction\n         assert_equal(decrawtx['vout'][0]['value'], Decimal('1.00000000'))\n+        # known ambiguous transaction in the chain (see https://github.com/bitcoin/bitcoin/issues/20579)\n+        encrawtx = \"020000000001010000000000000000000000000000000000000000000000000000000000000000ffffffff4b03c68708046ff8415c622f4254432e434f4d2ffabe6d6de1965d02c68f928e5b244ab1965115a36f56eb997633c7f690124bbf43644e23080000000ca3d3af6d005a65ff0200fd00000000ffffffff03f4c1fb4b0000000016001497cfc76442fe717f2a3f0cc9c175f7561b6619970000000000000000266a24aa21a9ed957d1036a80343e0d1b659497e1b48a38ebe876a056d45965fac4a85cda84e1900000000000000002952534b424c4f434b3a8e092581ab01986cbadc84f4b43f4fa4bb9e7a2e2a0caf9b7cf64d939028e22c0120000000000000000000000000000000000000000000000000000000000000000000000000\"\n+        decrawtx = self.nodes[0].decoderawtransaction(encrawtx)\n+        decrawtx_wit = self.nodes[0].decoderawtransaction(encrawtx, True)\n+        assert_raises_rpc_error(-22, 'TX decode failed', self.nodes[0].decoderawtransaction, encrawtx, False) # fails to decode as non-witness transaction\n+        assert_equal(decrawtx, decrawtx_wit) # the witness interpretation should be chosen\n+        assert_equal(decrawtx['vin'][0]['coinbase'], \"03c68708046ff8415c622f4254432e434f4d2ffabe6d6de1965d02c68f928e5b244ab1965115a36f56eb997633c7f690124bbf43644e23080000000ca3d3af6d005a65ff0200fd00000000\")\n \n         # Basic signrawtransaction test\n         addr = self.nodes[1].getnewaddress()"
      }
    ]
  }
]