[
  {
    "sha": "76d660ebd336d3dd47dd555ebbaa721a4cc978b2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NmQ2NjBlYmQzMzZkM2RkNDdkZDU1NWViYmFhNzIxYTRjYzk3OGIy",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2011-06-06T18:35:01Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2011-06-11T22:29:05Z"
      },
      "message": "Faster timeout when connecting\n\nUse non-blocking connects, and a select() call to wait a predefined\ntime (5s by default, but configurable with -timeout) for either\nsuccess or failure. This allows much more connections to be tried\nper time unit.\n\nBased on a patch by phantomcircuit.",
      "tree": {
        "sha": "ce40033b63b17ee2527795781885a76310d5fe0d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ce40033b63b17ee2527795781885a76310d5fe0d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/76d660ebd336d3dd47dd555ebbaa721a4cc978b2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76d660ebd336d3dd47dd555ebbaa721a4cc978b2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/76d660ebd336d3dd47dd555ebbaa721a4cc978b2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76d660ebd336d3dd47dd555ebbaa721a4cc978b2/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e051f1b510c2a8da51c099c73d5750b9c8c9422b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e051f1b510c2a8da51c099c73d5750b9c8c9422b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e051f1b510c2a8da51c099c73d5750b9c8c9422b"
      }
    ],
    "stats": {
      "total": 96,
      "additions": 93,
      "deletions": 3
    },
    "files": [
      {
        "sha": "0e2113e7cbed3e86671834c1098558b3b80f2c74",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76d660ebd336d3dd47dd555ebbaa721a4cc978b2/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76d660ebd336d3dd47dd555ebbaa721a4cc978b2/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=76d660ebd336d3dd47dd555ebbaa721a4cc978b2",
        "patch": "@@ -151,6 +151,7 @@ bool AppInit2(int argc, char* argv[])\n             \"  -gen=0           \\t\\t  \" + _(\"Don't generate coins\\n\") +\n             \"  -min             \\t\\t  \" + _(\"Start minimized\\n\") +\n             \"  -datadir=<dir>   \\t\\t  \" + _(\"Specify data directory\\n\") +\n+            \"  -timeout=<n>     \\t  \"   + _(\"Specify connection timeout (in milliseconds)\\n\") +\n             \"  -proxy=<ip:port> \\t  \"   + _(\"Connect through socks4 proxy\\n\") +\n             \"  -dns             \\t  \"   + _(\"Allow DNS lookups for addnode and connect\\n\") +\n             \"  -addnode=<ip>    \\t  \"   + _(\"Add a node to connect to\\n\") +\n@@ -414,6 +415,13 @@ bool AppInit2(int argc, char* argv[])\n         return false;\n     }\n \n+    if (mapArgs.count(\"-timeout\"))\n+    {\n+        int nNewTimeout = GetArg(\"-timeout\", 5000);\n+        if (nNewTimeout > 0 && nNewTimeout < 600000)\n+            nConnectTimeout = nNewTimeout;\n+    }\n+\n     if (mapArgs.count(\"-printblock\"))\n     {\n         string strMatch = mapArgs[\"-printblock\"];"
      },
      {
        "sha": "436ffbecbd1d371f560de14ea926f80b3d820ea1",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76d660ebd336d3dd47dd555ebbaa721a4cc978b2/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76d660ebd336d3dd47dd555ebbaa721a4cc978b2/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=76d660ebd336d3dd47dd555ebbaa721a4cc978b2",
        "patch": "@@ -79,7 +79,6 @@ extern int fUseUPnP;\n \n \n \n-\n bool CheckDiskSpace(uint64 nAdditionalBytes=0);\n FILE* OpenBlockFile(unsigned int nFile, unsigned int nBlockPos, const char* pszMode=\"rb\");\n FILE* AppendBlockFile(unsigned int& nFileRet);"
      },
      {
        "sha": "ca6380fc76e90b97cfd1de26b89f44530bedadc8",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 81,
        "deletions": 1,
        "changes": 82,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76d660ebd336d3dd47dd555ebbaa721a4cc978b2/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76d660ebd336d3dd47dd555ebbaa721a4cc978b2/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=76d660ebd336d3dd47dd555ebbaa721a4cc978b2",
        "patch": "@@ -51,6 +51,7 @@ map<CInv, int64> mapAlreadyAskedFor;\n \n // Settings\n int fUseProxy = false;\n+int nConnectTimeout = 5000;\n CAddress addrProxy(\"127.0.0.1\",9050);\n \n \n@@ -76,7 +77,7 @@ void CNode::PushGetBlocks(CBlockIndex* pindexBegin, uint256 hashEnd)\n \n \n \n-bool ConnectSocket(const CAddress& addrConnect, SOCKET& hSocketRet)\n+bool ConnectSocket(const CAddress& addrConnect, SOCKET& hSocketRet, int nTimeout)\n {\n     hSocketRet = INVALID_SOCKET;\n \n@@ -91,7 +92,86 @@ bool ConnectSocket(const CAddress& addrConnect, SOCKET& hSocketRet)\n     bool fProxy = (fUseProxy && addrConnect.IsRoutable());\n     struct sockaddr_in sockaddr = (fProxy ? addrProxy.GetSockAddr() : addrConnect.GetSockAddr());\n \n+#ifdef __WXMSW__\n+    u_long fNonblock = 1;\n+    if (ioctlsocket(hSocket, FIONBIO, &fNonblock) == SOCKET_ERROR)\n+#else\n+    int fFlags = fcntl(hSocket, F_GETFL, 0);\n+    if (fcntl(hSocket, F_SETFL, fFlags | O_NONBLOCK) == -1)\n+#endif\n+    {\n+        closesocket(hSocket);\n+        return false;\n+    }\n+\n+\n     if (connect(hSocket, (struct sockaddr*)&sockaddr, sizeof(sockaddr)) == SOCKET_ERROR)\n+    {\n+        // WSAEINVAL is here because some legacy version of winsock uses it\n+        if (WSAGetLastError() == WSAEINPROGRESS || WSAGetLastError() == WSAEWOULDBLOCK || WSAGetLastError() == WSAEINVAL)\n+        {\n+            struct timeval timeout;\n+            timeout.tv_sec  = nTimeout / 1000;\n+            timeout.tv_usec = (nTimeout % 1000) * 1000;\n+\n+            fd_set fdset;\n+            FD_ZERO(&fdset);\n+            FD_SET(hSocket, &fdset);\n+            int nRet = select(hSocket + 1, NULL, &fdset, NULL, &timeout);\n+            if (nRet == 0)\n+            {\n+                printf(\"connection timeout\\n\");\n+                closesocket(hSocket);\n+                return false;\n+            }\n+            if (nRet == SOCKET_ERROR)\n+            {\n+                printf(\"select() for connection failed: %i\\n\",WSAGetLastError());\n+                closesocket(hSocket);\n+                return false;\n+            }\n+            socklen_t nRetSize = sizeof(nRet);\n+#ifdef __WXMSW__\n+            if (getsockopt(hSocket, SOL_SOCKET, SO_ERROR, (char*)(&nRet), &nRetSize) == SOCKET_ERROR)\n+#else\n+            if (getsockopt(hSocket, SOL_SOCKET, SO_ERROR, &nRet, &nRetSize) == SOCKET_ERROR)\n+#endif\n+            {\n+                printf(\"getsockopt() for connection failed: %i\\n\",WSAGetLastError());\n+                closesocket(hSocket);\n+                return false;\n+            }\n+            if (nRet != 0)\n+            {\n+                printf(\"connect() failed after select(): %i\\n\",nRet);\n+                closesocket(hSocket);\n+                return false;\n+            }\n+        }\n+#ifdef __WXMSW__\n+        else if (WSAGetLastError() != WSAEISCONN)\n+#else\n+        else\n+#endif\n+        {\n+            printf(\"connect() failed: %s\\n\",WSAGetLastError());\n+            closesocket(hSocket);\n+            return false;\n+        }\n+    }\n+\n+    /*\n+    this isn't even strictly necessary\n+    CNode::ConnectNode immediately turns the socket back to non-blocking\n+    but we'll turn it back to blocking just in case\n+    */\n+#ifdef __WXMSW__\n+    fNonblock = 0;\n+    if (ioctlsocket(hSocket, FIONBIO, &fNonblock) == SOCKET_ERROR)\n+#else\n+    fFlags = fcntl(hSocket, F_GETFL, 0);\n+    if (fcntl(hSocket, F_SETFL, fFlags & !O_NONBLOCK) == SOCKET_ERROR)\n+#endif\n     {\n         closesocket(hSocket);\n         return false;"
      },
      {
        "sha": "8a55856eed18537526adc4ed58eddf40fbc39b24",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76d660ebd336d3dd47dd555ebbaa721a4cc978b2/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76d660ebd336d3dd47dd555ebbaa721a4cc978b2/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=76d660ebd336d3dd47dd555ebbaa721a4cc978b2",
        "patch": "@@ -19,6 +19,7 @@ class CRequestTracker;\n class CNode;\n class CBlockIndex;\n extern int nBestHeight;\n+extern int nConnectTimeout;\n \n \n \n@@ -32,7 +33,7 @@ enum\n \n \n \n-bool ConnectSocket(const CAddress& addrConnect, SOCKET& hSocketRet);\n+bool ConnectSocket(const CAddress& addrConnect, SOCKET& hSocketRet, int nTimeout=nConnectTimeout);\n bool Lookup(const char *pszName, std::vector<CAddress>& vaddr, int nServices, int nMaxSolutions, bool fAllowLookup = false, int portDefault = 0, bool fAllowPort = false);\n bool Lookup(const char *pszName, CAddress& addr, int nServices, bool fAllowLookup = false, int portDefault = 0, bool fAllowPort = false);\n bool GetMyExternalIP(unsigned int& ipRet);"
      },
      {
        "sha": "cd0761ee3926b843c5d1f2f75e597f2f0bce1d49",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76d660ebd336d3dd47dd555ebbaa721a4cc978b2/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76d660ebd336d3dd47dd555ebbaa721a4cc978b2/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=76d660ebd336d3dd47dd555ebbaa721a4cc978b2",
        "patch": "@@ -105,6 +105,8 @@ T* alignup(T* p)\n typedef int socklen_t;\n #else\n #define WSAGetLastError()   errno\n+#define WSAEINVAL           EINVAL\n+#define WSAEALREADY         EALREADY\n #define WSAEWOULDBLOCK      EWOULDBLOCK\n #define WSAEMSGSIZE         EMSGSIZE\n #define WSAEINTR            EINTR"
      }
    ]
  }
]