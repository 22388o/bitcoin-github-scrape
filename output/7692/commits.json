[
  {
    "sha": "bbb9d1d1231099122a5b0ad5dd86f3f93ce22724",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYmI5ZDFkMTIzMTA5OTEyMmE1YjBhZDVkZDg2ZjNmOTNjZTIyNzI0",
    "commit": {
      "author": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-03-07T19:44:09Z"
      },
      "committer": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-03-18T19:33:59Z"
      },
      "message": "Remove p2p alert handling",
      "tree": {
        "sha": "feed9074ee27fb927b7b143aafc50f68c11a38aa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/feed9074ee27fb927b7b143aafc50f68c11a38aa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bbb9d1d1231099122a5b0ad5dd86f3f93ce22724",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbb9d1d1231099122a5b0ad5dd86f3f93ce22724",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bbb9d1d1231099122a5b0ad5dd86f3f93ce22724",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbb9d1d1231099122a5b0ad5dd86f3f93ce22724/comments",
    "author": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "73b7eb501e6498e911321131e58ae7fbec6bc5ed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/73b7eb501e6498e911321131e58ae7fbec6bc5ed",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/73b7eb501e6498e911321131e58ae7fbec6bc5ed"
      }
    ],
    "stats": {
      "total": 735,
      "additions": 57,
      "deletions": 678
    },
    "files": [
      {
        "sha": "6ad7aabae0ef6051ac50a50df85407a996885b27",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbb9d1d1231099122a5b0ad5dd86f3f93ce22724/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbb9d1d1231099122a5b0ad5dd86f3f93ce22724/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=bbb9d1d1231099122a5b0ad5dd86f3f93ce22724",
        "patch": "@@ -87,7 +87,6 @@ endif\n # bitcoin core #\n BITCOIN_CORE_H = \\\n   addrman.h \\\n-  alert.h \\\n   base58.h \\\n   bloom.h \\\n   chain.h \\\n@@ -176,7 +175,6 @@ libbitcoin_server_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(MINIUPNPC_CP\n libbitcoin_server_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n libbitcoin_server_a_SOURCES = \\\n   addrman.cpp \\\n-  alert.cpp \\\n   bloom.cpp \\\n   chain.cpp \\\n   checkpoints.cpp \\"
      },
      {
        "sha": "7e7bf8abeb76b5db67c83d51fce8439555f60289",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbb9d1d1231099122a5b0ad5dd86f3f93ce22724/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbb9d1d1231099122a5b0ad5dd86f3f93ce22724/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=bbb9d1d1231099122a5b0ad5dd86f3f93ce22724",
        "patch": "@@ -29,7 +29,7 @@ JSON_TEST_FILES = \\\n   test/data/tx_valid.json \\\n   test/data/sighash.json\n \n-RAW_TEST_FILES = test/data/alertTests.raw\n+RAW_TEST_FILES =\n \n GENERATED_TEST_FILES = $(JSON_TEST_FILES:.json=.json.h) $(RAW_TEST_FILES:.raw=.raw.h)\n "
      },
      {
        "sha": "eb1cd5e7f6ebe8c1c74165e44bfdcb73a7cb083b",
        "filename": "src/alert.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 266,
        "changes": 266,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/73b7eb501e6498e911321131e58ae7fbec6bc5ed/src/alert.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/73b7eb501e6498e911321131e58ae7fbec6bc5ed/src/alert.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/alert.cpp?ref=73b7eb501e6498e911321131e58ae7fbec6bc5ed",
        "patch": "@@ -1,266 +0,0 @@\n-// Copyright (c) 2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2015 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#include \"alert.h\"\n-\n-#include \"clientversion.h\"\n-#include \"net.h\"\n-#include \"pubkey.h\"\n-#include \"timedata.h\"\n-#include \"ui_interface.h\"\n-#include \"util.h\"\n-#include \"utilstrencodings.h\"\n-\n-#include <stdint.h>\n-#include <algorithm>\n-#include <map>\n-\n-#include <boost/algorithm/string/classification.hpp>\n-#include <boost/algorithm/string/replace.hpp>\n-#include <boost/foreach.hpp>\n-#include <boost/thread.hpp>\n-\n-using namespace std;\n-\n-map<uint256, CAlert> mapAlerts;\n-CCriticalSection cs_mapAlerts;\n-\n-void CUnsignedAlert::SetNull()\n-{\n-    nVersion = 1;\n-    nRelayUntil = 0;\n-    nExpiration = 0;\n-    nID = 0;\n-    nCancel = 0;\n-    setCancel.clear();\n-    nMinVer = 0;\n-    nMaxVer = 0;\n-    setSubVer.clear();\n-    nPriority = 0;\n-\n-    strComment.clear();\n-    strStatusBar.clear();\n-    strReserved.clear();\n-}\n-\n-std::string CUnsignedAlert::ToString() const\n-{\n-    std::string strSetCancel;\n-    BOOST_FOREACH(int n, setCancel)\n-        strSetCancel += strprintf(\"%d \", n);\n-    std::string strSetSubVer;\n-    BOOST_FOREACH(const std::string& str, setSubVer)\n-        strSetSubVer += \"\\\"\" + str + \"\\\" \";\n-    return strprintf(\n-        \"CAlert(\\n\"\n-        \"    nVersion     = %d\\n\"\n-        \"    nRelayUntil  = %d\\n\"\n-        \"    nExpiration  = %d\\n\"\n-        \"    nID          = %d\\n\"\n-        \"    nCancel      = %d\\n\"\n-        \"    setCancel    = %s\\n\"\n-        \"    nMinVer      = %d\\n\"\n-        \"    nMaxVer      = %d\\n\"\n-        \"    setSubVer    = %s\\n\"\n-        \"    nPriority    = %d\\n\"\n-        \"    strComment   = \\\"%s\\\"\\n\"\n-        \"    strStatusBar = \\\"%s\\\"\\n\"\n-        \")\\n\",\n-        nVersion,\n-        nRelayUntil,\n-        nExpiration,\n-        nID,\n-        nCancel,\n-        strSetCancel,\n-        nMinVer,\n-        nMaxVer,\n-        strSetSubVer,\n-        nPriority,\n-        strComment,\n-        strStatusBar);\n-}\n-\n-void CAlert::SetNull()\n-{\n-    CUnsignedAlert::SetNull();\n-    vchMsg.clear();\n-    vchSig.clear();\n-}\n-\n-bool CAlert::IsNull() const\n-{\n-    return (nExpiration == 0);\n-}\n-\n-uint256 CAlert::GetHash() const\n-{\n-    return Hash(this->vchMsg.begin(), this->vchMsg.end());\n-}\n-\n-bool CAlert::IsInEffect() const\n-{\n-    return (GetAdjustedTime() < nExpiration);\n-}\n-\n-bool CAlert::Cancels(const CAlert& alert) const\n-{\n-    if (!IsInEffect())\n-        return false; // this was a no-op before 31403\n-    return (alert.nID <= nCancel || setCancel.count(alert.nID));\n-}\n-\n-bool CAlert::AppliesTo(int nVersion, const std::string& strSubVerIn) const\n-{\n-    // TODO: rework for client-version-embedded-in-strSubVer ?\n-    return (IsInEffect() &&\n-            nMinVer <= nVersion && nVersion <= nMaxVer &&\n-            (setSubVer.empty() || setSubVer.count(strSubVerIn)));\n-}\n-\n-bool CAlert::AppliesToMe() const\n-{\n-    return AppliesTo(PROTOCOL_VERSION, FormatSubVersion(CLIENT_NAME, CLIENT_VERSION, std::vector<std::string>()));\n-}\n-\n-bool CAlert::RelayTo(CNode* pnode) const\n-{\n-    if (!IsInEffect())\n-        return false;\n-    // don't relay to nodes which haven't sent their version message\n-    if (pnode->nVersion == 0)\n-        return false;\n-    // returns true if wasn't already contained in the set\n-    if (pnode->setKnown.insert(GetHash()).second)\n-    {\n-        if (AppliesTo(pnode->nVersion, pnode->strSubVer) ||\n-            AppliesToMe() ||\n-            GetAdjustedTime() < nRelayUntil)\n-        {\n-            pnode->PushMessage(NetMsgType::ALERT, *this);\n-            return true;\n-        }\n-    }\n-    return false;\n-}\n-\n-bool CAlert::CheckSignature(const std::vector<unsigned char>& alertKey) const\n-{\n-    CPubKey key(alertKey);\n-    if (!key.Verify(Hash(vchMsg.begin(), vchMsg.end()), vchSig))\n-        return error(\"CAlert::CheckSignature(): verify signature failed\");\n-\n-    // Now unserialize the data\n-    CDataStream sMsg(vchMsg, SER_NETWORK, PROTOCOL_VERSION);\n-    sMsg >> *(CUnsignedAlert*)this;\n-    return true;\n-}\n-\n-CAlert CAlert::getAlertByHash(const uint256 &hash)\n-{\n-    CAlert retval;\n-    {\n-        LOCK(cs_mapAlerts);\n-        map<uint256, CAlert>::iterator mi = mapAlerts.find(hash);\n-        if(mi != mapAlerts.end())\n-            retval = mi->second;\n-    }\n-    return retval;\n-}\n-\n-bool CAlert::ProcessAlert(const std::vector<unsigned char>& alertKey, bool fThread)\n-{\n-    if (!CheckSignature(alertKey))\n-        return false;\n-    if (!IsInEffect())\n-        return false;\n-\n-    // alert.nID=max is reserved for if the alert key is\n-    // compromised. It must have a pre-defined message,\n-    // must never expire, must apply to all versions,\n-    // and must cancel all previous\n-    // alerts or it will be ignored (so an attacker can't\n-    // send an \"everything is OK, don't panic\" version that\n-    // cannot be overridden):\n-    int maxInt = std::numeric_limits<int>::max();\n-    if (nID == maxInt)\n-    {\n-        if (!(\n-                nExpiration == maxInt &&\n-                nCancel == (maxInt-1) &&\n-                nMinVer == 0 &&\n-                nMaxVer == maxInt &&\n-                setSubVer.empty() &&\n-                nPriority == maxInt &&\n-                strStatusBar == \"URGENT: Alert key compromised, upgrade required\"\n-                ))\n-            return false;\n-    }\n-\n-    {\n-        LOCK(cs_mapAlerts);\n-        // Cancel previous alerts\n-        for (map<uint256, CAlert>::iterator mi = mapAlerts.begin(); mi != mapAlerts.end();)\n-        {\n-            const CAlert& alert = (*mi).second;\n-            if (Cancels(alert))\n-            {\n-                LogPrint(\"alert\", \"cancelling alert %d\\n\", alert.nID);\n-                uiInterface.NotifyAlertChanged((*mi).first, CT_DELETED);\n-                mapAlerts.erase(mi++);\n-            }\n-            else if (!alert.IsInEffect())\n-            {\n-                LogPrint(\"alert\", \"expiring alert %d\\n\", alert.nID);\n-                uiInterface.NotifyAlertChanged((*mi).first, CT_DELETED);\n-                mapAlerts.erase(mi++);\n-            }\n-            else\n-                mi++;\n-        }\n-\n-        // Check if this alert has been cancelled\n-        BOOST_FOREACH(PAIRTYPE(const uint256, CAlert)& item, mapAlerts)\n-        {\n-            const CAlert& alert = item.second;\n-            if (alert.Cancels(*this))\n-            {\n-                LogPrint(\"alert\", \"alert already cancelled by %d\\n\", alert.nID);\n-                return false;\n-            }\n-        }\n-\n-        // Add to mapAlerts\n-        mapAlerts.insert(make_pair(GetHash(), *this));\n-        // Notify UI and -alertnotify if it applies to me\n-        if(AppliesToMe())\n-        {\n-            uiInterface.NotifyAlertChanged(GetHash(), CT_NEW);\n-            Notify(strStatusBar, fThread);\n-        }\n-    }\n-\n-    LogPrint(\"alert\", \"accepted alert %d, AppliesToMe()=%d\\n\", nID, AppliesToMe());\n-    return true;\n-}\n-\n-void\n-CAlert::Notify(const std::string& strMessage, bool fThread)\n-{\n-    std::string strCmd = GetArg(\"-alertnotify\", \"\");\n-    if (strCmd.empty()) return;\n-\n-    // Alert text should be plain ascii coming from a trusted source, but to\n-    // be safe we first strip anything not in safeChars, then add single quotes around\n-    // the whole string before passing it to the shell:\n-    std::string singleQuote(\"'\");\n-    std::string safeStatus = SanitizeString(strMessage);\n-    safeStatus = singleQuote+safeStatus+singleQuote;\n-    boost::replace_all(strCmd, \"%s\", safeStatus);\n-\n-    if (fThread)\n-        boost::thread t(runCommand, strCmd); // thread runs free\n-    else\n-        runCommand(strCmd);\n-}"
      },
      {
        "sha": "8cb86e338c5d2846fd9369b3b33f32611d256a78",
        "filename": "src/alert.h",
        "status": "removed",
        "additions": 0,
        "deletions": 113,
        "changes": 113,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/73b7eb501e6498e911321131e58ae7fbec6bc5ed/src/alert.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/73b7eb501e6498e911321131e58ae7fbec6bc5ed/src/alert.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/alert.h?ref=73b7eb501e6498e911321131e58ae7fbec6bc5ed",
        "patch": "@@ -1,113 +0,0 @@\n-// Copyright (c) 2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2015 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#ifndef BITCOIN_ALERT_H\n-#define BITCOIN_ALERT_H\n-\n-#include \"serialize.h\"\n-#include \"sync.h\"\n-\n-#include <map>\n-#include <set>\n-#include <stdint.h>\n-#include <string>\n-\n-class CAlert;\n-class CNode;\n-class uint256;\n-\n-extern std::map<uint256, CAlert> mapAlerts;\n-extern CCriticalSection cs_mapAlerts;\n-\n-/** Alerts are for notifying old versions if they become too obsolete and\n- * need to upgrade.  The message is displayed in the status bar.\n- * Alert messages are broadcast as a vector of signed data.  Unserializing may\n- * not read the entire buffer if the alert is for a newer version, but older\n- * versions can still relay the original data.\n- */\n-class CUnsignedAlert\n-{\n-public:\n-    int nVersion;\n-    int64_t nRelayUntil;      // when newer nodes stop relaying to newer nodes\n-    int64_t nExpiration;\n-    int nID;\n-    int nCancel;\n-    std::set<int> setCancel;\n-    int nMinVer;            // lowest version inclusive\n-    int nMaxVer;            // highest version inclusive\n-    std::set<std::string> setSubVer;  // empty matches all\n-    int nPriority;\n-\n-    // Actions\n-    std::string strComment;\n-    std::string strStatusBar;\n-    std::string strReserved;\n-\n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        READWRITE(this->nVersion);\n-        nVersion = this->nVersion;\n-        READWRITE(nRelayUntil);\n-        READWRITE(nExpiration);\n-        READWRITE(nID);\n-        READWRITE(nCancel);\n-        READWRITE(setCancel);\n-        READWRITE(nMinVer);\n-        READWRITE(nMaxVer);\n-        READWRITE(setSubVer);\n-        READWRITE(nPriority);\n-\n-        READWRITE(LIMITED_STRING(strComment, 65536));\n-        READWRITE(LIMITED_STRING(strStatusBar, 256));\n-        READWRITE(LIMITED_STRING(strReserved, 256));\n-    }\n-\n-    void SetNull();\n-\n-    std::string ToString() const;\n-};\n-\n-/** An alert is a combination of a serialized CUnsignedAlert and a signature. */\n-class CAlert : public CUnsignedAlert\n-{\n-public:\n-    std::vector<unsigned char> vchMsg;\n-    std::vector<unsigned char> vchSig;\n-\n-    CAlert()\n-    {\n-        SetNull();\n-    }\n-\n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        READWRITE(vchMsg);\n-        READWRITE(vchSig);\n-    }\n-\n-    void SetNull();\n-    bool IsNull() const;\n-    uint256 GetHash() const;\n-    bool IsInEffect() const;\n-    bool Cancels(const CAlert& alert) const;\n-    bool AppliesTo(int nVersion, const std::string& strSubVerIn) const;\n-    bool AppliesToMe() const;\n-    bool RelayTo(CNode* pnode) const;\n-    bool CheckSignature(const std::vector<unsigned char>& alertKey) const;\n-    bool ProcessAlert(const std::vector<unsigned char>& alertKey, bool fThread = true); // fThread means run -alertnotify in a free-running thread\n-    static void Notify(const std::string& strMessage, bool fThread);\n-\n-    /*\n-     * Get copy of (active) alert object by hash. Returns a null alert if it is not found.\n-     */\n-    static CAlert getAlertByHash(const uint256 &hash);\n-};\n-\n-#endif // BITCOIN_ALERT_H"
      },
      {
        "sha": "d5fb047aa0d1103fb0e994d47b400cdcf2f1335d",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 62,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbb9d1d1231099122a5b0ad5dd86f3f93ce22724/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbb9d1d1231099122a5b0ad5dd86f3f93ce22724/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=bbb9d1d1231099122a5b0ad5dd86f3f93ce22724",
        "patch": "@@ -6,7 +6,6 @@\n #include \"main.h\"\n \n #include \"addrman.h\"\n-#include \"alert.h\"\n #include \"arith_uint256.h\"\n #include \"chainparams.h\"\n #include \"checkpoints.h\"\n@@ -4213,14 +4212,8 @@ void static CheckBlockIndex(const Consensus::Params& consensusParams)\n     assert(nNodes == forward.size());\n }\n \n-//////////////////////////////////////////////////////////////////////////////\n-//\n-// CAlert\n-//\n-\n std::string GetWarnings(const std::string& strFor)\n {\n-    int nPriority = 0;\n     string strStatusBar;\n     string strRPC;\n     string strGUI;\n@@ -4236,37 +4229,20 @@ std::string GetWarnings(const std::string& strFor)\n     // Misc warnings like out of disk space and clock is wrong\n     if (strMiscWarning != \"\")\n     {\n-        nPriority = 1000;\n         strStatusBar = strGUI = strMiscWarning;\n     }\n \n     if (fLargeWorkForkFound)\n     {\n-        nPriority = 2000;\n         strStatusBar = strRPC = \"Warning: The network does not appear to fully agree! Some miners appear to be experiencing issues.\";\n         strGUI = _(\"Warning: The network does not appear to fully agree! Some miners appear to be experiencing issues.\");\n     }\n     else if (fLargeWorkInvalidChainFound)\n     {\n-        nPriority = 2000;\n         strStatusBar = strRPC = \"Warning: We do not appear to fully agree with our peers! You may need to upgrade, or other nodes may need to upgrade.\";\n         strGUI = _(\"Warning: We do not appear to fully agree with our peers! You may need to upgrade, or other nodes may need to upgrade.\");\n     }\n \n-    // Alerts\n-    {\n-        LOCK(cs_mapAlerts);\n-        BOOST_FOREACH(PAIRTYPE(const uint256, CAlert)& item, mapAlerts)\n-        {\n-            const CAlert& alert = item.second;\n-            if (alert.AppliesToMe() && alert.nPriority > nPriority)\n-            {\n-                nPriority = alert.nPriority;\n-                strStatusBar = strGUI = alert.strStatusBar;\n-            }\n-        }\n-    }\n-\n     if (strFor == \"gui\")\n         return strGUI;\n     else if (strFor == \"statusbar\")\n@@ -4588,13 +4564,6 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             }\n         }\n \n-        // Relay alerts\n-        {\n-            LOCK(cs_mapAlerts);\n-            BOOST_FOREACH(PAIRTYPE(const uint256, CAlert)& item, mapAlerts)\n-                item.second.RelayTo(pfrom);\n-        }\n-\n         pfrom->fSuccessfullyConnected = true;\n \n         string remoteAddr;\n@@ -5302,37 +5271,6 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n     }\n \n \n-    else if (fAlerts && strCommand == NetMsgType::ALERT)\n-    {\n-        CAlert alert;\n-        vRecv >> alert;\n-\n-        uint256 alertHash = alert.GetHash();\n-        if (pfrom->setKnown.count(alertHash) == 0)\n-        {\n-            if (alert.ProcessAlert(chainparams.AlertKey()))\n-            {\n-                // Relay\n-                pfrom->setKnown.insert(alertHash);\n-                {\n-                    LOCK(cs_vNodes);\n-                    BOOST_FOREACH(CNode* pnode, vNodes)\n-                        alert.RelayTo(pnode);\n-                }\n-            }\n-            else {\n-                // Small DoS penalty so peers that send us lots of\n-                // duplicate/expired/invalid-signature/whatever alerts\n-                // eventually get banned.\n-                // This isn't a Misbehaving(100) (immediate ban) because the\n-                // peer might be an older or different implementation with\n-                // a different signature key, etc.\n-                Misbehaving(pfrom->GetId(), 10);\n-            }\n-        }\n-    }\n-\n-\n     else if (strCommand == NetMsgType::FILTERLOAD)\n     {\n         CBloomFilter filter;"
      },
      {
        "sha": "71a12c27fd35090b923042e411726493b7b3b7a7",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbb9d1d1231099122a5b0ad5dd86f3f93ce22724/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbb9d1d1231099122a5b0ad5dd86f3f93ce22724/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=bbb9d1d1231099122a5b0ad5dd86f3f93ce22724",
        "patch": "@@ -8,7 +8,6 @@\n #include \"guiconstants.h\"\n #include \"peertablemodel.h\"\n \n-#include \"alert.h\"\n #include \"chainparams.h\"\n #include \"checkpoints.h\"\n #include \"clientversion.h\""
      },
      {
        "sha": "ed3cce2de43bb3da9403acb8d8b116b1fe1d1969",
        "filename": "src/test/alert_tests.cpp",
        "status": "modified",
        "additions": 56,
        "deletions": 233,
        "changes": 289,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbb9d1d1231099122a5b0ad5dd86f3f93ce22724/src/test/alert_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbb9d1d1231099122a5b0ad5dd86f3f93ce22724/src/test/alert_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/alert_tests.cpp?ref=bbb9d1d1231099122a5b0ad5dd86f3f93ce22724",
        "patch": "@@ -4,253 +4,76 @@\n \n // Unit tests for alert system\n \n-#include \"alert.h\"\n-#include \"chain.h\"\n #include \"chainparams.h\"\n-#include \"clientversion.h\"\n-#include \"data/alertTests.raw.h\"\n #include \"main.h\" // For PartitionCheck\n-#include \"serialize.h\"\n-#include \"streams.h\"\n-#include \"utilstrencodings.h\"\n \n #include \"test/testutil.h\"\n #include \"test/test_bitcoin.h\"\n \n-#include <fstream>\n-\n-#include <boost/filesystem/operations.hpp>\n-#include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n \n-#if 0\n-//\n-// alertTests contains 7 alerts, generated with this code:\n-// (SignAndSave code not shown, alert signing key is secret)\n-//\n-{\n-    CAlert alert;\n-    alert.nRelayUntil   = 60;\n-    alert.nExpiration   = 24 * 60 * 60;\n-    alert.nID           = 1;\n-    alert.nCancel       = 0;   // cancels previous messages up to this ID number\n-    alert.nMinVer       = 0;  // These versions are protocol versions\n-    alert.nMaxVer       = 999001;\n-    alert.nPriority     = 1;\n-    alert.strComment    = \"Alert comment\";\n-    alert.strStatusBar  = \"Alert 1\";\n-\n-    SignAndSave(alert, \"test/alertTests\");\n-\n-    alert.setSubVer.insert(std::string(\"/Satoshi:0.1.0/\"));\n-    alert.strStatusBar  = \"Alert 1 for Satoshi 0.1.0\";\n-    SignAndSave(alert, \"test/alertTests\");\n-\n-    alert.setSubVer.insert(std::string(\"/Satoshi:0.2.0/\"));\n-    alert.strStatusBar  = \"Alert 1 for Satoshi 0.1.0, 0.2.0\";\n-    SignAndSave(alert, \"test/alertTests\");\n-\n-    alert.setSubVer.clear();\n-    ++alert.nID;\n-    alert.nCancel = 1;\n-    alert.nPriority = 100;\n-    alert.strStatusBar  = \"Alert 2, cancels 1\";\n-    SignAndSave(alert, \"test/alertTests\");\n-\n-    alert.nExpiration += 60;\n-    ++alert.nID;\n-    SignAndSave(alert, \"test/alertTests\");\n-\n-    ++alert.nID;\n-    alert.nMinVer = 11;\n-    alert.nMaxVer = 22;\n-    SignAndSave(alert, \"test/alertTests\");\n-\n-    ++alert.nID;\n-    alert.strStatusBar  = \"Alert 2 for Satoshi 0.1.0\";\n-    alert.setSubVer.insert(std::string(\"/Satoshi:0.1.0/\"));\n-    SignAndSave(alert, \"test/alertTests\");\n-\n-    ++alert.nID;\n-    alert.nMinVer = 0;\n-    alert.nMaxVer = 999999;\n-    alert.strStatusBar  = \"Evil Alert'; /bin/ls; echo '\";\n-    alert.setSubVer.clear();\n-    SignAndSave(alert, \"test/alertTests\");\n-}\n-#endif\n-\n-struct ReadAlerts : public TestingSetup\n-{\n-    ReadAlerts()\n-    {\n-        std::vector<unsigned char> vch(alert_tests::alertTests, alert_tests::alertTests + sizeof(alert_tests::alertTests));\n-        CDataStream stream(vch, SER_DISK, CLIENT_VERSION);\n-        try {\n-            while (!stream.eof())\n-            {\n-                CAlert alert;\n-                stream >> alert;\n-                alerts.push_back(alert);\n-            }\n-        }\n-        catch (const std::exception&) { }\n-    }\n-    ~ReadAlerts() { }\n-\n-    static std::vector<std::string> read_lines(boost::filesystem::path filepath)\n-    {\n-        std::vector<std::string> result;\n-\n-        std::ifstream f(filepath.string().c_str());\n-        std::string line;\n-        while (std::getline(f,line))\n-            result.push_back(line);\n-\n-        return result;\n-    }\n-\n-    std::vector<CAlert> alerts;\n-};\n-\n-BOOST_FIXTURE_TEST_SUITE(Alert_tests, ReadAlerts)\n-\n-\n-BOOST_AUTO_TEST_CASE(AlertApplies)\n-{\n-    SetMockTime(11);\n-    const std::vector<unsigned char>& alertKey = Params(CBaseChainParams::MAIN).AlertKey();\n-\n-    BOOST_FOREACH(const CAlert& alert, alerts)\n-    {\n-        BOOST_CHECK(alert.CheckSignature(alertKey));\n-    }\n-\n-    BOOST_CHECK(alerts.size() >= 3);\n-\n-    // Matches:\n-    BOOST_CHECK(alerts[0].AppliesTo(1, \"\"));\n-    BOOST_CHECK(alerts[0].AppliesTo(999001, \"\"));\n-    BOOST_CHECK(alerts[0].AppliesTo(1, \"/Satoshi:11.11.11/\"));\n+BOOST_FIXTURE_TEST_SUITE(Alert_tests, TestingSetup)\n \n-    BOOST_CHECK(alerts[1].AppliesTo(1, \"/Satoshi:0.1.0/\"));\n-    BOOST_CHECK(alerts[1].AppliesTo(999001, \"/Satoshi:0.1.0/\"));\n-\n-    BOOST_CHECK(alerts[2].AppliesTo(1, \"/Satoshi:0.1.0/\"));\n-    BOOST_CHECK(alerts[2].AppliesTo(1, \"/Satoshi:0.2.0/\"));\n-\n-    // Don't match:\n-    BOOST_CHECK(!alerts[0].AppliesTo(-1, \"\"));\n-    BOOST_CHECK(!alerts[0].AppliesTo(999002, \"\"));\n-\n-    BOOST_CHECK(!alerts[1].AppliesTo(1, \"\"));\n-    BOOST_CHECK(!alerts[1].AppliesTo(1, \"Satoshi:0.1.0\"));\n-    BOOST_CHECK(!alerts[1].AppliesTo(1, \"/Satoshi:0.1.0\"));\n-    BOOST_CHECK(!alerts[1].AppliesTo(1, \"Satoshi:0.1.0/\"));\n-    BOOST_CHECK(!alerts[1].AppliesTo(-1, \"/Satoshi:0.1.0/\"));\n-    BOOST_CHECK(!alerts[1].AppliesTo(999002, \"/Satoshi:0.1.0/\"));\n-    BOOST_CHECK(!alerts[1].AppliesTo(1, \"/Satoshi:0.2.0/\"));\n-\n-    BOOST_CHECK(!alerts[2].AppliesTo(1, \"/Satoshi:0.3.0/\"));\n-\n-    SetMockTime(0);\n-}\n-\n-\n-BOOST_AUTO_TEST_CASE(AlertNotify)\n-{\n-    SetMockTime(11);\n-    const std::vector<unsigned char>& alertKey = Params(CBaseChainParams::MAIN).AlertKey();\n-\n-    boost::filesystem::path temp = GetTempPath() /\n-        boost::filesystem::unique_path(\"alertnotify-%%%%.txt\");\n-\n-    mapArgs[\"-alertnotify\"] = std::string(\"echo %s >> \") + temp.string();\n-\n-    BOOST_FOREACH(CAlert alert, alerts)\n-        alert.ProcessAlert(alertKey, false);\n-\n-    std::vector<std::string> r = read_lines(temp);\n-    BOOST_CHECK_EQUAL(r.size(), 4u);\n-\n-// Windows built-in echo semantics are different than posixy shells. Quotes and\n-// whitespace are printed literally.\n-\n-#ifndef WIN32\n-    BOOST_CHECK_EQUAL(r[0], \"Alert 1\");\n-    BOOST_CHECK_EQUAL(r[1], \"Alert 2, cancels 1\");\n-    BOOST_CHECK_EQUAL(r[2], \"Alert 2, cancels 1\");\n-    BOOST_CHECK_EQUAL(r[3], \"Evil Alert; /bin/ls; echo \"); // single-quotes should be removed\n-#else\n-    BOOST_CHECK_EQUAL(r[0], \"'Alert 1' \");\n-    BOOST_CHECK_EQUAL(r[1], \"'Alert 2, cancels 1' \");\n-    BOOST_CHECK_EQUAL(r[2], \"'Alert 2, cancels 1' \");\n-    BOOST_CHECK_EQUAL(r[3], \"'Evil Alert; /bin/ls; echo ' \");\n-#endif\n-    boost::filesystem::remove(temp);\n-\n-    SetMockTime(0);\n-}\n \n static bool falseFunc() { return false; }\n \n BOOST_AUTO_TEST_CASE(PartitionAlert)\n-{\n-    // Test PartitionCheck\n-    CCriticalSection csDummy;\n-    CBlockIndex indexDummy[100];\n-    CChainParams& params = Params(CBaseChainParams::MAIN);\n-    int64_t nPowTargetSpacing = params.GetConsensus().nPowTargetSpacing;\n-\n-    // Generate fake blockchain timestamps relative to\n-    // an arbitrary time:\n-    int64_t now = 1427379054;\n-    SetMockTime(now);\n-    for (int i = 0; i < 100; i++)\n-    {\n-        indexDummy[i].phashBlock = NULL;\n-        if (i == 0) indexDummy[i].pprev = NULL;\n-        else indexDummy[i].pprev = &indexDummy[i-1];\n-        indexDummy[i].nHeight = i;\n-        indexDummy[i].nTime = now - (100-i)*nPowTargetSpacing;\n-        // Other members don't matter, the partition check code doesn't\n-        // use them\n-    }\n-\n-    strMiscWarning = \"\";\n-\n-    // Test 1: chain with blocks every nPowTargetSpacing seconds,\n-    // as normal, no worries:\n-    PartitionCheck(falseFunc, csDummy, &indexDummy[99], nPowTargetSpacing);\n-    BOOST_CHECK_MESSAGE(strMiscWarning.empty(), strMiscWarning);\n-\n-    // Test 2: go 3.5 hours without a block, expect a warning:\n-    now += 3*60*60+30*60;\n-    SetMockTime(now);\n-    PartitionCheck(falseFunc, csDummy, &indexDummy[99], nPowTargetSpacing);\n-    BOOST_CHECK(!strMiscWarning.empty());\n-    BOOST_TEST_MESSAGE(std::string(\"Got alert text: \")+strMiscWarning);\n-    strMiscWarning = \"\";\n-\n-    // Test 3: test the \"partition alerts only go off once per day\"\n-    // code:\n-    now += 60*10;\n-    SetMockTime(now);\n-    PartitionCheck(falseFunc, csDummy, &indexDummy[99], nPowTargetSpacing);\n-    BOOST_CHECK(strMiscWarning.empty());\n+        {\n+                // Test PartitionCheck\n+                CCriticalSection csDummy;\n+        CBlockIndex indexDummy[100];\n+        CChainParams& params = Params(CBaseChainParams::MAIN);\n+        int64_t nPowTargetSpacing = params.GetConsensus().nPowTargetSpacing;\n+\n+        // Generate fake blockchain timestamps relative to\n+        // an arbitrary time:\n+        int64_t now = 1427379054;\n+        SetMockTime(now);\n+        for (int i = 0; i < 100; i++)\n+        {\n+            indexDummy[i].phashBlock = NULL;\n+            if (i == 0) indexDummy[i].pprev = NULL;\n+            else indexDummy[i].pprev = &indexDummy[i-1];\n+            indexDummy[i].nHeight = i;\n+            indexDummy[i].nTime = now - (100-i)*nPowTargetSpacing;\n+            // Other members don't matter, the partition check code doesn't\n+            // use them\n+        }\n \n-    // Test 4: get 2.5 times as many blocks as expected:\n-    now += 60*60*24; // Pretend it is a day later\n-    SetMockTime(now);\n-    int64_t quickSpacing = nPowTargetSpacing*2/5;\n-    for (int i = 0; i < 100; i++) // Tweak chain timestamps:\n+        strMiscWarning = \"\";\n+\n+        // Test 1: chain with blocks every nPowTargetSpacing seconds,\n+        // as normal, no worries:\n+        PartitionCheck(falseFunc, csDummy, &indexDummy[99], nPowTargetSpacing);\n+        BOOST_CHECK_MESSAGE(strMiscWarning.empty(), strMiscWarning);\n+\n+        // Test 2: go 3.5 hours without a block, expect a warning:\n+        now += 3*60*60+30*60;\n+        SetMockTime(now);\n+        PartitionCheck(falseFunc, csDummy, &indexDummy[99], nPowTargetSpacing);\n+        BOOST_CHECK(!strMiscWarning.empty());\n+        BOOST_TEST_MESSAGE(std::string(\"Got alert text: \")+strMiscWarning);\n+        strMiscWarning = \"\";\n+\n+        // Test 3: test the \"partition alerts only go off once per day\"\n+        // code:\n+        now += 60*10;\n+        SetMockTime(now);\n+        PartitionCheck(falseFunc, csDummy, &indexDummy[99], nPowTargetSpacing);\n+        BOOST_CHECK(strMiscWarning.empty());\n+\n+        // Test 4: get 2.5 times as many blocks as expected:\n+        now += 60*60*24; // Pretend it is a day later\n+        SetMockTime(now);\n+        int64_t quickSpacing = nPowTargetSpacing*2/5;\n+        for (int i = 0; i < 100; i++) // Tweak chain timestamps:\n         indexDummy[i].nTime = now - (100-i)*quickSpacing;\n-    PartitionCheck(falseFunc, csDummy, &indexDummy[99], nPowTargetSpacing);\n-    BOOST_CHECK(!strMiscWarning.empty());\n-    BOOST_TEST_MESSAGE(std::string(\"Got alert text: \")+strMiscWarning);\n-    strMiscWarning = \"\";\n+        PartitionCheck(falseFunc, csDummy, &indexDummy[99], nPowTargetSpacing);\n+        BOOST_CHECK(!strMiscWarning.empty());\n+        BOOST_TEST_MESSAGE(std::string(\"Got alert text: \")+strMiscWarning);\n+        strMiscWarning = \"\";\n \n-    SetMockTime(0);\n-}\n+        SetMockTime(0);\n+        }\n \n-BOOST_AUTO_TEST_SUITE_END()\n+BOOST_AUTO_TEST_SUITE_END()\n\\ No newline at end of file"
      },
      {
        "sha": "01f50680b95aa307a1a013b643ded4ae0bc47162",
        "filename": "src/test/data/alertTests.raw",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/73b7eb501e6498e911321131e58ae7fbec6bc5ed/src/test/data/alertTests.raw",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/73b7eb501e6498e911321131e58ae7fbec6bc5ed/src/test/data/alertTests.raw",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/alertTests.raw?ref=73b7eb501e6498e911321131e58ae7fbec6bc5ed"
      }
    ]
  },
  {
    "sha": "92066344fdc3eb3071cb6fc0ce6a41d79c2dda53",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MjA2NjM0NGZkYzNlYjMwNzFjYjZmYzBjZTZhNDFkNzljMmRkYTUz",
    "commit": {
      "author": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-03-06T10:07:25Z"
      },
      "committer": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-03-18T19:33:59Z"
      },
      "message": "Update alert notification and GUI",
      "tree": {
        "sha": "91688d0626a50e49b6fe9e6cd3ed0ce7c3803c79",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/91688d0626a50e49b6fe9e6cd3ed0ce7c3803c79"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/92066344fdc3eb3071cb6fc0ce6a41d79c2dda53",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92066344fdc3eb3071cb6fc0ce6a41d79c2dda53",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/92066344fdc3eb3071cb6fc0ce6a41d79c2dda53",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92066344fdc3eb3071cb6fc0ce6a41d79c2dda53/comments",
    "author": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bbb9d1d1231099122a5b0ad5dd86f3f93ce22724",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbb9d1d1231099122a5b0ad5dd86f3f93ce22724",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bbb9d1d1231099122a5b0ad5dd86f3f93ce22724"
      }
    ],
    "stats": {
      "total": 61,
      "additions": 33,
      "deletions": 28
    },
    "files": [
      {
        "sha": "6c193a25e3bf2952b6106f85b8d6b6edcaf35453",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 4,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92066344fdc3eb3071cb6fc0ce6a41d79c2dda53/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92066344fdc3eb3071cb6fc0ce6a41d79c2dda53/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=92066344fdc3eb3071cb6fc0ce6a41d79c2dda53",
        "patch": "@@ -1565,6 +1565,26 @@ bool fLargeWorkForkFound = false;\n bool fLargeWorkInvalidChainFound = false;\n CBlockIndex *pindexBestForkTip = NULL, *pindexBestForkBase = NULL;\n \n+static void AlertNotify(const std::string& strMessage, bool fThread)\n+{\n+    uiInterface.NotifyAlertChanged();\n+    std::string strCmd = GetArg(\"-alertnotify\", \"\");\n+    if (strCmd.empty()) return;\n+\n+    // Alert text should be plain ascii coming from a trusted source, but to\n+    // be safe we first strip anything not in safeChars, then add single quotes around\n+    // the whole string before passing it to the shell:\n+    std::string singleQuote(\"'\");\n+    std::string safeStatus = SanitizeString(strMessage);\n+    safeStatus = singleQuote+safeStatus+singleQuote;\n+    boost::replace_all(strCmd, \"%s\", safeStatus);\n+\n+    if (fThread)\n+        boost::thread t(runCommand, strCmd); // thread runs free\n+    else\n+        runCommand(strCmd);\n+}\n+\n void CheckForkWarningConditions()\n {\n     AssertLockHeld(cs_main);\n@@ -1584,7 +1604,7 @@ void CheckForkWarningConditions()\n         {\n             std::string warning = std::string(\"'Warning: Large-work fork detected, forking after block \") +\n                 pindexBestForkBase->phashBlock->ToString() + std::string(\"'\");\n-            CAlert::Notify(warning, true);\n+            AlertNotify(warning, true);\n         }\n         if (pindexBestForkTip && pindexBestForkBase)\n         {\n@@ -2115,7 +2135,7 @@ void PartitionCheck(bool (*initialDownloadCheck)(), CCriticalSection& cs, const\n     if (!strWarning.empty())\n     {\n         strMiscWarning = strWarning;\n-        CAlert::Notify(strWarning, true);\n+        AlertNotify(strWarning, true);\n         lastAlertTime = now;\n     }\n }\n@@ -2545,7 +2565,7 @@ void static UpdateTip(CBlockIndex *pindexNew) {\n                 if (state == THRESHOLD_ACTIVE) {\n                     strMiscWarning = strprintf(_(\"Warning: unknown new rules activated (versionbit %i)\"), bit);\n                     if (!fWarned) {\n-                        CAlert::Notify(strMiscWarning, true);\n+                        AlertNotify(strMiscWarning, true);\n                         fWarned = true;\n                     }\n                 } else {\n@@ -2567,7 +2587,7 @@ void static UpdateTip(CBlockIndex *pindexNew) {\n             // strMiscWarning is read by GetWarnings(), called by Qt and the JSON-RPC code to warn the user:\n             strMiscWarning = _(\"Warning: Unknown block versions being mined! It's possible unknown rules are in effect\");\n             if (!fWarned) {\n-                CAlert::Notify(strMiscWarning, true);\n+                AlertNotify(strMiscWarning, true);\n                 fWarned = true;\n             }\n         }"
      },
      {
        "sha": "d3edfedff29b6f7203afeff6e22c99f83242301f",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 20,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92066344fdc3eb3071cb6fc0ce6a41d79c2dda53/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92066344fdc3eb3071cb6fc0ce6a41d79c2dda53/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=92066344fdc3eb3071cb6fc0ce6a41d79c2dda53",
        "patch": "@@ -121,20 +121,8 @@ void ClientModel::updateNumConnections(int numConnections)\n     Q_EMIT numConnectionsChanged(numConnections);\n }\n \n-void ClientModel::updateAlert(const QString &hash, int status)\n+void ClientModel::updateAlert()\n {\n-    // Show error message notification for new alert\n-    if(status == CT_NEW)\n-    {\n-        uint256 hash_256;\n-        hash_256.SetHex(hash.toStdString());\n-        CAlert alert = CAlert::getAlertByHash(hash_256);\n-        if(!alert.IsNull())\n-        {\n-            Q_EMIT message(tr(\"Network Alert\"), QString::fromStdString(alert.strStatusBar), CClientUIInterface::ICON_ERROR);\n-        }\n-    }\n-\n     Q_EMIT alertsChanged(getStatusBarWarnings());\n }\n \n@@ -226,12 +214,10 @@ static void NotifyNumConnectionsChanged(ClientModel *clientmodel, int newNumConn\n                               Q_ARG(int, newNumConnections));\n }\n \n-static void NotifyAlertChanged(ClientModel *clientmodel, const uint256 &hash, ChangeType status)\n+static void NotifyAlertChanged(ClientModel *clientmodel)\n {\n-    qDebug() << \"NotifyAlertChanged: \" + QString::fromStdString(hash.GetHex()) + \" status=\" + QString::number(status);\n-    QMetaObject::invokeMethod(clientmodel, \"updateAlert\", Qt::QueuedConnection,\n-                              Q_ARG(QString, QString::fromStdString(hash.GetHex())),\n-                              Q_ARG(int, status));\n+    qDebug() << \"NotifyAlertChanged\";\n+    QMetaObject::invokeMethod(clientmodel, \"updateAlert\", Qt::QueuedConnection);\n }\n \n static void BannedListChanged(ClientModel *clientmodel)\n@@ -265,7 +251,7 @@ void ClientModel::subscribeToCoreSignals()\n     // Connect signals to client\n     uiInterface.ShowProgress.connect(boost::bind(ShowProgress, this, _1, _2));\n     uiInterface.NotifyNumConnectionsChanged.connect(boost::bind(NotifyNumConnectionsChanged, this, _1));\n-    uiInterface.NotifyAlertChanged.connect(boost::bind(NotifyAlertChanged, this, _1, _2));\n+    uiInterface.NotifyAlertChanged.connect(boost::bind(NotifyAlertChanged, this));\n     uiInterface.BannedListChanged.connect(boost::bind(BannedListChanged, this));\n     uiInterface.NotifyBlockTip.connect(boost::bind(BlockTipChanged, this, _1, _2));\n }\n@@ -275,7 +261,7 @@ void ClientModel::unsubscribeFromCoreSignals()\n     // Disconnect signals from client\n     uiInterface.ShowProgress.disconnect(boost::bind(ShowProgress, this, _1, _2));\n     uiInterface.NotifyNumConnectionsChanged.disconnect(boost::bind(NotifyNumConnectionsChanged, this, _1));\n-    uiInterface.NotifyAlertChanged.disconnect(boost::bind(NotifyAlertChanged, this, _1, _2));\n+    uiInterface.NotifyAlertChanged.disconnect(boost::bind(NotifyAlertChanged, this));\n     uiInterface.BannedListChanged.disconnect(boost::bind(BannedListChanged, this));\n     uiInterface.NotifyBlockTip.disconnect(boost::bind(BlockTipChanged, this, _1, _2));\n }"
      },
      {
        "sha": "2fef6131c3c8e5c58cfef1e3797d2b85dbe78721",
        "filename": "src/qt/clientmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92066344fdc3eb3071cb6fc0ce6a41d79c2dda53/src/qt/clientmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92066344fdc3eb3071cb6fc0ce6a41d79c2dda53/src/qt/clientmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.h?ref=92066344fdc3eb3071cb6fc0ce6a41d79c2dda53",
        "patch": "@@ -103,7 +103,7 @@ class ClientModel : public QObject\n public Q_SLOTS:\n     void updateTimer();\n     void updateNumConnections(int numConnections);\n-    void updateAlert(const QString &hash, int status);\n+    void updateAlert();\n     void updateBanlist();\n };\n "
      },
      {
        "sha": "0b51d52e6576e713a3bdb40e4fabc04f6a05418e",
        "filename": "src/ui_interface.h",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92066344fdc3eb3071cb6fc0ce6a41d79c2dda53/src/ui_interface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92066344fdc3eb3071cb6fc0ce6a41d79c2dda53/src/ui_interface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ui_interface.h?ref=92066344fdc3eb3071cb6fc0ce6a41d79c2dda53",
        "patch": "@@ -83,10 +83,9 @@ class CClientUIInterface\n     boost::signals2::signal<void (int newNumConnections)> NotifyNumConnectionsChanged;\n \n     /**\n-     * New, updated or cancelled alert.\n-     * @note called with lock cs_mapAlerts held.\n+     * Status bar alerts changed.\n      */\n-    boost::signals2::signal<void (const uint256 &hash, ChangeType status)> NotifyAlertChanged;\n+    boost::signals2::signal<void ()> NotifyAlertChanged;\n \n     /** A wallet has been loaded. */\n     boost::signals2::signal<void (CWallet* wallet)> LoadWallet;"
      }
    ]
  },
  {
    "sha": "01fdfeffc4515ea43748230139a3bcee2eec3865",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMWZkZmVmZmM0NTE1ZWE0Mzc0ODIzMDEzOWEzYmNlZTJlZWMzODY1",
    "commit": {
      "author": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-03-06T11:15:20Z"
      },
      "committer": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-03-18T19:33:59Z"
      },
      "message": "Remove `-alerts` option",
      "tree": {
        "sha": "e3714bb1ca47d09a1d856fd9e580759d8ecca8a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e3714bb1ca47d09a1d856fd9e580759d8ecca8a9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/01fdfeffc4515ea43748230139a3bcee2eec3865",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01fdfeffc4515ea43748230139a3bcee2eec3865",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/01fdfeffc4515ea43748230139a3bcee2eec3865",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01fdfeffc4515ea43748230139a3bcee2eec3865/comments",
    "author": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "92066344fdc3eb3071cb6fc0ce6a41d79c2dda53",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92066344fdc3eb3071cb6fc0ce6a41d79c2dda53",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/92066344fdc3eb3071cb6fc0ce6a41d79c2dda53"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 0,
      "deletions": 7
    },
    "files": [
      {
        "sha": "b430bcd585446e549945375238a929ab0e037e05",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/01fdfeffc4515ea43748230139a3bcee2eec3865/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/01fdfeffc4515ea43748230139a3bcee2eec3865/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=01fdfeffc4515ea43748230139a3bcee2eec3865",
        "patch": "@@ -315,7 +315,6 @@ std::string HelpMessage(HelpMessageMode mode)\n     string strUsage = HelpMessageGroup(_(\"Options:\"));\n     strUsage += HelpMessageOpt(\"-?\", _(\"Print this help message and exit\"));\n     strUsage += HelpMessageOpt(\"-version\", _(\"Print version and exit\"));\n-    strUsage += HelpMessageOpt(\"-alerts\", strprintf(_(\"Receive and display P2P network alerts (default: %u)\"), DEFAULT_ALERTS));\n     strUsage += HelpMessageOpt(\"-alertnotify=<cmd>\", _(\"Execute command when a relevant alert is received or we see a really long fork (%s in cmd is replaced by message)\"));\n     strUsage += HelpMessageOpt(\"-blocknotify=<cmd>\", _(\"Execute command when the best block changes (%s in cmd is replaced by block hash)\"));\n     if (showDebug)\n@@ -1002,8 +1001,6 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     fAcceptDatacarrier = GetBoolArg(\"-datacarrier\", DEFAULT_ACCEPT_DATACARRIER);\n     nMaxDatacarrierBytes = GetArg(\"-datacarriersize\", nMaxDatacarrierBytes);\n \n-    fAlerts = GetBoolArg(\"-alerts\", DEFAULT_ALERTS);\n-\n     // Option to startup with mocktime set (used for regression testing):\n     SetMockTime(GetArg(\"-mocktime\", 0)); // SetMockTime(0) is a no-op\n "
      },
      {
        "sha": "e78ce4cdf72e29854a5bda9b8544a002b4133c94",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/01fdfeffc4515ea43748230139a3bcee2eec3865/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/01fdfeffc4515ea43748230139a3bcee2eec3865/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=01fdfeffc4515ea43748230139a3bcee2eec3865",
        "patch": "@@ -74,7 +74,6 @@ bool fCheckBlockIndex = false;\n bool fCheckpointsEnabled = DEFAULT_CHECKPOINTS_ENABLED;\n size_t nCoinCacheUsage = 5000 * 300;\n uint64_t nPruneTarget = 0;\n-bool fAlerts = DEFAULT_ALERTS;\n int64_t nMaxTipAge = DEFAULT_MAX_TIP_AGE;\n bool fEnableReplacement = DEFAULT_ENABLE_REPLACEMENT;\n "
      },
      {
        "sha": "7ec48d9d0027b21dab48f4257f9312213bff9bfc",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/01fdfeffc4515ea43748230139a3bcee2eec3865/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/01fdfeffc4515ea43748230139a3bcee2eec3865/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=01fdfeffc4515ea43748230139a3bcee2eec3865",
        "patch": "@@ -42,8 +42,6 @@ class CValidationState;\n struct CNodeStateStats;\n struct LockPoints;\n \n-/** Default for accepting alerts from the P2P network. */\n-static const bool DEFAULT_ALERTS = true;\n /** Default for DEFAULT_WHITELISTRELAY. */\n static const bool DEFAULT_WHITELISTRELAY = true;\n /** Default for DEFAULT_WHITELISTFORCERELAY. */\n@@ -155,7 +153,6 @@ extern size_t nCoinCacheUsage;\n extern CFeeRate minRelayTxFee;\n /** Absolute maximum transaction fee (in satoshis) used by wallet and mempool (rejects high fee in sendrawtransaction) */\n extern CAmount maxTxFee;\n-extern bool fAlerts;\n /** If the tip is older than this (in seconds), the node is considered to be in initial block download. */\n extern int64_t nMaxTipAge;\n extern bool fEnableReplacement;"
      }
    ]
  },
  {
    "sha": "1b77471bd62b31b6682c5e40d2d8bf88db3034c7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYjc3NDcxYmQ2MmIzMWI2NjgyYzVlNDBkMmQ4YmY4OGRiMzAzNGM3",
    "commit": {
      "author": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-03-06T10:38:53Z"
      },
      "committer": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-03-18T19:55:16Z"
      },
      "message": "Remove alert keys",
      "tree": {
        "sha": "e644246516adc6806d8df70868883d18feedd482",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e644246516adc6806d8df70868883d18feedd482"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1b77471bd62b31b6682c5e40d2d8bf88db3034c7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b77471bd62b31b6682c5e40d2d8bf88db3034c7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1b77471bd62b31b6682c5e40d2d8bf88db3034c7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b77471bd62b31b6682c5e40d2d8bf88db3034c7/comments",
    "author": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "01fdfeffc4515ea43748230139a3bcee2eec3865",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01fdfeffc4515ea43748230139a3bcee2eec3865",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/01fdfeffc4515ea43748230139a3bcee2eec3865"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 0,
      "deletions": 5
    },
    "files": [
      {
        "sha": "508c4de1670bbb65da3a1dceb6bf9f03563d7ed7",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b77471bd62b31b6682c5e40d2d8bf88db3034c7/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b77471bd62b31b6682c5e40d2d8bf88db3034c7/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=1b77471bd62b31b6682c5e40d2d8bf88db3034c7",
        "patch": "@@ -95,7 +95,6 @@ class CMainParams : public CChainParams {\n         pchMessageStart[1] = 0xbe;\n         pchMessageStart[2] = 0xb4;\n         pchMessageStart[3] = 0xd9;\n-        vAlertPubKey = ParseHex(\"04fc9702847840aaf195de8442ebecedf5b095cdbb9bc716bda9110971b28a49e0ead8564ff0db22209e0374782c093bb899692d524e9d6a6956e7c5ecbcd68284\");\n         nDefaultPort = 8333;\n         nPruneAfterHeight = 100000;\n \n@@ -176,7 +175,6 @@ class CTestNetParams : public CChainParams {\n         pchMessageStart[1] = 0x11;\n         pchMessageStart[2] = 0x09;\n         pchMessageStart[3] = 0x07;\n-        vAlertPubKey = ParseHex(\"04302390343f91cc401d56d68b123028bf52e5fca1939df127f63c6467cdf9c8e2c14b61104cf817d0b780da337893ecc4aaff1309e536162dabbdb45200ca2b0a\");\n         nDefaultPort = 18333;\n         nPruneAfterHeight = 1000;\n "
      },
      {
        "sha": "59202f548a3ca745f2433d8a815a7e4930ccfeed",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b77471bd62b31b6682c5e40d2d8bf88db3034c7/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b77471bd62b31b6682c5e40d2d8bf88db3034c7/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=1b77471bd62b31b6682c5e40d2d8bf88db3034c7",
        "patch": "@@ -54,7 +54,6 @@ class CChainParams\n \n     const Consensus::Params& GetConsensus() const { return consensus; }\n     const CMessageHeader::MessageStartChars& MessageStart() const { return pchMessageStart; }\n-    const std::vector<unsigned char>& AlertKey() const { return vAlertPubKey; }\n     int GetDefaultPort() const { return nDefaultPort; }\n \n     const CBlock& GenesisBlock() const { return genesis; }\n@@ -80,8 +79,6 @@ class CChainParams\n \n     Consensus::Params consensus;\n     CMessageHeader::MessageStartChars pchMessageStart;\n-    //! Raw pub key bytes for the broadcast alert signing key.\n-    std::vector<unsigned char> vAlertPubKey;\n     int nDefaultPort;\n     uint64_t nPruneAfterHeight;\n     std::vector<CDNSSeedData> vSeeds;"
      }
    ]
  },
  {
    "sha": "ad7210408c5d2f7d13534da4f4ff1ff3afa82b3a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZDcyMTA0MDhjNWQyZjdkMTM1MzRkYTRmNGZmMWZmM2FmYTgyYjNh",
    "commit": {
      "author": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-03-16T09:13:50Z"
      },
      "committer": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-03-18T19:55:16Z"
      },
      "message": "Formatting",
      "tree": {
        "sha": "2e7aefa621d4fa62cd3d55905e71b74c6bc738a0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2e7aefa621d4fa62cd3d55905e71b74c6bc738a0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ad7210408c5d2f7d13534da4f4ff1ff3afa82b3a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad7210408c5d2f7d13534da4f4ff1ff3afa82b3a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ad7210408c5d2f7d13534da4f4ff1ff3afa82b3a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad7210408c5d2f7d13534da4f4ff1ff3afa82b3a/comments",
    "author": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1b77471bd62b31b6682c5e40d2d8bf88db3034c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b77471bd62b31b6682c5e40d2d8bf88db3034c7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1b77471bd62b31b6682c5e40d2d8bf88db3034c7"
      }
    ],
    "stats": {
      "total": 110,
      "additions": 55,
      "deletions": 55
    },
    "files": [
      {
        "sha": "70f1f12273a82f0003e86ed00893fe4df59323fe",
        "filename": "src/test/alert_tests.cpp",
        "status": "modified",
        "additions": 55,
        "deletions": 55,
        "changes": 110,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad7210408c5d2f7d13534da4f4ff1ff3afa82b3a/src/test/alert_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad7210408c5d2f7d13534da4f4ff1ff3afa82b3a/src/test/alert_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/alert_tests.cpp?ref=ad7210408c5d2f7d13534da4f4ff1ff3afa82b3a",
        "patch": "@@ -18,62 +18,62 @@ BOOST_FIXTURE_TEST_SUITE(Alert_tests, TestingSetup)\n static bool falseFunc() { return false; }\n \n BOOST_AUTO_TEST_CASE(PartitionAlert)\n-        {\n-                // Test PartitionCheck\n-                CCriticalSection csDummy;\n-        CBlockIndex indexDummy[100];\n-        CChainParams& params = Params(CBaseChainParams::MAIN);\n-        int64_t nPowTargetSpacing = params.GetConsensus().nPowTargetSpacing;\n-\n-        // Generate fake blockchain timestamps relative to\n-        // an arbitrary time:\n-        int64_t now = 1427379054;\n-        SetMockTime(now);\n-        for (int i = 0; i < 100; i++)\n-        {\n-            indexDummy[i].phashBlock = NULL;\n-            if (i == 0) indexDummy[i].pprev = NULL;\n-            else indexDummy[i].pprev = &indexDummy[i-1];\n-            indexDummy[i].nHeight = i;\n-            indexDummy[i].nTime = now - (100-i)*nPowTargetSpacing;\n-            // Other members don't matter, the partition check code doesn't\n-            // use them\n-        }\n-\n-        strMiscWarning = \"\";\n-\n-        // Test 1: chain with blocks every nPowTargetSpacing seconds,\n-        // as normal, no worries:\n-        PartitionCheck(falseFunc, csDummy, &indexDummy[99], nPowTargetSpacing);\n-        BOOST_CHECK_MESSAGE(strMiscWarning.empty(), strMiscWarning);\n-\n-        // Test 2: go 3.5 hours without a block, expect a warning:\n-        now += 3*60*60+30*60;\n-        SetMockTime(now);\n-        PartitionCheck(falseFunc, csDummy, &indexDummy[99], nPowTargetSpacing);\n-        BOOST_CHECK(!strMiscWarning.empty());\n-        BOOST_TEST_MESSAGE(std::string(\"Got alert text: \")+strMiscWarning);\n-        strMiscWarning = \"\";\n-\n-        // Test 3: test the \"partition alerts only go off once per day\"\n-        // code:\n-        now += 60*10;\n-        SetMockTime(now);\n-        PartitionCheck(falseFunc, csDummy, &indexDummy[99], nPowTargetSpacing);\n-        BOOST_CHECK(strMiscWarning.empty());\n-\n-        // Test 4: get 2.5 times as many blocks as expected:\n-        now += 60*60*24; // Pretend it is a day later\n-        SetMockTime(now);\n-        int64_t quickSpacing = nPowTargetSpacing*2/5;\n-        for (int i = 0; i < 100; i++) // Tweak chain timestamps:\n+{\n+    // Test PartitionCheck\n+    CCriticalSection csDummy;\n+    CBlockIndex indexDummy[100];\n+    CChainParams& params = Params(CBaseChainParams::MAIN);\n+    int64_t nPowTargetSpacing = params.GetConsensus().nPowTargetSpacing;\n+\n+    // Generate fake blockchain timestamps relative to\n+    // an arbitrary time:\n+    int64_t now = 1427379054;\n+    SetMockTime(now);\n+    for (int i = 0; i < 100; i++)\n+    {\n+        indexDummy[i].phashBlock = NULL;\n+        if (i == 0) indexDummy[i].pprev = NULL;\n+        else indexDummy[i].pprev = &indexDummy[i-1];\n+        indexDummy[i].nHeight = i;\n+        indexDummy[i].nTime = now - (100-i)*nPowTargetSpacing;\n+        // Other members don't matter, the partition check code doesn't\n+        // use them\n+    }\n+\n+    strMiscWarning = \"\";\n+\n+    // Test 1: chain with blocks every nPowTargetSpacing seconds,\n+    // as normal, no worries:\n+    PartitionCheck(falseFunc, csDummy, &indexDummy[99], nPowTargetSpacing);\n+    BOOST_CHECK_MESSAGE(strMiscWarning.empty(), strMiscWarning);\n+\n+    // Test 2: go 3.5 hours without a block, expect a warning:\n+    now += 3*60*60+30*60;\n+    SetMockTime(now);\n+    PartitionCheck(falseFunc, csDummy, &indexDummy[99], nPowTargetSpacing);\n+    BOOST_CHECK(!strMiscWarning.empty());\n+    BOOST_TEST_MESSAGE(std::string(\"Got alert text: \")+strMiscWarning);\n+    strMiscWarning = \"\";\n+\n+    // Test 3: test the \"partition alerts only go off once per day\"\n+    // code:\n+    now += 60*10;\n+    SetMockTime(now);\n+    PartitionCheck(falseFunc, csDummy, &indexDummy[99], nPowTargetSpacing);\n+    BOOST_CHECK(strMiscWarning.empty());\n+\n+    // Test 4: get 2.5 times as many blocks as expected:\n+    now += 60*60*24; // Pretend it is a day later\n+    SetMockTime(now);\n+    int64_t quickSpacing = nPowTargetSpacing*2/5;\n+    for (int i = 0; i < 100; i++) // Tweak chain timestamps:\n         indexDummy[i].nTime = now - (100-i)*quickSpacing;\n-        PartitionCheck(falseFunc, csDummy, &indexDummy[99], nPowTargetSpacing);\n-        BOOST_CHECK(!strMiscWarning.empty());\n-        BOOST_TEST_MESSAGE(std::string(\"Got alert text: \")+strMiscWarning);\n-        strMiscWarning = \"\";\n+    PartitionCheck(falseFunc, csDummy, &indexDummy[99], nPowTargetSpacing);\n+    BOOST_CHECK(!strMiscWarning.empty());\n+    BOOST_TEST_MESSAGE(std::string(\"Got alert text: \")+strMiscWarning);\n+    strMiscWarning = \"\";\n \n-        SetMockTime(0);\n-        }\n+    SetMockTime(0);\n+}\n \n BOOST_AUTO_TEST_SUITE_END()\n\\ No newline at end of file"
      }
    ]
  },
  {
    "sha": "6601ce508eaf2d0d853f35637a946938d31e8463",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NjAxY2U1MDhlYWYyZDBkODUzZjM1NjM3YTk0NjkzOGQzMWU4NDYz",
    "commit": {
      "author": {
        "name": "Thomas Kerin",
        "email": "afk11@users.noreply.github.com",
        "date": "2016-03-18T18:20:04Z"
      },
      "committer": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-03-18T19:55:16Z"
      },
      "message": "protocol.h/cpp: Removes NetMsgType::ALERT",
      "tree": {
        "sha": "1fd09c02f53abee99adfae784d1e4e9e9369e254",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1fd09c02f53abee99adfae784d1e4e9e9369e254"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6601ce508eaf2d0d853f35637a946938d31e8463",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6601ce508eaf2d0d853f35637a946938d31e8463",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6601ce508eaf2d0d853f35637a946938d31e8463",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6601ce508eaf2d0d853f35637a946938d31e8463/comments",
    "author": {
      "login": "afk11",
      "id": 5617245,
      "node_id": "MDQ6VXNlcjU2MTcyNDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5617245?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/afk11",
      "html_url": "https://github.com/afk11",
      "followers_url": "https://api.github.com/users/afk11/followers",
      "following_url": "https://api.github.com/users/afk11/following{/other_user}",
      "gists_url": "https://api.github.com/users/afk11/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/afk11/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/afk11/subscriptions",
      "organizations_url": "https://api.github.com/users/afk11/orgs",
      "repos_url": "https://api.github.com/users/afk11/repos",
      "events_url": "https://api.github.com/users/afk11/events{/privacy}",
      "received_events_url": "https://api.github.com/users/afk11/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ad7210408c5d2f7d13534da4f4ff1ff3afa82b3a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad7210408c5d2f7d13534da4f4ff1ff3afa82b3a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ad7210408c5d2f7d13534da4f4ff1ff3afa82b3a"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 0,
      "deletions": 9
    },
    "files": [
      {
        "sha": "1ddb65b796814f0cda9280cc9841ab7245b01dd1",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6601ce508eaf2d0d853f35637a946938d31e8463/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6601ce508eaf2d0d853f35637a946938d31e8463/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=6601ce508eaf2d0d853f35637a946938d31e8463",
        "patch": "@@ -28,7 +28,6 @@ const char *GETADDR=\"getaddr\";\n const char *MEMPOOL=\"mempool\";\n const char *PING=\"ping\";\n const char *PONG=\"pong\";\n-const char *ALERT=\"alert\";\n const char *NOTFOUND=\"notfound\";\n const char *FILTERLOAD=\"filterload\";\n const char *FILTERADD=\"filteradd\";\n@@ -64,7 +63,6 @@ const static std::string allNetMessageTypes[] = {\n     NetMsgType::MEMPOOL,\n     NetMsgType::PING,\n     NetMsgType::PONG,\n-    NetMsgType::ALERT,\n     NetMsgType::NOTFOUND,\n     NetMsgType::FILTERLOAD,\n     NetMsgType::FILTERADD,"
      },
      {
        "sha": "5504f213f471cb1060a9b00b44c683e4cd18ba06",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6601ce508eaf2d0d853f35637a946938d31e8463/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6601ce508eaf2d0d853f35637a946938d31e8463/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=6601ce508eaf2d0d853f35637a946938d31e8463",
        "patch": "@@ -163,13 +163,6 @@ extern const char *PING;\n  * @see https://bitcoin.org/en/developer-reference#pong\n  */\n extern const char *PONG;\n-/**\n- * The alert message warns nodes of problems that may affect them or the rest\n- * of the network.\n- * @since protocol version 311.\n- * @see https://bitcoin.org/en/developer-reference#alert\n- */\n-extern const char *ALERT;\n /**\n  * The notfound message is a reply to a getdata message which requested an\n  * object the receiving node does not have available for relay."
      }
    ]
  },
  {
    "sha": "cfd519e942aecd763449157a4a5ed602bcddd3a1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZmQ1MTllOTQyYWVjZDc2MzQ0OTE1N2E0YTVlZDYwMmJjZGRkM2Ex",
    "commit": {
      "author": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-03-18T19:11:27Z"
      },
      "committer": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-03-18T19:55:16Z"
      },
      "message": "Add release note documentation",
      "tree": {
        "sha": "f07584d121606b4270ddb64761d25619db8ac884",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f07584d121606b4270ddb64761d25619db8ac884"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cfd519e942aecd763449157a4a5ed602bcddd3a1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cfd519e942aecd763449157a4a5ed602bcddd3a1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cfd519e942aecd763449157a4a5ed602bcddd3a1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cfd519e942aecd763449157a4a5ed602bcddd3a1/comments",
    "author": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6601ce508eaf2d0d853f35637a946938d31e8463",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6601ce508eaf2d0d853f35637a946938d31e8463",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6601ce508eaf2d0d853f35637a946938d31e8463"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "43e1e3fb9aabb6bee0124f96f5e893ea07ab0764",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cfd519e942aecd763449157a4a5ed602bcddd3a1/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cfd519e942aecd763449157a4a5ed602bcddd3a1/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=cfd519e942aecd763449157a4a5ed602bcddd3a1",
        "patch": "@@ -51,6 +51,8 @@ The following outputs are affected by this change:\n \n ### P2P protocol and network code\n \n+The p2p alert system has been removed in #7692 and the 'alert' message is no longer supported.\n+\n ### Validation\n \n ### Build system"
      }
    ]
  }
]