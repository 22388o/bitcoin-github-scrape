[
  {
    "sha": "4b714b7c8bc1a7fa01cfd92c231e0aa3f8a85ffa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YjcxNGI3YzhiYzFhN2ZhMDFjZmQ5MmMyMzFlMGFhM2Y4YTg1ZmZh",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2019-01-25T19:52:08Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2019-01-25T19:52:08Z"
      },
      "message": "validation: remove useless uncache accounting in ATMPW",
      "tree": {
        "sha": "2920dfbb5844b16c7e2eb028604fcb43562625ba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2920dfbb5844b16c7e2eb028604fcb43562625ba"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4b714b7c8bc1a7fa01cfd92c231e0aa3f8a85ffa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b714b7c8bc1a7fa01cfd92c231e0aa3f8a85ffa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4b714b7c8bc1a7fa01cfd92c231e0aa3f8a85ffa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b714b7c8bc1a7fa01cfd92c231e0aa3f8a85ffa/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ab46fe6ec1b37e88c5a06ee7a06ab31cbd18304f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab46fe6ec1b37e88c5a06ee7a06ab31cbd18304f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ab46fe6ec1b37e88c5a06ee7a06ab31cbd18304f"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 2,
      "deletions": 10
    },
    "files": [
      {
        "sha": "05e779fdf740ada25d8cddfee4a40af4c63da0c3",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 10,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b714b7c8bc1a7fa01cfd92c231e0aa3f8a85ffa/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b714b7c8bc1a7fa01cfd92c231e0aa3f8a85ffa/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=4b714b7c8bc1a7fa01cfd92c231e0aa3f8a85ffa",
        "patch": "@@ -567,7 +567,7 @@ static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, CValidationSt\n \n static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool& pool, CValidationState& state, const CTransactionRef& ptx,\n                               bool* pfMissingInputs, int64_t nAcceptTime, std::list<CTransactionRef>* plTxnReplaced,\n-                              bool bypass_limits, const CAmount& nAbsurdFee, std::vector<COutPoint>& coins_to_uncache, bool test_accept) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+                              bool bypass_limits, const CAmount& nAbsurdFee, bool test_accept) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     const CTransaction& tx = *ptx;\n     const uint256 hash = tx.GetHash();\n@@ -657,9 +657,6 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n \n         // do all inputs exist?\n         for (const CTxIn& txin : tx.vin) {\n-            if (!pcoinsTip->HaveCoinInCache(txin.prevout)) {\n-                coins_to_uncache.push_back(txin.prevout);\n-            }\n             if (!view.HaveCoin(txin.prevout)) {\n                 // Are inputs missing because we already have the tx?\n                 for (size_t out = 0; out < tx.vout.size(); out++) {\n@@ -978,12 +975,7 @@ static bool AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPo\n                         bool* pfMissingInputs, int64_t nAcceptTime, std::list<CTransactionRef>* plTxnReplaced,\n                         bool bypass_limits, const CAmount nAbsurdFee, bool test_accept) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n-    std::vector<COutPoint> coins_to_uncache;\n-    bool res = AcceptToMemoryPoolWorker(chainparams, pool, state, tx, pfMissingInputs, nAcceptTime, plTxnReplaced, bypass_limits, nAbsurdFee, coins_to_uncache, test_accept);\n-    if (!res) {\n-        for (const COutPoint& hashTx : coins_to_uncache)\n-            pcoinsTip->Uncache(hashTx);\n-    }\n+    bool res = AcceptToMemoryPoolWorker(chainparams, pool, state, tx, pfMissingInputs, nAcceptTime, plTxnReplaced, bypass_limits, nAbsurdFee, test_accept);\n     // After we've (potentially) uncached entries, ensure our coins cache is still within its size limits\n     CValidationState stateDummy;\n     FlushStateToDisk(chainparams, stateDummy, FlushStateMode::PERIODIC);"
      }
    ]
  }
]