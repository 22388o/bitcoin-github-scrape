[
  {
    "sha": "a1fcceac69097a8e6540a6fd8121a5d53022528f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMWZjY2VhYzY5MDk3YThlNjU0MGE2ZmQ4MTIxYTVkNTMwMjI1Mjhm",
    "commit": {
      "author": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2021-01-14T00:27:37Z"
      },
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2021-01-24T15:28:27Z"
      },
      "message": "refactor: Improve encapsulation between MuHash3072 and Num3072\n\nAlso fixes a typo.",
      "tree": {
        "sha": "8636496edd5f9d46bcc77c391a914c18a8ec3d35",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8636496edd5f9d46bcc77c391a914c18a8ec3d35"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a1fcceac69097a8e6540a6fd8121a5d53022528f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAmANkiAVHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jNjhMP/0KkVf2NUsTpcfxJ379wrES8G9Bd\ntqWaVCfKZ2G32jFyayr1P8tJSJgF/IYtllzLJXJFc8VSiPa/EbbhnpZqmN2FMjaO\nRDGhEaGe/ca4ksJ+BzWeGwihgMLLJaE7Xfo3/V0LmVZtvg2jm2j4LGTwaju65zKj\nQKG2OTvJLqpjKzXdcALu+yunGSFgKX+SGpZBmUPGPw2G+NDjbHMnbP4kBZCqsK8s\nihZXUUojtePf1+Xex8zpUjmlxVQWv/ULA2HZOH1NCRf2COiXJZ3WHVlKrpTO/Eeg\n8ENYAZVw/mhlR/5AWn7FMZI7OFWCmOiw1V0t5ErE2viZsT8oFKXF0YJfXySyBh5m\nuMCKbkvvNIAz7AnKHN/GNGNN2bQwBd2egjmkGd29Nz2tun8wydPw+D2XU2T6p4wp\nyVChlwLfLroURHM3GRthihH3Xx2RqN+Cy4WjC0iAILBj9PHnnUywGP1Zwt58dWVv\n7kipxDH5IK0U+uO8fJjGU7e8i8NUbgHtoIsZRsUOqnf90kzE9ClhLPQWJpIya9UU\nn49WuB5w//onpH3mqAIem/s3zHBguZKWee1eU4GAM8uKjtBP8TphcoI1O4IKaJbI\n66GT4pcDY66/da9j68MYpOPoaduFtMuEPjUnKXCzrIz3xfk6NdXMtU1ST3rnLLzi\nGUFUs/WVypjgYlVt\n=Z0sE\n-----END PGP SIGNATURE-----",
        "payload": "tree 8636496edd5f9d46bcc77c391a914c18a8ec3d35\nparent cb2c578451770a29395f79f7077c362e1f54dfdd\nauthor Fabian Jahr <fjahr@protonmail.com> 1610584057 +0100\ncommitter Fabian Jahr <fjahr@protonmail.com> 1611502107 +0100\n\nrefactor: Improve encapsulation between MuHash3072 and Num3072\n\nAlso fixes a typo.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1fcceac69097a8e6540a6fd8121a5d53022528f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a1fcceac69097a8e6540a6fd8121a5d53022528f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1fcceac69097a8e6540a6fd8121a5d53022528f/comments",
    "author": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cb2c578451770a29395f79f7077c362e1f54dfdd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb2c578451770a29395f79f7077c362e1f54dfdd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cb2c578451770a29395f79f7077c362e1f54dfdd"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 29,
      "deletions": 20
    },
    "files": [
      {
        "sha": "e5a0d4cb9c725c9d17d7100a606016d24e72c7d7",
        "filename": "src/crypto/muhash.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 17,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a1fcceac69097a8e6540a6fd8121a5d53022528f/src/crypto/muhash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a1fcceac69097a8e6540a6fd8121a5d53022528f/src/crypto/muhash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/muhash.cpp?ref=a1fcceac69097a8e6540a6fd8121a5d53022528f",
        "patch": "@@ -17,7 +17,6 @@ namespace {\n using limb_t = Num3072::limb_t;\n using double_limb_t = Num3072::double_limb_t;\n constexpr int LIMB_SIZE = Num3072::LIMB_SIZE;\n-constexpr int LIMBS = Num3072::LIMBS;\n /** 2^3072 - 1103717, the largest 3072-bit safe prime number, is used as the modulus. */\n constexpr limb_t MAX_PRIME_DIFF = 1103717;\n \n@@ -123,7 +122,7 @@ inline void square_n_mul(Num3072& in_out, const int sq, const Num3072& mul)\n \n } // namespace\n \n-/** Indicates wether d is larger than the modulus. */\n+/** Indicates whether d is larger than the modulus. */\n bool Num3072::IsOverflow() const\n {\n     if (this->limbs[0] <= std::numeric_limits<limb_t>::max() - MAX_PRIME_DIFF) return false;\n@@ -276,18 +275,33 @@ void Num3072::Divide(const Num3072& a)\n     if (this->IsOverflow()) this->FullReduce();\n }\n \n-Num3072 MuHash3072::ToNum3072(Span<const unsigned char> in) {\n-    Num3072 out{};\n-    uint256 hashed_in = (CHashWriter(SER_DISK, 0) << in).GetSHA256();\n-    unsigned char tmp[BYTE_SIZE];\n-    ChaCha20(hashed_in.data(), hashed_in.size()).Keystream(tmp, BYTE_SIZE);\n+Num3072::Num3072(const unsigned char (&data)[BYTE_SIZE]) {\n+    for (int i = 0; i < LIMBS; ++i) {\n+        if (sizeof(limb_t) == 4) {\n+            this->limbs[i] = ReadLE32(data + 4 * i);\n+        } else if (sizeof(limb_t) == 8) {\n+            this->limbs[i] = ReadLE64(data + 8 * i);\n+        }\n+    }\n+}\n+\n+void Num3072::ToBytes(unsigned char (&out)[BYTE_SIZE]) {\n     for (int i = 0; i < LIMBS; ++i) {\n         if (sizeof(limb_t) == 4) {\n-            out.limbs[i] = ReadLE32(tmp + 4 * i);\n+            WriteLE32(out + i * 4, this->limbs[i]);\n         } else if (sizeof(limb_t) == 8) {\n-            out.limbs[i] = ReadLE64(tmp + 8 * i);\n+            WriteLE64(out + i * 8, this->limbs[i]);\n         }\n     }\n+}\n+\n+Num3072 MuHash3072::ToNum3072(Span<const unsigned char> in) {\n+    unsigned char tmp[Num3072::BYTE_SIZE];\n+\n+    uint256 hashed_in = (CHashWriter(SER_DISK, 0) << in).GetSHA256();\n+    ChaCha20(hashed_in.data(), hashed_in.size()).Keystream(tmp, Num3072::BYTE_SIZE);\n+    Num3072 out{tmp};\n+\n     return out;\n }\n \n@@ -301,14 +315,8 @@ void MuHash3072::Finalize(uint256& out) noexcept\n     m_numerator.Divide(m_denominator);\n     m_denominator.SetToOne();  // Needed to keep the MuHash object valid\n \n-    unsigned char data[384];\n-    for (int i = 0; i < LIMBS; ++i) {\n-        if (sizeof(limb_t) == 4) {\n-            WriteLE32(data + i * 4, m_numerator.limbs[i]);\n-        } else if (sizeof(limb_t) == 8) {\n-            WriteLE64(data + i * 8, m_numerator.limbs[i]);\n-        }\n-    }\n+    unsigned char data[Num3072::BYTE_SIZE];\n+    m_numerator.ToBytes(data);\n \n     out = (CHashWriter(SER_DISK, 0) << data).GetSHA256();\n }"
      },
      {
        "sha": "c023a8b9d3f2a55a0bc6a612763763b8aa206769",
        "filename": "src/crypto/muhash.h",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a1fcceac69097a8e6540a6fd8121a5d53022528f/src/crypto/muhash.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a1fcceac69097a8e6540a6fd8121a5d53022528f/src/crypto/muhash.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/muhash.h?ref=a1fcceac69097a8e6540a6fd8121a5d53022528f",
        "patch": "@@ -22,6 +22,7 @@ class Num3072\n     Num3072 GetInverse() const;\n \n public:\n+    static constexpr size_t BYTE_SIZE = 384;\n \n #ifdef HAVE___INT128\n     typedef unsigned __int128 double_limb_t;\n@@ -48,8 +49,10 @@ class Num3072\n     void Divide(const Num3072& a);\n     void SetToOne();\n     void Square();\n+    void ToBytes(unsigned char (&out)[BYTE_SIZE]);\n \n     Num3072() { this->SetToOne(); };\n+    Num3072(const unsigned char (&data)[BYTE_SIZE]);\n \n     SERIALIZE_METHODS(Num3072, obj)\n     {\n@@ -78,7 +81,7 @@ class Num3072\n  * arbitrary subset of the update operations, allowing them to be\n  * efficiently combined later.\n  *\n- * Muhash does not support checking if an element is already part of the\n+ * MuHash does not support checking if an element is already part of the\n  * set. That is why this class does not enforce the use of a set as the\n  * data it represents because there is no efficient way to do so.\n  * It is possible to add elements more than once and also to remove\n@@ -91,8 +94,6 @@ class Num3072\n class MuHash3072\n {\n private:\n-    static constexpr size_t BYTE_SIZE = 384;\n-\n     Num3072 m_numerator;\n     Num3072 m_denominator;\n "
      }
    ]
  },
  {
    "sha": "2474645f3b15687e7f196b89eb935d6e6a98a9da",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNDc0NjQ1ZjNiMTU2ODdlN2YxOTZiODllYjkzNWQ2ZTZhOThhOWRh",
    "commit": {
      "author": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-07-05T10:15:32Z"
      },
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2021-01-30T15:51:02Z"
      },
      "message": "refactor: Separate hash and stats calculation in coinstats",
      "tree": {
        "sha": "a0d128720f7a7bf323e0a9a5ead67a9ead01c2e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a0d128720f7a7bf323e0a9a5ead67a9ead01c2e4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2474645f3b15687e7f196b89eb935d6e6a98a9da",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAmAVgGgVHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jNqnUP/i0LDPhd46tCi3tzuQphU/3c7c1p\nJlknUHqEqmJuDKxrG7RbMefQzzSgWmnEqUf9KWK1RBrAozubVOoSUN3xZE0RXJKu\n9c4dyalTHgLcmAtKvsGXcww2TJMvYPwqqrO9LlNDjCtcuAc6Mz3QAg0s2vbZhJiW\nGGRaeTst1hXKlDXc3ARqCwgqrewik7tGfbZOfzCPtj+QBgt38dlb/opjNaBAXXJ0\nxpJmdEvUWIx/ys6TukGXfnH2P3xcCal6Oh35nmVE4d7YsZWN4ou3NfDfP0C4UJPh\nWR6IHCDiFlvlng5LA5tpyYc+ZVEFe9FCHBa4mLyO8/1lbLjBzzDcnW+ZmTiJDlML\nYClHhozWW43GymnsAGJLeQVDIn+pHa7zmjzpGVmtu/uUbca+LQ9pUycxTod+bWrV\nxk/Q8H0XjeRLLIHXgR19lh+FDXz0/AAnd9iWm8oXeXglEdECZ8Km5TcO2Lx1gf5M\nADBuFr57OWk8m4OQ4ahfxvbKCgPXZdlU2XsIz0cvgQLZW//LA89P8VwbRboeRM8F\nllP4mZr+jhN67d/P2nKz3cAbgdkFe8lBRfHkmv4dNUUFnvG82I3CYoCvFXaPpA8+\nOUWlL+lLSVoH42hTT5AA5DFKQyJmvB5QYOpE89AMbFInooC9QZlk5Poqsv1SU2uA\nk8uIP0drNp5y8n6n\n=ew/F\n-----END PGP SIGNATURE-----",
        "payload": "tree a0d128720f7a7bf323e0a9a5ead67a9ead01c2e4\nparent a1fcceac69097a8e6540a6fd8121a5d53022528f\nauthor Fabian Jahr <fjahr@protonmail.com> 1593944132 +0200\ncommitter Fabian Jahr <fjahr@protonmail.com> 1612021862 +0100\n\nrefactor: Separate hash and stats calculation in coinstats\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2474645f3b15687e7f196b89eb935d6e6a98a9da",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2474645f3b15687e7f196b89eb935d6e6a98a9da",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2474645f3b15687e7f196b89eb935d6e6a98a9da/comments",
    "author": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a1fcceac69097a8e6540a6fd8121a5d53022528f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1fcceac69097a8e6540a6fd8121a5d53022528f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a1fcceac69097a8e6540a6fd8121a5d53022528f"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 21,
      "deletions": 17
    },
    "files": [
      {
        "sha": "4620a6734f5bdc7134827a112a72cdc20f16508a",
        "filename": "src/node/coinstats.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 17,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2474645f3b15687e7f196b89eb935d6e6a98a9da/src/node/coinstats.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2474645f3b15687e7f196b89eb935d6e6a98a9da/src/node/coinstats.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/coinstats.cpp?ref=2474645f3b15687e7f196b89eb935d6e6a98a9da",
        "patch": "@@ -24,31 +24,35 @@ static uint64_t GetBogoSize(const CScript& scriptPubKey)\n            scriptPubKey.size() /* scriptPubKey */;\n }\n \n-static void ApplyStats(CCoinsStats& stats, CHashWriter& ss, const uint256& hash, const std::map<uint32_t, Coin>& outputs)\n+static void ApplyHash(CCoinsStats& stats, CHashWriter& ss, const uint256& hash, const std::map<uint32_t, Coin>& outputs, std::map<uint32_t, Coin>::const_iterator it)\n {\n-    assert(!outputs.empty());\n-    ss << hash;\n-    ss << VARINT(outputs.begin()->second.nHeight * 2 + outputs.begin()->second.fCoinBase ? 1u : 0u);\n-    stats.nTransactions++;\n-    for (const auto& output : outputs) {\n-        ss << VARINT(output.first + 1);\n-        ss << output.second.out.scriptPubKey;\n-        ss << VARINT_MODE(output.second.out.nValue, VarIntMode::NONNEGATIVE_SIGNED);\n-        stats.nTransactionOutputs++;\n-        stats.nTotalAmount += output.second.out.nValue;\n-        stats.nBogoSize += GetBogoSize(output.second.out.scriptPubKey);\n+    if (it == outputs.begin()) {\n+        ss << hash;\n+        ss << VARINT(it->second.nHeight * 2 + it->second.fCoinBase ? 1u : 0u);\n+    }\n+\n+    ss << VARINT(it->first + 1);\n+    ss << it->second.out.scriptPubKey;\n+    ss << VARINT_MODE(it->second.out.nValue, VarIntMode::NONNEGATIVE_SIGNED);\n+\n+    if (it == std::prev(outputs.end())) {\n+        ss << VARINT(0u);\n     }\n-    ss << VARINT(0u);\n }\n \n-static void ApplyStats(CCoinsStats& stats, std::nullptr_t, const uint256& hash, const std::map<uint32_t, Coin>& outputs)\n+static void ApplyHash(CCoinsStats& stats, std::nullptr_t, const uint256& hash, const std::map<uint32_t, Coin>& outputs, std::map<uint32_t, Coin>::const_iterator it) {}\n+\n+template <typename T>\n+static void ApplyStats(CCoinsStats &stats, T& hash_obj, const uint256& hash, const std::map<uint32_t, Coin>& outputs)\n {\n     assert(!outputs.empty());\n     stats.nTransactions++;\n-    for (const auto& output : outputs) {\n+    for (auto it = outputs.begin(); it != outputs.end(); ++it) {\n+        ApplyHash(stats, hash_obj, hash, outputs, it);\n+\n         stats.nTransactionOutputs++;\n-        stats.nTotalAmount += output.second.out.nValue;\n-        stats.nBogoSize += GetBogoSize(output.second.out.scriptPubKey);\n+        stats.nTotalAmount += it->second.out.nValue;\n+        stats.nBogoSize += GetBogoSize(it->second.out.scriptPubKey);\n     }\n }\n "
      }
    ]
  },
  {
    "sha": "0d3b2f643d7da3202c0a0e757539208c4aa7c450",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZDNiMmY2NDNkN2RhMzIwMmMwYTBlNzU3NTM5MjA4YzRhYTdjNDUw",
    "commit": {
      "author": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-06-02T21:55:32Z"
      },
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2021-01-30T16:38:21Z"
      },
      "message": "rpc: Add hash_type MUHASH to gettxoutsetinfo\n\nAlso small style fix in rpc/util.cpp",
      "tree": {
        "sha": "513418d1567e6c1199b6a8c5a24f526ca22c5e97",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/513418d1567e6c1199b6a8c5a24f526ca22c5e97"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0d3b2f643d7da3202c0a0e757539208c4aa7c450",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAmAVi4EVHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jNiH0P/RoRK18zNnGnoBemQguCfyiNwMph\nbmf3q91Lte5ot/XfO/Bf/nXLh7KfgRSjL1lJlz/XlCmzjn/0t+PtwL8wo4bwf50M\nT+WZKpvwhlFBiTY6x7ty+Yu8wYto7Pvgp+83PSwv5DZ+myHRwusYMjdl77M3wQym\no3neisHLDP8dK487OceMWjTyqjjfJkLcjANdQ/hp0uHTqPGBqJOShXPg2ocu4X0R\nwAOCBL6jowPuZhbG684d48Dpaf3wEsUWJPkxCeud6kdUgwXEGu7Fb1jxmIFuXhU5\nFLIqGAu62uOHB4/7dMZb0wFwVrZQKzfMTqLIM05dlDVC0pO9JxSB1uer7FJgZ8/9\ni1DUwy4z0Ls7Q/ekYTqOfrjMdgQVHNYV9XjQWojihZLsDMnDLnVOwlmgoCRBFNgO\nLEbQLFfbGq95Iz9S9L+e8L9CJVQGxhhBVGbCNj4PvefrrDf/ePzTvVIauXbx6dYh\nINGAG2IgFAuYDMki3AIpAWgS1IhUPc1EEhvSuqFqRrLhMxOtJ07e0cBXiZY7kIZQ\nxCSITlbcqvVDrrUaRBFBxfCKDPuE/nXjGFCLyLmkZMGpt30GFhuzIvsLdTsf1b8A\nAIKd9QheNmUFd5iCN5dmlAKQXdCMs1IcosdBJfx5YgRJ911aTU3kDGU5X+Y9aCnn\nsA1VDVnbx3HViYF8\n=M5cc\n-----END PGP SIGNATURE-----",
        "payload": "tree 513418d1567e6c1199b6a8c5a24f526ca22c5e97\nparent 2474645f3b15687e7f196b89eb935d6e6a98a9da\nauthor Fabian Jahr <fjahr@protonmail.com> 1591134932 +0200\ncommitter Fabian Jahr <fjahr@protonmail.com> 1612024701 +0100\n\nrpc: Add hash_type MUHASH to gettxoutsetinfo\n\nAlso small style fix in rpc/util.cpp\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d3b2f643d7da3202c0a0e757539208c4aa7c450",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0d3b2f643d7da3202c0a0e757539208c4aa7c450",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d3b2f643d7da3202c0a0e757539208c4aa7c450/comments",
    "author": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2474645f3b15687e7f196b89eb935d6e6a98a9da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2474645f3b15687e7f196b89eb935d6e6a98a9da",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2474645f3b15687e7f196b89eb935d6e6a98a9da"
      }
    ],
    "stats": {
      "total": 82,
      "additions": 59,
      "deletions": 23
    },
    "files": [
      {
        "sha": "be513f582a316aed77a67a2a54db624293d86d87",
        "filename": "src/node/coinstats.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 1,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d3b2f643d7da3202c0a0e757539208c4aa7c450/src/node/coinstats.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d3b2f643d7da3202c0a0e757539208c4aa7c450/src/node/coinstats.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/coinstats.cpp?ref=0d3b2f643d7da3202c0a0e757539208c4aa7c450",
        "patch": "@@ -6,6 +6,7 @@\n #include <node/coinstats.h>\n \n #include <coins.h>\n+#include <crypto/muhash.h>\n #include <hash.h>\n #include <serialize.h>\n #include <uint256.h>\n@@ -42,8 +43,20 @@ static void ApplyHash(CCoinsStats& stats, CHashWriter& ss, const uint256& hash,\n \n static void ApplyHash(CCoinsStats& stats, std::nullptr_t, const uint256& hash, const std::map<uint32_t, Coin>& outputs, std::map<uint32_t, Coin>::const_iterator it) {}\n \n+static void ApplyHash(CCoinsStats& stats, MuHash3072& muhash, const uint256& hash, const std::map<uint32_t, Coin>& outputs, std::map<uint32_t, Coin>::const_iterator it)\n+{\n+    COutPoint outpoint = COutPoint(hash, it->first);\n+    Coin coin = it->second;\n+\n+    CDataStream ss(SER_DISK, PROTOCOL_VERSION);\n+    ss << outpoint;\n+    ss << static_cast<uint32_t>(coin.nHeight * 2 + coin.fCoinBase);\n+    ss << coin.out;\n+    muhash.Insert(MakeUCharSpan(ss));\n+}\n+\n template <typename T>\n-static void ApplyStats(CCoinsStats &stats, T& hash_obj, const uint256& hash, const std::map<uint32_t, Coin>& outputs)\n+static void ApplyStats(CCoinsStats& stats, T& hash_obj, const uint256& hash, const std::map<uint32_t, Coin>& outputs)\n {\n     assert(!outputs.empty());\n     stats.nTransactions++;\n@@ -108,6 +121,10 @@ bool GetUTXOStats(CCoinsView* view, CCoinsStats& stats, CoinStatsHashType hash_t\n         CHashWriter ss(SER_GETHASH, PROTOCOL_VERSION);\n         return GetUTXOStats(view, stats, ss, interruption_point);\n     }\n+    case(CoinStatsHashType::MUHASH): {\n+        MuHash3072 muhash;\n+        return GetUTXOStats(view, stats, muhash, interruption_point);\n+    }\n     case(CoinStatsHashType::NONE): {\n         return GetUTXOStats(view, stats, nullptr, interruption_point);\n     }\n@@ -120,10 +137,18 @@ static void PrepareHash(CHashWriter& ss, const CCoinsStats& stats)\n {\n     ss << stats.hashBlock;\n }\n+// MuHash does not need the prepare step\n+static void PrepareHash(MuHash3072& muhash, CCoinsStats& stats) {}\n static void PrepareHash(std::nullptr_t, CCoinsStats& stats) {}\n \n static void FinalizeHash(CHashWriter& ss, CCoinsStats& stats)\n {\n     stats.hashSerialized = ss.GetHash();\n }\n+static void FinalizeHash(MuHash3072& muhash, CCoinsStats& stats)\n+{\n+    uint256 out;\n+    muhash.Finalize(out);\n+    stats.hashSerialized = out;\n+}\n static void FinalizeHash(std::nullptr_t, CCoinsStats& stats) {}"
      },
      {
        "sha": "f02b95235ff313fb095951ce6edabddcbbf3f3ab",
        "filename": "src/node/coinstats.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d3b2f643d7da3202c0a0e757539208c4aa7c450/src/node/coinstats.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d3b2f643d7da3202c0a0e757539208c4aa7c450/src/node/coinstats.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/coinstats.h?ref=0d3b2f643d7da3202c0a0e757539208c4aa7c450",
        "patch": "@@ -16,6 +16,7 @@ class CCoinsView;\n \n enum class CoinStatsHashType {\n     HASH_SERIALIZED,\n+    MUHASH,\n     NONE,\n };\n "
      },
      {
        "sha": "cca9e0025a46c0dec64fe8a6ba5e034a6c27bacd",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 3,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d3b2f643d7da3202c0a0e757539208c4aa7c450/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d3b2f643d7da3202c0a0e757539208c4aa7c450/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=0d3b2f643d7da3202c0a0e757539208c4aa7c450",
        "patch": "@@ -1047,13 +1047,26 @@ static RPCHelpMan pruneblockchain()\n     };\n }\n \n+CoinStatsHashType ParseHashType(const std::string& hash_type_input)\n+{\n+    if (hash_type_input == \"hash_serialized_2\") {\n+        return CoinStatsHashType::HASH_SERIALIZED;\n+    } else if (hash_type_input == \"muhash\") {\n+        return CoinStatsHashType::MUHASH;\n+    } else if (hash_type_input == \"none\") {\n+        return CoinStatsHashType::NONE;\n+    } else {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"%s is not a valid hash_type\", hash_type_input));\n+    }\n+}\n+\n static RPCHelpMan gettxoutsetinfo()\n {\n     return RPCHelpMan{\"gettxoutsetinfo\",\n                 \"\\nReturns statistics about the unspent transaction output set.\\n\"\n                 \"Note this call may take some time.\\n\",\n                 {\n-                    {\"hash_type\", RPCArg::Type::STR, /* default */ \"hash_serialized_2\", \"Which UTXO set hash should be calculated. Options: 'hash_serialized_2' (the legacy algorithm), 'none'.\"},\n+                    {\"hash_type\", RPCArg::Type::STR, /* default */ \"hash_serialized_2\", \"Which UTXO set hash should be calculated. Options: 'hash_serialized_2' (the legacy algorithm), 'muhash', 'none'.\"},\n                 },\n                 RPCResult{\n                     RPCResult::Type::OBJ, \"\", \"\",\n@@ -1063,7 +1076,8 @@ static RPCHelpMan gettxoutsetinfo()\n                         {RPCResult::Type::NUM, \"transactions\", \"The number of transactions with unspent outputs\"},\n                         {RPCResult::Type::NUM, \"txouts\", \"The number of unspent transaction outputs\"},\n                         {RPCResult::Type::NUM, \"bogosize\", \"A meaningless metric for UTXO set size\"},\n-                        {RPCResult::Type::STR_HEX, \"hash_serialized_2\", \"The serialized hash (only present if 'hash_serialized_2' hash_type is chosen)\"},\n+                        {RPCResult::Type::STR_HEX, \"hash_serialized_2\", /* optional */ true, \"The serialized hash (only present if 'hash_serialized_2' hash_type is chosen)\"},\n+                        {RPCResult::Type::STR_HEX, \"muhash\", /* optional */ true, \"The serialized hash (only present if 'muhash' hash_type is chosen)\"},\n                         {RPCResult::Type::NUM, \"disk_size\", \"The estimated size of the chainstate on disk\"},\n                         {RPCResult::Type::STR_AMOUNT, \"total_amount\", \"The total amount\"},\n                     }},\n@@ -1078,7 +1092,7 @@ static RPCHelpMan gettxoutsetinfo()\n     CCoinsStats stats;\n     ::ChainstateActive().ForceFlushStateToDisk();\n \n-    const CoinStatsHashType hash_type = ParseHashType(request.params[0], CoinStatsHashType::HASH_SERIALIZED);\n+    const CoinStatsHashType hash_type{request.params[0].isNull() ? CoinStatsHashType::HASH_SERIALIZED : ParseHashType(request.params[0].get_str())};\n \n     CCoinsView* coins_view = WITH_LOCK(cs_main, return &ChainstateActive().CoinsDB());\n     NodeContext& node = EnsureNodeContext(request.context);\n@@ -1091,6 +1105,9 @@ static RPCHelpMan gettxoutsetinfo()\n         if (hash_type == CoinStatsHashType::HASH_SERIALIZED) {\n             ret.pushKV(\"hash_serialized_2\", stats.hashSerialized.GetHex());\n         }\n+        if (hash_type == CoinStatsHashType::MUHASH) {\n+              ret.pushKV(\"muhash\", stats.hashSerialized.GetHex());\n+        }\n         ret.pushKV(\"disk_size\", stats.nDiskSize);\n         ret.pushKV(\"total_amount\", ValueFromAmount(stats.nTotalAmount));\n     } else {"
      },
      {
        "sha": "ecfea7017f1902e982eb55e0da0734022f7f14df",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 17,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d3b2f643d7da3202c0a0e757539208c4aa7c450/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d3b2f643d7da3202c0a0e757539208c4aa7c450/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=0d3b2f643d7da3202c0a0e757539208c4aa7c450",
        "patch": "@@ -113,23 +113,6 @@ std::vector<unsigned char> ParseHexO(const UniValue& o, std::string strKey)\n     return ParseHexV(find_value(o, strKey), strKey);\n }\n \n-CoinStatsHashType ParseHashType(const UniValue& param, const CoinStatsHashType default_type)\n-{\n-    if (param.isNull()) {\n-        return default_type;\n-    } else {\n-        std::string hash_type_input = param.get_str();\n-\n-        if (hash_type_input == \"hash_serialized_2\") {\n-            return CoinStatsHashType::HASH_SERIALIZED;\n-        } else if (hash_type_input == \"none\") {\n-            return CoinStatsHashType::NONE;\n-        } else {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"%d is not a valid hash_type\", hash_type_input));\n-        }\n-    }\n-}\n-\n std::string HelpExampleCli(const std::string& methodname, const std::string& args)\n {\n     return \"> bitcoin-cli \" + methodname + \" \" + args + \"\\n\";"
      },
      {
        "sha": "69a90b09048308f9ea3d5002483054bf00848b16",
        "filename": "src/rpc/util.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d3b2f643d7da3202c0a0e757539208c4aa7c450/src/rpc/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d3b2f643d7da3202c0a0e757539208c4aa7c450/src/rpc/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.h?ref=0d3b2f643d7da3202c0a0e757539208c4aa7c450",
        "patch": "@@ -77,8 +77,6 @@ extern uint256 ParseHashO(const UniValue& o, std::string strKey);\n extern std::vector<unsigned char> ParseHexV(const UniValue& v, std::string strName);\n extern std::vector<unsigned char> ParseHexO(const UniValue& o, std::string strKey);\n \n-CoinStatsHashType ParseHashType(const UniValue& param, const CoinStatsHashType default_type);\n-\n extern CAmount AmountFromValue(const UniValue& value);\n extern std::string HelpExampleCli(const std::string& methodname, const std::string& args);\n extern std::string HelpExampleRpc(const std::string& methodname, const std::string& args);"
      },
      {
        "sha": "84ca1b99c2db2bf09ffca9a2148f203d9cda10ca",
        "filename": "test/functional/rpc_blockchain.py",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d3b2f643d7da3202c0a0e757539208c4aa7c450/test/functional/rpc_blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d3b2f643d7da3202c0a0e757539208c4aa7c450/test/functional/rpc_blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_blockchain.py?ref=0d3b2f643d7da3202c0a0e757539208c4aa7c450",
        "patch": "@@ -268,6 +268,18 @@ def _test_gettxoutsetinfo(self):\n         res5 = node.gettxoutsetinfo(hash_type='none')\n         assert 'hash_serialized_2' not in res5\n \n+        # hash_type muhash should return a different UTXO set hash.\n+        res6 = node.gettxoutsetinfo(hash_type='muhash')\n+        assert 'muhash' in res6\n+        assert(res['hash_serialized_2'] != res6['muhash'])\n+\n+        # muhash should not be included in gettxoutset unless requested.\n+        for r in [res, res2, res3, res4, res5]:\n+            assert 'muhash' not in r\n+\n+        # Unknown hash_type raises an error\n+        assert_raises_rpc_error(-8, \"foohash is not a valid hash_type\", node.gettxoutsetinfo, \"foohash\")\n+\n     def _test_getblockheader(self):\n         node = self.nodes[0]\n "
      }
    ]
  },
  {
    "sha": "6ccc8fc067bf516cda7bc5d7d721945be5ac2003",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2Y2NjOGZjMDY3YmY1MTZjZGE3YmM1ZDdkNzIxOTQ1YmU1YWMyMDAz",
    "commit": {
      "author": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2021-01-13T23:10:04Z"
      },
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2021-01-30T19:33:20Z"
      },
      "message": "test: Add test for gettxoutsetinfo RPC with MuHash",
      "tree": {
        "sha": "09460d39cf59ec45ac256e96a91c3cc9e30a8119",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/09460d39cf59ec45ac256e96a91c3cc9e30a8119"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6ccc8fc067bf516cda7bc5d7d721945be5ac2003",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAmAVtIMVHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jNyiIQAKUzjLRqzg1RemgtPg7r+QaG7zfn\n2VBA8iAqDO8+OPlEt3lLly8ZO1+4AT3xky2XO838ozMlh12Sk2Xm2npH6Cb9H/8w\njYzP+OaUW3+1beROkiG1Mtv6Z5lrCVxbu6+GhsLCA5+nR37scXg4jrHQgcYSPq5y\nuDDrebHHMHdVdnlmZU/Nb4OYooLAwK1wGpOImrtsB+4l+wbhxZt5XFJ4sswMusDx\nic6SwnUunUePkiiZkZtGk0/zSJast6YY+3NKAJ7G8e8OiWbBkbekYsCw3KPs3cpU\n+uWNTPIswQTdVjfGubwmpfvdPkpZvrfm0X4tvuvqn63qBTpv37nt6djYj1gZsFfb\nepujPl5RO7F1JY9vNq0E/1+EimyjVZqLZdcxOKrBUaNC/lA/ah0HyFKiNmFAexJA\nc/Tg2bKv8+hKPx9ln2D+TH97+r/GJgkqzib7rI+GhJLioR9QUeJ5NHkGHokTA0yb\nJ3i8kQQGT5WT5DECrluD5rl/NpurCxxJseXhLnLKtIivW6McAhUUfWI0/CfxSzw7\nwu63zebud215+QFAHsCpadqjia4w7Rl0PYnFg60A5c8wXE26gbKqpEvgg/Wpwdxl\nU7d7LWco5MI+GJVlUcfBAHY//+5WzvUnqREyHf9oCfQY5/wCcU2U+d3q4HEDr4jJ\nnRrwOYsYxeMQBywI\n=cQnN\n-----END PGP SIGNATURE-----",
        "payload": "tree 09460d39cf59ec45ac256e96a91c3cc9e30a8119\nparent 0d3b2f643d7da3202c0a0e757539208c4aa7c450\nauthor Fabian Jahr <fjahr@protonmail.com> 1610579404 +0100\ncommitter Fabian Jahr <fjahr@protonmail.com> 1612035200 +0100\n\ntest: Add test for gettxoutsetinfo RPC with MuHash\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ccc8fc067bf516cda7bc5d7d721945be5ac2003",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6ccc8fc067bf516cda7bc5d7d721945be5ac2003",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ccc8fc067bf516cda7bc5d7d721945be5ac2003/comments",
    "author": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0d3b2f643d7da3202c0a0e757539208c4aa7c450",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d3b2f643d7da3202c0a0e757539208c4aa7c450",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0d3b2f643d7da3202c0a0e757539208c4aa7c450"
      }
    ],
    "stats": {
      "total": 79,
      "additions": 79,
      "deletions": 0
    },
    "files": [
      {
        "sha": "a8e6a2e75361af1ab36e71704fa96535f18fef78",
        "filename": "test/functional/feature_utxo_set_hash.py",
        "status": "added",
        "additions": 78,
        "deletions": 0,
        "changes": 78,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ccc8fc067bf516cda7bc5d7d721945be5ac2003/test/functional/feature_utxo_set_hash.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ccc8fc067bf516cda7bc5d7d721945be5ac2003/test/functional/feature_utxo_set_hash.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_utxo_set_hash.py?ref=6ccc8fc067bf516cda7bc5d7d721945be5ac2003",
        "patch": "@@ -0,0 +1,78 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020-2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test UTXO set hash value calculation in gettxoutsetinfo.\"\"\"\n+\n+import struct\n+\n+from test_framework.blocktools import create_transaction\n+from test_framework.messages import (\n+    CBlock,\n+    COutPoint,\n+    FromHex,\n+)\n+from test_framework.muhash import MuHash3072\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+class UTXOSetHashTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def test_muhash_implementation(self):\n+        self.log.info(\"Test MuHash implementation consistency\")\n+\n+        node = self.nodes[0]\n+\n+        # Generate 100 blocks and remove the first since we plan to spend its\n+        # coinbase\n+        block_hashes = node.generate(100)\n+        blocks = list(map(lambda block: FromHex(CBlock(), node.getblock(block, False)), block_hashes))\n+        spending = blocks.pop(0)\n+\n+        # Create a spending transaction and mine a block which includes it\n+        tx = create_transaction(node, spending.vtx[0].rehash(), node.getnewaddress(), amount=49)\n+        txid = node.sendrawtransaction(hexstring=tx.serialize_with_witness().hex(), maxfeerate=0)\n+\n+        tx_block = node.generateblock(output=node.getnewaddress(), transactions=[txid])\n+        blocks.append(FromHex(CBlock(), node.getblock(tx_block['hash'], False)))\n+\n+        # Serialize the outputs that should be in the UTXO set and add them to\n+        # a MuHash object\n+        muhash = MuHash3072()\n+\n+        for height, block in enumerate(blocks):\n+            # The Genesis block coinbase is not part of the UTXO set and we\n+            # spent the first mined block\n+            height += 2\n+\n+            for tx in block.vtx:\n+                for n, tx_out in enumerate(tx.vout):\n+                    coinbase = 1 if not tx.vin[0].prevout.hash else 0\n+\n+                    # Skip witness commitment\n+                    if (coinbase and n > 0):\n+                        continue\n+\n+                    data = COutPoint(int(tx.rehash(), 16), n).serialize()\n+                    data += struct.pack(\"<i\", height * 2 + coinbase)\n+                    data += tx_out.serialize()\n+\n+                    muhash.insert(data)\n+\n+        finalized = muhash.digest()\n+        node_muhash = node.gettxoutsetinfo(\"muhash\")['muhash']\n+\n+        assert_equal(finalized[::-1].hex(), node_muhash)\n+\n+    def run_test(self):\n+        self.test_muhash_implementation()\n+\n+\n+if __name__ == '__main__':\n+    UTXOSetHashTest().main()"
      },
      {
        "sha": "70e2029a10f228ff13bd463f31943740b9d1491f",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ccc8fc067bf516cda7bc5d7d721945be5ac2003/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ccc8fc067bf516cda7bc5d7d721945be5ac2003/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=6ccc8fc067bf516cda7bc5d7d721945be5ac2003",
        "patch": "@@ -202,6 +202,7 @@\n     'feature_notifications.py',\n     'rpc_getblockfilter.py',\n     'rpc_invalidateblock.py',\n+    'feature_utxo_set_hash.py',\n     'feature_rbf.py',\n     'mempool_packages.py',\n     'mempool_package_onemore.py',"
      }
    ]
  },
  {
    "sha": "e987ae5a554c9952812746c29f2766bacea4b727",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplOTg3YWU1YTU1NGM5OTUyODEyNzQ2YzI5ZjI3NjZiYWNlYTRiNzI3",
    "commit": {
      "author": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2021-01-30T19:29:40Z"
      },
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2021-01-30T19:33:23Z"
      },
      "message": "test: Add test for deterministic UTXO set hash results",
      "tree": {
        "sha": "64d1af378b15422c748948ea84cccfdc1122bf4a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/64d1af378b15422c748948ea84cccfdc1122bf4a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e987ae5a554c9952812746c29f2766bacea4b727",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAmAVtIMVHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jN15AP/3CKvXyhwYe1ywQ5lEcxOJR0naXd\nnIkY+SmYlzEwQ5n0EfKS/ZuKpPCuvgnEr/MWtsPbEe81e2tGgUXmh6EnHiGom/4D\nFxQAonKa9D1AekHZBmINDjSp5AULzCBoC6jcNSJEv4jSJycufweiYL+6N3tMXGKz\nKcKuMuoiGM5BeWFUnVCmiKkKgyoFX7RJfWcfDJViw2q6dVnNyaciV9Y2opxB1akH\nbmva1sIZd0UjOPbjbyxnuUpy4LEMY34sKE4PoVkDBTqOyOXqEU6Zn79HvP1BaIm4\nQD5wfx36P6NzxC2eWH0+GZ9ciUNaqu8F6bcvOU1ViTtDGQ0/YU8b8Fr9m9d1wGTH\nYLOphPj9QQRAfnNHs3yXhRx3dYkLtVXoA/YpS353te+A/GIy1DnUR7BSV+vSP/Wi\nugU8cc+3vSc8cMKTNh/7Al9oxNd/N7HIt9xowrCqi8++973D/bXGrKCSNkLikkJy\nwS9jX0cehM5ku6/MJaet9Hv/eJpHjFntoAFR8k3ybzNrM+vBGPOCQhj/BxTa+gcm\nSca92U6uCSdoyvbZrvwkxi/HyulTqyydhUkngzjHbsqWjTpT5mHDgtd8q3BL4Puh\nBGDYVWp1EC83MTu2lPfoCPUZz0yNuOZlwwgDkvyJ5mEVDCt75R9nNN0g6AAP+sHk\nCvP56dCyDV2owWae\n=5xhM\n-----END PGP SIGNATURE-----",
        "payload": "tree 64d1af378b15422c748948ea84cccfdc1122bf4a\nparent 6ccc8fc067bf516cda7bc5d7d721945be5ac2003\nauthor Fabian Jahr <fjahr@protonmail.com> 1612034980 +0100\ncommitter Fabian Jahr <fjahr@protonmail.com> 1612035203 +0100\n\ntest: Add test for deterministic UTXO set hash results\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e987ae5a554c9952812746c29f2766bacea4b727",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e987ae5a554c9952812746c29f2766bacea4b727",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e987ae5a554c9952812746c29f2766bacea4b727/comments",
    "author": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6ccc8fc067bf516cda7bc5d7d721945be5ac2003",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ccc8fc067bf516cda7bc5d7d721945be5ac2003",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6ccc8fc067bf516cda7bc5d7d721945be5ac2003"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 8,
      "deletions": 0
    },
    "files": [
      {
        "sha": "6e6046d84df8ef9b11b6dd00f41c832ca38047d2",
        "filename": "test/functional/feature_utxo_set_hash.py",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e987ae5a554c9952812746c29f2766bacea4b727/test/functional/feature_utxo_set_hash.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e987ae5a554c9952812746c29f2766bacea4b727/test/functional/feature_utxo_set_hash.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_utxo_set_hash.py?ref=e987ae5a554c9952812746c29f2766bacea4b727",
        "patch": "@@ -24,6 +24,13 @@ def set_test_params(self):\n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n \n+    def test_deterministic_hash_results(self):\n+        self.log.info(\"Test deterministic UTXO set hash results\")\n+\n+        # These depend on the setup_clean_chain option, the chain loaded from the cache\n+        assert_equal(self.nodes[0].gettxoutsetinfo()['hash_serialized_2'], \"b32ec1dda5a53cd025b95387aad344a801825fe46a60ff952ce26528f01d3be8\")\n+        assert_equal(self.nodes[0].gettxoutsetinfo(\"muhash\")['muhash'], \"dd5ad2a105c2d29495f577245c357409002329b9f4d6182c0af3dc2f462555c8\")\n+\n     def test_muhash_implementation(self):\n         self.log.info(\"Test MuHash implementation consistency\")\n \n@@ -71,6 +78,7 @@ def test_muhash_implementation(self):\n         assert_equal(finalized[::-1].hex(), node_muhash)\n \n     def run_test(self):\n+        self.test_deterministic_hash_results()\n         self.test_muhash_implementation()\n \n "
      }
    ]
  }
]