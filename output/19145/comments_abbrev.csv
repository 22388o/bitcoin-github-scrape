DrahtBot,2020-06-03 01:22:33,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19806 (validation: UTXO snapshot activation by jamesob)\n\nIf you consider this pull request important, please also help ",https://github.com/bitcoin/bitcoin/pull/19145#issuecomment-637898492,637898492,
fjahr,2020-06-04 13:32:23,"Added another more extensive test, now ready for review.",https://github.com/bitcoin/bitcoin/pull/19145#issuecomment-638849647,638849647,
Sjors,2020-06-09 12:55:46,"Concept ACK. In the followup PR that adds a MuHash index, the RPC documentation should point out that this index can be used to dramatically speed up the RPC call when used with `muhash`. And that `muhash` and `none` will be more responsive than the default (or just change the default, and note that as a breaking change to anyone who uses the legacy hash).",https://github.com/bitcoin/bitcoin/pull/19145#issuecomment-641272589,641272589,
fjahr,2020-06-11 23:08:41,@MarcoFalke I would like to hear your thoughts on 2109165e3b61d26a0496d5a1efd1c635a7f6a76a. I had it only in the test at first but put it into the framework because I think it could be useful for other tests as well and since it's just a method it does not affect the use of `P2PDataStore` in other tests. But the data it returns on each UTXO is kind of specific to my test.,https://github.com/bitcoin/bitcoin/pull/19145#issuecomment-642974787,642974787,
MarcoFalke,2020-06-11 23:22:54,"Seems fine to put it wherever you want, as long as reviewers are happy. I guess the decision mostly depends on whether this will be used by other tests.",https://github.com/bitcoin/bitcoin/pull/19145#issuecomment-642978673,642978673,
fjahr,2020-06-29 19:21:16,rebased,https://github.com/bitcoin/bitcoin/pull/19145#issuecomment-651310798,651310798,
fjahr,2020-06-30 14:26:15,Fixed a merge issue and pulled in latest changes from dependency PRs.,https://github.com/bitcoin/bitcoin/pull/19145#issuecomment-651827590,651827590,
fjahr,2020-07-05 11:46:00,Removed some code dublication,https://github.com/bitcoin/bitcoin/pull/19145#issuecomment-653878504,653878504,
fjahr,2020-07-06 14:00:39,Rebased and made small style fix in rpc/util.cpp.,https://github.com/bitcoin/bitcoin/pull/19145#issuecomment-654257382,654257382,
fjahr,2020-09-02 11:39:24,Rebased after #19105 was merged.,https://github.com/bitcoin/bitcoin/pull/19145#issuecomment-685674442,685674442,
fjahr,2021-01-14 00:38:11,"Rebased and addressed feedback by @mjdietzx . Thanks for reviewing and sorry for the long wait, I was focussing on #19055 which is now merged and which makes this one my high prio. I also added a small refactor commit to improve encapsulation between `MuHash3072` and `Num3072`.",https://github.com/bitcoin/bitcoin/pull/19145#issuecomment-759847750,759847750,
fjahr,2021-01-14 23:29:20,"> There is a deterministic regtest blockchain for the test `rpc_getblockstats.py` which could (additionally) test the finalized hash against constants, especially in the future when one tests for correct rolling behaviour between blocks.\n\nThanks, that's a good point but I think this will be even more interesting when we get to the actual index when the RPC can give hashes for specific heights ",https://github.com/bitcoin/bitcoin/pull/19145#issuecomment-760543243,760543243,
fjahr,2021-01-14 23:30:20,Addressed Feedback by @FelixWeis and fixed the functional test for the no-wallet case.,https://github.com/bitcoin/bitcoin/pull/19145#issuecomment-760543610,760543610,
fjahr,2021-01-24 17:39:55,Addressed feedback by @jonatack ,https://github.com/bitcoin/bitcoin/pull/19145#issuecomment-766400514,766400514,
jonatack,2021-01-24 19:41:19,"ACK 2e5617f7f4bcece4834852cc925068e47ceeffa3 code review, reviewed diff last review per `git diff 7a96f77 2e5617f`, tested rebased on current master\n\nHappy to re-ACK for the changes above.\n\n<details><summary>Some manual command line testing.</summary><p>\n\n```\n# bsi is an alias for ./src/bitcoin-cli -signet\n\n((HEAD detached at origin/pr/19145))$ bsi help gettxoutsetinfo\ngettxout",https://github.com/bitcoin/bitcoin/pull/19145#issuecomment-766419585,766419585,
jonatack,2021-01-25 10:53:05,"re-ACK 3506d9080166bc250e941d791e3e8a2b85d5bd6b per `git diff 2e5617f 3506d90`\n\nThanks for updating.",https://github.com/bitcoin/bitcoin/pull/19145#issuecomment-766730597,766730597,
jonatack,2021-01-25 13:04:49,This might need a release note (even if the note will be updated in planned follow-ups to this).,https://github.com/bitcoin/bitcoin/pull/19145#issuecomment-766801722,766801722,
Sjors,2021-01-28 13:46:48,"Muhash at height 668,047: `c263d20036cc983510e9b347cb88e947168dd5665ed00b0e6118d07a7704f810`",https://github.com/bitcoin/bitcoin/pull/19145#issuecomment-769063314,769063314,
fjahr,2021-01-31 00:14:11,"> Reviewed [3506d90](https://github.com/bitcoin/bitcoin/commit/3506d9080166bc250e941d791e3e8a2b85d5bd6b), almost happy...\n> \n> Muhash at height 668,212: `d0192e6604c3dc9a78f47bfc5ae84b8c0f6baf960d7ba9305664bbb9f65ef092`.\n> \n> `hash_serialized_2` is `63fa057a656168ed832d8abbec8008948fc17aecde9f346d69043871a746941f` on master, but `15d3629db2fcbed27a1fd9d35c15b5ac6f0a70f5723ebf9cf87e3df0b0fe",https://github.com/bitcoin/bitcoin/pull/19145#issuecomment-770301935,770301935,
Sjors,2021-02-03 10:19:24,"tACK e987ae5\n\nI get the same MuHash as before for block 668,212 and `hash_serialized_2` now matches what I found on master.",https://github.com/bitcoin/bitcoin/pull/19145#issuecomment-772397861,772397861,
achow101,2021-02-08 22:18:18,"ACK e987ae5a554c9952812746c29f2766bacea4b727\n\nIt would be nice if the test used MiniWallet or otherwise didn't rely on the wallet, but it's fine for now.",https://github.com/bitcoin/bitcoin/pull/19145#issuecomment-775500995,775500995,
fjahr,2021-02-10 21:43:45,"Thanks a lot for the reviews @achow101 and @ryanofsky ! I will add your suggestions if I have to push again, otherwise I will put them into the next PR in this series.",https://github.com/bitcoin/bitcoin/pull/19145#issuecomment-777056129,777056129,
mjdietzx,2020-11-24 14:16:29,Should be alphabetical order?,https://github.com/bitcoin/bitcoin/pull/19145#discussion_r529577405,529577405,src/Makefile.am
mjdietzx,2020-11-24 17:40:22,"Isn't this sort of a roundabout way to setup what seems to be the actual test, at lines 74-87? I'm not seeing why `conn = node.add_p2p_connection(P2PDataStore())` is necessary for what's being tested here, and if the method added in this PR `def estimate_utxo_set(self):` is needed.\n\nWould something like this do what you need:\n```python\ncoinbase_blocks = list(map(lambda block: node.getblock",https://github.com/bitcoin/bitcoin/pull/19145#discussion_r529760469,529760469,test/functional/feature_utxo_set_hash.py
mjdietzx,2020-11-24 18:50:27,"Would this test be a little better if instead of forming the utxo set at the end, you maintained a running sum and added as blocks were mined, and then added/subtracted when UTXOs were spent and created in `tx1`, `tx2`?",https://github.com/bitcoin/bitcoin/pull/19145#discussion_r529803891,529803891,test/functional/feature_utxo_set_hash.py
fjahr,2021-01-14 00:30:08,"Sorry, this was part of a previous PR that this one is based on, so I don't want to touch this anymore.",https://github.com/bitcoin/bitcoin/pull/19145#discussion_r556966308,556966308,src/Makefile.am
fjahr,2021-01-14 00:33:19,"It was and I did it because I thought there was a good chance that this code could be used for other tests as well and it also made some things a bit easier. But overall of course it adds complexity and I am lacking a specific example where it would be used so I have removed the P2P based implementation and simplified it in a similar way as you imagined, I think. Please check it out.",https://github.com/bitcoin/bitcoin/pull/19145#discussion_r556967317,556967317,test/functional/feature_utxo_set_hash.py
fjahr,2021-01-14 00:35:36,I don't think so because we need to somehow keep track of what is really in the UTXO set and I think this would make test harder to follow if I did it this way. And I feel like this is more of the standard way of how we structure our tests.,https://github.com/bitcoin/bitcoin/pull/19145#discussion_r556968008,556968008,test/functional/feature_utxo_set_hash.py
FelixWeis,2021-01-14 06:48:03,nit: `CCoinsStats& stats`,https://github.com/bitcoin/bitcoin/pull/19145#discussion_r557075154,557075154,src/node/coinstats.cpp
fjahr,2021-01-14 23:27:12,Done,https://github.com/bitcoin/bitcoin/pull/19145#discussion_r557765138,557765138,src/node/coinstats.cpp
sipa,2021-01-21 21:49:18,"In commit "" refactor: Improve encapsulation between MuHash3072 and Num3072""\n\nI recommend against passing C-style arrays, as despite its notation, it's not passing an array but a pointer. For example, this works with no warning: https://godbolt.org/z/YrMvfE\n\nAn alternative is using a C++ reference-to-array:\n\n```c++\n Num3072::Num3072(const unsigned char (&data)[BYTE_SIZE]) { \n```\n",https://github.com/bitcoin/bitcoin/pull/19145#discussion_r562219674,562219674,src/crypto/muhash.cpp
sipa,2021-01-21 22:09:23,"In commit ""rpc: Add hash_type MUHASH to gettxoutsetinfo""\n\nI think extracting an `std::string` here is unnecessary. \n\n```c++\nmuhash.Insert(MakeUCharSpan(ss));\n```\n\nshould work just as well, and avoid the copy.",https://github.com/bitcoin/bitcoin/pull/19145#discussion_r562230000,562230000,src/node/coinstats.cpp
sipa,2021-01-21 22:11:59,"In commit ""refactor: Seperate hash and stats calculation in coinstats""\n\nNit: seperate -> separate in commit title",https://github.com/bitcoin/bitcoin/pull/19145#discussion_r562231321,562231321,src/node/coinstats.cpp
fjahr,2021-01-22 00:06:15,Fixed,https://github.com/bitcoin/bitcoin/pull/19145#discussion_r562278316,562278316,src/node/coinstats.cpp
fjahr,2021-01-22 00:06:29,Fixed,https://github.com/bitcoin/bitcoin/pull/19145#discussion_r562278387,562278387,src/node/coinstats.cpp
fjahr,2021-01-22 00:06:37,Done,https://github.com/bitcoin/bitcoin/pull/19145#discussion_r562278427,562278427,src/crypto/muhash.cpp
jonatack,2021-01-23 17:22:38,"f8e4e369 nit, this is the only occurrence in the codebase documentation where MuHash is written Muhash\n```diff\n  * efficiently combined later.\n  *\n- * Muhash does not support checking if an element is already part of the\n+ * MuHash does not support checking if an element is already part of the\n  * set. That is why this class does not enforce the use of a set as the\n  * data it repres",https://github.com/bitcoin/bitcoin/pull/19145#discussion_r563176885,563176885,src/crypto/muhash.h
jonatack,2021-01-23 18:03:25,"bde3feba should `assert 'muhash' not in` be added to any of res-res4\n",https://github.com/bitcoin/bitcoin/pull/19145#discussion_r563181113,563181113,test/functional/rpc_blockchain.py
jonatack,2021-01-23 18:23:33,"bde3febaf this could perhaps be a bit simpler\n\n<details><summary>diff</summary><p>\n\n```diff\ndiff --git a/src/rpc/blockchain.cpp b/src/rpc/blockchain.cpp\nindex 576dabc349..3a07e5620d 100644\n--- a/src/rpc/blockchain.cpp\n+++ b/src/rpc/blockchain.cpp\n@@ -1079,7 +1079,7 @@ static RPCHelpMan gettxoutsetinfo()\n     CCoinsStats stats;\n     ::ChainstateActive().ForceFlushStateToDisk()",https://github.com/bitcoin/bitcoin/pull/19145#discussion_r563183184,563183184,src/rpc/util.cpp
jonatack,2021-01-23 18:32:55,"bde3febaf pass as optional results\n```diff\n-                        {RPCResult::Type::STR_HEX, ""muhash"", ""The serialized hash (only present if 'muhash' hash_type is chosen)""},\n-                        {RPCResult::Type::STR_HEX, ""hash_serialized_2"", ""The serialized hash (only present if 'hash_serialized_2' hash_type is chosen)""},\n+                        {RPCResult::Type::STR_HEX, ""muhash"",",https://github.com/bitcoin/bitcoin/pull/19145#discussion_r563184155,563184155,src/rpc/blockchain.cpp
jonatack,2021-01-23 18:36:31,"bde3feba [named cast](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines.html#Res-casts-named)\n```suggestion\n    ss << static_cast<uint32_t>(coin.nHeight * 2 + coin.fCoinBase);\n```",https://github.com/bitcoin/bitcoin/pull/19145#discussion_r563184536,563184536,src/node/coinstats.cpp
jonatack,2021-01-23 18:41:19,"7a96f77c nit, sort",https://github.com/bitcoin/bitcoin/pull/19145#discussion_r563185041,563185041,test/functional/feature_utxo_set_hash.py
jonatack,2021-01-23 18:42:14,"7a96f77c nit, place standard library imports before application/library specific imports per https://www.python.org/dev/peps/pep-0008/#imports",https://github.com/bitcoin/bitcoin/pull/19145#discussion_r563185104,563185104,test/functional/feature_utxo_set_hash.py
jonatack,2021-01-24 06:53:08,"Could also drop the header file declaration and move the function into the same file as the caller, unless you expect it to have callers in other files.",https://github.com/bitcoin/bitcoin/pull/19145#discussion_r563247377,563247377,src/rpc/util.cpp
fjahr,2021-01-24 17:38:59,"You're right, I don't foresee any other callers at the moment so I moved the function into `rpc/blockchain.cpp`.",https://github.com/bitcoin/bitcoin/pull/19145#discussion_r563324903,563324903,src/rpc/util.cpp
fjahr,2021-01-24 17:39:04,Fixed,https://github.com/bitcoin/bitcoin/pull/19145#discussion_r563324906,563324906,src/crypto/muhash.h
fjahr,2021-01-24 17:39:09,Done.,https://github.com/bitcoin/bitcoin/pull/19145#discussion_r563324919,563324919,test/functional/rpc_blockchain.py
fjahr,2021-01-24 17:39:21,Done.,https://github.com/bitcoin/bitcoin/pull/19145#discussion_r563324941,563324941,src/node/coinstats.cpp
fjahr,2021-01-24 17:39:28,Done.,https://github.com/bitcoin/bitcoin/pull/19145#discussion_r563324945,563324945,src/rpc/blockchain.cpp
fjahr,2021-01-24 17:39:33,Done.,https://github.com/bitcoin/bitcoin/pull/19145#discussion_r563324952,563324952,test/functional/feature_utxo_set_hash.py
fjahr,2021-01-24 17:39:37,Done.,https://github.com/bitcoin/bitcoin/pull/19145#discussion_r563324957,563324957,test/functional/feature_utxo_set_hash.py
jonatack,2021-01-24 19:06:58,"good catch in the latest push\n```diff\n- Options: 'hash_serialized_2' (the legacy algorithm), 'none'.""},\n+ Options: 'hash_serialized_2' (the legacy algorithm), 'muhash', 'none'.""},\n```\n",https://github.com/bitcoin/bitcoin/pull/19145#discussion_r563335364,563335364,src/rpc/blockchain.cpp
jonatack,2021-01-24 19:11:06,"726c9504 I overlooked this in my first review, perhaps add a functional test assertion on this output\n```suggestion\n        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(""%s is not a valid hash_type"", hash_type_input));\n```",https://github.com/bitcoin/bitcoin/pull/19145#discussion_r563335899,563335899,src/rpc/blockchain.cpp
jonatack,2021-01-24 19:18:32,"726c9504 pico-nit, feel free to ignore, s/Muhash/MuHash/",https://github.com/bitcoin/bitcoin/pull/19145#discussion_r563336751,563336751,src/node/coinstats.cpp
jonatack,2021-01-24 19:29:35,"Oh, maybe it works anyway\n```\n./src/bitcoin-cli -signet gettxoutsetinfo MuHash\nerror code: -8\nerror message:\nMuHash is not a valid hash_type\n```",https://github.com/bitcoin/bitcoin/pull/19145#discussion_r563338135,563338135,src/rpc/blockchain.cpp
fjahr,2021-01-24 22:22:07,"Yeah, I feel like I fixed this before but I guess I messed up a rebase somewhere ;)",https://github.com/bitcoin/bitcoin/pull/19145#discussion_r563394287,563394287,src/rpc/blockchain.cpp
fjahr,2021-01-24 22:22:29,Done,https://github.com/bitcoin/bitcoin/pull/19145#discussion_r563394341,563394341,src/rpc/blockchain.cpp
fjahr,2021-01-24 22:22:39,Done,https://github.com/bitcoin/bitcoin/pull/19145#discussion_r563394355,563394355,src/node/coinstats.cpp
Sjors,2021-01-29 15:17:50,e6856a3809e54dc4de03cb4cd4f9d78495cc0625: nit this undoes the move of `&` in the previous commit,https://github.com/bitcoin/bitcoin/pull/19145#discussion_r566892821,566892821,src/node/coinstats.cpp
Sjors,2021-01-29 15:21:34,e6856a3809e54dc4de03cb4cd4f9d78495cc0625 nit: handle `MUHASH` before `NONE`? (same with `PrepareHash ` and `ParseHashType`),https://github.com/bitcoin/bitcoin/pull/19145#discussion_r566895459,566895459,src/node/coinstats.cpp
Sjors,2021-01-29 15:25:00,e6856a3809e54dc4de03cb4cd4f9d78495cc0625 nit: move down?,https://github.com/bitcoin/bitcoin/pull/19145#discussion_r566897773,566897773,src/rpc/blockchain.cpp
Sjors,2021-01-29 15:46:02,"This (?) changes the result of `gettxoutsetinfo hash_serialized_2` (probably something else)\n",https://github.com/bitcoin/bitcoin/pull/19145#discussion_r566912424,566912424,src/node/coinstats.cpp
fjahr,2021-01-31 00:00:29,"Huh, no idea how that happened, makes no sense at all, especially inside that commit. Fixed.",https://github.com/bitcoin/bitcoin/pull/19145#discussion_r567341317,567341317,src/node/coinstats.cpp
fjahr,2021-01-31 00:00:35,Done.,https://github.com/bitcoin/bitcoin/pull/19145#discussion_r567341329,567341329,src/rpc/blockchain.cpp
fjahr,2021-01-31 00:00:42,Done.,https://github.com/bitcoin/bitcoin/pull/19145#discussion_r567341332,567341332,src/node/coinstats.cpp
fjahr,2021-01-31 00:00:50,Fixed.,https://github.com/bitcoin/bitcoin/pull/19145#discussion_r567341344,567341344,src/node/coinstats.cpp
jonatack,2021-02-01 20:21:21,"nit, in these two lines, could replace the single quotes with double ones for consistency, e.g. `s/'/\""/`",https://github.com/bitcoin/bitcoin/pull/19145#discussion_r568113969,568113969,src/rpc/blockchain.cpp
fjahr,2021-02-01 21:30:15,"Yes, will do if I have to retouch! Thanks for re-reviewing!",https://github.com/bitcoin/bitcoin/pull/19145#discussion_r568152429,568152429,src/rpc/blockchain.cpp
ryanofsky,2021-02-10 17:59:26,"In commit ""refactor: Improve encapsulation between MuHash3072 and Num3072"" (a1fcceac69097a8e6540a6fd8121a5d53022528f)\n\nNote in case it helps other reviewers: I found this commit easier to review rearranging the method order to `ToNum3072` `Num3072` `ToBytes` instead of `Num3072` `ToBytes` `ToNum3072` so diff was smaller with code moving around less.",https://github.com/bitcoin/bitcoin/pull/19145#discussion_r573951204,573951204,src/crypto/muhash.cpp
ryanofsky,2021-02-10 18:32:02,"In commit ""refactor: Separate hash and stats calculation in coinstats"" (2474645f3b15687e7f196b89eb935d6e6a98a9da)\n\n`stats` arguments in unused in all three overloads and could be dropped.\n\nAlso, passing iterators around like this seems unnecessarily elaborate. It makes sense to separate stats and hash computations, but is there a reason both computations need to share the a single `for` lo",https://github.com/bitcoin/bitcoin/pull/19145#discussion_r573973968,573973968,src/node/coinstats.cpp
MarcoFalke,2021-02-12 16:12:00,"there is no loaded chain and the utxo set is empty. Which is also useful to check, but doesn't check if the hash is deterministic?\n\n\nDid you forget to load the chain from `./test/functional/data/rpc_getblockstats.json`?",https://github.com/bitcoin/bitcoin/pull/19145#discussion_r575334728,575334728,test/functional/feature_utxo_set_hash.py
