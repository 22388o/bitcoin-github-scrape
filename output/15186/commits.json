[
  {
    "sha": "a2a6c8f4535c0c3c5f05714d64b238fc5a839233",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMmE2YzhmNDUzNWMwYzNjNWYwNTcxNGQ2NGIyMzhmYzVhODM5MjMz",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-01-17T07:29:50Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-01-18T05:59:11Z"
      },
      "message": "rpc: remove duplicate solvable field from getaddressinfo",
      "tree": {
        "sha": "4a0d3d14001da18db17a285cac6c16c80e4dbc14",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4a0d3d14001da18db17a285cac6c16c80e4dbc14"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a2a6c8f4535c0c3c5f05714d64b238fc5a839233",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAlxBay8ACgkQLuufXMCV\nJsH3rA//exo3IRrZMAywtGEYp0rBdCdEeijw0CgqqoDeyJCczwp72g1f+B6YBVnm\naqR+I59bVl0HgVNd9R3kANmkqA5jDQgK3SWpUaXXdH7ywJ/9bfEw4vBxi/HiGXTk\nV6C7RsSY+gQu7GWWCfAb99KHkO12axN9CxWMPGIw95I291iRktZTXaonUTp89dnL\nNONCzo3xQ46Lv5yYo4srlv/RhXLmhY11Q2x2X3/bHDZ5YuVmXFuyNH2n+2k2p1St\nSJ++7ad/oGNWBmy/umlehChiYAdlaiu1btf+uU+kwuH2eFYmRue4aiDV0X4WFRUt\ngBITnNzmvuir3Xz9aKHL51n0TLGRS5pJfdGC/1VxWX3CYG6f9Fs36Jg7nWk7/Ach\nbNSvvn1H4n0RkqKL600qjEX9pl7lIGVy3Dr6vbJph1HnswdTM6A07fjC3iD2RTtN\nd56dgbCLZz7amwXFAcoUuV3fJ8G3u7mo6cpmRd0nBI8B1g/vuw/f7omgLQD0tVGT\n9KyT8J8azPvPBTIz9smuR2j9JFrPa1qrisgm24IVRS4v6+5iG3fPSST/XFI+fSur\n8GtD7KZZ4kfPGb4HHyhDvoBCrXQm1YayjjlhT7U7u8CWQwbd+yp8OPC8IV1Iy2FR\nXh+Db02VSCpkibsJlQR5siFh33SQPR8GXUwmbKvz0pmOAFkXo/s=\n=Pnoc\n-----END PGP SIGNATURE-----",
        "payload": "tree 4a0d3d14001da18db17a285cac6c16c80e4dbc14\nparent cd42553b1178a48a16017eff0b70669c84c3895c\nauthor fanquake <fanquake@gmail.com> 1547710190 +0800\ncommitter fanquake <fanquake@gmail.com> 1547791151 +0800\n\nrpc: remove duplicate solvable field from getaddressinfo\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2a6c8f4535c0c3c5f05714d64b238fc5a839233",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a2a6c8f4535c0c3c5f05714d64b238fc5a839233",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2a6c8f4535c0c3c5f05714d64b238fc5a839233/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cd42553b1178a48a16017eff0b70669c84c3895c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd42553b1178a48a16017eff0b70669c84c3895c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cd42553b1178a48a16017eff0b70669c84c3895c"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 1,
      "deletions": 3
    },
    "files": [
      {
        "sha": "13fe5c3ab00e06bd1e7c5de6ca3b9f4a5acaebee",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a2a6c8f4535c0c3c5f05714d64b238fc5a839233/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a2a6c8f4535c0c3c5f05714d64b238fc5a839233/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=a2a6c8f4535c0c3c5f05714d64b238fc5a839233",
        "patch": "@@ -3586,7 +3586,6 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n             \"  \\\"address\\\" : \\\"address\\\",        (string) The bitcoin address validated\\n\"\n             \"  \\\"scriptPubKey\\\" : \\\"hex\\\",       (string) The hex-encoded scriptPubKey generated by the address\\n\"\n             \"  \\\"ismine\\\" : true|false,        (boolean) If the address is yours or not\\n\"\n-            \"  \\\"solvable\\\" : true|false,      (boolean) If the address is solvable by the wallet\\n\"\n             \"  \\\"iswatchonly\\\" : true|false,   (boolean) If the address is watchonly\\n\"\n             \"  \\\"solvable\\\" : true|false,      (boolean) Whether we know how to spend coins sent to this address, ignoring the possible lack of private keys\\n\"\n             \"  \\\"desc\\\" : \\\"desc\\\",            (string, optional) A descriptor for spending coins sent to this address (only when solvable)\\n\"\n@@ -3605,7 +3604,7 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n             \"  \\\"sigsrequired\\\" : xxxxx        (numeric, optional) Number of signatures required to spend multisig output (only if \\\"script\\\" is \\\"multisig\\\")\\n\"\n             \"  \\\"pubkey\\\" : \\\"publickeyhex\\\",    (string, optional) The hex value of the raw public key, for single-key addresses (possibly embedded in P2SH or P2WSH)\\n\"\n             \"  \\\"embedded\\\" : {...},           (object, optional) Information about the address embedded in P2SH or P2WSH, if relevant and known. It includes all getaddressinfo output fields for the embedded address, excluding metadata (\\\"timestamp\\\", \\\"hdkeypath\\\", \\\"hdseedid\\\") and relation to the wallet (\\\"ismine\\\", \\\"iswatchonly\\\").\\n\"\n-            \"  \\\"iscompressed\\\" : true|false,  (boolean) If the address is compressed\\n\"\n+            \"  \\\"iscompressed\\\" : true|false,  (boolean, optional) If the pubkey is compressed\\n\"\n             \"  \\\"label\\\" :  \\\"label\\\"         (string) The label associated with the address, \\\"\\\" is the default label\\n\"\n             \"  \\\"timestamp\\\" : timestamp,      (number, optional) The creation time of the key if available in seconds since epoch (Jan 1 1970 GMT)\\n\"\n             \"  \\\"hdkeypath\\\" : \\\"keypath\\\"       (string, optional) The HD keypath if the key is HD and available\\n\"\n@@ -3649,7 +3648,6 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n        ret.pushKV(\"desc\", InferDescriptor(scriptPubKey, *pwallet)->ToString());\n     }\n     ret.pushKV(\"iswatchonly\", bool(mine & ISMINE_WATCH_ONLY));\n-    ret.pushKV(\"solvable\", IsSolvable(*pwallet, scriptPubKey));\n     UniValue detail = DescribeWalletAddress(pwallet, dest);\n     ret.pushKVs(detail);\n     if (pwallet->mapAddressBook.count(dest)) {"
      }
    ]
  }
]