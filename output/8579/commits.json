[
  {
    "sha": "fa1892343246ad7511406759e793271343f0d060",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTE4OTIzNDMyNDZhZDc1MTE0MDY3NTllNzkzMjcxMzQzZjBkMDYw",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-08-24T16:04:28Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-08-24T16:35:30Z"
      },
      "message": "Prefer prefix operator for non-primitive types",
      "tree": {
        "sha": "21da95d7096db2c77e8055d954a1fe152ad2292e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/21da95d7096db2c77e8055d954a1fe152ad2292e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa1892343246ad7511406759e793271343f0d060",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa1892343246ad7511406759e793271343f0d060",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa1892343246ad7511406759e793271343f0d060",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa1892343246ad7511406759e793271343f0d060/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "62a5a8a01866b2af2c93125c6501538a3feab724",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/62a5a8a01866b2af2c93125c6501538a3feab724",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/62a5a8a01866b2af2c93125c6501538a3feab724"
      }
    ],
    "stats": {
      "total": 131,
      "additions": 62,
      "deletions": 69
    },
    "files": [
      {
        "sha": "5ce17ceb7a59047dc388c03435400e7cba070bb8",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1892343246ad7511406759e793271343f0d060/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1892343246ad7511406759e793271343f0d060/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=fa1892343246ad7511406759e793271343f0d060",
        "patch": "@@ -392,7 +392,7 @@ int CAddrMan::Check_()\n     if (vRandom.size() != nTried + nNew)\n         return -7;\n \n-    for (std::map<int, CAddrInfo>::iterator it = mapInfo.begin(); it != mapInfo.end(); it++) {\n+    for (std::map<int, CAddrInfo>::iterator it = mapInfo.begin(); it != mapInfo.end(); ++it) {\n         int n = (*it).first;\n         CAddrInfo& info = (*it).second;\n         if (info.fInTried) {"
      },
      {
        "sha": "2c80e386d15fd3fc4a0658cd7ca07096b1714c0b",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1892343246ad7511406759e793271343f0d060/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1892343246ad7511406759e793271343f0d060/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=fa1892343246ad7511406759e793271343f0d060",
        "patch": "@@ -305,7 +305,7 @@ class CAddrMan\n         s << nUBuckets;\n         std::map<int, int> mapUnkIds;\n         int nIds = 0;\n-        for (std::map<int, CAddrInfo>::const_iterator it = mapInfo.begin(); it != mapInfo.end(); it++) {\n+        for (std::map<int, CAddrInfo>::const_iterator it = mapInfo.begin(); it != mapInfo.end(); ++it) {\n             mapUnkIds[(*it).first] = nIds;\n             const CAddrInfo &info = (*it).second;\n             if (info.nRefCount) {\n@@ -315,7 +315,7 @@ class CAddrMan\n             }\n         }\n         nIds = 0;\n-        for (std::map<int, CAddrInfo>::const_iterator it = mapInfo.begin(); it != mapInfo.end(); it++) {\n+        for (std::map<int, CAddrInfo>::const_iterator it = mapInfo.begin(); it != mapInfo.end(); ++it) {\n             const CAddrInfo &info = (*it).second;\n             if (info.fInTried) {\n                 assert(nIds != nTried); // this means nTried was wrong, oh ow\n@@ -435,7 +435,7 @@ class CAddrMan\n                 Delete(itCopy->first);\n                 nLostUnk++;\n             } else {\n-                it++;\n+                ++it;\n             }\n         }\n         if (nLost + nLostUnk > 0) {\n@@ -522,7 +522,7 @@ class CAddrMan\n         {\n             LOCK(cs);\n             Check();\n-            for (std::vector<CAddress>::const_iterator it = vAddr.begin(); it != vAddr.end(); it++)\n+            for (std::vector<CAddress>::const_iterator it = vAddr.begin(); it != vAddr.end(); ++it)\n                 nAdd += Add_(*it, source, nTimePenalty) ? 1 : 0;\n             Check();\n         }"
      },
      {
        "sha": "6829007d1fda171e202e4ef7b402357b6f5728d9",
        "filename": "src/arith_uint256.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1892343246ad7511406759e793271343f0d060/src/arith_uint256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1892343246ad7511406759e793271343f0d060/src/arith_uint256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/arith_uint256.h?ref=fa1892343246ad7511406759e793271343f0d060",
        "patch": "@@ -79,7 +79,7 @@ class base_uint\n         base_uint ret;\n         for (int i = 0; i < WIDTH; i++)\n             ret.pn[i] = ~pn[i];\n-        ret++;\n+        ++ret;\n         return ret;\n     }\n "
      },
      {
        "sha": "3b099e5ae3944872659dd9f8dffdfbfadf89739c",
        "filename": "src/base58.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1892343246ad7511406759e793271343f0d060/src/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1892343246ad7511406759e793271343f0d060/src/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.cpp?ref=fa1892343246ad7511406759e793271343f0d060",
        "patch": "@@ -39,7 +39,7 @@ bool DecodeBase58(const char* psz, std::vector<unsigned char>& vch)\n             return false;\n         // Apply \"b256 = b256 * 58 + ch\".\n         int carry = ch - pszBase58;\n-        for (std::vector<unsigned char>::reverse_iterator it = b256.rbegin(); it != b256.rend(); it++) {\n+        for (std::vector<unsigned char>::reverse_iterator it = b256.rbegin(); it != b256.rend(); ++it) {\n             carry += 58 * (*it);\n             *it = carry % 256;\n             carry /= 256;\n@@ -55,7 +55,7 @@ bool DecodeBase58(const char* psz, std::vector<unsigned char>& vch)\n     // Skip leading zeroes in b256.\n     std::vector<unsigned char>::iterator it = b256.begin();\n     while (it != b256.end() && *it == 0)\n-        it++;\n+        ++it;\n     // Copy result into output vector.\n     vch.reserve(zeroes + (b256.end() - it));\n     vch.assign(zeroes, 0x00);\n@@ -81,7 +81,7 @@ std::string EncodeBase58(const unsigned char* pbegin, const unsigned char* pend)\n         int carry = *pbegin;\n         int i = 0;\n         // Apply \"b58 = b58 * 256 + ch\".\n-        for (std::vector<unsigned char>::reverse_iterator it = b58.rbegin(); (carry != 0 || i < length) && (it != b58.rend()); it++, i++) {\n+        for (std::vector<unsigned char>::reverse_iterator it = b58.rbegin(); (carry != 0 || i < length) && (it != b58.rend()); ++it, ++i) {\n             carry += 256 * (*it);\n             *it = carry % 58;\n             carry /= 58;\n@@ -94,7 +94,7 @@ std::string EncodeBase58(const unsigned char* pbegin, const unsigned char* pend)\n     // Skip leading zeroes in base58 result.\n     std::vector<unsigned char>::iterator it = b58.begin() + (size - length);\n     while (it != b58.end() && *it == 0)\n-        it++;\n+        ++it;\n     // Translate the result into a string.\n     std::string str;\n     str.reserve(zeroes + (b58.end() - it));"
      },
      {
        "sha": "28599aaec794e8bac962995e5f75bac531e95454",
        "filename": "src/bloom.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1892343246ad7511406759e793271343f0d060/src/bloom.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1892343246ad7511406759e793271343f0d060/src/bloom.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.cpp?ref=fa1892343246ad7511406759e793271343f0d060",
        "patch": "@@ -309,7 +309,7 @@ void CRollingBloomFilter::reset()\n     nTweak = GetRand(std::numeric_limits<unsigned int>::max());\n     nEntriesThisGeneration = 0;\n     nGeneration = 1;\n-    for (std::vector<uint64_t>::iterator it = data.begin(); it != data.end(); it++) {\n+    for (std::vector<uint64_t>::iterator it = data.begin(); it != data.end(); ++it) {\n         *it = 0;\n     }\n }"
      },
      {
        "sha": "01e536f4520f3989762b8288e1048bd3c768754f",
        "filename": "src/core_memusage.h",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1892343246ad7511406759e793271343f0d060/src/core_memusage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1892343246ad7511406759e793271343f0d060/src/core_memusage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_memusage.h?ref=fa1892343246ad7511406759e793271343f0d060",
        "patch": "@@ -27,7 +27,7 @@ static inline size_t RecursiveDynamicUsage(const CTxOut& out) {\n \n static inline size_t RecursiveDynamicUsage(const CScriptWitness& scriptWit) {\n     size_t mem = memusage::DynamicUsage(scriptWit.stack);\n-    for (std::vector<std::vector<unsigned char> >::const_iterator it = scriptWit.stack.begin(); it != scriptWit.stack.end(); it++) {\n+    for (std::vector<std::vector<unsigned char> >::const_iterator it = scriptWit.stack.begin(); it != scriptWit.stack.end(); ++it) {\n         mem += memusage::DynamicUsage(*it);\n     }\n     return mem;\n@@ -39,37 +39,37 @@ static inline size_t RecursiveDynamicUsage(const CTxInWitness& txinwit) {\n \n static inline size_t RecursiveDynamicUsage(const CTxWitness& txwit) {\n     size_t mem = memusage::DynamicUsage(txwit.vtxinwit);\n-    for (std::vector<CTxInWitness>::const_iterator it = txwit.vtxinwit.begin(); it != txwit.vtxinwit.end(); it++) {\n+    for (std::vector<CTxInWitness>::const_iterator it = txwit.vtxinwit.begin(); it != txwit.vtxinwit.end(); ++it) {\n         mem += RecursiveDynamicUsage(*it);\n     }\n     return mem;\n }\n \n static inline size_t RecursiveDynamicUsage(const CTransaction& tx) {\n     size_t mem = memusage::DynamicUsage(tx.vin) + memusage::DynamicUsage(tx.vout) + RecursiveDynamicUsage(tx.wit);\n-    for (std::vector<CTxIn>::const_iterator it = tx.vin.begin(); it != tx.vin.end(); it++) {\n+    for (std::vector<CTxIn>::const_iterator it = tx.vin.begin(); it != tx.vin.end(); ++it) {\n         mem += RecursiveDynamicUsage(*it);\n     }\n-    for (std::vector<CTxOut>::const_iterator it = tx.vout.begin(); it != tx.vout.end(); it++) {\n+    for (std::vector<CTxOut>::const_iterator it = tx.vout.begin(); it != tx.vout.end(); ++it) {\n         mem += RecursiveDynamicUsage(*it);\n     }\n     return mem;\n }\n \n static inline size_t RecursiveDynamicUsage(const CMutableTransaction& tx) {\n     size_t mem = memusage::DynamicUsage(tx.vin) + memusage::DynamicUsage(tx.vout) + RecursiveDynamicUsage(tx.wit);\n-    for (std::vector<CTxIn>::const_iterator it = tx.vin.begin(); it != tx.vin.end(); it++) {\n+    for (std::vector<CTxIn>::const_iterator it = tx.vin.begin(); it != tx.vin.end(); ++it) {\n         mem += RecursiveDynamicUsage(*it);\n     }\n-    for (std::vector<CTxOut>::const_iterator it = tx.vout.begin(); it != tx.vout.end(); it++) {\n+    for (std::vector<CTxOut>::const_iterator it = tx.vout.begin(); it != tx.vout.end(); ++it) {\n         mem += RecursiveDynamicUsage(*it);\n     }\n     return mem;\n }\n \n static inline size_t RecursiveDynamicUsage(const CBlock& block) {\n     size_t mem = memusage::DynamicUsage(block.vtx);\n-    for (std::vector<CTransaction>::const_iterator it = block.vtx.begin(); it != block.vtx.end(); it++) {\n+    for (std::vector<CTransaction>::const_iterator it = block.vtx.begin(); it != block.vtx.end(); ++it) {\n         mem += RecursiveDynamicUsage(*it);\n     }\n     return mem;"
      },
      {
        "sha": "007dec0e1f4a586681c98553c01929f327724091",
        "filename": "src/keystore.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1892343246ad7511406759e793271343f0d060/src/keystore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1892343246ad7511406759e793271343f0d060/src/keystore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.h?ref=fa1892343246ad7511406759e793271343f0d060",
        "patch": "@@ -81,7 +81,7 @@ class CBasicKeyStore : public CKeyStore\n             while (mi != mapKeys.end())\n             {\n                 setAddress.insert((*mi).first);\n-                mi++;\n+                ++mi;\n             }\n         }\n     }"
      },
      {
        "sha": "5d0d3132ee7e9408d3ce2d43694efeec76c98054",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 10,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1892343246ad7511406759e793271343f0d060/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1892343246ad7511406759e793271343f0d060/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=fa1892343246ad7511406759e793271343f0d060",
        "patch": "@@ -3138,7 +3138,7 @@ bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, C\n         if (it->second->IsValid(BLOCK_VALID_TRANSACTIONS) && it->second->nChainTx && !setBlockIndexCandidates.value_comp()(it->second, chainActive.Tip())) {\n             setBlockIndexCandidates.insert(it->second);\n         }\n-        it++;\n+        ++it;\n     }\n \n     InvalidChainFound(pindex);\n@@ -3165,7 +3165,7 @@ bool ResetBlockFailureFlags(CBlockIndex *pindex) {\n                 pindexBestInvalid = NULL;\n             }\n         }\n-        it++;\n+        ++it;\n     }\n \n     // Remove the invalidity flag from all ancestors too.\n@@ -4021,8 +4021,7 @@ bool static LoadBlockIndexDB()\n             setBlkDataFiles.insert(pindex->nFile);\n         }\n     }\n-    for (std::set<int>::iterator it = setBlkDataFiles.begin(); it != setBlkDataFiles.end(); it++)\n-    {\n+    for (std::set<int>::iterator it = setBlkDataFiles.begin(); it != setBlkDataFiles.end(); ++it) {\n         CDiskBlockPos pos(*it, 0);\n         if (CAutoFile(OpenBlockFile(pos, true), SER_DISK, CLIENT_VERSION).IsNull()) {\n             return false;\n@@ -4197,7 +4196,7 @@ bool RewindBlockIndex(const CChainParams& params)\n     // Reduce validity flag and have-data flags.\n     // We do this after actual disconnecting, otherwise we'll end up writing the lack of data\n     // to disk before writing the chainstate, resulting in a failure to continue if interrupted.\n-    for (BlockMap::iterator it = mapBlockIndex.begin(); it != mapBlockIndex.end(); it++) {\n+    for (BlockMap::iterator it = mapBlockIndex.begin(); it != mapBlockIndex.end(); ++it) {\n         CBlockIndex* pindexIter = it->second;\n \n         // Note: If we encounter an insufficiently validated block that\n@@ -4462,7 +4461,7 @@ void static CheckBlockIndex(const Consensus::Params& consensusParams)\n \n     // Build forward-pointing map of the entire block tree.\n     std::multimap<CBlockIndex*,CBlockIndex*> forward;\n-    for (BlockMap::iterator it = mapBlockIndex.begin(); it != mapBlockIndex.end(); it++) {\n+    for (BlockMap::iterator it = mapBlockIndex.begin(); it != mapBlockIndex.end(); ++it) {\n         forward.insert(std::make_pair(it->second->pprev, it->second));\n     }\n \n@@ -4731,7 +4730,7 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n         const CInv &inv = *it;\n         {\n             boost::this_thread::interruption_point();\n-            it++;\n+            ++it;\n \n             if (inv.type == MSG_BLOCK || inv.type == MSG_FILTERED_BLOCK || inv.type == MSG_CMPCT_BLOCK || inv.type == MSG_WITNESS_BLOCK)\n             {\n@@ -6188,7 +6187,7 @@ bool ProcessMessages(CNode* pfrom)\n             break;\n \n         // at this point, any failure means we can delete the current message\n-        it++;\n+        ++it;\n \n         // Scan for message start\n         if (memcmp(msg.hdr.pchMessageStart, chainparams.MessageStart(), MESSAGE_START_SIZE) != 0) {\n@@ -6611,7 +6610,7 @@ bool SendMessages(CNode* pto)\n                 // Produce a vector with all candidates for sending\n                 vector<std::set<uint256>::iterator> vInvTx;\n                 vInvTx.reserve(pto->setInventoryTxToSend.size());\n-                for (std::set<uint256>::iterator it = pto->setInventoryTxToSend.begin(); it != pto->setInventoryTxToSend.end(); it++) {\n+                for (std::set<uint256>::iterator it = pto->setInventoryTxToSend.begin(); it != pto->setInventoryTxToSend.end(); ++it) {\n                     vInvTx.push_back(it);\n                 }\n                 CAmount filterrate = 0;\n@@ -6792,7 +6791,7 @@ class CMainCleanup\n     ~CMainCleanup() {\n         // block headers\n         BlockMap::iterator it1 = mapBlockIndex.begin();\n-        for (; it1 != mapBlockIndex.end(); it1++)\n+        for (; it1 != mapBlockIndex.end(); ++it1)\n             delete (*it1).second;\n         mapBlockIndex.clear();\n "
      },
      {
        "sha": "930b9cc81f4c2edaca49c80b83b413bd18e00594",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1892343246ad7511406759e793271343f0d060/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1892343246ad7511406759e793271343f0d060/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=fa1892343246ad7511406759e793271343f0d060",
        "patch": "@@ -216,7 +216,7 @@ void BlockAssembler::onlyUnconfirmed(CTxMemPool::setEntries& testSet)\n             testSet.erase(iit++);\n         }\n         else {\n-            iit++;\n+            ++iit;\n         }\n     }\n }"
      },
      {
        "sha": "19999b526dd5c4acf5f39d778a4d6bf9ae45fa94",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1892343246ad7511406759e793271343f0d060/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1892343246ad7511406759e793271343f0d060/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=fa1892343246ad7511406759e793271343f0d060",
        "patch": "@@ -134,8 +134,7 @@ bool GetLocal(CService& addr, const CNetAddr *paddrPeer)\n     int nBestReachability = -1;\n     {\n         LOCK(cs_mapLocalHost);\n-        for (std::map<CNetAddr, LocalServiceInfo>::iterator it = mapLocalHost.begin(); it != mapLocalHost.end(); it++)\n-        {\n+        for (std::map<CNetAddr, LocalServiceInfo>::iterator it = mapLocalHost.begin(); it != mapLocalHost.end(); ++it) {\n             int nScore = (*it).second.nScore;\n             int nReachability = (*it).first.GetReachabilityFrom(paddrPeer);\n             if (nReachability > nBestReachability || (nReachability == nBestReachability && nScore > nBestScore))\n@@ -530,8 +529,7 @@ bool CNode::IsBanned(CNetAddr ip)\n     bool fResult = false;\n     {\n         LOCK(cs_setBanned);\n-        for (banmap_t::iterator it = setBanned.begin(); it != setBanned.end(); it++)\n-        {\n+        for (banmap_t::iterator it = setBanned.begin(); it != setBanned.end(); ++it) {\n             CSubNet subNet = (*it).first;\n             CBanEntry banEntry = (*it).second;\n \n@@ -838,7 +836,7 @@ void SocketSendData(CNode *pnode)\n             if (pnode->nSendOffset == data.size()) {\n                 pnode->nSendOffset = 0;\n                 pnode->nSendSize -= data.size();\n-                it++;\n+                ++it;\n             } else {\n                 // could not send full message; stop sending more\n                 break;"
      },
      {
        "sha": "5c86994dd788df41225d83dd58983a4eeeed88d0",
        "filename": "src/qt/bantablemodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1892343246ad7511406759e793271343f0d060/src/qt/bantablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1892343246ad7511406759e793271343f0d060/src/qt/bantablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bantablemodel.cpp?ref=fa1892343246ad7511406759e793271343f0d060",
        "patch": "@@ -54,8 +54,7 @@ class BanTablePriv\n #if QT_VERSION >= 0x040700\n         cachedBanlist.reserve(banMap.size());\n #endif\n-        for (banmap_t::iterator it = banMap.begin(); it != banMap.end(); it++)\n-        {\n+        for (banmap_t::iterator it = banMap.begin(); it != banMap.end(); ++it) {\n             CCombinedBan banEntry;\n             banEntry.subnet = (*it).first;\n             banEntry.banEntry = (*it).second;"
      },
      {
        "sha": "4a7de94e0ea936ffaed9e5c5af634ff7719703bb",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1892343246ad7511406759e793271343f0d060/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1892343246ad7511406759e793271343f0d060/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=fa1892343246ad7511406759e793271343f0d060",
        "patch": "@@ -168,8 +168,7 @@ bool parseBitcoinURI(const QUrl &uri, SendCoinsRecipient *out)\n     QUrlQuery uriQuery(uri);\n     QList<QPair<QString, QString> > items = uriQuery.queryItems();\n #endif\n-    for (QList<QPair<QString, QString> >::iterator i = items.begin(); i != items.end(); i++)\n-    {\n+    for (QList<QPair<QString, QString> >::iterator i = items.begin(); i != items.end(); ++i) {\n         bool fShouldReturnFalse = false;\n         if (i->first.startsWith(\"req-\"))\n         {"
      },
      {
        "sha": "a530aab653d5ff6e8bd1dc625114ac6f82558f10",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1892343246ad7511406759e793271343f0d060/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1892343246ad7511406759e793271343f0d060/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=fa1892343246ad7511406759e793271343f0d060",
        "patch": "@@ -225,7 +225,7 @@ UniValue addnode(const UniValue& params, bool fHelp)\n \n     LOCK(cs_vAddedNodes);\n     vector<string>::iterator it = vAddedNodes.begin();\n-    for(; it != vAddedNodes.end(); it++)\n+    for (; it != vAddedNodes.end(); ++it)\n         if (strNode == *it)\n             break;\n \n@@ -543,8 +543,7 @@ UniValue listbanned(const UniValue& params, bool fHelp)\n     CNode::GetBanned(banMap);\n \n     UniValue bannedAddresses(UniValue::VARR);\n-    for (banmap_t::iterator it = banMap.begin(); it != banMap.end(); it++)\n-    {\n+    for (banmap_t::iterator it = banMap.begin(); it != banMap.end(); ++it) {\n         CBanEntry banEntry = (*it).second;\n         UniValue rec(UniValue::VOBJ);\n         rec.push_back(Pair(\"address\", (*it).first.ToString()));"
      },
      {
        "sha": "8120eee551d781e84b02b115dd00ebd879c7382c",
        "filename": "src/test/coins_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1892343246ad7511406759e793271343f0d060/src/test/coins_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1892343246ad7511406759e793271343f0d060/src/test/coins_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coins_tests.cpp?ref=fa1892343246ad7511406759e793271343f0d060",
        "patch": "@@ -74,7 +74,7 @@ class CCoinsViewCacheTest : public CCoinsViewCache\n     {\n         // Manually recompute the dynamic usage of the whole data, and compare it.\n         size_t ret = memusage::DynamicUsage(cacheCoins);\n-        for (CCoinsMap::iterator it = cacheCoins.begin(); it != cacheCoins.end(); it++) {\n+        for (CCoinsMap::iterator it = cacheCoins.begin(); it != cacheCoins.end(); ++it) {\n             ret += it->second.coins.DynamicMemoryUsage();\n         }\n         BOOST_CHECK_EQUAL(DynamicMemoryUsage(), ret);\n@@ -149,7 +149,7 @@ BOOST_AUTO_TEST_CASE(coins_cache_simulation_test)\n \n         // Once every 1000 iterations and at the end, verify the full cache.\n         if (insecure_rand() % 1000 == 1 || i == NUM_SIMULATION_ITERATIONS - 1) {\n-            for (std::map<uint256, CCoins>::iterator it = result.begin(); it != result.end(); it++) {\n+            for (std::map<uint256, CCoins>::iterator it = result.begin(); it != result.end(); ++it) {\n                 const CCoins* coins = stack.back()->AccessCoins(it->first);\n                 if (coins) {\n                     BOOST_CHECK(*coins == it->second);\n@@ -302,7 +302,7 @@ BOOST_AUTO_TEST_CASE(updatecoins_simulation_test)\n \n         // Once every 1000 iterations and at the end, verify the full cache.\n         if (insecure_rand() % 1000 == 1 || i == NUM_SIMULATION_ITERATIONS - 1) {\n-            for (std::map<uint256, CCoins>::iterator it = result.begin(); it != result.end(); it++) {\n+            for (std::map<uint256, CCoins>::iterator it = result.begin(); it != result.end(); ++it) {\n                 const CCoins* coins = stack.back()->AccessCoins(it->first);\n                 if (coins) {\n                     BOOST_CHECK(*coins == it->second);"
      },
      {
        "sha": "653fcf04820cce6f6e1e67a6b32680e6a4fc9974",
        "filename": "src/test/limitedmap_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1892343246ad7511406759e793271343f0d060/src/test/limitedmap_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1892343246ad7511406759e793271343f0d060/src/test/limitedmap_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/limitedmap_tests.cpp?ref=fa1892343246ad7511406759e793271343f0d060",
        "patch": "@@ -58,7 +58,7 @@ BOOST_AUTO_TEST_CASE(limitedmap_test)\n         map.update(it, i + 2);\n         BOOST_CHECK(map.find(i)->second == i + 2);\n \n-        it++;\n+        ++it;\n     }\n \n     // check that we've exhausted the iterator"
      },
      {
        "sha": "bcfe23e7a89f1abc19a220b49ef3168435bc9b7e",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1892343246ad7511406759e793271343f0d060/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1892343246ad7511406759e793271343f0d060/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=fa1892343246ad7511406759e793271343f0d060",
        "patch": "@@ -84,7 +84,7 @@ string FormatScriptFlags(unsigned int flags)\n         if (flags & it->second) {\n             ret += it->first + \",\";\n         }\n-        it++;\n+        ++it;\n     }\n     return ret.substr(0, ret.size() - 1);\n }"
      },
      {
        "sha": "a11edda26631f8d3b60349c22da78e5a46764ae6",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1892343246ad7511406759e793271343f0d060/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1892343246ad7511406759e793271343f0d060/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=fa1892343246ad7511406759e793271343f0d060",
        "patch": "@@ -138,11 +138,11 @@ void CCoinsViewDBCursor::Next()\n \n bool CBlockTreeDB::WriteBatchSync(const std::vector<std::pair<int, const CBlockFileInfo*> >& fileInfo, int nLastFile, const std::vector<const CBlockIndex*>& blockinfo) {\n     CDBBatch batch(*this);\n-    for (std::vector<std::pair<int, const CBlockFileInfo*> >::const_iterator it=fileInfo.begin(); it != fileInfo.end(); it++) {\n+    for (std::vector<std::pair<int, const CBlockFileInfo*> >::const_iterator it = fileInfo.begin(); it != fileInfo.end(); ++it) {\n         batch.Write(make_pair(DB_BLOCK_FILES, it->first), *it->second);\n     }\n     batch.Write(DB_LAST_BLOCK, nLastFile);\n-    for (std::vector<const CBlockIndex*>::const_iterator it=blockinfo.begin(); it != blockinfo.end(); it++) {\n+    for (std::vector<const CBlockIndex*>::const_iterator it = blockinfo.begin(); it != blockinfo.end(); ++it) {\n         batch.Write(make_pair(DB_BLOCK_INDEX, (*it)->GetBlockHash()), CDiskBlockIndex(*it));\n     }\n     return WriteBatch(batch, true);\n@@ -154,7 +154,7 @@ bool CBlockTreeDB::ReadTxIndex(const uint256 &txid, CDiskTxPos &pos) {\n \n bool CBlockTreeDB::WriteTxIndex(const std::vector<std::pair<uint256, CDiskTxPos> >&vect) {\n     CDBBatch batch(*this);\n-    for (std::vector<std::pair<uint256,CDiskTxPos> >::const_iterator it=vect.begin(); it!=vect.end(); it++)\n+    for (std::vector<std::pair<uint256, CDiskTxPos> >::const_iterator it = vect.begin(); it != vect.end(); ++it)\n         batch.Write(make_pair(DB_TXINDEX, it->first), it->second);\n     return WriteBatch(batch);\n }"
      },
      {
        "sha": "c60296f15ee4d42c3a8b532d85f7707d22a203aa",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1892343246ad7511406759e793271343f0d060/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1892343246ad7511406759e793271343f0d060/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=fa1892343246ad7511406759e793271343f0d060",
        "patch": "@@ -542,7 +542,7 @@ void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMem\n     // Remove transactions spending a coinbase which are now immature and no-longer-final transactions\n     LOCK(cs);\n     list<CTransaction> transactionsToRemove;\n-    for (indexed_transaction_set::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n+    for (indexed_transaction_set::const_iterator it = mapTx.begin(); it != mapTx.end(); ++it) {\n         const CTransaction& tx = it->GetTx();\n         LockPoints lp = it->GetLockPoints();\n         bool validLP =  TestLockPointValidity(&lp);\n@@ -661,7 +661,7 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n \n     LOCK(cs);\n     list<const CTxMemPoolEntry*> waitingOnDependants;\n-    for (indexed_transaction_set::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n+    for (indexed_transaction_set::const_iterator it = mapTx.begin(); it != mapTx.end(); ++it) {\n         unsigned int i = 0;\n         checkTotal += it->GetTxSize();\n         innerUsage += it->DynamicMemoryUsage();"
      },
      {
        "sha": "bdc89efafc2273c643a1e950326623576f0d7304",
        "filename": "src/wallet/crypter.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1892343246ad7511406759e793271343f0d060/src/wallet/crypter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1892343246ad7511406759e793271343f0d060/src/wallet/crypter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.h?ref=fa1892343246ad7511406759e793271343f0d060",
        "patch": "@@ -191,7 +191,7 @@ class CCryptoKeyStore : public CBasicKeyStore\n         while (mi != mapCryptedKeys.end())\n         {\n             setAddress.insert((*mi).first);\n-            mi++;\n+            ++mi;\n         }\n     }\n "
      },
      {
        "sha": "d7e477228752edea06b545ab2258d1f1307bd466",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1892343246ad7511406759e793271343f0d060/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1892343246ad7511406759e793271343f0d060/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=fa1892343246ad7511406759e793271343f0d060",
        "patch": "@@ -462,7 +462,7 @@ void CDBEnv::Flush(bool fShutdown)\n                 LogPrint(\"db\", \"CDBEnv::Flush: %s closed\\n\", strFile);\n                 mapFileUseCount.erase(mi++);\n             } else\n-                mi++;\n+                ++mi;\n         }\n         LogPrint(\"db\", \"CDBEnv::Flush: Flush(%s)%s took %15dms\\n\", fShutdown ? \"true\" : \"false\", fDbEnvInit ? \"\" : \" database not started\", GetTimeMillis() - nStart);\n         if (fShutdown) {"
      },
      {
        "sha": "54974b10b8288ebf5f4c104b78d88a848d847549",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1892343246ad7511406759e793271343f0d060/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1892343246ad7511406759e793271343f0d060/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=fa1892343246ad7511406759e793271343f0d060",
        "patch": "@@ -589,7 +589,7 @@ UniValue dumpwallet(const UniValue& params, bool fHelp)\n \n     // sort time/key pairs\n     std::vector<std::pair<int64_t, CKeyID> > vKeyBirth;\n-    for (std::map<CKeyID, int64_t>::const_iterator it = mapKeyBirth.begin(); it != mapKeyBirth.end(); it++) {\n+    for (std::map<CKeyID, int64_t>::const_iterator it = mapKeyBirth.begin(); it != mapKeyBirth.end(); ++it) {\n         vKeyBirth.push_back(std::make_pair(it->second, it->first));\n     }\n     mapKeyBirth.clear();\n@@ -618,7 +618,7 @@ UniValue dumpwallet(const UniValue& params, bool fHelp)\n             file << \"# extended private masterkey: \" << b58extkey.ToString() << \"\\n\\n\";\n         }\n     }\n-    for (std::vector<std::pair<int64_t, CKeyID> >::const_iterator it = vKeyBirth.begin(); it != vKeyBirth.end(); it++) {\n+    for (std::vector<std::pair<int64_t, CKeyID> >::const_iterator it = vKeyBirth.begin(); it != vKeyBirth.end(); ++it) {\n         const CKeyID &keyid = it->second;\n         std::string strTime = EncodeDumpTime(it->first);\n         std::string strAddr = CBitcoinAddress(keyid).ToString();"
      },
      {
        "sha": "ca81814493c5b720586573dedecba7f3b1aca5ed",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1892343246ad7511406759e793271343f0d060/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1892343246ad7511406759e793271343f0d060/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=fa1892343246ad7511406759e793271343f0d060",
        "patch": "@@ -1678,8 +1678,7 @@ UniValue listsinceblock(const UniValue& params, bool fHelp)\n \n     UniValue transactions(UniValue::VARR);\n \n-    for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); it++)\n-    {\n+    for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it) {\n         CWalletTx tx = (*it).second;\n \n         if (depth == -1 || tx.GetDepthInMainChain() < depth)"
      },
      {
        "sha": "8a6e2df54cf2c0facb9592363b6a601ab196b85b",
        "filename": "src/wallet/test/crypto_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1892343246ad7511406759e793271343f0d060/src/wallet/test/crypto_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1892343246ad7511406759e793271343f0d060/src/wallet/test/crypto_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/crypto_tests.cpp?ref=fa1892343246ad7511406759e793271343f0d060",
        "patch": "@@ -135,7 +135,7 @@ static void TestDecrypt(const CCrypter& crypt, const std::vector<unsigned char>&\n     // This behavior was reverted for 1.0.1k.\n     if (vchDecrypted1 != vchDecrypted2 && vchDecrypted1.size() >= AES_BLOCK_SIZE && SSLeay() == 0x100010afL)\n     {\n-        for(CKeyingMaterial::iterator it = vchDecrypted1.end() - AES_BLOCK_SIZE; it != vchDecrypted1.end() - 1; it++)\n+        for (CKeyingMaterial::iterator it = vchDecrypted1.end() - AES_BLOCK_SIZE; it != vchDecrypted1.end() - 1; ++it)\n             *it = 0;\n     }\n "
      },
      {
        "sha": "7b58f17fcc1def394501abe12c7985a3891b34de",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1892343246ad7511406759e793271343f0d060/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1892343246ad7511406759e793271343f0d060/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=fa1892343246ad7511406759e793271343f0d060",
        "patch": "@@ -963,7 +963,7 @@ bool CWallet::AbandonTransaction(const uint256& hashTx)\n                 if (!done.count(iter->second)) {\n                     todo.insert(iter->second);\n                 }\n-                iter++;\n+                ++iter;\n             }\n             // If a transaction changes 'conflicted' state, that changes the balance\n             // available of the outputs it spends. So force those to be recomputed\n@@ -1024,7 +1024,7 @@ void CWallet::MarkConflicted(const uint256& hashBlock, const uint256& hashTx)\n                  if (!done.count(iter->second)) {\n                      todo.insert(iter->second);\n                  }\n-                 iter++;\n+                 ++iter;\n             }\n             // If a transaction changes 'conflicted' state, that changes the balance\n             // available of the outputs it spends. So force those to be recomputed\n@@ -3088,7 +3088,7 @@ void CWallet::ListLockedCoins(std::vector<COutPoint>& vOutpts)\n {\n     AssertLockHeld(cs_wallet); // setLockedCoins\n     for (std::set<COutPoint>::iterator it = setLockedCoins.begin();\n-         it != setLockedCoins.end(); it++) {\n+         it != setLockedCoins.end(); ++it) {\n         COutPoint outpt = (*it);\n         vOutpts.push_back(outpt);\n     }\n@@ -3133,7 +3133,7 @@ void CWallet::GetKeyBirthTimes(std::map<CKeyID, int64_t> &mapKeyBirth) const {\n     mapKeyBirth.clear();\n \n     // get birth times for keys with metadata\n-    for (std::map<CKeyID, CKeyMetadata>::const_iterator it = mapKeyMetadata.begin(); it != mapKeyMetadata.end(); it++)\n+    for (std::map<CKeyID, CKeyMetadata>::const_iterator it = mapKeyMetadata.begin(); it != mapKeyMetadata.end(); ++it)\n         if (it->second.nCreateTime)\n             mapKeyBirth[it->first] = it->second.nCreateTime;\n \n@@ -3154,7 +3154,7 @@ void CWallet::GetKeyBirthTimes(std::map<CKeyID, int64_t> &mapKeyBirth) const {\n \n     // find first block that affects those keys, if there are any left\n     std::vector<CKeyID> vAffected;\n-    for (std::map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); it++) {\n+    for (std::map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it) {\n         // iterate over all wallet transactions...\n         const CWalletTx &wtx = (*it).second;\n         BlockMap::const_iterator blit = mapBlockIndex.find(wtx.hashBlock);\n@@ -3176,7 +3176,7 @@ void CWallet::GetKeyBirthTimes(std::map<CKeyID, int64_t> &mapKeyBirth) const {\n     }\n \n     // Extract block timestamps for those keys\n-    for (std::map<CKeyID, CBlockIndex*>::const_iterator it = mapKeyFirstBlock.begin(); it != mapKeyFirstBlock.end(); it++)\n+    for (std::map<CKeyID, CBlockIndex*>::const_iterator it = mapKeyFirstBlock.begin(); it != mapKeyFirstBlock.end(); ++it)\n         mapKeyBirth[it->first] = it->second->GetBlockTime() - 7200; // block times can be 2h off\n }\n "
      },
      {
        "sha": "79f6209f108e44a667741b20c657da3d58a94251",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1892343246ad7511406759e793271343f0d060/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1892343246ad7511406759e793271343f0d060/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=fa1892343246ad7511406759e793271343f0d060",
        "patch": "@@ -807,7 +807,7 @@ DBErrors CWalletDB::ZapSelectTx(CWallet* pwallet, vector<uint256>& vTxHashIn, ve\n     vector<uint256>::iterator it = vTxHashIn.begin();\n     BOOST_FOREACH (uint256 hash, vTxHash) {\n         while (it < vTxHashIn.end() && (*it) < hash) {\n-            it++;\n+            ++it;\n         }\n         if (it == vTxHashIn.end()) {\n             break;\n@@ -881,7 +881,7 @@ void ThreadFlushWalletDB(const string& strFile)\n                 while (mi != bitdb.mapFileUseCount.end())\n                 {\n                     nRefCount += (*mi).second;\n-                    mi++;\n+                    ++mi;\n                 }\n \n                 if (nRefCount == 0)"
      },
      {
        "sha": "3368a8cbe43a84b62bf31af03dc221b61b3e4da5",
        "filename": "src/zmq/zmqnotificationinterface.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1892343246ad7511406759e793271343f0d060/src/zmq/zmqnotificationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1892343246ad7511406759e793271343f0d060/src/zmq/zmqnotificationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqnotificationinterface.cpp?ref=fa1892343246ad7511406759e793271343f0d060",
        "patch": "@@ -131,7 +131,7 @@ void CZMQNotificationInterface::UpdatedBlockTip(const CBlockIndex *pindex)\n         CZMQAbstractNotifier *notifier = *i;\n         if (notifier->NotifyBlock(pindex))\n         {\n-            i++;\n+            ++i;\n         }\n         else\n         {\n@@ -148,7 +148,7 @@ void CZMQNotificationInterface::SyncTransaction(const CTransaction& tx, const CB\n         CZMQAbstractNotifier *notifier = *i;\n         if (notifier->NotifyTransaction(tx))\n         {\n-            i++;\n+            ++i;\n         }\n         else\n         {"
      }
    ]
  }
]