{
  "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17050",
  "id": 324678427,
  "node_id": "MDExOlB1bGxSZXF1ZXN0MzI0Njc4NDI3",
  "html_url": "https://github.com/bitcoin/bitcoin/pull/17050",
  "diff_url": "https://github.com/bitcoin/bitcoin/pull/17050.diff",
  "patch_url": "https://github.com/bitcoin/bitcoin/pull/17050.patch",
  "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17050",
  "number": 17050,
  "state": "closed",
  "locked": false,
  "title": "tests: Add fuzzing harnesses for functions parsing scripts, numbers, JSON and HD keypaths (bip32)",
  "user": {
    "login": "practicalswift",
    "id": 7826565,
    "node_id": "MDQ6VXNlcjc4MjY1NjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/practicalswift",
    "html_url": "https://github.com/practicalswift",
    "followers_url": "https://api.github.com/users/practicalswift/followers",
    "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
    "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
    "organizations_url": "https://api.github.com/users/practicalswift/orgs",
    "repos_url": "https://api.github.com/users/practicalswift/repos",
    "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
    "received_events_url": "https://api.github.com/users/practicalswift/received_events",
    "type": "User",
    "site_admin": false
  },
  "body": "Add fuzzing harnesses for `DecodeRawPSBT(...)`, `ParseHDKeypath(...)`, `ParseScript(...)`, various number parsing functions and various JSON/univalue parsing functions.\r\n\r\n**Testing this PR**\r\nAs usual the best way to test proposed fuzzing harnesses is to use `test_fuzzing_harnesses.sh` (#17000) to quickly verify that the relevant code regions are triggered, that the fuzzing throughput seems reasonable, etc.\r\n\r\n`test_fuzzing_harnesses.sh 'psbt|hd_keypath|numbers|parse_script|univalue' 10` runs all fuzzers matching the regexp and gives them ten seconds of runtime each.\r\n\r\n```\r\n$ CC=clang CXX=clang++ ./configure --enable-fuzz --with-sanitizers=address,fuzzer,undefined\r\n$ make\r\n$ contrib/devtools/test_fuzzing_harnesses.sh 'psbt|hd_keypath|numbers|parse_script|univalue' 10\r\nTesting fuzzer parse_hd_keypath during 10 second(s)\r\nA subset of reached functions:\r\n        NEW_FUNC[0/2]: 0x55bc23a76940 in ParsePrechecks(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) src/util/strencodings.cpp:267\r\n        NEW_FUNC[1/2]: 0x55bc23a77300 in ParseUInt32(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int*) src/util/strencodings.cpp:309\r\nstat::number_of_executed_units: 34237\r\nstat::average_exec_per_sec:     3112\r\nstat::new_units_added:          113\r\nstat::slowest_unit_time_sec:    0\r\nstat::peak_rss_mb:              282\r\nNumber of unique code paths taken during fuzzing round: 30\r\n\r\nTesting fuzzer parse_numbers during 10 second(s)\r\nA subset of reached functions:\r\nstat::number_of_executed_units: 31309\r\nstat::average_exec_per_sec:     2846\r\nstat::new_units_added:          688\r\nstat::slowest_unit_time_sec:    0\r\nstat::peak_rss_mb:              234\r\nNumber of unique code paths taken during fuzzing round: 149\r\n\r\nTesting fuzzer parse_script during 10 second(s)\r\nA subset of reached functions:\r\n        NEW_FUNC[1/11]: 0x5636ff61ba00 in IsDigit(char) src/./util/strencodings.h:70\r\n        NEW_FUNC[0/14]: 0x5636fe6c6280 in CScript::operator<<(opcodetype) src/./script/script.h:448\r\n        NEW_FUNC[1/14]: 0x5636fe6e0290 in prevector<28u, unsigned char, unsigned int, int>::insert(prevector<28u, unsigned char, unsigned int, int>::iterator, unsigned char const&) src/./prevector.h:342\r\n        NEW_FUNC[2/14]: 0x5636fe6e1040 in prevector<28u, unsigned char, unsigned int, int>::size() const src/./prevector.h:277\r\n        NEW_FUNC[3/14]: 0x5636fe6e1250 in prevector<28u, unsigned char, unsigned int, int>::capacity() const src/./prevector.h:295\r\n        NEW_FUNC[4/14]: 0x5636fe6e1cb0 in prevector<28u, unsigned char, unsigned int, int>::item_ptr(int) src/./prevector.h:196\r\n        NEW_FUNC[0/10]: 0x5636fe6c5650 in CScript::operator<<(std::vector<unsigned char, std::allocator<unsigned char> > const&) src/./script/script.h:462\r\n        NEW_FUNC[2/10]: 0x5636fe6e0a20 in void prevector<28u, unsigned char, unsigned int, int>::insert<__gnu_cxx::__normal_iterator<unsigned char const*, std::vector<unsigned char, std::allocator<unsigned char> > > >(prevector<28u, unsigned char, unsigned int, int>::iterator, __gnu_cxx::__normal_iterator<unsigned char const*, std::vector<unsigned char, std::allocator<[32/1902]\r\nchar> > >, __gnu_cxx::__normal_iterator<unsigned char const*, std::vector<unsigned char, std::allocator<unsigned char> > >) src/./prevector.h:368\r\n        NEW_FUNC[5/10]: 0x5636fe6e2350 in void prevector<28u, unsigned char, unsigned int, int>::fill<__gnu_cxx::__normal_iterator<unsigned char const*, std::vector<unsigned char, std::allocator<unsigned char> > > >(unsigned char*, __gnu_cxx::__normal_iterator<unsigned char const*, std::vector<unsigned char, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsign\r\ned char const*, std::vector<unsigned char, std::allocator<unsigned char> > >) src/./prevector.h:204\r\n        NEW_FUNC[0/1]: 0x5636ff8e48b0 in IsHex(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) src/util/strencodings.cpp:61\r\n        NEW_FUNC[0/2]: 0x5636fe6e1410 in prevector<28u, unsigned char, unsigned int, int>::change_capacity(unsigned int) src/./prevector.h:165\r\n        NEW_FUNC[1/2]: 0x5636fe6e1f00 in prevector<28u, unsigned char, unsigned int, int>::indirect_ptr(int) src/./prevector.h:161\r\n        NEW_FUNC[0/1]: 0x5636fe6e0580 in void prevector<28u, unsigned char, unsigned int, int>::insert<unsigned char*>(prevector<28u, unsigned char, unsigned int, int>::iterator, unsigned char*, unsigned char*) src/./prevector.h:368\r\n        NEW_FUNC[0/3]: 0x5636fe85f0d0 in CScript::push_int64(long) src/./script/script.h:394\r\n        NEW_FUNC[1/3]: 0x5636fe85f520 in prevector<28u, unsigned char, unsigned int, int>::push_back(unsigned char const&) src/./prevector.h:422\r\n        NEW_FUNC[2/3]: 0x5636ff8ed730 in atoi64(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) src/util/strencodings.cpp:417\r\nstat::number_of_executed_units: 8153\r\nstat::average_exec_per_sec:     741\r\nstat::new_units_added:          296\r\nstat::slowest_unit_time_sec:    0\r\nstat::peak_rss_mb:              237\r\nNumber of unique code paths taken during fuzzing round: 98\r\n\r\nTesting fuzzer parse_univalue during 10 second(s)\r\nA subset of reached functions:\r\n        NEW_FUNC[0/19]: 0x560db8655950 in tinyformat::detail::formatImpl(std::ostream&, char const*, tinyformat::detail::FormatArg const*, int) src/./tinyformat.h:791\r\n        NEW_FUNC[4/19]: 0x560db86582b0 in tinyformat::detail::printFormatStringLiteral(std::ostream&, char const*) src/./tinyformat.h:564\r\n        NEW_FUNC[5/19]: 0x560db8658690 in tinyformat::detail::streamStateFromFormat(std::ostream&, bool&, int&, char const*, tinyformat::detail::FormatArg const*, int&, int) src/./tinyformat.h:601\r\n        NEW_FUNC[6/19]: 0x560db865f090 in tinyformat::detail::FormatArg::format(std::ostream&, char const*, char const*, int) const src/./tinyformat.h:513\r\n        NEW_FUNC[12/19]: 0x560db8661ba0 in void tinyformat::detail::FormatArg::formatImpl<int>(std::ostream&, char const*, char const*, int, void const*) src/./tinyformat.h:530\r\n        NEW_FUNC[13/19]: 0x560db8661d90 in void tinyformat::formatValue<int>(std::ostream&, char const*, char const*, int, int const&) src/./tinyformat.h:317\r\n        NEW_FUNC[14/19]: 0x560db875c8b0 in void tinyformat::detail::FormatArg::formatImpl<unsigned int>(std::ostream&, char const*, char const*, int, void const*) src/./tinyformat.h:530\r\n        NEW_FUNC[15/19]: 0x560db875caa0 in void tinyformat::formatValue<unsigned int>(std::ostream&, char const*, char const*, int, unsigned int const&) src/./tinyformat.h:317\r\n        NEW_FUNC[16/19]: 0x560db9473ef0 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > tinyformat::format<int, unsigned int>(char const*, int const&, unsigned int const&) src/./tinyformat.h:976\r\n        NEW_FUNC[17/19]: 0x560db94749a0 in void tinyformat::format<int, unsigned int>(std::ostream&, char const*, int const&, unsigned int const&) src/./tinyformat.h:968\r\n        NEW_FUNC[18/19]: 0x560db9474cf0 in tinyformat::detail::FormatListN<2>::FormatListN<int, unsigned int>(int const&, unsigned int const&) src/./tinyformat.h:885\r\nstat::number_of_executed_units: 14089\r\nstat::average_exec_per_sec:     1280\r\nstat::new_units_added:          135\r\nstat::slowest_unit_time_sec:    0\r\nstat::peak_rss_mb:              356\r\nNumber of unique code paths taken during fuzzing round: 62\r\n\r\nTesting fuzzer psbt_input_deserialize during 10 second(s)\r\nA subset of reached functions:\r\n        NEW_FUNC[0/46]: 0x557847ce3530 in prevector<28u, unsigned char, unsigned int, int>::~prevector() src/./prevector.h:456\r\n        NEW_FUNC[3/46]: 0x557847cfdcf0 in prevector<28u, unsigned char, unsigned int, int>::size() const src/./prevector.h:277\r\n        NEW_FUNC[4/46]: 0x557847cfe0c0 in prevector<28u, unsigned char, unsigned int, int>::change_capacity(unsigned int) src/./prevector.h:165\r\n        NEW_FUNC[13/46]: 0x557847d3c890 in unsigned long ReadCompactSize<CDataStream>(CDataStream&) src/./serialize.h:290\r\n        NEW_FUNC[14/46]: 0x557847d47b60 in prevector<28u, unsigned char, unsigned int, int>::resize(unsigned int) src/./prevector.h:311\r\n        NEW_FUNC[16/46]: 0x557847d48800 in CTxOut::CTxOut() src/./primitives/transaction.h:140\r\n        NEW_FUNC[17/46]: 0x557847d4b050 in CTxOut::SetNull() src/./primitives/transaction.h:155\r\n        NEW_FUNC[18/46]: 0x557847d4b140 in CScript::clear() src/./script/script.h:563\r\n        NEW_FUNC[19/46]: 0x557847d4ead0 in void Unserialize_impl<CDataStream, unsigned char, std::allocator<unsigned char> >(CDataStream&, std::vector<unsigned char, std::allocator<unsigned char> >&, unsigned char const&) src/./serialize.h:746\r\n        NEW_FUNC[0/58]: 0x557847cfdf00 in prevector<28u, unsigned char, unsigned int, int>::capacity() const src/./prevector.h:295\r\n        NEW_FUNC[1/58]: 0x557847cfe960 in prevector<28u, unsigned char, unsigned int, int>::item_ptr(int) src/./prevector.h:196\r\n        NEW_FUNC[2/58]: 0x557847cfebb0 in prevector<28u, unsigned char, unsigned int, int>::indirect_ptr(int) src/./prevector.h:161\r\n        NEW_FUNC[3/58]: 0x557847d03990 in uint256::uint256() src/./uint256.h:123\r\n        NEW_FUNC[0/3]: 0x557847d47430 in void CScript::SerializationOp<CDataStream, CSerActionUnserialize>(CDataStream&, CSerActionUnserialize) src/./script/script.h:418\r\n        NEW_FUNC[1/3]: 0x557847d47730 in void Unserialize_impl<CDataStream, 28u, unsigned char>(CDataStream&, prevector<28u, unsigned char, unsigned int, int>&, unsigned char const&) src/./serialize.h:666\r\n        NEW_FUNC[2/3]: 0x557847d60dd0 in CDataStream& CDataStream::operator>><CScript&>(CScript&) src/./streams.h:460\r\n        NEW_FUNC[1/78]: 0x557847cffae0 in prevector<28u, unsigned char, unsigned int, int>::item_ptr(int) const src/./prevector.h:197\r\n        NEW_FUNC[2/78]: 0x557847cffd30 in prevector<28u, unsigned char, unsigned int, int>::indirect_ptr(int) const src/./prevector.h:162\r\n        NEW_FUNC[0/1]: 0x557847d65f90 in OverrideStream<CDataStream>& OverrideStream<CDataStream>::operator>><unsigned char&>(unsigned char&) src/./streams.h:46\r\n        NEW_FUNC[0/3]: 0x557847d470e0 in void SerReadWriteMany<CDataStream, CScript&>(CDataStream&, CSerActionUnserialize, CScript&) src/./serialize.h:989\r\n        NEW_FUNC[1/3]: 0x557847d4ac50 in void CTxOut::SerializationOp<CDataStream, CSerActionUnserialize>(CDataStream&, CSerActionUnserialize) src/./primitives/transaction.h:149\r\n        NEW_FUNC[2/3]: 0x557847d5f860 in void UnserializeFromVector<CDataStream, CTxOut>(CDataStream&, CTxOut&) src/./script/sign.h:90\r\n        NEW_FUNC[0/1]: 0x557847d60840 in void UnserializeFromVector<CDataStream, int>(CDataStream&, int&) src/./script/sign.h:90\r\n        NEW_FUNC[0/1]: 0x557847d41010 in CMutableTransaction::HasWitness() const src/./primitives/transaction.h:398\r\nstat::number_of_executed_units: 13615\r\nstat::average_exec_per_sec:     1237\r\nstat::new_units_added:          357\r\nstat::slowest_unit_time_sec:    0\r\nstat::peak_rss_mb:              446\r\nNumber of unique code paths taken during fuzzing round: 152\r\n\r\nTesting fuzzer psbt_output_deserialize during 10 second(s)\r\nA subset of reached functions:\r\n        NEW_FUNC[0/27]: 0x55c9347e5940 in prevector<28u, unsigned char, unsigned int, int>::~prevector() src/./prevector.h:456\r\n        NEW_FUNC[5/27]: 0x55c93483eca0 in unsigned long ReadCompactSize<CDataStream>(CDataStream&) src/./serialize.h:290\r\n        NEW_FUNC[6/27]: 0x55c934850ee0 in void Unserialize_impl<CDataStream, unsigned char, std::allocator<unsigned char> >(CDataStream&, std::vector<unsigned char, std::allocator<unsigned char> >&, unsigned char const&) src/./serialize.h:746\r\n        NEW_FUNC[14/27]: 0x55c934858500 in PSBTOutput::PSBTOutput() src/./psbt.h:281\r\n        NEW_FUNC[15/27]: 0x55c934858870 in CDataStream& CDataStream::operator>><PSBTOutput&>(PSBTOutput&) src/./streams.h:460\r\n        NEW_FUNC[0/1]: 0x55c934800100 in prevector<28u, unsigned char, unsigned int, int>::size() const src/./prevector.h:277\r\n        NEW_FUNC[0/4]: 0x55c934849840 in void CScript::SerializationOp<CDataStream, CSerActionUnserialize>(CDataStream&, CSerActionUnserialize) src/./script/script.h:418\r\n        NEW_FUNC[1/4]: 0x55c934849b40 in void Unserialize_impl<CDataStream, 28u, unsigned char>(CDataStream&, prevector<28u, unsigned char, unsigned int, int>&, unsigned char const&) src/./serialize.h:666\r\n        NEW_FUNC[2/4]: 0x55c934849f70 in prevector<28u, unsigned char, unsigned int, int>::resize(unsigned int) src/./prevector.h:311\r\n        NEW_FUNC[3/4]: 0x55c93485dc60 in CDataStream& CDataStream::operator>><CScript&>(CScript&) src/./streams.h:460\r\n        NEW_FUNC[0/3]: 0x55c934800310 in prevector<28u, unsigned char, unsigned int, int>::capacity() const src/./prevector.h:295\r\n        NEW_FUNC[1/3]: 0x55c934800d70 in prevector<28u, unsigned char, unsigned int, int>::item_ptr(int) src/./prevector.h:196\r\n        NEW_FUNC[2/3]: 0x55c934849d40 in prevector<28u, unsigned char, unsigned int, int>::resize_uninitialized(unsigned int) src/./prevector.h:381\r\n        NEW_FUNC[0/1]: 0x55c93485ddd0 in void DeserializeHDKeypaths<CDataStream>(CDataStream&, std::vector<unsigned char, std::allocator<unsigned char> > const&, std::map<CPubKey, KeyOriginInfo, std::less<CPubKey>, std::allocator<std::pair<CPubKey const, KeyOriginInfo> > >&) src/./script/sign.h:103\r\nstat::number_of_executed_units: 19130\r\nstat::average_exec_per_sec:     1739\r\nstat::new_units_added:          195\r\nstat::slowest_unit_time_sec:    0\r\nstat::peak_rss_mb:              411\r\nNumber of unique code paths taken during fuzzing round: 64\r\n\r\nTested fuzz harnesses seem to work as expected.\r\n```",
  "created_at": "2019-10-04T13:22:37Z",
  "updated_at": "2021-04-10T19:39:27Z",
  "closed_at": "2019-12-11T18:38:53Z",
  "merged_at": "2019-12-11T18:38:53Z",
  "merge_commit_sha": "a1308b7e12e6af7482954e439f594b771eb62b73",
  "assignee": null,
  "assignees": [],
  "requested_reviewers": [],
  "requested_teams": [],
  "labels": [
    {
      "id": 62963516,
      "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
      "name": "Tests",
      "color": "d4c5f9",
      "default": false,
      "description": null
    }
  ],
  "milestone": null,
  "draft": false,
  "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17050/commits",
  "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17050/comments",
  "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments{/number}",
  "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17050/comments",
  "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/a1308b7e12e6af7482954e439f594b771eb62b73",
  "head": {
    "label": "practicalswift:fuzzers",
    "ref": "fuzzers",
    "sha": "a1308b7e12e6af7482954e439f594b771eb62b73",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "repo": {
      "id": 78569642,
      "node_id": "MDEwOlJlcG9zaXRvcnk3ODU2OTY0Mg==",
      "name": "bitcoin",
      "full_name": "practicalswift/bitcoin",
      "private": false,
      "owner": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
        "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/practicalswift/bitcoin",
      "description": "Bitcoin Core integration/staging tree",
      "fork": true,
      "url": "https://api.github.com/repos/practicalswift/bitcoin",
      "forks_url": "https://api.github.com/repos/practicalswift/bitcoin/forks",
      "keys_url": "https://api.github.com/repos/practicalswift/bitcoin/keys{/key_id}",
      "collaborators_url": "https://api.github.com/repos/practicalswift/bitcoin/collaborators{/collaborator}",
      "teams_url": "https://api.github.com/repos/practicalswift/bitcoin/teams",
      "hooks_url": "https://api.github.com/repos/practicalswift/bitcoin/hooks",
      "issue_events_url": "https://api.github.com/repos/practicalswift/bitcoin/issues/events{/number}",
      "events_url": "https://api.github.com/repos/practicalswift/bitcoin/events",
      "assignees_url": "https://api.github.com/repos/practicalswift/bitcoin/assignees{/user}",
      "branches_url": "https://api.github.com/repos/practicalswift/bitcoin/branches{/branch}",
      "tags_url": "https://api.github.com/repos/practicalswift/bitcoin/tags",
      "blobs_url": "https://api.github.com/repos/practicalswift/bitcoin/git/blobs{/sha}",
      "git_tags_url": "https://api.github.com/repos/practicalswift/bitcoin/git/tags{/sha}",
      "git_refs_url": "https://api.github.com/repos/practicalswift/bitcoin/git/refs{/sha}",
      "trees_url": "https://api.github.com/repos/practicalswift/bitcoin/git/trees{/sha}",
      "statuses_url": "https://api.github.com/repos/practicalswift/bitcoin/statuses/{sha}",
      "languages_url": "https://api.github.com/repos/practicalswift/bitcoin/languages",
      "stargazers_url": "https://api.github.com/repos/practicalswift/bitcoin/stargazers",
      "contributors_url": "https://api.github.com/repos/practicalswift/bitcoin/contributors",
      "subscribers_url": "https://api.github.com/repos/practicalswift/bitcoin/subscribers",
      "subscription_url": "https://api.github.com/repos/practicalswift/bitcoin/subscription",
      "commits_url": "https://api.github.com/repos/practicalswift/bitcoin/commits{/sha}",
      "git_commits_url": "https://api.github.com/repos/practicalswift/bitcoin/git/commits{/sha}",
      "comments_url": "https://api.github.com/repos/practicalswift/bitcoin/comments{/number}",
      "issue_comment_url": "https://api.github.com/repos/practicalswift/bitcoin/issues/comments{/number}",
      "contents_url": "https://api.github.com/repos/practicalswift/bitcoin/contents/{+path}",
      "compare_url": "https://api.github.com/repos/practicalswift/bitcoin/compare/{base}...{head}",
      "merges_url": "https://api.github.com/repos/practicalswift/bitcoin/merges",
      "archive_url": "https://api.github.com/repos/practicalswift/bitcoin/{archive_format}{/ref}",
      "downloads_url": "https://api.github.com/repos/practicalswift/bitcoin/downloads",
      "issues_url": "https://api.github.com/repos/practicalswift/bitcoin/issues{/number}",
      "pulls_url": "https://api.github.com/repos/practicalswift/bitcoin/pulls{/number}",
      "milestones_url": "https://api.github.com/repos/practicalswift/bitcoin/milestones{/number}",
      "notifications_url": "https://api.github.com/repos/practicalswift/bitcoin/notifications{?since,all,participating}",
      "labels_url": "https://api.github.com/repos/practicalswift/bitcoin/labels{/name}",
      "releases_url": "https://api.github.com/repos/practicalswift/bitcoin/releases{/id}",
      "deployments_url": "https://api.github.com/repos/practicalswift/bitcoin/deployments",
      "created_at": "2017-01-10T20:09:24Z",
      "updated_at": "2021-04-26T14:37:37Z",
      "pushed_at": "2021-10-01T13:54:08Z",
      "git_url": "git://github.com/practicalswift/bitcoin.git",
      "ssh_url": "git@github.com:practicalswift/bitcoin.git",
      "clone_url": "https://github.com/practicalswift/bitcoin.git",
      "svn_url": "https://github.com/practicalswift/bitcoin",
      "homepage": "https://bitcoin.org/en/download",
      "size": 164685,
      "stargazers_count": 4,
      "watchers_count": 4,
      "language": "C++",
      "has_issues": false,
      "has_projects": true,
      "has_downloads": false,
      "has_wiki": false,
      "has_pages": false,
      "forks_count": 0,
      "mirror_url": null,
      "archived": false,
      "disabled": false,
      "open_issues_count": 0,
      "license": {
        "key": "mit",
        "name": "MIT License",
        "spdx_id": "MIT",
        "url": "https://api.github.com/licenses/mit",
        "node_id": "MDc6TGljZW5zZTEz"
      },
      "allow_forking": true,
      "is_template": false,
      "topics": [],
      "visibility": "public",
      "forks": 0,
      "open_issues": 0,
      "watchers": 4,
      "default_branch": "master"
    }
  },
  "base": {
    "label": "bitcoin:master",
    "ref": "master",
    "sha": "1189b6acab115a7fe7bd67f8b4c6e3f55e53274e",
    "user": {
      "login": "bitcoin",
      "id": 528860,
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bitcoin",
      "html_url": "https://github.com/bitcoin",
      "followers_url": "https://api.github.com/users/bitcoin/followers",
      "following_url": "https://api.github.com/users/bitcoin/following{/other_user}",
      "gists_url": "https://api.github.com/users/bitcoin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bitcoin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
      "organizations_url": "https://api.github.com/users/bitcoin/orgs",
      "repos_url": "https://api.github.com/users/bitcoin/repos",
      "events_url": "https://api.github.com/users/bitcoin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bitcoin/received_events",
      "type": "Organization",
      "site_admin": false
    },
    "repo": {
      "id": 1181927,
      "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
      "name": "bitcoin",
      "full_name": "bitcoin/bitcoin",
      "private": false,
      "owner": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following{/other_user}",
        "gists_url": "https://api.github.com/users/bitcoin/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bitcoin/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin",
      "description": "Bitcoin Core integration/staging tree",
      "fork": false,
      "url": "https://api.github.com/repos/bitcoin/bitcoin",
      "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
      "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys{/key_id}",
      "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators{/collaborator}",
      "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
      "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
      "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events{/number}",
      "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
      "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees{/user}",
      "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches{/branch}",
      "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
      "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs{/sha}",
      "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags{/sha}",
      "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs{/sha}",
      "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees{/sha}",
      "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/{sha}",
      "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
      "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
      "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
      "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
      "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
      "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits{/sha}",
      "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits{/sha}",
      "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments{/number}",
      "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments{/number}",
      "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/{+path}",
      "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/{base}...{head}",
      "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
      "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/{archive_format}{/ref}",
      "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
      "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues{/number}",
      "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls{/number}",
      "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones{/number}",
      "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications{?since,all,participating}",
      "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels{/name}",
      "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases{/id}",
      "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
      "created_at": "2010-12-19T15:16:43Z",
      "updated_at": "2021-12-02T09:59:34Z",
      "pushed_at": "2021-12-02T09:35:21Z",
      "git_url": "git://github.com/bitcoin/bitcoin.git",
      "ssh_url": "git@github.com:bitcoin/bitcoin.git",
      "clone_url": "https://github.com/bitcoin/bitcoin.git",
      "svn_url": "https://github.com/bitcoin/bitcoin",
      "homepage": "https://bitcoincore.org/en/download",
      "size": 188203,
      "stargazers_count": 59736,
      "watchers_count": 59736,
      "language": "C++",
      "has_issues": true,
      "has_projects": true,
      "has_downloads": false,
      "has_wiki": false,
      "has_pages": false,
      "forks_count": 30710,
      "mirror_url": null,
      "archived": false,
      "disabled": false,
      "open_issues_count": 1020,
      "license": {
        "key": "mit",
        "name": "MIT License",
        "spdx_id": "MIT",
        "url": "https://api.github.com/licenses/mit",
        "node_id": "MDc6TGljZW5zZTEz"
      },
      "allow_forking": true,
      "is_template": false,
      "topics": [
        "bitcoin",
        "c-plus-plus",
        "cryptocurrency",
        "cryptography",
        "p2p"
      ],
      "visibility": "public",
      "forks": 30710,
      "open_issues": 1020,
      "watchers": 59736,
      "default_branch": "master"
    }
  },
  "_links": {
    "self": {
      "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17050"
    },
    "html": {
      "href": "https://github.com/bitcoin/bitcoin/pull/17050"
    },
    "issue": {
      "href": "https://api.github.com/repos/bitcoin/bitcoin/issues/17050"
    },
    "comments": {
      "href": "https://api.github.com/repos/bitcoin/bitcoin/issues/17050/comments"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17050/comments"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments{/number}"
    },
    "commits": {
      "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17050/commits"
    },
    "statuses": {
      "href": "https://api.github.com/repos/bitcoin/bitcoin/statuses/a1308b7e12e6af7482954e439f594b771eb62b73"
    }
  },
  "author_association": "CONTRIBUTOR",
  "auto_merge": null,
  "active_lock_reason": null,
  "merged": true,
  "mergeable": null,
  "rebaseable": null,
  "mergeable_state": "unknown",
  "merged_by": {
    "login": "MarcoFalke",
    "id": 6399679,
    "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/MarcoFalke",
    "html_url": "https://github.com/MarcoFalke",
    "followers_url": "https://api.github.com/users/MarcoFalke/followers",
    "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
    "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
    "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
    "repos_url": "https://api.github.com/users/MarcoFalke/repos",
    "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
    "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
    "type": "User",
    "site_admin": false
  },
  "comments": 8,
  "review_comments": 6,
  "maintainer_can_modify": false,
  "commits": 5,
  "additions": 190,
  "deletions": 1,
  "changed_files": 7
}