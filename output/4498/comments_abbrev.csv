sipa,2014-07-09T16:58:52Z,"Even with column limit 0, IMPLEMENT_SERIALIZE doesn't work well. See addrman.h, where it suddenly loses two levels of indentation, starting inside the serialize implementation, up until the end of the file.\n",https://github.com/bitcoin/bitcoin/pull/4498#issuecomment-48502872,48502872,
kazcw,2014-07-09T21:04:13Z,Putting curlies inside the parens gets reasonable clang-format results:\n\n``` cpp\nIMPLEMENT_SERIALIZE({\n    READWRITE(stuff);\n})\n```\n,https://github.com/bitcoin/bitcoin/pull/4498#issuecomment-48533818,48533818,
sipa,2014-07-10T15:49:15Z,"@kazcw Look at addrman.h, where even that construct fails in a very odd way (we lose indentation, even _after_ the IMPLEMENT_SERIALIZE ends).\n\nAnd when setting an explicit line length, it's even worse.\n",https://github.com/bitcoin/bitcoin/pull/4498#issuecomment-48623437,48623437,
kazcw,2014-07-10T17:29:56Z,@sipa that's not what I'm seeing in addrman.h (with or without ColumnLimit):\n\n``` c++\npublic:\n    IMPLEMENT_SERIALIZE({\n        CAddress* pthis = (CAddress*)(this);\n        READWRITE(*pthis);\n        READWRITE(source);\n        READWRITE(nLastSuccess);\n        READWRITE(nAttempts);\n    })\n    void Init()\n    {\n        nLastSuccess = 0;\n```\n\nI'm using a clang from yesterday [4a3ff91],https://github.com/bitcoin/bitcoin/pull/4498#issuecomment-48636830,48636830,
sipa,2014-07-10T17:31:17Z,@kazcw That one works. Look at the larger one in CAddrMan.\n,https://github.com/bitcoin/bitcoin/pull/4498#issuecomment-48637013,48637013,
sipa,2014-07-10T17:37:27Z,Upgrading; let's see.\n,https://github.com/bitcoin/bitcoin/pull/4498#issuecomment-48637800,48637800,
kazcw,2014-07-10T17:40:33Z,"@sipa: I see, that block makes clang-format just give up. Maybe clang-format has a nesting limit for blocks within apparent function calls or something. I found that it works if you use just ({ and }) rather than the current (({{ and }})), though.\n",https://github.com/bitcoin/bitcoin/pull/4498#issuecomment-48638224,48638224,
sipa,2014-07-17T14:23:16Z,"Rebased on #4508, and changed pointer alignment to right.\n",https://github.com/bitcoin/bitcoin/pull/4498#issuecomment-49313160,49313160,
jgarzik,2014-07-17T14:26:33Z,"I retract my previous position.  I think pointer\* and reference& should cuddle with the type, rather than the name.\n",https://github.com/bitcoin/bitcoin/pull/4498#issuecomment-49313642,49313642,
jgarzik,2014-07-17T14:28:34Z,"It is disappointing that we lose multi-column alignments, e.g.\n\n```\n- SIGHASH_FOO          = (second column nicely aligned)\n+ SIGHASH_FOO = (left aligned)\n```\n",https://github.com/bitcoin/bitcoin/pull/4498#issuecomment-49313962,49313962,
sipa,2014-07-17T14:30:42Z,"@jgarzik Agree. it retains it in some places (for comments eg), but not always.\n",https://github.com/bitcoin/bitcoin/pull/4498#issuecomment-49314277,49314277,
jgarzik,2014-07-17T14:36:59Z,"We lose indented cpp\n\n```\n-# error ""Bitcoin cannot be compiled without assertions.""\n+#error ""Bitcoin cannot be compiled without assertions.""\n```\n",https://github.com/bitcoin/bitcoin/pull/4498#issuecomment-49315134,49315134,
jgarzik,2014-07-17T14:47:39Z,Overall I think it is a net-win.\n,https://github.com/bitcoin/bitcoin/pull/4498#issuecomment-49316701,49316701,
jtimon,2014-07-17T15:40:57Z,"I also prefer pointer\* ptr and reference& ref over pointer *ptr and reference &ref. It is more clear to me since being a pointer is really part of type. But I don't think it is important enough to change it unless you're already touching that line.  \nAnyway, this is bike shedding, we should just always use one or the other.\n",https://github.com/bitcoin/bitcoin/pull/4498#issuecomment-49324324,49324324,
Diapolo,2014-07-17T20:04:49Z,"I love the intention of this pull, I really love how it feels to have a unified style all over the code!\nOnly small drawback is that (as @jgarzik calls them), multi-column alignments are lost, which are nice for readability.\n\n@sipa @laanwj What about the include order policy? This won't be fixed by this, right? If we intent to merge this, am I allowed to fix the includes again or not?\n",https://github.com/bitcoin/bitcoin/pull/4498#issuecomment-49357794,49357794,
sipa,2014-07-17T20:09:48Z,So this is purely about indentation/whitespace. Anything that changes anything but a space or newline is outside of scope here. That doesn't mean we can have a policy about other things too - it just won't be automatically enforceable.\n,https://github.com/bitcoin/bitcoin/pull/4498#issuecomment-49358655,49358655,
laanwj,2014-07-17T20:15:22Z,"> It is disappointing that we lose multi-column alignments, e.g.\n> - SIGHASH_FOO          = (second column nicely aligned)\n> - SIGHASH_FOO = (left aligned)\n\nI'm happy that we lose manual alignments like that. No more code changes that change surrounding lines to 'realign' when the point is just to add one another constant (that happens to be longer than the rest). Or pulls that 'fix' the silly",https://github.com/bitcoin/bitcoin/pull/4498#issuecomment-49359419,49359419,
sipa,2014-07-17T20:55:50Z,Added more examples. Ugly things:\n- chainparams.cpp: the list of seed IPs gets expanded tot 1 per line.\n- uint256.h: one of the friend operators ends up concatenated to the previous line (perhaps confused by << >>?).\n- The usual inconsistent splitting/rejoining of long lines.\n,https://github.com/bitcoin/bitcoin/pull/4498#issuecomment-49364369,49364369,
laanwj,2014-07-18T07:21:13Z,"> chainparams.cpp: the list of seed IPs\n\nAs this is auto-generated data, it makes sense to move it to an external include file that is not affected by clang-format. Talking about autogenerated files, bitcoinstrings.cpp should also be excluded.\n",https://github.com/bitcoin/bitcoin/pull/4498#issuecomment-49402411,49402411,
sipa,2014-07-27T11:24:49Z,"Can I have some ACKs on the general effect of these?\n\nIf accepted, I'll remove the example change here and just commit the .clang-format file.\n\nNext steps: apply the changes one by one to infrequently-changing files. The majority of them will probably need to wait until close to release candidate stage, as to not affect pull requests.\n",https://github.com/bitcoin/bitcoin/pull/4498#issuecomment-50261920,50261920,
jgarzik,2014-07-27T14:12:45Z,ACK general direction\n,https://github.com/bitcoin/bitcoin/pull/4498#issuecomment-50265329,50265329,
jtimon,2014-07-28T02:43:57Z,"ACK on general effect, absolutely. The roadmap seems reasonable too. And even if we will need to eventually break some PR, I wouldn't worry too much since the conflicts in the rebase should be trivial to resolve.\n\nNow excuse me for my bike shedding...\nBy changing a couple of parameters:\n\n```\nPointerAlignment: Left\nSpacesBeforeTrailingComments: 1\n```\n\nWe get less changes in the example fi",https://github.com/bitcoin/bitcoin/pull/4498#issuecomment-50295569,50295569,
jtimon,2014-07-28T02:59:24Z,"Oh, also added BOOST_REVERSE_FOREACH to ForEachMacros\n",https://github.com/bitcoin/bitcoin/pull/4498#issuecomment-50296146,50296146,
laanwj,2014-07-28T07:42:41Z,(untested :p) ACK on general effects\n,https://github.com/bitcoin/bitcoin/pull/4498#issuecomment-50308456,50308456,
Diapolo,2014-07-28T10:03:46Z,(untested) ACK\n,https://github.com/bitcoin/bitcoin/pull/4498#issuecomment-50320650,50320650,
sipa,2014-07-28T18:33:53Z,@jtimon: thanks for backing up that suggestion with actual numbers (less changes to the code is indeed what I was aiming for mostly at this point).\n,https://github.com/bitcoin/bitcoin/pull/4498#issuecomment-50379047,50379047,
sipa,2014-07-28T19:40:33Z,"Added BOOST_REVERSE_FOREACH to ForEachMacros and changed SpacesBeforeTrailingComments to 1.\n\nThen tried both PointerAlignment: Left and Right for src/*.{h,cpp}\n- Left: -8195 lines +8206 lines\n- Right: -9124 lines +9135 lines\n\nI'm switching to: PointerAlignment: Left as well.\n",https://github.com/bitcoin/bitcoin/pull/4498#issuecomment-50388129,50388129,
sipa,2014-07-28T20:09:19Z,Ready for review. I've updated coding-style.md as well. Note that I've removed the variable/class naming style as well - it wasn't being followed strictly anymore anyway.\n,https://github.com/bitcoin/bitcoin/pull/4498#issuecomment-50391941,50391941,
sipa,2014-07-28T20:18:07Z,See example output on https://github.com/sipa/bitcoin/commits/clangformat-left\n,https://github.com/bitcoin/bitcoin/pull/4498#issuecomment-50393309,50393309,
BitcoinPullTester,2014-07-28T20:21:43Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/p4498_2887bffcfdc138f53c60091ab2906790971c9af5/ for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-te",https://github.com/bitcoin/bitcoin/pull/4498#issuecomment-50393896,50393896,
jgarzik,2014-07-28T20:59:21Z,ACK\n,https://github.com/bitcoin/bitcoin/pull/4498#issuecomment-50399758,50399758,
jtimon,2014-07-28T21:17:06Z,"ACK.\nIt would be nice to add a ""format"" make target later.\n",https://github.com/bitcoin/bitcoin/pull/4498#issuecomment-50402498,50402498,
jtimon,2014-07-28T21:39:06Z,"By the way, I've tried to find an alternative to @kazcw's solution to implement_serialize on http://clang.llvm.org/docs/ClangFormatStyleOptions.html with no luck, but the curlies inside the parenthesis don't look bad in that case in my opinion.\nAlso, `AllowShortBlocksOnASingleLine: true` would be good in terms of changes, but in that case I think I would prefer not to think about what's more appr",https://github.com/bitcoin/bitcoin/pull/4498#issuecomment-50405763,50405763,
sipa,2014-07-28T21:41:29Z,I'm going to try to replace the IMPLEMENT_SERIALIZE macros with just (templated) class methods.\n,https://github.com/bitcoin/bitcoin/pull/4498#issuecomment-50406113,50406113,
Diapolo,2014-08-06T20:19:23Z,Thanks!\n,https://github.com/bitcoin/bitcoin/pull/4498#issuecomment-51391149,51391149,
kostaz,2014-09-14T07:45:08Z,"Hi guys,\n\nI've proposed the coding style changes in the `Fix coding style with uncrustify #4891`.\nI've used uncrustify tool, but the tool is not important, the coding style is.  :-)\nAnyway, the configuration file for the uncrustify tool is in the mentioned pull merge.\n\nThe rationale for most coding style changes are Stroustrup, Google coding style and common **visual** and readability sense.",https://github.com/bitcoin/bitcoin/pull/4498#issuecomment-55518320,55518320,
jtimon,2014-09-14T16:25:29Z,"To change the .clang-format file, you may want to read this:\n\nhttp://clang.llvm.org/docs/ClangFormatStyleOptions.html\n\nFirst of all, I wouldn't change anything on it until we have applied the current style to the whole project.\nSecond, you cannot apply a style to the whole project at one because that would break practically all open PRs.\nTo me the biggest benefit of automating the style is n",https://github.com/bitcoin/bitcoin/pull/4498#issuecomment-55530680,55530680,
sipa,2014-09-14T18:38:49Z,"I disagree that coding style specifics matter much for readability. It's mostly convention - and we should mostly be aiming at consistency. People will always have different preferences about coding style.\n\nIf there's enough people who prefer one style to another, I guess we can change things. But the purpose here is mostly having one style that everyone agrees on, which means the things like in",https://github.com/bitcoin/bitcoin/pull/4498#issuecomment-55534786,55534786,
kostaz,2014-09-15T13:33:57Z,"Sipa, it is pity that you think that the coding style is not related to the readability. After all, the code is there to read it, change and write a new one. The C++ source code matters only to humans who mostly **read** it! Hence, IMHO, more readable code brings more people. Hmmm... exactly like the book - if you can read book easily, you keep reading it. Otherwise, you put it off for a while / f",https://github.com/bitcoin/bitcoin/pull/4498#issuecomment-55590252,55590252,
laanwj,2014-09-15T13:44:45Z,"@sipa mentioned a fun thing once: once the entire source code is formatted using clang-format, you could locally format your source after checking out however suits you best, then before checking in re-format it with the 'canonical' style file of the project.\n\nAnyhow - different people have different opinions on what coding style is most readable. That's subjective. But it is a fact that a consi",https://github.com/bitcoin/bitcoin/pull/4498#issuecomment-55591564,55591564,
sipa,2014-09-15T18:12:40Z,I fully agree that the source code is there for humans. Humans are however known to have different preferences.\n,https://github.com/bitcoin/bitcoin/pull/4498#issuecomment-55632711,55632711,
jgarzik,2014-07-09T17:32:32Z,Yuck (as @sipa already commented)\n,https://github.com/bitcoin/bitcoin/pull/4498#discussion_r14723521,14723521,src/addrman.h
jgarzik,2014-07-09T17:33:13Z,"Something odd is going on with indentation here.  From reading the diff (ie. possibly not the whole story), it looks like it un-indented one level too much.\n",https://github.com/bitcoin/bitcoin/pull/4498#discussion_r14723556,14723556,src/addrman.h
jgarzik,2014-07-09T17:34:24Z,"Ah, I see what's going on.  It's not keeping the indentation from the header file's method implementation.\n",https://github.com/bitcoin/bitcoin/pull/4498#discussion_r14723611,14723611,src/addrman.h
luke-jr,2014-07-10T15:54:05Z,Does it need to break aligned lines? :(\n,https://github.com/bitcoin/bitcoin/pull/4498#discussion_r14774627,14774627,src/serialize.h
luke-jr,2014-07-10T15:55:35Z,"As much as I wish PointerAlignment Left made sense, C/C++ sadly are designed with it Right semantically.\n",https://github.com/bitcoin/bitcoin/pull/4498#discussion_r14774724,14774724,src/.clang-format
sipa,2014-07-10T15:58:20Z,"I agree, but I don't feel like bikeshedding.\n",https://github.com/bitcoin/bitcoin/pull/4498#discussion_r14774893,14774893,src/.clang-format
jgarzik,2014-07-10T16:01:29Z,"AFAICT, our existing codebase uses 'Right'\n",https://github.com/bitcoin/bitcoin/pull/4498#discussion_r14775090,14775090,src/.clang-format
sipa,2014-07-10T16:02:25Z,It has a mix. According to @laanwj the majority seems to use Left.\n,https://github.com/bitcoin/bitcoin/pull/4498#discussion_r14775155,14775155,src/.clang-format
sipa,2014-07-10T16:03:10Z,"Don't just look at these files. Much code that I wrote uses Right, which is a lot in addrman.h and main.cpp.\n",https://github.com/bitcoin/bitcoin/pull/4498#discussion_r14775193,14775193,src/.clang-format
jgarzik,2014-07-10T16:08:25Z,"I disagree with @laanwj 's assessment.  The majority of new code is Right, looking at all files in src/*.{cpp,h}\n\nOf course, heh, there are nutters out there such as,\n\n```\nCDB::CDB(const char *pszFile, const char* pszMode) :\n```\n",https://github.com/bitcoin/bitcoin/pull/4498#discussion_r14775469,14775469,src/.clang-format
laanwj,2014-07-14T09:19:39Z,"I don't care either way, just pick one.\n",https://github.com/bitcoin/bitcoin/pull/4498#discussion_r14869733,14869733,src/.clang-format
sipa,2014-07-28T21:12:51Z,Left results in 1000 lines less diff. Left it is.\n,https://github.com/bitcoin/bitcoin/pull/4498#discussion_r15491223,15491223,src/.clang-format
