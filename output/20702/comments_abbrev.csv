laanwj,2020-12-18 13:26:13,"I expect this to be a difficult sell because we generally don't treat any of the data files as a stable external interface. Pointers to the file system can be considered implementation details subject to change.\n\nBut on the other hand, the format of the block files *specifically* hasn't ever significantly changed, and is (I think) unlikely to change. \n\nTo be clear I definitely see when thi",https://github.com/bitcoin/bitcoin/pull/20702#issuecomment-748083364,748083364,
DrahtBot,2020-12-18 16:58:31,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #20012 (rpc: Remove duplicate name and argNames from CRPCCommand by MarcoFalke)\n\nIf you consider this pull request impor",https://github.com/bitcoin/bitcoin/pull/20702#issuecomment-748204434,748204434,
Kixunil,2020-12-18 19:08:39,"Perhaps there are ways to mitigate this issue? I could see two situations in which block data move around:\n\n* arbitrarily during run time - this seems incredibly unlikely outside of reorgs (reindexing needs to be done in case of reorgs anyway)\n* on upgrade - upgrade may take longer time because of this; similar things already happened to indexes\n\nA simple way to deal with these is to hav",https://github.com/bitcoin/bitcoin/pull/20702#issuecomment-748267420,748267420,
craigraw,2020-12-19 07:12:35,"Supporting efficient indexes outside of Bitcoin Core is a critical privacy improvement. The Bitcoin Core wallet must keep the wallet's public keys unencrypted in order to track them, meaning that a compromise of the node is a complete compromise of the wallet privacy. \n\nA full index of the kind that electrs provides allows such knowledge of the public keys to be restricted to the period that t",https://github.com/bitcoin/bitcoin/pull/20702#issuecomment-748432555,748432555,
jonasschnelli,2020-12-19 09:29:46,"I'm all-in for adding APIs for more efficient external indexing. I share @laanwj concern about the stableness of file pointers.\n\nHowever, I disagree with @craigraw:\n\n> Supporting efficient indexes outside of Bitcoin Core is a critical privacy improvement. The Bitcoin Core wallet must keep the wallet's public keys unencrypted in order to track them, meaning that a compromise of the node is ",https://github.com/bitcoin/bitcoin/pull/20702#issuecomment-748448367,748448367,
Kixunil,2020-12-19 10:19:03,"@jonasschnelli block filters would be a great argument if some benchmarks were provided and wallets actually supported them. Currently, one of the most reasonable wallets - Electrum requires a specific protocol which is not block filters. The server could perhaps use block filters in the background, the question is is it still possible/reasonable? My understanding is that block filters still have ",https://github.com/bitcoin/bitcoin/pull/20702#issuecomment-748453572,748453572,
laanwj,2020-12-19 11:02:26,"> arbitrarily during run time - this seems incredibly unlikely outside of reorgs (reindexing needs to be done in case of reorgs anyway)\n\nBlocks don't move around on disk ever. A re-org keeps the old blocks, it only changes connections in the block database.\n(It might make the same block height point to a different block, of course, but this is not a different issue from when the RPC is used ",https://github.com/bitcoin/bitcoin/pull/20702#issuecomment-748458329,748458329,
Kixunil,2020-12-19 16:20:27,"Yeah, I meant in the future. Still unlikely. :) Pruning already needs to be disabled for `electrs` to work at all (this is well-documented), so doing anything else would be usage error.",https://github.com/bitcoin/bitcoin/pull/20702#issuecomment-748494194,748494194,
romanz,2020-12-20 12:23:17,"I have changed the RPC to fail ""early"" in pruned mode.\nAlso, improved the tests to cover various batch sizes and RPC failures.\n",https://github.com/bitcoin/bitcoin/pull/20702#issuecomment-748600938,748600938,
romanz,2020-12-29 14:20:21,"> My understanding is that block filters still have O(block_count) complexity, which seems high for each request.\n\nIIUC, the blockfilters today take ~5.8GB so it would probably take a while scanning them given a specific address.\nUsing a ""global address index"" (like the one [suggested here](https://github.com/romanz/electrs/issues/308)) allows efficient lookup for all transactions funding/sp",https://github.com/bitcoin/bitcoin/pull/20702#issuecomment-752093143,752093143,
romanz,2021-01-02 14:29:40,"BTW, it takes ~1m22s to find the relevant blocks for [375Bia3NWiBqR89184zxRTDk1hWRpfKKK1](https://blockstream.info/address/375Bia3NWiBqR89184zxRTDk1hWRpfKKK1), using #20664 `scanblockfilters` using the same machine from https://github.com/bitcoin/bitcoin/pull/20702#issuecomment-752093143:\n\n```\n$ ~/Code/bitcoin-core/src/bitcoin-cli getblockchaininfo | jq .blocks\n664151\n\n$ time ~/Code/bi",https://github.com/bitcoin/bitcoin/pull/20702#issuecomment-753480327,753480327,
luke-jr,2021-01-03 00:39:27,">But on the other hand, the format of the block files specifically hasn't ever significantly changed, and is (I think) unlikely to change.\n\nUndo files, on the other hand, I could see changing significantly, and are implementation-specific.\n\n> Pruning already needs to be disabled for electrs to work at all\n\nIt doesn't make sense to only add this for electrs. Please enable this for pruni",https://github.com/bitcoin/bitcoin/pull/20702#issuecomment-753549462,753549462,
Kixunil,2021-01-03 21:17:37,"@luke-jr I meant `electrs` will not work with pruning but yes, https://github.com/bitcoin/bitcoin/pull/20702/files#diff-decae4be02fb8a47ab4557fe74a9cb853bdfa3ec0fa1b515c0a1e5de91f4ad0bR2499 could be more fine-grained.",https://github.com/bitcoin/bitcoin/pull/20702#issuecomment-753677557,753677557,
luke-jr,2021-01-03 21:21:56,I think it would be best to simply remove the check entirely. Expect clients to deal with the possibility that on a pruned node the returned file could be missing.,https://github.com/bitcoin/bitcoin/pull/20702#issuecomment-753678032,753678032,
Kixunil,2021-01-03 21:31:28,"@luke-jr yeah, I was originally thinking of distinguishing it from other errors when sending response to the client for debugging purposes. Should make error messages and troubleshooting much easier.",https://github.com/bitcoin/bitcoin/pull/20702#issuecomment-753678998,753678998,
luke-jr,2021-01-03 21:35:55,"It creates a race condition. Now there are two ways a pruned block might fail: an exception, or a missing file. Better to just have the missing file be consistently the only failure mode.\n\nAlso, an exception means you have to retry to get the locations of the other blocks. Instead, returning the deleted files means you can get all of the results and deal with the missing ones later without any",https://github.com/bitcoin/bitcoin/pull/20702#issuecomment-753679493,753679493,
Kixunil,2021-01-03 21:48:20,"Do I understand correctly that without explicit check, bitcoind just returns the location even if the file is actually deleted and the client then finds out that the file is deleted only by attempting to access it?",https://github.com/bitcoin/bitcoin/pull/20702#issuecomment-753680910,753680910,
gmaxwell,2021-01-05 04:20:42,"> But on the other hand, the format of the block files specifically hasn't ever significantly changed,\n\nThe format of the _files_ has when blocks could be added out of order, and it broke armory which expected to read them.  It was also discussed changing it to obfscuate the blocks to prevent anti-virus false positives but it turned out that AV systems simply ignore files over some threshold s",https://github.com/bitcoin/bitcoin/pull/20702#issuecomment-754383721,754383721,
Kixunil,2021-01-05 11:12:33,"@gmaxwell \n\nIsn't versioning sufficient to help with the API changing? Bitcoind changed its API in breaking way many times and it seems nobody cared. There's no need to *guarantee* it will not change, just bump a version number if it does.\n\n> If you have to make a round trip request to the RPC to get the location is actually fetching the block itself over the RPC that much worse?\n\nMy u",https://github.com/bitcoin/bitcoin/pull/20702#issuecomment-754571722,754571722,
gmaxwell,2021-01-05 15:16:41,"@Kixunil   Lets imagine that we knew the next major version would add block compression (it certainly could, it's been written after all).  If that happened then every user of this interface would be broken by the change, and couldn't move forward without either radically changing what it was doing or adopting complex core specific code to decode the blocks.  So then compatibility becomes an imped",https://github.com/bitcoin/bitcoin/pull/20702#issuecomment-754699293,754699293,
craigraw,2021-01-06 08:22:07,"Speaking as an external wallet developer, I hope to provide some context that may be useful. One of the original goals of my project was to provide an application that took full advantage of a local copy of the blockchain, providing enough functionality to convince people to run their own node, and thus increasing the number of nodes and improving the bitcoin network generally. To name some of the",https://github.com/bitcoin/bitcoin/pull/20702#issuecomment-755156736,755156736,
sipa,2021-01-06 08:58:25,@craigraw That's an interesting perspective I hadn't considered: that having access to an indexed blockchain means address/key/script information can be offline more of the time.\n\nI'm not sure there is much that can be done about that. I consider anything that needs fast access to the full blockchain (even absent any indexing) as inherently too resource intensive and unscalable already. It's not,https://github.com/bitcoin/bitcoin/pull/20702#issuecomment-755173363,755173363,
romanz,2021-01-07 07:48:34,"Many thanks for the comments and the feedback!\n\n> But it feels hacky, and hard to maintain a stable interface, to try to do that using Bitcoin Core's own storage, which was never designed for this purpose, and will going forward have different priorities.\n\nI agree that the current implementation is indeed ""hacky"" - will try to come up with a better approach.\n",https://github.com/bitcoin/bitcoin/pull/20702#issuecomment-755947769,755947769,
Kixunil,2021-01-07 15:41:08,"> It's not realistic to assume end users will want to dedicate the resources to operate that\n\nI'm not sure. People have the option to pirate digital content for free, yet many choose to spend money instead. The best theory explaining it so far is convenience. If this applies more widely, if having chain indexed has significantly better UX, then I expect at least some people paying for it.\n\",https://github.com/bitcoin/bitcoin/pull/20702#issuecomment-756194295,756194295,
Kixunil,2020-12-18 19:09:56,@romanz do you have any plan for what to do with `electrs` if this is removed in the future?,https://github.com/bitcoin/bitcoin/pull/20702#discussion_r546035310,546035310,src/rpc/blockchain.cpp
Kixunil,2020-12-18 19:21:55,Perhaps it'd make more sense to test that the blocks stored on the returned offsets contain the same data as when using `getblock` call?,https://github.com/bitcoin/bitcoin/pull/20702#discussion_r546043984,546043984,test/functional/rpc_getblocklocations.py
Kixunil,2020-12-18 19:22:13,"I'd like to see this description clarified. Something like: ""The number of blocks to process, including the block with given blockhash. The blocks following the given block will be returned if bigger than one.""\n\nI'm not entirely satisfied with my wording either, so will be happy for clearer version. The idea is to communicate what exactly is in the result.",https://github.com/bitcoin/bitcoin/pull/20702#discussion_r546044099,546044099,src/rpc/blockchain.cpp
Kixunil,2020-12-18 19:25:04,I suppose this is hit (also) when the block is pruned? Perhaps document it?,https://github.com/bitcoin/bitcoin/pull/20702#discussion_r546046367,546046367,src/rpc/blockchain.cpp
romanz,2020-12-19 10:11:58,"If Electrum protocol will allow using the actual `scriptPubKey` for querying the historical transactions, it would be possible to use `blockfilterindex`-based RPC, such as https://github.com/bitcoin/bitcoin/pull/20664 (as suggested [here](https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-747661798)).\nMaybe it can be supported with [bwt](https://github.com/shesek/bwt) if the full node ha",https://github.com/bitcoin/bitcoin/pull/20702#discussion_r546220308,546220308,src/rpc/blockchain.cpp
romanz,2020-12-19 10:12:28,"Sounds good, will do.",https://github.com/bitcoin/bitcoin/pull/20702#discussion_r546220361,546220361,test/functional/rpc_getblocklocations.py
romanz,2020-12-19 10:48:18,Good point - added a check in https://github.com/bitcoin/bitcoin/pull/20702/commits/9d5c2bb85c2601ad54fa9df49b4f13e0490fb421#diff-decae4be02fb8a47ab4557fe74a9cb853bdfa3ec0fa1b515c0a1e5de91f4ad0bR2506.,https://github.com/bitcoin/bitcoin/pull/20702#discussion_r546223638,546223638,src/rpc/blockchain.cpp
romanz,2020-12-19 10:49:01,"Updated the documentation:\n```\ngetblocklocations ""blockhash"" nblocks\n\nEXPERIMENTAL warning: this call may be removed or changed in future releases.\n\nReturns a JSON for the file system location of 'blockhash' block and undo data.\n\nIt is possible to return also the locations of previous blocks, by specifying 'nblocks' > 1.\n\nArguments:\n1. blockhash    (string, required) The bloc",https://github.com/bitcoin/bitcoin/pull/20702#discussion_r546223714,546223714,src/rpc/blockchain.cpp
romanz,2020-12-19 10:50:01,Done at https://github.com/bitcoin/bitcoin/pull/20702/commits/9d5c2bb85c2601ad54fa9df49b4f13e0490fb421.,https://github.com/bitcoin/bitcoin/pull/20702#discussion_r546223805,546223805,test/functional/rpc_getblocklocations.py
Kixunil,2020-12-19 16:16:59,Looks good. :+1: ,https://github.com/bitcoin/bitcoin/pull/20702#discussion_r546255335,546255335,src/rpc/blockchain.cpp
