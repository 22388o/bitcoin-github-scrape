[
  {
    "sha": "9b03c654eb3ac960a1100ab8d496f69ceae89c4e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YjAzYzY1NGViM2FjOTYwYTExMDBhYjhkNDk2ZjY5Y2VhZTg5YzRl",
    "commit": {
      "author": {
        "name": "Roman Zeyde",
        "email": "me@romanzey.de",
        "date": "2020-08-11T14:57:17Z"
      },
      "committer": {
        "name": "Roman Zeyde",
        "email": "me@romanzey.de",
        "date": "2020-12-20T12:49:23Z"
      },
      "message": "RPC: Add getblocklocations call\n\nThis RPC allows the client to retrieve the file system locations\nof the confirmed blocks and their undo data, to allow building\nefficient indexes outside of Bitcoin Core.\n\nAn example usage is described here:\nhttps://github.com/romanz/electrs/issues/308\n\nBy using the new RPC, it is possible to build an address-based\nindex taking ~24GB and a txindex taking ~6GB (as of Dec. 2020).",
      "tree": {
        "sha": "fe509f57b0c5bde715949620d4c01ed97ef78236",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fe509f57b0c5bde715949620d4c01ed97ef78236"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9b03c654eb3ac960a1100ab8d496f69ceae89c4e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niIUEABMKAC0WIQQVyMNXSuTx4l8/NcWHyuX6RpF8uwUCX99IUw8cbWVAcm9tYW56\nZXkuZGUACgkQh8rl+kaRfLutxwD+KcIec0ImJWEmHIKL3b38XT76JxltHRZEUF+R\nv3xPUccA/0wOooKpabNlBN/dGI2dQpd00sz/4zgB1FzlQ3C0FM17\n=tkYL\n-----END PGP SIGNATURE-----",
        "payload": "tree fe509f57b0c5bde715949620d4c01ed97ef78236\nparent f1dbf92ff0475a01d20170ea422c1d086acbbc57\nauthor Roman Zeyde <me@romanzey.de> 1597157837 +0300\ncommitter Roman Zeyde <me@romanzey.de> 1608468563 +0200\n\nRPC: Add getblocklocations call\n\nThis RPC allows the client to retrieve the file system locations\nof the confirmed blocks and their undo data, to allow building\nefficient indexes outside of Bitcoin Core.\n\nAn example usage is described here:\nhttps://github.com/romanz/electrs/issues/308\n\nBy using the new RPC, it is possible to build an address-based\nindex taking ~24GB and a txindex taking ~6GB (as of Dec. 2020).\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b03c654eb3ac960a1100ab8d496f69ceae89c4e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9b03c654eb3ac960a1100ab8d496f69ceae89c4e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b03c654eb3ac960a1100ab8d496f69ceae89c4e/comments",
    "author": {
      "login": "romanz",
      "id": 9900,
      "node_id": "MDQ6VXNlcjk5MDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/romanz",
      "html_url": "https://github.com/romanz",
      "followers_url": "https://api.github.com/users/romanz/followers",
      "following_url": "https://api.github.com/users/romanz/following{/other_user}",
      "gists_url": "https://api.github.com/users/romanz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/romanz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
      "organizations_url": "https://api.github.com/users/romanz/orgs",
      "repos_url": "https://api.github.com/users/romanz/repos",
      "events_url": "https://api.github.com/users/romanz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/romanz/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "romanz",
      "id": 9900,
      "node_id": "MDQ6VXNlcjk5MDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/romanz",
      "html_url": "https://github.com/romanz",
      "followers_url": "https://api.github.com/users/romanz/followers",
      "following_url": "https://api.github.com/users/romanz/following{/other_user}",
      "gists_url": "https://api.github.com/users/romanz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/romanz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
      "organizations_url": "https://api.github.com/users/romanz/orgs",
      "repos_url": "https://api.github.com/users/romanz/repos",
      "events_url": "https://api.github.com/users/romanz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/romanz/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f1dbf92ff0475a01d20170ea422c1d086acbbc57",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f1dbf92ff0475a01d20170ea422c1d086acbbc57",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f1dbf92ff0475a01d20170ea422c1d086acbbc57"
      }
    ],
    "stats": {
      "total": 140,
      "additions": 140,
      "deletions": 0
    },
    "files": [
      {
        "sha": "6f56ac3d5b1bfc63cca081b33bd37f96130f3a98",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 60,
        "deletions": 0,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b03c654eb3ac960a1100ab8d496f69ceae89c4e/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b03c654eb3ac960a1100ab8d496f69ceae89c4e/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=9b03c654eb3ac960a1100ab8d496f69ceae89c4e",
        "patch": "@@ -2470,6 +2470,65 @@ static RPCHelpMan dumptxoutset()\n     };\n }\n \n+static RPCHelpMan getblocklocations()\n+{\n+    return RPCHelpMan{\"getblocklocations\",\n+                \"\\nEXPERIMENTAL warning: this call may be removed or changed in future releases.\\n\"\n+                \"\\nReturns a JSON for the file system location of 'blockhash' block and undo data.\\n\"\n+                \"\\nIt is possible to return also the locations of previous blocks, by specifying 'nblocks' > 1.\\n\",\n+                {\n+                    {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The block hash\"},\n+                    {\"nblocks\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Maximum number locations to return (up to genesis block)\"},\n+                },\n+                {\n+                    RPCResult{\n+                        RPCResult::Type::ARR, \"\", \"\",\n+                        {\n+                            {RPCResult::Type::NUM, \"file\", \"blk*.dat/rev*.dat file index\"},\n+                            {RPCResult::Type::NUM, \"data\", \"block data file offset\"},\n+                            {RPCResult::Type::NUM, \"undo\", \"undo data file offset (if exists)\"},\n+                            {RPCResult::Type::STR_HEX, \"prev\", \"previous block hash\"},\n+                        }\n+                    },\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getblocklocation\", \"\\\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\\\" 10\")\n+                },\n+                [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue {\n+\n+    if (fPruneMode) {\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Block locations are not available in prune mode\");\n+    }\n+\n+    uint256 hash(ParseHashV(request.params[0], \"blockhash\"));\n+    size_t nblocks = request.params[1].get_int();\n+\n+    const CBlockIndex* pblockindex = WITH_LOCK(cs_main, return LookupBlockIndex(hash));\n+    if (!pblockindex) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+    }\n+\n+    UniValue result(UniValue::VARR);\n+    do {\n+        UniValue location(UniValue::VOBJ);\n+        location.pushKV(\"file\", (uint64_t)pblockindex->nFile);\n+        location.pushKV(\"data\", (uint64_t)pblockindex->nDataPos);\n+        if (pblockindex->nUndoPos) {\n+            location.pushKV(\"undo\", (uint64_t)pblockindex->nUndoPos);\n+        }\n+        if (pblockindex->pprev) {\n+            location.pushKV(\"prev\", pblockindex->pprev->GetBlockHash().GetHex());\n+        } else {\n+            location.pushKV(\"prev\", uint256().GetHex());\n+        }\n+        result.push_back(location);\n+        pblockindex = pblockindex->pprev;\n+    } while (result.size() < nblocks && pblockindex);\n+    return result;\n+},\n+    };\n+}\n+\n void RegisterBlockchainRPCCommands(CRPCTable &t)\n {\n // clang-format off\n@@ -2509,6 +2568,7 @@ static const CRPCCommand commands[] =\n     { \"hidden\",             \"waitforblockheight\",     &waitforblockheight,     {\"height\",\"timeout\"} },\n     { \"hidden\",             \"syncwithvalidationinterfacequeue\", &syncwithvalidationinterfacequeue, {} },\n     { \"hidden\",             \"dumptxoutset\",           &dumptxoutset,           {\"path\"} },\n+    { \"hidden\",             \"getblocklocations\",      &getblocklocations,      {\"blockhash\", \"nblocks\"} },\n };\n // clang-format on\n     for (const auto& c : commands) {"
      },
      {
        "sha": "22e3029911d2f9bd0d45ba0f98dbb2dd9642a74f",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b03c654eb3ac960a1100ab8d496f69ceae89c4e/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b03c654eb3ac960a1100ab8d496f69ceae89c4e/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=9b03c654eb3ac960a1100ab8d496f69ceae89c4e",
        "patch": "@@ -90,6 +90,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"getblock\", 1, \"verbosity\" },\n     { \"getblock\", 1, \"verbose\" },\n     { \"getblockheader\", 1, \"verbose\" },\n+    { \"getblocklocations\", 1, \"nblocks\" },\n     { \"getchaintxstats\", 0, \"nblocks\" },\n     { \"gettransaction\", 1, \"include_watchonly\" },\n     { \"gettransaction\", 2, \"verbose\" },"
      },
      {
        "sha": "86fdebf23ccc76094510543e106abfb2bb0a3174",
        "filename": "test/functional/rpc_getblocklocations.py",
        "status": "added",
        "additions": 78,
        "deletions": 0,
        "changes": 78,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b03c654eb3ac960a1100ab8d496f69ceae89c4e/test/functional/rpc_getblocklocations.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b03c654eb3ac960a1100ab8d496f69ceae89c4e/test/functional/rpc_getblocklocations.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_getblocklocations.py?ref=9b03c654eb3ac960a1100ab8d496f69ceae89c4e",
        "patch": "@@ -0,0 +1,78 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019-2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the getblocklocations rpc call.\"\"\"\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (assert_equal, assert_raises_rpc_error)\n+from test_framework.messages import ser_vector\n+\n+import pathlib\n+\n+\n+class GetblocklocationsTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        \"\"\"Test a trivial usage of the getblocklocations RPC command.\"\"\"\n+        node = self.nodes[0]\n+        mocktime = node.getblockheader(node.getblockhash(0))['time'] + 1\n+        node.setmocktime(mocktime)\n+        node.generate(7)\n+\n+        NULL_HASH = '0000000000000000000000000000000000000000000000000000000000000000'\n+        EXPECTED_LOCATIONS = [\n+            {'file': 0, 'data': 1861, 'undo': 254, 'prev': '1893864d81638cae904357907559248964050547ddcd0dbe3f72e65b5a31bf1f'},\n+            {'file': 0, 'data': 1601, 'undo': 213, 'prev': '1b086a63a5d5c320c747fee32cdb819c6f4f9eb78c24b7c5a33ae794218dc639'},\n+            {'file': 0, 'data': 1341, 'undo': 172, 'prev': '448640031d1418c70a109ea4f88f497804f3336c7309ff7e535894beb80b26e4'},\n+            {'file': 0, 'data': 1081, 'undo': 131, 'prev': '602403f82060e224423a9f22062fad3f5333beeee3c30313f6ea808e37b7e0b2'},\n+            {'file': 0, 'data': 821, 'undo': 90, 'prev': '334ab00aba5d213c8f67161ddff346c4643d0709c3bdafa4b4b05fe6f7e4ed48'},\n+            {'file': 0, 'data': 561, 'undo': 49, 'prev': '43f10598f19eced9c514f5ae40dbce0ab101362a22e18820901c6e03d7babe0b'},\n+            {'file': 0, 'data': 301, 'undo': 8, 'prev': '0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206'},\n+            {'file': 0, 'data': 8, 'prev': NULL_HASH},  # genesis block\n+        ]\n+\n+        block_hashes = [node.getblockhash(height) for height in range(len(EXPECTED_LOCATIONS))]\n+        block_hashes.reverse()\n+\n+        # Get blocks' locations using several batch sizes\n+        for batch_size in range(1, 10):\n+            locations = []\n+            tip = block_hashes[0]\n+            while tip != NULL_HASH:\n+                locations.extend(node.getblocklocations(tip, batch_size))\n+                assert_equal(locations, EXPECTED_LOCATIONS[:len(locations)])\n+                tip = locations[-1]['prev']\n+            assert_equal(locations, EXPECTED_LOCATIONS)\n+\n+        # Read blocks' data from the file system\n+        blocks_dir = pathlib.Path(node.datadir) / node.chain / 'blocks'\n+        with (blocks_dir / 'blk00000.dat').open('rb') as blkfile:\n+            for block_hash, location in zip(block_hashes, EXPECTED_LOCATIONS):\n+                block_bytes = bytes.fromhex(node.getblock(block_hash, 0))\n+                assert_file_contains(blkfile, location['data'], block_bytes)\n+\n+\n+        empty_undo = ser_vector([])  # empty blocks = no transactions to undo\n+        with (blocks_dir / 'rev00000.dat').open('rb') as revfile:\n+            for block_hash, location in zip(block_hashes[:-1], EXPECTED_LOCATIONS):  # skip genesis block (has no undo)\n+                assert_file_contains(revfile, location['undo'], empty_undo)\n+\n+        # Fail getting unknown block\n+        unknown_block_hash = '0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef'\n+        assert_raises_rpc_error(-5, 'Block not found', node.getblocklocations, unknown_block_hash, 3)\n+\n+        # Fail in pruned mode\n+        self.restart_node(0, ['-prune=1'])\n+        tip = block_hashes[0]\n+        assert_raises_rpc_error(-1, 'Block locations are not available in prune mode', node.getblocklocations, tip, 3)\n+\n+\n+def assert_file_contains(fileobj, offset, data):\n+    fileobj.seek(offset)\n+    assert_equal(fileobj.read(len(data)), data)\n+\n+if __name__ == '__main__':\n+    GetblocklocationsTest().main()"
      },
      {
        "sha": "3c732a8e92e1162941585621f91b597b67e7369f",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b03c654eb3ac960a1100ab8d496f69ceae89c4e/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b03c654eb3ac960a1100ab8d496f69ceae89c4e/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=9b03c654eb3ac960a1100ab8d496f69ceae89c4e",
        "patch": "@@ -248,6 +248,7 @@\n     'wallet_fallbackfee.py',\n     'wallet_fallbackfee.py --descriptors',\n     'rpc_dumptxoutset.py',\n+    'rpc_getblocklocations.py',\n     'feature_minchainwork.py',\n     'rpc_estimatefee.py',\n     'rpc_getblockstats.py',"
      }
    ]
  }
]