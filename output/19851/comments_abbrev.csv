practicalswift,2020-08-31 19:16:44,When touching `ParseScript`: what also about removing the uses of `boost::algorithm::replace_first` and `boost::algorithm::split` in it? ,https://github.com/bitcoin/bitcoin/pull/19851#issuecomment-683978076,683978076,
promag,2020-09-01 00:10:22,@practicalswift that's fine but I guess not here?,https://github.com/bitcoin/bitcoin/pull/19851#issuecomment-684113110,684113110,
theStack,2020-09-02 07:32:01,"ACK 7b3a0150a5e7d0cd8f31ff7bbd5a421d9020cfd1 ðŸ“ƒ \n\n\n\n> When touching `ParseScript`: what also about removing the uses of `boost::algorithm::replace_first` and `boost::algorithm::split` in it?\n\n@practicalswift: Could you elaborate on why `boost::algorithm::split` should be avoided? I can totally see that `boost::algorithm::replace_first` is overkill here and can be easily done via STL, fo",https://github.com/bitcoin/bitcoin/pull/19851#issuecomment-685411246,685411246,
practicalswift,2020-09-02 07:58:00,"@theStack The long term plan is to remove all usages of Boost, so I thought it would be nice to take one small step in that direction when creating `ParseOpCode` (and thus touching this code). I agree that removing the trivial `boost::algorithm::replace_first` before the less trivial `boost::algorithm::split` makes sense. Also, only `replace_first` is used in the new `ParseOpCode` :)\n\nThe unne",https://github.com/bitcoin/bitcoin/pull/19851#issuecomment-685424702,685424702,
promag,2020-09-02 22:27:43,"Ok, let's do it here.",https://github.com/bitcoin/bitcoin/pull/19851#issuecomment-686061525,686061525,
theStack,2020-09-03 11:13:55,"@promag: Feel free to add my commit: https://github.com/theStack/bitcoin/commit/5dfc039e89107a261c7f8eda70bae1fe63c581c7 (branch https://github.com/theStack/bitcoin/tree/20200903-refactor-get-rid-of-boost-replace_first):\n\n```diff\ndiff --git a/src/core_read.cpp b/src/core_read.cpp\nindex 1829f18..155f443 100644\n--- a/src/core_read.cpp\n+++ b/src/core_read.cpp\n@@ -15,7 +15,6 @@\n #inclu",https://github.com/bitcoin/bitcoin/pull/19851#issuecomment-686419282,686419282,
Empact,2020-09-03 20:42:20,Code review ACK https://github.com/bitcoin/bitcoin/pull/19851/commits/7b3a0150a5e7d0cd8f31ff7bbd5a421d9020cfd1,https://github.com/bitcoin/bitcoin/pull/19851#issuecomment-686754534,686754534,
epson121,2020-09-06 11:53:24,Code review ACK 7b3a0150a5e7d0cd8f31ff7bbd5a421d9020cfd1,https://github.com/bitcoin/bitcoin/pull/19851#issuecomment-687768623,687768623,
laanwj,2020-09-29 14:00:56,"@theStack I don't think your code is equivalent. In the orignal case, both `OP_X` and `X` are accepted. In the new case, only `OP_X` is.\n(concept ACK on getting rid of `boost::algorithm::replace_first` in favor of a direct implementation though)",https://github.com/bitcoin/bitcoin/pull/19851#issuecomment-700725069,700725069,
theStack,2020-09-29 14:21:54,"> @theStack I don't think your code is equivalent. In the orignal case, both `OP_X` and `X` are accepted. In the new case, only `OP_X` is.\n\nHm, I guess the `.rfind()` call is confusing here, leading you to think that the condition is true if the string _doesn't_ start with `""OP_""`? Note that the condition `foo.rfind(bar, 0) == 0` simply checks if `foo` starts with `bar`, e.g. it would be equal",https://github.com/bitcoin/bitcoin/pull/19851#issuecomment-700738652,700738652,
promag,2020-10-06 07:59:32,"Decided to keep boost in this PR, don't want to drag this because of that unrelated change. Applied @laanwj suggestion.",https://github.com/bitcoin/bitcoin/pull/19851#issuecomment-704100728,704100728,
theStack,2020-10-06 10:58:57,"I'd suggest to adapt the expected result string for the util test case ""Create a new transaction with an invalid output script"":\n\n\n```diff\ndiff --git a/test/util/data/bitcoin-util-test.json b/test/util/data/bitcoin-util-test.json\nindex 99cd4ab..0a9846b 100644\n--- a/test/util/data/bitcoin-util-test.json\n+++ b/test/util/data/bitcoin-util-test.json\n@@ -221,7 +221,7 @@\n   { ""exec"": """,https://github.com/bitcoin/bitcoin/pull/19851#issuecomment-704192164,704192164,
luke-jr,2020-10-24 18:01:24,"> The long term plan is to remove all usages of Boost,\n\n@practicalswift No... rather C++ standards are preferred over Boost when appropriate, and Boost isn't allowed in libconsensus. Boost still provides many useful things the standards don't, and I doubt we will ever remove its use entirely.",https://github.com/bitcoin/bitcoin/pull/19851#issuecomment-716032104,716032104,
laanwj,2020-11-20 04:35:08,ACK c92387232f750397da7d131f262c150a608408c2,https://github.com/bitcoin/bitcoin/pull/19851#issuecomment-730844861,730844861,
laanwj,2020-09-30 13:52:54,"You could be more specific about the error here. E.g. like the out of range error:\n```c++\nthrow std::runtime_error(""script parse error: unknown opcode"");\n```",https://github.com/bitcoin/bitcoin/pull/19851#discussion_r497527449,497527449,src/core_read.cpp
promag,2020-10-06 07:59:22,Done.,https://github.com/bitcoin/bitcoin/pull/19851#discussion_r500078529,500078529,src/core_read.cpp
