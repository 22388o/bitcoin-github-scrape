MarcoFalke,2017-01-12T10:01:07Z,fundrawtransaction.py fails on travis,https://github.com/bitcoin/bitcoin/pull/9522#issuecomment-272122413,272122413,
achow101,2017-01-12T15:16:53Z,"It is failing because the transaction is a 0 input transaction which is being interpreted as a segwit transaction. As per the discussion on IRC, not being able to decode 0 input transactions is acceptable behavior.",https://github.com/bitcoin/bitcoin/pull/9522#issuecomment-272189545,272189545,
sdaftuar,2017-02-07T20:39:41Z,"I know I suggested on IRC that we just let decoderawtransaction() fail on transactions with no inputs, but perhaps not working at all on 0-input transactions is a bigger regression than necessary?\n\nI believe we only have ambiguity in the case where something might deserialize into a 0-input, 1-output transaction when witness serialization is disabled.  So perhaps we should just assume the segw",https://github.com/bitcoin/bitcoin/pull/9522#issuecomment-278132685,278132685,
achow101,2017-02-07T21:06:14Z,"I suppose that would work as well. It wouldn't actually be checking for just 0 inputs but rather the `0x0001` flag that signals for segwit, so not all 0-input txs would have to go through both desers.",https://github.com/bitcoin/bitcoin/pull/9522#issuecomment-278139817,278139817,
achow101,2017-02-07T22:06:51Z," I rebased and made @sdaftuar 's suggestion. I can squash if this will be merged as this may not yet be the best solution.\n\nAlso, it still fails fundrawtransaction.py, at this test: https://github.com/bitcoin/bitcoin/blob/master/qa/rpc-tests/fundrawtransaction.py#L588. I don't know what to do about that.",https://github.com/bitcoin/bitcoin/pull/9522#issuecomment-278157180,278157180,
luke-jr,2017-02-16T09:34:02Z,"What does this actually fix? `DecodeHexTx` *already* tries both deserializations, and only accepts them if the entire data is consumed...",https://github.com/bitcoin/bitcoin/pull/9522#issuecomment-280280288,280280288,
jnewbery,2017-02-16T23:40:22Z,"I've tested this and it doesn't appear to solve the originally reported problem in https://bitcointalk.org/index.php?topic=1748353.msg17477509#msg17477509 :\n\n```\nbitcoin-cli decoderawtransaction ""02000000000101c564a62f94c025ac80137817d8658aabceaaad30412facecba1bd2255182e1c40000000000ffffffff01ca124c000000000016001443aac20a116e09ea4f7914be1c55e4c17aa600b7024730440220679eaf5e41eee49b38f3112ec9",https://github.com/bitcoin/bitcoin/pull/9522#issuecomment-280500926,280500926,
achow101,2017-02-17T00:26:43Z,"You definitely did something wrong. It worked fine for me:\n\n```ï¿¼\ndecoderawtransaction 02000000000101c564a62f94c025ac80137817d8658aabceaaad30412facecba1bd2255182e1c40000000000ffffffff01ca124c000000000016001443aac20a116e09ea4f7914be1c55e4c17aa600b7024730440220679eaf5e41eee49b38f3112ec90b49a655db21677db4d7fa80de67aeb987161102204024b85730fc106d0b870623fc221946e624413363eb627fe90eb5047d35565c0121",https://github.com/bitcoin/bitcoin/pull/9522#issuecomment-280510800,280510800,
sipa,2017-02-17T00:46:46Z,"I don't understand what this PR is doing. As @luke-jr points out, `DecodeHexTx` always tries both deserializations (in fact, everything always tries both)... but it prefers the non-witness one when `fTryNoWitness` is passed, which is the case. If we want it to prefer the witness version in case of ambiguity, we should just pass false.",https://github.com/bitcoin/bitcoin/pull/9522#issuecomment-280514261,280514261,
sipa,2017-02-17T00:55:17Z,"Oh, I see... you're looking at the hex code in order to determine the number of txins. Can you instead look at tx.vin.size() of the decode?",https://github.com/bitcoin/bitcoin/pull/9522#issuecomment-280515797,280515797,
achow101,2017-02-17T01:42:30Z,"We discussed this on IRC a while ago. The issue is with 0-input transactions, specifically with witness transactions being interpreted as non-withess 0 input transactions. This PR is to make it prefer the witness serialization over a non-witness for 0-input transactions but maintain the original behavior for other transactions.",https://github.com/bitcoin/bitcoin/pull/9522#issuecomment-280523897,280523897,
sipa,2017-02-17T01:56:03Z,@achow101 Isn't that just identical to passing `false` to DecodeHexTx? The only case in which the decoding is ambiguous is where the non-witness transaction has 0 inputs.,https://github.com/bitcoin/bitcoin/pull/9522#issuecomment-280526181,280526181,
achow101,2017-02-17T02:11:46Z,"@sipa I don't think so. As I understand it, when you pass `false` to `DecodeHexTx` it will interpret a non-witness 0-input transaction as a witness transaction and thus fail to decode it. What this does is that such transactions will be decoded properly on the first pass with `true` being passed in so as to still be able to decode non-witness 0-input transactions instead of failing with decoding t",https://github.com/bitcoin/bitcoin/pull/9522#issuecomment-280528651,280528651,
sipa,2017-02-17T02:17:36Z,"@achow101 I see, of course. The deserialization code doesn't actually try two combinations.",https://github.com/bitcoin/bitcoin/pull/9522#issuecomment-280529561,280529561,
achow101,2017-02-17T02:22:05Z,I'm baffled as to why the tests magically pass now with @sipa's change.,https://github.com/bitcoin/bitcoin/pull/9522#issuecomment-280530237,280530237,
luke-jr,2017-02-17T06:13:17Z,It's no longer checking `vout.size()==1`? (which it probably ought to..),https://github.com/bitcoin/bitcoin/pull/9522#issuecomment-280563242,280563242,
sipa,2017-02-17T06:19:45Z,A transaction with 0 inputs and 2 outputs can be mistaken for an (invalid) extended transaction as well.,https://github.com/bitcoin/bitcoin/pull/9522#issuecomment-280564241,280564241,
achow101,2017-02-17T13:58:08Z,"> A transaction with 0 inputs and 2 outputs can be mistaken for an (invalid) extended transaction as well.\n\nRight, but that shouldn't be a problem now because it will properly decode as non-witness, fail to decode as witness and thus fallback to non-witness decoding.",https://github.com/bitcoin/bitcoin/pull/9522#issuecomment-280656191,280656191,
jnewbery,2017-02-17T16:14:03Z,"Apologies. I had an old bitcoind in my path. I've retested and this now works.\n\nI can explain why fundrawtransaction passes. It's nothing to do with the change in decoderawtransaction. You've rebased off master and picked up #9650, which causes deserialization to fail if there are junk bytes at the end of a transaction. The test was failing on:\n\n`decoderawtransaction ""010000000001000000000",https://github.com/bitcoin/bitcoin/pull/9522#issuecomment-280693082,280693082,
achow101,2017-02-17T16:22:55Z,"@jnewbery Ah, that makes sense now.\n\n> Can you add a code comment above the new code in decoderawtransaction() explaining why we're deserializing two ways? It's quite subtle, so some explanation here would be good.\n\nSure.\n\n> Can you add the same fix to bitcoin-tx (src/bitcoin-tx.cpp)? It's a pain, but while we have two tools for signing/decoding transactions, we should try to keep them",https://github.com/bitcoin/bitcoin/pull/9522#issuecomment-280695664,280695664,
jnewbery,2017-02-17T16:29:16Z,"> I assume this should go in around the only line that has DecodeHexTx()?\n\nI think it needs a bit more thought than that. bitcoin-tx combines the functionality of createrawtransaction, signrawtransaction and decoderawtransaction. With your change here, the deserialization logic is different for those different RPCs. Should we try to mirror that in bitcoin-tx?",https://github.com/bitcoin/bitcoin/pull/9522#issuecomment-280697558,280697558,
luke-jr,2017-02-18T22:46:36Z,@achow101 This doesn't even build now...,https://github.com/bitcoin/bitcoin/pull/9522#issuecomment-280880999,280880999,
achow101,2017-02-18T22:53:49Z,whoops. Bad copy-paste. Fixed that and rebased onto master.,https://github.com/bitcoin/bitcoin/pull/9522#issuecomment-280881374,280881374,
luke-jr,2017-02-18T23:27:58Z,Better if you could rebase on 9828f9a9962c1bee5c343847030b9cfd87a40a5e,https://github.com/bitcoin/bitcoin/pull/9522#issuecomment-280883034,280883034,
achow101,2017-03-02T18:08:58Z,It would be nice (perhaps necessary?) to have this in by the time segwit activates.,https://github.com/bitcoin/bitcoin/pull/9522#issuecomment-283732208,283732208,
jnewbery,2017-03-02T18:37:43Z,"I don't like that this breaks parity between `bitcoin-tx sign` and `bitcoin-cli signrawtransaction`.\n\n`bitcoin-tx sign` will now decode the transaction as segwit when there's ambiguity, but `bitcoin-cli signrawtransaction` will decode the transaction as 0-input non segwit when there's ambiguity.",https://github.com/bitcoin/bitcoin/pull/9522#issuecomment-283739925,283739925,
achow101,2017-03-02T18:51:05Z,@jnewbery I can remove the commit that changes bitcoin-tx,https://github.com/bitcoin/bitcoin/pull/9522#issuecomment-283743500,283743500,
jnewbery,2017-03-02T21:18:50Z,"> I can remove the commit that changes bitcoin-tx\n\nBut then you've broken the parity between `bitcoin-tx` and `bitcoin-cli decoderawtransaction`",https://github.com/bitcoin/bitcoin/pull/9522#issuecomment-283785084,283785084,
achow101,2017-03-03T16:24:04Z,"@jnewbery I'm not quite sure what you are asking me to do. Do you want to have `decoderawtransaction`, `signrawtransaction`, and `bitcoin-tx` all have the same decoding behavior?",https://github.com/bitcoin/bitcoin/pull/9522#issuecomment-283999395,283999395,
jnewbery,2017-03-03T19:46:34Z,"I'd suggest making bitcoin-tx behave like signrawtransaction if it's being used to sign a transaction, and behave like createrawtransaction/decoderawtransaction if it's being used to decode, create or modify (without signing) a transaction.",https://github.com/bitcoin/bitcoin/pull/9522#issuecomment-284051990,284051990,
achow101,2017-03-06T14:25:48Z,"@jnewbery I don't think it is possible to have separate behavior like that in bitcoin-tx. You can have multiple things happening in one bitcoin-tx command. You can have it modify a transaction and then sign it, and for all of those to act on the same transaction consistently, the transaction needs to be the same across all bitcoin-tx commands, so there can't be separate decoding behavior. Also, th",https://github.com/bitcoin/bitcoin/pull/9522#issuecomment-284409824,284409824,
sipa,2017-02-17T02:16:43Z,I think this can be written as `if (mtx.vin.size() == 0) {` instead.,https://github.com/bitcoin/bitcoin/pull/9522#discussion_r101673819,101673819,src/rpc/rawtransaction.cpp
jnewbery,2017-03-02T18:33:58Z,what do you mean by 'normal transaction' here?,https://github.com/bitcoin/bitcoin/pull/9522#discussion_r103996110,103996110,src/rpc/rawtransaction.cpp
achow101,2017-03-02T18:50:23Z,"that should be ""witness transaction""",https://github.com/bitcoin/bitcoin/pull/9522#discussion_r103999698,103999698,src/rpc/rawtransaction.cpp
