[
  {
    "sha": "fa5f938cfe4264054e9017fbe710c81e7b3bb150",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTVmOTM4Y2ZlNDI2NDA1NGU5MDE3ZmJlNzEwYzgxZTdiM2JiMTUw",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-04-22T12:16:42Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-04-29T05:17:32Z"
      },
      "message": "test: Remove new_tx reference\n\nnew_tx is a reference to tx. To avoid confusion and code-bloat, remove it",
      "tree": {
        "sha": "6e08864de6958c8708846f99bec3d16b86d22c5a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6e08864de6958c8708846f99bec3d16b86d22c5a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa5f938cfe4264054e9017fbe710c81e7b3bb150",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUi8Egv8CRBBo7eJjMKVsqlQASLjPoArdeokcSOXT4HEM6NKw3Nt6+m2qalmzVmG\nUD6Bi6/cZOrLH8RpsbD7O862nBCpeCTTQyhPIrW4lGtkcp+/mlweRgMZ8d5fEpbi\n+agJsQPyQorNnDP+ssRHC9AEY3cwhLEq/kD/2vV5i6DFcfrSkaPE1UhUsXXcrCjp\n+YIodiIW3/HTFiUgWnzlAr4JbDNd0KsyJWxgYEdXTAcuKifkCCMaq1f+Raj4CfSE\nhETpkzuyuAs+GDit5KvOCbAkh3Qbux3km50CLt1XU/IWUvKeyT+XK4huWlS9yACi\nxPoqHp4hCrDOSrELRBKlg9Uc+/Y9Df7FGWb1ZWhFu38b5cTFvg9ZjIx6jbWL29UG\na2q/hq8ktVhCiPU05E+rdyImdp7bkRT4TmGSL1YEpOXd5ebzk/QeBRTcRcDPKvX8\nTIBIKOi08uVb6k/QB3rwGcuRMAMfJOhGxlgFRWDYVgiwL8oVsClVBjroySmww/wR\npvs0r2LO\n=cTyq\n-----END PGP SIGNATURE-----",
        "payload": "tree 6e08864de6958c8708846f99bec3d16b86d22c5a\nparent fb66dbe786ff3028d8f2b0be503ddd3b36541798\nauthor MarcoFalke <falke.marco@gmail.com> 1619093802 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1619673452 +0200\n\ntest: Remove new_tx reference\n\nnew_tx is a reference to tx. To avoid confusion and code-bloat, remove it\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa5f938cfe4264054e9017fbe710c81e7b3bb150",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa5f938cfe4264054e9017fbe710c81e7b3bb150",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa5f938cfe4264054e9017fbe710c81e7b3bb150/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fb66dbe786ff3028d8f2b0be503ddd3b36541798",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb66dbe786ff3028d8f2b0be503ddd3b36541798",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fb66dbe786ff3028d8f2b0be503ddd3b36541798"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 4,
      "deletions": 6
    },
    "files": [
      {
        "sha": "5c4512c3879361375d83e6ac99b21c2a69e449ce",
        "filename": "test/functional/feature_cltv.py",
        "status": "modified",
        "additions": 4,
        "deletions": 6,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5f938cfe4264054e9017fbe710c81e7b3bb150/test/functional/feature_cltv.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5f938cfe4264054e9017fbe710c81e7b3bb150/test/functional/feature_cltv.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_cltv.py?ref=fa5f938cfe4264054e9017fbe710c81e7b3bb150",
        "patch": "@@ -47,13 +47,11 @@ def cltv_modify_tx(node, tx, prepend_scriptsig, nsequence=None, nlocktime=None):\n \n         # Need to re-sign, since nSequence and nLockTime changed\n         signed_result = node.signrawtransactionwithwallet(ToHex(tx))\n-        new_tx = CTransaction()\n-        new_tx.deserialize(BytesIO(hex_str_to_bytes(signed_result['hex'])))\n-    else:\n-        new_tx = tx\n+        tx = CTransaction()\n+        tx.deserialize(BytesIO(hex_str_to_bytes(signed_result['hex'])))\n \n-    new_tx.vin[0].scriptSig = CScript(prepend_scriptsig + list(CScript(new_tx.vin[0].scriptSig)))\n-    return new_tx\n+    tx.vin[0].scriptSig = CScript(prepend_scriptsig + list(CScript(tx.vin[0].scriptSig)))\n+    return tx\n \n \n def cltv_invalidate(node, tx, failure_reason):"
      }
    ]
  },
  {
    "sha": "fa5591d38cfc917235a3dffd61c36dbf1f781a4d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTU1OTFkMzhjZmM5MTcyMzVhM2RmZmQ2MWMzNmRiZjFmNzgxYTRk",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-04-22T11:57:12Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-04-29T05:17:36Z"
      },
      "message": "test: Hide tx rehash in helper\n\nThis avoids code-bloat and accidentally forgetting to call it",
      "tree": {
        "sha": "4b1aa00c57c58d6b7c6869397d2fc6d50064e596",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4b1aa00c57c58d6b7c6869397d2fc6d50064e596"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa5591d38cfc917235a3dffd61c36dbf1f781a4d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjavAv9FCiWypBJQYpOI0n1bDPsTor9qJ+ghaxoyQUfAEBrLcA1D6pKbbwO/Rac\npuxDrAbd7LJct8g4e+c0lbLwJpnqKbOJ/njBoSh/5VhJBidbRarJSIYCL+CKo+dY\n8mECYbMLmPwS4UQCaKFRfcMr/cGQf45F/CHSmhgFw0p0/zkVHXR5kuzD6HzGeW7w\nZdBlvO+VdqLU2rrPKaDotNAS7axG8NhP7c2j7nAhTsdRQM6ZkDUebIehb8b/Dt73\nMEK+ijDN0i+/fmmXWUfbdsSXwBT6zGqHR6jenkeA0zrlu/M0IyDnrvAxzFJdz0PR\ny2WlVasSi4sfu8LPb7Ccc+DmnUmNxq6htZuPXTYDxX2KHJaSmf6kN5SLRL3tdFQg\nwD7UNJ4AWnZZIv6fJU+N6pQf+iK24zQdG/ESyilhGV3FMPQ6au9gQTqStIcblfbQ\n0yisg6O9Pc2F26DwBBY5omH+VXy+85PBUchiHKuHtGlFtjokDXyZnN++ScnUJnhN\nIZr1uVFc\n=iI4i\n-----END PGP SIGNATURE-----",
        "payload": "tree 4b1aa00c57c58d6b7c6869397d2fc6d50064e596\nparent fa5f938cfe4264054e9017fbe710c81e7b3bb150\nauthor MarcoFalke <falke.marco@gmail.com> 1619092632 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1619673456 +0200\n\ntest: Hide tx rehash in helper\n\nThis avoids code-bloat and accidentally forgetting to call it\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa5591d38cfc917235a3dffd61c36dbf1f781a4d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa5591d38cfc917235a3dffd61c36dbf1f781a4d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa5591d38cfc917235a3dffd61c36dbf1f781a4d/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa5f938cfe4264054e9017fbe710c81e7b3bb150",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa5f938cfe4264054e9017fbe710c81e7b3bb150",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa5f938cfe4264054e9017fbe710c81e7b3bb150"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 1,
      "deletions": 3
    },
    "files": [
      {
        "sha": "49dea28c4e30b3b51e7efdeb620a252ca056b1c6",
        "filename": "test/functional/feature_cltv.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5591d38cfc917235a3dffd61c36dbf1f781a4d/test/functional/feature_cltv.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5591d38cfc917235a3dffd61c36dbf1f781a4d/test/functional/feature_cltv.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_cltv.py?ref=fa5591d38cfc917235a3dffd61c36dbf1f781a4d",
        "patch": "@@ -51,6 +51,7 @@ def cltv_modify_tx(node, tx, prepend_scriptsig, nsequence=None, nlocktime=None):\n         tx.deserialize(BytesIO(hex_str_to_bytes(signed_result['hex'])))\n \n     tx.vin[0].scriptSig = CScript(prepend_scriptsig + list(CScript(tx.vin[0].scriptSig)))\n+    tx.rehash()\n     return tx\n \n \n@@ -124,7 +125,6 @@ def run_test(self):\n             spendtx = create_transaction(self.nodes[0], self.coinbase_txids[i],\n                                          self.nodeaddress, amount=1.0)\n             spendtx = cltv_invalidate(self.nodes[0], spendtx, i)\n-            spendtx.rehash()\n             invalid_ctlv_txs.append(spendtx)\n \n         tip = self.nodes[0].getbestblockhash()\n@@ -161,7 +161,6 @@ def run_test(self):\n             spendtx = create_transaction(self.nodes[0], self.coinbase_txids[10+i],\n                                          self.nodeaddress, amount=1.0)\n             spendtx = cltv_invalidate(self.nodes[0], spendtx, i)\n-            spendtx.rehash()\n \n             expected_cltv_reject_reason = [\n                 \"non-mandatory-script-verify-flag (Operation not valid with the current stack size)\",\n@@ -195,7 +194,6 @@ def run_test(self):\n \n         self.log.info(\"Test that a version 4 block with a valid-according-to-CLTV transaction is accepted\")\n         spendtx = cltv_validate(self.nodes[0], spendtx, CLTV_HEIGHT - 1)\n-        spendtx.rehash()\n \n         block.vtx.pop(1)\n         block.vtx.append(spendtx)"
      }
    ]
  },
  {
    "sha": "fa066f1b66ab75e6c88e11922bbd085c9d3211de",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTA2NmYxYjY2YWI3NWU2Yzg4ZTExOTIyYmJkMDg1YzlkMzIxMWRl",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-04-22T16:04:57Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-04-29T05:18:28Z"
      },
      "message": "test: Run feature_cltv with MiniWallet",
      "tree": {
        "sha": "a2dfab8d65239fe927c7a74d7913e6eb7ab51119",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a2dfab8d65239fe927c7a74d7913e6eb7ab51119"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa066f1b66ab75e6c88e11922bbd085c9d3211de",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgAxgv9G1UaUACAVblq550+AlXAr2Yv/GpvkKWsI4SywpY0D2DNcRa+4wxTWZ3a\nbScel4S42ZDUf7tM5Tsu8wI2FTd+OrgZuJbPR2nZEOd2tYXRmRE0BVZhFSR0ATRq\ntzOi5e/ToBqgQrei1KQ1raiN/6jjEOQM0KdWH8ITn+LayGmmwNP/fda8GV1AjIw7\noRX8de5DtS397U/xyQ5iuncJBWpHU1pkyMcgfVyW2XpgGTF1THZPIX9YXQtJh5Ld\nI5Rn//gdbbvGkjVYxxF64s91aXsoAVv4e7aXOh77vF3UMyfestpzEuuIUMbGFWl5\ngNfPJrlwjvW+ic5HoieepgeMxPzFiW1VB/zkEJJeanjV6IA/F2P20TuqPfVPK8Ap\nR6a3Tn+7vyPjdHTKorROHnXvRjmcQiAhtcWDjFBdOgk/rsTIxZAUaHHs/utaiCkS\n/Y5KK0skjW7hVXs/mif3K3aOD201hXlYjZ99u5z/ynkcMxfr3mw/HF723zaf617f\nl2H5IXeX\n=bfMn\n-----END PGP SIGNATURE-----",
        "payload": "tree a2dfab8d65239fe927c7a74d7913e6eb7ab51119\nparent fa5591d38cfc917235a3dffd61c36dbf1f781a4d\nauthor MarcoFalke <falke.marco@gmail.com> 1619107497 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1619673508 +0200\n\ntest: Run feature_cltv with MiniWallet\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa066f1b66ab75e6c88e11922bbd085c9d3211de",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa066f1b66ab75e6c88e11922bbd085c9d3211de",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa066f1b66ab75e6c88e11922bbd085c9d3211de/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa5591d38cfc917235a3dffd61c36dbf1f781a4d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa5591d38cfc917235a3dffd61c36dbf1f781a4d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa5591d38cfc917235a3dffd61c36dbf1f781a4d"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 24,
      "deletions": 29
    },
    "files": [
      {
        "sha": "6c51944d81873005cab205706a91591edda8fc6f",
        "filename": "test/functional/feature_cltv.py",
        "status": "modified",
        "additions": 8,
        "deletions": 22,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa066f1b66ab75e6c88e11922bbd085c9d3211de/test/functional/feature_cltv.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa066f1b66ab75e6c88e11922bbd085c9d3211de/test/functional/feature_cltv.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_cltv.py?ref=fa066f1b66ab75e6c88e11922bbd085c9d3211de",
        "patch": "@@ -11,11 +11,9 @@\n from test_framework.blocktools import (\n     create_block,\n     create_coinbase,\n-    create_transaction,\n )\n from test_framework.messages import (\n     CTransaction,\n-    ToHex,\n     msg_block,\n )\n from test_framework.p2p import P2PInterface\n@@ -27,12 +25,8 @@\n     OP_DROP,\n )\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import (\n-    assert_equal,\n-    hex_str_to_bytes,\n-)\n-\n-from io import BytesIO\n+from test_framework.util import assert_equal\n+from test_framework.wallet import MiniWallet\n \n CLTV_HEIGHT = 1351\n \n@@ -41,15 +35,11 @@\n # 1) prepending a given script to the scriptSig of vin 0 and\n # 2) (optionally) modify the nSequence of vin 0 and the tx's nLockTime\n def cltv_modify_tx(node, tx, prepend_scriptsig, nsequence=None, nlocktime=None):\n+    assert_equal(len(tx.vin), 1)\n     if nsequence is not None:\n         tx.vin[0].nSequence = nsequence\n         tx.nLockTime = nlocktime\n \n-        # Need to re-sign, since nSequence and nLockTime changed\n-        signed_result = node.signrawtransactionwithwallet(ToHex(tx))\n-        tx = CTransaction()\n-        tx.deserialize(BytesIO(hex_str_to_bytes(signed_result['hex'])))\n-\n     tx.vin[0].scriptSig = CScript(prepend_scriptsig + list(CScript(tx.vin[0].scriptSig)))\n     tx.rehash()\n     return tx\n@@ -97,9 +87,6 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.rpc_timeout = 480\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def test_cltv_info(self, *, is_active):\n         assert_equal(self.nodes[0].getblockchaininfo()['softforks']['bip65'], {\n                 \"active\": is_active,\n@@ -110,20 +97,20 @@ def test_cltv_info(self, *, is_active):\n \n     def run_test(self):\n         peer = self.nodes[0].add_p2p_connection(P2PInterface())\n+        wallet = MiniWallet(self.nodes[0], raw_script=True)\n \n         self.test_cltv_info(is_active=False)\n \n         self.log.info(\"Mining %d blocks\", CLTV_HEIGHT - 2)\n-        self.coinbase_txids = [self.nodes[0].getblock(b)['tx'][0] for b in self.nodes[0].generate(CLTV_HEIGHT - 2)]\n-        self.nodeaddress = self.nodes[0].getnewaddress()\n+        wallet.generate(10)\n+        self.nodes[0].generate(CLTV_HEIGHT - 2 - 10)\n \n         self.log.info(\"Test that invalid-according-to-CLTV transactions can still appear in a block\")\n \n         # create one invalid tx per CLTV failure reason (5 in total) and collect them\n         invalid_ctlv_txs = []\n         for i in range(5):\n-            spendtx = create_transaction(self.nodes[0], self.coinbase_txids[i],\n-                                         self.nodeaddress, amount=1.0)\n+            spendtx = wallet.create_self_transfer(from_node=self.nodes[0])['tx']\n             spendtx = cltv_invalidate(self.nodes[0], spendtx, i)\n             invalid_ctlv_txs.append(spendtx)\n \n@@ -158,8 +145,7 @@ def run_test(self):\n \n         # create and test one invalid tx per CLTV failure reason (5 in total)\n         for i in range(5):\n-            spendtx = create_transaction(self.nodes[0], self.coinbase_txids[10+i],\n-                                         self.nodeaddress, amount=1.0)\n+            spendtx = wallet.create_self_transfer(from_node=self.nodes[0])['tx']\n             spendtx = cltv_invalidate(self.nodes[0], spendtx, i)\n \n             expected_cltv_reject_reason = ["
      },
      {
        "sha": "395b50c4d8fc50da08dca89a9c578594824f2f5b",
        "filename": "test/functional/test_framework/wallet.py",
        "status": "modified",
        "additions": 16,
        "deletions": 7,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa066f1b66ab75e6c88e11922bbd085c9d3211de/test/functional/test_framework/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa066f1b66ab75e6c88e11922bbd085c9d3211de/test/functional/test_framework/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/wallet.py?ref=fa066f1b66ab75e6c88e11922bbd085c9d3211de",
        "patch": "@@ -17,6 +17,7 @@\n from test_framework.script import (\n     CScript,\n     OP_TRUE,\n+    OP_NOP,\n )\n from test_framework.util import (\n     assert_equal,\n@@ -26,11 +27,15 @@\n \n \n class MiniWallet:\n-    def __init__(self, test_node):\n+    def __init__(self, test_node, *, raw_script=False):\n         self._test_node = test_node\n         self._utxos = []\n-        self._address = ADDRESS_BCRT1_P2WSH_OP_TRUE\n-        self._scriptPubKey = hex_str_to_bytes(self._test_node.validateaddress(self._address)['scriptPubKey'])\n+        if raw_script:\n+            self._address = None\n+            self._scriptPubKey = bytes(CScript([OP_TRUE]))\n+        else:\n+            self._address = ADDRESS_BCRT1_P2WSH_OP_TRUE\n+            self._scriptPubKey = hex_str_to_bytes(self._test_node.validateaddress(self._address)['scriptPubKey'])\n \n     def scan_blocks(self, *, start=1, num):\n         \"\"\"Scan the blocks for self._address outputs and add them to self._utxos\"\"\"\n@@ -47,7 +52,7 @@ def scan_tx(self, tx):\n \n     def generate(self, num_blocks):\n         \"\"\"Generate blocks with coinbase outputs to the internal address, and append the outputs to the internal list\"\"\"\n-        blocks = self._test_node.generatetoaddress(num_blocks, self._address)\n+        blocks = self._test_node.generatetodescriptor(num_blocks, f'raw({self._scriptPubKey.hex()})')\n         for b in blocks:\n             cb_tx = self._test_node.getblock(blockhash=b, verbosity=2)['tx'][0]\n             self._utxos.append({'txid': cb_tx['txid'], 'vout': 0, 'value': cb_tx['vout'][0]['value']})\n@@ -89,16 +94,20 @@ def create_self_transfer(self, *, fee_rate=Decimal(\"0.003\"), from_node, utxo_to_\n         tx = CTransaction()\n         tx.vin = [CTxIn(COutPoint(int(utxo_to_spend['txid'], 16), utxo_to_spend['vout']))]\n         tx.vout = [CTxOut(int(send_value * COIN), self._scriptPubKey)]\n-        tx.wit.vtxinwit = [CTxInWitness()]\n-        tx.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n+        if not self._address:\n+            # raw script\n+            tx.vin[0].scriptSig = CScript([OP_NOP] * 35)  # pad to identical size\n+        else:\n+            tx.wit.vtxinwit = [CTxInWitness()]\n+            tx.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n         tx_hex = tx.serialize().hex()\n \n         tx_info = from_node.testmempoolaccept([tx_hex])[0]\n         assert_equal(mempool_valid, tx_info['allowed'])\n         if mempool_valid:\n             assert_equal(tx_info['vsize'], vsize)\n             assert_equal(tx_info['fees']['base'], fee)\n-        return {'txid': tx_info['txid'], 'wtxid': tx_info['wtxid'], 'hex': tx_hex}\n+        return {'txid': tx_info['txid'], 'wtxid': tx_info['wtxid'], 'hex': tx_hex, 'tx': tx}\n \n     def sendrawtransaction(self, *, from_node, tx_hex):\n         from_node.sendrawtransaction(tx_hex)"
      }
    ]
  }
]