[
  {
    "sha": "0d4ea1cf8a349cf59795ac68645afe70e98c6b3a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZDRlYTFjZjhhMzQ5Y2Y1OTc5NWFjNjg2NDVhZmU3MGU5OGM2YjNh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-05-03T08:20:58Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-05-09T14:45:56Z"
      },
      "message": "util: add parseint32 function with strict error reporting\n\nNone of the current integer parsing functions in util\ncheck whether the result is valid and fits in the range\nof the type. This is required for less sloppy error reporting.",
      "tree": {
        "sha": "10aaa665a70c821e0f9773c190e47fa330adcc11",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/10aaa665a70c821e0f9773c190e47fa330adcc11"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0d4ea1cf8a349cf59795ac68645afe70e98c6b3a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d4ea1cf8a349cf59795ac68645afe70e98c6b3a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0d4ea1cf8a349cf59795ac68645afe70e98c6b3a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d4ea1cf8a349cf59795ac68645afe70e98c6b3a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e443ed2462b706650f51f08c8760dbf5047aa77f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e443ed2462b706650f51f08c8760dbf5047aa77f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e443ed2462b706650f51f08c8760dbf5047aa77f"
      }
    ],
    "stats": {
      "total": 43,
      "additions": 43,
      "deletions": 0
    },
    "files": [
      {
        "sha": "7e7c05a59de81e8810ac99e70d447dfcb73f43d5",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d4ea1cf8a349cf59795ac68645afe70e98c6b3a/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d4ea1cf8a349cf59795ac68645afe70e98c6b3a/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=0d4ea1cf8a349cf59795ac68645afe70e98c6b3a",
        "patch": "@@ -342,4 +342,26 @@ BOOST_AUTO_TEST_CASE(gettime)\n     BOOST_CHECK((GetTime() & ~0xFFFFFFFFLL) == 0);\n }\n \n+BOOST_AUTO_TEST_CASE(test_ParseInt32)\n+{\n+    int32_t n;\n+    // Valid values\n+    BOOST_CHECK(ParseInt32(\"1234\", NULL));\n+    BOOST_CHECK(ParseInt32(\"0\", &n) && n == 0);\n+    BOOST_CHECK(ParseInt32(\"1234\", &n) && n == 1234);\n+    BOOST_CHECK(ParseInt32(\"01234\", &n) && n == 1234); // no octal\n+    BOOST_CHECK(ParseInt32(\"2147483647\", &n) && n == 2147483647);\n+    BOOST_CHECK(ParseInt32(\"-2147483648\", &n) && n == -2147483648);\n+    BOOST_CHECK(ParseInt32(\"-1234\", &n) && n == -1234);\n+    // Invalid values\n+    BOOST_CHECK(!ParseInt32(\"1a\", &n));\n+    BOOST_CHECK(!ParseInt32(\"aap\", &n));\n+    BOOST_CHECK(!ParseInt32(\"0x1\", &n)); // no hex\n+    // Overflow and underflow\n+    BOOST_CHECK(!ParseInt32(\"-2147483649\", NULL));\n+    BOOST_CHECK(!ParseInt32(\"2147483648\", NULL));\n+    BOOST_CHECK(!ParseInt32(\"-32482348723847471234\", NULL));\n+    BOOST_CHECK(!ParseInt32(\"32482348723847471234\", NULL));\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "36ac23b1d5301734ef02b999d8bcc664b56fa95a",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d4ea1cf8a349cf59795ac68645afe70e98c6b3a/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d4ea1cf8a349cf59795ac68645afe70e98c6b3a/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=0d4ea1cf8a349cf59795ac68645afe70e98c6b3a",
        "patch": "@@ -1427,3 +1427,17 @@ void RenameThread(const char* name)\n #endif\n }\n \n+bool ParseInt32(const std::string& str, int32_t *out)\n+{\n+    char *endp = NULL;\n+    errno = 0; // strtol will not set errno if valid\n+    long int n = strtol(str.c_str(), &endp, 10);\n+    if(out) *out = (int)n;\n+    // Note that strtol returns a *long int*, so even if strtol doesn't report a over/underflow\n+    // we still have to check that the returned value is within the range of an *int32_t*. On 64-bit\n+    // platforms the size of these types may be different.\n+    return endp && *endp == 0 && !errno &&\n+        n >= std::numeric_limits<int32_t>::min() &&\n+        n <= std::numeric_limits<int32_t>::max();\n+}\n+"
      },
      {
        "sha": "fa1e664c929fcedae332f13e0a4aa9142ec4c216",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d4ea1cf8a349cf59795ac68645afe70e98c6b3a/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d4ea1cf8a349cf59795ac68645afe70e98c6b3a/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=0d4ea1cf8a349cf59795ac68645afe70e98c6b3a",
        "patch": "@@ -256,6 +256,13 @@ inline int atoi(const std::string& str)\n     return atoi(str.c_str());\n }\n \n+/**\n+ * Convert string to signed 32-bit integer with strict parse error feedback.\n+ * @returns true if the entire string could be parsed as valid integer,\n+ *   false if not the entire string could be parsed or when overflow or underflow occured.\n+ */\n+bool ParseInt32(const std::string& str, int32_t *out);\n+\n inline int roundint(double d)\n {\n     return (int)(d > 0 ? d + 0.5 : d - 0.5);"
      }
    ]
  },
  {
    "sha": "d8642752992799b0695cf97ada03c56d0526830c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkODY0Mjc1Mjk5Mjc5OWIwNjk1Y2Y5N2FkYTAzYzU2ZDA1MjY4MzBj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-05-03T08:25:58Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-05-09T14:45:57Z"
      },
      "message": "Use new function parseint32 in SplitHostPort\n\nUse the new function parseint32 in SplitHostPort instead of calling\nstrtol directly.",
      "tree": {
        "sha": "8533151117ed94ca9daad90056465e47cc436226",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8533151117ed94ca9daad90056465e47cc436226"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d8642752992799b0695cf97ada03c56d0526830c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8642752992799b0695cf97ada03c56d0526830c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d8642752992799b0695cf97ada03c56d0526830c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8642752992799b0695cf97ada03c56d0526830c/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0d4ea1cf8a349cf59795ac68645afe70e98c6b3a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d4ea1cf8a349cf59795ac68645afe70e98c6b3a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0d4ea1cf8a349cf59795ac68645afe70e98c6b3a"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 3,
      "deletions": 5
    },
    "files": [
      {
        "sha": "4f7e3f6b7875ba54c7d56d8ec7410900c6aa8fad",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8642752992799b0695cf97ada03c56d0526830c/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8642752992799b0695cf97ada03c56d0526830c/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=d8642752992799b0695cf97ada03c56d0526830c",
        "patch": "@@ -47,12 +47,10 @@ void SplitHostPort(std::string in, int &portOut, std::string &hostOut) {\n     bool fBracketed = fHaveColon && (in[0]=='[' && in[colon-1]==']'); // if there is a colon, and in[0]=='[', colon is not 0, so in[colon-1] is safe\n     bool fMultiColon = fHaveColon && (in.find_last_of(':',colon-1) != in.npos);\n     if (fHaveColon && (colon==0 || fBracketed || !fMultiColon)) {\n-        char *endp = NULL;\n-        int n = strtol(in.c_str() + colon + 1, &endp, 10);\n-        if (endp && *endp == 0 && n >= 0) {\n+        int32_t n;\n+        if (ParseInt32(in.substr(colon + 1), &n) && n > 0 && n < 0x10000) {\n             in = in.substr(0, colon);\n-            if (n > 0 && n < 0x10000)\n-                portOut = n;\n+            portOut = n;\n         }\n     }\n     if (in.size()>0 && in[0] == '[' && in[in.size()-1] == ']')"
      }
    ]
  },
  {
    "sha": "e16be73753d870c5ce77094d3a402bbe8e3bf542",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMTZiZTczNzUzZDg3MGM1Y2U3NzA5NGQzYTQwMmJiZThlM2JmNTQy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-04-28T09:08:57Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-05-09T14:45:57Z"
      },
      "message": "net: Add CSubNet class for subnet matching",
      "tree": {
        "sha": "d5c308bf0f0a9fa660161043edbabb5541e97a6b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d5c308bf0f0a9fa660161043edbabb5541e97a6b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e16be73753d870c5ce77094d3a402bbe8e3bf542",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e16be73753d870c5ce77094d3a402bbe8e3bf542",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e16be73753d870c5ce77094d3a402bbe8e3bf542",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e16be73753d870c5ce77094d3a402bbe8e3bf542/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d8642752992799b0695cf97ada03c56d0526830c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8642752992799b0695cf97ada03c56d0526830c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d8642752992799b0695cf97ada03c56d0526830c"
      }
    ],
    "stats": {
      "total": 190,
      "additions": 187,
      "deletions": 3
    },
    "files": [
      {
        "sha": "82a681281d22e72d26348f91d094857689b4a319",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 120,
        "deletions": 3,
        "changes": 123,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e16be73753d870c5ce77094d3a402bbe8e3bf542/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e16be73753d870c5ce77094d3a402bbe8e3bf542/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=e16be73753d870c5ce77094d3a402bbe8e3bf542",
        "patch": "@@ -546,6 +546,22 @@ void CNetAddr::SetIP(const CNetAddr& ipIn)\n     memcpy(ip, ipIn.ip, sizeof(ip));\n }\n \n+void CNetAddr::SetRaw(Network network, const uint8_t *ip_in)\n+{\n+    switch(network)\n+    {\n+        case NET_IPV4:\n+            memcpy(ip, pchIPv4, 12);\n+            memcpy(ip+12, ip_in, 4);\n+            break;\n+        case NET_IPV6:\n+            memcpy(ip, ip_in, 16);\n+            break;\n+        default:\n+            assert(!\"invalid network\");\n+    }\n+}\n+\n static const unsigned char pchOnionCat[] = {0xFD,0x87,0xD8,0x7E,0xEB,0x43};\n \n bool CNetAddr::SetSpecial(const std::string &strName)\n@@ -569,13 +585,12 @@ CNetAddr::CNetAddr()\n \n CNetAddr::CNetAddr(const struct in_addr& ipv4Addr)\n {\n-    memcpy(ip,    pchIPv4, 12);\n-    memcpy(ip+12, &ipv4Addr, 4);\n+    SetRaw(NET_IPV4, (const uint8_t*)&ipv4Addr);\n }\n \n CNetAddr::CNetAddr(const struct in6_addr& ipv6Addr)\n {\n-    memcpy(ip, &ipv6Addr, 16);\n+    SetRaw(NET_IPV6, (const uint8_t*)&ipv6Addr);\n }\n \n CNetAddr::CNetAddr(const char *pszIp, bool fAllowLookup)\n@@ -1120,3 +1135,105 @@ void CService::SetPort(unsigned short portIn)\n {\n     port = portIn;\n }\n+\n+CSubNet::CSubNet():\n+    valid(false)\n+{\n+    memset(netmask, 0, sizeof(netmask));\n+}\n+\n+CSubNet::CSubNet(const std::string &strSubnet, bool fAllowLookup)\n+{\n+    size_t slash = strSubnet.find_last_of('/');\n+    std::vector<CNetAddr> vIP;\n+\n+    valid = true;\n+    // Default to /32 (IPv4) or /128 (IPv6), i.e. match single address\n+    memset(netmask, 255, sizeof(netmask));\n+\n+    std::string strAddress = strSubnet.substr(0, slash);\n+    if (LookupHost(strAddress.c_str(), vIP, 1, fAllowLookup))\n+    {\n+        network = vIP[0];\n+        if (slash != strSubnet.npos)\n+        {\n+            std::string strNetmask = strSubnet.substr(slash + 1);\n+            int32_t n;\n+            // IPv4 addresses start at offset 12, and first 12 bytes must match, so just offset n\n+            int noffset = network.IsIPv4() ? (12 * 8) : 0;\n+            if (ParseInt32(strNetmask, &n)) // If valid number, assume /24 symtex\n+            {\n+                if(n >= 0 && n <= (128 - noffset)) // Only valid if in range of bits of address\n+                {\n+                    n += noffset;\n+                    // Clear bits [n..127]\n+                    for (; n < 128; ++n)\n+                        netmask[n>>3] &= ~(1<<(n&7));\n+                }\n+                else\n+                {\n+                    valid = false;\n+                }\n+            }\n+            else // If not a valid number, try full netmask syntax\n+            {\n+                if (LookupHost(strNetmask.c_str(), vIP, 1, false)) // Never allow lookup for netmask\n+                {\n+                    // Remember: GetByte returns bytes in reversed order\n+                    // Copy only the *last* four bytes in case of IPv4, the rest of the mask should stay 1's as\n+                    // we don't want pchIPv4 to be part of the mask.\n+                    int asize = network.IsIPv4() ? 4 : 16;\n+                    for(int x=0; x<asize; ++x)\n+                        netmask[15-x] = vIP[0].GetByte(x);\n+                }\n+                else\n+                {\n+                    valid = false;\n+                }\n+            }\n+        }\n+    }\n+    else\n+    {\n+        valid = false;\n+    }\n+}\n+\n+bool CSubNet::Match(const CNetAddr &addr) const\n+{\n+    if (!valid || !addr.IsValid())\n+        return false;\n+    for(int x=0; x<16; ++x)\n+        if ((addr.GetByte(x) & netmask[15-x]) != network.GetByte(x))\n+            return false;\n+    return true;\n+}\n+\n+std::string CSubNet::ToString() const\n+{\n+    std::string strNetmask;\n+    if (network.IsIPv4())\n+        strNetmask = strprintf(\"%u.%u.%u.%u\", netmask[12], netmask[13], netmask[14], netmask[15]);\n+    else\n+        strNetmask = strprintf(\"%x:%x:%x:%x:%x:%x:%x:%x\",\n+                         netmask[0] << 8 | netmask[1], netmask[2] << 8 | netmask[3],\n+                         netmask[4] << 8 | netmask[5], netmask[6] << 8 | netmask[7],\n+                         netmask[8] << 8 | netmask[9], netmask[10] << 8 | netmask[11],\n+                         netmask[12] << 8 | netmask[13], netmask[14] << 8 | netmask[15]);\n+    return network.ToString() + \"/\" + strNetmask;\n+}\n+\n+bool CSubNet::IsValid() const\n+{\n+    return valid;\n+}\n+\n+bool operator==(const CSubNet& a, const CSubNet& b)\n+{\n+    return a.valid == b.valid && a.network == b.network && !memcmp(a.netmask, b.netmask, 16);\n+}\n+\n+bool operator!=(const CSubNet& a, const CSubNet& b)\n+{\n+    return !(a==b);\n+}"
      },
      {
        "sha": "118f866d6c9567d357a68d11336b3dfea6f6c835",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 30,
        "deletions": 0,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e16be73753d870c5ce77094d3a402bbe8e3bf542/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e16be73753d870c5ce77094d3a402bbe8e3bf542/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=e16be73753d870c5ce77094d3a402bbe8e3bf542",
        "patch": "@@ -49,6 +49,13 @@ class CNetAddr\n         explicit CNetAddr(const std::string &strIp, bool fAllowLookup = false);\n         void Init();\n         void SetIP(const CNetAddr& ip);\n+\n+        /**\n+         * Set raw IPv4 or IPv6 address (in network byte order)\n+         * @note Only NET_IPV4 and NET_IPV6 are allowed for network.\n+         */\n+        void SetRaw(Network network, const uint8_t *data);\n+\n         bool SetSpecial(const std::string &strName); // for Tor addresses\n         bool IsIPv4() const;    // IPv4 mapped address (::FFFF:0:0/96, 0.0.0.0/0)\n         bool IsIPv6() const;    // IPv6 address (not mapped IPv4, not Tor)\n@@ -90,6 +97,29 @@ class CNetAddr\n             )\n };\n \n+class CSubNet\n+{\n+    protected:\n+        /// Network (base) address\n+        CNetAddr network;\n+        /// Netmask, in network byte order\n+        uint8_t netmask[16];\n+        /// Is this value valid? (only used to signal parse errors)\n+        bool valid;\n+\n+    public:\n+        CSubNet();\n+        explicit CSubNet(const std::string &strSubnet, bool fAllowLookup = false);\n+\n+        bool Match(const CNetAddr &addr) const;\n+\n+        std::string ToString() const;\n+        bool IsValid() const;\n+\n+        friend bool operator==(const CSubNet& a, const CSubNet& b);\n+        friend bool operator!=(const CSubNet& a, const CSubNet& b);\n+};\n+\n /** A combination of a network address (CNetAddr) and a (TCP) port */\n class CService : public CNetAddr\n {"
      },
      {
        "sha": "c26e7383842381598d009afe2baf954c7f1ce722",
        "filename": "src/test/netbase_tests.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 0,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e16be73753d870c5ce77094d3a402bbe8e3bf542/src/test/netbase_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e16be73753d870c5ce77094d3a402bbe8e3bf542/src/test/netbase_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/netbase_tests.cpp?ref=e16be73753d870c5ce77094d3a402bbe8e3bf542",
        "patch": "@@ -102,4 +102,41 @@ BOOST_AUTO_TEST_CASE(onioncat_test)\n     BOOST_CHECK(addr1.IsRoutable());\n }\n \n+BOOST_AUTO_TEST_CASE(subnet_test)\n+{\n+    BOOST_CHECK(CSubNet(\"1.2.3.0/24\") == CSubNet(\"1.2.3.0/255.255.255.0\"));\n+    BOOST_CHECK(CSubNet(\"1.2.3.0/24\") != CSubNet(\"1.2.4.0/255.255.255.0\"));\n+    BOOST_CHECK(CSubNet(\"1.2.3.0/24\").Match(CNetAddr(\"1.2.3.4\")));\n+    BOOST_CHECK(!CSubNet(\"1.2.2.0/24\").Match(CNetAddr(\"1.2.3.4\")));\n+    BOOST_CHECK(CSubNet(\"1.2.3.4\").Match(CNetAddr(\"1.2.3.4\")));\n+    BOOST_CHECK(CSubNet(\"1.2.3.4/32\").Match(CNetAddr(\"1.2.3.4\")));\n+    BOOST_CHECK(!CSubNet(\"1.2.3.4\").Match(CNetAddr(\"5.6.7.8\")));\n+    BOOST_CHECK(!CSubNet(\"1.2.3.4/32\").Match(CNetAddr(\"5.6.7.8\")));\n+    BOOST_CHECK(CSubNet(\"::ffff:127.0.0.1\").Match(CNetAddr(\"127.0.0.1\")));\n+    BOOST_CHECK(CSubNet(\"1:2:3:4:5:6:7:8\").Match(CNetAddr(\"1:2:3:4:5:6:7:8\")));\n+    BOOST_CHECK(!CSubNet(\"1:2:3:4:5:6:7:8\").Match(CNetAddr(\"1:2:3:4:5:6:7:9\")));\n+    BOOST_CHECK(CSubNet(\"1:2:3:4:5:6:7:0/112\").Match(CNetAddr(\"1:2:3:4:5:6:7:1234\")));\n+    // All-Matching IPv6 Matches arbitrary IPv4 and IPv6\n+    BOOST_CHECK(CSubNet(\"::/0\").Match(CNetAddr(\"1:2:3:4:5:6:7:1234\")));\n+    BOOST_CHECK(CSubNet(\"::/0\").Match(CNetAddr(\"1.2.3.4\")));\n+    // All-Matching IPv4 does not Match IPv6\n+    BOOST_CHECK(!CSubNet(\"0.0.0.0/0\").Match(CNetAddr(\"1:2:3:4:5:6:7:1234\")));\n+    // Invalid subnets Match nothing (not even invalid addresses)\n+    BOOST_CHECK(!CSubNet().Match(CNetAddr(\"1.2.3.4\")));\n+    BOOST_CHECK(!CSubNet(\"\").Match(CNetAddr(\"4.5.6.7\")));\n+    BOOST_CHECK(!CSubNet(\"bloop\").Match(CNetAddr(\"0.0.0.0\")));\n+    BOOST_CHECK(!CSubNet(\"bloop\").Match(CNetAddr(\"hab\")));\n+    // Check valid/invalid\n+    BOOST_CHECK(CSubNet(\"1.2.3.0/0\").IsValid());\n+    BOOST_CHECK(!CSubNet(\"1.2.3.0/-1\").IsValid());\n+    BOOST_CHECK(CSubNet(\"1.2.3.0/32\").IsValid());\n+    BOOST_CHECK(!CSubNet(\"1.2.3.0/33\").IsValid());\n+    BOOST_CHECK(CSubNet(\"1:2:3:4:5:6:7:8/0\").IsValid());\n+    BOOST_CHECK(CSubNet(\"1:2:3:4:5:6:7:8/33\").IsValid());\n+    BOOST_CHECK(!CSubNet(\"1:2:3:4:5:6:7:8/-1\").IsValid());\n+    BOOST_CHECK(CSubNet(\"1:2:3:4:5:6:7:8/128\").IsValid());\n+    BOOST_CHECK(!CSubNet(\"1:2:3:4:5:6:7:8/129\").IsValid());\n+    BOOST_CHECK(!CSubNet(\"fuzzy\").IsValid());\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "ee21912510275c7a0ebeafd2ff553c1db4a4f460",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZTIxOTEyNTEwMjc1YzdhMGViZWFmZDJmZjU1M2MxZGI0YTRmNDYw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-04-28T11:48:26Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-05-09T14:45:57Z"
      },
      "message": "rpc: Use netmasks instead of wildcards for IP address matching\n\n`-rpcallowip` currently has a wacky wildcard-based format. After this\ncommit it will accept the more standard format, for example:\n\n- Ranges with netmask 127.0.0.0/255.255.255.0, ::/0\n- Ranges with cidr 12.3.4.5/24, 12:34:56:78:9a:bc:de:00/112\n- Loose IPs ::1, 127.0.0.1\n\nTrying to use the old *?-based format will result in an error message at\nlaunch.",
      "tree": {
        "sha": "d9144f4ca37cac29da5e957e6fae647729396df1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d9144f4ca37cac29da5e957e6fae647729396df1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ee21912510275c7a0ebeafd2ff553c1db4a4f460",
      "comment_count": 2,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee21912510275c7a0ebeafd2ff553c1db4a4f460",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ee21912510275c7a0ebeafd2ff553c1db4a4f460",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee21912510275c7a0ebeafd2ff553c1db4a4f460/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e16be73753d870c5ce77094d3a402bbe8e3bf542",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e16be73753d870c5ce77094d3a402bbe8e3bf542",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e16be73753d870c5ce77094d3a402bbe8e3bf542"
      }
    ],
    "stats": {
      "total": 63,
      "additions": 49,
      "deletions": 14
    },
    "files": [
      {
        "sha": "5740cca13a34b6e6a05774e3c2cb2bb6d6523d80",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 49,
        "deletions": 14,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee21912510275c7a0ebeafd2ff553c1db4a4f460/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee21912510275c7a0ebeafd2ff553c1db4a4f460/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=ee21912510275c7a0ebeafd2ff553c1db4a4f460",
        "patch": "@@ -38,6 +38,7 @@ static map<string, boost::shared_ptr<deadline_timer> > deadlineTimers;\n static ssl::context* rpc_ssl_context = NULL;\n static boost::thread_group* rpc_worker_group = NULL;\n static boost::asio::io_service::work *rpc_dummy_work = NULL;\n+static std::vector<CSubNet> rpc_allow_subnets; //!< List of subnets to allow RPC connections from\n \n void RPCTypeCheck(const Array& params,\n                   const list<Value_type>& typesExpected,\n@@ -358,25 +359,34 @@ void ErrorReply(std::ostream& stream, const Object& objError, const Value& id)\n     stream << HTTPReply(nStatus, strReply, false) << std::flush;\n }\n \n-bool ClientAllowed(const boost::asio::ip::address& address)\n+// Convert boost::asio address to CNetAddr\n+static CNetAddr BoostAsioToCNetAddr(boost::asio::ip::address address)\n {\n+    CNetAddr netaddr;\n     // Make sure that IPv4-compatible and IPv4-mapped IPv6 addresses are treated as IPv4 addresses\n     if (address.is_v6()\n      && (address.to_v6().is_v4_compatible()\n       || address.to_v6().is_v4_mapped()))\n-        return ClientAllowed(address.to_v6().to_v4());\n-\n-    if (address == asio::ip::address_v4::loopback()\n-     || address == asio::ip::address_v6::loopback()\n-     || (address.is_v4()\n-         // Check whether IPv4 addresses match 127.0.0.0/8 (loopback subnet)\n-      && (address.to_v4().to_ulong() & 0xff000000) == 0x7f000000))\n-        return true;\n-\n-    const string strAddress = address.to_string();\n-    const vector<string>& vAllow = mapMultiArgs[\"-rpcallowip\"];\n-    BOOST_FOREACH(string strAllow, vAllow)\n-        if (WildcardMatch(strAddress, strAllow))\n+        address = address.to_v6().to_v4();\n+\n+    if(address.is_v4())\n+    {\n+        boost::asio::ip::address_v4::bytes_type bytes = address.to_v4().to_bytes();\n+        netaddr.SetRaw(NET_IPV4, &bytes[0]);\n+    }\n+    else\n+    {\n+        boost::asio::ip::address_v6::bytes_type bytes = address.to_v6().to_bytes();\n+        netaddr.SetRaw(NET_IPV6, &bytes[0]);\n+    }\n+    return netaddr;\n+}\n+\n+bool ClientAllowed(const boost::asio::ip::address& address)\n+{\n+    CNetAddr netaddr = BoostAsioToCNetAddr(address);\n+    BOOST_FOREACH(const CSubNet &subnet, rpc_allow_subnets)\n+        if (subnet.Match(netaddr))\n             return true;\n     return false;\n }\n@@ -502,6 +512,31 @@ static void RPCAcceptHandler(boost::shared_ptr< basic_socket_acceptor<Protocol,\n \n void StartRPCThreads()\n {\n+    rpc_allow_subnets.clear();\n+    rpc_allow_subnets.push_back(CSubNet(\"127.0.0.0/8\")); // always allow IPv4 local subnet\n+    rpc_allow_subnets.push_back(CSubNet(\"::1\")); // always allow IPv6 localhost\n+    if (mapMultiArgs.count(\"-rpcallowip\"))\n+    {\n+        const vector<string>& vAllow = mapMultiArgs[\"-rpcallowip\"];\n+        BOOST_FOREACH(string strAllow, vAllow)\n+        {\n+            CSubNet subnet(strAllow);\n+            if(!subnet.IsValid())\n+            {\n+                uiInterface.ThreadSafeMessageBox(\n+                    strprintf(\"Invalid -rpcallowip subnet specification: %s\", strAllow),\n+                    \"\", CClientUIInterface::MSG_ERROR);\n+                StartShutdown();\n+                return;\n+            }\n+            rpc_allow_subnets.push_back(subnet);\n+        }\n+    }\n+    std::string strAllowed;\n+    BOOST_FOREACH(const CSubNet &subnet, rpc_allow_subnets)\n+        strAllowed += subnet.ToString() + \" \";\n+    LogPrint(\"rpc\", \"Allowing RPC connections from: %s\\n\", strAllowed);\n+\n     strRPCUserColonPass = mapArgs[\"-rpcuser\"] + \":\" + mapArgs[\"-rpcpassword\"];\n     if (((mapArgs[\"-rpcpassword\"] == \"\") ||\n          (mapArgs[\"-rpcuser\"] == mapArgs[\"-rpcpassword\"])) && Params().RequireRPCPassword())"
      }
    ]
  },
  {
    "sha": "fdbd7075cab8d54f90c038e68afba868a9ff9f63",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZGJkNzA3NWNhYjhkNTRmOTBjMDM4ZTY4YWZiYTg2OGE5ZmY5ZjYz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-04-28T11:48:57Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-05-09T14:45:57Z"
      },
      "message": "Remove unused function WildcardMatch\n\nNo longer necessary after implementing netmask-based matching.\nAlso remove a longer-unused function `skipspaces`.",
      "tree": {
        "sha": "4c80fd6e0cdd3e4d8370bb67a477da26c83dc6ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4c80fd6e0cdd3e4d8370bb67a477da26c83dc6ce"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fdbd7075cab8d54f90c038e68afba868a9ff9f63",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fdbd7075cab8d54f90c038e68afba868a9ff9f63",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fdbd7075cab8d54f90c038e68afba868a9ff9f63",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fdbd7075cab8d54f90c038e68afba868a9ff9f63/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ee21912510275c7a0ebeafd2ff553c1db4a4f460",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee21912510275c7a0ebeafd2ff553c1db4a4f460",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ee21912510275c7a0ebeafd2ff553c1db4a4f460"
      }
    ],
    "stats": {
      "total": 57,
      "additions": 0,
      "deletions": 57
    },
    "files": [
      {
        "sha": "f4ca8c0539b36e291c4e7a99df3e3a8559f1b678",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 11,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fdbd7075cab8d54f90c038e68afba868a9ff9f63/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fdbd7075cab8d54f90c038e68afba868a9ff9f63/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=fdbd7075cab8d54f90c038e68afba868a9ff9f63",
        "patch": "@@ -165,17 +165,6 @@ BOOST_AUTO_TEST_CASE(util_GetArg)\n     BOOST_CHECK_EQUAL(GetBoolArg(\"booltest4\", false), true);\n }\n \n-BOOST_AUTO_TEST_CASE(util_WildcardMatch)\n-{\n-    BOOST_CHECK(WildcardMatch(\"127.0.0.1\", \"*\"));\n-    BOOST_CHECK(WildcardMatch(\"127.0.0.1\", \"127.*\"));\n-    BOOST_CHECK(WildcardMatch(\"abcdef\", \"a?cde?\"));\n-    BOOST_CHECK(!WildcardMatch(\"abcdef\", \"a?cde??\"));\n-    BOOST_CHECK(WildcardMatch(\"abcdef\", \"a*f\"));\n-    BOOST_CHECK(!WildcardMatch(\"abcdef\", \"a*x\"));\n-    BOOST_CHECK(WildcardMatch(\"\", \"*\"));\n-}\n-\n BOOST_AUTO_TEST_CASE(util_FormatMoney)\n {\n     BOOST_CHECK_EQUAL(FormatMoney(0, false), \"0.00\");"
      },
      {
        "sha": "00e29446d5a347d497ab38f609b5cb8258e5ccde",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 37,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fdbd7075cab8d54f90c038e68afba868a9ff9f63/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fdbd7075cab8d54f90c038e68afba868a9ff9f63/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=fdbd7075cab8d54f90c038e68afba868a9ff9f63",
        "patch": "@@ -889,43 +889,6 @@ string DecodeBase32(const string& str)\n     return string((const char*)&vchRet[0], vchRet.size());\n }\n \n-\n-bool WildcardMatch(const char* psz, const char* mask)\n-{\n-    while (true)\n-    {\n-        switch (*mask)\n-        {\n-        case '\\0':\n-            return (*psz == '\\0');\n-        case '*':\n-            return WildcardMatch(psz, mask+1) || (*psz && WildcardMatch(psz+1, mask));\n-        case '?':\n-            if (*psz == '\\0')\n-                return false;\n-            break;\n-        default:\n-            if (*psz != *mask)\n-                return false;\n-            break;\n-        }\n-        psz++;\n-        mask++;\n-    }\n-}\n-\n-bool WildcardMatch(const string& str, const string& mask)\n-{\n-    return WildcardMatch(str.c_str(), mask.c_str());\n-}\n-\n-\n-\n-\n-\n-\n-\n-\n static std::string FormatException(std::exception* pex, const char* pszThread)\n {\n #ifdef WIN32"
      },
      {
        "sha": "011a40e540afcf2e93f2649231b02b983b906f47",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 0,
        "deletions": 9,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fdbd7075cab8d54f90c038e68afba868a9ff9f63/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fdbd7075cab8d54f90c038e68afba868a9ff9f63/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=fdbd7075cab8d54f90c038e68afba868a9ff9f63",
        "patch": "@@ -182,8 +182,6 @@ std::string DecodeBase32(const std::string& str);\n std::string EncodeBase32(const unsigned char* pch, size_t len);\n std::string EncodeBase32(const std::string& str);\n void ParseParameters(int argc, const char*const argv[]);\n-bool WildcardMatch(const char* psz, const char* mask);\n-bool WildcardMatch(const std::string& str, const std::string& mask);\n void FileCommit(FILE *fileout);\n bool TruncateFile(FILE *file, unsigned int length);\n int RaiseFileDescriptorLimit(int nMinFD);\n@@ -348,13 +346,6 @@ inline std::string DateTimeStrFormat(const char* pszFormat, int64_t nTime)\n     return pszTime;\n }\n \n-template<typename T>\n-void skipspaces(T& it)\n-{\n-    while (isspace(*it))\n-        ++it;\n-}\n-\n inline bool IsSwitchChar(char c)\n {\n #ifdef WIN32"
      }
    ]
  },
  {
    "sha": "21bf3d257b88c45e2bb0b47e36e73d7462760c2c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMWJmM2QyNTdiODhjNDVlMmJiMGI0N2UzNmU3M2Q3NDYyNzYwYzJj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-04-28T13:23:29Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-05-09T14:45:57Z"
      },
      "message": "Add tests for BoostAsioToCNetAddr",
      "tree": {
        "sha": "0e17e29195261190f0f06121f977eb6f4cbbc69f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0e17e29195261190f0f06121f977eb6f4cbbc69f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/21bf3d257b88c45e2bb0b47e36e73d7462760c2c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/21bf3d257b88c45e2bb0b47e36e73d7462760c2c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/21bf3d257b88c45e2bb0b47e36e73d7462760c2c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/21bf3d257b88c45e2bb0b47e36e73d7462760c2c/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fdbd7075cab8d54f90c038e68afba868a9ff9f63",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fdbd7075cab8d54f90c038e68afba868a9ff9f63",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fdbd7075cab8d54f90c038e68afba868a9ff9f63"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 21,
      "deletions": 2
    },
    "files": [
      {
        "sha": "ac40ea7cf19970ffe4bd34a057e36bf082cad766",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21bf3d257b88c45e2bb0b47e36e73d7462760c2c/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21bf3d257b88c45e2bb0b47e36e73d7462760c2c/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=21bf3d257b88c45e2bb0b47e36e73d7462760c2c",
        "patch": "@@ -359,8 +359,7 @@ void ErrorReply(std::ostream& stream, const Object& objError, const Value& id)\n     stream << HTTPReply(nStatus, strReply, false) << std::flush;\n }\n \n-// Convert boost::asio address to CNetAddr\n-static CNetAddr BoostAsioToCNetAddr(boost::asio::ip::address address)\n+CNetAddr BoostAsioToCNetAddr(boost::asio::ip::address address)\n {\n     CNetAddr netaddr;\n     // Make sure that IPv4-compatible and IPv4-mapped IPv6 addresses are treated as IPv4 addresses"
      },
      {
        "sha": "e8cd2cd0fc03c24d2b87fe17d707eaba86eab2dc",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21bf3d257b88c45e2bb0b47e36e73d7462760c2c/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21bf3d257b88c45e2bb0b47e36e73d7462760c2c/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=21bf3d257b88c45e2bb0b47e36e73d7462760c2c",
        "patch": "@@ -19,6 +19,7 @@\n #include \"json/json_spirit_writer_template.h\"\n \n class CBlockIndex;\n+class CNetAddr;\n \n /* Start RPC threads */\n void StartRPCThreads();\n@@ -50,6 +51,9 @@ void RPCTypeCheck(const json_spirit::Object& o,\n  */\n void RPCRunLater(const std::string& name, boost::function<void(void)> func, int64_t nSeconds);\n \n+//! Convert boost::asio address to CNetAddr\n+extern CNetAddr BoostAsioToCNetAddr(boost::asio::ip::address address);\n+\n typedef json_spirit::Value(*rpcfn_type)(const json_spirit::Array& params, bool fHelp);\n \n class CRPCCommand"
      },
      {
        "sha": "107c0f06e75282de88864e02054dd1a105ad33a3",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21bf3d257b88c45e2bb0b47e36e73d7462760c2c/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21bf3d257b88c45e2bb0b47e36e73d7462760c2c/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=21bf3d257b88c45e2bb0b47e36e73d7462760c2c",
        "patch": "@@ -6,6 +6,7 @@\n #include \"rpcclient.h\"\n \n #include \"base58.h\"\n+#include \"netbase.h\"\n \n #include <boost/algorithm/string.hpp>\n #include <boost/test/unit_test.hpp>\n@@ -138,4 +139,19 @@ BOOST_AUTO_TEST_CASE(rpc_parse_monetary_values)\n     BOOST_CHECK(AmountFromValue(ValueFromString(\"20999999.99999999\")) == 2099999999999999LL);\n }\n \n+BOOST_AUTO_TEST_CASE(rpc_boostasiotocnetaddr)\n+{\n+    // Check IPv4 addresses\n+    BOOST_CHECK_EQUAL(BoostAsioToCNetAddr(boost::asio::ip::address::from_string(\"1.2.3.4\")).ToString(), \"1.2.3.4\");\n+    BOOST_CHECK_EQUAL(BoostAsioToCNetAddr(boost::asio::ip::address::from_string(\"127.0.0.1\")).ToString(), \"127.0.0.1\");\n+    // Check IPv6 addresses\n+    BOOST_CHECK_EQUAL(BoostAsioToCNetAddr(boost::asio::ip::address::from_string(\"::1\")).ToString(), \"::1\");\n+    BOOST_CHECK_EQUAL(BoostAsioToCNetAddr(boost::asio::ip::address::from_string(\"123:4567:89ab:cdef:123:4567:89ab:cdef\")).ToString(),\n+                                         \"123:4567:89ab:cdef:123:4567:89ab:cdef\");\n+    // v4 compatible must be interpreted as IPv4\n+    BOOST_CHECK_EQUAL(BoostAsioToCNetAddr(boost::asio::ip::address::from_string(\"::0:127.0.0.1\")).ToString(), \"127.0.0.1\");\n+    // v4 mapped must be interpreted as IPv4\n+    BOOST_CHECK_EQUAL(BoostAsioToCNetAddr(boost::asio::ip::address::from_string(\"::ffff:127.0.0.1\")).ToString(), \"127.0.0.1\");\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  }
]