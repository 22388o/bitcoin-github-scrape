[
  {
    "sha": "fa347b2f2570a9436313a7c5d61015f2088662f4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTM0N2IyZjI1NzBhOTQzNjMxM2E3YzVkNjEwMTVmMjA4ODY2MmY0",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-08-24T11:52:17Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-08-24T11:44:07Z"
      },
      "message": "test: Select at least the fee in wallet_bumpfee to avoid negative amounts",
      "tree": {
        "sha": "dde99a4c656139c1c9eacf39beae5948d1befbd5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dde99a4c656139c1c9eacf39beae5948d1befbd5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa347b2f2570a9436313a7c5d61015f2088662f4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgWkQv/XgkT/O1/ewuuAKvDxV3t2c4FwHEIdjEoDlB6MEAlQUPAXXoz8wgcaep0\ndo+MBHifOEl6KPFLShfxGWFqgvkUg/R1KZTSBpkjSIDGuuI40yDsoNqr1Brg79Fq\n4SYgEkBrrqbr38ZLH9cqlHwDIugFjZkpAnMyn34RxdsPfCbw37fXWysyFua7ByPJ\n1ZXHDl0TNct8CJUxWJDs78+PUrNIrr23ftUBRec/+NPRuBnKg6lYi001Bm6CSCaG\n8T6M2pS0jpwsBiwXs/3qkCrX3DzeVH+EXpBoafG6+mzg3cyeyQjKr1mEEHIprstL\nwxR0rsU3tXhAFL1Mk2MjbSpTbNg9UsUig2j9n2TJ2gtJ88diyQW8nUDJEmPUNYR5\n36mCGrQ28L2l/+jj5yY9y1UmRdMIcdm+Htsjdm6XNB6W5Oom5UVsjRDzObss9TgJ\ngyUfJqeHCUa+6+M728JpxELpMKeOawaJx4/4K1qgIui923Rm2oi70UJxD3CMCyDk\n9ydiIyRn\n=i5HG\n-----END PGP SIGNATURE-----",
        "payload": "tree dde99a4c656139c1c9eacf39beae5948d1befbd5\nparent 1d53d72948e39ad2d099a6cf2488d5652e7a1f23\nauthor MarcoFalke <falke.marco@gmail.com> 1598269937 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1598269447 +0200\n\ntest: Select at least the fee in wallet_bumpfee to avoid negative amounts\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa347b2f2570a9436313a7c5d61015f2088662f4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa347b2f2570a9436313a7c5d61015f2088662f4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa347b2f2570a9436313a7c5d61015f2088662f4/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1d53d72948e39ad2d099a6cf2488d5652e7a1f23",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d53d72948e39ad2d099a6cf2488d5652e7a1f23",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1d53d72948e39ad2d099a6cf2488d5652e7a1f23"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 3,
      "deletions": 2
    },
    "files": [
      {
        "sha": "11dbb38369431287be6c351428d6096a5b1373a5",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa347b2f2570a9436313a7c5d61015f2088662f4/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa347b2f2570a9436313a7c5d61015f2088662f4/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=fa347b2f2570a9436313a7c5d61015f2088662f4",
        "patch": "@@ -211,14 +211,15 @@ def test_notmine_bumpfee_fails(self, rbf_node, peer_node, dest_address):\n     # here, the rbftx has a peer_node coin and then adds a rbf_node input\n     # Note that this test depends upon the RPC code checking input ownership prior to change outputs\n     # (since it can't use fundrawtransaction, it lacks a proper change output)\n-    utxos = [node.listunspent()[-1] for node in (rbf_node, peer_node)]\n+    fee = Decimal(\"0.001\")\n+    utxos = [node.listunspent(query_options={'minimumAmount': fee})[-1] for node in (rbf_node, peer_node)]\n     inputs = [{\n         \"txid\": utxo[\"txid\"],\n         \"vout\": utxo[\"vout\"],\n         \"address\": utxo[\"address\"],\n         \"sequence\": BIP125_SEQUENCE_NUMBER\n     } for utxo in utxos]\n-    output_val = sum(utxo[\"amount\"] for utxo in utxos) - Decimal(\"0.001\")\n+    output_val = sum(utxo[\"amount\"] for utxo in utxos) - fee\n     rawtx = rbf_node.createrawtransaction(inputs, {dest_address: output_val})\n     signedtx = rbf_node.signrawtransactionwithwallet(rawtx)\n     signedtx = peer_node.signrawtransactionwithwallet(signedtx[\"hex\"])"
      }
    ]
  },
  {
    "sha": "fafc9d5af48c987212af4170bb8b2504be8138f8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWZjOWQ1YWY0OGM5ODcyMTJhZjQxNzBiYjhiMjUwNGJlODEzOGY4",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-08-21T16:23:06Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-08-24T11:49:28Z"
      },
      "message": "test: Fix intermittent issue in wallet_bumpfee",
      "tree": {
        "sha": "45c931ee0cc659b111b6c2d02b864cf0d54070c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/45c931ee0cc659b111b6c2d02b864cf0d54070c1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fafc9d5af48c987212af4170bb8b2504be8138f8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhwVAwAnt7IC59U6rhSO0p85k0EaJ2N7tdRDdGY2f/AN7x+P7Z06aSri+fIvr+8\nUMkPRKYsZiyLex3bRJ1zPwk4WPnnRvb+l6AmdZ9uhj70DceBp31MPZvVj2cDEBM7\nO7fDtvb2i6L6VuI7CEZqfq76i96gKyZ9OMZhVlYG5z7TASdKHB0J9QETTjxEGV+2\n8jKgcro0ZNzC4RQf0aC5eywsAm7nlYBv6We1O2bp9+ToH8O84I4cfWGY4BCkR2Cc\nmLt5wrzA0l+ufD8YjOn6LnwLkeuPC6JFagXdv78eGNcKXMygojPVlNcCFPHxX3Nz\nV4vfRH5D54a+4Gsi9Fn3J8LAPEwW9dLvCyDW2tlyE+ZQa5sZ61+8Rq4SbLNHSlNa\nGXfhJ3xEOXm0DKtKo8rlkW+2qodP0Nob53Ap116yoNoeF1O6+/SKmgE5g6QX+qRd\npUtbfAdSQymB0VPDIXGcbjbkc4emiDrpDSoTuDM8PZhpg/I6TcGsZiq/1qqb9+DS\nY3pxZ/Yo\n=CKI8\n-----END PGP SIGNATURE-----",
        "payload": "tree 45c931ee0cc659b111b6c2d02b864cf0d54070c1\nparent fa347b2f2570a9436313a7c5d61015f2088662f4\nauthor MarcoFalke <falke.marco@gmail.com> 1598026986 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1598269768 +0200\n\ntest: Fix intermittent issue in wallet_bumpfee\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fafc9d5af48c987212af4170bb8b2504be8138f8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fafc9d5af48c987212af4170bb8b2504be8138f8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fafc9d5af48c987212af4170bb8b2504be8138f8/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa347b2f2570a9436313a7c5d61015f2088662f4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa347b2f2570a9436313a7c5d61015f2088662f4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa347b2f2570a9436313a7c5d61015f2088662f4"
      }
    ],
    "stats": {
      "total": 73,
      "additions": 50,
      "deletions": 23
    },
    "files": [
      {
        "sha": "56d1da60b7223d4ad9859badd1cf2495c864c459",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 50,
        "deletions": 23,
        "changes": 73,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fafc9d5af48c987212af4170bb8b2504be8138f8/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fafc9d5af48c987212af4170bb8b2504be8138f8/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=fafc9d5af48c987212af4170bb8b2504be8138f8",
        "patch": "@@ -50,6 +50,11 @@ def set_test_params(self):\n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n \n+    def clear_mempool(self):\n+        # Clear mempool between subtests. The subtests may only depend on chainstate (utxos)\n+        self.nodes[1].generate(1)\n+        self.sync_all()\n+\n     def run_test(self):\n         # Encrypt wallet for test_locked_wallet_fails test\n         self.nodes[1].encryptwallet(WALLET_PASSPHRASE)\n@@ -71,7 +76,7 @@ def run_test(self):\n \n         self.log.info(\"Running tests\")\n         dest_address = peer_node.getnewaddress()\n-        test_invalid_parameters(rbf_node, dest_address)\n+        self.test_invalid_parameters(rbf_node, dest_address)\n         test_simple_bumpfee_succeeds(self, \"default\", rbf_node, peer_node, dest_address)\n         test_simple_bumpfee_succeeds(self, \"fee_rate\", rbf_node, peer_node, dest_address)\n         test_feerate_args(self, rbf_node, peer_node, dest_address)\n@@ -93,28 +98,30 @@ def run_test(self):\n         test_small_output_with_feerate_succeeds(self, rbf_node, dest_address)\n         test_no_more_inputs_fails(self, rbf_node, dest_address)\n \n-def test_invalid_parameters(node, dest_address):\n-    txid = spend_one_input(node, dest_address)\n-    # invalid estimate mode\n-    assert_raises_rpc_error(-8, \"Invalid estimate_mode parameter\", node.bumpfee, txid, {\n-        \"estimate_mode\": \"moo\",\n-    })\n-    assert_raises_rpc_error(-3, \"Expected type string\", node.bumpfee, txid, {\n-        \"estimate_mode\": 38,\n-    })\n-    assert_raises_rpc_error(-3, \"Expected type string\", node.bumpfee, txid, {\n-        \"estimate_mode\": {\n-            \"foo\": \"bar\",\n-        },\n-    })\n-    assert_raises_rpc_error(-8, \"Invalid estimate_mode parameter\", node.bumpfee, txid, {\n-        \"estimate_mode\": Decimal(\"3.141592\"),\n-    })\n-    # confTarget and conf_target\n-    assert_raises_rpc_error(-8, \"confTarget and conf_target options should not both be set\", node.bumpfee, txid, {\n-        \"confTarget\": 123,\n-        \"conf_target\": 456,\n-    })\n+    def test_invalid_parameters(self, node, dest_address):\n+        txid = spend_one_input(node, dest_address)\n+        # invalid estimate mode\n+        assert_raises_rpc_error(-8, \"Invalid estimate_mode parameter\", node.bumpfee, txid, {\n+            \"estimate_mode\": \"moo\",\n+        })\n+        assert_raises_rpc_error(-3, \"Expected type string\", node.bumpfee, txid, {\n+            \"estimate_mode\": 38,\n+        })\n+        assert_raises_rpc_error(-3, \"Expected type string\", node.bumpfee, txid, {\n+            \"estimate_mode\": {\n+                \"foo\": \"bar\",\n+            },\n+        })\n+        assert_raises_rpc_error(-8, \"Invalid estimate_mode parameter\", node.bumpfee, txid, {\n+            \"estimate_mode\": Decimal(\"3.141592\"),\n+        })\n+        # confTarget and conf_target\n+        assert_raises_rpc_error(-8, \"confTarget and conf_target options should not both be set\", node.bumpfee, txid, {\n+            \"confTarget\": 123,\n+            \"conf_target\": 456,\n+        })\n+        self.clear_mempool()\n+\n \n def test_simple_bumpfee_succeeds(self, mode, rbf_node, peer_node, dest_address):\n     self.log.info('Test simple bumpfee: {}'.format(mode))\n@@ -148,6 +155,7 @@ def test_simple_bumpfee_succeeds(self, mode, rbf_node, peer_node, dest_address):\n     bumpedwtx = rbf_node.gettransaction(bumped_tx[\"txid\"])\n     assert_equal(oldwtx[\"replaced_by_txid\"], bumped_tx[\"txid\"])\n     assert_equal(bumpedwtx[\"replaces_txid\"], rbfid)\n+    self.clear_mempool()\n \n \n def test_feerate_args(self, rbf_node, peer_node, dest_address):\n@@ -167,6 +175,7 @@ def test_feerate_args(self, rbf_node, peer_node, dest_address):\n     assert_raises_rpc_error(-3, \"Amount out of range\", rbf_node.bumpfee, rbfid, {\"fee_rate\": -1})\n \n     assert_raises_rpc_error(-4, \"is too high (cannot be higher than\", rbf_node.bumpfee, rbfid, {\"fee_rate\": TOO_HIGH})\n+    self.clear_mempool()\n \n \n def test_segwit_bumpfee_succeeds(self, rbf_node, dest_address):\n@@ -198,12 +207,14 @@ def test_segwit_bumpfee_succeeds(self, rbf_node, dest_address):\n     bumped_tx = rbf_node.bumpfee(rbfid)\n     assert bumped_tx[\"txid\"] in rbf_node.getrawmempool()\n     assert rbfid not in rbf_node.getrawmempool()\n+    self.clear_mempool()\n \n \n def test_nonrbf_bumpfee_fails(self, peer_node, dest_address):\n     self.log.info('Test that we cannot replace a non RBF transaction')\n     not_rbfid = peer_node.sendtoaddress(dest_address, Decimal(\"0.00090000\"))\n     assert_raises_rpc_error(-4, \"not BIP 125 replaceable\", peer_node.bumpfee, not_rbfid)\n+    self.clear_mempool()\n \n \n def test_notmine_bumpfee_fails(self, rbf_node, peer_node, dest_address):\n@@ -226,6 +237,7 @@ def test_notmine_bumpfee_fails(self, rbf_node, peer_node, dest_address):\n     rbfid = rbf_node.sendrawtransaction(signedtx[\"hex\"])\n     assert_raises_rpc_error(-4, \"Transaction contains inputs that don't belong to this wallet\",\n                             rbf_node.bumpfee, rbfid)\n+    self.clear_mempool()\n \n \n def test_bumpfee_with_descendant_fails(self, rbf_node, rbf_node_address, dest_address):\n@@ -236,6 +248,7 @@ def test_bumpfee_with_descendant_fails(self, rbf_node, rbf_node_address, dest_ad\n     tx = rbf_node.signrawtransactionwithwallet(tx)\n     rbf_node.sendrawtransaction(tx[\"hex\"])\n     assert_raises_rpc_error(-8, \"Transaction has descendants in the wallet\", rbf_node.bumpfee, parent_id)\n+    self.clear_mempool()\n \n \n def test_small_output_with_feerate_succeeds(self, rbf_node, dest_address):\n@@ -277,6 +290,7 @@ def test_small_output_with_feerate_succeeds(self, rbf_node, dest_address):\n \n     rbf_node.generatetoaddress(1, rbf_node.getnewaddress())\n     assert_equal(rbf_node.gettransaction(rbfid)[\"confirmations\"], 1)\n+    self.clear_mempool()\n \n \n def test_dust_to_fee(self, rbf_node, dest_address):\n@@ -299,6 +313,7 @@ def test_dust_to_fee(self, rbf_node, dest_address):\n     assert_equal(len(fulltx[\"vout\"]), 2)\n     assert_equal(len(full_bumped_tx[\"vout\"]), 1)  # change output is eliminated\n     assert_equal(full_bumped_tx[\"vout\"][0]['value'], Decimal(\"0.00050000\"))\n+    self.clear_mempool()\n \n \n def test_settxfee(self, rbf_node, dest_address):\n@@ -321,6 +336,8 @@ def test_settxfee(self, rbf_node, dest_address):\n     assert_raises_rpc_error(-8, \"txfee cannot be more than wallet max tx fee\", rbf_node.settxfee, Decimal('0.00003'))\n     self.restart_node(1, self.extra_args[1])\n     rbf_node.walletpassphrase(WALLET_PASSPHRASE, WALLET_PASSPHRASE_TIMEOUT)\n+    self.connect_nodes(1, 0)\n+    self.clear_mempool()\n \n \n def test_maxtxfee_fails(self, rbf_node, dest_address):\n@@ -334,6 +351,8 @@ def test_maxtxfee_fails(self, rbf_node, dest_address):\n     assert_raises_rpc_error(-4, \"Unable to create transaction. Fee exceeds maximum configured by -maxtxfee\", rbf_node.bumpfee, rbfid)\n     self.restart_node(1, self.extra_args[1])\n     rbf_node.walletpassphrase(WALLET_PASSPHRASE, WALLET_PASSPHRASE_TIMEOUT)\n+    self.connect_nodes(1, 0)\n+    self.clear_mempool()\n \n \n def test_watchonly_psbt(self, peer_node, rbf_node, dest_address):\n@@ -416,6 +435,7 @@ def test_watchonly_psbt(self, peer_node, rbf_node, dest_address):\n \n     rbf_node.unloadwallet(\"watcher\")\n     rbf_node.unloadwallet(\"signer\")\n+    self.clear_mempool()\n \n \n def test_rebumping(self, rbf_node, dest_address):\n@@ -424,6 +444,7 @@ def test_rebumping(self, rbf_node, dest_address):\n     bumped = rbf_node.bumpfee(rbfid, {\"fee_rate\": ECONOMICAL})\n     assert_raises_rpc_error(-4, \"already bumped\", rbf_node.bumpfee, rbfid, {\"fee_rate\": NORMAL})\n     rbf_node.bumpfee(bumped[\"txid\"], {\"fee_rate\": NORMAL})\n+    self.clear_mempool()\n \n \n def test_rebumping_not_replaceable(self, rbf_node, dest_address):\n@@ -432,6 +453,7 @@ def test_rebumping_not_replaceable(self, rbf_node, dest_address):\n     bumped = rbf_node.bumpfee(rbfid, {\"fee_rate\": ECONOMICAL, \"replaceable\": False})\n     assert_raises_rpc_error(-4, \"Transaction is not BIP 125 replaceable\", rbf_node.bumpfee, bumped[\"txid\"],\n                             {\"fee_rate\": NORMAL})\n+    self.clear_mempool()\n \n \n def test_unconfirmed_not_spendable(self, rbf_node, rbf_node_address):\n@@ -471,6 +493,7 @@ def test_unconfirmed_not_spendable(self, rbf_node, rbf_node_address):\n     assert_equal(\n         sum(1 for t in rbf_node.listunspent(minconf=0, include_unsafe=False)\n             if t[\"txid\"] == rbfid and t[\"address\"] == rbf_node_address and t[\"spendable\"]), 1)\n+    self.clear_mempool()\n \n \n def test_bumpfee_metadata(self, rbf_node, dest_address):\n@@ -482,6 +505,7 @@ def test_bumpfee_metadata(self, rbf_node, dest_address):\n     bumped_wtx = rbf_node.gettransaction(bumped_tx[\"txid\"])\n     assert_equal(bumped_wtx[\"comment\"], \"comment value\")\n     assert_equal(bumped_wtx[\"to\"], \"to value\")\n+    self.clear_mempool()\n \n \n def test_locked_wallet_fails(self, rbf_node, dest_address):\n@@ -491,6 +515,7 @@ def test_locked_wallet_fails(self, rbf_node, dest_address):\n     assert_raises_rpc_error(-13, \"Please enter the wallet passphrase with walletpassphrase first.\",\n                             rbf_node.bumpfee, rbfid)\n     rbf_node.walletpassphrase(WALLET_PASSPHRASE, WALLET_PASSPHRASE_TIMEOUT)\n+    self.clear_mempool()\n \n \n def test_change_script_match(self, rbf_node, dest_address):\n@@ -511,6 +536,7 @@ def get_change_address(tx):\n     assert_equal(change_addresses, get_change_address(bumped_total_tx['txid']))\n     bumped_rate_tx = rbf_node.bumpfee(bumped_total_tx[\"txid\"])\n     assert_equal(change_addresses, get_change_address(bumped_rate_tx['txid']))\n+    self.clear_mempool()\n \n \n def spend_one_input(node, dest_address, change_size=Decimal(\"0.00049000\")):\n@@ -549,6 +575,7 @@ def test_no_more_inputs_fails(self, rbf_node, dest_address):\n     # spend all funds, no change output\n     rbfid = rbf_node.sendtoaddress(rbf_node.getnewaddress(), rbf_node.getbalance(), \"\", \"\", True)\n     assert_raises_rpc_error(-4, \"Unable to create transaction. Insufficient funds\", rbf_node.bumpfee, rbfid)\n+    self.clear_mempool()\n \n \n if __name__ == \"__main__\":"
      }
    ]
  }
]