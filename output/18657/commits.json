[
  {
    "sha": "f8bfda16ebefda40efd66eeb0225c353a88d8e53",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOGJmZGExNmViZWZkYTQwZWZkNjZlZWIwMjI1YzM1M2E4OGQ4ZTUz",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-04-15T19:55:06Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-04-15T19:55:06Z"
      },
      "message": "chain: Do not fill out parameters in findCommonAncestor(...) if ancestor is not found",
      "tree": {
        "sha": "10650f245c18f06c3aebc9e533276588a3c14f73",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/10650f245c18f06c3aebc9e533276588a3c14f73"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f8bfda16ebefda40efd66eeb0225c353a88d8e53",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8bfda16ebefda40efd66eeb0225c353a88d8e53",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f8bfda16ebefda40efd66eeb0225c353a88d8e53",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8bfda16ebefda40efd66eeb0225c353a88d8e53/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4bd6bc5cb4f3c4b017cc0ac21c00c2218acb97d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4bd6bc5cb4f3c4b017cc0ac21c00c2218acb97d0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4bd6bc5cb4f3c4b017cc0ac21c00c2218acb97d0"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 3,
      "deletions": 2
    },
    "files": [
      {
        "sha": "cd825f870e78d4a5797f34ee910f18ecbe3e59f4",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8bfda16ebefda40efd66eeb0225c353a88d8e53/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8bfda16ebefda40efd66eeb0225c353a88d8e53/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=f8bfda16ebefda40efd66eeb0225c353a88d8e53",
        "patch": "@@ -275,7 +275,7 @@ class ChainImpl : public Chain\n         const CBlockIndex* block1 = LookupBlockIndex(block_hash1);\n         const CBlockIndex* block2 = LookupBlockIndex(block_hash2);\n         const CBlockIndex* ancestor = block1 && block2 ? LastCommonAncestor(block1, block2) : nullptr;\n-        return FillBlock(ancestor, ancestor_out, lock) & FillBlock(block1, block1_out, lock) & FillBlock(block2, block2_out, lock);\n+        return FillBlock(ancestor, ancestor_out, lock) && FillBlock(block1, block1_out, lock) && FillBlock(block2, block2_out, lock);\n     }\n     void findCoins(std::map<COutPoint, Coin>& coins) override { return FindCoins(m_node, coins); }\n     double guessVerificationProgress(const uint256& block_hash) override"
      },
      {
        "sha": "db40f60314fb06e4320a8914f2f9a9a2bba9238e",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8bfda16ebefda40efd66eeb0225c353a88d8e53/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8bfda16ebefda40efd66eeb0225c353a88d8e53/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=f8bfda16ebefda40efd66eeb0225c353a88d8e53",
        "patch": "@@ -161,7 +161,8 @@ class Chain\n         const FoundBlock& ancestor_out={}) = 0;\n \n     //! Find most recent common ancestor between two blocks and optionally\n-    //! return block information.\n+    //! return block information. block1_out and block2_out are not filled\n+    //! if the ancestor is not found.\n     virtual bool findCommonAncestor(const uint256& block_hash1,\n         const uint256& block_hash2,\n         const FoundBlock& ancestor_out={},"
      }
    ]
  }
]