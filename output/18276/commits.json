[
  {
    "sha": "b9621e5dc969fe913e5512b0a8228ec2e62b16a1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiOTYyMWU1ZGM5NjlmZTkxM2U1NTEyYjBhODIyOGVjMmU2MmIxNmEx",
    "commit": {
      "author": {
        "name": "Yashpatel20",
        "email": "yash.work10@gmail.com",
        "date": "2020-03-06T06:08:38Z"
      },
      "committer": {
        "name": "Yashpatel20",
        "email": "yash.work10@gmail.com",
        "date": "2020-03-06T06:08:38Z"
      },
      "message": "rpcdoc : remove redundant type from description#18258",
      "tree": {
        "sha": "2f1a6d312b2a93c82c3b48f0658c431b10fa5a26",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2f1a6d312b2a93c82c3b48f0658c431b10fa5a26"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b9621e5dc969fe913e5512b0a8228ec2e62b16a1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9621e5dc969fe913e5512b0a8228ec2e62b16a1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b9621e5dc969fe913e5512b0a8228ec2e62b16a1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9621e5dc969fe913e5512b0a8228ec2e62b16a1/comments",
    "author": {
      "login": "yashpatel20",
      "id": 19612017,
      "node_id": "MDQ6VXNlcjE5NjEyMDE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19612017?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yashpatel20",
      "html_url": "https://github.com/yashpatel20",
      "followers_url": "https://api.github.com/users/yashpatel20/followers",
      "following_url": "https://api.github.com/users/yashpatel20/following{/other_user}",
      "gists_url": "https://api.github.com/users/yashpatel20/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yashpatel20/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yashpatel20/subscriptions",
      "organizations_url": "https://api.github.com/users/yashpatel20/orgs",
      "repos_url": "https://api.github.com/users/yashpatel20/repos",
      "events_url": "https://api.github.com/users/yashpatel20/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yashpatel20/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "yashpatel20",
      "id": 19612017,
      "node_id": "MDQ6VXNlcjE5NjEyMDE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19612017?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yashpatel20",
      "html_url": "https://github.com/yashpatel20",
      "followers_url": "https://api.github.com/users/yashpatel20/followers",
      "following_url": "https://api.github.com/users/yashpatel20/following{/other_user}",
      "gists_url": "https://api.github.com/users/yashpatel20/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yashpatel20/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yashpatel20/subscriptions",
      "organizations_url": "https://api.github.com/users/yashpatel20/orgs",
      "repos_url": "https://api.github.com/users/yashpatel20/repos",
      "events_url": "https://api.github.com/users/yashpatel20/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yashpatel20/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a2a77ba34f713d6406c31a4baa991666b13794a0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2a77ba34f713d6406c31a4baa991666b13794a0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a2a77ba34f713d6406c31a4baa991666b13794a0"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 26,
      "deletions": 26
    },
    "files": [
      {
        "sha": "431c2ab960563b39ef91dcd9a8ded02028302344",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9621e5dc969fe913e5512b0a8228ec2e62b16a1/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9621e5dc969fe913e5512b0a8228ec2e62b16a1/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=b9621e5dc969fe913e5512b0a8228ec2e62b16a1",
        "patch": "@@ -342,7 +342,7 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n                 \"    https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki#getblocktemplate_changes\\n\"\n                 \"    https://github.com/bitcoin/bips/blob/master/bip-0145.mediawiki\\n\",\n                 {\n-                    {\"template_request\", RPCArg::Type::OBJ, \"{}\", \"A json object in the following spec\",\n+                    {\"template_request\", RPCArg::Type::OBJ, \"{}\", \"in the following spec\",\n                         {\n                             {\"mode\", RPCArg::Type::STR, /* treat as named arg */ RPCArg::Optional::OMITTED_NAMED_ARG, \"This must be set to \\\"template\\\", \\\"proposal\\\" (see BIP 23), or omitted\"},\n                             {\"capabilities\", RPCArg::Type::ARR, /* treat as named arg */ RPCArg::Optional::OMITTED_NAMED_ARG, \"A list of strings\","
      },
      {
        "sha": "00adb8be7709acd12908035f33600c0f3a52abda",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9621e5dc969fe913e5512b0a8228ec2e62b16a1/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9621e5dc969fe913e5512b0a8228ec2e62b16a1/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=b9621e5dc969fe913e5512b0a8228ec2e62b16a1",
        "patch": "@@ -76,7 +76,7 @@ static UniValue createmultisig(const JSONRPCRequest& request)\n                 \"It returns a json object with the address and redeemScript.\\n\",\n                 {\n                     {\"nrequired\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The number of required signatures out of the n keys.\"},\n-                    {\"keys\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"A json array of hex-encoded public keys.\",\n+                    {\"keys\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"of hex-encoded public keys.\",\n                         {\n                             {\"key\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"The hex-encoded public key\"},\n                         }},\n@@ -514,11 +514,11 @@ UniValue logging(const JSONRPCRequest& request)\n             \"  - \\\"none\\\", \\\"0\\\" : even if other logging categories are specified, ignore all of them.\\n\"\n             ,\n                 {\n-                    {\"include\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"A json array of categories to add debug logging\",\n+                    {\"include\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"of categories to add debug logging\",\n                         {\n                             {\"include_category\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"the valid logging category\"},\n                         }},\n-                    {\"exclude\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"A json array of categories to remove debug logging\",\n+                    {\"exclude\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"of categories to remove debug logging\",\n                         {\n                             {\"exclude_category\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"the valid logging category\"},\n                         }},"
      },
      {
        "sha": "5c9227cbd5f44c4c453bbb69076443375b2e5a14",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9621e5dc969fe913e5512b0a8228ec2e62b16a1/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9621e5dc969fe913e5512b0a8228ec2e62b16a1/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=b9621e5dc969fe913e5512b0a8228ec2e62b16a1",
        "patch": "@@ -230,7 +230,7 @@ static UniValue gettxoutproof(const JSONRPCRequest& request)\n                 \"you need to maintain a transaction index, using the -txindex command line option or\\n\"\n                 \"specify the block in which the transaction is included manually (by blockhash).\\n\",\n                 {\n-                    {\"txids\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"A json array of txids to filter\",\n+                    {\"txids\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"of txids to filter\",\n                         {\n                             {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A transaction hash\"},\n                         },\n@@ -368,7 +368,7 @@ static UniValue createrawtransaction(const JSONRPCRequest& request)\n                 \"Note that the transaction's inputs are not signed, and\\n\"\n                 \"it is not stored in the wallet or transmitted to the network.\\n\",\n                 {\n-                    {\"inputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"A json array of json objects\",\n+                    {\"inputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"of json objects\",\n                         {\n                             {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n                                 {\n@@ -379,7 +379,7 @@ static UniValue createrawtransaction(const JSONRPCRequest& request)\n                                 },\n                         },\n                         },\n-                    {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+                    {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n                             \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n                             \"For compatibility reasons, a dictionary, which holds the key-value pairs directly, is also\\n\"\n                             \"                             accepted as second parameter.\",\n@@ -622,7 +622,7 @@ static UniValue combinerawtransaction(const JSONRPCRequest& request)\n                 \"The combined transaction may be another partially signed transaction or a \\n\"\n                 \"fully signed transaction.\",\n                 {\n-                    {\"txs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"A json array of hex strings of partially signed transactions\",\n+                    {\"txs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"of hex strings of partially signed transactions\",\n                         {\n                             {\"hexstring\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A transaction hash\"},\n                         },\n@@ -708,12 +708,12 @@ static UniValue signrawtransactionwithkey(const JSONRPCRequest& request)\n                 \"this transaction depends on but may not yet be in the block chain.\\n\",\n                 {\n                     {\"hexstring\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The transaction hex string\"},\n-                    {\"privkeys\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"A json array of base58-encoded private keys for signing\",\n+                    {\"privkeys\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"of base58-encoded private keys for signing\",\n                         {\n                             {\"privatekey\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"private key in base58-encoding\"},\n                         },\n                         },\n-                    {\"prevtxs\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"A json array of previous dependent transaction outputs\",\n+                    {\"prevtxs\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"of previous dependent transaction outputs\",\n                         {\n                             {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n                                 {\n@@ -1279,7 +1279,7 @@ UniValue combinepsbt(const JSONRPCRequest& request)\n                 \"\\nCombine multiple partially signed Bitcoin transactions into one transaction.\\n\"\n                 \"Implements the Combiner role.\\n\",\n                 {\n-                    {\"txs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"A json array of base64 strings of partially signed transactions\",\n+                    {\"txs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"of base64 strings of partially signed transactions\",\n                         {\n                             {\"psbt\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"A base64 string of a PSBT\"},\n                         },\n@@ -1384,7 +1384,7 @@ UniValue createpsbt(const JSONRPCRequest& request)\n                 \"\\nCreates a transaction in the Partially Signed Transaction format.\\n\"\n                 \"Implements the Creator role.\\n\",\n                 {\n-                    {\"inputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"A json array of json objects\",\n+                    {\"inputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"of json objects\",\n                         {\n                             {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n                                 {\n@@ -1395,7 +1395,7 @@ UniValue createpsbt(const JSONRPCRequest& request)\n                                 },\n                         },\n                         },\n-                    {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+                    {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n                             \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n                             \"For compatibility reasons, a dictionary, which holds the key-value pairs directly, is also\\n\"\n                             \"                             accepted as second parameter.\",\n@@ -1617,7 +1617,7 @@ UniValue joinpsbts(const JSONRPCRequest& request)\n             \"\\nJoins multiple distinct PSBTs with different inputs and outputs into one PSBT with inputs and outputs from all of the PSBTs\\n\"\n             \"No input in any of the PSBTs can be in more than one of the PSBTs.\\n\",\n             {\n-                {\"txs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"A json array of base64 strings of partially signed transactions\",\n+                {\"txs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"of base64 strings of partially signed transactions\",\n                     {\n                         {\"psbt\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A base64 string of a PSBT\"}\n                     }}"
      },
      {
        "sha": "7c45b5ef1b7add62504e108dffe670330c1996ee",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9621e5dc969fe913e5512b0a8228ec2e62b16a1/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9621e5dc969fe913e5512b0a8228ec2e62b16a1/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=b9621e5dc969fe913e5512b0a8228ec2e62b16a1",
        "patch": "@@ -824,14 +824,14 @@ static UniValue sendmany(const JSONRPCRequest& request)\n                     HelpRequiringPassphrase(pwallet) + \"\\n\",\n                 {\n                     {\"dummy\", RPCArg::Type::STR, RPCArg::Optional::NO, \"Must be set to \\\"\\\" for backwards compatibility.\", \"\\\"\\\"\"},\n-                    {\"amounts\", RPCArg::Type::OBJ, RPCArg::Optional::NO, \"A json object with addresses and amounts\",\n+                    {\"amounts\", RPCArg::Type::OBJ, RPCArg::Optional::NO, \"with addresses and amounts\",\n                         {\n                             {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"The bitcoin address is the key, the numeric amount (can be string) in \" + CURRENCY_UNIT + \" is the value\"},\n                         },\n                     },\n                     {\"minconf\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED_NAMED_ARG, \"Ignored dummy value\"},\n                     {\"comment\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"A comment\"},\n-                    {\"subtractfeefrom\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"A json array with addresses.\\n\"\n+                    {\"subtractfeefrom\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"with addresses.\\n\"\n             \"                           The fee will be equally deducted from the amount of each selected address.\\n\"\n             \"                           Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n             \"                           If no addresses are specified here, the sender pays the fee.\",\n@@ -962,7 +962,7 @@ static UniValue addmultisigaddress(const JSONRPCRequest& request)\n                 \"If 'label' is specified, assign address to that label.\\n\",\n                 {\n                     {\"nrequired\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The number of required signatures out of the n keys or addresses.\"},\n-                    {\"keys\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"A json array of bitcoin addresses or hex-encoded public keys\",\n+                    {\"keys\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"of bitcoin addresses or hex-encoded public keys\",\n                         {\n                             {\"key\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"bitcoin address or hex-encoded public key\"},\n                         },\n@@ -2155,7 +2155,7 @@ static UniValue lockunspent(const JSONRPCRequest& request)\n                 \"Also see the listunspent call\\n\",\n                 {\n                     {\"unlock\", RPCArg::Type::BOOL, RPCArg::Optional::NO, \"Whether to unlock (true) or lock (false) the specified transactions\"},\n-                    {\"transactions\", RPCArg::Type::ARR, /* default */ \"empty array\", \"A json array of objects. Each object the txid (string) vout (numeric).\",\n+                    {\"transactions\", RPCArg::Type::ARR, /* default */ \"empty array\", \"of objects. Each object the txid (string) vout (numeric).\",\n                         {\n                             {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n                                 {\n@@ -2828,7 +2828,7 @@ static UniValue listunspent(const JSONRPCRequest& request)\n                 {\n                     {\"minconf\", RPCArg::Type::NUM, /* default */ \"1\", \"The minimum confirmations to filter\"},\n                     {\"maxconf\", RPCArg::Type::NUM, /* default */ \"9999999\", \"The maximum confirmations to filter\"},\n-                    {\"addresses\", RPCArg::Type::ARR, /* default */ \"empty array\", \"A json array of bitcoin addresses to filter\",\n+                    {\"addresses\", RPCArg::Type::ARR, /* default */ \"empty array\", \"of bitcoin addresses to filter\",\n                         {\n                             {\"address\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"bitcoin address\"},\n                         },\n@@ -3178,7 +3178,7 @@ static UniValue fundrawtransaction(const JSONRPCRequest& request)\n                                                           \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n                             {\"lockUnspents\", RPCArg::Type::BOOL, /* default */ \"false\", \"Lock selected unspent outputs\"},\n                             {\"feeRate\", RPCArg::Type::AMOUNT, /* default */ \"not set: makes wallet determine the fee\", \"Set a specific fee rate in \" + CURRENCY_UNIT + \"/kB\"},\n-                            {\"subtractFeeFromOutputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"A json array of integers.\\n\"\n+                            {\"subtractFeeFromOutputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"of integers.\\n\"\n                             \"                              The fee will be equally deducted from the amount of each specified output.\\n\"\n                             \"                              Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n                             \"                              If no outputs are specified here, the sender pays the fee.\",\n@@ -3261,7 +3261,7 @@ UniValue signrawtransactionwithwallet(const JSONRPCRequest& request)\n                     HelpRequiringPassphrase(pwallet) + \"\\n\",\n                 {\n                     {\"hexstring\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The transaction hex string\"},\n-                    {\"prevtxs\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"A json array of previous dependent transaction outputs\",\n+                    {\"prevtxs\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"of previous dependent transaction outputs\",\n                         {\n                             {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n                                 {\n@@ -3911,9 +3911,9 @@ static UniValue getaddressesbylabel(const JSONRPCRequest& request)\n                     {\"label\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The label.\"},\n                 },\n                 RPCResult{\n-                    RPCResult::Type::OBJ_DYN, \"\", \"json object with addresses as keys\",\n+                    RPCResult::Type::OBJ_DYN, \"\", \"with addresses as keys\",\n                     {\n-                        {RPCResult::Type::OBJ, \"address\", \"json object with information about address\",\n+                        {RPCResult::Type::OBJ, \"address\", \"with information about address\",\n                         {\n                             {RPCResult::Type::STR, \"purpose\", \"Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\"},\n                         }},\n@@ -4168,7 +4168,7 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n                 \"\\nCreates and funds a transaction in the Partially Signed Transaction format. Inputs will be added if supplied inputs are not enough\\n\"\n                 \"Implements the Creator and Updater roles.\\n\",\n                 {\n-                    {\"inputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"A json array of json objects\",\n+                    {\"inputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"of json objects\",\n                         {\n                             {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n                                 {\n@@ -4179,7 +4179,7 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n                             },\n                         },\n                         },\n-                    {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+                    {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n                             \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n                             \"For compatibility reasons, a dictionary, which holds the key-value pairs directly, is also\\n\"\n                             \"                             accepted as second parameter.\",\n@@ -4205,7 +4205,7 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n                             {\"includeWatching\", RPCArg::Type::BOOL, /* default */ \"true for watch-only wallets, otherwise false\", \"Also select inputs which are watch only\"},\n                             {\"lockUnspents\", RPCArg::Type::BOOL, /* default */ \"false\", \"Lock selected unspent outputs\"},\n                             {\"feeRate\", RPCArg::Type::AMOUNT, /* default */ \"not set: makes wallet determine the fee\", \"Set a specific fee rate in \" + CURRENCY_UNIT + \"/kB\"},\n-                            {\"subtractFeeFromOutputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"A json array of integers.\\n\"\n+                            {\"subtractFeeFromOutputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"of integers.\\n\"\n                             \"                              The fee will be equally deducted from the amount of each specified output.\\n\"\n                             \"                              Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n                             \"                              If no outputs are specified here, the sender pays the fee.\","
      }
    ]
  }
]