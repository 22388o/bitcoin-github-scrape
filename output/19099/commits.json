[
  {
    "sha": "b266b3e0bf29d0f3d5deaeec62d57c5025b35525",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMjY2YjNlMGJmMjlkMGYzZDVkZWFlZWM2MmQ1N2M1MDI1YjM1NTI1",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-05-29T04:07:18Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-08-27T18:33:00Z"
      },
      "message": "refactor: Create interfaces earlier during initialization\n\nAdd AppInitInterfaces function so wallet chain and chain client interfaces are\ncreated earlier during initialization. This is needed in the next commit to\nallow the gui splash screen to be able to register for wallet events through a\ndedicated WalletClient interface instead managing wallets indirectly through\nthe Node interface. This only works if the wallet client interface is created\nbefore the splash screen needs to use it.",
      "tree": {
        "sha": "17843e21ddaedc1fbb82b86056b1fcbf8279bcef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/17843e21ddaedc1fbb82b86056b1fcbf8279bcef"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b266b3e0bf29d0f3d5deaeec62d57c5025b35525",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b266b3e0bf29d0f3d5deaeec62d57c5025b35525",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b266b3e0bf29d0f3d5deaeec62d57c5025b35525",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b266b3e0bf29d0f3d5deaeec62d57c5025b35525/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "15886b08aa5f05194633eba063d7412d0e4fd036",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/15886b08aa5f05194633eba063d7412d0e4fd036",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/15886b08aa5f05194633eba063d7412d0e4fd036"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 17,
      "deletions": 10
    },
    "files": [
      {
        "sha": "02074f820aa5bd2deb69bfb51e24a49b255ab64c",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b266b3e0bf29d0f3d5deaeec62d57c5025b35525/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b266b3e0bf29d0f3d5deaeec62d57c5025b35525/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=b266b3e0bf29d0f3d5deaeec62d57c5025b35525",
        "patch": "@@ -44,7 +44,6 @@ static void WaitForShutdown(NodeContext& node)\n static bool AppInit(int argc, char* argv[])\n {\n     NodeContext node;\n-    node.chain = interfaces::MakeChain(node);\n \n     bool fRet = false;\n \n@@ -144,7 +143,7 @@ static bool AppInit(int argc, char* argv[])\n             // If locking the data directory failed, exit immediately\n             return false;\n         }\n-        fRet = AppInitMain(context, node);\n+        fRet = AppInitInterfaces(node) && AppInitMain(context, node);\n     }\n     catch (const std::exception& e) {\n         PrintExceptionContinue(&e, \"AppInit()\");"
      },
      {
        "sha": "4fc2c6211ace0fc51756f5dbde243f1c61b4e4b7",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 6,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b266b3e0bf29d0f3d5deaeec62d57c5025b35525/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b266b3e0bf29d0f3d5deaeec62d57c5025b35525/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=b266b3e0bf29d0f3d5deaeec62d57c5025b35525",
        "patch": "@@ -1229,6 +1229,17 @@ bool AppInitLockDataDirectory()\n     return true;\n }\n \n+bool AppInitInterfaces(NodeContext& node)\n+{\n+    node.chain = interfaces::MakeChain(node);\n+    // Create client interfaces for wallets that are supposed to be loaded\n+    // according to -wallet and -disablewallet options. This only constructs\n+    // the interfaces, it doesn't load wallet data. Wallets actually get loaded\n+    // when load() and start() interface methods are called below.\n+    g_wallet_init_interface.Construct(node);\n+    return true;\n+}\n+\n bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n {\n     const ArgsManager& args = *Assert(node.args);\n@@ -1318,12 +1329,6 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n \n     GetMainSignals().RegisterBackgroundSignalScheduler(*node.scheduler);\n \n-    // Create client interfaces for wallets that are supposed to be loaded\n-    // according to -wallet and -disablewallet options. This only constructs\n-    // the interfaces, it doesn't load wallet data. Wallets actually get loaded\n-    // when load() and start() interface methods are called below.\n-    g_wallet_init_interface.Construct(node);\n-\n     /* Register RPC commands regardless of -server setting so they will be\n      * available in the GUI RPC console even if external calls are disabled.\n      */"
      },
      {
        "sha": "679e875da1e0586661b4cc4d72e7f9458f494f46",
        "filename": "src/init.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b266b3e0bf29d0f3d5deaeec62d57c5025b35525/src/init.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b266b3e0bf29d0f3d5deaeec62d57c5025b35525/src/init.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.h?ref=b266b3e0bf29d0f3d5deaeec62d57c5025b35525",
        "patch": "@@ -52,6 +52,10 @@ bool AppInitSanityChecks();\n  * @pre Parameters should be parsed and config file should be read, AppInitSanityChecks should have been called.\n  */\n bool AppInitLockDataDirectory();\n+/**\n+ * Initialize node and wallet interface pointers. Has no prerequisites or side effects besides allocating memory.\n+ */\n+bool AppInitInterfaces(NodeContext& node);\n /**\n  * Bitcoin core main initialization.\n  * @note This should only be done after daemonization. Call Shutdown() if this function fails."
      },
      {
        "sha": "73171686eb5e4a2ede2b92fa93804e3a60cb9648",
        "filename": "src/interfaces/node.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b266b3e0bf29d0f3d5deaeec62d57c5025b35525/src/interfaces/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b266b3e0bf29d0f3d5deaeec62d57c5025b35525/src/interfaces/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.cpp?ref=b266b3e0bf29d0f3d5deaeec62d57c5025b35525",
        "patch": "@@ -64,11 +64,10 @@ class NodeImpl : public Node\n     bool baseInitialize() override\n     {\n         return AppInitBasicSetup(gArgs) && AppInitParameterInteraction(gArgs) && AppInitSanityChecks() &&\n-               AppInitLockDataDirectory();\n+               AppInitLockDataDirectory() && AppInitInterfaces(*m_context);\n     }\n     bool appInitMain(interfaces::BlockAndHeaderTipInfo* tip_info) override\n     {\n-        m_context->chain = MakeChain(*m_context);\n         return AppInitMain(m_context_ref, *m_context, tip_info);\n     }\n     void appShutdown() override"
      }
    ]
  },
  {
    "sha": "e4f435047121886edb6e6a6c4e4998e44ed2e36a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNGY0MzUwNDcxMjE4ODZlZGI2ZTZhNmM0ZTQ5OThlNDRlZDJlMzZh",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-05-28T13:48:30Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-08-27T18:33:00Z"
      },
      "message": "refactor: Move wallet methods out of chain.h and node.h\n\nAdd WalletClient interface so node interface is cleaner and don't need\nwallet-specific methods.\n\nThe new NodeContext::wallet_client pointer will also be needed to eliminate\nglobal wallet variables like ::vpwallets, because createWallet(), loadWallet(),\ngetWallets(), etc methods called by the GUI need a way to get a reference to\nthe list of open wallets if it is no longer a global variable.\n\nAlso tweaks splash screen registration for load wallet events to be delayed\nuntil after wallet client is created.",
      "tree": {
        "sha": "f61715cecd2998ef2f841946b3637645813d606d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f61715cecd2998ef2f841946b3637645813d606d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e4f435047121886edb6e6a6c4e4998e44ed2e36a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4f435047121886edb6e6a6c4e4998e44ed2e36a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e4f435047121886edb6e6a6c4e4998e44ed2e36a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4f435047121886edb6e6a6c4e4998e44ed2e36a/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b266b3e0bf29d0f3d5deaeec62d57c5025b35525",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b266b3e0bf29d0f3d5deaeec62d57c5025b35525",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b266b3e0bf29d0f3d5deaeec62d57c5025b35525"
      }
    ],
    "stats": {
      "total": 250,
      "additions": 111,
      "deletions": 139
    },
    "files": [
      {
        "sha": "e54c2daaeb44bde93601e291adcf6c0b89ed82b9",
        "filename": "src/dummywallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 34,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4f435047121886edb6e6a6c4e4998e44ed2e36a/src/dummywallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4f435047121886edb6e6a6c4e4998e44ed2e36a/src/dummywallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dummywallet.cpp?ref=e4f435047121886edb6e6a6c4e4998e44ed2e36a",
        "patch": "@@ -4,11 +4,8 @@\n \n #include <util/system.h>\n #include <walletinitinterface.h>\n-#include <support/allocators/secure.h>\n \n class CWallet;\n-enum class WalletCreationStatus;\n-struct bilingual_str;\n \n namespace interfaces {\n class Chain;\n@@ -59,37 +56,6 @@ void DummyWalletInit::AddWalletOptions(ArgsManager& argsman) const\n \n const WalletInitInterface& g_wallet_init_interface = DummyWalletInit();\n \n-fs::path GetWalletDir()\n-{\n-    throw std::logic_error(\"Wallet function called in non-wallet build.\");\n-}\n-\n-std::vector<fs::path> ListWalletDir()\n-{\n-    throw std::logic_error(\"Wallet function called in non-wallet build.\");\n-}\n-\n-std::vector<std::shared_ptr<CWallet>> GetWallets()\n-{\n-    throw std::logic_error(\"Wallet function called in non-wallet build.\");\n-}\n-\n-std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const std::string& name, bilingual_str& error, std::vector<bilingual_str>& warnings)\n-{\n-    throw std::logic_error(\"Wallet function called in non-wallet build.\");\n-}\n-\n-WalletCreationStatus CreateWallet(interfaces::Chain& chain, const SecureString& passphrase, uint64_t wallet_creation_flags, const std::string& name, bilingual_str& error, std::vector<bilingual_str>& warnings, std::shared_ptr<CWallet>& result)\n-{\n-    throw std::logic_error(\"Wallet function called in non-wallet build.\");\n-}\n-\n-using LoadWalletFn = std::function<void(std::unique_ptr<interfaces::Wallet> wallet)>;\n-std::unique_ptr<interfaces::Handler> HandleLoadWallet(LoadWalletFn load_wallet)\n-{\n-    throw std::logic_error(\"Wallet function called in non-wallet build.\");\n-}\n-\n namespace interfaces {\n \n std::unique_ptr<Wallet> MakeWallet(const std::shared_ptr<CWallet>& wallet)"
      },
      {
        "sha": "6e50ccb27a38b2ae69a543dfa95310e561aa29a4",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 0,
        "deletions": 13,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4f435047121886edb6e6a6c4e4998e44ed2e36a/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4f435047121886edb6e6a6c4e4998e44ed2e36a/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=e4f435047121886edb6e6a6c4e4998e44ed2e36a",
        "patch": "@@ -314,24 +314,11 @@ class ChainClient\n \n     //! Set mock time.\n     virtual void setMockTime(int64_t time) = 0;\n-\n-    //! Return interfaces for accessing wallets (if any).\n-    virtual std::vector<std::unique_ptr<Wallet>> getWallets() = 0;\n };\n \n //! Return implementation of Chain interface.\n std::unique_ptr<Chain> MakeChain(NodeContext& node);\n \n-//! Return implementation of ChainClient interface for a wallet client. This\n-//! function will be undefined in builds where ENABLE_WALLET is false.\n-//!\n-//! Currently, wallets are the only chain clients. But in the future, other\n-//! types of chain clients could be added, such as tools for monitoring,\n-//! analysis, or fee estimation. These clients need to expose their own\n-//! MakeXXXClient functions returning their implementations of the ChainClient\n-//! interface.\n-std::unique_ptr<ChainClient> MakeWalletClient(Chain& chain, ArgsManager& args, std::vector<std::string> wallet_filenames);\n-\n } // namespace interfaces\n \n #endif // BITCOIN_INTERFACES_CHAIN_H"
      },
      {
        "sha": "2c5f8627e616023486e4e68c946171fc170e92b3",
        "filename": "src/interfaces/node.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 42,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4f435047121886edb6e6a6c4e4998e44ed2e36a/src/interfaces/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4f435047121886edb6e6a6c4e4998e44ed2e36a/src/interfaces/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.cpp?ref=e4f435047121886edb6e6a6c4e4998e44ed2e36a",
        "patch": "@@ -27,6 +27,7 @@\n #include <support/allocators/secure.h>\n #include <sync.h>\n #include <txmempool.h>\n+#include <util/check.h>\n #include <util/ref.h>\n #include <util/system.h>\n #include <util/translation.h>\n@@ -41,16 +42,7 @@\n \n #include <boost/signals2/signal.hpp>\n \n-class CWallet;\n-fs::path GetWalletDir();\n-std::vector<fs::path> ListWalletDir();\n-std::vector<std::shared_ptr<CWallet>> GetWallets();\n-std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const std::string& name, bilingual_str& error, std::vector<bilingual_str>& warnings);\n-WalletCreationStatus CreateWallet(interfaces::Chain& chain, const SecureString& passphrase, uint64_t wallet_creation_flags, const std::string& name, bilingual_str& error, std::vector<bilingual_str>& warnings, std::shared_ptr<CWallet>& result);\n-std::unique_ptr<interfaces::Handler> HandleLoadWallet(interfaces::Node::LoadWalletFn load_wallet);\n-\n namespace interfaces {\n-\n namespace {\n \n class NodeImpl : public Node\n@@ -239,36 +231,9 @@ class NodeImpl : public Node\n         LOCK(::cs_main);\n         return ::ChainstateActive().CoinsTip().GetCoin(output, coin);\n     }\n-    std::string getWalletDir() override\n-    {\n-        return GetWalletDir().string();\n-    }\n-    std::vector<std::string> listWalletDir() override\n-    {\n-        std::vector<std::string> paths;\n-        for (auto& path : ListWalletDir()) {\n-            paths.push_back(path.string());\n-        }\n-        return paths;\n-    }\n-    std::vector<std::unique_ptr<Wallet>> getWallets() override\n+    WalletClient& walletClient() override\n     {\n-        std::vector<std::unique_ptr<Wallet>> wallets;\n-        for (auto& client : m_context->chain_clients) {\n-            auto client_wallets = client->getWallets();\n-            std::move(client_wallets.begin(), client_wallets.end(), std::back_inserter(wallets));\n-        }\n-        return wallets;\n-    }\n-    std::unique_ptr<Wallet> loadWallet(const std::string& name, bilingual_str& error, std::vector<bilingual_str>& warnings) override\n-    {\n-        return MakeWallet(LoadWallet(*m_context->chain, name, error, warnings));\n-    }\n-    std::unique_ptr<Wallet> createWallet(const SecureString& passphrase, uint64_t wallet_creation_flags, const std::string& name, bilingual_str& error, std::vector<bilingual_str>& warnings, WalletCreationStatus& status) override\n-    {\n-        std::shared_ptr<CWallet> wallet;\n-        status = CreateWallet(*m_context->chain, passphrase, wallet_creation_flags, name, error, warnings, wallet);\n-        return MakeWallet(wallet);\n+        return *Assert(m_context->wallet_client);\n     }\n     std::unique_ptr<Handler> handleInitMessage(InitMessageFn fn) override\n     {\n@@ -286,10 +251,6 @@ class NodeImpl : public Node\n     {\n         return MakeHandler(::uiInterface.ShowProgress_connect(fn));\n     }\n-    std::unique_ptr<Handler> handleLoadWallet(LoadWalletFn fn) override\n-    {\n-        return HandleLoadWallet(std::move(fn));\n-    }\n     std::unique_ptr<Handler> handleNotifyNumConnectionsChanged(NotifyNumConnectionsChangedFn fn) override\n     {\n         return MakeHandler(::uiInterface.NotifyNumConnectionsChanged_connect(fn));"
      },
      {
        "sha": "5079be038eb5f78075b9c5c3d40e66700d36f5fd",
        "filename": "src/interfaces/node.h",
        "status": "modified",
        "additions": 3,
        "deletions": 22,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4f435047121886edb6e6a6c4e4998e44ed2e36a/src/interfaces/node.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4f435047121886edb6e6a6c4e4998e44ed2e36a/src/interfaces/node.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.h?ref=e4f435047121886edb6e6a6c4e4998e44ed2e36a",
        "patch": "@@ -29,14 +29,13 @@ class RPCTimerInterface;\n class UniValue;\n class proxyType;\n enum class SynchronizationState;\n-enum class WalletCreationStatus;\n struct CNodeStateStats;\n struct NodeContext;\n struct bilingual_str;\n \n namespace interfaces {\n class Handler;\n-class Wallet;\n+class WalletClient;\n struct BlockTip;\n \n //! Block and header tip information\n@@ -173,22 +172,8 @@ class Node\n     //! Get unspent outputs associated with a transaction.\n     virtual bool getUnspentOutput(const COutPoint& output, Coin& coin) = 0;\n \n-    //! Return default wallet directory.\n-    virtual std::string getWalletDir() = 0;\n-\n-    //! Return available wallets in wallet directory.\n-    virtual std::vector<std::string> listWalletDir() = 0;\n-\n-    //! Return interfaces for accessing wallets (if any).\n-    virtual std::vector<std::unique_ptr<Wallet>> getWallets() = 0;\n-\n-    //! Attempts to load a wallet from file or directory.\n-    //! The loaded wallet is also notified to handlers previously registered\n-    //! with handleLoadWallet.\n-    virtual std::unique_ptr<Wallet> loadWallet(const std::string& name, bilingual_str& error, std::vector<bilingual_str>& warnings) = 0;\n-\n-    //! Create a wallet from file\n-    virtual std::unique_ptr<Wallet> createWallet(const SecureString& passphrase, uint64_t wallet_creation_flags, const std::string& name, bilingual_str& error, std::vector<bilingual_str>& warnings, WalletCreationStatus& status) = 0;\n+    //! Get wallet client.\n+    virtual WalletClient& walletClient() = 0;\n \n     //! Register handler for init messages.\n     using InitMessageFn = std::function<void(const std::string& message)>;\n@@ -210,10 +195,6 @@ class Node\n     using ShowProgressFn = std::function<void(const std::string& title, int progress, bool resume_possible)>;\n     virtual std::unique_ptr<Handler> handleShowProgress(ShowProgressFn fn) = 0;\n \n-    //! Register handler for load wallet messages.\n-    using LoadWalletFn = std::function<void(std::unique_ptr<Wallet> wallet)>;\n-    virtual std::unique_ptr<Handler> handleLoadWallet(LoadWalletFn fn) = 0;\n-\n     //! Register handler for number of connections changed messages.\n     using NotifyNumConnectionsChangedFn = std::function<void(int new_num_connections)>;\n     virtual std::unique_ptr<Handler> handleNotifyNumConnectionsChanged(NotifyNumConnectionsChangedFn fn) = 0;"
      },
      {
        "sha": "63c109658ea3d78e5f6138ee905c7f6954ca8a6f",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 3,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4f435047121886edb6e6a6c4e4998e44ed2e36a/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4f435047121886edb6e6a6c4e4998e44ed2e36a/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=e4f435047121886edb6e6a6c4e4998e44ed2e36a",
        "patch": "@@ -485,7 +485,7 @@ class WalletImpl : public Wallet\n     std::shared_ptr<CWallet> m_wallet;\n };\n \n-class WalletClientImpl : public ChainClient\n+class WalletClientImpl : public WalletClient\n {\n public:\n     WalletClientImpl(Chain& chain, ArgsManager& args, std::vector<std::string> wallet_filenames)\n@@ -494,6 +494,9 @@ class WalletClientImpl : public ChainClient\n         m_context.chain = &chain;\n         m_context.args = &args;\n     }\n+    ~WalletClientImpl() override { UnloadWallets(); }\n+\n+    //! ChainClient methods\n     void registerRpcs() override\n     {\n         for (const CRPCCommand& command : GetWalletRPCCommands()) {\n@@ -509,6 +512,30 @@ class WalletClientImpl : public ChainClient\n     void flush() override { return FlushWallets(); }\n     void stop() override { return StopWallets(); }\n     void setMockTime(int64_t time) override { return SetMockTime(time); }\n+\n+    //! WalletClient methods\n+    std::unique_ptr<Wallet> createWallet(const std::string& name, const SecureString& passphrase, uint64_t wallet_creation_flags, WalletCreationStatus& status, bilingual_str& error, std::vector<bilingual_str>& warnings) override\n+    {\n+        std::shared_ptr<CWallet> wallet;\n+        status = CreateWallet(*m_context.chain, passphrase, wallet_creation_flags, name, error, warnings, wallet);\n+        return MakeWallet(std::move(wallet));\n+    }\n+    std::unique_ptr<Wallet> loadWallet(const std::string& name, bilingual_str& error, std::vector<bilingual_str>& warnings) override\n+    {\n+        return MakeWallet(LoadWallet(*m_context.chain, WalletLocation(name), error, warnings));\n+    }\n+    std::string getWalletDir() override\n+    {\n+        return GetWalletDir().string();\n+    }\n+    std::vector<std::string> listWalletDir() override\n+    {\n+        std::vector<std::string> paths;\n+        for (auto& path : ListWalletDir()) {\n+            paths.push_back(path.string());\n+        }\n+        return paths;\n+    }\n     std::vector<std::unique_ptr<Wallet>> getWallets() override\n     {\n         std::vector<std::unique_ptr<Wallet>> wallets;\n@@ -517,7 +544,10 @@ class WalletClientImpl : public ChainClient\n         }\n         return wallets;\n     }\n-    ~WalletClientImpl() override { UnloadWallets(); }\n+    std::unique_ptr<Handler> handleLoadWallet(LoadWalletFn fn) override\n+    {\n+        return HandleLoadWallet(std::move(fn));\n+    }\n \n     WalletContext m_context;\n     const std::vector<std::string> m_wallet_filenames;\n@@ -529,7 +559,7 @@ class WalletClientImpl : public ChainClient\n \n std::unique_ptr<Wallet> MakeWallet(const std::shared_ptr<CWallet>& wallet) { return wallet ? MakeUnique<WalletImpl>(wallet) : nullptr; }\n \n-std::unique_ptr<ChainClient> MakeWalletClient(Chain& chain, ArgsManager& args, std::vector<std::string> wallet_filenames)\n+std::unique_ptr<WalletClient> MakeWalletClient(Chain& chain, ArgsManager& args, std::vector<std::string> wallet_filenames)\n {\n     return MakeUnique<WalletClientImpl>(chain, args, std::move(wallet_filenames));\n }"
      },
      {
        "sha": "186f5d81a5da7eceb1196a6dafea6e90a3aa6c41",
        "filename": "src/interfaces/wallet.h",
        "status": "modified",
        "additions": 35,
        "deletions": 0,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4f435047121886edb6e6a6c4e4998e44ed2e36a/src/interfaces/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4f435047121886edb6e6a6c4e4998e44ed2e36a/src/interfaces/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.h?ref=e4f435047121886edb6e6a6c4e4998e44ed2e36a",
        "patch": "@@ -6,6 +6,7 @@\n #define BITCOIN_INTERFACES_WALLET_H\n \n #include <amount.h>                    // For CAmount\n+#include <interfaces/chain.h>          // For ChainClient\n #include <pubkey.h>                    // For CKeyID and CScriptID (definitions needed in CTxDestination instantiation)\n #include <script/standard.h>           // For CTxDestination\n #include <support/allocators/secure.h> // For SecureString\n@@ -28,9 +29,11 @@ class CWallet;\n enum class FeeReason;\n enum class OutputType;\n enum class TransactionError;\n+enum class WalletCreationStatus;\n enum isminetype : unsigned int;\n struct CRecipient;\n struct PartiallySignedTransaction;\n+struct WalletContext;\n struct bilingual_str;\n typedef uint8_t isminefilter;\n \n@@ -301,6 +304,34 @@ class Wallet\n     virtual CWallet* wallet() { return nullptr; }\n };\n \n+//! Wallet chain client that in addition to having chain client methods for\n+//! starting up, shutting down, and registering RPCs, also has additional\n+//! methods (called by the GUI) to load and create wallets.\n+class WalletClient : public ChainClient\n+{\n+public:\n+    //! Create new wallet.\n+    virtual std::unique_ptr<Wallet> createWallet(const std::string& name, const SecureString& passphrase, uint64_t wallet_creation_flags, WalletCreationStatus& status, bilingual_str& error, std::vector<bilingual_str>& warnings) = 0;\n+\n+   //! Load existing wallet.\n+   virtual std::unique_ptr<Wallet> loadWallet(const std::string& name, bilingual_str& error, std::vector<bilingual_str>& warnings) = 0;\n+\n+   //! Return default wallet directory.\n+   virtual std::string getWalletDir() = 0;\n+\n+   //! Return available wallets in wallet directory.\n+   virtual std::vector<std::string> listWalletDir() = 0;\n+\n+   //! Return interfaces for accessing wallets (if any).\n+   virtual std::vector<std::unique_ptr<Wallet>> getWallets() = 0;\n+\n+   //! Register handler for load wallet messages. This callback is triggered by\n+   //! createWallet and loadWallet above, and also triggered when wallets are\n+   //! loaded at startup or by RPC.\n+   using LoadWalletFn = std::function<void(std::unique_ptr<Wallet> wallet)>;\n+   virtual std::unique_ptr<Handler> handleLoadWallet(LoadWalletFn fn) = 0;\n+};\n+\n //! Information about one wallet address.\n struct WalletAddress\n {\n@@ -379,6 +410,10 @@ struct WalletTxOut\n //! dummywallet.cpp and throws if the wallet component is not compiled.\n std::unique_ptr<Wallet> MakeWallet(const std::shared_ptr<CWallet>& wallet);\n \n+//! Return implementation of ChainClient interface for a wallet client. This\n+//! function will be undefined in builds where ENABLE_WALLET is false.\n+std::unique_ptr<WalletClient> MakeWalletClient(Chain& chain, ArgsManager& args, std::vector<std::string> wallet_filenames);\n+\n } // namespace interfaces\n \n #endif // BITCOIN_INTERFACES_WALLET_H"
      },
      {
        "sha": "793c9dfc3435b204db655606a7d4964e232cb7b8",
        "filename": "src/node/context.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4f435047121886edb6e6a6c4e4998e44ed2e36a/src/node/context.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4f435047121886edb6e6a6c4e4998e44ed2e36a/src/node/context.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/context.h?ref=e4f435047121886edb6e6a6c4e4998e44ed2e36a",
        "patch": "@@ -20,6 +20,7 @@ class PeerLogicValidation;\n namespace interfaces {\n class Chain;\n class ChainClient;\n+class WalletClient;\n } // namespace interfaces\n \n //! NodeContext struct containing references to chain state and connection\n@@ -40,7 +41,11 @@ struct NodeContext {\n     std::unique_ptr<BanMan> banman;\n     ArgsManager* args{nullptr}; // Currently a raw pointer because the memory is not managed by this struct\n     std::unique_ptr<interfaces::Chain> chain;\n+    //! List of all chain clients (wallet processes or other client) connected to node.\n     std::vector<std::unique_ptr<interfaces::ChainClient>> chain_clients;\n+    //! Reference to chain client that should used to load or create wallets\n+    //! opened by the gui.\n+    interfaces::WalletClient* wallet_client{nullptr};\n     std::unique_ptr<CScheduler> scheduler;\n     std::function<void()> rpc_interruption_point = [] {};\n "
      },
      {
        "sha": "c1fb8d2249f4271c8dc9be49a2442e7cf3ca5fa2",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4f435047121886edb6e6a6c4e4998e44ed2e36a/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4f435047121886edb6e6a6c4e4998e44ed2e36a/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=e4f435047121886edb6e6a6c4e4998e44ed2e36a",
        "patch": "@@ -266,6 +266,7 @@ void BitcoinApplication::createSplashScreen(const NetworkStyle *networkStyle)\n     // We don't hold a direct pointer to the splash screen after creation, but the splash\n     // screen will take care of deleting itself when finish() happens.\n     m_splash->show();\n+    connect(this, &BitcoinApplication::requestedInitialize, m_splash, &SplashScreen::handleLoadWallet);\n     connect(this, &BitcoinApplication::splashFinished, m_splash, &SplashScreen::finish);\n     connect(this, &BitcoinApplication::requestedShutdown, m_splash, &QWidget::close);\n }"
      },
      {
        "sha": "aa58c0b10e78a296b2135911d1863b0007c27065",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4f435047121886edb6e6a6c4e4998e44ed2e36a/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4f435047121886edb6e6a6c4e4998e44ed2e36a/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=e4f435047121886edb6e6a6c4e4998e44ed2e36a",
        "patch": "@@ -1189,7 +1189,7 @@ void BitcoinGUI::incomingTransaction(const QString& date, int unit, const CAmoun\n     // On new transaction, make an info balloon\n     QString msg = tr(\"Date: %1\\n\").arg(date) +\n                   tr(\"Amount: %1\\n\").arg(BitcoinUnits::formatWithUnit(unit, amount, true));\n-    if (m_node.getWallets().size() > 1 && !walletName.isEmpty()) {\n+    if (m_node.walletClient().getWallets().size() > 1 && !walletName.isEmpty()) {\n         msg += tr(\"Wallet: %1\\n\").arg(walletName);\n     }\n     msg += tr(\"Type: %1\\n\").arg(type);"
      },
      {
        "sha": "d9861b7953711cb4e172c698ab448b41c6833a73",
        "filename": "src/qt/splashscreen.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4f435047121886edb6e6a6c4e4998e44ed2e36a/src/qt/splashscreen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4f435047121886edb6e6a6c4e4998e44ed2e36a/src/qt/splashscreen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.cpp?ref=e4f435047121886edb6e6a6c4e4998e44ed2e36a",
        "patch": "@@ -198,8 +198,12 @@ void SplashScreen::subscribeToCoreSignals()\n     // Connect signals to client\n     m_handler_init_message = m_node->handleInitMessage(std::bind(InitMessage, this, std::placeholders::_1));\n     m_handler_show_progress = m_node->handleShowProgress(std::bind(ShowProgress, this, std::placeholders::_1, std::placeholders::_2, std::placeholders::_3));\n+}\n+\n+void SplashScreen::handleLoadWallet()\n+{\n #ifdef ENABLE_WALLET\n-    m_handler_load_wallet = m_node->handleLoadWallet([this](std::unique_ptr<interfaces::Wallet> wallet) { ConnectWallet(std::move(wallet)); });\n+    m_handler_load_wallet = m_node->walletClient().handleLoadWallet([this](std::unique_ptr<interfaces::Wallet> wallet) { ConnectWallet(std::move(wallet)); });\n #endif\n }\n "
      },
      {
        "sha": "d4e3f6ece1188e8a8993aed2de31acab456ff7b5",
        "filename": "src/qt/splashscreen.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4f435047121886edb6e6a6c4e4998e44ed2e36a/src/qt/splashscreen.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4f435047121886edb6e6a6c4e4998e44ed2e36a/src/qt/splashscreen.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.h?ref=e4f435047121886edb6e6a6c4e4998e44ed2e36a",
        "patch": "@@ -43,6 +43,9 @@ public Q_SLOTS:\n     /** Show message and progress */\n     void showMessage(const QString &message, int alignment, const QColor &color);\n \n+    /** Handle wallet load notifications. */\n+    void handleLoadWallet();\n+\n protected:\n     bool eventFilter(QObject * obj, QEvent * ev) override;\n "
      },
      {
        "sha": "828f84ffccdd88263f9d11cb421a38d853875437",
        "filename": "src/qt/walletcontroller.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4f435047121886edb6e6a6c4e4998e44ed2e36a/src/qt/walletcontroller.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4f435047121886edb6e6a6c4e4998e44ed2e36a/src/qt/walletcontroller.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletcontroller.cpp?ref=e4f435047121886edb6e6a6c4e4998e44ed2e36a",
        "patch": "@@ -35,11 +35,11 @@ WalletController::WalletController(ClientModel& client_model, const PlatformStyl\n     , m_platform_style(platform_style)\n     , m_options_model(client_model.getOptionsModel())\n {\n-    m_handler_load_wallet = m_node.handleLoadWallet([this](std::unique_ptr<interfaces::Wallet> wallet) {\n+    m_handler_load_wallet = m_node.walletClient().handleLoadWallet([this](std::unique_ptr<interfaces::Wallet> wallet) {\n         getOrCreateWallet(std::move(wallet));\n     });\n \n-    for (std::unique_ptr<interfaces::Wallet>& wallet : m_node.getWallets()) {\n+    for (std::unique_ptr<interfaces::Wallet>& wallet : m_node.walletClient().getWallets()) {\n         getOrCreateWallet(std::move(wallet));\n     }\n \n@@ -66,7 +66,7 @@ std::map<std::string, bool> WalletController::listWalletDir() const\n {\n     QMutexLocker locker(&m_mutex);\n     std::map<std::string, bool> wallets;\n-    for (const std::string& name : m_node.listWalletDir()) {\n+    for (const std::string& name : m_node.walletClient().listWalletDir()) {\n         wallets[name] = false;\n     }\n     for (WalletModel* wallet_model : m_wallets) {\n@@ -250,7 +250,7 @@ void CreateWalletActivity::createWallet()\n \n     QTimer::singleShot(500, worker(), [this, name, flags] {\n         WalletCreationStatus status;\n-        std::unique_ptr<interfaces::Wallet> wallet = node().createWallet(m_passphrase, flags, name, m_error_message, m_warning_message, status);\n+        std::unique_ptr<interfaces::Wallet> wallet = node().walletClient().createWallet(name, m_passphrase, flags, status, m_error_message, m_warning_message);\n \n         if (status == WalletCreationStatus::SUCCESS) m_wallet_model = m_wallet_controller->getOrCreateWallet(std::move(wallet));\n \n@@ -321,7 +321,7 @@ void OpenWalletActivity::open(const std::string& path)\n     showProgressDialog(tr(\"Opening Wallet <b>%1</b>...\").arg(name.toHtmlEscaped()));\n \n     QTimer::singleShot(0, worker(), [this, path] {\n-        std::unique_ptr<interfaces::Wallet> wallet = node().loadWallet(path, m_error_message, m_warning_message);\n+        std::unique_ptr<interfaces::Wallet> wallet = node().walletClient().loadWallet(path, m_error_message, m_warning_message);\n \n         if (wallet) m_wallet_model = m_wallet_controller->getOrCreateWallet(std::move(wallet));\n "
      },
      {
        "sha": "0556895948d725ba6c711b7272ec0381333f0350",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4f435047121886edb6e6a6c4e4998e44ed2e36a/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4f435047121886edb6e6a6c4e4998e44ed2e36a/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=e4f435047121886edb6e6a6c4e4998e44ed2e36a",
        "patch": "@@ -581,7 +581,7 @@ QString WalletModel::getDisplayName() const\n \n bool WalletModel::isMultiwallet()\n {\n-    return m_node.getWallets().size() > 1;\n+    return m_node.walletClient().getWallets().size() > 1;\n }\n \n void WalletModel::refresh(bool pk_hash_only)"
      },
      {
        "sha": "1456e1595e080148901f447bc8c0828db2a01cf2",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4f435047121886edb6e6a6c4e4998e44ed2e36a/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4f435047121886edb6e6a6c4e4998e44ed2e36a/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=e4f435047121886edb6e6a6c4e4998e44ed2e36a",
        "patch": "@@ -5,6 +5,7 @@\n \n #include <init.h>\n #include <interfaces/chain.h>\n+#include <interfaces/wallet.h>\n #include <net.h>\n #include <node/context.h>\n #include <node/ui_interface.h>\n@@ -129,5 +130,7 @@ void WalletInit::Construct(NodeContext& node) const\n             settings.rw_settings[\"wallet\"] = wallets;\n         });\n     }\n-    node.chain_clients.emplace_back(interfaces::MakeWalletClient(*node.chain, args, args.GetArgs(\"-wallet\")));\n+    auto wallet_client = interfaces::MakeWalletClient(*node.chain, args, args.GetArgs(\"-wallet\"));\n+    node.wallet_client = wallet_client.get();\n+    node.chain_clients.emplace_back(std::move(wallet_client));\n }"
      },
      {
        "sha": "c23dea1338bbcb6f228fbf385c8b2746cdde1d9a",
        "filename": "src/wallet/test/init_test_fixture.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4f435047121886edb6e6a6c4e4998e44ed2e36a/src/wallet/test/init_test_fixture.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4f435047121886edb6e6a6c4e4998e44ed2e36a/src/wallet/test/init_test_fixture.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/init_test_fixture.cpp?ref=e4f435047121886edb6e6a6c4e4998e44ed2e36a",
        "patch": "@@ -10,7 +10,7 @@\n \n InitWalletDirTestingSetup::InitWalletDirTestingSetup(const std::string& chainName) : BasicTestingSetup(chainName)\n {\n-    m_chain_client = MakeWalletClient(*m_chain, *Assert(m_node.args), {});\n+    m_wallet_client = MakeWalletClient(*m_chain, *Assert(m_node.args), {});\n \n     std::string sep;\n     sep += fs::path::preferred_separator;"
      },
      {
        "sha": "f5bade77dfee642ad92000535faaf51b11a8cf5c",
        "filename": "src/wallet/test/init_test_fixture.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4f435047121886edb6e6a6c4e4998e44ed2e36a/src/wallet/test/init_test_fixture.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4f435047121886edb6e6a6c4e4998e44ed2e36a/src/wallet/test/init_test_fixture.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/init_test_fixture.h?ref=e4f435047121886edb6e6a6c4e4998e44ed2e36a",
        "patch": "@@ -6,6 +6,7 @@\n #define BITCOIN_WALLET_TEST_INIT_TEST_FIXTURE_H\n \n #include <interfaces/chain.h>\n+#include <interfaces/wallet.h>\n #include <node/context.h>\n #include <test/util/setup_common.h>\n \n@@ -19,7 +20,7 @@ struct InitWalletDirTestingSetup: public BasicTestingSetup {\n     fs::path m_cwd;\n     std::map<std::string, fs::path> m_walletdir_path_cases;\n     std::unique_ptr<interfaces::Chain> m_chain = interfaces::MakeChain(m_node);\n-    std::unique_ptr<interfaces::ChainClient> m_chain_client;\n+    std::unique_ptr<interfaces::WalletClient> m_wallet_client;\n };\n \n #endif // BITCOIN_WALLET_TEST_INIT_TEST_FIXTURE_H"
      },
      {
        "sha": "9b905569fc23b8f6654b5271c9a625e313e43034",
        "filename": "src/wallet/test/init_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4f435047121886edb6e6a6c4e4998e44ed2e36a/src/wallet/test/init_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4f435047121886edb6e6a6c4e4998e44ed2e36a/src/wallet/test/init_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/init_tests.cpp?ref=e4f435047121886edb6e6a6c4e4998e44ed2e36a",
        "patch": "@@ -15,7 +15,7 @@ BOOST_FIXTURE_TEST_SUITE(init_tests, InitWalletDirTestingSetup)\n BOOST_AUTO_TEST_CASE(walletinit_verify_walletdir_default)\n {\n     SetWalletDir(m_walletdir_path_cases[\"default\"]);\n-    bool result = m_chain_client->verify();\n+    bool result = m_wallet_client->verify();\n     BOOST_CHECK(result == true);\n     fs::path walletdir = gArgs.GetArg(\"-walletdir\", \"\");\n     fs::path expected_path = fs::canonical(m_walletdir_path_cases[\"default\"]);\n@@ -25,7 +25,7 @@ BOOST_AUTO_TEST_CASE(walletinit_verify_walletdir_default)\n BOOST_AUTO_TEST_CASE(walletinit_verify_walletdir_custom)\n {\n     SetWalletDir(m_walletdir_path_cases[\"custom\"]);\n-    bool result = m_chain_client->verify();\n+    bool result = m_wallet_client->verify();\n     BOOST_CHECK(result == true);\n     fs::path walletdir = gArgs.GetArg(\"-walletdir\", \"\");\n     fs::path expected_path = fs::canonical(m_walletdir_path_cases[\"custom\"]);\n@@ -37,7 +37,7 @@ BOOST_AUTO_TEST_CASE(walletinit_verify_walletdir_does_not_exist)\n     SetWalletDir(m_walletdir_path_cases[\"nonexistent\"]);\n     {\n         ASSERT_DEBUG_LOG(\"does not exist\");\n-        bool result = m_chain_client->verify();\n+        bool result = m_wallet_client->verify();\n         BOOST_CHECK(result == false);\n     }\n }\n@@ -47,7 +47,7 @@ BOOST_AUTO_TEST_CASE(walletinit_verify_walletdir_is_not_directory)\n     SetWalletDir(m_walletdir_path_cases[\"file\"]);\n     {\n         ASSERT_DEBUG_LOG(\"is not a directory\");\n-        bool result = m_chain_client->verify();\n+        bool result = m_wallet_client->verify();\n         BOOST_CHECK(result == false);\n     }\n }\n@@ -57,15 +57,15 @@ BOOST_AUTO_TEST_CASE(walletinit_verify_walletdir_is_not_relative)\n     SetWalletDir(m_walletdir_path_cases[\"relative\"]);\n     {\n         ASSERT_DEBUG_LOG(\"is a relative path\");\n-        bool result = m_chain_client->verify();\n+        bool result = m_wallet_client->verify();\n         BOOST_CHECK(result == false);\n     }\n }\n \n BOOST_AUTO_TEST_CASE(walletinit_verify_walletdir_no_trailing)\n {\n     SetWalletDir(m_walletdir_path_cases[\"trailing\"]);\n-    bool result = m_chain_client->verify();\n+    bool result = m_wallet_client->verify();\n     BOOST_CHECK(result == true);\n     fs::path walletdir = gArgs.GetArg(\"-walletdir\", \"\");\n     fs::path expected_path = fs::canonical(m_walletdir_path_cases[\"default\"]);\n@@ -75,7 +75,7 @@ BOOST_AUTO_TEST_CASE(walletinit_verify_walletdir_no_trailing)\n BOOST_AUTO_TEST_CASE(walletinit_verify_walletdir_no_trailing2)\n {\n     SetWalletDir(m_walletdir_path_cases[\"trailing2\"]);\n-    bool result = m_chain_client->verify();\n+    bool result = m_wallet_client->verify();\n     BOOST_CHECK(result == true);\n     fs::path walletdir = gArgs.GetArg(\"-walletdir\", \"\");\n     fs::path expected_path = fs::canonical(m_walletdir_path_cases[\"default\"]);"
      },
      {
        "sha": "9241470745e35886c70f138e68c8afeaf3b0f603",
        "filename": "src/wallet/test/wallet_test_fixture.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4f435047121886edb6e6a6c4e4998e44ed2e36a/src/wallet/test/wallet_test_fixture.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4f435047121886edb6e6a6c4e4998e44ed2e36a/src/wallet/test/wallet_test_fixture.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_test_fixture.cpp?ref=e4f435047121886edb6e6a6c4e4998e44ed2e36a",
        "patch": "@@ -11,5 +11,5 @@ WalletTestingSetup::WalletTestingSetup(const std::string& chainName)\n     bool fFirstRun;\n     m_wallet.LoadWallet(fFirstRun);\n     m_chain_notifications_handler = m_chain->handleNotifications({ &m_wallet, [](CWallet*) {} });\n-    m_chain_client->registerRpcs();\n+    m_wallet_client->registerRpcs();\n }"
      },
      {
        "sha": "12ad13b49bc6d67785dfce79643b8f33496d2193",
        "filename": "src/wallet/test/wallet_test_fixture.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4f435047121886edb6e6a6c4e4998e44ed2e36a/src/wallet/test/wallet_test_fixture.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4f435047121886edb6e6a6c4e4998e44ed2e36a/src/wallet/test/wallet_test_fixture.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_test_fixture.h?ref=e4f435047121886edb6e6a6c4e4998e44ed2e36a",
        "patch": "@@ -21,7 +21,7 @@ struct WalletTestingSetup : public TestingSetup {\n     explicit WalletTestingSetup(const std::string& chainName = CBaseChainParams::MAIN);\n \n     std::unique_ptr<interfaces::Chain> m_chain = interfaces::MakeChain(m_node);\n-    std::unique_ptr<interfaces::ChainClient> m_chain_client = interfaces::MakeWalletClient(*m_chain, *Assert(m_node.args), {});\n+    std::unique_ptr<interfaces::WalletClient> m_wallet_client = interfaces::MakeWalletClient(*m_chain, *Assert(m_node.args), {});\n     CWallet m_wallet;\n     std::unique_ptr<interfaces::Handler> m_chain_notifications_handler;\n };"
      },
      {
        "sha": "3a03fa08ed40d879ac9798f12daf29c63955d981",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4f435047121886edb6e6a6c4e4998e44ed2e36a/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4f435047121886edb6e6a6c4e4998e44ed2e36a/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=e4f435047121886edb6e6a6c4e4998e44ed2e36a",
        "patch": "@@ -183,11 +183,6 @@ std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const WalletLocati\n     return wallet;\n }\n \n-std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const std::string& name, bilingual_str& error, std::vector<bilingual_str>& warnings)\n-{\n-    return LoadWallet(chain, WalletLocation(name), error, warnings);\n-}\n-\n WalletCreationStatus CreateWallet(interfaces::Chain& chain, const SecureString& passphrase, uint64_t wallet_creation_flags, const std::string& name, bilingual_str& error, std::vector<bilingual_str>& warnings, std::shared_ptr<CWallet>& result)\n {\n     // Indicate that the wallet is actually supposed to be blank and not just blank to make it encrypted"
      }
    ]
  },
  {
    "sha": "24bf17602c620445f76c3b407937751c8a894d37",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNGJmMTc2MDJjNjIwNDQ1Zjc2YzNiNDA3OTM3NzUxYzhhODk0ZDM3",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-07-10T15:23:47Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-08-27T18:33:00Z"
      },
      "message": "gui refactor: Inline SplashScreen::ConnectWallet\n\nSuggested https://github.com/bitcoin/bitcoin/pull/19099#discussion_r450522201",
      "tree": {
        "sha": "1c7476044d97dacedd1a85725c652068e0b84548",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1c7476044d97dacedd1a85725c652068e0b84548"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/24bf17602c620445f76c3b407937751c8a894d37",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/24bf17602c620445f76c3b407937751c8a894d37",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/24bf17602c620445f76c3b407937751c8a894d37",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/24bf17602c620445f76c3b407937751c8a894d37/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e4f435047121886edb6e6a6c4e4998e44ed2e36a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4f435047121886edb6e6a6c4e4998e44ed2e36a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e4f435047121886edb6e6a6c4e4998e44ed2e36a"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 4,
      "deletions": 10
    },
    "files": [
      {
        "sha": "8e381861a0f73294dcdd227299e9967e4d6bc0f1",
        "filename": "src/qt/splashscreen.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 8,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/24bf17602c620445f76c3b407937751c8a894d37/src/qt/splashscreen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/24bf17602c620445f76c3b407937751c8a894d37/src/qt/splashscreen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.cpp?ref=24bf17602c620445f76c3b407937751c8a894d37",
        "patch": "@@ -185,13 +185,6 @@ static void ShowProgress(SplashScreen *splash, const std::string &title, int nPr\n                                 : _(\"press q to shutdown\").translated) +\n             strprintf(\"\\n%d\", nProgress) + \"%\");\n }\n-#ifdef ENABLE_WALLET\n-void SplashScreen::ConnectWallet(std::unique_ptr<interfaces::Wallet> wallet)\n-{\n-    m_connected_wallet_handlers.emplace_back(wallet->handleShowProgress(std::bind(ShowProgress, this, std::placeholders::_1, std::placeholders::_2, false)));\n-    m_connected_wallets.emplace_back(std::move(wallet));\n-}\n-#endif\n \n void SplashScreen::subscribeToCoreSignals()\n {\n@@ -203,7 +196,10 @@ void SplashScreen::subscribeToCoreSignals()\n void SplashScreen::handleLoadWallet()\n {\n #ifdef ENABLE_WALLET\n-    m_handler_load_wallet = m_node->walletClient().handleLoadWallet([this](std::unique_ptr<interfaces::Wallet> wallet) { ConnectWallet(std::move(wallet)); });\n+    m_handler_load_wallet = m_node->walletClient().handleLoadWallet([this](std::unique_ptr<interfaces::Wallet> wallet) {\n+        m_connected_wallet_handlers.emplace_back(wallet->handleShowProgress(std::bind(ShowProgress, this, std::placeholders::_1, std::placeholders::_2, false)));\n+        m_connected_wallets.emplace_back(std::move(wallet));\n+    });\n #endif\n }\n "
      },
      {
        "sha": "a0cd677d3dc85ae97d83671b96d78e5f5e9ef79a",
        "filename": "src/qt/splashscreen.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/24bf17602c620445f76c3b407937751c8a894d37/src/qt/splashscreen.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/24bf17602c620445f76c3b407937751c8a894d37/src/qt/splashscreen.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.h?ref=24bf17602c620445f76c3b407937751c8a894d37",
        "patch": "@@ -56,8 +56,6 @@ public Q_SLOTS:\n     void unsubscribeFromCoreSignals();\n     /** Initiate shutdown */\n     void shutdown();\n-    /** Connect wallet signals to splash screen */\n-    void ConnectWallet(std::unique_ptr<interfaces::Wallet> wallet);\n \n     QPixmap pixmap;\n     QString curMessage;"
      }
    ]
  }
]