[
  {
    "sha": "65f23f01f4ee9b275db4255f26a2582545363866",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NWYyM2YwMWY0ZWU5YjI3NWRiNDI1NWYyNmEyNTgyNTQ1MzYzODY2",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-02-27T17:48:46Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-02-27T17:48:46Z"
      },
      "message": "[docs] Update comments for BlockConnected and BlockDisconnected\n\nClarify that the mempool is not guaranteed to be in a consistent state\nwith the chain tip when BlockConnected and BlockDisconnected are fired.\nRemove outdated comment about BlockConnected providing a vector of\ntransactions.",
      "tree": {
        "sha": "2a431a3e531f1bea3dac0e23b8b0ec36851a6872",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2a431a3e531f1bea3dac0e23b8b0ec36851a6872"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/65f23f01f4ee9b275db4255f26a2582545363866",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65f23f01f4ee9b275db4255f26a2582545363866",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/65f23f01f4ee9b275db4255f26a2582545363866",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65f23f01f4ee9b275db4255f26a2582545363866/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5ba5becbb5d8c794efe579caeea7eea64f895a13",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ba5becbb5d8c794efe579caeea7eea64f895a13",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5ba5becbb5d8c794efe579caeea7eea64f895a13"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 6,
      "deletions": 1
    },
    "files": [
      {
        "sha": "1eae7545c28a23c8f853191a7b6748cc041e7798",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65f23f01f4ee9b275db4255f26a2582545363866/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65f23f01f4ee9b275db4255f26a2582545363866/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=65f23f01f4ee9b275db4255f26a2582545363866",
        "patch": "@@ -134,14 +134,19 @@ class CValidationInterface {\n     virtual void TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t mempool_sequence) {}\n     /**\n      * Notifies listeners of a block being connected.\n-     * Provides a vector of transactions evicted from the mempool as a result.\n+     *\n+     * The mempool is not guaranteed to be in a consistent state when this\n+     * notification is fired. Listeners should use UpdatedBlockTip for that.\n      *\n      * Called on a background thread.\n      */\n     virtual void BlockConnected(const std::shared_ptr<const CBlock> &block, const CBlockIndex *pindex) {}\n     /**\n      * Notifies listeners of a block being disconnected\n      *\n+     * The mempool is not guaranteed to be in a consistent state when this\n+     * notification is fired. Listeners should use UpdatedBlockTip for that.\n+     *\n      * Called on a background thread.\n      */\n     virtual void BlockDisconnected(const std::shared_ptr<const CBlock> &block, const CBlockIndex* pindex) {}"
      }
    ]
  },
  {
    "sha": "16523a7c42f987428291e149230609a30d49002e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNjUyM2E3YzQyZjk4NzQyODI5MWUxNDkyMzA2MDlhMzBkNDkwMDJl",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-04-17T14:37:50Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-02-27T18:07:26Z"
      },
      "message": "[validation] Simplify ConnectTrace\n\nConnectTrace is now only used to track blocks that were connected during\nan ActivateBestChainStep call. Simplify it to a typedef.",
      "tree": {
        "sha": "48af17d8a0e3612b521cd010372eae026776db31",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/48af17d8a0e3612b521cd010372eae026776db31"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/16523a7c42f987428291e149230609a30d49002e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16523a7c42f987428291e149230609a30d49002e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/16523a7c42f987428291e149230609a30d49002e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16523a7c42f987428291e149230609a30d49002e/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "65f23f01f4ee9b275db4255f26a2582545363866",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65f23f01f4ee9b275db4255f26a2582545363866",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/65f23f01f4ee9b275db4255f26a2582545363866"
      }
    ],
    "stats": {
      "total": 77,
      "additions": 28,
      "deletions": 49
    },
    "files": [
      {
        "sha": "87ec9e740a34e44fe6511e820b18389cd9ef59be",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 45,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/16523a7c42f987428291e149230609a30d49002e/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/16523a7c42f987428291e149230609a30d49002e/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=16523a7c42f987428291e149230609a30d49002e",
        "patch": "@@ -2533,53 +2533,13 @@ static int64_t nTimeFlush = 0;\n static int64_t nTimeChainState = 0;\n static int64_t nTimePostConnect = 0;\n \n-struct PerBlockConnectTrace {\n-    CBlockIndex* pindex = nullptr;\n-    std::shared_ptr<const CBlock> pblock;\n-    PerBlockConnectTrace() {}\n-};\n-/**\n- * Used to track blocks whose transactions were applied to the UTXO state as a\n- * part of a single ActivateBestChainStep call.\n- *\n- * This class is single-use, once you call GetBlocksConnected() you have to throw\n- * it away and make a new one.\n- */\n-class ConnectTrace {\n-private:\n-    std::vector<PerBlockConnectTrace> blocksConnected;\n-\n-public:\n-    explicit ConnectTrace() : blocksConnected(1) {}\n-\n-    void BlockConnected(CBlockIndex* pindex, std::shared_ptr<const CBlock> pblock) {\n-        assert(!blocksConnected.back().pindex);\n-        assert(pindex);\n-        assert(pblock);\n-        blocksConnected.back().pindex = pindex;\n-        blocksConnected.back().pblock = std::move(pblock);\n-        blocksConnected.emplace_back();\n-    }\n-\n-    std::vector<PerBlockConnectTrace>& GetBlocksConnected() {\n-        // We always keep one extra block at the end of our list because\n-        // blocks are added after all the conflicted transactions have\n-        // been filled in. Thus, the last entry should always be an empty\n-        // one waiting for the transactions from the next block. We pop\n-        // the last entry here to make sure the list we return is sane.\n-        assert(!blocksConnected.back().pindex);\n-        blocksConnected.pop_back();\n-        return blocksConnected;\n-    }\n-};\n-\n /**\n  * Connect a new block to m_chain. pblock is either nullptr or a pointer to a CBlock\n  * corresponding to pindexNew, to bypass loading it again from disk.\n  *\n  * The block is added to connectTrace if connection succeeds.\n  */\n-bool CChainState::ConnectTip(BlockValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexNew, const std::shared_ptr<const CBlock>& pblock, ConnectTrace& connectTrace, DisconnectedBlockTransactions &disconnectpool)\n+bool CChainState::ConnectTip(BlockValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexNew, const std::shared_ptr<const CBlock>& pblock, CChainState::ConnectTrace& connectTrace, DisconnectedBlockTransactions &disconnectpool)\n {\n     AssertLockHeld(cs_main);\n     AssertLockHeld(m_mempool.cs);\n@@ -2634,7 +2594,7 @@ bool CChainState::ConnectTip(BlockValidationState& state, const CChainParams& ch\n     LogPrint(BCLog::BENCH, \"  - Connect postprocess: %.2fms [%.2fs (%.2fms/blk)]\\n\", (nTime6 - nTime5) * MILLI, nTimePostConnect * MICRO, nTimePostConnect * MILLI / nBlocksTotal);\n     LogPrint(BCLog::BENCH, \"- Connect block: %.2fms [%.2fs (%.2fms/blk)]\\n\", (nTime6 - nTime1) * MILLI, nTimeTotal * MICRO, nTimeTotal * MILLI / nBlocksTotal);\n \n-    connectTrace.BlockConnected(pindexNew, std::move(pthisBlock));\n+    connectTrace.emplace_back(pindexNew, std::move(pthisBlock));\n     return true;\n }\n \n@@ -2715,7 +2675,7 @@ void CChainState::PruneBlockIndexCandidates() {\n  *\n  * @returns true unless a system error occurred\n  */\n-bool CChainState::ActivateBestChainStep(BlockValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexMostWork, const std::shared_ptr<const CBlock>& pblock, bool& fInvalidFound, ConnectTrace& connectTrace)\n+bool CChainState::ActivateBestChainStep(BlockValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexMostWork, const std::shared_ptr<const CBlock>& pblock, bool& fInvalidFound, CChainState::ConnectTrace& connectTrace)\n {\n     AssertLockHeld(cs_main);\n     AssertLockHeld(m_mempool.cs);\n@@ -2871,7 +2831,7 @@ bool CChainState::ActivateBestChain(BlockValidationState &state, const CChainPar\n             do {\n                 // We absolutely may not unlock cs_main until we've made forward progress\n                 // (with the exception of shutdown due to hardware issues, low disk space, etc).\n-                ConnectTrace connectTrace; // Destructed before cs_main is unlocked\n+                CChainState::ConnectTrace connectTrace; // Destructed before cs_main is unlocked\n \n                 if (pindexMostWork == nullptr) {\n                     pindexMostWork = FindMostWorkChain();\n@@ -2896,7 +2856,7 @@ bool CChainState::ActivateBestChain(BlockValidationState &state, const CChainPar\n                 }\n                 pindexNewTip = m_chain.Tip();\n \n-                for (const PerBlockConnectTrace& trace : connectTrace.GetBlocksConnected()) {\n+                for (const PerBlockConnectTrace& trace : connectTrace) {\n                     assert(trace.pblock && trace.pindex);\n                     GetMainSignals().BlockConnected(trace.pblock, trace.pindex);\n                 }"
      },
      {
        "sha": "fabe23f60bb40b7350563c4b305ef037d68dd0d6",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 23,
        "deletions": 4,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/16523a7c42f987428291e149230609a30d49002e/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/16523a7c42f987428291e149230609a30d49002e/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=16523a7c42f987428291e149230609a30d49002e",
        "patch": "@@ -359,8 +359,6 @@ enum DisconnectResult\n     DISCONNECT_FAILED   // Something else went wrong.\n };\n \n-class ConnectTrace;\n-\n /** @see CChainState::FlushStateToDisk */\n enum class FlushStateMode {\n     NONE,\n@@ -764,8 +762,29 @@ class CChainState\n     std::string ToString() EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n \n private:\n-    bool ActivateBestChainStep(BlockValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexMostWork, const std::shared_ptr<const CBlock>& pblock, bool& fInvalidFound, ConnectTrace& connectTrace) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_mempool.cs);\n-    bool ConnectTip(BlockValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexNew, const std::shared_ptr<const CBlock>& pblock, ConnectTrace& connectTrace, DisconnectedBlockTransactions& disconnectpool) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_mempool.cs);\n+    //! A single block and block index pointer.\n+    struct PerBlockConnectTrace {\n+        const CBlockIndex* pindex = nullptr;\n+        const std::shared_ptr<const CBlock> pblock;\n+\n+        PerBlockConnectTrace(CBlockIndex* index, std::shared_ptr<const CBlock> block)\n+            : pindex(index), pblock(std::move(block))\n+        {\n+            assert(pindex);\n+            assert(pblock);\n+        }\n+    };\n+\n+    /**\n+     * Used to track blocks that were connected as part of a single\n+     * ActivateBestChainStep call. After the ABCS call returns, a separate\n+     * BlockConnected validationinterface signal is fired for each block that was\n+     * connected in the ABCS call.\n+     */\n+    using ConnectTrace = std::vector<PerBlockConnectTrace>;\n+\n+    bool ActivateBestChainStep(BlockValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexMostWork, const std::shared_ptr<const CBlock>& pblock, bool& fInvalidFound, CChainState::ConnectTrace& connectTrace) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_mempool.cs);\n+    bool ConnectTip(BlockValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexNew, const std::shared_ptr<const CBlock>& pblock, CChainState::ConnectTrace& connectTrace, DisconnectedBlockTransactions& disconnectpool) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_mempool.cs);\n \n     void InvalidBlockFound(CBlockIndex *pindex, const BlockValidationState &state) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n     CBlockIndex* FindMostWorkChain() EXCLUSIVE_LOCKS_REQUIRED(cs_main);"
      }
    ]
  }
]