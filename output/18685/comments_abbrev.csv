jnewbery,2020-04-18 16:24:38,Thanks for the review @MarcoFalke . I've addressed your comments.,https://github.com/bitcoin/bitcoin/pull/18685#issuecomment-615898514,615898514,
DrahtBot,2020-05-07 02:23:58,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21789 by MarcoFalke\n* #15606 by jamesob\n\nIf you consider this pull request important, please also help to review the c",https://github.com/bitcoin/bitcoin/pull/18685#issuecomment-624991192,624991192,
jonatack,2020-07-08 06:38:03,Concept ACK,https://github.com/bitcoin/bitcoin/pull/18685#issuecomment-655319539,655319539,
jnewbery,2020-09-04 09:53:58,I've addressed the comment here https://github.com/bitcoin/bitcoin/pull/18685#discussion_r479612111 and rebased on master (there wasn't a conflict but this was a few thousand commits behind master and it's a small change).,https://github.com/bitcoin/bitcoin/pull/18685#issuecomment-687047944,687047944,
jnewbery,2021-02-27 18:08:25,"Thanks for the review, @ajtowns! I've addressed your comments and rebased on master (since this was a couple of thousand commits behind the current master).",https://github.com/bitcoin/bitcoin/pull/18685#issuecomment-787112566,787112566,
jnewbery,2021-04-29 07:20:27,@ajtowns do you mind looking at this again? I've addressed your review comments.,https://github.com/bitcoin/bitcoin/pull/18685#issuecomment-828999358,828999358,
jnewbery,2021-06-02 15:43:31,@ajtowns?,https://github.com/bitcoin/bitcoin/pull/18685#issuecomment-853136938,853136938,
DrahtBot,2021-06-29 04:23:03,"<!--cf906140f33d8803c4a75a2196329ecb-->\nüêô This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a ""draft"".</sub>",https://github.com/bitcoin/bitcoin/pull/18685#issuecomment-870220375,870220375,
jnewbery,2021-07-16 09:38:06,Closing due to lack of reviewer interest.,https://github.com/bitcoin/bitcoin/pull/18685#issuecomment-881315423,881315423,
Rspigler,2021-07-25 23:53:56,Mark up for grabs?,https://github.com/bitcoin/bitcoin/pull/18685#issuecomment-886278292,886278292,
jnewbery,2021-07-26 08:45:25,"> Mark up for grabs?\n\n@Rspigler feel free to pick this up if you're interested. I'm happy to review, but this didn't get much reviewer interest last time round.",https://github.com/bitcoin/bitcoin/pull/18685#issuecomment-886504350,886504350,
MarcoFalke,2020-04-17 14:43:45,"```suggestion\n    PerBlockConnectTrace(CBlockIndex* index, const std::shared_ptr<const CBlock>& block) : pindex(index), pblock(block) {}\n```\n\nstyle nit to avoid shared_ptr increment/decrement",https://github.com/bitcoin/bitcoin/pull/18685#discussion_r410270513,410270513,src/validation.cpp
MarcoFalke,2020-04-17 14:44:40,Why is this needed?,https://github.com/bitcoin/bitcoin/pull/18685#discussion_r410271078,410271078,src/validation.cpp
MarcoFalke,2020-04-17 14:46:26,Why is this change to auto? `auto` shouldn't be used in consensus code unless there is a reason ,https://github.com/bitcoin/bitcoin/pull/18685#discussion_r410272193,410272193,src/validation.cpp
MarcoFalke,2020-04-17 14:46:59,"```suggestion\nusing ConnectTrace = std::vector<PerBlockConnectTrace>;\n```\n\nstyle nit for C++11",https://github.com/bitcoin/bitcoin/pull/18685#discussion_r410272555,410272555,src/validation.h
MarcoFalke,2020-04-17 15:43:17,"\n\nNote to other reviewers: This comment obviously no longer applies after 312d27b\n",https://github.com/bitcoin/bitcoin/pull/18685#discussion_r410307560,410307560,src/validation.cpp
jnewbery,2020-04-18 16:12:56,"Thanks for this comment! It sent me down a bit of a rabbit hole about how to pass smart pointers. Here's what I've learned:\n\nI think your suggestion to change the ctor to take a const lvalue reference makes a copy and therefore increases the ref count (the `const` is the callee saying to the caller ""I won't steal this reference"", and so if the callee wants to keep ownership, it needs to make a",https://github.com/bitcoin/bitcoin/pull/18685#discussion_r410717136,410717136,src/validation.cpp
jnewbery,2020-04-18 16:13:40,It's not needed. I just wanted to keep it here so the comment made sense and I didn't have to move it to the header file.,https://github.com/bitcoin/bitcoin/pull/18685#discussion_r410717223,410717223,src/validation.cpp
jnewbery,2020-04-18 16:13:57,Sounds sensible. I'll revert.,https://github.com/bitcoin/bitcoin/pull/18685#discussion_r410717291,410717291,src/validation.cpp
jnewbery,2020-04-18 16:24:01,"I don't think it makes a difference for aliases which are not templates (and I can't see this in the style guide), but changed anyway.",https://github.com/bitcoin/bitcoin/pull/18685#discussion_r410718508,410718508,src/validation.h
MarcoFalke,2020-04-18 16:52:04,"Didn't see the new comment, but I think you can put the new comment to the single place where connecttrace is instantiated. No strong opinion, though.",https://github.com/bitcoin/bitcoin/pull/18685#discussion_r410721803,410721803,src/validation.cpp
jonatack,2020-05-06 15:15:43,"> I don't think it makes a difference for aliases which are not templates (and I can't see this in the style guide), but changed anyway.\n\nThis is my understanding as well after looking this up, along with `typedef` being the earlier, traditional syntax of the two. Perhaps one advantage `typedef` may have over `using` is that it is used only for declaring type aliases.",https://github.com/bitcoin/bitcoin/pull/18685#discussion_r420873583,420873583,src/validation.h
jonatack,2020-05-06 16:23:27,Git grepping instances of type aliases seems easier with`typedef` as well.,https://github.com/bitcoin/bitcoin/pull/18685#discussion_r420922597,420922597,src/validation.h
robot-dreams,2020-08-29 05:50:10,"I'm still very new to move semantics, but just confirming, what's the motivation for removing the `std::move`?\n\nIn my local experiments, it looks like taking out the `std::move` increments the refcount; could this have performance implications?\n\n#### No `std::move`\n\n	int main() {\n	    CBlockIndex index;\n	    CBlockIndex* pindex = &index;\n\n	    std::shared_ptr<const CBlock> pblo",https://github.com/bitcoin/bitcoin/pull/18685#discussion_r479612111,479612111,src/validation.cpp
robot-dreams,2020-08-29 05:53:50,"Note (no action needed): I agree these asserts are no longer needed, because `ConnectTip` guarantees guarantees neither the `CBlockIndex` nor the `std::shared_ptr<const CBlock>` will be null.",https://github.com/bitcoin/bitcoin/pull/18685#discussion_r479612433,479612433,src/validation.cpp
robot-dreams,2020-08-29 06:32:22,"Beginner question: what do you mean by ""consistent state"" here?\n\ni.e. what could go wrong with the mempool after some, but not all, of the `ActivateBestChainStep` involved in `ActivateBestChain`?",https://github.com/bitcoin/bitcoin/pull/18685#discussion_r479615472,479615472,src/validationinterface.h
jnewbery,2020-09-04 09:15:03,"Yes, you're right! The caller should cast to rvalue reference by calling `std::move()` (that was my intention in https://github.com/bitcoin/bitcoin/pull/18685#discussion_r410717136).\n\nThanks for catching this.",https://github.com/bitcoin/bitcoin/pull/18685#discussion_r483494853,483494853,src/validation.cpp
jnewbery,2020-09-04 09:52:33,"cs_main and mempool.cs are both still being held when the `BlockConnected` signal is called, and `UpdateMempoolForReorg()` may have been called after blocks were connected but before the `BlockConnected` signal is called. See the comment above for the `TransactionAddedToMempool` signal.\n\nThe `UpdatedBlockTip` signal is called just before releasing `cs_main`, when we know that the mempool is co",https://github.com/bitcoin/bitcoin/pull/18685#discussion_r483514430,483514430,src/validationinterface.h
robot-dreams,2020-09-05 05:50:08,"Thanks for clarifying! Here's my updated understanding:\n\n- If a `validationinterface` listener considers the callbacks as a canonical log of all events, then immediately after a `BlockConnected` but before the subsequent `UpdatedBlockTip`, the listener might have an inconsistent view (e.g. some transactions have disappeared from both the mempool and the active chain)\n\n- If a validationinte",https://github.com/bitcoin/bitcoin/pull/18685#discussion_r483914867,483914867,src/validationinterface.h
robot-dreams,2020-09-05 06:12:31,"Nit (feel free to ignore): How would you feel about rewording this to make it really obvious that there's one BlockConnected signal per block? For example:\n\n    Used to track blocks that were connected as part of a single\n    ActivateBestChainStep call. After the ABCS call, a separate BlockConnected\n    validationinterface signal is fired for each block that was connected\n    in the ABCS",https://github.com/bitcoin/bitcoin/pull/18685#discussion_r483916524,483916524,src/validation.cpp
jnewbery,2020-09-07 09:44:48,"I agree with your first point. For the second point, if we consider the client to be a passive listener (ie the only input it's getting is from the validation interface), then it shouldn't/can't acquire those locks. It should wait for a `UpdatedBlockTip` to be sure that the state is consistent.",https://github.com/bitcoin/bitcoin/pull/18685#discussion_r484319651,484319651,src/validationinterface.h
jnewbery,2020-09-07 09:47:56,Sure. That seems better. Updated.,https://github.com/bitcoin/bitcoin/pull/18685#discussion_r484321444,484321444,src/validation.cpp
ajtowns,2021-02-26 16:52:11,"Suggest removing this `using` and moving the associated comment to the header. (In particular, if someone changes one `using` or the other, the one in validation.cpp wins; not precisely shadowing but still annoying)",https://github.com/bitcoin/bitcoin/pull/18685#discussion_r583777097,583777097,src/validation.cpp
ajtowns,2021-02-26 16:55:08,Adding `assert(index != nullptr && block);` would replace the assertions you're deleting below.,https://github.com/bitcoin/bitcoin/pull/18685#discussion_r583778936,583778936,src/validation.cpp
jnewbery,2021-02-27 18:07:50,Done. I've moved everything into the class declaration in the header.,https://github.com/bitcoin/bitcoin/pull/18685#discussion_r584168851,584168851,src/validation.cpp
jnewbery,2021-02-27 18:07:52,Done.,https://github.com/bitcoin/bitcoin/pull/18685#discussion_r584168853,584168853,src/validation.cpp
