[
  {
    "sha": "45c08f8a7b89dda6afb7d7cf9573a8ae8290ac92",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NWMwOGY4YTdiODlkZGE2YWZiN2Q3Y2Y5NTczYThhZTgyOTBhYzky",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-06-17T16:25:22Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-06-17T16:31:29Z"
      },
      "message": "Add Create*WalletDatabase functions\n\nThese functions doing the same things as WalletDatabase::Create,\nCreateMock, and CreateDummy",
      "tree": {
        "sha": "714f6ecf6acd0250c62dca1bd5a0629d00c0df85",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/714f6ecf6acd0250c62dca1bd5a0629d00c0df85"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/45c08f8a7b89dda6afb7d7cf9573a8ae8290ac92",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45c08f8a7b89dda6afb7d7cf9573a8ae8290ac92",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/45c08f8a7b89dda6afb7d7cf9573a8ae8290ac92",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45c08f8a7b89dda6afb7d7cf9573a8ae8290ac92/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "39bd9ddb8783807b9cde6288233e86ad7c85d61f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/39bd9ddb8783807b9cde6288233e86ad7c85d61f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/39bd9ddb8783807b9cde6288233e86ad7c85d61f"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 28,
      "deletions": 0
    },
    "files": [
      {
        "sha": "6f3839807646a8154c32207b44fa536102d5a483",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45c08f8a7b89dda6afb7d7cf9573a8ae8290ac92/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45c08f8a7b89dda6afb7d7cf9573a8ae8290ac92/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=45c08f8a7b89dda6afb7d7cf9573a8ae8290ac92",
        "patch": "@@ -1023,3 +1023,22 @@ bool IsWalletLoaded(const fs::path& wallet_path)\n {\n     return IsBDBWalletLoaded(wallet_path);\n }\n+\n+/** Return object for accessing database at specified path. */\n+std::unique_ptr<BerkeleyDatabase> CreateWalletDatabase(const fs::path& path)\n+{\n+    std::string filename;\n+    return MakeUnique<BerkeleyDatabase>(GetWalletEnv(path, filename), std::move(filename));\n+}\n+\n+/** Return object for accessing dummy database with no read/write capabilities. */\n+std::unique_ptr<BerkeleyDatabase> CreateDummyWalletDatabase()\n+{\n+    return MakeUnique<BerkeleyDatabase>();\n+}\n+\n+/** Return object for accessing temporary in-memory database. */\n+std::unique_ptr<BerkeleyDatabase> CreateMockWalletDatabase()\n+{\n+    return MakeUnique<BerkeleyDatabase>(std::make_shared<BerkeleyEnvironment>(), \"\");\n+}"
      },
      {
        "sha": "61e0f19e562fe1a49c65449f08a3df172ce1849b",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45c08f8a7b89dda6afb7d7cf9573a8ae8290ac92/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45c08f8a7b89dda6afb7d7cf9573a8ae8290ac92/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=45c08f8a7b89dda6afb7d7cf9573a8ae8290ac92",
        "patch": "@@ -293,4 +293,13 @@ bool ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue, st\n /** Return whether a wallet database is currently loaded. */\n bool IsWalletLoaded(const fs::path& wallet_path);\n \n+/** Return object for accessing database at specified path. */\n+std::unique_ptr<BerkeleyDatabase> CreateWalletDatabase(const fs::path& path);\n+\n+/** Return object for accessing dummy database with no read/write capabilities. */\n+std::unique_ptr<BerkeleyDatabase> CreateDummyWalletDatabase();\n+\n+/** Return object for accessing temporary in-memory database. */\n+std::unique_ptr<BerkeleyDatabase> CreateMockWalletDatabase();\n+\n #endif // BITCOIN_WALLET_WALLETDB_H"
      }
    ]
  },
  {
    "sha": "d6045d0ac615b5984b72e83cb25aa8a245a177a0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNjA0NWQwYWM2MTViNTk4NGI3MmU4M2NiMjVhYThhMjQ1YTE3N2Ew",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-06-17T16:30:37Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-06-17T18:12:41Z"
      },
      "message": "scripted-diff: Replace WalletDatabase::Create* with CreateWalletDatabase\n\n-BEGIN VERIFY SCRIPT-\nsed -i -e 's/WalletDatabase::Create(/CreateWalletDatabase(/g' `git grep -l \"WalletDatabase::Create(\"`\nsed -i -e 's/WalletDatabase::CreateDummy(/CreateDummyWalletDatabase(/g' `git grep -l \"WalletDatabase::CreateDummy(\"`\nsed -i -e 's/WalletDatabase::CreateMock(/CreateMockWalletDatabase(/g' `git grep -l \"WalletDatabase::CreateMock(\"`\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "98d82380300075eb35932f4080d482d2d057557c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/98d82380300075eb35932f4080d482d2d057557c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d6045d0ac615b5984b72e83cb25aa8a245a177a0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6045d0ac615b5984b72e83cb25aa8a245a177a0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d6045d0ac615b5984b72e83cb25aa8a245a177a0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6045d0ac615b5984b72e83cb25aa8a245a177a0/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "45c08f8a7b89dda6afb7d7cf9573a8ae8290ac92",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45c08f8a7b89dda6afb7d7cf9573a8ae8290ac92",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/45c08f8a7b89dda6afb7d7cf9573a8ae8290ac92"
      }
    ],
    "stats": {
      "total": 92,
      "additions": 46,
      "deletions": 46
    },
    "files": [
      {
        "sha": "f2d12531d79114a8cfb6eaa11aa69846eb349c9b",
        "filename": "src/bench/coin_selection.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6045d0ac615b5984b72e83cb25aa8a245a177a0/src/bench/coin_selection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6045d0ac615b5984b72e83cb25aa8a245a177a0/src/bench/coin_selection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/coin_selection.cpp?ref=d6045d0ac615b5984b72e83cb25aa8a245a177a0",
        "patch": "@@ -31,7 +31,7 @@ static void CoinSelection(benchmark::State& state)\n {\n     NodeContext node;\n     auto chain = interfaces::MakeChain(node);\n-    CWallet wallet(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+    CWallet wallet(chain.get(), WalletLocation(), CreateDummyWalletDatabase());\n     wallet.SetupLegacyScriptPubKeyMan();\n     std::vector<std::unique_ptr<CWalletTx>> wtxs;\n     LOCK(wallet.cs_wallet);\n@@ -65,7 +65,7 @@ static void CoinSelection(benchmark::State& state)\n typedef std::set<CInputCoin> CoinSet;\n static NodeContext testNode;\n static auto testChain = interfaces::MakeChain(testNode);\n-static CWallet testWallet(testChain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+static CWallet testWallet(testChain.get(), WalletLocation(), CreateDummyWalletDatabase());\n std::vector<std::unique_ptr<CWalletTx>> wtxn;\n \n // Copied from src/wallet/test/coinselector_tests.cpp"
      },
      {
        "sha": "05cfb3438effe2c5b9c7bd29798e32395795c815",
        "filename": "src/bench/wallet_balance.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6045d0ac615b5984b72e83cb25aa8a245a177a0/src/bench/wallet_balance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6045d0ac615b5984b72e83cb25aa8a245a177a0/src/bench/wallet_balance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/wallet_balance.cpp?ref=d6045d0ac615b5984b72e83cb25aa8a245a177a0",
        "patch": "@@ -26,7 +26,7 @@ static void WalletBalance(benchmark::State& state, const bool set_dirty, const b\n \n     NodeContext node;\n     std::unique_ptr<interfaces::Chain> chain = interfaces::MakeChain(node);\n-    CWallet wallet{chain.get(), WalletLocation(), WalletDatabase::CreateMock()};\n+    CWallet wallet{chain.get(), WalletLocation(), CreateMockWalletDatabase()};\n     {\n         wallet.SetupLegacyScriptPubKeyMan();\n         bool first_run;"
      },
      {
        "sha": "9347ff9e4273372469686c1f4c7be3d377c11ef7",
        "filename": "src/qt/test/addressbooktests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6045d0ac615b5984b72e83cb25aa8a245a177a0/src/qt/test/addressbooktests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6045d0ac615b5984b72e83cb25aa8a245a177a0/src/qt/test/addressbooktests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/addressbooktests.cpp?ref=d6045d0ac615b5984b72e83cb25aa8a245a177a0",
        "patch": "@@ -59,7 +59,7 @@ void EditAddressAndSubmit(\n void TestAddAddressesToSendBook(interfaces::Node& node)\n {\n     TestChain100Setup test;\n-    std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(node.context()->chain.get(), WalletLocation(), WalletDatabase::CreateMock());\n+    std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(node.context()->chain.get(), WalletLocation(), CreateMockWalletDatabase());\n     wallet->SetupLegacyScriptPubKeyMan();\n     bool firstRun;\n     wallet->LoadWallet(firstRun);"
      },
      {
        "sha": "405004963a4d55bff4c8901bb75a5edd77cc4d41",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6045d0ac615b5984b72e83cb25aa8a245a177a0/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6045d0ac615b5984b72e83cb25aa8a245a177a0/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=d6045d0ac615b5984b72e83cb25aa8a245a177a0",
        "patch": "@@ -140,7 +140,7 @@ void TestGUI(interfaces::Node& node)\n     }\n     node.context()->connman = std::move(test.m_node.connman);\n     node.context()->mempool = std::move(test.m_node.mempool);\n-    std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(node.context()->chain.get(), WalletLocation(), WalletDatabase::CreateMock());\n+    std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(node.context()->chain.get(), WalletLocation(), CreateMockWalletDatabase());\n     bool firstRun;\n     wallet->LoadWallet(firstRun);\n     {"
      },
      {
        "sha": "d42950ee42a130ac3e2c67d92ab13f542b63351b",
        "filename": "src/wallet/salvage.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6045d0ac615b5984b72e83cb25aa8a245a177a0/src/wallet/salvage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6045d0ac615b5984b72e83cb25aa8a245a177a0/src/wallet/salvage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/salvage.cpp?ref=d6045d0ac615b5984b72e83cb25aa8a245a177a0",
        "patch": "@@ -116,7 +116,7 @@ bool RecoverDatabaseFile(const fs::path& file_path)\n     }\n \n     DbTxn* ptxn = env->TxnBegin();\n-    CWallet dummyWallet(nullptr, WalletLocation(), WalletDatabase::CreateDummy());\n+    CWallet dummyWallet(nullptr, WalletLocation(), CreateDummyWalletDatabase());\n     for (KeyValPair& row : salvagedData)\n     {\n         /* Filter for only private key type KV pairs to be added to the salvaged wallet */"
      },
      {
        "sha": "1deedede4caa363be65e3bed2ab020e9bca69742",
        "filename": "src/wallet/test/coinselector_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6045d0ac615b5984b72e83cb25aa8a245a177a0/src/wallet/test/coinselector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6045d0ac615b5984b72e83cb25aa8a245a177a0/src/wallet/test/coinselector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/coinselector_tests.cpp?ref=d6045d0ac615b5984b72e83cb25aa8a245a177a0",
        "patch": "@@ -29,7 +29,7 @@ typedef std::set<CInputCoin> CoinSet;\n static std::vector<COutput> vCoins;\n static NodeContext testNode;\n static auto testChain = interfaces::MakeChain(testNode);\n-static CWallet testWallet(testChain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+static CWallet testWallet(testChain.get(), WalletLocation(), CreateDummyWalletDatabase());\n static CAmount balance = 0;\n \n CoinEligibilityFilter filter_standard(1, 6, 0);\n@@ -283,7 +283,7 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n     // Make sure that can use BnB when there are preset inputs\n     empty_wallet();\n     {\n-        std::unique_ptr<CWallet> wallet = MakeUnique<CWallet>(m_chain.get(), WalletLocation(), WalletDatabase::CreateMock());\n+        std::unique_ptr<CWallet> wallet = MakeUnique<CWallet>(m_chain.get(), WalletLocation(), CreateMockWalletDatabase());\n         bool firstRun;\n         wallet->LoadWallet(firstRun);\n         wallet->SetupLegacyScriptPubKeyMan();"
      },
      {
        "sha": "cdb0522920f5a14a1e40d4856c6ee04d6122b303",
        "filename": "src/wallet/test/ismine_tests.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 20,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6045d0ac615b5984b72e83cb25aa8a245a177a0/src/wallet/test/ismine_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6045d0ac615b5984b72e83cb25aa8a245a177a0/src/wallet/test/ismine_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/ismine_tests.cpp?ref=d6045d0ac615b5984b72e83cb25aa8a245a177a0",
        "patch": "@@ -35,7 +35,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n \n     // P2PK compressed\n     {\n-        CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+        CWallet keystore(chain.get(), WalletLocation(), CreateDummyWalletDatabase());\n         keystore.SetupLegacyScriptPubKeyMan();\n         LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n         scriptPubKey = GetScriptForRawPubKey(pubkeys[0]);\n@@ -52,7 +52,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n \n     // P2PK uncompressed\n     {\n-        CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+        CWallet keystore(chain.get(), WalletLocation(), CreateDummyWalletDatabase());\n         keystore.SetupLegacyScriptPubKeyMan();\n         LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n         scriptPubKey = GetScriptForRawPubKey(uncompressedPubkey);\n@@ -69,7 +69,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n \n     // P2PKH compressed\n     {\n-        CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+        CWallet keystore(chain.get(), WalletLocation(), CreateDummyWalletDatabase());\n         keystore.SetupLegacyScriptPubKeyMan();\n         LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n         scriptPubKey = GetScriptForDestination(PKHash(pubkeys[0]));\n@@ -86,7 +86,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n \n     // P2PKH uncompressed\n     {\n-        CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+        CWallet keystore(chain.get(), WalletLocation(), CreateDummyWalletDatabase());\n         keystore.SetupLegacyScriptPubKeyMan();\n         LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n         scriptPubKey = GetScriptForDestination(PKHash(uncompressedPubkey));\n@@ -103,7 +103,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n \n     // P2SH\n     {\n-        CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+        CWallet keystore(chain.get(), WalletLocation(), CreateDummyWalletDatabase());\n         keystore.SetupLegacyScriptPubKeyMan();\n         LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n \n@@ -127,7 +127,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n \n     // (P2PKH inside) P2SH inside P2SH (invalid)\n     {\n-        CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+        CWallet keystore(chain.get(), WalletLocation(), CreateDummyWalletDatabase());\n         keystore.SetupLegacyScriptPubKeyMan();\n         LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n \n@@ -145,7 +145,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n \n     // (P2PKH inside) P2SH inside P2WSH (invalid)\n     {\n-        CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+        CWallet keystore(chain.get(), WalletLocation(), CreateDummyWalletDatabase());\n         keystore.SetupLegacyScriptPubKeyMan();\n         LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n \n@@ -163,7 +163,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n \n     // P2WPKH inside P2WSH (invalid)\n     {\n-        CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+        CWallet keystore(chain.get(), WalletLocation(), CreateDummyWalletDatabase());\n         keystore.SetupLegacyScriptPubKeyMan();\n         LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n \n@@ -179,7 +179,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n \n     // (P2PKH inside) P2WSH inside P2WSH (invalid)\n     {\n-        CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+        CWallet keystore(chain.get(), WalletLocation(), CreateDummyWalletDatabase());\n         keystore.SetupLegacyScriptPubKeyMan();\n         LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n \n@@ -197,7 +197,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n \n     // P2WPKH compressed\n     {\n-        CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+        CWallet keystore(chain.get(), WalletLocation(), CreateDummyWalletDatabase());\n         keystore.SetupLegacyScriptPubKeyMan();\n         LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n         BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddKey(keys[0]));\n@@ -212,7 +212,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n \n     // P2WPKH uncompressed\n     {\n-        CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+        CWallet keystore(chain.get(), WalletLocation(), CreateDummyWalletDatabase());\n         keystore.SetupLegacyScriptPubKeyMan();\n         LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n         BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddKey(uncompressedKey));\n@@ -231,7 +231,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n \n     // scriptPubKey multisig\n     {\n-        CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+        CWallet keystore(chain.get(), WalletLocation(), CreateDummyWalletDatabase());\n         keystore.SetupLegacyScriptPubKeyMan();\n         LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n \n@@ -262,7 +262,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n \n     // P2SH multisig\n     {\n-        CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+        CWallet keystore(chain.get(), WalletLocation(), CreateDummyWalletDatabase());\n         keystore.SetupLegacyScriptPubKeyMan();\n         LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n         BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddKey(uncompressedKey));\n@@ -283,7 +283,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n \n     // P2WSH multisig with compressed keys\n     {\n-        CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+        CWallet keystore(chain.get(), WalletLocation(), CreateDummyWalletDatabase());\n         keystore.SetupLegacyScriptPubKeyMan();\n         LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n         BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddKey(keys[0]));\n@@ -309,7 +309,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n \n     // P2WSH multisig with uncompressed key\n     {\n-        CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+        CWallet keystore(chain.get(), WalletLocation(), CreateDummyWalletDatabase());\n         keystore.SetupLegacyScriptPubKeyMan();\n         LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n         BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddKey(uncompressedKey));\n@@ -335,7 +335,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n \n     // P2WSH multisig wrapped in P2SH\n     {\n-        CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+        CWallet keystore(chain.get(), WalletLocation(), CreateDummyWalletDatabase());\n         keystore.SetupLegacyScriptPubKeyMan();\n         LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n \n@@ -362,7 +362,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n \n     // OP_RETURN\n     {\n-        CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+        CWallet keystore(chain.get(), WalletLocation(), CreateDummyWalletDatabase());\n         keystore.SetupLegacyScriptPubKeyMan();\n         LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n         BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddKey(keys[0]));\n@@ -376,7 +376,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n \n     // witness unspendable\n     {\n-        CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+        CWallet keystore(chain.get(), WalletLocation(), CreateDummyWalletDatabase());\n         keystore.SetupLegacyScriptPubKeyMan();\n         LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n         BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddKey(keys[0]));\n@@ -390,7 +390,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n \n     // witness unknown\n     {\n-        CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+        CWallet keystore(chain.get(), WalletLocation(), CreateDummyWalletDatabase());\n         keystore.SetupLegacyScriptPubKeyMan();\n         LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n         BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddKey(keys[0]));\n@@ -404,7 +404,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n \n     // Nonstandard\n     {\n-        CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+        CWallet keystore(chain.get(), WalletLocation(), CreateDummyWalletDatabase());\n         keystore.SetupLegacyScriptPubKeyMan();\n         LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n         BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddKey(keys[0]));"
      },
      {
        "sha": "4f12079768cd96ddf46a3aa28102adade0b93586",
        "filename": "src/wallet/test/scriptpubkeyman_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6045d0ac615b5984b72e83cb25aa8a245a177a0/src/wallet/test/scriptpubkeyman_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6045d0ac615b5984b72e83cb25aa8a245a177a0/src/wallet/test/scriptpubkeyman_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/scriptpubkeyman_tests.cpp?ref=d6045d0ac615b5984b72e83cb25aa8a245a177a0",
        "patch": "@@ -19,7 +19,7 @@ BOOST_AUTO_TEST_CASE(CanProvide)\n     // Set up wallet and keyman variables.\n     NodeContext node;\n     std::unique_ptr<interfaces::Chain> chain = interfaces::MakeChain(node);\n-    CWallet wallet(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+    CWallet wallet(chain.get(), WalletLocation(), CreateDummyWalletDatabase());\n     LegacyScriptPubKeyMan& keyman = *wallet.GetOrCreateLegacyScriptPubKeyMan();\n \n     // Make a 1 of 2 multisig script"
      },
      {
        "sha": "44f9eb5ddd831ab29ab7a22352c72e9f3e169df6",
        "filename": "src/wallet/test/wallet_test_fixture.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6045d0ac615b5984b72e83cb25aa8a245a177a0/src/wallet/test/wallet_test_fixture.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6045d0ac615b5984b72e83cb25aa8a245a177a0/src/wallet/test/wallet_test_fixture.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_test_fixture.cpp?ref=d6045d0ac615b5984b72e83cb25aa8a245a177a0",
        "patch": "@@ -6,7 +6,7 @@\n \n WalletTestingSetup::WalletTestingSetup(const std::string& chainName)\n     : TestingSetup(chainName),\n-      m_wallet(m_chain.get(), WalletLocation(), WalletDatabase::CreateMock())\n+      m_wallet(m_chain.get(), WalletLocation(), CreateMockWalletDatabase())\n {\n     bool fFirstRun;\n     m_wallet.LoadWallet(fFirstRun);"
      },
      {
        "sha": "497ccd14bba2f9182d50103293eab7260d79e44b",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6045d0ac615b5984b72e83cb25aa8a245a177a0/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6045d0ac615b5984b72e83cb25aa8a245a177a0/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=d6045d0ac615b5984b72e83cb25aa8a245a177a0",
        "patch": "@@ -80,7 +80,7 @@ BOOST_FIXTURE_TEST_CASE(scan_for_wallet_transactions, TestChain100Setup)\n \n     // Verify ScanForWalletTransactions fails to read an unknown start block.\n     {\n-        CWallet wallet(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+        CWallet wallet(chain.get(), WalletLocation(), CreateDummyWalletDatabase());\n         {\n             LOCK(wallet.cs_wallet);\n             wallet.SetLastBlockProcessed(::ChainActive().Height(), ::ChainActive().Tip()->GetBlockHash());\n@@ -99,7 +99,7 @@ BOOST_FIXTURE_TEST_CASE(scan_for_wallet_transactions, TestChain100Setup)\n     // Verify ScanForWalletTransactions picks up transactions in both the old\n     // and new block files.\n     {\n-        CWallet wallet(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+        CWallet wallet(chain.get(), WalletLocation(), CreateDummyWalletDatabase());\n         {\n             LOCK(wallet.cs_wallet);\n             wallet.SetLastBlockProcessed(::ChainActive().Height(), ::ChainActive().Tip()->GetBlockHash());\n@@ -125,7 +125,7 @@ BOOST_FIXTURE_TEST_CASE(scan_for_wallet_transactions, TestChain100Setup)\n     // Verify ScanForWalletTransactions only picks transactions in the new block\n     // file.\n     {\n-        CWallet wallet(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+        CWallet wallet(chain.get(), WalletLocation(), CreateDummyWalletDatabase());\n         {\n             LOCK(wallet.cs_wallet);\n             wallet.SetLastBlockProcessed(::ChainActive().Height(), ::ChainActive().Tip()->GetBlockHash());\n@@ -150,7 +150,7 @@ BOOST_FIXTURE_TEST_CASE(scan_for_wallet_transactions, TestChain100Setup)\n \n     // Verify ScanForWalletTransactions scans no blocks.\n     {\n-        CWallet wallet(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+        CWallet wallet(chain.get(), WalletLocation(), CreateDummyWalletDatabase());\n         {\n             LOCK(wallet.cs_wallet);\n             wallet.SetLastBlockProcessed(::ChainActive().Height(), ::ChainActive().Tip()->GetBlockHash());\n@@ -189,7 +189,7 @@ BOOST_FIXTURE_TEST_CASE(importmulti_rescan, TestChain100Setup)\n     // before the missing block, and success for a key whose creation time is\n     // after.\n     {\n-        std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+        std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(chain.get(), WalletLocation(), CreateDummyWalletDatabase());\n         wallet->SetupLegacyScriptPubKeyMan();\n         WITH_LOCK(wallet->cs_wallet, wallet->SetLastBlockProcessed(newTip->nHeight, newTip->GetBlockHash()));\n         AddWallet(wallet);\n@@ -254,7 +254,7 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n \n     // Import key into wallet and call dumpwallet to create backup file.\n     {\n-        std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+        std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(chain.get(), WalletLocation(), CreateDummyWalletDatabase());\n         {\n             auto spk_man = wallet->GetOrCreateLegacyScriptPubKeyMan();\n             LOCK2(wallet->cs_wallet, spk_man->cs_KeyStore);\n@@ -276,7 +276,7 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n     // Call importwallet RPC and verify all blocks with timestamps >= BLOCK_TIME\n     // were scanned, and no prior blocks were scanned.\n     {\n-        std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+        std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(chain.get(), WalletLocation(), CreateDummyWalletDatabase());\n         LOCK(wallet->cs_wallet);\n         wallet->SetupLegacyScriptPubKeyMan();\n \n@@ -312,7 +312,7 @@ BOOST_FIXTURE_TEST_CASE(coin_mark_dirty_immature_credit, TestChain100Setup)\n     NodeContext node;\n     auto chain = interfaces::MakeChain(node);\n \n-    CWallet wallet(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+    CWallet wallet(chain.get(), WalletLocation(), CreateDummyWalletDatabase());\n     auto spk_man = wallet.GetOrCreateLegacyScriptPubKeyMan();\n     CWalletTx wtx(&wallet, m_coinbase_txns.back());\n \n@@ -486,7 +486,7 @@ class ListCoinsTestingSetup : public TestChain100Setup\n     ListCoinsTestingSetup()\n     {\n         CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey()));\n-        wallet = MakeUnique<CWallet>(m_chain.get(), WalletLocation(), WalletDatabase::CreateMock());\n+        wallet = MakeUnique<CWallet>(m_chain.get(), WalletLocation(), CreateMockWalletDatabase());\n         {\n             LOCK2(wallet->cs_wallet, ::cs_main);\n             wallet->SetLastBlockProcessed(::ChainActive().Height(), ::ChainActive().Tip()->GetBlockHash());\n@@ -604,7 +604,7 @@ BOOST_FIXTURE_TEST_CASE(wallet_disableprivkeys, TestChain100Setup)\n {\n     NodeContext node;\n     auto chain = interfaces::MakeChain(node);\n-    std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+    std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(chain.get(), WalletLocation(), CreateDummyWalletDatabase());\n     wallet->SetupLegacyScriptPubKeyMan();\n     wallet->SetMinVersion(FEATURE_LATEST);\n     wallet->SetWalletFlag(WALLET_FLAG_DISABLE_PRIVATE_KEYS);"
      },
      {
        "sha": "4037e23b696208912874e8d6b663cebe51a6b053",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6045d0ac615b5984b72e83cb25aa8a245a177a0/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6045d0ac615b5984b72e83cb25aa8a245a177a0/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=d6045d0ac615b5984b72e83cb25aa8a245a177a0",
        "patch": "@@ -3705,7 +3705,7 @@ bool CWallet::Verify(interfaces::Chain& chain, const WalletLocation& location, b\n     }\n \n     // Keep same database environment instance across Verify/Recover calls below.\n-    std::unique_ptr<WalletDatabase> database = WalletDatabase::Create(wallet_path);\n+    std::unique_ptr<WalletDatabase> database = CreateWalletDatabase(wallet_path);\n \n     try {\n         if (!WalletBatch::VerifyEnvironment(wallet_path, error_string)) {\n@@ -3729,7 +3729,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n     if (gArgs.GetBoolArg(\"-zapwallettxes\", false)) {\n         chain.initMessage(_(\"Zapping all transactions from wallet...\").translated);\n \n-        std::unique_ptr<CWallet> tempWallet = MakeUnique<CWallet>(&chain, location, WalletDatabase::Create(location.GetPath()));\n+        std::unique_ptr<CWallet> tempWallet = MakeUnique<CWallet>(&chain, location, CreateWalletDatabase(location.GetPath()));\n         DBErrors nZapWalletRet = tempWallet->ZapWalletTx(vWtx);\n         if (nZapWalletRet != DBErrors::LOAD_OK) {\n             error = strprintf(_(\"Error loading %s: Wallet corrupted\"), walletFile);\n@@ -3743,7 +3743,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n     bool fFirstRun = true;\n     // TODO: Can't use std::make_shared because we need a custom deleter but\n     // should be possible to use std::allocate_shared.\n-    std::shared_ptr<CWallet> walletInstance(new CWallet(&chain, location, WalletDatabase::Create(location.GetPath())), ReleaseWallet);\n+    std::shared_ptr<CWallet> walletInstance(new CWallet(&chain, location, CreateWalletDatabase(location.GetPath())), ReleaseWallet);\n     DBErrors nLoadWalletRet = walletInstance->LoadWallet(fFirstRun);\n     if (nLoadWalletRet != DBErrors::LOAD_OK) {\n         if (nLoadWalletRet == DBErrors::CORRUPT) {"
      },
      {
        "sha": "77ed6beb5ddb69021943c0d57ea4f73cebf19de3",
        "filename": "src/wallet/wallettool.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6045d0ac615b5984b72e83cb25aa8a245a177a0/src/wallet/wallettool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6045d0ac615b5984b72e83cb25aa8a245a177a0/src/wallet/wallettool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallettool.cpp?ref=d6045d0ac615b5984b72e83cb25aa8a245a177a0",
        "patch": "@@ -28,7 +28,7 @@ static std::shared_ptr<CWallet> CreateWallet(const std::string& name, const fs::\n         return nullptr;\n     }\n     // dummy chain interface\n-    std::shared_ptr<CWallet> wallet_instance(new CWallet(nullptr /* chain */, WalletLocation(name), WalletDatabase::Create(path)), WalletToolReleaseWallet);\n+    std::shared_ptr<CWallet> wallet_instance(new CWallet(nullptr /* chain */, WalletLocation(name), CreateWalletDatabase(path)), WalletToolReleaseWallet);\n     LOCK(wallet_instance->cs_wallet);\n     bool first_run = true;\n     DBErrors load_wallet_ret = wallet_instance->LoadWallet(first_run);\n@@ -57,7 +57,7 @@ static std::shared_ptr<CWallet> LoadWallet(const std::string& name, const fs::pa\n     }\n \n     // dummy chain interface\n-    std::shared_ptr<CWallet> wallet_instance(new CWallet(nullptr /* chain */, WalletLocation(name), WalletDatabase::Create(path)), WalletToolReleaseWallet);\n+    std::shared_ptr<CWallet> wallet_instance(new CWallet(nullptr /* chain */, WalletLocation(name), CreateWalletDatabase(path)), WalletToolReleaseWallet);\n     DBErrors load_wallet_ret;\n     try {\n         bool first_run;\n@@ -107,7 +107,7 @@ static void WalletShowInfo(CWallet* wallet_instance)\n static bool SalvageWallet(const fs::path& path)\n {\n     // Create a Database handle to allow for the db to be initialized before recovery\n-    std::unique_ptr<WalletDatabase> database = WalletDatabase::Create(path);\n+    std::unique_ptr<WalletDatabase> database = CreateWalletDatabase(path);\n \n     // Initialize the environment before recovery\n     bilingual_str error_string;"
      }
    ]
  },
  {
    "sha": "da7a83c5ee6a51ff4c3eb35dbd447a310c4a0387",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYTdhODNjNWVlNmE1MWZmNGMzZWIzNWRiZDQ0N2EzMTBjNGEwMzg3",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-06-17T16:32:23Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-06-17T18:13:17Z"
      },
      "message": "Remove WalletDatabase::Create, CreateMock, and CreateDummy\n\nThese are superseded by CreateWalletDatabase, CreateMockWalletDatabase,\nand CreateDummyWalletDatabase",
      "tree": {
        "sha": "55c09c639db7bb2bc90d0e629a3caba298458d63",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/55c09c639db7bb2bc90d0e629a3caba298458d63"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/da7a83c5ee6a51ff4c3eb35dbd447a310c4a0387",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da7a83c5ee6a51ff4c3eb35dbd447a310c4a0387",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/da7a83c5ee6a51ff4c3eb35dbd447a310c4a0387",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da7a83c5ee6a51ff4c3eb35dbd447a310c4a0387/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d6045d0ac615b5984b72e83cb25aa8a245a177a0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6045d0ac615b5984b72e83cb25aa8a245a177a0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d6045d0ac615b5984b72e83cb25aa8a245a177a0"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 0,
      "deletions": 19
    },
    "files": [
      {
        "sha": "9bab9ee20973acbe9cef0eef959c3f56ed59154e",
        "filename": "src/wallet/bdb.h",
        "status": "modified",
        "additions": 0,
        "deletions": 19,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da7a83c5ee6a51ff4c3eb35dbd447a310c4a0387/src/wallet/bdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da7a83c5ee6a51ff4c3eb35dbd447a310c4a0387/src/wallet/bdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.h?ref=da7a83c5ee6a51ff4c3eb35dbd447a310c4a0387",
        "patch": "@@ -120,25 +120,6 @@ class BerkeleyDatabase\n         }\n     }\n \n-    /** Return object for accessing database at specified path. */\n-    static std::unique_ptr<BerkeleyDatabase> Create(const fs::path& path)\n-    {\n-        std::string filename;\n-        return MakeUnique<BerkeleyDatabase>(GetWalletEnv(path, filename), std::move(filename));\n-    }\n-\n-    /** Return object for accessing dummy database with no read/write capabilities. */\n-    static std::unique_ptr<BerkeleyDatabase> CreateDummy()\n-    {\n-        return MakeUnique<BerkeleyDatabase>();\n-    }\n-\n-    /** Return object for accessing temporary in-memory database. */\n-    static std::unique_ptr<BerkeleyDatabase> CreateMock()\n-    {\n-        return MakeUnique<BerkeleyDatabase>(std::make_shared<BerkeleyEnvironment>(), \"\");\n-    }\n-\n     /** Rewrite the entire database on disk, with the exception of key pszSkip if non-zero\n      */\n     bool Rewrite(const char* pszSkip=nullptr);"
      }
    ]
  }
]