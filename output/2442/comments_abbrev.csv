Diapolo,2013-04-02T14:44:00Z,"@laanwj I reverted the qApp thing, should be fine now :).\n",https://github.com/bitcoin/bitcoin/pull/2442#issuecomment-15779268,15779268,
BitcoinPullTester,2013-04-03T02:13:27Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/bfad9982f84ef97b0f73eb260cf64e3bbeb2e8f0 for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/cu",https://github.com/bitcoin/bitcoin/pull/2442#issuecomment-15813997,15813997,
laanwj,2013-04-02T12:33:58Z,postEvent is a static method in the QApplication class; there is no reason to use an instance (qApp) here.\n,https://github.com/bitcoin/bitcoin/pull/2442#discussion_r3616835,3616835,src/qt/rpcconsole.cpp
Diapolo,2013-04-02T13:36:49Z,"@laanwj Perhaps I was a bit over-eager once more, can we find a defined state as to when we use qApp global pointer and when we use QApplication:: or QCoreApplication::instance()? I thought qApp is fine everywhere, see https://qt-project.org/doc/qt-4.8/qapplication.html#qApp. Goal was to have it used the same everywhere in the Qt code.\n",https://github.com/bitcoin/bitcoin/pull/2442#discussion_r3617680,3617680,src/qt/rpcconsole.cpp
laanwj,2013-04-02T14:33:29Z,"`qApp` when it's a normal method of the `QApplication` object, `QApplication::` when it's a static method. `QCoreApplication::instance()` is a longer way of writing `qApp` so is never necessary.\n",https://github.com/bitcoin/bitcoin/pull/2442#discussion_r3618745,3618745,src/qt/rpcconsole.cpp
Diapolo,2013-04-02T14:38:11Z,"Alright, so for static methods we always intend to use QApplication:: and for the rest you mentioned it's qApp then. Will update this!\n",https://github.com/bitcoin/bitcoin/pull/2442#discussion_r3618849,3618849,src/qt/rpcconsole.cpp
