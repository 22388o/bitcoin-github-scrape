[
  {
    "sha": "8d1de43f0cbc79940d870d0ba09c7d28dd812ef8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZDFkZTQzZjBjYmM3OTk0MGQ4NzBkMGJhMDljN2QyOGRkODEyZWY4",
    "commit": {
      "author": {
        "name": "Leviathn",
        "email": "johnny@blockstream.io",
        "date": "2016-02-11T02:29:13Z"
      },
      "committer": {
        "name": "Leviathn",
        "email": "johnny@blockstream.io",
        "date": "2016-02-11T02:29:13Z"
      },
      "message": "Remove internal miner\n\nThis code removes the internal miner which is only useful on Testnet.\nThis leaves the internal miner that is useful on RegTest intact.",
      "tree": {
        "sha": "5f50b7723daa0eb6fe8312e7897148d5abf66b4a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5f50b7723daa0eb6fe8312e7897148d5abf66b4a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8d1de43f0cbc79940d870d0ba09c7d28dd812ef8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d1de43f0cbc79940d870d0ba09c7d28dd812ef8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8d1de43f0cbc79940d870d0ba09c7d28dd812ef8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d1de43f0cbc79940d870d0ba09c7d28dd812ef8/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "2f3f4af4cc2b92b8758858d0a1c13635065eb379",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f3f4af4cc2b92b8758858d0a1c13635065eb379",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2f3f4af4cc2b92b8758858d0a1c13635065eb379"
      }
    ],
    "stats": {
      "total": 288,
      "additions": 0,
      "deletions": 288
    },
    "files": [
      {
        "sha": "05d71b4792b36196c46a2b64ef23389d42ac7357",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d1de43f0cbc79940d870d0ba09c7d28dd812ef8/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d1de43f0cbc79940d870d0ba09c7d28dd812ef8/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=8d1de43f0cbc79940d870d0ba09c7d28dd812ef8",
        "patch": "@@ -194,7 +194,6 @@ void Shutdown()\n     if (pwalletMain)\n         pwalletMain->Flush(false);\n #endif\n-    GenerateBitcoins(false, 0, Params());\n     StopNode();\n     StopTorControl();\n     UnregisterNodeSignals(GetNodeSignals());\n@@ -453,8 +452,6 @@ std::string HelpMessage(HelpMessageMode mode)\n         _(\"If <category> is not supplied or if <category> = 1, output all debugging information.\") + _(\"<category> can be:\") + \" \" + debugCategories + \".\");\n     if (showDebug)\n         strUsage += HelpMessageOpt(\"-nodebug\", \"Turn off debugging messages, same as -debug=0\");\n-    strUsage += HelpMessageOpt(\"-gen\", strprintf(_(\"Generate coins (default: %u)\"), DEFAULT_GENERATE));\n-    strUsage += HelpMessageOpt(\"-genproclimit=<n>\", strprintf(_(\"Set the number of threads for coin generation if enabled (-1 = all cores, default: %d)\"), DEFAULT_GENERATE_THREADS));\n     strUsage += HelpMessageOpt(\"-help-debug\", _(\"Show all debugging options (usage: --help -help-debug)\"));\n     strUsage += HelpMessageOpt(\"-logips\", strprintf(_(\"Include IP addresses in debug output (default: %u)\"), DEFAULT_LOGIPS));\n     strUsage += HelpMessageOpt(\"-logtimestamps\", strprintf(_(\"Prepend debug output with timestamp (default: %u)\"), DEFAULT_LOGTIMESTAMPS));\n@@ -1670,9 +1667,6 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n                                          boost::ref(cs_main), boost::cref(pindexBestHeader), nPowTargetSpacing);\n     scheduler.scheduleEvery(f, nPowTargetSpacing);\n \n-    // Generate coins in the background\n-    GenerateBitcoins(GetBoolArg(\"-gen\", DEFAULT_GENERATE), GetArg(\"-genproclimit\", DEFAULT_GENERATE_THREADS), chainparams);\n-\n     // ********************************************************* Step 12: finished\n \n     SetRPCWarmupFinished();"
      },
      {
        "sha": "41f4f1cdb6eec3a6ea6b18fc616886d734167812",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 203,
        "changes": 203,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d1de43f0cbc79940d870d0ba09c7d28dd812ef8/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d1de43f0cbc79940d870d0ba09c7d28dd812ef8/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=8d1de43f0cbc79940d870d0ba09c7d28dd812ef8",
        "patch": "@@ -315,206 +315,3 @@ void IncrementExtraNonce(CBlock* pblock, const CBlockIndex* pindexPrev, unsigned\n     pblock->vtx[0] = txCoinbase;\n     pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n }\n-\n-//////////////////////////////////////////////////////////////////////////////\n-//\n-// Internal miner\n-//\n-\n-//\n-// ScanHash scans nonces looking for a hash with at least some zero bits.\n-// The nonce is usually preserved between calls, but periodically or if the\n-// nonce is 0xffff0000 or above, the block is rebuilt and nNonce starts over at\n-// zero.\n-//\n-bool static ScanHash(const CBlockHeader *pblock, uint32_t& nNonce, uint256 *phash)\n-{\n-    // Write the first 76 bytes of the block header to a double-SHA256 state.\n-    CHash256 hasher;\n-    CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n-    ss << *pblock;\n-    assert(ss.size() == 80);\n-    hasher.Write((unsigned char*)&ss[0], 76);\n-\n-    while (true) {\n-        nNonce++;\n-\n-        // Write the last 4 bytes of the block header (the nonce) to a copy of\n-        // the double-SHA256 state, and compute the result.\n-        CHash256(hasher).Write((unsigned char*)&nNonce, 4).Finalize((unsigned char*)phash);\n-\n-        // Return the nonce if the hash has at least some zero bits,\n-        // caller will check if it has enough to reach the target\n-        if (((uint16_t*)phash)[15] == 0)\n-            return true;\n-\n-        // If nothing found after trying for a while, return -1\n-        if ((nNonce & 0xfff) == 0)\n-            return false;\n-    }\n-}\n-\n-static bool ProcessBlockFound(const CBlock* pblock, const CChainParams& chainparams)\n-{\n-    LogPrintf(\"%s\\n\", pblock->ToString());\n-    LogPrintf(\"generated %s\\n\", FormatMoney(pblock->vtx[0].vout[0].nValue));\n-\n-    // Found a solution\n-    {\n-        LOCK(cs_main);\n-        if (pblock->hashPrevBlock != chainActive.Tip()->GetBlockHash())\n-            return error(\"BitcoinMiner: generated block is stale\");\n-    }\n-\n-    // Inform about the new block\n-    GetMainSignals().BlockFound(pblock->GetHash());\n-\n-    // Process this block the same as if we had received it from another node\n-    CValidationState state;\n-    if (!ProcessNewBlock(state, chainparams, NULL, pblock, true, NULL))\n-        return error(\"BitcoinMiner: ProcessNewBlock, block not accepted\");\n-\n-    return true;\n-}\n-\n-void static BitcoinMiner(const CChainParams& chainparams)\n-{\n-    LogPrintf(\"BitcoinMiner started\\n\");\n-    SetThreadPriority(THREAD_PRIORITY_LOWEST);\n-    RenameThread(\"bitcoin-miner\");\n-\n-    unsigned int nExtraNonce = 0;\n-\n-    boost::shared_ptr<CReserveScript> coinbaseScript;\n-    GetMainSignals().ScriptForMining(coinbaseScript);\n-\n-    try {\n-        // Throw an error if no script was provided.  This can happen\n-        // due to some internal error but also if the keypool is empty.\n-        // In the latter case, already the pointer is NULL.\n-        if (!coinbaseScript || coinbaseScript->reserveScript.empty())\n-            throw std::runtime_error(\"No coinbase script available (mining requires a wallet)\");\n-\n-        while (true) {\n-            if (chainparams.MiningRequiresPeers()) {\n-                // Busy-wait for the network to come online so we don't waste time mining\n-                // on an obsolete chain. In regtest mode we expect to fly solo.\n-                do {\n-                    bool fvNodesEmpty;\n-                    {\n-                        LOCK(cs_vNodes);\n-                        fvNodesEmpty = vNodes.empty();\n-                    }\n-                    if (!fvNodesEmpty && !IsInitialBlockDownload())\n-                        break;\n-                    MilliSleep(1000);\n-                } while (true);\n-            }\n-\n-            //\n-            // Create new block\n-            //\n-            unsigned int nTransactionsUpdatedLast = mempool.GetTransactionsUpdated();\n-            CBlockIndex* pindexPrev = chainActive.Tip();\n-\n-            auto_ptr<CBlockTemplate> pblocktemplate(CreateNewBlock(chainparams, coinbaseScript->reserveScript));\n-            if (!pblocktemplate.get())\n-            {\n-                LogPrintf(\"Error in BitcoinMiner: Keypool ran out, please call keypoolrefill before restarting the mining thread\\n\");\n-                return;\n-            }\n-            CBlock *pblock = &pblocktemplate->block;\n-            IncrementExtraNonce(pblock, pindexPrev, nExtraNonce);\n-\n-            LogPrintf(\"Running BitcoinMiner with %u transactions in block (%u bytes)\\n\", pblock->vtx.size(),\n-                ::GetSerializeSize(*pblock, SER_NETWORK, PROTOCOL_VERSION));\n-\n-            //\n-            // Search\n-            //\n-            int64_t nStart = GetTime();\n-            arith_uint256 hashTarget = arith_uint256().SetCompact(pblock->nBits);\n-            uint256 hash;\n-            uint32_t nNonce = 0;\n-            while (true) {\n-                // Check if something found\n-                if (ScanHash(pblock, nNonce, &hash))\n-                {\n-                    if (UintToArith256(hash) <= hashTarget)\n-                    {\n-                        // Found a solution\n-                        pblock->nNonce = nNonce;\n-                        assert(hash == pblock->GetHash());\n-\n-                        SetThreadPriority(THREAD_PRIORITY_NORMAL);\n-                        LogPrintf(\"BitcoinMiner:\\n\");\n-                        LogPrintf(\"proof-of-work found  \\n  hash: %s  \\ntarget: %s\\n\", hash.GetHex(), hashTarget.GetHex());\n-                        ProcessBlockFound(pblock, chainparams);\n-                        SetThreadPriority(THREAD_PRIORITY_LOWEST);\n-                        coinbaseScript->KeepScript();\n-\n-                        // In regression test mode, stop mining after a block is found.\n-                        if (chainparams.MineBlocksOnDemand())\n-                            throw boost::thread_interrupted();\n-\n-                        break;\n-                    }\n-                }\n-\n-                // Check for stop or if block needs to be rebuilt\n-                boost::this_thread::interruption_point();\n-                // Regtest mode doesn't require peers\n-                if (vNodes.empty() && chainparams.MiningRequiresPeers())\n-                    break;\n-                if (nNonce >= 0xffff0000)\n-                    break;\n-                if (mempool.GetTransactionsUpdated() != nTransactionsUpdatedLast && GetTime() - nStart > 60)\n-                    break;\n-                if (pindexPrev != chainActive.Tip())\n-                    break;\n-\n-                // Update nTime every few seconds\n-                if (UpdateTime(pblock, chainparams.GetConsensus(), pindexPrev) < 0)\n-                    break; // Recreate the block if the clock has run backwards,\n-                           // so that we can use the correct time.\n-                if (chainparams.GetConsensus().fPowAllowMinDifficultyBlocks)\n-                {\n-                    // Changing pblock->nTime can change work required on testnet:\n-                    hashTarget.SetCompact(pblock->nBits);\n-                }\n-            }\n-        }\n-    }\n-    catch (const boost::thread_interrupted&)\n-    {\n-        LogPrintf(\"BitcoinMiner terminated\\n\");\n-        throw;\n-    }\n-    catch (const std::runtime_error &e)\n-    {\n-        LogPrintf(\"BitcoinMiner runtime error: %s\\n\", e.what());\n-        return;\n-    }\n-}\n-\n-void GenerateBitcoins(bool fGenerate, int nThreads, const CChainParams& chainparams)\n-{\n-    static boost::thread_group* minerThreads = NULL;\n-\n-    if (nThreads < 0)\n-        nThreads = GetNumCores();\n-\n-    if (minerThreads != NULL)\n-    {\n-        minerThreads->interrupt_all();\n-        delete minerThreads;\n-        minerThreads = NULL;\n-    }\n-\n-    if (nThreads == 0 || !fGenerate)\n-        return;\n-\n-    minerThreads = new boost::thread_group();\n-    for (int i = 0; i < nThreads; i++)\n-        minerThreads->create_thread(boost::bind(&BitcoinMiner, boost::cref(chainparams)));\n-}"
      },
      {
        "sha": "cd0f1366253ab78f76f37f8b0c24ff4e0d617a54",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d1de43f0cbc79940d870d0ba09c7d28dd812ef8/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d1de43f0cbc79940d870d0ba09c7d28dd812ef8/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=8d1de43f0cbc79940d870d0ba09c7d28dd812ef8",
        "patch": "@@ -17,9 +17,6 @@ class CScript;\n class CWallet;\n namespace Consensus { struct Params; };\n \n-static const bool DEFAULT_GENERATE = false;\n-static const int DEFAULT_GENERATE_THREADS = 1;\n-\n static const bool DEFAULT_PRINTPRIORITY = false;\n \n struct CBlockTemplate\n@@ -29,8 +26,6 @@ struct CBlockTemplate\n     std::vector<int64_t> vTxSigOps;\n };\n \n-/** Run the miner threads */\n-void GenerateBitcoins(bool fGenerate, int nThreads, const CChainParams& chainparams);\n /** Generate a new block, without valid proof-of-work */\n CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& scriptPubKeyIn);\n /** Modify the extranonce in a block */"
      },
      {
        "sha": "b127a3f1a3be837230e4b9728893215d0c40bb15",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d1de43f0cbc79940d870d0ba09c7d28dd812ef8/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d1de43f0cbc79940d870d0ba09c7d28dd812ef8/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=8d1de43f0cbc79940d870d0ba09c7d28dd812ef8",
        "patch": "@@ -27,8 +27,6 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"stop\", 0 },\n     { \"setmocktime\", 0 },\n     { \"getaddednodeinfo\", 0 },\n-    { \"setgenerate\", 0 },\n-    { \"setgenerate\", 1 },\n     { \"generate\", 0 },\n     { \"getnetworkhashps\", 0 },\n     { \"getnetworkhashps\", 1 },\n@@ -160,4 +158,3 @@ UniValue RPCConvertValues(const std::string &strMethod, const std::vector<std::s\n \n     return params;\n }\n-"
      },
      {
        "sha": "b124c2bc3a85d73dcbcdeca32a3a35d6973a29e7",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 67,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d1de43f0cbc79940d870d0ba09c7d28dd812ef8/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d1de43f0cbc79940d870d0ba09c7d28dd812ef8/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=8d1de43f0cbc79940d870d0ba09c7d28dd812ef8",
        "patch": "@@ -93,25 +93,6 @@ UniValue getnetworkhashps(const UniValue& params, bool fHelp)\n     return GetNetworkHashPS(params.size() > 0 ? params[0].get_int() : 120, params.size() > 1 ? params[1].get_int() : -1);\n }\n \n-UniValue getgenerate(const UniValue& params, bool fHelp)\n-{\n-    if (fHelp || params.size() != 0)\n-        throw runtime_error(\n-            \"getgenerate\\n\"\n-            \"\\nReturn if the server is set to generate coins or not. The default is false.\\n\"\n-            \"It is set with the command line argument -gen (or \" + std::string(BITCOIN_CONF_FILENAME) + \" setting gen)\\n\"\n-            \"It can also be set with the setgenerate call.\\n\"\n-            \"\\nResult\\n\"\n-            \"true|false      (boolean) If the server is set to generate coins or not\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getgenerate\", \"\")\n-            + HelpExampleRpc(\"getgenerate\", \"\")\n-        );\n-\n-    LOCK(cs_main);\n-    return GetBoolArg(\"-gen\", DEFAULT_GENERATE);\n-}\n-\n UniValue generate(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 1)\n@@ -182,50 +163,6 @@ UniValue generate(const UniValue& params, bool fHelp)\n     return blockHashes;\n }\n \n-UniValue setgenerate(const UniValue& params, bool fHelp)\n-{\n-    if (fHelp || params.size() < 1 || params.size() > 2)\n-        throw runtime_error(\n-            \"setgenerate generate ( genproclimit )\\n\"\n-            \"\\nSet 'generate' true or false to turn generation on or off.\\n\"\n-            \"Generation is limited to 'genproclimit' processors, -1 is unlimited.\\n\"\n-            \"See the getgenerate call for the current setting.\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. generate         (boolean, required) Set to true to turn on generation, off to turn off.\\n\"\n-            \"2. genproclimit     (numeric, optional) Set the processor limit for when generation is on. Can be -1 for unlimited.\\n\"\n-            \"\\nExamples:\\n\"\n-            \"\\nSet the generation on with a limit of one processor\\n\"\n-            + HelpExampleCli(\"setgenerate\", \"true 1\") +\n-            \"\\nCheck the setting\\n\"\n-            + HelpExampleCli(\"getgenerate\", \"\") +\n-            \"\\nTurn off generation\\n\"\n-            + HelpExampleCli(\"setgenerate\", \"false\") +\n-            \"\\nUsing json rpc\\n\"\n-            + HelpExampleRpc(\"setgenerate\", \"true, 1\")\n-        );\n-\n-    if (Params().MineBlocksOnDemand())\n-        throw JSONRPCError(RPC_METHOD_NOT_FOUND, \"Use the generate method instead of setgenerate on this network\");\n-\n-    bool fGenerate = true;\n-    if (params.size() > 0)\n-        fGenerate = params[0].get_bool();\n-\n-    int nGenProcLimit = GetArg(\"-genproclimit\", DEFAULT_GENERATE_THREADS);\n-    if (params.size() > 1)\n-    {\n-        nGenProcLimit = params[1].get_int();\n-        if (nGenProcLimit == 0)\n-            fGenerate = false;\n-    }\n-\n-    mapArgs[\"-gen\"] = (fGenerate ? \"1\" : \"0\");\n-    mapArgs [\"-genproclimit\"] = itostr(nGenProcLimit);\n-    GenerateBitcoins(fGenerate, nGenProcLimit, Params());\n-\n-    return NullUniValue;\n-}\n-\n UniValue getmininginfo(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n@@ -239,8 +176,6 @@ UniValue getmininginfo(const UniValue& params, bool fHelp)\n             \"  \\\"currentblocktx\\\": nnn,     (numeric) The last block transaction\\n\"\n             \"  \\\"difficulty\\\": xxx.xxxxx    (numeric) The current difficulty\\n\"\n             \"  \\\"errors\\\": \\\"...\\\"          (string) Current errors\\n\"\n-            \"  \\\"generate\\\": true|false     (boolean) If the generation is on or off (see getgenerate or setgenerate calls)\\n\"\n-            \"  \\\"genproclimit\\\": n          (numeric) The processor limit for generation. -1 if no generation. (see getgenerate or setgenerate calls)\\n\"\n             \"  \\\"pooledtx\\\": n              (numeric) The size of the mem pool\\n\"\n             \"  \\\"testnet\\\": true|false      (boolean) If using testnet or not\\n\"\n             \"  \\\"chain\\\": \\\"xxxx\\\",         (string) current network name as defined in BIP70 (main, test, regtest)\\n\"\n@@ -259,12 +194,10 @@ UniValue getmininginfo(const UniValue& params, bool fHelp)\n     obj.push_back(Pair(\"currentblocktx\",   (uint64_t)nLastBlockTx));\n     obj.push_back(Pair(\"difficulty\",       (double)GetDifficulty()));\n     obj.push_back(Pair(\"errors\",           GetWarnings(\"statusbar\")));\n-    obj.push_back(Pair(\"genproclimit\",     (int)GetArg(\"-genproclimit\", DEFAULT_GENERATE_THREADS)));\n     obj.push_back(Pair(\"networkhashps\",    getnetworkhashps(params, false)));\n     obj.push_back(Pair(\"pooledtx\",         (uint64_t)mempool.size()));\n     obj.push_back(Pair(\"testnet\",          Params().TestnetToBeDeprecatedFieldRPC()));\n     obj.push_back(Pair(\"chain\",            Params().NetworkIDString()));\n-    obj.push_back(Pair(\"generate\",         getgenerate(params, false)));\n     return obj;\n }\n "
      },
      {
        "sha": "77076e029546e16bc2a49f8637699b52c81f8fb2",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d1de43f0cbc79940d870d0ba09c7d28dd812ef8/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d1de43f0cbc79940d870d0ba09c7d28dd812ef8/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=8d1de43f0cbc79940d870d0ba09c7d28dd812ef8",
        "patch": "@@ -298,8 +298,6 @@ static const CRPCCommand vRPCCommands[] =\n     { \"mining\",             \"submitblock\",            &submitblock,            true  },\n \n     /* Coin generation */\n-    { \"generating\",         \"getgenerate\",            &getgenerate,            true  },\n-    { \"generating\",         \"setgenerate\",            &setgenerate,            true  },\n     { \"generating\",         \"generate\",               &generate,               true  },\n \n     /* Raw transactions */"
      },
      {
        "sha": "a5e9ea36cee65b01a6a7ea631fd18fc69f05915b",
        "filename": "src/rpc/server.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d1de43f0cbc79940d870d0ba09c7d28dd812ef8/src/rpc/server.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d1de43f0cbc79940d870d0ba09c7d28dd812ef8/src/rpc/server.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.h?ref=8d1de43f0cbc79940d870d0ba09c7d28dd812ef8",
        "patch": "@@ -186,8 +186,6 @@ extern UniValue setban(const UniValue& params, bool fHelp);\n extern UniValue listbanned(const UniValue& params, bool fHelp);\n extern UniValue clearbanned(const UniValue& params, bool fHelp);\n \n-extern UniValue getgenerate(const UniValue& params, bool fHelp); // in rpc/mining.cpp\n-extern UniValue setgenerate(const UniValue& params, bool fHelp);\n extern UniValue generate(const UniValue& params, bool fHelp);\n extern UniValue getnetworkhashps(const UniValue& params, bool fHelp);\n extern UniValue getmininginfo(const UniValue& params, bool fHelp);"
      }
    ]
  }
]