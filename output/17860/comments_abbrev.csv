practicalswift,2020-01-03 21:36:42,"Super strong concept ACK: very happy to see more people interested in adding fuzzers. Very welcome! :)\n\nAlso: the habit of after fixing a security bug also implementing a fuzz target that could have found the bug is something I think we should strive for. I think @kcc (known for making C++ reasonably sane by introducing the sanitizers, libFuzzer, OSS-Fuzz, CFI, etc.) first coined the term ""reg",https://github.com/bitcoin/bitcoin/pull/17860#issuecomment-570705528,570705528,
DrahtBot,2020-01-03 23:35:07,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/17860#issuecomment-570729631,570729631,
Crypt-iQ,2020-01-08 01:12:14,"This is kind of an aside, but thought I'd post here since this harness makes use of the `ConsumeIntegralInRange` function and I'm curious what others think.\n\nI modified `FuzzedDataProvider.h` to ignore byte 48 so that afl-tmin could minimize better.  `afl-tmin` zeros out redundant data with ascii '0' (http://lcamtuf.coredump.cx/afl/technical_details.txt) - this is done to reduce the number of ",https://github.com/bitcoin/bitcoin/pull/17860#issuecomment-571846309,571846309,
practicalswift,2020-01-10 15:07:08,"Very nice fuzzing harness! Thanks for adding!\n\nTested ACK 5b90f46b0217af88dd3a88b028c2919361bdade5 modulo squash of last commit\n\nCompared to the other fuzzers this one is very slow (6 executions/second), but I guess that is largely unavoidable given the code being tested :)\n\nAlso, a slow fuzzing harness is better than no fuzzing harness.",https://github.com/bitcoin/bitcoin/pull/17860#issuecomment-573071927,573071927,
MarcoFalke,2020-01-10 15:40:13,"> Compared to the other fuzzers this one is very slow (6 executions/second), but I guess that is largely unavoidable given the code being tested :)\n\nGood question. This is actually a question in the review club next week: https://bitcoincore.reviews/17860.html\n\nYou (and all other reviewers) are invited to join and share your thoughts and ideas.",https://github.com/bitcoin/bitcoin/pull/17860#issuecomment-573085851,573085851,
practicalswift,2020-01-10 16:12:03,ACK 8b868f1741d37d97d09218093bc9434bbe5a749d,https://github.com/bitcoin/bitcoin/pull/17860#issuecomment-573099391,573099391,
rajarshimaitra,2020-01-11 11:43:09,"I am trying fuzzing `utxo_total_supply` with AFL and the fuzz is returning crash like this:\n`[-] PROGRAM ABORT : Test case 'id:000000,orig:f66a2f2925ab9d377ea5c18ba941e7d1601b7509' results in a crash`\n\nOne possible cause for crash is memory limit as reported by the fuzzer (52MB), and it suggests doing this:\n`( ulimit -Sv $[51 << 10]; /path/to/binary [...] <testcase )`\n\nWhile setting ul",https://github.com/bitcoin/bitcoin/pull/17860#issuecomment-573309381,573309381,
practicalswift,2020-01-13 15:39:58,"@codeShark149 Does it work if you fuzz with `libFuzzer` instead?\n\nTry this:\n\n```\n$ make distclean\n$ ./autogen.sh\n$ CC=clang CXX=clang++ ./configure --enable-fuzz --with-sanitizers=address,fuzzer,undefined\n$ make\n$ src/test/fuzz/utxo_total_supply\n```",https://github.com/bitcoin/bitcoin/pull/17860#issuecomment-573724886,573724886,
Crypt-iQ,2020-01-13 15:43:56,"@codeShark149 I fixed that error on macOS by turning AFL's forkserver off `export AFL_NO_FORKSRV=1`.  If AFL continually crashes on the initial input, then it's probably because the binary isn't being instrumented correctly.",https://github.com/bitcoin/bitcoin/pull/17860#issuecomment-573726974,573726974,
practicalswift,2020-01-13 16:29:04,"I've played a bit more with this harness:\n\nI'm currently using a seed corpus of 3247 files. I'm fuzzing at a rate of 6 execs/second which means that it takes almost ten minutes just to initialize `libFuzzer` with all seeds in a fuzzing session.\n\nA lot of the time is spent setting up (and tearing down) the `TestingSetup` object for each input.\n\nCan we think of ways to speed up this fuzz",https://github.com/bitcoin/bitcoin/pull/17860#issuecomment-573749950,573749950,
instagibbs,2020-01-13 16:32:24,"@practicalswift I suspected as much, that the testing harness is the heavy part of the test. On my non-beefy machine it looks like I'm getting 1 a second?\n\nAlternative might be to allow it to run longer to build a longer chain?",https://github.com/bitcoin/bitcoin/pull/17860#issuecomment-573751619,573751619,
practicalswift,2020-01-13 16:43:55,"Another data point:\n\nAs a crude way to quantify the impact of the test setup I made `TestingSetup` persistent across test inputs (`static TestingSetup`). That obviously invalidates all assertions (and thus makes the fuzzer meaningless), but the speed jumps to 32 exec/second.",https://github.com/bitcoin/bitcoin/pull/17860#issuecomment-573757270,573757270,
sanjaykdragon,2020-01-13 17:30:24,"> I've played a bit more with this harness:\n> \n> I'm currently using a seed corpus of 3247 files. I'm fuzzing at a rate of 6 execs/second which means that it takes almost ten minutes just to initialize `libFuzzer` with all seeds in a fuzzing session.\n> \n> A lot of the time is spent setting up (and tearing down) the `TestingSetup` object for each input.\n> \n> Can we think of ways to spee",https://github.com/bitcoin/bitcoin/pull/17860#issuecomment-573778424,573778424,
practicalswift,2020-01-13 22:05:49,"@sanjaykdragon I don't have any profiler view to post :)  The quoted numbers are from the output you'll get when running `utxo_total_supply` with `libFuzzer` using the following steps\n\n```\n$ make distclean\n$ ./autogen.sh\n$ CC=clang CXX=clang++ ./configure --enable-fuzz \\n      --with-sanitizers=address,fuzzer,undefined\n$ make\n$ src/test/fuzz/utxo_total_supply\n```",https://github.com/bitcoin/bitcoin/pull/17860#issuecomment-573894611,573894611,
rajarshimaitra,2020-01-14 15:18:00,"> @codeShark149 Does it work if you fuzz with `libFuzzer` instead?\n\n\n@practicalswift yes libfuzzer can fuzz it. \n\n\n\n> @codeShark149 I fixed that error on macOS by turning AFL's forkserver off `export AFL_NO_FORKSRV=1`.\n\n@Crypt-iQ thanks for suggesting but for some reason that did'nt work. The problem is simple though. The instrumented binary takes about 103 MB memory to run. So j",https://github.com/bitcoin/bitcoin/pull/17860#issuecomment-574223927,574223927,
fjahr,2020-01-17 00:54:29,"Tested ACK 8b868f1\n\nReviewed code and successfully ran with AFL.",https://github.com/bitcoin/bitcoin/pull/17860#issuecomment-575416508,575416508,
jonatack,2020-01-17 11:09:18,"Now running since 2 1l2 days, taking > 1 gb of RAM, and it's slowed to a crawl of < 10 executions per minute and still has not found the CVE. It also drains my laptop battery at least twice faster than normal.\n```\n#22184	REDUCE cov: 48346 ft: 261959 corp: 1540/3628Kb exec/s: 0 rss: 1020Mb L: 4077/4096 MS: 1 EraseBytes-\n#22285	NEW    cov: 48346 ft: 261963 corp: 1541/3632Kb exec/s: 0 rss: 1020",https://github.com/bitcoin/bitcoin/pull/17860#issuecomment-575582915,575582915,
MarcoFalke,2020-01-18 23:06:43,"@jonatack The increase in memory usage and slow-down is clearly undesired.  Which version of clang are you using? I presume 3.8? Could you try with https://packages.debian.org/stretch-backports/clang-6.0 , or even later, if possible?\n\nYour patch to reintroduce the CVE looks correct.\n\n",https://github.com/bitcoin/bitcoin/pull/17860#issuecomment-575946553,575946553,
jonatack,2020-01-19 12:13:56,"@MarcoFalke thanks, and good idea to verify the clang version. I've been using:\n\n```\n$ clang --version\nclang version 6.0.0 (tags/RELEASE_600/final)\nTarget: x86_64-unknown-linux-gnu\nThread model: posix\nInstalledDir: /usr/local/bin\n```\nWhich version are you running?",https://github.com/bitcoin/bitcoin/pull/17860#issuecomment-575998600,575998600,
MarcoFalke,2020-01-19 15:17:45,"I've been using Ubuntu Focal clang-9:\n\n```\n$ clang --version \nclang version 9.0.1-6build1 \nTarget: x86_64-pc-linux-gnu\n```\n\nAlso, clang-8 on Fedora 30.\n\nJust some more questions:\n\n* The exec/s are 0, but the CPU usage is also low?\n* If you restart the fuzzer, do the exec/s start with a high value again?\n* What storage are you using hard drive/SSD?",https://github.com/bitcoin/bitcoin/pull/17860#issuecomment-576014728,576014728,
fanquake,2020-01-21 01:12:48,"Concept ACK.\n\nI've been fuzzing this target using libFuzzer (Debian & Clang 9) and have hit the crashes. Took ~half a day of runtime. I've posted the container I was using, the crash inputs found and some setup notes here [in core-review](https://github.com/fanquake/core-review/tree/master/fuzzing).\n\n```bash\n#23497	RELOAD cov: 48632 ft: 251363 corp: 2318/93Kb lim: 192 exec/s: 2 rss: 683M",https://github.com/bitcoin/bitcoin/pull/17860#issuecomment-576477165,576477165,
jonatack,2020-01-21 15:26:38,"> I've been using Ubuntu Focal clang-9:\n> \n> ```\n> $ clang --version \n> clang version 9.0.1-6build1 \n> Target: x86_64-pc-linux-gnu\n> ```\n> \n> Also, clang-8 on Fedora 30.\n> \n> Just some more questions:\n> \n>     * The exec/s are 0, but the CPU usage is also low? \n>     * If you restart the fuzzer, do the exec/s start with a high value again?\n>     * What storage are you u",https://github.com/bitcoin/bitcoin/pull/17860#issuecomment-576733447,576733447,
MarcoFalke,2020-01-21 20:04:02,"@jonatack clang-6 should be recent enough, no need to compile clang from source when later versions are not in your package manager. That could be a pain (or at least time consuming) to get libFuzzer and everything compiled.",https://github.com/bitcoin/bitcoin/pull/17860#issuecomment-576856594,576856594,
MarcoFalke,2020-01-21 20:32:26,For anyone running into issues with slow executions. What happens if you start the fuzzer with `export TMPDIR=/dev/shm`?,https://github.com/bitcoin/bitcoin/pull/17860#issuecomment-576867823,576867823,
instagibbs,2020-01-21 20:51:04,"@MarcoFalke significantly faster, something like 2x",https://github.com/bitcoin/bitcoin/pull/17860#issuecomment-576875460,576875460,
jonatack,2020-01-21 23:46:08,"Debian / Clang 6: Reproduced the crash with the CVE fix removed and @fanquake's first crasher:\n\n```\n$ src/test/fuzz/utxo_total_supply crash-9c947d9ff00fa36eca41ad27d337743fd5fee54b\nINFO: Seed: 38327181\nINFO: Loaded 1 modules   (511594 inline 8-bit counters): 511594 [0x55c2cba38958, 0x55c2cbab57c2), \nINFO: Loaded 1 PC tables (511594 PCs): 511594 [0x55c2cbab57c8,0x55c2cc283e68), \nsrc/t",https://github.com/bitcoin/bitcoin/pull/17860#issuecomment-576940037,576940037,
jonatack,2020-01-22 11:30:26,"Stopping it for now after 12 hours, CPUs running at 100%, here is the bottom of one of the log files:\n```\n#11181	REDUCE cov: 48212 ft: 257522 corp: 1449/3276Kb exec/s: 0 rss: 878Mb L: 3969/4096 MS: 2 ChangeBit-EraseBytes-\n#11298	NEW    cov: 48212 ft: 257523 corp: 1450/3279Kb exec/s: 0 rss: 878Mb L: 3302/4096 MS: 2 ChangeBinInt-InsertByte-\n```",https://github.com/bitcoin/bitcoin/pull/17860#issuecomment-577138908,577138908,
MarcoFalke,2020-01-23 02:59:07,"> Now running `export TMPDIR=/dev/shm ; time src/test/fuzz/utxo_total_supply -jobs=10 -print_final_stats=1 -workers=5` and letting it run overnight...\n\n@jonatack This is really confusing. One more try, if you don't mind:\n\n```sh\nmkdir /dev/shm/fuzz_temp_seeds\nexport TMPDIR=/dev/shm ; time src/test/fuzz/utxo_total_supply /dev/shm/fuzz_temp_seeds\n```\n\nThis will:\n* Run only one fuz",https://github.com/bitcoin/bitcoin/pull/17860#issuecomment-577482939,577482939,
fanquake,2020-01-23 12:23:45,"I've tested using `/dev/shm/` as the `TMPDIR` as you suggested, and am also seeing significant speedups. Added some additional notes [here](https://github.com/fanquake/core-review/tree/master/fuzzing#faster-fuzzing-using-devshm-as-tmpdir) as using it with docker requires a larger than the default (only 64mb) `/dev/shm`.",https://github.com/bitcoin/bitcoin/pull/17860#issuecomment-577659008,577659008,
jonatack,2020-01-23 12:29:31,"Thanks, will give it another good run with those suggestions.",https://github.com/bitcoin/bitcoin/pull/17860#issuecomment-577661009,577661009,
MarcoFalke,2020-01-23 13:00:26,"@fanquake Let me explain that the TMPDIR hack will only change the location of the datadir. Ideally, we can completely mock it out for fuzz tests (see  #17990).",https://github.com/bitcoin/bitcoin/pull/17860#issuecomment-577671519,577671519,
jonatack,2020-01-24 19:08:21,"@MarcoFalke Just launched as per your suggestion; here are the first 1200 iterations: https://gist.github.com/jonatack/fd81eecf390a6c750fd9c2dbd511caa8\n\nIt's running slowly. I use LUKS encryption on the SSD, PureOS (https://www.pureos.net) variant of Debian, and Coreboot (https://www.coreboot.org). 32gb RAM, only 8 used. I'll let it run overnight and see if it finds the CVE.\n\nEdit: It seem",https://github.com/bitcoin/bitcoin/pull/17860#issuecomment-578260352,578260352,
MarcoFalke,2020-01-24 19:21:12,"From that log it looks like it already starts at 0 exec/s, so at least it is not slowing down over time. Sorry, I can't find anything else to debug the slow executions. Long term you might want to hope for #17990. ",https://github.com/bitcoin/bitcoin/pull/17860#issuecomment-578264876,578264876,
MarcoFalke,2020-01-24 19:23:30,There was a rebase because of a conflict due to the makefile being resorted. Would be nice to get a re-ACK on the code from one of the earlier ACKers.,https://github.com/bitcoin/bitcoin/pull/17860#issuecomment-578265757,578265757,
MarcoFalke,2020-01-24 19:23:49,re-run ci,https://github.com/bitcoin/bitcoin/pull/17860#issuecomment-578265886,578265886,
jonatack,2020-01-25 10:00:52,"After ~15 hours, less than 1 exec/*minute*. Most of the execs occured at the beginning (1200 in the first 30 minues) and it slowed dramatically after. RSS up to 1056Mb from 656Mb at the beginning.\n```\n#8192	pulse  cov: 52209 ft: 269435 corp: 1186/1943Kb exec/s: 0 rss: 1056Mb\n#8213	NEW    cov: 52209 ft: 269460 corp: 1187/1947Kb exec/s: 0 rss: 1056Mb L: 4096/4096 MS: 4 ChangeBit-CMP-ChangeASCI",https://github.com/bitcoin/bitcoin/pull/17860#issuecomment-578393166,578393166,
MarcoFalke,2020-01-27 22:34:12,"@jonatack Would you mind debugging why it takes so long in later stages? I don't know if libFuzzer-instrumented binaries can be instrumented with other frameworks, but maybe a simple `std::cout` in a few places would be sufficient to see where it is hanging?",https://github.com/bitcoin/bitcoin/pull/17860#issuecomment-578987998,578987998,
DrahtBot,2020-03-11 19:06:17,<!--cf906140f33d8803c4a75a2196329ecb-->\n🐙 This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/fa733bbd78add587e19f0175ab9c127a8c27e024/CONTRIBUTING.md#rebasing-changes).,https://github.com/bitcoin/bitcoin/pull/17860#issuecomment-597814720,597814720,
practicalswift,2020-06-17 05:44:55,Would be happy to re-review after rebase :),https://github.com/bitcoin/bitcoin/pull/17860#issuecomment-645164882,645164882,
practicalswift,2020-11-11 21:11:39,Needs rebase :),https://github.com/bitcoin/bitcoin/pull/17860#issuecomment-725663695,725663695,
practicalswift,2021-02-28 20:25:05,"@MarcoFalke, are you planning to continue work on this PR? I'd like to review it once rebased :)",https://github.com/bitcoin/bitcoin/pull/17860#issuecomment-787516892,787516892,
sanjaykdragon,2020-01-07 13:18:56,would emplace_back be more efficient / proper here?,https://github.com/bitcoin/bitcoin/pull/17860#discussion_r363743028,363743028,src/bench/block_assemble.cpp
sanjaykdragon,2020-01-07 13:24:52,use .front() instead of .at(0),https://github.com/bitcoin/bitcoin/pull/17860#discussion_r363745281,363745281,src/test/fuzz/utxo_total_supply.cpp
sanjaykdragon,2020-01-07 14:01:15,use .front(),https://github.com/bitcoin/bitcoin/pull/17860#discussion_r363760321,363760321,src/test/util/mining.cpp
MarcoFalke,2020-01-07 18:43:39,"why?\n\n.at() asserts that the element exists, which I like",https://github.com/bitcoin/bitcoin/pull/17860#discussion_r363892945,363892945,src/test/fuzz/utxo_total_supply.cpp
MarcoFalke,2020-01-07 18:43:47,"why?\n\n.at() asserts that the element exists, which I like",https://github.com/bitcoin/bitcoin/pull/17860#discussion_r363893018,363893018,src/test/util/mining.cpp
sanjaykdragon,2020-01-07 20:06:51,"> why?\n> \n> .at() asserts that the element exists, which I like\n\nwhat do you mean by this?",https://github.com/bitcoin/bitcoin/pull/17860#discussion_r363928146,363928146,src/test/util/mining.cpp
sipa,2020-01-07 20:09:21,.at() will throw an exception when the vector is empty; front() will just cause UB.,https://github.com/bitcoin/bitcoin/pull/17860#discussion_r363929147,363929147,src/test/util/mining.cpp
sanjaykdragon,2020-01-07 20:44:58,"> .at() will throw an exception when the vector is empty; front() will just cause UB.\n\nhuh, did not know that. thanks for clarifying",https://github.com/bitcoin/bitcoin/pull/17860#discussion_r363942583,363942583,src/test/util/mining.cpp
instagibbs,2020-01-09 21:21:39,`.front()` for clarity that this is a coinbase tx?,https://github.com/bitcoin/bitcoin/pull/17860#discussion_r364965476,364965476,src/test/fuzz/utxo_total_supply.cpp
instagibbs,2020-01-09 21:34:21,"can  you remind the reader what the OP_0 push is for? I've forgotten as well, or cannot at least find the rule needed for it.",https://github.com/bitcoin/bitcoin/pull/17860#discussion_r364970490,364970490,src/test/fuzz/utxo_total_supply.cpp
instagibbs,2020-01-09 21:35:15,about right... for what? :),https://github.com/bitcoin/bitcoin/pull/17860#discussion_r364970829,364970829,src/test/fuzz/utxo_total_supply.cpp
instagibbs,2020-01-09 21:39:28,this section needs a description what it's setting up for,https://github.com/bitcoin/bitcoin/pull/17860#discussion_r364972613,364972613,src/test/fuzz/utxo_total_supply.cpp
MarcoFalke,2020-01-09 23:27:12,Thx. Used `front` in both instances in this scope.,https://github.com/bitcoin/bitcoin/pull/17860#discussion_r365009609,365009609,src/test/fuzz/utxo_total_supply.cpp
MarcoFalke,2020-01-09 23:27:35,Padding to avoid bad-cb-length. Added comment,https://github.com/bitcoin/bitcoin/pull/17860#discussion_r365009704,365009704,src/test/fuzz/utxo_total_supply.cpp
MarcoFalke,2020-01-09 23:29:23,"Removed wording and added different doc comment.\n\nThe fuzzer mines shorter chains more often than longer ones, so it should be small. Though we also want it to be large sometimes, but not too large.",https://github.com/bitcoin/bitcoin/pull/17860#discussion_r365010189,365010189,src/test/fuzz/utxo_total_supply.cpp
MarcoFalke,2020-01-09 23:29:42,Made scope shorter,https://github.com/bitcoin/bitcoin/pull/17860#discussion_r365010258,365010258,src/test/fuzz/utxo_total_supply.cpp
jonatack,2020-01-15 17:41:38,Could squash this commit.,https://github.com/bitcoin/bitcoin/pull/17860#discussion_r367014351,367014351,src/node/coinstats.cpp
