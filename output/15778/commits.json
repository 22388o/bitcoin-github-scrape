[
  {
    "sha": "5c759c73b2602c7fde1c50dbafe5525904c1b64c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1Yzc1OWM3M2IyNjAyYzdmZGUxYzUwZGJhZmU1NTI1OTA0YzFiNjRj",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-02-20T18:45:16Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-04-18T15:34:42Z"
      },
      "message": "[wallet] Move maxTxFee to wallet\n\nThis commit moves the maxtxfee setting to the wallet. There is only\none minor behavior change:\n\n- an error message in feebumper now refers to -maxtxfee instead of\nmaxTxFee.",
      "tree": {
        "sha": "6abb472994f52454f55b70d51bd79755f5883104",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6abb472994f52454f55b70d51bd79755f5883104"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5c759c73b2602c7fde1c50dbafe5525904c1b64c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c759c73b2602c7fde1c50dbafe5525904c1b64c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5c759c73b2602c7fde1c50dbafe5525904c1b64c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c759c73b2602c7fde1c50dbafe5525904c1b64c/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bb68abe784b9fd49bddf38105d142a31ef0f9e77",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb68abe784b9fd49bddf38105d142a31ef0f9e77",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bb68abe784b9fd49bddf38105d142a31ef0f9e77"
      }
    ],
    "stats": {
      "total": 95,
      "additions": 45,
      "deletions": 50
    },
    "files": [
      {
        "sha": "f5141e4962ad19a186677683a6bcc778f5736ddf",
        "filename": "src/dummywallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c759c73b2602c7fde1c50dbafe5525904c1b64c/src/dummywallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c759c73b2602c7fde1c50dbafe5525904c1b64c/src/dummywallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dummywallet.cpp?ref=5c759c73b2602c7fde1c50dbafe5525904c1b64c",
        "patch": "@@ -24,7 +24,7 @@ class DummyWalletInit : public WalletInitInterface {\n void DummyWalletInit::AddWalletOptions() const\n {\n     std::vector<std::string> opts = {\"-addresstype\", \"-changetype\", \"-disablewallet\", \"-discardfee=<amt>\", \"-fallbackfee=<amt>\",\n-        \"-keypool=<n>\", \"-mintxfee=<amt>\", \"-paytxfee=<amt>\", \"-rescan\", \"-salvagewallet\", \"-spendzeroconfchange\",  \"-txconfirmtarget=<n>\",\n+        \"-keypool=<n>\", \"-maxtxfee=<amt>\", \"-mintxfee=<amt>\", \"-paytxfee=<amt>\", \"-rescan\", \"-salvagewallet\", \"-spendzeroconfchange\",  \"-txconfirmtarget=<n>\",\n         \"-upgradewallet\", \"-wallet=<path>\", \"-walletbroadcast\", \"-walletdir=<dir>\", \"-walletnotify=<cmd>\", \"-walletrbf\", \"-zapwallettxes=<mode>\",\n         \"-dblogsize=<n>\", \"-flushwallet\", \"-privdb\", \"-walletrejectlongchains\"};\n     gArgs.AddHiddenArgs(opts);"
      },
      {
        "sha": "5b194add124d1596903f49074a75f0fa06992a2a",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 18,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c759c73b2602c7fde1c50dbafe5525904c1b64c/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c759c73b2602c7fde1c50dbafe5525904c1b64c/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=5c759c73b2602c7fde1c50dbafe5525904c1b64c",
        "patch": "@@ -502,8 +502,6 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-mocktime=<n>\", \"Replace actual time with <n> seconds since epoch (default: 0)\", true, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-maxsigcachesize=<n>\", strprintf(\"Limit sum of signature cache and script execution cache sizes to <n> MiB (default: %u)\", DEFAULT_MAX_SIG_CACHE_SIZE), true, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-maxtipage=<n>\", strprintf(\"Maximum tip age in seconds to consider node in initial block download (default: %u)\", DEFAULT_MAX_TIP_AGE), true, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-maxtxfee=<amt>\", strprintf(\"Maximum total fees (in %s) to use in a single wallet transaction; setting this too low may abort large transactions (default: %s)\", // TODO move setting to wallet\n-        CURRENCY_UNIT, FormatMoney(DEFAULT_TRANSACTION_MAXFEE)), false, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-printpriority\", strprintf(\"Log transaction fee per kB when mining blocks (default: %u)\", DEFAULT_PRINTPRIORITY), true, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-printtoconsole\", \"Send trace/debug info to console (default: 1 when no -daemon. To disable logging to file, set -nodebuglogfile)\", false, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-shrinkdebugfile\", \"Shrink debug.log file on client startup (default: 1 when no -debug)\", false, OptionsCategory::DEBUG_TEST);\n@@ -1123,22 +1121,6 @@ bool AppInitParameterInteraction()\n         dustRelayFee = CFeeRate(n);\n     }\n \n-    // This is required by both the wallet and node\n-    if (gArgs.IsArgSet(\"-maxtxfee\"))\n-    {\n-        CAmount nMaxFee = 0;\n-        if (!ParseMoney(gArgs.GetArg(\"-maxtxfee\", \"\"), nMaxFee))\n-            return InitError(AmountErrMsg(\"maxtxfee\", gArgs.GetArg(\"-maxtxfee\", \"\")));\n-        if (nMaxFee > HIGH_MAX_TX_FEE)\n-            InitWarning(_(\"-maxtxfee is set very high! Fees this large could be paid on a single transaction.\"));\n-        maxTxFee = nMaxFee;\n-        if (CFeeRate(maxTxFee, 1000) < ::minRelayTxFee)\n-        {\n-            return InitError(strprintf(_(\"Invalid amount for -maxtxfee=<amount>: '%s' (must be at least the minrelay fee of %s to prevent stuck transactions)\"),\n-                                       gArgs.GetArg(\"-maxtxfee\", \"\"), ::minRelayTxFee.ToString()));\n-        }\n-    }\n-\n     fRequireStandard = !gArgs.GetBoolArg(\"-acceptnonstdtxn\", !chainparams.RequireStandard());\n     if (chainparams.RequireStandard() && !fRequireStandard)\n         return InitError(strprintf(\"acceptnonstdtxn is not currently supported for %s chain\", chainparams.NetworkIDString()));"
      },
      {
        "sha": "16e0d1d6c0d0349516cc6c4423a43e2cbbd6af53",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c759c73b2602c7fde1c50dbafe5525904c1b64c/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c759c73b2602c7fde1c50dbafe5525904c1b64c/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=5c759c73b2602c7fde1c50dbafe5525904c1b64c",
        "patch": "@@ -339,7 +339,6 @@ class ChainImpl : public Chain\n     CFeeRate relayMinFee() override { return ::minRelayTxFee; }\n     CFeeRate relayIncrementalFee() override { return ::incrementalRelayFee; }\n     CFeeRate relayDustFee() override { return ::dustRelayFee; }\n-    CAmount maxTxFee() override { return ::maxTxFee; }\n     bool getPruneMode() override { return ::fPruneMode; }\n     bool p2pEnabled() override { return g_connman != nullptr; }\n     bool isReadyToBroadcast() override { return !::fImporting && !::fReindex && !IsInitialBlockDownload(); }"
      },
      {
        "sha": "d62ee683fa713838c9fb7c9bb40eeb197f70eaac",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c759c73b2602c7fde1c50dbafe5525904c1b64c/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c759c73b2602c7fde1c50dbafe5525904c1b64c/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=5c759c73b2602c7fde1c50dbafe5525904c1b64c",
        "patch": "@@ -216,12 +216,6 @@ class Chain\n     //! Relay dust fee setting (-dustrelayfee), reflecting lowest rate it's economical to spend.\n     virtual CFeeRate relayDustFee() = 0;\n \n-    //! Node max tx fee setting (-maxtxfee).\n-    //! This could be replaced by a per-wallet max fee, as proposed at\n-    //! https://github.com/bitcoin/bitcoin/issues/15355\n-    //! But for the time being, wallets call this to access the node setting.\n-    virtual CAmount maxTxFee() = 0;\n-\n     //! Check if pruning is enabled.\n     virtual bool getPruneMode() = 0;\n "
      },
      {
        "sha": "f3ee8fe364239aa33cedd7a258277d29c8b5781d",
        "filename": "src/interfaces/node.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c759c73b2602c7fde1c50dbafe5525904c1b64c/src/interfaces/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c759c73b2602c7fde1c50dbafe5525904c1b64c/src/interfaces/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.cpp?ref=5c759c73b2602c7fde1c50dbafe5525904c1b64c",
        "patch": "@@ -207,7 +207,6 @@ class NodeImpl : public Node\n         }\n     }\n     bool getNetworkActive() override { return g_connman && g_connman->GetNetworkActive(); }\n-    CAmount getMaxTxFee() override { return ::maxTxFee; }\n     CFeeRate estimateSmartFee(int num_blocks, bool conservative, int* returned_target = nullptr) override\n     {\n         FeeCalculation fee_calc;"
      },
      {
        "sha": "1ccd2a31b72aee849bc8c11f804427789eab91b7",
        "filename": "src/interfaces/node.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c759c73b2602c7fde1c50dbafe5525904c1b64c/src/interfaces/node.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c759c73b2602c7fde1c50dbafe5525904c1b64c/src/interfaces/node.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.h?ref=5c759c73b2602c7fde1c50dbafe5525904c1b64c",
        "patch": "@@ -159,9 +159,6 @@ class Node\n     //! Get network active.\n     virtual bool getNetworkActive() = 0;\n \n-    //! Get max tx fee.\n-    virtual CAmount getMaxTxFee() = 0;\n-\n     //! Estimate smart fee.\n     virtual CFeeRate estimateSmartFee(int num_blocks, bool conservative, int* returned_target = nullptr) = 0;\n "
      },
      {
        "sha": "e5aee2d806f6d6245d07245db8f148ead08651bf",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c759c73b2602c7fde1c50dbafe5525904c1b64c/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c759c73b2602c7fde1c50dbafe5525904c1b64c/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=5c759c73b2602c7fde1c50dbafe5525904c1b64c",
        "patch": "@@ -464,6 +464,7 @@ class WalletImpl : public Wallet\n     bool IsWalletFlagSet(uint64_t flag) override { return m_wallet->IsWalletFlagSet(flag); }\n     OutputType getDefaultAddressType() override { return m_wallet->m_default_address_type; }\n     OutputType getDefaultChangeType() override { return m_wallet->m_default_change_type; }\n+    CAmount getDefaultMaxTxFee() override { return m_wallet->m_default_max_tx_fee; }\n     void remove() override\n     {\n         RemoveWallet(m_wallet);"
      },
      {
        "sha": "7096f5404724ae83813488dfadd19674ffd59c73",
        "filename": "src/interfaces/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c759c73b2602c7fde1c50dbafe5525904c1b64c/src/interfaces/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c759c73b2602c7fde1c50dbafe5525904c1b64c/src/interfaces/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.h?ref=5c759c73b2602c7fde1c50dbafe5525904c1b64c",
        "patch": "@@ -247,6 +247,9 @@ class Wallet\n     // Get default change type.\n     virtual OutputType getDefaultChangeType() = 0;\n \n+    //! Get max tx fee.\n+    virtual CAmount getDefaultMaxTxFee() = 0;\n+\n     // Remove wallet.\n     virtual void remove() = 0;\n "
      },
      {
        "sha": "8a0b2658348586bfadf045ea85fafa927de5efbb",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c759c73b2602c7fde1c50dbafe5525904c1b64c/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c759c73b2602c7fde1c50dbafe5525904c1b64c/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=5c759c73b2602c7fde1c50dbafe5525904c1b64c",
        "patch": "@@ -578,7 +578,7 @@ void SendCoinsDialog::processSendCoinsReturn(const WalletModel::SendCoinsReturn\n         msgParams.second = CClientUIInterface::MSG_ERROR;\n         break;\n     case WalletModel::AbsurdFee:\n-        msgParams.first = tr(\"A fee higher than %1 is considered an absurdly high fee.\").arg(BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), model->node().getMaxTxFee()));\n+        msgParams.first = tr(\"A fee higher than %1 is considered an absurdly high fee.\").arg(BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), model->wallet().getDefaultMaxTxFee()));\n         break;\n     case WalletModel::PaymentRequestExpired:\n         msgParams.first = tr(\"Payment request expired.\");"
      },
      {
        "sha": "fd392b7cf7f50f1c6b58efa251bcd90b5ae007c1",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c759c73b2602c7fde1c50dbafe5525904c1b64c/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c759c73b2602c7fde1c50dbafe5525904c1b64c/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=5c759c73b2602c7fde1c50dbafe5525904c1b64c",
        "patch": "@@ -222,9 +222,9 @@ WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransact\n         }\n \n         // reject absurdly high fee. (This can never happen because the\n-        // wallet caps the fee at maxTxFee. This merely serves as a\n+        // wallet caps the fee at m_default_max_tx_fee. This merely serves as a\n         // belt-and-suspenders check)\n-        if (nFeeRequired > m_node.getMaxTxFee())\n+        if (nFeeRequired > m_wallet->getDefaultMaxTxFee())\n             return AbsurdFee;\n     }\n "
      },
      {
        "sha": "b8f3ee464ee99e4710468bff5179241f54ac9a39",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c759c73b2602c7fde1c50dbafe5525904c1b64c/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c759c73b2602c7fde1c50dbafe5525904c1b64c/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=5c759c73b2602c7fde1c50dbafe5525904c1b64c",
        "patch": "@@ -252,7 +252,6 @@ uint256 hashAssumeValid;\n arith_uint256 nMinimumChainWork;\n \n CFeeRate minRelayTxFee = CFeeRate(DEFAULT_MIN_RELAY_TX_FEE);\n-CAmount maxTxFee = DEFAULT_TRANSACTION_MAXFEE;\n \n CBlockPolicyEstimator feeEstimator;\n CTxMemPool mempool(&feeEstimator);"
      },
      {
        "sha": "fecff5bb80a4cdc043ede3f18ea0bc25f351912f",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c759c73b2602c7fde1c50dbafe5525904c1b64c/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c759c73b2602c7fde1c50dbafe5525904c1b64c/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=5c759c73b2602c7fde1c50dbafe5525904c1b64c",
        "patch": "@@ -53,12 +53,6 @@ static const bool DEFAULT_WHITELISTRELAY = true;\n static const bool DEFAULT_WHITELISTFORCERELAY = false;\n /** Default for -minrelaytxfee, minimum relay fee for transactions */\n static const unsigned int DEFAULT_MIN_RELAY_TX_FEE = 1000;\n-//! -maxtxfee default\n-static const CAmount DEFAULT_TRANSACTION_MAXFEE = COIN / 10;\n-//! Discourage users to set fees higher than this amount (in satoshis) per kB\n-static const CAmount HIGH_TX_FEE_PER_KB = COIN / 100;\n-//! -maxtxfee will warn if called with a higher fee than this amount (in satoshis)\n-static const CAmount HIGH_MAX_TX_FEE = 100 * HIGH_TX_FEE_PER_KB;\n /** Default for -limitancestorcount, max number of in-mempool ancestors */\n static const unsigned int DEFAULT_ANCESTOR_LIMIT = 25;\n /** Default for -limitancestorsize, maximum kilobytes of tx + all in-mempool ancestors */\n@@ -162,8 +156,6 @@ extern bool fCheckpointsEnabled;\n extern size_t nCoinCacheUsage;\n /** A fee rate smaller than this is considered zero fee (for relaying, mining and transaction creation) */\n extern CFeeRate minRelayTxFee;\n-/** Absolute maximum transaction fee (in satoshis) used by wallet and mempool (rejects high fee in sendrawtransaction) */\n-extern CAmount maxTxFee;\n /** If the tip is older than this (in seconds), the node is considered to be in initial block download. */\n extern int64_t nMaxTipAge;\n extern bool fEnableReplacement;"
      },
      {
        "sha": "7ffea3867d2fb7f3e886d46926a065f3c73e2923",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c759c73b2602c7fde1c50dbafe5525904c1b64c/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c759c73b2602c7fde1c50dbafe5525904c1b64c/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=5c759c73b2602c7fde1c50dbafe5525904c1b64c",
        "patch": "@@ -162,9 +162,9 @@ Result CreateTransaction(const CWallet* wallet, const uint256& txid, const CCoin\n     }\n \n     // Check that in all cases the new fee doesn't violate maxTxFee\n-     const CAmount max_tx_fee = wallet->chain().maxTxFee();\n+     const CAmount max_tx_fee = wallet->m_default_max_tx_fee;\n      if (new_fee > max_tx_fee) {\n-         errors.push_back(strprintf(\"Specified or calculated fee %s is too high (cannot be higher than maxTxFee %s)\",\n+         errors.push_back(strprintf(\"Specified or calculated fee %s is too high (cannot be higher than -maxtxfee %s)\",\n                                FormatMoney(new_fee), FormatMoney(max_tx_fee)));\n          return Result::WALLET_ERROR;\n      }"
      },
      {
        "sha": "d9ae18ed6025983ccb38949ee201747767837b29",
        "filename": "src/wallet/fees.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c759c73b2602c7fde1c50dbafe5525904c1b64c/src/wallet/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c759c73b2602c7fde1c50dbafe5525904c1b64c/src/wallet/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/fees.cpp?ref=5c759c73b2602c7fde1c50dbafe5525904c1b64c",
        "patch": "@@ -22,7 +22,7 @@ CAmount GetMinimumFee(const CWallet& wallet, unsigned int nTxBytes, const CCoinC\n {\n     CAmount fee_needed = GetMinimumFeeRate(wallet, coin_control, feeCalc).GetFee(nTxBytes);\n     // Always obey the maximum\n-    const CAmount max_tx_fee = wallet.chain().maxTxFee();\n+    const CAmount max_tx_fee = wallet.m_default_max_tx_fee;\n     if (fee_needed > max_tx_fee) {\n         fee_needed = max_tx_fee;\n         if (feeCalc) feeCalc->reason = FeeReason::MAXTXFEE;"
      },
      {
        "sha": "47ef01bfd180babca797d8a7dbabdb487281167b",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c759c73b2602c7fde1c50dbafe5525904c1b64c/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c759c73b2602c7fde1c50dbafe5525904c1b64c/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=5c759c73b2602c7fde1c50dbafe5525904c1b64c",
        "patch": "@@ -48,6 +48,8 @@ void WalletInit::AddWalletOptions() const\n     gArgs.AddArg(\"-fallbackfee=<amt>\", strprintf(\"A fee rate (in %s/kB) that will be used when fee estimation has insufficient data (default: %s)\",\n                                                                CURRENCY_UNIT, FormatMoney(DEFAULT_FALLBACK_FEE)), false, OptionsCategory::WALLET);\n     gArgs.AddArg(\"-keypool=<n>\", strprintf(\"Set key pool size to <n> (default: %u)\", DEFAULT_KEYPOOL_SIZE), false, OptionsCategory::WALLET);\n+    gArgs.AddArg(\"-maxtxfee=<amt>\", strprintf(\"Maximum total fees (in %s) to use in a single wallet transaction; setting this too low may abort large transactions (default: %s)\",\n+        CURRENCY_UNIT, FormatMoney(DEFAULT_TRANSACTION_MAXFEE)), false, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-mintxfee=<amt>\", strprintf(\"Fees (in %s/kB) smaller than this are considered zero fee for transaction creation (default: %s)\",\n                                                             CURRENCY_UNIT, FormatMoney(DEFAULT_TRANSACTION_MINFEE)), false, OptionsCategory::WALLET);\n     gArgs.AddArg(\"-paytxfee=<amt>\", strprintf(\"Fee (in %s/kB) to add to transactions you send (default: %s)\",\n@@ -124,10 +126,6 @@ bool WalletInit::ParameterInteraction() const\n     if (gArgs.GetArg(\"-prune\", 0) && gArgs.GetBoolArg(\"-rescan\", false))\n         return InitError(_(\"Rescans are not possible in pruned mode. You will need to use -reindex which will download the whole blockchain again.\"));\n \n-    if (::minRelayTxFee.GetFeePerK() > HIGH_TX_FEE_PER_KB)\n-        InitWarning(AmountHighWarn(\"-minrelaytxfee\") + \" \" +\n-                    _(\"The wallet will avoid paying less than the minimum relay fee.\"));\n-\n     return true;\n }\n "
      },
      {
        "sha": "8a1cb83e74f75645739d402a4420aa5029ae0348",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 1,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c759c73b2602c7fde1c50dbafe5525904c1b64c/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c759c73b2602c7fde1c50dbafe5525904c1b64c/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=5c759c73b2602c7fde1c50dbafe5525904c1b64c",
        "patch": "@@ -4204,6 +4204,29 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n             return nullptr;\n         }\n     }\n+\n+    if (gArgs.IsArgSet(\"-maxtxfee\"))\n+    {\n+        CAmount nMaxFee = 0;\n+        if (!ParseMoney(gArgs.GetArg(\"-maxtxfee\", \"\"), nMaxFee)) {\n+            chain.initError(AmountErrMsg(\"maxtxfee\", gArgs.GetArg(\"-maxtxfee\", \"\")));\n+            return nullptr;\n+        }\n+        if (nMaxFee > HIGH_MAX_TX_FEE) {\n+            chain.initWarning(_(\"-maxtxfee is set very high! Fees this large could be paid on a single transaction.\"));\n+        }\n+        if (CFeeRate(nMaxFee, 1000) < chain.relayMinFee()) {\n+            chain.initError(strprintf(_(\"Invalid amount for -maxtxfee=<amount>: '%s' (must be at least the minrelay fee of %s to prevent stuck transactions)\"),\n+                                       gArgs.GetArg(\"-maxtxfee\", \"\"), chain.relayMinFee().ToString()));\n+            return nullptr;\n+        }\n+        walletInstance->m_default_max_tx_fee = nMaxFee;\n+    }\n+\n+    if (chain.relayMinFee().GetFeePerK() > HIGH_TX_FEE_PER_KB)\n+        chain.initWarning(AmountHighWarn(\"-minrelaytxfee\") + \" \" +\n+                    _(\"The wallet will avoid paying less than the minimum relay fee.\"));\n+\n     walletInstance->m_confirm_target = gArgs.GetArg(\"-txconfirmtarget\", DEFAULT_TX_CONFIRM_TARGET);\n     walletInstance->m_spend_zero_conf_change = gArgs.GetBoolArg(\"-spendzeroconfchange\", DEFAULT_SPEND_ZEROCONF_CHANGE);\n     walletInstance->m_signal_rbf = gArgs.GetBoolArg(\"-walletrbf\", DEFAULT_WALLET_RBF);\n@@ -4394,7 +4417,7 @@ bool CWalletTx::AcceptToMemoryPool(interfaces::Chain::Lock& locked_chain, CValid\n     // user could call sendmoney in a loop and hit spurious out of funds errors\n     // because we think that this newly generated transaction's change is\n     // unavailable as we're not yet aware that it is in the mempool.\n-    bool ret = locked_chain.submitToMemoryPool(tx, pwallet->chain().maxTxFee(), state);\n+    bool ret = locked_chain.submitToMemoryPool(tx, pwallet->m_default_max_tx_fee, state);\n     fInMempool |= ret;\n     return ret;\n }"
      },
      {
        "sha": "008765bccc02ccabc41c4c81cefdb7c4ad7dc3c2",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c759c73b2602c7fde1c50dbafe5525904c1b64c/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c759c73b2602c7fde1c50dbafe5525904c1b64c/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=5c759c73b2602c7fde1c50dbafe5525904c1b64c",
        "patch": "@@ -73,6 +73,12 @@ static const unsigned int DEFAULT_TX_CONFIRM_TARGET = 6;\n static const bool DEFAULT_WALLET_RBF = false;\n static const bool DEFAULT_WALLETBROADCAST = true;\n static const bool DEFAULT_DISABLE_WALLET = false;\n+//! -maxtxfee default\n+constexpr CAmount DEFAULT_TRANSACTION_MAXFEE{COIN / 10};\n+//! Discourage users to set fees higher than this amount (in satoshis) per kB\n+constexpr CAmount HIGH_TX_FEE_PER_KB{COIN / 100};\n+//! -maxtxfee will warn if called with a higher fee than this amount (in satoshis)\n+constexpr CAmount HIGH_MAX_TX_FEE{100 * HIGH_TX_FEE_PER_KB};\n \n //! Pre-calculated constants for input size estimation in *virtual size*\n static constexpr size_t DUMMY_NESTED_P2WPKH_INPUT_SIZE = 91;\n@@ -983,6 +989,8 @@ class CWallet final : public CCryptoKeyStore, private interfaces::Chain::Notific\n     CFeeRate m_discard_rate{DEFAULT_DISCARD_FEE};\n     OutputType m_default_address_type{DEFAULT_ADDRESS_TYPE};\n     OutputType m_default_change_type{DEFAULT_CHANGE_TYPE};\n+    /** Absolute maximum transaction fee (in satoshis) used by default for the wallet */\n+    CAmount m_default_max_tx_fee{DEFAULT_TRANSACTION_MAXFEE};\n \n     bool NewKeyPool();\n     size_t KeypoolCountExternalKeys() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);"
      }
    ]
  }
]