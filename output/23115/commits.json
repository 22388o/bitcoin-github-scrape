[
  {
    "sha": "2ba4ddf31d27bebc144b3729479967b40bbe0b6a",
    "node_id": "C_kwDOABII59oAKDJiYTRkZGYzMWQyN2JlYmMxNDRiMzcyOTQ3OTk2N2I0MGJiZTBiNmE",
    "commit": {
      "author": {
        "name": "William Casarin",
        "email": "jb55@jb55.com",
        "date": "2020-05-02T03:03:43Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-09-29T01:40:10Z"
      },
      "message": "bloom: use Span instead of std::vector for `insert` and `contains`\n\nWe can avoid many unnecessary std::vector allocations by changing\nCBloomFilter to take Spans instead of std::vector's for the `insert`\nand `contains` operations.\n\nCBloomFilter currently converts types such as CDataStream and uint256\nto std::vector on `insert` and `contains`. This is unnecessary because\nCDataStreams and uint256 are already std::vectors internally. We just\nneed a way to point to the right data within those types. Span gives\nus this ability.\n\nSigned-off-by: William Casarin <jb55@jb55.com>",
      "tree": {
        "sha": "6be2168585922040490ea0b56f982de1bf40cf6b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6be2168585922040490ea0b56f982de1bf40cf6b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2ba4ddf31d27bebc144b3729479967b40bbe0b6a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmFTw/oACgkQLuufXMCV\nJsEscQ/+L6tgSSEr8D3bhRtxG1YpwVoEccN/wVBp1ISp5v6RZU1pjl6h0cpoAV5E\nBP3ImB+8dHopRCHPCkkaXj08Ev8XmZ2xIz3WbefWZjpynFS45jFH90aBxbnWDlFh\nvsWOe5zHqcd6VovcTpcSkleW4QX/QXM4rsMtqgdbshgQfu8viRtEDr+9B2cyMX0t\nyts3oIggLerWNoUehZWU6xRFG/cu249OIfhjNHmi/0D2fSzP/Ko1Dy9aIENlDwmk\nQlI/10Gz+d041YzI2esjZpb3HJziVFkOnjgdHi5xP1KueULIIF9cD78mPmTQdKBm\nKT25kOiQgp5noMtp43KzC7IDjwbenkTVeRJ+l8sCIhNT4iJ3iYeNdW8wSOx4vIh3\nE72LxXv620FB8/PdWqd8g6uAs2lyUkuESkDNbm1nbf5WpcnW53IMTOhLLv3wwG8o\nIQzVni1HZ2+6HBbKfyB2LfX1fnDyqkNaSVxOsvVweyqxbqAdngrP3Sy+j/gv04wt\n6SgvOlaHzUp88fV+z9LCa8+JYxCaZaSkEoD35AweimaNALDG3AgiWqShl7VTZlfl\nwVn4q7NhIpJsIuAmEAkqbVUkoaJiudKqpg6ny049Oo3FpSoRCNTze+SLSVG9y04/\n34etZv+ZITmlbnJwANkb6EKiUrI/lSrPytKa8wvi3i1Tjar3VUU=\n=9Irt\n-----END PGP SIGNATURE-----",
        "payload": "tree 6be2168585922040490ea0b56f982de1bf40cf6b\nparent 3c776fdcec176ffaa2056633fa2b4e737cda29ce\nauthor William Casarin <jb55@jb55.com> 1588388623 -0700\ncommitter fanquake <fanquake@gmail.com> 1632879610 +0800\n\nbloom: use Span instead of std::vector for `insert` and `contains`\n\nWe can avoid many unnecessary std::vector allocations by changing\nCBloomFilter to take Spans instead of std::vector's for the `insert`\nand `contains` operations.\n\nCBloomFilter currently converts types such as CDataStream and uint256\nto std::vector on `insert` and `contains`. This is unnecessary because\nCDataStreams and uint256 are already std::vectors internally. We just\nneed a way to point to the right data within those types. Span gives\nus this ability.\n\nSigned-off-by: William Casarin <jb55@jb55.com>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ba4ddf31d27bebc144b3729479967b40bbe0b6a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2ba4ddf31d27bebc144b3729479967b40bbe0b6a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ba4ddf31d27bebc144b3729479967b40bbe0b6a/comments",
    "author": {
      "login": "jb55",
      "id": 45598,
      "node_id": "MDQ6VXNlcjQ1NTk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/45598?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jb55",
      "html_url": "https://github.com/jb55",
      "followers_url": "https://api.github.com/users/jb55/followers",
      "following_url": "https://api.github.com/users/jb55/following{/other_user}",
      "gists_url": "https://api.github.com/users/jb55/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jb55/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jb55/subscriptions",
      "organizations_url": "https://api.github.com/users/jb55/orgs",
      "repos_url": "https://api.github.com/users/jb55/repos",
      "events_url": "https://api.github.com/users/jb55/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jb55/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3c776fdcec176ffaa2056633fa2b4e737cda29ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c776fdcec176ffaa2056633fa2b4e737cda29ce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3c776fdcec176ffaa2056633fa2b4e737cda29ce"
      }
    ],
    "stats": {
      "total": 61,
      "additions": 16,
      "deletions": 45
    },
    "files": [
      {
        "sha": "78ef1897c970d3c2a324f79337fb638f675a2212",
        "filename": "src/bloom.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 34,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ba4ddf31d27bebc144b3729479967b40bbe0b6a/src/bloom.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ba4ddf31d27bebc144b3729479967b40bbe0b6a/src/bloom.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.cpp?ref=2ba4ddf31d27bebc144b3729479967b40bbe0b6a",
        "patch": "@@ -37,13 +37,13 @@ CBloomFilter::CBloomFilter(const unsigned int nElements, const double nFPRate, c\n {\n }\n \n-inline unsigned int CBloomFilter::Hash(unsigned int nHashNum, const std::vector<unsigned char>& vDataToHash) const\n+inline unsigned int CBloomFilter::Hash(unsigned int nHashNum, Span<const unsigned char> vDataToHash) const\n {\n     // 0xFBA4C795 chosen as it guarantees a reasonable bit difference between nHashNum values.\n     return MurmurHash3(nHashNum * 0xFBA4C795 + nTweak, vDataToHash) % (vData.size() * 8);\n }\n \n-void CBloomFilter::insert(const std::vector<unsigned char>& vKey)\n+void CBloomFilter::insert(Span<const unsigned char> vKey)\n {\n     if (vData.empty()) // Avoid divide-by-zero (CVE-2013-5700)\n         return;\n@@ -59,17 +59,10 @@ void CBloomFilter::insert(const COutPoint& outpoint)\n {\n     CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n     stream << outpoint;\n-    std::vector<unsigned char> data(stream.begin(), stream.end());\n-    insert(data);\n+    insert(stream);\n }\n \n-void CBloomFilter::insert(const uint256& hash)\n-{\n-    std::vector<unsigned char> data(hash.begin(), hash.end());\n-    insert(data);\n-}\n-\n-bool CBloomFilter::contains(const std::vector<unsigned char>& vKey) const\n+bool CBloomFilter::contains(Span<const unsigned char> vKey) const\n {\n     if (vData.empty()) // Avoid divide-by-zero (CVE-2013-5700)\n         return true;\n@@ -87,14 +80,7 @@ bool CBloomFilter::contains(const COutPoint& outpoint) const\n {\n     CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n     stream << outpoint;\n-    std::vector<unsigned char> data(stream.begin(), stream.end());\n-    return contains(data);\n-}\n-\n-bool CBloomFilter::contains(const uint256& hash) const\n-{\n-    std::vector<unsigned char> data(hash.begin(), hash.end());\n-    return contains(data);\n+    return contains(MakeUCharSpan(stream));\n }\n \n bool CBloomFilter::IsWithinSizeConstraints() const\n@@ -198,7 +184,8 @@ CRollingBloomFilter::CRollingBloomFilter(const unsigned int nElements, const dou\n }\n \n /* Similar to CBloomFilter::Hash */\n-static inline uint32_t RollingBloomHash(unsigned int nHashNum, uint32_t nTweak, const std::vector<unsigned char>& vDataToHash) {\n+static inline uint32_t RollingBloomHash(unsigned int nHashNum, uint32_t nTweak, Span<const unsigned char> vDataToHash)\n+{\n     return MurmurHash3(nHashNum * 0xFBA4C795 + nTweak, vDataToHash);\n }\n \n@@ -210,7 +197,7 @@ static inline uint32_t FastMod(uint32_t x, size_t n) {\n     return ((uint64_t)x * (uint64_t)n) >> 32;\n }\n \n-void CRollingBloomFilter::insert(const std::vector<unsigned char>& vKey)\n+void CRollingBloomFilter::insert(Span<const unsigned char> vKey)\n {\n     if (nEntriesThisGeneration == nEntriesPerGeneration) {\n         nEntriesThisGeneration = 0;\n@@ -241,13 +228,7 @@ void CRollingBloomFilter::insert(const std::vector<unsigned char>& vKey)\n     }\n }\n \n-void CRollingBloomFilter::insert(const uint256& hash)\n-{\n-    std::vector<unsigned char> vData(hash.begin(), hash.end());\n-    insert(vData);\n-}\n-\n-bool CRollingBloomFilter::contains(const std::vector<unsigned char>& vKey) const\n+bool CRollingBloomFilter::contains(Span<const unsigned char> vKey) const\n {\n     for (int n = 0; n < nHashFuncs; n++) {\n         uint32_t h = RollingBloomHash(n, nTweak, vKey);\n@@ -261,12 +242,6 @@ bool CRollingBloomFilter::contains(const std::vector<unsigned char>& vKey) const\n     return true;\n }\n \n-bool CRollingBloomFilter::contains(const uint256& hash) const\n-{\n-    std::vector<unsigned char> vData(hash.begin(), hash.end());\n-    return contains(vData);\n-}\n-\n void CRollingBloomFilter::reset()\n {\n     nTweak = GetRand(std::numeric_limits<unsigned int>::max());"
      },
      {
        "sha": "391e2cc8883d23606f33b259c35d71cbf6929d89",
        "filename": "src/bloom.h",
        "status": "modified",
        "additions": 5,
        "deletions": 10,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ba4ddf31d27bebc144b3729479967b40bbe0b6a/src/bloom.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ba4ddf31d27bebc144b3729479967b40bbe0b6a/src/bloom.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.h?ref=2ba4ddf31d27bebc144b3729479967b40bbe0b6a",
        "patch": "@@ -11,7 +11,6 @@\n \n class COutPoint;\n class CTransaction;\n-class uint256;\n \n //! 20,000 items with fp rate < 0.1% or 10,000 items and <0.0001%\n static const unsigned int MAX_BLOOM_FILTER_SIZE = 36000; // bytes\n@@ -49,7 +48,7 @@ class CBloomFilter\n     unsigned int nTweak;\n     unsigned char nFlags;\n \n-    unsigned int Hash(unsigned int nHashNum, const std::vector<unsigned char>& vDataToHash) const;\n+    unsigned int Hash(unsigned int nHashNum, Span<const unsigned char> vDataToHash) const;\n \n public:\n     /**\n@@ -66,13 +65,11 @@ class CBloomFilter\n \n     SERIALIZE_METHODS(CBloomFilter, obj) { READWRITE(obj.vData, obj.nHashFuncs, obj.nTweak, obj.nFlags); }\n \n-    void insert(const std::vector<unsigned char>& vKey);\n+    void insert(Span<const unsigned char> vKey);\n     void insert(const COutPoint& outpoint);\n-    void insert(const uint256& hash);\n \n-    bool contains(const std::vector<unsigned char>& vKey) const;\n+    bool contains(Span<const unsigned char> vKey) const;\n     bool contains(const COutPoint& outpoint) const;\n-    bool contains(const uint256& hash) const;\n \n     //! True if the size is <= MAX_BLOOM_FILTER_SIZE and the number of hash functions is <= MAX_HASH_FUNCS\n     //! (catch a filter which was just deserialized which was too big)\n@@ -112,10 +109,8 @@ class CRollingBloomFilter\n public:\n     CRollingBloomFilter(const unsigned int nElements, const double nFPRate);\n \n-    void insert(const std::vector<unsigned char>& vKey);\n-    void insert(const uint256& hash);\n-    bool contains(const std::vector<unsigned char>& vKey) const;\n-    bool contains(const uint256& hash) const;\n+    void insert(Span<const unsigned char> vKey);\n+    bool contains(Span<const unsigned char> vKey) const;\n \n     void reset();\n "
      },
      {
        "sha": "92c923fbd2ef8ae7912b755aad47f32307c30fda",
        "filename": "src/hash.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ba4ddf31d27bebc144b3729479967b40bbe0b6a/src/hash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ba4ddf31d27bebc144b3729479967b40bbe0b6a/src/hash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.cpp?ref=2ba4ddf31d27bebc144b3729479967b40bbe0b6a",
        "patch": "@@ -3,6 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <hash.h>\n+#include <span.h>\n #include <crypto/common.h>\n #include <crypto/hmac_sha512.h>\n "
      },
      {
        "sha": "23ef2062ef02265c41d16f3baa81f0257a371ffc",
        "filename": "src/test/bloom_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ba4ddf31d27bebc144b3729479967b40bbe0b6a/src/test/bloom_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ba4ddf31d27bebc144b3729479967b40bbe0b6a/src/test/bloom_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bloom_tests.cpp?ref=2ba4ddf31d27bebc144b3729479967b40bbe0b6a",
        "patch": "@@ -83,7 +83,7 @@ BOOST_AUTO_TEST_CASE(bloom_create_insert_key)\n     CBloomFilter filter(2, 0.001, 0, BLOOM_UPDATE_ALL);\n     filter.insert(vchPubKey);\n     uint160 hash = pubkey.GetID();\n-    filter.insert(std::vector<unsigned char>(hash.begin(), hash.end()));\n+    filter.insert(hash);\n \n     CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n     stream << filter;"
      }
    ]
  },
  {
    "sha": "f1ed1d3194d4160923f3b02fa1acffd805ab4428",
    "node_id": "C_kwDOABII59oAKGYxZWQxZDMxOTRkNDE2MDkyM2YzYjAyZmExYWNmZmQ4MDVhYjQ0Mjg",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-09-29T01:43:37Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-09-29T01:43:37Z"
      },
      "message": "bloom: use constexpr where appropriate",
      "tree": {
        "sha": "35561332407619818448c4c3960fab253259ea02",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/35561332407619818448c4c3960fab253259ea02"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f1ed1d3194d4160923f3b02fa1acffd805ab4428",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmFTxMkACgkQLuufXMCV\nJsFTug//YZr7BOG1LIODfIFujh78tscIOrvy0RWvwpBxG1n44syw2m0ci0xiWt/f\nEgPa80NGe5GC3AjpKicwj0MPR30m8E/bRQtry2nY56EArIDY9znIn0dEh7MEVX3A\nRgucnmDYHtVi8Xy4NvjGl7srDsWcMug0uRy8s46rQDIqCDWiBzGsVIwdmIwubItG\nmpV6R2Q+j+xcE+aUTcTL8aDI3r7/eBSgwCCJ4HGM4uB+tqRm7vqMizsi2Rx2LtkL\ngnmg/2N11Px8a9MhUH4C7bfqynhk0N1Fjtfe+1syBXTCR4Gy0MM4eSwhLo/UrDcZ\nlRT7fBg8vlo7Cl2aesV0sXWEUT9N9oQUjDbDVx6LQqeNJecQR3GVFMEiZzKHvibw\n97LHKaA7sFMI5BnCUF05WLnn+pByWJ3Q00XDfIdYe9073oWsfw7GjsMkcE5JSsQi\nPPjlGzLpJrSPkPvIeHyQ8Zfv+7Vw88frCXOC0+Mo1vqbr8MtStbEPN5Yco6NaUkX\nk7zaYHO7q4IarsqvA+MpChxILuK80WrBn3KTAyKHVaK640JZGLylAJu4byyIHruG\naP6Zoq4IbuC9JNohDKgkoyZS2syIjodBKtwCLqt1Lff0J57bB4xU9aVCE1yzKqzH\n4QdE6i1aPRXHUOSXvcwgygje7Ljg7gkOODKsJwinURzpeFNREAU=\n=jdyC\n-----END PGP SIGNATURE-----",
        "payload": "tree 35561332407619818448c4c3960fab253259ea02\nparent 2ba4ddf31d27bebc144b3729479967b40bbe0b6a\nauthor fanquake <fanquake@gmail.com> 1632879817 +0800\ncommitter fanquake <fanquake@gmail.com> 1632879817 +0800\n\nbloom: use constexpr where appropriate\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f1ed1d3194d4160923f3b02fa1acffd805ab4428",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f1ed1d3194d4160923f3b02fa1acffd805ab4428",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f1ed1d3194d4160923f3b02fa1acffd805ab4428/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2ba4ddf31d27bebc144b3729479967b40bbe0b6a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ba4ddf31d27bebc144b3729479967b40bbe0b6a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2ba4ddf31d27bebc144b3729479967b40bbe0b6a"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "20722c8d5c3294ce15caff21e8bd8cd36ac54313",
        "filename": "src/bloom.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1ed1d3194d4160923f3b02fa1acffd805ab4428/src/bloom.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1ed1d3194d4160923f3b02fa1acffd805ab4428/src/bloom.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.cpp?ref=f1ed1d3194d4160923f3b02fa1acffd805ab4428",
        "patch": "@@ -16,8 +16,8 @@\n \n #include <algorithm>\n \n-#define LN2SQUARED 0.4804530139182014246671025263266649717305529515945455\n-#define LN2 0.6931471805599453094172321214581765680755001343602552\n+static constexpr double LN2SQUARED = 0.4804530139182014246671025263266649717305529515945455;\n+static constexpr double LN2 = 0.6931471805599453094172321214581765680755001343602552;\n \n CBloomFilter::CBloomFilter(const unsigned int nElements, const double nFPRate, const unsigned int nTweakIn, unsigned char nFlagsIn) :\n     /**"
      },
      {
        "sha": "67177c6daae01a12bcef0656cc459098b4fe61c3",
        "filename": "src/bloom.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1ed1d3194d4160923f3b02fa1acffd805ab4428/src/bloom.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1ed1d3194d4160923f3b02fa1acffd805ab4428/src/bloom.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.h?ref=f1ed1d3194d4160923f3b02fa1acffd805ab4428",
        "patch": "@@ -13,8 +13,8 @@ class COutPoint;\n class CTransaction;\n \n //! 20,000 items with fp rate < 0.1% or 10,000 items and <0.0001%\n-static const unsigned int MAX_BLOOM_FILTER_SIZE = 36000; // bytes\n-static const unsigned int MAX_HASH_FUNCS = 50;\n+static constexpr unsigned int MAX_BLOOM_FILTER_SIZE = 36000; // bytes\n+static constexpr unsigned int MAX_HASH_FUNCS = 50;\n \n /**\n  * First two bits of nFlags control how much IsRelevantAndUpdate actually updates"
      }
    ]
  },
  {
    "sha": "a11da7541148b5bb8e293c0ee49b2856a6628099",
    "node_id": "C_kwDOABII59oAKGExMWRhNzU0MTE0OGI1YmI4ZTI5M2MwZWU0OWIyODU2YTY2MjgwOTk",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-09-29T01:48:36Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-09-29T01:48:36Z"
      },
      "message": "bloom: cleanup includes",
      "tree": {
        "sha": "5007f220cb0d1ed5175bae030479bb63c3a5f2ee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5007f220cb0d1ed5175bae030479bb63c3a5f2ee"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a11da7541148b5bb8e293c0ee49b2856a6628099",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmFTxfQACgkQLuufXMCV\nJsGrhw/+Ixdp5qqlKt+ZtZbIsFvHOoO81iZH7Mgsi/ALGURGu3F/9cROKmw960fa\nR679tm5no2UAwzYc7aDXK9/FEic5PElN0bBYS9CQgjrd0edgvHjPmivPJ0MMUwqs\nvS0eCStL8NFtdtn9af762SWpf7os9k3sEgqMuRRt249aTZGn/ZSdji3DLp0RqBbD\nd2hvdrDiz1zgHgGuV3UZENBGh0FCa6Rp4qa/ea1jq0bqtpuIGIA0od429cRx4CxZ\nhyA/wAvVKMrOI7LopzflL1gcPM4At4BewYrNQVbBZz3IUCE8cM6syUA0odUqsQSf\n6v3hKDVdRkzR/Huk42fsxFHQkqpKTC1SUEQiKjpN/DpWmwzm6JcuQdKERazLOxuP\n+XyOc+A0U4LSzAp1H/0OWDrqmDmpDTJoMJyjMmRzxB7NmuOv4wxcp79f81YirhE8\nsYZFQdC2BXzVzSK4OzcZeqeX3c6wdbSYvFbgIJfQutU8B+OW3gOYldDsIEWYcst/\ngxkRaDgdRcJecVYi9lCaKypvW6oHztinmj2uSLgMEzUp75VU1u8pzjd5fdcKaJAl\nbI76pXcm/pzqROxIMmYkDlpktaxkHK5lBvUhQB5L9h6phVnC1e/H0X9JKX+P74zJ\nSBaOCkVtjHHC4Om9gE88R9WeTGKC8GO0Hzc8asYf+z85GRTdfU8=\n=V5py\n-----END PGP SIGNATURE-----",
        "payload": "tree 5007f220cb0d1ed5175bae030479bb63c3a5f2ee\nparent f1ed1d3194d4160923f3b02fa1acffd805ab4428\nauthor fanquake <fanquake@gmail.com> 1632880116 +0800\ncommitter fanquake <fanquake@gmail.com> 1632880116 +0800\n\nbloom: cleanup includes\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a11da7541148b5bb8e293c0ee49b2856a6628099",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a11da7541148b5bb8e293c0ee49b2856a6628099",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a11da7541148b5bb8e293c0ee49b2856a6628099/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f1ed1d3194d4160923f3b02fa1acffd805ab4428",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f1ed1d3194d4160923f3b02fa1acffd805ab4428",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f1ed1d3194d4160923f3b02fa1acffd805ab4428"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 8,
      "deletions": 5
    },
    "files": [
      {
        "sha": "15e06389deb920fb1a81ebc6219e686441eb2b90",
        "filename": "src/bloom.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a11da7541148b5bb8e293c0ee49b2856a6628099/src/bloom.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a11da7541148b5bb8e293c0ee49b2856a6628099/src/bloom.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.cpp?ref=a11da7541148b5bb8e293c0ee49b2856a6628099",
        "patch": "@@ -4,17 +4,19 @@\n \n #include <bloom.h>\n \n-#include <primitives/transaction.h>\n #include <hash.h>\n+#include <primitives/transaction.h>\n+#include <random.h>\n #include <script/script.h>\n #include <script/standard.h>\n-#include <random.h>\n+#include <span.h>\n #include <streams.h>\n \n-#include <math.h>\n-#include <stdlib.h>\n-\n #include <algorithm>\n+#include <cmath>\n+#include <cstdlib>\n+#include <limits>\n+#include <vector>\n \n static constexpr double LN2SQUARED = 0.4804530139182014246671025263266649717305529515945455;\n static constexpr double LN2 = 0.6931471805599453094172321214581765680755001343602552;"
      },
      {
        "sha": "422646d8b9f14dd85400c9ce551b15ca525cd0a7",
        "filename": "src/bloom.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a11da7541148b5bb8e293c0ee49b2856a6628099/src/bloom.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a11da7541148b5bb8e293c0ee49b2856a6628099/src/bloom.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.h?ref=a11da7541148b5bb8e293c0ee49b2856a6628099",
        "patch": "@@ -6,6 +6,7 @@\n #define BITCOIN_BLOOM_H\n \n #include <serialize.h>\n+#include <span.h>\n \n #include <vector>\n "
      }
    ]
  }
]