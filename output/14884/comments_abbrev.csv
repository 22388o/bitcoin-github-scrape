practicalswift,2018-12-06T14:58:06Z,"Concept ACK\n\nGood idea!\n\n~What about bumping the requirement to 3.5 to allow for Xenial?~",https://github.com/bitcoin/bitcoin/pull/14884#issuecomment-444899004,444899004,
laanwj,2018-12-06T14:59:31Z,utACK,https://github.com/bitcoin/bitcoin/pull/14884#issuecomment-444899517,444899517,
hebasto,2018-12-06T15:07:13Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/14884#issuecomment-444902413,444902413,
MarcoFalke,2018-12-06T16:47:48Z,I mean of course strong Concept ACK if you figure out a way to install older versions (specific versions) of packages in ubuntu.,https://github.com/bitcoin/bitcoin/pull/14884#issuecomment-444942458,444942458,
Sjors,2018-12-06T18:56:24Z,"The only way to install older or newer versions of Python is through [pyenv](https://github.com/pyenv/pyenv#basic-github-checkout). I'd rather not add another dependency. \n\n~Instead, a more practical solution is to bump the minimum Python version to 3.5, because our linters use that. It's available on Ubuntu Xenial, but we would lose support for (almost EOL) Trusty (Python 3.4).~\n\nIn fact,",https://github.com/bitcoin/bitcoin/pull/14884#issuecomment-444986944,444986944,
Sjors,2018-12-06T18:59:38Z,* Travis build fails if I add commit 5b742441bbc70a0b15a00d214321e79c58738395 with too modern syntax: https://travis-ci.org/bitcoin/bitcoin/jobs/464559620#L609,https://github.com/bitcoin/bitcoin/pull/14884#issuecomment-444988002,444988002,
MarcoFalke,2018-12-06T19:02:18Z,"The python 3.4 requirement is only for the tests, which might be run by users that compile from source. Personally I don't care about the python version of developer tools and linters and I don't mind not supporting 3.4 for those.",https://github.com/bitcoin/bitcoin/pull/14884#issuecomment-444989044,444989044,
Sjors,2018-12-06T19:16:01Z,"@MarcoFalke I initially thought the linter itself needed Python 3.5, but that's not true anymore. So in that case we don't have to bump the version, nice!\n\nTravis build failure demo when you use too modern syntax: https://travis-ci.org/bitcoin/bitcoin/jobs/464581145#L609",https://github.com/bitcoin/bitcoin/pull/14884#issuecomment-444994387,444994387,
laanwj,2018-12-07T13:59:06Z,"I *would* prefer having all tools work with the supported version of Python (3.4), for consistency for developers, but agree it's not urgentâ€”having the tests pass is most important.",https://github.com/bitcoin/bitcoin/pull/14884#issuecomment-445240538,445240538,
practicalswift,2018-12-07T14:42:33Z,@laanwj That's a good point. Agree.,https://github.com/bitcoin/bitcoin/pull/14884#issuecomment-445252956,445252956,
Sjors,2018-12-07T16:05:58Z,"I agree with that too, but it's non-trivial because #14128 had to introduce Python 3.6 syntax in those tools to deal with some sort of encoding hell.",https://github.com/bitcoin/bitcoin/pull/14884#issuecomment-445279279,445279279,
laanwj,2018-12-07T16:34:24Z,"> I agree with that too, but it's non-trivial because #14128 had to introduce Python 3.6 syntax in those tools to deal with some sort of encoding hell.\n\nYes, that particular functionality looks hard to replace. I didn't know that was Python 3.6 specific.\n(edit: whoops accidental close)\n\nEdit: One way to handle this would be to wrap the appropriate `subprocess` calls and do the encoding m",https://github.com/bitcoin/bitcoin/pull/14884#issuecomment-445288634,445288634,
Sjors,2018-12-12T10:13:06Z,"Rebased and added a workaround for calling `.hex()` on a `CScript` array in #14886 (cc @jnewbery), which doesn't work before Python 3.5.",https://github.com/bitcoin/bitcoin/pull/14884#issuecomment-446533981,446533981,
laanwj,2018-12-13T12:16:58Z,"utACK 31926ee8cfc73501524dfa0fef2ccbaa786d6a00\n\nGoing to merge this immediately to avoid any non-Python3.4isms from sneaking in.",https://github.com/bitcoin/bitcoin/pull/14884#issuecomment-446948559,446948559,
Sjors,2019-01-29T18:12:36Z,"I missed a spot, see #15285",https://github.com/bitcoin/bitcoin/pull/14884#issuecomment-458646913,458646913,
MarcoFalke,2018-12-06T16:28:44Z,"No idea how this is supposed to work. We run the tests in a docker, which is completely separate from the travis environment?",https://github.com/bitcoin/bitcoin/pull/14884#discussion_r239520391,239520391,.travis.yml
Sjors,2018-12-06T16:41:50Z,In that case this probably won't work indeed... I thought we only used Docker on the Xenial host? I'm still waiting for Travis to build my test branch.,https://github.com/bitcoin/bitcoin/pull/14884#discussion_r239525465,239525465,.travis.yml
MarcoFalke,2018-12-06T16:46:33Z,https://github.com/bitcoin/bitcoin/blob/400a46c629a03ff5e01262c0301af3ad2c442a84/.travis.yml#L18 ;),https://github.com/bitcoin/bitcoin/pull/14884#discussion_r239527314,239527314,.travis.yml
Sjors,2018-12-06T16:48:30Z,"I see, trying a different approach...",https://github.com/bitcoin/bitcoin/pull/14884#discussion_r239528113,239528113,.travis.yml
MarcoFalke,2018-12-06T19:28:06Z,"Hmm, that would set the minimum version of the linters to 3.4, but not of the functional test suite. (Note that only parsing code according to 3.4 syntax does not mean it can run 3.4)",https://github.com/bitcoin/bitcoin/pull/14884#discussion_r239583159,239583159,.travis.yml
Sjors,2018-12-06T19:33:50Z,"The linter uses the available Python executable to lint the functional tests. It will throw an error if sees a syntax that it doesn't recognise, see above demo. So it's not necessary to run the functional tests themselves in Python 3.4, which would require adding pyenv as a dependency inside the Docker container and slow things down. ",https://github.com/bitcoin/bitcoin/pull/14884#discussion_r239585126,239585126,.travis.yml
Sjors,2018-12-06T19:35:30Z,"Also, though hopefully not needed, any developer who uses pyenv on their machine will detect any mistake that slips through the cracks once they run the functional test suite on master.",https://github.com/bitcoin/bitcoin/pull/14884#discussion_r239585696,239585696,.travis.yml
jnewbery,2018-12-13T15:30:10Z,"Does pyenv allow you to comment this file? It's not immediately obvious that this is for pyenv, how it's supposed to work, or when we should update this.",https://github.com/bitcoin/bitcoin/pull/14884#discussion_r241444376,241444376,.python-version
Sjors,2018-12-13T17:52:11Z,I'll look into that. At least you can find out via git-blame :-P,https://github.com/bitcoin/bitcoin/pull/14884#discussion_r241500566,241500566,.python-version
Sjors,2019-01-15T18:59:31Z,"pyenv doesn't like it when you add a comment to `.python-version`, so I just updated the code style guidelines with an explanation in #15173.",https://github.com/bitcoin/bitcoin/pull/14884#discussion_r248021220,248021220,.python-version
