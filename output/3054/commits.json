[
  {
    "sha": "c2b705f0ce0a1c51f71db62b757d43f752499e8a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMmI3MDVmMGNlMGExYzUxZjcxZGI2MmI3NTdkNDNmNzUyNDk5ZThh",
    "commit": {
      "author": {
        "name": "Olivier Langlois",
        "email": "olivier@olivierlanglois.net",
        "date": "2013-10-04T22:46:09Z"
      },
      "committer": {
        "name": "Olivier Langlois",
        "email": "olivier@olivierlanglois.net",
        "date": "2013-10-04T22:46:09Z"
      },
      "message": "Apply More Effective C++ item 6 advice\n\nBasically that means to prefer prefix increment over postfix ones\nAs the latter produce temporary objects.\n\nSigned-off-by: Olivier Langlois <olivier@olivierlanglois.net>",
      "tree": {
        "sha": "ff3cb3e21ac6e8cf00c44e706d05ba1bf42d1c28",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ff3cb3e21ac6e8cf00c44e706d05ba1bf42d1c28"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c2b705f0ce0a1c51f71db62b757d43f752499e8a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c2b705f0ce0a1c51f71db62b757d43f752499e8a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c2b705f0ce0a1c51f71db62b757d43f752499e8a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c2b705f0ce0a1c51f71db62b757d43f752499e8a/comments",
    "author": {
      "login": "lano1106",
      "id": 4829131,
      "node_id": "MDQ6VXNlcjQ4MjkxMzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4829131?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lano1106",
      "html_url": "https://github.com/lano1106",
      "followers_url": "https://api.github.com/users/lano1106/followers",
      "following_url": "https://api.github.com/users/lano1106/following{/other_user}",
      "gists_url": "https://api.github.com/users/lano1106/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lano1106/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lano1106/subscriptions",
      "organizations_url": "https://api.github.com/users/lano1106/orgs",
      "repos_url": "https://api.github.com/users/lano1106/repos",
      "events_url": "https://api.github.com/users/lano1106/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lano1106/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "lano1106",
      "id": 4829131,
      "node_id": "MDQ6VXNlcjQ4MjkxMzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4829131?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lano1106",
      "html_url": "https://github.com/lano1106",
      "followers_url": "https://api.github.com/users/lano1106/followers",
      "following_url": "https://api.github.com/users/lano1106/following{/other_user}",
      "gists_url": "https://api.github.com/users/lano1106/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lano1106/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lano1106/subscriptions",
      "organizations_url": "https://api.github.com/users/lano1106/orgs",
      "repos_url": "https://api.github.com/users/lano1106/repos",
      "events_url": "https://api.github.com/users/lano1106/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lano1106/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "15b48ab03612952b355cdd411cc541668d147bfb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/15b48ab03612952b355cdd411cc541668d147bfb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/15b48ab03612952b355cdd411cc541668d147bfb"
      }
    ],
    "stats": {
      "total": 66,
      "additions": 36,
      "deletions": 30
    },
    "files": [
      {
        "sha": "5047312109d875cb850f270f556700ae8fdf6d7c",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2b705f0ce0a1c51f71db62b757d43f752499e8a/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2b705f0ce0a1c51f71db62b757d43f752499e8a/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=c2b705f0ce0a1c51f71db62b757d43f752499e8a",
        "patch": "@@ -282,7 +282,7 @@ class CAddrMan\n                 READWRITE(nUBuckets);\n                 std::map<int, int> mapUnkIds;\n                 int nIds = 0;\n-                for (std::map<int, CAddrInfo>::iterator it = am->mapInfo.begin(); it != am->mapInfo.end(); it++)\n+                for (std::map<int, CAddrInfo>::iterator it = am->mapInfo.begin(); it != am->mapInfo.end(); ++it)\n                 {\n                     if (nIds == nNew) break; // this means nNew was wrong, oh ow\n                     mapUnkIds[(*it).first] = nIds;\n@@ -294,7 +294,7 @@ class CAddrMan\n                     }\n                 }\n                 nIds = 0;\n-                for (std::map<int, CAddrInfo>::iterator it = am->mapInfo.begin(); it != am->mapInfo.end(); it++)\n+                for (std::map<int, CAddrInfo>::iterator it = am->mapInfo.begin(); it != am->mapInfo.end(); ++it)\n                 {\n                     if (nIds == nTried) break; // this means nTried was wrong, oh ow\n                     CAddrInfo &info = (*it).second;\n@@ -304,12 +304,12 @@ class CAddrMan\n                         nIds++;\n                     }\n                 }\n-                for (std::vector<std::set<int> >::iterator it = am->vvNew.begin(); it != am->vvNew.end(); it++)\n+                for (std::vector<std::set<int> >::iterator it = am->vvNew.begin(); it != am->vvNew.end(); ++it)\n                 {\n                     const std::set<int> &vNew = (*it);\n                     int nSize = vNew.size();\n                     READWRITE(nSize);\n-                    for (std::set<int>::iterator it2 = vNew.begin(); it2 != vNew.end(); it2++)\n+                    for (std::set<int>::iterator it2 = vNew.begin(); it2 != vNew.end(); ++it2)\n                     {\n                         int nIndex = mapUnkIds[*it2];\n                         READWRITE(nIndex);\n@@ -430,7 +430,7 @@ class CAddrMan\n         {\n             LOCK(cs);\n             Check();\n-            for (std::vector<CAddress>::const_iterator it = vAddr.begin(); it != vAddr.end(); it++)\n+            for (std::vector<CAddress>::const_iterator it = vAddr.begin(); it != vAddr.end(); ++it)\n                 nAdd += Add_(*it, source, nTimePenalty) ? 1 : 0;\n             Check();\n         }"
      },
      {
        "sha": "c8b783410c47ec60919d97661cd5a5c65c089928",
        "filename": "src/keystore.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2b705f0ce0a1c51f71db62b757d43f752499e8a/src/keystore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2b705f0ce0a1c51f71db62b757d43f752499e8a/src/keystore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.h?ref=c2b705f0ce0a1c51f71db62b757d43f752499e8a",
        "patch": "@@ -66,7 +66,7 @@ class CBasicKeyStore : public CKeyStore\n             while (mi != mapKeys.end())\n             {\n                 setAddress.insert((*mi).first);\n-                mi++;\n+                ++mi;\n             }\n         }\n     }\n@@ -162,7 +162,7 @@ class CCryptoKeyStore : public CBasicKeyStore\n         while (mi != mapCryptedKeys.end())\n         {\n             setAddress.insert((*mi).first);\n-            mi++;\n+            ++mi;\n         }\n     }\n "
      },
      {
        "sha": "203a204ab3592f072f8f0d3b1b59ea8e2995a5c5",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 8,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2b705f0ce0a1c51f71db62b757d43f752499e8a/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2b705f0ce0a1c51f71db62b757d43f752499e8a/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=c2b705f0ce0a1c51f71db62b757d43f752499e8a",
        "patch": "@@ -352,7 +352,7 @@ bool CCoinsViewCache::SetBestBlock(CBlockIndex *pindex) {\n }\n \n bool CCoinsViewCache::BatchWrite(const std::map<uint256, CCoins> &mapCoins, CBlockIndex *pindex) {\n-    for (std::map<uint256, CCoins>::const_iterator it = mapCoins.begin(); it != mapCoins.end(); it++)\n+    for (std::map<uint256, CCoins>::const_iterator it = mapCoins.begin(); it != mapCoins.end(); ++it)\n         cacheCoins[it->first] = it->second;\n     pindexTip = pindex;\n     return true;\n@@ -779,7 +779,7 @@ void CTxMemPool::pruneSpent(const uint256 &hashTx, CCoins &coins)\n     // iterate over all COutPoints in mapNextTx whose hash equals the provided hashTx\n     while (it != mapNextTx.end() && it->first.hash == hashTx) {\n         coins.Spend(it->first.n); // and remove those outputs from coins\n-        it++;\n+        ++it;\n     }\n }\n \n@@ -1026,7 +1026,8 @@ void CTxMemPool::check(CCoinsViewCache *pcoins) const\n     LogPrintf(\"Checking mempool with %u transactions and %u inputs\\n\", (unsigned int)mapTx.size(), (unsigned int)mapNextTx.size());\n \n     LOCK(cs);\n-    for (std::map<uint256, CTransaction>::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n+    for (std::map<uint256, CTransaction>::const_iterator it = mapTx.begin(); it != mapTx.end(); ++it)\n+    {\n         unsigned int i = 0;\n         BOOST_FOREACH(const CTxIn &txin, it->second.vin) {\n             // Check that every mempool transaction's inputs refer to available coins, or other mempool tx's.\n@@ -1045,7 +1046,8 @@ void CTxMemPool::check(CCoinsViewCache *pcoins) const\n             i++;\n         }\n     }\n-    for (std::map<COutPoint, CInPoint>::const_iterator it = mapNextTx.begin(); it != mapNextTx.end(); it++) {\n+    for (std::map<COutPoint, CInPoint>::const_iterator it = mapNextTx.begin(); it != mapNextTx.end(); ++it)\n+    {\n         uint256 hash = it->second.ptx->GetHash();\n         std::map<uint256, CTransaction>::const_iterator it2 = mapTx.find(hash);\n         assert(it2 != mapTx.end());\n@@ -3287,7 +3289,7 @@ void static ProcessGetData(CNode* pfrom)\n         const CInv &inv = *it;\n         {\n             boost::this_thread::interruption_point();\n-            it++;\n+            ++it;\n \n             if (inv.type == MSG_BLOCK || inv.type == MSG_FILTERED_BLOCK)\n             {\n@@ -3993,7 +3995,7 @@ bool ProcessMessages(CNode* pfrom)\n             break;\n \n         // at this point, any failure means we can delete the current message\n-        it++;\n+        ++it;\n \n         // Scan for message start\n         if (memcmp(msg.hdr.pchMessageStart, Params().MessageStart(), MESSAGE_START_SIZE) != 0) {\n@@ -4255,13 +4257,13 @@ class CMainCleanup\n     ~CMainCleanup() {\n         // block headers\n         std::map<uint256, CBlockIndex*>::iterator it1 = mapBlockIndex.begin();\n-        for (; it1 != mapBlockIndex.end(); it1++)\n+        for (; it1 != mapBlockIndex.end(); ++it1)\n             delete (*it1).second;\n         mapBlockIndex.clear();\n \n         // orphan blocks\n         std::map<uint256, CBlock*>::iterator it2 = mapOrphanBlocks.begin();\n-        for (; it2 != mapOrphanBlocks.end(); it2++)\n+        for (; it2 != mapOrphanBlocks.end(); ++it2)\n             delete (*it2).second;\n         mapOrphanBlocks.clear();\n "
      },
      {
        "sha": "988b2cc404b3866dc0e21e5d7a1b088a53741cdf",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2b705f0ce0a1c51f71db62b757d43f752499e8a/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2b705f0ce0a1c51f71db62b757d43f752499e8a/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=c2b705f0ce0a1c51f71db62b757d43f752499e8a",
        "patch": "@@ -108,7 +108,7 @@ bool GetLocal(CService& addr, const CNetAddr *paddrPeer)\n     int nBestReachability = -1;\n     {\n         LOCK(cs_mapLocalHost);\n-        for (map<CNetAddr, LocalServiceInfo>::iterator it = mapLocalHost.begin(); it != mapLocalHost.end(); it++)\n+        for (map<CNetAddr, LocalServiceInfo>::iterator it = mapLocalHost.begin(); it != mapLocalHost.end(); ++it)\n         {\n             int nScore = (*it).second.nScore;\n             int nReachability = (*it).first.GetReachabilityFrom(paddrPeer);\n@@ -719,7 +719,7 @@ void SocketSendData(CNode *pnode)\n             if (pnode->nSendOffset == data.size()) {\n                 pnode->nSendOffset = 0;\n                 pnode->nSendSize -= data.size();\n-                it++;\n+                ++it;\n             } else {\n                 // could not send full message; stop sending more\n                 break;\n@@ -1408,7 +1408,7 @@ void ThreadOpenAddedConnections()\n         {\n             LOCK(cs_vNodes);\n             BOOST_FOREACH(CNode* pnode, vNodes)\n-                for (list<vector<CService> >::iterator it = lservAddressesToAdd.begin(); it != lservAddressesToAdd.end(); it++)\n+                for (list<vector<CService> >::iterator it = lservAddressesToAdd.begin(); it != lservAddressesToAdd.end(); ++it)\n                     BOOST_FOREACH(CService& addrNode, *(it))\n                         if (pnode->addr == addrNode)\n                         {"
      },
      {
        "sha": "da7c89435435bc4860a26b053a7d3bb4101290ef",
        "filename": "src/rpcdump.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2b705f0ce0a1c51f71db62b757d43f752499e8a/src/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2b705f0ce0a1c51f71db62b757d43f752499e8a/src/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcdump.cpp?ref=c2b705f0ce0a1c51f71db62b757d43f752499e8a",
        "patch": "@@ -234,7 +234,8 @@ Value dumpwallet(const Array& params, bool fHelp)\n \n     // sort time/key pairs\n     std::vector<std::pair<int64, CKeyID> > vKeyBirth;\n-    for (std::map<CKeyID, int64>::const_iterator it = mapKeyBirth.begin(); it != mapKeyBirth.end(); it++) {\n+    for (std::map<CKeyID, int64>::const_iterator it = mapKeyBirth.begin(); it != mapKeyBirth.end(); ++it)\n+    {\n         vKeyBirth.push_back(std::make_pair(it->second, it->first));\n     }\n     mapKeyBirth.clear();\n@@ -246,7 +247,8 @@ Value dumpwallet(const Array& params, bool fHelp)\n     file << strprintf(\"# * Best block at time of backup was %i (%s),\\n\", nBestHeight, hashBestChain.ToString().c_str());\n     file << strprintf(\"#   mined on %s\\n\", EncodeDumpTime(pindexBest->nTime).c_str());\n     file << \"\\n\";\n-    for (std::vector<std::pair<int64, CKeyID> >::const_iterator it = vKeyBirth.begin(); it != vKeyBirth.end(); it++) {\n+    for (std::vector<std::pair<int64, CKeyID> >::const_iterator it = vKeyBirth.begin(); it != vKeyBirth.end(); ++it)\n+    {\n         const CKeyID &keyid = it->second;\n         std::string strTime = EncodeDumpTime(it->first);\n         std::string strAddr = CBitcoinAddress(keyid).ToString();"
      },
      {
        "sha": "66570572469d70327e062edd7a92b0eceafd0306",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2b705f0ce0a1c51f71db62b757d43f752499e8a/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2b705f0ce0a1c51f71db62b757d43f752499e8a/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=c2b705f0ce0a1c51f71db62b757d43f752499e8a",
        "patch": "@@ -90,7 +90,7 @@ Value addnode(const Array& params, bool fHelp)\n \n     LOCK(cs_vAddedNodes);\n     vector<string>::iterator it = vAddedNodes.begin();\n-    for(; it != vAddedNodes.end(); it++)\n+    for(; it != vAddedNodes.end(); ++it)\n         if (strNode == *it)\n             break;\n \n@@ -170,7 +170,7 @@ Value getaddednodeinfo(const Array& params, bool fHelp)\n     }\n \n     LOCK(cs_vNodes);\n-    for (list<pair<string, vector<CService> > >::iterator it = laddedAddreses.begin(); it != laddedAddreses.end(); it++)\n+    for (list<pair<string, vector<CService> > >::iterator it = laddedAddreses.begin(); it != laddedAddreses.end(); ++it)\n     {\n         Object obj;\n         obj.push_back(Pair(\"addednode\", it->first));"
      },
      {
        "sha": "3f7f3c84edf39b406a13c0b4a932841d223139fe",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2b705f0ce0a1c51f71db62b757d43f752499e8a/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2b705f0ce0a1c51f71db62b757d43f752499e8a/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=c2b705f0ce0a1c51f71db62b757d43f752499e8a",
        "patch": "@@ -1184,7 +1184,7 @@ Value listsinceblock(const Array& params, bool fHelp)\n \n     Array transactions;\n \n-    for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); it++)\n+    for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n     {\n         CWalletTx tx = (*it).second;\n "
      },
      {
        "sha": "caf0c1dda4fbc54290d6918b927e65f655551c6d",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2b705f0ce0a1c51f71db62b757d43f752499e8a/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2b705f0ce0a1c51f71db62b757d43f752499e8a/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=c2b705f0ce0a1c51f71db62b757d43f752499e8a",
        "patch": "@@ -58,7 +58,7 @@ bool CCoinsViewDB::BatchWrite(const std::map<uint256, CCoins> &mapCoins, CBlockI\n     LogPrint(\"coindb\", \"Committing %u changed transactions to coin database...\\n\", (unsigned int)mapCoins.size());\n \n     CLevelDBBatch batch;\n-    for (std::map<uint256, CCoins>::const_iterator it = mapCoins.begin(); it != mapCoins.end(); it++)\n+    for (std::map<uint256, CCoins>::const_iterator it = mapCoins.begin(); it != mapCoins.end(); ++it)\n         BatchWriteCoins(batch, it->first, it->second);\n     if (pindex)\n         BatchWriteHashBestChain(batch, pindex->GetBlockHash());\n@@ -169,7 +169,7 @@ bool CBlockTreeDB::ReadTxIndex(const uint256 &txid, CDiskTxPos &pos) {\n \n bool CBlockTreeDB::WriteTxIndex(const std::vector<std::pair<uint256, CDiskTxPos> >&vect) {\n     CLevelDBBatch batch;\n-    for (std::vector<std::pair<uint256,CDiskTxPos> >::const_iterator it=vect.begin(); it!=vect.end(); it++)\n+    for (std::vector<std::pair<uint256,CDiskTxPos> >::const_iterator it=vect.begin(); it!=vect.end(); ++it)\n         batch.Write(make_pair('t', it->first), it->second);\n     return WriteBatch(batch);\n }"
      },
      {
        "sha": "1db69388a952cdb8472541e7619e8db496f1735e",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2b705f0ce0a1c51f71db62b757d43f752499e8a/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2b705f0ce0a1c51f71db62b757d43f752499e8a/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=c2b705f0ce0a1c51f71db62b757d43f752499e8a",
        "patch": "@@ -1918,7 +1918,8 @@ bool CWallet::IsLockedCoin(uint256 hash, unsigned int n) const\n void CWallet::ListLockedCoins(std::vector<COutPoint>& vOutpts)\n {\n     for (std::set<COutPoint>::iterator it = setLockedCoins.begin();\n-         it != setLockedCoins.end(); it++) {\n+         it != setLockedCoins.end(); ++it)\n+    {\n         COutPoint outpt = (*it);\n         vOutpts.push_back(outpt);\n     }\n@@ -1928,7 +1929,7 @@ void CWallet::GetKeyBirthTimes(std::map<CKeyID, int64> &mapKeyBirth) const {\n     mapKeyBirth.clear();\n \n     // get birth times for keys with metadata\n-    for (std::map<CKeyID, CKeyMetadata>::const_iterator it = mapKeyMetadata.begin(); it != mapKeyMetadata.end(); it++)\n+    for (std::map<CKeyID, CKeyMetadata>::const_iterator it = mapKeyMetadata.begin(); it != mapKeyMetadata.end(); ++it)\n         if (it->second.nCreateTime)\n             mapKeyBirth[it->first] = it->second.nCreateTime;\n \n@@ -1949,7 +1950,8 @@ void CWallet::GetKeyBirthTimes(std::map<CKeyID, int64> &mapKeyBirth) const {\n \n     // find first block that affects those keys, if there are any left\n     std::vector<CKeyID> vAffected;\n-    for (std::map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); it++) {\n+    for (std::map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n+    {\n         // iterate over all wallet transactions...\n         const CWalletTx &wtx = (*it).second;\n         std::map<uint256, CBlockIndex*>::const_iterator blit = mapBlockIndex.find(wtx.hashBlock);\n@@ -1971,6 +1973,6 @@ void CWallet::GetKeyBirthTimes(std::map<CKeyID, int64> &mapKeyBirth) const {\n     }\n \n     // Extract block timestamps for those keys\n-    for (std::map<CKeyID, CBlockIndex*>::const_iterator it = mapKeyFirstBlock.begin(); it != mapKeyFirstBlock.end(); it++)\n+    for (std::map<CKeyID, CBlockIndex*>::const_iterator it = mapKeyFirstBlock.begin(); it != mapKeyFirstBlock.end(); ++it)\n         mapKeyBirth[it->first] = it->second->nTime - 7200; // block times can be 2h off\n }"
      },
      {
        "sha": "63a0e0c37e948942b2814c78731147af6f8fd6a1",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2b705f0ce0a1c51f71db62b757d43f752499e8a/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2b705f0ce0a1c51f71db62b757d43f752499e8a/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=c2b705f0ce0a1c51f71db62b757d43f752499e8a",
        "patch": "@@ -567,7 +567,7 @@ void ThreadFlushWalletDB(const string& strFile)\n                 while (mi != bitdb.mapFileUseCount.end())\n                 {\n                     nRefCount += (*mi).second;\n-                    mi++;\n+                    ++mi;\n                 }\n \n                 if (nRefCount == 0)"
      }
    ]
  }
]