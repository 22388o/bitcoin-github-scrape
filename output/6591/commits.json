[
  {
    "sha": "18a33b3979825a210add8c55766c2a6b8cd1bb83",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxOGEzM2IzOTc5ODI1YTIxMGFkZDhjNTU3NjZjMmE2YjhjZDFiYjgz",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-07-30T00:31:53Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-09-06T04:35:48Z"
      },
      "message": "consensus: don't define MAX_STANDARD_TX_SIGOPS in terms of block size",
      "tree": {
        "sha": "8936db4488bb565889a751dd388ff302b921183b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8936db4488bb565889a751dd388ff302b921183b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/18a33b3979825a210add8c55766c2a6b8cd1bb83",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18a33b3979825a210add8c55766c2a6b8cd1bb83",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/18a33b3979825a210add8c55766c2a6b8cd1bb83",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18a33b3979825a210add8c55766c2a6b8cd1bb83/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ea19c2bc3f2281ad319457c6fa518bff96af13e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea19c2bc3f2281ad319457c6fa518bff96af13e3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ea19c2bc3f2281ad319457c6fa518bff96af13e3"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "29892645af8d9b7b241467af56d030e3c48d3274",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18a33b3979825a210add8c55766c2a6b8cd1bb83/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18a33b3979825a210add8c55766c2a6b8cd1bb83/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=18a33b3979825a210add8c55766c2a6b8cd1bb83",
        "patch": "@@ -24,7 +24,7 @@ static const unsigned int MAX_STANDARD_TX_SIZE = 100000;\n /** Maximum number of signature check operations in an IsStandard() P2SH script */\n static const unsigned int MAX_P2SH_SIGOPS = 15;\n /** The maximum number of sigops we're willing to relay/mine in a single tx */\n-static const unsigned int MAX_STANDARD_TX_SIGOPS = MAX_BLOCK_SIGOPS/5;\n+static const unsigned int MAX_STANDARD_TX_SIGOPS = MAX_STANDARD_TX_SIZE/25; // one sigop per 25 bytes\n /**\n  * Standard script verification flags that standard transactions will comply\n  * with. However scripts violating these flags may still be present in valid"
      }
    ]
  },
  {
    "sha": "5cb4d7e20e52d64b164a4d6c506e6767e227aa2f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1Y2I0ZDdlMjBlNTJkNjRiMTY0YTRkNmM1MDZlNjc2N2UyMjdhYTJm",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-07-30T20:18:40Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-09-06T04:35:57Z"
      },
      "message": "consensus: teach ExtractMatches to check for an arbitrary max transaction number\n\nThis is a no-op change. For now, everything passes MAX_BLOCK_SIZE / 60, so the\nresult matches what it would've before.\n\nTests use a number equal to the number of transactions where necessary,\nto ensure that they're never rejected when blocksizesize isn't being tested.",
      "tree": {
        "sha": "f5fd443bf6efa61a517406e8d19bfbd30054ce59",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f5fd443bf6efa61a517406e8d19bfbd30054ce59"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5cb4d7e20e52d64b164a4d6c506e6767e227aa2f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5cb4d7e20e52d64b164a4d6c506e6767e227aa2f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5cb4d7e20e52d64b164a4d6c506e6767e227aa2f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5cb4d7e20e52d64b164a4d6c506e6767e227aa2f/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "18a33b3979825a210add8c55766c2a6b8cd1bb83",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18a33b3979825a210add8c55766c2a6b8cd1bb83",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/18a33b3979825a210add8c55766c2a6b8cd1bb83"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 23,
      "deletions": 16
    },
    "files": [
      {
        "sha": "70c007b6151f2469524bf3f6a752ed63534a3624",
        "filename": "src/merkleblock.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5cb4d7e20e52d64b164a4d6c506e6767e227aa2f/src/merkleblock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5cb4d7e20e52d64b164a4d6c506e6767e227aa2f/src/merkleblock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/merkleblock.cpp?ref=5cb4d7e20e52d64b164a4d6c506e6767e227aa2f",
        "patch": "@@ -147,13 +147,13 @@ CPartialMerkleTree::CPartialMerkleTree(const std::vector<uint256> &vTxid, const\n \n CPartialMerkleTree::CPartialMerkleTree() : nTransactions(0), fBad(true) {}\n \n-uint256 CPartialMerkleTree::ExtractMatches(std::vector<uint256> &vMatch) {\n+uint256 CPartialMerkleTree::ExtractMatches(uint64_t nMaxTransactions, std::vector<uint256> &vMatch) {\n     vMatch.clear();\n     // An empty set will not work\n     if (nTransactions == 0)\n         return uint256();\n     // check for excessively high numbers of transactions\n-    if (nTransactions > MAX_BLOCK_SIZE / 60) // 60 is the lower bound for the size of a serialized CTransaction\n+    if (nTransactions > nMaxTransactions)\n         return uint256();\n     // there can never be more hashes provided than one for every txid\n     if (vHash.size() > nTransactions)"
      },
      {
        "sha": "244d3637e3f49e7a0905fe3c0777a1239177b4b4",
        "filename": "src/merkleblock.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5cb4d7e20e52d64b164a4d6c506e6767e227aa2f/src/merkleblock.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5cb4d7e20e52d64b164a4d6c506e6767e227aa2f/src/merkleblock.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/merkleblock.h?ref=5cb4d7e20e52d64b164a4d6c506e6767e227aa2f",
        "patch": "@@ -113,7 +113,7 @@ class CPartialMerkleTree\n      * extract the matching txid's represented by this partial merkle tree.\n      * returns the merkle root, or 0 in case of failure\n      */\n-    uint256 ExtractMatches(std::vector<uint256> &vMatch);\n+    uint256 ExtractMatches(uint64_t nMaxTransactions, std::vector<uint256> &vMatch);\n };\n \n "
      },
      {
        "sha": "22066a63f4ec1c0aac3bc38054aa3316a0e12f00",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5cb4d7e20e52d64b164a4d6c506e6767e227aa2f/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5cb4d7e20e52d64b164a4d6c506e6767e227aa2f/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=5cb4d7e20e52d64b164a4d6c506e6767e227aa2f",
        "patch": "@@ -300,8 +300,9 @@ UniValue verifytxoutproof(const UniValue& params, bool fHelp)\n \n     UniValue res(UniValue::VARR);\n \n+    uint64_t nMaxTransactions = MAX_BLOCK_SIZE / 60;\n     vector<uint256> vMatch;\n-    if (merkleBlock.txn.ExtractMatches(vMatch) != merkleBlock.header.hashMerkleRoot)\n+    if (merkleBlock.txn.ExtractMatches(nMaxTransactions, vMatch) != merkleBlock.header.hashMerkleRoot)\n         return res;\n \n     LOCK(cs_main);"
      },
      {
        "sha": "38b0d30b83be2fadad9a15cb7ec62098624eb733",
        "filename": "src/test/bloom_tests.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 9,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5cb4d7e20e52d64b164a4d6c506e6767e227aa2f/src/test/bloom_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5cb4d7e20e52d64b164a4d6c506e6767e227aa2f/src/test/bloom_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bloom_tests.cpp?ref=5cb4d7e20e52d64b164a4d6c506e6767e227aa2f",
        "patch": "@@ -190,6 +190,7 @@ BOOST_AUTO_TEST_CASE(merkle_block_1)\n     CDataStream stream(ParseHex(\"0100000090f0a9f110702f808219ebea1173056042a714bad51b916cb6800000000000005275289558f51c9966699404ae2294730c3c9f9bda53523ce50e9b95e558da2fdb261b4d4c86041b1ab1bf930901000000010000000000000000000000000000000000000000000000000000000000000000ffffffff07044c86041b0146ffffffff0100f2052a01000000434104e18f7afbe4721580e81e8414fc8c24d7cfacf254bb5c7b949450c3e997c2dc1242487a8169507b631eb3771f2b425483fb13102c4eb5d858eef260fe70fbfae0ac00000000010000000196608ccbafa16abada902780da4dc35dafd7af05fa0da08cf833575f8cf9e836000000004a493046022100dab24889213caf43ae6adc41cf1c9396c08240c199f5225acf45416330fd7dbd022100fe37900e0644bf574493a07fc5edba06dbc07c311b947520c2d514bc5725dcb401ffffffff0100f2052a010000001976a914f15d1921f52e4007b146dfa60f369ed2fc393ce288ac000000000100000001fb766c1288458c2bafcfec81e48b24d98ec706de6b8af7c4e3c29419bfacb56d000000008c493046022100f268ba165ce0ad2e6d93f089cfcd3785de5c963bb5ea6b8c1b23f1ce3e517b9f022100da7c0f21adc6c401887f2bfd1922f11d76159cbc597fbd756a23dcbb00f4d7290141042b4e8625a96127826915a5b109852636ad0da753c9e1d5606a50480cd0c40f1f8b8d898235e571fe9357d9ec842bc4bba1827daaf4de06d71844d0057707966affffffff0280969800000000001976a9146963907531db72d0ed1a0cfb471ccb63923446f388ac80d6e34c000000001976a914f0688ba1c0d1ce182c7af6741e02658c7d4dfcd388ac000000000100000002c40297f730dd7b5a99567eb8d27b78758f607507c52292d02d4031895b52f2ff010000008b483045022100f7edfd4b0aac404e5bab4fd3889e0c6c41aa8d0e6fa122316f68eddd0a65013902205b09cc8b2d56e1cd1f7f2fafd60a129ed94504c4ac7bdc67b56fe67512658b3e014104732012cb962afa90d31b25d8fb0e32c94e513ab7a17805c14ca4c3423e18b4fb5d0e676841733cb83abaf975845c9f6f2a8097b7d04f4908b18368d6fc2d68ecffffffffca5065ff9617cbcba45eb23726df6498a9b9cafed4f54cbab9d227b0035ddefb000000008a473044022068010362a13c7f9919fa832b2dee4e788f61f6f5d344a7c2a0da6ae740605658022006d1af525b9a14a35c003b78b72bd59738cd676f845d1ff3fc25049e01003614014104732012cb962afa90d31b25d8fb0e32c94e513ab7a17805c14ca4c3423e18b4fb5d0e676841733cb83abaf975845c9f6f2a8097b7d04f4908b18368d6fc2d68ecffffffff01001ec4110200000043410469ab4181eceb28985b9b4e895c13fa5e68d85761b7eee311db5addef76fa8621865134a221bd01f28ec9999ee3e021e60766e9d1f3458c115fb28650605f11c9ac000000000100000001cdaf2f758e91c514655e2dc50633d1e4c84989f8aa90a0dbc883f0d23ed5c2fa010000008b48304502207ab51be6f12a1962ba0aaaf24a20e0b69b27a94fac5adf45aa7d2d18ffd9236102210086ae728b370e5329eead9accd880d0cb070aea0c96255fae6c4f1ddcce1fd56e014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffff02404b4c00000000001976a9142b6ba7c9d796b75eef7942fc9288edd37c32f5c388ac002d3101000000001976a9141befba0cdc1ad56529371864d9f6cb042faa06b588ac000000000100000001b4a47603e71b61bc3326efd90111bf02d2f549b067f4c4a8fa183b57a0f800cb010000008a4730440220177c37f9a505c3f1a1f0ce2da777c339bd8339ffa02c7cb41f0a5804f473c9230220585b25a2ee80eb59292e52b987dad92acb0c64eced92ed9ee105ad153cdb12d001410443bd44f683467e549dae7d20d1d79cbdb6df985c6e9c029c8d0c6cb46cc1a4d3cf7923c5021b27f7a0b562ada113bc85d5fda5a1b41e87fe6e8802817cf69996ffffffff0280651406000000001976a9145505614859643ab7b547cd7f1f5e7e2a12322d3788ac00aa0271000000001976a914ea4720a7a52fc166c55ff2298e07baf70ae67e1b88ac00000000010000000586c62cd602d219bb60edb14a3e204de0705176f9022fe49a538054fb14abb49e010000008c493046022100f2bc2aba2534becbdf062eb993853a42bbbc282083d0daf9b4b585bd401aa8c9022100b1d7fd7ee0b95600db8535bbf331b19eed8d961f7a8e54159c53675d5f69df8c014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffff03ad0e58ccdac3df9dc28a218bcf6f1997b0a93306faaa4b3a28ae83447b2179010000008b483045022100be12b2937179da88599e27bb31c3525097a07cdb52422d165b3ca2f2020ffcf702200971b51f853a53d644ebae9ec8f3512e442b1bcb6c315a5b491d119d10624c83014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffff2acfcab629bbc8685792603762c921580030ba144af553d271716a95089e107b010000008b483045022100fa579a840ac258871365dd48cd7552f96c8eea69bd00d84f05b283a0dab311e102207e3c0ee9234814cfbb1b659b83671618f45abc1326b9edcc77d552a4f2a805c0014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffffdcdc6023bbc9944a658ddc588e61eacb737ddf0a3cd24f113b5a8634c517fcd2000000008b4830450221008d6df731df5d32267954bd7d2dda2302b74c6c2a6aa5c0ca64ecbabc1af03c75022010e55c571d65da7701ae2da1956c442df81bbf076cdbac25133f99d98a9ed34c014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffffe15557cd5ce258f479dfd6dc6514edf6d7ed5b21fcfa4a038fd69f06b83ac76e010000008b483045022023b3e0ab071eb11de2eb1cc3a67261b866f86bf6867d4558165f7c8c8aca2d86022100dc6e1f53a91de3efe8f63512850811f26284b62f850c70ca73ed5de8771fb451014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffff01404b4c00000000001976a9142b6ba7c9d796b75eef7942fc9288edd37c32f5c388ac00000000010000000166d7577163c932b4f9690ca6a80b6e4eb001f0a2fa9023df5595602aae96ed8d000000008a4730440220262b42546302dfb654a229cefc86432b89628ff259dc87edd1154535b16a67e102207b4634c020a97c3e7bbd0d4d19da6aa2269ad9dded4026e896b213d73ca4b63f014104979b82d02226b3a4597523845754d44f13639e3bf2df5e82c6aab2bdc79687368b01b1ab8b19875ae3c90d661a3d0a33161dab29934edeb36aa01976be3baf8affffffff02404b4c00000000001976a9144854e695a02af0aeacb823ccbc272134561e0a1688ac40420f00000000001976a914abee93376d6b37b5c2940655a6fcaf1c8e74237988ac0000000001000000014e3f8ef2e91349a9059cb4f01e54ab2597c1387161d3da89919f7ea6acdbb371010000008c49304602210081f3183471a5ca22307c0800226f3ef9c353069e0773ac76bb580654d56aa523022100d4c56465bdc069060846f4fbf2f6b20520b2a80b08b168b31e66ddb9c694e240014104976c79848e18251612f8940875b2b08d06e6dc73b9840e8860c066b7e87432c477e9a59a453e71e6d76d5fe34058b800a098fc1740ce3012e8fc8a00c96af966ffffffff02c0e1e400000000001976a9144134e75a6fcb6042034aab5e18570cf1f844f54788ac404b4c00000000001976a9142b6ba7c9d796b75eef7942fc9288edd37c32f5c388ac00000000\"), SER_NETWORK, PROTOCOL_VERSION);\n     stream >> block;\n \n+    const uint64_t nMaxTransactions = block.vtx.size();\n     CBloomFilter filter(10, 0.000001, 0, BLOOM_UPDATE_ALL);\n     // Match the last transaction\n     filter.insert(uint256S(\"0x74d681e0e03bafa802c8aa084379aa98d9fcd632ddc2ed9782b586ec87451f20\"));\n@@ -204,7 +205,7 @@ BOOST_AUTO_TEST_CASE(merkle_block_1)\n     BOOST_CHECK(merkleBlock.vMatchedTxn[0].first == 8);\n \n     vector<uint256> vMatched;\n-    BOOST_CHECK(merkleBlock.txn.ExtractMatches(vMatched) == block.hashMerkleRoot);\n+    BOOST_CHECK(merkleBlock.txn.ExtractMatches(nMaxTransactions, vMatched) == block.hashMerkleRoot);\n     BOOST_CHECK(vMatched.size() == merkleBlock.vMatchedTxn.size());\n     for (unsigned int i = 0; i < vMatched.size(); i++)\n         BOOST_CHECK(vMatched[i] == merkleBlock.vMatchedTxn[i].second);\n@@ -221,7 +222,7 @@ BOOST_AUTO_TEST_CASE(merkle_block_1)\n     BOOST_CHECK(merkleBlock.vMatchedTxn[0].second == uint256S(\"0xdd1fd2a6fc16404faf339881a90adbde7f4f728691ac62e8f168809cdfae1053\"));\n     BOOST_CHECK(merkleBlock.vMatchedTxn[0].first == 7);\n \n-    BOOST_CHECK(merkleBlock.txn.ExtractMatches(vMatched) == block.hashMerkleRoot);\n+    BOOST_CHECK(merkleBlock.txn.ExtractMatches(nMaxTransactions, vMatched) == block.hashMerkleRoot);\n     BOOST_CHECK(vMatched.size() == merkleBlock.vMatchedTxn.size());\n     for (unsigned int i = 0; i < vMatched.size(); i++)\n         BOOST_CHECK(vMatched[i] == merkleBlock.vMatchedTxn[i].second);\n@@ -235,6 +236,7 @@ BOOST_AUTO_TEST_CASE(merkle_block_2)\n     CDataStream stream(ParseHex(\"0100000075616236cc2126035fadb38deb65b9102cc2c41c09cdf29fc051906800000000fe7d5e12ef0ff901f6050211249919b1c0653771832b3a80c66cea42847f0ae1d4d26e49ffff001d00f0a4410401000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0804ffff001d029105ffffffff0100f2052a010000004341046d8709a041d34357697dfcb30a9d05900a6294078012bf3bb09c6f9b525f1d16d5503d7905db1ada9501446ea00728668fc5719aa80be2fdfc8a858a4dbdd4fbac00000000010000000255605dc6f5c3dc148b6da58442b0b2cd422be385eab2ebea4119ee9c268d28350000000049483045022100aa46504baa86df8a33b1192b1b9367b4d729dc41e389f2c04f3e5c7f0559aae702205e82253a54bf5c4f65b7428551554b2045167d6d206dfe6a2e198127d3f7df1501ffffffff55605dc6f5c3dc148b6da58442b0b2cd422be385eab2ebea4119ee9c268d2835010000004847304402202329484c35fa9d6bb32a55a70c0982f606ce0e3634b69006138683bcd12cbb6602200c28feb1e2555c3210f1dddb299738b4ff8bbe9667b68cb8764b5ac17b7adf0001ffffffff0200e1f505000000004341046a0765b5865641ce08dd39690aade26dfbf5511430ca428a3089261361cef170e3929a68aee3d8d4848b0c5111b0a37b82b86ad559fd2a745b44d8e8d9dfdc0cac00180d8f000000004341044a656f065871a353f216ca26cef8dde2f03e8c16202d2e8ad769f02032cb86a5eb5e56842e92e19141d60a01928f8dd2c875a390f67c1f6c94cfc617c0ea45afac0000000001000000025f9a06d3acdceb56be1bfeaa3e8a25e62d182fa24fefe899d1c17f1dad4c2028000000004847304402205d6058484157235b06028c30736c15613a28bdb768ee628094ca8b0030d4d6eb0220328789c9a2ec27ddaec0ad5ef58efded42e6ea17c2e1ce838f3d6913f5e95db601ffffffff5f9a06d3acdceb56be1bfeaa3e8a25e62d182fa24fefe899d1c17f1dad4c2028010000004a493046022100c45af050d3cea806cedd0ab22520c53ebe63b987b8954146cdca42487b84bdd6022100b9b027716a6b59e640da50a864d6dd8a0ef24c76ce62391fa3eabaf4d2886d2d01ffffffff0200e1f505000000004341046a0765b5865641ce08dd39690aade26dfbf5511430ca428a3089261361cef170e3929a68aee3d8d4848b0c5111b0a37b82b86ad559fd2a745b44d8e8d9dfdc0cac00180d8f000000004341046a0765b5865641ce08dd39690aade26dfbf5511430ca428a3089261361cef170e3929a68aee3d8d4848b0c5111b0a37b82b86ad559fd2a745b44d8e8d9dfdc0cac000000000100000002e2274e5fea1bf29d963914bd301aa63b64daaf8a3e88f119b5046ca5738a0f6b0000000048473044022016e7a727a061ea2254a6c358376aaa617ac537eb836c77d646ebda4c748aac8b0220192ce28bf9f2c06a6467e6531e27648d2b3e2e2bae85159c9242939840295ba501ffffffffe2274e5fea1bf29d963914bd301aa63b64daaf8a3e88f119b5046ca5738a0f6b010000004a493046022100b7a1a755588d4190118936e15cd217d133b0e4a53c3c15924010d5648d8925c9022100aaef031874db2114f2d869ac2de4ae53908fbfea5b2b1862e181626bb9005c9f01ffffffff0200e1f505000000004341044a656f065871a353f216ca26cef8dde2f03e8c16202d2e8ad769f02032cb86a5eb5e56842e92e19141d60a01928f8dd2c875a390f67c1f6c94cfc617c0ea45afac00180d8f000000004341046a0765b5865641ce08dd39690aade26dfbf5511430ca428a3089261361cef170e3929a68aee3d8d4848b0c5111b0a37b82b86ad559fd2a745b44d8e8d9dfdc0cac00000000\"), SER_NETWORK, PROTOCOL_VERSION);\n     stream >> block;\n \n+    const uint64_t nMaxTransactions = block.vtx.size();\n     CBloomFilter filter(10, 0.000001, 0, BLOOM_UPDATE_ALL);\n     // Match the first transaction\n     filter.insert(uint256S(\"0xe980fe9f792d014e73b95203dc1335c5f9ce19ac537a419e6df5b47aecb93b70\"));\n@@ -249,7 +251,7 @@ BOOST_AUTO_TEST_CASE(merkle_block_2)\n     BOOST_CHECK(merkleBlock.vMatchedTxn[0].first == 0);\n \n     vector<uint256> vMatched;\n-    BOOST_CHECK(merkleBlock.txn.ExtractMatches(vMatched) == block.hashMerkleRoot);\n+    BOOST_CHECK(merkleBlock.txn.ExtractMatches(nMaxTransactions, vMatched) == block.hashMerkleRoot);\n     BOOST_CHECK(vMatched.size() == merkleBlock.vMatchedTxn.size());\n     for (unsigned int i = 0; i < vMatched.size(); i++)\n         BOOST_CHECK(vMatched[i] == merkleBlock.vMatchedTxn[i].second);\n@@ -275,7 +277,7 @@ BOOST_AUTO_TEST_CASE(merkle_block_2)\n     BOOST_CHECK(merkleBlock.vMatchedTxn[3].second == uint256S(\"0x3c1d7e82342158e4109df2e0b6348b6e84e403d8b4046d7007663ace63cddb23\"));\n     BOOST_CHECK(merkleBlock.vMatchedTxn[3].first == 3);\n \n-    BOOST_CHECK(merkleBlock.txn.ExtractMatches(vMatched) == block.hashMerkleRoot);\n+    BOOST_CHECK(merkleBlock.txn.ExtractMatches(nMaxTransactions, vMatched) == block.hashMerkleRoot);\n     BOOST_CHECK(vMatched.size() == merkleBlock.vMatchedTxn.size());\n     for (unsigned int i = 0; i < vMatched.size(); i++)\n         BOOST_CHECK(vMatched[i] == merkleBlock.vMatchedTxn[i].second);\n@@ -289,6 +291,7 @@ BOOST_AUTO_TEST_CASE(merkle_block_2_with_update_none)\n     CDataStream stream(ParseHex(\"0100000075616236cc2126035fadb38deb65b9102cc2c41c09cdf29fc051906800000000fe7d5e12ef0ff901f6050211249919b1c0653771832b3a80c66cea42847f0ae1d4d26e49ffff001d00f0a4410401000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0804ffff001d029105ffffffff0100f2052a010000004341046d8709a041d34357697dfcb30a9d05900a6294078012bf3bb09c6f9b525f1d16d5503d7905db1ada9501446ea00728668fc5719aa80be2fdfc8a858a4dbdd4fbac00000000010000000255605dc6f5c3dc148b6da58442b0b2cd422be385eab2ebea4119ee9c268d28350000000049483045022100aa46504baa86df8a33b1192b1b9367b4d729dc41e389f2c04f3e5c7f0559aae702205e82253a54bf5c4f65b7428551554b2045167d6d206dfe6a2e198127d3f7df1501ffffffff55605dc6f5c3dc148b6da58442b0b2cd422be385eab2ebea4119ee9c268d2835010000004847304402202329484c35fa9d6bb32a55a70c0982f606ce0e3634b69006138683bcd12cbb6602200c28feb1e2555c3210f1dddb299738b4ff8bbe9667b68cb8764b5ac17b7adf0001ffffffff0200e1f505000000004341046a0765b5865641ce08dd39690aade26dfbf5511430ca428a3089261361cef170e3929a68aee3d8d4848b0c5111b0a37b82b86ad559fd2a745b44d8e8d9dfdc0cac00180d8f000000004341044a656f065871a353f216ca26cef8dde2f03e8c16202d2e8ad769f02032cb86a5eb5e56842e92e19141d60a01928f8dd2c875a390f67c1f6c94cfc617c0ea45afac0000000001000000025f9a06d3acdceb56be1bfeaa3e8a25e62d182fa24fefe899d1c17f1dad4c2028000000004847304402205d6058484157235b06028c30736c15613a28bdb768ee628094ca8b0030d4d6eb0220328789c9a2ec27ddaec0ad5ef58efded42e6ea17c2e1ce838f3d6913f5e95db601ffffffff5f9a06d3acdceb56be1bfeaa3e8a25e62d182fa24fefe899d1c17f1dad4c2028010000004a493046022100c45af050d3cea806cedd0ab22520c53ebe63b987b8954146cdca42487b84bdd6022100b9b027716a6b59e640da50a864d6dd8a0ef24c76ce62391fa3eabaf4d2886d2d01ffffffff0200e1f505000000004341046a0765b5865641ce08dd39690aade26dfbf5511430ca428a3089261361cef170e3929a68aee3d8d4848b0c5111b0a37b82b86ad559fd2a745b44d8e8d9dfdc0cac00180d8f000000004341046a0765b5865641ce08dd39690aade26dfbf5511430ca428a3089261361cef170e3929a68aee3d8d4848b0c5111b0a37b82b86ad559fd2a745b44d8e8d9dfdc0cac000000000100000002e2274e5fea1bf29d963914bd301aa63b64daaf8a3e88f119b5046ca5738a0f6b0000000048473044022016e7a727a061ea2254a6c358376aaa617ac537eb836c77d646ebda4c748aac8b0220192ce28bf9f2c06a6467e6531e27648d2b3e2e2bae85159c9242939840295ba501ffffffffe2274e5fea1bf29d963914bd301aa63b64daaf8a3e88f119b5046ca5738a0f6b010000004a493046022100b7a1a755588d4190118936e15cd217d133b0e4a53c3c15924010d5648d8925c9022100aaef031874db2114f2d869ac2de4ae53908fbfea5b2b1862e181626bb9005c9f01ffffffff0200e1f505000000004341044a656f065871a353f216ca26cef8dde2f03e8c16202d2e8ad769f02032cb86a5eb5e56842e92e19141d60a01928f8dd2c875a390f67c1f6c94cfc617c0ea45afac00180d8f000000004341046a0765b5865641ce08dd39690aade26dfbf5511430ca428a3089261361cef170e3929a68aee3d8d4848b0c5111b0a37b82b86ad559fd2a745b44d8e8d9dfdc0cac00000000\"), SER_NETWORK, PROTOCOL_VERSION);\n     stream >> block;\n \n+    const uint64_t nMaxTransactions = block.vtx.size();\n     CBloomFilter filter(10, 0.000001, 0, BLOOM_UPDATE_NONE);\n     // Match the first transaction\n     filter.insert(uint256S(\"0xe980fe9f792d014e73b95203dc1335c5f9ce19ac537a419e6df5b47aecb93b70\"));\n@@ -303,7 +306,7 @@ BOOST_AUTO_TEST_CASE(merkle_block_2_with_update_none)\n     BOOST_CHECK(merkleBlock.vMatchedTxn[0].first == 0);\n \n     vector<uint256> vMatched;\n-    BOOST_CHECK(merkleBlock.txn.ExtractMatches(vMatched) == block.hashMerkleRoot);\n+    BOOST_CHECK(merkleBlock.txn.ExtractMatches(nMaxTransactions, vMatched) == block.hashMerkleRoot);\n     BOOST_CHECK(vMatched.size() == merkleBlock.vMatchedTxn.size());\n     for (unsigned int i = 0; i < vMatched.size(); i++)\n         BOOST_CHECK(vMatched[i] == merkleBlock.vMatchedTxn[i].second);\n@@ -326,7 +329,7 @@ BOOST_AUTO_TEST_CASE(merkle_block_2_with_update_none)\n     BOOST_CHECK(merkleBlock.vMatchedTxn[2].second == uint256S(\"0x3c1d7e82342158e4109df2e0b6348b6e84e403d8b4046d7007663ace63cddb23\"));\n     BOOST_CHECK(merkleBlock.vMatchedTxn[2].first == 3);\n \n-    BOOST_CHECK(merkleBlock.txn.ExtractMatches(vMatched) == block.hashMerkleRoot);\n+    BOOST_CHECK(merkleBlock.txn.ExtractMatches(nMaxTransactions, vMatched) == block.hashMerkleRoot);\n     BOOST_CHECK(vMatched.size() == merkleBlock.vMatchedTxn.size());\n     for (unsigned int i = 0; i < vMatched.size(); i++)\n         BOOST_CHECK(vMatched[i] == merkleBlock.vMatchedTxn[i].second);\n@@ -340,6 +343,7 @@ BOOST_AUTO_TEST_CASE(merkle_block_3_and_serialize)\n     CDataStream stream(ParseHex(\"0100000079cda856b143d9db2c1caff01d1aecc8630d30625d10e8b4b8b0000000000000b50cc069d6a3e33e3ff84a5c41d9d3febe7c770fdcc96b2c3ff60abe184f196367291b4d4c86041b8fa45d630101000000010000000000000000000000000000000000000000000000000000000000000000ffffffff08044c86041b020a02ffffffff0100f2052a01000000434104ecd3229b0571c3be876feaac0442a9f13c5a572742927af1dc623353ecf8c202225f64868137a18cdd85cbbb4c74fbccfd4f49639cf1bdc94a5672bb15ad5d4cac00000000\"), SER_NETWORK, PROTOCOL_VERSION);\n     stream >> block;\n \n+    const uint64_t nMaxTransactions = block.vtx.size();\n     CBloomFilter filter(10, 0.000001, 0, BLOOM_UPDATE_ALL);\n     // Match the only transaction\n     filter.insert(uint256S(\"0x63194f18be0af63f2c6bc9dc0f777cbefed3d9415c4af83f3ee3a3d669c00cb5\"));\n@@ -353,7 +357,7 @@ BOOST_AUTO_TEST_CASE(merkle_block_3_and_serialize)\n     BOOST_CHECK(merkleBlock.vMatchedTxn[0].first == 0);\n \n     vector<uint256> vMatched;\n-    BOOST_CHECK(merkleBlock.txn.ExtractMatches(vMatched) == block.hashMerkleRoot);\n+    BOOST_CHECK(merkleBlock.txn.ExtractMatches(nMaxTransactions, vMatched) == block.hashMerkleRoot);\n     BOOST_CHECK(vMatched.size() == merkleBlock.vMatchedTxn.size());\n     for (unsigned int i = 0; i < vMatched.size(); i++)\n         BOOST_CHECK(vMatched[i] == merkleBlock.vMatchedTxn[i].second);\n@@ -378,6 +382,7 @@ BOOST_AUTO_TEST_CASE(merkle_block_4)\n     CDataStream stream(ParseHex(\"0100000082bb869cf3a793432a66e826e05a6fc37469f8efb7421dc880670100000000007f16c5962e8bd963659c793ce370d95f093bc7e367117b3c30c1f8fdd0d9728776381b4d4c86041b554b85290701000000010000000000000000000000000000000000000000000000000000000000000000ffffffff07044c86041b0136ffffffff0100f2052a01000000434104eaafc2314def4ca98ac970241bcab022b9c1e1f4ea423a20f134c876f2c01ec0f0dd5b2e86e7168cefe0d81113c3807420ce13ad1357231a2252247d97a46a91ac000000000100000001bcad20a6a29827d1424f08989255120bf7f3e9e3cdaaa6bb31b0737fe048724300000000494830450220356e834b046cadc0f8ebb5a8a017b02de59c86305403dad52cd77b55af062ea10221009253cd6c119d4729b77c978e1e2aa19f5ea6e0e52b3f16e32fa608cd5bab753901ffffffff02008d380c010000001976a9142b4b8072ecbba129b6453c63e129e643207249ca88ac0065cd1d000000001976a9141b8dd13b994bcfc787b32aeadf58ccb3615cbd5488ac000000000100000003fdacf9b3eb077412e7a968d2e4f11b9a9dee312d666187ed77ee7d26af16cb0b000000008c493046022100ea1608e70911ca0de5af51ba57ad23b9a51db8d28f82c53563c56a05c20f5a87022100a8bdc8b4a8acc8634c6b420410150775eb7f2474f5615f7fccd65af30f310fbf01410465fdf49e29b06b9a1582287b6279014f834edc317695d125ef623c1cc3aaece245bd69fcad7508666e9c74a49dc9056d5fc14338ef38118dc4afae5fe2c585caffffffff309e1913634ecb50f3c4f83e96e70b2df071b497b8973a3e75429df397b5af83000000004948304502202bdb79c596a9ffc24e96f4386199aba386e9bc7b6071516e2b51dda942b3a1ed022100c53a857e76b724fc14d45311eac5019650d415c3abb5428f3aae16d8e69bec2301ffffffff2089e33491695080c9edc18a428f7d834db5b6d372df13ce2b1b0e0cbcb1e6c10000000049483045022100d4ce67c5896ee251c810ac1ff9ceccd328b497c8f553ab6e08431e7d40bad6b5022033119c0c2b7d792d31f1187779c7bd95aefd93d90a715586d73801d9b47471c601ffffffff0100714460030000001976a914c7b55141d097ea5df7a0ed330cf794376e53ec8d88ac0000000001000000045bf0e214aa4069a3e792ecee1e1bf0c1d397cde8dd08138f4b72a00681743447000000008b48304502200c45de8c4f3e2c1821f2fc878cba97b1e6f8807d94930713aa1c86a67b9bf1e40221008581abfef2e30f957815fc89978423746b2086375ca8ecf359c85c2a5b7c88ad01410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95ffffffffd669f7d7958d40fc59d2253d88e0f248e29b599c80bbcec344a83dda5f9aa72c000000008a473044022078124c8beeaa825f9e0b30bff96e564dd859432f2d0cb3b72d3d5d93d38d7e930220691d233b6c0f995be5acb03d70a7f7a65b6bc9bdd426260f38a1346669507a3601410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95fffffffff878af0d93f5229a68166cf051fd372bb7a537232946e0a46f53636b4dafdaa4000000008c493046022100c717d1714551663f69c3c5759bdbb3a0fcd3fab023abc0e522fe6440de35d8290221008d9cbe25bffc44af2b18e81c58eb37293fd7fe1c2e7b46fc37ee8c96c50ab1e201410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95ffffffff27f2b668859cd7f2f894aa0fd2d9e60963bcd07c88973f425f999b8cbfd7a1e2000000008c493046022100e00847147cbf517bcc2f502f3ddc6d284358d102ed20d47a8aa788a62f0db780022100d17b2d6fa84dcaf1c95d88d7e7c30385aecf415588d749afd3ec81f6022cecd701410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95ffffffff0100c817a8040000001976a914b6efd80d99179f4f4ff6f4dd0a007d018c385d2188ac000000000100000001834537b2f1ce8ef9373a258e10545ce5a50b758df616cd4356e0032554ebd3c4000000008b483045022100e68f422dd7c34fdce11eeb4509ddae38201773dd62f284e8aa9d96f85099d0b002202243bd399ff96b649a0fad05fa759d6a882f0af8c90cf7632c2840c29070aec20141045e58067e815c2f464c6a2a15f987758374203895710c2d452442e28496ff38ba8f5fd901dc20e29e88477167fe4fc299bf818fd0d9e1632d467b2a3d9503b1aaffffffff0280d7e636030000001976a914f34c3e10eb387efe872acb614c89e78bfca7815d88ac404b4c00000000001976a914a84e272933aaf87e1715d7786c51dfaeb5b65a6f88ac00000000010000000143ac81c8e6f6ef307dfe17f3d906d999e23e0189fda838c5510d850927e03ae7000000008c4930460221009c87c344760a64cb8ae6685a3eec2c1ac1bed5b88c87de51acd0e124f266c16602210082d07c037359c3a257b5c63ebd90f5a5edf97b2ac1c434b08ca998839f346dd40141040ba7e521fa7946d12edbb1d1e95a15c34bd4398195e86433c92b431cd315f455fe30032ede69cad9d1e1ed6c3c4ec0dbfced53438c625462afb792dcb098544bffffffff0240420f00000000001976a9144676d1b820d63ec272f1900d59d43bc6463d96f888ac40420f00000000001976a914648d04341d00d7968b3405c034adc38d4d8fb9bd88ac00000000010000000248cc917501ea5c55f4a8d2009c0567c40cfe037c2e71af017d0a452ff705e3f1000000008b483045022100bf5fdc86dc5f08a5d5c8e43a8c9d5b1ed8c65562e280007b52b133021acd9acc02205e325d613e555f772802bf413d36ba807892ed1a690a77811d3033b3de226e0a01410429fa713b124484cb2bd7b5557b2c0b9df7b2b1fee61825eadc5ae6c37a9920d38bfccdc7dc3cb0c47d7b173dbc9db8d37db0a33ae487982c59c6f8606e9d1791ffffffff41ed70551dd7e841883ab8f0b16bf04176b7d1480e4f0af9f3d4c3595768d068000000008b4830450221008513ad65187b903aed1102d1d0c47688127658c51106753fed0151ce9c16b80902201432b9ebcb87bd04ceb2de66035fbbaf4bf8b00d1cfe41f1a1f7338f9ad79d210141049d4cf80125bf50be1709f718c07ad15d0fc612b7da1f5570dddc35f2a352f0f27c978b06820edca9ef982c35fda2d255afba340068c5035552368bc7200c1488ffffffff0100093d00000000001976a9148edb68822f1ad580b043c7b3df2e400f8699eb4888ac00000000\"), SER_NETWORK, PROTOCOL_VERSION);\n     stream >> block;\n \n+    const uint64_t nMaxTransactions = block.vtx.size();\n     CBloomFilter filter(10, 0.000001, 0, BLOOM_UPDATE_ALL);\n     // Match the last transaction\n     filter.insert(uint256S(\"0x0a2a92f0bda4727d0a13eaddf4dd9ac6b5c61a1429e6b2b818f19b15df0ac154\"));\n@@ -392,7 +397,7 @@ BOOST_AUTO_TEST_CASE(merkle_block_4)\n     BOOST_CHECK(merkleBlock.vMatchedTxn[0].first == 6);\n \n     vector<uint256> vMatched;\n-    BOOST_CHECK(merkleBlock.txn.ExtractMatches(vMatched) == block.hashMerkleRoot);\n+    BOOST_CHECK(merkleBlock.txn.ExtractMatches(nMaxTransactions, vMatched) == block.hashMerkleRoot);\n     BOOST_CHECK(vMatched.size() == merkleBlock.vMatchedTxn.size());\n     for (unsigned int i = 0; i < vMatched.size(); i++)\n         BOOST_CHECK(vMatched[i] == merkleBlock.vMatchedTxn[i].second);\n@@ -409,7 +414,7 @@ BOOST_AUTO_TEST_CASE(merkle_block_4)\n \n     BOOST_CHECK(merkleBlock.vMatchedTxn[1] == pair);\n \n-    BOOST_CHECK(merkleBlock.txn.ExtractMatches(vMatched) == block.hashMerkleRoot);\n+    BOOST_CHECK(merkleBlock.txn.ExtractMatches(nMaxTransactions, vMatched) == block.hashMerkleRoot);\n     BOOST_CHECK(vMatched.size() == merkleBlock.vMatchedTxn.size());\n     for (unsigned int i = 0; i < vMatched.size(); i++)\n         BOOST_CHECK(vMatched[i] == merkleBlock.vMatchedTxn[i].second);"
      },
      {
        "sha": "15652cecfe9fb4588168e47b6a192c858b56f62d",
        "filename": "src/test/pmt_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5cb4d7e20e52d64b164a4d6c506e6767e227aa2f/src/test/pmt_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5cb4d7e20e52d64b164a4d6c506e6767e227aa2f/src/test/pmt_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/pmt_tests.cpp?ref=5cb4d7e20e52d64b164a4d6c506e6767e227aa2f",
        "patch": "@@ -87,7 +87,7 @@ BOOST_AUTO_TEST_CASE(pmt_test1)\n \n             // extract merkle root and matched txids from copy\n             std::vector<uint256> vMatchTxid2;\n-            uint256 merkleRoot2 = pmt2.ExtractMatches(vMatchTxid2);\n+            uint256 merkleRoot2 = pmt2.ExtractMatches(nTx, vMatchTxid2);\n \n             // check that it has the same merkle root as the original, and a valid one\n             BOOST_CHECK(merkleRoot1 == merkleRoot2);\n@@ -101,7 +101,7 @@ BOOST_AUTO_TEST_CASE(pmt_test1)\n                 CPartialMerkleTreeTester pmt3(pmt2);\n                 pmt3.Damage();\n                 std::vector<uint256> vMatchTxid3;\n-                uint256 merkleRoot3 = pmt3.ExtractMatches(vMatchTxid3);\n+                uint256 merkleRoot3 = pmt3.ExtractMatches(nTx, vMatchTxid3);\n                 BOOST_CHECK(merkleRoot3 != merkleRoot1);\n             }\n         }\n@@ -118,10 +118,11 @@ BOOST_AUTO_TEST_CASE(pmt_malleability)\n         (ArithToUint256(9))(ArithToUint256(10))\n         (ArithToUint256(9))(ArithToUint256(10));\n     std::vector<bool> vMatch = boost::assign::list_of(false)(false)(false)(false)(false)(false)(false)(false)(false)(true)(true)(false);\n+    uint64_t nMaxTransactions = vTxid.size();\n \n     CPartialMerkleTree tree(vTxid, vMatch);\n     std::vector<uint256> vTxid2;\n-    BOOST_CHECK(tree.ExtractMatches(vTxid).IsNull());\n+    BOOST_CHECK(tree.ExtractMatches(nMaxTransactions, vTxid).IsNull());\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "660e072519cd891cf064d27ff6e6bd9317a92a40",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NjBlMDcyNTE5Y2Q4OTFjZjA2NGQyN2ZmNmU2YmQ5MzE3YTkyYTQw",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-07-30T19:53:21Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-09-06T04:36:59Z"
      },
      "message": "consensus: teach CheckTransaction to check for an arbitrary max tx size\n\nThis is a no-op change. For now, everything passes MAX_BLOCK_SIZE, so the\nresult matches what it would've before.\n\nTests use a value of std::numeric_limits<uint64_t>::max() where necessary, to ensure that they're never\nrejected when size isn't being tested.",
      "tree": {
        "sha": "cbee6f22a8e600f1169d9638ad37f5a6bd3234c0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cbee6f22a8e600f1169d9638ad37f5a6bd3234c0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/660e072519cd891cf064d27ff6e6bd9317a92a40",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/660e072519cd891cf064d27ff6e6bd9317a92a40",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/660e072519cd891cf064d27ff6e6bd9317a92a40",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/660e072519cd891cf064d27ff6e6bd9317a92a40/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5cb4d7e20e52d64b164a4d6c506e6767e227aa2f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5cb4d7e20e52d64b164a4d6c506e6767e227aa2f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5cb4d7e20e52d64b164a4d6c506e6767e227aa2f"
      }
    ],
    "stats": {
      "total": 70,
      "additions": 53,
      "deletions": 17
    },
    "files": [
      {
        "sha": "937e485b53ffd9d6573dbf13e990b7db912decf0",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/660e072519cd891cf064d27ff6e6bd9317a92a40/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/660e072519cd891cf064d27ff6e6bd9317a92a40/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=660e072519cd891cf064d27ff6e6bd9317a92a40",
        "patch": "@@ -76,6 +76,8 @@ class CMainParams : public CChainParams {\n         consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n         consensus.nPowTargetSpacing = 10 * 60;\n         consensus.fPowAllowMinDifficultyBlocks = false;\n+        consensus.nMaxTxSize = 1000000;\n+\n         /** \n          * The message start string is designed to be unlikely to occur in normal data.\n          * The characters are rarely used upper ASCII, not valid as UTF-8, and produce\n@@ -154,6 +156,8 @@ class CTestNetParams : public CChainParams {\n         consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n         consensus.nPowTargetSpacing = 10 * 60;\n         consensus.fPowAllowMinDifficultyBlocks = true;\n+        consensus.nMaxTxSize = 1000000;\n+\n         pchMessageStart[0] = 0x0b;\n         pchMessageStart[1] = 0x11;\n         pchMessageStart[2] = 0x09;\n@@ -215,6 +219,7 @@ class CRegTestParams : public CChainParams {\n         consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n         consensus.nPowTargetSpacing = 10 * 60;\n         consensus.fPowAllowMinDifficultyBlocks = true;\n+        consensus.nMaxTxSize = 1000000;\n \n         pchMessageStart[0] = 0xfa;\n         pchMessageStart[1] = 0xbf;"
      },
      {
        "sha": "2d9136e32630a1d3924d7fe3088e0c273a9032a4",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/660e072519cd891cf064d27ff6e6bd9317a92a40/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/660e072519cd891cf064d27ff6e6bd9317a92a40/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=660e072519cd891cf064d27ff6e6bd9317a92a40",
        "patch": "@@ -6,6 +6,29 @@\n #ifndef BITCOIN_CONSENSUS_CONSENSUS_H\n #define BITCOIN_CONSENSUS_CONSENSUS_H\n \n+#include \"consensus/params.h\"\n+\n+#include <stdint.h>\n+\n+class CTransaction;\n+class CValidationState;\n+\n+/**\n+ * Consensus validations:\n+ * Check_ means checking everything possible with the data provided.\n+ * Verify_ means all data provided was enough for this level and its \"consensus-verified\".\n+ */\n+namespace Consensus {\n+\n+/** Transaction validation functions */\n+\n+/**\n+ * Context-independent CTransaction validity checks\n+ */\n+bool CheckTx(const CTransaction& tx, CValidationState& state, const Params& consensusParams);\n+\n+} // namespace Consensus\n+\n /** The maximum allowed size for a serialized block, in bytes (network rule) */\n static const unsigned int MAX_BLOCK_SIZE = 1000000;\n /** The maximum allowed number of signature check operations in a block (network rule) */"
      },
      {
        "sha": "d7d1919de775becd7e9837f20bb34516af734d88",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/660e072519cd891cf064d27ff6e6bd9317a92a40/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/660e072519cd891cf064d27ff6e6bd9317a92a40/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=660e072519cd891cf064d27ff6e6bd9317a92a40",
        "patch": "@@ -14,6 +14,7 @@ namespace Consensus {\n  */\n struct Params {\n     uint256 hashGenesisBlock;\n+    uint32_t nMaxTxSize;\n     int nSubsidyHalvingInterval;\n     /** Used to check majorities for block version upgrade */\n     int nMajorityEnforceBlockUpgrade;"
      },
      {
        "sha": "240e23b03fee5f7fc93896985aba09fcf6e738f9",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/660e072519cd891cf064d27ff6e6bd9317a92a40/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/660e072519cd891cf064d27ff6e6bd9317a92a40/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=660e072519cd891cf064d27ff6e6bd9317a92a40",
        "patch": "@@ -692,15 +692,15 @@ unsigned int GetP2SHSigOpCount(const CTransaction& tx, const CCoinsViewCache& in\n \n \n \n-bool CheckTransaction(const CTransaction& tx, CValidationState &state)\n+bool Consensus::CheckTx(const CTransaction& tx, CValidationState &state, const Consensus::Params& consensusParams)\n {\n     // Basic checks that don't depend on any context\n     if (tx.vin.empty())\n         return state.DoS(10, false, REJECT_INVALID, \"bad-txns-vin-empty\");\n     if (tx.vout.empty())\n         return state.DoS(10, false, REJECT_INVALID, \"bad-txns-vout-empty\");\n     // Size limits\n-    if (::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION) > MAX_BLOCK_SIZE)\n+    if (::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION) > consensusParams.nMaxTxSize)\n         return state.DoS(100, false, REJECT_INVALID, \"bad-txns-oversize\");\n \n     // Check for negative or overflow output values\n@@ -781,11 +781,12 @@ static std::string FormatStateMessage(const CValidationState &state)\n bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransaction &tx, bool fLimitFree,\n                         bool* pfMissingInputs, bool fRejectAbsurdFee)\n {\n+    const Consensus::Params& consensusParams = Params().GetConsensus();\n     AssertLockHeld(cs_main);\n     if (pfMissingInputs)\n         *pfMissingInputs = false;\n \n-    if (!CheckTransaction(tx, state))\n+    if (!Consensus::CheckTx(tx, state, consensusParams))\n         return false;\n \n     // Coinbase is only valid in a block, not as a loose transaction\n@@ -2563,6 +2564,7 @@ bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, bool f\n \n bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bool fCheckMerkleRoot)\n {\n+    const Consensus::Params& consensusParams = Params().GetConsensus();\n     // These are checks that are independent of context.\n \n     // Check that the header is valid (particularly PoW).  This is mostly\n@@ -2606,7 +2608,7 @@ bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bo\n \n     // Check transactions\n     BOOST_FOREACH(const CTransaction& tx, block.vtx)\n-        if (!CheckTransaction(tx, state))\n+        if (!Consensus::CheckTx(tx, state, consensusParams))\n             return error(\"CheckBlock(): CheckTransaction of %s failed with %s\",\n                 tx.GetHash().ToString(),\n                 FormatStateMessage(state));"
      },
      {
        "sha": "abd761c56743e22a8035464b12bea26e2f0d877f",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/660e072519cd891cf064d27ff6e6bd9317a92a40/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/660e072519cd891cf064d27ff6e6bd9317a92a40/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=660e072519cd891cf064d27ff6e6bd9317a92a40",
        "patch": "@@ -283,9 +283,6 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n /** Apply the effects of this transaction on the UTXO set represented by view */\n void UpdateCoins(const CTransaction& tx, CValidationState &state, CCoinsViewCache &inputs, int nHeight);\n \n-/** Context-independent validity checks */\n-bool CheckTransaction(const CTransaction& tx, CValidationState& state);\n-\n /**\n  * Check if transaction is final and can be included in a block with the\n  * specified height and time. Consensus critical."
      },
      {
        "sha": "a885985f35086eee633daf913261b76ce1bb66d4",
        "filename": "src/test/sighash_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/660e072519cd891cf064d27ff6e6bd9317a92a40/src/test/sighash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/660e072519cd891cf064d27ff6e6bd9317a92a40/src/test/sighash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sighash_tests.cpp?ref=660e072519cd891cf064d27ff6e6bd9317a92a40",
        "patch": "@@ -2,10 +2,10 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"consensus/consensus.h\"\n #include \"consensus/validation.h\"\n #include \"data/sighash.json.h\"\n #include \"hash.h\"\n-#include \"main.h\" // For CheckTransaction\n #include \"random.h\"\n #include \"script/interpreter.h\"\n #include \"script/script.h\"\n@@ -169,6 +169,8 @@ BOOST_AUTO_TEST_CASE(sighash_test)\n // Goal: check that SignatureHash generates correct hash\n BOOST_AUTO_TEST_CASE(sighash_from_data)\n {\n+    Consensus::Params testConsensusParams;\n+    testConsensusParams.nMaxTxSize  = std::numeric_limits<uint64_t>::max();\n     UniValue tests = read_json(std::string(json_tests::sighash, json_tests::sighash + sizeof(json_tests::sighash)));\n \n     for (unsigned int idx = 0; idx < tests.size(); idx++) {\n@@ -200,7 +202,7 @@ BOOST_AUTO_TEST_CASE(sighash_from_data)\n           stream >> tx;\n \n           CValidationState state;\n-          BOOST_CHECK_MESSAGE(CheckTransaction(tx, state), strTest);\n+          BOOST_CHECK_MESSAGE(Consensus::CheckTx(tx, state, testConsensusParams), strTest);\n           BOOST_CHECK(state.IsValid());\n \n           std::vector<unsigned char> raw = ParseHex(raw_script);"
      },
      {
        "sha": "1a477e3df7ab61c1f5740d614d05f6f5cff2eccd",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 6,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/660e072519cd891cf064d27ff6e6bd9317a92a40/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/660e072519cd891cf064d27ff6e6bd9317a92a40/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=660e072519cd891cf064d27ff6e6bd9317a92a40",
        "patch": "@@ -7,11 +7,11 @@\n #include \"test/test_bitcoin.h\"\n \n #include \"clientversion.h\"\n+#include \"consensus/consensus.h\"\n #include \"consensus/validation.h\"\n #include \"core_io.h\"\n #include \"key.h\"\n #include \"keystore.h\"\n-#include \"main.h\" // For CheckTransaction\n #include \"policy/policy.h\"\n #include \"script/script.h\"\n #include \"script/script_error.h\"\n@@ -92,6 +92,8 @@ BOOST_AUTO_TEST_CASE(tx_valid)\n     // ... where all scripts are stringified scripts.\n     //\n     // verifyFlags is a comma separated list of script verification flags to apply, or \"NONE\"\n+    Consensus::Params testConsensusParams;\n+    testConsensusParams.nMaxTxSize  = std::numeric_limits<uint64_t>::max();\n     UniValue tests = read_json(std::string(json_tests::tx_valid, json_tests::tx_valid + sizeof(json_tests::tx_valid)));\n \n     ScriptError err;\n@@ -137,7 +139,7 @@ BOOST_AUTO_TEST_CASE(tx_valid)\n             stream >> tx;\n \n             CValidationState state;\n-            BOOST_CHECK_MESSAGE(CheckTransaction(tx, state), strTest);\n+            BOOST_CHECK_MESSAGE(Consensus::CheckTx(tx, state, testConsensusParams), strTest);\n             BOOST_CHECK(state.IsValid());\n \n             for (unsigned int i = 0; i < tx.vin.size(); i++)\n@@ -167,6 +169,8 @@ BOOST_AUTO_TEST_CASE(tx_invalid)\n     // ... where all scripts are stringified scripts.\n     //\n     // verifyFlags is a comma separated list of script verification flags to apply, or \"NONE\"\n+    Consensus::Params testConsensusParams;\n+    testConsensusParams.nMaxTxSize  = std::numeric_limits<uint64_t>::max();\n     UniValue tests = read_json(std::string(json_tests::tx_invalid, json_tests::tx_invalid + sizeof(json_tests::tx_invalid)));\n \n     ScriptError err;\n@@ -212,7 +216,7 @@ BOOST_AUTO_TEST_CASE(tx_invalid)\n             stream >> tx;\n \n             CValidationState state;\n-            fValid = CheckTransaction(tx, state) && state.IsValid();\n+            fValid = Consensus::CheckTx(tx, state, testConsensusParams) && state.IsValid();\n \n             for (unsigned int i = 0; i < tx.vin.size() && fValid; i++)\n             {\n@@ -240,12 +244,14 @@ BOOST_AUTO_TEST_CASE(basic_transaction_tests)\n     CDataStream stream(vch, SER_DISK, CLIENT_VERSION);\n     CMutableTransaction tx;\n     stream >> tx;\n+    Consensus::Params testConsensusParams;\n+    testConsensusParams.nMaxTxSize  = std::numeric_limits<uint64_t>::max();\n     CValidationState state;\n-    BOOST_CHECK_MESSAGE(CheckTransaction(tx, state) && state.IsValid(), \"Simple deserialized transaction should be valid.\");\n+    BOOST_CHECK_MESSAGE(Consensus::CheckTx(tx, state, testConsensusParams) && state.IsValid(), \"Simple deserialized transaction should be valid.\");\n \n     // Check that duplicate txins fail\n     tx.vin.push_back(tx.vin[0]);\n-    BOOST_CHECK_MESSAGE(!CheckTransaction(tx, state) || !state.IsValid(), \"Transaction with duplicate txins should be invalid.\");\n+    BOOST_CHECK_MESSAGE(!Consensus::CheckTx(tx, state, testConsensusParams) || !state.IsValid(), \"Transaction with duplicate txins should be invalid.\");\n }\n \n //\n@@ -322,7 +328,6 @@ BOOST_AUTO_TEST_CASE(test_Get)\n \n BOOST_AUTO_TEST_CASE(test_IsStandard)\n {\n-    LOCK(cs_main);\n     CBasicKeyStore keystore;\n     CCoinsView coinsDummy;\n     CCoinsViewCache coins(&coinsDummy);"
      },
      {
        "sha": "69873018c48f5d9356b79c2e432e0f3b3a925a4f",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/660e072519cd891cf064d27ff6e6bd9317a92a40/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/660e072519cd891cf064d27ff6e6bd9317a92a40/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=660e072519cd891cf064d27ff6e6bd9317a92a40",
        "patch": "@@ -6,8 +6,8 @@\n #include \"wallet/walletdb.h\"\n \n #include \"base58.h\"\n+#include \"consensus/consensus.h\"\n #include \"consensus/validation.h\"\n-#include \"main.h\" // For CheckTransaction\n #include \"protocol.h\"\n #include \"serialize.h\"\n #include \"sync.h\"\n@@ -347,6 +347,7 @@ bool\n ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n              CWalletScanState &wss, string& strType, string& strErr)\n {\n+    const Consensus::Params& consensusParams = Params().GetConsensus();\n     try {\n         // Unserialize\n         // Taking advantage of the fact that pair serialization\n@@ -371,7 +372,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             CWalletTx wtx;\n             ssValue >> wtx;\n             CValidationState state;\n-            if (!(CheckTransaction(wtx, state) && (wtx.GetHash() == hash) && state.IsValid()))\n+            if (!(Consensus::CheckTx(wtx, state, consensusParams) && (wtx.GetHash() == hash) && state.IsValid()))\n                 return false;\n \n             // Undo serialize changes in 31600"
      }
    ]
  },
  {
    "sha": "0cac6d221ffd18d2a6af984a78f038023e9a8433",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowY2FjNmQyMjFmZmQxOGQyYTZhZjk4NGE3OGYwMzgwMjNlOWE4NDMz",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-07-30T20:10:46Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-09-06T04:37:14Z"
      },
      "message": "consensus: Move consensus constants into Consensus::Params and consensus.h (as functions)\n\nThe following are now tied to a chain rather than being defined as global\nconstants. Their values have not changed.\n\nnMinTxSize\nnMaxBlockSize\nnMaxTxSize\nnMaxBlockSigops\nnCoinbaseMaturity\n\nAlso, for free (diff-wise):\n\nBlocksize: Turn MAX_BLOCK_SIZE (nMaxBlockSize) and MAX_BLOCK_SIGOPS (nMaxBlockSigops) into functions\n\n...which take Consensus::Params as parameter\nThis will be convenient to reduce the diff of any proposal that changes the blocksize as a hardfork",
      "tree": {
        "sha": "64f794a233694c8e3e11ba0c2758157818d50ba2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/64f794a233694c8e3e11ba0c2758157818d50ba2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0cac6d221ffd18d2a6af984a78f038023e9a8433",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0cac6d221ffd18d2a6af984a78f038023e9a8433",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0cac6d221ffd18d2a6af984a78f038023e9a8433",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0cac6d221ffd18d2a6af984a78f038023e9a8433/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "660e072519cd891cf064d27ff6e6bd9317a92a40",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/660e072519cd891cf064d27ff6e6bd9317a92a40",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/660e072519cd891cf064d27ff6e6bd9317a92a40"
      }
    ],
    "stats": {
      "total": 114,
      "additions": 78,
      "deletions": 36
    },
    "files": [
      {
        "sha": "7cd8ff37139fc80b24a61d642a84b368870898fa",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0cac6d221ffd18d2a6af984a78f038023e9a8433/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0cac6d221ffd18d2a6af984a78f038023e9a8433/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=0cac6d221ffd18d2a6af984a78f038023e9a8433",
        "patch": "@@ -176,6 +176,7 @@ static void MutateTxLocktime(CMutableTransaction& tx, const string& cmdVal)\n \n static void MutateTxAddInput(CMutableTransaction& tx, const string& strInput)\n {\n+    const Consensus::Params& consensusParams = Params().GetConsensus();\n     // separate TXID:VOUT in string\n     size_t pos = strInput.find(':');\n     if ((pos == string::npos) ||\n@@ -190,7 +191,7 @@ static void MutateTxAddInput(CMutableTransaction& tx, const string& strInput)\n     uint256 txid(uint256S(strTxid));\n \n     static const unsigned int minTxOutSz = 9;\n-    static const unsigned int maxVout = MAX_BLOCK_SIZE / minTxOutSz;\n+    const unsigned int maxVout = consensusParams.nMaxTxSize / minTxOutSz;\n \n     // extract and validate vout\n     string strVout = strInput.substr(pos + 1, string::npos);"
      },
      {
        "sha": "91e5b248ca78901858c42e9b6f71db077a780f92",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0cac6d221ffd18d2a6af984a78f038023e9a8433/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0cac6d221ffd18d2a6af984a78f038023e9a8433/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=0cac6d221ffd18d2a6af984a78f038023e9a8433",
        "patch": "@@ -76,7 +76,11 @@ class CMainParams : public CChainParams {\n         consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n         consensus.nPowTargetSpacing = 10 * 60;\n         consensus.fPowAllowMinDifficultyBlocks = false;\n+        consensus.nMaxBlockSize = 1000000;\n         consensus.nMaxTxSize = 1000000;\n+        consensus.nMinTxSize = 60;\n+        consensus.nMaxBlockSigops = consensus.nMaxBlockSize / 50;\n+        consensus.nCoinbaseMaturity = 100;\n \n         /** \n          * The message start string is designed to be unlikely to occur in normal data.\n@@ -156,7 +160,11 @@ class CTestNetParams : public CChainParams {\n         consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n         consensus.nPowTargetSpacing = 10 * 60;\n         consensus.fPowAllowMinDifficultyBlocks = true;\n+        consensus.nMaxBlockSize = 1000000;\n         consensus.nMaxTxSize = 1000000;\n+        consensus.nMinTxSize = 60;\n+        consensus.nMaxBlockSigops = consensus.nMaxBlockSize / 50;\n+        consensus.nCoinbaseMaturity = 100;\n \n         pchMessageStart[0] = 0x0b;\n         pchMessageStart[1] = 0x11;\n@@ -219,7 +227,11 @@ class CRegTestParams : public CChainParams {\n         consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n         consensus.nPowTargetSpacing = 10 * 60;\n         consensus.fPowAllowMinDifficultyBlocks = true;\n+        consensus.nMaxBlockSize = 1000000;\n         consensus.nMaxTxSize = 1000000;\n+        consensus.nMinTxSize = 60;\n+        consensus.nMaxBlockSigops = consensus.nMaxBlockSize / 50;\n+        consensus.nCoinbaseMaturity = 100;\n \n         pchMessageStart[0] = 0xfa;\n         pchMessageStart[1] = 0xbf;"
      },
      {
        "sha": "38a94b38dc368827483d6d83455d147f8496ebe6",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 15,
        "deletions": 4,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0cac6d221ffd18d2a6af984a78f038023e9a8433/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0cac6d221ffd18d2a6af984a78f038023e9a8433/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=0cac6d221ffd18d2a6af984a78f038023e9a8433",
        "patch": "@@ -10,6 +10,7 @@\n \n #include <stdint.h>\n \n+class CCoinsViewCache;\n class CTransaction;\n class CValidationState;\n \n@@ -26,14 +27,24 @@ namespace Consensus {\n  * Context-independent CTransaction validity checks\n  */\n bool CheckTx(const CTransaction& tx, CValidationState& state, const Params& consensusParams);\n+/**\n+ * Check whether all inputs of this transaction are valid (no double spends and amounts)\n+ * This does not modify the UTXO set. This does not check scripts and sigs.\n+ * Preconditions: tx.IsCoinBase() is false.\n+ */\n+bool CheckTxInputs(const CTransaction& tx, CValidationState& state, const Params& consensusParams, const CCoinsViewCache& inputs, int nSpendHeight);\n \n } // namespace Consensus\n \n /** The maximum allowed size for a serialized block, in bytes (network rule) */\n-static const unsigned int MAX_BLOCK_SIZE = 1000000;\n+inline uint64_t MaxBlockSize(const Consensus::Params& consensusParams)\n+{\n+    return consensusParams.nMaxBlockSize;\n+}\n /** The maximum allowed number of signature check operations in a block (network rule) */\n-static const unsigned int MAX_BLOCK_SIGOPS = MAX_BLOCK_SIZE/50;\n-/** Coinbase transaction outputs can only be spent after this number of new blocks (network rule) */\n-static const int COINBASE_MATURITY = 100;\n+inline uint64_t MaxBlockSigops(const Consensus::Params& consensusParams)\n+{\n+    return consensusParams.nMaxBlockSigops;\n+}\n \n #endif // BITCOIN_CONSENSUS_CONSENSUS_H"
      },
      {
        "sha": "10e7ea7c52cef34270e28e1139978ea45e8545a1",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0cac6d221ffd18d2a6af984a78f038023e9a8433/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0cac6d221ffd18d2a6af984a78f038023e9a8433/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=0cac6d221ffd18d2a6af984a78f038023e9a8433",
        "patch": "@@ -14,7 +14,12 @@ namespace Consensus {\n  */\n struct Params {\n     uint256 hashGenesisBlock;\n+    uint32_t nMinTxSize;\n+    uint64_t nMaxBlockSize;\n     uint32_t nMaxTxSize;\n+    uint64_t nMaxBlockSigops;\n+    /** Coinbase transaction outputs can only be spent after this number of new blocks (network rule) */\n+    int32_t nCoinbaseMaturity;\n     int nSubsidyHalvingInterval;\n     /** Used to check majorities for block version upgrade */\n     int nMajorityEnforceBlockUpgrade;"
      },
      {
        "sha": "fed4ff3590218946d02c8191aaa90b8a1af90583",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 12,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0cac6d221ffd18d2a6af984a78f038023e9a8433/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0cac6d221ffd18d2a6af984a78f038023e9a8433/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=0cac6d221ffd18d2a6af984a78f038023e9a8433",
        "patch": "@@ -868,7 +868,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         // Check that the transaction doesn't have an excessive number of\n         // sigops, making it impossible to mine. Since the coinbase transaction\n         // itself can contain sigops MAX_STANDARD_TX_SIGOPS is less than\n-        // MAX_BLOCK_SIGOPS; we still consider this an invalid rather than\n+        // MaxBlockSigops(); we still consider this an invalid rather than\n         // merely non-standard transaction.\n         unsigned int nSigOps = GetLegacySigOpCount(tx);\n         nSigOps += GetP2SHSigOpCount(tx, view);\n@@ -1293,8 +1293,7 @@ int GetSpendHeight(const CCoinsViewCache& inputs)\n     return pindexPrev->nHeight + 1;\n }\n \n-namespace Consensus {\n-bool CheckTxInputs(const CTransaction& tx, CValidationState& state, const CCoinsViewCache& inputs, int nSpendHeight)\n+bool Consensus::CheckTxInputs(const CTransaction& tx, CValidationState& state, const Consensus::Params& consensusParams, const CCoinsViewCache& inputs, int nSpendHeight)\n {\n         // This doesn't trigger the DoS code on purpose; if it did, it would make it easier\n         // for an attacker to attempt to split the network.\n@@ -1311,7 +1310,7 @@ bool CheckTxInputs(const CTransaction& tx, CValidationState& state, const CCoins\n \n             // If prev is coinbase, check that it's matured\n             if (coins->IsCoinBase()) {\n-                if (nSpendHeight - coins->nHeight < COINBASE_MATURITY)\n+                if (nSpendHeight - coins->nHeight < consensusParams.nCoinbaseMaturity)\n                     return state.Invalid(false,\n                         REJECT_INVALID, \"bad-txns-premature-spend-of-coinbase\",\n                         strprintf(\"tried to spend coinbase at depth %d\", nSpendHeight - coins->nHeight));\n@@ -1337,13 +1336,13 @@ bool CheckTxInputs(const CTransaction& tx, CValidationState& state, const CCoins\n             return state.DoS(100, false, REJECT_INVALID, \"bad-txns-fee-outofrange\");\n     return true;\n }\n-}// namespace Consensus\n \n bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &inputs, bool fScriptChecks, unsigned int flags, bool cacheStore, std::vector<CScriptCheck> *pvChecks)\n {\n+    const Consensus::Params& consensusParams = Params().GetConsensus();\n     if (!tx.IsCoinBase())\n     {\n-        if (!Consensus::CheckTxInputs(tx, state, inputs, GetSpendHeight(inputs)))\n+        if (!Consensus::CheckTxInputs(tx, state, consensusParams, inputs, GetSpendHeight(inputs)))\n             return false;\n \n         if (pvChecks)\n@@ -1749,13 +1748,14 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n     std::vector<std::pair<uint256, CDiskTxPos> > vPos;\n     vPos.reserve(block.vtx.size());\n     blockundo.vtxundo.reserve(block.vtx.size() - 1);\n+    uint64_t nMaxBlockSigops = MaxBlockSigops(chainparams.GetConsensus());\n     for (unsigned int i = 0; i < block.vtx.size(); i++)\n     {\n         const CTransaction &tx = block.vtx[i];\n \n         nInputs += tx.vin.size();\n         nSigOps += GetLegacySigOpCount(tx);\n-        if (nSigOps > MAX_BLOCK_SIGOPS)\n+        if (nSigOps > nMaxBlockSigops)\n             return state.DoS(100, error(\"ConnectBlock(): too many sigops\"),\n                              REJECT_INVALID, \"bad-blk-sigops\");\n \n@@ -1771,7 +1771,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n                 // this is to prevent a \"rogue miner\" from creating\n                 // an incredibly-expensive-to-validate block.\n                 nSigOps += GetP2SHSigOpCount(tx, view);\n-                if (nSigOps > MAX_BLOCK_SIGOPS)\n+                if (nSigOps > nMaxBlockSigops)\n                     return state.DoS(100, error(\"ConnectBlock(): too many sigops\"),\n                                      REJECT_INVALID, \"bad-blk-sigops\");\n             }\n@@ -2593,7 +2593,9 @@ bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bo\n     // because we receive the wrong transactions for it.\n \n     // Size limits\n-    if (block.vtx.empty() || block.vtx.size() > MAX_BLOCK_SIZE || ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION) > MAX_BLOCK_SIZE)\n+    uint64_t nMaxBlockSize = MaxBlockSize(consensusParams);\n+    uint64_t nMaxBlockSigops = MaxBlockSigops(consensusParams);\n+    if (block.vtx.empty() || block.vtx.size() > nMaxBlockSize || ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION) > nMaxBlockSize)\n         return state.DoS(100, error(\"CheckBlock(): size limits failed\"),\n                          REJECT_INVALID, \"bad-blk-length\");\n \n@@ -2618,7 +2620,7 @@ bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bo\n     {\n         nSigOps += GetLegacySigOpCount(tx);\n     }\n-    if (nSigOps > MAX_BLOCK_SIGOPS)\n+    if (nSigOps > nMaxBlockSigops)\n         return state.DoS(100, error(\"CheckBlock(): out-of-bounds SigOpCount\"),\n                          REJECT_INVALID, \"bad-blk-sigops\", true);\n \n@@ -3333,11 +3335,12 @@ bool LoadExternalBlockFile(FILE* fileIn, CDiskBlockPos *dbp)\n     // Map of disk positions for blocks with unknown parent (only used for reindex)\n     static std::multimap<uint256, CDiskBlockPos> mapBlocksUnknownParent;\n     int64_t nStart = GetTimeMillis();\n+    uint64_t nMaxBlockSize = MaxBlockSize(chainparams.GetConsensus());\n \n     int nLoaded = 0;\n     try {\n         // This takes over fileIn and calls fclose() on it in the CBufferedFile destructor\n-        CBufferedFile blkdat(fileIn, 2*MAX_BLOCK_SIZE, MAX_BLOCK_SIZE+8, SER_DISK, CLIENT_VERSION);\n+        CBufferedFile blkdat(fileIn, 2*nMaxBlockSize, nMaxBlockSize+8, SER_DISK, CLIENT_VERSION);\n         uint64_t nRewind = blkdat.GetPos();\n         while (!blkdat.eof()) {\n             boost::this_thread::interruption_point();\n@@ -3356,7 +3359,7 @@ bool LoadExternalBlockFile(FILE* fileIn, CDiskBlockPos *dbp)\n                     continue;\n                 // read size\n                 blkdat >> nSize;\n-                if (nSize < 80 || nSize > MAX_BLOCK_SIZE)\n+                if (nSize < 80 || nSize > nMaxBlockSize)\n                     continue;\n             } catch (const std::exception&) {\n                 // no valid block header found; don't complain"
      },
      {
        "sha": "c2b03d74bc9ab5232857224a10e3e205daef2216",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 10,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0cac6d221ffd18d2a6af984a78f038023e9a8433/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0cac6d221ffd18d2a6af984a78f038023e9a8433/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=0cac6d221ffd18d2a6af984a78f038023e9a8433",
        "patch": "@@ -110,7 +110,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n \n     // -regtest only: allow overriding block.nVersion with\n     // -blockversion=N to test forking scenarios\n-    if (Params().MineBlocksOnDemand())\n+    if (chainparams.MineBlocksOnDemand())\n         pblock->nVersion = GetArg(\"-blockversion\", pblock->nVersion);\n \n     // Create coinbase tx\n@@ -126,18 +126,19 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n     pblocktemplate->vTxSigOps.push_back(-1); // updated at end\n \n     // Largest block you're willing to create:\n-    unsigned int nBlockMaxSize = GetArg(\"-blockmaxsize\", DEFAULT_BLOCK_MAX_SIZE);\n-    // Limit to betweeen 1K and MAX_BLOCK_SIZE-1K for sanity:\n-    nBlockMaxSize = std::max((unsigned int)1000, std::min((unsigned int)(MAX_BLOCK_SIZE-1000), nBlockMaxSize));\n+    uint64_t nBlockMaxSize = GetArg(\"-blockmaxsize\", DEFAULT_BLOCK_MAX_SIZE);\n+    // Limit to betweeen 1K and nMaxBlockSize-1K for sanity:\n+    nBlockMaxSize = std::max((uint64_t)1000, std::min((MaxBlockSize(chainparams.GetConsensus()) - 1000), nBlockMaxSize));\n+    uint64_t nMaxBlockSigops = MaxBlockSigops(chainparams.GetConsensus());\n \n     // How much of the block should be dedicated to high-priority transactions,\n     // included regardless of the fees they pay\n-    unsigned int nBlockPrioritySize = GetArg(\"-blockprioritysize\", DEFAULT_BLOCK_PRIORITY_SIZE);\n+    uint64_t nBlockPrioritySize = GetArg(\"-blockprioritysize\", DEFAULT_BLOCK_PRIORITY_SIZE);\n     nBlockPrioritySize = std::min(nBlockMaxSize, nBlockPrioritySize);\n \n     // Minimum block size you want to create; block will be filled with free transactions\n     // until there are no more or the block reaches this size:\n-    unsigned int nBlockMinSize = GetArg(\"-blockminsize\", DEFAULT_BLOCK_MIN_SIZE);\n+    uint64_t nBlockMinSize = GetArg(\"-blockminsize\", DEFAULT_BLOCK_MIN_SIZE);\n     nBlockMinSize = std::min(nBlockMaxSize, nBlockMinSize);\n \n     // Collect memory pool transactions into the block\n@@ -255,7 +256,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n \n             // Legacy limits on sigOps:\n             unsigned int nTxSigOps = GetLegacySigOpCount(tx);\n-            if (nBlockSigOps + nTxSigOps >= MAX_BLOCK_SIGOPS)\n+            if (nBlockSigOps + nTxSigOps >= nMaxBlockSigops)\n                 continue;\n \n             // Skip free transactions if we're past the minimum block size:\n@@ -282,7 +283,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n             CAmount nTxFees = view.GetValueIn(tx)-tx.GetValueOut();\n \n             nTxSigOps += GetP2SHSigOpCount(tx, view);\n-            if (nBlockSigOps + nTxSigOps >= MAX_BLOCK_SIGOPS)\n+            if (nBlockSigOps + nTxSigOps >= nMaxBlockSigops)\n                 continue;\n \n             // Note that flags: we don't want to set mempool/IsStandard()\n@@ -339,8 +340,8 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n \n         // Fill in header\n         pblock->hashPrevBlock  = pindexPrev->GetBlockHash();\n-        UpdateTime(pblock, Params().GetConsensus(), pindexPrev);\n-        pblock->nBits          = GetNextWorkRequired(pindexPrev, pblock, Params().GetConsensus());\n+        UpdateTime(pblock, chainparams.GetConsensus(), pindexPrev);\n+        pblock->nBits          = GetNextWorkRequired(pindexPrev, pblock, chainparams.GetConsensus());\n         pblock->nNonce         = 0;\n         pblocktemplate->vTxSigOps[0] = GetLegacySigOpCount(pblock->vtx[0]);\n "
      },
      {
        "sha": "ea65ec747bad706029a26a0c97871d6f72f55ced",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0cac6d221ffd18d2a6af984a78f038023e9a8433/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0cac6d221ffd18d2a6af984a78f038023e9a8433/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=0cac6d221ffd18d2a6af984a78f038023e9a8433",
        "patch": "@@ -50,6 +50,7 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n     QString strHTML;\n \n     LOCK2(cs_main, wallet->cs_wallet);\n+    const Consensus::Params& consensusParams = Params().GetConsensus();\n     strHTML.reserve(4000);\n     strHTML += \"<html><font face='verdana, arial, helvetica, sans-serif'>\";\n \n@@ -262,7 +263,7 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n \n     if (wtx.IsCoinBase())\n     {\n-        quint32 numBlocksToMaturity = COINBASE_MATURITY +  1;\n+        quint32 numBlocksToMaturity = consensusParams.nCoinbaseMaturity + 1;\n         strHTML += \"<br>\" + tr(\"Generated coins must mature %1 blocks before they can be spent. When you generated this block, it was broadcast to the network to be added to the block chain. If it fails to get into the chain, its state will change to \\\"not accepted\\\" and it won't be spendable. This may occasionally happen if another node generates a block within a few seconds of yours.\").arg(QString::number(numBlocksToMaturity)) + \"<br>\";\n     }\n "
      },
      {
        "sha": "fc5e8eb43617c7914f94536fa7e738cfb3dc097f",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0cac6d221ffd18d2a6af984a78f038023e9a8433/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0cac6d221ffd18d2a6af984a78f038023e9a8433/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=0cac6d221ffd18d2a6af984a78f038023e9a8433",
        "patch": "@@ -382,6 +382,7 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n          );\n \n     LOCK(cs_main);\n+    const Consensus::Params& consensusParams = Params().GetConsensus();\n \n     std::string strMode = \"template\";\n     UniValue lpval = NullUniValue;\n@@ -519,7 +520,7 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n     CBlock* pblock = &pblocktemplate->block; // pointer for convenience\n \n     // Update nTime\n-    UpdateTime(pblock, Params().GetConsensus(), pindexPrev);\n+    UpdateTime(pblock, consensusParams, pindexPrev);\n     pblock->nNonce = 0;\n \n     UniValue aCaps(UniValue::VARR); aCaps.push_back(\"proposal\");\n@@ -580,8 +581,8 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n     result.push_back(Pair(\"mintime\", (int64_t)pindexPrev->GetMedianTimePast()+1));\n     result.push_back(Pair(\"mutable\", aMutable));\n     result.push_back(Pair(\"noncerange\", \"00000000ffffffff\"));\n-    result.push_back(Pair(\"sigoplimit\", (int64_t)MAX_BLOCK_SIGOPS));\n-    result.push_back(Pair(\"sizelimit\", (int64_t)MAX_BLOCK_SIZE));\n+    result.push_back(Pair(\"sigoplimit\", MaxBlockSigops(consensusParams)));\n+    result.push_back(Pair(\"sizelimit\", MaxBlockSize(consensusParams)));\n     result.push_back(Pair(\"curtime\", pblock->GetBlockTime()));\n     result.push_back(Pair(\"bits\", strprintf(\"%08x\", pblock->nBits)));\n     result.push_back(Pair(\"height\", (int64_t)(pindexPrev->nHeight+1)));"
      },
      {
        "sha": "35b792c2ae577f07650a28ba58d05b5174168cf8",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0cac6d221ffd18d2a6af984a78f038023e9a8433/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0cac6d221ffd18d2a6af984a78f038023e9a8433/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=0cac6d221ffd18d2a6af984a78f038023e9a8433",
        "patch": "@@ -283,6 +283,7 @@ UniValue gettxoutproof(const UniValue& params, bool fHelp)\n \n UniValue verifytxoutproof(const UniValue& params, bool fHelp)\n {\n+    const Consensus::Params& consensusParams = Params().GetConsensus();\n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n             \"verifytxoutproof \\\"proof\\\"\\n\"\n@@ -300,7 +301,7 @@ UniValue verifytxoutproof(const UniValue& params, bool fHelp)\n \n     UniValue res(UniValue::VARR);\n \n-    uint64_t nMaxTransactions = MAX_BLOCK_SIZE / 60;\n+    uint64_t nMaxTransactions = consensusParams.nMaxTxSize / consensusParams.nMinTxSize;\n     vector<uint256> vMatch;\n     if (merkleBlock.txn.ExtractMatches(nMaxTransactions, vMatch) != merkleBlock.header.hashMerkleRoot)\n         return res;"
      },
      {
        "sha": "59da8c322b87b080ef7fa6927e0c0653398617da",
        "filename": "src/test/checkblock_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0cac6d221ffd18d2a6af984a78f038023e9a8433/src/test/checkblock_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0cac6d221ffd18d2a6af984a78f038023e9a8433/src/test/checkblock_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/checkblock_tests.cpp?ref=0cac6d221ffd18d2a6af984a78f038023e9a8433",
        "patch": "@@ -2,7 +2,9 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"chainparams.h\"\n #include \"clientversion.h\"\n+#include \"consensus/consensus.h\"\n #include \"consensus/validation.h\"\n #include \"main.h\" // For CheckBlock\n #include \"primitives/block.h\""
      },
      {
        "sha": "f3ed97016153e60d5f69eb7004a4b415dfe78d78",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0cac6d221ffd18d2a6af984a78f038023e9a8433/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0cac6d221ffd18d2a6af984a78f038023e9a8433/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=0cac6d221ffd18d2a6af984a78f038023e9a8433",
        "patch": "@@ -95,10 +95,11 @@ TestingSetup::~TestingSetup()\n \n TestChain100Setup::TestChain100Setup() : TestingSetup(CBaseChainParams::REGTEST)\n {\n+    const Consensus::Params& consensusParams = Params().GetConsensus();\n     // Generate a 100-block chain:\n     coinbaseKey.MakeNewKey(true);\n     CScript scriptPubKey = CScript() <<  ToByteVector(coinbaseKey.GetPubKey()) << OP_CHECKSIG;\n-    for (int i = 0; i < COINBASE_MATURITY; i++)\n+    for (int i = 0; i < consensusParams.nCoinbaseMaturity; i++)\n     {\n         std::vector<CMutableTransaction> noTxns;\n         CBlock b = CreateAndProcessBlock(noTxns, scriptPubKey);\n@@ -124,7 +125,7 @@ TestChain100Setup::CreateAndProcessBlock(const std::vector<CMutableTransaction>&\n     unsigned int extraNonce = 0;\n     IncrementExtraNonce(&block, chainActive.Tip(), extraNonce);\n \n-    while (!CheckProofOfWork(block.GetHash(), block.nBits, Params(CBaseChainParams::REGTEST).GetConsensus())) ++block.nNonce;\n+    while (!CheckProofOfWork(block.GetHash(), block.nBits, Params().GetConsensus())) ++block.nNonce;\n \n     CValidationState state;\n     ProcessNewBlock(state, NULL, &block, true, NULL);"
      },
      {
        "sha": "47bb81c0254dd82b9a7ea4a4c3f0dd75cf8107c3",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0cac6d221ffd18d2a6af984a78f038023e9a8433/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0cac6d221ffd18d2a6af984a78f038023e9a8433/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=0cac6d221ffd18d2a6af984a78f038023e9a8433",
        "patch": "@@ -5,6 +5,7 @@\n \n #include \"txmempool.h\"\n \n+#include \"chainparams.h\"\n #include \"clientversion.h\"\n #include \"consensus/consensus.h\"\n #include \"consensus/validation.h\"\n@@ -161,6 +162,7 @@ void CTxMemPool::removeCoinbaseSpends(const CCoinsViewCache *pcoins, unsigned in\n     // Remove transactions spending a coinbase which are now immature\n     LOCK(cs);\n     list<CTransaction> transactionsToRemove;\n+    const Consensus::Params& consensusParams = Params().GetConsensus();\n     for (std::map<uint256, CTxMemPoolEntry>::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n         const CTransaction& tx = it->second.GetTx();\n         BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n@@ -169,7 +171,7 @@ void CTxMemPool::removeCoinbaseSpends(const CCoinsViewCache *pcoins, unsigned in\n                 continue;\n             const CCoins *coins = pcoins->AccessCoins(txin.prevout.hash);\n             if (fSanityCheck) assert(coins);\n-            if (!coins || (coins->IsCoinBase() && ((signed long)nMemPoolHeight) - coins->nHeight < COINBASE_MATURITY)) {\n+            if (!coins || (coins->IsCoinBase() && ((signed long)nMemPoolHeight) - coins->nHeight < consensusParams.nCoinbaseMaturity)) {\n                 transactionsToRemove.push_back(tx);\n                 break;\n             }"
      },
      {
        "sha": "0788c91a2b02245acd15fc680102ccc58c74cb76",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0cac6d221ffd18d2a6af984a78f038023e9a8433/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0cac6d221ffd18d2a6af984a78f038023e9a8433/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=0cac6d221ffd18d2a6af984a78f038023e9a8433",
        "patch": "@@ -2872,7 +2872,8 @@ int CMerkleTx::GetBlocksToMaturity() const\n {\n     if (!IsCoinBase())\n         return 0;\n-    return max(0, (COINBASE_MATURITY+1) - GetDepthInMainChain());\n+    const Consensus::Params& consensusParams = Params().GetConsensus();\n+    return max(0, (consensusParams.nCoinbaseMaturity + 1) - GetDepthInMainChain());\n }\n \n "
      }
    ]
  },
  {
    "sha": "e07b3d71e2355745740e109511357685c5d2ef1d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMDdiM2Q3MWUyMzU1NzQ1NzQwZTEwOTUxMTM1NzY4NWM1ZDJlZjFk",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-08-26T22:00:37Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-09-06T04:44:21Z"
      },
      "message": "Consensus: MOVEONLY: Most important consensus function declarations to consensus/consensus.h",
      "tree": {
        "sha": "46f86b87d73850dae8b5d3991ade526459bba839",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/46f86b87d73850dae8b5d3991ade526459bba839"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e07b3d71e2355745740e109511357685c5d2ef1d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e07b3d71e2355745740e109511357685c5d2ef1d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e07b3d71e2355745740e109511357685c5d2ef1d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e07b3d71e2355745740e109511357685c5d2ef1d/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0cac6d221ffd18d2a6af984a78f038023e9a8433",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0cac6d221ffd18d2a6af984a78f038023e9a8433",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0cac6d221ffd18d2a6af984a78f038023e9a8433"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 27,
      "deletions": 9
    },
    "files": [
      {
        "sha": "ebc26baf10a40257c8a44632e4433672c110c8e3",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 27,
        "deletions": 0,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e07b3d71e2355745740e109511357685c5d2ef1d/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e07b3d71e2355745740e109511357685c5d2ef1d/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=e07b3d71e2355745740e109511357685c5d2ef1d",
        "patch": "@@ -10,6 +10,9 @@\n \n #include <stdint.h>\n \n+class CBlock;\n+class CBlockHeader;\n+class CBlockIndex;\n class CCoinsViewCache;\n class CTransaction;\n class CValidationState;\n@@ -36,6 +39,30 @@ bool CheckTxInputs(const CTransaction& tx, CValidationState& state, const Params\n \n } // namespace Consensus\n \n+/** Block header validation functions */\n+\n+/**\n+ * Context-independent CBlockHeader validity checks\n+ */\n+bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, bool fCheckPOW = true);\n+/**\n+ * Context-dependent CBlockHeader validity checks\n+ */\n+bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, CBlockIndex *pindexPrev);\n+\n+/** Block validation functions */\n+\n+/**\n+ * Context-independent CBlock validity checks\n+ */\n+bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n+/**\n+ * Context-dependent CBlock validity checks\n+ */\n+bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIndex *pindexPrev);\n+\n+/** Block validation utilities */\n+\n /** The maximum allowed size for a serialized block, in bytes (network rule) */\n inline uint64_t MaxBlockSize(const Consensus::Params& consensusParams)\n {"
      },
      {
        "sha": "4387cde6e16429200f72b9b181d5ba760487af2d",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e07b3d71e2355745740e109511357685c5d2ef1d/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e07b3d71e2355745740e109511357685c5d2ef1d/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=e07b3d71e2355745740e109511357685c5d2ef1d",
        "patch": "@@ -348,14 +348,6 @@ bool DisconnectBlock(const CBlock& block, CValidationState& state, const CBlockI\n /** Apply the effects of this block (with given index) on the UTXO set represented by coins */\n bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pindex, CCoinsViewCache& coins, bool fJustCheck = false);\n \n-/** Context-independent validity checks */\n-bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, bool fCheckPOW = true);\n-bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n-\n-/** Context-dependent validity checks */\n-bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, CBlockIndex *pindexPrev);\n-bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIndex *pindexPrev);\n-\n /** Check a block is completely valid from start to finish (only works on top of our current best block, with cs_main held) */\n bool TestBlockValidity(CValidationState &state, const CBlock& block, CBlockIndex *pindexPrev, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n "
      },
      {
        "sha": "ce1e3ea2b1a8559220c631c78855be6b366d6cbb",
        "filename": "src/test/checkblock_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e07b3d71e2355745740e109511357685c5d2ef1d/src/test/checkblock_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e07b3d71e2355745740e109511357685c5d2ef1d/src/test/checkblock_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/checkblock_tests.cpp?ref=e07b3d71e2355745740e109511357685c5d2ef1d",
        "patch": "@@ -6,7 +6,6 @@\n #include \"clientversion.h\"\n #include \"consensus/consensus.h\"\n #include \"consensus/validation.h\"\n-#include \"main.h\" // For CheckBlock\n #include \"primitives/block.h\"\n #include \"test/test_bitcoin.h\"\n #include \"utiltime.h\""
      }
    ]
  },
  {
    "sha": "be466dc9a51d5ba6463d1760160cd0a57c11532e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZTQ2NmRjOWE1MWQ1YmE2NDYzZDE3NjAxNjBjZDBhNTdjMTE1MzJl",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-08-26T22:35:30Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-09-06T04:54:41Z"
      },
      "message": "Consensus: Chainparams: Explicit Consensus::Params for consensus functions:\n\n-CheckBlockHeader\n-ContextualCheckBlockHeader\n-CheckBlock\n-ContextualCheckBlock\n\nAlso add nTime parameter to CheckBlockHeader and CheckBlock.\nAlso use the oportunity to rename the functions inside the Consensus namespace.",
      "tree": {
        "sha": "9a63ad85368bfa63d28df896b5f5ea5df0ad68cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9a63ad85368bfa63d28df896b5f5ea5df0ad68cc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/be466dc9a51d5ba6463d1760160cd0a57c11532e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be466dc9a51d5ba6463d1760160cd0a57c11532e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/be466dc9a51d5ba6463d1760160cd0a57c11532e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be466dc9a51d5ba6463d1760160cd0a57c11532e/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e07b3d71e2355745740e109511357685c5d2ef1d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e07b3d71e2355745740e109511357685c5d2ef1d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e07b3d71e2355745740e109511357685c5d2ef1d"
      }
    ],
    "stats": {
      "total": 60,
      "additions": 28,
      "deletions": 32
    },
    "files": [
      {
        "sha": "d12a4e9b47cd6d852cd7c6b07d2e4081391b8145",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be466dc9a51d5ba6463d1760160cd0a57c11532e/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be466dc9a51d5ba6463d1760160cd0a57c11532e/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=be466dc9a51d5ba6463d1760160cd0a57c11532e",
        "patch": "@@ -37,29 +37,29 @@ bool CheckTx(const CTransaction& tx, CValidationState& state, const Params& cons\n  */\n bool CheckTxInputs(const CTransaction& tx, CValidationState& state, const Params& consensusParams, const CCoinsViewCache& inputs, int nSpendHeight);\n \n-} // namespace Consensus\n-\n /** Block header validation functions */\n \n /**\n  * Context-independent CBlockHeader validity checks\n  */\n-bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, bool fCheckPOW = true);\n+bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Params& consensusParams, int64_t nTime, bool fCheckPOW = true);\n /**\n  * Context-dependent CBlockHeader validity checks\n  */\n-bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, CBlockIndex *pindexPrev);\n+bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Params& consensusParams, const CBlockIndex* pindexPrev);\n \n /** Block validation functions */\n \n /**\n  * Context-independent CBlock validity checks\n  */\n-bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n+bool CheckBlock(const CBlock& block, CValidationState& state, const Params& consensusParams, int64_t nTime, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n /**\n  * Context-dependent CBlock validity checks\n  */\n-bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIndex *pindexPrev);\n+bool ContextualCheckBlock(const CBlock& block, CValidationState& state, const Params& consensusParams, const CBlockIndex* pindexPrev);\n+\n+} // namespace Consensus\n \n /** Block validation utilities */\n "
      },
      {
        "sha": "b92d8b1fa38957360ae1f0cd0e9590ba23b83910",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 21,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be466dc9a51d5ba6463d1760160cd0a57c11532e/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be466dc9a51d5ba6463d1760160cd0a57c11532e/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=be466dc9a51d5ba6463d1760160cd0a57c11532e",
        "patch": "@@ -1677,7 +1677,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n     const CChainParams& chainparams = Params();\n     AssertLockHeld(cs_main);\n     // Check it again in case a previous version let a bad block in\n-    if (!CheckBlock(block, state, !fJustCheck, !fJustCheck))\n+    if (!Consensus::CheckBlock(block, state, chainparams.GetConsensus(), GetAdjustedTime(), !fJustCheck, !fJustCheck))\n         return false;\n \n     // verify that the view's current state corresponds to the previous block\n@@ -2547,29 +2547,26 @@ bool FindUndoPos(CValidationState &state, int nFile, CDiskBlockPos &pos, unsigne\n     return true;\n }\n \n-bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, bool fCheckPOW)\n+bool Consensus::CheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& consensusParams, int64_t nTime, bool fCheckPOW)\n {\n     // Check proof of work matches claimed amount\n-    if (fCheckPOW && !CheckProofOfWork(block.GetHash(), block.nBits, Params().GetConsensus()))\n+    if (fCheckPOW && !CheckProofOfWork(block.GetHash(), block.nBits, consensusParams))\n         return state.DoS(50, error(\"CheckBlockHeader(): proof of work failed\"),\n                          REJECT_INVALID, \"high-hash\");\n \n     // Check timestamp\n-    if (block.GetBlockTime() > GetAdjustedTime() + 2 * 60 * 60)\n+    if (block.GetBlockTime() > nTime + 2 * 60 * 60)\n         return state.Invalid(error(\"CheckBlockHeader(): block timestamp too far in the future\"),\n                              REJECT_INVALID, \"time-too-new\");\n \n     return true;\n }\n \n-bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bool fCheckMerkleRoot)\n+bool Consensus::CheckBlock(const CBlock& block, CValidationState& state, const Consensus::Params& consensusParams, int64_t nTime, bool fCheckPOW, bool fCheckMerkleRoot)\n {\n-    const Consensus::Params& consensusParams = Params().GetConsensus();\n-    // These are checks that are independent of context.\n-\n     // Check that the header is valid (particularly PoW).  This is mostly\n     // redundant with the call in AcceptBlockHeader.\n-    if (!CheckBlockHeader(block, state, fCheckPOW))\n+    if (!CheckBlockHeader(block, state, consensusParams, nTime, fCheckPOW))\n         return false;\n \n     // Check the merkle root.\n@@ -2641,9 +2638,8 @@ static bool CheckIndexAgainstCheckpoint(const CBlockIndex* pindexPrev, CValidati\n     return true;\n }\n \n-bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, CBlockIndex * const pindexPrev)\n+bool Consensus::ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Params& consensusParams, const CBlockIndex* pindexPrev)\n {\n-    const Consensus::Params& consensusParams = Params().GetConsensus();\n     // Check proof of work\n     if (block.nBits != GetNextWorkRequired(pindexPrev, &block, consensusParams))\n         return state.DoS(100, error(\"%s: incorrect proof of work\", __func__),\n@@ -2667,10 +2663,9 @@ bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& sta\n     return true;\n }\n \n-bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIndex * const pindexPrev)\n+bool Consensus::ContextualCheckBlock(const CBlock& block, CValidationState& state, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev)\n {\n     const int nHeight = pindexPrev == NULL ? 0 : pindexPrev->nHeight + 1;\n-    const Consensus::Params& consensusParams = Params().GetConsensus();\n \n     // Check that all transactions are finalized\n     BOOST_FOREACH(const CTransaction& tx, block.vtx)\n@@ -2712,7 +2707,7 @@ bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, CBloc\n             return true;\n         }\n \n-        if (!CheckBlockHeader(block, state))\n+        if (!Consensus::CheckBlockHeader(block, state, chainparams.GetConsensus(), GetAdjustedTime()))\n             return false;\n \n         // Get prev block index\n@@ -2728,7 +2723,7 @@ bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, CBloc\n         if (fCheckpointsEnabled && !CheckIndexAgainstCheckpoint(pindexPrev, state, chainparams, hash))\n             return error(\"%s: CheckIndexAgainstCheckpoint(): %s\", __func__, state.GetRejectReason().c_str());\n \n-        if (!ContextualCheckBlockHeader(block, state, pindexPrev))\n+        if (!Consensus::ContextualCheckBlockHeader(block, state, chainparams.GetConsensus(), pindexPrev))\n             return false;\n     }\n     if (pindex == NULL)\n@@ -2771,7 +2766,8 @@ bool AcceptBlock(const CBlock& block, CValidationState& state, CBlockIndex** ppi\n         if (fTooFarAhead) return true;      // Block height is too high\n     }\n \n-    if ((!CheckBlock(block, state)) || !ContextualCheckBlock(block, state, pindex->pprev)) {\n+    if (!Consensus::CheckBlock(block, state, chainparams.GetConsensus(), GetAdjustedTime()) ||\n+        !Consensus::ContextualCheckBlock(block, state, chainparams.GetConsensus(), pindex->pprev)) {\n         if (state.IsInvalid() && !state.CorruptionPossible()) {\n             pindex->nStatus |= BLOCK_FAILED_VALID;\n             setDirtyBlockIndex.insert(pindex);\n@@ -2819,8 +2815,9 @@ static bool IsSuperMajority(int minVersion, const CBlockIndex* pstart, unsigned\n \n bool ProcessNewBlock(CValidationState &state, const CNode* pfrom, const CBlock* pblock, bool fForceProcessing, CDiskBlockPos *dbp)\n {\n+    const CChainParams& chainparams = Params();\n     // Preliminary checks\n-    bool checked = CheckBlock(*pblock, state);\n+    bool checked = Consensus::CheckBlock(*pblock, state, chainparams.GetConsensus(), GetAdjustedTime());\n \n     {\n         LOCK(cs_main);\n@@ -2861,11 +2858,11 @@ bool TestBlockValidity(CValidationState &state, const CBlock& block, CBlockIndex\n     indexDummy.nHeight = pindexPrev->nHeight + 1;\n \n     // NOTE: CheckBlockHeader is called by CheckBlock\n-    if (!ContextualCheckBlockHeader(block, state, pindexPrev))\n+    if (!Consensus::ContextualCheckBlockHeader(block, state, chainparams.GetConsensus(), pindexPrev))\n         return false;\n-    if (!CheckBlock(block, state, fCheckPOW, fCheckMerkleRoot))\n+    if (!Consensus::CheckBlock(block, state, chainparams.GetConsensus(), GetAdjustedTime(), fCheckPOW, fCheckMerkleRoot))\n         return false;\n-    if (!ContextualCheckBlock(block, state, pindexPrev))\n+    if (!Consensus::ContextualCheckBlock(block, state, chainparams.GetConsensus(), pindexPrev))\n         return false;\n     if (!ConnectBlock(block, state, &indexDummy, viewNew, true))\n         return false;\n@@ -3168,6 +3165,7 @@ CVerifyDB::~CVerifyDB()\n \n bool CVerifyDB::VerifyDB(CCoinsView *coinsview, int nCheckLevel, int nCheckDepth)\n {\n+    const CChainParams& chainparams = Params();\n     LOCK(cs_main);\n     if (chainActive.Tip() == NULL || chainActive.Tip()->pprev == NULL)\n         return true;\n@@ -3195,7 +3193,7 @@ bool CVerifyDB::VerifyDB(CCoinsView *coinsview, int nCheckLevel, int nCheckDepth\n         if (!ReadBlockFromDisk(block, pindex))\n             return error(\"VerifyDB(): *** ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n         // check level 1: verify block validity\n-        if (nCheckLevel >= 1 && !CheckBlock(block, state))\n+        if (nCheckLevel >= 1 && !Consensus::CheckBlock(block, state, chainparams.GetConsensus(), GetAdjustedTime()))\n             return error(\"VerifyDB(): *** found bad block at %d, hash=%s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString());\n         // check level 2: verify undo validity\n         if (nCheckLevel >= 2 && pindex) {"
      },
      {
        "sha": "9192f34a754f6921adfe189542af64ef54238526",
        "filename": "src/test/checkblock_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be466dc9a51d5ba6463d1760160cd0a57c11532e/src/test/checkblock_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be466dc9a51d5ba6463d1760160cd0a57c11532e/src/test/checkblock_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/checkblock_tests.cpp?ref=be466dc9a51d5ba6463d1760160cd0a57c11532e",
        "patch": "@@ -8,6 +8,7 @@\n #include \"consensus/validation.h\"\n #include \"primitives/block.h\"\n #include \"test/test_bitcoin.h\"\n+#include \"timedata.h\"\n #include \"utiltime.h\"\n \n #include <cstdio>\n@@ -16,7 +17,6 @@\n #include <boost/filesystem/path.hpp>\n #include <boost/test/unit_test.hpp>\n \n-\n BOOST_FIXTURE_TEST_SUITE(CheckBlock_tests, BasicTestingSetup)\n \n bool read_block(const std::string& filename, CBlock& block)\n@@ -44,12 +44,12 @@ bool read_block(const std::string& filename, CBlock& block)\n \n BOOST_AUTO_TEST_CASE(May15)\n {\n+    const Consensus::Params& consensusParams = Params(CBaseChainParams::MAIN).GetConsensus();\n     // Putting a 1MB binary file in the git repository is not a great\n     // idea, so this test is only run if you manually download\n     // test/data/Mar12Fork.dat from\n     // http://sourceforge.net/projects/bitcoin/files/Bitcoin/blockchain/Mar12Fork.dat/download\n     unsigned int tMay15 = 1368576000;\n-    SetMockTime(tMay15); // Test as if it was right at May 15\n \n     CBlock forkingBlock;\n     if (read_block(\"Mar12Fork.dat\", forkingBlock))\n@@ -58,10 +58,8 @@ BOOST_AUTO_TEST_CASE(May15)\n \n         // After May 15'th, big blocks are OK:\n         forkingBlock.nTime = tMay15; // Invalidates PoW\n-        BOOST_CHECK(CheckBlock(forkingBlock, state, false, false));\n+        BOOST_CHECK(Consensus::CheckBlock(forkingBlock, state, consensusParams, tMay15, false, false));\n     }\n-\n-    SetMockTime(0);\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  }
]