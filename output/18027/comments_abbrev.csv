DrahtBot,2020-01-30 11:52:33,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/18027#issuecomment-580217825,580217825,
gwillen,2020-01-30 19:14:18,"> Ideally disable the sign button if there's nothing we can sign.\n\nCan I determine that without actually trying to sign? I was assuming that (1) I cannot, and (2) I shouldn't try to actually sign for real just to see if it works.  (Or do you mean just disable the button at the point where we are asked to sign, try, and fail?)\n\n> Currently this only changes the Load PSBT flow. Do you also w",https://github.com/bitcoin/bitcoin/pull/18027#issuecomment-580409421,580409421,
Sjors,2020-01-30 19:17:22,"I indeed wouldn't try actually signing. But you e.g. tell if a wallet is watch-only, and the new ScriptPubKeyManager's can tell if they can sign for things.",https://github.com/bitcoin/bitcoin/pull/18027#issuecomment-580410733,580410733,
gwillen,2020-01-30 19:17:45,"Aha, and the Travis failure is the same issue we were talking about yesterday in #bitcoin-core-dev, I got scooped by #17261 and need to rebase again and fix errors, will do. EDIT: Oh, I think actually the Travis failure is just _because_ master was already failing Travis at the moment I made the PR. So I think it will pass as soon as I push again.",https://github.com/bitcoin/bitcoin/pull/18027#issuecomment-580410894,580410894,
gwillen,2020-02-01 00:36:53,"Ok, I'm adding a check so that we do not enable the sign button (and we show a helpful note) if the current wallet is privateKeysDisabled().\n\nI would like to use ScriptPubKeyMan to get a better verdict, but it doesn't seem like the functionality I need is quite there. It looks like what I want is something like CWallet::GetSigningProvider, which calls CanProvide on each ScriptPubKeyMan in the ",https://github.com/bitcoin/bitcoin/pull/18027#issuecomment-580968561,580968561,
gwillen,2020-02-01 00:48:01,"Actually, here's an approach that seems like it should work -- FillPSBT already does basically all this work for us, since it does all the signing using a HidingSigningProvider, and allows us to tell it not to sign. So _if_ I correctly understand the behavior of HidingSigningProvider, I think this should already tell us how many inputs we could sign, it just doesn't expose the result. If that seem",https://github.com/bitcoin/bitcoin/pull/18027#issuecomment-580970228,580970228,
gwillen,2020-02-01 02:58:06,"Updated:\n* Disable sign button unless !privateKeysDisabled() and GetSigningProvider() != nullptr (I'm not sure how perfect a proxy that is for ""we can sign"" but it worked on my positive and negative test cases.)\n* Added ""load from clipboard"" option.\n* Added shortcut key in menu.\n* Separated error message fixes into their own commit.\n* Moved CountPSBTUnsignedInputs into psbt.h.\n\nDid n",https://github.com/bitcoin/bitcoin/pull/18027#issuecomment-580983817,580983817,
promag,2020-02-03 00:51:27,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/18027#issuecomment-581198012,581198012,
gwillen,2020-02-08 00:27:14,"Speculatively attempting to fix the Windows-only fails without a Windows machine to test on. It looks like MinGW defines ""ERROR"" as a macro, so I can't give an enum constant that name. And it looks like the Visual Studio project file for building Bitcoin-QT is not autogenerated from the Makefiles, but has to be manually updated, so I've attempted to update it.",https://github.com/bitcoin/bitcoin/pull/18027#issuecomment-583673272,583673272,
laanwj,2020-02-10 16:18:38,Concept ACK!,https://github.com/bitcoin/bitcoin/pull/18027#issuecomment-584203853,584203853,
Sjors,2020-02-12 18:34:31,"Mmm, it's misinterpreting a 2-of-3 multisig with two signed outputs. Probably related to my [earlier comment](https://github.com/bitcoin/bitcoin/pull/18027#discussion_r377127607). This is more annoying though, because it means I can't broadcast without the third signature.\n<img width=""586"" alt=""Schermafbeelding 2020-02-12 om 19 30 41"" src=""https://user-images.githubusercontent.com/10217/74365443",https://github.com/bitcoin/bitcoin/pull/18027#issuecomment-585353349,585353349,
gwillen,2020-02-12 18:43:39,"@Sjors are you able to supply me with an exact process to reproduce this? (Or an exact description -- is this a 2-of-3 using keys A, B, C, where both A and B have already signed, and you have C in your wallet, so it should be signable?)\n\nI don't _think_ I'm relying on analyzepsbt for this determination -- I will have to look back at the code, but I should be saying that we can sign as long as ",https://github.com/bitcoin/bitcoin/pull/18027#issuecomment-585357240,585357240,
Sjors,2020-02-12 19:01:53,"It's a watch-only wallet with a 2-of-3 multisig (three hardware wallets). Two of them signed.\n\nYou probably want to call finalize on a copy of the PSBT just to see if it's complete.",https://github.com/bitcoin/bitcoin/pull/18027#issuecomment-585365026,585365026,
gwillen,2020-02-12 19:04:44,"What is it misinterpreting? That is, what do you expect it to say? (If it's a watch-only wallet, then ""this wallet does not have the right keys"" should really say ""this wallet cannot make signatures"", because it's supposed to check privateKeysDisabled() first.)",https://github.com/bitcoin/bitcoin/pull/18027#issuecomment-585366164,585366164,
Sjors,2020-02-12 19:05:37,The Broadcast Transaction button should not be disabled. I can finalize it with the RPC and `testmempoolaccept` is happy. The rest of the info is fine I suppose.,https://github.com/bitcoin/bitcoin/pull/18027#issuecomment-585366572,585366572,
gwillen,2020-02-12 19:20:57,"Oh!! Sorry, of course. You're right, I will look into why it's doing that. For testing broadcastability, I am relying on FillPSBT's ""complete"" output, which I thought was the right thing and should just work in this case. The actual text does rely on AnalyzePSBT, but the button should in theory still be enabled. I'll figure that out.",https://github.com/bitcoin/bitcoin/pull/18027#issuecomment-585373147,585373147,
Sjors,2020-02-12 19:32:07,"Mmm, actually it looks like I was testing on an outdated descriptor wallet branch (with your commits cherry-picked). I just tried on slightly more recent version and it now it recognized it as finished. So I think you're right that `FillPSBT` did the job (it's also a finalizer, as I learned the hard way in #18039).",https://github.com/bitcoin/bitcoin/pull/18027#issuecomment-585378178,585378178,
gwillen,2020-02-12 19:33:39,"Oh, fantastic. Yeah, I have essentially ended up assuming that finalization is trivial and will always succeed given sufficient signatures, and I automatically attempt it before doing anything else.",https://github.com/bitcoin/bitcoin/pull/18027#issuecomment-585378805,585378805,
jonasschnelli,2020-02-13 07:56:13,Concept ACK,https://github.com/bitcoin/bitcoin/pull/18027#issuecomment-585598439,585598439,
instagibbs,2020-02-27 19:14:15,"concept ACK, will start reviewing in depth post-merge/rebase of https://github.com/bitcoin/bitcoin/pull/17509",https://github.com/bitcoin/bitcoin/pull/18027#issuecomment-592128997,592128997,
instagibbs,2020-02-28 14:23:34,"from a test run:\n```\n* Sends 47.99999859 BTC to bcrt1q6yp5np47xjpcn06fxmut4rug5nll4uh4xmefwn\n* Sends 2.00000000 BTC to bcrt1qr5nel4sx76q953crm7vq3qjd6umgyzmlufyfaa\n```\n\nDo we really want to display change outputs? I guess it makes sense in coinjoiny contexts.",https://github.com/bitcoin/bitcoin/pull/18027#issuecomment-592534853,592534853,
instagibbs,2020-03-26 14:46:09,now is a good time to rebase since parent PR is likely merged without change in April,https://github.com/bitcoin/bitcoin/pull/18027#issuecomment-604472288,604472288,
gwillen,2020-03-27 08:00:56,"Tests segfault on my OS X machine, but it seems that they do that even if I undo my changes, so not going to worry about it too much for the moment...\n\nNeeded some fixups to make it build after rebase, which I am at this moment too lazy to rebase into their proper places in the list of commits, but will do that later before this is ready for merge.\n\n(The crash is deep inside `test_bitcoin ",https://github.com/bitcoin/bitcoin/pull/18027#issuecomment-604867392,604867392,
Sjors,2020-03-27 10:55:05,"Travis macOS build is happy, as well as on my own machine (macOS 10.15.3)",https://github.com/bitcoin/bitcoin/pull/18027#issuecomment-604937221,604937221,
instagibbs,2020-03-27 13:35:07,Try a `make clean` cycle. I've had really bizarre db-related errors that go away after that.,https://github.com/bitcoin/bitcoin/pull/18027#issuecomment-605004059,605004059,
jb55,2020-04-14 21:19:36,"Concept ACK. With this branch I no longer need to hit the command line to finalize a PSBT! Although I still need HWI to sign :(\n\nIt might be useful to mention if the transaction is already in the mempool or a block? I noticed it always says broadcast even if it already was broadcasted. Happy to defer these improvements to future PRs, along with change detection :)",https://github.com/bitcoin/bitcoin/pull/18027#issuecomment-613687111,613687111,
jb55,2020-04-14 21:25:33,"Another thing I noticed is that when I have the wrong wallet selected I get conflicting messages:\n\n![Apr14-142210](https://user-images.githubusercontent.com/45598/79275625-6469cb00-7e5b-11ea-94bf-8ce9a5043094.png)\n\n""is fully signed and ready for broadcast""\n\nand \n\n""Transaction as 1 unsigned inputs""\n\nbut this goes away with the right wallet selected:\n\n![Apr14-142431](https://",https://github.com/bitcoin/bitcoin/pull/18027#issuecomment-613689513,613689513,
instagibbs,2020-04-14 21:27:04,"> Although I still need HWI to sign :(\n\nThere's HWI-QT! ;)",https://github.com/bitcoin/bitcoin/pull/18027#issuecomment-613690116,613690116,
meshcollider,2020-04-23 01:42:38,This can be rebased now #17509 is merged :),https://github.com/bitcoin/bitcoin/pull/18027#issuecomment-618127351,618127351,
instagibbs,2020-04-24 19:11:26,I'd wait for rebase until #16528 is merged since it appears close,https://github.com/bitcoin/bitcoin/pull/18027#issuecomment-619193268,619193268,
instagibbs,2020-04-27 14:32:04,and now is the actual time to rebase ,https://github.com/bitcoin/bitcoin/pull/18027#issuecomment-620024869,620024869,
instagibbs,2020-05-21 19:06:40,I could take on this PR to champion it if you're too busy?,https://github.com/bitcoin/bitcoin/pull/18027#issuecomment-632288031,632288031,
gwillen,2020-05-29 08:33:45,"Rebased!\n\nI think I still need to address comments from @jb55. I should probably also consider improving handling of change addresses (but I'd like to defer that to another PR if nobody objects.)",https://github.com/bitcoin/bitcoin/pull/18027#issuecomment-635847440,635847440,
instagibbs,2020-05-29 14:03:42,Change address handling is something we can improve later,https://github.com/bitcoin/bitcoin/pull/18027#issuecomment-635989733,635989733,
instagibbs,2020-05-29 14:05:32,restarted an unrelated travis failure,https://github.com/bitcoin/bitcoin/pull/18027#issuecomment-635990637,635990637,
gwillen,2020-06-01 06:23:57,"@jb55 I'd be up for holding back 'in mempool / in block' detection to a future PR (but I do think it should be in there for better UI, yeah.) Can you elaborate on what you mean by ""right wallet"" / ""wrong wallet""? In theory once the tx is fully signed, it shouldn't matter what wallet you're using. So I'm confused about what's happening there. Can you give me a more precise sequence of steps to repr",https://github.com/bitcoin/bitcoin/pull/18027#issuecomment-636637051,636637051,
Sjors,2020-06-10 16:56:17,"Needs rebase, mostly due to #19176 ",https://github.com/bitcoin/bitcoin/pull/18027#issuecomment-642135758,642135758,
gwillen,2020-06-19 07:08:12,"Rebasing across #19176, I turned a few instances of `QString::fromStdString(TransactionErrorString(err))` into `QString::fromStdString(TransactionErrorString(err).translated)` to get things to build -- I think that's the right approach but let me know if it's not.",https://github.com/bitcoin/bitcoin/pull/18027#issuecomment-646476192,646476192,
gwillen,2020-06-19 09:24:54,"It seems like @jb55's issue is consistent with FillPSBT not finalizing the transaction like I expected that it would, variably depending on which wallet is loaded. (@jb55, is one or both of the wallets a descriptor wallet by any chance?) `FinalizePSBT` calls `SignPSBTInput(DUMMY_SIGNING_PROVIDER, psbtx, i, SIGHASH_ALL);` on every input, whereas `FillPSBT` seems to bottom out in calls to `SignPSBTI",https://github.com/bitcoin/bitcoin/pull/18027#issuecomment-646533587,646533587,
instagibbs,2020-06-19 13:31:07,"concept ACK fix, going to test again",https://github.com/bitcoin/bitcoin/pull/18027#issuecomment-646637174,646637174,
instagibbs,2020-06-19 13:54:21,"tested ACK https://github.com/bitcoin/bitcoin/pull/18027/commits/931dd4760855e036c176a23ec2de367c460e4243\n\nTested across multiple Core wallets and HWI",https://github.com/bitcoin/bitcoin/pull/18027#issuecomment-646649664,646649664,
Sjors,2020-06-19 15:14:37,re-tACK 931dd4760855e036c176a23ec2de367c460e4243,https://github.com/bitcoin/bitcoin/pull/18027#issuecomment-646691285,646691285,
jonatack,2020-06-19 19:13:32,Concept ACK,https://github.com/bitcoin/bitcoin/pull/18027#issuecomment-646823325,646823325,
jb55,2020-06-20 04:45:18,ACK 931dd4760855e036c176a23ec2de367c460e4243,https://github.com/bitcoin/bitcoin/pull/18027#issuecomment-646940693,646940693,
meshcollider,2020-06-21 10:31:19,"Concept ACK, glanced at the code, looks RTM",https://github.com/bitcoin/bitcoin/pull/18027#issuecomment-647109720,647109720,
Sjors,2020-01-30 10:08:05,"You should pick a letter to turn into the keyboard shortcut (works on some operating systems, not macOS). E.g. `""&Load PSBT..."" if `L` isn't taken.",https://github.com/bitcoin/bitcoin/pull/18027#discussion_r372859156,372859156,src/qt/bitcoingui.cpp
Sjors,2020-01-30 10:09:21,Nit: fix year,https://github.com/bitcoin/bitcoin/pull/18027#discussion_r372859805,372859805,src/qt/psbtoperationsdialog.h
Sjors,2020-01-30 10:15:09,Cleaning these error messages could probably be its own commit.,https://github.com/bitcoin/bitcoin/pull/18027#discussion_r372862556,372862556,src/util/error.cpp
Sjors,2020-01-30 10:24:47,I wonder if these strings can be moved to a place where the RPC can also use them.,https://github.com/bitcoin/bitcoin/pull/18027#discussion_r372867561,372867561,src/qt/psbtoperationsdialog.cpp
Sjors,2020-01-30 10:26:25,Should we create a `OperationsDialog` class to make this stuff reusable? (can wait of course),https://github.com/bitcoin/bitcoin/pull/18027#discussion_r372868419,372868419,src/qt/psbtoperationsdialog.cpp
Sjors,2020-01-30 10:33:14,Maybe move this to `psbt.h`?,https://github.com/bitcoin/bitcoin/pull/18027#discussion_r372871737,372871737,src/qt/psbtoperationsdialog.cpp
gwillen,2020-01-30 19:08:54,"Can do, was dithering about what to do with it.",https://github.com/bitcoin/bitcoin/pull/18027#discussion_r373138329,373138329,src/qt/psbtoperationsdialog.cpp
gwillen,2020-01-30 19:09:50,"I'm happy to go either way, are there other existing dialogs we'd immediately want to adopt it for? I do like it better than messageboxes, I tried to make it as drop-in as possible a replacement for them.",https://github.com/bitcoin/bitcoin/pull/18027#discussion_r373138827,373138827,src/qt/psbtoperationsdialog.cpp
gwillen,2020-01-30 19:11:12,"That would make sense actually, yeah. I could move them to wherever AnalyzePSBT is. What would the impact of this be on translation issues? I know that tr() is only used for GUI strings, and _() is used for non-GUI strings -- is there precedent for shared strings?",https://github.com/bitcoin/bitcoin/pull/18027#discussion_r373139535,373139535,src/qt/psbtoperationsdialog.cpp
gwillen,2020-01-30 19:11:24,"Yeah, agreed, will fix.",https://github.com/bitcoin/bitcoin/pull/18027#discussion_r373139630,373139630,src/util/error.cpp
gwillen,2020-02-01 00:17:43,Done.,https://github.com/bitcoin/bitcoin/pull/18027#discussion_r373738096,373738096,src/qt/psbtoperationsdialog.h
gwillen,2020-02-01 00:18:22,"Just went with L -- it's hard for me to check what's going on here since I'm on a Mac, but I don't see it as being taken. (I didn't add a shortcut for loading from clipboard, since L is taken, C is taken, I could use P for PSBT but it seems kind of unnatural.",https://github.com/bitcoin/bitcoin/pull/18027#discussion_r373738183,373738183,src/qt/bitcoingui.cpp
Sjors,2020-02-01 15:45:23,"I'm not sure actually. @laanwj, @hebasto?",https://github.com/bitcoin/bitcoin/pull/18027#discussion_r373786367,373786367,src/qt/psbtoperationsdialog.cpp
hebasto,2020-02-01 17:10:52,"@gwillen \n> I know that tr() is only used for GUI strings, and _() is used for non-GUI strings -- is there precedent for shared strings?\n\nActually, `bilingual_str` type from `util/translation.h` supports both original and translated strings. More details are available in #16362 and #16224.\n\nYou could use something like this:\n\n```\n#include <util/translation.h>\n\nbilingual_str bs ",https://github.com/bitcoin/bitcoin/pull/18027#discussion_r373790520,373790520,src/qt/psbtoperationsdialog.cpp
Sjors,2020-02-10 15:20:53,"When all inputs have `""next"": ""finalizer""` the transaction itself may still be `""next"": ""signer""`. This seems to be a bug (@achow101 or feature?) in `analyzepsbt`. If it's a bug, we can ignore it for this PR, if it's a feature, we should handle it, though imo it can wait for a followup.",https://github.com/bitcoin/bitcoin/pull/18027#discussion_r377127607,377127607,src/qt/psbtoperationsdialog.cpp
gwillen,2020-02-12 19:35:19,"I am going to assume this is a bug, so I'm happy to push to a followup. I have been tempted to try to rewrite the flow of AnalyzePSBT, with an eye to simplifying it and making its correctness easier to check.",https://github.com/bitcoin/bitcoin/pull/18027#discussion_r378468553,378468553,src/qt/psbtoperationsdialog.cpp
achow101,2020-02-27 21:36:50,Sounds like a bug,https://github.com/bitcoin/bitcoin/pull/18027#discussion_r385385534,385385534,src/qt/psbtoperationsdialog.cpp
Sjors,2020-02-28 14:33:10,https://github.com/bitcoin/bitcoin/pull/18220,https://github.com/bitcoin/bitcoin/pull/18027#discussion_r385727121,385727121,src/qt/psbtoperationsdialog.cpp
luke-jr,2020-05-29 22:45:46,Nit: Extra space before m_transaction_data,https://github.com/bitcoin/bitcoin/pull/18027#discussion_r432771653,432771653,src/qt/psbtoperationsdialog.cpp
Sjors,2020-06-15 12:31:43,nit: this refactor in how the file is read might deserve its own commit.,https://github.com/bitcoin/bitcoin/pull/18027#discussion_r440141665,440141665,src/qt/walletview.cpp
Sjors,2020-06-15 12:38:59,nit: brackets,https://github.com/bitcoin/bitcoin/pull/18027#discussion_r440145423,440145423,src/qt/psbtoperationsdialog.cpp
gwillen,2020-06-19 06:50:14,"I'm not sure how much sense that change makes in isolation -- it was forced by the clipboard change, in which it is included, because when I lifted the definition of 'data' to an outer scope, I couldn't figure out how to avoid changing the approach at the same time (since I was no longer able to use a non-default constructor of std::string.)",https://github.com/bitcoin/bitcoin/pull/18027#discussion_r442662192,442662192,src/qt/walletview.cpp
gwillen,2020-06-19 06:57:28,"... And actually the refactor isn't necessary, I can do `data = std::string(std::istreambuf_iterator<char>{in}, {});` and move-assignment should cause the copy to be elided so it's free. So I'll just change it to that.",https://github.com/bitcoin/bitcoin/pull/18027#discussion_r442665136,442665136,src/qt/walletview.cpp
gwillen,2020-06-19 07:04:43,"good call, fixed",https://github.com/bitcoin/bitcoin/pull/18027#discussion_r442667874,442667874,src/qt/psbtoperationsdialog.cpp
achow101,2020-06-19 18:43:14,"The intent is to indicate whether signing happened, or whether we could sign. But this is really checking whether we could finalize, which may include signing. For instance, this wouldn't work if the input were multisig.\n\nBut that might be ok for this PR.\n\nTo reduce code duplication, maybe this should go inside `SignPSBTInput`?",https://github.com/bitcoin/bitcoin/pull/18027#discussion_r442993786,442993786,src/wallet/scriptpubkeyman.cpp
gwillen,2020-06-19 19:56:53,I'm very interested in a conversation about refactoring some of this stuff. Ok to save for another PR?,https://github.com/bitcoin/bitcoin/pull/18027#discussion_r443020303,443020303,src/wallet/scriptpubkeyman.cpp
gwillen,2020-06-19 19:59:25,"(I am interested both in (1) reducing code duplication and (2) working out more precisely whether we can sign something, which I found to be very difficult to actually compute, and I definitely recognize this as a conservative approximation.)",https://github.com/bitcoin/bitcoin/pull/18027#discussion_r443021125,443021125,src/wallet/scriptpubkeyman.cpp
achow101,2020-06-19 20:00:41,"> Ok to save for another PR?\n\nYep",https://github.com/bitcoin/bitcoin/pull/18027#discussion_r443021540,443021540,src/wallet/scriptpubkeyman.cpp
jonatack,2020-06-22 09:25:19,nit: s/what i/what/ here and at line 2136 below,https://github.com/bitcoin/bitcoin/pull/18027#discussion_r443429430,443429430,src/wallet/scriptpubkeyman.cpp
jonatack,2020-06-22 09:34:54,nit: sort,https://github.com/bitcoin/bitcoin/pull/18027#discussion_r443434941,443434941,src/qt/walletview.cpp
