[
  {
    "sha": "15e85a03e28af752625eeecfeee32f5980ec2c45",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNWU4NWEwM2UyOGFmNzUyNjI1ZWVlY2ZlZWUzMmY1OTgwZWMyYzQ1",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2014-10-17T19:43:05Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2014-10-29T17:09:05Z"
      },
      "message": "regtest : specify timestamp of created blocks\n\nAdd a third parameter to setgenerate in -regtest mode that\nsets the timestamp for created blocks.\n\nAnd returns hashes of generated blocks in -regtest mode.",
      "tree": {
        "sha": "f6e9f973ca0557994aa854f5ec8089514915b33a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f6e9f973ca0557994aa854f5ec8089514915b33a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/15e85a03e28af752625eeecfeee32f5980ec2c45",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niEYEABECAAYFAlRRHzMACgkQdYgkL74406hhBQCfQ0eruBMPvZawwsatBv7SM2rw\ncUgAn0NAeE+G4vOhIFtjaTVq4GZOJFeG\n=ZHM+\n-----END PGP SIGNATURE-----",
        "payload": "tree f6e9f973ca0557994aa854f5ec8089514915b33a\nparent 723c7526368badda15df8ac1ffc047a0ab2e384a\nauthor Gavin Andresen <gavinandresen@gmail.com> 1413574985 -0400\ncommitter Gavin Andresen <gavinandresen@gmail.com> 1414602545 -0400\n\nregtest : specify timestamp of created blocks\n\nAdd a third parameter to setgenerate in -regtest mode that\nsets the timestamp for created blocks.\n\nAnd returns hashes of generated blocks in -regtest mode.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/15e85a03e28af752625eeecfeee32f5980ec2c45",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/15e85a03e28af752625eeecfeee32f5980ec2c45",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/15e85a03e28af752625eeecfeee32f5980ec2c45/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "723c7526368badda15df8ac1ffc047a0ab2e384a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/723c7526368badda15df8ac1ffc047a0ab2e384a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/723c7526368badda15df8ac1ffc047a0ab2e384a"
      }
    ],
    "stats": {
      "total": 43,
      "additions": 36,
      "deletions": 7
    },
    "files": [
      {
        "sha": "54d3a0fa0195afb7c1e74a074c5638fbe6250168",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15e85a03e28af752625eeecfeee32f5980ec2c45/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15e85a03e28af752625eeecfeee32f5980ec2c45/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=15e85a03e28af752625eeecfeee32f5980ec2c45",
        "patch": "@@ -434,7 +434,7 @@ bool ProcessBlockFound(CBlock* pblock, CWallet& wallet, CReserveKey& reservekey)\n     return true;\n }\n \n-void static BitcoinMiner(CWallet *pwallet)\n+void static BitcoinMiner(CWallet *pwallet, uint32_t nBlockTime)\n {\n     LogPrintf(\"BitcoinMiner started\\n\");\n     SetThreadPriority(THREAD_PRIORITY_LOWEST);\n@@ -466,6 +466,7 @@ void static BitcoinMiner(CWallet *pwallet)\n                 return;\n             }\n             CBlock *pblock = &pblocktemplate->block;\n+            if (nBlockTime > 0) pblock->nTime = nBlockTime;\n             IncrementExtraNonce(pblock, pindexPrev, nExtraNonce);\n \n             LogPrintf(\"Running BitcoinMiner with %u transactions in block (%u bytes)\\n\", pblock->vtx.size(),\n@@ -549,7 +550,7 @@ void static BitcoinMiner(CWallet *pwallet)\n                     break;\n \n                 // Update nTime every few seconds\n-                UpdateTime(pblock, pindexPrev);\n+                if (nBlockTime == 0) UpdateTime(pblock, pindexPrev);\n                 if (Params().AllowMinDifficultyBlocks())\n                 {\n                     // Changing pblock->nTime can change work required on testnet:\n@@ -565,7 +566,7 @@ void static BitcoinMiner(CWallet *pwallet)\n     }\n }\n \n-void GenerateBitcoins(bool fGenerate, CWallet* pwallet, int nThreads)\n+void GenerateBitcoins(bool fGenerate, CWallet* pwallet, int nThreads, uint32_t nBlockTime)\n {\n     static boost::thread_group* minerThreads = NULL;\n \n@@ -589,7 +590,7 @@ void GenerateBitcoins(bool fGenerate, CWallet* pwallet, int nThreads)\n \n     minerThreads = new boost::thread_group();\n     for (int i = 0; i < nThreads; i++)\n-        minerThreads->create_thread(boost::bind(&BitcoinMiner, pwallet));\n+        minerThreads->create_thread(boost::bind(&BitcoinMiner, pwallet, nBlockTime));\n }\n \n #endif // ENABLE_WALLET"
      },
      {
        "sha": "8127f378c3527dfc2047129502355df0c0c9ada7",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15e85a03e28af752625eeecfeee32f5980ec2c45/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15e85a03e28af752625eeecfeee32f5980ec2c45/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=15e85a03e28af752625eeecfeee32f5980ec2c45",
        "patch": "@@ -17,7 +17,7 @@ class CWallet;\n struct CBlockTemplate;\n \n /** Run the miner threads */\n-void GenerateBitcoins(bool fGenerate, CWallet* pwallet, int nThreads);\n+void GenerateBitcoins(bool fGenerate, CWallet* pwallet, int nThreads, uint32_t nBlockTime=0);\n /** Generate a new block, without valid proof-of-work */\n CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn);\n CBlockTemplate* CreateNewBlockWithKey(CReserveKey& reservekey);"
      },
      {
        "sha": "1da86b5189dfc4e83be36ccc907540a34a3f22d4",
        "filename": "src/rpcclient.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15e85a03e28af752625eeecfeee32f5980ec2c45/src/rpcclient.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15e85a03e28af752625eeecfeee32f5980ec2c45/src/rpcclient.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcclient.cpp?ref=15e85a03e28af752625eeecfeee32f5980ec2c45",
        "patch": "@@ -28,6 +28,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"getaddednodeinfo\", 0 },\n     { \"setgenerate\", 0 },\n     { \"setgenerate\", 1 },\n+    { \"setgenerate\", 2 }, // -regtest only argument\n     { \"getnetworkhashps\", 0 },\n     { \"getnetworkhashps\", 1 },\n     { \"sendtoaddress\", 1 },"
      },
      {
        "sha": "236899ceee9db0385fe7e0278f0efa81e7a95950",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 2,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15e85a03e28af752625eeecfeee32f5980ec2c45/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15e85a03e28af752625eeecfeee32f5980ec2c45/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=15e85a03e28af752625eeecfeee32f5980ec2c45",
        "patch": "@@ -12,6 +12,7 @@\n #include \"miner.h\"\n #include \"pow.h\"\n #include \"rpcserver.h\"\n+#include \"timedata.h\"\n #include \"util.h\"\n #ifdef ENABLE_WALLET\n #include \"db.h\"\n@@ -111,7 +112,9 @@ Value getgenerate(const Array& params, bool fHelp)\n \n Value setgenerate(const Array& params, bool fHelp)\n {\n-    if (fHelp || params.size() < 1 || params.size() > 2)\n+    size_t nMaxArgs = Params().MineBlocksOnDemand() ? 3 : 2;\n+\n+    if (fHelp || params.size() < 1 || params.size() > nMaxArgs)\n         throw runtime_error(\n             \"setgenerate generate ( genproclimit )\\n\"\n             \"\\nSet 'generate' true or false to turn generation on or off.\\n\"\n@@ -121,6 +124,9 @@ Value setgenerate(const Array& params, bool fHelp)\n             \"1. generate         (boolean, required) Set to true to turn on generation, off to turn off.\\n\"\n             \"2. genproclimit     (numeric, optional) Set the processor limit for when generation is on. Can be -1 for unlimited.\\n\"\n             \"                    Note: in -regtest mode, genproclimit controls how many blocks are generated immediately.\\n\"\n+            \"3. blocktimestamp   (numeric, -regtest only) Create blocks with given timestamp.\\n\"\n+            \"\\nResult\\n\"\n+            \"[ blockhashes ]     (array, -regtest only) hashes of blocks generated\\n\"\n             \"\\nExamples:\\n\"\n             \"\\nSet the generation on with a limit of one processor\\n\"\n             + HelpExampleCli(\"setgenerate\", \"true 1\") +\n@@ -154,6 +160,13 @@ Value setgenerate(const Array& params, bool fHelp)\n         int nHeightEnd = 0;\n         int nHeight = 0;\n         int nGenerate = (nGenProcLimit > 0 ? nGenProcLimit : 1);\n+        uint64_t nFirstBlockTime = (params.size() > 2 ? params[2].get_int64() : 0);\n+        // Block times must be after the genesis block time, and not more than 2 hours in the future:\n+        uint64_t nMinTime = Params().GenesisBlock().nTime + 1;\n+        uint64_t nMaxTime = GetAdjustedTime() + 2 * 60 * 60 - Params().TargetSpacing()*nGenerate;\n+        if (nFirstBlockTime > 0 && (nFirstBlockTime < nMinTime || nFirstBlockTime > nMaxTime))\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"block time out of range: %d to %d\", nMinTime, nMaxTime));\n+\n         {   // Don't keep cs_main locked\n             LOCK(cs_main);\n             nHeightStart = chainActive.Height();\n@@ -163,17 +176,31 @@ Value setgenerate(const Array& params, bool fHelp)\n         int nHeightLast = -1;\n         while (nHeight < nHeightEnd)\n         {\n+            // if given block time, simulate 10-minute-apart blocks\n+            uint64_t nBlockTime = 0;\n+            if (nFirstBlockTime > 0)\n+            {\n+                nBlockTime = nFirstBlockTime + Params().TargetSpacing()*(nHeight-nHeightStart);\n+            }\n+\n             if (nHeightLast != nHeight)\n             {\n                 nHeightLast = nHeight;\n-                GenerateBitcoins(fGenerate, pwalletMain, 1);\n+                GenerateBitcoins(fGenerate, pwalletMain, 1, (uint32_t)nBlockTime);\n             }\n             MilliSleep(1);\n             {   // Don't keep cs_main locked\n                 LOCK(cs_main);\n                 nHeight = chainActive.Height();\n             }\n         }\n+        Array blockHashes;\n+        {\n+            LOCK(cs_main);\n+            for (int i = nHeightStart+1; i <= nHeightEnd; i++)\n+                blockHashes.push_back(chainActive[i]->GetBlockHash().GetHex());\n+        }\n+        return blockHashes;\n     }\n     else // Not -regtest: start generate thread, return immediately\n     {"
      }
    ]
  }
]