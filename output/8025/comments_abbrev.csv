kazcw,2016-05-09T01:40:53Z,"That seems like a lot, at least the way we're currently populating the keypool. Key generation holds up everything in the initial startup, and my laptop generates about 5 keys/sec. If we're going to generate keys for half an hour, I think we ought to do it in a separate thread from the initial sync.\n",https://github.com/bitcoin/bitcoin/pull/8025#issuecomment-217760017,217760017,
pstratem,2016-05-09T01:42:37Z,Forgot that I hadn't actually fixed that.\n,https://github.com/bitcoin/bitcoin/pull/8025#issuecomment-217760142,217760142,
kazcw,2016-05-09T02:01:08Z,"Whatever happened to deterministic wallets, anyway (#3250 / #6265)? That would be the ideal solution to this problem...\n",https://github.com/bitcoin/bitcoin/pull/8025#issuecomment-217761654,217761654,
laanwj,2016-05-09T06:07:31Z,"In principle I agree with this change but there is also a sense in which it makes things worse: with 100 keys, people _need_ to be active with backups. With 10,000 they could just back up once, sit back and assume they'll never hit the 10,000 mark. Until they do and are entirely screwed and there won't even be a warning.\n\nI think if you want to do thi, this should be accompanied by disabling key",https://github.com/bitcoin/bitcoin/pull/8025#issuecomment-217782822,217782822,
gmaxwell,2016-05-09T06:22:25Z,ConceptMEH.  I would much prefer the few line version of switching to hardened BIP32 keys for filling the keypool. \n,https://github.com/bitcoin/bitcoin/pull/8025#issuecomment-217784644,217784644,
laanwj,2016-05-09T06:45:20Z,"We should really make a decision here. This same back and forth has been going on for years, with the same people giving the same replies, and as a result the keypool logic is still the same as in 2012. At least what @pstratem proposes (increasing the default key pool size) is a small improvement.\n\nSo is there any drawback in moving Bitcoin Core's wallet from a keypool system to hardened BIP32? ",https://github.com/bitcoin/bitcoin/pull/8025#issuecomment-217787692,217787692,
jonasschnelli,2016-05-09T06:54:08Z,"There is a PR where the keypool gets filled with Bip32 hardened keys:\nhttps://github.com/bitcoin/bitcoin/pull/7273\n(needs overhaul, finalizing which I'm ready to do if we agree on Bip32 support)\n#7273 is a very simple solution (mostly just fill the keypool deterministic)\nThere is also a more complex and flexible solution: https://github.com/bitcoin/bitcoin/pull/6265\n\nThe Bip32 pro/cons:\n- \",https://github.com/bitcoin/bitcoin/pull/8025#issuecomment-217788886,217788886,
jonasschnelli,2016-05-09T06:55:27Z,"Default keypool size of 10'000 could be an intermediate step. What about the performance impacts on slower systems (RPi, etc.) during first start?\n",https://github.com/bitcoin/bitcoin/pull/8025#issuecomment-217789046,217789046,
paveljanik,2016-05-09T06:58:29Z,"I think that we should then invent new shortcut: IKR (Initial Keypool Refill)... On RPi, it will take longer than IBD.\n",https://github.com/bitcoin/bitcoin/pull/8025#issuecomment-217789510,217789510,
laanwj,2016-05-09T07:05:10Z,"> I think that we should then invent new shortcut: IKR (Initial Keypool Refill)... On RPi, it will take longer than IBD\n\nAlso there is a kind of perverse incentive here: Generating secure randomness, especially if it needs input from hardware sources, is usually slow. If you want to generate 10,000 truly random keys (~320,000 bytes of entropy) it _should_ take a while. If you speed it up you can",https://github.com/bitcoin/bitcoin/pull/8025#issuecomment-217790482,217790482,
paveljanik,2016-05-09T07:07:37Z,I definitely agree on this. This will also motivate people using slow systems to work on BIP32 ;-)\n,https://github.com/bitcoin/bitcoin/pull/8025#issuecomment-217790838,217790838,
pstratem,2016-05-09T07:17:37Z,@jonasschnelli working on fixing the performance issues here in #8026 \n,https://github.com/bitcoin/bitcoin/pull/8025#issuecomment-217792305,217792305,
jonasschnelli,2016-05-09T07:21:39Z,@pstratem But getting 10'000*32byte secure entropy (and deriving 10'000 pubkeys including a sign/verify to check the key integrity) will be the bottleneck IMO.\n,https://github.com/bitcoin/bitcoin/pull/8025#issuecomment-217792906,217792906,
pstratem,2016-05-09T07:27:27Z,@jonasschnelli fair point\n\ni guess i'll have to fix this correctly by making the keypool refill happen in the background with a trapdoor\n,https://github.com/bitcoin/bitcoin/pull/8025#issuecomment-217793856,217793856,
gmaxwell,2016-05-09T07:29:56Z,"""But getting 10'000*32byte secure entropy"" that shouldn't be slow... maybe it is, but there isn't a fundamental reason it should be.\n\nThere are a bunch of overheads with wallet key management which last I check completely eclipsed key generation: it was flushing and syncing the wallet for each and every key.   Running on one core, the generation should operate at about, say, 3000/sec (it's only ",https://github.com/bitcoin/bitcoin/pull/8025#issuecomment-217794308,217794308,
jonasschnelli,2016-05-09T07:30:00Z,I think we should work towards bip32 instead. IMO the risks and drawbacks of a default 10'000 keys keypool are higher then reviewing and merging an adequate bip32 keypool refill PR.\n,https://github.com/bitcoin/bitcoin/pull/8025#issuecomment-217794318,217794318,
gmaxwell,2016-05-09T07:37:38Z,"@jonasschnelli your patches are far more than the minimal change required.  I believe the first time I derandomized the wallet (back before BIP32 was written), it was a 15 line patch, not counting the KDF itself-- though I  @don't doubt it was inadequate #7273 is a 1605 line patch which changes the UI and such.\n\nI agree we should do this, but we should work to make it the smallest sensible chang",https://github.com/bitcoin/bitcoin/pull/8025#issuecomment-217795721,217795721,
jonasschnelli,2016-05-09T07:49:04Z,@gmaxwell:\nIMO the minimal patch should include:\n- store the master key (seed) in a extra record (& support for encrypted wallets)\n- derive keys by a given keypath (to support different keypath schemes)\n- `getnewaddress` and `getaddressesbyaccount` (and co.) should report the addresses bip32 keypath\n- the wallet needs to keep track of the last used child index so it can derive the next child ,https://github.com/bitcoin/bitcoin/pull/8025#issuecomment-217797813,217797813,
sipa,2016-05-09T07:54:43Z,"@jonasschnelli A minimal patch that makes backups safe doesn't need any RPC or UI changes, and just 1) generate/store a master key 2) derive newly generated keys from that master 3) remember how many have been generated already. You wouldn't be able to really call that ""bip32 support"", but it would give all advantages deterministic keys have regardless.\n",https://github.com/bitcoin/bitcoin/pull/8025#issuecomment-217798871,217798871,
gmaxwell,2016-05-09T08:00:29Z,@sipa one step above the bare minimum is to keep separate change and non-change pools so they don't get scrambled up on an emergency recovery.\n,https://github.com/bitcoin/bitcoin/pull/8025#issuecomment-217799921,217799921,
laanwj,2016-05-09T08:26:51Z,"> ""But getting 10'000*32byte secure entropy"" that shouldn't be slow... maybe it is, but there isn't a fundamental reason it should be.\n\nSlow is a matter of degree, of course. What is an acceptable speed for generating good ""true"" randomness on a typical PC?\n\nI mean I'm pretty sure that if you read a block of 320,000 bytes from urandom at once, you'll get randomness generated from a 'seed' (tha",https://github.com/bitcoin/bitcoin/pull/8025#issuecomment-217805014,217805014,
jonasschnelli,2016-05-09T08:28:35Z,I'll try to write a more minimal PR without API impacts.\n,https://github.com/bitcoin/bitcoin/pull/8025#issuecomment-217805364,217805364,
jonasschnelli,2016-05-10T09:22:42Z,Alternative solution: #8035\n,https://github.com/bitcoin/bitcoin/pull/8025#issuecomment-218104355,218104355,
arowser,2016-05-25T08:43:41Z,Can one of the admins verify this patch?\n,https://github.com/bitcoin/bitcoin/pull/8025#issuecomment-221510447,221510447,
laanwj,2016-05-31T13:50:49Z,Closing in favor of #8035\n,https://github.com/bitcoin/bitcoin/pull/8025#issuecomment-222694259,222694259,
