[
  {
    "sha": "8449a8788aa6efeddf635241a3c32b35f3a356c1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NDQ5YTg3ODhhYTZlZmVkZGY2MzUyNDFhM2MzMmIzNWYzYTM1NmMx",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2012-04-17T21:57:06Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2012-04-21T23:35:39Z"
      },
      "message": "Data-drive script evaluation unit tests.",
      "tree": {
        "sha": "34f13fa13061479f76b45b5ac40da012bdbee0a6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/34f13fa13061479f76b45b5ac40da012bdbee0a6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8449a8788aa6efeddf635241a3c32b35f3a356c1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8449a8788aa6efeddf635241a3c32b35f3a356c1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8449a8788aa6efeddf635241a3c32b35f3a356c1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8449a8788aa6efeddf635241a3c32b35f3a356c1/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6a7a42be16e09fbbdeb7f61051aa50a2f56c6bc3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a7a42be16e09fbbdeb7f61051aa50a2f56c6bc3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6a7a42be16e09fbbdeb7f61051aa50a2f56c6bc3"
      }
    ],
    "stats": {
      "total": 253,
      "additions": 253,
      "deletions": 0
    },
    "files": [
      {
        "sha": "c05d3ba5b2567cd59b461daf49ca068f04ccf085",
        "filename": "src/test/data/script_invalid.json",
        "status": "added",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8449a8788aa6efeddf635241a3c32b35f3a356c1/src/test/data/script_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8449a8788aa6efeddf635241a3c32b35f3a356c1/src/test/data/script_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_invalid.json?ref=8449a8788aa6efeddf635241a3c32b35f3a356c1",
        "patch": "@@ -0,0 +1,25 @@\n+[\n+[\"\", \"\"],\n+[\"\", \"NOP\"],\n+[\"NOP\", \"\"],\n+[\"NOP\",\"NOP\"],\n+[\"0 1\",\"EQUAL\"],\n+[\"1 1 ADD\", \"0 EQUAL\"],\n+[\"11 1 ADD 12 SUB\", \"11 EQUAL\"],\n+\n+[\"2147483648 0 ADD\", \"NOP\", \"arithmetic operands must be in range [-2^31...2^31] \"],\n+[\"-2147483648 0 ADD\", \"NOP\", \"arithmetic operands must be in range [-2^31...2^31] \"],\n+[\"2147483647 DUP ADD\", \"4294967294 NUMEQUAL\", \"NUMEQUAL must be in numeric range\"],\n+[\"0xaabbccddeeff NOT\", \"0 EQUAL\", \"NOT is an arithmetic operand\"],\n+\n+[\"2 DUP MUL\", \"4 EQUAL\", \"disabled\"],\n+[\"2 DUP DIV\", \"1 EQUAL\", \"disabled\"],\n+[\"2 2MUL\", \"4 EQUAL\", \"disabled\"],\n+[\"2 2DIV\", \"1 EQUAL\", \"disabled\"],\n+[\"7 3 MOD\", \"1 EQUAL\", \"disabled\"],\n+[\"2 2 LSHIFT\", \"8 EQUAL\", \"disabled\"],\n+[\"2 1 RSHIFT\", \"1 EQUAL\", \"disabled\"],\n+\n+\n+[\"NOP1\",\"NOP10\"]\n+]"
      },
      {
        "sha": "e7ad6d9cc0369ef201c4cc8cd61422898b1c0d43",
        "filename": "src/test/data/script_valid.json",
        "status": "added",
        "additions": 78,
        "deletions": 0,
        "changes": 78,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8449a8788aa6efeddf635241a3c32b35f3a356c1/src/test/data/script_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8449a8788aa6efeddf635241a3c32b35f3a356c1/src/test/data/script_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_valid.json?ref=8449a8788aa6efeddf635241a3c32b35f3a356c1",
        "patch": "@@ -0,0 +1,78 @@\n+[\n+[\"2 -2 ADD\", \"0 EQUAL\"],\n+[\"2147483647 -2147483647 ADD\", \"0 EQUAL\"],\n+[\"-1 -1 ADD\", \"-2 EQUAL\"],\n+\n+[\"1\",\"NOP\"],\n+[\"0 0\",\"EQUAL\"],\n+[\"1 1 ADD\", \"2 EQUAL\"],\n+[\"1 1ADD\", \"2 EQUAL\"],\n+[\"111 1SUB\", \"110 EQUAL\"],\n+[\"111 1 ADD 12 SUB\", \"100 EQUAL\"],\n+[\"0 ABS\", \"0 EQUAL\"],\n+[\"16 ABS\", \"16 EQUAL\"],\n+[\"-16 ABS\", \"-16 NEGATE EQUAL\"],\n+[\"0 NOT\", \"NOP\"],\n+[\"1 NOT\", \"0 EQUAL\"],\n+[\"11 NOT\", \"0 EQUAL\"],\n+[\"0 0NOTEQUAL\", \"0 EQUAL\"],\n+[\"1 0NOTEQUAL\", \"1 EQUAL\"],\n+[\"111 0NOTEQUAL\", \"1 EQUAL\"],\n+[\"-111 0NOTEQUAL\", \"1 EQUAL\"],\n+[\"1 1 BOOLAND\", \"NOP\"],\n+[\"1 0 BOOLAND\", \"NOT\"],\n+[\"0 1 BOOLAND\", \"NOT\"],\n+[\"0 0 BOOLAND\", \"NOT\"],\n+[\"16 17 BOOLAND\", \"NOP\"],\n+[\"1 1 BOOLOR\", \"NOP\"],\n+[\"1 0 BOOLOR\", \"NOP\"],\n+[\"0 1 BOOLOR\", \"NOP\"],\n+[\"0 0 BOOLOR\", \"NOT\"],\n+[\"16 17 BOOLOR\", \"NOP\"],\n+[\"11 10 1 ADD\", \"NUMEQUAL\"],\n+[\"11 10 1 ADD\", \"NUMEQUALVERIFY 1\"],\n+[\"11 10 1 ADD\", \"NUMNOTEQUAL NOT\"],\n+[\"111 10 1 ADD\", \"NUMNOTEQUAL\"],\n+[\"11 10\", \"LESSTHAN NOT\"],\n+[\"4 4\", \"LESSTHAN NOT\"],\n+[\"10 11\", \"LESSTHAN\"],\n+[\"-11 11\", \"LESSTHAN\"],\n+[\"-11 -10\", \"LESSTHAN\"],\n+[\"11 10\", \"GREATERTHAN\"],\n+[\"4 4\", \"GREATERTHAN NOT\"],\n+[\"10 11\", \"GREATERTHAN NOT\"],\n+[\"-11 11\", \"GREATERTHAN NOT\"],\n+[\"-11 -10\", \"GREATERTHAN NOT\"],\n+[\"11 10\", \"LESSTHANOREQUAL NOT\"],\n+[\"4 4\", \"LESSTHANOREQUAL\"],\n+[\"10 11\", \"LESSTHANOREQUAL\"],\n+[\"-11 11\", \"LESSTHANOREQUAL\"],\n+[\"-11 -10\", \"LESSTHANOREQUAL\"],\n+[\"11 10\", \"GREATERTHANOREQUAL\"],\n+[\"4 4\", \"GREATERTHANOREQUAL\"],\n+[\"10 11\", \"GREATERTHANOREQUAL NOT\"],\n+[\"-11 11\", \"GREATERTHANOREQUAL NOT\"],\n+[\"-11 -10\", \"GREATERTHANOREQUAL NOT\"],\n+[\"1 0 MIN\", \"0 NUMEQUAL\"],\n+[\"0 1 MIN\", \"0 NUMEQUAL\"],\n+[\"-1 0 MIN\", \"-1 NUMEQUAL\"],\n+[\"0 -2147483647 MIN\", \"-2147483647 NUMEQUAL\"],\n+[\"2147483647 0 MAX\", \"2147483647 NUMEQUAL\"],\n+[\"0 100 MAX\", \"100 NUMEQUAL\"],\n+[\"-100 0 MAX\", \"0 NUMEQUAL\"],\n+[\"0 -2147483647 MAX\", \"0 NUMEQUAL\"],\n+[\"0 0 1\", \"WITHIN\"],\n+[\"1 0 1\", \"WITHIN NOT\"],\n+[\"0 -2147483647 2147483647\", \"WITHIN\"],\n+[\"-1 -100 100\", \"WITHIN\"],\n+[\"11 -100 100\", \"WITHIN\"],\n+[\"-2147483647 -100 100\", \"WITHIN NOT\"],\n+[\"2147483647 -100 100\", \"WITHIN NOT\"],\n+\n+[\"2147483647 2147483647 SUB\", \"0 EQUAL\"],\n+[\"2147483647 DUP ADD\", \"4294967294 EQUAL\", \">32 bit EQUAL is valid\"],\n+[\"2147483647 NEGATE DUP ADD\", \"-4294967294 EQUAL\"],\n+\n+\n+[\"NOP\",\"1\"]\n+]"
      },
      {
        "sha": "988bd24de8f23f574c786968847215fcad9e1c5d",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 150,
        "deletions": 0,
        "changes": 150,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8449a8788aa6efeddf635241a3c32b35f3a356c1/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8449a8788aa6efeddf635241a3c32b35f3a356c1/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=8449a8788aa6efeddf635241a3c32b35f3a356c1",
        "patch": "@@ -1,17 +1,167 @@\n+#include <iostream>\n+#include <fstream>\n #include <vector>\n+#include <boost/algorithm/string/classification.hpp>\n+#include <boost/algorithm/string/predicate.hpp>\n+#include <boost/algorithm/string/replace.hpp>\n+#include <boost/algorithm/string/split.hpp>\n #include <boost/test/unit_test.hpp>\n #include <boost/foreach.hpp>\n+#include \"json/json_spirit_reader_template.h\"\n+#include \"json/json_spirit_writer_template.h\"\n+#include \"json/json_spirit_utils.h\"\n \n #include \"main.h\"\n #include \"wallet.h\"\n \n using namespace std;\n+using namespace json_spirit;\n+using namespace boost::algorithm;\n+\n extern uint256 SignatureHash(CScript scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType);\n extern bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn,\n                          bool fValidatePayToScriptHash, int nHashType);\n \n+CScript\n+ParseScript(string s)\n+{\n+    CScript result;\n+\n+    static map<string, opcodetype> mapOpNames;\n+\n+    if (mapOpNames.size() == 0)\n+    {\n+        for (int op = OP_NOP; op <= OP_NOP10; op++)\n+        {\n+            const char* name = GetOpName((opcodetype)op);\n+            if (strcmp(name, \"OP_UNKNOWN\") == 0)\n+                continue;\n+            string strName(name);\n+            mapOpNames[strName] = (opcodetype)op;\n+            // Convenience: OP_ADD and just ADD are both recognized:\n+            replace_first(strName, \"OP_\", \"\");\n+            mapOpNames[strName] = (opcodetype)op;\n+        }\n+    }\n+\n+    vector<string> words;\n+    split(words, s, is_any_of(\" \\t\\n\"), token_compress_on);\n+\n+    BOOST_FOREACH(string w, words)\n+    {\n+        if (all(w, is_digit()) ||\n+            (starts_with(w, \"-\") && all(string(w.begin()+1, w.end()), is_digit())))\n+        {\n+            // Number\n+            int64 n = atoi64(w);\n+            result << n;\n+        }\n+        else if (starts_with(w, \"0x\") && IsHex(string(w.begin()+2, w.end())))\n+        {\n+            // Hex data:\n+            result << ParseHex(string(w.begin()+2, w.end()));\n+        }\n+        else if (s.size() >= 2 && starts_with(w, \"'\") && ends_with(w, \"'\"))\n+        {\n+            // Single-quoted string, pushed as data:\n+            std::vector<unsigned char> value(s.begin()+1, s.end()-1);\n+            result << value;\n+        }\n+        else if (mapOpNames.count(w))\n+        {\n+            // opcode, e.g. OP_ADD or OP_1:\n+            result << mapOpNames[w];\n+        }\n+        else\n+        {\n+            BOOST_ERROR(\"Parse error: \" << s);\n+            return CScript();\n+        }                        \n+    }\n+\n+    return result;\n+}\n+\n+Array\n+read_json(const std::string& filename)\n+{\n+    namespace fs = boost::filesystem;\n+    fs::path testFile = fs::current_path() / \"test\" / \"data\" / filename;\n+    if (!fs::exists(testFile))\n+    {\n+        fs::path testFile = fs::path(__FILE__).parent_path() / \"data\" / filename;\n+    }\n+\n+    ifstream ifs(testFile.string().c_str(), ifstream::in);\n+    Value v;\n+    if (!read_stream(ifs, v))\n+    {\n+        BOOST_ERROR(\"Cound not find/open \" << filename);\n+        return Array();\n+    }\n+    if (v.type() != array_type)\n+    {\n+        BOOST_ERROR(filename << \" does not contain a json array\");\n+        return Array();\n+    }\n+\n+    return v.get_array();\n+}\n+\n BOOST_AUTO_TEST_SUITE(script_tests)\n \n+BOOST_AUTO_TEST_CASE(script_valid)\n+{\n+    // Read tests from test/data/script_valid.json\n+    // Format is an array of arrays\n+    // Inner arrays are [ \"scriptSig\", \"scriptPubKey\" ]\n+    // ... where scriptSig and scriptPubKey are stringified\n+    // scripts.\n+    Array tests = read_json(\"script_valid.json\");\n+\n+    BOOST_FOREACH(Value& tv, tests)\n+    {\n+        Array test = tv.get_array();\n+        string strTest = write_string(tv, false);\n+        if (test.size() < 2) // Allow size > 2; extra stuff ignored (useful for comments)\n+        {\n+            BOOST_ERROR(\"Bad test: \" << strTest);\n+            continue;\n+        }\n+        string scriptSigString = test[0].get_str();\n+        CScript scriptSig = ParseScript(scriptSigString);\n+        string scriptPubKeyString = test[1].get_str();\n+        CScript scriptPubKey = ParseScript(scriptPubKeyString);\n+\n+        CTransaction tx;\n+        BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, scriptPubKey, tx, 0, true, SIGHASH_NONE), strTest);\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE(script_invalid)\n+{\n+    // Scripts that should evaluate as invalid\n+    Array tests = read_json(\"script_invalid.json\");\n+\n+    BOOST_FOREACH(Value& tv, tests)\n+    {\n+        Array test = tv.get_array();\n+        string strTest = write_string(tv, false);\n+        if (test.size() < 2) // Allow size > 2; extra stuff ignored (useful for comments)\n+        {\n+            BOOST_ERROR(\"Bad test: \" << strTest);\n+            continue;\n+        }\n+        string scriptSigString = test[0].get_str();\n+        CScript scriptSig = ParseScript(scriptSigString);\n+        string scriptPubKeyString = test[1].get_str();\n+        CScript scriptPubKey = ParseScript(scriptPubKeyString);\n+\n+        CTransaction tx;\n+        BOOST_CHECK_MESSAGE(!VerifyScript(scriptSig, scriptPubKey, tx, 0, true, SIGHASH_NONE), strTest);\n+    }\n+}\n+\n BOOST_AUTO_TEST_CASE(script_PushData)\n {\n     // Check that PUSHDATA1, PUSHDATA2, and PUSHDATA4 create the same value on"
      }
    ]
  }
]