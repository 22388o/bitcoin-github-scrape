[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/770626451",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21043#issuecomment-770626451",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21043",
    "id": 770626451,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3MDYyNjQ1MQ==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-01T07:09:33Z",
    "updated_at": "2021-02-01T07:09:33Z",
    "author_association": "MEMBER",
    "body": "\r\n\r\n<details><summary>patch</summary>\r\n\r\n```diff\r\ncommit eea2bf75949fd3b391711b9092e01a1843245db2\r\nAuthor: MarcoFalke <falke.marco@gmail.com>\r\nDate:   Mon Feb 1 08:03:24 2021 +0100\r\n\r\n    util: Disallow negative mocktime\r\n\r\ndiff --git a/src/rpc/misc.cpp b/src/rpc/misc.cpp\r\nindex b75a7b8d26..38a0bddddb 100644\r\n--- a/src/rpc/misc.cpp\r\n+++ b/src/rpc/misc.cpp\r\n@@ -365,13 +365,13 @@ static RPCHelpMan signmessagewithprivkey()\r\n static RPCHelpMan setmocktime()\r\n {\r\n     return RPCHelpMan{\"setmocktime\",\r\n-                \"\\nSet the local time to given timestamp (-regtest only)\\n\",\r\n-                {\r\n-                    {\"timestamp\", RPCArg::Type::NUM, RPCArg::Optional::NO, UNIX_EPOCH_TIME + \"\\n\"\r\n-            \"   Pass 0 to go back to using the system time.\"},\r\n-                },\r\n-                RPCResult{RPCResult::Type::NONE, \"\", \"\"},\r\n-                RPCExamples{\"\"},\r\n+        \"\\nSet the local time to given timestamp (-regtest only)\\n\",\r\n+        {\r\n+            {\"timestamp\", RPCArg::Type::NUM, RPCArg::Optional::NO, UNIX_EPOCH_TIME + \"\\n\"\r\n+             \"Pass 0 to go back to using the system time.\"},\r\n+        },\r\n+        RPCResult{RPCResult::Type::NONE, \"\", \"\"},\r\n+        RPCExamples{\"\"},\r\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\r\n {\r\n     if (!Params().IsMockableChain()) {\r\n@@ -386,7 +386,10 @@ static RPCHelpMan setmocktime()\r\n     LOCK(cs_main);\r\n \r\n     RPCTypeCheck(request.params, {UniValue::VNUM});\r\n-    int64_t time = request.params[0].get_int64();\r\n+    const int64_t time{request.params[0].get_int64()};\r\n+    if (time < 0) {\r\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Mocktime can not be negative: %s.\", time));\r\n+    }\r\n     SetMockTime(time);\r\n     if (request.context.Has<NodeContext>()) {\r\n         for (const auto& chain_client : request.context.Get<NodeContext>().chain_clients) {\r\ndiff --git a/src/util/time.cpp b/src/util/time.cpp\r\nindex e96972fe12..d130e4e4d4 100644\r\n--- a/src/util/time.cpp\r\n+++ b/src/util/time.cpp\r\n@@ -9,6 +9,8 @@\r\n \r\n #include <util/time.h>\r\n \r\n+#include <util/check.h>\r\n+\r\n #include <atomic>\r\n #include <boost/date_time/posix_time/posix_time.hpp>\r\n #include <ctime>\r\n@@ -18,7 +20,7 @@\r\n \r\n void UninterruptibleSleep(const std::chrono::microseconds& n) { std::this_thread::sleep_for(n); }\r\n \r\n-static std::atomic<int64_t> nMockTime(0); //!< For unit testing\r\n+static std::atomic<int64_t> nMockTime(0); //!< For testing\r\n \r\n int64_t GetTime()\r\n {\r\n@@ -46,6 +48,7 @@ template std::chrono::microseconds GetTime();\r\n \r\n void SetMockTime(int64_t nMockTimeIn)\r\n {\r\n+    Assert(nMockTimeIn >= 0);\r\n     nMockTime.store(nMockTimeIn, std::memory_order_relaxed);\r\n }\r\n \r\ndiff --git a/test/functional/rpc_uptime.py b/test/functional/rpc_uptime.py\r\nindex e86f91b1d0..6177970872 100755\r\n--- a/test/functional/rpc_uptime.py\r\n+++ b/test/functional/rpc_uptime.py\r\n@@ -10,6 +10,7 @@ Test corresponds to code in rpc/server.cpp.\r\n import time\r\n \r\n from test_framework.test_framework import BitcoinTestFramework\r\n+from test_framework.util import assert_raises_rpc_error\r\n \r\n \r\n class UptimeTest(BitcoinTestFramework):\r\n@@ -18,8 +19,12 @@ class UptimeTest(BitcoinTestFramework):\r\n         self.setup_clean_chain = True\r\n \r\n     def run_test(self):\r\n+        self._test_negative_time()\r\n         self._test_uptime()\r\n \r\n+    def _test_negative_time(self):\r\n+        assert_raises_rpc_error(-8, \"Mocktime can not be negative: -1.\", self.nodes[0].setmocktime, -1)\r\n+\r\n     def _test_uptime(self):\r\n         wait_time = 10\r\n         self.nodes[0].setmocktime(int(time.time() + wait_time))\r\n```\r\n\r\n</details>",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/770626451/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/770919844",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21043#issuecomment-770919844",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21043",
    "id": 770919844,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3MDkxOTg0NA==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-01T15:00:33Z",
    "updated_at": "2021-02-01T15:00:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "> This assumes that time is negatable, which holds for system time, but not for mocktime?\r\n> \r\n> I think we should disallow negative mocktime (either here or in a follow up).\r\n\r\nGood point! I've now added your patch as a second commit. Thanks!",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/770919844/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/771608316",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21043#issuecomment-771608316",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21043",
    "id": 771608316,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3MTYwODMxNg==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-02T12:41:35Z",
    "updated_at": "2021-02-02T12:41:35Z",
    "author_association": "MEMBER",
    "body": "re-ACK 3ddbf22ed179a2db733af4b521bec5d2b13ebf4b only change is adding patch written by me",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/771608316/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/773052992",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21043#issuecomment-773052992",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21043",
    "id": 773052992,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3MzA1Mjk5Mg==",
    "user": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-04T05:59:22Z",
    "updated_at": "2021-02-04T05:59:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "ACK 3ddbf22ed179a2db733af4b521bec5d2b13ebf4b -- code review only",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/773052992/reactions",
      "total_count": 2,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 2,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/777390850",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21043#issuecomment-777390850",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21043",
    "id": 777390850,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3NzM5MDg1MA==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-11T11:43:55Z",
    "updated_at": "2021-02-11T11:43:55Z",
    "author_association": "MEMBER",
    "body": "Backported in #20901",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/777390850/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/570990693",
    "pull_request_review_id": 584367808,
    "id": 570990693,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDk5MDY5Mw==",
    "diff_hunk": "@@ -2489,6 +2489,9 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         bool fRelay = true;\n \n         vRecv >> nVersion >> nServiceInt >> nTime >> addrMe;\n+        if (nTime < 0) {\n+            nTime = 0;\n+        }",
    "path": "src/net_processing.cpp",
    "position": 6,
    "original_position": 6,
    "commit_id": "3ddbf22ed179a2db733af4b521bec5d2b13ebf4b",
    "original_commit_id": "3ddbf22ed179a2db733af4b521bec5d2b13ebf4b",
    "user": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This will fix the overflow warning indeed.\r\n\r\nHowever `0` is arbitrary choice here because `-10000`, `5` and `200` would also fix it. A negative `nTime` from the peer means he pretends that his time is pre-1970 and we just skew that to Jan 1 1970, replacing one garbage with another garbage. Then we [feed](https://github.com/bitcoin/bitcoin/blob/b829894f84839dfd581ec52383f93baa32ee2710/src/net_processing.cpp#L2651-L2653) that garbage to `AddTimeData()` which only consumes the first [200](https://github.com/bitcoin/bitcoin/blob/b829894f84839dfd581ec52383f93baa32ee2710/src/timedata.cpp#L39) samples and ignores all calls afterwards :raised_eyebrow:.\r\n\r\nSo, it makes sense to avoid calling `AddTimeData()` with input we know for sure is garbage. What about something like the following?\r\n\r\n```cpp\r\n        if (nTime > 1609459200 /* Fri Jan  1 00:00:00 UTC 2021 */) {\r\n            int64_t nTimeOffset = nTime - GetTime();\r\n            pfrom.nTimeOffset = nTimeOffset;\r\n            AddTimeData(pfrom.addr, nTimeOffset);\r\n        } else {\r\n            // Ignore garbage time.\r\n            pfrom.nTimeOffset = 0;\r\n        }\r\n```",
    "created_at": "2021-02-05T14:07:24Z",
    "updated_at": "2021-02-05T14:10:53Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21043#discussion_r570990693",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21043",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/570990693"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21043#discussion_r570990693"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21043"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/570990693/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": 2492,
    "original_start_line": 2492,
    "start_side": "RIGHT",
    "line": 2494,
    "original_line": 2494,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571057462",
    "pull_request_review_id": 584455329,
    "id": 571057462,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTA1NzQ2Mg==",
    "diff_hunk": "@@ -2489,6 +2489,9 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         bool fRelay = true;\n \n         vRecv >> nVersion >> nServiceInt >> nTime >> addrMe;\n+        if (nTime < 0) {\n+            nTime = 0;\n+        }",
    "path": "src/net_processing.cpp",
    "position": 6,
    "original_position": 6,
    "commit_id": "3ddbf22ed179a2db733af4b521bec5d2b13ebf4b",
    "original_commit_id": "3ddbf22ed179a2db733af4b521bec5d2b13ebf4b",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`1609459200` seems arbitrary here and certainly more confusing than 0. `AddTimeData` already deals with garbage values correctly, so I'd rather not add special case-code that doesn't protect against anything. ",
    "created_at": "2021-02-05T15:39:47Z",
    "updated_at": "2021-02-05T15:39:47Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21043#discussion_r571057462",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21043",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571057462"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21043#discussion_r571057462"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21043"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571057462/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": 2492,
    "original_start_line": 2492,
    "start_side": "RIGHT",
    "line": 2494,
    "original_line": 2494,
    "side": "RIGHT",
    "in_reply_to_id": 570990693
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571075353",
    "pull_request_review_id": 584479637,
    "id": 571075353,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTA3NTM1Mw==",
    "diff_hunk": "@@ -2489,6 +2489,9 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         bool fRelay = true;\n \n         vRecv >> nVersion >> nServiceInt >> nTime >> addrMe;\n+        if (nTime < 0) {\n+            nTime = 0;\n+        }",
    "path": "src/net_processing.cpp",
    "position": 6,
    "original_position": 6,
    "commit_id": "3ddbf22ed179a2db733af4b521bec5d2b13ebf4b",
    "original_commit_id": "3ddbf22ed179a2db733af4b521bec5d2b13ebf4b",
    "user": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`1609459200` draws a line between \"for sure garbage\" and \"may be garbage or may be not\", but yes, it is arbitrary in a sense that `1609459205` would do the same job.\r\n\r\n> AddTimeData already deals with garbage values correctly\r\n\r\nHow? The garbage will consume one of its 200 slots.",
    "created_at": "2021-02-05T16:05:12Z",
    "updated_at": "2021-02-05T16:05:12Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21043#discussion_r571075353",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21043",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571075353"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21043#discussion_r571075353"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21043"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571075353/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": 2492,
    "original_start_line": 2492,
    "start_side": "RIGHT",
    "line": 2494,
    "original_line": 2494,
    "side": "RIGHT",
    "in_reply_to_id": 570990693
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571078373",
    "pull_request_review_id": 584483532,
    "id": 571078373,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTA3ODM3Mw==",
    "diff_hunk": "@@ -2489,6 +2489,9 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         bool fRelay = true;\n \n         vRecv >> nVersion >> nServiceInt >> nTime >> addrMe;\n+        if (nTime < 0) {\n+            nTime = 0;\n+        }",
    "path": "src/net_processing.cpp",
    "position": 6,
    "original_position": 6,
    "commit_id": "3ddbf22ed179a2db733af4b521bec5d2b13ebf4b",
    "original_commit_id": "3ddbf22ed179a2db733af4b521bec5d2b13ebf4b",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "> How? The garbage will consume one of its 200 slots.\r\n\r\nIf you'd like to change that, it might be better to change it inside of the timedata module in a separate pull?",
    "created_at": "2021-02-05T16:09:28Z",
    "updated_at": "2021-02-05T16:09:28Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21043#discussion_r571078373",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21043",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571078373"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21043#discussion_r571078373"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21043"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571078373/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": 2492,
    "original_start_line": 2492,
    "start_side": "RIGHT",
    "line": 2494,
    "original_line": 2494,
    "side": "RIGHT",
    "in_reply_to_id": 570990693
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571091332",
    "pull_request_review_id": 584501155,
    "id": 571091332,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTA5MTMzMg==",
    "diff_hunk": "@@ -2489,6 +2489,9 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         bool fRelay = true;\n \n         vRecv >> nVersion >> nServiceInt >> nTime >> addrMe;\n+        if (nTime < 0) {\n+            nTime = 0;\n+        }",
    "path": "src/net_processing.cpp",
    "position": 6,
    "original_position": 6,
    "commit_id": "3ddbf22ed179a2db733af4b521bec5d2b13ebf4b",
    "original_commit_id": "3ddbf22ed179a2db733af4b521bec5d2b13ebf4b",
    "user": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yes, inside `AddTimeData()` would be better.\r\n\r\n`AddTimeData()` would accept absolute time as received by the peer (not offset), would check for possible garbage and return the offset (or 0 if garbage) and also would avoid occupying one of the 200 slots if garbage.\r\n\r\n```diff\r\n-        int64_t nTimeOffset = nTime - GetTime();\r\n-        pfrom.nTimeOffset = nTimeOffset;\r\n-        AddTimeData(pfrom.addr, nTimeOffset);\r\n+        pfrom.nTimeOffset = AddTimeData(pfrom.addr, nTime);\r\n```\r\n\r\nThis would make the change in this PR which checks for negative `nTime` unnecessary, so maybe makes sense to do it in this PR, rather than in a followup one, which reverts this one?",
    "created_at": "2021-02-05T16:28:37Z",
    "updated_at": "2021-02-05T16:28:37Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21043#discussion_r571091332",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21043",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571091332"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21043#discussion_r571091332"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21043"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571091332/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": 2492,
    "original_start_line": 2492,
    "start_side": "RIGHT",
    "line": 2494,
    "original_line": 2494,
    "side": "RIGHT",
    "in_reply_to_id": 570990693
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571132586",
    "pull_request_review_id": 584554480,
    "id": 571132586,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTEzMjU4Ng==",
    "diff_hunk": "@@ -2489,6 +2489,9 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         bool fRelay = true;\n \n         vRecv >> nVersion >> nServiceInt >> nTime >> addrMe;\n+        if (nTime < 0) {\n+            nTime = 0;\n+        }",
    "path": "src/net_processing.cpp",
    "position": 6,
    "original_position": 6,
    "commit_id": "3ddbf22ed179a2db733af4b521bec5d2b13ebf4b",
    "original_commit_id": "3ddbf22ed179a2db733af4b521bec5d2b13ebf4b",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "> would check for possible garbage\r\n\r\nAgain, if you think this is possible to solve, please suggest an actual patch. Be aware that honest nodes likely won't send you garbage unless by accident. Dishonest nodes (let's say with the goal of filling the vector with \"garbage\") can still do so with your proposed solution: \"1609459200 draws a line between \"for sure garbage\" and \"may be garbage or may be not\"\".",
    "created_at": "2021-02-05T17:30:28Z",
    "updated_at": "2021-02-05T17:30:28Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21043#discussion_r571132586",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21043",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571132586"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21043#discussion_r571132586"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21043"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571132586/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": 2492,
    "original_start_line": 2492,
    "start_side": "RIGHT",
    "line": 2494,
    "original_line": 2494,
    "side": "RIGHT",
    "in_reply_to_id": 570990693
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571478421",
    "pull_request_review_id": 584911558,
    "id": 571478421,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTQ3ODQyMQ==",
    "diff_hunk": "@@ -2489,6 +2489,9 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         bool fRelay = true;\n \n         vRecv >> nVersion >> nServiceInt >> nTime >> addrMe;\n+        if (nTime < 0) {\n+            nTime = 0;\n+        }",
    "path": "src/net_processing.cpp",
    "position": 6,
    "original_position": 6,
    "commit_id": "3ddbf22ed179a2db733af4b521bec5d2b13ebf4b",
    "original_commit_id": "3ddbf22ed179a2db733af4b521bec5d2b13ebf4b",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "@vasild You're correct that `0` is one of many possible choices. `0` was picked since it seemed like the least surprising and/or confusing choice. It also seemed like a reasonable number from a nothing-up-my-sleeve perspective.",
    "created_at": "2021-02-06T19:47:24Z",
    "updated_at": "2021-02-06T19:47:24Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21043#discussion_r571478421",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21043",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571478421"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21043#discussion_r571478421"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21043"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571478421/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": 2492,
    "original_start_line": 2492,
    "start_side": "RIGHT",
    "line": 2494,
    "original_line": 2494,
    "side": "RIGHT",
    "in_reply_to_id": 570990693
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/572147719",
    "pull_request_review_id": 585633692,
    "id": 572147719,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MjE0NzcxOQ==",
    "diff_hunk": "@@ -2489,6 +2489,9 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         bool fRelay = true;\n \n         vRecv >> nVersion >> nServiceInt >> nTime >> addrMe;\n+        if (nTime < 0) {\n+            nTime = 0;\n+        }",
    "path": "src/net_processing.cpp",
    "position": 6,
    "original_position": 6,
    "commit_id": "3ddbf22ed179a2db733af4b521bec5d2b13ebf4b",
    "original_commit_id": "3ddbf22ed179a2db733af4b521bec5d2b13ebf4b",
    "user": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yes, this will protect against an accidental error. Malicious peers can still send garbage by pretending it is year 2050.\r\n\r\nFeel free to ignore this, if you see no merit (on top of this PR):\r\n\r\n<details>\r\n<summary>[patch] avoid integer underflow and protect time data samples from definite garbage</summary>\r\n\r\n```diff\r\ndiff --git i/src/timedata.h w/src/timedata.h\r\nindex b165ecde2..c39c0a90d 100644\r\n--- i/src/timedata.h\r\n+++ w/src/timedata.h\r\n@@ -70,9 +70,16 @@ public:\r\n     }\r\n };\r\n \r\n /** Functions to keep track of adjusted P2P time */\r\n int64_t GetTimeOffset();\r\n int64_t GetAdjustedTime();\r\n-void AddTimeData(const CNetAddr& ip, int64_t nTime);\r\n+\r\n+/**\r\n+ * Consume a time sample from a peer.\r\n+ * @param[in] ip The address of the peer, repeated samples from the same peer are ignored.\r\n+ * @param[in] nTime The time of the peer (number of seconds size 1970).\r\n+ * @return the difference between the peer's time and our time in seconds or 0 if nTime is nonsensical.\r\n+ */\r\n+int64_t AddTimeData(const CNetAddr& ip, int64_t nTime);\r\n \r\n #endif // BITCOIN_TIMEDATA_H\r\ndiff --git i/src/net_processing.cpp w/src/net_processing.cpp\r\nindex 8936b8109..fda3b5abd 100644\r\n--- i/src/net_processing.cpp\r\n+++ w/src/net_processing.cpp\r\n@@ -2486,15 +2486,12 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\r\n         int nVersion;\r\n         std::string cleanSubVer;\r\n         int starting_height = -1;\r\n         bool fRelay = true;\r\n \r\n         vRecv >> nVersion >> nServiceInt >> nTime >> addrMe;\r\n-        if (nTime < 0) {\r\n-            nTime = 0;\r\n-        }\r\n         nServices = ServiceFlags(nServiceInt);\r\n         if (!pfrom.IsInboundConn())\r\n         {\r\n             m_connman.SetServices(pfrom.addr, nServices);\r\n         }\r\n         if (pfrom.ExpectServicesFromConn() && !HasAllDesirableServiceFlags(nServices))\r\n@@ -2648,15 +2645,13 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\r\n \r\n         LogPrint(BCLog::NET, \"receive version message: %s: version %d, blocks=%d, us=%s, txrelay=%d, peer=%d%s\\n\",\r\n                   cleanSubVer, pfrom.nVersion,\r\n                   peer->m_starting_height, addrMe.ToString(), fRelay, pfrom.GetId(),\r\n                   remoteAddr);\r\n \r\n-        int64_t nTimeOffset = nTime - GetTime();\r\n-        pfrom.nTimeOffset = nTimeOffset;\r\n-        AddTimeData(pfrom.addr, nTimeOffset);\r\n+        pfrom.nTimeOffset = AddTimeData(pfrom.addr, nTime);\r\n \r\n         // If the peer is old enough to have the old alert system, send it the final alert.\r\n         if (greatest_common_version <= 70012) {\r\n             CDataStream finalAlert(ParseHex(\"60010000000000000000000000ffffff7f00000000ffffff7ffeffff7f01ffffff7f00000000ffffff7f00ffffff7f002f555247454e543a20416c657274206b657920636f6d70726f6d697365642c2075706772616465207265717569726564004630440220653febd6410f470f6bae11cad19c48413becb1ac2c17f908fd0fd53bdc3abd5202206d0e9c96fe88d4a0f01ed9dedae2b6f9e00da94cad0fecaae66ecf689bf71b50\"), SER_NETWORK, PROTOCOL_VERSION);\r\n             m_connman.PushMessage(&pfrom, CNetMsgMaker(greatest_common_version).Make(\"alert\", finalAlert));\r\n         }\r\ndiff --git i/src/timedata.cpp w/src/timedata.cpp\r\nindex 354092752..3195baafc 100644\r\n--- i/src/timedata.cpp\r\n+++ w/src/timedata.cpp\r\n@@ -35,21 +35,28 @@ int64_t GetAdjustedTime()\r\n {\r\n     return GetTime() + GetTimeOffset();\r\n }\r\n \r\n #define BITCOIN_TIMEDATA_MAX_SAMPLES 200\r\n \r\n-void AddTimeData(const CNetAddr& ip, int64_t nOffsetSample)\r\n+int64_t AddTimeData(const CNetAddr& ip, int64_t nTime)\r\n {\r\n+    if (nTime < 1609459200 /* Fri Jan  1 00:00:00 UTC 2021 */) {\r\n+        // Do not consume nonsensical times as we have a limited number of slots.\r\n+        return 0;\r\n+    }\r\n+\r\n+    const int64_t nOffsetSample = nTime - GetTime();\r\n+\r\n     LOCK(g_timeoffset_mutex);\r\n     // Ignore duplicates\r\n     static std::set<CNetAddr> setKnown;\r\n     if (setKnown.size() == BITCOIN_TIMEDATA_MAX_SAMPLES)\r\n-        return;\r\n+        return nOffsetSample;\r\n     if (!setKnown.insert(ip).second)\r\n-        return;\r\n+        return nOffsetSample;\r\n \r\n     // Add data\r\n     static CMedianFilter<int64_t> vTimeOffsets(BITCOIN_TIMEDATA_MAX_SAMPLES, 0);\r\n     vTimeOffsets.input(nOffsetSample);\r\n     LogPrint(BCLog::NET, \"added time data, samples %d, offset %+d (%+d minutes)\\n\", vTimeOffsets.size(), nOffsetSample, nOffsetSample / 60);\r\n \r\n@@ -102,7 +109,9 @@ void AddTimeData(const CNetAddr& ip, int64_t nOffsetSample)\r\n                 LogPrint(BCLog::NET, \"%+d  \", n); /* Continued */\r\n             }\r\n             LogPrint(BCLog::NET, \"|  \"); /* Continued */\r\n             LogPrint(BCLog::NET, \"nTimeOffset = %+d  (%+d minutes)\\n\", nTimeOffset, nTimeOffset / 60);\r\n         }\r\n     }\r\n+\r\n+    return nOffsetSample;\r\n }\r\ndiff --git i/src/test/timedata_tests.cpp w/src/test/timedata_tests.cpp\r\nindex 1dcee23bb..552d4fc63 100644\r\n--- i/src/test/timedata_tests.cpp\r\n+++ w/src/test/timedata_tests.cpp\r\n@@ -6,12 +6,13 @@\r\n #include <netaddress.h>\r\n #include <noui.h>\r\n #include <test/util/logging.h>\r\n #include <test/util/setup_common.h>\r\n #include <timedata.h>\r\n #include <util/string.h>\r\n+#include <util/time.h>\r\n #include <util/translation.h>\r\n #include <warnings.h>\r\n \r\n #include <string>\r\n \r\n #include <boost/test/unit_test.hpp>\r\n@@ -46,13 +47,13 @@ BOOST_AUTO_TEST_CASE(util_MedianFilter)\r\n static void MultiAddTimeData(int n, int64_t offset)\r\n {\r\n     static int cnt = 0;\r\n     for (int i = 0; i < n; ++i) {\r\n         CNetAddr addr;\r\n         addr.SetInternal(ToString(++cnt));\r\n-        AddTimeData(addr, offset);\r\n+        AddTimeData(addr, GetTime() + offset);\r\n     }\r\n }\r\n \r\n \r\n BOOST_AUTO_TEST_CASE(addtimedata)\r\n {\r\n```\r\n</details>\r\n",
    "created_at": "2021-02-08T15:41:38Z",
    "updated_at": "2021-02-08T15:41:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21043#discussion_r572147719",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21043",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/572147719"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21043#discussion_r572147719"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21043"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/572147719/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": 2492,
    "original_start_line": 2492,
    "start_side": "RIGHT",
    "line": 2494,
    "original_line": 2494,
    "side": "RIGHT",
    "in_reply_to_id": 570990693
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/572161836",
    "pull_request_review_id": 585652167,
    "id": 572161836,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MjE2MTgzNg==",
    "diff_hunk": "@@ -2489,6 +2489,9 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         bool fRelay = true;\n \n         vRecv >> nVersion >> nServiceInt >> nTime >> addrMe;\n+        if (nTime < 0) {\n+            nTime = 0;\n+        }",
    "path": "src/net_processing.cpp",
    "position": 6,
    "original_position": 6,
    "commit_id": "3ddbf22ed179a2db733af4b521bec5d2b13ebf4b",
    "original_commit_id": "3ddbf22ed179a2db733af4b521bec5d2b13ebf4b",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "@vasild Thanks for providing a patch, but I'll leave this PR unchanged to avoid expanding the scope beyond fixing the UBSan warning. I want to keep this PR minimal and laser focused in order to make review trivial :)",
    "created_at": "2021-02-08T15:58:54Z",
    "updated_at": "2021-02-08T16:00:29Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21043#discussion_r572161836",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21043",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/572161836"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21043#discussion_r572161836"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21043"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/572161836/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": 2492,
    "original_start_line": 2492,
    "start_side": "RIGHT",
    "line": 2494,
    "original_line": 2494,
    "side": "RIGHT",
    "in_reply_to_id": 570990693
  }
]