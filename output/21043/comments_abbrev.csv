MarcoFalke,2021-02-01 07:09:33,"\n\n<details><summary>patch</summary>\n\n```diff\ncommit eea2bf75949fd3b391711b9092e01a1843245db2\nAuthor: MarcoFalke <falke.marco@gmail.com>\nDate:   Mon Feb 1 08:03:24 2021 +0100\n\n    util: Disallow negative mocktime\n\ndiff --git a/src/rpc/misc.cpp b/src/rpc/misc.cpp\nindex b75a7b8d26..38a0bddddb 100644\n--- a/src/rpc/misc.cpp\n+++ b/src/rpc/misc.cpp\n@@ -365,13 +365,13 @@ stat",https://github.com/bitcoin/bitcoin/pull/21043#issuecomment-770626451,770626451,
practicalswift,2021-02-01 15:00:33,"> This assumes that time is negatable, which holds for system time, but not for mocktime?\n> \n> I think we should disallow negative mocktime (either here or in a follow up).\n\nGood point! I've now added your patch as a second commit. Thanks!",https://github.com/bitcoin/bitcoin/pull/21043#issuecomment-770919844,770919844,
MarcoFalke,2021-02-02 12:41:35,re-ACK 3ddbf22ed179a2db733af4b521bec5d2b13ebf4b only change is adding patch written by me,https://github.com/bitcoin/bitcoin/pull/21043#issuecomment-771608316,771608316,
ajtowns,2021-02-04 05:59:22,ACK 3ddbf22ed179a2db733af4b521bec5d2b13ebf4b -- code review only,https://github.com/bitcoin/bitcoin/pull/21043#issuecomment-773052992,773052992,
MarcoFalke,2021-02-11 11:43:55,Backported in #20901,https://github.com/bitcoin/bitcoin/pull/21043#issuecomment-777390850,777390850,
vasild,2021-02-05 14:07:24,"This will fix the overflow warning indeed.\n\nHowever `0` is arbitrary choice here because `-10000`, `5` and `200` would also fix it. A negative `nTime` from the peer means he pretends that his time is pre-1970 and we just skew that to Jan 1 1970, replacing one garbage with another garbage. Then we [feed](https://github.com/bitcoin/bitcoin/blob/b829894f84839dfd581ec52383f93baa32ee2710/src/net_pr",https://github.com/bitcoin/bitcoin/pull/21043#discussion_r570990693,570990693,src/net_processing.cpp
MarcoFalke,2021-02-05 15:39:47,"`1609459200` seems arbitrary here and certainly more confusing than 0. `AddTimeData` already deals with garbage values correctly, so I'd rather not add special case-code that doesn't protect against anything. ",https://github.com/bitcoin/bitcoin/pull/21043#discussion_r571057462,571057462,src/net_processing.cpp
vasild,2021-02-05 16:05:12,"`1609459200` draws a line between ""for sure garbage"" and ""may be garbage or may be not"", but yes, it is arbitrary in a sense that `1609459205` would do the same job.\n\n> AddTimeData already deals with garbage values correctly\n\nHow? The garbage will consume one of its 200 slots.",https://github.com/bitcoin/bitcoin/pull/21043#discussion_r571075353,571075353,src/net_processing.cpp
MarcoFalke,2021-02-05 16:09:28,"> How? The garbage will consume one of its 200 slots.\n\nIf you'd like to change that, it might be better to change it inside of the timedata module in a separate pull?",https://github.com/bitcoin/bitcoin/pull/21043#discussion_r571078373,571078373,src/net_processing.cpp
vasild,2021-02-05 16:28:37,"Yes, inside `AddTimeData()` would be better.\n\n`AddTimeData()` would accept absolute time as received by the peer (not offset), would check for possible garbage and return the offset (or 0 if garbage) and also would avoid occupying one of the 200 slots if garbage.\n\n```diff\n-        int64_t nTimeOffset = nTime - GetTime();\n-        pfrom.nTimeOffset = nTimeOffset;\n-        AddTimeData(",https://github.com/bitcoin/bitcoin/pull/21043#discussion_r571091332,571091332,src/net_processing.cpp
MarcoFalke,2021-02-05 17:30:28,"> would check for possible garbage\n\nAgain, if you think this is possible to solve, please suggest an actual patch. Be aware that honest nodes likely won't send you garbage unless by accident. Dishonest nodes (let's say with the goal of filling the vector with ""garbage"") can still do so with your proposed solution: ""1609459200 draws a line between ""for sure garbage"" and ""may be garbage or may b",https://github.com/bitcoin/bitcoin/pull/21043#discussion_r571132586,571132586,src/net_processing.cpp
practicalswift,2021-02-06 19:47:24,@vasild You're correct that `0` is one of many possible choices. `0` was picked since it seemed like the least surprising and/or confusing choice. It also seemed like a reasonable number from a nothing-up-my-sleeve perspective.,https://github.com/bitcoin/bitcoin/pull/21043#discussion_r571478421,571478421,src/net_processing.cpp
vasild,2021-02-08 15:41:38,"Yes, this will protect against an accidental error. Malicious peers can still send garbage by pretending it is year 2050.\n\nFeel free to ignore this, if you see no merit (on top of this PR):\n\n<details>\n<summary>[patch] avoid integer underflow and protect time data samples from definite garbage</summary>\n\n```diff\ndiff --git i/src/timedata.h w/src/timedata.h\nindex b165ecde2..c39c0a9",https://github.com/bitcoin/bitcoin/pull/21043#discussion_r572147719,572147719,src/net_processing.cpp
practicalswift,2021-02-08 15:58:54,"@vasild Thanks for providing a patch, but I'll leave this PR unchanged to avoid expanding the scope beyond fixing the UBSan warning. I want to keep this PR minimal and laser focused in order to make review trivial :)",https://github.com/bitcoin/bitcoin/pull/21043#discussion_r572161836,572161836,src/net_processing.cpp
