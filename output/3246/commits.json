[
  {
    "sha": "a6099ef319a73e2255dca77065600abb22c4f5f8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNjA5OWVmMzE5YTczZTIyNTVkY2E3NzA2NTYwMGFiYjIyYzRmNWY4",
    "commit": {
      "author": {
        "name": "sje",
        "email": "sje3000@gmail.com",
        "date": "2013-10-29T11:29:44Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2013-11-13T13:54:29Z"
      },
      "message": "Issue #1865 - Clean up RPC help messages\n\nBased on the proposal, update the help message of rpc methods\n- strings arguments are in double quotes rather than square brackets\n- numeric arguments have no quotes (and no default value)\n- optional parameters are surrounded by round brackets\n- json arguments are strings but don't use double quotes\n\nAdded 3 sections for the details\n- Arguments: lists each argument, it's type, required or not, a default, and a description\n- Result: The method result, with json format if applicable, type, and a description\n- Examples: examples calls using bitcoin-cli and curl for json rpc call\n\nProblems\n- maybe this is too verbose\n- lines might be too long\n- description are not good or complete\n- examples may be too much",
      "tree": {
        "sha": "4b02c150d44351ceac018a0557667f242ea68f22",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4b02c150d44351ceac018a0557667f242ea68f22"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a6099ef319a73e2255dca77065600abb22c4f5f8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6099ef319a73e2255dca77065600abb22c4f5f8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a6099ef319a73e2255dca77065600abb22c4f5f8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6099ef319a73e2255dca77065600abb22c4f5f8/comments",
    "author": {
      "login": "sje1",
      "id": 1531155,
      "node_id": "MDQ6VXNlcjE1MzExNTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1531155?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sje1",
      "html_url": "https://github.com/sje1",
      "followers_url": "https://api.github.com/users/sje1/followers",
      "following_url": "https://api.github.com/users/sje1/following{/other_user}",
      "gists_url": "https://api.github.com/users/sje1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sje1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sje1/subscriptions",
      "organizations_url": "https://api.github.com/users/sje1/orgs",
      "repos_url": "https://api.github.com/users/sje1/repos",
      "events_url": "https://api.github.com/users/sje1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sje1/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2830a9051d19fa8ba29e26ef0440107a13b15975",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2830a9051d19fa8ba29e26ef0440107a13b15975",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2830a9051d19fa8ba29e26ef0440107a13b15975"
      }
    ],
    "stats": {
      "total": 1546,
      "additions": 1350,
      "deletions": 196
    },
    "files": [
      {
        "sha": "c715f13fd24d330ea937462d501059b36b0910ff",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 3,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6099ef319a73e2255dca77065600abb22c4f5f8/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6099ef319a73e2255dca77065600abb22c4f5f8/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=a6099ef319a73e2255dca77065600abb22c4f5f8",
        "patch": "@@ -189,8 +189,13 @@ Value help(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() > 1)\n         throw runtime_error(\n-            \"help [command]\\n\"\n-            \"List commands, or get help for a command.\");\n+            \"help ( \\\"command\\\" )\\n\"\n+            \"\\nList all commands, or get help for a specified command.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"command\\\"     (string, optional) The command to get help on\\n\"\n+            \"\\nResult:\\n\"\n+            \"\\\"text\\\"     (string) The help text\\n\"\n+        );\n \n     string strCommand;\n     if (params.size() > 0)\n@@ -206,7 +211,7 @@ Value stop(const Array& params, bool fHelp)\n     if (fHelp || params.size() > 1)\n         throw runtime_error(\n             \"stop\\n\"\n-            \"Stop Bitcoin server.\");\n+            \"\\nStop Bitcoin server.\");\n     // Shutdown will take long enough that the response should get back\n     StartShutdown();\n     return \"Bitcoin server stopping\";"
      },
      {
        "sha": "9025ff92160aa651edbe04e8d8db67ef3592767e",
        "filename": "src/bitcoinrpc.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6099ef319a73e2255dca77065600abb22c4f5f8/src/bitcoinrpc.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6099ef319a73e2255dca77065600abb22c4f5f8/src/bitcoinrpc.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.h?ref=a6099ef319a73e2255dca77065600abb22c4f5f8",
        "patch": "@@ -153,6 +153,9 @@ extern json_spirit::Value ValueFromAmount(int64_t amount);\n extern double GetDifficulty(const CBlockIndex* blockindex = NULL);\n extern std::string HexBits(unsigned int nBits);\n extern std::string HelpRequiringPassphrase();\n+extern std::string HelpExampleCli(std::string methodname, std::string args);\n+extern std::string HelpExampleRpc(std::string methodname, std::string args);\n+\n extern void EnsureWalletIsUnlocked();\n \n extern json_spirit::Value getconnectioncount(const json_spirit::Array& params, bool fHelp); // in rpcnet.cpp"
      },
      {
        "sha": "6f0b353e3404dc08748814435f92a2f22830b350",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 141,
        "deletions": 16,
        "changes": 157,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6099ef319a73e2255dca77065600abb22c4f5f8/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6099ef319a73e2255dca77065600abb22c4f5f8/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=a6099ef319a73e2255dca77065600abb22c4f5f8",
        "patch": "@@ -85,7 +85,13 @@ Value getblockcount(const Array& params, bool fHelp)\n     if (fHelp || params.size() != 0)\n         throw runtime_error(\n             \"getblockcount\\n\"\n-            \"Returns the number of blocks in the longest block chain.\");\n+            \"\\nReturns the number of blocks in the longest block chain.\\n\"\n+            \"\\nResult:\\n\"\n+            \"n    (numeric) The current block count\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getblockcount\", \"\")\n+            + HelpExampleRpc(\"getblockcount\", \"\")\n+        );\n \n     return chainActive.Height();\n }\n@@ -95,7 +101,13 @@ Value getbestblockhash(const Array& params, bool fHelp)\n     if (fHelp || params.size() != 0)\n         throw runtime_error(\n             \"getbestblockhash\\n\"\n-            \"Returns the hash of the best (tip) block in the longest block chain.\");\n+            \"\\nReturns the hash of the best (tip) block in the longest block chain.\\n\"\n+            \"\\nResult\\n\"\n+            \"\\\"hex\\\"      (string) the block hash hex encoded\\n\"\n+            \"\\nExamples\\n\"\n+            + HelpExampleCli(\"getbestblockhash\", \"\")\n+            + HelpExampleRpc(\"getbestblockhash\", \"\")\n+        );\n \n     return chainActive.Tip()->GetBlockHash().GetHex();\n }\n@@ -105,7 +117,13 @@ Value getdifficulty(const Array& params, bool fHelp)\n     if (fHelp || params.size() != 0)\n         throw runtime_error(\n             \"getdifficulty\\n\"\n-            \"Returns the proof-of-work difficulty as a multiple of the minimum difficulty.\");\n+            \"\\nReturns the proof-of-work difficulty as a multiple of the minimum difficulty.\\n\"\n+            \"\\nResult:\\n\"\n+            \"n.nnn       (numeric) the proof-of-work difficulty as a multiple of the minimum difficulty.\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getdifficulty\", \"\")\n+            + HelpExampleRpc(\"getdifficulty\", \"\")\n+        );\n \n     return GetDifficulty();\n }\n@@ -115,8 +133,16 @@ Value settxfee(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 1)\n         throw runtime_error(\n-            \"settxfee <amount btc/kb>\\n\"\n-            \"<amount> is a real and is rounded to the nearest 0.00000001 btc per kb\");\n+            \"settxfee amount\\n\"\n+            \"\\nSet the transaction fee. 'amount' is a real and is rounded to the nearest 0.00000001\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. amount         (numeric, required) The transaction fee in btc rounded to the nearest 0.00000001\\n\"\n+            \"\\nResult\\n\"\n+            \"true|false        (boolean) Returns true if successful\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"settxfee\", \"0.00001\")\n+            + HelpExampleRpc(\"settxfee\", \"0.00001\")\n+        );\n \n     // Amount\n     int64_t nAmount = 0;\n@@ -132,7 +158,16 @@ Value getrawmempool(const Array& params, bool fHelp)\n     if (fHelp || params.size() != 0)\n         throw runtime_error(\n             \"getrawmempool\\n\"\n-            \"Returns all transaction ids in memory pool.\");\n+            \"\\nReturns all transaction ids in memory pool as a json array of string transaction ids.\\n\"\n+            \"\\nResult:\\n\"\n+            \"[                       (json array of string)\\n\"\n+            \"  \\\"transactionid\\\"     (string) The transaction id\\n\"\n+            \"  ,...\\n\"\n+            \"]\\n\"\n+            \"\\nExamples\\n\"\n+            + HelpExampleCli(\"getrawmempool\", \"\")\n+            + HelpExampleRpc(\"getrawmempool\", \"\")\n+        );\n \n     vector<uint256> vtxid;\n     mempool.queryHashes(vtxid);\n@@ -148,8 +183,16 @@ Value getblockhash(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n-            \"getblockhash <index>\\n\"\n-            \"Returns hash of block in best-block-chain at <index>.\");\n+            \"getblockhash index\\n\"\n+            \"\\nReturns hash of block in best-block-chain at index provided.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. index         (numeric, required) The block index\\n\"\n+            \"\\nResult:\\n\"\n+            \"\\\"hash\\\"         (string) The block hash\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getblockhash\", \"1000\")\n+            + HelpExampleRpc(\"getblockhash\", \"1000\")\n+        );\n \n     int nHeight = params[0].get_int();\n     if (nHeight < 0 || nHeight > chainActive.Height())\n@@ -163,9 +206,36 @@ Value getblock(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 2)\n         throw runtime_error(\n-            \"getblock <hash> [verbose=true]\\n\"\n-            \"If verbose is false, returns a string that is serialized, hex-encoded data for block <hash>.\\n\"\n-            \"If verbose is true, returns an Object with information about block <hash>.\"\n+            \"getblock \\\"hash\\\" ( verbose )\\n\"\n+            \"\\nIf verbose is false, returns a string that is serialized, hex-encoded data for block 'hash'.\\n\"\n+            \"If verbose is true, returns an Object with information about block <hash>.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"hash\\\"          (string, required) The block hash\\n\"\n+            \"2. verbose           (boolean, optional, default=true) true for a json object, false for the hex encoded data\\n\"\n+            \"\\nResult (for verbose = true):\\n\"\n+            \"{\\n\"\n+            \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n+            \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations\\n\"\n+            \"  \\\"size\\\" : n,            (numeric) The block size\\n\"\n+            \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n+            \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n+            \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n+            \"  \\\"tx\\\" : [               (array of string) The transaction ids\\n\"\n+            \"     \\\"transactionid\\\"     (string) The transaction id\\n\"\n+            \"     ,...\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n+            \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n+            \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n+            \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n+            \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"\n+            \"}\\n\"\n+            \"\\nResult (for verbose=false):\\n\"\n+            \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'hash'.\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getblock\", \"\\\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\\\"\")\n+            + HelpExampleRpc(\"getblock\", \"\\\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\\\"\")\n         );\n \n     std::string strHash = params[0].get_str();\n@@ -198,7 +268,22 @@ Value gettxoutsetinfo(const Array& params, bool fHelp)\n     if (fHelp || params.size() != 0)\n         throw runtime_error(\n             \"gettxoutsetinfo\\n\"\n-            \"Returns statistics about the unspent transaction output set.\");\n+            \"\\nReturns statistics about the unspent transaction output set.\\n\"\n+            \"Note this call may take some time.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"height\\\":n,     (numeric) The current block height (index)\\n\"\n+            \"  \\\"bestblock\\\": \\\"hex\\\",   (string) the best block hash hex\\n\"\n+            \"  \\\"transactions\\\": n,      (numeric) The number of transactions\\n\"\n+            \"  \\\"txouts\\\": n,            (numeric) The number of output transactions\\n\"\n+            \"  \\\"bytes_serialized\\\": n,  (numeric) The serialized size\\n\"\n+            \"  \\\"hash_serialized\\\": \\\"hash\\\",   (string) The serialized hash\\n\"\n+            \"  \\\"total_amount\\\": x.xxx          (numeric) The total amount\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"gettxoutsetinfo\", \"\")\n+            + HelpExampleRpc(\"gettxoutsetinfo\", \"\")\n+        );\n \n     Object ret;\n \n@@ -219,8 +304,39 @@ Value gettxout(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 2 || params.size() > 3)\n         throw runtime_error(\n-            \"gettxout <txid> <n> [includemempool=true]\\n\"\n-            \"Returns details about an unspent transaction output.\");\n+            \"gettxout \\\"txid\\\" n ( includemempool )\\n\"\n+            \"\\nReturns details about an unspent transaction output.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"txid\\\"       (string, required) The transaction id\\n\"\n+            \"2. n              (numeric, required) vout value\\n\"\n+            \"3. includemempool  (boolean, optional) Whether to included the mem pool\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"bestblock\\\" : \\\"hash\\\",    (string) the block hash\\n\"\n+            \"  \\\"confirmations\\\" : n,       (numeric) The number of confirmations\\n\"\n+            \"  \\\"value\\\" : x.xxx,           (numeric) The transaction value in btc\\n\"\n+            \"  \\\"scriptPubKey\\\" : {         (json object)\\n\"\n+            \"     \\\"asm\\\" : \\\"code\\\",       (string) \\n\"\n+            \"     \\\"hex\\\" : \\\"hex\\\",        (string) \\n\"\n+            \"     \\\"reqSigs\\\" : n,          (numeric) Number of required signatures\\n\"\n+            \"     \\\"type\\\" : \\\"pubkeyhash\\\", (string) The type, eg pubkeyhash\\n\"\n+            \"     \\\"addresses\\\" : [          (array of string) array of bitcoin addresses\\n\"\n+            \"        \\\"bitcoinaddress\\\"     (string) bitcoin address\\n\"\n+            \"        ,...\\n\"\n+            \"     ]\\n\"\n+            \"  },\\n\"\n+            \"  \\\"version\\\" : n,            (numeric) The version\\n\"\n+            \"  \\\"coinbase\\\" : true|false   (boolean) Coinbase or not\\n\"\n+            \"}\\n\"\n+\n+            \"\\nExamples:\\n\"\n+            \"\\nGet unspent transactions\\n\"\n+            + HelpExampleCli(\"listunspent\", \"\") +\n+            \"\\nView the details\\n\"\n+            + HelpExampleCli(\"gettxout\", \"\\\"txid\\\" 1\") +\n+            \"\\nAs a json rpc call\\n\"\n+            + HelpExampleRpc(\"gettxout\", \"\\\"txid\\\", 1\")\n+        );\n \n     Object ret;\n \n@@ -266,8 +382,17 @@ Value verifychain(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() > 2)\n         throw runtime_error(\n-            \"verifychain [check level] [num blocks]\\n\"\n-            \"Verifies blockchain database.\");\n+            \"verifychain ( checklevel numblocks )\\n\"\n+            \"\\nVerifies blockchain database.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. checklevel   (numeric, optional, default=3) The level\\n\"\n+            \"2. numblocks    (numeric, optional, 288) The number of blocks\\n\"\n+            \"\\nResult:\\n\"\n+            \"true|false       (boolean) Verified or not\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"verifychain\", \"\")\n+            + HelpExampleRpc(\"verifychain\", \"\")\n+        );\n \n     int nCheckLevel = GetArg(\"-checklevel\", 3);\n     int nCheckDepth = GetArg(\"-checkblocks\", 288);"
      },
      {
        "sha": "53cec9a6fa90a98f2300773c2ec60ebaeb518c8b",
        "filename": "src/rpcdump.cpp",
        "status": "modified",
        "additions": 48,
        "deletions": 8,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6099ef319a73e2255dca77065600abb22c4f5f8/src/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6099ef319a73e2255dca77065600abb22c4f5f8/src/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcdump.cpp?ref=a6099ef319a73e2255dca77065600abb22c4f5f8",
        "patch": "@@ -71,8 +71,22 @@ Value importprivkey(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 3)\n         throw runtime_error(\n-            \"importprivkey <bitcoinprivkey> [label] [rescan=true]\\n\"\n-            \"Adds a private key (as returned by dumpprivkey) to your wallet.\");\n+            \"importprivkey \\\"bitcoinprivkey\\\" ( \\\"label\\\" rescan )\\n\"\n+            \"\\nAdds a private key (as returned by dumpprivkey) to your wallet.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"bitcoinprivkey\\\"   (string, required) The private key (see dumpprivkey)\\n\"\n+            \"2. \\\"label\\\"            (string, optional) an optional label\\n\"\n+            \"3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nDump a private key\\n\"\n+            + HelpExampleCli(\"dumpprivkey\", \"\\\"myaddress\\\"\") +\n+            \"\\nImport the private key\\n\"\n+            + HelpExampleCli(\"importprivkey\", \"\\\"mykey\\\"\") +\n+            \"\\nImport using a label\\n\"\n+            + HelpExampleCli(\"importprivkey\", \"\\\"mykey\\\" \\\"testing\\\" false\") +\n+            \"\\nAs a json rpc call\\n\"\n+            + HelpExampleRpc(\"importprivkey\", \"\\\"mykey\\\", \\\"testing\\\", false\")\n+        );\n \n     string strSecret = params[0].get_str();\n     string strLabel = \"\";\n@@ -118,8 +132,18 @@ Value importwallet(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n-            \"importwallet <filename>\\n\"\n-            \"Imports keys from a wallet dump file (see dumpwallet).\");\n+            \"importwallet \\\"filename\\\"\\n\"\n+            \"\\nImports keys from a wallet dump file (see dumpwallet).\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"filename\\\"    (string, required) The wallet file\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nDump the wallet\\n\"\n+            + HelpExampleCli(\"dumpwallet\", \"\\\"test\\\"\") +\n+            \"\\nImport the wallet\\n\"\n+            + HelpExampleCli(\"importwallet\", \"\\\"test\\\"\") +\n+            \"\\nImport using the json rpc call\\n\"\n+            + HelpExampleRpc(\"importwallet\", \"\\\"test\\\"\")\n+        );\n \n     EnsureWalletIsUnlocked();\n \n@@ -198,8 +222,18 @@ Value dumpprivkey(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n-            \"dumpprivkey <bitcoinaddress>\\n\"\n-            \"Reveals the private key corresponding to <bitcoinaddress>.\");\n+            \"dumpprivkey \\\"bitcoinaddress\\\"\\n\"\n+            \"\\nReveals the private key corresponding to 'bitcoinaddress'.\\n\"\n+            \"Then the importprivkey can be used with this output\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"bitcoinaddress\\\"   (string, required) The bitcoin address for the private key\\n\"\n+            \"\\nResult:\\n\"\n+            \"\\\"key\\\"                (string) The private key\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"dumpprivkey\", \"\\\"myaddress\\\"\")\n+            + HelpExampleCli(\"importprivkey\", \"\\\"mykey\\\"\")\n+            + HelpExampleRpc(\"dumpprivkey\", \"\\\"myaddress\\\"\")\n+        );\n \n     EnsureWalletIsUnlocked();\n \n@@ -221,8 +255,14 @@ Value dumpwallet(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n-            \"dumpwallet <filename>\\n\"\n-            \"Dumps all wallet keys in a human-readable format.\");\n+            \"dumpwallet \\\"filename\\\"\\n\"\n+            \"\\nDumps all wallet keys in a human-readable format.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"filename\\\"    (string, required) The filename\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"dumpwallet\", \"\\\"test\\\"\")\n+            + HelpExampleRpc(\"dumpwallet\", \"\\\"test\\\"\")\n+        );\n \n     EnsureWalletIsUnlocked();\n "
      },
      {
        "sha": "e4fa7ed853ca19e6836655b067ea136f6706eb04",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 155,
        "deletions": 37,
        "changes": 192,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6099ef319a73e2255dca77065600abb22c4f5f8/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6099ef319a73e2255dca77065600abb22c4f5f8/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=a6099ef319a73e2255dca77065600abb22c4f5f8",
        "patch": "@@ -82,10 +82,19 @@ Value getnetworkhashps(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() > 2)\n         throw runtime_error(\n-            \"getnetworkhashps [blocks] [height]\\n\"\n-            \"Returns the estimated network hashes per second based on the last 120 blocks.\\n\"\n+            \"getnetworkhashps ( blocks height )\\n\"\n+            \"\\nReturns the estimated network hashes per second based on the last n blocks.\\n\"\n             \"Pass in [blocks] to override # of blocks, -1 specifies since last difficulty change.\\n\"\n-            \"Pass in [height] to estimate the network speed at the time when a certain block was found.\");\n+            \"Pass in [height] to estimate the network speed at the time when a certain block was found.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. blocks     (numeric, optional, default=120) The number of blocks, or -1 for blocks since last difficulty change.\\n\"\n+            \"2. height     (numeric, optional, default=-1) To estimate at the time of the given height.\\n\"\n+            \"\\nResult:\\n\"\n+            \"x             (numeric) Hashes per second estimated\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getnetworkhashps\", \"\")\n+            + HelpExampleRpc(\"getnetworkhashps\", \"\")\n+       );\n \n     return GetNetworkHashPS(params.size() > 0 ? params[0].get_int() : 120, params.size() > 1 ? params[1].get_int() : -1);\n }\n@@ -96,7 +105,15 @@ Value getgenerate(const Array& params, bool fHelp)\n     if (fHelp || params.size() != 0)\n         throw runtime_error(\n             \"getgenerate\\n\"\n-            \"Returns true or false.\");\n+            \"\\nReturn if the server is set to generate coins or not. The default is false.\\n\"\n+            \"It is set with the command line argument -gen (or bitcoin.conf setting gen)\\n\"\n+            \"It can also be set with the setgenerate call.\\n\"\n+            \"\\nResult\\n\"\n+            \"true|false      (boolean) If the server is set to generate coins or not\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getgenerate\", \"\")\n+            + HelpExampleRpc(\"getgenerate\", \"\")\n+        );\n \n     if (!pMiningKey)\n         return false;\n@@ -109,9 +126,23 @@ Value setgenerate(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 2)\n         throw runtime_error(\n-            \"setgenerate <generate> [genproclimit]\\n\"\n-            \"<generate> is true or false to turn generation on or off.\\n\"\n-            \"Generation is limited to [genproclimit] processors, -1 is unlimited.\");\n+            \"setgenerate generate ( genproclimit )\\n\"\n+            \"\\nSet 'generate' true or false to turn generation on or off.\\n\"\n+            \"Generation is limited to 'genproclimit' processors, -1 is unlimited.\\n\"\n+            \"See the getgenerate call for the current setting.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. generate         (boolean, required) Set to true to turn on generation, off to turn off.\\n\"\n+            \"2. genproclimit     (numeric, optional) Set the processor limit for when generation is on. Can be -1 for unlimited.\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nSet the generation on with a limit of one processor\\n\"\n+            + HelpExampleCli(\"setgenerate\", \"true 1\") +\n+            \"\\nCheck the setting\\n\"\n+            + HelpExampleCli(\"getgenerate\", \"\") +\n+            \"\\nTurn off generation\\n\"\n+            + HelpExampleCli(\"setgenerate\", \"false\") +\n+            \"\\nUsing json rpc\\n\"\n+            + HelpExampleRpc(\"setgenerate\", \"true, 1\")\n+        );\n \n     bool fGenerate = true;\n     if (params.size() > 0)\n@@ -137,7 +168,14 @@ Value gethashespersec(const Array& params, bool fHelp)\n     if (fHelp || params.size() != 0)\n         throw runtime_error(\n             \"gethashespersec\\n\"\n-            \"Returns a recent hashes per second performance measurement while generating.\");\n+            \"\\nReturns a recent hashes per second performance measurement while generating.\\n\"\n+            \"See the getgenerate and setgenerate calls to turn generation on and off.\\n\"\n+            \"\\nResult:\\n\"\n+            \"n            (numeric) The recent hashes per second when generation is on (will return 0 if generation is off)\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"gethashespersec\", \"\")\n+            + HelpExampleRpc(\"gethashespersec\", \"\")\n+        );\n \n     if (GetTimeMillis() - nHPSTimerStart > 8000)\n         return (boost::int64_t)0;\n@@ -150,7 +188,24 @@ Value getmininginfo(const Array& params, bool fHelp)\n     if (fHelp || params.size() != 0)\n         throw runtime_error(\n             \"getmininginfo\\n\"\n-            \"Returns an object containing mining-related information.\");\n+            \"\\nReturns a json object containing mining-related information.\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"blocks\\\": nnn,             (numeric) The current block\\n\"\n+            \"  \\\"currentblocksize\\\": nnn,   (numeric) The last block size\\n\"\n+            \"  \\\"currentblocktx\\\": nnn,     (numeric) The last block transaction\\n\"\n+            \"  \\\"difficulty\\\": xxx.xxxxx    (numeric) The current difficulty\\n\"\n+            \"  \\\"errors\\\": \\\"...\\\"          (string) Current errors\\n\"\n+            \"  \\\"generate\\\": true|false     (boolean) If the generation is on or off (see getgenerate or setgenerate calls)\\n\"\n+            \"  \\\"genproclimit\\\": n          (numeric) The processor limit for generation. -1 if no generation. (see getgenerate or setgenerate calls)\\n\"\n+            \"  \\\"hashespersec\\\": n          (numeric) The hashes per second of the generation, or 0 if no generation.\\n\"\n+            \"  \\\"pooledtx\\\": n              (numeric) The size of the mem pool\\n\"\n+            \"  \\\"testnet\\\": true|false      (boolean) If using testnet or not\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getmininginfo\", \"\")\n+            + HelpExampleRpc(\"getmininginfo\", \"\")\n+        );\n \n     Object obj;\n     obj.push_back(Pair(\"blocks\",           (int)chainActive.Height()));\n@@ -172,13 +227,24 @@ Value getwork(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() > 1)\n         throw runtime_error(\n-            \"getwork [data]\\n\"\n-            \"If [data] is not specified, returns formatted hash data to work on:\\n\"\n-            \"  \\\"midstate\\\" : precomputed hash state after hashing the first half of the data (DEPRECATED)\\n\" // deprecated\n-            \"  \\\"data\\\" : block data\\n\"\n-            \"  \\\"hash1\\\" : formatted hash buffer for second hash (DEPRECATED)\\n\" // deprecated\n-            \"  \\\"target\\\" : little endian hash target\\n\"\n-            \"If [data] is specified, tries to solve the block and returns true if it was successful.\");\n+            \"getwork ( \\\"data\\\" )\\n\"\n+            \"\\nIf 'data' is not specified, it returns the formatted hash data to work on.\\n\"\n+            \"If 'data' is specified, tries to solve the block and returns true if it was successful.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"data\\\"       (string, optional) The hex encoded data to solve\\n\"\n+            \"\\nResult (when 'data' is not specified):\\n\"\n+            \"{\\n\"\n+            \"  \\\"midstate\\\" : \\\"xxxx\\\",   (string) The precomputed hash state after hashing the first half of the data (DEPRECATED)\\n\" // deprecated\n+            \"  \\\"data\\\" : \\\"xxxxx\\\",      (string) The block data\\n\"\n+            \"  \\\"hash1\\\" : \\\"xxxxx\\\",     (string) The formatted hash buffer for second hash (DEPRECATED)\\n\" // deprecated\n+            \"  \\\"target\\\" : \\\"xxxx\\\"      (string) The little endian hash target\\n\"\n+            \"}\\n\"\n+            \"\\nResult (when 'data' is specified):\\n\"\n+            \"true|false       (boolean) If solving the block specified in the 'data' was successfull\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getwork\", \"\")\n+            + HelpExampleRpc(\"getwork\", \"\")\n+        );\n \n     if (vNodes.empty())\n         throw JSONRPCError(RPC_CLIENT_NOT_CONNECTED, \"Bitcoin is not connected!\");\n@@ -286,23 +352,63 @@ Value getblocktemplate(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() > 1)\n         throw runtime_error(\n-            \"getblocktemplate [params]\\n\"\n-            \"Returns data needed to construct a block to work on:\\n\"\n-            \"  \\\"version\\\" : block version\\n\"\n-            \"  \\\"previousblockhash\\\" : hash of current highest block\\n\"\n-            \"  \\\"transactions\\\" : contents of non-coinbase transactions that should be included in the next block\\n\"\n-            \"  \\\"coinbaseaux\\\" : data that should be included in coinbase\\n\"\n-            \"  \\\"coinbasevalue\\\" : maximum allowable input to coinbase transaction, including the generation award and transaction fees\\n\"\n-            \"  \\\"target\\\" : hash target\\n\"\n-            \"  \\\"mintime\\\" : minimum timestamp appropriate for next block\\n\"\n-            \"  \\\"curtime\\\" : current timestamp\\n\"\n-            \"  \\\"mutable\\\" : list of ways the block template may be changed\\n\"\n-            \"  \\\"noncerange\\\" : range of valid nonces\\n\"\n-            \"  \\\"sigoplimit\\\" : limit of sigops in blocks\\n\"\n-            \"  \\\"sizelimit\\\" : limit of block size\\n\"\n-            \"  \\\"bits\\\" : compressed target of next block\\n\"\n-            \"  \\\"height\\\" : height of the next block\\n\"\n-            \"See https://en.bitcoin.it/wiki/BIP_0022 for full specification.\");\n+            \"getblocktemplate ( \\\"jsonrequestobject\\\" )\\n\"\n+            \"\\nIf the request parameters include a 'mode' key, that is used to explicitly select between the default 'template' request or a 'proposal'.\\n\"\n+            \"It returns data needed to construct a block to work on.\\n\"\n+            \"See https://en.bitcoin.it/wiki/BIP_0022 for full specification.\\n\"\n+\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"jsonrequestobject\\\"       (string, optional) A json object in the following spec\\n\"\n+            \"     {\\n\"\n+            \"       \\\"mode\\\":\\\"template\\\"    (string, optional) This must be set to \\\"template\\\" or omitted\\n\"\n+            \"       \\\"capabilities\\\":[       (array, optional) A list of strings\\n\"\n+            \"           \\\"support\\\"           (string) client side supported feature, 'longpoll', 'coinbasetxn', 'coinbasevalue', 'proposal', 'serverlist', 'workid'\\n\"\n+            \"           ,...\\n\"\n+            \"         ]\\n\"\n+            \"     }\\n\"\n+            \"\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"version\\\" : n,                    (numeric) The block version\\n\"\n+            \"  \\\"previousblockhash\\\" : \\\"xxxx\\\",    (string) The hash of current highest block\\n\"\n+            \"  \\\"transactions\\\" : [                (array) contents of non-coinbase transactions that should be included in the next block\\n\"\n+            \"      {\\n\"\n+            \"         \\\"data\\\" : \\\"xxxx\\\",          (string) transaction data encoded in hexadecimal (byte-for-byte)\\n\"\n+            \"         \\\"hash\\\" : \\\"xxxx\\\",          (string) hash/id encoded in little-endian hexadecimal\\n\"\n+            \"         \\\"depends\\\" : [              (array) array of numbers \\n\"\n+            \"             n                        (numeric) transactions before this one (by 1-based index in 'transactions' list) that must be present in the final block if this one is\\n\"\n+            \"             ,...\\n\"\n+            \"         ],\\n\"\n+            \"         \\\"fee\\\": n,                   (numeric) difference in value between transaction inputs and outputs (in Satoshis); for coinbase transactions, this is a negative Number of the total collected block fees (ie, not including the block subsidy); if key is not present, fee is unknown and clients MUST NOT assume there isn't one\\n\"\n+            \"         \\\"sigops\\\" : n,               (numeric) total number of SigOps, as counted for purposes of block limits; if key is not present, sigop count is unknown and clients MUST NOT assume there aren't any\\n\"\n+            \"         \\\"required\\\" : true|false     (boolean) if provided and true, this transaction must be in the final block\\n\"\n+            \"      }\\n\"\n+            \"      ,...\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"coinbaseaux\\\" : {                  (json object) data that should be included in the coinbase's scriptSig content\\n\"\n+            \"      \\\"flags\\\" : \\\"flags\\\"            (string) \\n\"\n+            \"  },\\n\"\n+            \"  \\\"coinbasevalue\\\" : n,               (numeric) maximum allowable input to coinbase transaction, including the generation award and transaction fees (in Satoshis)\\n\"\n+            \"  \\\"coinbasetxn\\\" : { ... },           (json object) information for coinbase transaction\\n\"\n+            \"  \\\"target\\\" : \\\"xxxx\\\",               (string) The hash target\\n\"\n+            \"  \\\"mintime\\\" : xxx,                   (numeric) The minimum timestamp appropriate for next block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"mutable\\\" : [                      (array of string) list of ways the block template may be changed \\n\"\n+            \"     \\\"value\\\"                         (string) A way the block template may be changed, e.g. 'time', 'transactions', 'prevblock'\\n\"\n+            \"     ,...\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"noncerange\\\" : \\\"00000000ffffffff\\\",   (string) A range of valid nonces\\n\"\n+            \"  \\\"sigoplimit\\\" : n,                 (numeric) limit of sigops in blocks\\n\"\n+            \"  \\\"sizelimit\\\" : n,                  (numeric) limit of block size\\n\"\n+            \"  \\\"curtime\\\" : ttt,                  (numeric) current timestamp in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"bits\\\" : \\\"xxx\\\",                 (string) compressed target of next block\\n\"\n+            \"  \\\"height\\\" : n                      (numeric) The height of the next block\\n\"\n+            \"}\\n\"\n+\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getblocktemplate\", \"\")\n+            + HelpExampleRpc(\"getblocktemplate\", \"\")\n+         );\n \n     std::string strMode = \"template\";\n     if (params.size() > 0)\n@@ -434,10 +540,22 @@ Value submitblock(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 2)\n         throw runtime_error(\n-            \"submitblock <hex data> [optional-params-obj]\\n\"\n-            \"[optional-params-obj] parameter is currently ignored.\\n\"\n-            \"Attempts to submit new block to network.\\n\"\n-            \"See https://en.bitcoin.it/wiki/BIP_0022 for full specification.\");\n+            \"submitblock \\\"hexdata\\\" ( \\\"jsonparametersobject\\\" )\\n\"\n+            \"\\nAttempts to submit new block to network.\\n\"\n+            \"The 'jsonparametersobject' parameter is currently ignored.\\n\"\n+            \"See https://en.bitcoin.it/wiki/BIP_0022 for full specification.\\n\"\n+\n+            \"\\nArguments\\n\"\n+            \"1. \\\"hexdata\\\"    (string, required) the hex-encoded block data to submit\\n\"\n+            \"2. \\\"jsonparametersobject\\\"     (string, optional) object of optional parameters\\n\"\n+            \"    {\\n\"\n+            \"      \\\"workid\\\" : \\\"id\\\"    (string, optional) if the server provided a workid, it MUST be included with submissions\\n\"\n+            \"    }\\n\"\n+            \"\\nResult:\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"submitblock\", \"\\\"mydata\\\"\")\n+            + HelpExampleRpc(\"submitblock\", \"\\\"mydata\\\"\")\n+        );\n \n     vector<unsigned char> blockData(ParseHex(params[0].get_str()));\n     CDataStream ssBlock(blockData, SER_NETWORK, PROTOCOL_VERSION);"
      },
      {
        "sha": "9f8dea80b05cd6d36cfdd8290a7024d5f08d3c74",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 89,
        "deletions": 11,
        "changes": 100,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6099ef319a73e2255dca77065600abb22c4f5f8/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6099ef319a73e2255dca77065600abb22c4f5f8/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=a6099ef319a73e2255dca77065600abb22c4f5f8",
        "patch": "@@ -24,7 +24,13 @@ Value getconnectioncount(const Array& params, bool fHelp)\n     if (fHelp || params.size() != 0)\n         throw runtime_error(\n             \"getconnectioncount\\n\"\n-            \"Returns the number of connections to other nodes.\");\n+            \"\\nReturns the number of connections to other nodes.\\n\"\n+            \"\\nbResult:\\n\"\n+            \"n          (numeric) The connection count\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getconnectioncount\", \"\")\n+            + HelpExampleRpc(\"getconnectioncount\", \"\")\n+        );\n \n     LOCK(cs_vNodes);\n     return (int)vNodes.size();\n@@ -35,9 +41,13 @@ Value ping(const Array& params, bool fHelp)\n     if (fHelp || params.size() != 0)\n         throw runtime_error(\n             \"ping\\n\"\n-            \"Requests that a ping be sent to all other nodes, to measure ping time.\\n\"\n+            \"\\nRequests that a ping be sent to all other nodes, to measure ping time.\\n\"\n             \"Results provided in getpeerinfo, pingtime and pingwait fields are decimal seconds.\\n\"\n-            \"Ping command is handled in queue with all other commands, so it measures processing backlog, not just network ping.\");\n+            \"Ping command is handled in queue with all other commands, so it measures processing backlog, not just network ping.\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"ping\", \"\")\n+            + HelpExampleRpc(\"ping\", \"\")\n+        );\n \n     // Request that each node send a ping during next message processing pass\n     LOCK(cs_vNodes);\n@@ -66,7 +76,34 @@ Value getpeerinfo(const Array& params, bool fHelp)\n     if (fHelp || params.size() != 0)\n         throw runtime_error(\n             \"getpeerinfo\\n\"\n-            \"Returns data about each connected network node.\");\n+            \"\\nReturns data about each connected network node as a json array of objects.\\n\"\n+            \"\\nbResult:\\n\"\n+            \"[\\n\"\n+            \"  {\\n\"\n+            \"    \\\"addr\\\":\\\"host:port\\\",      (string) The ip address and port of the peer\\n\"\n+            \"    \\\"addrlocal\\\":\\\"ip:port\\\",   (string) local address\\n\"\n+            \"    \\\"services\\\":\\\"00000001\\\",   (string) The services\\n\"\n+            \"    \\\"lastsend\\\": ttt,           (numeric) The time in seconds since epoch (Jan 1 1970 GMT) of the last send\\n\"\n+            \"    \\\"lastrecv\\\": ttt,           (numeric) The time in seconds since epoch (Jan 1 1970 GMT) of the last receive\\n\"\n+            \"    \\\"bytessent\\\": n,            (numeric) The total bytes sent\\n\"\n+            \"    \\\"bytesrecv\\\": n,            (numeric) The total bytes received\\n\"\n+            \"    \\\"conntime\\\": ttt,           (numeric) The connection time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"    \\\"pingtime\\\": n,             (numeric) ping time\\n\"\n+            \"    \\\"pingwait\\\": n,             (numeric) ping wait\\n\"\n+            \"    \\\"version\\\": v,              (numeric) The peer version, such as 7001\\n\"\n+            \"    \\\"subver\\\": \\\"/Satoshi:0.8.5/\\\",  (string) The string version\\n\"\n+            \"    \\\"inbound\\\": true|false,     (boolean) Inbound (true) or Outbound (false)\\n\"\n+            \"    \\\"startingheight\\\": n,       (numeric) The starting height (block) of the peer\\n\"\n+            \"    \\\"banscore\\\": n,              (numeric) The ban score (stats.nMisbehavior)\\n\"\n+            \"    \\\"syncnode\\\" : true|false     (booleamn) if sync node\\n\"\n+            \"  }\\n\"\n+            \"  ,...\\n\"\n+            \"}\\n\"\n+\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getpeerinfo\", \"\")\n+            + HelpExampleRpc(\"getpeerinfo\", \"\")\n+        );\n \n     vector<CNodeStats> vstats;\n     CopyNodeStats(vstats);\n@@ -110,8 +147,16 @@ Value addnode(const Array& params, bool fHelp)\n     if (fHelp || params.size() != 2 ||\n         (strCommand != \"onetry\" && strCommand != \"add\" && strCommand != \"remove\"))\n         throw runtime_error(\n-            \"addnode <node> <add|remove|onetry>\\n\"\n-            \"Attempts add or remove <node> from the addnode list or try a connection to <node> once.\");\n+            \"addnode \\\"node\\\" \\\"add|remove|onetry\\\"\\n\"\n+            \"\\nAttempts add or remove a node from the addnode list.\\n\"\n+            \"Or try a connection to a node once.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"node\\\"     (string, required) The node (see getpeerinfo for nodes)\\n\"\n+            \"2. \\\"command\\\"  (string, required) 'add' to add a node to the list, 'remove' to remove a node from the list, 'onetry' to try a connection to the node once\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"addnode\", \"\\\"192.168.0.6:8333\\\" \\\"onetry\\\"\")\n+            + HelpExampleRpc(\"addnode\", \"\\\"192.168.0.6:8333\\\", \\\"onetry\\\"\")\n+        );\n \n     string strNode = params[0].get_str();\n \n@@ -148,11 +193,34 @@ Value getaddednodeinfo(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 2)\n         throw runtime_error(\n-            \"getaddednodeinfo <dns> [node]\\n\"\n-            \"Returns information about the given added node, or all added nodes\\n\"\n+            \"getaddednodeinfo dns ( \\\"node\\\" )\\n\"\n+            \"\\nReturns information about the given added node, or all added nodes\\n\"\n             \"(note that onetry addnodes are not listed here)\\n\"\n             \"If dns is false, only a list of added nodes will be provided,\\n\"\n-            \"otherwise connected information will also be available.\");\n+            \"otherwise connected information will also be available.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. dns        (boolean, required) If false, only a list of added nodes will be provided, otherwise connected information will also be available.\\n\"\n+            \"2. \\\"node\\\"   (string, optional) If provided, return information about this specific node, otherwise all nodes are returned.\\n\"\n+            \"\\nResult:\\n\"\n+            \"[\\n\"\n+            \"  {\\n\"\n+            \"    \\\"addednode\\\" : \\\"192.168.0.201\\\",   (string) The node ip address\\n\"\n+            \"    \\\"connected\\\" : true|false,          (boolean) If connected\\n\"\n+            \"    \\\"addresses\\\" : [\\n\"\n+            \"       {\\n\"\n+            \"         \\\"address\\\" : \\\"192.168.0.201:8333\\\",  (string) The bitcoin server host and port\\n\"\n+            \"         \\\"connected\\\" : \\\"outbound\\\"           (string) connection, inbound or outbound\\n\"\n+            \"       }\\n\"\n+            \"       ,...\\n\"\n+            \"     ]\\n\"\n+            \"  }\\n\"\n+            \"  ,...\\n\"\n+            \"]\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddednodeinfo\", \"true\")\n+            + HelpExampleCli(\"getaddednodeinfo\", \"true \\\"192.168.0.201\\\"\")\n+            + HelpExampleRpc(\"getaddednodeinfo\", \"true, \\\"192.168.0.201\\\"\")\n+        );\n \n     bool fDns = params[0].get_bool();\n \n@@ -241,8 +309,18 @@ Value getnettotals(const Array& params, bool fHelp)\n     if (fHelp || params.size() > 0)\n         throw runtime_error(\n             \"getnettotals\\n\"\n-            \"Returns information about network traffic, including bytes in, bytes out,\\n\"\n-            \"and current time.\");\n+            \"\\nReturns information about network traffic, including bytes in, bytes out,\\n\"\n+            \"and current time.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"totalbytesrecv\\\": n,   (numeric) Total bytes received\\n\"\n+            \"  \\\"totalbytessent\\\": n,   (numeric) Total Bytes sent\\n\"\n+            \"  \\\"timemillis\\\": t        (numeric) Total cpu time\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getnettotals\", \"\")\n+            + HelpExampleRpc(\"getnettotals\", \"\")\n+       );\n \n     Object obj;\n     obj.push_back(Pair(\"totalbytesrecv\", static_cast< boost::uint64_t>(CNode::GetTotalBytesRecv())));"
      },
      {
        "sha": "2225e216d390945e4a8f8d1cb54013070ad95cf0",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 246,
        "deletions": 30,
        "changes": 276,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6099ef319a73e2255dca77065600abb22c4f5f8/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6099ef319a73e2255dca77065600abb22c4f5f8/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=a6099ef319a73e2255dca77065600abb22c4f5f8",
        "patch": "@@ -109,11 +109,64 @@ Value getrawtransaction(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 2)\n         throw runtime_error(\n-            \"getrawtransaction <txid> [verbose=0]\\n\"\n-            \"If verbose=0, returns a string that is\\n\"\n-            \"serialized, hex-encoded data for <txid>.\\n\"\n-            \"If verbose is non-zero, returns an Object\\n\"\n-            \"with information about <txid>.\");\n+            \"getrawtransaction \\\"txid\\\" ( verbose )\\n\"\n+            \"\\nReturn the raw transaction data.\\n\"\n+            \"\\nIf verbose=0, returns a string that is serialized, hex-encoded data for 'txid'.\\n\"\n+            \"If verbose is non-zero, returns an Object with information about 'txid'.\\n\"\n+\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"txid\\\"      (string, required) The transaction id\\n\"\n+            \"2. verbose       (numeric, optional, default=0) If 0, return a string, other return a json object\\n\"\n+\n+            \"\\nResult (if verbose is not set or set to 0):\\n\"\n+            \"\\\"data\\\"      (string) The serialized, hex-encoded data for 'txid'\\n\"\n+\n+            \"\\nResult (if verbose > 0):\\n\"\n+            \"{\\n\"\n+            \"  \\\"hex\\\" : \\\"data\\\",       (string) The serialized, hex-encoded data for 'txid'\\n\"\n+            \"  \\\"txid\\\" : \\\"id\\\",        (string) The transaction id (same as provided)\\n\"\n+            \"  \\\"version\\\" : n,          (numeric) The version\\n\"\n+            \"  \\\"locktime\\\" : ttt,       (numeric) The lock time\\n\"\n+            \"  \\\"vin\\\" : [               (array of json objects)\\n\"\n+            \"     {\\n\"\n+            \"       \\\"txid\\\": \\\"id\\\",    (string) The transaction id\\n\"\n+            \"       \\\"vout\\\": n,         (numeric) \\n\"\n+            \"       \\\"scriptSig\\\": {     (json object) The script\\n\"\n+            \"         \\\"asm\\\": \\\"asm\\\",  (string) asm\\n\"\n+            \"         \\\"hex\\\": \\\"hex\\\"   (string) hex\\n\"\n+            \"       },\\n\"\n+            \"       \\\"sequence\\\": n      (numeric) The script sequence number\\n\"\n+            \"     }\\n\"\n+            \"     ,...\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"vout\\\" : [              (array of json objects)\\n\"\n+            \"     {\\n\"\n+            \"       \\\"value\\\" : x.xxx,            (numeric) The value in btc\\n\"\n+            \"       \\\"n\\\" : n,                    (numeric) index\\n\"\n+            \"       \\\"scriptPubKey\\\" : {          (json object)\\n\"\n+            \"         \\\"asm\\\" : \\\"asm\\\",          (string) the asm\\n\"\n+            \"         \\\"hex\\\" : \\\"hex\\\",          (string) the hex\\n\"\n+            \"         \\\"reqSigs\\\" : n,            (numeric) The required sigs\\n\"\n+            \"         \\\"type\\\" : \\\"pubkeyhash\\\",  (string) The type, eg 'pubkeyhash'\\n\"\n+            \"         \\\"addresses\\\" : [           (json array of string)\\n\"\n+            \"           \\\"bitcoinaddress\\\"        (string) bitcoin address\\n\"\n+            \"           ,...\\n\"\n+            \"         ]\\n\"\n+            \"       }\\n\"\n+            \"     }\\n\"\n+            \"     ,...\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"blockhash\\\" : \\\"hash\\\",   (string) the block hash\\n\"\n+            \"  \\\"confirmations\\\" : n,      (numeric) The confirmations\\n\"\n+            \"  \\\"time\\\" : ttt,             (numeric) The transaction time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"blocktime\\\" : ttt         (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"}\\n\"\n+\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getrawtransaction\", \"\\\"mytxid\\\"\")\n+            + HelpExampleCli(\"getrawtransaction\", \"\\\"mytxid\\\" 1\")\n+            + HelpExampleRpc(\"getrawtransaction\", \"\\\"mytxid\\\", 1\")\n+        );\n \n     uint256 hash = ParseHashV(params[0], \"parameter 1\");\n \n@@ -143,12 +196,39 @@ Value listunspent(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() > 3)\n         throw runtime_error(\n-            \"listunspent [minconf=1] [maxconf=9999999]  [\\\"address\\\",...]\\n\"\n-            \"Returns array of unspent transaction outputs\\n\"\n+            \"listunspent ( minconf maxconf  [\\\"address\\\",...] )\\n\"\n+            \"\\nReturns array of unspent transaction outputs\\n\"\n             \"with between minconf and maxconf (inclusive) confirmations.\\n\"\n-            \"Optionally filtered to only include txouts paid to specified addresses.\\n\"\n+            \"Optionally filter to only include txouts paid to specified addresses.\\n\"\n             \"Results are an array of Objects, each of which has:\\n\"\n-            \"{txid, vout, scriptPubKey, amount, confirmations}\");\n+            \"{txid, vout, scriptPubKey, amount, confirmations}\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. minconf          (numeric, optional, default=1) The minimum confirmationsi to filter\\n\"\n+            \"2. maxconf          (numeric, optional, default=9999999) The maximum confirmations to filter\\n\"\n+            \"3. \\\"addresses\\\"    (string) A json array of bitcoin addresses to filter\\n\"\n+            \"    [\\n\"\n+            \"      \\\"address\\\"   (string) bitcoin address\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"\\nResult\\n\"\n+            \"[                   (array of json object)\\n\"\n+            \"  {\\n\"\n+            \"    \\\"txid\\\" : \\\"txid\\\",        (string) the transaction id \\n\"\n+            \"    \\\"vout\\\" : n,               (numeric) the vout value\\n\"\n+            \"    \\\"address\\\" : \\\"address\\\",  (string) the bitcoin address\\n\"\n+            \"    \\\"account\\\" : \\\"account\\\",  (string) The associated account, or \\\"\\\" for the default account\\n\"\n+            \"    \\\"scriptPubKey\\\" : \\\"key\\\", (string) the script key\\n\"\n+            \"    \\\"amount\\\" : x.xxx,         (numeric) the transaction amount in btc\\n\"\n+            \"    \\\"confirmations\\\" : n       (numeric) The number of confirmations\\n\"\n+            \"  }\\n\"\n+            \"  ,...\\n\"\n+            \"]\\n\"\n+\n+            \"\\nExamples\\n\"\n+            + HelpExampleCli(\"listunspent\", \"\")\n+            + HelpExampleCli(\"listunspent\", \"6 9999999 \\\"[\\\\\\\"1PGFqEzfmQch1gKD3ra4k18PNj3tTUUSqg\\\\\\\",\\\\\\\"1LtvqCaApEdUGFkpKMM4MstjcaL4dKg8SP\\\\\\\"]\\\"\")\n+            + HelpExampleRpc(\"listunspent\", \"6, 9999999 \\\"[\\\\\\\"1PGFqEzfmQch1gKD3ra4k18PNj3tTUUSqg\\\\\\\",\\\\\\\"1LtvqCaApEdUGFkpKMM4MstjcaL4dKg8SP\\\\\\\"]\\\"\")\n+        );\n \n     RPCTypeCheck(params, list_of(int_type)(int_type)(array_type));\n \n@@ -230,13 +310,34 @@ Value createrawtransaction(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 2)\n         throw runtime_error(\n-            \"createrawtransaction [{\\\"txid\\\":txid,\\\"vout\\\":n},...] {address:amount,...}\\n\"\n-            \"Create a transaction spending given inputs\\n\"\n-            \"(array of objects containing transaction id and output number),\\n\"\n-            \"sending to given address(es).\\n\"\n+            \"createrawtransaction [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n},...] {\\\"address\\\":amount,...}\\n\"\n+            \"\\nCreate a transaction spending the given inputs and sending to the given addresses.\\n\"\n             \"Returns hex-encoded raw transaction.\\n\"\n             \"Note that the transaction's inputs are not signed, and\\n\"\n-            \"it is not stored in the wallet or transmitted to the network.\");\n+            \"it is not stored in the wallet or transmitted to the network.\\n\"\n+\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"transactions\\\"        (string, required) A json array of json objects\\n\"\n+            \"     [\\n\"\n+            \"       {\\n\"\n+            \"         \\\"txid\\\":\\\"id\\\",  (string, required) The transaction id\\n\"\n+            \"         \\\"vout\\\":n        (numeric, required) The output number\\n\"\n+            \"       }\\n\"\n+            \"       ,...\\n\"\n+            \"     ]\\n\"\n+            \"2. \\\"addresses\\\"           (string, required) a json object with addresses as keys and amounts as values\\n\"\n+            \"    {\\n\"\n+            \"      \\\"address\\\": x.xxx   (numeric, required) The key is the bitcoin address, the value is the btc amount\\n\"\n+            \"      ,...\\n\"\n+            \"    }\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"\\\"transaction\\\"            (string) hex string of the transaction\\n\"\n+\n+            \"\\nExamples\\n\"\n+            + HelpExampleCli(\"createrawtransaction\", \"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\" \\\"{\\\\\\\"address\\\\\\\":0.01}\\\"\")\n+            + HelpExampleRpc(\"createrawtransaction\", \"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\", \\\"{\\\\\\\"address\\\\\\\":0.01}\\\"\")\n+        );\n \n     RPCTypeCheck(params, list_of(array_type)(obj_type));\n \n@@ -290,8 +391,57 @@ Value decoderawtransaction(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n-            \"decoderawtransaction <hex string>\\n\"\n-            \"Return a JSON object representing the serialized, hex-encoded transaction.\");\n+            \"decoderawtransaction \\\"hexstring\\\"\\n\"\n+            \"\\nReturn a JSON object representing the serialized, hex-encoded transaction.\\n\"\n+\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"txid\\\"      (string, required) The transaction hex string\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"hex\\\" : \\\"data\\\",       (string) The serialized, hex-encoded data for 'txid'\\n\"\n+            \"  \\\"txid\\\" : \\\"id\\\",        (string) The transaction id (same as provided)\\n\"\n+            \"  \\\"version\\\" : n,          (numeric) The version\\n\"\n+            \"  \\\"locktime\\\" : ttt,       (numeric) The lock time\\n\"\n+            \"  \\\"vin\\\" : [               (array of json objects)\\n\"\n+            \"     {\\n\"\n+            \"       \\\"txid\\\": \\\"id\\\",    (string) The transaction id\\n\"\n+            \"       \\\"vout\\\": n,         (numeric) The output number\\n\"\n+            \"       \\\"scriptSig\\\": {     (json object) The script\\n\"\n+            \"         \\\"asm\\\": \\\"asm\\\",  (string) asm\\n\"\n+            \"         \\\"hex\\\": \\\"hex\\\"   (string) hex\\n\"\n+            \"       },\\n\"\n+            \"       \\\"sequence\\\": n     (numeric) The script sequence number\\n\"\n+            \"     }\\n\"\n+            \"     ,...\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"vout\\\" : [             (array of json objects)\\n\"\n+            \"     {\\n\"\n+            \"       \\\"value\\\" : x.xxx,            (numeric) The value in btc\\n\"\n+            \"       \\\"n\\\" : n,                    (numeric) index\\n\"\n+            \"       \\\"scriptPubKey\\\" : {          (json object)\\n\"\n+            \"         \\\"asm\\\" : \\\"asm\\\",          (string) the asm\\n\"\n+            \"         \\\"hex\\\" : \\\"hex\\\",          (string) the hex\\n\"\n+            \"         \\\"reqSigs\\\" : n,            (numeric) The required sigs\\n\"\n+            \"         \\\"type\\\" : \\\"pubkeyhash\\\",  (string) The type, eg 'pubkeyhash'\\n\"\n+            \"         \\\"addresses\\\" : [           (json array of string)\\n\"\n+            \"           \\\"12tvKAXCxZjSmdNbao16dKXC8tRWfcF5oc\\\"   (string) bitcoin address\\n\"\n+            \"           ,...\\n\"\n+            \"         ]\\n\"\n+            \"       }\\n\"\n+            \"     }\\n\"\n+            \"     ,...\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"blockhash\\\" : \\\"hash\\\",   (string) the block hash\\n\"\n+            \"  \\\"confirmations\\\" : n,      (numeric) The confirmations\\n\"\n+            \"  \\\"time\\\" : ttt,             (numeric) The transaction time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"blocktime\\\" : ttt         (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"}\\n\"\n+\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"decoderawtransaction\", \"\\\"hexstring\\\"\")\n+            + HelpExampleRpc(\"decoderawtransaction\", \"\\\"hexstring\\\"\")\n+        );\n \n     vector<unsigned char> txData(ParseHexV(params[0], \"argument\"));\n     CDataStream ssData(txData, SER_NETWORK, PROTOCOL_VERSION);\n@@ -313,8 +463,26 @@ Value decodescript(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n-            \"decodescript <hex string>\\n\"\n-            \"Decode a hex-encoded script.\");\n+            \"decodescript \\\"hex\\\"\\n\"\n+            \"\\nDecode a hex-encoded script.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"hex\\\"     (string) the hex encoded script\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"asm\\\":\\\"asm\\\",   (string) Script public key\\n\"\n+            \"  \\\"hex\\\":\\\"hex\\\",   (string) hex encoded public key\\n\"\n+            \"  \\\"type\\\":\\\"type\\\", (string) The output type\\n\"\n+            \"  \\\"reqSigs\\\": n,    (numeric) The required signatures\\n\"\n+            \"  \\\"addresses\\\": [   (json array of string)\\n\"\n+            \"     \\\"address\\\"     (string) bitcoin address\\n\"\n+            \"     ,...\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"p2sh\\\",\\\"address\\\" (string) script address\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"decodescript\", \"\\\"hexstring\\\"\")\n+            + HelpExampleRpc(\"decodescript\", \"\\\"hexstring\\\"\")\n+        );\n \n     RPCTypeCheck(params, list_of(str_type));\n \n@@ -336,18 +504,49 @@ Value signrawtransaction(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 4)\n         throw runtime_error(\n-            \"signrawtransaction <hex string> [{\\\"txid\\\":txid,\\\"vout\\\":n,\\\"scriptPubKey\\\":hex,\\\"redeemScript\\\":hex},...] [<privatekey1>,...] [sighashtype=\\\"ALL\\\"]\\n\"\n-            \"Sign inputs for raw transaction (serialized, hex-encoded).\\n\"\n-            \"Second optional argument (may be null) is an array of previous transaction outputs that\\n\"\n+            \"signrawtransaction \\\"hexstring\\\" ( [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n,\\\"scriptPubKey\\\":\\\"hex\\\",\\\"redeemScript\\\":\\\"hex\\\"},...] [\\\"privatekey1\\\",...] sighashtype )\\n\"\n+            \"\\nSign inputs for raw transaction (serialized, hex-encoded).\\n\"\n+            \"The second optional argument (may be null) is an array of previous transaction outputs that\\n\"\n             \"this transaction depends on but may not yet be in the block chain.\\n\"\n-            \"Third optional argument (may be null) is an array of base58-encoded private\\n\"\n+            \"The third optional argument (may be null) is an array of base58-encoded private\\n\"\n             \"keys that, if given, will be the only keys used to sign the transaction.\\n\"\n-            \"Fourth optional argument is a string that is one of six values; ALL, NONE, SINGLE or\\n\"\n-            \"ALL|ANYONECANPAY, NONE|ANYONECANPAY, SINGLE|ANYONECANPAY.\\n\"\n-            \"Returns json object with keys:\\n\"\n-            \"  hex : raw transaction with signature(s) (hex-encoded string)\\n\"\n-            \"  complete : 1 if transaction has a complete set of signature (0 if not)\"\n-            + HelpRequiringPassphrase());\n+            + HelpRequiringPassphrase() + \"\\n\"\n+\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"hexstring\\\"     (string, required) The transaction hex string\\n\"\n+            \"2. \\\"prevtxs\\\"       (string, optional) An json array of previous dependent transaction outputs\\n\"\n+            \"     [               (json array of json objects)\\n\"\n+            \"       {\\n\"\n+            \"         \\\"txid\\\":\\\"id\\\",             (string, required) The transaction id\\n\"\n+            \"         \\\"vout\\\":n,                  (numeric, required) The output number\\n\"\n+            \"         \\\"scriptPubKey\\\": \\\"hex\\\",   (string, required) script key\\n\"\n+            \"         \\\"redeemScript\\\": \\\"hex\\\"    (string, required) redeem script\\n\"\n+            \"       }\\n\"\n+            \"       ,...\\n\"\n+            \"    ]\\n\"\n+            \"3. \\\"privatekeys\\\"     (string, optional) A json array of base58-encoded private keys for signing\\n\"\n+            \"    [                  (json array of strings)\\n\"\n+            \"      \\\"privatekey\\\"   (string) private key in base58-encoding\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"4. \\\"sighashtype\\\"     (string, optional, default=ALL) The signature has type. Must be one of\\n\"\n+            \"       \\\"ALL\\\"\\n\"\n+            \"       \\\"NONE\\\"\\n\"\n+            \"       \\\"SINGLE\\\"\\n\"\n+            \"       \\\"ALL|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"SINGLE|ANYONECANPAY\\\"\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"hex\\\": \\\"value\\\",   (string) The raw transaction with signature(s) (hex-encoded string)\\n\"\n+            \"  \\\"complete\\\": n       (numeric) if transaction has a complete set of signature (0 if not)\\n\"\n+            \"}\\n\"\n+\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"signrawtransaction\", \"\\\"myhex\\\"\")\n+            + HelpExampleRpc(\"signrawtransaction\", \"\\\"myhex\\\"\")\n+        );\n \n     RPCTypeCheck(params, list_of(str_type)(array_type)(array_type)(str_type), true);\n \n@@ -527,8 +726,25 @@ Value sendrawtransaction(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 2)\n         throw runtime_error(\n-            \"sendrawtransaction <hex string> [allowhighfees=false]\\n\"\n-            \"Submits raw transaction (serialized, hex-encoded) to local node and network.\");\n+            \"sendrawtransaction \\\"hexstring\\\" ( allowhighfees )\\n\"\n+            \"\\nSubmits raw transaction (serialized, hex-encoded) to local node and network.\\n\"\n+            \"\\nAlso see createrawtransaction and signrawtransaction calls.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"hexstring\\\"    (string, required) The hex string of the raw transaction)\\n\"\n+            \"2. allowhighfees    (boolean, optional, default=false) Allow high fees\\n\"\n+            \"\\nResult:\\n\"\n+            \"\\\"hex\\\"             (string) The transaction hash in hex\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nCreate a transaction\\n\"\n+            + HelpExampleCli(\"createrawtransaction\", \"\\\"[{\\\\\\\"txid\\\\\\\" : \\\\\\\"mytxid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\" \\\"{\\\\\\\"myaddress\\\\\\\":0.01}\\\"\") +\n+            \"Sign the transaction, and get back the hex\\n\"\n+            + HelpExampleCli(\"signrawtransaction\", \"\\\"myhex\\\"\") +\n+            \"\\nSend the transaction (signed hex)\\n\"\n+            + HelpExampleCli(\"sendrawtransaction\", \"\\\"signedhex\\\"\") +\n+            \"\\nAs a json rpc call\\n\"\n+            + HelpExampleRpc(\"sendrawtransaction\", \"\\\"signedhex\\\"\")\n+        );\n+\n \n     // parse hex string from parameter\n     vector<unsigned char> txData(ParseHexV(params[0], \"parameter\"));"
      },
      {
        "sha": "8b14c0aca9f2b27433ede9fc4232ff5d1bd903af",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 660,
        "deletions": 91,
        "changes": 751,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6099ef319a73e2255dca77065600abb22c4f5f8/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6099ef319a73e2255dca77065600abb22c4f5f8/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=a6099ef319a73e2255dca77065600abb22c4f5f8",
        "patch": "@@ -31,10 +31,19 @@ static CCriticalSection cs_nWalletUnlockTime;\n std::string HelpRequiringPassphrase()\n {\n     return pwalletMain && pwalletMain->IsCrypted()\n-        ? \"\\nrequires wallet passphrase to be set with walletpassphrase first\"\n+        ? \"\\nRequires wallet passphrase to be set with walletpassphrase call.\"\n         : \"\";\n }\n \n+std::string HelpExampleCli(string methodname, string args){\n+    return \"> bitcoin-cli \" + methodname + \" \" + args + \"\\n\";\n+}\n+\n+std::string HelpExampleRpc(string methodname, string args){\n+    return \"> curl --user myusername --data-binary '{\\\"jsonrpc\\\": \\\"1.0\\\", \\\"id\\\":\\\"curltest\\\", \"\n+        \"\\\"method\\\": \\\"\" + methodname + \"\\\", \\\"params\\\": [\" + args + \"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/\\n\";\n+}\n+\n void EnsureWalletIsUnlocked()\n {\n     if (pwalletMain->IsLocked())\n@@ -73,7 +82,29 @@ Value getinfo(const Array& params, bool fHelp)\n     if (fHelp || params.size() != 0)\n         throw runtime_error(\n             \"getinfo\\n\"\n-            \"Returns an object containing various state info.\");\n+            \"Returns an object containing various state info.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"version\\\": xxxxx,           (numeric) the server version\\n\"\n+            \"  \\\"protocolversion\\\": xxxxx,   (numeric) the protocol version\\n\"\n+            \"  \\\"walletversion\\\": xxxxx,     (numeric) the wallet version\\n\"\n+            \"  \\\"balance\\\": xxxxxxx,         (numeric) the total bitcoin balance of the wallet\\n\"\n+            \"  \\\"blocks\\\": xxxxxx,           (numeric) the current number of blocks processed in the server\\n\"\n+            \"  \\\"timeoffset\\\": xxxxx,        (numeric) the time offset\\n\"\n+            \"  \\\"connections\\\": xxxxx,       (numeric) the number of connections\\n\"\n+            \"  \\\"proxy\\\": \\\"host:port\\\",     (string, optional) the proxy used by the server\\n\"\n+            \"  \\\"difficulty\\\": xxxxxx,       (numeric) the current difficulty\\n\"\n+            \"  \\\"testnet\\\": true|false,      (boolean) if the server is using testnet or not\\n\"\n+            \"  \\\"keypoololdest\\\": xxxxxx,    (numeric) the timestamp (seconds since GMT epoch) of the oldest pre-generated key in the key pool\\n\"\n+            \"  \\\"keypoolsize\\\": xxxx,        (numeric) how many new keys are pre-generated\\n\"\n+            \"  \\\"paytxfee\\\": x.xxxx,         (numeric) the transaction fee set in btc\\n\"\n+            \"  \\\"unlocked_until\\\": ttt,      (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked\\n\"\n+            \"  \\\"errors\\\": \\\"...\\\"           (string) any error messages\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getinfo\", \"\")\n+            + HelpExampleRpc(\"getinfo\", \"\")\n+        );\n \n     proxyType proxy;\n     GetProxy(NET_IPV4, proxy);\n@@ -108,10 +139,20 @@ Value getnewaddress(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() > 1)\n         throw runtime_error(\n-            \"getnewaddress [account]\\n\"\n-            \"Returns a new Bitcoin address for receiving payments.  \"\n-            \"If [account] is specified (recommended), it is added to the address book \"\n-            \"so payments received with the address will be credited to [account].\");\n+            \"getnewaddress ( \\\"account\\\" )\\n\"\n+            \"\\nReturns a new Bitcoin address for receiving payments.\\n\"\n+            \"If 'account' is specified (recommended), it is added to the address book \\n\"\n+            \"so payments received with the address will be credited to 'account'.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"account\\\"        (string, optional) The account name for the address to be linked to. if not provided, the default account \\\"\\\" is used. It can also be set to the empty string \\\"\\\" to represent the default account. The account does not need to exist, it will be created if there is no account by the given name.\\n\"\n+            \"\\nResult:\\n\"\n+            \"\\\"bitcoinaddress\\\"    (string) The new bitcoin address\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getnewaddress\", \"\")\n+            + HelpExampleCli(\"getnewaddress\", \"\\\"\\\"\")\n+            + HelpExampleCli(\"getnewaddress\", \"\\\"myaccount\\\"\")\n+            + HelpExampleRpc(\"getnewaddress\", \"\\\"myaccount\\\"\")\n+        );\n \n     // Parse the account first so we don't generate a key if there's an error\n     string strAccount;\n@@ -175,8 +216,18 @@ Value getaccountaddress(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n-            \"getaccountaddress <account>\\n\"\n-            \"Returns the current Bitcoin address for receiving payments to this account.\");\n+            \"getaccountaddress \\\"account\\\"\\n\"\n+            \"\\nReturns the current Bitcoin address for receiving payments to this account.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"account\\\"       (string, required) The account name for the address. It can also be set to the empty string \\\"\\\" to represent the default account. The account does not need to exist, it will be created and a new address created  if there is no account by the given name.\\n\"\n+            \"\\nResult:\\n\"\n+            \"\\\"bitcoinaddress\\\"   (string) The account bitcoin address\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaccountaddress\", \"\")\n+            + HelpExampleCli(\"getaccountaddress\", \"\\\"\\\"\")\n+            + HelpExampleCli(\"getaccountaddress\", \"\\\"myaccount\\\"\")\n+            + HelpExampleRpc(\"getaccountaddress\", \"\\\"myaccount\\\"\")\n+        );\n \n     // Parse the account first so we don't generate a key if there's an error\n     string strAccount = AccountFromValue(params[0]);\n@@ -194,8 +245,14 @@ Value getrawchangeaddress(const Array& params, bool fHelp)\n     if (fHelp || params.size() > 1)\n         throw runtime_error(\n             \"getrawchangeaddress\\n\"\n-            \"Returns a new Bitcoin address, for receiving change.  \"\n-            \"This is for use with raw transactions, NOT normal use.\");\n+            \"\\nReturns a new Bitcoin address, for receiving change.\\n\"\n+            \"This is for use with raw transactions, NOT normal use.\\n\"\n+            \"\\nResult:\\n\"\n+            \"\\\"address\\\"    (string) The address\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getrawchangeaddress\", \"\")\n+            + HelpExampleRpc(\"getrawchangeaddress\", \"\")\n+       );\n \n     if (!pwalletMain->IsLocked())\n         pwalletMain->TopUpKeyPool();\n@@ -217,8 +274,15 @@ Value setaccount(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 2)\n         throw runtime_error(\n-            \"setaccount <bitcoinaddress> <account>\\n\"\n-            \"Sets the account associated with the given address.\");\n+            \"setaccount \\\"bitcoinaddress\\\" \\\"account\\\"\\n\"\n+            \"\\nSets the account associated with the given address.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address to be associated with an account.\\n\"\n+            \"2. \\\"account\\\"         (string, required) The account to assign the address to.\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"setaccount\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\" \\\"tabby\\\"\")\n+            + HelpExampleRpc(\"setaccount\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\", \\\"tabby\\\"\")\n+        );\n \n     CBitcoinAddress address(params[0].get_str());\n     if (!address.IsValid())\n@@ -247,8 +311,16 @@ Value getaccount(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n-            \"getaccount <bitcoinaddress>\\n\"\n-            \"Returns the account associated with the given address.\");\n+            \"getaccount \\\"bitcoinaddress\\\"\\n\"\n+            \"\\nReturns the account associated with the given address.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address for account lookup.\\n\"\n+            \"\\nResult:\\n\"\n+            \"\\\"accountname\\\"        (string) the account address\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaccount\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n+            + HelpExampleRpc(\"getaccount\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n+        );\n \n     CBitcoinAddress address(params[0].get_str());\n     if (!address.IsValid())\n@@ -266,8 +338,19 @@ Value getaddressesbyaccount(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n-            \"getaddressesbyaccount <account>\\n\"\n-            \"Returns the list of addresses for the given account.\");\n+            \"getaddressesbyaccount \\\"account\\\"\\n\"\n+            \"\\nReturns the list of addresses for the given account.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"account\\\"  (string, required) The account name.\\n\"\n+            \"\\nResult:\\n\"\n+            \"[                     (json array of string)\\n\"\n+            \"  \\\"bitcoinaddress\\\"  (string) a bitcoin address associated with the given account\\n\"\n+            \"  ,...\\n\"\n+            \"]\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbyaccount\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbyaccount\", \"\\\"tabby\\\"\")\n+        );\n \n     string strAccount = AccountFromValue(params[0]);\n \n@@ -287,9 +370,24 @@ Value sendtoaddress(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 2 || params.size() > 4)\n         throw runtime_error(\n-            \"sendtoaddress <bitcoinaddress> <amount> [comment] [comment-to]\\n\"\n-            \"<amount> is a real and is rounded to the nearest 0.00000001\"\n-            + HelpRequiringPassphrase());\n+            \"sendtoaddress \\\"bitcoinaddress\\\" amount ( \\\"comment\\\" \\\"comment-to\\\" )\\n\"\n+            \"\\nSent an amount to a given address. The amount is a real and is rounded to the nearest 0.00000001\\n\"\n+            + HelpRequiringPassphrase() +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address to send to.\\n\"\n+            \"2. \\\"amount\\\"      (numeric, required) The amount in btc to send. eg 0.1\\n\"\n+            \"3. \\\"comment\\\"     (string, optional) A comment used to store what the transaction is for. \\n\"\n+            \"                             This is not part of the transaction, just kept in your wallet.\\n\"\n+            \"4. \\\"comment-to\\\"  (string, optional) A comment to store the name of the person or organization \\n\"\n+            \"                             to which you're sending the transaction. This is not part of the \\n\"\n+            \"                             transaction, just kept in your wallet.\\n\"\n+            \"\\nResult:\\n\"\n+            \"\\\"transactionid\\\"  (string) The transaction id. (view at https://blockchain.info/tx/[transactionid])\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"sendtoaddress\", \"\\\"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\\\" 0.1\")\n+            + HelpExampleCli(\"sendtoaddress\", \"\\\"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\\\" 0.1 \\\"donation\\\" \\\"seans outpost\\\"\")\n+            + HelpExampleRpc(\"sendtoaddress\", \"\\\"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\\\", 0.1, \\\"donation\\\", \\\"seans outpost\\\"\")\n+        );\n \n     CBitcoinAddress address(params[0].get_str());\n     if (!address.IsValid())\n@@ -320,9 +418,25 @@ Value listaddressgroupings(const Array& params, bool fHelp)\n     if (fHelp)\n         throw runtime_error(\n             \"listaddressgroupings\\n\"\n-            \"Lists groups of addresses which have had their common ownership\\n\"\n+            \"\\nLists groups of addresses which have had their common ownership\\n\"\n             \"made public by common use as inputs or as the resulting change\\n\"\n-            \"in past transactions\");\n+            \"in past transactions\\n\"\n+            \"\\nResult:\\n\"\n+            \"[\\n\"\n+            \"  [\\n\"\n+            \"    [\\n\"\n+            \"      \\\"bitcoinaddress\\\",     (string) The bitcoin address\\n\"\n+            \"      amount,                 (numeric) The amount in btc\\n\"\n+            \"      \\\"account\\\"             (string, optional) The account\\n\"\n+            \"    ]\\n\"\n+            \"    ,...\\n\"\n+            \"  ]\\n\"\n+            \"  ,...\\n\"\n+            \"]\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"listaddressgroupings\", \"\")\n+            + HelpExampleRpc(\"listaddressgroupings\", \"\")\n+        );\n \n     Array jsonGroupings;\n     map<CTxDestination, int64_t> balances = pwalletMain->GetAddressBalances();\n@@ -350,8 +464,24 @@ Value signmessage(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 2)\n         throw runtime_error(\n-            \"signmessage <bitcoinaddress> <message>\\n\"\n-            \"Sign a message with the private key of an address\");\n+            \"signmessage \\\"bitcoinaddress\\\" \\\"message\\\"\\n\"\n+            \"\\nSign a message with the private key of an address\"\n+            + HelpRequiringPassphrase() + \"\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address to use for the private key.\\n\"\n+            \"2. \\\"message\\\"         (string, required) The message to create a signature of.\\n\"\n+            \"\\nResult:\\n\"\n+            \"\\\"signature\\\"          (string) The signature of the message encoded in base 64\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nUnlock the wallet for 30 seconds\\n\"\n+            + HelpExampleCli(\"walletpassphrase\", \"\\\"mypassphrase\\\" 30\") +\n+            \"\\nCreate the signature\\n\"\n+            + HelpExampleCli(\"signmessage\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\" \\\"my message\\\"\") +\n+            \"\\nVerify the signature\\n\"\n+            + HelpExampleCli(\"verifymessage\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\" \\\"signature\\\" \\\"my message\\\"\") +\n+            \"\\nAs json rpc\\n\"\n+            + HelpExampleRpc(\"signmessage\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\", \\\"my message\\\"\")\n+        );\n \n     EnsureWalletIsUnlocked();\n \n@@ -385,8 +515,24 @@ Value verifymessage(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 3)\n         throw runtime_error(\n-            \"verifymessage <bitcoinaddress> <signature> <message>\\n\"\n-            \"Verify a signed message\");\n+            \"verifymessage \\\"bitcoinaddress\\\" \\\"signature\\\" \\\"message\\\"\\n\"\n+            \"\\nVerify a signed message\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address to use for the signature.\\n\"\n+            \"2. \\\"signature\\\"       (string, required) The signature provided by the signer in base 64 encoding (see signmessage).\\n\"\n+            \"3. \\\"message\\\"         (string, required) The message that was signed.\\n\"\n+            \"\\nResult:\\n\"\n+            \"true|false   (boolean) If the signature is verified or not.\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nUnlock the wallet for 30 seconds\\n\"\n+            + HelpExampleCli(\"walletpassphrase\", \"\\\"mypassphrase\\\" 30\") +\n+            \"\\nCreate the signature\\n\"\n+            + HelpExampleCli(\"signmessage\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\" \\\"my message\\\"\") +\n+            \"\\nVerify the signature\\n\"\n+            + HelpExampleCli(\"verifymessage\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\" \\\"signature\\\" \\\"my message\\\"\") +\n+            \"\\nAs json rpc\\n\"\n+            + HelpExampleRpc(\"verifymessage\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\", \\\"signature\\\", \\\"my message\\\"\")\n+        );\n \n     string strAddress  = params[0].get_str();\n     string strSign     = params[1].get_str();\n@@ -422,8 +568,23 @@ Value getreceivedbyaddress(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 2)\n         throw runtime_error(\n-            \"getreceivedbyaddress <bitcoinaddress> [minconf=1]\\n\"\n-            \"Returns the total amount received by <bitcoinaddress> in transactions with at least [minconf] confirmations.\");\n+            \"getreceivedbyaddress \\\"bitcoinaddress\\\" ( minconf )\\n\"\n+            \"\\nReturns the total amount received by the given bitcoinaddress in transactions with at least minconf confirmations.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address for transactions.\\n\"\n+            \"2. minconf             (numeric, optional, default=1) Only include transactions confirmed at least this many times.\\n\"\n+            \"\\nResult:\\n\"\n+            \"amount   (numeric) The total amount in btc received at this address.\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nThe amount from transactions with at least 1 confirmation\\n\"\n+            + HelpExampleCli(\"getreceivedbyaddress\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\") +\n+            \"\\nThe amount including unconfirmed transactions, zero confirmations\\n\"\n+            + HelpExampleCli(\"getreceivedbyaddress\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\" 0\") +\n+            \"\\nThe amount with at least 6 confirmation, very safe\\n\"\n+            + HelpExampleCli(\"getreceivedbyaddress\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\" 6\") +\n+            \"\\nAs a json rpc call\\n\"\n+            + HelpExampleRpc(\"getreceivedbyaddress\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\", 6\")\n+       );\n \n     // Bitcoin address\n     CBitcoinAddress address = CBitcoinAddress(params[0].get_str());\n@@ -461,8 +622,23 @@ Value getreceivedbyaccount(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 2)\n         throw runtime_error(\n-            \"getreceivedbyaccount <account> [minconf=1]\\n\"\n-            \"Returns the total amount received by addresses with <account> in transactions with at least [minconf] confirmations.\");\n+            \"getreceivedbyaccount \\\"account\\\" ( minconf )\\n\"\n+            \"\\nReturns the total amount received by addresses with <account> in transactions with at least [minconf] confirmations.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"account\\\"      (string, required) The selected account, may be the default account using \\\"\\\".\\n\"\n+            \"2. minconf          (numeric, optional, default=1) Only include transactions confirmed at least this many times.\\n\"\n+            \"\\nResult:\\n\"\n+            \"amount              (numeric) The total amount in btc received for this account.\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nAmount received by the default account with at least 1 confirmation\\n\"\n+            + HelpExampleCli(\"getreceivedbyaccount\", \"\\\"\\\"\") +\n+            \"\\nAmount received at the tabby account including unconfirmed amounts with zero confirmations\\n\"\n+            + HelpExampleCli(\"getreceivedbyaccount\", \"\\\"tabby\\\" 0\") +\n+            \"\\nThe amount with at least 6 confirmation, very safe\\n\"\n+            + HelpExampleCli(\"getreceivedbyaccount\", \"\\\"tabby\\\" 6\") +\n+            \"\\nAs a json rpc call\\n\"\n+            + HelpExampleRpc(\"getreceivedbyaccount\", \"\\\"tabby\\\", 6\")\n+        );\n \n     // Minimum confirmations\n     int nMinDepth = 1;\n@@ -530,9 +706,26 @@ Value getbalance(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() > 2)\n         throw runtime_error(\n-            \"getbalance [account] [minconf=1]\\n\"\n-            \"If [account] is not specified, returns the server's total available balance.\\n\"\n-            \"If [account] is specified, returns the balance in the account.\");\n+            \"getbalance ( \\\"account\\\" minconf )\\n\"\n+            \"\\nIf account is not specified, returns the server's total available balance.\\n\"\n+            \"If account is specified, returns the balance in the account.\\n\"\n+            \"Note that the account \\\"\\\" is not the same as leaving the parameter out.\\n\"\n+            \"The server total may be different to the balance in the default \\\"\\\" account.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"account\\\"      (string, optional) The selected account. It may be the default account using \\\"\\\".\\n\"\n+            \"2. minconf          (numeric, optional, default=1) Only include transactions confirmed at least this many times.\\n\"\n+            \"\\nResult:\\n\"\n+            \"amount              (numeric) The total amount in btc received for this account.\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nThe total amount in the server across all accounts\\n\"\n+            + HelpExampleCli(\"getbalance\", \"\") +\n+            \"\\nThe total amount in the default account with at least 1 confirmation\\n\"\n+            + HelpExampleCli(\"getbalance\", \"\\\"\\\"\") +\n+            \"\\nThe total amount in the account named tabby with at least 6 confirmations\\n\"\n+            + HelpExampleCli(\"getbalance\", \"\\\"tabby\\\" 6\") +\n+            \"\\nAs a json rpc call\\n\"\n+            + HelpExampleRpc(\"getbalance\", \"\\\"tabby\\\", 6\")\n+        );\n \n     if (params.size() == 0)\n         return  ValueFromAmount(pwalletMain->GetBalance());\n@@ -581,8 +774,23 @@ Value movecmd(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 3 || params.size() > 5)\n         throw runtime_error(\n-            \"move <fromaccount> <toaccount> <amount> [minconf=1] [comment]\\n\"\n-            \"Move from one account in your wallet to another.\");\n+            \"move \\\"fromaccount\\\" \\\"toaccount\\\" amount ( minconf \\\"comment\\\" )\\n\"\n+            \"\\nMove a specified amount from one account in your wallet to another.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"fromaccount\\\"   (string, required) The name of the account to move funds from. May be the default account using \\\"\\\".\\n\"\n+            \"2. \\\"toaccount\\\"     (string, required) The name of the account to move funds to. May be the default account using \\\"\\\".\\n\"\n+            \"3. minconf           (numeric, optional, default=1) Only use funds with at least this many confirmations.\\n\"\n+            \"4. \\\"comment\\\"       (string, optional) An optional comment, stored in the wallet only.\\n\"\n+            \"\\nResult:\\n\"\n+            \"true|false           (boolean) true if successfull.\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nMove 0.01 btc from the default account to the account named tabby\\n\"\n+            + HelpExampleCli(\"move\", \"\\\"\\\" \\\"tabby\\\" 0.01\") +\n+            \"\\nMove 0.01 btc timotei to akiko with a comment and funds have 6 confirmations\\n\"\n+            + HelpExampleCli(\"move\", \"\\\"timotei\\\" \\\"akiko\\\" 0.01 6 \\\"happy birthday!\\\"\") +\n+            \"\\nAs a json rpc call\\n\"\n+            + HelpExampleRpc(\"move\", \"\\\"timotei\\\", \\\"akiko\\\", 0.01, 6, \\\"happy birthday!\\\"\")\n+        );\n \n     string strFrom = AccountFromValue(params[0]);\n     string strTo = AccountFromValue(params[1]);\n@@ -631,9 +839,30 @@ Value sendfrom(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 3 || params.size() > 6)\n         throw runtime_error(\n-            \"sendfrom <fromaccount> <tobitcoinaddress> <amount> [minconf=1] [comment] [comment-to]\\n\"\n-            \"<amount> is a real and is rounded to the nearest 0.00000001\"\n-            + HelpRequiringPassphrase());\n+            \"sendfrom \\\"fromaccount\\\" \\\"tobitcoinaddress\\\" amount ( minconf \\\"comment\\\" \\\"comment-to\\\" )\\n\"\n+            \"\\nSent an amount from an account to a bitcoin address.\\n\"\n+            \"The amount is a real and is rounded to the nearest 0.00000001.\"\n+            + HelpRequiringPassphrase() + \"\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"fromaccount\\\"       (string, required) The name of the account to send funds from. May be the default account using \\\"\\\".\\n\"\n+            \"2. \\\"tobitcoinaddress\\\"  (string, required) The bitcoin address to send funds to.\\n\"\n+            \"3. amount                (numeric, required) The amount in btc. (transaction fee is added on top).\\n\"\n+            \"4. minconf               (numeric, optional, default=1) Only use funds with at least this many confirmations.\\n\"\n+            \"5. \\\"comment\\\"           (string, optional) A comment used to store what the transaction is for. \\n\"\n+            \"                                     This is not part of the transaction, just kept in your wallet.\\n\"\n+            \"6. \\\"comment-to\\\"        (string, optional) An optional comment to store the name of the person or organization \\n\"\n+            \"                                     to which you're sending the transaction. This is not part of the transaction, \\n\"\n+            \"                                     it is just kept in your wallet.\\n\"\n+            \"\\nResult:\\n\"\n+            \"\\\"transactionid\\\"        (string) The transaction id. (view at https://blockchain.info/tx/[transactionid])\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nSend 0.01 btc from the default account to the address, must have at least 1 confirmation\\n\"\n+            + HelpExampleCli(\"sendfrom\", \"\\\"\\\" \\\"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\\\" 0.01\") +\n+            \"\\nSend 0.01 from the tabby account to the given address, funds must have at least 6 confirmations\\n\"\n+            + HelpExampleCli(\"sendfrom\", \"\\\"tabby\\\" \\\"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\\\" 0.01 6 \\\"donation\\\" \\\"seans outpost\\\"\") +\n+            \"\\nAs a json rpc call\\n\"\n+            + HelpExampleRpc(\"sendfrom\", \"\\\"tabby\\\", \\\"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\\\", 0.01, 6, \\\"donation\\\", \\\"seans outpost\\\"\")\n+        );\n \n     string strAccount = AccountFromValue(params[0]);\n     CBitcoinAddress address(params[1].get_str());\n@@ -671,9 +900,29 @@ Value sendmany(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 2 || params.size() > 4)\n         throw runtime_error(\n-            \"sendmany <fromaccount> {address:amount,...} [minconf=1] [comment]\\n\"\n-            \"amounts are double-precision floating point numbers\"\n-            + HelpRequiringPassphrase());\n+            \"sendmany \\\"fromaccount\\\" {\\\"address\\\":amount,...} ( minconf \\\"comment\\\" )\\n\"\n+            \"\\nSend multiple times. Amounts are double-precision floating point numbers.\"\n+            + HelpRequiringPassphrase() + \"\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"fromaccount\\\"         (string, required) The account to send the funds from, can be \\\"\\\" for the default account\\n\"\n+            \"2. \\\"amounts\\\"             (string, required) A json object with addresses and amounts\\n\"\n+            \"    {\\n\"\n+            \"      \\\"address\\\":amount   (numeric) The bitcoin address is the key, the numeric amount in btc is the value\\n\"\n+            \"      ,...\\n\"\n+            \"    }\\n\"\n+            \"3. minconf                 (numeric, optional, default=1) Only use the balance confirmed at least this many times.\\n\"\n+            \"4. \\\"comment\\\"             (string, optional) A comment\\n\"\n+            \"\\nResult:\\n\"\n+            \"\\\"transactionid\\\"          (string) The transaction id for the send. Only 1 transaction is created regardless of \\n\"\n+            \"                                    the number of addresses. See https://blockchain.info/tx/[transactionid]\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nSend two amounts to two different addresses:\\n\"\n+            + HelpExampleCli(\"sendmany\", \"\\\"tabby\\\" \\\"{\\\\\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\\\\\":0.01,\\\\\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\\\\\":0.02}\\\"\") +\n+            \"\\nSend two amounts to two different addresses setting the confirmation and comment:\\n\"\n+            + HelpExampleCli(\"sendmany\", \"\\\"tabby\\\" \\\"{\\\\\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\\\\\":0.01,\\\\\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\\\\\":0.02}\\\" 6 \\\"testing\\\"\") +\n+            \"\\nAs a json rpc call\\n\"\n+            + HelpExampleRpc(\"sendmany\", \"\\\"tabby\\\", \\\"{\\\\\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\\\\\":0.01,\\\\\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\\\\\":0.02}\\\", 6, \\\"testing\\\"\")\n+        );\n \n     string strAccount = AccountFromValue(params[0]);\n     Object sendTo = params[1].get_obj();\n@@ -788,10 +1037,29 @@ Value addmultisigaddress(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 2 || params.size() > 3)\n     {\n-        string msg = \"addmultisigaddress <nrequired> <'[\\\"key\\\",\\\"key\\\"]'> [account]\\n\"\n-            \"Add a nrequired-to-sign multisignature address to the wallet\\\"\\n\"\n-            \"each key is a Bitcoin address or hex-encoded public key\\n\"\n-            \"If [account] is specified, assign address to [account].\";\n+        string msg = \"addmultisigaddress nrequired [\\\"key\\\",...] ( \\\"account\\\" )\\n\"\n+            \"\\nAdd a nrequired-to-sign multisignature address to the wallet.\\n\"\n+            \"Each key is a Bitcoin address or hex-encoded public key.\\n\"\n+            \"If 'account' is specified, assign address to that account.\\n\"\n+\n+            \"\\nArguments:\\n\"\n+            \"1. nrequired        (numeric, required) The number of required signatures out of the n keys or addresses.\\n\"\n+            \"2. \\\"keysobject\\\"   (string, required) A json array of bitcoin addresses or hex-encoded public keys\\n\"\n+            \"     [\\n\"\n+            \"       \\\"address\\\"  (string) bitcoin address or hex-encoded public key\\n\"\n+            \"       ...,\\n\"\n+            \"     ]\\n\"\n+            \"3. \\\"account\\\"      (string, optional) An account to assign the addresses to.\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"\\\"bitcoinaddress\\\"  (string) A bitcoin address associated with the keys.\\n\"\n+\n+            \"\\nExamples:\\n\"\n+            \"\\nAdd a multisig address from 2 addresses\\n\"\n+            + HelpExampleCli(\"addmultisigaddress\", \"2 \\\"[\\\\\\\"16sSauSf5pF2UkUwvKGq4qjNRzBZYqgEL5\\\\\\\",\\\\\\\"171sgjn4YtPu27adkKGrdDwzRTxnRkBfKV\\\\\\\"]\\\"\") +\n+            \"\\nAs json rpc call\\n\"\n+            + HelpExampleRpc(\"addmultisigaddress\", \"2, \\\"[\\\\\\\"16sSauSf5pF2UkUwvKGq4qjNRzBZYqgEL5\\\\\\\",\\\\\\\"171sgjn4YtPu27adkKGrdDwzRTxnRkBfKV\\\\\\\"]\\\"\")\n+        ;\n         throw runtime_error(msg);\n     }\n \n@@ -812,11 +1080,30 @@ Value createmultisig(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 2 || params.size() > 2)\n     {\n-        string msg = \"createmultisig <nrequired> <'[\\\"key\\\",\\\"key\\\"]'>\\n\"\n-            \"Creates a multi-signature address and returns a json object\\n\"\n-            \"with keys:\\n\"\n-            \"address : bitcoin address\\n\"\n-            \"redeemScript : hex-encoded redemption script\";\n+        string msg = \"createmultisig nrequired [\\\"key\\\",...]\\n\"\n+            \"\\nCreates a multi-signature address with n signature of m keys required.\\n\"\n+            \"It returns a json object with the address and redeemScript.\\n\"\n+\n+            \"\\nArguments:\\n\"\n+            \"1. nrequired      (numeric, required) The number of required signatures out of the n keys or addresses.\\n\"\n+            \"2. \\\"keys\\\"       (string, required) A json array of keys which are bitcoin addresses or hex-encoded public keys\\n\"\n+            \"     [\\n\"\n+            \"       \\\"key\\\"    (string) bitcoin address or hex-encoded public key\\n\"\n+            \"       ,...\\n\"\n+            \"     ]\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"address\\\":\\\"multisigaddress\\\",  (string) The value of the new multisig address.\\n\"\n+            \"  \\\"redeemScript\\\":\\\"script\\\"       (string) The string value of the hex-encoded redemption script.\\n\"\n+            \"}\\n\"\n+\n+            \"\\nExamples:\\n\"\n+            \"\\nCreate a multisig address from 2 addresses\\n\"\n+            + HelpExampleCli(\"createmultisig\", \"2 \\\"[\\\\\\\"16sSauSf5pF2UkUwvKGq4qjNRzBZYqgEL5\\\\\\\",\\\\\\\"171sgjn4YtPu27adkKGrdDwzRTxnRkBfKV\\\\\\\"]\\\"\") +\n+            \"\\nAs a json rpc call\\n\"\n+            + HelpExampleRpc(\"icreatemultisig\", \"2, \\\"[\\\\\\\"16sSauSf5pF2UkUwvKGq4qjNRzBZYqgEL5\\\\\\\",\\\\\\\"171sgjn4YtPu27adkKGrdDwzRTxnRkBfKV\\\\\\\"]\\\"\")\n+        ;\n         throw runtime_error(msg);\n     }\n \n@@ -949,15 +1236,28 @@ Value listreceivedbyaddress(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() > 2)\n         throw runtime_error(\n-            \"listreceivedbyaddress [minconf=1] [includeempty=false]\\n\"\n-            \"[minconf] is the minimum number of confirmations before payments are included.\\n\"\n-            \"[includeempty] whether to include addresses that haven't received any payments.\\n\"\n-            \"Returns an array of objects containing:\\n\"\n-            \"  \\\"address\\\" : receiving address\\n\"\n-            \"  \\\"account\\\" : the account of the receiving address\\n\"\n-            \"  \\\"amount\\\" : total amount received by the address\\n\"\n-            \"  \\\"confirmations\\\" : number of confirmations of the most recent transaction included\\n\"\n-            \"  \\\"txids\\\" : list of transactions with outputs to the address\\n\");\n+            \"listreceivedbyaddress ( minconf includeempty )\\n\"\n+            \"\\nList balances by receiving address.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. minconf       (numeric, optional, default=1) The minimum number of confirmations before payments are included.\\n\"\n+            \"2. includeempty  (numeric, optional, dafault=false) Whether to include addresses that haven't received any payments.\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"[\\n\"\n+            \"  {\\n\"\n+            \"    \\\"address\\\" : \\\"receivingaddress\\\",  (string) The receiving address\\n\"\n+            \"    \\\"account\\\" : \\\"accountname\\\",       (string) The account of the receiving address. The default account is \\\"\\\".\\n\"\n+            \"    \\\"amount\\\" : x.xxx,                  (numeric) The total amount in btc received by the address\\n\"\n+            \"    \\\"confirmations\\\" : n                (numeric) The number of confirmations of the most recent transaction included\\n\"\n+            \"  }\\n\"\n+            \"  ,...\\n\"\n+            \"]\\n\"\n+\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"listreceivedbyaddress\", \"\")\n+            + HelpExampleCli(\"listreceivedbyaddress\", \"6 true\")\n+            + HelpExampleRpc(\"listreceivedbyaddress\", \"6, true\")\n+        );\n \n     return ListReceived(params, false);\n }\n@@ -966,13 +1266,27 @@ Value listreceivedbyaccount(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() > 2)\n         throw runtime_error(\n-            \"listreceivedbyaccount [minconf=1] [includeempty=false]\\n\"\n-            \"[minconf] is the minimum number of confirmations before payments are included.\\n\"\n-            \"[includeempty] whether to include accounts that haven't received any payments.\\n\"\n-            \"Returns an array of objects containing:\\n\"\n-            \"  \\\"account\\\" : the account of the receiving addresses\\n\"\n-            \"  \\\"amount\\\" : total amount received by addresses with this account\\n\"\n-            \"  \\\"confirmations\\\" : number of confirmations of the most recent transaction included\");\n+            \"listreceivedbyaccount ( minconf includeempty )\\n\"\n+            \"\\nList balances by account.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. minconf      (numeric, optional, default=1) The minimum number of confirmations before payments are included.\\n\"\n+            \"2. includeempty (boolean, optional, default=false) Whether to include accounts that haven't received any payments.\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"[\\n\"\n+            \"  {\\n\"\n+            \"    \\\"account\\\" : \\\"accountname\\\",  (string) The account name of the receiving account\\n\"\n+            \"    \\\"amount\\\" : x.xxx,             (numeric) The total amount received by addresses with this account\\n\"\n+            \"    \\\"confirmations\\\" : n           (numeric) The number of confirmations of the most recent transaction included\\n\"\n+            \"  }\\n\"\n+            \"  ,...\\n\"\n+            \"]\\n\"\n+\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"listreceivedbyaccount\", \"\")\n+            + HelpExampleCli(\"listreceivedbyaccount\", \"6 true\")\n+            + HelpExampleRpc(\"listreceivedbyaccount\", \"6, true\")\n+        );\n \n     return ListReceived(params, true);\n }\n@@ -1066,8 +1380,58 @@ Value listtransactions(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() > 3)\n         throw runtime_error(\n-            \"listtransactions [account] [count=10] [from=0]\\n\"\n-            \"Returns up to [count] most recent transactions skipping the first [from] transactions for account [account].\");\n+            \"listtransactions ( \\\"account\\\" count from )\\n\"\n+            \"\\nReturns up to 'count' most recent transactions skipping the first 'from' transactions for account 'account'.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"account\\\"    (string, optional) The account name. If not included, it will list all transactions for all accounts.\\n\"\n+            \"                                     If \\\"\\\" is set, it will list transactions for the default account.\\n\"\n+            \"2. count          (numeric, optional, default=10) The number of transactions to return\\n\"\n+            \"3. from           (numeric, optional, default=0) The number of transactions to skip\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"[\\n\"\n+            \"  {\\n\"\n+            \"    \\\"account\\\":\\\"accountname\\\",       (string) The account name associated with the transaction. \\n\"\n+            \"                                                It will be \\\"\\\" for the default account.\\n\"\n+            \"    \\\"address\\\":\\\"bitcoinaddress\\\",    (string) The bitcoin address of the transaction. Not present for \\n\"\n+            \"                                                move transactions (category = move).\\n\"\n+            \"    \\\"category\\\":\\\"send|receive|move\\\", (string) The transaction category. 'move' is a local (off blockchain)\\n\"\n+            \"                                                transaction between accounts, and not associated with an address,\\n\"\n+            \"                                                transaction id or block. 'send' and 'receive' transactions are \\n\"\n+            \"                                                associated with an address, transaction id and block details\\n\"\n+            \"    \\\"amount\\\": x.xxx,          (numeric) The amount in btc. This is negative for the 'send' category, and for the\\n\"\n+            \"                                         'move' category for moves outbound. It is positive for the 'receive' category,\\n\"\n+            \"                                         and for the 'move' category for inbound funds.\\n\"\n+            \"    \\\"fee\\\": x.xxx,             (numeric) The amount of the fee in btc. This is negative and only available for the \\n\"\n+            \"                                         'send' category of transactions.\\n\"\n+            \"    \\\"confirmations\\\": n,       (numeric) The number of confirmations for the transaction. Available for 'send' and \\n\"\n+            \"                                         'receive' category of transactions.\\n\"\n+            \"    \\\"blockhash\\\": \\\"hashvalue\\\", (string) The block hash containing the transaction. Available for 'send' and 'receive'\\n\"\n+            \"                                          category of transactions.\\n\"\n+            \"    \\\"blockindex\\\": n,          (numeric) The block index containing the transaction. Available for 'send' and 'receive'\\n\"\n+            \"                                          category of transactions.\\n\"\n+            \"    \\\"txid\\\": \\\"transactionid\\\", (string) The transaction id (see https://blockchain.info/tx/[transactionid]. Available \\n\"\n+            \"                                          for 'send' and 'receive' category of transactions.\\n\"\n+            \"    \\\"time\\\": xxx,              (numeric) The transaction time in seconds since epoch (midnight Jan 1 1970 GMT).\\n\"\n+            \"    \\\"timereceived\\\": xxx,      (numeric) The time received in seconds since epoch (midnight Jan 1 1970 GMT). Available \\n\"\n+            \"                                          for 'send' and 'receive' category of transactions.\\n\"\n+            \"    \\\"comment\\\": \\\"...\\\",       (string) If a comment is associated with the transaction.\\n\"\n+            \"    \\\"otheraccount\\\": \\\"accountname\\\",  (string) For the 'move' category of transactions, the account the funds came \\n\"\n+            \"                                          from (for receiving funds, positive amounts), or went to (for sending funds,\\n\"\n+            \"                                          negative amounts).\\n\"\n+            \"  }\\n\"\n+            \"]\\n\"\n+\n+            \"\\nExamples:\\n\"\n+            \"\\nList the most recent 10 transactions in the systems\\n\"\n+            + HelpExampleCli(\"listtransactions\", \"\") +\n+            \"\\nList the most recent 10 transactions for the tabby account\\n\"\n+            + HelpExampleCli(\"listtransactions\", \"\\\"tabby\\\"\") +\n+            \"\\nList transactions 100 to 120 from the tabby account\\n\"\n+            + HelpExampleCli(\"listtransactions\", \"\\\"tabby\\\" 20 100\") +\n+            \"\\nAs a json rpc call\\n\"\n+            + HelpExampleRpc(\"listtransactions\", \"\\\"tabby\\\", 20, 100\")\n+        );\n \n     string strAccount = \"*\";\n     if (params.size() > 0)\n@@ -1124,8 +1488,25 @@ Value listaccounts(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() > 1)\n         throw runtime_error(\n-            \"listaccounts [minconf=1]\\n\"\n-            \"Returns Object that has account names as keys, account balances as values.\");\n+            \"listaccounts ( minconf )\\n\"\n+            \"\\nReturns Object that has account names as keys, account balances as values.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. minconf     (numeric, optional, default=1) Only onclude transactions with at least this many confirmations\\n\"\n+            \"\\nResult:\\n\"\n+            \"{                      (json object where keys are account names, and values are numeric balances\\n\"\n+            \"  \\\"account\\\": x.xxx,  (numeric) The property name is the account name, and the value is the total balance for the account.\\n\"\n+            \"  ...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nList account balances where there at least 1 confirmation\\n\"\n+            + HelpExampleCli(\"listaccounts\", \"\") +\n+            \"\\nList account balances including zero confirmation transactions\\n\"\n+            + HelpExampleCli(\"listaccounts\", \"0\") +\n+            \"\\nList account balances for 6 or more confirmations\\n\"\n+            + HelpExampleCli(\"listaccounts\", \"6\") +\n+            \"\\nAs json rpc call\\n\"\n+            + HelpExampleRpc(\"listaccounts\", \"6\")\n+        );\n \n     int nMinDepth = 1;\n     if (params.size() > 0)\n@@ -1174,8 +1555,37 @@ Value listsinceblock(const Array& params, bool fHelp)\n {\n     if (fHelp)\n         throw runtime_error(\n-            \"listsinceblock [blockhash] [target-confirmations]\\n\"\n-            \"Get all wallet transactions in blocks since block [blockhash], or all wallet transactions if omitted\");\n+            \"listsinceblock ( \\\"blockhash\\\" target-confirmations )\\n\"\n+            \"\\nGet all transactions in blocks since block [blockhash], or all transactions if omitted\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"blockhash\\\"   (string, optional) The block hash to list transactions since\\n\"\n+            \"2. target-confirmations:    (numeric, optional) The confirmations required, must be 1 or more\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"transactions\\\": [\\n\"\n+            \"    \\\"account\\\":\\\"accountname\\\",       (string) The account name associated with the transaction. Will be \\\"\\\" for the default account.\\n\"\n+            \"    \\\"address\\\":\\\"bitcoinaddress\\\",    (string) The bitcoin address of the transaction. Not present for move transactions (category = move).\\n\"\n+            \"    \\\"category\\\":\\\"send|receive\\\",     (string) The transaction category. 'send' has negative amounts, 'receive' has positive amounts.\\n\"\n+            \"    \\\"amount\\\": x.xxx,          (numeric) The amount in btc. This is negative for the 'send' category, and for the 'move' category for moves \\n\"\n+            \"                                          outbound. It is positive for the 'receive' category, and for the 'move' category for inbound funds.\\n\"\n+            \"    \\\"fee\\\": x.xxx,             (numeric) The amount of the fee in btc. This is negative and only available for the 'send' category of transactions.\\n\"\n+            \"    \\\"confirmations\\\": n,       (numeric) The number of confirmations for the transaction. Available for 'send' and 'receive' category of transactions.\\n\"\n+            \"    \\\"blockhash\\\": \\\"hashvalue\\\",     (string) The block hash containing the transaction. Available for 'send' and 'receive' category of transactions.\\n\"\n+            \"    \\\"blockindex\\\": n,          (numeric) The block index containing the transaction. Available for 'send' and 'receive' category of transactions.\\n\"\n+            \"    \\\"blocktime\\\": xxx,         (numeric) The block time in seconds since epoch (1 Jan 1970 GMT).\\n\"\n+            \"    \\\"txid\\\": \\\"transactionid\\\",  (string) The transaction id (see https://blockchain.info/tx/[transactionid]. Available for 'send' and 'receive' category of transactions.\\n\"\n+            \"    \\\"time\\\": xxx,              (numeric) The transaction time in seconds since epoch (Jan 1 1970 GMT).\\n\"\n+            \"    \\\"timereceived\\\": xxx,      (numeric) The time received in seconds since epoch (Jan 1 1970 GMT). Available for 'send' and 'receive' category of transactions.\\n\"\n+            \"    \\\"comment\\\": \\\"...\\\",       (string) If a comment is associated with the transaction.\\n\"\n+            \"    \\\"to\\\": \\\"...\\\",            (string) If a comment to is associated with the transaction.\\n\"\n+             \"  ],\\n\"\n+            \"  \\\"lastblock\\\": \\\"lastblockhash\\\"     (string) The hash of the last block\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"listsinceblock\", \"\")\n+            + HelpExampleCli(\"listsinceblock\", \"\\\"000000000000000bacf66f7497b7dc45ef753ee9a7d38571037cdb1a57f663ad\\\" 6\")\n+            + HelpExampleRpc(\"listsinceblock\", \"\\\"000000000000000bacf66f7497b7dc45ef753ee9a7d38571037cdb1a57f663ad\\\", 6\")\n+        );\n \n     CBlockIndex *pindex = NULL;\n     int target_confirms = 1;\n@@ -1224,8 +1634,35 @@ Value gettransaction(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n-            \"gettransaction <txid>\\n\"\n-            \"Get detailed information about in-wallet transaction <txid>\");\n+            \"gettransaction \\\"txid\\\"\\n\"\n+            \"\\nGet detailed information about in-wallet transaction <txid>\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"txid\\\"    (string, required) The transaction id\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"amount\\\" : x.xxx,        (numeric) The transaction amount in btc\\n\"\n+            \"  \\\"confirmations\\\" : n,     (numeric) The number of confirmations\\n\"\n+            \"  \\\"blockhash\\\" : \\\"hash\\\",  (string) The block hash\\n\"\n+            \"  \\\"blockindex\\\" : xx,       (numeric) The block index\\n\"\n+            \"  \\\"blocktime\\\" : ttt,       (numeric) The time in seconds since epoch (1 Jan 1970 GMT)\\n\"\n+            \"  \\\"txid\\\" : \\\"transactionid\\\",   (string) The transaction id, see also https://blockchain.info/tx/[transactionid]\\n\"\n+            \"  \\\"time\\\" : ttt,            (numeric) The transaction time in seconds since epoch (1 Jan 1970 GMT)\\n\"\n+            \"  \\\"timereceived\\\" : ttt,    (numeric) The time received in seconds since epoch (1 Jan 1970 GMT)\\n\"\n+            \"  \\\"details\\\" : [\\n\"\n+            \"    {\\n\"\n+            \"      \\\"account\\\" : \\\"accountname\\\",  (string) The account name involved in the transaction, can be \\\"\\\" for the default account.\\n\"\n+            \"      \\\"address\\\" : \\\"bitcoinaddress\\\",   (string) The bitcoin address involved in the transaction\\n\"\n+            \"      \\\"category\\\" : \\\"send|receive\\\",    (string) The category, either 'send' or 'receive'\\n\"\n+            \"      \\\"amount\\\" : x.xxx                  (numeric) The amount in btc\\n\"\n+            \"    }\\n\"\n+            \"    ,...\\n\"\n+            \"  ]\\n\"\n+            \"}\\n\"\n+\n+            \"\\nbExamples\\n\"\n+            + HelpExampleCli(\"gettransaction\", \"\\\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\\\"\")\n+            + HelpExampleRpc(\"gettransaction\", \"\\\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\\\"\")\n+        );\n \n     uint256 hash;\n     hash.SetHex(params[0].get_str());\n@@ -1258,8 +1695,14 @@ Value backupwallet(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n-            \"backupwallet <destination>\\n\"\n-            \"Safely copies wallet.dat to destination, which can be a directory or a path with filename.\");\n+            \"backupwallet \\\"destination\\\"\\n\"\n+            \"\\nSafely copies wallet.dat to destination, which can be a directory or a path with filename.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"destination\\\"   (string) The destination directory or file\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"backupwallet\", \"\\\"backup.dat\\\"\")\n+            + HelpExampleRpc(\"backupwallet\", \"\\\"backup.dat\\\"\")\n+        );\n \n     string strDest = params[0].get_str();\n     if (!BackupWallet(*pwalletMain, strDest))\n@@ -1273,9 +1716,15 @@ Value keypoolrefill(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() > 1)\n         throw runtime_error(\n-            \"keypoolrefill [new-size]\\n\"\n-            \"Fills the keypool.\"\n-            + HelpRequiringPassphrase());\n+            \"keypoolrefill ( newsize )\\n\"\n+            \"\\nFills the keypool.\"\n+            + HelpRequiringPassphrase() + \"\\n\"\n+            \"\\nArguments\\n\"\n+            \"1. newsize     (numeric, optional, default=100) The new keypool size\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"keypoolrefill\", \"\")\n+            + HelpExampleRpc(\"keypoolrefill\", \"\")\n+        );\n \n     unsigned int kpSize = max(GetArg(\"-keypool\", 100), (int64_t) 0);\n     if (params.size() > 0) {\n@@ -1306,8 +1755,21 @@ Value walletpassphrase(const Array& params, bool fHelp)\n {\n     if (pwalletMain->IsCrypted() && (fHelp || params.size() != 2))\n         throw runtime_error(\n-            \"walletpassphrase <passphrase> <timeout>\\n\"\n-            \"Stores the wallet decryption key in memory for <timeout> seconds.\");\n+            \"walletpassphrase \\\"passphrase\\\" timeout\\n\"\n+            \"\\nStores the wallet decryption key in memory for 'timeout' seconds.\\n\"\n+            \"This is needed prior to performing transactions related to private keys such as sending bitcoins\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"passphrase\\\"     (string, required) The wallet passphrase\\n\"\n+            \"2. timeout            (numeric, required) The time to keep the decryption key in seconds.\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nunlock the wallet for 60 seconds\\n\"\n+            + HelpExampleCli(\"walletpassphrase\", \"\\\"my pass phrase\\\" 60\") +\n+            \"\\nLock the wallet again (before 60 seconds)\\n\"\n+            + HelpExampleCli(\"walletlock\", \"\") +\n+            \"\\nAs json rpc call\\n\"\n+            + HelpExampleRpc(\"walletpassphrase\", \"\\\"my pass phrase\\\", 60\")\n+        );\n+\n     if (fHelp)\n         return true;\n     if (!fServer)\n@@ -1347,8 +1809,16 @@ Value walletpassphrasechange(const Array& params, bool fHelp)\n {\n     if (pwalletMain->IsCrypted() && (fHelp || params.size() != 2))\n         throw runtime_error(\n-            \"walletpassphrasechange <oldpassphrase> <newpassphrase>\\n\"\n-            \"Changes the wallet passphrase from <oldpassphrase> to <newpassphrase>.\");\n+            \"walletpassphrasechange \\\"oldpassphrase\\\" \\\"newpassphrase\\\"\\n\"\n+            \"\\nChanges the wallet passphrase from 'oldpassphrase' to 'newpassphrase'.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"oldpassphrase\\\"      (string) The current passphrase\\n\"\n+            \"2. \\\"newpassphrase\\\"      (string) The new passphrase\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"walletpassphrasechange\", \"\\\"old one\\\" \\\"new one\\\"\")\n+            + HelpExampleRpc(\"walletpassphrasechange\", \"\\\"old one\\\", \\\"new one\\\"\")\n+        );\n+\n     if (fHelp)\n         return true;\n     if (!pwalletMain->IsCrypted())\n@@ -1381,9 +1851,20 @@ Value walletlock(const Array& params, bool fHelp)\n     if (pwalletMain->IsCrypted() && (fHelp || params.size() != 0))\n         throw runtime_error(\n             \"walletlock\\n\"\n-            \"Removes the wallet encryption key from memory, locking the wallet.\\n\"\n+            \"\\nRemoves the wallet encryption key from memory, locking the wallet.\\n\"\n             \"After calling this method, you will need to call walletpassphrase again\\n\"\n-            \"before being able to call any methods which require the wallet to be unlocked.\");\n+            \"before being able to call any methods which require the wallet to be unlocked.\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nSet the passphrase for 2 minutes to perform a transaction\\n\"\n+            + HelpExampleCli(\"walletpassphrase\", \"\\\"my pass phrase\\\" 120\") +\n+            \"\\nPerform a send (requires passphrase set)\\n\"\n+            + HelpExampleCli(\"sendtoaddress\", \"\\\"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\\\" 1.0\") +\n+            \"\\nClear the passphrase since we are done before 2 minutes is up\\n\"\n+            + HelpExampleCli(\"walletlock\", \"\") +\n+            \"\\nAs json rpc call\\n\"\n+            + HelpExampleRpc(\"walletlock\", \"\")\n+        );\n+\n     if (fHelp)\n         return true;\n     if (!pwalletMain->IsCrypted())\n@@ -1403,8 +1884,28 @@ Value encryptwallet(const Array& params, bool fHelp)\n {\n     if (!pwalletMain->IsCrypted() && (fHelp || params.size() != 1))\n         throw runtime_error(\n-            \"encryptwallet <passphrase>\\n\"\n-            \"Encrypts the wallet with <passphrase>.\");\n+            \"encryptwallet \\\"passphrase\\\"\\n\"\n+            \"\\nEncrypts the wallet with 'passphrase'. This is for first time encryption.\\n\"\n+            \"After this, any calls that interact with private keys such as sending or signing \\n\"\n+            \"will require the passphrase to be set prior the making these calls.\\n\"\n+            \"Use the walletpassphrase call for this, and then walletlock call.\\n\"\n+            \"If the wallet is already encrypted, use the walletpassphrasechange call.\\n\"\n+            \"Note that this will shutdown the server.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"passphrase\\\"    (string) The pass phrase to encrypt the wallet with. It must be at least 1 character, but should be long.\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nEncrypt you wallet\\n\"\n+            + HelpExampleCli(\"encryptwallet\", \"\\\"my pass phrase\\\"\") +\n+            \"\\nNow set the passphrase to use the wallet, such as for signing or sending bitcoin\\n\"\n+            + HelpExampleCli(\"walletpassphrase\", \"\\\"my pass phrase\\\"\") +\n+            \"\\nNow we can so something like sign\\n\"\n+            + HelpExampleCli(\"signmessage\", \"\\\"bitcoinaddress\\\" \\\"test message\\\"\") +\n+            \"\\nNow lock the wallet again by removing the passphrase\\n\"\n+            + HelpExampleCli(\"walletlock\", \"\") +\n+            \"\\nAs a json rpc call\\n\"\n+            + HelpExampleRpc(\"encryptwallet\", \"\\\"my pass phrase\\\"\")\n+        );\n+\n     if (fHelp)\n         return true;\n     if (pwalletMain->IsCrypted())\n@@ -1471,8 +1972,24 @@ Value validateaddress(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n-            \"validateaddress <bitcoinaddress>\\n\"\n-            \"Return information about <bitcoinaddress>.\");\n+            \"validateaddress \\\"bitcoinaddress\\\"\\n\"\n+            \"\\nReturn information about the given bitcoin address.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"bitcoinaddress\\\"     (string, required) The bitcoin address to validate\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"isvalid\\\" : true|false,         (boolean) If the address is valid or not. If not, this is the only property returned.\\n\"\n+            \"  \\\"address\\\" : \\\"bitcoinaddress\\\", (string) The bitcoin address validated\\n\"\n+            \"  \\\"ismine\\\" : true|false,          (boolean) If the address is yours or not\\n\"\n+            \"  \\\"isscript\\\" : true|false,        (boolean) If the key is a script\\n\"\n+            \"  \\\"pubkey\\\" : \\\"publickeyhex\\\",    (string) The hex value of the raw public key\\n\"\n+            \"  \\\"iscompressed\\\" : true|false,    (boolean) If the address is compressed\\n\"\n+            \"  \\\"account\\\" : \\\"account\\\"         (string) The account associated with the address, \\\"\\\" is the default account\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"validateaddress\", \"\\\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\\\"\")\n+            + HelpExampleRpc(\"validateaddress\", \"\\\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\\\"\")\n+        );\n \n     CBitcoinAddress address(params[0].get_str());\n     bool isValid = address.IsValid();\n@@ -1500,8 +2017,39 @@ Value lockunspent(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 2)\n         throw runtime_error(\n-            \"lockunspent unlock? [array-of-Objects]\\n\"\n-            \"Updates list of temporarily unspendable outputs.\");\n+            \"lockunspent unlock [{\\\"txid\\\":\\\"txid\\\",\\\"vout\\\":n},...]\\n\"\n+            \"\\nUpdates list of temporarily unspendable outputs.\\n\"\n+            \"Temporarily lock (lock=true) or unlock (lock=false) specified transaction outputs.\\n\"\n+            \"A locked transaction output will not be chosen by automatic coin selection, when spending bitcoins.\\n\"\n+            \"Locks are stored in memory only. Nodes start with zero locked outputs, and the locked output list\\n\"\n+            \"is always cleared (by virtue of process exit) when a node stops or fails.\\n\"\n+            \"Also see the listunspent call\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. unlock            (boolean, required) Whether to unlock (true) or lock (false) the specified transactions\\n\"\n+            \"2. \\\"transactions\\\"  (string, required) A json array of objects. Each object the txid (string) vout (numeric)\\n\"\n+            \"     [           (json array of json objects)\\n\"\n+            \"       {\\n\"\n+            \"         \\\"txid\\\":\\\"id\\\",    (string) The transaction id\\n\"\n+            \"         \\\"vout\\\": n         (numeric) The output number\\n\"\n+            \"       }\\n\"\n+            \"       ,...\\n\"\n+            \"     ]\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"true|false    (boolean) Whether the command was successful or not\\n\"\n+\n+            \"\\nExamples:\\n\"\n+            \"\\nList the unspent transactions\\n\"\n+            + HelpExampleCli(\"listunspent\", \"\") +\n+            \"\\nLock an unspent transaction\\n\"\n+            + HelpExampleCli(\"lockunspent\", \"false \\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\\\\\",\\\\\\\"vout\\\\\\\":1}]\\\"\") +\n+            \"\\nList the locked transactions\\n\"\n+            + HelpExampleCli(\"listlockunspent\", \"\") +\n+            \"\\nUnlock the transaction again\\n\"\n+            + HelpExampleCli(\"lockunspent\", \"true \\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\\\\\",\\\\\\\"vout\\\\\\\":1}]\\\"\") +\n+            \"\\nAs a json rpc call\\n\"\n+            + HelpExampleRpc(\"lockunspent\", \"false, \\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\\\\\",\\\\\\\"vout\\\\\\\":1}]\\\"\")\n+        );\n \n     if (params.size() == 1)\n         RPCTypeCheck(params, list_of(bool_type));\n@@ -1549,7 +2097,28 @@ Value listlockunspent(const Array& params, bool fHelp)\n     if (fHelp || params.size() > 0)\n         throw runtime_error(\n             \"listlockunspent\\n\"\n-            \"Returns list of temporarily unspendable outputs.\");\n+            \"\\nReturns list of temporarily unspendable outputs.\\n\"\n+            \"See the lockunspent call to lock and unlock transactions for spending.\\n\"\n+            \"\\nResult:\\n\"\n+            \"[\\n\"\n+            \"  {\\n\"\n+            \"    \\\"txid\\\" : \\\"transactionid\\\",     (string) The transaction id locked\\n\"\n+            \"    \\\"vout\\\" : n                      (numeric) The vout value\\n\"\n+            \"  }\\n\"\n+            \"  ,...\\n\"\n+            \"]\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nList the unspent transactions\\n\"\n+            + HelpExampleCli(\"listunspent\", \"\") +\n+            \"\\nLock an unspent transaction\\n\"\n+            + HelpExampleCli(\"lockunspent\", \"false \\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\\\\\",\\\\\\\"vout\\\\\\\":1}]\\\"\") +\n+            \"\\nList the locked transactions\\n\"\n+            + HelpExampleCli(\"listlockunspent\", \"\") +\n+            \"\\nUnlock the transaction again\\n\"\n+            + HelpExampleCli(\"lockunspent\", \"true \\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\\\\\",\\\\\\\"vout\\\\\\\":1}]\\\"\") +\n+            \"\\nAs a json rpc call\\n\"\n+            + HelpExampleRpc(\"listlockunspent\", \"\")\n+        );\n \n     vector<COutPoint> vOutpts;\n     pwalletMain->ListLockedCoins(vOutpts);"
      }
    ]
  }
]