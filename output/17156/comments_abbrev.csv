practicalswift,2019-10-15 22:50:48,"Concept ACK\n\nThanks for addressing these issues quickly! :) Will test.",https://github.com/bitcoin/bitcoin/pull/17156#issuecomment-542437438,542437438,
practicalswift,2019-10-17 11:06:20,"With this patch applied the PSBT fuzzer appears to be unable to trigger the problematic conditions listed in the issue #17149.\n\nHowever, I noticed that using the following 202 byte input:\n\n```\n70736274ff01009a020000000258e87a21b56daf0c23be8e7070456c336f\n7cbaa5c8757924f545887bb282dd750000000000ffffffff838d0427d0ec\n650a68aa46bb0b098aea4422c071b2ca78352a077959d07cea1d01000000\n00ffffff",https://github.com/bitcoin/bitcoin/pull/17156#issuecomment-543123631,543123631,
achow101,2019-10-17 17:55:20,What do I need to run in order to get the same error?,https://github.com/bitcoin/bitcoin/pull/17156#issuecomment-543290034,543290034,
MarcoFalke,2019-10-17 18:06:27,"Something like this:\n\n```\n#check out this branch\n./configure --disable-ccache --enable-fuzz --with-sanitizers=fuzzer,address,undefined CC=clang CXX=clang++\nmake -j 9\nexport LSAN_OPTIONS=""suppressions=$(pwd)/test/sanitizer_suppressions/lsan""\nexport TSAN_OPTIONS=""suppressions=$(pwd)/test/sanitizer_suppressions/tsan""\nexport UBSAN_OPTIONS=""suppressions=$(pwd)/test/sanitizer_suppression",https://github.com/bitcoin/bitcoin/pull/17156#issuecomment-543294418,543294418,
MarcoFalke,2019-10-17 18:07:00,"Not sure how to translate the base16 seed into a binary seed with the command line, though",https://github.com/bitcoin/bitcoin/pull/17156#issuecomment-543294629,543294629,
practicalswift,2019-10-17 18:27:01,"@MarcoFalke \n\n```\n$ xxd -r -p > seed <<< ""70736274ff01009a020000000258e87a21b56daf0c23be8e7070456c336f\n7cbaa5c8757924f545887bb282dd750000000000ffffffff838d0427d0ec\n650a68aa46bb0b098aea4422c071b2ca78352a077959d07cea1d01000000\n00ffffffff0270aaf00800000000160014d85c2b71d0060b09c9886aeb81\n5e50991dda124d00e1f5050000000016001400aea9a2e5f0f876a588df55\n46e8742d202020ffff603016000001012000c",https://github.com/bitcoin/bitcoin/pull/17156#issuecomment-543302776,543302776,
practicalswift,2019-10-17 18:39:55,"@achow101 \n\n```\n$ CC=clang CXX=clang++ ./configure --enable-fuzz \\n      --with-sanitizers=address,fuzzer,undefined\n$ make\n$ mkdir psbt-seeds/\n$ xxd -r -p > psbt-seeds/seed <<< ""70736274ff01009a020000000258e87a21b56daf0c23be8e7070456c336f\n7cbaa5c8757924f545887bb282dd750000000000ffffffff838d0427d0ec\n650a68aa46bb0b098aea4422c071b2ca78352a077959d07cea1d01000000\n00ffffffff0270aaf00",https://github.com/bitcoin/bitcoin/pull/17156#issuecomment-543308076,543308076,
achow101,2019-10-18 00:00:25,"I'm not really sure why that happens.\n\n```\ndiff --git a/src/script/sign.cpp b/src/script/sign.cpp\nindex 0ed92e8d5b..be24d002ad 100644\n--- a/src/script/sign.cpp\n+++ b/src/script/sign.cpp\n@@ -237,7 +237,11 @@ bool ProduceSignature(const SigningProvider& provider, const BaseSignatureCreato\n     if (P2SH) {\n         result.push_back(std::vector<unsigned char>(subscript.begin(), subsc",https://github.com/bitcoin/bitcoin/pull/17156#issuecomment-543416770,543416770,
practicalswift,2019-10-19 15:29:25,"@achow101 \n\n> ISTM we should see this elsewhere too but it doesn't seem like it.\n\nIsn't the difference that the *move* assignment operator is used in this case whereas the other non-warning cases you're referring to use the *copy* assignment operator?\n\nIf I'm correct then these two should trigger the UBSan warning:\n\n```\nsigdata.scriptSig = PushAll(result);\n```\n\n```\nCStrin",https://github.com/bitcoin/bitcoin/pull/17156#issuecomment-544160293,544160293,
achow101,2019-10-19 16:31:12,"> Isn't the difference that the _move_ assignment operator is used in this case whereas the other non-warning cases you're referring to use the _copy_ assignment operator?\n\nWhat I meant was that we should see this same error for any fuzzers that hit ProduceSignature. But I think we just don't have any fuzzers that reach ProduceSignature.",https://github.com/bitcoin/bitcoin/pull/17156#issuecomment-544168946,544168946,
achow101,2019-10-19 16:51:12,I've added a commit which adds a copy constructor and copy `operator=` to `CScript` which fixes the UBSan warning.,https://github.com/bitcoin/bitcoin/pull/17156#issuecomment-544171404,544171404,
practicalswift,2019-10-20 19:03:04,"@achow101 Good! Then we should be able to get rid of this UBSan suppression? :)\n\nhttps://github.com/bitcoin/bitcoin/blob/b8f041af2d2c89afdc14f8c632dfb7fecb535cb5/test/sanitizer_suppressions/ubsan#L2",https://github.com/bitcoin/bitcoin/pull/17156#issuecomment-544281583,544281583,
practicalswift,2019-10-22 15:10:35,"Judging from my testing we can get rid of both these UBSan suppressions as part of this PR:\n\nhttps://github.com/bitcoin/bitcoin/blob/b8f041af2d2c89afdc14f8c632dfb7fecb535cb5/test/sanitizer_suppressions/ubsan#L1-L2\n\nGreat!",https://github.com/bitcoin/bitcoin/pull/17156#issuecomment-545010103,545010103,
practicalswift,2019-11-04 09:20:08,"@achow101 Can you remove the UBSan suppressions? That will allow Travis to confirm that you've solved the alignment issue. Then this PR should be ready to go AFAICT.\n\n~~@fanquake Would you mind adding waiting for author-tag? :)~~",https://github.com/bitcoin/bitcoin/pull/17156#issuecomment-549272331,549272331,
practicalswift,2019-11-04 20:19:15,ACK db30e5bd6fb51913a4ce2177097be3ebcabab146 assuming Travis is happy too -- diff looks correct,https://github.com/bitcoin/bitcoin/pull/17156#issuecomment-549529326,549529326,
DrahtBot,2019-11-05 00:16:52,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#17211](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17211.html) (Allow fundrawtransaction and walletcreatefu",https://github.com/bitcoin/bitcoin/pull/17156#issuecomment-549606221,549606221,
practicalswift,2019-12-10 22:14:51,ACK a2800d704870cf120127a98769ed97b06c35042e -- diff looks correct,https://github.com/bitcoin/bitcoin/pull/17156#issuecomment-564283882,564283882,
achow101,2019-12-11 03:27:20,"I've added some more to this.\n\nI've added a couple of tests. In doing so, I also found a few additional places that we needed checks.\n\nAdditionally, I've replaced the `Reset` calls with the new `SetInvalid` so that we can return proper errors.",https://github.com/bitcoin/bitcoin/pull/17156#issuecomment-564363345,564363345,
practicalswift,2019-12-11 07:20:28,ACK 2dd91b86cd7ef09fa3ae280bfe99db8cfb6fe531 -- diff looks correct,https://github.com/bitcoin/bitcoin/pull/17156#issuecomment-564413228,564413228,
practicalswift,2019-12-11 18:20:07,"@Sjors Do you ACK the changes also with the nits unaddressed? If so please consider ACK:ing - it would be good to get this reviewed (and merged).\n\nIt bothers me that an RPC call with a malformed PSBT can bring down Bitcoin Core :)",https://github.com/bitcoin/bitcoin/pull/17156#issuecomment-564670060,564670060,
Sjors,2019-12-12 08:58:27,@practicalswift I haven't reviewed the rest of the code yet. My suggestions for improvements should not hold back merging. ,https://github.com/bitcoin/bitcoin/pull/17156#issuecomment-564912684,564912684,
gwillen,2019-12-14 00:34:20,"@achow101 what would you say to the alternate approach of having something like an all-in-one-place PSBT sanity checker? Could be added to IsSane() (which I would prefer), or if you think it might be too heavyweight (but I don't think so), a new method.\n\nThen we can immediately check every PSBT at the point of parsing, and not have to worry thereafter.\n\nIf you're amenable, I would be happy",https://github.com/bitcoin/bitcoin/pull/17156#issuecomment-565660251,565660251,
achow101,2019-12-16 15:37:25,@gwillen I don't think that we should have these checks at parse time. It's useful to have `decodepsbt` be able to decode psbts that are correctly formatted but logically incorrect (as we are doing here). Doing these checks at parse time would mean that `decodepsbt` would fail.,https://github.com/bitcoin/bitcoin/pull/17156#issuecomment-566113328,566113328,
gwillen,2019-12-16 18:24:55,"That makes sense. What do you think about having two separate checks -- a basic validity check at parse time, and a more thorough check that can be run before doing anything with the PSBT (other than displaying it as JSON)?\n\nI think it's probably a hazard to allow PSBTs to hang around which have inconsistencies that can lead to e.g. reading off the end of vectors, and count on individual use c",https://github.com/bitcoin/bitcoin/pull/17156#issuecomment-566181903,566181903,
achow101,2019-12-16 23:15:52,I think it makes to have a general consistency check for other commands. But I think we should still do error checking like this as a belt-and-suspenders. We could add the general consistency check in another pr.,https://github.com/bitcoin/bitcoin/pull/17156#issuecomment-566291980,566291980,
achow101,2019-12-17 15:50:47,"> However tests still pass if the new checks `... >= input.non_witness_utxo->vout.size()` are removed.\n\nReally? It fails for me. I removed the second commit and kept just the test from it. That test fails.",https://github.com/bitcoin/bitcoin/pull/17156#issuecomment-566601136,566601136,
promag,2019-12-18 00:33:22,"Try running the test with\n```diff\n--- a/src/wallet/psbtwallet.cpp\n+++ b/src/wallet/psbtwallet.cpp\n@@ -44,9 +44,6 @@ TransactionError FillPSBT(const CWallet* pwallet, PartiallySignedTransaction& ps\n         if (!input.witness_utxo.IsNull()) {\n             script = input.witness_utxo.scriptPubKey;\n         } else if (input.non_witness_utxo) {\n-            if (txin.prevout.n >= input.",https://github.com/bitcoin/bitcoin/pull/17156#issuecomment-566812394,566812394,
achow101,2020-01-06 17:58:25,"I've added test cases for the `SignPSBTInput` and `FillPSBT` checks. Since the `SignPSBTInput` check can't be reached via RPC (it gets caught by `FillPSBT` or `AnalyzePSBT`), I added the test case to the `psbt_updater_test` unit test.",https://github.com/bitcoin/bitcoin/pull/17156#issuecomment-571242018,571242018,
practicalswift,2020-01-06 21:33:33,"ACK deaa6dd144f5650b385658a0c4f9a014aff8dde2 -- only change since last ACK was the addition of tests\n\nWould be great to have this merged - this PR greatly improves the robustness of the PSBT code :)",https://github.com/bitcoin/bitcoin/pull/17156#issuecomment-571324181,571324181,
gwillen,2020-01-27 21:36:25,"tested ACK deaa6dd, would also like to see this merged!",https://github.com/bitcoin/bitcoin/pull/17156#issuecomment-578964902,578964902,
practicalswift,2020-01-27 23:29:13,"I really hoped this fix would make it to 0.19.1 :\\n\nIt doesn't feel good to ship with a known heap use-after-free bug (see #17149) which is reachable via RPC. \n\nNow that we that RPC whitelisting is merged (#12763) we no longer have the luxury of assuming that all RPC access is from fully trusted RPC consumers.\n\nThus the previous ""the RPC consumer is also the node operator"" assumption t",https://github.com/bitcoin/bitcoin/pull/17156#issuecomment-579005896,579005896,
promag,2020-01-28 08:15:09,IMO we should keep recommending trusted clients regardless of their whitelist. I hope RPC whitelisting doesn't give the impression that now the RPC interface can be made public..,https://github.com/bitcoin/bitcoin/pull/17156#issuecomment-579129752,579129752,
practicalswift,2020-01-28 17:28:26,"@promag I agree and in an ideal world all users would read and follow our recommendations :)\n\nUnfortunately a non-negligible subset of our users still expose their RPC ports publicly as can be verified empirically by running an Internet-wide TCP port scan using say [`masscan`](https://github.com/robertdavidgraham/masscan) (impressive software: an Internet-wide single-port scan can be as quick ",https://github.com/bitcoin/bitcoin/pull/17156#issuecomment-579364107,579364107,
sipa,2020-01-28 17:35:44,"These are not in conflict. We should obviously fix bugs in RPC, even if they only affect careless users (by whatever definition). At the same time, we still shouldn't recommend exposing RPC to the public, because it was not designed for that.",https://github.com/bitcoin/bitcoin/pull/17156#issuecomment-579367337,579367337,
practicalswift,2020-01-28 18:26:06,"> We should obviously fix bugs in RPC, even if they only affect careless users (by whatever definition).\n\nAgreed.\n\nLet's get rid of the heap use-after-free bug this PR fixes :)\n\nPlease review :)\n\n> At the same time, we still shouldn't recommend exposing RPC to the public, […]\n\nAgreed.\n",https://github.com/bitcoin/bitcoin/pull/17156#issuecomment-579388242,579388242,
practicalswift,2020-01-29 21:15:56,"Very glad to see this one merged!\n\nWe have another PSBT related issued to resolve too: the misaligned pointer use in `ProduceSignature(…)` (via `prevector`). While not PSBT specific the function `ProduceSignature(…)` is reachable from `AnalyzePSBT` (via `SignPSBTInput`):\n\n```\nprevector.h:453:19: runtime error: reference binding to misaligned address 0x7f63f89a4022 for type 'prevector<28,",https://github.com/bitcoin/bitcoin/pull/17156#issuecomment-579963266,579963266,
laanwj,2019-10-27 10:24:41,"Might want to add a comment in the code describing why this explicit copy constructor (which seems to be redundant) was added, otherwise it might be removed again with the next 'clean up warnings' PR.",https://github.com/bitcoin/bitcoin/pull/17156#discussion_r339335339,339335339,src/script/script.h
practicalswift,2019-10-27 12:40:32,"Agreed! That is also why it is important also to remove the UBSan suppressions as part of this PR: to catch non-refactoring nature of such a mistaken ""clean up"" in a future PR  :)\n\nThese needs to go:\n\nhttps://github.com/bitcoin/bitcoin/blob/b8f041af2d2c89afdc14f8c632dfb7fecb535cb5/test/sanitizer_suppressions/ubsan#L1-L2",https://github.com/bitcoin/bitcoin/pull/17156#discussion_r339340644,339340644,src/script/script.h
practicalswift,2019-11-04 10:33:46,I'm afraid this will trigger a sign-compare warning when compiling with Clang due to LHS being `int` and the RHS being `unsigned long` (`size_t`).,https://github.com/bitcoin/bitcoin/pull/17156#discussion_r341984253,341984253,src/psbt.cpp
achow101,2019-11-04 20:03:21,Added a comment and removed the suppressions.,https://github.com/bitcoin/bitcoin/pull/17156#discussion_r342244304,342244304,src/script/script.h
achow101,2019-11-04 20:03:26,Fixed,https://github.com/bitcoin/bitcoin/pull/17156#discussion_r342244341,342244341,src/psbt.cpp
MarcoFalke,2019-11-04 22:33:55,"Are you sure this is correct? This will reset the intermediate result to -1, and then accumulate all remaining values.",https://github.com/bitcoin/bitcoin/pull/17156#discussion_r342304795,342304795,src/node/psbt.cpp
achow101,2019-11-04 22:42:29,-1 will fail MoneyRange so later values that go through this will also always return -1.,https://github.com/bitcoin/bitcoin/pull/17156#discussion_r342307700,342307700,src/node/psbt.cpp
MarcoFalke,2019-11-04 22:44:35,Correct. Thx.,https://github.com/bitcoin/bitcoin/pull/17156#discussion_r342308366,342308366,src/node/psbt.cpp
MarcoFalke,2019-11-15 20:26:22,could explain how this would otherwise be undefined behavior and why this can't be fixed in `prevector.h`?,https://github.com/bitcoin/bitcoin/pull/17156#discussion_r346997910,346997910,src/script/script.h
achow101,2019-11-15 21:08:19,"I'm not sure why it would be undefined behavior,  but UBSan was triggering on it. I think prevector already has a copy constructor?",https://github.com/bitcoin/bitcoin/pull/17156#discussion_r347011705,347011705,src/script/script.h
MarcoFalke,2019-11-18 17:47:36,In that case I'd prefer to leave the third commit for a separate pull request. Changing those parts of the code without understanding why for the sole reason to please a sanitizer seems worrisome ,https://github.com/bitcoin/bitcoin/pull/17156#discussion_r347520135,347520135,src/script/script.h
achow101,2019-11-18 18:27:15,I've dropped the commit.,https://github.com/bitcoin/bitcoin/pull/17156#discussion_r347538497,347538497,src/script/script.h
promag,2019-12-10 23:13:05,"e769f25031a63c378f2efeb957b90a72a8524a5e\n\nAlso use `!MoneyRange(out_amt)`?",https://github.com/bitcoin/bitcoin/pull/17156#discussion_r356328921,356328921,src/node/psbt.cpp
promag,2019-12-10 23:13:44,"e769f25031a63c378f2efeb957b90a72a8524a5e\n\nnit, `{` in new line? (if you decide to keep this, see next comment)",https://github.com/bitcoin/bitcoin/pull/17156#discussion_r356329124,356329124,src/node/psbt.h
promag,2019-12-10 23:18:12,"e769f25031a63c378f2efeb957b90a72a8524a5e\n\nWhy not `return {};` instead of `Reset`? Same below, and then drop `PSBTAnalysis::Reset()`.  ",https://github.com/bitcoin/bitcoin/pull/17156#discussion_r356330520,356330520,src/node/psbt.cpp
promag,2019-12-10 23:24:40,"e769f25031a63c378f2efeb957b90a72a8524a5e\n\nUnnecessary check `MoneyRange(output_value)` - starts with zero and next value is already checked. Same with `total_in`.",https://github.com/bitcoin/bitcoin/pull/17156#discussion_r356332550,356332550,src/rpc/rawtransaction.cpp
promag,2019-12-11 00:28:18,"Drop first check, same below.",https://github.com/bitcoin/bitcoin/pull/17156#discussion_r356349820,356349820,src/node/psbt.cpp
achow101,2019-12-11 03:25:22,Done,https://github.com/bitcoin/bitcoin/pull/17156#discussion_r356387723,356387723,src/node/psbt.cpp
achow101,2019-12-11 03:25:28,Removed Reset,https://github.com/bitcoin/bitcoin/pull/17156#discussion_r356387739,356387739,src/node/psbt.h
achow101,2019-12-11 03:25:33,Removed Reset,https://github.com/bitcoin/bitcoin/pull/17156#discussion_r356387757,356387757,src/node/psbt.cpp
achow101,2019-12-11 03:25:39,Done,https://github.com/bitcoin/bitcoin/pull/17156#discussion_r356387778,356387778,src/rpc/rawtransaction.cpp
achow101,2019-12-11 03:26:07,"Done, but the check below is necessary. It's how the accumulator is guaranteed to return -1.",https://github.com/bitcoin/bitcoin/pull/17156#discussion_r356387895,356387895,src/node/psbt.cpp
promag,2019-12-11 08:28:17,"> but the check below is necessary.\n\nOh yeah sorry.",https://github.com/bitcoin/bitcoin/pull/17156#discussion_r356456587,356456587,src/node/psbt.cpp
Sjors,2019-12-11 11:44:07,nit: `inputs.at(input_index)`,https://github.com/bitcoin/bitcoin/pull/17156#discussion_r356551562,356551562,src/psbt.cpp
Sjors,2019-12-11 11:48:01,nit: `vin.at(i)` (also in the `FinalizeAndExtractPSBT` loops),https://github.com/bitcoin/bitcoin/pull/17156#discussion_r356553132,356553132,src/node/psbt.cpp
achow101,2019-12-11 17:41:57,meh. don't feel like changing,https://github.com/bitcoin/bitcoin/pull/17156#discussion_r356740090,356740090,src/node/psbt.cpp
achow101,2019-12-11 17:42:06,Unrelated style changes are unrelated,https://github.com/bitcoin/bitcoin/pull/17156#discussion_r356740160,356740160,src/psbt.cpp
Sjors,2019-12-12 08:57:40,"It's not a style change, `at` checks these array indexes ""are within bounds"" and throws an exception otherwise. There's a bunch of places in this code where we don't use iterators and assume that two arrays are the same size.",https://github.com/bitcoin/bitcoin/pull/17156#discussion_r357023841,357023841,src/psbt.cpp
gwillen,2019-12-14 00:24:10,"Throwing an exception here would actually be rude, yes? So it would be better to establish invariants that ensure we are in-bounds, or else add a bounds check ourselves otherwise?",https://github.com/bitcoin/bitcoin/pull/17156#discussion_r357879394,357879394,src/psbt.cpp
promag,2019-12-16 23:58:09,"> establish invariants that ensure we are in-bounds\n\nAgree, I think it makes no sense to add bound checks here.\n\nIn any case, here or followup this could use\n```\nconst_reference operator[]( size_type pos ) const;\n```\nsince `PSBTInput` is not that trivial.",https://github.com/bitcoin/bitcoin/pull/17156#discussion_r358528829,358528829,src/psbt.cpp
gwillen,2019-12-17 01:09:29,"That would just mean changing ""PSBTInput input"" to ""const PSBTInput& input""?",https://github.com/bitcoin/bitcoin/pull/17156#discussion_r358551968,358551968,src/psbt.cpp
promag,2019-12-17 01:27:29,Yes.,https://github.com/bitcoin/bitcoin/pull/17156#discussion_r358556333,358556333,src/psbt.cpp
