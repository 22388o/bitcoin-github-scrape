jonasschnelli,2018-03-18T05:03:54Z,utACK a6e5ddc0df2ad86ca0352076a656dadab5345abb,https://github.com/bitcoin/bitcoin/pull/12712#issuecomment-373973313,373973313,
meshcollider,2018-03-18T10:10:16Z,utACK https://github.com/bitcoin/bitcoin/pull/12712/commits/a6e5ddc0df2ad86ca0352076a656dadab5345abb,https://github.com/bitcoin/bitcoin/pull/12712#issuecomment-373986303,373986303,
donaloconnor,2018-03-18T19:36:52Z,utACK https://github.com/bitcoin/bitcoin/commit/a6e5ddc0df2ad86ca0352076a656dadab5345abb,https://github.com/bitcoin/bitcoin/pull/12712#issuecomment-374037961,374037961,
jimpo,2018-03-18T23:26:47Z,"-0\n\nThis adds a new codebase specific function for which a perfectly adequate language-standard one exists. It's just one more thing for people new to the codebase to see and ask themselves ""but why not static_cast""? Converting the invocations from `*static_cast<X*>(this)` to `static_cast<X&>(*this)` seems fine and marginally better though.",https://github.com/bitcoin/bitcoin/pull/12712#issuecomment-374066113,374066113,
sipa,2018-03-18T23:32:59Z,"@jimpo That doesn't work when the constness of the argument isn't known.\n\nI guess the context isn't entirely clear in this PR, but the goal is to have serialization functions that use single implementation that taken a const argument when serializing and non-const argument when deserializing. Simple static casts aren't enough, as they don't maintain constness, but I'd be happy to learn about ano",https://github.com/bitcoin/bitcoin/pull/12712#issuecomment-374066819,374066819,
sipa,2018-03-19T17:14:59Z,"@ryanofsky I was trying to avoid as much macro magic as possible.\n\n> In other contexts, AsType could even be dangerous since it potentially returns references to temporaries.\n\nCan you give an example?",https://github.com/bitcoin/bitcoin/pull/12712#issuecomment-374292754,374292754,
ryanofsky,2018-03-19T17:55:59Z,"> @ryanofsky I was trying to avoid as much macro magic as possible.\n\nTo be clear, I'm not suggesting replacing `AsType` with a macro, I'm just suggesting using it internally in `READWRITEAS` and not exposing it to callers.\n\nI don't think macro magic calls like `READWRITEAS(child, Parent)` are great, but they seem preferable to a macro magic calls combined with template magic like `READWRIT",https://github.com/bitcoin/bitcoin/pull/12712#issuecomment-374306808,374306808,
sipa,2018-03-19T18:10:53Z,"> `const Base& i = CastAs<Base>(Derived());`\n\nSure, but that has nothing to do with the `AsType` construction, I think? This works just as well:\n\n`const Derived& i = Derived();`\n\nOr even:\n\n`const Base& i = Derived();`\n\n> It just seems like the CastAs construct is unusual and unsafe and something that doesn't really make sense outside of the context of our READWRITE macro.\n\n",https://github.com/bitcoin/bitcoin/pull/12712#issuecomment-374311777,374311777,
ryanofsky,2018-03-19T18:58:54Z,"> Yes, but it can't participate in a READWRITE with multiple arguments at once.\n\nThat's a good point. I can see how it is a benefit of the current approach. I'm not sure it actually justifies exposing the cast construct, but makes sense.\n\n> const Derived& i = Derived();\n\nThis is safe due to reference lifetime extension (https://abseil.io/tips/107). My example wasn't safe because lifeti",https://github.com/bitcoin/bitcoin/pull/12712#issuecomment-374328028,374328028,
sipa,2018-03-19T19:37:04Z,"> I'm not sure it actually justifies exposing the cast construct, but makes sense.\n\nRight, I guess that's the question.\n\nAfter the discussion above with @jimpo and @ryanofsky I'm fine with either the `READWRITEAS(type, obj)` or the `READWRITE(AsType<type>(obj))` approach (this PR). If we choose the former, I'll close this PR and structure things differently.",https://github.com/bitcoin/bitcoin/pull/12712#issuecomment-374342139,374342139,
ryanofsky,2018-03-19T20:05:39Z,"Can't speak for @jimpo. I prefer `READWRITEAS` to `AsType`, but I think you should choose whichever approach you like better. ",https://github.com/bitcoin/bitcoin/pull/12712#issuecomment-374353268,374353268,
jimpo,2018-03-19T20:12:27Z,I also prefer `READWRITEAS` because it contains the scope of the logic. But if you go with `AsType` I would elaborate on the in-code comments to explain that it is designed for use with `READWRITE` and not as a general-purpose cast.,https://github.com/bitcoin/bitcoin/pull/12712#issuecomment-374355927,374355927,
sipa,2018-03-19T20:15:07Z,"Thanks, good points.\n\nI'll redo this.",https://github.com/bitcoin/bitcoin/pull/12712#issuecomment-374356952,374356952,
