[
  {
    "sha": "d9ff591d42158e8a0a4ebdcf5fbb74978c483202",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOWZmNTkxZDQyMTU4ZThhMGE0ZWJkY2Y1ZmJiNzQ5NzhjNDgzMjAy",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-09-09T10:48:10Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-09-19T13:53:47Z"
      },
      "message": "Move static global randomizer seeds into CConnman",
      "tree": {
        "sha": "73b2ef1fae0b984e7612126c63846a7b39ccb2d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/73b2ef1fae0b984e7612126c63846a7b39ccb2d7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d9ff591d42158e8a0a4ebdcf5fbb74978c483202",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9ff591d42158e8a0a4ebdcf5fbb74978c483202",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d9ff591d42158e8a0a4ebdcf5fbb74978c483202",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9ff591d42158e8a0a4ebdcf5fbb74978c483202/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "254ea97e940f06139efb3720e78ebe3c736b24ca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/254ea97e940f06139efb3720e78ebe3c736b24ca",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/254ea97e940f06139efb3720e78ebe3c736b24ca"
      }
    ],
    "stats": {
      "total": 58,
      "additions": 34,
      "deletions": 24
    },
    "files": [
      {
        "sha": "7b20e5b07ad082a7d95d14f2e7c58827e79e2163",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9ff591d42158e8a0a4ebdcf5fbb74978c483202/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9ff591d42158e8a0a4ebdcf5fbb74978c483202/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=d9ff591d42158e8a0a4ebdcf5fbb74978c483202",
        "patch": "@@ -1116,7 +1116,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     // ********************************************************* Step 6: network initialization\n \n     assert(!g_connman);\n-    g_connman = std::unique_ptr<CConnman>(new CConnman());\n+    g_connman = std::unique_ptr<CConnman>(new CConnman(GetRand(std::numeric_limits<uint64_t>::max()), GetRand(std::numeric_limits<uint64_t>::max())));\n     CConnman& connman = *g_connman;\n \n     RegisterNodeSignals(GetNodeSignals());"
      },
      {
        "sha": "1e191421b9d3b2152d48760f1ab8d1080aef62b8",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9ff591d42158e8a0a4ebdcf5fbb74978c483202/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9ff591d42158e8a0a4ebdcf5fbb74978c483202/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=d9ff591d42158e8a0a4ebdcf5fbb74978c483202",
        "patch": "@@ -113,6 +113,8 @@ CScript COINBASE_FLAGS;\n \n const string strMessageMagic = \"Bitcoin Signed Message:\\n\";\n \n+static const uint64_t RANDOMIZER_ID_ADDRESS_RELAY = 0x3cac0035b5866b90ULL; // SHA256(\"main address relay\")[0:8]\n+\n // Internal stuff\n namespace {\n \n@@ -4739,11 +4741,9 @@ static void RelayAddress(const CAddress& addr, bool fReachable, CConnman& connma\n     // Relay to a limited number of other nodes\n     // Use deterministic randomness to send to the same nodes for 24 hours\n     // at a time so the addrKnowns of the chosen nodes prevent repeats\n-    static const uint64_t salt0 = GetRand(std::numeric_limits<uint64_t>::max());\n-    static const uint64_t salt1 = GetRand(std::numeric_limits<uint64_t>::max());\n     uint64_t hashAddr = addr.GetHash();\n     std::multimap<uint64_t, CNode*> mapMix;\n-    const CSipHasher hasher = CSipHasher(salt0, salt1).Write(hashAddr << 32).Write((GetTime() + hashAddr) / (24*60*60));\n+    const CSipHasher hasher = connman.GetDeterministicRandomizer(RANDOMIZER_ID_ADDRESS_RELAY).Write(hashAddr << 32).Write((GetTime() + hashAddr) / (24*60*60));\n \n     auto sortfunc = [&mapMix, &hasher](CNode* pnode) {\n         if (pnode->nVersion >= CADDR_TIME_VERSION) {"
      },
      {
        "sha": "5863f9d3f7ee16f5f1093a3afe15ccab9a5652af",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 10,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9ff591d42158e8a0a4ebdcf5fbb74978c483202/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9ff591d42158e8a0a4ebdcf5fbb74978c483202/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=d9ff591d42158e8a0a4ebdcf5fbb74978c483202",
        "patch": "@@ -63,6 +63,7 @@\n \n const static std::string NET_MESSAGE_COMMAND_OTHER = \"*other*\";\n \n+static const uint64_t RANDOMIZER_ID_NETGROUP = 0x6c0edd8036ef4036ULL; // SHA256(\"netgroup\")[0:8]\n //\n // Global state variables\n //\n@@ -387,7 +388,7 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n         addrman.Attempt(addrConnect, fCountFailure);\n \n         // Add node\n-        CNode* pnode = new CNode(GetNewNodeId(), nLocalServices, GetBestHeight(), hSocket, addrConnect, pszDest ? pszDest : \"\", false);\n+        CNode* pnode = new CNode(GetNewNodeId(), nLocalServices, GetBestHeight(), hSocket, addrConnect, CalculateKeyedNetGroup(addrConnect), pszDest ? pszDest : \"\", false);\n         GetNodeSignals().InitializeNode(pnode->GetId(), pnode);\n         pnode->AddRef();\n \n@@ -1022,7 +1023,7 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n         }\n     }\n \n-    CNode* pnode = new CNode(GetNewNodeId(), nLocalServices, GetBestHeight(), hSocket, addr, \"\", true);\n+    CNode* pnode = new CNode(GetNewNodeId(), nLocalServices, GetBestHeight(), hSocket, addr, CalculateKeyedNetGroup(addr), \"\", true);\n     GetNodeSignals().InitializeNode(pnode->GetId(), pnode);\n     pnode->AddRef();\n     pnode->fWhitelisted = whitelisted;\n@@ -2023,7 +2024,7 @@ void Discover(boost::thread_group& threadGroup)\n #endif\n }\n \n-CConnman::CConnman()\n+CConnman::CConnman(uint64_t nSeed0In, uint64_t nSeed1In) : nSeed0(nSeed0In), nSeed1(nSeed1In)\n {\n     setBannedIsDirty = false;\n     fAddressesInitialized = false;\n@@ -2108,7 +2109,7 @@ bool CConnman::Start(boost::thread_group& threadGroup, CScheduler& scheduler, st\n     if (pnodeLocalHost == NULL) {\n         CNetAddr local;\n         LookupHost(\"127.0.0.1\", local, false);\n-        pnodeLocalHost = new CNode(GetNewNodeId(), nLocalServices, GetBestHeight(), INVALID_SOCKET, CAddress(CService(local, 0), nLocalServices));\n+        pnodeLocalHost = new CNode(GetNewNodeId(), nLocalServices, GetBestHeight(), INVALID_SOCKET, CAddress(CService(local, 0), nLocalServices), 0);\n         GetNodeSignals().InitializeNode(pnodeLocalHost->GetId(), pnodeLocalHost);\n     }\n \n@@ -2498,10 +2499,10 @@ void CNode::Fuzz(int nChance)\n unsigned int CConnman::GetReceiveFloodSize() const { return nReceiveFloodSize; }\n unsigned int CConnman::GetSendBufferSize() const{ return nSendBufferMaxSize; }\n \n-CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn, SOCKET hSocketIn, const CAddress& addrIn, const std::string& addrNameIn, bool fInboundIn) :\n+CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn, SOCKET hSocketIn, const CAddress& addrIn, uint64_t nKeyedNetGroupIn, const std::string& addrNameIn, bool fInboundIn) :\n     ssSend(SER_NETWORK, INIT_PROTO_VERSION),\n     addr(addrIn),\n-    nKeyedNetGroup(CalculateKeyedNetGroup(addrIn)),\n+    nKeyedNetGroup(nKeyedNetGroupIn),\n     addrKnown(5000, 0.001),\n     filterInventoryKnown(50000, 0.000001)\n {\n@@ -2694,12 +2695,14 @@ int64_t PoissonNextSend(int64_t nNow, int average_interval_seconds) {\n     return nNow + (int64_t)(log1p(GetRand(1ULL << 48) * -0.0000000000000035527136788 /* -1/2^48 */) * average_interval_seconds * -1000000.0 + 0.5);\n }\n \n-/* static */ uint64_t CNode::CalculateKeyedNetGroup(const CAddress& ad)\n+CSipHasher CConnman::GetDeterministicRandomizer(uint64_t id)\n {\n-    static const uint64_t k0 = GetRand(std::numeric_limits<uint64_t>::max());\n-    static const uint64_t k1 = GetRand(std::numeric_limits<uint64_t>::max());\n+    return CSipHasher(nSeed0, nSeed1).Write(id);\n+}\n \n+uint64_t CConnman::CalculateKeyedNetGroup(const CAddress& ad)\n+{\n     std::vector<unsigned char> vchNetGroup(ad.GetGroup());\n \n-    return CSipHasher(k0, k1).Write(&vchNetGroup[0], vchNetGroup.size()).Finalize();\n+    return GetDeterministicRandomizer(RANDOMIZER_ID_NETGROUP).Write(&vchNetGroup[0], vchNetGroup.size()).Finalize();\n }"
      },
      {
        "sha": "07760f9d58d2837eefa2d80eb99b815df7cac350",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 10,
        "deletions": 3,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9ff591d42158e8a0a4ebdcf5fbb74978c483202/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9ff591d42158e8a0a4ebdcf5fbb74978c483202/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=d9ff591d42158e8a0a4ebdcf5fbb74978c483202",
        "patch": "@@ -11,6 +11,7 @@\n #include \"amount.h\"\n #include \"bloom.h\"\n #include \"compat.h\"\n+#include \"hash.h\"\n #include \"limitedmap.h\"\n #include \"netaddress.h\"\n #include \"protocol.h\"\n@@ -121,7 +122,7 @@ class CConnman\n         unsigned int nSendBufferMaxSize = 0;\n         unsigned int nReceiveFloodSize = 0;\n     };\n-    CConnman();\n+    CConnman(uint64_t seed0, uint64_t seed1);\n     ~CConnman();\n     bool Start(boost::thread_group& threadGroup, CScheduler& scheduler, std::string& strNodeError, Options options);\n     void Stop();\n@@ -294,6 +295,8 @@ class CConnman\n     void SetBestHeight(int height);\n     int GetBestHeight() const;\n \n+    /** Get a unique deterministic randomizer. */\n+    CSipHasher GetDeterministicRandomizer(uint64_t id);\n \n private:\n     struct ListenSocket {\n@@ -311,6 +314,8 @@ class CConnman\n     void ThreadSocketHandler();\n     void ThreadDNSAddressSeed();\n \n+    uint64_t CalculateKeyedNetGroup(const CAddress& ad);\n+\n     CNode* FindNode(const CNetAddr& ip);\n     CNode* FindNode(const CSubNet& subNet);\n     CNode* FindNode(const std::string& addrName);\n@@ -388,6 +393,9 @@ class CConnman\n     int nMaxFeeler;\n     std::atomic<int> nBestHeight;\n     CClientUIInterface* clientInterface;\n+\n+    /** SipHasher seeds for deterministic randomness */\n+    const uint64_t nSeed0, nSeed1;\n };\n extern std::unique_ptr<CConnman> g_connman;\n void Discover(boost::thread_group& threadGroup);\n@@ -656,14 +664,13 @@ class CNode\n     CAmount lastSentFeeFilter;\n     int64_t nextSendTimeFeeFilter;\n \n-    CNode(NodeId id, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn, SOCKET hSocketIn, const CAddress &addrIn, const std::string &addrNameIn = \"\", bool fInboundIn = false);\n+    CNode(NodeId id, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn, SOCKET hSocketIn, const CAddress &addrIn, uint64_t nKeyedNetGroupIn, const std::string &addrNameIn = \"\", bool fInboundIn = false);\n     ~CNode();\n \n private:\n     CNode(const CNode&);\n     void operator=(const CNode&);\n \n-    static uint64_t CalculateKeyedNetGroup(const CAddress& ad);\n \n     uint64_t nLocalHostNonce;\n     ServiceFlags nLocalServices;"
      },
      {
        "sha": "97abeb7211c8b4eaf2f9f17f815c238a140593b2",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9ff591d42158e8a0a4ebdcf5fbb74978c483202/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9ff591d42158e8a0a4ebdcf5fbb74978c483202/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=d9ff591d42158e8a0a4ebdcf5fbb74978c483202",
        "patch": "@@ -48,7 +48,7 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\n {\n     connman->ClearBanned();\n     CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n-    CNode dummyNode1(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr1, \"\", true);\n+    CNode dummyNode1(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr1, 0, \"\", true);\n     GetNodeSignals().InitializeNode(dummyNode1.GetId(), &dummyNode1);\n     dummyNode1.nVersion = 1;\n     Misbehaving(dummyNode1.GetId(), 100); // Should get banned\n@@ -57,7 +57,7 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\n     BOOST_CHECK(!connman->IsBanned(ip(0xa0b0c001|0x0000ff00))); // Different IP, not banned\n \n     CAddress addr2(ip(0xa0b0c002), NODE_NONE);\n-    CNode dummyNode2(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr2, \"\", true);\n+    CNode dummyNode2(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr2, 1, \"\", true);\n     GetNodeSignals().InitializeNode(dummyNode2.GetId(), &dummyNode2);\n     dummyNode2.nVersion = 1;\n     Misbehaving(dummyNode2.GetId(), 50);\n@@ -74,7 +74,7 @@ BOOST_AUTO_TEST_CASE(DoS_banscore)\n     connman->ClearBanned();\n     mapArgs[\"-banscore\"] = \"111\"; // because 11 is my favorite number\n     CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n-    CNode dummyNode1(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr1, \"\", true);\n+    CNode dummyNode1(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr1, 3, \"\", true);\n     GetNodeSignals().InitializeNode(dummyNode1.GetId(), &dummyNode1);\n     dummyNode1.nVersion = 1;\n     Misbehaving(dummyNode1.GetId(), 100);\n@@ -96,7 +96,7 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n     SetMockTime(nStartTime); // Overrides future calls to GetTime()\n \n     CAddress addr(ip(0xa0b0c001), NODE_NONE);\n-    CNode dummyNode(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr, \"\", true);\n+    CNode dummyNode(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr, 4, \"\", true);\n     GetNodeSignals().InitializeNode(dummyNode.GetId(), &dummyNode);\n     dummyNode.nVersion = 1;\n "
      },
      {
        "sha": "680708533e4754640ebf52b0c0b67a1d17a60937",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9ff591d42158e8a0a4ebdcf5fbb74978c483202/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9ff591d42158e8a0a4ebdcf5fbb74978c483202/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=d9ff591d42158e8a0a4ebdcf5fbb74978c483202",
        "patch": "@@ -164,12 +164,12 @@ BOOST_AUTO_TEST_CASE(cnode_simple_test)\n     bool fInboundIn = false;\n \n     // Test that fFeeler is false by default.\n-    CNode* pnode1 = new CNode(id++, NODE_NETWORK, height, hSocket, addr, pszDest, fInboundIn);\n+    CNode* pnode1 = new CNode(id++, NODE_NETWORK, height, hSocket, addr, 0, pszDest, fInboundIn);\n     BOOST_CHECK(pnode1->fInbound == false);\n     BOOST_CHECK(pnode1->fFeeler == false);\n \n     fInboundIn = true;\n-    CNode* pnode2 = new CNode(id++, NODE_NETWORK, height, hSocket, addr, pszDest, fInboundIn);\n+    CNode* pnode2 = new CNode(id++, NODE_NETWORK, height, hSocket, addr, 1, pszDest, fInboundIn);\n     BOOST_CHECK(pnode2->fInbound == true);\n     BOOST_CHECK(pnode2->fFeeler == false);\n }"
      },
      {
        "sha": "02843d8525ea046d139307d6614824c410f3e2a0",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9ff591d42158e8a0a4ebdcf5fbb74978c483202/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9ff591d42158e8a0a4ebdcf5fbb74978c483202/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=d9ff591d42158e8a0a4ebdcf5fbb74978c483202",
        "patch": "@@ -72,7 +72,7 @@ TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(cha\n         nScriptCheckThreads = 3;\n         for (int i=0; i < nScriptCheckThreads-1; i++)\n             threadGroup.create_thread(&ThreadScriptCheck);\n-        g_connman = std::unique_ptr<CConnman>(new CConnman());\n+        g_connman = std::unique_ptr<CConnman>(new CConnman(0x1337, 0x1337)); // Deterministic randomness for tests.\n         connman = g_connman.get();\n         RegisterNodeSignals(GetNodeSignals());\n }"
      }
    ]
  }
]