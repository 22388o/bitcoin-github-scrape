practicalswift,2020-12-04 23:39:39,Concept ACK,https://github.com/bitcoin/bitcoin/pull/20571#issuecomment-739078439,739078439,
hebasto,2020-12-06 15:25:00,"Updated 1f16514614d37edd6e916e0aca731d445101f8f7 -> b6fb4fa999b927dce07bce239532b0f07bd393a2 ([pr20571.01](https://github.com/hebasto/bitcoin/commits/pr20571.01) -> [pr20571.02](https://github.com/hebasto/bitcoin/commits/pr20571.02), [diff](https://github.com/hebasto/bitcoin/compare/pr20571.01..pr20571.02)):\n\n- addressed @elichai's [comment](https://github.com/bitcoin/bitcoin/pull/20571#discus",https://github.com/bitcoin/bitcoin/pull/20571#issuecomment-739518088,739518088,
hebasto,2020-12-06 21:03:35,Closing as this solution seems not future-proof.,https://github.com/bitcoin/bitcoin/pull/20571#issuecomment-739563491,739563491,
elichai,2020-12-06 10:14:24,"Maybe we should add some overflow assert here? it would be nice if `256_u8` won't compile.\nthe downside is that this function might be used outside of constexpr, but that's very unlikely",https://github.com/bitcoin/bitcoin/pull/20571#discussion_r537006012,537006012,src/util/string.h
elichai,2020-12-06 10:14:36,ie `assert(byte <= std::numeric_limits<uint8_t>::max());`,https://github.com/bitcoin/bitcoin/pull/20571#discussion_r537006073,537006073,src/util/string.h
hebasto,2020-12-06 13:46:49,"> Maybe we should add some overflow assert here? it would be nice if `256_u8` won't compile.\n\nAgree...\n\n> ie `assert(byte <= std::numeric_limits<uint8_t>::max());`\n\n... but this won't work, unfortunately.",https://github.com/bitcoin/bitcoin/pull/20571#discussion_r537042423,537042423,src/util/string.h
elichai,2020-12-06 14:17:44,"Why not? \nhttps://godbolt.org/z/hTjch7",https://github.com/bitcoin/bitcoin/pull/20571#discussion_r537047978,537047978,src/util/string.h
hebasto,2020-12-06 14:20:04,It is not a compile-time error.,https://github.com/bitcoin/bitcoin/pull/20571#discussion_r537048372,537048372,src/util/string.h
elichai,2020-12-06 16:02:28,"You're right, idk how I didn't realized that",https://github.com/bitcoin/bitcoin/pull/20571#discussion_r537067778,537067778,src/util/string.h
sipa,2020-12-06 18:33:30,"You can use runtime asserts in constexpr functions. It just means invocations that would trigger that revert to being runtime evaluated. If the result is assigned to a constexpr variable, it'll error at compile time.",https://github.com/bitcoin/bitcoin/pull/20571#discussion_r537097513,537097513,src/util/string.h
MarcoFalke,2020-12-06 18:52:52,"Why does c++ not allow constexpr params, so that a static_assert could be used here?",https://github.com/bitcoin/bitcoin/pull/20571#discussion_r537100701,537100701,src/util/string.h
hebasto,2020-12-06 18:53:57,:man_shrugging: ,https://github.com/bitcoin/bitcoin/pull/20571#discussion_r537100860,537100860,src/util/string.h
sipa,2020-12-06 19:12:37,C++20 adds [`consteval`](https://en.cppreference.com/w/cpp/language/consteval) which would be useful here.,https://github.com/bitcoin/bitcoin/pull/20571#discussion_r537103999,537103999,src/util/string.h
MarcoFalke,2020-12-06 19:23:37,"I'd probably prefer `std::make_array` to be backported. https://en.cppreference.com/w/cpp/experimental/make_array\n\nThis would allow to write `MakeArray<uint8_t>(1,2,3)`",https://github.com/bitcoin/bitcoin/pull/20571#discussion_r537105793,537105793,src/util/string.h
hebasto,2020-12-06 19:53:11,[`std::to_array`](https://en.cppreference.com/w/cpp/container/array/to_array) from C++20 ?,https://github.com/bitcoin/bitcoin/pull/20571#discussion_r537110907,537110907,src/util/string.h
