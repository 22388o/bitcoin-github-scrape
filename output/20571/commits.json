[
  {
    "sha": "b6fb4fa999b927dce07bce239532b0f07bd393a2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNmZiNGZhOTk5YjkyN2RjZTA3YmNlMjM5NTMyYjBmMDdiZDM5M2Ey",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-12-04T20:42:47Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-12-06T15:16:04Z"
      },
      "message": "refactor: Use deduction guide for std::array<uint8_t, N>",
      "tree": {
        "sha": "137cf57c5ff2fd7f3aa5ab861fd449d70a15c79c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/137cf57c5ff2fd7f3aa5ab861fd449d70a15c79c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b6fb4fa999b927dce07bce239532b0f07bd393a2",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl/M9bQACgkQQQEIES5+\nqB83ZA/7BlnhUkjw+oXYk3nrpebpJby8KIYRqpjrbl2KVxYJrKzev1wOmRXyxst/\n6lIY2lWD0VrBY1rkxhy1m5CN4DnWBZJ0TwVErGimXbTiDEY4c3zZdwK8wRW03MIQ\nEHUwLqMQC5FHWZaRcT53tvnx9Ce3HmVdWr26sTJEXc+3lH/T9W7C/Elo6iV68VVW\nXOpFU7il/jrPXcPk2XhjqxyhacETuldL3tIMfg1juiQGYk4pJHsGaGxvO/TC4doj\nZpnDcsLq/qcHckp7cobkd9uRs0XWJfkTjImDoavBaCHmxQWy7xShc68PTNlzGeWN\npKN/Et5zr4gh4fQ6UC97527En9kE6WDQu+2p5lXR0VsVmWNe9HbQ6Ao73yAGrofU\nr+PjHOEz7298Ye//L6heodJfg8pBPIwMzpC9Qwl0qnJ93llIjrrDiVv68uq9T6yb\niHkrUKPFW4Oh+8K9eto2uyS27WZrDmK6euoxkkm8x8qmawhmClKpYU0qPtl6BRxe\nC4RulZ3zfHvv+MknAF47wwPykgByZXBALGUfzAXbJdWAgpwUTkzSS9iez59AbMCf\nnsfFrbr7SqGzouh3B/4bEtxhgHkdEW0GNNGV+xu5pJCkI0GwssZDSftaS+2BPLXH\ng26LUJZ7JpifA8/5dWIejeuCRPfqy12zjqe3R/U5YI3pXmbyy9k=\n=ALMF\n-----END PGP SIGNATURE-----",
        "payload": "tree 137cf57c5ff2fd7f3aa5ab861fd449d70a15c79c\nparent dca80ffb45fcc8e6eedb6dc481d500dedab4248b\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1607114567 +0200\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1607267764 +0200\n\nrefactor: Use deduction guide for std::array<uint8_t, N>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6fb4fa999b927dce07bce239532b0f07bd393a2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b6fb4fa999b927dce07bce239532b0f07bd393a2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6fb4fa999b927dce07bce239532b0f07bd393a2/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dca80ffb45fcc8e6eedb6dc481d500dedab4248b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dca80ffb45fcc8e6eedb6dc481d500dedab4248b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dca80ffb45fcc8e6eedb6dc481d500dedab4248b"
      }
    ],
    "stats": {
      "total": 68,
      "additions": 42,
      "deletions": 26
    },
    "files": [
      {
        "sha": "6d245144865d83983c20804beb7dcdb66a53bbdb",
        "filename": "src/netaddress.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 20,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6fb4fa999b927dce07bce239532b0f07bd393a2/src/netaddress.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6fb4fa999b927dce07bce239532b0f07bd393a2/src/netaddress.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.cpp?ref=b6fb4fa999b927dce07bce239532b0f07bd393a2",
        "patch": "@@ -315,7 +315,8 @@ bool CNetAddr::IsRFC2544() const\n \n bool CNetAddr::IsRFC3927() const\n {\n-    return IsIPv4() && HasPrefix(m_addr, std::array<uint8_t, 2>{169, 254});\n+    constexpr std::array prefix{169_u8, 254_u8};\n+    return IsIPv4() && HasPrefix(m_addr, prefix);\n }\n \n bool CNetAddr::IsRFC6598() const\n@@ -325,37 +326,42 @@ bool CNetAddr::IsRFC6598() const\n \n bool CNetAddr::IsRFC5737() const\n {\n-    return IsIPv4() && (HasPrefix(m_addr, std::array<uint8_t, 3>{192, 0, 2}) ||\n-                        HasPrefix(m_addr, std::array<uint8_t, 3>{198, 51, 100}) ||\n-                        HasPrefix(m_addr, std::array<uint8_t, 3>{203, 0, 113}));\n+    constexpr std::array prefix_a{192_u8, 0_u8, 2_u8};\n+    constexpr std::array prefix_b{198_u8, 51_u8, 100_u8};\n+    constexpr std::array prefix_c{203_u8, 0_u8, 113_u8};\n+    return IsIPv4() && (HasPrefix(m_addr, prefix_a) || HasPrefix(m_addr, prefix_b) || HasPrefix(m_addr, prefix_c));\n }\n \n bool CNetAddr::IsRFC3849() const\n {\n-    return IsIPv6() && HasPrefix(m_addr, std::array<uint8_t, 4>{0x20, 0x01, 0x0D, 0xB8});\n+    constexpr std::array prefix{0x20_u8, 0x01_u8, 0x0D_u8, 0xB8_u8};\n+    return IsIPv6() && HasPrefix(m_addr, prefix);\n }\n \n bool CNetAddr::IsRFC3964() const\n {\n-    return IsIPv6() && HasPrefix(m_addr, std::array<uint8_t, 2>{0x20, 0x02});\n+    constexpr std::array prefix{0x20_u8, 0x02_u8};\n+    return IsIPv6() && HasPrefix(m_addr, prefix);\n }\n \n bool CNetAddr::IsRFC6052() const\n {\n-    return IsIPv6() &&\n-           HasPrefix(m_addr, std::array<uint8_t, 12>{0x00, 0x64, 0xFF, 0x9B, 0x00, 0x00,\n-                                                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00});\n+    constexpr std::array prefix{0x00_u8, 0x64_u8, 0xFF_u8, 0x9B_u8, 0x00_u8, 0x00_u8,\n+                                0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8};\n+    return IsIPv6() && HasPrefix(m_addr, prefix);\n }\n \n bool CNetAddr::IsRFC4380() const\n {\n-    return IsIPv6() && HasPrefix(m_addr, std::array<uint8_t, 4>{0x20, 0x01, 0x00, 0x00});\n+    constexpr std::array prefix{0x20_u8, 0x01_u8, 0x00_u8, 0x00_u8};\n+    return IsIPv6() && HasPrefix(m_addr, prefix);\n }\n \n bool CNetAddr::IsRFC4862() const\n {\n-    return IsIPv6() && HasPrefix(m_addr, std::array<uint8_t, 8>{0xFE, 0x80, 0x00, 0x00,\n-                                                                0x00, 0x00, 0x00, 0x00});\n+    constexpr std::array prefix{0xFE_u8, 0x80_u8, 0x00_u8, 0x00_u8,\n+                                0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8};\n+    return IsIPv6() && HasPrefix(m_addr, prefix);\n }\n \n bool CNetAddr::IsRFC4193() const\n@@ -365,26 +371,27 @@ bool CNetAddr::IsRFC4193() const\n \n bool CNetAddr::IsRFC6145() const\n {\n-    return IsIPv6() &&\n-           HasPrefix(m_addr, std::array<uint8_t, 12>{0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n-                                                     0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00});\n+    constexpr std::array prefix{0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8,\n+                                0x00_u8, 0x00_u8, 0xFF_u8, 0xFF_u8, 0x00_u8, 0x00_u8};\n+    return IsIPv6() && HasPrefix(m_addr, prefix);\n }\n \n bool CNetAddr::IsRFC4843() const\n {\n-    return IsIPv6() && HasPrefix(m_addr, std::array<uint8_t, 3>{0x20, 0x01, 0x00}) &&\n-           (m_addr[3] & 0xF0) == 0x10;\n+    constexpr std::array prefix{0x20_u8, 0x01_u8, 0x00_u8};\n+    return IsIPv6() && HasPrefix(m_addr, prefix) && (m_addr[3] & 0xF0) == 0x10;\n }\n \n bool CNetAddr::IsRFC7343() const\n {\n-    return IsIPv6() && HasPrefix(m_addr, std::array<uint8_t, 3>{0x20, 0x01, 0x00}) &&\n-           (m_addr[3] & 0xF0) == 0x20;\n+    constexpr std::array prefix{0x20_u8, 0x01_u8, 0x00_u8};\n+    return IsIPv6() && HasPrefix(m_addr, prefix) && (m_addr[3] & 0xF0) == 0x20;\n }\n \n bool CNetAddr::IsHeNet() const\n {\n-    return IsIPv6() && HasPrefix(m_addr, std::array<uint8_t, 4>{0x20, 0x01, 0x04, 0x70});\n+    constexpr std::array prefix{0x20_u8, 0x01_u8, 0x04_u8, 0x70_u8};\n+    return IsIPv6() && HasPrefix(m_addr, prefix);\n }\n \n /**"
      },
      {
        "sha": "83e1416939ad4642cb809ef9cd7db99e2c702e01",
        "filename": "src/netaddress.h",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6fb4fa999b927dce07bce239532b0f07bd393a2/src/netaddress.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6fb4fa999b927dce07bce239532b0f07bd393a2/src/netaddress.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.h?ref=b6fb4fa999b927dce07bce239532b0f07bd393a2",
        "patch": "@@ -70,25 +70,25 @@ enum Network\n \n /// Prefix of an IPv6 address when it contains an embedded IPv4 address.\n /// Used when (un)serializing addresses in ADDRv1 format (pre-BIP155).\n-static const std::array<uint8_t, 12> IPV4_IN_IPV6_PREFIX{\n-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF\n+static constexpr std::array IPV4_IN_IPV6_PREFIX{\n+    0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0xFF_u8, 0xFF_u8\n };\n \n /// Prefix of an IPv6 address when it contains an embedded TORv2 address.\n /// Used when (un)serializing addresses in ADDRv1 format (pre-BIP155).\n /// Such dummy IPv6 addresses are guaranteed to not be publicly routable as they\n /// fall under RFC4193's fc00::/7 subnet allocated to unique-local addresses.\n-static const std::array<uint8_t, 6> TORV2_IN_IPV6_PREFIX{\n-    0xFD, 0x87, 0xD8, 0x7E, 0xEB, 0x43\n+static constexpr std::array TORV2_IN_IPV6_PREFIX{\n+    0xFD_u8, 0x87_u8, 0xD8_u8, 0x7E_u8, 0xEB_u8, 0x43_u8\n };\n \n /// Prefix of an IPv6 address when it contains an embedded \"internal\" address.\n /// Used when (un)serializing addresses in ADDRv1 format (pre-BIP155).\n /// The prefix comes from 0xFD + SHA256(\"bitcoin\")[0:5].\n /// Such dummy IPv6 addresses are guaranteed to not be publicly routable as they\n /// fall under RFC4193's fc00::/7 subnet allocated to unique-local addresses.\n-static const std::array<uint8_t, 6> INTERNAL_IN_IPV6_PREFIX{\n-    0xFD, 0x6B, 0x88, 0xC0, 0x87, 0x24 // 0xFD + sha256(\"bitcoin\")[0:5].\n+static constexpr std::array INTERNAL_IN_IPV6_PREFIX{\n+    0xFD_u8, 0x6B_u8, 0x88_u8, 0xC0_u8, 0x87_u8, 0x24_u8 // 0xFD + sha256(\"bitcoin\")[0:5].\n };\n \n /// Size of IPv4 address (in bytes)."
      },
      {
        "sha": "dc6ef8ed084735d1bff2ad1e5440655005d875d0",
        "filename": "src/util/string.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6fb4fa999b927dce07bce239532b0f07bd393a2/src/util/string.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6fb4fa999b927dce07bce239532b0f07bd393a2/src/util/string.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/string.h?ref=b6fb4fa999b927dce07bce239532b0f07bd393a2",
        "patch": "@@ -10,6 +10,7 @@\n #include <algorithm>\n #include <array>\n #include <cstring>\n+#include <limits>\n #include <locale>\n #include <sstream>\n #include <string>\n@@ -87,4 +88,12 @@ template <typename T1, size_t PREFIX_LEN>\n            std::equal(std::begin(prefix), std::end(prefix), std::begin(obj));\n }\n \n+/**\n+ * User-defined literal for byte constants.\n+ */\n+constexpr uint8_t operator \"\"_u8(unsigned long long byte)\n+{\n+    return byte <= std::numeric_limits<uint8_t>::max() ? byte : throw std::overflow_error(\"The value does not fit uint8_t.\");\n+}\n+\n #endif // BITCOIN_UTIL_STRENCODINGS_H"
      }
    ]
  }
]