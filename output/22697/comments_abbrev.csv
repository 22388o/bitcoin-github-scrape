Zero-1729,2021-08-13 12:34:39,"Concept ACK \n\nThanks for splitting up the changes!",https://github.com/bitcoin/bitcoin/pull/22697#issuecomment-898427713,898427713,
DrahtBot,2021-08-13 14:15:57,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/22697#issuecomment-898489060,898489060,
theStack,2021-08-13 14:19:35,Concept ACK,https://github.com/bitcoin/bitcoin/pull/22697#issuecomment-898491499,898491499,
amitiuttarwar,2021-08-14 00:54:45,concept ACK ,https://github.com/bitcoin/bitcoin/pull/22697#issuecomment-898784453,898784453,
practicalswift,2021-08-15 18:33:07,Concept ACK,https://github.com/bitcoin/bitcoin/pull/22697#issuecomment-899092918,899092918,
jnewbery,2021-08-17 08:48:48,rebased on master,https://github.com/bitcoin/bitcoin/pull/22697#issuecomment-900113407,900113407,
jnewbery,2021-08-18 08:30:57,Rebased on master and addressed review comments from @jonatack and @fanquake.,https://github.com/bitcoin/bitcoin/pull/22697#issuecomment-900925684,900925684,
jnewbery,2021-08-18 09:57:48,Thanks for the review @MarcoFalke. I've addressed all your comments.,https://github.com/bitcoin/bitcoin/pull/22697#issuecomment-900982749,900982749,
jnewbery,2021-08-18 13:04:08,Rebased,https://github.com/bitcoin/bitcoin/pull/22697#issuecomment-901097570,901097570,
laanwj,2021-08-18 14:50:59,"Concept ACK on getting rid of the `Clear()` function, seems more robust this way.",https://github.com/bitcoin/bitcoin/pull/22697#issuecomment-901180854,901180854,
amitiuttarwar,2021-08-18 20:02:02,"looks like both failing builds are failing in `addrman_tests` -> `addrman_serialization`\n\n[AppVeyor](https://ci.appveyor.com/project/DrahtBot/bitcoin/builds/40428513#L61):\n```\nC:\projects\bitcoin\src\test\addrman_tests.cpp(758): Entering test case ""addrman_serialization""\nunknown location(0): fatal error: in ""addrman_tests/addrman_serialization"": stack overflow\n```\n\n[Win64](https://",https://github.com/bitcoin/bitcoin/pull/22697#issuecomment-901392680,901392680,
jnewbery,2021-08-19 10:31:38,Thank you for the review @laanwj @amitiuttarwar @vasild @MarcoFalke. I believe that I've addressed all of your review comments.,https://github.com/bitcoin/bitcoin/pull/22697#issuecomment-901801141,901801141,
laanwj,2021-08-19 13:34:20,Code review ACK 4d2fa97031a6f31da984d4c2c105447ed692c6ed,https://github.com/bitcoin/bitcoin/pull/22697#issuecomment-901920506,901920506,
jonatack,2021-08-13 13:42:55,"a8bad2e16ed41c8d9 nit, prefer prefix iterator\n```suggestion\n    for (size_t i{0}; i < addrman_count; ++i) {\n```",https://github.com/bitcoin/bitcoin/pull/22697#discussion_r688524323,688524323,src/bench/addrman.cpp
fanquake,2021-08-18 05:51:30,Should this message move too?,https://github.com/bitcoin/bitcoin/pull/22697#discussion_r690921078,690921078,src/net.cpp
fanquake,2021-08-18 05:58:24,"What is ""never""? ",https://github.com/bitcoin/bitcoin/pull/22697#discussion_r690923912,690923912,src/addrman.h
jnewbery,2021-08-18 08:23:28,Yes! Thanks. Moved.,https://github.com/bitcoin/bitcoin/pull/22697#discussion_r691015313,691015313,src/net.cpp
jnewbery,2021-08-18 08:28:54,'never' means that `Good()` has not been called since the CAddrMan object was constructed. I moved this comment from the constructor (where `nLastGood` was previously being set) to the member declaration (which now has a default initialization value).,https://github.com/bitcoin/bitcoin/pull/22697#discussion_r691019487,691019487,src/addrman.h
jnewbery,2021-08-18 08:30:19,Done,https://github.com/bitcoin/bitcoin/pull/22697#discussion_r691020686,691020686,src/bench/addrman.cpp
MarcoFalke,2021-08-18 08:41:17,"is there a reason why you prefer `unique_ptr`? `unique_ptr` will result in a different memory layout, will add an unneeded abstraction and will make the diff larger than needed.\n\nSimply using a new object worked fine for me:\n\n```diff\ndiff --git a/src/test/addrman_tests.cpp b/src/test/addrman_tests.cpp\nindex 3c64461605..67c549689d 100644\n--- a/src/test/addrman_tests.cpp\n+++ b/src/te",https://github.com/bitcoin/bitcoin/pull/22697#discussion_r691029194,691029194,src/test/addrman_tests.cpp
MarcoFalke,2021-08-18 08:45:09,"not a huge difference here, but could use `reserve` (optional) and `emplace` to avoid unique_ptr?",https://github.com/bitcoin/bitcoin/pull/22697#discussion_r691032222,691032222,src/bench/addrman.cpp
MarcoFalke,2021-08-18 08:46:41,Same here? Could use new object with different name or even split the test into two and keep the same name?,https://github.com/bitcoin/bitcoin/pull/22697#discussion_r691033355,691033355,src/test/addrman_tests.cpp
MarcoFalke,2021-08-18 08:48:13,"it might be better to just remove this, as it is equivalent to just starting a fresh fuzz input that fails deser",https://github.com/bitcoin/bitcoin/pull/22697#discussion_r691034731,691034731,src/test/fuzz/addrman.cpp
MarcoFalke,2021-08-18 08:50:54,"this line isn't move-only, so could add `{` while touching?",https://github.com/bitcoin/bitcoin/pull/22697#discussion_r691036749,691036749,src/init.cpp
MarcoFalke,2021-08-18 08:52:13,I slightly prefer `{}` constructors (`uint256{1}`) or `uint256::ONE`.,https://github.com/bitcoin/bitcoin/pull/22697#discussion_r691037769,691037769,src/test/addrman_tests.cpp
jnewbery,2021-08-18 09:39:50,"I did try that, but couldn't get it to work. `emplace()` requires the type to be [MoveInsertable](https://en.cppreference.com/w/cpp/named_req/MoveInsertable), which `CAddrMan` isn't since its move constructor is implicitly deleted.\n\nIf you have a suggestion for how to do this, I'd be happy to incorporate it.",https://github.com/bitcoin/bitcoin/pull/22697#discussion_r691074691,691074691,src/bench/addrman.cpp
jnewbery,2021-08-18 09:51:52,Removed,https://github.com/bitcoin/bitcoin/pull/22697#discussion_r691083948,691083948,src/test/fuzz/addrman.cpp
jnewbery,2021-08-18 09:55:18,"Yes, I agree that's better. Changed to `uint256::ONE`.",https://github.com/bitcoin/bitcoin/pull/22697#discussion_r691086453,691086453,src/test/addrman_tests.cpp
jnewbery,2021-08-18 09:57:04,Done,https://github.com/bitcoin/bitcoin/pull/22697#discussion_r691087818,691087818,src/init.cpp
jnewbery,2021-08-18 09:57:16,Done,https://github.com/bitcoin/bitcoin/pull/22697#discussion_r691087946,691087946,src/test/addrman_tests.cpp
jnewbery,2021-08-18 09:57:24,Done,https://github.com/bitcoin/bitcoin/pull/22697#discussion_r691088019,691088019,src/test/addrman_tests.cpp
laanwj,2021-08-18 14:46:07,"What is the reasoning for moving this to init.cpp? I think this goes in the wrong direction, of having parts take care of their own initialization instead of init.cpp being a hodge-podge of initialization functionality.",https://github.com/bitcoin/bitcoin/pull/22697#discussion_r691310217,691310217,src/init.cpp
jnewbery,2021-08-18 16:22:58,"Since #20228, addrman is owned by the `node.context` struct and gets constructed inside the `AppInitMain()` function. That PR includes motivation for why that is.\n\nSince `AppInitMain()` is responsible for constructing the addrman, it should also be responsible for making sure addrman deserializes from peers.dat (and recovers if there's an error). Before this PR, addrman peers.dat derserializat",https://github.com/bitcoin/bitcoin/pull/22697#discussion_r691413337,691413337,src/init.cpp
vasild,2021-08-19 07:42:51,"Hardcoding the number of runs could cripple the test (results vary too much). It is better to avoid that if possible, so that nanobench chooses how many runs to execute based on variance. In this case it is possible to avoid hardcoding, and also shorter:\n\n```cpp\nstatic void AddrManAdd(benchmark::Bench& bench)\n{\n    CreateAddresses();\n\n    bench.run([&] { \n        auto addrman = std",https://github.com/bitcoin/bitcoin/pull/22697#discussion_r691866096,691866096,src/bench/addrman.cpp
vasild,2021-08-19 07:50:11,"This would skip the message ""Flushed 0 addresses to peers.dat"" which was previously printed from `CConnman::DumpAddresses()`, is that intentional?",https://github.com/bitcoin/bitcoin/pull/22697#discussion_r691871131,691871131,src/init.cpp
vasild,2021-08-19 07:52:40,"nit: I think `{}` is just clutter. Also, few objects below are constructed without it.",https://github.com/bitcoin/bitcoin/pull/22697#discussion_r691872884,691872884,src/test/addrman_tests.cpp
vasild,2021-08-19 08:09:39,"Previously the `Clear()` method would not have consumed anything from `fuzzed_data_provider`. Now, the `CAddrManDeterministic` constructor will consume one `uint256`, one `bool` and maybe one `RandomLengthBitVector`. I guess this is ok (it will invalidate the corpus, but I guess that is ok too).",https://github.com/bitcoin/bitcoin/pull/22697#discussion_r691885202,691885202,src/test/fuzz/addrman.cpp
MarcoFalke,2021-08-19 08:21:24,The seeds are already invalidated by removing an item in `CallOneOf` below ;),https://github.com/bitcoin/bitcoin/pull/22697#discussion_r691893910,691893910,src/test/fuzz/addrman.cpp
MarcoFalke,2021-08-19 08:25:13,"Could also remove the make_unique and use the beautiful curly brackets?\n\n```cpp\nstatic void AddrManAdd(benchmark::Bench& bench)\n{\n    CreateAddresses();\n\n    bench.run([&] { \n        CAddrMan addrman{/* deterministic */ false, /* consistency_check_ratio */ 0};\n        AddAddressesToAddrMan(addrman);\n    }); \n}   \n",https://github.com/bitcoin/bitcoin/pull/22697#discussion_r691896788,691896788,src/bench/addrman.cpp
jnewbery,2021-08-19 10:16:54,I've reverted this (and the similar change to the `addrman_serialization` test below). Constructing many large `CAddrMan` objects on the stack causes a stack overflow on some systems: https://github.com/bitcoin/bitcoin/pull/22697#issuecomment-901392680.,https://github.com/bitcoin/bitcoin/pull/22697#discussion_r691979535,691979535,src/test/addrman_tests.cpp
jnewbery,2021-08-19 10:17:10,Reverted (see https://github.com/bitcoin/bitcoin/pull/22697#discussion_r691979535),https://github.com/bitcoin/bitcoin/pull/22697#discussion_r691979693,691979693,src/test/addrman_tests.cpp
jnewbery,2021-08-19 10:28:42,This has now been reverted so the `CAddrManTest` objects are constructed using `std::make_unique()`.,https://github.com/bitcoin/bitcoin/pull/22697#discussion_r691987321,691987321,src/test/addrman_tests.cpp
jnewbery,2021-08-19 10:30:45,"Yes, I don't think that log is necessary or helpful.",https://github.com/bitcoin/bitcoin/pull/22697#discussion_r691988715,691988715,src/init.cpp
jnewbery,2021-08-19 10:30:48,"The reason to construct the addrman objects outside the bench run is to prevent the time spent in constructing the object being included in the bench. I think that would be especially bad and could lead to variance if we're allocating memory for the object by making a unique_ptr.\n\nI've reverted to Marco's suggested version, which shouldn't be any worse than the current code, which calls `Clear",https://github.com/bitcoin/bitcoin/pull/22697#discussion_r691988738,691988738,src/bench/addrman.cpp
laanwj,2021-08-19 13:18:50,"Ok, I agree. I hope it can be factored out again at some point to a place that makes sense.",https://github.com/bitcoin/bitcoin/pull/22697#discussion_r692102040,692102040,src/init.cpp
MarcoFalke,2021-08-20 10:57:09,See #22754,https://github.com/bitcoin/bitcoin/pull/22697#discussion_r692857462,692857462,src/init.cpp
