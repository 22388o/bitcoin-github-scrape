[
  {
    "sha": "181a1207ba6bd179d181f3e2534ef8676565ce72",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxODFhMTIwN2JhNmJkMTc5ZDE4MWYzZTI1MzRlZjg2NzY1NjVjZTcy",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-08-05T10:09:55Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-08-18T13:00:52Z"
      },
      "message": "[addrman] Move peers.dat parsing to init.cpp",
      "tree": {
        "sha": "3732dfba53c61dfd09383a18ff86325e593394eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3732dfba53c61dfd09383a18ff86325e593394eb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/181a1207ba6bd179d181f3e2534ef8676565ce72",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/181a1207ba6bd179d181f3e2534ef8676565ce72",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/181a1207ba6bd179d181f3e2534ef8676565ce72",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/181a1207ba6bd179d181f3e2534ef8676565ce72/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e35c4a3d80578e8feff1f1ae5db81d3c0992a865",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e35c4a3d80578e8feff1f1ae5db81d3c0992a865",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e35c4a3d80578e8feff1f1ae5db81d3c0992a865"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 13,
      "deletions": 16
    },
    "files": [
      {
        "sha": "2ca6cebee7d486844a3aa6ab4805effddcba484f",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/181a1207ba6bd179d181f3e2534ef8676565ce72/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/181a1207ba6bd179d181f3e2534ef8676565ce72/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=181a1207ba6bd179d181f3e2534ef8676565ce72",
        "patch": "@@ -1167,6 +1167,19 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     assert(!node.addrman);\n     auto check_addrman = std::clamp<int32_t>(args.GetArg(\"-checkaddrman\", DEFAULT_ADDRMAN_CONSISTENCY_CHECKS), 0, 1000000);\n     node.addrman = std::make_unique<CAddrMan>(/* deterministic */ false, /* consistency_check_ratio */ check_addrman);\n+    {\n+        // Load addresses from peers.dat\n+        uiInterface.InitMessage(_(\"Loading P2P addresses\u2026\").translated);\n+        int64_t nStart = GetTimeMillis();\n+        CAddrDB adb;\n+        if (adb.Read(*node.addrman)) {\n+            LogPrintf(\"Loaded %i addresses from peers.dat  %dms\\n\", node.addrman->size(), GetTimeMillis() - nStart);\n+        } else {\n+            node.addrman->Clear(); // Addrman can be in an inconsistent state after failure, reset it\n+            LogPrintf(\"Recreating peers.dat\\n\");\n+            adb.Write(*node.addrman);\n+        }\n+    }\n     assert(!node.banman);\n     node.banman = std::make_unique<BanMan>(gArgs.GetDataDirNet() / \"banlist\", &uiInterface, args.GetArg(\"-bantime\", DEFAULT_MISBEHAVING_BANTIME));\n     assert(!node.connman);"
      },
      {
        "sha": "57b8844d6bf31a9f20b09b3efc1ee353c8e1ce97",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 16,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/181a1207ba6bd179d181f3e2534ef8676565ce72/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/181a1207ba6bd179d181f3e2534ef8676565ce72/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=181a1207ba6bd179d181f3e2534ef8676565ce72",
        "patch": "@@ -2534,22 +2534,6 @@ bool CConnman::Start(CScheduler& scheduler, const Options& connOptions)\n         AddAddrFetch(strDest);\n     }\n \n-    if (m_client_interface) {\n-        m_client_interface->InitMessage(_(\"Loading P2P addresses\u2026\").translated);\n-    }\n-    // Load addresses from peers.dat\n-    int64_t nStart = GetTimeMillis();\n-    {\n-        CAddrDB adb;\n-        if (adb.Read(addrman))\n-            LogPrintf(\"Loaded %i addresses from peers.dat  %dms\\n\", addrman.size(), GetTimeMillis() - nStart);\n-        else {\n-            addrman.Clear(); // Addrman can be in an inconsistent state after failure, reset it\n-            LogPrintf(\"Recreating peers.dat\\n\");\n-            DumpAddresses();\n-        }\n-    }\n-\n     if (m_use_addrman_outgoing) {\n         // Load addresses from anchors.dat\n         m_anchors = ReadAnchors(gArgs.GetDataDirNet() / ANCHORS_DATABASE_FILENAME);"
      }
    ]
  },
  {
    "sha": "e8e7392311edf44278d76743bebe902d4ac94662",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplOGU3MzkyMzExZWRmNDQyNzhkNzY3NDNiZWJlOTAyZDRhYzk0NjYy",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-08-05T10:15:35Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-08-18T13:00:52Z"
      },
      "message": "[addrman] Don't call Clear() if parsing peers.dat fails\n\nNow that we manage the lifespan of node.addrman, we can just reset\nnode.addrman to a newly initialized CAddrMan if parsing peers.dat\nfails, eliminating the possibility that Clear() leaves some old state\nbehind.",
      "tree": {
        "sha": "d7b2db78ea0d261867dabed52be17d4c25ecd68b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d7b2db78ea0d261867dabed52be17d4c25ecd68b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e8e7392311edf44278d76743bebe902d4ac94662",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8e7392311edf44278d76743bebe902d4ac94662",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e8e7392311edf44278d76743bebe902d4ac94662",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8e7392311edf44278d76743bebe902d4ac94662/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "181a1207ba6bd179d181f3e2534ef8676565ce72",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/181a1207ba6bd179d181f3e2534ef8676565ce72",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/181a1207ba6bd179d181f3e2534ef8676565ce72"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d741badc92b20e47bb09618432ebf6cbf7183b66",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8e7392311edf44278d76743bebe902d4ac94662/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8e7392311edf44278d76743bebe902d4ac94662/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=e8e7392311edf44278d76743bebe902d4ac94662",
        "patch": "@@ -1175,7 +1175,8 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n         if (adb.Read(*node.addrman)) {\n             LogPrintf(\"Loaded %i addresses from peers.dat  %dms\\n\", node.addrman->size(), GetTimeMillis() - nStart);\n         } else {\n-            node.addrman->Clear(); // Addrman can be in an inconsistent state after failure, reset it\n+            // Addrman can be in an inconsistent state after failure, reset it\n+            node.addrman = std::make_unique<CAddrMan>(/* deterministic */ false, /* consistency_check_ratio */ check_addrman);\n             LogPrintf(\"Recreating peers.dat\\n\");\n             adb.Write(*node.addrman);\n         }"
      }
    ]
  },
  {
    "sha": "ed9ba8af08f857bda3ce2f77413317374c22d7b4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZDliYThhZjA4Zjg1N2JkYTNjZTJmNzc0MTMzMTczNzRjMjJkN2I0",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-08-05T12:51:52Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-08-18T13:00:52Z"
      },
      "message": "[tests] Remove CAddrMan.Clear() call from CAddrDB::Read()\n\n`bool CAddrDB::Read(CAddrMan& addr, CDataStream& ssPeers)` is _only_\ncalled from the tests, and the call to addr.Clear() only exists so that\na test that Clear() is called passes. Remove that test and the call.",
      "tree": {
        "sha": "4ee650b69fdb99c1fa4d97c2d5c9b6c0ed07c197",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4ee650b69fdb99c1fa4d97c2d5c9b6c0ed07c197"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ed9ba8af08f857bda3ce2f77413317374c22d7b4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed9ba8af08f857bda3ce2f77413317374c22d7b4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ed9ba8af08f857bda3ce2f77413317374c22d7b4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed9ba8af08f857bda3ce2f77413317374c22d7b4/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e8e7392311edf44278d76743bebe902d4ac94662",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8e7392311edf44278d76743bebe902d4ac94662",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e8e7392311edf44278d76743bebe902d4ac94662"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 2,
      "deletions": 8
    },
    "files": [
      {
        "sha": "a5383be7cf7c65508520b069516df711b3c046d1",
        "filename": "src/addrdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 6,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed9ba8af08f857bda3ce2f77413317374c22d7b4/src/addrdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed9ba8af08f857bda3ce2f77413317374c22d7b4/src/addrdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrdb.cpp?ref=ed9ba8af08f857bda3ce2f77413317374c22d7b4",
        "patch": "@@ -244,12 +244,7 @@ bool CAddrDB::Read(CAddrMan& addr)\n \n bool CAddrDB::Read(CAddrMan& addr, CDataStream& ssPeers)\n {\n-    bool ret = DeserializeDB(ssPeers, addr, false);\n-    if (!ret) {\n-        // Ensure addrman is left in a clean state\n-        addr.Clear();\n-    }\n-    return ret;\n+    return DeserializeDB(ssPeers, addr, false);\n }\n \n void DumpAnchors(const fs::path& anchors_db_path, const std::vector<CAddress>& anchors)"
      },
      {
        "sha": "255b5076e77f2bd91ae115577ea4872d8186b9bf",
        "filename": "src/test/addrman_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed9ba8af08f857bda3ce2f77413317374c22d7b4/src/test/addrman_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed9ba8af08f857bda3ce2f77413317374c22d7b4/src/test/addrman_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/addrman_tests.cpp?ref=ed9ba8af08f857bda3ce2f77413317374c22d7b4",
        "patch": "@@ -1083,13 +1083,12 @@ BOOST_AUTO_TEST_CASE(caddrdb_read_corrupted)\n     BOOST_CHECK(addrman1.size() == 1);\n     BOOST_CHECK(exceptionThrown);\n \n-    // Test that CAddrDB::Read leaves addrman in a clean state if de-serialization fails.\n+    // Test that CAddrDB::Read fails if peers.dat is corrupt\n     CDataStream ssPeers2 = AddrmanToStream(addrmanCorrupted);\n \n     CAddrMan addrman2(/* deterministic */ false, /* consistency_check_ratio */ 100);\n     BOOST_CHECK(addrman2.size() == 0);\n     BOOST_CHECK(!CAddrDB::Read(addrman2, ssPeers2));\n-    BOOST_CHECK(addrman2.size() == 0);\n }\n \n "
      }
    ]
  },
  {
    "sha": "406be5ff9699874dc1d38d11f036e33cbdb820c9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MDZiZTVmZjk2OTk4NzRkYzFkMzhkMTFmMDM2ZTMzY2JkYjgyMGM5",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-08-05T13:08:48Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-08-19T10:26:53Z"
      },
      "message": "[addrman] Remove all public uses of CAddrMan.Clear() from the tests\n\nJust use unique_ptr<CAddrMan>s and reset the pointer if a frest addrman is required.\nAlso make CAddrMan::Clear() private to ensure that no call sites are missed.",
      "tree": {
        "sha": "4637e90a588ec23dcff5d539ecef3319dcb25eaa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4637e90a588ec23dcff5d539ecef3319dcb25eaa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/406be5ff9699874dc1d38d11f036e33cbdb820c9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/406be5ff9699874dc1d38d11f036e33cbdb820c9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/406be5ff9699874dc1d38d11f036e33cbdb820c9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/406be5ff9699874dc1d38d11f036e33cbdb820c9/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ed9ba8af08f857bda3ce2f77413317374c22d7b4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed9ba8af08f857bda3ce2f77413317374c22d7b4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ed9ba8af08f857bda3ce2f77413317374c22d7b4"
      }
    ],
    "stats": {
      "total": 129,
      "additions": 56,
      "deletions": 73
    },
    "files": [
      {
        "sha": "c2df87e9863d452744b5d5ac429e3bda23d7d34f",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/406be5ff9699874dc1d38d11f036e33cbdb820c9/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/406be5ff9699874dc1d38d11f036e33cbdb820c9/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=406be5ff9699874dc1d38d11f036e33cbdb820c9",
        "patch": "@@ -471,6 +471,7 @@ class CAddrMan\n         Check();\n     }\n \n+private:\n     void Clear()\n         EXCLUSIVE_LOCKS_REQUIRED(!cs)\n     {\n@@ -496,6 +497,7 @@ class CAddrMan\n         mapAddr.clear();\n     }\n \n+public:\n     explicit CAddrMan(bool deterministic, int32_t consistency_check_ratio)\n         : insecure_rand{deterministic},\n           m_consistency_check_ratio{consistency_check_ratio}"
      },
      {
        "sha": "d69a65181111295ac86c26ab9c665ffe544aac09",
        "filename": "src/bench/addrman.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/406be5ff9699874dc1d38d11f036e33cbdb820c9/src/bench/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/406be5ff9699874dc1d38d11f036e33cbdb820c9/src/bench/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/addrman.cpp?ref=406be5ff9699874dc1d38d11f036e33cbdb820c9",
        "patch": "@@ -72,11 +72,9 @@ static void AddrManAdd(benchmark::Bench& bench)\n {\n     CreateAddresses();\n \n-    CAddrMan addrman(/* deterministic */ false, /* consistency_check_ratio */ 0);\n-\n     bench.run([&] {\n+        CAddrMan addrman{/* deterministic */ false, /* consistency_check_ratio */ 0};\n         AddAddressesToAddrMan(addrman);\n-        addrman.Clear();\n     });\n }\n "
      },
      {
        "sha": "50be3426308ff152a8bfb3e864a7d694994cb5c4",
        "filename": "src/test/addrman_tests.cpp",
        "status": "modified",
        "additions": 49,
        "deletions": 64,
        "changes": 113,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/406be5ff9699874dc1d38d11f036e33cbdb820c9/src/test/addrman_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/406be5ff9699874dc1d38d11f036e33cbdb820c9/src/test/addrman_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/addrman_tests.cpp?ref=406be5ff9699874dc1d38d11f036e33cbdb820c9",
        "patch": "@@ -132,16 +132,6 @@ class CAddrManTest : public CAddrMan\n          int64_t nLastTry = GetAdjustedTime()-61;\n          Attempt(addr, count_failure, nLastTry);\n      }\n-\n-    void Clear()\n-    {\n-        CAddrMan::Clear();\n-        if (deterministic) {\n-            LOCK(cs);\n-            nKey = uint256{1};\n-            insecure_rand = FastRandomContext(true);\n-        }\n-    }\n };\n \n static CNetAddr ResolveIP(const std::string& ip)\n@@ -175,27 +165,27 @@ BOOST_FIXTURE_TEST_SUITE(addrman_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(addrman_simple)\n {\n-    CAddrManTest addrman;\n+    auto addrman = std::make_unique<CAddrManTest>();\n \n     CNetAddr source = ResolveIP(\"252.2.2.2\");\n \n     // Test: Does Addrman respond correctly when empty.\n-    BOOST_CHECK_EQUAL(addrman.size(), 0U);\n-    CAddrInfo addr_null = addrman.Select();\n+    BOOST_CHECK_EQUAL(addrman->size(), 0U);\n+    CAddrInfo addr_null = addrman->Select();\n     BOOST_CHECK_EQUAL(addr_null.ToString(), \"[::]:0\");\n \n     // Test: Does Addrman::Add work as expected.\n     CService addr1 = ResolveService(\"250.1.1.1\", 8333);\n-    BOOST_CHECK(addrman.Add({CAddress(addr1, NODE_NONE)}, source));\n-    BOOST_CHECK_EQUAL(addrman.size(), 1U);\n-    CAddrInfo addr_ret1 = addrman.Select();\n+    BOOST_CHECK(addrman->Add({CAddress(addr1, NODE_NONE)}, source));\n+    BOOST_CHECK_EQUAL(addrman->size(), 1U);\n+    CAddrInfo addr_ret1 = addrman->Select();\n     BOOST_CHECK_EQUAL(addr_ret1.ToString(), \"250.1.1.1:8333\");\n \n     // Test: Does IP address deduplication work correctly.\n     //  Expected dup IP should not be added.\n     CService addr1_dup = ResolveService(\"250.1.1.1\", 8333);\n-    BOOST_CHECK(!addrman.Add({CAddress(addr1_dup, NODE_NONE)}, source));\n-    BOOST_CHECK_EQUAL(addrman.size(), 1U);\n+    BOOST_CHECK(!addrman->Add({CAddress(addr1_dup, NODE_NONE)}, source));\n+    BOOST_CHECK_EQUAL(addrman->size(), 1U);\n \n \n     // Test: New table has one addr and we add a diff addr we should\n@@ -205,21 +195,16 @@ BOOST_AUTO_TEST_CASE(addrman_simple)\n     // success.\n \n     CService addr2 = ResolveService(\"250.1.1.2\", 8333);\n-    BOOST_CHECK(addrman.Add({CAddress(addr2, NODE_NONE)}, source));\n-    BOOST_CHECK(addrman.size() >= 1);\n+    BOOST_CHECK(addrman->Add({CAddress(addr2, NODE_NONE)}, source));\n+    BOOST_CHECK(addrman->size() >= 1);\n \n-    // Test: AddrMan::Clear() should empty the new table.\n-    addrman.Clear();\n-    BOOST_CHECK_EQUAL(addrman.size(), 0U);\n-    CAddrInfo addr_null2 = addrman.Select();\n-    BOOST_CHECK_EQUAL(addr_null2.ToString(), \"[::]:0\");\n-\n-    // Test: AddrMan::Add multiple addresses works as expected\n+    // Test: reset addrman and test AddrMan::Add multiple addresses works as expected\n+    addrman = std::make_unique<CAddrManTest>();\n     std::vector<CAddress> vAddr;\n     vAddr.push_back(CAddress(ResolveService(\"250.1.1.3\", 8333), NODE_NONE));\n     vAddr.push_back(CAddress(ResolveService(\"250.1.1.4\", 8333), NODE_NONE));\n-    BOOST_CHECK(addrman.Add(vAddr, source));\n-    BOOST_CHECK(addrman.size() >= 1);\n+    BOOST_CHECK(addrman->Add(vAddr, source));\n+    BOOST_CHECK(addrman->size() >= 1);\n }\n \n BOOST_AUTO_TEST_CASE(addrman_ports)\n@@ -774,63 +759,63 @@ BOOST_AUTO_TEST_CASE(addrman_serialization)\n {\n     std::vector<bool> asmap1 = FromBytes(asmap_raw, sizeof(asmap_raw) * 8);\n \n-    CAddrManTest addrman_asmap1(true, asmap1);\n-    CAddrManTest addrman_asmap1_dup(true, asmap1);\n-    CAddrManTest addrman_noasmap;\n+    auto addrman_asmap1 = std::make_unique<CAddrManTest>(true, asmap1);\n+    auto addrman_asmap1_dup = std::make_unique<CAddrManTest>(true, asmap1);\n+    auto addrman_noasmap = std::make_unique<CAddrManTest>();\n     CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n \n     CAddress addr = CAddress(ResolveService(\"250.1.1.1\"), NODE_NONE);\n     CNetAddr default_source;\n \n \n-    addrman_asmap1.Add({addr}, default_source);\n+    addrman_asmap1->Add({addr}, default_source);\n \n-    stream << addrman_asmap1;\n+    stream << *addrman_asmap1;\n     // serizalizing/deserializing addrman with the same asmap\n-    stream >> addrman_asmap1_dup;\n+    stream >> *addrman_asmap1_dup;\n \n-    std::pair<int, int> bucketAndEntry_asmap1 = addrman_asmap1.GetBucketAndEntry(addr);\n-    std::pair<int, int> bucketAndEntry_asmap1_dup = addrman_asmap1_dup.GetBucketAndEntry(addr);\n+    std::pair<int, int> bucketAndEntry_asmap1 = addrman_asmap1->GetBucketAndEntry(addr);\n+    std::pair<int, int> bucketAndEntry_asmap1_dup = addrman_asmap1_dup->GetBucketAndEntry(addr);\n     BOOST_CHECK(bucketAndEntry_asmap1.second != -1);\n     BOOST_CHECK(bucketAndEntry_asmap1_dup.second != -1);\n \n     BOOST_CHECK(bucketAndEntry_asmap1.first == bucketAndEntry_asmap1_dup.first);\n     BOOST_CHECK(bucketAndEntry_asmap1.second == bucketAndEntry_asmap1_dup.second);\n \n     // deserializing asmaped peers.dat to non-asmaped addrman\n-    stream << addrman_asmap1;\n-    stream >> addrman_noasmap;\n-    std::pair<int, int> bucketAndEntry_noasmap = addrman_noasmap.GetBucketAndEntry(addr);\n+    stream << *addrman_asmap1;\n+    stream >> *addrman_noasmap;\n+    std::pair<int, int> bucketAndEntry_noasmap = addrman_noasmap->GetBucketAndEntry(addr);\n     BOOST_CHECK(bucketAndEntry_noasmap.second != -1);\n     BOOST_CHECK(bucketAndEntry_asmap1.first != bucketAndEntry_noasmap.first);\n     BOOST_CHECK(bucketAndEntry_asmap1.second != bucketAndEntry_noasmap.second);\n \n     // deserializing non-asmaped peers.dat to asmaped addrman\n-    addrman_asmap1.Clear();\n-    addrman_noasmap.Clear();\n-    addrman_noasmap.Add({addr}, default_source);\n-    stream << addrman_noasmap;\n-    stream >> addrman_asmap1;\n-    std::pair<int, int> bucketAndEntry_asmap1_deser = addrman_asmap1.GetBucketAndEntry(addr);\n+    addrman_asmap1 = std::make_unique<CAddrManTest>(true, asmap1);\n+    addrman_noasmap = std::make_unique<CAddrManTest>();\n+    addrman_noasmap->Add({addr}, default_source);\n+    stream << *addrman_noasmap;\n+    stream >> *addrman_asmap1;\n+    std::pair<int, int> bucketAndEntry_asmap1_deser = addrman_asmap1->GetBucketAndEntry(addr);\n     BOOST_CHECK(bucketAndEntry_asmap1_deser.second != -1);\n     BOOST_CHECK(bucketAndEntry_asmap1_deser.first != bucketAndEntry_noasmap.first);\n     BOOST_CHECK(bucketAndEntry_asmap1_deser.first == bucketAndEntry_asmap1_dup.first);\n     BOOST_CHECK(bucketAndEntry_asmap1_deser.second == bucketAndEntry_asmap1_dup.second);\n \n     // used to map to different buckets, now maps to the same bucket.\n-    addrman_asmap1.Clear();\n-    addrman_noasmap.Clear();\n+    addrman_asmap1 = std::make_unique<CAddrManTest>(true, asmap1);\n+    addrman_noasmap = std::make_unique<CAddrManTest>();\n     CAddress addr1 = CAddress(ResolveService(\"250.1.1.1\"), NODE_NONE);\n     CAddress addr2 = CAddress(ResolveService(\"250.2.1.1\"), NODE_NONE);\n-    addrman_noasmap.Add({addr, addr2}, default_source);\n-    std::pair<int, int> bucketAndEntry_noasmap_addr1 = addrman_noasmap.GetBucketAndEntry(addr1);\n-    std::pair<int, int> bucketAndEntry_noasmap_addr2 = addrman_noasmap.GetBucketAndEntry(addr2);\n+    addrman_noasmap->Add({addr, addr2}, default_source);\n+    std::pair<int, int> bucketAndEntry_noasmap_addr1 = addrman_noasmap->GetBucketAndEntry(addr1);\n+    std::pair<int, int> bucketAndEntry_noasmap_addr2 = addrman_noasmap->GetBucketAndEntry(addr2);\n     BOOST_CHECK(bucketAndEntry_noasmap_addr1.first != bucketAndEntry_noasmap_addr2.first);\n     BOOST_CHECK(bucketAndEntry_noasmap_addr1.second != bucketAndEntry_noasmap_addr2.second);\n-    stream << addrman_noasmap;\n-    stream >> addrman_asmap1;\n-    std::pair<int, int> bucketAndEntry_asmap1_deser_addr1 = addrman_asmap1.GetBucketAndEntry(addr1);\n-    std::pair<int, int> bucketAndEntry_asmap1_deser_addr2 = addrman_asmap1.GetBucketAndEntry(addr2);\n+    stream << *addrman_noasmap;\n+    stream >> *addrman_asmap1;\n+    std::pair<int, int> bucketAndEntry_asmap1_deser_addr1 = addrman_asmap1->GetBucketAndEntry(addr1);\n+    std::pair<int, int> bucketAndEntry_asmap1_deser_addr2 = addrman_asmap1->GetBucketAndEntry(addr2);\n     BOOST_CHECK(bucketAndEntry_asmap1_deser_addr1.first == bucketAndEntry_asmap1_deser_addr2.first);\n     BOOST_CHECK(bucketAndEntry_asmap1_deser_addr1.second != bucketAndEntry_asmap1_deser_addr2.second);\n }\n@@ -839,20 +824,20 @@ BOOST_AUTO_TEST_CASE(remove_invalid)\n {\n     // Confirm that invalid addresses are ignored in unserialization.\n \n-    CAddrManTest addrman;\n+    auto addrman = std::make_unique<CAddrManTest>();\n     CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n \n     const CAddress new1{ResolveService(\"5.5.5.5\"), NODE_NONE};\n     const CAddress new2{ResolveService(\"6.6.6.6\"), NODE_NONE};\n     const CAddress tried1{ResolveService(\"7.7.7.7\"), NODE_NONE};\n     const CAddress tried2{ResolveService(\"8.8.8.8\"), NODE_NONE};\n \n-    addrman.Add({new1, tried1, new2, tried2}, CNetAddr{});\n-    addrman.Good(tried1);\n-    addrman.Good(tried2);\n-    BOOST_REQUIRE_EQUAL(addrman.size(), 4);\n+    addrman->Add({new1, tried1, new2, tried2}, CNetAddr{});\n+    addrman->Good(tried1);\n+    addrman->Good(tried2);\n+    BOOST_REQUIRE_EQUAL(addrman->size(), 4);\n \n-    stream << addrman;\n+    stream << *addrman;\n \n     const std::string str{stream.str()};\n     size_t pos;\n@@ -871,9 +856,9 @@ BOOST_AUTO_TEST_CASE(remove_invalid)\n     BOOST_REQUIRE(pos + sizeof(tried2_raw_replacement) <= stream.size());\n     memcpy(stream.data() + pos, tried2_raw_replacement, sizeof(tried2_raw_replacement));\n \n-    addrman.Clear();\n-    stream >> addrman;\n-    BOOST_CHECK_EQUAL(addrman.size(), 2);\n+    addrman = std::make_unique<CAddrManTest>();\n+    stream >> *addrman;\n+    BOOST_CHECK_EQUAL(addrman->size(), 2);\n }\n \n BOOST_AUTO_TEST_CASE(addrman_selecttriedcollision)"
      },
      {
        "sha": "95aa53bff4a6c0169b3bf2c1891aa8a3661998c8",
        "filename": "src/test/fuzz/addrman.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 6,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/406be5ff9699874dc1d38d11f036e33cbdb820c9/src/test/fuzz/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/406be5ff9699874dc1d38d11f036e33cbdb820c9/src/test/fuzz/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/addrman.cpp?ref=406be5ff9699874dc1d38d11f036e33cbdb820c9",
        "patch": "@@ -228,24 +228,22 @@ FUZZ_TARGET_INIT(addrman, initialize_addrman)\n {\n     FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n     SetMockTime(ConsumeTime(fuzzed_data_provider));\n-    CAddrManDeterministic addr_man{fuzzed_data_provider};\n+    auto addr_man_ptr = std::make_unique<CAddrManDeterministic>(fuzzed_data_provider);\n     if (fuzzed_data_provider.ConsumeBool()) {\n         const std::vector<uint8_t> serialized_data{ConsumeRandomLengthByteVector(fuzzed_data_provider)};\n         CDataStream ds(serialized_data, SER_DISK, INIT_PROTO_VERSION);\n         const auto ser_version{fuzzed_data_provider.ConsumeIntegral<int32_t>()};\n         ds.SetVersion(ser_version);\n         try {\n-            ds >> addr_man;\n+            ds >> *addr_man_ptr;\n         } catch (const std::ios_base::failure&) {\n-            addr_man.Clear();\n+            addr_man_ptr = std::make_unique<CAddrManDeterministic>(fuzzed_data_provider);\n         }\n     }\n+    CAddrManDeterministic& addr_man = *addr_man_ptr;\n     while (fuzzed_data_provider.ConsumeBool()) {\n         CallOneOf(\n             fuzzed_data_provider,\n-            [&] {\n-                addr_man.Clear();\n-            },\n             [&] {\n                 addr_man.ResolveCollisions();\n             },"
      }
    ]
  },
  {
    "sha": "7e6e65918f75211b517fc887f5d90df8edd52ced",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZTZlNjU5MThmNzUyMTFiNTE3ZmM4ODdmNWQ5MGRmOGVkZDUyY2Vk",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-08-05T13:10:02Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-08-19T10:29:54Z"
      },
      "message": "[addrman] inline Clear() into CAddrMan ctor\n\nClear() is now only called from the ctor, so just inline the code into\nthat function.\n\nThe LOCK(cs) can be removed, since there can be no data races in the ctor.\n\nAlso move the function definition out of the header and into the cpp file.",
      "tree": {
        "sha": "a58e8031205061393d89bba7130cf9723f0fc87d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a58e8031205061393d89bba7130cf9723f0fc87d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7e6e65918f75211b517fc887f5d90df8edd52ced",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e6e65918f75211b517fc887f5d90df8edd52ced",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7e6e65918f75211b517fc887f5d90df8edd52ced",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e6e65918f75211b517fc887f5d90df8edd52ced/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "406be5ff9699874dc1d38d11f036e33cbdb820c9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/406be5ff9699874dc1d38d11f036e33cbdb820c9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/406be5ff9699874dc1d38d11f036e33cbdb820c9"
      }
    ],
    "stats": {
      "total": 72,
      "additions": 32,
      "deletions": 40
    },
    "files": [
      {
        "sha": "690ea19c301fc903e17a10845cd30077cc1534e7",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e6e65918f75211b517fc887f5d90df8edd52ced/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e6e65918f75211b517fc887f5d90df8edd52ced/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=7e6e65918f75211b517fc887f5d90df8edd52ced",
        "patch": "@@ -77,6 +77,32 @@ double CAddrInfo::GetChance(int64_t nNow) const\n     return fChance;\n }\n \n+CAddrMan::CAddrMan(bool deterministic, int32_t consistency_check_ratio)\n+    : insecure_rand{deterministic}\n+    , m_consistency_check_ratio{consistency_check_ratio}\n+{\n+    std::vector<int>().swap(vRandom);\n+    nKey = insecure_rand.rand256();\n+    for (size_t bucket = 0; bucket < ADDRMAN_NEW_BUCKET_COUNT; bucket++) {\n+        for (size_t entry = 0; entry < ADDRMAN_BUCKET_SIZE; entry++) {\n+            vvNew[bucket][entry] = -1;\n+        }\n+    }\n+    for (size_t bucket = 0; bucket < ADDRMAN_TRIED_BUCKET_COUNT; bucket++) {\n+        for (size_t entry = 0; entry < ADDRMAN_BUCKET_SIZE; entry++) {\n+            vvTried[bucket][entry] = -1;\n+        }\n+    }\n+\n+    nIdCount = 0;\n+    nTried = 0;\n+    nNew = 0;\n+    nLastGood = 1; //Initially at 1 so that \"never\" is strictly worse.\n+    mapInfo.clear();\n+    mapAddr.clear();\n+    if (deterministic) nKey = uint256{1};\n+}\n+\n CAddrInfo* CAddrMan::Find(const CNetAddr& addr, int* pnId)\n {\n     AssertLockHeld(cs);"
      },
      {
        "sha": "3d49c2583f40b1befc25e05c39c84f8ec8e44725",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 5,
        "deletions": 39,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e6e65918f75211b517fc887f5d90df8edd52ced/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e6e65918f75211b517fc887f5d90df8edd52ced/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=7e6e65918f75211b517fc887f5d90df8edd52ced",
        "patch": "@@ -471,40 +471,7 @@ class CAddrMan\n         Check();\n     }\n \n-private:\n-    void Clear()\n-        EXCLUSIVE_LOCKS_REQUIRED(!cs)\n-    {\n-        LOCK(cs);\n-        std::vector<int>().swap(vRandom);\n-        nKey = insecure_rand.rand256();\n-        for (size_t bucket = 0; bucket < ADDRMAN_NEW_BUCKET_COUNT; bucket++) {\n-            for (size_t entry = 0; entry < ADDRMAN_BUCKET_SIZE; entry++) {\n-                vvNew[bucket][entry] = -1;\n-            }\n-        }\n-        for (size_t bucket = 0; bucket < ADDRMAN_TRIED_BUCKET_COUNT; bucket++) {\n-            for (size_t entry = 0; entry < ADDRMAN_BUCKET_SIZE; entry++) {\n-                vvTried[bucket][entry] = -1;\n-            }\n-        }\n-\n-        nIdCount = 0;\n-        nTried = 0;\n-        nNew = 0;\n-        nLastGood = 1; //Initially at 1 so that \"never\" is strictly worse.\n-        mapInfo.clear();\n-        mapAddr.clear();\n-    }\n-\n-public:\n-    explicit CAddrMan(bool deterministic, int32_t consistency_check_ratio)\n-        : insecure_rand{deterministic},\n-          m_consistency_check_ratio{consistency_check_ratio}\n-    {\n-        Clear();\n-        if (deterministic) nKey = uint256{1};\n-    }\n+    explicit CAddrMan(bool deterministic, int32_t consistency_check_ratio);\n \n     ~CAddrMan()\n     {\n@@ -626,17 +593,16 @@ class CAddrMan\n         Check();\n     }\n \n-protected:\n-    //! secret key to randomize bucket select with\n-    uint256 nKey;\n-\n+private:\n     //! A mutex to protect the inner data structures.\n     mutable Mutex cs;\n \n-private:\n     //! Source of random numbers for randomization in inner loops\n     mutable FastRandomContext insecure_rand GUARDED_BY(cs);\n \n+    //! secret key to randomize bucket select with\n+    uint256 nKey;\n+\n     //! Serialization versions.\n     enum Format : uint8_t {\n         V0_HISTORICAL = 0,    //!< historic format, before commit e6b343d88"
      },
      {
        "sha": "cd5dc2370fbd7c2ece045049dd495ff8584d8af3",
        "filename": "src/test/addrman_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e6e65918f75211b517fc887f5d90df8edd52ced/src/test/addrman_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e6e65918f75211b517fc887f5d90df8edd52ced/src/test/addrman_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/addrman_tests.cpp?ref=7e6e65918f75211b517fc887f5d90df8edd52ced",
        "patch": "@@ -48,7 +48,7 @@ class CAddrManCorrupted : public CAddrManSerializationMock\n         unsigned char nVersion = 1;\n         s << nVersion;\n         s << ((unsigned char)32);\n-        s << nKey;\n+        s << uint256::ONE;\n         s << 10; // nNew\n         s << 10; // nTried\n "
      }
    ]
  },
  {
    "sha": "4d2fa97031a6f31da984d4c2c105447ed692c6ed",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZDJmYTk3MDMxYTZmMzFkYTk4NGQ0YzJjMTA1NDQ3ZWQ2OTJjNmVk",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-08-05T13:14:21Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-08-19T10:29:54Z"
      },
      "message": "[addrman] Clean up ctor\n\nUse default initialization and initializer lists, and use range-based\nfor loops for resetting the buckets.",
      "tree": {
        "sha": "f4046506c89395ea7310f5910d0edd954b8ab9e9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f4046506c89395ea7310f5910d0edd954b8ab9e9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4d2fa97031a6f31da984d4c2c105447ed692c6ed",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d2fa97031a6f31da984d4c2c105447ed692c6ed",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4d2fa97031a6f31da984d4c2c105447ed692c6ed",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d2fa97031a6f31da984d4c2c105447ed692c6ed/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7e6e65918f75211b517fc887f5d90df8edd52ced",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e6e65918f75211b517fc887f5d90df8edd52ced",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7e6e65918f75211b517fc887f5d90df8edd52ced"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 12,
      "deletions": 21
    },
    "files": [
      {
        "sha": "edcf97f846a67fae6d6d96821a40e9964ca0f78d",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 16,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d2fa97031a6f31da984d4c2c105447ed692c6ed/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d2fa97031a6f31da984d4c2c105447ed692c6ed/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=4d2fa97031a6f31da984d4c2c105447ed692c6ed",
        "patch": "@@ -79,28 +79,19 @@ double CAddrInfo::GetChance(int64_t nNow) const\n \n CAddrMan::CAddrMan(bool deterministic, int32_t consistency_check_ratio)\n     : insecure_rand{deterministic}\n+    , nKey{deterministic ? uint256{1} : insecure_rand.rand256()}\n     , m_consistency_check_ratio{consistency_check_ratio}\n {\n-    std::vector<int>().swap(vRandom);\n-    nKey = insecure_rand.rand256();\n-    for (size_t bucket = 0; bucket < ADDRMAN_NEW_BUCKET_COUNT; bucket++) {\n-        for (size_t entry = 0; entry < ADDRMAN_BUCKET_SIZE; entry++) {\n-            vvNew[bucket][entry] = -1;\n+    for (auto& bucket : vvNew) {\n+        for (auto& entry : bucket) {\n+            entry = -1;\n         }\n     }\n-    for (size_t bucket = 0; bucket < ADDRMAN_TRIED_BUCKET_COUNT; bucket++) {\n-        for (size_t entry = 0; entry < ADDRMAN_BUCKET_SIZE; entry++) {\n-            vvTried[bucket][entry] = -1;\n+    for (auto& bucket : vvTried) {\n+        for (auto& entry : bucket) {\n+            entry = -1;\n         }\n     }\n-\n-    nIdCount = 0;\n-    nTried = 0;\n-    nNew = 0;\n-    nLastGood = 1; //Initially at 1 so that \"never\" is strictly worse.\n-    mapInfo.clear();\n-    mapAddr.clear();\n-    if (deterministic) nKey = uint256{1};\n }\n \n CAddrInfo* CAddrMan::Find(const CNetAddr& addr, int* pnId)"
      },
      {
        "sha": "e2cb60b0613cda38856bf734b47ecb7505c28330",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d2fa97031a6f31da984d4c2c105447ed692c6ed/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d2fa97031a6f31da984d4c2c105447ed692c6ed/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=4d2fa97031a6f31da984d4c2c105447ed692c6ed",
        "patch": "@@ -626,7 +626,7 @@ class CAddrMan\n     static constexpr uint8_t INCOMPATIBILITY_BASE = 32;\n \n     //! last used nId\n-    int nIdCount GUARDED_BY(cs);\n+    int nIdCount GUARDED_BY(cs){0};\n \n     //! table with information about all nIds\n     std::unordered_map<int, CAddrInfo> mapInfo GUARDED_BY(cs);\n@@ -640,19 +640,19 @@ class CAddrMan\n     mutable std::vector<int> vRandom GUARDED_BY(cs);\n \n     // number of \"tried\" entries\n-    int nTried GUARDED_BY(cs);\n+    int nTried GUARDED_BY(cs){0};\n \n     //! list of \"tried\" buckets\n     int vvTried[ADDRMAN_TRIED_BUCKET_COUNT][ADDRMAN_BUCKET_SIZE] GUARDED_BY(cs);\n \n     //! number of (unique) \"new\" entries\n-    int nNew GUARDED_BY(cs);\n+    int nNew GUARDED_BY(cs){0};\n \n     //! list of \"new\" buckets\n     int vvNew[ADDRMAN_NEW_BUCKET_COUNT][ADDRMAN_BUCKET_SIZE] GUARDED_BY(cs);\n \n-    //! last time Good was called (memory only)\n-    int64_t nLastGood GUARDED_BY(cs);\n+    //! last time Good was called (memory only). Initially set to 1 so that \"never\" is strictly worse.\n+    int64_t nLastGood GUARDED_BY(cs){1};\n \n     //! Holds addrs inserted into tried table that collide with existing entries. Test-before-evict discipline used to resolve these collisions.\n     std::set<int> m_tried_collisions;"
      }
    ]
  }
]