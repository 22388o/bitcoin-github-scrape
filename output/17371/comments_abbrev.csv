DrahtBot,2019-11-04 23:27:28,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#17369](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17369.html) (Refactor: Move encryption code between KeyM",https://github.com/bitcoin/bitcoin/pull/17371#issuecomment-549594143,549594143,
ryanofsky,2019-11-21 15:27:47,"@instagibbs and @meshcollider, you may be interested to review this. This is code you previously acked when it was part of #16341",https://github.com/bitcoin/bitcoin/pull/17371#issuecomment-557135296,557135296,
instagibbs,2019-11-22 16:43:07,utACK https://github.com/bitcoin/bitcoin/pull/17371/commits/d0dab897afaac0a18aa47d3ce673a4a43a69178a,https://github.com/bitcoin/bitcoin/pull/17371#issuecomment-557605102,557605102,
instagibbs,2019-11-22 17:13:21,ready for merge? @meshcollider ,https://github.com/bitcoin/bitcoin/pull/17371#issuecomment-557615902,557615902,
Sjors,2019-11-05 14:15:54,Adding `complete = false` would seem more consistent with previous behavior which sets `complete` to false if it can't sign one of the inputs.,https://github.com/bitcoin/bitcoin/pull/17371#discussion_r342585216,342585216,src/wallet/psbtwallet.cpp
Sjors,2019-11-05 14:21:15,Add `complete = false`?,https://github.com/bitcoin/bitcoin/pull/17371#discussion_r342588205,342588205,src/wallet/psbtwallet.cpp
Sjors,2019-11-05 14:21:23,"Check for the witness UTXO first? (given the above `The signing code will switch to the smaller witness_utxo if this is ok.`). It seems unlikely they'd have different signing providers, but still.\n\n",https://github.com/bitcoin/bitcoin/pull/17371#discussion_r342588280,342588280,src/wallet/psbtwallet.cpp
Sjors,2019-11-05 14:37:47,"This seems brittle. I'm assuming the goal, if multiple signing providers match, is to have them all sign (part of) the transaction? What if the first signer succeeds, but the second returns an error object because it didn't have the key (in which it shouldn't have matched, but still...)?",https://github.com/bitcoin/bitcoin/pull/17371#discussion_r342597291,342597291,src/wallet/rpcwallet.cpp
ryanofsky,2019-11-05 17:18:59,"In commit ""Refactor: Require scriptPubKey to get wallet SigningProvider"" (f7510c144b2262e1ee114eaa740b889c24ec7abb)\n\nIt would seem more direct to replace `*pkhash` with `dest` here and call `GetScriptForDestination(dest)`",https://github.com/bitcoin/bitcoin/pull/17371#discussion_r342689536,342689536,src/wallet/rpcwallet.cpp
achow101,2019-11-05 19:23:32,There shouldn't ever be a SigningProvider that doesn't match. ,https://github.com/bitcoin/bitcoin/pull/17371#discussion_r342752069,342752069,src/wallet/rpcwallet.cpp
achow101,2019-11-05 19:23:51,Done,https://github.com/bitcoin/bitcoin/pull/17371#discussion_r342752241,342752241,src/wallet/psbtwallet.cpp
achow101,2019-11-05 19:23:54,Done,https://github.com/bitcoin/bitcoin/pull/17371#discussion_r342752261,342752261,src/wallet/psbtwallet.cpp
achow101,2019-11-05 19:23:56,Done,https://github.com/bitcoin/bitcoin/pull/17371#discussion_r342752282,342752282,src/wallet/psbtwallet.cpp
ryanofsky,2019-11-18 19:29:58,"In commit ""Refactor: Require scriptPubKey to get wallet SigningProvider"" (f7510c144b2262e1ee114eaa740b889c24ec7abb)\n\nAccording to RPC documentation result has three fields: ""hex"" ""complete"" and ""errors"". I guess for ""hex"" and ""complete"" fields it makes sense to take the last values, but errors field should probably accumulate? In any case, this code is not very future proof in case new fields ",https://github.com/bitcoin/bitcoin/pull/17371#discussion_r347567723,347567723,src/wallet/rpcwallet.cpp
ryanofsky,2019-11-18 19:32:16,"In commit ""Refactor: Require scriptPubKey to get wallet SigningProvider"" (f7510c144b2262e1ee114eaa740b889c24ec7abb)\n\nWould be slightly simpler to replace ternary with `solvable = provider && IsSolvable(*provider)`",https://github.com/bitcoin/bitcoin/pull/17371#discussion_r347568781,347568781,src/wallet/rpcwallet.cpp
achow101,2019-11-18 19:49:11,I don't think it really matters as we still need `pkhash` since `signmessage` is supposed to only work on p2pkh addresses.,https://github.com/bitcoin/bitcoin/pull/17371#discussion_r347576440,347576440,src/wallet/rpcwallet.cpp
achow101,2019-11-18 20:42:13,Done,https://github.com/bitcoin/bitcoin/pull/17371#discussion_r347598676,347598676,src/wallet/rpcwallet.cpp
achow101,2019-11-18 20:43:17,I've added a commit which changes `SignTransaction` to `void` and has a `result` parameter to accumulate the errors array.,https://github.com/bitcoin/bitcoin/pull/17371#discussion_r347599081,347599081,src/wallet/rpcwallet.cpp
Sjors,2019-11-19 11:45:17,"> we still need `pkhash` since `signmessage` is supposed to only work on `p2pkh` addresses\n\nThat will change in https://github.com/bitcoin/bitcoin/pull/16440/files#diff-df7d84ff2f53fcb2a0dc15a3a51e55ceR559",https://github.com/bitcoin/bitcoin/pull/17371#discussion_r347877547,347877547,src/wallet/rpcwallet.cpp
promag,2019-11-21 15:52:51,"4b0c718f8f48c678cbe4575e9a9cf9e62a30f0da\n\nAn overload could be added, like\n```cpp\nUniValue SignTransaction(CMutableTransaction& mtx, const SigningProvider* keystore, const std::map<COutPoint, Coin>& coins, const UniValue& hashType)\n{\n    UniValue result(UniValue::VOBJ);\n    SignTransaction(mtx, &keystore, coins, hashType, result);\n    return result;\n}\n```\n\nBut I see that in",https://github.com/bitcoin/bitcoin/pull/17371#discussion_r349166587,349166587,src/rpc/rawtransaction_util.h
instagibbs,2019-11-22 16:36:36,note for future work(TM): `address` is a horrible name for this argument,https://github.com/bitcoin/bitcoin/pull/17371#discussion_r349687735,349687735,src/interfaces/wallet.cpp
instagibbs,2019-11-22 16:38:15,~~do we need to check for knowledge of provider here?~~,https://github.com/bitcoin/bitcoin/pull/17371#discussion_r349688588,349688588,src/wallet/wallet.cpp
instagibbs,2019-11-22 16:39:54,non-blocking-nit: `.empty()`,https://github.com/bitcoin/bitcoin/pull/17371#discussion_r349689300,349689300,src/wallet/rpcwallet.cpp
instagibbs,2019-11-22 16:42:49,oh i cannot read.,https://github.com/bitcoin/bitcoin/pull/17371#discussion_r349690549,349690549,src/wallet/wallet.cpp
achow101,2019-11-22 16:58:11,Not fixing to avoid invalidating ACKs.,https://github.com/bitcoin/bitcoin/pull/17371#discussion_r349697530,349697530,src/wallet/rpcwallet.cpp
meshcollider,2019-11-22 19:18:45,Its kinda not that nice that there is no check the `script` and `address` have anything to do with each other. You could end up requesting the wrong SPKM for an address quite easily. Maybe move some of the ExtractDestination stuff inside here instead?,https://github.com/bitcoin/bitcoin/pull/17371#discussion_r349754354,349754354,src/interfaces/wallet.cpp
meshcollider,2019-11-22 19:29:01,nit: typo (same below),https://github.com/bitcoin/bitcoin/pull/17371#discussion_r349758605,349758605,src/wallet/wallet.cpp
meshcollider,2019-11-22 19:32:26,This can probably be combined with above to simplify,https://github.com/bitcoin/bitcoin/pull/17371#discussion_r349760073,349760073,src/wallet/rpcwallet.cpp
