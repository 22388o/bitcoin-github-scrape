[
  {
    "sha": "4b0c718f8f48c678cbe4575e9a9cf9e62a30f0da",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YjBjNzE4ZjhmNDhjNjc4Y2JlNDU3NWU5YTljZjllNjJhMzBmMGRh",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-11-18T19:56:52Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-11-18T20:28:15Z"
      },
      "message": "Accumulate result UniValue in SignTransaction\n\nSignTransaction will be called multiple times in the future. Pass\nit a result UniValue so that it can accumulate the results of multiple\nSignTransaction passes.",
      "tree": {
        "sha": "572d2fd66b58da28d4adab0f32adefdf1b21ae15",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/572d2fd66b58da28d4adab0f32adefdf1b21ae15"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4b0c718f8f48c678cbe4575e9a9cf9e62a30f0da",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b0c718f8f48c678cbe4575e9a9cf9e62a30f0da",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4b0c718f8f48c678cbe4575e9a9cf9e62a30f0da",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b0c718f8f48c678cbe4575e9a9cf9e62a30f0da/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bc38bb9a6036d73f507e66a2f588547f3f17e4b1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc38bb9a6036d73f507e66a2f588547f3f17e4b1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bc38bb9a6036d73f507e66a2f588547f3f17e4b1"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 12,
      "deletions": 8
    },
    "files": [
      {
        "sha": "6f24caee21adf0ab7b58ee5dc564c65cb4a28d8c",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b0c718f8f48c678cbe4575e9a9cf9e62a30f0da/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b0c718f8f48c678cbe4575e9a9cf9e62a30f0da/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=4b0c718f8f48c678cbe4575e9a9cf9e62a30f0da",
        "patch": "@@ -763,7 +763,9 @@ static UniValue signrawtransactionwithkey(const JSONRPCRequest& request)\n     // Parse the prevtxs array\n     ParsePrevouts(request.params[2], &keystore, coins);\n \n-    return SignTransaction(mtx, &keystore, coins, request.params[3]);\n+    UniValue result(UniValue::VOBJ);\n+    SignTransaction(mtx, &keystore, coins, request.params[3], result);\n+    return result;\n }\n \n static UniValue sendrawtransaction(const JSONRPCRequest& request)"
      },
      {
        "sha": "40334883c5970c01ccd9cfc6b7973c3399305220",
        "filename": "src/rpc/rawtransaction_util.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b0c718f8f48c678cbe4575e9a9cf9e62a30f0da/src/rpc/rawtransaction_util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b0c718f8f48c678cbe4575e9a9cf9e62a30f0da/src/rpc/rawtransaction_util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction_util.cpp?ref=4b0c718f8f48c678cbe4575e9a9cf9e62a30f0da",
        "patch": "@@ -268,7 +268,7 @@ void ParsePrevouts(const UniValue& prevTxsUnival, FillableSigningProvider* keyst\n     }\n }\n \n-UniValue SignTransaction(CMutableTransaction& mtx, const SigningProvider* keystore, const std::map<COutPoint, Coin>& coins, const UniValue& hashType)\n+void SignTransaction(CMutableTransaction& mtx, const SigningProvider* keystore, const std::map<COutPoint, Coin>& coins, const UniValue& hashType, UniValue& result)\n {\n     int nHashType = ParseSighashString(hashType);\n \n@@ -319,12 +319,12 @@ UniValue SignTransaction(CMutableTransaction& mtx, const SigningProvider* keysto\n     }\n     bool fComplete = vErrors.empty();\n \n-    UniValue result(UniValue::VOBJ);\n     result.pushKV(\"hex\", EncodeHexTx(CTransaction(mtx)));\n     result.pushKV(\"complete\", fComplete);\n     if (!vErrors.empty()) {\n+        if (result.exists(\"errors\")) {\n+            vErrors.push_backV(result[\"errors\"].getValues());\n+        }\n         result.pushKV(\"errors\", vErrors);\n     }\n-\n-    return result;\n }"
      },
      {
        "sha": "0b7712b83ccce6912b6843e1b2de49ff428d2abd",
        "filename": "src/rpc/rawtransaction_util.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b0c718f8f48c678cbe4575e9a9cf9e62a30f0da/src/rpc/rawtransaction_util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b0c718f8f48c678cbe4575e9a9cf9e62a30f0da/src/rpc/rawtransaction_util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction_util.h?ref=4b0c718f8f48c678cbe4575e9a9cf9e62a30f0da",
        "patch": "@@ -21,9 +21,9 @@ class SigningProvider;\n  * @param  keystore      Temporary keystore containing signing keys\n  * @param  coins         Map of unspent outputs\n  * @param  hashType      The signature hash type\n- * @returns JSON object with details of signed transaction\n+ * @param result         JSON object where signed transaction results accumulate\n  */\n-UniValue SignTransaction(CMutableTransaction& mtx, const SigningProvider* keystore, const std::map<COutPoint, Coin>& coins, const UniValue& hashType);\n+void SignTransaction(CMutableTransaction& mtx, const SigningProvider* keystore, const std::map<COutPoint, Coin>& coins, const UniValue& hashType, UniValue& result);\n \n /**\n   * Parse a prevtxs UniValue array and get the map of coins from it"
      },
      {
        "sha": "939e1fddfb56e8f580541a03255096c0d4716c65",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b0c718f8f48c678cbe4575e9a9cf9e62a30f0da/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b0c718f8f48c678cbe4575e9a9cf9e62a30f0da/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=4b0c718f8f48c678cbe4575e9a9cf9e62a30f0da",
        "patch": "@@ -3281,7 +3281,9 @@ UniValue signrawtransactionwithwallet(const JSONRPCRequest& request)\n     // Parse the prevtxs array\n     ParsePrevouts(request.params[1], nullptr, coins);\n \n-    return SignTransaction(mtx, &*pwallet->GetLegacyScriptPubKeyMan(), coins, request.params[2]);\n+    UniValue result(UniValue::VOBJ);\n+    SignTransaction(mtx, &*pwallet->GetLegacyScriptPubKeyMan(), coins, request.params[2], result);\n+    return result;\n }\n \n static UniValue bumpfee(const JSONRPCRequest& request)"
      }
    ]
  },
  {
    "sha": "d0dab897afaac0a18aa47d3ce673a4a43a69178a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMGRhYjg5N2FmYWFjMGExOGFhNDdkM2NlNjczYTRhNDNhNjkxNzhh",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-07T18:11:34Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-11-18T20:42:01Z"
      },
      "message": "Refactor: Require scriptPubKey to get wallet SigningProvider\n\nEasier to review ignoring whitespace:\n\n    git log -p -n1 -w\n\nThis commit does not change behavior. It passes new CScript arguments to\nsigning functions, but the arguments aren't currently used.",
      "tree": {
        "sha": "1a943d1084bb9fb2d9c5a18aa0d48726540c11f3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1a943d1084bb9fb2d9c5a18aa0d48726540c11f3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d0dab897afaac0a18aa47d3ce673a4a43a69178a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0dab897afaac0a18aa47d3ce673a4a43a69178a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d0dab897afaac0a18aa47d3ce673a4a43a69178a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0dab897afaac0a18aa47d3ce673a4a43a69178a/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4b0c718f8f48c678cbe4575e9a9cf9e62a30f0da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b0c718f8f48c678cbe4575e9a9cf9e62a30f0da",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4b0c718f8f48c678cbe4575e9a9cf9e62a30f0da"
      }
    ],
    "stats": {
      "total": 178,
      "additions": 127,
      "deletions": 51
    },
    "files": [
      {
        "sha": "f25ac5df0b9481a8416f9076c796a8b074adb284",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 2,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0dab897afaac0a18aa47d3ce673a4a43a69178a/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0dab897afaac0a18aa47d3ce673a4a43a69178a/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=d0dab897afaac0a18aa47d3ce673a4a43a69178a",
        "patch": "@@ -117,8 +117,22 @@ class WalletImpl : public Wallet\n         std::string error;\n         return m_wallet->GetNewDestination(type, label, dest, error);\n     }\n-    bool getPubKey(const CKeyID& address, CPubKey& pub_key) override { return m_wallet->GetLegacyScriptPubKeyMan()->GetPubKey(address, pub_key); }\n-    bool getPrivKey(const CKeyID& address, CKey& key) override { return m_wallet->GetLegacyScriptPubKeyMan()->GetKey(address, key); }\n+    bool getPubKey(const CScript& script, const CKeyID& address, CPubKey& pub_key) override\n+    {\n+        const SigningProvider* provider = m_wallet->GetSigningProvider(script);\n+        if (provider) {\n+            return provider->GetPubKey(address, pub_key);\n+        }\n+        return false;\n+    }\n+    bool getPrivKey(const CScript& script, const CKeyID& address, CKey& key) override\n+    {\n+        const SigningProvider* provider = m_wallet->GetSigningProvider(script);\n+        if (provider) {\n+            return provider->GetKey(address, key);\n+        }\n+        return false;\n+    }\n     bool isSpendable(const CTxDestination& dest) override { return m_wallet->IsMine(dest) & ISMINE_SPENDABLE; }\n     bool haveWatchOnly() override\n     {"
      },
      {
        "sha": "b7cf9f2111b7acbf03165ddee27b759cda91693e",
        "filename": "src/interfaces/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0dab897afaac0a18aa47d3ce673a4a43a69178a/src/interfaces/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0dab897afaac0a18aa47d3ce673a4a43a69178a/src/interfaces/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.h?ref=d0dab897afaac0a18aa47d3ce673a4a43a69178a",
        "patch": "@@ -81,10 +81,10 @@ class Wallet\n     virtual bool getNewDestination(const OutputType type, const std::string label, CTxDestination& dest) = 0;\n \n     //! Get public key.\n-    virtual bool getPubKey(const CKeyID& address, CPubKey& pub_key) = 0;\n+    virtual bool getPubKey(const CScript& script, const CKeyID& address, CPubKey& pub_key) = 0;\n \n     //! Get private key.\n-    virtual bool getPrivKey(const CKeyID& address, CKey& key) = 0;\n+    virtual bool getPrivKey(const CScript& script, const CKeyID& address, CKey& key) = 0;\n \n     //! Return whether wallet has private key.\n     virtual bool isSpendable(const CTxDestination& dest) = 0;"
      },
      {
        "sha": "3302dde4ed1431c5997ae60e16dc2b9aa0fa1fa5",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0dab897afaac0a18aa47d3ce673a4a43a69178a/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0dab897afaac0a18aa47d3ce673a4a43a69178a/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=d0dab897afaac0a18aa47d3ce673a4a43a69178a",
        "patch": "@@ -468,7 +468,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n         {\n             CPubKey pubkey;\n             PKHash *pkhash = boost::get<PKHash>(&address);\n-            if (pkhash && model->wallet().getPubKey(CKeyID(*pkhash), pubkey))\n+            if (pkhash && model->wallet().getPubKey(out.txout.scriptPubKey, CKeyID(*pkhash), pubkey))\n             {\n                 nBytesInputs += (pubkey.IsCompressed() ? 148 : 180);\n             }"
      },
      {
        "sha": "9d250bcb8334d3e4cf476a469eabe55f159369cf",
        "filename": "src/qt/signverifymessagedialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0dab897afaac0a18aa47d3ce673a4a43a69178a/src/qt/signverifymessagedialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0dab897afaac0a18aa47d3ce673a4a43a69178a/src/qt/signverifymessagedialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/signverifymessagedialog.cpp?ref=d0dab897afaac0a18aa47d3ce673a4a43a69178a",
        "patch": "@@ -136,7 +136,7 @@ void SignVerifyMessageDialog::on_signMessageButton_SM_clicked()\n     }\n \n     CKey key;\n-    if (!model->wallet().getPrivKey(CKeyID(*pkhash), key))\n+    if (!model->wallet().getPrivKey(GetScriptForDestination(destination), CKeyID(*pkhash), key))\n     {\n         ui->statusLabel_SM->setStyleSheet(\"QLabel { color: red; }\");\n         ui->statusLabel_SM->setText(tr(\"Private key for the entered address is not available.\"));"
      },
      {
        "sha": "96c1ad8d3f818891de090ae51bc23be21932d32d",
        "filename": "src/wallet/psbtwallet.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 2,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0dab897afaac0a18aa47d3ce673a4a43a69178a/src/wallet/psbtwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0dab897afaac0a18aa47d3ce673a4a43a69178a/src/wallet/psbtwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/psbtwallet.cpp?ref=d0dab897afaac0a18aa47d3ce673a4a43a69178a",
        "patch": "@@ -39,12 +39,35 @@ TransactionError FillPSBT(const CWallet* pwallet, PartiallySignedTransaction& ps\n             return TransactionError::SIGHASH_MISMATCH;\n         }\n \n-        complete &= SignPSBTInput(HidingSigningProvider(pwallet->GetSigningProvider(), !sign, !bip32derivs), psbtx, i, sighash_type);\n+        // Get the scriptPubKey to know which SigningProvider to use\n+        CScript script;\n+        if (!input.witness_utxo.IsNull()) {\n+            script = input.witness_utxo.scriptPubKey;\n+        } else if (input.non_witness_utxo) {\n+            script = input.non_witness_utxo->vout[txin.prevout.n].scriptPubKey;\n+        } else {\n+            // There's no UTXO so we can just skip this now\n+            complete = false;\n+            continue;\n+        }\n+        SignatureData sigdata;\n+        input.FillSignatureData(sigdata);\n+        const SigningProvider* provider = pwallet->GetSigningProvider(script, sigdata);\n+        if (!provider) {\n+            complete = false;\n+            continue;\n+        }\n+\n+        complete &= SignPSBTInput(HidingSigningProvider(provider, !sign, !bip32derivs), psbtx, i, sighash_type);\n     }\n \n     // Fill in the bip32 keypaths and redeemscripts for the outputs so that hardware wallets can identify change\n     for (unsigned int i = 0; i < psbtx.tx->vout.size(); ++i) {\n-        UpdatePSBTOutput(HidingSigningProvider(pwallet->GetSigningProvider(), true, !bip32derivs), psbtx, i);\n+        const CTxOut& out = psbtx.tx->vout.at(i);\n+        const SigningProvider* provider = pwallet->GetSigningProvider(out.scriptPubKey);\n+        if (provider) {\n+            UpdatePSBTOutput(HidingSigningProvider(provider, true, !bip32derivs), psbtx, i);\n+        }\n     }\n \n     return TransactionError::OK;"
      },
      {
        "sha": "a3611a4ae568d001ca345117d5b8ebdbe858c5c9",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 59,
        "deletions": 35,
        "changes": 94,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0dab897afaac0a18aa47d3ce673a4a43a69178a/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0dab897afaac0a18aa47d3ce673a4a43a69178a/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=d0dab897afaac0a18aa47d3ce673a4a43a69178a",
        "patch": "@@ -550,7 +550,11 @@ static UniValue signmessage(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Address does not refer to key\");\n     }\n \n-    const SigningProvider* provider = pwallet->GetSigningProvider();\n+    CScript script_pub_key = GetScriptForDestination(*pkhash);\n+    const SigningProvider* provider = pwallet->GetSigningProvider(script_pub_key);\n+    if (!provider) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Private key not available\");\n+    }\n \n     CKey key;\n     CKeyID keyID(*pkhash);\n@@ -2933,34 +2937,36 @@ static UniValue listunspent(const JSONRPCRequest& request)\n                 entry.pushKV(\"label\", i->second.name);\n             }\n \n-            const SigningProvider* provider = pwallet->GetSigningProvider();\n-            if (scriptPubKey.IsPayToScriptHash()) {\n-                const CScriptID& hash = CScriptID(boost::get<ScriptHash>(address));\n-                CScript redeemScript;\n-                if (provider->GetCScript(hash, redeemScript)) {\n-                    entry.pushKV(\"redeemScript\", HexStr(redeemScript.begin(), redeemScript.end()));\n-                    // Now check if the redeemScript is actually a P2WSH script\n-                    CTxDestination witness_destination;\n-                    if (redeemScript.IsPayToWitnessScriptHash()) {\n-                        bool extracted = ExtractDestination(redeemScript, witness_destination);\n-                        CHECK_NONFATAL(extracted);\n-                        // Also return the witness script\n-                        const WitnessV0ScriptHash& whash = boost::get<WitnessV0ScriptHash>(witness_destination);\n-                        CScriptID id;\n-                        CRIPEMD160().Write(whash.begin(), whash.size()).Finalize(id.begin());\n-                        CScript witnessScript;\n-                        if (provider->GetCScript(id, witnessScript)) {\n-                            entry.pushKV(\"witnessScript\", HexStr(witnessScript.begin(), witnessScript.end()));\n+            const SigningProvider* provider = pwallet->GetSigningProvider(scriptPubKey);\n+            if (provider) {\n+                if (scriptPubKey.IsPayToScriptHash()) {\n+                    const CScriptID& hash = CScriptID(boost::get<ScriptHash>(address));\n+                    CScript redeemScript;\n+                    if (provider->GetCScript(hash, redeemScript)) {\n+                        entry.pushKV(\"redeemScript\", HexStr(redeemScript.begin(), redeemScript.end()));\n+                        // Now check if the redeemScript is actually a P2WSH script\n+                        CTxDestination witness_destination;\n+                        if (redeemScript.IsPayToWitnessScriptHash()) {\n+                            bool extracted = ExtractDestination(redeemScript, witness_destination);\n+                            CHECK_NONFATAL(extracted);\n+                            // Also return the witness script\n+                            const WitnessV0ScriptHash& whash = boost::get<WitnessV0ScriptHash>(witness_destination);\n+                            CScriptID id;\n+                            CRIPEMD160().Write(whash.begin(), whash.size()).Finalize(id.begin());\n+                            CScript witnessScript;\n+                            if (provider->GetCScript(id, witnessScript)) {\n+                                entry.pushKV(\"witnessScript\", HexStr(witnessScript.begin(), witnessScript.end()));\n+                            }\n                         }\n                     }\n-                }\n-            } else if (scriptPubKey.IsPayToWitnessScriptHash()) {\n-                const WitnessV0ScriptHash& whash = boost::get<WitnessV0ScriptHash>(address);\n-                CScriptID id;\n-                CRIPEMD160().Write(whash.begin(), whash.size()).Finalize(id.begin());\n-                CScript witnessScript;\n-                if (provider->GetCScript(id, witnessScript)) {\n-                    entry.pushKV(\"witnessScript\", HexStr(witnessScript.begin(), witnessScript.end()));\n+                } else if (scriptPubKey.IsPayToWitnessScriptHash()) {\n+                    const WitnessV0ScriptHash& whash = boost::get<WitnessV0ScriptHash>(address);\n+                    CScriptID id;\n+                    CRIPEMD160().Write(whash.begin(), whash.size()).Finalize(id.begin());\n+                    CScript witnessScript;\n+                    if (provider->GetCScript(id, witnessScript)) {\n+                        entry.pushKV(\"witnessScript\", HexStr(witnessScript.begin(), witnessScript.end()));\n+                    }\n                 }\n             }\n         }\n@@ -2971,8 +2977,11 @@ static UniValue listunspent(const JSONRPCRequest& request)\n         entry.pushKV(\"spendable\", out.fSpendable);\n         entry.pushKV(\"solvable\", out.fSolvable);\n         if (out.fSolvable) {\n-            auto descriptor = InferDescriptor(scriptPubKey, *pwallet->GetLegacyScriptPubKeyMan());\n-            entry.pushKV(\"desc\", descriptor->ToString());\n+            const SigningProvider* provider = pwallet->GetSigningProvider(scriptPubKey);\n+            if (provider) {\n+                auto descriptor = InferDescriptor(scriptPubKey, *provider);\n+                entry.pushKV(\"desc\", descriptor->ToString());\n+            }\n         }\n         if (avoid_reuse) entry.pushKV(\"reused\", reused);\n         entry.pushKV(\"safe\", out.fSafe);\n@@ -3281,9 +3290,23 @@ UniValue signrawtransactionwithwallet(const JSONRPCRequest& request)\n     // Parse the prevtxs array\n     ParsePrevouts(request.params[1], nullptr, coins);\n \n+    std::set<const SigningProvider*> providers;\n+    for (const std::pair<COutPoint, Coin> coin_pair : coins) {\n+        const SigningProvider* provider = pwallet->GetSigningProvider(coin_pair.second.out.scriptPubKey);\n+        if (provider) {\n+            providers.insert(std::move(provider));\n+        }\n+    }\n+    if (providers.size() == 0) {\n+        // When there are no available providers, use DUMMY_SIGNING_PROVIDER so we can check if the tx is complete\n+        providers.insert(&DUMMY_SIGNING_PROVIDER);\n+    }\n+\n     UniValue result(UniValue::VOBJ);\n-    SignTransaction(mtx, &*pwallet->GetLegacyScriptPubKeyMan(), coins, request.params[2], result);\n-    return result;\n+    for (const SigningProvider* provider : providers) {\n+        SignTransaction(mtx, provider, coins, request.params[2], result);\n+    }\n+     return result;\n }\n \n static UniValue bumpfee(const JSONRPCRequest& request)\n@@ -3648,9 +3671,10 @@ static UniValue DescribeWalletAddress(CWallet* pwallet, const CTxDestination& de\n {\n     UniValue ret(UniValue::VOBJ);\n     UniValue detail = DescribeAddress(dest);\n+    CScript script = GetScriptForDestination(dest);\n     const SigningProvider* provider = nullptr;\n     if (pwallet) {\n-        provider = pwallet->GetSigningProvider();\n+        provider = pwallet->GetSigningProvider(script);\n     }\n     ret.pushKVs(detail);\n     ret.pushKVs(boost::apply_visitor(DescribeWalletAddressVisitor(provider), dest));\n@@ -3742,11 +3766,11 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n \n     CScript scriptPubKey = GetScriptForDestination(dest);\n     ret.pushKV(\"scriptPubKey\", HexStr(scriptPubKey.begin(), scriptPubKey.end()));\n-    const SigningProvider* provider = pwallet->GetSigningProvider();\n+    const SigningProvider* provider = pwallet->GetSigningProvider(scriptPubKey);\n \n     isminetype mine = pwallet->IsMine(dest);\n     ret.pushKV(\"ismine\", bool(mine & ISMINE_SPENDABLE));\n-    bool solvable = IsSolvable(*provider, scriptPubKey);\n+    bool solvable = provider && IsSolvable(*provider, scriptPubKey);\n     ret.pushKV(\"solvable\", solvable);\n     if (solvable) {\n        ret.pushKV(\"desc\", InferDescriptor(scriptPubKey, *provider)->ToString());\n@@ -3759,7 +3783,7 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n     }\n     ret.pushKV(\"ischange\", pwallet->IsChange(scriptPubKey));\n \n-    ScriptPubKeyMan* spk_man = pwallet->GetScriptPubKeyMan();\n+    ScriptPubKeyMan* spk_man = pwallet->GetScriptPubKeyMan(scriptPubKey);\n     if (spk_man) {\n         CKeyID key_id = GetKeyForDestination(*provider, dest);\n         const CKeyMetadata* meta = nullptr;"
      },
      {
        "sha": "30b7b634fec505d00449d5e1be5c7162669e4554",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 6,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0dab897afaac0a18aa47d3ce673a4a43a69178a/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0dab897afaac0a18aa47d3ce673a4a43a69178a/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=d0dab897afaac0a18aa47d3ce673a4a43a69178a",
        "patch": "@@ -1342,7 +1342,11 @@ bool CWallet::DummySignInput(CTxIn &tx_in, const CTxOut &txout, bool use_max_sig\n     const CScript& scriptPubKey = txout.scriptPubKey;\n     SignatureData sigdata;\n \n-    const SigningProvider* provider = GetSigningProvider();\n+    const SigningProvider* provider = GetSigningProvider(scriptPubKey);\n+    if (!provider) {\n+        // We don't know about this scriptpbuKey;\n+        return false;\n+    }\n \n     if (!ProduceSignature(*provider, use_max_sig ? DUMMY_MAXIMUM_SIGNATURE_CREATOR : DUMMY_SIGNATURE_CREATOR, scriptPubKey, sigdata)) {\n         return false;\n@@ -2096,7 +2100,7 @@ void CWallet::AvailableCoins(interfaces::Chain::Lock& locked_chain, std::vector<\n                 continue;\n             }\n \n-            const SigningProvider* provider = GetSigningProvider();\n+            const SigningProvider* provider = GetSigningProvider(wtx.tx->vout[i].scriptPubKey);\n \n             bool solvable = provider ? IsSolvable(*provider, wtx.tx->vout[i].scriptPubKey) : false;\n             bool spendable = ((mine & ISMINE_SPENDABLE) != ISMINE_NO) || (((mine & ISMINE_WATCH_ONLY) != ISMINE_NO) && (coinControl && coinControl->fAllowWatchOnly && solvable));\n@@ -2333,8 +2337,9 @@ bool CWallet::SignTransaction(CMutableTransaction& tx)\n         const CAmount& amount = mi->second.tx->vout[input.prevout.n].nValue;\n         SignatureData sigdata;\n \n-        const SigningProvider* provider = GetSigningProvider();\n+        const SigningProvider* provider = GetSigningProvider(scriptPubKey);\n         if (!provider) {\n+            // We don't know about this scriptpbuKey;\n             return false;\n         }\n \n@@ -2796,7 +2801,7 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n                 const CScript& scriptPubKey = coin.txout.scriptPubKey;\n                 SignatureData sigdata;\n \n-                const SigningProvider* provider = GetSigningProvider();\n+                const SigningProvider* provider = GetSigningProvider(scriptPubKey);\n                 if (!provider || !ProduceSignature(*provider, MutableTransactionSignatureCreator(&txNew, nIn, coin.txout.nValue, SIGHASH_ALL), scriptPubKey, sigdata))\n                 {\n                     strFailReason = _(\"Signing transaction failed\").translated;\n@@ -4002,12 +4007,17 @@ bool CWallet::Lock()\n     return true;\n }\n \n-ScriptPubKeyMan* CWallet::GetScriptPubKeyMan() const\n+ScriptPubKeyMan* CWallet::GetScriptPubKeyMan(const CScript& script) const\n+{\n+    return m_spk_man.get();\n+}\n+\n+const SigningProvider* CWallet::GetSigningProvider(const CScript& script) const\n {\n     return m_spk_man.get();\n }\n \n-const SigningProvider* CWallet::GetSigningProvider() const\n+const SigningProvider* CWallet::GetSigningProvider(const CScript& script, SignatureData& sigdata) const\n {\n     return m_spk_man.get();\n }"
      },
      {
        "sha": "bc6a4a18886a0ca2f2f4445dde0a268702cca5f9",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0dab897afaac0a18aa47d3ce673a4a43a69178a/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0dab897afaac0a18aa47d3ce673a4a43a69178a/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=d0dab897afaac0a18aa47d3ce673a4a43a69178a",
        "patch": "@@ -1113,8 +1113,13 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n         LogPrintf((\"%s \" + fmt).c_str(), GetDisplayName(), parameters...);\n     };\n \n-    ScriptPubKeyMan* GetScriptPubKeyMan() const;\n-    const SigningProvider* GetSigningProvider() const;\n+    //! Get the ScriptPubKeyMan for a script\n+    ScriptPubKeyMan* GetScriptPubKeyMan(const CScript& script) const;\n+\n+    //! Get the SigningProvider for a script\n+    const SigningProvider* GetSigningProvider(const CScript& script) const;\n+    const SigningProvider* GetSigningProvider(const CScript& script, SignatureData& sigdata) const;\n+\n     LegacyScriptPubKeyMan* GetLegacyScriptPubKeyMan() const;\n \n     // Temporary LegacyScriptPubKeyMan accessors and aliases."
      }
    ]
  }
]