MarcoFalke,2020-06-09 21:56:20,Concept ACK,https://github.com/bitcoin/bitcoin/pull/19228#issuecomment-641603014,641603014,
sipa,2020-06-10 06:02:18,@fanquake Pulled in.,https://github.com/bitcoin/bitcoin/pull/19228#issuecomment-641743792,641743792,
real-or-random,2020-06-10 07:38:39,"cc @elichai who worked on many of those PRs.\n\nWe renamed the `privkey_*` functions because the naming was inconsistent. They still work but API users should call `seckey_*` functions, see https://github.com/bitcoin-core/secp256k1/pull/701/commits/41fc78560223aa035d9fe2cbeedb3ee632c740e2 .  Can you add a commit that changes the calls in `key.cpp` (`privkey_negate`, `privkey_tweak`)? This could ",https://github.com/bitcoin/bitcoin/pull/19228#issuecomment-641795558,641795558,
elichai,2020-06-10 09:48:01,"tACK c5b460170b9df0097026fb8c772ccbde9f181d50 (`make check` passes with `./configure --with-incompatible-bdb --with-gui`)\n```\n$ git fetch https://github.com/bitcoin-core/secp256k1.git \nremote: Enumerating objects: 449, done.\nremote: Counting objects: 100% (449/449), done.\nremote: Compressing objects: 100% (28/28), done.\nremote: Total 1358 (delta 428), reused 440 (delta 421), pack-reuse",https://github.com/bitcoin/bitcoin/pull/19228#issuecomment-641888671,641888671,
laanwj,2020-06-10 13:21:28,Concept ACK,https://github.com/bitcoin/bitcoin/pull/19228#issuecomment-642004499,642004499,
DrahtBot,2020-06-10 13:41:43,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/19228#issuecomment-642017408,642017408,
sipa,2020-06-11 01:32:32,"@real-or-random Thanks for pointing that out. I added a commit to rename privkey to seckey in key.cpp (as a scripted diff). I've left the DER parsing code be for now, as it seems unclear what changes to address where.\n\n@fanquake I've reverted the options checking, and just changed it to dropping --disable-jni.",https://github.com/bitcoin/bitcoin/pull/19228#issuecomment-642352251,642352251,
Sjors,2020-06-12 12:24:29,"ACK e10439ce5a54cd13062e4ed07ebc681e385ed5cb\n\nI verified the subtree (see #19258) and scripted diff. The `build_msvc` variables match the defaults for `./configure.ac`.\n\nUpstream commit range, based on running `git-subtree-check.sh` on master vs here: https://github.com/bitcoin-core/secp256k1/compare/b19c000063be11018b4d1a6b0a85871ab9d0bdcf...2ed54da18add295668ec71c91534b640d2cc029b (or us",https://github.com/bitcoin/bitcoin/pull/19228#issuecomment-643242918,643242918,
real-or-random,2020-06-12 17:49:23,"ACK e10439ce5a54cd13062e4ed07ebc681e385ed5cb I verified the diff (subtree matches my local tree, manual inspection of other commits) but I didn't tested the resulting code \n\n> @real-or-random Thanks for pointing that out. I added a commit to rename privkey to seckey in key.cpp (as a scripted diff).\n\nThis led to changes also in `ec_privkey_import_der` (or now `ec_seckey_import_der`). That's",https://github.com/bitcoin/bitcoin/pull/19228#issuecomment-643406092,643406092,
jonasnick,2020-06-12 20:18:44,reACK e10439ce5a54cd13062e4ed07ebc681e385ed5cb,https://github.com/bitcoin/bitcoin/pull/19228#issuecomment-643466275,643466275,
laanwj,2020-06-16 12:19:11,"If you get the following error after it, you need to clean your tree (`make clean` seems to do it in this case).\n```\nmake[2]: *** [Makefile:7782: bitcoin-wallet] Error 1                                                                                                                                                                                \n/usr/bin/ld: libbitcoin_common.a(libbitcoin_comm",https://github.com/bitcoin/bitcoin/pull/19228#issuecomment-644727084,644727084,
elichai,2020-06-10 08:41:01,"This isn't really ergonomic, because `ac_configure_args=""${ac_configure_args}...""` passes to secp's configure everything you pass into bitcoin's configure (not sure if this is wanted behavior or not), but now with `--enable-option-checking` if I pass any bitcoin specific flags like `./configure --with-incompatible-bdb --with-libs --with-daemon --with-gui` I get a warning:\n`configure: WARNING: un",https://github.com/bitcoin/bitcoin/pull/19228#discussion_r437959178,437959178,configure.ac
fanquake,2020-06-10 09:12:11,"Right. After suggesting I started working on a change to fix this up the problem you mention (configure options getting passed around), as it's not very clean at the moment. We can just revert the addition of `--enable-option-checking` for now and drop `--disable-jni`.",https://github.com/bitcoin/bitcoin/pull/19228#discussion_r437978518,437978518,configure.ac
laanwj,2020-06-10 13:08:07,"> (not sure if this is wanted behavior or not), \n\nIt's desirable behavior in as far it is the only way to pass configure flags down to secp256k1 and other subtrees. For example to experiment during development, or to enable some specific assembly flag for optimization. I guess if there was another officially supported way to do that it might be unnecessary.\n",https://github.com/bitcoin/bitcoin/pull/19228#discussion_r438107363,438107363,configure.ac
elichai,2020-06-10 13:14:19,"in the past I always edited `configure.ac` to change libsecp's configure, so good to know :)\n(I actually have a local patch that enables endomorphism and more features when i compile for my laptop, so I'll replace the patch with a configure line :) )",https://github.com/bitcoin/bitcoin/pull/19228#discussion_r438111296,438111296,configure.ac
