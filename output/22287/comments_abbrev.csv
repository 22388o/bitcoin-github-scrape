sipa,2021-06-20 00:29:11,"Perhaps you want to make it print the value of `cmd`, so we can figure out which F_ constants are used but not handled by the wrapper. The partial approach is pretty uncomfortable though.",https://github.com/bitcoin/bitcoin/pull/22287#issuecomment-864480765,864480765,
hebasto,2021-06-20 05:11:12,"Updated 639bfc4b359bd9364829d3abb8e12e16d432471c -> f0ca8bc08c0d238cdd88844190be0a11b4bcf1d5 ([pr22287.01](https://github.com/hebasto/bitcoin/commits/pr22287.01) -> [pr22287.03](https://github.com/hebasto/bitcoin/commits/pr22287.03), [diff](https://github.com/hebasto/bitcoin/compare/pr22287.01..pr22287.03)):\n\n- addressed @sipa's comments\n- fixed CI builds\n\n@sipa\n>  The partial approach",https://github.com/bitcoin/bitcoin/pull/22287#issuecomment-864500695,864500695,
sipa,2021-06-20 05:18:52,How did you fix the failures?,https://github.com/bitcoin/bitcoin/pull/22287#issuecomment-864501256,864501256,
hebasto,2021-06-20 05:25:44,"> How did you fix the failures?\n\n- ARM hosts are excluded from this solution\n- `#if !defined(__arm__) && defined(__GLIBC__) && (__GLIBC__ == 2) && (__GLIBC_MINOR__ >= 28)`",https://github.com/bitcoin/bitcoin/pull/22287#issuecomment-864501757,864501757,
hebasto,2021-06-20 05:42:08,Closing. Binaries are broken (,https://github.com/bitcoin/bitcoin/pull/22287#issuecomment-864502982,864502982,
sipa,2021-06-20 05:58:45,How are they broken?,https://github.com/bitcoin/bitcoin/pull/22287#issuecomment-864504307,864504307,
hebasto,2021-06-20 06:00:30,"> How are they broken?\n\nOn x86_64 machine:\n```\n$ bin/bitcoind -signet\n2021-06-20T05:45:29Z Bitcoin Core version v21.99.0-f0ca8bc08c0d (release build)\n2021-06-20T05:45:29Z Signet derived magic (message start): 0a03cf40\n2021-06-20T05:45:29Z Assuming ancestors of block 0000002a1de0f46379358c1fd09906f7ac59adf3712323ed90eb59e4c183c020 have valid signatures.\n2021-06-20T05:45:29Z Setting ",https://github.com/bitcoin/bitcoin/pull/22287#issuecomment-864504424,864504424,
sipa,2021-06-20 06:01:45,"You should compile with the change that prints the cmd value, so the missing cmd can be added. This is entirely expected - the wrapper needs to know all the used cmd values, and the code you copied only has a few.",https://github.com/bitcoin/bitcoin/pull/22287#issuecomment-864504532,864504532,
hebasto,2021-06-20 06:05:27,"> You should compile with the change that prints the cmd value, so the missing cmd can be added. This is entirely expected - the wrapper needs to know all the used cmd values, and the code you copied only has a few.\n\nOk. I'll do.\n\nFWIW, it is not a _missed_ `cmd` value, rather this stub for file locking features:\n```\ntakes_flock_ptr_INCOMPATIBLE:\n    //\n    // !!! This is the break",https://github.com/bitcoin/bitcoin/pull/22287#issuecomment-864504878,864504878,
sipa,2021-06-20 06:06:21,"Oh, you're right. That's a bigger problem.",https://github.com/bitcoin/bitcoin/pull/22287#issuecomment-864504954,864504954,
sipa,2021-06-20 06:16:22,"Reverting #21036 isn't an option for guix, I assume. ",https://github.com/bitcoin/bitcoin/pull/22287#issuecomment-864505793,864505793,
hebasto,2021-06-20 06:34:52,"> Oh, you're right. That's a bigger problem.\n\nBtw, the offensive `cmd` is `F_SETLK	6	/* Set record locking info (non-blocking).  */`",https://github.com/bitcoin/bitcoin/pull/22287#issuecomment-864507195,864507195,
sipa,2021-06-20 06:36:29,"Yes, so we'll need to implement a wrapper for that. None of the call sites do anything complicated (and in particular, none pass file ranges, which could lead to actual imcompatibilities).",https://github.com/bitcoin/bitcoin/pull/22287#issuecomment-864507321,864507321,
hebasto,2021-06-20 12:50:37,"@sipa \n> Yes, so we'll need to implement a wrapper for that. None of the call sites do anything complicated (and in particular, none pass file ranges, which could lead to actual imcompatibilities).\n\nDone. OP updated.",https://github.com/bitcoin/bitcoin/pull/22287#issuecomment-864549690,864549690,
sipa,2021-06-20 13:44:08,"I don't think that's correct. The old comment for the incompatible case explained that the flock data structure had changed in old glibc vs new one, so you'd need to convert between the two in the wrapper.",https://github.com/bitcoin/bitcoin/pull/22287#issuecomment-864557546,864557546,
hebasto,2021-06-21 05:33:28,"Btw, if we stop release ARM-32bit binaries, the `fcntl64@GLIBC_2.28` symbol could be completely eliminated with `$(package)_cppflags_linux = -DSQLITE_DISABLE_LFS` in `depends/packages/sqlite.mk`.",https://github.com/bitcoin/bitcoin/pull/22287#issuecomment-864741303,864741303,
hebasto,2021-06-21 09:32:15,"@sipa\n> I don't think that's correct. The old comment for the incompatible case explained that the flock data structure had changed in old glibc vs new one, so you'd need to convert between the two in the wrapper.\n\nI've compared `struct flock` and `struct flock64` in glibc 2.31 (new) to `struct flock` in glibc 2.27 (old) -- all member sizes are the same for all tested archs. It seems with ou",https://github.com/bitcoin/bitcoin/pull/22287#issuecomment-864885494,864885494,
laanwj,2021-06-21 09:32:45,"> Btw, if we stop release ARM-32bit binaries, the fcntl64@GLIBC_2.28\n\nNACK on so suddenly stopping support for ARM 32 bit before the release. If there is a reason to phase it out we should at least announce it a release in advance. But not sure this is a good idea. For the record I'm still running a node on 32-bit ARM hardware myself, and remember that 64-bit RPi's used to ship with 32 bit sof",https://github.com/bitcoin/bitcoin/pull/22287#issuecomment-864885827,864885827,
hebasto,2021-06-21 09:36:35,"> For the record I'm still running a node on 32-bit ARM hardware myself...\n\nSo am I :)",https://github.com/bitcoin/bitcoin/pull/22287#issuecomment-864888239,864888239,
laanwj,2021-06-21 14:40:33,"> could be completely eliminated with $(package)_cppflags_linux = -DSQLITE_DISABLE_LFS in depends/packages/sqlite.mk.\n\nHaving thought about it a bit I think for other platforms this is a good angle though. The only use of this function in our distributed binary is from sqlite, after all. Not using the symbol would be more comfortable to me than providing our own (potentially buggy) implementat",https://github.com/bitcoin/bitcoin/pull/22287#issuecomment-865087656,865087656,
DrahtBot,2021-06-21 18:37:16,<!--9cd9c72976c961c55c7acef8f6ba82cd-->\n### Guix builds\n\n| File | commit 6a67366fdc3e1d383fe7cbfa209d7e85f0d96638<br>(master) | commit b5b94f1336c4a8019cfb6709e50e423def1bf5fe<br>(master and this pull) |\n|--|--|--|\n| SKIPATTEST.TAG | [`e3b0c44298fc1c14...`](https://drahtbot.space/guix/bitcoin/bitcoin/6a67366fdc3e1d383fe7cbfa209d7e85f0d96638/SKIPATTEST.TAG) | [`e3b0c44298fc1c14...`](https://dr,https://github.com/bitcoin/bitcoin/pull/22287#issuecomment-865257452,865257452,
hebasto,2021-06-22 01:26:09,"> > could be completely eliminated with $(package)_cppflags_linux = -DSQLITE_DISABLE_LFS in depends/packages/sqlite.mk.\n> \n> Having thought about it a bit I think for other platforms this is a good angle though. The only use of this function in our distributed binary is from sqlite, after all. Not using the symbol would be more comfortable to me than providing our own (potentially buggy) imple",https://github.com/bitcoin/bitcoin/pull/22287#issuecomment-865452037,865452037,
DrahtBot,2021-06-22 03:54:04,<!--a722867cd34abeea1fadc8d60700f111-->\n### Gitian builds\n\n| File | commit 398dd678338971d2189934713c83c184742f293f<br>(master) | commit af38111ffb11e63339214ee1bfeffcc491d0c975<br>(master and this pull) |\n|--|--|--|\n| *-osx-unsigned.dmg | [`92e2d116b58d4214...`](https://drahtbot.space/gitian/bitcoin/bitcoin/398dd678338971d2189934713c83c184742f293f/bitcoin-398dd6783389-osx-unsigned.dmg) | [`8,https://github.com/bitcoin/bitcoin/pull/22287#issuecomment-865507350,865507350,
hebasto,2021-07-01 08:59:28,Closing in favor of #22365.,https://github.com/bitcoin/bitcoin/pull/22287#issuecomment-872062110,872062110,
sipa,2021-06-20 00:35:01,Don't remove the exit here. This is sort of an assert; if you continue it'll invoke fcntl with who knows what behavior.,https://github.com/bitcoin/bitcoin/pull/22287#discussion_r654857182,654857182,src/compat/glibc_compat.cpp
