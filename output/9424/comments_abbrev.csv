gmaxwell,2016-12-25T20:37:13Z,If we ever need more than 32 categories (there are 19 now) this could be trivially changed to use a uint64_t.,https://github.com/bitcoin/bitcoin/pull/9424#issuecomment-269136566,269136566,
gmaxwell,2016-12-29T18:00:54Z,"One week, no substantive feedback. Closing.",https://github.com/bitcoin/bitcoin/pull/9424#issuecomment-269668264,269668264,
TheBlueMatt,2016-12-29T18:03:12Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/9424#issuecomment-269668562,269668562,
paveljanik,2016-12-30T10:48:37Z,"Please reopen. Holidays...\n\nConcept ACK",https://github.com/bitcoin/bitcoin/pull/9424#issuecomment-269757602,269757602,
rebroad,2016-12-30T13:18:29Z,concept ACK,https://github.com/bitcoin/bitcoin/pull/9424#issuecomment-269770737,269770737,
MarcoFalke,2016-12-30T14:17:52Z,utACK e348647315b619e6a1d8b614554abb0747047696,https://github.com/bitcoin/bitcoin/pull/9424#issuecomment-269776438,269776438,
paveljanik,2016-12-30T19:50:16Z,Needs rebase.,https://github.com/bitcoin/bitcoin/pull/9424#issuecomment-269814348,269814348,
paveljanik,2017-01-08T18:27:14Z,@gmaxwell Please reopen this...,https://github.com/bitcoin/bitcoin/pull/9424#issuecomment-271168899,271168899,
jonasschnelli,2017-03-30T19:33:19Z,"Concept ACK, seems to be a great PR with serval acks. Needs rebase and reopen.",https://github.com/bitcoin/bitcoin/pull/9424#issuecomment-290520430,290520430,
jtimon,2017-03-30T19:40:46Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/9424#issuecomment-290522378,290522378,
jnewbery,2017-03-30T19:43:30Z,Definite concept ACK. Makes #10123 trivial.,https://github.com/bitcoin/bitcoin/pull/9424#issuecomment-290522997,290522997,
laanwj,2017-03-30T20:19:00Z,Concept ACK. ,https://github.com/bitcoin/bitcoin/pull/9424#issuecomment-290532558,290532558,
JeremyRubin,2017-03-31T17:00:34Z,"Suggestion on how to make the category more extensible without triggering big recompiles:\n```c++\n#define LogPrint(cat, ...) _LogPrint(cat, #cat, __VA_ARGS__)\nstatic inline int _LogPrint(uint32_t category, const char* category_str, const char* fmt, const Args&... args) {\n    // ...\n    if (category == LOG_USE_IDENT_NAME)\n        // use the macro\n    // ...\n}\n```\n\nthen from `so",https://github.com/bitcoin/bitcoin/pull/9424#issuecomment-290769431,290769431,
gmaxwell,2017-04-01T07:13:10Z,I think I addressed all the comments.,https://github.com/bitcoin/bitcoin/pull/9424#issuecomment-290901948,290901948,
laanwj,2017-04-01T12:47:24Z,"> Suggestion on how to make the category more extensible without triggering big recompiles:\n\nIMO we shouldn't worry about recompiles when the set of categories changes. That's a rare occurrence, and the way headers depend on each other almost every header change already results in a (near) full recompile.",https://github.com/bitcoin/bitcoin/pull/9424#issuecomment-290918058,290918058,
laanwj,2017-04-01T13:24:35Z,utACK https://github.com/bitcoin/bitcoin/pull/9424/commits/21d94e712ddd7859bfaf02282eaa38cb18ec7e1b apart from the parameter name change in `tinyformat.h`,https://github.com/bitcoin/bitcoin/pull/9424#issuecomment-290919916,290919916,
gmaxwell,2017-04-01T19:00:08Z,"(Trivally) rebased, squashed, and removed the tinyformat change.",https://github.com/bitcoin/bitcoin/pull/9424#issuecomment-290940172,290940172,
laanwj,2017-04-02T06:32:52Z,"Going to merge this; a change like this will need rebase after every single thing that gets merged, and @gmaxwell addressed all the nits. Further improvements can be done in later PRs.",https://github.com/bitcoin/bitcoin/pull/9424#issuecomment-290967859,290967859,
gmaxwell,2016-12-25T20:45:12Z,"The prior code above struck me as somewhat brain-damaged (LogPrint() does nothing when fDebug isn't true), so this chunk could use some more review attention in case I was missing something.",https://github.com/bitcoin/bitcoin/pull/9424#discussion_r93833740,93833740,src/net_processing.cpp
rebroad,2016-12-26T12:28:44Z,idea: Would be easier to maintain if it was possible to define LogFlags and CLogCategoryDesc in the same section...,https://github.com/bitcoin/bitcoin/pull/9424#discussion_r93864210,93864210,src/util.h
laanwj,2017-03-30T20:20:28Z,"Instead of the LOG_ prefix, I'd propose to use a scoped enum. E.g. `LogFlags::NONE` `LogFlags::NET` etc.\n(defined using `enum class LogFlags`)",https://github.com/bitcoin/bitcoin/pull/9424#discussion_r109027139,109027139,src/util.h
JeremyRubin,2017-03-30T20:27:30Z,type should maybe be LogFlags for future upgrades.,https://github.com/bitcoin/bitcoin/pull/9424#discussion_r109028994,109028994,src/util.h
JeremyRubin,2017-03-30T20:31:59Z,isn't this set on init single threadedly? Maybe you can drop the atomics.,https://github.com/bitcoin/bitcoin/pull/9424#discussion_r109029933,109029933,src/util.h
gmaxwell,2017-03-31T01:44:06Z,"Oh darn, didn't see this until I'd already done the rebase. Uh, I'll look into it and put it as a commit on top for squashing.  (presumably it'll be a more or less trivial change that could be reviewed separately)",https://github.com/bitcoin/bitcoin/pull/9424#discussion_r109073958,109073958,src/util.h
gmaxwell,2017-03-31T02:40:57Z,"\n19:32 < gmaxwell> wumpus: uh. so boolean operations don't appear to exist for scoped enums. so ... I don't think I can use them without \n                  defining a set of boolean operations for them. \n19:32 < sipa> gmaxwell: eh?\n19:33 < sipa> ah, scoped enums don't have an implicit conversion to int\n19:34 < sipa> you can still explicitly convert them, though\n19:34 < sipa> but enums ",https://github.com/bitcoin/bitcoin/pull/9424#discussion_r109078227,109078227,src/util.h
gmaxwell,2017-03-31T02:41:50Z,I expect the very next logical change will be to add an RPC to turn on and off logging categories. Since all the reads are order relaxed I expect it to emit the same code as a non-atomic read (at least on x86). ,https://github.com/bitcoin/bitcoin/pull/9424#discussion_r109078296,109078296,src/util.h
theuni,2017-03-31T07:15:02Z,I've wanted this for so long! Consider this the next/2 logical change.,https://github.com/bitcoin/bitcoin/pull/9424#discussion_r109100855,109100855,src/util.h
laanwj,2017-03-31T10:33:30Z,"It's just that the LOG_ prefix is very common, so it's easy to get namespace collisions. Scoped enums avoid that, the only way any of their members can collide is when the name of the type conflicts, which would be an error in the first place.\nThen again if this introduces extra C++ casting uglyness in all usages let's leave it like this...\n",https://github.com/bitcoin/bitcoin/pull/9424#discussion_r109132647,109132647,src/util.h
laanwj,2017-03-31T10:46:05Z,"Yes, that would add some type safety. It would make it more of a hassle to submit a message to more categories at once but that isn't supported now either.",https://github.com/bitcoin/bitcoin/pull/9424#discussion_r109134658,109134658,src/util.h
gmaxwell,2017-03-31T18:27:22Z,"I could make it BCLOG or something like that, you're right about namespace collisions, my initial sed through to rename the LOG_ accidentally renamed some things it shouldn't.",https://github.com/bitcoin/bitcoin/pull/9424#discussion_r109222641,109222641,src/util.h
sipa,2017-03-31T18:31:03Z,"Another approach would be wrapping it in a C++ namespace (for example:\n```c++\nnamespace bclog {\nenum flags {\n  NET,\n  MEMPOOL,\n  ...\n};\n}\n```\n\nat which point you can use `bclog::NET | bclog::MEMPOOL`.",https://github.com/bitcoin/bitcoin/pull/9424#discussion_r109223449,109223449,src/util.h
jnewbery,2017-03-31T18:50:03Z,s/of/if,https://github.com/bitcoin/bitcoin/pull/9424#discussion_r109227335,109227335,src/util.h
jnewbery,2017-03-31T18:56:46Z,I prefer a name like `SetLogCategory`. Parse suggests no side-effects to me.,https://github.com/bitcoin/bitcoin/pull/9424#discussion_r109228620,109228620,src/util.h
jnewbery,2017-03-31T19:03:35Z,"Can you add an ""all"" alias here, ie `-debug=all` is equivalent to `-debug=1`",https://github.com/bitcoin/bitcoin/pull/9424#discussion_r109229934,109229934,src/util.cpp
jnewbery,2017-03-31T19:07:35Z,"Now that you've removed the global fDebug bool, you can go ahead and remove it entirely and test the conditions directly (rather than make the variable local), ie:\n\n`if (mapMultiArgs.count(""-debug"") > 0) {`\n\nand further below:\n\n`if !(GetBoolArg(""-nodebug"", false) || find(categories.begin(), categories.end(), std::string(""0"")) != categories.end()) {`",https://github.com/bitcoin/bitcoin/pull/9424#discussion_r109230692,109230692,src/init.cpp
jnewbery,2017-03-31T19:15:17Z,"Why have you removed the try/except handling in this macro? (I'm not saying it's wrong, I just don't understand why it was necessary before but not now).",https://github.com/bitcoin/bitcoin/pull/9424#discussion_r109231858,109231858,src/util.h
jnewbery,2017-03-31T19:17:13Z,EDIT: I think this is a bad rebase that's reverted #9963 ,https://github.com/bitcoin/bitcoin/pull/9424#discussion_r109232181,109232181,src/util.h
jnewbery,2017-03-31T19:17:51Z,bad rebase?,https://github.com/bitcoin/bitcoin/pull/9424#discussion_r109232291,109232291,src/tinyformat.h
gmaxwell,2017-04-01T00:07:55Z,No. silencing an obnoxious shadowing warning that was making it impossible to see where other issues were.,https://github.com/bitcoin/bitcoin/pull/9424#discussion_r109269651,109269651,src/tinyformat.h
gmaxwell,2017-04-01T00:11:09Z,Great point.,https://github.com/bitcoin/bitcoin/pull/9424#discussion_r109269858,109269858,src/init.cpp
gmaxwell,2017-04-01T00:20:34Z,Yep. Fixing.,https://github.com/bitcoin/bitcoin/pull/9424#discussion_r109270365,109270365,src/util.h
gmaxwell,2017-04-01T00:20:39Z,Yup.,https://github.com/bitcoin/bitcoin/pull/9424#discussion_r109270368,109270368,src/util.cpp
jnewbery,2017-04-01T11:17:06Z,"My only concern is that we occasionally pull updates to tinyformat.cpp from upstream (eg #8274), so any trivial changes like this add to the maintainer's burden when merging. Not sure if @laanwj has an opinion.",https://github.com/bitcoin/bitcoin/pull/9424#discussion_r109283236,109283236,src/tinyformat.h
laanwj,2017-04-01T12:13:55Z,"Can we just disable the shadowing warnings please, instead of peppering unrelated variable renames in commits?",https://github.com/bitcoin/bitcoin/pull/9424#discussion_r109284016,109284016,src/tinyformat.h
laanwj,2017-04-01T12:21:25Z,There you go: #10136,https://github.com/bitcoin/bitcoin/pull/9424#discussion_r109284147,109284147,src/tinyformat.h
laanwj,2017-04-02T06:30:30Z,Yes being able to change the debug flags at runtime (even if not the libevent and leveldb ones which are processed at startup) would be nice.,https://github.com/bitcoin/bitcoin/pull/9424#discussion_r109301572,109301572,src/util.h
