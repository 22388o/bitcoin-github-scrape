[
  {
    "sha": "fa45123f66f42efc32bebae39bd1296908aaabdc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTQ1MTIzZjY2ZjQyZWZjMzJiZWJhZTM5YmQxMjk2OTA4YWFhYmRj",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-25T20:08:56Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-26T23:24:37Z"
      },
      "message": "test: Add .style.yapf",
      "tree": {
        "sha": "7f7c7254c59fd6a59959539544e5a4dac67aa127",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7f7c7254c59fd6a59959539544e5a4dac67aa127"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa45123f66f42efc32bebae39bd1296908aaabdc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJcdcq1AAoJEM4rdWl+aaVI6ccMAJHlANcziOuXJ9PidLx3DKWK\nJxF65E+OqXTD05t28tGorp7mmqSQVxbuQdbs5a26N69P2lCDEYsX/m4u/fQ9PsIh\np5uTJbQ0lYE0vd/NgDb1rrGUnVwQCIA6vWagyc+psMZxnN7LW51Bgmx9/nJem8UV\n1dcSnDoUEpqqSG/OeKsOsL4q1+7MeJLK4PK7SzHfJ2ThmseyPeVvESyVNAukpLA0\nDtehITyaVnQx8RLg9y1HlrIPpwmkiSlYQnBUiEaebVMNJdNVzTX1Gv5V6wzuYUrl\nRwIhJHfsPQz/SG1gtrTot8hQesB6AReh6Bwly4llAMr82a/EtDgMzoNO4M5BV4wy\nU7YAunM+DngMXSE2NkGO49wHvJ7sV6ywpcEFhLyLhrbmPi1gLBokV3HQ+wKLtmtD\nvg3fKS4emDNAKQSnmRiiFpTS7wEA6kYGfhIqbUXSk12lp4Ut2VBet+jPgiUuCY2W\nvK9k/OGuor51/W6YnOAjOwLhcQ5p0RkCuVR6CH7eLw==\n=nTqp\n-----END PGP SIGNATURE-----",
        "payload": "tree 7f7c7254c59fd6a59959539544e5a4dac67aa127\nparent b4fc5257b7dc106ff210d170397d4ce0e024f2c0\nauthor MarcoFalke <falke.marco@gmail.com> 1551125336 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1551223477 -0500\n\ntest: Add .style.yapf\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa45123f66f42efc32bebae39bd1296908aaabdc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa45123f66f42efc32bebae39bd1296908aaabdc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa45123f66f42efc32bebae39bd1296908aaabdc/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b4fc5257b7dc106ff210d170397d4ce0e024f2c0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b4fc5257b7dc106ff210d170397d4ce0e024f2c0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b4fc5257b7dc106ff210d170397d4ce0e024f2c0"
      }
    ],
    "stats": {
      "total": 261,
      "additions": 261,
      "deletions": 0
    },
    "files": [
      {
        "sha": "fe6227baf66b7c25de1195d9242a14b365f2be14",
        "filename": ".style.yapf",
        "status": "added",
        "additions": 261,
        "deletions": 0,
        "changes": 261,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa45123f66f42efc32bebae39bd1296908aaabdc/.style.yapf",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa45123f66f42efc32bebae39bd1296908aaabdc/.style.yapf",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.style.yapf?ref=fa45123f66f42efc32bebae39bd1296908aaabdc",
        "patch": "@@ -0,0 +1,261 @@\n+[style]\n+# Align closing bracket with visual indentation.\n+align_closing_bracket_with_visual_indent=True\n+\n+# Allow dictionary keys to exist on multiple lines. For example:\n+#\n+#   x = {\n+#       ('this is the first element of a tuple',\n+#        'this is the second element of a tuple'):\n+#            value,\n+#   }\n+allow_multiline_dictionary_keys=False\n+\n+# Allow lambdas to be formatted on more than one line.\n+allow_multiline_lambdas=False\n+\n+# Allow splits before the dictionary value.\n+allow_split_before_dict_value=True\n+\n+# Number of blank lines surrounding top-level function and class\n+# definitions.\n+blank_lines_around_top_level_definition=2\n+\n+# Insert a blank line before a class-level docstring.\n+blank_line_before_class_docstring=False\n+\n+# Insert a blank line before a module docstring.\n+blank_line_before_module_docstring=False\n+\n+# Insert a blank line before a 'def' or 'class' immediately nested\n+# within another 'def' or 'class'. For example:\n+#\n+#   class Foo:\n+#                      # <------ this blank line\n+#     def method():\n+#       ...\n+blank_line_before_nested_class_or_def=False\n+\n+# Do not split consecutive brackets. Only relevant when\n+# dedent_closing_brackets is set. For example:\n+#\n+#    call_func_that_takes_a_dict(\n+#        {\n+#            'key1': 'value1',\n+#            'key2': 'value2',\n+#        }\n+#    )\n+#\n+# would reformat to:\n+#\n+#    call_func_that_takes_a_dict({\n+#        'key1': 'value1',\n+#        'key2': 'value2',\n+#    })\n+coalesce_brackets=False\n+\n+# The column limit.\n+column_limit=79\n+\n+# The style for continuation alignment. Possible values are:\n+#\n+# - SPACE: Use spaces for continuation alignment. This is default behavior.\n+# - FIXED: Use fixed number (CONTINUATION_INDENT_WIDTH) of columns\n+#   (ie: CONTINUATION_INDENT_WIDTH/INDENT_WIDTH tabs) for continuation\n+#   alignment.\n+# - LESS: Slightly left if cannot vertically align continuation lines with\n+#   indent characters.\n+# - VALIGN-RIGHT: Vertically align continuation lines with indent\n+#   characters. Slightly right (one more indent character) if cannot\n+#   vertically align continuation lines with indent characters.\n+#\n+# For options FIXED, and VALIGN-RIGHT are only available when USE_TABS is\n+# enabled.\n+continuation_align_style=SPACE\n+\n+# Indent width used for line continuations.\n+continuation_indent_width=4\n+\n+# Put closing brackets on a separate line, dedented, if the bracketed\n+# expression can't fit in a single line. Applies to all kinds of brackets,\n+# including function definitions and calls. For example:\n+#\n+#   config = {\n+#       'key1': 'value1',\n+#       'key2': 'value2',\n+#   }        # <--- this bracket is dedented and on a separate line\n+#\n+#   time_series = self.remote_client.query_entity_counters(\n+#       entity='dev3246.region1',\n+#       key='dns.query_latency_tcp',\n+#       transform=Transformation.AVERAGE(window=timedelta(seconds=60)),\n+#       start_ts=now()-timedelta(days=3),\n+#       end_ts=now(),\n+#   )        # <--- this bracket is dedented and on a separate line\n+dedent_closing_brackets=False\n+\n+# Disable the heuristic which places each list element on a separate line\n+# if the list is comma-terminated.\n+disable_ending_comma_heuristic=False\n+\n+# Place each dictionary entry onto its own line.\n+each_dict_entry_on_separate_line=True\n+\n+# The regex for an i18n comment. The presence of this comment stops\n+# reformatting of that line, because the comments are required to be\n+# next to the string they translate.\n+i18n_comment=\n+\n+# The i18n function call names. The presence of this function stops\n+# reformattting on that line, because the string it has cannot be moved\n+# away from the i18n comment.\n+i18n_function_call=\n+\n+# Indent the dictionary value if it cannot fit on the same line as the\n+# dictionary key. For example:\n+#\n+#   config = {\n+#       'key1':\n+#           'value1',\n+#       'key2': value1 +\n+#               value2,\n+#   }\n+indent_dictionary_value=False\n+\n+# The number of columns to use for indentation.\n+indent_width=4\n+\n+# Join short lines into one line. E.g., single line 'if' statements.\n+join_multiple_lines=True\n+\n+# Do not include spaces around selected binary operators. For example:\n+#\n+#   1 + 2 * 3 - 4 / 5\n+#\n+# will be formatted as follows when configured with \"*,/\":\n+#\n+#   1 + 2*3 - 4/5\n+#\n+no_spaces_around_selected_binary_operators=\n+\n+# Use spaces around default or named assigns.\n+spaces_around_default_or_named_assign=False\n+\n+# Use spaces around the power operator.\n+spaces_around_power_operator=False\n+\n+# The number of spaces required before a trailing comment.\n+spaces_before_comment=2\n+\n+# Insert a space between the ending comma and closing bracket of a list,\n+# etc.\n+space_between_ending_comma_and_closing_bracket=True\n+\n+# Split before arguments\n+split_all_comma_separated_values=False\n+\n+# Split before arguments if the argument list is terminated by a\n+# comma.\n+split_arguments_when_comma_terminated=False\n+\n+# Set to True to prefer splitting before '&', '|' or '^' rather than\n+# after.\n+split_before_bitwise_operator=True\n+\n+# Split before the closing bracket if a list or dict literal doesn't fit on\n+# a single line.\n+split_before_closing_bracket=True\n+\n+# Split before a dictionary or set generator (comp_for). For example, note\n+# the split before the 'for':\n+#\n+#   foo = {\n+#       variable: 'Hello world, have a nice day!'\n+#       for variable in bar if variable != 42\n+#   }\n+split_before_dict_set_generator=True\n+\n+# Split before the '.' if we need to split a longer expression:\n+#\n+#   foo = ('This is a really long string: {}, {}, {}, {}'.format(a, b, c, d))\n+#\n+# would reformat to something like:\n+#\n+#   foo = ('This is a really long string: {}, {}, {}, {}'\n+#          .format(a, b, c, d))\n+split_before_dot=False\n+\n+# Split after the opening paren which surrounds an expression if it doesn't\n+# fit on a single line.\n+split_before_expression_after_opening_paren=False\n+\n+# If an argument / parameter list is going to be split, then split before\n+# the first argument.\n+split_before_first_argument=False\n+\n+# Set to True to prefer splitting before 'and' or 'or' rather than\n+# after.\n+split_before_logical_operator=True\n+\n+# Split named assignments onto individual lines.\n+split_before_named_assigns=True\n+\n+# Set to True to split list comprehensions and generators that have\n+# non-trivial expressions and multiple clauses before each of these\n+# clauses. For example:\n+#\n+#   result = [\n+#       a_long_var + 100 for a_long_var in xrange(1000)\n+#       if a_long_var % 10]\n+#\n+# would reformat to something like:\n+#\n+#   result = [\n+#       a_long_var + 100\n+#       for a_long_var in xrange(1000)\n+#       if a_long_var % 10]\n+split_complex_comprehension=False\n+\n+# The penalty for splitting right after the opening bracket.\n+split_penalty_after_opening_bracket=30\n+\n+# The penalty for splitting the line after a unary operator.\n+split_penalty_after_unary_operator=10000\n+\n+# The penalty for splitting right before an if expression.\n+split_penalty_before_if_expr=0\n+\n+# The penalty of splitting the line around the '&', '|', and '^'\n+# operators.\n+split_penalty_bitwise_operator=300\n+\n+# The penalty for splitting a list comprehension or generator\n+# expression.\n+split_penalty_comprehension=80\n+\n+# The penalty for characters over the column limit.\n+split_penalty_excess_character=7000\n+\n+# The penalty incurred by adding a line split to the unwrapped line. The\n+# more line splits added the higher the penalty.\n+split_penalty_for_added_line_split=30\n+\n+# The penalty of splitting a list of \"import as\" names. For example:\n+#\n+#   from a_very_long_or_indented_module_name_yada_yad import (long_argument_1,\n+#                                                             long_argument_2,\n+#                                                             long_argument_3)\n+#\n+# would reformat to something like:\n+#\n+#   from a_very_long_or_indented_module_name_yada_yad import (\n+#       long_argument_1, long_argument_2, long_argument_3)\n+split_penalty_import_names=0\n+\n+# The penalty of splitting the line around the 'and' and 'or'\n+# operators.\n+split_penalty_logical_operator=300\n+\n+# Use the Tab character for indentation.\n+use_tabs=False\n+"
      }
    ]
  }
]