[
  {
    "sha": "072e2f864445bc6ef3b390255f08c9e8bec2ea94",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNzJlMmY4NjQ0NDViYzZlZjNiMzkwMjU1ZjA4YzllOGJlYzJlYTk0",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-03-26T17:52:10Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-11-18T17:03:50Z"
      },
      "message": "Alter assumptions in CCoinsViewCache::BatchWrite\n\nPreviously it would break if you flushed a parent cache while there was a child cache referring to it.  This change will allow the flushing of parent caches.",
      "tree": {
        "sha": "b1781d992e08263efa1b03b5f00f8f9c08760ac2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b1781d992e08263efa1b03b5f00f8f9c08760ac2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/072e2f864445bc6ef3b390255f08c9e8bec2ea94",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/072e2f864445bc6ef3b390255f08c9e8bec2ea94",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/072e2f864445bc6ef3b390255f08c9e8bec2ea94",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/072e2f864445bc6ef3b390255f08c9e8bec2ea94/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "73fa5e604356ab4182971376fd758b4680737b5a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/73fa5e604356ab4182971376fd758b4680737b5a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/73fa5e604356ab4182971376fd758b4680737b5a"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 28,
      "deletions": 7
    },
    "files": [
      {
        "sha": "f0ea5c0459067ec43a5e507b675b1da23ffc959b",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 7,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/072e2f864445bc6ef3b390255f08c9e8bec2ea94/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/072e2f864445bc6ef3b390255f08c9e8bec2ea94/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=072e2f864445bc6ef3b390255f08c9e8bec2ea94",
        "patch": "@@ -160,18 +160,23 @@ bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn\n         if (it->second.flags & CCoinsCacheEntry::DIRTY) { // Ignore non-dirty entries (optimization).\n             CCoinsMap::iterator itUs = cacheCoins.find(it->first);\n             if (itUs == cacheCoins.end()) {\n-                if (!it->second.coins.IsPruned()) {\n-                    // The parent cache does not have an entry, while the child\n-                    // cache does have (a non-pruned) one. Move the data up, and\n-                    // mark it as fresh (if the grandparent did have it, we\n-                    // would have pulled it in at first GetCoins).\n-                    assert(it->second.flags & CCoinsCacheEntry::FRESH);\n+                // The parent cache does not have an entry, while the child does\n+                // We can ignore it if it's both FRESH and pruned in the child\n+                if (!(it->second.flags & CCoinsCacheEntry::FRESH && it->second.coins.IsPruned())) {\n+                    // Otherwise we will need to create it in the parent\n+                    // and move the data up and mark it as dirty\n                     CCoinsCacheEntry& entry = cacheCoins[it->first];\n                     entry.coins.swap(it->second.coins);\n                     cachedCoinsUsage += entry.coins.DynamicMemoryUsage();\n-                    entry.flags = CCoinsCacheEntry::DIRTY | CCoinsCacheEntry::FRESH;\n+                    entry.flags = CCoinsCacheEntry::DIRTY;\n+                    // We can mark it FRESH in the parent if it was FRESH in the child\n+                    // Otherwise it might have just been flushed from the parent's cache\n+                    // and already exist in the grandparent\n+                    if (it->second.flags & CCoinsCacheEntry::FRESH)\n+                        entry.flags |= CCoinsCacheEntry::FRESH;\n                 }\n             } else {\n+                // Found the entry in the parent cache\n                 if ((itUs->second.flags & CCoinsCacheEntry::FRESH) && it->second.coins.IsPruned()) {\n                     // The grandparent does not have an entry, and the child is\n                     // modified and being pruned. This means we can just delete"
      },
      {
        "sha": "9489a19f63041bd7ac72833ad2df71589ab53ffd",
        "filename": "src/test/coins_tests.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/072e2f864445bc6ef3b390255f08c9e8bec2ea94/src/test/coins_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/072e2f864445bc6ef3b390255f08c9e8bec2ea94/src/test/coins_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coins_tests.cpp?ref=072e2f864445bc6ef3b390255f08c9e8bec2ea94",
        "patch": "@@ -164,14 +164,23 @@ BOOST_AUTO_TEST_CASE(coins_cache_simulation_test)\n             }\n         }\n \n+        if (insecure_rand() % 100 == 0) {\n+            // Every 100 iterations, flush an intermediate cache\n+            if (stack.size() > 1 && insecure_rand() % 2 == 0) {\n+                unsigned int flushIndex = insecure_rand() % (stack.size() - 1);\n+                stack[flushIndex]->Flush();\n+            }\n+        }\n         if (insecure_rand() % 100 == 0) {\n             // Every 100 iterations, change the cache stack.\n             if (stack.size() > 0 && insecure_rand() % 2 == 0) {\n+                //Remove the top cache\n                 stack.back()->Flush();\n                 delete stack.back();\n                 stack.pop_back();\n             }\n             if (stack.size() == 0 || (stack.size() < 4 && insecure_rand() % 2)) {\n+                //Add a new cache\n                 CCoinsView* tip = &base;\n                 if (stack.size() > 0) {\n                     tip = stack.back();\n@@ -304,6 +313,13 @@ BOOST_AUTO_TEST_CASE(updatecoins_simulation_test)\n             }\n         }\n \n+        if (insecure_rand() % 100 == 0) {\n+            // Every 100 iterations, flush an intermediate cache\n+            if (stack.size() > 1 && insecure_rand() % 2 == 0) {\n+                unsigned int flushIndex = insecure_rand() % (stack.size() - 1);\n+                stack[flushIndex]->Flush();\n+            }\n+        }\n         if (insecure_rand() % 100 == 0) {\n             // Every 100 iterations, change the cache stack.\n             if (stack.size() > 0 && insecure_rand() % 2 == 0) {"
      }
    ]
  }
]