[
  {
    "sha": "fa4c16d2e72a8ec1032da49a68c9913c2595dbfe",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTRjMTZkMmU3MmE4ZWMxMDMyZGE0OWE2OGM5OTEzYzI1OTVkYmZl",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-12-06T15:52:29Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-12-06T16:00:08Z"
      },
      "message": "qa: Add getrawtransaction in_active_chain=False test",
      "tree": {
        "sha": "dde5119baf020bffdd4699d4b841032a43f035fc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dde5119baf020bffdd4699d4b841032a43f035fc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa4c16d2e72a8ec1032da49a68c9913c2595dbfe",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa4c16d2e72a8ec1032da49a68c9913c2595dbfe",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa4c16d2e72a8ec1032da49a68c9913c2595dbfe",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa4c16d2e72a8ec1032da49a68c9913c2595dbfe/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "497d0e014cc79d46531d570e74e4aeae72db602d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/497d0e014cc79d46531d570e74e4aeae72db602d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/497d0e014cc79d46531d570e74e4aeae72db602d"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 15,
      "deletions": 11
    },
    "files": [
      {
        "sha": "018c25532504b648e2969223d51170b4c40a210a",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 7,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa4c16d2e72a8ec1032da49a68c9913c2595dbfe/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa4c16d2e72a8ec1032da49a68c9913c2595dbfe/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=fa4c16d2e72a8ec1032da49a68c9913c2595dbfe",
        "patch": "@@ -155,14 +155,12 @@ UniValue getrawtransaction(const JSONRPCRequest& request)\n \n     if (!request.params[2].isNull()) {\n         uint256 blockhash = ParseHashV(request.params[2], \"parameter 3\");\n-        if (!blockhash.IsNull()) {\n-            BlockMap::iterator it = mapBlockIndex.find(blockhash);\n-            if (it == mapBlockIndex.end()) {\n-                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block hash not found\");\n-            }\n-            blockindex = it->second;\n-            in_active_chain = chainActive.Contains(blockindex);\n+        BlockMap::iterator it = mapBlockIndex.find(blockhash);\n+        if (it == mapBlockIndex.end()) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block hash not found\");\n         }\n+        blockindex = it->second;\n+        in_active_chain = chainActive.Contains(blockindex);\n     }\n \n     CTransactionRef tx;"
      },
      {
        "sha": "79f2a2834ea966b92469d11e7e9a56f52f3fd301",
        "filename": "test/functional/rawtransactions.py",
        "status": "modified",
        "additions": 10,
        "deletions": 4,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa4c16d2e72a8ec1032da49a68c9913c2595dbfe/test/functional/rawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa4c16d2e72a8ec1032da49a68c9913c2595dbfe/test/functional/rawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rawtransactions.py?ref=fa4c16d2e72a8ec1032da49a68c9913c2595dbfe",
        "patch": "@@ -72,7 +72,13 @@ def run_test(self):\n         assert_raises_rpc_error(-8, \"parameter 3 must be hexadecimal\", self.nodes[0].getrawtransaction, tx, True, True)\n         assert_raises_rpc_error(-8, \"parameter 3 must be hexadecimal\", self.nodes[0].getrawtransaction, tx, True, \"foobar\")\n         assert_raises_rpc_error(-8, \"parameter 3 must be of length 64\", self.nodes[0].getrawtransaction, tx, True, \"abcd1234\")\n-        assert_raises_rpc_error(-5, \"Block hash not found\", self.nodes[0].getrawtransaction, tx, True, \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\")\n+        assert_raises_rpc_error(-5, \"Block hash not found\", self.nodes[0].getrawtransaction, tx, True, \"0000000000000000000000000000000000000000000000000000000000000000\")\n+        # Undo the blocks and check in_active_chain\n+        self.nodes[0].invalidateblock(block1)\n+        gottx = self.nodes[0].getrawtransaction(txid=tx, verbose=True, blockhash=block1)\n+        assert_equal(gottx['in_active_chain'], False)\n+        self.nodes[0].reconsiderblock(block1)\n+        assert_equal(self.nodes[0].getbestblockhash(), block2)\n \n         #########################\n         # RAW TX MULTISIG TESTS #\n@@ -212,13 +218,13 @@ def run_test(self):\n         assert_equal(self.nodes[0].getrawtransaction(txHash, True)[\"hex\"], rawTxSigned['hex'])\n \n         # 6. invalid parameters - supply txid and string \"Flase\"\n-        assert_raises_rpc_error(-1,\"not a boolean\", self.nodes[0].getrawtransaction, txHash, \"Flase\")\n+        assert_raises_rpc_error(-1, \"not a boolean\", self.nodes[0].getrawtransaction, txHash, \"Flase\")\n \n         # 7. invalid parameters - supply txid and empty array\n-        assert_raises_rpc_error(-1,\"not a boolean\", self.nodes[0].getrawtransaction, txHash, [])\n+        assert_raises_rpc_error(-1, \"not a boolean\", self.nodes[0].getrawtransaction, txHash, [])\n \n         # 8. invalid parameters - supply txid and empty dict\n-        assert_raises_rpc_error(-1,\"not a boolean\", self.nodes[0].getrawtransaction, txHash, {})\n+        assert_raises_rpc_error(-1, \"not a boolean\", self.nodes[0].getrawtransaction, txHash, {})\n \n         inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1, 'sequence' : 1000}]\n         outputs = { self.nodes[0].getnewaddress() : 1 }"
      }
    ]
  }
]