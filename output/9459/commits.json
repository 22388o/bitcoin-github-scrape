[
  {
    "sha": "5cae31114f1c9c52ea40e31076db30a77a55bb6b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1Y2FlMzExMTRmMWM5YzUyZWE0MGUzMTA3NmRiMzBhNzdhNTViYjZi",
    "commit": {
      "author": {
        "name": "isle2983",
        "email": "isle2983@yahoo.com",
        "date": "2017-02-01T00:07:35Z"
      },
      "committer": {
        "name": "isle2983",
        "email": "isle2983@yahoo.com",
        "date": "2017-02-01T00:07:35Z"
      },
      "message": "Minor adjustments to MIT Licence copyright headers to make uniform",
      "tree": {
        "sha": "a05f5563d713e811d601b9dee7a54823865bd698",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a05f5563d713e811d601b9dee7a54823865bd698"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5cae31114f1c9c52ea40e31076db30a77a55bb6b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5cae31114f1c9c52ea40e31076db30a77a55bb6b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5cae31114f1c9c52ea40e31076db30a77a55bb6b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5cae31114f1c9c52ea40e31076db30a77a55bb6b/comments",
    "author": {
      "login": "isle2983",
      "id": 20916903,
      "node_id": "MDQ6VXNlcjIwOTE2OTAz",
      "avatar_url": "https://avatars.githubusercontent.com/u/20916903?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/isle2983",
      "html_url": "https://github.com/isle2983",
      "followers_url": "https://api.github.com/users/isle2983/followers",
      "following_url": "https://api.github.com/users/isle2983/following{/other_user}",
      "gists_url": "https://api.github.com/users/isle2983/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/isle2983/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/isle2983/subscriptions",
      "organizations_url": "https://api.github.com/users/isle2983/orgs",
      "repos_url": "https://api.github.com/users/isle2983/repos",
      "events_url": "https://api.github.com/users/isle2983/events{/privacy}",
      "received_events_url": "https://api.github.com/users/isle2983/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "isle2983",
      "id": 20916903,
      "node_id": "MDQ6VXNlcjIwOTE2OTAz",
      "avatar_url": "https://avatars.githubusercontent.com/u/20916903?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/isle2983",
      "html_url": "https://github.com/isle2983",
      "followers_url": "https://api.github.com/users/isle2983/followers",
      "following_url": "https://api.github.com/users/isle2983/following{/other_user}",
      "gists_url": "https://api.github.com/users/isle2983/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/isle2983/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/isle2983/subscriptions",
      "organizations_url": "https://api.github.com/users/isle2983/orgs",
      "repos_url": "https://api.github.com/users/isle2983/repos",
      "events_url": "https://api.github.com/users/isle2983/events{/privacy}",
      "received_events_url": "https://api.github.com/users/isle2983/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e99f0d7ad443ff72087c6f80e9fab65cace0bf19",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e99f0d7ad443ff72087c6f80e9fab65cace0bf19",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e99f0d7ad443ff72087c6f80e9fab65cace0bf19"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 15,
      "deletions": 13
    },
    "files": [
      {
        "sha": "1ae3bd45f2e5f1f4792363a36ef8e25898f7aded",
        "filename": "contrib/devtools/gen-manpages.sh",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5cae31114f1c9c52ea40e31076db30a77a55bb6b/contrib/devtools/gen-manpages.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5cae31114f1c9c52ea40e31076db30a77a55bb6b/contrib/devtools/gen-manpages.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/gen-manpages.sh?ref=5cae31114f1c9c52ea40e31076db30a77a55bb6b",
        "patch": "@@ -1,4 +1,7 @@\n #!/bin/sh\n+# Copyright (c) 2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n TOPDIR=${TOPDIR:-$(git rev-parse --show-toplevel)}\n SRCDIR=${SRCDIR:-$TOPDIR/src}"
      },
      {
        "sha": "e7427df39e6a34dda6d5571909e4f594e2bc84fe",
        "filename": "contrib/linearize/linearize-data.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5cae31114f1c9c52ea40e31076db30a77a55bb6b/contrib/linearize/linearize-data.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5cae31114f1c9c52ea40e31076db30a77a55bb6b/contrib/linearize/linearize-data.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/linearize/linearize-data.py?ref=5cae31114f1c9c52ea40e31076db30a77a55bb6b",
        "patch": "@@ -1,11 +1,10 @@\n #!/usr/bin/env python3\n-#\n-# linearize-data.py: Construct a linear, no-fork version of the chain.\n-#\n # Copyright (c) 2013-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n #\n+# linearize-data.py: Construct a linear, no-fork version of the chain.\n+#\n \n from __future__ import print_function, division\n import struct"
      },
      {
        "sha": "7fecf3f736e5411b41879ad72450577e5b2bb7f5",
        "filename": "contrib/linearize/linearize-hashes.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5cae31114f1c9c52ea40e31076db30a77a55bb6b/contrib/linearize/linearize-hashes.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5cae31114f1c9c52ea40e31076db30a77a55bb6b/contrib/linearize/linearize-hashes.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/linearize/linearize-hashes.py?ref=5cae31114f1c9c52ea40e31076db30a77a55bb6b",
        "patch": "@@ -1,11 +1,10 @@\n #!/usr/bin/env python3\n-#\n-# linearize-hashes.py:  List blocks in a linear, no-fork version of the chain.\n-#\n # Copyright (c) 2013-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n #\n+# linearize-hashes.py:  List blocks in a linear, no-fork version of the chain.\n+#\n \n from __future__ import print_function\n try: # Python 3"
      },
      {
        "sha": "c37fdb0a8e09fdc7c312bf1662ba53e2d0306c1b",
        "filename": "qa/rpc-tests/test_framework/blocktools.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5cae31114f1c9c52ea40e31076db30a77a55bb6b/qa/rpc-tests/test_framework/blocktools.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5cae31114f1c9c52ea40e31076db30a77a55bb6b/qa/rpc-tests/test_framework/blocktools.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/blocktools.py?ref=5cae31114f1c9c52ea40e31076db30a77a55bb6b",
        "patch": "@@ -1,8 +1,9 @@\n #!/usr/bin/env python3\n-# blocktools.py - utilities for manipulating blocks and transactions\n # Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#\n+# blocktools.py - utilities for manipulating blocks and transactions\n \n from .mininode import *\n from .script import CScript, OP_TRUE, OP_CHECKSIG, OP_RETURN"
      },
      {
        "sha": "da8b23ab8b5bc3d0aba8972644efbf74dfde3949",
        "filename": "share/rpcuser/rpcuser.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5cae31114f1c9c52ea40e31076db30a77a55bb6b/share/rpcuser/rpcuser.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5cae31114f1c9c52ea40e31076db30a77a55bb6b/share/rpcuser/rpcuser.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/rpcuser/rpcuser.py?ref=5cae31114f1c9c52ea40e31076db30a77a55bb6b",
        "patch": "@@ -1,6 +1,6 @@\n #!/usr/bin/env python2 \n # Copyright (c) 2015-2016 The Bitcoin Core developers\n-# Distributed under the MIT software license, see the accompanying \n+# Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n import hashlib"
      },
      {
        "sha": "996b6d2fc579282e660a731194b9fdd523d3f0c4",
        "filename": "src/test/bctest.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5cae31114f1c9c52ea40e31076db30a77a55bb6b/src/test/bctest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5cae31114f1c9c52ea40e31076db30a77a55bb6b/src/test/bctest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bctest.py?ref=5cae31114f1c9c52ea40e31076db30a77a55bb6b",
        "patch": "@@ -1,5 +1,5 @@\n-# Copyright 2014 BitPay Inc.\n-# Copyright 2016 The Bitcoin Core developers\n+# Copyright (c) 2014 BitPay Inc.\n+# Copyright (c) 2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n from __future__ import division,print_function,unicode_literals"
      },
      {
        "sha": "89ecb911f0f570608c54111b7670607f41e2e82c",
        "filename": "src/test/bitcoin-util-test.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5cae31114f1c9c52ea40e31076db30a77a55bb6b/src/test/bitcoin-util-test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5cae31114f1c9c52ea40e31076db30a77a55bb6b/src/test/bitcoin-util-test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bitcoin-util-test.py?ref=5cae31114f1c9c52ea40e31076db30a77a55bb6b",
        "patch": "@@ -1,6 +1,6 @@\n #!/usr/bin/env python\n-# Copyright 2014 BitPay Inc.\n-# Copyright 2016 The Bitcoin Core developers\n+# Copyright (c) 2014 BitPay Inc.\n+# Copyright (c) 2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n from __future__ import division,print_function,unicode_literals"
      },
      {
        "sha": "fcef75533e04aa76be4a1aa1c0073dd8c9f82742",
        "filename": "src/test/pow_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5cae31114f1c9c52ea40e31076db30a77a55bb6b/src/test/pow_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5cae31114f1c9c52ea40e31076db30a77a55bb6b/src/test/pow_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/pow_tests.cpp?ref=5cae31114f1c9c52ea40e31076db30a77a55bb6b",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2015 The Bitcoin Core developers\n-// Distributed under the MIT/X11 software license, see the accompanying\n+// Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"chain.h\""
      }
    ]
  },
  {
    "sha": "ccc3e19ce1f18dc50a3c034e90658dda96aff91f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjY2MzZTE5Y2UxZjE4ZGM1MGEzYzAzNGU5MDY1OGRkYTk2YWZmOTFm",
    "commit": {
      "author": {
        "name": "isle2983",
        "email": "isle2983@yahoo.com",
        "date": "2017-01-23T02:44:42Z"
      },
      "committer": {
        "name": "isle2983",
        "email": "isle2983@yahoo.com",
        "date": "2017-02-01T00:07:38Z"
      },
      "message": "Iteration on copyright_header.py to use regexes and add 'check' subcommand\n\nThe validation of the copyright header is done with a more comprehensive regex\ncheck for the exact format.\n\nThe output of the 'report' command has changed to give the results of specific\nexpectations for sets of files.\n\nAlso implements 'check' command to give non-zero shell status if issues are\nfound along with hints on what needs to be done to resolve the issue.",
      "tree": {
        "sha": "02d56c7b1220abb6a45908912dedc87f2450aba8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/02d56c7b1220abb6a45908912dedc87f2450aba8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ccc3e19ce1f18dc50a3c034e90658dda96aff91f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ccc3e19ce1f18dc50a3c034e90658dda96aff91f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ccc3e19ce1f18dc50a3c034e90658dda96aff91f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ccc3e19ce1f18dc50a3c034e90658dda96aff91f/comments",
    "author": {
      "login": "isle2983",
      "id": 20916903,
      "node_id": "MDQ6VXNlcjIwOTE2OTAz",
      "avatar_url": "https://avatars.githubusercontent.com/u/20916903?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/isle2983",
      "html_url": "https://github.com/isle2983",
      "followers_url": "https://api.github.com/users/isle2983/followers",
      "following_url": "https://api.github.com/users/isle2983/following{/other_user}",
      "gists_url": "https://api.github.com/users/isle2983/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/isle2983/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/isle2983/subscriptions",
      "organizations_url": "https://api.github.com/users/isle2983/orgs",
      "repos_url": "https://api.github.com/users/isle2983/repos",
      "events_url": "https://api.github.com/users/isle2983/events{/privacy}",
      "received_events_url": "https://api.github.com/users/isle2983/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "isle2983",
      "id": 20916903,
      "node_id": "MDQ6VXNlcjIwOTE2OTAz",
      "avatar_url": "https://avatars.githubusercontent.com/u/20916903?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/isle2983",
      "html_url": "https://github.com/isle2983",
      "followers_url": "https://api.github.com/users/isle2983/followers",
      "following_url": "https://api.github.com/users/isle2983/following{/other_user}",
      "gists_url": "https://api.github.com/users/isle2983/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/isle2983/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/isle2983/subscriptions",
      "organizations_url": "https://api.github.com/users/isle2983/orgs",
      "repos_url": "https://api.github.com/users/isle2983/repos",
      "events_url": "https://api.github.com/users/isle2983/events{/privacy}",
      "received_events_url": "https://api.github.com/users/isle2983/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5cae31114f1c9c52ea40e31076db30a77a55bb6b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5cae31114f1c9c52ea40e31076db30a77a55bb6b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5cae31114f1c9c52ea40e31076db30a77a55bb6b"
      }
    ],
    "stats": {
      "total": 990,
      "additions": 621,
      "deletions": 369
    },
    "files": [
      {
        "sha": "cd7821547505c966f223f8330a91b096573e6cac",
        "filename": "contrib/devtools/README.md",
        "status": "modified",
        "additions": 20,
        "deletions": 7,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ccc3e19ce1f18dc50a3c034e90658dda96aff91f/contrib/devtools/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ccc3e19ce1f18dc50a3c034e90658dda96aff91f/contrib/devtools/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/README.md?ref=ccc3e19ce1f18dc50a3c034e90658dda96aff91f",
        "patch": "@@ -23,24 +23,37 @@ git diff -U0 HEAD~1.. | ./contrib/devtools/clang-format-diff.py -p1 -i -v\n copyright\\_header.py\n ====================\n \n-Provides utilities for managing copyright headers of `The Bitcoin Core\n-developers` in repository source files. It has three subcommands:\n+Provides utilities for managing copyright headers in repository source files.\n+It has four subcommands:\n \n ```\n-$ ./copyright_header.py report <base_directory> [verbose]\n+$ ./copyright_header.py report <base_directory>\n+$ ./copyright_header.py check <base_directory>\n $ ./copyright_header.py update <base_directory>\n $ ./copyright_header.py insert <file>\n ```\n Running these subcommands without arguments displays a usage string.\n \n-copyright\\_header.py report \\<base\\_directory\\> [verbose]\n+copyright\\_header.py report \\<base\\_directory\\>\n ---------------------------------------------------------\n \n Produces a report of all copyright header notices found inside the source files\n-of a repository. Useful to quickly visualize the state of the headers.\n-Specifying `verbose` will list the full filenames of files of each category.\n+of a repository. Useful to quickly visualize the state of the headers in the\n+repository. If there are issues found, the specific files are listed with a\n+summary of what the issue is.\n \n-copyright\\_header.py update \\<base\\_directory\\> [verbose]\n+copyright\\_header.py check \\<base\\_directory\\>\n+---------------------------------------------------------\n+\n+Similar to the `report` command, but is for a more straightforward check meant\n+to accept or reject the state of the repository. If no issues are found, it\n+returns a zero status. If issues are found it returns a non-zero status and\n+also lists the specific files and gives a suggestion for how to resolve the\n+issue. Resolution involves either fixing the file (because there was a\n+legitimate problem) or updating the script's rules (because making an exception\n+is appropriate).\n+\n+copyright\\_header.py update \\<base\\_directory\\>\n ---------------------------------------------------------\n Updates all the copyright headers of `The Bitcoin Core developers` which were\n changed in a year more recent than is listed. For example:"
      },
      {
        "sha": "180605814826e6b85631a8359feaa008ef09e10d",
        "filename": "contrib/devtools/copyright_header.py",
        "status": "modified",
        "additions": 601,
        "deletions": 362,
        "changes": 963,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ccc3e19ce1f18dc50a3c034e90658dda96aff91f/contrib/devtools/copyright_header.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ccc3e19ce1f18dc50a3c034e90658dda96aff91f/contrib/devtools/copyright_header.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/copyright_header.py?ref=ccc3e19ce1f18dc50a3c034e90658dda96aff91f",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2016 The Bitcoin Core developers\n+# Copyright (c) 2017 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -10,303 +10,547 @@\n import datetime\n import os\n \n-################################################################################\n-# file filtering\n-################################################################################\n-\n-EXCLUDE = [\n-    # libsecp256k1:\n-    'src/secp256k1/include/secp256k1.h',\n-    'src/secp256k1/include/secp256k1_ecdh.h',\n-    'src/secp256k1/include/secp256k1_recovery.h',\n-    'src/secp256k1/include/secp256k1_schnorr.h',\n-    'src/secp256k1/src/java/org_bitcoin_NativeSecp256k1.c',\n-    'src/secp256k1/src/java/org_bitcoin_NativeSecp256k1.h',\n-    'src/secp256k1/src/java/org_bitcoin_Secp256k1Context.c',\n-    'src/secp256k1/src/java/org_bitcoin_Secp256k1Context.h',\n-    # auto generated:\n-    'src/univalue/lib/univalue_escapes.h',\n+\n+###############################################################################\n+# helper for converting fnmatch expressions into python regexes and compiling\n+###############################################################################\n+\n+\n+def compile_fnmatches(fnmatches):\n+    if fnmatches is None or len(fnmatches) == 0:\n+        # a regex that matches nothing (including not matching an empty string)\n+        return re.compile('(?!)')\n+    return re.compile('|'.join([fnmatch.translate(m) for m in fnmatches]))\n+\n+\n+###############################################################################\n+# common constants for regexes\n+###############################################################################\n+\n+\n+# this script is only applied to files in 'git ls-files' of these extensions:\n+SOURCE_FILES = ['*.h', '*.cpp', '*.cc', '*.c', '*.py', '*.sh', '*.am', '*.m4',\n+                '*.include']\n+\n+SOURCE_FILES_COMPILED = compile_fnmatches(SOURCE_FILES)\n+\n+ALWAYS_IGNORE = [\n+    # empty files for python init:\n+    '*__init__.py',\n+    # files in subtrees:\n+    'src/secp256k1/*',\n+    'src/leveldb/*',\n+    'src/univalue/*',\n+    'src/crypto/ctaes/*',\n+]\n+\n+ALWAYS_IGNORE_COMPILED = compile_fnmatches(ALWAYS_IGNORE)\n+\n+YEAR = \"20[0-9][0-9]\"\n+YEAR_RANGE = '(?P<start_year>%s)(-(?P<end_year>%s))?' % (YEAR, YEAR)\n+\n+YEAR_RANGE_COMPILED = re.compile(YEAR_RANGE)\n+\n+\n+###############################################################################\n+# header regex and ignore list for the base bitcoin core repository\n+###############################################################################\n+\n+\n+HOLDERS = [\n+    \"Satoshi Nakamoto\",\n+    \"The Bitcoin Core developers\",\n+    \"Pieter Wuille\",\n+    \"Wladimir J\\\\. van der Laan\",\n+    \"Jeff Garzik\",\n+    \"BitPay Inc\\\\.\",\n+    \"MarcoFalke\",\n+    \"ArtForz -- public domain half-a-node\",\n+    \"Jeremy Rubin\",\n+]\n+ANY_HOLDER = '|'.join([h for h in HOLDERS])\n+COPYRIGHT_LINE = (\n+    \"(#|//|dnl) Copyright \\\\(c\\\\) %s (%s)\" % (YEAR_RANGE, ANY_HOLDER))\n+LAST_TWO_LINES = (\"(#|//|dnl) Distributed under the MIT software license, see \"\n+                  \"the accompanying\\n(#|//|dnl) file COPYING or \"\n+                  \"http://www\\\\.opensource\\\\.org/licenses/mit-license\\\\.php\\\\.\"\n+                  \"\\n\")\n+\n+HEADER = \"(%s\\n)+%s\" % (COPYRIGHT_LINE, LAST_TWO_LINES)\n+\n+HEADER_COMPILED = re.compile(HEADER)\n+\n+NO_HEADER_EXPECTED = [\n+    # build scripts\n+    'doc/man/Makefile.am',\n+    'build-aux/m4/ax_boost_base.m4',\n+    'build-aux/m4/ax_boost_chrono.m4',\n+    'build-aux/m4/ax_boost_filesystem.m4',\n+    'build-aux/m4/ax_boost_program_options.m4',\n+    'build-aux/m4/ax_boost_system.m4',\n+    'build-aux/m4/ax_boost_thread.m4',\n+    'build-aux/m4/ax_boost_unit_test_framework.m4',\n+    'build-aux/m4/ax_check_compile_flag.m4',\n+    'build-aux/m4/ax_check_link_flag.m4',\n+    'build-aux/m4/ax_check_preproc_flag.m4',\n+    'build-aux/m4/ax_cxx_compile_stdcxx.m4',\n+    'build-aux/m4/ax_gcc_func_attribute.m4',\n+    'build-aux/m4/ax_pthread.m4',\n+    'build-aux/m4/l_atomic.m4',\n+    # auto generated files:\n     'src/qt/bitcoinstrings.cpp',\n     'src/chainparamsseeds.h',\n-    # other external copyrights:\n+    # other copyright notices:\n     'src/tinyformat.h',\n-    'src/leveldb/util/env_win.cc',\n-    'src/crypto/ctaes/bench.c',\n     'qa/rpc-tests/test_framework/bignum.py',\n-    # python init:\n-    '*__init__.py',\n+    'contrib/devtools/clang-format-diff.py',\n+    'qa/rpc-tests/test_framework/authproxy.py',\n+    'qa/rpc-tests/test_framework/key.py',\n+]\n+\n+NO_HEADER_EXPECTED_COMPILED = compile_fnmatches(NO_HEADER_EXPECTED)\n+\n+OTHER_COPYRIGHT_EXPECTED = [\n+    # Uses of the word 'copyright' that are unrelated to the header:\n+    'contrib/devtools/copyright_header.py',\n+    'contrib/devtools/gen-manpages.sh',\n+    'share/qt/extract_strings_qt.py',\n+    'src/Makefile.qt.include',\n+    'src/clientversion.h',\n+    'src/init.cpp',\n+    'src/qt/bitcoinstrings.cpp',\n+    'src/qt/splashscreen.cpp',\n+    'src/util.cpp',\n+    'src/util.h',\n+    # other, non-core copyright notices:\n+    'src/tinyformat.h',\n+    'contrib/devtools/clang-format-diff.py',\n+    'qa/rpc-tests/test_framework/authproxy.py',\n+    'qa/rpc-tests/test_framework/key.py',\n+    'contrib/devtools/git-subtree-check.sh',\n+    'build-aux/m4/l_atomic.m4',\n+    # build scripts:\n+    'build-aux/m4/ax_boost_base.m4',\n+    'build-aux/m4/ax_boost_chrono.m4',\n+    'build-aux/m4/ax_boost_filesystem.m4',\n+    'build-aux/m4/ax_boost_program_options.m4',\n+    'build-aux/m4/ax_boost_system.m4',\n+    'build-aux/m4/ax_boost_thread.m4',\n+    'build-aux/m4/ax_boost_unit_test_framework.m4',\n+    'build-aux/m4/ax_check_compile_flag.m4',\n+    'build-aux/m4/ax_check_link_flag.m4',\n+    'build-aux/m4/ax_check_preproc_flag.m4',\n+    'build-aux/m4/ax_cxx_compile_stdcxx.m4',\n+    'build-aux/m4/ax_gcc_func_attribute.m4',\n+    'build-aux/m4/ax_pthread.m4',\n ]\n-EXCLUDE_COMPILED = re.compile('|'.join([fnmatch.translate(m) for m in EXCLUDE]))\n \n-INCLUDE = ['*.h', '*.cpp', '*.cc', '*.c', '*.py']\n-INCLUDE_COMPILED = re.compile('|'.join([fnmatch.translate(m) for m in INCLUDE]))\n+OTHER_COPYRIGHT_EXPECTED_COMPILED = compile_fnmatches(OTHER_COPYRIGHT_EXPECTED)\n+\n \n-def applies_to_file(filename):\n-    return ((EXCLUDE_COMPILED.match(filename) is None) and\n-            (INCLUDE_COMPILED.match(filename) is not None))\n+###############################################################################\n+# obtain list of files in repo to check that match extensions\n+###############################################################################\n \n-################################################################################\n-# obtain list of files in repo according to INCLUDE and EXCLUDE\n-################################################################################\n \n GIT_LS_CMD = 'git ls-files'\n \n-def call_git_ls():\n+\n+def git_ls():\n     out = subprocess.check_output(GIT_LS_CMD.split(' '))\n     return [f for f in out.decode(\"utf-8\").split('\\n') if f != '']\n \n-def get_filenames_to_examine():\n-    filenames = call_git_ls()\n-    return sorted([filename for filename in filenames if\n-                   applies_to_file(filename)])\n \n-################################################################################\n-# define and compile regexes for the patterns we are looking for\n-################################################################################\n+SOURCE_FILES_COMPILED = re.compile('|'.join([fnmatch.translate(match)\n+                                             for match in SOURCE_FILES]))\n \n+ALWAYS_IGNORE_COMPILED = re.compile('|'.join([fnmatch.translate(match)\n+                                              for match in ALWAYS_IGNORE]))\n \n-COPYRIGHT_WITH_C = 'Copyright \\(c\\)'\n-COPYRIGHT_WITHOUT_C = 'Copyright'\n-ANY_COPYRIGHT_STYLE = '(%s|%s)' % (COPYRIGHT_WITH_C, COPYRIGHT_WITHOUT_C)\n \n-YEAR = \"20[0-9][0-9]\"\n-YEAR_RANGE = '(%s)(-%s)?' % (YEAR, YEAR)\n-YEAR_LIST = '(%s)(, %s)+' % (YEAR, YEAR)\n-ANY_YEAR_STYLE = '(%s|%s)' % (YEAR_RANGE, YEAR_LIST)\n-ANY_COPYRIGHT_STYLE_OR_YEAR_STYLE = (\"%s %s\" % (ANY_COPYRIGHT_STYLE,\n-                                                ANY_YEAR_STYLE))\n-\n-ANY_COPYRIGHT_COMPILED = re.compile(ANY_COPYRIGHT_STYLE_OR_YEAR_STYLE)\n-\n-def compile_copyright_regex(copyright_style, year_style, name):\n-    return re.compile('%s %s %s' % (copyright_style, year_style, name))\n-\n-EXPECTED_HOLDER_NAMES = [\n-    \"Satoshi Nakamoto\\n\",\n-    \"The Bitcoin Core developers\\n\",\n-    \"The Bitcoin Core developers \\n\",\n-    \"Bitcoin Core Developers\\n\",\n-    \"the Bitcoin Core developers\\n\",\n-    \"The Bitcoin developers\\n\",\n-    \"The LevelDB Authors\\. All rights reserved\\.\\n\",\n-    \"BitPay Inc\\.\\n\",\n-    \"BitPay, Inc\\.\\n\",\n-    \"University of Illinois at Urbana-Champaign\\.\\n\",\n-    \"MarcoFalke\\n\",\n-    \"Pieter Wuille\\n\",\n-    \"Pieter Wuille +\\*\\n\",\n-    \"Pieter Wuille, Gregory Maxwell +\\*\\n\",\n-    \"Pieter Wuille, Andrew Poelstra +\\*\\n\",\n-    \"Andrew Poelstra +\\*\\n\",\n-    \"Wladimir J. van der Laan\\n\",\n-    \"Jeff Garzik\\n\",\n-    \"Diederik Huys, Pieter Wuille +\\*\\n\",\n-    \"Thomas Daede, Cory Fields +\\*\\n\",\n-    \"Jan-Klaas Kollhof\\n\",\n-    \"Sam Rushing\\n\",\n-    \"ArtForz -- public domain half-a-node\\n\",\n-]\n+def filename_is_to_be_examined(filename):\n+    return (SOURCE_FILES_COMPILED.match(filename) and not\n+            ALWAYS_IGNORE_COMPILED.match(filename))\n \n-DOMINANT_STYLE_COMPILED = {}\n-YEAR_LIST_STYLE_COMPILED = {}\n-WITHOUT_C_STYLE_COMPILED = {}\n \n-for holder_name in EXPECTED_HOLDER_NAMES:\n-    DOMINANT_STYLE_COMPILED[holder_name] = (\n-        compile_copyright_regex(COPYRIGHT_WITH_C, YEAR_RANGE, holder_name))\n-    YEAR_LIST_STYLE_COMPILED[holder_name] = (\n-        compile_copyright_regex(COPYRIGHT_WITH_C, YEAR_LIST, holder_name))\n-    WITHOUT_C_STYLE_COMPILED[holder_name] = (\n-        compile_copyright_regex(COPYRIGHT_WITHOUT_C, ANY_YEAR_STYLE,\n-                                holder_name))\n+def get_filenames_to_examine(full_file_list):\n+    return sorted([filename for filename in full_file_list if\n+                   filename_is_to_be_examined(filename)])\n \n-################################################################################\n-# search file contents for copyright message of particular category\n-################################################################################\n \n-def get_count_of_copyrights_of_any_style_any_holder(contents):\n-    return len(ANY_COPYRIGHT_COMPILED.findall(contents))\n+###############################################################################\n+# detect if file contents have the copyright header in the right place\n+###############################################################################\n \n-def file_has_dominant_style_copyright_for_holder(contents, holder_name):\n-    match = DOMINANT_STYLE_COMPILED[holder_name].search(contents)\n-    return match is not None\n \n-def file_has_year_list_style_copyright_for_holder(contents, holder_name):\n-    match = YEAR_LIST_STYLE_COMPILED[holder_name].search(contents)\n-    return match is not None\n+def starts_with_shebang(contents):\n+    if len(contents) < 2:\n+        return False\n+    return contents[:2] == '#!'\n \n-def file_has_without_c_style_copyright_for_holder(contents, holder_name):\n-    match = WITHOUT_C_STYLE_COMPILED[holder_name].search(contents)\n-    return match is not None\n \n-################################################################################\n-# get file info\n-################################################################################\n+def header_match_in_correct_place(contents, header_match):\n+    start = header_match.start(0)\n+    shebang = starts_with_shebang(contents)\n+    if start == 0:\n+        return not shebang\n+    return shebang and (contents[:start].count('\\n') == 1)\n+\n+\n+def file_has_header(contents):\n+    header_match = HEADER_COMPILED.search(contents)\n+    if not header_match:\n+        return False\n+    return header_match_in_correct_place(contents, header_match)\n+\n+\n+###############################################################################\n+# detect if file has a copyright message in a place outside the header\n+###############################################################################\n+\n+\n+OTHER_COPYRIGHT = \"(Copyright|COPYRIGHT|copyright)\"\n+OTHER_COPYRIGHT_COMPILED = re.compile(OTHER_COPYRIGHT)\n+\n+\n+def has_copyright_in_region(contents_region):\n+    return OTHER_COPYRIGHT_COMPILED.search(contents_region)\n+\n+\n+def file_has_other_copyright(contents):\n+    # look for the OTHER_COPYRIGHT regex outside the normal header regex match\n+    header_match = HEADER_COMPILED.search(contents)\n+    if header_match:\n+        return has_copyright_in_region(contents[header_match.end():])\n+    return has_copyright_in_region(contents)\n+\n+\n+###############################################################################\n+# file IO\n+###############################################################################\n+\n \n def read_file(filename):\n-    return open(os.path.abspath(filename), 'r').read()\n+    file = open(os.path.abspath(filename), 'r')\n+    contents = file.read()\n+    file.close()\n+    return contents\n+\n+\n+def write_file(filename, contents):\n+    file = open(os.path.abspath(filename), 'w')\n+    file.write(contents)\n+    file.close()\n+\n+\n+###############################################################################\n+# get file info\n+###############################################################################\n+\n+\n+FAILURE_REASON_1 = {\n+    'description': \"A valid header was expected, but the file does not match \"\n+                   \"the regex\",\n+    'resolution': \"\"\"\n+A correct MIT License header copyrighted by 'The Bitcoin Core developers' in\n+the present year can be inserted into a file by running:\n+\n+    $ ./contrib/devtools/copyright_header.py insert <filename>\n+\n+If there was a preexisting invalid header in the file, that will need to be\n+manually deleted. If there is a new copyright holder for the MIT License, the\n+holder will need to be added to the HOLDERS list to include it in the regex\n+check.\n+\"\"\"\n+}\n+\n+FAILURE_REASON_2 = {\n+    'description': \"A valid header was found in the file, but it wasn't \"\n+                   \"expected\",\n+    'resolution': \"\"\"\n+The header was not expected due to a setting in copyright_header.py. If a valid\n+copyright header has been added to the file, the filename can be removed from\n+the NO_HEADER_EXPECTED listing.\n+\"\"\"\n+}\n+\n+FAILURE_REASON_3 = {\n+    'description': \"Another 'copyright' occurrence was found, but it wasn't \"\n+                   \"expected\",\n+    'resolution': \"\"\"\n+This file's body has a regular expression match for the (case-sensitive) words\n+\"Copyright\", \"COPYRIGHT\" or 'copyright\". If this was an appropriate addition,\n+copyright_header.py can be edited to add the file to the\n+OTHER_COPYRIGHT_EXPECTED listing.\n+\"\"\"\n+}\n+\n+FAILURE_REASON_4 = {\n+    'description': \"Another 'copyright' occurrence was expected, but wasn't \"\n+                   \"found.\",\n+    'resolution': \"\"\"\n+A use of the (case-sensitive) words \"Copyright\", \"COPYRIGHT\", or 'copyright'\n+outside of the regular copyright header was expected due to a setting in\n+copyright_header.py but it was not found. If this text was appropriately\n+removed from the file, copyright_header.py can be edited to remove the file\n+from the OTHER_COPYRIGHT_EXPECTED listing.\n+\"\"\"\n+}\n+\n+FAILURE_REASONS = [FAILURE_REASON_1, FAILURE_REASON_2, FAILURE_REASON_3,\n+                   FAILURE_REASON_4]\n+\n+NO_FAILURE = {\n+    'description': \"Everything is excellent\",\n+    'resolution': \"(none)\"\n+}\n+\n+\n+def evaluate(file_info):\n+    if not file_info['has_header'] and file_info['hdr_expected']:\n+        return FAILURE_REASON_1\n+    if file_info['has_header'] and not file_info['hdr_expected']:\n+        return FAILURE_REASON_2\n+    if file_info['has_other'] and not file_info['other_copyright_expected']:\n+        return FAILURE_REASON_3\n+    if not file_info['has_other'] and file_info['other_copyright_expected']:\n+        return FAILURE_REASON_4\n+    return NO_FAILURE\n+\n \n def gather_file_info(filename):\n     info = {}\n     info['filename'] = filename\n-    c = read_file(filename)\n-    info['contents'] = c\n-\n-    info['all_copyrights'] = get_count_of_copyrights_of_any_style_any_holder(c)\n-\n-    info['classified_copyrights'] = 0\n-    info['dominant_style'] = {}\n-    info['year_list_style'] = {}\n-    info['without_c_style'] = {}\n-    for holder_name in EXPECTED_HOLDER_NAMES:\n-        has_dominant_style = (\n-            file_has_dominant_style_copyright_for_holder(c, holder_name))\n-        has_year_list_style = (\n-            file_has_year_list_style_copyright_for_holder(c, holder_name))\n-        has_without_c_style = (\n-            file_has_without_c_style_copyright_for_holder(c, holder_name))\n-        info['dominant_style'][holder_name] = has_dominant_style\n-        info['year_list_style'][holder_name] = has_year_list_style\n-        info['without_c_style'][holder_name] = has_without_c_style\n-        if has_dominant_style or has_year_list_style or has_without_c_style:\n-            info['classified_copyrights'] = info['classified_copyrights'] + 1\n+    info['contents'] = read_file(filename)\n+    info['hdr_expected'] = not NO_HEADER_EXPECTED_COMPILED.match(filename)\n+    info['other_copyright_expected'] = (\n+        OTHER_COPYRIGHT_EXPECTED_COMPILED.match(filename))\n+    info['has_header'] = file_has_header(info['contents'])\n+    info['has_other'] = file_has_other_copyright(info['contents'])\n+    info['evaluation'] = evaluate(info)\n+    info['pass'] = info['evaluation'] is NO_FAILURE\n     return info\n \n-################################################################################\n+\n+###############################################################################\n # report execution\n-################################################################################\n+###############################################################################\n+\n+\n+SEPARATOR = 80 * '-' + '\\n'\n+REPORT = []\n+\n \n-SEPARATOR = '-'.join(['' for _ in range(80)])\n+def report(string):\n+    REPORT.append(string)\n \n-def print_filenames(filenames, verbose):\n-    if not verbose:\n+\n+def report_filenames(file_infos):\n+    if len(file_infos) == 0:\n         return\n-    for filename in filenames:\n-        print(\"\\t%s\" % filename)\n-\n-def print_report(file_infos, verbose):\n-    print(SEPARATOR)\n-    examined = [i['filename'] for i in file_infos]\n-    print(\"%d files examined according to INCLUDE and EXCLUDE fnmatch rules\" %\n-          len(examined))\n-    print_filenames(examined, verbose)\n-\n-    print(SEPARATOR)\n-    print('')\n-    zero_copyrights = [i['filename'] for i in file_infos if\n-                       i['all_copyrights'] == 0]\n-    print(\"%4d with zero copyrights\" % len(zero_copyrights))\n-    print_filenames(zero_copyrights, verbose)\n-    one_copyright = [i['filename'] for i in file_infos if\n-                     i['all_copyrights'] == 1]\n-    print(\"%4d with one copyright\" % len(one_copyright))\n-    print_filenames(one_copyright, verbose)\n-    two_copyrights = [i['filename'] for i in file_infos if\n-                      i['all_copyrights'] == 2]\n-    print(\"%4d with two copyrights\" % len(two_copyrights))\n-    print_filenames(two_copyrights, verbose)\n-    three_copyrights = [i['filename'] for i in file_infos if\n-                        i['all_copyrights'] == 3]\n-    print(\"%4d with three copyrights\" % len(three_copyrights))\n-    print_filenames(three_copyrights, verbose)\n-    four_or_more_copyrights = [i['filename'] for i in file_infos if\n-                               i['all_copyrights'] >= 4]\n-    print(\"%4d with four or more copyrights\" % len(four_or_more_copyrights))\n-    print_filenames(four_or_more_copyrights, verbose)\n-    print('')\n-    print(SEPARATOR)\n-    print('Copyrights with dominant style:\\ne.g. \"Copyright (c)\" and '\n-          '\"<year>\" or \"<startYear>-<endYear>\":\\n')\n-    for holder_name in EXPECTED_HOLDER_NAMES:\n-        dominant_style = [i['filename'] for i in file_infos if\n-                          i['dominant_style'][holder_name]]\n-        if len(dominant_style) > 0:\n-            print(\"%4d with '%s'\" % (len(dominant_style),\n-                                     holder_name.replace('\\n', '\\\\n')))\n-            print_filenames(dominant_style, verbose)\n-    print('')\n-    print(SEPARATOR)\n-    print('Copyrights with year list style:\\ne.g. \"Copyright (c)\" and '\n-          '\"<year1>, <year2>, ...\":\\n')\n-    for holder_name in EXPECTED_HOLDER_NAMES:\n-        year_list_style = [i['filename'] for i in file_infos if\n-                           i['year_list_style'][holder_name]]\n-        if len(year_list_style) > 0:\n-            print(\"%4d with '%s'\" % (len(year_list_style),\n-                                     holder_name.replace('\\n', '\\\\n')))\n-            print_filenames(year_list_style, verbose)\n-    print('')\n-    print(SEPARATOR)\n-    print('Copyrights with no \"(c)\" style:\\ne.g. \"Copyright\" and \"<year>\" or '\n-          '\"<startYear>-<endYear>\":\\n')\n-    for holder_name in EXPECTED_HOLDER_NAMES:\n-        without_c_style = [i['filename'] for i in file_infos if\n-                           i['without_c_style'][holder_name]]\n-        if len(without_c_style) > 0:\n-            print(\"%4d with '%s'\" % (len(without_c_style),\n-                                     holder_name.replace('\\n', '\\\\n')))\n-            print_filenames(without_c_style, verbose)\n-\n-    print('')\n-    print(SEPARATOR)\n-\n-    unclassified_copyrights = [i['filename'] for i in file_infos if\n-                               i['classified_copyrights'] < i['all_copyrights']]\n-    print(\"%d with unexpected copyright holder names\" %\n-          len(unclassified_copyrights))\n-    print_filenames(unclassified_copyrights, verbose)\n-    print(SEPARATOR)\n-\n-def exec_report(base_directory, verbose):\n+    report('\\t')\n+    report('\\n\\t'.join([file_info['filename'] for file_info in file_infos]))\n+    report('\\n')\n+\n+\n+def report_summary(file_infos, full_file_list):\n+    report(\"%4d files tracked according to '%s'\\n\" %\n+           (len(full_file_list), GIT_LS_CMD))\n+    report(\"%4d files examined according to SOURCE_FILES and ALWAYS_IGNORE \"\n+           \"fnmatch rules\\n\" % len(file_infos))\n+\n+\n+def report_failure_reason(reason, failed_file_infos):\n+    report('Reason - \"%s\":\\n' % reason['description'])\n+    report_filenames(failed_file_infos)\n+\n+\n+def report_failure_reasons(failed_file_infos):\n+    for failure_reason in FAILURE_REASONS:\n+        file_infos = [file_info for file_info in failed_file_infos if\n+                      file_info['evaluation'] is failure_reason]\n+        if len(file_infos) == 0:\n+            continue\n+        report_failure_reason(failure_reason, file_infos)\n+\n+\n+def report_details(file_infos):\n+    hdr_expected = [file_info for file_info in file_infos if\n+                    file_info['hdr_expected']]\n+    no_hdr_expected = [file_info for file_info in file_infos if not\n+                       file_info['hdr_expected']]\n+    no_other_copyright_expected = [file_info for file_info in file_infos if not\n+                                   file_info['other_copyright_expected']]\n+    other_copyright_expected = [file_info for file_info in file_infos if\n+                                file_info['other_copyright_expected']]\n+    failed = [file_info for file_info in file_infos if not file_info['pass']]\n+    passed = [file_info for file_info in file_infos if file_info['pass']]\n+\n+    report(\"Files expected to have header:                                    \"\n+           \"%4d\\n\" % len(hdr_expected))\n+    report(\"Files not expected to have header:                                \"\n+           \"%4d\\n\" % len(no_hdr_expected))\n+    report(\"Files not expected to have 'copyright' occurrence outside header: \"\n+           \"%4d\\n\" % len(no_other_copyright_expected))\n+    report(\"Files expected to have 'copyright' occurrence outside header:     \"\n+           \"%4d\\n\" % len(other_copyright_expected))\n+    report(\"Files passed:                                                     \"\n+           \"%4d\\n\" % len(passed))\n+    report(\"Files failed:                                                     \"\n+           \"%4d\\n\" % len(failed))\n+    report_failure_reasons(failed)\n+\n+\n+def print_report(file_infos, full_file_list):\n+    report(SEPARATOR)\n+    report_summary(file_infos, full_file_list)\n+    report(SEPARATOR)\n+    report_details(file_infos)\n+    report(SEPARATOR)\n+    print(''.join(REPORT), end=\"\")\n+\n+\n+def exec_report(base_directory):\n     original_cwd = os.getcwd()\n     os.chdir(base_directory)\n-    filenames = get_filenames_to_examine()\n-    file_infos = [gather_file_info(f) for f in filenames]\n-    print_report(file_infos, verbose)\n+    full_file_list = git_ls()\n+    file_infos = [gather_file_info(filename) for filename in\n+                  get_filenames_to_examine(full_file_list)]\n+    print_report(file_infos, full_file_list)\n     os.chdir(original_cwd)\n \n-################################################################################\n+\n+###############################################################################\n # report cmd\n-################################################################################\n+###############################################################################\n+\n \n REPORT_USAGE = \"\"\"\n Produces a report of all copyright header notices found inside the source files\n of a repository.\n \n Usage:\n-    $ ./copyright_header.py report <base_directory> [verbose]\n+    $ ./copyright_header.py report <base_directory>\n \n Arguments:\n-    <base_directory> - The base directory of a bitcoin source code repository.\n-    [verbose] - Includes a list of every file of each subcategory in the report.\n+    <base_directory> - The base directory of a bitcoin core source code\n+    repository.\n \"\"\"\n \n+\n def report_cmd(argv):\n-    if len(argv) == 2:\n+    if len(argv) != 3:\n         sys.exit(REPORT_USAGE)\n-        \n+\n     base_directory = argv[2]\n     if not os.path.exists(base_directory):\n         sys.exit(\"*** bad <base_directory>: %s\" % base_directory)\n \n-    if len(argv) == 3:\n-        verbose = False\n-    elif argv[3] == 'verbose':\n-        verbose = True\n-    else:\n-        sys.exit(\"*** unknown argument: %s\" % argv[2])\n+    exec_report(base_directory)\n+\n+\n+###############################################################################\n+# check execution\n+###############################################################################\n \n-    exec_report(base_directory, verbose)\n \n-################################################################################\n+GREEN = '\\033[92m'\n+RED = '\\033[91m'\n+ENDC = '\\033[0m'\n+\n+\n+def red_report(string):\n+    report(RED + string + ENDC)\n+\n+\n+def green_report(string):\n+    report(GREEN + string + ENDC)\n+\n+\n+def get_failures(file_infos):\n+    return [file_info for file_info in file_infos if not file_info['pass']]\n+\n+\n+def report_failure(failure):\n+    report(\"An issue was found with \")\n+    red_report(\"%s\" % failure['filename'])\n+    report('\\n\\n%s\\n\\n' % failure['evaluation']['description'])\n+    report('Info for resolution:\\n')\n+    report(failure['evaluation']['resolution'])\n+\n+\n+def print_check_report(full_file_list, file_infos, failures):\n+    report(SEPARATOR)\n+    report_summary(file_infos, full_file_list)\n+    for failure in failures:\n+        report(SEPARATOR)\n+        report_failure(failure)\n+    report(SEPARATOR)\n+    if len(failures) == 0:\n+        green_report(\"No copyright header issues found!\\n\")\n+        report(SEPARATOR)\n+    print(''.join(REPORT), end=\"\")\n+\n+\n+def exec_check(base_directory):\n+    original_cwd = os.getcwd()\n+    os.chdir(base_directory)\n+    full_file_list = git_ls()\n+    file_infos = [gather_file_info(filename) for filename in\n+                  get_filenames_to_examine(full_file_list)]\n+    failures = get_failures(file_infos)\n+    print_check_report(full_file_list, file_infos, failures)\n+    os.chdir(original_cwd)\n+    if len(failures) > 0:\n+        sys.exit(\"*** Copyright header issues found!\")\n+\n+\n+###############################################################################\n+# check cmd\n+###############################################################################\n+\n+\n+CHECK_USAGE = \"\"\"\n+Checks over the repository for any issues with the copyright header. Returns a\n+non-zero status if there are any issues found. Also, a report is printed\n+specifically identifying which files are problematic and a suggestion for what\n+can be done to resolve the issue.\n+\n+Usage:\n+    $ ./copyright_header.py check <base_directory>\n+\n+Arguments:\n+    <base_directory> - The base directory of a bitcoin core source code\n+    repository.\n+\"\"\"\n+\n+\n+def check_cmd(argv):\n+    if len(argv) != 3:\n+        sys.exit(CHECK_USAGE)\n+\n+    base_directory = argv[2]\n+    if not os.path.exists(base_directory):\n+        sys.exit(\"*** bad <base_directory>: %s\" % base_directory)\n+\n+    exec_check(base_directory)\n+\n+\n+###############################################################################\n # query git for year of last change\n-################################################################################\n+###############################################################################\n+\n+\n+GIT_LOG_CMD = \"git log --follow --pretty=format:%%ai %s\"\n \n-GIT_LOG_CMD = \"git log --pretty=format:%%ai %s\"\n \n def call_git_log(filename):\n     out = subprocess.check_output((GIT_LOG_CMD % filename).split(' '))\n-    return out.decode(\"utf-8\").split('\\n')\n+    decoded = out.decode(\"utf-8\")\n+    if decoded == '':\n+        return []\n+    return decoded.split('\\n')\n+\n \n def get_git_change_years(filename):\n     git_log_lines = call_git_log(filename)\n@@ -315,33 +559,26 @@ def get_git_change_years(filename):\n     # timestamp is in ISO 8601 format. e.g. \"2016-09-05 14:25:32 -0600\"\n     return [line.split(' ')[0].split('-')[0] for line in git_log_lines]\n \n+\n def get_most_recent_git_change_year(filename):\n     return max(get_git_change_years(filename))\n \n-################################################################################\n-# read and write to file\n-################################################################################\n \n-def read_file_lines(filename):\n-    f = open(os.path.abspath(filename), 'r')\n-    file_lines = f.readlines()\n-    f.close()\n-    return file_lines\n+def get_git_change_year_range(filename):\n+    years = get_git_change_years(filename)\n+    return min(years), max(years)\n \n-def write_file_lines(filename, file_lines):\n-    f = open(os.path.abspath(filename), 'w')\n-    f.write(''.join(file_lines))\n-    f.close()\n \n-################################################################################\n+###############################################################################\n # update header years execution\n-################################################################################\n+###############################################################################\n \n-COPYRIGHT = 'Copyright \\(c\\)'\n-YEAR = \"20[0-9][0-9]\"\n-YEAR_RANGE = '(%s)(-%s)?' % (YEAR, YEAR)\n+\n+COPYRIGHT = 'Copyright \\\\(c\\\\)'\n HOLDER = 'The Bitcoin Core developers'\n-UPDATEABLE_LINE_COMPILED = re.compile(' '.join([COPYRIGHT, YEAR_RANGE, HOLDER]))\n+UPDATEABLE_LINE_COMPILED = re.compile(' '.join([COPYRIGHT, YEAR_RANGE,\n+                                                HOLDER]))\n+\n \n def get_updatable_copyright_line(file_lines):\n     index = 0\n@@ -351,61 +588,68 @@ def get_updatable_copyright_line(file_lines):\n         index = index + 1\n     return None, None\n \n-def parse_year_range(year_range):\n-    year_split = year_range.split('-')\n-    start_year = year_split[0]\n-    if len(year_split) == 1:\n-        return start_year, start_year\n-    return start_year, year_split[1]\n \n def year_range_to_str(start_year, end_year):\n     if start_year == end_year:\n         return start_year\n     return \"%s-%s\" % (start_year, end_year)\n \n+\n def create_updated_copyright_line(line, last_git_change_year):\n-    copyright_splitter = 'Copyright (c) '\n-    copyright_split = line.split(copyright_splitter)\n-    # Preserve characters on line that are ahead of the start of the copyright\n-    # notice - they are part of the comment block and vary from file-to-file.\n-    before_copyright = copyright_split[0]\n-    after_copyright = copyright_split[1]\n-\n-    space_split = after_copyright.split(' ')\n-    year_range = space_split[0]\n-    start_year, end_year = parse_year_range(year_range)\n+    match = YEAR_RANGE_COMPILED.search(line)\n+    start_year = match.group('start_year')\n+    end_year = match.group('end_year')\n+    if end_year is None:\n+        end_year = start_year\n     if end_year == last_git_change_year:\n         return line\n-    return (before_copyright + copyright_splitter +\n-            year_range_to_str(start_year, last_git_change_year) + ' ' +\n-            ' '.join(space_split[1:]))\n+    new_range_str = year_range_to_str(start_year, last_git_change_year)\n+    return YEAR_RANGE_COMPILED.sub(new_range_str, line)\n+\n \n-def update_updatable_copyright(filename):\n-    file_lines = read_file_lines(filename)\n+def update_copyright(file_info):\n+    filename = file_info['filename']\n+    file_lines = file_info['contents'].split('\\n')\n     index, line = get_updatable_copyright_line(file_lines)\n-    if not line:\n-        print_file_action_message(filename, \"No updatable copyright.\")\n+    if line is None:\n+        print_file_action_message(filename, \"Bitcoin Core not a holder.\")\n         return\n     last_git_change_year = get_most_recent_git_change_year(filename)\n     new_line = create_updated_copyright_line(line, last_git_change_year)\n     if line == new_line:\n         print_file_action_message(filename, \"Copyright up-to-date.\")\n         return\n     file_lines[index] = new_line\n-    write_file_lines(filename, file_lines)\n+    file_info['contents'] = '\\n'.join(file_lines)\n+    write_file(file_info['filename'], file_info['contents'])\n     print_file_action_message(filename,\n-                              \"Copyright updated! -> %s\" % last_git_change_year)\n+                              \"Copyright updated! -> %s\" %\n+                              last_git_change_year)\n+\n+\n+def update_updatable_copyrights(file_infos):\n+    for file_info in file_infos:\n+        if not file_info['has_header']:\n+            print_file_action_message(file_info['filename'],\n+                                      \"No header to update.\")\n+            continue\n+        update_copyright(file_info)\n+\n \n def exec_update_header_year(base_directory):\n     original_cwd = os.getcwd()\n     os.chdir(base_directory)\n-    for filename in get_filenames_to_examine():\n-        update_updatable_copyright(filename)\n+    full_file_list = git_ls()\n+    file_infos = [gather_file_info(filename) for filename in\n+                  get_filenames_to_examine(full_file_list)]\n+    update_updatable_copyrights(file_infos)\n     os.chdir(original_cwd)\n \n-################################################################################\n+\n+###############################################################################\n # update cmd\n-################################################################################\n+###############################################################################\n+\n \n UPDATE_USAGE = \"\"\"\n Updates all the copyright headers of \"The Bitcoin Core developers\" which were\n@@ -419,7 +663,8 @@ def exec_update_header_year(base_directory):\n \n where <lastModifiedYear> is obtained from the 'git log' history.\n \n-This subcommand also handles copyright headers that have only a single year. In those cases:\n+This subcommand also handles copyright headers that have only a single year.\n+In those cases:\n \n // Copyright (c) <year> The Bitcoin Core developers\n \n@@ -433,105 +678,92 @@ def exec_update_header_year(base_directory):\n     $ ./copyright_header.py update <base_directory>\n \n Arguments:\n-    <base_directory> - The base directory of a bitcoin source code repository.\n+    <base_directory> - The base directory of a bitcoin core source code\n+    repository.\n \"\"\"\n \n+\n def print_file_action_message(filename, action):\n     print(\"%-52s %s\" % (filename, action))\n \n+\n def update_cmd(argv):\n     if len(argv) != 3:\n         sys.exit(UPDATE_USAGE)\n-    \n+\n     base_directory = argv[2]\n     if not os.path.exists(base_directory):\n         sys.exit(\"*** bad base_directory: %s\" % base_directory)\n     exec_update_header_year(base_directory)\n \n-################################################################################\n-# inserted copyright header format\n-################################################################################\n \n-def get_header_lines(header, start_year, end_year):\n-    lines = header.split('\\n')[1:-1]\n-    lines[0] = lines[0] % year_range_to_str(start_year, end_year)\n-    return [line + '\\n' for line in lines]\n+###############################################################################\n+# inserted copyright header format\n+###############################################################################\n \n-CPP_HEADER = '''\n-// Copyright (c) %s The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-'''\n \n-def get_cpp_header_lines_to_insert(start_year, end_year):\n-    return reversed(get_header_lines(CPP_HEADER, start_year, end_year))\n+SCRIPT_HEADER = (\"# Copyright (c) %s The Bitcoin Core developers\\n\"\n+                 \"# Distributed under the MIT software license, see the \"\n+                 \"accompanying\\n# file COPYING or http://www.opensource.org/\"\n+                 \"licenses/mit-license.php.\\n\")\n \n-PYTHON_HEADER = '''\n-# Copyright (c) %s The Bitcoin Core developers\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-'''\n+CPP_HEADER = (\"// Copyright (c) %s The Bitcoin Core developers\\n// \"\n+              \"Distributed under the MIT software license, see the \"\n+              \"accompanying\\n// file COPYING or http://www.opensource.org/\"\n+              \"licenses/mit-license.php.\\n\")\n \n-def get_python_header_lines_to_insert(start_year, end_year):\n-    return reversed(get_header_lines(PYTHON_HEADER, start_year, end_year))\n \n-################################################################################\n-# query git for year of last change\n-################################################################################\n+def get_cpp_header(start_year, end_year):\n+    return CPP_HEADER % year_range_to_str(start_year, end_year)\n \n-def get_git_change_year_range(filename):\n-    years = get_git_change_years(filename)\n-    return min(years), max(years)\n \n-################################################################################\n-# check for existing core copyright\n-################################################################################\n+def get_script_header(start_year, end_year):\n+    return SCRIPT_HEADER % year_range_to_str(start_year, end_year)\n \n-def file_already_has_core_copyright(file_lines):\n-    index, _ = get_updatable_copyright_line(file_lines)\n-    return index != None\n \n-################################################################################\n+###############################################################################\n # insert header execution\n-################################################################################\n+###############################################################################\n \n-def file_has_hashbang(file_lines):\n-    if len(file_lines) < 1:\n-        return False\n-    if len(file_lines[0]) <= 2:\n-        return False\n-    return file_lines[0][:2] == '#!'\n \n-def insert_python_header(filename, file_lines, start_year, end_year):\n-    if file_has_hashbang(file_lines):\n-        insert_idx = 1 \n+def insert_script_header(file_info, start_year, end_year):\n+    header = get_script_header(start_year, end_year)\n+    if starts_with_shebang(file_info['contents']):\n+        insertion_point = file_info['contents'].find('\\n') + 1\n     else:\n-        insert_idx = 0\n-    header_lines = get_python_header_lines_to_insert(start_year, end_year)\n-    for line in header_lines:\n-        file_lines.insert(insert_idx, line)\n-    write_file_lines(filename, file_lines)\n-\n-def insert_cpp_header(filename, file_lines, start_year, end_year):\n-    header_lines = get_cpp_header_lines_to_insert(start_year, end_year)\n-    for line in header_lines:\n-        file_lines.insert(0, line)\n-    write_file_lines(filename, file_lines)\n+        insertion_point = 0\n+    contents = file_info['contents']\n+    file_info['contents'] = (contents[:insertion_point] + header +\n+                             contents[insertion_point:])\n+\n+\n+def insert_cpp_header(file_info, start_year, end_year):\n+    header = get_cpp_header(start_year, end_year)\n+    file_info['contents'] = header + file_info['contents']\n+\n \n def exec_insert_header(filename, style):\n-    file_lines = read_file_lines(filename)\n-    if file_already_has_core_copyright(file_lines):\n-        sys.exit('*** %s already has a copyright by The Bitcoin Core developers'\n-                 % (filename))\n+    file_info = gather_file_info(filename)\n+    if file_info['pass']:\n+        sys.exit(\"*** %s already passes copyright header check.\" % filename)\n+\n     start_year, end_year = get_git_change_year_range(filename)\n-    if style == 'python':\n-        insert_python_header(filename, file_lines, start_year, end_year)\n+    if style == 'script':\n+        insert_script_header(file_info, start_year, end_year)\n     else:\n-        insert_cpp_header(filename, file_lines, start_year, end_year)\n+        insert_cpp_header(file_info, start_year, end_year)\n \n-################################################################################\n+    write_file(file_info['filename'], file_info['contents'])\n+    file_info = gather_file_info(filename)\n+    if not file_info['pass']:\n+        sys.exit(\"*** failed to fix issue in %s by inserting header?\" %\n+                 filename)\n+\n+\n+###############################################################################\n # insert cmd\n-################################################################################\n+###############################################################################\n+\n \n INSERT_USAGE = \"\"\"\n Inserts a copyright header for \"The Bitcoin Core developers\" at the top of the\n@@ -548,8 +780,9 @@ def exec_insert_header(filename, style):\n \n \"<current_year>\"\n \n-If the file already has a copyright for \"The Bitcoin Core developers\", the\n-script will exit.\n+If the file already has a valid copyright for \"The Bitcoin Core developers\",\n+the script will exit. If the file is in a subdir that should have a non-default\n+copyright header, the script will exit.\n \n Usage:\n     $ ./copyright_header.py insert <file>\n@@ -558,6 +791,7 @@ def exec_insert_header(filename, style):\n     <file> - A source file in the bitcoin repository.\n \"\"\"\n \n+\n def insert_cmd(argv):\n     if len(argv) != 3:\n         sys.exit(INSERT_USAGE)\n@@ -566,45 +800,50 @@ def insert_cmd(argv):\n     if not os.path.isfile(filename):\n         sys.exit(\"*** bad filename: %s\" % filename)\n     _, extension = os.path.splitext(filename)\n-    if extension not in ['.h', '.cpp', '.cc', '.c', '.py']:\n+    if extension not in ['.h', '.cpp', '.cc', '.c', '.py', '.sh']:\n         sys.exit(\"*** cannot insert for file extension %s\" % extension)\n-   \n-    if extension == '.py': \n-        style = 'python'\n+\n+    if extension in ['.py', '.sh', '*.am', '*.m4', '*.include']:\n+        style = 'script'\n     else:\n         style = 'cpp'\n     exec_insert_header(filename, style)\n-         \n-################################################################################\n+\n+\n+###############################################################################\n # UI\n-################################################################################\n+###############################################################################\n+\n \n USAGE = \"\"\"\n copyright_header.py - utilities for managing copyright headers of 'The Bitcoin\n Core developers' in repository source files.\n \n Usage:\n-    $ ./copyright_header <subcommand>\n+    $ ./copyright_header.py <subcommand>\n \n Subcommands:\n     report\n+    check\n     update\n     insert\n \n To see subcommand usage, run them without arguments.\n \"\"\"\n \n-SUBCOMMANDS = ['report', 'update', 'insert']\n+SUBCOMMANDS = ['report', 'check', 'update', 'insert']\n+\n \n if __name__ == \"__main__\":\n     if len(sys.argv) == 1:\n         sys.exit(USAGE)\n-    subcommand = sys.argv[1]\n-    if subcommand not in SUBCOMMANDS:\n+    if sys.argv[1] not in SUBCOMMANDS:\n         sys.exit(USAGE)\n-    if subcommand == 'report':\n+    if sys.argv[1] == 'report':\n         report_cmd(sys.argv)\n-    elif subcommand == 'update':\n+    elif sys.argv[1] == 'check':\n+        check_cmd(sys.argv)\n+    elif sys.argv[1] == 'update':\n         update_cmd(sys.argv)\n-    elif subcommand == 'insert':\n+    elif sys.argv[1] == 'insert':\n         insert_cmd(sys.argv)"
      }
    ]
  }
]