jgarzik,2015-06-10T04:58:32Z,ut ACK modulo comments\n,https://github.com/bitcoin/bitcoin/pull/6261#issuecomment-110588705,110588705,
gavinandresen,2015-06-10T13:50:33Z,"Addressed @jgarzik comments -- FinalizeHeader moved to CNetMessage (I considered moving it to CNetHeader, but didn't want to make protocol.h dependent on CDataStream).  And unified the log message (and remembered to SanitizeString(command) at the very last moment).\n",https://github.com/bitcoin/bitcoin/pull/6261#issuecomment-110761701,110761701,
sipa,2015-06-14T13:27:12Z,"Concept ACK, though I would just pass a pointer to CNetMessage rather than a wrapper-and-then-auto-unwrapped boost reference object.\n",https://github.com/bitcoin/bitcoin/pull/6261#issuecomment-111827108,111827108,
gavinandresen,2015-06-26T18:10:44Z,"@sipa: it'll be std::cref() when we move to C++11... and passing a reference is, in my opinion, cleaner than passing a pointer since the routine doesn't have to worry about checking for NULL.\n",https://github.com/bitcoin/bitcoin/pull/6261#issuecomment-115821371,115821371,
gavinandresen,2015-07-13T16:27:22Z,"@dgenr8 is seeing peer disconnections due to this code (it is part of the BIP101 pull request), especially with 'addr' messages. I need to investigate why.\n\nAnd I like detecting misbehavior early, but this should work with the existing Misbehaving() logic. I think I see a path to get there:\n\n1) Refactor mapNodeState so it is protected by it's own lock instead of cs_main. \n2) Rework this pull ",https://github.com/bitcoin/bitcoin/pull/6261#issuecomment-120986538,120986538,
sipa,2015-07-13T16:35:28Z,"@gavinandresen 1000 addr messages is 3 + 1000*30 bytes, as the serialized vector length for sizes over 253 takes 3 bytes,\n",https://github.com/bitcoin/bitcoin/pull/6261#issuecomment-120988215,120988215,
gavinandresen,2015-07-14T15:31:19Z,"Reworked the mapNodeState encapsulation into a RAII NodeStatePtr smart-pointer class.\n\nThat allowed me to change the SanityCheckMessage() callback match the old behavior: if a peer send a message larger than 2MB, immediately drop their connection. If they send a message bigger than expected but less than 2MB, call Misbehaving(20) (which, by default, gets them dropped/banned if they send more tha",https://github.com/bitcoin/bitcoin/pull/6261#issuecomment-121282771,121282771,
mruddy,2015-08-02T19:07:25Z,"I believe that the ""version"" message can be limited to 344 bytes. Right now I can send the full 2MB and it's accepted. The ""filterclear"" and ""reject"" messages need lower limits too as 2MB works for them with no penalty. Then that leaves the obvious final case in ProcessMessage that other fictitious/junk commands can be used with a 2MB payload to hog bandwidth.\n\nI came looking for a ticket with a",https://github.com/bitcoin/bitcoin/pull/6261#issuecomment-127055875,127055875,
jgarzik,2015-09-16T15:06:07Z,concept ACK\n,https://github.com/bitcoin/bitcoin/pull/6261#issuecomment-140769937,140769937,
MarcoFalke,2015-11-10T22:42:39Z,@gavinandresen Travis failed with `test_bitcoin: key.cpp:198: void ECC_Start(): Assertion`secp256k1_context == __null' failed.` This seems a temporary outage? Mind to run travis again?\n,https://github.com/bitcoin/bitcoin/pull/6261#issuecomment-155591313,155591313,
laanwj,2016-01-29T14:30:15Z,"Closing due to inactivity, feel free to reopen if you pick this up again.\n",https://github.com/bitcoin/bitcoin/pull/6261#issuecomment-176781772,176781772,
jgarzik,2015-06-10T04:55:14Z,Harmonize the two LogPrint() calls.  No reason to omit strCommand diagnostic output on this first LogPrint() here.\n,https://github.com/bitcoin/bitcoin/pull/6261#discussion_r32088146,32088146,src/main.cpp
jgarzik,2015-06-10T04:58:01Z,"Code is correct.  However, it seems odd to put this in CNode. </nit>\n",https://github.com/bitcoin/bitcoin/pull/6261#discussion_r32088223,32088223,src/net.cpp
Diapolo,2015-06-26T23:15:25Z,Why did you choose to not directly pass the NodeId? It seems it's the only field used in here.\n,https://github.com/bitcoin/bitcoin/pull/6261#discussion_r33404109,33404109,src/main.cpp
Diapolo,2015-06-26T23:19:39Z,"`s.size()` returns `size_t`, so we have `unsigned int = size_t - int`... is this correct?\n",https://github.com/bitcoin/bitcoin/pull/6261#discussion_r33404350,33404350,src/net.cpp
