promag,2018-12-11T08:53:09Z,"Not sure if this is the right fix, IIRC the wallet is removed from the list first and then the actual unload happens. ",https://github.com/bitcoin/bitcoin/pull/14919#issuecomment-446121240,446121240,
kallewoof,2018-12-11T11:21:58Z,"The relevant code is\n\nhttps://github.com/bitcoin/bitcoin/blob/5f23460c7e316fe7c944680f3feff07ebb867f70/src/wallet/wallet.cpp#L3879-L3883\n\nThe wallet itself has locks to prevent it from being loaded while already loaded, so it seems like an OK fix to me.",https://github.com/bitcoin/bitcoin/pull/14919#issuecomment-446168121,446168121,
promag,2018-12-11T12:04:49Z,"@kallewoof that's what happening, it hits that error.\n\nIt's always the case that after `unloadwallet X` `listwallets` doesn't return `X` but that wallet can be unloading. This change only reduces the race to the actual duplicate condition.\n\nI see 4 solutions:\n 1.  add an option to `unloadwallet` to force waiting 👍 👍 \n 2. use this change **but**  also change `listwallets` to actually ve",https://github.com/bitcoin/bitcoin/pull/14919#issuecomment-446179238,446179238,
AkioNak,2018-12-11T14:48:42Z,"@promag @kallewoof Thank you for the discussion.\n \n> change the test to repeat the loadwallet until it succeeds 👍 👍 👍 👍\n\nI will try this.",https://github.com/bitcoin/bitcoin/pull/14919#issuecomment-446228470,446228470,
promag,2018-12-12T15:36:27Z,"@AkioNak you could add an option to `wait_until`, untested:\n```diff\ndiff --git a/test/functional/test_framework/util.py b/test/functional/test_framework/util.py\nindex d0a78d8df..4af7a51ff 100644\n--- a/test/functional/test_framework/util.py\n+++ b/test/functional/test_framework/util.py\n@@ -201,20 +201,24 @@ def str_to_b64str(string):\n def satoshi_round(amount):\n     return Decimal(am",https://github.com/bitcoin/bitcoin/pull/14919#issuecomment-446630912,446630912,
ryanofsky,2018-12-12T16:42:49Z,"> make loadwallet aware the wallet is unloading and wait for it\n\nI think a better approach would be to make unloadwallet aware that a wallet is unloading and wait for it. It's surprising to me that this would be an asynchronous operation.",https://github.com/bitcoin/bitcoin/pull/14919#issuecomment-446656100,446656100,
promag,2018-12-12T18:46:11Z,@ryanofsky the idea was to not block especially if the wallet is being used or a rescan is going on. In that case the client could timeout and then the problem would be the same — attempt to load would raise `Duplicate -wallet filename specified` error. But maybe we should ignore these edge cases and make it synchronous or even add an option?,https://github.com/bitcoin/bitcoin/pull/14919#issuecomment-446698565,446698565,
MarcoFalke,2018-12-12T18:54:33Z,Agree with @ryanofsky. Seems unnecessary to make this call async. If the wallet is in use (e.g. rescan) you should be aware of it and not call unloadwallet. So shouldn't unloadwallet throw an error in that case? ,https://github.com/bitcoin/bitcoin/pull/14919#issuecomment-446701399,446701399,
laanwj,2018-12-13T13:48:35Z,Closing in favor of #14941,https://github.com/bitcoin/bitcoin/pull/14919#issuecomment-446974291,446974291,
kallewoof,2018-12-13T22:23:16Z,@laanwj Please do not close PR:s unless there is inactivity or the author is clearly not cooperating. The authors are perfectly capable of doing this themselves.,https://github.com/bitcoin/bitcoin/pull/14919#issuecomment-447142179,447142179,
laanwj,2018-12-13T22:27:09Z,"@kallewoof I don't think there's a point of having multiple competing PRs open, this spreads discussion around, reopening is always a possibility if discussion goes the other way",https://github.com/bitcoin/bitcoin/pull/14919#issuecomment-447143181,447143181,
kallewoof,2018-12-13T23:22:46Z,"I understand your desire to have a clean list of PRs, but there really is no rush on the matter. This PR literally had pushes to it *hours* before you closed it. If the author judges that the replacement is objectively better they will close their PR on their own, and if they refuse, I see no problem with you making a judgement call like this one.",https://github.com/bitcoin/bitcoin/pull/14919#issuecomment-447157467,447157467,
laanwj,2018-12-14T08:58:09Z,"I'm not sure how you're interpreting it, but for me, closing the PR is only an indication that it's currently not considered for merging. It doesn't delete the discussion, doesn't even prevent replying! it doesn't delete the code changes, etc.\n\nThat's a typical maintainer task. at least for me it has nothing to do with 'urgency' or capability or non-capability of the author to do it themselves",https://github.com/bitcoin/bitcoin/pull/14919#issuecomment-447259636,447259636,
kallewoof,2018-12-14T09:24:17Z,Removing my comment as it strays off topic from the PR. I've sent it to @laanwj in private.,https://github.com/bitcoin/bitcoin/pull/14919#issuecomment-447266219,447266219,
promag,2018-12-14T10:01:09Z,@kallewoof I don't think it makes sense to change the test tree to later revert. There is already agreement to change unloadwallet and @laanwj just closed this in light of that - being closed doesn't mean is locked and dead.,https://github.com/bitcoin/bitcoin/pull/14919#issuecomment-447276016,447276016,
laanwj,2018-12-14T10:05:37Z,"Yes, so I think there's a misunderstanding here:\nThanks @AkioNak for trying to fix the test!\n\nHowever your PR made us realize that the current `unloadwallet` behavior is broken in the first place and that the unload shouldn't be asynchronous, and the test failure is pointing out an actual issue. It likely means that the test doesn't need to change.",https://github.com/bitcoin/bitcoin/pull/14919#issuecomment-447277287,447277287,
AkioNak,2018-12-14T11:17:23Z,"@kallewoof @promag @ryanofsky @MarcoFalke @laanwj  Thank you so much.\nNow I understand that we need to fix the behaviour of ```unloadwallet``` rather than changing the test.\nSo, I close this PR myself.",https://github.com/bitcoin/bitcoin/pull/14919#issuecomment-447295444,447295444,
promag,2018-12-14T11:29:36Z,Thank you @AkioNak for identifying the problem so quick.,https://github.com/bitcoin/bitcoin/pull/14919#issuecomment-447298239,447298239,
