[
  {
    "sha": "2ccb7cca4ac67198ac89bd58f5b4ae41a5163ceb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyY2NiN2NjYTRhYzY3MTk4YWM4OWJkNThmNWI0YWU0MWE1MTYzY2Vi",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2020-01-14T19:31:36Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2020-01-15T03:30:13Z"
      },
      "message": "Add Epoch Guards to CTXMemPoolEntry and CTxMemPool",
      "tree": {
        "sha": "13cdb90b884765f807c580eba27a342499c7374f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/13cdb90b884765f807c580eba27a342499c7374f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2ccb7cca4ac67198ac89bd58f5b4ae41a5163ceb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ccb7cca4ac67198ac89bd58f5b4ae41a5163ceb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2ccb7cca4ac67198ac89bd58f5b4ae41a5163ceb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ccb7cca4ac67198ac89bd58f5b4ae41a5163ceb/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ceb789cf3a9075729efa07f5114ce0369d8606c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ceb789cf3a9075729efa07f5114ce0369d8606c3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ceb789cf3a9075729efa07f5114ce0369d8606c3"
      }
    ],
    "stats": {
      "total": 75,
      "additions": 73,
      "deletions": 2
    },
    "files": [
      {
        "sha": "64b91d6296d667cf9e7d25345423eb32bed4c13d",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 2,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ccb7cca4ac67198ac89bd58f5b4ae41a5163ceb/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ccb7cca4ac67198ac89bd58f5b4ae41a5163ceb/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=2ccb7cca4ac67198ac89bd58f5b4ae41a5163ceb",
        "patch": "@@ -23,7 +23,7 @@ CTxMemPoolEntry::CTxMemPoolEntry(const CTransactionRef& _tx, const CAmount& _nFe\n                                  int64_t _nTime, unsigned int _entryHeight,\n                                  bool _spendsCoinbase, int64_t _sigOpsCost, LockPoints lp)\n     : tx(_tx), nFee(_nFee), nTxWeight(GetTransactionWeight(*tx)), nUsageSize(RecursiveDynamicUsage(tx)), nTime(_nTime), entryHeight(_entryHeight),\n-    spendsCoinbase(_spendsCoinbase), sigOpCost(_sigOpsCost), lockPoints(lp)\n+    spendsCoinbase(_spendsCoinbase), sigOpCost(_sigOpsCost), lockPoints(lp), m_epoch(0)\n {\n     nCountWithDescendants = 1;\n     nSizeWithDescendants = GetTxSize();\n@@ -325,7 +325,7 @@ void CTxMemPoolEntry::UpdateAncestorState(int64_t modifySize, CAmount modifyFee,\n }\n \n CTxMemPool::CTxMemPool(CBlockPolicyEstimator* estimator)\n-    : nTransactionsUpdated(0), minerPolicyEstimator(estimator)\n+    : nTransactionsUpdated(0), minerPolicyEstimator(estimator), m_epoch(0), m_has_epoch_guard(false)\n {\n     _clear(); //lock free clear\n \n@@ -1105,4 +1105,23 @@ void CTxMemPool::SetIsLoaded(bool loaded)\n     m_is_loaded = loaded;\n }\n \n+\n+CTxMemPool::EpochGuard CTxMemPool::GetFreshEpoch() const\n+{\n+    return EpochGuard(*this);\n+}\n+CTxMemPool::EpochGuard::EpochGuard(const CTxMemPool& in) : pool(in)\n+{\n+    assert(!pool.m_has_epoch_guard);\n+    ++pool.m_epoch;\n+    pool.m_has_epoch_guard = true;\n+}\n+\n+CTxMemPool::EpochGuard::~EpochGuard()\n+{\n+    // prevents stale results being used\n+    ++pool.m_epoch;\n+    pool.m_has_epoch_guard = false;\n+}\n+\n SaltedTxidHasher::SaltedTxidHasher() : k0(GetRand(std::numeric_limits<uint64_t>::max())), k1(GetRand(std::numeric_limits<uint64_t>::max())) {}"
      },
      {
        "sha": "a9551706ed7b104c4fb4f0f70a6eadb72d12f6e3",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 52,
        "deletions": 0,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ccb7cca4ac67198ac89bd58f5b4ae41a5163ceb/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ccb7cca4ac67198ac89bd58f5b4ae41a5163ceb/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=2ccb7cca4ac67198ac89bd58f5b4ae41a5163ceb",
        "patch": "@@ -129,6 +129,7 @@ class CTxMemPoolEntry\n     int64_t GetSigOpCostWithAncestors() const { return nSigOpCostWithAncestors; }\n \n     mutable size_t vTxHashesIdx; //!< Index in mempool's vTxHashes\n+    mutable uint64_t m_epoch; //!< epoch when last touched, useful for graph algorithms\n };\n \n // Helpers for modifying CTxMemPool::mapTx, which is a boost multi_index.\n@@ -453,6 +454,8 @@ class CTxMemPool\n     mutable int64_t lastRollingFeeUpdate;\n     mutable bool blockSinceLastRollingFeeBump;\n     mutable double rollingMinimumFeeRate; //!< minimum fee to get into the pool, decreases exponentially\n+    mutable uint64_t m_epoch;\n+    mutable bool m_has_epoch_guard;\n \n     void trackPackageRemoved(const CFeeRate& rate) EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n@@ -736,6 +739,55 @@ class CTxMemPool\n      *  removal.\n      */\n     void removeUnchecked(txiter entry, MemPoolRemovalReason reason) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+public:\n+    /** EpochGuard: RAII-style guard for using epoch-based graph traversal algorithms.\n+     *     When walking ancestors or descendants, we generally want to avoid\n+     * visiting the same transactions twice. Some traversal algorithms use\n+     * std::set (or setEntries) to deduplicate the transaction we visit.\n+     * However, use of std::set is algorithmically undesirable because it both\n+     * adds an asymptotic factor of O(log n) to traverals cost and triggers O(n)\n+     * more dynamic memory allocations.\n+     *     In many algorithms we can replace std::set with an internal mempool\n+     * counter to track the time (or, \"epoch\") that we began a traversal, and\n+     * check + update a per-transaction epoch for each transaction we look at to\n+     * determine if that transaction has not yet been visited during the current\n+     * traversal's epoch.\n+     *     Algorithms using std::set can be replaced on a one by one basis.\n+     * Both techniques are not fundamentally incomaptible across the codebase.\n+     * Generally speaking, however, the remaining use of std::set for mempool\n+     * traversal should be viewed as a TODO for replacement with an epoch based\n+     * traversal, rather than a preference for std::set over epochs in that\n+     * algorithm.\n+     */\n+    class EpochGuard {\n+        const CTxMemPool& pool;\n+        public:\n+        EpochGuard(const CTxMemPool& in);\n+        ~EpochGuard();\n+    };\n+    // N.B. GetFreshEpoch modifies mutable state via the EpochGuard construction\n+    // (and later destruction)\n+    EpochGuard GetFreshEpoch() const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    /** visited marks a CTxMemPoolEntry as having been traversed\n+     * during the lifetime of the most recently created EpochGuard\n+     * and returns false if we are the first visitor, true otherwise.\n+     *\n+     * An EpochGuard must be held when visited is called or an assert will be\n+     * triggered.\n+     *\n+     */\n+    bool visited(txiter it) const EXCLUSIVE_LOCKS_REQUIRED(cs) {\n+        assert(m_has_epoch_guard);\n+        bool ret = it->m_epoch >= m_epoch;\n+        it->m_epoch = std::max(it->m_epoch, m_epoch);\n+        return ret;\n+    }\n+\n+    bool visited(Optional<txiter> it) const EXCLUSIVE_LOCKS_REQUIRED(cs) {\n+        assert(m_has_epoch_guard);\n+        return !it || visited(*it);\n+    }\n };\n \n /**"
      }
    ]
  },
  {
    "sha": "bd5a02692853f7240a4fdc593d7d0123d7916e45",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZDVhMDI2OTI4NTNmNzI0MGE0ZmRjNTkzZDdkMDEyM2Q3OTE2ZTQ1",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2020-01-14T19:45:46Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2020-01-15T03:30:13Z"
      },
      "message": "Make UpdateTransactionsFromBlock use Epochs",
      "tree": {
        "sha": "135d0e6ddab409ad6a3f6ac739bd89b3342ae668",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/135d0e6ddab409ad6a3f6ac739bd89b3342ae668"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bd5a02692853f7240a4fdc593d7d0123d7916e45",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd5a02692853f7240a4fdc593d7d0123d7916e45",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bd5a02692853f7240a4fdc593d7d0123d7916e45",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd5a02692853f7240a4fdc593d7d0123d7916e45/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2ccb7cca4ac67198ac89bd58f5b4ae41a5163ceb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ccb7cca4ac67198ac89bd58f5b4ae41a5163ceb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2ccb7cca4ac67198ac89bd58f5b4ae41a5163ceb"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 14,
      "deletions": 12
    },
    "files": [
      {
        "sha": "5768219f3a56746abc42274ef4f8f4284f39c093",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 12,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd5a02692853f7240a4fdc593d7d0123d7916e45/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd5a02692853f7240a4fdc593d7d0123d7916e45/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=bd5a02692853f7240a4fdc593d7d0123d7916e45",
        "patch": "@@ -122,8 +122,6 @@ void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashes\n     // setMemPoolChildren will be updated, an assumption made in\n     // UpdateForDescendants.\n     for (const uint256 &hash : reverse_iterate(vHashesToUpdate)) {\n-        // we cache the in-mempool children to avoid duplicate updates\n-        setEntries setChildren;\n         // calculate children from mapNextTx\n         txiter it = mapTx.find(hash);\n         if (it == mapTx.end()) {\n@@ -132,17 +130,21 @@ void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashes\n         auto iter = mapNextTx.lower_bound(COutPoint(hash, 0));\n         // First calculate the children, and update setMemPoolChildren to\n         // include them, and update their setMemPoolParents to include this tx.\n-        for (; iter != mapNextTx.end() && iter->first->hash == hash; ++iter) {\n-            const uint256 &childHash = iter->second->GetHash();\n-            txiter childIter = mapTx.find(childHash);\n-            assert(childIter != mapTx.end());\n-            // We can skip updating entries we've encountered before or that\n-            // are in the block (which are already accounted for).\n-            if (setChildren.insert(childIter).second && !setAlreadyIncluded.count(childHash)) {\n-                UpdateChild(it, childIter, true);\n-                UpdateParent(childIter, it, true);\n+        // we cache the in-mempool children to avoid duplicate updates\n+        {\n+            const auto epoch = GetFreshEpoch();\n+            for (; iter != mapNextTx.end() && iter->first->hash == hash; ++iter) {\n+                const uint256 &childHash = iter->second->GetHash();\n+                txiter childIter = mapTx.find(childHash);\n+                assert(childIter != mapTx.end());\n+                // We can skip updating entries we've encountered before or that\n+                // are in the block (which are already accounted for).\n+                if (!visited(childIter) && !setAlreadyIncluded.count(childHash)) {\n+                    UpdateChild(it, childIter, true);\n+                    UpdateParent(childIter, it, true);\n+                }\n             }\n-        }\n+        } // release epoch guard for UpdateForDescendants\n         UpdateForDescendants(it, mapMemPoolDescendantsToUpdate, setAlreadyIncluded);\n     }\n }"
      }
    ]
  }
]