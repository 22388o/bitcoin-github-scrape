[
  {
    "sha": "6a3b0d3d1aee1ab924f30b9910bc517c764917cd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YTNiMGQzZDFhZWUxYWI5MjRmMzBiOTkxMGJjNTE3Yzc2NDkxN2Nk",
    "commit": {
      "author": {
        "name": "Evan Klitzke",
        "email": "evan@eklitzke.org",
        "date": "2018-03-27T04:35:35Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-04-17T07:58:05Z"
      },
      "message": "Print to console by default when not run with -daemon\n\nPrinting to the debug log file can be disabled with -nodebulogfile",
      "tree": {
        "sha": "bd324a04e7e50a1851a98c04d28e90eb92be6e6d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bd324a04e7e50a1851a98c04d28e90eb92be6e6d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6a3b0d3d1aee1ab924f30b9910bc517c764917cd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a3b0d3d1aee1ab924f30b9910bc517c764917cd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6a3b0d3d1aee1ab924f30b9910bc517c764917cd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a3b0d3d1aee1ab924f30b9910bc517c764917cd/comments",
    "author": {
      "login": "eklitzke",
      "id": 2734,
      "node_id": "MDQ6VXNlcjI3MzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2734?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/eklitzke",
      "html_url": "https://github.com/eklitzke",
      "followers_url": "https://api.github.com/users/eklitzke/followers",
      "following_url": "https://api.github.com/users/eklitzke/following{/other_user}",
      "gists_url": "https://api.github.com/users/eklitzke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/eklitzke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/eklitzke/subscriptions",
      "organizations_url": "https://api.github.com/users/eklitzke/orgs",
      "repos_url": "https://api.github.com/users/eklitzke/repos",
      "events_url": "https://api.github.com/users/eklitzke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/eklitzke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "07825088f9cfd8abece774b9d978c36ab90ce3d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07825088f9cfd8abece774b9d978c36ab90ce3d1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/07825088f9cfd8abece774b9d978c36ab90ce3d1"
      }
    ],
    "stats": {
      "total": 74,
      "additions": 57,
      "deletions": 17
    },
    "files": [
      {
        "sha": "9174413610bf2cf992d76606daaa7761ed6e403f",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 8,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a3b0d3d1aee1ab924f30b9910bc517c764917cd/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a3b0d3d1aee1ab924f30b9910bc517c764917cd/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=6a3b0d3d1aee1ab924f30b9910bc517c764917cd",
        "patch": "@@ -815,14 +815,25 @@ static std::string ResolveErrMsg(const char * const optname, const std::string&\n     return strprintf(_(\"Cannot resolve -%s address: '%s'\"), optname, strBind);\n }\n \n+/**\n+ * Initialize global loggers.\n+ *\n+ * Note that this is called very early in the process lifetime, so you should be\n+ * careful about what global state you rely on here.\n+ */\n void InitLogging()\n {\n-    fPrintToConsole = gArgs.GetBoolArg(\"-printtoconsole\", false);\n+    // Add newlines to the logfile to distinguish this execution from the last\n+    // one; called before console logging is set up, so this is only sent to\n+    // debug.log.\n+    LogPrintf(\"\\n\\n\\n\\n\\n\");\n+\n+    fPrintToConsole = gArgs.GetBoolArg(\"-printtoconsole\", !gArgs.GetBoolArg(\"-daemon\", false));\n+    fPrintToDebugLog = !gArgs.IsArgNegated(\"-debuglogfile\");\n     fLogTimestamps = gArgs.GetBoolArg(\"-logtimestamps\", DEFAULT_LOGTIMESTAMPS);\n     fLogTimeMicros = gArgs.GetBoolArg(\"-logtimemicros\", DEFAULT_LOGTIMEMICROS);\n     fLogIPs = gArgs.GetBoolArg(\"-logips\", DEFAULT_LOGIPS);\n \n-    LogPrintf(\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\");\n     std::string version_string = FormatFullVersion();\n #ifdef DEBUG\n     version_string += \" (debug build)\";\n@@ -1216,13 +1227,12 @@ bool AppInitMain()\n #ifndef WIN32\n     CreatePidFile(GetPidFile(), getpid());\n #endif\n-    if (gArgs.GetBoolArg(\"-shrinkdebugfile\", logCategories == BCLog::NONE)) {\n-        // Do this first since it both loads a bunch of debug.log into memory,\n-        // and because this needs to happen before any other debug.log printing\n-        ShrinkDebugFile();\n-    }\n-\n     if (fPrintToDebugLog) {\n+        if (gArgs.GetBoolArg(\"-shrinkdebugfile\", logCategories == BCLog::NONE)) {\n+            // Do this first since it both loads a bunch of debug.log into memory,\n+            // and because this needs to happen before any other debug.log printing\n+            ShrinkDebugFile();\n+        }\n         if (!OpenDebugLog()) {\n             return InitError(strprintf(\"Could not open debug log file %s\", GetDebugLogPath().string()));\n         }"
      },
      {
        "sha": "6b0bffa35af07a735b3a9ab5e4918c01264305d9",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 5,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a3b0d3d1aee1ab924f30b9910bc517c764917cd/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a3b0d3d1aee1ab924f30b9910bc517c764917cd/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=6a3b0d3d1aee1ab924f30b9910bc517c764917cd",
        "patch": "@@ -341,14 +341,12 @@ int LogPrintStr(const std::string &str)\n \n     std::string strTimestamped = LogTimestampStr(str, &fStartedNewLine);\n \n-    if (fPrintToConsole)\n-    {\n+    if (fPrintToConsole) {\n         // print to console\n         ret = fwrite(strTimestamped.data(), 1, strTimestamped.size(), stdout);\n         fflush(stdout);\n     }\n-    else if (fPrintToDebugLog)\n-    {\n+    if (fPrintToDebugLog) {\n         std::call_once(debugPrintInitFlag, &DebugPrintInit);\n         std::lock_guard<std::mutex> scoped_lock(*mutexDebugLog);\n \n@@ -1126,9 +1124,16 @@ void ShrinkDebugFile()\n     // Scroll debug.log if it's getting too big\n     fs::path pathLog = GetDebugLogPath();\n     FILE* file = fsbridge::fopen(pathLog, \"r\");\n+\n+    // Special files (e.g. device nodes) may not have a size.\n+    size_t log_size = 0;\n+    try {\n+        log_size = fs::file_size(pathLog);\n+    } catch (boost::filesystem::filesystem_error &) {}\n+\n     // If debug.log file is more than 10% bigger the RECENT_DEBUG_HISTORY_SIZE\n     // trim it down by saving only the last RECENT_DEBUG_HISTORY_SIZE bytes\n-    if (file && fs::file_size(pathLog) > 11 * (RECENT_DEBUG_HISTORY_SIZE / 10))\n+    if (file && log_size > 11 * (RECENT_DEBUG_HISTORY_SIZE / 10))\n     {\n         // Restart the file with some of the end\n         std::vector<char> vch(RECENT_DEBUG_HISTORY_SIZE, 0);"
      },
      {
        "sha": "166f8f8694b75898cfc894c21d7add136a83e5c7",
        "filename": "test/functional/feature_logging.py",
        "status": "modified",
        "additions": 18,
        "deletions": 3,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a3b0d3d1aee1ab924f30b9910bc517c764917cd/test/functional/feature_logging.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a3b0d3d1aee1ab924f30b9910bc517c764917cd/test/functional/feature_logging.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_logging.py?ref=6a3b0d3d1aee1ab924f30b9910bc517c764917cd",
        "patch": "@@ -15,21 +15,25 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n \n+    def relative_log_path(self, name):\n+        return os.path.join(self.nodes[0].datadir, \"regtest\", name)\n+\n     def run_test(self):\n         # test default log file name\n-        assert os.path.isfile(os.path.join(self.nodes[0].datadir, \"regtest\", \"debug.log\"))\n+        default_log_path = self.relative_log_path(\"debug.log\")\n+        assert os.path.isfile(default_log_path)\n \n         # test alternative log file name in datadir\n         self.restart_node(0, [\"-debuglogfile=foo.log\"])\n-        assert os.path.isfile(os.path.join(self.nodes[0].datadir, \"regtest\", \"foo.log\"))\n+        assert os.path.isfile(self.relative_log_path(\"foo.log\"))\n \n         # test alternative log file name outside datadir\n         tempname = os.path.join(self.options.tmpdir, \"foo.log\")\n         self.restart_node(0, [\"-debuglogfile=%s\" % tempname])\n         assert os.path.isfile(tempname)\n \n         # check that invalid log (relative) will cause error\n-        invdir = os.path.join(self.nodes[0].datadir, \"regtest\", \"foo\")\n+        invdir = self.relative_log_path(\"foo\")\n         invalidname = os.path.join(\"foo\", \"foo.log\")\n         self.stop_node(0)\n         exp_stderr = \"Error: Could not open debug log file \\S+$\"\n@@ -55,6 +59,17 @@ def run_test(self):\n         self.start_node(0, [\"-debuglogfile=%s\" % (invalidname)])\n         assert os.path.isfile(os.path.join(invdir, \"foo.log\"))\n \n+        # check that -nodebuglogfile disables logging\n+        self.stop_node(0)\n+        os.unlink(default_log_path)\n+        assert not os.path.isfile(default_log_path)\n+        self.start_node(0, [\"-nodebuglogfile\"])\n+        assert not os.path.isfile(default_log_path)\n+\n+        # just sanity check no crash here\n+        self.stop_node(0)\n+        self.start_node(0, [\"-debuglogfile=%s\" % os.devnull])\n+\n \n if __name__ == '__main__':\n     LoggingTest().main()"
      },
      {
        "sha": "04d1de8d910455e7d81d7dbe9ec186cc89b1511f",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 11,
        "deletions": 1,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a3b0d3d1aee1ab924f30b9910bc517c764917cd/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a3b0d3d1aee1ab924f30b9910bc517c764917cd/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=6a3b0d3d1aee1ab924f30b9910bc517c764917cd",
        "patch": "@@ -78,7 +78,17 @@ def __init__(self, i, datadir, rpchost, timewait, binary, stderr, mocktime, cove\n         # For those callers that need more flexibility, they can just set the args property directly.\n         # Note that common args are set in the config file (see initialize_datadir)\n         self.extra_args = extra_args\n-        self.args = [self.binary, \"-datadir=\" + self.datadir, \"-logtimemicros\", \"-debug\", \"-debugexclude=libevent\", \"-debugexclude=leveldb\", \"-mocktime=\" + str(mocktime), \"-uacomment=testnode%d\" % i]\n+        self.args = [\n+            self.binary,\n+            \"-datadir=\" + self.datadir,\n+            \"-logtimemicros\",\n+            \"-debug\",\n+            \"-debugexclude=libevent\",\n+            \"-debugexclude=leveldb\",\n+            \"-mocktime=\" + str(mocktime),\n+            \"-uacomment=testnode%d\" % i,\n+            \"-noprinttoconsole\"\n+        ]\n \n         self.cli = TestNodeCLI(os.getenv(\"BITCOINCLI\", \"bitcoin-cli\"), self.datadir)\n         self.use_cli = use_cli"
      }
    ]
  }
]