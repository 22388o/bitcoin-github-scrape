[
  {
    "sha": "e9df179d2e3abdee7d1f255d9be17c8b72dff06a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplOWRmMTc5ZDJlM2FiZGVlN2QxZjI1NWQ5YmUxN2M4YjcyZGZmMDZh",
    "commit": {
      "author": {
        "name": "Matthew English",
        "email": "smenglish@users.noreply.github.com",
        "date": "2015-12-12T18:10:03Z"
      },
      "committer": {
        "name": "Matthew English",
        "email": "smenglish@users.noreply.github.com",
        "date": "2015-12-12T18:10:03Z"
      },
      "message": "Update hmac_sha256.cpp",
      "tree": {
        "sha": "afc8cf7bd9327375cfc80583f3f9690d49b6baca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/afc8cf7bd9327375cfc80583f3f9690d49b6baca"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e9df179d2e3abdee7d1f255d9be17c8b72dff06a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9df179d2e3abdee7d1f255d9be17c8b72dff06a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e9df179d2e3abdee7d1f255d9be17c8b72dff06a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9df179d2e3abdee7d1f255d9be17c8b72dff06a/comments",
    "author": {
      "login": "smenglish",
      "id": 25710327,
      "node_id": "MDQ6VXNlcjI1NzEwMzI3",
      "avatar_url": "https://avatars.githubusercontent.com/u/25710327?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/smenglish",
      "html_url": "https://github.com/smenglish",
      "followers_url": "https://api.github.com/users/smenglish/followers",
      "following_url": "https://api.github.com/users/smenglish/following{/other_user}",
      "gists_url": "https://api.github.com/users/smenglish/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/smenglish/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/smenglish/subscriptions",
      "organizations_url": "https://api.github.com/users/smenglish/orgs",
      "repos_url": "https://api.github.com/users/smenglish/repos",
      "events_url": "https://api.github.com/users/smenglish/events{/privacy}",
      "received_events_url": "https://api.github.com/users/smenglish/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "smenglish",
      "id": 25710327,
      "node_id": "MDQ6VXNlcjI1NzEwMzI3",
      "avatar_url": "https://avatars.githubusercontent.com/u/25710327?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/smenglish",
      "html_url": "https://github.com/smenglish",
      "followers_url": "https://api.github.com/users/smenglish/followers",
      "following_url": "https://api.github.com/users/smenglish/following{/other_user}",
      "gists_url": "https://api.github.com/users/smenglish/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/smenglish/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/smenglish/subscriptions",
      "organizations_url": "https://api.github.com/users/smenglish/orgs",
      "repos_url": "https://api.github.com/users/smenglish/repos",
      "events_url": "https://api.github.com/users/smenglish/events{/privacy}",
      "received_events_url": "https://api.github.com/users/smenglish/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0800092fc252dd85ea726c50c29086e62e179b5e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0800092fc252dd85ea726c50c29086e62e179b5e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0800092fc252dd85ea726c50c29086e62e179b5e"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "39a496b075728b0ef281dc0359def478c3bad222",
        "filename": "src/crypto/hmac_sha256.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9df179d2e3abdee7d1f255d9be17c8b72dff06a/src/crypto/hmac_sha256.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9df179d2e3abdee7d1f255d9be17c8b72dff06a/src/crypto/hmac_sha256.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/hmac_sha256.cpp?ref=e9df179d2e3abdee7d1f255d9be17c8b72dff06a",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2014 The Bitcoin Core developers\n+// Copyright (c) 2015 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      }
    ]
  },
  {
    "sha": "512fc422ca845b1c79214590caec51f9b31eb8bb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MTJmYzQyMmNhODQ1YjFjNzkyMTQ1OTBjYWVjNTFmOWIzMWViOGJi",
    "commit": {
      "author": {
        "name": "matthias",
        "email": "s.matthew.english@gmail.com",
        "date": "2016-10-11T09:28:54Z"
      },
      "committer": {
        "name": "matthias",
        "email": "s.matthew.english@gmail.com",
        "date": "2016-10-11T09:28:54Z"
      },
      "message": "Merge remote-tracking branch 'upstream/master'",
      "tree": {
        "sha": "2ea84fc18df674a3f3d0338e998b6d613b9a6b73",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2ea84fc18df674a3f3d0338e998b6d613b9a6b73"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/512fc422ca845b1c79214590caec51f9b31eb8bb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/512fc422ca845b1c79214590caec51f9b31eb8bb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/512fc422ca845b1c79214590caec51f9b31eb8bb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/512fc422ca845b1c79214590caec51f9b31eb8bb/comments",
    "author": {
      "login": "smatthewenglish",
      "id": 9053984,
      "node_id": "MDQ6VXNlcjkwNTM5ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9053984?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/smatthewenglish",
      "html_url": "https://github.com/smatthewenglish",
      "followers_url": "https://api.github.com/users/smatthewenglish/followers",
      "following_url": "https://api.github.com/users/smatthewenglish/following{/other_user}",
      "gists_url": "https://api.github.com/users/smatthewenglish/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/smatthewenglish/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/smatthewenglish/subscriptions",
      "organizations_url": "https://api.github.com/users/smatthewenglish/orgs",
      "repos_url": "https://api.github.com/users/smatthewenglish/repos",
      "events_url": "https://api.github.com/users/smatthewenglish/events{/privacy}",
      "received_events_url": "https://api.github.com/users/smatthewenglish/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "smatthewenglish",
      "id": 9053984,
      "node_id": "MDQ6VXNlcjkwNTM5ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9053984?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/smatthewenglish",
      "html_url": "https://github.com/smatthewenglish",
      "followers_url": "https://api.github.com/users/smatthewenglish/followers",
      "following_url": "https://api.github.com/users/smatthewenglish/following{/other_user}",
      "gists_url": "https://api.github.com/users/smatthewenglish/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/smatthewenglish/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/smatthewenglish/subscriptions",
      "organizations_url": "https://api.github.com/users/smatthewenglish/orgs",
      "repos_url": "https://api.github.com/users/smatthewenglish/repos",
      "events_url": "https://api.github.com/users/smatthewenglish/events{/privacy}",
      "received_events_url": "https://api.github.com/users/smatthewenglish/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e9df179d2e3abdee7d1f255d9be17c8b72dff06a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9df179d2e3abdee7d1f255d9be17c8b72dff06a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e9df179d2e3abdee7d1f255d9be17c8b72dff06a"
      },
      {
        "sha": "d0754799698de2c032abcb8198ee5d5401063213",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0754799698de2c032abcb8198ee5d5401063213",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d0754799698de2c032abcb8198ee5d5401063213"
      }
    ],
    "stats": {
      "total": 154135,
      "additions": 68781,
      "deletions": 85354
    },
    "files": [
      {
        "sha": "acb54dd3548af32dd1af57edc9212abb88e47100",
        "filename": ".github/ISSUE_TEMPLATE.md",
        "status": "added",
        "additions": 35,
        "deletions": 0,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/.github/ISSUE_TEMPLATE.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/.github/ISSUE_TEMPLATE.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.github/ISSUE_TEMPLATE.md?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -0,0 +1,35 @@\n+<!--- Remove sections that do not apply -->\n+\n+This issue tracker is only for technical issues related to bitcoin-core.\n+\n+General bitcoin questions and/or support requests and are best directed to the [Bitcoin StackExchange](https://bitcoin.stackexchange.com).\n+\n+### Describe the issue\n+\n+### Can you reliably reproduce the issue?\n+#### If so, please list the steps to reproduce below:\n+1.\n+2.\n+3.\n+\n+### Expected behaviour\n+Tell us what should happen\n+\n+### Actual behaviour\n+Tell us what happens instead\n+\n+### Screenshots.\n+If the issue is related to the GUI, screenshots can be added to this issue via drag & drop.\n+\n+### What version of bitcoin-core are you using?\n+List the version number/commit ID, and if it is an official binary, self compiled or a distribution package such as PPA.\n+\n+### Machine specs:\n+- OS:\n+- CPU:\n+- RAM:\n+- Disk size:\n+- Disk Type (HD/SDD):\n+\n+### Any extra information that might be useful in the debugging process.\n+This is normally the contents of a `debug.log` or `config.log` file. Raw text or a link to a pastebin type site are preferred."
      },
      {
        "sha": "b9db7cbd399176ff532a1de2575acc1a621eec1f",
        "filename": ".gitignore",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.gitignore?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -103,14 +103,11 @@ linux-build\n win32-build\n qa/pull-tester/run-bitcoind-for-test.sh\n qa/pull-tester/tests_config.py\n-qa/pull-tester/cache/*\n-qa/pull-tester/test.*/*\n-qa/tmp\n-cache/\n-share/BitcoindComparisonTool.jar\n+qa/cache/*\n \n !src/leveldb*/Makefile\n \n /doc/doxygen/\n \n libbitcoinconsensus.pc\n+contrib/devtools/split-debug.sh"
      },
      {
        "sha": "d201cea732d6624e4b6c115a1ef0bcc74975f506",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 36,
        "deletions": 42,
        "changes": 78,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -1,16 +1,17 @@\n-# errata:\n-# - A travis bug causes caches to trample eachother when using the same\n-#   compiler key (which we don't use anyway). This is worked around for now by\n-#   replacing the \"compilers\" with a build name prefixed by the no-op \":\"\n-#   command. See: https://github.com/travis-ci/travis-ci/issues/4393\n-\n+sudo: required\n+dist: trusty\n os: linux\n-language: cpp\n-compiler: gcc\n+language: generic\n+cache:\n+  directories:\n+  - depends/built\n+  - depends/sdk-sources\n+  - $HOME/.ccache\n env:\n   global:\n     - MAKEJOBS=-j3\n     - RUN_TESTS=false\n+    - CHECK_DOC=0\n     - BOOST_TEST_RANDOM=1$TRAVIS_BUILD_ID\n     - CCACHE_SIZE=100M\n     - CCACHE_TEMPDIR=/tmp/.ccache-temp\n@@ -19,56 +20,49 @@ env:\n     - SDK_URL=https://bitcoincore.org/depends-sources/sdks\n     - PYTHON_DEBUG=1\n     - WINEDEBUG=fixme-all\n-cache:\n-  apt: true\n-  directories:\n-  - depends/built\n-  - depends/sdk-sources\n-  - $HOME/.ccache\n-matrix:\n-  fast_finish: true\n-  include:\n-    - compiler: \": ARM\"\n-      env: HOST=arm-linux-gnueabihf PACKAGES=\"g++-arm-linux-gnueabihf\" DEP_OPTS=\"NO_QT=1\" GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports\"\n-    - compiler: \": Win32\"\n-      env: HOST=i686-w64-mingw32 PPA=\"ppa:ubuntu-wine/ppa\" PACKAGES=\"nsis gcc-mingw-w64-i686 g++-mingw-w64-i686 binutils-mingw-w64-i686 mingw-w64-dev wine1.7 bc\" RUN_TESTS=true GOAL=\"deploy\" BITCOIN_CONFIG=\"--enable-gui --enable-reduce-exports\" MAKEJOBS=\"-j2\"\n-    - compiler: \": 32-bit + dash\"\n-      env: HOST=i686-pc-linux-gnu PACKAGES=\"g++-multilib bc python-zmq\" PPA=\"ppa:chris-lea/zeromq\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-zmq --enable-glibc-back-compat --enable-reduce-exports LDFLAGS=-static-libstdc++\" USE_SHELL=\"/bin/dash\"\n-    - compiler: \": Win64\"\n-      env: HOST=x86_64-w64-mingw32 PPA=\"ppa:ubuntu-wine/ppa\" PACKAGES=\"nsis gcc-mingw-w64-x86-64 g++-mingw-w64-x86-64 binutils-mingw-w64-x86-64 mingw-w64-dev wine1.7 bc\" RUN_TESTS=true GOAL=\"deploy\" BITCOIN_CONFIG=\"--enable-gui --enable-reduce-exports\" MAKEJOBS=\"-j2\"\n-    - compiler: \": bitcoind\"\n-      env: HOST=x86_64-unknown-linux-gnu PACKAGES=\"bc python-zmq\" PPA=\"ppa:chris-lea/zeromq\" DEP_OPTS=\"NO_QT=1 NO_UPNP=1 DEBUG=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-zmq --enable-glibc-back-compat --enable-reduce-exports CPPFLAGS=-DDEBUG_LOCKORDER\"\n-    - compiler: \": No wallet\"\n-      env: HOST=x86_64-unknown-linux-gnu DEP_OPTS=\"NO_WALLET=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports\"\n-    - compiler: \": Cross-Mac\"\n-      env: HOST=x86_64-apple-darwin11 PACKAGES=\"cmake libcap-dev libz-dev libbz2-dev\" BITCOIN_CONFIG=\"--enable-reduce-exports\" OSX_SDK=10.9 GOAL=\"deploy\"\n-  exclude:\n-    - compiler: gcc\n+  matrix:\n+# ARM\n+    - HOST=arm-linux-gnueabihf PACKAGES=\"g++-arm-linux-gnueabihf\" DEP_OPTS=\"NO_QT=1\" CHECK_DOC=1 GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports\"\n+# Win32\n+    - HOST=i686-w64-mingw32 DPKG_ADD_ARCH=\"i386\" DEP_OPTS=\"NO_QT=1\" PACKAGES=\"python3 nsis g++-mingw-w64-i686 wine1.6 bc\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-reduce-exports\"\n+# 32-bit + dash\n+    - HOST=i686-pc-linux-gnu PACKAGES=\"g++-multilib bc python3-zmq\" DEP_OPTS=\"NO_QT=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-zmq --enable-glibc-back-compat --enable-reduce-exports LDFLAGS=-static-libstdc++\" USE_SHELL=\"/bin/dash\"\n+# Win64\n+    - HOST=x86_64-w64-mingw32 DPKG_ADD_ARCH=\"i386\" DEP_OPTS=\"NO_QT=1\" PACKAGES=\"python3 nsis g++-mingw-w64-x86-64 wine1.6 bc\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-reduce-exports\"\n+# bitcoind\n+    - HOST=x86_64-unknown-linux-gnu PACKAGES=\"bc python3-zmq\" DEP_OPTS=\"NO_QT=1 NO_UPNP=1 DEBUG=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-zmq --enable-glibc-back-compat --enable-reduce-exports CPPFLAGS=-DDEBUG_LOCKORDER\"\n+# No wallet\n+    - HOST=x86_64-unknown-linux-gnu PACKAGES=\"python3\" DEP_OPTS=\"NO_WALLET=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports\"\n+# Cross-Mac\n+    - HOST=x86_64-apple-darwin11 PACKAGES=\"cmake imagemagick libcap-dev librsvg2-bin libz-dev libbz2-dev libtiff-tools python-dev\" BITCOIN_CONFIG=\"--enable-gui --enable-reduce-exports\" OSX_SDK=10.11 GOAL=\"deploy\"\n+\n+before_install:\n+    - export PATH=$(echo $PATH | tr ':' \"\\n\" | sed '/\\/opt\\/python/d' | tr \"\\n\" \":\" | sed \"s|::|:|g\")\n install:\n-    - if [ -n \"$PACKAGES\" ]; then sudo rm -f /etc/apt/sources.list.d/travis_ci_zeromq3-source.list; fi\n     - if [ -n \"$PPA\" ]; then travis_retry sudo add-apt-repository \"$PPA\" -y; fi\n+    - if [ -n \"$DPKG_ADD_ARCH\" ]; then sudo dpkg --add-architecture \"$DPKG_ADD_ARCH\" ; fi\n     - if [ -n \"$PACKAGES\" ]; then travis_retry sudo apt-get update; fi\n     - if [ -n \"$PACKAGES\" ]; then travis_retry sudo apt-get install --no-install-recommends --no-upgrade -qq $PACKAGES; fi\n before_script:\n     - unset CC; unset CXX\n+    - if [ \"$CHECK_DOC\" = 1 ]; then contrib/devtools/check-doc.py; fi\n     - mkdir -p depends/SDKs depends/sdk-sources\n-    - if [ -n \"$OSX_SDK\" -a ! -f depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz ]; then wget $SDK_URL/MacOSX${OSX_SDK}.sdk.tar.gz -O depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz; fi\n+    - if [ -n \"$OSX_SDK\" -a ! -f depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz ]; then curl --location --fail $SDK_URL/MacOSX${OSX_SDK}.sdk.tar.gz -o depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz; fi\n     - if [ -n \"$OSX_SDK\" -a -f depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz ]; then tar -C depends/SDKs -xf depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz; fi\n     - make $MAKEJOBS -C depends HOST=$HOST $DEP_OPTS\n script:\n+    - export TRAVIS_COMMIT_LOG=`git log --format=fuller -1`\n     - if [ -n \"$USE_SHELL\" ]; then export CONFIG_SHELL=\"$USE_SHELL\"; fi\n     - OUTDIR=$BASE_OUTDIR/$TRAVIS_PULL_REQUEST/$TRAVIS_JOB_NUMBER-$HOST\n     - BITCOIN_CONFIG_ALL=\"--disable-dependency-tracking --prefix=$TRAVIS_BUILD_DIR/depends/$HOST --bindir=$OUTDIR/bin --libdir=$OUTDIR/lib\"\n     - depends/$HOST/native/bin/ccache --max-size=$CCACHE_SIZE\n-    - if [ \"$TRAVIS_PULL_REQUEST\" != \"false\" ]; then export CCACHE_READONLY=1; fi\n     - test -n \"$USE_SHELL\" && eval '\"$USE_SHELL\" -c \"./autogen.sh\"' || ./autogen.sh\n-    - ./configure --cache-file=config.cache $BITCOIN_CONFIG_ALL $BITCOIN_CONFIG || ( cat config.log && false)\n-    - make distdir PACKAGE=bitcoin VERSION=$HOST\n-    - cd bitcoin-$HOST\n-    - ./configure --cache-file=../config.cache $BITCOIN_CONFIG_ALL $BITCOIN_CONFIG || ( cat config.log && false)\n+    - mkdir build && cd build\n+    - ../configure $BITCOIN_CONFIG_ALL $BITCOIN_CONFIG || ( cat config.log && false)\n     - make $MAKEJOBS $GOAL || ( echo \"Build failure. Verbose build follows.\" && make $GOAL V=1 ; false )\n     - export LD_LIBRARY_PATH=$TRAVIS_BUILD_DIR/depends/$HOST/lib\n-    - if [ \"$RUN_TESTS\" = \"true\" ]; then make check; fi\n+    - if [ \"$RUN_TESTS\" = \"true\" ]; then make $MAKEJOBS check VERBOSE=1; fi\n     - if [ \"$RUN_TESTS\" = \"true\" ]; then qa/pull-tester/rpc-tests.py --coverage; fi\n after_script:\n-    - if [ \"$TRAVIS_PULL_REQUEST\" != \"false\" ]; then (echo \"Upload goes here. Something like: scp -r $BASE_OUTDIR server\" || echo \"upload failed\"); fi\n+    - echo $TRAVIS_COMMIT_RANGE\n+    - echo $TRAVIS_COMMIT_LOG"
      },
      {
        "sha": "3ce2ae71d0adb099127e5d848684e2d6bab1d376",
        "filename": ".tx/config",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/.tx/config",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/.tx/config",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.tx/config?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -1,7 +1,7 @@\n [main]\n host = https://www.transifex.com\n \n-[bitcoin.qt-translation-012x]\n+[bitcoin.qt-translation-013x]\n file_filter = src/qt/locale/bitcoin_<lang>.ts\n source_file = src/qt/locale/bitcoin_en.ts\n source_lang = en"
      },
      {
        "sha": "fd1a912c4fdf7f24a77056618ec6847f77e75cdd",
        "filename": "CONTRIBUTING.md",
        "status": "modified",
        "additions": 139,
        "deletions": 30,
        "changes": 169,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/CONTRIBUTING.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/CONTRIBUTING.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/CONTRIBUTING.md?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -1,108 +1,217 @@\n Contributing to Bitcoin Core\n ============================\n \n-The Bitcoin Core project operates an open contributor model where anyone is welcome to contribute towards development in the form of peer review, testing and patches. This document explains the practical process and guidelines for contributing.\n+The Bitcoin Core project operates an open contributor model where anyone is\n+welcome to contribute towards development in the form of peer review, testing\n+and patches. This document explains the practical process and guidelines for\n+contributing.\n \n-Firstly in terms of structure, there is no particular concept of \u201cCore developers\u201d in the sense of privileged people. Open source often naturally revolves around meritocracy where longer term contributors gain more trust from the developer community. However, some hierarchy is necessary for practical purposes. As such there are repository \u201cmaintainers\u201d who are responsible for merging pull requests as well as a \u201clead maintainer\u201d who is responsible for the release cycle, overall merging, moderation and appointment of maintainers.\n+Firstly in terms of structure, there is no particular concept of \"Core\n+developers\" in the sense of privileged people. Open source often naturally\n+revolves around meritocracy where longer term contributors gain more trust from\n+the developer community. However, some hierarchy is necessary for practical\n+purposes. As such there are repository \"maintainers\" who are responsible for\n+merging pull requests as well as a \"lead maintainer\" who is responsible for the\n+release cycle, overall merging, moderation and appointment of maintainers.\n \n \n Contributor Workflow\n --------------------\n \n-The codebase is maintained using the \u201ccontributor workflow\u201d where everyone without exception contributes patch proposals using \u201cpull requests\u201d. This facilitates social contribution, easy testing and peer review.\n+The codebase is maintained using the \"contributor workflow\" where everyone\n+without exception contributes patch proposals using \"pull requests\". This\n+facilitates social contribution, easy testing and peer review.\n \n To contribute a patch, the workflow is as follows:\n \n   - Fork repository\n   - Create topic branch\n   - Commit patches\n \n-The project coding conventions in [doc/developer-notes.md](doc/developer-notes.md) must be adhered to.\n+The project coding conventions in the [developer notes](doc/developer-notes.md)\n+must be adhered to.\n \n-In general [commits should be atomic](https://en.wikipedia.org/wiki/Atomic_commit#Atomic_commit_convention) and diffs should be easy to read. For this reason do not mix any formatting fixes or code moves with actual code changes.\n+In general [commits should be atomic](https://en.wikipedia.org/wiki/Atomic_commit#Atomic_commit_convention)\n+and diffs should be easy to read. For this reason do not mix any formatting\n+fixes or code moves with actual code changes.\n \n-Commit messages should be verbose by default consisting of a short subject line (50 chars max), a blank line and detailed explanatory text as separate paragraph(s); unless the title alone is self-explanatory (like \"Corrected typo in main.cpp\") then a single title line is sufficient. Commit messages should be helpful to people reading your code in the future, so explain the reasoning for your decisions. Further explanation [here](http://chris.beams.io/posts/git-commit/).\n+Commit messages should be verbose by default consisting of a short subject line\n+(50 chars max), a blank line and detailed explanatory text as separate\n+paragraph(s); unless the title alone is self-explanatory (like \"Corrected typo\n+in main.cpp\") then a single title line is sufficient. Commit messages should be\n+helpful to people reading your code in the future, so explain the reasoning for\n+your decisions. Further explanation [here](http://chris.beams.io/posts/git-commit/).\n \n-If a particular commit references another issue, please add the reference, for example \"refs #1234\", or \"fixes #4321\". Using \"fixes or closes\" keywords will cause the corresponding issue to be closed when the pull request is merged.\n+If a particular commit references another issue, please add the reference, for\n+example `refs #1234`, or `fixes #4321`. Using the `fixes` or `closes` keywords\n+will cause the corresponding issue to be closed when the pull request is merged.\n \n-Please refer to the [Git manual](https://git-scm.com/doc) for more information about Git.\n+Please refer to the [Git manual](https://git-scm.com/doc) for more information\n+about Git.\n \n   - Push changes to your fork\n   - Create pull request\n \n-The title of the pull request should be prefixed by the component or area that the pull request affects. Examples:\n+The title of the pull request should be prefixed by the component or area that\n+the pull request affects. Examples:\n \n     Consensus: Add new opcode for BIP-XXXX OP_CHECKAWESOMESIG\n     Net: Automatically create hidden service, listen on Tor\n     Qt: Add feed bump button\n-    Trivial: fix typo\n+    Trivial: Fix typo in main.cpp\n \n-If a pull request is specifically not to be considered for merging (yet) please prefix the title with [WIP] or use [Tasks Lists](https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments) in the body of the pull request to indicate tasks are pending.\n+If a pull request is specifically not to be considered for merging (yet) please\n+prefix the title with [WIP] or use [Tasks Lists](https://help.github.com/articles/basic-writing-and-formatting-syntax/#task-lists)\n+in the body of the pull request to indicate tasks are pending.\n \n-The body of the pull request should contain enough description about what the patch does together with any justification/reasoning. You should include references to any discussions (for example other tickets or mailing list discussions).\n+The body of the pull request should contain enough description about what the\n+patch does together with any justification/reasoning. You should include\n+references to any discussions (for example other tickets or mailing list\n+discussions).\n \n-At this stage one should expect comments and review from other contributors. You can add more commits to your pull request by committing them locally and pushing to your fork until you have satisfied all feedback. If your pull request is accepted for merging, you may be asked by a maintainer to squash and or rebase your commits before it will be merged. The length of time required for peer review is unpredictable and will vary from patch to patch.\n+At this stage one should expect comments and review from other contributors. You\n+can add more commits to your pull request by committing them locally and pushing\n+to your fork until you have satisfied all feedback.\n+\n+Squashing Commits\n+---------------------------\n+If your pull request is accepted for merging, you may be asked by a maintainer\n+to squash and or [rebase](https://git-scm.com/docs/git-rebase) your commits\n+before it will be merged. The basic squashing workflow is shown below.\n+\n+    git checkout your_branch_name\n+    git rebase -i HEAD~n\n+    # n is normally the number of commits in the pull\n+    # set commits from 'pick' to 'squash', save and quit\n+    # on the next screen, edit/refine commit messages\n+    # save and quit\n+    git push -f # (force push to GitHub)\n+\n+If you have problems with squashing (or other workflows with `git`), you can\n+alternatively enable \"Allow edits from maintainers\" in the right GitHub\n+sidebar and ask for help in the pull request.\n+\n+Please refrain from creating several pull requests for the same change.\n+Use the pull request that is already open (or was created earlier) to amend\n+changes. This preserves the discussion and review that happened earlier for\n+the respective change set.\n+\n+The length of time required for peer review is unpredictable and will vary from\n+pull request to pull request.\n \n \n Pull Request Philosophy\n -----------------------\n \n-Patchsets should always be focused. For example, a pull request could add a feature, fix a bug, or refactor code; but not a mixture. Please also avoid super pull requests which attempt to do too much, are overly large, or overly complex as this makes review difficult.\n+Patchsets should always be focused. For example, a pull request could add a\n+feature, fix a bug, or refactor code; but not a mixture. Please also avoid super\n+pull requests which attempt to do too much, are overly large, or overly complex\n+as this makes review difficult.\n \n \n ###Features\n \n-When adding a new feature, thought must be given to the long term technical debt and maintenance that feature may require after inclusion. Before proposing a new feature that will require maintenance, please consider if you are willing to maintain it (including bug fixing). If features get orphaned with no maintainer in the future, they may be removed by the Repository Maintainer.\n+When adding a new feature, thought must be given to the long term technical debt\n+and maintenance that feature may require after inclusion. Before proposing a new\n+feature that will require maintenance, please consider if you are willing to\n+maintain it (including bug fixing). If features get orphaned with no maintainer\n+in the future, they may be removed by the Repository Maintainer.\n \n \n ###Refactoring\n \n-Refactoring is a necessary part of any software project's evolution. The following guidelines cover refactoring pull requests for the project.\n+Refactoring is a necessary part of any software project's evolution. The\n+following guidelines cover refactoring pull requests for the project.\n \n-There are three categories of refactoring, code only moves, code style fixes, code refactoring. In general refactoring pull requests should not mix these three kinds of activity in order to make refactoring pull requests easy to review and uncontroversial. In all cases, refactoring PRs must not change the behaviour of code within the pull request (bugs must be preserved as is).\n+There are three categories of refactoring, code only moves, code style fixes,\n+code refactoring. In general refactoring pull requests should not mix these\n+three kinds of activity in order to make refactoring pull requests easy to\n+review and uncontroversial. In all cases, refactoring PRs must not change the\n+behaviour of code within the pull request (bugs must be preserved as is).\n \n-Project maintainers aim for a quick turnaround on refactoring pull requests, so where possible keep them short, uncomplex and easy to verify. \n+Project maintainers aim for a quick turnaround on refactoring pull requests, so\n+where possible keep them short, uncomplex and easy to verify.\n \n \n \"Decision Making\" Process\n -------------------------\n \n-The following applies to code changes to the Bitcoin Core project (and related projects such as libsecp256k1), and is not to be confused with overall Bitcoin Network Protocol consensus changes.\n+The following applies to code changes to the Bitcoin Core project (and related\n+projects such as libsecp256k1), and is not to be confused with overall Bitcoin\n+Network Protocol consensus changes.\n \n-Whether a pull request is merged into Bitcoin Core rests with the project merge maintainers and ultimately the project lead. \n+Whether a pull request is merged into Bitcoin Core rests with the project merge\n+maintainers and ultimately the project lead.\n \n-Maintainers will take into consideration if a patch is in line with the general principles of the project; meets the minimum standards for inclusion; and will judge the general consensus of contributors.\n+Maintainers will take into consideration if a patch is in line with the general\n+principles of the project; meets the minimum standards for inclusion; and will\n+judge the general consensus of contributors.\n \n In general, all pull requests must:\n \n-  - have a clear use case, fix a demonstrable bug or serve the greater good of the project (for example refactoring for modularisation);\n+  - have a clear use case, fix a demonstrable bug or serve the greater good of\n+    the project (for example refactoring for modularisation);\n   - be well peer reviewed;\n   - have unit tests and functional tests where appropriate;\n   - follow code style guidelines;\n   - not break the existing test suite;\n-  - where bugs are fixed, where possible, there should be unit tests demonstrating the bug and also proving the fix. This helps prevent regression.\n+  - where bugs are fixed, where possible, there should be unit tests\n+    demonstrating the bug and also proving the fix. This helps prevent regression.\n \n-Patches that change Bitcoin consensus rules are considerably more involved than normal because they affect the entire ecosystem and so must be preceded by extensive mailing list discussions and have a numbered BIP. While each case will be different, one should be prepared to expend more time and effort than for other kinds of patches because of increased peer review and consensus building requirements.\n+Patches that change Bitcoin consensus rules are considerably more involved than\n+normal because they affect the entire ecosystem and so must be preceded by\n+extensive mailing list discussions and have a numbered BIP. While each case will\n+be different, one should be prepared to expend more time and effort than for\n+other kinds of patches because of increased peer review and consensus building\n+requirements.\n \n \n ###Peer Review\n \n-Anyone may participate in peer review which is expressed by comments in the pull request. Typically reviewers will review the code for obvious errors, as well as test out the patch set and opine on the technical merits of the patch. Project maintainers take into account the peer review when determining if there is consensus to merge a pull request (remember that discussions may have been spread out over github, mailing list and IRC discussions). The following language is used within pull-request comments:\n+Anyone may participate in peer review which is expressed by comments in the pull\n+request. Typically reviewers will review the code for obvious errors, as well as\n+test out the patch set and opine on the technical merits of the patch. Project\n+maintainers take into account the peer review when determining if there is\n+consensus to merge a pull request (remember that discussions may have been\n+spread out over github, mailing list and IRC discussions). The following\n+language is used within pull-request comments:\n \n   - ACK means \"I have tested the code and I agree it should be merged\";\n-  - NACK means \"I disagree this should be merged\", and must be accompanied by sound technical justification. NACKs without accompanying reasoning may be disregarded;\n-  - utACK means \"I have not tested the code, but I have reviewed it and it looks OK, I agree it can be merged\";\n+  - NACK means \"I disagree this should be merged\", and must be accompanied by\n+    sound technical justification. NACKs without accompanying reasoning may be disregarded;\n+  - utACK means \"I have not tested the code, but I have reviewed it and it looks\n+    OK, I agree it can be merged\";\n   - Concept ACK means \"I agree in the general principle of this pull request\";\n   - Nit refers to trivial, often non-blocking issues.\n \n-Project maintainers reserve the right to weigh the opinions of peer reviewers using common sense judgement and also may weight based on meritocracy: Those that have demonstrated a deeper commitment and understanding towards the project (over time) or have clear domain expertise may naturally have more weight, as one would expect in all walks of life.\n+Reviewers should include the commit hash which they reviewed in their comments.\n+\n+Project maintainers reserve the right to weigh the opinions of peer reviewers\n+using common sense judgement and also may weight based on meritocracy: Those\n+that have demonstrated a deeper commitment and understanding towards the project\n+(over time) or have clear domain expertise may naturally have more weight, as\n+one would expect in all walks of life.\n \n-Where a patch set affects consensus critical code, the bar will be set much higher in terms of discussion and peer review requirements, keeping in mind that mistakes could be very costly to the wider community. This includes refactoring of consensus critical code.\n+Where a patch set affects consensus critical code, the bar will be set much\n+higher in terms of discussion and peer review requirements, keeping in mind that\n+mistakes could be very costly to the wider community. This includes refactoring\n+of consensus critical code.\n \n-Where a patch set proposes to change the Bitcoin consensus, it must have been discussed extensively on the mailing list and IRC, be accompanied by a widely discussed BIP and have a generally widely perceived technical consensus of being a worthwhile change based on the judgement of the maintainers.\n+Where a patch set proposes to change the Bitcoin consensus, it must have been\n+discussed extensively on the mailing list and IRC, be accompanied by a widely\n+discussed BIP and have a generally widely perceived technical consensus of being\n+a worthwhile change based on the judgement of the maintainers.\n \n \n Release Policy\n --------------\n \n The project leader is the release manager for each Bitcoin Core release.\n+\n+Copyright\n+---------\n+\n+By contributing to this repository, you agree to license your work under the \n+MIT license unless specified otherwise in `contrib/debian/copyright` or at \n+the top of the file itself. Any work contributed where you are not the original \n+author must contain its license header with the original author(s) and source."
      },
      {
        "sha": "c6be8e5470890cecdc7156030e54527d267338eb",
        "filename": "COPYING",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/COPYING",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/COPYING",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/COPYING?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -1,6 +1,6 @@\n The MIT License (MIT)\n \n-Copyright (c) 2009-2015 The Bitcoin Core developers\n+Copyright (c) 2009-2016 The Bitcoin Core developers\n \n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal"
      },
      {
        "sha": "07ee48427cd056dadd0cbb3c0fc889c60c01f85c",
        "filename": "INSTALL",
        "status": "removed",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9df179d2e3abdee7d1f255d9be17c8b72dff06a/INSTALL",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9df179d2e3abdee7d1f255d9be17c8b72dff06a/INSTALL",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/INSTALL?ref=e9df179d2e3abdee7d1f255d9be17c8b72dff06a",
        "patch": "@@ -1,5 +0,0 @@\n-Building Bitcoin\n-\n-See doc/build-*.md for instructions on building bitcoind,\n-the intended-for-services, no-graphical-interface, reference\n-implementation of Bitcoin.\n\\ No newline at end of file"
      },
      {
        "sha": "520a47d96078dfa80cec83d03146c9349d6369c1",
        "filename": "INSTALL.md",
        "status": "added",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/INSTALL.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/INSTALL.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/INSTALL.md?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -0,0 +1,5 @@\n+Building Bitcoin\n+================\n+\n+See doc/build-*.md for instructions on building the various\n+elements of the Bitcoin Core reference implementation of Bitcoin."
      },
      {
        "sha": "44fdf9c9fb2da389c8447c0e87d25cc05e47647d",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 53,
        "deletions": 49,
        "changes": 102,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -1,60 +1,67 @@\n+# Copyright (c) 2013-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n ACLOCAL_AMFLAGS = -I build-aux/m4\n SUBDIRS = src\n+if ENABLE_MAN\n+SUBDIRS += doc/man\n+endif\n .PHONY: deploy FORCE\n \n GZIP_ENV=\"-9n\"\n+export PYTHONPATH\n \n if BUILD_BITCOIN_LIBS\n pkgconfigdir = $(libdir)/pkgconfig\n pkgconfig_DATA = libbitcoinconsensus.pc\n endif\n \n-BITCOIND_BIN=$(top_builddir)/src/bitcoind$(EXEEXT)\n-BITCOIN_QT_BIN=$(top_builddir)/src/qt/bitcoin-qt$(EXEEXT)\n-BITCOIN_CLI_BIN=$(top_builddir)/src/bitcoin-cli$(EXEEXT)\n+BITCOIND_BIN=$(top_builddir)/src/$(BITCOIN_DAEMON_NAME)$(EXEEXT)\n+BITCOIN_QT_BIN=$(top_builddir)/src/qt/$(BITCOIN_GUI_NAME)$(EXEEXT)\n+BITCOIN_CLI_BIN=$(top_builddir)/src/$(BITCOIN_CLI_NAME)$(EXEEXT)\n BITCOIN_WIN_INSTALLER=$(PACKAGE)-$(PACKAGE_VERSION)-win$(WINDOWS_BITS)-setup$(EXEEXT)\n \n+empty :=\n+space := $(empty) $(empty)\n+\n OSX_APP=Bitcoin-Qt.app\n-OSX_DMG=Bitcoin-Core.dmg\n+OSX_VOLNAME = $(subst $(space),-,$(PACKAGE_NAME))\n+OSX_DMG = $(OSX_VOLNAME).dmg\n+OSX_BACKGROUND_SVG=background.svg\n OSX_BACKGROUND_IMAGE=background.tiff\n+OSX_BACKGROUND_IMAGE_DPIS=36 72\n+OSX_DSSTORE_GEN=$(top_srcdir)/contrib/macdeploy/custom_dsstore.py\n OSX_DEPLOY_SCRIPT=$(top_srcdir)/contrib/macdeploy/macdeployqtplus\n OSX_FANCY_PLIST=$(top_srcdir)/contrib/macdeploy/fancy.plist\n-OSX_BASE_LPROJ_DIR=$(top_srcdir)/contrib/macdeploy/Base.lproj/InfoPlist.strings\n OSX_INSTALLER_ICONS=$(top_srcdir)/src/qt/res/icons/bitcoin.icns\n-OSX_PLIST=$(top_srcdir)/share/qt/Info.plist #not installed\n+OSX_PLIST=$(top_builddir)/share/qt/Info.plist #not installed\n OSX_QT_TRANSLATIONS = da,de,es,hu,ru,uk,zh_CN,zh_TW\n \n DIST_DOCS = $(wildcard doc/*.md) $(wildcard doc/release-notes/*.md)\n \n+BIN_CHECKS=$(top_srcdir)/contrib/devtools/symbol-check.py \\\n+           $(top_srcdir)/contrib/devtools/security-check.py\n+\n WINDOWS_PACKAGING = $(top_srcdir)/share/pixmaps/bitcoin.ico \\\n   $(top_srcdir)/share/pixmaps/nsis-header.bmp \\\n   $(top_srcdir)/share/pixmaps/nsis-wizard.bmp \\\n   $(top_srcdir)/doc/README_windows.txt\n \n-OSX_PACKAGING = $(OSX_DEPLOY_SCRIPT) $(OSX_FANCY_PLIST) $(OSX_INSTALLER_ICONS) $(OSX_BASE_LPROJ_DIR) \\\n-  $(top_srcdir)/contrib/macdeploy/$(OSX_BACKGROUND_IMAGE) \\\n-  $(top_srcdir)/contrib/macdeploy/DS_Store \\\n+OSX_PACKAGING = $(OSX_DEPLOY_SCRIPT) $(OSX_FANCY_PLIST) $(OSX_INSTALLER_ICONS) \\\n+  $(top_srcdir)/contrib/macdeploy/$(OSX_BACKGROUND_SVG) \\\n+  $(OSX_DSSTORE_GEN) \\\n   $(top_srcdir)/contrib/macdeploy/detached-sig-apply.sh \\\n   $(top_srcdir)/contrib/macdeploy/detached-sig-create.sh\n \n-COVERAGE_INFO = baseline_filtered_combined.info baseline.info block_test.info \\\n+COVERAGE_INFO = baseline_filtered_combined.info baseline.info \\\n   leveldb_baseline.info test_bitcoin_filtered.info total_coverage.info \\\n-  baseline_filtered.info block_test_filtered.info rpc_test.info rpc_test_filtered.info \\\n+  baseline_filtered.info rpc_test.info rpc_test_filtered.info \\\n   leveldb_baseline_filtered.info test_bitcoin_coverage.info test_bitcoin.info\n \n dist-hook:\n-\t-$(MAKE) -C $(top_distdir)/src/leveldb clean\n-\t-$(MAKE) -C $(top_distdir)/src/secp256k1 distclean\n \t-$(GIT) archive --format=tar HEAD -- src/clientversion.cpp | $(AMTAR) -C $(top_distdir) -xf -\n \n-distcheck-hook:\n-\t$(MKDIR_P) $(top_distdir)/_build/src/leveldb\n-\tcp -rf $(top_srcdir)/src/leveldb/* $(top_distdir)/_build/src/leveldb/\n-\t-$(MAKE) -C $(top_distdir)/_build/src/leveldb clean\n-\n-distcleancheck:\n-\t@:\n-\n $(BITCOIN_WIN_INSTALLER): all-recursive\n \t$(MKDIR_P) $(top_builddir)/release\n \tSTRIPPROG=\"$(STRIP)\" $(INSTALL_STRIP_PROGRAM) $(BITCOIND_BIN) $(top_builddir)/release\n@@ -87,17 +94,20 @@ $(OSX_APP)/Contents/MacOS/Bitcoin-Qt: $(BITCOIN_QT_BIN)\n \t$(MKDIR_P) $(@D)\n \tSTRIPPROG=\"$(STRIP)\" $(INSTALL_STRIP_PROGRAM)  $< $@\n \n-$(OSX_APP)/Contents/Resources/Base.lproj/InfoPlist.strings: $(OSX_BASE_LPROJ_DIR)\n+$(OSX_APP)/Contents/Resources/Base.lproj/InfoPlist.strings:\n \t$(MKDIR_P) $(@D)\n-\t$(INSTALL_DATA) $< $@\n+\techo '{\tCFBundleDisplayName = \"$(PACKAGE_NAME)\"; CFBundleName = \"$(PACKAGE_NAME)\"; }' > $@\n \n OSX_APP_BUILT=$(OSX_APP)/Contents/PkgInfo $(OSX_APP)/Contents/Resources/empty.lproj \\\n   $(OSX_APP)/Contents/Resources/bitcoin.icns $(OSX_APP)/Contents/Info.plist \\\n   $(OSX_APP)/Contents/MacOS/Bitcoin-Qt $(OSX_APP)/Contents/Resources/Base.lproj/InfoPlist.strings\n \n+osx_volname:\n+\techo $(OSX_VOLNAME) >$@\n+\n if BUILD_DARWIN\n $(OSX_DMG): $(OSX_APP_BUILT) $(OSX_PACKAGING)\n-\t$(OSX_DEPLOY_SCRIPT) $(OSX_APP) -add-qt-tr $(OSX_QT_TRANSLATIONS) -translations-dir=$(QT_TRANSLATION_DIR) -dmg -fancy $(OSX_FANCY_PLIST) -verbose 2\n+\t$(PYTHON) $(OSX_DEPLOY_SCRIPT) $(OSX_APP) -add-qt-tr $(OSX_QT_TRANSLATIONS) -translations-dir=$(QT_TRANSLATION_DIR) -dmg -fancy $(OSX_FANCY_PLIST) -verbose 2 -volname $(OSX_VOLNAME)\n \n deploydir: $(OSX_DMG)\n else\n@@ -111,16 +121,20 @@ $(APP_DIST_DIR)/Applications:\n $(APP_DIST_EXTRAS): $(APP_DIST_DIR)/$(OSX_APP)/Contents/MacOS/Bitcoin-Qt\n \n $(OSX_DMG): $(APP_DIST_EXTRAS)\n-\t$(GENISOIMAGE) -no-cache-inodes -D -l -probe -V \"Bitcoin-Core\" -no-pad -r -dir-mode 0755 -apple -o $@ dist\n+\t$(GENISOIMAGE) -no-cache-inodes -D -l -probe -V \"$(OSX_VOLNAME)\" -no-pad -r -dir-mode 0755 -apple -o $@ dist\n \n-$(APP_DIST_DIR)/.background/$(OSX_BACKGROUND_IMAGE): contrib/macdeploy/$(OSX_BACKGROUND_IMAGE)\n+dpi%.$(OSX_BACKGROUND_IMAGE): contrib/macdeploy/$(OSX_BACKGROUND_SVG)\n+\tsed 's/PACKAGE_NAME/$(PACKAGE_NAME)/' < \"$<\" | $(RSVG_CONVERT) -f png -d $* -p $* | $(IMAGEMAGICK_CONVERT) - $@\n+OSX_BACKGROUND_IMAGE_DPIFILES := $(foreach dpi,$(OSX_BACKGROUND_IMAGE_DPIS),dpi$(dpi).$(OSX_BACKGROUND_IMAGE))\n+$(APP_DIST_DIR)/.background/$(OSX_BACKGROUND_IMAGE): $(OSX_BACKGROUND_IMAGE_DPIFILES)\n \t$(MKDIR_P) $(@D)\n-\t$(INSTALL) $< $@\n-$(APP_DIST_DIR)/.DS_Store: contrib/macdeploy/DS_Store\n-\t$(INSTALL) $< $@\n+\t$(TIFFCP) -c none $(OSX_BACKGROUND_IMAGE_DPIFILES) $@\n+\n+$(APP_DIST_DIR)/.DS_Store: $(OSX_DSSTORE_GEN)\n+\t$(PYTHON) $< \"$@\" \"$(OSX_VOLNAME)\"\n \n $(APP_DIST_DIR)/$(OSX_APP)/Contents/MacOS/Bitcoin-Qt: $(OSX_APP_BUILT) $(OSX_PACKAGING)\n-\tINSTALLNAMETOOL=$(INSTALLNAMETOOL)  OTOOL=$(OTOOL) STRIP=$(STRIP) $(OSX_DEPLOY_SCRIPT) $(OSX_APP) -translations-dir=$(QT_TRANSLATION_DIR) -add-qt-tr $(OSX_QT_TRANSLATIONS) -verbose 2\n+\tINSTALLNAMETOOL=$(INSTALLNAMETOOL)  OTOOL=$(OTOOL) STRIP=$(STRIP) $(PYTHON) $(OSX_DEPLOY_SCRIPT) $(OSX_APP) -translations-dir=$(QT_TRANSLATION_DIR) -add-qt-tr $(OSX_QT_TRANSLATIONS) -verbose 2\n \n deploydir: $(APP_DIST_EXTRAS)\n endif\n@@ -168,16 +182,6 @@ test_bitcoin.info: baseline_filtered_combined.info\n test_bitcoin_filtered.info: test_bitcoin.info\n \t$(LCOV) -r $< \"/usr/include/*\" -o $@\n \n-block_test.info: test_bitcoin_filtered.info\n-\t$(MKDIR_P) qa/tmp\n-\t-@TIMEOUT=15 qa/pull-tester/run-bitcoind-for-test.sh $(JAVA) -jar $(JAVA_COMPARISON_TOOL) qa/tmp/compTool $(COMPARISON_TOOL_REORG_TESTS)\n-\t$(LCOV) -c -d $(abs_builddir)/src --t BitcoinJBlockTest -o $@\n-\t$(LCOV) -z -d $(abs_builddir)/src\n-\t$(LCOV) -z -d $(abs_builddir)/src/leveldb\n-\n-block_test_filtered.info: block_test.info\n-\t$(LCOV) -r $< \"/usr/include/*\" -o $@\n-\n rpc_test.info: test_bitcoin_filtered.info\n \t-@TIMEOUT=15 python qa/pull-tester/rpc-tests.py $(EXTENDED_RPC_TESTS)\n \t$(LCOV) -c -d $(abs_builddir)/src --t rpc-tests -o $@\n@@ -190,8 +194,8 @@ rpc_test_filtered.info: rpc_test.info\n test_bitcoin_coverage.info: baseline_filtered_combined.info test_bitcoin_filtered.info\n \t$(LCOV) -a baseline_filtered.info -a leveldb_baseline_filtered.info -a test_bitcoin_filtered.info -o $@\n \n-total_coverage.info: baseline_filtered_combined.info test_bitcoin_filtered.info block_test_filtered.info rpc_test_filtered.info\n-\t$(LCOV) -a baseline_filtered.info -a leveldb_baseline_filtered.info -a test_bitcoin_filtered.info -a block_test_filtered.info -a rpc_test_filtered.info -o $@ | $(GREP) \"\\%\" | $(AWK) '{ print substr($$3,2,50) \"/\" $$5 }' > coverage_percent.txt\n+total_coverage.info: baseline_filtered_combined.info test_bitcoin_filtered.info rpc_test_filtered.info\n+\t$(LCOV) -a baseline_filtered.info -a leveldb_baseline_filtered.info -a test_bitcoin_filtered.info -a rpc_test_filtered.info -o $@ | $(GREP) \"\\%\" | $(AWK) '{ print substr($$3,2,50) \"/\" $$5 }' > coverage_percent.txt\n \n test_bitcoin.coverage/.dirstamp:  test_bitcoin_coverage.info\n \t$(GENHTML) -s $< -o $(@D)\n@@ -205,19 +209,19 @@ cov: test_bitcoin.coverage/.dirstamp total.coverage/.dirstamp\n \n endif\n \n-if USE_COMPARISON_TOOL\n-check-local:\n-\t$(MKDIR_P) qa/tmp\n-\t@qa/pull-tester/run-bitcoind-for-test.sh $(JAVA) -jar $(JAVA_COMPARISON_TOOL) qa/tmp/compTool $(COMPARISON_TOOL_REORG_TESTS) 2>&1\n-endif\n-\n dist_noinst_SCRIPTS = autogen.sh\n \n-EXTRA_DIST = $(top_srcdir)/share/genbuild.sh qa/pull-tester/rpc-tests.py qa/rpc-tests $(DIST_DOCS) $(WINDOWS_PACKAGING) $(OSX_PACKAGING)\n+EXTRA_DIST = $(top_srcdir)/share/genbuild.sh qa/pull-tester/rpc-tests.py qa/rpc-tests $(DIST_DOCS) $(WINDOWS_PACKAGING) $(OSX_PACKAGING) $(BIN_CHECKS)\n \n CLEANFILES = $(OSX_DMG) $(BITCOIN_WIN_INSTALLER)\n \n+# This file is problematic for out-of-tree builds if it exists.\n+DISTCLEANFILES = qa/pull-tester/tests_config.pyc\n+\n .INTERMEDIATE: $(COVERAGE_INFO)\n \n+DISTCHECK_CONFIGURE_FLAGS = --enable-man\n+\n clean-local:\n \trm -rf coverage_percent.txt test_bitcoin.coverage/ total.coverage/ qa/tmp/ cache/ $(OSX_APP)\n+\trm -rf qa/pull-tester/__pycache__"
      },
      {
        "sha": "3c41649c1b8d94c9dae46e1a1fbb7117e4841f0a",
        "filename": "README.md",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/README.md?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -3,25 +3,26 @@ Bitcoin Core integration/staging tree\n \n [![Build Status](https://travis-ci.org/bitcoin/bitcoin.svg?branch=master)](https://travis-ci.org/bitcoin/bitcoin)\n \n-https://www.bitcoin.org\n+https://bitcoincore.org\n \n What is Bitcoin?\n ----------------\n \n-Bitcoin is an experimental new digital currency that enables instant payments to\n+Bitcoin is an experimental digital currency that enables instant payments to\n anyone, anywhere in the world. Bitcoin uses peer-to-peer technology to operate\n with no central authority: managing transactions and issuing money are carried\n out collectively by the network. Bitcoin Core is the name of open source\n software which enables the use of this currency.\n \n For more information, as well as an immediately useable, binary version of\n-the Bitcoin Core software, see https://www.bitcoin.org/en/download.\n+the Bitcoin Core software, see https://bitcoin.org/en/download, or read the\n+[original whitepaper](https://bitcoincore.org/bitcoin.pdf).\n \n License\n -------\n \n Bitcoin Core is released under the terms of the MIT license. See [COPYING](COPYING) for more\n-information or see http://opensource.org/licenses/MIT.\n+information or see https://opensource.org/licenses/MIT.\n \n Development Process\n -------------------\n@@ -54,10 +55,9 @@ submit new unit tests for old code. Unit tests can be compiled and run\n \n There are also [regression and integration tests](/qa) of the RPC interface, written\n in Python, that are run automatically on the build server.\n-These tests can be run with: `qa/pull-tester/rpc-tests.py`\n+These tests can be run (if the [test dependencies](/qa) are installed) with: `qa/pull-tester/rpc-tests.py`\n \n-The Travis CI system makes sure that every pull request is built for Windows\n-and Linux, OSX, and that unit and sanity tests are automatically run.\n+The Travis CI system makes sure that every pull request is built for Windows, Linux, and OS X, and that unit/sanity tests are run automatically.\n \n ### Manual Quality Assurance (QA) Testing\n "
      },
      {
        "sha": "27417daf7691513da832eae5541b6c5bee091551",
        "filename": "autogen.sh",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/autogen.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/autogen.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/autogen.sh?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -1,9 +1,15 @@\n #!/bin/sh\n+# Copyright (c) 2013-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n set -e\n srcdir=\"$(dirname $0)\"\n cd \"$srcdir\"\n if [ -z ${LIBTOOLIZE} ] && GLIBTOOLIZE=\"`which glibtoolize 2>/dev/null`\"; then\n   LIBTOOLIZE=\"${GLIBTOOLIZE}\"\n   export LIBTOOLIZE\n fi\n+which autoreconf >/dev/null || \\\n+  (echo \"configuration failed, please install autoconf first\" && exit 1)\n autoreconf --install --force --warnings=all"
      },
      {
        "sha": "45d948933d18f42ff946aebd0d17626fd9c64d3f",
        "filename": "build-aux/m4/ax_boost_base.m4",
        "status": "modified",
        "additions": 15,
        "deletions": 5,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/build-aux/m4/ax_boost_base.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/build-aux/m4/ax_boost_base.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/ax_boost_base.m4?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -33,7 +33,7 @@\n #   and this notice are preserved. This file is offered as-is, without any\n #   warranty.\n \n-#serial 23\n+#serial 26\n \n AC_DEFUN([AX_BOOST_BASE],\n [\n@@ -95,8 +95,8 @@ if test \"x$want_boost\" = \"xyes\"; then\n       x86_64)\n         libsubdirs=\"lib64 libx32 lib lib64\"\n         ;;\n-      ppc64|s390x|sparc64|aarch64)\n-        libsubdirs=\"lib64 lib lib64\"\n+      ppc64|s390x|sparc64|aarch64|ppc64le)\n+        libsubdirs=\"lib64 lib lib64 ppc64le\"\n         ;;\n     esac\n \n@@ -170,7 +170,7 @@ if test \"x$want_boost\" = \"xyes\"; then\n         AC_MSG_RESULT(yes)\n     succeeded=yes\n     found_system=yes\n-        ],[:\n+        ],[\n         ])\n     AC_LANG_POP([C++])\n \n@@ -179,6 +179,10 @@ if test \"x$want_boost\" = \"xyes\"; then\n     dnl if we found no boost with system layout we search for boost libraries\n     dnl built and installed without the --layout=system option or for a staged(not installed) version\n     if test \"x$succeeded\" != \"xyes\"; then\n+        CPPFLAGS=\"$CPPFLAGS_SAVED\"\n+        LDFLAGS=\"$LDFLAGS_SAVED\"\n+        BOOST_CPPFLAGS=\n+        BOOST_LDFLAGS=\n         _version=0\n         if test \"$ac_boost_path\" != \"\"; then\n             if test -d \"$ac_boost_path\" && test -r \"$ac_boost_path\"; then\n@@ -191,6 +195,12 @@ if test \"x$want_boost\" = \"xyes\"; then\n                     VERSION_UNDERSCORE=`echo $_version | sed 's/\\./_/'`\n                     BOOST_CPPFLAGS=\"-I$ac_boost_path/include/boost-$VERSION_UNDERSCORE\"\n                 done\n+                dnl if nothing found search for layout used in Windows distributions\n+                if test -z \"$BOOST_CPPFLAGS\"; then\n+                    if test -d \"$ac_boost_path/boost\" && test -r \"$ac_boost_path/boost\"; then\n+                        BOOST_CPPFLAGS=\"-I$ac_boost_path\"\n+                    fi\n+                fi\n             fi\n         else\n             if test \"$cross_compiling\" != yes; then\n@@ -253,7 +263,7 @@ if test \"x$want_boost\" = \"xyes\"; then\n             AC_MSG_RESULT(yes)\n         succeeded=yes\n         found_system=yes\n-            ],[:\n+            ],[\n             ])\n         AC_LANG_POP([C++])\n     fi"
      },
      {
        "sha": "2bdb5937162e4207cf0f96586bc343653ae30da1",
        "filename": "build-aux/m4/ax_boost_program_options.m4",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/build-aux/m4/ax_boost_program_options.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/build-aux/m4/ax_boost_program_options.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/ax_boost_program_options.m4?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -29,7 +29,7 @@\n #   and this notice are preserved. This file is offered as-is, without any\n #   warranty.\n \n-#serial 22\n+#serial 24\n \n AC_DEFUN([AX_BOOST_PROGRAM_OPTIONS],\n [\n@@ -63,9 +63,9 @@ AC_DEFUN([AX_BOOST_PROGRAM_OPTIONS],\n \t\tAC_CACHE_CHECK([whether the Boost::Program_Options library is available],\n \t\t\t\t\t   ax_cv_boost_program_options,\n \t\t\t\t\t   [AC_LANG_PUSH(C++)\n-\t\t\t\tAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[@%:@include <boost/program_options.hpp>\n+\t\t\t\tAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[@%:@include <boost/program_options/errors.hpp>\n                                                           ]],\n-                                  [[boost::program_options::options_description generic(\"Generic options\");\n+                                  [[boost::program_options::error err(\"Error message\");\n                                    return 0;]])],\n                            ax_cv_boost_program_options=yes, ax_cv_boost_program_options=no)\n \t\t\t\t\tAC_LANG_POP([C++])\n@@ -74,7 +74,6 @@ AC_DEFUN([AX_BOOST_PROGRAM_OPTIONS],\n \t\t\t\tAC_DEFINE(HAVE_BOOST_PROGRAM_OPTIONS,,[define if the Boost::PROGRAM_OPTIONS library is available])\n                   BOOSTLIBDIR=`echo $BOOST_LDFLAGS | sed -e 's/@<:@^\\/@:>@*//'`\n                 if test \"x$ax_boost_user_program_options_lib\" = \"x\"; then\n-                ax_lib=\n                 for libextension in `ls $BOOSTLIBDIR/libboost_program_options*.so* 2>/dev/null | sed 's,.*/,,' | sed -e 's;^lib\\(boost_program_options.*\\)\\.so.*$;\\1;'` `ls $BOOSTLIBDIR/libboost_program_options*.dylib* 2>/dev/null | sed 's,.*/,,' | sed -e 's;^lib\\(boost_program_options.*\\)\\.dylib.*$;\\1;'` `ls $BOOSTLIBDIR/libboost_program_options*.a* 2>/dev/null | sed 's,.*/,,' | sed -e 's;^lib\\(boost_program_options.*\\)\\.a.*$;\\1;'` ; do\n                      ax_lib=${libextension}\n \t\t\t\t    AC_CHECK_LIB($ax_lib, exit,"
      },
      {
        "sha": "1c05450cbe1d5cc11a257f5c02284900890a973e",
        "filename": "build-aux/m4/ax_boost_system.m4",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/build-aux/m4/ax_boost_system.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/build-aux/m4/ax_boost_system.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/ax_boost_system.m4?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -31,7 +31,7 @@\n #   and this notice are preserved. This file is offered as-is, without any\n #   warranty.\n \n-#serial 17\n+#serial 18\n \n AC_DEFUN([AX_BOOST_SYSTEM],\n [\n@@ -68,9 +68,10 @@ AC_DEFUN([AX_BOOST_SYSTEM],\n \t\t\t\t\t   ax_cv_boost_system,\n         [AC_LANG_PUSH([C++])\n \t\t\t CXXFLAGS_SAVE=$CXXFLAGS\n+\t\t\t CXXFLAGS=\n \n \t\t\t AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[@%:@include <boost/system/error_code.hpp>]],\n-                                   [[boost::system::system_category]])],\n+\t\t\t\t    [[boost::system::error_category *a = 0;]])],\n                    ax_cv_boost_system=yes, ax_cv_boost_system=no)\n \t\t\t CXXFLAGS=$CXXFLAGS_SAVE\n              AC_LANG_POP([C++])"
      },
      {
        "sha": "ca3639715e7243fa4343eb2e7f3de53927cc9d4a",
        "filename": "build-aux/m4/ax_check_compile_flag.m4",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/build-aux/m4/ax_check_compile_flag.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/build-aux/m4/ax_check_compile_flag.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/ax_check_compile_flag.m4?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -4,7 +4,7 @@\n #\n # SYNOPSIS\n #\n-#   AX_CHECK_COMPILE_FLAG(FLAG, [ACTION-SUCCESS], [ACTION-FAILURE], [EXTRA-FLAGS])\n+#   AX_CHECK_COMPILE_FLAG(FLAG, [ACTION-SUCCESS], [ACTION-FAILURE], [EXTRA-FLAGS], [INPUT])\n #\n # DESCRIPTION\n #\n@@ -19,6 +19,8 @@\n #   the flags: \"CFLAGS EXTRA-FLAGS FLAG\".  This can for example be used to\n #   force the compiler to issue an error when a bad flag is given.\n #\n+#   INPUT gives an alternative input source to AC_COMPILE_IFELSE.\n+#\n #   NOTE: Implementation based on AX_CFLAGS_GCC_OPTION. Please keep this\n #   macro in sync with AX_CHECK_{PREPROC,LINK}_FLAG.\n #\n@@ -53,19 +55,19 @@\n #   modified version of the Autoconf Macro, you may extend this special\n #   exception to the GPL to apply to your modified version as well.\n \n-#serial 2\n+#serial 4\n \n AC_DEFUN([AX_CHECK_COMPILE_FLAG],\n-[AC_PREREQ(2.59)dnl for _AC_LANG_PREFIX\n+[AC_PREREQ(2.64)dnl for _AC_LANG_PREFIX and AS_VAR_IF\n AS_VAR_PUSHDEF([CACHEVAR],[ax_cv_check_[]_AC_LANG_ABBREV[]flags_$4_$1])dnl\n AC_CACHE_CHECK([whether _AC_LANG compiler accepts $1], CACHEVAR, [\n   ax_check_save_flags=$[]_AC_LANG_PREFIX[]FLAGS\n   _AC_LANG_PREFIX[]FLAGS=\"$[]_AC_LANG_PREFIX[]FLAGS $4 $1\"\n-  AC_COMPILE_IFELSE([AC_LANG_PROGRAM()],\n+  AC_COMPILE_IFELSE([m4_default([$5],[AC_LANG_PROGRAM()])],\n     [AS_VAR_SET(CACHEVAR,[yes])],\n     [AS_VAR_SET(CACHEVAR,[no])])\n   _AC_LANG_PREFIX[]FLAGS=$ax_check_save_flags])\n-AS_IF([test x\"AS_VAR_GET(CACHEVAR)\" = xyes],\n+AS_VAR_IF(CACHEVAR,yes,\n   [m4_default([$2], :)],\n   [m4_default([$3], :)])\n AS_VAR_POPDEF([CACHEVAR])dnl"
      },
      {
        "sha": "eb01a6ce135eca0fdde834b00c21b12202b09f3d",
        "filename": "build-aux/m4/ax_check_link_flag.m4",
        "status": "modified",
        "additions": 8,
        "deletions": 5,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/build-aux/m4/ax_check_link_flag.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/build-aux/m4/ax_check_link_flag.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/ax_check_link_flag.m4?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -4,7 +4,7 @@\n #\n # SYNOPSIS\n #\n-#   AX_CHECK_LINK_FLAG(FLAG, [ACTION-SUCCESS], [ACTION-FAILURE], [EXTRA-FLAGS])\n+#   AX_CHECK_LINK_FLAG(FLAG, [ACTION-SUCCESS], [ACTION-FAILURE], [EXTRA-FLAGS], [INPUT])\n #\n # DESCRIPTION\n #\n@@ -19,6 +19,8 @@\n #   EXTRA-FLAGS FLAG\".  This can for example be used to force the linker to\n #   issue an error when a bad flag is given.\n #\n+#   INPUT gives an alternative input source to AC_LINK_IFELSE.\n+#\n #   NOTE: Implementation based on AX_CFLAGS_GCC_OPTION. Please keep this\n #   macro in sync with AX_CHECK_{PREPROC,COMPILE}_FLAG.\n #\n@@ -53,18 +55,19 @@\n #   modified version of the Autoconf Macro, you may extend this special\n #   exception to the GPL to apply to your modified version as well.\n \n-#serial 2\n+#serial 4\n \n AC_DEFUN([AX_CHECK_LINK_FLAG],\n-[AS_VAR_PUSHDEF([CACHEVAR],[ax_cv_check_ldflags_$4_$1])dnl\n+[AC_PREREQ(2.64)dnl for _AC_LANG_PREFIX and AS_VAR_IF\n+AS_VAR_PUSHDEF([CACHEVAR],[ax_cv_check_ldflags_$4_$1])dnl\n AC_CACHE_CHECK([whether the linker accepts $1], CACHEVAR, [\n   ax_check_save_flags=$LDFLAGS\n   LDFLAGS=\"$LDFLAGS $4 $1\"\n-  AC_LINK_IFELSE([AC_LANG_PROGRAM()],\n+  AC_LINK_IFELSE([m4_default([$5],[AC_LANG_PROGRAM()])],\n     [AS_VAR_SET(CACHEVAR,[yes])],\n     [AS_VAR_SET(CACHEVAR,[no])])\n   LDFLAGS=$ax_check_save_flags])\n-AS_IF([test x\"AS_VAR_GET(CACHEVAR)\" = xyes],\n+AS_VAR_IF(CACHEVAR,yes,\n   [m4_default([$2], :)],\n   [m4_default([$3], :)])\n AS_VAR_POPDEF([CACHEVAR])dnl"
      },
      {
        "sha": "ca1d5ee2b6d1ae107504d4ab433bc5f6fd629f61",
        "filename": "build-aux/m4/ax_check_preproc_flag.m4",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/build-aux/m4/ax_check_preproc_flag.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/build-aux/m4/ax_check_preproc_flag.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/ax_check_preproc_flag.m4?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -4,7 +4,7 @@\n #\n # SYNOPSIS\n #\n-#   AX_CHECK_PREPROC_FLAG(FLAG, [ACTION-SUCCESS], [ACTION-FAILURE], [EXTRA-FLAGS])\n+#   AX_CHECK_PREPROC_FLAG(FLAG, [ACTION-SUCCESS], [ACTION-FAILURE], [EXTRA-FLAGS], [INPUT])\n #\n # DESCRIPTION\n #\n@@ -19,6 +19,8 @@\n #   \"CPPFLAGS EXTRA-FLAGS FLAG\".  This can for example be used to force the\n #   preprocessor to issue an error when a bad flag is given.\n #\n+#   INPUT gives an alternative input source to AC_PREPROC_IFELSE.\n+#\n #   NOTE: Implementation based on AX_CFLAGS_GCC_OPTION. Please keep this\n #   macro in sync with AX_CHECK_{COMPILE,LINK}_FLAG.\n #\n@@ -53,19 +55,19 @@\n #   modified version of the Autoconf Macro, you may extend this special\n #   exception to the GPL to apply to your modified version as well.\n \n-#serial 2\n+#serial 4\n \n AC_DEFUN([AX_CHECK_PREPROC_FLAG],\n-[AC_PREREQ(2.59)dnl for _AC_LANG_PREFIX\n+[AC_PREREQ(2.64)dnl for _AC_LANG_PREFIX and AS_VAR_IF\n AS_VAR_PUSHDEF([CACHEVAR],[ax_cv_check_[]_AC_LANG_ABBREV[]cppflags_$4_$1])dnl\n AC_CACHE_CHECK([whether _AC_LANG preprocessor accepts $1], CACHEVAR, [\n   ax_check_save_flags=$CPPFLAGS\n   CPPFLAGS=\"$CPPFLAGS $4 $1\"\n-  AC_PREPROC_IFELSE([AC_LANG_PROGRAM()],\n+  AC_PREPROC_IFELSE([m4_default([$5],[AC_LANG_PROGRAM()])],\n     [AS_VAR_SET(CACHEVAR,[yes])],\n     [AS_VAR_SET(CACHEVAR,[no])])\n   CPPFLAGS=$ax_check_save_flags])\n-AS_IF([test x\"AS_VAR_GET(CACHEVAR)\" = xyes],\n+AS_VAR_IF(CACHEVAR,yes,\n   [m4_default([$2], :)],\n   [m4_default([$3], :)])\n AS_VAR_POPDEF([CACHEVAR])dnl"
      },
      {
        "sha": "2c18e49c56c0bc732a4bd6534ae03f871d42c6db",
        "filename": "build-aux/m4/ax_cxx_compile_stdcxx.m4",
        "status": "added",
        "additions": 562,
        "deletions": 0,
        "changes": 562,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/build-aux/m4/ax_cxx_compile_stdcxx.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/build-aux/m4/ax_cxx_compile_stdcxx.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/ax_cxx_compile_stdcxx.m4?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -0,0 +1,562 @@\n+# ===========================================================================\n+#   http://www.gnu.org/software/autoconf-archive/ax_cxx_compile_stdcxx.html\n+# ===========================================================================\n+#\n+# SYNOPSIS\n+#\n+#   AX_CXX_COMPILE_STDCXX(VERSION, [ext|noext], [mandatory|optional])\n+#\n+# DESCRIPTION\n+#\n+#   Check for baseline language coverage in the compiler for the specified\n+#   version of the C++ standard.  If necessary, add switches to CXX and\n+#   CXXCPP to enable support.  VERSION may be '11' (for the C++11 standard)\n+#   or '14' (for the C++14 standard).\n+#\n+#   The second argument, if specified, indicates whether you insist on an\n+#   extended mode (e.g. -std=gnu++11) or a strict conformance mode (e.g.\n+#   -std=c++11).  If neither is specified, you get whatever works, with\n+#   preference for an extended mode.\n+#\n+#   The third argument, if specified 'mandatory' or if left unspecified,\n+#   indicates that baseline support for the specified C++ standard is\n+#   required and that the macro should error out if no mode with that\n+#   support is found.  If specified 'optional', then configuration proceeds\n+#   regardless, after defining HAVE_CXX${VERSION} if and only if a\n+#   supporting mode is found.\n+#\n+# LICENSE\n+#\n+#   Copyright (c) 2008 Benjamin Kosnik <bkoz@redhat.com>\n+#   Copyright (c) 2012 Zack Weinberg <zackw@panix.com>\n+#   Copyright (c) 2013 Roy Stogner <roystgnr@ices.utexas.edu>\n+#   Copyright (c) 2014, 2015 Google Inc.; contributed by Alexey Sokolov <sokolov@google.com>\n+#   Copyright (c) 2015 Paul Norman <penorman@mac.com>\n+#   Copyright (c) 2015 Moritz Klammler <moritz@klammler.eu>\n+#\n+#   Copying and distribution of this file, with or without modification, are\n+#   permitted in any medium without royalty provided the copyright notice\n+#   and this notice are preserved.  This file is offered as-is, without any\n+#   warranty.\n+\n+#serial 4\n+\n+dnl  This macro is based on the code from the AX_CXX_COMPILE_STDCXX_11 macro\n+dnl  (serial version number 13).\n+\n+AC_DEFUN([AX_CXX_COMPILE_STDCXX], [dnl\n+  m4_if([$1], [11], [],\n+        [$1], [14], [],\n+        [$1], [17], [m4_fatal([support for C++17 not yet implemented in AX_CXX_COMPILE_STDCXX])],\n+        [m4_fatal([invalid first argument `$1' to AX_CXX_COMPILE_STDCXX])])dnl\n+  m4_if([$2], [], [],\n+        [$2], [ext], [],\n+        [$2], [noext], [],\n+        [m4_fatal([invalid second argument `$2' to AX_CXX_COMPILE_STDCXX])])dnl\n+  m4_if([$3], [], [ax_cxx_compile_cxx$1_required=true],\n+        [$3], [mandatory], [ax_cxx_compile_cxx$1_required=true],\n+        [$3], [optional], [ax_cxx_compile_cxx$1_required=false],\n+        [m4_fatal([invalid third argument `$3' to AX_CXX_COMPILE_STDCXX])])\n+  AC_LANG_PUSH([C++])dnl\n+  ac_success=no\n+  AC_CACHE_CHECK(whether $CXX supports C++$1 features by default,\n+  ax_cv_cxx_compile_cxx$1,\n+  [AC_COMPILE_IFELSE([AC_LANG_SOURCE([_AX_CXX_COMPILE_STDCXX_testbody_$1])],\n+    [ax_cv_cxx_compile_cxx$1=yes],\n+    [ax_cv_cxx_compile_cxx$1=no])])\n+  if test x$ax_cv_cxx_compile_cxx$1 = xyes; then\n+    ac_success=yes\n+  fi\n+\n+  m4_if([$2], [noext], [], [dnl\n+  if test x$ac_success = xno; then\n+    for switch in -std=gnu++$1 -std=gnu++0x; do\n+      cachevar=AS_TR_SH([ax_cv_cxx_compile_cxx$1_$switch])\n+      AC_CACHE_CHECK(whether $CXX supports C++$1 features with $switch,\n+                     $cachevar,\n+        [ac_save_CXX=\"$CXX\"\n+         CXX=\"$CXX $switch\"\n+         AC_COMPILE_IFELSE([AC_LANG_SOURCE([_AX_CXX_COMPILE_STDCXX_testbody_$1])],\n+          [eval $cachevar=yes],\n+          [eval $cachevar=no])\n+         CXX=\"$ac_save_CXX\"])\n+      if eval test x\\$$cachevar = xyes; then\n+        CXX=\"$CXX $switch\"\n+        if test -n \"$CXXCPP\" ; then\n+          CXXCPP=\"$CXXCPP $switch\"\n+        fi\n+        ac_success=yes\n+        break\n+      fi\n+    done\n+  fi])\n+\n+  m4_if([$2], [ext], [], [dnl\n+  if test x$ac_success = xno; then\n+    dnl HP's aCC needs +std=c++11 according to:\n+    dnl http://h21007.www2.hp.com/portal/download/files/unprot/aCxx/PDF_Release_Notes/769149-001.pdf\n+    dnl Cray's crayCC needs \"-h std=c++11\"\n+    for switch in -std=c++$1 -std=c++0x +std=c++$1 \"-h std=c++$1\"; do\n+      cachevar=AS_TR_SH([ax_cv_cxx_compile_cxx$1_$switch])\n+      AC_CACHE_CHECK(whether $CXX supports C++$1 features with $switch,\n+                     $cachevar,\n+        [ac_save_CXX=\"$CXX\"\n+         CXX=\"$CXX $switch\"\n+         AC_COMPILE_IFELSE([AC_LANG_SOURCE([_AX_CXX_COMPILE_STDCXX_testbody_$1])],\n+          [eval $cachevar=yes],\n+          [eval $cachevar=no])\n+         CXX=\"$ac_save_CXX\"])\n+      if eval test x\\$$cachevar = xyes; then\n+        CXX=\"$CXX $switch\"\n+        if test -n \"$CXXCPP\" ; then\n+          CXXCPP=\"$CXXCPP $switch\"\n+        fi\n+        ac_success=yes\n+        break\n+      fi\n+    done\n+  fi])\n+  AC_LANG_POP([C++])\n+  if test x$ax_cxx_compile_cxx$1_required = xtrue; then\n+    if test x$ac_success = xno; then\n+      AC_MSG_ERROR([*** A compiler with support for C++$1 language features is required.])\n+    fi\n+  fi\n+  if test x$ac_success = xno; then\n+    HAVE_CXX$1=0\n+    AC_MSG_NOTICE([No compiler with C++$1 support was found])\n+  else\n+    HAVE_CXX$1=1\n+    AC_DEFINE(HAVE_CXX$1,1,\n+              [define if the compiler supports basic C++$1 syntax])\n+  fi\n+  AC_SUBST(HAVE_CXX$1)\n+])\n+\n+\n+dnl  Test body for checking C++11 support\n+\n+m4_define([_AX_CXX_COMPILE_STDCXX_testbody_11],\n+  _AX_CXX_COMPILE_STDCXX_testbody_new_in_11\n+)\n+\n+\n+dnl  Test body for checking C++14 support\n+\n+m4_define([_AX_CXX_COMPILE_STDCXX_testbody_14],\n+  _AX_CXX_COMPILE_STDCXX_testbody_new_in_11\n+  _AX_CXX_COMPILE_STDCXX_testbody_new_in_14\n+)\n+\n+\n+dnl  Tests for new features in C++11\n+\n+m4_define([_AX_CXX_COMPILE_STDCXX_testbody_new_in_11], [[\n+\n+// If the compiler admits that it is not ready for C++11, why torture it?\n+// Hopefully, this will speed up the test.\n+\n+#ifndef __cplusplus\n+\n+#error \"This is not a C++ compiler\"\n+\n+#elif __cplusplus < 201103L\n+\n+#error \"This is not a C++11 compiler\"\n+\n+#else\n+\n+namespace cxx11\n+{\n+\n+  namespace test_static_assert\n+  {\n+\n+    template <typename T>\n+    struct check\n+    {\n+      static_assert(sizeof(int) <= sizeof(T), \"not big enough\");\n+    };\n+\n+  }\n+\n+  namespace test_final_override\n+  {\n+\n+    struct Base\n+    {\n+      virtual void f() {}\n+    };\n+\n+    struct Derived : public Base\n+    {\n+      virtual void f() override {}\n+    };\n+\n+  }\n+\n+  namespace test_double_right_angle_brackets\n+  {\n+\n+    template < typename T >\n+    struct check {};\n+\n+    typedef check<void> single_type;\n+    typedef check<check<void>> double_type;\n+    typedef check<check<check<void>>> triple_type;\n+    typedef check<check<check<check<void>>>> quadruple_type;\n+\n+  }\n+\n+  namespace test_decltype\n+  {\n+\n+    int\n+    f()\n+    {\n+      int a = 1;\n+      decltype(a) b = 2;\n+      return a + b;\n+    }\n+\n+  }\n+\n+  namespace test_type_deduction\n+  {\n+\n+    template < typename T1, typename T2 >\n+    struct is_same\n+    {\n+      static const bool value = false;\n+    };\n+\n+    template < typename T >\n+    struct is_same<T, T>\n+    {\n+      static const bool value = true;\n+    };\n+\n+    template < typename T1, typename T2 >\n+    auto\n+    add(T1 a1, T2 a2) -> decltype(a1 + a2)\n+    {\n+      return a1 + a2;\n+    }\n+\n+    int\n+    test(const int c, volatile int v)\n+    {\n+      static_assert(is_same<int, decltype(0)>::value == true, \"\");\n+      static_assert(is_same<int, decltype(c)>::value == false, \"\");\n+      static_assert(is_same<int, decltype(v)>::value == false, \"\");\n+      auto ac = c;\n+      auto av = v;\n+      auto sumi = ac + av + 'x';\n+      auto sumf = ac + av + 1.0;\n+      static_assert(is_same<int, decltype(ac)>::value == true, \"\");\n+      static_assert(is_same<int, decltype(av)>::value == true, \"\");\n+      static_assert(is_same<int, decltype(sumi)>::value == true, \"\");\n+      static_assert(is_same<int, decltype(sumf)>::value == false, \"\");\n+      static_assert(is_same<int, decltype(add(c, v))>::value == true, \"\");\n+      return (sumf > 0.0) ? sumi : add(c, v);\n+    }\n+\n+  }\n+\n+  namespace test_noexcept\n+  {\n+\n+    int f() { return 0; }\n+    int g() noexcept { return 0; }\n+\n+    static_assert(noexcept(f()) == false, \"\");\n+    static_assert(noexcept(g()) == true, \"\");\n+\n+  }\n+\n+  namespace test_constexpr\n+  {\n+\n+    template < typename CharT >\n+    unsigned long constexpr\n+    strlen_c_r(const CharT *const s, const unsigned long acc) noexcept\n+    {\n+      return *s ? strlen_c_r(s + 1, acc + 1) : acc;\n+    }\n+\n+    template < typename CharT >\n+    unsigned long constexpr\n+    strlen_c(const CharT *const s) noexcept\n+    {\n+      return strlen_c_r(s, 0UL);\n+    }\n+\n+    static_assert(strlen_c(\"\") == 0UL, \"\");\n+    static_assert(strlen_c(\"1\") == 1UL, \"\");\n+    static_assert(strlen_c(\"example\") == 7UL, \"\");\n+    static_assert(strlen_c(\"another\\0example\") == 7UL, \"\");\n+\n+  }\n+\n+  namespace test_rvalue_references\n+  {\n+\n+    template < int N >\n+    struct answer\n+    {\n+      static constexpr int value = N;\n+    };\n+\n+    answer<1> f(int&)       { return answer<1>(); }\n+    answer<2> f(const int&) { return answer<2>(); }\n+    answer<3> f(int&&)      { return answer<3>(); }\n+\n+    void\n+    test()\n+    {\n+      int i = 0;\n+      const int c = 0;\n+      static_assert(decltype(f(i))::value == 1, \"\");\n+      static_assert(decltype(f(c))::value == 2, \"\");\n+      static_assert(decltype(f(0))::value == 3, \"\");\n+    }\n+\n+  }\n+\n+  namespace test_uniform_initialization\n+  {\n+\n+    struct test\n+    {\n+      static const int zero {};\n+      static const int one {1};\n+    };\n+\n+    static_assert(test::zero == 0, \"\");\n+    static_assert(test::one == 1, \"\");\n+\n+  }\n+\n+  namespace test_lambdas\n+  {\n+\n+    void\n+    test1()\n+    {\n+      auto lambda1 = [](){};\n+      auto lambda2 = lambda1;\n+      lambda1();\n+      lambda2();\n+    }\n+\n+    int\n+    test2()\n+    {\n+      auto a = [](int i, int j){ return i + j; }(1, 2);\n+      auto b = []() -> int { return '0'; }();\n+      auto c = [=](){ return a + b; }();\n+      auto d = [&](){ return c; }();\n+      auto e = [a, &b](int x) mutable {\n+        const auto identity = [](int y){ return y; };\n+        for (auto i = 0; i < a; ++i)\n+          a += b--;\n+        return x + identity(a + b);\n+      }(0);\n+      return a + b + c + d + e;\n+    }\n+\n+    int\n+    test3()\n+    {\n+      const auto nullary = [](){ return 0; };\n+      const auto unary = [](int x){ return x; };\n+      using nullary_t = decltype(nullary);\n+      using unary_t = decltype(unary);\n+      const auto higher1st = [](nullary_t f){ return f(); };\n+      const auto higher2nd = [unary](nullary_t f1){\n+        return [unary, f1](unary_t f2){ return f2(unary(f1())); };\n+      };\n+      return higher1st(nullary) + higher2nd(nullary)(unary);\n+    }\n+\n+  }\n+\n+  namespace test_variadic_templates\n+  {\n+\n+    template <int...>\n+    struct sum;\n+\n+    template <int N0, int... N1toN>\n+    struct sum<N0, N1toN...>\n+    {\n+      static constexpr auto value = N0 + sum<N1toN...>::value;\n+    };\n+\n+    template <>\n+    struct sum<>\n+    {\n+      static constexpr auto value = 0;\n+    };\n+\n+    static_assert(sum<>::value == 0, \"\");\n+    static_assert(sum<1>::value == 1, \"\");\n+    static_assert(sum<23>::value == 23, \"\");\n+    static_assert(sum<1, 2>::value == 3, \"\");\n+    static_assert(sum<5, 5, 11>::value == 21, \"\");\n+    static_assert(sum<2, 3, 5, 7, 11, 13>::value == 41, \"\");\n+\n+  }\n+\n+  // http://stackoverflow.com/questions/13728184/template-aliases-and-sfinae\n+  // Clang 3.1 fails with headers of libstd++ 4.8.3 when using std::function\n+  // because of this.\n+  namespace test_template_alias_sfinae\n+  {\n+\n+    struct foo {};\n+\n+    template<typename T>\n+    using member = typename T::member_type;\n+\n+    template<typename T>\n+    void func(...) {}\n+\n+    template<typename T>\n+    void func(member<T>*) {}\n+\n+    void test();\n+\n+    void test() { func<foo>(0); }\n+\n+  }\n+\n+}  // namespace cxx11\n+\n+#endif  // __cplusplus >= 201103L\n+\n+]])\n+\n+\n+dnl  Tests for new features in C++14\n+\n+m4_define([_AX_CXX_COMPILE_STDCXX_testbody_new_in_14], [[\n+\n+// If the compiler admits that it is not ready for C++14, why torture it?\n+// Hopefully, this will speed up the test.\n+\n+#ifndef __cplusplus\n+\n+#error \"This is not a C++ compiler\"\n+\n+#elif __cplusplus < 201402L\n+\n+#error \"This is not a C++14 compiler\"\n+\n+#else\n+\n+namespace cxx14\n+{\n+\n+  namespace test_polymorphic_lambdas\n+  {\n+\n+    int\n+    test()\n+    {\n+      const auto lambda = [](auto&&... args){\n+        const auto istiny = [](auto x){\n+          return (sizeof(x) == 1UL) ? 1 : 0;\n+        };\n+        const int aretiny[] = { istiny(args)... };\n+        return aretiny[0];\n+      };\n+      return lambda(1, 1L, 1.0f, '1');\n+    }\n+\n+  }\n+\n+  namespace test_binary_literals\n+  {\n+\n+    constexpr auto ivii = 0b0000000000101010;\n+    static_assert(ivii == 42, \"wrong value\");\n+\n+  }\n+\n+  namespace test_generalized_constexpr\n+  {\n+\n+    template < typename CharT >\n+    constexpr unsigned long\n+    strlen_c(const CharT *const s) noexcept\n+    {\n+      auto length = 0UL;\n+      for (auto p = s; *p; ++p)\n+        ++length;\n+      return length;\n+    }\n+\n+    static_assert(strlen_c(\"\") == 0UL, \"\");\n+    static_assert(strlen_c(\"x\") == 1UL, \"\");\n+    static_assert(strlen_c(\"test\") == 4UL, \"\");\n+    static_assert(strlen_c(\"another\\0test\") == 7UL, \"\");\n+\n+  }\n+\n+  namespace test_lambda_init_capture\n+  {\n+\n+    int\n+    test()\n+    {\n+      auto x = 0;\n+      const auto lambda1 = [a = x](int b){ return a + b; };\n+      const auto lambda2 = [a = lambda1(x)](){ return a; };\n+      return lambda2();\n+    }\n+\n+  }\n+\n+  namespace test_digit_seperators\n+  {\n+\n+    constexpr auto ten_million = 100'000'000;\n+    static_assert(ten_million == 100000000, \"\");\n+\n+  }\n+\n+  namespace test_return_type_deduction\n+  {\n+\n+    auto f(int& x) { return x; }\n+    decltype(auto) g(int& x) { return x; }\n+\n+    template < typename T1, typename T2 >\n+    struct is_same\n+    {\n+      static constexpr auto value = false;\n+    };\n+\n+    template < typename T >\n+    struct is_same<T, T>\n+    {\n+      static constexpr auto value = true;\n+    };\n+\n+    int\n+    test()\n+    {\n+      auto x = 0;\n+      static_assert(is_same<int, decltype(f(x))>::value, \"\");\n+      static_assert(is_same<int&, decltype(g(x))>::value, \"\");\n+      return x;\n+    }\n+\n+  }\n+\n+}  // namespace cxx14\n+\n+#endif  // __cplusplus >= 201402L\n+\n+]])"
      },
      {
        "sha": "c788ca9bd435fbfe4e1642281aabd7f9492786ff",
        "filename": "build-aux/m4/ax_gcc_func_attribute.m4",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/build-aux/m4/ax_gcc_func_attribute.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/build-aux/m4/ax_gcc_func_attribute.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/ax_gcc_func_attribute.m4?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -31,6 +31,7 @@\n #    cold\n #    const\n #    constructor\n+#    constructor_priority for constructor attribute with priority\n #    deprecated\n #    destructor\n #    dllexport\n@@ -73,7 +74,7 @@\n #   and this notice are preserved.  This file is offered as-is, without any\n #   warranty.\n \n-#serial 2\n+#serial 3\n \n AC_DEFUN([AX_GCC_FUNC_ATTRIBUTE], [\n     AS_VAR_PUSHDEF([ac_var], [ax_cv_have_func_attribute_$1])\n@@ -103,6 +104,9 @@ AC_DEFUN([AX_GCC_FUNC_ATTRIBUTE], [\n                 [const], [\n                     int foo( void ) __attribute__(($1));\n                 ],\n+                [constructor_priority], [\n+                    int foo( void ) __attribute__((__constructor__(65535/2)));\n+                ],\n                 [constructor], [\n                     int foo( void ) __attribute__(($1));\n                 ],\n@@ -180,6 +184,8 @@ AC_DEFUN([AX_GCC_FUNC_ATTRIBUTE], [\n                 [visibility], [\n                     int foo_def( void ) __attribute__(($1(\"default\")));\n                     int foo_hid( void ) __attribute__(($1(\"hidden\")));\n+                    int foo_int( void ) __attribute__(($1(\"internal\")));\n+                    int foo_pro( void ) __attribute__(($1(\"protected\")));\n                 ],\n                 [warning], [\n                     int foo( void ) __attribute__(($1(\"\")));"
      },
      {
        "sha": "4c4051ea376f720faf21a4705c66604fe444c958",
        "filename": "build-aux/m4/ax_pthread.m4",
        "status": "modified",
        "additions": 269,
        "deletions": 116,
        "changes": 385,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/build-aux/m4/ax_pthread.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/build-aux/m4/ax_pthread.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/ax_pthread.m4?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -19,19 +19,19 @@\n #   is necessary on AIX to use the special cc_r compiler alias.)\n #\n #   NOTE: You are assumed to not only compile your program with these flags,\n-#   but also link it with them as well. e.g. you should link with\n+#   but also to link with them as well. For example, you might link with\n #   $PTHREAD_CC $CFLAGS $PTHREAD_CFLAGS $LDFLAGS ... $PTHREAD_LIBS $LIBS\n #\n-#   If you are only building threads programs, you may wish to use these\n+#   If you are only building threaded programs, you may wish to use these\n #   variables in your default LIBS, CFLAGS, and CC:\n #\n #     LIBS=\"$PTHREAD_LIBS $LIBS\"\n #     CFLAGS=\"$CFLAGS $PTHREAD_CFLAGS\"\n #     CC=\"$PTHREAD_CC\"\n #\n #   In addition, if the PTHREAD_CREATE_JOINABLE thread-attribute constant\n-#   has a nonstandard name, defines PTHREAD_CREATE_JOINABLE to that name\n-#   (e.g. PTHREAD_CREATE_UNDETACHED on AIX).\n+#   has a nonstandard name, this macro defines PTHREAD_CREATE_JOINABLE to\n+#   that name (e.g. PTHREAD_CREATE_UNDETACHED on AIX).\n #\n #   Also HAVE_PTHREAD_PRIO_INHERIT is defined if pthread is found and the\n #   PTHREAD_PRIO_INHERIT symbol is defined when compiling with\n@@ -82,35 +82,40 @@\n #   modified version of the Autoconf Macro, you may extend this special\n #   exception to the GPL to apply to your modified version as well.\n \n-#serial 21\n+#serial 23\n \n AU_ALIAS([ACX_PTHREAD], [AX_PTHREAD])\n AC_DEFUN([AX_PTHREAD], [\n AC_REQUIRE([AC_CANONICAL_HOST])\n+AC_REQUIRE([AC_PROG_CC])\n+AC_REQUIRE([AC_PROG_SED])\n AC_LANG_PUSH([C])\n ax_pthread_ok=no\n \n # We used to check for pthread.h first, but this fails if pthread.h\n-# requires special compiler flags (e.g. on True64 or Sequent).\n+# requires special compiler flags (e.g. on Tru64 or Sequent).\n # It gets checked for in the link test anyway.\n \n # First of all, check if the user has set any of the PTHREAD_LIBS,\n # etcetera environment variables, and if threads linking works using\n # them:\n-if test x\"$PTHREAD_LIBS$PTHREAD_CFLAGS\" != x; then\n-        save_CFLAGS=\"$CFLAGS\"\n+if test \"x$PTHREAD_CFLAGS$PTHREAD_LIBS\" != \"x\"; then\n+        ax_pthread_save_CC=\"$CC\"\n+        ax_pthread_save_CFLAGS=\"$CFLAGS\"\n+        ax_pthread_save_LIBS=\"$LIBS\"\n+        AS_IF([test \"x$PTHREAD_CC\" != \"x\"], [CC=\"$PTHREAD_CC\"])\n         CFLAGS=\"$CFLAGS $PTHREAD_CFLAGS\"\n-        save_LIBS=\"$LIBS\"\n         LIBS=\"$PTHREAD_LIBS $LIBS\"\n-        AC_MSG_CHECKING([for pthread_join in LIBS=$PTHREAD_LIBS with CFLAGS=$PTHREAD_CFLAGS])\n-        AC_TRY_LINK_FUNC([pthread_join], [ax_pthread_ok=yes])\n+        AC_MSG_CHECKING([for pthread_join using $CC $PTHREAD_CFLAGS $PTHREAD_LIBS])\n+        AC_LINK_IFELSE([AC_LANG_CALL([], [pthread_join])], [ax_pthread_ok=yes])\n         AC_MSG_RESULT([$ax_pthread_ok])\n-        if test x\"$ax_pthread_ok\" = xno; then\n+        if test \"x$ax_pthread_ok\" = \"xno\"; then\n                 PTHREAD_LIBS=\"\"\n                 PTHREAD_CFLAGS=\"\"\n         fi\n-        LIBS=\"$save_LIBS\"\n-        CFLAGS=\"$save_CFLAGS\"\n+        CC=\"$ax_pthread_save_CC\"\n+        CFLAGS=\"$ax_pthread_save_CFLAGS\"\n+        LIBS=\"$ax_pthread_save_LIBS\"\n fi\n \n # We must check for the threads library under a number of different\n@@ -123,7 +128,7 @@ fi\n # which indicates that we try without any flags at all, and \"pthread-config\"\n # which is a program returning the flags for the Pth emulation library.\n \n-ax_pthread_flags=\"pthreads none -Kthread -kthread lthread -pthread -pthreads -mthreads pthread --thread-safe -mt pthread-config\"\n+ax_pthread_flags=\"pthreads none -Kthread -pthread -pthreads -mthreads pthread --thread-safe -mt pthread-config\"\n \n # The ordering *is* (sometimes) important.  Some notes on the\n # individual items follow:\n@@ -132,82 +137,225 @@ ax_pthread_flags=\"pthreads none -Kthread -kthread lthread -pthread -pthreads -mt\n # none: in case threads are in libc; should be tried before -Kthread and\n #       other compiler flags to prevent continual compiler warnings\n # -Kthread: Sequent (threads in libc, but -Kthread needed for pthread.h)\n-# -kthread: FreeBSD kernel threads (preferred to -pthread since SMP-able)\n-# lthread: LinuxThreads port on FreeBSD (also preferred to -pthread)\n-# -pthread: Linux/gcc (kernel threads), BSD/gcc (userland threads)\n-# -pthreads: Solaris/gcc\n-# -mthreads: Mingw32/gcc, Lynx/gcc\n+# -pthread: Linux/gcc (kernel threads), BSD/gcc (userland threads), Tru64\n+#           (Note: HP C rejects this with \"bad form for `-t' option\")\n+# -pthreads: Solaris/gcc (Note: HP C also rejects)\n # -mt: Sun Workshop C (may only link SunOS threads [-lthread], but it\n-#      doesn't hurt to check since this sometimes defines pthreads too;\n-#      also defines -D_REENTRANT)\n-#      ... -mt is also the pthreads flag for HP/aCC\n+#      doesn't hurt to check since this sometimes defines pthreads and\n+#      -D_REENTRANT too), HP C (must be checked before -lpthread, which\n+#      is present but should not be used directly; and before -mthreads,\n+#      because the compiler interprets this as \"-mt\" + \"-hreads\")\n+# -mthreads: Mingw32/gcc, Lynx/gcc\n # pthread: Linux, etcetera\n # --thread-safe: KAI C++\n # pthread-config: use pthread-config program (for GNU Pth library)\n \n-case ${host_os} in\n+case $host_os in\n+\n+        freebsd*)\n+\n+        # -kthread: FreeBSD kernel threads (preferred to -pthread since SMP-able)\n+        # lthread: LinuxThreads port on FreeBSD (also preferred to -pthread)\n+\n+        ax_pthread_flags=\"-kthread lthread $ax_pthread_flags\"\n+        ;;\n+\n+        hpux*)\n+\n+        # From the cc(1) man page: \"[-mt] Sets various -D flags to enable\n+        # multi-threading and also sets -lpthread.\"\n+\n+        ax_pthread_flags=\"-mt -pthread pthread $ax_pthread_flags\"\n+        ;;\n+\n+        openedition*)\n+\n+        # IBM z/OS requires a feature-test macro to be defined in order to\n+        # enable POSIX threads at all, so give the user a hint if this is\n+        # not set. (We don't define these ourselves, as they can affect\n+        # other portions of the system API in unpredictable ways.)\n+\n+        AC_EGREP_CPP([AX_PTHREAD_ZOS_MISSING],\n+            [\n+#            if !defined(_OPEN_THREADS) && !defined(_UNIX03_THREADS)\n+             AX_PTHREAD_ZOS_MISSING\n+#            endif\n+            ],\n+            [AC_MSG_WARN([IBM z/OS requires -D_OPEN_THREADS or -D_UNIX03_THREADS to enable pthreads support.])])\n+        ;;\n+\n         solaris*)\n \n         # On Solaris (at least, for some versions), libc contains stubbed\n         # (non-functional) versions of the pthreads routines, so link-based\n-        # tests will erroneously succeed.  (We need to link with -pthreads/-mt/\n-        # -lpthread.)  (The stubs are missing pthread_cleanup_push, or rather\n-        # a function called by this macro, so we could check for that, but\n-        # who knows whether they'll stub that too in a future libc.)  So,\n-        # we'll just look for -pthreads and -lpthread first:\n+        # tests will erroneously succeed. (N.B.: The stubs are missing\n+        # pthread_cleanup_push, or rather a function called by this macro,\n+        # so we could check for that, but who knows whether they'll stub\n+        # that too in a future libc.)  So we'll check first for the\n+        # standard Solaris way of linking pthreads (-mt -lpthread).\n+\n+        ax_pthread_flags=\"-mt,pthread pthread $ax_pthread_flags\"\n+        ;;\n+esac\n+\n+# GCC generally uses -pthread, or -pthreads on some platforms (e.g. SPARC)\n \n-        ax_pthread_flags=\"-pthreads pthread -mt -pthread $ax_pthread_flags\"\n+AS_IF([test \"x$GCC\" = \"xyes\"],\n+      [ax_pthread_flags=\"-pthread -pthreads $ax_pthread_flags\"])\n+\n+# The presence of a feature test macro requesting re-entrant function\n+# definitions is, on some systems, a strong hint that pthreads support is\n+# correctly enabled\n+\n+case $host_os in\n+        darwin* | hpux* | linux* | osf* | solaris*)\n+        ax_pthread_check_macro=\"_REENTRANT\"\n         ;;\n \n-        darwin*)\n-        ax_pthread_flags=\"-pthread $ax_pthread_flags\"\n+        aix*)\n+        ax_pthread_check_macro=\"_THREAD_SAFE\"\n+        ;;\n+\n+        *)\n+        ax_pthread_check_macro=\"--\"\n         ;;\n esac\n+AS_IF([test \"x$ax_pthread_check_macro\" = \"x--\"],\n+      [ax_pthread_check_cond=0],\n+      [ax_pthread_check_cond=\"!defined($ax_pthread_check_macro)\"])\n+\n+# Are we compiling with Clang?\n+\n+AC_CACHE_CHECK([whether $CC is Clang],\n+    [ax_cv_PTHREAD_CLANG],\n+    [ax_cv_PTHREAD_CLANG=no\n+     # Note that Autoconf sets GCC=yes for Clang as well as GCC\n+     if test \"x$GCC\" = \"xyes\"; then\n+        AC_EGREP_CPP([AX_PTHREAD_CC_IS_CLANG],\n+            [/* Note: Clang 2.7 lacks __clang_[a-z]+__ */\n+#            if defined(__clang__) && defined(__llvm__)\n+             AX_PTHREAD_CC_IS_CLANG\n+#            endif\n+            ],\n+            [ax_cv_PTHREAD_CLANG=yes])\n+     fi\n+    ])\n+ax_pthread_clang=\"$ax_cv_PTHREAD_CLANG\"\n+\n+ax_pthread_clang_warning=no\n+\n+# Clang needs special handling, because older versions handle the -pthread\n+# option in a rather... idiosyncratic way\n+\n+if test \"x$ax_pthread_clang\" = \"xyes\"; then\n+\n+        # Clang takes -pthread; it has never supported any other flag\n+\n+        # (Note 1: This will need to be revisited if a system that Clang\n+        # supports has POSIX threads in a separate library.  This tends not\n+        # to be the way of modern systems, but it's conceivable.)\n+\n+        # (Note 2: On some systems, notably Darwin, -pthread is not needed\n+        # to get POSIX threads support; the API is always present and\n+        # active.  We could reasonably leave PTHREAD_CFLAGS empty.  But\n+        # -pthread does define _REENTRANT, and while the Darwin headers\n+        # ignore this macro, third-party headers might not.)\n+\n+        PTHREAD_CFLAGS=\"-pthread\"\n+        PTHREAD_LIBS=\n+\n+        ax_pthread_ok=yes\n+\n+        # However, older versions of Clang make a point of warning the user\n+        # that, in an invocation where only linking and no compilation is\n+        # taking place, the -pthread option has no effect (\"argument unused\n+        # during compilation\").  They expect -pthread to be passed in only\n+        # when source code is being compiled.\n+        #\n+        # Problem is, this is at odds with the way Automake and most other\n+        # C build frameworks function, which is that the same flags used in\n+        # compilation (CFLAGS) are also used in linking.  Many systems\n+        # supported by AX_PTHREAD require exactly this for POSIX threads\n+        # support, and in fact it is often not straightforward to specify a\n+        # flag that is used only in the compilation phase and not in\n+        # linking.  Such a scenario is extremely rare in practice.\n+        #\n+        # Even though use of the -pthread flag in linking would only print\n+        # a warning, this can be a nuisance for well-run software projects\n+        # that build with -Werror.  So if the active version of Clang has\n+        # this misfeature, we search for an option to squash it.\n+\n+        AC_CACHE_CHECK([whether Clang needs flag to prevent \"argument unused\" warning when linking with -pthread],\n+            [ax_cv_PTHREAD_CLANG_NO_WARN_FLAG],\n+            [ax_cv_PTHREAD_CLANG_NO_WARN_FLAG=unknown\n+             # Create an alternate version of $ac_link that compiles and\n+             # links in two steps (.c -> .o, .o -> exe) instead of one\n+             # (.c -> exe), because the warning occurs only in the second\n+             # step\n+             ax_pthread_save_ac_link=\"$ac_link\"\n+             ax_pthread_sed='s/conftest\\.\\$ac_ext/conftest.$ac_objext/g'\n+             ax_pthread_link_step=`$as_echo \"$ac_link\" | sed \"$ax_pthread_sed\"`\n+             ax_pthread_2step_ac_link=\"($ac_compile) && (echo ==== >&5) && ($ax_pthread_link_step)\"\n+             ax_pthread_save_CFLAGS=\"$CFLAGS\"\n+             for ax_pthread_try in '' -Qunused-arguments -Wno-unused-command-line-argument unknown; do\n+                AS_IF([test \"x$ax_pthread_try\" = \"xunknown\"], [break])\n+                CFLAGS=\"-Werror -Wunknown-warning-option $ax_pthread_try -pthread $ax_pthread_save_CFLAGS\"\n+                ac_link=\"$ax_pthread_save_ac_link\"\n+                AC_LINK_IFELSE([AC_LANG_SOURCE([[int main(void){return 0;}]])],\n+                    [ac_link=\"$ax_pthread_2step_ac_link\"\n+                     AC_LINK_IFELSE([AC_LANG_SOURCE([[int main(void){return 0;}]])],\n+                         [break])\n+                    ])\n+             done\n+             ac_link=\"$ax_pthread_save_ac_link\"\n+             CFLAGS=\"$ax_pthread_save_CFLAGS\"\n+             AS_IF([test \"x$ax_pthread_try\" = \"x\"], [ax_pthread_try=no])\n+             ax_cv_PTHREAD_CLANG_NO_WARN_FLAG=\"$ax_pthread_try\"\n+            ])\n \n-# Clang doesn't consider unrecognized options an error unless we specify\n-# -Werror. We throw in some extra Clang-specific options to ensure that\n-# this doesn't happen for GCC, which also accepts -Werror.\n+        case \"$ax_cv_PTHREAD_CLANG_NO_WARN_FLAG\" in\n+                no | unknown) ;;\n+                *) PTHREAD_CFLAGS=\"$ax_cv_PTHREAD_CLANG_NO_WARN_FLAG $PTHREAD_CFLAGS\" ;;\n+        esac\n \n-AC_MSG_CHECKING([if compiler needs -Werror to reject unknown flags])\n-save_CFLAGS=\"$CFLAGS\"\n-ax_pthread_extra_flags=\"-Werror\"\n-CFLAGS=\"$CFLAGS $ax_pthread_extra_flags -Wunknown-warning-option -Wsizeof-array-argument\"\n-AC_COMPILE_IFELSE([AC_LANG_PROGRAM([int foo(void);],[foo()])],\n-                  [AC_MSG_RESULT([yes])],\n-                  [ax_pthread_extra_flags=\n-                   AC_MSG_RESULT([no])])\n-CFLAGS=\"$save_CFLAGS\"\n+fi # $ax_pthread_clang = yes\n \n-if test x\"$ax_pthread_ok\" = xno; then\n-for flag in $ax_pthread_flags; do\n+if test \"x$ax_pthread_ok\" = \"xno\"; then\n+for ax_pthread_try_flag in $ax_pthread_flags; do\n \n-        case $flag in\n+        case $ax_pthread_try_flag in\n                 none)\n                 AC_MSG_CHECKING([whether pthreads work without any flags])\n                 ;;\n \n+                -mt,pthread)\n+                AC_MSG_CHECKING([whether pthreads work with -mt -lpthread])\n+                PTHREAD_CFLAGS=\"-mt\"\n+                PTHREAD_LIBS=\"-lpthread\"\n+                ;;\n+\n                 -*)\n-                AC_MSG_CHECKING([whether pthreads work with $flag])\n-                PTHREAD_CFLAGS=\"$flag\"\n+                AC_MSG_CHECKING([whether pthreads work with $ax_pthread_try_flag])\n+                PTHREAD_CFLAGS=\"$ax_pthread_try_flag\"\n                 ;;\n \n                 pthread-config)\n                 AC_CHECK_PROG([ax_pthread_config], [pthread-config], [yes], [no])\n-                if test x\"$ax_pthread_config\" = xno; then continue; fi\n+                AS_IF([test \"x$ax_pthread_config\" = \"xno\"], [continue])\n                 PTHREAD_CFLAGS=\"`pthread-config --cflags`\"\n                 PTHREAD_LIBS=\"`pthread-config --ldflags` `pthread-config --libs`\"\n                 ;;\n \n                 *)\n-                AC_MSG_CHECKING([for the pthreads library -l$flag])\n-                PTHREAD_LIBS=\"-l$flag\"\n+                AC_MSG_CHECKING([for the pthreads library -l$ax_pthread_try_flag])\n+                PTHREAD_LIBS=\"-l$ax_pthread_try_flag\"\n                 ;;\n         esac\n \n-        save_LIBS=\"$LIBS\"\n-        save_CFLAGS=\"$CFLAGS\"\n+        ax_pthread_save_CFLAGS=\"$CFLAGS\"\n+        ax_pthread_save_LIBS=\"$LIBS\"\n+        CFLAGS=\"$CFLAGS $PTHREAD_CFLAGS\"\n         LIBS=\"$PTHREAD_LIBS $LIBS\"\n-        CFLAGS=\"$CFLAGS $PTHREAD_CFLAGS $ax_pthread_extra_flags\"\n \n         # Check for various functions.  We must include pthread.h,\n         # since some functions may be macros.  (On the Sequent, we\n@@ -218,7 +366,11 @@ for flag in $ax_pthread_flags; do\n         # pthread_cleanup_push because it is one of the few pthread\n         # functions on Solaris that doesn't have a non-functional libc stub.\n         # We try pthread_create on general principles.\n+\n         AC_LINK_IFELSE([AC_LANG_PROGRAM([#include <pthread.h>\n+#                       if $ax_pthread_check_cond\n+#                        error \"$ax_pthread_check_macro must be defined\"\n+#                       endif\n                         static void routine(void *a) { a = 0; }\n                         static void *start_routine(void *a) { return a; }],\n                        [pthread_t th; pthread_attr_t attr;\n@@ -227,88 +379,89 @@ for flag in $ax_pthread_flags; do\n                         pthread_attr_init(&attr);\n                         pthread_cleanup_push(routine, 0);\n                         pthread_cleanup_pop(0) /* ; */])],\n-                [ax_pthread_ok=yes],\n-                [])\n+            [ax_pthread_ok=yes],\n+            [])\n \n-        LIBS=\"$save_LIBS\"\n-        CFLAGS=\"$save_CFLAGS\"\n+        CFLAGS=\"$ax_pthread_save_CFLAGS\"\n+        LIBS=\"$ax_pthread_save_LIBS\"\n \n         AC_MSG_RESULT([$ax_pthread_ok])\n-        if test \"x$ax_pthread_ok\" = xyes; then\n-                break;\n-        fi\n+        AS_IF([test \"x$ax_pthread_ok\" = \"xyes\"], [break])\n \n         PTHREAD_LIBS=\"\"\n         PTHREAD_CFLAGS=\"\"\n done\n fi\n \n # Various other checks:\n-if test \"x$ax_pthread_ok\" = xyes; then\n-        save_LIBS=\"$LIBS\"\n-        LIBS=\"$PTHREAD_LIBS $LIBS\"\n-        save_CFLAGS=\"$CFLAGS\"\n+if test \"x$ax_pthread_ok\" = \"xyes\"; then\n+        ax_pthread_save_CFLAGS=\"$CFLAGS\"\n+        ax_pthread_save_LIBS=\"$LIBS\"\n         CFLAGS=\"$CFLAGS $PTHREAD_CFLAGS\"\n+        LIBS=\"$PTHREAD_LIBS $LIBS\"\n \n         # Detect AIX lossage: JOINABLE attribute is called UNDETACHED.\n-        AC_MSG_CHECKING([for joinable pthread attribute])\n-        attr_name=unknown\n-        for attr in PTHREAD_CREATE_JOINABLE PTHREAD_CREATE_UNDETACHED; do\n-            AC_LINK_IFELSE([AC_LANG_PROGRAM([#include <pthread.h>],\n-                           [int attr = $attr; return attr /* ; */])],\n-                [attr_name=$attr; break],\n-                [])\n-        done\n-        AC_MSG_RESULT([$attr_name])\n-        if test \"$attr_name\" != PTHREAD_CREATE_JOINABLE; then\n-            AC_DEFINE_UNQUOTED([PTHREAD_CREATE_JOINABLE], [$attr_name],\n-                               [Define to necessary symbol if this constant\n-                                uses a non-standard name on your system.])\n-        fi\n-\n-        AC_MSG_CHECKING([if more special flags are required for pthreads])\n-        flag=no\n-        case ${host_os} in\n-            aix* | freebsd* | darwin*) flag=\"-D_THREAD_SAFE\";;\n-            osf* | hpux*) flag=\"-D_REENTRANT\";;\n-            solaris*)\n-            if test \"$GCC\" = \"yes\"; then\n-                flag=\"-D_REENTRANT\"\n-            else\n-                # TODO: What about Clang on Solaris?\n-                flag=\"-mt -D_REENTRANT\"\n-            fi\n-            ;;\n-        esac\n-        AC_MSG_RESULT([$flag])\n-        if test \"x$flag\" != xno; then\n-            PTHREAD_CFLAGS=\"$flag $PTHREAD_CFLAGS\"\n-        fi\n+        AC_CACHE_CHECK([for joinable pthread attribute],\n+            [ax_cv_PTHREAD_JOINABLE_ATTR],\n+            [ax_cv_PTHREAD_JOINABLE_ATTR=unknown\n+             for ax_pthread_attr in PTHREAD_CREATE_JOINABLE PTHREAD_CREATE_UNDETACHED; do\n+                 AC_LINK_IFELSE([AC_LANG_PROGRAM([#include <pthread.h>],\n+                                                 [int attr = $ax_pthread_attr; return attr /* ; */])],\n+                                [ax_cv_PTHREAD_JOINABLE_ATTR=$ax_pthread_attr; break],\n+                                [])\n+             done\n+            ])\n+        AS_IF([test \"x$ax_cv_PTHREAD_JOINABLE_ATTR\" != \"xunknown\" && \\\n+               test \"x$ax_cv_PTHREAD_JOINABLE_ATTR\" != \"xPTHREAD_CREATE_JOINABLE\" && \\\n+               test \"x$ax_pthread_joinable_attr_defined\" != \"xyes\"],\n+              [AC_DEFINE_UNQUOTED([PTHREAD_CREATE_JOINABLE],\n+                                  [$ax_cv_PTHREAD_JOINABLE_ATTR],\n+                                  [Define to necessary symbol if this constant\n+                                   uses a non-standard name on your system.])\n+               ax_pthread_joinable_attr_defined=yes\n+              ])\n+\n+        AC_CACHE_CHECK([whether more special flags are required for pthreads],\n+            [ax_cv_PTHREAD_SPECIAL_FLAGS],\n+            [ax_cv_PTHREAD_SPECIAL_FLAGS=no\n+             case $host_os in\n+             solaris*)\n+             ax_cv_PTHREAD_SPECIAL_FLAGS=\"-D_POSIX_PTHREAD_SEMANTICS\"\n+             ;;\n+             esac\n+            ])\n+        AS_IF([test \"x$ax_cv_PTHREAD_SPECIAL_FLAGS\" != \"xno\" && \\\n+               test \"x$ax_pthread_special_flags_added\" != \"xyes\"],\n+              [PTHREAD_CFLAGS=\"$ax_cv_PTHREAD_SPECIAL_FLAGS $PTHREAD_CFLAGS\"\n+               ax_pthread_special_flags_added=yes])\n \n         AC_CACHE_CHECK([for PTHREAD_PRIO_INHERIT],\n-            [ax_cv_PTHREAD_PRIO_INHERIT], [\n-                AC_LINK_IFELSE([AC_LANG_PROGRAM([[#include <pthread.h>]],\n-                                                [[int i = PTHREAD_PRIO_INHERIT;]])],\n-                    [ax_cv_PTHREAD_PRIO_INHERIT=yes],\n-                    [ax_cv_PTHREAD_PRIO_INHERIT=no])\n+            [ax_cv_PTHREAD_PRIO_INHERIT],\n+            [AC_LINK_IFELSE([AC_LANG_PROGRAM([[#include <pthread.h>]],\n+                                             [[int i = PTHREAD_PRIO_INHERIT;]])],\n+                            [ax_cv_PTHREAD_PRIO_INHERIT=yes],\n+                            [ax_cv_PTHREAD_PRIO_INHERIT=no])\n             ])\n-        AS_IF([test \"x$ax_cv_PTHREAD_PRIO_INHERIT\" = \"xyes\"],\n-            [AC_DEFINE([HAVE_PTHREAD_PRIO_INHERIT], [1], [Have PTHREAD_PRIO_INHERIT.])])\n+        AS_IF([test \"x$ax_cv_PTHREAD_PRIO_INHERIT\" = \"xyes\" && \\\n+               test \"x$ax_pthread_prio_inherit_defined\" != \"xyes\"],\n+              [AC_DEFINE([HAVE_PTHREAD_PRIO_INHERIT], [1], [Have PTHREAD_PRIO_INHERIT.])\n+               ax_pthread_prio_inherit_defined=yes\n+              ])\n \n-        LIBS=\"$save_LIBS\"\n-        CFLAGS=\"$save_CFLAGS\"\n+        CFLAGS=\"$ax_pthread_save_CFLAGS\"\n+        LIBS=\"$ax_pthread_save_LIBS\"\n \n         # More AIX lossage: compile with *_r variant\n-        if test \"x$GCC\" != xyes; then\n+        if test \"x$GCC\" != \"xyes\"; then\n             case $host_os in\n                 aix*)\n                 AS_CASE([\"x/$CC\"],\n-                  [x*/c89|x*/c89_128|x*/c99|x*/c99_128|x*/cc|x*/cc128|x*/xlc|x*/xlc_v6|x*/xlc128|x*/xlc128_v6],\n-                  [#handle absolute path differently from PATH based program lookup\n-                   AS_CASE([\"x$CC\"],\n-                     [x/*],\n-                     [AS_IF([AS_EXECUTABLE_P([${CC}_r])],[PTHREAD_CC=\"${CC}_r\"])],\n-                     [AC_CHECK_PROGS([PTHREAD_CC],[${CC}_r],[$CC])])])\n+                    [x*/c89|x*/c89_128|x*/c99|x*/c99_128|x*/cc|x*/cc128|x*/xlc|x*/xlc_v6|x*/xlc128|x*/xlc128_v6],\n+                    [#handle absolute path differently from PATH based program lookup\n+                     AS_CASE([\"x$CC\"],\n+                         [x/*],\n+                         [AS_IF([AS_EXECUTABLE_P([${CC}_r])],[PTHREAD_CC=\"${CC}_r\"])],\n+                         [AC_CHECK_PROGS([PTHREAD_CC],[${CC}_r],[$CC])])])\n                 ;;\n             esac\n         fi\n@@ -321,7 +474,7 @@ AC_SUBST([PTHREAD_CFLAGS])\n AC_SUBST([PTHREAD_CC])\n \n # Finally, execute ACTION-IF-FOUND/ACTION-IF-NOT-FOUND:\n-if test x\"$ax_pthread_ok\" = xyes; then\n+if test \"x$ax_pthread_ok\" = \"xyes\"; then\n         ifelse([$1],,[AC_DEFINE([HAVE_PTHREAD],[1],[Define if you have POSIX threads libraries and header files.])],[$1])\n         :\n else"
      },
      {
        "sha": "0c3d49c2bc0afd73bb8bf9dc23908b9d70b97156",
        "filename": "build-aux/m4/bitcoin_find_bdb48.m4",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/build-aux/m4/bitcoin_find_bdb48.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/build-aux/m4/bitcoin_find_bdb48.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/bitcoin_find_bdb48.m4?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -1,3 +1,7 @@\n+dnl Copyright (c) 2013-2015 The Bitcoin Core developers\n+dnl Distributed under the MIT software license, see the accompanying\n+dnl file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n AC_DEFUN([BITCOIN_FIND_BDB48],[\n   AC_MSG_CHECKING([for Berkeley DB C++ headers])\n   BDB_CPPFLAGS=\n@@ -38,7 +42,7 @@ AC_DEFUN([BITCOIN_FIND_BDB48],[\n   done\n   if test \"x$bdbpath\" = \"xX\"; then\n     AC_MSG_RESULT([no])\n-    AC_MSG_ERROR([libdb_cxx headers missing, Bitcoin Core requires this library for wallet functionality (--disable-wallet to disable wallet functionality)])\n+    AC_MSG_ERROR([libdb_cxx headers missing, ]AC_PACKAGE_NAME[ requires this library for wallet functionality (--disable-wallet to disable wallet functionality)])\n   elif test \"x$bdb48path\" = \"xX\"; then\n     BITCOIN_SUBDIR_TO_INCLUDE(BDB_CPPFLAGS,[${bdbpath}],db_cxx)\n     AC_ARG_WITH([incompatible-bdb],[AS_HELP_STRING([--with-incompatible-bdb], [allow using a bdb version other than 4.8])],[\n@@ -60,7 +64,7 @@ AC_DEFUN([BITCOIN_FIND_BDB48],[\n     ])\n   done\n   if test \"x$BDB_LIBS\" = \"x\"; then\n-      AC_MSG_ERROR([libdb_cxx missing, Bitcoin Core requires this library for wallet functionality (--disable-wallet to disable wallet functionality)])\n+      AC_MSG_ERROR([libdb_cxx missing, ]AC_PACKAGE_NAME[ requires this library for wallet functionality (--disable-wallet to disable wallet functionality)])\n   fi\n   AC_SUBST(BDB_LIBS)\n ])"
      },
      {
        "sha": "509283a0b9cd9c9aeec600915556f5d24d9e8240",
        "filename": "build-aux/m4/bitcoin_qt.m4",
        "status": "modified",
        "additions": 24,
        "deletions": 4,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/build-aux/m4/bitcoin_qt.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/build-aux/m4/bitcoin_qt.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/bitcoin_qt.m4?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -1,3 +1,7 @@\n+dnl Copyright (c) 2013-2016 The Bitcoin Core developers\n+dnl Distributed under the MIT software license, see the accompanying\n+dnl file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n dnl Helper for cases where a qt dependency is not met.\n dnl Output: If qt version is auto, set bitcoin_enable_qt to false. Else, exit.\n AC_DEFUN([BITCOIN_QT_FAIL],[\n@@ -220,7 +224,7 @@ AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n \n \n   dnl enable qt support\n-  AC_MSG_CHECKING(whether to build Bitcoin Core GUI)\n+  AC_MSG_CHECKING(whether to build ]AC_PACKAGE_NAME[ GUI)\n   BITCOIN_QT_CHECK([\n     bitcoin_enable_qt=yes\n     bitcoin_enable_qt_test=yes\n@@ -331,8 +335,9 @@ AC_DEFUN([_BITCOIN_QT_FIND_STATIC_PLUGINS],[\n           QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/accessible\"\n         fi\n       fi\n-     m4_ifdef([PKG_CHECK_MODULES],[\n      if test x$use_pkgconfig = xyes; then\n+     : dnl\n+     m4_ifdef([PKG_CHECK_MODULES],[\n        PKG_CHECK_MODULES([QTPLATFORM], [Qt5PlatformSupport], [QT_LIBS=\"$QTPLATFORM_LIBS $QT_LIBS\"])\n        if test x$TARGET_OS = xlinux; then\n          PKG_CHECK_MODULES([X11XCB], [x11-xcb], [QT_LIBS=\"$X11XCB_LIBS $QT_LIBS\"])\n@@ -342,8 +347,23 @@ AC_DEFUN([_BITCOIN_QT_FIND_STATIC_PLUGINS],[\n        elif test x$TARGET_OS = xdarwin; then\n          PKG_CHECK_MODULES([QTPRINT], [Qt5PrintSupport], [QT_LIBS=\"$QTPRINT_LIBS $QT_LIBS\"])\n        fi\n-     fi\n      ])\n+     else\n+       if test x$TARGET_OS = xwindows; then\n+         AC_CACHE_CHECK(for Qt >= 5.6, bitcoin_cv_need_platformsupport,[AC_COMPILE_IFELSE([AC_LANG_PROGRAM(\n+             [[#include <QtCore>]],[[\n+             #if QT_VERSION < 0x050600\n+             choke;\n+             #endif\n+             ]])],\n+           [bitcoin_cv_need_platformsupport=yes],\n+           [bitcoin_cv_need_platformsupport=no])\n+         ])\n+         if test x$bitcoin_cv_need_platformsupport = xyes; then\n+           BITCOIN_QT_CHECK(AC_CHECK_LIB([${QT_LIB_PREFIX}PlatformSupport],[main],,BITCOIN_QT_FAIL(lib$QT_LIB_PREFIXPlatformSupport not found)))\n+         fi\n+       fi\n+     fi\n   else\n     if test x$qt_plugin_path != x; then\n       QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/accessible\"\n@@ -384,7 +404,7 @@ AC_DEFUN([_BITCOIN_QT_FIND_LIBS_WITH_PKGCONFIG],[\n \n       dnl qt version is set to 'auto' and the preferred version wasn't found. Now try the other.\n       if test x$have_qt = xno && test x$bitcoin_qt_want_version = xauto; then\n-        if test x$auto_priority_version = x$qt5; then\n+        if test x$auto_priority_version = xqt5; then\n           PKG_CHECK_MODULES([QT], [$qt4_modules], [QT_INCLUDES=\"$QT_CFLAGS\"; have_qt=yes; QT_LIB_PREFIX=Qt; bitcoin_qt_got_major_vers=4], [have_qt=no])\n         else\n           PKG_CHECK_MODULES([QT], [$qt5_modules], [QT_INCLUDES=\"$QT_CFLAGS\"; have_qt=yes; QT_LIB_PREFIX=Qt5; bitcoin_qt_got_major_vers=5], [have_qt=no])"
      },
      {
        "sha": "7841042ac877b20ea8b35e634f1b4088aae1647f",
        "filename": "build-aux/m4/bitcoin_subdir_to_include.m4",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/build-aux/m4/bitcoin_subdir_to_include.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/build-aux/m4/bitcoin_subdir_to_include.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/bitcoin_subdir_to_include.m4?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -1,3 +1,7 @@\n+dnl Copyright (c) 2013-2014 The Bitcoin Core developers\n+dnl Distributed under the MIT software license, see the accompanying\n+dnl file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n dnl BITCOIN_SUBDIR_TO_INCLUDE([CPPFLAGS-VARIABLE-NAME],[SUBDIRECTORY-NAME],[HEADER-FILE])\n dnl SUBDIRECTORY-NAME must end with a path separator\n AC_DEFUN([BITCOIN_SUBDIR_TO_INCLUDE],["
      },
      {
        "sha": "75c43f9a92d3d6ac2a5d1aee89e97bab7a89f545",
        "filename": "build-aux/m4/l_atomic.m4",
        "status": "added",
        "additions": 46,
        "deletions": 0,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/build-aux/m4/l_atomic.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/build-aux/m4/l_atomic.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/l_atomic.m4?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -0,0 +1,46 @@\n+dnl Copyright (c) 2015 Tim Kosse <tim.kosse@filezilla-project.org>\n+dnl Copying and distribution of this file, with or without modification, are\n+dnl permitted in any medium without royalty provided the copyright notice\n+dnl and this notice are preserved. This file is offered as-is, without any\n+dnl warranty.\n+\n+# Some versions of gcc/libstdc++ require linking with -latomic if\n+# using the C++ atomic library.\n+#\n+# Sourced from http://bugs.debian.org/797228\n+\n+m4_define([_CHECK_ATOMIC_testbody], [[\n+  #include <atomic>\n+  #include <cstdint>\n+\n+  int main() {\n+    std::atomic<int64_t> a{};\n+\n+    int64_t v = 5;\n+    int64_t r = a.fetch_add(v);\n+    return static_cast<int>(r);\n+  }\n+]])\n+\n+AC_DEFUN([CHECK_ATOMIC], [\n+\n+  AC_LANG_PUSH(C++)\n+\n+  AC_MSG_CHECKING([whether std::atomic can be used without link library])\n+\n+  AC_LINK_IFELSE([AC_LANG_SOURCE([_CHECK_ATOMIC_testbody])],[\n+      AC_MSG_RESULT([yes])\n+    ],[\n+      AC_MSG_RESULT([no])\n+      LIBS=\"$LIBS -latomic\"\n+      AC_MSG_CHECKING([whether std::atomic needs -latomic])\n+      AC_LINK_IFELSE([AC_LANG_SOURCE([_CHECK_ATOMIC_testbody])],[\n+          AC_MSG_RESULT([yes])\n+        ],[\n+          AC_MSG_RESULT([no])\n+          AC_MSG_FAILURE([cannot figure out how to use std::atomic])\n+        ])\n+    ])\n+\n+  AC_LANG_POP\n+])"
      },
      {
        "sha": "9ce10b745497c78c626226e70fc624eb5cbabb27",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 216,
        "deletions": 74,
        "changes": 290,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -1,17 +1,24 @@\n dnl require autoconf 2.60 (AS_ECHO/AS_ECHO_N)\n AC_PREREQ([2.60])\n define(_CLIENT_VERSION_MAJOR, 0)\n-define(_CLIENT_VERSION_MINOR, 12)\n+define(_CLIENT_VERSION_MINOR, 13)\n define(_CLIENT_VERSION_REVISION, 99)\n define(_CLIENT_VERSION_BUILD, 0)\n define(_CLIENT_VERSION_IS_RELEASE, false)\n-define(_COPYRIGHT_YEAR, 2015)\n-AC_INIT([Bitcoin Core],[_CLIENT_VERSION_MAJOR._CLIENT_VERSION_MINOR._CLIENT_VERSION_REVISION],[https://github.com/bitcoin/bitcoin/issues],[bitcoin])\n+define(_COPYRIGHT_YEAR, 2016)\n+define(_COPYRIGHT_HOLDERS,[The %s developers])\n+define(_COPYRIGHT_HOLDERS_SUBSTITUTION,[[Bitcoin Core]])\n+AC_INIT([Bitcoin Core],[_CLIENT_VERSION_MAJOR._CLIENT_VERSION_MINOR._CLIENT_VERSION_REVISION],[https://github.com/bitcoin/bitcoin/issues],[bitcoin],[https://bitcoincore.org/])\n AC_CONFIG_SRCDIR([src/main.cpp])\n AC_CONFIG_HEADERS([src/config/bitcoin-config.h])\n AC_CONFIG_AUX_DIR([build-aux])\n AC_CONFIG_MACRO_DIR([build-aux/m4])\n \n+BITCOIN_DAEMON_NAME=bitcoind\n+BITCOIN_GUI_NAME=bitcoin-qt\n+BITCOIN_CLI_NAME=bitcoin-cli\n+BITCOIN_TX_NAME=bitcoin-tx\n+\n AC_CANONICAL_HOST\n \n AH_TOP([#ifndef BITCOIN_CONFIG_H])\n@@ -48,6 +55,11 @@ case $host in\n      lt_cv_deplibs_check_method=\"pass_all\"\n   ;;\n esac\n+dnl Require C++11 compiler (no GNU extensions)\n+AX_CXX_COMPILE_STDCXX([11], [noext], [mandatory])\n+dnl Check if -latomic is required for <std::atomic>\n+CHECK_ATOMIC\n+\n dnl Libtool init checks.\n LT_INIT([pic-only])\n \n@@ -57,16 +69,18 @@ AC_PATH_TOOL(RANLIB, ranlib)\n AC_PATH_TOOL(STRIP, strip)\n AC_PATH_TOOL(GCOV, gcov)\n AC_PATH_PROG(LCOV, lcov)\n-AC_PATH_PROG(JAVA, java)\n-AC_PATH_PROG(PYTHON, python)\n+dnl Python 3.x is supported from 3.4 on (see https://github.com/bitcoin/bitcoin/issues/7893)\n+AC_PATH_PROGS([PYTHON], [python3.6 python3.5 python3.4 python3 python2.7 python2 python])\n AC_PATH_PROG(GENHTML, genhtml)\n AC_PATH_PROG([GIT], [git])\n AC_PATH_PROG(CCACHE,ccache)\n AC_PATH_PROG(XGETTEXT,xgettext)\n AC_PATH_PROG(HEXDUMP,hexdump)\n+AC_PATH_TOOL(READELF, readelf)\n+AC_PATH_TOOL(CPPFILT, c++filt)\n+AC_PATH_TOOL(OBJCOPY, objcopy)\n \n-dnl pkg-config check.\n-PKG_PROG_PKG_CONFIG\n+AC_ARG_VAR(PYTHONPATH, Augments the default search path for python module files)\n \n # Enable wallet\n AC_ARG_ENABLE([wallet],\n@@ -92,21 +106,16 @@ AC_ARG_ENABLE(tests,\n     [use_tests=$enableval],\n     [use_tests=yes])\n \n+AC_ARG_ENABLE(gui-tests,\n+    AS_HELP_STRING([--disable-gui-tests],[do not compile GUI tests (default is to compile if GUI and tests enabled)]),\n+    [use_gui_tests=$enableval],\n+    [use_gui_tests=$use_tests])\n+\n AC_ARG_ENABLE(bench,\n     AS_HELP_STRING([--disable-bench],[do not compile benchmarks (default is to compile)]),\n     [use_bench=$enableval],\n     [use_bench=yes])\n \n-AC_ARG_WITH([comparison-tool],\n-    AS_HELP_STRING([--with-comparison-tool],[path to java comparison tool (requires --enable-tests)]),\n-    [use_comparison_tool=$withval],\n-    [use_comparison_tool=no])\n-\n-AC_ARG_ENABLE([comparison-tool-reorg-tests],\n-    AS_HELP_STRING([--enable-comparison-tool-reorg-tests],[enable expensive reorg tests in the comparison tool (default no)]),\n-    [use_comparison_tool_reorg_tests=$enableval],\n-    [use_comparison_tool_reorg_tests=no])\n-\n AC_ARG_ENABLE([extended-rpc-tests],\n     AS_HELP_STRING([--enable-extended-rpc-tests],[enable expensive RPC tests when using lcov (default no)]),\n     [use_extended_rpc_tests=$enableval],\n@@ -148,6 +157,12 @@ AC_ARG_ENABLE([glibc-back-compat],\n   [use_glibc_compat=$enableval],\n   [use_glibc_compat=no])\n \n+AC_ARG_WITH([system-univalue],\n+  [AS_HELP_STRING([--with-system-univalue],\n+  [Build with system UniValue (default is no)])],\n+  [system_univalue=$withval],\n+  [system_univalue=no]\n+)\n AC_ARG_ENABLE([zmq],\n   [AS_HELP_STRING([--disable-zmq],\n   [disable ZMQ notifications])],\n@@ -156,13 +171,22 @@ AC_ARG_ENABLE([zmq],\n \n AC_ARG_WITH([protoc-bindir],[AS_HELP_STRING([--with-protoc-bindir=BIN_DIR],[specify protoc bin path])], [protoc_bin_path=$withval], [])\n \n+AC_ARG_ENABLE(man,\n+    [AS_HELP_STRING([--disable-man],\n+                    [do not install man pages (default is to install)])],,\n+    enable_man=yes)\n+AM_CONDITIONAL(ENABLE_MAN, test \"$enable_man\" != no)\n+\n # Enable debug\n AC_ARG_ENABLE([debug],\n     [AS_HELP_STRING([--enable-debug],\n                     [use debug compiler flags and macros (default is no)])],\n     [enable_debug=$enableval],\n     [enable_debug=no])\n \n+AC_LANG_PUSH([C++])\n+AX_CHECK_COMPILE_FLAG([-Werror],[CXXFLAG_WERROR=\"-Werror\"],[CXXFLAG_WERROR=\"\"])\n+\n if test \"x$enable_debug\" = xyes; then\n     CPPFLAGS=\"$CPPFLAGS -DDEBUG -DDEBUG_LOCKORDER\"\n     if test \"x$GCC\" = xyes; then\n@@ -174,11 +198,19 @@ if test \"x$enable_debug\" = xyes; then\n     fi\n fi\n \n-## TODO: Remove these hard-coded paths and flags. They are here for the sake of\n-##       compatibility with the legacy buildsystem.\n-##\n if test \"x$CXXFLAGS_overridden\" = \"xno\"; then\n-  CXXFLAGS=\"$CXXFLAGS -Wall -Wextra -Wformat -Wformat-security -Wno-unused-parameter -Wno-self-assign\"\n+  AX_CHECK_COMPILE_FLAG([-Wall],[CXXFLAGS=\"$CXXFLAGS -Wall\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Wextra],[CXXFLAGS=\"$CXXFLAGS -Wextra\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Wformat],[CXXFLAGS=\"$CXXFLAGS -Wformat\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Wformat-security],[CXXFLAGS=\"$CXXFLAGS -Wformat-security\"],,[[$CXXFLAG_WERROR]])\n+\n+  ## Some compilers (gcc) ignore unknown -Wno-* options, but warn about all\n+  ## unknown options if any other warning is produced. Test the -Wfoo case, and\n+  ## set the -Wno-foo case if it works.\n+  AX_CHECK_COMPILE_FLAG([-Wunused-parameter],[CXXFLAGS=\"$CXXFLAGS -Wno-unused-parameter\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Wself-assign],[CXXFLAGS=\"$CXXFLAGS -Wno-self-assign\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Wunused-local-typedef],[CXXFLAGS=\"$CXXFLAGS -Wno-unused-local-typedef\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Wdeprecated-register],[CXXFLAGS=\"$CXXFLAGS -Wno-deprecated-register\"],,[[$CXXFLAG_WERROR]])\n fi\n CPPFLAGS=\"$CPPFLAGS -DHAVE_BUILD_INFO -D__STDC_FORMAT_MACROS\"\n \n@@ -200,8 +232,6 @@ AC_ARG_WITH([daemon],\n   [build_bitcoind=$withval],\n   [build_bitcoind=yes])\n \n-AC_LANG_PUSH([C++])\n-\n use_pkgconfig=yes\n case $host in\n   *mingw*)\n@@ -245,7 +275,7 @@ case $host in\n      fi\n \n      CPPFLAGS=\"$CPPFLAGS -D_MT -DWIN32 -D_WINDOWS -DBOOST_THREAD_USE_LIB\"\n-     LEVELDB_TARGET_FLAGS=\"TARGET_OS=OS_WINDOWS_CROSSCOMPILE\"\n+     LEVELDB_TARGET_FLAGS=\"-DOS_WINDOWS\"\n      if test \"x$CXXFLAGS_overridden\" = \"xno\"; then\n        CXXFLAGS=\"$CXXFLAGS -w\"\n      fi\n@@ -267,7 +297,7 @@ case $host in\n      ;;\n   *darwin*)\n      TARGET_OS=darwin\n-     LEVELDB_TARGET_FLAGS=\"TARGET_OS=Darwin\"\n+     LEVELDB_TARGET_FLAGS=\"-DOS_MACOSX\"\n      if  test x$cross_compiling != xyes; then\n        BUILD_OS=darwin\n        AC_CHECK_PROG([PORT],port, port)\n@@ -314,6 +344,9 @@ case $host in\n            AC_PATH_TOOL([INSTALLNAMETOOL], [install_name_tool], install_name_tool)\n            AC_PATH_TOOL([OTOOL], [otool], otool)\n            AC_PATH_PROGS([GENISOIMAGE], [genisoimage mkisofs],genisoimage)\n+           AC_PATH_PROGS([RSVG_CONVERT], [rsvg-convert rsvg],rsvg-convert)\n+           AC_PATH_PROGS([IMAGEMAGICK_CONVERT], [convert],convert)\n+           AC_PATH_PROGS([TIFFCP], [tiffcp],tiffcp)\n \n            dnl libtool will try to strip the static lib, which is a problem for\n            dnl cross-builds because strip attempts to call a hard-coded ld,\n@@ -330,22 +363,29 @@ case $host in\n      ;;\n    *linux*)\n      TARGET_OS=linux\n+     LEVELDB_TARGET_FLAGS=\"-DOS_LINUX\"\n+     ;;\n+   *freebsd*)\n+     LEVELDB_TARGET_FLAGS=\"-DOS_FREEBSD\"\n+     ;;\n+   *openbsd*)\n+     LEVELDB_TARGET_FLAGS=\"-DOS_OPENBSD\"\n      ;;\n    *)\n+     OTHER_OS=`echo ${host_os} | awk '{print toupper($0)}'`\n+     AC_MSG_WARN([Guessing LevelDB OS as OS_${OTHER_OS}, please check whether this is correct, if not add an entry to configure.ac.])\n+     LEVELDB_TARGET_FLAGS=\"-DOS_${OTHER_OS}\"\n      ;;\n esac\n \n-if test x$use_comparison_tool != xno; then\n-  AC_SUBST(JAVA_COMPARISON_TOOL, $use_comparison_tool)\n-fi\n-\n-if test x$use_comparison_tool_reorg_tests != xno; then\n-  if test x$use_comparison_tool = x; then\n-    AC_MSG_ERROR(\"comparison tool reorg tests but comparison tool was not specified\")\n+if test x$use_pkgconfig = xyes; then\n+  m4_ifndef([PKG_PROG_PKG_CONFIG], [AC_MSG_ERROR(PKG_PROG_PKG_CONFIG macro not found. Please install pkg-config and re-run autogen.sh.)])\n+  m4_ifdef([PKG_PROG_PKG_CONFIG], [\n+  PKG_PROG_PKG_CONFIG\n+  if test x\"$PKG_CONFIG\" = \"x\"; then\n+    AC_MSG_ERROR(pkg-config not found.)\n   fi\n-  AC_SUBST(COMPARISON_TOOL_REORG_TESTS, 1)\n-else\n-  AC_SUBST(COMPARISON_TOOL_REORG_TESTS, 0)\n+  ])\n fi\n \n if test x$use_extended_rpc_tests != xno; then\n@@ -359,18 +399,12 @@ if test x$use_lcov = xyes; then\n   if test x$GCOV = x; then\n     AC_MSG_ERROR(\"lcov testing requested but gcov not found\")\n   fi\n-  if test x$JAVA = x; then\n-    AC_MSG_ERROR(\"lcov testing requested but java not found\")\n-  fi\n   if test x$PYTHON = x; then\n     AC_MSG_ERROR(\"lcov testing requested but python not found\")\n   fi\n   if test x$GENHTML = x; then\n     AC_MSG_ERROR(\"lcov testing requested but genhtml not found\")\n   fi\n-  if test x$use_comparison_tool = x; then\n-    AC_MSG_ERROR(\"lcov testing requested but comparison tool was not specified\")\n-  fi\n   LCOV=\"$LCOV --gcov-tool=$GCOV\"\n   AX_CHECK_COMPILE_FLAG([--coverage],[CXXFLAGS=\"$CXXFLAGS --coverage\"],\n     [AC_MSG_ERROR(\"lcov testing requested but --coverage flag does not work\")])\n@@ -409,6 +443,10 @@ AX_GCC_FUNC_ATTRIBUTE([dllimport])\n \n if test x$use_glibc_compat != xno; then\n \n+  #glibc absorbed clock_gettime in 2.17. librt (its previous location) is safe to link\n+  #in anyway for back-compat.\n+  AC_CHECK_LIB([rt],[clock_gettime],, AC_MSG_ERROR(lib missing))\n+\n   #__fdelt_chk's params and return type have changed from long unsigned int to long int.\n   # See which one is present here.\n   AC_MSG_CHECKING(__fdelt_chk type)\n@@ -422,7 +460,8 @@ if test x$use_glibc_compat != xno; then\n     [ fdelt_type=\"long int\"])\n   AC_MSG_RESULT($fdelt_type)\n   AC_DEFINE_UNQUOTED(FDELT_TYPE, $fdelt_type,[parameter and return value type for __fdelt_chk])\n-\n+else\n+  AC_SEARCH_LIBS([clock_gettime],[rt])\n fi\n \n if test x$TARGET_OS != xwindows; then\n@@ -443,6 +482,7 @@ if test x$use_hardening != xno; then\n \n   AX_CHECK_LINK_FLAG([[-Wl,--dynamicbase]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--dynamicbase\"])\n   AX_CHECK_LINK_FLAG([[-Wl,--nxcompat]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--nxcompat\"])\n+  AX_CHECK_LINK_FLAG([[-Wl,--high-entropy-va]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--high-entropy-va\"])\n   AX_CHECK_LINK_FLAG([[-Wl,-z,relro]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,-z,relro\"])\n   AX_CHECK_LINK_FLAG([[-Wl,-z,now]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,-z,now\"])\n \n@@ -469,6 +509,9 @@ AC_SEARCH_LIBS([inet_pton], [nsl resolv], [AC_DEFINE(HAVE_INET_PTON, 1, [Define\n \n AC_CHECK_DECLS([strnlen])\n \n+# Check for daemon(3), unrelated to --with-daemon (although used by it)\n+AC_CHECK_DECLS([daemon])\n+\n AC_CHECK_DECLS([le16toh, le32toh, le64toh, htole16, htole32, htole64, be16toh, be32toh, be64toh, htobe16, htobe32, htobe64],,,\n \t\t[#if HAVE_ENDIAN_H\n                  #include <endian.h>\n@@ -489,8 +532,6 @@ AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <sys/socket.h>]],\n  [ AC_MSG_RESULT(no)]\n )\n \n-AC_SEARCH_LIBS([clock_gettime],[rt])\n-\n AC_MSG_CHECKING([for visibility attribute])\n AC_LINK_IFELSE([AC_LANG_SOURCE([\n   int foo_def( void ) __attribute__((visibility(\"default\")));\n@@ -540,7 +581,7 @@ BITCOIN_QT_INIT\n dnl sets $bitcoin_enable_qt, $bitcoin_enable_qt_test, $bitcoin_enable_qt_dbus\n BITCOIN_QT_CONFIGURE([$use_pkgconfig], [qt5])\n \n-if test x$build_bitcoin_utils$build_bitcoind$bitcoin_enable_qt$use_tests = xnononono; then\n+if test x$build_bitcoin_utils$build_bitcoind$bitcoin_enable_qt$use_tests$use_bench = xnonononono; then\n     use_boost=no\n else\n     use_boost=yes\n@@ -619,6 +660,42 @@ if test x$use_boost = xyes; then\n \n BOOST_LIBS=\"$BOOST_LDFLAGS $BOOST_SYSTEM_LIB $BOOST_FILESYSTEM_LIB $BOOST_PROGRAM_OPTIONS_LIB $BOOST_THREAD_LIB $BOOST_CHRONO_LIB\"\n \n+\n+dnl If boost (prior to 1.57) was built without c++11, it emulated scoped enums\n+dnl using c++98 constructs. Unfortunately, this implementation detail leaked into\n+dnl the abi. This was fixed in 1.57.\n+\n+dnl When building against that installed version using c++11, the headers pick up\n+dnl on the native c++11 scoped enum support and enable it, however it will fail to\n+dnl link. This can be worked around by disabling c++11 scoped enums if linking will\n+dnl fail.\n+dnl BOOST_NO_SCOPED_ENUMS was changed to BOOST_NO_CXX11_SCOPED_ENUMS in 1.51.\n+\n+TEMP_LIBS=\"$LIBS\"\n+LIBS=\"$BOOST_LIBS $LIBS\"\n+TEMP_CPPFLAGS=\"$CPPFLAGS\"\n+CPPFLAGS=\"$CPPFLAGS $BOOST_CPPFLAGS\"\n+AC_MSG_CHECKING([for mismatched boost c++11 scoped enums])\n+AC_LINK_IFELSE([AC_LANG_PROGRAM([[\n+  #include \"boost/config.hpp\"\n+  #include \"boost/version.hpp\"\n+  #if !defined(BOOST_NO_SCOPED_ENUMS) && !defined(BOOST_NO_CXX11_SCOPED_ENUMS) && BOOST_VERSION < 105700\n+  #define BOOST_NO_SCOPED_ENUMS\n+  #define BOOST_NO_CXX11_SCOPED_ENUMS\n+  #define CHECK\n+  #endif\n+  #include \"boost/filesystem.hpp\"\n+  ]],[[\n+  #if defined(CHECK)\n+    boost::filesystem::copy_file(\"foo\", \"bar\");\n+  #else\n+    choke;\n+  #endif\n+  ]])],\n+  [AC_MSG_RESULT(mismatched); BOOST_CPPFLAGS=\"$BOOST_CPPFLAGS -DBOOST_NO_SCOPED_ENUMS -DBOOST_NO_CXX11_SCOPED_ENUMS\"], [AC_MSG_RESULT(ok)])\n+LIBS=\"$TEMP_LIBS\"\n+CPPFLAGS=\"$TEMP_CPPFLAGS\"\n+\n dnl Boost >= 1.50 uses sleep_for rather than the now-deprecated sleep, however\n dnl it was broken from 1.50 to 1.52 when backed by nanosleep. Use sleep_for if\n dnl a working version is available, else fall back to sleep. sleep was removed\n@@ -673,12 +750,7 @@ fi\n fi\n \n if test x$use_pkgconfig = xyes; then\n-\n-  if test x\"$PKG_CONFIG\" = \"x\"; then\n-    AC_MSG_ERROR(pkg-config not found.)\n-  fi\n-\n-  : #NOP\n+  : dnl\n   m4_ifdef(\n     [PKG_CHECK_MODULES],\n     [\n@@ -735,20 +807,69 @@ else\n     AC_DEFINE_UNQUOTED([ENABLE_ZMQ],[0],[Define to 1 to enable ZMQ functions])\n   fi\n \n+  if test \"x$use_zmq\" = \"xyes\"; then\n+    dnl Assume libzmq was built for static linking\n+    case $host in\n+      *mingw*)\n+        ZMQ_CFLAGS=\"$ZMQ_CFLAGS -DZMQ_STATIC\"\n+      ;;\n+    esac\n+  fi\n+\n   BITCOIN_QT_CHECK(AC_CHECK_LIB([protobuf] ,[main],[PROTOBUF_LIBS=-lprotobuf], BITCOIN_QT_FAIL(libprotobuf not found)))\n   if test x$use_qr != xno; then\n     BITCOIN_QT_CHECK([AC_CHECK_LIB([qrencode], [main],[QR_LIBS=-lqrencode], [have_qrencode=no])])\n     BITCOIN_QT_CHECK([AC_CHECK_HEADER([qrencode.h],, have_qrencode=no)])\n   fi\n fi\n \n-CXXFLAGS_TEMP=\"$CXXFLAGS\"\n-LIBS_TEMP=\"$LIBS\"\n-CXXFLAGS=\"$CXXFLAGS $SSL_CFLAGS $CRYPTO_CFLAGS\"\n-LIBS=\"$LIBS $SSL_LIBS $CRYPTO_LIBS\"\n-AC_CHECK_HEADER([openssl/ec.h],, AC_MSG_ERROR(OpenSSL ec header missing),)\n-CXXFLAGS=\"$CXXFLAGS_TEMP\"\n-LIBS=\"$LIBS_TEMP\"\n+dnl univalue check\n+\n+need_bundled_univalue=yes\n+\n+if test x$build_bitcoin_utils$build_bitcoind$bitcoin_enable_qt$use_tests$use_bench = xnonononono; then\n+  need_bundled_univalue=no\n+else\n+\n+if test x$system_univalue != xno ; then\n+  found_univalue=no\n+  if test x$use_pkgconfig = xyes; then\n+    : #NOP\n+    m4_ifdef(\n+      [PKG_CHECK_MODULES],\n+      [\n+        PKG_CHECK_MODULES([UNIVALUE],[libunivalue],[found_univalue=yes],[true])\n+      ]\n+    )\n+  else\n+    AC_CHECK_HEADER([univalue.h],[\n+      AC_CHECK_LIB([univalue],  [main],[\n+        UNIVALUE_LIBS=-lunivalue\n+        found_univalue=yes\n+      ],[true])\n+    ],[true])\n+  fi\n+\n+  if test x$found_univalue = xyes ; then\n+    system_univalue=yes\n+    need_bundled_univalue=no\n+  elif test x$system_univalue = xyes ; then\n+    AC_MSG_ERROR([univalue not found])\n+  else\n+    system_univalue=no\n+  fi\n+fi\n+\n+if test x$need_bundled_univalue = xyes ; then\n+  UNIVALUE_CFLAGS='-I$(srcdir)/univalue/include'\n+  UNIVALUE_LIBS='univalue/libunivalue.la'\n+fi\n+\n+fi\n+\n+AM_CONDITIONAL([EMBEDDED_UNIVALUE],[test x$need_bundled_univalue = xyes])\n+AC_SUBST(UNIVALUE_CFLAGS)\n+AC_SUBST(UNIVALUE_LIBS)\n \n BITCOIN_QT_PATH_PROGS([PROTOC], [protoc],$protoc_bin_path)\n \n@@ -827,8 +948,8 @@ else\n fi\n \n dnl these are only used when qt is enabled\n+BUILD_TEST_QT=\"\"\n if test x$bitcoin_enable_qt != xno; then\n-  BUILD_QT=qt\n   dnl enable dbus support\n   AC_MSG_CHECKING([whether to build GUI with support for D-Bus])\n   if test x$bitcoin_enable_qt_dbus != xno; then\n@@ -858,9 +979,9 @@ if test x$bitcoin_enable_qt != xno; then\n   fi\n \n   AC_MSG_CHECKING([whether to build test_bitcoin-qt])\n-  if test x$use_tests$bitcoin_enable_qt_test = xyesyes; then\n+  if test x$use_gui_tests$bitcoin_enable_qt_test = xyesyes; then\n     AC_MSG_RESULT([yes])\n-    BUILD_TEST_QT=\"test\"\n+    BUILD_TEST_QT=\"yes\"\n   else\n     AC_MSG_RESULT([no])\n   fi\n@@ -871,9 +992,10 @@ AM_CONDITIONAL([ENABLE_ZMQ], [test \"x$use_zmq\" = \"xyes\"])\n AC_MSG_CHECKING([whether to build test_bitcoin])\n if test x$use_tests = xyes; then\n   AC_MSG_RESULT([yes])\n-  BUILD_TEST=\"test\"\n+  BUILD_TEST=\"yes\"\n else\n   AC_MSG_RESULT([no])\n+  BUILD_TEST=\"\"\n fi\n \n AC_MSG_CHECKING([whether to reduce exports])\n@@ -883,36 +1005,46 @@ else\n   AC_MSG_RESULT([no])\n fi\n \n-if test x$build_bitcoin_utils$build_bitcoin_libs$build_bitcoind$bitcoin_enable_qt$use_tests = xnonononono; then\n-  AC_MSG_ERROR([No targets! Please specify at least one of: --with-utils --with-libs --with-daemon --with-gui or --enable-tests])\n+if test x$build_bitcoin_utils$build_bitcoin_libs$build_bitcoind$bitcoin_enable_qt$use_bench$use_tests = xnononononono; then\n+  AC_MSG_ERROR([No targets! Please specify at least one of: --with-utils --with-libs --with-daemon --with-gui --enable-bench or --enable-tests])\n fi\n \n AM_CONDITIONAL([TARGET_DARWIN], [test x$TARGET_OS = xdarwin])\n AM_CONDITIONAL([BUILD_DARWIN], [test x$BUILD_OS = xdarwin])\n AM_CONDITIONAL([TARGET_WINDOWS], [test x$TARGET_OS = xwindows])\n AM_CONDITIONAL([ENABLE_WALLET],[test x$enable_wallet = xyes])\n-AM_CONDITIONAL([ENABLE_TESTS],[test x$use_tests = xyes])\n+AM_CONDITIONAL([ENABLE_TESTS],[test x$BUILD_TEST = xyes])\n AM_CONDITIONAL([ENABLE_QT],[test x$bitcoin_enable_qt = xyes])\n-AM_CONDITIONAL([ENABLE_QT_TESTS],[test x$use_tests$bitcoin_enable_qt_test = xyesyes])\n+AM_CONDITIONAL([ENABLE_QT_TESTS],[test x$BUILD_TEST_QT = xyes])\n AM_CONDITIONAL([ENABLE_BENCH],[test x$use_bench = xyes])\n AM_CONDITIONAL([USE_QRCODE], [test x$use_qr = xyes])\n AM_CONDITIONAL([USE_LCOV],[test x$use_lcov = xyes])\n-AM_CONDITIONAL([USE_COMPARISON_TOOL],[test x$use_comparison_tool != xno])\n-AM_CONDITIONAL([USE_COMPARISON_TOOL_REORG_TESTS],[test x$use_comparison_tool_reorg_test != xno])\n AM_CONDITIONAL([GLIBC_BACK_COMPAT],[test x$use_glibc_compat = xyes])\n+AM_CONDITIONAL([HARDEN],[test x$use_hardening = xyes])\n \n AC_DEFINE(CLIENT_VERSION_MAJOR, _CLIENT_VERSION_MAJOR, [Major version])\n AC_DEFINE(CLIENT_VERSION_MINOR, _CLIENT_VERSION_MINOR, [Minor version])\n AC_DEFINE(CLIENT_VERSION_REVISION, _CLIENT_VERSION_REVISION, [Build revision])\n AC_DEFINE(CLIENT_VERSION_BUILD, _CLIENT_VERSION_BUILD, [Version Build])\n AC_DEFINE(CLIENT_VERSION_IS_RELEASE, _CLIENT_VERSION_IS_RELEASE, [Version is release])\n-AC_DEFINE(COPYRIGHT_YEAR, _COPYRIGHT_YEAR, [Version is release])\n+AC_DEFINE(COPYRIGHT_YEAR, _COPYRIGHT_YEAR, [Copyright year])\n+AC_DEFINE(COPYRIGHT_HOLDERS, \"_COPYRIGHT_HOLDERS\", [Copyright holder(s) before %s replacement])\n+AC_DEFINE(COPYRIGHT_HOLDERS_SUBSTITUTION, \"_COPYRIGHT_HOLDERS_SUBSTITUTION\", [Replacement for %s in copyright holders string])\n+define(_COPYRIGHT_HOLDERS_FINAL, [patsubst(_COPYRIGHT_HOLDERS, [%s], [_COPYRIGHT_HOLDERS_SUBSTITUTION])])\n+AC_DEFINE(COPYRIGHT_HOLDERS_FINAL, \"_COPYRIGHT_HOLDERS_FINAL\", [Copyright holder(s)])\n AC_SUBST(CLIENT_VERSION_MAJOR, _CLIENT_VERSION_MAJOR)\n AC_SUBST(CLIENT_VERSION_MINOR, _CLIENT_VERSION_MINOR)\n AC_SUBST(CLIENT_VERSION_REVISION, _CLIENT_VERSION_REVISION)\n AC_SUBST(CLIENT_VERSION_BUILD, _CLIENT_VERSION_BUILD)\n AC_SUBST(CLIENT_VERSION_IS_RELEASE, _CLIENT_VERSION_IS_RELEASE)\n AC_SUBST(COPYRIGHT_YEAR, _COPYRIGHT_YEAR)\n+AC_SUBST(COPYRIGHT_HOLDERS, \"_COPYRIGHT_HOLDERS\")\n+AC_SUBST(COPYRIGHT_HOLDERS_SUBSTITUTION, \"_COPYRIGHT_HOLDERS_SUBSTITUTION\")\n+AC_SUBST(COPYRIGHT_HOLDERS_FINAL, \"_COPYRIGHT_HOLDERS_FINAL\")\n+AC_SUBST(BITCOIN_DAEMON_NAME)\n+AC_SUBST(BITCOIN_GUI_NAME)\n+AC_SUBST(BITCOIN_CLI_NAME)\n+AC_SUBST(BITCOIN_TX_NAME)\n \n AC_SUBST(RELDFLAGS)\n AC_SUBST(HARDENED_CXXFLAGS)\n@@ -926,14 +1058,20 @@ AC_SUBST(USE_QRCODE)\n AC_SUBST(BOOST_LIBS)\n AC_SUBST(TESTDEFS)\n AC_SUBST(LEVELDB_TARGET_FLAGS)\n-AC_SUBST(BUILD_TEST)\n-AC_SUBST(BUILD_QT)\n-AC_SUBST(BUILD_TEST_QT)\n AC_SUBST(MINIUPNPC_CPPFLAGS)\n AC_SUBST(MINIUPNPC_LIBS)\n-AC_CONFIG_FILES([Makefile src/Makefile share/setup.nsi share/qt/Info.plist src/test/buildenv.py])\n+AC_SUBST(CRYPTO_LIBS)\n+AC_SUBST(SSL_LIBS)\n+AC_SUBST(EVENT_LIBS)\n+AC_SUBST(EVENT_PTHREADS_LIBS)\n+AC_SUBST(ZMQ_LIBS)\n+AC_SUBST(PROTOBUF_LIBS)\n+AC_SUBST(QR_LIBS)\n+AC_CONFIG_FILES([Makefile src/Makefile doc/man/Makefile share/setup.nsi share/qt/Info.plist src/test/buildenv.py])\n AC_CONFIG_FILES([qa/pull-tester/run-bitcoind-for-test.sh],[chmod +x qa/pull-tester/run-bitcoind-for-test.sh])\n AC_CONFIG_FILES([qa/pull-tester/tests_config.py],[chmod +x qa/pull-tester/tests_config.py])\n+AC_CONFIG_FILES([contrib/devtools/split-debug.sh],[chmod +x contrib/devtools/split-debug.sh])\n+AC_CONFIG_LINKS([qa/pull-tester/rpc-tests.py:qa/pull-tester/rpc-tests.py])\n \n dnl boost's m4 checks do something really nasty: they export these vars. As a\n dnl result, they leak into secp256k1's configure and crazy things happen.\n@@ -958,8 +1096,12 @@ PKGCONFIG_LIBDIR_TEMP=\"$PKG_CONFIG_LIBDIR\"\n unset PKG_CONFIG_LIBDIR\n PKG_CONFIG_LIBDIR=\"$PKGCONFIG_LIBDIR_TEMP\"\n \n+if test x$need_bundled_univalue = xyes; then\n+  AC_CONFIG_SUBDIRS([src/univalue])\n+fi\n+\n ac_configure_args=\"${ac_configure_args} --disable-shared --with-pic --with-bignum=no --enable-module-recovery\"\n-AC_CONFIG_SUBDIRS([src/secp256k1 src/univalue])\n+AC_CONFIG_SUBDIRS([src/secp256k1])\n \n AC_OUTPUT\n "
      },
      {
        "sha": "ab5f57587e0d97560c7268d44d8649e3717104f7",
        "filename": "contrib/README.md",
        "status": "modified",
        "additions": 13,
        "deletions": 19,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/README.md?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -1,20 +1,12 @@\n-Wallet Tools\n----------------------\n-\n-### [SpendFrom](/contrib/spendfrom) ###\n-\n-Use the raw transactions API to send coins received on a particular\n-address (or addresses).\n-\n Repository Tools\n ---------------------\n \n ### [Developer tools](/contrib/devtools) ###\n Specific tools for developers working on this repository.\n-Contains the script `github-merge.sh` for merging github pull requests securely and signing them using GPG.\n+Contains the script `github-merge.py` for merging github pull requests securely and signing them using GPG.\n \n ### [Verify-Commits](/contrib/verify-commits) ###\n-Tool to verify that every merge commit was signed by a developer using the above `github-merge.sh` script.\n+Tool to verify that every merge commit was signed by a developer using the above `github-merge.py` script.\n \n ### [Linearize](/contrib/linearize) ###\n Construct a linear, no-fork, best version of the blockchain.\n@@ -34,23 +26,25 @@ Contains files used to package bitcoind/bitcoin-qt\n for Debian-based Linux systems. If you compile bitcoind/bitcoin-qt yourself, there are some useful files here.\n \n ### [Gitian-descriptors](/contrib/gitian-descriptors) ###\n-Gavin's notes on getting gitian builds up and running using KVM.\n+Notes on getting Gitian builds up and running using KVM.\n \n-### [Gitian-downloader](/contrib/gitian-downloader)\n-Various PGP files of core developers. \n+### [Gitian-keys](/contrib/gitian-keys)\n+PGP keys used for signing Bitcoin Core [Gitian release](/doc/release-process.md) results.\n \n ### [MacDeploy](/contrib/macdeploy) ###\n Scripts and notes for Mac builds. \n \n+### [RPM](/contrib/rpm) ###\n+RPM spec file for building bitcoin-core on RPM based distributions\n+\n+### [Gitian-build](/contrib/gitian-build.sh) ###\n+Script for running full gitian builds.\n+\n Test and Verify Tools \n ---------------------\n \n ### [TestGen](/contrib/testgen) ###\n Utilities to generate test vectors for the data-driven Bitcoin tests.\n \n-### [Test Patches](/contrib/test-patches) ###\n-These patches are applied when the automated pull-tester\n-tests each pull and when master is tested using jenkins.\n-\n-### [Verify SF Binaries](/contrib/verifysfbinaries) ###\n-This script attempts to download and verify the signature file SHA256SUMS.asc from SourceForge.\n+### [Verify Binaries](/contrib/verifybinaries) ###\n+This script attempts to download and verify the signature file SHA256SUMS.asc from bitcoin.org."
      },
      {
        "sha": "732981fe7c5d1cb447ee90aac1c8ffb96ab24636",
        "filename": "contrib/bitcoin-cli.bash-completion",
        "status": "added",
        "additions": 154,
        "deletions": 0,
        "changes": 154,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/bitcoin-cli.bash-completion",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/bitcoin-cli.bash-completion",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/bitcoin-cli.bash-completion?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -0,0 +1,154 @@\n+# bash programmable completion for bitcoin-cli(1)\n+# Copyright (c) 2012-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+# call $bitcoin-cli for RPC\n+_bitcoin_rpc() {\n+    # determine already specified args necessary for RPC\n+    local rpcargs=()\n+    for i in ${COMP_LINE}; do\n+        case \"$i\" in\n+            -conf=*|-datadir=*|-regtest|-rpc*|-testnet)\n+                rpcargs=( \"${rpcargs[@]}\" \"$i\" )\n+                ;;\n+        esac\n+    done\n+    $bitcoin_cli \"${rpcargs[@]}\" \"$@\"\n+}\n+\n+# Add wallet accounts to COMPREPLY\n+_bitcoin_accounts() {\n+    local accounts\n+    accounts=$(_bitcoin_rpc listaccounts | awk -F '\"' '{ print $2 }')\n+    COMPREPLY=( \"${COMPREPLY[@]}\" $( compgen -W \"$accounts\" -- \"$cur\" ) )\n+}\n+\n+_bitcoin_cli() {\n+    local cur prev words=() cword\n+    local bitcoin_cli\n+\n+    # save and use original argument to invoke bitcoin-cli for -help, help and RPC\n+    # as bitcoin-cli might not be in $PATH\n+    bitcoin_cli=\"$1\"\n+\n+    COMPREPLY=()\n+    _get_comp_words_by_ref -n = cur prev words cword\n+\n+    if ((cword > 5)); then\n+        case ${words[cword-5]} in\n+            sendtoaddress)\n+                COMPREPLY=( $( compgen -W \"true false\" -- \"$cur\" ) )\n+                return 0\n+                ;;\n+        esac\n+    fi\n+\n+    if ((cword > 4)); then\n+        case ${words[cword-4]} in\n+            importaddress|listtransactions|setban)\n+                COMPREPLY=( $( compgen -W \"true false\" -- \"$cur\" ) )\n+                return 0\n+                ;;\n+            signrawtransaction)\n+                COMPREPLY=( $( compgen -W \"ALL NONE SINGLE ALL|ANYONECANPAY NONE|ANYONECANPAY SINGLE|ANYONECANPAY\" -- \"$cur\" ) )\n+                return 0\n+                ;;\n+        esac\n+    fi\n+\n+    if ((cword > 3)); then\n+        case ${words[cword-3]} in\n+            addmultisigaddress)\n+                _bitcoin_accounts\n+                return 0\n+                ;;\n+            getbalance|gettxout|importaddress|importpubkey|importprivkey|listreceivedbyaccount|listreceivedbyaddress|listsinceblock)\n+                COMPREPLY=( $( compgen -W \"true false\" -- \"$cur\" ) )\n+                return 0\n+                ;;\n+        esac\n+    fi\n+\n+    if ((cword > 2)); then\n+        case ${words[cword-2]} in\n+            addnode)\n+                COMPREPLY=( $( compgen -W \"add remove onetry\" -- \"$cur\" ) )\n+                return 0\n+                ;;\n+            setban)\n+                COMPREPLY=( $( compgen -W \"add remove\" -- \"$cur\" ) )\n+                return 0\n+                ;;\n+            fundrawtransaction|getblock|getblockheader|getmempoolancestors|getmempooldescendants|getrawtransaction|gettransaction|listaccounts|listreceivedbyaccount|listreceivedbyaddress|sendrawtransaction)\n+                COMPREPLY=( $( compgen -W \"true false\" -- \"$cur\" ) )\n+                return 0\n+                ;;\n+            move|setaccount)\n+                _bitcoin_accounts\n+                return 0\n+                ;;\n+        esac\n+    fi\n+\n+    case \"$prev\" in\n+        backupwallet|dumpwallet|importwallet)\n+            _filedir\n+            return 0\n+            ;;\n+        getaddednodeinfo|getrawmempool|lockunspent|setgenerate)\n+            COMPREPLY=( $( compgen -W \"true false\" -- \"$cur\" ) )\n+            return 0\n+            ;;\n+        getaccountaddress|getaddressesbyaccount|getbalance|getnewaddress|getreceivedbyaccount|listtransactions|move|sendfrom|sendmany)\n+            _bitcoin_accounts\n+            return 0\n+            ;;\n+    esac\n+\n+    case \"$cur\" in\n+        -conf=*)\n+            cur=\"${cur#*=}\"\n+            _filedir\n+            return 0\n+            ;;\n+        -datadir=*)\n+            cur=\"${cur#*=}\"\n+            _filedir -d\n+            return 0\n+            ;;\n+        -*=*)\t# prevent nonsense completions\n+            return 0\n+            ;;\n+        *)\n+            local helpopts commands\n+\n+            # only parse -help if senseful\n+            if [[ -z \"$cur\" || \"$cur\" =~ ^- ]]; then\n+                helpopts=$($bitcoin_cli -help 2>&1 | awk '$1 ~ /^-/ { sub(/=.*/, \"=\"); print $1 }' )\n+            fi\n+\n+            # only parse help if senseful\n+            if [[ -z \"$cur\" || \"$cur\" =~ ^[a-z] ]]; then\n+                commands=$(_bitcoin_rpc help 2>/dev/null | awk '$1 ~ /^[a-z]/ { print $1; }')\n+            fi\n+\n+            COMPREPLY=( $( compgen -W \"$helpopts $commands\" -- \"$cur\" ) )\n+\n+            # Prevent space if an argument is desired\n+            if [[ $COMPREPLY == *= ]]; then\n+                compopt -o nospace\n+            fi\n+            return 0\n+            ;;\n+    esac\n+} &&\n+complete -F _bitcoin_cli bitcoin-cli\n+\n+# Local variables:\n+# mode: shell-script\n+# sh-basic-offset: 4\n+# sh-indent-comment: t\n+# indent-tabs-mode: nil\n+# End:\n+# ex: ts=4 sw=4 et filetype=sh"
      },
      {
        "sha": "a83d2979ed3a8f11edea358937e8d5d359d58b4c",
        "filename": "contrib/bitcoin-tx.bash-completion",
        "status": "added",
        "additions": 57,
        "deletions": 0,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/bitcoin-tx.bash-completion",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/bitcoin-tx.bash-completion",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/bitcoin-tx.bash-completion?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -0,0 +1,57 @@\n+# bash programmable completion for bitcoin-tx(1)\n+# Copyright (c) 2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+_bitcoin_tx() {\n+    local cur prev words=() cword\n+    local bitcoin_tx\n+\n+    # save and use original argument to invoke bitcoin-tx for -help\n+    # it might not be in $PATH\n+    bitcoin_tx=\"$1\"\n+\n+    COMPREPLY=()\n+    _get_comp_words_by_ref -n =: cur prev words cword\n+\n+    case \"$cur\" in\n+        load=*:*)\n+            cur=\"${cur#load=*:}\"\n+            _filedir\n+            return 0\n+            ;;\n+        *=*)\t# prevent attempts to complete other arguments\n+            return 0\n+            ;;\n+    esac\n+\n+    if [[ \"$cword\" == 1 || ( \"$prev\" != \"-create\" && \"$prev\" == -* ) ]]; then\n+        # only options (or an uncompletable hex-string) allowed\n+        # parse bitcoin-tx -help for options\n+        local helpopts\n+        helpopts=$($bitcoin_tx -help | sed -e '/^  -/ p' -e d )\n+        COMPREPLY=( $( compgen -W \"$helpopts\" -- \"$cur\" ) )\n+    else\n+        # only commands are allowed\n+        # parse -help for commands\n+        local helpcmds\n+        helpcmds=$($bitcoin_tx -help | sed -e '1,/Commands:/d' -e 's/=.*/=/' -e '/^  [a-z]/ p' -e d )\n+        COMPREPLY=( $( compgen -W \"$helpcmds\" -- \"$cur\" ) )\n+    fi\n+\n+    # Prevent space if an argument is desired\n+    if [[ $COMPREPLY == *= ]]; then\n+        compopt -o nospace\n+    fi\n+\n+    return 0\n+} &&\n+complete -F _bitcoin_tx bitcoin-tx\n+\n+# Local variables:\n+# mode: shell-script\n+# sh-basic-offset: 4\n+# sh-indent-comment: t\n+# indent-tabs-mode: nil\n+# End:\n+# ex: ts=4 sw=4 et filetype=sh"
      },
      {
        "sha": "af87e97d80690c969db4de7a5b4cb9ea8b330cb8",
        "filename": "contrib/bitcoind.bash-completion",
        "status": "modified",
        "additions": 11,
        "deletions": 100,
        "changes": 111,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/bitcoind.bash-completion",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/bitcoind.bash-completion",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/bitcoind.bash-completion?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -1,102 +1,21 @@\n-# bash programmable completion for bitcoind(1) and bitcoin-cli(1)\n-# Copyright (c) 2012,2014 Christian von Roques <roques@mti.ag>\n+# bash programmable completion for bitcoind(1) and bitcoin-qt(1)\n+# Copyright (c) 2012-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-have bitcoind && {\n-\n-# call $bitcoind for RPC\n-_bitcoin_rpc() {\n-    # determine already specified args necessary for RPC\n-    local rpcargs=()\n-    for i in ${COMP_LINE}; do\n-        case \"$i\" in\n-            -conf=*|-proxy*|-rpc*)\n-                rpcargs=( \"${rpcargs[@]}\" \"$i\" )\n-                ;;\n-        esac\n-    done\n-    $bitcoind \"${rpcargs[@]}\" \"$@\"\n-}\n-\n-# Add bitcoin accounts to COMPREPLY\n-_bitcoin_accounts() {\n-    local accounts\n-    accounts=$(_bitcoin_rpc listaccounts | awk '/\".*\"/ { a=$1; gsub(/\"/, \"\", a); print a}')\n-    COMPREPLY=( \"${COMPREPLY[@]}\" $( compgen -W \"$accounts\" -- \"$cur\" ) )\n-}\n-\n _bitcoind() {\n     local cur prev words=() cword\n     local bitcoind\n \n-    # save and use original argument to invoke bitcoind\n-    # bitcoind might not be in $PATH\n+    # save and use original argument to invoke bitcoind for -help\n+    # it might not be in $PATH\n     bitcoind=\"$1\"\n \n     COMPREPLY=()\n     _get_comp_words_by_ref -n = cur prev words cword\n \n-    if ((cword > 4)); then\n-        case ${words[cword-4]} in\n-            listtransactions)\n-                COMPREPLY=( $( compgen -W \"true false\" -- \"$cur\" ) )\n-                return 0\n-                ;;\n-            signrawtransaction)\n-                COMPREPLY=( $( compgen -W \"ALL NONE SINGLE ALL|ANYONECANPAY NONE|ANYONECANPAY SINGLE|ANYONECANPAY\" -- \"$cur\" ) )\n-                return 0\n-                ;;\n-        esac\n-    fi\n-\n-    if ((cword > 3)); then\n-        case ${words[cword-3]} in\n-            addmultisigaddress)\n-                _bitcoin_accounts\n-                return 0\n-                ;;\n-            getbalance|gettxout|importaddress|importprivkey|listreceivedbyaccount|listreceivedbyaddress|listsinceblock)\n-                COMPREPLY=( $( compgen -W \"true false\" -- \"$cur\" ) )\n-                return 0\n-                ;;\n-        esac\n-    fi\n-\n-    if ((cword > 2)); then\n-        case ${words[cword-2]} in\n-            addnode)\n-                COMPREPLY=( $( compgen -W \"add remove onetry\" -- \"$cur\" ) )\n-                return 0\n-                ;;\n-            getblock|getrawtransaction|gettransaction|listaccounts|listreceivedbyaccount|listreceivedbyaddress|sendrawtransaction)\n-                COMPREPLY=( $( compgen -W \"true false\" -- \"$cur\" ) )\n-                return 0\n-                ;;\n-            move|setaccount)\n-                _bitcoin_accounts\n-                return 0\n-                ;;\n-        esac\n-    fi\n-\n-    case \"$prev\" in\n-        backupwallet|dumpwallet|importwallet)\n-            _filedir\n-            return 0\n-            ;;\n-        getmempool|lockunspent|setgenerate)\n-            COMPREPLY=( $( compgen -W \"true false\" -- \"$cur\" ) )\n-            return 0\n-            ;;\n-        getaccountaddress|getaddressesbyaccount|getbalance|getnewaddress|getreceivedbyaccount|listtransactions|move|sendfrom|sendmany)\n-            _bitcoin_accounts\n-            return 0\n-            ;;\n-    esac\n-\n     case \"$cur\" in\n-        -conf=*|-pid=*|-loadblock=*|-wallet=*)\n+        -conf=*|-pid=*|-loadblock=*|-rootcertificates=*|-rpccookiefile=*|-wallet=*)\n             cur=\"${cur#*=}\"\n             _filedir\n             return 0\n@@ -110,31 +29,23 @@ _bitcoind() {\n             return 0\n             ;;\n         *)\n-            local helpopts commands\n \n-            # only parse --help if senseful\n+            # only parse -help if senseful\n             if [[ -z \"$cur\" || \"$cur\" =~ ^- ]]; then\n-                helpopts=$($bitcoind --help 2>&1 | awk '$1 ~ /^-/ { sub(/=.*/, \"=\"); print $1 }' )\n+                local helpopts\n+                helpopts=$($bitcoind -help 2>&1 | awk '$1 ~ /^-/ { sub(/=.*/, \"=\"); print $1 }' )\n+                COMPREPLY=( $( compgen -W \"$helpopts\" -- \"$cur\" ) )\n             fi\n \n-            # only parse help if senseful\n-            if [[ -z \"$cur\" || \"$cur\" =~ ^[a-z] ]]; then\n-                commands=$(_bitcoin_rpc help 2>/dev/null | awk '$1 ~ /^[a-z]/ { print $1; }')\n-            fi\n-\n-            COMPREPLY=( $( compgen -W \"$helpopts $commands\" -- \"$cur\" ) )\n-\n             # Prevent space if an argument is desired\n             if [[ $COMPREPLY == *= ]]; then\n                 compopt -o nospace\n             fi\n             return 0\n             ;;\n     esac\n-}\n-\n-complete -F _bitcoind bitcoind bitcoin-cli\n-}\n+} &&\n+complete -F _bitcoind bitcoind bitcoin-qt\n \n # Local variables:\n # mode: shell-script"
      },
      {
        "sha": "9a3cc31c09a8fb719315a546fb2144d423ade038",
        "filename": "contrib/debian/bitcoin-qt.manpages",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/debian/bitcoin-qt.manpages",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/debian/bitcoin-qt.manpages",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/bitcoin-qt.manpages?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -0,0 +1 @@\n+doc/man/bitcoin-qt.1"
      },
      {
        "sha": "7acb0b0aea668dd16129434813d05c0306617b68",
        "filename": "contrib/debian/bitcoin-tx.bash-completion",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/debian/bitcoin-tx.bash-completion",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/debian/bitcoin-tx.bash-completion",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/bitcoin-tx.bash-completion?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -0,0 +1 @@\n+contrib/bitcoin-tx.bash-completion\tbitcoin-tx"
      },
      {
        "sha": "861d49d07022e2468fca7c747d91b7fe4322e1c7",
        "filename": "contrib/debian/bitcoin-tx.manpages",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/debian/bitcoin-tx.manpages",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/debian/bitcoin-tx.manpages",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/bitcoin-tx.manpages?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -0,0 +1 @@\n+doc/man/bitcoin-tx.1"
      },
      {
        "sha": "5c69d78fbb0fc73017167bab3d8a1c6a78e85ed9",
        "filename": "contrib/debian/bitcoind.bash-completion",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/debian/bitcoind.bash-completion",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/debian/bitcoind.bash-completion",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/bitcoind.bash-completion?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -1 +1,2 @@\n contrib/bitcoind.bash-completion\tbitcoind\n+contrib/bitcoin-cli.bash-completion\tbitcoin-cli"
      },
      {
        "sha": "bab644ece1369ba4d8896ef507add76aae617d8e",
        "filename": "contrib/debian/bitcoind.manpages",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/debian/bitcoind.manpages",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/debian/bitcoind.manpages",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/bitcoind.manpages?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -1,3 +1,2 @@\n-debian/manpages/bitcoind.1\n-debian/manpages/bitcoin.conf.5\n-debian/manpages/bitcoin-cli.1\n+doc/man/bitcoind.1\n+doc/man/bitcoin-cli.1"
      },
      {
        "sha": "fce6bc0118f177cd58369825ec129bcd1fed819d",
        "filename": "contrib/debian/control",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/debian/control",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/debian/control",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/control?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -23,7 +23,7 @@ Build-Depends: debhelper,\n  libprotobuf-dev, protobuf-compiler,\n  python\n Standards-Version: 3.9.2\n-Homepage: https://www.bitcoin.org/\n+Homepage: https://bitcoincore.org/\n Vcs-Git: git://github.com/bitcoin/bitcoin.git\n Vcs-Browser: https://github.com/bitcoin/bitcoin\n "
      },
      {
        "sha": "5cac6e533c5f3f75215c7f48e97a5add086ece08",
        "filename": "contrib/debian/copyright",
        "status": "modified",
        "additions": 8,
        "deletions": 5,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/debian/copyright",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/debian/copyright",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/copyright?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -5,7 +5,7 @@ Upstream-Contact: Satoshi Nakamoto <satoshin@gmx.com>\n Source: https://github.com/bitcoin/bitcoin\n \n Files: *\n-Copyright: 2009-2015, Bitcoin Core Developers\n+Copyright: 2009-2016, Bitcoin Core Developers\n License: Expat\n Comment: The Bitcoin Core Developers encompasses the current developers listed on bitcoin.org,\n          as well as the numerous contributors to the project.\n@@ -15,12 +15,9 @@ Copyright: 2010-2011, Jonas Smedegaard <dr@jones.dk>\n            2011, Matt Corallo <matt@bluematt.me>\n License: GPL-2+\n \n-Files: debian/manpages/*\n-Copyright: Micah Anderson <micah@debian.org>\n-License: GPL-3+\n-\n Files: src/qt/res/icons/add.png\n        src/qt/res/icons/address-book.png\n+       src/qt/res/icons/chevron.png\n        src/qt/res/icons/configure.png\n        src/qt/res/icons/debugwindow.png\n        src/qt/res/icons/edit.png\n@@ -56,6 +53,12 @@ Comment: Inspired by Stephan Hutchings Typicons\n \n Files: src/qt/res/icons/tx_mined.png\n        src/qt/res/src/mine.svg\n+       src/qt/res/icons/fontbigger.png\n+       src/qt/res/icons/fontsmaller.png\n+       src/qt/res/icons/hd_disabled.png\n+       src/qt/res/src/hd_disabled.svg\n+       src/qt/res/icons/hd_enabled.png\n+       src/qt/res/src/hd_enabled.svg\n Copyright: Jonas Schnelli\n License: Expat\n Comment:"
      },
      {
        "sha": "154b45873940c9d23b8d1fe96d516ee7b5bdf7f0",
        "filename": "contrib/debian/manpages/bitcoin-cli.1",
        "status": "removed",
        "additions": 0,
        "deletions": 45,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9df179d2e3abdee7d1f255d9be17c8b72dff06a/contrib/debian/manpages/bitcoin-cli.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9df179d2e3abdee7d1f255d9be17c8b72dff06a/contrib/debian/manpages/bitcoin-cli.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/manpages/bitcoin-cli.1?ref=e9df179d2e3abdee7d1f255d9be17c8b72dff06a",
        "patch": "@@ -1,45 +0,0 @@\n-.TH BITCOIN-CLI \"1\" \"February 2015\" \"bitcoin-cli 0.10\" \n-.SH NAME\n-bitcoin-cli \\- a remote procedure call client for Bitcoin Core. \n-.SH SYNOPSIS\n-bitcoin-cli [options] <command> [params] \\- Send command to Bitcoin Core. \n-.TP\n-bitcoin-cli [options] help \\- Asks Bitcoin Core for a list of supported commands.\n-.SH DESCRIPTION\n-This manual page documents the bitcoin-cli program. bitcoin-cli is an RPC client used to send commands to Bitcoin Core.\n-\n-.SH OPTIONS\n-.TP\n-\\fB\\-?\\fR\n-Show the help message.\n-.TP\n-\\fB\\-conf=\\fR<file>\n-Specify configuration file (default: bitcoin.conf).\n-.TP\n-\\fB\\-datadir=\\fR<dir>\n-Specify data directory.\n-.TP\n-\\fB\\-testnet\\fR\n-Connect to a Bitcoin Core instance running in testnet mode.\n-.TP\n-\\fB\\-regtest\\fR\n-Connect to a Bitcoin Core instance running in regtest mode (see documentation for -regtest on bitcoind).\n-.TP\n-\\fB\\-rpcuser=\\fR<user>\n-Username for JSON\\-RPC connections.\n-.TP\n-\\fB\\-rpcpassword=\\fR<pw>\n-Password for JSON\\-RPC connections.\n-.TP\n-\\fB\\-rpcport=\\fR<port>\n-Listen for JSON\\-RPC connections on <port> (default: 8332 or testnet: 18332).\n-.TP\n-\\fB\\-rpcconnect=\\fR<ip>\n-Send commands to node running on <ip> (default: 127.0.0.1).\n-\n-.SH \"SEE ALSO\"\n-\\fBbitcoind\\fP, \\fBbitcoin.conf\\fP\n-.SH AUTHOR\n-This manual page was written by Ciemon Dunville <ciemon@gmail.com>. Permission is granted to copy, distribute and/or modify this document under the terms of the MIT License.\n-\n-The complete text of the MIT License can be found on the web at \\fIhttp://opensource.org/licenses/MIT\\fP."
      },
      {
        "sha": "05eadc94cdd441d5c3c6e32137884d43e506b4fb",
        "filename": "contrib/debian/manpages/bitcoin-qt.1",
        "status": "removed",
        "additions": 0,
        "deletions": 191,
        "changes": 191,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9df179d2e3abdee7d1f255d9be17c8b72dff06a/contrib/debian/manpages/bitcoin-qt.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9df179d2e3abdee7d1f255d9be17c8b72dff06a/contrib/debian/manpages/bitcoin-qt.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/manpages/bitcoin-qt.1?ref=e9df179d2e3abdee7d1f255d9be17c8b72dff06a",
        "patch": "@@ -1,191 +0,0 @@\n-.TH BITCOIN-QT \"1\" \"April 2013\" \"bitcoin-qt 1\"\n-.SH NAME\n-bitcoin-qt \\- peer-to-peer network based digital currency\n-.SH DESCRIPTION\n-.SS \"Usage:\"\n-.IP\n-bitcoin\\-qt [command\\-line options]\n-.SH OPTIONS\n-.TP\n-\\-?\n-This help message\n-.TP\n-\\fB\\-conf=\\fR<file>\n-Specify configuration file (default: bitcoin.conf)\n-.TP\n-\\fB\\-pid=\\fR<file>\n-Specify pid file (default: bitcoind.pid)\n-.TP\n-\\fB\\-gen\\fR\n-Generate coins\n-.TP\n-\\fB\\-gen\\fR=\\fI0\\fR\n-Don't generate coins\n-.TP\n-\\fB\\-datadir=\\fR<dir>\n-Specify data directory\n-.TP\n-\\fB\\-dbcache=\\fR<n>\n-Set database cache size in megabytes (default: 25)\n-.TP\n-\\fB\\-timeout=\\fR<n>\n-Specify connection timeout in milliseconds (default: 5000)\n-.TP\n-\\fB\\-proxy=\\fR<ip:port>\n-Connect through SOCKS5 proxy\n-.TP\n-\\fB\\-tor=\\fR<ip:port>\n-Use proxy to reach tor hidden services (default: same as \\fB\\-proxy\\fR)\n-.TP\n-\\fB\\-dns\\fR\n-Allow DNS lookups for \\fB\\-addnode\\fR, \\fB\\-seednode\\fR and \\fB\\-connect\\fR\n-.TP\n-\\fB\\-port=\\fR<port>\n-Listen for connections on <port> (default: 8333 or testnet: 18333)\n-.TP\n-\\fB\\-maxconnections=\\fR<n>\n-Maintain at most <n> connections to peers (default: 125)\n-.TP\n-\\fB\\-addnode=\\fR<ip>\n-Add a node to connect to and attempt to keep the connection open\n-.TP\n-\\fB\\-connect=\\fR<ip>\n-Connect only to the specified node(s)\n-.TP\n-\\fB\\-seednode=\\fR<ip>\n-Connect to a node to retrieve peer addresses, and disconnect\n-.TP\n-\\fB\\-externalip=\\fR<ip>\n-Specify your own public address\n-.TP\n-\\fB\\-onlynet=\\fR<net>\n-Only connect to nodes in network <net> (IPv4, IPv6 or Tor)\n-.TP\n-\\fB\\-discover\\fR\n-Discover own IP address (default: 1 when listening and no \\fB\\-externalip\\fR)\n-.TP\n-\\fB\\-checkpoints\\fR\n-Only accept block chain matching built\\-in checkpoints (default: 1)\n-.TP\n-\\fB\\-listen\\fR\n-Accept connections from outside (default: 1 if no \\fB\\-proxy\\fR or \\fB\\-connect\\fR)\n-.TP\n-\\fB\\-bind=\\fR<addr>\n-Bind to given address and always listen on it. Use [host]:port notation for IPv6\n-.TP\n-\\fB\\-dnsseed\\fR\n-Find peers using DNS lookup (default: 1 unless \\fB\\-connect\\fR)\n-.TP\n-\\fB\\-banscore=\\fR<n>\n-Threshold for disconnecting misbehaving peers (default: 100)\n-.TP\n-\\fB\\-bantime=\\fR<n>\n-Number of seconds to keep misbehaving peers from reconnecting (default: 86400)\n-.TP\n-\\fB\\-maxreceivebuffer=\\fR<n>\n-Maximum per\\-connection receive buffer, <n>*1000 bytes (default: 5000)\n-.TP\n-\\fB\\-maxsendbuffer=\\fR<n>\n-Maximum per\\-connection send buffer, <n>*1000 bytes (default: 1000)\n-.TP\n-\\fB\\-upnp\\fR\n-Use UPnP to map the listening port (default: 1 when listening)\n-.TP\n-\\fB\\-paytxfee=\\fR<amt>\n-Fee per KB to add to transactions you send\n-.TP\n-\\fB\\-server\\fR\n-Accept command line and JSON\\-RPC commands\n-.TP\n-\\fB\\-testnet\\fR\n-Use the test network\n-.TP\n-\\fB\\-debug\\fR\n-Output extra debugging information. Implies all other \\fB\\-debug\\fR* options\n-.TP\n-\\fB\\-debugnet\\fR\n-Output extra network debugging information\n-.TP\n-\\fB\\-logtimestamps\\fR\n-Prepend debug output with timestamp\n-.TP\n-\\fB\\-shrinkdebugfile\\fR\n-Shrink debug.log file on client startup (default: 1 when no \\fB\\-debug\\fR)\n-.TP\n-\\fB\\-printtoconsole\\fR\n-Send trace/debug info to console instead of debug.log file\n-.TP\n-\\fB\\-rpcuser=\\fR<user>\n-Username for JSON\\-RPC connections\n-.TP\n-\\fB\\-rpcpassword=\\fR<pw>\n-Password for JSON\\-RPC connections\n-.TP\n-\\fB\\-rpcport=\\fR<port>\n-Listen for JSON\\-RPC connections on <port> (default: 8332 or testnet: 18332)\n-.TP\n-\\fB\\-rpcallowip=\\fR<ip>\n-Allow JSON\\-RPC connections from specified IP address\n-.TP\n-\\fB\\-rpcthreads=\\fR<n>\n-Set the number of threads to service RPC calls (default: 4)\n-.TP\n-\\fB\\-blocknotify=\\fR<cmd>\n-Execute command when the best block changes (%s in cmd is replaced by block hash)\n-.TP\n-\\fB\\-walletnotify=\\fR<cmd>\n-Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)\n-.TP\n-\\fB\\-alertnotify=\\fR<cmd>\n-Execute command when a relevant alert is received (%s in cmd is replaced by message)\n-.TP\n-\\fB\\-upgradewallet\\fR\n-Upgrade wallet to latest format\n-.TP\n-\\fB\\-keypool=\\fR<n>\n-Set key pool size to <n> (default: 100)\n-.TP\n-\\fB\\-rescan\\fR\n-Rescan the block chain for missing wallet transactions\n-.TP\n-\\fB\\-salvagewallet\\fR\n-Attempt to recover private keys from a corrupt wallet.dat\n-.TP\n-\\fB\\-checkblocks=\\fR<n>\n-How many blocks to check at startup (default: 288, 0 = all)\n-.TP\n-\\fB\\-checklevel=\\fR<n>\n-How thorough the block verification is (0\\-4, default: 3)\n-.TP\n-\\fB\\-txindex\\fR\n-Maintain a full transaction index (default: 0)\n-.TP\n-\\fB\\-loadblock=\\fR<file>\n-Imports blocks from external blk000??.dat file\n-.TP\n-\\fB\\-reindex\\fR\n-Rebuild block chain index from current blk000??.dat files\n-.TP\n-\\fB\\-par=\\fR<n>\n-Set the number of script verification threads (1\\-16, 0=auto, default: 0)\n-.SS \"Block creation options:\"\n-.TP\n-\\fB\\-blockminsize=\\fR<n>\n-Set minimum block size in bytes (default: 0)\n-.TP\n-\\fB\\-blockmaxsize=\\fR<n>\n-Set maximum block size in bytes (default: 250000)\n-.HP\n-\\fB\\-blockprioritysize=\\fR<n> Set maximum size of high\\-priority/low\\-fee transactions in bytes (default: 27000)\n-.PP\n-Acceptable ciphers (default: TLSv1+HIGH:!SSLv2:!aNULL:!eNULL:!AH:!3DES:@STRENGTH)\n-.SS \"UI options:\"\n-.TP\n-\\fB\\-lang=\\fR<lang>\n-Set language, for example \"de_DE\" (default: system locale)\n-.TP\n-\\fB\\-min\\fR\n-Start minimized\n-.TP\n-\\fB\\-splash\\fR\n-Show splash screen on startup (default: 1)"
      },
      {
        "sha": "0cf4d991e34c90bf2d38e3fcb982c89cfee6aed6",
        "filename": "contrib/debian/manpages/bitcoin.conf.5",
        "status": "removed",
        "additions": 0,
        "deletions": 79,
        "changes": 79,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9df179d2e3abdee7d1f255d9be17c8b72dff06a/contrib/debian/manpages/bitcoin.conf.5",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9df179d2e3abdee7d1f255d9be17c8b72dff06a/contrib/debian/manpages/bitcoin.conf.5",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/manpages/bitcoin.conf.5?ref=e9df179d2e3abdee7d1f255d9be17c8b72dff06a",
        "patch": "@@ -1,79 +0,0 @@\n-.TH BITCOIN.CONF \"5\" \"January 2011\" \"bitcoin.conf 3.19\"\n-.SH NAME\n-bitcoin.conf \\- bitcoin configuration file\n-.SH SYNOPSIS\n-All command-line options (except for '\\-conf') may be specified in a configuration file, and all configuration file options may also be specified on the command line. Command-line options override values set in the configuration file.\n-.TP\n-The configuration file is a list of 'setting=value' pairs, one per line, with optional comments starting with the '#' character.\n-.TP\n-The configuration file is not automatically created; you can create it using your favorite plain-text editor. By default, bitcoind(1) will look for a file named bitcoin.conf(5) in the bitcoin data directory, but both the data directory and the configuration file path may be changed using the '\\-datadir' and '\\-conf' command-line arguments.\n-.SH LOCATION\n-bitcoin.conf should be located in $HOME/.bitcoin\n-.SH NETWORK-RELATED SETTINGS\n-.TP\n-.TP\n-\\fBtestnet=\\fR[\\fI'1'\\fR|\\fI'0'\\fR]\n-Enable or disable run on the test network instead of the real *bitcoin* network.\n-.TP\n-\\fBproxy=\\fR\\fI'127.0.0.1:9050'\\fR\n-Connect via a socks4 proxy.\n-.TP\n-\\fBaddnode=\\fR\\fI'10.0.0.2:8333'\\fR\n-Use as many *addnode=* settings as you like to connect to specific peers.\n-.TP\n-\\fBconnect=\\fR\\fI'10.0.0.1:8333'\\fR\n-Use as many *connect=* settings as you like to connect ONLY to specific peers.\n-.TP\n-\\fRmaxconnections=\\fR\\fI'value'\\fR\n-Maximum number of inbound+outbound connections.\n-.SH JSON-RPC OPTIONS\n-.TP\n-\\fBserver=\\fR[\\fI'1'\\fR|\\fI'0'\\fR]\n-Tells *bitcoin* to accept or not accept JSON-RPC commands.\n-.TP\n-\\fBrpcuser=\\fR\\fI'username'\\fR\n-You must set *rpcuser* to secure the JSON-RPC api.\n-.TP\n-\\fBrpcpassword=\\fR\\fI'password'\\fR\n-You must set *rpcpassword* to secure the JSON-RPC api.\n-.TP\n-\\fBrpcallowip=\\fR\\fI'192.168.1.*'\\fR\n-By default, only RPC connections from localhost are allowed. Specify as many *rpcallowip=* settings as you like to allow connections from other hosts (and you may use * as a wildcard character).\n-.TP\n-\\fBrpcport=\\fR\\fI'8332'\\fR\n-Listen for RPC connections on this TCP port.\n-.TP\n-\\fBrpcconnect=\\fR\\fI'127.0.0.1'\\fR\n-You can use *bitcoin* or *bitcoind(1)* to send commands to *bitcoin*/*bitcoind(1)* running on another host using this option.\n-.TP\n-.SH MISCELLANEOUS OPTIONS\n-.TP\n-\\fBgen=\\fR[\\fI'0'\\fR|\\fI'1'\\fR]\n-Enable or disable attempt to generate bitcoins.\n-.TP\n-\\fB4way=\\fR[\\fI'0'\\fR|\\fI'1'\\fR]\n-Enable or disable use SSE instructions to try to generate bitcoins faster.\n-.TP\n-\\fBkeypool=\\fR\\fI'100'\\fR\n-Pre-generate this many public/private key pairs, so wallet backups will be valid for both prior transactions and several dozen future transactions.\n-.TP\n-\\fBpaytxfee=\\fR\\fI'0.00'\\fR\n-Pay an optional transaction fee every time you send bitcoins. Transactions with fees are more likely than free transactions to be included in generated blocks, so may be validated sooner.\n-.TP\n-\\fBallowreceivebyip=\\fR\\fI'1'\\fR\n-Allow direct connections for the 'pay via IP address' feature.\n-.TP\n-.SH USER INTERFACE OPTIONS\n-.TP\n-\\fBmin=\\fR[\\fI'0'\\fR|\\fI'1'\\fR]\n-Enable or disable start bitcoind minimized.\n-.TP\n-\\fBminimizetotray=\\fR[\\fI'0'\\fR|\\fI'1'\\fR]\n-Enable or disable minimize to the system tray.\n-.SH \"SEE ALSO\"\n-bitcoind(1)\n-.SH AUTHOR\n-This manual page was written by Micah Anderson <micah@debian.org> for the Debian system (but may be used by others). Permission is granted to copy, distribute and/or modify this document under the terms of the GNU General Public License, Version 3 or any later version published by the Free Software Foundation.\n-\n-On Debian systems, the complete text of the GNU General Public License can be found in /usr/share/common-licenses/GPL.\n-"
      },
      {
        "sha": "5b0f2921aa415b04663e472162bf95458d308e75",
        "filename": "contrib/debian/manpages/bitcoind.1",
        "status": "removed",
        "additions": 0,
        "deletions": 195,
        "changes": 195,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9df179d2e3abdee7d1f255d9be17c8b72dff06a/contrib/debian/manpages/bitcoind.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9df179d2e3abdee7d1f255d9be17c8b72dff06a/contrib/debian/manpages/bitcoind.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/manpages/bitcoind.1?ref=e9df179d2e3abdee7d1f255d9be17c8b72dff06a",
        "patch": "@@ -1,195 +0,0 @@\n-.TH BITCOIND \"1\" \"January 2011\" \"bitcoind 3.19\" \n-.SH NAME\n-bitcoind \\- peer-to-peer network based digital currency\n-.SH SYNOPSIS\n-bitcoin [options] <command> [params]  \n-.TP\n-bitcoin [options] help <command> \\- Get help for a command\n-.SH DESCRIPTION\n-This  manual page documents the bitcoind program. Bitcoin is a peer-to-peer digital currency. Peer-to-peer (P2P) means that there is no central authority to issue new money or keep track of transactions. Instead, these tasks are managed collectively by the nodes of the network. Advantages:\n-\n-Bitcoins can be sent easily through the Internet, without having to trust middlemen. Transactions are designed to be irreversible. Be safe from instability caused by fractional reserve banking and central banks. The limited inflation of the Bitcoin system\u2019s money supply is distributed evenly (by CPU power) throughout the network, not monopolized by banks.\n-\n-.SH OPTIONS\n-.TP\n-\\fB\\-conf=\\fR<file>\n-Specify configuration file (default: bitcoin.conf)\n-.TP\n-\\fB\\-gen\\fR\n-Generate coins\n-.TP\n-\\fB\\-gen\\fR=\\fI0\\fR\n-Don't generate coins\n-.TP\n-\\fB\\-min\\fR\n-Start minimized\n-.TP\n-\\fB\\-datadir=\\fR<dir>\n-Specify data directory\n-.TP\n-\\fB\\-proxy=\\fR<ip:port>\n-Connect through SOCKS5 proxy\n-.TP\n-\\fB\\-addnode=\\fR<ip>\n-Add a node to connect to\n-.TP\n-\\fB\\-connect=\\fR<ip>\n-Connect only to the specified node\n-.TP\n-\\fB\\-paytxfee=\\fR<amt>\n-Fee per KB to add to transactions you send\n-.TP\n-\\fB\\-server\\fR\n-Accept command line and JSON\\-RPC commands\n-.TP\n-\\fB\\-daemon\\fR\n-Run in the background as a daemon and accept commands\n-.TP\n-\\fB\\-testnet\\fR\n-Use the test network\n-.TP\n-\\fB\\-rpcuser=\\fR<user>\n-Username for JSON\\-RPC connections\n-.TP\n-\\fB\\-rpcpassword=\\fR<pw>\n-Password for JSON\\-RPC connections\n-.TP\n-\\fB\\-rpcport=\\fR<port>\n-Listen for JSON\\-RPC connections on <port>\n-.TP\n-\\fB\\-rpcallowip=\\fR<ip>\n-Allow JSON\\-RPC connections from specified IP address\n-.TP\n-\\fB\\-rpcconnect=\\fR<ip>\n-Send commands to node running on <ip>\n-.TP\n-\\-?\n-This help message\n-.SH COMMANDS\n-.TP\n-\\fBbackupwallet 'destination'\\fR\n-Safely copies *wallet.dat* to 'destination', which can be a directory or a path with filename.\n-.TP\n-\\fBgetaccount 'bitcoinaddress'\\fR\n-DEPRECATED. Returns the account associated with the given address.\n-.TP\n-\\fBsetaccount 'bitcoinaddress' ['account']\\fR\n-DEPRECATED. Sets the ['account'] associated with the given address. ['account'] may be omitted to remove an address from ['account'].\n-.TP\n-\\fBgetaccountaddress 'account'\\fR\n-DEPRECATED. Returns a new bitcoin address for 'account'.\n-.TP\n-\\fBgetaddressesbyaccount 'account'\\fR\n-DEPRECATED. Returns the list of addresses associated with the given 'account'.\n-.TP\n-\\fBgetbalance 'account'\\fR\n-Returns the server's available balance, or the balance for 'account' (accounts are deprecated).\n-.TP\n-\\fBgetblockcount\\fR\n-Returns the number of blocks in the longest block chain.\n-.TP\n-\\fBgetblocknumber\\fR\n-Returns the block number of the latest block in the longest block chain.\n-.TP\n-\\fBgetconnectioncount\\fR\n-Returns the number of connections to other nodes.\n-.TP\n-\\fBgetdifficulty\\fR\n-Returns the proof-of-work difficulty as a multiple of the minimum difficulty.\n-.TP\n-\\fBgetgenerate\\fR\n-Returns boolean true if server is trying to generate bitcoins, false otherwise.\n-.TP\n-\\fBsetgenerate 'generate' ['genproclimit']\\fR\n-Generation is limited to ['genproclimit'] processors, \\-1 is unlimited.\n-.TP\n-\\fBgethashespersec\\fR\n-Returns a recent hashes per second performance measurement while generating.\n-.TP\n-\\fBgetinfo\\fR\n-Returns an object containing server information.\n-.TP\n-\\fBgetnewaddress 'account'\\fR\n-Returns a new bitcoin address for receiving payments. If 'account' is specified (deprecated), it is added to the address book so payments received with the address will be credited to 'account'.\n-.TP\n-\\fBgetreceivedbyaccount 'account' ['minconf=1']\\fR\n-DEPRECATED. Returns the total amount received by addresses associated with 'account' in transactions with at least ['minconf'] confirmations.\n-.TP\n-\\fBgetreceivedbyaddress 'bitcoinaddress' ['minconf=1']\\fR\n-Returns the total amount received by 'bitcoinaddress' in transactions with at least ['minconf'] confirmations.\n-.TP\n-\\fBgettransaction 'txid'\\fR\n-Returns information about a specific transaction, given hexadecimal transaction ID.\n-.TP\n-\\fBgetwork 'data'\\fR\n-If 'data' is specified, tries to solve the block and returns true if it was successful. If 'data' is not specified, returns formatted hash 'data' to work on:\n-\n-    \"midstate\" : precomputed hash state after hashing the first half of the data.\n-    \"data\"     : block data.\n-    \"hash1\"    : formatted hash buffer for second hash.\n-    \"target\"   : little endian hash target.\n-.TP\n-\\fBhelp 'command'\\fR\n-List commands, or get help for a command.\n-.TP\n-\\fBlistaccounts ['minconf=1']\\fR\n-DEPRECATED. List accounts and their current balances.\n-     *note: requires bitcoin 0.3.20 or later.\n-.TP\n-\\fBlistreceivedbyaccount ['minconf=1'] ['includeempty=false']\\fR\n-['minconf'] is the minimum number of confirmations before payments are included. ['includeempty'] whether to include addresses that haven't received any payments. Returns an array of objects containing:\n-\n-    \"account\"       : DEPRECATED. the account of the receiving address.\n-    \"amount\"        : total amount received by the address.\n-    \"confirmations\" : number of confirmations of the most recent transaction included.\n-.TP\n-\\fBlistreceivedbyaddress ['minconf=1'] ['includeempty=false']\\fR\n-['minconf'] is the minimum number of confirmations before payments are included. ['includeempty'] whether to include addresses that haven't received any payments. Returns an array of objects containing:\n-\n-    \"address\"       : receiving address.\n-    \"account\"       : DEPRECATED. the account of the receiving address.\n-    \"amount\"        : total amount received by the address.\n-    \"confirmations\" : number of confirmations of the most recent transaction included.\n-.TP\n-\\fBlisttransactions 'account' ['count=10']\\fR\n-Returns a list of the last ['count'] transactions for 'account' \\- for all accounts if 'account' is not specified or is \"*\". Each entry in the list may contain:\n-\n-    \"category\"      : will be generate, send, receive, or move.\n-    \"amount\"        : amount of transaction.\n-    \"fee\"           : Fee (if any) paid (only for send transactions).\n-    \"confirmations\" : number of confirmations (only for generate/send/receive).\n-    \"txid\"          : transaction ID (only for generate/send/receive).\n-    \"otheraccount\"  : account funds were moved to or from (only for move).\n-    \"message\"       : message associated with transaction (only for send).\n-    \"to\"            : message-to associated with transaction (only for send).\n-\n-    *note: requires bitcoin 0.3.20 or later.\n-.TP\n-\\fBmove <'fromaccount'> <'toaccount'> <'amount'> ['minconf=1'] ['comment']\\fR\n-DEPRECATED. Moves funds between accounts.\n-.TP\n-\\fBsendfrom* <'account'> <'bitcoinaddress'> <'amount'> ['minconf=1'] ['comment'] ['comment-to']\\fR\n-DEPRECATED. Sends amount from account's balance to 'bitcoinaddress'. This method will fail if there is less than amount bitcoins with ['minconf'] confirmations in the account's balance (unless account is the empty-string-named default account; it behaves like the *sendtoaddress* method). Returns transaction ID on success.\n-.TP     \n-\\fBsendtoaddress 'bitcoinaddress' 'amount' ['comment'] ['comment-to']\\fR\n-Sends amount from the server's available balance to 'bitcoinaddress'. amount is a real and is rounded to the nearest 0.01. Returns transaction id on success.\n-.TP    \n-\\fBstop\\fR\n-Stops the bitcoin server.\n-.TP    \n-\\fBvalidateaddress 'bitcoinaddress'\\fR\n-Checks that 'bitcoinaddress' looks like a proper bitcoin address. Returns an object containing:\n-\n-    \"isvalid\" : true or false.\n-    \"ismine\"  : true if the address is in the server's wallet.\n-    \"address\" : bitcoinaddress.\n-\n-    *note: ismine and address are only returned if the address is valid.\n-\n-.SH \"SEE ALSO\"\n-bitcoin.conf(5)\n-.SH AUTHOR\n-This manual page was written by Micah Anderson <micah@debian.org> for the Debian system (but may be used by others). Permission is granted to copy, distribute and/or modify this document under the terms of the GNU General Public License, Version 3 or any later version published by the Free Software Foundation.\n-\n-On Debian systems, the complete text of the GNU General Public License can be found in /usr/share/common-licenses/GPL.\n-"
      },
      {
        "sha": "3896d2caa31161bc6d1f6597764e741718afd4da",
        "filename": "contrib/debian/rules",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/debian/rules",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/debian/rules",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/rules?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -5,9 +5,6 @@\n #build/bitcoind::\n #\t$(if $(filter nocheck,$(DEB_BUILD_OPTIONS)),,src/test_bitcoin)\n \n-DEB_INSTALL_EXAMPLES_bitcoind += debian/examples/*\n-DEB_INSTALL_MANPAGES_bitcoind += debian/manpages/*\n-\n %:\n \tdh --with bash-completion $@\n "
      },
      {
        "sha": "60fe69e7e39e89759c91b1a14b0f2ad3f13c83ce",
        "filename": "contrib/devtools/README.md",
        "status": "modified",
        "additions": 35,
        "deletions": 10,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/devtools/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/devtools/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/README.md?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -2,25 +2,49 @@ Contents\n ========\n This directory contains tools for developers working on this repository.\n \n+check-doc.py\n+============\n+\n+Check if all command line args are documented. The return value indicates the\n+number of undocumented args.\n+\n clang-format.py\n ===============\n \n A script to format cpp source code according to [.clang-format](../../src/.clang-format). This should only be applied to new files or files which are currently not actively developed on. Also, git subtrees are not subject to formatting.\n \n+clang-format-diff.py\n+===================\n+\n+A script to format unified git diffs according to [.clang-format](../../src/.clang-format).\n+\n+For instance, to format the last commit with 0 lines of context,\n+the script should be called from the git root folder as follows.\n+\n+```\n+git diff -U0 HEAD~1.. | ./contrib/devtools/clang-format-diff.py -p1 -i -v\n+```\n+\n fix-copyright-headers.py\n ========================\n \n Every year newly updated files need to have its copyright headers updated to reflect the current year.\n-If you run this script from src/ it will automatically update the year on the copyright header for all\n-.cpp and .h files if these have a git commit from the current year.\n+If you run this script from the root folder it will automatically update the year on the copyright header for all\n+source files if these have a git commit from the current year.\n \n-For example a file changed in 2014 (with 2014 being the current year):\n+For example a file changed in 2015 (with 2015 being the current year):\n \n ```// Copyright (c) 2009-2013 The Bitcoin Core developers```\n \n would be changed to:\n \n-```// Copyright (c) 2009-2014 The Bitcoin Core developers```\n+```// Copyright (c) 2009-2015 The Bitcoin Core developers```\n+\n+gen-manpages.sh\n+===============\n+\n+A small script to automatically create manpages in ../../doc/man by running the release binaries with the -help option.\n+This requires help2man which can be found at: https://www.gnu.org/software/help2man/\n \n git-subtree-check.sh\n ====================\n@@ -30,22 +54,23 @@ the commit it claims to have been updated to.\n \n To use, make sure that you have fetched the upstream repository branch in which the subtree is\n maintained:\n-* for `src/secp256k1`: https://github.com/bitcoin/secp256k1.git (branch master)\n-* for `src/leveldb`: https://github.com/bitcoin/leveldb.git (branch bitcoin-fork)\n-* for `src/univalue`: https://github.com/bitcoin/univalue.git (branch master)\n+* for `src/secp256k1`: https://github.com/bitcoin-core/secp256k1.git (branch master)\n+* for `src/leveldb`: https://github.com/bitcoin-core/leveldb.git (branch bitcoin-fork)\n+* for `src/univalue`: https://github.com/bitcoin-core/univalue.git (branch master)\n+* for `src/crypto/ctaes`: https://github.com/bitcoin-core/ctaes.git (branch master)\n \n-Usage: `git-subtree-check.sh DIR COMMIT`\n+Usage: `git-subtree-check.sh DIR (COMMIT)`\n \n `COMMIT` may be omitted, in which case `HEAD` is used.\n \n-github-merge.sh\n+github-merge.py\n ===============\n \n A small script to automate merging pull-requests securely and sign them with GPG.\n \n For example:\n \n-  ./github-merge.sh bitcoin/bitcoin 3077\n+  ./github-merge.py 3077\n \n (in any git repository) will help you merge pull request #3077 for the\n bitcoin/bitcoin repository."
      },
      {
        "sha": "9ea0131ac3aa4933d4ebc45b78a9282805974a73",
        "filename": "contrib/devtools/check-doc.py",
        "status": "added",
        "additions": 45,
        "deletions": 0,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/devtools/check-doc.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/devtools/check-doc.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/check-doc.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -0,0 +1,45 @@\n+#!/usr/bin/env python\n+# Copyright (c) 2015 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+'''\n+This checks if all command line args are documented.\n+Return value is 0 to indicate no error.\n+\n+Author: @MarcoFalke\n+'''\n+\n+from subprocess import check_output\n+import re\n+\n+FOLDER_GREP = 'src'\n+FOLDER_TEST = 'src/test/'\n+CMD_ROOT_DIR = '`git rev-parse --show-toplevel`/%s' % FOLDER_GREP\n+CMD_GREP_ARGS = r\"egrep -r -I '(map(Multi)?Args(\\.count\\(|\\[)|Get(Bool)?Arg\\()\\\"\\-[^\\\"]+?\\\"' %s | grep -v '%s'\" % (CMD_ROOT_DIR, FOLDER_TEST)\n+CMD_GREP_DOCS = r\"egrep -r -I 'HelpMessageOpt\\(\\\"\\-[^\\\"=]+?(=|\\\")' %s\" % (CMD_ROOT_DIR)\n+REGEX_ARG = re.compile(r'(?:map(?:Multi)?Args(?:\\.count\\(|\\[)|Get(?:Bool)?Arg\\()\\\"(\\-[^\\\"]+?)\\\"')\n+REGEX_DOC = re.compile(r'HelpMessageOpt\\(\\\"(\\-[^\\\"=]+?)(?:=|\\\")')\n+# list unsupported, deprecated and duplicate args as they need no documentation\n+SET_DOC_OPTIONAL = set(['-rpcssl', '-benchmark', '-h', '-help', '-socks', '-tor', '-debugnet', '-whitelistalwaysrelay', '-prematurewitness', '-walletprematurewitness', '-promiscuousmempoolflags', '-blockminsize'])\n+\n+def main():\n+  used = check_output(CMD_GREP_ARGS, shell=True)\n+  docd = check_output(CMD_GREP_DOCS, shell=True)\n+\n+  args_used = set(re.findall(REGEX_ARG,used))\n+  args_docd = set(re.findall(REGEX_DOC,docd)).union(SET_DOC_OPTIONAL)\n+  args_need_doc = args_used.difference(args_docd)\n+  args_unknown = args_docd.difference(args_used)\n+\n+  print \"Args used        : %s\" % len(args_used)\n+  print \"Args documented  : %s\" % len(args_docd)\n+  print \"Args undocumented: %s\" % len(args_need_doc)\n+  print args_need_doc\n+  print \"Args unknown     : %s\" % len(args_unknown)\n+  print args_unknown\n+\n+  exit(len(args_need_doc))\n+\n+if __name__ == \"__main__\":\n+    main()"
      },
      {
        "sha": "13d2573b9ff874e0c536e246b6f94310b7c7587f",
        "filename": "contrib/devtools/clang-format-diff.py",
        "status": "added",
        "additions": 164,
        "deletions": 0,
        "changes": 164,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/devtools/clang-format-diff.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/devtools/clang-format-diff.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/clang-format-diff.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -0,0 +1,164 @@\n+#!/usr/bin/env python\n+#\n+#===- clang-format-diff.py - ClangFormat Diff Reformatter ----*- python -*--===#\n+#\n+#                     The LLVM Compiler Infrastructure\n+#\n+# This file is distributed under the University of Illinois Open Source\n+# License.\n+#\n+#           ============================================================\n+#\n+# University of Illinois/NCSA\n+# Open Source License\n+#\n+# Copyright (c) 2007-2015 University of Illinois at Urbana-Champaign.\n+# All rights reserved.\n+#\n+# Developed by:\n+#\n+#     LLVM Team\n+#\n+#     University of Illinois at Urbana-Champaign\n+#\n+#     http://llvm.org\n+#\n+# Permission is hereby granted, free of charge, to any person obtaining a copy of\n+# this software and associated documentation files (the \"Software\"), to deal with\n+# the Software without restriction, including without limitation the rights to\n+# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\n+# of the Software, and to permit persons to whom the Software is furnished to do\n+# so, subject to the following conditions:\n+#\n+#     * Redistributions of source code must retain the above copyright notice,\n+#       this list of conditions and the following disclaimers.\n+#\n+#     * Redistributions in binary form must reproduce the above copyright notice,\n+#       this list of conditions and the following disclaimers in the\n+#       documentation and/or other materials provided with the distribution.\n+#\n+#     * Neither the names of the LLVM Team, University of Illinois at\n+#       Urbana-Champaign, nor the names of its contributors may be used to\n+#       endorse or promote products derived from this Software without specific\n+#       prior written permission.\n+#\n+# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n+# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\n+# CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE\n+# SOFTWARE.\n+#\n+#           ============================================================\n+#\n+#===------------------------------------------------------------------------===#\n+\n+r\"\"\"\n+ClangFormat Diff Reformatter\n+============================\n+\n+This script reads input from a unified diff and reformats all the changed\n+lines. This is useful to reformat all the lines touched by a specific patch.\n+Example usage for git/svn users:\n+\n+  git diff -U0 HEAD^ | clang-format-diff.py -p1 -i\n+  svn diff --diff-cmd=diff -x-U0 | clang-format-diff.py -i\n+\n+\"\"\"\n+\n+import argparse\n+import difflib\n+import re\n+import string\n+import subprocess\n+import StringIO\n+import sys\n+\n+\n+# Change this to the full path if clang-format is not on the path.\n+binary = 'clang-format'\n+\n+\n+def main():\n+  parser = argparse.ArgumentParser(description=\n+                                   'Reformat changed lines in diff. Without -i '\n+                                   'option just output the diff that would be '\n+                                   'introduced.')\n+  parser.add_argument('-i', action='store_true', default=False,\n+                      help='apply edits to files instead of displaying a diff')\n+  parser.add_argument('-p', metavar='NUM', default=0,\n+                      help='strip the smallest prefix containing P slashes')\n+  parser.add_argument('-regex', metavar='PATTERN', default=None,\n+                      help='custom pattern selecting file paths to reformat '\n+                      '(case sensitive, overrides -iregex)')\n+  parser.add_argument('-iregex', metavar='PATTERN', default=\n+                      r'.*\\.(cpp|cc|c\\+\\+|cxx|c|cl|h|hpp|m|mm|inc|js|ts|proto'\n+                      r'|protodevel|java)',\n+                      help='custom pattern selecting file paths to reformat '\n+                      '(case insensitive, overridden by -regex)')\n+  parser.add_argument('-sort-includes', action='store_true', default=False,\n+                      help='let clang-format sort include blocks')\n+  parser.add_argument('-v', '--verbose', action='store_true',\n+                      help='be more verbose, ineffective without -i')\n+  args = parser.parse_args()\n+\n+  # Extract changed lines for each file.\n+  filename = None\n+  lines_by_file = {}\n+  for line in sys.stdin:\n+    match = re.search('^\\+\\+\\+\\ (.*?/){%s}(\\S*)' % args.p, line)\n+    if match:\n+      filename = match.group(2)\n+    if filename == None:\n+      continue\n+\n+    if args.regex is not None:\n+      if not re.match('^%s$' % args.regex, filename):\n+        continue\n+    else:\n+      if not re.match('^%s$' % args.iregex, filename, re.IGNORECASE):\n+        continue\n+\n+    match = re.search('^@@.*\\+(\\d+)(,(\\d+))?', line)\n+    if match:\n+      start_line = int(match.group(1))\n+      line_count = 1\n+      if match.group(3):\n+        line_count = int(match.group(3))\n+      if line_count == 0:\n+        continue\n+      end_line = start_line + line_count - 1;\n+      lines_by_file.setdefault(filename, []).extend(\n+          ['-lines', str(start_line) + ':' + str(end_line)])\n+\n+  # Reformat files containing changes in place.\n+  for filename, lines in lines_by_file.iteritems():\n+    if args.i and args.verbose:\n+      print 'Formatting', filename\n+    command = [binary, filename]\n+    if args.i:\n+      command.append('-i')\n+    if args.sort_includes:\n+      command.append('-sort-includes')\n+    command.extend(lines)\n+    command.extend(['-style=file', '-fallback-style=none'])\n+    p = subprocess.Popen(command, stdout=subprocess.PIPE,\n+                         stderr=None, stdin=subprocess.PIPE)\n+    stdout, stderr = p.communicate()\n+    if p.returncode != 0:\n+      sys.exit(p.returncode);\n+\n+    if not args.i:\n+      with open(filename) as f:\n+        code = f.readlines()\n+      formatted_code = StringIO.StringIO(stdout).readlines()\n+      diff = difflib.unified_diff(code, formatted_code,\n+                                  filename, filename,\n+                                  '(before formatting)', '(after formatting)')\n+      diff_string = string.join(diff, '')\n+      if len(diff_string) > 0:\n+        sys.stdout.write(diff_string)\n+\n+if __name__ == '__main__':\n+  main()"
      },
      {
        "sha": "54836bd83f592964296ce8a8b6bce2281f069b4f",
        "filename": "contrib/devtools/fix-copyright-headers.py",
        "status": "modified",
        "additions": 57,
        "deletions": 43,
        "changes": 100,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/devtools/fix-copyright-headers.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/devtools/fix-copyright-headers.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/fix-copyright-headers.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -1,53 +1,67 @@\n-#!/usr/bin/env python\n-'''\n-Run this script inside of src/ and it will look for all the files\n-that were changed this year that still have the last year in the\n-copyright headers, and it will fix the headers on that file using\n-a perl regex one liner.\n+#!/usr/bin/env python3\n+\"\"\"\n+Run this script to update all the copyright headers of files\n+that were changed this year.\n \n-For example: if it finds something like this and we're in 2014\n+For example:\n \n-// Copyright (c) 2009-2013 The Bitcoin Core developers\n+// Copyright (c) 2009-2012 The Bitcoin Core developers\n \n it will change it to\n \n-// Copyright (c) 2009-2014 The Bitcoin Core developers\n+// Copyright (c) 2009-2015 The Bitcoin Core developers\n+\"\"\"\n+import subprocess\n+import time\n+import re\n \n-It will do this for all the files in the folder and its children.\n+CMD_GIT_LIST_FILES = ['git', 'ls-files']\n+CMD_GIT_DATE = ['git', 'log', '--format=%ad', '--date=short', '-1']\n+CMD_PERL_REGEX = ['perl', '-pi', '-e']\n+REGEX_TEMPLATE = 's/(20\\\\d\\\\d)(?:-20\\\\d\\\\d)? The Bitcoin/$1-%s The Bitcoin/'\n \n-Author: @gubatron\n-'''\n-import os\n-import time\n+FOLDERS = [\"qa/\", \"src/\"]\n+EXTENSIONS = [\".cpp\",\".h\", \".py\"]\n+\n+\n+def get_git_date(file_path):\n+    d = subprocess.run(CMD_GIT_DATE + [file_path],\n+                       stdout=subprocess.PIPE,\n+                       check=True,\n+                       universal_newlines=True).stdout\n+    # yyyy-mm-dd\n+    return d.split('-')[0]\n \n-year = time.gmtime()[0]\n-last_year = year - 1\n-command = \"perl -pi -e 's/%s The Bitcoin/%s The Bitcoin/' %s\"\n-listFilesCommand = \"find . | grep %s\"\n-\n-extensions = [\".cpp\",\".h\"]\n-\n-def getLastGitModifiedDate(filePath):\n-  gitGetLastCommitDateCommand = \"git log \" + filePath +\" | grep Date | head -n 1\"\n-  p = os.popen(gitGetLastCommitDateCommand)\n-  result = \"\"\n-  for l in p:\n-    result = l\n-    break\n-  result = result.replace(\"\\n\",\"\")\n-  return result\n-\n-n=1\n-for extension in extensions:\n-  foundFiles = os.popen(listFilesCommand % extension)\n-  for filePath in foundFiles:\n-    filePath = filePath[1:-1]\n-    if filePath.endswith(extension):\n-      filePath = os.getcwd() + filePath\n-      modifiedTime = getLastGitModifiedDate(filePath)\n-      if len(modifiedTime) > 0 and str(year) in modifiedTime:\n-        print n,\"Last Git Modified: \", modifiedTime, \" - \", filePath\n-        os.popen(command % (last_year,year,filePath))\n-        n = n + 1\n \n+def skip_file(file_path):\n+    for ext in EXTENSIONS:\n+        if file_path.endswith(ext):\n+            return False\n+    else:\n+        return True\n \n+if __name__ == \"__main__\":\n+    year = str(time.gmtime()[0])\n+    regex_current = re.compile(\"%s The Bitcoin\" % year)\n+    n = 1\n+    for folder in FOLDERS:\n+        for file_path in subprocess.run(\n+            CMD_GIT_LIST_FILES + [folder],\n+            stdout=subprocess.PIPE,\n+            check=True,\n+            universal_newlines=True\n+        ).stdout.split(\"\\n\"):\n+            if skip_file(file_path):\n+                # print(file_path, \"(skip)\")\n+                continue\n+            git_date = get_git_date(file_path)\n+            if not year == git_date:\n+                # print(file_path, year, \"(skip)\")\n+                continue\n+            if regex_current.search(open(file_path, \"r\").read()) is not None:\n+                # already up to date\n+                # print(file_path, year, \"(skip)\")\n+                continue\n+            print(n, file_path, \"(update to %s)\" % year)\n+            subprocess.run(CMD_PERL_REGEX + [REGEX_TEMPLATE % year, file_path], check=True)\n+            n = n + 1"
      },
      {
        "sha": "967717e1e0d6d2a1f5f8bce7c72ba13fd324a9da",
        "filename": "contrib/devtools/gen-manpages.sh",
        "status": "added",
        "additions": 29,
        "deletions": 0,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/devtools/gen-manpages.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/devtools/gen-manpages.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/gen-manpages.sh?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -0,0 +1,29 @@\n+#!/bin/sh\n+\n+TOPDIR=${TOPDIR:-$(git rev-parse --show-toplevel)}\n+SRCDIR=${SRCDIR:-$TOPDIR/src}\n+MANDIR=${MANDIR:-$TOPDIR/doc/man}\n+\n+BITCOIND=${BITCOIND:-$SRCDIR/bitcoind}\n+BITCOINCLI=${BITCOINCLI:-$SRCDIR/bitcoin-cli}\n+BITCOINTX=${BITCOINTX:-$SRCDIR/bitcoin-tx}\n+BITCOINQT=${BITCOINQT:-$SRCDIR/qt/bitcoin-qt}\n+\n+[ ! -x $BITCOIND ] && echo \"$BITCOIND not found or not executable.\" && exit 1\n+\n+# The autodetected version git tag can screw up manpage output a little bit\n+BTCVER=($($BITCOINCLI --version | head -n1 | awk -F'[ -]' '{ print $6, $7 }'))\n+\n+# Create a footer file with copyright content.\n+# This gets autodetected fine for bitcoind if --version-string is not set,\n+# but has different outcomes for bitcoin-qt and bitcoin-cli.\n+echo \"[COPYRIGHT]\" > footer.h2m\n+$BITCOIND --version | sed -n '1!p' >> footer.h2m\n+\n+for cmd in $BITCOIND $BITCOINCLI $BITCOINTX $BITCOINQT; do\n+  cmdname=\"${cmd##*/}\"\n+  help2man -N --version-string=${BTCVER[0]} --include=footer.h2m -o ${MANDIR}/${cmdname}.1 ${cmd}\n+  sed -i \"s/\\\\\\-${BTCVER[1]}//g\" ${MANDIR}/${cmdname}.1\n+done\n+\n+rm -f footer.h2m"
      },
      {
        "sha": "2384d66cad2aa71778b27737629245ab839722da",
        "filename": "contrib/devtools/git-subtree-check.sh",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/devtools/git-subtree-check.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/devtools/git-subtree-check.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/git-subtree-check.sh?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -1,4 +1,7 @@\n #!/bin/sh\n+# Copyright (c) 2015 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n DIR=\"$1\"\n COMMIT=\"$2\""
      },
      {
        "sha": "f82362fe417e3f2e7ed46282420c823414b8c417",
        "filename": "contrib/devtools/github-merge.py",
        "status": "added",
        "additions": 251,
        "deletions": 0,
        "changes": 251,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/devtools/github-merge.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/devtools/github-merge.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/github-merge.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -0,0 +1,251 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2016 Bitcoin Core Developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+# This script will locally construct a merge commit for a pull request on a\n+# github repository, inspect it, sign it and optionally push it.\n+\n+# The following temporary branches are created/overwritten and deleted:\n+# * pull/$PULL/base (the current master we're merging onto)\n+# * pull/$PULL/head (the current state of the remote pull request)\n+# * pull/$PULL/merge (github's merge)\n+# * pull/$PULL/local-merge (our merge)\n+\n+# In case of a clean merge that is accepted by the user, the local branch with\n+# name $BRANCH is overwritten with the merged result, and optionally pushed.\n+from __future__ import division,print_function,unicode_literals\n+import os,sys\n+from sys import stdin,stdout,stderr\n+import argparse\n+import subprocess\n+import json,codecs\n+try:\n+    from urllib.request import Request,urlopen\n+except:\n+    from urllib2 import Request,urlopen\n+\n+# External tools (can be overridden using environment)\n+GIT = os.getenv('GIT','git')\n+BASH = os.getenv('BASH','bash')\n+\n+# OS specific configuration for terminal attributes\n+ATTR_RESET = ''\n+ATTR_PR = ''\n+COMMIT_FORMAT = '%h %s (%an)%d'\n+if os.name == 'posix': # if posix, assume we can use basic terminal escapes\n+    ATTR_RESET = '\\033[0m'\n+    ATTR_PR = '\\033[1;36m'\n+    COMMIT_FORMAT = '%C(bold blue)%h%Creset %s %C(cyan)(%an)%Creset%C(green)%d%Creset'\n+\n+def git_config_get(option, default=None):\n+    '''\n+    Get named configuration option from git repository.\n+    '''\n+    try:\n+        return subprocess.check_output([GIT,'config','--get',option]).rstrip().decode('utf-8')\n+    except subprocess.CalledProcessError as e:\n+        return default\n+\n+def retrieve_pr_info(repo,pull):\n+    '''\n+    Retrieve pull request information from github.\n+    Return None if no title can be found, or an error happens.\n+    '''\n+    try:\n+        req = Request(\"https://api.github.com/repos/\"+repo+\"/pulls/\"+pull)\n+        result = urlopen(req)\n+        reader = codecs.getreader('utf-8')\n+        obj = json.load(reader(result))\n+        return obj\n+    except Exception as e:\n+        print('Warning: unable to retrieve pull information from github: %s' % e)\n+        return None\n+\n+def ask_prompt(text):\n+    print(text,end=\" \",file=stderr)\n+    stderr.flush()\n+    reply = stdin.readline().rstrip()\n+    print(\"\",file=stderr)\n+    return reply\n+\n+def parse_arguments():\n+    epilog = '''\n+        In addition, you can set the following git configuration variables:\n+        githubmerge.repository (mandatory),\n+        user.signingkey (mandatory),\n+        githubmerge.host (default: git@github.com),\n+        githubmerge.branch (no default),\n+        githubmerge.testcmd (default: none).\n+    '''\n+    parser = argparse.ArgumentParser(description='Utility to merge, sign and push github pull requests',\n+            epilog=epilog)\n+    parser.add_argument('pull', metavar='PULL', type=int, nargs=1,\n+        help='Pull request ID to merge')\n+    parser.add_argument('branch', metavar='BRANCH', type=str, nargs='?',\n+        default=None, help='Branch to merge against (default: githubmerge.branch setting, or base branch for pull, or \\'master\\')')\n+    return parser.parse_args()\n+\n+def main():\n+    # Extract settings from git repo\n+    repo = git_config_get('githubmerge.repository')\n+    host = git_config_get('githubmerge.host','git@github.com')\n+    opt_branch = git_config_get('githubmerge.branch',None)\n+    testcmd = git_config_get('githubmerge.testcmd')\n+    signingkey = git_config_get('user.signingkey')\n+    if repo is None:\n+        print(\"ERROR: No repository configured. Use this command to set:\", file=stderr)\n+        print(\"git config githubmerge.repository <owner>/<repo>\", file=stderr)\n+        exit(1)\n+    if signingkey is None:\n+        print(\"ERROR: No GPG signing key set. Set one using:\",file=stderr)\n+        print(\"git config --global user.signingkey <key>\",file=stderr)\n+        exit(1)\n+\n+    host_repo = host+\":\"+repo # shortcut for push/pull target\n+\n+    # Extract settings from command line\n+    args = parse_arguments()\n+    pull = str(args.pull[0])\n+\n+    # Receive pull information from github\n+    info = retrieve_pr_info(repo,pull)\n+    if info is None:\n+        exit(1)\n+    title = info['title']\n+    # precedence order for destination branch argument:\n+    #   - command line argument\n+    #   - githubmerge.branch setting\n+    #   - base branch for pull (as retrieved from github)\n+    #   - 'master'\n+    branch = args.branch or opt_branch or info['base']['ref'] or 'master'\n+\n+    # Initialize source branches\n+    head_branch = 'pull/'+pull+'/head'\n+    base_branch = 'pull/'+pull+'/base'\n+    merge_branch = 'pull/'+pull+'/merge'\n+    local_merge_branch = 'pull/'+pull+'/local-merge'\n+\n+    devnull = open(os.devnull,'w')\n+    try:\n+        subprocess.check_call([GIT,'checkout','-q',branch])\n+    except subprocess.CalledProcessError as e:\n+        print(\"ERROR: Cannot check out branch %s.\" % (branch), file=stderr)\n+        exit(3)\n+    try:\n+        subprocess.check_call([GIT,'fetch','-q',host_repo,'+refs/pull/'+pull+'/*:refs/heads/pull/'+pull+'/*'])\n+    except subprocess.CalledProcessError as e:\n+        print(\"ERROR: Cannot find pull request #%s on %s.\" % (pull,host_repo), file=stderr)\n+        exit(3)\n+    try:\n+        subprocess.check_call([GIT,'log','-q','-1','refs/heads/'+head_branch], stdout=devnull, stderr=stdout)\n+    except subprocess.CalledProcessError as e:\n+        print(\"ERROR: Cannot find head of pull request #%s on %s.\" % (pull,host_repo), file=stderr)\n+        exit(3)\n+    try:\n+        subprocess.check_call([GIT,'log','-q','-1','refs/heads/'+merge_branch], stdout=devnull, stderr=stdout)\n+    except subprocess.CalledProcessError as e:\n+        print(\"ERROR: Cannot find merge of pull request #%s on %s.\" % (pull,host_repo), file=stderr)\n+        exit(3)\n+    try:\n+        subprocess.check_call([GIT,'fetch','-q',host_repo,'+refs/heads/'+branch+':refs/heads/'+base_branch])\n+    except subprocess.CalledProcessError as e:\n+        print(\"ERROR: Cannot find branch %s on %s.\" % (branch,host_repo), file=stderr)\n+        exit(3)\n+    subprocess.check_call([GIT,'checkout','-q',base_branch])\n+    subprocess.call([GIT,'branch','-q','-D',local_merge_branch], stderr=devnull)\n+    subprocess.check_call([GIT,'checkout','-q','-b',local_merge_branch])\n+\n+    try:\n+        # Create unsigned merge commit.\n+        if title:\n+            firstline = 'Merge #%s: %s' % (pull,title)\n+        else:\n+            firstline = 'Merge #%s' % (pull,)\n+        message = firstline + '\\n\\n'\n+        message += subprocess.check_output([GIT,'log','--no-merges','--topo-order','--pretty=format:%h %s (%an)',base_branch+'..'+head_branch]).decode('utf-8')\n+        try:\n+            subprocess.check_call([GIT,'merge','-q','--commit','--no-edit','--no-ff','-m',message.encode('utf-8'),head_branch])\n+        except subprocess.CalledProcessError as e:\n+            print(\"ERROR: Cannot be merged cleanly.\",file=stderr)\n+            subprocess.check_call([GIT,'merge','--abort'])\n+            exit(4)\n+        logmsg = subprocess.check_output([GIT,'log','--pretty=format:%s','-n','1']).decode('utf-8')\n+        if logmsg.rstrip() != firstline.rstrip():\n+            print(\"ERROR: Creating merge failed (already merged?).\",file=stderr)\n+            exit(4)\n+\n+        print('%s#%s%s %s %sinto %s%s' % (ATTR_RESET+ATTR_PR,pull,ATTR_RESET,title,ATTR_RESET+ATTR_PR,branch,ATTR_RESET))\n+        subprocess.check_call([GIT,'log','--graph','--topo-order','--pretty=format:'+COMMIT_FORMAT,base_branch+'..'+head_branch])\n+        print()\n+        # Run test command if configured.\n+        if testcmd:\n+            # Go up to the repository's root.\n+            toplevel = subprocess.check_output([GIT,'rev-parse','--show-toplevel']).strip()\n+            os.chdir(toplevel)\n+            if subprocess.call(testcmd,shell=True):\n+                print(\"ERROR: Running %s failed.\" % testcmd,file=stderr)\n+                exit(5)\n+\n+            # Show the created merge.\n+            diff = subprocess.check_output([GIT,'diff',merge_branch+'..'+local_merge_branch])\n+            subprocess.check_call([GIT,'diff',base_branch+'..'+local_merge_branch])\n+            if diff:\n+                print(\"WARNING: merge differs from github!\",file=stderr)\n+                reply = ask_prompt(\"Type 'ignore' to continue.\")\n+                if reply.lower() == 'ignore':\n+                    print(\"Difference with github ignored.\",file=stderr)\n+                else:\n+                    exit(6)\n+            reply = ask_prompt(\"Press 'd' to accept the diff.\")\n+            if reply.lower() == 'd':\n+                print(\"Diff accepted.\",file=stderr)\n+            else:\n+                print(\"ERROR: Diff rejected.\",file=stderr)\n+                exit(6)\n+        else:\n+            # Verify the result manually.\n+            print(\"Dropping you on a shell so you can try building/testing the merged source.\",file=stderr)\n+            print(\"Run 'git diff HEAD~' to show the changes being merged.\",file=stderr)\n+            print(\"Type 'exit' when done.\",file=stderr)\n+            if os.path.isfile('/etc/debian_version'): # Show pull number on Debian default prompt\n+                os.putenv('debian_chroot',pull)\n+            subprocess.call([BASH,'-i'])\n+            reply = ask_prompt(\"Type 'm' to accept the merge.\")\n+            if reply.lower() == 'm':\n+                print(\"Merge accepted.\",file=stderr)\n+            else:\n+                print(\"ERROR: Merge rejected.\",file=stderr)\n+                exit(7)\n+\n+        # Sign the merge commit.\n+        reply = ask_prompt(\"Type 's' to sign off on the merge.\")\n+        if reply == 's':\n+            try:\n+                subprocess.check_call([GIT,'commit','-q','--gpg-sign','--amend','--no-edit'])\n+            except subprocess.CalledProcessError as e:\n+                print(\"Error signing, exiting.\",file=stderr)\n+                exit(1)\n+        else:\n+            print(\"Not signing off on merge, exiting.\",file=stderr)\n+            exit(1)\n+\n+        # Put the result in branch.\n+        subprocess.check_call([GIT,'checkout','-q',branch])\n+        subprocess.check_call([GIT,'reset','-q','--hard',local_merge_branch])\n+    finally:\n+        # Clean up temporary branches.\n+        subprocess.call([GIT,'checkout','-q',branch])\n+        subprocess.call([GIT,'branch','-q','-D',head_branch],stderr=devnull)\n+        subprocess.call([GIT,'branch','-q','-D',base_branch],stderr=devnull)\n+        subprocess.call([GIT,'branch','-q','-D',merge_branch],stderr=devnull)\n+        subprocess.call([GIT,'branch','-q','-D',local_merge_branch],stderr=devnull)\n+\n+    # Push the result.\n+    reply = ask_prompt(\"Type 'push' to push the result to %s, branch %s.\" % (host_repo,branch))\n+    if reply.lower() == 'push':\n+        subprocess.check_call([GIT,'push',host_repo,'refs/heads/'+branch])\n+\n+if __name__ == '__main__':\n+    main()\n+"
      },
      {
        "sha": "afb53f0390f0680a87cabd8c40d0034e1ba57405",
        "filename": "contrib/devtools/github-merge.sh",
        "status": "removed",
        "additions": 0,
        "deletions": 185,
        "changes": 185,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9df179d2e3abdee7d1f255d9be17c8b72dff06a/contrib/devtools/github-merge.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9df179d2e3abdee7d1f255d9be17c8b72dff06a/contrib/devtools/github-merge.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/github-merge.sh?ref=e9df179d2e3abdee7d1f255d9be17c8b72dff06a",
        "patch": "@@ -1,185 +0,0 @@\n-#!/bin/bash\n-\n-# This script will locally construct a merge commit for a pull request on a\n-# github repository, inspect it, sign it and optionally push it.\n-\n-# The following temporary branches are created/overwritten and deleted:\n-# * pull/$PULL/base (the current master we're merging onto)\n-# * pull/$PULL/head (the current state of the remote pull request)\n-# * pull/$PULL/merge (github's merge)\n-# * pull/$PULL/local-merge (our merge)\n-\n-# In case of a clean merge that is accepted by the user, the local branch with\n-# name $BRANCH is overwritten with the merged result, and optionally pushed.\n-\n-REPO=\"$(git config --get githubmerge.repository)\"\n-if [[ \"d$REPO\" == \"d\" ]]; then\n-  echo \"ERROR: No repository configured. Use this command to set:\" >&2\n-  echo \"git config githubmerge.repository <owner>/<repo>\" >&2\n-  echo \"In addition, you can set the following variables:\" >&2\n-  echo \"- githubmerge.host (default git@github.com)\" >&2\n-  echo \"- githubmerge.branch (default master)\" >&2\n-  echo \"- githubmerge.testcmd (default none)\" >&2\n-  exit 1\n-fi\n-\n-HOST=\"$(git config --get githubmerge.host)\"\n-if [[ \"d$HOST\" == \"d\" ]]; then\n-  HOST=\"git@github.com\"\n-fi\n-\n-BRANCH=\"$(git config --get githubmerge.branch)\"\n-if [[ \"d$BRANCH\" == \"d\" ]]; then\n-  BRANCH=\"master\"\n-fi\n-\n-TESTCMD=\"$(git config --get githubmerge.testcmd)\"\n-\n-PULL=\"$1\"\n-\n-if [[ \"d$PULL\" == \"d\" ]]; then\n-  echo \"Usage: $0 pullnumber [branch]\" >&2\n-  exit 2\n-fi\n-\n-if [[ \"d$2\" != \"d\" ]]; then\n-  BRANCH=\"$2\"\n-fi\n-\n-# Initialize source branches.\n-git checkout -q \"$BRANCH\"\n-if git fetch -q \"$HOST\":\"$REPO\" \"+refs/pull/$PULL/*:refs/heads/pull/$PULL/*\"; then\n-  if ! git log -q -1 \"refs/heads/pull/$PULL/head\" >/dev/null 2>&1; then\n-    echo \"ERROR: Cannot find head of pull request #$PULL on $HOST:$REPO.\" >&2\n-    exit 3\n-  fi\n-  if ! git log -q -1 \"refs/heads/pull/$PULL/merge\" >/dev/null 2>&1; then\n-    echo \"ERROR: Cannot find merge of pull request #$PULL on $HOST:$REPO.\" >&2\n-    exit 3\n-  fi\n-else\n-  echo \"ERROR: Cannot find pull request #$PULL on $HOST:$REPO.\" >&2\n-  exit 3\n-fi\n-if git fetch -q \"$HOST\":\"$REPO\" +refs/heads/\"$BRANCH\":refs/heads/pull/\"$PULL\"/base; then\n-  true\n-else\n-  echo \"ERROR: Cannot find branch $BRANCH on $HOST:$REPO.\" >&2\n-  exit 3\n-fi\n-git checkout -q pull/\"$PULL\"/base\n-git branch -q -D pull/\"$PULL\"/local-merge 2>/dev/null\n-git checkout -q -b pull/\"$PULL\"/local-merge\n-TMPDIR=\"$(mktemp -d -t ghmXXXXX)\"\n-\n-function cleanup() {\n-  git checkout -q \"$BRANCH\"\n-  git branch -q -D pull/\"$PULL\"/head 2>/dev/null\n-  git branch -q -D pull/\"$PULL\"/base 2>/dev/null\n-  git branch -q -D pull/\"$PULL\"/merge 2>/dev/null\n-  git branch -q -D pull/\"$PULL\"/local-merge 2>/dev/null\n-  rm -rf \"$TMPDIR\"\n-}\n-\n-# Create unsigned merge commit.\n-(\n-  echo \"Merge pull request #$PULL\"\n-  echo \"\"\n-  git log --no-merges --topo-order --pretty='format:%h %s (%an)' pull/\"$PULL\"/base..pull/\"$PULL\"/head\n-)>\"$TMPDIR/message\"\n-if git merge -q --commit --no-edit --no-ff -m \"$(<\"$TMPDIR/message\")\" pull/\"$PULL\"/head; then\n-  if [ \"d$(git log --pretty='format:%s' -n 1)\" != \"dMerge pull request #$PULL\" ]; then\n-    echo \"ERROR: Creating merge failed (already merged?).\" >&2\n-    cleanup\n-    exit 4\n-  fi\n-else\n-  echo \"ERROR: Cannot be merged cleanly.\" >&2\n-  git merge --abort\n-  cleanup\n-  exit 4\n-fi\n-\n-# Run test command if configured.\n-if [[ \"d$TESTCMD\" != \"d\" ]]; then\n-  # Go up to the repository's root.\n-  while [ ! -d .git ]; do cd ..; done\n-  if ! $TESTCMD; then\n-    echo \"ERROR: Running $TESTCMD failed.\" >&2\n-    cleanup\n-    exit 5\n-  fi\n-  # Show the created merge.\n-  git diff pull/\"$PULL\"/merge..pull/\"$PULL\"/local-merge >\"$TMPDIR\"/diff\n-  git diff pull/\"$PULL\"/base..pull/\"$PULL\"/local-merge\n-  if [[ \"$(<\"$TMPDIR\"/diff)\" != \"\" ]]; then\n-    echo \"WARNING: merge differs from github!\" >&2\n-    read -p \"Type 'ignore' to continue. \" -r >&2\n-    if [[ \"d$REPLY\" =~ ^d[iI][gG][nN][oO][rR][eE]$ ]]; then\n-      echo \"Difference with github ignored.\" >&2\n-    else\n-      cleanup\n-      exit 6\n-    fi\n-  fi\n-  read -p \"Press 'd' to accept the diff. \" -n 1 -r >&2\n-  echo\n-  if [[ \"d$REPLY\" =~ ^d[dD]$ ]]; then\n-    echo \"Diff accepted.\" >&2\n-  else\n-    echo \"ERROR: Diff rejected.\" >&2\n-    cleanup\n-    exit 6\n-  fi\n-else\n-  # Verify the result.\n-  echo \"Dropping you on a shell so you can try building/testing the merged source.\" >&2\n-  echo \"Run 'git diff HEAD~' to show the changes being merged.\" >&2\n-  echo \"Type 'exit' when done.\" >&2\n-  if [[ -f /etc/debian_version ]]; then # Show pull number in prompt on Debian default prompt\n-      export debian_chroot=\"$PULL\"\n-  fi\n-  bash -i\n-  read -p \"Press 'm' to accept the merge. \" -n 1 -r >&2\n-  echo\n-  if [[ \"d$REPLY\" =~ ^d[Mm]$ ]]; then\n-    echo \"Merge accepted.\" >&2\n-  else\n-    echo \"ERROR: Merge rejected.\" >&2\n-    cleanup\n-    exit 7\n-  fi\n-fi\n-\n-# Sign the merge commit.\n-read -p \"Press 's' to sign off on the merge. \" -n 1 -r >&2\n-echo\n-if [[ \"d$REPLY\" =~ ^d[Ss]$ ]]; then\n-  if [[ \"$(git config --get user.signingkey)\" == \"\" ]]; then\n-    echo \"ERROR: No GPG signing key set, not signing. Set one using:\" >&2\n-    echo \"git config --global user.signingkey <key>\" >&2\n-    cleanup\n-    exit 1\n-  else\n-    if ! git commit -q --gpg-sign --amend --no-edit; then\n-        echo \"Error signing, exiting.\"\n-        cleanup\n-        exit 1\n-    fi\n-  fi\n-else\n-  echo \"Not signing off on merge, exiting.\"\n-  cleanup\n-  exit 1\n-fi\n-\n-# Clean up temporary branches, and put the result in $BRANCH.\n-git checkout -q \"$BRANCH\"\n-git reset -q --hard pull/\"$PULL\"/local-merge\n-cleanup\n-\n-# Push the result.\n-read -p \"Type 'push' to push the result to $HOST:$REPO, branch $BRANCH. \" -r >&2\n-if [[ \"d$REPLY\" =~ ^d[Pp][Uu][Ss][Hh]$ ]]; then\n-  git push \"$HOST\":\"$REPO\" refs/heads/\"$BRANCH\"\n-fi"
      },
      {
        "sha": "b7b8dc00820d2404da7a97577dabc460ece65fc0",
        "filename": "contrib/devtools/optimize-pngs.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/devtools/optimize-pngs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/devtools/optimize-pngs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/optimize-pngs.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -1,4 +1,7 @@\n #!/usr/bin/env python\n+# Copyright (c) 2014-2015 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n '''\n Run this script every time you change one of the png files. Using pngcrush, it will optimize the png files, remove various color profiles, remove ancillary chunks (alla) and text chunks (text).\n #pngcrush -brute -ow -rem gAMA -rem cHRM -rem iCCP -rem sRGB -rem alla -rem text"
      },
      {
        "sha": "c90541e27119cdc274554c11e20eaa7ce53f2ce9",
        "filename": "contrib/devtools/security-check.py",
        "status": "modified",
        "additions": 62,
        "deletions": 27,
        "changes": 89,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/devtools/security-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/devtools/security-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/security-check.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -1,17 +1,21 @@\n-#!/usr/bin/python2\n+#!/usr/bin/env python\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n '''\n Perform basic ELF security checks on a series of executables.\n-Exit status will be 0 if succesful, and the program will be silent.\n+Exit status will be 0 if successful, and the program will be silent.\n Otherwise the exit status will be 1 and it will log which executables failed which checks.\n Needs `readelf` (for ELF) and `objdump` (for PE).\n '''\n-from __future__ import division,print_function\n+from __future__ import division,print_function,unicode_literals\n import subprocess\n import sys\n import os\n \n READELF_CMD = os.getenv('READELF', '/usr/bin/readelf')\n OBJDUMP_CMD = os.getenv('OBJDUMP', '/usr/bin/objdump')\n+NONFATAL = {'HIGH_ENTROPY_VA'} # checks which are non-fatal for now but only generate a warning\n \n def check_ELF_PIE(executable):\n     '''\n@@ -23,9 +27,9 @@ def check_ELF_PIE(executable):\n         raise IOError('Error opening file')\n \n     ok = False\n-    for line in stdout.split('\\n'):\n+    for line in stdout.split(b'\\n'):\n         line = line.split()\n-        if len(line)>=2 and line[0] == 'Type:' and line[1] == 'DYN':\n+        if len(line)>=2 and line[0] == b'Type:' and line[1] == b'DYN':\n             ok = True\n     return ok\n \n@@ -38,17 +42,17 @@ def get_ELF_program_headers(executable):\n     in_headers = False\n     count = 0\n     headers = []\n-    for line in stdout.split('\\n'):\n-        if line.startswith('Program Headers:'):\n+    for line in stdout.split(b'\\n'):\n+        if line.startswith(b'Program Headers:'):\n             in_headers = True\n-        if line == '':\n+        if line == b'':\n             in_headers = False\n         if in_headers:\n             if count == 1: # header line\n-                ofs_typ = line.find('Type')\n-                ofs_offset = line.find('Offset')\n-                ofs_flags = line.find('Flg')\n-                ofs_align = line.find('Align')\n+                ofs_typ = line.find(b'Type')\n+                ofs_offset = line.find(b'Offset')\n+                ofs_flags = line.find(b'Flg')\n+                ofs_align = line.find(b'Align')\n                 if ofs_typ == -1 or ofs_offset == -1 or ofs_flags == -1 or ofs_align  == -1:\n                     raise ValueError('Cannot parse elfread -lW output')\n             elif count > 1:\n@@ -65,9 +69,9 @@ def check_ELF_NX(executable):\n     have_wx = False\n     have_gnu_stack = False\n     for (typ, flags) in get_ELF_program_headers(executable):\n-        if typ == 'GNU_STACK':\n+        if typ == b'GNU_STACK':\n             have_gnu_stack = True\n-        if 'W' in flags and 'E' in flags: # section is both writable and executable\n+        if b'W' in flags and b'E' in flags: # section is both writable and executable\n             have_wx = True\n     return have_gnu_stack and not have_wx\n \n@@ -84,17 +88,17 @@ def check_ELF_RELRO(executable):\n         # However, the dynamic linker need to write to this area so these are RW.\n         # Glibc itself takes care of mprotecting this area R after relocations are finished.\n         # See also http://permalink.gmane.org/gmane.comp.gnu.binutils/71347\n-        if typ == 'GNU_RELRO':\n+        if typ == b'GNU_RELRO':\n             have_gnu_relro = True\n \n     have_bindnow = False\n     p = subprocess.Popen([READELF_CMD, '-d', '-W', executable], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)\n     (stdout, stderr) = p.communicate()\n     if p.returncode:\n         raise IOError('Error opening file')\n-    for line in stdout.split('\\n'):\n+    for line in stdout.split(b'\\n'):\n         tokens = line.split()\n-        if len(tokens)>1 and tokens[1] == '(BIND_NOW)':\n+        if len(tokens)>1 and tokens[1] == b'(BIND_NOW)' or (len(tokens)>2 and tokens[1] == b'(FLAGS)' and b'BIND_NOW' in tokens[2]):\n             have_bindnow = True\n     return have_gnu_relro and have_bindnow\n \n@@ -107,33 +111,57 @@ def check_ELF_Canary(executable):\n     if p.returncode:\n         raise IOError('Error opening file')\n     ok = False\n-    for line in stdout.split('\\n'):\n-        if '__stack_chk_fail' in line:\n+    for line in stdout.split(b'\\n'):\n+        if b'__stack_chk_fail' in line:\n             ok = True\n     return ok\n \n def get_PE_dll_characteristics(executable):\n     '''\n-    Get PE DllCharacteristics bits\n+    Get PE DllCharacteristics bits.\n+    Returns a tuple (arch,bits) where arch is 'i386:x86-64' or 'i386'\n+    and bits is the DllCharacteristics value.\n     '''\n     p = subprocess.Popen([OBJDUMP_CMD, '-x',  executable], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)\n     (stdout, stderr) = p.communicate()\n     if p.returncode:\n         raise IOError('Error opening file')\n+    arch = ''\n+    bits = 0\n     for line in stdout.split('\\n'):\n         tokens = line.split()\n+        if len(tokens)>=2 and tokens[0] == 'architecture:':\n+            arch = tokens[1].rstrip(',')\n         if len(tokens)>=2 and tokens[0] == 'DllCharacteristics':\n-            return int(tokens[1],16)\n-    return 0\n+            bits = int(tokens[1],16)\n+    return (arch,bits)\n \n+IMAGE_DLL_CHARACTERISTICS_HIGH_ENTROPY_VA = 0x0020\n+IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE    = 0x0040\n+IMAGE_DLL_CHARACTERISTICS_NX_COMPAT       = 0x0100\n \n-def check_PE_PIE(executable):\n+def check_PE_DYNAMIC_BASE(executable):\n     '''PIE: DllCharacteristics bit 0x40 signifies dynamicbase (ASLR)'''\n-    return bool(get_PE_dll_characteristics(executable) & 0x40)\n+    (arch,bits) = get_PE_dll_characteristics(executable)\n+    reqbits = IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE\n+    return (bits & reqbits) == reqbits\n+\n+# On 64 bit, must support high-entropy 64-bit address space layout randomization in addition to DYNAMIC_BASE\n+# to have secure ASLR.\n+def check_PE_HIGH_ENTROPY_VA(executable):\n+    '''PIE: DllCharacteristics bit 0x20 signifies high-entropy ASLR'''\n+    (arch,bits) = get_PE_dll_characteristics(executable)\n+    if arch == 'i386:x86-64': \n+        reqbits = IMAGE_DLL_CHARACTERISTICS_HIGH_ENTROPY_VA\n+    else: # Unnecessary on 32-bit\n+        assert(arch == 'i386')\n+        reqbits = 0\n+    return (bits & reqbits) == reqbits\n \n def check_PE_NX(executable):\n     '''NX: DllCharacteristics bit 0x100 signifies nxcompat (DEP)'''\n-    return bool(get_PE_dll_characteristics(executable) & 0x100)\n+    (arch,bits) = get_PE_dll_characteristics(executable)\n+    return (bits & IMAGE_DLL_CHARACTERISTICS_NX_COMPAT) == IMAGE_DLL_CHARACTERISTICS_NX_COMPAT\n \n CHECKS = {\n 'ELF': [\n@@ -143,7 +171,8 @@ def check_PE_NX(executable):\n     ('Canary', check_ELF_Canary)\n ],\n 'PE': [\n-    ('PIE', check_PE_PIE),\n+    ('DYNAMIC_BASE', check_PE_DYNAMIC_BASE),\n+    ('HIGH_ENTROPY_VA', check_PE_HIGH_ENTROPY_VA),\n     ('NX', check_PE_NX)\n ]\n }\n@@ -168,12 +197,18 @@ def identify_executable(executable):\n                 continue\n \n             failed = []\n+            warning = []\n             for (name, func) in CHECKS[etype]:\n                 if not func(filename):\n-                    failed.append(name)\n+                    if name in NONFATAL:\n+                        warning.append(name)\n+                    else:\n+                        failed.append(name)\n             if failed:\n                 print('%s: failed %s' % (filename, ' '.join(failed)))\n                 retval = 1\n+            if warning:\n+                print('%s: warning %s' % (filename, ' '.join(warning)))\n         except IOError:\n             print('%s: cannot open' % filename)\n             retval = 1"
      },
      {
        "sha": "deda49cc541043d0a05aee05038c69ee1dee51b3",
        "filename": "contrib/devtools/split-debug.sh.in",
        "status": "added",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/devtools/split-debug.sh.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/devtools/split-debug.sh.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/split-debug.sh.in?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -0,0 +1,10 @@\n+#!/bin/sh\n+\n+if [ $# -ne 3 ];\n+    then echo \"usage: $0 <input> <stripped-binary> <debug-binary>\"\n+fi\n+\n+@OBJCOPY@ --enable-deterministic-archives -p --only-keep-debug $1 $3\n+@OBJCOPY@ --enable-deterministic-archives -p --strip-debug $1 $2\n+@STRIP@ --enable-deterministic-archives -p -s $2\n+@OBJCOPY@ --enable-deterministic-archives -p --add-gnu-debuglink=$3 $2"
      },
      {
        "sha": "8f8685006e1150ea4cd36ec60ae10ed223b69b51",
        "filename": "contrib/devtools/symbol-check.py",
        "status": "modified",
        "additions": 36,
        "deletions": 32,
        "changes": 68,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/devtools/symbol-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/devtools/symbol-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/symbol-check.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -1,4 +1,4 @@\n-#!/usr/bin/python2\n+#!/usr/bin/env python\n # Copyright (c) 2014 Wladimir J. van der Laan\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n@@ -11,7 +11,7 @@\n \n     find ../gitian-builder/build -type f -executable | xargs python contrib/devtools/symbol-check.py\n '''\n-from __future__ import division, print_function\n+from __future__ import division, print_function, unicode_literals\n import subprocess\n import re\n import sys\n@@ -42,30 +42,33 @@\n 'GLIBCXX': (3,4,13),\n 'GLIBC':   (2,11)\n }\n+# See here for a description of _IO_stdin_used:\n+# https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=634261#109\n+\n # Ignore symbols that are exported as part of every executable\n IGNORE_EXPORTS = {\n-'_edata', '_end', '_init', '__bss_start', '_fini'\n+b'_edata', b'_end', b'_init', b'__bss_start', b'_fini', b'_IO_stdin_used'\n }\n READELF_CMD = os.getenv('READELF', '/usr/bin/readelf')\n CPPFILT_CMD = os.getenv('CPPFILT', '/usr/bin/c++filt')\n # Allowed NEEDED libraries\n ALLOWED_LIBRARIES = {\n # bitcoind and bitcoin-qt\n-'libgcc_s.so.1', # GCC base support\n-'libc.so.6', # C library\n-'libpthread.so.0', # threading\n-'libanl.so.1', # DNS resolve\n-'libm.so.6', # math library\n-'librt.so.1', # real-time (clock)\n-'ld-linux-x86-64.so.2', # 64-bit dynamic linker\n-'ld-linux.so.2', # 32-bit dynamic linker\n+b'libgcc_s.so.1', # GCC base support\n+b'libc.so.6', # C library\n+b'libpthread.so.0', # threading\n+b'libanl.so.1', # DNS resolve\n+b'libm.so.6', # math library\n+b'librt.so.1', # real-time (clock)\n+b'ld-linux-x86-64.so.2', # 64-bit dynamic linker\n+b'ld-linux.so.2', # 32-bit dynamic linker\n # bitcoin-qt only\n-'libX11-xcb.so.1', # part of X11\n-'libX11.so.6', # part of X11\n-'libxcb.so.1', # part of X11\n-'libfontconfig.so.1', # font support\n-'libfreetype.so.6', # font parsing\n-'libdl.so.2' # programming interface to dynamic linker\n+b'libX11-xcb.so.1', # part of X11\n+b'libX11.so.6', # part of X11\n+b'libxcb.so.1', # part of X11\n+b'libfontconfig.so.1', # font support\n+b'libfreetype.so.6', # font parsing\n+b'libdl.so.2' # programming interface to dynamic linker\n }\n \n class CPPFilt(object):\n@@ -78,7 +81,8 @@ def __init__(self):\n         self.proc = subprocess.Popen(CPPFILT_CMD, stdin=subprocess.PIPE, stdout=subprocess.PIPE)\n \n     def __call__(self, mangled):\n-        self.proc.stdin.write(mangled + '\\n')\n+        self.proc.stdin.write(mangled + b'\\n')\n+        self.proc.stdin.flush()\n         return self.proc.stdout.readline().rstrip()\n \n     def close(self):\n@@ -96,24 +100,24 @@ def read_symbols(executable, imports=True):\n     if p.returncode:\n         raise IOError('Could not read symbols for %s: %s' % (executable, stderr.strip()))\n     syms = []\n-    for line in stdout.split('\\n'):\n+    for line in stdout.split(b'\\n'):\n         line = line.split()\n-        if len(line)>7 and re.match('[0-9]+:$', line[0]):\n-            (sym, _, version) = line[7].partition('@')\n-            is_import = line[6] == 'UND'\n-            if version.startswith('@'):\n+        if len(line)>7 and re.match(b'[0-9]+:$', line[0]):\n+            (sym, _, version) = line[7].partition(b'@')\n+            is_import = line[6] == b'UND'\n+            if version.startswith(b'@'):\n                 version = version[1:]\n             if is_import == imports:\n                 syms.append((sym, version))\n     return syms\n \n def check_version(max_versions, version):\n-    if '_' in version:\n-        (lib, _, ver) = version.rpartition('_')\n+    if b'_' in version:\n+        (lib, _, ver) = version.rpartition(b'_')\n     else:\n         lib = version\n         ver = '0'\n-    ver = tuple([int(x) for x in ver.split('.')])\n+    ver = tuple([int(x) for x in ver.split(b'.')])\n     if not lib in max_versions:\n         return False\n     return ver <= max_versions[lib]\n@@ -124,10 +128,10 @@ def read_libraries(filename):\n     if p.returncode:\n         raise IOError('Error opening file')\n     libraries = []\n-    for line in stdout.split('\\n'):\n+    for line in stdout.split(b'\\n'):\n         tokens = line.split()\n-        if len(tokens)>2 and tokens[1] == '(NEEDED)':\n-            match = re.match('^Shared library: \\[(.*)\\]$', ' '.join(tokens[2:]))\n+        if len(tokens)>2 and tokens[1] == b'(NEEDED)':\n+            match = re.match(b'^Shared library: \\[(.*)\\]$', b' '.join(tokens[2:]))\n             if match:\n                 libraries.append(match.group(1))\n             else:\n@@ -141,18 +145,18 @@ def read_libraries(filename):\n         # Check imported symbols\n         for sym,version in read_symbols(filename, True):\n             if version and not check_version(MAX_VERSIONS, version):\n-                print('%s: symbol %s from unsupported version %s' % (filename, cppfilt(sym), version))\n+                print('%s: symbol %s from unsupported version %s' % (filename, cppfilt(sym).decode('utf-8'), version.decode('utf-8')))\n                 retval = 1\n         # Check exported symbols\n         for sym,version in read_symbols(filename, False):\n             if sym in IGNORE_EXPORTS:\n                 continue\n-            print('%s: export of symbol %s not allowed' % (filename, cppfilt(sym)))\n+            print('%s: export of symbol %s not allowed' % (filename, cppfilt(sym).decode('utf-8')))\n             retval = 1\n         # Check dependency libraries\n         for library_name in read_libraries(filename):\n             if library_name not in ALLOWED_LIBRARIES:\n-                print('%s: NEEDED library %s is not allowed' % (filename, library_name))\n+                print('%s: NEEDED library %s is not allowed' % (filename, library_name.decode('utf-8')))\n                 retval = 1\n \n     exit(retval)"
      },
      {
        "sha": "c0f120392e62245639ae75f2caa45dd31b704c48",
        "filename": "contrib/devtools/test-security-check.py",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/devtools/test-security-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/devtools/test-security-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/test-security-check.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -1,4 +1,7 @@\n-#!/usr/bin/python2\n+#!/usr/bin/env python2\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n '''\n Test script for security-check.py\n '''"
      },
      {
        "sha": "78b9f9d179eb6d7c59f1b773be310a9a5e33be49",
        "filename": "contrib/devtools/update-translations.py",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/devtools/update-translations.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/devtools/update-translations.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/update-translations.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -1,4 +1,4 @@\n-#!/usr/bin/python\n+#!/usr/bin/env python\n # Copyright (c) 2014 Wladimir J. van der Laan\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n@@ -72,18 +72,21 @@ def sanitize_string(s):\n     '''Sanitize string for printing'''\n     return s.replace('\\n',' ')\n \n-def check_format_specifiers(source, translation, errors):\n+def check_format_specifiers(source, translation, errors, numerus):\n     source_f = split_format_specifiers(find_format_specifiers(source))\n     # assert that no source messages contain both Qt and strprintf format specifiers\n     # if this fails, go change the source as this is hacky and confusing!\n     assert(not(source_f[0] and source_f[1]))\n     try:\n         translation_f = split_format_specifiers(find_format_specifiers(translation))\n     except IndexError:\n-        errors.append(\"Parse error in translation '%s'\" % sanitize_string(translation))\n+        errors.append(\"Parse error in translation for '%s': '%s'\" % (sanitize_string(source), sanitize_string(translation)))\n         return False\n     else:\n         if source_f != translation_f:\n+            if numerus and source_f == (set(), ['n']) and translation_f == (set(), []) and translation.find('%') == -1:\n+                # Allow numerus translations to omit %n specifier (usually when it only has one possible value)\n+                return True\n             errors.append(\"Mismatch between '%s' and '%s'\" % (sanitize_string(source), sanitize_string(translation)))\n             return False\n     return True\n@@ -150,7 +153,7 @@ def postprocess_translations(reduce_diff_hacks=False):\n                     if translation is None:\n                         continue\n                     errors = []\n-                    valid = check_format_specifiers(source, translation, errors)\n+                    valid = check_format_specifiers(source, translation, errors, numerus)\n \n                     for error in errors:\n                         print('%s: %s' % (filename, error))"
      },
      {
        "sha": "53c24e3a876ca6f7dccc0143718a982b5d5c5414",
        "filename": "contrib/gitian-build.sh",
        "status": "added",
        "additions": 392,
        "deletions": 0,
        "changes": 392,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/gitian-build.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/gitian-build.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-build.sh?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -0,0 +1,392 @@\n+# Copyright (c) 2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+# What to do\n+sign=false\n+verify=false\n+build=false\n+setupenv=false\n+\n+# Systems to build\n+linux=true\n+windows=true\n+osx=true\n+\n+# Other Basic variables\n+SIGNER=\n+VERSION=\n+commit=false\n+url=https://github.com/bitcoin/bitcoin\n+proc=2\n+mem=2000\n+lxc=true\n+osslTarUrl=http://downloads.sourceforge.net/project/osslsigncode/osslsigncode/osslsigncode-1.7.1.tar.gz\n+osslPatchUrl=https://bitcoincore.org/cfields/osslsigncode-Backports-to-1.7.1.patch\n+scriptName=$(basename -- \"$0\")\n+signProg=\"gpg --detach-sign\"\n+commitFiles=true\n+\n+# Help Message\n+read -d '' usage <<- EOF\n+Usage: $scriptName [-c|u|v|b|s|B|o|h|j|m|] signer version\n+\n+Run this script from the directory containing the bitcoin, gitian-builder, gitian.sigs, and bitcoin-detached-sigs.\n+\n+Arguments:\n+signer          GPG signer to sign each build assert file\n+version\t\tVersion number, commit, or branch to build. If building a commit or branch, the -c option must be specified\n+\n+Options:\n+-c|--commit\tIndicate that the version argument is for a commit or branch\n+-u|--url\tSpecify the URL of the repository. Default is https://github.com/bitcoin/bitcoin\n+-v|--verify \tVerify the gitian build\n+-b|--build\tDo a gitiain build\n+-s|--sign\tMake signed binaries for Windows and Mac OSX\n+-B|--buildsign\tBuild both signed and unsigned binaries\n+-o|--os\t\tSpecify which Operating Systems the build is for. Default is lwx. l for linux, w for windows, x for osx\n+-j\t\tNumber of processes to use. Default 2\n+-m\t\tMemory to allocate in MiB. Default 2000\n+--kvm           Use KVM instead of LXC\n+--setup         Setup the gitian building environment. Uses KVM. If you want to use lxc, use the --lxc option. Only works on Debian-based systems (Ubuntu, Debian)\n+--detach-sign   Create the assert file for detached signing. Will not commit anything.\n+--no-commit     Do not commit anything to git\n+-h|--help\tPrint this help message\n+EOF\n+\n+# Get options and arguments\n+while :; do\n+    case $1 in\n+        # Verify\n+        -v|--verify)\n+\t    verify=true\n+            ;;\n+        # Build\n+        -b|--build)\n+\t    build=true\n+            ;;\n+        # Sign binaries\n+        -s|--sign)\n+\t    sign=true\n+            ;;\n+        # Build then Sign\n+        -B|--buildsign)\n+\t    sign=true\n+\t    build=true\n+            ;;\n+        # PGP Signer\n+        -S|--signer)\n+\t    if [ -n \"$2\" ]\n+\t    then\n+\t\tSIGNER=$2\n+\t\tshift\n+\t    else\n+\t\techo 'Error: \"--signer\" requires a non-empty argument.'\n+\t\texit 1\n+\t    fi\n+           ;;\n+        # Operating Systems\n+        -o|--os)\n+\t    if [ -n \"$2\" ]\n+\t    then\n+\t\tlinux=false\n+\t\twindows=false\n+\t\tosx=false\n+\t\tif [[ \"$2\" = *\"l\"* ]]\n+\t\tthen\n+\t\t    linux=true\n+\t\tfi\n+\t\tif [[ \"$2\" = *\"w\"* ]]\n+\t\tthen\n+\t\t    windows=true\n+\t\tfi\n+\t\tif [[ \"$2\" = *\"x\"* ]]\n+\t\tthen\n+\t\t    osx=true\n+\t\tfi\n+\t\tshift\n+\t    else\n+\t\techo 'Error: \"--os\" requires an argument containing an l (for linux), w (for windows), or x (for Mac OSX)\\n'\n+\t\texit 1\n+\t    fi\n+\t    ;;\n+\t# Help message\n+\t-h|--help)\n+\t    echo \"$usage\"\n+\t    exit 0\n+\t    ;;\n+\t# Commit or branch\n+\t-c|--commit)\n+\t    commit=true\n+\t    ;;\n+\t# Number of Processes\n+\t-j)\n+\t    if [ -n \"$2\" ]\n+\t    then\n+\t\tproc=$2\n+\t\tshift\n+\t    else\n+\t\techo 'Error: \"-j\" requires an argument'\n+\t\texit 1\n+\t    fi\n+\t    ;;\n+\t# Memory to allocate\n+\t-m)\n+\t    if [ -n \"$2\" ]\n+\t    then\n+\t\tmem=$2\n+\t\tshift\n+\t    else\n+\t\techo 'Error: \"-m\" requires an argument'\n+\t\texit 1\n+\t    fi\n+\t    ;;\n+\t# URL\n+\t-u)\n+\t    if [ -n \"$2\" ]\n+\t    then\n+\t\turl=$2\n+\t\tshift\n+\t    else\n+\t\techo 'Error: \"-u\" requires an argument'\n+\t\texit 1\n+\t    fi\n+\t    ;;\n+        # kvm\n+        --kvm)\n+            lxc=false\n+            ;;\n+        # Detach sign\n+        --detach-sign)\n+            signProg=\"true\"\n+            commitFiles=false\n+            ;;\n+        # Commit files\n+        --no-commit)\n+            commitFiles=false\n+            ;;\n+        # Setup\n+        --setup)\n+            setup=true\n+            ;;\n+\t*)               # Default case: If no more options then break out of the loop.\n+             break\n+    esac\n+    shift\n+done\n+\n+# Set up LXC\n+if [[ $lxc = true ]]\n+then\n+    export USE_LXC=1\n+    export LXC_BRIDGE=lxcbr0\n+    sudo ifconfig lxcbr0 up 10.0.2.2\n+fi\n+\n+# Check for OSX SDK\n+if [[ ! -e \"gitian-builder/inputs/MacOSX10.11.sdk.tar.gz\" && $osx == true ]]\n+then\n+    echo \"Cannot build for OSX, SDK does not exist. Will build for other OSes\"\n+    osx=false\n+fi\n+\n+# Get signer\n+if [[ -n\"$1\" ]]\n+then\n+    SIGNER=$1\n+    shift\n+fi\n+\n+# Get version\n+if [[ -n \"$1\" ]]\n+then\n+    VERSION=$1\n+    COMMIT=$VERSION\n+    shift\n+fi\n+\n+# Check that a signer is specified\n+if [[ $SIGNER == \"\" ]]\n+then\n+    echo \"$scriptName: Missing signer.\"\n+    echo \"Try $scriptName --help for more information\"\n+    exit 1\n+fi\n+\n+# Check that a version is specified\n+if [[ $VERSION == \"\" ]]\n+then\n+    echo \"$scriptName: Missing version.\"\n+    echo \"Try $scriptName --help for more information\"\n+    exit 1\n+fi\n+\n+# Add a \"v\" if no -c\n+if [[ $commit = false ]]\n+then\n+\tCOMMIT=\"v${VERSION}\"\n+fi\n+echo ${COMMIT}\n+\n+# Setup build environment\n+if [[ $setup = true ]]\n+then\n+    sudo apt-get install ruby apache2 git apt-cacher-ng python-vm-builder qemu-kvm qemu-utils\n+    git clone https://github.com/bitcoin-core/gitian.sigs.git\n+    git clone https://github.com/bitcoin-core/bitcoin-detached-sigs.git\n+    git clone https://github.com/devrandom/gitian-builder.git\n+    pushd ./gitian-builder\n+    if [[ -n \"$USE_LXC\" ]]\n+    then\n+        sudo apt-get install lxc\n+        bin/make-base-vm --suite trusty --arch amd64 --lxc\n+    else\n+        bin/make-base-vm --suite trusty --arch amd64\n+    fi\n+    popd\n+fi\n+\n+# Set up build\n+pushd ./bitcoin\n+git fetch\n+git checkout ${COMMIT}\n+popd\n+\n+# Build\n+if [[ $build = true ]]\n+then\n+\t# Make output folder\n+\tmkdir -p ./bitcoin-binaries/${VERSION}\n+\t\n+\t# Build Dependencies\n+\techo \"\"\n+\techo \"Building Dependencies\"\n+\techo \"\"\n+\tpushd ./gitian-builder\t\n+\tmkdir -p inputs\n+\twget -N -P inputs $osslPatchUrl\n+\twget -N -P inputs $osslTarUrl\n+\tmake -C ../bitcoin/depends download SOURCES_PATH=`pwd`/cache/common\n+\n+\t# Linux\n+\tif [[ $linux = true ]]\n+\tthen\n+            echo \"\"\n+\t    echo \"Compiling ${VERSION} Linux\"\n+\t    echo \"\"\n+\t    ./bin/gbuild -j ${proc} -m ${mem} --commit bitcoin=${COMMIT} --url bitcoin=${url} ../bitcoin/contrib/gitian-descriptors/gitian-linux.yml\n+\t    ./bin/gsign -p $signProg --signer $SIGNER --release ${VERSION}-linux --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-linux.yml\n+\t    mv build/out/bitcoin-*.tar.gz build/out/src/bitcoin-*.tar.gz ../bitcoin-binaries/${VERSION}\n+\tfi\n+\t# Windows\n+\tif [[ $windows = true ]]\n+\tthen\n+\t    echo \"\"\n+\t    echo \"Compiling ${VERSION} Windows\"\n+\t    echo \"\"\n+\t    ./bin/gbuild -j ${proc} -m ${mem} --commit bitcoin=${COMMIT} --url bitcoin=${url} ../bitcoin/contrib/gitian-descriptors/gitian-win.yml\n+\t    ./bin/gsign -p $signProg --signer $SIGNER --release ${VERSION}-win-unsigned --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-win.yml\n+\t    mv build/out/bitcoin-*-win-unsigned.tar.gz inputs/bitcoin-win-unsigned.tar.gz\n+\t    mv build/out/bitcoin-*.zip build/out/bitcoin-*.exe ../bitcoin-binaries/${VERSION}\n+\tfi\n+\t# Mac OSX\n+\tif [[ $osx = true ]]\n+\tthen\n+\t    echo \"\"\n+\t    echo \"Compiling ${VERSION} Mac OSX\"\n+\t    echo \"\"\n+\t    ./bin/gbuild -j ${proc} -m ${mem} --commit bitcoin=${COMMIT} --url bitcoin=${url} ../bitcoin/contrib/gitian-descriptors/gitian-osx.yml\n+\t    ./bin/gsign -p $signProg --signer $SIGNER --release ${VERSION}-osx-unsigned --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-osx.yml\n+\t    mv build/out/bitcoin-*-osx-unsigned.tar.gz inputs/bitcoin-osx-unsigned.tar.gz\n+\t    mv build/out/bitcoin-*.tar.gz build/out/bitcoin-*.dmg ../bitcoin-binaries/${VERSION}\n+\tfi\n+\tpopd\n+\n+        if [[ $commitFiles = true ]]\n+        then\n+\t    # Commit to gitian.sigs repo\n+            echo \"\"\n+            echo \"Committing ${VERSION} Unsigned Sigs\"\n+            echo \"\"\n+            pushd gitian.sigs\n+            git add ${VERSION}-linux/${SIGNER}\n+            git add ${VERSION}-win-unsigned/${SIGNER}\n+            git add ${VERSION}-osx-unsigned/${SIGNER}\n+            git commit -a -m \"Add ${VERSION} unsigned sigs for ${SIGNER}\"\n+            popd\n+        fi\n+fi\n+\n+# Verify the build\n+if [[ $verify = true ]]\n+then\n+\t# Linux\n+\tpushd ./gitian-builder\n+\techo \"\"\n+\techo \"Verifying v${VERSION} Linux\"\n+\techo \"\"\n+\t./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-linux ../bitcoin/contrib/gitian-descriptors/gitian-linux.yml\n+\t# Windows\n+\techo \"\"\n+\techo \"Verifying v${VERSION} Windows\"\n+\techo \"\"\n+\t./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-win-unsigned ../bitcoin/contrib/gitian-descriptors/gitian-win.yml\n+\t# Mac OSX\t\n+\techo \"\"\n+\techo \"Verifying v${VERSION} Mac OSX\"\n+\techo \"\"\t\n+\t./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-osx-unsigned ../bitcoin/contrib/gitian-descriptors/gitian-osx.yml\n+\t# Signed Windows\n+\techo \"\"\n+\techo \"Verifying v${VERSION} Signed Windows\"\n+\techo \"\"\n+\t./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-osx-signed ../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n+\t# Signed Mac OSX\n+\techo \"\"\n+\techo \"Verifying v${VERSION} Signed Mac OSX\"\n+\techo \"\"\n+\t./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-osx-signed ../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\t\n+\tpopd\n+fi\n+\n+# Sign binaries\n+if [[ $sign = true ]]\n+then\n+\t\n+        pushd ./gitian-builder\n+\t# Sign Windows\n+\tif [[ $windows = true ]]\n+\tthen\n+\t    echo \"\"\n+\t    echo \"Signing ${VERSION} Windows\"\n+\t    echo \"\"\n+\t    ./bin/gbuild -i --commit signature=${COMMIT} ../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml\n+\t    ./bin/gsign -p $signProg --signer $SIGNER --release ${VERSION}-win-signed --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml\n+\t    mv build/out/bitcoin-*win64-setup.exe ../bitcoin-binaries/${VERSION}\n+\t    mv build/out/bitcoin-*win32-setup.exe ../bitcoin-binaries/${VERSION}\n+\tfi\n+\t# Sign Mac OSX\n+\tif [[ $osx = true ]]\n+\tthen\n+\t    echo \"\"\n+\t    echo \"Signing ${VERSION} Mac OSX\"\n+\t    echo \"\"\n+\t    ./bin/gbuild -i --commit signature=${COMMIT} ../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n+\t    ./bin/gsign -p $signProg --signer $SIGNER --release ${VERSION}-osx-signed --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n+\t    mv build/out/bitcoin-osx-signed.dmg ../bitcoin-binaries/${VERSION}/bitcoin-${VERSION}-osx.dmg\n+\tfi\n+\tpopd\n+\n+        if [[ $commitFiles = true ]]\n+        then\n+            # Commit Sigs\n+            pushd gitian.sigs\n+            echo \"\"\n+            echo \"Committing ${VERSION} Signed Sigs\"\n+            echo \"\"\n+            git add ${VERSION}-win-signed/${SIGNER}\n+            git add ${VERSION}-osx-signed/${SIGNER}\n+            git commit -a -m \"Add ${VERSION} signed binary sigs for ${SIGNER}\"\n+            popd\n+        fi\n+fi"
      },
      {
        "sha": "6f43119ba24e686d5daff18b4fed36948d6bfd99",
        "filename": "contrib/gitian-descriptors/gitian-linux.yml",
        "status": "modified",
        "additions": 93,
        "deletions": 18,
        "changes": 111,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/gitian-descriptors/gitian-linux.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/gitian-descriptors/gitian-linux.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-linux.yml?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -5,27 +5,42 @@ suites:\n - \"trusty\"\n architectures:\n - \"amd64\"\n-packages: \n-- \"g++-multilib\"\n+packages:\n+- \"curl\"\n+- \"g++-aarch64-linux-gnu\"\n+- \"g++-4.8-aarch64-linux-gnu\"\n+- \"gcc-4.8-aarch64-linux-gnu\"\n+- \"binutils-aarch64-linux-gnu\"\n+- \"g++-arm-linux-gnueabihf\"\n+- \"g++-4.8-arm-linux-gnueabihf\"\n+- \"gcc-4.8-arm-linux-gnueabihf\"\n+- \"binutils-arm-linux-gnueabihf\"\n+- \"g++-4.8-multilib\"\n+- \"gcc-4.8-multilib\"\n+- \"binutils-gold\"\n - \"git-core\"\n - \"pkg-config\"\n - \"autoconf\"\n - \"libtool\"\n - \"automake\"\n - \"faketime\"\n - \"bsdmainutils\"\n-- \"binutils-gold\"\n-reference_datetime: \"2015-06-01 00:00:00\"\n+- \"ca-certificates\"\n+- \"python\"\n remotes:\n - \"url\": \"https://github.com/bitcoin/bitcoin.git\"\n   \"dir\": \"bitcoin\"\n files: []\n script: |\n+\n   WRAP_DIR=$HOME/wrapped\n-  HOSTS=\"i686-pc-linux-gnu x86_64-unknown-linux-gnu\"\n-  CONFIGFLAGS=\"--enable-glibc-back-compat --enable-reduce-exports LDFLAGS=-static-libstdc++\"\n+  HOSTS=\"i686-pc-linux-gnu x86_64-linux-gnu arm-linux-gnueabihf aarch64-linux-gnu\"\n+  CONFIGFLAGS=\"--enable-glibc-back-compat --enable-reduce-exports --disable-bench --disable-gui-tests\"\n   FAKETIME_HOST_PROGS=\"\"\n-  FAKETIME_PROGS=\"date ar ranlib nm strip\"\n+  FAKETIME_PROGS=\"date ar ranlib nm\"\n+  HOST_CFLAGS=\"-O2 -g\"\n+  HOST_CXXFLAGS=\"-O2 -g\"\n+  HOST_LDFLAGS=-static-libstdc++\n \n   export QT_RCC_TEST=1\n   export GZIP=\"-9n\"\n@@ -39,39 +54,86 @@ script: |\n     mkdir -p ${BASE_CACHE} ${SOURCES_PATH}\n   fi\n \n-  # Create global faketime wrappers\n+  function create_global_faketime_wrappers {\n   for prog in ${FAKETIME_PROGS}; do\n     echo '#!/bin/bash' > ${WRAP_DIR}/${prog}\n     echo \"REAL=\\`which -a ${prog} | grep -v ${WRAP_DIR}/${prog} | head -1\\`\" >> ${WRAP_DIR}/${prog}\n     echo 'export LD_PRELOAD=/usr/lib/x86_64-linux-gnu/faketime/libfaketime.so.1' >> ${WRAP_DIR}/${prog}\n-    echo \"export FAKETIME=\\\"${REFERENCE_DATETIME}\\\"\" >> ${WRAP_DIR}/${prog}\n+    echo \"export FAKETIME=\\\"$1\\\"\" >> ${WRAP_DIR}/${prog}\n     echo \"\\$REAL \\$@\" >> $WRAP_DIR/${prog}\n     chmod +x ${WRAP_DIR}/${prog}\n   done\n+  }\n \n-  # Create per-host faketime wrappers\n+  function create_per-host_faketime_wrappers {\n   for i in $HOSTS; do\n     for prog in ${FAKETIME_HOST_PROGS}; do\n         echo '#!/bin/bash' > ${WRAP_DIR}/${i}-${prog}\n         echo \"REAL=\\`which -a ${i}-${prog} | grep -v ${WRAP_DIR}/${i}-${prog} | head -1\\`\" >> ${WRAP_DIR}/${i}-${prog}\n         echo 'export LD_PRELOAD=/usr/lib/x86_64-linux-gnu/faketime/libfaketime.so.1' >> ${WRAP_DIR}/${i}-${prog}\n-        echo \"export FAKETIME=\\\"${REFERENCE_DATETIME}\\\"\" >> ${WRAP_DIR}/${i}-${prog}\n+        echo \"export FAKETIME=\\\"$1\\\"\" >> ${WRAP_DIR}/${i}-${prog}\n         echo \"\\$REAL \\$@\" >> $WRAP_DIR/${i}-${prog}\n         chmod +x ${WRAP_DIR}/${i}-${prog}\n     done\n   done\n+  }\n+\n+  # Faketime for depends so intermediate results are comparable\n+  export PATH_orig=${PATH}\n+  create_global_faketime_wrappers \"2000-01-01 12:00:00\"\n+  create_per-host_faketime_wrappers \"2000-01-01 12:00:00\"\n   export PATH=${WRAP_DIR}:${PATH}\n \n+  EXTRA_INCLUDES_BASE=$WRAP_DIR/extra_includes\n+  mkdir -p $EXTRA_INCLUDES_BASE\n+\n+  # x86 needs /usr/include/i386-linux-gnu/asm pointed to /usr/include/x86_64-linux-gnu/asm,\n+  # but we can't write there. Instead, create a link here and force it to be included in the\n+  # search paths by wrapping gcc/g++.\n+\n+  mkdir -p $EXTRA_INCLUDES_BASE/i686-pc-linux-gnu\n+  rm -f $WRAP_DIR/extra_includes/i686-pc-linux-gnu/asm\n+  ln -s /usr/include/x86_64-linux-gnu/asm $EXTRA_INCLUDES_BASE/i686-pc-linux-gnu/asm\n+\n+  for prog in gcc g++; do\n+  rm -f ${WRAP_DIR}/${prog}\n+  cat << EOF > ${WRAP_DIR}/${prog}\n+  #!/bin/bash\n+  REAL=\"`which -a ${prog} | grep -v ${WRAP_DIR}/${prog} | head -1`\"\n+  for var in \"\\$@\"\n+  do\n+    if [ \"\\$var\" = \"-m32\" ]; then\n+      export C_INCLUDE_PATH=\"$EXTRA_INCLUDES_BASE/i686-pc-linux-gnu\"\n+      export CPLUS_INCLUDE_PATH=\"$EXTRA_INCLUDES_BASE/i686-pc-linux-gnu\"\n+      break\n+    fi\n+  done\n+  \\$REAL \\$@\n+  EOF\n+  chmod +x ${WRAP_DIR}/${prog}\n+  done\n+\n   cd bitcoin\n   BASEPREFIX=`pwd`/depends\n   # Build dependencies for each host\n   for i in $HOSTS; do\n+    EXTRA_INCLUDES=\"$EXTRA_INCLUDES_BASE/$i\"\n+    if [ -d \"$EXTRA_INCLUDES\" ]; then\n+      export HOST_ID_SALT=\"$EXTRA_INCLUDES\"\n+    fi\n     make ${MAKEOPTS} -C ${BASEPREFIX} HOST=\"${i}\"\n+    unset HOST_ID_SALT\n   done\n \n+  # Faketime for binaries\n+  export PATH=${PATH_orig}\n+  create_global_faketime_wrappers \"${REFERENCE_DATETIME}\"\n+  create_per-host_faketime_wrappers \"${REFERENCE_DATETIME}\"\n+  export PATH=${WRAP_DIR}:${PATH}\n+\n   # Create the release tarball using (arbitrarily) the first host\n   ./autogen.sh\n-  ./configure --prefix=${BASEPREFIX}/`echo \"${HOSTS}\" | awk '{print $1;}'`\n+  CONFIG_SITE=${BASEPREFIX}/`echo \"${HOSTS}\" | awk '{print $1;}'`/share/config.site ./configure --prefix=/\n   make dist\n   SOURCEDIST=`echo bitcoin-*.tar.gz`\n   DISTNAME=`echo ${SOURCEDIST} | sed 's/.tar.*//'`\n@@ -92,18 +154,31 @@ script: |\n     mkdir -p ${INSTALLPATH}\n     tar --strip-components=1 -xf ../$SOURCEDIST\n \n-    ./configure --prefix=${BASEPREFIX}/${i} --bindir=${INSTALLPATH}/bin --includedir=${INSTALLPATH}/include --libdir=${INSTALLPATH}/lib --disable-ccache --disable-maintainer-mode --disable-dependency-tracking ${CONFIGFLAGS}\n+    CONFIG_SITE=${BASEPREFIX}/${i}/share/config.site ./configure --prefix=/ --disable-ccache --disable-maintainer-mode --disable-dependency-tracking ${CONFIGFLAGS} CFLAGS=\"${HOST_CFLAGS}\" CXXFLAGS=\"${HOST_CXXFLAGS}\" LDFLAGS=\"${HOST_LDFLAGS}\"\n     make ${MAKEOPTS}\n-    make install-strip\n+    make ${MAKEOPTS} -C src check-security\n+\n+    #TODO: This is a quick hack that disables symbol checking for arm.\n+    #      Instead, we should investigate why these are popping up.\n+    #      For aarch64, we'll need to bump up the min GLIBC version, as the abi\n+    #      support wasn't introduced until 2.17.\n+    case $i in\n+       aarch64-*) : ;;\n+       arm-*) : ;;\n+       *) make ${MAKEOPTS} -C src check-symbols ;;\n+    esac\n+\n+    make install DESTDIR=${INSTALLPATH}\n     cd installed\n     find . -name \"lib*.la\" -delete\n     find . -name \"lib*.a\" -delete\n     rm -rf ${DISTNAME}/lib/pkgconfig\n-    find ${DISTNAME} | sort | tar --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ${OUTDIR}/${DISTNAME}-${i}.tar.gz\n+    find ${DISTNAME}/bin -type f -executable -exec ../contrib/devtools/split-debug.sh {} {} {}.dbg \\;\n+    find ${DISTNAME}/lib -type f -exec ../contrib/devtools/split-debug.sh {} {} {}.dbg \\;\n+    find ${DISTNAME} -not -name \"*.dbg\" | sort | tar --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ${OUTDIR}/${DISTNAME}-${i}.tar.gz\n+    find ${DISTNAME} -name \"*.dbg\" | sort | tar --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ${OUTDIR}/${DISTNAME}-${i}-debug.tar.gz\n     cd ../../\n+    rm -rf distsrc-${i}\n   done\n   mkdir -p $OUTDIR/src\n   mv $SOURCEDIST $OUTDIR/src\n-  mv ${OUTDIR}/${DISTNAME}-x86_64-*.tar.gz ${OUTDIR}/${DISTNAME}-linux64.tar.gz\n-  mv ${OUTDIR}/${DISTNAME}-i686-*.tar.gz ${OUTDIR}/${DISTNAME}-linux32.tar.gz\n-"
      },
      {
        "sha": "f6e9414ab1bf2ec0fa0f098fa62972bb06281f43",
        "filename": "contrib/gitian-descriptors/gitian-osx-signer.yml",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/gitian-descriptors/gitian-osx-signer.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/gitian-descriptors/gitian-osx-signer.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-osx-signer.yml?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -5,11 +5,9 @@ suites:\n architectures:\n - \"amd64\"\n packages:\n-- \"libc6:i386\"\n - \"faketime\"\n-reference_datetime: \"2015-06-01 00:00:00\"\n remotes:\n-- \"url\": \"https://github.com/bitcoin/bitcoin-detached-sigs.git\"\n+- \"url\": \"https://github.com/bitcoin-core/bitcoin-detached-sigs.git\"\n   \"dir\": \"signature\"\n files:\n - \"bitcoin-osx-unsigned.tar.gz\"\n@@ -33,6 +31,7 @@ script: |\n   SIGNED=bitcoin-osx-signed.dmg\n \n   tar -xf ${UNSIGNED}\n+  OSX_VOLNAME=\"$(cat osx_volname)\"\n   ./detached-sig-apply.sh ${UNSIGNED} signature/osx\n-  ${WRAP_DIR}/genisoimage -no-cache-inodes -D -l -probe -V \"Bitcoin-Core\" -no-pad -r -apple -o uncompressed.dmg signed-app\n+  ${WRAP_DIR}/genisoimage -no-cache-inodes -D -l -probe -V \"${OSX_VOLNAME}\" -no-pad -r -dir-mode 0755 -apple -o uncompressed.dmg signed-app\n   ${WRAP_DIR}/dmg dmg uncompressed.dmg ${OUTDIR}/${SIGNED}"
      },
      {
        "sha": "991976d59eaa067143af065830859e63aaf92488",
        "filename": "contrib/gitian-descriptors/gitian-osx.yml",
        "status": "modified",
        "additions": 37,
        "deletions": 13,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/gitian-descriptors/gitian-osx.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/gitian-descriptors/gitian-osx.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-osx.yml?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -5,29 +5,37 @@ suites:\n - \"trusty\"\n architectures:\n - \"amd64\"\n-packages: \n+packages:\n+- \"ca-certificates\"\n+- \"curl\"\n - \"g++\"\n - \"git-core\"\n - \"pkg-config\"\n - \"autoconf\"\n+- \"librsvg2-bin\"\n+- \"libtiff-tools\"\n - \"libtool\"\n - \"automake\"\n - \"faketime\"\n - \"bsdmainutils\"\n - \"cmake\"\n+- \"imagemagick\"\n - \"libcap-dev\"\n - \"libz-dev\"\n - \"libbz2-dev\"\n-reference_datetime: \"2015-06-01 00:00:00\"\n+- \"python\"\n+- \"python-dev\"\n+- \"python-setuptools\"\n+- \"fonts-tuffy\"\n remotes:\n - \"url\": \"https://github.com/bitcoin/bitcoin.git\"\n   \"dir\": \"bitcoin\"\n files:\n-- \"MacOSX10.9.sdk.tar.gz\"\n+- \"MacOSX10.11.sdk.tar.gz\"\n script: |\n   WRAP_DIR=$HOME/wrapped\n   HOSTS=\"x86_64-apple-darwin11\"\n-  CONFIGFLAGS=\"--enable-reduce-exports GENISOIMAGE=$WRAP_DIR/genisoimage\"\n+  CONFIGFLAGS=\"--enable-reduce-exports --disable-bench --disable-gui-tests GENISOIMAGE=$WRAP_DIR/genisoimage\"\n   FAKETIME_HOST_PROGS=\"\"\n   FAKETIME_PROGS=\"ar ranlib date dmg genisoimage\"\n \n@@ -45,43 +53,56 @@ script: |\n \n   export ZERO_AR_DATE=1\n \n-  # Create global faketime wrappers\n+  function create_global_faketime_wrappers {\n   for prog in ${FAKETIME_PROGS}; do\n     echo '#!/bin/bash' > ${WRAP_DIR}/${prog}\n     echo \"REAL=\\`which -a ${prog} | grep -v ${WRAP_DIR}/${prog} | head -1\\`\" >> ${WRAP_DIR}/${prog}\n     echo 'export LD_PRELOAD=/usr/lib/x86_64-linux-gnu/faketime/libfaketime.so.1' >> ${WRAP_DIR}/${prog}\n-    echo \"export FAKETIME=\\\"${REFERENCE_DATETIME}\\\"\" >> ${WRAP_DIR}/${prog}\n+    echo \"export FAKETIME=\\\"$1\\\"\" >> ${WRAP_DIR}/${prog}\n     echo \"\\$REAL \\$@\" >> $WRAP_DIR/${prog}\n     chmod +x ${WRAP_DIR}/${prog}\n   done\n+  }\n \n-  # Create per-host faketime wrappers\n+  function create_per-host_faketime_wrappers {\n   for i in $HOSTS; do\n     for prog in ${FAKETIME_HOST_PROGS}; do\n         echo '#!/bin/bash' > ${WRAP_DIR}/${i}-${prog}\n         echo \"REAL=\\`which -a ${i}-${prog} | grep -v ${WRAP_DIR}/${i}-${prog} | head -1\\`\" >> ${WRAP_DIR}/${i}-${prog}\n         echo 'export LD_PRELOAD=/usr/lib/x86_64-linux-gnu/faketime/libfaketime.so.1' >> ${WRAP_DIR}/${i}-${prog}\n-        echo \"export FAKETIME=\\\"${REFERENCE_DATETIME}\\\"\" >> ${WRAP_DIR}/${i}-${prog}\n+        echo \"export FAKETIME=\\\"$1\\\"\" >> ${WRAP_DIR}/${i}-${prog}\n         echo \"\\$REAL \\$@\" >> $WRAP_DIR/${i}-${prog}\n         chmod +x ${WRAP_DIR}/${i}-${prog}\n     done\n   done\n+  }\n+\n+  # Faketime for depends so intermediate results are comparable\n+  export PATH_orig=${PATH}\n+  create_global_faketime_wrappers \"2000-01-01 12:00:00\"\n+  create_per-host_faketime_wrappers \"2000-01-01 12:00:00\"\n   export PATH=${WRAP_DIR}:${PATH}\n \n   cd bitcoin\n   BASEPREFIX=`pwd`/depends\n \n   mkdir -p ${BASEPREFIX}/SDKs\n-  tar -C ${BASEPREFIX}/SDKs -xf ${BUILD_DIR}/MacOSX10.9.sdk.tar.gz\n+  tar -C ${BASEPREFIX}/SDKs -xf ${BUILD_DIR}/MacOSX10.11.sdk.tar.gz\n \n   # Build dependencies for each host\n   for i in $HOSTS; do\n     make ${MAKEOPTS} -C ${BASEPREFIX} HOST=\"${i}\"\n   done\n \n+  # Faketime for binaries\n+  export PATH=${PATH_orig}\n+  create_global_faketime_wrappers \"${REFERENCE_DATETIME}\"\n+  create_per-host_faketime_wrappers \"${REFERENCE_DATETIME}\"\n+  export PATH=${WRAP_DIR}:${PATH}\n+\n   # Create the release tarball using (arbitrarily) the first host\n   ./autogen.sh\n-  ./configure --prefix=${BASEPREFIX}/`echo \"${HOSTS}\" | awk '{print $1;}'`\n+  CONFIG_SITE=${BASEPREFIX}/`echo \"${HOSTS}\" | awk '{print $1;}'`/share/config.site ./configure --prefix=/\n   make dist\n   SOURCEDIST=`echo bitcoin-*.tar.gz`\n   DISTNAME=`echo ${SOURCEDIST} | sed 's/.tar.*//'`\n@@ -103,12 +124,15 @@ script: |\n     mkdir -p ${INSTALLPATH}\n     tar --strip-components=1 -xf ../$SOURCEDIST\n \n-    ./configure --prefix=${BASEPREFIX}/${i} --bindir=${INSTALLPATH}/bin --includedir=${INSTALLPATH}/include --libdir=${INSTALLPATH}/lib --disable-ccache --disable-maintainer-mode --disable-dependency-tracking ${CONFIGFLAGS}\n+    CONFIG_SITE=${BASEPREFIX}/${i}/share/config.site ./configure --prefix=/ --disable-ccache --disable-maintainer-mode --disable-dependency-tracking ${CONFIGFLAGS}\n     make ${MAKEOPTS}\n-    make install-strip\n+    make install-strip DESTDIR=${INSTALLPATH}\n \n+    make osx_volname\n     make deploydir\n+    OSX_VOLNAME=\"$(cat osx_volname)\"\n     mkdir -p unsigned-app-${i}\n+    cp osx_volname unsigned-app-${i}/\n     cp contrib/macdeploy/detached-sig-apply.sh unsigned-app-${i}\n     cp contrib/macdeploy/detached-sig-create.sh unsigned-app-${i}\n     cp ${BASEPREFIX}/${i}/native/bin/dmg ${BASEPREFIX}/${i}/native/bin/genisoimage unsigned-app-${i}\n@@ -120,7 +144,7 @@ script: |\n     popd\n \n     make deploy\n-    ${WRAP_DIR}/dmg dmg Bitcoin-Core.dmg ${OUTDIR}/${DISTNAME}-osx-unsigned.dmg\n+    ${WRAP_DIR}/dmg dmg \"${OSX_VOLNAME}.dmg\" ${OUTDIR}/${DISTNAME}-osx-unsigned.dmg\n \n     cd installed\n     find . -name \"lib*.la\" -delete"
      },
      {
        "sha": "3c1e0214a0aa6bfd31c54fabfdc444aad705c0b0",
        "filename": "contrib/gitian-descriptors/gitian-win-signer.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/gitian-descriptors/gitian-win-signer.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/gitian-descriptors/gitian-win-signer.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-win-signer.yml?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -7,9 +7,8 @@ architectures:\n packages:\n - \"libssl-dev\"\n - \"autoconf\"\n-reference_datetime: \"2015-06-01 00:00:00\"\n remotes:\n-- \"url\": \"https://github.com/bitcoin/bitcoin-detached-sigs.git\"\n+- \"url\": \"https://github.com/bitcoin-core/bitcoin-detached-sigs.git\"\n   \"dir\": \"signature\"\n files:\n - \"osslsigncode-1.7.1.tar.gz\""
      },
      {
        "sha": "32b57b3160bd34013bf4fb99e340301c9314066e",
        "filename": "contrib/gitian-descriptors/gitian-win.yml",
        "status": "modified",
        "additions": 41,
        "deletions": 15,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/gitian-descriptors/gitian-win.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/gitian-descriptors/gitian-win.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-win.yml?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -5,7 +5,8 @@ suites:\n - \"trusty\"\n architectures:\n - \"amd64\"\n-packages: \n+packages:\n+- \"curl\"\n - \"g++\"\n - \"git-core\"\n - \"pkg-config\"\n@@ -18,17 +19,20 @@ packages:\n - \"g++-mingw-w64\"\n - \"nsis\"\n - \"zip\"\n-reference_datetime: \"2015-06-01 00:00:00\"\n+- \"ca-certificates\"\n+- \"python\"\n remotes:\n - \"url\": \"https://github.com/bitcoin/bitcoin.git\"\n   \"dir\": \"bitcoin\"\n files: []\n script: |\n   WRAP_DIR=$HOME/wrapped\n   HOSTS=\"x86_64-w64-mingw32 i686-w64-mingw32\"\n-  CONFIGFLAGS=\"--enable-reduce-exports\"\n-  FAKETIME_HOST_PROGS=\"g++ ar ranlib nm windres strip\"\n+  CONFIGFLAGS=\"--enable-reduce-exports --disable-bench --disable-gui-tests\"\n+  FAKETIME_HOST_PROGS=\"g++ ar ranlib nm windres strip objcopy\"\n   FAKETIME_PROGS=\"date makensis zip\"\n+  HOST_CFLAGS=\"-O2 -g\"\n+  HOST_CXXFLAGS=\"-O2 -g\"\n \n   export QT_RCC_TEST=1\n   export GZIP=\"-9n\"\n@@ -42,29 +46,31 @@ script: |\n     mkdir -p ${BASE_CACHE} ${SOURCES_PATH}\n   fi\n \n-  # Create global faketime wrappers\n+  function create_global_faketime_wrappers {\n   for prog in ${FAKETIME_PROGS}; do\n     echo '#!/bin/bash' > ${WRAP_DIR}/${prog}\n     echo \"REAL=\\`which -a ${prog} | grep -v ${WRAP_DIR}/${prog} | head -1\\`\" >> ${WRAP_DIR}/${prog}\n     echo 'export LD_PRELOAD=/usr/lib/x86_64-linux-gnu/faketime/libfaketime.so.1' >> ${WRAP_DIR}/${prog}\n-    echo \"export FAKETIME=\\\"${REFERENCE_DATETIME}\\\"\" >> ${WRAP_DIR}/${prog}\n+    echo \"export FAKETIME=\\\"$1\\\"\" >> ${WRAP_DIR}/${prog}\n     echo \"\\$REAL \\$@\" >> $WRAP_DIR/${prog}\n     chmod +x ${WRAP_DIR}/${prog}\n   done\n+  }\n \n-  # Create per-host faketime wrappers\n+  function create_per-host_faketime_wrappers {\n   for i in $HOSTS; do\n     for prog in ${FAKETIME_HOST_PROGS}; do\n         echo '#!/bin/bash' > ${WRAP_DIR}/${i}-${prog}\n         echo \"REAL=\\`which -a ${i}-${prog} | grep -v ${WRAP_DIR}/${i}-${prog} | head -1\\`\" >> ${WRAP_DIR}/${i}-${prog}\n         echo 'export LD_PRELOAD=/usr/lib/x86_64-linux-gnu/faketime/libfaketime.so.1' >> ${WRAP_DIR}/${i}-${prog}\n-        echo \"export FAKETIME=\\\"${REFERENCE_DATETIME}\\\"\" >> ${WRAP_DIR}/${i}-${prog}\n+        echo \"export FAKETIME=\\\"$1\\\"\" >> ${WRAP_DIR}/${i}-${prog}\n         echo \"\\$REAL \\$@\" >> $WRAP_DIR/${i}-${prog}\n         chmod +x ${WRAP_DIR}/${i}-${prog}\n     done\n   done\n+  }\n \n-  # Create per-host linker wrapper\n+  function create_per-host_linker_wrapper {\n   # This is only needed for trusty, as the mingw linker leaks a few bytes of\n   # heap, causing non-determinism. See discussion in https://github.com/bitcoin/bitcoin/pull/6900\n   for i in $HOSTS; do\n@@ -80,13 +86,19 @@ script: |\n         echo '#!/bin/bash' > ${WRAP_DIR}/${i}-${prog}\n         echo \"REAL=\\`which -a ${i}-${prog} | grep -v ${WRAP_DIR}/${i}-${prog} | head -1\\`\" >> ${WRAP_DIR}/${i}-${prog}\n         echo 'export LD_PRELOAD=/usr/lib/x86_64-linux-gnu/faketime/libfaketime.so.1' >> ${WRAP_DIR}/${i}-${prog}\n-        echo \"export FAKETIME=\\\"${REFERENCE_DATETIME}\\\"\" >> ${WRAP_DIR}/${i}-${prog}\n+        echo \"export FAKETIME=\\\"$1\\\"\" >> ${WRAP_DIR}/${i}-${prog}\n         echo \"export COMPILER_PATH=${WRAP_DIR}/${i}\" >> ${WRAP_DIR}/${i}-${prog}\n         echo \"\\$REAL \\$@\" >> $WRAP_DIR/${i}-${prog}\n         chmod +x ${WRAP_DIR}/${i}-${prog}\n     done\n   done\n+  }\n \n+  # Faketime for depends so intermediate results are comparable\n+  export PATH_orig=${PATH}\n+  create_global_faketime_wrappers \"2000-01-01 12:00:00\"\n+  create_per-host_faketime_wrappers \"2000-01-01 12:00:00\"\n+  create_per-host_linker_wrapper \"2000-01-01 12:00:00\"\n   export PATH=${WRAP_DIR}:${PATH}\n \n   cd bitcoin\n@@ -96,9 +108,16 @@ script: |\n     make ${MAKEOPTS} -C ${BASEPREFIX} HOST=\"${i}\"\n   done\n \n+  # Faketime for binaries\n+  export PATH=${PATH_orig}\n+  create_global_faketime_wrappers \"${REFERENCE_DATETIME}\"\n+  create_per-host_faketime_wrappers \"${REFERENCE_DATETIME}\"\n+  create_per-host_linker_wrapper \"${REFERENCE_DATETIME}\"\n+  export PATH=${WRAP_DIR}:${PATH}\n+\n   # Create the release tarball using (arbitrarily) the first host\n   ./autogen.sh\n-  ./configure --prefix=${BASEPREFIX}/`echo \"${HOSTS}\" | awk '{print $1;}'`\n+  CONFIG_SITE=${BASEPREFIX}/`echo \"${HOSTS}\" | awk '{print $1;}'`/share/config.site ./configure --prefix=/\n   make dist\n   SOURCEDIST=`echo bitcoin-*.tar.gz`\n   DISTNAME=`echo ${SOURCEDIST} | sed 's/.tar.*//'`\n@@ -122,21 +141,28 @@ script: |\n     mkdir -p ${INSTALLPATH}\n     tar --strip-components=1 -xf ../$SOURCEDIST\n \n-    ./configure --prefix=${BASEPREFIX}/${i} --bindir=${INSTALLPATH}/bin --includedir=${INSTALLPATH}/include --libdir=${INSTALLPATH}/lib --disable-ccache --disable-maintainer-mode --disable-dependency-tracking ${CONFIGFLAGS}\n+    CONFIG_SITE=${BASEPREFIX}/${i}/share/config.site ./configure --prefix=/ --disable-ccache --disable-maintainer-mode --disable-dependency-tracking ${CONFIGFLAGS} CFLAGS=\"${HOST_CFLAGS}\" CXXFLAGS=\"${HOST_CXXFLAGS}\"\n     make ${MAKEOPTS}\n+    make ${MAKEOPTS} -C src check-security\n     make deploy\n-    make install-strip\n+    make install DESTDIR=${INSTALLPATH}\n     cp -f bitcoin-*setup*.exe $OUTDIR/\n     cd installed\n     mv ${DISTNAME}/bin/*.dll ${DISTNAME}/lib/\n     find . -name \"lib*.la\" -delete\n     find . -name \"lib*.a\" -delete\n     rm -rf ${DISTNAME}/lib/pkgconfig\n-    find ${DISTNAME} -type f | sort | zip -X@ ${OUTDIR}/${DISTNAME}-${i}.zip\n-    cd ../..\n+    find ${DISTNAME}/bin -type f -executable -exec ${i}-objcopy --only-keep-debug {} {}.dbg \\; -exec ${i}-strip -s {} \\; -exec ${i}-objcopy --add-gnu-debuglink={}.dbg {} \\;\n+    find ${DISTNAME}/lib -type f -exec ${i}-objcopy --only-keep-debug {} {}.dbg \\; -exec ${i}-strip -s {} \\; -exec ${i}-objcopy --add-gnu-debuglink={}.dbg {} \\;\n+    find ${DISTNAME} -not -name \"*.dbg\"  -type f | sort | zip -X@ ${OUTDIR}/${DISTNAME}-${i}.zip\n+    find ${DISTNAME} -name \"*.dbg\"  -type f | sort | zip -X@ ${OUTDIR}/${DISTNAME}-${i}-debug.zip\n+    cd ../../\n+    rm -rf distsrc-${i}\n   done\n   cd $OUTDIR\n   rename 's/-setup\\.exe$/-setup-unsigned.exe/' *-setup.exe\n   find . -name \"*-setup-unsigned.exe\" | sort | tar --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ${OUTDIR}/${DISTNAME}-win-unsigned.tar.gz\n+  mv ${OUTDIR}/${DISTNAME}-x86_64-*-debug.zip ${OUTDIR}/${DISTNAME}-win64-debug.zip\n+  mv ${OUTDIR}/${DISTNAME}-i686-*-debug.zip ${OUTDIR}/${DISTNAME}-win32-debug.zip\n   mv ${OUTDIR}/${DISTNAME}-x86_64-*.zip ${OUTDIR}/${DISTNAME}-win64.zip\n   mv ${OUTDIR}/${DISTNAME}-i686-*.zip ${OUTDIR}/${DISTNAME}-win32.zip"
      },
      {
        "sha": "60d76c0ec7ab86635637ee9f49948e004fadfee4",
        "filename": "contrib/gitian-downloader/btcdrak-key.pgp",
        "status": "removed",
        "additions": 0,
        "deletions": 142,
        "changes": 142,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9df179d2e3abdee7d1f255d9be17c8b72dff06a/contrib/gitian-downloader/btcdrak-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9df179d2e3abdee7d1f255d9be17c8b72dff06a/contrib/gitian-downloader/btcdrak-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-downloader/btcdrak-key.pgp?ref=e9df179d2e3abdee7d1f255d9be17c8b72dff06a",
        "patch": "@@ -1,142 +0,0 @@\n------BEGIN PGP PUBLIC KEY BLOCK-----\n-Version: GnuPG v2\n-\n-mQINBFWpKewBEACzsuhtkin1MdQCKCEcFypjEstg0jA0nNVOpsGDTtdwfMpWiLJH\n-bV7b3V1p5hgaPdSyZsUezvHbkVEQxmU47C9lwph3svu6v8HInBwnOa5zj4L0Ih18\n-7yfeEJOvWzULzNxtiIqvWQBFxrVBbgHMhUMg0j6KCYOWeTmTuUKgvbQB8dExCoV9\n-7l+mb0k6eOZhwGWl6KD8mVkdhfXhoCZY5g79BTJf7lAQqnVbjxdyEKD2HSSs5Jnx\n-mTeZg40ottXa1puT+x9ES7L/IOY5kcrp6lU8iyKAoUS4vOJt4nPqY59Pr9j2nUak\n-2BUY0yojH41a752OYW59R+0uTNcUAwpNFucOb4TrNqjGJaPtxvFBZPTLImfSE+Jj\n-VTT6eZixOXPlOWm/7PgR66JF70p3gDwCL19bwUeOKX3UbkjhmYG48d9y1FNFZlVM\n-Yf36xj0c2IOz34VVY6GcCfnIN6xus5qWgHWiQ6RRdlRc9TbcCsUGttXuFP/n4nX2\n-OHo6I/HBNidLScfD2sXZtYHLcqvi2CcvEmmDdwBZrZncz+cHpjz8xmONb3bEMNT0\n-euPcEC5PXUItCSk9KHSgJhAWqfB2WcZ0RUYLp5lbtIZGHqY34LJRWXVKeOQIq4Gn\n-8uCyM5oQUY9zK4x7fdRz5tOjInYg+eSqtnLVDACqmazQHZ6kuGspAvwW8QARAQAB\n-tBtCdGNEcmFrIDxidGNkcmFrQGdtYWlsLmNvbT6JAj0EEwECACgFAlWpKewCGwEF\n-CQWjmoAGCwkIBwMCBhUIAgkKCwQWAgMBAh4BAheAAAoJEOXROPXnOhryKiAP+L3B\n-4c4eZcp8OSRwtYMiNmlxqhzEe+Va8T748rP8oULBFi7b7Nw9FILtp0Vtt2Xw9Pd9\n-EMsv5ZfgPpFL58ZeaO5f4uyrxipfUE5XdhkMOtqqlTfuCGh5fvNv1sWgf5tOFS2+\n-4TCtcSSywl/OlbRmWW/rsJ+RPrE32iSn171WRUXmGGBGSTF2mxCELLIW/rnY1qUw\n-u81BN4SYQOSyd1ha4XAlVYnPcEdpD5mBhwh2mdw7nCtJ9G/lPJ+1VT5axsONbEKK\n-utoU8CRt7OBlAUe0GbAcp7FcniKaFF2nUuhNbMjFcqZ9pddb6aWHVcaXIHwjoR8T\n-Br8ygIoODNEauc0e1xbtsXByD76pcz3yzZOFCKxtjtjsln23Drko4JA2LyLxx8WY\n-BCZcf8/8QSZJOocFOoUIHEfdljo/41kF1MF1Ra2Pr5ZHx/qNcI3U+4+uBoc1AuWS\n-5gJl6xXicLByqweSGKzAfq+SGXM+8ZdJ5KuHISMq7tfkzkmIJ7fRy+cdprXYVnhK\n-CW5EWA6+xQqpt0QGaOyRPJvQqJJvO42Eg9slHkfON1499pwaIwblWuNRs/jq5xCY\n-b21m50JmPas6o5lCcF0SFiFLEJa8spWxMrsLZGUf8KfwriDrssw0XzI74E//BFb0\n-8TLeC7daL3bsCe3FD/Nlcplz0oPKOm6Zb7fNf8mJAYEEEwEIAGsFAlWtJa0FgwWf\n-nr9eFIAAAAAAFQBAYmxvY2toYXNoQGJpdGNvaW4ub3JnMDAwMDAwMDAwMDAwMDAw\n-MDEzNjM5NmE3M2YxOTBmZDRiMjRkMmNjOWM5N2UxNDgxMjcyZWI1YjE3YzU1YzVm\n-MgAKCRB/qxFCZ+T6BHGbB/9wvhZ2rgT4vOT7HENDXF+Bv9TItBF7JQ4mehCenWme\n-23qxBLttfQp3AbwA2K2FyrshGM0fmtmpO5pcXjjHMVzlIDa1fKvbQGbhok5Y+94w\n-hswGS8O0XTU6sB3JxC4vpqdS1pryA/7g3YI+EuzYCkubNxvYnAy80Rf098xZzj2r\n-Yov2c73qg8+kb+5MS2fTjOMQhJo8N70YOew9FVOeZoeepv7SWLDI5Ya/YQ+1fFKN\n-2ovfBq/fzAD4PJbPJCz0miq1T5GL2nTXLcJmj46uV3wNvppNm/w8492de5VO0JqG\n-qlRurp6Jp2k37jqRSIIXG2wxCkND0cYftjS13pHnerPyuQENBFWpKiUBCADiSsd/\n-CmoZV2/UCqAnxm5/kxF8rW5hVYsYmfGO6lY868j5GMOVhWkrjl2CNWrFwQRqyiol\n-FNvyOro2IpOGXlM87AU3MP2/Zz+zkO3zY4ZH40t/UqcO2MPpKdkmGofCt+C6IFGS\n-Y23FqdfOLxV3aczN2aLzL2C6hHdXTcs99NGSf51iHLXn9b+hT4k2AxLPnOnnjgJL\n-eC6+s2sh4loSuvCh5FjVQfhQDLyTn93r9xvEhUMUUxBLz1Iy+e+w1elSwqNT5wEI\n-V5Iontm63lN37GrkRyX90PBtKf6VYXE1yKhNLmPBOIc1vx02og6Psu5eilzKfoK/\n-tQeYr4M/6HOcNvEnABEBAAGJAiUEGAECAA8FAlWpKiUCGwwFCQHhM4AACgkQ5dE4\n-9ec6GvJmFQ/+IoBituRcR394sVPiK7apDIPzPziVT4Qu8aBuHHREhK1Vl5C5tLZ7\n-Q6wA5Xc6O2/G+37HqKX3rqD7XBdFwcPXQa6g54uVs8l2+1UIwnFqZm8bJwubkHU7\n-U6addHacbX2itqb4EiQ82mAQqPSwx36QGLtPF2htl5z1XWj6queqjVrteAl2cbz5\n-KKGklTjReaX1jmun/3nL1yJuYRpZ0L7lF3IU17FVckCL/y3CXhdWOK1fGRfsnZWe\n-XQT+00dKhW5uRfpa8hR1/HJnaczAZnjjpRJZq8hBLamTjPypwjLf+gFAPiAJRuug\n-Bh4saYoE3ciNDzB3B7RR8oqNwxaF316vurrcKqEvnpQechFudDKYz6Pd09lFM1U2\n-MlyJ/jMwwlEvwoTlKFvgYmXOHPZoyf4Vdq+RPfRy+pDI1et9fN4wsy/Foj5hb7Yw\n-/hPOAjWElc4huCwaHIbGN+gHd+AbO6dOkWC7GgsOTGopyU0NXWfud7HB1V/NQ7o1\n-EMrEEPg3eMBMpksuNJ4TaesJ3keW+9OwIMDvsIGcRvqcAVL0R0ZkMGiYG3ITna7l\n-KRcCZwWaHmE6WJTuffBu9oyRFfSH6YbI4pFuFulxghNe3gD1AFZyWPlS/M6jw87I\n-4nBWSNoyPs1UxEGtntBkWiBJq79WAUSAeiDPVzvekQfaZxSpCrZh1cy5AQ0EVapR\n-MwEIAIpPUS3x6zTo9YoFxf2CCNho62MZfoN4ZpVQyY+NLhZ0p1XQBullafZdQjF2\n-mGPXysg7SEZflkcwBGjS6B/CJUoe+zGRL0DXrpoGrqEZzDshiOQ7lM08iloZ9X7V\n-UqhZdi7CFQCO9lAPgrFnvlTVvc7z+1L01/I+9H+w7rmnVsa4NyR/3W1zpOjAO7Wh\n-telWGTcLGYM5fWE3XnUTsWHUQnvdJ9qkDQB6emAOSzBreGmxzru1VSKIPrGsYmlW\n-Q/5Z82ihJ9uCYswUmh+hXRnAXTZTw9jQ+/hw75YuKUGjxXnMGJPMWIlBgB65h1fz\n-a6cTU1ZuS/wEEWEsiDWIob+B4qUAEQEAAYkCPgQoAQoAKAUCVd+TsSEdA0xvc3Qg\n-aW4gbWFsZnVuY3Rpb25pbmcgaGFyZHdhcmUACgkQ5dE49ec6GvIMfQ//SVwsyixG\n-w77pubV8R3LHjVqjo8CNWR2CedzT2/2xfRqjiz9juxpVSunPLTCUWhJTp8bAJzVY\n-UteZ3G1ctKuA/cnUbiAduU4CNlKrZ6AjmUysPVrsyw3kUDm8LSKKiARb0hCAFbvO\n-AO3Lm0YbpBtVYOUpWLoxpkFPx4PKRSyS+mkmFCgBV3baf6YOfPimGyEkVOhF5vZ9\n-WDjnlxPHWhjrpWOpWYPOlDMfSxsvYe4JTd/QXEqx0Ki1inNM4AnLiDf/rnyliQiQ\n-RFlHNnfo/FyqO9wvY8Hu0YLUJqee3WWTVDoYnQYSdHVM8w5JYXiUG8Cc8H2kQ79f\n-sYwIQEXPdJUCeFYnWwkltAjd95AvNDv/5/4kSBBGWUY80TH8qoxuPLekPmuvS8QE\n-TP2AeEcL8Hi5GnKbl9xb3bu/cuauLp1D23qC3HMoigFEgUPQ3egB7Z66PVWo+ko9\n-+niqujCFBZBmkS23fvp4EgejYkvvhH9NcWDXWhnIaghLq6ngrj+zHDTTb5dCp9aM\n-JKOyKZIjEtT+AOi8g7yQ7bDyI0eJxOhKamBcVYHcvUU3DMsRSao8cEE6ee/G9564\n-sQ15Ma7W+wqee8SbaND84A2tAQcFtd7kvRn8C3Ac/bHuL5UIihNruTzOsfIHlXmE\n-jqjNA37tatNGoAK6//UHCzX6rLZSBUJtsDWJA0QEGAECAA8FAlWqUTMCGwIFCQHh\n-M4ABKQkQ5dE49ec6GvLAXSAEGQECAAYFAlWqUTMACgkQ3qOE7dYp+kBF2AgAiI8O\n-mFVfhCSJl7ofMMO2g92JfeWevQsn+GITexaYs/FEBb4NmWAyItJ1mL0jCVOhRXwj\n-AcKbKiWhuco17EdXi3xvu5FrfsN/lOmmyhkKyHSR+LS2XPb+xG5JJrafS7m2nxMx\n-4m0yH6tUcsBnqBPFFZ+w+Fxtg8ngUbo9B/gaXr7mvHwir0P2LYpcqlwpD0Zxmu1W\n-HpKT/DQa09Zjr5l9WDGtF6U6ZuSH8sdh/tD///x7AJ6eoiYadcy3YWRLFKKpfMSI\n-tSDhOlWBFFNRwrsZRXCrETYoJNWb/kvcHOaWNzPWcePjQ5RdOkQwnidUd1iy/Uqr\n-2+cT9WWfkHAND4uHlP1wD/sF+nQWOoWcQLFqTx9qt9h7tbgNAzXfEec7fwQ+NMwS\n-bKocjb5OOdzInEMDufusOWgKBfJtPQSMUe+W2orxBWtJb7WY9Xeshjs4q42GooPz\n-e9AN5B2M1V+wmSYEMyhHSTldjj/ZUWBmzZGH7skPHFUwFB633NOA97Mrt/F1RhiO\n-kw1TTn61x1op+wF919DnKdXaFiFX02XzqjJgnuUoGN/72cnfRzIkSaq9b9uX/dQK\n-z2Uk19ENQ3ipmAqBnzOzz+kjSqh8PdHgTGSyy8Ump8+dfhXjC98wVwP6YEn7tOv0\n-iaRzOiKd2kkCvSYexiqWYtKLU8icUFmvd6SROkcAHhPr1+oPS7LJpYDuES17iN3X\n-YaYHGGyvNsh1RseJvE7saosVGQwM539W61JUS9A3TP5jaL8ka8Q5AiXyIee+CD5h\n-2wFQnvdnmnc4QVkdVdrpNRBZyGySgyrO9E+iogfMSfcdDApgiETUOuMTvuCZSPhQ\n-YZ3+rddfgyDXYN3y5oW7Piro19r6R0D7DcGSstk1+1mEjJbb7s5Gc7oGq+EgLm0K\n-VYKa4Ky12osPCHFAoYLHe2upSHFhtgPgfzHKE8Uo5hnAVmx9jAi2XxBi4y5ezPPD\n-C0cCKsRTVrbvNavTSMYdfcxWuB4vlrMZIsvV0RcyP9jPXZm3XPrMik8xRbLR9AzR\n-C7kBDQRVqlGOAQgArkX9q/xZbvceeW0vzxI1UfbZnVoO3E+lL8W40RtBoF7R/7bD\n-68/dNYa1/geUc1jVyrycdp5RkTfnHnIHDt1WZfi6Ywdw9val+BpT/X9ZkxEXgYxO\n-tzMq0zO+ipeLgiqBRck7kgsOEgv+zaqMFXXrH+Zbsg1QbDEug61iCoKzpR8b2+5Z\n-QHxklnGd1RbiMWpioTmacOQE9yTfWvastJXIvZoZ8gdaLR8hA5o/ePP+GcSgntAd\n-NlMYTqqNujAymBJvMAu+ybyFRKN/L/X+IX2elhJWM1x4d1OjM/4sk31g6pucWRcd\n-vimPWouDIWVh+sh1g/IRsO295QKzXUCDELc/QQARAQABiQI4BCgBCgAiBQJV35N0\n-Gx0Da2V5IGxvc3QgaW4gZmF1bHR5IGRvbmdsZQAKCRDl0Tj15zoa8lAJD/93voL9\n-dqZ9IViyULsWsEkQDD20HQ+mxbuJcAE526If/x9JIMR1JcuE/C7pAtNjg5VBCOeB\n-sk0JC+Z7M80ivU1xov+rmjRvVNAX22/rBLpCTmUe0gzIBnWG5+O2/sccutigvvQE\n-O1rqLTEp0dzLoYbVAwJedELZnmK04Y8uXXQ1XSHXJOJmvEBpbDF0U3FXl7Sw4C+u\n-hI8IR6l2D/BYKIZgNIkh4ppFa6RJY0DtEWR94POZYBjjjToeCTRBG9IxudDy1jm4\n-k6bF/ByOecN4B3HRcBXUM1yJEmOZlPSZu2v7XvFp2VnFJfN2UjmtpYsKamV/xUsw\n-DE0voGp15TOfb+6QzfnLSI7vXcm1CfkBS++lYKcYcJ9Kj90ZPjtKy25vKcBvG68o\n-nYgS0Jnzm6j2yE2KBc90CWS1Txgu1Rd5ZrP8pM1ZK20/dq9CjtPLE94WFIc77k0R\n-3z8DJPG8I8M2RJ1XoqENrBvG5U0B+eeGA7mY8QSRH0COhslJ7j0WjOyO8xBSGTCq\n-QKGppFmDLs440cCVUOpnPz1kYG3YFgdCsFxOQ1GBJuHFLUdA1BEbb/nG4C4+y3Ek\n-Bihhu+3ZRoaBgE7ZmVOMEV7xdslPNssiTh+CxIUtugY2mhGnANvEcWrqTgG9+EHf\n-ax2avHR4CQMn7onZAPt2sOMoPkE8R3H3Knlta4kCJQQYAQIADwUCVapRjgIbIAUJ\n-AeEzgAAKCRDl0Tj15zoa8rK4EACFfSUffkm80uzBxFDbo3+fWf2k5hnjXheZxE5w\n-gpT4Z6QGH70GjR+rbH5a6fMM4hkmqNRYWLf6n8RTYNvCLxopVg2l1QbHYFbA+pAB\n-0tM7HOng8iyvc+uUJ4hTicpePm66A4uc1/z+mr5mcLTQS6Nfix2j3hduzzCVIbuF\n-/3UUxS9hFAXOu1F1Oz6auFkeQ8R/w/49yXrq/MYYSUsWtOR66Yu4664TJKBkZGlw\n-CiGPYmpeE7To7LqdhAop+ZnZnc5agSnB9QZw1HVbMY0nwbPuiJx+6mmbh7Gf/OHu\n-2pHSAStvFUGA6ngbYVH2LlRC2XgAA/yFAy1FNFegxTXO+3DI9ykj/3WBmjbNZMIA\n-mhcvPPwwJCNdxbZJbCcot82FBGPpwmsiZJWynD4m4+aGErp/pZmKjfMwP5NAgOQd\n-77XaRlJTvW4GqAdmT0ib7tCqGwFAx5o80SszhgRCUqu8oLGAUlTfMoRgmFNRznP9\n-7xptwjNSl19YrlXdgbhOvVvNO0/J6uXnRc3v9yfaa8J7xU6GvuR5smejYNLUxccl\n-N1UmouS3Vol5z6hOmqnembN/zC3THOHqmJ1G6SdiCcn5dG5Tc+jmBKLRAnoIimWT\n-dO/UoWhm2EB40Hlj6HRFXure47oD9x28d48E0+HI9Jzlh4Wuu6kkr+ugOpdC0TbN\n-H/+RObkBDQRV35PpAQgAo1+V52e+8VFsDKyceNNEVE8NdUiPRKBZuVfCSP8nqNCj\n-hYf4lY/iygHCNZDtKaBs6BUCj0Ev1CLm+Uxvdl1trEr1FGz8E1kdUsh0LocKJgjh\n-wbuDrxM/6LNBxYTR9fEIGx+ka8o9OMLqWav+QjZtDC/nTWaJkXxvcgZPhadCmkkz\n-P0g/vnJVYbvDBBmxI9ofkxZIrwNR2Y8VO2oLVP0MpCA06cuUQWym/gQ2uqBToGqr\n-M/gc+vq0XQyFrNmH/iP8MuASrOoQfGhvZDg/x8rcFRs37itZWpUfP3pZ5zWztX3G\n-TBtc1EktSjs8fU828lPxtG80r4RB2sWVDJfoqhi7XQARAQABiQNEBBgBCgAPBQJV\n-35PpAhsCBQkB4TOAASkJEOXROPXnOhrywF0gBBkBCgAGBQJV35PpAAoJEPxkNPw6\n-MelWLCsH/R69Q2jgT2+sHVWbDsmNjTOkJIteKbz0uW8/vBJqZ2VEwKozGruCTkNI\n-orYKj52ZRcxKiAijN2XGw1TEccP0s5Trap1Z+xgjDDLByLswoVBUzAjbq77hedT+\n-ZUuQFKnm0Cc+PzB/Nz96I8AV4AxYc7RW4keGtvEv7qgdIlb6fbPpFB7Z5W573OZ7\n-G72B/T6QL43HRaN+ZbjwRJaY66tYKSl0Vd0WrO2p5xVdbTarVFn6q/A0IYEafVKY\n-QaRTh+VQbN7vNZCn1Gi6fvnjtWRsj0vMkafdAzVYqF42P+cf6iHrglE6DwR5AsaS\n-O9G+8kLpkXFRjDQJBaijWdBtaeOulCxTog/7BZwo1kpTC3ZCTxr/SHJDc1Nsxt8K\n-xnMCPxFSrHRJb/fUQDjhLv6lXXAm5SCBdFzAc9oDKUbcuGSEz2nZQjL1OADn9rVo\n-j/Y6wJ+okOCOs9AI1H+VW/rz5Z7wxvw3YOVa+dnYdV0w7FklCn+xFdZLj8Z5WjcZ\n-zoyqGlVAFGOZ4MbO+fz/+8f0Y7K/bW7E6smhnomTy2ZOk64eiO12d8quHTHMi7Xh\n-mmVYDiNn1gW9IxZwt/Ga9AvZbIAYhL2m/xBbdfMKAG7Ttjzd3Ac+8wrGm3lOesBD\n-AJUtBmURu8b1Eyj72IQcV0AJM8gvc1B0H345oX6VBgkBB0bf3nuUVftv6r529jTr\n-Jix6yrs4uf25tefzcFuqqE1s1r+pSZFIDpaNsP+jjMgYj/zn4dLOZaq4V3SHvnsU\n-v8KOUC2/qNH9U0KC6bh4mw0fVsHzhkaOjOM7SF1Doc8Lz4vZuk4BpumHpkHEG90x\n-CLg2k/R9iIDQfcGtKY++1/GitjXakPuKrJctZ1SJuW1KWyzFeF4qvuowmLGMFRVi\n-+CG5JJSLCUr+cPXa8NbjZv9BwSHqWbn3grr7ZE/j6SFNhuLmByeePPNKRt0cae6a\n-3TQkQFh/yvSIkB5BrB1n2x+xNoWMME+GR0zYQCOncCe8W+a5BZ1mTiVGacHgVqSN\n-eEaG0RH54+pi4gw=\n-=fFMC\n------END PGP PUBLIC KEY BLOCK-----"
      },
      {
        "sha": "4406e6d5be02c1e9006c6ecccc1e4c7c0dbad60c",
        "filename": "contrib/gitian-downloader/luke-jr-key.pgp",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9df179d2e3abdee7d1f255d9be17c8b72dff06a/contrib/gitian-downloader/luke-jr-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9df179d2e3abdee7d1f255d9be17c8b72dff06a/contrib/gitian-downloader/luke-jr-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-downloader/luke-jr-key.pgp?ref=e9df179d2e3abdee7d1f255d9be17c8b72dff06a"
      },
      {
        "sha": "030fd5cf3cd389976b9d07e6e48bb8d3524442fe",
        "filename": "contrib/gitian-keys/achow101-key.pgp",
        "status": "added",
        "additions": 52,
        "deletions": 0,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/gitian-keys/achow101-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/gitian-keys/achow101-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/achow101-key.pgp?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -0,0 +1,52 @@\n+-----BEGIN PGP PUBLIC KEY BLOCK-----\n+Version: GnuPG v1\n+\n+mQINBFT4snkBEACx90Wf5XLo1Xv09p81eaOXc+8bbkSYzqx3ThDNUPRzjYpex9A9\n+8FxfBenAykD3EgYuBTco4cbn7Dw11ppyXUw0VjWaagnnAVGxt3SDeY3ADwPss6xg\n+78FZXxT06xSHZXq1X6pOqhwTAnx3VGx+tR/A2DCsX0vHE6IVThZqyUq2Ei2C0Chc\n+od8y6JZ1CGNzlRkEgL9A0Zp0If6Uq4tXFxnLL6PtiS1b9V5rNfCSC7l99kIkG5oy\n++SPsGRwVqTE2kqtuzkt9qVn6v8KKoZr0BY4IO3KMfJJ4eidOkB+OZK9REEQguDvv\n+tJfkF2HcMYa1efvQObyvVIfS5gxs7+kcSJxgDVZI5YxRV1OOfI7+w3EW3G+bPBQF\n+gSBwEaLbD+udr9lDZ4NZc7vTeoZtYVNZ+EQtG+6I9GzxJwEgO5LIwZ3//vh/R4iy\n+z9W91r7TrlkHUuOGg1hXMCI9sRa65NJtP4BWD0xO07zDKj0JHzeyKwgxB/ixZF2V\n+kc8EzJSKzRfr+638BMXONcf6NW8n6qIlJT2U2qIwiixjM8AUujGKb8DEgU1vIAn9\n+7esOhceOtU/6iLuJrlK+TzMe97NoZCtt6ktmiAp8fu6l9uk3mr8JYLzIMtK+Asf4\n+np5YLizABwbt9gEretnGpHrdKMN88mPYwsLjjCh9wiM0bHZNL52JQRkt3QARAQAB\n+tDNBbmRyZXcgQ2hvdyAoT2ZmaWNpYWwgTmV3IEtleSkgPGFjaG93MTAxQGdtYWls\n+LmNvbT6JAjYEEwEKACAFAlT4snkCGwMFCwkIBwMFFQoJCAsEFgIBAAIeAQIXgAAK\n+CRAXVlcy4I5eQfyGD/9idtVjybuXl+LXS4ph4M738PrZfQeLDmnwhVjfZiEOLLs2\n+sAwGtL/CC0t9f7K7y+n5HtQoMX52jfVehnTDzeKCjRMs+5ssou+L9zadIAz68beU\n+7BZ0J1rR3n1kzwsFE3vx3IRno0VCTOgfL48AuuzMPxvEaLMxWQX8mL0PCV5/8Yxx\n+ftqg4kQ1JKMt5UTxE9/w0cBMphLTwV1Rx6lZILPJgOxYSQ0oOzQYSmucwzH1uOqH\n+wpgZ7SZIHfRWyi4TjQpU/5T2kMOlN/XdyWsj5+Eq+Y6zI6hq2se1vU3TOc8xN2S3\n+7YOza1onUj4if0rWtkJZ2yDnR4lIASUD+/VP2NoWtoy7rB0vIfzbojfwxAp8WuHT\n+sUTxXd52c3OB+673OlOA+GAg2FfFjR8REojsTbeip35/KmFMpafazVRn+E0c3MfP\n+/iS43UTlcxewRcDrx/gRplmgO0+CLgLstZOon7Dz0msypeSArhX2xEj4tJb/ccKd\n+CR/IQl8q/ULQsHX1LwRj0u9doAlkqgIQdKXou4+EmD1jKF92oJMZ+20AJCqfwYQY\n+9HlCB9SQeCRUtU/fHkAZLPApze6C7a1r0LVIuM6iolWyha5KJ++mj84fAagwy/ag\n+8TU8kHTLSGPYeg5G/TAbr1XU5kbbqfWfQFMK1xtdZd1BaGP2cDC2QGkr2ot1SLkC\n+DQRU+LJ5ARAArDftuFPE+ZhgJRuJK163fsD15aHPfv5s+h8kPFv0AuwVs+D75w3y\n+YGfaRtlwSvK+8EucKOoHI1AQYjTG0dtKJuwEGhQ2qsTWUKe05tEAWu0eN62MOZ/r\n+Awjxqotj4TeFksfyKedVAYSizD0Xj16fizeWFrfUBNND4OgUgD8KM79oRchtzKBE\n+HRBP27JksU8tQWc4YcEJUHV66Pji5OCiXxHXJ+JpqKSKeCrVvrvro+pwsY1I3ARA\n+F4UmLxCcb4GnNq+s76cb2K7XJtWJu5FHeHOsef5ped43pYs35UXI+EvOYNs39XI4\n+emMsI0KmuLME2LHO3CJNBirwRFxui27axZk/CSVE1lglnbb25n3QHvbs/31ASCCT\n+QKZ7+Gce89iow6yG4MkN5W4hLdkGAyNI74b6yAUfugSqPLNSj3YHvVFY3y1acge+\n+H7xDO/owRN1kbz+9VMJZxsxB/oZEyEVAE0szHxXbMBhqOME0Y3O6UBrXr7z6R8NG\n+S20RPet4kxCCTLZOvM/X5FtvimgR2u5qRPHs+zf2VPXIRsJsM3zq9EvmePryGM3r\n+1rEAvYagukuyt68lOWgKP/2wB0/NIFAs69b1QSJS3U4CQVIs2h84Ucvbh9gX9Y0B\n+LbV5mxvDDfC/4Nhf4yMfH/CwZDLOUsaRAjCv/lQuN9mnMz9aYnsPha0AEQEAAYkC\n+HwQYAQoACQUCVPiyeQIbDAAKCRAXVlcy4I5eQec+EACi14L8Vp7tw3tDm/Lrb9fM\n+LHfoOnZiDCGaXhiXqckbTSogp7hU82m1fIy4VwY7DWbs1iIq7QdDJMBuNn174Qd3\n+ZPxHeGwBbR04gEsHkbjXBAA5hMacLvmxYFiPlibz+AO4orUiYu/vlEXhXoFCjSlB\n+pw0kUG8W8yQ/RyE7ryLv5/bT4LkwUWF7/+gdDzLUy1VeaPDKmBupKVSbEACe4QRH\n+dUUqE3suKoJ/GylO2sGtFW8BM7+CffX+nvc8hJWzXdYW5InSh0omYJIypIgnQ1gM\n+MhUdu4gbtYwo44Tlax2mTSg8vSVboYO6pBZVX3IEUnjRHLOCZVZIBFXIFdRrHXO8\n+TTkzx9ZoDmZ/DH+Md1NDnS4QsvFbRO/EeDRQAI4cgGhCc4CTrrJSQv8jtl7x8OTx\n+fnDUbE/n8pLV93j9t1Gd07h0VJSmYj3AR7PiefHS7s2yxS9oOqRayGBqrJFzd2gS\n++oXvUBC6pUvM68NgNVCKH7HmIM9tFbqgy8kofTsVDkq9TEJRO+X4hn7UDNJhTjVE\n+AVRUdku6CJR6wj3RPCbERSNB8uabuv1lgo41baeepLn+tJNO/4hilJ0zvEoryVnJ\n+ldZ73mHRRRtXoPRXq7OKuDn10AvtYX8y3/q5z6XhLUePFKM91PO8GF0J6bNWrQSq\n+Khvd4+XHE/ecjLOPvLweAg==\n+=+hz7\n+-----END PGP PUBLIC KEY BLOCK-----"
      },
      {
        "sha": "df06e19fa4b109286dbbb7596c86d31fe0f1052f",
        "filename": "contrib/gitian-keys/aschildbach-key.pgp",
        "status": "renamed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/gitian-keys/aschildbach-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/gitian-keys/aschildbach-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/aschildbach-key.pgp?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "previous_filename": "contrib/gitian-downloader/aschildbach-key.pgp"
      },
      {
        "sha": "2389d4657fb7f5f225f5d76e08841fd6e21d4be9",
        "filename": "contrib/gitian-keys/bluematt-key.pgp",
        "status": "renamed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/gitian-keys/bluematt-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/gitian-keys/bluematt-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/bluematt-key.pgp?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "previous_filename": "contrib/gitian-downloader/bluematt-key.pgp"
      },
      {
        "sha": "f00dc729d57a2e7b7848324177c605dac9dc8e45",
        "filename": "contrib/gitian-keys/btcdrak-key.pgp",
        "status": "added",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/gitian-keys/btcdrak-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/gitian-keys/btcdrak-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/btcdrak-key.pgp?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "928a74b3155da22877d1b6ad32fa2a7cb745e0ba",
        "filename": "contrib/gitian-keys/cdecker-key.pgp",
        "status": "renamed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/gitian-keys/cdecker-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/gitian-keys/cdecker-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/cdecker-key.pgp?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "previous_filename": "contrib/gitian-downloader/cdecker-key.pgp"
      },
      {
        "sha": "71a42e514881bc6383531ea2c82c93998453245e",
        "filename": "contrib/gitian-keys/centaur1-key.pgp",
        "status": "renamed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/gitian-keys/centaur1-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/gitian-keys/centaur1-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/centaur1-key.pgp?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "previous_filename": "contrib/gitian-downloader/centaur1-key.pgp"
      },
      {
        "sha": "6b0bd240ba4cf8df485a8caa689717a12ef6b3c8",
        "filename": "contrib/gitian-keys/cfields-key.pgp",
        "status": "renamed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/gitian-keys/cfields-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/gitian-keys/cfields-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/cfields-key.pgp?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "previous_filename": "contrib/gitian-downloader/cfields-key.pgp"
      },
      {
        "sha": "71898127ba0d6c9976ab7225d8c71ffc6380b0a2",
        "filename": "contrib/gitian-keys/devrandom-key.pgp",
        "status": "renamed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/gitian-keys/devrandom-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/gitian-keys/devrandom-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/devrandom-key.pgp?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "previous_filename": "contrib/gitian-downloader/devrandom-key.pgp"
      },
      {
        "sha": "9d3f060627ee9cb4143e3b8945a261e90c39ba13",
        "filename": "contrib/gitian-keys/erkmos.pgp",
        "status": "renamed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/gitian-keys/erkmos.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/gitian-keys/erkmos.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/erkmos.pgp?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "previous_filename": "contrib/gitian-downloader/erkmos.pgp"
      },
      {
        "sha": "9c03ff45226c5629d24e5f9925da7210df0760a5",
        "filename": "contrib/gitian-keys/fanquake-key.pgp",
        "status": "renamed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/gitian-keys/fanquake-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/gitian-keys/fanquake-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/fanquake-key.pgp?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "previous_filename": "contrib/gitian-downloader/fanquake-key.pgp"
      },
      {
        "sha": "f81f44e874707837c13446858db2fed14ad5c501",
        "filename": "contrib/gitian-keys/gavinandresen-key.pgp",
        "status": "renamed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/gitian-keys/gavinandresen-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/gitian-keys/gavinandresen-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/gavinandresen-key.pgp?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "previous_filename": "contrib/gitian-downloader/gavinandresen-key.pgp"
      },
      {
        "sha": "b8aad7fd88b42770c4aaab3ca97a115694bcb9c7",
        "filename": "contrib/gitian-keys/jl2012-key.pgp",
        "status": "added",
        "additions": 105,
        "deletions": 0,
        "changes": 105,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/gitian-keys/jl2012-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/gitian-keys/jl2012-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/jl2012-key.pgp?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -0,0 +1,105 @@\n+-----BEGIN PGP PUBLIC KEY BLOCK-----\n+Comment: GPGTools - https://gpgtools.org\n+\n+mQINBFYhRd0BEAC+2VU+8+f9RTPLtl0C815oxaOCA9Tle13xNER8NjFrVwIuFQ64\n+nO8Fbhd5KEEARuMS/lc5G6IV0QxBpDGE1sEjPQXrA6UnX8SDkNGhmoAsV07MP2Xl\n+glN9qqYUEoVD7ueh7Cp3A9rFjg7wcMJCPQDP6lZY4cPgYlE1C31TCrEdAsVVTQg+\n+xIYWnhB92VxOJhk0N0h6xtCQ2MOtYDjYcBndQ5iK7L5jy5LI89YVRfbKtWqWZdwR\n+lgj2JCLeXKauXBI1qbedCJrz5e8nXcdqZt9TXSHo/XhNlqvsLiqBq4aXNU3xRkrv\n+fcweZ9jR9DjyQzefYFGaiCk37R4qLbaqQRm0luUizkCegIuTv44e/zig0im8yPAI\n+WtGnmBPSy4MpvvWiVVb+jHikdQG1T7g9kF6gEmj4kj9UseWnasiq+kkSNE67vLxb\n+uZDfA3QhavRMJbCNEY49/IX6urIsiCLFbe6C7JVWvJ7d5l3MAHE8Sut+ytjX7z7O\n+LFt7YD6loxGAdopEUZm50xs8PswKDajlzWGFXjDZdzQA1tb2CpHUtDkAInYDutR4\n+qA29qtxaBswozzUYiDptGSkBqD1Nus7UAJYkwe2EjeszNPhmIAQXGWx2yWplPOJk\n+ZWDuhQtrDXZikl70q0ekIJ7bxkpMO8xUuhsBCS3Wn6GAtySy0XTttmItfQARAQAB\n+tBZqbDIwMTIgPGpsMjAxMkB4YnQuaGs+iQI3BBMBCgAhBQJWIUXdAhsBBQsJCAcD\n+BRUKCQgLBRYCAwEAAh4BAheAAAoJEMUkKhqzk2UXsbIQAJnXDjhEoKSILJRrKbg+\n+MXP3Rhxc/ThXu5C8yhfYqKblqCaNNfEmrlercJKJVMvjY0tVTXYo8BEJmNN7nSNI\n+su8NheJ9vXacN3XrgkMPuFiUyKj9PGpSsM6Q8MjT0Bzd0pxodk+g0UEjyMktfu/3\n+TqLsnoFPOtIjMOkr/uBzZn5d0AXIZQbAz4Xa2zBW+uR3OSXRRXCRJjCSWGIfDX0Y\n+i/Ea+3Be+y9bMqDa3nPULEkW7+RNuyjLr6QwPZ0/BpTTDcM6Vic2daFPO5B0+o3z\n+PMFmPcEd4nRHTPM9A5SaJtC8MjF/89mjhpxG3v8RqkqCdqdM2cezi/T4YD4jcynE\n+F36Ya3GuuewxEZci/N5ySG5gG8Y+80Wgc1e+sNtvIffHk3Wju2kOvNcBA2TBw36V\n+XCJXHROTA5+Cx4lUxOkQTJoYSVzx852WS6WHeLg1+XnDZvT7ciVIV0ExJQ9C1XOM\n+wjFMRsTWl+vflxmgCeHCIari57Jw3ij7ghRCgeqLp7FIXK5qSI4Tw2eajJpoTKPs\n+wlaO6kvOXtaCDH30FuVhKbPxII01Xi/A2ALtTkpA6mfnf19orQjv+HxX/iwUlpHM\n+UwsuhpZSQYIxIv/BOQnXDfw4TcjnHsqXZbqNzzFEjGurMTlOUX4KeTPscdOLUpnO\n+1FM4JIVybHHfhCH9Mpq+MIwCiQGBBBMBCABrBQJWpym9BYMJZgGAXhSAAAAAABUA\n+QGJsb2NraGFzaEBiaXRjb2luLm9yZzAwMDAwMDAwMDAwMDAwMDAwNWJiZWZkNGM3\n+Mzk5OTE0OGRmZDQ1MjA5ZjA2MTUwMTljMTNjMGVjOWUwYmQ4MzUACgkQf6sRQmfk\n++gQcZAgApPqnaIIE8Q5sruzua50RFRmmBtQys8sM95ciWYE4QaTXUnlhHl4QR4z/\n+TQTRSBqXpdHQ9HBWrhFb6E0ykDEVx9zdEt0fvtlhHx1ItrZetfiA4PwidnyoDKs/\n+/nt01RGreKSMDGInaQVEQxvEW+A0fwvcCdE8Mh3LcIydohfqUViB0c5zb7rUmize\n++2Kt4Uth9T+ooo+UE87pHSJcxlcPOv6Dc7KeoUicD8DwWdsT7oxAMk9jj/ut4UNx\n+xOEp9Sa3sFN20tHMqyOZwnl22Py0y4ayJnceawpuka/bx7samg/2uUrO+dNKXObN\n+trebP83+8UFHOo7VGhesuawgwNjWW7kBjQRWIUbHAQwAy6re/3ur/fgNfE9yKivp\n+Bqmjq0eU5l3iT59hvKr7S+6GHUa+YvE9BBsawDSI4UILNQX0YGT1LRa20mC1okBX\n+5SIEpWzoZhybTMVMwS2ZHkUyO6VBAieUVojP3XQHFcDAiBvW7RRhJ2BU+v9DGo88\n+HAYqKEB85P/i/E/a1xUfTWiiIhA8Dd/Hv6pzIG5QvN8XfrMIayLwpOV1G6KvBIJb\n+zyUVUvLyQySiZOyDczrAxzYq7b1qv8xwHDUzyUl6skPqbex1cFWIeiML9EY4DnZ9\n+l3qb31Bhp+EHydv0esclM5XKQriSg/hsnJOLlCS45z/YhqGOCoD8QxXUJ71NhD/H\n+QR/AvGyTDcPr1/U1DJ0lG778wCOEe1Nad0G/8rcpHSY66RZR/Wf318S7uJt0mUw2\n+JMt1BRxfbdgJaleUAqYjNQAMDb8LfPO6jhQnmf0nN99dpdzkwV/drVRcLDEnupDr\n+keBsokcuohzE0gbjUT4cNc0DuUsIELMTApG8KQCgzJy/ABEBAAGJA8QEGAEKAA8C\n+GwIFAlbi67wFCQGu8u4BqcDdIAQZAQoABgUCViFGxwAKCRDunlUgNL4k0qceC/91\n+2ocEDwiu9kpBGCW0HD+VSyMVjLWMiClk+jPngvNEt63ZkYqRiy7fwnPuJrLFlaL0\n+E0JLIweihC5AyPSJT1Q0LnOwbqCHn1s+9RfIodG/v6M48Ez4GffOtmYwW9KqogK7\n+4FwdIx/wOIYDeh4rT7LRaWBNcIXO8J1+v/83u+Vx6TWKZTiZKQMEV8VOJWfSmTCE\n+6HVgUYvLCPB6DI+X4aVead1kayKOSuXlG/l94B5RHlJB/xQXZd1INyrZetTZxYzZ\n+CBhIWaZ/ji5vqFot0xVNYplRkbg1Mc96X+hwee8eiB/ySSWxUV/DDkA5ZzuE8n8R\n+EEjzqazjMNe50P7XKVg/eBE+TpgCDlqv69dqnOF326m6T3+FH/LDOHguQfB7pQKx\n+siviqjO3molBSyMHL39XFWyteVbgbbSaTRkpX//b7dQoFMiVhigcM78qoymBi6yX\n+qwpN13JoNuNJhEOwex5eEEUCVibFReUkBrYoGnWbwuOxiLORx/IbuNYOvsTGYEAJ\n+EMUkKhqzk2UXWScQAIvAgEpQpzuE1CWMBWcM/n4ruUrOVTeo6dYpUGN1LI0758xm\n+4VI47I8wPEy4pAbdPcqoaNnMcA/NpSYa3hV0svQDLqT96qKTrN71N1gNJa+5w+KN\n+rwev8MRpjuze9b4dn3avs4L9f0fkpzjSzezKwVb7loFSZqgKAaI0aSoOUTec9+OU\n+5ymgkYPEEF12ydkyMzLwyKrtEnIqgwQpjYTN/3P1x7Gkhv+E8Lz06TSga84yVy5I\n+5gO1Hklc3MW0J9jPJe3uALUtEh49KxCE2rdbIX7YbkxWaHHfK98Mu998IXr/4eUe\n+Zhf2CLC2cuuYbk1/rOcxPmeIJKa6S5PlWOf3Y2yLRO0VKcjD5pcGxiImoDVXC4VM\n+hztCVLddjU70c1ktSIBQBu9gkpPcECrzjYtpeAavOUgmpP/zQ8X2NGp6+5n9Wwii\n+tAgByNCg0s+PqcAZxup34b3ZY/t475tDlAmIOovH14Aa8g+0Ketj++9rPpmg9kGs\n+sGmn4mVItClaA7L9vZQQFnSxjyfICKsSxBhqded0lsinlzBfXDEh3N6fEXh81/Gg\n+zLUmTlkhcGaFXplYqrUIlkdO9PD4R2h5P6laLhK2dAf7oKavWHZQp02Yb5nVBiDc\n+KiVWKBP4nuTkWZCG5R966wpR1IOQQ3LykSd5SstcZX6iTpv4NZpCxI4CXpaCuQGN\n+BFYhSHABDADHaEJVygBdwU81c4YynyTOnWTZX+BR3EvRW51GcnfvjqkqgmlWNLET\n+JkswQ8+s0mjKGVnz4dkdr4cUbVegj/St7wzoO+m5mYIDMJf1j83Vo6lTo9FJFzbc\n+HrYC9RS7NkQmD7qzJz4KY/h0n5szFIC/JpYECBNzYrJQc8m2kZiSlyUQJve5/I5J\n+iI6QnM0x4kixNe32GITmKw9s3E2iRf6yXVlsrPouNS33lPXKtvmO1ae7R+G8Ve+D\n+JDv+TLxccy2iU9wuz4I3k20+rlmEwk17feDhfleh5Q+qjI4vkaNcXFa5coZE0HyW\n+SwAtLPSOv2vWkuFeYncXRyzg/CvKR57i9wnqMzNTMt3bHY2HezE13bHln5B/Jqr4\n+ihhFQBqPG+UZlGYRfAI60PLh2yftX5xkm/POiLgEKF76/yIZI8wcPzzurAhFaZBp\n+8/MUv2ZJ/OUT4rdEVV+6XnrijNqVBU8mf8BML5CvjyhsU69yf1mvpiLQr34FNEcn\n+JekDGPIk97cAEQEAAYkCJQQYAQoADwIbDAUCVuLr0AUJAa7xWwAKCRDFJCoas5Nl\n+F8NMD/4hRoOKENEq940Z0iJg0TDvRvRnaIYsbneRQ3yg1DGVIQ+4RHmzQdpN9MW0\n+5RTRLqJsW25ydWwh7y0O/oBRjaoDRAkMSIyOo/Fy+E9WWBmAwzeYCi91MyfetKIO\n+ocrXxpXXKnotAFDOgWGF8K+LlTDH/biOrd8ftgOVJWhz3X04ma7xvT2tQTqfFdbt\n+EivA+jFExq3No0Iq+Ctt/e0H2d9np62SeKBVdpbx9xAc2tPKKDSl+FyB7lj5CK5/\n+FKhotl2bJhVXET48P6e+bFVwfRO7o48zuK5CJVbbdjhavQGhQoxfedW2dn9y7QoM\n+qayUuVIhULE/k+y3jsJBUT7p567nSdUGbc3uKt1sfPKYTdsFbHiTRltXmsIiv4bG\n+PslbXSvOQblFOXWrAE22CdKmGzhlEiFnbviZCCl0BFf4CwEVBJ3p9Lcoir1l9Aty\n+HIIFI3z1mmTz4F9BMbe6saNwBzO+Kh4+US5NV/hqvyz0aOLltb6KfI8WF8kOa1Cx\n+Djz/DTHnvMWO/dIOJuKsThfuxZZq3R1w3O36RB8XzDT/8NV86gfQwN07NWz1rdy4\n+60fK36EjOJDqm/434/BDzWh8TqmnSamENxBTbICmWOj/25M26tA2S9zcPLJHTGMA\n+3yL3QlBtjWY2uNqr51cnZHgPKxBWzaRvcrZ+lUq5EG+F4J7q5rkBjQRWIUitAQwA\n+5A2AhW9DFxVsM105WEErD2NuM2rvtq7dTwArBEi2KdWkSGQvCE9xgyH8u5AEWxj8\n+XXHE/rfunW0d9oF7Z9FbOuV+1HQOAj5hQQWLWHERwZ4gOAqG8ZKAbuwTlqitdiXE\n+PZiJYZSq0NXtngyeTx7XqzQSatfFOIQLzIiwPQXX0Tt+JB3B2SN/D2NP7rubzfS2\n+Bg0ErhV20fPDl8YloEJFfj9lpF0ZJnJ5hXYP9Fl4MoPkyBkGPrJPooZ4FqUFHDiw\n+mttzP1BzFlwpAPGpI0NrkBdBlfFAtvhjreeB5Z4VYwt1xqoXgI+jYXAxoMl+rtkK\n+FdWaoT7wHwqDBeBWYXoyXA2dYIY8Ux1jeDBnREck7vaXhln6zXqMAQowE+F9OQnr\n+Wgf/LoOn5MYxsBDY9mPAO8urxUDE+Dq43JBXlS+jybMNZWdtkaBrIde7dw9IT8Fn\n+p8pG78DmgPxmRFH9QoypTqMfB+x7ZuB0fk1ud4ut33qLo78BWZoW0H++13CbSmrZ\n+ABEBAAGJAiUEGAEKAA8CGyAFAlbi690FCQGu8SoACgkQxSQqGrOTZRcNQBAAmeL1\n+8Wr7vuvL5dySoYmWqHFvM8gRUwIGza5c3D29NYZJcPJRRkdGCV2IXEuUSOLtnjAN\n+kTM1TVMMnetqNR8Uryr7z3XjqYLnVwGqOPnFnlkE2zS3pG8AGG6OxxBhuEMvkwcd\n+1s3tWUlJYRWi1XhEjVZ5Km2pHsVxvoXeJCUVsa8nSXzqF8gOLm409NFMiKkp8QOG\n+heEV4yWrHkySi1fVfOdrHfBzu2lUmHGgSbmJIpLcK+cL3TjpJ+DkSNbniI13I/Eb\n+PO4Uai4a3QYz6sspZ7UzF/pjY5v6WpWXiVB5PP2Y5BrMUgWRlFxPYTc3KiIHUYVi\n+IjVtSOsVaRCHL/SYRq/qHs63XxlxKIhhilbR4OO+CvJ6N/vEpSbx69SqlxgDArZy\n+g3QQqerlLGpSFim9iWk3QBGWtQ96Ek6rjLLOn7b34I6bxXtfcOEo7gl0Y1TFkfOp\n+nsXAcRLrrXCpAhgC/vIQRTMKEcC18kj/vY144DwefzYCBhbI/rCSohAq8a/zhq2T\n+E+xlCYy931HWlUAGx/hms/0q+KQ712Zgk4XxXEx4RZiv3zl9Uph6c7SXxAMb8o2v\n+PzAxd3ShNOnng9hAl8zk5O1RZPa5u51ppkO1FsJ9zjb2Kvdg4ZEBtK8jETv9ckuq\n+yj9YmZZSRRQ2dujg81sLQ9CrO7WB3IGpwh+4lHQ=\n+=1irw\n+-----END PGP PUBLIC KEY BLOCK-----"
      },
      {
        "sha": "3831eaea114f77f30f9638e6772f446055f3c68d",
        "filename": "contrib/gitian-keys/jonasschnelli-key.pgp",
        "status": "renamed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/gitian-keys/jonasschnelli-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/gitian-keys/jonasschnelli-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/jonasschnelli-key.pgp?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "previous_filename": "contrib/gitian-downloader/jonasschnelli-key.pgp"
      },
      {
        "sha": "559295109d9646f4baa3f2d7c1eb374333899fd9",
        "filename": "contrib/gitian-keys/laanwj-key.pgp",
        "status": "renamed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/gitian-keys/laanwj-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/gitian-keys/laanwj-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/laanwj-key.pgp?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "previous_filename": "contrib/gitian-downloader/laanwj-key.pgp"
      },
      {
        "sha": "a2d34e75e1c16c17cb721633038813800dbe45b3",
        "filename": "contrib/gitian-keys/luke-jr-key.pgp",
        "status": "added",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/gitian-keys/luke-jr-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/gitian-keys/luke-jr-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/luke-jr-key.pgp?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "ee626500a482448cb2c7717ba352260262a3422f",
        "filename": "contrib/gitian-keys/marcofalke-key.pgp",
        "status": "added",
        "additions": 69,
        "deletions": 0,
        "changes": 69,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/gitian-keys/marcofalke-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/gitian-keys/marcofalke-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/marcofalke-key.pgp?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -0,0 +1,69 @@\n+-----BEGIN PGP PUBLIC KEY BLOCK-----\n+Version: GnuPG v1\n+\n+mQINBFZu2toBEADGuBiRutibv2SlW/A7vBGeGA0n58coQaPkmi04QGMeGxdZyvad\n+h8olkPO1q5B0/5E1olEjs1YquHTjSjerLz8nUg8K5OEu14KtCGvFbmtSFW7fOUHD\n+/u+EykJrJczqcJJ31r4B51L8CdS1ODdBbinQRlTjtLq+pE/fJAjHI3iQ2E06vkpc\n+BRVA628fZKHIcd6uXZBrDyAcKtqq1TITlcYoVlYbvMrov9bPz1NW3P6pgnO1S+UK\n+RfkhG+N3bC8ttsTXo0aevz3klaVFEZ4Oo4N8TUcYoYDTZIfu/Gk23r0hBONI75IE\n+pbF8u+r0M5mpXxCHqmrUgmU33CBTeuCZon5r0iEsweF+ldh5rhEOhXWxHcUUz62S\n+64XoqzuOlorpWzIS53oyVTZcH6XszF+iLqSuMQCgOYhF/u47rt3Vh9D+TYJcnvGd\n+0ozRuajLIRGCdVlKt212ER9QLxZ6BTOePbb+g99I2DOx6heSUDzwXWKTxt00Lr89\n+LyBFa9kj2fI0BNuzx9XI0l+GK5M9xkNi5LwL5gaLsPCJHEEPaG2pcBIBbw6hjIka\n+L1fgDWng6MQ/eml5JsyA3G3J07/xxoVPaN9vZ8LLO9BEiz7e3Oss8a3Mw+SfsMcH\n+mJJIFT/CguJCxW3FeKs16XiDpO2Eg2WRoMJMB+psdfgo8e2q7dXIE6kCtwARAQAB\n+tCNNYXJjbyBGYWxrZSA8ZmFsa2UubWFyY29AZ21haWwuY29tPokCOAQTAQIAIgUC\n+Vm7a2gIbAwYLCQgHAwIGFQgCCQoLBBYCAwECHgECF4AACgkQNkiogvQxa5vgkA//\n+Q200J62bnplhyuWMvKmpCNFG7lTtLHmwVtZmvBJiHsRwe42KRWKz6IaQgEHfBMCU\n+tSra4i2KY47j4s/kyTgWeQooH9Zxh7c4EMeyOrxpqPmnKF/0tFnDyk9SCqbrrUQ+\n+VuL9/JrZ3zB74GtRikvWXS43cuBheKPZSwdGrGWtP74Z48eKXa8mOZtDfQJACqpZ\n+lF2Hv0GOFKDNfaol6BkANpeDv3orhnysY5TqE8iA4VuHAL2MDmWg68Rb9sjPoj7U\n+TIYyeqiok/R56SkN+WnGGI7l4+pk8pBqhkjZUjVTEEABR81Vu+Rn8OxTqpKu6gW3\n+YACXnk/kXYY4I3Ri63eK0BQEeZ6Q8nrPhqHYK7fzlbwwL4Id5bDJpBZW+a6Hvlw+\n+zQXpObhMSxtDJZzEonqq5PwJLlkLPU4sbS1tuinCdAII0Qz0Tv3Nwvcrr+KWiNqr\n+vf1ed7CecDcQpSqHfhhibgykLfdAJGNpGxyA4yhOUHax4TbYZctL3ZYXRWGrF//z\n+Gv33w+8DMb3zM+BP2SBR5D7MFTqE2X7bTn/0pRnfYObjgU7+pT0bed4SyEY2mnqb\n+ikPTKfz/g+xLL46lMaJKLgBdS14A6+k3qVUDaBNMb7crSQlutmU3fRhNYq1KW9IX\n+vEI7YuEfMa6vj4rLW+68CKYBu2pNBSQZ9LHedx1UM3u5AQ0EVm7hJQEIAMTDtNiw\n+0WJUO8T7G2vA4WFHbvBoGM4CH9LaOm0JpH3L0DQ+XD5EWGICwlpkoiQiRPpGSmSc\n+KAbAgtfS+a91z4GSWEgL+q9HqVZO22yQSeCbtbnJs44BMJzgMcVxiFOc0JQU0KPR\n+zrT2TtD/Z4ryOvI2nuepv3aRz0RSQEsBnhMx/aNIV9YbRJ0YofC8BPReK5hQ6rYT\n+V2C4P0RoPCdjeGx//0Ilg+xTbPSG1urSKVUEz6UCT21MaCBsyxN5Z+Wa2K9F/894\n+y+TsWMQQcUYZ57DXFHM1dOkfDYorVATNOnv3dIJEjQDU0dYEE0yNUYG5nu+UjluJ\n+LG/ZTiXhkNQla+MAEQEAAYkDRAQYAQIADwUCVm7hJQIbAgUJAO1OAAEpCRA2SKiC\n+9DFrm8BdIAQZAQIABgUCVm7hJQAKCRAtfyNy5Q/hN0XMB/94V+GgGRgCxvwdAT92\n+RCatOJcf1YJuw1aKWjAiib0FVeChZebZYqW+jwvMkXZwxlVFhcpFlUzAqCRwcJx/\n+QoalF7u2yTL6DEEGcC8bUKrhtXQch4/D28BWJAJlR/7bItdWMIuw4WV/8s97t8Ca\n+Fn2Fc1T6/B20VclsxoeaAoXZUcWG9YIKRbEaogt3LxsRjgQLZiIicjRl0C5YpYDt\n+JvnENKuLwSRte6gKkuUi7Xw4iIP1aEwTTdZe0km6If6pVPwCK1cU9xMpsMftT1Fl\n+NdK/dJbfWoYrS24U30XvCxsFMogD5jJ+PiXUoXDBjPJmDiXrGUDR+je/RqsUKBH5\n+zyKaI1oP/A5Dq/EU5ceIfMPaS8iK4DjgwKdh8zuprDQ+JSf4iD1b/HHlwcrXmGFG\n+4uRO0X/V0ybIdYj4U4qXRm2FTA20x7MDEDW0i/cJQKNrVZC7HQnvrdG7ggG0KVok\n+tTvsIWJTmpQ3MY47rTtWQrmRdiiSRWeTFyE4sPUy3XpuPA5ZKGF5vN7A1p1WYSZH\n+gl6NBv2vp3wjwplSpYumzh0q+o7W4bhdy9+BR+K8l5a9LKyCrwL92XKLqp3iAyvq\n+RdbCrTvfppYtNwJ06JBww/b+aO08vTFY08eYbMTOVxNJUtzpq+JUe9QHOzbBNCv5\n+viIVqNRJEQw8ITQQ1AjgN3iWdnbVQEwYv3D6VNkpzDpZD6tzOmJwwbRc5rISCVL3\n+DQQglc7BYIkcI47QHBdf979H8EvA39U4yFHW3DfApHBl/gzHcEbb5RoBYc5yb+02\n+U8xGHxGJ7q4h40N+oLCc4S04gepqtCeIQ8cgCPjRdPKuP8o2O2wzDYvqr3RlzM1M\n+l+GWmv+3em/RWwhWggDIf/XhYkSbC/USJuPjQEYqJRcpx+60HYV7Ro6/RryOoLUA\n+0ZXu6IYs2qT+KEcLQ4D1XKNb0GFnHW+3SXqehl4qI0zdPUOLKpXhCpThhC8BlqV5\n+O1aP/5jnogwcW1HF+tUc4h3nwrgvcajrikjffdBIrUidoDVEN04WuQENBFZu4oYB\n+CADQwtiaFcDxMms3bNyRrfaIA5gNWEhoTRFNXMKY5SacsavamWzlfNRBIlYMl27z\n+oMZK4hpxH568UKhwQyb/qLt7gI9hLBOdgRaWZuOCghNGX3MQCBodDLXTahnvUlXp\n+pXnUOtuQmODPjTDIjNXjcsZUUzSJoanQ+Zt8OWPBYumrFC9Xw5fFRcrNmSbWnllx\n+Nveyrm6mlOydSUXq8D1vh4vkNGtQ/0nrFuSTBGsl2vY+ClX4o8iYunaHmhEboqjp\n+BMEC4WdBql6N5CI64HQ0e2iGXVSTPiMHnpqQlnaOvx3gdaYPW15hjISgjPb6ygdp\n+uyGXyPRa+0X7TlTtGXLLcoB/ABEBAAGJAiUEGAECAA8FAlZu4oYCGwwFCQDtTgAA\n+CgkQNkiogvQxa5sE5w//VrTdVm1ak3RCtZU1D25D6yiSMKZ05j6PDyJfZNI/QubJ\n+5Qq/VKzITa4kr50LNnM/wZzQPxEM5K6HyA5Wk3tt4IXqmqyZ8VUS+55sl1b5Tg6q\n+NSLc2qXmY+BeVGmQZwke4nY8wvTNI3wGDekJTPd5a1rjkw64l8n2Xy5ErVaYlhkW\n+8KyD96PTKhsJgRqGmAtZjJ2i1e64oR/VYR1B9daghGzueV/uvdhD5DxH7UsKSBUZ\n+vb7lCeOK9Fuvs12/ULgMmymFxSvKeD5+etGUPsNA3gRpqwNcipp0QNhiQmm8nRq9\n+vH8Kv9tPmaXL2JHWJB4pMXQXX/DIww3I2gaFfHL60Dr120Ddte3uqdG9KSYQHz7s\n+/bH+vFsvqr17CHflA/Ogto4rfrlL5qo3SaJVRQwI5vhA3Nx/K22WeH7l25Mu6mAw\n+kQo0c76fmSvOTpvCVC8aDvhLlm1nF1ao+dq4QafnCrKU3PTn1SlkZ2hwfFzRy/Ru\n+Vdep6Xd2M3tux3O82UoHLF7Z+4G+NgP69h87rMOSikszRsNiCi80xO3aT2CU8Yt/\n+l3sduhFP5TqvfKjTJAK6EfUIukVC0JEL8ktpYCyxb9tN6DTPHEhCJUTXZI9Y60iT\n+ZIrV7MYY51HatEEJKhpUtLeYSyutj0ubbETfrt2b3cjHNfQh+OLEVUjaQwZXKdU=\n+=GC3s\n+-----END PGP PUBLIC KEY BLOCK-----"
      },
      {
        "sha": "47bc404554b41866c5626384c30a9e4f9261958c",
        "filename": "contrib/gitian-keys/michagogo-key.pgp",
        "status": "renamed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/gitian-keys/michagogo-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/gitian-keys/michagogo-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/michagogo-key.pgp?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "previous_filename": "contrib/gitian-downloader/michagogo-key.pgp"
      },
      {
        "sha": "5ee82a6f7ea42f0f4ecacbfc0b2541b3d98a48d7",
        "filename": "contrib/gitian-keys/petertodd-key.pgp",
        "status": "renamed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/gitian-keys/petertodd-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/gitian-keys/petertodd-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/petertodd-key.pgp?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "previous_filename": "contrib/gitian-downloader/petertodd-key.pgp"
      },
      {
        "sha": "0870c88b9b3608b761565063dcbdc33536250227",
        "filename": "contrib/gitian-keys/prab-key.pgp",
        "status": "renamed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/gitian-keys/prab-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/gitian-keys/prab-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/prab-key.pgp?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "previous_filename": "contrib/gitian-downloader/prab-key.pgp"
      },
      {
        "sha": "a1930ddee905f688dcb3a189a88e1317e7006a0f",
        "filename": "contrib/gitian-keys/sipa-key.pgp",
        "status": "renamed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/gitian-keys/sipa-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/gitian-keys/sipa-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/sipa-key.pgp?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "previous_filename": "contrib/gitian-downloader/sipa-key.pgp"
      },
      {
        "sha": "baaec76b8c656a04beb4a91155dff40658c87bd7",
        "filename": "contrib/gitian-keys/tcatm-key.pgp",
        "status": "renamed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/gitian-keys/tcatm-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/gitian-keys/tcatm-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/tcatm-key.pgp?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "previous_filename": "contrib/gitian-downloader/tcatm-key.pgp"
      },
      {
        "sha": "e0f6c4c5fdf56ffbd6308d4e0a6624290feadff6",
        "filename": "contrib/gitian-keys/wtogami-key.pgp",
        "status": "renamed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/gitian-keys/wtogami-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/gitian-keys/wtogami-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/wtogami-key.pgp?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "previous_filename": "contrib/gitian-downloader/wtogami-key.pgp"
      },
      {
        "sha": "8badb4b318b019b015fae6a81880dd03fbbac4bc",
        "filename": "contrib/linearize/linearize-data.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/linearize/linearize-data.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/linearize/linearize-data.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/linearize/linearize-data.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -1,4 +1,4 @@\n-#!/usr/bin/python\n+#!/usr/bin/env python\n #\n # linearize-data.py: Construct a linear, no-fork version of the chain.\n #"
      },
      {
        "sha": "cb40c664fafdefcecf4746a029b9aa63c40e0daf",
        "filename": "contrib/linearize/linearize-hashes.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/linearize/linearize-hashes.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/linearize/linearize-hashes.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/linearize/linearize-hashes.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -1,4 +1,4 @@\n-#!/usr/bin/python\n+#!/usr/bin/env python\n #\n # linearize-hashes.py:  List blocks in a linear, no-fork version of the chain.\n #"
      },
      {
        "sha": "b259ea141c00afdddd95c9c78df1b856d5b86f2d",
        "filename": "contrib/macdeploy/Base.lproj/InfoPlist.strings",
        "status": "removed",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9df179d2e3abdee7d1f255d9be17c8b72dff06a/contrib/macdeploy/Base.lproj/InfoPlist.strings",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9df179d2e3abdee7d1f255d9be17c8b72dff06a/contrib/macdeploy/Base.lproj/InfoPlist.strings",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/Base.lproj/InfoPlist.strings?ref=e9df179d2e3abdee7d1f255d9be17c8b72dff06a",
        "patch": "@@ -1 +0,0 @@\n-{\tCFBundleDisplayName = \"Bitcoin Core\"; CFBundleName = \"Bitcoin Core\"; }"
      },
      {
        "sha": "db9d16f1d700f18b64edafa0f8d981a680567b4d",
        "filename": "contrib/macdeploy/DS_Store",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9df179d2e3abdee7d1f255d9be17c8b72dff06a/contrib/macdeploy/DS_Store",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9df179d2e3abdee7d1f255d9be17c8b72dff06a/contrib/macdeploy/DS_Store",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/DS_Store?ref=e9df179d2e3abdee7d1f255d9be17c8b72dff06a"
      },
      {
        "sha": "f88a2ae74bdb33afc2806b6403ea8c0191b096ca",
        "filename": "contrib/macdeploy/background.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9df179d2e3abdee7d1f255d9be17c8b72dff06a/contrib/macdeploy/background.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9df179d2e3abdee7d1f255d9be17c8b72dff06a/contrib/macdeploy/background.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/background.png?ref=e9df179d2e3abdee7d1f255d9be17c8b72dff06a"
      },
      {
        "sha": "fdc4f4ca4a07ea4c6082ee1357b6ec7e8db99d72",
        "filename": "contrib/macdeploy/background.psd",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9df179d2e3abdee7d1f255d9be17c8b72dff06a/contrib/macdeploy/background.psd",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9df179d2e3abdee7d1f255d9be17c8b72dff06a/contrib/macdeploy/background.psd",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/background.psd?ref=e9df179d2e3abdee7d1f255d9be17c8b72dff06a"
      },
      {
        "sha": "9c330af45142e011e78b4b86874ac4b3457ed457",
        "filename": "contrib/macdeploy/background.svg",
        "status": "added",
        "additions": 34,
        "deletions": 0,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/macdeploy/background.svg",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/macdeploy/background.svg",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/background.svg?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -0,0 +1,34 @@\n+<?xml version=\"1.0\" standalone=\"no\"?>\n+<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 20010904//EN\"\n+ \"http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd\">\n+<svg version=\"1.0\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1000pt\" height=\"640pt\" viewBox=\"0 0 1000 640\" preserveAspectRatio=\"xMidYMid meet\">\n+\t<!-- kate: space-indent off;\n+\tCopyright (c) 2015 The Bitcoin Core developers\n+\tDistributed under the MIT software license, see the accompanying\n+\tfile COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\t-->\n+\t<style type=\"text/css\"><![CDATA[\n+\t\ttext {\n+\t\t\tfont-family: \"Tuffy\";\n+\t\t\tfont-size: 86px;\n+\t\t\tfill: gray;\n+\t\t\ttext-anchor: middle;\n+\t\t}\n+\t]]></style>\n+\t<defs>\n+\t\t<linearGradient id=\"gradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\n+\t\t\t<stop offset=\"0%\" style=\"stop-color:rgb(239,239,239);stop-opacity:1\" />\n+\t\t\t<stop offset=\"33%\" style=\"stop-color:rgb(239,239,239);stop-opacity:1\" />\n+\t\t\t<stop offset=\"80%\" style=\"stop-color:rgb(205,205,205);stop-opacity:1\" />\n+\t\t\t<stop offset=\"100%\" style=\"stop-color:rgb(204,204,204);stop-opacity:1\" />\n+\t\t</linearGradient>\n+\t</defs>\n+\t<rect width=\"1000\" height=\"640\" style=\"fill:url(#gradient);stroke-width:0\" />\n+\t<g transform=\"translate(500,0) scale(0.9, 1)\">\n+\t\t<text x=\"0\" y=\"114\">PACKAGE_NAME</text>\n+\t</g>\n+\t<g transform=\"translate(0.000000,640.000000) scale(0.100000,-0.100000)\"\n+\tfill=\"#000000\" stroke=\"none\">\n+\t\t<path d=\"M4995 3705 c-24 -23 -25 -29 -25 -165 l0 -140 -306 0 -306 0 -29 -29 c-29 -29 -29 -31 -29 -141 0 -110 0 -112 29 -141 l29 -29 306 0 306 0 0 -140 c0 -136 1 -142 25 -165 16 -17 35 -25 57 -25 29 0 72 32 306 226 180 149 274 233 278 250 13 53 -2 70 -278 299 -235 194 -277 225 -306 225 -22 0 -41 -8 -57 -25z\" fixlter=\"url(#glow)\"/>\n+\t</g>\n+</svg>"
      },
      {
        "sha": "4b44ac672e627be82bb9b74dac0016057b11c126",
        "filename": "contrib/macdeploy/background.tiff",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9df179d2e3abdee7d1f255d9be17c8b72dff06a/contrib/macdeploy/background.tiff",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9df179d2e3abdee7d1f255d9be17c8b72dff06a/contrib/macdeploy/background.tiff",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/background.tiff?ref=e9df179d2e3abdee7d1f255d9be17c8b72dff06a"
      },
      {
        "sha": "4858183f75c382a9b8d75ae4fb8a74abd830615f",
        "filename": "contrib/macdeploy/background@2x.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9df179d2e3abdee7d1f255d9be17c8b72dff06a/contrib/macdeploy/background@2x.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9df179d2e3abdee7d1f255d9be17c8b72dff06a/contrib/macdeploy/background@2x.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/background@2x.png?ref=e9df179d2e3abdee7d1f255d9be17c8b72dff06a"
      },
      {
        "sha": "03e2325fc0c3cd890c0e22091447d9463c5f3856",
        "filename": "contrib/macdeploy/custom_dsstore.py",
        "status": "added",
        "additions": 60,
        "deletions": 0,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/macdeploy/custom_dsstore.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/macdeploy/custom_dsstore.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/custom_dsstore.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -0,0 +1,60 @@\n+#!/usr/bin/env python\n+# Copyright (c) 2013-2015 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+from __future__ import division,print_function,unicode_literals\n+import biplist\n+from ds_store import DSStore\n+from mac_alias import Alias\n+import sys\n+\n+output_file = sys.argv[1]\n+package_name_ns = sys.argv[2]\n+\n+ds = DSStore.open(output_file, 'w+')\n+ds['.']['bwsp'] = {\n+    'ShowStatusBar': False,\n+    'WindowBounds': b'{{300, 280}, {500, 343}}',\n+    'ContainerShowSidebar': False,\n+    'SidebarWidth': 0,\n+    'ShowTabView': False,\n+    'PreviewPaneVisibility': False,\n+    'ShowToolbar': False,\n+    'ShowSidebar': False,\n+    'ShowPathbar': True\n+}\n+\n+icvp = {\n+    'gridOffsetX': 0.0,\n+    'textSize': 12.0,\n+    'viewOptionsVersion': 1,\n+    'backgroundImageAlias': b'\\x00\\x00\\x00\\x00\\x02\\x1e\\x00\\x02\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xd1\\x94\\\\\\xb0H+\\x00\\x05\\x00\\x00\\x00\\x98\\x0fbackground.tiff\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x99\\xd19\\xb0\\xf8\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xff\\xff\\xff\\xff\\x00\\x00\\r\\x02\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0b.background\\x00\\x00\\x10\\x00\\x08\\x00\\x00\\xd1\\x94\\\\\\xb0\\x00\\x00\\x00\\x11\\x00\\x08\\x00\\x00\\xd19\\xb0\\xf8\\x00\\x00\\x00\\x01\\x00\\x04\\x00\\x00\\x00\\x98\\x00\\x0e\\x00 \\x00\\x0f\\x00b\\x00a\\x00c\\x00k\\x00g\\x00r\\x00o\\x00u\\x00n\\x00d\\x00.\\x00t\\x00i\\x00f\\x00f\\x00\\x0f\\x00\\x02\\x00\\x00\\x00\\x12\\x00\\x1c/.background/background.tiff\\x00\\x14\\x01\\x06\\x00\\x00\\x00\\x00\\x01\\x06\\x00\\x02\\x00\\x00\\x0cMacintosh HD\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xce\\x97\\xab\\xc3H+\\x00\\x00\\x01\\x88[\\x88\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02u\\xab\\x8d\\xd1\\x94\\\\\\xb0devrddsk\\xff\\xff\\xff\\xff\\x00\\x00\\t \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x07bitcoin\\x00\\x00\\x10\\x00\\x08\\x00\\x00\\xce\\x97\\xab\\xc3\\x00\\x00\\x00\\x11\\x00\\x08\\x00\\x00\\xd1\\x94\\\\\\xb0\\x00\\x00\\x00\\x01\\x00\\x14\\x01\\x88[\\x88\\x00\\x16\\xa9\\t\\x00\\x08\\xfaR\\x00\\x08\\xfaQ\\x00\\x02d\\x8e\\x00\\x0e\\x00\\x02\\x00\\x00\\x00\\x0f\\x00\\x1a\\x00\\x0c\\x00M\\x00a\\x00c\\x00i\\x00n\\x00t\\x00o\\x00s\\x00h\\x00 \\x00H\\x00D\\x00\\x13\\x00\\x01/\\x00\\x00\\x15\\x00\\x02\\x00\\x14\\xff\\xff\\x00\\x00\\xff\\xff\\x00\\x00',\n+    'backgroundColorBlue': 1.0,\n+    'iconSize': 96.0,\n+    'backgroundColorGreen': 1.0,\n+    'arrangeBy': 'none',\n+    'showIconPreview': True,\n+    'gridSpacing': 100.0,\n+    'gridOffsetY': 0.0,\n+    'showItemInfo': False,\n+    'labelOnBottom': True,\n+    'backgroundType': 2,\n+    'backgroundColorRed': 1.0\n+}\n+alias = Alias.from_bytes(icvp['backgroundImageAlias'])\n+alias.volume.name = package_name_ns\n+alias.volume.posix_path = '/Volumes/' + package_name_ns\n+alias.volume.disk_image_alias.target.filename = package_name_ns + '.temp.dmg'\n+alias.volume.disk_image_alias.target.carbon_path = 'Macintosh HD:Users:\\x00bitcoinuser:\\x00Documents:\\x00bitcoin:\\x00bitcoin:\\x00' + package_name_ns + '.temp.dmg'\n+alias.volume.disk_image_alias.target.posix_path = 'Users/bitcoinuser/Documents/bitcoin/bitcoin/' + package_name_ns + '.temp.dmg'\n+alias.target.carbon_path = package_name_ns + ':.background:\\x00background.tiff'\n+icvp['backgroundImageAlias'] = biplist.Data(alias.to_bytes())\n+ds['.']['icvp'] = icvp\n+\n+ds['.']['vSrn'] = ('long', 1)\n+\n+ds['Applications']['Iloc'] = (370, 156)\n+ds['Bitcoin-Qt.app']['Iloc'] = (128, 156)\n+\n+ds.flush()\n+ds.close()"
      },
      {
        "sha": "91674a92e6fa6196c0190b6bf42fcdf32cf7d42f",
        "filename": "contrib/macdeploy/detached-sig-apply.sh",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/macdeploy/detached-sig-apply.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/macdeploy/detached-sig-apply.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/detached-sig-apply.sh?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -1,4 +1,8 @@\n #!/bin/sh\n+# Copyright (c) 2014-2015 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n set -e\n \n UNSIGNED=\"$1\""
      },
      {
        "sha": "5022ea88bc221f0c7270fef122936a9033ab3fd1",
        "filename": "contrib/macdeploy/detached-sig-create.sh",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/macdeploy/detached-sig-create.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/macdeploy/detached-sig-create.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/detached-sig-create.sh?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -1,4 +1,8 @@\n #!/bin/sh\n+# Copyright (c) 2014-2015 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n set -e\n \n ROOTDIR=dist"
      },
      {
        "sha": "ff9fbd58df0718d5bb123c927a6488ef5eef2ce0",
        "filename": "contrib/macdeploy/extract-osx-sdk.sh",
        "status": "added",
        "additions": 33,
        "deletions": 0,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/macdeploy/extract-osx-sdk.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/macdeploy/extract-osx-sdk.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/extract-osx-sdk.sh?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -0,0 +1,33 @@\n+#!/bin/bash\n+# Copyright (c) 2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+set -e\n+\n+INPUTFILE=\"Xcode_7.3.1.dmg\"\n+HFSFILENAME=\"5.hfs\"\n+SDKDIR=\"Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk\"\n+\n+7z x \"${INPUTFILE}\" \"${HFSFILENAME}\"\n+SDKNAME=\"$(basename \"${SDKDIR}\")\"\n+SDKDIRINODE=$(ifind -n \"${SDKDIR}\" \"${HFSFILENAME}\")\n+fls \"${HFSFILENAME}\" -rpF ${SDKDIRINODE} |\n+ while read type inode filename; do\n+\tinode=\"${inode::-1}\"\n+\tif [ \"${filename:0:14}\" = \"usr/share/man/\" ]; then\n+\t\tcontinue\n+\tfi\n+\tfilename=\"${SDKNAME}/$filename\"\n+\techo \"Extracting $filename ...\"\n+\tmkdir -p \"$(dirname \"$filename\")\"\n+\tif [ \"$type\" = \"l/l\" ]; then\n+\t\tln -s \"$(icat \"${HFSFILENAME}\" $inode)\" \"$filename\"\n+\telse\n+\t\ticat \"${HFSFILENAME}\" $inode >\"$filename\"\n+\tfi\n+done\n+echo \"Building ${SDKNAME}.tar.gz ...\"\n+MTIME=\"$(istat \"${HFSFILENAME}\" \"${SDKDIRINODE}\" | perl -nle 'm/Content Modified:\\s+(.*?)\\s\\(/ && print $1')\"\n+find \"${SDKNAME}\" | sort | tar --no-recursion --mtime=\"${MTIME}\" --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > \"${SDKNAME}.tar.gz\"\n+echo 'All done!'"
      },
      {
        "sha": "f8201e72c649dd6f2f111ed136436c3c5d770762",
        "filename": "contrib/macdeploy/macdeployqtplus",
        "status": "modified",
        "additions": 82,
        "deletions": 74,
        "changes": 156,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/macdeploy/macdeployqtplus",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/macdeploy/macdeployqtplus",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/macdeployqtplus?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python\n-\n+from __future__ import division, print_function, unicode_literals\n #\n # Copyright (C) 2011  Patrick \"p2k\" Schneider <me@p2k-network.org>\n #\n@@ -201,7 +201,7 @@ class DeploymentInfo(object):\n \n def getFrameworks(binaryPath, verbose):\n     if verbose >= 3:\n-        print \"Inspecting with otool: \" + binaryPath\n+        print(\"Inspecting with otool: \" + binaryPath)\n     otoolbin=os.getenv(\"OTOOL\", \"otool\")\n     otool = subprocess.Popen([otoolbin, \"-L\", binaryPath], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n     o_stdout, o_stderr = otool.communicate()\n@@ -210,8 +210,8 @@ def getFrameworks(binaryPath, verbose):\n             sys.stderr.write(o_stderr)\n             sys.stderr.flush()\n             raise RuntimeError(\"otool failed with return code %d\" % otool.returncode)\n-    \n-    otoolLines = o_stdout.split(\"\\n\")\n+\n+    otoolLines = o_stdout.decode().split(\"\\n\")\n     otoolLines.pop(0) # First line is the inspected binary\n     if \".framework\" in binaryPath or binaryPath.endswith(\".dylib\"):\n         otoolLines.pop(0) # Frameworks and dylibs list themselves as a dependency.\n@@ -222,8 +222,8 @@ def getFrameworks(binaryPath, verbose):\n         info = FrameworkInfo.fromOtoolLibraryLine(line.strip())\n         if info is not None:\n             if verbose >= 3:\n-                print \"Found framework:\"\n-                print info\n+                print(\"Found framework:\")\n+                print(info)\n             libraries.append(info)\n     \n     return libraries\n@@ -234,24 +234,24 @@ def runInstallNameTool(action, *args):\n \n def changeInstallName(oldName, newName, binaryPath, verbose):\n     if verbose >= 3:\n-        print \"Using install_name_tool:\"\n-        print \" in\", binaryPath\n-        print \" change reference\", oldName\n-        print \" to\", newName\n+        print(\"Using install_name_tool:\")\n+        print(\" in\", binaryPath)\n+        print(\" change reference\", oldName)\n+        print(\" to\", newName)\n     runInstallNameTool(\"change\", oldName, newName, binaryPath)\n \n def changeIdentification(id, binaryPath, verbose):\n     if verbose >= 3:\n-        print \"Using install_name_tool:\"\n-        print \" change identification in\", binaryPath\n-        print \" to\", id\n+        print(\"Using install_name_tool:\")\n+        print(\" change identification in\", binaryPath)\n+        print(\" to\", id)\n     runInstallNameTool(\"id\", id, binaryPath)\n \n def runStrip(binaryPath, verbose):\n     stripbin=os.getenv(\"STRIP\", \"strip\")\n     if verbose >= 3:\n-        print \"Using strip:\"\n-        print \" stripped\", binaryPath\n+        print(\"Using strip:\")\n+        print(\" stripped\", binaryPath)\n     subprocess.check_call([stripbin, \"-x\", binaryPath])\n \n def copyFramework(framework, path, verbose):\n@@ -274,8 +274,8 @@ def copyFramework(framework, path, verbose):\n     \n     shutil.copy2(fromPath, toPath)\n     if verbose >= 3:\n-        print \"Copied:\", fromPath\n-        print \" to:\", toPath\n+        print(\"Copied:\", fromPath)\n+        print(\" to:\", toPath)\n \n     permissions = os.stat(toPath)\n     if not permissions.st_mode & stat.S_IWRITE:\n@@ -288,14 +288,14 @@ def copyFramework(framework, path, verbose):\n         if not os.path.exists(linkfrom):\n             os.symlink(linkto, linkfrom)\n             if verbose >= 2:\n-                print \"Linked:\", linkfrom, \"->\", linkto\n+                print(\"Linked:\", linkfrom, \"->\", linkto)\n         fromResourcesDir = framework.sourceResourcesDirectory\n         if os.path.exists(fromResourcesDir):\n             toResourcesDir = os.path.join(path, framework.destinationResourcesDirectory)\n             shutil.copytree(fromResourcesDir, toResourcesDir, symlinks=True)\n             if verbose >= 3:\n-                print \"Copied resources:\", fromResourcesDir\n-                print \" to:\", toResourcesDir\n+                print(\"Copied resources:\", fromResourcesDir)\n+                print(\" to:\", toResourcesDir)\n         fromContentsDir = framework.sourceVersionContentsDirectory\n         if not os.path.exists(fromContentsDir):\n             fromContentsDir = framework.sourceContentsDirectory\n@@ -304,16 +304,16 @@ def copyFramework(framework, path, verbose):\n             shutil.copytree(fromContentsDir, toContentsDir, symlinks=True)\n             contentslinkfrom = os.path.join(path, framework.destinationContentsDirectory)\n             if verbose >= 3:\n-                print \"Copied Contents:\", fromContentsDir\n-                print \" to:\", toContentsDir\n+                print(\"Copied Contents:\", fromContentsDir)\n+                print(\" to:\", toContentsDir)\n     elif framework.frameworkName.startswith(\"libQtGui\"): # Copy qt_menu.nib (applies to non-framework layout)\n         qtMenuNibSourcePath = os.path.join(framework.frameworkDirectory, \"Resources\", \"qt_menu.nib\")\n         qtMenuNibDestinationPath = os.path.join(path, \"Contents\", \"Resources\", \"qt_menu.nib\")\n         if os.path.exists(qtMenuNibSourcePath) and not os.path.exists(qtMenuNibDestinationPath):\n             shutil.copytree(qtMenuNibSourcePath, qtMenuNibDestinationPath, symlinks=True)\n             if verbose >= 3:\n-                print \"Copied for libQtGui:\", qtMenuNibSourcePath\n-                print \" to:\", qtMenuNibDestinationPath\n+                print(\"Copied for libQtGui:\", qtMenuNibSourcePath)\n+                print(\" to:\", qtMenuNibDestinationPath)\n     \n     return toPath\n \n@@ -326,15 +326,15 @@ def deployFrameworks(frameworks, bundlePath, binaryPath, strip, verbose, deploym\n         deploymentInfo.deployedFrameworks.append(framework.frameworkName)\n         \n         if verbose >= 2:\n-            print \"Processing\", framework.frameworkName, \"...\"\n+            print(\"Processing\", framework.frameworkName, \"...\")\n         \n         # Get the Qt path from one of the Qt frameworks\n         if deploymentInfo.qtPath is None and framework.isQtFramework():\n             deploymentInfo.detectQtPath(framework.frameworkDirectory)\n         \n         if framework.installName.startswith(\"@executable_path\") or framework.installName.startswith(bundlePath):\n             if verbose >= 2:\n-                print framework.frameworkName, \"already deployed, skipping.\"\n+                print(framework.frameworkName, \"already deployed, skipping.\")\n             continue\n         \n         # install_name_tool the new id into the binary\n@@ -366,7 +366,7 @@ def deployFrameworks(frameworks, bundlePath, binaryPath, strip, verbose, deploym\n def deployFrameworksForAppBundle(applicationBundle, strip, verbose):\n     frameworks = getFrameworks(applicationBundle.binaryPath, verbose)\n     if len(frameworks) == 0 and verbose >= 1:\n-        print \"Warning: Could not find any external frameworks to deploy in %s.\" % (applicationBundle.path)\n+        print(\"Warning: Could not find any external frameworks to deploy in %s.\" % (applicationBundle.path))\n         return DeploymentInfo()\n     else:\n         return deployFrameworks(frameworks, applicationBundle.path, applicationBundle.binaryPath, strip, verbose)\n@@ -444,7 +444,7 @@ def deployPlugins(appBundleInfo, deploymentInfo, strip, verbose):\n     \n     for pluginDirectory, pluginName in plugins:\n         if verbose >= 2:\n-            print \"Processing plugin\", os.path.join(pluginDirectory, pluginName), \"...\"\n+            print(\"Processing plugin\", os.path.join(pluginDirectory, pluginName), \"...\")\n         \n         sourcePath = os.path.join(deploymentInfo.pluginPath, pluginDirectory, pluginName)\n         destinationDirectory = os.path.join(appBundleInfo.pluginPath, pluginDirectory)\n@@ -454,8 +454,8 @@ def deployPlugins(appBundleInfo, deploymentInfo, strip, verbose):\n         destinationPath = os.path.join(destinationDirectory, pluginName)\n         shutil.copy2(sourcePath, destinationPath)\n         if verbose >= 3:\n-            print \"Copied:\", sourcePath\n-            print \" to:\", destinationPath\n+            print(\"Copied:\", sourcePath)\n+            print(\" to:\", destinationPath)\n         \n         if strip:\n             runStrip(destinationPath, verbose)\n@@ -495,6 +495,7 @@ ap.add_argument(\"-fancy\", nargs=1, metavar=\"plist\", default=[], help=\"make a fan\n ap.add_argument(\"-add-qt-tr\", nargs=1, metavar=\"languages\", default=[], help=\"add Qt translation files to the bundle's ressources; the language list must be separated with commas, not with whitespace\")\n ap.add_argument(\"-translations-dir\", nargs=1, metavar=\"path\", default=None, help=\"Path to Qt's translation files\")\n ap.add_argument(\"-add-resources\", nargs=\"+\", metavar=\"path\", default=[], help=\"list of additional files or folders to be copied into the bundle's resources; must be the last argument\")\n+ap.add_argument(\"-volname\", nargs=1, metavar=\"volname\", default=[], help=\"custom volume name for dmg\")\n \n config = ap.parse_args()\n \n@@ -524,7 +525,7 @@ if config.translations_dir and config.translations_dir[0]:\n \n for p in config.add_resources:\n     if verbose >= 3:\n-        print \"Checking for \\\"%s\\\"...\" % p\n+        print(\"Checking for \\\"%s\\\"...\" % p)\n     if not os.path.exists(p):\n         if verbose >= 1:\n             sys.stderr.write(\"Error: Could not find additional resource file \\\"%s\\\"\\n\" % (p))\n@@ -534,7 +535,7 @@ for p in config.add_resources:\n \n if len(config.fancy) == 1:\n     if verbose >= 3:\n-        print \"Fancy: Importing plistlib...\"\n+        print(\"Fancy: Importing plistlib...\")\n     try:\n         import plistlib\n     except ImportError:\n@@ -544,7 +545,7 @@ if len(config.fancy) == 1:\n     \n     p = config.fancy[0]\n     if verbose >= 3:\n-        print \"Fancy: Loading \\\"%s\\\"...\" % p\n+        print(\"Fancy: Loading \\\"%s\\\"...\" % p)\n     if not os.path.exists(p):\n         if verbose >= 1:\n             sys.stderr.write(\"Error: Could not find fancy disk image plist at \\\"%s\\\"\\n\" % (p))\n@@ -558,23 +559,23 @@ if len(config.fancy) == 1:\n         sys.exit(1)\n     \n     try:\n-        assert not fancy.has_key(\"window_bounds\") or (isinstance(fancy[\"window_bounds\"], list) and len(fancy[\"window_bounds\"]) == 4)\n-        assert not fancy.has_key(\"background_picture\") or isinstance(fancy[\"background_picture\"], str)\n-        assert not fancy.has_key(\"icon_size\") or isinstance(fancy[\"icon_size\"], int)\n-        assert not fancy.has_key(\"applications_symlink\") or isinstance(fancy[\"applications_symlink\"], bool)\n-        if fancy.has_key(\"items_position\"):\n+        assert \"window_bounds\" not in fancy or (isinstance(fancy[\"window_bounds\"], list) and len(fancy[\"window_bounds\"]) == 4)\n+        assert \"background_picture\" not in fancy or isinstance(fancy[\"background_picture\"], str)\n+        assert \"icon_size\" not in fancy or isinstance(fancy[\"icon_size\"], int)\n+        assert \"applications_symlink\" not in fancy or isinstance(fancy[\"applications_symlink\"], bool)\n+        if \"items_position\" in fancy:\n             assert isinstance(fancy[\"items_position\"], dict)\n-            for key, value in fancy[\"items_position\"].iteritems():\n+            for key, value in fancy[\"items_position\"].items():\n                 assert isinstance(value, list) and len(value) == 2 and isinstance(value[0], int) and isinstance(value[1], int)\n     except:\n         if verbose >= 1:\n             sys.stderr.write(\"Error: Bad format of fancy disk image plist at \\\"%s\\\"\\n\" % (p))\n         sys.exit(1)\n     \n-    if fancy.has_key(\"background_picture\"):\n+    if \"background_picture\" in fancy:\n         bp = fancy[\"background_picture\"]\n         if verbose >= 3:\n-            print \"Fancy: Resolving background picture \\\"%s\\\"...\" % bp\n+            print(\"Fancy: Resolving background picture \\\"%s\\\"...\" % bp)\n         if not os.path.exists(bp):\n             bp = os.path.join(os.path.dirname(p), bp)\n             if not os.path.exists(bp):\n@@ -590,18 +591,25 @@ else:\n \n if os.path.exists(\"dist\"):\n     if verbose >= 2:\n-        print \"+ Removing old dist folder +\"\n+        print(\"+ Removing old dist folder +\")\n     \n     shutil.rmtree(\"dist\")\n \n # ------------------------------------------------\n \n+if len(config.volname) == 1:\n+    volname = config.volname[0]\n+else:\n+    volname = app_bundle_name\n+\n+# ------------------------------------------------\n+\n target = os.path.join(\"dist\", \"Bitcoin-Qt.app\")\n \n if verbose >= 2:\n-    print \"+ Copying source bundle +\"\n+    print(\"+ Copying source bundle +\")\n if verbose >= 3:\n-    print app_bundle, \"->\", target\n+    print(app_bundle, \"->\", target)\n \n os.mkdir(\"dist\")\n shutil.copytree(app_bundle, target, symlinks=True)\n@@ -611,7 +619,7 @@ applicationBundle = ApplicationBundleInfo(target)\n # ------------------------------------------------\n \n if verbose >= 2:\n-    print \"+ Deploying frameworks +\"\n+    print(\"+ Deploying frameworks +\")\n \n try:\n     deploymentInfo = deployFrameworksForAppBundle(applicationBundle, config.strip, verbose)\n@@ -630,7 +638,7 @@ except RuntimeError as e:\n \n if config.plugins:\n     if verbose >= 2:\n-        print \"+ Deploying plugins +\"\n+        print(\"+ Deploying plugins +\")\n     \n     try:\n         deployPlugins(applicationBundle, deploymentInfo, config.strip, verbose)\n@@ -656,7 +664,7 @@ else:\n     for lng_file in add_qt_tr:\n         p = os.path.join(qt_tr_dir, lng_file)\n         if verbose >= 3:\n-            print \"Checking for \\\"%s\\\"...\" % p\n+            print(\"Checking for \\\"%s\\\"...\" % p)\n         if not os.path.exists(p):\n             if verbose >= 1:\n                 sys.stderr.write(\"Error: Could not find Qt translation file \\\"%s\\\"\\n\" % (lng_file))\n@@ -665,31 +673,31 @@ else:\n # ------------------------------------------------\n \n if verbose >= 2:\n-    print \"+ Installing qt.conf +\"\n+    print(\"+ Installing qt.conf +\")\n \n f = open(os.path.join(applicationBundle.resourcesPath, \"qt.conf\"), \"wb\")\n-f.write(qt_conf)\n+f.write(qt_conf.encode())\n f.close()\n \n # ------------------------------------------------\n \n if len(add_qt_tr) > 0 and verbose >= 2:\n-    print \"+ Adding Qt translations +\"\n+    print(\"+ Adding Qt translations +\")\n \n for lng_file in add_qt_tr:\n     if verbose >= 3:\n-        print os.path.join(qt_tr_dir, lng_file), \"->\", os.path.join(applicationBundle.resourcesPath, lng_file)\n+        print(os.path.join(qt_tr_dir, lng_file), \"->\", os.path.join(applicationBundle.resourcesPath, lng_file))\n     shutil.copy2(os.path.join(qt_tr_dir, lng_file), os.path.join(applicationBundle.resourcesPath, lng_file))\n \n # ------------------------------------------------\n \n if len(config.add_resources) > 0 and verbose >= 2:\n-    print \"+ Adding additional resources +\"\n+    print(\"+ Adding additional resources +\")\n \n for p in config.add_resources:\n     t = os.path.join(applicationBundle.resourcesPath, os.path.basename(p))\n     if verbose >= 3:\n-        print p, \"->\", t\n+        print(p, \"->\", t)\n     if os.path.isdir(p):\n         shutil.copytree(p, t, symlinks=True)\n     else:\n@@ -698,10 +706,10 @@ for p in config.add_resources:\n # ------------------------------------------------\n \n if config.sign and 'CODESIGNARGS' not in os.environ:\n-    print \"You must set the CODESIGNARGS environment variable. Skipping signing.\"\n+    print(\"You must set the CODESIGNARGS environment variable. Skipping signing.\")\n elif config.sign:\n     if verbose >= 1:\n-        print \"Code-signing app bundle %s\"%(target,)\n+        print(\"Code-signing app bundle %s\"%(target,))\n     subprocess.check_call(\"codesign --force %s %s\"%(os.environ['CODESIGNARGS'], target), shell=True)\n \n # ------------------------------------------------\n@@ -726,7 +734,7 @@ if config.dmg is not None:\n \n     def runHDIUtil(verb, image_basename, **kwargs):\n         hdiutil_args = [\"hdiutil\", verb, image_basename + \".dmg\"]\n-        if kwargs.has_key(\"capture_stdout\"):\n+        if \"capture_stdout\" in kwargs:\n             del kwargs[\"capture_stdout\"]\n             run = subprocess.check_output\n         else:\n@@ -736,7 +744,7 @@ if config.dmg is not None:\n                 hdiutil_args.append(\"-verbose\")\n             run = subprocess.check_call\n         \n-        for key, value in kwargs.iteritems():\n+        for key, value in kwargs.items():\n             hdiutil_args.append(\"-\" + key)\n             if not value is True:\n                 hdiutil_args.append(str(value))\n@@ -745,9 +753,9 @@ if config.dmg is not None:\n     \n     if verbose >= 2:\n         if fancy is None:\n-            print \"+ Creating .dmg disk image +\"\n+            print(\"+ Creating .dmg disk image +\")\n         else:\n-            print \"+ Preparing .dmg disk image +\"\n+            print(\"+ Preparing .dmg disk image +\")\n     \n     if config.dmg != \"\":\n         dmg_name = config.dmg\n@@ -757,27 +765,27 @@ if config.dmg is not None:\n     \n     if fancy is None:\n         try:\n-            runHDIUtil(\"create\", dmg_name, srcfolder=\"dist\", format=\"UDBZ\", volname=\"Bitcoin-Core\", ov=True)\n+            runHDIUtil(\"create\", dmg_name, srcfolder=\"dist\", format=\"UDBZ\", volname=volname, ov=True)\n         except subprocess.CalledProcessError as e:\n             sys.exit(e.returncode)\n     else:\n         if verbose >= 3:\n-            print \"Determining size of \\\"dist\\\"...\"\n+            print(\"Determining size of \\\"dist\\\"...\")\n         size = 0\n         for path, dirs, files in os.walk(\"dist\"):\n             for file in files:\n                 size += os.path.getsize(os.path.join(path, file))\n         size += int(size * 0.15)\n         \n         if verbose >= 3:\n-            print \"Creating temp image for modification...\"\n+            print(\"Creating temp image for modification...\")\n         try:\n-            runHDIUtil(\"create\", dmg_name + \".temp\", srcfolder=\"dist\", format=\"UDRW\", size=size, volname=\"Bitcoin-Core\", ov=True)\n+            runHDIUtil(\"create\", dmg_name + \".temp\", srcfolder=\"dist\", format=\"UDRW\", size=size, volname=volname, ov=True)\n         except subprocess.CalledProcessError as e:\n             sys.exit(e.returncode)\n         \n         if verbose >= 3:\n-            print \"Attaching temp image...\"\n+            print(\"Attaching temp image...\")\n         try:\n             output = runHDIUtil(\"attach\", dmg_name + \".temp\", readwrite=True, noverify=True, noautoopen=True, capture_stdout=True)\n         except subprocess.CalledProcessError as e:\n@@ -788,13 +796,13 @@ if config.dmg is not None:\n         disk_name = m.group(1)\n         \n         if verbose >= 2:\n-            print \"+ Applying fancy settings +\"\n+            print(\"+ Applying fancy settings +\")\n         \n-        if fancy.has_key(\"background_picture\"):\n+        if \"background_picture\" in fancy:\n             bg_path = os.path.join(disk_root, \".background\", os.path.basename(fancy[\"background_picture\"]))\n             os.mkdir(os.path.dirname(bg_path))\n             if verbose >= 3:\n-                print fancy[\"background_picture\"], \"->\", bg_path\n+                print(fancy[\"background_picture\"], \"->\", bg_path)\n             shutil.copy2(fancy[\"background_picture\"], bg_path)\n         else:\n             bg_path = None\n@@ -831,21 +839,21 @@ if config.dmg is not None:\n \n         itemscript = Template('set position of item \"${item}\" of container window to {${position}}')\n         items_positions = []\n-        if fancy.has_key(\"items_position\"):\n-            for name, position in fancy[\"items_position\"].iteritems():\n+        if \"items_position\" in fancy:\n+            for name, position in fancy[\"items_position\"].items():\n                 params = { \"item\" : name, \"position\" : \",\".join([str(p) for p in position]) }\n                 items_positions.append(itemscript.substitute(params))\n \n         params = {\n-            \"disk\" : \"Bitcoin-Core\",\n+            \"disk\" : volname,\n             \"window_bounds\" : \"300,300,800,620\",\n             \"icon_size\" : \"96\",\n             \"background_commands\" : \"\",\n             \"items_positions\" : \"\\n                   \".join(items_positions)\n             }\n-        if fancy.has_key(\"window_bounds\"):\n+        if \"window_bounds\" in fancy:\n             params[\"window.bounds\"] = \",\".join([str(p) for p in fancy[\"window_bounds\"]])\n-        if fancy.has_key(\"icon_size\"):\n+        if \"icon_size\" in fancy:\n             params[\"icon_size\"] = str(fancy[\"icon_size\"])\n         if bg_path is not None:\n             # Set background file, then call SetFile to make it invisible.\n@@ -865,7 +873,7 @@ if config.dmg is not None:\n             print(\"Error running osascript.\")\n \n         if verbose >= 2:\n-            print \"+ Finalizing .dmg disk image +\"\n+            print(\"+ Finalizing .dmg disk image +\")\n             time.sleep(5)\n         \n         try:\n@@ -878,6 +886,6 @@ if config.dmg is not None:\n # ------------------------------------------------\n \n if verbose >= 2:\n-    print \"+ Done +\"\n+    print(\"+ Done +\")\n \n sys.exit(0)"
      },
      {
        "sha": "aaf5e1fa11ed7d1f8cb8c277068d648cfe3649b8",
        "filename": "contrib/qos/tc.sh",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/qos/tc.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/qos/tc.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/qos/tc.sh?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -1,3 +1,7 @@\n+# Copyright (c) 2013 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n #network interface on which to limit traffic\n IF=\"eth0\"\n #limit of the network interface in question"
      },
      {
        "sha": "fd8a8b71298c6b5878c83842cd3f68804560a2e2",
        "filename": "contrib/qt_translations.py",
        "status": "removed",
        "additions": 0,
        "deletions": 22,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9df179d2e3abdee7d1f255d9be17c8b72dff06a/contrib/qt_translations.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9df179d2e3abdee7d1f255d9be17c8b72dff06a/contrib/qt_translations.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/qt_translations.py?ref=e9df179d2e3abdee7d1f255d9be17c8b72dff06a",
        "patch": "@@ -1,22 +0,0 @@\n-#!/usr/bin/env python\n-\n-# Helpful little script that spits out a comma-separated list of\n-# language codes for Qt icons that should be included\n-# in binary bitcoin distributions\n-\n-import glob\n-import os\n-import re\n-import sys\n-\n-if len(sys.argv) != 3:\n-  sys.exit(\"Usage: %s $QTDIR/translations $BITCOINDIR/src/qt/locale\"%sys.argv[0])\n-\n-d1 = sys.argv[1]\n-d2 = sys.argv[2]\n-\n-l1 = set([ re.search(r'qt_(.*).qm', f).group(1) for f in glob.glob(os.path.join(d1, 'qt_*.qm')) ])\n-l2 = set([ re.search(r'bitcoin_(.*).qm', f).group(1) for f in glob.glob(os.path.join(d2, 'bitcoin_*.qm')) ])\n-\n-print \",\".join(sorted(l1.intersection(l2)))\n-"
      },
      {
        "sha": "aecb3ba84f20d4575569fb1fc2e4eddb5018c645",
        "filename": "contrib/rpm/README.md",
        "status": "added",
        "additions": 185,
        "deletions": 0,
        "changes": 185,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/rpm/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/rpm/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/rpm/README.md?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -0,0 +1,185 @@\n+RPM Spec File Notes\n+-------------------\n+\n+The RPM spec file provided here is for Bitcoin-Core 0.12.0 and builds on CentOS\n+7 with either the CentOS provided OpenSSL library or with LibreSSL as packaged\n+at [LibreLAMP.com](https://librelamp.com/). It should hopefully not be too\n+difficult to port the RPM spec file to most RPM based Linux distributions.\n+\n+When porting the spec file to build for a particular distribution, there are\n+some important notes.\n+\n+## Sources\n+\n+It is considered good form for all sources to reference a URL where the source\n+can be downloaded.\n+\n+Sources 0-9 should be reserved for source code tarballs. `Source0` should\n+reference the release tarball available from https://bitcoin.org/bin/ and\n+`Source1` should reference the BerkeleyDB source.\n+\n+Sources 10-99 are for source files that are maintained in the\n+[Bitcoin git repository](https://github.com/bitcoin/bitcoin) but are not part of\n+the release tarball. Most of these will reside in the `contrib` sub-directory.\n+\n+Sources 10-19 should be reserved for miscellaneous configuration files.\n+Currently only `Source10` is used, for the example `bitcoin.conf` file.\n+\n+Sources 20-29 should be reserved for man pages. Currently only `Source20`\n+through `Source23` are used.\n+\n+Sources 30-39 should be reserved for SELinux related files. Currently only\n+`Source30` through `Source32` are used. Until those files are in a tagged\n+release, the full URL specified in the RPM spec file will not work. You can get\n+them from the git ropository where you retrieved this file.\n+\n+Sources 100+ are for files that are not source tarballs and are not maintained\n+in the bitcoin git repository. At present only an SVG version of the Bitcoin\n+icon is used.\n+\n+## Patches\n+\n+In general, patches should be avoided. When a packager feels a patch is\n+necessary, the packager should bring the problem to the attention of the bitcoin\n+developers so that an official fix to the issue can make it into the next\n+release.\n+\n+### Patch0 bitcoin-0.12.0-libressl.patch\n+\n+This patch is only needed if building against LibreSSL. LibreSSL is not the\n+standard TLS library on most Linux distributions. The patch will likely not be\n+needed when 0.12.1 is released, a proper fix is already in the Bitcoin git\n+master branch.\n+\n+## BuildRequires\n+\n+The packages specified in the `BuildRequires` are specified according to the\n+package naming convention currently used in CentOS 7 and EPEL for CentOS 7. You\n+may need to change some of the package names for other distributions. This is\n+most likely to be the case with the Qt packages.\n+\n+## BerkeleyDB\n+\n+The `build-unix.md` file recommends building against BerkeleyDB 4.8.30. Even if\n+that is the version your Linux distribution ships with, it probably is a good\n+idea to build Bitcoin Core against a static version of that library compiled\n+according to the instructions in the `build-unix.md` file so that any changes\n+the distribution may make in the future will not result in a problem for users.\n+\n+The problem that can exist, clients built against different versions of\n+BerkeleyDB may not be able read each other's `wallet.dat` file which can make it\n+difficult for a user to recover from backup in the event of a system failure.\n+\n+## Graphical User Interface and Qt Version\n+\n+The RPM spec file will by default build the GUI client linked against the Qt5\n+libraries. If you wish instead to link against the Qt4 libraries you need to\n+pass the switch `-D '_use_qt4 1'` at build time to the `rpmbuild` or `mock`\n+command used to build the packages.\n+\n+If you would prefer not to build the GUI at all, you can pass the switch\n+`-D '_no_gui 1'` to the `rpmbuild` or `mock` build command.\n+\n+## Desktop and KDE Files\n+\n+The desktop and KDE meta files are created in the spec file itself with the\n+`cat` command. This is done to allow easy distribution specific changes without\n+needing to use any patches. A specific time stamp is given to the files so that\n+it does not they do not appear to have been updated every time the package is\n+built. If you do make changes to them, you probably should update time stamp\n+assigned to them in the `touch` command that specifies the time stamp.\n+\n+## SVG, PNG, and XPM Icons\n+\n+The `bitcoin.svg` file is from the source listed as `Source100`. It is used as\n+the source for the PNG and XPM files. The generated PNG and XPM files are given\n+the same time stamp as the source SVG file as a means of indicating they are\n+derived from it.\n+\n+## Systemd\n+\n+This spec file assumes the target distribution uses systemd. That really only\n+matters for the `bitcoin-server` package. At this point, most RPM based\n+distributions that still receive vendor updates do in fact use systemd.\n+\n+The files to control the service are created in the RPM spec file itself using\n+the `cat` command. This is done to make it easy to modify for other\n+distributions that may implement things differently without needing to patch\n+source. A specific time stamp is given to the files so that they do not appear\n+to have been updated every time the package is built. If you do make changes to\n+them, you probably should update the time stamp assigned to them in the `touch`\n+command that specifies the time stamp.\n+\n+## SELinux\n+\n+The `bitcoin-server` package should have SELinux support. How to properly do\n+that *may* vary by distribution and version of distribution.\n+\n+The SELinux stuff in this RPM spec file *should* be correct for CentOS, RHEL,\n+and Fedora but it would be a good idea to review it before building the package\n+on other distributions.\n+\n+## Tests\n+\n+The `%check` section takes a very long time to run. If your build system has a\n+time limit for package build, you may need to make an exception for this\n+package. On CentOS 7 the `%check` section completes successfully with both\n+OpenSSL and LibreSSL, a failure really does mean something is wrong.\n+\n+## LibreSSL Build Notes\n+\n+To build against LibreSSL you will need to pass the switch\n+`-D '_use_libressl 1'` to the `rpmbuild` or `mock` command or the spec file will\n+want the OpenSSL development files.\n+\n+### LibreSSL and Boost\n+\n+LibreSSL (and some newer builds of OpenSSL) do not have support for SSLv3. This\n+can cause issues with the Boost package if the Boost package has not been\n+patched accordingly. On those distributions, you will either need to build\n+Bitcoin-Core against OpenSSL or use a patched version of Boost in the build\n+system.\n+\n+As SSLv3 is no longer safe, distributions that have not patched Boost to work\n+with TLS libraries that do not support SSLv3 should have bug reports filed\n+against the Boost package. This bug report has already been filed for RHEL 7 but\n+it may need to be filed for other distributions.\n+\n+A patch for Boost: https://github.com/boostorg/asio/pull/23/files\n+\n+## ZeroMQ\n+\n+At this time, this RPM spec file does not support the ZeroMQ build options. A\n+suitable version of ZeroMQ is not available for the platform this spec file was\n+developed on (CentOS 7).\n+\n+## Legacy Credit\n+\n+This RPM spec file is largely based upon the work of Michael Hampton at\n+[Ringing Liberty](https://www.ringingliberty.com/bitcoin/). He has been\n+packaging Bitcoin for Fedora at least since 2012.\n+\n+Most of the differences between his packaging and this package are stylistic in\n+nature. The major differences:\n+\n+1. He builds from a github tagged release rather than a release tarball. This\n+should not result in different source code.\n+\n+2. He does not build BerkeleyDB but instead uses the BerkeleyDB provided by the\n+Linux distribution. For the distributions he packages for, they currently all\n+use the same version of BerkeleyDB so that difference is *probably* just\n+academic.\n+\n+3. As of his 10.11.2 package he did not allow for building against LibreSSL,\n+specifying a build without the Qt GUI, or specifying which version of the Qt\n+libraries to use.\n+\n+4. I renamed the `bitcoin` package that contains the Qt GUI to `bitcoin-core` as\n+that appears to be how the general population refers to it, in contrast to\n+`bitcoin-xt` or `bitcoin-classic`. I wanted to make sure the general population\n+knows what they are getting when installing the GUI package.\n+\n+As far as minor differences, I generally prefer to assign the file permissions\n+in the `%files` portion of an RPM spec file rather than specifying the\n+permissions of a file during `%install` and other minor things like that that\n+are largely just cosmetic."
      },
      {
        "sha": "555614a06d49ab820fce1e08f723005b26cdcb01",
        "filename": "contrib/rpm/bitcoin-0.12.0-libressl.patch",
        "status": "added",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/rpm/bitcoin-0.12.0-libressl.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/rpm/bitcoin-0.12.0-libressl.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/rpm/bitcoin-0.12.0-libressl.patch?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -0,0 +1,24 @@\n+diff -ur bitcoin-0.12.0.orig/src/init.cpp bitcoin-0.12.0/src/init.cpp\n+--- bitcoin-0.12.0.orig/src/init.cpp\t2015-12-31 16:00:00.000000000 -0800\n++++ bitcoin-0.12.0/src/init.cpp\t2016-02-23 06:03:47.133227757 -0800\n+@@ -1075,7 +1075,7 @@\n+     if (fPrintToDebugLog)\n+         OpenDebugLog();\n+ \n+-#if (OPENSSL_VERSION_NUMBER < 0x10100000L)\n++#if defined(LIBRESSL_VERSION_NUMBER) || (OPENSSL_VERSION_NUMBER < 0x10100000L)\n+     LogPrintf(\"Using OpenSSL version %s\\n\", SSLeay_version(SSLEAY_VERSION));\n+ #else\n+     LogPrintf(\"Using OpenSSL version %s\\n\", OpenSSL_version(OPENSSL_VERSION));\n+diff -ur bitcoin-0.12.0.orig/src/qt/rpcconsole.cpp bitcoin-0.12.0/src/qt/rpcconsole.cpp\n+--- bitcoin-0.12.0.orig/src/qt/rpcconsole.cpp\t2015-12-31 16:00:00.000000000 -0800\n++++ bitcoin-0.12.0/src/qt/rpcconsole.cpp\t2016-02-23 15:09:42.881126841 -0800\n+@@ -264,7 +264,7 @@\n+ \n+     // set library version labels\n+ \n+-#if (OPENSSL_VERSION_NUMBER < 0x10100000L)\n++#if defined(LIBRESSL_VERSION_NUMBER) || (OPENSSL_VERSION_NUMBER < 0x10100000L)\n+     ui->openSSLVersion->setText(SSLeay_version(SSLEAY_VERSION));\n+ #else\n+     ui->openSSLVersion->setText(OpenSSL_version(OPENSSL_VERSION));"
      },
      {
        "sha": "6f5eef6375255381f7c4552715ffdaf329e4a502",
        "filename": "contrib/rpm/bitcoin.fc",
        "status": "added",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/rpm/bitcoin.fc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/rpm/bitcoin.fc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/rpm/bitcoin.fc?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -0,0 +1,8 @@\n+/usr/bin/bitcoin-cli\t\t--\tgen_context(system_u:object_r:bitcoin_exec_t,s0)\n+/usr/sbin/bitcoind\t\t--\tgen_context(system_u:object_r:bitcoin_exec_t,s0)\n+/usr/lib(64)?/bitcoin/bitcoind\t\t--\tgen_context(system_u:object_r:bitcoin_exec_t,s0)\n+\n+/etc/bitcoin(/.*)?\t\tgen_context(system_u:object_r:bitcoin_conf_t,s0)\n+/var/lib/bitcoin(/.*)?\t\tgen_context(system_u:object_r:bitcoin_var_lib_t,s0)\n+\n+(/var)?/run/bitcoind(/.*)?   gen_context(system_u:object_r:bitcoin_var_run_t,s0)"
      },
      {
        "sha": "2b096c24dc32396ef071aedecc6907c28bfba855",
        "filename": "contrib/rpm/bitcoin.if",
        "status": "added",
        "additions": 157,
        "deletions": 0,
        "changes": 157,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/rpm/bitcoin.if",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/rpm/bitcoin.if",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/rpm/bitcoin.if?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -0,0 +1,157 @@\n+\n+## <summary>policy for bitcoin</summary>\n+\n+\n+########################################\n+## <summary>\n+##\tTransition to bitcoin.\n+## </summary>\n+## <param name=\"domain\">\n+## <summary>\n+##\tDomain allowed to transition.\n+## </summary>\n+## </param>\n+#\n+interface(`bitcoin_domtrans',`\n+\tgen_require(`\n+\t\ttype bitcoin_t, bitcoin_exec_t;\n+\t')\n+\n+\tcorecmd_search_bin($1)\n+\tdomtrans_pattern($1, bitcoin_exec_t, bitcoin_t)\n+')\n+\n+\n+########################################\n+## <summary>\n+##\tExecute bitcoin server in the bitcoin domain.\n+## </summary>\n+## <param name=\"domain\">\n+##\t<summary>\n+##\tDomain allowed access.\n+##\t</summary>\n+## </param>\n+#\n+interface(`bitcoin_initrc_domtrans',`\n+\tgen_require(`\n+\t\ttype bitcoin_initrc_exec_t;\n+\t')\n+\n+\tinit_labeled_script_domtrans($1, bitcoin_initrc_exec_t)\n+')\n+\n+\n+########################################\n+## <summary>\n+##\tSearch bitcoin lib directories.\n+## </summary>\n+## <param name=\"domain\">\n+##\t<summary>\n+##\tDomain allowed access.\n+##\t</summary>\n+## </param>\n+#\n+interface(`bitcoin_search_lib',`\n+\tgen_require(`\n+\t\ttype bitcoin_var_lib_t;\n+\t')\n+\n+\tallow $1 bitcoin_var_lib_t:dir search_dir_perms;\n+\tfiles_search_var_lib($1)\n+')\n+\n+########################################\n+## <summary>\n+##\tRead bitcoin lib files.\n+## </summary>\n+## <param name=\"domain\">\n+##\t<summary>\n+##\tDomain allowed access.\n+##\t</summary>\n+## </param>\n+#\n+interface(`bitcoin_read_lib_files',`\n+\tgen_require(`\n+\t\ttype bitcoin_var_lib_t;\n+\t')\n+\n+\tfiles_search_var_lib($1)\n+\tread_files_pattern($1, bitcoin_var_lib_t, bitcoin_var_lib_t)\n+')\n+\n+########################################\n+## <summary>\n+##\tManage bitcoin lib files.\n+## </summary>\n+## <param name=\"domain\">\n+##\t<summary>\n+##\tDomain allowed access.\n+##\t</summary>\n+## </param>\n+#\n+interface(`bitcoin_manage_lib_files',`\n+\tgen_require(`\n+\t\ttype bitcoin_var_lib_t;\n+\t')\n+\n+\tfiles_search_var_lib($1)\n+\tmanage_files_pattern($1, bitcoin_var_lib_t, bitcoin_var_lib_t)\n+')\n+\n+########################################\n+## <summary>\n+##\tManage bitcoin lib directories.\n+## </summary>\n+## <param name=\"domain\">\n+##\t<summary>\n+##\tDomain allowed access.\n+##\t</summary>\n+## </param>\n+#\n+interface(`bitcoin_manage_lib_dirs',`\n+\tgen_require(`\n+\t\ttype bitcoin_var_lib_t;\n+\t')\n+\n+\tfiles_search_var_lib($1)\n+\tmanage_dirs_pattern($1, bitcoin_var_lib_t, bitcoin_var_lib_t)\n+')\n+\n+\n+########################################\n+## <summary>\n+##\tAll of the rules required to administrate\n+##\tan bitcoin environment\n+## </summary>\n+## <param name=\"domain\">\n+##\t<summary>\n+##\tDomain allowed access.\n+##\t</summary>\n+## </param>\n+## <param name=\"role\">\n+##\t<summary>\n+##\tRole allowed access.\n+##\t</summary>\n+## </param>\n+## <rolecap/>\n+#\n+interface(`bitcoin_admin',`\n+\tgen_require(`\n+\t\ttype bitcoin_t;\n+\t\ttype bitcoin_initrc_exec_t;\n+\t\ttype bitcoin_var_lib_t;\n+\t')\n+\n+\tallow $1 bitcoin_t:process { ptrace signal_perms };\n+\tps_process_pattern($1, bitcoin_t)\n+\n+\tbitcoin_initrc_domtrans($1)\n+\tdomain_system_change_exemption($1)\n+\trole_transition $2 bitcoin_initrc_exec_t system_r;\n+\tallow $2 system_r;\n+\n+\tfiles_search_var_lib($1)\n+\tadmin_pattern($1, bitcoin_var_lib_t)\n+\n+')\n+"
      },
      {
        "sha": "516f42334ec1493e87fff93b11ebd8a6310b04bd",
        "filename": "contrib/rpm/bitcoin.spec",
        "status": "added",
        "additions": 440,
        "deletions": 0,
        "changes": 440,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/rpm/bitcoin.spec",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/rpm/bitcoin.spec",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/rpm/bitcoin.spec?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -0,0 +1,440 @@\n+%define bdbv 4.8.30\n+%global selinux_variants mls strict targeted\n+\n+%if 0%{?_no_gui:1}\n+%define _buildqt 0\n+%define buildargs --with-gui=no\n+%else\n+%define _buildqt 1\n+%if 0%{?_use_qt4}\n+%define buildargs --with-qrencode --with-gui=qt4\n+%else\n+%define buildargs --with-qrencode --with-gui=qt5\n+%endif\n+%endif\n+\n+Name:\t\tbitcoin\n+Version:\t0.12.0\n+Release:\t2%{?dist}\n+Summary:\tPeer to Peer Cryptographic Currency\n+\n+Group:\t\tApplications/System\n+License:\tMIT\n+URL:\t\thttps://bitcoin.org/\n+Source0:\thttps://bitcoin.org/bin/bitcoin-core-%{version}/bitcoin-%{version}.tar.gz\n+Source1:\thttp://download.oracle.com/berkeley-db/db-%{bdbv}.NC.tar.gz\n+\n+Source10:\thttps://raw.githubusercontent.com/bitcoin/bitcoin/v%{version}/contrib/debian/examples/bitcoin.conf\n+\n+#man pages\n+Source20:\thttps://raw.githubusercontent.com/bitcoin/bitcoin/v%{version}/doc/man/bitcoind.1\n+Source21:\thttps://raw.githubusercontent.com/bitcoin/bitcoin/v%{version}/doc/man/bitcoin-cli.1\n+Source22:\thttps://raw.githubusercontent.com/bitcoin/bitcoin/v%{version}/doc/man/bitcoin-qt.1\n+\n+#selinux\n+Source30:\thttps://raw.githubusercontent.com/bitcoin/bitcoin/v%{version}/contrib/rpm/bitcoin.te\n+# Source31 - what about bitcoin-tx and bench_bitcoin ???\n+Source31:\thttps://raw.githubusercontent.com/bitcoin/bitcoin/v%{version}/contrib/rpm/bitcoin.fc\n+Source32:\thttps://raw.githubusercontent.com/bitcoin/bitcoin/v%{version}/contrib/rpm/bitcoin.if\n+\n+Source100:\thttps://upload.wikimedia.org/wikipedia/commons/4/46/Bitcoin.svg\n+\n+%if 0%{?_use_libressl:1}\n+BuildRequires:\tlibressl-devel\n+%else\n+BuildRequires:\topenssl-devel\n+%endif\n+BuildRequires:\tboost-devel\n+BuildRequires:\tminiupnpc-devel\n+BuildRequires:\tautoconf automake libtool\n+BuildRequires:\tlibevent-devel\n+\n+\n+Patch0:\t\tbitcoin-0.12.0-libressl.patch\n+\n+\n+%description\n+Bitcoin is a digital cryptographic currency that uses peer-to-peer technology to\n+operate with no central authority or banks; managing transactions and the\n+issuing of bitcoins is carried out collectively by the network.\n+\n+%if %{_buildqt}\n+%package core\n+Summary:\tPeer to Peer Cryptographic Currency\n+Group:\t\tApplications/System\n+Obsoletes:\t%{name} < %{version}-%{release}\n+Provides:\t%{name} = %{version}-%{release}\n+%if 0%{?_use_qt4}\n+BuildRequires:\tqt-devel\n+%else\n+BuildRequires:\tqt5-qtbase-devel\n+# for /usr/bin/lrelease-qt5\n+BuildRequires:\tqt5-linguist\n+%endif\n+BuildRequires:\tprotobuf-devel\n+BuildRequires:\tqrencode-devel\n+BuildRequires:\t%{_bindir}/desktop-file-validate\n+# for icon generation from SVG\n+BuildRequires:\t%{_bindir}/inkscape\n+BuildRequires:\t%{_bindir}/convert\n+\n+%description core\n+Bitcoin is a digital cryptographic currency that uses peer-to-peer technology to\n+operate with no central authority or banks; managing transactions and the\n+issuing of bitcoins is carried out collectively by the network.\n+\n+This package contains the Qt based graphical client and node. If you are looking\n+to run a Bitcoin wallet, this is probably the package you want.\n+%endif\n+\n+\n+%package libs\n+Summary:\tBitcoin shared libraries\n+Group:\t\tSystem Environment/Libraries\n+\n+%description libs\n+This package provides the bitcoinconsensus shared libraries. These libraries\n+may be used by third party software to provide consensus verification\n+functionality.\n+\n+Unless you know need this package, you probably do not.\n+\n+%package devel\n+Summary:\tDevelopment files for bitcoin\n+Group:\t\tDevelopment/Libraries\n+Requires:\t%{name}-libs = %{version}-%{release}\n+\n+%description devel\n+This package contains the header files and static library for the\n+bitcoinconsensus shared library. If you are developing or compiling software\n+that wants to link against that library, then you need this package installed.\n+\n+Most people do not need this package installed.\n+\n+%package server\n+Summary:\tThe bitcoin daemon\n+Group:\t\tSystem Environment/Daemons\n+Requires:\tbitcoin-utils = %{version}-%{release}\n+Requires:\tselinux-policy policycoreutils-python\n+Requires(pre):\tshadow-utils\n+Requires(post):\t%{_sbindir}/semodule %{_sbindir}/restorecon %{_sbindir}/fixfiles %{_sbindir}/sestatus\n+Requires(postun):\t%{_sbindir}/semodule %{_sbindir}/restorecon %{_sbindir}/fixfiles %{_sbindir}/sestatus\n+BuildRequires:\tsystemd\n+BuildRequires:\tcheckpolicy\n+BuildRequires:\t%{_datadir}/selinux/devel/Makefile\n+\n+%description server\n+This package provides a stand-alone bitcoin-core daemon. For most users, this\n+package is only needed if they need a full-node without the graphical client.\n+\n+Some third party wallet software will want this package to provide the actual\n+bitcoin-core node they use to connect to the network.\n+\n+If you use the graphical bitcoin-core client then you almost certainly do not\n+need this package.\n+\n+%package utils\n+Summary:\tBitcoin utilities\n+Group:\t\tApplications/System\n+\n+%description utils\n+This package provides several command line utilities for interacting with a\n+bitcoin-core daemon.\n+\n+The bitcoin-cli utility allows you to communicate and control a bitcoin daemon\n+over RPC, the bitcoin-tx utility allows you to create a custom transaction, and\n+the bench_bitcoin utility can be used to perform some benchmarks.\n+\n+This package contains utilities needed by the bitcoin-server package.\n+\n+\n+%prep\n+%setup -q\n+%patch0 -p1 -b .libressl\n+cp -p %{SOURCE10} ./bitcoin.conf.example\n+tar -zxf %{SOURCE1}\n+cp -p db-%{bdbv}.NC/LICENSE ./db-%{bdbv}.NC-LICENSE\n+mkdir db4 SELinux\n+cp -p %{SOURCE30} %{SOURCE31} %{SOURCE32} SELinux/\n+\n+\n+%build\n+CWD=`pwd`\n+cd db-%{bdbv}.NC/build_unix/\n+../dist/configure --enable-cxx --disable-shared --with-pic --prefix=${CWD}/db4\n+make install\n+cd ../..\n+\n+./autogen.sh\n+%configure LDFLAGS=\"-L${CWD}/db4/lib/\" CPPFLAGS=\"-I${CWD}/db4/include/\" --with-miniupnpc --enable-glibc-back-compat %{buildargs}\n+make %{?_smp_mflags}\n+\n+pushd SELinux\n+for selinuxvariant in %{selinux_variants}; do\n+\tmake NAME=${selinuxvariant} -f %{_datadir}/selinux/devel/Makefile\n+\tmv bitcoin.pp bitcoin.pp.${selinuxvariant}\n+\tmake NAME=${selinuxvariant} -f %{_datadir}/selinux/devel/Makefile clean\n+done\n+popd\n+\n+\n+%install\n+make install DESTDIR=%{buildroot}\n+\n+mkdir -p -m755 %{buildroot}%{_sbindir}\n+mv %{buildroot}%{_bindir}/bitcoind %{buildroot}%{_sbindir}/bitcoind\n+\n+# systemd stuff\n+mkdir -p %{buildroot}%{_tmpfilesdir}\n+cat <<EOF > %{buildroot}%{_tmpfilesdir}/bitcoin.conf\n+d /run/bitcoind 0750 bitcoin bitcoin -\n+EOF\n+touch -a -m -t 201504280000 %{buildroot}%{_tmpfilesdir}/bitcoin.conf\n+\n+mkdir -p %{buildroot}%{_sysconfdir}/sysconfig\n+cat <<EOF > %{buildroot}%{_sysconfdir}/sysconfig/bitcoin\n+# Provide options to the bitcoin daemon here, for example\n+# OPTIONS=\"-testnet -disable-wallet\"\n+\n+OPTIONS=\"\"\n+\n+# System service defaults.\n+# Don't change these unless you know what you're doing.\n+CONFIG_FILE=\"%{_sysconfdir}/bitcoin/bitcoin.conf\"\n+DATA_DIR=\"%{_localstatedir}/lib/bitcoin\"\n+PID_FILE=\"/run/bitcoind/bitcoind.pid\"\n+EOF\n+touch -a -m -t 201504280000 %{buildroot}%{_sysconfdir}/sysconfig/bitcoin\n+\n+mkdir -p %{buildroot}%{_unitdir}\n+cat <<EOF > %{buildroot}%{_unitdir}/bitcoin.service\n+[Unit]\n+Description=Bitcoin daemon\n+After=syslog.target network.target\n+\n+[Service]\n+Type=forking\n+ExecStart=%{_sbindir}/bitcoind -daemon -conf=\\${CONFIG_FILE} -datadir=\\${DATA_DIR} -pid=\\${PID_FILE} \\$OPTIONS\n+EnvironmentFile=%{_sysconfdir}/sysconfig/bitcoin\n+User=bitcoin\n+Group=bitcoin\n+\n+Restart=on-failure\n+PrivateTmp=true\n+TimeoutStopSec=120\n+TimeoutStartSec=60\n+StartLimitInterval=240\n+StartLimitBurst=5\n+\n+[Install]\n+WantedBy=multi-user.target\n+EOF\n+touch -a -m -t 201504280000 %{buildroot}%{_unitdir}/bitcoin.service\n+#end systemd stuff\n+\n+mkdir %{buildroot}%{_sysconfdir}/bitcoin\n+mkdir -p %{buildroot}%{_localstatedir}/lib/bitcoin\n+\n+#SELinux\n+for selinuxvariant in %{selinux_variants}; do\n+\tinstall -d %{buildroot}%{_datadir}/selinux/${selinuxvariant}\n+\tinstall -p -m 644 SELinux/bitcoin.pp.${selinuxvariant} %{buildroot}%{_datadir}/selinux/${selinuxvariant}/bitcoin.pp\n+done\n+\n+%if %{_buildqt}\n+# qt icons\n+install -D -p share/pixmaps/bitcoin.ico %{buildroot}%{_datadir}/pixmaps/bitcoin.ico\n+install -p share/pixmaps/nsis-header.bmp %{buildroot}%{_datadir}/pixmaps/\n+install -p share/pixmaps/nsis-wizard.bmp %{buildroot}%{_datadir}/pixmaps/\n+install -p %{SOURCE100} %{buildroot}%{_datadir}/pixmaps/bitcoin.svg\n+%{_bindir}/inkscape %{SOURCE100} --export-png=%{buildroot}%{_datadir}/pixmaps/bitcoin16.png -w16 -h16\n+%{_bindir}/inkscape %{SOURCE100} --export-png=%{buildroot}%{_datadir}/pixmaps/bitcoin32.png -w32 -h32\n+%{_bindir}/inkscape %{SOURCE100} --export-png=%{buildroot}%{_datadir}/pixmaps/bitcoin64.png -w64 -h64\n+%{_bindir}/inkscape %{SOURCE100} --export-png=%{buildroot}%{_datadir}/pixmaps/bitcoin128.png -w128 -h128\n+%{_bindir}/inkscape %{SOURCE100} --export-png=%{buildroot}%{_datadir}/pixmaps/bitcoin256.png -w256 -h256\n+%{_bindir}/convert -resize 16x16 %{buildroot}%{_datadir}/pixmaps/bitcoin256.png %{buildroot}%{_datadir}/pixmaps/bitcoin16.xpm\n+%{_bindir}/convert -resize 32x32 %{buildroot}%{_datadir}/pixmaps/bitcoin256.png %{buildroot}%{_datadir}/pixmaps/bitcoin32.xpm\n+%{_bindir}/convert -resize 64x64 %{buildroot}%{_datadir}/pixmaps/bitcoin256.png %{buildroot}%{_datadir}/pixmaps/bitcoin64.xpm\n+%{_bindir}/convert -resize 128x128 %{buildroot}%{_datadir}/pixmaps/bitcoin256.png %{buildroot}%{_datadir}/pixmaps/bitcoin128.xpm\n+%{_bindir}/convert %{buildroot}%{_datadir}/pixmaps/bitcoin256.png %{buildroot}%{_datadir}/pixmaps/bitcoin256.xpm\n+touch %{buildroot}%{_datadir}/pixmaps/*.png -r %{SOURCE100}\n+touch %{buildroot}%{_datadir}/pixmaps/*.xpm -r %{SOURCE100}\n+\n+# Desktop File - change the touch timestamp if modifying\n+mkdir -p %{buildroot}%{_datadir}/applications\n+cat <<EOF > %{buildroot}%{_datadir}/applications/bitcoin-core.desktop\n+[Desktop Entry]\n+Encoding=UTF-8\n+Name=Bitcoin\n+Comment=Bitcoin P2P Cryptocurrency\n+Comment[fr]=Bitcoin, monnaie virtuelle cryptographique pair \u00e0 pair\n+Comment[tr]=Bitcoin, e\u015ften e\u015fe kriptografik sanal para birimi\n+Exec=bitcoin-qt %u\n+Terminal=false\n+Type=Application\n+Icon=bitcoin128\n+MimeType=x-scheme-handler/bitcoin;\n+Categories=Office;Finance;\n+EOF\n+# change touch date when modifying desktop\n+touch -a -m -t 201511100546 %{buildroot}%{_datadir}/applications/bitcoin-core.desktop\n+%{_bindir}/desktop-file-validate %{buildroot}%{_datadir}/applications/bitcoin-core.desktop\n+\n+# KDE protocol - change the touch timestamp if modifying\n+mkdir -p %{buildroot}%{_datadir}/kde4/services\n+cat <<EOF > %{buildroot}%{_datadir}/kde4/services/bitcoin-core.protocol\n+[Protocol]\n+exec=bitcoin-qt '%u'\n+protocol=bitcoin\n+input=none\n+output=none\n+helper=true\n+listing=\n+reading=false\n+writing=false\n+makedir=false\n+deleting=false\n+EOF\n+# change touch date when modifying protocol\n+touch -a -m -t 201511100546 %{buildroot}%{_datadir}/kde4/services/bitcoin-core.protocol\n+%endif\n+\n+# man pages\n+install -D -p %{SOURCE20} %{buildroot}%{_mandir}/man1/bitcoind.1\n+install -p %{SOURCE21} %{buildroot}%{_mandir}/man1/bitcoin-cli.1\n+%if %{_buildqt}\n+install -p %{SOURCE22} %{buildroot}%{_mandir}/man1/bitcoin-qt.1\n+%endif\n+\n+# nuke these, we do extensive testing of binaries in %%check before packaging\n+rm -f %{buildroot}%{_bindir}/test_*\n+\n+%check\n+make check\n+pushd src\n+srcdir=. test/bitcoin-util-test.py\n+popd\n+qa/pull-tester/rpc-tests.py -extended\n+\n+%post libs -p /sbin/ldconfig\n+\n+%postun libs -p /sbin/ldconfig\n+\n+%pre server\n+getent group bitcoin >/dev/null || groupadd -r bitcoin\n+getent passwd bitcoin >/dev/null ||\n+\tuseradd -r -g bitcoin -d /var/lib/bitcoin -s /sbin/nologin \\\n+\t-c \"Bitcoin wallet server\" bitcoin\n+exit 0\n+\n+%post server\n+%systemd_post bitcoin.service\n+# SELinux\n+if [ `%{_sbindir}/sestatus |grep -c \"disabled\"` -eq 0 ]; then\n+for selinuxvariant in %{selinux_variants}; do\n+\t%{_sbindir}/semodule -s ${selinuxvariant} -i %{_datadir}/selinux/${selinuxvariant}/bitcoin.pp &> /dev/null || :\n+done\n+%{_sbindir}/semanage port -a -t bitcoin_port_t -p tcp 8332\n+%{_sbindir}/semanage port -a -t bitcoin_port_t -p tcp 8333\n+%{_sbindir}/semanage port -a -t bitcoin_port_t -p tcp 18332\n+%{_sbindir}/semanage port -a -t bitcoin_port_t -p tcp 18333\n+%{_sbindir}/fixfiles -R bitcoin-server restore &> /dev/null || :\n+%{_sbindir}/restorecon -R %{_localstatedir}/lib/bitcoin || :\n+fi\n+\n+%posttrans server\n+%{_bindir}/systemd-tmpfiles --create\n+\n+%preun server\n+%systemd_preun bitcoin.service\n+\n+%postun server\n+%systemd_postun bitcoin.service\n+# SELinux\n+if [ $1 -eq 0 ]; then\n+\tif [ `%{_sbindir}/sestatus |grep -c \"disabled\"` -eq 0 ]; then\n+\t%{_sbindir}/semanage port -d -p tcp 8332\n+\t%{_sbindir}/semanage port -d -p tcp 8333\n+\t%{_sbindir}/semanage port -d -p tcp 18332\n+\t%{_sbindir}/semanage port -d -p tcp 18333\n+\tfor selinuxvariant in %{selinux_variants}; do\n+\t\t%{_sbindir}/semodule -s ${selinuxvariant} -r bitcoin &> /dev/null || :\n+\tdone\n+\t%{_sbindir}/fixfiles -R bitcoin-server restore &> /dev/null || :\n+\t[ -d %{_localstatedir}/lib/bitcoin ] && \\\n+\t\t%{_sbindir}/restorecon -R %{_localstatedir}/lib/bitcoin &> /dev/null || :\n+\tfi\n+fi\n+\n+%clean\n+rm -rf %{buildroot}\n+\n+%if %{_buildqt}\n+%files core\n+%defattr(-,root,root,-)\n+%license COPYING db-%{bdbv}.NC-LICENSE\n+%doc COPYING bitcoin.conf.example doc/README.md doc/bips.md doc/files.md doc/multiwallet-qt.md doc/reduce-traffic.md doc/release-notes.md doc/tor.md\n+%attr(0755,root,root) %{_bindir}/bitcoin-qt\n+%attr(0644,root,root) %{_datadir}/applications/bitcoin-core.desktop\n+%attr(0644,root,root) %{_datadir}/kde4/services/bitcoin-core.protocol\n+%attr(0644,root,root) %{_datadir}/pixmaps/*.ico\n+%attr(0644,root,root) %{_datadir}/pixmaps/*.bmp\n+%attr(0644,root,root) %{_datadir}/pixmaps/*.svg\n+%attr(0644,root,root) %{_datadir}/pixmaps/*.png\n+%attr(0644,root,root) %{_datadir}/pixmaps/*.xpm\n+%attr(0644,root,root) %{_mandir}/man1/bitcoin-qt.1*\n+%endif\n+\n+%files libs\n+%defattr(-,root,root,-)\n+%license COPYING\n+%doc COPYING doc/README.md doc/shared-libraries.md\n+%{_libdir}/lib*.so.*\n+\n+%files devel\n+%defattr(-,root,root,-)\n+%license COPYING\n+%doc COPYING doc/README.md doc/developer-notes.md doc/shared-libraries.md\n+%attr(0644,root,root) %{_includedir}/*.h\n+%{_libdir}/*.so\n+%{_libdir}/*.a\n+%{_libdir}/*.la\n+%attr(0644,root,root) %{_libdir}/pkgconfig/*.pc\n+\n+%files server\n+%defattr(-,root,root,-)\n+%license COPYING db-%{bdbv}.NC-LICENSE\n+%doc COPYING bitcoin.conf.example doc/README.md doc/REST-interface.md doc/bips.md doc/dnsseed-policy.md doc/files.md doc/reduce-traffic.md doc/release-notes.md doc/tor.md\n+%attr(0755,root,root) %{_sbindir}/bitcoind\n+%attr(0644,root,root) %{_tmpfilesdir}/bitcoin.conf\n+%attr(0644,root,root) %{_unitdir}/bitcoin.service\n+%dir %attr(0750,bitcoin,bitcoin) %{_sysconfdir}/bitcoin\n+%dir %attr(0750,bitcoin,bitcoin) %{_localstatedir}/lib/bitcoin\n+%config(noreplace) %attr(0600,root,root) %{_sysconfdir}/sysconfig/bitcoin\n+%attr(0644,root,root) %{_datadir}/selinux/*/*.pp\n+%attr(0644,root,root) %{_mandir}/man1/bitcoind.1*\n+\n+%files utils\n+%defattr(-,root,root,-)\n+%license COPYING\n+%doc COPYING bitcoin.conf.example doc/README.md\n+%attr(0755,root,root) %{_bindir}/bitcoin-cli\n+%attr(0755,root,root) %{_bindir}/bitcoin-tx\n+%attr(0755,root,root) %{_bindir}/bench_bitcoin\n+%attr(0644,root,root) %{_mandir}/man1/bitcoin-cli.1*\n+\n+\n+\n+%changelog\n+* Fri Feb 26 2016 Alice Wonder <buildmaster@librelamp.com> - 0.12.0-2\n+- Rename Qt package from bitcoin to bitcoin-core\n+- Make building of the Qt package optional\n+- When building the Qt package, default to Qt5 but allow building\n+-  against Qt4\n+- Only run SELinux stuff in post scripts if it is not set to disabled\n+\n+* Wed Feb 24 2016 Alice Wonder <buildmaster@librelamp.com> - 0.12.0-1\n+- Initial spec file for 0.12.0 release\n+\n+# This spec file is written from scratch but a lot of the packaging decisions are directly\n+# based upon the 0.11.2 package spec file from https://www.ringingliberty.com/bitcoin/"
      },
      {
        "sha": "d6231c591a24312b3c073f7658533587279aeba7",
        "filename": "contrib/rpm/bitcoin.te",
        "status": "added",
        "additions": 81,
        "deletions": 0,
        "changes": 81,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/rpm/bitcoin.te",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/rpm/bitcoin.te",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/rpm/bitcoin.te?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -0,0 +1,81 @@\n+policy_module(bitcoin, 1.100.1)\n+\n+########################################\n+#\n+# Declarations\n+#\n+\n+type bitcoin_t;\n+type bitcoin_exec_t;\n+init_daemon_domain(bitcoin_t, bitcoin_exec_t)\n+\n+permissive bitcoin_t;\n+\n+type bitcoin_initrc_exec_t;\n+init_script_file(bitcoin_initrc_exec_t)\n+\n+type bitcoin_conf_t;\n+files_type(bitcoin_conf_t)\n+\n+type bitcoin_var_lib_t;\n+files_type(bitcoin_var_lib_t)\n+\n+type bitcoin_var_run_t;\n+files_type(bitcoin_var_run_t)\n+\n+type bitcoin_port_t;\n+corenet_port(bitcoin_port_t)\n+\n+########################################\n+#\n+# bitcoin local policy\n+#\n+allow bitcoin_t self:process { fork };\n+\n+allow bitcoin_t self:fifo_file rw_fifo_file_perms;\n+allow bitcoin_t self:unix_stream_socket create_stream_socket_perms;\n+\n+manage_dirs_pattern(bitcoin_t, bitcoin_conf_t, bitcoin_conf_t)\n+manage_files_pattern(bitcoin_t, bitcoin_conf_t, bitcoin_conf_t)\n+\n+manage_dirs_pattern(bitcoin_t, bitcoin_var_lib_t, bitcoin_var_lib_t)\n+manage_files_pattern(bitcoin_t, bitcoin_var_lib_t, bitcoin_var_lib_t)\n+files_var_lib_filetrans(bitcoin_t, bitcoin_var_lib_t, { dir file })\n+\n+manage_dirs_pattern(bitcoin_t, bitcoin_var_run_t, bitcoin_var_run_t)\n+manage_files_pattern(bitcoin_t, bitcoin_var_run_t, bitcoin_var_run_t)\n+\n+sysnet_dns_name_resolve(bitcoin_t)\n+corenet_all_recvfrom_unlabeled(bitcoin_t)\n+\n+allow bitcoin_t self:tcp_socket create_stream_socket_perms;\n+corenet_tcp_sendrecv_generic_if(bitcoin_t)\n+corenet_tcp_sendrecv_generic_node(bitcoin_t)\n+corenet_tcp_sendrecv_all_ports(bitcoin_t)\n+corenet_tcp_bind_generic_node(bitcoin_t)\n+\n+gen_require(`\n+    type bitcoin_port_t;\n+')\n+allow bitcoin_t bitcoin_port_t:tcp_socket name_bind;\n+\n+gen_require(`\n+    type bitcoin_port_t;\n+')\n+allow bitcoin_t bitcoin_port_t:tcp_socket name_connect;\n+\n+domain_use_interactive_fds(bitcoin_t)\n+\n+files_read_etc_files(bitcoin_t)\n+\n+miscfiles_read_localization(bitcoin_t)\n+\n+sysnet_dns_name_resolve(bitcoin_t)\n+\n+allow bitcoin_t bitcoin_exec_t:file execute_no_trans;\n+allow bitcoin_t self:process setsched;\n+corecmd_exec_ls(bitcoin_t)\n+corenet_tcp_connect_http_port(bitcoin_t)\n+dev_read_urand(bitcoin_t)\n+fs_getattr_xattr_fs(bitcoin_t)\n+kernel_read_system_state(bitcoin_t)"
      },
      {
        "sha": "c595f83eb95b20eea68f5f54a2ec0a715f6d75de",
        "filename": "contrib/seeds/README.md",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/seeds/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/seeds/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/README.md?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -3,6 +3,9 @@\n Utility to generate the seeds.txt list that is compiled into the client\n (see [src/chainparamsseeds.h](/src/chainparamsseeds.h) and other utilities in [contrib/seeds](/contrib/seeds)).\n \n-The 512 seeds compiled into the 0.10 release were created from sipa's DNS seed data, like this:\n+The seeds compiled into the release are created from sipa's DNS seed data, like this:\n+\n+    curl -s http://bitcoin.sipa.be/seeds.txt > seeds_main.txt\n+    python makeseeds.py < seeds_main.txt > nodes_main.txt\n+    python generate-seeds.py . > ../../src/chainparamsseeds.h\n \n-\tcurl -s http://bitcoin.sipa.be/seeds.txt | makeseeds.py"
      },
      {
        "sha": "f43dc0b218adb2598cd9474e10258648af69d316",
        "filename": "contrib/seeds/generate-seeds.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/seeds/generate-seeds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/seeds/generate-seeds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/generate-seeds.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -1,4 +1,4 @@\n-#!/usr/bin/python\n+#!/usr/bin/env python\n # Copyright (c) 2014 Wladimir J. van der Laan\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php."
      },
      {
        "sha": "041f224f40ebe2818b2f8788a4ea95ec45e6808a",
        "filename": "contrib/seeds/makeseeds.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/seeds/makeseeds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/seeds/makeseeds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/makeseeds.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -1,4 +1,7 @@\n #!/usr/bin/env python\n+# Copyright (c) 2013-2015 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n #\n # Generate seeds.txt from Pieter's DNS seeder\n #"
      },
      {
        "sha": "f1854b27f9a5983ca77e3bec8005aede562cedb8",
        "filename": "contrib/seeds/nodes_main.txt",
        "status": "modified",
        "additions": 747,
        "deletions": 689,
        "changes": 1436,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/seeds/nodes_main.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/seeds/nodes_main.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/nodes_main.txt?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -1,879 +1,937 @@\n-1.34.168.128:8333\n-1.202.128.218:8333\n-2.30.0.210:8333\n-5.9.96.203:8333\n-5.45.71.130:8333\n-5.45.98.141:8333\n-5.102.145.68:8333\n-5.135.160.77:8333\n-5.189.134.246:8333\n-5.199.164.132:8333\n-5.249.135.102:8333\n-8.19.44.110:8333\n-8.22.230.8:8333\n-14.200.200.145:8333\n-18.228.0.188:8333\n-18.228.0.200:8333\n-23.24.168.97:8333\n-23.28.35.227:8333\n-23.92.76.170:8333\n-23.99.64.119:8333\n-23.228.166.128:8333\n-23.229.45.32:8333\n-24.8.105.128:8333\n-24.16.69.137:8333\n-24.94.98.96:8333\n-24.102.118.7:8333\n-24.118.166.228:8333\n-24.122.133.49:8333\n-24.166.97.162:8333\n-24.213.235.242:8333\n-24.226.107.64:8333\n-24.228.192.171:8333\n-27.140.133.18:8333\n-31.41.40.25:8333\n-31.43.101.59:8333\n-31.184.195.181:8333\n-31.193.139.66:8333\n-37.200.70.102:8333\n-37.205.10.151:8333\n-42.3.106.227:8333\n-42.60.133.106:8333\n-45.56.85.231:8333\n-45.56.102.228:8333\n-45.79.130.235:8333\n-46.28.204.61:11101\n-46.38.235.229:8333\n-46.59.2.74:8333\n-46.101.132.37:8333\n-46.101.168.50:8333\n-46.163.76.230:8333\n+5.2.145.201:8333\n+5.22.142.214:8333\n+5.53.172.197:8333\n+5.189.161.164:8333\n+5.230.140.166:8333\n+5.231.3.130:8333\n+5.255.80.103:8333\n+14.202.230.49:8333\n+18.85.11.130:8333\n+23.91.97.25:8333\n+23.94.100.122:8333\n+23.95.99.132:8333\n+24.115.8.206:8333\n+24.127.128.191:8333\n+24.154.178.25:8333\n+24.207.103.43:8333\n+24.207.104.105:8333\n+24.210.230.150:8333\n+24.224.18.84:8333\n+24.246.168.106:8333\n+27.254.64.47:8333\n+31.6.71.123:8333\n+31.6.71.124:8333\n+31.14.134.13:8333\n+31.30.36.220:8333\n+31.164.6.104:8333\n+31.170.106.203:8333\n+31.185.134.201:8333\n+31.204.128.99:8333\n+31.204.128.219:8333\n+37.1.219.88:8333\n+37.97.132.109:8333\n+37.120.160.55:8333\n+37.120.169.123:8333\n+37.139.32.46:8333\n+37.221.163.218:8333\n+38.130.192.72:8333\n+41.75.96.80:8333\n+45.3.0.49:8333\n+45.33.72.185:8333\n+45.33.96.129:8333\n+45.56.4.63:8333\n+45.79.0.127:8333\n+45.79.80.102:8333\n+45.79.97.30:8333\n+45.79.132.219:8333\n+46.21.97.135:8333\n+46.28.205.67:8333\n+46.28.206.188:8333\n+46.29.20.209:8333\n+46.50.234.179:8333\n+46.101.160.168:8333\n+46.166.161.35:8333\n 46.166.161.103:8333\n 46.182.132.100:8333\n-46.223.36.94:8333\n+46.218.227.92:8333\n+46.226.109.20:8333\n 46.227.66.132:8333\n 46.227.66.138:8333\n+46.229.165.154:8333\n+46.229.165.155:8333\n+46.229.238.187:8333\n+46.234.104.48:8333\n 46.239.107.74:8333\n-46.249.39.100:8333\n-46.250.98.108:8333\n+46.244.0.138:8333\n+46.254.72.195:8333\n+50.5.13.44:8333\n 50.7.37.114:8333\n-50.81.53.151:8333\n-50.115.43.253:8333\n-50.116.20.87:8333\n-50.116.33.92:8333\n-50.125.167.245:8333\n-50.143.9.51:8333\n-50.188.192.133:8333\n-54.77.162.76:8333\n-54.153.97.109:8333\n-54.165.192.125:8333\n-58.96.105.85:8333\n-59.167.196.135:8333\n-60.29.227.163:8333\n+50.30.37.103:8333\n+50.39.105.60:8333\n+50.106.40.231:8333\n+52.29.0.37:8333\n+52.76.192.246:8333\n+54.152.192.179:8333\n+54.169.64.174:8333\n+54.175.160.22:8333\n+54.199.128.0:8333\n+58.96.171.129:8333\n+58.161.238.57:8333\n+60.251.195.221:8333\n 61.35.225.19:8333\n 62.43.130.178:8333\n-62.109.49.26:8333\n-62.202.0.97:8333\n-62.210.66.227:8333\n-62.210.192.169:8333\n-64.74.98.205:8333\n-64.156.193.100:8333\n+62.65.39.12:8333\n+62.107.200.30:8333\n+62.133.194.2:8333\n+62.181.238.186:8333\n+62.183.22.50:8333\n+62.210.85.120:8333\n+62.210.162.89:8333\n+62.238.34.125:8333\n+64.25.171.73:8333\n+64.27.166.30:8333\n+64.53.137.101:8333\n+64.71.72.44:8333\n+64.83.225.146:8333\n+64.121.3.163:8333\n 64.203.102.86:8333\n-64.229.142.48:8333\n-65.96.193.165:8333\n-66.30.3.7:8333\n+65.94.131.59:8333\n+65.188.136.233:8333\n+66.11.162.218:8333\n+66.23.228.133:8333\n+66.90.137.89:8333\n 66.114.33.49:8333\n-66.118.133.194:8333\n-66.135.10.126:8333\n+66.150.105.77:8333\n 66.172.10.4:8333\n 66.194.38.250:8333\n 66.194.38.253:8333\n-66.215.192.104:8333\n-67.60.98.115:8333\n-67.164.35.36:8333\n-67.191.162.244:8333\n-67.207.195.77:8333\n-67.219.233.140:8333\n+66.194.38.254:8333\n+66.231.97.172:8333\n+66.240.237.155:8333\n+67.159.13.34:8333\n+67.205.74.206:8333\n 67.221.193.55:8333\n-67.228.162.228:8333\n-68.50.67.199:8333\n-68.62.3.203:8333\n+67.227.72.17:8333\n+68.65.120.53:8333\n 68.65.205.226:9000\n-68.106.42.191:8333\n-68.150.181.198:8333\n-68.196.196.106:8333\n-68.224.194.81:8333\n-69.46.5.194:8333\n-69.50.171.238:8333\n-69.64.43.152:8333\n-69.65.41.13:8333\n-69.90.132.200:8333\n-69.143.1.243:8333\n-69.146.98.216:8333\n-69.165.246.38:8333\n-69.207.6.135:8333\n-69.251.208.26:8333\n-70.38.1.101:8333\n-70.38.9.66:8333\n-70.90.2.18:8333\n-71.58.228.226:8333\n-71.199.11.189:8333\n-71.199.193.202:8333\n-71.205.232.181:8333\n-71.236.200.162:8333\n-72.24.73.186:8333\n+68.144.4.34:8333\n+69.39.49.199:8333\n+69.50.171.205:8333\n+69.65.41.21:8333\n+69.113.98.61:8333\n+69.119.97.39:8333\n+69.146.70.124:8333\n+69.193.71.2:8333\n+70.46.10.237:8333\n+70.80.200.187:8333\n+70.185.97.117:8333\n+71.254.160.25:8333\n+72.28.203.5:8333\n 72.52.130.110:8333\n-72.53.111.37:8333\n+72.83.194.122:8333\n+72.128.32.167:8333\n+72.179.136.80:8333\n 72.235.38.70:8333\n-73.31.171.149:8333\n-73.32.137.72:8333\n-73.137.133.238:8333\n-73.181.192.103:8333\n-73.190.2.60:8333\n-73.195.192.137:8333\n-73.222.35.117:8333\n-74.57.199.180:8333\n-74.82.233.205:8333\n-74.85.66.82:8333\n-74.101.224.127:8333\n-74.113.69.16:8333\n-74.122.235.68:8333\n-74.193.68.141:8333\n-74.208.164.219:8333\n-75.100.37.122:8333\n-75.145.149.169:8333\n-75.168.34.20:8333\n-76.20.44.240:8333\n-76.100.70.17:8333\n-76.168.3.239:8333\n-76.186.140.103:8333\n-77.92.68.221:8333\n-77.109.101.142:8333\n-77.110.11.86:8333\n-77.242.108.18:8333\n-78.46.96.150:9020\n+74.50.44.193:8333\n+74.72.60.83:8333\n+74.80.234.116:8333\n+74.207.233.193:8333\n+75.112.233.128:8333\n+75.118.166.197:8333\n+75.140.0.241:8333\n+75.159.240.66:8333\n+75.174.5.26:8333\n+76.72.160.252:8333\n+76.72.160.254:8333\n+76.74.170.112:8333\n+76.79.201.54:8333\n+76.175.166.164:8333\n+76.179.105.27:8333\n+77.68.37.200:8333\n+77.234.49.196:8333\n+77.247.229.93:8333\n+78.24.72.78:8333\n+78.47.32.147:8333\n 78.84.100.95:8333\n+78.121.69.23:8333\n+78.129.167.5:8333\n+78.193.96.155:8333\n+79.19.37.179:8333\n 79.132.230.144:8333\n 79.133.43.63:8333\n-79.160.76.153:8333\n-79.169.34.24:8333\n-79.188.7.78:8333\n-80.217.226.25:8333\n-80.223.100.179:8333\n-80.240.129.221:8333\n-81.1.173.243:8333\n+79.134.201.66:8333\n+79.169.35.235:8333\n+80.57.227.14:8333\n+80.64.65.87:8333\n+80.86.92.70:8333\n+80.100.203.151:8333\n+80.101.32.121:8333\n+80.161.178.73:8333\n+80.240.129.170:8333\n 81.7.11.50:8333\n-81.7.16.17:8333\n-81.66.111.3:8333\n-81.80.9.71:8333\n-81.140.43.138:8333\n-81.171.34.37:8333\n-81.174.247.50:8333\n-81.181.155.53:8333\n-81.184.5.253:8333\n-81.187.69.130:8333\n-81.230.3.84:8333\n-82.42.128.51:8333\n-82.74.226.21:8333\n-82.142.75.50:8333\n+81.7.11.55:8333\n+81.17.17.40:9333\n+81.30.39.83:8333\n+81.90.36.7:9444\n+81.136.224.77:8333\n+81.162.231.211:8333\n+81.184.0.143:8333\n+81.198.128.86:8333\n+82.11.33.229:8333\n+82.79.128.134:8333\n+82.118.233.111:8333\n+82.135.139.30:8333\n 82.199.102.10:8333\n-82.200.205.30:8333\n+82.221.106.17:8333\n 82.221.108.21:8333\n-82.221.128.35:8333\n-82.238.124.41:8333\n-82.242.0.245:8333\n-83.76.123.110:8333\n+82.221.108.27:8333\n+83.137.41.3:8333\n+83.142.197.168:8333\n+83.143.130.19:8333\n 83.150.9.196:8333\n-83.162.196.192:8333\n-83.162.234.224:8333\n-83.170.104.91:8333\n+83.183.17.191:8333\n+83.227.173.83:8333\n+83.230.5.15:8333\n+83.233.105.151:443\n+83.246.75.8:8333\n+83.250.133.158:8333\n 83.255.66.118:8334\n-84.2.34.104:8333\n-84.45.98.91:8333\n-84.47.161.150:8333\n-84.212.192.131:8333\n-84.215.169.101:8333\n-84.238.140.176:8333\n-84.245.71.31:8333\n-85.17.4.212:8333\n+84.24.69.59:8333\n+84.42.193.6:8333\n+84.45.98.87:8333\n+84.54.128.11:8333\n+84.212.200.24:8333\n+84.215.198.109:8333\n+84.230.4.177:8333\n+85.95.228.83:8333\n+85.95.228.123:8333\n 85.114.128.134:8333\n-85.159.237.191:8333\n-85.166.130.189:8333\n-85.199.4.228:8333\n 85.214.66.168:8333\n-85.214.195.210:8333\n-85.229.0.73:8333\n-86.21.96.45:8333\n-87.48.42.199:8333\n-87.81.143.82:8333\n-87.81.251.72:8333\n-87.104.24.185:8333\n-87.104.168.104:8333\n-87.117.234.71:8333\n-87.118.96.197:8333\n-87.145.12.57:8333\n-87.159.170.190:8333\n-88.150.168.160:8333\n-88.208.0.79:8333\n-88.208.0.149:8333\n+85.214.147.162:8333\n+85.243.168.4:8333\n+86.1.0.18:8333\n+87.79.77.106:8333\n+87.91.156.110:8333\n+87.236.196.222:8333\n+88.85.75.152:8333\n+88.87.1.230:8333\n+88.87.92.102:8333\n+88.89.69.202:8333\n+88.97.72.229:8333\n+88.164.117.99:8333\n+88.198.32.131:8333\n+88.202.230.87:8333\n+88.214.193.154:8343\n 88.214.194.226:8343\n-89.1.11.32:8333\n-89.36.235.108:8333\n-89.67.96.2:15321\n-89.98.16.41:8333\n-89.108.72.195:8333\n-89.156.35.157:8333\n-89.163.227.28:8333\n-89.212.33.237:8333\n-89.212.160.165:8333\n-89.231.96.83:8333\n-89.248.164.64:8333\n-90.149.193.199:8333\n-91.77.239.245:8333\n-91.106.194.97:8333\n+89.10.155.88:8333\n+89.46.101.44:8333\n+89.163.224.212:8333\n+89.174.248.20:8333\n+89.202.231.198:8333\n+89.212.75.6:8333\n+90.149.38.172:8333\n+90.169.106.139:8333\n+91.64.101.150:8333\n+91.65.196.179:8333\n+91.121.80.17:8333\n 91.126.77.77:8333\n-91.134.38.195:8333\n-91.156.97.181:8333\n+91.145.76.156:8333\n+91.152.150.35:8333\n+91.192.137.17:8333\n+91.196.170.110:8333\n+91.197.44.133:8333\n 91.207.68.144:8333\n-91.209.77.101:8333\n+91.210.105.28:8333\n+91.211.102.101:8333\n+91.211.106.34:8333\n 91.214.200.205:8333\n-91.220.131.242:8333\n-91.220.163.18:8333\n-91.233.23.35:8333\n-92.13.96.93:8333\n-92.14.74.114:8333\n+91.220.43.146:8333\n+91.222.71.89:8333\n+91.224.140.242:8333\n+91.229.76.14:8333\n 92.27.7.209:8333\n-92.221.228.13:8333\n-92.255.207.73:8333\n-93.72.167.148:8333\n-93.74.163.234:8333\n-93.123.174.66:8333\n-93.152.166.29:8333\n-93.181.45.188:8333\n-94.19.12.244:8333\n+92.51.167.88:8333\n+92.247.229.163:8333\n+93.84.114.106:8333\n+93.113.36.172:8333\n+93.188.224.253:8333\n+94.75.239.69:8333\n 94.190.227.112:8333\n-94.198.135.29:8333\n+94.214.2.74:8333\n 94.224.162.65:8333\n-94.226.107.86:8333\n-94.242.198.161:8333\n-95.31.10.209:8333\n-95.65.72.244:8333\n-95.84.162.95:8333\n-95.90.139.46:8333\n-95.183.49.27:8005\n-95.215.47.133:8333\n-96.23.67.85:8333\n-96.44.166.190:8333\n-97.93.225.74:8333\n-98.26.0.34:8333\n-98.27.225.102:8333\n-98.229.117.229:8333\n-98.249.68.125:8333\n-98.255.5.155:8333\n-99.101.240.114:8333\n+94.236.198.253:8333\n+94.242.229.158:8333\n+95.84.138.99:8333\n+95.95.168.87:8333\n+95.110.234.93:8333\n+95.130.9.200:8333\n+95.165.168.168:8333\n+95.170.235.254:8333\n+95.211.130.154:8333\n+96.46.68.104:8333\n+96.127.202.148:8333\n+97.76.171.35:8333\n+98.160.160.67:8333\n+99.126.197.187:8333\n+99.198.173.1:8333\n 101.100.174.138:8333\n-101.251.203.6:8333\n-103.3.60.61:8333\n-103.30.42.189:8333\n+101.164.201.208:8333\n 103.224.165.48:8333\n-104.36.83.233:8333\n-104.37.129.22:8333\n-104.54.192.251:8333\n+104.128.225.223:8333\n 104.128.228.252:8333\n-104.128.230.185:8334\n-104.130.161.47:8333\n-104.131.33.60:8333\n-104.143.0.156:8333\n-104.156.111.72:8333\n-104.167.111.84:8333\n-104.193.40.248:8333\n-104.197.7.174:8333\n-104.197.8.250:8333\n-104.223.1.133:8333\n-104.236.97.140:8333\n+104.131.192.94:8333\n+104.155.45.201:8334\n+104.194.28.195:8663\n+104.211.1.27:8333\n+104.221.38.177:8333\n+104.236.9.79:8333\n+104.236.129.178:8333\n+104.236.186.249:8333\n+104.236.194.15:8333\n 104.238.128.214:8333\n 104.238.130.182:8333\n 106.38.234.84:8333\n 106.185.36.204:8333\n+106.185.38.67:8333\n 107.6.4.145:8333\n 107.150.2.6:8333\n 107.150.40.234:8333\n-107.155.108.130:8333\n-107.161.182.115:8333\n-107.170.66.231:8333\n-107.190.128.226:8333\n+107.170.13.184:8333\n+107.181.250.216:8333\n+107.191.101.111:8333\n 107.191.106.115:8333\n-108.16.2.61:8333\n-109.70.4.168:8333\n-109.162.35.196:8333\n-109.163.235.239:8333\n-109.190.196.220:8333\n-109.191.39.60:8333\n+108.59.12.163:8333\n+108.161.129.247:8333\n+109.193.160.140:8333\n+109.197.13.54:8333\n+109.230.7.248:8333\n 109.234.106.191:8333\n-109.238.81.82:8333\n-114.76.147.27:8333\n-115.28.224.127:8333\n-115.68.110.82:18333\n-118.97.79.218:8333\n-118.189.207.197:8333\n-119.228.96.233:8333\n-120.147.178.81:8333\n-121.41.123.5:8333\n-121.67.5.230:8333\n-122.107.143.110:8333\n-123.2.170.98:8333\n-123.110.65.94:8333\n-123.193.139.19:8333\n-125.239.160.41:8333\n-128.101.162.193:8333\n+109.236.137.80:8333\n+109.251.161.121:8333\n+112.65.231.226:8333\n+115.70.166.57:8333\n+115.159.42.80:8333\n+117.18.73.34:8333\n+118.67.201.40:8333\n+118.100.86.246:8333\n+118.110.104.152:8333\n+119.224.64.141:8333\n+120.55.193.136:8333\n+122.106.169.178:8333\n+123.203.174.15:8333\n+123.255.232.94:8333\n+124.148.165.165:8333\n+124.232.141.31:8333\n+128.30.92.69:8333\n+128.39.141.182:8333\n+128.84.167.20:8333\n 128.111.73.10:8333\n-128.140.229.73:8333\n-128.175.195.31:8333\n-128.199.107.63:8333\n-128.199.192.153:8333\n+128.127.38.195:8333\n+128.140.224.162:8333\n+128.199.101.104:8333\n+128.233.224.35:8333\n 128.253.3.193:20020\n-129.123.7.7:8333\n-130.89.160.234:8333\n-131.72.139.164:8333\n-131.191.112.98:8333\n-133.1.134.162:8333\n-134.19.132.53:8333\n-137.226.34.42:8333\n-141.41.2.172:8333\n-141.255.128.204:8333\n-142.217.12.106:8333\n-143.215.129.126:8333\n+130.180.228.138:8333\n+130.185.144.213:8333\n+130.255.73.207:8333\n+133.218.233.11:8333\n+134.249.128.23:8333\n+136.159.234.234:8333\n+137.116.160.176:8333\n+139.162.2.145:8333\n+139.162.23.117:8333\n+141.134.69.253:8333\n+141.255.162.215:8333\n+144.122.163.187:8333\n+145.131.3.54:8333\n+145.255.4.94:8333\n 146.0.32.101:8337\n-147.229.13.199:8333\n-149.210.133.244:8333\n-149.210.162.187:8333\n+147.83.72.91:8333\n+148.103.28.68:8333\n+149.5.32.102:8333\n+149.210.164.195:8333\n 150.101.163.241:8333\n 151.236.11.189:8333\n-153.121.66.211:8333\n-154.20.2.139:8333\n-159.253.23.132:8333\n+152.3.136.56:8333\n+154.20.208.25:8333\n+158.181.104.149:8333\n+159.253.96.226:8333\n+160.36.130.180:8333\n+162.209.1.233:8333\n+162.209.4.125:8333\n 162.209.106.123:8333\n 162.210.198.184:8333\n-162.218.65.121:8333\n-162.222.161.49:8333\n-162.243.132.6:8333\n-162.243.132.58:8333\n 162.248.99.164:53011\n 162.248.102.117:8333\n-163.158.35.110:8333\n-164.15.10.189:8333\n-164.40.134.171:8333\n+162.251.108.53:8333\n+163.44.2.48:8333\n+163.158.36.17:8333\n 166.230.71.67:8333\n-167.160.161.199:8333\n-168.103.195.250:8333\n-168.144.27.112:8333\n-168.158.129.29:8333\n-170.75.162.86:8333\n-172.90.99.174:8333\n-172.245.5.156:8333\n-173.23.166.47:8333\n+167.160.36.62:8333\n+167.160.169.92:8333\n+168.93.129.220:8333\n+169.55.99.84:8333\n+169.228.66.43:8333\n+172.9.169.242:8333\n 173.32.11.194:8333\n-173.34.203.76:8333\n-173.171.1.52:8333\n-173.175.136.13:8333\n-173.230.228.139:8333\n-173.247.193.70:8333\n-174.49.132.28:8333\n-174.52.202.72:8333\n-174.53.76.87:8333\n-174.109.33.28:8333\n-176.28.12.169:8333\n-176.35.182.214:8333\n-176.36.33.113:8333\n-176.36.33.121:8333\n-176.58.96.173:8333\n-176.121.76.84:8333\n+173.230.228.136:8333\n+173.246.107.34:8333\n+173.254.235.34:8333\n+174.0.128.222:8333\n+174.25.130.148:8333\n+174.50.64.101:8333\n+175.140.232.141:8333\n+176.36.37.62:8333\n+176.46.9.96:8333\n+176.124.110.27:8333\n+177.39.16.102:8333\n+178.17.173.2:8333\n+178.62.5.248:8333\n 178.62.70.16:8333\n-178.62.111.26:8333\n-178.76.169.59:8333\n-178.79.131.32:8333\n-178.162.199.216:8333\n-178.175.134.35:8333\n-178.248.111.4:8333\n-178.254.1.170:8333\n+178.62.203.185:8333\n+178.79.160.118:8333\n+178.169.206.244:8333\n+178.193.234.62:8333\n+178.199.96.108:8333\n+178.254.18.96:8333\n 178.254.34.161:8333\n-179.43.143.120:8333\n-179.208.156.198:8333\n-180.200.128.58:8333\n-183.78.169.108:8333\n-183.96.96.152:8333\n-184.68.2.46:8333\n-184.73.160.160:8333\n-184.94.227.58:8333\n-184.152.68.163:8333\n-185.7.35.114:8333\n-185.28.76.179:8333\n-185.31.160.202:8333\n-185.45.192.129:8333\n-185.66.140.15:8333\n-186.2.167.23:8333\n-186.220.101.142:8333\n-188.26.5.33:8333\n-188.75.136.146:8333\n-188.120.194.140:8333\n-188.121.5.150:8333\n-188.138.0.114:8333\n+178.255.41.123:8333\n+180.210.34.58:9801\n+182.92.226.212:8333\n+182.171.246.142:8333\n+184.23.8.9:8333\n+184.58.162.35:8333\n+184.154.9.170:8333\n+185.8.238.165:8333\n+185.24.97.11:8333\n+185.31.137.139:8333\n+185.38.44.64:8333\n+185.53.128.180:8333\n+185.53.129.244:8333\n+185.77.129.119:8333\n+185.77.129.156:8333\n+185.82.203.92:8333\n+188.20.97.18:8333\n+188.126.8.14:8333\n 188.138.33.239:8333\n-188.166.0.82:8333\n+188.155.136.70:8333\n+188.166.229.112:8333\n 188.182.108.129:8333\n-188.191.97.208:8333\n-188.226.198.102:8001\n-190.10.9.217:8333\n-190.75.143.144:8333\n-190.139.102.146:8333\n-191.237.64.28:8333\n-192.3.131.61:8333\n-192.99.225.3:8333\n-192.110.160.122:8333\n+188.226.225.174:8010\n+188.242.171.8:8333\n+188.243.4.139:8333\n+190.10.9.234:8333\n+190.10.10.147:8333\n+190.81.160.184:8333\n+190.85.201.37:8333\n+192.34.227.230:8333\n+192.77.189.200:8333\n+192.124.224.7:8333\n 192.146.137.1:8333\n-192.183.198.204:8333\n 192.203.228.71:8333\n+192.206.202.20:8333\n 193.0.109.3:8333\n-193.12.238.204:8333\n-193.91.200.85:8333\n-193.234.225.156:8333\n-194.6.233.38:8333\n-194.63.143.136:8333\n-194.126.100.246:8333\n-195.134.99.195:8333\n-195.159.111.98:8333\n-195.159.226.139:8333\n+193.41.229.130:8333\n+193.41.229.156:8333\n+193.49.43.219:8333\n+193.147.71.120:8333\n+193.179.65.233:8333\n+193.183.99.46:8333\n+193.192.37.135:8333\n+193.234.224.195:8333\n+194.58.108.213:8333\n+194.187.96.2:8333\n+194.255.31.59:8333\n+195.36.6.101:8333\n+195.58.238.243:8333\n 195.197.175.190:8333\n-198.48.199.108:8333\n-198.57.208.134:8333\n+195.239.1.66:8333\n+198.48.196.230:8333\n+198.50.192.160:8333\n 198.57.210.27:8333\n-198.62.109.223:8333\n+198.84.195.179:8333\n 198.167.140.8:8333\n-198.167.140.18:8333\n-199.91.173.234:8333\n+198.204.224.106:8333\n 199.127.226.245:8333\n-199.180.134.116:8333\n-200.7.96.99:8333\n-201.160.106.86:8333\n-202.55.87.45:8333\n-202.60.68.242:8333\n-202.60.69.232:8333\n-202.124.109.103:8333\n-203.30.197.77:8333\n-203.88.160.43:8333\n+199.201.110.8:8333\n+199.233.234.90:8333\n+200.116.98.185:8333\n+202.60.70.18:8333\n 203.151.140.14:8333\n-203.219.14.204:8333\n-205.147.40.62:8333\n-207.235.39.214:8333\n-207.244.73.8:8333\n-208.12.64.225:8333\n+204.112.203.52:8333\n+205.200.247.149:8333\n+207.226.141.253:8333\n+207.255.42.202:8333\n+208.53.164.19:8333\n+208.66.68.127:8333\n+208.66.68.130:8333\n+208.71.171.232:8341\n 208.76.200.200:8333\n-209.40.96.121:8333\n-209.126.107.176:8333\n-209.141.40.149:8333\n-209.190.75.59:8333\n-209.208.111.142:8333\n-210.54.34.164:8333\n-211.72.66.229:8333\n+208.82.98.189:8333\n+208.85.193.31:8333\n+208.111.48.41:8333\n+208.111.48.45:8333\n+209.34.232.72:8333\n+209.81.9.223:8333\n+209.90.224.2:8333\n+209.90.224.4:8333\n+209.126.98.174:8333\n+209.136.72.69:8333\n+209.195.4.74:8333\n+209.197.13.62:8333\n+211.72.227.8:8333\n 212.51.144.42:8333\n-212.112.33.157:8333\n-212.116.72.63:8333\n+212.71.233.127:8333\n 212.126.14.122:8333\n+212.159.44.50:8333\n+213.5.36.58:8333\n+213.57.33.10:8333\n 213.66.205.194:8333\n-213.111.196.21:8333\n-213.122.107.102:8333\n-213.136.75.175:8333\n+213.136.73.125:8333\n+213.155.3.216:8333\n 213.155.7.24:8333\n-213.163.64.31:8333\n-213.163.64.208:8333\n-213.165.86.136:8333\n-213.184.8.22:8333\n+213.167.17.6:8333\n+213.223.138.13:8333\n 216.15.78.182:8333\n-216.55.143.154:8333\n-216.115.235.32:8333\n-216.126.226.166:8333\n-216.145.67.87:8333\n+216.38.129.164:8333\n+216.48.168.8:8333\n 216.169.141.169:8333\n-216.249.92.230:8333\n+216.245.206.181:8333\n+216.249.204.161:8333\n 216.250.138.230:8333\n+217.11.225.189:8333\n+217.12.34.158:8333\n+217.12.202.33:8333\n 217.20.171.43:8333\n-217.23.2.71:8333\n-217.23.2.242:8333\n-217.25.9.76:8333\n-217.40.226.169:8333\n-217.123.98.9:8333\n-217.155.36.62:8333\n+217.23.1.126:8333\n+217.23.11.138:8333\n+217.111.66.79:8333\n+217.155.202.191:8333\n+217.158.9.102:8333\n 217.172.32.18:20993\n-218.61.196.202:8333\n-218.231.205.41:8333\n-220.233.77.200:8333\n-223.18.226.85:8333\n-223.197.203.82:8333\n-223.255.166.142:8333\n+220.245.196.37:8333\n [2001:1291:2bf:1::100]:8333\n-[2001:1418:100:5c2::2]:8333\n-[2001:16d8:dd24:0:86c9:681e:f931:256]:8333\n-[2001:19f0:1624:e6::579d:9428]:8333\n-[2001:19f0:300:1340:225:90ff:fec9:2b6d]:8333\n-[2001:19f0:4009:1405::64]:8333\n-[2001:1b40:5000:2e::3fb0:6571]:8333\n+[2001:1620:f00:282::2]:8333\n+[2001:1620:f00:8282::1]:8333\n+[2001:19f0:5000:8de8:5400:ff:fe12:55e4]:8333\n+[2001:19f0:6c00:9103:5400:ff:fe10:a8d3]:8333\n+[2001:1b60:3:172:142b:6dff:fe7a:117]:8333\n [2001:410:a000:4050:8463:90b0:fffb:4e58]:8333\n-[2001:410:a002:cafe:8463:90b0:fffb:4e58]:8333\n-[2001:41d0:1:541e::1]:8333\n-[2001:41d0:1:6a34::3]:8333\n+[2001:4128:6135:2010:21e:bff:fee8:a3c0]:8333\n+[2001:41d0:1008:761::17c]:8333\n+[2001:41d0:1:45d8::1]:8333\n [2001:41d0:1:6cd3::]:8333\n [2001:41d0:1:8b26::1]:8333\n-[2001:41d0:1:a33d::1]:8333\n-[2001:41d0:1:b855::1]:8333\n+[2001:41d0:1:afda::]:8200\n+[2001:41d0:1:b26b::1]:8333\n [2001:41d0:1:c139::1]:8333\n [2001:41d0:1:c8d7::1]:8333\n-[2001:41d0:1:dd3f::1]:8333\n-[2001:41d0:1:e29d::1]:8333\n [2001:41d0:1:f59f::33]:8333\n [2001:41d0:1:f7cc::1]:8333\n-[2001:41d0:1:ff87::1]:8333\n-[2001:41d0:2:2f05::1]:8333\n+[2001:41d0:2:1021::1]:8333\n [2001:41d0:2:37c3::]:8200\n-[2001:41d0:2:3e13::1]:8333\n-[2001:41d0:2:8619::]:8333\n+[2001:41d0:2:4797:2323:2323:2323:2323]:8333\n+[2001:41d0:2:53df::]:8333\n [2001:41d0:2:9c94::1]:8333\n+[2001:41d0:2:9d3e::1]:8333\n [2001:41d0:2:a24f::]:8333\n-[2001:41d0:2:adbf::]:8333\n-[2001:41d0:2:b721::1]:8333\n-[2001:41d0:2:ee52::1]:8333\n+[2001:41d0:2:a35a::]:8333\n+[2001:41d0:2:b2b8::]:8333\n+[2001:41d0:2:c1d9::]:8333\n+[2001:41d0:2:c6e::]:8333\n+[2001:41d0:2:c9bf::]:8333\n [2001:41d0:2:f1a5::]:8333\n-[2001:41d0:2:fa54::1]:8333\n-[2001:41d0:51:1::2036]:8333\n-[2001:41d0:52:a00::1a1]:8333\n+[2001:41d0:52:a00::105f]:8333\n [2001:41d0:52:cff::6f5]:8333\n-[2001:41d0:52:d00::2c0]:8333\n-[2001:41d0:52:d00::cf2]:8333\n-[2001:41d0:8:1087::1]:8333\n-[2001:41d0:8:4a3c::b7c]:8333\n+[2001:41d0:52:d00::6e2]:8333\n+[2001:41d0:8:3e75::1]:8333\n+[2001:41d0:8:62ab::1]:8333\n [2001:41d0:8:6728::]:8333\n-[2001:41d0:8:b779::1]:8333\n-[2001:41d0:8:c30f::1]:8333\n-[2001:41d0:8:d2b2::1]:8333\n-[2001:41d0:8:d5c3::1]:8333\n+[2001:41d0:8:b30a::1]:8333\n+[2001:41d0:8:bc26::1]:8333\n+[2001:41d0:8:be9a::1]:8333\n+[2001:41d0:8:d984::]:8333\n [2001:41d0:8:eb8b::]:8333\n-[2001:41d0:a:16d0::1]:8333\n+[2001:41d0:a:13a2::1]:8333\n [2001:41d0:a:2b18::1]:8333\n-[2001:41d0:a:3a9c::1]:8333\n-[2001:41d0:a:4903::]:8333\n-[2001:41d0:a:57b::1]:8333\n-[2001:41d0:a:5c7a::]:8333\n+[2001:41d0:a:2d14::]:8333\n+[2001:41d0:a:4558::1df2:76d3]:8333\n+[2001:41d0:a:4aaa::]:8333\n+[2001:41d0:a:635b::1]:8333\n+[2001:41d0:a:63d8::1]:8333\n [2001:41d0:a:6c29::1]:8333\n-[2001:41d0:a:f482::1]:8333\n-[2001:41d0:b:854:b7c:b7c:b7c:b7c]:8333\n-[2001:41d0:d:111c::]:8333\n-[2001:44b8:4116:7801:4216:7eff:fe78:3fe4]:8333\n-[2001:470:1f08:837::2]:8333\n-[2001:470:1f08:c33::2]:8333\n-[2001:470:1f09:bca:218:7dff:fe10:be33]:8333\n-[2001:470:1f0f:22d::212:26]:8333\n+[2001:41d0:a:f9cd::1]:8333\n+[2001:41d0:d:20a4::]:8333\n+[2001:41d0:e:26b::1]:8333\n+[2001:41d0:fc8c:a200:7a24:afff:fe9d:c69b]:8333\n+[2001:41f0:61::7]:8333\n+[2001:41f0::2]:8333\n+[2001:44b8:41bd:6101:148e:4022:4950:e861]:8333\n+[2001:470:1:2f9:0:1:107a:a301]:8333\n+[2001:470:1f0b:ad6::2]:8333\n [2001:470:1f11:12d5::ae1:5611]:8333\n-[2001:470:1f14:57a::2]:8333\n [2001:470:1f14:7d::2]:8333\n-[2001:470:1f15:57c::1]:8333\n-[2001:470:1f15:dda:3d9a:3f11:9a56:ed64]:8333\n-[2001:470:25:482::2]:8333\n-[2001:470:25:e4::2]:8333\n-[2001:470:4:26b::2]:8333\n+[2001:470:27:ce::2]:8333\n+[2001:470:41:6::2]:8333\n+[2001:470:507d:0:6ab5:99ff:fe73:ac18]:8333\n+[2001:470:583e::2a]:8333\n [2001:470:5f:5f::232]:8333\n [2001:470:66:119::2]:8333\n-[2001:470:67:39d::71]:8333\n [2001:470:6c4f::cafe]:8333\n-[2001:470:8:2e1::43]:8333\n-[2001:470:90a7:96::afe:6021]:8333\n+[2001:470:6f:327:913b:7fe:8545:a4f5]:8333\n+[2001:470:7dda:1::1]:8333\n [2001:470:95c1::2]:8333\n [2001:470:b1d0:ffff::1000]:8333\n-[2001:470:c1f2:3::201]:8333\n [2001:470:d00d:0:3664:a9ff:fe9a:5150]:8333\n-[2001:470:e250:0:211:11ff:feb9:924c]:8333\n-[2001:4800:7817:101:be76:4eff:fe04:dc52]:8333\n-[2001:4800:7819:104:be76:4eff:fe04:7809]:8333\n+[2001:470:fab7:1::1]:8333\n [2001:4800:7819:104:be76:4eff:fe05:c828]:8333\n+[2001:4800:7819:104:be76:4eff:fe05:c9a0]:8333\n+[2001:4801:7819:74:b745:b9d5:ff10:a61a]:8333\n+[2001:4801:7819:74:b745:b9d5:ff10:aaec]:8333\n+[2001:4801:7828:104:be76:4eff:fe10:1325]:8333\n+[2001:4802:7800:1:be76:4eff:fe20:f023]:8333\n [2001:4802:7800:2:30d7:1775:ff20:1858]:8333\n+[2001:4802:7800:2:be76:4eff:fe20:6c26]:8333\n [2001:4802:7802:101:be76:4eff:fe20:256]:8333\n [2001:4802:7802:103:be76:4eff:fe20:2de8]:8333\n [2001:4830:1100:2e8::2]:8333\n-[2001:4ba0:fff7:181:dead::1]:8333\n+[2001:4b98:dc2:41:216:3eff:fe56:f659]:8333\n [2001:4ba0:fffa:5d::93]:8333\n-[2001:4ba0:ffff:1be:1:1005:0:1]:8335\n-[2001:4c48:110:101:216:3eff:fe24:1162]:8333\n-[2001:4dd0:f101::32]:8333\n+[2001:4ba0:ffff:1be:1:1005:0:1]:8333\n [2001:4dd0:ff00:867f::3]:8333\n [2001:4dd0:ff00:9a67::9]:8333\n-[2001:4dd0:ff00:9c55:c23f:d5ff:fe6c:7ee9]:8333\n [2001:5c0:1400:b::3cc7]:8333\n-[2001:5c0:1400:b::3d01]:8333\n-[2001:5c0:1400:b::8df]:8333\n-[2001:5c0:1501:300::3]:8333\n [2001:610:1b19::3]:8333\n-[2001:620:500:fff0:f21f:afff:fecf:91cc]:8333\n-[2001:67c:1220:80c:ad:8de2:f7e2:c784]:8333\n-[2001:67c:21ec:1000::b]:8333\n-[2001:6f8:1296:0:76d4:35ff:feba:1d26]:8333\n-[2001:840:f000:4250:3e4a:92ff:fe6d:145f]:8333\n+[2001:610:600:a41::2]:8333\n+[2001:67c:26b4::]:8333\n [2001:8d8:840:500::39:1ae]:8333\n-[2001:980:efd8:0:21:de4a:2709:912]:8333\n-[2001:981:46:1::3]:8333\n-[2001:981:9319:2:c0:a8:c8:8]:8333\n-[2001:9d8:cafe:3::91]:8333\n-[2001:ad0:1:1:26be:5ff:fe25:959d]:8333\n+[2001:8d8:965:4a00::10:9343]:8333\n+[2001:980:4650:1:2e0:53ff:fe13:2449]:8333\n+[2001:981:46:1:ba27:ebff:fe5b:edee]:8333\n+[2001:9c8:53e9:369a:226:2dff:fe1b:7472]:8333\n+[2001:9d8:cafe:3::87]:8333\n+[2001:b10:11:21:3e07:54ff:fe48:7248]:8333\n [2001:ba8:1f1:f34c::2]:8333\n-[2001:bc8:381c:100::1]:8333\n-[2002:175c:4caa::175c:4caa]:8333\n-[2002:4404:82f1:0:8d55:8fbb:15fa:f4e0]:8333\n-[2002:4475:2233:0:21f:5bff:fe33:9f70]:8333\n-[2002:596c:48c3::596c:48c3]:8333\n+[2001:bc8:2310:100::1]:8333\n+[2001:bc8:3427:101:7a4f:8be:2611:6e79]:8333\n+[2001:bc8:3505:200::1]:8333\n+[2001:cc0:a004::30:1d]:8333\n+[2001:e42:102:1209:153:121:76:171]:8333\n+[2002:17ea:14eb::17ea:14eb]:8333\n+[2002:2f8:2bc5::2f8:2bc5]:8333\n+[2002:4047:482c::4047:482c]:8333\n+[2002:45c3:8cca::45c3:8cca]:8333\n+[2002:46bb:8a41:0:226:b0ff:feed:5f12]:8888\n+[2002:46bb:8c3c:0:8d55:8fbb:15fa:f4e0]:8765\n+[2002:4c48:a0fe::4c48:a0fe]:8333\n+[2002:4d44:25c8::4d44:25c8]:8333\n+[2002:505f:aaa2::505f:aaa2]:8333\n+[2002:5bc1:799d::5bc1:799d]:8333\n+[2002:6dec:5472::6dec:5472]:8333\n [2002:8c6d:6521:9617:12bf:48ff:fed8:1724]:8333\n-[2002:a646:5e6a::1:2]:8333\n+[2002:ac52:94e2::ac52:94e2]:8333\n+[2002:af7e:3eca::af7e:3eca]:8333\n [2002:b009:20c5::b009:20c5]:8333\n+[2002:c06f:39a0::c06f:39a0]:8333\n+[2002:c23a:738a::c23a:738a]:8333\n+[2002:c70f:7442::c70f:7442]:8333\n+[2002:cec5:be4f::cec5:be4f]:8333\n+[2002:d149:9e3a::d149:9e3a]:8333\n+[2002:d917:ca5::d917:ca5]:8333\n+[2400:8900::f03c:91ff:fe50:153f]:8333\n [2400:8900::f03c:91ff:fe6e:823e]:8333\n-[2400:8900::f03c:91ff:fe70:d164]:8333\n-[2400:8901::f03c:91ff:fe37:9761]:8333\n-[2403:4200:403:2::ff]:8333\n-[2403:b800:1000:64:40a:e9ff:fe5f:94c1]:8333\n-[2403:b800:1000:64:9879:17ff:fe6a:a59f]:8333\n+[2400:8900::f03c:91ff:fea8:1934]:8333\n+[2400:8901::f03c:91ff:fe26:c4d6]:8333\n+[2400:8901::f03c:91ff:fec8:4280]:8333\n+[2400:8901::f03c:91ff:fec8:660f]:8333\n+[2401:1800:7800:102:be76:4eff:fe1c:559]:8333\n+[2401:1800:7800:102:be76:4eff:fe1c:a7d]:8333\n+[2405:aa00:2::40]:8333\n [2600:3c00::f03c:91ff:fe18:59b2]:8333\n-[2600:3c00::f03c:91ff:fe37:a4b1]:8333\n-[2600:3c00::f03c:91ff:fe56:2973]:8333\n+[2600:3c00::f03c:91ff:fe26:bfb6]:8333\n+[2600:3c00::f03c:91ff:fe33:88e3]:8333\n [2600:3c00::f03c:91ff:fe6e:7297]:8333\n [2600:3c00::f03c:91ff:fe84:8a6e]:8333\n [2600:3c01::f03c:91ff:fe18:6adf]:8333\n-[2600:3c01::f03c:91ff:fe18:e217]:8333\n-[2600:3c01::f03c:91ff:fe33:1b31]:8333\n-[2600:3c01::f03c:91ff:fe33:2fe1]:8333\n-[2600:3c01::f03c:91ff:fe33:a03f]:8333\n+[2600:3c01::f03c:91ff:fe26:c4b8]:8333\n+[2600:3c01::f03c:91ff:fe3b:1f76]:8333\n [2600:3c01::f03c:91ff:fe50:5e06]:8333\n-[2600:3c01::f03c:91ff:fe56:d645]:8333\n-[2600:3c01::f03c:91ff:fe6e:a3dc]:8333\n-[2600:3c01::f03c:91ff:fe89:a659]:8333\n-[2600:3c02::f03c:91ff:fe6e:6f0b]:8333\n-[2600:3c03::f03c:91ff:fe33:f6fb]:8333\n+[2600:3c01::f03c:91ff:fe61:289b]:8333\n+[2600:3c01::f03c:91ff:fe69:89e9]:8333\n+[2600:3c01::f03c:91ff:fe84:ac15]:8333\n+[2600:3c01::f03c:91ff:fe98:68bb]:8333\n+[2600:3c02::f03c:91ff:fe26:713]:8333\n+[2600:3c02::f03c:91ff:fe26:c49e]:8333\n+[2600:3c02::f03c:91ff:fe84:97d8]:8333\n+[2600:3c02::f03c:91ff:fec8:8feb]:8333\n+[2600:3c03::f03c:91ff:fe18:da80]:8333\n+[2600:3c03::f03c:91ff:fe26:c49b]:8333\n [2600:3c03::f03c:91ff:fe50:5fa7]:8333\n+[2600:3c03::f03c:91ff:fe67:d2e]:8333\n [2600:3c03::f03c:91ff:fe6e:1803]:8333\n-[2600:3c03::f03c:91ff:fe6e:4ac0]:8333\n-[2601:6:4800:47f:1e4e:1f4d:332c:3bf6]:8333\n-[2601:d:5400:fed:8d54:c1e8:7ed7:d45e]:8333\n-[2602:100:4b8f:6d2a:20c:29ff:feaf:c4c2]:8333\n+[2600:3c03::f03c:91ff:fec8:4bbe]:8333\n+[2600:3c03::f03c:91ff:fee4:4e16]:8333\n+[2601:18d:8300:58a6::2e4]:8333\n+[2601:240:4600:40c0:250:56ff:fea4:6305]:8333\n+[2601:581:c200:a719:542c:9cd5:4852:f7d9]:8333\n+[2601:647:4900:85f1:ca2a:14ff:fe51:bb35]:8333\n+[2601:c2:c002:b300:54a0:15b5:19f7:530d]:8333\n+[2602:306:ccff:ad7f:b116:52be:64ba:db3a]:8333\n+[2602:ae:1982:9400:846:f78c:fec:4d57]:8333\n [2602:ffc5:1f::1f:2d61]:8333\n [2602:ffc5:1f::1f:9211]:8333\n+[2602:ffc5::75d5:c1c3]:8333\n [2602:ffc5::ffc5:b844]:8333\n [2602:ffe8:100:2::457:936b]:8333\n-[2602:ffea:1001:125::2ad4]:8333\n-[2602:ffea:1001:6ff::837d]:8333\n+[2602:ffe8:100:2::9d20:2e3c]:8333\n [2602:ffea:1001:72b::578b]:8333\n-[2602:ffea:1001:77a::9cae]:8333\n-[2602:ffea:1:2fe::6bc8]:8333\n-[2602:ffea:1:701::7968]:8333\n-[2602:ffea:1:70d::82ec]:8333\n-[2602:ffea:1:9ff::e957]:8333\n-[2602:ffea:1:a5d::4acb]:8333\n [2602:ffea:a::24c4:d9fd]:8333\n-[2602:ffea:a::c06:ae32]:8333\n [2604:0:c1:100:1ec1:deff:fe54:2235]:8333\n [2604:180:1:1af::42a9]:8333\n-[2604:180::b208:398]:8333\n-[2604:2880::6072:aed]:8333\n+[2604:180:3:702::c9de]:8333\n [2604:4080:1114:0:3285:a9ff:fe93:850c]:8333\n-[2604:7c00:17:3d0::5a4d]:8333\n-[2604:9a00:2100:a009:2::]:8333\n-[2604:a880:1:20::22a:4001]:8333\n-[2604:a880:800:10::752:f001]:8333\n-[2604:c00:88:32:216:3eff:fee4:fcca]:8333\n-[2604:c00:88:32:216:3eff:fef5:bc21]:8333\n-[2605:7980:1:2::1761:3d4e]:8333\n-[2605:e000:1417:4068:223:32ff:fe96:e2d]:8333\n+[2604:6000:ffc0:3c:64a3:94d0:4f1d:1da8]:8333\n+[2605:6000:f380:9a01:ba09:8aff:fed4:3511]:8333\n+[2605:6001:e00f:7b00:c587:6d91:6eff:eeba]:8333\n+[2605:f700:c0:1::25c3:2a3e]:8333\n [2606:6000:a441:9903:5054:ff:fe78:66ff]:8333\n-[2606:df00:2::ae85:8fc6]:8333\n-[2607:5300:100:200::e7f]:8333\n+[2607:5300:100:200::1c83]:9334\n [2607:5300:10::a1]:8333\n-[2607:5300:60:116e::1]:8333\n-[2607:5300:60:1535::]:8333\n-[2607:5300:60:1b32::1]:8333\n-[2607:5300:60:2337::1]:8333\n+[2607:5300:60:1c2f::1]:8333\n [2607:5300:60:2b90::1]:8333\n-[2607:5300:60:2d99::1]:8333\n-[2607:5300:60:3cb::1]:8333\n+[2607:5300:60:3320::1]:8333\n+[2607:5300:60:385::1]:8333\n [2607:5300:60:4a85::]:8333\n-[2607:5300:60:5112:0:2:4af5:63fe]:8333\n-[2607:5300:60:6dd5::]:8333\n-[2607:5300:60:a91::1]:8333\n-[2607:f1c0:820:1500::7f:3f44]:8333\n+[2607:5300:60:65e4::]:8333\n+[2607:5300:60:6918::]:8333\n+[2607:5300:60:711a:78::a7b5]:8333\n+[2607:5300:60:714::1]:8333\n+[2607:5300:60:870::1]:8333\n+[2607:5300:60:952e:3733::1414]:8333\n [2607:f1c0:848:1000::48:943c]:8333\n+[2607:f2e0:f:5df::2]:8333\n+[2607:f748:1200:f8:21e:67ff:fe99:8f07]:8333\n [2607:f948:0:1::7]:8333\n-[2607:fcd0:100:2300::4ad:e594]:8333\n-[2607:fcd0:100:2300::659e:9cb3]:8333\n-[2607:fcd0:100:2300::c74b:a8ae]:8333\n-[2607:fcd0:100:2300::d82:d8c2]:8333\n-[2607:fcd0:100:4300::8795:2fa8]:8333\n-[2607:fcd0:daaa:901::9561:e043]:8333\n+[2607:ff68:100:36::131]:8333\n+[2803:6900:1::117]:8333\n+[2a00:1098:0:80:1000:25:0:1]:8333\n+[2a00:1178:2:43:5054:ff:fe84:f86f]:8333\n [2a00:1178:2:43:5054:ff:fee7:2eb6]:8333\n-[2a00:1328:e100:cc42:230:48ff:fe92:55d]:8333\n+[2a00:1178:2:43:8983:cc27:d72:d97a]:8333\n+[2a00:1328:e100:cc42:230:48ff:fe92:55c]:8333\n [2a00:14f0:e000:80d2:cd1a::1]:8333\n-[2a00:16d8:c::5b6a:c261]:8333\n-[2a00:61e0:4083:6d01:6852:1376:e972:2091]:8333\n-[2a00:c98:2030:a02f:2::2]:8333\n+[2a00:1630:2:1802:188:122:91:11]:8333\n+[2a00:18e0:0:1800::1]:8333\n+[2a00:18e0:0:dcc5:109:234:106:191]:8333\n+[2a00:1a28:1157:87::94c7]:8333\n+[2a00:1ca8:37::a5fc:40d1]:8333\n+[2a00:1ca8:37::ab6d:ce2c]:8333\n+[2a00:7143:100:0:216:3eff:fe2e:74a3]:8333\n+[2a00:7143:100:0:216:3eff:fed3:5c21]:8333\n+[2a00:7c80:0:45::123]:8333\n+[2a00:dcc0:eda:98:183:193:c382:6bdb]:8333\n+[2a00:dcc0:eda:98:183:193:f72e:d943]:8333\n+[2a00:f820:17::4af:1]:8333\n+[2a00:f940:2:1:2::101d]:8333\n+[2a00:f940:2:1:2::6ac]:8333\n [2a01:1b0:7999:402::131]:8333\n-[2a01:1e8:e100:811c:700f:65f0:f72a:1084]:8333\n-[2a01:238:42da:c500:6546:1293:5422:ab40]:8333\n-[2a01:348:6:473::2]:8333\n-[2a01:368:e010:2::2]:8333\n-[2a01:430:17:1::ffff:549]:8333\n-[2a01:430:17:1::ffff:830]:8333\n-[2a01:488:66:1000:53a9:d04:0:1]:8333\n-[2a01:488:66:1000:57e6:578c:0:1]:8333\n+[2a01:238:42dd:f900:7a6c:2bc6:4041:c43]:8333\n+[2a01:238:4313:6300:2189:1c97:696b:5ea]:8333\n+[2a01:488:66:1000:5c33:91f9:0:1]:8333\n [2a01:488:66:1000:b01c:178d:0:1]:8333\n-[2a01:488:67:1000:523:fdce:0:1]:8333\n-[2a01:488:67:1000:b01c:30ab:0:1]:8333\n-[2a01:4f8:100:24aa::2]:8333\n+[2a01:4f8:100:34ce::2]:8333\n+[2a01:4f8:100:34e4::2]:8333\n [2a01:4f8:100:44e7::2]:8333\n+[2a01:4f8:100:510e::2]:8333\n [2a01:4f8:100:5128::2]:8333\n-[2a01:4f8:100:84a7::1:1]:8333\n+[2a01:4f8:110:5105::2]:8333\n [2a01:4f8:110:516c::2]:8333\n-[2a01:4f8:110:536e::2]:8333\n+[2a01:4f8:120:43e4::2]:8333\n [2a01:4f8:120:62e6::2]:8333\n [2a01:4f8:120:702e::2]:8333\n-[2a01:4f8:120:8005::2]:8333\n [2a01:4f8:120:8203::2]:8333\n-[2a01:4f8:120:8422::2]:8333\n-[2a01:4f8:121:11eb::2]:8333\n+[2a01:4f8:121:234d::2]:8333\n [2a01:4f8:121:261::2]:8333\n-[2a01:4f8:130:242b::10]:8333\n-[2a01:4f8:130:242b::5]:8333\n-[2a01:4f8:130:2468::3]:8333\n+[2a01:4f8:130:11ea::2]:8333\n+[2a01:4f8:130:3332::2]:8333\n+[2a01:4f8:130:40ab::2]:8333\n [2a01:4f8:130:632c::2]:8333\n [2a01:4f8:130:6366::2]:8333\n-[2a01:4f8:130:6426::2]:8333\n [2a01:4f8:130:934f::2]:8333\n-[2a01:4f8:131:2070::2]:8333\n-[2a01:4f8:131:54a2::2]:8333\n-[2a01:4f8:140:80ad::2]:8333\n+[2a01:4f8:131:33ad:fea1::666]:8333\n+[2a01:4f8:140:2195::2]:8333\n+[2a01:4f8:140:6333::2]:8333\n+[2a01:4f8:140:930d::2]:8333\n+[2a01:4f8:140:93b0::2]:8333\n+[2a01:4f8:141:1167::2]:8333\n [2a01:4f8:141:186::2]:8333\n-[2a01:4f8:150:210b::2]:8333\n-[2a01:4f8:150:2263::5]:8333\n-[2a01:4f8:150:2349::2]:8333\n-[2a01:4f8:150:61ee::2]:8333\n-[2a01:4f8:150:7088:5054:ff:fe45:bff2]:8333\n+[2a01:4f8:141:53f0::2]:8333\n+[2a01:4f8:150:336a::2]:8333\n+[2a01:4f8:150:72ee::4202]:8333\n [2a01:4f8:150:8324::2]:9001\n-[2a01:4f8:151:1d8::2]:8333\n+[2a01:4f8:151:21ca::2]:8333\n+[2a01:4f8:151:41c2:0:5404:a67e:f250]:8333\n [2a01:4f8:151:5128::2]:8333\n+[2a01:4f8:151:52c6::154]:8333\n [2a01:4f8:151:6347::2]:9001\n-[2a01:4f8:161:526d::2]:8333\n-[2a01:4f8:161:9349::2]:8333\n-[2a01:4f8:162:23c6::2]:8333\n-[2a01:4f8:162:4348::2]:8333\n-[2a01:4f8:162:7345::2]:8333\n-[2a01:4f8:162:7383::2]:8333\n-[2a01:4f8:162:74e3::2]:8333\n-[2a01:4f8:190:6065::2]:8333\n-[2a01:4f8:190:6349::2]:8333\n+[2a01:4f8:160:5136::2]:8333\n+[2a01:4f8:160:72c5::2858:e1c5]:8333\n+[2a01:4f8:160:72c5::593b:60d5]:8333\n+[2a01:4f8:160:814f::2]:8333\n+[2a01:4f8:161:13d0::2]:8333\n+[2a01:4f8:161:228f::2]:8333\n+[2a01:4f8:161:51c4::2]:8333\n+[2a01:4f8:161:60a7::2]:8333\n+[2a01:4f8:161:7026::2]:8333\n+[2a01:4f8:161:9184::2]:8333\n+[2a01:4f8:162:2108::2]:8333\n+[2a01:4f8:162:218c::2]:8333\n+[2a01:4f8:162:4443::2]:8333\n+[2a01:4f8:162:51a3::2]:8333\n+[2a01:4f8:171:b93::2]:8333\n+[2a01:4f8:190:1483::1]:8333\n+[2a01:4f8:190:4495::2]:8333\n [2a01:4f8:190:64c9::2]:8333\n [2a01:4f8:190:91ce::2]:8333\n [2a01:4f8:191:2194::83]:8333\n-[2a01:4f8:191:40a1::2]:8333\n-[2a01:4f8:191:4a7::2]:8333\n-[2a01:4f8:191:63b4:5000::1]:8333\n-[2a01:4f8:191:7121::2]:8333\n+[2a01:4f8:191:40e8::2]:8333\n+[2a01:4f8:191:44b4::2]:8333\n+[2a01:4f8:191:8242::2]:8333\n [2a01:4f8:191:83a2::2]:8333\n-[2a01:4f8:191:93c4::2]:8333\n-[2a01:4f8:192:60a9:0:1:5:2]:8333\n-[2a01:4f8:192:73b2::2]:8333\n-[2a01:4f8:192:8098::2]:8333\n+[2a01:4f8:192:11b2::2]:8333\n+[2a01:4f8:192:216c::2]:8333\n+[2a01:4f8:192:22b3::2]:8333\n+[2a01:4f8:192:440b::2]:8333\n [2a01:4f8:192:db::2]:8333\n [2a01:4f8:200:1012::2]:8333\n-[2a01:4f8:200:22e3::2]:8333\n-[2a01:4f8:200:414e::2]:8333\n-[2a01:4f8:200:63af::222]:8333\n+[2a01:4f8:200:23d1::dead:beef]:8333\n+[2a01:4f8:200:506d::2]:8333\n+[2a01:4f8:200:51f0::2]:8333\n+[2a01:4f8:200:5389::2]:8333\n+[2a01:4f8:200:53e3::2]:8333\n+[2a01:4f8:200:6344::2]:8333\n+[2a01:4f8:200:6396::2]:8333\n+[2a01:4f8:200:63af::119]:8333\n [2a01:4f8:200:71e3:78b4:f3ff:fead:e8cf]:8333\n-[2a01:4f8:201:5164::2]:8333\n+[2a01:4f8:201:214c::2]:8333\n+[2a01:4f8:201:233:1::3]:8333\n+[2a01:4f8:201:3e3::2]:8333\n [2a01:4f8:201:6011::4]:8333\n [2a01:4f8:201:60d5::2]:8333\n+[2a01:4f8:202:265::2]:8333\n+[2a01:4f8:202:3115::2]:8333\n+[2a01:4f8:202:31e3::2]:8333\n+[2a01:4f8:202:31ef::2]:8333\n+[2a01:4f8:202:3392::2]:8333\n [2a01:4f8:202:53c3::2]:8333\n+[2a01:4f8:202:63f4::2]:8333\n+[2a01:4f8:202:7227::2]:8333\n+[2a01:4f8:210:2227::2]:8333\n [2a01:4f8:210:24aa::2]:8333\n-[2a01:4f8:210:502f::2]:8333\n [2a01:4f8:211:14cf::2]:8333\n-[2a01:4f8:211:1a59::2]:8333\n-[2a01:4f8:211:2ac1::2]:8333\n-[2a01:4f8:211:cca::2]:8333\n-[2a01:4f8:a0:22a5::2]:8333\n-[2a01:4f8:a0:5023::2]:8333\n+[2a01:4f8:211:181b::2]:8333\n+[2a01:4f8:212:289e::2]:8333\n+[2a01:4f8:212:33db::2]:18333\n+[2a01:4f8:a0:112f::2]:8333\n+[2a01:4f8:a0:3174::2]:8333\n+[2a01:4f8:a0:328c::2]:8333\n [2a01:4f8:a0:5243::2]:8333\n-[2a01:4f8:a0:74c8::2]:8333\n-[2a01:4f8:a0:8227::2]:8333\n-[2a01:4f8:a0:822d::2]:8333\n-[2a01:4f8:d13:2183::2]:8333\n+[2a01:4f8:c17:19b9::2]:8333\n+[2a01:4f8:c17:1a41::2]:8333\n+[2a01:4f8:c17:1a92::2]:8333\n+[2a01:4f8:c17:273::2]:8333\n+[2a01:4f8:c17:435::2]:8333\n+[2a01:4f8:c17:755::2]:8333\n+[2a01:4f8:c17:b54::2]:8333\n+[2a01:4f8:d16:9384::2]:8333\n [2a01:608:ffff:a009:8bf5:879d:e51a:f837]:8333\n-[2a01:79d:469e:ed94:c23f:d5ff:fe65:20c5]:8333\n-[2a01:7c8:aab5:3e6:5054:ff:fed7:4e54]:8333\n+[2a01:680:10:10:f2de:f1ff:fec9:dc0]:8333\n+[2a01:7c8:aaac:1f6:5054:ff:fe30:e585]:8333\n+[2a01:7c8:aaac:20b:5054:ff:fe24:435e]:8333\n+[2a01:7c8:aaac:43d:5054:ff:fe4e:3dd4]:8333\n+[2a01:7c8:aaad:256::1]:8333\n+[2a01:7c8:aab6:ea:5054:ff:feff:eac3]:8333\n+[2a01:7c8:aab9:5a:5054:ff:fe89:7b26]:8333\n+[2a01:7c8:aabc:2c8:5054:ff:fe35:6581]:8333\n [2a01:7e00::f03c:91ff:fe18:301e]:8333\n-[2a01:7e00::f03c:91ff:fe18:7749]:8333\n-[2a01:7e00::f03c:91ff:fe33:2d67]:8333\n-[2a01:7e00::f03c:91ff:fe33:347c]:8333\n-[2a01:7e00::f03c:91ff:fe33:ae50]:8333\n-[2a01:7e00::f03c:91ff:fe56:6b5c]:8333\n-[2a01:7e00::f03c:91ff:fe56:bee6]:8333\n-[2a01:7e00::f03c:91ff:fe69:4895]:8333\n-[2a01:7e00::f03c:91ff:fe69:9912]:8333\n-[2a01:7e00::f03c:91ff:fe6e:26ee]:8333\n-[2a01:7e00::f03c:91ff:fe73:42f1]:8333\n+[2a01:7e00::f03c:91ff:fe18:3942]:8333\n+[2a01:7e00::f03c:91ff:fe26:8c87]:8333\n+[2a01:7e00::f03c:91ff:fe50:6206]:8333\n+[2a01:7e00::f03c:91ff:fe67:559d]:8333\n [2a01:7e00::f03c:91ff:fe84:434f]:8333\n-[2a01:7e00::f03c:91ff:fe84:b36b]:8333\n-[2a01:7e00::f03c:91ff:fe89:1faa]:8333\n-[2a01:7e00::f03c:91ff:fe98:816]:8333\n+[2a01:7e00::f03c:91ff:fe89:1143]:8333\n+[2a01:7e00::f03c:91ff:fe98:2505]:8333\n [2a01:7e00::f03c:91ff:fedb:352e]:8333\n-[2a01:7e00::f03c:91ff:fedb:4a1d]:8333\n-[2a01:e34:edbb:6750:224:1dff:fe89:3897]:8333\n-[2a01:e35:2f1d:3fb0:7187:c7ba:bcfc:80ce]:8333\n-[2a01:e35:8787:96f0:9032:9297:39ae:496d]:8333\n+[2a01:7e01::f03c:91ff:fec8:d7b5]:8333\n+[2a01:e34:ee33:1640:c504:f677:b28a:ba42]:8333\n+[2a01:e35:2e7e:bc0:e079:f55e:cef3:b5d7]:8333\n+[2a01:e35:2ee5:610:21f:d0ff:fe4e:7460]:8333\n [2a01:e35:8a3f:47c0:c617:feff:fe3c:9fbd]:8333\n-[2a01:e35:8b66:6a0:4900:9dfd:d841:d025]:8333\n-[2a02:168:4a01::39]:8333\n-[2a02:168:5404:2:c23f:d5ff:fe6a:512e]:8333\n-[2a02:180:1:1::5b8f:538c]:8333\n-[2a02:2028:1016::2]:8333\n-[2a02:2528:503:2::14]:8333\n+[2a01:e35:8aca:6a0:211:aff:fe5e:295e]:8333\n+[2a02:180:a:18:81:7:11:50]:8333\n+[2a02:1810:1d87:6a00:5604:a6ff:fe60:d87d]:8333\n+[2a02:2168:1144:5c01:d63d:7eff:fedd:4f8e]:8333\n+[2a02:2498:6d7b:7001:b508:b39d:2cea:5b7a]:8333\n [2a02:2528:503:2::15]:8333\n-[2a02:2528:ff00:81a6:21e:c5ff:fe8d:f9a5]:8333\n-[2a02:2770:5:0:21a:4aff:fee4:c7db]:8333\n-[2a02:2770:8:0:21a:4aff:fe7b:3dcd]:8333\n-[2a02:348:5e:5a29::1]:8333\n-[2a02:7aa0:1619::202f:c06a]:8333\n-[2a02:8109:8e40:35fc:ba27:ebff:feae:cf16]:8333\n-[2a02:af8:6:1500::1:130]:8333\n-[2a02:c200:0:10:1:0:6314:2222]:8333\n-[2a02:c200:0:10:2:3:3295:1]:8332\n-[2a02:c200:0:10:3:0:5449:1]:8333\n-[2a02:c200:1:10:2:3:5899:1]:8333\n-[2a02:c200:1:10::2705:1]:8333\n-[2a02:ce80:0:20::1]:8333\n-[2a02:fe0:c321:27e0:6ef0:49ff:fe11:a61d]:8333\n+[2a02:2528:fa:1a56:216:44ff:fe6a:d112]:8333\n+[2a02:27f8:2012:0:e9f7:268f:c441:6129]:8333\n+[2a02:348:86:3011::1]:8333\n+[2a02:4780:1:1::1:8a01]:8333\n+[2a02:578:5002:116::2]:8333\n+[2a02:6080::1:190b:69e3]:8333\n+[2a02:6080::1:e893:d9d6]:8333\n+[2a02:770:4000::139]:8333\n+[2a02:7aa0:1201::deb3:81a2]:8333\n+[2a02:8010:b001::5860:59b5]:8333\n+[2a02:810d:21c0:f00:a248:1cff:feb8:5348]:8333\n+[2a02:a50::21b:24ff:fe93:4e39]:8333\n+[2a02:a80:0:1200::2]:8333\n+[2a02:c200:0:10:2:1:5830:1]:8333\n+[2a02:c200:0:10:2:5:4692:1]:8333\n+[2a02:c200:0:10:3:0:7158:1]:8333\n+[2a02:c200:0:10::2244:1]:8333\n+[2a02:c200:1:10:2:3:3339:1]:8333\n+[2a02:c200:1:10:2:3:7844:1]:8333\n+[2a02:c200:1:10:2:5:6288:1]:8333\n+[2a02:c200:1:10:3:0:5912:1]:8333\n [2a03:4000:2:496::8]:8333\n-[2a03:b0c0:0:1010::62:f001]:8333\n+[2a03:4000:6:8009::1]:8333\n+[2a03:4000:6:8063::bcd0]:8333\n+[2a03:4900:fffc:b::2]:8333\n+[2a03:b0c0:1:d0::d:5001]:8333\n+[2a03:f80:ed15:149:154:155:235:1]:8333\n+[2a03:f80:ed15:149:154:155:241:1]:8333\n [2a03:f80:ed16:ca7:ea75:b12d:2af:9e2a]:8333\n+[2a04:1980:3100:1aab:290:faff:fe70:a3d8]:8333\n+[2a04:1980:3100:1aab:e61d:2dff:fe29:f590]:8333\n+[2a04:2f80:6:200::89]:8333\n+[2a04:ac00:1:4a0b:5054:ff:fe00:5af5]:8333\n+[2a04:ad80:0:68::35da]:8333\n 3ffk7iumtx3cegbi.onion:8333\n-3hshaantu6ot4upz.onion:8333\n-45c5lc77qgpikafy.onion:8333\n+3nmbbakinewlgdln.onion:8333\n+4j77gihpokxu2kj4.onion:8333\n+546esc6botbjfbxb.onion:8333\n+5at7sq5nm76xijkd.onion:8333\n 77mx2jsxaoyesz2p.onion:8333\n 7g7j54btiaxhtsiy.onion:8333\n-b6fr7dlbu2kpiysf.onion:8333\n-bitcoincfqcssig5.onion:8333\n+a6obdgzn67l7exu3.onion:8333\n+ab64h7olpl7qpxci.onion:8333\n+am2a4rahltfuxz6l.onion:8333\n+azuxls4ihrr2mep7.onion:8333\n+bitcoin7bi4op7wb.onion:8333\n bitcoinostk4e4re.onion:8333\n+bk7yp6epnmcllq72.onion:8333\n bmutjfrj5btseddb.onion:8333\n-drp4pvejybx2ejdr.onion:8333\n-gixnv56d63buypan.onion:8333\n+ceeji4qpfs3ms3zc.onion:8333\n+clexmzqio7yhdao4.onion:8333\n+gb5ypqt63du3wfhn.onion:8333\n h2vlpudzphzqxutd.onion:8333\n-hhiv5pnxenvbf4am.onion:8333\n-lzxpkn6ptp3ohh63.onion:8333\n-msphsgfiqfq5stne.onion:8333\n+n42h7r6oumcfsbrs.onion:4176\n ncwk3lutemffcpc4.onion:8333\n okdzjarwekbshnof.onion:8333\n-sjdomi4yb2dwkjbc.onion:8333\n-uvwozwxlihntigbb.onion:8333\n-v6ylz45dn5ybpk4d.onion:8333\n+pjghcivzkoersesd.onion:8333\n+rw7ocjltix26mefn.onion:8333\n+uws7itep7o3yinxo.onion:8333\n vk3qjdehyy4dwcxw.onion:8333\n vqpye2k5rcqvj5mq.onion:8333\n-xudkoztdfrsuyyou.onion:8333\n-z55v4ostefnwfy32.onion:8333\n+wpi7rpvhnndl52ee.onion:8333"
      },
      {
        "sha": "c0a9c9ccf93d335a7092e383ff8a59ae410e549d",
        "filename": "contrib/spendfrom/README.md",
        "status": "removed",
        "additions": 0,
        "deletions": 35,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9df179d2e3abdee7d1f255d9be17c8b72dff06a/contrib/spendfrom/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9df179d2e3abdee7d1f255d9be17c8b72dff06a/contrib/spendfrom/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/spendfrom/README.md?ref=e9df179d2e3abdee7d1f255d9be17c8b72dff06a",
        "patch": "@@ -1,35 +0,0 @@\n-### SpendFrom ###\n-\n-Use the raw transactions API to send coins received on a particular\n-address (or addresses). \n-\n-### Usage: ###\n-Depends on [jsonrpc](http://json-rpc.org/).\n-\n-\tspendfrom.py --from=FROMADDRESS1[,FROMADDRESS2] --to=TOADDRESS --amount=amount \\\n-\t             --fee=fee --datadir=/path/to/.bitcoin --testnet --dry_run\n-\n-With no arguments, outputs a list of amounts associated with addresses.\n-\n-With arguments, sends coins received by the `FROMADDRESS` addresses to the `TOADDRESS`.\n-\n-### Notes ###\n-\n-- You may explicitly specify how much fee to pay (a fee more than 1% of the amount\n-will fail,  though, to prevent bitcoin-losing accidents). Spendfrom may fail if\n-it thinks the transaction would never be confirmed (if the amount being sent is\n-too small, or if the transaction is too many bytes for the fee).\n-\n-- If a change output needs to be created, the change will be sent to the last\n-`FROMADDRESS` (if you specify just one `FROMADDRESS`, change will go back to it).\n-\n-- If `--datadir` is not specified, the default datadir is used.\n-\n-- The `--dry_run` option will just create and sign the transaction and print\n-the transaction data (as hexadecimal), instead of broadcasting it.\n-\n-- If the transaction is created and broadcast successfully, a transaction id\n-is printed.\n-\n-- If this was a tool for end-users and not programmers, it would have much friendlier\n-error-handling."
      },
      {
        "sha": "01b9768a5b06a459808af61efca624239b301f1d",
        "filename": "contrib/spendfrom/setup.py",
        "status": "removed",
        "additions": 0,
        "deletions": 9,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9df179d2e3abdee7d1f255d9be17c8b72dff06a/contrib/spendfrom/setup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9df179d2e3abdee7d1f255d9be17c8b72dff06a/contrib/spendfrom/setup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/spendfrom/setup.py?ref=e9df179d2e3abdee7d1f255d9be17c8b72dff06a",
        "patch": "@@ -1,9 +0,0 @@\n-from distutils.core import setup\n-setup(name='btcspendfrom',\n-      version='1.0',\n-      description='Command-line utility for bitcoin \"coin control\"',\n-      author='Gavin Andresen',\n-      author_email='gavin@bitcoinfoundation.org',\n-      requires=['jsonrpc'],\n-      scripts=['spendfrom.py'],\n-      )"
      },
      {
        "sha": "72ee0425eb2363ab39f85ba9d239891aa0279dcd",
        "filename": "contrib/spendfrom/spendfrom.py",
        "status": "removed",
        "additions": 0,
        "deletions": 267,
        "changes": 267,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9df179d2e3abdee7d1f255d9be17c8b72dff06a/contrib/spendfrom/spendfrom.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9df179d2e3abdee7d1f255d9be17c8b72dff06a/contrib/spendfrom/spendfrom.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/spendfrom/spendfrom.py?ref=e9df179d2e3abdee7d1f255d9be17c8b72dff06a",
        "patch": "@@ -1,267 +0,0 @@\n-#!/usr/bin/env python\n-#\n-# Use the raw transactions API to spend bitcoins received on particular addresses,\n-# and send any change back to that same address.\n-#\n-# Example usage:\n-#  spendfrom.py  # Lists available funds\n-#  spendfrom.py --from=ADDRESS --to=ADDRESS --amount=11.00\n-#\n-# Assumes it will talk to a bitcoind or Bitcoin-Qt running\n-# on localhost.\n-#\n-# Depends on jsonrpc\n-#\n-\n-from decimal import *\n-import getpass\n-import math\n-import os\n-import os.path\n-import platform\n-import sys\n-import time\n-from jsonrpc import ServiceProxy, json\n-\n-BASE_FEE=Decimal(\"0.001\")\n-\n-def check_json_precision():\n-    \"\"\"Make sure json library being used does not lose precision converting BTC values\"\"\"\n-    n = Decimal(\"20000000.00000003\")\n-    satoshis = int(json.loads(json.dumps(float(n)))*1.0e8)\n-    if satoshis != 2000000000000003:\n-        raise RuntimeError(\"JSON encode/decode loses precision\")\n-\n-def determine_db_dir():\n-    \"\"\"Return the default location of the bitcoin data directory\"\"\"\n-    if platform.system() == \"Darwin\":\n-        return os.path.expanduser(\"~/Library/Application Support/Bitcoin/\")\n-    elif platform.system() == \"Windows\":\n-        return os.path.join(os.environ['APPDATA'], \"Bitcoin\")\n-    return os.path.expanduser(\"~/.bitcoin\")\n-\n-def read_bitcoin_config(dbdir):\n-    \"\"\"Read the bitcoin.conf file from dbdir, returns dictionary of settings\"\"\"\n-    from ConfigParser import SafeConfigParser\n-\n-    class FakeSecHead(object):\n-        def __init__(self, fp):\n-            self.fp = fp\n-            self.sechead = '[all]\\n'\n-        def readline(self):\n-            if self.sechead:\n-                try: return self.sechead\n-                finally: self.sechead = None\n-            else:\n-                s = self.fp.readline()\n-                if s.find('#') != -1:\n-                    s = s[0:s.find('#')].strip() +\"\\n\"\n-                return s\n-\n-    config_parser = SafeConfigParser()\n-    config_parser.readfp(FakeSecHead(open(os.path.join(dbdir, \"bitcoin.conf\"))))\n-    return dict(config_parser.items(\"all\"))\n-\n-def connect_JSON(config):\n-    \"\"\"Connect to a bitcoin JSON-RPC server\"\"\"\n-    testnet = config.get('testnet', '0')\n-    testnet = (int(testnet) > 0)  # 0/1 in config file, convert to True/False\n-    if not 'rpcport' in config:\n-        config['rpcport'] = 18332 if testnet else 8332\n-    connect = \"http://%s:%s@127.0.0.1:%s\"%(config['rpcuser'], config['rpcpassword'], config['rpcport'])\n-    try:\n-        result = ServiceProxy(connect)\n-        # ServiceProxy is lazy-connect, so send an RPC command mostly to catch connection errors,\n-        # but also make sure the bitcoind we're talking to is/isn't testnet:\n-        if result.getmininginfo()['testnet'] != testnet:\n-            sys.stderr.write(\"RPC server at \"+connect+\" testnet setting mismatch\\n\")\n-            sys.exit(1)\n-        return result\n-    except:\n-        sys.stderr.write(\"Error connecting to RPC server at \"+connect+\"\\n\")\n-        sys.exit(1)\n-\n-def unlock_wallet(bitcoind):\n-    info = bitcoind.getinfo()\n-    if 'unlocked_until' not in info:\n-        return True # wallet is not encrypted\n-    t = int(info['unlocked_until'])\n-    if t <= time.time():\n-        try:\n-            passphrase = getpass.getpass(\"Wallet is locked; enter passphrase: \")\n-            bitcoind.walletpassphrase(passphrase, 5)\n-        except:\n-            sys.stderr.write(\"Wrong passphrase\\n\")\n-\n-    info = bitcoind.getinfo()\n-    return int(info['unlocked_until']) > time.time()\n-\n-def list_available(bitcoind):\n-    address_summary = dict()\n-\n-    address_to_account = dict()\n-    for info in bitcoind.listreceivedbyaddress(0):\n-        address_to_account[info[\"address\"]] = info[\"account\"]\n-\n-    unspent = bitcoind.listunspent(0)\n-    for output in unspent:\n-        # listunspent doesn't give addresses, so:\n-        rawtx = bitcoind.getrawtransaction(output['txid'], 1)\n-        vout = rawtx[\"vout\"][output['vout']]\n-        pk = vout[\"scriptPubKey\"]\n-\n-        # This code only deals with ordinary pay-to-bitcoin-address\n-        # or pay-to-script-hash outputs right now; anything exotic is ignored.\n-        if pk[\"type\"] != \"pubkeyhash\" and pk[\"type\"] != \"scripthash\":\n-            continue\n-        \n-        address = pk[\"addresses\"][0]\n-        if address in address_summary:\n-            address_summary[address][\"total\"] += vout[\"value\"]\n-            address_summary[address][\"outputs\"].append(output)\n-        else:\n-            address_summary[address] = {\n-                \"total\" : vout[\"value\"],\n-                \"outputs\" : [output],\n-                \"account\" : address_to_account.get(address, \"\")\n-                }\n-\n-    return address_summary\n-\n-def select_coins(needed, inputs):\n-    # Feel free to improve this, this is good enough for my simple needs:\n-    outputs = []\n-    have = Decimal(\"0.0\")\n-    n = 0\n-    while have < needed and n < len(inputs):\n-        outputs.append({ \"txid\":inputs[n][\"txid\"], \"vout\":inputs[n][\"vout\"]})\n-        have += inputs[n][\"amount\"]\n-        n += 1\n-    return (outputs, have-needed)\n-\n-def create_tx(bitcoind, fromaddresses, toaddress, amount, fee):\n-    all_coins = list_available(bitcoind)\n-\n-    total_available = Decimal(\"0.0\")\n-    needed = amount+fee\n-    potential_inputs = []\n-    for addr in fromaddresses:\n-        if addr not in all_coins:\n-            continue\n-        potential_inputs.extend(all_coins[addr][\"outputs\"])\n-        total_available += all_coins[addr][\"total\"]\n-\n-    if total_available < needed:\n-        sys.stderr.write(\"Error, only %f BTC available, need %f\\n\"%(total_available, needed));\n-        sys.exit(1)\n-\n-    #\n-    # Note:\n-    # Python's json/jsonrpc modules have inconsistent support for Decimal numbers.\n-    # Instead of wrestling with getting json.dumps() (used by jsonrpc) to encode\n-    # Decimals, I'm casting amounts to float before sending them to bitcoind.\n-    #  \n-    outputs = { toaddress : float(amount) }\n-    (inputs, change_amount) = select_coins(needed, potential_inputs)\n-    if change_amount > BASE_FEE:  # don't bother with zero or tiny change\n-        change_address = fromaddresses[-1]\n-        if change_address in outputs:\n-            outputs[change_address] += float(change_amount)\n-        else:\n-            outputs[change_address] = float(change_amount)\n-\n-    rawtx = bitcoind.createrawtransaction(inputs, outputs)\n-    signed_rawtx = bitcoind.signrawtransaction(rawtx)\n-    if not signed_rawtx[\"complete\"]:\n-        sys.stderr.write(\"signrawtransaction failed\\n\")\n-        sys.exit(1)\n-    txdata = signed_rawtx[\"hex\"]\n-\n-    return txdata\n-\n-def compute_amount_in(bitcoind, txinfo):\n-    result = Decimal(\"0.0\")\n-    for vin in txinfo['vin']:\n-        in_info = bitcoind.getrawtransaction(vin['txid'], 1)\n-        vout = in_info['vout'][vin['vout']]\n-        result = result + vout['value']\n-    return result\n-\n-def compute_amount_out(txinfo):\n-    result = Decimal(\"0.0\")\n-    for vout in txinfo['vout']:\n-        result = result + vout['value']\n-    return result\n-\n-def sanity_test_fee(bitcoind, txdata_hex, max_fee):\n-    class FeeError(RuntimeError):\n-        pass\n-    try:\n-        txinfo = bitcoind.decoderawtransaction(txdata_hex)\n-        total_in = compute_amount_in(bitcoind, txinfo)\n-        total_out = compute_amount_out(txinfo)\n-        if total_in-total_out > max_fee:\n-            raise FeeError(\"Rejecting transaction, unreasonable fee of \"+str(total_in-total_out))\n-\n-        tx_size = len(txdata_hex)/2\n-        kb = tx_size/1000  # integer division rounds down\n-        if kb > 1 and fee < BASE_FEE:\n-            raise FeeError(\"Rejecting no-fee transaction, larger than 1000 bytes\")\n-        if total_in < 0.01 and fee < BASE_FEE:\n-            raise FeeError(\"Rejecting no-fee, tiny-amount transaction\")\n-        # Exercise for the reader: compute transaction priority, and\n-        # warn if this is a very-low-priority transaction\n-\n-    except FeeError as err:\n-        sys.stderr.write((str(err)+\"\\n\"))\n-        sys.exit(1)\n-\n-def main():\n-    import optparse\n-\n-    parser = optparse.OptionParser(usage=\"%prog [options]\")\n-    parser.add_option(\"--from\", dest=\"fromaddresses\", default=None,\n-                      help=\"addresses to get bitcoins from\")\n-    parser.add_option(\"--to\", dest=\"to\", default=None,\n-                      help=\"address to get send bitcoins to\")\n-    parser.add_option(\"--amount\", dest=\"amount\", default=None,\n-                      help=\"amount to send\")\n-    parser.add_option(\"--fee\", dest=\"fee\", default=\"0.0\",\n-                      help=\"fee to include\")\n-    parser.add_option(\"--datadir\", dest=\"datadir\", default=determine_db_dir(),\n-                      help=\"location of bitcoin.conf file with RPC username/password (default: %default)\")\n-    parser.add_option(\"--testnet\", dest=\"testnet\", default=False, action=\"store_true\",\n-                      help=\"Use the test network\")\n-    parser.add_option(\"--dry_run\", dest=\"dry_run\", default=False, action=\"store_true\",\n-                      help=\"Don't broadcast the transaction, just create and print the transaction data\")\n-\n-    (options, args) = parser.parse_args()\n-\n-    check_json_precision()\n-    config = read_bitcoin_config(options.datadir)\n-    if options.testnet: config['testnet'] = True\n-    bitcoind = connect_JSON(config)\n-\n-    if options.amount is None:\n-        address_summary = list_available(bitcoind)\n-        for address,info in address_summary.iteritems():\n-            n_transactions = len(info['outputs'])\n-            if n_transactions > 1:\n-                print(\"%s %.8f %s (%d transactions)\"%(address, info['total'], info['account'], n_transactions))\n-            else:\n-                print(\"%s %.8f %s\"%(address, info['total'], info['account']))\n-    else:\n-        fee = Decimal(options.fee)\n-        amount = Decimal(options.amount)\n-        while unlock_wallet(bitcoind) == False:\n-            pass # Keep asking for passphrase until they get it right\n-        txdata = create_tx(bitcoind, options.fromaddresses.split(\",\"), options.to, amount, fee)\n-        sanity_test_fee(bitcoind, txdata, amount*Decimal(\"0.01\"))\n-        if options.dry_run:\n-            print(txdata)\n-        else:\n-            txid = bitcoind.sendrawtransaction(txdata)\n-            print(txid)\n-\n-if __name__ == '__main__':\n-    main()"
      },
      {
        "sha": "72b288b2dc9f3446ea8713dbd0c5a62a2e69455a",
        "filename": "contrib/testgen/base58.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/testgen/base58.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/testgen/base58.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/testgen/base58.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -1,3 +1,6 @@\n+# Copyright (c) 2012 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n '''\n Bitcoin base58 encoding and decoding.\n "
      },
      {
        "sha": "8518774db3d1528d8cfc4deebd3b31ebb1fb08f1",
        "filename": "contrib/testgen/gen_base58_test_vectors.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/testgen/gen_base58_test_vectors.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/testgen/gen_base58_test_vectors.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/testgen/gen_base58_test_vectors.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -1,4 +1,7 @@\n #!/usr/bin/env python\n+# Copyright (c) 2012 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n '''\n Generate valid and invalid base58 address and private key test vectors.\n "
      },
      {
        "sha": "8960f8811d81e883773fc76add0f6421d173df82",
        "filename": "contrib/tidy_datadir.sh",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/tidy_datadir.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/tidy_datadir.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/tidy_datadir.sh?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -1,4 +1,7 @@\n #!/bin/bash\n+# Copyright (c) 2013 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n if [ -d \"$1\" ]; then\n   cd \"$1\""
      },
      {
        "sha": "e9e3f65da292a5bd80377f43cbc21cdb9e7f2c37",
        "filename": "contrib/verify-commits/README.md",
        "status": "added",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/verify-commits/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/verify-commits/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verify-commits/README.md?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -0,0 +1,26 @@\n+Tooling for verification of PGP signed commits\n+----------------------------------------------\n+\n+This is an incomplete work in progress, but currently includes a pre-push hook\n+script (`pre-push-hook.sh`) for maintainers to ensure that their own commits\n+are PGP signed (nearly always merge commits), as well as a script to verify\n+commits against a trusted keys list.\n+\n+\n+Using verify-commits.sh safely\n+------------------------------\n+\n+Remember that you can't use an untrusted script to verify itself. This means\n+that checking out code, then running `verify-commits.sh` against `HEAD` is\n+_not_ safe, because the version of `verify-commits.sh` that you just ran could\n+be backdoored. Instead, you need to use a trusted version of verify-commits\n+prior to checkout to make sure you're checking out only code signed by trusted\n+keys:\n+\n+    git fetch origin && \\\n+      ./contrib/verify-commits/verify-commits.sh origin/master && \\\n+      git checkout origin/master\n+\n+Note that the above isn't a good UI/UX yet, and needs significant improvements\n+to make it more convenient and reduce the chance of errors; pull-reqs\n+improving this process would be much appreciated."
      },
      {
        "sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
        "filename": "contrib/verify-commits/allow-revsig-commits",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/verify-commits/allow-revsig-commits",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/verify-commits/allow-revsig-commits",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verify-commits/allow-revsig-commits?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -1,2 +0,0 @@\n-586a29253dabec3ca0f1ccba9091daabd16b8411\n-eddaba7b5692288087a926da5733e86b47274e4e"
      },
      {
        "sha": "09ff23754473f3286240e572d2a91e340b65fad3",
        "filename": "contrib/verify-commits/gpg.sh",
        "status": "modified",
        "additions": 9,
        "deletions": 5,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/verify-commits/gpg.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/verify-commits/gpg.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verify-commits/gpg.sh?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -1,8 +1,13 @@\n #!/bin/sh\n-INPUT=$(</dev/stdin)\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+INPUT=$(cat /dev/stdin)\n VALID=false\n REVSIG=false\n-IFS=$'\\n'\n+IFS='\n+'\n for LINE in $(echo \"$INPUT\" | gpg --trust-model always \"$@\" 2>/dev/null); do\n \tcase \"$LINE\" in\n \t\"[GNUPG:] VALIDSIG \"*)\n@@ -13,10 +18,9 @@ for LINE in $(echo \"$INPUT\" | gpg --trust-model always \"$@\" 2>/dev/null); do\n \t\"[GNUPG:] REVKEYSIG \"*)\n \t\t[ \"$BITCOIN_VERIFY_COMMITS_ALLOW_REVSIG\" != 1 ] && exit 1\n \t\twhile read KEY; do\n-\t\t\tcase \"$LINE\" in \"[GNUPG:] REVKEYSIG ${KEY:24:40} \"*)\n+\t\t\tcase \"$LINE\" in \"[GNUPG:] REVKEYSIG ${KEY#????????????????????????} \"*)\n \t\t\t\tREVSIG=true\n-\t\t\t\tGOODREVSIG=\"[GNUPG:] GOODSIG ${KEY:24:40} \"\n-\t\t\t\t;;\n+\t\t\t\tGOODREVSIG=\"[GNUPG:] GOODSIG ${KEY#????????????????????????} \"\n \t\t\tesac\n \t\tdone < ./contrib/verify-commits/trusted-keys\n \t\t;;"
      },
      {
        "sha": "c21febb9e9249958fa72ba240e6040a61d927565",
        "filename": "contrib/verify-commits/pre-push-hook.sh",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/verify-commits/pre-push-hook.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/verify-commits/pre-push-hook.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verify-commits/pre-push-hook.sh?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -1,4 +1,8 @@\n #!/bin/bash\n+# Copyright (c) 2014-2015 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n if ! [[ \"$2\" =~ ^(git@)?(www.)?github.com(:|/)bitcoin/bitcoin(.git)?$ ]]; then\n     exit 0\n fi"
      },
      {
        "sha": "c60f8ab695e9c0fb01feafb1c28074cb98ab122d",
        "filename": "contrib/verify-commits/trusted-git-root",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/verify-commits/trusted-git-root",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/verify-commits/trusted-git-root",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verify-commits/trusted-git-root?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -1 +1 @@\n-165e323d851cc87213c7673c6f278e87a6f2e752\n+82bcf405f6db1d55b684a1f63a4aabad376cdad7"
      },
      {
        "sha": "75242c2a9760b6c500a38ff62ccacd89c766cb0a",
        "filename": "contrib/verify-commits/trusted-keys",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/verify-commits/trusted-keys",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/verify-commits/trusted-keys",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verify-commits/trusted-keys?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -1,7 +1,4 @@\n 71A3B16735405025D447E8F274810B012346C9A6\n-1F4410F6A89268CE3197A84C57896D2FF8F0B657\n-01CDF4627A3B88AAE4A571C87588242FBE38D3A8\n-AF8BE07C7049F3A26B239D5325B3083201782B2F\n-81291FA67D2C379A006A053FEAB5AF94D9E9ABE7\n 3F1888C6DCA92A6499C4911FDBA1A67379A1A931\n 32EE5C4C3FA15CCADB46ABE529D4BCB6416F53EC\n+FE09B823E6D83A3BC7983EAA2D7F2372E50FE137"
      },
      {
        "sha": "cfe4f11a0b7a2be3c1e432ab5fdb11da407e4b5a",
        "filename": "contrib/verify-commits/verify-commits.sh",
        "status": "modified",
        "additions": 11,
        "deletions": 12,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/verify-commits/verify-commits.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/verify-commits/verify-commits.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verify-commits/verify-commits.sh?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -1,33 +1,32 @@\n #!/bin/sh\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-DIR=$(dirname \"$0\")\n+# Not technically POSIX-compliant due to use of \"local\", but almost every\n+# shell anyone uses today supports it, so its probably fine\n \n-echo \"Please verify all commits in the following list are not evil:\"\n-git log \"$DIR\"\n+DIR=$(dirname \"$0\")\n+[ \"/${DIR#/}\" != \"$DIR\" ] && DIR=$(dirname \"$(pwd)/$0\")\n \n VERIFIED_ROOT=$(cat \"${DIR}/trusted-git-root\")\n-\n-IS_REVSIG_ALLOWED () {\n-\twhile read LINE; do\n-\t\t[ \"$LINE\" = \"$1\" ] && return 0\n-\tdone < \"${DIR}/allow-revsig-commits\"\n-\treturn 1\n-}\n+REVSIG_ALLOWED=$(cat \"${DIR}/allow-revsig-commits\")\n \n HAVE_FAILED=false\n IS_SIGNED () {\n \tif [ $1 = $VERIFIED_ROOT ]; then\n \t\treturn 0;\n \tfi\n-\tif IS_REVSIG_ALLOWED \"$1\"; then\n+\tif [ \"${REVSIG_ALLOWED#*$1}\" != \"$REVSIG_ALLOWED\" ]; then\n \t\texport BITCOIN_VERIFY_COMMITS_ALLOW_REVSIG=1\n \telse\n \t\texport BITCOIN_VERIFY_COMMITS_ALLOW_REVSIG=0\n \tfi\n \tif ! git -c \"gpg.program=${DIR}/gpg.sh\" verify-commit $1 > /dev/null 2>&1; then\n \t\treturn 1;\n \tfi\n-\tlocal PARENTS=$(git show -s --format=format:%P $1)\n+\tlocal PARENTS\n+\tPARENTS=$(git show -s --format=format:%P $1)\n \tfor PARENT in $PARENTS; do\n \t\tif IS_SIGNED $PARENT > /dev/null; then\n \t\t\treturn 0;"
      },
      {
        "sha": "ed3e14fb6c110dcc1535f5ae1c2ac6132eebbd8c",
        "filename": "contrib/verifybinaries/README.md",
        "status": "added",
        "additions": 33,
        "deletions": 0,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/verifybinaries/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/verifybinaries/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verifybinaries/README.md?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -0,0 +1,33 @@\n+### Verify Binaries\n+\n+#### Preparation:\n+\n+Make sure you obtain the proper release signing key and verify the fingerprint with several independent sources.\n+\n+```sh\n+$ gpg --fingerprint \"Bitcoin Core binary release signing key\"\n+pub   4096R/36C2E964 2015-06-24 [expires: 2017-02-13]\n+      Key fingerprint = 01EA 5486 DE18 A882 D4C2  6845 90C8 019E 36C2 E964\n+uid                  Wladimir J. van der Laan (Bitcoin Core binary release signing key) <laanwj@gmail.com>\n+```\n+\n+#### Usage:\n+\n+This script attempts to download the signature file `SHA256SUMS.asc` from https://bitcoin.org.\n+\n+It first checks if the signature passes, and then downloads the files specified in the file, and checks if the hashes of these files match those that are specified in the signature file.\n+\n+The script returns 0 if everything passes the checks. It returns 1 if either the signature check or the hash check doesn't pass. If an error occurs the return value is 2.\n+\n+\n+```sh\n+./verify.sh bitcoin-core-0.11.2\n+./verify.sh bitcoin-core-0.12.0\n+./verify.sh bitcoin-core-0.13.0-rc3\n+```\n+\n+If you do not want to keep the downloaded binaries, specify anything as the second parameter.\n+\n+```sh\n+./verify.sh bitcoin-core-0.13.0 delete\n+```"
      },
      {
        "sha": "e20770c96a967b949f20761cd83057f99da7b259",
        "filename": "contrib/verifybinaries/verify.sh",
        "status": "renamed",
        "additions": 17,
        "deletions": 11,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/verifybinaries/verify.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/verifybinaries/verify.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verifybinaries/verify.sh?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -1,4 +1,7 @@\n #!/bin/bash\n+# Copyright (c) 2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n ###   This script attempts to download the signature file SHA256SUMS.asc from bitcoin.org\n ###   It first checks if the signature passes, and then downloads the files specified in\n@@ -14,18 +17,15 @@ function clean_up {\n    done\n }\n \n-WORKINGDIR=\"/tmp/bitcoin\"\n+WORKINGDIR=\"/tmp/bitcoin_verify_binaries\"\n TMPFILE=\"hashes.tmp\"\n \n SIGNATUREFILENAME=\"SHA256SUMS.asc\"\n-RCSUBDIR=\"test/\"\n+RCSUBDIR=\"test\"\n BASEDIR=\"https://bitcoin.org/bin/\"\n VERSIONPREFIX=\"bitcoin-core-\"\n RCVERSIONSTRING=\"rc\"\n \n-#this URL is used if a version number is not specified as an argument to the script\n-SIGNATUREFILE=\"$BASEDIR\"\"$VERSIONPREFIX\"\"0.10.4/\"\"$RCSUBDIR\"\"$SIGNATUREFILENAME\"\n-\n if [ ! -d \"$WORKINGDIR\" ]; then\n    mkdir \"$WORKINGDIR\"\n fi\n@@ -46,14 +46,15 @@ if [ -n \"$1\" ]; then\n    #  and simultaneously add RCSUBDIR to BASEDIR, where we will look for SIGNATUREFILENAME\n    if [[ $VERSION == *\"$RCVERSIONSTRING\"* ]]; then\n       BASEDIR=\"$BASEDIR${VERSION/%-$RCVERSIONSTRING*}/\"\n-      BASEDIR=\"$BASEDIR$RCSUBDIR\"\n+      BASEDIR=\"$BASEDIR$RCSUBDIR.$RCVERSIONSTRING${VERSION: -1}/\"\n    else\n       BASEDIR=\"$BASEDIR$VERSION/\"\n    fi\n \n    SIGNATUREFILE=\"$BASEDIR$SIGNATUREFILENAME\"\n else\n-   BASEDIR=\"${SIGNATUREFILE%/*}/\"\n+   echo \"Error: need to specify a version on the command line\"\n+   exit 2\n fi\n \n #first we fetch the file containing the signature\n@@ -95,7 +96,7 @@ fi\n FILES=$(awk '{print $2}' \"$TMPFILE\")\n \n #and download these one by one\n-for file in in $FILES\n+for file in $FILES\n do\n    wget --quiet -N \"$BASEDIR$file\"\n done\n@@ -110,11 +111,16 @@ if [ $? -eq 1 ]; then\n    exit 1\n elif [ $? -gt 1 ]; then\n    echo \"Error executing 'diff'\"\n-   exit 2   \n+   exit 2\n fi\n \n-#everything matches! clean up the mess\n-clean_up $FILES $SIGNATUREFILENAME $TMPFILE\n+if [ -n \"$2\" ]; then\n+   echo \"Clean up the binaries\"\n+   clean_up $FILES $SIGNATUREFILENAME $TMPFILE\n+else\n+   echo \"Keep the binaries in $WORKINGDIR\"\n+   clean_up $TMPFILE\n+fi\n \n echo -e \"Verified hashes of \\n$FILES\"\n ",
        "previous_filename": "contrib/verifysfbinaries/verify.sh"
      },
      {
        "sha": "8c038865bdaff592aed1cd8757733b4a78e23507",
        "filename": "contrib/verifysfbinaries/README.md",
        "status": "removed",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9df179d2e3abdee7d1f255d9be17c8b72dff06a/contrib/verifysfbinaries/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9df179d2e3abdee7d1f255d9be17c8b72dff06a/contrib/verifysfbinaries/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verifysfbinaries/README.md?ref=e9df179d2e3abdee7d1f255d9be17c8b72dff06a",
        "patch": "@@ -1,6 +0,0 @@\n-### Verify SF Binaries ###\n-This script attempts to download the signature file `SHA256SUMS.asc` from https://bitcoin.org.\n-\n-It first checks if the signature passes, and then downloads the files specified in the file, and checks if the hashes of these files match those that are specified in the signature file.\n-\n-The script returns 0 if everything passes the checks. It returns 1 if either the signature check or the hash check doesn't pass. If an error occurs the return value is 2.\n\\ No newline at end of file"
      },
      {
        "sha": "3dea5e3c1440cc6ddb7b57530e577bed5bf461e0",
        "filename": "contrib/zmq/zmq_sub.py",
        "status": "modified",
        "additions": 12,
        "deletions": 5,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/zmq/zmq_sub.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/contrib/zmq/zmq_sub.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/zmq/zmq_sub.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -1,8 +1,12 @@\n #!/usr/bin/env python2\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n import array\n import binascii\n import zmq\n+import struct\n \n port = 28332\n \n@@ -19,18 +23,21 @@\n         msg = zmqSubSocket.recv_multipart()\n         topic = str(msg[0])\n         body = msg[1]\n-\n+        sequence = \"Unknown\";\n+        if len(msg[-1]) == 4:\n+          msgSequence = struct.unpack('<I', msg[-1])[-1]\n+          sequence = str(msgSequence)\n         if topic == \"hashblock\":\n-            print \"- HASH BLOCK -\"\n+            print '- HASH BLOCK ('+sequence+') -'\n             print binascii.hexlify(body)\n         elif topic == \"hashtx\":\n-            print '- HASH TX -'\n+            print '- HASH TX  ('+sequence+') -'\n             print binascii.hexlify(body)\n         elif topic == \"rawblock\":\n-            print \"- RAW BLOCK HEADER -\"\n+            print '- RAW BLOCK HEADER ('+sequence+') -'\n             print binascii.hexlify(body[:80])\n         elif topic == \"rawtx\":\n-            print '- RAW TX -'\n+            print '- RAW TX ('+sequence+') -'\n             print binascii.hexlify(body)\n \n except KeyboardInterrupt:"
      },
      {
        "sha": "3cb4b9ac15557906446b56ab75eb2d23ec0187e9",
        "filename": "depends/.gitignore",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/depends/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/depends/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/.gitignore?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -7,3 +7,4 @@ x86_64*\n i686*\n mips*\n arm*\n+aarch64*"
      },
      {
        "sha": "dedb0674cf14974702cefc520b4ad0da309a940b",
        "filename": "depends/Makefile",
        "status": "modified",
        "additions": 27,
        "deletions": 7,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/depends/Makefile",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/depends/Makefile",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/Makefile?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -15,6 +15,8 @@ BASEDIR = $(CURDIR)\n HASH_LENGTH:=11\n DOWNLOAD_CONNECT_TIMEOUT:=10\n DOWNLOAD_RETRIES:=3\n+HOST_ID_SALT ?= salt\n+BUILD_ID_SALT ?= salt\n \n host:=$(BUILD)\n ifneq ($(HOST),)\n@@ -73,13 +75,31 @@ include builders/$(build_os).mk\n include builders/default.mk\n include packages/packages.mk\n \n-qt_packages_$(NO_QT) = $(qt_packages) $(qt_$(host_os)_packages)\n-qt_native_packages_$(NO_QT) = $(qt_native_packages)\n+build_id_string:=$(BUILD_ID_SALT)\n+build_id_string+=$(shell $(build_CC) --version 2>/dev/null)\n+build_id_string+=$(shell $(build_AR) --version 2>/dev/null)\n+build_id_string+=$(shell $(build_CXX) --version 2>/dev/null)\n+build_id_string+=$(shell $(build_RANLIB) --version 2>/dev/null)\n+build_id_string+=$(shell $(build_STRIP) --version 2>/dev/null)\n+\n+$(host_arch)_$(host_os)_id_string:=$(HOST_ID_SALT)\n+$(host_arch)_$(host_os)_id_string+=$(shell $(host_CC) --version 2>/dev/null)\n+$(host_arch)_$(host_os)_id_string+=$(shell $(host_AR) --version 2>/dev/null)\n+$(host_arch)_$(host_os)_id_string+=$(shell $(host_CXX) --version 2>/dev/null)\n+$(host_arch)_$(host_os)_id_string+=$(shell $(host_RANLIB) --version 2>/dev/null)\n+$(host_arch)_$(host_os)_id_string+=$(shell $(host_STRIP) --version 2>/dev/null)\n+\n+qt_packages_$(NO_QT) = $(qt_packages) $(qt_$(host_os)_packages) $(qt_$(host_arch)_$(host_os)_packages)\n wallet_packages_$(NO_WALLET) = $(wallet_packages)\n upnp_packages_$(NO_UPNP) = $(upnp_packages)\n \n packages += $($(host_arch)_$(host_os)_packages) $($(host_os)_packages) $(qt_packages_) $(wallet_packages_) $(upnp_packages_)\n-native_packages += $($(host_arch)_$(host_os)_native_packages) $($(host_os)_native_packages) $(qt_native_packages_)\n+native_packages += $($(host_arch)_$(host_os)_native_packages) $($(host_os)_native_packages)\n+\n+ifneq ($(qt_packages_),)\n+native_packages += $(qt_native_packages)\n+endif\n+\n all_packages = $(packages) $(native_packages)\n \n meta_depends = Makefile funcs.mk builders/default.mk hosts/default.mk hosts/$(host_os).mk builders/$(build_os).mk\n@@ -90,7 +110,7 @@ include funcs.mk\n \n toolchain_path=$($($(host_arch)_$(host_os)_native_toolchain)_prefixbin)\n final_build_id_long+=$(shell $(build_SHA256SUM) config.site.in)\n-final_build_id+=$(shell echo -n $(final_build_id_long) | $(build_SHA256SUM) | cut -c-$(HASH_LENGTH))\n+final_build_id+=$(shell echo -n \"$(final_build_id_long)\" | $(build_SHA256SUM) | cut -c-$(HASH_LENGTH))\n $(host_prefix)/.stamp_$(final_build_id): $(native_packages) $(packages)\n \t$(AT)rm -rf $(@D)\n \t$(AT)mkdir -p $(@D)\n@@ -131,9 +151,9 @@ endef\n \n define check_or_remove_sources\n   mkdir -p $($(package)_source_dir); cd $($(package)_source_dir); \\\n-  $(build_SHA256SUM) -c $($(package)_fetched) >/dev/null 2>/dev/null || \\\n-    ( if test -f $($(package)_all_sources); then echo \"Checksum missing or mismatched for $(package) source. Forcing re-download.\"; fi; \\\n-      rm -f $($(package)_all_sources) $($(1)_fetched))\n+  test -f $($(package)_fetched) && ( $(build_SHA256SUM) -c $($(package)_fetched) >/dev/null 2>/dev/null || \\\n+    ( echo \"Checksum missing or mismatched for $(package) source. Forcing re-download.\"; \\\n+      rm -f $($(package)_all_sources) $($(1)_fetched))) || true\n endef\n \n check-packages:"
      },
      {
        "sha": "6053c531b46a7130fbc0f5b308d1e7258ecbbe80",
        "filename": "depends/README.md",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/depends/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/depends/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/README.md?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -23,7 +23,8 @@ Common `host-platform-triplets` for cross compilation are:\n - `i686-w64-mingw32` for Win32\n - `x86_64-w64-mingw32` for Win64\n - `x86_64-apple-darwin11` for MacOSX\n-- `arm-linux-gnueabihf` for Linux ARM\n+- `arm-linux-gnueabihf` for Linux ARM 32 bit\n+- `aarch64-linux-gnu` for Linux ARM 64 bit\n \n No other options are needed, the paths are automatically configured.\n \n@@ -38,6 +39,8 @@ The following can be set when running make: make FOO=bar\n     NO_WALLET: Don't download/build/cache libs needed to enable the wallet\n     NO_UPNP: Don't download/build/cache packages needed for enabling upnp\n     DEBUG: disable some optimizations and enable more runtime checking\n+    HOST_ID_SALT: Optional salt to use when generating host package ids\n+    BUILD_ID_SALT: Optional salt to use when generating build package ids\n \n If some packages are not built, for example `make NO_WALLET=1`, the appropriate\n options will be passed to bitcoin's configure. In this case, `--disable-wallet`."
      },
      {
        "sha": "27f550ab036aeea9ced0a003d40aceaff5e3dc9c",
        "filename": "depends/builders/darwin.mk",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/depends/builders/darwin.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/depends/builders/darwin.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/builders/darwin.mk?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -7,11 +7,11 @@ build_darwin_OTOOL: = $(shell xcrun -f otool)\n build_darwin_NM: = $(shell xcrun -f nm)\n build_darwin_INSTALL_NAME_TOOL:=$(shell xcrun -f install_name_tool)\n build_darwin_SHA256SUM = shasum -a 256\n-build_darwin_DOWNLOAD = curl --connect-timeout $(DOWNLOAD_CONNECT_TIMEOUT) --retry $(DOWNLOAD_RETRIES) -L -o\n+build_darwin_DOWNLOAD = curl --location --fail --connect-timeout $(DOWNLOAD_CONNECT_TIMEOUT) --retry $(DOWNLOAD_RETRIES) -o\n \n #darwin host on darwin builder. overrides darwin host preferences.\n darwin_CC=$(shell xcrun -f clang) -mmacosx-version-min=$(OSX_MIN_VERSION)\n-darwin_CXX:=$(shell xcrun -f clang++) -mmacosx-version-min=$(OSX_MIN_VERSION)\n+darwin_CXX:=$(shell xcrun -f clang++) -mmacosx-version-min=$(OSX_MIN_VERSION) -stdlib=libc++\n darwin_AR:=$(shell xcrun -f ar)\n darwin_RANLIB:=$(shell xcrun -f ranlib)\n darwin_STRIP:=$(shell xcrun -f strip)"
      },
      {
        "sha": "b03f42401047adf98bc997a7eece42c2c79a2c2c",
        "filename": "depends/builders/linux.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/depends/builders/linux.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/depends/builders/linux.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/builders/linux.mk?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -1,2 +1,2 @@\n build_linux_SHA256SUM = sha256sum\n-build_linux_DOWNLOAD = wget --timeout=$(DOWNLOAD_CONNECT_TIMEOUT) --tries=$(DOWNLOAD_RETRIES) -nv -O\n+build_linux_DOWNLOAD = curl --location --fail --connect-timeout $(DOWNLOAD_CONNECT_TIMEOUT) --retry $(DOWNLOAD_RETRIES) -o"
      },
      {
        "sha": "c4bd827a7bedcf6f78866a27bf01d896c047b516",
        "filename": "depends/config.guess",
        "status": "modified",
        "additions": 69,
        "deletions": 57,
        "changes": 126,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/depends/config.guess",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/depends/config.guess",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/config.guess?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -1,8 +1,8 @@\n #! /bin/sh\n # Attempt to guess a canonical system name.\n-#   Copyright 1992-2015 Free Software Foundation, Inc.\n+#   Copyright 1992-2016 Free Software Foundation, Inc.\n \n-timestamp='2015-10-21'\n+timestamp='2016-05-15'\n \n # This file is free software; you can redistribute it and/or modify it\n # under the terms of the GNU General Public License as published by\n@@ -27,7 +27,7 @@ timestamp='2015-10-21'\n # Originally written by Per Bothner; maintained since 2000 by Ben Elliston.\n #\n # You can get the latest version of this script from:\n-# http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.guess;hb=HEAD\n+# http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.guess\n #\n # Please send patches to <config-patches@gnu.org>.\n \n@@ -50,7 +50,7 @@ version=\"\\\n GNU config.guess ($timestamp)\n \n Originally written by Per Bothner.\n-Copyright 1992-2015 Free Software Foundation, Inc.\n+Copyright 1992-2016 Free Software Foundation, Inc.\n \n This is free software; see the source for copying conditions.  There is NO\n warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\"\n@@ -186,9 +186,12 @@ case \"${UNAME_MACHINE}:${UNAME_SYSTEM}:${UNAME_RELEASE}:${UNAME_VERSION}\" in\n \t    *) machine=${UNAME_MACHINE_ARCH}-unknown ;;\n \tesac\n \t# The Operating System including object format, if it has switched\n-\t# to ELF recently, or will in the future.\n+\t# to ELF recently (or will in the future) and ABI.\n \tcase \"${UNAME_MACHINE_ARCH}\" in\n-\t    arm*|earm*|i386|m68k|ns32k|sh3*|sparc|vax)\n+\t    earm*)\n+\t\tos=netbsdelf\n+\t\t;;\n+\t    arm*|i386|m68k|ns32k|sh3*|sparc|vax)\n \t\teval $set_cc_for_build\n \t\tif echo __ELF__ | $CC_FOR_BUILD -E - 2>/dev/null \\\n \t\t\t| grep -q __ELF__\n@@ -237,6 +240,10 @@ case \"${UNAME_MACHINE}:${UNAME_SYSTEM}:${UNAME_RELEASE}:${UNAME_VERSION}\" in\n \tUNAME_MACHINE_ARCH=`arch | sed 's/OpenBSD.//'`\n \techo ${UNAME_MACHINE_ARCH}-unknown-openbsd${UNAME_RELEASE}\n \texit ;;\n+    *:LibertyBSD:*:*)\n+\tUNAME_MACHINE_ARCH=`arch | sed 's/^.*BSD\\.//'`\n+\techo ${UNAME_MACHINE_ARCH}-unknown-libertybsd${UNAME_RELEASE}\n+\texit ;;\n     *:ekkoBSD:*:*)\n \techo ${UNAME_MACHINE}-unknown-ekkobsd${UNAME_RELEASE}\n \texit ;;\n@@ -268,42 +275,42 @@ case \"${UNAME_MACHINE}:${UNAME_SYSTEM}:${UNAME_RELEASE}:${UNAME_VERSION}\" in\n \tALPHA_CPU_TYPE=`/usr/sbin/psrinfo -v | sed -n -e 's/^  The alpha \\(.*\\) processor.*$/\\1/p' | head -n 1`\n \tcase \"$ALPHA_CPU_TYPE\" in\n \t    \"EV4 (21064)\")\n-\t\tUNAME_MACHINE=\"alpha\" ;;\n+\t\tUNAME_MACHINE=alpha ;;\n \t    \"EV4.5 (21064)\")\n-\t\tUNAME_MACHINE=\"alpha\" ;;\n+\t\tUNAME_MACHINE=alpha ;;\n \t    \"LCA4 (21066/21068)\")\n-\t\tUNAME_MACHINE=\"alpha\" ;;\n+\t\tUNAME_MACHINE=alpha ;;\n \t    \"EV5 (21164)\")\n-\t\tUNAME_MACHINE=\"alphaev5\" ;;\n+\t\tUNAME_MACHINE=alphaev5 ;;\n \t    \"EV5.6 (21164A)\")\n-\t\tUNAME_MACHINE=\"alphaev56\" ;;\n+\t\tUNAME_MACHINE=alphaev56 ;;\n \t    \"EV5.6 (21164PC)\")\n-\t\tUNAME_MACHINE=\"alphapca56\" ;;\n+\t\tUNAME_MACHINE=alphapca56 ;;\n \t    \"EV5.7 (21164PC)\")\n-\t\tUNAME_MACHINE=\"alphapca57\" ;;\n+\t\tUNAME_MACHINE=alphapca57 ;;\n \t    \"EV6 (21264)\")\n-\t\tUNAME_MACHINE=\"alphaev6\" ;;\n+\t\tUNAME_MACHINE=alphaev6 ;;\n \t    \"EV6.7 (21264A)\")\n-\t\tUNAME_MACHINE=\"alphaev67\" ;;\n+\t\tUNAME_MACHINE=alphaev67 ;;\n \t    \"EV6.8CB (21264C)\")\n-\t\tUNAME_MACHINE=\"alphaev68\" ;;\n+\t\tUNAME_MACHINE=alphaev68 ;;\n \t    \"EV6.8AL (21264B)\")\n-\t\tUNAME_MACHINE=\"alphaev68\" ;;\n+\t\tUNAME_MACHINE=alphaev68 ;;\n \t    \"EV6.8CX (21264D)\")\n-\t\tUNAME_MACHINE=\"alphaev68\" ;;\n+\t\tUNAME_MACHINE=alphaev68 ;;\n \t    \"EV6.9A (21264/EV69A)\")\n-\t\tUNAME_MACHINE=\"alphaev69\" ;;\n+\t\tUNAME_MACHINE=alphaev69 ;;\n \t    \"EV7 (21364)\")\n-\t\tUNAME_MACHINE=\"alphaev7\" ;;\n+\t\tUNAME_MACHINE=alphaev7 ;;\n \t    \"EV7.9 (21364A)\")\n-\t\tUNAME_MACHINE=\"alphaev79\" ;;\n+\t\tUNAME_MACHINE=alphaev79 ;;\n \tesac\n \t# A Pn.n version is a patched version.\n \t# A Vn.n version is a released version.\n \t# A Tn.n version is a released field test version.\n \t# A Xn.n version is an unreleased experimental baselevel.\n \t# 1.2 uses \"1.2\" for uname -r.\n-\techo ${UNAME_MACHINE}-dec-osf`echo ${UNAME_RELEASE} | sed -e 's/^[PVTX]//' | tr 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'`\n+\techo ${UNAME_MACHINE}-dec-osf`echo ${UNAME_RELEASE} | sed -e 's/^[PVTX]//' | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz`\n \t# Reset EXIT trap before exiting to avoid spurious non-zero exit code.\n \texitcode=$?\n \ttrap '' 0\n@@ -376,16 +383,16 @@ case \"${UNAME_MACHINE}:${UNAME_SYSTEM}:${UNAME_RELEASE}:${UNAME_VERSION}\" in\n \texit ;;\n     i86pc:SunOS:5.*:* | i86xen:SunOS:5.*:*)\n \teval $set_cc_for_build\n-\tSUN_ARCH=\"i386\"\n+\tSUN_ARCH=i386\n \t# If there is a compiler, see if it is configured for 64-bit objects.\n \t# Note that the Sun cc does not turn __LP64__ into 1 like gcc does.\n \t# This test works for both compilers.\n-\tif [ \"$CC_FOR_BUILD\" != 'no_compiler_found' ]; then\n+\tif [ \"$CC_FOR_BUILD\" != no_compiler_found ]; then\n \t    if (echo '#ifdef __amd64'; echo IS_64BIT_ARCH; echo '#endif') | \\\n-\t\t(CCOPTS= $CC_FOR_BUILD -E - 2>/dev/null) | \\\n+\t\t(CCOPTS=\"\" $CC_FOR_BUILD -E - 2>/dev/null) | \\\n \t\tgrep IS_64BIT_ARCH >/dev/null\n \t    then\n-\t\tSUN_ARCH=\"x86_64\"\n+\t\tSUN_ARCH=x86_64\n \t    fi\n \tfi\n \techo ${SUN_ARCH}-pc-solaris2`echo ${UNAME_RELEASE}|sed -e 's/[^.]*//'`\n@@ -410,7 +417,7 @@ case \"${UNAME_MACHINE}:${UNAME_SYSTEM}:${UNAME_RELEASE}:${UNAME_VERSION}\" in\n \texit ;;\n     sun*:*:4.2BSD:*)\n \tUNAME_RELEASE=`(sed 1q /etc/motd | awk '{print substr($5,1,3)}') 2>/dev/null`\n-\ttest \"x${UNAME_RELEASE}\" = \"x\" && UNAME_RELEASE=3\n+\ttest \"x${UNAME_RELEASE}\" = x && UNAME_RELEASE=3\n \tcase \"`/bin/arch`\" in\n \t    sun3)\n \t\techo m68k-sun-sunos${UNAME_RELEASE}\n@@ -635,13 +642,13 @@ EOF\n \t\t    sc_cpu_version=`/usr/bin/getconf SC_CPU_VERSION 2>/dev/null`\n \t\t    sc_kernel_bits=`/usr/bin/getconf SC_KERNEL_BITS 2>/dev/null`\n \t\t    case \"${sc_cpu_version}\" in\n-\t\t      523) HP_ARCH=\"hppa1.0\" ;; # CPU_PA_RISC1_0\n-\t\t      528) HP_ARCH=\"hppa1.1\" ;; # CPU_PA_RISC1_1\n+\t\t      523) HP_ARCH=hppa1.0 ;; # CPU_PA_RISC1_0\n+\t\t      528) HP_ARCH=hppa1.1 ;; # CPU_PA_RISC1_1\n \t\t      532)                      # CPU_PA_RISC2_0\n \t\t\tcase \"${sc_kernel_bits}\" in\n-\t\t\t  32) HP_ARCH=\"hppa2.0n\" ;;\n-\t\t\t  64) HP_ARCH=\"hppa2.0w\" ;;\n-\t\t\t  '') HP_ARCH=\"hppa2.0\" ;;   # HP-UX 10.20\n+\t\t\t  32) HP_ARCH=hppa2.0n ;;\n+\t\t\t  64) HP_ARCH=hppa2.0w ;;\n+\t\t\t  '') HP_ARCH=hppa2.0 ;;   # HP-UX 10.20\n \t\t\tesac ;;\n \t\t    esac\n \t\tfi\n@@ -680,11 +687,11 @@ EOF\n \t\t    exit (0);\n \t\t}\n EOF\n-\t\t    (CCOPTS= $CC_FOR_BUILD -o $dummy $dummy.c 2>/dev/null) && HP_ARCH=`$dummy`\n+\t\t    (CCOPTS=\"\" $CC_FOR_BUILD -o $dummy $dummy.c 2>/dev/null) && HP_ARCH=`$dummy`\n \t\t    test -z \"$HP_ARCH\" && HP_ARCH=hppa\n \t\tfi ;;\n \tesac\n-\tif [ ${HP_ARCH} = \"hppa2.0w\" ]\n+\tif [ ${HP_ARCH} = hppa2.0w ]\n \tthen\n \t    eval $set_cc_for_build\n \n@@ -697,12 +704,12 @@ EOF\n \t    # $ CC_FOR_BUILD=\"cc +DA2.0w\" ./config.guess\n \t    # => hppa64-hp-hpux11.23\n \n-\t    if echo __LP64__ | (CCOPTS= $CC_FOR_BUILD -E - 2>/dev/null) |\n+\t    if echo __LP64__ | (CCOPTS=\"\" $CC_FOR_BUILD -E - 2>/dev/null) |\n \t\tgrep -q __LP64__\n \t    then\n-\t\tHP_ARCH=\"hppa2.0w\"\n+\t\tHP_ARCH=hppa2.0w\n \t    else\n-\t\tHP_ARCH=\"hppa64\"\n+\t\tHP_ARCH=hppa64\n \t    fi\n \tfi\n \techo ${HP_ARCH}-hp-hpux${HPUX_REV}\n@@ -807,14 +814,14 @@ EOF\n \techo craynv-cray-unicosmp${UNAME_RELEASE} | sed -e 's/\\.[^.]*$/.X/'\n \texit ;;\n     F30[01]:UNIX_System_V:*:* | F700:UNIX_System_V:*:*)\n-\tFUJITSU_PROC=`uname -m | tr 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'`\n-\tFUJITSU_SYS=`uname -p | tr 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz' | sed -e 's/\\///'`\n+\tFUJITSU_PROC=`uname -m | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz`\n+\tFUJITSU_SYS=`uname -p | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz | sed -e 's/\\///'`\n \tFUJITSU_REL=`echo ${UNAME_RELEASE} | sed -e 's/ /_/'`\n \techo \"${FUJITSU_PROC}-fujitsu-${FUJITSU_SYS}${FUJITSU_REL}\"\n \texit ;;\n     5000:UNIX_System_V:4.*:*)\n-\tFUJITSU_SYS=`uname -p | tr 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz' | sed -e 's/\\///'`\n-\tFUJITSU_REL=`echo ${UNAME_RELEASE} | tr 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz' | sed -e 's/ /_/'`\n+\tFUJITSU_SYS=`uname -p | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz | sed -e 's/\\///'`\n+\tFUJITSU_REL=`echo ${UNAME_RELEASE} | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz | sed -e 's/ /_/'`\n \techo \"sparc-fujitsu-${FUJITSU_SYS}${FUJITSU_REL}\"\n \texit ;;\n     i*86:BSD/386:*:* | i*86:BSD/OS:*:* | *:Ascend\\ Embedded/OS:*:*)\n@@ -896,7 +903,7 @@ EOF\n \texit ;;\n     *:GNU/*:*:*)\n \t# other systems with GNU libc and userland\n-\techo ${UNAME_MACHINE}-unknown-`echo ${UNAME_SYSTEM} | sed 's,^[^/]*/,,' | tr '[A-Z]' '[a-z]'``echo ${UNAME_RELEASE}|sed -e 's/[-(].*//'`-${LIBC}\n+\techo ${UNAME_MACHINE}-unknown-`echo ${UNAME_SYSTEM} | sed 's,^[^/]*/,,' | tr \"[:upper:]\" \"[:lower:]\"``echo ${UNAME_RELEASE}|sed -e 's/[-(].*//'`-${LIBC}\n \texit ;;\n     i*86:Minix:*:*)\n \techo ${UNAME_MACHINE}-pc-minix\n@@ -919,7 +926,7 @@ EOF\n \t  EV68*) UNAME_MACHINE=alphaev68 ;;\n \tesac\n \tobjdump --private-headers /bin/sh | grep -q ld.so.1\n-\tif test \"$?\" = 0 ; then LIBC=\"gnulibc1\" ; fi\n+\tif test \"$?\" = 0 ; then LIBC=gnulibc1 ; fi\n \techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n \texit ;;\n     arc:Linux:*:* | arceb:Linux:*:*)\n@@ -1272,6 +1279,9 @@ EOF\n     SX-8R:SUPER-UX:*:*)\n \techo sx8r-nec-superux${UNAME_RELEASE}\n \texit ;;\n+    SX-ACE:SUPER-UX:*:*)\n+\techo sxace-nec-superux${UNAME_RELEASE}\n+\texit ;;\n     Power*:Rhapsody:*:*)\n \techo powerpc-apple-rhapsody${UNAME_RELEASE}\n \texit ;;\n@@ -1285,9 +1295,9 @@ EOF\n \t    UNAME_PROCESSOR=powerpc\n \tfi\n \tif test `echo \"$UNAME_RELEASE\" | sed -e 's/\\..*//'` -le 10 ; then\n-\t    if [ \"$CC_FOR_BUILD\" != 'no_compiler_found' ]; then\n+\t    if [ \"$CC_FOR_BUILD\" != no_compiler_found ]; then\n \t\tif (echo '#ifdef __LP64__'; echo IS_64BIT_ARCH; echo '#endif') | \\\n-\t\t    (CCOPTS= $CC_FOR_BUILD -E - 2>/dev/null) | \\\n+\t\t    (CCOPTS=\"\" $CC_FOR_BUILD -E - 2>/dev/null) | \\\n \t\t    grep IS_64BIT_ARCH >/dev/null\n \t\tthen\n \t\t    case $UNAME_PROCESSOR in\n@@ -1309,7 +1319,7 @@ EOF\n \texit ;;\n     *:procnto*:*:* | *:QNX:[0123456789]*:*)\n \tUNAME_PROCESSOR=`uname -p`\n-\tif test \"$UNAME_PROCESSOR\" = \"x86\"; then\n+\tif test \"$UNAME_PROCESSOR\" = x86; then\n \t\tUNAME_PROCESSOR=i386\n \t\tUNAME_MACHINE=pc\n \tfi\n@@ -1340,7 +1350,7 @@ EOF\n \t# \"uname -m\" is not consistent, so use $cputype instead. 386\n \t# is converted to i386 for consistency with other x86\n \t# operating systems.\n-\tif test \"$cputype\" = \"386\"; then\n+\tif test \"$cputype\" = 386; then\n \t    UNAME_MACHINE=i386\n \telse\n \t    UNAME_MACHINE=\"$cputype\"\n@@ -1382,7 +1392,7 @@ EOF\n \techo i386-pc-xenix\n \texit ;;\n     i*86:skyos:*:*)\n-\techo ${UNAME_MACHINE}-pc-skyos`echo ${UNAME_RELEASE}` | sed -e 's/ .*$//'\n+\techo ${UNAME_MACHINE}-pc-skyos`echo ${UNAME_RELEASE} | sed -e 's/ .*$//'`\n \texit ;;\n     i*86:rdos:*:*)\n \techo ${UNAME_MACHINE}-pc-rdos\n@@ -1393,23 +1403,25 @@ EOF\n     x86_64:VMkernel:*:*)\n \techo ${UNAME_MACHINE}-unknown-esx\n \texit ;;\n+    amd64:Isilon\\ OneFS:*:*)\n+\techo x86_64-unknown-onefs\n+\texit ;;\n esac\n \n cat >&2 <<EOF\n $0: unable to guess system type\n \n-This script, last modified $timestamp, has failed to recognize\n-the operating system you are using. It is advised that you\n-download the most up to date version of the config scripts from\n+This script (version $timestamp), has failed to recognize the\n+operating system you are using. If your script is old, overwrite\n+config.guess and config.sub with the latest versions from:\n \n-  http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.guess;hb=HEAD\n+  http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.guess\n and\n-  http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.sub;hb=HEAD\n+  http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.sub\n \n-If the version you run ($0) is already up to date, please\n-send the following data and any information you think might be\n-pertinent to <config-patches@gnu.org> in order to provide the needed\n-information to handle your system.\n+If $0 has already been updated, send the following data and any\n+information you think might be pertinent to config-patches@gnu.org to\n+provide the necessary information to handle your system.\n \n config.guess timestamp = $timestamp\n "
      },
      {
        "sha": "27e3aedd8ed4ff3399a878bcccc41eb7f753636c",
        "filename": "depends/config.site.in",
        "status": "modified",
        "additions": 16,
        "deletions": 16,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/depends/config.site.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/depends/config.site.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/config.site.in?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -1,24 +1,23 @@\n+depends_prefix=\"`dirname ${ac_site_file}`/..\"\n+\n cross_compiling=maybe\n host_alias=@HOST@\n ac_tool_prefix=${host_alias}-\n \n if test -z $with_boost; then\n-  with_boost=$prefix\n+  with_boost=$depends_prefix\n fi\n if test -z $with_qt_plugindir; then\n-  with_qt_plugindir=$prefix/plugins\n+  with_qt_plugindir=$depends_prefix/plugins\n fi\n if test -z $with_qt_translationdir; then\n-  with_qt_translationdir=$prefix/translations\n+  with_qt_translationdir=$depends_prefix/translations\n fi\n if test -z $with_qt_bindir; then\n-  with_qt_bindir=$prefix/native/bin\n+  with_qt_bindir=$depends_prefix/native/bin\n fi\n if test -z $with_protoc_bindir; then\n-  with_protoc_bindir=$prefix/native/bin\n-fi\n-if test -z $with_comparison_tool; then\n-  with_comparison_tool=$prefix/native/share/BitcoindComparisonTool_jar/BitcoindComparisonTool.jar\n+  with_protoc_bindir=$depends_prefix/native/bin\n fi\n \n \n@@ -41,31 +40,32 @@ fi\n \n if test x@host_os@ = xmingw32; then\n   if test -z $with_qt_incdir; then\n-    with_qt_incdir=$prefix/include\n+    with_qt_incdir=$depends_prefix/include\n   fi\n   if test -z $with_qt_libdir; then\n-    with_qt_libdir=$prefix/lib\n+    with_qt_libdir=$depends_prefix/lib\n   fi\n fi\n \n-PATH=$prefix/native/bin:$PATH\n+PATH=$depends_prefix/native/bin:$PATH\n PKG_CONFIG=\"`which pkg-config` --static\"\n \n # These two need to remain exported because pkg-config does not see them\n # otherwise. That means they must be unexported at the end of configure.ac to\n # avoid ruining the cache. Sigh.\n \n-export PKG_CONFIG_LIBDIR=$prefix/lib/pkgconfig\n-export PKG_CONFIG_PATH=$prefix/share/pkgconfig\n+export PKG_CONFIG_LIBDIR=$depends_prefix/lib/pkgconfig\n+export PKG_CONFIG_PATH=$depends_prefix/share/pkgconfig\n \n-CPPFLAGS=\"-I$prefix/include/ $CPPFLAGS\"\n-LDFLAGS=\"-L$prefix/lib $LDFLAGS\"\n+CPPFLAGS=\"-I$depends_prefix/include/ $CPPFLAGS\"\n+LDFLAGS=\"-L$depends_prefix/lib $LDFLAGS\"\n \n CC=\"@CC@\"\n CXX=\"@CXX@\"\n OBJC=\"${CC}\"\n OBJCXX=\"${CXX}\"\n-CCACHE=$prefix/native/bin/ccache\n+CCACHE=$depends_prefix/native/bin/ccache\n+PYTHONPATH=$depends_prefix/native/lib/python/dist-packages:$PYTHONPATH\n \n if test -n \"@AR@\"; then\n   AR=@AR@"
      },
      {
        "sha": "6d86a1e2f77b3f89d0ce8efa7741c611aa2d6edf",
        "filename": "depends/config.sub",
        "status": "modified",
        "additions": 11,
        "deletions": 9,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/depends/config.sub",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/depends/config.sub",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/config.sub?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -1,8 +1,8 @@\n #! /bin/sh\n # Configuration validation subroutine script.\n-#   Copyright 1992-2015 Free Software Foundation, Inc.\n+#   Copyright 1992-2016 Free Software Foundation, Inc.\n \n-timestamp='2015-08-20'\n+timestamp='2016-05-10'\n \n # This file is free software; you can redistribute it and/or modify it\n # under the terms of the GNU General Public License as published by\n@@ -33,7 +33,7 @@ timestamp='2015-08-20'\n # Otherwise, we print the canonical config type on stdout and succeed.\n \n # You can get the latest version of this script from:\n-# http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.sub;hb=HEAD\n+# http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.sub\n \n # This file is supposed to be the same for all GNU packages\n # and recognize all the CPU types, system types and aliases\n@@ -53,8 +53,7 @@ timestamp='2015-08-20'\n me=`echo \"$0\" | sed -e 's,.*/,,'`\n \n usage=\"\\\n-Usage: $0 [OPTION] CPU-MFR-OPSYS\n-       $0 [OPTION] ALIAS\n+Usage: $0 [OPTION] CPU-MFR-OPSYS or ALIAS\n \n Canonicalize a configuration name.\n \n@@ -68,7 +67,7 @@ Report bugs and patches to <config-patches@gnu.org>.\"\n version=\"\\\n GNU config.sub ($timestamp)\n \n-Copyright 1992-2015 Free Software Foundation, Inc.\n+Copyright 1992-2016 Free Software Foundation, Inc.\n \n This is free software; see the source for copying conditions.  There is NO\n warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\"\n@@ -521,7 +520,7 @@ case $basic_machine in\n \t\tbasic_machine=i386-pc\n \t\tos=-aros\n \t\t;;\n-        asmjs)\n+\tasmjs)\n \t\tbasic_machine=asmjs-unknown\n \t\t;;\n \taux)\n@@ -1383,7 +1382,7 @@ case $os in\n \t      | -nindy* | -vxsim* | -vxworks* | -ebmon* | -hms* | -mvs* \\\n \t      | -clix* | -riscos* | -uniplus* | -iris* | -rtu* | -xenix* \\\n \t      | -hiux* | -386bsd* | -knetbsd* | -mirbsd* | -netbsd* \\\n-\t      | -bitrig* | -openbsd* | -solidbsd* \\\n+\t      | -bitrig* | -openbsd* | -solidbsd* | -libertybsd* \\\n \t      | -ekkobsd* | -kfreebsd* | -freebsd* | -riscix* | -lynxos* \\\n \t      | -bosx* | -nextstep* | -cxux* | -aout* | -elf* | -oabi* \\\n \t      | -ptx* | -coff* | -ecoff* | -winnt* | -domain* | -vsta* \\\n@@ -1399,7 +1398,8 @@ case $os in\n \t      | -os2* | -vos* | -palmos* | -uclinux* | -nucleus* \\\n \t      | -morphos* | -superux* | -rtmk* | -rtmk-nova* | -windiss* \\\n \t      | -powermax* | -dnix* | -nx6 | -nx7 | -sei* | -dragonfly* \\\n-\t      | -skyos* | -haiku* | -rdos* | -toppers* | -drops* | -es* | -tirtos*)\n+\t      | -skyos* | -haiku* | -rdos* | -toppers* | -drops* | -es* \\\n+\t      | -onefs* | -tirtos* | -phoenix*)\n \t# Remember, each alternative MUST END IN *, to match a version number.\n \t\t;;\n \t-qnx*)\n@@ -1531,6 +1531,8 @@ case $os in\n \t\t;;\n \t-nacl*)\n \t\t;;\n+\t-ios)\n+\t\t;;\n \t-none)\n \t\t;;\n \t*)"
      },
      {
        "sha": "15e404e42dcf372e8d75f9c3945cf4bad9a21837",
        "filename": "depends/funcs.mk",
        "status": "modified",
        "additions": 11,
        "deletions": 7,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/depends/funcs.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/depends/funcs.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/funcs.mk?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -19,15 +19,19 @@ define int_get_all_dependencies\n $(sort $(foreach dep,$(2),$(2) $(call int_get_all_dependencies,$(1),$($(dep)_dependencies))))\n endef\n \n-define fetch_file\n-(test -f $$($(1)_source_dir)/$(4) || \\\n-  ( mkdir -p $$($(1)_download_dir) && echo Fetching $(1)... && \\\n-  ( $(build_DOWNLOAD) \"$$($(1)_download_dir)/$(4).temp\" \"$(2)/$(3)\" || \\\n-    $(build_DOWNLOAD) \"$$($(1)_download_dir)/$(4).temp\" \"$(FALLBACK_DOWNLOAD_PATH)/$(3)\" ) && \\\n+define fetch_file_inner\n+    ( mkdir -p $$($(1)_download_dir) && echo Fetching $(3) from $(2) && \\\n+    $(build_DOWNLOAD) \"$$($(1)_download_dir)/$(4).temp\" \"$(2)/$(3)\" && \\\n     echo \"$(5)  $$($(1)_download_dir)/$(4).temp\" > $$($(1)_download_dir)/.$(4).hash && \\\n     $(build_SHA256SUM) -c $$($(1)_download_dir)/.$(4).hash && \\\n     mv $$($(1)_download_dir)/$(4).temp $$($(1)_source_dir)/$(4) && \\\n-    rm -rf $$($(1)_download_dir) ))\n+    rm -rf $$($(1)_download_dir) )\n+endef\n+\n+define fetch_file\n+    ( test -f $$($(1)_source_dir)/$(4) || \\\n+    ( $(call fetch_file_inner,$(1),$(2),$(3),$(4),$(5)) || \\\n+      $(call fetch_file_inner,$(1),$(FALLBACK_DOWNLOAD_PATH),$(3),$(4),$(5))))\n endef\n \n define int_get_build_recipe_hash\n@@ -39,7 +43,7 @@ define int_get_build_id\n $(eval $(1)_dependencies += $($(1)_$(host_arch)_$(host_os)_dependencies) $($(1)_$(host_os)_dependencies))\n $(eval $(1)_all_dependencies:=$(call int_get_all_dependencies,$(1),$($($(1)_type)_native_toolchain) $($(1)_dependencies)))\n $(foreach dep,$($(1)_all_dependencies),$(eval $(1)_build_id_deps+=$(dep)-$($(dep)_version)-$($(dep)_recipe_hash)))\n-$(eval $(1)_build_id_long:=$(1)-$($(1)_version)-$($(1)_recipe_hash)-$(release_type) $($(1)_build_id_deps))\n+$(eval $(1)_build_id_long:=$(1)-$($(1)_version)-$($(1)_recipe_hash)-$(release_type) $($(1)_build_id_deps) $($($(1)_type)_id_string))\n $(eval $(1)_build_id:=$(shell echo -n \"$($(1)_build_id_long)\" | $(build_SHA256SUM) | cut -c-$(HASH_LENGTH)))\n final_build_id_long+=$($(package)_build_id_long)\n "
      },
      {
        "sha": "985649619ffec384ea55f076ff56fba43fd6c2e8",
        "filename": "depends/hosts/darwin.mk",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/depends/hosts/darwin.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/depends/hosts/darwin.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/hosts/darwin.mk?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -1,9 +1,9 @@\n OSX_MIN_VERSION=10.7\n-OSX_SDK_VERSION=10.9\n+OSX_SDK_VERSION=10.11\n OSX_SDK=$(SDK_PATH)/MacOSX$(OSX_SDK_VERSION).sdk\n-LD64_VERSION=241.9\n+LD64_VERSION=253.9\n darwin_CC=clang -target $(host) -mmacosx-version-min=$(OSX_MIN_VERSION) --sysroot $(OSX_SDK) -mlinker-version=$(LD64_VERSION)\n-darwin_CXX=clang++ -target $(host) -mmacosx-version-min=$(OSX_MIN_VERSION) --sysroot $(OSX_SDK) -mlinker-version=$(LD64_VERSION)\n+darwin_CXX=clang++ -target $(host) -mmacosx-version-min=$(OSX_MIN_VERSION) --sysroot $(OSX_SDK) -mlinker-version=$(LD64_VERSION) -stdlib=libc++\n \n darwin_CFLAGS=-pipe\n darwin_CXXFLAGS=$(darwin_CFLAGS)"
      },
      {
        "sha": "6c9876c2c7c7c0d884f49dd00de58b5a12d42a31",
        "filename": "depends/packages/bdb.mk",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/depends/packages/bdb.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/depends/packages/bdb.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/bdb.mk?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -9,10 +9,13 @@ define $(package)_set_vars\n $(package)_config_opts=--disable-shared --enable-cxx --disable-replication\n $(package)_config_opts_mingw32=--enable-mingw\n $(package)_config_opts_linux=--with-pic\n+$(package)_cxxflags=-std=c++11\n endef\n \n define $(package)_preprocess_cmds\n-  sed -i.old 's/__atomic_compare_exchange/__atomic_compare_exchange_db/' dbinc/atomic.h\n+  sed -i.old 's/__atomic_compare_exchange/__atomic_compare_exchange_db/' dbinc/atomic.h && \\\n+  sed -i.old 's/atomic_init/atomic_init_db/' dbinc/atomic.h mp/mp_region.c mp/mp_mvcc.c mp/mp_fget.c mutex/mut_method.c mutex/mut_tas.c && \\\n+  cp -f $(BASEDIR)/config.guess $(BASEDIR)/config.sub dist\n endef\n \n define $(package)_config_cmds"
      },
      {
        "sha": "4173c0d168f5b21f41b654d49dd12ef830aa3ff1",
        "filename": "depends/packages/boost.mk",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/depends/packages/boost.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/depends/packages/boost.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/boost.mk?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -1,8 +1,8 @@\n package=boost\n-$(package)_version=1_58_0\n-$(package)_download_path=http://sourceforge.net/projects/boost/files/boost/1.58.0\n+$(package)_version=1_61_0\n+$(package)_download_path=https://sourceforge.net/projects/boost/files/boost/1.61.0\n $(package)_file_name=$(package)_$($(package)_version).tar.bz2\n-$(package)_sha256_hash=fdfc204fc33ec79c99b9a74944c3e54bd78be4f7f15e260c0e2700a36dc7d3e5\n+$(package)_sha256_hash=a547bd06c2fd9a71ba1d169d9cf0339da7ebf4753849a8f7d6fdb8feee99b640\n \n define $(package)_set_vars\n $(package)_config_opts_release=variant=release\n@@ -20,7 +20,7 @@ $(package)_archiver_$(host_os)=$($(package)_ar)\n $(package)_toolset_darwin=darwin\n $(package)_archiver_darwin=$($(package)_libtool)\n $(package)_config_libraries=chrono,filesystem,program_options,system,thread,test\n-$(package)_cxxflags=-fvisibility=hidden\n+$(package)_cxxflags=-std=c++11 -fvisibility=hidden\n $(package)_cxxflags_linux=-fPIC\n endef\n "
      },
      {
        "sha": "81a660e83a55714457a6dd21efc9c196d91423b9",
        "filename": "depends/packages/expat.mk",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/depends/packages/expat.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/depends/packages/expat.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/expat.mk?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -1,8 +1,8 @@\n package=expat\n-$(package)_version=2.1.0\n-$(package)_download_path=http://sourceforge.net/projects/expat/files/expat/$($(package)_version)\n-$(package)_file_name=$(package)-$($(package)_version).tar.gz\n-$(package)_sha256_hash=823705472f816df21c8f6aa026dd162b280806838bb55b3432b0fb1fcca7eb86\n+$(package)_version=2.2.0\n+$(package)_download_path=https://downloads.sourceforge.net/project/expat/expat/$($(package)_version)\n+$(package)_file_name=$(package)-$($(package)_version).tar.bz2\n+$(package)_sha256_hash=d9e50ff2d19b3538bd2127902a89987474e1a4db8e43a66a4d1a712ab9a504ff\n \n define $(package)_set_vars\n $(package)_config_opts=--disable-static"
      },
      {
        "sha": "fb97e0b9ec1b3ba6fa0e92b6f3333b716e1295dc",
        "filename": "depends/packages/fontconfig.mk",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/depends/packages/fontconfig.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/depends/packages/fontconfig.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/fontconfig.mk?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -1,8 +1,8 @@\n package=fontconfig\n-$(package)_version=2.11.1\n+$(package)_version=2.12.1\n $(package)_download_path=http://www.freedesktop.org/software/fontconfig/release/\n $(package)_file_name=$(package)-$($(package)_version).tar.bz2\n-$(package)_sha256_hash=dc62447533bca844463a3c3fd4083b57c90f18a70506e7a9f4936b5a1e516a99\n+$(package)_sha256_hash=b449a3e10c47e1d1c7a6ec6e2016cca73d3bd68fbbd4f0ae5cc6b573f7d6c7f3\n $(package)_dependencies=freetype expat\n \n define $(package)_set_vars"
      },
      {
        "sha": "7cea28ff0bbf926f207745a8710fac3f5fd63041",
        "filename": "depends/packages/freetype.mk",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/depends/packages/freetype.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/depends/packages/freetype.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/freetype.mk?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -1,8 +1,8 @@\n package=freetype\n-$(package)_version=2.5.3\n-$(package)_download_path=http://downloads.sourceforge.net/$(package)\n+$(package)_version=2.6.3\n+$(package)_download_path=http://download.savannah.gnu.org/releases/$(package)\n $(package)_file_name=$(package)-$($(package)_version).tar.bz2\n-$(package)_sha256_hash=c0848b29d52ef3ca27ad92e08351f023c5e24ce8cea7d8fe69fc96358e65f75e\n+$(package)_sha256_hash=371e707aa522acf5b15ce93f11183c725b8ed1ee8546d7b3af549863045863a2\n \n define $(package)_set_vars\n   $(package)_config_opts=--without-zlib --without-png --disable-static"
      },
      {
        "sha": "4b02b2eff9eb4b2a2c03bf03469b7ee27db5959e",
        "filename": "depends/packages/libevent.mk",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/depends/packages/libevent.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/depends/packages/libevent.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/libevent.mk?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -3,10 +3,11 @@ $(package)_version=2.0.22\n $(package)_download_path=https://github.com/libevent/libevent/releases/download/release-2.0.22-stable\n $(package)_file_name=$(package)-$($(package)_version)-stable.tar.gz\n $(package)_sha256_hash=71c2c49f0adadacfdbe6332a372c38cf9c8b7895bb73dabeaa53cdcc1d4e1fa3\n-$(package)_patches=reuseaddr.patch\n+$(package)_patches=reuseaddr.patch libevent-2-fixes.patch\n \n define $(package)_preprocess_cmds\n-  patch -p1 < $($(package)_patch_dir)/reuseaddr.patch\n+  patch -p1 < $($(package)_patch_dir)/reuseaddr.patch && \\\n+  patch -p1 < $($(package)_patch_dir)/libevent-2-fixes.patch\n endef\n \n define $(package)_set_vars"
      },
      {
        "sha": "e34cf7be2f1bf42606c5d6549c1f8022f1780cbe",
        "filename": "depends/packages/miniupnpc.mk",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/depends/packages/miniupnpc.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/depends/packages/miniupnpc.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/miniupnpc.mk?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -1,12 +1,12 @@\n package=miniupnpc\n-$(package)_version=1.9.20151008\n+$(package)_version=2.0\n $(package)_download_path=http://miniupnp.free.fr/files\n $(package)_file_name=$(package)-$($(package)_version).tar.gz\n-$(package)_sha256_hash=e444ac3b587ce82709c4d0cfca1fe71f44f9fc433e9f946b12b9e1bfe667a633\n+$(package)_sha256_hash=d434ceb8986efbe199c5ca53f90ed53eab290b1e6d0530b717eb6fa49d61f93b\n \n define $(package)_set_vars\n $(package)_build_opts=CC=\"$($(package)_cc)\"\n-$(package)_build_opts_darwin=OS=Darwin\n+$(package)_build_opts_darwin=OS=Darwin LIBTOOL=\"$($(package)_libtool)\"\n $(package)_build_opts_mingw32=-f Makefile.mingw\n $(package)_build_env+=CFLAGS=\"$($(package)_cflags) $($(package)_cppflags)\" AR=\"$($(package)_ar)\"\n endef"
      },
      {
        "sha": "3c6e8900f66465976a26b77a14683d8b9859c63e",
        "filename": "depends/packages/native_biplist.mk",
        "status": "added",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/depends/packages/native_biplist.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/depends/packages/native_biplist.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_biplist.mk?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -0,0 +1,20 @@\n+package=native_biplist\n+$(package)_version=0.9\n+$(package)_download_path=https://pypi.python.org/packages/source/b/biplist\n+$(package)_file_name=biplist-$($(package)_version).tar.gz\n+$(package)_sha256_hash=b57cadfd26e4754efdf89e9e37de87885f9b5c847b2615688ca04adfaf6ca604\n+$(package)_install_libdir=$(build_prefix)/lib/python/dist-packages\n+$(package)_patches=sorted_list.patch\n+\n+define $(package)_preprocess_cmds\n+  patch -p1 < $($(package)_patch_dir)/sorted_list.patch\n+endef\n+\n+define $(package)_build_cmds\n+    python setup.py build\n+endef\n+\n+define $(package)_stage_cmds\n+    mkdir -p $($(package)_install_libdir) && \\\n+    python setup.py install --root=$($(package)_staging_dir) --prefix=$(build_prefix) --install-lib=$($(package)_install_libdir)\n+endef"
      },
      {
        "sha": "a3a58604e583c7ff1a488ddaacb3870870108fdf",
        "filename": "depends/packages/native_ccache.mk",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/depends/packages/native_ccache.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/depends/packages/native_ccache.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_ccache.mk?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -1,8 +1,8 @@\n package=native_ccache\n-$(package)_version=3.2.3\n-$(package)_download_path=http://samba.org/ftp/ccache\n+$(package)_version=3.3.1\n+$(package)_download_path=https://samba.org/ftp/ccache\n $(package)_file_name=ccache-$($(package)_version).tar.bz2\n-$(package)_sha256_hash=b07165d4949d107d17f2f84b90b52953617bf1abbf249d5cc20636f43337c98c\n+$(package)_sha256_hash=cb6e4bafbb19ba0a2ec43386b123a5f92a20e1e3384c071d5d13e0cb3c84bf73\n \n define $(package)_set_vars\n $(package)_config_opts="
      },
      {
        "sha": "797480c25eb2f3ff4fd559cb92b4e7a3aae75300",
        "filename": "depends/packages/native_cctools.mk",
        "status": "modified",
        "additions": 15,
        "deletions": 9,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/depends/packages/native_cctools.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/depends/packages/native_cctools.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_cctools.mk?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -1,14 +1,14 @@\n package=native_cctools\n-$(package)_version=ee31ae567931c426136c94aad457c7b51d844beb\n+$(package)_version=807d6fd1be5d2224872e381870c0a75387fe05e6\n $(package)_download_path=https://github.com/theuni/cctools-port/archive\n $(package)_file_name=$($(package)_version).tar.gz\n-$(package)_sha256_hash=ef107e6ab1b3994cb22e14f4f5c59ea0c0b5a988e6b21d42ed9616b018bbcbf9\n+$(package)_sha256_hash=a09c9ba4684670a0375e42d9d67e7f12c1f62581a27f28f7c825d6d7032ccc6a\n $(package)_build_subdir=cctools\n-$(package)_clang_version=3.3\n+$(package)_clang_version=3.7.1\n $(package)_clang_download_path=http://llvm.org/releases/$($(package)_clang_version)\n-$(package)_clang_download_file=clang+llvm-$($(package)_clang_version)-amd64-Ubuntu-12.04.2.tar.gz\n-$(package)_clang_file_name=clang-llvm-$($(package)_clang_version)-amd64-Ubuntu-12.04.2.tar.gz\n-$(package)_clang_sha256_hash=60d8f69f032d62ef61bf527857ebb933741ec3352d4d328c5516aa520662dab7\n+$(package)_clang_download_file=clang+llvm-$($(package)_clang_version)-x86_64-linux-gnu-ubuntu-14.04.tar.xz\n+$(package)_clang_file_name=clang-llvm-$($(package)_clang_version)-x86_64-linux-gnu-ubuntu-14.04.tar.xz\n+$(package)_clang_sha256_hash=99b28a6b48e793705228a390471991386daa33a9717cd9ca007fcdde69608fd9\n $(package)_extra_sources=$($(package)_clang_file_name)\n \n define $(package)_fetch_cmds\n@@ -17,16 +17,21 @@ $(call fetch_file,$(package),$($(package)_clang_download_path),$($(package)_clan\n endef\n \n define $(package)_extract_cmds\n+  mkdir -p $($(package)_extract_dir) && \\\n+  echo \"$($(package)_sha256_hash)  $($(package)_source)\" > $($(package)_extract_dir)/.$($(package)_file_name).hash && \\\n+  echo \"$($(package)_clang_sha256_hash)  $($(package)_source_dir)/$($(package)_clang_file_name)\" >> $($(package)_extract_dir)/.$($(package)_file_name).hash && \\\n+  $(build_SHA256SUM) -c $($(package)_extract_dir)/.$($(package)_file_name).hash && \\\n   mkdir -p toolchain/bin toolchain/lib/clang/3.5/include && \\\n   tar --strip-components=1 -C toolchain -xf $($(package)_source_dir)/$($(package)_clang_file_name) && \\\n+  rm -f toolchain/lib/libc++abi.so* && \\\n   echo \"#!/bin/sh\" > toolchain/bin/$(host)-dsymutil && \\\n   echo \"exit 0\" >> toolchain/bin/$(host)-dsymutil && \\\n   chmod +x toolchain/bin/$(host)-dsymutil && \\\n   tar --strip-components=1 -xf $($(package)_source)\n endef\n \n define $(package)_set_vars\n-$(package)_config_opts=--target=$(host) --disable-libuuid\n+$(package)_config_opts=--target=$(host) --disable-lto-support\n $(package)_ldflags+=-Wl,-rpath=\\\\$$$$$$$$\\$$$$$$$$ORIGIN/../lib\n $(package)_cc=$($(package)_extract_dir)/toolchain/bin/clang\n $(package)_cxx=$($(package)_extract_dir)/toolchain/bin/clang++\n@@ -49,10 +54,11 @@ define $(package)_stage_cmds\n   cd $($(package)_extract_dir)/toolchain && \\\n   mkdir -p $($(package)_staging_prefix_dir)/lib/clang/$($(package)_clang_version)/include && \\\n   mkdir -p $($(package)_staging_prefix_dir)/bin $($(package)_staging_prefix_dir)/include && \\\n-  cp -P bin/clang bin/clang++ $($(package)_staging_prefix_dir)/bin/ &&\\\n+  cp bin/clang $($(package)_staging_prefix_dir)/bin/ &&\\\n+  cp -P bin/clang++ $($(package)_staging_prefix_dir)/bin/ &&\\\n   cp lib/libLTO.so $($(package)_staging_prefix_dir)/lib/ && \\\n   cp -rf lib/clang/$($(package)_clang_version)/include/* $($(package)_staging_prefix_dir)/lib/clang/$($(package)_clang_version)/include/ && \\\n-  cp bin/$(host)-dsymutil $($(package)_staging_prefix_dir)/bin && \\\n+  cp bin/llvm-dsymutil $($(package)_staging_prefix_dir)/bin/$(host)-dsymutil && \\\n   if `test -d include/c++/`; then cp -rf include/c++/ $($(package)_staging_prefix_dir)/include/; fi && \\\n   if `test -d lib/c++/`; then cp -rf lib/c++/ $($(package)_staging_prefix_dir)/lib/; fi\n endef"
      },
      {
        "sha": "e0ae0cec700e921cdfc6c4bdc9760467655dcb4d",
        "filename": "depends/packages/native_comparisontool.mk",
        "status": "removed",
        "additions": 0,
        "deletions": 21,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9df179d2e3abdee7d1f255d9be17c8b72dff06a/depends/packages/native_comparisontool.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9df179d2e3abdee7d1f255d9be17c8b72dff06a/depends/packages/native_comparisontool.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_comparisontool.mk?ref=e9df179d2e3abdee7d1f255d9be17c8b72dff06a",
        "patch": "@@ -1,21 +0,0 @@\n-package=native_comparisontool\n-$(package)_version=8c6666f\n-$(package)_download_path=https://github.com/theuni/bitcoind-comparisontool/raw/master\n-$(package)_file_name=pull-tests-$($(package)_version).jar\n-$(package)_sha256_hash=a865332b3827abcde684ab79f5f43c083b0b6a4c97ff5508c79f29fee24f11cd\n-$(package)_install_dirname=BitcoindComparisonTool_jar\n-$(package)_install_filename=BitcoindComparisonTool.jar\n-\n-define $(package)_extract_cmds\n-endef\n-\n-define $(package)_configure_cmds\n-endef\n-\n-define $(package)_build_cmds\n-endef\n-\n-define $(package)_stage_cmds\n-  mkdir -p $($(package)_staging_prefix_dir)/share/$($(package)_install_dirname) && \\\n-  cp $($(package)_source) $($(package)_staging_prefix_dir)/share/$($(package)_install_dirname)/$($(package)_install_filename)\n-endef"
      },
      {
        "sha": "8e902af1b6e9af0f5c4cb91cf075365c0815f828",
        "filename": "depends/packages/native_ds_store.mk",
        "status": "added",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/depends/packages/native_ds_store.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/depends/packages/native_ds_store.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_ds_store.mk?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -0,0 +1,17 @@\n+package=native_ds_store\n+$(package)_version=c80c23706eae\n+$(package)_download_path=https://bitbucket.org/al45tair/ds_store/get\n+$(package)_download_file=$($(package)_version).tar.bz2\n+$(package)_file_name=$(package)-$($(package)_version).tar.bz2\n+$(package)_sha256_hash=ce1aa412211610c63d567bbe3e06213006a2d5ba5d76d89399c151b5472cb0da\n+$(package)_install_libdir=$(build_prefix)/lib/python/dist-packages\n+$(package)_dependencies=native_biplist\n+\n+define $(package)_build_cmds\n+    python setup.py build\n+endef\n+\n+define $(package)_stage_cmds\n+    mkdir -p $($(package)_install_libdir) && \\\n+    python setup.py install --root=$($(package)_staging_dir) --prefix=$(build_prefix) --install-lib=$($(package)_install_libdir)\n+endef"
      },
      {
        "sha": "85a8a402bf92cefb0b406a6d8ddefa87984157cc",
        "filename": "depends/packages/native_mac_alias.mk",
        "status": "added",
        "additions": 21,
        "deletions": 0,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/depends/packages/native_mac_alias.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/depends/packages/native_mac_alias.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_mac_alias.mk?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -0,0 +1,21 @@\n+package=native_mac_alias\n+$(package)_version=1.1.0\n+$(package)_download_path=https://bitbucket.org/al45tair/mac_alias/get\n+$(package)_download_file=v$($(package)_version).tar.bz2\n+$(package)_file_name=$(package)-$($(package)_version).tar.bz2\n+$(package)_sha256_hash=87ad827e66790028361e43fc754f68ed041a9bdb214cca03c853f079b04fb120\n+$(package)_install_libdir=$(build_prefix)/lib/python/dist-packages\n+$(package)_patches=python3.patch\n+\n+define $(package)_preprocess_cmds\n+  patch -p1 < $($(package)_patch_dir)/python3.patch\n+endef\n+\n+define $(package)_build_cmds\n+    python setup.py build\n+endef\n+\n+define $(package)_stage_cmds\n+    mkdir -p $($(package)_install_libdir) && \\\n+    python setup.py install --root=$($(package)_staging_dir) --prefix=$(build_prefix) --install-lib=$($(package)_install_libdir)\n+endef"
      },
      {
        "sha": "5ee9f17a63235a9d68f74389566f1f257c182d3c",
        "filename": "depends/packages/openssl.mk",
        "status": "modified",
        "additions": 36,
        "deletions": 3,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/depends/packages/openssl.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/depends/packages/openssl.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/openssl.mk?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -6,9 +6,42 @@ $(package)_sha256_hash=8f9faeaebad088e772f4ef5e38252d472be4d878c6b3a2718c10a4fce\n \n define $(package)_set_vars\n $(package)_config_env=AR=\"$($(package)_ar)\" RANLIB=\"$($(package)_ranlib)\" CC=\"$($(package)_cc)\"\n-$(package)_config_opts=--prefix=$(host_prefix) --openssldir=$(host_prefix)/etc/openssl no-zlib no-shared no-dso\n-$(package)_config_opts+=no-krb5 no-camellia no-capieng no-cast no-cms no-dtls1 no-gost no-gmp no-heartbeats no-idea no-jpake no-md2\n-$(package)_config_opts+=no-mdc2 no-rc5 no-rdrand no-rfc3779 no-rsax no-sctp no-seed no-sha0 no-static_engine no-whirlpool no-rc2 no-rc4 no-ssl2 no-ssl3\n+$(package)_config_opts=--prefix=$(host_prefix) --openssldir=$(host_prefix)/etc/openssl\n+$(package)_config_opts+=no-camellia\n+$(package)_config_opts+=no-capieng\n+$(package)_config_opts+=no-cast\n+$(package)_config_opts+=no-comp\n+$(package)_config_opts+=no-dso\n+$(package)_config_opts+=no-dtls1\n+$(package)_config_opts+=no-ec_nistp_64_gcc_128\n+$(package)_config_opts+=no-gost\n+$(package)_config_opts+=no-gmp\n+$(package)_config_opts+=no-heartbeats\n+$(package)_config_opts+=no-idea\n+$(package)_config_opts+=no-jpake\n+$(package)_config_opts+=no-krb5\n+$(package)_config_opts+=no-libunbound\n+$(package)_config_opts+=no-md2\n+$(package)_config_opts+=no-mdc2\n+$(package)_config_opts+=no-rc4\n+$(package)_config_opts+=no-rc5\n+$(package)_config_opts+=no-rdrand\n+$(package)_config_opts+=no-rfc3779\n+$(package)_config_opts+=no-rsax\n+$(package)_config_opts+=no-sctp\n+$(package)_config_opts+=no-seed\n+$(package)_config_opts+=no-sha0\n+$(package)_config_opts+=no-shared\n+$(package)_config_opts+=no-ssl-trace\n+$(package)_config_opts+=no-ssl2\n+$(package)_config_opts+=no-ssl3\n+$(package)_config_opts+=no-static_engine\n+$(package)_config_opts+=no-store\n+$(package)_config_opts+=no-unit-test\n+$(package)_config_opts+=no-weak-ssl-ciphers\n+$(package)_config_opts+=no-whirlpool\n+$(package)_config_opts+=no-zlib\n+$(package)_config_opts+=no-zlib-dynamic\n $(package)_config_opts+=$($(package)_cflags) $($(package)_cppflags)\n $(package)_config_opts_linux=-fPIC -Wa,--noexecstack\n $(package)_config_opts_x86_64_linux=linux-x86_64"
      },
      {
        "sha": "4cf44385b88dc4501f9d40f35ea1d878d46beba4",
        "filename": "depends/packages/packages.mk",
        "status": "modified",
        "additions": 8,
        "deletions": 7,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/depends/packages/packages.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/depends/packages/packages.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/packages.mk?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -1,20 +1,21 @@\n-packages:=boost openssl libevent\n-darwin_packages:=zeromq\n-linux_packages:=zeromq\n-native_packages := native_ccache native_comparisontool\n+packages:=boost openssl libevent zeromq\n+native_packages := native_ccache\n \n qt_native_packages = native_protobuf\n qt_packages = qrencode protobuf\n \n-qt_linux_packages= qt expat dbus libxcb xcb_proto libXau xproto freetype fontconfig libX11 xextproto libXext xtrans\n+qt_x86_64_linux_packages:=qt expat dbus libxcb xcb_proto libXau xproto freetype fontconfig libX11 xextproto libXext xtrans\n+qt_i686_linux_packages:=$(qt_x86_64_linux_packages)\n+\n qt_darwin_packages=qt\n qt_mingw32_packages=qt\n \n-\n wallet_packages=bdb\n \n upnp_packages=miniupnpc\n \n+darwin_native_packages = native_biplist native_ds_store native_mac_alias\n+\n ifneq ($(build_os),darwin)\n-darwin_native_packages=native_cctools native_cdrkit native_libdmg-hfsplus\n+darwin_native_packages += native_cctools native_cdrkit native_libdmg-hfsplus\n endif"
      },
      {
        "sha": "54d3fd924519be2ed612830e24c3baf25629c7fa",
        "filename": "depends/packages/protobuf.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/depends/packages/protobuf.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/depends/packages/protobuf.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/protobuf.mk?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -4,6 +4,7 @@ $(package)_download_path=$(native_$(package)_download_path)\n $(package)_file_name=$(native_$(package)_file_name)\n $(package)_sha256_hash=$(native_$(package)_sha256_hash)\n $(package)_dependencies=native_$(package)\n+$(package)_cxxflags=-std=c++11\n \n define $(package)_set_vars\n   $(package)_config_opts=--disable-shared --with-protoc=$(build_prefix)/bin/protoc"
      },
      {
        "sha": "bdde15aa173dfd9a1e77b93e9d503431ae526924",
        "filename": "depends/packages/qt.mk",
        "status": "modified",
        "additions": 50,
        "deletions": 43,
        "changes": 93,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/depends/packages/qt.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/depends/packages/qt.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/qt.mk?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -1,42 +1,56 @@\n PACKAGE=qt\n-$(package)_version=5.5.0\n-$(package)_download_path=http://download.qt.io/official_releases/qt/5.5/$($(package)_version)/submodules\n+$(package)_version=5.6.1\n+$(package)_download_path=http://download.qt.io/official_releases/qt/5.6/$($(package)_version)/submodules\n $(package)_suffix=opensource-src-$($(package)_version).tar.gz\n $(package)_file_name=qtbase-$($(package)_suffix)\n-$(package)_sha256_hash=7e82b1318f88e56a2a9376e069aa608d4fd96b48cb0e1b880ae658b0a1af0561\n+$(package)_sha256_hash=0ac67cf8d66d52b995f96c31c4b48117a1afb3db99eaa93e20ccd8f7f55f7fde\n $(package)_dependencies=openssl\n-$(package)_linux_dependencies=freetype fontconfig dbus libxcb libX11 xproto libXext\n+$(package)_linux_dependencies=freetype fontconfig libxcb libX11 xproto libXext\n $(package)_build_subdir=qtbase\n $(package)_qt_libs=corelib network widgets gui plugins testlib\n-$(package)_patches=mac-qmake.conf fix-xcb-include-order.patch mingw-uuidof.patch pidlist_absolute.patch\n+$(package)_patches=mac-qmake.conf configure-xcoderun.patch mingw-uuidof.patch pidlist_absolute.patch fix-xcb-include-order.patch fix_qt_pkgconfig.patch\n \n $(package)_qttranslations_file_name=qttranslations-$($(package)_suffix)\n-$(package)_qttranslations_sha256_hash=c4bd6db6e426965c6f8824c54e81f68bbd61e2bae1bcadc328c6e81c45902a0d\n+$(package)_qttranslations_sha256_hash=dcc1534d247babca1840cb6d0a000671801a341ea352d0535474f86adadaf028\n+\n \n $(package)_qttools_file_name=qttools-$($(package)_suffix)\n-$(package)_qttools_sha256_hash=d9e06bd19ecc86afba5e95d45a906d1bc1ad579aa70001e36143c1aaf695bdd6\n+$(package)_qttools_sha256_hash=e0f845de28c31230dfa428f0190ccb3b91d1fc02481b1f064698ae4ef8376aa1\n \n $(package)_extra_sources  = $($(package)_qttranslations_file_name)\n $(package)_extra_sources += $($(package)_qttools_file_name)\n \n define $(package)_set_vars\n $(package)_config_opts_release = -release\n $(package)_config_opts_debug   = -debug\n-$(package)_config_opts += -opensource -confirm-license\n+$(package)_config_opts += -bindir $(build_prefix)/bin\n+$(package)_config_opts += -c++11\n+$(package)_config_opts += -confirm-license\n+$(package)_config_opts += -dbus-runtime\n+$(package)_config_opts += -hostprefix $(build_prefix)\n+$(package)_config_opts += -no-alsa\n $(package)_config_opts += -no-audio-backend\n+$(package)_config_opts += -no-cups\n+$(package)_config_opts += -no-egl\n+$(package)_config_opts += -no-eglfs\n+$(package)_config_opts += -no-feature-style-windowsmobile\n+$(package)_config_opts += -no-feature-style-windowsce\n+$(package)_config_opts += -no-freetype\n+$(package)_config_opts += -no-gif\n $(package)_config_opts += -no-glib\n+$(package)_config_opts += -no-gstreamer\n $(package)_config_opts += -no-icu\n-$(package)_config_opts += -no-cups\n $(package)_config_opts += -no-iconv\n-$(package)_config_opts += -no-gif\n-$(package)_config_opts += -no-freetype\n+$(package)_config_opts += -no-kms\n+$(package)_config_opts += -no-linuxfb\n+$(package)_config_opts += -no-libudev\n+$(package)_config_opts += -no-mitshm\n+$(package)_config_opts += -no-mtdev\n $(package)_config_opts += -no-nis\n-$(package)_config_opts += -no-pch\n+$(package)_config_opts += -no-pulseaudio\n+$(package)_config_opts += -no-openvg\n+$(package)_config_opts += -no-reduce-relocations\n $(package)_config_opts += -no-qml-debug\n-$(package)_config_opts += -nomake examples\n-$(package)_config_opts += -nomake tests\n-$(package)_config_opts += -no-feature-style-windowsmobile\n-$(package)_config_opts += -no-feature-style-windowsce\n $(package)_config_opts += -no-sql-db2\n $(package)_config_opts += -no-sql-ibase\n $(package)_config_opts += -no-sql-oci\n@@ -46,36 +60,25 @@ $(package)_config_opts += -no-sql-odbc\n $(package)_config_opts += -no-sql-psql\n $(package)_config_opts += -no-sql-sqlite\n $(package)_config_opts += -no-sql-sqlite2\n-$(package)_config_opts += -prefix $(host_prefix)\n-$(package)_config_opts += -hostprefix $(build_prefix)\n-$(package)_config_opts += -bindir $(build_prefix)/bin\n-$(package)_config_opts += -no-c++11\n+$(package)_config_opts += -no-use-gold-linker\n+$(package)_config_opts += -no-xinput2\n+$(package)_config_opts += -no-xrender\n+$(package)_config_opts += -nomake examples\n+$(package)_config_opts += -nomake tests\n+$(package)_config_opts += -opensource\n $(package)_config_opts += -openssl-linked\n-$(package)_config_opts += -v\n-$(package)_config_opts += -static\n-$(package)_config_opts += -silent\n+$(package)_config_opts += -optimized-qmake\n+$(package)_config_opts += -pch\n $(package)_config_opts += -pkg-config\n+$(package)_config_opts += -prefix $(host_prefix)\n $(package)_config_opts += -qt-libpng\n $(package)_config_opts += -qt-libjpeg\n-$(package)_config_opts += -qt-zlib\n $(package)_config_opts += -qt-pcre\n-$(package)_config_opts += -no-pulseaudio\n-$(package)_config_opts += -no-openvg\n-$(package)_config_opts += -no-xrender\n-$(package)_config_opts += -no-alsa\n-$(package)_config_opts += -no-mtdev\n-$(package)_config_opts += -no-gstreamer\n-$(package)_config_opts += -no-mitshm\n-$(package)_config_opts += -no-kms\n-$(package)_config_opts += -no-reduce-relocations\n-$(package)_config_opts += -no-egl\n-$(package)_config_opts += -no-eglfs\n-$(package)_config_opts += -no-linuxfb\n-$(package)_config_opts += -no-xinput2\n-$(package)_config_opts += -no-libudev\n-$(package)_config_opts += -no-use-gold-linker\n+$(package)_config_opts += -qt-zlib\n $(package)_config_opts += -reduce-exports\n-$(package)_config_opts += -optimized-qmake\n+$(package)_config_opts += -static\n+$(package)_config_opts += -silent\n+$(package)_config_opts += -v\n \n ifneq ($(build_os),darwin)\n $(package)_config_opts_darwin = -xplatform macx-clang-linux\n@@ -108,8 +111,8 @@ endef\n define $(package)_extract_cmds\n   mkdir -p $($(package)_extract_dir) && \\\n   echo \"$($(package)_sha256_hash)  $($(package)_source)\" > $($(package)_extract_dir)/.$($(package)_file_name).hash && \\\n-  echo \"$($(package)_qttranslations_sha256_hash)  $($(package)_source_dir)/$($(package)_qttranslations_file_name)\" > $($(package)_extract_dir)/.$($(package)_file_name).hash && \\\n-  echo \"$($(package)_qttools_sha256_hash)  $($(package)_source_dir)/$($(package)_qttools_file_name)\" > $($(package)_extract_dir)/.$($(package)_file_name).hash && \\\n+  echo \"$($(package)_qttranslations_sha256_hash)  $($(package)_source_dir)/$($(package)_qttranslations_file_name)\" >> $($(package)_extract_dir)/.$($(package)_file_name).hash && \\\n+  echo \"$($(package)_qttools_sha256_hash)  $($(package)_source_dir)/$($(package)_qttools_file_name)\" >> $($(package)_extract_dir)/.$($(package)_file_name).hash && \\\n   $(build_SHA256SUM) -c $($(package)_extract_dir)/.$($(package)_file_name).hash && \\\n   mkdir qtbase && \\\n   tar --strip-components=1 -xf $($(package)_source) -C qtbase && \\\n@@ -119,19 +122,23 @@ define $(package)_extract_cmds\n   tar --strip-components=1 -xf $($(package)_source_dir)/$($(package)_qttools_file_name) -C qttools\n endef\n \n+\n define $(package)_preprocess_cmds\n   sed -i.old \"s|updateqm.commands = \\$$$$\\$$$$LRELEASE|updateqm.commands = $($(package)_extract_dir)/qttools/bin/lrelease|\" qttranslations/translations/translations.pro && \\\n   sed -i.old \"s/src_plugins.depends = src_sql src_xml src_network/src_plugins.depends = src_xml src_network/\" qtbase/src/src.pro && \\\n   sed -i.old \"s|X11/extensions/XIproto.h|X11/X.h|\" qtbase/src/plugins/platforms/xcb/qxcbxsettings.cpp && \\\n   sed -i.old 's/if \\[ \"$$$$XPLATFORM_MAC\" = \"yes\" \\]; then xspecvals=$$$$(macSDKify/if \\[ \"$$$$BUILD_ON_MAC\" = \"yes\" \\]; then xspecvals=$$$$(macSDKify/' qtbase/configure && \\\n+  sed -i.old 's/CGEventCreateMouseEvent(0, kCGEventMouseMoved, pos, 0)/CGEventCreateMouseEvent(0, kCGEventMouseMoved, pos, kCGMouseButtonLeft)/' qtbase/src/plugins/platforms/cocoa/qcocoacursor.mm && \\\n   mkdir -p qtbase/mkspecs/macx-clang-linux &&\\\n   cp -f qtbase/mkspecs/macx-clang/Info.plist.lib qtbase/mkspecs/macx-clang-linux/ &&\\\n   cp -f qtbase/mkspecs/macx-clang/Info.plist.app qtbase/mkspecs/macx-clang-linux/ &&\\\n   cp -f qtbase/mkspecs/macx-clang/qplatformdefs.h qtbase/mkspecs/macx-clang-linux/ &&\\\n   cp -f $($(package)_patch_dir)/mac-qmake.conf qtbase/mkspecs/macx-clang-linux/qmake.conf && \\\n-  patch -p1 < $($(package)_patch_dir)/fix-xcb-include-order.patch && \\\n+  patch -p1 < $($(package)_patch_dir)/configure-xcoderun.patch && \\\n   patch -p1 < $($(package)_patch_dir)/mingw-uuidof.patch && \\\n   patch -p1 < $($(package)_patch_dir)/pidlist_absolute.patch && \\\n+  patch -p1 < $($(package)_patch_dir)/fix-xcb-include-order.patch && \\\n+  patch -p1 < $($(package)_patch_dir)/fix_qt_pkgconfig.patch && \\\n   echo \"QMAKE_CFLAGS     += $($(package)_cflags) $($(package)_cppflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\\n   echo \"QMAKE_CXXFLAGS   += $($(package)_cxxflags) $($(package)_cppflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\\n   echo \"QMAKE_LFLAGS     += $($(package)_ldflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\"
      },
      {
        "sha": "8fb30a5c4471cfe1b4204c4507a103d37ba5a067",
        "filename": "depends/packages/qt46.mk",
        "status": "removed",
        "additions": 0,
        "deletions": 66,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9df179d2e3abdee7d1f255d9be17c8b72dff06a/depends/packages/qt46.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9df179d2e3abdee7d1f255d9be17c8b72dff06a/depends/packages/qt46.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/qt46.mk?ref=e9df179d2e3abdee7d1f255d9be17c8b72dff06a",
        "patch": "@@ -1,66 +0,0 @@\n-PACKAGE=qt46\n-$(package)_version=4.6.4\n-$(package)_download_path=http://download.qt-project.org/archive/qt/4.6/\n-$(package)_file_name=qt-everywhere-opensource-src-$($(package)_version).tar.gz\n-$(package)_sha256_hash=9ad4d46c721b53a429ed5a2eecfd3c239a9ab566562f183f99d3125f1a234250\n-$(package)_dependencies=openssl freetype dbus libX11 xproto libXext libICE libSM\n-$(package)_patches=stlfix.patch \n-\n-define $(package)_set_vars\n-$(package)_config_opts  = -prefix $(host_prefix) -headerdir $(host_prefix)/include/qt4 -bindir $(build_prefix)/bin\n-$(package)_config_opts += -release -no-separate-debug-info -opensource -confirm-license\n-$(package)_config_opts += -stl -qt-zlib\n-\n-$(package)_config_opts += -nomake examples -nomake tests -nomake tools -nomake translations -nomake demos -nomake docs\n-$(package)_config_opts += -no-audio-backend -no-glib -no-nis -no-cups -no-iconv -no-gif -no-pch\n-$(package)_config_opts += -no-xkb -no-xrender -no-xrandr -no-xfixes -no-xcursor -no-xinerama -no-xsync -no-xinput -no-mitshm -no-xshape\n-$(package)_config_opts += -no-libtiff -no-fontconfig -openssl-linked\n-$(package)_config_opts += -no-sql-db2 -no-sql-ibase -no-sql-oci -no-sql-tds -no-sql-mysql\n-$(package)_config_opts += -no-sql-odbc -no-sql-psql -no-sql-sqlite -no-sql-sqlite2\n-$(package)_config_opts += -no-xmlpatterns -no-multimedia -no-phonon -no-scripttools -no-declarative\n-$(package)_config_opts += -no-phonon-backend -no-webkit -no-javascript-jit -no-script\n-$(package)_config_opts += -no-svg -no-libjpeg -no-libtiff -no-libpng -no-libmng -no-qt3support -no-opengl\n-\n-$(package)_config_opts_x86_64_linux  += -platform linux-g++-64\n-$(package)_config_opts_i686_linux  = -platform linux-g++-32\n-$(package)_build_env  = QT_RCC_TEST=1\n-endef\n-\n-define $(package)_preprocess_cmds\n-   sed -i.old \"s|/include /usr/include||\" config.tests/unix/freetype/freetype.pri && \\\n-   sed -i.old \"s|src_plugins.depends = src_gui src_sql src_svg|src_plugins.depends = src_gui src_sql|\" src/src.pro && \\\n-   sed -i.old \"s|\\.lower(|\\.toLower(|g\" src/network/ssl/qsslsocket_openssl.cpp && \\\n-   sed -i.old \"s|Key_BackSpace|Key_Backspace|\" src/gui/itemviews/qabstractitemview.cpp && \\\n-   sed -i.old \"s|/usr/X11R6/lib64|$(host_prefix)/lib|\" mkspecs/*/*.conf && \\\n-   sed -i.old \"s|/usr/X11R6/lib|$(host_prefix)/lib|\" mkspecs/*/*.conf && \\\n-   sed -i.old \"s|/usr/X11R6/include|$(host_prefix)/include|\" mkspecs/*/*.conf && \\\n-   sed -i.old \"s|QMAKE_LFLAGS_SHLIB\\t+= -shared|QMAKE_LFLAGS_SHLIB\\t+= -shared -Wl,--exclude-libs,ALL|\" mkspecs/common/g++.conf && \\\n-   sed -i.old \"/SSLv2_client_method/d\" src/network/ssl/qsslsocket_openssl.cpp src/network/ssl/qsslsocket_openssl_symbols.cpp && \\\n-   sed -i.old \"/SSLv2_server_method/d\" src/network/ssl/qsslsocket_openssl.cpp src/network/ssl/qsslsocket_openssl_symbols.cpp && \\\n-   patch -p1 < $($(package)_patch_dir)/stlfix.patch \n-endef\n-\n-define $(package)_config_cmds\n-  export PKG_CONFIG_SYSROOT_DIR=/ && \\\n-  export PKG_CONFIG_LIBDIR=$(host_prefix)/lib/pkgconfig && \\\n-  export PKG_CONFIG_PATH=$(host_prefix)/share/pkgconfig  && \\\n-  export CPATH=$(host_prefix)/include && \\\n-  OPENSSL_LIBS='-L$(host_prefix)/lib -lssl -lcrypto' ./configure $($(package)_config_opts) && \\\n-  cd tools/linguist/lrelease; ../../../bin/qmake  -o Makefile lrelease.pro\n-endef\n-\n-define $(package)_build_cmds\n-  export CPATH=$(host_prefix)/include && \\\n-  $(MAKE) -C src && \\\n-  $(MAKE) -C tools/linguist/lrelease\n-endef\n-\n-define $(package)_stage_cmds\n-  $(MAKE) -C src INSTALL_ROOT=$($(package)_staging_dir) install && \\\n-  $(MAKE) -C tools/linguist/lrelease INSTALL_ROOT=$($(package)_staging_dir) install\n-endef\n-\n-define $(package)_postprocess_cmds\n-  rm -rf mkspecs/ lib/cmake/ lib/*.prl lib/*.la && \\\n-  find native/bin -type f -exec mv {} {}-qt4 \\;\n-endef"
      },
      {
        "sha": "01146c26f69bc426f351424bc2cdcfded19e0b65",
        "filename": "depends/packages/zeromq.mk",
        "status": "modified",
        "additions": 14,
        "deletions": 6,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/depends/packages/zeromq.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/depends/packages/zeromq.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/zeromq.mk?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -1,24 +1,32 @@\n package=zeromq\n-$(package)_version=4.0.4\n-$(package)_download_path=http://download.zeromq.org\n+$(package)_version=4.1.5\n+$(package)_download_path=https://github.com/zeromq/zeromq4-1/releases/download/v$($(package)_version)/\n $(package)_file_name=$(package)-$($(package)_version).tar.gz\n-$(package)_sha256_hash=1ef71d46e94f33e27dd5a1661ed626cd39be4d2d6967792a275040e34457d399\n+$(package)_sha256_hash=04aac57f081ffa3a2ee5ed04887be9e205df3a7ddade0027460b8042432bdbcf\n+$(package)_patches=9114d3957725acd34aa8b8d011585812f3369411.patch 9e6745c12e0b100cd38acecc16ce7db02905e27c.patch\n \n define $(package)_set_vars\n-  $(package)_config_opts=--without-documentation --disable-shared\n+  $(package)_config_opts=--without-documentation --disable-shared --without-libsodium --disable-curve\n   $(package)_config_opts_linux=--with-pic\n+  $(package)_cxxflags=-std=c++11\n+endef\n+\n+define $(package)_preprocess_cmds\n+  patch -p1 < $($(package)_patch_dir)/9114d3957725acd34aa8b8d011585812f3369411.patch && \\\n+  patch -p1 < $($(package)_patch_dir)/9e6745c12e0b100cd38acecc16ce7db02905e27c.patch && \\\n+  ./autogen.sh\n endef\n \n define $(package)_config_cmds\n   $($(package)_autoconf)\n endef\n \n define $(package)_build_cmds\n-  $(MAKE) -C src\n+  $(MAKE) libzmq.la\n endef\n \n define $(package)_stage_cmds\n-  $(MAKE) -C src DESTDIR=$($(package)_staging_dir) install\n+  $(MAKE) DESTDIR=$($(package)_staging_dir) install-libLTLIBRARIES install-includeHEADERS install-pkgconfigDATA\n endef\n \n define $(package)_postprocess_cmds"
      },
      {
        "sha": "97f59cb7e4eea0575cf684936c7087d784a39437",
        "filename": "depends/patches/boost/darwin_boost_atomic-1.patch",
        "status": "removed",
        "additions": 0,
        "deletions": 35,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9df179d2e3abdee7d1f255d9be17c8b72dff06a/depends/patches/boost/darwin_boost_atomic-1.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9df179d2e3abdee7d1f255d9be17c8b72dff06a/depends/patches/boost/darwin_boost_atomic-1.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/boost/darwin_boost_atomic-1.patch?ref=e9df179d2e3abdee7d1f255d9be17c8b72dff06a",
        "patch": "@@ -1,35 +0,0 @@\n-diff --git a/include/boost/atomic/detail/cas128strong.hpp b/include/boost/atomic/detail/cas128strong.hpp\n-index 906c13e..dcb4d7d 100644\n---- a/include/boost/atomic/detail/cas128strong.hpp\n-+++ b/include/boost/atomic/detail/cas128strong.hpp\n-@@ -196,15 +196,17 @@ class base_atomic<T, void, 16, Sign>\n- \n- public:\n-     BOOST_DEFAULTED_FUNCTION(base_atomic(void), {})\n--    explicit base_atomic(value_type const& v) BOOST_NOEXCEPT : v_(0)\n-+    explicit base_atomic(value_type const& v) BOOST_NOEXCEPT\n-     {\n-+        memset(&v_, 0, sizeof(v_));\n-         memcpy(&v_, &v, sizeof(value_type));\n-     }\n- \n-     void\n-     store(value_type const& value, memory_order order = memory_order_seq_cst) volatile BOOST_NOEXCEPT\n-     {\n--        storage_type value_s = 0;\n-+        storage_type value_s;\n-+        memset(&value_s, 0, sizeof(value_s));\n-         memcpy(&value_s, &value, sizeof(value_type));\n-         platform_fence_before_store(order);\n-         platform_store128(value_s, &v_);\n-@@ -247,7 +249,9 @@ class base_atomic<T, void, 16, Sign>\n-         memory_order success_order,\n-         memory_order failure_order) volatile BOOST_NOEXCEPT\n-     {\n--        storage_type expected_s = 0, desired_s = 0;\n-+        storage_type expected_s, desired_s;\n-+        memset(&expected_s, 0, sizeof(expected_s));\n-+        memset(&desired_s, 0, sizeof(desired_s));\n-         memcpy(&expected_s, &expected, sizeof(value_type));\n-         memcpy(&desired_s, &desired, sizeof(value_type));\n- "
      },
      {
        "sha": "ca50765200ec86d6b5591446326afc91b6d389e7",
        "filename": "depends/patches/boost/darwin_boost_atomic-2.patch",
        "status": "removed",
        "additions": 0,
        "deletions": 55,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9df179d2e3abdee7d1f255d9be17c8b72dff06a/depends/patches/boost/darwin_boost_atomic-2.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9df179d2e3abdee7d1f255d9be17c8b72dff06a/depends/patches/boost/darwin_boost_atomic-2.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/boost/darwin_boost_atomic-2.patch?ref=e9df179d2e3abdee7d1f255d9be17c8b72dff06a",
        "patch": "@@ -1,55 +0,0 @@\n-diff --git a/include/boost/atomic/detail/gcc-atomic.hpp b/include/boost/atomic/detail/gcc-atomic.hpp\n-index a130590..4af99a1 100644\n---- a/include/boost/atomic/detail/gcc-atomic.hpp\n-+++ b/include/boost/atomic/detail/gcc-atomic.hpp\n-@@ -958,14 +958,16 @@ class base_atomic<T, void, 16, Sign>\n- \n- public:\n-     BOOST_DEFAULTED_FUNCTION(base_atomic(void), {})\n--    explicit base_atomic(value_type const& v) BOOST_NOEXCEPT : v_(0)\n-+    explicit base_atomic(value_type const& v) BOOST_NOEXCEPT\n-     {\n-+        memset(&v_, 0, sizeof(v_));\n-         memcpy(&v_, &v, sizeof(value_type));\n-     }\n- \n-     void store(value_type const& v, memory_order order = memory_order_seq_cst) volatile BOOST_NOEXCEPT\n-     {\n--        storage_type tmp = 0;\n-+        storage_type tmp;\n-+        memset(&tmp, 0, sizeof(tmp));\n-         memcpy(&tmp, &v, sizeof(value_type));\n-         __atomic_store_n(&v_, tmp, atomics::detail::convert_memory_order_to_gcc(order));\n-     }\n-@@ -980,7 +982,8 @@ class base_atomic<T, void, 16, Sign>\n- \n-     value_type exchange(value_type const& v, memory_order order = memory_order_seq_cst) volatile BOOST_NOEXCEPT\n-     {\n--        storage_type tmp = 0;\n-+        storage_type tmp;\n-+        memset(&tmp, 0, sizeof(tmp));\n-         memcpy(&tmp, &v, sizeof(value_type));\n-         tmp = __atomic_exchange_n(&v_, tmp, atomics::detail::convert_memory_order_to_gcc(order));\n-         value_type res;\n-@@ -994,7 +997,9 @@ class base_atomic<T, void, 16, Sign>\n-         memory_order success_order,\n-         memory_order failure_order) volatile BOOST_NOEXCEPT\n-     {\n--        storage_type expected_s = 0, desired_s = 0;\n-+        storage_type expected_s, desired_s;\n-+        memset(&expected_s, 0, sizeof(expected_s));\n-+        memset(&desired_s, 0, sizeof(desired_s));\n-         memcpy(&expected_s, &expected, sizeof(value_type));\n-         memcpy(&desired_s, &desired, sizeof(value_type));\n-         const bool success = __atomic_compare_exchange_n(&v_, &expected_s, desired_s, false,\n-@@ -1010,7 +1015,9 @@ class base_atomic<T, void, 16, Sign>\n-         memory_order success_order,\n-         memory_order failure_order) volatile BOOST_NOEXCEPT\n-     {\n--        storage_type expected_s = 0, desired_s = 0;\n-+        storage_type expected_s, desired_s;\n-+        memset(&expected_s, 0, sizeof(expected_s));\n-+        memset(&desired_s, 0, sizeof(desired_s));\n-         memcpy(&expected_s, &expected, sizeof(value_type));\n-         memcpy(&desired_s, &desired, sizeof(value_type));\n-         const bool success = __atomic_compare_exchange_n(&v_, &expected_s, desired_s, true,"
      },
      {
        "sha": "04514c593a101078af216a67bd905b5c615ded53",
        "filename": "depends/patches/boost/gcc_5_no_cxx11.patch",
        "status": "removed",
        "additions": 0,
        "deletions": 37,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9df179d2e3abdee7d1f255d9be17c8b72dff06a/depends/patches/boost/gcc_5_no_cxx11.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9df179d2e3abdee7d1f255d9be17c8b72dff06a/depends/patches/boost/gcc_5_no_cxx11.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/boost/gcc_5_no_cxx11.patch?ref=e9df179d2e3abdee7d1f255d9be17c8b72dff06a",
        "patch": "@@ -1,37 +0,0 @@\n-From eec808554936ae068b23df07ab54d4dc6302a695 Mon Sep 17 00:00:00 2001\n-From: jzmaddock <jzmaddock@gmail.com>\n-Date: Sat, 23 Aug 2014 09:38:02 +0100\n-Subject: [PATCH] Fix BOOST_NO_CXX11_VARIADIC_TEMPLATES definition - the\n- feature was introduced in GCC 4.4.\n-\n----\n- include/boost/config/compiler/gcc.hpp | 9 +--------\n- 1 file changed, 1 insertion(+), 8 deletions(-)\n-\n-diff --git a/include/boost/config/compiler/gcc.hpp b/include/boost/config/compiler/gcc.hpp\n-index f37159d..97d8a18 100644\n---- a/include/boost/config/compiler/gcc.hpp\n-+++ b/include/boost/config/compiler/gcc.hpp\n-@@ -154,14 +154,6 @@\n- #  define BOOST_NO_CXX11_FUNCTION_TEMPLATE_DEFAULT_ARGS\n- #  define BOOST_NO_CXX11_RVALUE_REFERENCES\n- #  define BOOST_NO_CXX11_STATIC_ASSERT\n--\n--// Variadic templates compiler:\n--//   http://www.generic-programming.org/~dgregor/cpp/variadic-templates.html\n--#  if defined(__VARIADIC_TEMPLATES) || (__GNUC__ > 4) || ((__GNUC__ == 4) && (__GNUC_MINOR__ >= 4) && defined(__GXX_EXPERIMENTAL_CXX0X__))\n--#    define BOOST_HAS_VARIADIC_TMPL\n--#  else\n--#    define BOOST_NO_CXX11_VARIADIC_TEMPLATES\n--#  endif\n- #endif\n- \n- // C++0x features in 4.4.n and later\n-@@ -176,6 +168,7 @@\n- #  define BOOST_NO_CXX11_DELETED_FUNCTIONS\n- #  define BOOST_NO_CXX11_TRAILING_RESULT_TYPES\n- #  define BOOST_NO_CXX11_INLINE_NAMESPACES\n-+#  define BOOST_NO_CXX11_VARIADIC_TEMPLATES\n- #endif\n- \n- #if __GNUC__ < 4 || (__GNUC__ == 4 && __GNUC_MINOR__ < 5)"
      },
      {
        "sha": "79fec8a48851caba3d1288cbc5e6eced769a8d01",
        "filename": "depends/patches/libevent/libevent-2-fixes.patch",
        "status": "added",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/depends/patches/libevent/libevent-2-fixes.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/depends/patches/libevent/libevent-2-fixes.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/libevent/libevent-2-fixes.patch?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -0,0 +1,18 @@\n+--- a/util-internal.h\t2013-11-01 12:18:57.000000000 -0600\n++++ b/util-internal.h\t2015-07-20 20:19:43.199560900 -0500\n+@@ -299,8 +299,13 @@ HANDLE evutil_load_windows_system_librar\n+ \n+ #if defined(__STDC__) && defined(__STDC_VERSION__)\n+ #if (__STDC_VERSION__ >= 199901L)\n+-#define EV_SIZE_FMT \"%zu\"\n+-#define EV_SSIZE_FMT \"%zd\"\n++ #if defined(_MSC_VER) || defined(__MINGW32__) || defined(__MINGW64__)\n++  #define EV_SIZE_FMT \"%Iu\"\n++  #define EV_SSIZE_FMT \"%Id\"\n++ #else\n++  #define EV_SIZE_FMT \"%zu\"\n++  #define EV_SSIZE_FMT \"%zd\"\n++ #endif\n+ #define EV_SIZE_ARG(x) (x)\n+ #define EV_SSIZE_ARG(x) (x)\n+ #endif"
      },
      {
        "sha": "89abdb1b71ff81ffdcab8b138ae86d53b4a07442",
        "filename": "depends/patches/native_biplist/sorted_list.patch",
        "status": "added",
        "additions": 29,
        "deletions": 0,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/depends/patches/native_biplist/sorted_list.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/depends/patches/native_biplist/sorted_list.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/native_biplist/sorted_list.patch?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -0,0 +1,29 @@\n+--- a/biplist/__init__.py\t2014-10-26 19:03:11.000000000 +0000\n++++ b/biplist/__init__.py\t2016-07-19 19:30:17.663521999 +0000\n+@@ -541,7 +541,7 @@\n+             return HashableWrapper(n)\n+         elif isinstance(root, dict):\n+             n = {}\n+-            for key, value in iteritems(root):\n++            for key, value in sorted(iteritems(root)):\n+                 n[self.wrapRoot(key)] = self.wrapRoot(value)\n+             return HashableWrapper(n)\n+         elif isinstance(root, list):\n+@@ -616,7 +616,7 @@\n+             elif isinstance(obj, dict):\n+                 size = proc_size(len(obj))\n+                 self.incrementByteCount('dictBytes', incr=1+size)\n+-                for key, value in iteritems(obj):\n++                for key, value in sorted(iteritems(obj)):\n+                     check_key(key)\n+                     self.computeOffsets(key, asReference=True)\n+                     self.computeOffsets(value, asReference=True)\n+@@ -714,7 +714,7 @@\n+                 keys = []\n+                 values = []\n+                 objectsToWrite = []\n+-                for key, value in iteritems(obj):\n++                for key, value in sorted(iteritems(obj)):\n+                     keys.append(key)\n+                     values.append(value)\n+                 for key in keys:"
      },
      {
        "sha": "1a32340be5b13ae1d5be3e775462c3052c12953a",
        "filename": "depends/patches/native_mac_alias/python3.patch",
        "status": "added",
        "additions": 72,
        "deletions": 0,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/depends/patches/native_mac_alias/python3.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/depends/patches/native_mac_alias/python3.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/native_mac_alias/python3.patch?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -0,0 +1,72 @@\n+diff -dur a/mac_alias/alias.py b/mac_alias/alias.py\n+--- a/mac_alias/alias.py\t2015-10-19 12:12:48.000000000 +0200\n++++ b/mac_alias/alias.py\t2016-04-03 12:13:12.037159417 +0200\n+@@ -243,10 +243,10 @@\n+         alias = Alias()\n+         alias.appinfo = appinfo\n+             \n+-        alias.volume = VolumeInfo (volname.replace('/',':'),\n++        alias.volume = VolumeInfo (volname.decode().replace('/',':'),\n+                                    voldate, fstype, disktype,\n+                                    volattrs, volfsid)\n+-        alias.target = TargetInfo (kind, filename.replace('/',':'),\n++        alias.target = TargetInfo (kind, filename.decode().replace('/',':'),\n+                                    folder_cnid, cnid,\n+                                    crdate, creator_code, type_code)\n+         alias.target.levels_from = levels_from\n+@@ -261,9 +261,9 @@\n+                 b.read(1)\n+ \n+             if tag == TAG_CARBON_FOLDER_NAME:\n+-                alias.target.folder_name = value.replace('/',':')\n++                alias.target.folder_name = value.decode().replace('/',':')\n+             elif tag == TAG_CNID_PATH:\n+-                alias.target.cnid_path = struct.unpack(b'>%uI' % (length // 4),\n++                alias.target.cnid_path = struct.unpack('>%uI' % (length // 4),\n+                                                            value)\n+             elif tag == TAG_CARBON_PATH:\n+                 alias.target.carbon_path = value\n+@@ -298,9 +298,9 @@\n+                 alias.target.creation_date \\\n+                     = mac_epoch + datetime.timedelta(seconds=seconds)\n+             elif tag == TAG_POSIX_PATH:\n+-                alias.target.posix_path = value\n++                alias.target.posix_path = value.decode()\n+             elif tag == TAG_POSIX_PATH_TO_MOUNTPOINT:\n+-                alias.volume.posix_path = value\n++                alias.volume.posix_path = value.decode()\n+             elif tag == TAG_RECURSIVE_ALIAS_OF_DISK_IMAGE:\n+                 alias.volume.disk_image_alias = Alias.from_bytes(value)\n+             elif tag == TAG_USER_HOME_LENGTH_PREFIX:\n+@@ -422,13 +422,13 @@\n+         #       (so doing so is ridiculous, and nothing could rely on it).\n+         b.write(struct.pack(b'>h28pI2shI64pII4s4shhI2s10s',\n+                             self.target.kind,\n+-                            carbon_volname, voldate,\n++                            carbon_volname, int(voldate),\n+                             self.volume.fs_type,\n+                             self.volume.disk_type,\n+                             self.target.folder_cnid,\n+                             carbon_filename,\n+                             self.target.cnid,\n+-                            crdate,\n++                            int(crdate),\n+                             self.target.creator_code,\n+                             self.target.type_code,\n+                             self.target.levels_from,\n+@@ -449,12 +449,12 @@\n+ \n+         b.write(struct.pack(b'>hhQhhQ',\n+                 TAG_HIGH_RES_VOLUME_CREATION_DATE,\n+-                8, long(voldate * 65536),\n++                8, int(voldate * 65536),\n+                 TAG_HIGH_RES_CREATION_DATE,\n+-                8, long(crdate * 65536)))\n++                8, int(crdate * 65536)))\n+ \n+         if self.target.cnid_path:\n+-            cnid_path = struct.pack(b'>%uI' % len(self.target.cnid_path),\n++            cnid_path = struct.pack('>%uI' % len(self.target.cnid_path),\n+                                     *self.target.cnid_path)\n+             b.write(struct.pack(b'>hh', TAG_CNID_PATH,\n+                                  len(cnid_path)))"
      },
      {
        "sha": "08286d8420bb30541686b9b937b9828704c1c72a",
        "filename": "depends/patches/qt/configure-xcoderun.patch",
        "status": "added",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/depends/patches/qt/configure-xcoderun.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/depends/patches/qt/configure-xcoderun.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/configure-xcoderun.patch?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -0,0 +1,25 @@\n+--- old/qtbase/configure\n++++ new/qtbase/configure\n+@@ -543,7 +543,7 @@ if [ \"$BUILD_ON_MAC\" = \"yes\" ]; then\n+         exit 2\n+     fi\n+ \n+-    if ! /usr/bin/xcrun -find xcrun >/dev/null 2>&1; then\n++    if ! /usr/bin/xcrun -find xcodebuild >/dev/null 2>&1; then\n+         echo >&2\n+         echo \"   Xcode not set up properly. You may need to confirm the license\" >&2\n+         echo \"   agreement by running /usr/bin/xcodebuild without arguments.\" >&2\n+diff --git a/mkspecs/features/mac/default_pre.prf b/mkspecs/features/mac/default_pre.prf\n+index 0cc8cd6..5df99d1 100644\n+--- old/qtbase/mkspecs/features/mac/default_pre.prf\n++++ new/qtbase/mkspecs/features/mac/default_pre.prf\n+@@ -12,7 +12,7 @@ isEmpty(QMAKE_XCODE_DEVELOPER_PATH) {\n+         error(\"Xcode is not installed in $${QMAKE_XCODE_DEVELOPER_PATH}. Please use xcode-select to choose Xcode installation path.\")\n+ \n+     # Make sure Xcode is set up properly\n+-    isEmpty($$list($$system(\"/usr/bin/xcrun -find xcrun 2>/dev/null\"))): \\\n++    isEmpty($$list($$system(\"/usr/bin/xcrun -find xcodebuild 2>/dev/null\"))): \\\n+         error(\"Xcode not set up properly. You may need to confirm the license agreement by running /usr/bin/xcodebuild.\")\n+ }\n+ \n+-- "
      },
      {
        "sha": "c7dbebedce831edba990aeecc2dd9c2a5941430e",
        "filename": "depends/patches/qt/fix-xcb-include-order.patch",
        "status": "modified",
        "additions": 16,
        "deletions": 12,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/depends/patches/qt/fix-xcb-include-order.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/depends/patches/qt/fix-xcb-include-order.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/fix-xcb-include-order.patch?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -1,15 +1,15 @@\n --- old/qtbase/src/plugins/platforms/xcb/xcb_qpa_lib.pro 2015-03-17 02:06:42.705930685 +0000\n +++ new/qtbase/src/plugins/platforms/xcb/xcb_qpa_lib.pro 2015-03-17 02:08:41.281926351 +0000\n-@@ -94,8 +94,6 @@\n-\n+@@ -74,8 +74,6 @@\n+ \n  DEFINES += $$QMAKE_DEFINES_XCB\n  LIBS += $$QMAKE_LIBS_XCB\n -QMAKE_CXXFLAGS += $$QMAKE_CFLAGS_XCB\n -QMAKE_CFLAGS += $$QMAKE_CFLAGS_XCB\n-\n+ \n  CONFIG += qpa/genericunixfontdatabase\n-\n-@@ -104,7 +102,8 @@\n+ \n+@@ -87,7 +85,8 @@\n  contains(QT_CONFIG, xcb-qt) {\n      DEFINES += XCB_USE_RENDER\n      XCB_DIR = ../../../3rdparty/xcb\n@@ -18,28 +18,32 @@\n +    QMAKE_CXXFLAGS += -I$$XCB_DIR/include -I$$XCB_DIR/sysinclude $$QMAKE_CFLAGS_XCB\n      LIBS += -lxcb -L$$OUT_PWD/xcb-static -lxcb-static\n  } else {\n-     LIBS += -lxcb -lxcb-image -lxcb-icccm -lxcb-sync -lxcb-xfixes -lxcb-shm -lxcb-randr -lxcb-shape -lxcb-keysyms\n+     LIBS += -lxcb -lxcb-image -lxcb-icccm -lxcb-sync -lxcb-xfixes -lxcb-shm -lxcb-randr -lxcb-shape -lxcb-keysyms -lxcb-xinerama\n --- old/qtbase/src/plugins/platforms/xcb/xcb-static/xcb-static.pro      2015-03-17 02:07:04.641929383 +0000\n +++ new/qtbase/src/plugins/platforms/xcb/xcb-static/xcb-static.pro      2015-03-17 02:10:15.485922059 +0000\n-@@ -8,7 +8,8 @@\n-\n+@@ -9,7 +9,8 @@\n+ \n  XCB_DIR = ../../../../3rdparty/xcb\n-\n+ \n -INCLUDEPATH += $$XCB_DIR/include $$XCB_DIR/include/xcb $$XCB_DIR/sysinclude\n +QMAKE_CFLAGS += -I$$XCB_DIR/include -I$$XCB_DIR/include/xcb -I$$XCB_DIR/sysinclude\n +QMAKE_CXXFLAGS += -I$$XCB_DIR/include -I$$XCB_DIR/include/xcb -I$$XCB_DIR/sysinclude\n-\n+ \n  QMAKE_CXXFLAGS += $$QMAKE_CFLAGS_XCB\n  QMAKE_CFLAGS += $$QMAKE_CFLAGS_XCB\n --- old/qtbase/src/plugins/platforms/xcb/xcb-plugin.pro\t2015-07-24 16:02:59.530038830 -0400\n +++ new/qtbase/src/plugins/platforms/xcb/xcb-plugin.pro\t2015-07-24 16:01:22.106037459 -0400\n-@@ -11,3 +11,9 @@\n+@@ -6,6 +6,13 @@\n      qxcbmain.cpp\n  OTHER_FILES += xcb.json README\n-\n+ \n +contains(QT_CONFIG, xcb-qt) {\n +    DEFINES += XCB_USE_RENDER\n +    XCB_DIR = ../../../3rdparty/xcb\n +    QMAKE_CFLAGS += -I$$XCB_DIR/include -I$$XCB_DIR/sysinclude $$QMAKE_CFLAGS_XCB\n +    QMAKE_CXXFLAGS += -I$$XCB_DIR/include -I$$XCB_DIR/sysinclude $$QMAKE_CFLAGS_XCB\n +}\n++\n+ PLUGIN_TYPE = platforms\n+ PLUGIN_CLASS_NAME = QXcbIntegrationPlugin\n+ !equals(TARGET, $$QT_DEFAULT_QPA_PLUGIN): PLUGIN_EXTENDS = -"
      },
      {
        "sha": "3772db4f8b804766d7d1b6eb7a1705609a2cc368",
        "filename": "depends/patches/qt/fix_qt_pkgconfig.patch",
        "status": "added",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/depends/patches/qt/fix_qt_pkgconfig.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/depends/patches/qt/fix_qt_pkgconfig.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/fix_qt_pkgconfig.patch?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -0,0 +1,11 @@\n+--- old/qtbase/mkspecs/features/qt_module.prf 2016-03-17 02:06:42.705930685 +0000\n++++ new/qtbase/mkspecs/features/qt_module.prf 2016-03-17 02:06:42.705930685 +0000\n+@@ -244,7 +244,7 @@\n+ load(qt_targets)\n+ \n+ # this builds on top of qt_common\n+-!internal_module:!lib_bundle:if(unix|mingw) {\n++unix|mingw {\n+     CONFIG += create_pc\n+     QMAKE_PKGCONFIG_DESTDIR = pkgconfig\n+     host_build: \\"
      },
      {
        "sha": "f8f6fb04b0b70db71dc5b2c75d2a5cfb6bc48893",
        "filename": "depends/patches/qt46/stlfix.patch",
        "status": "removed",
        "additions": 0,
        "deletions": 10,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9df179d2e3abdee7d1f255d9be17c8b72dff06a/depends/patches/qt46/stlfix.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9df179d2e3abdee7d1f255d9be17c8b72dff06a/depends/patches/qt46/stlfix.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt46/stlfix.patch?ref=e9df179d2e3abdee7d1f255d9be17c8b72dff06a",
        "patch": "@@ -1,10 +0,0 @@\n---- old/config.tests/unix/stl/stltest.cpp\t2011-06-23 03:45:23.000000000 -0400\n-+++ new/config.tests/unix/stl/stltest.cpp\t2014-08-28 00:54:04.154837604 -0400\n-@@ -49,6 +49,7 @@\n- #include <vector>\n- #include <algorithm>\n- #include <iostream>\n-+#include <cstddef>\n- \n- // something mean to see if the compiler and C++ standard lib are good enough\n- template<class K, class T>"
      },
      {
        "sha": "f704b3d94fda8a2bd90ac422c8b267b02bc60f5c",
        "filename": "depends/patches/zeromq/9114d3957725acd34aa8b8d011585812f3369411.patch",
        "status": "added",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/depends/patches/zeromq/9114d3957725acd34aa8b8d011585812f3369411.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/depends/patches/zeromq/9114d3957725acd34aa8b8d011585812f3369411.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/zeromq/9114d3957725acd34aa8b8d011585812f3369411.patch?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -0,0 +1,22 @@\n+From 9114d3957725acd34aa8b8d011585812f3369411 Mon Sep 17 00:00:00 2001\n+From: Jeroen Ooms <jeroenooms@gmail.com>\n+Date: Tue, 20 Oct 2015 13:10:38 +0200\n+Subject: [PATCH] enable static libraries on mingw\n+\n+---\n+ configure.ac | 2 +-\n+ 1 file changed, 1 insertion(+), 1 deletion(-)\n+\n+diff --git a/configure.ac b/configure.ac\n+index 393505b..e92131a 100644\n+--- a/configure.ac\n++++ b/configure.ac\n+@@ -265,7 +265,7 @@ case \"${host_os}\" in\n+         libzmq_dso_visibility=\"no\"\n+\n+         if test \"x$enable_static\" = \"xyes\"; then\n+-            AC_MSG_ERROR([Building static libraries is not supported under MinGW32])\n++            CPPFLAGS=\"-DZMQ_STATIC\"\n+         fi\n+\n+ \t# Set FD_SETSIZE to 1024\n\\ No newline at end of file"
      },
      {
        "sha": "9aff2c179a1982e6af89a410d06c42d1a0fbad90",
        "filename": "depends/patches/zeromq/9e6745c12e0b100cd38acecc16ce7db02905e27c.patch",
        "status": "added",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/depends/patches/zeromq/9e6745c12e0b100cd38acecc16ce7db02905e27c.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/depends/patches/zeromq/9e6745c12e0b100cd38acecc16ce7db02905e27c.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/zeromq/9e6745c12e0b100cd38acecc16ce7db02905e27c.patch?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -0,0 +1,22 @@\n+From 9e6745c12e0b100cd38acecc16ce7db02905e27c Mon Sep 17 00:00:00 2001\n+From: David Millard <dmillard10@gmail.com>\n+Date: Tue, 10 May 2016 13:53:53 -0700\n+Subject: [PATCH] Fix autotools for static MinGW builds\n+\n+---\n+ configure.ac | 2 +-\n+ 1 file changed, 1 insertion(+), 1 deletion(-)\n+\n+diff --git a/configure.ac b/configure.ac\n+index 5a0fa14..def6ea7 100644\n+--- a/configure.ac\n++++ b/configure.ac\n+@@ -259,7 +259,7 @@ case \"${host_os}\" in\n+         libzmq_dso_visibility=\"no\"\n+\n+         if test \"x$enable_static\" = \"xyes\"; then\n+-            CPPFLAGS=\"-DZMQ_STATIC\"\n++            CPPFLAGS=\"-DZMQ_STATIC $CPPFLAGS\"\n+         fi\n+\n+ \t# Set FD_SETSIZE to 1024\n\\ No newline at end of file"
      },
      {
        "sha": "22850db8354290de5cf488ba14fdb5881dbe6672",
        "filename": "doc/Doxyfile",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/doc/Doxyfile",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/doc/Doxyfile",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/Doxyfile?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -34,7 +34,7 @@ PROJECT_NAME           = Bitcoin\n # This could be handy for archiving the generated documentation or \n # if some version control system is used.\n \n-PROJECT_NUMBER         = 0.12.99\n+PROJECT_NUMBER         = 0.13.99\n \n # Using the PROJECT_BRIEF tag one can provide an optional one line description \n # for a project that appears at the top of each page and should give viewer "
      },
      {
        "sha": "e4fa49614ac8c56baad4b43fa104b3f956054754",
        "filename": "doc/README.md",
        "status": "modified",
        "additions": 12,
        "deletions": 13,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/doc/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/doc/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README.md?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -1,26 +1,22 @@\n-Bitcoin Core 0.12.99\n+Bitcoin Core 0.13.99\n =====================\n \n Setup\n ---------------------\n-[Bitcoin Core](http://bitcoin.org/en/download) is the original Bitcoin client and it builds the backbone of the network. However, it downloads and stores the entire history of Bitcoin transactions (which is currently several GBs); depending on the speed of your computer and network connection, the synchronization process can take anywhere from a few hours to a day or more.\n+Bitcoin Core is the original Bitcoin client and it builds the backbone of the network. However, it downloads and stores the entire history of Bitcoin transactions (which is currently several GBs); depending on the speed of your computer and network connection, the synchronization process can take anywhere from a few hours to a day or more.\n+\n+To download Bitcoin Core, visit [bitcoincore.org](https://bitcoincore.org/en/releases/).\n \n Running\n ---------------------\n The following are some helpful notes on how to run Bitcoin on your native platform.\n \n ### Unix\n \n-You need the Qt4 run-time libraries to run Bitcoin-Qt. On Debian or Ubuntu:\n-\n-\tsudo apt-get install libqtgui4\n-\n Unpack the files into a directory and run:\n \n-- bin/32/bitcoin-qt (GUI, 32-bit) or bin/32/bitcoind (headless, 32-bit)\n-- bin/64/bitcoin-qt (GUI, 64-bit) or bin/64/bitcoind (headless, 64-bit)\n-\n-\n+- `bin/bitcoin-qt` (GUI) or\n+- `bin/bitcoind` (headless)\n \n ### Windows\n \n@@ -49,20 +45,21 @@ The following are developer notes on how to build Bitcoin on your native platfor\n \n Development\n ---------------------\n-The Bitcoin repo's [root README](https://github.com/bitcoin/bitcoin/blob/master/README.md) contains relevant information on the development process and automated testing.\n+The Bitcoin repo's [root README](/README.md) contains relevant information on the development process and automated testing.\n \n - [Developer Notes](developer-notes.md)\n-- [Multiwallet Qt Development](multiwallet-qt.md)\n - [Release Notes](release-notes.md)\n - [Release Process](release-process.md)\n - [Source Code Documentation (External Link)](https://dev.visucore.com/bitcoin/doxygen/)\n - [Translation Process](translation_process.md)\n - [Translation Strings Policy](translation_strings_policy.md)\n - [Unit Tests](unit-tests.md)\n+- [Travis CI](travis-ci.md)\n - [Unauthenticated REST Interface](REST-interface.md)\n - [Shared Libraries](shared-libraries.md)\n - [BIPS](bips.md)\n - [Dnsseed Policy](dnsseed-policy.md)\n+- [Benchmarking](benchmarking.md)\n \n ### Resources\n * Discuss on the [BitcoinTalk](https://bitcointalk.org/) forums, in the [Development & Technical Discussion board](https://bitcointalk.org/index.php?board=6.0).\n@@ -72,11 +69,13 @@ The Bitcoin repo's [root README](https://github.com/bitcoin/bitcoin/blob/master/\n ### Miscellaneous\n - [Assets Attribution](assets-attribution.md)\n - [Files](files.md)\n+- [Reduce Traffic](reduce-traffic.md)\n - [Tor Support](tor.md)\n - [Init Scripts (systemd/upstart/openrc)](init.md)\n+- [ZMQ](zmq.md)\n \n License\n ---------------------\n-Distributed under the [MIT software license](http://www.opensource.org/licenses/mit-license.php).\n+Distributed under the [MIT software license](/COPYING).\n This product includes software developed by the OpenSSL Project for use in the [OpenSSL Toolkit](https://www.openssl.org/). This product includes\n cryptographic software written by Eric Young ([eay@cryptsoft.com](mailto:eay@cryptsoft.com)), and UPnP software written by Thomas Bernard."
      },
      {
        "sha": "2a4460478c9d6a90105d95f3997065225d0e4ddd",
        "filename": "doc/README_osx.md",
        "status": "renamed",
        "additions": 33,
        "deletions": 19,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/doc/README_osx.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/doc/README_osx.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README_osx.md?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -1,21 +1,19 @@\n Deterministic OS X Dmg Notes.\n \n Working OS X DMGs are created in Linux by combining a recent clang,\n-the Apple's binutils (ld, ar, etc), and DMG authoring tools.\n+the Apple binutils (ld, ar, etc) and DMG authoring tools.\n \n Apple uses clang extensively for development and has upstreamed the necessary\n functionality so that a vanilla clang can take advantage. It supports the use\n of -F, -target, -mmacosx-version-min, and --sysroot, which are all necessary\n-when building for OS X. A pre-compiled version of 3.2 is used because it was not\n-available in the Precise repositories at the time this work was started. In the\n-future, it can be switched to use system packages instead.\n+when building for OS X.\n \n Apple's version of binutils (called cctools) contains lots of functionality\n missing in the FSF's binutils. In addition to extra linker options for\n frameworks and sysroots, several other tools are needed as well such as\n install_name_tool, lipo, and nmedit. These do not build under linux, so they\n have been patched to do so. The work here was used as a starting point:\n-https://github.com/mingwandroid/toolchain4\n+[mingwandroid/toolchain4](https://github.com/mingwandroid/toolchain4).\n \n In order to build a working toolchain, the following source packages are needed\n from Apple: cctools, dyld, and ld64.\n@@ -24,21 +22,39 @@ These tools inject timestamps by default, which produce non-deterministic\n binaries. The ZERO_AR_DATE environment variable is used to disable that.\n \n This version of cctools has been patched to use the current version of clang's\n-headers and and its libLTO.so rather than those from llvmgcc, as it was\n+headers and its libLTO.so rather than those from llvmgcc, as it was\n originally done in toolchain4.\n \n To complicate things further, all builds must target an Apple SDK. These SDKs\n are free to download, but not redistributable.\n-To obtain it, register for a developer account, then download the Xcode 6.1.1 dmg:\n-https://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_6.1.1/xcode_6.1.1.dmg\n+To obtain it, register for a developer account, then download the [Xcode 7.3.1 dmg](https://developer.apple.com/devcenter/download.action?path=/Developer_Tools/Xcode_7.3.1/Xcode_7.3.1.dmg).\n \n This file is several gigabytes in size, but only a single directory inside is\n-needed: Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.9.sdk\n+needed:\n+```\n+Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk\n+```\n \n Unfortunately, the usual linux tools (7zip, hpmount, loopback mount) are incapable of opening this file.\n-To create a tarball suitable for Gitian input, mount the dmg in OS X, then create it with:\n-  $ tar -C /Volumes/Xcode/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/ -czf MacOSX10.9.sdk.tar.gz MacOSX10.9.sdk\n-\n+To create a tarball suitable for Gitian input, there are two options:\n+\n+Using Mac OS X, you can mount the dmg, and then create it with:\n+```\n+  $ hdiutil attach Xcode_7.3.1.dmg\n+  $ tar -C /Volumes/Xcode/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/ -czf MacOSX10.11.sdk.tar.gz MacOSX10.11.sdk\n+```\n+\n+Alternatively, you can use 7zip and SleuthKit to extract the files one by one.\n+The script contrib/macdeploy/extract-osx-sdk.sh automates this. First ensure\n+the dmg file is in the current directory, and then run the script. You may wish\n+to delete the intermediate 5.hfs file and MacOSX10.11.sdk (the directory) when\n+you've confirmed the extraction succeeded.\n+\n+```bash\n+apt-get install p7zip-full sleuthkit\n+contrib/macdeploy/extract-osx-sdk.sh\n+rm -rf 5.hfs MacOSX10.11.sdk\n+```\n \n The Gitian descriptors build 2 sets of files: Linux tools, then Apple binaries\n which are created using these tools. The build process has been designed to\n@@ -48,24 +64,22 @@ fully deterministic and may be freely redistributed.\n genisoimage is used to create the initial DMG. It is not deterministic as-is,\n so it has been patched. A system genisoimage will work fine, but it will not\n be deterministic because the file-order will change between invocations.\n-The patch can be seen here:\n-https://raw.githubusercontent.com/theuni/osx-cross-depends/master/patches/cdrtools/genisoimage.diff\n+The patch can be seen here:  [theuni/osx-cross-depends](https://raw.githubusercontent.com/theuni/osx-cross-depends/master/patches/cdrtools/genisoimage.diff).\n No effort was made to fix this cleanly, so it likely leaks memory badly. But\n it's only used for a single invocation, so that's no real concern.\n \n genisoimage cannot compress DMGs, so afterwards, the 'dmg' tool from the\n libdmg-hfsplus project is used to compress it. There are several bugs in this\n tool and its maintainer has seemingly abandoned the project. It has been forked\n-and is available (with fixes) here: https://github.com/theuni/libdmg-hfsplus .\n+and is available (with fixes) here: [theuni/libdmg-hfsplus](https://github.com/theuni/libdmg-hfsplus).\n \n The 'dmg' tool has the ability to create DMGs from scratch as well, but this\n functionality is broken. Only the compression feature is currently used.\n Ideally, the creation could be fixed and genisoimage would no longer be necessary.\n \n Background images and other features can be added to DMG files by inserting a\n-.DS_Store before creation. The easiest way to create this file is to build a\n-DMG without one, move it to a device running OS X, customize the layout, then\n-grab the .DS_Store file for later use. That is the approach taken here.\n+.DS_Store before creation. This is generated by the script\n+contrib/macdeploy/custom_dsstore.py.\n \n As of OS X Mavericks (10.9), using an Apple-blessed key to sign binaries is a\n requirement in order to satisfy the new Gatekeeper requirements. Because this\n@@ -78,6 +92,6 @@ build process to remain somewhat deterministic. Here's how it works:\n   that have been previously (deterministically) built in order to create a\n   final dmg.\n - The Apple keyholder uses this unsigned app to create a detached signature,\n-  using the script that is also included there.\n+  using the script that is also included there. Detached signatures are available from this [repository](https://github.com/bitcoin-core/bitcoin-detached-sigs).\n - Builders feed the unsigned app + detached signature back into Gitian. It\n   uses the pre-built tools to recombine the pieces into a deterministic dmg.",
        "previous_filename": "doc/README_osx.txt"
      },
      {
        "sha": "74a05138a42806c061983b7ad6d3602085cca2d0",
        "filename": "doc/README_windows.txt",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/doc/README_windows.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/doc/README_windows.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README_windows.txt?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -1,4 +1,4 @@\n-Bitcoin Core 0.12.99\r\n+Bitcoin Core 0.13.99\r\n =====================\r\n \r\n Intro\r"
      },
      {
        "sha": "7fbb17403027127d529cec77ab9712f6e9b298f9",
        "filename": "doc/REST-interface.md",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/doc/REST-interface.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/doc/REST-interface.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/REST-interface.md?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -3,6 +3,8 @@ Unauthenticated REST Interface\n \n The REST API can be enabled with the `-rest` option.\n \n+The interface runs on the same port as the JSON-RPC interface, by default port 8332 for mainnet and port 18332 for testnet.\n+\n Supported API\n -------------\n "
      },
      {
        "sha": "0ba75afcda3cbcef4c024c9acec21e35f40017c9",
        "filename": "doc/benchmarking.md",
        "status": "added",
        "additions": 30,
        "deletions": 0,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/doc/benchmarking.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/doc/benchmarking.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/benchmarking.md?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -0,0 +1,30 @@\n+Benchmarking\n+============\n+\n+Bitcoin Core has an internal benchmarking framework, with benchmarks\n+for cryptographic algorithms such as SHA1, SHA256, SHA512 and RIPEMD160. As well as the rolling bloom filter.\n+\n+After compiling bitcoin-core, the benchmarks can be run with:\n+`src/bench/bench_bitcoin`\n+\n+The output will look similar to:\n+```\n+#Benchmark,count,min,max,average\n+RIPEMD160,448,0.001245033173334,0.002638196945190,0.002461894814457\n+RollingBloom-refresh,1,0.000635000000000,0.000635000000000,0.000635000000000\n+RollingBloom-refresh,1,0.000108000000000,0.000108000000000,0.000108000000000\n+RollingBloom-refresh,1,0.000107000000000,0.000107000000000,0.000107000000000\n+RollingBloom-refresh,1,0.000204000000000,0.000204000000000,0.000204000000000\n+SHA1,640,0.000909024336207,0.001938136418660,0.001843086257577\n+SHA256,256,0.002209486499909,0.008500099182129,0.004300644621253\n+SHA512,384,0.001319904176016,0.002813005447388,0.002615700786312\n+Sleep100ms,10,0.205592155456543,0.210056066513062,0.104166316986084\n+Trig,67108864,0.000000014997003,0.000000015448112,0.000000015188842\n+```\n+\n+More benchmarks are needed for, in no particular order:\n+- Script Validation\n+- CCoinDBView caching\n+- Coins database\n+- Memory pool\n+- Wallet coin selection"
      },
      {
        "sha": "040439fbcb195ba7e8a2957f259c430deaf97091",
        "filename": "doc/bips.md",
        "status": "modified",
        "additions": 15,
        "deletions": 2,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/doc/bips.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/doc/bips.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/bips.md?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -1,5 +1,6 @@\n-BIPs that are implemented by Bitcoin Core (up-to-date up to **v0.12.0**):\n+BIPs that are implemented by Bitcoin Core (up-to-date up to **v0.13.0**):\n \n+* [`BIP 9`](https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki): The changes allowing multiple soft-forks to be deployed in parallel have been implemented since **v0.12.1**  ([PR #7575](https://github.com/bitcoin/bitcoin/pull/7575))\n * [`BIP 11`](https://github.com/bitcoin/bips/blob/master/bip-0011.mediawiki): Multisig outputs are standard since **v0.6.0** ([PR #669](https://github.com/bitcoin/bitcoin/pull/669)).\n * [`BIP 13`](https://github.com/bitcoin/bips/blob/master/bip-0013.mediawiki): The address format for P2SH addresses has been implemented since **v0.6.0** ([PR #669](https://github.com/bitcoin/bitcoin/pull/669)).\n * [`BIP 14`](https://github.com/bitcoin/bips/blob/master/bip-0014.mediawiki): The subversion string is being used as User Agent since **v0.6.0** ([PR #669](https://github.com/bitcoin/bitcoin/pull/669)).\n@@ -9,13 +10,25 @@ BIPs that are implemented by Bitcoin Core (up-to-date up to **v0.12.0**):\n * [`BIP 23`](https://github.com/bitcoin/bips/blob/master/bip-0023.mediawiki): Some extensions to GBT have been implemented since **v0.10.0rc1**, including longpolling and block proposals ([PR #1816](https://github.com/bitcoin/bitcoin/pull/1816)).\n * [`BIP 30`](https://github.com/bitcoin/bips/blob/master/bip-0030.mediawiki): The evaluation rules to forbid creating new transactions with the same txid as previous not-fully-spent transactions were implemented since **v0.6.0**, and the rule took effect on *March 15th 2012* ([PR #915](https://github.com/bitcoin/bitcoin/pull/915)).\n * [`BIP 31`](https://github.com/bitcoin/bips/blob/master/bip-0031.mediawiki): The 'pong' protocol message (and the protocol version bump to 60001) has been implemented since **v0.6.1** ([PR #1081](https://github.com/bitcoin/bitcoin/pull/1081)).\n+* [`BIP 32`](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki): Hierarchical Deterministic Wallets has been implemented since **v0.13.0** ([PR #8035](https://github.com/bitcoin/bitcoin/pull/8035)).\n * [`BIP 34`](https://github.com/bitcoin/bips/blob/master/bip-0034.mediawiki): The rule that requires blocks to contain their height (number) in the coinbase input, and the introduction of version 2 blocks has been implemented since **v0.7.0**. The rule took effect for version 2 blocks as of *block 224413* (March 5th 2013), and version 1 blocks are no longer allowed since *block 227931* (March 25th 2013) ([PR #1526](https://github.com/bitcoin/bitcoin/pull/1526)).\n * [`BIP 35`](https://github.com/bitcoin/bips/blob/master/bip-0035.mediawiki): The 'mempool' protocol message (and the protocol version bump to 60002) has been implemented since **v0.7.0** ([PR #1641](https://github.com/bitcoin/bitcoin/pull/1641)).\n * [`BIP 37`](https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki): The bloom filtering for transaction relaying, partial merkle trees for blocks, and the protocol version bump to 70001 (enabling low-bandwidth SPV clients) has been implemented since **v0.8.0** ([PR #1795](https://github.com/bitcoin/bitcoin/pull/1795)).\n * [`BIP 42`](https://github.com/bitcoin/bips/blob/master/bip-0042.mediawiki): The bug that would have caused the subsidy schedule to resume after block 13440000 was fixed in **v0.9.2** ([PR #3842](https://github.com/bitcoin/bitcoin/pull/3842)).\n * [`BIP 61`](https://github.com/bitcoin/bips/blob/master/bip-0061.mediawiki): The 'reject' protocol message (and the protocol version bump to 70002) was added in **v0.9.0** ([PR #3185](https://github.com/bitcoin/bitcoin/pull/3185)).\n * [`BIP 65`](https://github.com/bitcoin/bips/blob/master/bip-0065.mediawiki): The CHECKLOCKTIMEVERIFY softfork was merged in **v0.12.0** ([PR #6351](https://github.com/bitcoin/bitcoin/pull/6351)), and backported to **v0.11.2** and **v0.10.4**. Mempool-only CLTV was added in [PR #6124](https://github.com/bitcoin/bitcoin/pull/6124).\n * [`BIP 66`](https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki): The strict DER rules and associated version 3 blocks have been implemented since **v0.10.0** ([PR #5713](https://github.com/bitcoin/bitcoin/pull/5713)).\n+* [`BIP 68`](https://github.com/bitcoin/bips/blob/master/bip-0068.mediawiki): Sequence locks have been implemented as of **v0.12.1**  ([PR #7184](https://github.com/bitcoin/bitcoin/pull/7184)), and have been activated since *block 419328*.\n * [`BIP 70`](https://github.com/bitcoin/bips/blob/master/bip-0070.mediawiki) [`71`](https://github.com/bitcoin/bips/blob/master/bip-0071.mediawiki) [`72`](https://github.com/bitcoin/bips/blob/master/bip-0072.mediawiki): Payment Protocol support has been available in Bitcoin Core GUI since **v0.9.0** ([PR #5216](https://github.com/bitcoin/bitcoin/pull/5216)).\n-* [`BIP 111`](https://github.com/bitcoin/bips/blob/master/bip-0111.mediawiki): `NODE_BLOOM` service bit added, but only enforced for peer versions `>=70011` as of **v0.12.0** ([PR #6579](https://github.com/bitcoin/bitcoin/pull/6579)).\n+* [`BIP 111`](https://github.com/bitcoin/bips/blob/master/bip-0111.mediawiki): `NODE_BLOOM` service bit added, and enforced for all peer versions as of **v0.13.0** ([PR #6579](https://github.com/bitcoin/bitcoin/pull/6579) and [PR #6641](https://github.com/bitcoin/bitcoin/pull/6641)).\n+* [`BIP 112`](https://github.com/bitcoin/bips/blob/master/bip-0112.mediawiki): The CHECKSEQUENCEVERIFY opcode has been implemented since **v0.12.1** ([PR #7524](https://github.com/bitcoin/bitcoin/pull/7524)) and has been activated since *block 419328*.\n+* [`BIP 113`](https://github.com/bitcoin/bips/blob/master/bip-0113.mediawiki): Median time past lock-time calculations have been implemented since **v0.12.1** ([PR #6566](https://github.com/bitcoin/bitcoin/pull/6566)) and have been activated since *block 419328*.\n+* [`BIP 125`](https://github.com/bitcoin/bips/blob/master/bip-0125.mediawiki): Opt-in full replace-by-fee signaling honoured in mempool and mining as of **v0.12.0** ([PR 6871](https://github.com/bitcoin/bitcoin/pull/6871)).\n * [`BIP 130`](https://github.com/bitcoin/bips/blob/master/bip-0130.mediawiki): direct headers announcement is negotiated with peer versions `>=70012` as of **v0.12.0** ([PR 6494](https://github.com/bitcoin/bitcoin/pull/6494)).\n+* [`BIP 133`](https://github.com/bitcoin/bips/blob/master/bip-0133.mediawiki): feefilter messages are respected and sent for peer versions `>=70013` as of **v0.13.0** ([PR 7542](https://github.com/bitcoin/bitcoin/pull/7542)).\n+* [`BIP 141`](https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki): Segregated Witness (Consensus Layer) as of **v0.13.0** ([PR 8149](https://github.com/bitcoin/bitcoin/pull/8149)).\n+* [`BIP 143`](https://github.com/bitcoin/bips/blob/master/bip-0143.mediawiki): Transaction Signature Verification for Version 0 Witness Program as of **v0.13.0** ([PR 8149](https://github.com/bitcoin/bitcoin/pull/8149)).\n+* [`BIP 144`](https://github.com/bitcoin/bips/blob/master/bip-0144.mediawiki): Segregated Witness as of **0.13.0** ([PR 8149](https://github.com/bitcoin/bitcoin/pull/8149)).\n+* [`BIP 145`](https://github.com/bitcoin/bips/blob/master/bip-0145.mediawiki): getblocktemplate updates for Segregated Witness as of **v0.13.0** ([PR 8149](https://github.com/bitcoin/bitcoin/pull/8149)).\n+* [`BIP 147`](https://github.com/bitcoin/bips/blob/master/bip-0147.mediawiki): NULLDUMMY softfork as of **v0.13.1** ([PR 8636](https://github.com/bitcoin/bitcoin/pull/8636)).\n+* [`BIP 152`](https://github.com/bitcoin/bips/blob/master/bip-0152.mediawiki): Compact block transfer and related optimizations are used as of **v0.13.0** ([PR 8068](https://github.com/bitcoin/bitcoin/pull/8068))."
      },
      {
        "sha": "55283d6dcea93c44f2a0b09a232a7a4be133d956",
        "filename": "doc/build-openbsd.md",
        "status": "modified",
        "additions": 29,
        "deletions": 17,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/doc/build-openbsd.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/doc/build-openbsd.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-openbsd.md?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -1,6 +1,6 @@\n OpenBSD build guide\n ======================\n-(updated for OpenBSD 5.7)\n+(updated for OpenBSD 5.9)\n \n This guide describes how to build bitcoind and command-line utilities on OpenBSD.\n \n@@ -15,19 +15,18 @@ Run the following as root to install the base dependencies for building:\n pkg_add gmake libtool libevent\n pkg_add autoconf # (select highest version, e.g. 2.69)\n pkg_add automake # (select highest version, e.g. 1.15)\n-pkg_add python # (select version 2.7.x, not 3.x)\n-ln -sf /usr/local/bin/python2.7 /usr/local/bin/python2\n+pkg_add python # (select highest version, e.g. 3.5)\n ```\n \n-The default C++ compiler that comes with OpenBSD 5.7 is g++ 4.2. This version is old (from 2007), and is not able to compile the current version of Bitcoin Core. It is possible to patch it up to compile, but with the planned transition to C++11 this is a losing battle. So here we will be installing a newer compiler.\n+The default C++ compiler that comes with OpenBSD 5.9 is g++ 4.2. This version is old (from 2007), and is not able to compile the current version of Bitcoin Core, primarily as it has no C++11 support, but even before there were issues. So here we will be installing a newer compiler.\n \n GCC\n -------\n \n You can install a newer version of gcc with:\n \n ```bash\n-pkg_add g++ # (select newest 4.x version, e.g. 4.9.2)\n+pkg_add g++ # (select newest 4.x version, e.g. 4.9.3)\n ```\n \n This compiler will not overwrite the system compiler, it will be installed as `egcc` and `eg++` in `/usr/local/bin`.\n@@ -49,18 +48,15 @@ BOOST_PREFIX=\"${BITCOIN_ROOT}/boost\"\n mkdir -p $BOOST_PREFIX\n \n # Fetch the source and verify that it is not tampered with\n-wget http://heanet.dl.sourceforge.net/project/boost/boost/1.59.0/boost_1_59_0.tar.bz2\n-echo '727a932322d94287b62abb1bd2d41723eec4356a7728909e38adb65ca25241ca  boost_1_59_0.tar.bz2' | sha256 -c\n-# MUST output: (SHA256) boost_1_59_0.tar.bz2: OK\n-tar -xjf boost_1_59_0.tar.bz2\n+curl -o boost_1_61_0.tar.bz2 http://heanet.dl.sourceforge.net/project/boost/boost/1.61.0/boost_1_61_0.tar.bz2\n+echo 'a547bd06c2fd9a71ba1d169d9cf0339da7ebf4753849a8f7d6fdb8feee99b640  boost_1_61_0.tar.bz2' | sha256 -c\n+# MUST output: (SHA256) boost_1_61_0.tar.bz2: OK\n+tar -xjf boost_1_61_0.tar.bz2\n \n-# Boost 1.59 needs two small patches for OpenBSD\n-cd boost_1_59_0\n+# Boost 1.61 needs one small patch for OpenBSD\n+cd boost_1_61_0\n # Also here: https://gist.githubusercontent.com/laanwj/bf359281dc319b8ff2e1/raw/92250de8404b97bb99d72ab898f4a8cb35ae1ea3/patch-boost_test_impl_execution_monitor_ipp.patch\n patch -p0 < /usr/ports/devel/boost/patches/patch-boost_test_impl_execution_monitor_ipp\n-# https://github.com/boostorg/filesystem/commit/90517e459681790a091566dce27ca3acabf9a70c\n-sed 's/__OPEN_BSD__/__OpenBSD__/g' < libs/filesystem/src/path.cpp > libs/filesystem/src/path.cpp.tmp\n-mv libs/filesystem/src/path.cpp.tmp libs/filesystem/src/path.cpp\n \n # Build w/ minimum configuration necessary for bitcoin\n echo 'using gcc : : eg++ : <cxxflags>\"-fvisibility=hidden -fPIC\" <linkflags>\"\" <archiver>\"ar\" <striper>\"strip\"  <ranlib>\"ranlib\" <rc>\"\" : ;' > user-config.jam\n@@ -84,7 +80,7 @@ BDB_PREFIX=\"${BITCOIN_ROOT}/db4\"\n mkdir -p $BDB_PREFIX\n \n # Fetch the source and verify that it is not tampered with\n-wget 'http://download.oracle.com/berkeley-db/db-4.8.30.NC.tar.gz'\n+curl -o db-4.8.30.NC.tar.gz 'http://download.oracle.com/berkeley-db/db-4.8.30.NC.tar.gz'\n echo '12edc0df75bf9abd7f82f821795bcee50f42cb2e5f76a6a281b85732798364ef  db-4.8.30.NC.tar.gz' | sha256 -c\n # MUST output: (SHA256) db-4.8.30.NC.tar.gz: OK\n tar -xzf db-4.8.30.NC.tar.gz\n@@ -93,9 +89,25 @@ tar -xzf db-4.8.30.NC.tar.gz\n cd db-4.8.30.NC/build_unix/\n #  Note: Do a static build so that it can be embedded into the executable, instead of having to find a .so at runtime\n ../dist/configure --enable-cxx --disable-shared --with-pic --prefix=$BDB_PREFIX CC=egcc CXX=eg++ CPP=ecpp\n-make install\n+make install # do NOT use -jX, this is broken\n ```\n \n+### Resource limits\n+\n+The standard ulimit restrictions in OpenBSD are very strict:\n+\n+    data(kbytes)         1572864\n+\n+This is, unfortunately, no longer enough to compile some `.cpp` files in the project,\n+at least with gcc 4.9.3 (see issue https://github.com/bitcoin/bitcoin/issues/6658).\n+If your user is in the `staff` group the limit can be raised with:\n+\n+    ulimit -d 3000000\n+\n+The change will only affect the current shell and processes spawned by it. To\n+make the change system-wide, change `datasize-cur` and `datasize-max` in\n+`/etc/login.conf`, and reboot.\n+\n ### Building Bitcoin Core\n \n **Important**: use `gmake`, not `make`. The non-GNU `make` will exit with a horrible error.\n@@ -123,7 +135,7 @@ To configure without wallet:\n \n Build and run the tests:\n ```bash\n-gmake\n+gmake # can use -jX here for parallelism\n gmake check\n ```\n "
      },
      {
        "sha": "bc90a305622d521e9c4fa9fb7b4dd5bc072bfc6d",
        "filename": "doc/build-osx.md",
        "status": "modified",
        "additions": 52,
        "deletions": 76,
        "changes": 128,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/doc/build-osx.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/doc/build-osx.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-osx.md?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -1,119 +1,95 @@\n Mac OS X Build Instructions and Notes\n ====================================\n-This guide will show you how to build bitcoind (headless client) for OS X.\n-\n-Notes\n------\n-\n-* Tested on OS X 10.7 through 10.11 on 64-bit Intel processors only.\n-\n-* All of the commands should be executed in a Terminal application. The\n-built-in one is located in `/Applications/Utilities`.\n+The commands in this guide should be executed in a Terminal application.\n+The built-in one is located in `/Applications/Utilities/Terminal.app`.\n \n Preparation\n -----------\n+Install the OS X command line tools:\n \n-You need to install Xcode with all the options checked so that the compiler\n-and everything is available in /usr not just /Developer. Xcode should be\n-available on your OS X installation media, but if not, you can get the\n-current version from https://developer.apple.com/xcode/. If you install\n-Xcode 4.3 or later, you'll need to install its command line tools. This can\n-be done in `Xcode > Preferences > Downloads > Components` and generally must\n-be re-done or updated every time Xcode is updated.\n+`xcode-select --install`\n \n-You will also need to install [Homebrew](http://brew.sh) in order to install library\n-dependencies.\n+When the popup appears, click `Install`.\n \n-The installation of the actual dependencies is covered in the instructions\n-sections below.\n+Then install [Homebrew](http://brew.sh).\n \n-Instructions: Homebrew\n+Dependencies\n ----------------------\n \n-#### Install dependencies using Homebrew\n-\n-    brew install autoconf automake berkeley-db4 libtool boost miniupnpc openssl pkg-config protobuf qt5 libevent\n+    brew install automake berkeley-db4 libtool boost --c++11 miniupnpc openssl pkg-config homebrew/versions/protobuf260 --c++11 qt5 libevent\n \n-NOTE: Building with Qt4 is still supported, however, could result in a broken UI. As such, building with Qt5 is recommended.\n+NOTE: Building with Qt4 is still supported, however, could result in a broken UI. Building with Qt5 is recommended.\n \n-### Building `bitcoin`\n+Build Bitcoin Core\n+------------------------\n \n-1. Clone the GitHub tree to get the source code and go into the directory.\n+1. Clone the bitcoin source code and cd into `bitcoin`\n \n-        git clone https://github.com/bitcoin/bitcoin.git\n+        git clone https://github.com/bitcoin/bitcoin\n         cd bitcoin\n \n 2.  Build bitcoin-core:\n-    This will configure and build the headless bitcoin binaries as well as the gui (if Qt is found).\n-    You can disable the gui build by passing `--without-gui` to configure.\n+\n+    Configure and build the headless bitcoin binaries as well as the GUI (if Qt is found).\n+\n+    You can disable the GUI build by passing `--without-gui` to configure.\n \n         ./autogen.sh\n         ./configure\n         make\n \n-3.  It is also a good idea to build and run the unit tests:\n+3.  It is recommended to build and run the unit tests:\n \n         make check\n \n-4.  (Optional) You can also install bitcoind to your path:\n+4.  You can also create a .dmg that contains the .app bundle (optional):\n \n-        make install\n+        make deploy\n \n-Use Qt Creator as IDE\n-------------------------\n-You can use Qt Creator as IDE, for debugging and for manipulating forms, etc.\n-Download Qt Creator from https://www.qt.io/download/. Download the \"community edition\" and only install Qt Creator (uncheck the rest during the installation process).\n+Running\n+-------\n \n-1. Make sure you installed everything through Homebrew mentioned above\n-2. Do a proper ./configure --enable-debug\n-3. In Qt Creator do \"New Project\" -> Import Project -> Import Existing Project\n-4. Enter \"bitcoin-qt\" as project name, enter src/qt as location\n-5. Leave the file selection as it is\n-6. Confirm the \"summary page\"\n-7. In the \"Projects\" tab select \"Manage Kits...\"\n-8. Select the default \"Desktop\" kit and select \"Clang (x86 64bit in /usr/bin)\" as compiler\n-9. Select LLDB as debugger (you might need to set the path to your installation)\n-10. Start debugging with Qt Creator\n+Bitcoin Core is now available at `./src/bitcoind`\n \n-Creating a release build\n-------------------------\n-You can ignore this section if you are building `bitcoind` for your own use.\n+Before running, it's recommended you create an RPC configuration file.\n \n-bitcoind/bitcoin-cli binaries are not included in the Bitcoin-Qt.app bundle.\n+    echo -e \"rpcuser=bitcoinrpc\\nrpcpassword=$(xxd -l 16 -p /dev/urandom)\" > \"/Users/${USER}/Library/Application Support/Bitcoin/bitcoin.conf\"\n \n-If you are building `bitcoind` or `Bitcoin Core` for others, your build machine should be set up\n-as follows for maximum compatibility:\n+    chmod 600 \"/Users/${USER}/Library/Application Support/Bitcoin/bitcoin.conf\"\n \n-All dependencies should be compiled with these flags:\n+The first time you run bitcoind, it will start downloading the blockchain. This process could take several hours.\n \n- -mmacosx-version-min=10.7\n- -arch x86_64\n- -isysroot $(xcode-select --print-path)/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.7.sdk\n+You can monitor the download process by looking at the debug.log file:\n \n-Once dependencies are compiled, see [doc/release-process.md](release-process.md) for how the Bitcoin Core\n-bundle is packaged and signed to create the .dmg disk image that is distributed.\n+    tail -f $HOME/Library/Application\\ Support/Bitcoin/debug.log\n \n-Running\n+Other commands:\n -------\n \n-It's now available at `./bitcoind`, provided that you are still in the `src`\n-directory. We have to first create the RPC configuration file, though.\n-\n-Run `./bitcoind` to get the filename where it should be put, or just try these\n-commands:\n+    ./src/bitcoind -daemon # Starts the bitcoin daemon.\n+    ./src/bitcoin-cli --help # Outputs a list of command-line options.\n+    ./src/bitcoin-cli help # Outputs a list of RPC commands when the daemon is running.\n \n-    echo -e \"rpcuser=bitcoinrpc\\nrpcpassword=$(xxd -l 16 -p /dev/urandom)\" > \"/Users/${USER}/Library/Application Support/Bitcoin/bitcoin.conf\"\n-    chmod 600 \"/Users/${USER}/Library/Application Support/Bitcoin/bitcoin.conf\"\n+Using Qt Creator as IDE\n+------------------------\n+You can use Qt Creator as an IDE, for bitcoin development.\n+Download and install the community edition of [Qt Creator](https://www.qt.io/download/).\n+Uncheck everything except Qt Creator during the installation process.\n \n-The next time you run it, it will start downloading the blockchain, but it won't\n-output anything while it's doing this. This process may take several hours;\n-you can monitor its process by looking at the debug.log file, like this:\n+1. Make sure you installed everything through Homebrew mentioned above\n+2. Do a proper ./configure --enable-debug\n+3. In Qt Creator do \"New Project\" -> Import Project -> Import Existing Project\n+4. Enter \"bitcoin-qt\" as project name, enter src/qt as location\n+5. Leave the file selection as it is\n+6. Confirm the \"summary page\"\n+7. In the \"Projects\" tab select \"Manage Kits...\"\n+8. Select the default \"Desktop\" kit and select \"Clang (x86 64bit in /usr/bin)\" as compiler\n+9. Select LLDB as debugger (you might need to set the path to your installation)\n+10. Start debugging with Qt Creator\n \n-    tail -f $HOME/Library/Application\\ Support/Bitcoin/debug.log\n+Notes\n+-----\n \n-Other commands:\n--------\n+* Tested on OS X 10.7 through 10.11 on 64-bit Intel processors only.\n \n-    ./bitcoind -daemon # to start the bitcoin daemon.\n-    ./bitcoin-cli --help  # for a list of command-line options.\n-    ./bitcoin-cli help    # When the daemon is running, to get a list of RPC commands\n+* Building with downloaded Qt binaries is not officially supported. See the notes in [#7714](https://github.com/bitcoin/bitcoin/issues/7714)"
      },
      {
        "sha": "62e3e793e97f300fbc9935619e7024b7254bdfaf",
        "filename": "doc/build-unix.md",
        "status": "modified",
        "additions": 82,
        "deletions": 10,
        "changes": 92,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/doc/build-unix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/doc/build-unix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-unix.md?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -7,11 +7,11 @@ Some notes on how to build Bitcoin Core in Unix.\n Note\n ---------------------\n Always use absolute paths to configure and compile bitcoin and the dependencies,\n-for example, when specifying the the path of the dependency:\n+for example, when specifying the path of the dependency:\n \n \t../dist/configure --enable-cxx --disable-shared --with-pic --prefix=$BDB_PREFIX\n \n-Here BDB_PREFIX must absolute path - it is defined using $(pwd) which ensures\n+Here BDB_PREFIX must be an absolute path - it is defined using $(pwd) which ensures\n the usage of the absolute path.\n \n To Build\n@@ -46,32 +46,38 @@ Optional dependencies:\n  qt          | GUI              | GUI toolkit (only needed when GUI enabled)\n  protobuf    | Payments in GUI  | Data interchange format used for payment protocol (only needed when GUI enabled)\n  libqrencode | QR codes in GUI  | Optional for generating QR codes (only needed when GUI enabled)\n+ univalue    | Utility          | JSON parsing and encoding (bundled version will be used unless --with-system-univalue passed to configure)\n  libzmq3     | ZMQ notification | Optional, allows generating ZMQ notifications (requires ZMQ version >= 4.x)\n \n For the versions used in the release, see [release-process.md](release-process.md) under *Fetch and build inputs*.\n \n-System requirements\n+Memory Requirements\n --------------------\n \n-C++ compilers are memory-hungry. It is recommended to have at least 1 GB of\n-memory available when compiling Bitcoin Core. With 512MB of memory or less\n-compilation will take much longer due to swap thrashing.\n+C++ compilers are memory-hungry. It is recommended to have at least 1.5 GB of\n+memory available when compiling Bitcoin Core. On systems with less, gcc can be\n+tuned to conserve memory with additional CXXFLAGS:\n+\n+\n+    ./configure CXXFLAGS=\"--param ggc-min-expand=1 --param ggc-min-heapsize=32768\"\n \n Dependency Build Instructions: Ubuntu & Debian\n ----------------------------------------------\n Build requirements:\n \n     sudo apt-get install build-essential libtool autotools-dev automake pkg-config libssl-dev libevent-dev bsdmainutils\n \n-On at least Ubuntu 14.04+ and Debian 7+ there are generic names for the\n+Options when installing required Boost library files:\n+\n+1. On at least Ubuntu 14.04+ and Debian 7+ there are generic names for the\n individual boost development packages, so the following can be used to only\n install necessary parts of boost:\n \n-    sudo apt-get install libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-program-options-dev libboost-test-dev libboost-thread-dev\n+        sudo apt-get install libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-program-options-dev libboost-test-dev libboost-thread-dev\n \n-If that doesn't work, you can install all boost development packages with:\n+2. If that doesn't work, you can install all boost development packages with:\n \n-    sudo apt-get install libboost-all-dev\n+        sudo apt-get install libboost-all-dev\n \n BerkeleyDB is required for the wallet. db4.8 packages are available [here](https://launchpad.net/~bitcoin/+archive/bitcoin).\n You can add the repository and install using the following commands:\n@@ -118,6 +124,24 @@ libqrencode (optional) can be installed with:\n Once these are installed, they will be found by configure and a bitcoin-qt executable will be\n built by default.\n \n+Dependency Build Instructions: Fedora\n+-------------------------------------\n+Build requirements:\n+\n+    sudo dnf install gcc-c++ libtool make autoconf automake openssl-devel libevent-devel boost-devel libdb4-devel libdb4-cxx-devel\n+\n+Optional:\n+\n+    sudo dnf install miniupnpc-devel\n+\n+To build with Qt 5 (recommended) you need the following:\n+\n+    sudo dnf install qt5-qttools-devel qt5-qtbase-devel protobuf-devel\n+\n+libqrencode (optional) can be installed with:\n+\n+    sudo dnf install qrencode-devel\n+\n Notes\n -----\n The release is built with GCC and then \"strip bitcoind\" to strip the debug\n@@ -236,3 +260,51 @@ In this case there is no dependency on Berkeley DB 4.8.\n \n Mining is also possible in disable-wallet mode, but only using the `getblocktemplate` RPC\n call not `getwork`.\n+\n+Additional Configure Flags\n+--------------------------\n+A list of additional configure flags can be displayed with:\n+\n+    ./configure --help\n+\n+\n+Setup and Build Example: Arch Linux\n+-----------------------------------\n+This example lists the steps necessary to setup and build a command line only, non-wallet distribution of the latest changes on Arch Linux:\n+\n+    pacman -S git base-devel boost libevent python\n+    git clone https://github.com/bitcoin/bitcoin.git\n+    cd bitcoin/\n+    ./autogen.sh\n+    ./configure --disable-wallet --without-gui --without-miniupnpc\n+    make check\n+\n+Note:\n+Enabling wallet support requires either compiling against a Berkeley DB newer than 4.8 (package `db`) using `--with-incompatible-bdb`,\n+or building and depending on a local version of Berkeley DB 4.8. The readily available Arch Linux packages are currently built using\n+`--with-incompatible-bdb` according to the [PKGBUILD](https://projects.archlinux.org/svntogit/community.git/tree/bitcoin/trunk/PKGBUILD).\n+As mentioned above, when maintaining portability of the wallet between the standard Bitcoin Core distributions and independently built\n+node software is desired, Berkeley DB 4.8 must be used.\n+\n+\n+ARM Cross-compilation\n+-------------------\n+These steps can be performed on, for example, an Ubuntu VM. The depends system\n+will also work on other Linux distributions, however the commands for\n+installing the toolchain will be different.\n+\n+Make sure you install the build requirements mentioned above.\n+Then, install the toolchain and curl:\n+\n+    sudo apt-get install g++-arm-linux-gnueabihf curl\n+\n+To build executables for ARM:\n+\n+    cd depends\n+    make HOST=arm-linux-gnueabihf NO_QT=1\n+    cd ..\n+    ./configure --prefix=$PWD/depends/arm-linux-gnueabihf --enable-glibc-back-compat --enable-reduce-exports LDFLAGS=-static-libstdc++\n+    make\n+\n+\n+For further documentation on the depends system see [README.md](../depends/README.md) in the depends directory."
      },
      {
        "sha": "ec5f26c88b0df3f75ef926b7782e89778bc31589",
        "filename": "doc/build-windows.md",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/doc/build-windows.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/doc/build-windows.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-windows.md?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -16,15 +16,18 @@ These steps can be performed on, for example, an Ubuntu VM. The depends system\n will also work on other Linux distributions, however the commands for\n installing the toolchain will be different.\n \n-First install the toolchains:\n+Make sure you install the build requirements mentioned in\n+[build-unix.md](/doc/build-unix.md).\n+Then, install the toolchains and curl:\n \n-    sudo apt-get install g++-mingw-w64-i686 mingw-w64-i686-dev g++-mingw-w64-x86-64 mingw-w64-x86-64-dev\n+    sudo apt-get install g++-mingw-w64-i686 mingw-w64-i686-dev g++-mingw-w64-x86-64 mingw-w64-x86-64-dev curl\n \n To build executables for Windows 32-bit:\n \n     cd depends\n     make HOST=i686-w64-mingw32 -j4\n     cd ..\n+    ./autogen.sh # not required when building from tarball\n     ./configure --prefix=`pwd`/depends/i686-w64-mingw32\n     make\n \n@@ -33,6 +36,7 @@ To build executables for Windows 64-bit:\n     cd depends\n     make HOST=x86_64-w64-mingw32 -j4\n     cd ..\n+    ./autogen.sh # not required when building from tarball\n     ./configure --prefix=`pwd`/depends/x86_64-w64-mingw32\n     make\n "
      },
      {
        "sha": "70c0690ba3c2135e4a8055a4aef68eb665ece1ff",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 66,
        "deletions": 10,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -5,13 +5,16 @@ Various coding styles have been used during the history of the codebase,\n and the result is not very consistent. However, we're now trying to converge to\n a single style, so please use it in new code. Old code will be converted\n gradually.\n-- Basic rules specified in src/.clang-format. Use a recent clang-format-3.5 to format automatically.\n+- Basic rules specified in [src/.clang-format](/src/.clang-format).\n+  Use a recent clang-format to format automatically using one of the [dev scripts]\n+  (/contrib/devtools/README.md#clang-formatpy).\n   - Braces on new lines for namespaces, classes, functions, methods.\n   - Braces on the same line for everything else.\n   - 4 space indentation (no tabs) for every block except namespaces.\n   - No indentation for public/protected/private or for namespaces.\n   - No extra spaces inside parenthesis; don't do ( this )\n   - No space after function names; one space after if, for and while.\n+  - `++i` is preferred over `i++`.\n \n Block style example:\n ```c++\n@@ -22,7 +25,7 @@ class Class\n     bool Function(char* psz, int n)\n     {\n         // Comment summarising what this section of code does\n-        for (int i = 0; i < n; i++) {\n+        for (int i = 0; i < n; ++i) {\n             // When something fails, return early\n             if (!Something())\n                 return false;\n@@ -71,6 +74,12 @@ To describe a member or variable use:\n int var; //!< Detailed description after the member\n ```\n \n+or\n+```cpp\n+//! Description before the member\n+int var;\n+```\n+\n Also OK:\n ```c++\n ///\n@@ -223,9 +232,9 @@ General Bitcoin Core\n   - *Rationale*: Makes sure that they pass thorough testing, and that the tester will keep passing\n      on the master branch. Otherwise all new pull requests will start failing the tests, resulting in\n      confusion and mayhem\n- \n+\n   - *Explanation*: If the test suite is to be updated for a change, this has to\n-    be done first \n+    be done first\n \n Wallet\n -------\n@@ -257,7 +266,7 @@ General C++\n       the `.h` to the `.cpp` should not result in build errors\n \n - Use the RAII (Resource Acquisition Is Initialization) paradigm where possible. For example by using\n-  `scoped_pointer` for allocations in a function.\n+  `unique_ptr` for allocations in a function.\n \n   - *Rationale*: This avoids memory and resource leaks, and ensures exception safety\n \n@@ -276,10 +285,9 @@ C++ data structures\n   - *Rationale*: Behavior is undefined. In C++ parlor this means \"may reformat\n     the universe\", in practice this has resulted in at least one hard-to-debug crash bug\n \n-- Watch out for vector out-of-bounds exceptions. `&vch[0]` is illegal for an\n-  empty vector, `&vch[vch.size()]` is always illegal. Use `begin_ptr(vch)` and\n-  `end_ptr(vch)` to get the begin and end pointer instead (defined in\n-  `serialize.h`)\n+- Watch out for out-of-bounds vector access. `&vch[vch.size()]` is illegal,\n+  including `&vch[0]` for an empty vector. Use `vch.data()` and `vch.data() +\n+  vch.size()` instead.\n \n - Vector bounds checking is only enabled in debug mode. Do not rely on it\n \n@@ -315,7 +323,7 @@ Strings and formatting\n     buffer overflows and surprises with `\\0` characters. Also some C string manipulations\n     tend to act differently depending on platform, or even the user locale\n \n-- Use `ParseInt32`, `ParseInt64`, `ParseDouble` from `utilstrencodings.h` for number parsing\n+- Use `ParseInt32`, `ParseInt64`, `ParseUInt32`, `ParseUInt64`, `ParseDouble` from `utilstrencodings.h` for number parsing\n \n   - *Rationale*: These functions do overflow checking, and avoid pesky locale issues\n \n@@ -373,3 +381,51 @@ GUI\n   - *Rationale*: Model classes pass through events and data from the core, they\n     should not interact with the user. That's where View classes come in. The converse also\n     holds: try to not directly access core data structures from Views.\n+\n+Git and github tips\n+---------------------\n+\n+- For resolving merge/rebase conflicts, it can be useful to enable diff3 style using\n+  `git config merge.conflictstyle diff3`. Instead of\n+\n+        <<<\n+        yours\n+        ===\n+        theirs\n+        >>>\n+\n+  you will see\n+\n+        <<<\n+        yours\n+        |||\n+        original\n+        ===\n+        theirs\n+        >>>\n+\n+  This may make it much clearer what caused the conflict. In this style, you can often just look\n+  at what changed between *original* and *theirs*, and mechanically apply that to *yours* (or the other way around).\n+\n+- When reviewing patches which change indentation in C++ files, use `git diff -w` and `git show -w`. This makes\n+  the diff algorithm ignore whitespace changes. This feature is also available on github.com, by adding `?w=1`\n+  at the end of any URL which shows a diff.\n+\n+- When reviewing patches that change symbol names in many places, use `git diff --word-diff`. This will instead\n+  of showing the patch as deleted/added *lines*, show deleted/added *words*.\n+\n+- When reviewing patches that move code around, try using\n+  `git diff --patience commit~:old/file.cpp commit:new/file/name.cpp`, and ignoring everything except the\n+  moved body of code which should show up as neither `+` or `-` lines. In case it was not a pure move, this may\n+  even work when combined with the `-w` or `--word-diff` options described above.\n+\n+- When looking at other's pull requests, it may make sense to add the following section to your `.git/config`\n+  file:\n+\n+        [remote \"upstream-pull\"]\n+                fetch = +refs/pull/*:refs/remotes/upstream-pull/*\n+                url = git@github.com:bitcoin/bitcoin.git\n+\n+  This will add an `upstream-pull` remote to your git repository, which can be fetched using `git fetch --all`\n+  or `git fetch upstream-pull`. Afterwards, you can use `upstream-pull/NUMBER/head` in arguments to `git show`,\n+  `git checkout` and anywhere a commit id would be acceptable to see the changes from pull request NUMBER."
      },
      {
        "sha": "442d2d605ffbc2e100eefd528573df6eda295249",
        "filename": "doc/gitian-building.md",
        "status": "modified",
        "additions": 39,
        "deletions": 31,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/doc/gitian-building.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/doc/gitian-building.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building.md?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -1,7 +1,7 @@\n Gitian building\n ================\n \n-*Setup instructions for a Gitian build of Bitcoin using a Debian VM or physical system.*\n+*Setup instructions for a Gitian build of Bitcoin Core using a Debian VM or physical system.*\n \n Gitian is the deterministic build process that is used to build the Bitcoin\n Core executables. It provides a way to be reasonably sure that the\n@@ -26,7 +26,7 @@ Table of Contents\n - [Installing Gitian](#installing-gitian)\n - [Setting up the Gitian image](#setting-up-the-gitian-image)\n - [Getting and building the inputs](#getting-and-building-the-inputs)\n-- [Building Bitcoin](#building-bitcoin)\n+- [Building Bitcoin Core](#building-bitcoin-core)\n - [Building an alternative repository](#building-an-alternative-repository)\n - [Signing externally](#signing-externally)\n - [Uploading signatures](#uploading-signatures)\n@@ -47,15 +47,15 @@ You can also install Gitian on actual hardware instead of using virtualization.\n \n Create a new VirtualBox VM\n ---------------------------\n-In the VirtualBox GUI click \"Create\" and choose the following parameters in the wizard:\n+In the VirtualBox GUI click \"New\" and choose the following parameters in the wizard:\n \n ![](gitian-building/create_new_vm.png)\n \n - Type: Linux, Debian (64-bit)\n \n ![](gitian-building/create_vm_memsize.png)\n \n-- Memory Size: at least 1024MB, anything less will really slow down the build.\n+- Memory Size: at least 3000MB, anything less and the build might not complete.\n \n ![](gitian-building/create_vm_hard_disk.png)\n \n@@ -74,13 +74,6 @@ In the VirtualBox GUI click \"Create\" and choose the following parameters in the\n - File location and size: at least 40GB; as low as 20GB *may* be possible, but better to err on the safe side\n - Click `Create`\n \n-Get the [Debian 8.x net installer](http://cdimage.debian.org/debian-cd/8.2.0/amd64/iso-cd/debian-8.2.0-amd64-netinst.iso) (a more recent minor version should also work, see also [Debian Network installation](https://www.debian.org/CD/netinst/)).\n-This DVD image can be validated using a SHA256 hashing tool, for example on\n-Unixy OSes by entering the following in a terminal:\n-\n-    echo \"d393d17ac6b3113c81186e545c416a00f28ed6e05774284bb5e8f0df39fcbcb9  debian-8.2.0-amd64-netinst.iso\" | sha256sum -c\n-    # (must return OK)\n-\n After creating the VM, we need to configure it.\n \n - Click the `Settings` button, then go to the `Network` tab. Adapter 1 should be attached to `NAT`.\n@@ -102,7 +95,14 @@ After creating the VM, we need to configure it.\n \n - Click `Ok` twice to save.\n \n-Then start the VM. On the first launch you will be asked for a CD or DVD image. Choose the downloaded iso.\n+Get the [Debian 8.x net installer](http://cdimage.debian.org/mirror/cdimage/archive/8.5.0/amd64/iso-cd/debian-8.5.0-amd64-netinst.iso) (a more recent minor version should also work, see also [Debian Network installation](https://www.debian.org/CD/netinst/)).\n+This DVD image can be [validated](https://www.debian.org/CD/verify) using a SHA256 hashing tool, for example on\n+Unixy OSes by entering the following in a terminal:\n+\n+    echo \"ad4e8c27c561ad8248d5ebc1d36eb172f884057bfeb2c22ead823f59fa8c3dff  debian-8.5.0-amd64-netinst.iso\" | sha256sum -c\n+    # (must return OK)\n+\n+Then start the VM. On the first launch you will be asked for a CD or DVD image. Choose the downloaded ISO.\n \n ![](gitian-building/select_startup_disk.png)\n \n@@ -160,6 +160,10 @@ To select a different button, press `Tab`.\n \n ![](gitian-building/debian_install_12_choose_disk.png)\n \n+  - Partition Disks -> *All files in one partition*\n+\n+![](gitian-building/all_files_in_one_partition.png)\n+\n   - Finish partitioning and write changes to disk -> *Yes* (`Tab`, `Enter` to select the `Yes` button)\n \n ![](gitian-building/debian_install_14_finish.png)\n@@ -252,22 +256,23 @@ First we need to log in as `root` to set up dependencies and make sure that our\n user can use the sudo command. Type/paste the following in the terminal:\n \n ```bash\n-apt-get install git ruby sudo apt-cacher-ng qemu-utils debootstrap lxc python-cheetah parted kpartx bridge-utils make ubuntu-archive-keyring\n+apt-get install git ruby sudo apt-cacher-ng qemu-utils debootstrap lxc python-cheetah parted kpartx bridge-utils make ubuntu-archive-keyring curl\n adduser debian sudo\n ```\n \n Then set up LXC and the rest with the following, which is a complex jumble of settings and workarounds:\n \n ```bash\n-# the version of lxc-start in Debian 7.4 needs to run as root, so make sure\n+# the version of lxc-start in Debian needs to run as root, so make sure\n # that the build script can execute it without providing a password\n echo \"%sudo ALL=NOPASSWD: /usr/bin/lxc-start\" > /etc/sudoers.d/gitian-lxc\n-# add cgroup for LXC\n-echo \"cgroup  /sys/fs/cgroup  cgroup  defaults  0   0\" >> /etc/fstab\n+echo \"%sudo ALL=NOPASSWD: /usr/bin/lxc-execute\" >> /etc/sudoers.d/gitian-lxc\n # make /etc/rc.local script that sets up bridge between guest and host\n echo '#!/bin/sh -e' > /etc/rc.local\n echo 'brctl addbr br0' >> /etc/rc.local\n echo 'ifconfig br0 10.0.3.2/24 up' >> /etc/rc.local\n+echo 'iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE' >> /etc/rc.local\n+echo 'echo 1 > /proc/sys/net/ipv4/ip_forward' >> /etc/rc.local\n echo 'exit 0' >> /etc/rc.local\n # make sure that USE_LXC is always set when logging in as debian,\n # and configure LXC IP addresses\n@@ -305,13 +310,14 @@ Clone the git repositories for bitcoin and Gitian.\n ```bash\n git clone https://github.com/devrandom/gitian-builder.git\n git clone https://github.com/bitcoin/bitcoin\n+git clone https://github.com/bitcoin-core/gitian.sigs.git\n ```\n \n Setting up the Gitian image\n -------------------------\n \n Gitian needs a virtual image of the operating system to build in.\n-Currently this is Ubuntu Precise x86_64.\n+Currently this is Ubuntu Trusty x86_64.\n This image will be copied and used every time that a build is started to\n make sure that the build is deterministic.\n Creating the image will take a while, but only has to be done once.\n@@ -330,16 +336,18 @@ There will be a lot of warnings printed during the build of the image. These can\n Getting and building the inputs\n --------------------------------\n \n-Follow the instructions in [doc/release-process.md](release-process.md#fetch-and-build-inputs-first-time-or-when-dependency-versions-change)\n-in the bitcoin repository under 'Fetch and build inputs' to install sources which require\n+At this point you have two options, you can either use the automated script (found in [contrib/gitian-build.sh](/contrib/gitian-build.sh)) or you could manually do everything by following this guide. If you're using the automated script, then run it with the \"--setup\" command. Afterwards, run it with the \"--build\" command (example: \"contrib/gitian-building.sh -b signer 0.13.0\"). Otherwise ignore this.\n+\n+Follow the instructions in [doc/release-process.md](release-process.md#fetch-and-create-inputs-first-time-or-when-dependency-versions-change)\n+in the bitcoin repository under 'Fetch and create inputs' to install sources which require\n manual intervention. Also optionally follow the next step: 'Seed the Gitian sources cache\n and offline git repositories' which will fetch the remaining files required for building\n offline.\n \n-Building Bitcoin\n+Building Bitcoin Core\n ----------------\n \n-To build Bitcoin (for Linux, OS X and Windows) just follow the steps under 'perform\n+To build Bitcoin Core (for Linux, OS X and Windows) just follow the steps under 'perform\n Gitian builds' in [doc/release-process.md](release-process.md#perform-gitian-builds) in the bitcoin repository.\n \n This may take some time as it will build all the dependencies needed for each descriptor.\n@@ -361,7 +369,7 @@ Output from `gbuild` will look something like\n     Resolving deltas: 100% (41590/41590), done.\n     From https://github.com/bitcoin/bitcoin\n     ... (new tags, new branch etc)\n-    --- Building for precise amd64 ---\n+    --- Building for trusty amd64 ---\n     Stopping target if it is up\n     Making a new image copy\n     stdin: is not a tty\n@@ -410,14 +418,14 @@ So, if you use LXC:\n export PATH=\"$PATH\":/path/to/gitian-builder/libexec\n export USE_LXC=1\n cd /path/to/gitian-builder\n-./libexec/make-clean-vm --suite precise --arch amd64\n+./libexec/make-clean-vm --suite trusty --arch amd64\n \n-LXC_ARCH=amd64 LXC_SUITE=precise on-target -u root apt-get update\n-LXC_ARCH=amd64 LXC_SUITE=precise on-target -u root \\\n+LXC_ARCH=amd64 LXC_SUITE=trusty on-target -u root apt-get update\n+LXC_ARCH=amd64 LXC_SUITE=trusty on-target -u root \\\n   -e DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends -y install \\\n   $( sed -ne '/^packages:/,/[^-] .*/ {/^- .*/{s/\"//g;s/- //;p}}' ../bitcoin/contrib/gitian-descriptors/*|sort|uniq )\n-LXC_ARCH=amd64 LXC_SUITE=precise on-target -u root apt-get -q -y purge grub\n-LXC_ARCH=amd64 LXC_SUITE=precise on-target -u root -e DEBIAN_FRONTEND=noninteractive apt-get -y dist-upgrade\n+LXC_ARCH=amd64 LXC_SUITE=trusty on-target -u root apt-get -q -y purge grub\n+LXC_ARCH=amd64 LXC_SUITE=trusty on-target -u root -e DEBIAN_FRONTEND=noninteractive apt-get -y dist-upgrade\n ```\n \n And then set offline mode for apt-cacher-ng:\n@@ -435,10 +443,10 @@ Then when building, override the remote URLs that gbuild would otherwise pull fr\n ```bash\n \n cd /some/root/path/\n-git clone https://github.com/bitcoin/bitcoin-detached-sigs.git\n+git clone https://github.com/bitcoin-core/bitcoin-detached-sigs.git\n \n-BTCPATH=/some/root/path/bitcoin.git\n-SIGPATH=/some/root/path/bitcoin-detached-sigs.git\n+BTCPATH=/some/root/path/bitcoin\n+SIGPATH=/some/root/path/bitcoin-detached-sigs\n \n ./bin/gbuild --url bitcoin=${BTCPATH},signature=${SIGPATH} ../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml\n ```\n@@ -467,5 +475,5 @@ Uploading signatures\n ---------------------\n \n After building and signing you can push your signatures (both the `.assert` and `.assert.sig` files) to the\n-[bitcoin/gitian.sigs](https://github.com/bitcoin/gitian.sigs/) repository, or if that's not possible create a pull\n+[bitcoin-core/gitian.sigs](https://github.com/bitcoin-core/gitian.sigs/) repository, or if that's not possible create a pull\n request. You can also mail the files to Wladimir (laanwj@gmail.com) and he will commit them."
      },
      {
        "sha": "8cbb0d8adc1deda1c7c4023611b65521e054ff69",
        "filename": "doc/gitian-building/all_files_in_one_partition.png",
        "status": "added",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/doc/gitian-building/all_files_in_one_partition.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/doc/gitian-building/all_files_in_one_partition.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/all_files_in_one_partition.png?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "5f77206b6fa8f9f0f1bbd6d02819d67bf18327ad",
        "filename": "doc/gitian-building/create_vm_file_location_size.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/doc/gitian-building/create_vm_file_location_size.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/doc/gitian-building/create_vm_file_location_size.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/create_vm_file_location_size.png?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "6f42cda73f3cabb02e39ae0309ac67f419a168c7",
        "filename": "doc/gitian-building/create_vm_memsize.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/doc/gitian-building/create_vm_memsize.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/doc/gitian-building/create_vm_memsize.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/create_vm_memsize.png?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "59bc093e2c3d35bee0d1bdc50f11f2cf2a6fdafe",
        "filename": "doc/gitian-building/select_startup_disk.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/doc/gitian-building/select_startup_disk.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/doc/gitian-building/select_startup_disk.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/select_startup_disk.png?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "5252ef4a19aa4aec7d76b5217f61748cc64d08e6",
        "filename": "doc/man/Makefile.am",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/doc/man/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/doc/man/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/Makefile.am?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -0,0 +1 @@\n+dist_man1_MANS=bitcoind.1 bitcoin-qt.1 bitcoin-cli.1 bitcoin-tx.1"
      },
      {
        "sha": "11b690cf856c045da10beead3a1ee7b626d20fc1",
        "filename": "doc/man/bitcoin-cli.1",
        "status": "added",
        "additions": 84,
        "deletions": 0,
        "changes": 84,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/doc/man/bitcoin-cli.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/doc/man/bitcoin-cli.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-cli.1?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -0,0 +1,84 @@\n+.\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.46.5.\n+.TH BITCOIN-CLI \"1\" \"September 2016\" \"bitcoin-cli v0.13.0.0\" \"User Commands\"\n+.SH NAME\n+bitcoin-cli \\- manual page for bitcoin-cli v0.13.0.0\n+.SH DESCRIPTION\n+Bitcoin Core RPC client version v0.13.0.0\n+.SS \"Usage:\"\n+.TP\n+bitcoin\\-cli [options] <command> [params]\n+Send command to Bitcoin Core\n+.TP\n+bitcoin\\-cli [options] help\n+List commands\n+.TP\n+bitcoin\\-cli [options] help <command>\n+Get help for a command\n+.SH OPTIONS\n+.HP\n+\\-?\n+.IP\n+This help message\n+.HP\n+\\fB\\-conf=\\fR<file>\n+.IP\n+Specify configuration file (default: bitcoin.conf)\n+.HP\n+\\fB\\-datadir=\\fR<dir>\n+.IP\n+Specify data directory\n+.PP\n+Chain selection options:\n+.HP\n+\\fB\\-testnet\\fR\n+.IP\n+Use the test chain\n+.HP\n+\\fB\\-regtest\\fR\n+.IP\n+Enter regression test mode, which uses a special chain in which blocks\n+can be solved instantly. This is intended for regression testing\n+tools and app development.\n+.HP\n+\\fB\\-rpcconnect=\\fR<ip>\n+.IP\n+Send commands to node running on <ip> (default: 127.0.0.1)\n+.HP\n+\\fB\\-rpcport=\\fR<port>\n+.IP\n+Connect to JSON\\-RPC on <port> (default: 8332 or testnet: 18332)\n+.HP\n+\\fB\\-rpcwait\\fR\n+.IP\n+Wait for RPC server to start\n+.HP\n+\\fB\\-rpcuser=\\fR<user>\n+.IP\n+Username for JSON\\-RPC connections\n+.HP\n+\\fB\\-rpcpassword=\\fR<pw>\n+.IP\n+Password for JSON\\-RPC connections\n+.HP\n+\\fB\\-rpcclienttimeout=\\fR<n>\n+.IP\n+Timeout during HTTP requests (default: 900)\n+.HP\n+\\fB\\-stdin\\fR\n+.IP\n+Read extra arguments from standard input, one per line until EOF/Ctrl\\-D\n+(recommended for sensitive information such as passphrases)\n+.SH COPYRIGHT\n+Copyright (C) 2009-2016 The Bitcoin Core developers\n+\n+Please contribute if you find Bitcoin Core useful. Visit\n+<https://bitcoincore.org> for further information about the software.\n+The source code is available from <https://github.com/bitcoin/bitcoin>.\n+\n+This is experimental software.\n+Distributed under the MIT software license, see the accompanying file COPYING\n+or <http://www.opensource.org/licenses/mit-license.php>.\n+\n+This product includes software developed by the OpenSSL Project for use in the\n+OpenSSL Toolkit <https://www.openssl.org/> and cryptographic software written\n+by Eric Young and UPnP software written by Thomas Bernard."
      },
      {
        "sha": "24b529dac16714666c98a6c4c9980ed2105b5403",
        "filename": "doc/man/bitcoin-qt.1",
        "status": "added",
        "additions": 513,
        "deletions": 0,
        "changes": 513,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/doc/man/bitcoin-qt.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/doc/man/bitcoin-qt.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-qt.1?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -0,0 +1,513 @@\n+.\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.46.5.\n+.TH BITCOIN-QT \"1\" \"September 2016\" \"bitcoin-qt v0.13.0.0\" \"User Commands\"\n+.SH NAME\n+bitcoin-qt \\- manual page for bitcoin-qt v0.13.0.0\n+.SH DESCRIPTION\n+Bitcoin Core version v0.13.0.0 (64\\-bit)\n+Usage:\n+.IP\n+bitcoin\\-qt [command\\-line options]\n+.SH OPTIONS\n+.HP\n+\\-?\n+.IP\n+Print this help message and exit\n+.HP\n+\\fB\\-version\\fR\n+.IP\n+Print version and exit\n+.HP\n+\\fB\\-alertnotify=\\fR<cmd>\n+.IP\n+Execute command when a relevant alert is received or we see a really\n+long fork (%s in cmd is replaced by message)\n+.HP\n+\\fB\\-blocknotify=\\fR<cmd>\n+.IP\n+Execute command when the best block changes (%s in cmd is replaced by\n+block hash)\n+.HP\n+\\fB\\-checkblocks=\\fR<n>\n+.IP\n+How many blocks to check at startup (default: 288, 0 = all)\n+.HP\n+\\fB\\-checklevel=\\fR<n>\n+.IP\n+How thorough the block verification of \\fB\\-checkblocks\\fR is (0\\-4, default: 3)\n+.HP\n+\\fB\\-conf=\\fR<file>\n+.IP\n+Specify configuration file (default: bitcoin.conf)\n+.HP\n+\\fB\\-datadir=\\fR<dir>\n+.IP\n+Specify data directory\n+.HP\n+\\fB\\-dbcache=\\fR<n>\n+.IP\n+Set database cache size in megabytes (4 to 16384, default: 300)\n+.HP\n+\\fB\\-loadblock=\\fR<file>\n+.IP\n+Imports blocks from external blk000??.dat file on startup\n+.HP\n+\\fB\\-maxorphantx=\\fR<n>\n+.IP\n+Keep at most <n> unconnectable transactions in memory (default: 100)\n+.HP\n+\\fB\\-maxmempool=\\fR<n>\n+.IP\n+Keep the transaction memory pool below <n> megabytes (default: 300)\n+.HP\n+\\fB\\-mempoolexpiry=\\fR<n>\n+.IP\n+Do not keep transactions in the mempool longer than <n> hours (default:\n+72)\n+.HP\n+\\fB\\-par=\\fR<n>\n+.IP\n+Set the number of script verification threads (\\fB\\-4\\fR to 16, 0 = auto, <0 =\n+leave that many cores free, default: 0)\n+.HP\n+\\fB\\-pid=\\fR<file>\n+.IP\n+Specify pid file (default: bitcoind.pid)\n+.HP\n+\\fB\\-prune=\\fR<n>\n+.IP\n+Reduce storage requirements by pruning (deleting) old blocks. This mode\n+is incompatible with \\fB\\-txindex\\fR and \\fB\\-rescan\\fR. Warning: Reverting\n+this setting requires re\\-downloading the entire blockchain.\n+(default: 0 = disable pruning blocks, >550 = target size in MiB\n+to use for block files)\n+.HP\n+\\fB\\-reindex\\-chainstate\\fR\n+.IP\n+Rebuild chain state from the currently indexed blocks\n+.HP\n+\\fB\\-reindex\\fR\n+.IP\n+Rebuild chain state and block index from the blk*.dat files on disk\n+.HP\n+\\fB\\-sysperms\\fR\n+.IP\n+Create new files with system default permissions, instead of umask 077\n+(only effective with disabled wallet functionality)\n+.HP\n+\\fB\\-txindex\\fR\n+.IP\n+Maintain a full transaction index, used by the getrawtransaction rpc\n+call (default: 0)\n+.PP\n+Connection options:\n+.HP\n+\\fB\\-addnode=\\fR<ip>\n+.IP\n+Add a node to connect to and attempt to keep the connection open\n+.HP\n+\\fB\\-banscore=\\fR<n>\n+.IP\n+Threshold for disconnecting misbehaving peers (default: 100)\n+.HP\n+\\fB\\-bantime=\\fR<n>\n+.IP\n+Number of seconds to keep misbehaving peers from reconnecting (default:\n+86400)\n+.HP\n+\\fB\\-bind=\\fR<addr>\n+.IP\n+Bind to given address and always listen on it. Use [host]:port notation\n+for IPv6\n+.HP\n+\\fB\\-connect=\\fR<ip>\n+.IP\n+Connect only to the specified node(s)\n+.HP\n+\\fB\\-discover\\fR\n+.IP\n+Discover own IP addresses (default: 1 when listening and no \\fB\\-externalip\\fR\n+or \\fB\\-proxy\\fR)\n+.HP\n+\\fB\\-dns\\fR\n+.IP\n+Allow DNS lookups for \\fB\\-addnode\\fR, \\fB\\-seednode\\fR and \\fB\\-connect\\fR (default: 1)\n+.HP\n+\\fB\\-dnsseed\\fR\n+.IP\n+Query for peer addresses via DNS lookup, if low on addresses (default: 1\n+unless \\fB\\-connect\\fR)\n+.HP\n+\\fB\\-externalip=\\fR<ip>\n+.IP\n+Specify your own public address\n+.HP\n+\\fB\\-forcednsseed\\fR\n+.IP\n+Always query for peer addresses via DNS lookup (default: 0)\n+.HP\n+\\fB\\-listen\\fR\n+.IP\n+Accept connections from outside (default: 1 if no \\fB\\-proxy\\fR or \\fB\\-connect\\fR)\n+.HP\n+\\fB\\-listenonion\\fR\n+.IP\n+Automatically create Tor hidden service (default: 1)\n+.HP\n+\\fB\\-maxconnections=\\fR<n>\n+.IP\n+Maintain at most <n> connections to peers (default: 125)\n+.HP\n+\\fB\\-maxreceivebuffer=\\fR<n>\n+.IP\n+Maximum per\\-connection receive buffer, <n>*1000 bytes (default: 5000)\n+.HP\n+\\fB\\-maxsendbuffer=\\fR<n>\n+.IP\n+Maximum per\\-connection send buffer, <n>*1000 bytes (default: 1000)\n+.HP\n+\\fB\\-maxtimeadjustment\\fR\n+.IP\n+Maximum allowed median peer time offset adjustment. Local perspective of\n+time may be influenced by peers forward or backward by this\n+amount. (default: 4200 seconds)\n+.HP\n+\\fB\\-onion=\\fR<ip:port>\n+.IP\n+Use separate SOCKS5 proxy to reach peers via Tor hidden services\n+(default: \\fB\\-proxy\\fR)\n+.HP\n+\\fB\\-onlynet=\\fR<net>\n+.IP\n+Only connect to nodes in network <net> (ipv4, ipv6 or onion)\n+.HP\n+\\fB\\-permitbaremultisig\\fR\n+.IP\n+Relay non\\-P2SH multisig (default: 1)\n+.HP\n+\\fB\\-peerbloomfilters\\fR\n+.IP\n+Support filtering of blocks and transaction with bloom filters (default:\n+1)\n+.HP\n+\\fB\\-port=\\fR<port>\n+.IP\n+Listen for connections on <port> (default: 8333 or testnet: 18333)\n+.HP\n+\\fB\\-proxy=\\fR<ip:port>\n+.IP\n+Connect through SOCKS5 proxy\n+.HP\n+\\fB\\-proxyrandomize\\fR\n+.IP\n+Randomize credentials for every proxy connection. This enables Tor\n+stream isolation (default: 1)\n+.HP\n+\\fB\\-seednode=\\fR<ip>\n+.IP\n+Connect to a node to retrieve peer addresses, and disconnect\n+.HP\n+\\fB\\-timeout=\\fR<n>\n+.IP\n+Specify connection timeout in milliseconds (minimum: 1, default: 5000)\n+.HP\n+\\fB\\-torcontrol=\\fR<ip>:<port>\n+.IP\n+Tor control port to use if onion listening enabled (default:\n+127.0.0.1:9051)\n+.HP\n+\\fB\\-torpassword=\\fR<pass>\n+.IP\n+Tor control port password (default: empty)\n+.HP\n+\\fB\\-whitebind=\\fR<addr>\n+.IP\n+Bind to given address and whitelist peers connecting to it. Use\n+[host]:port notation for IPv6\n+.HP\n+\\fB\\-whitelist=\\fR<netmask>\n+.IP\n+Whitelist peers connecting from the given netmask or IP address. Can be\n+specified multiple times. Whitelisted peers cannot be DoS banned\n+and their transactions are always relayed, even if they are\n+already in the mempool, useful e.g. for a gateway\n+.HP\n+\\fB\\-whitelistrelay\\fR\n+.IP\n+Accept relayed transactions received from whitelisted peers even when\n+not relaying transactions (default: 1)\n+.HP\n+\\fB\\-whitelistforcerelay\\fR\n+.IP\n+Force relay of transactions from whitelisted peers even they violate\n+local relay policy (default: 1)\n+.HP\n+\\fB\\-maxuploadtarget=\\fR<n>\n+.IP\n+Tries to keep outbound traffic under the given target (in MiB per 24h),\n+0 = no limit (default: 0)\n+.PP\n+Wallet options:\n+.HP\n+\\fB\\-disablewallet\\fR\n+.IP\n+Do not load the wallet and disable wallet RPC calls\n+.HP\n+\\fB\\-keypool=\\fR<n>\n+.IP\n+Set key pool size to <n> (default: 100)\n+.HP\n+\\fB\\-fallbackfee=\\fR<amt>\n+.IP\n+A fee rate (in BTC/kB) that will be used when fee estimation has\n+insufficient data (default: 0.0002)\n+.HP\n+\\fB\\-mintxfee=\\fR<amt>\n+.IP\n+Fees (in BTC/kB) smaller than this are considered zero fee for\n+transaction creation (default: 0.00001)\n+.HP\n+\\fB\\-paytxfee=\\fR<amt>\n+.IP\n+Fee (in BTC/kB) to add to transactions you send (default: 0.00)\n+.HP\n+\\fB\\-rescan\\fR\n+.IP\n+Rescan the block chain for missing wallet transactions on startup\n+.HP\n+\\fB\\-salvagewallet\\fR\n+.IP\n+Attempt to recover private keys from a corrupt wallet on startup\n+.HP\n+\\fB\\-spendzeroconfchange\\fR\n+.IP\n+Spend unconfirmed change when sending transactions (default: 1)\n+.HP\n+\\fB\\-txconfirmtarget=\\fR<n>\n+.IP\n+If paytxfee is not set, include enough fee so transactions begin\n+confirmation on average within n blocks (default: 2)\n+.HP\n+\\fB\\-usehd\\fR\n+.IP\n+Use hierarchical deterministic key generation (HD) after BIP32. Only has\n+effect during wallet creation/first start (default: 1)\n+.HP\n+\\fB\\-upgradewallet\\fR\n+.IP\n+Upgrade wallet to latest format on startup\n+.HP\n+\\fB\\-wallet=\\fR<file>\n+.IP\n+Specify wallet file (within data directory) (default: wallet.dat)\n+.HP\n+\\fB\\-walletbroadcast\\fR\n+.IP\n+Make the wallet broadcast transactions (default: 1)\n+.HP\n+\\fB\\-walletnotify=\\fR<cmd>\n+.IP\n+Execute command when a wallet transaction changes (%s in cmd is replaced\n+by TxID)\n+.HP\n+\\fB\\-zapwallettxes=\\fR<mode>\n+.IP\n+Delete all wallet transactions and only recover those parts of the\n+blockchain through \\fB\\-rescan\\fR on startup (1 = keep tx meta data e.g.\n+account owner and payment request information, 2 = drop tx meta\n+data)\n+.PP\n+ZeroMQ notification options:\n+.HP\n+\\fB\\-zmqpubhashblock=\\fR<address>\n+.IP\n+Enable publish hash block in <address>\n+.HP\n+\\fB\\-zmqpubhashtx=\\fR<address>\n+.IP\n+Enable publish hash transaction in <address>\n+.HP\n+\\fB\\-zmqpubrawblock=\\fR<address>\n+.IP\n+Enable publish raw block in <address>\n+.HP\n+\\fB\\-zmqpubrawtx=\\fR<address>\n+.IP\n+Enable publish raw transaction in <address>\n+.PP\n+Debugging/Testing options:\n+.HP\n+\\fB\\-uacomment=\\fR<cmt>\n+.IP\n+Append comment to the user agent string\n+.HP\n+\\fB\\-debug=\\fR<category>\n+.IP\n+Output debugging information (default: 0, supplying <category> is\n+optional). If <category> is not supplied or if <category> = 1,\n+output all debugging information.<category> can be: addrman,\n+alert, bench, coindb, db, http, libevent, lock, mempool,\n+mempoolrej, net, proxy, prune, rand, reindex, rpc, selectcoins,\n+tor, zmq, qt.\n+.HP\n+\\fB\\-help\\-debug\\fR\n+.IP\n+Show all debugging options (usage: \\fB\\-\\-help\\fR \\fB\\-help\\-debug\\fR)\n+.HP\n+\\fB\\-logips\\fR\n+.IP\n+Include IP addresses in debug output (default: 0)\n+.HP\n+\\fB\\-logtimestamps\\fR\n+.IP\n+Prepend debug output with timestamp (default: 1)\n+.HP\n+\\fB\\-minrelaytxfee=\\fR<amt>\n+.IP\n+Fees (in BTC/kB) smaller than this are considered zero fee for relaying,\n+mining and transaction creation (default: 0.00001)\n+.HP\n+\\fB\\-maxtxfee=\\fR<amt>\n+.IP\n+Maximum total fees (in BTC) to use in a single wallet transaction or raw\n+transaction; setting this too low may abort large transactions\n+(default: 0.10)\n+.HP\n+\\fB\\-printtoconsole\\fR\n+.IP\n+Send trace/debug info to console instead of debug.log file\n+.HP\n+\\fB\\-shrinkdebugfile\\fR\n+.IP\n+Shrink debug.log file on client startup (default: 1 when no \\fB\\-debug\\fR)\n+.PP\n+Chain selection options:\n+.HP\n+\\fB\\-testnet\\fR\n+.IP\n+Use the test chain\n+.PP\n+Node relay options:\n+.HP\n+\\fB\\-bytespersigop\\fR\n+.IP\n+Equivalent bytes per sigop in transactions for relay and mining\n+(default: 20)\n+.HP\n+\\fB\\-datacarrier\\fR\n+.IP\n+Relay and mine data carrier transactions (default: 1)\n+.HP\n+\\fB\\-datacarriersize\\fR\n+.IP\n+Maximum size of data in data carrier transactions we relay and mine\n+(default: 83)\n+.HP\n+\\fB\\-mempoolreplacement\\fR\n+.IP\n+Enable transaction replacement in the memory pool (default: 1)\n+.PP\n+Block creation options:\n+.HP\n+\\fB\\-blockmaxweight=\\fR<n>\n+.IP\n+Set maximum BIP141 block weight (default: 3000000)\n+.HP\n+\\fB\\-blockmaxsize=\\fR<n>\n+.IP\n+Set maximum block size in bytes (default: 750000)\n+.HP\n+\\fB\\-blockprioritysize=\\fR<n>\n+.IP\n+Set maximum size of high\\-priority/low\\-fee transactions in bytes\n+(default: 0)\n+.PP\n+RPC server options:\n+.HP\n+\\fB\\-server\\fR\n+.IP\n+Accept command line and JSON\\-RPC commands\n+.HP\n+\\fB\\-rest\\fR\n+.IP\n+Accept public REST requests (default: 0)\n+.HP\n+\\fB\\-rpcbind=\\fR<addr>\n+.IP\n+Bind to given address to listen for JSON\\-RPC connections. Use\n+[host]:port notation for IPv6. This option can be specified\n+multiple times (default: bind to all interfaces)\n+.HP\n+\\fB\\-rpccookiefile=\\fR<loc>\n+.IP\n+Location of the auth cookie (default: data dir)\n+.HP\n+\\fB\\-rpcuser=\\fR<user>\n+.IP\n+Username for JSON\\-RPC connections\n+.HP\n+\\fB\\-rpcpassword=\\fR<pw>\n+.IP\n+Password for JSON\\-RPC connections\n+.HP\n+\\fB\\-rpcauth=\\fR<userpw>\n+.IP\n+Username and hashed password for JSON\\-RPC connections. The field\n+<userpw> comes in the format: <USERNAME>:<SALT>$<HASH>. A\n+canonical python script is included in share/rpcuser. This option\n+can be specified multiple times\n+.HP\n+\\fB\\-rpcport=\\fR<port>\n+.IP\n+Listen for JSON\\-RPC connections on <port> (default: 8332 or testnet:\n+18332)\n+.HP\n+\\fB\\-rpcallowip=\\fR<ip>\n+.IP\n+Allow JSON\\-RPC connections from specified source. Valid for <ip> are a\n+single IP (e.g. 1.2.3.4), a network/netmask (e.g.\n+1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This\n+option can be specified multiple times\n+.HP\n+\\fB\\-rpcthreads=\\fR<n>\n+.IP\n+Set the number of threads to service RPC calls (default: 4)\n+.PP\n+UI Options:\n+.HP\n+\\fB\\-choosedatadir\\fR\n+.IP\n+Choose data directory on startup (default: 0)\n+.HP\n+\\fB\\-lang=\\fR<lang>\n+.IP\n+Set language, for example \"de_DE\" (default: system locale)\n+.HP\n+\\fB\\-min\\fR\n+.IP\n+Start minimized\n+.HP\n+\\fB\\-rootcertificates=\\fR<file>\n+.IP\n+Set SSL root certificates for payment request (default: \\fB\\-system\\-\\fR)\n+.HP\n+\\fB\\-splash\\fR\n+.IP\n+Show splash screen on startup (default: 1)\n+.HP\n+\\fB\\-resetguisettings\\fR\n+.IP\n+Reset all settings changed in the GUI\n+.SH COPYRIGHT\n+Copyright (C) 2009-2016 The Bitcoin Core developers\n+\n+Please contribute if you find Bitcoin Core useful. Visit\n+<https://bitcoincore.org> for further information about the software.\n+The source code is available from <https://github.com/bitcoin/bitcoin>.\n+\n+This is experimental software.\n+Distributed under the MIT software license, see the accompanying file COPYING\n+or <http://www.opensource.org/licenses/mit-license.php>.\n+\n+This product includes software developed by the OpenSSL Project for use in the\n+OpenSSL Toolkit <https://www.openssl.org/> and cryptographic software written\n+by Eric Young and UPnP software written by Thomas Bernard."
      },
      {
        "sha": "5c4e31e7f7922df0f7b3bee6584ab2ce12ea88a2",
        "filename": "doc/man/bitcoin-tx.1",
        "status": "added",
        "additions": 107,
        "deletions": 0,
        "changes": 107,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/doc/man/bitcoin-tx.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/doc/man/bitcoin-tx.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-tx.1?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -0,0 +1,107 @@\n+.\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.46.5.\n+.TH BITCOIN-TX \"1\" \"September 2016\" \"bitcoin-tx v0.13.0.0\" \"User Commands\"\n+.SH NAME\n+bitcoin-tx \\- manual page for bitcoin-tx v0.13.0.0\n+.SH DESCRIPTION\n+Bitcoin Core bitcoin\\-tx utility version v0.13.0.0\n+.SS \"Usage:\"\n+.TP\n+bitcoin\\-tx [options] <hex\\-tx> [commands]\n+Update hex\\-encoded bitcoin transaction\n+.TP\n+bitcoin\\-tx [options] \\fB\\-create\\fR [commands]\n+Create hex\\-encoded bitcoin transaction\n+.SH OPTIONS\n+.HP\n+\\-?\n+.IP\n+This help message\n+.HP\n+\\fB\\-create\\fR\n+.IP\n+Create new, empty TX.\n+.HP\n+\\fB\\-json\\fR\n+.IP\n+Select JSON output\n+.HP\n+\\fB\\-txid\\fR\n+.IP\n+Output only the hex\\-encoded transaction id of the resultant transaction.\n+.PP\n+Chain selection options:\n+.HP\n+\\fB\\-testnet\\fR\n+.IP\n+Use the test chain\n+.HP\n+\\fB\\-regtest\\fR\n+.IP\n+Enter regression test mode, which uses a special chain in which blocks\n+can be solved instantly. This is intended for regression testing\n+tools and app development.\n+.PP\n+Commands:\n+.IP\n+delin=N\n+.IP\n+Delete input N from TX\n+.IP\n+delout=N\n+.IP\n+Delete output N from TX\n+.IP\n+in=TXID:VOUT(:SEQUENCE_NUMBER)\n+.IP\n+Add input to TX\n+.IP\n+locktime=N\n+.IP\n+Set TX lock time to N\n+.IP\n+nversion=N\n+.IP\n+Set TX version to N\n+.IP\n+outaddr=VALUE:ADDRESS\n+.IP\n+Add address\\-based output to TX\n+.IP\n+outdata=[VALUE:]DATA\n+.IP\n+Add data\\-based output to TX\n+.IP\n+outscript=VALUE:SCRIPT\n+.IP\n+Add raw script output to TX\n+.IP\n+sign=SIGHASH\\-FLAGS\n+.IP\n+Add zero or more signatures to transaction. This command requires JSON\n+registers:prevtxs=JSON object, privatekeys=JSON object. See\n+signrawtransaction docs for format of sighash flags, JSON\n+objects.\n+.PP\n+Register Commands:\n+.IP\n+load=NAME:FILENAME\n+.IP\n+Load JSON file FILENAME into register NAME\n+.IP\n+set=NAME:JSON\\-STRING\n+.IP\n+Set register NAME to given JSON\\-STRING\n+.SH COPYRIGHT\n+Copyright (C) 2009-2016 The Bitcoin Core developers\n+\n+Please contribute if you find Bitcoin Core useful. Visit\n+<https://bitcoincore.org> for further information about the software.\n+The source code is available from <https://github.com/bitcoin/bitcoin>.\n+\n+This is experimental software.\n+Distributed under the MIT software license, see the accompanying file COPYING\n+or <http://www.opensource.org/licenses/mit-license.php>.\n+\n+This product includes software developed by the OpenSSL Project for use in the\n+OpenSSL Toolkit <https://www.openssl.org/> and cryptographic software written\n+by Eric Young and UPnP software written by Thomas Bernard."
      },
      {
        "sha": "b99657a5fae3a77e68f8df5d4d9bd6c4b9610da5",
        "filename": "doc/man/bitcoind.1",
        "status": "added",
        "additions": 492,
        "deletions": 0,
        "changes": 492,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/doc/man/bitcoind.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/doc/man/bitcoind.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoind.1?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -0,0 +1,492 @@\n+.\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.46.5.\n+.TH BITCOIND \"1\" \"September 2016\" \"bitcoind v0.13.0.0\" \"User Commands\"\n+.SH NAME\n+bitcoind \\- manual page for bitcoind v0.13.0.0\n+.SH DESCRIPTION\n+Bitcoin Core Daemon version v0.13.0.0\n+.SS \"Usage:\"\n+.TP\n+bitcoind [options]\n+Start Bitcoin Core Daemon\n+.SH OPTIONS\n+.HP\n+\\-?\n+.IP\n+Print this help message and exit\n+.HP\n+\\fB\\-version\\fR\n+.IP\n+Print version and exit\n+.HP\n+\\fB\\-alertnotify=\\fR<cmd>\n+.IP\n+Execute command when a relevant alert is received or we see a really\n+long fork (%s in cmd is replaced by message)\n+.HP\n+\\fB\\-blocknotify=\\fR<cmd>\n+.IP\n+Execute command when the best block changes (%s in cmd is replaced by\n+block hash)\n+.HP\n+\\fB\\-checkblocks=\\fR<n>\n+.IP\n+How many blocks to check at startup (default: 288, 0 = all)\n+.HP\n+\\fB\\-checklevel=\\fR<n>\n+.IP\n+How thorough the block verification of \\fB\\-checkblocks\\fR is (0\\-4, default: 3)\n+.HP\n+\\fB\\-conf=\\fR<file>\n+.IP\n+Specify configuration file (default: bitcoin.conf)\n+.HP\n+\\fB\\-daemon\\fR\n+.IP\n+Run in the background as a daemon and accept commands\n+.HP\n+\\fB\\-datadir=\\fR<dir>\n+.IP\n+Specify data directory\n+.HP\n+\\fB\\-dbcache=\\fR<n>\n+.IP\n+Set database cache size in megabytes (4 to 16384, default: 300)\n+.HP\n+\\fB\\-loadblock=\\fR<file>\n+.IP\n+Imports blocks from external blk000??.dat file on startup\n+.HP\n+\\fB\\-maxorphantx=\\fR<n>\n+.IP\n+Keep at most <n> unconnectable transactions in memory (default: 100)\n+.HP\n+\\fB\\-maxmempool=\\fR<n>\n+.IP\n+Keep the transaction memory pool below <n> megabytes (default: 300)\n+.HP\n+\\fB\\-mempoolexpiry=\\fR<n>\n+.IP\n+Do not keep transactions in the mempool longer than <n> hours (default:\n+72)\n+.HP\n+\\fB\\-par=\\fR<n>\n+.IP\n+Set the number of script verification threads (\\fB\\-4\\fR to 16, 0 = auto, <0 =\n+leave that many cores free, default: 0)\n+.HP\n+\\fB\\-pid=\\fR<file>\n+.IP\n+Specify pid file (default: bitcoind.pid)\n+.HP\n+\\fB\\-prune=\\fR<n>\n+.IP\n+Reduce storage requirements by pruning (deleting) old blocks. This mode\n+is incompatible with \\fB\\-txindex\\fR and \\fB\\-rescan\\fR. Warning: Reverting\n+this setting requires re\\-downloading the entire blockchain.\n+(default: 0 = disable pruning blocks, >550 = target size in MiB\n+to use for block files)\n+.HP\n+\\fB\\-reindex\\-chainstate\\fR\n+.IP\n+Rebuild chain state from the currently indexed blocks\n+.HP\n+\\fB\\-reindex\\fR\n+.IP\n+Rebuild chain state and block index from the blk*.dat files on disk\n+.HP\n+\\fB\\-sysperms\\fR\n+.IP\n+Create new files with system default permissions, instead of umask 077\n+(only effective with disabled wallet functionality)\n+.HP\n+\\fB\\-txindex\\fR\n+.IP\n+Maintain a full transaction index, used by the getrawtransaction rpc\n+call (default: 0)\n+.PP\n+Connection options:\n+.HP\n+\\fB\\-addnode=\\fR<ip>\n+.IP\n+Add a node to connect to and attempt to keep the connection open\n+.HP\n+\\fB\\-banscore=\\fR<n>\n+.IP\n+Threshold for disconnecting misbehaving peers (default: 100)\n+.HP\n+\\fB\\-bantime=\\fR<n>\n+.IP\n+Number of seconds to keep misbehaving peers from reconnecting (default:\n+86400)\n+.HP\n+\\fB\\-bind=\\fR<addr>\n+.IP\n+Bind to given address and always listen on it. Use [host]:port notation\n+for IPv6\n+.HP\n+\\fB\\-connect=\\fR<ip>\n+.IP\n+Connect only to the specified node(s)\n+.HP\n+\\fB\\-discover\\fR\n+.IP\n+Discover own IP addresses (default: 1 when listening and no \\fB\\-externalip\\fR\n+or \\fB\\-proxy\\fR)\n+.HP\n+\\fB\\-dns\\fR\n+.IP\n+Allow DNS lookups for \\fB\\-addnode\\fR, \\fB\\-seednode\\fR and \\fB\\-connect\\fR (default: 1)\n+.HP\n+\\fB\\-dnsseed\\fR\n+.IP\n+Query for peer addresses via DNS lookup, if low on addresses (default: 1\n+unless \\fB\\-connect\\fR)\n+.HP\n+\\fB\\-externalip=\\fR<ip>\n+.IP\n+Specify your own public address\n+.HP\n+\\fB\\-forcednsseed\\fR\n+.IP\n+Always query for peer addresses via DNS lookup (default: 0)\n+.HP\n+\\fB\\-listen\\fR\n+.IP\n+Accept connections from outside (default: 1 if no \\fB\\-proxy\\fR or \\fB\\-connect\\fR)\n+.HP\n+\\fB\\-listenonion\\fR\n+.IP\n+Automatically create Tor hidden service (default: 1)\n+.HP\n+\\fB\\-maxconnections=\\fR<n>\n+.IP\n+Maintain at most <n> connections to peers (default: 125)\n+.HP\n+\\fB\\-maxreceivebuffer=\\fR<n>\n+.IP\n+Maximum per\\-connection receive buffer, <n>*1000 bytes (default: 5000)\n+.HP\n+\\fB\\-maxsendbuffer=\\fR<n>\n+.IP\n+Maximum per\\-connection send buffer, <n>*1000 bytes (default: 1000)\n+.HP\n+\\fB\\-maxtimeadjustment\\fR\n+.IP\n+Maximum allowed median peer time offset adjustment. Local perspective of\n+time may be influenced by peers forward or backward by this\n+amount. (default: 4200 seconds)\n+.HP\n+\\fB\\-onion=\\fR<ip:port>\n+.IP\n+Use separate SOCKS5 proxy to reach peers via Tor hidden services\n+(default: \\fB\\-proxy\\fR)\n+.HP\n+\\fB\\-onlynet=\\fR<net>\n+.IP\n+Only connect to nodes in network <net> (ipv4, ipv6 or onion)\n+.HP\n+\\fB\\-permitbaremultisig\\fR\n+.IP\n+Relay non\\-P2SH multisig (default: 1)\n+.HP\n+\\fB\\-peerbloomfilters\\fR\n+.IP\n+Support filtering of blocks and transaction with bloom filters (default:\n+1)\n+.HP\n+\\fB\\-port=\\fR<port>\n+.IP\n+Listen for connections on <port> (default: 8333 or testnet: 18333)\n+.HP\n+\\fB\\-proxy=\\fR<ip:port>\n+.IP\n+Connect through SOCKS5 proxy\n+.HP\n+\\fB\\-proxyrandomize\\fR\n+.IP\n+Randomize credentials for every proxy connection. This enables Tor\n+stream isolation (default: 1)\n+.HP\n+\\fB\\-seednode=\\fR<ip>\n+.IP\n+Connect to a node to retrieve peer addresses, and disconnect\n+.HP\n+\\fB\\-timeout=\\fR<n>\n+.IP\n+Specify connection timeout in milliseconds (minimum: 1, default: 5000)\n+.HP\n+\\fB\\-torcontrol=\\fR<ip>:<port>\n+.IP\n+Tor control port to use if onion listening enabled (default:\n+127.0.0.1:9051)\n+.HP\n+\\fB\\-torpassword=\\fR<pass>\n+.IP\n+Tor control port password (default: empty)\n+.HP\n+\\fB\\-whitebind=\\fR<addr>\n+.IP\n+Bind to given address and whitelist peers connecting to it. Use\n+[host]:port notation for IPv6\n+.HP\n+\\fB\\-whitelist=\\fR<netmask>\n+.IP\n+Whitelist peers connecting from the given netmask or IP address. Can be\n+specified multiple times. Whitelisted peers cannot be DoS banned\n+and their transactions are always relayed, even if they are\n+already in the mempool, useful e.g. for a gateway\n+.HP\n+\\fB\\-whitelistrelay\\fR\n+.IP\n+Accept relayed transactions received from whitelisted peers even when\n+not relaying transactions (default: 1)\n+.HP\n+\\fB\\-whitelistforcerelay\\fR\n+.IP\n+Force relay of transactions from whitelisted peers even they violate\n+local relay policy (default: 1)\n+.HP\n+\\fB\\-maxuploadtarget=\\fR<n>\n+.IP\n+Tries to keep outbound traffic under the given target (in MiB per 24h),\n+0 = no limit (default: 0)\n+.PP\n+Wallet options:\n+.HP\n+\\fB\\-disablewallet\\fR\n+.IP\n+Do not load the wallet and disable wallet RPC calls\n+.HP\n+\\fB\\-keypool=\\fR<n>\n+.IP\n+Set key pool size to <n> (default: 100)\n+.HP\n+\\fB\\-fallbackfee=\\fR<amt>\n+.IP\n+A fee rate (in BTC/kB) that will be used when fee estimation has\n+insufficient data (default: 0.0002)\n+.HP\n+\\fB\\-mintxfee=\\fR<amt>\n+.IP\n+Fees (in BTC/kB) smaller than this are considered zero fee for\n+transaction creation (default: 0.00001)\n+.HP\n+\\fB\\-paytxfee=\\fR<amt>\n+.IP\n+Fee (in BTC/kB) to add to transactions you send (default: 0.00)\n+.HP\n+\\fB\\-rescan\\fR\n+.IP\n+Rescan the block chain for missing wallet transactions on startup\n+.HP\n+\\fB\\-salvagewallet\\fR\n+.IP\n+Attempt to recover private keys from a corrupt wallet on startup\n+.HP\n+\\fB\\-spendzeroconfchange\\fR\n+.IP\n+Spend unconfirmed change when sending transactions (default: 1)\n+.HP\n+\\fB\\-txconfirmtarget=\\fR<n>\n+.IP\n+If paytxfee is not set, include enough fee so transactions begin\n+confirmation on average within n blocks (default: 2)\n+.HP\n+\\fB\\-usehd\\fR\n+.IP\n+Use hierarchical deterministic key generation (HD) after BIP32. Only has\n+effect during wallet creation/first start (default: 1)\n+.HP\n+\\fB\\-upgradewallet\\fR\n+.IP\n+Upgrade wallet to latest format on startup\n+.HP\n+\\fB\\-wallet=\\fR<file>\n+.IP\n+Specify wallet file (within data directory) (default: wallet.dat)\n+.HP\n+\\fB\\-walletbroadcast\\fR\n+.IP\n+Make the wallet broadcast transactions (default: 1)\n+.HP\n+\\fB\\-walletnotify=\\fR<cmd>\n+.IP\n+Execute command when a wallet transaction changes (%s in cmd is replaced\n+by TxID)\n+.HP\n+\\fB\\-zapwallettxes=\\fR<mode>\n+.IP\n+Delete all wallet transactions and only recover those parts of the\n+blockchain through \\fB\\-rescan\\fR on startup (1 = keep tx meta data e.g.\n+account owner and payment request information, 2 = drop tx meta\n+data)\n+.PP\n+ZeroMQ notification options:\n+.HP\n+\\fB\\-zmqpubhashblock=\\fR<address>\n+.IP\n+Enable publish hash block in <address>\n+.HP\n+\\fB\\-zmqpubhashtx=\\fR<address>\n+.IP\n+Enable publish hash transaction in <address>\n+.HP\n+\\fB\\-zmqpubrawblock=\\fR<address>\n+.IP\n+Enable publish raw block in <address>\n+.HP\n+\\fB\\-zmqpubrawtx=\\fR<address>\n+.IP\n+Enable publish raw transaction in <address>\n+.PP\n+Debugging/Testing options:\n+.HP\n+\\fB\\-uacomment=\\fR<cmt>\n+.IP\n+Append comment to the user agent string\n+.HP\n+\\fB\\-debug=\\fR<category>\n+.IP\n+Output debugging information (default: 0, supplying <category> is\n+optional). If <category> is not supplied or if <category> = 1,\n+output all debugging information.<category> can be: addrman,\n+alert, bench, coindb, db, http, libevent, lock, mempool,\n+mempoolrej, net, proxy, prune, rand, reindex, rpc, selectcoins,\n+tor, zmq.\n+.HP\n+\\fB\\-help\\-debug\\fR\n+.IP\n+Show all debugging options (usage: \\fB\\-\\-help\\fR \\fB\\-help\\-debug\\fR)\n+.HP\n+\\fB\\-logips\\fR\n+.IP\n+Include IP addresses in debug output (default: 0)\n+.HP\n+\\fB\\-logtimestamps\\fR\n+.IP\n+Prepend debug output with timestamp (default: 1)\n+.HP\n+\\fB\\-minrelaytxfee=\\fR<amt>\n+.IP\n+Fees (in BTC/kB) smaller than this are considered zero fee for relaying,\n+mining and transaction creation (default: 0.00001)\n+.HP\n+\\fB\\-maxtxfee=\\fR<amt>\n+.IP\n+Maximum total fees (in BTC) to use in a single wallet transaction or raw\n+transaction; setting this too low may abort large transactions\n+(default: 0.10)\n+.HP\n+\\fB\\-printtoconsole\\fR\n+.IP\n+Send trace/debug info to console instead of debug.log file\n+.HP\n+\\fB\\-shrinkdebugfile\\fR\n+.IP\n+Shrink debug.log file on client startup (default: 1 when no \\fB\\-debug\\fR)\n+.PP\n+Chain selection options:\n+.HP\n+\\fB\\-testnet\\fR\n+.IP\n+Use the test chain\n+.PP\n+Node relay options:\n+.HP\n+\\fB\\-bytespersigop\\fR\n+.IP\n+Equivalent bytes per sigop in transactions for relay and mining\n+(default: 20)\n+.HP\n+\\fB\\-datacarrier\\fR\n+.IP\n+Relay and mine data carrier transactions (default: 1)\n+.HP\n+\\fB\\-datacarriersize\\fR\n+.IP\n+Maximum size of data in data carrier transactions we relay and mine\n+(default: 83)\n+.HP\n+\\fB\\-mempoolreplacement\\fR\n+.IP\n+Enable transaction replacement in the memory pool (default: 1)\n+.PP\n+Block creation options:\n+.HP\n+\\fB\\-blockmaxweight=\\fR<n>\n+.IP\n+Set maximum BIP141 block weight (default: 3000000)\n+.HP\n+\\fB\\-blockmaxsize=\\fR<n>\n+.IP\n+Set maximum block size in bytes (default: 750000)\n+.HP\n+\\fB\\-blockprioritysize=\\fR<n>\n+.IP\n+Set maximum size of high\\-priority/low\\-fee transactions in bytes\n+(default: 0)\n+.PP\n+RPC server options:\n+.HP\n+\\fB\\-server\\fR\n+.IP\n+Accept command line and JSON\\-RPC commands\n+.HP\n+\\fB\\-rest\\fR\n+.IP\n+Accept public REST requests (default: 0)\n+.HP\n+\\fB\\-rpcbind=\\fR<addr>\n+.IP\n+Bind to given address to listen for JSON\\-RPC connections. Use\n+[host]:port notation for IPv6. This option can be specified\n+multiple times (default: bind to all interfaces)\n+.HP\n+\\fB\\-rpccookiefile=\\fR<loc>\n+.IP\n+Location of the auth cookie (default: data dir)\n+.HP\n+\\fB\\-rpcuser=\\fR<user>\n+.IP\n+Username for JSON\\-RPC connections\n+.HP\n+\\fB\\-rpcpassword=\\fR<pw>\n+.IP\n+Password for JSON\\-RPC connections\n+.HP\n+\\fB\\-rpcauth=\\fR<userpw>\n+.IP\n+Username and hashed password for JSON\\-RPC connections. The field\n+<userpw> comes in the format: <USERNAME>:<SALT>$<HASH>. A\n+canonical python script is included in share/rpcuser. This option\n+can be specified multiple times\n+.HP\n+\\fB\\-rpcport=\\fR<port>\n+.IP\n+Listen for JSON\\-RPC connections on <port> (default: 8332 or testnet:\n+18332)\n+.HP\n+\\fB\\-rpcallowip=\\fR<ip>\n+.IP\n+Allow JSON\\-RPC connections from specified source. Valid for <ip> are a\n+single IP (e.g. 1.2.3.4), a network/netmask (e.g.\n+1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This\n+option can be specified multiple times\n+.HP\n+\\fB\\-rpcthreads=\\fR<n>\n+.IP\n+Set the number of threads to service RPC calls (default: 4)\n+.SH COPYRIGHT\n+Copyright (C) 2009-2016 The Bitcoin Core developers\n+\n+Please contribute if you find Bitcoin Core useful. Visit\n+<https://bitcoincore.org> for further information about the software.\n+The source code is available from <https://github.com/bitcoin/bitcoin>.\n+\n+This is experimental software.\n+Distributed under the MIT software license, see the accompanying file COPYING\n+or <http://www.opensource.org/licenses/mit-license.php>.\n+\n+This product includes software developed by the OpenSSL Project for use in the\n+OpenSSL Toolkit <https://www.openssl.org/> and cryptographic software written\n+by Eric Young and UPnP software written by Thomas Bernard."
      },
      {
        "sha": "3caab818076b88f54e1da3d9cd25a809b9352ca9",
        "filename": "doc/multiwallet-qt.md",
        "status": "removed",
        "additions": 0,
        "deletions": 48,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9df179d2e3abdee7d1f255d9be17c8b72dff06a/doc/multiwallet-qt.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9df179d2e3abdee7d1f255d9be17c8b72dff06a/doc/multiwallet-qt.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/multiwallet-qt.md?ref=e9df179d2e3abdee7d1f255d9be17c8b72dff06a",
        "patch": "@@ -1,48 +0,0 @@\n-Multiwallet Qt Development and Integration Strategy\n-===================================================\n-\n-In order to support loading of multiple wallets in bitcoin-qt, a few changes in the UI architecture will be needed.\n-Fortunately, only four of the files in the existing project are affected by this change.\n-\n-Two new classes have been implemented in two new .h/.cpp file pairs, with much of the functionality that was previously\n-implemented in the BitcoinGUI class moved over to these new classes.\n-\n-The two existing files most affected, by far, are bitcoingui.h and bitcoingui.cpp, as the BitcoinGUI class will require\n-some major retrofitting.\n-\n-Only requiring some minor changes is bitcoin.cpp.\n-\n-Finally, two new headers and source files will have to be added to bitcoin-qt.pro.\n-\n-Changes to class BitcoinGUI\n----------------------------\n-The principal change to the BitcoinGUI class concerns the QStackedWidget instance called centralWidget.\n-This widget owns five page views: overviewPage, transactionsPage, addressBookPage, receiveCoinsPage, and sendCoinsPage.\n-\n-A new class called *WalletView* inheriting from QStackedWidget has been written to handle all renderings and updates of\n-these page views. In addition to owning these five page views, a WalletView also has a pointer to a WalletModel instance.\n-This allows the construction of multiple WalletView objects, each rendering a distinct wallet.\n-\n-A second class called *WalletFrame* inheriting from QFrame has been written as a container for embedding all wallet-related\n-controls into BitcoinGUI. At present it contains the WalletView instances for the wallets and does little more than passing on messages\n-from BitcoinGUI to the currently selected WalletView. It is a WalletFrame instance\n-that takes the place of what used to be centralWidget in BitcoinGUI. The purpose of this class is to allow future\n-refinements of the wallet controls with minimal need for further modifications to BitcoinGUI, thus greatly simplifying\n-merges while reducing the risk of breaking top-level stuff.\n-\n-Changes to bitcoin.cpp\n-----------------------\n-bitcoin.cpp is the entry point into bitcoin-qt, and as such, will require some minor modifications to provide hooks for\n-multiple wallet support. Most importantly will be the way it instantiates WalletModels and passes them to the\n-singleton BitcoinGUI instance called window. Formerly, BitcoinGUI kept a pointer to a single instance of a WalletModel.\n-The initial change required is very simple: rather than calling `window.setWalletModel(&walletModel);` we perform the\n-following two steps:\n-\n-\twindow.addWallet(\"~Default\", &walletModel);\n-\twindow.setCurrentWallet(\"~Default\");\n-\n-The string parameter is just an arbitrary name given to the default wallet. It's been prepended with a tilde to avoid name collisions in the future with additional wallets.\n-\n-The shutdown call `window.setWalletModel(0)` has also been removed. In its place is now:\n-\n-window.removeAllWallets();"
      },
      {
        "sha": "697099beabe96ee7eb15032e557fea652fe98901",
        "filename": "doc/reduce-traffic.md",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/doc/reduce-traffic.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/doc/reduce-traffic.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/reduce-traffic.md?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -19,8 +19,7 @@ This is *not* a hard limit; only a threshold to minimize the outbound\n traffic. When the limit is about to be reached, the uploaded data is cut by no\n longer serving historic blocks (blocks older than one week).\n Keep in mind that new nodes require other nodes that are willing to serve\n-historic blocks. **The recommended minimum is 144 blocks per day (max. 144MB\n-per day)**\n+historic blocks.\n \n Whitelisted peers will never be disconnected, although their traffic counts for\n calculating the target."
      },
      {
        "sha": "58994a683941584f6162473530c35932b342d7ff",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 57,
        "deletions": 3,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -1,14 +1,55 @@\n (note: this is a temporary file, to be added-to by anybody, and moved to\n release-notes at release time)\n \n+Bitcoin Core version *version* is now available from:\n+\n+  <https://bitcoin.org/bin/bitcoin-core-*version*/>\n+\n+This is a new major version release, including new features, various bugfixes\n+and performance improvements, as well as updated translations.\n+\n+Please report bugs using the issue tracker at github:\n+\n+  <https://github.com/bitcoin/bitcoin/issues>\n+\n+To receive security and update notifications, please subscribe to:\n+\n+  <https://bitcoincore.org/en/list/announcements/join/>\n+\n+Compatibility\n+==============\n+\n+Microsoft ended support for Windows XP on [April 8th, 2014](https://www.microsoft.com/en-us/WindowsForBusiness/end-of-xp-support),\n+an OS initially released in 2001. This means that not even critical security\n+updates will be released anymore. Without security updates, using a bitcoin\n+wallet on a XP machine is irresponsible at least.\n+\n+In addition to that, with 0.12.x there have been varied reports of Bitcoin Core\n+randomly crashing on Windows XP. It is [not clear](https://github.com/bitcoin/bitcoin/issues/7681#issuecomment-217439891)\n+what the source of these crashes is, but it is likely that upstream\n+libraries such as Qt are no longer being tested on XP.\n+\n+We do not have time nor resources to provide support for an OS that is\n+end-of-life. From 0.13.0 on, Windows XP is no longer supported. Users are\n+suggested to upgrade to a newer version of Windows, or install an alternative OS\n+that is supported.\n+\n+No attempt is made to prevent installing or running the software on Windows XP,\n+you can still do so at your own risk, but do not expect it to work: do not\n+report issues about Windows XP to the issue tracker.\n+\n Notable changes\n ===============\n \n-Example item\n-----------------\n+Low-level RPC changes\n+----------------------\n \n+- `importprunedfunds` only accepts two required arguments. Some versions accept\n+  an optional third arg, which was always ignored. Make sure to never pass more\n+  than two arguments.\n \n-0.13.0 Change log\n+\n+0.14.0 Change log\n =================\n \n Detailed release notes follow. This overview includes changes that affect\n@@ -18,6 +59,12 @@ git merge commit are mentioned.\n \n ### RPC and REST\n \n+UTXO set query (`GET /rest/getutxos/<checkmempool>/<txid>-<n>/<txid>-<n>/.../<txid>-<n>.<bin|hex|json>`) responses\n+were changed to return status code HTTP_BAD_REQUEST (400) instead of HTTP_INTERNAL_SERVER_ERROR (500) when requests\n+contain invalid parameters.\n+\n+The first boolean argument to `getaddednodeinfo` has been removed. This is an incompatible change.\n+\n ### Configuration and command-line options\n \n ### Block and transaction handling\n@@ -36,3 +83,10 @@ git merge commit are mentioned.\n \n ### Miscellaneous\n \n+Credits\n+=======\n+\n+Thanks to everyone who directly contributed to this release:\n+\n+\n+As well as everyone that helped translating on [Transifex](https://www.transifex.com/projects/p/bitcoin/)."
      },
      {
        "sha": "38a2c1347d0b8afbfe0c0481cd90b9db06854328",
        "filename": "doc/release-notes/release-notes-0.10.4.md",
        "status": "added",
        "additions": 172,
        "deletions": 0,
        "changes": 172,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/doc/release-notes/release-notes-0.10.4.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/doc/release-notes/release-notes-0.10.4.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes/release-notes-0.10.4.md?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -0,0 +1,172 @@\n+Bitcoin Core version 0.10.4 is now available from:\n+\n+  <https://bitcoin.org/bin/bitcoin-core-0.10.4/>\n+\n+This is a new minor version release, bringing bug fixes, the BIP65\n+(CLTV) consensus change, and relay policy preparation for BIP113. It is\n+recommended to upgrade to this version as soon as possible.\n+\n+Please report bugs using the issue tracker at github:\n+\n+  <https://github.com/bitcoin/bitcoin/issues>\n+\n+Upgrading and downgrading\n+=========================\n+\n+How to Upgrade\n+--------------\n+\n+If you are running an older version, shut it down. Wait until it has completely\n+shut down (which might take a few minutes for older versions), then run the\n+installer (on Windows) or just copy over /Applications/Bitcoin-Qt (on Mac) or\n+bitcoind/bitcoin-qt (on Linux).\n+\n+Downgrade warning\n+------------------\n+\n+Because release 0.10.0 and later makes use of headers-first synchronization and\n+parallel block download (see further), the block files and databases are not\n+backwards-compatible with pre-0.10 versions of Bitcoin Core or other software:\n+\n+* Blocks will be stored on disk out of order (in the order they are\n+received, really), which makes it incompatible with some tools or\n+other programs. Reindexing using earlier versions will also not work\n+anymore as a result of this.\n+\n+* The block index database will now hold headers for which no block is\n+stored on disk, which earlier versions won't support.\n+\n+If you want to be able to downgrade smoothly, make a backup of your entire data\n+directory. Without this your node will need start syncing (or importing from\n+bootstrap.dat) anew afterwards. It is possible that the data from a completely\n+synchronised 0.10 node may be usable in older versions as-is, but this is not\n+supported and may break as soon as the older version attempts to reindex.\n+\n+This does not affect wallet forward or backward compatibility. There are no\n+known problems when downgrading from 0.11.x to 0.10.x.\n+\n+Notable changes since 0.10.3\n+============================\n+\n+BIP65 soft fork to enforce OP_CHECKLOCKTIMEVERIFY opcode\n+--------------------------------------------------------\n+\n+This release includes several changes related to the [BIP65][] soft fork\n+which redefines the existing OP_NOP2 opcode as OP_CHECKLOCKTIMEVERIFY\n+(CLTV) so that a transaction output can be made unspendable until a\n+specified point in the future.\n+\n+1. This release will only relay and mine transactions spending a CLTV\n+   output if they comply with the BIP65 rules as provided in code.\n+\n+2. This release will produce version 4 blocks by default. Please see the\n+   *notice to miners* below.\n+\n+3. Once 951 out of a sequence of 1,001 blocks on the local node's best block\n+   chain contain version 4 (or higher) blocks, this release will no\n+   longer accept new version 3 blocks and it will only accept version 4\n+   blocks if they comply with the BIP65 rules for CLTV.\n+\n+For more information about the soft-forking change, please see\n+<https://github.com/bitcoin/bitcoin/pull/6351>\n+\n+Graphs showing the progress towards block version 4 adoption may be\n+found at the URLs below:\n+\n+- Block versions over the last 50,000 blocks as progress towards BIP65\n+  consensus enforcement: <http://bitcoin.sipa.be/ver-50k.png>\n+\n+- Block versions over the last 2,000 blocks showing the days to the\n+  earliest possible BIP65 consensus-enforced block: <http://bitcoin.sipa.be/ver-2k.png>\n+\n+**Notice to miners:** Bitcoin Core\u2019s block templates are now for\n+version 4 blocks only, and any mining software relying on its\n+getblocktemplate must be updated in parallel to use libblkmaker either\n+version FIXME or any version from FIXME onward.\n+\n+- If you are solo mining, this will affect you the moment you upgrade\n+  Bitcoin Core, which must be done prior to BIP65 achieving its 951/1001\n+  status.\n+\n+- If you are mining with the stratum mining protocol: this does not\n+  affect you.\n+\n+- If you are mining with the getblocktemplate protocol to a pool: this\n+  will affect you at the pool operator\u2019s discretion, which must be no\n+  later than BIP65 achieving its 951/1001 status.\n+\n+[BIP65]: https://github.com/bitcoin/bips/blob/master/bip-0065.mediawiki\n+\n+Windows bug fix for corrupted UTXO database on unclean shutdowns\n+----------------------------------------------------------------\n+\n+Several Windows users reported that they often need to reindex the\n+entire blockchain after an unclean shutdown of Bitcoin Core on Windows\n+(or an unclean shutdown of Windows itself). Although unclean shutdowns\n+remain unsafe, this release no longer relies on memory-mapped files for\n+the UTXO database, which significantly reduced the frequency of unclean\n+shutdowns leading to required reindexes during testing.\n+\n+For more information, see: <https://github.com/bitcoin/bitcoin/pull/6917>\n+\n+Other fixes for database corruption on Windows are expected in the\n+next major release.\n+\n+0.10.4 Change log\n+=================\n+\n+Detailed release notes follow. This overview includes changes that affect\n+behavior, not code moves, refactors and string updates. For convenience in locating\n+the code changes and accompanying discussion, both the pull request and\n+git merge commit are mentioned.\n+\n+- #6953 `8b3311f` alias -h for --help\n+- #6953 `97546fc` Change URLs to https in debian/control\n+- #6953 `38671bf` Update debian/changelog and slight tweak to debian/control\n+- #6953 `256321e` Correct spelling mistakes in doc folder\n+- #6953 `eae0350` Clarification of unit test build instructions\n+- #6953 `90897ab` Update bluematt-key, the old one is long-since revoked\n+- #6953 `a2f2fb6` build: disable -Wself-assign\n+- #6953 `cf67d8b` Bugfix: Allow mining on top of old tip blocks for testnet (fixes testnet-in-a-box use case)\n+- #6953 `b3964e3` Drop \"with minimal dependencies\" from description\n+- #6953 `43c2789` Split bitcoin-tx into its own package\n+- #6953 `dfe0d4d` Include bitcoin-tx binary on Debian/Ubuntu\n+- #6953 `612efe8` [Qt] Raise debug window when requested\n+- #6953 `3ad96bd` Fix locking in GetTransaction\n+- #6953 `9c81005` Fix spelling of Qt\n+- #6946 `94b67e5` Update LevelDB\n+- #6706 `5dc72f8` CLTV: Add more tests to improve coverage\n+- #6706 `6a1343b` Add RPC tests for the CHECKLOCKTIMEVERIFY (BIP65) soft-fork\n+- #6706 `4137248` Add CHECKLOCKTIMEVERIFY (BIP65) soft-fork logic\n+- #6706 `0e01d0f` Enable CHECKLOCKTIMEVERIFY as a standard script verify flag\n+- #6706 `6d01325` Replace NOP2 with CHECKLOCKTIMEVERIFY (BIP65)\n+- #6706 `750d54f` Move LOCKTIME_THRESHOLD to src/script/script.h\n+- #6706 `6897468` Make CScriptNum() take nMaxNumSize as an argument\n+- #6867 `5297194` Set TCP_NODELAY on P2P sockets\n+- #6836 `fb818b6` Bring historical release notes up to date\n+- #6852 `0b3fd07` build: make sure OpenSSL heeds noexecstack\n+\n+Credits\n+=======\n+\n+Thanks to everyone who directly contributed to this release:\n+\n+- Alex Morcos\n+- Daniel Cousens\n+- Diego Viola\n+- Eric Lombrozo\n+- Esteban Ordano\n+- Gregory Maxwell\n+- Luke Dashjr\n+- MarcoFalke\n+- Matt Corallo\n+- Micha\n+- Mitchell Cash\n+- Peter Todd\n+- Pieter Wuille\n+- Wladimir J. van der Laan\n+- Zak Wilcox\n+\n+And those who contributed additional code review and/or security research.\n+\n+As well as everyone that helped translating on [Transifex](https://www.transifex.com/projects/p/bitcoin/)."
      },
      {
        "sha": "2351b80656542c3eee9b27c1f3fae5d3a46179d3",
        "filename": "doc/release-notes/release-notes-0.11.2.md",
        "status": "added",
        "additions": 217,
        "deletions": 0,
        "changes": 217,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/doc/release-notes/release-notes-0.11.2.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/doc/release-notes/release-notes-0.11.2.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes/release-notes-0.11.2.md?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -0,0 +1,217 @@\n+Bitcoin Core version 0.11.2 is now available from:\n+\n+  <https://bitcoin.org/bin/bitcoin-core-0.11.2/>\n+\n+This is a new minor version release, bringing bug fixes, the BIP65\n+(CLTV) consensus change, and relay policy preparation for BIP113. It is\n+recommended to upgrade to this version as soon as possible.\n+\n+Please report bugs using the issue tracker at github:\n+\n+  <https://github.com/bitcoin/bitcoin/issues>\n+\n+Upgrading and downgrading\n+=========================\n+\n+How to Upgrade\n+--------------\n+\n+If you are running an older version, shut it down. Wait until it has completely\n+shut down (which might take a few minutes for older versions), then run the\n+installer (on Windows) or just copy over /Applications/Bitcoin-Qt (on Mac) or\n+bitcoind/bitcoin-qt (on Linux).\n+\n+Downgrade warning\n+------------------\n+\n+Because release 0.10.0 and later makes use of headers-first synchronization and\n+parallel block download (see further), the block files and databases are not\n+backwards-compatible with pre-0.10 versions of Bitcoin Core or other software:\n+\n+* Blocks will be stored on disk out of order (in the order they are\n+received, really), which makes it incompatible with some tools or\n+other programs. Reindexing using earlier versions will also not work\n+anymore as a result of this.\n+\n+* The block index database will now hold headers for which no block is\n+stored on disk, which earlier versions won't support.\n+\n+If you want to be able to downgrade smoothly, make a backup of your entire data\n+directory. Without this your node will need start syncing (or importing from\n+bootstrap.dat) anew afterwards. It is possible that the data from a completely\n+synchronised 0.10 node may be usable in older versions as-is, but this is not\n+supported and may break as soon as the older version attempts to reindex.\n+\n+This does not affect wallet forward or backward compatibility. There are no\n+known problems when downgrading from 0.11.x to 0.10.x.\n+\n+Notable changes since 0.11.1\n+============================\n+\n+BIP65 soft fork to enforce OP_CHECKLOCKTIMEVERIFY opcode\n+--------------------------------------------------------\n+\n+This release includes several changes related to the [BIP65][] soft fork\n+which redefines the existing OP_NOP2 opcode as OP_CHECKLOCKTIMEVERIFY\n+(CLTV) so that a transaction output can be made unspendable until a\n+specified point in the future.\n+\n+1. This release will only relay and mine transactions spending a CLTV\n+   output if they comply with the BIP65 rules as provided in code.\n+\n+2. This release will produce version 4 blocks by default. Please see the\n+   *notice to miners* below.\n+\n+3. Once 951 out of a sequence of 1,001 blocks on the local node's best block\n+   chain contain version 4 (or higher) blocks, this release will no\n+   longer accept new version 3 blocks and it will only accept version 4\n+   blocks if they comply with the BIP65 rules for CLTV.\n+\n+For more information about the soft-forking change, please see\n+<https://github.com/bitcoin/bitcoin/pull/6351>\n+\n+Graphs showing the progress towards block version 4 adoption may be\n+found at the URLs below:\n+\n+- Block versions over the last 50,000 blocks as progress towards BIP65\n+  consensus enforcement: <http://bitcoin.sipa.be/ver-50k.png>\n+\n+- Block versions over the last 2,000 blocks showing the days to the\n+  earliest possible BIP65 consensus-enforced block: <http://bitcoin.sipa.be/ver-2k.png>\n+\n+**Notice to miners:** Bitcoin Core\u2019s block templates are now for\n+version 4 blocks only, and any mining software relying on its\n+getblocktemplate must be updated in parallel to use libblkmaker either\n+version 0.4.3 or any version from 0.5.2 onward.\n+\n+- If you are solo mining, this will affect you the moment you upgrade\n+  Bitcoin Core, which must be done prior to BIP65 achieving its 951/1001\n+  status.\n+\n+- If you are mining with the stratum mining protocol: this does not\n+  affect you.\n+\n+- If you are mining with the getblocktemplate protocol to a pool: this\n+  will affect you at the pool operator\u2019s discretion, which must be no\n+  later than BIP65 achieving its 951/1001 status.\n+\n+[BIP65]: https://github.com/bitcoin/bips/blob/master/bip-0065.mediawiki\n+\n+BIP113 mempool-only locktime enforcement using GetMedianTimePast()\n+----------------------------------------------------------------\n+\n+Bitcoin transactions currently may specify a locktime indicating when\n+they may be added to a valid block.  Current consensus rules require\n+that blocks have a block header time greater than the locktime specified\n+in any transaction in that block.\n+\n+Miners get to choose what time they use for their header time, with the\n+consensus rule being that no node will accept a block whose time is more\n+than two hours in the future.  This creates a incentive for miners to\n+set their header times to future values in order to include locktimed\n+transactions which weren't supposed to be included for up to two more\n+hours.\n+\n+The consensus rules also specify that valid blocks may have a header\n+time greater than that of the median of the 11 previous blocks.  This\n+GetMedianTimePast() time has a key feature we generally associate with\n+time: it can't go backwards.\n+\n+[BIP113][] specifies a soft fork (**not enforced in this release**) that\n+weakens this perverse incentive for individual miners to use a future\n+time by requiring that valid blocks have a computed GetMedianTimePast()\n+greater than the locktime specified in any transaction in that block.\n+\n+Mempool inclusion rules currently require transactions to be valid for\n+immediate inclusion in a block in order to be accepted into the mempool.\n+This release begins applying the BIP113 rule to received transactions,\n+so transaction whose time is greater than the GetMedianTimePast() will\n+no longer be accepted into the mempool.\n+\n+**Implication for miners:** you will begin rejecting transactions that\n+would not be valid under BIP113, which will prevent you from producing\n+invalid blocks if/when BIP113 is enforced on the network. Any\n+transactions which are valid under the current rules but not yet valid\n+under the BIP113 rules will either be mined by other miners or delayed\n+until they are valid under BIP113. Note, however, that time-based\n+locktime transactions are more or less unseen on the network currently.\n+\n+**Implication for users:** GetMedianTimePast() always trails behind the\n+current time, so a transaction locktime set to the present time will be\n+rejected by nodes running this release until the median time moves\n+forward. To compensate, subtract one hour (3,600 seconds) from your\n+locktimes to allow those transactions to be included in mempools at\n+approximately the expected time.\n+\n+[BIP113]: https://github.com/bitcoin/bips/blob/master/bip-0113.mediawiki\n+\n+Windows bug fix for corrupted UTXO database on unclean shutdowns\n+----------------------------------------------------------------\n+\n+Several Windows users reported that they often need to reindex the\n+entire blockchain after an unclean shutdown of Bitcoin Core on Windows\n+(or an unclean shutdown of Windows itself). Although unclean shutdowns\n+remain unsafe, this release no longer relies on memory-mapped files for\n+the UTXO database, which significantly reduced the frequency of unclean\n+shutdowns leading to required reindexes during testing.\n+\n+For more information, see: <https://github.com/bitcoin/bitcoin/pull/6917>\n+\n+Other fixes for database corruption on Windows are expected in the\n+next major release.\n+\n+0.11.2 Change log\n+=================\n+\n+Detailed release notes follow. This overview includes changes that affect\n+behavior, not code moves, refactors and string updates. For convenience in locating\n+the code changes and accompanying discussion, both the pull request and\n+git merge commit are mentioned.\n+\n+- #6124 `684636b` Make CScriptNum() take nMaxNumSize as an argument\n+- #6124 `4fa7a04` Replace NOP2 with CHECKLOCKTIMEVERIFY (BIP65)\n+- #6124 `6ea5ca4` Enable CHECKLOCKTIMEVERIFY as a standard script verify flag\n+- #6351 `5e82e1c` Add CHECKLOCKTIMEVERIFY (BIP65) soft-fork logic\n+- #6353 `ba1da90` Show softfork status in getblockchaininfo\n+- #6351 `6af25b0` Add BIP65 to getblockchaininfo softforks list\n+- #6688 `01878c9` Fix locking in GetTransaction\n+- #6653 `b3eaa30` [Qt] Raise debug window when requested\n+- #6600 `1e672ae` Debian/Ubuntu: Include bitcoin-tx binary\n+- #6600 `2394f4d` Debian/Ubuntu: Split bitcoin-tx into its own package\n+- #5987 `33d6825` Bugfix: Allow mining on top of old tip blocks for testnet\n+- #6852 `21e58b8` build: make sure OpenSSL heeds noexecstack\n+- #6846 `af6edac` alias `-h` for `--help`\n+- #6867 `95a5039` Set TCP_NODELAY on P2P sockets.\n+- #6856 `dfe55bd` Do not allow blockfile pruning during reindex.\n+- #6566 `a1d3c6f` Add rules--presently disabled--for using GetMedianTimePast as end point for lock-time calculations\n+- #6566 `f720c5f` Enable policy enforcing GetMedianTimePast as the end point of lock-time constraints\n+- #6917 `0af5b8e` leveldb: Win32WritableFile without memory mapping\n+- #6948 `4e895b0` Always flush block and undo when switching to new file\n+\n+Credits\n+=======\n+\n+Thanks to everyone who directly contributed to this release:\n+\n+- Alex Morcos\n+- \u0e3ftcDrak\n+- Chris Kleeschulte\n+- Daniel Cousens\n+- Diego Viola\n+- Eric Lombrozo\n+- Esteban Ordano\n+- Gregory Maxwell\n+- Luke Dashjr\n+- Marco Falke\n+- Mark Friedenbach\n+- Matt Corallo\n+- Micha\n+- Mitchell Cash\n+- Peter Todd\n+- Pieter Wuille\n+- Wladimir J. van der Laan\n+- Zak Wilcox\n+\n+And those who contributed additional code review and/or security research.\n+\n+As well as everyone that helped translating on [Transifex](https://www.transifex.com/projects/p/bitcoin/)."
      },
      {
        "sha": "cf74a1797520713b405da0ac47e54fb978e344da",
        "filename": "doc/release-notes/release-notes-0.12.0.md",
        "status": "added",
        "additions": 894,
        "deletions": 0,
        "changes": 894,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/doc/release-notes/release-notes-0.12.0.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/doc/release-notes/release-notes-0.12.0.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes/release-notes-0.12.0.md?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -0,0 +1,894 @@\n+Bitcoin Core version 0.12.0 is now available from:\n+\n+  <https://bitcoin.org/bin/bitcoin-core-0.12.0/>\n+\n+This is a new major version release, bringing new features and other improvements.\n+\n+Please report bugs using the issue tracker at github:\n+\n+  <https://github.com/bitcoin/bitcoin/issues>\n+\n+Upgrading and downgrading\n+=========================\n+\n+How to Upgrade\n+--------------\n+\n+If you are running an older version, shut it down. Wait until it has completely\n+shut down (which might take a few minutes for older versions), then run the\n+installer (on Windows) or just copy over /Applications/Bitcoin-Qt (on Mac) or\n+bitcoind/bitcoin-qt (on Linux).\n+\n+Downgrade warning\n+-----------------\n+\n+### Downgrade to a version < 0.10.0\n+\n+Because release 0.10.0 and later makes use of headers-first synchronization and\n+parallel block download (see further), the block files and databases are not\n+backwards-compatible with pre-0.10 versions of Bitcoin Core or other software:\n+\n+* Blocks will be stored on disk out of order (in the order they are\n+received, really), which makes it incompatible with some tools or\n+other programs. Reindexing using earlier versions will also not work\n+anymore as a result of this.\n+\n+* The block index database will now hold headers for which no block is\n+stored on disk, which earlier versions won't support.\n+\n+If you want to be able to downgrade smoothly, make a backup of your entire data\n+directory. Without this your node will need start syncing (or importing from\n+bootstrap.dat) anew afterwards. It is possible that the data from a completely\n+synchronised 0.10 node may be usable in older versions as-is, but this is not\n+supported and may break as soon as the older version attempts to reindex.\n+\n+This does not affect wallet forward or backward compatibility.\n+\n+### Downgrade to a version < 0.12.0\n+\n+Because release 0.12.0 and later will obfuscate the chainstate on every\n+fresh sync or reindex, the chainstate is not backwards-compatible with\n+pre-0.12 versions of Bitcoin Core or other software.\n+\n+If you want to downgrade after you have done a reindex with 0.12.0 or later,\n+you will need to reindex when you first start Bitcoin Core version 0.11 or\n+earlier.\n+\n+Notable changes\n+===============\n+\n+Signature validation using libsecp256k1\n+---------------------------------------\n+\n+ECDSA signatures inside Bitcoin transactions now use validation using\n+[libsecp256k1](https://github.com/bitcoin-core/secp256k1) instead of OpenSSL.\n+\n+Depending on the platform, this means a significant speedup for raw signature\n+validation speed. The advantage is largest on x86_64, where validation is over\n+five times faster. In practice, this translates to a raw reindexing and new\n+block validation times that are less than half of what it was before.\n+\n+Libsecp256k1 has undergone very extensive testing and validation.\n+\n+A side effect of this change is that libconsensus no longer depends on OpenSSL.\n+\n+Reduce upload traffic\n+---------------------\n+\n+A major part of the outbound traffic is caused by serving historic blocks to\n+other nodes in initial block download state.\n+\n+It is now possible to reduce the total upload traffic via the `-maxuploadtarget`\n+parameter. This is *not* a hard limit but a threshold to minimize the outbound\n+traffic. When the limit is about to be reached, the uploaded data is cut by not\n+serving historic blocks (blocks older than one week).\n+Moreover, any SPV peer is disconnected when they request a filtered block.\n+\n+This option can be specified in MiB per day and is turned off by default\n+(`-maxuploadtarget=0`).\n+The recommended minimum is 144 * MAX_BLOCK_SIZE (currently 144MB) per day.\n+\n+Whitelisted peers will never be disconnected, although their traffic counts for\n+calculating the target.\n+\n+A more detailed documentation about keeping traffic low can be found in\n+[/doc/reduce-traffic.md](/doc/reduce-traffic.md).\n+\n+Direct headers announcement (BIP 130)\n+-------------------------------------\n+\n+Between compatible peers, [BIP 130]\n+(https://github.com/bitcoin/bips/blob/master/bip-0130.mediawiki)\n+direct headers announcement is used. This means that blocks are advertised by\n+announcing their headers directly, instead of just announcing the hash. In a\n+reorganization, all new headers are sent, instead of just the new tip. This\n+can often prevent an extra roundtrip before the actual block is downloaded.\n+\n+Memory pool limiting\n+--------------------\n+\n+Previous versions of Bitcoin Core had their mempool limited by checking\n+a transaction's fees against the node's minimum relay fee. There was no\n+upper bound on the size of the mempool and attackers could send a large\n+number of transactions paying just slighly more than the default minimum\n+relay fee to crash nodes with relatively low RAM. A temporary workaround\n+for previous versions of Bitcoin Core was to raise the default minimum\n+relay fee.\n+\n+Bitcoin Core 0.12 will have a strict maximum size on the mempool. The\n+default value is 300 MB and can be configured with the `-maxmempool`\n+parameter. Whenever a transaction would cause the mempool to exceed\n+its maximum size, the transaction that (along with in-mempool descendants) has\n+the lowest total feerate (as a package) will be evicted and the node's effective\n+minimum relay feerate will be increased to match this feerate plus the initial\n+minimum relay feerate. The initial minimum relay feerate is set to\n+1000 satoshis per kB.\n+\n+Bitcoin Core 0.12 also introduces new default policy limits on the length and\n+size of unconfirmed transaction chains that are allowed in the mempool\n+(generally limiting the length of unconfirmed chains to 25 transactions, with a\n+total size of 101 KB).  These limits can be overriden using command line\n+arguments; see the extended help (`--help -help-debug`) for more information.\n+\n+Opt-in Replace-by-fee transactions\n+----------------------------------\n+\n+It is now possible to replace transactions in the transaction memory pool of\n+Bitcoin Core 0.12 nodes. Bitcoin Core will only allow replacement of\n+transactions which have any of their inputs' `nSequence` number set to less\n+than `0xffffffff - 1`.  Moreover, a replacement transaction may only be\n+accepted when it pays sufficient fee, as described in [BIP 125]\n+(https://github.com/bitcoin/bips/blob/master/bip-0125.mediawiki).\n+\n+Transaction replacement can be disabled with a new command line option,\n+`-mempoolreplacement=0`.  Transactions signaling replacement under BIP125 will\n+still be allowed into the mempool in this configuration, but replacements will\n+be rejected.  This option is intended for miners who want to continue the\n+transaction selection behavior of previous releases.\n+\n+The `-mempoolreplacement` option is *not recommended* for wallet users seeking\n+to avoid receipt of unconfirmed opt-in transactions, because this option does\n+not prevent transactions which are replaceable under BIP 125 from being accepted\n+(only subsequent replacements, which other nodes on the network that implement\n+BIP 125 are likely to relay and mine).  Wallet users wishing to detect whether\n+a transaction is subject to replacement under BIP 125 should instead use the\n+updated RPC calls `gettransaction` and `listtransactions`, which now have an\n+additional field in the output indicating if a transaction is replaceable under\n+BIP125 (\"bip125-replaceable\").\n+\n+Note that the wallet in Bitcoin Core 0.12 does not yet have support for\n+creating transactions that would be replaceable under BIP 125.\n+\n+\n+RPC: Random-cookie RPC authentication\n+-------------------------------------\n+\n+When no `-rpcpassword` is specified, the daemon now uses a special 'cookie'\n+file for authentication. This file is generated with random content when the\n+daemon starts, and deleted when it exits. Its contents are used as\n+authentication token. Read access to this file controls who can access through\n+RPC. By default it is stored in the data directory but its location can be\n+overridden with the option `-rpccookiefile`.\n+\n+This is similar to Tor's CookieAuthentication: see\n+https://www.torproject.org/docs/tor-manual.html.en\n+\n+This allows running bitcoind without having to do any manual configuration.\n+\n+Relay: Any sequence of pushdatas in OP_RETURN outputs now allowed\n+-----------------------------------------------------------------\n+\n+Previously OP_RETURN outputs with a payload were only relayed and mined if they\n+had a single pushdata. This restriction has been lifted to allow any\n+combination of data pushes and numeric constant opcodes (OP_1 to OP_16) after\n+the OP_RETURN. The limit on OP_RETURN output size is now applied to the entire\n+serialized scriptPubKey, 83 bytes by default. (the previous 80 byte default plus\n+three bytes overhead)\n+\n+Relay: New and only new blocks relayed when pruning\n+---------------------------------------------------\n+\n+When running in pruned mode, the client will now relay new blocks. When\n+responding to the `getblocks` message, only hashes of blocks that are on disk\n+and are likely to remain there for some reasonable time window (1 hour) will be\n+returned (previously all relevant hashes were returned).\n+\n+Relay and Mining: Priority transactions\n+---------------------------------------\n+\n+Bitcoin Core has a heuristic 'priority' based on coin value and age. This\n+calculation is used for relaying of transactions which do not pay the\n+minimum relay fee, and can be used as an alternative way of sorting\n+transactions for mined blocks. Bitcoin Core will relay transactions with\n+insufficient fees depending on the setting of `-limitfreerelay=<r>` (default:\n+`r=15` kB per minute) and `-blockprioritysize=<s>`.\n+\n+In Bitcoin Core 0.12, when mempool limit has been reached a higher minimum\n+relay fee takes effect to limit memory usage. Transactions which do not meet\n+this higher effective minimum relay fee will not be relayed or mined even if\n+they rank highly according to the priority heuristic.\n+\n+The mining of transactions based on their priority is also now disabled by\n+default. To re-enable it, simply set `-blockprioritysize=<n>` where is the size\n+in bytes of your blocks to reserve for these transactions. The old default was\n+50k, so to retain approximately the same policy, you would set\n+`-blockprioritysize=50000`.\n+\n+Additionally, as a result of computational simplifications, the priority value\n+used for transactions received with unconfirmed inputs is lower than in prior\n+versions due to avoiding recomputing the amounts as input transactions confirm.\n+\n+External miner policy set via the `prioritisetransaction` RPC to rank\n+transactions already in the mempool continues to work as it has previously.\n+Note, however, that if mining priority transactions is left disabled, the\n+priority delta will be ignored and only the fee metric will be effective.\n+\n+This internal automatic prioritization handling is being considered for removal\n+entirely in Bitcoin Core 0.13, and it is at this time undecided whether the\n+more accurate priority calculation for chained unconfirmed transactions will be\n+restored. Community direction on this topic is particularly requested to help\n+set project priorities.\n+\n+Automatically use Tor hidden services\n+-------------------------------------\n+\n+Starting with Tor version 0.2.7.1 it is possible, through Tor's control socket\n+API, to create and destroy 'ephemeral' hidden services programmatically.\n+Bitcoin Core has been updated to make use of this.\n+\n+This means that if Tor is running (and proper authorization is available),\n+Bitcoin Core automatically creates a hidden service to listen on, without\n+manual configuration. Bitcoin Core will also use Tor automatically to connect\n+to other .onion nodes if the control socket can be successfully opened. This\n+will positively affect the number of available .onion nodes and their usage.\n+\n+This new feature is enabled by default if Bitcoin Core is listening, and\n+a connection to Tor can be made. It can be configured with the `-listenonion`,\n+`-torcontrol` and `-torpassword` settings. To show verbose debugging\n+information, pass `-debug=tor`.\n+\n+Notifications through ZMQ\n+-------------------------\n+\n+Bitcoind can now (optionally) asynchronously notify clients through a\n+ZMQ-based PUB socket of the arrival of new transactions and blocks.\n+This feature requires installation of the ZMQ C API library 4.x and\n+configuring its use through the command line or configuration file.\n+Please see [docs/zmq.md](/doc/zmq.md) for details of operation.\n+\n+Wallet: Transaction fees\n+------------------------\n+\n+Various improvements have been made to how the wallet calculates\n+transaction fees.\n+\n+Users can decide to pay a predefined fee rate by setting `-paytxfee=<n>`\n+(or `settxfee <n>` rpc during runtime). A value of `n=0` signals Bitcoin\n+Core to use floating fees. By default, Bitcoin Core will use floating\n+fees.\n+\n+Based on past transaction data, floating fees approximate the fees\n+required to get into the `m`th block from now. This is configurable\n+with `-txconfirmtarget=<m>` (default: `2`).\n+\n+Sometimes, it is not possible to give good estimates, or an estimate\n+at all. Therefore, a fallback value can be set with `-fallbackfee=<f>`\n+(default: `0.0002` BTC/kB).\n+\n+At all times, Bitcoin Core will cap fees at `-maxtxfee=<x>` (default:\n+0.10) BTC.\n+Furthermore, Bitcoin Core will never create transactions paying less than\n+the current minimum relay fee.\n+Finally, a user can set the minimum fee rate for all transactions with\n+`-mintxfee=<i>`, which defaults to 1000 satoshis per kB.\n+\n+Wallet: Negative confirmations and conflict detection\n+-----------------------------------------------------\n+\n+The wallet will now report a negative number for confirmations that indicates\n+how deep in the block chain the conflict is found. For example, if a transaction\n+A has 5 confirmations and spends the same input as a wallet transaction B, B\n+will be reported as having -5 confirmations. If another wallet transaction C\n+spends an output from B, it will also be reported as having -5 confirmations.\n+To detect conflicts with historical transactions in the chain a one-time\n+`-rescan` may be needed.\n+\n+Unlike earlier versions, unconfirmed but non-conflicting transactions will never\n+get a negative confirmation count. They are not treated as spendable unless\n+they're coming from ourself (change) and accepted into our local mempool,\n+however. The new \"trusted\" field in the `listtransactions` RPC output\n+indicates whether outputs of an unconfirmed transaction are considered\n+spendable.\n+\n+Wallet: Merkle branches removed\n+-------------------------------\n+\n+Previously, every wallet transaction stored a Merkle branch to prove its\n+presence in blocks. This wasn't being used for more than an expensive\n+sanity check. Since 0.12, these are no longer stored. When loading a\n+0.12 wallet into an older version, it will automatically rescan to avoid\n+failed checks.\n+\n+Wallet: Pruning\n+---------------\n+\n+With 0.12 it is possible to use wallet functionality in pruned mode.\n+This can reduce the disk usage from currently around 60 GB to\n+around 2 GB.\n+\n+However, rescans as well as the RPCs `importwallet`, `importaddress`,\n+`importprivkey` are disabled.\n+\n+To enable block pruning set `prune=<N>` on the command line or in\n+`bitcoin.conf`, where `N` is the number of MiB to allot for\n+raw block & undo data.\n+\n+A value of 0 disables pruning. The minimal value above 0 is 550. Your\n+wallet is as secure with high values as it is with low ones. Higher\n+values merely ensure that your node will not shut down upon blockchain\n+reorganizations of more than 2 days - which are unlikely to happen in\n+practice. In future releases, a higher value may also help the network\n+as a whole: stored blocks could be served to other nodes.\n+\n+For further information about pruning, you may also consult the [release\n+notes of v0.11.0](https://github.com/bitcoin/bitcoin/blob/v0.11.0/doc/release-notes.md#block-file-pruning).\n+\n+`NODE_BLOOM` service bit\n+------------------------\n+\n+Support for the `NODE_BLOOM` service bit, as described in [BIP\n+111](https://github.com/bitcoin/bips/blob/master/bip-0111.mediawiki), has been\n+added to the P2P protocol code.\n+\n+BIP 111 defines a service bit to allow peers to advertise that they support\n+bloom filters (such as used by SPV clients) explicitly. It also bumps the protocol\n+version to allow peers to identify old nodes which allow bloom filtering of the\n+connection despite lacking the new service bit.\n+\n+In this version, it is only enforced for peers that send protocol versions\n+`>=70011`. For the next major version it is planned that this restriction will be\n+removed. It is recommended to update SPV clients to check for the `NODE_BLOOM`\n+service bit for nodes that report versions newer than 70011.\n+\n+Option parsing behavior\n+-----------------------\n+\n+Command line options are now parsed strictly in the order in which they are\n+specified. It used to be the case that `-X -noX` ends up, unintuitively, with X\n+set, as `-X` had precedence over `-noX`. This is no longer the case. Like for\n+other software, the last specified value for an option will hold.\n+\n+RPC: Low-level API changes\n+--------------------------\n+\n+- Monetary amounts can be provided as strings. This means that for example the\n+  argument to sendtoaddress can be \"0.0001\" instead of 0.0001. This can be an\n+  advantage if a JSON library insists on using a lossy floating point type for\n+  numbers, which would be dangerous for monetary amounts.\n+\n+* The `asm` property of each scriptSig now contains the decoded signature hash\n+  type for each signature that provides a valid defined hash type.\n+\n+* OP_NOP2 has been renamed to OP_CHECKLOCKTIMEVERIFY by [BIP 65](https://github.com/bitcoin/bips/blob/master/bip-0065.mediawiki)\n+\n+The following items contain assembly representations of scriptSig signatures\n+and are affected by this change:\n+\n+- RPC `getrawtransaction`\n+- RPC `decoderawtransaction`\n+- RPC `decodescript`\n+- REST `/rest/tx/` (JSON format)\n+- REST `/rest/block/` (JSON format when including extended tx details)\n+- `bitcoin-tx -json`\n+\n+For example, the `scriptSig.asm` property of a transaction input that\n+previously showed an assembly representation of:\n+\n+    304502207fa7a6d1e0ee81132a269ad84e68d695483745cde8b541e3bf630749894e342a022100c1f7ab20e13e22fb95281a870f3dcf38d782e53023ee313d741ad0cfbc0c509001 400000 OP_NOP2\n+\n+now shows as:\n+\n+    304502207fa7a6d1e0ee81132a269ad84e68d695483745cde8b541e3bf630749894e342a022100c1f7ab20e13e22fb95281a870f3dcf38d782e53023ee313d741ad0cfbc0c5090[ALL] 400000 OP_CHECKLOCKTIMEVERIFY\n+\n+Note that the output of the RPC `decodescript` did not change because it is\n+configured specifically to process scriptPubKey and not scriptSig scripts.\n+\n+RPC: SSL support dropped\n+------------------------\n+\n+SSL support for RPC, previously enabled by the option `rpcssl` has been dropped\n+from both the client and the server. This was done in preparation for removing\n+the dependency on OpenSSL for the daemon completely.\n+\n+Trying to use `rpcssl` will result in an error:\n+\n+    Error: SSL mode for RPC (-rpcssl) is no longer supported.\n+\n+If you are one of the few people that relies on this feature, a flexible\n+migration path is to use `stunnel`. This is an utility that can tunnel\n+arbitrary TCP connections inside SSL. On e.g. Ubuntu it can be installed with:\n+\n+    sudo apt-get install stunnel4\n+\n+Then, to tunnel a SSL connection on 28332 to a RPC server bound on localhost on port 18332 do:\n+\n+    stunnel -d 28332 -r 127.0.0.1:18332 -p stunnel.pem -P ''\n+\n+It can also be set up system-wide in inetd style.\n+\n+Another way to re-attain SSL would be to setup a httpd reverse proxy. This solution\n+would allow the use of different authentication, loadbalancing, on-the-fly compression and\n+caching. A sample config for apache2 could look like:\n+\n+    Listen 443\n+\n+    NameVirtualHost *:443\n+    <VirtualHost *:443>\n+\n+    SSLEngine On\n+    SSLCertificateFile /etc/apache2/ssl/server.crt\n+    SSLCertificateKeyFile /etc/apache2/ssl/server.key\n+\n+    <Location /bitcoinrpc>\n+        ProxyPass http://127.0.0.1:8332/\n+        ProxyPassReverse http://127.0.0.1:8332/\n+        # optional enable digest auth\n+        # AuthType Digest\n+        # ...\n+\n+        # optional bypass bitcoind rpc basic auth\n+        # RequestHeader set Authorization \"Basic <hash>\"\n+        # get the <hash> from the shell with: base64 <<< bitcoinrpc:<password>\n+    </Location>\n+\n+    # Or, balance the load:\n+    # ProxyPass / balancer://balancer_cluster_name\n+\n+    </VirtualHost>\n+\n+Mining Code Changes\n+-------------------\n+\n+The mining code in 0.12 has been optimized to be significantly faster and use less\n+memory. As part of these changes, consensus critical calculations are cached on a\n+transaction's acceptance into the mempool and the mining code now relies on the\n+consistency of the mempool to assemble blocks. However all blocks are still tested\n+for validity after assembly.\n+\n+Other P2P Changes\n+-----------------\n+\n+The list of banned peers is now stored on disk rather than in memory.\n+Restarting bitcoind will no longer clear out the list of banned peers; instead\n+a new RPC call (`clearbanned`) can be used to manually clear the list.  The new\n+`setban` RPC call can also be used to manually ban or unban a peer.\n+\n+0.12.0 Change log\n+=================\n+\n+Detailed release notes follow. This overview includes changes that affect\n+behavior, not code moves, refactors and string updates. For convenience in locating\n+the code changes and accompanying discussion, both the pull request and\n+git merge commit are mentioned.\n+\n+### RPC and REST\n+\n+- #6121 `466f0ea` Convert entire source tree from json_spirit to UniValue (Jonas Schnelli)\n+- #6234 `d38cd47` fix rpcmining/getblocktemplate univalue transition logic error (Jonas Schnelli)\n+- #6239 `643114f` Don't go through double in AmountFromValue and ValueFromAmount (Wladimir J. van der Laan)\n+- #6266 `ebab5d3` Fix univalue handling of \\u0000 characters. (Daniel Kraft)\n+- #6276 `f3d4dbb` Fix getbalance * 0 (Tom Harding)\n+- #6257 `5ebe7db` Add `paytxfee` and `errors` JSON fields where appropriate (Stephen)\n+- #6271 `754aae5` New RPC command disconnectnode (Alex van der Peet)\n+- #6158 `0abfa8a` Add setban/listbanned RPC commands (Jonas Schnelli)\n+- #6307 `7ecdcd9` rpcban fixes (Jonas Schnelli)\n+- #6290 `5753988` rpc: make `gettxoutsettinfo` run lock-free (Wladimir J. van der Laan)\n+- #6262 `247b914` Return all available information via RPC call \"validateaddress\" (dexX7)\n+- #6339 `c3f0490` UniValue: don't escape solidus, keep espacing of reverse solidus (Jonas Schnelli)\n+- #6353 `6bcb0a2` Show softfork status in getblockchaininfo (Wladimir J. van der Laan)\n+- #6247 `726e286` Add getblockheader RPC call (Peter Todd)\n+- #6362 `d6db115` Fix null id in RPC response during startup (Forrest Voight)\n+- #5486 `943b322` [REST] JSON support for /rest/headers (Jonas Schnelli)\n+- #6379 `c52e8b3` rpc: Accept scientific notation for monetary amounts in JSON (Wladimir J. van der Laan)\n+- #6388 `fd5dfda` rpc: Implement random-cookie based authentication (Wladimir J. van der Laan)\n+- #6457 `3c923e8` Include pruned state in chaininfo.json (Simon Males)\n+- #6456 `bfd807f` rpc: Avoid unnecessary parsing roundtrip in number formatting, fix locale issue (Wladimir J. van der Laan)\n+- #6380 `240b30e` rpc: Accept strings in AmountFromValue (Wladimir J. van der Laan)\n+- #6346 `6bb2805` Add OP_RETURN support in createrawtransaction RPC call, add tests. (paveljanik)\n+- #6013 `6feeec1` [REST] Add memory pool API (paveljanik)\n+- #6576 `da9beb2` Stop parsing JSON after first finished construct. (Daniel Kraft)\n+- #5677 `9aa9099` libevent-based http server (Wladimir J. van der Laan)\n+- #6633 `bbc2b39` Report minimum ping time in getpeerinfo (Matt Corallo)\n+- #6648 `cd381d7` Simplify logic of REST request suffix parsing. (Daniel Kraft)\n+- #6695 `5e21388` libevent http fixes (Wladimir J. van der Laan)\n+- #5264 `48efbdb` show scriptSig signature hash types in transaction decodes. fixes #3166 (mruddy)\n+- #6719 `1a9f19a` Make HTTP server shutdown more graceful (Wladimir J. van der Laan)\n+- #6859 `0fbfc51` http: Restrict maximum size of http + headers (Wladimir J. van der Laan)\n+- #5936 `bf7c195` [RPC] Add optional locktime to createrawtransaction (Tom Harding)\n+- #6877 `26f5b34` rpc: Add maxmempool and effective min fee to getmempoolinfo (Wladimir J. van der Laan)\n+- #6970 `92701b3` Fix crash in validateaddress with -disablewallet (Wladimir J. van der Laan)\n+- #5574 `755b4ba` Expose GUI labels in RPC as comments (Luke-Jr)\n+- #6990 `dbd2c13` http: speed up shutdown (Wladimir J. van der Laan)\n+- #7013 `36baa9f` Remove LOCK(cs_main) from decodescript (Peter Todd)\n+- #6999 `972bf9c` add (max)uploadtarget infos to getnettotals RPC help (Jonas Schnelli)\n+- #7011 `31de241` Add mediantime to getblockchaininfo (Peter Todd)\n+- #7065 `f91e29f` http: add Boost 1.49 compatibility (Wladimir J. van der Laan)\n+- #7087 `be281d8` [Net]Add -enforcenodebloom option (Patrick Strateman)\n+- #7044 `438ee59` RPC: Added additional config option for multiple RPC users. (Gregory Sanders)\n+- #7072 `c143c49` [RPC] Add transaction size to JSON output (Nikita Zhavoronkov)\n+- #7022 `9afbd96` Change default block priority size to 0 (Alex Morcos)\n+- #7141 `c0c08c7` rpc: Don't translate warning messages (Wladimir J. van der Laan)\n+- #7312 `fd4bd50` Add RPC call abandontransaction (Alex Morcos)\n+- #7222 `e25b158` RPC: indicate which transactions are replaceable (Suhas Daftuar)\n+- #7472 `b2f2b85` rpc: Add WWW-Authenticate header to 401 response (Wladimir J. van der Laan)\n+- #7469 `9cb31e6` net.h fix spelling: misbeha{b,v}ing (Matt)\n+\n+### Configuration and command-line options\n+\n+- #6164 `8d05ec7` Allow user to use -debug=1 to enable all debugging (lpescher)\n+- #5288 `4452205` Added `-whiteconnections=<n>` option (Josh Lehan)\n+- #6284 `10ac38e` Fix argument parsing oddity with -noX (Wladimir J. van der Laan)\n+- #6489 `c9c017a` Give a better error message if system clock is bad (Casey Rodarmor)\n+- #6462 `c384800` implement uacomment config parameter which can add comments to user agent as per BIP-0014 (Pavol Rusnak)\n+- #6647 `a3babc8` Sanitize uacomment (MarcoFalke)\n+- #6742 `3b2d37c` Changed logging to make -logtimestamps to work also for -printtoconsole (arnuschky)\n+- #6846 `2cd020d` alias -h for -help (Daniel Cousens)\n+- #6622 `7939164` Introduce -maxuploadtarget (Jonas Schnelli)\n+- #6881 `2b62551` Debug: Add option for microsecond precision in debug.log (Suhas Daftuar)\n+- #6776 `e06c14f` Support -checkmempool=N, which runs checks once every N transactions (Pieter Wuille)\n+- #6896 `d482c0a` Make -checkmempool=1 not fail through int32 overflow (Pieter Wuille)\n+- #6993 `b632145` Add -blocksonly option (Patrick Strateman)\n+- #7323 `a344880` 0.12: Backport -bytespersigop option (Luke-Jr)\n+- #7386 `da83ecd` Add option `-permitrbf` to set transaction replacement policy (Wladimir J. van der Laan)\n+- #7290 `b16b5bc` Add missing options help (MarcoFalke)\n+- #7440 `c76bfff` Rename permitrbf to mempoolreplacement and provide minimal string-list forward compatibility (Luke-Jr)\n+\n+### Block and transaction handling\n+\n+- #6203 `f00b623` Remove P2SH coinbase flag, no longer interesting (Luke-Jr)\n+- #6222 `9c93ee5` Explicitly set tx.nVersion for the genesis block and mining tests (Mark Friedenbach)\n+- #5985 `3a1d3e8` Fix removing of orphan transactions (Alex Morcos)\n+- #6221 `dd8fe82` Prune: Support noncontiguous block files (Adam Weiss)\n+- #6124 `41076aa` Mempool only CHECKLOCKTIMEVERIFY (BIP65) verification, unparameterized version (Peter Todd)\n+- #6329 `d0a10c1` acceptnonstdtxn option to skip (most) \"non-standard transaction\" checks, for testnet/regtest only (Luke-Jr)\n+- #6410 `7cdefb9` Implement accurate memory accounting for mempool (Pieter Wuille)\n+- #6444 `24ce77d` Exempt unspendable transaction outputs from dust checks (dexX7)\n+- #5913 `a0625b8` Add absurdly high fee message to validation state (Shaul Kfir)\n+- #6177 `2f746c6` Prevent block.nTime from decreasing (Mark Friedenbach)\n+- #6377 `e545371` Handle no chain tip available in InvalidChainFound() (Ross Nicoll)\n+- #6551 `39ddaeb` Handle leveldb::DestroyDB() errors on wipe failure (Adam Weiss)\n+- #6654 `b0ce450` Mempool package tracking (Suhas Daftuar)\n+- #6715 `82d2aef` Fix mempool packages (Suhas Daftuar)\n+- #6680 `4f44530` use CBlockIndex instead of uint256 for UpdatedBlockTip signal (Jonas Schnelli)\n+- #6650 `4fac576` Obfuscate chainstate (James O'Beirne)\n+- #6777 `9caaf6e` Unobfuscate chainstate data in CCoinsViewDB::GetStats (James O'Beirne)\n+- #6722 `3b20e23` Limit mempool by throwing away the cheapest txn and setting min relay fee to it (Matt Corallo)\n+- #6889 `38369dd` fix locking issue with new mempool limiting (Jonas Schnelli)\n+- #6464 `8f3b3cd` Always clean up manual transaction prioritization (Casey Rodarmor)\n+- #6865 `d0badb9` Fix chainstate serialized_size computation (Pieter Wuille)\n+- #6566 `ff057f4` BIP-113: Mempool-only median time-past as endpoint for lock-time calculations (Mark Friedenbach)\n+- #6934 `3038eb6` Restores mempool only BIP113 enforcement (Gregory Maxwell)\n+- #6965 `de7d459` Benchmark sanity checks and fork checks in ConnectBlock (Matt Corallo)\n+- #6918 `eb6172a` Make sigcache faster, more efficient, larger (Pieter Wuille)\n+- #6771 `38ed190` Policy: Lower default limits for tx chains (Alex Morcos)\n+- #6932 `73fa5e6` ModifyNewCoins saves database lookups (Alex Morcos)\n+- #5967 `05d5918` Alter assumptions in CCoinsViewCache::BatchWrite (Alex Morcos)\n+- #6871 `0e93586` nSequence-based Full-RBF opt-in (Peter Todd)\n+- #7008 `eb77416` Lower bound priority (Alex Morcos)\n+- #6915 `2ef5ffa` [Mempool] Improve removal of invalid transactions after reorgs (Suhas Daftuar)\n+- #6898 `4077ad2` Rewrite CreateNewBlock (Alex Morcos)\n+- #6872 `bdda4d5` Remove UTXO cache entries when the tx they were added for is removed/does not enter mempool (Matt Corallo)\n+- #7062 `12c469b` [Mempool] Fix mempool limiting and replace-by-fee for PrioritiseTransaction (Suhas Daftuar)\n+- #7276 `76de36f` Report non-mandatory script failures correctly (Pieter Wuille)\n+- #7217 `e08b7cb` Mark blocks with too many sigops as failed (Suhas Daftuar)\n+- #7387 `f4b2ce8` Get rid of inaccurate ScriptSigArgsExpected (Pieter Wuille)\n+\n+### P2P protocol and network code\n+\n+- #6172 `88a7ead` Ignore getheaders requests when not synced (Suhas Daftuar)\n+- #5875 `9d60602` Be stricter in processing unrequested blocks (Suhas Daftuar)\n+- #6256 `8ccc07c` Use best header chain timestamps to detect partitioning (Gavin Andresen)\n+- #6283 `a903ad7` make CAddrMan::size() return the correct type of size_t (Diapolo)\n+- #6272 `40400d5` Improve proxy initialization (continues #4871) (Wladimir J. van der Laan, Diapolo)\n+- #6310 `66e5465` banlist.dat: store banlist on disk (Jonas Schnelli)\n+- #6412 `1a2de32` Test whether created sockets are select()able (Pieter Wuille)\n+- #6498 `219b916` Keep track of recently rejected transactions with a rolling bloom filter (cont'd) (Peter Todd)\n+- #6556 `70ec975` Fix masking of irrelevant bits in address groups. (Alex Morcos)\n+- #6530 `ea19c2b` Improve addrman Select() performance when buckets are nearly empty (Pieter Wuille)\n+- #6583 `af9305a` add support for miniupnpc api version 14 (Pavel Vasin)\n+- #6374 `69dc5b5` Connection slot exhaustion DoS mitigation (Patrick Strateman)\n+- #6636 `536207f` net: correctly initialize nMinPingUsecTime (Wladimir J. van der Laan)\n+- #6579 `0c27795` Add NODE_BLOOM service bit and bump protocol version (Matt Corallo)\n+- #6148 `999c8be` Relay blocks when pruning (Suhas Daftuar)\n+- #6588 `cf9bb11` In (strCommand == \"tx\"), return if AlreadyHave() (Tom Harding)\n+- #6974 `2f71b07` Always allow getheaders from whitelisted peers (Wladimir J. van der Laan)\n+- #6639 `bd629d7` net: Automatically create hidden service, listen on Tor (Wladimir J. van der Laan)\n+- #6984 `9ffc687` don't enforce maxuploadtarget's disconnect for whitelisted peers (Jonas Schnelli)\n+- #7046 `c322652` Net: Improve blocks only mode. (Patrick Strateman)\n+- #7090 `d6454f6` Connect to Tor hidden services by default (when listening on Tor) (Peter Todd)\n+- #7106 `c894fbb` Fix and improve relay from whitelisted peers (Pieter Wuille)\n+- #7129 `5d5ef3a` Direct headers announcement (rebase of #6494) (Pieter Wuille)\n+- #7079 `1b5118b` Prevent peer flooding inv request queue (redux) (redux) (Gregory Maxwell)\n+- #7166 `6ba25d2` Disconnect on mempool requests from peers when over the upload limit. (Gregory Maxwell)\n+- #7133 `f31955d` Replace setInventoryKnown with a rolling bloom filter (rebase of #7100) (Pieter Wuille)\n+- #7174 `82aff88` Don't do mempool lookups for \"mempool\" command without a filter (Matt Corallo)\n+- #7179 `44fef99` net: Fix sent reject messages for blocks and transactions (Wladimir J. van der Laan)\n+- #7181 `8fc174a` net: Add and document network messages in protocol.h (Wladimir J. van der Laan)\n+- #7125 `10b88be` Replace global trickle node with random delays (Pieter Wuille)\n+- #7415 `cb83beb` net: Hardcoded seeds update January 2016 (Wladimir J. van der Laan)\n+- #7438 `e2d9a58` Do not absolutely protect local peers; decide group ties based on time (Gregory Maxwell)\n+- #7439 `86755bc` Add whitelistforcerelay to control forced relaying. [#7099 redux] (Gregory Maxwell)\n+- #7482 `e16f5b4` Ensure headers count is correct (Suhas Daftuar)\n+\n+### Validation\n+\n+- #5927 `8d9f0a6` Reduce checkpoints' effect on consensus. (Pieter Wuille)\n+- #6299 `24f2489` Bugfix: Don't check the genesis block header before accepting it (Jorge Tim\u00f3n)\n+- #6361 `d7ada03` Use real number of cores for default -par, ignore virtual cores (Wladimir J. van der Laan)\n+- #6519 `87f37e2` Make logging for validation optional (Wladimir J. van der Laan)\n+- #6351 `2a1090d` CHECKLOCKTIMEVERIFY (BIP65) IsSuperMajority() soft-fork (Peter Todd)\n+- #6931 `54e8bfe` Skip BIP 30 verification where not necessary (Alex Morcos)\n+- #6954 `e54ebbf` Switch to libsecp256k1-based ECDSA validation (Pieter Wuille)\n+- #6508 `61457c2` Switch to a constant-space Merkle root/branch algorithm. (Pieter Wuille)\n+- #6914 `327291a` Add pre-allocated vector type and use it for CScript (Pieter Wuille)\n+- #7500 `889e5b3` Correctly report high-S violations (Pieter Wuille)\n+\n+\n+### Build system\n+\n+- #6210 `0e4f2a0` build: disable optional use of gmp in internal secp256k1 build (Wladimir J. van der Laan)\n+- #6214 `87406aa` [OSX] revert renaming of Bitcoin-Qt.app and use CFBundleDisplayName (partial revert of #6116) (Jonas Schnelli)\n+- #6218 `9d67b10` build/gitian misc updates (Cory Fields)\n+- #6269 `d4565b6` gitian: Use the new bitcoin-detached-sigs git repo for OSX signatures (Cory Fields)\n+- #6418 `d4a910c` Add autogen.sh to source tarball. (randy-waterhouse)\n+- #6373 `1ae3196` depends: non-qt bumps for 0.12 (Cory Fields)\n+- #6434 `059b352` Preserve user-passed CXXFLAGS with --enable-debug (Gavin Andresen)\n+- #6501 `fee6554` Misc build fixes (Cory Fields)\n+- #6600 `ef4945f` Include bitcoin-tx binary on Debian/Ubuntu (Zak Wilcox)\n+- #6619 `4862708` depends: bump miniupnpc and ccache (Michael Ford)\n+- #6801 `ae69a75` [depends] Latest config.guess and config.sub (Michael Ford)\n+- #6938 `193f7b5` build: If both Qt4 and Qt5 are installed, use Qt5 (Wladimir J. van der Laan)\n+- #7092 `348b281` build: Set osx permissions in the dmg to make Gatekeeper happy (Cory Fields)\n+- #6980 `eccd671` [Depends] Bump Boost, miniupnpc, ccache & zeromq (Michael Ford)\n+- #7424 `aa26ee0` Add security/export checks to gitian and fix current failures (Cory Fields)\n+\n+### Wallet\n+\n+- #6183 `87550ee` Fix off-by-one error w/ nLockTime in the wallet (Peter Todd)\n+- #6057 `ac5476e` re-enable wallet in autoprune (Jonas Schnelli)\n+- #6356 `9e6c33b` Delay initial pruning until after wallet init (Adam Weiss)\n+- #6088 `91389e5` fundrawtransaction (Matt Corallo)\n+- #6415 `ddd8d80` Implement watchonly support in fundrawtransaction (Matt Corallo)\n+- #6567 `0f0f323` Fix crash when mining with empty keypool. (Daniel Kraft)\n+- #6688 `4939eab` Fix locking in GetTransaction. (Alex Morcos)\n+- #6645 `4dbd43e` Enable wallet key imports without rescan in pruned mode. (Gregory Maxwell)\n+- #6550 `5b77244` Do not store Merkle branches in the wallet. (Pieter Wuille)\n+- #5924 `12a7712` Clean up change computation in CreateTransaction. (Daniel Kraft)\n+- #6906 `48b5b84` Reject invalid pubkeys when reading ckey items from the wallet. (Gregory Maxwell)\n+- #7010 `e0a5ef8` Fix fundrawtransaction handling of includeWatching (Peter Todd)\n+- #6851 `616d61b` Optimisation: Store transaction list order in memory rather than compute it every need (Luke-Jr)\n+- #6134 `e92377f` Improve usage of fee estimation code (Alex Morcos)\n+- #7103 `a775182` [wallet, rpc tests] Fix settxfee, paytxfee (MarcoFalke)\n+- #7105 `30c2d8c` Keep track of explicit wallet conflicts instead of using mempool (Pieter Wuille)\n+- #7096 `9490bd7` [Wallet] Improve minimum absolute fee GUI options (Jonas Schnelli)\n+- #6216 `83f06ca` Take the training wheels off anti-fee-sniping (Peter Todd)\n+- #4906 `96e8d12` Issue#1643: Coinselection prunes extraneous inputs from ApproximateBestSubset (Murch)\n+- #7200 `06c6a58` Checks for null data transaction before issuing error to debug.log (Andy Craze)\n+- #7296 `a36d79b` Add sane fallback for fee estimation (Alex Morcos)\n+- #7293 `ff9b610` Add regression test for vValue sort order (MarcoFalke)\n+- #7306 `4707797` Make sure conflicted wallet tx's update balances (Alex Morcos)\n+- #7381 `621bbd8` [walletdb] Fix syntax error in key parser (MarcoFalke)\n+- #7491 `00ec73e` wallet: Ignore MarkConflict if block hash is not known (Wladimir J. van der Laan)\n+- #7502 `1329963` Update the wallet best block marker before pruning (Pieter Wuille)\n+\n+### GUI\n+\n+- #6217 `c57e12a` disconnect peers from peers tab via context menu (Diapolo)\n+- #6209 `ab0ec67` extend rpc console peers tab (Diapolo)\n+- #6484 `1369d69` use CHashWriter also in SignVerifyMessageDialog (Pavel Vasin)\n+- #6487 `9848d42` Introduce PlatformStyle (Wladimir J. van der Laan)\n+- #6505 `100c9d3` cleanup icons (MarcoFalke)\n+- #4587 `0c465f5` allow users to set -onion via GUI (Diapolo)\n+- #6529 `c0f66ce` show client user agent in debug window (Diapolo)\n+- #6594 `878ea69` Disallow duplicate windows. (Casey Rodarmor)\n+- #5665 `6f55cdd` add verifySize() function to PaymentServer (Diapolo)\n+- #6317 `ca5e2a1` minor optimisations in peertablemodel (Diapolo)\n+- #6315 `e59d2a8` allow banning and unbanning over UI->peers table (Jonas Schnelli)\n+- #6653 `e04b2fa` Pop debug window in foreground when opened twice (MarcoFalke)\n+- #6864 `c702521` Use monospace font (MarcoFalke)\n+- #6887 `3694b74` Update coin control and smartfee labels (MarcoFalke)\n+- #7000 `814697c` add shortcurts for debug-/console-window (Jonas Schnelli)\n+- #6951 `03403d8` Use maxTxFee instead of 10000000 (MarcoFalke)\n+- #7051 `a190777` ui: Add \"Copy raw transaction data\" to transaction list context menu (Wladimir J. van der Laan)\n+- #6979 `776848a` simple mempool info in debug window (Jonas Schnelli)\n+- #7006 `26af1ac` add startup option to reset Qt settings (Jonas Schnelli)\n+- #6780 `2a94cd6` Call init's parameter interaction before we create the UI options model (Jonas Schnelli)\n+- #7112 `96b8025` reduce cs_main locks during tip update, more fluently update UI (Jonas Schnelli)\n+- #7206 `f43c2f9` Add \"NODE_BLOOM\" to guiutil so that peers don't get UNKNOWN[4] (Matt Corallo)\n+- #7282 `5cadf3e` fix coincontrol update issue when deleting a send coins entry (Jonas Schnelli)\n+- #7319 `1320300` Intro: Display required space (MarcoFalke)\n+- #7318 `9265e89` quickfix for RPC timer interface problem (Jonas Schnelli)\n+- #7327 `b16b5bc` [Wallet] Transaction View: LastMonth calculation fixed (crowning-)\n+- #7364 `7726c48` [qt] Windows: Make rpcconsole monospace font larger (MarcoFalke)\n+- #7384 `294f432` [qt] Peertable: Increase SUBVERSION_COLUMN_WIDTH (MarcoFalke)\n+\n+### Tests and QA\n+\n+- #6305 `9005c91` build: comparison tool swap (Cory Fields)\n+- #6318 `e307e13` build: comparison tool NPE fix (Cory Fields)\n+- #6337 `0564c5b` Testing infrastructure: mocktime fixes (Gavin Andresen)\n+- #6350 `60abba1` add unit tests for the decodescript rpc (mruddy)\n+- #5881 `3203a08` Fix and improve txn_doublespend.py test (Tom Harding)\n+- #6390 `6a73d66` tests: Fix bitcoin-tx signing test case (Wladimir J. van der Laan)\n+- #6368 `7fc25c2` CLTV: Add more tests to improve coverage (Esteban Ordano)\n+- #6414 `5121c68` Fix intermittent test failure, reduce test time (Tom Harding)\n+- #6417 `44fa82d` [QA] fix possible reorg issue in (fund)rawtransaction(s).py RPC test (Jonas Schnelli)\n+- #6398 `3d9362d` rpc: Remove chain-specific RequireRPCPassword (Wladimir J. van der Laan)\n+- #6428 `bb59e78` tests: Remove old sh-based test framework (Wladimir J. van der Laan)\n+- #5515 `d946e9a` RFC: Assert on probable deadlocks if the second lock isnt try_lock (Matt Corallo)\n+- #6287 `d2464df` Clang lock debug (Cory Fields)\n+- #6465 `410fd74` Don't share objects between TestInstances (Casey Rodarmor)\n+- #6534 `6c1c7fd` Fix test locking issues and un-revert the probable-deadlines assertions commit (Cory Fields)\n+- #6509 `bb4faee` Fix race condition on test node shutdown (Casey Rodarmor)\n+- #6523 `561f8af` Add p2p-fullblocktest.py (Casey Rodarmor)\n+- #6590 `981fd92` Fix stale socket rebinding and re-enable python tests for Windows (Cory Fields)\n+- #6730 `cb4d6d0` build: Remove dependency of bitcoin-cli on secp256k1 (Wladimir J. van der Laan)\n+- #6616 `5ab5dca` Regression Tests: Migrated rpc-tests.sh to all Python rpc-tests.py (Peter Tschipper)\n+- #6720 `d479311` Creates unittests for addrman, makes addrman more testable. (Ethan Heilman)\n+- #6853 `c834f56` Added fPowNoRetargeting field to Consensus::Params (Eric Lombrozo)\n+- #6827 `87e5539` [rpc-tests] Check return code (MarcoFalke)\n+- #6848 `f2c869a` Add DERSIG transaction test cases (Ross Nicoll)\n+- #6813 `5242bb3` Support gathering code coverage data for RPC tests with lcov (dexX7)\n+- #6888 `c8322ff` Clear strMiscWarning before running PartitionAlert (Eric Lombrozo)\n+- #6894 `2675276` [Tests] Fix BIP65 p2p test (Suhas Daftuar)\n+- #6863 `725539e` [Test Suite] Fix test for null tx input (Daniel Kraft)\n+- #6926 `a6d0d62` tests: Initialize networking on windows (Wladimir J. van der Laan)\n+- #6822 `9fa54a1` [tests] Be more strict checking dust (MarcoFalke)\n+- #6804 `5fcc14e` [tests] Add basic coverage reporting for RPC tests (James O'Beirne)\n+- #7045 `72dccfc` Bugfix: Use unique autostart filenames on Linux for testnet/regtest (Luke-Jr)\n+- #7095 `d8368a0` Replace scriptnum_test's normative ScriptNum implementation (Wladimir J. van der Laan)\n+- #7063 `6abf6eb` [Tests] Add prioritisetransaction RPC test (Suhas Daftuar)\n+- #7137 `16f4a6e` Tests: Explicitly set chain limits in replace-by-fee test (Suhas Daftuar)\n+- #7216 `9572e49` Removed offline testnet DNSSeed 'alexykot.me'. (tnull)\n+- #7209 `f3ad812` test: don't override BITCOIND and BITCOINCLI if they're set (Wladimir J. van der Laan)\n+- #7226 `301f16a` Tests: Add more tests to p2p-fullblocktest (Suhas Daftuar)\n+- #7153 `9ef7c54` [Tests] Add mempool_limit.py test (Jonas Schnelli)\n+- #7170 `453c567` tests: Disable Tor interaction (Wladimir J. van der Laan)\n+- #7229 `1ed938b` [qa] wallet: Check if maintenance changes the balance (MarcoFalke)\n+- #7308 `d513405` [Tests] Eliminate intermittent failures in sendheaders.py (Suhas Daftuar)\n+- #7468 `947c4ff` [rpc-tests] Change solve() to use rehash (Brad Andrews)\n+\n+### Miscellaneous\n+\n+- #6213 `e54ff2f` [init] add -blockversion help and extend -upnp help (Diapolo)\n+- #5975 `1fea667` Consensus: Decouple ContextualCheckBlockHeader from checkpoints (Jorge Tim\u00f3n)\n+- #6061 `eba2f06` Separate Consensus::CheckTxInputs and GetSpendHeight in CheckInputs (Jorge Tim\u00f3n)\n+- #5994 `786ed11` detach wallet from miner (Jonas Schnelli)\n+- #6387 `11576a5` [bitcoin-cli] improve error output (Jonas Schnelli)\n+- #6401 `6db53b4` Add BITCOIND_SIGTERM_TIMEOUT to OpenRC init scripts (Florian Schmaus)\n+- #6430 `b01981e` doc: add documentation for shared library libbitcoinconsensus (Braydon Fuller)\n+- #6372 `dcc495e` Update Linearize tool to support Windows paths; fix variable scope; update README and example configuration (Paul Georgiou)\n+- #6453 `8fe5cce` Separate core memory usage computation in core_memusage.h (Pieter Wuille)\n+- #6149 `633fe10` Buffer log messages and explicitly open logs (Adam Weiss)\n+- #6488 `7cbed7f` Avoid leaking file descriptors in RegisterLoad (Casey Rodarmor)\n+- #6497 `a2bf40d` Make sure LogPrintf strings are line-terminated (Wladimir J. van der Laan)\n+- #6504 `b6fee6b` Rationalize currency unit to \"BTC\" (Ross Nicoll)\n+- #6507 `9bb4dd8` Removed contrib/bitrpc (Casey Rodarmor)\n+- #6527 `41d650f` Use unique name for AlertNotify tempfile (Casey Rodarmor)\n+- #6561 `e08a7d9` limitedmap fixes and tests (Casey Rodarmor)\n+- #6565 `a6f2aff` Make sure we re-acquire lock if a task throws (Casey Rodarmor)\n+- #6599 `f4d88c4` Make sure LogPrint strings are line-terminated (Ross Nicoll)\n+- #6630 `195942d` Replace boost::reverse_lock with our own (Casey Rodarmor)\n+- #6103 `13b8282` Add ZeroMQ notifications (Jo\u00e3o Barbosa)\n+- #6692 `d5d1d2e` devtools: don't push if signing fails in github-merge (Wladimir J. van der Laan)\n+- #6728 `2b0567b` timedata: Prevent warning overkill (Wladimir J. van der Laan)\n+- #6713 `f6ce59c` SanitizeString: Allow hypen char (MarcoFalke)\n+- #5987 `4899a04` Bugfix: Fix testnet-in-a-box use case (Luke-Jr)\n+- #6733 `b7d78fd` Simple benchmarking framework (Gavin Andresen)\n+- #6854 `a092970` devtools: Add security-check.py (Wladimir J. van der Laan)\n+- #6790 `fa1d252` devtools: add clang-format.py (MarcoFalke)\n+- #7114 `f3d0fdd` util: Don't set strMiscWarning on every exception (Wladimir J. van der Laan)\n+- #7078 `93e0514` uint256::GetCheapHash bigendian compatibility (arowser)\n+- #7094 `34e02e0` Assert now > 0 in GetTime GetTimeMillis GetTimeMicros (Patrick Strateman)\n+\n+Credits\n+=======\n+\n+Thanks to everyone who directly contributed to this release:\n+\n+- accraze\n+- Adam Weiss\n+- Alex Morcos\n+- Alex van der Peet\n+- AlSzacrel\n+- Altoidnerd\n+- Andriy Voskoboinyk\n+- antonio-fr\n+- Arne Brutschy\n+- Ashley Holman\n+- Bob McElrath\n+- Braydon Fuller\n+- BtcDrak\n+- Casey Rodarmor\n+- centaur1\n+- Chris Kleeschulte\n+- Christian Decker\n+- Cory Fields\n+- crowning-\n+- daniel\n+- Daniel Cousens\n+- Daniel Kraft\n+- David Hill\n+- dexX7\n+- Diego Viola\n+- Elias Rohrer\n+- Eric Lombrozo\n+- Erik Mossberg\n+- Esteban Ordano\n+- EthanHeilman\n+- Florian Schmaus\n+- Forrest Voight\n+- Gavin Andresen\n+- Gregory Maxwell\n+- Gregory Sanders / instagibbs\n+- Ian T\n+- Irving Ruan\n+- Jacob Welsh\n+- James O'Beirne\n+- Jeff Garzik\n+- Johnathan Corgan\n+- Jonas Schnelli\n+- Jonathan Cross\n+- Jo\u00e3o Barbosa\n+- Jorge Tim\u00f3n\n+- Josh Lehan\n+- J Ross Nicoll\n+- kazcw\n+- Kevin Cooper\n+- lpescher\n+- Luke Dashjr\n+- MarcoFalke\n+- Mark Friedenbach\n+- Matt\n+- Matt Bogosian\n+- Matt Corallo\n+- Matt Quinn\n+- Micha\n+- Michael\n+- Michael Ford / fanquake\n+- Midnight Magic\n+- Mitchell Cash\n+- mrbandrews\n+- mruddy\n+- Nick\n+- Patrick Strateman\n+- Paul Georgiou\n+- Paul Rabahy\n+- Pavel Jan\u00edk / paveljanik\n+- Pavel Vasin\n+- Pavol Rusnak\n+- Peter Josling\n+- Peter Todd\n+- Philip Kaufmann\n+- Pieter Wuille\n+- ptschip\n+- randy-waterhouse\n+- rion\n+- Ross Nicoll\n+- Ryan Havar\n+- Shaul Kfir\n+- Simon Males\n+- Stephen\n+- Suhas Daftuar\n+- tailsjoin\n+- Thomas Kerin\n+- Tom Harding\n+- tulip\n+- unsystemizer\n+- Veres Lajos\n+- Wladimir J. van der Laan\n+- xor-freenet\n+- Zak Wilcox\n+- zathras-crypto\n+\n+As well as everyone that helped translating on [Transifex](https://www.transifex.com/projects/p/bitcoin/)."
      },
      {
        "sha": "610cd481de4855f3d0d05e5d7d089f9c41ee9f06",
        "filename": "doc/release-notes/release-notes-0.12.1.md",
        "status": "added",
        "additions": 198,
        "deletions": 0,
        "changes": 198,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/doc/release-notes/release-notes-0.12.1.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/doc/release-notes/release-notes-0.12.1.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes/release-notes-0.12.1.md?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -0,0 +1,198 @@\n+Bitcoin Core version 0.12.1 is now available from:\n+\n+  <https://bitcoin.org/bin/bitcoin-core-0.12.1/>\n+\n+This is a new minor version release, including the BIP9, BIP68 and BIP112\n+softfork, various bugfixes and updated translations.\n+\n+Please report bugs using the issue tracker at github:\n+\n+  <https://github.com/bitcoin/bitcoin/issues>\n+\n+Upgrading and downgrading\n+=========================\n+\n+How to Upgrade\n+--------------\n+\n+If you are running an older version, shut it down. Wait until it has completely\n+shut down (which might take a few minutes for older versions), then run the\n+installer (on Windows) or just copy over /Applications/Bitcoin-Qt (on Mac) or\n+bitcoind/bitcoin-qt (on Linux).\n+\n+Downgrade warning\n+-----------------\n+\n+### Downgrade to a version < 0.12.0\n+\n+Because release 0.12.0 and later will obfuscate the chainstate on every\n+fresh sync or reindex, the chainstate is not backwards-compatible with\n+pre-0.12 versions of Bitcoin Core or other software.\n+\n+If you want to downgrade after you have done a reindex with 0.12.0 or later,\n+you will need to reindex when you first start Bitcoin Core version 0.11 or\n+earlier.\n+\n+Notable changes\n+===============\n+\n+First version bits BIP9 softfork deployment\n+-------------------------------------------\n+\n+This release includes a soft fork deployment to enforce [BIP68][],\n+[BIP112][] and [BIP113][] using the [BIP9][] deployment mechanism.\n+\n+The deployment sets the block version number to 0x20000001 between\n+midnight 1st May 2016 and midnight 1st May 2017 to signal readiness for \n+deployment. The version number consists of 0x20000000 to indicate version\n+bits together with setting bit 0 to indicate support for this combined\n+deployment, shown as \"csv\" in the `getblockchaininfo` RPC call.\n+\n+For more information about the soft forking change, please see\n+<https://github.com/bitcoin/bitcoin/pull/7648>\n+\n+This specific backport pull-request can be viewed at\n+<https://github.com/bitcoin/bitcoin/pull/7543>\n+\n+[BIP9]: https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki\n+[BIP68]: https://github.com/bitcoin/bips/blob/master/bip-0068.mediawiki\n+[BIP112]: https://github.com/bitcoin/bips/blob/master/bip-0112.mediawiki\n+[BIP113]: https://github.com/bitcoin/bips/blob/master/bip-0113.mediawiki\n+\n+BIP68 soft fork to enforce sequence locks for relative locktime\n+---------------------------------------------------------------\n+\n+[BIP68][] introduces relative lock-time consensus-enforced semantics of\n+the sequence number field to enable a signed transaction input to remain\n+invalid for a defined period of time after confirmation of its corresponding\n+outpoint.\n+\n+For more information about the implementation, see\n+<https://github.com/bitcoin/bitcoin/pull/7184>\n+\n+BIP112 soft fork to enforce OP_CHECKSEQUENCEVERIFY\n+--------------------------------------------------\n+\n+[BIP112][] redefines the existing OP_NOP3 as OP_CHECKSEQUENCEVERIFY (CSV)\n+for a new opcode in the Bitcoin scripting system that in combination with\n+[BIP68][] allows execution pathways of a script to be restricted based\n+on the age of the output being spent.\n+\n+For more information about the implementation, see\n+<https://github.com/bitcoin/bitcoin/pull/7524>\n+\n+BIP113 locktime enforcement soft fork\n+-------------------------------------\n+\n+Bitcoin Core 0.11.2 previously introduced mempool-only locktime\n+enforcement using GetMedianTimePast(). This release seeks to\n+consensus enforce the rule.\n+\n+Bitcoin transactions currently may specify a locktime indicating when\n+they may be added to a valid block.  Current consensus rules require\n+that blocks have a block header time greater than the locktime specified\n+in any transaction in that block.\n+\n+Miners get to choose what time they use for their header time, with the\n+consensus rule being that no node will accept a block whose time is more\n+than two hours in the future.  This creates a incentive for miners to\n+set their header times to future values in order to include locktimed\n+transactions which weren't supposed to be included for up to two more\n+hours.\n+\n+The consensus rules also specify that valid blocks may have a header\n+time greater than that of the median of the 11 previous blocks.  This\n+GetMedianTimePast() time has a key feature we generally associate with\n+time: it can't go backwards.\n+\n+[BIP113][] specifies a soft fork enforced in this release that\n+weakens this perverse incentive for individual miners to use a future\n+time by requiring that valid blocks have a computed GetMedianTimePast()\n+greater than the locktime specified in any transaction in that block.\n+\n+Mempool inclusion rules currently require transactions to be valid for\n+immediate inclusion in a block in order to be accepted into the mempool.\n+This release begins applying the BIP113 rule to received transactions,\n+so transaction whose time is greater than the GetMedianTimePast() will\n+no longer be accepted into the mempool.\n+\n+**Implication for miners:** you will begin rejecting transactions that\n+would not be valid under BIP113, which will prevent you from producing\n+invalid blocks when BIP113 is enforced on the network. Any\n+transactions which are valid under the current rules but not yet valid\n+under the BIP113 rules will either be mined by other miners or delayed\n+until they are valid under BIP113. Note, however, that time-based\n+locktime transactions are more or less unseen on the network currently.\n+\n+**Implication for users:** GetMedianTimePast() always trails behind the\n+current time, so a transaction locktime set to the present time will be\n+rejected by nodes running this release until the median time moves\n+forward. To compensate, subtract one hour (3,600 seconds) from your\n+locktimes to allow those transactions to be included in mempools at\n+approximately the expected time.\n+\n+For more information about the implementation, see\n+<https://github.com/bitcoin/bitcoin/pull/6566>\n+\n+Miscellaneous\n+-------------\n+\n+The p2p alert system is off by default. To turn on, use `-alert` with\n+startup configuration.\n+\n+0.12.1 Change log\n+=================\n+\n+Detailed release notes follow. This overview includes changes that affect\n+behavior, not code moves, refactors and string updates. For convenience in locating\n+the code changes and accompanying discussion, both the pull request and\n+git merge commit are mentioned.\n+\n+### RPC and other APIs\n+- #7739 `7ffc2bd` Add abandoned status to listtransactions (jonasschnelli)\n+\n+### Block and transaction handling\n+- #7543 `834aaef` Backport BIP9, BIP68 and BIP112 with softfork (btcdrak)\n+\n+### P2P protocol and network code\n+- #7804 `90f1d24` Track block download times per individual block (sipa)\n+- #7832 `4c3a00d` Reduce block timeout to 10 minutes (laanwj)\n+\n+### Validation\n+- #7821 `4226aac` init: allow shutdown during 'Activating best chain...' (laanwj)\n+- #7835 `46898e7` Version 2 transactions remain non-standard until CSV activates (sdaftuar)\n+\n+### Build system\n+- #7487 `00d57b4` Workaround Travis-side CI issues (luke-jr)\n+- #7606 `a10da9a` No need to set -L and --location for curl (MarcoFalke)\n+- #7614 `ca8f160` Add curl to packages (now needed for depends) (luke-jr)\n+- #7776 `a784675` Remove unnecessary executables from gitian release (laanwj)\n+\n+### Wallet\n+- #7715 `19866c1` Fix calculation of balances and available coins. (morcos)\n+\n+### Miscellaneous\n+- #7617 `f04f4fd` Fix markdown syntax and line terminate LogPrint (MarcoFalke)\n+- #7747 `4d035bc` added depends cross compile info (accraze)\n+- #7741 `a0cea89` Mark p2p alert system as deprecated (btcdrak)\n+- #7780 `c5f94f6` Disable bad-chain alert (btcdrak)\n+\n+Credits\n+=======\n+\n+Thanks to everyone who directly contributed to this release:\n+\n+- accraze\n+- Alex Morcos\n+- BtcDrak\n+- Jonas Schnelli\n+- Luke Dashjr\n+- MarcoFalke\n+- Mark Friedenbach\n+- NicolasDorier\n+- Pieter Wuille\n+- Suhas Daftuar\n+- Wladimir J. van der Laan\n+\n+As well as everyone that helped translating on [Transifex](https://www.transifex.com/projects/p/bitcoin/).\n+"
      },
      {
        "sha": "f9bf3d75de09db045a308d3223aa2b89d33a1989",
        "filename": "doc/release-notes/release-notes-0.13.0.md",
        "status": "added",
        "additions": 863,
        "deletions": 0,
        "changes": 863,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/doc/release-notes/release-notes-0.13.0.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/doc/release-notes/release-notes-0.13.0.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes/release-notes-0.13.0.md?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -0,0 +1,863 @@\n+Bitcoin Core version 0.13.0 is now available from:\n+\n+  <https://bitcoin.org/bin/bitcoin-core-0.13.0/>\n+\n+This is a new major version release, including new features, various bugfixes\n+and performance improvements, as well as updated translations.\n+\n+Please report bugs using the issue tracker at github:\n+\n+  <https://github.com/bitcoin/bitcoin/issues>\n+\n+To receive security and update notifications, please subscribe to:\n+\n+  <https://bitcoincore.org/en/list/announcements/join/>\n+\n+Compatibility\n+==============\n+\n+Microsoft ended support for Windows XP on [April 8th, 2014](https://www.microsoft.com/en-us/WindowsForBusiness/end-of-xp-support),\n+an OS initially released in 2001. This means that not even critical security\n+updates will be released anymore. Without security updates, using a bitcoin\n+wallet on a XP machine is irresponsible at least.\n+\n+In addition to that, with 0.12.x there have been varied reports of Bitcoin Core\n+randomly crashing on Windows XP. It is [not clear](https://github.com/bitcoin/bitcoin/issues/7681#issuecomment-217439891)\n+what the source of these crashes is, but it is likely that upstream\n+libraries such as Qt are no longer being tested on XP.\n+\n+We do not have time nor resources to provide support for an OS that is\n+end-of-life. From 0.13.0 on, Windows XP is no longer supported. Users are\n+suggested to upgrade to a newer verion of Windows, or install an alternative OS\n+that is supported.\n+\n+No attempt is made to prevent installing or running the software on Windows XP,\n+you can still do so at your own risk, but do not expect it to work: do not\n+report issues about Windows XP to the issue tracker.\n+\n+Notable changes\n+===============\n+\n+Database cache memory increased\n+--------------------------------\n+\n+As a result of growth of the UTXO set, performance with the prior default\n+database cache of 100 MiB has suffered.\n+For this reason the default was changed to 300 MiB in this release.\n+\n+For nodes on low-memory systems, the database cache can be changed back to\n+100 MiB (or to another value) by either:\n+\n+- Adding `dbcache=100` in bitcoin.conf\n+- Changing it in the GUI under `Options \u2192 Size of database cache`\n+\n+Note that the database cache setting has the most performance impact\n+during initial sync of a node, and when catching up after downtime.\n+\n+\n+bitcoin-cli: arguments privacy\n+------------------------------\n+\n+The RPC command line client gained a new argument, `-stdin`\n+to read extra arguments from standard input, one per line until EOF/Ctrl-D.\n+For example:\n+\n+    $ src/bitcoin-cli -stdin walletpassphrase\n+    mysecretcode\n+    120\n+    ..... press Ctrl-D here to end input\n+    $\n+\n+It is recommended to use this for sensitive information such as wallet\n+passphrases, as command-line arguments can usually be read from the process\n+table by any user on the system.\n+\n+\n+C++11 and Python 3\n+------------------\n+\n+Various code modernizations have been done. The Bitcoin Core code base has\n+started using C++11. This means that a C++11-capable compiler is now needed for\n+building. Effectively this means GCC 4.7 or higher, or Clang 3.3 or higher.\n+\n+When cross-compiling for a target that doesn't have C++11 libraries, configure with\n+`./configure --enable-glibc-back-compat ... LDFLAGS=-static-libstdc++`.\n+\n+For running the functional tests in `qa/rpc-tests`, Python3.4 or higher is now\n+required.\n+\n+\n+Linux ARM builds\n+----------------\n+\n+Due to popular request, Linux ARM builds have been added to the uploaded\n+executables.\n+\n+The following extra files can be found in the download directory or torrent:\n+\n+- `bitcoin-${VERSION}-arm-linux-gnueabihf.tar.gz`: Linux binaries for the most\n+  common 32-bit ARM architecture.\n+- `bitcoin-${VERSION}-aarch64-linux-gnu.tar.gz`: Linux binaries for the most\n+  common 64-bit ARM architecture.\n+\n+ARM builds are still experimental. If you have problems on a certain device or\n+Linux distribution combination please report them on the bug tracker, it may be\n+possible to resolve them.\n+\n+Note that Android is not considered ARM Linux in this context. The executables\n+are not expected to work out of the box on Android.\n+\n+\n+Compact Block support (BIP 152)\n+-------------------------------\n+\n+Support for block relay using the Compact Blocks protocol has been implemented\n+in PR 8068.\n+\n+The primary goal is reducing the bandwidth spikes at relay time, though in many\n+cases it also reduces propagation delay. It is automatically enabled between\n+compatible peers.\n+[BIP 152](https://github.com/bitcoin/bips/blob/master/bip-0152.mediawiki)\n+\n+As a side-effect, ordinary non-mining nodes will download and upload blocks\n+faster if those blocks were produced by miners using similar transaction\n+filtering policies. This means that a miner who produces a block with many\n+transactions discouraged by your node will be relayed slower than one with\n+only transactions already in your memory pool. The overall effect of such\n+relay differences on the network may result in blocks which include widely-\n+discouraged transactions losing a stale block race, and therefore miners may\n+wish to configure their node to take common relay policies into consideration.\n+\n+\n+Hierarchical Deterministic Key Generation\n+-----------------------------------------\n+Newly created wallets will use hierarchical deterministic key generation\n+according to BIP32 (keypath m/0'/0'/k').\n+Existing wallets will still use traditional key generation.\n+\n+Backups of HD wallets, regardless of when they have been created, can\n+therefore be used to re-generate all possible private keys, even the\n+ones which haven't already been generated during the time of the backup.\n+**Attention:** Encrypting the wallet will create a new seed which requires\n+a new backup!\n+\n+Wallet dumps (created using the `dumpwallet` RPC) will contain the deterministic\n+seed. This is expected to allow future versions to import the seed and all\n+associated funds, but this is not yet implemented.\n+\n+HD key generation for new wallets can be disabled by `-usehd=0`. Keep in\n+mind that this flag only has affect on newly created wallets.\n+You can't disable HD key generation once you have created a HD wallet.\n+\n+There is no distinction between internal (change) and external keys.\n+\n+HD wallets are incompatible with older versions of Bitcoin Core.\n+\n+[Pull request](https://github.com/bitcoin/bitcoin/pull/8035/files), [BIP 32](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki)\n+\n+\n+Segregated Witness\n+------------------\n+\n+The code preparations for Segregated Witness (\"segwit\"), as described in [BIP\n+141](https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki), [BIP\n+143](https://github.com/bitcoin/bips/blob/master/bip-0143.mediawiki), [BIP\n+144](https://github.com/bitcoin/bips/blob/master/bip-0144.mediawiki), and [BIP\n+145](https://github.com/bitcoin/bips/blob/master/bip-0145.mediawiki) are\n+finished and included in this release.  However, BIP 141 does not yet specify\n+activation parameters on mainnet, and so this release does not support segwit\n+use on mainnet.  Testnet use is supported, and after BIP 141 is updated with\n+proposed parameters, a future release of Bitcoin Core is expected that\n+implements those parameters for mainnet.\n+\n+Furthermore, because segwit activation is not yet specified for mainnet,\n+version 0.13.0 will behave similarly as other pre-segwit releases even after a\n+future activation of BIP 141 on the network.  Upgrading from 0.13.0 will be\n+required in order to utilize segwit-related features on mainnet (such as signal\n+BIP 141 activation, mine segwit blocks, fully validate segwit blocks, relay\n+segwit blocks to other segwit nodes, and use segwit transactions in the\n+wallet, etc).\n+\n+\n+Mining transaction selection (\"Child Pays For Parent\")\n+------------------------------------------------------\n+\n+The mining transaction selection algorithm has been replaced with an algorithm\n+that selects transactions based on their feerate inclusive of unconfirmed\n+ancestor transactions.  This means that a low-fee transaction can become more\n+likely to be selected if a high-fee transaction that spends its outputs is\n+relayed.\n+\n+With this change, the `-blockminsize` command line option has been removed.\n+\n+The command line option `-blockmaxsize` remains an option to specify the\n+maximum number of serialized bytes in a generated block.  In addition, the new\n+command line option `-blockmaxweight` has been added, which specifies the\n+maximum \"block weight\" of a generated block, as defined by [BIP 141 (Segregated\n+Witness)] (https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki).\n+\n+In preparation for Segregated Witness, the mining algorithm has been modified\n+to optimize transaction selection for a given block weight, rather than a given\n+number of serialized bytes in a block.  In this release, transaction selection\n+is unaffected by this distinction (as BIP 141 activation is not supported on\n+mainnet in this release, see above), but in future releases and after BIP 141\n+activation, these calculations would be expected to differ.\n+\n+For optimal runtime performance, miners using this release should specify\n+`-blockmaxweight` on the command line, and not specify `-blockmaxsize`.\n+Additionally (or only) specifying `-blockmaxsize`, or relying on default\n+settings for both, may result in performance degradation, as the logic to\n+support `-blockmaxsize` performs additional computation to ensure that\n+constraint is met.  (Note that for mainnet, in this release, the equivalent\n+parameter for `-blockmaxweight` would be four times the desired\n+`-blockmaxsize`.  See [BIP 141]\n+(https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki) for additional\n+details.)\n+\n+In the future, the `-blockmaxsize` option may be removed, as block creation is\n+no longer optimized for this metric.  Feedback is requested on whether to\n+deprecate or keep this command line option in future releases.\n+\n+\n+Reindexing changes\n+------------------\n+\n+In earlier versions, reindexing did validation while reading through the block\n+files on disk. These two have now been split up, so that all blocks are known\n+before validation starts. This was necessary to make certain optimizations that\n+are available during normal synchronizations also available during reindexing.\n+\n+The two phases are distinct in the Bitcoin-Qt GUI. During the first one,\n+\"Reindexing blocks on disk\" is shown. During the second (slower) one,\n+\"Processing blocks on disk\" is shown.\n+\n+It is possible to only redo validation now, without rebuilding the block index,\n+using the command line option `-reindex-chainstate` (in addition to\n+`-reindex` which does both). This new option is useful when the blocks on disk\n+are assumed to be fine, but the chainstate is still corrupted. It is also\n+useful for benchmarks.\n+\n+\n+Removal of internal miner\n+--------------------------\n+\n+As CPU mining has been useless for a long time, the internal miner has been\n+removed in this release, and replaced with a simpler implementation for the\n+test framework.\n+\n+The overall result of this is that `setgenerate` RPC call has been removed, as\n+well as the `-gen` and `-genproclimit` command-line options.\n+\n+For testing, the `generate` call can still be used to mine a block, and a new\n+RPC call `generatetoaddress` has been added to mine to a specific address. This\n+works with wallet disabled.\n+\n+\n+New bytespersigop implementation\n+--------------------------------\n+\n+The former implementation of the bytespersigop filter accidentally broke bare\n+multisig (which is meant to be controlled by the `permitbaremultisig` option),\n+since the consensus protocol always counts these older transaction forms as 20\n+sigops for backwards compatibility. Simply fixing this bug by counting more\n+accurately would have reintroduced a vulnerability. It has therefore been\n+replaced with a new implementation that rather than filter such transactions,\n+instead treats them (for fee purposes only) as if they were in fact the size\n+of a transaction actually using all 20 sigops.\n+\n+\n+Low-level P2P changes\n+----------------------\n+\n+- The optional new p2p message \"feefilter\" is implemented and the protocol\n+  version is bumped to 70013. Upon receiving a feefilter message from a peer,\n+  a node will not send invs for any transactions which do not meet the filter\n+  feerate. [BIP 133](https://github.com/bitcoin/bips/blob/master/bip-0133.mediawiki)\n+\n+- The P2P alert system has been removed in PR #7692 and the `alert` P2P message\n+  is no longer supported.\n+\n+- The transaction relay mechanism used to relay one quarter of all transactions\n+  instantly, while queueing up the rest and sending them out in batch. As\n+  this resulted in chains of dependent transactions being reordered, it\n+  systematically hurt transaction relay. The relay code was redesigned in PRs\n+  \\#7840 and #8082, and now always batches transactions announcements while also\n+  sorting them according to dependency order. This significantly reduces orphan\n+  transactions. To compensate for the removal of instant relay, the frequency of\n+  batch sending was doubled for outgoing peers.\n+\n+- Since PR #7840 the BIP35 `mempool` command is also subject to batch processing.\n+  Also the `mempool` message is no longer handled for non-whitelisted peers when\n+  `NODE_BLOOM` is disabled through `-peerbloomfilters=0`.\n+\n+- The maximum size of orphan transactions that are kept in memory until their\n+  ancestors arrive has been raised in PR #8179 from 5000 to 99999 bytes. They\n+  are now also removed from memory when they are included in a block, conflict\n+  with a block, and time out after 20 minutes.\n+\n+- We respond at most once to a getaddr request during the lifetime of a\n+  connection since PR #7856.\n+\n+- Connections to peers who have recently been the first one to give us a valid\n+  new block or transaction are protected from disconnections since PR #8084.\n+\n+\n+Low-level RPC changes\n+----------------------\n+\n+- RPC calls have been added to output detailed statistics for individual mempool\n+  entries, as well as to calculate the in-mempool ancestors or descendants of a\n+  transaction: see `getmempoolentry`, `getmempoolancestors`, `getmempooldescendants`.\n+\n+- `gettxoutsetinfo` UTXO hash (`hash_serialized`) has changed. There was a divergence between\n+  32-bit and 64-bit platforms, and the txids were missing in the hashed data. This has been\n+  fixed, but this means that the output will be different than from previous versions.\n+\n+- Full UTF-8 support in the RPC API. Non-ASCII characters in, for example,\n+  wallet labels have always been malformed because they weren't taken into account\n+  properly in JSON RPC processing. This is no longer the case. This also affects\n+  the GUI debug console.\n+\n+- Asm script outputs replacements for OP_NOP2 and OP_NOP3\n+\n+  - OP_NOP2 has been renamed to OP_CHECKLOCKTIMEVERIFY by [BIP \n+65](https://github.com/bitcoin/bips/blob/master/bip-0065.mediawiki)\n+\n+  - OP_NOP3 has been renamed to OP_CHECKSEQUENCEVERIFY by [BIP \n+112](https://github.com/bitcoin/bips/blob/master/bip-0112.mediawiki)\n+\n+  - The following outputs are affected by this change:\n+\n+    - RPC `getrawtransaction` (in verbose mode)\n+    - RPC `decoderawtransaction`\n+    - RPC `decodescript`\n+    - REST `/rest/tx/` (JSON format)\n+    - REST `/rest/block/` (JSON format when including extended tx details)\n+    - `bitcoin-tx -json`\n+\n+- The sorting of the output of the `getrawmempool` output has changed.\n+\n+- New RPC commands: `generatetoaddress`, `importprunedfunds`, `removeprunedfunds`, `signmessagewithprivkey`,\n+  `getmempoolancestors`, `getmempooldescendants`, `getmempoolentry`,\n+  `createwitnessaddress`, `addwitnessaddress`.\n+\n+- Removed RPC commands: `setgenerate`, `getgenerate`.\n+\n+- New options were added to `fundrawtransaction`: `includeWatching`, `changeAddress`, `changePosition` and `feeRate`.\n+\n+\n+Low-level ZMQ changes\n+----------------------\n+\n+- Each ZMQ notification now contains an up-counting sequence number that allows\n+  listeners to detect lost notifications.\n+  The sequence number is always the last element in a multi-part ZMQ notification and\n+  therefore backward compatible. Each message type has its own counter.\n+  PR [#7762](https://github.com/bitcoin/bitcoin/pull/7762).\n+\n+\n+0.13.0 Change log\n+=================\n+\n+Detailed release notes follow. This overview includes changes that affect\n+behavior, not code moves, refactors and string updates. For convenience in locating\n+the code changes and accompanying discussion, both the pull request and\n+git merge commit are mentioned.\n+\n+### RPC and other APIs\n+\n+- #7156 `9ee02cf` Remove cs_main lock from `createrawtransaction` (laanwj)\n+- #7326 `2cd004b` Fix typo, wrong information in gettxout help text (paveljanik)\n+- #7222 `82429d0` Indicate which transactions are signaling opt-in RBF (sdaftuar)\n+- #7480 `b49a623` Changed getnetworkhps value to double to avoid overflow (instagibbs)\n+- #7550 `8b958ab` Input-from-stdin mode for bitcoin-cli (laanwj)\n+- #7670 `c9a1265` Use cached block hash in blockToJSON() (rat4)\n+- #7726 `9af69fa` Correct importaddress help reference to importpubkey (CypherGrue)\n+- #7766 `16555b6` Register calls where they are defined (laanwj)\n+- #7797 `e662a76` Fix generatetoaddress failing to parse address (mruddy)\n+- #7774 `916b15a` Add versionHex in getblock and getblockheader JSON results (mruddy)\n+- #7863 `72c54e3` Getblockchaininfo: make bip9_softforks an object, not an array (rustyrussell)\n+- #7842 `d97101e` Do not print minping time in getpeerinfo when no ping received yet (paveljanik)\n+- #7518 `be14ca5` Add multiple options to fundrawtransaction (promag)\n+- #7756 `9e47fce` Add cursor to iterate over utxo set, use this in `gettxoutsetinfo` (laanwj)\n+- #7848 `88616d2` Divergence between 32- and 64-bit when hashing >4GB affects `gettxoutsetinfo` (laanwj)\n+- #7827 `4205ad7` Speed up `getchaintips` (mrbandrews)\n+- #7762 `a1eb344` Append a message sequence number to every ZMQ notification (jonasschnelli)\n+- #7688 `46880ed` List solvability in listunspent output and improve help (sipa)\n+- #7926 `5725807` Push back `getaddednodeinfo` dead value (instagibbs)\n+- #7953 `0630353` Create `signmessagewithprivkey` rpc (achow101)\n+- #8049 `c028c7b` Expose information on whether transaction relay is enabled in `getnetworkinfo` (laanwj)\n+- #7967 `8c1e49b` Add feerate option to `fundrawtransaction` (jonasschnelli)\n+- #8118 `9b6a48c` Reduce unnecessary hashing in `signrawtransaction` (jonasnick)\n+- #7957 `79004d4` Add support for transaction sequence number (jonasschnelli)\n+- #8153 `75ec320` `fundrawtransaction` feeRate: Use BTC/kB (MarcoFalke)\n+- #7292 `7ce9ac5` Expose ancestor/descendant information over RPC (sdaftuar)\n+- #8171 `62fcf27` Fix createrawtx sequence number unsigned int parsing (jonasschnelli)\n+- #7892 `9c3d0fa` Add full UTF-8 support to RPC (laanwj)\n+- #8317 `304eff3` Don't use floating point in rpcwallet (MarcoFalke)\n+- #8258 `5a06ebb` Hide softfork in `getblockchaininfo` if timeout is 0 (jl2012)\n+- #8244 `1922e5a` Remove unnecessary LOCK(cs_main) in getrawmempool (dcousens)\n+\n+### Block and transaction handling\n+\n+- #7056 `6a07208` Save last db read (morcos)\n+- #6842 `0192806` Limitfreerelay edge case bugfix (ptschip)\n+- #7084 `11d74f6` Replace maxFeeRate of 10000*minRelayTxFee with maxTxFee in mempool (MarcoFalke)\n+- #7539 `9f33dba` Add tags to mempool's mapTx indices (sdaftuar)\n+- #7592 `26a2a72` Re-remove ERROR logging for mempool rejects (laanwj)\n+- #7187 `14d6324` Keep reorgs fast for SequenceLocks checks (morcos)\n+- #7594 `01f4267` Mempool: Add tracking of ancestor packages (sdaftuar)\n+- #7904 `fc9e334` Txdb: Fix assert crash in new UTXO set cursor (laanwj)\n+- #7927 `f9c2ac7` Minor changes to dbwrapper to simplify support for other databases (laanwj)\n+- #7933 `e26b620` Fix OOM when deserializing UTXO entries with invalid length (sipa)\n+- #8020 `5e374f7` Use SipHash-2-4 for various non-cryptographic hashes (sipa)\n+- #8076 `d720980` VerifyDB: don't check blocks that have been pruned (sdaftuar)\n+- #8080 `862fd24` Do not use mempool for GETDATA for tx accepted after the last mempool req (gmaxwell)\n+- #7997 `a82f033` Replace mapNextTx with slimmer setSpends (kazcw)\n+- #8220 `1f86d64` Stop trimming when mapTx is empty (sipa)\n+- #8273 `396f9d6` Bump `-dbcache` default to 300MiB (laanwj)\n+- #7225 `eb33179` Eliminate unnecessary call to CheckBlock (sdaftuar)\n+- #7907 `006cdf6` Optimize and Cleanup CScript::FindAndDelete (pstratem)\n+- #7917 `239d419` Optimize reindex (sipa)\n+- #7763 `3081fb9` Put hex-encoded version in UpdateTip (sipa)\n+- #8149 `d612837` Testnet-only segregated witness (sipa)\n+- #8305 `3730393` Improve handling of unconnecting headers (sdaftuar)\n+- #8363 `fca1a41` Rename \"block cost\" to \"block weight\" (sdaftuar)\n+- #8381 `f84ee3d` Make witness v0 outputs non-standard (jl2012)\n+- #8364 `3f65ba2` Treat high-sigop transactions as larger rather than rejecting them (sipa)\n+\n+### P2P protocol and network code\n+\n+- #6589 `dc0305d` Log bytes recv/sent per command (jonasschnelli)\n+- #7164 `3b43cad` Do not download transactions during initial blockchain sync (ptschip)\n+- #7458 `898fedf` peers.dat, banlist.dat recreated when missing (kirkalx)\n+- #7637 `3da5d1b` Fix memleak in TorController (laanwj, jonasschnelli)\n+- #7553 `9f14e5a` Remove vfReachable and modify IsReachable to only use vfLimited (pstratem)\n+- #7708 `9426632` De-neuter NODE_BLOOM (pstratem)\n+- #7692 `29b2be6` Remove P2P alert system (btcdrak)\n+- #7542 `c946a15` Implement \"feefilter\" P2P message (morcos)\n+- #7573 `352fd57` Add `-maxtimeadjustment` command line option (mruddy)\n+- #7570 `232592a` Add IPv6 Link-Local Address Support (mruddy)\n+- #7874 `e6a4d48` Improve AlreadyHave (morcos)\n+- #7856 `64e71b3` Only send one GetAddr response per connection (gmaxwell)\n+- #7868 `7daa3ad` Split DNS resolving functionality out of net structures (theuni)\n+- #7919 `7617682` Fix headers announcements edge case (sdaftuar)\n+- #7514 `d9594bf` Fix IsInitialBlockDownload for testnet (jmacwhyte)\n+- #7959 `03cf6e8` fix race that could fail to persist a ban (kazcw)\n+- #7840 `3b9a0bf` Several performance and privacy improvements to inv/mempool handling (sipa)\n+- #8011 `65aecda` Don't run ThreadMessageHandler at lowered priority (kazcw)\n+- #7696 `5c3f8dd` Fix de-serialization bug where AddrMan is left corrupted (EthanHeilman)\n+- #7932 `ed749bd` CAddrMan::Deserialize handle corrupt serializations better (pstratem)\n+- #7906 `83121cc` Prerequisites for p2p encapsulation changes (theuni)\n+- #8033 `18436d8` Fix Socks5() connect failures to be less noisy and less unnecessarily scary (wtogami)\n+- #8082 `01d8359` Defer inserting into maprelay until just before relaying (gmaxwell)\n+- #7960 `6a22373` Only use AddInventoryKnown for transactions (sdaftuar)\n+- #8078 `2156fa2` Disable the mempool P2P command when bloom filters disabled (petertodd)\n+- #8065 `67c91f8` Addrman offline attempts (gmaxwell)\n+- #7703 `761cddb` Tor: Change auth order to only use password auth if -torpassword (laanwj)\n+- #8083 `cd0c513` Add support for dnsseeds with option to filter by servicebits (jonasschnelli)\n+- #8173 `4286f43` Use SipHash for node eviction (sipa)\n+- #8154 `1445835` Drop vAddrToSend after sending big addr message (kazcw)\n+- #7749 `be9711e` Enforce expected outbound services (sipa)\n+- #8208 `0a64777` Do not set extra flags for unfiltered DNS seed results (sipa)\n+- #8084 `e4bb4a8` Add recently accepted blocks and txn to AttemptToEvictConnection (gmaxwell)\n+- #8113 `3f89a53` Rework addnode behaviour (sipa)\n+- #8179 `94ab58b` Evict orphans which are included or precluded by accepted blocks (gmaxwell)\n+- #8068 `e9d76a1` Compact Blocks (TheBlueMatt)\n+- #8204 `0833894` Update petertodd's testnet seed (petertodd)\n+- #8247 `5cd35d3` Mark my dnsseed as supporting filtering (sipa)\n+- #8275 `042c323` Remove bad chain alert partition check (btcdrak)\n+- #8271 `1bc9c80` Do not send witnesses in cmpctblock (sipa)\n+- #8312 `ca40ef6` Fix mempool DoS vulnerability from malleated transactions (sdaftuar)\n+- #7180 `16ccb74` Account for `sendheaders` `verack` messages (laanwj)\n+- #8102 `425278d` Bugfix: use global ::fRelayTxes instead of CNode in version send (sipa)\n+- #8408 `b7e2011` Prevent fingerprinting, disk-DoS with compact blocks (sdaftuar)\n+\n+### Build system\n+\n+- #7302 `41f1a3e` C++11 build/runtime fixes (theuni)\n+- #7322 `fd9356b` c++11: add scoped enum fallbacks to CPPFLAGS rather than defining them locally (theuni)\n+- #7441 `a6771fc` Use Debian 8.3 in gitian build guide (fanquake)\n+- #7349 `152a821` Build against system UniValue when available (luke-jr)\n+- #7520 `621940e` LibreSSL doesn't define OPENSSL_VERSION, use LIBRESSL_VERSION_TEXT instead (paveljanik)\n+- #7528 `9b9bfce` autogen.sh: warn about needing autoconf if autoreconf is not found (knocte)\n+- #7504 `19324cf` Crystal clean make clean (paveljanik)\n+- #7619 `18b3f1b` Add missing sudo entry in gitian VM setup (btcdrak)\n+- #7616 `639ec58`  [depends] Delete unused patches  (MarcoFalke)\n+- #7658 `c15eb28` Add curl to Gitian setup instructions (btcdrak)\n+- #7710 `909b72b` [Depends] Bump miniupnpc and config.guess+sub (fanquake)\n+- #7723 `5131005` build: python 3 compatibility (laanwj)\n+- #7477 `28ad4d9` Fix quoting of copyright holders in configure.ac (domob1812)\n+- #7711 `a67bc5e` [build-aux] Update Boost & check macros to latest serials (fanquake)\n+- #7788 `4dc1b3a` Use relative paths instead of absolute paths in protoc calls (paveljanik)\n+- #7809 `bbd210d` depends: some base fixes/changes (theuni)\n+- #7603 `73fc922` Build System: Use PACKAGE_TARNAME in NSIS script (JeremyRand)\n+- #7905 `187186b` test: move accounting_tests and rpc_wallet_tests to wallet/test (laanwj)\n+- #7911 `351abf9` leveldb: integrate leveldb into our buildsystem (theuni)\n+- #7944 `a407807` Re-instate TARGET_OS=linux in configure.ac. Removed by 351abf9e035 (randy-waterhouse)\n+- #7920 `c3e3cfb` Switch Travis to Trusty (theuni)\n+- #7954 `08b37c5` build: quiet annoying warnings without adding new ones (theuni)\n+- #7165 `06162f1` build: Enable C++11 in build, require C++11 compiler (laanwj)\n+- #7982 `559fbae` build: No need to check for leveldb atomics (theuni)\n+- #8002 `f9b4582` [depends] Add -stdlib=libc++ to darwin CXX flags (fanquake)\n+- #7993 `6a034ed` [depends] Bump Freetype, ccache, ZeroMQ, miniupnpc, expat (fanquake)\n+- #8167 `19ea173` Ship debug tarballs/zips with debug symbols (theuni)\n+- #8175 `f0299d8` Add --disable-bench to config flags for windows (laanwj)\n+- #7283 `fd9881a` [gitian] Default reference_datetime to commit author date (MarcoFalke)\n+- #8181 `9201ce8` Get rid of `CLIENT_DATE` (laanwj)\n+- #8133 `fde0ac4` Finish up out-of-tree changes (theuni)\n+- #8188 `65a9d7d` Add armhf/aarch64 gitian builds (theuni)\n+- #8194 `cca1c8c` [gitian] set correct PATH for wrappers (MarcoFalke)\n+- #8198 `5201614` Sync ax_pthread with upstream draft4 (fanquake)\n+- #8210 `12a541e` [Qt] Bump to Qt5.6.1 (jonasschnelli)\n+- #8285 `da50997` windows: Add testnet link to installer (laanwj)\n+- #8304 `0cca2fe` [travis] Update SDK_URL (MarcoFalke)\n+- #8310 `6ae20df` Require boost for bench (theuni)\n+- #8315 `2e51590` Don't require sudo for Linux (theuni)\n+- #8314 `67caef6` Fix pkg-config issues for 0.13 (theuni)\n+- #8373 `1fe7f40` Fix OSX non-deterministic dmg (theuni)\n+- #8358 `cfd1280` Gbuild: Set memory explicitly (default is too low) (MarcoFalke)\n+\n+### GUI\n+\n+- #7154 `00b4b8d` Add InMempool() info to transaction details (jonasschnelli)\n+- #7068 `5f3c670` [RPC-Tests] add simple way to run rpc test over QT clients (jonasschnelli)\n+- #7218 `a1c185b` Fix misleading translation (MarcoFalke)\n+- #7214 `be9a9a3` qt5: Use the fixed font the system recommends (MarcoFalke)\n+- #7256 `08ab906` Add note to coin control dialog QT5 workaround (fanquake)\n+- #7255 `e289807` Replace some instances of formatWithUnit with formatHtmlWithUnit (fanquake)\n+- #7317 `3b57e9c` Fix RPCTimerInterface ordering issue (jonasschnelli)\n+- #7327 `c079d79` Transaction View: LastMonth calculation fixed (crowning-)\n+- #7334 `e1060c5` coincontrol workaround is still needed in qt5.4 (fixed in qt5.5) (MarcoFalke)\n+- #7383 `ae2db67` Rename \"amount\" to \"requested amount\" in receive coins table (jonasschnelli)\n+- #7396 `cdcbc59` Add option to increase/decrease font size in the console window (jonasschnelli)\n+- #7437 `9645218` Disable tab navigation for peers tables (Kefkius)\n+- #7604 `354b03d` build: Remove spurious dollar sign. Fixes #7189 (dooglus)\n+- #7605 `7f001bd` Remove openssl info from init/log and from Qt debug window (jonasschnelli)\n+- #7628 `87d6562` Add 'copy full transaction details' option (ericshawlinux)\n+- #7613 `3798e5d` Add autocomplete to bitcoin-qt's console window (GamerSg)\n+- #7668 `b24266c` Fix history deletion bug after font size change (achow101)\n+- #7680 `41d2dfa` Remove reflection from `about` icon (laanwj)\n+- #7686 `f034bce` Remove 0-fee from send dialog (MarcoFalke)\n+- #7506 `b88e0b0` Use CCoinControl selection in CWallet::FundTransaction (promag)\n+- #7732 `0b98dd7` Debug window: replace \"Build date\" with \"Datadir\" (jonasschnelli)\n+- #7761 `60db51d` remove trailing output-index from transaction-id (jonasschnelli)\n+- #7772 `6383268` Clear the input line after activating autocomplete (paveljanik)\n+- #7925 `f604bf6` Fix out-of-tree GUI builds (laanwj)\n+- #7939 `574ddc6` Make it possible to show details for multiple transactions (laanwj)\n+- #8012 `b33824b` Delay user confirmation of send (Tyler-Hardin)\n+- #8006 `7c8558d` Add option to disable the system tray icon (Tyler-Hardin)\n+- #8046 `169d379` Fix Cmd-Q / Menu Quit shutdown on OSX (jonasschnelli)\n+- #8042 `6929711` Don't allow to open the debug window during splashscreen & verification state (jonasschnelli)\n+- #8014 `77b49ac` Sort transactions by date (Tyler-Hardin)\n+- #8073 `eb2f6f7` askpassphrasedialog: Clear pass fields on accept (rat4)\n+- #8129 `ee1533e` Fix RPC console auto completer (UdjinM6)\n+- #7636 `fb0ac48` Add bitcoin address label to request payment QR code (makevoid)\n+- #8231 `760a6c7` Fix a bug where the SplashScreen will not be hidden during startup (jonasschnelli)\n+- #8256 `af2421c` BUG: bitcoin-qt crash (fsb4000)\n+- #8257 `ff03c50` Do not ask a UI question from bitcoind (sipa)\n+- #8288 `91abb77` Network-specific example address (laanwj)\n+- #7707 `a914968` UI support for abandoned transactions (jonasschnelli)\n+- #8207 `f7a403b` Add a link to the Bitcoin-Core repository and website to the About Dialog (MarcoFalke)\n+- #8281 `6a87eb0` Remove client name from debug window (laanwj)\n+- #8407 `45eba4b` Add dbcache migration path (jonasschnelli)\n+\n+### Wallet\n+\n+- #7262 `fc08994` Reduce inefficiency of GetAccountAddress() (dooglus)\n+- #7537 `78e81b0` Warn on unexpected EOF while salvaging wallet (laanwj)\n+- #7521 `3368895` Don't resend wallet txs that aren't in our own mempool (morcos)\n+- #7576 `86a1ec5` Move wallet help string creation to CWallet (jonasschnelli)\n+- #7577 `5b3b5a7` Move \"load wallet phase\" to CWallet (jonasschnelli)\n+- #7608 `0735c0c` Move hardcoded file name out of log messages (MarcoFalke)\n+- #7649 `4900641` Prevent multiple calls to CWallet::AvailableCoins (promag)\n+- #7646 `e5c3511` Fix lockunspent help message (promag)\n+- #7558 `b35a591` Add import/removeprunedfunds rpc call (instagibbs)\n+- #6215 `48c5adf` add bip32 pub key serialization (jonasschnelli)\n+- #7913 `bafd075` Fix for incorrect locking in GetPubKey() (keystore.cpp) (yurizhykin)\n+- #8036 `41138f9` init: Move berkeleydb version reporting to wallet (laanwj)\n+- #8028 `373b50d` Fix insanity of CWalletDB::WriteTx and CWalletTx::WriteToDisk (pstratem)\n+- #8061 `f6b7df3` Improve Wallet encapsulation (pstratem)\n+- #7891 `950be19` Always require OS randomness when generating secret keys (sipa)\n+- #7689 `b89ef13` Replace OpenSSL AES with ctaes-based version (sipa)\n+- #7825 `f972b04` Prevent multiple calls to ExtractDestination (pedrobranco)\n+- #8137 `243ac0c` Improve CWallet API with new AccountMove function (pstratem)\n+- #8142 `52c3f34` Improve CWallet API  with new GetAccountPubkey function (pstratem)\n+- #8035 `b67a472` Add simplest BIP32/deterministic key generation implementation (jonasschnelli)\n+- #7687 `a6ddb19` Stop treating importaddress'ed scripts as change (sipa)\n+- #8298 `aef3811` wallet: Revert input selection post-pruning (laanwj)\n+- #8324 `bc94b87` Keep HD seed during salvagewallet (jonasschnelli)\n+- #8323 `238300b` Add HD keypath to CKeyMetadata, report metadata in validateaddress (jonasschnelli)\n+- #8367 `3b38a6a` Ensure <0.13 clients can't open HD wallets (jonasschnelli)\n+- #8378 `ebea651` Move SetMinVersion for FEATURE_HD to SetHDMasterKey (pstratem)\n+- #8390 `73adfe3` Correct hdmasterkeyid/masterkeyid name confusion (jonasschnelli)\n+- #8206 `18b8ee1` Add HD xpriv to dumpwallet (jonasschnelli)\n+- #8389 `c3c82c4` Create a new HD seed after encrypting the wallet (jonasschnelli)\n+\n+### Tests and QA\n+\n+- #7320 `d3dfc6d` Test walletpassphrase timeout (MarcoFalke)\n+- #7208 `47c5ed1` Make max tip age an option instead of chainparam (laanwj)\n+- #7372 `21376af` Trivial: [qa] wallet: Print maintenance (MarcoFalke)\n+- #7280 `668906f` [travis] Fail when documentation is outdated (MarcoFalke)\n+- #7177 `93b0576` [qa] Change default block priority size to 0 (MarcoFalke)\n+- #7236 `02676c5` Use createrawtx locktime parm in txn_clone (dgenr8)\n+- #7212 `326ffed` Adds unittests for CAddrMan and CAddrinfo, removes source of non-determinism (EthanHeilman)\n+- #7490 `d007511` tests: Remove May15 test (laanwj)\n+- #7531 `18cb2d5` Add bip68-sequence.py to extended rpc tests (btcdrak)\n+- #7536 `ce5fc02` test: test leading spaces for ParseHex (laanwj)\n+- #7620 `1b68de3` [travis] Only run check-doc.py once (MarcoFalke)\n+- #7455 `7f96671` [travis] Exit early when check-doc.py fails (MarcoFalke)\n+- #7667 `56d2c4e` Move GetTempPath() to testutil (musalbas)\n+- #7517 `f1ca891` test: script_error checking in script_invalid tests (laanwj)\n+- #7684 `3d0dfdb` Extend tests (MarcoFalke)\n+- #7697 `622fe6c` Tests: make prioritise_transaction.py more robust (sdaftuar)\n+- #7709 `efde86b` Tests: fix missing import in mempool_packages (sdaftuar)\n+- #7702 `29e1131` Add tests verifychain, lockunspent, getbalance, listsinceblock (MarcoFalke)\n+- #7720 `3b4324b` rpc-test: Normalize assert() (MarcoFalke)\n+- #7757 `26794d4` wallet: Wait for reindex to catch up (MarcoFalke)\n+- #7764 `a65b36c` Don't run pruning.py twice (MarcoFalke)\n+- #7773 `7c80e72` Fix comments in tests (btcdrak)\n+- #7489 `e9723cb` tests: Make proxy_test work on travis servers without IPv6 (laanwj)\n+- #7801 `70ac71b` Remove misleading \"errorString syntax\" (MarcoFalke)\n+- #7803 `401c65c` maxblocksinflight: Actually enable test (MarcoFalke)\n+- #7802 `3bc71e1` httpbasics: Actually test second connection (MarcoFalke)\n+- #7849 `ab8586e` tests: add varints_bitpatterns test (laanwj)\n+- #7846 `491171f` Clean up lockorder data of destroyed mutexes (sipa)\n+- #7853 `6ef5e00` py2: Unfiddle strings into bytes explicitly (MarcoFalke)\n+- #7878 `53adc83` [test] bctest.py: Revert faa41ee (MarcoFalke)\n+- #7798 `cabba24` [travis] Print the commit which was evaluated (MarcoFalke)\n+- #7833 `b1bf511` tests: Check Content-Type header returned from RPC server (laanwj)\n+- #7851 `fa9d86f` pull-tester: Don't mute zmq ImportError (MarcoFalke)\n+- #7822 `0e6fd5e` Add listunspent() test for spendable/unspendable UTXO (jpdffonseca)\n+- #7912 `59ad568` Tests: Fix deserialization of reject messages (sdaftuar)\n+- #7941 `0ea3941` Fixing comment in script_test.json test case (Christewart)\n+- #7807 `0ad1041` Fixed miner test values, gave constants for less error-prone values (instagibbs)\n+- #7980 `88b77c7` Smartfees: Properly use ordered dict (MarcoFalke)\n+- #7814 `77b637f` Switch to py3 (MarcoFalke)\n+- #8030 `409a8a1` Revert fatal-ness of missing python-zmq (laanwj)\n+- #8018 `3e90fe6` Autofind rpc tests --srcdir (jonasschnelli)\n+- #8016 `5767e80` Fix multithread CScheduler and reenable test (paveljanik)\n+- #7972 `423ca30` pull-tester: Run rpc test in parallel  (MarcoFalke)\n+- #8039 `69b3a6d` Bench: Add crypto hash benchmarks (laanwj)\n+- #8041 `5b736dd` Fix bip9-softforks blockstore issue (MarcoFalke)\n+- #7994 `1f01443` Add op csv tests to script_tests.json (Christewart)\n+- #8038 `e2bf830` Various minor fixes (MarcoFalke)\n+- #8072 `1b87e5b` Travis: 'make check' in parallel and verbose (theuni)\n+- #8056 `8844ef1` Remove hardcoded \"4 nodes\" from test_framework (MarcoFalke)\n+- #8047 `37f9a1f` Test_framework: Set wait-timeout for bitcoind procs (MarcoFalke)\n+- #8095 `6700cc9` Test framework: only cleanup on successful test runs (sdaftuar)\n+- #8098 `06bd4f6` Test_framework: Append portseed to tmpdir (MarcoFalke)\n+- #8104 `6ff2c8d` Add timeout to sync_blocks() and sync_mempools() (sdaftuar)\n+- #8111 `61b8684` Benchmark SipHash (sipa)\n+- #8107 `52b803e` Bench: Added base58 encoding/decoding benchmarks (yurizhykin)\n+- #8115 `0026e0e` Avoid integer division in the benchmark inner-most loop (gmaxwell)\n+- #8090 `a2df115` Adding P2SH(p2pkh) script test case (Christewart)\n+- #7992 `ec45cc5` Extend #7956 with one more test (TheBlueMatt)\n+- #8139 `ae5575b` Fix interrupted HTTP RPC connection workaround for Python 3.5+ (sipa)\n+- #8164 `0f24eaf` [Bitcoin-Tx] fix missing test fixtures, fix 32bit atoi issue (jonasschnelli)\n+- #8166 `0b5279f` Src/test: Do not shadow local variables (paveljanik)\n+- #8141 `44c1b1c` Continuing port of java comparison tool (mrbandrews)\n+- #8201 `36b7400` fundrawtransaction: Fix race, assert amounts (MarcoFalke)\n+- #8214 `ed2cd59` Mininode: fail on send_message instead of silent return (MarcoFalke)\n+- #8215 `a072d1a` Don't use floating point in wallet tests (MarcoFalke)\n+- #8066 `65c2058` Test_framework: Use different rpc_auth_pair for each node (MarcoFalke)\n+- #8216 `0d41d70` Assert 'changePosition out of bounds'  (MarcoFalke)\n+- #8222 `961893f` Enable mempool consistency checks in unit tests (sipa)\n+- #7751 `84370d5` test_framework: python3.4 authproxy compat (laanwj)\n+- #7744 `d8e862a` test_framework: detect failure of bitcoind startup (laanwj)\n+- #8280 `115735d` Increase sync_blocks() timeouts in pruning.py (MarcoFalke)\n+- #8340 `af9b7a9` Solve trivial merge conflict in p2p-segwit.py (MarcoFalke)\n+- #8067 `3e4cf8f` Travis: use slim generic image, and some fixups (theuni)\n+- #7951 `5c7df70` Test_framework: Properly print exception (MarcoFalke)\n+- #8070 `7771aa5` Remove non-determinism which is breaking net_tests #8069 (EthanHeilman)\n+- #8309 `bb2646a` Add wallet-hd test (MarcoFalke)\n+- #8444 `cd0910b` Fix p2p-feefilter.py for changed tx relay behavior (sdaftuar)\n+\n+### Mining\n+\n+- #7507 `11c7699` Remove internal miner (Leviathn)\n+- #7663 `c87f51e` Make the generate RPC call function for non-regtest (sipa)\n+- #7671 `e2ebd25` Add generatetoaddress RPC to mine to an address (achow101)\n+- #7935 `66ed450` Versionbits: GBT support (luke-jr)\n+- #7600 `66db2d6` Select transactions using feerate-with-ancestors (sdaftuar)\n+- #8295 `f5660d3` Mining-related fixups for 0.13.0 (sdaftuar)\n+- #7796 `536b75e` Add support for negative fee rates, fixes `prioritizetransaction` (MarcoFalke)\n+- #8362 `86edc20` Scale legacy sigop count in CreateNewBlock (sdaftuar)\n+- #8489 `8b0eee6` Bugfix: Use pre-BIP141 sigops until segwit activates (GBT) (luke-jr)\n+\n+### Documentation and miscellaneous\n+\n+- #7423 `69e2a40` Add example for building with constrained resources (jarret)\n+- #8254 `c2c69ed` Add OSX ZMQ requirement to QA readme (fanquake)\n+- #8203 `377d131` Clarify documentation for running a tor node (nathaniel-mahieu)\n+- #7428 `4b12266` Add example for listing ./configure flags (nathaniel-mahieu)\n+- #7847 `3eae681` Add arch linux build example (mruddy)\n+- #7968 `ff69aaf` Fedora build requirements (wtogami)\n+- #8013 `fbedc09` Fedora build requirements, add gcc-c++ and fix typo (wtogami)\n+- #8009 `fbd8478` Fixed invalid example paths in gitian-building.md (JeremyRand)\n+- #8240 `63fbdbc` Mention Windows XP end of support in release notes (laanwj)\n+- #8303 `5077d2c` Update bips.md for CSV softfork (fanquake)\n+- #7789 `e0b3e19` Add note about using the Qt official binary installer (paveljanik)\n+- #7791 `e30a5b0` Change Precise to Trusty in gitian-building.md (JeremyRand)\n+- #7838 `8bb5d3d` Update gitian build guide to debian 8.4.0 (fanquake)\n+- #7855 `b778e59` Replace precise with trusty (MarcoFalke)\n+- #7975 `fc23fee` Update bitcoin-core GitHub links (MarcoFalke)\n+- #8034 `e3a8207` Add basic git squash workflow (fanquake)\n+- #7813 `214ec0b` Update port in tor.md (MarcoFalke)\n+- #8193 `37c9830` Use Debian 8.5 in the gitian-build guide (fanquake)\n+- #8261 `3685e0c` Clarify help for `getblockchaininfo` (paveljanik)\n+- #7185 `ea0f5a2` Note that reviewers should mention the id of the commits they reviewed (pstratem)\n+- #7290 `c851d8d` [init] Add missing help for args (MarcoFalke)\n+- #7281 `f9fd4c2` Improve CheckInputs() comment about sig verification (petertodd)\n+- #7417 `1e06bab` Minor improvements to the release process (PRabahy)\n+- #7444 `4cdbd42` Improve block validity/ConnectBlock() comments (petertodd)\n+- #7527 `db2e1c0` Fix and cleanup listreceivedbyX documentation (instagibbs)\n+- #7541 `b6e00af` Clarify description of blockindex (pinheadmz)\n+- #7590 `f06af57` Improving wording related to Boost library requirements [updated] (jonathancross)\n+- #7635 `0fa88ef` Add dependency info to test docs (elliotolds)\n+- #7609 `3ba07bd` RPM spec file project (AliceWonderMiscreations)\n+- #7850 `229a17c` Removed call to `TryCreateDirectory` from `GetDefaultDataDir` in `src/util.cpp` (alexreg)\n+- #7888 `ec870e1` Prevector: fix 2 bugs in currently unreached code paths (kazcw)\n+- #7922 `90653bc` CBase58Data::SetString: cleanse the full vector (kazcw)\n+- #7881 `c4e8390` Update release process (laanwj)\n+- #7952 `a9c8b74` Log invalid block hash to make debugging easier (paveljanik)\n+- #7974 `8206835` More comments on the design of AttemptToEvictConnection (gmaxwell)\n+- #7795 `47a7cfb` UpdateTip: log only one line at most per block (laanwj)\n+- #8110 `e7e25ea` Add benchmarking notes (fanquake)\n+- #8121 `58f0c92` Update implemented BIPs list (fanquake)\n+- #8029 `58725ba` Simplify OS X build notes (fanquake)\n+- #8143 `d46b8b5` comment nit: miners don't vote (instagibbs)\n+- #8136 `22e0b35` Log/report in 10% steps during VerifyDB (jonasschnelli)\n+- #8168 `d366185` util: Add ParseUInt32 and ParseUInt64 (laanwj)\n+- #8178 `f7b1bfc` Add git and github tips and tricks to developer notes (sipa)\n+- #8177 `67db011` developer notes: updates for C++11 (kazcw)\n+- #8229 `8ccdac1` [Doc] Update OS X build notes for 10.11 SDK (fanquake)\n+- #8233 `9f1807a` Mention Linux ARM executables in release process and notes (laanwj)\n+- #7540 `ff46dd4` Rename OP_NOP3 to OP_CHECKSEQUENCEVERIFY (btcdrak)\n+- #8289 `26316ff` bash-completion: Adapt for 0.12 and 0.13 (roques)\n+- #7453 `3dc3149` Missing patches from 0.12 (MarcoFalke)\n+- #7113 `54a550b` Switch to a more efficient rolling Bloom filter (sipa)\n+- #7257 `de9e5ea` Combine common error strings for different options so translations can be shared and reused (luke-jr)\n+- #7304 `b8f485c` [contrib] Add clang-format-diff.py (MarcoFalke)\n+- #7378 `e6f97ef` devtools: replace github-merge with python version (laanwj)\n+- #7395 `0893705` devtools: show pull and commit information in github-merge (laanwj)\n+- #7402 `6a5932b` devtools: github-merge get toplevel dir without extra whitespace (achow101)\n+- #7425 `20a408c` devtools: Fix utf-8 support in messages for github-merge (laanwj)\n+- #7632 `409f843` Delete outdated test-patches reference (Lewuathe)\n+- #7662 `386f438` remove unused NOBLKS_VERSION_{START,END} constants (rat4)\n+- #7737 `aa0d2b2` devtools: make github-merge.py use py3 (laanwj)\n+- #7781 `55db5f0` devtools: Auto-set branch to merge to in github-merge (laanwj)\n+- #7934 `f17032f` Improve rolling bloom filter performance and benchmark (sipa)\n+- #8004 `2efe38b` signal handling: fReopenDebugLog and fRequestShutdown should be type sig_atomic_t (catilac)\n+- #7713 `f6598df` Fixes for verify-commits script (petertodd)\n+- #8412 `8360d5b` libconsensus: Expose a flag for BIP112 (jtimon)\n+\n+Credits\n+=======\n+\n+Thanks to everyone who directly contributed to this release:\n+\n+- 21E14\n+- accraze\n+- Adam Brown\n+- Alexander Regueiro\n+- Alex Morcos\n+- Alfie John\n+- Alice Wonder\n+- AlSzacrel\n+- Andrew Chow\n+- Andr\u00e9s G. Aragoneses\n+- Bob McElrath\n+- BtcDrak\n+- calebogden\n+- C\u00e9dric F\u00e9lizard\n+- Chirag Dav\u00e9\n+- Chris Moore\n+- Chris Stewart\n+- Christian von Roques\n+- Chris Wheeler\n+- Cory Fields\n+- crowning-\n+- Daniel Cousens\n+- Daniel Kraft\n+- Denis Lukianov\n+- Elias Rohrer\n+- Elliot Olds\n+- Eric Shaw\n+- error10\n+- Ethan Heilman\n+- face\n+- fanquake\n+- Francesco 'makevoid' Canessa\n+- fsb4000\n+- Gavin Andresen\n+- gladoscc\n+- Gregory Maxwell\n+- Gregory Sanders\n+- instagibbs\n+- James O'Beirne\n+- Jannes Faber\n+- Jarret Dyrbye\n+- Jeremy Rand\n+- jloughry\n+- jmacwhyte\n+- Joao Fonseca\n+- Johnson Lau\n+- Jonas Nick\n+- Jonas Schnelli\n+- Jonathan Cross\n+- Jo\u00e3o Barbosa\n+- Jorge Tim\u00f3n\n+- Kaz Wesley\n+- Kefkius\n+- kirkalx\n+- Krzysztof Jurewicz\n+- Leviathn\n+- lewuathe\n+- Luke Dashjr\n+- Luv Khemani\n+- Marcel Kr\u00fcger\n+- Marco Falke\n+- Mark Friedenbach\n+- Matt\n+- Matt Bogosian\n+- Matt Corallo\n+- Matthew English\n+- Matthew Zipkin\n+- mb300sd\n+- Mitchell Cash\n+- mrbandrews\n+- mruddy\n+- Murch\n+- Mustafa\n+- Nathaniel Mahieu\n+- Nicolas Dorier\n+- Patrick Strateman\n+- Paul Rabahy\n+- paveljanik\n+- Pavel Jan\u00edk\n+- Pavel Vasin\n+- Pedro Branco\n+- Peter Todd\n+- Philip Kaufmann\n+- Pieter Wuille\n+- Prayag Verma\n+- ptschip\n+- Puru\n+- randy-waterhouse\n+- R E Broadley\n+- Rusty Russell\n+- Suhas Daftuar\n+- Suriyaa Kudo\n+- TheLazieR Yip\n+- Thomas Kerin\n+- Tom Harding\n+- Tyler Hardin\n+- UdjinM6\n+- Warren Togami\n+- Will Binns\n+- Wladimir J. van der Laan\n+- Yuri Zhykin\n+\n+As well as everyone that helped translating on [Transifex](https://www.transifex.com/projects/p/bitcoin/)."
      },
      {
        "sha": "63f75fb3992a2235068a9eb0b13e5d64f53b5eb7",
        "filename": "doc/release-process.md",
        "status": "modified",
        "additions": 189,
        "deletions": 109,
        "changes": 298,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/doc/release-process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/doc/release-process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-process.md?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -1,168 +1,237 @@\n Release Process\n ====================\n \n-* Update translations (ping wumpus, Diapolo or tcatm on IRC) see [translation_process.md](https://github.com/bitcoin/bitcoin/blob/master/doc/translation_process.md#syncing-with-transifex)\n+Before every release candidate:\n+\n+* Update translations (ping wumpus on IRC) see [translation_process.md](https://github.com/bitcoin/bitcoin/blob/master/doc/translation_process.md#synchronising-translations).\n+\n+* Update manpages, see [gen-manpages.sh](https://github.com/bitcoin/bitcoin/blob/master/contrib/devtools/README.md#gen-manpagessh).\n+\n+Before every minor and major release:\n+\n * Update [bips.md](bips.md) to account for changes since the last release.\n+* Update version in sources (see below)\n+* Write release notes (see below)\n \n-* * *\n+Before every major release:\n+\n+* Update hardcoded [seeds](/contrib/seeds/README.md), see [this pull request](https://github.com/bitcoin/bitcoin/pull/7415) for an example.\n+* Update [`BLOCK_CHAIN_SIZE`](/src/qt/intro.cpp) to the current size plus some overhead.\n+\n+### First time / New builders\n+\n+If you're using the automated script (found in [contrib/gitian-build.sh](/contrib/gitian-build.sh)), then at this point you should run it with the \"--setup\" command. Otherwise ignore this.\n \n-###First time / New builders\n Check out the source code in the following directory hierarchy.\n \n-\tcd /path/to/your/toplevel/build\n-\tgit clone https://github.com/bitcoin/gitian.sigs.git\n-\tgit clone https://github.com/bitcoin/bitcoin-detached-sigs.git\n-\tgit clone https://github.com/devrandom/gitian-builder.git\n-\tgit clone https://github.com/bitcoin/bitcoin.git\n+    cd /path/to/your/toplevel/build\n+    git clone https://github.com/bitcoin-core/gitian.sigs.git\n+    git clone https://github.com/bitcoin-core/bitcoin-detached-sigs.git\n+    git clone https://github.com/devrandom/gitian-builder.git\n+    git clone https://github.com/bitcoin/bitcoin.git\n+\n+### Bitcoin maintainers/release engineers, update version in sources\n \n-###Bitcoin maintainers/release engineers, update (commit) version in sources\n+Update the following:\n \n-\tpushd ./bitcoin\n-\tcontrib/verifysfbinaries/verify.sh\n-\tdoc/README*\n-\tshare/setup.nsi\n-\tsrc/clientversion.h (change CLIENT_VERSION_IS_RELEASE to true)\n+- `configure.ac`:\n+    - `_CLIENT_VERSION_MAJOR`\n+    - `_CLIENT_VERSION_MINOR`\n+    - `_CLIENT_VERSION_REVISION`\n+    - Don't forget to set `_CLIENT_VERSION_IS_RELEASE` to `true`\n+- `src/clientversion.h`: (this mirrors `configure.ac` - see issue #3539)\n+    - `CLIENT_VERSION_MAJOR`\n+    - `CLIENT_VERSION_MINOR`\n+    - `CLIENT_VERSION_REVISION`\n+    - Don't forget to set `CLIENT_VERSION_IS_RELEASE` to `true`\n+- `doc/README.md` and `doc/README_windows.txt`\n+- `doc/Doxyfile`: `PROJECT_NUMBER` contains the full version\n+- `contrib/gitian-descriptors/*.yml`: usually one'd want to do this on master after branching off the release - but be sure to at least do it before a new major release\n \n-\t# tag version in git\n+Write release notes. git shortlog helps a lot, for example:\n \n-\tgit tag -s v(new version, e.g. 0.8.0)\n+    git shortlog --no-merges v(current version, e.g. 0.7.2)..v(new version, e.g. 0.8.0)\n \n-\t# write release notes. git shortlog helps a lot, for example:\n+(or ping @wumpus on IRC, he has specific tooling to generate the list of merged pulls\n+and sort them into categories based on labels)\n \n-\tgit shortlog --no-merges v(current version, e.g. 0.7.2)..v(new version, e.g. 0.8.0)\n-\tpopd\n+Generate list of authors:\n \n-* * *\n+    git log --format='%aN' \"$*\" | sort -ui | sed -e 's/^/- /'\n \n-###Setup and perform Gitian builds\n+Tag version (or release candidate) in git\n \n- Setup Gitian descriptors:\n+    git tag -s v(new version, e.g. 0.8.0)\n \n-\tpushd ./bitcoin\n-\texport SIGNER=(your Gitian key, ie bluematt, sipa, etc)\n-\texport VERSION=(new version, e.g. 0.8.0)\n-\tgit checkout v${VERSION}\n-\tpopd\n+### Setup and perform Gitian builds\n \n-  Ensure your gitian.sigs are up-to-date if you wish to gverify your builds against other Gitian signatures.\n+If you're using the automated script (found in [contrib/gitian-build.sh](/contrib/gitian-build.sh)), then at this point you should run it with the \"--build\" command. Otherwise ignore this.\n \n-\tpushd ./gitian.sigs\n-\tgit pull\n-\tpopd\n+Setup Gitian descriptors:\n \n-  Ensure gitian-builder is up-to-date to take advantage of new caching features (`e9741525c` or later is recommended).\n+    pushd ./bitcoin\n+    export SIGNER=(your Gitian key, ie bluematt, sipa, etc)\n+    export VERSION=(new version, e.g. 0.8.0)\n+    git fetch\n+    git checkout v${VERSION}\n+    popd\n \n-\tpushd ./gitian-builder\n-\tgit pull\n+Ensure your gitian.sigs are up-to-date if you wish to gverify your builds against other Gitian signatures.\n \n-###Fetch and create inputs: (first time, or when dependency versions change)\n+    pushd ./gitian.sigs\n+    git pull\n+    popd\n \n-\tmkdir -p inputs\n-\twget -P inputs https://bitcoincore.org/cfields/osslsigncode-Backports-to-1.7.1.patch\n-\twget -P inputs http://downloads.sourceforge.net/project/osslsigncode/osslsigncode/osslsigncode-1.7.1.tar.gz\n+Ensure gitian-builder is up-to-date:\n \n- Register and download the Apple SDK: see [OS X readme](README_osx.txt) for details.\n+    pushd ./gitian-builder\n+    git pull\n+    popd\n \n- https://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_6.1.1/xcode_6.1.1.dmg\n+### Fetch and create inputs: (first time, or when dependency versions change)\n \n- Using a Mac, create a tarball for the 10.9 SDK and copy it to the inputs directory:\n+    pushd ./gitian-builder\n+    mkdir -p inputs\n+    wget -P inputs https://bitcoincore.org/cfields/osslsigncode-Backports-to-1.7.1.patch\n+    wget -P inputs http://downloads.sourceforge.net/project/osslsigncode/osslsigncode/osslsigncode-1.7.1.tar.gz\n+    popd\n \n-\ttar -C /Volumes/Xcode/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/ -czf MacOSX10.9.sdk.tar.gz MacOSX10.9.sdk\n+Create the OS X SDK tarball, see the [OS X readme](README_osx.md) for details, and copy it into the inputs directory.\n \n-###Optional: Seed the Gitian sources cache and offline git repositories\n+### Optional: Seed the Gitian sources cache and offline git repositories\n \n By default, Gitian will fetch source files as needed. To cache them ahead of time:\n \n-\tmake -C ../bitcoin/depends download SOURCES_PATH=`pwd`/cache/common\n+    pushd ./gitian-builder\n+    make -C ../bitcoin/depends download SOURCES_PATH=`pwd`/cache/common\n+    popd\n \n Only missing files will be fetched, so this is safe to re-run for each build.\n \n NOTE: Offline builds must use the --url flag to ensure Gitian fetches only from local URLs. For example:\n-```\n-./bin/gbuild --url bitcoin=/path/to/bitcoin,signature=/path/to/sigs {rest of arguments}\n-```\n+\n+    pushd ./gitian-builder\n+    ./bin/gbuild --url bitcoin=/path/to/bitcoin,signature=/path/to/sigs {rest of arguments}\n+    popd\n+\n The gbuild invocations below <b>DO NOT DO THIS</b> by default.\n \n-###Build (and optionally verify) Bitcoin Core for Linux, Windows, and OS X:\n+### Build and sign Bitcoin Core for Linux, Windows, and OS X:\n+\n+    pushd ./gitian-builder\n+    ./bin/gbuild --memory 3000 --commit bitcoin=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-linux.yml\n+    ./bin/gsign --signer $SIGNER --release ${VERSION}-linux --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-linux.yml\n+    mv build/out/bitcoin-*.tar.gz build/out/src/bitcoin-*.tar.gz ../\n+\n+    ./bin/gbuild --memory 3000 --commit bitcoin=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-win.yml\n+    ./bin/gsign --signer $SIGNER --release ${VERSION}-win-unsigned --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-win.yml\n+    mv build/out/bitcoin-*-win-unsigned.tar.gz inputs/bitcoin-win-unsigned.tar.gz\n+    mv build/out/bitcoin-*.zip build/out/bitcoin-*.exe ../\n+\n+    ./bin/gbuild --memory 3000 --commit bitcoin=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-osx.yml\n+    ./bin/gsign --signer $SIGNER --release ${VERSION}-osx-unsigned --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-osx.yml\n+    mv build/out/bitcoin-*-osx-unsigned.tar.gz inputs/bitcoin-osx-unsigned.tar.gz\n+    mv build/out/bitcoin-*.tar.gz build/out/bitcoin-*.dmg ../\n+    popd\n \n-\t./bin/gbuild --commit bitcoin=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-linux.yml\n-\t./bin/gsign --signer $SIGNER --release ${VERSION}-linux --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-linux.yml\n-\t./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-linux ../bitcoin/contrib/gitian-descriptors/gitian-linux.yml\n-\tmv build/out/bitcoin-*.tar.gz build/out/src/bitcoin-*.tar.gz ../\n+Build output expected:\n \n-\t./bin/gbuild --commit bitcoin=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-win.yml\n-\t./bin/gsign --signer $SIGNER --release ${VERSION}-win-unsigned --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-win.yml\n-\t./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-win-unsigned ../bitcoin/contrib/gitian-descriptors/gitian-win.yml\n-\tmv build/out/bitcoin-*-win-unsigned.tar.gz inputs/bitcoin-win-unsigned.tar.gz\n-\tmv build/out/bitcoin-*.zip build/out/bitcoin-*.exe ../\n+  1. source tarball (`bitcoin-${VERSION}.tar.gz`)\n+  2. linux 32-bit and 64-bit dist tarballs (`bitcoin-${VERSION}-linux[32|64].tar.gz`)\n+  3. windows 32-bit and 64-bit unsigned installers and dist zips (`bitcoin-${VERSION}-win[32|64]-setup-unsigned.exe`, `bitcoin-${VERSION}-win[32|64].zip`)\n+  4. OS X unsigned installer and dist tarball (`bitcoin-${VERSION}-osx-unsigned.dmg`, `bitcoin-${VERSION}-osx64.tar.gz`)\n+  5. Gitian signatures (in `gitian.sigs/${VERSION}-<linux|{win,osx}-unsigned>/(your Gitian key)/`)\n \n-\t./bin/gbuild --commit bitcoin=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-osx.yml\n-\t./bin/gsign --signer $SIGNER --release ${VERSION}-osx-unsigned --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-osx.yml\n-\t./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-osx-unsigned ../bitcoin/contrib/gitian-descriptors/gitian-osx.yml\n-\tmv build/out/bitcoin-*-osx-unsigned.tar.gz inputs/bitcoin-osx-unsigned.tar.gz\n-\tmv build/out/bitcoin-*.tar.gz build/out/bitcoin-*.dmg ../\n-\tpopd\n+### Verify other gitian builders signatures to your own. (Optional)\n \n-  Build output expected:\n+Add other gitian builders keys to your gpg keyring, and/or refresh keys.\n \n-  1. source tarball (bitcoin-${VERSION}.tar.gz)\n-  2. linux 32-bit and 64-bit dist tarballs (bitcoin-${VERSION}-linux[32|64].tar.gz)\n-  3. windows 32-bit and 64-bit unsigned installers and dist zips (bitcoin-${VERSION}-win[32|64]-setup-unsigned.exe, bitcoin-${VERSION}-win[32|64].zip)\n-  4. OS X unsigned installer and dist tarball (bitcoin-${VERSION}-osx-unsigned.dmg, bitcoin-${VERSION}-osx64.tar.gz)\n-  5. Gitian signatures (in gitian.sigs/${VERSION}-<linux|{win,osx}-unsigned>/(your Gitian key)/\n+    gpg --import bitcoin/contrib/gitian-keys/*.pgp\n+    gpg --refresh-keys\n \n-###Next steps:\n+Verify the signatures\n+\n+    pushd ./gitian-builder\n+    ./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-linux ../bitcoin/contrib/gitian-descriptors/gitian-linux.yml\n+    ./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-win-unsigned ../bitcoin/contrib/gitian-descriptors/gitian-win.yml\n+    ./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-osx-unsigned ../bitcoin/contrib/gitian-descriptors/gitian-osx.yml\n+    popd\n+\n+### Next steps:\n \n Commit your signature to gitian.sigs:\n \n-\tpushd gitian.sigs\n-\tgit add ${VERSION}-linux/${SIGNER}\n-\tgit add ${VERSION}-win-unsigned/${SIGNER}\n-\tgit add ${VERSION}-osx-unsigned/${SIGNER}\n-\tgit commit -a\n-\tgit push  # Assuming you can push to the gitian.sigs tree\n-\tpopd\n+    pushd gitian.sigs\n+    git add ${VERSION}-linux/${SIGNER}\n+    git add ${VERSION}-win-unsigned/${SIGNER}\n+    git add ${VERSION}-osx-unsigned/${SIGNER}\n+    git commit -a\n+    git push  # Assuming you can push to the gitian.sigs tree\n+    popd\n \n-  Wait for Windows/OS X detached signatures:\n+Wait for Windows/OS X detached signatures:\n \n-\tOnce the Windows/OS X builds each have 3 matching signatures, they will be signed with their respective release keys.\n-\tDetached signatures will then be committed to the [bitcoin-detached-sigs](https://github.com/bitcoin/bitcoin-detached-sigs) repository, which can be combined with the unsigned apps to create signed binaries.\n+- Once the Windows/OS X builds each have 3 matching signatures, they will be signed with their respective release keys.\n+- Detached signatures will then be committed to the [bitcoin-detached-sigs](https://github.com/bitcoin-core/bitcoin-detached-sigs) repository, which can be combined with the unsigned apps to create signed binaries.\n \n-  Create (and optionally verify) the signed OS X binary:\n+Create (and optionally verify) the signed OS X binary:\n \n-\tpushd ./gitian-builder\n-\t./bin/gbuild -i --commit signature=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n-\t./bin/gsign --signer $SIGNER --release ${VERSION}-osx-signed --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n-\t./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-osx-signed ../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n-\tmv build/out/bitcoin-osx-signed.dmg ../bitcoin-${VERSION}-osx.dmg\n-\tpopd\n+    pushd ./gitian-builder\n+    ./bin/gbuild -i --commit signature=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n+    ./bin/gsign --signer $SIGNER --release ${VERSION}-osx-signed --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n+    ./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-osx-signed ../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n+    mv build/out/bitcoin-osx-signed.dmg ../bitcoin-${VERSION}-osx.dmg\n+    popd\n \n-  Create (and optionally verify) the signed Windows binaries:\n+Create (and optionally verify) the signed Windows binaries:\n \n-\tpushd ./gitian-builder\n-\t./bin/gbuild -i --commit signature=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml\n-\t./bin/gsign --signer $SIGNER --release ${VERSION}-win-signed --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml\n-\t./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-win-signed ../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml\n-\tmv build/out/bitcoin-*win64-setup.exe ../bitcoin-${VERSION}-win64-setup.exe\n-\tmv build/out/bitcoin-*win32-setup.exe ../bitcoin-${VERSION}-win32-setup.exe\n-\tpopd\n+    pushd ./gitian-builder\n+    ./bin/gbuild -i --commit signature=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml\n+    ./bin/gsign --signer $SIGNER --release ${VERSION}-win-signed --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml\n+    ./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-win-signed ../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml\n+    mv build/out/bitcoin-*win64-setup.exe ../bitcoin-${VERSION}-win64-setup.exe\n+    mv build/out/bitcoin-*win32-setup.exe ../bitcoin-${VERSION}-win32-setup.exe\n+    popd\n \n Commit your signature for the signed OS X/Windows binaries:\n \n-\tpushd gitian.sigs\n-\tgit add ${VERSION}-osx-signed/${SIGNER}\n-\tgit add ${VERSION}-win-signed/${SIGNER}\n-\tgit commit -a\n-\tgit push  # Assuming you can push to the gitian.sigs tree\n-\tpopd\n-\n--------------------------------------------------------------------------\n+    pushd gitian.sigs\n+    git add ${VERSION}-osx-signed/${SIGNER}\n+    git add ${VERSION}-win-signed/${SIGNER}\n+    git commit -a\n+    git push  # Assuming you can push to the gitian.sigs tree\n+    popd\n \n ### After 3 or more people have gitian-built and their results match:\n \n - Create `SHA256SUMS.asc` for the builds, and GPG-sign it:\n+\n ```bash\n sha256sum * > SHA256SUMS\n+```\n+\n+The list of files should be:\n+```\n+bitcoin-${VERSION}-aarch64-linux-gnu.tar.gz\n+bitcoin-${VERSION}-arm-linux-gnueabihf.tar.gz\n+bitcoin-${VERSION}-i686-pc-linux-gnu.tar.gz\n+bitcoin-${VERSION}-x86_64-linux-gnu.tar.gz\n+bitcoin-${VERSION}-osx64.tar.gz\n+bitcoin-${VERSION}-osx.dmg\n+bitcoin-${VERSION}.tar.gz\n+bitcoin-${VERSION}-win32-setup.exe\n+bitcoin-${VERSION}-win32.zip\n+bitcoin-${VERSION}-win64-setup.exe\n+bitcoin-${VERSION}-win64.zip\n+```\n+The `*-debug*` files generated by the gitian build contain debug symbols\n+for troubleshooting by developers. It is assumed that anyone that is interested\n+in debugging can run gitian to generate the files for themselves. To avoid\n+end-user confusion about which file to pick, as well as save storage\n+space *do not upload these to the bitcoin.org server, nor put them in the torrent*.\n+\n+- GPG-sign it, delete the unsigned file:\n+```\n gpg --digest-algo sha256 --clearsign SHA256SUMS # outputs SHA256SUMS.asc\n rm SHA256SUMS\n ```\n@@ -172,6 +241,15 @@ Note: check that SHA256SUMS itself doesn't end up in SHA256SUMS, which is a spur\n - Upload zips and installers, as well as `SHA256SUMS.asc` from last step, to the bitcoin.org server\n   into `/var/www/bin/bitcoin-core-${VERSION}`\n \n+- A `.torrent` will appear in the directory after a few minutes. Optionally help seed this torrent. To get the `magnet:` URI use:\n+```bash\n+transmission-show -m <torrent file>\n+```\n+Insert the magnet URI into the announcement sent to mailing lists. This permits\n+people without access to `bitcoin.org` to download the binary distribution.\n+Also put it into the `optional_magnetlink:` slot in the YAML file for\n+bitcoin.org (see below for bitcoin.org update instructions).\n+\n - Update bitcoin.org version\n \n   - First, check to see if the Bitcoin.org maintainers have prepared a\n@@ -189,16 +267,18 @@ Note: check that SHA256SUMS itself doesn't end up in SHA256SUMS, which is a spur\n \n - Announce the release:\n \n-  - Release sticky on bitcointalk: https://bitcointalk.org/index.php?board=1.0\n+  - bitcoin-dev and bitcoin-core-dev mailing list\n+\n+  - Bitcoin Core announcements list https://bitcoincore.org/en/list/announcements/join/\n \n-  - Bitcoin-development mailing list\n+  - bitcoincore.org blog post\n \n   - Update title of #bitcoin on Freenode IRC\n \n-  - Optionally reddit /r/Bitcoin, ... but this will usually sort out itself\n+  - Optionally twitter, reddit /r/Bitcoin, ... but this will usually sort out itself\n \n-- Notify BlueMatt so that he can start building [https://launchpad.net/~bitcoin/+archive/ubuntu/bitcoin](the PPAs)\n+  - Notify BlueMatt so that he can start building [the PPAs](https://launchpad.net/~bitcoin/+archive/ubuntu/bitcoin)\n \n-- Add release notes for the new version to the directory `doc/release-notes` in git master\n+  - Add release notes for the new version to the directory `doc/release-notes` in git master\n \n-- Celebrate\n+  - Celebrate"
      },
      {
        "sha": "dc363582cc8dee8c6ce0d0afadad030d08958793",
        "filename": "doc/shared-libraries.md",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/doc/shared-libraries.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/doc/shared-libraries.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/shared-libraries.md?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -11,7 +11,7 @@ The interface is defined in the C header `bitcoinconsensus.h` located in  `src/s\n \n #### Version\n \n-`bitcoinconsensus_version` returns an `unsigned int` with the the API version *(currently at an experimental `0`)*.\n+`bitcoinconsensus_version` returns an `unsigned int` with the API version *(currently at an experimental `0`)*.\n \n #### Script Validation\n \n@@ -30,12 +30,17 @@ The interface is defined in the C header `bitcoinconsensus.h` located in  `src/s\n - `bitcoinconsensus_SCRIPT_FLAGS_VERIFY_NONE`\n - `bitcoinconsensus_SCRIPT_FLAGS_VERIFY_P2SH` - Evaluate P2SH ([BIP16](https://github.com/bitcoin/bips/blob/master/bip-0016.mediawiki)) subscripts\n - `bitcoinconsensus_SCRIPT_FLAGS_VERIFY_DERSIG` - Enforce strict DER ([BIP66](https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki)) compliance\n+- `bitcoinconsensus_SCRIPT_FLAGS_VERIFY_NULLDUMMY` - Enforce NULLDUMMY ([BIP147](https://github.com/bitcoin/bips/blob/master/bip-0147.mediawiki))\n+- `bitcoinconsensus_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY` - Enable CHECKLOCKTIMEVERIFY ([BIP65](https://github.com/bitcoin/bips/blob/master/bip-0065.mediawiki))\n+- `bitcoinconsensus_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY` - Enable CHECKSEQUENCEVERIFY ([BIP112](https://github.com/bitcoin/bips/blob/master/bip-0112.mediawiki))\n+- `bitcoinconsensus_SCRIPT_FLAGS_VERIFY_WITNESS` - Enable WITNESS ([BIP141](https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki))\n \n ##### Errors\n - `bitcoinconsensus_ERR_OK` - No errors with input parameters *(see the return value of `bitcoinconsensus_verify_script` for the verification status)*\n - `bitcoinconsensus_ERR_TX_INDEX` - An invalid index for `txTo`\n - `bitcoinconsensus_ERR_TX_SIZE_MISMATCH` - `txToLen` did not match with the size of `txTo`\n - `bitcoinconsensus_ERR_DESERIALIZE` - An error deserializing `txTo`\n+- `bitcoinconsensus_ERR_AMOUNT_REQUIRED` - Input amount is required if WITNESS is used\n \n ### Example Implementations\n - [NBitcoin](https://github.com/NicolasDorier/NBitcoin/blob/master/NBitcoin/Script.cs#L814) (.NET Bindings)"
      },
      {
        "sha": "2f376af4c7a7fc3dafde1d1e31afac840cfb6a38",
        "filename": "doc/tor.md",
        "status": "modified",
        "additions": 25,
        "deletions": 6,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/doc/tor.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/doc/tor.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/tor.md?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -3,7 +3,7 @@ TOR SUPPORT IN BITCOIN\n \n It is possible to run Bitcoin as a Tor hidden service, and connect to such services.\n \n-The following directions assume you have a Tor proxy running on port 9050. Many distributions default to having a SOCKS proxy listening on port 9050, but others may not. In particular, the Tor Browser Bundle defaults to listening on a random port. See [Tor Project FAQ:TBBSocksPort](https://www.torproject.org/docs/faq.html.en#TBBSocksPort) for how to properly\n+The following directions assume you have a Tor proxy running on port 9050. Many distributions default to having a SOCKS proxy listening on port 9050, but others may not. In particular, the Tor Browser Bundle defaults to listening on port 9150. See [Tor Project FAQ:TBBSocksPort](https://www.torproject.org/docs/faq.html.en#TBBSocksPort) for how to properly\n configure Tor.\n \n \n@@ -52,7 +52,7 @@ your bitcoind's P2P listen port (8333 by default).\n \t                this option, and this can be a .onion address. Given the above\n \t                configuration, you can find your onion address in\n \t                /var/lib/tor/bitcoin-service/hostname. Onion addresses are given\n-\t                preference for your node to advertize itself with, for connections\n+\t                preference for your node to advertise itself with, for connections\n \t                coming from unroutable addresses (such as 127.0.0.1, where the\n \t                Tor proxy typically runs).\n \n@@ -95,12 +95,31 @@ Starting with Tor version 0.2.7.1 it is possible, through Tor's control socket\n API, to create and destroy 'ephemeral' hidden services programmatically.\n Bitcoin Core has been updated to make use of this.\n \n-This means that if Tor is running (and proper authorization is available),\n-Bitcoin Core automatically creates a hidden service to listen on, without\n-manual configuration. This will positively affect the number of available\n-.onion nodes.\n+This means that if Tor is running (and proper authentication has been configured),\n+Bitcoin Core automatically creates a hidden service to listen on. This will positively \n+affect the number of available .onion nodes.\n \n This new feature is enabled by default if Bitcoin Core is listening, and\n a connection to Tor can be made. It can be configured with the `-listenonion`,\n `-torcontrol` and `-torpassword` settings. To show verbose debugging\n information, pass `-debug=tor`.\n+\n+Connecting to Tor's control socket API requires one of two authentication methods to be \n+configured. For cookie authentication the user running bitcoind must have write access \n+to the `CookieAuthFile` specified in Tor configuration. In some cases this is \n+preconfigured and the creation of a hidden service is automatic. If permission problems \n+are seen with `-debug=tor` they can be resolved by adding both the user running tor and \n+the user running bitcoind to the same group and setting permissions appropriately. On \n+Debian-based systems the user running bitcoind can be added to the debian-tor group, \n+which has the appropriate permissions. An alternative authentication method is the use \n+of the `-torpassword` flag and a `hash-password` which can be enabled and specified in \n+Tor configuration.\n+\n+4. Privacy recommendations\n+---------------------------\n+\n+- Do not add anything but bitcoin ports to the hidden service created in section 2.\n+  If you run a web service too, create a new hidden service for that.\n+  Otherwise it is trivial to link them, which may reduce privacy. Hidden\n+  services created automatically (as in section 3) always have only one port\n+  open."
      },
      {
        "sha": "9e9ced245722a3840e6ceecd39c28f24c461a0cb",
        "filename": "doc/translation_process.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/doc/translation_process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/doc/translation_process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/translation_process.md?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -6,7 +6,7 @@ The Bitcoin-Core project has been designed to support multiple localisations. Th\n ### Helping to translate (using Transifex)\n Transifex is setup to monitor the Github repo for updates, and when code containing new translations is found, Transifex will process any changes. It may take several hours after a pull-request has been merged, to appear in the Transifex web interface.\n \n-Multiple language support is critical in assisting Bitcoin\u2019s global adoption, and growth. One of Bitcoin\u2019s greatest strengths is cross-boarder money transfers, any help making that easier is greatly appreciated.\n+Multiple language support is critical in assisting Bitcoin\u2019s global adoption, and growth. One of Bitcoin\u2019s greatest strengths is cross-border money transfers, any help making that easier is greatly appreciated.\n \n See the [Transifex Bitcoin project](https://www.transifex.com/projects/p/bitcoin/) to assist in translations. You should also join the translation mailing list for announcements - see details below.\n \n@@ -94,7 +94,7 @@ When new plurals are added to the source file, it's important to do the followin\n 7. Save the source file\n \n ### Translating a new language\n-To create a new language template, you will need to edit the languages manifest file `src/qt/bitcoin.qrc` and add a new entry. Below is an example of the english language entry.\n+To create a new language template, you will need to edit the languages manifest file `src/qt/bitcoin_locale.qrc` and add a new entry. Below is an example of the English language entry.\n \n ```xml\n <qresource prefix=\"/translations\">"
      },
      {
        "sha": "38085cec353ad321fec081e69769708a64244bde",
        "filename": "doc/travis-ci.md",
        "status": "renamed",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/doc/travis-ci.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/doc/travis-ci.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/travis-ci.md?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -1,13 +1,16 @@\n+Travis CI\n+=========\n+\n Support for using travis-ci has been added in order to automate pull-testing.\n-See https://travis-ci.org/ for more info\n+See [travis-ci.org](https://travis-ci.org/) for more info\n \n This procedure is different than the pull-tester that came before it in a few\n ways.\n \n There is nothing to administer. This is a major feature as it means\n that builds have no local state. Because there is no ability to login to the\n builders to install packages (tools, dependencies, etc), the entire build\n-procedure must instead be controlled by a declarative script (.travis.yml).\n+procedure must instead be controlled by a declarative script `.travis.yml`.\n This script declares each build configuration, creates virtual machines as\n necessary, builds, then discards the virtual machines.\n \n@@ -16,7 +19,7 @@ than a single pass/fail. This helps to catch build failures and logic errors\n that present on platforms other than the ones the author has tested. This\n matrix is defined in the build script and can be changed at any time.\n \n-All builders use the dependency-generator in the depends dir, rather than\n+All builders use the dependency-generator in the [depends dir](/depends), rather than\n using apt-get to install build dependencies. This guarantees that the tester\n is using the same versions as Gitian, so the build results are nearly identical\n to what would be found in a final release. However, this also means that builds\n@@ -27,7 +30,7 @@ In order to avoid rebuilding all dependencies for each build, the binaries are\n cached and re-used when possible. Changes in the dependency-generator will\n trigger cache-invalidation and rebuilds as necessary.\n \n-These caches can be manually removed if necessary. This is one of the the very few\n+These caches can be manually removed if necessary. This is one of the very few\n manual operations that is possible with Travis, and it can be done by the\n Bitcoin Core committer via the Travis web interface.\n ",
        "previous_filename": "doc/travis-ci.txt"
      },
      {
        "sha": "6079e3254f783e4b9df6e3994869a454d10aaf7c",
        "filename": "doc/zmq.md",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/doc/zmq.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/doc/zmq.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/zmq.md?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -38,7 +38,7 @@ newer. Typically, it is packaged by distributions as something like\n *libzmq3-dev*. The C++ wrapper for ZeroMQ is *not* needed.\n \n In order to run the example Python client scripts in contrib/ one must\n-also install *python-zmq*, though this is not necessary for daemon\n+also install *python3-zmq*, though this is not necessary for daemon\n operation.\n \n ## Enabling\n@@ -99,3 +99,8 @@ using other means such as firewalling.\n Note that when the block chain tip changes, a reorganisation may occur\n and just the tip will be notified. It is up to the subscriber to\n retrieve the chain from the last known block to the new tip.\n+\n+There are several possibilities that ZMQ notification can get lost\n+during transmission depending on the communication type your are\n+using. Bitcoind appends an up-counting sequence number to each\n+notification which allows listeners to detect lost notifications."
      },
      {
        "sha": "eb920c47eb521e5e42f3cff196c92627015e6dc7",
        "filename": "libbitcoinconsensus.pc.in",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/libbitcoinconsensus.pc.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/libbitcoinconsensus.pc.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/libbitcoinconsensus.pc.in?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -3,7 +3,7 @@ exec_prefix=@exec_prefix@\n libdir=@libdir@\n includedir=@includedir@\n \n-Name: Bitcoin Core consensus library\n+Name: @PACKAGE_NAME@ consensus library\n Description: Library for the Bitcoin consensus protocol.\n Version: @PACKAGE_VERSION@\n Libs: -L${libdir} -lbitcoinconsensus"
      },
      {
        "sha": "225207cc1cebffabe86ed043acf2b7d4272ab216",
        "filename": "qa/README.md",
        "status": "modified",
        "additions": 35,
        "deletions": 5,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/README.md?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -5,18 +5,48 @@ Every pull request to the bitcoin repository is built and run through\n the regression test suite. You can also run all or only individual\n tests locally.\n \n+Test dependencies\n+=================\n+Before running the tests, the following must be installed.\n+\n+Unix\n+----\n+The python3-zmq library is required. On Ubuntu or Debian it can be installed via:\n+```\n+sudo apt-get install python3-zmq\n+```\n+\n+OS X\n+------\n+```\n+pip3 install pyzmq\n+```\n+\n Running tests\n =============\n \n-You can run any single test by calling `qa/pull-tester/rpc-tests.py <testname>`.\n+You can run any single test by calling\n+\n+    qa/pull-tester/rpc-tests.py <testname>\n+\n+Or you can run any combination of tests by calling\n+\n+    qa/pull-tester/rpc-tests.py <testname1> <testname2> <testname3> ...\n+\n+Run the regression test suite with\n+\n+    qa/pull-tester/rpc-tests.py\n+\n+Run all possible tests with\n \n-Or you can run any combination of tests by calling `qa/pull-tester/rpc-tests.py <testname1> <testname2> <testname3> ...`\n+    qa/pull-tester/rpc-tests.py -extended\n \n-Run the regression test suite with `qa/pull-tester/rpc-tests.py`\n+By default, tests will be run in parallel. To specify how many jobs to run,\n+append `-parallel=n` (default n=4).\n \n-Run all possible tests with `qa/pull-tester/rpc-tests.py -extended`\n+If you want to create a basic coverage report for the rpc test suite, append `--coverage`.\n \n-Possible options:\n+Possible options, which apply to each individual test run:\n \n ```\n   -h, --help            show this help message and exit"
      },
      {
        "sha": "4a953385e09c67523e8a5f839f2d1cdcf08aac03",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 173,
        "deletions": 77,
        "changes": 250,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -29,159 +29,255 @@\n import tempfile\n import re\n \n+sys.path.append(\"qa/pull-tester/\")\n from tests_config import *\n \n+BOLD = (\"\",\"\")\n+if os.name == 'posix':\n+    # primitive formatting on supported\n+    # terminal via ANSI escape sequences:\n+    BOLD = ('\\033[0m', '\\033[1m')\n+\n+RPC_TESTS_DIR = SRCDIR + '/qa/rpc-tests/'\n+\n #If imported values are not defined then set to zero (or disabled)\n-if not vars().has_key('ENABLE_WALLET'):\n+if 'ENABLE_WALLET' not in vars():\n     ENABLE_WALLET=0\n-if not vars().has_key('ENABLE_BITCOIND'):\n+if 'ENABLE_BITCOIND' not in vars():\n     ENABLE_BITCOIND=0\n-if not vars().has_key('ENABLE_UTILS'):\n+if 'ENABLE_UTILS' not in vars():\n     ENABLE_UTILS=0\n-if not vars().has_key('ENABLE_ZMQ'):\n+if 'ENABLE_ZMQ' not in vars():\n     ENABLE_ZMQ=0\n \n ENABLE_COVERAGE=0\n \n-#Create a set to store arguments and create the passOn string\n+#Create a set to store arguments and create the passon string\n opts = set()\n-passOn = \"\"\n-p = re.compile(\"^--\")\n+passon_args = []\n+PASSON_REGEX = re.compile(\"^--\")\n+PARALLEL_REGEX = re.compile('^-parallel=')\n \n-bold = (\"\",\"\")\n-if (os.name == 'posix'):\n-    bold = ('\\033[0m', '\\033[1m')\n+print_help = False\n+run_parallel = 4\n \n for arg in sys.argv[1:]:\n+    if arg == \"--help\" or arg == \"-h\" or arg == \"-?\":\n+        print_help = True\n+        break\n     if arg == '--coverage':\n         ENABLE_COVERAGE = 1\n-    elif (p.match(arg) or arg == \"-h\"):\n-        passOn += \" \" + arg\n+    elif PASSON_REGEX.match(arg):\n+        passon_args.append(arg)\n+    elif PARALLEL_REGEX.match(arg):\n+        run_parallel = int(arg.split(sep='=', maxsplit=1)[1])\n     else:\n         opts.add(arg)\n \n #Set env vars\n-buildDir = BUILDDIR\n-os.environ[\"BITCOIND\"] = buildDir + '/src/bitcoind' + EXEEXT\n-os.environ[\"BITCOINCLI\"] = buildDir + '/src/bitcoin-cli' + EXEEXT\n+if \"BITCOIND\" not in os.environ:\n+    os.environ[\"BITCOIND\"] = BUILDDIR + '/src/bitcoind' + EXEEXT\n \n-#Disable Windows tests by default\n if EXEEXT == \".exe\" and \"-win\" not in opts:\n-    print \"Win tests currently disabled.  Use -win option to enable\"\n+    # https://github.com/bitcoin/bitcoin/commit/d52802551752140cf41f0d9a225a43e84404d3e9\n+    # https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-136646964\n+    print(\"Win tests currently disabled by default.  Use -win option to enable\")\n+    sys.exit(0)\n+\n+if not (ENABLE_WALLET == 1 and ENABLE_UTILS == 1 and ENABLE_BITCOIND == 1):\n+    print(\"No rpc tests to run. Wallet, utils, and bitcoind must all be enabled\")\n     sys.exit(0)\n \n-#Tests\n+# python3-zmq may not be installed. Handle this gracefully and with some helpful info\n+if ENABLE_ZMQ:\n+    try:\n+        import zmq\n+    except ImportError:\n+        print(\"ERROR: \\\"import zmq\\\" failed. Set ENABLE_ZMQ=0 or \"\n+              \"to run zmq tests, see dependency info in /qa/README.md.\")\n+        # ENABLE_ZMQ=0\n+        raise\n+\n testScripts = [\n+    # longest test should go first, to favor running tests in parallel\n+    'p2p-fullblocktest.py',\n+    'walletbackup.py',\n+    'bip68-112-113-p2p.py',\n     'wallet.py',\n+    'wallet-accounts.py',\n+    'wallet-hd.py',\n+    'wallet-dump.py',\n     'listtransactions.py',\n     'receivedby.py',\n     'mempool_resurrect_test.py',\n     'txn_doublespend.py --mineblock',\n+    'p2p-segwit.py',\n+    'segwit.py',\n     'txn_clone.py',\n     'getchaintips.py',\n     'rawtransactions.py',\n     'rest.py',\n     'mempool_spendcoinbase.py',\n     'mempool_reorg.py',\n+    'mempool_limit.py',\n     'httpbasics.py',\n     'multi_rpc.py',\n     'zapwallettxes.py',\n     'proxy_test.py',\n     'merkle_blocks.py',\n     'fundrawtransaction.py',\n     'signrawtransactions.py',\n-    'walletbackup.py',\n     'nodehandling.py',\n     'reindex.py',\n     'decodescript.py',\n-    'p2p-fullblocktest.py',\n     'blockchain.py',\n     'disablewallet.py',\n     'sendheaders.py',\n     'keypool.py',\n+    'p2p-mempool.py',\n     'prioritise_transaction.py',\n+    'invalidblockrequest.py',\n+    'invalidtxrequest.py',\n+    'abandonconflict.py',\n+    'p2p-versionbits-warning.py',\n+    'importprunedfunds.py',\n+    'signmessages.py',\n+    'p2p-compactblocks.py',\n+    'nulldummy.py',\n ]\n+if ENABLE_ZMQ:\n+    testScripts.append('zmq_test.py')\n+\n testScriptsExt = [\n+    'bip9-softforks.py',\n     'bip65-cltv.py',\n     'bip65-cltv-p2p.py',\n+    'bip68-sequence.py',\n     'bipdersig-p2p.py',\n     'bipdersig.py',\n     'getblocktemplate_longpoll.py',\n     'getblocktemplate_proposals.py',\n     'txn_doublespend.py',\n     'txn_clone.py --mineblock',\n-    'pruning.py',\n     'forknotify.py',\n     'invalidateblock.py',\n-#    'rpcbind_test.py', #temporary, bug in libevent, see #6655\n+    'rpcbind_test.py',\n     'smartfees.py',\n     'maxblocksinflight.py',\n-    'invalidblockrequest.py',\n     'p2p-acceptblock.py',\n     'mempool_packages.py',\n     'maxuploadtarget.py',\n     'replace-by-fee.py',\n+    'p2p-feefilter.py',\n+    'pruning.py', # leave pruning last as it takes a REALLY long time\n ]\n \n-#Enable ZMQ tests\n-if ENABLE_ZMQ == 1:\n-    testScripts.append('zmq_test.py')\n-\n \n def runtests():\n+    test_list = []\n+    if '-extended' in opts:\n+        test_list = testScripts + testScriptsExt\n+    elif len(opts) == 0 or (len(opts) == 1 and \"-win\" in opts):\n+        test_list = testScripts\n+    else:\n+        for t in testScripts + testScriptsExt:\n+            if t in opts or re.sub(\".py$\", \"\", t) in opts:\n+                test_list.append(t)\n+\n+    if print_help:\n+        # Only print help of the first script and exit\n+        subprocess.check_call((RPC_TESTS_DIR + test_list[0]).split() + ['-h'])\n+        sys.exit(0)\n+\n     coverage = None\n \n     if ENABLE_COVERAGE:\n         coverage = RPCCoverage()\n         print(\"Initializing coverage directory at %s\\n\" % coverage.dir)\n+    flags = [\"--srcdir=%s/src\" % BUILDDIR] + passon_args\n+    flags.append(\"--cachedir=%s/qa/cache\" % BUILDDIR)\n+    if coverage:\n+        flags.append(coverage.flag)\n+\n+    if len(test_list) > 1 and run_parallel > 1:\n+        # Populate cache\n+        subprocess.check_output([RPC_TESTS_DIR + 'create_cache.py'] + flags)\n+\n+    #Run Tests\n+    max_len_name = len(max(test_list, key=len))\n+    time_sum = 0\n+    time0 = time.time()\n+    job_queue = RPCTestHandler(run_parallel, test_list, flags)\n+    results = BOLD[1] + \"%s | %s | %s\\n\\n\" % (\"TEST\".ljust(max_len_name), \"PASSED\", \"DURATION\") + BOLD[0]\n+    all_passed = True\n+    for _ in range(len(test_list)):\n+        (name, stdout, stderr, passed, duration) = job_queue.get_next()\n+        all_passed = all_passed and passed\n+        time_sum += duration\n+\n+        print('\\n' + BOLD[1] + name + BOLD[0] + \":\")\n+        print('' if passed else stdout + '\\n', end='')\n+        print('' if stderr == '' else 'stderr:\\n' + stderr + '\\n', end='')\n+        results += \"%s | %s | %s s\\n\" % (name.ljust(max_len_name), str(passed).ljust(6), duration)\n+        print(\"Pass: %s%s%s, Duration: %s s\\n\" % (BOLD[1], passed, BOLD[0], duration))\n+    results += BOLD[1] + \"\\n%s | %s | %s s (accumulated)\" % (\"ALL\".ljust(max_len_name), str(all_passed).ljust(6), time_sum) + BOLD[0]\n+    print(results)\n+    print(\"\\nRuntime: %s s\" % (int(time.time() - time0)))\n+\n+    if coverage:\n+        coverage.report_rpc_coverage()\n+\n+        print(\"Cleaning up coverage data\")\n+        coverage.cleanup()\n+\n+    sys.exit(not all_passed)\n+\n+\n+class RPCTestHandler:\n+    \"\"\"\n+    Trigger the testscrips passed in via the list.\n+    \"\"\"\n \n-    if(ENABLE_WALLET == 1 and ENABLE_UTILS == 1 and ENABLE_BITCOIND == 1):\n-        rpcTestDir = buildDir + '/qa/rpc-tests/'\n-        run_extended = '-extended' in opts\n-        cov_flag = coverage.flag if coverage else ''\n-        flags = \" --srcdir %s/src %s %s\" % (buildDir, cov_flag, passOn)\n-\n-        #Run Tests\n-        for i in range(len(testScripts)):\n-            if (len(opts) == 0\n-                    or (len(opts) == 1 and \"-win\" in opts )\n-                    or run_extended\n-                    or testScripts[i] in opts\n-                    or re.sub(\".py$\", \"\", testScripts[i]) in opts ):\n-\n-                print(\"Running testscript %s%s%s ...\" % (bold[1], testScripts[i], bold[0]))\n-                time0 = time.time()\n-                subprocess.check_call(\n-                    rpcTestDir + testScripts[i] + flags, shell=True)\n-                print(\"Duration: %s s\\n\" % (int(time.time() - time0)))\n-\n-                # exit if help is called so we print just one set of\n-                # instructions\n-                p = re.compile(\" -h| --help\")\n-                if p.match(passOn):\n-                    sys.exit(0)\n-\n-        # Run Extended Tests\n-        for i in range(len(testScriptsExt)):\n-            if (run_extended or testScriptsExt[i] in opts\n-                    or re.sub(\".py$\", \"\", testScriptsExt[i]) in opts):\n-\n-                print(\n-                    \"Running 2nd level testscript \"\n-                    + \"%s%s%s ...\" % (bold[1], testScriptsExt[i], bold[0]))\n-                time0 = time.time()\n-                subprocess.check_call(\n-                    rpcTestDir + testScriptsExt[i] + flags, shell=True)\n-                print(\"Duration: %s s\\n\" % (int(time.time() - time0)))\n-\n-        if coverage:\n-            coverage.report_rpc_coverage()\n-\n-            print(\"Cleaning up coverage data\")\n-            coverage.cleanup()\n-\n-    else:\n-        print \"No rpc tests to run. Wallet, utils, and bitcoind must all be enabled\"\n+    def __init__(self, num_tests_parallel, test_list=None, flags=None):\n+        assert(num_tests_parallel >= 1)\n+        self.num_jobs = num_tests_parallel\n+        self.test_list = test_list\n+        self.flags = flags\n+        self.num_running = 0\n+        self.jobs = []\n+\n+    def get_next(self):\n+        while self.num_running < self.num_jobs and self.test_list:\n+            # Add tests\n+            self.num_running += 1\n+            t = self.test_list.pop(0)\n+            port_seed = [\"--portseed=%s\" % len(self.test_list)]\n+            log_stdout = tempfile.SpooledTemporaryFile(max_size=2**16)\n+            log_stderr = tempfile.SpooledTemporaryFile(max_size=2**16)\n+            self.jobs.append((t,\n+                              time.time(),\n+                              subprocess.Popen((RPC_TESTS_DIR + t).split() + self.flags + port_seed,\n+                                               universal_newlines=True,\n+                                               stdout=log_stdout,\n+                                               stderr=log_stderr),\n+                              log_stdout,\n+                              log_stderr))\n+        if not self.jobs:\n+            raise IndexError('pop from empty list')\n+        while True:\n+            # Return first proc that finishes\n+            time.sleep(.5)\n+            for j in self.jobs:\n+                (name, time0, proc, log_out, log_err) = j\n+                if proc.poll() is not None:\n+                    log_out.seek(0), log_err.seek(0)\n+                    [stdout, stderr] = [l.read().decode('utf-8') for l in (log_out, log_err)]\n+                    log_out.close(), log_err.close()\n+                    passed = stderr == \"\" and proc.returncode == 0\n+                    self.num_running -= 1\n+                    self.jobs.remove(j)\n+                    return name, stdout, stderr, passed, int(time.time() - time0)\n+            print('.', end='', flush=True)\n \n \n class RPCCoverage(object):\n@@ -201,7 +297,7 @@ class RPCCoverage(object):\n     \"\"\"\n     def __init__(self):\n         self.dir = tempfile.mkdtemp(prefix=\"coverage\")\n-        self.flag = '--coveragedir %s' % self.dir\n+        self.flag = '--coveragedir=%s' % self.dir\n \n     def report_rpc_coverage(self):\n         \"\"\""
      },
      {
        "sha": "a0d0a3d98a86becd64c699fa8bb67bb2ae79629c",
        "filename": "qa/pull-tester/tests_config.py.in",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/pull-tester/tests_config.py.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/pull-tester/tests_config.py.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/tests_config.py.in?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -1,8 +1,9 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2013-2014 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2013-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+SRCDIR=\"@abs_top_srcdir@\"\n BUILDDIR=\"@abs_top_builddir@\"\n EXEEXT=\"@EXEEXT@\"\n \n@@ -11,5 +12,3 @@ EXEEXT=\"@EXEEXT@\"\n @BUILD_BITCOIN_UTILS_TRUE@ENABLE_UTILS=1\n @BUILD_BITCOIND_TRUE@ENABLE_BITCOIND=1\n @ENABLE_ZMQ_TRUE@ENABLE_ZMQ=1\n-\n-"
      },
      {
        "sha": "874df487777cf6d9e4f028d282782eec7536b23f",
        "filename": "qa/rpc-tests/abandonconflict.py",
        "status": "added",
        "additions": 160,
        "deletions": 0,
        "changes": 160,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/abandonconflict.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/abandonconflict.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/abandonconflict.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -0,0 +1,160 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+import urllib.parse\n+\n+class AbandonConflictTest(BitcoinTestFramework):\n+    def __init__(self):\n+        super().__init__()\n+        self.num_nodes = 2\n+        self.setup_clean_chain = False\n+\n+    def setup_network(self):\n+        self.nodes = []\n+        self.nodes.append(start_node(0, self.options.tmpdir, [\"-debug\",\"-logtimemicros\",\"-minrelaytxfee=0.00001\"]))\n+        self.nodes.append(start_node(1, self.options.tmpdir, [\"-debug\",\"-logtimemicros\"]))\n+        connect_nodes(self.nodes[0], 1)\n+\n+    def run_test(self):\n+        self.nodes[1].generate(100)\n+        sync_blocks(self.nodes)\n+        balance = self.nodes[0].getbalance()\n+        txA = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), Decimal(\"10\"))\n+        txB = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), Decimal(\"10\"))\n+        txC = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), Decimal(\"10\"))\n+        sync_mempools(self.nodes)\n+        self.nodes[1].generate(1)\n+\n+        sync_blocks(self.nodes)\n+        newbalance = self.nodes[0].getbalance()\n+        assert(balance - newbalance < Decimal(\"0.001\")) #no more than fees lost\n+        balance = newbalance\n+\n+        url = urllib.parse.urlparse(self.nodes[1].url)\n+        self.nodes[0].disconnectnode(url.hostname+\":\"+str(p2p_port(1)))\n+\n+        # Identify the 10btc outputs\n+        nA = next(i for i, vout in enumerate(self.nodes[0].getrawtransaction(txA, 1)[\"vout\"]) if vout[\"value\"] == Decimal(\"10\"))\n+        nB = next(i for i, vout in enumerate(self.nodes[0].getrawtransaction(txB, 1)[\"vout\"]) if vout[\"value\"] == Decimal(\"10\"))\n+        nC = next(i for i, vout in enumerate(self.nodes[0].getrawtransaction(txC, 1)[\"vout\"]) if vout[\"value\"] == Decimal(\"10\"))\n+\n+        inputs =[]\n+        # spend 10btc outputs from txA and txB\n+        inputs.append({\"txid\":txA, \"vout\":nA})\n+        inputs.append({\"txid\":txB, \"vout\":nB})\n+        outputs = {}\n+\n+        outputs[self.nodes[0].getnewaddress()] = Decimal(\"14.99998\")\n+        outputs[self.nodes[1].getnewaddress()] = Decimal(\"5\")\n+        signed = self.nodes[0].signrawtransaction(self.nodes[0].createrawtransaction(inputs, outputs))\n+        txAB1 = self.nodes[0].sendrawtransaction(signed[\"hex\"])\n+\n+        # Identify the 14.99998btc output\n+        nAB = next(i for i, vout in enumerate(self.nodes[0].getrawtransaction(txAB1, 1)[\"vout\"]) if vout[\"value\"] == Decimal(\"14.99998\"))\n+\n+        #Create a child tx spending AB1 and C\n+        inputs = []\n+        inputs.append({\"txid\":txAB1, \"vout\":nAB})\n+        inputs.append({\"txid\":txC, \"vout\":nC})\n+        outputs = {}\n+        outputs[self.nodes[0].getnewaddress()] = Decimal(\"24.9996\")\n+        signed2 = self.nodes[0].signrawtransaction(self.nodes[0].createrawtransaction(inputs, outputs))\n+        txABC2 = self.nodes[0].sendrawtransaction(signed2[\"hex\"])\n+\n+        # In mempool txs from self should increase balance from change\n+        newbalance = self.nodes[0].getbalance()\n+        assert_equal(newbalance, balance - Decimal(\"30\") + Decimal(\"24.9996\"))\n+        balance = newbalance\n+\n+        # Restart the node with a higher min relay fee so the parent tx is no longer in mempool\n+        # TODO: redo with eviction\n+        # Note had to make sure tx did not have AllowFree priority\n+        stop_node(self.nodes[0],0)\n+        self.nodes[0]=start_node(0, self.options.tmpdir, [\"-debug\",\"-logtimemicros\",\"-minrelaytxfee=0.0001\"])\n+\n+        # Verify txs no longer in mempool\n+        assert_equal(len(self.nodes[0].getrawmempool()), 0)\n+\n+        # Not in mempool txs from self should only reduce balance\n+        # inputs are still spent, but change not received\n+        newbalance = self.nodes[0].getbalance()\n+        assert_equal(newbalance, balance - Decimal(\"24.9996\"))\n+        # Unconfirmed received funds that are not in mempool, also shouldn't show\n+        # up in unconfirmed balance\n+        unconfbalance = self.nodes[0].getunconfirmedbalance() + self.nodes[0].getbalance()\n+        assert_equal(unconfbalance, newbalance)\n+        # Also shouldn't show up in listunspent\n+        assert(not txABC2 in [utxo[\"txid\"] for utxo in self.nodes[0].listunspent(0)])\n+        balance = newbalance\n+\n+        # Abandon original transaction and verify inputs are available again\n+        # including that the child tx was also abandoned\n+        self.nodes[0].abandontransaction(txAB1)\n+        newbalance = self.nodes[0].getbalance()\n+        assert_equal(newbalance, balance + Decimal(\"30\"))\n+        balance = newbalance\n+\n+        # Verify that even with a low min relay fee, the tx is not reaccepted from wallet on startup once abandoned\n+        stop_node(self.nodes[0],0)\n+        self.nodes[0]=start_node(0, self.options.tmpdir, [\"-debug\",\"-logtimemicros\",\"-minrelaytxfee=0.00001\"])\n+        assert_equal(len(self.nodes[0].getrawmempool()), 0)\n+        assert_equal(self.nodes[0].getbalance(), balance)\n+\n+        # But if its received again then it is unabandoned\n+        # And since now in mempool, the change is available\n+        # But its child tx remains abandoned\n+        self.nodes[0].sendrawtransaction(signed[\"hex\"])\n+        newbalance = self.nodes[0].getbalance()\n+        assert_equal(newbalance, balance - Decimal(\"20\") + Decimal(\"14.99998\"))\n+        balance = newbalance\n+\n+        # Send child tx again so its unabandoned\n+        self.nodes[0].sendrawtransaction(signed2[\"hex\"])\n+        newbalance = self.nodes[0].getbalance()\n+        assert_equal(newbalance, balance - Decimal(\"10\") - Decimal(\"14.99998\") + Decimal(\"24.9996\"))\n+        balance = newbalance\n+\n+        # Remove using high relay fee again\n+        stop_node(self.nodes[0],0)\n+        self.nodes[0]=start_node(0, self.options.tmpdir, [\"-debug\",\"-logtimemicros\",\"-minrelaytxfee=0.0001\"])\n+        assert_equal(len(self.nodes[0].getrawmempool()), 0)\n+        newbalance = self.nodes[0].getbalance()\n+        assert_equal(newbalance, balance - Decimal(\"24.9996\"))\n+        balance = newbalance\n+\n+        # Create a double spend of AB1 by spending again from only A's 10 output\n+        # Mine double spend from node 1\n+        inputs =[]\n+        inputs.append({\"txid\":txA, \"vout\":nA})\n+        outputs = {}\n+        outputs[self.nodes[1].getnewaddress()] = Decimal(\"9.9999\")\n+        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n+        signed = self.nodes[0].signrawtransaction(tx)\n+        self.nodes[1].sendrawtransaction(signed[\"hex\"])\n+        self.nodes[1].generate(1)\n+\n+        connect_nodes(self.nodes[0], 1)\n+        sync_blocks(self.nodes)\n+\n+        # Verify that B and C's 10 BTC outputs are available for spending again because AB1 is now conflicted\n+        newbalance = self.nodes[0].getbalance()\n+        assert_equal(newbalance, balance + Decimal(\"20\"))\n+        balance = newbalance\n+\n+        # There is currently a minor bug around this and so this test doesn't work.  See Issue #7315\n+        # Invalidate the block with the double spend and B's 10 BTC output should no longer be available\n+        # Don't think C's should either\n+        self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+        newbalance = self.nodes[0].getbalance()\n+        #assert_equal(newbalance, balance - Decimal(\"10\"))\n+        print(\"If balance has not declined after invalidateblock then out of mempool wallet tx which is no longer\")\n+        print(\"conflicted has not resumed causing its inputs to be seen as spent.  See Issue #7315\")\n+        print(str(balance) + \" -> \" + str(newbalance) + \" ?\")\n+\n+if __name__ == '__main__':\n+    AbandonConflictTest().main()"
      },
      {
        "sha": "e903b2fbf07b329746081dfe0c98c3c322736bbc",
        "filename": "qa/rpc-tests/bip65-cltv-p2p.py",
        "status": "modified",
        "additions": 33,
        "deletions": 34,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/bip65-cltv-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/bip65-cltv-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip65-cltv-p2p.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -1,25 +1,23 @@\n-#!/usr/bin/env python2\n-#\n-# Distributed under the MIT/X11 software license, see the accompanying\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-#\n \n from test_framework.test_framework import ComparisonTestFramework\n from test_framework.util import *\n from test_framework.mininode import CTransaction, NetworkThread\n from test_framework.blocktools import create_coinbase, create_block\n from test_framework.comptool import TestInstance, TestManager\n-from test_framework.script import CScript, OP_1NEGATE, OP_NOP2, OP_DROP\n-from binascii import hexlify, unhexlify\n-import cStringIO\n+from test_framework.script import CScript, OP_1NEGATE, OP_CHECKLOCKTIMEVERIFY, OP_DROP\n+from io import BytesIO\n import time\n \n def cltv_invalidate(tx):\n     '''Modify the signature in vin 0 of the tx to fail CLTV\n \n     Prepends -1 CLTV DROP in the scriptSig itself.\n     '''\n-    tx.vin[0].scriptSig = CScript([OP_1NEGATE, OP_NOP2, OP_DROP] +\n+    tx.vin[0].scriptSig = CScript([OP_1NEGATE, OP_CHECKLOCKTIMEVERIFY, OP_DROP] +\n                                   list(CScript(tx.vin[0].scriptSig)))\n \n '''\n@@ -39,11 +37,12 @@ def cltv_invalidate(tx):\n class BIP65Test(ComparisonTestFramework):\n \n     def __init__(self):\n+        super().__init__()\n         self.num_nodes = 1\n \n     def setup_network(self):\n         # Must set the blockversion for this test\n-        self.nodes = start_nodes(1, self.options.tmpdir,\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir,\n                                  extra_args=[['-debug', '-whitelist=127.0.0.1', '-blockversion=3']],\n                                  binary=[self.options.testbinary])\n \n@@ -60,21 +59,21 @@ def create_transaction(self, node, coinbase, to_address, amount):\n         rawtx = node.createrawtransaction(inputs, outputs)\n         signresult = node.signrawtransaction(rawtx)\n         tx = CTransaction()\n-        f = cStringIO.StringIO(unhexlify(signresult['hex']))\n+        f = BytesIO(hex_str_to_bytes(signresult['hex']))\n         tx.deserialize(f)\n         return tx\n \n     def get_tests(self):\n \n         self.coinbase_blocks = self.nodes[0].generate(2)\n         height = 3  # height of the next block to build\n-        self.tip = int (\"0x\" + self.nodes[0].getbestblockhash() + \"L\", 0)\n+        self.tip = int(\"0x\" + self.nodes[0].getbestblockhash(), 0)\n         self.nodeaddress = self.nodes[0].getnewaddress()\n-        self.last_block_time = time.time()\n+        self.last_block_time = int(time.time())\n \n-        ''' 98 more version 3 blocks '''\n+        ''' 398 more version 3 blocks '''\n         test_blocks = []\n-        for i in xrange(98):\n+        for i in range(398):\n             block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n             block.nVersion = 3\n             block.rehash()\n@@ -87,7 +86,7 @@ def get_tests(self):\n \n         ''' Mine 749 version 4 blocks '''\n         test_blocks = []\n-        for i in xrange(749):\n+        for i in range(749):\n             block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n             block.nVersion = 4\n             block.rehash()\n@@ -119,27 +118,9 @@ def get_tests(self):\n         height += 1\n         yield TestInstance([[block, True]])\n \n-        '''\n-        Check that the new CLTV rules are enforced in the 751st version 4\n-        block.\n-        '''\n-        spendtx = self.create_transaction(self.nodes[0],\n-                self.coinbase_blocks[1], self.nodeaddress, 1.0)\n-        cltv_invalidate(spendtx)\n-        spendtx.rehash()\n-\n-        block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n-        block.nVersion = 4\n-        block.vtx.append(spendtx)\n-        block.hashMerkleRoot = block.calc_merkle_root()\n-        block.rehash()\n-        block.solve()\n-        self.last_block_time += 1\n-        yield TestInstance([[block, False]])\n-\n         ''' Mine 199 new version blocks on last valid tip '''\n         test_blocks = []\n-        for i in xrange(199):\n+        for i in range(199):\n             block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n             block.nVersion = 4\n             block.rehash()\n@@ -170,6 +151,24 @@ def get_tests(self):\n         height += 1\n         yield TestInstance([[block, True]])\n \n+        '''\n+        Check that the new CLTV rules are enforced in the 951st version 4\n+        block.\n+        '''\n+        spendtx = self.create_transaction(self.nodes[0],\n+                self.coinbase_blocks[1], self.nodeaddress, 1.0)\n+        cltv_invalidate(spendtx)\n+        spendtx.rehash()\n+\n+        block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n+        block.nVersion = 4\n+        block.vtx.append(spendtx)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.rehash()\n+        block.solve()\n+        self.last_block_time += 1\n+        yield TestInstance([[block, False]])\n+\n         ''' Mine 1 old version block, should be invalid '''\n         block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n         block.nVersion = 3"
      },
      {
        "sha": "baa77b92a05bbfb69551245021bf9248bf2708c2",
        "filename": "qa/rpc-tests/bip65-cltv.py",
        "status": "modified",
        "additions": 11,
        "deletions": 8,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/bip65-cltv.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/bip65-cltv.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip65-cltv.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -9,10 +9,12 @@\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n-import os\n-import shutil\n \n class BIP65Test(BitcoinTestFramework):\n+    def __init__(self):\n+        super().__init__()\n+        self.num_nodes = 3\n+        self.setup_clean_chain = False\n \n     def setup_network(self):\n         self.nodes = []\n@@ -28,13 +30,14 @@ def run_test(self):\n         cnt = self.nodes[0].getblockcount()\n \n         # Mine some old-version blocks\n-        self.nodes[1].generate(100)\n+        self.nodes[1].generate(200)\n+        cnt += 100\n         self.sync_all()\n         if (self.nodes[0].getblockcount() != cnt + 100):\n             raise AssertionError(\"Failed to mine 100 version=3 blocks\")\n \n         # Mine 750 new-version blocks\n-        for i in xrange(15):\n+        for i in range(15):\n             self.nodes[2].generate(50)\n         self.sync_all()\n         if (self.nodes[0].getblockcount() != cnt + 850):\n@@ -46,12 +49,12 @@ def run_test(self):\n         self.nodes[2].generate(1)\n         self.sync_all()\n         if (self.nodes[0].getblockcount() != cnt + 851):\n-            raise AssertionFailure(\"Failed to mine a version=4 blocks\")\n+            raise AssertionError(\"Failed to mine a version=4 blocks\")\n \n         # TODO: check that new CHECKLOCKTIMEVERIFY rules are enforced\n \n         # Mine 198 new-version blocks\n-        for i in xrange(2):\n+        for i in range(2):\n             self.nodes[2].generate(99)\n         self.sync_all()\n         if (self.nodes[0].getblockcount() != cnt + 1049):"
      },
      {
        "sha": "55b3e2a04a03370fa549f95403a214e9a44a857e",
        "filename": "qa/rpc-tests/bip68-112-113-p2p.py",
        "status": "added",
        "additions": 539,
        "deletions": 0,
        "changes": 539,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/bip68-112-113-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/bip68-112-113-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip68-112-113-p2p.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -0,0 +1,539 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.test_framework import ComparisonTestFramework\n+from test_framework.util import *\n+from test_framework.mininode import ToHex, CTransaction, NetworkThread\n+from test_framework.blocktools import create_coinbase, create_block\n+from test_framework.comptool import TestInstance, TestManager\n+from test_framework.script import *\n+from io import BytesIO\n+import time\n+\n+'''\n+This test is meant to exercise activation of the first version bits soft fork\n+This soft fork will activate the following BIPS:\n+BIP 68  - nSequence relative lock times\n+BIP 112 - CHECKSEQUENCEVERIFY\n+BIP 113 - MedianTimePast semantics for nLockTime\n+\n+regtest lock-in with 108/144 block signalling\n+activation after a further 144 blocks\n+\n+mine 82 blocks whose coinbases will be used to generate inputs for our tests\n+mine 61 blocks to transition from DEFINED to STARTED\n+mine 144 blocks only 100 of which are signaling readiness in order to fail to change state this period\n+mine 144 blocks with 108 signaling and verify STARTED->LOCKED_IN\n+mine 140 blocks and seed block chain with the 82 inputs will use for our tests at height 572\n+mine 3 blocks and verify still at LOCKED_IN and test that enforcement has not triggered\n+mine 1 block and test that enforcement has triggered (which triggers ACTIVE)\n+Test BIP 113 is enforced\n+Mine 4 blocks so next height is 580 and test BIP 68 is enforced for time and height\n+Mine 1 block so next height is 581 and test BIP 68 now passes time but not height\n+Mine 1 block so next height is 582 and test BIP 68 now passes time and height\n+Test that BIP 112 is enforced\n+\n+Various transactions will be used to test that the BIPs rules are not enforced before the soft fork activates\n+And that after the soft fork activates transactions pass and fail as they should according to the rules.\n+For each BIP, transactions of versions 1 and 2 will be tested.\n+----------------\n+BIP 113:\n+bip113tx - modify the nLocktime variable\n+\n+BIP 68:\n+bip68txs - 16 txs with nSequence relative locktime of 10 with various bits set as per the relative_locktimes below\n+\n+BIP 112:\n+bip112txs_vary_nSequence - 16 txs with nSequence relative_locktimes of 10 evaluated against 10 OP_CSV OP_DROP\n+bip112txs_vary_nSequence_9 - 16 txs with nSequence relative_locktimes of 9 evaluated against 10 OP_CSV OP_DROP\n+bip112txs_vary_OP_CSV - 16 txs with nSequence = 10 evaluated against varying {relative_locktimes of 10} OP_CSV OP_DROP\n+bip112txs_vary_OP_CSV_9 - 16 txs with nSequence = 9 evaluated against varying {relative_locktimes of 10} OP_CSV OP_DROP\n+bip112tx_special - test negative argument to OP_CSV\n+'''\n+\n+base_relative_locktime = 10\n+seq_disable_flag = 1<<31\n+seq_random_high_bit = 1<<25\n+seq_type_flag = 1<<22\n+seq_random_low_bit = 1<<18\n+\n+# b31,b25,b22,b18 represent the 31st, 25th, 22nd and 18th bits respectively in the nSequence field\n+# relative_locktimes[b31][b25][b22][b18] is a base_relative_locktime with the indicated bits set if their indices are 1\n+relative_locktimes = []\n+for b31 in range(2):\n+    b25times = []\n+    for b25 in range(2):\n+        b22times = []\n+        for b22 in range(2):\n+            b18times = []\n+            for b18 in range(2):\n+                rlt = base_relative_locktime\n+                if (b31):\n+                    rlt = rlt | seq_disable_flag\n+                if (b25):\n+                    rlt = rlt | seq_random_high_bit\n+                if (b22):\n+                    rlt = rlt | seq_type_flag\n+                if (b18):\n+                    rlt = rlt | seq_random_low_bit\n+                b18times.append(rlt)\n+            b22times.append(b18times)\n+        b25times.append(b22times)\n+    relative_locktimes.append(b25times)\n+\n+def all_rlt_txs(txarray):\n+    txs = []\n+    for b31 in range(2):\n+        for b25 in range(2):\n+            for b22 in range(2):\n+                for b18 in range(2):\n+                    txs.append(txarray[b31][b25][b22][b18])\n+    return txs\n+\n+class BIP68_112_113Test(ComparisonTestFramework):\n+    def __init__(self):\n+        super().__init__()\n+        self.num_nodes = 1\n+\n+    def setup_network(self):\n+        # Must set the blockversion for this test\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir,\n+                                 extra_args=[['-debug', '-whitelist=127.0.0.1', '-blockversion=4']],\n+                                 binary=[self.options.testbinary])\n+\n+    def run_test(self):\n+        test = TestManager(self, self.options.tmpdir)\n+        test.add_all_connections(self.nodes)\n+        NetworkThread().start() # Start up network handling in another thread\n+        test.run()\n+\n+    def send_generic_input_tx(self, node, coinbases):\n+        amount = Decimal(\"49.99\")\n+        return node.sendrawtransaction(ToHex(self.sign_transaction(node, self.create_transaction(node, node.getblock(coinbases.pop())['tx'][0], self.nodeaddress, amount))))\n+\n+    def create_transaction(self, node, txid, to_address, amount):\n+        inputs = [{ \"txid\" : txid, \"vout\" : 0}]\n+        outputs = { to_address : amount }\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+        tx = CTransaction()\n+        f = BytesIO(hex_str_to_bytes(rawtx))\n+        tx.deserialize(f)\n+        return tx\n+\n+    def sign_transaction(self, node, unsignedtx):\n+        rawtx = ToHex(unsignedtx)\n+        signresult = node.signrawtransaction(rawtx)\n+        tx = CTransaction()\n+        f = BytesIO(hex_str_to_bytes(signresult['hex']))\n+        tx.deserialize(f)\n+        return tx\n+\n+    def generate_blocks(self, number, version, test_blocks = []):\n+        for i in range(number):\n+            block = self.create_test_block([], version)\n+            test_blocks.append([block, True])\n+            self.last_block_time += 600\n+            self.tip = block.sha256\n+            self.tipheight += 1\n+        return test_blocks\n+\n+    def create_test_block(self, txs, version = 536870912):\n+        block = create_block(self.tip, create_coinbase(self.tipheight + 1), self.last_block_time + 600)\n+        block.nVersion = version\n+        block.vtx.extend(txs)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.rehash()\n+        block.solve()\n+        return block\n+\n+    def create_bip68txs(self, bip68inputs, txversion, locktime_delta = 0):\n+        txs = []\n+        assert(len(bip68inputs) >= 16)\n+        i = 0\n+        for b31 in range(2):\n+            b25txs = []\n+            for b25 in range(2):\n+                b22txs = []\n+                for b22 in range(2):\n+                    b18txs = []\n+                    for b18 in range(2):\n+                        tx =  self.create_transaction(self.nodes[0], bip68inputs[i], self.nodeaddress, Decimal(\"49.98\"))\n+                        i += 1\n+                        tx.nVersion = txversion\n+                        tx.vin[0].nSequence = relative_locktimes[b31][b25][b22][b18] + locktime_delta\n+                        b18txs.append(self.sign_transaction(self.nodes[0], tx))\n+                    b22txs.append(b18txs)\n+                b25txs.append(b22txs)\n+            txs.append(b25txs)\n+        return txs\n+\n+    def create_bip112special(self, input, txversion):\n+        tx = self.create_transaction(self.nodes[0], input, self.nodeaddress, Decimal(\"49.98\"))\n+        tx.nVersion = txversion\n+        signtx = self.sign_transaction(self.nodes[0], tx)\n+        signtx.vin[0].scriptSig = CScript([-1, OP_CHECKSEQUENCEVERIFY, OP_DROP] + list(CScript(signtx.vin[0].scriptSig)))\n+        return signtx\n+\n+    def create_bip112txs(self, bip112inputs, varyOP_CSV, txversion, locktime_delta = 0):\n+        txs = []\n+        assert(len(bip112inputs) >= 16)\n+        i = 0\n+        for b31 in range(2):\n+            b25txs = []\n+            for b25 in range(2):\n+                b22txs = []\n+                for b22 in range(2):\n+                    b18txs = []\n+                    for b18 in range(2):\n+                        tx =  self.create_transaction(self.nodes[0], bip112inputs[i], self.nodeaddress, Decimal(\"49.98\"))\n+                        i += 1\n+                        if (varyOP_CSV): # if varying OP_CSV, nSequence is fixed\n+                            tx.vin[0].nSequence = base_relative_locktime + locktime_delta\n+                        else: # vary nSequence instead, OP_CSV is fixed\n+                            tx.vin[0].nSequence = relative_locktimes[b31][b25][b22][b18] + locktime_delta\n+                        tx.nVersion = txversion\n+                        signtx = self.sign_transaction(self.nodes[0], tx)\n+                        if (varyOP_CSV):\n+                            signtx.vin[0].scriptSig = CScript([relative_locktimes[b31][b25][b22][b18], OP_CHECKSEQUENCEVERIFY, OP_DROP] + list(CScript(signtx.vin[0].scriptSig)))\n+                        else:\n+                            signtx.vin[0].scriptSig = CScript([base_relative_locktime, OP_CHECKSEQUENCEVERIFY, OP_DROP] + list(CScript(signtx.vin[0].scriptSig)))\n+                        b18txs.append(signtx)\n+                    b22txs.append(b18txs)\n+                b25txs.append(b22txs)\n+            txs.append(b25txs)\n+        return txs\n+\n+    def get_tests(self):\n+        long_past_time = int(time.time()) - 600 * 1000 # enough to build up to 1000 blocks 10 minutes apart without worrying about getting into the future\n+        self.nodes[0].setmocktime(long_past_time - 100) # enough so that the generated blocks will still all be before long_past_time\n+        self.coinbase_blocks = self.nodes[0].generate(1 + 16 + 2*32 + 1) # 82 blocks generated for inputs\n+        self.nodes[0].setmocktime(0) # set time back to present so yielded blocks aren't in the future as we advance last_block_time\n+        self.tipheight = 82 # height of the next block to build\n+        self.last_block_time = long_past_time\n+        self.tip = int(\"0x\" + self.nodes[0].getbestblockhash(), 0)\n+        self.nodeaddress = self.nodes[0].getnewaddress()\n+\n+        assert_equal(get_bip9_status(self.nodes[0], 'csv')['status'], 'defined')\n+        test_blocks = self.generate_blocks(61, 4)\n+        yield TestInstance(test_blocks, sync_every_block=False) # 1\n+        # Advanced from DEFINED to STARTED, height = 143\n+        assert_equal(get_bip9_status(self.nodes[0], 'csv')['status'], 'started')\n+\n+        # Fail to achieve LOCKED_IN 100 out of 144 signal bit 0\n+        # using a variety of bits to simulate multiple parallel softforks\n+        test_blocks = self.generate_blocks(50, 536870913) # 0x20000001 (signalling ready)\n+        test_blocks = self.generate_blocks(20, 4, test_blocks) # 0x00000004 (signalling not)\n+        test_blocks = self.generate_blocks(50, 536871169, test_blocks) # 0x20000101 (signalling ready)\n+        test_blocks = self.generate_blocks(24, 536936448, test_blocks) # 0x20010000 (signalling not)\n+        yield TestInstance(test_blocks, sync_every_block=False) # 2\n+        # Failed to advance past STARTED, height = 287\n+        assert_equal(get_bip9_status(self.nodes[0], 'csv')['status'], 'started')\n+\n+        # 108 out of 144 signal bit 0 to achieve lock-in\n+        # using a variety of bits to simulate multiple parallel softforks\n+        test_blocks = self.generate_blocks(58, 536870913) # 0x20000001 (signalling ready)\n+        test_blocks = self.generate_blocks(26, 4, test_blocks) # 0x00000004 (signalling not)\n+        test_blocks = self.generate_blocks(50, 536871169, test_blocks) # 0x20000101 (signalling ready)\n+        test_blocks = self.generate_blocks(10, 536936448, test_blocks) # 0x20010000 (signalling not)\n+        yield TestInstance(test_blocks, sync_every_block=False) # 3\n+        # Advanced from STARTED to LOCKED_IN, height = 431\n+        assert_equal(get_bip9_status(self.nodes[0], 'csv')['status'], 'locked_in')\n+\n+        # 140 more version 4 blocks\n+        test_blocks = self.generate_blocks(140, 4)\n+        yield TestInstance(test_blocks, sync_every_block=False) # 4\n+\n+        ### Inputs at height = 572\n+        # Put inputs for all tests in the chain at height 572 (tip now = 571) (time increases by 600s per block)\n+        # Note we reuse inputs for v1 and v2 txs so must test these separately\n+        # 16 normal inputs\n+        bip68inputs = []\n+        for i in range(16):\n+            bip68inputs.append(self.send_generic_input_tx(self.nodes[0], self.coinbase_blocks))\n+        # 2 sets of 16 inputs with 10 OP_CSV OP_DROP (actually will be prepended to spending scriptSig)\n+        bip112basicinputs = []\n+        for j in range(2):\n+            inputs = []\n+            for i in range(16):\n+                inputs.append(self.send_generic_input_tx(self.nodes[0], self.coinbase_blocks))\n+            bip112basicinputs.append(inputs)\n+        # 2 sets of 16 varied inputs with (relative_lock_time) OP_CSV OP_DROP (actually will be prepended to spending scriptSig)\n+        bip112diverseinputs = []\n+        for j in range(2):\n+            inputs = []\n+            for i in range(16):\n+                inputs.append(self.send_generic_input_tx(self.nodes[0], self.coinbase_blocks))\n+            bip112diverseinputs.append(inputs)\n+        # 1 special input with -1 OP_CSV OP_DROP (actually will be prepended to spending scriptSig)\n+        bip112specialinput = self.send_generic_input_tx(self.nodes[0], self.coinbase_blocks)\n+        # 1 normal input\n+        bip113input = self.send_generic_input_tx(self.nodes[0], self.coinbase_blocks)\n+\n+        self.nodes[0].setmocktime(self.last_block_time + 600)\n+        inputblockhash = self.nodes[0].generate(1)[0] # 1 block generated for inputs to be in chain at height 572\n+        self.nodes[0].setmocktime(0)\n+        self.tip = int(\"0x\" + inputblockhash, 0)\n+        self.tipheight += 1\n+        self.last_block_time += 600\n+        assert_equal(len(self.nodes[0].getblock(inputblockhash,True)[\"tx\"]), 82+1)\n+\n+        # 2 more version 4 blocks\n+        test_blocks = self.generate_blocks(2, 4)\n+        yield TestInstance(test_blocks, sync_every_block=False) # 5\n+        # Not yet advanced to ACTIVE, height = 574 (will activate for block 576, not 575)\n+        assert_equal(get_bip9_status(self.nodes[0], 'csv')['status'], 'locked_in')\n+\n+        # Test both version 1 and version 2 transactions for all tests\n+        # BIP113 test transaction will be modified before each use to put in appropriate block time\n+        bip113tx_v1 = self.create_transaction(self.nodes[0], bip113input, self.nodeaddress, Decimal(\"49.98\"))\n+        bip113tx_v1.vin[0].nSequence = 0xFFFFFFFE\n+        bip113tx_v2 = self.create_transaction(self.nodes[0], bip113input, self.nodeaddress, Decimal(\"49.98\"))\n+        bip113tx_v2.vin[0].nSequence = 0xFFFFFFFE\n+        bip113tx_v2.nVersion = 2\n+\n+        # For BIP68 test all 16 relative sequence locktimes\n+        bip68txs_v1 = self.create_bip68txs(bip68inputs, 1)\n+        bip68txs_v2 = self.create_bip68txs(bip68inputs, 2)\n+\n+        # For BIP112 test:\n+        # 16 relative sequence locktimes of 10 against 10 OP_CSV OP_DROP inputs\n+        bip112txs_vary_nSequence_v1 = self.create_bip112txs(bip112basicinputs[0], False, 1)\n+        bip112txs_vary_nSequence_v2 = self.create_bip112txs(bip112basicinputs[0], False, 2)\n+        # 16 relative sequence locktimes of 9 against 10 OP_CSV OP_DROP inputs\n+        bip112txs_vary_nSequence_9_v1 = self.create_bip112txs(bip112basicinputs[1], False, 1, -1)\n+        bip112txs_vary_nSequence_9_v2 = self.create_bip112txs(bip112basicinputs[1], False, 2, -1)\n+        # sequence lock time of 10 against 16 (relative_lock_time) OP_CSV OP_DROP inputs\n+        bip112txs_vary_OP_CSV_v1 = self.create_bip112txs(bip112diverseinputs[0], True, 1)\n+        bip112txs_vary_OP_CSV_v2 = self.create_bip112txs(bip112diverseinputs[0], True, 2)\n+        # sequence lock time of 9 against 16 (relative_lock_time) OP_CSV OP_DROP inputs\n+        bip112txs_vary_OP_CSV_9_v1 = self.create_bip112txs(bip112diverseinputs[1], True, 1, -1)\n+        bip112txs_vary_OP_CSV_9_v2 = self.create_bip112txs(bip112diverseinputs[1], True, 2, -1)\n+        # -1 OP_CSV OP_DROP input\n+        bip112tx_special_v1 = self.create_bip112special(bip112specialinput, 1)\n+        bip112tx_special_v2 = self.create_bip112special(bip112specialinput, 2)\n+\n+\n+        ### TESTING ###\n+        ##################################\n+        ### Before Soft Forks Activate ###\n+        ##################################\n+        # All txs should pass\n+        ### Version 1 txs ###\n+        success_txs = []\n+        # add BIP113 tx and -1 CSV tx\n+        bip113tx_v1.nLockTime = self.last_block_time - 600 * 5 # = MTP of prior block (not <) but < time put on current block\n+        bip113signed1 = self.sign_transaction(self.nodes[0], bip113tx_v1)\n+        success_txs.append(bip113signed1)\n+        success_txs.append(bip112tx_special_v1)\n+        # add BIP 68 txs\n+        success_txs.extend(all_rlt_txs(bip68txs_v1))\n+        # add BIP 112 with seq=10 txs\n+        success_txs.extend(all_rlt_txs(bip112txs_vary_nSequence_v1))\n+        success_txs.extend(all_rlt_txs(bip112txs_vary_OP_CSV_v1))\n+        # try BIP 112 with seq=9 txs\n+        success_txs.extend(all_rlt_txs(bip112txs_vary_nSequence_9_v1))\n+        success_txs.extend(all_rlt_txs(bip112txs_vary_OP_CSV_9_v1))\n+        yield TestInstance([[self.create_test_block(success_txs), True]]) # 6\n+        self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+\n+        ### Version 2 txs ###\n+        success_txs = []\n+        # add BIP113 tx and -1 CSV tx\n+        bip113tx_v2.nLockTime = self.last_block_time - 600 * 5 # = MTP of prior block (not <) but < time put on current block\n+        bip113signed2 = self.sign_transaction(self.nodes[0], bip113tx_v2)\n+        success_txs.append(bip113signed2)\n+        success_txs.append(bip112tx_special_v2)\n+        # add BIP 68 txs\n+        success_txs.extend(all_rlt_txs(bip68txs_v2))\n+        # add BIP 112 with seq=10 txs\n+        success_txs.extend(all_rlt_txs(bip112txs_vary_nSequence_v2))\n+        success_txs.extend(all_rlt_txs(bip112txs_vary_OP_CSV_v2))\n+        # try BIP 112 with seq=9 txs\n+        success_txs.extend(all_rlt_txs(bip112txs_vary_nSequence_9_v2))\n+        success_txs.extend(all_rlt_txs(bip112txs_vary_OP_CSV_9_v2))\n+        yield TestInstance([[self.create_test_block(success_txs), True]]) # 7\n+        self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+\n+\n+        # 1 more version 4 block to get us to height 575 so the fork should now be active for the next block\n+        test_blocks = self.generate_blocks(1, 4)\n+        yield TestInstance(test_blocks, sync_every_block=False) # 8\n+        assert_equal(get_bip9_status(self.nodes[0], 'csv')['status'], 'active')\n+\n+\n+        #################################\n+        ### After Soft Forks Activate ###\n+        #################################\n+        ### BIP 113 ###\n+        # BIP 113 tests should now fail regardless of version number if nLockTime isn't satisfied by new rules\n+        bip113tx_v1.nLockTime = self.last_block_time - 600 * 5 # = MTP of prior block (not <) but < time put on current block\n+        bip113signed1 = self.sign_transaction(self.nodes[0], bip113tx_v1)\n+        bip113tx_v2.nLockTime = self.last_block_time - 600 * 5 # = MTP of prior block (not <) but < time put on current block\n+        bip113signed2 = self.sign_transaction(self.nodes[0], bip113tx_v2)\n+        for bip113tx in [bip113signed1, bip113signed2]:\n+            yield TestInstance([[self.create_test_block([bip113tx]), False]]) # 9,10\n+        # BIP 113 tests should now pass if the locktime is < MTP\n+        bip113tx_v1.nLockTime = self.last_block_time - 600 * 5 - 1 # < MTP of prior block\n+        bip113signed1 = self.sign_transaction(self.nodes[0], bip113tx_v1)\n+        bip113tx_v2.nLockTime = self.last_block_time - 600 * 5 - 1 # < MTP of prior block\n+        bip113signed2 = self.sign_transaction(self.nodes[0], bip113tx_v2)\n+        for bip113tx in [bip113signed1, bip113signed2]:\n+            yield TestInstance([[self.create_test_block([bip113tx]), True]]) # 11,12\n+            self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+\n+        # Next block height = 580 after 4 blocks of random version\n+        test_blocks = self.generate_blocks(4, 1234)\n+        yield TestInstance(test_blocks, sync_every_block=False) # 13\n+\n+        ### BIP 68 ###\n+        ### Version 1 txs ###\n+        # All still pass\n+        success_txs = []\n+        success_txs.extend(all_rlt_txs(bip68txs_v1))\n+        yield TestInstance([[self.create_test_block(success_txs), True]]) # 14\n+        self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+\n+        ### Version 2 txs ###\n+        bip68success_txs = []\n+        # All txs with SEQUENCE_LOCKTIME_DISABLE_FLAG set pass\n+        for b25 in range(2):\n+            for b22 in range(2):\n+                for b18 in range(2):\n+                    bip68success_txs.append(bip68txs_v2[1][b25][b22][b18])\n+        yield TestInstance([[self.create_test_block(bip68success_txs), True]]) # 15\n+        self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+        # All txs without flag fail as we are at delta height = 8 < 10 and delta time = 8 * 600 < 10 * 512\n+        bip68timetxs = []\n+        for b25 in range(2):\n+            for b18 in range(2):\n+                bip68timetxs.append(bip68txs_v2[0][b25][1][b18])\n+        for tx in bip68timetxs:\n+            yield TestInstance([[self.create_test_block([tx]), False]]) # 16 - 19\n+        bip68heighttxs = []\n+        for b25 in range(2):\n+            for b18 in range(2):\n+                bip68heighttxs.append(bip68txs_v2[0][b25][0][b18])\n+        for tx in bip68heighttxs:\n+            yield TestInstance([[self.create_test_block([tx]), False]]) # 20 - 23\n+\n+        # Advance one block to 581\n+        test_blocks = self.generate_blocks(1, 1234)\n+        yield TestInstance(test_blocks, sync_every_block=False) # 24\n+\n+        # Height txs should fail and time txs should now pass 9 * 600 > 10 * 512\n+        bip68success_txs.extend(bip68timetxs)\n+        yield TestInstance([[self.create_test_block(bip68success_txs), True]]) # 25\n+        self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+        for tx in bip68heighttxs:\n+            yield TestInstance([[self.create_test_block([tx]), False]]) # 26 - 29\n+\n+        # Advance one block to 582\n+        test_blocks = self.generate_blocks(1, 1234)\n+        yield TestInstance(test_blocks, sync_every_block=False) # 30\n+\n+        # All BIP 68 txs should pass\n+        bip68success_txs.extend(bip68heighttxs)\n+        yield TestInstance([[self.create_test_block(bip68success_txs), True]]) # 31\n+        self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+\n+\n+        ### BIP 112 ###\n+        ### Version 1 txs ###\n+        # -1 OP_CSV tx should fail\n+        yield TestInstance([[self.create_test_block([bip112tx_special_v1]), False]]) #32\n+        # If SEQUENCE_LOCKTIME_DISABLE_FLAG is set in argument to OP_CSV, version 1 txs should still pass\n+        success_txs = []\n+        for b25 in range(2):\n+            for b22 in range(2):\n+                for b18 in range(2):\n+                    success_txs.append(bip112txs_vary_OP_CSV_v1[1][b25][b22][b18])\n+                    success_txs.append(bip112txs_vary_OP_CSV_9_v1[1][b25][b22][b18])\n+        yield TestInstance([[self.create_test_block(success_txs), True]]) # 33\n+        self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+\n+        # If SEQUENCE_LOCKTIME_DISABLE_FLAG is unset in argument to OP_CSV, version 1 txs should now fail\n+        fail_txs = []\n+        fail_txs.extend(all_rlt_txs(bip112txs_vary_nSequence_v1))\n+        fail_txs.extend(all_rlt_txs(bip112txs_vary_nSequence_9_v1))\n+        for b25 in range(2):\n+            for b22 in range(2):\n+                for b18 in range(2):\n+                    fail_txs.append(bip112txs_vary_OP_CSV_v1[0][b25][b22][b18])\n+                    fail_txs.append(bip112txs_vary_OP_CSV_9_v1[0][b25][b22][b18])\n+\n+        for tx in fail_txs:\n+            yield TestInstance([[self.create_test_block([tx]), False]]) # 34 - 81\n+\n+        ### Version 2 txs ###\n+        # -1 OP_CSV tx should fail\n+        yield TestInstance([[self.create_test_block([bip112tx_special_v2]), False]]) #82\n+\n+        # If SEQUENCE_LOCKTIME_DISABLE_FLAG is set in argument to OP_CSV, version 2 txs should pass (all sequence locks are met)\n+        success_txs = []\n+        for b25 in range(2):\n+            for b22 in range(2):\n+                for b18 in range(2):\n+                    success_txs.append(bip112txs_vary_OP_CSV_v2[1][b25][b22][b18]) # 8/16 of vary_OP_CSV\n+                    success_txs.append(bip112txs_vary_OP_CSV_9_v2[1][b25][b22][b18]) # 8/16 of vary_OP_CSV_9\n+\n+        yield TestInstance([[self.create_test_block(success_txs), True]]) # 83\n+        self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+\n+        ## SEQUENCE_LOCKTIME_DISABLE_FLAG is unset in argument to OP_CSV for all remaining txs ##\n+        # All txs with nSequence 9 should fail either due to earlier mismatch or failing the CSV check\n+        fail_txs = []\n+        fail_txs.extend(all_rlt_txs(bip112txs_vary_nSequence_9_v2)) # 16/16 of vary_nSequence_9\n+        for b25 in range(2):\n+            for b22 in range(2):\n+                for b18 in range(2):\n+                    fail_txs.append(bip112txs_vary_OP_CSV_9_v2[0][b25][b22][b18]) # 16/16 of vary_OP_CSV_9\n+\n+        for tx in fail_txs:\n+            yield TestInstance([[self.create_test_block([tx]), False]]) # 84 - 107\n+\n+        # If SEQUENCE_LOCKTIME_DISABLE_FLAG is set in nSequence, tx should fail\n+        fail_txs = []\n+        for b25 in range(2):\n+            for b22 in range(2):\n+                for b18 in range(2):\n+                    fail_txs.append(bip112txs_vary_nSequence_v2[1][b25][b22][b18]) # 8/16 of vary_nSequence\n+        for tx in fail_txs:\n+            yield TestInstance([[self.create_test_block([tx]), False]]) # 108-115\n+\n+        # If sequencelock types mismatch, tx should fail\n+        fail_txs = []\n+        for b25 in range(2):\n+            for b18 in range(2):\n+                fail_txs.append(bip112txs_vary_nSequence_v2[0][b25][1][b18]) # 12/16 of vary_nSequence\n+                fail_txs.append(bip112txs_vary_OP_CSV_v2[0][b25][1][b18]) # 12/16 of vary_OP_CSV\n+        for tx in fail_txs:\n+            yield TestInstance([[self.create_test_block([tx]), False]]) # 116-123\n+\n+        # Remaining txs should pass, just test masking works properly\n+        success_txs = []\n+        for b25 in range(2):\n+            for b18 in range(2):\n+                success_txs.append(bip112txs_vary_nSequence_v2[0][b25][0][b18]) # 16/16 of vary_nSequence\n+                success_txs.append(bip112txs_vary_OP_CSV_v2[0][b25][0][b18]) # 16/16 of vary_OP_CSV\n+        yield TestInstance([[self.create_test_block(success_txs), True]]) # 124\n+        self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+\n+        # Additional test, of checking that comparison of two time types works properly\n+        time_txs = []\n+        for b25 in range(2):\n+            for b18 in range(2):\n+                tx = bip112txs_vary_OP_CSV_v2[0][b25][1][b18]\n+                tx.vin[0].nSequence = base_relative_locktime | seq_type_flag\n+                signtx = self.sign_transaction(self.nodes[0], tx)\n+                time_txs.append(signtx)\n+        yield TestInstance([[self.create_test_block(time_txs), True]]) # 125\n+        self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+\n+        ### Missing aspects of test\n+        ##  Testing empty stack fails\n+\n+\n+if __name__ == '__main__':\n+    BIP68_112_113Test().main()"
      },
      {
        "sha": "a12bf10ebd75895e31e369572517150a002f6f97",
        "filename": "qa/rpc-tests/bip68-sequence.py",
        "status": "added",
        "additions": 428,
        "deletions": 0,
        "changes": 428,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/bip68-sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/bip68-sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip68-sequence.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -0,0 +1,428 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# Test BIP68 implementation\n+#\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+from test_framework.script import *\n+from test_framework.mininode import *\n+from test_framework.blocktools import *\n+\n+SEQUENCE_LOCKTIME_DISABLE_FLAG = (1<<31)\n+SEQUENCE_LOCKTIME_TYPE_FLAG = (1<<22) # this means use time (0 means height)\n+SEQUENCE_LOCKTIME_GRANULARITY = 9 # this is a bit-shift\n+SEQUENCE_LOCKTIME_MASK = 0x0000ffff\n+\n+# RPC error for non-BIP68 final transactions\n+NOT_FINAL_ERROR = \"64: non-BIP68-final\"\n+\n+class BIP68Test(BitcoinTestFramework):\n+    def __init__(self):\n+        super().__init__()\n+        self.num_nodes = 2\n+        self.setup_clean_chain = False\n+\n+    def setup_network(self):\n+        self.nodes = []\n+        self.nodes.append(start_node(0, self.options.tmpdir, [\"-debug\", \"-blockprioritysize=0\"]))\n+        self.nodes.append(start_node(1, self.options.tmpdir, [\"-debug\", \"-blockprioritysize=0\", \"-acceptnonstdtxn=0\"]))\n+        self.is_network_split = False\n+        self.relayfee = self.nodes[0].getnetworkinfo()[\"relayfee\"]\n+        connect_nodes(self.nodes[0], 1)\n+\n+    def run_test(self):\n+        # Generate some coins\n+        self.nodes[0].generate(110)\n+\n+        print(\"Running test disable flag\")\n+        self.test_disable_flag()\n+\n+        print(\"Running test sequence-lock-confirmed-inputs\")\n+        self.test_sequence_lock_confirmed_inputs()\n+\n+        print(\"Running test sequence-lock-unconfirmed-inputs\")\n+        self.test_sequence_lock_unconfirmed_inputs()\n+\n+        print(\"Running test BIP68 not consensus before versionbits activation\")\n+        self.test_bip68_not_consensus()\n+\n+        print(\"Verifying nVersion=2 transactions aren't standard\")\n+        self.test_version2_relay(before_activation=True)\n+\n+        print(\"Activating BIP68 (and 112/113)\")\n+        self.activateCSV()\n+\n+        print(\"Verifying nVersion=2 transactions are now standard\")\n+        self.test_version2_relay(before_activation=False)\n+\n+        print(\"Passed\\n\")\n+\n+    # Test that BIP68 is not in effect if tx version is 1, or if\n+    # the first sequence bit is set.\n+    def test_disable_flag(self):\n+        # Create some unconfirmed inputs\n+        new_addr = self.nodes[0].getnewaddress()\n+        self.nodes[0].sendtoaddress(new_addr, 2) # send 2 BTC\n+\n+        utxos = self.nodes[0].listunspent(0, 0)\n+        assert(len(utxos) > 0)\n+\n+        utxo = utxos[0]\n+\n+        tx1 = CTransaction()\n+        value = int(satoshi_round(utxo[\"amount\"] - self.relayfee)*COIN)\n+\n+        # Check that the disable flag disables relative locktime.\n+        # If sequence locks were used, this would require 1 block for the\n+        # input to mature.\n+        sequence_value = SEQUENCE_LOCKTIME_DISABLE_FLAG | 1\n+        tx1.vin = [CTxIn(COutPoint(int(utxo[\"txid\"], 16), utxo[\"vout\"]), nSequence=sequence_value)] \n+        tx1.vout = [CTxOut(value, CScript([b'a']))]\n+\n+        tx1_signed = self.nodes[0].signrawtransaction(ToHex(tx1))[\"hex\"]\n+        tx1_id = self.nodes[0].sendrawtransaction(tx1_signed)\n+        tx1_id = int(tx1_id, 16)\n+\n+        # This transaction will enable sequence-locks, so this transaction should\n+        # fail\n+        tx2 = CTransaction()\n+        tx2.nVersion = 2\n+        sequence_value = sequence_value & 0x7fffffff\n+        tx2.vin = [CTxIn(COutPoint(tx1_id, 0), nSequence=sequence_value)]\n+        tx2.vout = [CTxOut(int(value-self.relayfee*COIN), CScript([b'a']))]\n+        tx2.rehash()\n+\n+        try:\n+            self.nodes[0].sendrawtransaction(ToHex(tx2))\n+        except JSONRPCException as exp:\n+            assert_equal(exp.error[\"message\"], NOT_FINAL_ERROR)\n+        else:\n+            assert(False)\n+\n+        # Setting the version back down to 1 should disable the sequence lock,\n+        # so this should be accepted.\n+        tx2.nVersion = 1\n+\n+        self.nodes[0].sendrawtransaction(ToHex(tx2))\n+\n+    # Calculate the median time past of a prior block (\"confirmations\" before\n+    # the current tip).\n+    def get_median_time_past(self, confirmations):\n+        block_hash = self.nodes[0].getblockhash(self.nodes[0].getblockcount()-confirmations)\n+        return self.nodes[0].getblockheader(block_hash)[\"mediantime\"]\n+\n+    # Test that sequence locks are respected for transactions spending confirmed inputs.\n+    def test_sequence_lock_confirmed_inputs(self):\n+        # Create lots of confirmed utxos, and use them to generate lots of random\n+        # transactions.\n+        max_outputs = 50\n+        addresses = []\n+        while len(addresses) < max_outputs:\n+            addresses.append(self.nodes[0].getnewaddress())\n+        while len(self.nodes[0].listunspent()) < 200:\n+            import random\n+            random.shuffle(addresses)\n+            num_outputs = random.randint(1, max_outputs)\n+            outputs = {}\n+            for i in range(num_outputs):\n+                outputs[addresses[i]] = random.randint(1, 20)*0.01\n+            self.nodes[0].sendmany(\"\", outputs)\n+            self.nodes[0].generate(1)\n+\n+        utxos = self.nodes[0].listunspent()\n+\n+        # Try creating a lot of random transactions.\n+        # Each time, choose a random number of inputs, and randomly set\n+        # some of those inputs to be sequence locked (and randomly choose\n+        # between height/time locking). Small random chance of making the locks\n+        # all pass.\n+        for i in range(400):\n+            # Randomly choose up to 10 inputs\n+            num_inputs = random.randint(1, 10)\n+            random.shuffle(utxos)\n+\n+            # Track whether any sequence locks used should fail\n+            should_pass = True\n+            \n+            # Track whether this transaction was built with sequence locks\n+            using_sequence_locks = False\n+\n+            tx = CTransaction()\n+            tx.nVersion = 2\n+            value = 0\n+            for j in range(num_inputs):\n+                sequence_value = 0xfffffffe # this disables sequence locks\n+\n+                # 50% chance we enable sequence locks\n+                if random.randint(0,1):\n+                    using_sequence_locks = True\n+\n+                    # 10% of the time, make the input sequence value pass\n+                    input_will_pass = (random.randint(1,10) == 1)\n+                    sequence_value = utxos[j][\"confirmations\"]\n+                    if not input_will_pass:\n+                        sequence_value += 1\n+                        should_pass = False\n+\n+                    # Figure out what the median-time-past was for the confirmed input\n+                    # Note that if an input has N confirmations, we're going back N blocks\n+                    # from the tip so that we're looking up MTP of the block\n+                    # PRIOR to the one the input appears in, as per the BIP68 spec.\n+                    orig_time = self.get_median_time_past(utxos[j][\"confirmations\"])\n+                    cur_time = self.get_median_time_past(0) # MTP of the tip\n+\n+                    # can only timelock this input if it's not too old -- otherwise use height\n+                    can_time_lock = True\n+                    if ((cur_time - orig_time) >> SEQUENCE_LOCKTIME_GRANULARITY) >= SEQUENCE_LOCKTIME_MASK:\n+                        can_time_lock = False\n+\n+                    # if time-lockable, then 50% chance we make this a time lock\n+                    if random.randint(0,1) and can_time_lock:\n+                        # Find first time-lock value that fails, or latest one that succeeds\n+                        time_delta = sequence_value << SEQUENCE_LOCKTIME_GRANULARITY\n+                        if input_will_pass and time_delta > cur_time - orig_time:\n+                            sequence_value = ((cur_time - orig_time) >> SEQUENCE_LOCKTIME_GRANULARITY)\n+                        elif (not input_will_pass and time_delta <= cur_time - orig_time):\n+                            sequence_value = ((cur_time - orig_time) >> SEQUENCE_LOCKTIME_GRANULARITY)+1\n+                        sequence_value |= SEQUENCE_LOCKTIME_TYPE_FLAG\n+                tx.vin.append(CTxIn(COutPoint(int(utxos[j][\"txid\"], 16), utxos[j][\"vout\"]), nSequence=sequence_value))\n+                value += utxos[j][\"amount\"]*COIN\n+            # Overestimate the size of the tx - signatures should be less than 120 bytes, and leave 50 for the output\n+            tx_size = len(ToHex(tx))//2 + 120*num_inputs + 50\n+            tx.vout.append(CTxOut(int(value-self.relayfee*tx_size*COIN/1000), CScript([b'a'])))\n+            rawtx = self.nodes[0].signrawtransaction(ToHex(tx))[\"hex\"]\n+\n+            try:\n+                self.nodes[0].sendrawtransaction(rawtx)\n+            except JSONRPCException as exp:\n+                assert(not should_pass and using_sequence_locks)\n+                assert_equal(exp.error[\"message\"], NOT_FINAL_ERROR)\n+            else:\n+                assert(should_pass or not using_sequence_locks)\n+                # Recalculate utxos if we successfully sent the transaction\n+                utxos = self.nodes[0].listunspent()\n+\n+    # Test that sequence locks on unconfirmed inputs must have nSequence\n+    # height or time of 0 to be accepted.\n+    # Then test that BIP68-invalid transactions are removed from the mempool\n+    # after a reorg.\n+    def test_sequence_lock_unconfirmed_inputs(self):\n+        # Store height so we can easily reset the chain at the end of the test\n+        cur_height = self.nodes[0].getblockcount()\n+\n+        # Create a mempool tx.\n+        txid = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 2)\n+        tx1 = FromHex(CTransaction(), self.nodes[0].getrawtransaction(txid))\n+        tx1.rehash()\n+\n+        # Anyone-can-spend mempool tx.\n+        # Sequence lock of 0 should pass.\n+        tx2 = CTransaction()\n+        tx2.nVersion = 2\n+        tx2.vin = [CTxIn(COutPoint(tx1.sha256, 0), nSequence=0)]\n+        tx2.vout = [CTxOut(int(tx1.vout[0].nValue - self.relayfee*COIN), CScript([b'a']))]\n+        tx2_raw = self.nodes[0].signrawtransaction(ToHex(tx2))[\"hex\"]\n+        tx2 = FromHex(tx2, tx2_raw)\n+        tx2.rehash()\n+\n+        self.nodes[0].sendrawtransaction(tx2_raw)\n+\n+        # Create a spend of the 0th output of orig_tx with a sequence lock\n+        # of 1, and test what happens when submitting.\n+        # orig_tx.vout[0] must be an anyone-can-spend output\n+        def test_nonzero_locks(orig_tx, node, relayfee, use_height_lock):\n+            sequence_value = 1\n+            if not use_height_lock:\n+                sequence_value |= SEQUENCE_LOCKTIME_TYPE_FLAG\n+\n+            tx = CTransaction()\n+            tx.nVersion = 2\n+            tx.vin = [CTxIn(COutPoint(orig_tx.sha256, 0), nSequence=sequence_value)]\n+            tx.vout = [CTxOut(int(orig_tx.vout[0].nValue - relayfee*COIN), CScript([b'a']))]\n+            tx.rehash()\n+\n+            try:\n+                node.sendrawtransaction(ToHex(tx))\n+            except JSONRPCException as exp:\n+                assert_equal(exp.error[\"message\"], NOT_FINAL_ERROR)\n+                assert(orig_tx.hash in node.getrawmempool())\n+            else:\n+                # orig_tx must not be in mempool\n+                assert(orig_tx.hash not in node.getrawmempool())\n+            return tx\n+\n+        test_nonzero_locks(tx2, self.nodes[0], self.relayfee, use_height_lock=True)\n+        test_nonzero_locks(tx2, self.nodes[0], self.relayfee, use_height_lock=False)\n+\n+        # Now mine some blocks, but make sure tx2 doesn't get mined.\n+        # Use prioritisetransaction to lower the effective feerate to 0\n+        self.nodes[0].prioritisetransaction(tx2.hash, -1e15, int(-self.relayfee*COIN))\n+        cur_time = int(time.time())\n+        for i in range(10):\n+            self.nodes[0].setmocktime(cur_time + 600)\n+            self.nodes[0].generate(1)\n+            cur_time += 600\n+\n+        assert(tx2.hash in self.nodes[0].getrawmempool())\n+\n+        test_nonzero_locks(tx2, self.nodes[0], self.relayfee, use_height_lock=True)\n+        test_nonzero_locks(tx2, self.nodes[0], self.relayfee, use_height_lock=False)\n+\n+        # Mine tx2, and then try again\n+        self.nodes[0].prioritisetransaction(tx2.hash, 1e15, int(self.relayfee*COIN))\n+\n+        # Advance the time on the node so that we can test timelocks\n+        self.nodes[0].setmocktime(cur_time+600)\n+        self.nodes[0].generate(1)\n+        assert(tx2.hash not in self.nodes[0].getrawmempool())\n+\n+        # Now that tx2 is not in the mempool, a sequence locked spend should\n+        # succeed\n+        tx3 = test_nonzero_locks(tx2, self.nodes[0], self.relayfee, use_height_lock=False)\n+        assert(tx3.hash in self.nodes[0].getrawmempool())\n+\n+        self.nodes[0].generate(1)\n+        assert(tx3.hash not in self.nodes[0].getrawmempool())\n+\n+        # One more test, this time using height locks\n+        tx4 = test_nonzero_locks(tx3, self.nodes[0], self.relayfee, use_height_lock=True)\n+        assert(tx4.hash in self.nodes[0].getrawmempool())\n+\n+        # Now try combining confirmed and unconfirmed inputs\n+        tx5 = test_nonzero_locks(tx4, self.nodes[0], self.relayfee, use_height_lock=True)\n+        assert(tx5.hash not in self.nodes[0].getrawmempool())\n+\n+        utxos = self.nodes[0].listunspent()\n+        tx5.vin.append(CTxIn(COutPoint(int(utxos[0][\"txid\"], 16), utxos[0][\"vout\"]), nSequence=1))\n+        tx5.vout[0].nValue += int(utxos[0][\"amount\"]*COIN)\n+        raw_tx5 = self.nodes[0].signrawtransaction(ToHex(tx5))[\"hex\"]\n+\n+        try:\n+            self.nodes[0].sendrawtransaction(raw_tx5)\n+        except JSONRPCException as exp:\n+            assert_equal(exp.error[\"message\"], NOT_FINAL_ERROR)\n+        else:\n+            assert(False)\n+\n+        # Test mempool-BIP68 consistency after reorg\n+        #\n+        # State of the transactions in the last blocks:\n+        # ... -> [ tx2 ] ->  [ tx3 ]\n+        #         tip-1        tip\n+        # And currently tx4 is in the mempool.\n+        #\n+        # If we invalidate the tip, tx3 should get added to the mempool, causing\n+        # tx4 to be removed (fails sequence-lock).\n+        self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+        assert(tx4.hash not in self.nodes[0].getrawmempool())\n+        assert(tx3.hash in self.nodes[0].getrawmempool())\n+\n+        # Now mine 2 empty blocks to reorg out the current tip (labeled tip-1 in\n+        # diagram above).\n+        # This would cause tx2 to be added back to the mempool, which in turn causes\n+        # tx3 to be removed.\n+        tip = int(self.nodes[0].getblockhash(self.nodes[0].getblockcount()-1), 16)\n+        height = self.nodes[0].getblockcount()\n+        for i in range(2):\n+            block = create_block(tip, create_coinbase(height), cur_time)\n+            block.nVersion = 3\n+            block.rehash()\n+            block.solve()\n+            tip = block.sha256\n+            height += 1\n+            self.nodes[0].submitblock(ToHex(block))\n+            cur_time += 1\n+\n+        mempool = self.nodes[0].getrawmempool()\n+        assert(tx3.hash not in mempool)\n+        assert(tx2.hash in mempool)\n+\n+        # Reset the chain and get rid of the mocktimed-blocks\n+        self.nodes[0].setmocktime(0)\n+        self.nodes[0].invalidateblock(self.nodes[0].getblockhash(cur_height+1))\n+        self.nodes[0].generate(10)\n+\n+    # Make sure that BIP68 isn't being used to validate blocks, prior to\n+    # versionbits activation.  If more blocks are mined prior to this test\n+    # being run, then it's possible the test has activated the soft fork, and\n+    # this test should be moved to run earlier, or deleted.\n+    def test_bip68_not_consensus(self):\n+        assert(get_bip9_status(self.nodes[0], 'csv')['status'] != 'active')\n+        txid = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 2)\n+\n+        tx1 = FromHex(CTransaction(), self.nodes[0].getrawtransaction(txid))\n+        tx1.rehash()\n+\n+        # Make an anyone-can-spend transaction\n+        tx2 = CTransaction()\n+        tx2.nVersion = 1\n+        tx2.vin = [CTxIn(COutPoint(tx1.sha256, 0), nSequence=0)]\n+        tx2.vout = [CTxOut(int(tx1.vout[0].nValue - self.relayfee*COIN), CScript([b'a']))]\n+\n+        # sign tx2\n+        tx2_raw = self.nodes[0].signrawtransaction(ToHex(tx2))[\"hex\"]\n+        tx2 = FromHex(tx2, tx2_raw)\n+        tx2.rehash()\n+\n+        self.nodes[0].sendrawtransaction(ToHex(tx2))\n+        \n+        # Now make an invalid spend of tx2 according to BIP68\n+        sequence_value = 100 # 100 block relative locktime\n+\n+        tx3 = CTransaction()\n+        tx3.nVersion = 2\n+        tx3.vin = [CTxIn(COutPoint(tx2.sha256, 0), nSequence=sequence_value)]\n+        tx3.vout = [CTxOut(int(tx2.vout[0].nValue - self.relayfee*COIN), CScript([b'a']))]\n+        tx3.rehash()\n+\n+        try:\n+            self.nodes[0].sendrawtransaction(ToHex(tx3))\n+        except JSONRPCException as exp:\n+            assert_equal(exp.error[\"message\"], NOT_FINAL_ERROR)\n+        else:\n+            assert(False)\n+\n+        # make a block that violates bip68; ensure that the tip updates\n+        tip = int(self.nodes[0].getbestblockhash(), 16)\n+        block = create_block(tip, create_coinbase(self.nodes[0].getblockcount()+1))\n+        block.nVersion = 3\n+        block.vtx.extend([tx1, tx2, tx3])\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.rehash()\n+        block.solve()\n+\n+        self.nodes[0].submitblock(ToHex(block))\n+        assert_equal(self.nodes[0].getbestblockhash(), block.hash)\n+\n+    def activateCSV(self):\n+        # activation should happen at block height 432 (3 periods)\n+        min_activation_height = 432\n+        height = self.nodes[0].getblockcount()\n+        assert(height < 432)\n+        self.nodes[0].generate(432-height)\n+        assert(get_bip9_status(self.nodes[0], 'csv')['status'] == 'active')\n+        sync_blocks(self.nodes)\n+\n+    # Use self.nodes[1] to test standardness relay policy\n+    def test_version2_relay(self, before_activation):\n+        inputs = [ ]\n+        outputs = { self.nodes[1].getnewaddress() : 1.0 }\n+        rawtx = self.nodes[1].createrawtransaction(inputs, outputs)\n+        rawtxfund = self.nodes[1].fundrawtransaction(rawtx)['hex']\n+        tx = FromHex(CTransaction(), rawtxfund)\n+        tx.nVersion = 2\n+        tx_signed = self.nodes[1].signrawtransaction(ToHex(tx))[\"hex\"]\n+        try:\n+            tx_id = self.nodes[1].sendrawtransaction(tx_signed)\n+            assert(before_activation == False)\n+        except:\n+            assert(before_activation)\n+\n+\n+if __name__ == '__main__':\n+    BIP68Test().main()"
      },
      {
        "sha": "be6ddde112ea280040b531dc9a526e24089e4dde",
        "filename": "qa/rpc-tests/bip9-softforks.py",
        "status": "added",
        "additions": 239,
        "deletions": 0,
        "changes": 239,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/bip9-softforks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/bip9-softforks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip9-softforks.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -0,0 +1,239 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.blockstore import BlockStore\n+from test_framework.test_framework import ComparisonTestFramework\n+from test_framework.util import *\n+from test_framework.mininode import CTransaction, NetworkThread\n+from test_framework.blocktools import create_coinbase, create_block\n+from test_framework.comptool import TestInstance, TestManager\n+from test_framework.script import CScript, OP_1NEGATE, OP_CHECKSEQUENCEVERIFY, OP_DROP\n+from io import BytesIO\n+import time\n+import itertools\n+\n+'''\n+This test is meant to exercise BIP forks\n+Connect to a single node.\n+regtest lock-in with 108/144 block signalling\n+activation after a further 144 blocks\n+mine 2 block and save coinbases for later use\n+mine 141 blocks to transition from DEFINED to STARTED\n+mine 100 blocks signalling readiness and 44 not in order to fail to change state this period\n+mine 108 blocks signalling readiness and 36 blocks not signalling readiness (STARTED->LOCKED_IN)\n+mine a further 143 blocks (LOCKED_IN)\n+test that enforcement has not triggered (which triggers ACTIVE)\n+test that enforcement has triggered\n+'''\n+\n+\n+class BIP9SoftForksTest(ComparisonTestFramework):\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.num_nodes = 1\n+\n+    def setup_network(self):\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir,\n+                                 extra_args=[['-debug', '-whitelist=127.0.0.1']],\n+                                 binary=[self.options.testbinary])\n+\n+    def run_test(self):\n+        self.test = TestManager(self, self.options.tmpdir)\n+        self.test.add_all_connections(self.nodes)\n+        NetworkThread().start() # Start up network handling in another thread\n+        self.test.run()\n+\n+    def create_transaction(self, node, coinbase, to_address, amount):\n+        from_txid = node.getblock(coinbase)['tx'][0]\n+        inputs = [{ \"txid\" : from_txid, \"vout\" : 0}]\n+        outputs = { to_address : amount }\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+        tx = CTransaction()\n+        f = BytesIO(hex_str_to_bytes(rawtx))\n+        tx.deserialize(f)\n+        tx.nVersion = 2\n+        return tx\n+\n+    def sign_transaction(self, node, tx):\n+        signresult = node.signrawtransaction(bytes_to_hex_str(tx.serialize()))\n+        tx = CTransaction()\n+        f = BytesIO(hex_str_to_bytes(signresult['hex']))\n+        tx.deserialize(f)\n+        return tx\n+\n+    def generate_blocks(self, number, version, test_blocks = []):\n+        for i in range(number):\n+            block = create_block(self.tip, create_coinbase(self.height), self.last_block_time + 1)\n+            block.nVersion = version\n+            block.rehash()\n+            block.solve()\n+            test_blocks.append([block, True])\n+            self.last_block_time += 1\n+            self.tip = block.sha256\n+            self.height += 1\n+        return test_blocks\n+\n+    def get_bip9_status(self, key):\n+        info = self.nodes[0].getblockchaininfo()\n+        return info['bip9_softforks'][key]\n+\n+    def test_BIP(self, bipName, activated_version, invalidate, invalidatePostSignature, bitno):\n+        # generate some coins for later\n+        self.coinbase_blocks = self.nodes[0].generate(2)\n+        self.height = 3  # height of the next block to build\n+        self.tip = int(\"0x\" + self.nodes[0].getbestblockhash(), 0)\n+        self.nodeaddress = self.nodes[0].getnewaddress()\n+        self.last_block_time = int(time.time())\n+\n+        assert_equal(self.get_bip9_status(bipName)['status'], 'defined')\n+        tmpl = self.nodes[0].getblocktemplate({})\n+        assert(bipName not in tmpl['rules'])\n+        assert(bipName not in tmpl['vbavailable'])\n+        assert_equal(tmpl['vbrequired'], 0)\n+        assert_equal(tmpl['version'], 0x20000000)\n+\n+        # Test 1\n+        # Advance from DEFINED to STARTED\n+        test_blocks = self.generate_blocks(141, 4)\n+        yield TestInstance(test_blocks, sync_every_block=False)\n+\n+        assert_equal(self.get_bip9_status(bipName)['status'], 'started')\n+        tmpl = self.nodes[0].getblocktemplate({})\n+        assert(bipName not in tmpl['rules'])\n+        assert_equal(tmpl['vbavailable'][bipName], bitno)\n+        assert_equal(tmpl['vbrequired'], 0)\n+        assert(tmpl['version'] & activated_version)\n+\n+        # Test 2\n+        # Fail to achieve LOCKED_IN 100 out of 144 signal bit 1\n+        # using a variety of bits to simulate multiple parallel softforks\n+        test_blocks = self.generate_blocks(50, activated_version) # 0x20000001 (signalling ready)\n+        test_blocks = self.generate_blocks(20, 4, test_blocks) # 0x00000004 (signalling not)\n+        test_blocks = self.generate_blocks(50, activated_version, test_blocks) # 0x20000101 (signalling ready)\n+        test_blocks = self.generate_blocks(24, 4, test_blocks) # 0x20010000 (signalling not)\n+        yield TestInstance(test_blocks, sync_every_block=False)\n+\n+        assert_equal(self.get_bip9_status(bipName)['status'], 'started')\n+        tmpl = self.nodes[0].getblocktemplate({})\n+        assert(bipName not in tmpl['rules'])\n+        assert_equal(tmpl['vbavailable'][bipName], bitno)\n+        assert_equal(tmpl['vbrequired'], 0)\n+        assert(tmpl['version'] & activated_version)\n+\n+        # Test 3\n+        # 108 out of 144 signal bit 1 to achieve LOCKED_IN\n+        # using a variety of bits to simulate multiple parallel softforks\n+        test_blocks = self.generate_blocks(58, activated_version) # 0x20000001 (signalling ready)\n+        test_blocks = self.generate_blocks(26, 4, test_blocks) # 0x00000004 (signalling not)\n+        test_blocks = self.generate_blocks(50, activated_version, test_blocks) # 0x20000101 (signalling ready)\n+        test_blocks = self.generate_blocks(10, 4, test_blocks) # 0x20010000 (signalling not)\n+        yield TestInstance(test_blocks, sync_every_block=False)\n+\n+        assert_equal(self.get_bip9_status(bipName)['status'], 'locked_in')\n+        tmpl = self.nodes[0].getblocktemplate({})\n+        assert(bipName not in tmpl['rules'])\n+\n+        # Test 4\n+        # 143 more version 536870913 blocks (waiting period-1)\n+        test_blocks = self.generate_blocks(143, 4)\n+        yield TestInstance(test_blocks, sync_every_block=False)\n+\n+        assert_equal(self.get_bip9_status(bipName)['status'], 'locked_in')\n+        tmpl = self.nodes[0].getblocktemplate({})\n+        assert(bipName not in tmpl['rules'])\n+\n+        # Test 5\n+        # Check that the new rule is enforced\n+        spendtx = self.create_transaction(self.nodes[0],\n+                self.coinbase_blocks[0], self.nodeaddress, 1.0)\n+        invalidate(spendtx)\n+        spendtx = self.sign_transaction(self.nodes[0], spendtx)\n+        spendtx.rehash()\n+        invalidatePostSignature(spendtx)\n+        spendtx.rehash()\n+        block = create_block(self.tip, create_coinbase(self.height), self.last_block_time + 1)\n+        block.nVersion = activated_version\n+        block.vtx.append(spendtx)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.rehash()\n+        block.solve()\n+\n+        self.last_block_time += 1\n+        self.tip = block.sha256\n+        self.height += 1\n+        yield TestInstance([[block, True]])\n+\n+        assert_equal(self.get_bip9_status(bipName)['status'], 'active')\n+        tmpl = self.nodes[0].getblocktemplate({})\n+        assert(bipName in tmpl['rules'])\n+        assert(bipName not in tmpl['vbavailable'])\n+        assert_equal(tmpl['vbrequired'], 0)\n+        assert(not (tmpl['version'] & (1 << bitno)))\n+\n+        # Test 6\n+        # Check that the new sequence lock rules are enforced\n+        spendtx = self.create_transaction(self.nodes[0],\n+                self.coinbase_blocks[1], self.nodeaddress, 1.0)\n+        invalidate(spendtx)\n+        spendtx = self.sign_transaction(self.nodes[0], spendtx)\n+        spendtx.rehash()\n+        invalidatePostSignature(spendtx)\n+        spendtx.rehash()\n+\n+        block = create_block(self.tip, create_coinbase(self.height), self.last_block_time + 1)\n+        block.nVersion = 5\n+        block.vtx.append(spendtx)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.rehash()\n+        block.solve()\n+        self.last_block_time += 1\n+        yield TestInstance([[block, False]])\n+\n+        # Restart all\n+        self.test.block_store.close()\n+        stop_nodes(self.nodes)\n+        shutil.rmtree(self.options.tmpdir)\n+        self.setup_chain()\n+        self.setup_network()\n+        self.test.block_store = BlockStore(self.options.tmpdir)\n+        self.test.clear_all_connections()\n+        self.test.add_all_connections(self.nodes)\n+        NetworkThread().start() # Start up network handling in another thread\n+\n+\n+    def get_tests(self):\n+        for test in itertools.chain(\n+                self.test_BIP('csv', 0x20000001, self.sequence_lock_invalidate, self.donothing, 0),\n+                self.test_BIP('csv', 0x20000001, self.mtp_invalidate, self.donothing, 0),\n+                self.test_BIP('csv', 0x20000001, self.donothing, self.csv_invalidate, 0)\n+        ):\n+            yield test\n+\n+    def donothing(self, tx):\n+        return\n+\n+    def csv_invalidate(self, tx):\n+        '''Modify the signature in vin 0 of the tx to fail CSV\n+        Prepends -1 CSV DROP in the scriptSig itself.\n+        '''\n+        tx.vin[0].scriptSig = CScript([OP_1NEGATE, OP_CHECKSEQUENCEVERIFY, OP_DROP] +\n+                                      list(CScript(tx.vin[0].scriptSig)))\n+\n+    def sequence_lock_invalidate(self, tx):\n+        '''Modify the nSequence to make it fails once sequence lock rule is activated (high timespan)\n+        '''\n+        tx.vin[0].nSequence = 0x00FFFFFF\n+        tx.nLockTime = 0\n+\n+    def mtp_invalidate(self, tx):\n+        '''Modify the nLockTime to make it fails once MTP rule is activated\n+        '''\n+        # Disable Sequence lock, Activate nLockTime\n+        tx.vin[0].nSequence = 0x90FFFFFF\n+        tx.nLockTime = self.last_block_time\n+\n+if __name__ == '__main__':\n+    BIP9SoftForksTest().main()"
      },
      {
        "sha": "3bad5af5e67a44dd623201d75980a4461162a434",
        "filename": "qa/rpc-tests/bipdersig-p2p.py",
        "status": "modified",
        "additions": 33,
        "deletions": 34,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/bipdersig-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/bipdersig-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bipdersig-p2p.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -1,17 +1,15 @@\n-#!/usr/bin/env python2\n-#\n-# Distributed under the MIT/X11 software license, see the accompanying\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-#\n \n from test_framework.test_framework import ComparisonTestFramework\n from test_framework.util import *\n from test_framework.mininode import CTransaction, NetworkThread\n from test_framework.blocktools import create_coinbase, create_block\n from test_framework.comptool import TestInstance, TestManager\n from test_framework.script import CScript\n-from binascii import hexlify, unhexlify\n-import cStringIO\n+from io import BytesIO\n import time\n \n # A canonical signature consists of: \n@@ -25,7 +23,7 @@ def unDERify(tx):\n     newscript = []\n     for i in scriptSig:\n         if (len(newscript) == 0):\n-            newscript.append(i[0:-1] + '\\0' + i[-1])\n+            newscript.append(i[0:-1] + b'\\0' + i[-1:])\n         else:\n             newscript.append(i)\n     tx.vin[0].scriptSig = CScript(newscript)\n@@ -47,11 +45,12 @@ def unDERify(tx):\n class BIP66Test(ComparisonTestFramework):\n \n     def __init__(self):\n+        super().__init__()\n         self.num_nodes = 1\n \n     def setup_network(self):\n         # Must set the blockversion for this test\n-        self.nodes = start_nodes(1, self.options.tmpdir, \n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir,\n                                  extra_args=[['-debug', '-whitelist=127.0.0.1', '-blockversion=2']],\n                                  binary=[self.options.testbinary])\n \n@@ -68,21 +67,21 @@ def create_transaction(self, node, coinbase, to_address, amount):\n         rawtx = node.createrawtransaction(inputs, outputs)\n         signresult = node.signrawtransaction(rawtx)\n         tx = CTransaction()\n-        f = cStringIO.StringIO(unhexlify(signresult['hex']))\n+        f = BytesIO(hex_str_to_bytes(signresult['hex']))\n         tx.deserialize(f)\n         return tx\n \n     def get_tests(self):\n \n         self.coinbase_blocks = self.nodes[0].generate(2)\n         height = 3  # height of the next block to build\n-        self.tip = int (\"0x\" + self.nodes[0].getbestblockhash() + \"L\", 0)\n+        self.tip = int(\"0x\" + self.nodes[0].getbestblockhash(), 0)\n         self.nodeaddress = self.nodes[0].getnewaddress()\n-        self.last_block_time = time.time()\n+        self.last_block_time = int(time.time())\n \n-        ''' 98 more version 2 blocks '''\n+        ''' 298 more version 2 blocks '''\n         test_blocks = []\n-        for i in xrange(98):\n+        for i in range(298):\n             block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n             block.nVersion = 2\n             block.rehash()\n@@ -95,7 +94,7 @@ def get_tests(self):\n \n         ''' Mine 749 version 3 blocks '''\n         test_blocks = []\n-        for i in xrange(749):\n+        for i in range(749):\n             block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n             block.nVersion = 3\n             block.rehash()\n@@ -125,29 +124,11 @@ def get_tests(self):\n         self.last_block_time += 1\n         self.tip = block.sha256\n         height += 1\n-        yield TestInstance([[block, True]])\n-\n-        ''' \n-        Check that the new DERSIG rules are enforced in the 751st version 3\n-        block.\n-        '''\n-        spendtx = self.create_transaction(self.nodes[0],\n-                self.coinbase_blocks[1], self.nodeaddress, 1.0)\n-        unDERify(spendtx)\n-        spendtx.rehash()\n-\n-        block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n-        block.nVersion = 3\n-        block.vtx.append(spendtx)\n-        block.hashMerkleRoot = block.calc_merkle_root()\n-        block.rehash()\n-        block.solve()\n-        self.last_block_time += 1\n-        yield TestInstance([[block, False]])\n+        yield TestInstance([[block, True]])       \n \n         ''' Mine 199 new version blocks on last valid tip '''\n         test_blocks = []\n-        for i in xrange(199):\n+        for i in range(199):\n             block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n             block.nVersion = 3\n             block.rehash()\n@@ -178,6 +159,24 @@ def get_tests(self):\n         height += 1\n         yield TestInstance([[block, True]])\n \n+        ''' \n+        Check that the new DERSIG rules are enforced in the 951st version 3\n+        block.\n+        '''\n+        spendtx = self.create_transaction(self.nodes[0],\n+                self.coinbase_blocks[1], self.nodeaddress, 1.0)\n+        unDERify(spendtx)\n+        spendtx.rehash()\n+\n+        block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n+        block.nVersion = 3\n+        block.vtx.append(spendtx)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.rehash()\n+        block.solve()\n+        self.last_block_time += 1\n+        yield TestInstance([[block, False]])\n+\n         ''' Mine 1 old version block, should be invalid '''\n         block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n         block.nVersion = 2"
      },
      {
        "sha": "17c2ced79ac1ec6c985e61059bb965331eaddebb",
        "filename": "qa/rpc-tests/bipdersig.py",
        "status": "modified",
        "additions": 9,
        "deletions": 7,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/bipdersig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/bipdersig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bipdersig.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -9,10 +9,12 @@\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n-import os\n-import shutil\n \n class BIP66Test(BitcoinTestFramework):\n+    def __init__(self):\n+        super().__init__()\n+        self.num_nodes = 3\n+        self.setup_clean_chain = False\n \n     def setup_network(self):\n         self.nodes = []\n@@ -34,7 +36,7 @@ def run_test(self):\n             raise AssertionError(\"Failed to mine 100 version=2 blocks\")\n \n         # Mine 750 new-version blocks\n-        for i in xrange(15):\n+        for i in range(15):\n             self.nodes[2].generate(50)\n         self.sync_all()\n         if (self.nodes[0].getblockcount() != cnt + 850):\n@@ -46,12 +48,12 @@ def run_test(self):\n         self.nodes[2].generate(1)\n         self.sync_all()\n         if (self.nodes[0].getblockcount() != cnt + 851):\n-            raise AssertionFailure(\"Failed to mine a version=3 blocks\")\n+            raise AssertionError(\"Failed to mine a version=3 blocks\")\n \n         # TODO: check that new DERSIG rules are enforced\n \n         # Mine 198 new-version blocks\n-        for i in xrange(2):\n+        for i in range(2):\n             self.nodes[2].generate(99)\n         self.sync_all()\n         if (self.nodes[0].getblockcount() != cnt + 1049):"
      },
      {
        "sha": "410b85d15e35f04a31834bf3b492f9164dbce67a",
        "filename": "qa/rpc-tests/blockchain.py",
        "status": "modified",
        "additions": 53,
        "deletions": 16,
        "changes": 69,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/blockchain.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -1,52 +1,89 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #\n-# Test RPC calls related to blockchain state.\n+# Test RPC calls related to blockchain state. Tests correspond to code in\n+# rpc/blockchain.cpp.\n #\n \n-import decimal\n+from decimal import Decimal\n \n from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.authproxy import JSONRPCException\n from test_framework.util import (\n-    initialize_chain,\n     assert_equal,\n+    assert_raises,\n+    assert_is_hex_string,\n+    assert_is_hash_string,\n     start_nodes,\n     connect_nodes_bi,\n )\n \n+\n class BlockchainTest(BitcoinTestFramework):\n     \"\"\"\n     Test blockchain-related RPC calls:\n \n         - gettxoutsetinfo\n+        - verifychain\n \n     \"\"\"\n \n-    def setup_chain(self):\n-        print(\"Initializing test directory \" + self.options.tmpdir)\n-        initialize_chain(self.options.tmpdir)\n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = False\n+        self.num_nodes = 2\n \n     def setup_network(self, split=False):\n-        self.nodes = start_nodes(2, self.options.tmpdir)\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir)\n         connect_nodes_bi(self.nodes, 0, 1)\n         self.is_network_split = False\n         self.sync_all()\n \n     def run_test(self):\n+        self._test_gettxoutsetinfo()\n+        self._test_getblockheader()\n+        self.nodes[0].verifychain(4, 0)\n+\n+    def _test_gettxoutsetinfo(self):\n         node = self.nodes[0]\n         res = node.gettxoutsetinfo()\n \n-        assert_equal(res[u'total_amount'], decimal.Decimal('8725.00000000'))\n-        assert_equal(res[u'transactions'], 200)\n-        assert_equal(res[u'height'], 200)\n-        assert_equal(res[u'txouts'], 200)\n-        assert_equal(res[u'bytes_serialized'], 13924),\n-        assert_equal(len(res[u'bestblock']), 64)\n-        assert_equal(len(res[u'hash_serialized']), 64)\n+        assert_equal(res['total_amount'], Decimal('8725.00000000'))\n+        assert_equal(res['transactions'], 200)\n+        assert_equal(res['height'], 200)\n+        assert_equal(res['txouts'], 200)\n+        assert_equal(res['bytes_serialized'], 13924),\n+        assert_equal(len(res['bestblock']), 64)\n+        assert_equal(len(res['hash_serialized']), 64)\n+\n+    def _test_getblockheader(self):\n+        node = self.nodes[0]\n+\n+        assert_raises(\n+            JSONRPCException, lambda: node.getblockheader('nonsense'))\n+\n+        besthash = node.getbestblockhash()\n+        secondbesthash = node.getblockhash(199)\n+        header = node.getblockheader(besthash)\n \n+        assert_equal(header['hash'], besthash)\n+        assert_equal(header['height'], 200)\n+        assert_equal(header['confirmations'], 1)\n+        assert_equal(header['previousblockhash'], secondbesthash)\n+        assert_is_hex_string(header['chainwork'])\n+        assert_is_hash_string(header['hash'])\n+        assert_is_hash_string(header['previousblockhash'])\n+        assert_is_hash_string(header['merkleroot'])\n+        assert_is_hash_string(header['bits'], length=None)\n+        assert isinstance(header['time'], int)\n+        assert isinstance(header['mediantime'], int)\n+        assert isinstance(header['nonce'], int)\n+        assert isinstance(header['version'], int)\n+        assert isinstance(int(header['versionHex'], 16), int)\n+        assert isinstance(header['difficulty'], Decimal)\n \n if __name__ == '__main__':\n     BlockchainTest().main()"
      },
      {
        "sha": "1ace6310d0d06c359db0dd4056324198c81f9a2f",
        "filename": "qa/rpc-tests/create_cache.py",
        "status": "added",
        "additions": 29,
        "deletions": 0,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/create_cache.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/create_cache.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/create_cache.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -0,0 +1,29 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# Helper script to create the cache\n+# (see BitcoinTestFramework.setup_chain)\n+#\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+class CreateCache(BitcoinTestFramework):\n+\n+    def __init__(self):\n+        super().__init__()\n+\n+        # Test network and test nodes are not required:\n+        self.num_nodes = 0\n+        self.nodes = []\n+\n+    def setup_network(self):\n+        pass\n+\n+    def run_test(self):\n+        pass\n+\n+if __name__ == '__main__':\n+    CreateCache().main()"
      },
      {
        "sha": "24768c265577a49367b9c7c67d8d79059f37e3c2",
        "filename": "qa/rpc-tests/decodescript.py",
        "status": "modified",
        "additions": 20,
        "deletions": 21,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/decodescript.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/decodescript.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/decodescript.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -1,23 +1,23 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2015 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n from test_framework.mininode import *\n-from binascii import hexlify, unhexlify\n-from cStringIO import StringIO\n+from io import BytesIO\n \n class DecodeScriptTest(BitcoinTestFramework):\n     \"\"\"Tests decoding scripts via RPC command \"decodescript\".\"\"\"\n \n-    def setup_chain(self):\n-        print('Initializing test directory ' + self.options.tmpdir)\n-        initialize_chain_clean(self.options.tmpdir, 1)\n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n \n     def setup_network(self, split=False):\n-        self.nodes = start_nodes(1, self.options.tmpdir)\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir)\n         self.is_network_split = False\n \n     def decodescript_script_sig(self):\n@@ -102,13 +102,13 @@ def decodescript_script_pub_key(self):\n         # OP_IF\n         #   <receiver-pubkey> OP_CHECKSIGVERIFY\n         # OP_ELSE\n-        #   <lock-until> OP_NOP2 OP_DROP\n+        #   <lock-until> OP_CHECKLOCKTIMEVERIFY OP_DROP\n         # OP_ENDIF\n         # <sender-pubkey> OP_CHECKSIG\n         #\n         # lock until block 500,000\n         rpc_result = self.nodes[0].decodescript('63' + push_public_key + 'ad670320a107b17568' + push_public_key + 'ac')\n-        assert_equal('OP_IF ' + public_key + ' OP_CHECKSIGVERIFY OP_ELSE 500000 OP_NOP2 OP_DROP OP_ENDIF ' + public_key + ' OP_CHECKSIG', rpc_result['asm'])\n+        assert_equal('OP_IF ' + public_key + ' OP_CHECKSIGVERIFY OP_ELSE 500000 OP_CHECKLOCKTIMEVERIFY OP_DROP OP_ENDIF ' + public_key + ' OP_CHECKSIG', rpc_result['asm'])\n \n     def decoderawtransaction_asm_sighashtype(self):\n         \"\"\"Tests decoding scripts via RPC command \"decoderawtransaction\".\n@@ -131,7 +131,7 @@ def decoderawtransaction_asm_sighashtype(self):\n         assert_equal('OP_DUP OP_HASH160 dc863734a218bfe83ef770ee9d41a27f824a6e56 OP_EQUALVERIFY OP_CHECKSIG', rpc_result['vout'][0]['scriptPubKey']['asm'])\n         assert_equal('OP_HASH160 2a5edea39971049a540474c6a99edf0aa4074c58 OP_EQUAL', rpc_result['vout'][1]['scriptPubKey']['asm'])\n         txSave = CTransaction()\n-        txSave.deserialize(StringIO(unhexlify(tx)))\n+        txSave.deserialize(BytesIO(hex_str_to_bytes(tx)))\n \n         # make sure that a specifically crafted op_return value will not pass all the IsDERSignature checks and then get decoded as a sighash type\n         tx = '01000000015ded05872fdbda629c7d3d02b194763ce3b9b1535ea884e3c8e765d42e316724020000006b48304502204c10d4064885c42638cbff3585915b322de33762598321145ba033fc796971e2022100bb153ad3baa8b757e30a2175bd32852d2e1cb9080f84d7e32fcdfd667934ef1b012103163c0ff73511ea1743fb5b98384a2ff09dd06949488028fd819f4d83f56264efffffffff0200000000000000000b6a0930060201000201000180380100000000001976a9141cabd296e753837c086da7a45a6c2fe0d49d7b7b88ac00000000'\n@@ -147,7 +147,7 @@ def decoderawtransaction_asm_sighashtype(self):\n         # some more full transaction tests of varying specific scriptSigs. used instead of\n         # tests in decodescript_script_sig because the decodescript RPC is specifically\n         # for working on scriptPubKeys (argh!).\n-        push_signature = hexlify(txSave.vin[0].scriptSig)[2:(0x48*2+4)]\n+        push_signature = bytes_to_hex_str(txSave.vin[0].scriptSig)[2:(0x48*2+4)]\n         signature = push_signature[2:]\n         der_signature = signature[:-2]\n         signature_sighash_decoded = der_signature + '[ALL]'\n@@ -156,25 +156,24 @@ def decoderawtransaction_asm_sighashtype(self):\n         signature_2_sighash_decoded = der_signature + '[NONE|ANYONECANPAY]'\n \n         # 1) P2PK scriptSig\n-        txSave.vin[0].scriptSig = unhexlify(push_signature)\n-        rpc_result = self.nodes[0].decoderawtransaction(hexlify(txSave.serialize()))\n+        txSave.vin[0].scriptSig = hex_str_to_bytes(push_signature)\n+        rpc_result = self.nodes[0].decoderawtransaction(bytes_to_hex_str(txSave.serialize()))\n         assert_equal(signature_sighash_decoded, rpc_result['vin'][0]['scriptSig']['asm'])\n \n         # make sure that the sighash decodes come out correctly for a more complex / lesser used case.\n-        txSave.vin[0].scriptSig = unhexlify(push_signature_2)\n-        rpc_result = self.nodes[0].decoderawtransaction(hexlify(txSave.serialize()))\n+        txSave.vin[0].scriptSig = hex_str_to_bytes(push_signature_2)\n+        rpc_result = self.nodes[0].decoderawtransaction(bytes_to_hex_str(txSave.serialize()))\n         assert_equal(signature_2_sighash_decoded, rpc_result['vin'][0]['scriptSig']['asm'])\n \n         # 2) multisig scriptSig\n-        txSave.vin[0].scriptSig = unhexlify('00' + push_signature + push_signature_2)\n-        rpc_result = self.nodes[0].decoderawtransaction(hexlify(txSave.serialize()))\n+        txSave.vin[0].scriptSig = hex_str_to_bytes('00' + push_signature + push_signature_2)\n+        rpc_result = self.nodes[0].decoderawtransaction(bytes_to_hex_str(txSave.serialize()))\n         assert_equal('0 ' + signature_sighash_decoded + ' ' + signature_2_sighash_decoded, rpc_result['vin'][0]['scriptSig']['asm'])\n \n         # 3) test a scriptSig that contains more than push operations.\n         # in fact, it contains an OP_RETURN with data specially crafted to cause improper decode if the code does not catch it.\n-        txSave.vin[0].scriptSig = unhexlify('6a143011020701010101010101020601010101010101')\n-        rpc_result = self.nodes[0].decoderawtransaction(hexlify(txSave.serialize()))\n-        print(hexlify('636174'))\n+        txSave.vin[0].scriptSig = hex_str_to_bytes('6a143011020701010101010101020601010101010101')\n+        rpc_result = self.nodes[0].decoderawtransaction(bytes_to_hex_str(txSave.serialize()))\n         assert_equal('OP_RETURN 3011020701010101010101020601010101010101', rpc_result['vin'][0]['scriptSig']['asm'])\n \n     def run_test(self):"
      },
      {
        "sha": "36c147edad3a6f9c94c16e744432ba337e654ce0",
        "filename": "qa/rpc-tests/disablewallet.py",
        "status": "modified",
        "additions": 22,
        "deletions": 6,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/disablewallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/disablewallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/disablewallet.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -10,14 +10,16 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n \n+\n class DisableWalletTest (BitcoinTestFramework):\n \n-    def setup_chain(self):\n-        print(\"Initializing test directory \"+self.options.tmpdir)\n-        initialize_chain_clean(self.options.tmpdir, 1)\n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n \n     def setup_network(self, split=False):\n-        self.nodes = start_nodes(1, self.options.tmpdir, [['-disablewallet']])\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, [['-disablewallet']])\n         self.is_network_split = False\n         self.sync_all()\n \n@@ -28,5 +30,19 @@ def run_test (self):\n         x = self.nodes[0].validateaddress('mneYUmWYsuk7kySiURxCi3AGxrAqZxLgPZ')\n         assert(x['isvalid'] == True)\n \n+        # Checking mining to an address without a wallet\n+        try:\n+            self.nodes[0].generatetoaddress(1, 'mneYUmWYsuk7kySiURxCi3AGxrAqZxLgPZ')\n+        except JSONRPCException as e:\n+            assert(\"Invalid address\" not in e.error['message'])\n+            assert(\"ProcessNewBlock, block not accepted\" not in e.error['message'])\n+            assert(\"Couldn't create new block\" not in e.error['message'])\n+\n+        try:\n+            self.nodes[0].generatetoaddress(1, '3J98t1WpEZ73CNmQviecrnyiWrnqRhWNLy')\n+            raise AssertionError(\"Must not mine to invalid address!\")\n+        except JSONRPCException as e:\n+            assert(\"Invalid address\" in e.error['message'])\n+\n if __name__ == '__main__':\n     DisableWalletTest ().main ()"
      },
      {
        "sha": "a1901aedab890d92dac8f64b42d0961607b0edb8",
        "filename": "qa/rpc-tests/forknotify.py",
        "status": "modified",
        "additions": 10,
        "deletions": 7,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/forknotify.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/forknotify.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/forknotify.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python2\n-# Copyright (c) 2014 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -9,17 +9,20 @@\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n-import os\n-import shutil\n \n class ForkNotifyTest(BitcoinTestFramework):\n \n+    def __init__(self):\n+        super().__init__()\n+        self.num_nodes = 2\n+        self.setup_clean_chain = False\n+\n     alert_filename = None  # Set by setup_network\n \n     def setup_network(self):\n         self.nodes = []\n         self.alert_filename = os.path.join(self.options.tmpdir, \"alert.txt\")\n-        with open(self.alert_filename, 'w') as f:\n+        with open(self.alert_filename, 'w', encoding='utf8') as f:\n             pass  # Just open then close to create zero-length file\n         self.nodes.append(start_node(0, self.options.tmpdir,\n                             [\"-blockversion=2\", \"-alertnotify=echo %s >> \\\"\" + self.alert_filename + \"\\\"\"]))\n@@ -41,7 +44,7 @@ def run_test(self):\n         self.nodes[1].generate(1)\n         self.sync_all()\n \n-        with open(self.alert_filename, 'r') as f:\n+        with open(self.alert_filename, 'r', encoding='utf8') as f:\n             alert_text = f.read()\n \n         if len(alert_text) == 0:\n@@ -53,7 +56,7 @@ def run_test(self):\n         self.nodes[1].generate(1)\n         self.sync_all()\n \n-        with open(self.alert_filename, 'r') as f:\n+        with open(self.alert_filename, 'r', encoding='utf8') as f:\n             alert_text2 = f.read()\n \n         if alert_text != alert_text2:"
      },
      {
        "sha": "8c45578fcfbddba93cb38ff66c11a75825228f4b",
        "filename": "qa/rpc-tests/fundrawtransaction.py",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/fundrawtransaction.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "3cddf4046aaf6eed75634c4ef2161a0a607ebc09",
        "filename": "qa/rpc-tests/getblocktemplate_longpoll.py",
        "status": "modified",
        "additions": 8,
        "deletions": 25,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/getblocktemplate_longpoll.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/getblocktemplate_longpoll.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/getblocktemplate_longpoll.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "7a4f8f8fdc3c2a3cc50e3c71030c3578d3919c1e",
        "filename": "qa/rpc-tests/getblocktemplate_proposals.py",
        "status": "modified",
        "additions": 18,
        "deletions": 37,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/getblocktemplate_proposals.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/getblocktemplate_proposals.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/getblocktemplate_proposals.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "1c66b8c28927d110947e6430f04787bb9bd2bb0d",
        "filename": "qa/rpc-tests/getchaintips.py",
        "status": "modified",
        "additions": 8,
        "deletions": 5,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/getchaintips.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/getchaintips.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/getchaintips.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "10bc927e1a51a6ea1aefa2bbc1b89f374c61a3bd",
        "filename": "qa/rpc-tests/httpbasics.py",
        "status": "modified",
        "additions": 48,
        "deletions": 50,
        "changes": 98,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/httpbasics.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/httpbasics.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/httpbasics.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "0dee8ad4ec922d3d2f6c000479d0e24d66530ef8",
        "filename": "qa/rpc-tests/importprunedfunds.py",
        "status": "added",
        "additions": 134,
        "deletions": 0,
        "changes": 134,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/importprunedfunds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/importprunedfunds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/importprunedfunds.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "0faadd33ab35a55cf68b1e3b20ad71286ca9c2f9",
        "filename": "qa/rpc-tests/invalidateblock.py",
        "status": "modified",
        "additions": 20,
        "deletions": 19,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/invalidateblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/invalidateblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/invalidateblock.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "3d8107a76c661a7890ee9a3abbd5f360291791eb",
        "filename": "qa/rpc-tests/invalidblockrequest.py",
        "status": "modified",
        "additions": 13,
        "deletions": 15,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/invalidblockrequest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/invalidblockrequest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/invalidblockrequest.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "93205d79dee5bddd8e5e3d0862374dd72d1fdcb1",
        "filename": "qa/rpc-tests/invalidtxrequest.py",
        "status": "added",
        "additions": 72,
        "deletions": 0,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/invalidtxrequest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/invalidtxrequest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/invalidtxrequest.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "fa3947656809c26466fe065f553842317cdecd1c",
        "filename": "qa/rpc-tests/keypool.py",
        "status": "modified",
        "additions": 24,
        "deletions": 35,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/keypool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/keypool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/keypool.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "5ec6ce17e01e8aae3ad4a513b4eaafdf1127edc7",
        "filename": "qa/rpc-tests/listtransactions.py",
        "status": "modified",
        "additions": 134,
        "deletions": 38,
        "changes": 172,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/listtransactions.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "1df1c484bea1205ac3f8ec51f5c87830bc505a94",
        "filename": "qa/rpc-tests/maxblocksinflight.py",
        "status": "modified",
        "additions": 33,
        "deletions": 37,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/maxblocksinflight.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/maxblocksinflight.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/maxblocksinflight.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "d0e9fe9a3f592262bdd513cd6be0293882088734",
        "filename": "qa/rpc-tests/maxuploadtarget.py",
        "status": "modified",
        "additions": 32,
        "deletions": 47,
        "changes": 79,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/maxuploadtarget.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/maxuploadtarget.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/maxuploadtarget.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "4438c152df10a077c6654e598c63ea19017eaae4",
        "filename": "qa/rpc-tests/mempool_limit.py",
        "status": "added",
        "additions": 54,
        "deletions": 0,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/mempool_limit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/mempool_limit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/mempool_limit.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "45dc0e65c43c20cb58f82cdf5beb015b87b273ab",
        "filename": "qa/rpc-tests/mempool_packages.py",
        "status": "modified",
        "additions": 79,
        "deletions": 14,
        "changes": 93,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/mempool_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/mempool_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/mempool_packages.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "301b094eb08ca6326d64cf8ae9c4ca77303e32ad",
        "filename": "qa/rpc-tests/mempool_reorg.py",
        "status": "modified",
        "additions": 15,
        "deletions": 21,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/mempool_reorg.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/mempool_reorg.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/mempool_reorg.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "3db12cbf76a68f2ba1098f58224c9a7343716c7d",
        "filename": "qa/rpc-tests/mempool_resurrect_test.py",
        "status": "modified",
        "additions": 9,
        "deletions": 14,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/mempool_resurrect_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/mempool_resurrect_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/mempool_resurrect_test.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "d5e4bf52d26ce5b8ce8580cd28f4673a62666f83",
        "filename": "qa/rpc-tests/mempool_spendcoinbase.py",
        "status": "modified",
        "additions": 8,
        "deletions": 13,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/mempool_spendcoinbase.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/mempool_spendcoinbase.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/mempool_spendcoinbase.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "b2155d7fc33c31b10642dccf2e8e13dbdf10ff7c",
        "filename": "qa/rpc-tests/merkle_blocks.py",
        "status": "modified",
        "additions": 11,
        "deletions": 12,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/merkle_blocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/merkle_blocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/merkle_blocks.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "cdeb94caa09986fa533a264d214b88ef245d9a25",
        "filename": "qa/rpc-tests/multi_rpc.py",
        "status": "modified",
        "additions": 31,
        "deletions": 33,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/multi_rpc.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/multi_rpc.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/multi_rpc.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "e9682c4908f651366b8b554ab74ab45004975a0d",
        "filename": "qa/rpc-tests/nodehandling.py",
        "status": "modified",
        "additions": 13,
        "deletions": 14,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/nodehandling.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/nodehandling.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/nodehandling.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "54b7eac3765e6f7a79fe6e6b0fb0b7273eb0ce35",
        "filename": "qa/rpc-tests/nulldummy.py",
        "status": "added",
        "additions": 148,
        "deletions": 0,
        "changes": 148,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/nulldummy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/nulldummy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/nulldummy.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "015ec34effabe7f6db1099a0512ad979c4073a83",
        "filename": "qa/rpc-tests/p2p-acceptblock.py",
        "status": "modified",
        "additions": 23,
        "deletions": 22,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/p2p-acceptblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/p2p-acceptblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-acceptblock.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "cdcfb36e7bd301de9191d16b96b38ed07bb9427f",
        "filename": "qa/rpc-tests/p2p-compactblocks.py",
        "status": "added",
        "additions": 841,
        "deletions": 0,
        "changes": 841,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/p2p-compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/p2p-compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-compactblocks.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "96d99d38a73c13cbf43b99e8dd8cca57684b25e4",
        "filename": "qa/rpc-tests/p2p-feefilter.py",
        "status": "added",
        "additions": 115,
        "deletions": 0,
        "changes": 115,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/p2p-feefilter.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/p2p-feefilter.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-feefilter.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "9aee81164f088c53c8cd5cdb94e69c346984a7ee",
        "filename": "qa/rpc-tests/p2p-fullblocktest.py",
        "status": "modified",
        "additions": 1118,
        "deletions": 100,
        "changes": 1218,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/p2p-fullblocktest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/p2p-fullblocktest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-fullblocktest.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "382d7f1e82ca01d05dcb0f42d8c03ab0d681a9be",
        "filename": "qa/rpc-tests/p2p-mempool.py",
        "status": "added",
        "additions": 102,
        "deletions": 0,
        "changes": 102,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/p2p-mempool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/p2p-mempool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-mempool.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "c2ea20bb845c870552ac50d4c3c34b4870a3d4e3",
        "filename": "qa/rpc-tests/p2p-segwit.py",
        "status": "added",
        "additions": 1790,
        "deletions": 0,
        "changes": 1790,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-segwit.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "fc3eddddee17b18fe93b396f0d3f91ea43efa1e5",
        "filename": "qa/rpc-tests/p2p-versionbits-warning.py",
        "status": "added",
        "additions": 165,
        "deletions": 0,
        "changes": 165,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/p2p-versionbits-warning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/p2p-versionbits-warning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-versionbits-warning.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "e1771231c066e97b432ebb23768663e371fecb25",
        "filename": "qa/rpc-tests/prioritise_transaction.py",
        "status": "modified",
        "additions": 74,
        "deletions": 78,
        "changes": 152,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/prioritise_transaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/prioritise_transaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/prioritise_transaction.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "27160cae077621fff229a23e3f665ab35bfa22b1",
        "filename": "qa/rpc-tests/proxy_test.py",
        "status": "modified",
        "additions": 55,
        "deletions": 40,
        "changes": 95,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/proxy_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/proxy_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/proxy_test.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "287dbc776e1b2d90c1f0d8ed20fbdf15224ab174",
        "filename": "qa/rpc-tests/pruning.py",
        "status": "modified",
        "additions": 49,
        "deletions": 64,
        "changes": 113,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/pruning.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "ab6d2e8def14891f25d607f8214540cd5263d47c",
        "filename": "qa/rpc-tests/rawtransactions.py",
        "status": "modified",
        "additions": 37,
        "deletions": 20,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/rawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/rawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rawtransactions.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "4f17b661cb28d78123632b69efe42a57b1faa7c5",
        "filename": "qa/rpc-tests/receivedby.py",
        "status": "modified",
        "additions": 19,
        "deletions": 35,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/receivedby.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/receivedby.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/receivedby.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "25cf4c1679b984b86d261b67eb66127a09b3abe1",
        "filename": "qa/rpc-tests/reindex.py",
        "status": "modified",
        "additions": 29,
        "deletions": 17,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/reindex.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/reindex.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/reindex.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "34c0f9d7957c71257e2d5d5a49e97b116dd5e02e",
        "filename": "qa/rpc-tests/replace-by-fee.py",
        "status": "modified",
        "additions": 118,
        "deletions": 45,
        "changes": 163,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/replace-by-fee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/replace-by-fee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/replace-by-fee.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "b769cd71f20501978a28a07ced46bdadb4f6bcab",
        "filename": "qa/rpc-tests/rest.py",
        "status": "modified",
        "additions": 35,
        "deletions": 43,
        "changes": 78,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rest.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "d78d0b884e9ed97347ff5e7729a9a7c2d81b3bd4",
        "filename": "qa/rpc-tests/rpcbind_test.py",
        "status": "modified",
        "additions": 92,
        "deletions": 136,
        "changes": 228,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/rpcbind_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/rpcbind_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rpcbind_test.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "745a1d47508cb0583a79353b83e5d8b2ba053fff",
        "filename": "qa/rpc-tests/segwit.py",
        "status": "added",
        "additions": 246,
        "deletions": 0,
        "changes": 246,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/segwit.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "81b2442e6ae6713ca6aa7f65099460d76a0f15c3",
        "filename": "qa/rpc-tests/sendheaders.py",
        "status": "modified",
        "additions": 164,
        "deletions": 75,
        "changes": 239,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/sendheaders.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/sendheaders.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/sendheaders.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "31b6f14a26562fbdb251cefb432fbf5a183e99bd",
        "filename": "qa/rpc-tests/signmessages.py",
        "status": "added",
        "additions": 41,
        "deletions": 0,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/signmessages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/signmessages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/signmessages.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "c61a280616cf7194a4bca1ba23ca842dc2b6aced",
        "filename": "qa/rpc-tests/signrawtransactions.py",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/signrawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/signrawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/signrawtransactions.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "d76fba4b075ce0176990ab9140e4bede577e2bd6",
        "filename": "qa/rpc-tests/smartfees.py",
        "status": "modified",
        "additions": 17,
        "deletions": 13,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/smartfees.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/smartfees.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/smartfees.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "fd7f32b5c63536190eadb4d9733125b3c255ea52",
        "filename": "qa/rpc-tests/test_framework/authproxy.py",
        "status": "modified",
        "additions": 28,
        "deletions": 12,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/test_framework/authproxy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/test_framework/authproxy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/authproxy.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "ef800e4d5736956b68f8d963347eeb6b03745fd7",
        "filename": "qa/rpc-tests/test_framework/bignum.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/test_framework/bignum.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/test_framework/bignum.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/bignum.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "28a6b92b8192f52daad39c1145770691854dafd6",
        "filename": "qa/rpc-tests/test_framework/blockstore.py",
        "status": "modified",
        "additions": 52,
        "deletions": 26,
        "changes": 78,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/test_framework/blockstore.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/test_framework/blockstore.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/blockstore.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "f69958823c9d9d8ecc5134a772d408647ccb26d3",
        "filename": "qa/rpc-tests/test_framework/blocktools.py",
        "status": "modified",
        "additions": 49,
        "deletions": 11,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/test_framework/blocktools.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/test_framework/blocktools.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/blocktools.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "7c92d3f8289171701f282efe5fe221cd125876bb",
        "filename": "qa/rpc-tests/test_framework/comptool.py",
        "status": "modified",
        "additions": 50,
        "deletions": 21,
        "changes": 71,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/test_framework/comptool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/test_framework/comptool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/comptool.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "13b33869f5472d357c4d676a4dc1ebf197a42d31",
        "filename": "qa/rpc-tests/test_framework/coverage.py",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/test_framework/coverage.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/test_framework/coverage.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/coverage.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "4d238c08d9c3fcd270725105bd8eabff2a28fadc",
        "filename": "qa/rpc-tests/test_framework/mininode.py",
        "status": "modified",
        "additions": 772,
        "deletions": 253,
        "changes": 1025,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/mininode.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "b92a9f6e1ce439fc88a7f27055c6b7c623d6e4b2",
        "filename": "qa/rpc-tests/test_framework/netutil.py",
        "status": "modified",
        "additions": 25,
        "deletions": 9,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/test_framework/netutil.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/test_framework/netutil.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/netutil.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "83bbf2047964cbdb4dcc2870dff5e59a4d64721a",
        "filename": "qa/rpc-tests/test_framework/script.py",
        "status": "modified",
        "additions": 70,
        "deletions": 19,
        "changes": 89,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/test_framework/script.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/test_framework/script.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/script.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "9c0574bd931758cca0b1583da0269bec96b5d8bf",
        "filename": "qa/rpc-tests/test_framework/siphash.py",
        "status": "added",
        "additions": 64,
        "deletions": 0,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/test_framework/siphash.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/test_framework/siphash.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/siphash.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "372f5ed605e4ab87f8eff1e3e8ac522bef56d5cf",
        "filename": "qa/rpc-tests/test_framework/socks5.py",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/test_framework/socks5.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/test_framework/socks5.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/socks5.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "e6fc5fd8a20e48683352f611a1bdc6d60e375066",
        "filename": "qa/rpc-tests/test_framework/test_framework.py",
        "status": "modified",
        "additions": 47,
        "deletions": 29,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/test_framework.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "c6b0367b419d6c73d2a3770c74f87dcb19075f35",
        "filename": "qa/rpc-tests/test_framework/util.py",
        "status": "modified",
        "additions": 320,
        "deletions": 78,
        "changes": 398,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/util.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "22f850ece64a2ce22112323e72cdaf63e5132c80",
        "filename": "qa/rpc-tests/txn_clone.py",
        "status": "modified",
        "additions": 10,
        "deletions": 20,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/txn_clone.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/txn_clone.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/txn_clone.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "84944c3c1943aaf8c9b1c759eb6cacfdd5198019",
        "filename": "qa/rpc-tests/txn_doublespend.py",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/txn_doublespend.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/txn_doublespend.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/txn_doublespend.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "c51181e4f8e9bf700208d91aacf191900985c789",
        "filename": "qa/rpc-tests/wallet-accounts.py",
        "status": "added",
        "additions": 94,
        "deletions": 0,
        "changes": 94,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/wallet-accounts.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/wallet-accounts.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet-accounts.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "a37096a40ce9472c38bbbf15dfd029a4bfb75172",
        "filename": "qa/rpc-tests/wallet-dump.py",
        "status": "added",
        "additions": 104,
        "deletions": 0,
        "changes": 104,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/wallet-dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/wallet-dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet-dump.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "a49d91f6f4f53e9d257bb67c23282ef7b9c4dadf",
        "filename": "qa/rpc-tests/wallet-hd.py",
        "status": "added",
        "additions": 87,
        "deletions": 0,
        "changes": 87,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/wallet-hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/wallet-hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet-hd.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "e43f6ea5d225ee2b8276412e27221f68ea8f59f8",
        "filename": "qa/rpc-tests/wallet.py",
        "status": "modified",
        "additions": 139,
        "deletions": 58,
        "changes": 197,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "e12cb10a50ad74769db771ddb0197c29c5cbf700",
        "filename": "qa/rpc-tests/walletbackup.py",
        "status": "modified",
        "additions": 11,
        "deletions": 9,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/walletbackup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/walletbackup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/walletbackup.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "17ba53a844b4fa78a9072c20be882e95c8d3cc2c",
        "filename": "qa/rpc-tests/zapwallettxes.py",
        "status": "modified",
        "additions": 10,
        "deletions": 15,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/zapwallettxes.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/zapwallettxes.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/zapwallettxes.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "3a116317fed969f0d948e664b94a1a80d826327e",
        "filename": "qa/rpc-tests/zmq_test.py",
        "status": "modified",
        "additions": 38,
        "deletions": 29,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/zmq_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/qa/rpc-tests/zmq_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/zmq_test.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "eecac4bd00b920327a61ce8167e785c57e0aecd3",
        "filename": "share/genbuild.sh",
        "status": "modified",
        "additions": 4,
        "deletions": 7,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/share/genbuild.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/share/genbuild.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/genbuild.sh?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "6a34d64cd5323de433a9274e559fb3cb52090e0b",
        "filename": "share/qt/Info.plist.in",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/share/qt/Info.plist.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/share/qt/Info.plist.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/qt/Info.plist.in?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "92e0df259e79040f0ee33c99ffc762a3c878f277",
        "filename": "share/qt/extract_strings_qt.py",
        "status": "modified",
        "additions": 17,
        "deletions": 5,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/share/qt/extract_strings_qt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/share/qt/extract_strings_qt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/qt/extract_strings_qt.py?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "865fe865550ae21f2eec4bb7c8f8c1817bdf1bce",
        "filename": "share/qt/protobuf.pri",
        "status": "removed",
        "additions": 0,
        "deletions": 35,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9df179d2e3abdee7d1f255d9be17c8b72dff06a/share/qt/protobuf.pri",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9df179d2e3abdee7d1f255d9be17c8b72dff06a/share/qt/protobuf.pri",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/qt/protobuf.pri?ref=e9df179d2e3abdee7d1f255d9be17c8b72dff06a"
      },
      {
        "sha": "12a8e6fb0cc5b9458cf1ca430ed8e497096dfeeb",
        "filename": "share/rpcuser/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/share/rpcuser/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/share/rpcuser/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/rpcuser/README.md?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "dd42085a27609232a3e2c3c35085077e3cfb777e",
        "filename": "share/setup.nsi.in",
        "status": "modified",
        "additions": 17,
        "deletions": 19,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/share/setup.nsi.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/share/setup.nsi.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/setup.nsi.in?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "e7f1d82b8b88aa785741b8743257cbb94e9d1567",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 137,
        "deletions": 114,
        "changes": 251,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "8c024a8c4ad81804750d61aafab3e2a257fe4a43",
        "filename": "src/Makefile.bench.include",
        "status": "modified",
        "additions": 11,
        "deletions": 3,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/src/Makefile.bench.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/src/Makefile.bench.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.bench.include?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "358f39cbef5dd3ffdb0c929b6f0474180b52363f",
        "filename": "src/Makefile.leveldb.include",
        "status": "added",
        "additions": 137,
        "deletions": 0,
        "changes": 137,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/src/Makefile.leveldb.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/src/Makefile.leveldb.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.leveldb.include?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "a2ed4f47d8de7b46ef2268a1b82b0fe381101efb",
        "filename": "src/Makefile.qt.include",
        "status": "modified",
        "additions": 35,
        "deletions": 11,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/src/Makefile.qt.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/src/Makefile.qt.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qt.include?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "cb310d5a1b157be16b61257f59e3fa8ab4413819",
        "filename": "src/Makefile.qttest.include",
        "status": "modified",
        "additions": 10,
        "deletions": 2,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/src/Makefile.qttest.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/src/Makefile.qttest.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qttest.include?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "5ce1bbb8963c1a510590a9612ea6ccffb9cbb0cf",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 26,
        "deletions": 10,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "ddf41f92de0eaba944b32e674f2e4c431292e040",
        "filename": "src/addrdb.cpp",
        "status": "added",
        "additions": 218,
        "deletions": 0,
        "changes": 218,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512fc422ca845b1c79214590caec51f9b31eb8bb/src/addrdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512fc422ca845b1c79214590caec51f9b31eb8bb/src/addrdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrdb.cpp?ref=512fc422ca845b1c79214590caec51f9b31eb8bb"
      }
    ]
  },
  {
    "sha": "83518c4117f4d7783bf1ef1dbec6b7a90e279c8d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MzUxOGM0MTE3ZjRkNzc4M2JmMWVmMWRiZWM2YjdhOTBlMjc5Yzhk",
    "commit": {
      "author": {
        "name": "S. Matthew English",
        "email": "s-matthew-english@users.noreply.github.com",
        "date": "2016-10-11T09:34:27Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-10-11T09:34:27Z"
      },
      "message": "Update bitcoin-qt.desktop\n\nI'd like to get the hang of how to make pull requests and contribute. there was no German there, but Turkish and French- many Bitcoiners are German- so- maybe it would be useful",
      "tree": {
        "sha": "a58467e36a00e03df7310af0e46c58c148c669e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a58467e36a00e03df7310af0e46c58c148c669e5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/83518c4117f4d7783bf1ef1dbec6b7a90e279c8d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/83518c4117f4d7783bf1ef1dbec6b7a90e279c8d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/83518c4117f4d7783bf1ef1dbec6b7a90e279c8d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/83518c4117f4d7783bf1ef1dbec6b7a90e279c8d/comments",
    "author": null,
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d0754799698de2c032abcb8198ee5d5401063213",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0754799698de2c032abcb8198ee5d5401063213",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d0754799698de2c032abcb8198ee5d5401063213"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "63bbdb732d0baad13f736e192bd5bf3eafdc8f07",
        "filename": "contrib/debian/bitcoin-qt.desktop",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/83518c4117f4d7783bf1ef1dbec6b7a90e279c8d/contrib/debian/bitcoin-qt.desktop",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/83518c4117f4d7783bf1ef1dbec6b7a90e279c8d/contrib/debian/bitcoin-qt.desktop",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/bitcoin-qt.desktop?ref=83518c4117f4d7783bf1ef1dbec6b7a90e279c8d",
        "patch": "@@ -3,6 +3,7 @@ Encoding=UTF-8\n Name=Bitcoin\n Comment=Bitcoin P2P Cryptocurrency\n Comment[fr]=Bitcoin, monnaie virtuelle cryptographique pair \u00e0 pair\n+Comment[de]=Bitcoin, eine virtuelle, kryptographische peer-to-peer W\u00e4hrung\n Comment[tr]=Bitcoin, e\u015ften e\u015fe kriptografik sanal para birimi\n Exec=bitcoin-qt %u\n Terminal=false"
      }
    ]
  },
  {
    "sha": "f1cb6bf8c0be7272775611a8da88f304d68b04ba",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMWNiNmJmOGMwYmU3MjcyNzc1NjExYThkYTg4ZjMwNGQ2OGIwNGJh",
    "commit": {
      "author": {
        "name": "S. Matthew English",
        "email": "s-matthew-english@users.noreply.github.com",
        "date": "2016-10-11T12:45:27Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-10-11T12:45:27Z"
      },
      "message": "Update bitcoin-qt.desktop\n\nupdated in accordance with advice from MarcoFalke",
      "tree": {
        "sha": "96c7308fa8feb7a6290a6aef862ed39489cf835c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/96c7308fa8feb7a6290a6aef862ed39489cf835c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f1cb6bf8c0be7272775611a8da88f304d68b04ba",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f1cb6bf8c0be7272775611a8da88f304d68b04ba",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f1cb6bf8c0be7272775611a8da88f304d68b04ba",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f1cb6bf8c0be7272775611a8da88f304d68b04ba/comments",
    "author": null,
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "83518c4117f4d7783bf1ef1dbec6b7a90e279c8d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/83518c4117f4d7783bf1ef1dbec6b7a90e279c8d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/83518c4117f4d7783bf1ef1dbec6b7a90e279c8d"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "c23c7ebb01872c3f58898a2f29373ad9c3b38fca",
        "filename": "contrib/debian/bitcoin-qt.desktop",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1cb6bf8c0be7272775611a8da88f304d68b04ba/contrib/debian/bitcoin-qt.desktop",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1cb6bf8c0be7272775611a8da88f304d68b04ba/contrib/debian/bitcoin-qt.desktop",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/bitcoin-qt.desktop?ref=f1cb6bf8c0be7272775611a8da88f304d68b04ba",
        "patch": "@@ -1,9 +1,9 @@\n [Desktop Entry]\n Encoding=UTF-8\n Name=Bitcoin\n-Comment=Bitcoin P2P Cryptocurrency\n+Comment=Connect to the Bitcoin P2P Network\n Comment[fr]=Bitcoin, monnaie virtuelle cryptographique pair \u00e0 pair\n-Comment[de]=Bitcoin, eine virtuelle, kryptographische peer-to-peer W\u00e4hrung\n+Comment[de]=Bitcoin, eine virtuelle kryptographische peer-to-peer W\u00e4hrung\n Comment[tr]=Bitcoin, e\u015ften e\u015fe kriptografik sanal para birimi\n Exec=bitcoin-qt %u\n Terminal=false"
      }
    ]
  },
  {
    "sha": "17d5ed68b033d503ff2dbc71d2abff89f5140e94",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxN2Q1ZWQ2OGIwMzNkNTAzZmYyZGJjNzFkMmFiZmY4OWY1MTQwZTk0",
    "commit": {
      "author": {
        "name": "S. Matthew English",
        "email": "s-matthew-english@users.noreply.github.com",
        "date": "2016-10-11T15:06:22Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-10-11T15:06:22Z"
      },
      "message": "Update bitcoin-qt.desktop\n\nthen should we perhaps remove the French and Turkish until they also match the English and German?",
      "tree": {
        "sha": "94193efda963f68842537323cf0cfec6ceb478ef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/94193efda963f68842537323cf0cfec6ceb478ef"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/17d5ed68b033d503ff2dbc71d2abff89f5140e94",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17d5ed68b033d503ff2dbc71d2abff89f5140e94",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/17d5ed68b033d503ff2dbc71d2abff89f5140e94",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17d5ed68b033d503ff2dbc71d2abff89f5140e94/comments",
    "author": null,
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f1cb6bf8c0be7272775611a8da88f304d68b04ba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f1cb6bf8c0be7272775611a8da88f304d68b04ba",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f1cb6bf8c0be7272775611a8da88f304d68b04ba"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "ecf24b8236af91e97c6f0b54538054c995a5e4e5",
        "filename": "contrib/debian/bitcoin-qt.desktop",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/17d5ed68b033d503ff2dbc71d2abff89f5140e94/contrib/debian/bitcoin-qt.desktop",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/17d5ed68b033d503ff2dbc71d2abff89f5140e94/contrib/debian/bitcoin-qt.desktop",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/bitcoin-qt.desktop?ref=17d5ed68b033d503ff2dbc71d2abff89f5140e94",
        "patch": "@@ -2,8 +2,8 @@\n Encoding=UTF-8\n Name=Bitcoin\n Comment=Connect to the Bitcoin P2P Network\n+Comment[de]=Verbinde mit dem Bitcoin peer-to-peer Netzwerk\n Comment[fr]=Bitcoin, monnaie virtuelle cryptographique pair \u00e0 pair\n-Comment[de]=Bitcoin, eine virtuelle kryptographische peer-to-peer W\u00e4hrung\n Comment[tr]=Bitcoin, e\u015ften e\u015fe kriptografik sanal para birimi\n Exec=bitcoin-qt %u\n Terminal=false"
      }
    ]
  },
  {
    "sha": "89fd567135257f4f9c81d3688cc08f5ea76ad3d2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4OWZkNTY3MTM1MjU3ZjRmOWM4MWQzNjg4Y2MwOGY1ZWE3NmFkM2Qy",
    "commit": {
      "author": {
        "name": "S. Matthew English",
        "email": "s-matthew-english@users.noreply.github.com",
        "date": "2016-10-17T13:00:57Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-10-17T13:00:57Z"
      },
      "message": "Update bitcoin-qt.desktop",
      "tree": {
        "sha": "4436103d2f26ecb1d9739bc795aaa4a74f285d02",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4436103d2f26ecb1d9739bc795aaa4a74f285d02"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/89fd567135257f4f9c81d3688cc08f5ea76ad3d2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89fd567135257f4f9c81d3688cc08f5ea76ad3d2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/89fd567135257f4f9c81d3688cc08f5ea76ad3d2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89fd567135257f4f9c81d3688cc08f5ea76ad3d2/comments",
    "author": null,
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "17d5ed68b033d503ff2dbc71d2abff89f5140e94",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17d5ed68b033d503ff2dbc71d2abff89f5140e94",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/17d5ed68b033d503ff2dbc71d2abff89f5140e94"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "593d7584ab06d3147dfa56c708d250041472fd32",
        "filename": "contrib/debian/bitcoin-qt.desktop",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/89fd567135257f4f9c81d3688cc08f5ea76ad3d2/contrib/debian/bitcoin-qt.desktop",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/89fd567135257f4f9c81d3688cc08f5ea76ad3d2/contrib/debian/bitcoin-qt.desktop",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/bitcoin-qt.desktop?ref=89fd567135257f4f9c81d3688cc08f5ea76ad3d2",
        "patch": "@@ -1,6 +1,6 @@\n [Desktop Entry]\n Encoding=UTF-8\n-Name=Bitcoin\n+Name=Bitcoin Core\n Comment=Connect to the Bitcoin P2P Network\n Comment[de]=Verbinde mit dem Bitcoin peer-to-peer Netzwerk\n Comment[fr]=Bitcoin, monnaie virtuelle cryptographique pair \u00e0 pair"
      }
    ]
  },
  {
    "sha": "adecc55bb622c27096d11e8ae04bf918cb8e4f7b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZGVjYzU1YmI2MjJjMjcwOTZkMTFlOGFlMDRiZjkxOGNiOGU0Zjdi",
    "commit": {
      "author": {
        "name": "matthias",
        "email": "s.matthew.english@gmail.com",
        "date": "2016-10-17T13:52:09Z"
      },
      "committer": {
        "name": "matthias",
        "email": "s.matthew.english@gmail.com",
        "date": "2016-10-17T13:52:09Z"
      },
      "message": "Merge branch 'patch-4' of https://github.com/s-matthew-english/bitcoin",
      "tree": {
        "sha": "9b952f3226bb5471263d659d5aaf3a77b27ab27a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9b952f3226bb5471263d659d5aaf3a77b27ab27a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/adecc55bb622c27096d11e8ae04bf918cb8e4f7b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/adecc55bb622c27096d11e8ae04bf918cb8e4f7b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/adecc55bb622c27096d11e8ae04bf918cb8e4f7b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/adecc55bb622c27096d11e8ae04bf918cb8e4f7b/comments",
    "author": {
      "login": "smatthewenglish",
      "id": 9053984,
      "node_id": "MDQ6VXNlcjkwNTM5ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9053984?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/smatthewenglish",
      "html_url": "https://github.com/smatthewenglish",
      "followers_url": "https://api.github.com/users/smatthewenglish/followers",
      "following_url": "https://api.github.com/users/smatthewenglish/following{/other_user}",
      "gists_url": "https://api.github.com/users/smatthewenglish/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/smatthewenglish/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/smatthewenglish/subscriptions",
      "organizations_url": "https://api.github.com/users/smatthewenglish/orgs",
      "repos_url": "https://api.github.com/users/smatthewenglish/repos",
      "events_url": "https://api.github.com/users/smatthewenglish/events{/privacy}",
      "received_events_url": "https://api.github.com/users/smatthewenglish/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "smatthewenglish",
      "id": 9053984,
      "node_id": "MDQ6VXNlcjkwNTM5ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9053984?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/smatthewenglish",
      "html_url": "https://github.com/smatthewenglish",
      "followers_url": "https://api.github.com/users/smatthewenglish/followers",
      "following_url": "https://api.github.com/users/smatthewenglish/following{/other_user}",
      "gists_url": "https://api.github.com/users/smatthewenglish/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/smatthewenglish/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/smatthewenglish/subscriptions",
      "organizations_url": "https://api.github.com/users/smatthewenglish/orgs",
      "repos_url": "https://api.github.com/users/smatthewenglish/repos",
      "events_url": "https://api.github.com/users/smatthewenglish/events{/privacy}",
      "received_events_url": "https://api.github.com/users/smatthewenglish/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "512fc422ca845b1c79214590caec51f9b31eb8bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/512fc422ca845b1c79214590caec51f9b31eb8bb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/512fc422ca845b1c79214590caec51f9b31eb8bb"
      },
      {
        "sha": "89fd567135257f4f9c81d3688cc08f5ea76ad3d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89fd567135257f4f9c81d3688cc08f5ea76ad3d2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/89fd567135257f4f9c81d3688cc08f5ea76ad3d2"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 3,
      "deletions": 2
    },
    "files": [
      {
        "sha": "593d7584ab06d3147dfa56c708d250041472fd32",
        "filename": "contrib/debian/bitcoin-qt.desktop",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adecc55bb622c27096d11e8ae04bf918cb8e4f7b/contrib/debian/bitcoin-qt.desktop",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adecc55bb622c27096d11e8ae04bf918cb8e4f7b/contrib/debian/bitcoin-qt.desktop",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/bitcoin-qt.desktop?ref=adecc55bb622c27096d11e8ae04bf918cb8e4f7b",
        "patch": "@@ -1,7 +1,8 @@\n [Desktop Entry]\n Encoding=UTF-8\n-Name=Bitcoin\n-Comment=Bitcoin P2P Cryptocurrency\n+Name=Bitcoin Core\n+Comment=Connect to the Bitcoin P2P Network\n+Comment[de]=Verbinde mit dem Bitcoin peer-to-peer Netzwerk\n Comment[fr]=Bitcoin, monnaie virtuelle cryptographique pair \u00e0 pair\n Comment[tr]=Bitcoin, e\u015ften e\u015fe kriptografik sanal para birimi\n Exec=bitcoin-qt %u"
      }
    ]
  },
  {
    "sha": "55d8ffeed69683bd735d90c287b30f10805ae6ca",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NWQ4ZmZlZWQ2OTY4M2JkNzM1ZDkwYzI4N2IzMGYxMDgwNWFlNmNh",
    "commit": {
      "author": {
        "name": "matthias",
        "email": "s.matthew.english@gmail.com",
        "date": "2016-10-17T14:06:59Z"
      },
      "committer": {
        "name": "matthias",
        "email": "s.matthew.english@gmail.com",
        "date": "2016-10-17T14:06:59Z"
      },
      "message": "Merge branch 'master' of https://github.com/bitcoin/bitcoin",
      "tree": {
        "sha": "59b6babe9e5d62e03c0a7474234dbfc37a85680f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/59b6babe9e5d62e03c0a7474234dbfc37a85680f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/55d8ffeed69683bd735d90c287b30f10805ae6ca",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55d8ffeed69683bd735d90c287b30f10805ae6ca",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/55d8ffeed69683bd735d90c287b30f10805ae6ca",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55d8ffeed69683bd735d90c287b30f10805ae6ca/comments",
    "author": {
      "login": "smatthewenglish",
      "id": 9053984,
      "node_id": "MDQ6VXNlcjkwNTM5ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9053984?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/smatthewenglish",
      "html_url": "https://github.com/smatthewenglish",
      "followers_url": "https://api.github.com/users/smatthewenglish/followers",
      "following_url": "https://api.github.com/users/smatthewenglish/following{/other_user}",
      "gists_url": "https://api.github.com/users/smatthewenglish/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/smatthewenglish/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/smatthewenglish/subscriptions",
      "organizations_url": "https://api.github.com/users/smatthewenglish/orgs",
      "repos_url": "https://api.github.com/users/smatthewenglish/repos",
      "events_url": "https://api.github.com/users/smatthewenglish/events{/privacy}",
      "received_events_url": "https://api.github.com/users/smatthewenglish/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "smatthewenglish",
      "id": 9053984,
      "node_id": "MDQ6VXNlcjkwNTM5ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9053984?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/smatthewenglish",
      "html_url": "https://github.com/smatthewenglish",
      "followers_url": "https://api.github.com/users/smatthewenglish/followers",
      "following_url": "https://api.github.com/users/smatthewenglish/following{/other_user}",
      "gists_url": "https://api.github.com/users/smatthewenglish/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/smatthewenglish/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/smatthewenglish/subscriptions",
      "organizations_url": "https://api.github.com/users/smatthewenglish/orgs",
      "repos_url": "https://api.github.com/users/smatthewenglish/repos",
      "events_url": "https://api.github.com/users/smatthewenglish/events{/privacy}",
      "received_events_url": "https://api.github.com/users/smatthewenglish/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "adecc55bb622c27096d11e8ae04bf918cb8e4f7b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/adecc55bb622c27096d11e8ae04bf918cb8e4f7b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/adecc55bb622c27096d11e8ae04bf918cb8e4f7b"
      },
      {
        "sha": "c90111314435ab67808a89cac1a664cb19eafd61",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c90111314435ab67808a89cac1a664cb19eafd61",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c90111314435ab67808a89cac1a664cb19eafd61"
      }
    ],
    "stats": {
      "total": 1570,
      "additions": 1454,
      "deletions": 116
    },
    "files": [
      {
        "sha": "06fcd8dd81301055f79cb048e4183a93a4302e5e",
        "filename": "CONTRIBUTING.md",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55d8ffeed69683bd735d90c287b30f10805ae6ca/CONTRIBUTING.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55d8ffeed69683bd735d90c287b30f10805ae6ca/CONTRIBUTING.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/CONTRIBUTING.md?ref=55d8ffeed69683bd735d90c287b30f10805ae6ca",
        "patch": "@@ -178,7 +178,9 @@ language is used within pull-request comments:\n \n   - ACK means \"I have tested the code and I agree it should be merged\";\n   - NACK means \"I disagree this should be merged\", and must be accompanied by\n-    sound technical justification. NACKs without accompanying reasoning may be disregarded;\n+    sound technical justification (or in certain cases of copyright/patent/licensing\n+    issues, legal justification). NACKs without accompanying reasoning may be\n+    disregarded;\n   - utACK means \"I have not tested the code, but I have reviewed it and it looks\n     OK, I agree it can be merged\";\n   - Concept ACK means \"I agree in the general principle of this pull request\";"
      },
      {
        "sha": "650c94fa64752a362a34eb6d489c194255ecfc51",
        "filename": "build-aux/m4/ax_boost_base.m4",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55d8ffeed69683bd735d90c287b30f10805ae6ca/build-aux/m4/ax_boost_base.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55d8ffeed69683bd735d90c287b30f10805ae6ca/build-aux/m4/ax_boost_base.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/ax_boost_base.m4?ref=55d8ffeed69683bd735d90c287b30f10805ae6ca",
        "patch": "@@ -33,7 +33,7 @@\n #   and this notice are preserved. This file is offered as-is, without any\n #   warranty.\n \n-#serial 26\n+#serial 27\n \n AC_DEFUN([AX_BOOST_BASE],\n [\n@@ -96,7 +96,7 @@ if test \"x$want_boost\" = \"xyes\"; then\n         libsubdirs=\"lib64 libx32 lib lib64\"\n         ;;\n       ppc64|s390x|sparc64|aarch64|ppc64le)\n-        libsubdirs=\"lib64 lib lib64 ppc64le\"\n+        libsubdirs=\"lib64 lib lib64\"\n         ;;\n     esac\n "
      },
      {
        "sha": "705327e816d94c437251acda2848f4470b7e5b12",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55d8ffeed69683bd735d90c287b30f10805ae6ca/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55d8ffeed69683bd735d90c287b30f10805ae6ca/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=55d8ffeed69683bd735d90c287b30f10805ae6ca",
        "patch": "@@ -589,8 +589,11 @@ fi\n \n if test x$use_boost = xyes; then\n \n+dnl Minimum required Boost version\n+define(MINIMUM_REQUIRED_BOOST, 1.47.0)\n+\n dnl Check for boost libs\n-AX_BOOST_BASE\n+AX_BOOST_BASE([MINIMUM_REQUIRED_BOOST])\n AX_BOOST_SYSTEM\n AX_BOOST_FILESYSTEM\n AX_BOOST_PROGRAM_OPTIONS"
      },
      {
        "sha": "5202072f8b8e1f446553dbbce6523b29c735345d",
        "filename": "doc/build-unix.md",
        "status": "modified",
        "additions": 32,
        "deletions": 0,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55d8ffeed69683bd735d90c287b30f10805ae6ca/doc/build-unix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55d8ffeed69683bd735d90c287b30f10805ae6ca/doc/build-unix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-unix.md?ref=55d8ffeed69683bd735d90c287b30f10805ae6ca",
        "patch": "@@ -308,3 +308,35 @@ To build executables for ARM:\n \n \n For further documentation on the depends system see [README.md](../depends/README.md) in the depends directory.\n+\n+Building on FreeBSD\n+--------------------\n+\n+(Updated as of FreeBSD 10.3)\n+\n+Clang is installed by default as `cc` compiler, this makes it easier to get\n+started than on [OpenBSD](build-openbsd.md). Installing dependencies:\n+\n+    pkg install autoconf automake libtool pkgconf\n+    pkg install boost-libs openssl libevent2\n+\n+(`libressl` instead of `openssl` will also work)\n+\n+For the wallet (optional):\n+\n+    pkg install db5\n+\n+This will give a warning \"configure: WARNING: Found Berkeley DB other\n+than 4.8; wallets opened by this build will not be portable!\", but as FreeBSD never\n+had a binary release, this may not matter. If backwards compatibility\n+with 4.8-built Bitcoin Core is needed follow the steps under \"Berkeley DB\" above.\n+\n+Then build using:\n+\n+    ./autogen.sh\n+    ./configure --with-incompatible-bdb CPPFLAGS=-I/usr/local/include/db5 LDFLAGS=-L/usr/local/lib/db5\n+    make\n+\n+*Note on debugging*: The version of `gdb` installed by default is [ancient and considered harmful](https://wiki.freebsd.org/GdbRetirement).\n+It is not suitable for debugging a multi-threaded C++ program, not even for getting backtraces. Please install the package `gdb` and\n+use the versioned gdb command e.g. `gdb7111`."
      },
      {
        "sha": "131654c333d4daa48687c47b32411b2efc84b05c",
        "filename": "qa/rpc-tests/p2p-compactblocks.py",
        "status": "modified",
        "additions": 21,
        "deletions": 10,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55d8ffeed69683bd735d90c287b30f10805ae6ca/qa/rpc-tests/p2p-compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55d8ffeed69683bd735d90c287b30f10805ae6ca/qa/rpc-tests/p2p-compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-compactblocks.py?ref=55d8ffeed69683bd735d90c287b30f10805ae6ca",
        "patch": "@@ -6,7 +6,7 @@\n from test_framework.mininode import *\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n-from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.blocktools import create_block, create_coinbase, add_witness_commitment\n from test_framework.siphash import siphash256\n from test_framework.script import CScript, OP_TRUE\n \n@@ -123,11 +123,14 @@ def setup_network(self):\n                  [\"-debug\", \"-logtimemicros\", \"-txindex\"]])\n         connect_nodes(self.nodes[0], 1)\n \n-    def build_block_on_tip(self, node):\n+    def build_block_on_tip(self, node, segwit=False):\n         height = node.getblockcount()\n         tip = node.getbestblockhash()\n         mtp = node.getblockheader(tip)['mediantime']\n         block = create_block(int(tip, 16), create_coinbase(height + 1), mtp + 1)\n+        block.nVersion = 4\n+        if segwit:\n+            add_witness_commitment(block)\n         block.solve()\n         return block\n \n@@ -380,11 +383,11 @@ def test_compactblock_construction(self, node, test_node, version, use_witness_a\n     # Post-segwit: upgraded nodes would only make this request of cb-version-2,\n     # NODE_WITNESS peers.  Unupgraded nodes would still make this request of\n     # any cb-version-1-supporting peer.\n-    def test_compactblock_requests(self, node, test_node):\n+    def test_compactblock_requests(self, node, test_node, version, segwit):\n         # Try announcing a block with an inv or header, expect a compactblock\n         # request\n         for announce in [\"inv\", \"header\"]:\n-            block = self.build_block_on_tip(node)\n+            block = self.build_block_on_tip(node, segwit=segwit)\n             with mininode_lock:\n                 test_node.last_getdata = None\n \n@@ -402,7 +405,12 @@ def test_compactblock_requests(self, node, test_node):\n             comp_block = HeaderAndShortIDs()\n             comp_block.header = CBlockHeader(block)\n             comp_block.nonce = 0\n-            comp_block.shortids = [1]  # this is useless, and wrong\n+            [k0, k1] = comp_block.get_siphash_keys()\n+            coinbase_hash = block.vtx[0].sha256\n+            if version == 2:\n+                coinbase_hash = block.vtx[0].calc_sha256(True)\n+            comp_block.shortids = [\n+                    calculate_shortid(k0, k1, coinbase_hash) ]\n             test_node.send_and_ping(msg_cmpctblock(comp_block.to_p2p()))\n             assert_equal(int(node.getbestblockhash(), 16), block.hashPrevBlock)\n             # Expect a getblocktxn message.\n@@ -412,7 +420,10 @@ def test_compactblock_requests(self, node, test_node):\n             assert_equal(absolute_indexes, [0])  # should be a coinbase request\n \n             # Send the coinbase, and verify that the tip advances.\n-            msg = msg_blocktxn()\n+            if version == 2:\n+                msg = msg_witness_blocktxn()\n+            else:\n+                msg = msg_blocktxn()\n             msg.block_transactions.blockhash = block.sha256\n             msg.block_transactions.transactions = [block.vtx[0]]\n             test_node.send_and_ping(msg)\n@@ -748,9 +759,9 @@ def run_test(self):\n         sync_blocks(self.nodes)\n \n         print(\"\\tTesting compactblock requests... \")\n-        self.test_compactblock_requests(self.nodes[0], self.test_node)\n+        self.test_compactblock_requests(self.nodes[0], self.test_node, 1, False)\n         sync_blocks(self.nodes)\n-        self.test_compactblock_requests(self.nodes[1], self.segwit_node)\n+        self.test_compactblock_requests(self.nodes[1], self.segwit_node, 2, False)\n         sync_blocks(self.nodes)\n \n         print(\"\\tTesting getblocktxn requests...\")\n@@ -798,7 +809,7 @@ def run_test(self):\n         sync_blocks(self.nodes)\n \n         print(\"\\tTesting compactblock requests (unupgraded node)... \")\n-        self.test_compactblock_requests(self.nodes[0], self.test_node)\n+        self.test_compactblock_requests(self.nodes[0], self.test_node, 1, True)\n \n         print(\"\\tTesting getblocktxn requests (unupgraded node)...\")\n         self.test_getblocktxn_requests(self.nodes[0], self.test_node, 1)\n@@ -813,7 +824,7 @@ def run_test(self):\n         assert_equal(self.nodes[0].getbestblockhash(), self.nodes[1].getbestblockhash())\n \n         print(\"\\tTesting compactblock requests (segwit node)... \")\n-        self.test_compactblock_requests(self.nodes[1], self.segwit_node)\n+        self.test_compactblock_requests(self.nodes[1], self.segwit_node, 2, True)\n \n         print(\"\\tTesting getblocktxn requests (segwit node)...\")\n         self.test_getblocktxn_requests(self.nodes[1], self.segwit_node, 2)"
      },
      {
        "sha": "09ab1b80fcbb2de0fda73a53a379a26c6197dc6d",
        "filename": "qa/rpc-tests/p2p-segwit.py",
        "status": "modified",
        "additions": 219,
        "deletions": 8,
        "changes": 227,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55d8ffeed69683bd735d90c287b30f10805ae6ca/qa/rpc-tests/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55d8ffeed69683bd735d90c287b30f10805ae6ca/qa/rpc-tests/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-segwit.py?ref=55d8ffeed69683bd735d90c287b30f10805ae6ca",
        "patch": "@@ -166,6 +166,17 @@ def __init__(self, sha256, n, nValue):\n         self.n = n\n         self.nValue = nValue\n \n+# Helper for getting the script associated with a P2PKH\n+def GetP2PKHScript(pubkeyhash):\n+    return CScript([CScriptOp(OP_DUP), CScriptOp(OP_HASH160), pubkeyhash, CScriptOp(OP_EQUALVERIFY), CScriptOp(OP_CHECKSIG)])\n+\n+# Add signature for a P2PK witness program.\n+def sign_P2PK_witness_input(script, txTo, inIdx, hashtype, value, key):\n+    tx_hash = SegwitVersion1SignatureHash(script, txTo, inIdx, hashtype, value)\n+    signature = key.sign(tx_hash) + chr(hashtype).encode('latin-1')\n+    txTo.wit.vtxinwit[inIdx].scriptWitness.stack = [signature, script]\n+    txTo.rehash()\n+\n \n class SegWitTest(BitcoinTestFramework):\n \n@@ -1323,13 +1334,6 @@ def test_signature_version_1(self):\n         sync_blocks(self.nodes)\n         self.utxo.pop(0)\n \n-        # Add signature for a P2PK witness program.\n-        def sign_P2PK_witness_input(script, txTo, inIdx, hashtype, value, key):\n-            tx_hash = SegwitVersion1SignatureHash(script, txTo, inIdx, hashtype, value)\n-            signature = key.sign(tx_hash) + chr(hashtype).encode('latin-1')\n-            txTo.wit.vtxinwit[inIdx].scriptWitness.stack = [signature, script]\n-            txTo.rehash()\n-\n         # Test each hashtype\n         prev_utxo = UTXO(tx.sha256, 0, tx.vout[0].nValue)\n         for sigflag in [ 0, SIGHASH_ANYONECANPAY ]:\n@@ -1443,7 +1447,7 @@ def sign_P2PK_witness_input(script, txTo, inIdx, hashtype, value, key):\n         tx2.vin.append(CTxIn(COutPoint(tx.sha256, 0), b\"\"))\n         tx2.vout.append(CTxOut(tx.vout[0].nValue, CScript([OP_TRUE])))\n \n-        script = CScript([CScriptOp(OP_DUP), CScriptOp(OP_HASH160), pubkeyhash, CScriptOp(OP_EQUALVERIFY), CScriptOp(OP_CHECKSIG)])\n+        script = GetP2PKHScript(pubkeyhash)\n         sig_hash = SegwitVersion1SignatureHash(script, tx2, 0, SIGHASH_ALL, tx.vout[0].nValue)\n         signature = key.sign(sig_hash) + b'\\x01' # 0x1 is SIGHASH_ALL\n \n@@ -1706,6 +1710,211 @@ def test_getblocktemplate_before_lockin(self):\n         assert(block_version & (1 << VB_WITNESS_BIT) != 0)\n         self.nodes[0].setmocktime(0) # undo mocktime\n \n+    # Uncompressed pubkeys are no longer supported in default relay policy,\n+    # but (for now) are still valid in blocks.\n+    def test_uncompressed_pubkey(self):\n+        print(\"\\tTesting uncompressed pubkeys\")\n+        # Segwit transactions using uncompressed pubkeys are not accepted\n+        # under default policy, but should still pass consensus.\n+        key = CECKey()\n+        key.set_secretbytes(b\"9\")\n+        key.set_compressed(False)\n+        pubkey = CPubKey(key.get_pubkey())\n+        assert_equal(len(pubkey), 65) # This should be an uncompressed pubkey\n+\n+        assert(len(self.utxo) > 0)\n+        utxo = self.utxo.pop(0)\n+\n+        # Test 1: P2WPKH\n+        # First create a P2WPKH output that uses an uncompressed pubkey\n+        pubkeyhash = hash160(pubkey)\n+        scriptPKH = CScript([OP_0, pubkeyhash])\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(utxo.sha256, utxo.n), b\"\"))\n+        tx.vout.append(CTxOut(utxo.nValue-1000, scriptPKH))\n+        tx.rehash()\n+\n+        # Confirm it in a block.\n+        block = self.build_next_block()\n+        self.update_witness_block_with_transactions(block, [tx])\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        # Now try to spend it. Send it to a P2WSH output, which we'll\n+        # use in the next test.\n+        witness_program = CScript([pubkey, CScriptOp(OP_CHECKSIG)])\n+        witness_hash = sha256(witness_program)\n+        scriptWSH = CScript([OP_0, witness_hash])\n+\n+        tx2 = CTransaction()\n+        tx2.vin.append(CTxIn(COutPoint(tx.sha256, 0), b\"\"))\n+        tx2.vout.append(CTxOut(tx.vout[0].nValue-1000, scriptWSH))\n+        script = GetP2PKHScript(pubkeyhash)\n+        sig_hash = SegwitVersion1SignatureHash(script, tx2, 0, SIGHASH_ALL, tx.vout[0].nValue)\n+        signature = key.sign(sig_hash) + b'\\x01' # 0x1 is SIGHASH_ALL\n+        tx2.wit.vtxinwit.append(CTxInWitness())\n+        tx2.wit.vtxinwit[0].scriptWitness.stack = [ signature, pubkey ]\n+        tx2.rehash()\n+\n+        # Should fail policy test.\n+        self.test_node.test_transaction_acceptance(tx2, True, False, b'non-mandatory-script-verify-flag (Using non-compressed keys in segwit)')\n+        # But passes consensus.\n+        block = self.build_next_block()\n+        self.update_witness_block_with_transactions(block, [tx2])\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        # Test 2: P2WSH\n+        # Try to spend the P2WSH output created in last test.\n+        # Send it to a P2SH(P2WSH) output, which we'll use in the next test.\n+        p2sh_witness_hash = hash160(scriptWSH)\n+        scriptP2SH = CScript([OP_HASH160, p2sh_witness_hash, OP_EQUAL])\n+        scriptSig = CScript([scriptWSH])\n+\n+        tx3 = CTransaction()\n+        tx3.vin.append(CTxIn(COutPoint(tx2.sha256, 0), b\"\"))\n+        tx3.vout.append(CTxOut(tx2.vout[0].nValue-1000, scriptP2SH))\n+        tx3.wit.vtxinwit.append(CTxInWitness())\n+        sign_P2PK_witness_input(witness_program, tx3, 0, SIGHASH_ALL, tx2.vout[0].nValue, key)\n+\n+        # Should fail policy test.\n+        self.test_node.test_transaction_acceptance(tx3, True, False, b'non-mandatory-script-verify-flag (Using non-compressed keys in segwit)')\n+        # But passes consensus.\n+        block = self.build_next_block()\n+        self.update_witness_block_with_transactions(block, [tx3])\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        # Test 3: P2SH(P2WSH)\n+        # Try to spend the P2SH output created in the last test.\n+        # Send it to a P2PKH output, which we'll use in the next test.\n+        scriptPubKey = GetP2PKHScript(pubkeyhash)\n+        tx4 = CTransaction()\n+        tx4.vin.append(CTxIn(COutPoint(tx3.sha256, 0), scriptSig))\n+        tx4.vout.append(CTxOut(tx3.vout[0].nValue-1000, scriptPubKey))\n+        tx4.wit.vtxinwit.append(CTxInWitness())\n+        sign_P2PK_witness_input(witness_program, tx4, 0, SIGHASH_ALL, tx3.vout[0].nValue, key)\n+\n+        # Should fail policy test.\n+        self.test_node.test_transaction_acceptance(tx4, True, False, b'non-mandatory-script-verify-flag (Using non-compressed keys in segwit)')\n+        block = self.build_next_block()\n+        self.update_witness_block_with_transactions(block, [tx4])\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        # Test 4: Uncompressed pubkeys should still be valid in non-segwit\n+        # transactions.\n+        tx5 = CTransaction()\n+        tx5.vin.append(CTxIn(COutPoint(tx4.sha256, 0), b\"\"))\n+        tx5.vout.append(CTxOut(tx4.vout[0].nValue-1000, CScript([OP_TRUE])))\n+        (sig_hash, err) = SignatureHash(scriptPubKey, tx5, 0, SIGHASH_ALL)\n+        signature = key.sign(sig_hash) + b'\\x01' # 0x1 is SIGHASH_ALL\n+        tx5.vin[0].scriptSig = CScript([signature, pubkey])\n+        tx5.rehash()\n+        # Should pass policy and consensus.\n+        self.test_node.test_transaction_acceptance(tx5, True, True)\n+        block = self.build_next_block()\n+        self.update_witness_block_with_transactions(block, [tx5])\n+        self.test_node.test_witness_block(block, accepted=True)\n+        self.utxo.append(UTXO(tx5.sha256, 0, tx5.vout[0].nValue))\n+\n+    def test_non_standard_witness(self):\n+        print(\"\\tTesting detection of non-standard P2WSH witness\")\n+        pad = chr(1).encode('latin-1')\n+\n+        # Create scripts for tests\n+        scripts = []\n+        scripts.append(CScript([OP_DROP] * 100))\n+        scripts.append(CScript([OP_DROP] * 99))\n+        scripts.append(CScript([pad * 59] * 59 + [OP_DROP] * 60))\n+        scripts.append(CScript([pad * 59] * 59 + [OP_DROP] * 61))\n+\n+        p2wsh_scripts = []\n+\n+        assert(len(self.utxo))\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n+\n+        # For each script, generate a pair of P2WSH and P2SH-P2WSH output.\n+        outputvalue = (self.utxo[0].nValue - 1000) // (len(scripts) * 2)\n+        for i in scripts:\n+            p2wsh = CScript([OP_0, sha256(i)])\n+            p2sh = hash160(p2wsh)\n+            p2wsh_scripts.append(p2wsh)\n+            tx.vout.append(CTxOut(outputvalue, p2wsh))\n+            tx.vout.append(CTxOut(outputvalue, CScript([OP_HASH160, p2sh, OP_EQUAL])))\n+        tx.rehash()\n+        txid = tx.sha256\n+        self.test_node.test_transaction_acceptance(tx, with_witness=False, accepted=True)\n+\n+        self.nodes[0].generate(1)\n+        sync_blocks(self.nodes)\n+\n+        # Creating transactions for tests\n+        p2wsh_txs = []\n+        p2sh_txs = []\n+        for i in range(len(scripts)):\n+            p2wsh_tx = CTransaction()\n+            p2wsh_tx.vin.append(CTxIn(COutPoint(txid,i*2)))\n+            p2wsh_tx.vout.append(CTxOut(outputvalue - 5000, CScript([OP_0, hash160(hex_str_to_bytes(\"\"))])))\n+            p2wsh_tx.wit.vtxinwit.append(CTxInWitness())\n+            p2wsh_tx.rehash()\n+            p2wsh_txs.append(p2wsh_tx)\n+            p2sh_tx = CTransaction()\n+            p2sh_tx.vin.append(CTxIn(COutPoint(txid,i*2+1), CScript([p2wsh_scripts[i]])))\n+            p2sh_tx.vout.append(CTxOut(outputvalue - 5000, CScript([OP_0, hash160(hex_str_to_bytes(\"\"))])))\n+            p2sh_tx.wit.vtxinwit.append(CTxInWitness())\n+            p2sh_tx.rehash()\n+            p2sh_txs.append(p2sh_tx)\n+\n+        # Testing native P2WSH\n+        # Witness stack size, excluding witnessScript, over 100 is non-standard\n+        p2wsh_txs[0].wit.vtxinwit[0].scriptWitness.stack = [pad] * 101 + [scripts[0]]\n+        self.std_node.test_transaction_acceptance(p2wsh_txs[0], True, False, b'bad-witness-nonstandard')\n+        # Non-standard nodes should accept\n+        self.test_node.test_transaction_acceptance(p2wsh_txs[0], True, True)\n+\n+        # Stack element size over 80 bytes is non-standard\n+        p2wsh_txs[1].wit.vtxinwit[0].scriptWitness.stack = [pad * 81] * 100 + [scripts[1]]\n+        self.std_node.test_transaction_acceptance(p2wsh_txs[1], True, False, b'bad-witness-nonstandard')\n+        # Non-standard nodes should accept\n+        self.test_node.test_transaction_acceptance(p2wsh_txs[1], True, True)\n+        # Standard nodes should accept if element size is not over 80 bytes\n+        p2wsh_txs[1].wit.vtxinwit[0].scriptWitness.stack = [pad * 80] * 100 + [scripts[1]]\n+        self.std_node.test_transaction_acceptance(p2wsh_txs[1], True, True)\n+\n+        # witnessScript size at 3600 bytes is standard\n+        p2wsh_txs[2].wit.vtxinwit[0].scriptWitness.stack = [pad, pad, scripts[2]]\n+        self.test_node.test_transaction_acceptance(p2wsh_txs[2], True, True)\n+        self.std_node.test_transaction_acceptance(p2wsh_txs[2], True, True)\n+\n+        # witnessScript size at 3601 bytes is non-standard\n+        p2wsh_txs[3].wit.vtxinwit[0].scriptWitness.stack = [pad, pad, pad, scripts[3]]\n+        self.std_node.test_transaction_acceptance(p2wsh_txs[3], True, False, b'bad-witness-nonstandard')\n+        # Non-standard nodes should accept\n+        self.test_node.test_transaction_acceptance(p2wsh_txs[3], True, True)\n+\n+        # Repeating the same tests with P2SH-P2WSH\n+        p2sh_txs[0].wit.vtxinwit[0].scriptWitness.stack = [pad] * 101 + [scripts[0]]\n+        self.std_node.test_transaction_acceptance(p2sh_txs[0], True, False, b'bad-witness-nonstandard')\n+        self.test_node.test_transaction_acceptance(p2sh_txs[0], True, True)\n+        p2sh_txs[1].wit.vtxinwit[0].scriptWitness.stack = [pad * 81] * 100 + [scripts[1]]\n+        self.std_node.test_transaction_acceptance(p2sh_txs[1], True, False, b'bad-witness-nonstandard')\n+        self.test_node.test_transaction_acceptance(p2sh_txs[1], True, True)\n+        p2sh_txs[1].wit.vtxinwit[0].scriptWitness.stack = [pad * 80] * 100 + [scripts[1]]\n+        self.std_node.test_transaction_acceptance(p2sh_txs[1], True, True)\n+        p2sh_txs[2].wit.vtxinwit[0].scriptWitness.stack = [pad, pad, scripts[2]]\n+        self.test_node.test_transaction_acceptance(p2sh_txs[2], True, True)\n+        self.std_node.test_transaction_acceptance(p2sh_txs[2], True, True)\n+        p2sh_txs[3].wit.vtxinwit[0].scriptWitness.stack = [pad, pad, pad, scripts[3]]\n+        self.std_node.test_transaction_acceptance(p2sh_txs[3], True, False, b'bad-witness-nonstandard')\n+        self.test_node.test_transaction_acceptance(p2sh_txs[3], True, True)\n+\n+        self.nodes[0].generate(1)  # Mine and clean up the mempool of non-standard node\n+        # Valid but non-standard transactions in a block should be accepted by standard node\n+        sync_blocks(self.nodes)\n+        assert_equal(len(self.nodes[0].getrawmempool()), 0)\n+        assert_equal(len(self.nodes[1].getrawmempool()), 0)\n+\n+        self.utxo.pop(0)\n+\n+\n     def run_test(self):\n         # Setup the p2p connections and start up the network thread.\n         self.test_node = TestNode() # sets NODE_WITNESS|NODE_NETWORK\n@@ -1777,7 +1986,9 @@ def run_test(self):\n         self.test_standardness_v0(segwit_activated=True)\n         self.test_segwit_versions()\n         self.test_premature_coinbase_witness_spend()\n+        self.test_uncompressed_pubkey()\n         self.test_signature_version_1()\n+        self.test_non_standard_witness()\n         sync_blocks(self.nodes)\n         if self.test_upgrade:\n             self.test_upgrade_after_activation(self.nodes[2], 2)"
      },
      {
        "sha": "41a1b3b20fd00fbb7961b5c8c6b83c3e85297e37",
        "filename": "qa/rpc-tests/segwit.py",
        "status": "modified",
        "additions": 359,
        "deletions": 1,
        "changes": 360,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55d8ffeed69683bd735d90c287b30f10805ae6ca/qa/rpc-tests/segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55d8ffeed69683bd735d90c287b30f10805ae6ca/qa/rpc-tests/segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/segwit.py?ref=55d8ffeed69683bd735d90c287b30f10805ae6ca",
        "patch": "@@ -9,7 +9,10 @@\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n-from test_framework.mininode import sha256, ripemd160\n+from test_framework.mininode import sha256, ripemd160, CTransaction, CTxIn, COutPoint, CTxOut\n+from test_framework.address import script_to_p2sh, key_to_p2pkh\n+from test_framework.script import CScript, OP_HASH160, OP_CHECKSIG, OP_0, hash160, OP_EQUAL, OP_DUP, OP_EQUALVERIFY, OP_1, OP_2, OP_CHECKMULTISIG\n+from io import BytesIO\n \n NODE_0 = 0\n NODE_1 = 1\n@@ -242,5 +245,360 @@ def run_test(self):\n             # This is an acceptable outcome\n             pass\n \n+        print(\"Verify behaviour of importaddress, addwitnessaddress and listunspent\")\n+\n+        # Some public keys to be used later\n+        pubkeys = [\n+            \"0363D44AABD0F1699138239DF2F042C3282C0671CC7A76826A55C8203D90E39242\", # cPiM8Ub4heR9NBYmgVzJQiUH1if44GSBGiqaeJySuL2BKxubvgwb\n+            \"02D3E626B3E616FC8662B489C123349FECBFC611E778E5BE739B257EAE4721E5BF\", # cPpAdHaD6VoYbW78kveN2bsvb45Q7G5PhaPApVUGwvF8VQ9brD97\n+            \"04A47F2CBCEFFA7B9BCDA184E7D5668D3DA6F9079AD41E422FA5FD7B2D458F2538A62F5BD8EC85C2477F39650BD391EA6250207065B2A81DA8B009FC891E898F0E\", # 91zqCU5B9sdWxzMt1ca3VzbtVm2YM6Hi5Rxn4UDtxEaN9C9nzXV\n+            \"02A47F2CBCEFFA7B9BCDA184E7D5668D3DA6F9079AD41E422FA5FD7B2D458F2538\", # cPQFjcVRpAUBG8BA9hzr2yEzHwKoMgLkJZBBtK9vJnvGJgMjzTbd\n+            \"036722F784214129FEB9E8129D626324F3F6716555B603FFE8300BBCB882151228\", # cQGtcm34xiLjB1v7bkRa4V3aAc9tS2UTuBZ1UnZGeSeNy627fN66\n+            \"0266A8396EE936BF6D99D17920DB21C6C7B1AB14C639D5CD72B300297E416FD2EC\", # cTW5mR5M45vHxXkeChZdtSPozrFwFgmEvTNnanCW6wrqwaCZ1X7K\n+            \"0450A38BD7F0AC212FEBA77354A9B036A32E0F7C81FC4E0C5ADCA7C549C4505D2522458C2D9AE3CEFD684E039194B72C8A10F9CB9D4764AB26FCC2718D421D3B84\", # 92h2XPssjBpsJN5CqSP7v9a7cf2kgDunBC6PDFwJHMACM1rrVBJ\n+        ]\n+\n+        # Import a compressed key and an uncompressed key, generate some multisig addresses\n+        self.nodes[0].importprivkey(\"92e6XLo5jVAVwrQKPNTs93oQco8f8sDNBcpv73Dsrs397fQtFQn\")\n+        uncompressed_spendable_address = [\"mvozP4UwyGD2mGZU4D2eMvMLPB9WkMmMQu\"]\n+        self.nodes[0].importprivkey(\"cNC8eQ5dg3mFAVePDX4ddmPYpPbw41r9bm2jd1nLJT77e6RrzTRR\")\n+        compressed_spendable_address = [\"mmWQubrDomqpgSYekvsU7HWEVjLFHAakLe\"]\n+        assert ((self.nodes[0].validateaddress(uncompressed_spendable_address[0])['iscompressed'] == False))\n+        assert ((self.nodes[0].validateaddress(compressed_spendable_address[0])['iscompressed'] == True))\n+\n+        self.nodes[0].importpubkey(pubkeys[0])\n+        compressed_solvable_address = [key_to_p2pkh(pubkeys[0])]\n+        self.nodes[0].importpubkey(pubkeys[1])\n+        compressed_solvable_address.append(key_to_p2pkh(pubkeys[1]))\n+        self.nodes[0].importpubkey(pubkeys[2])\n+        uncompressed_solvable_address = [key_to_p2pkh(pubkeys[2])]\n+\n+        spendable_anytime = []                      # These outputs should be seen anytime after importprivkey and addmultisigaddress\n+        spendable_after_importaddress = []          # These outputs should be seen after importaddress\n+        solvable_after_importaddress = []           # These outputs should be seen after importaddress but not spendable\n+        unsolvable_after_importaddress = []         # These outputs should be unsolvable after importaddress\n+        solvable_anytime = []                       # These outputs should be solvable after importpubkey\n+        unseen_anytime = []                         # These outputs should never be seen\n+\n+        uncompressed_spendable_address.append(self.nodes[0].addmultisigaddress(2, [uncompressed_spendable_address[0], compressed_spendable_address[0]]))\n+        uncompressed_spendable_address.append(self.nodes[0].addmultisigaddress(2, [uncompressed_spendable_address[0], uncompressed_spendable_address[0]]))\n+        compressed_spendable_address.append(self.nodes[0].addmultisigaddress(2, [compressed_spendable_address[0], compressed_spendable_address[0]]))\n+        uncompressed_solvable_address.append(self.nodes[0].addmultisigaddress(2, [compressed_spendable_address[0], uncompressed_solvable_address[0]]))\n+        compressed_solvable_address.append(self.nodes[0].addmultisigaddress(2, [compressed_spendable_address[0], compressed_solvable_address[0]]))\n+        compressed_solvable_address.append(self.nodes[0].addmultisigaddress(2, [compressed_solvable_address[0], compressed_solvable_address[1]]))\n+        unknown_address = [\"mtKKyoHabkk6e4ppT7NaM7THqPUt7AzPrT\", \"2NDP3jLWAFT8NDAiUa9qiE6oBt2awmMq7Dx\"]\n+\n+        # Test multisig_without_privkey\n+        # We have 2 public keys without private keys, use addmultisigaddress to add to wallet.\n+        # Money sent to P2SH of multisig of this should only be seen after importaddress with the BASE58 P2SH address.\n+\n+        multisig_without_privkey_address = self.nodes[0].addmultisigaddress(2, [pubkeys[3], pubkeys[4]])\n+        script = CScript([OP_2, hex_str_to_bytes(pubkeys[3]), hex_str_to_bytes(pubkeys[4]), OP_2, OP_CHECKMULTISIG])\n+        solvable_after_importaddress.append(CScript([OP_HASH160, hash160(script), OP_EQUAL]))\n+\n+        for i in compressed_spendable_address:\n+            v = self.nodes[0].validateaddress(i)\n+            if (v['isscript']):\n+                [bare, p2sh, p2wsh, p2sh_p2wsh] = self.p2sh_address_to_script(v)\n+                # bare and p2sh multisig with compressed keys should always be spendable\n+                spendable_anytime.extend([bare, p2sh])\n+                # P2WSH and P2SH(P2WSH) multisig with compressed keys are spendable after direct importaddress\n+                spendable_after_importaddress.extend([p2wsh, p2sh_p2wsh])\n+            else:\n+                [p2wpkh, p2sh_p2wpkh, p2pk, p2pkh, p2sh_p2pk, p2sh_p2pkh, p2wsh_p2pk, p2wsh_p2pkh, p2sh_p2wsh_p2pk, p2sh_p2wsh_p2pkh] = self.p2pkh_address_to_script(v)\n+                # normal P2PKH and P2PK with compressed keys should always be spendable\n+                spendable_anytime.extend([p2pkh, p2pk])\n+                # P2SH_P2PK, P2SH_P2PKH, and witness with compressed keys are spendable after direct importaddress\n+                spendable_after_importaddress.extend([p2wpkh, p2sh_p2wpkh, p2sh_p2pk, p2sh_p2pkh, p2wsh_p2pk, p2wsh_p2pkh, p2sh_p2wsh_p2pk, p2sh_p2wsh_p2pkh])\n+\n+        for i in uncompressed_spendable_address:\n+            v = self.nodes[0].validateaddress(i)\n+            if (v['isscript']):\n+                [bare, p2sh, p2wsh, p2sh_p2wsh] = self.p2sh_address_to_script(v)\n+                # bare and p2sh multisig with uncompressed keys should always be spendable\n+                spendable_anytime.extend([bare, p2sh])\n+                # P2WSH and P2SH(P2WSH) multisig with uncompressed keys are never seen\n+                unseen_anytime.extend([p2wsh, p2sh_p2wsh])\n+            else:\n+                [p2wpkh, p2sh_p2wpkh, p2pk, p2pkh, p2sh_p2pk, p2sh_p2pkh, p2wsh_p2pk, p2wsh_p2pkh, p2sh_p2wsh_p2pk, p2sh_p2wsh_p2pkh] = self.p2pkh_address_to_script(v)\n+                # normal P2PKH and P2PK with uncompressed keys should always be spendable\n+                spendable_anytime.extend([p2pkh, p2pk])\n+                # P2SH_P2PK and P2SH_P2PKH are spendable after direct importaddress\n+                spendable_after_importaddress.extend([p2sh_p2pk, p2sh_p2pkh])\n+                # witness with uncompressed keys are never seen\n+                unseen_anytime.extend([p2wpkh, p2sh_p2wpkh, p2wsh_p2pk, p2wsh_p2pkh, p2sh_p2wsh_p2pk, p2sh_p2wsh_p2pkh])\n+\n+        for i in compressed_solvable_address:\n+            v = self.nodes[0].validateaddress(i)\n+            if (v['isscript']):\n+                # Multisig without private is not seen after addmultisigaddress, but seen after importaddress\n+                [bare, p2sh, p2wsh, p2sh_p2wsh] = self.p2sh_address_to_script(v)\n+                solvable_after_importaddress.extend([bare, p2sh, p2wsh, p2sh_p2wsh])\n+            else:\n+                [p2wpkh, p2sh_p2wpkh, p2pk, p2pkh, p2sh_p2pk, p2sh_p2pkh, p2wsh_p2pk, p2wsh_p2pkh, p2sh_p2wsh_p2pk, p2sh_p2wsh_p2pkh] = self.p2pkh_address_to_script(v)\n+                # normal P2PKH and P2PK with compressed keys should always be seen\n+                solvable_anytime.extend([p2pkh, p2pk])\n+                # P2SH_P2PK, P2SH_P2PKH, and witness with compressed keys are seen after direct importaddress\n+                solvable_after_importaddress.extend([p2wpkh, p2sh_p2wpkh, p2sh_p2pk, p2sh_p2pkh, p2wsh_p2pk, p2wsh_p2pkh, p2sh_p2wsh_p2pk, p2sh_p2wsh_p2pkh])\n+\n+        for i in uncompressed_solvable_address:\n+            v = self.nodes[0].validateaddress(i)\n+            if (v['isscript']):\n+                [bare, p2sh, p2wsh, p2sh_p2wsh] = self.p2sh_address_to_script(v)\n+                # Base uncompressed multisig without private is not seen after addmultisigaddress, but seen after importaddress\n+                solvable_after_importaddress.extend([bare, p2sh])\n+                # P2WSH and P2SH(P2WSH) multisig with uncompressed keys are never seen\n+                unseen_anytime.extend([p2wsh, p2sh_p2wsh])\n+            else:\n+                [p2wpkh, p2sh_p2wpkh, p2pk, p2pkh, p2sh_p2pk, p2sh_p2pkh, p2wsh_p2pk, p2wsh_p2pkh, p2sh_p2wsh_p2pk, p2sh_p2wsh_p2pkh] = self.p2pkh_address_to_script(v)\n+                # normal P2PKH and P2PK with uncompressed keys should always be seen\n+                solvable_anytime.extend([p2pkh, p2pk])\n+                # P2SH_P2PK, P2SH_P2PKH with uncompressed keys are seen after direct importaddress\n+                solvable_after_importaddress.extend([p2sh_p2pk, p2sh_p2pkh])\n+                # witness with uncompressed keys are never seen\n+                unseen_anytime.extend([p2wpkh, p2sh_p2wpkh, p2wsh_p2pk, p2wsh_p2pkh, p2sh_p2wsh_p2pk, p2sh_p2wsh_p2pkh])\n+\n+        op1 = CScript([OP_1])\n+        op0 = CScript([OP_0])\n+        # 2N7MGY19ti4KDMSzRfPAssP6Pxyuxoi6jLe is the P2SH(P2PKH) version of mjoE3sSrb8ByYEvgnC3Aox86u1CHnfJA4V\n+        unsolvable_address = [\"mjoE3sSrb8ByYEvgnC3Aox86u1CHnfJA4V\", \"2N7MGY19ti4KDMSzRfPAssP6Pxyuxoi6jLe\", script_to_p2sh(op1), script_to_p2sh(op0)]\n+        unsolvable_address_key = hex_str_to_bytes(\"02341AEC7587A51CDE5279E0630A531AEA2615A9F80B17E8D9376327BAEAA59E3D\")\n+        unsolvablep2pkh = CScript([OP_DUP, OP_HASH160, hash160(unsolvable_address_key), OP_EQUALVERIFY, OP_CHECKSIG])\n+        unsolvablep2wshp2pkh = CScript([OP_0, sha256(unsolvablep2pkh)])\n+        p2shop0 = CScript([OP_HASH160, hash160(op0), OP_EQUAL])\n+        p2wshop1 = CScript([OP_0, sha256(op1)])\n+        unsolvable_after_importaddress.append(unsolvablep2pkh)\n+        unsolvable_after_importaddress.append(unsolvablep2wshp2pkh)\n+        unsolvable_after_importaddress.append(op1) # OP_1 will be imported as script\n+        unsolvable_after_importaddress.append(p2wshop1)\n+        unseen_anytime.append(op0) # OP_0 will be imported as P2SH address with no script provided\n+        unsolvable_after_importaddress.append(p2shop0)\n+\n+        spendable_txid = []\n+        solvable_txid = []\n+        spendable_txid.append(self.mine_and_test_listunspent(spendable_anytime, 2))\n+        solvable_txid.append(self.mine_and_test_listunspent(solvable_anytime, 1))\n+        self.mine_and_test_listunspent(spendable_after_importaddress + solvable_after_importaddress + unseen_anytime + unsolvable_after_importaddress, 0)\n+\n+        importlist = []\n+        for i in compressed_spendable_address + uncompressed_spendable_address + compressed_solvable_address + uncompressed_solvable_address:\n+            v = self.nodes[0].validateaddress(i)\n+            if (v['isscript']):\n+                bare = hex_str_to_bytes(v['hex'])\n+                importlist.append(bytes_to_hex_str(bare))\n+                importlist.append(bytes_to_hex_str(CScript([OP_0, sha256(bare)])))\n+            else:\n+                pubkey = hex_str_to_bytes(v['pubkey'])\n+                p2pk = CScript([pubkey, OP_CHECKSIG])\n+                p2pkh = CScript([OP_DUP, OP_HASH160, hash160(pubkey), OP_EQUALVERIFY, OP_CHECKSIG])\n+                importlist.append(bytes_to_hex_str(p2pk))\n+                importlist.append(bytes_to_hex_str(p2pkh))\n+                importlist.append(bytes_to_hex_str(CScript([OP_0, hash160(pubkey)])))\n+                importlist.append(bytes_to_hex_str(CScript([OP_0, sha256(p2pk)])))\n+                importlist.append(bytes_to_hex_str(CScript([OP_0, sha256(p2pkh)])))\n+\n+        importlist.append(bytes_to_hex_str(unsolvablep2pkh))\n+        importlist.append(bytes_to_hex_str(unsolvablep2wshp2pkh))\n+        importlist.append(bytes_to_hex_str(op1))\n+        importlist.append(bytes_to_hex_str(p2wshop1))\n+\n+        for i in importlist:\n+            try:\n+                self.nodes[0].importaddress(i,\"\",False,True)\n+            except JSONRPCException as exp:\n+                assert_equal(exp.error[\"message\"], \"The wallet already contains the private key for this address or script\")\n+\n+        self.nodes[0].importaddress(script_to_p2sh(op0)) # import OP_0 as address only\n+        self.nodes[0].importaddress(multisig_without_privkey_address) # Test multisig_without_privkey\n+\n+        spendable_txid.append(self.mine_and_test_listunspent(spendable_anytime + spendable_after_importaddress, 2))\n+        solvable_txid.append(self.mine_and_test_listunspent(solvable_anytime + solvable_after_importaddress, 1))\n+        self.mine_and_test_listunspent(unsolvable_after_importaddress, 1)\n+        self.mine_and_test_listunspent(unseen_anytime, 0)\n+\n+        # addwitnessaddress should refuse to return a witness address if an uncompressed key is used or the address is\n+        # not in the wallet\n+        # note that no witness address should be returned by unsolvable addresses\n+        # the multisig_without_privkey_address will fail because its keys were not added with importpubkey\n+        for i in uncompressed_spendable_address + uncompressed_solvable_address + unknown_address + unsolvable_address + [multisig_without_privkey_address]:\n+            try:\n+                self.nodes[0].addwitnessaddress(i)\n+            except JSONRPCException as exp:\n+                assert_equal(exp.error[\"message\"], \"Public key or redeemscript not known to wallet, or the key is uncompressed\")\n+            else:\n+                assert(False)\n+\n+        for i in compressed_spendable_address + compressed_solvable_address:\n+            witaddress = self.nodes[0].addwitnessaddress(i)\n+            # addwitnessaddress should return the same address if it is a known P2SH-witness address\n+            assert_equal(witaddress, self.nodes[0].addwitnessaddress(witaddress))\n+\n+        spendable_txid.append(self.mine_and_test_listunspent(spendable_anytime + spendable_after_importaddress, 2))\n+        solvable_txid.append(self.mine_and_test_listunspent(solvable_anytime + solvable_after_importaddress, 1))\n+        self.mine_and_test_listunspent(unsolvable_after_importaddress, 1)\n+        self.mine_and_test_listunspent(unseen_anytime, 0)\n+\n+        # Repeat some tests. This time we don't add witness scripts with importaddress\n+        # Import a compressed key and an uncompressed key, generate some multisig addresses\n+        self.nodes[0].importprivkey(\"927pw6RW8ZekycnXqBQ2JS5nPyo1yRfGNN8oq74HeddWSpafDJH\")\n+        uncompressed_spendable_address = [\"mguN2vNSCEUh6rJaXoAVwY3YZwZvEmf5xi\"]\n+        self.nodes[0].importprivkey(\"cMcrXaaUC48ZKpcyydfFo8PxHAjpsYLhdsp6nmtB3E2ER9UUHWnw\")\n+        compressed_spendable_address = [\"n1UNmpmbVUJ9ytXYXiurmGPQ3TRrXqPWKL\"]\n+\n+        self.nodes[0].importpubkey(pubkeys[5])\n+        compressed_solvable_address = [key_to_p2pkh(pubkeys[5])]\n+        self.nodes[0].importpubkey(pubkeys[6])\n+        uncompressed_solvable_address = [key_to_p2pkh(pubkeys[6])]\n+\n+        spendable_after_addwitnessaddress = []      # These outputs should be seen after importaddress\n+        solvable_after_addwitnessaddress=[]         # These outputs should be seen after importaddress but not spendable\n+        unseen_anytime = []                         # These outputs should never be seen\n+\n+        uncompressed_spendable_address.append(self.nodes[0].addmultisigaddress(2, [uncompressed_spendable_address[0], compressed_spendable_address[0]]))\n+        uncompressed_spendable_address.append(self.nodes[0].addmultisigaddress(2, [uncompressed_spendable_address[0], uncompressed_spendable_address[0]]))\n+        compressed_spendable_address.append(self.nodes[0].addmultisigaddress(2, [compressed_spendable_address[0], compressed_spendable_address[0]]))\n+        uncompressed_solvable_address.append(self.nodes[0].addmultisigaddress(2, [compressed_solvable_address[0], uncompressed_solvable_address[0]]))\n+        compressed_solvable_address.append(self.nodes[0].addmultisigaddress(2, [compressed_spendable_address[0], compressed_solvable_address[0]]))\n+\n+        premature_witaddress = []\n+\n+        for i in compressed_spendable_address:\n+            v = self.nodes[0].validateaddress(i)\n+            if (v['isscript']):\n+                [bare, p2sh, p2wsh, p2sh_p2wsh] = self.p2sh_address_to_script(v)\n+                # P2WSH and P2SH(P2WSH) multisig with compressed keys are spendable after addwitnessaddress\n+                spendable_after_addwitnessaddress.extend([p2wsh, p2sh_p2wsh])\n+                premature_witaddress.append(script_to_p2sh(p2wsh))\n+            else:\n+                [p2wpkh, p2sh_p2wpkh, p2pk, p2pkh, p2sh_p2pk, p2sh_p2pkh, p2wsh_p2pk, p2wsh_p2pkh, p2sh_p2wsh_p2pk, p2sh_p2wsh_p2pkh] = self.p2pkh_address_to_script(v)\n+                # P2WPKH, P2SH_P2WPKH are spendable after addwitnessaddress\n+                spendable_after_addwitnessaddress.extend([p2wpkh, p2sh_p2wpkh])\n+                premature_witaddress.append(script_to_p2sh(p2wpkh))\n+\n+        for i in uncompressed_spendable_address + uncompressed_solvable_address:\n+            v = self.nodes[0].validateaddress(i)\n+            if (v['isscript']):\n+                [bare, p2sh, p2wsh, p2sh_p2wsh] = self.p2sh_address_to_script(v)\n+                # P2WSH and P2SH(P2WSH) multisig with uncompressed keys are never seen\n+                unseen_anytime.extend([p2wsh, p2sh_p2wsh])\n+            else:\n+                [p2wpkh, p2sh_p2wpkh, p2pk, p2pkh, p2sh_p2pk, p2sh_p2pkh, p2wsh_p2pk, p2wsh_p2pkh, p2sh_p2wsh_p2pk, p2sh_p2wsh_p2pkh] = self.p2pkh_address_to_script(v)\n+                # P2WPKH, P2SH_P2WPKH with uncompressed keys are never seen\n+                unseen_anytime.extend([p2wpkh, p2sh_p2wpkh])\n+\n+        for i in compressed_solvable_address:\n+            v = self.nodes[0].validateaddress(i)\n+            if (v['isscript']):\n+                # P2WSH multisig without private key are seen after addwitnessaddress\n+                [bare, p2sh, p2wsh, p2sh_p2wsh] = self.p2sh_address_to_script(v)\n+                solvable_after_addwitnessaddress.extend([p2wsh, p2sh_p2wsh])\n+                premature_witaddress.append(script_to_p2sh(p2wsh))\n+            else:\n+                [p2wpkh, p2sh_p2wpkh, p2pk, p2pkh, p2sh_p2pk, p2sh_p2pkh, p2wsh_p2pk, p2wsh_p2pkh, p2sh_p2wsh_p2pk, p2sh_p2wsh_p2pkh] = self.p2pkh_address_to_script(v)\n+                # P2SH_P2PK, P2SH_P2PKH with compressed keys are seen after addwitnessaddress\n+                solvable_after_addwitnessaddress.extend([p2wpkh, p2sh_p2wpkh])\n+                premature_witaddress.append(script_to_p2sh(p2wpkh))\n+\n+        self.mine_and_test_listunspent(spendable_after_addwitnessaddress + solvable_after_addwitnessaddress + unseen_anytime, 0)\n+\n+        # addwitnessaddress should refuse to return a witness address if an uncompressed key is used\n+        # note that a multisig address returned by addmultisigaddress is not solvable until it is added with importaddress\n+        # premature_witaddress are not accepted until the script is added with addwitnessaddress first\n+        for i in uncompressed_spendable_address + uncompressed_solvable_address + premature_witaddress + [compressed_solvable_address[1]]:\n+            try:\n+                self.nodes[0].addwitnessaddress(i)\n+            except JSONRPCException as exp:\n+                assert_equal(exp.error[\"message\"], \"Public key or redeemscript not known to wallet, or the key is uncompressed\")\n+            else:\n+                assert(False)\n+\n+        # after importaddress it should pass addwitnessaddress\n+        v = self.nodes[0].validateaddress(compressed_solvable_address[1])\n+        self.nodes[0].importaddress(v['hex'],\"\",False,True)\n+        for i in compressed_spendable_address + compressed_solvable_address + premature_witaddress:\n+            witaddress = self.nodes[0].addwitnessaddress(i)\n+            assert_equal(witaddress, self.nodes[0].addwitnessaddress(witaddress))\n+\n+        spendable_txid.append(self.mine_and_test_listunspent(spendable_after_addwitnessaddress, 2))\n+        solvable_txid.append(self.mine_and_test_listunspent(solvable_after_addwitnessaddress, 1))\n+        self.mine_and_test_listunspent(unseen_anytime, 0)\n+\n+        # Check that spendable outputs are really spendable\n+        self.create_and_mine_tx_from_txids(spendable_txid)\n+\n+        # import all the private keys so solvable addresses become spendable\n+        self.nodes[0].importprivkey(\"cPiM8Ub4heR9NBYmgVzJQiUH1if44GSBGiqaeJySuL2BKxubvgwb\")\n+        self.nodes[0].importprivkey(\"cPpAdHaD6VoYbW78kveN2bsvb45Q7G5PhaPApVUGwvF8VQ9brD97\")\n+        self.nodes[0].importprivkey(\"91zqCU5B9sdWxzMt1ca3VzbtVm2YM6Hi5Rxn4UDtxEaN9C9nzXV\")\n+        self.nodes[0].importprivkey(\"cPQFjcVRpAUBG8BA9hzr2yEzHwKoMgLkJZBBtK9vJnvGJgMjzTbd\")\n+        self.nodes[0].importprivkey(\"cQGtcm34xiLjB1v7bkRa4V3aAc9tS2UTuBZ1UnZGeSeNy627fN66\")\n+        self.nodes[0].importprivkey(\"cTW5mR5M45vHxXkeChZdtSPozrFwFgmEvTNnanCW6wrqwaCZ1X7K\")\n+        self.create_and_mine_tx_from_txids(solvable_txid)\n+\n+    def mine_and_test_listunspent(self, script_list, ismine):\n+        utxo = find_unspent(self.nodes[0], 50)\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(int('0x'+utxo['txid'],0), utxo['vout'])))\n+        for i in script_list:\n+            tx.vout.append(CTxOut(10000000, i))\n+        tx.rehash()\n+        signresults = self.nodes[0].signrawtransaction(bytes_to_hex_str(tx.serialize_without_witness()))['hex']\n+        txid = self.nodes[0].sendrawtransaction(signresults, True)\n+        self.nodes[0].generate(1)\n+        sync_blocks(self.nodes)\n+        watchcount = 0\n+        spendcount = 0\n+        for i in self.nodes[0].listunspent():\n+            if (i['txid'] == txid):\n+                watchcount += 1\n+                if (i['spendable'] == True):\n+                    spendcount += 1\n+        if (ismine == 2):\n+            assert_equal(spendcount, len(script_list))\n+        elif (ismine == 1):\n+            assert_equal(watchcount, len(script_list))\n+            assert_equal(spendcount, 0)\n+        else:\n+            assert_equal(watchcount, 0)\n+        return txid\n+\n+    def p2sh_address_to_script(self,v):\n+        bare = CScript(hex_str_to_bytes(v['hex']))\n+        p2sh = CScript(hex_str_to_bytes(v['scriptPubKey']))\n+        p2wsh = CScript([OP_0, sha256(bare)])\n+        p2sh_p2wsh = CScript([OP_HASH160, hash160(p2wsh), OP_EQUAL])\n+        return([bare, p2sh, p2wsh, p2sh_p2wsh])\n+\n+    def p2pkh_address_to_script(self,v):\n+        pubkey = hex_str_to_bytes(v['pubkey'])\n+        p2wpkh = CScript([OP_0, hash160(pubkey)])\n+        p2sh_p2wpkh = CScript([OP_HASH160, hash160(p2wpkh), OP_EQUAL])\n+        p2pk = CScript([pubkey, OP_CHECKSIG])\n+        p2pkh = CScript(hex_str_to_bytes(v['scriptPubKey']))\n+        p2sh_p2pk = CScript([OP_HASH160, hash160(p2pk), OP_EQUAL])\n+        p2sh_p2pkh = CScript([OP_HASH160, hash160(p2pkh), OP_EQUAL])\n+        p2wsh_p2pk = CScript([OP_0, sha256(p2pk)])\n+        p2wsh_p2pkh = CScript([OP_0, sha256(p2pkh)])\n+        p2sh_p2wsh_p2pk = CScript([OP_HASH160, hash160(p2wsh_p2pk), OP_EQUAL])\n+        p2sh_p2wsh_p2pkh = CScript([OP_HASH160, hash160(p2wsh_p2pkh), OP_EQUAL])\n+        return [p2wpkh, p2sh_p2wpkh, p2pk, p2pkh, p2sh_p2pk, p2sh_p2pkh, p2wsh_p2pk, p2wsh_p2pkh, p2sh_p2wsh_p2pk, p2sh_p2wsh_p2pkh]\n+\n+    def create_and_mine_tx_from_txids(self, txids, success = True):\n+        tx = CTransaction()\n+        for i in txids:\n+            txtmp = CTransaction()\n+            txraw = self.nodes[0].getrawtransaction(i)\n+            f = BytesIO(hex_str_to_bytes(txraw))\n+            txtmp.deserialize(f)\n+            for j in range(len(txtmp.vout)):\n+                tx.vin.append(CTxIn(COutPoint(int('0x'+i,0), j)))\n+        tx.vout.append(CTxOut(0, CScript()))\n+        tx.rehash()\n+        signresults = self.nodes[0].signrawtransaction(bytes_to_hex_str(tx.serialize_without_witness()))['hex']\n+        self.nodes[0].sendrawtransaction(signresults, True)\n+        self.nodes[0].generate(1)\n+        sync_blocks(self.nodes)\n+\n+\n if __name__ == '__main__':\n     SegWitTest().main()"
      },
      {
        "sha": "50b999be6110d91df1730cc11961d14d5c87ccd9",
        "filename": "qa/rpc-tests/test_framework/address.py",
        "status": "added",
        "additions": 74,
        "deletions": 0,
        "changes": 74,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55d8ffeed69683bd735d90c287b30f10805ae6ca/qa/rpc-tests/test_framework/address.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55d8ffeed69683bd735d90c287b30f10805ae6ca/qa/rpc-tests/test_framework/address.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/address.py?ref=55d8ffeed69683bd735d90c287b30f10805ae6ca",
        "patch": "@@ -0,0 +1,74 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# address.py\n+#\n+# This file encodes and decodes BASE58 P2PKH and P2SH addresses\n+#\n+\n+from .script import hash256, hash160, sha256, CScript, OP_0\n+from .util import bytes_to_hex_str, hex_str_to_bytes\n+\n+chars = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n+\n+def byte_to_base58(b, version):\n+    result = ''\n+    str = bytes_to_hex_str(b)\n+    str = bytes_to_hex_str(chr(version).encode('latin-1')) + str\n+    checksum = bytes_to_hex_str(hash256(hex_str_to_bytes(str)))\n+    str += checksum[:8]\n+    value = int('0x'+str,0)\n+    while value > 0:\n+        result = chars[value % 58] + result\n+        value //= 58\n+    while (str[:2] == '00'):\n+        result = chars[0] + result\n+        str = str[2:]\n+    return result\n+\n+# TODO: def base58_decode\n+\n+def keyhash_to_p2pkh(hash, main = False):\n+    assert (len(hash) == 20)\n+    version = 0 if main else 111\n+    return byte_to_base58(hash, version)\n+\n+def scripthash_to_p2sh(hash, main = False):\n+    assert (len(hash) == 20)\n+    version = 5 if main else 196\n+    return byte_to_base58(hash, version)\n+\n+def key_to_p2pkh(key, main = False):\n+    key = check_key(key)\n+    return keyhash_to_p2pkh(hash160(key), main)\n+\n+def script_to_p2sh(script, main = False):\n+    script = check_script(script)\n+    return scripthash_to_p2sh(hash160(script), main)\n+\n+def key_to_p2sh_p2wpkh(key, main = False):\n+    key = check_key(key)\n+    p2shscript = CScript([OP_0, hash160(key)])\n+    return script_to_p2sh(p2shscript, main)\n+\n+def script_to_p2sh_p2wsh(script, main = False):\n+    script = check_script(script)\n+    p2shscript = CScript([OP_0, sha256(script)])\n+    return script_to_p2sh(p2shscript, main)\n+\n+def check_key(key):\n+    if (type(key) is str):\n+        key = hex_str_to_bytes(key) # Assuming this is hex string\n+    if (type(key) is bytes and (len(key) == 33 or len(key) == 65)):\n+        return key\n+    assert(False)\n+\n+def check_script(script):\n+    if (type(script) is str):\n+        script = hex_str_to_bytes(script) # Assuming this is hex string\n+    if (type(script) is bytes or type(script) is CScript):\n+        return script\n+    assert(False)"
      },
      {
        "sha": "c63a15c1e0c92bd4a63d2b47bff4499e341cab3a",
        "filename": "qa/rpc-tests/test_framework/key.py",
        "status": "modified",
        "additions": 23,
        "deletions": 2,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55d8ffeed69683bd735d90c287b30f10805ae6ca/qa/rpc-tests/test_framework/key.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55d8ffeed69683bd735d90c287b30f10805ae6ca/qa/rpc-tests/test_framework/key.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/key.py?ref=55d8ffeed69683bd735d90c287b30f10805ae6ca",
        "patch": "@@ -75,6 +75,9 @@\n # this specifies the curve used with ECDSA.\n NID_secp256k1 = 714 # from openssl/obj_mac.h\n \n+SECP256K1_ORDER = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141\n+SECP256K1_ORDER_HALF = SECP256K1_ORDER // 2\n+\n # Thx to Sam Devlin for the ctypes magic 64-bit fix.\n def _check_result(val, func, args):\n     if val == 0:\n@@ -147,7 +150,7 @@ def get_ecdh_key(self, other_pubkey, kdf=lambda k: hashlib.sha256(k).digest()):\n         r = self.get_raw_ecdh_key(other_pubkey)\n         return kdf(r)\n \n-    def sign(self, hash):\n+    def sign(self, hash, low_s = True):\n         # FIXME: need unit tests for below cases\n         if not isinstance(hash, bytes):\n             raise TypeError('Hash must be bytes instance; got %r' % hash.__class__)\n@@ -159,7 +162,25 @@ def sign(self, hash):\n         mb_sig = ctypes.create_string_buffer(sig_size0.value)\n         result = ssl.ECDSA_sign(0, hash, len(hash), mb_sig, ctypes.byref(sig_size0), self.k)\n         assert 1 == result\n-        return mb_sig.raw[:sig_size0.value]\n+        assert mb_sig.raw[0] == 0x30\n+        assert mb_sig.raw[1] == sig_size0.value - 2\n+        total_size = mb_sig.raw[1]\n+        assert mb_sig.raw[2] == 2\n+        r_size = mb_sig.raw[3]\n+        assert mb_sig.raw[4 + r_size] == 2\n+        s_size = mb_sig.raw[5 + r_size]\n+        s_value = int.from_bytes(mb_sig.raw[6+r_size:6+r_size+s_size], byteorder='big')\n+        if (not low_s) or s_value <= SECP256K1_ORDER_HALF:\n+            return mb_sig.raw[:sig_size0.value]\n+        else:\n+            low_s_value = SECP256K1_ORDER - s_value\n+            low_s_bytes = (low_s_value).to_bytes(33, byteorder='big')\n+            while len(low_s_bytes) > 1 and low_s_bytes[0] == 0 and low_s_bytes[1] < 0x80:\n+                low_s_bytes = low_s_bytes[1:]\n+            new_s_size = len(low_s_bytes)\n+            new_total_size_byte = (total_size + new_s_size - s_size).to_bytes(1,byteorder='big')\n+            new_s_size_byte = (new_s_size).to_bytes(1,byteorder='big')\n+            return b'\\x30' + new_total_size_byte + mb_sig.raw[2:5+r_size] + new_s_size_byte + low_s_bytes\n \n     def verify(self, hash, sig):\n         \"\"\"Verify a DER signature\"\"\""
      },
      {
        "sha": "1f9a901d75882f84baf307f9accc53722e08a5a3",
        "filename": "src/Makefile.qt.include",
        "status": "modified",
        "additions": 11,
        "deletions": 7,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55d8ffeed69683bd735d90c287b30f10805ae6ca/src/Makefile.qt.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55d8ffeed69683bd735d90c287b30f10805ae6ca/src/Makefile.qt.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qt.include?ref=55d8ffeed69683bd735d90c287b30f10805ae6ca",
        "patch": "@@ -289,7 +289,7 @@ RES_ICONS = \\\n   qt/res/icons/warning.png \\\n   qt/res/icons/verify.png\n \n-BITCOIN_QT_CPP = \\\n+BITCOIN_QT_BASE_CPP = \\\n   qt/bantablemodel.cpp \\\n   qt/bitcoinaddressvalidator.cpp \\\n   qt/bitcoinamountfield.cpp \\\n@@ -313,12 +313,9 @@ BITCOIN_QT_CPP = \\\n   qt/trafficgraphwidget.cpp \\\n   qt/utilitydialog.cpp\n \n-if TARGET_WINDOWS\n-BITCOIN_QT_CPP += qt/winshutdownmonitor.cpp\n-endif\n+BITCOIN_QT_WINDOWS_CPP = qt/winshutdownmonitor.cpp\n \n-if ENABLE_WALLET\n-BITCOIN_QT_CPP += \\\n+BITCOIN_QT_WALLET_CPP = \\\n   qt/addressbookpage.cpp \\\n   qt/addresstablemodel.cpp \\\n   qt/askpassphrasedialog.cpp \\\n@@ -345,6 +342,13 @@ BITCOIN_QT_CPP += \\\n   qt/walletmodel.cpp \\\n   qt/walletmodeltransaction.cpp \\\n   qt/walletview.cpp\n+\n+BITCOIN_QT_CPP = $(BITCOIN_QT_BASE_CPP)\n+if TARGET_WINDOWS\n+BITCOIN_QT_CPP += $(BITCOIN_QT_WINDOWS_CPP)\n+endif\n+if ENABLE_WALLET\n+BITCOIN_QT_CPP += $(BITCOIN_QT_WALLET_CPP)\n endif\n \n RES_IMAGES = \n@@ -413,7 +417,7 @@ $(srcdir)/qt/bitcoinstrings.cpp: $(libbitcoin_server_a_SOURCES) $(libbitcoin_wal\n \t@test -n $(XGETTEXT) || echo \"xgettext is required for updating translations\"\n \t$(AM_V_GEN) cd $(srcdir); XGETTEXT=$(XGETTEXT) PACKAGE_NAME=\"$(PACKAGE_NAME)\" COPYRIGHT_HOLDERS=\"$(COPYRIGHT_HOLDERS)\" COPYRIGHT_HOLDERS_SUBSTITUTION=\"$(COPYRIGHT_HOLDERS_SUBSTITUTION)\" $(PYTHON) ../share/qt/extract_strings_qt.py $^\n \n-translate: $(srcdir)/qt/bitcoinstrings.cpp $(QT_FORMS_UI) $(QT_FORMS_UI) $(BITCOIN_QT_CPP) $(BITCOIN_QT_H) $(BITCOIN_MM)\n+translate: $(srcdir)/qt/bitcoinstrings.cpp $(QT_FORMS_UI) $(QT_FORMS_UI) $(BITCOIN_QT_BASE_CPP) $(BITCOIN_QT_WINDOWS_CPP) $(BITCOIN_QT_WALLET_CPP) $(BITCOIN_QT_H) $(BITCOIN_MM)\n \t@test -n $(LUPDATE) || echo \"lupdate is required for updating translations\"\n \t$(AM_V_GEN) QT_SELECT=$(QT_SELECT) $(LUPDATE) $^ -locations relative -no-obsolete -ts $(srcdir)/qt/locale/bitcoin_en.ts\n "
      },
      {
        "sha": "ea01ddc10d81a6c58f72ed93bb2742425cb932c1",
        "filename": "src/core_write.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 1,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55d8ffeed69683bd735d90c287b30f10805ae6ca/src/core_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55d8ffeed69683bd735d90c287b30f10805ae6ca/src/core_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_write.cpp?ref=55d8ffeed69683bd735d90c287b30f10805ae6ca",
        "patch": "@@ -151,11 +151,13 @@ void ScriptPubKeyToUniv(const CScript& scriptPubKey,\n void TxToUniv(const CTransaction& tx, const uint256& hashBlock, UniValue& entry)\n {\n     entry.pushKV(\"txid\", tx.GetHash().GetHex());\n+    entry.pushKV(\"hash\", tx.GetWitnessHash().GetHex());\n     entry.pushKV(\"version\", tx.nVersion);\n     entry.pushKV(\"locktime\", (int64_t)tx.nLockTime);\n \n     UniValue vin(UniValue::VARR);\n-    BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n+    for (unsigned int i = 0; i < tx.vin.size(); i++) {\n+        const CTxIn& txin = tx.vin[i];\n         UniValue in(UniValue::VOBJ);\n         if (tx.IsCoinBase())\n             in.pushKV(\"coinbase\", HexStr(txin.scriptSig.begin(), txin.scriptSig.end()));\n@@ -166,6 +168,13 @@ void TxToUniv(const CTransaction& tx, const uint256& hashBlock, UniValue& entry)\n             o.pushKV(\"asm\", ScriptToAsmStr(txin.scriptSig, true));\n             o.pushKV(\"hex\", HexStr(txin.scriptSig.begin(), txin.scriptSig.end()));\n             in.pushKV(\"scriptSig\", o);\n+            if (!tx.wit.IsNull() && i < tx.wit.vtxinwit.size() && !tx.wit.vtxinwit[i].IsNull()) {\n+                UniValue txinwitness(UniValue::VARR);\n+                for (const auto& item : tx.wit.vtxinwit[i].scriptWitness.stack) {\n+                    txinwitness.push_back(HexStr(item.begin(), item.end()));\n+                }\n+                in.pushKV(\"txinwitness\", txinwitness);\n+            }\n         }\n         in.pushKV(\"sequence\", (int64_t)txin.nSequence);\n         vin.push_back(in);"
      },
      {
        "sha": "ad4c3fce6866c5c911dca692f45de16b6df12438",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55d8ffeed69683bd735d90c287b30f10805ae6ca/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55d8ffeed69683bd735d90c287b30f10805ae6ca/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=55d8ffeed69683bd735d90c287b30f10805ae6ca",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2015 The Bitcoin Core developers\n+// Copyright (c) 2009-2016 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -1273,6 +1273,10 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n         if (fRequireStandard && !AreInputsStandard(tx, view))\n             return state.Invalid(false, REJECT_NONSTANDARD, \"bad-txns-nonstandard-inputs\");\n \n+        // Check for non-standard witness in P2WSH\n+        if (!tx.wit.IsNull() && fRequireStandard && !IsWitnessStandard(tx, view))\n+            return state.DoS(0, false, REJECT_NONSTANDARD, \"bad-witness-nonstandard\", true);\n+\n         int64_t nSigOpsCost = GetTransactionSigOpCost(tx, view, STANDARD_SCRIPT_VERIFY_FLAGS);\n \n         CAmount nValueOut = tx.GetValueOut();\n@@ -4371,11 +4375,11 @@ bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskB\n             unsigned int nSize = 0;\n             try {\n                 // locate a header\n-                unsigned char buf[MESSAGE_START_SIZE];\n+                unsigned char buf[CMessageHeader::MESSAGE_START_SIZE];\n                 blkdat.FindByte(chainparams.MessageStart()[0]);\n                 nRewind = blkdat.GetPos()+1;\n                 blkdat >> FLATDATA(buf);\n-                if (memcmp(buf, chainparams.MessageStart(), MESSAGE_START_SIZE))\n+                if (memcmp(buf, chainparams.MessageStart(), CMessageHeader::MESSAGE_START_SIZE))\n                     continue;\n                 // read size\n                 blkdat >> nSize;\n@@ -6266,7 +6270,7 @@ bool ProcessMessages(CNode* pfrom, CConnman& connman)\n         it++;\n \n         // Scan for message start\n-        if (memcmp(msg.hdr.pchMessageStart, chainparams.MessageStart(), MESSAGE_START_SIZE) != 0) {\n+        if (memcmp(msg.hdr.pchMessageStart, chainparams.MessageStart(), CMessageHeader::MESSAGE_START_SIZE) != 0) {\n             LogPrintf(\"PROCESSMESSAGE: INVALID MESSAGESTART %s peer=%d\\n\", SanitizeString(msg.hdr.GetCommand()), pfrom->id);\n             fOk = false;\n             break;"
      },
      {
        "sha": "ae42b2bd74fd8b3bbe38cefa0d4f13a82db7ae9f",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 53,
        "deletions": 1,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55d8ffeed69683bd735d90c287b30f10805ae6ca/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55d8ffeed69683bd735d90c287b30f10805ae6ca/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=55d8ffeed69683bd735d90c287b30f10805ae6ca",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2015 The Bitcoin developers\n+// Copyright (c) 2009-2016 The Bitcoin developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -154,6 +154,58 @@ bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n     return true;\n }\n \n+bool IsWitnessStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n+{\n+    if (tx.IsCoinBase())\n+        return true; // Coinbases are skipped\n+\n+    for (unsigned int i = 0; i < tx.vin.size(); i++)\n+    {\n+        // We don't care if witness for this input is empty, since it must not be bloated.\n+        // If the script is invalid without witness, it would be caught sooner or later during validation.\n+        if (tx.wit.vtxinwit[i].IsNull())\n+            continue;\n+\n+        const CTxOut &prev = mapInputs.GetOutputFor(tx.vin[i]);\n+\n+        // get the scriptPubKey corresponding to this input:\n+        CScript prevScript = prev.scriptPubKey;\n+\n+        if (prevScript.IsPayToScriptHash()) {\n+            std::vector <std::vector<unsigned char> > stack;\n+            // If the scriptPubKey is P2SH, we try to extract the redeemScript casually by converting the scriptSig\n+            // into a stack. We do not check IsPushOnly nor compare the hash as these will be done later anyway.\n+            // If the check fails at this stage, we know that this txid must be a bad one.\n+            if (!EvalScript(stack, tx.vin[i].scriptSig, SCRIPT_VERIFY_NONE, BaseSignatureChecker(), SIGVERSION_BASE))\n+                return false;\n+            if (stack.empty())\n+                return false;\n+            prevScript = CScript(stack.back().begin(), stack.back().end());\n+        }\n+\n+        int witnessversion = 0;\n+        std::vector<unsigned char> witnessprogram;\n+\n+        // Non-witness program must not be associated with any witness\n+        if (!prevScript.IsWitnessProgram(witnessversion, witnessprogram))\n+            return false;\n+\n+        // Check P2WSH standard limits\n+        if (witnessversion == 0 && witnessprogram.size() == 32) {\n+            if (tx.wit.vtxinwit[i].scriptWitness.stack.back().size() > MAX_STANDARD_P2WSH_SCRIPT_SIZE)\n+                return false;\n+            size_t sizeWitnessStack = tx.wit.vtxinwit[i].scriptWitness.stack.size() - 1;\n+            if (sizeWitnessStack > MAX_STANDARD_P2WSH_STACK_ITEMS)\n+                return false;\n+            for (unsigned int j = 0; j < sizeWitnessStack; j++) {\n+                if (tx.wit.vtxinwit[i].scriptWitness.stack[j].size() > MAX_STANDARD_P2WSH_STACK_ITEM_SIZE)\n+                    return false;\n+            }\n+        }\n+    }\n+    return true;\n+}\n+\n unsigned int nBytesPerSigOp = DEFAULT_BYTES_PER_SIGOP;\n \n int64_t GetVirtualTransactionSize(int64_t nWeight, int64_t nSigOpCost)"
      },
      {
        "sha": "814e6c0b6ff94231f48b54830191e0ab819b1e65",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 15,
        "deletions": 2,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55d8ffeed69683bd735d90c287b30f10805ae6ca/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55d8ffeed69683bd735d90c287b30f10805ae6ca/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=55d8ffeed69683bd735d90c287b30f10805ae6ca",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2015 The Bitcoin developers\n+// Copyright (c) 2009-2016 The Bitcoin developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -30,6 +30,12 @@ static const unsigned int MAX_STANDARD_TX_SIGOPS_COST = MAX_BLOCK_SIGOPS_COST/5;\n static const unsigned int DEFAULT_MAX_MEMPOOL_SIZE = 300;\n /** Default for -bytespersigop */\n static const unsigned int DEFAULT_BYTES_PER_SIGOP = 20;\n+/** The maximum number of witness stack items in a standard P2WSH script */\n+static const unsigned int MAX_STANDARD_P2WSH_STACK_ITEMS = 100;\n+/** The maximum size of each witness stack item in a standard P2WSH script */\n+static const unsigned int MAX_STANDARD_P2WSH_STACK_ITEM_SIZE = 80;\n+/** The maximum size of a standard witnessScript */\n+static const unsigned int MAX_STANDARD_P2WSH_SCRIPT_SIZE = 3600;\n /**\n  * Standard script verification flags that standard transactions will comply\n  * with. However scripts violating these flags may still be present in valid\n@@ -48,7 +54,8 @@ static const unsigned int STANDARD_SCRIPT_VERIFY_FLAGS = MANDATORY_SCRIPT_VERIFY\n                                                          SCRIPT_VERIFY_CHECKSEQUENCEVERIFY |\n                                                          SCRIPT_VERIFY_LOW_S |\n                                                          SCRIPT_VERIFY_WITNESS |\n-                                                         SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM;\n+                                                         SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM |\n+                                                         SCRIPT_VERIFY_WITNESS_PUBKEYTYPE;\n \n /** For convenience, standard but not mandatory verify flags. */\n static const unsigned int STANDARD_NOT_MANDATORY_VERIFY_FLAGS = STANDARD_SCRIPT_VERIFY_FLAGS & ~MANDATORY_SCRIPT_VERIFY_FLAGS;\n@@ -69,6 +76,12 @@ bool IsStandardTx(const CTransaction& tx, std::string& reason, const bool witnes\n      * @return True if all inputs (scriptSigs) use only standard transaction forms\n      */\n bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs);\n+    /**\n+     * Check if the transaction is over standard P2WSH resources limit:\n+     * 3600bytes witnessScript size, 80bytes per witness stack element, 100 witness stack elements\n+     * These limits are adequate for multi-signature up to n-of-100 using OP_CHECKSIG, OP_ADD, and OP_EQUAL,\n+     */\n+bool IsWitnessStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs);\n \n extern unsigned int nBytesPerSigOp;\n "
      },
      {
        "sha": "d19e0d3a5e24e59fd7d66019a5ebba70a5b7b52b",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 22,
        "deletions": 21,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55d8ffeed69683bd735d90c287b30f10805ae6ca/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55d8ffeed69683bd735d90c287b30f10805ae6ca/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=55d8ffeed69683bd735d90c287b30f10805ae6ca",
        "patch": "@@ -18,8 +18,6 @@\n #include <stdint.h>\n #include <string>\n \n-#define MESSAGE_START_SIZE 4\n-\n /** Message header.\n  * (4) message start.\n  * (12) command.\n@@ -29,6 +27,16 @@\n class CMessageHeader\n {\n public:\n+    enum {\n+        MESSAGE_START_SIZE = 4,\n+        COMMAND_SIZE = 12,\n+        MESSAGE_SIZE_SIZE = 4,\n+        CHECKSUM_SIZE = 4,\n+\n+        MESSAGE_SIZE_OFFSET = MESSAGE_START_SIZE + COMMAND_SIZE,\n+        CHECKSUM_OFFSET = MESSAGE_SIZE_OFFSET + MESSAGE_SIZE_SIZE,\n+        HEADER_SIZE = MESSAGE_START_SIZE + COMMAND_SIZE + MESSAGE_SIZE_SIZE + CHECKSUM_SIZE\n+    };\n     typedef unsigned char MessageStartChars[MESSAGE_START_SIZE];\n \n     CMessageHeader(const MessageStartChars& pchMessageStartIn);\n@@ -48,17 +56,6 @@ class CMessageHeader\n         READWRITE(FLATDATA(pchChecksum));\n     }\n \n-    // TODO: make private (improves encapsulation)\n-public:\n-    enum {\n-        COMMAND_SIZE = 12,\n-        MESSAGE_SIZE_SIZE = 4,\n-        CHECKSUM_SIZE = 4,\n-\n-        MESSAGE_SIZE_OFFSET = MESSAGE_START_SIZE + COMMAND_SIZE,\n-        CHECKSUM_OFFSET = MESSAGE_SIZE_OFFSET + MESSAGE_SIZE_SIZE,\n-        HEADER_SIZE = MESSAGE_START_SIZE + COMMAND_SIZE + MESSAGE_SIZE_SIZE + CHECKSUM_SIZE\n-    };\n     char pchMessageStart[MESSAGE_START_SIZE];\n     char pchCommand[COMMAND_SIZE];\n     uint32_t nMessageSize;\n@@ -315,20 +312,24 @@ class CAddress : public CService\n     unsigned int nTime;\n };\n \n-/** getdata message types */\n+/** getdata message type flags */\n const uint32_t MSG_WITNESS_FLAG = 1 << 30;\n const uint32_t MSG_TYPE_MASK    = 0xffffffff >> 2;\n+\n+/** getdata / inv message types.\n+ * These numbers are defined by the protocol. When adding a new value, be sure\n+ * to mention it in the respective BIP.\n+ */\n enum GetDataMsg\n {\n     UNDEFINED = 0,\n-    MSG_TX,\n-    MSG_BLOCK,\n-    MSG_TYPE_MAX = MSG_BLOCK,\n+    MSG_TX = 1,\n+    MSG_BLOCK = 2,\n     // The following can only occur in getdata. Invs always use TX or BLOCK.\n-    MSG_FILTERED_BLOCK,\n-    MSG_CMPCT_BLOCK,\n-    MSG_WITNESS_BLOCK = MSG_BLOCK | MSG_WITNESS_FLAG,\n-    MSG_WITNESS_TX = MSG_TX | MSG_WITNESS_FLAG,\n+    MSG_FILTERED_BLOCK = 3,  //!< Defined in BIP37\n+    MSG_CMPCT_BLOCK = 4,     //!< Defined in BIP152\n+    MSG_WITNESS_BLOCK = MSG_BLOCK | MSG_WITNESS_FLAG, //!< Defined in BIP144\n+    MSG_WITNESS_TX = MSG_TX | MSG_WITNESS_FLAG,       //!< Defined in BIP144\n     MSG_FILTERED_WITNESS_BLOCK = MSG_FILTERED_BLOCK | MSG_WITNESS_FLAG,\n };\n "
      },
      {
        "sha": "73223735f5c6bd7ebb167bee03e50e4afe892bb9",
        "filename": "src/qt/forms/modaloverlay.ui",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55d8ffeed69683bd735d90c287b30f10805ae6ca/src/qt/forms/modaloverlay.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55d8ffeed69683bd735d90c287b30f10805ae6ca/src/qt/forms/modaloverlay.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/modaloverlay.ui?ref=55d8ffeed69683bd735d90c287b30f10805ae6ca",
        "patch": "@@ -276,6 +276,9 @@ QLabel { color: rgb(40,40,40);  }</string>\n                <property name=\"value\">\n                 <number>24</number>\n                </property>\n+               <property name=\"format\">\n+                <string/>\n+               </property>\n               </widget>\n              </item>\n             </layout>"
      },
      {
        "sha": "ae0d8f5f6367613d5ee0f8b12d7383ad1bfed1be",
        "filename": "src/qt/modaloverlay.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55d8ffeed69683bd735d90c287b30f10805ae6ca/src/qt/modaloverlay.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55d8ffeed69683bd735d90c287b30f10805ae6ca/src/qt/modaloverlay.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/modaloverlay.cpp?ref=55d8ffeed69683bd735d90c287b30f10805ae6ca",
        "patch": "@@ -77,7 +77,7 @@ void ModalOverlay::tipUpdate(int count, const QDateTime& blockDate, double nVeri\n     QDateTime currentDate = QDateTime::currentDateTime();\n \n     // keep a vector of samples of verification progress at height\n-    blockProcessTime.push_front(qMakePair(currentDate.currentMSecsSinceEpoch(), nVerificationProgress));\n+    blockProcessTime.push_front(qMakePair(currentDate.toMSecsSinceEpoch(), nVerificationProgress));\n \n     // show progress speed if we have more then one sample\n     if (blockProcessTime.size() >= 2)\n@@ -93,8 +93,7 @@ void ModalOverlay::tipUpdate(int count, const QDateTime& blockDate, double nVeri\n             QPair<qint64, double> sample = blockProcessTime[i];\n \n             // take first sample after 500 seconds or last available one\n-            if (sample.first < (currentDate.currentMSecsSinceEpoch() - 500*1000) || i == blockProcessTime.size()-1)\n-            {\n+            if (sample.first < (currentDate.toMSecsSinceEpoch() - 500 * 1000) || i == blockProcessTime.size() - 1) {\n                 progressDelta = progressStart-sample.second;\n                 timeDelta = blockProcessTime[0].first - sample.first;\n                 progressPerHour = progressDelta/(double)timeDelta*1000*3600;\n@@ -108,7 +107,6 @@ void ModalOverlay::tipUpdate(int count, const QDateTime& blockDate, double nVeri\n         // show expected remaining time\n         ui->expectedTimeLeft->setText(GUIUtil::formateNiceTimeOffset(remainingMSecs/1000.0));\n \n-        // keep maximal 5000 samples\n         static const int MAX_SAMPLES = 5000;\n         if (blockProcessTime.count() > MAX_SAMPLES)\n             blockProcessTime.remove(MAX_SAMPLES, blockProcessTime.count()-MAX_SAMPLES);"
      },
      {
        "sha": "836cf9ee352a04037b7c773abba6fccda5682720",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 6,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55d8ffeed69683bd735d90c287b30f10805ae6ca/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55d8ffeed69683bd735d90c287b30f10805ae6ca/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=55d8ffeed69683bd735d90c287b30f10805ae6ca",
        "patch": "@@ -79,8 +79,20 @@ bool static IsCompressedOrUncompressedPubKey(const valtype &vchPubKey) {\n             return false;\n         }\n     } else {\n-          //  Non-canonical public key: neither compressed nor uncompressed\n-          return false;\n+        //  Non-canonical public key: neither compressed nor uncompressed\n+        return false;\n+    }\n+    return true;\n+}\n+\n+bool static IsCompressedPubKey(const valtype &vchPubKey) {\n+    if (vchPubKey.size() != 33) {\n+        //  Non-canonical public key: invalid length for compressed key\n+        return false;\n+    }\n+    if (vchPubKey[0] != 0x02 && vchPubKey[0] != 0x03) {\n+        //  Non-canonical public key: invalid prefix for compressed key\n+        return false;\n     }\n     return true;\n }\n@@ -199,10 +211,14 @@ bool CheckSignatureEncoding(const vector<unsigned char> &vchSig, unsigned int fl\n     return true;\n }\n \n-bool static CheckPubKeyEncoding(const valtype &vchSig, unsigned int flags, ScriptError* serror) {\n-    if ((flags & SCRIPT_VERIFY_STRICTENC) != 0 && !IsCompressedOrUncompressedPubKey(vchSig)) {\n+bool static CheckPubKeyEncoding(const valtype &vchPubKey, unsigned int flags, const SigVersion &sigversion, ScriptError* serror) {\n+    if ((flags & SCRIPT_VERIFY_STRICTENC) != 0 && !IsCompressedOrUncompressedPubKey(vchPubKey)) {\n         return set_error(serror, SCRIPT_ERR_PUBKEYTYPE);\n     }\n+    // Only compressed keys are accepted in segwit\n+    if ((flags & SCRIPT_VERIFY_WITNESS_PUBKEYTYPE) != 0 && sigversion == SIGVERSION_WITNESS_V0 && !IsCompressedPubKey(vchPubKey)) {\n+        return set_error(serror, SCRIPT_ERR_WITNESS_PUBKEYTYPE);\n+    }\n     return true;\n }\n \n@@ -879,7 +895,7 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, un\n                         scriptCode.FindAndDelete(CScript(vchSig));\n                     }\n \n-                    if (!CheckSignatureEncoding(vchSig, flags, serror) || !CheckPubKeyEncoding(vchPubKey, flags, serror)) {\n+                    if (!CheckSignatureEncoding(vchSig, flags, serror) || !CheckPubKeyEncoding(vchPubKey, flags, sigversion, serror)) {\n                         //serror is set\n                         return false;\n                     }\n@@ -953,7 +969,7 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, un\n                         // Note how this makes the exact order of pubkey/signature evaluation\n                         // distinguishable by CHECKMULTISIG NOT if the STRICTENC flag is set.\n                         // See the script_(in)valid tests for details.\n-                        if (!CheckSignatureEncoding(vchSig, flags, serror) || !CheckPubKeyEncoding(vchPubKey, flags, serror)) {\n+                        if (!CheckSignatureEncoding(vchSig, flags, serror) || !CheckPubKeyEncoding(vchPubKey, flags, sigversion, serror)) {\n                             // serror is set\n                             return false;\n                         }"
      },
      {
        "sha": "79894c53003480de5a8b547ca00689f549422204",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55d8ffeed69683bd735d90c287b30f10805ae6ca/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55d8ffeed69683bd735d90c287b30f10805ae6ca/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=55d8ffeed69683bd735d90c287b30f10805ae6ca",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2015 The Bitcoin Core developers\n+// Copyright (c) 2009-2016 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -102,6 +102,10 @@ enum\n     // Signature(s) must be empty vector if an CHECK(MULTI)SIG operation failed\n     //\n     SCRIPT_VERIFY_NULLFAIL = (1U << 14),\n+\n+    // Public keys in segregated witness scripts must be compressed\n+    //\n+    SCRIPT_VERIFY_WITNESS_PUBKEYTYPE = (1U << 15),\n };\n \n bool CheckSignatureEncoding(const std::vector<unsigned char> &vchSig, unsigned int flags, ScriptError* serror);"
      },
      {
        "sha": "7467d23b2d3a20f4a655db73d0504c124f26a6a5",
        "filename": "src/script/ismine.cpp",
        "status": "modified",
        "additions": 54,
        "deletions": 8,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55d8ffeed69683bd735d90c287b30f10805ae6ca/src/script/ismine.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55d8ffeed69683bd735d90c287b30f10805ae6ca/src/script/ismine.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/ismine.cpp?ref=55d8ffeed69683bd735d90c287b30f10805ae6ca",
        "patch": "@@ -29,13 +29,25 @@ unsigned int HaveKeys(const vector<valtype>& pubkeys, const CKeyStore& keystore)\n     return nResult;\n }\n \n-isminetype IsMine(const CKeyStore &keystore, const CTxDestination& dest)\n+isminetype IsMine(const CKeyStore& keystore, const CScript& scriptPubKey, SigVersion sigversion)\n+{\n+    bool isInvalid = false;\n+    return IsMine(keystore, scriptPubKey, isInvalid, sigversion);\n+}\n+\n+isminetype IsMine(const CKeyStore& keystore, const CTxDestination& dest, SigVersion sigversion)\n+{\n+    bool isInvalid = false;\n+    return IsMine(keystore, dest, isInvalid, sigversion);\n+}\n+\n+isminetype IsMine(const CKeyStore &keystore, const CTxDestination& dest, bool& isInvalid, SigVersion sigversion)\n {\n     CScript script = GetScriptForDestination(dest);\n-    return IsMine(keystore, script);\n+    return IsMine(keystore, script, isInvalid, sigversion);\n }\n \n-isminetype IsMine(const CKeyStore &keystore, const CScript& scriptPubKey)\n+isminetype IsMine(const CKeyStore &keystore, const CScript& scriptPubKey, bool& isInvalid, SigVersion sigversion)\n {\n     vector<valtype> vSolutions;\n     txnouttype whichType;\n@@ -53,12 +65,35 @@ isminetype IsMine(const CKeyStore &keystore, const CScript& scriptPubKey)\n         break;\n     case TX_PUBKEY:\n         keyID = CPubKey(vSolutions[0]).GetID();\n+        if (sigversion != SIGVERSION_BASE && vSolutions[0].size() != 33) {\n+            isInvalid = true;\n+            return ISMINE_NO;\n+        }\n         if (keystore.HaveKey(keyID))\n             return ISMINE_SPENDABLE;\n         break;\n-    case TX_PUBKEYHASH:\n     case TX_WITNESS_V0_KEYHASH:\n+    {\n+        if (!keystore.HaveCScript(CScriptID(CScript() << OP_0 << vSolutions[0]))) {\n+            // We do not support bare witness outputs unless the P2SH version of it would be\n+            // acceptable as well. This protects against matching before segwit activates.\n+            // This also applies to the P2WSH case.\n+            break;\n+        }\n+        isminetype ret = ::IsMine(keystore, GetScriptForDestination(CKeyID(uint160(vSolutions[0]))), isInvalid, SIGVERSION_WITNESS_V0);\n+        if (ret == ISMINE_SPENDABLE || ret == ISMINE_WATCH_SOLVABLE || (ret == ISMINE_NO && isInvalid))\n+            return ret;\n+        break;\n+    }\n+    case TX_PUBKEYHASH:\n         keyID = CKeyID(uint160(vSolutions[0]));\n+        if (sigversion != SIGVERSION_BASE) {\n+            CPubKey pubkey;\n+            if (keystore.GetPubKey(keyID, pubkey) && !pubkey.IsCompressed()) {\n+                isInvalid = true;\n+                return ISMINE_NO;\n+            }\n+        }\n         if (keystore.HaveKey(keyID))\n             return ISMINE_SPENDABLE;\n         break;\n@@ -67,21 +102,24 @@ isminetype IsMine(const CKeyStore &keystore, const CScript& scriptPubKey)\n         CScriptID scriptID = CScriptID(uint160(vSolutions[0]));\n         CScript subscript;\n         if (keystore.GetCScript(scriptID, subscript)) {\n-            isminetype ret = IsMine(keystore, subscript);\n-            if (ret == ISMINE_SPENDABLE)\n+            isminetype ret = IsMine(keystore, subscript, isInvalid);\n+            if (ret == ISMINE_SPENDABLE || ret == ISMINE_WATCH_SOLVABLE || (ret == ISMINE_NO && isInvalid))\n                 return ret;\n         }\n         break;\n     }\n     case TX_WITNESS_V0_SCRIPTHASH:\n     {\n+        if (!keystore.HaveCScript(CScriptID(CScript() << OP_0 << vSolutions[0]))) {\n+            break;\n+        }\n         uint160 hash;\n         CRIPEMD160().Write(&vSolutions[0][0], vSolutions[0].size()).Finalize(hash.begin());\n         CScriptID scriptID = CScriptID(hash);\n         CScript subscript;\n         if (keystore.GetCScript(scriptID, subscript)) {\n-            isminetype ret = IsMine(keystore, subscript);\n-            if (ret == ISMINE_SPENDABLE)\n+            isminetype ret = IsMine(keystore, subscript, isInvalid, SIGVERSION_WITNESS_V0);\n+            if (ret == ISMINE_SPENDABLE || ret == ISMINE_WATCH_SOLVABLE || (ret == ISMINE_NO && isInvalid))\n                 return ret;\n         }\n         break;\n@@ -95,6 +133,14 @@ isminetype IsMine(const CKeyStore &keystore, const CScript& scriptPubKey)\n         // them) enable spend-out-from-under-you attacks, especially\n         // in shared-wallet situations.\n         vector<valtype> keys(vSolutions.begin()+1, vSolutions.begin()+vSolutions.size()-1);\n+        if (sigversion != SIGVERSION_BASE) {\n+            for (size_t i = 0; i < keys.size(); i++) {\n+                if (keys[i].size() != 33) {\n+                    isInvalid = true;\n+                    return ISMINE_NO;\n+                }\n+            }\n+        }\n         if (HaveKeys(keys, keystore) == keys.size())\n             return ISMINE_SPENDABLE;\n         break;"
      },
      {
        "sha": "ec7a620e330cb57faa81cfec09beff9c2b8b1153",
        "filename": "src/script/ismine.h",
        "status": "modified",
        "additions": 9,
        "deletions": 2,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55d8ffeed69683bd735d90c287b30f10805ae6ca/src/script/ismine.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55d8ffeed69683bd735d90c287b30f10805ae6ca/src/script/ismine.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/ismine.h?ref=55d8ffeed69683bd735d90c287b30f10805ae6ca",
        "patch": "@@ -28,7 +28,14 @@ enum isminetype\n /** used for bitflags of isminetype */\n typedef uint8_t isminefilter;\n \n-isminetype IsMine(const CKeyStore& keystore, const CScript& scriptPubKey);\n-isminetype IsMine(const CKeyStore& keystore, const CTxDestination& dest);\n+/* isInvalid becomes true when the script is found invalid by consensus or policy. This will terminate the recursion\n+ * and return a ISMINE_NO immediately, as an invalid script should never be considered as \"mine\". This is needed as\n+ * different SIGVERSION may have different network rules. Currently the only use of isInvalid is indicate uncompressed\n+ * keys in SIGVERSION_WITNESS_V0 script, but could also be used in similar cases in the future\n+ */\n+isminetype IsMine(const CKeyStore& keystore, const CScript& scriptPubKey, bool& isInvalid, SigVersion = SIGVERSION_BASE);\n+isminetype IsMine(const CKeyStore& keystore, const CScript& scriptPubKey, SigVersion = SIGVERSION_BASE);\n+isminetype IsMine(const CKeyStore& keystore, const CTxDestination& dest, bool& isInvalid, SigVersion = SIGVERSION_BASE);\n+isminetype IsMine(const CKeyStore& keystore, const CTxDestination& dest, SigVersion = SIGVERSION_BASE);\n \n #endif // BITCOIN_SCRIPT_ISMINE_H"
      },
      {
        "sha": "2c5359fe8afdb96b56d8649735d07f9fba4f7a26",
        "filename": "src/script/script_error.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55d8ffeed69683bd735d90c287b30f10805ae6ca/src/script/script_error.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55d8ffeed69683bd735d90c287b30f10805ae6ca/src/script/script_error.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script_error.cpp?ref=55d8ffeed69683bd735d90c287b30f10805ae6ca",
        "patch": "@@ -85,6 +85,8 @@ const char* ScriptErrorString(const ScriptError serror)\n             return \"Witness requires only-redeemscript scriptSig\";\n         case SCRIPT_ERR_WITNESS_UNEXPECTED:\n             return \"Witness provided for non-witness script\";\n+        case SCRIPT_ERR_WITNESS_PUBKEYTYPE:\n+            return \"Using non-compressed keys in segwit\";\n         case SCRIPT_ERR_UNKNOWN_ERROR:\n         case SCRIPT_ERR_ERROR_COUNT:\n         default: break;"
      },
      {
        "sha": "430836991b2cf5bd7652e279263ae676cf9a6fa1",
        "filename": "src/script/script_error.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55d8ffeed69683bd735d90c287b30f10805ae6ca/src/script/script_error.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55d8ffeed69683bd735d90c287b30f10805ae6ca/src/script/script_error.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script_error.h?ref=55d8ffeed69683bd735d90c287b30f10805ae6ca",
        "patch": "@@ -62,6 +62,7 @@ typedef enum ScriptError_t\n     SCRIPT_ERR_WITNESS_MALLEATED,\n     SCRIPT_ERR_WITNESS_MALLEATED_P2SH,\n     SCRIPT_ERR_WITNESS_UNEXPECTED,\n+    SCRIPT_ERR_WITNESS_PUBKEYTYPE,\n \n     SCRIPT_ERR_ERROR_COUNT\n } ScriptError;"
      },
      {
        "sha": "f552ad5bbad25a95443e5733fd6b114d625dbf6d",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55d8ffeed69683bd735d90c287b30f10805ae6ca/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55d8ffeed69683bd735d90c287b30f10805ae6ca/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=55d8ffeed69683bd735d90c287b30f10805ae6ca",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2015 The Bitcoin Core developers\n+// Copyright (c) 2009-2016 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -26,6 +26,10 @@ bool TransactionSignatureCreator::CreateSig(std::vector<unsigned char>& vchSig,\n     if (!keystore->GetKey(address, key))\n         return false;\n \n+    // Signing with uncompressed keys is disabled in witness scripts\n+    if (sigversion == SIGVERSION_WITNESS_V0 && !key.IsCompressed())\n+        return false;\n+\n     uint256 hash = SignatureHash(scriptCode, *txTo, nIn, nHashType, amount, sigversion);\n     if (!key.Sign(hash, vchSig))\n         return false;"
      },
      {
        "sha": "51c25a5a98c5965df194fa22b049f6be5863d48a",
        "filename": "src/test/data/blanktx.json",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55d8ffeed69683bd735d90c287b30f10805ae6ca/src/test/data/blanktx.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55d8ffeed69683bd735d90c287b30f10805ae6ca/src/test/data/blanktx.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/blanktx.json?ref=55d8ffeed69683bd735d90c287b30f10805ae6ca",
        "patch": "@@ -1,5 +1,6 @@\n {\n     \"txid\": \"d21633ba23f70118185227be58a63527675641ad37967e2aa461559f577aec43\",\n+    \"hash\": \"d21633ba23f70118185227be58a63527675641ad37967e2aa461559f577aec43\",\n     \"version\": 1,\n     \"locktime\": 0,\n     \"vin\": ["
      },
      {
        "sha": "5c054ed3e8fb06939a31061e6d2fe7d09222c9a2",
        "filename": "src/test/data/script_tests.json",
        "status": "modified",
        "additions": 367,
        "deletions": 1,
        "changes": 368,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55d8ffeed69683bd735d90c287b30f10805ae6ca/src/test/data/script_tests.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55d8ffeed69683bd735d90c287b30f10805ae6ca/src/test/data/script_tests.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_tests.json?ref=55d8ffeed69683bd735d90c287b30f10805ae6ca",
        "patch": "@@ -1855,6 +1855,8 @@\n     \"OK\",\n     \"P2SH with CLEANSTACK\"\n ],\n+\n+[\"Testing with uncompressed keys in witness v0 without WITNESS_PUBKEYTYPE\"],\n [\n     [\n         \"304402200d461c140cfdfcf36b94961db57ae8c18d1cb80e9d95a9e47ac22470c1bf125502201c8dc1cbfef6a3ef90acbbb992ca22fe9466ee6f9d4898eda277a7ac3ab4b25101\",\n@@ -2139,7 +2141,371 @@\n     \"P2PK with witness\"\n ],\n \n-[\"CHECKSEQUENCEVERIFY tests\"], \n+[\"Testing with compressed keys in witness v0 with WITNESS_PUBKEYTYPE\"],\n+[\n+    [\n+        \"304402204256146fcf8e73b0fd817ffa2a4e408ff0418ff987dd08a4f485b62546f6c43c02203f3c8c3e2febc051e1222867f5f9d0eaf039d6792911c10940aa3cc74123378e01\",\n+        \"210279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798ac\",\n+        0.00000001\n+    ],\n+    \"\",\n+    \"0 0x20 0x1863143c14c5166804bd19203356da136c985678cd4d27a1b8c6329604903262\",\n+    \"P2SH,WITNESS,WITNESS_PUBKEYTYPE\",\n+    \"OK\",\n+    \"Basic P2WSH with compressed key\"\n+],\n+[\n+    [\n+        \"304402204edf27486f11432466b744df533e1acac727e0c83e5f912eb289a3df5bf8035f022075809fdd876ede40ad21667eba8b7e96394938f9c9c50f11b6a1280cce2cea8601\",\n+        \"0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\",\n+        0.00000001\n+    ],\n+    \"\",\n+    \"0 0x14 0x751e76e8199196d454941c45d1b3a323f1433bd6\",\n+    \"P2SH,WITNESS,WITNESS_PUBKEYTYPE\",\n+    \"OK\",\n+    \"Basic P2WPKH with compressed key\"\n+],\n+[\n+    [\n+        \"304402203a549090cc46bce1e5e95c4922ea2c12747988e0207b04c42f81cdbe87bb1539022050f57a245b875fd5119c419aaf050bcdf41384f0765f04b809e5bced1fe7093d01\",\n+        \"210279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798ac\",\n+        0.00000001\n+    ],\n+    \"0x22 0x00201863143c14c5166804bd19203356da136c985678cd4d27a1b8c6329604903262\",\n+    \"HASH160 0x14 0xe4300531190587e3880d4c3004f5355d88ff928d EQUAL\",\n+    \"P2SH,WITNESS,WITNESS_PUBKEYTYPE\",\n+    \"OK\",\n+    \"Basic P2SH(P2WSH) with compressed key\"\n+],\n+[\n+    [\n+        \"304402201bc0d53046827f4a35a3166e33e3b3366c4085540dc383b95d21ed2ab11e368a0220333e78c6231214f5f8e59621e15d7eeab0d4e4d0796437e00bfbd2680c5f9c1701\",\n+        \"0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\",\n+        0.00000001\n+    ],\n+    \"0x16 0x0014751e76e8199196d454941c45d1b3a323f1433bd6\",\n+    \"HASH160 0x14 0xbcfeb728b584253d5f3f70bcb780e9ef218a68f4 EQUAL\",\n+    \"P2SH,WITNESS,WITNESS_PUBKEYTYPE\",\n+    \"OK\",\n+    \"Basic P2SH(P2WPKH) with compressed key\"\n+],\n+\n+[\"Testing with uncompressed keys in witness v0 with WITNESS_PUBKEYTYPE\"],\n+[\n+    [\n+        \"304402200d461c140cfdfcf36b94961db57ae8c18d1cb80e9d95a9e47ac22470c1bf125502201c8dc1cbfef6a3ef90acbbb992ca22fe9466ee6f9d4898eda277a7ac3ab4b25101\",\n+        \"410479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8ac\",\n+        0.00000001\n+    ],\n+    \"\",\n+    \"0 0x20 0xb95237b48faaa69eb078e1170be3b5cbb3fddf16d0a991e14ad274f7b33a4f64\",\n+    \"P2SH,WITNESS,WITNESS_PUBKEYTYPE\",\n+    \"WITNESS_PUBKEYTYPE\",\n+    \"Basic P2WSH\"\n+],\n+[\n+    [\n+        \"304402201e7216e5ccb3b61d46946ec6cc7e8c4e0117d13ac2fd4b152197e4805191c74202203e9903e33e84d9ee1dd13fb057afb7ccfb47006c23f6a067185efbc9dd780fc501\",\n+        \"0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8\",\n+        0.00000001\n+    ],\n+    \"\",\n+    \"0 0x14 0x91b24bf9f5288532960ac687abb035127b1d28a5\",\n+    \"P2SH,WITNESS,WITNESS_PUBKEYTYPE\",\n+    \"WITNESS_PUBKEYTYPE\",\n+    \"Basic P2WPKH\"\n+],\n+[\n+    [\n+        \"3044022066e02c19a513049d49349cf5311a1b012b7c4fae023795a18ab1d91c23496c22022025e216342c8e07ce8ef51e8daee88f84306a9de66236cab230bb63067ded1ad301\",\n+        \"410479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8ac\",\n+        0.00000001\n+    ],\n+    \"0x22 0x0020b95237b48faaa69eb078e1170be3b5cbb3fddf16d0a991e14ad274f7b33a4f64\",\n+    \"HASH160 0x14 0xf386c2ba255cc56d20cfa6ea8b062f8b59945518 EQUAL\",\n+    \"P2SH,WITNESS,WITNESS_PUBKEYTYPE\",\n+    \"WITNESS_PUBKEYTYPE\",\n+    \"Basic P2SH(P2WSH)\"\n+],\n+[\n+    [\n+        \"304402200929d11561cd958460371200f82e9cae64c727a495715a31828e27a7ad57b36d0220361732ced04a6f97351ecca21a56d0b8cd4932c1da1f8f569a2b68e5e48aed7801\",\n+        \"0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8\",\n+        0.00000001\n+    ],\n+    \"0x16 0x001491b24bf9f5288532960ac687abb035127b1d28a5\",\n+    \"HASH160 0x14 0x17743beb429c55c942d2ec703b98c4d57c2df5c6 EQUAL\",\n+    \"P2SH,WITNESS,WITNESS_PUBKEYTYPE\",\n+    \"WITNESS_PUBKEYTYPE\",\n+    \"Basic P2SH(P2WPKH)\"\n+],\n+\n+[\"Testing P2WSH multisig with compressed keys\"],\n+[\n+    [\n+        \"\",\n+        \"304402207eb8a59b5c65fc3f6aeef77066556ed5c541948a53a3ba7f7c375b8eed76ee7502201e036a7a9a98ff919ff94dc905d67a1ec006f79ef7cff0708485c8bb79dce38e01\",\n+        \"5121038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508210279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f8179852ae\",\n+        0.00000001\n+    ],\n+    \"\",\n+    \"0 0x20 0x06c24420938f0fa3c1cb2707d867154220dca365cdbfa0dd2a83854730221460\",\n+    \"P2SH,WITNESS,WITNESS_PUBKEYTYPE\",\n+    \"OK\",\n+    \"P2WSH CHECKMULTISIG with compressed keys\"\n+],\n+[\n+    [\n+        \"\",\n+        \"3044022033706aed33b8155d5486df3b9bca8cdd3bd4bdb5436dce46d72cdaba51d22b4002203626e94fe53a178af46624f17315c6931f20a30b103f5e044e1eda0c3fe185c601\",\n+        \"5121038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508210279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f8179852ae\",\n+        0.00000001\n+    ],\n+    \"0x22 0x002006c24420938f0fa3c1cb2707d867154220dca365cdbfa0dd2a83854730221460\",\n+    \"HASH160 0x14 0x26282aad7c29369d15fed062a778b6100d31a340 EQUAL\",\n+    \"P2SH,WITNESS,WITNESS_PUBKEYTYPE\",\n+    \"OK\",\n+    \"P2SH(P2WSH) CHECKMULTISIG with compressed keys\"\n+],\n+[\n+    [\n+        \"\",\n+        \"304402204048b7371ab1c544362efb89af0c80154747d665aa4fcfb2edfd2d161e57b42e02207e043748e96637080ffc3acbd4dcc6fee1e58d30f6d1269535f32188e5ddae7301\",\n+        \"5121038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508210279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f8179852ae\",\n+        0.00000001\n+    ],\n+    \"\",\n+    \"0 0x20 0x06c24420938f0fa3c1cb2707d867154220dca365cdbfa0dd2a83854730221460\",\n+    \"P2SH,WITNESS,WITNESS_PUBKEYTYPE\",\n+    \"OK\",\n+    \"P2WSH CHECKMULTISIG with compressed keys\"\n+],\n+[\n+    [\n+        \"\",\n+        \"3044022073902ef0b8a554c36c44cc03c1b64df96ce2914ebcf946f5bb36078fd5245cdf02205b148f1ba127065fb8c83a5a9576f2dcd111739788ed4bb3ee08b2bd3860c91c01\",\n+        \"5121038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508210279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f8179852ae\",\n+        0.00000001\n+    ],\n+    \"0x22 0x002006c24420938f0fa3c1cb2707d867154220dca365cdbfa0dd2a83854730221460\",\n+    \"HASH160 0x14 0x26282aad7c29369d15fed062a778b6100d31a340 EQUAL\",\n+    \"P2SH,WITNESS,WITNESS_PUBKEYTYPE\",\n+    \"OK\",\n+    \"P2SH(P2WSH) CHECKMULTISIG with compressed keys\"\n+],\n+\n+[\"Testing P2WSH multisig with compressed and uncompressed keys (first key being the key closer to the top of stack)\"],\n+[\n+    [\n+        \"\",\n+        \"304402202d092ededd1f060609dbf8cb76950634ff42b3e62cf4adb69ab92397b07d742302204ff886f8d0817491a96d1daccdcc820f6feb122ee6230143303100db37dfa79f01\",\n+        \"5121038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508410479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b852ae\",\n+        0.00000001\n+    ],\n+    \"\",\n+    \"0 0x20 0x08a6665ebfd43b02323423e764e185d98d1587f903b81507dbb69bfc41005efa\",\n+    \"P2SH,WITNESS\",\n+    \"OK\",\n+    \"P2WSH CHECKMULTISIG with first key uncompressed and signing with the first key\"\n+],\n+[\n+    [\n+        \"\",\n+        \"304402202dd7e91243f2235481ffb626c3b7baf2c859ae3a5a77fb750ef97b99a8125dc002204960de3d3c3ab9496e218ec57e5240e0e10a6f9546316fe240c216d45116d29301\",\n+        \"5121038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508410479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b852ae\",\n+        0.00000001\n+    ],\n+    \"0x22 0x002008a6665ebfd43b02323423e764e185d98d1587f903b81507dbb69bfc41005efa\",\n+    \"HASH160 0x14 0x6f5ecd4b83b77f3c438f5214eff96454934fc5d1 EQUAL\",\n+    \"P2SH,WITNESS\",\n+    \"OK\",\n+    \"P2SH(P2WSH) CHECKMULTISIG first key uncompressed and signing with the first key\"\n+],\n+[\n+    [\n+        \"\",\n+        \"304402202d092ededd1f060609dbf8cb76950634ff42b3e62cf4adb69ab92397b07d742302204ff886f8d0817491a96d1daccdcc820f6feb122ee6230143303100db37dfa79f01\",\n+        \"5121038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508410479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b852ae\",\n+        0.00000001\n+    ],\n+    \"\",\n+    \"0 0x20 0x08a6665ebfd43b02323423e764e185d98d1587f903b81507dbb69bfc41005efa\",\n+    \"P2SH,WITNESS,WITNESS_PUBKEYTYPE\",\n+    \"WITNESS_PUBKEYTYPE\",\n+    \"P2WSH CHECKMULTISIG with first key uncompressed and signing with the first key\"\n+],\n+[\n+    [\n+        \"\",\n+        \"304402202dd7e91243f2235481ffb626c3b7baf2c859ae3a5a77fb750ef97b99a8125dc002204960de3d3c3ab9496e218ec57e5240e0e10a6f9546316fe240c216d45116d29301\",\n+        \"5121038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508410479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b852ae\",\n+        0.00000001\n+    ],\n+    \"0x22 0x002008a6665ebfd43b02323423e764e185d98d1587f903b81507dbb69bfc41005efa\",\n+    \"HASH160 0x14 0x6f5ecd4b83b77f3c438f5214eff96454934fc5d1 EQUAL\",\n+    \"P2SH,WITNESS,WITNESS_PUBKEYTYPE\",\n+    \"WITNESS_PUBKEYTYPE\",\n+    \"P2SH(P2WSH) CHECKMULTISIG with first key uncompressed and signing with the first key\"\n+],\n+[\n+    [\n+        \"\",\n+        \"304402201e9e6f7deef5b2f21d8223c5189b7d5e82d237c10e97165dd08f547c4e5ce6ed02206796372eb1cc6acb52e13ee2d7f45807780bf96b132cb6697f69434be74b1af901\",\n+        \"5121038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508410479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b852ae\",\n+        0.00000001\n+    ],\n+    \"\",\n+    \"0 0x20 0x08a6665ebfd43b02323423e764e185d98d1587f903b81507dbb69bfc41005efa\",\n+    \"P2SH,WITNESS\",\n+    \"OK\",\n+    \"P2WSH CHECKMULTISIG with first key uncompressed and signing with the second key\"\n+],\n+[\n+    [\n+        \"\",\n+        \"3044022045e667f3f0f3147b95597a24babe9afecea1f649fd23637dfa7ed7e9f3ac18440220295748e81005231135289fe3a88338dabba55afa1bdb4478691337009d82b68d01\",\n+        \"5121038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508410479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b852ae\",\n+        0.00000001\n+    ],\n+    \"0x22 0x002008a6665ebfd43b02323423e764e185d98d1587f903b81507dbb69bfc41005efa\",\n+    \"HASH160 0x14 0x6f5ecd4b83b77f3c438f5214eff96454934fc5d1 EQUAL\",\n+    \"P2SH,WITNESS\",\n+    \"OK\",\n+    \"P2SH(P2WSH) CHECKMULTISIG with first key uncompressed and signing with the second key\"\n+],\n+[\n+    [\n+        \"\",\n+        \"304402201e9e6f7deef5b2f21d8223c5189b7d5e82d237c10e97165dd08f547c4e5ce6ed02206796372eb1cc6acb52e13ee2d7f45807780bf96b132cb6697f69434be74b1af901\",\n+        \"5121038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508410479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b852ae\",\n+        0.00000001\n+    ],\n+    \"\",\n+    \"0 0x20 0x08a6665ebfd43b02323423e764e185d98d1587f903b81507dbb69bfc41005efa\",\n+    \"P2SH,WITNESS,WITNESS_PUBKEYTYPE\",\n+    \"WITNESS_PUBKEYTYPE\",\n+    \"P2WSH CHECKMULTISIG with first key uncompressed and signing with the second key\"\n+],\n+[\n+    [\n+        \"\",\n+        \"3044022045e667f3f0f3147b95597a24babe9afecea1f649fd23637dfa7ed7e9f3ac18440220295748e81005231135289fe3a88338dabba55afa1bdb4478691337009d82b68d01\",\n+        \"5121038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508410479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b852ae\",\n+        0.00000001\n+    ],\n+    \"0x22 0x002008a6665ebfd43b02323423e764e185d98d1587f903b81507dbb69bfc41005efa\",\n+    \"HASH160 0x14 0x6f5ecd4b83b77f3c438f5214eff96454934fc5d1 EQUAL\",\n+    \"P2SH,WITNESS,WITNESS_PUBKEYTYPE\",\n+    \"WITNESS_PUBKEYTYPE\",\n+    \"P2SH(P2WSH) CHECKMULTISIG with first key uncompressed and signing with the second key\"\n+],\n+[\n+    [\n+        \"\",\n+        \"3044022046f5367a261fd8f8d7de6eb390491344f8ec2501638fb9a1095a0599a21d3f4c02205c1b3b51d20091c5f1020841bbca87b44ebe25405c64e4acf758f2eae8665f8401\",\n+        \"5141048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf210279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f8179852ae\",\n+        0.00000001\n+    ],\n+    \"\",\n+    \"0 0x20 0x230828ed48871f0f362ce9432aa52f620f442cc8d9ce7a8b5e798365595a38bb\",\n+    \"P2SH,WITNESS\",\n+    \"OK\",\n+    \"P2WSH CHECKMULTISIG with second key uncompressed and signing with the first key\"\n+],\n+[\n+    [\n+        \"\",\n+        \"3044022053e210e4fb1881e6092fd75c3efc5163105599e246ded661c0ee2b5682cc2d6c02203a26b7ada8682a095b84c6d1b881637000b47d761fc837c4cee33555296d63f101\",\n+        \"5141048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf210279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f8179852ae\",\n+        0.00000001\n+    ],\n+    \"0x22 0x0020230828ed48871f0f362ce9432aa52f620f442cc8d9ce7a8b5e798365595a38bb\",\n+    \"HASH160 0x14 0x3478e7019ce61a68148f87549579b704cbe4c393 EQUAL\",\n+    \"P2SH,WITNESS\",\n+    \"OK\",\n+    \"P2SH(P2WSH) CHECKMULTISIG second key uncompressed and signing with the first key\"\n+],\n+[\n+    [\n+        \"\",\n+        \"3044022046f5367a261fd8f8d7de6eb390491344f8ec2501638fb9a1095a0599a21d3f4c02205c1b3b51d20091c5f1020841bbca87b44ebe25405c64e4acf758f2eae8665f8401\",\n+        \"5141048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf210279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f8179852ae\",\n+        0.00000001\n+    ],\n+    \"\",\n+    \"0 0x20 0x230828ed48871f0f362ce9432aa52f620f442cc8d9ce7a8b5e798365595a38bb\",\n+    \"P2SH,WITNESS,WITNESS_PUBKEYTYPE\",\n+    \"OK\",\n+    \"P2WSH CHECKMULTISIG with second key uncompressed and signing with the first key should pass as the uncompressed key is not used\"\n+],\n+[\n+    [\n+        \"\",\n+        \"3044022053e210e4fb1881e6092fd75c3efc5163105599e246ded661c0ee2b5682cc2d6c02203a26b7ada8682a095b84c6d1b881637000b47d761fc837c4cee33555296d63f101\",\n+        \"5141048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf210279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f8179852ae\",\n+        0.00000001\n+    ],\n+    \"0x22 0x0020230828ed48871f0f362ce9432aa52f620f442cc8d9ce7a8b5e798365595a38bb\",\n+    \"HASH160 0x14 0x3478e7019ce61a68148f87549579b704cbe4c393 EQUAL\",\n+    \"P2SH,WITNESS,WITNESS_PUBKEYTYPE\",\n+    \"OK\",\n+    \"P2SH(P2WSH) CHECKMULTISIG with second key uncompressed and signing with the first key should pass as the uncompressed key is not used\"\n+],\n+[\n+    [\n+        \"\",\n+        \"304402206c6d9f5daf85b54af2a93ec38b15ab27f205dbf5c735365ff12451e43613d1f40220736a44be63423ed5ebf53491618b7cc3d8a5093861908da853739c73717938b701\",\n+        \"5141048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf210279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f8179852ae\",\n+        0.00000001\n+    ],\n+    \"\",\n+    \"0 0x20 0x230828ed48871f0f362ce9432aa52f620f442cc8d9ce7a8b5e798365595a38bb\",\n+    \"P2SH,WITNESS\",\n+    \"OK\",\n+    \"P2WSH CHECKMULTISIG with second key uncompressed and signing with the second key\"\n+],\n+[\n+    [\n+        \"\",\n+        \"30440220687871bc6144012d75baf585bb26ce13997f7d8c626f4d8825b069c3b2d064470220108936fe1c57327764782253e99090b09c203ec400ed35ce9e026ce2ecf842a001\",\n+        \"5141048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf210279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f8179852ae\",\n+        0.00000001\n+    ],\n+    \"0x22 0x0020230828ed48871f0f362ce9432aa52f620f442cc8d9ce7a8b5e798365595a38bb\",\n+    \"HASH160 0x14 0x3478e7019ce61a68148f87549579b704cbe4c393 EQUAL\",\n+    \"P2SH,WITNESS\",\n+    \"OK\",\n+    \"P2SH(P2WSH) CHECKMULTISIG with second key uncompressed and signing with the second key\"\n+],\n+[\n+    [\n+        \"\",\n+        \"304402206c6d9f5daf85b54af2a93ec38b15ab27f205dbf5c735365ff12451e43613d1f40220736a44be63423ed5ebf53491618b7cc3d8a5093861908da853739c73717938b701\",\n+        \"5141048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf210279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f8179852ae\",\n+        0.00000001\n+    ],\n+    \"\",\n+    \"0 0x20 0x230828ed48871f0f362ce9432aa52f620f442cc8d9ce7a8b5e798365595a38bb\",\n+    \"P2SH,WITNESS,WITNESS_PUBKEYTYPE\",\n+    \"WITNESS_PUBKEYTYPE\",\n+    \"P2WSH CHECKMULTISIG with second key uncompressed and signing with the second key\"\n+],\n+[\n+    [\n+        \"\",\n+        \"30440220687871bc6144012d75baf585bb26ce13997f7d8c626f4d8825b069c3b2d064470220108936fe1c57327764782253e99090b09c203ec400ed35ce9e026ce2ecf842a001\",\n+        \"5141048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf210279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f8179852ae\",\n+        0.00000001\n+    ],\n+    \"0x22 0x0020230828ed48871f0f362ce9432aa52f620f442cc8d9ce7a8b5e798365595a38bb\",\n+    \"HASH160 0x14 0x3478e7019ce61a68148f87549579b704cbe4c393 EQUAL\",\n+    \"P2SH,WITNESS,WITNESS_PUBKEYTYPE\",\n+    \"WITNESS_PUBKEYTYPE\",\n+    \"P2SH(P2WSH) CHECKMULTISIG with second key uncompressed and signing with the second key\"\n+],\n+\n+[\"CHECKSEQUENCEVERIFY tests\"],\n [\"\", \"CHECKSEQUENCEVERIFY\", \"CHECKSEQUENCEVERIFY\", \"INVALID_STACK_OPERATION\", \"CSV automatically fails on a empty stack\"],\n [\"-1\", \"CHECKSEQUENCEVERIFY\", \"CHECKSEQUENCEVERIFY\", \"NEGATIVE_LOCKTIME\", \"CSV automatically fails if stack top is negative\"],\n [\"0x0100\", \"CHECKSEQUENCEVERIFY\", \"CHECKSEQUENCEVERIFY,MINIMALDATA\", \"UNKNOWN_ERROR\", \"CSV fails if stack top is not minimally encoded\"],"
      },
      {
        "sha": "712a2c27f8faed7358a36202771fce1999d1bfee",
        "filename": "src/test/data/tt-delin1-out.json",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55d8ffeed69683bd735d90c287b30f10805ae6ca/src/test/data/tt-delin1-out.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55d8ffeed69683bd735d90c287b30f10805ae6ca/src/test/data/tt-delin1-out.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tt-delin1-out.json?ref=55d8ffeed69683bd735d90c287b30f10805ae6ca",
        "patch": "@@ -1,5 +1,6 @@\n {\n     \"txid\": \"81b2035be1da1abe745c6141174a73d151009ec17b3d5ebffa2e177408c50dfd\",\n+    \"hash\": \"81b2035be1da1abe745c6141174a73d151009ec17b3d5ebffa2e177408c50dfd\",\n     \"version\": 1,\n     \"locktime\": 0,\n     \"vin\": ["
      },
      {
        "sha": "afc4e95762d4a9dcc72785e24c8602f552abc5cc",
        "filename": "src/test/data/tt-delout1-out.json",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55d8ffeed69683bd735d90c287b30f10805ae6ca/src/test/data/tt-delout1-out.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55d8ffeed69683bd735d90c287b30f10805ae6ca/src/test/data/tt-delout1-out.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tt-delout1-out.json?ref=55d8ffeed69683bd735d90c287b30f10805ae6ca",
        "patch": "@@ -1,5 +1,6 @@\n {\n     \"txid\": \"c46ccd75b5050e942b2e86a3648f843f525fe6fc000bf0534ba5973063354493\",\n+    \"hash\": \"c46ccd75b5050e942b2e86a3648f843f525fe6fc000bf0534ba5973063354493\",\n     \"version\": 1,\n     \"locktime\": 0,\n     \"vin\": ["
      },
      {
        "sha": "2b9075f8acece0136da5a9bdb2b0bcc58f29fe1b",
        "filename": "src/test/data/tt-locktime317000-out.json",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55d8ffeed69683bd735d90c287b30f10805ae6ca/src/test/data/tt-locktime317000-out.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55d8ffeed69683bd735d90c287b30f10805ae6ca/src/test/data/tt-locktime317000-out.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tt-locktime317000-out.json?ref=55d8ffeed69683bd735d90c287b30f10805ae6ca",
        "patch": "@@ -1,5 +1,6 @@\n {\n     \"txid\": \"aded538f642c17e15f4d3306b8be7e1a4d1ae0c4616d641ab51ea09ba65e5cb5\",\n+    \"hash\": \"aded538f642c17e15f4d3306b8be7e1a4d1ae0c4616d641ab51ea09ba65e5cb5\",\n     \"version\": 1,\n     \"locktime\": 317000,\n     \"vin\": ["
      },
      {
        "sha": "567e8026a321cd894b5d7f8d22c1155f9efa1797",
        "filename": "src/test/data/txcreate1.json",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55d8ffeed69683bd735d90c287b30f10805ae6ca/src/test/data/txcreate1.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55d8ffeed69683bd735d90c287b30f10805ae6ca/src/test/data/txcreate1.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/txcreate1.json?ref=55d8ffeed69683bd735d90c287b30f10805ae6ca",
        "patch": "@@ -1,5 +1,6 @@\n {\n     \"txid\": \"f70f0d6c71416ed538e37549f430ab3665fee2437a42f10238c1bd490e782231\",\n+    \"hash\": \"f70f0d6c71416ed538e37549f430ab3665fee2437a42f10238c1bd490e782231\",\n     \"version\": 1,\n     \"locktime\": 0,\n     \"vin\": ["
      },
      {
        "sha": "a70c1d302a28d06823c1908e812a55b2b801d673",
        "filename": "src/test/data/txcreate2.json",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55d8ffeed69683bd735d90c287b30f10805ae6ca/src/test/data/txcreate2.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55d8ffeed69683bd735d90c287b30f10805ae6ca/src/test/data/txcreate2.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/txcreate2.json?ref=55d8ffeed69683bd735d90c287b30f10805ae6ca",
        "patch": "@@ -1,5 +1,6 @@\n {\n     \"txid\": \"cf90229625e9eb10f6be8156bf6aa5ec2eca19a42b1e05c11f3029b560a32e13\",\n+    \"hash\": \"cf90229625e9eb10f6be8156bf6aa5ec2eca19a42b1e05c11f3029b560a32e13\",\n     \"version\": 1,\n     \"locktime\": 0,\n     \"vin\": ["
      },
      {
        "sha": "760518d30a983fb459a14b42f3ea1755b9563659",
        "filename": "src/test/data/txcreatedata1.json",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55d8ffeed69683bd735d90c287b30f10805ae6ca/src/test/data/txcreatedata1.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55d8ffeed69683bd735d90c287b30f10805ae6ca/src/test/data/txcreatedata1.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/txcreatedata1.json?ref=55d8ffeed69683bd735d90c287b30f10805ae6ca",
        "patch": "@@ -1,5 +1,6 @@\n {\n     \"txid\": \"07894b4d12fe7853dd911402db1620920d261b9627c447f931417d330c25f06e\",\n+    \"hash\": \"07894b4d12fe7853dd911402db1620920d261b9627c447f931417d330c25f06e\",\n     \"version\": 1,\n     \"locktime\": 0,\n     \"vin\": ["
      },
      {
        "sha": "56dfe4a1b055a99118762a417f36fee507315d45",
        "filename": "src/test/data/txcreatedata2.json",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55d8ffeed69683bd735d90c287b30f10805ae6ca/src/test/data/txcreatedata2.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55d8ffeed69683bd735d90c287b30f10805ae6ca/src/test/data/txcreatedata2.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/txcreatedata2.json?ref=55d8ffeed69683bd735d90c287b30f10805ae6ca",
        "patch": "@@ -1,5 +1,6 @@\n {\n     \"txid\": \"4ed17118f5e932ba8c75c461787d171bc02a016d8557cb5bcf34cd416c27bb8b\",\n+    \"hash\": \"4ed17118f5e932ba8c75c461787d171bc02a016d8557cb5bcf34cd416c27bb8b\",\n     \"version\": 1,\n     \"locktime\": 0,\n     \"vin\": ["
      },
      {
        "sha": "9bc0ed459360920bdda25b58c93bcde7f4beddd9",
        "filename": "src/test/data/txcreatedata_seq0.json",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55d8ffeed69683bd735d90c287b30f10805ae6ca/src/test/data/txcreatedata_seq0.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55d8ffeed69683bd735d90c287b30f10805ae6ca/src/test/data/txcreatedata_seq0.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/txcreatedata_seq0.json?ref=55d8ffeed69683bd735d90c287b30f10805ae6ca",
        "patch": "@@ -1,5 +1,6 @@\n {\n     \"txid\": \"71603ccb1cd76d73d76eb6cfd5f0b9df6d65d90d76860ee52cb461c4be7032e8\",\n+    \"hash\": \"71603ccb1cd76d73d76eb6cfd5f0b9df6d65d90d76860ee52cb461c4be7032e8\",\n     \"version\": 1,\n     \"locktime\": 0,\n     \"vin\": ["
      },
      {
        "sha": "d323255418d04843ed7201fc12a71ae1c5c9d5dd",
        "filename": "src/test/data/txcreatedata_seq1.json",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55d8ffeed69683bd735d90c287b30f10805ae6ca/src/test/data/txcreatedata_seq1.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55d8ffeed69683bd735d90c287b30f10805ae6ca/src/test/data/txcreatedata_seq1.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/txcreatedata_seq1.json?ref=55d8ffeed69683bd735d90c287b30f10805ae6ca",
        "patch": "@@ -1,5 +1,6 @@\n {\n     \"txid\": \"c4dea671b0d7b48f8ab10bc46650e8329d3c5766931f548f513847a19f5ba75b\",\n+    \"hash\": \"c4dea671b0d7b48f8ab10bc46650e8329d3c5766931f548f513847a19f5ba75b\",\n     \"version\": 1,\n     \"locktime\": 0,\n     \"vin\": ["
      },
      {
        "sha": "ff39e71b40c0d68a55a4aba988e5ef95a332ee29",
        "filename": "src/test/data/txcreatesign.json",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55d8ffeed69683bd735d90c287b30f10805ae6ca/src/test/data/txcreatesign.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55d8ffeed69683bd735d90c287b30f10805ae6ca/src/test/data/txcreatesign.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/txcreatesign.json?ref=55d8ffeed69683bd735d90c287b30f10805ae6ca",
        "patch": "@@ -1,5 +1,6 @@\n {\n     \"txid\": \"977e7cd286cb72cd470d539ba6cb48400f8f387d97451d45cdb8819437a303af\",\n+    \"hash\": \"977e7cd286cb72cd470d539ba6cb48400f8f387d97451d45cdb8819437a303af\",\n     \"version\": 1,\n     \"locktime\": 0,\n     \"vin\": ["
      },
      {
        "sha": "561adb8ea2252a9eebfa70ec8bd2a580c8dcbb4a",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 94,
        "deletions": 0,
        "changes": 94,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55d8ffeed69683bd735d90c287b30f10805ae6ca/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55d8ffeed69683bd735d90c287b30f10805ae6ca/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=55d8ffeed69683bd735d90c287b30f10805ae6ca",
        "patch": "@@ -99,6 +99,7 @@ static ScriptErrorDesc script_errors[]={\n     {SCRIPT_ERR_WITNESS_MALLEATED, \"WITNESS_MALLEATED\"},\n     {SCRIPT_ERR_WITNESS_MALLEATED_P2SH, \"WITNESS_MALLEATED_P2SH\"},\n     {SCRIPT_ERR_WITNESS_UNEXPECTED, \"WITNESS_UNEXPECTED\"},\n+    {SCRIPT_ERR_WITNESS_PUBKEYTYPE, \"WITNESS_PUBKEYTYPE\"},\n };\n \n const char *FormatScriptError(ScriptError_t err)\n@@ -825,6 +826,99 @@ BOOST_AUTO_TEST_CASE(script_build)\n                                 \"P2PK with witness\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH\n                                ).PushSig(keys.key0).Push(\"0\").AsWit().ScriptError(SCRIPT_ERR_WITNESS_UNEXPECTED));\n \n+    // Compressed keys should pass SCRIPT_VERIFY_WITNESS_PUBKEYTYPE\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0C) << OP_CHECKSIG,\n+                                \"Basic P2WSH with compressed key\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS_PUBKEYTYPE, false, WITNESS_SH,\n+                                0, 1).PushWitSig(keys.key0C).PushWitRedeem());\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0C),\n+                                \"Basic P2WPKH with compressed key\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS_PUBKEYTYPE, false, WITNESS_PKH,\n+                                0, 1).PushWitSig(keys.key0C).Push(keys.pubkey0C).AsWit());\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0C) << OP_CHECKSIG,\n+                                \"Basic P2SH(P2WSH) with compressed key\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS_PUBKEYTYPE, true, WITNESS_SH,\n+                                0, 1).PushWitSig(keys.key0C).PushWitRedeem().PushRedeem());\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0C),\n+                                \"Basic P2SH(P2WPKH) with compressed key\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS_PUBKEYTYPE, true, WITNESS_PKH,\n+                                0, 1).PushWitSig(keys.key0C).Push(keys.pubkey0C).AsWit().PushRedeem());\n+\n+    // Testing uncompressed key in witness with SCRIPT_VERIFY_WITNESS_PUBKEYTYPE\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0) << OP_CHECKSIG,\n+                                \"Basic P2WSH\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS_PUBKEYTYPE, false, WITNESS_SH,\n+                                0, 1).PushWitSig(keys.key0).PushWitRedeem().ScriptError(SCRIPT_ERR_WITNESS_PUBKEYTYPE));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0),\n+                                \"Basic P2WPKH\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS_PUBKEYTYPE, false, WITNESS_PKH,\n+                                0, 1).PushWitSig(keys.key0).Push(keys.pubkey0).AsWit().ScriptError(SCRIPT_ERR_WITNESS_PUBKEYTYPE));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0) << OP_CHECKSIG,\n+                                \"Basic P2SH(P2WSH)\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS_PUBKEYTYPE, true, WITNESS_SH,\n+                                0, 1).PushWitSig(keys.key0).PushWitRedeem().PushRedeem().ScriptError(SCRIPT_ERR_WITNESS_PUBKEYTYPE));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0),\n+                                \"Basic P2SH(P2WPKH)\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS_PUBKEYTYPE, true, WITNESS_PKH,\n+                                0, 1).PushWitSig(keys.key0).Push(keys.pubkey0).AsWit().PushRedeem().ScriptError(SCRIPT_ERR_WITNESS_PUBKEYTYPE));\n+\n+    // P2WSH 1-of-2 multisig with compressed keys\n+    tests.push_back(TestBuilder(CScript() << OP_1 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey0C) << OP_2 << OP_CHECKMULTISIG,\n+                                \"P2WSH CHECKMULTISIG with compressed keys\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS_PUBKEYTYPE, false, WITNESS_SH,\n+                                0, 1).Push(CScript()).AsWit().PushWitSig(keys.key0C).PushWitRedeem());\n+    tests.push_back(TestBuilder(CScript() << OP_1 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey0C) << OP_2 << OP_CHECKMULTISIG,\n+                                \"P2SH(P2WSH) CHECKMULTISIG with compressed keys\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS_PUBKEYTYPE, true, WITNESS_SH,\n+                                0, 1).Push(CScript()).AsWit().PushWitSig(keys.key0C).PushWitRedeem().PushRedeem());\n+    tests.push_back(TestBuilder(CScript() << OP_1 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey0C) << OP_2 << OP_CHECKMULTISIG,\n+                                \"P2WSH CHECKMULTISIG with compressed keys\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS_PUBKEYTYPE, false, WITNESS_SH,\n+                                0, 1).Push(CScript()).AsWit().PushWitSig(keys.key1C).PushWitRedeem());\n+    tests.push_back(TestBuilder(CScript() << OP_1 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey0C) << OP_2 << OP_CHECKMULTISIG,\n+                                \"P2SH(P2WSH) CHECKMULTISIG with compressed keys\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS_PUBKEYTYPE, true, WITNESS_SH,\n+                                0, 1).Push(CScript()).AsWit().PushWitSig(keys.key1C).PushWitRedeem().PushRedeem());\n+\n+    // P2WSH 1-of-2 multisig with first key uncompressed\n+    tests.push_back(TestBuilder(CScript() << OP_1 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey0) << OP_2 << OP_CHECKMULTISIG,\n+                                \"P2WSH CHECKMULTISIG with first key uncompressed and signing with the first key\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, false, WITNESS_SH,\n+                                0, 1).Push(CScript()).AsWit().PushWitSig(keys.key0).PushWitRedeem());\n+    tests.push_back(TestBuilder(CScript() << OP_1 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey0) << OP_2 << OP_CHECKMULTISIG,\n+                                \"P2SH(P2WSH) CHECKMULTISIG first key uncompressed and signing with the first key\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, true, WITNESS_SH,\n+                                0, 1).Push(CScript()).AsWit().PushWitSig(keys.key0).PushWitRedeem().PushRedeem());\n+    tests.push_back(TestBuilder(CScript() << OP_1 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey0) << OP_2 << OP_CHECKMULTISIG,\n+                                \"P2WSH CHECKMULTISIG with first key uncompressed and signing with the first key\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS_PUBKEYTYPE, false, WITNESS_SH,\n+                                0, 1).Push(CScript()).AsWit().PushWitSig(keys.key0).PushWitRedeem().ScriptError(SCRIPT_ERR_WITNESS_PUBKEYTYPE));\n+    tests.push_back(TestBuilder(CScript() << OP_1 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey0) << OP_2 << OP_CHECKMULTISIG,\n+                                \"P2SH(P2WSH) CHECKMULTISIG with first key uncompressed and signing with the first key\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS_PUBKEYTYPE, true, WITNESS_SH,\n+                                0, 1).Push(CScript()).AsWit().PushWitSig(keys.key0).PushWitRedeem().PushRedeem().ScriptError(SCRIPT_ERR_WITNESS_PUBKEYTYPE));\n+    tests.push_back(TestBuilder(CScript() << OP_1 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey0) << OP_2 << OP_CHECKMULTISIG,\n+                                \"P2WSH CHECKMULTISIG with first key uncompressed and signing with the second key\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, false, WITNESS_SH,\n+                                0, 1).Push(CScript()).AsWit().PushWitSig(keys.key1C).PushWitRedeem());\n+    tests.push_back(TestBuilder(CScript() << OP_1 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey0) << OP_2 << OP_CHECKMULTISIG,\n+                                \"P2SH(P2WSH) CHECKMULTISIG with first key uncompressed and signing with the second key\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, true, WITNESS_SH,\n+                                0, 1).Push(CScript()).AsWit().PushWitSig(keys.key1C).PushWitRedeem().PushRedeem());\n+    tests.push_back(TestBuilder(CScript() << OP_1 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey0) << OP_2 << OP_CHECKMULTISIG,\n+                                \"P2WSH CHECKMULTISIG with first key uncompressed and signing with the second key\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS_PUBKEYTYPE, false, WITNESS_SH,\n+                                0, 1).Push(CScript()).AsWit().PushWitSig(keys.key1C).PushWitRedeem().ScriptError(SCRIPT_ERR_WITNESS_PUBKEYTYPE));\n+    tests.push_back(TestBuilder(CScript() << OP_1 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey0) << OP_2 << OP_CHECKMULTISIG,\n+                                \"P2SH(P2WSH) CHECKMULTISIG with first key uncompressed and signing with the second key\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS_PUBKEYTYPE, true, WITNESS_SH,\n+                                0, 1).Push(CScript()).AsWit().PushWitSig(keys.key1C).PushWitRedeem().PushRedeem().ScriptError(SCRIPT_ERR_WITNESS_PUBKEYTYPE));\n+    // P2WSH 1-of-2 multisig with second key uncompressed\n+    tests.push_back(TestBuilder(CScript() << OP_1 << ToByteVector(keys.pubkey1) << ToByteVector(keys.pubkey0C) << OP_2 << OP_CHECKMULTISIG,\n+                                \"P2WSH CHECKMULTISIG with second key uncompressed and signing with the first key\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, false, WITNESS_SH,\n+                                0, 1).Push(CScript()).AsWit().PushWitSig(keys.key0C).PushWitRedeem());\n+    tests.push_back(TestBuilder(CScript() << OP_1 << ToByteVector(keys.pubkey1) << ToByteVector(keys.pubkey0C) << OP_2 << OP_CHECKMULTISIG,\n+                                \"P2SH(P2WSH) CHECKMULTISIG second key uncompressed and signing with the first key\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, true, WITNESS_SH,\n+                                0, 1).Push(CScript()).AsWit().PushWitSig(keys.key0C).PushWitRedeem().PushRedeem());\n+    tests.push_back(TestBuilder(CScript() << OP_1 << ToByteVector(keys.pubkey1) << ToByteVector(keys.pubkey0C) << OP_2 << OP_CHECKMULTISIG,\n+                                \"P2WSH CHECKMULTISIG with second key uncompressed and signing with the first key should pass as the uncompressed key is not used\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS_PUBKEYTYPE, false, WITNESS_SH,\n+                                0, 1).Push(CScript()).AsWit().PushWitSig(keys.key0C).PushWitRedeem());\n+    tests.push_back(TestBuilder(CScript() << OP_1 << ToByteVector(keys.pubkey1) << ToByteVector(keys.pubkey0C) << OP_2 << OP_CHECKMULTISIG,\n+                                \"P2SH(P2WSH) CHECKMULTISIG with second key uncompressed and signing with the first key should pass as the uncompressed key is not used\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS_PUBKEYTYPE, true, WITNESS_SH,\n+                                0, 1).Push(CScript()).AsWit().PushWitSig(keys.key0C).PushWitRedeem().PushRedeem());\n+    tests.push_back(TestBuilder(CScript() << OP_1 << ToByteVector(keys.pubkey1) << ToByteVector(keys.pubkey0C) << OP_2 << OP_CHECKMULTISIG,\n+                                \"P2WSH CHECKMULTISIG with second key uncompressed and signing with the second key\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, false, WITNESS_SH,\n+                                0, 1).Push(CScript()).AsWit().PushWitSig(keys.key1).PushWitRedeem());\n+    tests.push_back(TestBuilder(CScript() << OP_1 << ToByteVector(keys.pubkey1) << ToByteVector(keys.pubkey0C) << OP_2 << OP_CHECKMULTISIG,\n+                                \"P2SH(P2WSH) CHECKMULTISIG with second key uncompressed and signing with the second key\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, true, WITNESS_SH,\n+                                0, 1).Push(CScript()).AsWit().PushWitSig(keys.key1).PushWitRedeem().PushRedeem());\n+    tests.push_back(TestBuilder(CScript() << OP_1 << ToByteVector(keys.pubkey1) << ToByteVector(keys.pubkey0C) << OP_2 << OP_CHECKMULTISIG,\n+                                \"P2WSH CHECKMULTISIG with second key uncompressed and signing with the second key\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS_PUBKEYTYPE, false, WITNESS_SH,\n+                                0, 1).Push(CScript()).AsWit().PushWitSig(keys.key1).PushWitRedeem().ScriptError(SCRIPT_ERR_WITNESS_PUBKEYTYPE));\n+    tests.push_back(TestBuilder(CScript() << OP_1 << ToByteVector(keys.pubkey1) << ToByteVector(keys.pubkey0C) << OP_2 << OP_CHECKMULTISIG,\n+                                \"P2SH(P2WSH) CHECKMULTISIG with second key uncompressed and signing with the second key\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS_PUBKEYTYPE, true, WITNESS_SH,\n+                                0, 1).Push(CScript()).AsWit().PushWitSig(keys.key1).PushWitRedeem().PushRedeem().ScriptError(SCRIPT_ERR_WITNESS_PUBKEYTYPE));\n+\n     std::set<std::string> tests_set;\n \n     {"
      },
      {
        "sha": "34d9547f3dc6013189560ac68c8c6585ca2a1166",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 26,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55d8ffeed69683bd735d90c287b30f10805ae6ca/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55d8ffeed69683bd735d90c287b30f10805ae6ca/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=55d8ffeed69683bd735d90c287b30f10805ae6ca",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2015 The Bitcoin Core developers\n+// Copyright (c) 2011-2016 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -55,7 +55,8 @@ static std::map<string, unsigned int> mapFlagNames = boost::assign::map_list_of\n     (string(\"CHECKLOCKTIMEVERIFY\"), (unsigned int)SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY)\n     (string(\"CHECKSEQUENCEVERIFY\"), (unsigned int)SCRIPT_VERIFY_CHECKSEQUENCEVERIFY)\n     (string(\"WITNESS\"), (unsigned int)SCRIPT_VERIFY_WITNESS)\n-    (string(\"DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM\"), (unsigned int)SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM);\n+    (string(\"DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM\"), (unsigned int)SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM)\n+    (string(\"WITNESS_PUBKEYTYPE\"), (unsigned int)SCRIPT_VERIFY_WITNESS_PUBKEYTYPE);\n \n unsigned int ParseScriptFlags(string strFlags)\n {\n@@ -429,7 +430,7 @@ BOOST_AUTO_TEST_CASE(test_big_witness_transaction) {\n     mtx.nVersion = 1;\n \n     CKey key;\n-    key.MakeNewKey(false);\n+    key.MakeNewKey(true); // Need to use compressed keys in segwit or the signing will fail\n     CBasicKeyStore keystore;\n     keystore.AddKeyPubKey(key, key.GetPubKey());\n     CKeyID hash = key.GetPubKey().GetID();\n@@ -625,30 +626,13 @@ BOOST_AUTO_TEST_CASE(test_witness)\n     CheckWithFlag(output1, input2, SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, false);\n     CheckWithFlag(output1, input2, STANDARD_SCRIPT_VERIFY_FLAGS, false);\n \n-    // Witness pay-to-uncompressed-pubkey (v1).\n-    CreateCreditAndSpend(keystore, GetScriptForWitness(scriptPubkey1L), output1, input1);\n-    CreateCreditAndSpend(keystore, GetScriptForWitness(scriptPubkey2L), output2, input2);\n-    CheckWithFlag(output1, input1, 0, true);\n-    CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH, true);\n-    CheckWithFlag(output1, input1, SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, true);\n-    CheckWithFlag(output1, input1, STANDARD_SCRIPT_VERIFY_FLAGS, true);\n-    CheckWithFlag(output1, input2, 0, true);\n-    CheckWithFlag(output1, input2, SCRIPT_VERIFY_P2SH, true);\n-    CheckWithFlag(output1, input2, SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, false);\n-    CheckWithFlag(output1, input2, STANDARD_SCRIPT_VERIFY_FLAGS, false);\n+    // Signing disabled for witness pay-to-uncompressed-pubkey (v1).\n+    CreateCreditAndSpend(keystore, GetScriptForWitness(scriptPubkey1L), output1, input1, false);\n+    CreateCreditAndSpend(keystore, GetScriptForWitness(scriptPubkey2L), output2, input2, false);\n \n-    // P2SH witness pay-to-uncompressed-pubkey (v1).\n-    CreateCreditAndSpend(keystore, GetScriptForDestination(CScriptID(GetScriptForWitness(scriptPubkey1L))), output1, input1);\n-    CreateCreditAndSpend(keystore, GetScriptForDestination(CScriptID(GetScriptForWitness(scriptPubkey2L))), output2, input2);\n-    ReplaceRedeemScript(input2.vin[0].scriptSig, GetScriptForWitness(scriptPubkey1L));\n-    CheckWithFlag(output1, input1, 0, true);\n-    CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH, true);\n-    CheckWithFlag(output1, input1, SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, true);\n-    CheckWithFlag(output1, input1, STANDARD_SCRIPT_VERIFY_FLAGS, true);\n-    CheckWithFlag(output1, input2, 0, true);\n-    CheckWithFlag(output1, input2, SCRIPT_VERIFY_P2SH, true);\n-    CheckWithFlag(output1, input2, SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, false);\n-    CheckWithFlag(output1, input2, STANDARD_SCRIPT_VERIFY_FLAGS, false);\n+    // Signing disabled for P2SH witness pay-to-uncompressed-pubkey (v1).\n+    CreateCreditAndSpend(keystore, GetScriptForDestination(CScriptID(GetScriptForWitness(scriptPubkey1L))), output1, input1, false);\n+    CreateCreditAndSpend(keystore, GetScriptForDestination(CScriptID(GetScriptForWitness(scriptPubkey2L))), output2, input2, false);\n \n     // Normal 2-of-2 multisig\n     CreateCreditAndSpend(keystore, scriptMulti, output1, input1, false);"
      },
      {
        "sha": "87bd65506670a6ab99c44c4e2f1442c0baf98f19",
        "filename": "src/version.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55d8ffeed69683bd735d90c287b30f10805ae6ca/src/version.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55d8ffeed69683bd735d90c287b30f10805ae6ca/src/version.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/version.h?ref=55d8ffeed69683bd735d90c287b30f10805ae6ca",
        "patch": "@@ -39,7 +39,7 @@ static const int SENDHEADERS_VERSION = 70012;\n //! \"feefilter\" tells peers to filter invs to you by fee starts with this version\n static const int FEEFILTER_VERSION = 70013;\n \n-//! shord-id-based block download starts with this version\n+//! short-id-based block download starts with this version\n static const int SHORT_IDS_BLOCKS_VERSION = 70014;\n \n #endif // BITCOIN_VERSION_H"
      },
      {
        "sha": "8e95426d11bdf74d5c24ba9f5866d113fa28a04d",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 5,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55d8ffeed69683bd735d90c287b30f10805ae6ca/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55d8ffeed69683bd735d90c287b30f10805ae6ca/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=55d8ffeed69683bd735d90c287b30f10805ae6ca",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2015 The Bitcoin Core developers\n+// Copyright (c) 2009-2016 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -1025,9 +1025,12 @@ class Witnessifier : public boost::static_visitor<bool>\n \n     bool operator()(const CKeyID &keyID) {\n         CPubKey pubkey;\n-        if (pwalletMain && pwalletMain->GetPubKey(keyID, pubkey)) {\n-            CScript basescript;\n-            basescript << ToByteVector(pubkey) << OP_CHECKSIG;\n+        if (pwalletMain) {\n+            CScript basescript = GetScriptForDestination(keyID);\n+            isminetype typ;\n+            typ = IsMine(*pwalletMain, basescript, SIGVERSION_WITNESS_V0);\n+            if (typ != ISMINE_SPENDABLE && typ != ISMINE_WATCH_SOLVABLE)\n+                return false;\n             CScript witscript = GetScriptForWitness(basescript);\n             pwalletMain->AddCScript(witscript);\n             result = CScriptID(witscript);\n@@ -1045,6 +1048,10 @@ class Witnessifier : public boost::static_visitor<bool>\n                 result = scriptID;\n                 return true;\n             }\n+            isminetype typ;\n+            typ = IsMine(*pwalletMain, subscript, SIGVERSION_WITNESS_V0);\n+            if (typ != ISMINE_SPENDABLE && typ != ISMINE_WATCH_SOLVABLE)\n+                return false;\n             CScript witscript = GetScriptForWitness(subscript);\n             pwalletMain->AddCScript(witscript);\n             result = CScriptID(witscript);\n@@ -1090,7 +1097,7 @@ UniValue addwitnessaddress(const UniValue& params, bool fHelp)\n     CTxDestination dest = address.Get();\n     bool ret = boost::apply_visitor(w, dest);\n     if (!ret) {\n-        throw JSONRPCError(RPC_WALLET_ERROR, \"Public key or redeemscript not known to wallet\");\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Public key or redeemscript not known to wallet, or the key is uncompressed\");\n     }\n \n     pwalletMain->SetAddressBook(w.result, \"\", \"receive\");"
      }
    ]
  }
]