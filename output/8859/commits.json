[
  {
    "sha": "ca0090aac24d2e170c9c0b1d38a675ae038df1a9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYTAwOTBhYWMyNGQyZTE3MGM5YzBiMWQzOGE2NzVhZTAzOGRmMWE5",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-10-01T16:38:43Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-11-25T16:42:10Z"
      },
      "message": "[qa] maxuploadtarget: Get rid of duplicate code",
      "tree": {
        "sha": "95fe45f90adb93a610389cdc103901a50eceafd0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/95fe45f90adb93a610389cdc103901a50eceafd0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ca0090aac24d2e170c9c0b1d38a675ae038df1a9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca0090aac24d2e170c9c0b1d38a675ae038df1a9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ca0090aac24d2e170c9c0b1d38a675ae038df1a9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca0090aac24d2e170c9c0b1d38a675ae038df1a9/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e22f409f18881b63a8e747036584a71217f40e6e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e22f409f18881b63a8e747036584a71217f40e6e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e22f409f18881b63a8e747036584a71217f40e6e"
      }
    ],
    "stats": {
      "total": 56,
      "additions": 15,
      "deletions": 41
    },
    "files": [
      {
        "sha": "9ac30f5b2d81f509f8d66643fa2588084c543769",
        "filename": "qa/rpc-tests/maxuploadtarget.py",
        "status": "modified",
        "additions": 3,
        "deletions": 36,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca0090aac24d2e170c9c0b1d38a675ae038df1a9/qa/rpc-tests/maxuploadtarget.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca0090aac24d2e170c9c0b1d38a675ae038df1a9/qa/rpc-tests/maxuploadtarget.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/maxuploadtarget.py?ref=ca0090aac24d2e170c9c0b1d38a675ae038df1a9",
        "patch": "@@ -81,49 +81,16 @@ def received_pong():\n \n class MaxUploadTest(BitcoinTestFramework):\n  \n-    def add_options(self, parser):\n-        parser.add_option(\"--testbinary\", dest=\"testbinary\",\n-                          default=os.getenv(\"BITCOIND\", \"bitcoind\"),\n-                          help=\"bitcoind binary to test\")\n-\n     def __init__(self):\n         super().__init__()\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n \n-        self.utxo = []\n-        self.txouts = gen_return_txouts()\n-\n     def setup_network(self):\n         # Start a node with maxuploadtarget of 200 MB (/24h)\n         self.nodes = []\n         self.nodes.append(start_node(0, self.options.tmpdir, [\"-debug\", \"-maxuploadtarget=800\", \"-blockmaxsize=999000\"]))\n \n-    def mine_full_block(self, node, address):\n-        # Want to create a full block\n-        # We'll generate a 66k transaction below, and 14 of them is close to the 1MB block limit\n-        for j in range(14):\n-            if len(self.utxo) < 14:\n-                self.utxo = node.listunspent()\n-            inputs=[]\n-            outputs = {}\n-            t = self.utxo.pop()\n-            inputs.append({ \"txid\" : t[\"txid\"], \"vout\" : t[\"vout\"]})\n-            remchange = t[\"amount\"] - Decimal(\"0.001000\")\n-            outputs[address]=remchange\n-            # Create a basic transaction that will send change back to ourself after account for a fee\n-            # And then insert the 128 generated transaction outs in the middle rawtx[92] is where the #\n-            # of txouts is stored and is the only thing we overwrite from the original transaction\n-            rawtx = node.createrawtransaction(inputs, outputs)\n-            newtx = rawtx[0:92]\n-            newtx = newtx + self.txouts\n-            newtx = newtx + rawtx[94:]\n-            # Appears to be ever so slightly faster to sign with SIGHASH_NONE\n-            signresult = node.signrawtransaction(newtx,None,None,\"NONE\")\n-            txid = node.sendrawtransaction(signresult[\"hex\"], True)\n-        # Mine a full sized block which will be these transactions we just created\n-        node.generate(1)\n-\n     def run_test(self):\n         # Before we connect anything, we first set the time on the node\n         # to be in the past, otherwise things break because the CNode\n@@ -151,7 +118,7 @@ def run_test(self):\n         # Test logic begins here\n \n         # Now mine a big block\n-        self.mine_full_block(self.nodes[0], self.nodes[0].getnewaddress())\n+        mine_large_block(self.nodes[0])\n \n         # Store the hash; we'll request this later\n         big_old_block = self.nodes[0].getbestblockhash()\n@@ -162,11 +129,11 @@ def run_test(self):\n         self.nodes[0].setmocktime(int(time.time()) - 2*60*60*24)\n \n         # Mine one more block, so that the prior block looks old\n-        self.mine_full_block(self.nodes[0], self.nodes[0].getnewaddress())\n+        mine_large_block(self.nodes[0])\n \n         # We'll be requesting this new block too\n         big_new_block = self.nodes[0].getbestblockhash()\n-        new_block_size = self.nodes[0].getblock(big_new_block)['size']\n+        # print(self.nodes[0].getblock(big_new_block)['size'])\n         big_new_block = int(big_new_block, 16)\n \n         # test_nodes[0] will test what happens if we just keep requesting the"
      },
      {
        "sha": "b8ad1e7d8086aa635deda22d1df30bb9af02ca0d",
        "filename": "qa/rpc-tests/test_framework/util.py",
        "status": "modified",
        "additions": 12,
        "deletions": 5,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca0090aac24d2e170c9c0b1d38a675ae038df1a9/qa/rpc-tests/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca0090aac24d2e170c9c0b1d38a675ae038df1a9/qa/rpc-tests/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/util.py?ref=ca0090aac24d2e170c9c0b1d38a675ae038df1a9",
        "patch": "@@ -657,13 +657,12 @@ def create_tx(node, coinbase, to_address, amount):\n def create_lots_of_big_transactions(node, txouts, utxos, fee):\n     addr = node.getnewaddress()\n     txids = []\n-    for i in range(len(utxos)):\n+    for _ in range(len(utxos)):\n         t = utxos.pop()\n-        inputs = []\n-        inputs.append({ \"txid\" : t[\"txid\"], \"vout\" : t[\"vout\"]})\n+        inputs=[{ \"txid\" : t[\"txid\"], \"vout\" : t[\"vout\"]}]\n         outputs = {}\n-        send_value = t['amount'] - fee\n-        outputs[addr] = satoshi_round(send_value)\n+        change = t['amount'] - fee\n+        outputs[addr] = satoshi_round(change)\n         rawtx = node.createrawtransaction(inputs, outputs)\n         newtx = rawtx[0:92]\n         newtx = newtx + txouts\n@@ -673,6 +672,14 @@ def create_lots_of_big_transactions(node, txouts, utxos, fee):\n         txids.append(txid)\n     return txids\n \n+def mine_large_block(node):\n+    # generate a 66k transaction,\n+    # and 14 of them is close to the 1MB block limit\n+    txouts = gen_return_txouts()\n+    utxos = node.listunspent()[:14]\n+    create_lots_of_big_transactions(node, txouts, utxos, fee=Decimal(\"0.001\"))\n+    node.generate(1)\n+\n def get_bip9_status(node, key):\n     info = node.getblockchaininfo()\n     return info['bip9_softforks'][key]"
      }
    ]
  },
  {
    "sha": "994349db553711af844e74650922193e5fa655e0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5OTQzNDlkYjU1MzcxMWFmODQ0ZTc0NjUwOTIyMTkzZTVmYTY1NWUw",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-10-01T15:19:24Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-11-25T17:06:43Z"
      },
      "message": "[qa] Add script to check for datadir compatibility between versions",
      "tree": {
        "sha": "f144ebae177a8f3500cc3b8053500b6c11042fe7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f144ebae177a8f3500cc3b8053500b6c11042fe7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/994349db553711af844e74650922193e5fa655e0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/994349db553711af844e74650922193e5fa655e0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/994349db553711af844e74650922193e5fa655e0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/994349db553711af844e74650922193e5fa655e0/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ca0090aac24d2e170c9c0b1d38a675ae038df1a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca0090aac24d2e170c9c0b1d38a675ae038df1a9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ca0090aac24d2e170c9c0b1d38a675ae038df1a9"
      }
    ],
    "stats": {
      "total": 119,
      "additions": 118,
      "deletions": 1
    },
    "files": [
      {
        "sha": "20e333a03d89301a736803522715dadefe7b234a",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/994349db553711af844e74650922193e5fa655e0/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/994349db553711af844e74650922193e5fa655e0/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=994349db553711af844e74650922193e5fa655e0",
        "patch": "@@ -174,6 +174,10 @@\n     'pruning.py', # leave pruning last as it takes a REALLY long time\n ]\n \n+testScriptsManual = [\n+    'compatibility.py',\n+]\n+\n \n def runtests():\n     test_list = []\n@@ -182,7 +186,7 @@ def runtests():\n     elif len(opts) == 0 or (len(opts) == 1 and \"-win\" in opts):\n         test_list = testScripts\n     else:\n-        for t in testScripts + testScriptsExt:\n+        for t in testScripts + testScriptsExt + testScriptsManual:\n             if t in opts or re.sub(\".py$\", \"\", t) in opts:\n                 test_list.append(t)\n "
      },
      {
        "sha": "b086b2f37bbc7c6af048e949903cae6dffb0fe9c",
        "filename": "qa/rpc-tests/compatibility.py",
        "status": "added",
        "additions": 112,
        "deletions": 0,
        "changes": 112,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/994349db553711af844e74650922193e5fa655e0/qa/rpc-tests/compatibility.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/994349db553711af844e74650922193e5fa655e0/qa/rpc-tests/compatibility.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/compatibility.py?ref=994349db553711af844e74650922193e5fa655e0",
        "patch": "@@ -0,0 +1,112 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    start_nodes,\n+    stop_nodes,\n+    wait_bitcoinds,\n+    connect_nodes_bi,\n+    mine_large_block,\n+    sync_chain,\n+    sync_mempools,\n+    assert_equal,\n+)\n+\n+'''\n+Script to check if our datadir can be read by older versions and vice versa\n+'''\n+\n+class CompatibilityTest(BitcoinTestFramework):\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 2\n+        self.extra_args = [['-usehd=0']] * self.num_nodes\n+\n+    def add_options(self, parser):\n+        parser.add_option(\"--oldbinary\", dest=\"oldbinary\",\n+                          default=None,\n+                          help=\"old bitcoind binary for compatibility testing\")\n+\n+    def setup_network(self):\n+        assert(self.options.oldbinary is not None)\n+        self.binary = [None, self.options.oldbinary]\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, self.extra_args, binary=self.binary)\n+        connect_nodes_bi(self.nodes, 0, 1)\n+\n+    def send(self, seed):\n+        sender = seed % 2\n+        self.nodes[sender].sendtoaddress(self.nodes[not sender].getnewaddress(), 0.125)\n+\n+    def run_test(self):\n+        # Create some blocks and transactions:\n+        self.nodes[1].generate(14)\n+        sync_chain(self.nodes)\n+        self.nodes[0].generate(14)\n+        self.nodes[0].generate(100)\n+        [mine_large_block(self.nodes[0]) for _ in range(3)]\n+        sync_chain(self.nodes)\n+        [mine_large_block(self.nodes[1]) for _ in range(3)]\n+        sync_chain(self.nodes)\n+\n+        [self.send(seed) for seed in range(10)]\n+        self.nodes[0].generate(1)\n+        sync_chain(self.nodes)\n+        self.nodes[1].generate(1)\n+        sync_chain(self.nodes)\n+        assert_equal([0, 0], [n.getmempoolinfo()[\"size\"] for n in self.nodes])\n+\n+        INFO_CALLS = [\n+            \"getblockchaininfo\",\n+            \"gettxoutsetinfo\",\n+            \"getmininginfo\",\n+            \"getwalletinfo\",\n+            \"getinfo\",\n+        ]\n+        info_dict = {}\n+        for info in INFO_CALLS:\n+            info_dict[info] = [getattr(n, info)() for n in self.nodes]\n+\n+        # Swap binaries\n+        stop_nodes(self.nodes)\n+        self.binary.reverse()\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, self.extra_args, binary=self.binary)\n+        connect_nodes_bi(self.nodes, 0, 1)\n+        for info in INFO_CALLS:\n+            print(\"Check {}\".format(info))\n+            # old info should match new info, even though the binary changed\n+            assert_equal_ignore_some(info_dict[info][0], getattr(self.nodes[0], info)())\n+            assert_equal_ignore_some(info_dict[info][1], getattr(self.nodes[1], info)())\n+\n+\n+def assert_equal_ignore_some(dict1, dict2):\n+    # ignore entries which are unstable across restarts or\n+    # not supported by both versions\n+    IGNORE = [\n+        'currentblockweight',\n+        'currentblocksize',\n+        'currentblocktx',\n+        'bip9_softforks', # Older nodes may not be aware of all softforks\n+        'softforks',\n+        'hash_serialized', # This may have changed due to 7848?\n+        'keypoolsize', # ?\n+        'errors', # releases don't display the pre-release-warning\n+        #'warnings',\n+        'genproclimit', # Removed in 7507\n+        'generate',\n+        'testnet', # Removed in 8921\n+        'subversion',\n+        'version',\n+        'protocolversion',\n+    ]\n+    for d in [dict1, dict2]:\n+        for ig in IGNORE:\n+            d[ig] = True\n+    assert_equal(dict1, dict2)\n+\n+if __name__ == '__main__':\n+    CompatibilityTest().main()"
      },
      {
        "sha": "6389fcc73838bd92aae944482e34f1e520c2d100",
        "filename": "qa/rpc-tests/test_framework/test_framework.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/994349db553711af844e74650922193e5fa655e0/qa/rpc-tests/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/994349db553711af844e74650922193e5fa655e0/qa/rpc-tests/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/test_framework.py?ref=994349db553711af844e74650922193e5fa655e0",
        "patch": "@@ -35,6 +35,7 @@ def __init__(self):\n         self.num_nodes = 4\n         self.setup_clean_chain = False\n         self.nodes = None\n+        self.binary = None\n \n     def run_test(self):\n         raise NotImplementedError"
      }
    ]
  }
]