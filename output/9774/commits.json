[
  {
    "sha": "f36bdf02ceabfa0f9a4ed6b8fdbf6a3e3960b22c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMzZiZGYwMmNlYWJmYTBmOWE0ZWQ2YjhmZGJmNmEzZTM5NjBiMjJj",
    "commit": {
      "author": {
        "name": "Johnathan Corgan",
        "email": "johnathan@corganlabs.com",
        "date": "2017-02-16T01:08:36Z"
      },
      "committer": {
        "name": "Johnathan Corgan",
        "email": "johnathan@corganlabs.com",
        "date": "2017-02-20T06:06:27Z"
      },
      "message": "Enable host lookups for -proxy and -onion parameters\n\n* Extends -dns parameter (via fNameLookup) to control these two new\n  parameters in addition to -addnode, -connect, and -seednode\n\n* Moves fNameLookup assignment earlier as needed\n\n* Changes -proxy and -onion to use Lookup() instead of LookupNumeric()",
      "tree": {
        "sha": "cc4102ad79f926811217cadbf1b3fcd29231b750",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cc4102ad79f926811217cadbf1b3fcd29231b750"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f36bdf02ceabfa0f9a4ed6b8fdbf6a3e3960b22c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f36bdf02ceabfa0f9a4ed6b8fdbf6a3e3960b22c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f36bdf02ceabfa0f9a4ed6b8fdbf6a3e3960b22c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f36bdf02ceabfa0f9a4ed6b8fdbf6a3e3960b22c/comments",
    "author": {
      "login": "jmcorgan",
      "id": 1492956,
      "node_id": "MDQ6VXNlcjE0OTI5NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1492956?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jmcorgan",
      "html_url": "https://github.com/jmcorgan",
      "followers_url": "https://api.github.com/users/jmcorgan/followers",
      "following_url": "https://api.github.com/users/jmcorgan/following{/other_user}",
      "gists_url": "https://api.github.com/users/jmcorgan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jmcorgan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jmcorgan/subscriptions",
      "organizations_url": "https://api.github.com/users/jmcorgan/orgs",
      "repos_url": "https://api.github.com/users/jmcorgan/repos",
      "events_url": "https://api.github.com/users/jmcorgan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jmcorgan/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jmcorgan",
      "id": 1492956,
      "node_id": "MDQ6VXNlcjE0OTI5NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1492956?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jmcorgan",
      "html_url": "https://github.com/jmcorgan",
      "followers_url": "https://api.github.com/users/jmcorgan/followers",
      "following_url": "https://api.github.com/users/jmcorgan/following{/other_user}",
      "gists_url": "https://api.github.com/users/jmcorgan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jmcorgan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jmcorgan/subscriptions",
      "organizations_url": "https://api.github.com/users/jmcorgan/orgs",
      "repos_url": "https://api.github.com/users/jmcorgan/repos",
      "events_url": "https://api.github.com/users/jmcorgan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jmcorgan/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "390a39bb5cf4eca849a75802f92a361a9bcac310",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/390a39bb5cf4eca849a75802f92a361a9bcac310",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/390a39bb5cf4eca849a75802f92a361a9bcac310"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 16,
      "deletions": 7
    },
    "files": [
      {
        "sha": "fb38beca78869fa28a4325b79323a9d65386bfbf",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 7,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f36bdf02ceabfa0f9a4ed6b8fdbf6a3e3960b22c/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f36bdf02ceabfa0f9a4ed6b8fdbf6a3e3960b22c/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=f36bdf02ceabfa0f9a4ed6b8fdbf6a3e3960b22c",
        "patch": "@@ -1248,16 +1248,23 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n         }\n     }\n \n+    // Check for host lookup allowed before parsing any network related parameters\n+    fNameLookup = GetBoolArg(\"-dns\", DEFAULT_NAME_LOOKUP);\n+\n     bool proxyRandomize = GetBoolArg(\"-proxyrandomize\", DEFAULT_PROXYRANDOMIZE);\n     // -proxy sets a proxy for all outgoing network traffic\n     // -noproxy (or -proxy=0) as well as the empty string can be used to not set a proxy, this is the default\n     std::string proxyArg = GetArg(\"-proxy\", \"\");\n     SetLimited(NET_TOR);\n     if (proxyArg != \"\" && proxyArg != \"0\") {\n-        CService resolved(LookupNumeric(proxyArg.c_str(), 9050));\n-        proxyType addrProxy = proxyType(resolved, proxyRandomize);\n+        CService proxyAddr;\n+        if (!Lookup(proxyArg.c_str(), proxyAddr, 9050, fNameLookup)) {\n+            return InitError(strprintf(_(\"Invalid -proxy address or hostname: '%s'\"), proxyArg));\n+        }\n+\n+        proxyType addrProxy = proxyType(proxyAddr, proxyRandomize);\n         if (!addrProxy.IsValid())\n-            return InitError(strprintf(_(\"Invalid -proxy address: '%s'\"), proxyArg));\n+            return InitError(strprintf(_(\"Invalid -proxy address or hostname: '%s'\"), proxyArg));\n \n         SetProxy(NET_IPV4, addrProxy);\n         SetProxy(NET_IPV6, addrProxy);\n@@ -1274,10 +1281,13 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n         if (onionArg == \"0\") { // Handle -noonion/-onion=0\n             SetLimited(NET_TOR); // set onions as unreachable\n         } else {\n-            CService resolved(LookupNumeric(onionArg.c_str(), 9050));\n-            proxyType addrOnion = proxyType(resolved, proxyRandomize);\n+            CService onionProxy;\n+            if (!Lookup(onionArg.c_str(), onionProxy, 9050, fNameLookup)) {\n+                return InitError(strprintf(_(\"Invalid -onion address or hostname: '%s'\"), onionArg));\n+            }\n+            proxyType addrOnion = proxyType(onionProxy, proxyRandomize);\n             if (!addrOnion.IsValid())\n-                return InitError(strprintf(_(\"Invalid -onion address: '%s'\"), onionArg));\n+                return InitError(strprintf(_(\"Invalid -onion address or hostname: '%s'\"), onionArg));\n             SetProxy(NET_TOR, addrOnion);\n             SetLimited(NET_TOR, false);\n         }\n@@ -1286,7 +1296,6 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     // see Step 2: parameter interactions for more information about these\n     fListen = GetBoolArg(\"-listen\", DEFAULT_LISTEN);\n     fDiscover = GetBoolArg(\"-discover\", true);\n-    fNameLookup = GetBoolArg(\"-dns\", DEFAULT_NAME_LOOKUP);\n     fRelayTxes = !GetBoolArg(\"-blocksonly\", DEFAULT_BLOCKSONLY);\n \n     if (fListen) {"
      }
    ]
  }
]