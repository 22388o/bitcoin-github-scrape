[
  {
    "sha": "21180ff73436e198b6828c312ddfd0a1195447b2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMTE4MGZmNzM0MzZlMTk4YjY4MjhjMzEyZGRmZDBhMTE5NTQ0N2Iy",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-06-13T19:17:30Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-06-26T23:16:26Z"
      },
      "message": "Simplify return values of GetCoin/HaveCoin(InCache)\n\nThis removes the possibility for GetCoin/HaveCoin/HaveCoinInCache to return\ntrue while the respective coin is spent. By doing it across all calls, some\nextra checks can be eliminated.\n\ncoins_tests is modified to call HaveCoin sometimes before and sometimes\nafter AccessCoin. A further change is needed because the semantics for\nGetCoin slightly changed, causing a pruned entry in the parent cache to not\nbe pulled into the child in FetchCoin.",
      "tree": {
        "sha": "32541dfda7113742cc54340eda7e859ab62869ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/32541dfda7113742cc54340eda7e859ab62869ce"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/21180ff73436e198b6828c312ddfd0a1195447b2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/21180ff73436e198b6828c312ddfd0a1195447b2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/21180ff73436e198b6828c312ddfd0a1195447b2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/21180ff73436e198b6828c312ddfd0a1195447b2/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "234ffc677ee58591b139695bf92bbd6f504ee91a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/234ffc677ee58591b139695bf92bbd6f504ee91a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/234ffc677ee58591b139695bf92bbd6f504ee91a"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 28,
      "deletions": 19
    },
    "files": [
      {
        "sha": "3113b7755dcc12adaeb6b6ea77f04e72dffc2acb",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21180ff73436e198b6828c312ddfd0a1195447b2/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21180ff73436e198b6828c312ddfd0a1195447b2/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=21180ff73436e198b6828c312ddfd0a1195447b2",
        "patch": "@@ -11,11 +11,15 @@\n #include <assert.h>\n \n bool CCoinsView::GetCoin(const COutPoint &outpoint, Coin &coin) const { return false; }\n-bool CCoinsView::HaveCoin(const COutPoint &outpoint) const { return false; }\n uint256 CCoinsView::GetBestBlock() const { return uint256(); }\n bool CCoinsView::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) { return false; }\n CCoinsViewCursor *CCoinsView::Cursor() const { return 0; }\n \n+bool CCoinsView::HaveCoin(const COutPoint &outpoint) const\n+{\n+    Coin coin;\n+    return GetCoin(outpoint, coin);\n+}\n \n CCoinsViewBacked::CCoinsViewBacked(CCoinsView *viewIn) : base(viewIn) { }\n bool CCoinsViewBacked::GetCoin(const COutPoint &outpoint, Coin &coin) const { return base->GetCoin(outpoint, coin); }\n@@ -55,7 +59,7 @@ bool CCoinsViewCache::GetCoin(const COutPoint &outpoint, Coin &coin) const {\n     CCoinsMap::const_iterator it = FetchCoin(outpoint);\n     if (it != cacheCoins.end()) {\n         coin = it->second.coin;\n-        return true;\n+        return !coin.IsSpent();\n     }\n     return false;\n }"
      },
      {
        "sha": "077545a55bd61d78027ffacdc03467d885b0e765",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21180ff73436e198b6828c312ddfd0a1195447b2/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21180ff73436e198b6828c312ddfd0a1195447b2/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=21180ff73436e198b6828c312ddfd0a1195447b2",
        "patch": "@@ -145,11 +145,13 @@ class CCoinsViewCursor\n class CCoinsView\n {\n public:\n-    //! Retrieve the Coin (unspent transaction output) for a given outpoint.\n+    /** Retrieve the Coin (unspent transaction output) for a given outpoint.\n+     *  Returns true only when an unspent coin was found, which is returned in coin.\n+     *  When false is returned, coin's value is unspecified.\n+     */\n     virtual bool GetCoin(const COutPoint &outpoint, Coin &coin) const;\n \n-    //! Just check whether we have data for a given outpoint.\n-    //! This may (but cannot always) return true for spent outputs.\n+    //! Just check whether a given outpoint is unspent.\n     virtual bool HaveCoin(const COutPoint &outpoint) const;\n \n     //! Retrieve the block hash whose state this CCoinsView currently represents"
      },
      {
        "sha": "e24431528a2a1e86f09b24333f83d32c8c454532",
        "filename": "src/test/coins_tests.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 7,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21180ff73436e198b6828c312ddfd0a1195447b2/src/test/coins_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21180ff73436e198b6828c312ddfd0a1195447b2/src/test/coins_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coins_tests.cpp?ref=21180ff73436e198b6828c312ddfd0a1195447b2",
        "patch": "@@ -50,12 +50,6 @@ class CCoinsViewTest : public CCoinsView\n         return true;\n     }\n \n-    bool HaveCoin(const COutPoint& outpoint) const override\n-    {\n-        Coin coin;\n-        return GetCoin(outpoint, coin);\n-    }\n-\n     uint256 GetBestBlock() const override { return hashBestBlock_; }\n \n     bool BatchWrite(CCoinsMap& mapCoins, const uint256& hashBlock) override\n@@ -147,8 +141,22 @@ BOOST_AUTO_TEST_CASE(coins_cache_simulation_test)\n         {\n             uint256 txid = txids[InsecureRandRange(txids.size())]; // txid we're going to modify in this iteration.\n             Coin& coin = result[COutPoint(txid, 0)];\n+\n+            // Determine whether to test HaveCoin before or after Access* (or both). As these functions\n+            // can influence each other's behaviour by pulling things into the cache, all combinations\n+            // are tested.\n+            bool test_havecoin_before = InsecureRandBits(2) == 0;\n+            bool test_havecoin_after = InsecureRandBits(2) == 0;\n+\n+            bool result_havecoin = test_havecoin_before ? stack.back()->HaveCoin(COutPoint(txid, 0)) : false;\n             const Coin& entry = (InsecureRandRange(500) == 0) ? AccessByTxid(*stack.back(), txid) : stack.back()->AccessCoin(COutPoint(txid, 0));\n             BOOST_CHECK(coin == entry);\n+            BOOST_CHECK(!test_havecoin_before || result_havecoin == !entry.IsSpent());\n+\n+            if (test_havecoin_after) {\n+                bool ret = stack.back()->HaveCoin(COutPoint(txid, 0));\n+                BOOST_CHECK(ret == !entry.IsSpent());\n+            }\n \n             if (InsecureRandRange(5) == 0 || coin.IsSpent()) {\n                 Coin newcoin;\n@@ -628,7 +636,7 @@ BOOST_AUTO_TEST_CASE(ccoins_access)\n     CheckAccessCoin(ABSENT, VALUE2, VALUE2, FRESH      , FRESH      );\n     CheckAccessCoin(ABSENT, VALUE2, VALUE2, DIRTY      , DIRTY      );\n     CheckAccessCoin(ABSENT, VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH);\n-    CheckAccessCoin(PRUNED, ABSENT, PRUNED, NO_ENTRY   , FRESH      );\n+    CheckAccessCoin(PRUNED, ABSENT, ABSENT, NO_ENTRY   , NO_ENTRY   );\n     CheckAccessCoin(PRUNED, PRUNED, PRUNED, 0          , 0          );\n     CheckAccessCoin(PRUNED, PRUNED, PRUNED, FRESH      , FRESH      );\n     CheckAccessCoin(PRUNED, PRUNED, PRUNED, DIRTY      , DIRTY      );"
      },
      {
        "sha": "dcfc5ffde0b56aea71fa63945e8473fa316d835b",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21180ff73436e198b6828c312ddfd0a1195447b2/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21180ff73436e198b6828c312ddfd0a1195447b2/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=21180ff73436e198b6828c312ddfd0a1195447b2",
        "patch": "@@ -903,11 +903,7 @@ bool CCoinsViewMemPool::GetCoin(const COutPoint &outpoint, Coin &coin) const {\n             return false;\n         }\n     }\n-    return (base->GetCoin(outpoint, coin) && !coin.IsSpent());\n-}\n-\n-bool CCoinsViewMemPool::HaveCoin(const COutPoint &outpoint) const {\n-    return mempool.exists(outpoint) || base->HaveCoin(outpoint);\n+    return base->GetCoin(outpoint, coin);\n }\n \n size_t CTxMemPool::DynamicMemoryUsage() const {"
      },
      {
        "sha": "78ac3c209bc7d3cd449d60dd15fc704470bb0f0a",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21180ff73436e198b6828c312ddfd0a1195447b2/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21180ff73436e198b6828c312ddfd0a1195447b2/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=21180ff73436e198b6828c312ddfd0a1195447b2",
        "patch": "@@ -684,8 +684,7 @@ class CCoinsViewMemPool : public CCoinsViewBacked\n \n public:\n     CCoinsViewMemPool(CCoinsView* baseIn, const CTxMemPool& mempoolIn);\n-    bool GetCoin(const COutPoint &outpoint, Coin &coin) const;\n-    bool HaveCoin(const COutPoint &outpoint) const;\n+    bool GetCoin(const COutPoint &outpoint, Coin &coin) const override;\n };\n \n /**"
      }
    ]
  }
]