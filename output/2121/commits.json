[
  {
    "sha": "007a28374165f67d713a318bc37ef1286684cad5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMDdhMjgzNzQxNjVmNjdkNzEzYTMxOGJjMzdlZjEyODY2ODRjYWQ1",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "Rey@el-reys-mac-pro.local",
        "date": "2012-12-19T04:28:22Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-04-08T19:14:34Z"
      },
      "message": "Separating Transaction Signing From Transaction Processing\n==========================================================\n\nA major issue many have faced in using bitcoind to build applications is the lack of RPC support for tracking transactions and balances without having to know and keep associated private keys in the wallet. Oftentimes I want to watch other people's transactions or to keep my signing nodes behind tighter security while using separate relay nodes to service all nonsigning, non-key-generating application functionality such as sending payment and confirmation alerts.\n\nIn order to achieve these objectives, I have had to build a bunch of custom software - much of which duplicates functionality that is already present in the Satoshi Client. This fork is an attempt at addressing some of these concerns without having to fundamentally restructure the client architecture. (Thanks, sipa!)\n\nThe proposal is to add another kind of object to the wallet database - a bitcoin address sans private key - which the client treats as if it were any other wallet adddress except for when it comes to signing and privkey export operations. This means RPC calls such as getreceivedbyaddress and listtransactions can be used on arbitrary bitcoin addresses.\n\nI've added an RPC call:\n\n\timportaddress <bitcoinaddress> [label] [rescan=true]\n\nThe address is added as a new type of serialized object in wallet.dat and loads into the key maps of the CKeyStore instances with the key set to the CKeyID and the secret set to an empty vector.\n\nPlease test it out and let me know what you think.\n\nCheers,\n\n-Eric Lombrozo",
      "tree": {
        "sha": "025b2d57d67a544dad8154b8cd85a63f1e17d189",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/025b2d57d67a544dad8154b8cd85a63f1e17d189"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/007a28374165f67d713a318bc37ef1286684cad5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/007a28374165f67d713a318bc37ef1286684cad5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/007a28374165f67d713a318bc37ef1286684cad5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/007a28374165f67d713a318bc37ef1286684cad5/comments",
    "author": null,
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fb17911e9a29399ff46cf3c539a48027924e1afc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb17911e9a29399ff46cf3c539a48027924e1afc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fb17911e9a29399ff46cf3c539a48027924e1afc"
      }
    ],
    "stats": {
      "total": 104,
      "additions": 104,
      "deletions": 0
    },
    "files": [
      {
        "sha": "033415ac6458efbf1ca935ec18923316c2a19772",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/007a28374165f67d713a318bc37ef1286684cad5/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/007a28374165f67d713a318bc37ef1286684cad5/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=007a28374165f67d713a318bc37ef1286684cad5",
        "patch": "@@ -247,6 +247,7 @@ static const CRPCCommand vRPCCommands[] =\n     { \"listsinceblock\",         &listsinceblock,         false,     false },\n     { \"dumpprivkey\",            &dumpprivkey,            true,      false },\n     { \"importprivkey\",          &importprivkey,          false,     false },\n+    { \"importaddress\",          &importaddress,          false,     false },\n     { \"listunspent\",            &listunspent,            false,     false },\n     { \"getrawtransaction\",      &getrawtransaction,      false,     false },\n     { \"createrawtransaction\",   &createrawtransaction,   false,     false },\n@@ -1170,6 +1171,7 @@ Array RPCConvertValues(const std::string &strMethod, const std::vector<std::stri\n     if (strMethod == \"lockunspent\"            && n > 0) ConvertTo<bool>(params[0]);\n     if (strMethod == \"lockunspent\"            && n > 1) ConvertTo<Array>(params[1]);\n     if (strMethod == \"importprivkey\"          && n > 2) ConvertTo<bool>(params[2]);\n+    if (strMethod == \"importaddress\"          && n > 2) ConvertTo<bool>(params[2]);\n \n     return params;\n }"
      },
      {
        "sha": "572604469d48efc79c0707d0b9390b0232045351",
        "filename": "src/bitcoinrpc.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/007a28374165f67d713a318bc37ef1286684cad5/src/bitcoinrpc.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/007a28374165f67d713a318bc37ef1286684cad5/src/bitcoinrpc.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.h?ref=007a28374165f67d713a318bc37ef1286684cad5",
        "patch": "@@ -137,6 +137,7 @@ extern json_spirit::Value addnode(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value getaddednodeinfo(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value dumpprivkey(const json_spirit::Array& params, bool fHelp); // in rpcdump.cpp\n extern json_spirit::Value importprivkey(const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value importaddress(const json_spirit::Array& params, bool fHelp);\n \n extern json_spirit::Value getgenerate(const json_spirit::Array& params, bool fHelp); // in rpcmining.cpp\n extern json_spirit::Value setgenerate(const json_spirit::Array& params, bool fHelp);"
      },
      {
        "sha": "4f4d712a90aab5fc7e9e5b3489b3eb8cded0ed2e",
        "filename": "src/keystore.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 0,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/007a28374165f67d713a318bc37ef1286684cad5/src/keystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/007a28374165f67d713a318bc37ef1286684cad5/src/keystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.cpp?ref=007a28374165f67d713a318bc37ef1286684cad5",
        "patch": "@@ -26,6 +26,16 @@ bool CBasicKeyStore::AddKey(const CKey& key)\n     return true;\n }\n \n+bool CBasicKeyStore::AddKey(const CKeyID& address)\n+{\n+    // The key is watch-only. We don't have the secret.\n+    {\n+        LOCK(cs_KeyStore);\n+        mapKeys[address] = make_pair(CSecret(), false);\n+    }\n+    return true;\n+}\n+\n bool CBasicKeyStore::AddCScript(const CScript& redeemScript)\n {\n     {\n@@ -139,6 +149,24 @@ bool CCryptoKeyStore::AddKey(const CKey& key)\n     return true;\n }\n \n+bool CCryptoKeyStore::AddKey(const CKeyID& address)\n+{\n+    // The key is watch-only. We don't have the secret.\n+    {\n+        LOCK(cs_KeyStore);\n+        if (!IsCrypted())\n+            return CBasicKeyStore::AddKey(address);\n+\t\t\t\n+        if (IsLocked())\n+            return false;\n+\t\t\t\t\n+        if (!SetCrypted())\n+            return false;\n+\t\t\t\n+        mapCryptedKeys[address] = make_pair(CPubKey(), std::vector<unsigned char>());\n+    }\n+    return true;\n+}\n \n bool CCryptoKeyStore::AddCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret)\n {"
      },
      {
        "sha": "d5c145906055c958e3fd93a2a2c95466aa350344",
        "filename": "src/keystore.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/007a28374165f67d713a318bc37ef1286684cad5/src/keystore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/007a28374165f67d713a318bc37ef1286684cad5/src/keystore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.h?ref=007a28374165f67d713a318bc37ef1286684cad5",
        "patch": "@@ -56,6 +56,7 @@ class CBasicKeyStore : public CKeyStore\n \n public:\n     bool AddKey(const CKey& key);\n+    bool AddKey(const CKeyID& address);\n     bool HaveKey(const CKeyID &address) const\n     {\n         bool result;\n@@ -147,6 +148,7 @@ class CCryptoKeyStore : public CBasicKeyStore\n \n     virtual bool AddCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n     bool AddKey(const CKey& key);\n+    bool AddKey(const CKeyID& address);\n     bool HaveKey(const CKeyID &address) const\n     {\n         {"
      },
      {
        "sha": "d075e571e8894b6a42c7dfa3ce90c14417465264",
        "filename": "src/rpcdump.cpp",
        "status": "modified",
        "additions": 40,
        "deletions": 0,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/007a28374165f67d713a318bc37ef1286684cad5/src/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/007a28374165f67d713a318bc37ef1286684cad5/src/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcdump.cpp?ref=007a28374165f67d713a318bc37ef1286684cad5",
        "patch": "@@ -77,6 +77,46 @@ Value importprivkey(const Array& params, bool fHelp)\n     return Value::null;\n }\n \n+Value importaddress(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() < 1 || params.size() > 3)\n+        throw runtime_error(\n+            \"importaddress <bitcoinaddress> [label] [rescan=true]\\n\"\n+            \"Adds an address that can be watched as if it were in your wallet but cannot be used to spend.\");\n+\n+    CKeyID vchAddress;\n+    CBitcoinAddress address(params[0].get_str());\n+    if (!address.GetKeyID(vchAddress)) throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n+\t\n+    string strLabel = \"\";\n+    if (params.size() > 1)\n+        strLabel = params[1].get_str();\n+\t\n+    // Whether to perform rescan after import\n+    bool fRescan = true;\n+    if (params.size() > 2)\n+        fRescan = params[2].get_bool();\n+\t\n+    {\n+        LOCK2(cs_main, pwalletMain->cs_wallet);\n+\t\t\t\n+        pwalletMain->MarkDirty();\n+        pwalletMain->SetAddressBookName(vchAddress, strLabel);\n+\t\t\t\n+        if (!pwalletMain->AddAddress(vchAddress))\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n+\t\t\t\n+        if (fRescan)\n+        {\n+            pwalletMain->ScanForWalletTransactions(pindexGenesisBlock, true);\n+            pwalletMain->ReacceptWalletTransactions();\n+        }\n+    }\n+\t\n+    return Value::null;\n+}\n+\n+\n Value dumpprivkey(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 1)"
      },
      {
        "sha": "6927d11f905ee8e13a01944dd05864cac5fd3115",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/007a28374165f67d713a318bc37ef1286684cad5/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/007a28374165f67d713a318bc37ef1286684cad5/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=007a28374165f67d713a318bc37ef1286684cad5",
        "patch": "@@ -55,6 +55,17 @@ bool CWallet::AddKey(const CKey& key)\n     return true;\n }\n \n+bool CWallet::AddAddress(const CKeyID& address)\n+{\n+    if (!CCryptoKeyStore::AddKey(address))\n+        return false;\n+    if (!fFileBacked)\n+        return true;\n+    if (!IsCrypted())\n+        return CWalletDB(strWalletFile).WriteAddress(address);\n+    return true;\n+}\n+\n bool CWallet::AddCryptedKey(const CPubKey &vchPubKey, const vector<unsigned char> &vchCryptedSecret)\n {\n     if (!CCryptoKeyStore::AddCryptedKey(vchPubKey, vchCryptedSecret))"
      },
      {
        "sha": "1705d50c0b650772b01cad8a5a813e420129f180",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/007a28374165f67d713a318bc37ef1286684cad5/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/007a28374165f67d713a318bc37ef1286684cad5/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=007a28374165f67d713a318bc37ef1286684cad5",
        "patch": "@@ -137,8 +137,12 @@ class CWallet : public CCryptoKeyStore\n     CPubKey GenerateNewKey();\n     // Adds a key to the store, and saves it to disk.\n     bool AddKey(const CKey& key);\n+    // Adds a watching address to the store, saves it to disk.\n+    bool AddAddress(const CKeyID& address);\n     // Adds a key to the store, without saving it to disk (used by LoadWallet)\n     bool LoadKey(const CKey& key) { return CCryptoKeyStore::AddKey(key); }\n+    // Adds a watching address to the store, without saving it to disk (used by LoadWallet)\n+    bool LoadAddress(const CKeyID& address) { return CCryptoKeyStore::AddKey(address); }\n \n     bool LoadMinVersion(int nVersion) { nWalletVersion = nVersion; nWalletMaxVersion = std::max(nWalletMaxVersion, nVersion); return true; }\n "
      },
      {
        "sha": "5f2e9b5510ec9e4adbe573e92737328049a17a9b",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/007a28374165f67d713a318bc37ef1286684cad5/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/007a28374165f67d713a318bc37ef1286684cad5/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=007a28374165f67d713a318bc37ef1286684cad5",
        "patch": "@@ -369,6 +369,16 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n                 return false;\n             }\n         }\n+        else if (strType == \"address\")\n+        {\n+            CKeyID address;\n+            ssKey >> address;\n+            if (!pwallet->LoadAddress(address))\n+            {\n+                strErr = \"Error reading wallet database: LoadKey failed on address\";\n+                return false;\n+            }\n+        }\n         else if (strType == \"orderposnext\")\n         {\n             ssValue >> pwallet->nOrderPosNext;"
      },
      {
        "sha": "8de30f2710025c1feb649aebd93abbda7ee40bd1",
        "filename": "src/walletdb.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/007a28374165f67d713a318bc37ef1286684cad5/src/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/007a28374165f67d713a318bc37ef1286684cad5/src/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.h?ref=007a28374165f67d713a318bc37ef1286684cad5",
        "patch": "@@ -56,6 +56,12 @@ class CWalletDB : public CDB\n         return Write(std::make_pair(std::string(\"key\"), vchPubKey.Raw()), vchPrivKey, false);\n     }\n \n+    bool WriteAddress(const CKeyID& address)\n+    {\n+        nWalletDBUpdated++;\n+        return Write(std::make_pair(std::string(\"address\"), address), address, false);\n+    }\n+\t\n     bool WriteCryptedKey(const CPubKey& vchPubKey, const std::vector<unsigned char>& vchCryptedSecret, bool fEraseUnencryptedKey = true)\n     {\n         nWalletDBUpdated++;"
      }
    ]
  }
]