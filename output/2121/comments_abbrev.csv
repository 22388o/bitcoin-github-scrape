CodeShark,2012-12-21T07:59:02Z,"Sorry, guys - I changed the branch names and it closed the original pull request https://github.com/bitcoin/bitcoin/pull/2117\n\nThe pull request remains open but under a new name.\n",https://github.com/bitcoin/bitcoin/pull/2121#issuecomment-11605549,11605549,
CodeShark,2012-12-24T05:58:34Z,"A multiple wallet version of bitcoind is underway: https://github.com/bitcoin/bitcoin/pull/2124\n\nThat branch will eventually be merged with this one. In order to distinguish spendable wallets from watch-only wallets, a new member will be added to the CWallet class as well as a new corresponding value to the database file. The CWallet methods as well as RPC calls will then be able to distinguish ",https://github.com/bitcoin/bitcoin/pull/2121#issuecomment-11654887,11654887,
mikegogulski,2012-12-25T00:15:36Z,OMG this is great!\n,https://github.com/bitcoin/bitcoin/pull/2121#issuecomment-11667391,11667391,
BitcoinPullTester,2013-01-24T06:11:04Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/89f806c1d5e171ab48b29eeea8937fb2078e917a for binaries and test log.\n",https://github.com/bitcoin/bitcoin/pull/2121#issuecomment-12638905,12638905,
jgarzik,2013-04-08T18:51:14Z,Neat.  I'm surprised it was this easy.\n,https://github.com/bitcoin/bitcoin/pull/2121#issuecomment-16070503,16070503,
sipa,2013-04-27T17:05:21Z,Just a remark so we don't forget (I haven't checked whether it's possible with this implementation): it'd be nice to have a way to include arbitrary P2SH addresses as watch-only\n,https://github.com/bitcoin/bitcoin/pull/2121#issuecomment-17119482,17119482,
jgarzik,2013-06-19T18:50:55Z,"Looks pretty good.  Minor nit:  ""label"" is deprecated in favor of ""account.""  The help text must be changed.  And if you are going to change the help text, go ahead and name the var strAccount as other, new code does.\n\nWould like to see this merged.\n",https://github.com/bitcoin/bitcoin/pull/2121#issuecomment-19705409,19705409,
sipa,2013-06-19T19:17:55Z,"Yes, please rebase.\n\nRegarding labels vs. accounts - I consider them separate things, which incidentally (and regrettably) overlap (if an address A has label L, payments to A will credit the account also called L). In this case, similarity with the existing API (importprivkey) is more important in any case, so I prefer seeing it called label.\n",https://github.com/bitcoin/bitcoin/pull/2121#issuecomment-19707446,19707446,
ryny24,2013-06-27T00:26:52Z,is it possible to download and test this modification? I'd love to try it. Can't seem to select this branch\n,https://github.com/bitcoin/bitcoin/pull/2121#issuecomment-20089823,20089823,
kyledrake,2013-07-10T15:32:27Z,"I would love to see this rebased and merged! I'm going to be using this functionality for an upcoming new version of [Coinpunk](http://coinpunk.org), to support client-side encryption for private keys, so that `bitcoind` becomes a listener, and cannot spend any of the user's money. This is a huge linchpin in my new version, and it enables this capability for people developing web services and offl",https://github.com/bitcoin/bitcoin/pull/2121#issuecomment-20750593,20750593,
kiaya,2013-07-11T07:15:30Z,I'd also love to see this make the next release. I have a project where I need to watch a large number of addresses without having the private keys on the server. I think the pull request would solve my biggest current development challenge.\n,https://github.com/bitcoin/bitcoin/pull/2121#issuecomment-20794229,20794229,
tstranex,2013-07-11T07:32:40Z,"Just thinking about an alternative to this: Set a wallet passphrase so that all the private keys are encrypted and then write a separate utility to overwrite the encrypted private keys with zeros in the wallet file. Since bitcoind is not going to access the keys anyway while they're encrypted, it shouldn't matter that they're actually zeros. So that will effectively produce watch-only addresses. H",https://github.com/bitcoin/bitcoin/pull/2121#issuecomment-20794862,20794862,
kiaya,2013-07-11T07:40:54Z,"Thanks for this, tstranex. I hadn't considered that. I might look into this as a fall back. In my case, I'm using vanity addresses so actually don't need to create addresses via RPC.\n",https://github.com/bitcoin/bitcoin/pull/2121#issuecomment-20795381,20795381,
luke-jr,2013-07-17T03:50:44Z,@CodeShark Needs rebase.\n\nAlthough I don't think this makes sense to merge until we have HD wallets and it can be an entire read-only address-chain...\n,https://github.com/bitcoin/bitcoin/pull/2121#issuecomment-21090451,21090451,
kyledrake,2013-07-17T06:41:01Z,"I compiled and tested this code, and it seems to work fine. Does it collide with HD wallets? If not, I would really like to advocate for getting this in. I strongly believe that this code solves a critically urgent security problem.\n\nWithout this code, I'm concerned that we may get more services that put private keys on servers simply because they have no choice, which could lead to more major t",https://github.com/bitcoin/bitcoin/pull/2121#issuecomment-21094840,21094840,
luke-jr,2013-07-17T06:50:31Z,"@kyledrake HD wallets should solve all of those issues, that's my point ;)\n",https://github.com/bitcoin/bitcoin/pull/2121#issuecomment-21095113,21095113,
kyledrake,2013-07-18T14:12:44Z,"@luke-jr I'm cool with HD Wallets, but HD Wallets are a long way away. This is a light, simple patch to solve a very big problem, that enables some major new infrastructure for bitcoin. I tried to rebase it and I got very close, I think someone with knowledge of the bitcoin source would very easily be able to rebase this. The biggest hurdle was the @sipa (I think?) refactor of `keystore.cpp`. The ",https://github.com/bitcoin/bitcoin/pull/2121#issuecomment-21185979,21185979,
kyledrake,2013-07-18T14:25:01Z,So here is my rebase attempt:\n\nhttps://github.com/kyledrake/bitcoin/commit/317183993364feaf9833446612f91d776c244698\n\nIt fails to compile on this:\n\n```\nllvm-g++ -c -Wall -Wextra -Wformat -Wformat-security -Wno-unused-parameter -g -DMAC_OSX -DMSG_NOSIGNAL=0 -DBOOST_SPIRIT_THREADSAFE -DUSE_UPNP=1 -DUSE_IPV6=1 -I/Users/kyledrake/bitcoin/src/leveldb/include -I/Users/kyledrake/bitcoin/src/leveldb,https://github.com/bitcoin/bitcoin/pull/2121#issuecomment-21186922,21186922,
luke-jr,2013-07-18T14:49:53Z,I think CSecret became CKey (and the old CKey become CPubKey).\n\nHD wallets IIRC are planned for the next release.\n,https://github.com/bitcoin/bitcoin/pull/2121#issuecomment-21188742,21188742,
sipa,2013-07-18T14:53:13Z,"CKey and CSecret were merged. CPubKey is still CPubKey but inherited some of the pubkey-only functionality of the former CKey.\n\nI consider this a very useful feature, and it's orthogonal to HD wallets. Sure, BIP32 specifies a derivation that can be useful for watch-only wallets, but it still needs to be implemented.\n",https://github.com/bitcoin/bitcoin/pull/2121#issuecomment-21189019,21189019,
kyledrake,2013-07-18T15:10:47Z,"@sipa Do you have any free time this week to look at this? I think it's a really super easy fix for you because you are very familiar with the code (and awesome). I think I got pretty close, I just don't know any C++ and I'm completely unfamiliar with the bitcoin keystore plumbing. http://i.imgur.com/xVyoSl.jpg\n",https://github.com/bitcoin/bitcoin/pull/2121#issuecomment-21190332,21190332,
runeksvendsen,2013-07-18T15:55:17Z,FYI this patch compiles successfully against ec0004aca0a2bf11f99c9587ddb2bf8ea818d3bb.\n\nI've tested `importaddress` with `listtransactions` and `getbalance` and it agrees with blockchain.info.\n,https://github.com/bitcoin/bitcoin/pull/2121#issuecomment-21193634,21193634,
BitcoinPullTester,2013-07-20T11:21:34Z,"Automatic sanity-testing: FAILED MERGE, see http://jenkins.bluematt.me/pull-tester/007a28374165f67d713a318bc37ef1286684cad5 for test log.\n\nThis pull does not merge cleanly onto current master\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is mo",https://github.com/bitcoin/bitcoin/pull/2121#issuecomment-21292048,21292048,
kyledrake,2013-07-25T15:40:50Z,"For those of us in the bitcoind camp using an old unstable master so we can get `importaddress`, I have merged `importaddress` with @runeksvendsen's hint of ec0004a here: https://github.com/kyledrake/bitcoin/tree/importaddressupdate\n\nSince I posted on this pull request, I have gotten emails from people using this commit **in production**, because there is no other alternative. Which makes me exc",https://github.com/bitcoin/bitcoin/pull/2121#issuecomment-21562875,21562875,
sipa,2013-07-25T23:12:35Z,@kyledrake Have a look at #2861.\n,https://github.com/bitcoin/bitcoin/pull/2121#issuecomment-21591425,21591425,
meighti,2013-07-27T14:38:12Z,"It would be nice to add a feature in the code to easily or automatically LOCKUNSPENT all unspent coins of the imported watch-only address. Not to mention that those coins are not spendable without privkey.\n\nIn shell I run this:\nbitcoind lockunspent false $(bitcoind listunspent 0 9999999 '[""12c6DSiU4Rq3P4ZxziKxzrL5LmMBrzjrJX""]' |tr -d ' \n')\n",https://github.com/bitcoin/bitcoin/pull/2121#issuecomment-21666382,21666382,
jgarzik,2013-07-30T14:08:05Z,"Superceded by #2861, closing.\n",https://github.com/bitcoin/bitcoin/pull/2121#issuecomment-21793102,21793102,
cyssxt,2018-03-20T07:03:08Z,Perfect!,https://github.com/bitcoin/bitcoin/pull/2121#issuecomment-374496174,374496174,
