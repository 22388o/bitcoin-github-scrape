laanwj,2018-10-18T20:27:08Z,utACK 96f6dc9fc50b1cc59e26d50940ebf46e1bdcc0ba,https://github.com/bitcoin/bitcoin/pull/14510#issuecomment-431150324,431150324,
gmaxwell,2018-10-18T20:37:47Z,"This should also get fixed src/primitives/transaction.h:    static const uint32_t SEQUENCE_LOCKTIME_DISABLE_FLAG = (1 << 31);\n\nutACK\n",https://github.com/bitcoin/bitcoin/pull/14510#issuecomment-431153707,431153707,
laanwj,2018-10-18T14:43:47Z,"`pn[...]` is uint32_t, how is this ever undefined behavior?\nI don't think C ever ""promotes"" uint32_t to int.\n",https://github.com/bitcoin/bitcoin/pull/14510#discussion_r226334647,226334647,src/arith_uint256.cpp
sipa,2018-10-18T19:07:57Z,"@laanwj With parenthesis it's `pn[pos] & (1 << nbits)`; I believe the type of `(1 << nbits)` is indeed `int`, which in case of `nbits == 31` is exceeding the size of the type.",https://github.com/bitcoin/bitcoin/pull/14510#discussion_r226429925,226429925,src/arith_uint256.cpp
laanwj,2018-10-18T20:24:38Z,"so let's make the counter an 'unsigned' then?\nedit: oh, never mind, it's counting down, that wouldn't really work either...",https://github.com/bitcoin/bitcoin/pull/14510#discussion_r226452669,226452669,src/arith_uint256.cpp
promag,2018-10-18T20:37:20Z,Can you add a test that fails without this fix?,https://github.com/bitcoin/bitcoin/pull/14510#discussion_r226456764,226456764,src/arith_uint256.cpp
laanwj,2018-10-18T20:52:54Z,"no, he can't—the whole problem, the whole shitshow with C and C++ is that you can't predict what will happen with undefined behavior—it can just work with one compiler or version and commit war crimes the next one",https://github.com/bitcoin/bitcoin/pull/14510#discussion_r226461539,226461539,src/arith_uint256.cpp
practicalswift,2018-10-18T21:03:57Z,"@promag How would one test for the presence of undefined behaviour? :-)\n\nIf you are referring to the sanitisers there are no sanitisers flagging this UB AFAIK.",https://github.com/bitcoin/bitcoin/pull/14510#discussion_r226464923,226464923,src/arith_uint256.cpp
