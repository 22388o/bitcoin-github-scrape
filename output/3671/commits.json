[
  {
    "sha": "731b89b8b53cb2ea4d2d5c8f2875def515766ea1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MzFiODliOGI1M2NiMmVhNGQyZDVjOGYyODc1ZGVmNTE1NzY2ZWEx",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2014-02-14T01:12:51Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2014-02-14T23:13:42Z"
      },
      "message": "Track and report wallet transaction clones\n\nAdds a \"walletconflicts\" array to transaction info; if\na wallet transaction is mutated, the alternate transaction id\nor ids are reported there (usually the array will be empty).\n\nMetadata from the original transaction is copied to the mutant,\nso the transaction time and \"from\" account of the mutant are\nreported correctly.",
      "tree": {
        "sha": "161b262a14cf8396ca47f9b3ddbc0790465c3760",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/161b262a14cf8396ca47f9b3ddbc0790465c3760"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/731b89b8b53cb2ea4d2d5c8f2875def515766ea1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/731b89b8b53cb2ea4d2d5c8f2875def515766ea1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/731b89b8b53cb2ea4d2d5c8f2875def515766ea1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/731b89b8b53cb2ea4d2d5c8f2875def515766ea1/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9a3d936fc2e98b1e8234bf27e09cf7bc22811bee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a3d936fc2e98b1e8234bf27e09cf7bc22811bee",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9a3d936fc2e98b1e8234bf27e09cf7bc22811bee"
      }
    ],
    "stats": {
      "total": 137,
      "additions": 128,
      "deletions": 9
    },
    "files": [
      {
        "sha": "6bf92fce40f4ff636de6dd8bc8ac64ccaca027b2",
        "filename": "qa/rpc-tests/txnmall.sh",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/731b89b8b53cb2ea4d2d5c8f2875def515766ea1/qa/rpc-tests/txnmall.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/731b89b8b53cb2ea4d2d5c8f2875def515766ea1/qa/rpc-tests/txnmall.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/txnmall.sh?ref=731b89b8b53cb2ea4d2d5c8f2875def515766ea1",
        "patch": "@@ -88,8 +88,10 @@ B2ADDRESS=$( $CLI $B2ARGS getnewaddress )\n # Have B1 create two transactions; second will\n # spend change from first, since B1 starts with only a single\n # 50 bitcoin output:\n-TXID1=$( $CLI $B1ARGS sendtoaddress $B2ADDRESS 1.0 )\n-TXID2=$( $CLI $B1ARGS sendtoaddress $B2ADDRESS 2.0 )\n+$CLI $B1ARGS move \"\" \"foo\" 10.0\n+$CLI $B1ARGS move \"\" \"bar\" 10.0\n+TXID1=$( $CLI $B1ARGS sendfrom foo $B2ADDRESS 1.0 0)\n+TXID2=$( $CLI $B1ARGS sendfrom bar $B2ADDRESS 2.0 0)\n \n # Mutate TXID1 and add it to B2's memory pool:\n RAWTX1=$( $CLI $B1ARGS getrawtransaction $TXID1 )\n@@ -122,7 +124,9 @@ echo \"Mutated: \" $MUTATEDTXID\n $CLI $B2ARGS addnode 127.0.0.1:11000 onetry\n WaitPeers \"$B1ARGS\" 1\n \n-$CLI $B2ARGS setgenerate true 1\n+$CLI $B2ARGS setgenerate true 3\n+WaitBlocks\n+$CLI $B1ARGS setgenerate true 3\n WaitBlocks\n \n $CLI $B2ARGS stop > /dev/null 2>&1"
      },
      {
        "sha": "97c4008dac812a80e1e1f94c1c0a25a3cdd3dfb9",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 2,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/731b89b8b53cb2ea4d2d5c8f2875def515766ea1/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/731b89b8b53cb2ea4d2d5c8f2875def515766ea1/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=731b89b8b53cb2ea4d2d5c8f2875def515766ea1",
        "patch": "@@ -51,7 +51,12 @@ void WalletTxToJSON(const CWalletTx& wtx, Object& entry)\n         entry.push_back(Pair(\"blockindex\", wtx.nIndex));\n         entry.push_back(Pair(\"blocktime\", (boost::int64_t)(mapBlockIndex[wtx.hashBlock]->nTime)));\n     }\n-    entry.push_back(Pair(\"txid\", wtx.GetHash().GetHex()));\n+    uint256 hash = wtx.GetHash();\n+    entry.push_back(Pair(\"txid\", hash.GetHex()));\n+    Array conflicts;\n+    BOOST_FOREACH(const uint256& conflict, wtx.GetConflicts())\n+        conflicts.push_back(conflict.GetHex());\n+    entry.push_back(Pair(\"walletconflicts\", conflicts));\n     entry.push_back(Pair(\"time\", (boost::int64_t)wtx.GetTxTime()));\n     entry.push_back(Pair(\"timereceived\", (boost::int64_t)wtx.nTimeReceived));\n     BOOST_FOREACH(const PAIRTYPE(string,string)& item, wtx.mapValue)\n@@ -621,7 +626,7 @@ Value getbalance(const Array& params, bool fHelp)\n         for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n         {\n             const CWalletTx& wtx = (*it).second;\n-            if (!wtx.IsTrusted())\n+            if (!wtx.IsTrusted() || wtx.GetBlocksToMaturity() > 0)\n                 continue;\n \n             int64_t allFee;\n@@ -1325,6 +1330,8 @@ Value listaccounts(const Array& params, bool fHelp)\n         string strSentAccount;\n         list<pair<CTxDestination, int64_t> > listReceived;\n         list<pair<CTxDestination, int64_t> > listSent;\n+        if (wtx.GetBlocksToMaturity() > 0)\n+            continue;\n         wtx.GetAmounts(listReceived, listSent, nFee, strSentAccount);\n         mapAccountBalances[strSentAccount] -= nFee;\n         BOOST_FOREACH(const PAIRTYPE(CTxDestination, int64_t)& s, listSent)"
      },
      {
        "sha": "c5010f15db7508f55d0ea7c49ef55d759b53818f",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 98,
        "deletions": 2,
        "changes": 100,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/731b89b8b53cb2ea4d2d5c8f2875def515766ea1/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/731b89b8b53cb2ea4d2d5c8f2875def515766ea1/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=731b89b8b53cb2ea4d2d5c8f2875def515766ea1",
        "patch": "@@ -231,6 +231,82 @@ bool CWallet::SetMaxVersion(int nVersion)\n     return true;\n }\n \n+set<uint256> CWallet::GetConflicts(const uint256& txid) const\n+{\n+    set<uint256> result;\n+    AssertLockHeld(cs_wallet);\n+\n+    std::map<uint256, CWalletTx>::const_iterator it = mapWallet.find(txid);\n+    if (it == mapWallet.end())\n+        return result;\n+    const CWalletTx& wtx = it->second;\n+\n+    std::pair<TxConflicts::const_iterator, TxConflicts::const_iterator> range;\n+\n+    BOOST_FOREACH(const CTxIn& txin, wtx.vin)\n+    {\n+        range = mapTxConflicts.equal_range(txin.prevout);\n+        for (TxConflicts::const_iterator it = range.first; it != range.second; ++it)\n+            result.insert(it->second);\n+    }\n+    return result;\n+}\n+\n+void CWallet::SyncMetaData(pair<TxConflicts::iterator, TxConflicts::iterator> range)\n+{\n+    // We want all the wallet transactions in range to have the same metadata as\n+    // the oldest (smallest nOrderPos).\n+    // So: find smallest nOrderPos:\n+\n+    int nMinOrderPos = std::numeric_limits<int>::max();\n+    const CWalletTx* copyFrom = NULL;\n+    for (TxConflicts::iterator it = range.first; it != range.second; ++it)\n+    {\n+        const uint256& hash = it->second;\n+        int n = mapWallet[hash].nOrderPos;\n+        if (n < nMinOrderPos)\n+        {\n+            nMinOrderPos = n;\n+            copyFrom = &mapWallet[hash];\n+        }\n+    }\n+    // Now copy data from copyFrom to rest:\n+    for (TxConflicts::iterator it = range.first; it != range.second; ++it)\n+    {\n+        const uint256& hash = it->second;\n+        CWalletTx* copyTo = &mapWallet[hash];\n+        if (copyFrom == copyTo) continue;\n+        copyTo->mapValue = copyFrom->mapValue;\n+        copyTo->vOrderForm = copyFrom->vOrderForm;\n+        // fTimeReceivedIsTxTime not copied on purpose\n+        // nTimeReceived not copied on purpose\n+        copyTo->nTimeSmart = copyFrom->nTimeSmart;\n+        copyTo->fFromMe = copyFrom->fFromMe;\n+        copyTo->strFromAccount = copyFrom->strFromAccount;\n+        // vfSpent not copied on purpose\n+        // nOrderPos not copied on purpose\n+        // cached members not copied on purpose\n+    }\n+}\n+\n+void CWallet::AddToConflicts(const uint256& wtxhash)\n+{\n+    assert(mapWallet.count(wtxhash));\n+    CWalletTx& thisTx = mapWallet[wtxhash];\n+    if (thisTx.IsCoinBase())\n+        return;\n+\n+    BOOST_FOREACH(const CTxIn& txin, thisTx.vin)\n+    {\n+        mapTxConflicts.insert(make_pair(txin.prevout, wtxhash));\n+\n+        pair<TxConflicts::iterator, TxConflicts::iterator> range;\n+        range = mapTxConflicts.equal_range(txin.prevout);\n+        if (range.first != range.second)\n+            SyncMetaData(range);\n+    }\n+}\n+\n bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n {\n     if (IsCrypted())\n@@ -385,9 +461,16 @@ void CWallet::MarkDirty()\n     }\n }\n \n-bool CWallet::AddToWallet(const CWalletTx& wtxIn)\n+bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet)\n {\n     uint256 hash = wtxIn.GetHash();\n+\n+    if (fFromLoadWallet)\n+    {\n+        mapWallet[hash] = wtxIn;\n+        AddToConflicts(hash);\n+    }\n+    else\n     {\n         LOCK(cs_wallet);\n         // Inserts only if not already there, returns tx inserted or tx found\n@@ -445,6 +528,7 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn)\n                              wtxIn.GetHash().ToString(),\n                              wtxIn.hashBlock.ToString());\n             }\n+            AddToConflicts(hash);\n         }\n \n         bool fUpdated = false;\n@@ -907,6 +991,18 @@ void CWalletTx::RelayWalletTransaction()\n     }\n }\n \n+set<uint256> CWalletTx::GetConflicts() const\n+{\n+    set<uint256> result;\n+    if (pwallet != NULL)\n+    {\n+        uint256 myHash = GetHash();\n+        result = pwallet->GetConflicts(myHash);\n+        result.erase(myHash);\n+    }\n+    return result;\n+}\n+\n void CWallet::ResendWalletTransactions()\n {\n     // Do this infrequently and randomly to avoid giving away\n@@ -980,7 +1076,7 @@ int64_t CWallet::GetUnconfirmedBalance() const\n         for (map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n         {\n             const CWalletTx* pcoin = &(*it).second;\n-            if (!IsFinalTx(*pcoin) || !pcoin->IsTrusted())\n+            if (!IsFinalTx(*pcoin) || (!pcoin->IsTrusted() && pcoin->GetDepthInMainChain() == 0))\n                 nTotal += pcoin->GetAvailableCredit();\n         }\n     }"
      },
      {
        "sha": "d36bab53bcebbcc38908b2992efcb591e94e87a1",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 13,
        "deletions": 1,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/731b89b8b53cb2ea4d2d5c8f2875def515766ea1/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/731b89b8b53cb2ea4d2d5c8f2875def515766ea1/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=731b89b8b53cb2ea4d2d5c8f2875def515766ea1",
        "patch": "@@ -108,6 +108,12 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n     int64_t nNextResend;\n     int64_t nLastResend;\n \n+    // Used to detect and report conflicted transactions:\n+    typedef std::multimap<COutPoint, uint256> TxConflicts;\n+    TxConflicts mapTxConflicts;\n+    void AddToConflicts(const uint256& wtxhash);\n+    void SyncMetaData(std::pair<TxConflicts::iterator, TxConflicts::iterator>);\n+\n public:\n     /// Main wallet lock.\n     /// This lock protects all the fields added by CWallet\n@@ -151,6 +157,7 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n     }\n \n     std::map<uint256, CWalletTx> mapWallet;\n+\n     int64_t nOrderPosNext;\n     std::map<uint256, int> mapRequestCount;\n \n@@ -223,7 +230,7 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n     TxItems OrderedTxItems(std::list<CAccountingEntry>& acentries, std::string strAccount = \"\");\n \n     void MarkDirty();\n-    bool AddToWallet(const CWalletTx& wtxIn);\n+    bool AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet=false);\n     void SyncTransaction(const uint256 &hash, const CTransaction& tx, const CBlock* pblock);\n     bool AddToWalletIfInvolvingMe(const uint256 &hash, const CTransaction& tx, const CBlock* pblock, bool fUpdate);\n     void EraseFromWallet(const uint256 &hash);\n@@ -357,6 +364,9 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n     // get the current wallet format (the oldest client version guaranteed to understand this wallet)\n     int GetVersion() { AssertLockHeld(cs_wallet); return nWalletVersion; }\n \n+    // Get wallet transactions that conflict with given transaction (spend same outputs)\n+    std::set<uint256> GetConflicts(const uint256& txid) const;\n+\n     /** Address book entry changed.\n      * @note called with lock cs_wallet held.\n      */\n@@ -752,6 +762,8 @@ class CWalletTx : public CMerkleTx\n     void AddSupportingTransactions();\n     bool AcceptWalletTransaction();\n     void RelayWalletTransaction();\n+\n+    std::set<uint256> GetConflicts() const;\n };\n \n "
      },
      {
        "sha": "0b21ce7a66e8f4ba10ecb92136cf1dbf97e888b3",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/731b89b8b53cb2ea4d2d5c8f2875def515766ea1/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/731b89b8b53cb2ea4d2d5c8f2875def515766ea1/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=731b89b8b53cb2ea4d2d5c8f2875def515766ea1",
        "patch": "@@ -382,7 +382,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             if (wtx.nOrderPos == -1)\n                 wss.fAnyUnordered = true;\n \n-            pwallet->mapWallet[hash] = wtx;\n+            pwallet->AddToWallet(wtx, true);\n             //// debug print\n             //LogPrintf(\"LoadWallet  %s\\n\", wtx.GetHash().ToString());\n             //LogPrintf(\" %12\"PRId64\"  %s  %s  %s\\n\","
      }
    ]
  }
]