[
  {
    "sha": "7239d01b0f5c24c3e0441d8f0aa4715637d4deea",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MjM5ZDAxYjBmNWMyNGMzZTA0NDFkOGYwYWE0NzE1NjM3ZDRkZWVh",
    "commit": {
      "author": {
        "name": "Jeffrey Czyz",
        "email": "jkczyz@gmail.com",
        "date": "2019-11-08T21:22:36Z"
      },
      "committer": {
        "name": "Jeffrey Czyz",
        "email": "jkczyz@gmail.com",
        "date": "2019-11-08T21:59:54Z"
      },
      "message": "Refactor FormatStateMessage into ValidationState",
      "tree": {
        "sha": "9788ec557ae2c65f678c17e3f9eb93913ed4ccc5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9788ec557ae2c65f678c17e3f9eb93913ed4ccc5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7239d01b0f5c24c3e0441d8f0aa4715637d4deea",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7239d01b0f5c24c3e0441d8f0aa4715637d4deea",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7239d01b0f5c24c3e0441d8f0aa4715637d4deea",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7239d01b0f5c24c3e0441d8f0aa4715637d4deea/comments",
    "author": {
      "login": "jkczyz",
      "id": 4015903,
      "node_id": "MDQ6VXNlcjQwMTU5MDM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4015903?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jkczyz",
      "html_url": "https://github.com/jkczyz",
      "followers_url": "https://api.github.com/users/jkczyz/followers",
      "following_url": "https://api.github.com/users/jkczyz/following{/other_user}",
      "gists_url": "https://api.github.com/users/jkczyz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jkczyz/subscriptions",
      "organizations_url": "https://api.github.com/users/jkczyz/orgs",
      "repos_url": "https://api.github.com/users/jkczyz/repos",
      "events_url": "https://api.github.com/users/jkczyz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jkczyz/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jkczyz",
      "id": 4015903,
      "node_id": "MDQ6VXNlcjQwMTU5MDM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4015903?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jkczyz",
      "html_url": "https://github.com/jkczyz",
      "followers_url": "https://api.github.com/users/jkczyz/followers",
      "following_url": "https://api.github.com/users/jkczyz/following{/other_user}",
      "gists_url": "https://api.github.com/users/jkczyz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jkczyz/subscriptions",
      "organizations_url": "https://api.github.com/users/jkczyz/orgs",
      "repos_url": "https://api.github.com/users/jkczyz/repos",
      "events_url": "https://api.github.com/users/jkczyz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jkczyz/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9e0aabe50cbbd8b16975721aa0250c3118b3ac59",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e0aabe50cbbd8b16975721aa0250c3118b3ac59",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9e0aabe50cbbd8b16975721aa0250c3118b3ac59"
      }
    ],
    "stats": {
      "total": 95,
      "additions": 36,
      "deletions": 59
    },
    "files": [
      {
        "sha": "f949d99fe2b18c2b6e1c8810914a23828165e3a9",
        "filename": "src/consensus/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7239d01b0f5c24c3e0441d8f0aa4715637d4deea/src/consensus/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7239d01b0f5c24c3e0441d8f0aa4715637d4deea/src/consensus/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/validation.h?ref=7239d01b0f5c24c3e0441d8f0aa4715637d4deea",
        "patch": "@@ -108,6 +108,7 @@ class ValidationState {\n     bool IsError() const { return m_mode == MODE_ERROR; }\n     std::string GetRejectReason() const { return m_reject_reason; }\n     std::string GetDebugMessage() const { return m_debug_message; }\n+    std::string ToString() const { return m_reject_reason + (m_debug_message.empty() ? \"\" : \", \" + m_debug_message); }\n };\n \n inline ValidationState::~ValidationState() {};"
      },
      {
        "sha": "b4d4201a6bdd455d40e145ab7fab09c8cb191b66",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7239d01b0f5c24c3e0441d8f0aa4715637d4deea/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7239d01b0f5c24c3e0441d8f0aa4715637d4deea/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=7239d01b0f5c24c3e0441d8f0aa4715637d4deea",
        "patch": "@@ -51,7 +51,6 @@\n #include <util/system.h>\n #include <util/threadnames.h>\n #include <util/translation.h>\n-#include <util/validation.h>\n #include <validation.h>\n #include <validationinterface.h>\n #include <walletinitinterface.h>\n@@ -698,7 +697,7 @@ static void ThreadImport(std::vector<fs::path> vImportFiles)\n     // scan for better chains in the block chain database, that are not yet connected in the active best chain\n     BlockValidationState state;\n     if (!ActivateBestChain(state, chainparams)) {\n-        LogPrintf(\"Failed to connect best block (%s)\\n\", FormatStateMessage(state));\n+        LogPrintf(\"Failed to connect best block (%s)\\n\", state.ToString());\n         StartShutdown();\n         return;\n     }"
      },
      {
        "sha": "ad99466942805f5f5ce624ddeb104c3956578186",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7239d01b0f5c24c3e0441d8f0aa4715637d4deea/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7239d01b0f5c24c3e0441d8f0aa4715637d4deea/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=7239d01b0f5c24c3e0441d8f0aa4715637d4deea",
        "patch": "@@ -20,7 +20,6 @@\n #include <timedata.h>\n #include <util/moneystr.h>\n #include <util/system.h>\n-#include <util/validation.h>\n \n #include <algorithm>\n #include <utility>\n@@ -164,7 +163,7 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n \n     BlockValidationState state;\n     if (!TestBlockValidity(state, chainparams, *pblock, pindexPrev, false, false)) {\n-        throw std::runtime_error(strprintf(\"%s: TestBlockValidity failed: %s\", __func__, FormatStateMessage(state)));\n+        throw std::runtime_error(strprintf(\"%s: TestBlockValidity failed: %s\", __func__, state.ToString()));\n     }\n     int64_t nTime2 = GetTimeMicros();\n "
      },
      {
        "sha": "3fb5982516a2d51945b20d4cece35202b92f83c7",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7239d01b0f5c24c3e0441d8f0aa4715637d4deea/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7239d01b0f5c24c3e0441d8f0aa4715637d4deea/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=7239d01b0f5c24c3e0441d8f0aa4715637d4deea",
        "patch": "@@ -26,7 +26,6 @@\n #include <txmempool.h>\n #include <util/system.h>\n #include <util/strencodings.h>\n-#include <util/validation.h>\n \n #include <memory>\n \n@@ -1403,7 +1402,7 @@ void static ProcessGetBlockData(CNode* pfrom, const CChainParams& chainparams, c\n     if (need_activate_chain) {\n         BlockValidationState state;\n         if (!ActivateBestChain(state, Params(), a_recent_block)) {\n-            LogPrint(BCLog::NET, \"failed to activate chain (%s)\\n\", FormatStateMessage(state));\n+            LogPrint(BCLog::NET, \"failed to activate chain (%s)\\n\", state.ToString());\n         }\n     }\n \n@@ -2313,7 +2312,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             }\n             BlockValidationState state;\n             if (!ActivateBestChain(state, Params(), a_recent_block)) {\n-                LogPrint(BCLog::NET, \"failed to activate chain (%s)\\n\", FormatStateMessage(state));\n+                LogPrint(BCLog::NET, \"failed to activate chain (%s)\\n\", state.ToString());\n             }\n         }\n \n@@ -2578,7 +2577,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                 // Never relay transactions that might result in being\n                 // disconnected (or banned).\n                 if (state.IsInvalid() && TxRelayMayResultInDisconnect(state)) {\n-                    LogPrintf(\"Not relaying invalid transaction %s from whitelisted peer=%d (%s)\\n\", tx.GetHash().ToString(), pfrom->GetId(), FormatStateMessage(state));\n+                    LogPrintf(\"Not relaying invalid transaction %s from whitelisted peer=%d (%s)\\n\", tx.GetHash().ToString(), pfrom->GetId(), state.ToString());\n                 } else {\n                     LogPrintf(\"Force relaying tx %s from whitelisted peer=%d\\n\", tx.GetHash().ToString(), pfrom->GetId());\n                     RelayTransaction(tx.GetHash(), *connman);\n@@ -2610,7 +2609,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         {\n             LogPrint(BCLog::MEMPOOLREJ, \"%s from peer=%d was not accepted: %s\\n\", tx.GetHash().ToString(),\n                 pfrom->GetId(),\n-                FormatStateMessage(state));\n+                state.ToString());\n             MaybePunishNodeForTx(pfrom->GetId(), state);\n         }\n         return true;"
      },
      {
        "sha": "ab3192226005bc8fce6f14496700dd51e7bd2208",
        "filename": "src/node/transaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7239d01b0f5c24c3e0441d8f0aa4715637d4deea/src/node/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7239d01b0f5c24c3e0441d8f0aa4715637d4deea/src/node/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/transaction.cpp?ref=7239d01b0f5c24c3e0441d8f0aa4715637d4deea",
        "patch": "@@ -7,7 +7,6 @@\n #include <net.h>\n #include <net_processing.h>\n #include <node/context.h>\n-#include <util/validation.h>\n #include <validation.h>\n #include <validationinterface.h>\n #include <node/transaction.h>\n@@ -40,7 +39,7 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n         TxValidationState state;\n         if (!AcceptToMemoryPool(mempool, state, std::move(tx),\n                 nullptr /* plTxnReplaced */, false /* bypass_limits */, max_tx_fee)) {\n-            err_string = FormatStateMessage(state);\n+            err_string = state.ToString();\n             if (state.IsInvalid()) {\n                 if (state.GetResult() == TxValidationResult::TX_MISSING_INPUTS) {\n                     return TransactionError::MISSING_INPUTS;"
      },
      {
        "sha": "ddc10f17fa24e901b2e0975d04f097340eef58cc",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7239d01b0f5c24c3e0441d8f0aa4715637d4deea/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7239d01b0f5c24c3e0441d8f0aa4715637d4deea/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=7239d01b0f5c24c3e0441d8f0aa4715637d4deea",
        "patch": "@@ -30,7 +30,6 @@\n #include <undo.h>\n #include <util/strencodings.h>\n #include <util/system.h>\n-#include <util/validation.h>\n #include <validation.h>\n #include <validationinterface.h>\n #include <warnings.h>\n@@ -1472,7 +1471,7 @@ static UniValue preciousblock(const JSONRPCRequest& request)\n     PreciousBlock(state, Params(), pblockindex);\n \n     if (!state.IsValid()) {\n-        throw JSONRPCError(RPC_DATABASE_ERROR, FormatStateMessage(state));\n+        throw JSONRPCError(RPC_DATABASE_ERROR, state.ToString());\n     }\n \n     return NullUniValue;\n@@ -1510,7 +1509,7 @@ static UniValue invalidateblock(const JSONRPCRequest& request)\n     }\n \n     if (!state.IsValid()) {\n-        throw JSONRPCError(RPC_DATABASE_ERROR, FormatStateMessage(state));\n+        throw JSONRPCError(RPC_DATABASE_ERROR, state.ToString());\n     }\n \n     return NullUniValue;\n@@ -1547,7 +1546,7 @@ static UniValue reconsiderblock(const JSONRPCRequest& request)\n     ActivateBestChain(state, Params());\n \n     if (!state.IsValid()) {\n-        throw JSONRPCError(RPC_DATABASE_ERROR, FormatStateMessage(state));\n+        throw JSONRPCError(RPC_DATABASE_ERROR, state.ToString());\n     }\n \n     return NullUniValue;"
      },
      {
        "sha": "7ec1498b96a41a901b7bcecc527ad405d7bfc5b1",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7239d01b0f5c24c3e0441d8f0aa4715637d4deea/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7239d01b0f5c24c3e0441d8f0aa4715637d4deea/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=7239d01b0f5c24c3e0441d8f0aa4715637d4deea",
        "patch": "@@ -28,7 +28,6 @@\n #include <util/fees.h>\n #include <util/strencodings.h>\n #include <util/system.h>\n-#include <util/validation.h>\n #include <validation.h>\n #include <validationinterface.h>\n #include <versionbitsinfo.h>\n@@ -302,7 +301,7 @@ static UniValue BIP22ValidationResult(const BlockValidationState& state)\n         return NullUniValue;\n \n     if (state.IsError())\n-        throw JSONRPCError(RPC_VERIFY_ERROR, FormatStateMessage(state));\n+        throw JSONRPCError(RPC_VERIFY_ERROR, state.ToString());\n     if (state.IsInvalid())\n     {\n         std::string strRejectReason = state.GetRejectReason();\n@@ -820,7 +819,7 @@ static UniValue submitheader(const JSONRPCRequest& request)\n     ProcessNewBlockHeaders({h}, state, Params());\n     if (state.IsValid()) return NullUniValue;\n     if (state.IsError()) {\n-        throw JSONRPCError(RPC_VERIFY_ERROR, FormatStateMessage(state));\n+        throw JSONRPCError(RPC_VERIFY_ERROR, state.ToString());\n     }\n     throw JSONRPCError(RPC_VERIFY_ERROR, state.GetRejectReason());\n }"
      },
      {
        "sha": "dc4ddf5650b7fbcdb1d3df1715e77cd3b0fa7af1",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7239d01b0f5c24c3e0441d8f0aa4715637d4deea/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7239d01b0f5c24c3e0441d8f0aa4715637d4deea/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=7239d01b0f5c24c3e0441d8f0aa4715637d4deea",
        "patch": "@@ -25,7 +25,6 @@\n #include <util/strencodings.h>\n #include <util/time.h>\n #include <util/translation.h>\n-#include <util/validation.h>\n #include <validation.h>\n #include <validationinterface.h>\n \n@@ -121,7 +120,7 @@ TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(cha\n \n     BlockValidationState state;\n     if (!ActivateBestChain(state, chainparams)) {\n-        throw std::runtime_error(strprintf(\"ActivateBestChain failed. (%s)\", FormatStateMessage(state)));\n+        throw std::runtime_error(strprintf(\"ActivateBestChain failed. (%s)\", state.ToString()));\n     }\n \n     // Start script-checking threads. Set g_parallel_script_checks to true so they are used."
      },
      {
        "sha": "caa6f67cb03034d1abd709b065bcfd74830b79d4",
        "filename": "src/util/validation.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 11,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7239d01b0f5c24c3e0441d8f0aa4715637d4deea/src/util/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7239d01b0f5c24c3e0441d8f0aa4715637d4deea/src/util/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/validation.cpp?ref=7239d01b0f5c24c3e0441d8f0aa4715637d4deea",
        "patch": "@@ -5,15 +5,4 @@\n \n #include <util/validation.h>\n \n-#include <consensus/validation.h>\n-#include <tinyformat.h>\n-\n-/** Convert ValidationState to a human-readable message for logging */\n-std::string FormatStateMessage(const ValidationState &state)\n-{\n-    return strprintf(\"%s%s\",\n-        state.GetRejectReason(),\n-        state.GetDebugMessage().empty() ? \"\" : \", \"+state.GetDebugMessage());\n-}\n-\n const std::string strMessageMagic = \"Bitcoin Signed Message:\\n\";"
      },
      {
        "sha": "c64a05bdf6e2be67e5239ff18ab75ca90a9c186b",
        "filename": "src/util/validation.h",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7239d01b0f5c24c3e0441d8f0aa4715637d4deea/src/util/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7239d01b0f5c24c3e0441d8f0aa4715637d4deea/src/util/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/validation.h?ref=7239d01b0f5c24c3e0441d8f0aa4715637d4deea",
        "patch": "@@ -8,11 +8,6 @@\n \n #include <string>\n \n-class ValidationState;\n-\n-/** Convert ValidationState to a human-readable message for logging */\n-std::string FormatStateMessage(const ValidationState &state);\n-\n extern const std::string strMessageMagic;\n \n #endif // BITCOIN_UTIL_VALIDATION_H"
      },
      {
        "sha": "910fd22e2577f63b2ddbcc7d788a461e30b9e428",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 23,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7239d01b0f5c24c3e0441d8f0aa4715637d4deea/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7239d01b0f5c24c3e0441d8f0aa4715637d4deea/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=7239d01b0f5c24c3e0441d8f0aa4715637d4deea",
        "patch": "@@ -43,7 +43,6 @@\n #include <util/strencodings.h>\n #include <util/system.h>\n #include <util/translation.h>\n-#include <util/validation.h>\n #include <validationinterface.h>\n #include <warnings.h>\n \n@@ -665,7 +664,7 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n \n     CAmount nFees = 0;\n     if (!Consensus::CheckTxInputs(tx, state, m_view, GetSpendHeight(m_view), nFees)) {\n-        return error(\"%s: Consensus::CheckTxInputs: %s, %s\", __func__, tx.GetHash().ToString(), FormatStateMessage(state));\n+        return error(\"%s: Consensus::CheckTxInputs: %s, %s\", __func__, tx.GetHash().ToString(), state.ToString());\n     }\n \n     // Check for non-standard pay-to-script-hash in inputs\n@@ -954,7 +953,7 @@ bool MemPoolAccept::ConsensusScriptChecks(ATMPArgs& args, Workspace& ws, Precomp\n     unsigned int currentBlockScriptVerifyFlags = GetBlockScriptFlags(::ChainActive().Tip(), chainparams.GetConsensus());\n     if (!CheckInputsFromMempoolAndCache(tx, state, m_view, m_pool, currentBlockScriptVerifyFlags, txdata)) {\n         return error(\"%s: BUG! PLEASE REPORT THIS! CheckInputs failed against latest-block but not STANDARD flags %s, %s\",\n-                __func__, hash.ToString(), FormatStateMessage(state));\n+                __func__, hash.ToString(), state.ToString());\n     }\n \n     return true;\n@@ -1916,7 +1915,7 @@ bool CChainState::ConnectBlock(const CBlock& block, BlockValidationState& state,\n             // problems.\n             return AbortNode(state, \"Corrupt block found indicating potential hardware failure; shutting down\");\n         }\n-        return error(\"%s: Consensus::CheckBlock: %s\", __func__, FormatStateMessage(state));\n+        return error(\"%s: Consensus::CheckBlock: %s\", __func__, state.ToString());\n     }\n \n     // verify that the view's current state corresponds to the previous block\n@@ -2094,7 +2093,7 @@ bool CChainState::ConnectBlock(const CBlock& block, BlockValidationState& state,\n                 // Any transaction validation failure in ConnectBlock is a block consensus failure\n                 state.Invalid(BlockValidationResult::BLOCK_CONSENSUS,\n                             tx_state.GetRejectReason(), tx_state.GetDebugMessage());\n-                return error(\"%s: Consensus::CheckTxInputs: %s, %s\", __func__, tx.GetHash().ToString(), FormatStateMessage(state));\n+                return error(\"%s: Consensus::CheckTxInputs: %s, %s\", __func__, tx.GetHash().ToString(), state.ToString());\n             }\n             nFees += txfee;\n             if (!MoneyRange(nFees)) {\n@@ -2137,7 +2136,7 @@ bool CChainState::ConnectBlock(const CBlock& block, BlockValidationState& state,\n                 state.Invalid(BlockValidationResult::BLOCK_CONSENSUS,\n                               tx_state.GetRejectReason(), tx_state.GetDebugMessage());\n                 return error(\"ConnectBlock(): CheckInputs on %s failed with %s\",\n-                    tx.GetHash().ToString(), FormatStateMessage(state));\n+                    tx.GetHash().ToString(), state.ToString());\n             }\n             control.Add(vChecks);\n         }\n@@ -2325,7 +2324,7 @@ void CChainState::ForceFlushStateToDisk() {\n     BlockValidationState state;\n     const CChainParams& chainparams = Params();\n     if (!this->FlushStateToDisk(chainparams, state, FlushStateMode::ALWAYS)) {\n-        LogPrintf(\"%s: failed to flush state (%s)\\n\", __func__, FormatStateMessage(state));\n+        LogPrintf(\"%s: failed to flush state (%s)\\n\", __func__, state.ToString());\n     }\n }\n \n@@ -2335,7 +2334,7 @@ void CChainState::PruneAndFlush() {\n     const CChainParams& chainparams = Params();\n \n     if (!this->FlushStateToDisk(chainparams, state, FlushStateMode::NONE)) {\n-        LogPrintf(\"%s: failed to flush state (%s)\\n\", __func__, FormatStateMessage(state));\n+        LogPrintf(\"%s: failed to flush state (%s)\\n\", __func__, state.ToString());\n     }\n }\n \n@@ -2562,7 +2561,7 @@ bool CChainState::ConnectTip(BlockValidationState& state, const CChainParams& ch\n         if (!rv) {\n             if (state.IsInvalid())\n                 InvalidBlockFound(pindexNew, state);\n-            return error(\"%s: ConnectBlock %s failed, %s\", __func__, pindexNew->GetBlockHash().ToString(), FormatStateMessage(state));\n+            return error(\"%s: ConnectBlock %s failed, %s\", __func__, pindexNew->GetBlockHash().ToString(), state.ToString());\n         }\n         nTime3 = GetTimeMicros(); nTimeConnectTotal += nTime3 - nTime2;\n         LogPrint(BCLog::BENCH, \"  - Connect total: %.2fms [%.2fs (%.2fms/blk)]\\n\", (nTime3 - nTime2) * MILLI, nTimeConnectTotal * MICRO, nTimeConnectTotal * MILLI / nBlocksTotal);\n@@ -3567,7 +3566,7 @@ bool BlockManager::AcceptBlockHeader(const CBlockHeader& block, BlockValidationS\n         }\n \n         if (!CheckBlockHeader(block, state, chainparams.GetConsensus()))\n-            return error(\"%s: Consensus::CheckBlockHeader: %s, %s\", __func__, hash.ToString(), FormatStateMessage(state));\n+            return error(\"%s: Consensus::CheckBlockHeader: %s, %s\", __func__, hash.ToString(), state.ToString());\n \n         // Get prev block index\n         CBlockIndex* pindexPrev = nullptr;\n@@ -3582,7 +3581,7 @@ bool BlockManager::AcceptBlockHeader(const CBlockHeader& block, BlockValidationS\n             return state.Invalid(BlockValidationResult::BLOCK_INVALID_PREV, \"bad-prevblk\");\n         }\n         if (!ContextualCheckBlockHeader(block, state, chainparams, pindexPrev, GetAdjustedTime()))\n-            return error(\"%s: Consensus::ContextualCheckBlockHeader: %s, %s\", __func__, hash.ToString(), FormatStateMessage(state));\n+            return error(\"%s: Consensus::ContextualCheckBlockHeader: %s, %s\", __func__, hash.ToString(), state.ToString());\n \n         /* Determine if this block descends from any block which has been found\n          * invalid (m_failed_blocks), then mark pindexPrev and any blocks between\n@@ -3732,7 +3731,7 @@ bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, Block\n             pindex->nStatus |= BLOCK_FAILED_VALID;\n             setDirtyBlockIndex.insert(pindex);\n         }\n-        return error(\"%s: %s\", __func__, FormatStateMessage(state));\n+        return error(\"%s: %s\", __func__, state.ToString());\n     }\n \n     // Header is valid/has work, merkle tree and segwit merkle tree are good...RELAY NOW\n@@ -3782,15 +3781,15 @@ bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<cons\n         }\n         if (!ret) {\n             GetMainSignals().BlockChecked(*pblock, state);\n-            return error(\"%s: AcceptBlock FAILED (%s)\", __func__, FormatStateMessage(state));\n+            return error(\"%s: AcceptBlock FAILED (%s)\", __func__, state.ToString());\n         }\n     }\n \n     NotifyHeaderTip();\n \n     BlockValidationState state; // Only used to report errors, not invalidity - ignore it\n     if (!::ChainstateActive().ActivateBestChain(state, chainparams, pblock))\n-        return error(\"%s: ActivateBestChain failed (%s)\", __func__, FormatStateMessage(state));\n+        return error(\"%s: ActivateBestChain failed (%s)\", __func__, state.ToString());\n \n     return true;\n }\n@@ -3808,11 +3807,11 @@ bool TestBlockValidity(BlockValidationState& state, const CChainParams& chainpar\n \n     // NOTE: CheckBlockHeader is called by CheckBlock\n     if (!ContextualCheckBlockHeader(block, state, chainparams, pindexPrev, GetAdjustedTime()))\n-        return error(\"%s: Consensus::ContextualCheckBlockHeader: %s\", __func__, FormatStateMessage(state));\n+        return error(\"%s: Consensus::ContextualCheckBlockHeader: %s\", __func__, state.ToString());\n     if (!CheckBlock(block, state, chainparams.GetConsensus(), fCheckPOW, fCheckMerkleRoot))\n-        return error(\"%s: Consensus::CheckBlock: %s\", __func__, FormatStateMessage(state));\n+        return error(\"%s: Consensus::CheckBlock: %s\", __func__, state.ToString());\n     if (!ContextualCheckBlock(block, state, chainparams.GetConsensus(), pindexPrev))\n-        return error(\"%s: Consensus::ContextualCheckBlock: %s\", __func__, FormatStateMessage(state));\n+        return error(\"%s: Consensus::ContextualCheckBlock: %s\", __func__, state.ToString());\n     if (!::ChainstateActive().ConnectBlock(block, state, &indexDummy, viewNew, chainparams, true))\n         return false;\n     assert(state.IsValid());\n@@ -3910,7 +3909,7 @@ void PruneBlockFilesManual(int nManualPruneHeight)\n     const CChainParams& chainparams = Params();\n     if (!::ChainstateActive().FlushStateToDisk(\n             chainparams, state, FlushStateMode::NONE, nManualPruneHeight)) {\n-        LogPrintf(\"%s: failed to flush state (%s)\\n\", __func__, FormatStateMessage(state));\n+        LogPrintf(\"%s: failed to flush state (%s)\\n\", __func__, state.ToString());\n     }\n }\n \n@@ -4228,7 +4227,7 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n         // check level 1: verify block validity\n         if (nCheckLevel >= 1 && !CheckBlock(block, state, chainparams.GetConsensus()))\n             return error(\"%s: *** found bad block at %d, hash=%s (%s)\\n\", __func__,\n-                         pindex->nHeight, pindex->GetBlockHash().ToString(), FormatStateMessage(state));\n+                         pindex->nHeight, pindex->GetBlockHash().ToString(), state.ToString());\n         // check level 2: verify undo validity\n         if (nCheckLevel >= 2 && pindex) {\n             CBlockUndo undo;\n@@ -4277,7 +4276,7 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n             if (!ReadBlockFromDisk(block, pindex, chainparams.GetConsensus()))\n                 return error(\"VerifyDB(): *** ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n             if (!::ChainstateActive().ConnectBlock(block, state, pindex, coins, chainparams))\n-                return error(\"VerifyDB(): *** found unconnectable block at %d, hash=%s (%s)\", pindex->nHeight, pindex->GetBlockHash().ToString(), FormatStateMessage(state));\n+                return error(\"VerifyDB(): *** found unconnectable block at %d, hash=%s (%s)\", pindex->nHeight, pindex->GetBlockHash().ToString(), state.ToString());\n         }\n     }\n \n@@ -4465,7 +4464,7 @@ bool CChainState::RewindBlockIndex(const CChainParams& params)\n \n             // Disconnect block\n             if (!DisconnectTip(state, params, nullptr)) {\n-                return error(\"RewindBlockIndex: unable to disconnect block at height %i (%s)\", tip->nHeight, FormatStateMessage(state));\n+                return error(\"RewindBlockIndex: unable to disconnect block at height %i (%s)\", tip->nHeight, state.ToString());\n             }\n \n             // Reduce validity flag and have-data flags.\n@@ -4485,7 +4484,7 @@ bool CChainState::RewindBlockIndex(const CChainParams& params)\n \n         // Occasionally flush state to disk.\n         if (!FlushStateToDisk(params, state, FlushStateMode::PERIODIC)) {\n-            LogPrintf(\"RewindBlockIndex: unable to flush state to disk (%s)\\n\", FormatStateMessage(state));\n+            LogPrintf(\"RewindBlockIndex: unable to flush state to disk (%s)\\n\", state.ToString());\n             return false;\n         }\n     }\n@@ -4516,7 +4515,7 @@ bool RewindBlockIndex(const CChainParams& params) {\n         // it'll get called a bunch real soon.\n         BlockValidationState state;\n         if (!::ChainstateActive().FlushStateToDisk(params, state, FlushStateMode::ALWAYS)) {\n-            LogPrintf(\"RewindBlockIndex: unable to flush state to disk (%s)\\n\", FormatStateMessage(state));\n+            LogPrintf(\"RewindBlockIndex: unable to flush state to disk (%s)\\n\", state.ToString());\n             return false;\n         }\n     }"
      }
    ]
  },
  {
    "sha": "74700371c8b0c9a7646c7a13ccda0616cf53320b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NDcwMDM3MWM4YjBjOWE3NjQ2YzdhMTNjY2RhMDYxNmNmNTMzMjBi",
    "commit": {
      "author": {
        "name": "Jeffrey Czyz",
        "email": "jkczyz@gmail.com",
        "date": "2019-11-11T23:15:16Z"
      },
      "committer": {
        "name": "Jeffrey Czyz",
        "email": "jkczyz@gmail.com",
        "date": "2019-11-11T23:15:16Z"
      },
      "message": "Remove ValidationState's constructor",
      "tree": {
        "sha": "c3a39ec006cbe9cfddbbece8a51694f1eb6fc3ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c3a39ec006cbe9cfddbbece8a51694f1eb6fc3ab"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/74700371c8b0c9a7646c7a13ccda0616cf53320b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/74700371c8b0c9a7646c7a13ccda0616cf53320b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/74700371c8b0c9a7646c7a13ccda0616cf53320b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/74700371c8b0c9a7646c7a13ccda0616cf53320b/comments",
    "author": {
      "login": "jkczyz",
      "id": 4015903,
      "node_id": "MDQ6VXNlcjQwMTU5MDM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4015903?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jkczyz",
      "html_url": "https://github.com/jkczyz",
      "followers_url": "https://api.github.com/users/jkczyz/followers",
      "following_url": "https://api.github.com/users/jkczyz/following{/other_user}",
      "gists_url": "https://api.github.com/users/jkczyz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jkczyz/subscriptions",
      "organizations_url": "https://api.github.com/users/jkczyz/orgs",
      "repos_url": "https://api.github.com/users/jkczyz/repos",
      "events_url": "https://api.github.com/users/jkczyz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jkczyz/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jkczyz",
      "id": 4015903,
      "node_id": "MDQ6VXNlcjQwMTU5MDM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4015903?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jkczyz",
      "html_url": "https://github.com/jkczyz",
      "followers_url": "https://api.github.com/users/jkczyz/followers",
      "following_url": "https://api.github.com/users/jkczyz/following{/other_user}",
      "gists_url": "https://api.github.com/users/jkczyz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jkczyz/subscriptions",
      "organizations_url": "https://api.github.com/users/jkczyz/orgs",
      "repos_url": "https://api.github.com/users/jkczyz/repos",
      "events_url": "https://api.github.com/users/jkczyz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jkczyz/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7239d01b0f5c24c3e0441d8f0aa4715637d4deea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7239d01b0f5c24c3e0441d8f0aa4715637d4deea",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7239d01b0f5c24c3e0441d8f0aa4715637d4deea"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 1,
      "deletions": 2
    },
    "files": [
      {
        "sha": "27c540917986c40a986cccd88ab166682a4646d3",
        "filename": "src/consensus/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74700371c8b0c9a7646c7a13ccda0616cf53320b/src/consensus/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74700371c8b0c9a7646c7a13ccda0616cf53320b/src/consensus/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/validation.h?ref=74700371c8b0c9a7646c7a13ccda0616cf53320b",
        "patch": "@@ -80,7 +80,7 @@ class ValidationState {\n         MODE_VALID,   //!< everything ok\n         MODE_INVALID, //!< network rule violation (DoS value may be set)\n         MODE_ERROR,   //!< run-time error\n-    } m_mode;\n+    } m_mode{MODE_VALID};\n     std::string m_reject_reason;\n     std::string m_debug_message;\n protected:\n@@ -95,7 +95,6 @@ class ValidationState {\n     // ValidationState is abstract. Have a pure virtual destructor.\n     virtual ~ValidationState() = 0;\n \n-    ValidationState() : m_mode(MODE_VALID) {}\n     bool Error(const std::string& reject_reason)\n     {\n         if (m_mode == MODE_VALID)"
      }
    ]
  },
  {
    "sha": "2948ebd29d0a53f11aefc8546bcac4125c726cc6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOTQ4ZWJkMjlkMGE1M2YxMWFlZmM4NTQ2YmNhYzQxMjVjNzI2Y2M2",
    "commit": {
      "author": {
        "name": "Jeffrey Czyz",
        "email": "jkczyz@gmail.com",
        "date": "2019-11-08T20:14:27Z"
      },
      "committer": {
        "name": "Jeffrey Czyz",
        "email": "jkczyz@gmail.com",
        "date": "2019-11-11T23:17:27Z"
      },
      "message": "Templatize ValidationState instead of subclassing\n\nThis removes boilerplate code in the subclasses which otherwise only\ndiffer by the result type.",
      "tree": {
        "sha": "ac2511b82e889edb6ff5be7525984714b7898ff5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ac2511b82e889edb6ff5be7525984714b7898ff5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2948ebd29d0a53f11aefc8546bcac4125c726cc6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2948ebd29d0a53f11aefc8546bcac4125c726cc6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2948ebd29d0a53f11aefc8546bcac4125c726cc6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2948ebd29d0a53f11aefc8546bcac4125c726cc6/comments",
    "author": {
      "login": "jkczyz",
      "id": 4015903,
      "node_id": "MDQ6VXNlcjQwMTU5MDM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4015903?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jkczyz",
      "html_url": "https://github.com/jkczyz",
      "followers_url": "https://api.github.com/users/jkczyz/followers",
      "following_url": "https://api.github.com/users/jkczyz/following{/other_user}",
      "gists_url": "https://api.github.com/users/jkczyz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jkczyz/subscriptions",
      "organizations_url": "https://api.github.com/users/jkczyz/orgs",
      "repos_url": "https://api.github.com/users/jkczyz/repos",
      "events_url": "https://api.github.com/users/jkczyz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jkczyz/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jkczyz",
      "id": 4015903,
      "node_id": "MDQ6VXNlcjQwMTU5MDM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4015903?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jkczyz",
      "html_url": "https://github.com/jkczyz",
      "followers_url": "https://api.github.com/users/jkczyz/followers",
      "following_url": "https://api.github.com/users/jkczyz/following{/other_user}",
      "gists_url": "https://api.github.com/users/jkczyz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jkczyz/subscriptions",
      "organizations_url": "https://api.github.com/users/jkczyz/orgs",
      "repos_url": "https://api.github.com/users/jkczyz/repos",
      "events_url": "https://api.github.com/users/jkczyz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jkczyz/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "74700371c8b0c9a7646c7a13ccda0616cf53320b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/74700371c8b0c9a7646c7a13ccda0616cf53320b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/74700371c8b0c9a7646c7a13ccda0616cf53320b"
      }
    ],
    "stats": {
      "total": 48,
      "additions": 11,
      "deletions": 37
    },
    "files": [
      {
        "sha": "33bee80808bd7d0b943a91031d859152a0dd242d",
        "filename": "src/consensus/validation.h",
        "status": "modified",
        "additions": 11,
        "deletions": 37,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2948ebd29d0a53f11aefc8546bcac4125c726cc6/src/consensus/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2948ebd29d0a53f11aefc8546bcac4125c726cc6/src/consensus/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/validation.h?ref=2948ebd29d0a53f11aefc8546bcac4125c726cc6",
        "patch": "@@ -71,30 +71,31 @@ enum class BlockValidationResult {\n \n \n \n-/** Base class for capturing information about block/transaction validation. This is subclassed\n+/** Template for capturing information about block/transaction validation. This is instantiated\n  *  by TxValidationState and BlockValidationState for validation information on transactions\n  *  and blocks respectively. */\n+template <typename Result>\n class ValidationState {\n private:\n     enum mode_state {\n         MODE_VALID,   //!< everything ok\n         MODE_INVALID, //!< network rule violation (DoS value may be set)\n         MODE_ERROR,   //!< run-time error\n     } m_mode{MODE_VALID};\n+    Result m_result;\n     std::string m_reject_reason;\n     std::string m_debug_message;\n-protected:\n-    void Invalid(const std::string &reject_reason=\"\",\n+public:\n+    bool Invalid(Result result,\n+                 const std::string &reject_reason=\"\",\n                  const std::string &debug_message=\"\")\n     {\n+        m_result = result;\n         m_reject_reason = reject_reason;\n         m_debug_message = debug_message;\n         if (m_mode != MODE_ERROR) m_mode = MODE_INVALID;\n+        return false;\n     }\n-public:\n-    // ValidationState is abstract. Have a pure virtual destructor.\n-    virtual ~ValidationState() = 0;\n-\n     bool Error(const std::string& reject_reason)\n     {\n         if (m_mode == MODE_VALID)\n@@ -105,41 +106,14 @@ class ValidationState {\n     bool IsValid() const { return m_mode == MODE_VALID; }\n     bool IsInvalid() const { return m_mode == MODE_INVALID; }\n     bool IsError() const { return m_mode == MODE_ERROR; }\n+    Result GetResult() const { return m_result; }\n     std::string GetRejectReason() const { return m_reject_reason; }\n     std::string GetDebugMessage() const { return m_debug_message; }\n     std::string ToString() const { return m_reject_reason + (m_debug_message.empty() ? \"\" : \", \" + m_debug_message); }\n };\n \n-inline ValidationState::~ValidationState() {};\n-\n-class TxValidationState : public ValidationState {\n-private:\n-    TxValidationResult m_result;\n-public:\n-    bool Invalid(TxValidationResult result,\n-                 const std::string &reject_reason=\"\",\n-                 const std::string &debug_message=\"\")\n-    {\n-        m_result = result;\n-        ValidationState::Invalid(reject_reason, debug_message);\n-        return false;\n-    }\n-    TxValidationResult GetResult() const { return m_result; }\n-};\n-\n-class BlockValidationState : public ValidationState {\n-private:\n-    BlockValidationResult m_result;\n-public:\n-    bool Invalid(BlockValidationResult result,\n-                 const std::string &reject_reason=\"\",\n-                 const std::string &debug_message=\"\") {\n-        m_result = result;\n-        ValidationState::Invalid(reject_reason, debug_message);\n-        return false;\n-    }\n-    BlockValidationResult GetResult() const { return m_result; }\n-};\n+class TxValidationState : public ValidationState<TxValidationResult> {};\n+class BlockValidationState : public ValidationState<BlockValidationResult> {};\n \n // These implement the weight = (stripped_size * 4) + witness_size formula,\n // using only serialization with and without witness data. As witness_size"
      }
    ]
  },
  {
    "sha": "38b1f7e9ed135a5c12fe6e3b1fc63511c9f8f726",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOGIxZjdlOWVkMTM1YTVjMTJmZTZlM2IxZmM2MzUxMWM5ZjhmNzI2",
    "commit": {
      "author": {
        "name": "Jeffrey Czyz",
        "email": "jkczyz@gmail.com",
        "date": "2019-11-14T00:36:38Z"
      },
      "committer": {
        "name": "Jeffrey Czyz",
        "email": "jkczyz@gmail.com",
        "date": "2019-11-14T00:36:38Z"
      },
      "message": "Remove unused util/validation.h includes",
      "tree": {
        "sha": "ece624b73f4b223fd0f5f456d7f07de9f386050f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ece624b73f4b223fd0f5f456d7f07de9f386050f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/38b1f7e9ed135a5c12fe6e3b1fc63511c9f8f726",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38b1f7e9ed135a5c12fe6e3b1fc63511c9f8f726",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/38b1f7e9ed135a5c12fe6e3b1fc63511c9f8f726",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38b1f7e9ed135a5c12fe6e3b1fc63511c9f8f726/comments",
    "author": {
      "login": "jkczyz",
      "id": 4015903,
      "node_id": "MDQ6VXNlcjQwMTU5MDM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4015903?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jkczyz",
      "html_url": "https://github.com/jkczyz",
      "followers_url": "https://api.github.com/users/jkczyz/followers",
      "following_url": "https://api.github.com/users/jkczyz/following{/other_user}",
      "gists_url": "https://api.github.com/users/jkczyz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jkczyz/subscriptions",
      "organizations_url": "https://api.github.com/users/jkczyz/orgs",
      "repos_url": "https://api.github.com/users/jkczyz/repos",
      "events_url": "https://api.github.com/users/jkczyz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jkczyz/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jkczyz",
      "id": 4015903,
      "node_id": "MDQ6VXNlcjQwMTU5MDM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4015903?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jkczyz",
      "html_url": "https://github.com/jkczyz",
      "followers_url": "https://api.github.com/users/jkczyz/followers",
      "following_url": "https://api.github.com/users/jkczyz/following{/other_user}",
      "gists_url": "https://api.github.com/users/jkczyz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jkczyz/subscriptions",
      "organizations_url": "https://api.github.com/users/jkczyz/orgs",
      "repos_url": "https://api.github.com/users/jkczyz/repos",
      "events_url": "https://api.github.com/users/jkczyz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jkczyz/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2948ebd29d0a53f11aefc8546bcac4125c726cc6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2948ebd29d0a53f11aefc8546bcac4125c726cc6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2948ebd29d0a53f11aefc8546bcac4125c726cc6"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 0,
      "deletions": 2
    },
    "files": [
      {
        "sha": "932f23564e24902f04b693d8b6a386463f0206a1",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38b1f7e9ed135a5c12fe6e3b1fc63511c9f8f726/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38b1f7e9ed135a5c12fe6e3b1fc63511c9f8f726/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=38b1f7e9ed135a5c12fe6e3b1fc63511c9f8f726",
        "patch": "@@ -12,7 +12,6 @@\n #include <util/moneystr.h>\n #include <util/rbf.h>\n #include <util/system.h>\n-#include <util/validation.h>\n \n //! Check whether transaction has descendant in wallet or mempool, or has been\n //! mined, or conflicts with a mined transaction. Return a feebumper::Result."
      },
      {
        "sha": "d25c7983dce1c1eb2f4764f7850aa538f95d33ab",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38b1f7e9ed135a5c12fe6e3b1fc63511c9f8f726/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38b1f7e9ed135a5c12fe6e3b1fc63511c9f8f726/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=38b1f7e9ed135a5c12fe6e3b1fc63511c9f8f726",
        "patch": "@@ -26,7 +26,6 @@\n #include <util/moneystr.h>\n #include <util/rbf.h>\n #include <util/translation.h>\n-#include <util/validation.h>\n #include <wallet/coincontrol.h>\n #include <wallet/fees.h>\n "
      }
    ]
  },
  {
    "sha": "ec9b0aad35fdf41b877eafba216b0b7b7550ea93",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYzliMGFhZDM1ZmRmNDFiODc3ZWFmYmEyMTZiMGI3Yjc1NTBlYTkz",
    "commit": {
      "author": {
        "name": "Jeffrey Czyz",
        "email": "jkczyz@gmail.com",
        "date": "2019-11-14T23:51:39Z"
      },
      "committer": {
        "name": "Jeffrey Czyz",
        "email": "jkczyz@gmail.com",
        "date": "2019-11-14T23:51:39Z"
      },
      "message": "Refactor message hashing into a utility function\n\nThe code used to produce a message hash when signing and verifying\nmessages was repeated in a few locations. Additionally, the \"magic\" text\nused to prefix the message before hashing is unrelated to validation.\nCreate a utility function for this code rather than spreading it across\nmultiple files.",
      "tree": {
        "sha": "da95e65701a8be964116cbc642a6d550fa66c124",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/da95e65701a8be964116cbc642a6d550fa66c124"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ec9b0aad35fdf41b877eafba216b0b7b7550ea93",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec9b0aad35fdf41b877eafba216b0b7b7550ea93",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ec9b0aad35fdf41b877eafba216b0b7b7550ea93",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec9b0aad35fdf41b877eafba216b0b7b7550ea93/comments",
    "author": {
      "login": "jkczyz",
      "id": 4015903,
      "node_id": "MDQ6VXNlcjQwMTU5MDM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4015903?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jkczyz",
      "html_url": "https://github.com/jkczyz",
      "followers_url": "https://api.github.com/users/jkczyz/followers",
      "following_url": "https://api.github.com/users/jkczyz/following{/other_user}",
      "gists_url": "https://api.github.com/users/jkczyz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jkczyz/subscriptions",
      "organizations_url": "https://api.github.com/users/jkczyz/orgs",
      "repos_url": "https://api.github.com/users/jkczyz/repos",
      "events_url": "https://api.github.com/users/jkczyz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jkczyz/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jkczyz",
      "id": 4015903,
      "node_id": "MDQ6VXNlcjQwMTU5MDM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4015903?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jkczyz",
      "html_url": "https://github.com/jkczyz",
      "followers_url": "https://api.github.com/users/jkczyz/followers",
      "following_url": "https://api.github.com/users/jkczyz/following{/other_user}",
      "gists_url": "https://api.github.com/users/jkczyz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jkczyz/subscriptions",
      "organizations_url": "https://api.github.com/users/jkczyz/orgs",
      "repos_url": "https://api.github.com/users/jkczyz/repos",
      "events_url": "https://api.github.com/users/jkczyz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jkczyz/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "38b1f7e9ed135a5c12fe6e3b1fc63511c9f8f726",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38b1f7e9ed135a5c12fe6e3b1fc63511c9f8f726",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/38b1f7e9ed135a5c12fe6e3b1fc63511c9f8f726"
      }
    ],
    "stats": {
      "total": 102,
      "additions": 53,
      "deletions": 49
    },
    "files": [
      {
        "sha": "42992cd7a6eb0b151c0b7799dcf9cf74d4f724e0",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec9b0aad35fdf41b877eafba216b0b7b7550ea93/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec9b0aad35fdf41b877eafba216b0b7b7550ea93/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=ec9b0aad35fdf41b877eafba216b0b7b7550ea93",
        "patch": "@@ -217,14 +217,14 @@ BITCOIN_CORE_H = \\\n   util/system.h \\\n   util/macros.h \\\n   util/memory.h \\\n+  util/message.h \\\n   util/moneystr.h \\\n   util/rbf.h \\\n   util/string.h \\\n   util/threadnames.h \\\n   util/time.h \\\n   util/translation.h \\\n   util/url.h \\\n-  util/validation.h \\\n   util/vector.h \\\n   validation.h \\\n   validationinterface.h \\\n@@ -511,6 +511,7 @@ libbitcoin_util_a_SOURCES = \\\n   util/error.cpp \\\n   util/fees.cpp \\\n   util/system.cpp \\\n+  util/message.cpp \\\n   util/moneystr.cpp \\\n   util/rbf.cpp \\\n   util/threadnames.cpp \\\n@@ -519,7 +520,6 @@ libbitcoin_util_a_SOURCES = \\\n   util/string.cpp \\\n   util/time.cpp \\\n   util/url.cpp \\\n-  util/validation.cpp \\\n   $(BITCOIN_CORE_H)\n \n if GLIBC_BACK_COMPAT"
      },
      {
        "sha": "2ffe90be062d77b2a96f6dd2041d68a623aa908a",
        "filename": "src/qt/signverifymessagedialog.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 9,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec9b0aad35fdf41b877eafba216b0b7b7550ea93/src/qt/signverifymessagedialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec9b0aad35fdf41b877eafba216b0b7b7550ea93/src/qt/signverifymessagedialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/signverifymessagedialog.cpp?ref=ec9b0aad35fdf41b877eafba216b0b7b7550ea93",
        "patch": "@@ -11,9 +11,10 @@\n #include <qt/walletmodel.h>\n \n #include <key_io.h>\n-#include <util/validation.h> // For strMessageMagic\n+#include <util/message.h>\n #include <wallet/wallet.h>\n \n+#include <string>\n #include <vector>\n \n #include <QClipboard>\n@@ -143,12 +144,10 @@ void SignVerifyMessageDialog::on_signMessageButton_SM_clicked()\n         return;\n     }\n \n-    CHashWriter ss(SER_GETHASH, 0);\n-    ss << strMessageMagic;\n-    ss << ui->messageIn_SM->document()->toPlainText().toStdString();\n+    const std::string message = ui->messageIn_SM->document()->toPlainText().toStdString();\n \n     std::vector<unsigned char> vchSig;\n-    if (!key.SignCompact(ss.GetHash(), vchSig))\n+    if (!key.SignCompact(HashMessage(message), vchSig))\n     {\n         ui->statusLabel_SM->setStyleSheet(\"QLabel { color: red; }\");\n         ui->statusLabel_SM->setText(QString(\"<nobr>\") + tr(\"Message signing failed.\") + QString(\"</nobr>\"));\n@@ -215,12 +214,10 @@ void SignVerifyMessageDialog::on_verifyMessageButton_VM_clicked()\n         return;\n     }\n \n-    CHashWriter ss(SER_GETHASH, 0);\n-    ss << strMessageMagic;\n-    ss << ui->messageIn_VM->document()->toPlainText().toStdString();\n+    const std::string message = ui->messageIn_VM->document()->toPlainText().toStdString();\n \n     CPubKey pubkey;\n-    if (!pubkey.RecoverCompact(ss.GetHash(), vchSig))\n+    if (!pubkey.RecoverCompact(HashMessage(message), vchSig))\n     {\n         ui->signatureIn_VM->setValid(false);\n         ui->statusLabel_VM->setStyleSheet(\"QLabel { color: red; }\");"
      },
      {
        "sha": "93b8d4c48daeed65053bcb79d76b058882822b15",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 11,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec9b0aad35fdf41b877eafba216b0b7b7550ea93/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec9b0aad35fdf41b877eafba216b0b7b7550ea93/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=ec9b0aad35fdf41b877eafba216b0b7b7550ea93",
        "patch": "@@ -11,9 +11,9 @@\n #include <rpc/util.h>\n #include <script/descriptor.h>\n #include <util/check.h>\n+#include <util/message.h>\n #include <util/strencodings.h>\n #include <util/system.h>\n-#include <util/validation.h>\n \n #include <stdint.h>\n #include <tuple>\n@@ -287,12 +287,8 @@ static UniValue verifymessage(const JSONRPCRequest& request)\n     if (fInvalid)\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Malformed base64 encoding\");\n \n-    CHashWriter ss(SER_GETHASH, 0);\n-    ss << strMessageMagic;\n-    ss << strMessage;\n-\n     CPubKey pubkey;\n-    if (!pubkey.RecoverCompact(ss.GetHash(), vchSig))\n+    if (!pubkey.RecoverCompact(HashMessage(strMessage), vchSig))\n         return false;\n \n     return (pubkey.GetID() == *pkhash);\n@@ -327,12 +323,8 @@ static UniValue signmessagewithprivkey(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key\");\n     }\n \n-    CHashWriter ss(SER_GETHASH, 0);\n-    ss << strMessageMagic;\n-    ss << strMessage;\n-\n     std::vector<unsigned char> vchSig;\n-    if (!key.SignCompact(ss.GetHash(), vchSig))\n+    if (!key.SignCompact(HashMessage(strMessage), vchSig))\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Sign failed\");\n \n     return EncodeBase64(vchSig.data(), vchSig.size());"
      },
      {
        "sha": "9a3ddaa7cf77284f5455ea993ec1cd4a428cd168",
        "filename": "src/util/message.cpp",
        "status": "added",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec9b0aad35fdf41b877eafba216b0b7b7550ea93/src/util/message.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec9b0aad35fdf41b877eafba216b0b7b7550ea93/src/util/message.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/message.cpp?ref=ec9b0aad35fdf41b877eafba216b0b7b7550ea93",
        "patch": "@@ -0,0 +1,22 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/message.h>\n+\n+#include <hash.h>\n+#include <serialize.h>\n+\n+#include <string>\n+\n+// Text used to signify that a signed message follows and to prevent\n+// inadvertently signing a transaction.\n+static const std::string MESSAGE_PREAMBLE = \"Bitcoin Signed Message:\\n\";\n+\n+uint256 HashMessage(const std::string& message)\n+{\n+    CHashWriter hasher(SER_GETHASH, 0);\n+    hasher << MESSAGE_PREAMBLE << message;\n+\n+    return hasher.GetHash();\n+}"
      },
      {
        "sha": "1b117ebe71af326d662521db0f1bc2cdeeb0306c",
        "filename": "src/util/message.h",
        "status": "added",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec9b0aad35fdf41b877eafba216b0b7b7550ea93/src/util/message.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec9b0aad35fdf41b877eafba216b0b7b7550ea93/src/util/message.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/message.h?ref=ec9b0aad35fdf41b877eafba216b0b7b7550ea93",
        "patch": "@@ -0,0 +1,18 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_MESSAGE_H\n+#define BITCOIN_UTIL_MESSAGE_H\n+\n+#include <uint256.h>\n+\n+#include <string>\n+\n+/**\n+ * Hashes a message for signing and verification in a manner that prevents\n+ * inadvertently signing a transaction.\n+ */\n+uint256 HashMessage(const std::string& message);\n+\n+#endif // BITCOIN_UTIL_MESSAGE_H"
      },
      {
        "sha": "caa6f67cb03034d1abd709b065bcfd74830b79d4",
        "filename": "src/util/validation.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38b1f7e9ed135a5c12fe6e3b1fc63511c9f8f726/src/util/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38b1f7e9ed135a5c12fe6e3b1fc63511c9f8f726/src/util/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/validation.cpp?ref=38b1f7e9ed135a5c12fe6e3b1fc63511c9f8f726",
        "patch": "@@ -1,8 +0,0 @@\n-// Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2019 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#include <util/validation.h>\n-\n-const std::string strMessageMagic = \"Bitcoin Signed Message:\\n\";"
      },
      {
        "sha": "c64a05bdf6e2be67e5239ff18ab75ca90a9c186b",
        "filename": "src/util/validation.h",
        "status": "removed",
        "additions": 0,
        "deletions": 13,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38b1f7e9ed135a5c12fe6e3b1fc63511c9f8f726/src/util/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38b1f7e9ed135a5c12fe6e3b1fc63511c9f8f726/src/util/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/validation.h?ref=38b1f7e9ed135a5c12fe6e3b1fc63511c9f8f726",
        "patch": "@@ -1,13 +0,0 @@\n-// Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2019 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#ifndef BITCOIN_UTIL_VALIDATION_H\n-#define BITCOIN_UTIL_VALIDATION_H\n-\n-#include <string>\n-\n-extern const std::string strMessageMagic;\n-\n-#endif // BITCOIN_UTIL_VALIDATION_H"
      },
      {
        "sha": "5cb21d143dec4b7eb80dc88f6ea161b18fb41b50",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 6,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec9b0aad35fdf41b877eafba216b0b7b7550ea93/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec9b0aad35fdf41b877eafba216b0b7b7550ea93/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=ec9b0aad35fdf41b877eafba216b0b7b7550ea93",
        "patch": "@@ -19,11 +19,11 @@\n #include <script/sign.h>\n #include <util/bip32.h>\n #include <util/fees.h>\n+#include <util/message.h>\n #include <util/moneystr.h>\n #include <util/string.h>\n #include <util/system.h>\n #include <util/url.h>\n-#include <util/validation.h>\n #include <wallet/coincontrol.h>\n #include <wallet/feebumper.h>\n #include <wallet/psbtwallet.h>\n@@ -567,12 +567,8 @@ static UniValue signmessage(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Private key not available\");\n     }\n \n-    CHashWriter ss(SER_GETHASH, 0);\n-    ss << strMessageMagic;\n-    ss << strMessage;\n-\n     std::vector<unsigned char> vchSig;\n-    if (!key.SignCompact(ss.GetHash(), vchSig))\n+    if (!key.SignCompact(HashMessage(strMessage), vchSig))\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Sign failed\");\n \n     return EncodeBase64(vchSig.data(), vchSig.size());"
      }
    ]
  },
  {
    "sha": "07531c35d60476260abaf4b06328dd921ab3ccf9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNzUzMWMzNWQ2MDQ3NjI2MGFiYWY0YjA2MzI4ZGQ5MjFhYjNjY2Y5",
    "commit": {
      "author": {
        "name": "Jeffrey Czyz",
        "email": "jkczyz@gmail.com",
        "date": "2019-11-14T23:52:52Z"
      },
      "committer": {
        "name": "Jeffrey Czyz",
        "email": "jkczyz@gmail.com",
        "date": "2019-11-15T00:39:46Z"
      },
      "message": "Add a unit test for HashMessage\n\nThe purpose of using a preamble or \"magic\" text as part of signing and\nverifying a message was not given when the code was repeated in a few\nlocations. Make a test showing how it is used to prevent inadvertently\nsigning a transaction.",
      "tree": {
        "sha": "a1e9007578ba1937eb117e857b28c7ba202a5d89",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a1e9007578ba1937eb117e857b28c7ba202a5d89"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/07531c35d60476260abaf4b06328dd921ab3ccf9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07531c35d60476260abaf4b06328dd921ab3ccf9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/07531c35d60476260abaf4b06328dd921ab3ccf9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07531c35d60476260abaf4b06328dd921ab3ccf9/comments",
    "author": {
      "login": "jkczyz",
      "id": 4015903,
      "node_id": "MDQ6VXNlcjQwMTU5MDM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4015903?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jkczyz",
      "html_url": "https://github.com/jkczyz",
      "followers_url": "https://api.github.com/users/jkczyz/followers",
      "following_url": "https://api.github.com/users/jkczyz/following{/other_user}",
      "gists_url": "https://api.github.com/users/jkczyz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jkczyz/subscriptions",
      "organizations_url": "https://api.github.com/users/jkczyz/orgs",
      "repos_url": "https://api.github.com/users/jkczyz/repos",
      "events_url": "https://api.github.com/users/jkczyz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jkczyz/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jkczyz",
      "id": 4015903,
      "node_id": "MDQ6VXNlcjQwMTU5MDM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4015903?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jkczyz",
      "html_url": "https://github.com/jkczyz",
      "followers_url": "https://api.github.com/users/jkczyz/followers",
      "following_url": "https://api.github.com/users/jkczyz/following{/other_user}",
      "gists_url": "https://api.github.com/users/jkczyz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jkczyz/subscriptions",
      "organizations_url": "https://api.github.com/users/jkczyz/orgs",
      "repos_url": "https://api.github.com/users/jkczyz/repos",
      "events_url": "https://api.github.com/users/jkczyz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jkczyz/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ec9b0aad35fdf41b877eafba216b0b7b7550ea93",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec9b0aad35fdf41b877eafba216b0b7b7550ea93",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ec9b0aad35fdf41b877eafba216b0b7b7550ea93"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 27,
      "deletions": 0
    },
    "files": [
      {
        "sha": "6f29a0e3336a338ef33029003db52aa532d0ee40",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/07531c35d60476260abaf4b06328dd921ab3ccf9/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/07531c35d60476260abaf4b06328dd921ab3ccf9/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=07531c35d60476260abaf4b06328dd921ab3ccf9",
        "patch": "@@ -165,6 +165,7 @@ BITCOIN_TESTS =\\\n   test/txvalidation_tests.cpp \\\n   test/txvalidationcache_tests.cpp \\\n   test/uint256_tests.cpp \\\n+  test/util_message_tests.cpp \\\n   test/util_tests.cpp \\\n   test/validation_block_tests.cpp \\\n   test/versionbits_tests.cpp"
      },
      {
        "sha": "3ed0d02ed75603b662b029136c16695268d15656",
        "filename": "src/test/util_message_tests.cpp",
        "status": "added",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/07531c35d60476260abaf4b06328dd921ab3ccf9/src/test/util_message_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/07531c35d60476260abaf4b06328dd921ab3ccf9/src/test/util_message_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_message_tests.cpp?ref=07531c35d60476260abaf4b06328dd921ab3ccf9",
        "patch": "@@ -0,0 +1,26 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/message.h>\n+\n+#include <hash.h>\n+#include <test/util/setup_common.h>\n+#include <uint256.h>\n+\n+#include <string>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(util_message_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(hashes_tx_as_message)\n+{\n+    const std::string unsigned_tx = \"...\";\n+    const uint256 signature_hash = Hash(unsigned_tx.begin(), unsigned_tx.end());\n+\n+    const uint256 message_hash = HashMessage(unsigned_tx);\n+    BOOST_CHECK_NE(message_hash, signature_hash);\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  }
]