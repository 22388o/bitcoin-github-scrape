promag,2018-03-20T18:57:19Z,IMO when the UTXO is spent it should be considered unlocked no?,https://github.com/bitcoin/bitcoin/pull/12739#issuecomment-374716988,374716988,
pedrobranco,2018-03-20T19:11:06Z,"> IMO when the UTXO is spent it should be considered unlocked no?\n\nAgree. Unlocking the unspent when relaying the transaction that spends it is preferable, but is a different scope of this PR since that approach is a breaking change.",https://github.com/bitcoin/bitcoin/pull/12739#issuecomment-374721238,374721238,
promag,2018-03-20T21:50:29Z,Not sure what you mean with breaking change.,https://github.com/bitcoin/bitcoin/pull/12739#issuecomment-374769298,374769298,
pedrobranco,2018-03-21T10:40:34Z,"> Not sure what you mean with breaking change.\n\nIf we unlock the output when sending the raw transaction, calling `lockunspent true <unspents>` will fail because they are already unlocked. It is not a breaking change for `bitcoind`, but for the ones that uses the same flow as the example [here](https://github.com/bitcoin/bitcoin/issues/12738).  ",https://github.com/bitcoin/bitcoin/pull/12739#issuecomment-374895274,374895274,
luke-jr,2018-06-12T16:54:44Z,`lockunspent` probably *should* throw an error if the referenced TXOs aren't unspent...,https://github.com/bitcoin/bitcoin/pull/12739#issuecomment-396660225,396660225,
laanwj,2018-06-24T16:53:06Z,Closing because  #13160 was merged.,https://github.com/bitcoin/bitcoin/pull/12739#issuecomment-399770523,399770523,
Empact,2018-03-21T07:52:52Z,"Seems like this is an improper use of `assert_equal` - basically it's meant to be use with arg1 == all other args, so the two Trues are redundant or mistaken.\n\nhttps://github.com/bitcoin/bitcoin/blob/master/test/functional/test_framework/util.py#L36",https://github.com/bitcoin/bitcoin/pull/12739#discussion_r176001480,176001480,test/functional/wallet_basic.py
