luke-jr,2015-06-29T05:37:15Z,NACK treating policy as a software development decision. Make it a runtime option if you want.\n,https://github.com/bitcoin/bitcoin/pull/6352#issuecomment-116446836,116446836,
petertodd,2015-06-29T05:40:27Z,"@luke-jr It is a runtime option, with a default suggested setting: https://github.com/bitcoin/bitcoin/pull/6352/files#diff-c865a8939105e6350a50af02766291b7R866\n",https://github.com/bitcoin/bitcoin/pull/6352#issuecomment-116448712,116448712,
luke-jr,2015-06-29T05:42:12Z,@petertodd Not the point.\n,https://github.com/bitcoin/bitcoin/pull/6352#issuecomment-116449069,116449069,
petertodd,2015-06-29T06:02:12Z,"@luke-jr As [discussed on IRC](http://bitcoinstats.com/irc/bitcoin-dev/logs/2015/06/29#l1435556448.0), we have practical reasons to want somewhat common mempool policies for the sake of small miners who (currently) have no other way of getting transactions. In the future that may change, but for now we're stuck with defining at least some broad notion of what miner policy might be.\n\nAnyway, not ",https://github.com/bitcoin/bitcoin/pull/6352#issuecomment-116458104,116458104,
jtimon,2015-06-29T09:32:13Z,"My preference would be to support multiple policies simultaneously (ie standard policy, testing policy, standard + full-RBF policy, etc). That would require something like https://github.com/bitcoin/bitcoin/pull/5180 first.\nThat would clarify the notion that the standard policy is not part of the consensus rules (as well as providing more flexibility without having to necessarily expose a zillion",https://github.com/bitcoin/bitcoin/pull/6352#issuecomment-116570829,116570829,
petertodd,2015-06-30T00:21:56Z,"@jtimon Yeah, from a code point of view I also support making policy modular, but keep in mind the point of this pull-req is to set a date for planning purposes so the remaining vulnerable companies can migrate to less harmful, less dangerous, zeroconf technology in a way that minimizes losses and disruption; the situation now is such that for the vulnerable users even a small % of miners adopting",https://github.com/bitcoin/bitcoin/pull/6352#issuecomment-116885961,116885961,
btcdrak,2015-06-30T00:53:29Z,@petertodd I was going to suggest `-1` to turn off fullrbf.\n,https://github.com/bitcoin/bitcoin/pull/6352#issuecomment-116893713,116893713,
petertodd,2015-06-30T01:23:59Z,"Documented -fullrbfactivationtime option, and changed it so -fullrbfactivationtime=0 disables full-RBF entirely to match ergonomics of other options.\n",https://github.com/bitcoin/bitcoin/pull/6352#issuecomment-116903234,116903234,
mikehearn,2015-06-30T09:38:40Z,"As a reminder, this ridiculous and highly controversial idea has been beaten to death elsewhere over and over again. Gavin, Jeff, myself, Adam Back and Coinbase have all explicitly stated opposition to it due to it being driven by fundamentally faulty logic. The counterargument is summed up here\n\nhttps://medium.com/@octskyward/replace-by-fee-43edd9a1dd6d\n",https://github.com/bitcoin/bitcoin/pull/6352#issuecomment-117092181,117092181,
jtimon,2015-06-30T10:50:09Z,"@mikehearn yes, it is clear that this is controversial. There's even people who like this but think that deploying it right now would be too risky for some businesses or want to give more time to instantly secure payments (possible with some payment channels like lightning channels).\nThis is certainly not ridiculous though, and that claim is not constructive.\n\nFortunately this is just node poli",https://github.com/bitcoin/bitcoin/pull/6352#issuecomment-117122721,117122721,
petertodd,2015-06-30T11:57:38Z,"@jtimon ""Policy doesn't require that kind of coordination.""\n\nIt does though! Unfortunately we have the problem that there's no way to get transactions to all but the largest, most centralized, miners other than via the p2p network. Without some pretty major changes to how that network works (e.g. hashcash) any transactions that aren't propagated by the majority of relay nodes just aren't going a",https://github.com/bitcoin/bitcoin/pull/6352#issuecomment-117148116,117148116,
jtimon,2015-06-30T12:14:35Z,"> re: travis, yeah, looks like it's broken again; other pull-reqs are failing too.\n\nSure, just a reminder. Similar to rebase reminders...\n\n> Anyway, re: a switch-over date, in many ways that's us, as Bitcoin Core maintainers, saying ""by this date stop assuming everyone has the same mempool policy"" \n\nRight, so why not just ""from this major release, stop assuming everyone else will have the sa",https://github.com/bitcoin/bitcoin/pull/6352#issuecomment-117155767,117155767,
petertodd,2015-06-30T12:37:43Z,"> Right, so why not just ""from this major release, stop assuming everyone else will have the same mempool policy"" instead?\n\nI think there's an important psychological component to actually having a date for people to have in their heads - it's a clear statement that we're giving the payment processing companies affected by the change 9 months (max) to prepare, but we're not going to delay longer",https://github.com/bitcoin/bitcoin/pull/6352#issuecomment-117161874,117161874,
gavinandresen,2015-06-30T13:02:55Z,NACK on the code changes. Asking people to pull in somebody's personal repo to test code is a bad idea (too much risk it gets hacked and pulls in malware or something).\n\nAnd NACK on the concept. The whole point of the Bitcoin network it to prevent double-spending; making it easier to double-spend is a bad idea.\n,https://github.com/bitcoin/bitcoin/pull/6352#issuecomment-117169831,117169831,
morcos,2015-06-30T14:34:17Z,"@petertodd , why not pursue the path that lets some version of RBF get merged.  #6176 defaulted to FSS, but had an option to switch to full RBF correct?  Would people be ok with that?  And then if you want to separately coordinate a date where interested parties can change their command line option to run with full RBF, thats not even the subject of a PR.  I agree coordination makes sense, but it ",https://github.com/bitcoin/bitcoin/pull/6352#issuecomment-117209285,117209285,
petertodd,2015-06-30T15:08:23Z,"@gavinandresen Note how the testing instructions call out a specific version of python-bitcoinlib by SHA1 commit hash; the repo getting hacked can't cause you to get compromised. Equally, python-bitcoinlib is a widely used and reviewed library, and https://github.com/petertodd/python-bitcoinlib is the ""official"" repo for it.\n\n@morcos It's a good question! I'm giving people a number of options he",https://github.com/bitcoin/bitcoin/pull/6352#issuecomment-117220920,117220920,
gits7r,2015-06-30T15:48:09Z,"@D9B4BEF9 @gavinandresen never said that there is 0 assumption of risk for merchants accepting zeroconf transactions. He just said that full-RBF will make the existing risk higher. The risk is not 0 and cannot be 0 regardless, this is just how bitcoin works (and this is why we need mining and proof of work security). I agree bitcoin should make everything possible to lower the double-spend risk as",https://github.com/bitcoin/bitcoin/pull/6352#issuecomment-117234846,117234846,
coblee,2015-06-30T18:53:22Z,"I just want to chime in from a payment processor (Coinbase) point of view. Full RBF is bad for Coinbase and bad for Bitcoin. If full RBF is turned on today by even a small set of nodes, Coinbase will have to stop accepting 0-conf for all orders. That means customers will need to wait for ~10 minutes for their order to confirm. This makes the checkout experience much worse than existing payment met",https://github.com/bitcoin/bitcoin/pull/6352#issuecomment-117300889,117300889,
morcos,2015-06-30T19:10:01Z,"@coblee You're ok with FSS-RBF though right?   What if we made the default policy of full-RBF be that it only applied if a transaction had been in the mempool for at least 2 blocks.   That way transactions that you estimate have enough fee to likely be confirmed in the next block or two are also ""safe"", but for fixing stuck transactions we can have the flexibility of full-RBF.\n",https://github.com/bitcoin/bitcoin/pull/6352#issuecomment-117308532,117308532,
coblee,2015-06-30T19:58:03Z,"@morcos Yes, FSS-RBF is fine. Why is FSS-RBF not good enough to fix stuck transactions?\n\nHaving complicated rules for this in the core code leads to a lot of potential bugs. RBF seems like something miners should implement themselves and maybe charge for it. I don't think it belongs here as a default policy.\n",https://github.com/bitcoin/bitcoin/pull/6352#issuecomment-117321264,117321264,
luke-jr,2015-06-30T21:33:35Z,"@coblee The last time I tried to use Coinbase to pay a merchant, it required me to fund my Coinbase account first, wait for that to confirm, and only then pay in an instant transfer from my Coinbase account to the merchant. Full RBF should have no effect whatsoever on this usage pattern. (Although I would recommend changing it to at least allow automatically paying the merchant, rather than making",https://github.com/bitcoin/bitcoin/pull/6352#issuecomment-117352058,117352058,
coblee,2015-06-30T21:42:55Z,"@luke-jr Coinbase has always allowed you to pay a merchant by sending btc from any wallet. There was a flow where if someone was requesting money via email, the sender had to pay from their Coinbase account, but this is different from our merchant tools. And this bug has already been fixed. You can now pay money requests with an external wallet also.\n",https://github.com/bitcoin/bitcoin/pull/6352#issuecomment-117353740,117353740,
jtimon,2015-07-09T10:39:18Z,"So it seems there's no complains about making FSS-RBF the standard policy instead of FS.\nWe can expose full-RBF as a non-standard policy (doing something similar to #5180), but since that seems controversial, it seems a better use of review time to get the uncontroversial parts merged first.\nI would even agree to make full-RBF the standard policy for 0.12 directly, but it doesn't look like that'",https://github.com/bitcoin/bitcoin/pull/6352#issuecomment-119906118,119906118,
jtimon,2015-07-09T11:01:17Z,> Having complicated rules for this in the core code leads to a lot of potential bugs. \n\n@coblee full-RBF is much simpler than FSS-RBF.\n,https://github.com/bitcoin/bitcoin/pull/6352#issuecomment-119909217,119909217,
btcdrak,2015-07-09T12:59:26Z,"@jtimon @petertodd  I think it would be best for this PR to default to FSS-RBF, i.e. `-fullrbfactivationtime=0`. That way there is no scheduled turn on time and the default policy is FSS-RBF.\n",https://github.com/bitcoin/bitcoin/pull/6352#issuecomment-119953722,119953722,
btcdrak,2015-07-09T13:00:03Z,@wumpus looks like travis needs a kick\n,https://github.com/bitcoin/bitcoin/pull/6352#issuecomment-119953863,119953863,
jtimon,2015-07-10T12:46:40Z,> I think this should be disabled by default with `nFullRbfActivationTime = 0;`\n\nI think this should be disabled by default with `fReplaceByFee = false;` (no use of time for activation: activation time is whenever the user wants to).\n\nI have created #6416 as a boilerplate for implementing alternative replacement policies.\nIt would be nice to have a 0conf-safe-RBF built on top of that. We coul,https://github.com/bitcoin/bitcoin/pull/6352#issuecomment-120401522,120401522,
petertodd,2015-07-17T05:32:30Z,"Closing for now, as this code will need to be re-worked for whatever memory-limited mempool proposal gets merged.\n",https://github.com/bitcoin/bitcoin/pull/6352#issuecomment-122179477,122179477,
