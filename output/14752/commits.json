[
  {
    "sha": "bce9aaf31e2b0428e686e151324f8561ad71f11f",
    "node_id": "C_kwDOABII59oAKGJjZTlhYWYzMWUyYjA0MjhlNjg2ZTE1MTMyNGY4NTYxYWQ3MWYxMWY",
    "commit": {
      "author": {
        "name": "Daniel Kraft",
        "email": "d@domob.eu",
        "date": "2018-11-18T14:55:50Z"
      },
      "committer": {
        "name": "Daniel Kraft",
        "email": "d@domob.eu",
        "date": "2021-10-15T04:46:25Z"
      },
      "message": "Unit tests for IsWitnessProgram and IsP2WSH.\n\nThe new unit test file script_segwit_tests.cpp contains some basic\nunit tests for CScript::IsPayToWitnessScriptHash and\nCScript::IsWitnessProgram.",
      "tree": {
        "sha": "8580ed0434c38bd812eaba8ed3500eb55d9f72bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8580ed0434c38bd812eaba8ed3500eb55d9f72bd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bce9aaf31e2b0428e686e151324f8561ad71f11f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bce9aaf31e2b0428e686e151324f8561ad71f11f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bce9aaf31e2b0428e686e151324f8561ad71f11f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bce9aaf31e2b0428e686e151324f8561ad71f11f/comments",
    "author": {
      "login": "domob1812",
      "id": 4943644,
      "node_id": "MDQ6VXNlcjQ5NDM2NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/domob1812",
      "html_url": "https://github.com/domob1812",
      "followers_url": "https://api.github.com/users/domob1812/followers",
      "following_url": "https://api.github.com/users/domob1812/following{/other_user}",
      "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions",
      "organizations_url": "https://api.github.com/users/domob1812/orgs",
      "repos_url": "https://api.github.com/users/domob1812/repos",
      "events_url": "https://api.github.com/users/domob1812/events{/privacy}",
      "received_events_url": "https://api.github.com/users/domob1812/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "domob1812",
      "id": 4943644,
      "node_id": "MDQ6VXNlcjQ5NDM2NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/domob1812",
      "html_url": "https://github.com/domob1812",
      "followers_url": "https://api.github.com/users/domob1812/followers",
      "following_url": "https://api.github.com/users/domob1812/following{/other_user}",
      "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions",
      "organizations_url": "https://api.github.com/users/domob1812/orgs",
      "repos_url": "https://api.github.com/users/domob1812/repos",
      "events_url": "https://api.github.com/users/domob1812/events{/privacy}",
      "received_events_url": "https://api.github.com/users/domob1812/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6419bdfeb130b20ccfed229d9ba7eca7f385d036",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6419bdfeb130b20ccfed229d9ba7eca7f385d036",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6419bdfeb130b20ccfed229d9ba7eca7f385d036"
      }
    ],
    "stats": {
      "total": 165,
      "additions": 165,
      "deletions": 0
    },
    "files": [
      {
        "sha": "b91af5a0411b75c0b9b4ce7c403b560b6cee9124",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bce9aaf31e2b0428e686e151324f8561ad71f11f/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bce9aaf31e2b0428e686e151324f8561ad71f11f/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=bce9aaf31e2b0428e686e151324f8561ad71f11f",
        "patch": "@@ -120,6 +120,7 @@ BITCOIN_TESTS =\\\n   test/scheduler_tests.cpp \\\n   test/script_p2sh_tests.cpp \\\n   test/script_parse_tests.cpp \\\n+  test/script_segwit_tests.cpp \\\n   test/script_standard_tests.cpp \\\n   test/script_tests.cpp \\\n   test/scriptnum_tests.cpp \\"
      },
      {
        "sha": "2bad59805fa79359aa828af86d6cbd6170459301",
        "filename": "src/test/script_segwit_tests.cpp",
        "status": "added",
        "additions": 164,
        "deletions": 0,
        "changes": 164,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bce9aaf31e2b0428e686e151324f8561ad71f11f/src/test/script_segwit_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bce9aaf31e2b0428e686e151324f8561ad71f11f/src/test/script_segwit_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_segwit_tests.cpp?ref=bce9aaf31e2b0428e686e151324f8561ad71f11f",
        "patch": "@@ -0,0 +1,164 @@\n+// Copyright (c) 2012-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <script/script.h>\n+#include <test/util/setup_common.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(script_segwit_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(IsPayToWitnessScriptHash_Valid)\n+{\n+    uint256 dummy;\n+    CScript p2wsh;\n+    p2wsh << OP_0 << ToByteVector(dummy);\n+    BOOST_CHECK(p2wsh.IsPayToWitnessScriptHash());\n+\n+    std::vector<unsigned char> bytes = {OP_0, 32};\n+    bytes.insert(bytes.end(), 32, 0);\n+    BOOST_CHECK(CScript(bytes.begin(), bytes.end()).IsPayToWitnessScriptHash());\n+}\n+\n+BOOST_AUTO_TEST_CASE(IsPayToWitnessScriptHash_Invalid_NotOp0)\n+{\n+    uint256 dummy;\n+    CScript notp2wsh;\n+    notp2wsh << OP_1 << ToByteVector(dummy);\n+    BOOST_CHECK(!notp2wsh.IsPayToWitnessScriptHash());\n+}\n+\n+BOOST_AUTO_TEST_CASE(IsPayToWitnessScriptHash_Invalid_Size)\n+{\n+    uint160 dummy;\n+    CScript notp2wsh;\n+    notp2wsh << OP_0 << ToByteVector(dummy);\n+    BOOST_CHECK(!notp2wsh.IsPayToWitnessScriptHash());\n+}\n+\n+BOOST_AUTO_TEST_CASE(IsPayToWitnessScriptHash_Invalid_Nop)\n+{\n+    uint256 dummy;\n+    CScript notp2wsh;\n+    notp2wsh << OP_0 << OP_NOP << ToByteVector(dummy);\n+    BOOST_CHECK(!notp2wsh.IsPayToWitnessScriptHash());\n+}\n+\n+BOOST_AUTO_TEST_CASE(IsPayToWitnessScriptHash_Invalid_EmptyScript)\n+{\n+    CScript notp2wsh;\n+    BOOST_CHECK(!notp2wsh.IsPayToWitnessScriptHash());\n+}\n+\n+BOOST_AUTO_TEST_CASE(IsPayToWitnessScriptHash_Invalid_Pushdata)\n+{\n+    // A script is not P2WSH if OP_PUSHDATA is used to push the hash.\n+    std::vector<unsigned char> bytes = {OP_0, OP_PUSHDATA1, 32};\n+    bytes.insert(bytes.end(), 32, 0);\n+    BOOST_CHECK(!CScript(bytes.begin(), bytes.end()).IsPayToWitnessScriptHash());\n+\n+    bytes = {OP_0, OP_PUSHDATA2, 32, 0};\n+    bytes.insert(bytes.end(), 32, 0);\n+    BOOST_CHECK(!CScript(bytes.begin(), bytes.end()).IsPayToWitnessScriptHash());\n+\n+    bytes = {OP_0, OP_PUSHDATA4, 32, 0, 0, 0};\n+    bytes.insert(bytes.end(), 32, 0);\n+    BOOST_CHECK(!CScript(bytes.begin(), bytes.end()).IsPayToWitnessScriptHash());\n+}\n+\n+namespace {\n+\n+bool IsExpectedWitnessProgram(const CScript& script, const int expectedVersion, const std::vector<unsigned char>& expectedProgram)\n+{\n+    int actualVersion;\n+    std::vector<unsigned char> actualProgram;\n+    if (!script.IsWitnessProgram(actualVersion, actualProgram)) {\n+        return false;\n+    }\n+    BOOST_CHECK_EQUAL(actualVersion, expectedVersion);\n+    BOOST_CHECK(actualProgram == expectedProgram);\n+    return true;\n+}\n+\n+bool IsNoWitnessProgram(const CScript& script)\n+{\n+    int dummyVersion;\n+    std::vector<unsigned char> dummyProgram;\n+    return !script.IsWitnessProgram(dummyVersion, dummyProgram);\n+}\n+\n+} // anonymous namespace\n+\n+BOOST_AUTO_TEST_CASE(IsWitnessProgram_Valid)\n+{\n+    // Witness programs have a minimum data push of 2 bytes.\n+    std::vector<unsigned char> program = {42, 18};\n+    CScript wit;\n+    wit << OP_0 << program;\n+    BOOST_CHECK(IsExpectedWitnessProgram(wit, 0, program));\n+\n+    wit.clear();\n+    // Witness programs have a maximum data push of 40 bytes.\n+    program.resize(40);\n+    wit << OP_16 << program;\n+    BOOST_CHECK(IsExpectedWitnessProgram(wit, 16, program));\n+\n+    program.resize(32);\n+    std::vector<unsigned char> bytes = {OP_5, static_cast<unsigned char>(program.size())};\n+    bytes.insert(bytes.end(), program.begin(), program.end());\n+    BOOST_CHECK(IsExpectedWitnessProgram(CScript(bytes.begin(), bytes.end()), 5, program));\n+}\n+\n+BOOST_AUTO_TEST_CASE(IsWitnessProgram_Invalid_Version)\n+{\n+    std::vector<unsigned char> program(10);\n+    CScript nowit;\n+    nowit << OP_1NEGATE << program;\n+    BOOST_CHECK(IsNoWitnessProgram(nowit));\n+}\n+\n+BOOST_AUTO_TEST_CASE(IsWitnessProgram_Invalid_Size)\n+{\n+    std::vector<unsigned char> program(1);\n+    CScript nowit;\n+    nowit << OP_0 << program;\n+    BOOST_CHECK(IsNoWitnessProgram(nowit));\n+\n+    nowit.clear();\n+    program.resize(41);\n+    nowit << OP_0 << program;\n+    BOOST_CHECK(IsNoWitnessProgram(nowit));\n+}\n+\n+BOOST_AUTO_TEST_CASE(IsWitnessProgram_Invalid_Nop)\n+{\n+    std::vector<unsigned char> program(10);\n+    CScript nowit;\n+    nowit << OP_0 << OP_NOP << program;\n+    BOOST_CHECK(IsNoWitnessProgram(nowit));\n+}\n+\n+BOOST_AUTO_TEST_CASE(IsWitnessProgram_Invalid_EmptyScript)\n+{\n+    CScript nowit;\n+    BOOST_CHECK(IsNoWitnessProgram(nowit));\n+}\n+\n+BOOST_AUTO_TEST_CASE(IsWitnessProgram_Invalid_Pushdata)\n+{\n+    // A script is no witness program if OP_PUSHDATA is used to push the hash.\n+    std::vector<unsigned char> bytes = {OP_0, OP_PUSHDATA1, 32};\n+    bytes.insert(bytes.end(), 32, 0);\n+    BOOST_CHECK(IsNoWitnessProgram(CScript(bytes.begin(), bytes.end())));\n+\n+    bytes = {OP_0, OP_PUSHDATA2, 32, 0};\n+    bytes.insert(bytes.end(), 32, 0);\n+    BOOST_CHECK(IsNoWitnessProgram(CScript(bytes.begin(), bytes.end())));\n+\n+    bytes = {OP_0, OP_PUSHDATA4, 32, 0, 0, 0};\n+    bytes.insert(bytes.end(), 32, 0);\n+    BOOST_CHECK(IsNoWitnessProgram(CScript(bytes.begin(), bytes.end())));\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  }
]